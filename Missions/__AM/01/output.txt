// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3967 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3824 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: IFFALSE 1146
1140: PUSH
1141: LD_LOC 20
1145: AND
1146: IFFALSE 1439
1148: GO 1150
1150: DISABLE
1151: LD_INT 0
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
1159: PPUSH
1160: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1161: LD_ADDR_VAR 0 1
1165: PUSH
1166: LD_LOC 3
1170: PPUSH
1171: LD_LOC 4
1175: PPUSH
1176: CALL_OW 296
1180: ST_TO_ADDR
// x = getx ( john ) ;
1181: LD_ADDR_VAR 0 4
1185: PUSH
1186: LD_LOC 3
1190: PPUSH
1191: CALL_OW 250
1195: ST_TO_ADDR
// y = gety ( john ) ;
1196: LD_ADDR_VAR 0 5
1200: PUSH
1201: LD_LOC 3
1205: PPUSH
1206: CALL_OW 251
1210: ST_TO_ADDR
// tmp2 = [ ] ;
1211: LD_ADDR_VAR 0 2
1215: PUSH
1216: EMPTY
1217: ST_TO_ADDR
// tmp3 = [ ] ;
1218: LD_ADDR_VAR 0 3
1222: PUSH
1223: EMPTY
1224: ST_TO_ADDR
// if tmp >= 7 then
1225: LD_VAR 0 1
1229: PUSH
1230: LD_INT 7
1232: GREATEREQUAL
1233: IFFALSE 1438
// begin for dir = 0 to 5 do
1235: LD_ADDR_VAR 0 8
1239: PUSH
1240: DOUBLE
1241: LD_INT 0
1243: DEC
1244: ST_TO_ADDR
1245: LD_INT 5
1247: PUSH
1248: FOR_TO
1249: IFFALSE 1389
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1251: LD_ADDR_VAR 0 6
1255: PUSH
1256: LD_VAR 0 4
1260: PPUSH
1261: LD_VAR 0 8
1265: PPUSH
1266: LD_VAR 0 1
1270: PUSH
1271: LD_INT 2
1273: MINUS
1274: PPUSH
1275: CALL_OW 272
1279: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1280: LD_ADDR_VAR 0 7
1284: PUSH
1285: LD_VAR 0 5
1289: PPUSH
1290: LD_VAR 0 8
1294: PPUSH
1295: LD_VAR 0 1
1299: PUSH
1300: LD_INT 2
1302: MINUS
1303: PPUSH
1304: CALL_OW 273
1308: ST_TO_ADDR
// if ValidHex ( px , py ) then
1309: LD_VAR 0 6
1313: PPUSH
1314: LD_VAR 0 7
1318: PPUSH
1319: CALL_OW 488
1323: IFFALSE 1387
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1325: LD_ADDR_VAR 0 2
1329: PUSH
1330: LD_VAR 0 2
1334: PUSH
1335: LD_VAR 0 6
1339: PUSH
1340: LD_VAR 0 7
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: EMPTY
1350: LIST
1351: ADD
1352: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1353: LD_ADDR_VAR 0 3
1357: PUSH
1358: LD_VAR 0 3
1362: PUSH
1363: LD_LOC 4
1367: PPUSH
1368: LD_VAR 0 6
1372: PPUSH
1373: LD_VAR 0 7
1377: PPUSH
1378: CALL_OW 297
1382: PUSH
1383: EMPTY
1384: LIST
1385: ADD
1386: ST_TO_ADDR
// end end ;
1387: GO 1248
1389: POP
1390: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1391: LD_ADDR_VAR 0 1
1395: PUSH
1396: LD_VAR 0 2
1400: PPUSH
1401: LD_VAR 0 3
1405: PPUSH
1406: CALL_OW 79
1410: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1411: LD_LOC 4
1415: PPUSH
1416: LD_VAR 0 1
1420: PUSH
1421: LD_INT 1
1423: ARRAY
1424: PPUSH
1425: LD_VAR 0 1
1429: PUSH
1430: LD_INT 2
1432: ARRAY
1433: PPUSH
1434: CALL_OW 111
// end ; enable ;
1438: ENABLE
// end ;
1439: PPOPN 8
1441: END
// on destinationunreachable ( un ) do if un = joan then
1442: LD_VAR 0 1
1446: PUSH
1447: LD_LOC 4
1451: EQUAL
1452: IFFALSE 1483
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1454: LD_LOC 4
1458: PPUSH
1459: LD_LOC 3
1463: PPUSH
1464: CALL_OW 250
1468: PPUSH
1469: LD_LOC 3
1473: PPUSH
1474: CALL_OW 251
1478: PPUSH
1479: CALL_OW 111
1483: PPOPN 1
1485: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1486: LD_LOC 3
1490: PPUSH
1491: CALL_OW 318
1495: IFFALSE 1526
1497: GO 1499
1499: DISABLE
// begin if not killhim then
1500: LD_LOC 16
1504: NOT
1505: IFFALSE 1519
// say ( joan , DXComments-Joan-1 ) ;
1507: LD_LOC 4
1511: PPUSH
1512: LD_STRING DXComments-Joan-1
1514: PPUSH
1515: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1519: LD_STRING ACH_TROLL
1521: PPUSH
1522: CALL_OW 543
// end ;
1526: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1527: LD_LOC 3
1531: PPUSH
1532: LD_INT 2
1534: PPUSH
1535: CALL_OW 308
1539: IFFALSE 1563
1541: GO 1543
1543: DISABLE
// begin if not killhim then
1544: LD_LOC 16
1548: NOT
1549: IFFALSE 1563
// say ( joan , DXComments-Joan-1a ) ;
1551: LD_LOC 4
1555: PPUSH
1556: LD_STRING DXComments-Joan-1a
1558: PPUSH
1559: CALL_OW 88
// end ;
1563: END
// every 0 0$1 + 1 1$10 marked 29 do
1564: GO 1566
1566: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1567: LD_LOC 3
1571: PPUSH
1572: LD_INT 3
1574: PPUSH
1575: CALL_OW 308
1579: NOT
1580: IFFALSE 1603
// begin if not killhim then
1582: LD_LOC 16
1586: NOT
1587: IFFALSE 1601
// say ( joan , DXComments-Joan-1b ) ;
1589: LD_LOC 4
1593: PPUSH
1594: LD_STRING DXComments-Joan-1b
1596: PPUSH
1597: CALL_OW 88
// end else
1601: GO 1604
// enable ;
1603: ENABLE
// end ;
1604: END
// every 0 0$0.3 trigger not killhim marked 097 do
1605: LD_LOC 16
1609: NOT
1610: IFFALSE 2126
1612: GO 1614
1614: DISABLE
// begin if joanok then
1615: LD_LOC 13
1619: IFFALSE 1794
// if getlives ( joan ) < 1000 then
1621: LD_LOC 4
1625: PPUSH
1626: CALL_OW 256
1630: PUSH
1631: LD_INT 1000
1633: LESS
1634: IFFALSE 1794
// begin if debug then
1636: LD_LOC 19
1640: IFFALSE 1660
// msg ( joan:  & getlives ( joan ) ) ;
1642: LD_STRING joan: 
1644: PUSH
1645: LD_LOC 4
1649: PPUSH
1650: CALL_OW 256
1654: STR
1655: PPUSH
1656: CALL_OW 100
// comhold ( joan ) ;
1660: LD_LOC 4
1664: PPUSH
1665: CALL_OW 140
// dialogueon ;
1669: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1673: LD_LOC 4
1677: PPUSH
1678: LD_STRING DXAttack-Joan-1
1680: PPUSH
1681: CALL_OW 88
// killhim = true ;
1685: LD_ADDR_LOC 16
1689: PUSH
1690: LD_INT 1
1692: ST_TO_ADDR
// music_class = 1 ;
1693: LD_ADDR_OWVAR 72
1697: PUSH
1698: LD_INT 1
1700: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1701: LD_LOC 4
1705: PPUSH
1706: LD_LOC 5
1710: PPUSH
1711: CALL_OW 250
1715: PPUSH
1716: LD_LOC 5
1720: PPUSH
1721: CALL_OW 251
1725: PPUSH
1726: CALL_OW 111
// wait ( 0 0$1 ) ;
1730: LD_INT 35
1732: PPUSH
1733: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1737: LD_LOC 1
1741: PPUSH
1742: LD_LOC 2
1746: PPUSH
1747: LD_INT 2
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1757: LD_LOC 11
1761: PUSH
1762: LD_LOC 10
1766: PUSH
1767: LD_EXP 1
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: ADD
1776: PPUSH
1777: LD_LOC 3
1781: PPUSH
1782: CALL_OW 115
// joanok = false ;
1786: LD_ADDR_LOC 13
1790: PUSH
1791: LD_INT 0
1793: ST_TO_ADDR
// end ; if oothersok then
1794: LD_LOC 14
1798: IFFALSE 1993
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1800: LD_LOC 11
1804: PUSH
1805: LD_LOC 10
1809: PUSH
1810: LD_EXP 1
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: ADD
1819: PPUSH
1820: CALL_OW 256
1824: PUSH
1825: LD_INT 1000
1827: LESS
1828: IFFALSE 1993
// begin if debug then
1830: LD_LOC 19
1834: IFFALSE 1863
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1836: LD_STRING others+off: 
1838: PUSH
1839: LD_LOC 11
1843: PUSH
1844: LD_LOC 10
1848: PUSH
1849: EMPTY
1850: LIST
1851: ADD
1852: PPUSH
1853: CALL_OW 256
1857: STR
1858: PPUSH
1859: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1863: LD_LOC 11
1867: PUSH
1868: LD_LOC 10
1872: PUSH
1873: EMPTY
1874: LIST
1875: ADD
1876: PPUSH
1877: CALL_OW 140
// dialogueon ;
1881: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1885: LD_LOC 4
1889: PPUSH
1890: LD_STRING DXAttack-Joan-1a
1892: PPUSH
1893: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1897: LD_INT 24
1899: PPUSH
1900: CALL_OW 67
// killhim = true ;
1904: LD_ADDR_LOC 16
1908: PUSH
1909: LD_INT 1
1911: ST_TO_ADDR
// music_class = 1 ;
1912: LD_ADDR_OWVAR 72
1916: PUSH
1917: LD_INT 1
1919: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1920: LD_LOC 5
1924: PPUSH
1925: LD_STRING DXAttack-Sik-1
1927: PPUSH
1928: CALL_OW 88
// dialogueoff ;
1932: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1936: LD_LOC 1
1940: PPUSH
1941: LD_LOC 2
1945: PPUSH
1946: LD_INT 2
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1956: LD_LOC 11
1960: PUSH
1961: LD_LOC 10
1965: PUSH
1966: LD_EXP 1
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: ADD
1975: PPUSH
1976: LD_LOC 3
1980: PPUSH
1981: CALL_OW 115
// oothersok = false ;
1985: LD_ADDR_LOC 14
1989: PUSH
1990: LD_INT 0
1992: ST_TO_ADDR
// end ; if buildingsok then
1993: LD_LOC 15
1997: IFFALSE 2118
// if getlives ( budovy ) < 1000 then
1999: LD_LOC 12
2003: PPUSH
2004: CALL_OW 256
2008: PUSH
2009: LD_INT 1000
2011: LESS
2012: IFFALSE 2118
// begin if debug then
2014: LD_LOC 19
2018: IFFALSE 2038
// msg ( budovy:  & getlives ( budovy ) ) ;
2020: LD_STRING budovy: 
2022: PUSH
2023: LD_LOC 12
2027: PPUSH
2028: CALL_OW 256
2032: STR
2033: PPUSH
2034: CALL_OW 100
// dialogueon ;
2038: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2042: LD_LOC 4
2046: PPUSH
2047: LD_STRING DXAttack-Joan-1b
2049: PPUSH
2050: CALL_OW 88
// dialogueoff ;
2054: CALL_OW 7
// follow = false ;
2058: LD_ADDR_LOC 20
2062: PUSH
2063: LD_INT 0
2065: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2066: LD_LOC 4
2070: PPUSH
2071: LD_LOC 5
2075: PPUSH
2076: CALL_OW 250
2080: PPUSH
2081: LD_LOC 5
2085: PPUSH
2086: CALL_OW 251
2090: PPUSH
2091: CALL_OW 111
// buildingsok = false ;
2095: LD_ADDR_LOC 15
2099: PUSH
2100: LD_INT 0
2102: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2103: LD_ADDR_LOC 17
2107: PUSH
2108: LD_LOC 12
2112: PPUSH
2113: CALL_OW 256
2117: ST_TO_ADDR
// end ; if not killhim then
2118: LD_LOC 16
2122: NOT
2123: IFFALSE 2126
// enable ;
2125: ENABLE
// end ;
2126: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2127: LD_LOC 15
2131: NOT
2132: IFFALSE 2141
2134: PUSH
2135: LD_LOC 16
2139: NOT
2140: AND
2141: IFFALSE 2264
2143: GO 2145
2145: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2146: LD_LOC 17
2150: PUSH
2151: LD_LOC 12
2155: PPUSH
2156: CALL_OW 256
2160: MINUS
2161: PUSH
2162: LD_INT 7
2164: GREATER
2165: IFFALSE 2263
// begin disable ( 097 ) ;
2167: LD_INT 97
2169: DISABLE_MARKED
// disable_07 = true ;
2170: LD_ADDR_LOC 18
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// dialogueon ;
2178: CALL_OW 6
// music_class = 1 ;
2182: LD_ADDR_OWVAR 72
2186: PUSH
2187: LD_INT 1
2189: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2190: LD_LOC 5
2194: PPUSH
2195: LD_STRING DXAttack-Sik-1
2197: PPUSH
2198: CALL_OW 88
// dialogueoff ;
2202: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2206: LD_LOC 1
2210: PPUSH
2211: LD_LOC 2
2215: PPUSH
2216: LD_INT 2
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2226: LD_LOC 11
2230: PUSH
2231: LD_LOC 10
2235: PUSH
2236: LD_EXP 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: ADD
2245: PPUSH
2246: LD_LOC 3
2250: PPUSH
2251: CALL_OW 115
// killhim = true ;
2255: LD_ADDR_LOC 16
2259: PUSH
2260: LD_INT 1
2262: ST_TO_ADDR
// end ; enable ;
2263: ENABLE
// end ;
2264: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2265: LD_LOC 3
2269: PPUSH
2270: CALL_OW 310
2274: PUSH
2275: LD_INT 27
2277: EQUAL
2278: IFFALSE 2287
2280: PUSH
2281: LD_LOC 16
2285: NOT
2286: AND
2287: IFFALSE 2388
2289: GO 2291
2291: DISABLE
// begin disable ( 097 ) ;
2292: LD_INT 97
2294: DISABLE_MARKED
// disable_07 = true ;
2295: LD_ADDR_LOC 18
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// dialogueon ;
2303: CALL_OW 6
// music_class = 1 ;
2307: LD_ADDR_OWVAR 72
2311: PUSH
2312: LD_INT 1
2314: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2315: LD_LOC 5
2319: PPUSH
2320: LD_STRING DXAttack-Sik-1
2322: PPUSH
2323: CALL_OW 88
// dialogueoff ;
2327: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2331: LD_LOC 1
2335: PPUSH
2336: LD_LOC 2
2340: PPUSH
2341: LD_INT 2
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2351: LD_LOC 11
2355: PUSH
2356: LD_LOC 10
2360: PUSH
2361: LD_EXP 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: ADD
2370: PPUSH
2371: LD_LOC 3
2375: PPUSH
2376: CALL_OW 115
// killhim = true ;
2380: LD_ADDR_LOC 16
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// end ;
2388: END
// on unitgoestored ( un ) do if un = john then
2389: LD_VAR 0 1
2393: PUSH
2394: LD_LOC 3
2398: EQUAL
2399: IFFALSE 2490
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2401: LD_LOC 10
2405: PPUSH
2406: LD_LOC 3
2410: PPUSH
2411: CALL_OW 250
2415: PPUSH
2416: LD_LOC 3
2420: PPUSH
2421: CALL_OW 251
2425: PPUSH
2426: CALL_OW 111
// wait ( 0 0$1 ) ;
2430: LD_INT 35
2432: PPUSH
2433: CALL_OW 67
// InGameOn ;
2437: CALL_OW 8
// SetLives ( john , 240 ) ;
2441: LD_LOC 3
2445: PPUSH
2446: LD_INT 240
2448: PPUSH
2449: CALL_OW 234
// SetSide ( john , 8 ) ;
2453: LD_LOC 3
2457: PPUSH
2458: LD_INT 8
2460: PPUSH
2461: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2465: LD_LOC 10
2469: PPUSH
2470: LD_STRING DXAttack-Off-1
2472: PPUSH
2473: CALL_OW 88
// InGameOff ;
2477: CALL_OW 9
// youlost ( Dissmiss ) ;
2481: LD_STRING Dissmiss
2483: PPUSH
2484: CALL_OW 104
// end else
2488: GO 2614
// if not disable_07 then
2490: LD_LOC 18
2494: NOT
2495: IFFALSE 2614
// if ( not killhim ) then
2497: LD_LOC 16
2501: NOT
2502: IFFALSE 2614
// if ( gettype ( un ) = unit_human ) then
2504: LD_VAR 0 1
2508: PPUSH
2509: CALL_OW 247
2513: PUSH
2514: LD_INT 1
2516: EQUAL
2517: IFFALSE 2614
// begin disable ( 06 ) ;
2519: LD_INT 6
2521: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2522: LD_INT 18
2524: PPUSH
2525: CALL_OW 67
// dialogueon ;
2529: CALL_OW 6
// music_class = 1 ;
2533: LD_ADDR_OWVAR 72
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2541: LD_LOC 5
2545: PPUSH
2546: LD_STRING DXAttack-Sik-1
2548: PPUSH
2549: CALL_OW 88
// dialogueoff ;
2553: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2557: LD_LOC 1
2561: PPUSH
2562: LD_LOC 2
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: LD_INT 1
2572: PPUSH
2573: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2577: LD_LOC 11
2581: PUSH
2582: LD_LOC 10
2586: PUSH
2587: LD_EXP 1
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: ADD
2596: PPUSH
2597: LD_LOC 3
2601: PPUSH
2602: CALL_OW 115
// killhim = true ;
2606: LD_ADDR_LOC 16
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// end ;
2614: PPOPN 1
2616: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2617: LD_LOC 3
2621: PPUSH
2622: LD_INT 4
2624: PPUSH
2625: CALL_OW 308
2629: IFFALSE 2638
2631: PUSH
2632: LD_LOC 16
2636: NOT
2637: AND
2638: IFFALSE 3416
2640: GO 2642
2642: DISABLE
// begin follow = false ;
2643: LD_ADDR_LOC 20
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// if Crawls ( john ) then
2651: LD_LOC 3
2655: PPUSH
2656: CALL_OW 318
2660: IFFALSE 2678
// begin ComWalk ( john ) ;
2662: LD_LOC 3
2666: PPUSH
2667: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2671: LD_INT 10
2673: PPUSH
2674: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2678: LD_INT 14
2680: PUSH
2681: EMPTY
2682: LIST
2683: PPUSH
2684: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2688: LD_LOC 3
2692: PPUSH
2693: LD_INT 75
2695: PPUSH
2696: LD_INT 36
2698: PPUSH
2699: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2703: LD_LOC 4
2707: PPUSH
2708: LD_LOC 3
2712: PPUSH
2713: CALL_OW 119
// InGameOn ;
2717: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2721: LD_LOC 3
2725: PPUSH
2726: LD_LOC 10
2730: PPUSH
2731: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2735: LD_LOC 10
2739: PPUSH
2740: LD_STRING DXReady-Off-1
2742: PPUSH
2743: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2747: LD_LOC 5
2751: PPUSH
2752: LD_LOC 6
2756: PPUSH
2757: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2761: LD_LOC 5
2765: PPUSH
2766: LD_STRING DXReady-Sik-1
2768: PPUSH
2769: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2773: LD_STRING DXReady-All-1
2775: PPUSH
2776: CALL_OW 96
// wait ( 0 0$2 ) ;
2780: LD_INT 70
2782: PPUSH
2783: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2787: LD_LOC 6
2791: PPUSH
2792: LD_LOC 5
2796: PPUSH
2797: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2801: LD_LOC 6
2805: PPUSH
2806: LD_STRING DXReady-Don-1
2808: PPUSH
2809: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2813: LD_STRING DXReady-All-2
2815: PPUSH
2816: CALL_OW 96
// wait ( 0 0$2 ) ;
2820: LD_INT 70
2822: PPUSH
2823: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2827: LD_EXP 1
2831: PPUSH
2832: LD_STRING DXReady-Off2-1
2834: PPUSH
2835: CALL_OW 88
// wait ( 0 0$1 ) ;
2839: LD_INT 35
2841: PPUSH
2842: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2846: LD_EXP 1
2850: PPUSH
2851: LD_STRING DXReady-Off2-2
2853: PPUSH
2854: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2858: LD_LOC 10
2862: PPUSH
2863: LD_INT 72
2865: PPUSH
2866: LD_INT 29
2868: PPUSH
2869: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2873: LD_EXP 1
2877: PPUSH
2878: LD_INT 73
2880: PPUSH
2881: LD_INT 31
2883: PPUSH
2884: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2888: LD_LOC 3
2892: PPUSH
2893: LD_INT 67
2895: PPUSH
2896: LD_INT 28
2898: PPUSH
2899: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2903: LD_LOC 6
2907: PPUSH
2908: LD_INT 68
2910: PPUSH
2911: LD_INT 30
2913: PPUSH
2914: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2918: LD_LOC 7
2922: PPUSH
2923: LD_INT 69
2925: PPUSH
2926: LD_INT 32
2928: PPUSH
2929: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2933: LD_LOC 5
2937: PPUSH
2938: LD_INT 66
2940: PPUSH
2941: LD_INT 28
2943: PPUSH
2944: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2948: LD_LOC 8
2952: PPUSH
2953: LD_INT 67
2955: PPUSH
2956: LD_INT 30
2958: PPUSH
2959: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2963: LD_LOC 9
2967: PPUSH
2968: LD_INT 68
2970: PPUSH
2971: LD_INT 32
2973: PPUSH
2974: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2978: LD_LOC 10
2982: PPUSH
2983: LD_INT 49
2985: PPUSH
2986: LD_INT 27
2988: PPUSH
2989: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2993: LD_EXP 1
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: LD_INT 27
3003: PPUSH
3004: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3008: LD_LOC 3
3012: PPUSH
3013: LD_INT 85
3015: PPUSH
3016: LD_INT 33
3018: PPUSH
3019: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3023: LD_LOC 6
3027: PPUSH
3028: LD_INT 85
3030: PPUSH
3031: LD_INT 33
3033: PPUSH
3034: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3038: LD_LOC 7
3042: PPUSH
3043: LD_INT 85
3045: PPUSH
3046: LD_INT 33
3048: PPUSH
3049: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3053: LD_LOC 5
3057: PPUSH
3058: LD_INT 85
3060: PPUSH
3061: LD_INT 33
3063: PPUSH
3064: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3068: LD_LOC 8
3072: PPUSH
3073: LD_INT 85
3075: PPUSH
3076: LD_INT 33
3078: PPUSH
3079: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3083: LD_LOC 9
3087: PPUSH
3088: LD_INT 85
3090: PPUSH
3091: LD_INT 33
3093: PPUSH
3094: CALL_OW 178
// wait ( 0 0$9 ) ;
3098: LD_INT 315
3100: PPUSH
3101: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_STRING DXReady-Off2-3
3112: PPUSH
3113: CALL_OW 88
// wait ( 0 0$1 ) ;
3117: LD_INT 35
3119: PPUSH
3120: CALL_OW 67
// case query ( QQuit ) of 1 :
3124: LD_STRING QQuit
3126: PPUSH
3127: CALL_OW 97
3131: PUSH
3132: LD_INT 1
3134: DOUBLE
3135: EQUAL
3136: IFTRUE 3140
3138: GO 3209
3140: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3141: LD_EXP 1
3145: PPUSH
3146: LD_STRING DQrQuit#1-Off2-1
3148: PPUSH
3149: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3153: LD_LOC 3
3157: PPUSH
3158: LD_STRING DQrQuit#1-JMM-1a
3160: PPUSH
3161: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3165: LD_EXP 1
3169: PPUSH
3170: LD_STRING DQrQuit#1-Off2-2
3172: PPUSH
3173: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3177: LD_LOC 3
3181: PPUSH
3182: LD_INT 73
3184: PPUSH
3185: LD_INT 49
3187: PPUSH
3188: CALL_OW 111
// wait ( 0 0$3 ) ;
3192: LD_INT 105
3194: PPUSH
3195: CALL_OW 67
// ingameoff ;
3199: CALL_OW 9
// YouDidSomethingExtraordinary ;
3203: CALL_OW 105
// end ; 2 :
3207: GO 3416
3209: LD_INT 2
3211: DOUBLE
3212: EQUAL
3213: IFTRUE 3217
3215: GO 3415
3217: POP
// begin disable ( 29 ) ;
3218: LD_INT 29
3220: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3221: LD_INT 35
3223: PPUSH
3224: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3228: LD_EXP 1
3232: PPUSH
3233: LD_STRING DXReady-Off2-4
3235: PPUSH
3236: CALL_OW 88
// wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3247: LD_LOC 10
3251: PPUSH
3252: LD_STRING DXReady-Off-2
3254: PPUSH
3255: CALL_OW 88
// comenterunit ( will , eon ) ;
3259: LD_LOC 8
3263: PPUSH
3264: LD_INT 14
3266: PPUSH
3267: CALL_OW 120
// wait ( 0 0$3 ) ;
3271: LD_INT 105
3273: PPUSH
3274: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3278: LD_LOC 10
3282: PPUSH
3283: LD_STRING DXReady-Off-3
3285: PPUSH
3286: CALL_OW 88
// comenterunit ( sik , eon ) ;
3290: LD_LOC 5
3294: PPUSH
3295: LD_INT 14
3297: PPUSH
3298: CALL_OW 120
// wait ( 0 0$3 ) ;
3302: LD_INT 105
3304: PPUSH
3305: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3309: LD_LOC 10
3313: PPUSH
3314: LD_STRING DXReady-Off-4
3316: PPUSH
3317: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3321: LD_LOC 6
3325: PPUSH
3326: LD_INT 14
3328: PPUSH
3329: CALL_OW 120
// wait ( 0 0$3 ) ;
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3340: LD_LOC 10
3344: PPUSH
3345: LD_STRING DXReady-Off-5
3347: PPUSH
3348: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3352: LD_LOC 3
3356: PPUSH
3357: LD_INT 76
3359: PPUSH
3360: LD_INT 34
3362: PPUSH
3363: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3367: LD_LOC 3
3371: PPUSH
3372: LD_INT 76
3374: PPUSH
3375: LD_INT 33
3377: PPUSH
3378: CALL_OW 178
// wait ( 0 0$4 ) ;
3382: LD_INT 140
3384: PPUSH
3385: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3389: LD_LOC 3
3393: PPUSH
3394: LD_STRING DQrQuit#2-JMM-1
3396: PPUSH
3397: CALL_OW 88
// comenterunit ( john , eon ) ;
3401: LD_LOC 3
3405: PPUSH
3406: LD_INT 14
3408: PPUSH
3409: CALL_OW 120
// end ; end ;
3413: GO 3416
3415: POP
// end ;
3416: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3417: LD_LOC 3
3421: PPUSH
3422: LD_INT 48
3424: PPUSH
3425: LD_INT 66
3427: PPUSH
3428: CALL_OW 297
3432: PUSH
3433: LD_INT 5
3435: LESS
3436: IFFALSE 3453
3438: GO 3440
3440: DISABLE
// ForceExclamation ( john , 28 ) ;
3441: LD_LOC 3
3445: PPUSH
3446: LD_INT 28
3448: PPUSH
3449: CALL_OW 582
3453: END
// on enterbuilding ( b , un ) do begin if b = eon then
3454: LD_VAR 0 1
3458: PUSH
3459: LD_INT 14
3461: EQUAL
3462: IFFALSE 3642
// case un of john :
3464: LD_VAR 0 2
3468: PUSH
3469: LD_LOC 3
3473: DOUBLE
3474: EQUAL
3475: IFTRUE 3479
3477: GO 3632
3479: POP
// if not killhim then
3480: LD_LOC 16
3484: NOT
3485: IFFALSE 3589
// begin music_class := 6 ;
3487: LD_ADDR_OWVAR 72
3491: PUSH
3492: LD_INT 6
3494: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3495: LD_INT 70
3497: PPUSH
3498: CALL_OW 67
// DialogueOn ;
3502: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3506: LD_INT 1
3508: PPUSH
3509: LD_INT 1
3511: PPUSH
3512: CALL_OW 86
// RemoveUnit ( joan ) ;
3516: LD_LOC 4
3520: PPUSH
3521: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3525: LD_INT 1
3527: PPUSH
3528: LD_INT 8
3530: PPUSH
3531: CALL_OW 343
// ResetFog ;
3535: CALL_OW 335
// wait ( 0 0$1 ) ;
3539: LD_INT 35
3541: PPUSH
3542: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3546: LD_LOC 4
3550: PPUSH
3551: LD_STRING DX1-Joan-4
3553: PPUSH
3554: CALL_OW 88
// savecharacters ( john , JMM ) ;
3558: LD_LOC 3
3562: PPUSH
3563: LD_STRING JMM
3565: PPUSH
3566: CALL_OW 38
// wait ( 0 0$1 ) ;
3570: LD_INT 35
3572: PPUSH
3573: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3577: LD_STRING 1
3579: PPUSH
3580: LD_STRING %_cont
3582: PPUSH
3583: CALL_OW 340
// end else
3587: GO 3630
// begin placeunitxy ( john , 76 , 34 , false ) ;
3589: LD_LOC 3
3593: PPUSH
3594: LD_INT 76
3596: PPUSH
3597: LD_INT 34
3599: PPUSH
3600: LD_INT 0
3602: PPUSH
3603: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3607: LD_LOC 11
3611: PUSH
3612: LD_LOC 10
3616: PUSH
3617: EMPTY
3618: LIST
3619: ADD
3620: PPUSH
3621: LD_LOC 3
3625: PPUSH
3626: CALL_OW 115
// end ; else
3630: GO 3642
3632: POP
// RemoveUnit ( un ) ; end ;
3633: LD_VAR 0 2
3637: PPUSH
3638: CALL_OW 64
// end ;
3642: PPOPN 2
3644: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3645: LD_VAR 0 1
3649: PUSH
3650: LD_INT 1
3652: EQUAL
3653: IFFALSE 3665
3655: PUSH
3656: LD_VAR 0 2
3660: PUSH
3661: LD_INT 4
3663: EQUAL
3664: AND
3665: IFFALSE 3677
3667: PUSH
3668: LD_LOC 16
3672: PUSH
3673: LD_INT 0
3675: EQUAL
3676: AND
3677: IFFALSE 3771
// begin wait ( 0 0$1 ) ;
3679: LD_INT 35
3681: PPUSH
3682: CALL_OW 67
// music_class = 1 ;
3686: LD_ADDR_OWVAR 72
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// DialogueOn ;
3694: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3698: LD_LOC 5
3702: PPUSH
3703: LD_STRING DXAttack-Sik-1
3705: PPUSH
3706: CALL_OW 88
// dialogueoff ;
3710: CALL_OW 7
// killhim = true ;
3714: LD_ADDR_LOC 16
3718: PUSH
3719: LD_INT 1
3721: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3722: LD_LOC 1
3726: PPUSH
3727: LD_LOC 2
3731: PPUSH
3732: LD_INT 2
3734: PPUSH
3735: LD_INT 1
3737: PPUSH
3738: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3742: LD_LOC 11
3746: PUSH
3747: LD_LOC 10
3751: PUSH
3752: LD_EXP 1
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: ADD
3761: PPUSH
3762: LD_LOC 3
3766: PPUSH
3767: CALL_OW 115
// end ; end ;
3771: PPOPN 2
3773: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3774: LD_VAR 0 2
3778: PUSH
3779: LD_LOC 3
3783: EQUAL
3784: IFFALSE 3821
// begin async ;
3786: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3787: LD_LOC 4
3791: PPUSH
3792: LD_STRING DXComments-Joan-1
3794: PPUSH
3795: CALL_OW 88
// ComExitVehicle ( john ) ;
3799: LD_LOC 3
3803: PPUSH
3804: CALL_OW 121
// SetSide ( veh , 4 ) ;
3808: LD_VAR 0 1
3812: PPUSH
3813: LD_INT 4
3815: PPUSH
3816: CALL_OW 235
// sync ;
3820: SYNC
// end ; end ; end_of_file
3821: PPOPN 2
3823: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3824: LD_INT 0
3826: PPUSH
// uc_side := 4 ;
3827: LD_ADDR_OWVAR 20
3831: PUSH
3832: LD_INT 4
3834: ST_TO_ADDR
// uc_nation := nation_american ;
3835: LD_ADDR_OWVAR 21
3839: PUSH
3840: LD_INT 1
3842: ST_TO_ADDR
// hc_importance = 50 ;
3843: LD_ADDR_OWVAR 32
3847: PUSH
3848: LD_INT 50
3850: ST_TO_ADDR
// hc_sex = sex_male ;
3851: LD_ADDR_OWVAR 27
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// hc_class = 1 ;
3859: LD_ADDR_OWVAR 28
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3867: LD_ADDR_OWVAR 30
3871: PUSH
3872: LD_INT 7
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: LD_INT 2
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3890: LD_ADDR_OWVAR 31
3894: PUSH
3895: LD_INT 7
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 2
3903: PUSH
3904: LD_INT 2
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3913: LD_ADDR_OWVAR 29
3917: PUSH
3918: LD_INT 11
3920: PUSH
3921: LD_INT 11
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: ST_TO_ADDR
// hc_name := Officer2 ;
3928: LD_ADDR_OWVAR 26
3932: PUSH
3933: LD_STRING Officer2
3935: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3936: LD_ADDR_OWVAR 33
3940: PUSH
3941: LD_STRING AmGalRemake
3943: ST_TO_ADDR
// hc_face_number := 3 ;
3944: LD_ADDR_OWVAR 34
3948: PUSH
3949: LD_INT 3
3951: ST_TO_ADDR
// off2 := CreateHuman ;
3952: LD_ADDR_EXP 1
3956: PUSH
3957: CALL_OW 44
3961: ST_TO_ADDR
// end ;
3962: LD_VAR 0 1
3966: RET
// export function CreatePersonnel ; begin
3967: LD_INT 0
3969: PPUSH
// uc_side := 4 ;
3970: LD_ADDR_OWVAR 20
3974: PUSH
3975: LD_INT 4
3977: ST_TO_ADDR
// uc_nation := nation_american ;
3978: LD_ADDR_OWVAR 21
3982: PUSH
3983: LD_INT 1
3985: ST_TO_ADDR
// hc_importance = 10 ;
3986: LD_ADDR_OWVAR 32
3990: PUSH
3991: LD_INT 10
3993: ST_TO_ADDR
// hc_name :=  ;
3994: LD_ADDR_OWVAR 26
3998: PUSH
3999: LD_STRING 
4001: ST_TO_ADDR
// hc_gallery :=  ;
4002: LD_ADDR_OWVAR 33
4006: PUSH
4007: LD_STRING 
4009: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4010: LD_INT 1
4012: PPUSH
4013: LD_INT 2
4015: NEG
4016: PPUSH
4017: CALL_OW 382
// engi1 := CreateHuman ;
4021: LD_ADDR_EXP 2
4025: PUSH
4026: CALL_OW 44
4030: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4031: LD_INT 1
4033: PPUSH
4034: LD_INT 2
4036: NEG
4037: PPUSH
4038: CALL_OW 382
// engi2 := CreateHuman ;
4042: LD_ADDR_EXP 3
4046: PUSH
4047: CALL_OW 44
4051: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4052: LD_EXP 2
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4064: LD_EXP 3
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4076: LD_INT 1
4078: PPUSH
4079: LD_INT 1
4081: NEG
4082: PPUSH
4083: CALL_OW 383
// truckdriver := CreateHuman ;
4087: LD_ADDR_EXP 4
4091: PUSH
4092: CALL_OW 44
4096: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4097: LD_EXP 4
4101: PPUSH
4102: LD_INT 27
4104: PPUSH
4105: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4109: LD_INT 27
4111: PPUSH
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 100
4117: PPUSH
4118: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4122: LD_INT 1
4124: PPUSH
4125: LD_INT 3
4127: PPUSH
4128: CALL_OW 381
// hc_class = class_soldier ;
4132: LD_ADDR_OWVAR 28
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// snip1 := CreateHuman ;
4140: LD_ADDR_EXP 6
4144: PUSH
4145: CALL_OW 44
4149: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4150: LD_INT 2
4152: PPUSH
4153: LD_INT 3
4155: PPUSH
4156: CALL_OW 381
// hc_class = class_soldier ;
4160: LD_ADDR_OWVAR 28
4164: PUSH
4165: LD_INT 1
4167: ST_TO_ADDR
// snip2 := CreateHuman ;
4168: LD_ADDR_EXP 7
4172: PUSH
4173: CALL_OW 44
4177: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4178: LD_EXP 6
4182: PPUSH
4183: LD_INT 47
4185: PPUSH
4186: LD_INT 17
4188: PPUSH
4189: LD_INT 0
4191: PPUSH
4192: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4196: LD_EXP 7
4200: PPUSH
4201: LD_INT 29
4203: PPUSH
4204: LD_INT 31
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4214: LD_EXP 6
4218: PUSH
4219: LD_EXP 7
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 381
// sol1 := CreateHuman ;
4242: LD_ADDR_EXP 8
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 2
4259: PPUSH
4260: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4264: LD_EXP 8
4268: PPUSH
4269: LD_INT 15
4271: PPUSH
4272: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4276: LD_INT 1
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: CALL_OW 381
// sol2 := CreateHuman ;
4286: LD_ADDR_EXP 9
4290: PUSH
4291: CALL_OW 44
4295: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4296: LD_INT 1
4298: PPUSH
4299: LD_INT 3
4301: PPUSH
4302: CALL_OW 381
// sol3 := CreateHuman ;
4306: LD_ADDR_EXP 10
4310: PUSH
4311: CALL_OW 44
4315: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4316: LD_EXP 9
4320: PPUSH
4321: LD_INT 40
4323: PPUSH
4324: LD_INT 42
4326: PPUSH
4327: LD_INT 0
4329: PPUSH
4330: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4334: LD_EXP 10
4338: PPUSH
4339: LD_INT 53
4341: PPUSH
4342: LD_INT 34
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4352: LD_INT 1
4354: PPUSH
4355: LD_INT 3
4357: PPUSH
4358: CALL_OW 381
// pat1 := CreateHuman ;
4362: LD_ADDR_EXP 11
4366: PUSH
4367: CALL_OW 44
4371: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4372: LD_INT 1
4374: PPUSH
4375: LD_INT 3
4377: PPUSH
4378: CALL_OW 381
// pat2 := CreateHuman ;
4382: LD_ADDR_EXP 12
4386: PUSH
4387: CALL_OW 44
4391: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4392: LD_EXP 11
4396: PPUSH
4397: LD_INT 29
4399: PPUSH
4400: LD_INT 6
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4410: LD_EXP 12
4414: PPUSH
4415: LD_INT 30
4417: PPUSH
4418: LD_INT 7
4420: PPUSH
4421: LD_INT 0
4423: PPUSH
4424: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4428: LD_ADDR_EXP 13
4432: PUSH
4433: LD_EXP 11
4437: PUSH
4438: LD_EXP 12
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4447: LD_ADDR_EXP 14
4451: PUSH
4452: LD_EXP 2
4456: PUSH
4457: LD_EXP 3
4461: PUSH
4462: LD_EXP 8
4466: PUSH
4467: LD_EXP 9
4471: PUSH
4472: LD_EXP 10
4476: PUSH
4477: LD_EXP 6
4481: PUSH
4482: LD_EXP 7
4486: PUSH
4487: LD_EXP 13
4491: PUSH
4492: LD_EXP 4
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: ST_TO_ADDR
// end ;
4508: LD_VAR 0 1
4512: RET
// every 0 0$1 do
4513: GO 4515
4515: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4516: LD_EXP 13
4520: PPUSH
4521: LD_INT 64
4523: PPUSH
4524: LD_INT 22
4526: PPUSH
4527: CALL_OW 171
// wait ( 0 0$25 ) ;
4531: LD_INT 875
4533: PPUSH
4534: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4538: LD_EXP 13
4542: PPUSH
4543: LD_INT 30
4545: PPUSH
4546: LD_INT 8
4548: PPUSH
4549: CALL_OW 171
// wait ( 0 0$25 ) ;
4553: LD_INT 875
4555: PPUSH
4556: CALL_OW 67
// enable ;
4560: ENABLE
// end ;
4561: END
// every 0 0$1 do
4562: GO 4564
4564: DISABLE
// begin SetLives ( truck , 550 ) ;
4565: LD_INT 27
4567: PPUSH
4568: LD_INT 550
4570: PPUSH
4571: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4575: LD_INT 27
4577: PPUSH
4578: LD_INT 42
4580: PPUSH
4581: LD_INT 35
4583: PPUSH
4584: CALL_OW 111
// AddComUnload ( truck ) ;
4588: LD_INT 27
4590: PPUSH
4591: CALL_OW 219
// Wait ( 0 0$8 ) ;
4595: LD_INT 280
4597: PPUSH
4598: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4602: LD_EXP 2
4606: PUSH
4607: LD_EXP 3
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PPUSH
4616: LD_INT 45
4618: PPUSH
4619: LD_INT 36
4621: PPUSH
4622: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4626: LD_EXP 4
4630: PPUSH
4631: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4635: LD_EXP 4
4639: PPUSH
4640: LD_INT 40
4642: PPUSH
4643: LD_INT 33
4645: PPUSH
4646: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4650: LD_INT 35
4652: PPUSH
4653: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4657: LD_EXP 4
4661: PPUSH
4662: LD_INT 27
4664: PPUSH
4665: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4669: LD_INT 27
4671: PPUSH
4672: CALL_OW 256
4676: PUSH
4677: LD_INT 1000
4679: EQUAL
4680: IFFALSE 4650
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4682: LD_EXP 2
4686: PUSH
4687: LD_EXP 3
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PPUSH
4696: LD_INT 10
4698: PPUSH
4699: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4703: LD_INT 35
4705: PPUSH
4706: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4710: LD_INT 27
4712: PPUSH
4713: CALL_OW 311
4717: NOT
4718: IFFALSE 4703
// ComEnterUnit ( truckdriver , truck ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 27
4727: PPUSH
4728: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4732: LD_EXP 4
4736: PPUSH
4737: LD_INT 74
4739: PPUSH
4740: LD_INT 52
4742: PPUSH
4743: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4747: LD_EXP 4
4751: PPUSH
4752: LD_INT 90
4754: PPUSH
4755: LD_INT 58
4757: PPUSH
4758: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4762: LD_EXP 4
4766: PPUSH
4767: LD_INT 98
4769: PPUSH
4770: LD_INT 61
4772: PPUSH
4773: CALL_OW 171
// end ;
4777: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4778: LD_INT 7
4780: PPUSH
4781: LD_INT 22
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PPUSH
4791: CALL_OW 70
4795: IFFALSE 4843
4797: GO 4799
4799: DISABLE
4800: LD_INT 0
4802: PPUSH
// begin enable ;
4803: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4804: LD_ADDR_VAR 0 1
4808: PUSH
4809: LD_INT 7
4811: PPUSH
4812: LD_INT 22
4814: PUSH
4815: LD_INT 4
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PPUSH
4822: CALL_OW 70
4826: PUSH
4827: FOR_IN
4828: IFFALSE 4841
// RemoveUnit ( i ) ;
4830: LD_VAR 0 1
4834: PPUSH
4835: CALL_OW 64
4839: GO 4827
4841: POP
4842: POP
// end ;
4843: PPOPN 1
4845: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4846: LD_INT 22
4848: PUSH
4849: LD_INT 4
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: LD_INT 24
4861: PUSH
4862: LD_INT 1000
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: LD_INT 21
4875: PUSH
4876: LD_INT 1
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PPUSH
4888: CALL_OW 69
4892: IFFALSE 4972
4894: GO 4896
4896: DISABLE
4897: LD_INT 0
4899: PPUSH
// begin enable ;
4900: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4901: LD_ADDR_VAR 0 1
4905: PUSH
4906: LD_INT 22
4908: PUSH
4909: LD_INT 4
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: LD_INT 24
4921: PUSH
4922: LD_INT 1000
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: LD_INT 21
4935: PUSH
4936: LD_INT 1
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: PPUSH
4948: CALL_OW 69
4952: PUSH
4953: FOR_IN
4954: IFFALSE 4970
// SetLives ( i , 1000 ) ;
4956: LD_VAR 0 1
4960: PPUSH
4961: LD_INT 1000
4963: PPUSH
4964: CALL_OW 234
4968: GO 4953
4970: POP
4971: POP
// end ; end_of_file
4972: PPOPN 1
4974: END
// export globalGameSaveCounter ; every 0 0$1 do
4975: GO 4977
4977: DISABLE
// begin enable ;
4978: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4979: LD_STRING updateTimer(
4981: PUSH
4982: LD_OWVAR 1
4986: STR
4987: PUSH
4988: LD_STRING );
4990: STR
4991: PPUSH
4992: CALL_OW 559
// end ;
4996: END
// every 0 0$1 do
4997: GO 4999
4999: DISABLE
// begin globalGameSaveCounter := 0 ;
5000: LD_ADDR_EXP 15
5004: PUSH
5005: LD_INT 0
5007: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5008: LD_STRING setGameSaveCounter(0)
5010: PPUSH
5011: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5015: LD_STRING initStreamRollete();
5017: PPUSH
5018: CALL_OW 559
// InitStreamMode ;
5022: CALL 6374 0 0
// DefineStreamItems ( false ) ;
5026: LD_INT 0
5028: PPUSH
5029: CALL 6838 0 1
// end ;
5033: END
// export function SOS_MapStart ( ) ; begin
5034: LD_INT 0
5036: PPUSH
// if streamModeActive then
5037: LD_EXP 16
5041: IFFALSE 5050
// DefineStreamItems ( true ) ;
5043: LD_INT 1
5045: PPUSH
5046: CALL 6838 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
5050: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
5052: PPUSH
5053: CALL_OW 559
// UpdateLuaVariables ( ) ;
5057: CALL 5074 0 0
// UpdateFactoryWaypoints ( ) ;
5061: CALL 19960 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5065: CALL 20212 0 0
// end ;
5069: LD_VAR 0 1
5073: RET
// function UpdateLuaVariables ( ) ; begin
5074: LD_INT 0
5076: PPUSH
// if globalGameSaveCounter then
5077: LD_EXP 15
5081: IFFALSE 5115
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5083: LD_ADDR_EXP 15
5087: PUSH
5088: LD_EXP 15
5092: PPUSH
5093: CALL 67271 0 1
5097: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5098: LD_STRING setGameSaveCounter(
5100: PUSH
5101: LD_EXP 15
5105: STR
5106: PUSH
5107: LD_STRING )
5109: STR
5110: PPUSH
5111: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5115: LD_STRING setGameDifficulty(
5117: PUSH
5118: LD_OWVAR 67
5122: STR
5123: PUSH
5124: LD_STRING )
5126: STR
5127: PPUSH
5128: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
5132: LD_STRING displayDifficulty(
5134: PUSH
5135: LD_OWVAR 67
5139: STR
5140: PUSH
5141: LD_STRING )
5143: STR
5144: PPUSH
5145: CALL_OW 559
// end ;
5149: LD_VAR 0 1
5153: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5154: LD_INT 0
5156: PPUSH
// if p2 = stream_mode then
5157: LD_VAR 0 2
5161: PUSH
5162: LD_INT 100
5164: EQUAL
5165: IFFALSE 6168
// begin if not StreamModeActive then
5167: LD_EXP 16
5171: NOT
5172: IFFALSE 5182
// StreamModeActive := true ;
5174: LD_ADDR_EXP 16
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 0 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 0
5189: EQUAL
5190: IFFALSE 5196
// InitStreamMode ;
5192: CALL 6374 0 0
// if p3 = 1 then
5196: LD_VAR 0 3
5200: PUSH
5201: LD_INT 1
5203: EQUAL
5204: IFFALSE 5214
// sRocket := true ;
5206: LD_ADDR_EXP 21
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// if p3 = 2 then
5214: LD_VAR 0 3
5218: PUSH
5219: LD_INT 2
5221: EQUAL
5222: IFFALSE 5232
// sSpeed := true ;
5224: LD_ADDR_EXP 20
5228: PUSH
5229: LD_INT 1
5231: ST_TO_ADDR
// if p3 = 3 then
5232: LD_VAR 0 3
5236: PUSH
5237: LD_INT 3
5239: EQUAL
5240: IFFALSE 5250
// sEngine := true ;
5242: LD_ADDR_EXP 22
5246: PUSH
5247: LD_INT 1
5249: ST_TO_ADDR
// if p3 = 4 then
5250: LD_VAR 0 3
5254: PUSH
5255: LD_INT 4
5257: EQUAL
5258: IFFALSE 5268
// sSpec := true ;
5260: LD_ADDR_EXP 19
5264: PUSH
5265: LD_INT 1
5267: ST_TO_ADDR
// if p3 = 5 then
5268: LD_VAR 0 3
5272: PUSH
5273: LD_INT 5
5275: EQUAL
5276: IFFALSE 5286
// sLevel := true ;
5278: LD_ADDR_EXP 23
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// if p3 = 6 then
5286: LD_VAR 0 3
5290: PUSH
5291: LD_INT 6
5293: EQUAL
5294: IFFALSE 5304
// sArmoury := true ;
5296: LD_ADDR_EXP 24
5300: PUSH
5301: LD_INT 1
5303: ST_TO_ADDR
// if p3 = 7 then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_INT 7
5311: EQUAL
5312: IFFALSE 5322
// sRadar := true ;
5314: LD_ADDR_EXP 25
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// if p3 = 8 then
5322: LD_VAR 0 3
5326: PUSH
5327: LD_INT 8
5329: EQUAL
5330: IFFALSE 5340
// sBunker := true ;
5332: LD_ADDR_EXP 26
5336: PUSH
5337: LD_INT 1
5339: ST_TO_ADDR
// if p3 = 9 then
5340: LD_VAR 0 3
5344: PUSH
5345: LD_INT 9
5347: EQUAL
5348: IFFALSE 5358
// sHack := true ;
5350: LD_ADDR_EXP 27
5354: PUSH
5355: LD_INT 1
5357: ST_TO_ADDR
// if p3 = 10 then
5358: LD_VAR 0 3
5362: PUSH
5363: LD_INT 10
5365: EQUAL
5366: IFFALSE 5376
// sFire := true ;
5368: LD_ADDR_EXP 28
5372: PUSH
5373: LD_INT 1
5375: ST_TO_ADDR
// if p3 = 11 then
5376: LD_VAR 0 3
5380: PUSH
5381: LD_INT 11
5383: EQUAL
5384: IFFALSE 5394
// sRefresh := true ;
5386: LD_ADDR_EXP 29
5390: PUSH
5391: LD_INT 1
5393: ST_TO_ADDR
// if p3 = 12 then
5394: LD_VAR 0 3
5398: PUSH
5399: LD_INT 12
5401: EQUAL
5402: IFFALSE 5412
// sExp := true ;
5404: LD_ADDR_EXP 30
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// if p3 = 13 then
5412: LD_VAR 0 3
5416: PUSH
5417: LD_INT 13
5419: EQUAL
5420: IFFALSE 5430
// sDepot := true ;
5422: LD_ADDR_EXP 31
5426: PUSH
5427: LD_INT 1
5429: ST_TO_ADDR
// if p3 = 14 then
5430: LD_VAR 0 3
5434: PUSH
5435: LD_INT 14
5437: EQUAL
5438: IFFALSE 5448
// sFlag := true ;
5440: LD_ADDR_EXP 32
5444: PUSH
5445: LD_INT 1
5447: ST_TO_ADDR
// if p3 = 15 then
5448: LD_VAR 0 3
5452: PUSH
5453: LD_INT 15
5455: EQUAL
5456: IFFALSE 5466
// sKamikadze := true ;
5458: LD_ADDR_EXP 40
5462: PUSH
5463: LD_INT 1
5465: ST_TO_ADDR
// if p3 = 16 then
5466: LD_VAR 0 3
5470: PUSH
5471: LD_INT 16
5473: EQUAL
5474: IFFALSE 5484
// sTroll := true ;
5476: LD_ADDR_EXP 41
5480: PUSH
5481: LD_INT 1
5483: ST_TO_ADDR
// if p3 = 17 then
5484: LD_VAR 0 3
5488: PUSH
5489: LD_INT 17
5491: EQUAL
5492: IFFALSE 5502
// sSlow := true ;
5494: LD_ADDR_EXP 42
5498: PUSH
5499: LD_INT 1
5501: ST_TO_ADDR
// if p3 = 18 then
5502: LD_VAR 0 3
5506: PUSH
5507: LD_INT 18
5509: EQUAL
5510: IFFALSE 5520
// sLack := true ;
5512: LD_ADDR_EXP 43
5516: PUSH
5517: LD_INT 1
5519: ST_TO_ADDR
// if p3 = 19 then
5520: LD_VAR 0 3
5524: PUSH
5525: LD_INT 19
5527: EQUAL
5528: IFFALSE 5538
// sTank := true ;
5530: LD_ADDR_EXP 45
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// if p3 = 20 then
5538: LD_VAR 0 3
5542: PUSH
5543: LD_INT 20
5545: EQUAL
5546: IFFALSE 5556
// sRemote := true ;
5548: LD_ADDR_EXP 46
5552: PUSH
5553: LD_INT 1
5555: ST_TO_ADDR
// if p3 = 21 then
5556: LD_VAR 0 3
5560: PUSH
5561: LD_INT 21
5563: EQUAL
5564: IFFALSE 5574
// sPowell := true ;
5566: LD_ADDR_EXP 47
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// if p3 = 22 then
5574: LD_VAR 0 3
5578: PUSH
5579: LD_INT 22
5581: EQUAL
5582: IFFALSE 5592
// sTeleport := true ;
5584: LD_ADDR_EXP 50
5588: PUSH
5589: LD_INT 1
5591: ST_TO_ADDR
// if p3 = 23 then
5592: LD_VAR 0 3
5596: PUSH
5597: LD_INT 23
5599: EQUAL
5600: IFFALSE 5610
// sOilTower := true ;
5602: LD_ADDR_EXP 52
5606: PUSH
5607: LD_INT 1
5609: ST_TO_ADDR
// if p3 = 24 then
5610: LD_VAR 0 3
5614: PUSH
5615: LD_INT 24
5617: EQUAL
5618: IFFALSE 5628
// sShovel := true ;
5620: LD_ADDR_EXP 53
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// if p3 = 25 then
5628: LD_VAR 0 3
5632: PUSH
5633: LD_INT 25
5635: EQUAL
5636: IFFALSE 5646
// sSheik := true ;
5638: LD_ADDR_EXP 54
5642: PUSH
5643: LD_INT 1
5645: ST_TO_ADDR
// if p3 = 26 then
5646: LD_VAR 0 3
5650: PUSH
5651: LD_INT 26
5653: EQUAL
5654: IFFALSE 5664
// sEarthquake := true ;
5656: LD_ADDR_EXP 56
5660: PUSH
5661: LD_INT 1
5663: ST_TO_ADDR
// if p3 = 27 then
5664: LD_VAR 0 3
5668: PUSH
5669: LD_INT 27
5671: EQUAL
5672: IFFALSE 5682
// sAI := true ;
5674: LD_ADDR_EXP 57
5678: PUSH
5679: LD_INT 1
5681: ST_TO_ADDR
// if p3 = 28 then
5682: LD_VAR 0 3
5686: PUSH
5687: LD_INT 28
5689: EQUAL
5690: IFFALSE 5700
// sCargo := true ;
5692: LD_ADDR_EXP 60
5696: PUSH
5697: LD_INT 1
5699: ST_TO_ADDR
// if p3 = 29 then
5700: LD_VAR 0 3
5704: PUSH
5705: LD_INT 29
5707: EQUAL
5708: IFFALSE 5718
// sDLaser := true ;
5710: LD_ADDR_EXP 61
5714: PUSH
5715: LD_INT 1
5717: ST_TO_ADDR
// if p3 = 30 then
5718: LD_VAR 0 3
5722: PUSH
5723: LD_INT 30
5725: EQUAL
5726: IFFALSE 5736
// sExchange := true ;
5728: LD_ADDR_EXP 62
5732: PUSH
5733: LD_INT 1
5735: ST_TO_ADDR
// if p3 = 31 then
5736: LD_VAR 0 3
5740: PUSH
5741: LD_INT 31
5743: EQUAL
5744: IFFALSE 5754
// sFac := true ;
5746: LD_ADDR_EXP 63
5750: PUSH
5751: LD_INT 1
5753: ST_TO_ADDR
// if p3 = 32 then
5754: LD_VAR 0 3
5758: PUSH
5759: LD_INT 32
5761: EQUAL
5762: IFFALSE 5772
// sPower := true ;
5764: LD_ADDR_EXP 64
5768: PUSH
5769: LD_INT 1
5771: ST_TO_ADDR
// if p3 = 33 then
5772: LD_VAR 0 3
5776: PUSH
5777: LD_INT 33
5779: EQUAL
5780: IFFALSE 5790
// sRandom := true ;
5782: LD_ADDR_EXP 65
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// if p3 = 34 then
5790: LD_VAR 0 3
5794: PUSH
5795: LD_INT 34
5797: EQUAL
5798: IFFALSE 5808
// sShield := true ;
5800: LD_ADDR_EXP 66
5804: PUSH
5805: LD_INT 1
5807: ST_TO_ADDR
// if p3 = 35 then
5808: LD_VAR 0 3
5812: PUSH
5813: LD_INT 35
5815: EQUAL
5816: IFFALSE 5826
// sTime := true ;
5818: LD_ADDR_EXP 67
5822: PUSH
5823: LD_INT 1
5825: ST_TO_ADDR
// if p3 = 36 then
5826: LD_VAR 0 3
5830: PUSH
5831: LD_INT 36
5833: EQUAL
5834: IFFALSE 5844
// sTools := true ;
5836: LD_ADDR_EXP 68
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// if p3 = 101 then
5844: LD_VAR 0 3
5848: PUSH
5849: LD_INT 101
5851: EQUAL
5852: IFFALSE 5862
// sSold := true ;
5854: LD_ADDR_EXP 33
5858: PUSH
5859: LD_INT 1
5861: ST_TO_ADDR
// if p3 = 102 then
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 102
5869: EQUAL
5870: IFFALSE 5880
// sDiff := true ;
5872: LD_ADDR_EXP 34
5876: PUSH
5877: LD_INT 1
5879: ST_TO_ADDR
// if p3 = 103 then
5880: LD_VAR 0 3
5884: PUSH
5885: LD_INT 103
5887: EQUAL
5888: IFFALSE 5898
// sFog := true ;
5890: LD_ADDR_EXP 37
5894: PUSH
5895: LD_INT 1
5897: ST_TO_ADDR
// if p3 = 104 then
5898: LD_VAR 0 3
5902: PUSH
5903: LD_INT 104
5905: EQUAL
5906: IFFALSE 5916
// sReset := true ;
5908: LD_ADDR_EXP 38
5912: PUSH
5913: LD_INT 1
5915: ST_TO_ADDR
// if p3 = 105 then
5916: LD_VAR 0 3
5920: PUSH
5921: LD_INT 105
5923: EQUAL
5924: IFFALSE 5934
// sSun := true ;
5926: LD_ADDR_EXP 39
5930: PUSH
5931: LD_INT 1
5933: ST_TO_ADDR
// if p3 = 106 then
5934: LD_VAR 0 3
5938: PUSH
5939: LD_INT 106
5941: EQUAL
5942: IFFALSE 5952
// sTiger := true ;
5944: LD_ADDR_EXP 35
5948: PUSH
5949: LD_INT 1
5951: ST_TO_ADDR
// if p3 = 107 then
5952: LD_VAR 0 3
5956: PUSH
5957: LD_INT 107
5959: EQUAL
5960: IFFALSE 5970
// sBomb := true ;
5962: LD_ADDR_EXP 36
5966: PUSH
5967: LD_INT 1
5969: ST_TO_ADDR
// if p3 = 108 then
5970: LD_VAR 0 3
5974: PUSH
5975: LD_INT 108
5977: EQUAL
5978: IFFALSE 5988
// sWound := true ;
5980: LD_ADDR_EXP 44
5984: PUSH
5985: LD_INT 1
5987: ST_TO_ADDR
// if p3 = 109 then
5988: LD_VAR 0 3
5992: PUSH
5993: LD_INT 109
5995: EQUAL
5996: IFFALSE 6006
// sBetray := true ;
5998: LD_ADDR_EXP 48
6002: PUSH
6003: LD_INT 1
6005: ST_TO_ADDR
// if p3 = 110 then
6006: LD_VAR 0 3
6010: PUSH
6011: LD_INT 110
6013: EQUAL
6014: IFFALSE 6024
// sContamin := true ;
6016: LD_ADDR_EXP 49
6020: PUSH
6021: LD_INT 1
6023: ST_TO_ADDR
// if p3 = 111 then
6024: LD_VAR 0 3
6028: PUSH
6029: LD_INT 111
6031: EQUAL
6032: IFFALSE 6042
// sOil := true ;
6034: LD_ADDR_EXP 51
6038: PUSH
6039: LD_INT 1
6041: ST_TO_ADDR
// if p3 = 112 then
6042: LD_VAR 0 3
6046: PUSH
6047: LD_INT 112
6049: EQUAL
6050: IFFALSE 6060
// sStu := true ;
6052: LD_ADDR_EXP 55
6056: PUSH
6057: LD_INT 1
6059: ST_TO_ADDR
// if p3 = 113 then
6060: LD_VAR 0 3
6064: PUSH
6065: LD_INT 113
6067: EQUAL
6068: IFFALSE 6078
// sBazooka := true ;
6070: LD_ADDR_EXP 58
6074: PUSH
6075: LD_INT 1
6077: ST_TO_ADDR
// if p3 = 114 then
6078: LD_VAR 0 3
6082: PUSH
6083: LD_INT 114
6085: EQUAL
6086: IFFALSE 6096
// sMortar := true ;
6088: LD_ADDR_EXP 59
6092: PUSH
6093: LD_INT 1
6095: ST_TO_ADDR
// if p3 = 115 then
6096: LD_VAR 0 3
6100: PUSH
6101: LD_INT 115
6103: EQUAL
6104: IFFALSE 6114
// sRanger := true ;
6106: LD_ADDR_EXP 69
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// if p3 = 116 then
6114: LD_VAR 0 3
6118: PUSH
6119: LD_INT 116
6121: EQUAL
6122: IFFALSE 6132
// sComputer := true ;
6124: LD_ADDR_EXP 70
6128: PUSH
6129: LD_INT 1
6131: ST_TO_ADDR
// if p3 = 117 then
6132: LD_VAR 0 3
6136: PUSH
6137: LD_INT 117
6139: EQUAL
6140: IFFALSE 6150
// s30 := true ;
6142: LD_ADDR_EXP 71
6146: PUSH
6147: LD_INT 1
6149: ST_TO_ADDR
// if p3 = 118 then
6150: LD_VAR 0 3
6154: PUSH
6155: LD_INT 118
6157: EQUAL
6158: IFFALSE 6168
// s60 := true ;
6160: LD_ADDR_EXP 72
6164: PUSH
6165: LD_INT 1
6167: ST_TO_ADDR
// end ; if p2 = hack_mode then
6168: LD_VAR 0 2
6172: PUSH
6173: LD_INT 101
6175: EQUAL
6176: IFFALSE 6304
// begin case p3 of 1 :
6178: LD_VAR 0 3
6182: PUSH
6183: LD_INT 1
6185: DOUBLE
6186: EQUAL
6187: IFTRUE 6191
6189: GO 6198
6191: POP
// hHackUnlimitedResources ; 2 :
6192: CALL 18567 0 0
6196: GO 6304
6198: LD_INT 2
6200: DOUBLE
6201: EQUAL
6202: IFTRUE 6206
6204: GO 6213
6206: POP
// hHackSetLevel10 ; 3 :
6207: CALL 18700 0 0
6211: GO 6304
6213: LD_INT 3
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6221
6219: GO 6228
6221: POP
// hHackSetLevel10YourUnits ; 4 :
6222: CALL 18785 0 0
6226: GO 6304
6228: LD_INT 4
6230: DOUBLE
6231: EQUAL
6232: IFTRUE 6236
6234: GO 6243
6236: POP
// hHackInvincible ; 5 :
6237: CALL 19233 0 0
6241: GO 6304
6243: LD_INT 5
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6251
6249: GO 6258
6251: POP
// hHackInvisible ; 6 :
6252: CALL 19344 0 0
6256: GO 6304
6258: LD_INT 6
6260: DOUBLE
6261: EQUAL
6262: IFTRUE 6266
6264: GO 6273
6266: POP
// hHackChangeYourSide ; 7 :
6267: CALL 19401 0 0
6271: GO 6304
6273: LD_INT 7
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6281
6279: GO 6288
6281: POP
// hHackChangeUnitSide ; 8 :
6282: CALL 19443 0 0
6286: GO 6304
6288: LD_INT 8
6290: DOUBLE
6291: EQUAL
6292: IFTRUE 6296
6294: GO 6303
6296: POP
// hHackFog ; end ;
6297: CALL 19544 0 0
6301: GO 6304
6303: POP
// end ; if p2 = game_save_mode then
6304: LD_VAR 0 2
6308: PUSH
6309: LD_INT 102
6311: EQUAL
6312: IFFALSE 6369
// begin if p3 = 1 then
6314: LD_VAR 0 3
6318: PUSH
6319: LD_INT 1
6321: EQUAL
6322: IFFALSE 6334
// globalGameSaveCounter := p4 ;
6324: LD_ADDR_EXP 15
6328: PUSH
6329: LD_VAR 0 4
6333: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6334: LD_VAR 0 3
6338: PUSH
6339: LD_INT 2
6341: EQUAL
6342: IFFALSE 6350
6344: PUSH
6345: LD_EXP 15
6349: AND
6350: IFFALSE 6369
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6352: LD_STRING setGameSaveCounter(
6354: PUSH
6355: LD_EXP 15
6359: STR
6360: PUSH
6361: LD_STRING )
6363: STR
6364: PPUSH
6365: CALL_OW 559
// end ; end ;
6369: LD_VAR 0 7
6373: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6374: LD_INT 0
6376: PPUSH
// streamModeActive := false ;
6377: LD_ADDR_EXP 16
6381: PUSH
6382: LD_INT 0
6384: ST_TO_ADDR
// normalCounter := 36 ;
6385: LD_ADDR_EXP 17
6389: PUSH
6390: LD_INT 36
6392: ST_TO_ADDR
// hardcoreCounter := 18 ;
6393: LD_ADDR_EXP 18
6397: PUSH
6398: LD_INT 18
6400: ST_TO_ADDR
// sRocket := false ;
6401: LD_ADDR_EXP 21
6405: PUSH
6406: LD_INT 0
6408: ST_TO_ADDR
// sSpeed := false ;
6409: LD_ADDR_EXP 20
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// sEngine := false ;
6417: LD_ADDR_EXP 22
6421: PUSH
6422: LD_INT 0
6424: ST_TO_ADDR
// sSpec := false ;
6425: LD_ADDR_EXP 19
6429: PUSH
6430: LD_INT 0
6432: ST_TO_ADDR
// sLevel := false ;
6433: LD_ADDR_EXP 23
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// sArmoury := false ;
6441: LD_ADDR_EXP 24
6445: PUSH
6446: LD_INT 0
6448: ST_TO_ADDR
// sRadar := false ;
6449: LD_ADDR_EXP 25
6453: PUSH
6454: LD_INT 0
6456: ST_TO_ADDR
// sBunker := false ;
6457: LD_ADDR_EXP 26
6461: PUSH
6462: LD_INT 0
6464: ST_TO_ADDR
// sHack := false ;
6465: LD_ADDR_EXP 27
6469: PUSH
6470: LD_INT 0
6472: ST_TO_ADDR
// sFire := false ;
6473: LD_ADDR_EXP 28
6477: PUSH
6478: LD_INT 0
6480: ST_TO_ADDR
// sRefresh := false ;
6481: LD_ADDR_EXP 29
6485: PUSH
6486: LD_INT 0
6488: ST_TO_ADDR
// sExp := false ;
6489: LD_ADDR_EXP 30
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// sDepot := false ;
6497: LD_ADDR_EXP 31
6501: PUSH
6502: LD_INT 0
6504: ST_TO_ADDR
// sFlag := false ;
6505: LD_ADDR_EXP 32
6509: PUSH
6510: LD_INT 0
6512: ST_TO_ADDR
// sKamikadze := false ;
6513: LD_ADDR_EXP 40
6517: PUSH
6518: LD_INT 0
6520: ST_TO_ADDR
// sTroll := false ;
6521: LD_ADDR_EXP 41
6525: PUSH
6526: LD_INT 0
6528: ST_TO_ADDR
// sSlow := false ;
6529: LD_ADDR_EXP 42
6533: PUSH
6534: LD_INT 0
6536: ST_TO_ADDR
// sLack := false ;
6537: LD_ADDR_EXP 43
6541: PUSH
6542: LD_INT 0
6544: ST_TO_ADDR
// sTank := false ;
6545: LD_ADDR_EXP 45
6549: PUSH
6550: LD_INT 0
6552: ST_TO_ADDR
// sRemote := false ;
6553: LD_ADDR_EXP 46
6557: PUSH
6558: LD_INT 0
6560: ST_TO_ADDR
// sPowell := false ;
6561: LD_ADDR_EXP 47
6565: PUSH
6566: LD_INT 0
6568: ST_TO_ADDR
// sTeleport := false ;
6569: LD_ADDR_EXP 50
6573: PUSH
6574: LD_INT 0
6576: ST_TO_ADDR
// sOilTower := false ;
6577: LD_ADDR_EXP 52
6581: PUSH
6582: LD_INT 0
6584: ST_TO_ADDR
// sShovel := false ;
6585: LD_ADDR_EXP 53
6589: PUSH
6590: LD_INT 0
6592: ST_TO_ADDR
// sSheik := false ;
6593: LD_ADDR_EXP 54
6597: PUSH
6598: LD_INT 0
6600: ST_TO_ADDR
// sEarthquake := false ;
6601: LD_ADDR_EXP 56
6605: PUSH
6606: LD_INT 0
6608: ST_TO_ADDR
// sAI := false ;
6609: LD_ADDR_EXP 57
6613: PUSH
6614: LD_INT 0
6616: ST_TO_ADDR
// sCargo := false ;
6617: LD_ADDR_EXP 60
6621: PUSH
6622: LD_INT 0
6624: ST_TO_ADDR
// sDLaser := false ;
6625: LD_ADDR_EXP 61
6629: PUSH
6630: LD_INT 0
6632: ST_TO_ADDR
// sExchange := false ;
6633: LD_ADDR_EXP 62
6637: PUSH
6638: LD_INT 0
6640: ST_TO_ADDR
// sFac := false ;
6641: LD_ADDR_EXP 63
6645: PUSH
6646: LD_INT 0
6648: ST_TO_ADDR
// sPower := false ;
6649: LD_ADDR_EXP 64
6653: PUSH
6654: LD_INT 0
6656: ST_TO_ADDR
// sRandom := false ;
6657: LD_ADDR_EXP 65
6661: PUSH
6662: LD_INT 0
6664: ST_TO_ADDR
// sShield := false ;
6665: LD_ADDR_EXP 66
6669: PUSH
6670: LD_INT 0
6672: ST_TO_ADDR
// sTime := false ;
6673: LD_ADDR_EXP 67
6677: PUSH
6678: LD_INT 0
6680: ST_TO_ADDR
// sTools := false ;
6681: LD_ADDR_EXP 68
6685: PUSH
6686: LD_INT 0
6688: ST_TO_ADDR
// sSold := false ;
6689: LD_ADDR_EXP 33
6693: PUSH
6694: LD_INT 0
6696: ST_TO_ADDR
// sDiff := false ;
6697: LD_ADDR_EXP 34
6701: PUSH
6702: LD_INT 0
6704: ST_TO_ADDR
// sFog := false ;
6705: LD_ADDR_EXP 37
6709: PUSH
6710: LD_INT 0
6712: ST_TO_ADDR
// sReset := false ;
6713: LD_ADDR_EXP 38
6717: PUSH
6718: LD_INT 0
6720: ST_TO_ADDR
// sSun := false ;
6721: LD_ADDR_EXP 39
6725: PUSH
6726: LD_INT 0
6728: ST_TO_ADDR
// sTiger := false ;
6729: LD_ADDR_EXP 35
6733: PUSH
6734: LD_INT 0
6736: ST_TO_ADDR
// sBomb := false ;
6737: LD_ADDR_EXP 36
6741: PUSH
6742: LD_INT 0
6744: ST_TO_ADDR
// sWound := false ;
6745: LD_ADDR_EXP 44
6749: PUSH
6750: LD_INT 0
6752: ST_TO_ADDR
// sBetray := false ;
6753: LD_ADDR_EXP 48
6757: PUSH
6758: LD_INT 0
6760: ST_TO_ADDR
// sContamin := false ;
6761: LD_ADDR_EXP 49
6765: PUSH
6766: LD_INT 0
6768: ST_TO_ADDR
// sOil := false ;
6769: LD_ADDR_EXP 51
6773: PUSH
6774: LD_INT 0
6776: ST_TO_ADDR
// sStu := false ;
6777: LD_ADDR_EXP 55
6781: PUSH
6782: LD_INT 0
6784: ST_TO_ADDR
// sBazooka := false ;
6785: LD_ADDR_EXP 58
6789: PUSH
6790: LD_INT 0
6792: ST_TO_ADDR
// sMortar := false ;
6793: LD_ADDR_EXP 59
6797: PUSH
6798: LD_INT 0
6800: ST_TO_ADDR
// sRanger := false ;
6801: LD_ADDR_EXP 69
6805: PUSH
6806: LD_INT 0
6808: ST_TO_ADDR
// sComputer := false ;
6809: LD_ADDR_EXP 70
6813: PUSH
6814: LD_INT 0
6816: ST_TO_ADDR
// s30 := false ;
6817: LD_ADDR_EXP 71
6821: PUSH
6822: LD_INT 0
6824: ST_TO_ADDR
// s60 := false ;
6825: LD_ADDR_EXP 72
6829: PUSH
6830: LD_INT 0
6832: ST_TO_ADDR
// end ;
6833: LD_VAR 0 1
6837: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6838: LD_INT 0
6840: PPUSH
6841: PPUSH
6842: PPUSH
6843: PPUSH
6844: PPUSH
6845: PPUSH
6846: PPUSH
// result := [ ] ;
6847: LD_ADDR_VAR 0 2
6851: PUSH
6852: EMPTY
6853: ST_TO_ADDR
// if campaign_id = 1 then
6854: LD_OWVAR 69
6858: PUSH
6859: LD_INT 1
6861: EQUAL
6862: IFFALSE 10028
// begin case mission_number of 1 :
6864: LD_OWVAR 70
6868: PUSH
6869: LD_INT 1
6871: DOUBLE
6872: EQUAL
6873: IFTRUE 6877
6875: GO 6953
6877: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6878: LD_ADDR_VAR 0 2
6882: PUSH
6883: LD_INT 2
6885: PUSH
6886: LD_INT 4
6888: PUSH
6889: LD_INT 11
6891: PUSH
6892: LD_INT 12
6894: PUSH
6895: LD_INT 15
6897: PUSH
6898: LD_INT 16
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 23
6906: PUSH
6907: LD_INT 26
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 101
6923: PUSH
6924: LD_INT 102
6926: PUSH
6927: LD_INT 106
6929: PUSH
6930: LD_INT 116
6932: PUSH
6933: LD_INT 117
6935: PUSH
6936: LD_INT 118
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: ST_TO_ADDR
6951: GO 10026
6953: LD_INT 2
6955: DOUBLE
6956: EQUAL
6957: IFTRUE 6961
6959: GO 7045
6961: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6962: LD_ADDR_VAR 0 2
6966: PUSH
6967: LD_INT 2
6969: PUSH
6970: LD_INT 4
6972: PUSH
6973: LD_INT 11
6975: PUSH
6976: LD_INT 12
6978: PUSH
6979: LD_INT 15
6981: PUSH
6982: LD_INT 16
6984: PUSH
6985: LD_INT 22
6987: PUSH
6988: LD_INT 23
6990: PUSH
6991: LD_INT 26
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 101
7007: PUSH
7008: LD_INT 102
7010: PUSH
7011: LD_INT 105
7013: PUSH
7014: LD_INT 106
7016: PUSH
7017: LD_INT 108
7019: PUSH
7020: LD_INT 116
7022: PUSH
7023: LD_INT 117
7025: PUSH
7026: LD_INT 118
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: ST_TO_ADDR
7043: GO 10026
7045: LD_INT 3
7047: DOUBLE
7048: EQUAL
7049: IFTRUE 7053
7051: GO 7141
7053: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7054: LD_ADDR_VAR 0 2
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: LD_INT 4
7064: PUSH
7065: LD_INT 5
7067: PUSH
7068: LD_INT 11
7070: PUSH
7071: LD_INT 12
7073: PUSH
7074: LD_INT 15
7076: PUSH
7077: LD_INT 16
7079: PUSH
7080: LD_INT 22
7082: PUSH
7083: LD_INT 26
7085: PUSH
7086: LD_INT 36
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 101
7103: PUSH
7104: LD_INT 102
7106: PUSH
7107: LD_INT 105
7109: PUSH
7110: LD_INT 106
7112: PUSH
7113: LD_INT 108
7115: PUSH
7116: LD_INT 116
7118: PUSH
7119: LD_INT 117
7121: PUSH
7122: LD_INT 118
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: ST_TO_ADDR
7139: GO 10026
7141: LD_INT 4
7143: DOUBLE
7144: EQUAL
7145: IFTRUE 7149
7147: GO 7245
7149: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7150: LD_ADDR_VAR 0 2
7154: PUSH
7155: LD_INT 2
7157: PUSH
7158: LD_INT 4
7160: PUSH
7161: LD_INT 5
7163: PUSH
7164: LD_INT 8
7166: PUSH
7167: LD_INT 11
7169: PUSH
7170: LD_INT 12
7172: PUSH
7173: LD_INT 15
7175: PUSH
7176: LD_INT 16
7178: PUSH
7179: LD_INT 22
7181: PUSH
7182: LD_INT 23
7184: PUSH
7185: LD_INT 26
7187: PUSH
7188: LD_INT 36
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 101
7207: PUSH
7208: LD_INT 102
7210: PUSH
7211: LD_INT 105
7213: PUSH
7214: LD_INT 106
7216: PUSH
7217: LD_INT 108
7219: PUSH
7220: LD_INT 116
7222: PUSH
7223: LD_INT 117
7225: PUSH
7226: LD_INT 118
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: ST_TO_ADDR
7243: GO 10026
7245: LD_INT 5
7247: DOUBLE
7248: EQUAL
7249: IFTRUE 7253
7251: GO 7365
7253: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7254: LD_ADDR_VAR 0 2
7258: PUSH
7259: LD_INT 2
7261: PUSH
7262: LD_INT 4
7264: PUSH
7265: LD_INT 5
7267: PUSH
7268: LD_INT 6
7270: PUSH
7271: LD_INT 8
7273: PUSH
7274: LD_INT 11
7276: PUSH
7277: LD_INT 12
7279: PUSH
7280: LD_INT 15
7282: PUSH
7283: LD_INT 16
7285: PUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 23
7291: PUSH
7292: LD_INT 25
7294: PUSH
7295: LD_INT 26
7297: PUSH
7298: LD_INT 36
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 101
7319: PUSH
7320: LD_INT 102
7322: PUSH
7323: LD_INT 105
7325: PUSH
7326: LD_INT 106
7328: PUSH
7329: LD_INT 108
7331: PUSH
7332: LD_INT 109
7334: PUSH
7335: LD_INT 112
7337: PUSH
7338: LD_INT 116
7340: PUSH
7341: LD_INT 117
7343: PUSH
7344: LD_INT 118
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: ST_TO_ADDR
7363: GO 10026
7365: LD_INT 6
7367: DOUBLE
7368: EQUAL
7369: IFTRUE 7373
7371: GO 7505
7373: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7374: LD_ADDR_VAR 0 2
7378: PUSH
7379: LD_INT 2
7381: PUSH
7382: LD_INT 4
7384: PUSH
7385: LD_INT 5
7387: PUSH
7388: LD_INT 6
7390: PUSH
7391: LD_INT 8
7393: PUSH
7394: LD_INT 11
7396: PUSH
7397: LD_INT 12
7399: PUSH
7400: LD_INT 15
7402: PUSH
7403: LD_INT 16
7405: PUSH
7406: LD_INT 20
7408: PUSH
7409: LD_INT 21
7411: PUSH
7412: LD_INT 22
7414: PUSH
7415: LD_INT 23
7417: PUSH
7418: LD_INT 25
7420: PUSH
7421: LD_INT 26
7423: PUSH
7424: LD_INT 30
7426: PUSH
7427: LD_INT 31
7429: PUSH
7430: LD_INT 32
7432: PUSH
7433: LD_INT 36
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: PUSH
7457: LD_INT 101
7459: PUSH
7460: LD_INT 102
7462: PUSH
7463: LD_INT 105
7465: PUSH
7466: LD_INT 106
7468: PUSH
7469: LD_INT 108
7471: PUSH
7472: LD_INT 109
7474: PUSH
7475: LD_INT 112
7477: PUSH
7478: LD_INT 116
7480: PUSH
7481: LD_INT 117
7483: PUSH
7484: LD_INT 118
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: ST_TO_ADDR
7503: GO 10026
7505: LD_INT 7
7507: DOUBLE
7508: EQUAL
7509: IFTRUE 7513
7511: GO 7625
7513: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 2
7521: PUSH
7522: LD_INT 4
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: LD_INT 7
7530: PUSH
7531: LD_INT 11
7533: PUSH
7534: LD_INT 12
7536: PUSH
7537: LD_INT 15
7539: PUSH
7540: LD_INT 16
7542: PUSH
7543: LD_INT 20
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 22
7551: PUSH
7552: LD_INT 23
7554: PUSH
7555: LD_INT 25
7557: PUSH
7558: LD_INT 26
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 101
7579: PUSH
7580: LD_INT 102
7582: PUSH
7583: LD_INT 103
7585: PUSH
7586: LD_INT 105
7588: PUSH
7589: LD_INT 106
7591: PUSH
7592: LD_INT 108
7594: PUSH
7595: LD_INT 112
7597: PUSH
7598: LD_INT 116
7600: PUSH
7601: LD_INT 117
7603: PUSH
7604: LD_INT 118
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: ST_TO_ADDR
7623: GO 10026
7625: LD_INT 8
7627: DOUBLE
7628: EQUAL
7629: IFTRUE 7633
7631: GO 7773
7633: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7634: LD_ADDR_VAR 0 2
7638: PUSH
7639: LD_INT 2
7641: PUSH
7642: LD_INT 4
7644: PUSH
7645: LD_INT 5
7647: PUSH
7648: LD_INT 6
7650: PUSH
7651: LD_INT 7
7653: PUSH
7654: LD_INT 8
7656: PUSH
7657: LD_INT 11
7659: PUSH
7660: LD_INT 12
7662: PUSH
7663: LD_INT 15
7665: PUSH
7666: LD_INT 16
7668: PUSH
7669: LD_INT 20
7671: PUSH
7672: LD_INT 21
7674: PUSH
7675: LD_INT 22
7677: PUSH
7678: LD_INT 23
7680: PUSH
7681: LD_INT 25
7683: PUSH
7684: LD_INT 26
7686: PUSH
7687: LD_INT 30
7689: PUSH
7690: LD_INT 31
7692: PUSH
7693: LD_INT 32
7695: PUSH
7696: LD_INT 36
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 101
7723: PUSH
7724: LD_INT 102
7726: PUSH
7727: LD_INT 103
7729: PUSH
7730: LD_INT 105
7732: PUSH
7733: LD_INT 106
7735: PUSH
7736: LD_INT 108
7738: PUSH
7739: LD_INT 109
7741: PUSH
7742: LD_INT 112
7744: PUSH
7745: LD_INT 116
7747: PUSH
7748: LD_INT 117
7750: PUSH
7751: LD_INT 118
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: ST_TO_ADDR
7771: GO 10026
7773: LD_INT 9
7775: DOUBLE
7776: EQUAL
7777: IFTRUE 7781
7779: GO 7929
7781: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7782: LD_ADDR_VAR 0 2
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: LD_INT 4
7792: PUSH
7793: LD_INT 5
7795: PUSH
7796: LD_INT 6
7798: PUSH
7799: LD_INT 7
7801: PUSH
7802: LD_INT 8
7804: PUSH
7805: LD_INT 11
7807: PUSH
7808: LD_INT 12
7810: PUSH
7811: LD_INT 15
7813: PUSH
7814: LD_INT 16
7816: PUSH
7817: LD_INT 20
7819: PUSH
7820: LD_INT 21
7822: PUSH
7823: LD_INT 22
7825: PUSH
7826: LD_INT 23
7828: PUSH
7829: LD_INT 25
7831: PUSH
7832: LD_INT 26
7834: PUSH
7835: LD_INT 28
7837: PUSH
7838: LD_INT 30
7840: PUSH
7841: LD_INT 31
7843: PUSH
7844: LD_INT 32
7846: PUSH
7847: LD_INT 36
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: PUSH
7873: LD_INT 101
7875: PUSH
7876: LD_INT 102
7878: PUSH
7879: LD_INT 103
7881: PUSH
7882: LD_INT 105
7884: PUSH
7885: LD_INT 106
7887: PUSH
7888: LD_INT 108
7890: PUSH
7891: LD_INT 109
7893: PUSH
7894: LD_INT 112
7896: PUSH
7897: LD_INT 114
7899: PUSH
7900: LD_INT 116
7902: PUSH
7903: LD_INT 117
7905: PUSH
7906: LD_INT 118
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: ST_TO_ADDR
7927: GO 10026
7929: LD_INT 10
7931: DOUBLE
7932: EQUAL
7933: IFTRUE 7937
7935: GO 8133
7937: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_INT 2
7945: PUSH
7946: LD_INT 4
7948: PUSH
7949: LD_INT 5
7951: PUSH
7952: LD_INT 6
7954: PUSH
7955: LD_INT 7
7957: PUSH
7958: LD_INT 8
7960: PUSH
7961: LD_INT 9
7963: PUSH
7964: LD_INT 10
7966: PUSH
7967: LD_INT 11
7969: PUSH
7970: LD_INT 12
7972: PUSH
7973: LD_INT 13
7975: PUSH
7976: LD_INT 14
7978: PUSH
7979: LD_INT 15
7981: PUSH
7982: LD_INT 16
7984: PUSH
7985: LD_INT 17
7987: PUSH
7988: LD_INT 18
7990: PUSH
7991: LD_INT 19
7993: PUSH
7994: LD_INT 20
7996: PUSH
7997: LD_INT 21
7999: PUSH
8000: LD_INT 22
8002: PUSH
8003: LD_INT 23
8005: PUSH
8006: LD_INT 24
8008: PUSH
8009: LD_INT 25
8011: PUSH
8012: LD_INT 26
8014: PUSH
8015: LD_INT 28
8017: PUSH
8018: LD_INT 30
8020: PUSH
8021: LD_INT 31
8023: PUSH
8024: LD_INT 32
8026: PUSH
8027: LD_INT 36
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 101
8063: PUSH
8064: LD_INT 102
8066: PUSH
8067: LD_INT 103
8069: PUSH
8070: LD_INT 104
8072: PUSH
8073: LD_INT 105
8075: PUSH
8076: LD_INT 106
8078: PUSH
8079: LD_INT 107
8081: PUSH
8082: LD_INT 108
8084: PUSH
8085: LD_INT 109
8087: PUSH
8088: LD_INT 110
8090: PUSH
8091: LD_INT 111
8093: PUSH
8094: LD_INT 112
8096: PUSH
8097: LD_INT 114
8099: PUSH
8100: LD_INT 116
8102: PUSH
8103: LD_INT 117
8105: PUSH
8106: LD_INT 118
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: ST_TO_ADDR
8131: GO 10026
8133: LD_INT 11
8135: DOUBLE
8136: EQUAL
8137: IFTRUE 8141
8139: GO 8345
8141: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8142: LD_ADDR_VAR 0 2
8146: PUSH
8147: LD_INT 2
8149: PUSH
8150: LD_INT 3
8152: PUSH
8153: LD_INT 4
8155: PUSH
8156: LD_INT 5
8158: PUSH
8159: LD_INT 6
8161: PUSH
8162: LD_INT 7
8164: PUSH
8165: LD_INT 8
8167: PUSH
8168: LD_INT 9
8170: PUSH
8171: LD_INT 10
8173: PUSH
8174: LD_INT 11
8176: PUSH
8177: LD_INT 12
8179: PUSH
8180: LD_INT 13
8182: PUSH
8183: LD_INT 14
8185: PUSH
8186: LD_INT 15
8188: PUSH
8189: LD_INT 16
8191: PUSH
8192: LD_INT 17
8194: PUSH
8195: LD_INT 18
8197: PUSH
8198: LD_INT 19
8200: PUSH
8201: LD_INT 20
8203: PUSH
8204: LD_INT 21
8206: PUSH
8207: LD_INT 22
8209: PUSH
8210: LD_INT 23
8212: PUSH
8213: LD_INT 24
8215: PUSH
8216: LD_INT 25
8218: PUSH
8219: LD_INT 26
8221: PUSH
8222: LD_INT 28
8224: PUSH
8225: LD_INT 30
8227: PUSH
8228: LD_INT 31
8230: PUSH
8231: LD_INT 32
8233: PUSH
8234: LD_INT 34
8236: PUSH
8237: LD_INT 36
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: PUSH
8273: LD_INT 101
8275: PUSH
8276: LD_INT 102
8278: PUSH
8279: LD_INT 103
8281: PUSH
8282: LD_INT 104
8284: PUSH
8285: LD_INT 105
8287: PUSH
8288: LD_INT 106
8290: PUSH
8291: LD_INT 107
8293: PUSH
8294: LD_INT 108
8296: PUSH
8297: LD_INT 109
8299: PUSH
8300: LD_INT 110
8302: PUSH
8303: LD_INT 111
8305: PUSH
8306: LD_INT 112
8308: PUSH
8309: LD_INT 114
8311: PUSH
8312: LD_INT 116
8314: PUSH
8315: LD_INT 117
8317: PUSH
8318: LD_INT 118
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: ST_TO_ADDR
8343: GO 10026
8345: LD_INT 12
8347: DOUBLE
8348: EQUAL
8349: IFTRUE 8353
8351: GO 8573
8353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8354: LD_ADDR_VAR 0 2
8358: PUSH
8359: LD_INT 1
8361: PUSH
8362: LD_INT 2
8364: PUSH
8365: LD_INT 3
8367: PUSH
8368: LD_INT 4
8370: PUSH
8371: LD_INT 5
8373: PUSH
8374: LD_INT 6
8376: PUSH
8377: LD_INT 7
8379: PUSH
8380: LD_INT 8
8382: PUSH
8383: LD_INT 9
8385: PUSH
8386: LD_INT 10
8388: PUSH
8389: LD_INT 11
8391: PUSH
8392: LD_INT 12
8394: PUSH
8395: LD_INT 13
8397: PUSH
8398: LD_INT 14
8400: PUSH
8401: LD_INT 15
8403: PUSH
8404: LD_INT 16
8406: PUSH
8407: LD_INT 17
8409: PUSH
8410: LD_INT 18
8412: PUSH
8413: LD_INT 19
8415: PUSH
8416: LD_INT 20
8418: PUSH
8419: LD_INT 21
8421: PUSH
8422: LD_INT 22
8424: PUSH
8425: LD_INT 23
8427: PUSH
8428: LD_INT 24
8430: PUSH
8431: LD_INT 25
8433: PUSH
8434: LD_INT 26
8436: PUSH
8437: LD_INT 27
8439: PUSH
8440: LD_INT 28
8442: PUSH
8443: LD_INT 30
8445: PUSH
8446: LD_INT 31
8448: PUSH
8449: LD_INT 32
8451: PUSH
8452: LD_INT 33
8454: PUSH
8455: LD_INT 34
8457: PUSH
8458: LD_INT 36
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 101
8499: PUSH
8500: LD_INT 102
8502: PUSH
8503: LD_INT 103
8505: PUSH
8506: LD_INT 104
8508: PUSH
8509: LD_INT 105
8511: PUSH
8512: LD_INT 106
8514: PUSH
8515: LD_INT 107
8517: PUSH
8518: LD_INT 108
8520: PUSH
8521: LD_INT 109
8523: PUSH
8524: LD_INT 110
8526: PUSH
8527: LD_INT 111
8529: PUSH
8530: LD_INT 112
8532: PUSH
8533: LD_INT 113
8535: PUSH
8536: LD_INT 114
8538: PUSH
8539: LD_INT 116
8541: PUSH
8542: LD_INT 117
8544: PUSH
8545: LD_INT 118
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: ST_TO_ADDR
8571: GO 10026
8573: LD_INT 13
8575: DOUBLE
8576: EQUAL
8577: IFTRUE 8581
8579: GO 8789
8581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8582: LD_ADDR_VAR 0 2
8586: PUSH
8587: LD_INT 1
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 5
8601: PUSH
8602: LD_INT 8
8604: PUSH
8605: LD_INT 9
8607: PUSH
8608: LD_INT 10
8610: PUSH
8611: LD_INT 11
8613: PUSH
8614: LD_INT 12
8616: PUSH
8617: LD_INT 14
8619: PUSH
8620: LD_INT 15
8622: PUSH
8623: LD_INT 16
8625: PUSH
8626: LD_INT 17
8628: PUSH
8629: LD_INT 18
8631: PUSH
8632: LD_INT 19
8634: PUSH
8635: LD_INT 20
8637: PUSH
8638: LD_INT 21
8640: PUSH
8641: LD_INT 22
8643: PUSH
8644: LD_INT 23
8646: PUSH
8647: LD_INT 24
8649: PUSH
8650: LD_INT 25
8652: PUSH
8653: LD_INT 26
8655: PUSH
8656: LD_INT 27
8658: PUSH
8659: LD_INT 28
8661: PUSH
8662: LD_INT 30
8664: PUSH
8665: LD_INT 31
8667: PUSH
8668: LD_INT 32
8670: PUSH
8671: LD_INT 33
8673: PUSH
8674: LD_INT 34
8676: PUSH
8677: LD_INT 36
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_INT 101
8715: PUSH
8716: LD_INT 102
8718: PUSH
8719: LD_INT 103
8721: PUSH
8722: LD_INT 104
8724: PUSH
8725: LD_INT 105
8727: PUSH
8728: LD_INT 106
8730: PUSH
8731: LD_INT 107
8733: PUSH
8734: LD_INT 108
8736: PUSH
8737: LD_INT 109
8739: PUSH
8740: LD_INT 110
8742: PUSH
8743: LD_INT 111
8745: PUSH
8746: LD_INT 112
8748: PUSH
8749: LD_INT 113
8751: PUSH
8752: LD_INT 114
8754: PUSH
8755: LD_INT 116
8757: PUSH
8758: LD_INT 117
8760: PUSH
8761: LD_INT 118
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: ST_TO_ADDR
8787: GO 10026
8789: LD_INT 14
8791: DOUBLE
8792: EQUAL
8793: IFTRUE 8797
8795: GO 9021
8797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8798: LD_ADDR_VAR 0 2
8802: PUSH
8803: LD_INT 1
8805: PUSH
8806: LD_INT 2
8808: PUSH
8809: LD_INT 3
8811: PUSH
8812: LD_INT 4
8814: PUSH
8815: LD_INT 5
8817: PUSH
8818: LD_INT 6
8820: PUSH
8821: LD_INT 7
8823: PUSH
8824: LD_INT 8
8826: PUSH
8827: LD_INT 9
8829: PUSH
8830: LD_INT 10
8832: PUSH
8833: LD_INT 11
8835: PUSH
8836: LD_INT 12
8838: PUSH
8839: LD_INT 13
8841: PUSH
8842: LD_INT 14
8844: PUSH
8845: LD_INT 15
8847: PUSH
8848: LD_INT 16
8850: PUSH
8851: LD_INT 17
8853: PUSH
8854: LD_INT 18
8856: PUSH
8857: LD_INT 19
8859: PUSH
8860: LD_INT 20
8862: PUSH
8863: LD_INT 21
8865: PUSH
8866: LD_INT 22
8868: PUSH
8869: LD_INT 23
8871: PUSH
8872: LD_INT 24
8874: PUSH
8875: LD_INT 25
8877: PUSH
8878: LD_INT 26
8880: PUSH
8881: LD_INT 27
8883: PUSH
8884: LD_INT 28
8886: PUSH
8887: LD_INT 29
8889: PUSH
8890: LD_INT 30
8892: PUSH
8893: LD_INT 31
8895: PUSH
8896: LD_INT 32
8898: PUSH
8899: LD_INT 33
8901: PUSH
8902: LD_INT 34
8904: PUSH
8905: LD_INT 36
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 101
8947: PUSH
8948: LD_INT 102
8950: PUSH
8951: LD_INT 103
8953: PUSH
8954: LD_INT 104
8956: PUSH
8957: LD_INT 105
8959: PUSH
8960: LD_INT 106
8962: PUSH
8963: LD_INT 107
8965: PUSH
8966: LD_INT 108
8968: PUSH
8969: LD_INT 109
8971: PUSH
8972: LD_INT 110
8974: PUSH
8975: LD_INT 111
8977: PUSH
8978: LD_INT 112
8980: PUSH
8981: LD_INT 113
8983: PUSH
8984: LD_INT 114
8986: PUSH
8987: LD_INT 116
8989: PUSH
8990: LD_INT 117
8992: PUSH
8993: LD_INT 118
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: ST_TO_ADDR
9019: GO 10026
9021: LD_INT 15
9023: DOUBLE
9024: EQUAL
9025: IFTRUE 9029
9027: GO 9253
9029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9030: LD_ADDR_VAR 0 2
9034: PUSH
9035: LD_INT 1
9037: PUSH
9038: LD_INT 2
9040: PUSH
9041: LD_INT 3
9043: PUSH
9044: LD_INT 4
9046: PUSH
9047: LD_INT 5
9049: PUSH
9050: LD_INT 6
9052: PUSH
9053: LD_INT 7
9055: PUSH
9056: LD_INT 8
9058: PUSH
9059: LD_INT 9
9061: PUSH
9062: LD_INT 10
9064: PUSH
9065: LD_INT 11
9067: PUSH
9068: LD_INT 12
9070: PUSH
9071: LD_INT 13
9073: PUSH
9074: LD_INT 14
9076: PUSH
9077: LD_INT 15
9079: PUSH
9080: LD_INT 16
9082: PUSH
9083: LD_INT 17
9085: PUSH
9086: LD_INT 18
9088: PUSH
9089: LD_INT 19
9091: PUSH
9092: LD_INT 20
9094: PUSH
9095: LD_INT 21
9097: PUSH
9098: LD_INT 22
9100: PUSH
9101: LD_INT 23
9103: PUSH
9104: LD_INT 24
9106: PUSH
9107: LD_INT 25
9109: PUSH
9110: LD_INT 26
9112: PUSH
9113: LD_INT 27
9115: PUSH
9116: LD_INT 28
9118: PUSH
9119: LD_INT 29
9121: PUSH
9122: LD_INT 30
9124: PUSH
9125: LD_INT 31
9127: PUSH
9128: LD_INT 32
9130: PUSH
9131: LD_INT 33
9133: PUSH
9134: LD_INT 34
9136: PUSH
9137: LD_INT 36
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 101
9179: PUSH
9180: LD_INT 102
9182: PUSH
9183: LD_INT 103
9185: PUSH
9186: LD_INT 104
9188: PUSH
9189: LD_INT 105
9191: PUSH
9192: LD_INT 106
9194: PUSH
9195: LD_INT 107
9197: PUSH
9198: LD_INT 108
9200: PUSH
9201: LD_INT 109
9203: PUSH
9204: LD_INT 110
9206: PUSH
9207: LD_INT 111
9209: PUSH
9210: LD_INT 112
9212: PUSH
9213: LD_INT 113
9215: PUSH
9216: LD_INT 114
9218: PUSH
9219: LD_INT 116
9221: PUSH
9222: LD_INT 117
9224: PUSH
9225: LD_INT 118
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: ST_TO_ADDR
9251: GO 10026
9253: LD_INT 16
9255: DOUBLE
9256: EQUAL
9257: IFTRUE 9261
9259: GO 9397
9261: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9262: LD_ADDR_VAR 0 2
9266: PUSH
9267: LD_INT 2
9269: PUSH
9270: LD_INT 4
9272: PUSH
9273: LD_INT 5
9275: PUSH
9276: LD_INT 7
9278: PUSH
9279: LD_INT 11
9281: PUSH
9282: LD_INT 12
9284: PUSH
9285: LD_INT 15
9287: PUSH
9288: LD_INT 16
9290: PUSH
9291: LD_INT 20
9293: PUSH
9294: LD_INT 21
9296: PUSH
9297: LD_INT 22
9299: PUSH
9300: LD_INT 23
9302: PUSH
9303: LD_INT 25
9305: PUSH
9306: LD_INT 26
9308: PUSH
9309: LD_INT 30
9311: PUSH
9312: LD_INT 31
9314: PUSH
9315: LD_INT 32
9317: PUSH
9318: LD_INT 33
9320: PUSH
9321: LD_INT 34
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 101
9347: PUSH
9348: LD_INT 102
9350: PUSH
9351: LD_INT 103
9353: PUSH
9354: LD_INT 106
9356: PUSH
9357: LD_INT 108
9359: PUSH
9360: LD_INT 112
9362: PUSH
9363: LD_INT 113
9365: PUSH
9366: LD_INT 114
9368: PUSH
9369: LD_INT 116
9371: PUSH
9372: LD_INT 117
9374: PUSH
9375: LD_INT 118
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: ST_TO_ADDR
9395: GO 10026
9397: LD_INT 17
9399: DOUBLE
9400: EQUAL
9401: IFTRUE 9405
9403: GO 9629
9405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: LD_INT 1
9413: PUSH
9414: LD_INT 2
9416: PUSH
9417: LD_INT 3
9419: PUSH
9420: LD_INT 4
9422: PUSH
9423: LD_INT 5
9425: PUSH
9426: LD_INT 6
9428: PUSH
9429: LD_INT 7
9431: PUSH
9432: LD_INT 8
9434: PUSH
9435: LD_INT 9
9437: PUSH
9438: LD_INT 10
9440: PUSH
9441: LD_INT 11
9443: PUSH
9444: LD_INT 12
9446: PUSH
9447: LD_INT 13
9449: PUSH
9450: LD_INT 14
9452: PUSH
9453: LD_INT 15
9455: PUSH
9456: LD_INT 16
9458: PUSH
9459: LD_INT 17
9461: PUSH
9462: LD_INT 18
9464: PUSH
9465: LD_INT 19
9467: PUSH
9468: LD_INT 20
9470: PUSH
9471: LD_INT 21
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 23
9479: PUSH
9480: LD_INT 24
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 26
9488: PUSH
9489: LD_INT 27
9491: PUSH
9492: LD_INT 28
9494: PUSH
9495: LD_INT 29
9497: PUSH
9498: LD_INT 30
9500: PUSH
9501: LD_INT 31
9503: PUSH
9504: LD_INT 32
9506: PUSH
9507: LD_INT 33
9509: PUSH
9510: LD_INT 34
9512: PUSH
9513: LD_INT 36
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: PUSH
9553: LD_INT 101
9555: PUSH
9556: LD_INT 102
9558: PUSH
9559: LD_INT 103
9561: PUSH
9562: LD_INT 104
9564: PUSH
9565: LD_INT 105
9567: PUSH
9568: LD_INT 106
9570: PUSH
9571: LD_INT 107
9573: PUSH
9574: LD_INT 108
9576: PUSH
9577: LD_INT 109
9579: PUSH
9580: LD_INT 110
9582: PUSH
9583: LD_INT 111
9585: PUSH
9586: LD_INT 112
9588: PUSH
9589: LD_INT 113
9591: PUSH
9592: LD_INT 114
9594: PUSH
9595: LD_INT 116
9597: PUSH
9598: LD_INT 117
9600: PUSH
9601: LD_INT 118
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: ST_TO_ADDR
9627: GO 10026
9629: LD_INT 18
9631: DOUBLE
9632: EQUAL
9633: IFTRUE 9637
9635: GO 9785
9637: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9638: LD_ADDR_VAR 0 2
9642: PUSH
9643: LD_INT 2
9645: PUSH
9646: LD_INT 4
9648: PUSH
9649: LD_INT 5
9651: PUSH
9652: LD_INT 7
9654: PUSH
9655: LD_INT 11
9657: PUSH
9658: LD_INT 12
9660: PUSH
9661: LD_INT 15
9663: PUSH
9664: LD_INT 16
9666: PUSH
9667: LD_INT 20
9669: PUSH
9670: LD_INT 21
9672: PUSH
9673: LD_INT 22
9675: PUSH
9676: LD_INT 23
9678: PUSH
9679: LD_INT 25
9681: PUSH
9682: LD_INT 26
9684: PUSH
9685: LD_INT 30
9687: PUSH
9688: LD_INT 31
9690: PUSH
9691: LD_INT 32
9693: PUSH
9694: LD_INT 33
9696: PUSH
9697: LD_INT 34
9699: PUSH
9700: LD_INT 35
9702: PUSH
9703: LD_INT 36
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 101
9731: PUSH
9732: LD_INT 102
9734: PUSH
9735: LD_INT 103
9737: PUSH
9738: LD_INT 106
9740: PUSH
9741: LD_INT 108
9743: PUSH
9744: LD_INT 112
9746: PUSH
9747: LD_INT 113
9749: PUSH
9750: LD_INT 114
9752: PUSH
9753: LD_INT 115
9755: PUSH
9756: LD_INT 116
9758: PUSH
9759: LD_INT 117
9761: PUSH
9762: LD_INT 118
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: ST_TO_ADDR
9783: GO 10026
9785: LD_INT 19
9787: DOUBLE
9788: EQUAL
9789: IFTRUE 9793
9791: GO 10025
9793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9794: LD_ADDR_VAR 0 2
9798: PUSH
9799: LD_INT 1
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: LD_INT 3
9807: PUSH
9808: LD_INT 4
9810: PUSH
9811: LD_INT 5
9813: PUSH
9814: LD_INT 6
9816: PUSH
9817: LD_INT 7
9819: PUSH
9820: LD_INT 8
9822: PUSH
9823: LD_INT 9
9825: PUSH
9826: LD_INT 10
9828: PUSH
9829: LD_INT 11
9831: PUSH
9832: LD_INT 12
9834: PUSH
9835: LD_INT 13
9837: PUSH
9838: LD_INT 14
9840: PUSH
9841: LD_INT 15
9843: PUSH
9844: LD_INT 16
9846: PUSH
9847: LD_INT 17
9849: PUSH
9850: LD_INT 18
9852: PUSH
9853: LD_INT 19
9855: PUSH
9856: LD_INT 20
9858: PUSH
9859: LD_INT 21
9861: PUSH
9862: LD_INT 22
9864: PUSH
9865: LD_INT 23
9867: PUSH
9868: LD_INT 24
9870: PUSH
9871: LD_INT 25
9873: PUSH
9874: LD_INT 26
9876: PUSH
9877: LD_INT 27
9879: PUSH
9880: LD_INT 28
9882: PUSH
9883: LD_INT 29
9885: PUSH
9886: LD_INT 30
9888: PUSH
9889: LD_INT 31
9891: PUSH
9892: LD_INT 32
9894: PUSH
9895: LD_INT 33
9897: PUSH
9898: LD_INT 34
9900: PUSH
9901: LD_INT 35
9903: PUSH
9904: LD_INT 36
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 101
9947: PUSH
9948: LD_INT 102
9950: PUSH
9951: LD_INT 103
9953: PUSH
9954: LD_INT 104
9956: PUSH
9957: LD_INT 105
9959: PUSH
9960: LD_INT 106
9962: PUSH
9963: LD_INT 107
9965: PUSH
9966: LD_INT 108
9968: PUSH
9969: LD_INT 109
9971: PUSH
9972: LD_INT 110
9974: PUSH
9975: LD_INT 111
9977: PUSH
9978: LD_INT 112
9980: PUSH
9981: LD_INT 113
9983: PUSH
9984: LD_INT 114
9986: PUSH
9987: LD_INT 115
9989: PUSH
9990: LD_INT 116
9992: PUSH
9993: LD_INT 117
9995: PUSH
9996: LD_INT 118
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: ST_TO_ADDR
10023: GO 10026
10025: POP
// end else
10026: GO 10257
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10028: LD_ADDR_VAR 0 2
10032: PUSH
10033: LD_INT 1
10035: PUSH
10036: LD_INT 2
10038: PUSH
10039: LD_INT 3
10041: PUSH
10042: LD_INT 4
10044: PUSH
10045: LD_INT 5
10047: PUSH
10048: LD_INT 6
10050: PUSH
10051: LD_INT 7
10053: PUSH
10054: LD_INT 8
10056: PUSH
10057: LD_INT 9
10059: PUSH
10060: LD_INT 10
10062: PUSH
10063: LD_INT 11
10065: PUSH
10066: LD_INT 12
10068: PUSH
10069: LD_INT 13
10071: PUSH
10072: LD_INT 14
10074: PUSH
10075: LD_INT 15
10077: PUSH
10078: LD_INT 16
10080: PUSH
10081: LD_INT 17
10083: PUSH
10084: LD_INT 18
10086: PUSH
10087: LD_INT 19
10089: PUSH
10090: LD_INT 20
10092: PUSH
10093: LD_INT 21
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 23
10101: PUSH
10102: LD_INT 24
10104: PUSH
10105: LD_INT 25
10107: PUSH
10108: LD_INT 26
10110: PUSH
10111: LD_INT 27
10113: PUSH
10114: LD_INT 28
10116: PUSH
10117: LD_INT 29
10119: PUSH
10120: LD_INT 30
10122: PUSH
10123: LD_INT 31
10125: PUSH
10126: LD_INT 32
10128: PUSH
10129: LD_INT 33
10131: PUSH
10132: LD_INT 34
10134: PUSH
10135: LD_INT 35
10137: PUSH
10138: LD_INT 36
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 101
10181: PUSH
10182: LD_INT 102
10184: PUSH
10185: LD_INT 103
10187: PUSH
10188: LD_INT 104
10190: PUSH
10191: LD_INT 105
10193: PUSH
10194: LD_INT 106
10196: PUSH
10197: LD_INT 107
10199: PUSH
10200: LD_INT 108
10202: PUSH
10203: LD_INT 109
10205: PUSH
10206: LD_INT 110
10208: PUSH
10209: LD_INT 111
10211: PUSH
10212: LD_INT 112
10214: PUSH
10215: LD_INT 113
10217: PUSH
10218: LD_INT 114
10220: PUSH
10221: LD_INT 115
10223: PUSH
10224: LD_INT 116
10226: PUSH
10227: LD_INT 117
10229: PUSH
10230: LD_INT 118
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: ST_TO_ADDR
// if result then
10257: LD_VAR 0 2
10261: IFFALSE 11047
// begin normal :=  ;
10263: LD_ADDR_VAR 0 5
10267: PUSH
10268: LD_STRING 
10270: ST_TO_ADDR
// hardcore :=  ;
10271: LD_ADDR_VAR 0 6
10275: PUSH
10276: LD_STRING 
10278: ST_TO_ADDR
// active :=  ;
10279: LD_ADDR_VAR 0 7
10283: PUSH
10284: LD_STRING 
10286: ST_TO_ADDR
// for i = 1 to normalCounter do
10287: LD_ADDR_VAR 0 8
10291: PUSH
10292: DOUBLE
10293: LD_INT 1
10295: DEC
10296: ST_TO_ADDR
10297: LD_EXP 17
10301: PUSH
10302: FOR_TO
10303: IFFALSE 10404
// begin tmp := 0 ;
10305: LD_ADDR_VAR 0 3
10309: PUSH
10310: LD_STRING 0
10312: ST_TO_ADDR
// if result [ 1 ] then
10313: LD_VAR 0 2
10317: PUSH
10318: LD_INT 1
10320: ARRAY
10321: IFFALSE 10386
// if result [ 1 ] [ 1 ] = i then
10323: LD_VAR 0 2
10327: PUSH
10328: LD_INT 1
10330: ARRAY
10331: PUSH
10332: LD_INT 1
10334: ARRAY
10335: PUSH
10336: LD_VAR 0 8
10340: EQUAL
10341: IFFALSE 10386
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10343: LD_ADDR_VAR 0 2
10347: PUSH
10348: LD_VAR 0 2
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: LD_VAR 0 2
10360: PUSH
10361: LD_INT 1
10363: ARRAY
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: CALL_OW 3
10372: PPUSH
10373: CALL_OW 1
10377: ST_TO_ADDR
// tmp := 1 ;
10378: LD_ADDR_VAR 0 3
10382: PUSH
10383: LD_STRING 1
10385: ST_TO_ADDR
// end ; normal := normal & tmp ;
10386: LD_ADDR_VAR 0 5
10390: PUSH
10391: LD_VAR 0 5
10395: PUSH
10396: LD_VAR 0 3
10400: STR
10401: ST_TO_ADDR
// end ;
10402: GO 10302
10404: POP
10405: POP
// for i = 1 to hardcoreCounter do
10406: LD_ADDR_VAR 0 8
10410: PUSH
10411: DOUBLE
10412: LD_INT 1
10414: DEC
10415: ST_TO_ADDR
10416: LD_EXP 18
10420: PUSH
10421: FOR_TO
10422: IFFALSE 10527
// begin tmp := 0 ;
10424: LD_ADDR_VAR 0 3
10428: PUSH
10429: LD_STRING 0
10431: ST_TO_ADDR
// if result [ 2 ] then
10432: LD_VAR 0 2
10436: PUSH
10437: LD_INT 2
10439: ARRAY
10440: IFFALSE 10509
// if result [ 2 ] [ 1 ] = 100 + i then
10442: LD_VAR 0 2
10446: PUSH
10447: LD_INT 2
10449: ARRAY
10450: PUSH
10451: LD_INT 1
10453: ARRAY
10454: PUSH
10455: LD_INT 100
10457: PUSH
10458: LD_VAR 0 8
10462: PLUS
10463: EQUAL
10464: IFFALSE 10509
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10466: LD_ADDR_VAR 0 2
10470: PUSH
10471: LD_VAR 0 2
10475: PPUSH
10476: LD_INT 2
10478: PPUSH
10479: LD_VAR 0 2
10483: PUSH
10484: LD_INT 2
10486: ARRAY
10487: PPUSH
10488: LD_INT 1
10490: PPUSH
10491: CALL_OW 3
10495: PPUSH
10496: CALL_OW 1
10500: ST_TO_ADDR
// tmp := 1 ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_STRING 1
10508: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10509: LD_ADDR_VAR 0 6
10513: PUSH
10514: LD_VAR 0 6
10518: PUSH
10519: LD_VAR 0 3
10523: STR
10524: ST_TO_ADDR
// end ;
10525: GO 10421
10527: POP
10528: POP
// if isGameLoad then
10529: LD_VAR 0 1
10533: IFFALSE 11008
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10535: LD_ADDR_VAR 0 4
10539: PUSH
10540: LD_EXP 21
10544: PUSH
10545: LD_EXP 20
10549: PUSH
10550: LD_EXP 22
10554: PUSH
10555: LD_EXP 19
10559: PUSH
10560: LD_EXP 23
10564: PUSH
10565: LD_EXP 24
10569: PUSH
10570: LD_EXP 25
10574: PUSH
10575: LD_EXP 26
10579: PUSH
10580: LD_EXP 27
10584: PUSH
10585: LD_EXP 28
10589: PUSH
10590: LD_EXP 29
10594: PUSH
10595: LD_EXP 30
10599: PUSH
10600: LD_EXP 31
10604: PUSH
10605: LD_EXP 32
10609: PUSH
10610: LD_EXP 40
10614: PUSH
10615: LD_EXP 41
10619: PUSH
10620: LD_EXP 42
10624: PUSH
10625: LD_EXP 43
10629: PUSH
10630: LD_EXP 45
10634: PUSH
10635: LD_EXP 46
10639: PUSH
10640: LD_EXP 47
10644: PUSH
10645: LD_EXP 50
10649: PUSH
10650: LD_EXP 52
10654: PUSH
10655: LD_EXP 53
10659: PUSH
10660: LD_EXP 54
10664: PUSH
10665: LD_EXP 56
10669: PUSH
10670: LD_EXP 57
10674: PUSH
10675: LD_EXP 60
10679: PUSH
10680: LD_EXP 61
10684: PUSH
10685: LD_EXP 62
10689: PUSH
10690: LD_EXP 63
10694: PUSH
10695: LD_EXP 64
10699: PUSH
10700: LD_EXP 65
10704: PUSH
10705: LD_EXP 66
10709: PUSH
10710: LD_EXP 67
10714: PUSH
10715: LD_EXP 68
10719: PUSH
10720: LD_EXP 33
10724: PUSH
10725: LD_EXP 34
10729: PUSH
10730: LD_EXP 37
10734: PUSH
10735: LD_EXP 38
10739: PUSH
10740: LD_EXP 39
10744: PUSH
10745: LD_EXP 35
10749: PUSH
10750: LD_EXP 36
10754: PUSH
10755: LD_EXP 44
10759: PUSH
10760: LD_EXP 48
10764: PUSH
10765: LD_EXP 49
10769: PUSH
10770: LD_EXP 51
10774: PUSH
10775: LD_EXP 55
10779: PUSH
10780: LD_EXP 58
10784: PUSH
10785: LD_EXP 59
10789: PUSH
10790: LD_EXP 69
10794: PUSH
10795: LD_EXP 70
10799: PUSH
10800: LD_EXP 71
10804: PUSH
10805: LD_EXP 72
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: ST_TO_ADDR
// tmp :=  ;
10866: LD_ADDR_VAR 0 3
10870: PUSH
10871: LD_STRING 
10873: ST_TO_ADDR
// for i = 1 to normalCounter do
10874: LD_ADDR_VAR 0 8
10878: PUSH
10879: DOUBLE
10880: LD_INT 1
10882: DEC
10883: ST_TO_ADDR
10884: LD_EXP 17
10888: PUSH
10889: FOR_TO
10890: IFFALSE 10926
// begin if flags [ i ] then
10892: LD_VAR 0 4
10896: PUSH
10897: LD_VAR 0 8
10901: ARRAY
10902: IFFALSE 10924
// tmp := tmp & i & ; ;
10904: LD_ADDR_VAR 0 3
10908: PUSH
10909: LD_VAR 0 3
10913: PUSH
10914: LD_VAR 0 8
10918: STR
10919: PUSH
10920: LD_STRING ;
10922: STR
10923: ST_TO_ADDR
// end ;
10924: GO 10889
10926: POP
10927: POP
// for i = 1 to hardcoreCounter do
10928: LD_ADDR_VAR 0 8
10932: PUSH
10933: DOUBLE
10934: LD_INT 1
10936: DEC
10937: ST_TO_ADDR
10938: LD_EXP 18
10942: PUSH
10943: FOR_TO
10944: IFFALSE 10990
// begin if flags [ normalCounter + i ] then
10946: LD_VAR 0 4
10950: PUSH
10951: LD_EXP 17
10955: PUSH
10956: LD_VAR 0 8
10960: PLUS
10961: ARRAY
10962: IFFALSE 10988
// tmp := tmp & ( 100 + i ) & ; ;
10964: LD_ADDR_VAR 0 3
10968: PUSH
10969: LD_VAR 0 3
10973: PUSH
10974: LD_INT 100
10976: PUSH
10977: LD_VAR 0 8
10981: PLUS
10982: STR
10983: PUSH
10984: LD_STRING ;
10986: STR
10987: ST_TO_ADDR
// end ;
10988: GO 10943
10990: POP
10991: POP
// if tmp then
10992: LD_VAR 0 3
10996: IFFALSE 11008
// active := tmp ;
10998: LD_ADDR_VAR 0 7
11002: PUSH
11003: LD_VAR 0 3
11007: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11008: LD_STRING getStreamItemsFromMission("
11010: PUSH
11011: LD_VAR 0 5
11015: STR
11016: PUSH
11017: LD_STRING ","
11019: STR
11020: PUSH
11021: LD_VAR 0 6
11025: STR
11026: PUSH
11027: LD_STRING ","
11029: STR
11030: PUSH
11031: LD_VAR 0 7
11035: STR
11036: PUSH
11037: LD_STRING ")
11039: STR
11040: PPUSH
11041: CALL_OW 559
// end else
11045: GO 11054
// ToLua ( getStreamItemsFromMission("","","") ) ;
11047: LD_STRING getStreamItemsFromMission("","","")
11049: PPUSH
11050: CALL_OW 559
// end ;
11054: LD_VAR 0 2
11058: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11059: LD_EXP 16
11063: IFFALSE 11071
11065: PUSH
11066: LD_EXP 21
11070: AND
11071: IFFALSE 11195
11073: GO 11075
11075: DISABLE
11076: LD_INT 0
11078: PPUSH
11079: PPUSH
// begin enable ;
11080: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11081: LD_ADDR_VAR 0 2
11085: PUSH
11086: LD_INT 22
11088: PUSH
11089: LD_OWVAR 2
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 2
11100: PUSH
11101: LD_INT 34
11103: PUSH
11104: LD_INT 7
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 34
11113: PUSH
11114: LD_INT 45
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 34
11123: PUSH
11124: LD_INT 28
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 34
11133: PUSH
11134: LD_INT 47
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: PPUSH
11152: CALL_OW 69
11156: ST_TO_ADDR
// if not tmp then
11157: LD_VAR 0 2
11161: NOT
11162: IFFALSE 11166
// exit ;
11164: GO 11195
// for i in tmp do
11166: LD_ADDR_VAR 0 1
11170: PUSH
11171: LD_VAR 0 2
11175: PUSH
11176: FOR_IN
11177: IFFALSE 11193
// begin SetLives ( i , 0 ) ;
11179: LD_VAR 0 1
11183: PPUSH
11184: LD_INT 0
11186: PPUSH
11187: CALL_OW 234
// end ;
11191: GO 11176
11193: POP
11194: POP
// end ;
11195: PPOPN 2
11197: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11198: LD_EXP 16
11202: IFFALSE 11210
11204: PUSH
11205: LD_EXP 22
11209: AND
11210: IFFALSE 11294
11212: GO 11214
11214: DISABLE
11215: LD_INT 0
11217: PPUSH
11218: PPUSH
// begin enable ;
11219: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11220: LD_ADDR_VAR 0 2
11224: PUSH
11225: LD_INT 22
11227: PUSH
11228: LD_OWVAR 2
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 32
11239: PUSH
11240: LD_INT 3
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PPUSH
11251: CALL_OW 69
11255: ST_TO_ADDR
// if not tmp then
11256: LD_VAR 0 2
11260: NOT
11261: IFFALSE 11265
// exit ;
11263: GO 11294
// for i in tmp do
11265: LD_ADDR_VAR 0 1
11269: PUSH
11270: LD_VAR 0 2
11274: PUSH
11275: FOR_IN
11276: IFFALSE 11292
// begin SetLives ( i , 0 ) ;
11278: LD_VAR 0 1
11282: PPUSH
11283: LD_INT 0
11285: PPUSH
11286: CALL_OW 234
// end ;
11290: GO 11275
11292: POP
11293: POP
// end ;
11294: PPOPN 2
11296: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11297: LD_EXP 16
11301: IFFALSE 11309
11303: PUSH
11304: LD_EXP 19
11308: AND
11309: IFFALSE 11402
11311: GO 11313
11313: DISABLE
11314: LD_INT 0
11316: PPUSH
// begin enable ;
11317: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11318: LD_ADDR_VAR 0 1
11322: PUSH
11323: LD_INT 22
11325: PUSH
11326: LD_OWVAR 2
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 2
11337: PUSH
11338: LD_INT 25
11340: PUSH
11341: LD_INT 5
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 25
11350: PUSH
11351: LD_INT 9
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 25
11360: PUSH
11361: LD_INT 8
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PPUSH
11378: CALL_OW 69
11382: PUSH
11383: FOR_IN
11384: IFFALSE 11400
// begin SetClass ( i , 1 ) ;
11386: LD_VAR 0 1
11390: PPUSH
11391: LD_INT 1
11393: PPUSH
11394: CALL_OW 336
// end ;
11398: GO 11383
11400: POP
11401: POP
// end ;
11402: PPOPN 1
11404: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11405: LD_EXP 16
11409: IFFALSE 11417
11411: PUSH
11412: LD_EXP 20
11416: AND
11417: IFFALSE 11429
11419: PUSH
11420: LD_OWVAR 65
11424: PUSH
11425: LD_INT 7
11427: LESS
11428: AND
11429: IFFALSE 11443
11431: GO 11433
11433: DISABLE
// begin enable ;
11434: ENABLE
// game_speed := 7 ;
11435: LD_ADDR_OWVAR 65
11439: PUSH
11440: LD_INT 7
11442: ST_TO_ADDR
// end ;
11443: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11444: LD_EXP 16
11448: IFFALSE 11456
11450: PUSH
11451: LD_EXP 23
11455: AND
11456: IFFALSE 11658
11458: GO 11460
11460: DISABLE
11461: LD_INT 0
11463: PPUSH
11464: PPUSH
11465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11466: LD_ADDR_VAR 0 3
11470: PUSH
11471: LD_INT 81
11473: PUSH
11474: LD_OWVAR 2
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 21
11485: PUSH
11486: LD_INT 1
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PPUSH
11497: CALL_OW 69
11501: ST_TO_ADDR
// if not tmp then
11502: LD_VAR 0 3
11506: NOT
11507: IFFALSE 11511
// exit ;
11509: GO 11658
// if tmp > 5 then
11511: LD_VAR 0 3
11515: PUSH
11516: LD_INT 5
11518: GREATER
11519: IFFALSE 11531
// k := 5 else
11521: LD_ADDR_VAR 0 2
11525: PUSH
11526: LD_INT 5
11528: ST_TO_ADDR
11529: GO 11541
// k := tmp ;
11531: LD_ADDR_VAR 0 2
11535: PUSH
11536: LD_VAR 0 3
11540: ST_TO_ADDR
// for i := 1 to k do
11541: LD_ADDR_VAR 0 1
11545: PUSH
11546: DOUBLE
11547: LD_INT 1
11549: DEC
11550: ST_TO_ADDR
11551: LD_VAR 0 2
11555: PUSH
11556: FOR_TO
11557: IFFALSE 11656
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11559: LD_VAR 0 3
11563: PUSH
11564: LD_VAR 0 1
11568: ARRAY
11569: PPUSH
11570: LD_VAR 0 1
11574: PUSH
11575: LD_INT 4
11577: MOD
11578: PUSH
11579: LD_INT 1
11581: PLUS
11582: PPUSH
11583: CALL_OW 259
11587: PUSH
11588: LD_INT 10
11590: LESS
11591: IFFALSE 11654
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11593: LD_VAR 0 3
11597: PUSH
11598: LD_VAR 0 1
11602: ARRAY
11603: PPUSH
11604: LD_VAR 0 1
11608: PUSH
11609: LD_INT 4
11611: MOD
11612: PUSH
11613: LD_INT 1
11615: PLUS
11616: PPUSH
11617: LD_VAR 0 3
11621: PUSH
11622: LD_VAR 0 1
11626: ARRAY
11627: PPUSH
11628: LD_VAR 0 1
11632: PUSH
11633: LD_INT 4
11635: MOD
11636: PUSH
11637: LD_INT 1
11639: PLUS
11640: PPUSH
11641: CALL_OW 259
11645: PUSH
11646: LD_INT 1
11648: PLUS
11649: PPUSH
11650: CALL_OW 237
11654: GO 11556
11656: POP
11657: POP
// end ;
11658: PPOPN 3
11660: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11661: LD_EXP 16
11665: IFFALSE 11673
11667: PUSH
11668: LD_EXP 24
11672: AND
11673: IFFALSE 11693
11675: GO 11677
11677: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11678: LD_INT 4
11680: PPUSH
11681: LD_OWVAR 2
11685: PPUSH
11686: LD_INT 0
11688: PPUSH
11689: CALL_OW 324
11693: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11694: LD_EXP 16
11698: IFFALSE 11706
11700: PUSH
11701: LD_EXP 53
11705: AND
11706: IFFALSE 11726
11708: GO 11710
11710: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11711: LD_INT 19
11713: PPUSH
11714: LD_OWVAR 2
11718: PPUSH
11719: LD_INT 0
11721: PPUSH
11722: CALL_OW 324
11726: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11727: LD_EXP 16
11731: IFFALSE 11739
11733: PUSH
11734: LD_EXP 25
11738: AND
11739: IFFALSE 11841
11741: GO 11743
11743: DISABLE
11744: LD_INT 0
11746: PPUSH
11747: PPUSH
// begin enable ;
11748: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11749: LD_ADDR_VAR 0 2
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_OWVAR 2
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 2
11768: PUSH
11769: LD_INT 34
11771: PUSH
11772: LD_INT 11
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 34
11781: PUSH
11782: LD_INT 30
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: ST_TO_ADDR
// if not tmp then
11803: LD_VAR 0 2
11807: NOT
11808: IFFALSE 11812
// exit ;
11810: GO 11841
// for i in tmp do
11812: LD_ADDR_VAR 0 1
11816: PUSH
11817: LD_VAR 0 2
11821: PUSH
11822: FOR_IN
11823: IFFALSE 11839
// begin SetLives ( i , 0 ) ;
11825: LD_VAR 0 1
11829: PPUSH
11830: LD_INT 0
11832: PPUSH
11833: CALL_OW 234
// end ;
11837: GO 11822
11839: POP
11840: POP
// end ;
11841: PPOPN 2
11843: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11844: LD_EXP 16
11848: IFFALSE 11856
11850: PUSH
11851: LD_EXP 26
11855: AND
11856: IFFALSE 11876
11858: GO 11860
11860: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11861: LD_INT 32
11863: PPUSH
11864: LD_OWVAR 2
11868: PPUSH
11869: LD_INT 0
11871: PPUSH
11872: CALL_OW 324
11876: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11877: LD_EXP 16
11881: IFFALSE 11889
11883: PUSH
11884: LD_EXP 27
11888: AND
11889: IFFALSE 12072
11891: GO 11893
11893: DISABLE
11894: LD_INT 0
11896: PPUSH
11897: PPUSH
11898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11899: LD_ADDR_VAR 0 2
11903: PUSH
11904: LD_INT 22
11906: PUSH
11907: LD_OWVAR 2
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 33
11918: PUSH
11919: LD_INT 3
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: ST_TO_ADDR
// if not tmp then
11935: LD_VAR 0 2
11939: NOT
11940: IFFALSE 11944
// exit ;
11942: GO 12072
// side := 0 ;
11944: LD_ADDR_VAR 0 3
11948: PUSH
11949: LD_INT 0
11951: ST_TO_ADDR
// for i := 1 to 8 do
11952: LD_ADDR_VAR 0 1
11956: PUSH
11957: DOUBLE
11958: LD_INT 1
11960: DEC
11961: ST_TO_ADDR
11962: LD_INT 8
11964: PUSH
11965: FOR_TO
11966: IFFALSE 12016
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11968: LD_OWVAR 2
11972: PUSH
11973: LD_VAR 0 1
11977: NONEQUAL
11978: IFFALSE 12000
11980: PUSH
11981: LD_OWVAR 2
11985: PPUSH
11986: LD_VAR 0 1
11990: PPUSH
11991: CALL_OW 81
11995: PUSH
11996: LD_INT 2
11998: EQUAL
11999: AND
12000: IFFALSE 12014
// begin side := i ;
12002: LD_ADDR_VAR 0 3
12006: PUSH
12007: LD_VAR 0 1
12011: ST_TO_ADDR
// break ;
12012: GO 12016
// end ;
12014: GO 11965
12016: POP
12017: POP
// if not side then
12018: LD_VAR 0 3
12022: NOT
12023: IFFALSE 12027
// exit ;
12025: GO 12072
// for i := 1 to tmp do
12027: LD_ADDR_VAR 0 1
12031: PUSH
12032: DOUBLE
12033: LD_INT 1
12035: DEC
12036: ST_TO_ADDR
12037: LD_VAR 0 2
12041: PUSH
12042: FOR_TO
12043: IFFALSE 12070
// if Prob ( 60 ) then
12045: LD_INT 60
12047: PPUSH
12048: CALL_OW 13
12052: IFFALSE 12068
// SetSide ( i , side ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_VAR 0 3
12063: PPUSH
12064: CALL_OW 235
12068: GO 12042
12070: POP
12071: POP
// end ;
12072: PPOPN 3
12074: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12075: LD_EXP 16
12079: IFFALSE 12087
12081: PUSH
12082: LD_EXP 29
12086: AND
12087: IFFALSE 12206
12089: GO 12091
12091: DISABLE
12092: LD_INT 0
12094: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12095: LD_ADDR_VAR 0 1
12099: PUSH
12100: LD_INT 22
12102: PUSH
12103: LD_OWVAR 2
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 21
12114: PUSH
12115: LD_INT 1
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 3
12124: PUSH
12125: LD_INT 23
12127: PUSH
12128: LD_INT 0
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: LIST
12143: PPUSH
12144: CALL_OW 69
12148: PUSH
12149: FOR_IN
12150: IFFALSE 12204
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12152: LD_VAR 0 1
12156: PPUSH
12157: CALL_OW 257
12161: PUSH
12162: LD_INT 1
12164: PUSH
12165: LD_INT 2
12167: PUSH
12168: LD_INT 3
12170: PUSH
12171: LD_INT 4
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: IN
12180: IFFALSE 12202
// SetClass ( un , rand ( 1 , 4 ) ) ;
12182: LD_VAR 0 1
12186: PPUSH
12187: LD_INT 1
12189: PPUSH
12190: LD_INT 4
12192: PPUSH
12193: CALL_OW 12
12197: PPUSH
12198: CALL_OW 336
12202: GO 12149
12204: POP
12205: POP
// end ;
12206: PPOPN 1
12208: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12209: LD_EXP 16
12213: IFFALSE 12221
12215: PUSH
12216: LD_EXP 28
12220: AND
12221: IFFALSE 12300
12223: GO 12225
12225: DISABLE
12226: LD_INT 0
12228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12229: LD_ADDR_VAR 0 1
12233: PUSH
12234: LD_INT 22
12236: PUSH
12237: LD_OWVAR 2
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 21
12248: PUSH
12249: LD_INT 3
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: ST_TO_ADDR
// if not tmp then
12265: LD_VAR 0 1
12269: NOT
12270: IFFALSE 12274
// exit ;
12272: GO 12300
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12274: LD_VAR 0 1
12278: PUSH
12279: LD_INT 1
12281: PPUSH
12282: LD_VAR 0 1
12286: PPUSH
12287: CALL_OW 12
12291: ARRAY
12292: PPUSH
12293: LD_INT 100
12295: PPUSH
12296: CALL_OW 234
// end ;
12300: PPOPN 1
12302: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12303: LD_EXP 16
12307: IFFALSE 12315
12309: PUSH
12310: LD_EXP 30
12314: AND
12315: IFFALSE 12413
12317: GO 12319
12319: DISABLE
12320: LD_INT 0
12322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12323: LD_ADDR_VAR 0 1
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_OWVAR 2
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 21
12342: PUSH
12343: LD_INT 1
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PPUSH
12354: CALL_OW 69
12358: ST_TO_ADDR
// if not tmp then
12359: LD_VAR 0 1
12363: NOT
12364: IFFALSE 12368
// exit ;
12366: GO 12413
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12368: LD_VAR 0 1
12372: PUSH
12373: LD_INT 1
12375: PPUSH
12376: LD_VAR 0 1
12380: PPUSH
12381: CALL_OW 12
12385: ARRAY
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: LD_INT 4
12392: PPUSH
12393: CALL_OW 12
12397: PPUSH
12398: LD_INT 3000
12400: PPUSH
12401: LD_INT 9000
12403: PPUSH
12404: CALL_OW 12
12408: PPUSH
12409: CALL_OW 492
// end ;
12413: PPOPN 1
12415: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12416: LD_EXP 16
12420: IFFALSE 12428
12422: PUSH
12423: LD_EXP 31
12427: AND
12428: IFFALSE 12448
12430: GO 12432
12432: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12433: LD_INT 1
12435: PPUSH
12436: LD_OWVAR 2
12440: PPUSH
12441: LD_INT 0
12443: PPUSH
12444: CALL_OW 324
12448: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12449: LD_EXP 16
12453: IFFALSE 12461
12455: PUSH
12456: LD_EXP 32
12460: AND
12461: IFFALSE 12544
12463: GO 12465
12465: DISABLE
12466: LD_INT 0
12468: PPUSH
12469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12470: LD_ADDR_VAR 0 2
12474: PUSH
12475: LD_INT 22
12477: PUSH
12478: LD_OWVAR 2
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 21
12489: PUSH
12490: LD_INT 3
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: CALL_OW 69
12505: ST_TO_ADDR
// if not tmp then
12506: LD_VAR 0 2
12510: NOT
12511: IFFALSE 12515
// exit ;
12513: GO 12544
// for i in tmp do
12515: LD_ADDR_VAR 0 1
12519: PUSH
12520: LD_VAR 0 2
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12542
// SetBLevel ( i , 10 ) ;
12528: LD_VAR 0 1
12532: PPUSH
12533: LD_INT 10
12535: PPUSH
12536: CALL_OW 241
12540: GO 12525
12542: POP
12543: POP
// end ;
12544: PPOPN 2
12546: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12547: LD_EXP 16
12551: IFFALSE 12559
12553: PUSH
12554: LD_EXP 33
12558: AND
12559: IFFALSE 12670
12561: GO 12563
12563: DISABLE
12564: LD_INT 0
12566: PPUSH
12567: PPUSH
12568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12569: LD_ADDR_VAR 0 3
12573: PUSH
12574: LD_INT 22
12576: PUSH
12577: LD_OWVAR 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 25
12588: PUSH
12589: LD_INT 1
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PPUSH
12600: CALL_OW 69
12604: ST_TO_ADDR
// if not tmp then
12605: LD_VAR 0 3
12609: NOT
12610: IFFALSE 12614
// exit ;
12612: GO 12670
// un := tmp [ rand ( 1 , tmp ) ] ;
12614: LD_ADDR_VAR 0 2
12618: PUSH
12619: LD_VAR 0 3
12623: PUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_VAR 0 3
12631: PPUSH
12632: CALL_OW 12
12636: ARRAY
12637: ST_TO_ADDR
// if Crawls ( un ) then
12638: LD_VAR 0 2
12642: PPUSH
12643: CALL_OW 318
12647: IFFALSE 12658
// ComWalk ( un ) ;
12649: LD_VAR 0 2
12653: PPUSH
12654: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 5
12665: PPUSH
12666: CALL_OW 336
// end ;
12670: PPOPN 3
12672: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12673: LD_EXP 16
12677: IFFALSE 12685
12679: PUSH
12680: LD_EXP 34
12684: AND
12685: IFFALSE 12697
12687: PUSH
12688: LD_OWVAR 67
12692: PUSH
12693: LD_INT 4
12695: LESS
12696: AND
12697: IFFALSE 12716
12699: GO 12701
12701: DISABLE
// begin Difficulty := Difficulty + 1 ;
12702: LD_ADDR_OWVAR 67
12706: PUSH
12707: LD_OWVAR 67
12711: PUSH
12712: LD_INT 1
12714: PLUS
12715: ST_TO_ADDR
// end ;
12716: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12717: LD_EXP 16
12721: IFFALSE 12729
12723: PUSH
12724: LD_EXP 35
12728: AND
12729: IFFALSE 12832
12731: GO 12733
12733: DISABLE
12734: LD_INT 0
12736: PPUSH
// begin for i := 1 to 5 do
12737: LD_ADDR_VAR 0 1
12741: PUSH
12742: DOUBLE
12743: LD_INT 1
12745: DEC
12746: ST_TO_ADDR
12747: LD_INT 5
12749: PUSH
12750: FOR_TO
12751: IFFALSE 12830
// begin uc_nation := nation_nature ;
12753: LD_ADDR_OWVAR 21
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// uc_side := 0 ;
12761: LD_ADDR_OWVAR 20
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12769: LD_ADDR_OWVAR 29
12773: PUSH
12774: LD_INT 12
12776: PUSH
12777: LD_INT 12
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: ST_TO_ADDR
// hc_agressivity := 20 ;
12784: LD_ADDR_OWVAR 35
12788: PUSH
12789: LD_INT 20
12791: ST_TO_ADDR
// hc_class := class_tiger ;
12792: LD_ADDR_OWVAR 28
12796: PUSH
12797: LD_INT 14
12799: ST_TO_ADDR
// hc_gallery :=  ;
12800: LD_ADDR_OWVAR 33
12804: PUSH
12805: LD_STRING 
12807: ST_TO_ADDR
// hc_name :=  ;
12808: LD_ADDR_OWVAR 26
12812: PUSH
12813: LD_STRING 
12815: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12816: CALL_OW 44
12820: PPUSH
12821: LD_INT 0
12823: PPUSH
12824: CALL_OW 51
// end ;
12828: GO 12750
12830: POP
12831: POP
// end ;
12832: PPOPN 1
12834: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12835: LD_EXP 16
12839: IFFALSE 12847
12841: PUSH
12842: LD_EXP 36
12846: AND
12847: IFFALSE 12856
12849: GO 12851
12851: DISABLE
// StreamSibBomb ;
12852: CALL 12857 0 0
12856: END
// export function StreamSibBomb ; var i , x , y ; begin
12857: LD_INT 0
12859: PPUSH
12860: PPUSH
12861: PPUSH
12862: PPUSH
// result := false ;
12863: LD_ADDR_VAR 0 1
12867: PUSH
12868: LD_INT 0
12870: ST_TO_ADDR
// for i := 1 to 16 do
12871: LD_ADDR_VAR 0 2
12875: PUSH
12876: DOUBLE
12877: LD_INT 1
12879: DEC
12880: ST_TO_ADDR
12881: LD_INT 16
12883: PUSH
12884: FOR_TO
12885: IFFALSE 13084
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12887: LD_ADDR_VAR 0 3
12891: PUSH
12892: LD_INT 10
12894: PUSH
12895: LD_INT 20
12897: PUSH
12898: LD_INT 30
12900: PUSH
12901: LD_INT 40
12903: PUSH
12904: LD_INT 50
12906: PUSH
12907: LD_INT 60
12909: PUSH
12910: LD_INT 70
12912: PUSH
12913: LD_INT 80
12915: PUSH
12916: LD_INT 90
12918: PUSH
12919: LD_INT 100
12921: PUSH
12922: LD_INT 110
12924: PUSH
12925: LD_INT 120
12927: PUSH
12928: LD_INT 130
12930: PUSH
12931: LD_INT 140
12933: PUSH
12934: LD_INT 150
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 1
12956: PPUSH
12957: LD_INT 15
12959: PPUSH
12960: CALL_OW 12
12964: ARRAY
12965: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12966: LD_ADDR_VAR 0 4
12970: PUSH
12971: LD_INT 10
12973: PUSH
12974: LD_INT 20
12976: PUSH
12977: LD_INT 30
12979: PUSH
12980: LD_INT 40
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 60
12988: PUSH
12989: LD_INT 70
12991: PUSH
12992: LD_INT 80
12994: PUSH
12995: LD_INT 90
12997: PUSH
12998: LD_INT 100
13000: PUSH
13001: LD_INT 110
13003: PUSH
13004: LD_INT 120
13006: PUSH
13007: LD_INT 130
13009: PUSH
13010: LD_INT 140
13012: PUSH
13013: LD_INT 150
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: PUSH
13033: LD_INT 1
13035: PPUSH
13036: LD_INT 15
13038: PPUSH
13039: CALL_OW 12
13043: ARRAY
13044: ST_TO_ADDR
// if ValidHex ( x , y ) then
13045: LD_VAR 0 3
13049: PPUSH
13050: LD_VAR 0 4
13054: PPUSH
13055: CALL_OW 488
13059: IFFALSE 13082
// begin result := [ x , y ] ;
13061: LD_ADDR_VAR 0 1
13065: PUSH
13066: LD_VAR 0 3
13070: PUSH
13071: LD_VAR 0 4
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: ST_TO_ADDR
// break ;
13080: GO 13084
// end ; end ;
13082: GO 12884
13084: POP
13085: POP
// if result then
13086: LD_VAR 0 1
13090: IFFALSE 13150
// begin ToLua ( playSibBomb() ) ;
13092: LD_STRING playSibBomb()
13094: PPUSH
13095: CALL_OW 559
// wait ( 0 0$14 ) ;
13099: LD_INT 490
13101: PPUSH
13102: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13106: LD_VAR 0 1
13110: PUSH
13111: LD_INT 1
13113: ARRAY
13114: PPUSH
13115: LD_VAR 0 1
13119: PUSH
13120: LD_INT 2
13122: ARRAY
13123: PPUSH
13124: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13128: LD_VAR 0 1
13132: PUSH
13133: LD_INT 1
13135: ARRAY
13136: PPUSH
13137: LD_VAR 0 1
13141: PUSH
13142: LD_INT 2
13144: ARRAY
13145: PPUSH
13146: CALL_OW 429
// end ; end ;
13150: LD_VAR 0 1
13154: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13155: LD_EXP 16
13159: IFFALSE 13167
13161: PUSH
13162: LD_EXP 38
13166: AND
13167: IFFALSE 13179
13169: GO 13171
13171: DISABLE
// YouLost (  ) ;
13172: LD_STRING 
13174: PPUSH
13175: CALL_OW 104
13179: END
// every 0 0$1 trigger StreamModeActive and sFog do
13180: LD_EXP 16
13184: IFFALSE 13192
13186: PUSH
13187: LD_EXP 37
13191: AND
13192: IFFALSE 13206
13194: GO 13196
13196: DISABLE
// FogOff ( your_side ) ;
13197: LD_OWVAR 2
13201: PPUSH
13202: CALL_OW 344
13206: END
// every 0 0$1 trigger StreamModeActive and sSun do
13207: LD_EXP 16
13211: IFFALSE 13219
13213: PUSH
13214: LD_EXP 39
13218: AND
13219: IFFALSE 13247
13221: GO 13223
13223: DISABLE
// begin solar_recharge_percent := 0 ;
13224: LD_ADDR_OWVAR 79
13228: PUSH
13229: LD_INT 0
13231: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13232: LD_INT 10500
13234: PPUSH
13235: CALL_OW 67
// solar_recharge_percent := 100 ;
13239: LD_ADDR_OWVAR 79
13243: PUSH
13244: LD_INT 100
13246: ST_TO_ADDR
// end ;
13247: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13248: LD_EXP 16
13252: IFFALSE 13260
13254: PUSH
13255: LD_EXP 40
13259: AND
13260: IFFALSE 13499
13262: GO 13264
13264: DISABLE
13265: LD_INT 0
13267: PPUSH
13268: PPUSH
13269: PPUSH
// begin tmp := [ ] ;
13270: LD_ADDR_VAR 0 3
13274: PUSH
13275: EMPTY
13276: ST_TO_ADDR
// for i := 1 to 6 do
13277: LD_ADDR_VAR 0 1
13281: PUSH
13282: DOUBLE
13283: LD_INT 1
13285: DEC
13286: ST_TO_ADDR
13287: LD_INT 6
13289: PUSH
13290: FOR_TO
13291: IFFALSE 13396
// begin uc_nation := nation_nature ;
13293: LD_ADDR_OWVAR 21
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// uc_side := 0 ;
13301: LD_ADDR_OWVAR 20
13305: PUSH
13306: LD_INT 0
13308: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13309: LD_ADDR_OWVAR 29
13313: PUSH
13314: LD_INT 12
13316: PUSH
13317: LD_INT 12
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: ST_TO_ADDR
// hc_agressivity := 20 ;
13324: LD_ADDR_OWVAR 35
13328: PUSH
13329: LD_INT 20
13331: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13332: LD_ADDR_OWVAR 28
13336: PUSH
13337: LD_INT 17
13339: ST_TO_ADDR
// hc_gallery :=  ;
13340: LD_ADDR_OWVAR 33
13344: PUSH
13345: LD_STRING 
13347: ST_TO_ADDR
// hc_name :=  ;
13348: LD_ADDR_OWVAR 26
13352: PUSH
13353: LD_STRING 
13355: ST_TO_ADDR
// un := CreateHuman ;
13356: LD_ADDR_VAR 0 2
13360: PUSH
13361: CALL_OW 44
13365: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13366: LD_VAR 0 2
13370: PPUSH
13371: LD_INT 1
13373: PPUSH
13374: CALL_OW 51
// tmp := tmp ^ un ;
13378: LD_ADDR_VAR 0 3
13382: PUSH
13383: LD_VAR 0 3
13387: PUSH
13388: LD_VAR 0 2
13392: ADD
13393: ST_TO_ADDR
// end ;
13394: GO 13290
13396: POP
13397: POP
// repeat wait ( 0 0$1 ) ;
13398: LD_INT 35
13400: PPUSH
13401: CALL_OW 67
// for un in tmp do
13405: LD_ADDR_VAR 0 2
13409: PUSH
13410: LD_VAR 0 3
13414: PUSH
13415: FOR_IN
13416: IFFALSE 13490
// begin if IsDead ( un ) then
13418: LD_VAR 0 2
13422: PPUSH
13423: CALL_OW 301
13427: IFFALSE 13447
// begin tmp := tmp diff un ;
13429: LD_ADDR_VAR 0 3
13433: PUSH
13434: LD_VAR 0 3
13438: PUSH
13439: LD_VAR 0 2
13443: DIFF
13444: ST_TO_ADDR
// continue ;
13445: GO 13415
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13447: LD_VAR 0 2
13451: PPUSH
13452: LD_INT 3
13454: PUSH
13455: LD_INT 22
13457: PUSH
13458: LD_INT 0
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 69
13473: PPUSH
13474: LD_VAR 0 2
13478: PPUSH
13479: CALL_OW 74
13483: PPUSH
13484: CALL_OW 115
// end ;
13488: GO 13415
13490: POP
13491: POP
// until not tmp ;
13492: LD_VAR 0 3
13496: NOT
13497: IFFALSE 13398
// end ;
13499: PPOPN 3
13501: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13502: LD_EXP 16
13506: IFFALSE 13514
13508: PUSH
13509: LD_EXP 41
13513: AND
13514: IFFALSE 13568
13516: GO 13518
13518: DISABLE
// begin ToLua ( displayTroll(); ) ;
13519: LD_STRING displayTroll();
13521: PPUSH
13522: CALL_OW 559
// wait ( 3 3$00 ) ;
13526: LD_INT 6300
13528: PPUSH
13529: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13533: LD_STRING hideTroll();
13535: PPUSH
13536: CALL_OW 559
// wait ( 1 1$00 ) ;
13540: LD_INT 2100
13542: PPUSH
13543: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13547: LD_STRING displayTroll();
13549: PPUSH
13550: CALL_OW 559
// wait ( 1 1$00 ) ;
13554: LD_INT 2100
13556: PPUSH
13557: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13561: LD_STRING hideTroll();
13563: PPUSH
13564: CALL_OW 559
// end ;
13568: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13569: LD_EXP 16
13573: IFFALSE 13581
13575: PUSH
13576: LD_EXP 42
13580: AND
13581: IFFALSE 13644
13583: GO 13585
13585: DISABLE
13586: LD_INT 0
13588: PPUSH
// begin p := 0 ;
13589: LD_ADDR_VAR 0 1
13593: PUSH
13594: LD_INT 0
13596: ST_TO_ADDR
// repeat game_speed := 1 ;
13597: LD_ADDR_OWVAR 65
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13605: LD_INT 35
13607: PPUSH
13608: CALL_OW 67
// p := p + 1 ;
13612: LD_ADDR_VAR 0 1
13616: PUSH
13617: LD_VAR 0 1
13621: PUSH
13622: LD_INT 1
13624: PLUS
13625: ST_TO_ADDR
// until p >= 60 ;
13626: LD_VAR 0 1
13630: PUSH
13631: LD_INT 60
13633: GREATEREQUAL
13634: IFFALSE 13597
// game_speed := 4 ;
13636: LD_ADDR_OWVAR 65
13640: PUSH
13641: LD_INT 4
13643: ST_TO_ADDR
// end ;
13644: PPOPN 1
13646: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13647: LD_EXP 16
13651: IFFALSE 13659
13653: PUSH
13654: LD_EXP 43
13658: AND
13659: IFFALSE 13805
13661: GO 13663
13663: DISABLE
13664: LD_INT 0
13666: PPUSH
13667: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13668: LD_ADDR_VAR 0 1
13672: PUSH
13673: LD_INT 22
13675: PUSH
13676: LD_OWVAR 2
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 2
13687: PUSH
13688: LD_INT 30
13690: PUSH
13691: LD_INT 0
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 30
13700: PUSH
13701: LD_INT 1
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PPUSH
13717: CALL_OW 69
13721: ST_TO_ADDR
// if not depot then
13722: LD_VAR 0 1
13726: NOT
13727: IFFALSE 13731
// exit ;
13729: GO 13805
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13731: LD_ADDR_VAR 0 2
13735: PUSH
13736: LD_VAR 0 1
13740: PUSH
13741: LD_INT 1
13743: PPUSH
13744: LD_VAR 0 1
13748: PPUSH
13749: CALL_OW 12
13753: ARRAY
13754: PPUSH
13755: CALL_OW 274
13759: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13760: LD_VAR 0 2
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: LD_INT 0
13770: PPUSH
13771: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13775: LD_VAR 0 2
13779: PPUSH
13780: LD_INT 2
13782: PPUSH
13783: LD_INT 0
13785: PPUSH
13786: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_INT 3
13797: PPUSH
13798: LD_INT 0
13800: PPUSH
13801: CALL_OW 277
// end ;
13805: PPOPN 2
13807: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13808: LD_EXP 16
13812: IFFALSE 13820
13814: PUSH
13815: LD_EXP 44
13819: AND
13820: IFFALSE 13917
13822: GO 13824
13824: DISABLE
13825: LD_INT 0
13827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13828: LD_ADDR_VAR 0 1
13832: PUSH
13833: LD_INT 22
13835: PUSH
13836: LD_OWVAR 2
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 21
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 3
13857: PUSH
13858: LD_INT 23
13860: PUSH
13861: LD_INT 0
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 69
13881: ST_TO_ADDR
// if not tmp then
13882: LD_VAR 0 1
13886: NOT
13887: IFFALSE 13891
// exit ;
13889: GO 13917
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13891: LD_VAR 0 1
13895: PUSH
13896: LD_INT 1
13898: PPUSH
13899: LD_VAR 0 1
13903: PPUSH
13904: CALL_OW 12
13908: ARRAY
13909: PPUSH
13910: LD_INT 200
13912: PPUSH
13913: CALL_OW 234
// end ;
13917: PPOPN 1
13919: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13920: LD_EXP 16
13924: IFFALSE 13932
13926: PUSH
13927: LD_EXP 45
13931: AND
13932: IFFALSE 14011
13934: GO 13936
13936: DISABLE
13937: LD_INT 0
13939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13940: LD_ADDR_VAR 0 1
13944: PUSH
13945: LD_INT 22
13947: PUSH
13948: LD_OWVAR 2
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 21
13959: PUSH
13960: LD_INT 2
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PPUSH
13971: CALL_OW 69
13975: ST_TO_ADDR
// if not tmp then
13976: LD_VAR 0 1
13980: NOT
13981: IFFALSE 13985
// exit ;
13983: GO 14011
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13985: LD_VAR 0 1
13989: PUSH
13990: LD_INT 1
13992: PPUSH
13993: LD_VAR 0 1
13997: PPUSH
13998: CALL_OW 12
14002: ARRAY
14003: PPUSH
14004: LD_INT 60
14006: PPUSH
14007: CALL_OW 234
// end ;
14011: PPOPN 1
14013: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14014: LD_EXP 16
14018: IFFALSE 14026
14020: PUSH
14021: LD_EXP 46
14025: AND
14026: IFFALSE 14125
14028: GO 14030
14030: DISABLE
14031: LD_INT 0
14033: PPUSH
14034: PPUSH
// begin enable ;
14035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14036: LD_ADDR_VAR 0 1
14040: PUSH
14041: LD_INT 22
14043: PUSH
14044: LD_OWVAR 2
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 61
14055: PUSH
14056: EMPTY
14057: LIST
14058: PUSH
14059: LD_INT 33
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: PPUSH
14074: CALL_OW 69
14078: ST_TO_ADDR
// if not tmp then
14079: LD_VAR 0 1
14083: NOT
14084: IFFALSE 14088
// exit ;
14086: GO 14125
// for i in tmp do
14088: LD_ADDR_VAR 0 2
14092: PUSH
14093: LD_VAR 0 1
14097: PUSH
14098: FOR_IN
14099: IFFALSE 14123
// if IsControledBy ( i ) then
14101: LD_VAR 0 2
14105: PPUSH
14106: CALL_OW 312
14110: IFFALSE 14121
// ComUnlink ( i ) ;
14112: LD_VAR 0 2
14116: PPUSH
14117: CALL_OW 136
14121: GO 14098
14123: POP
14124: POP
// end ;
14125: PPOPN 2
14127: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14128: LD_EXP 16
14132: IFFALSE 14140
14134: PUSH
14135: LD_EXP 47
14139: AND
14140: IFFALSE 14280
14142: GO 14144
14144: DISABLE
14145: LD_INT 0
14147: PPUSH
14148: PPUSH
// begin ToLua ( displayPowell(); ) ;
14149: LD_STRING displayPowell();
14151: PPUSH
14152: CALL_OW 559
// uc_side := 0 ;
14156: LD_ADDR_OWVAR 20
14160: PUSH
14161: LD_INT 0
14163: ST_TO_ADDR
// uc_nation := 2 ;
14164: LD_ADDR_OWVAR 21
14168: PUSH
14169: LD_INT 2
14171: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14172: LD_ADDR_OWVAR 37
14176: PUSH
14177: LD_INT 14
14179: ST_TO_ADDR
// vc_engine := engine_siberite ;
14180: LD_ADDR_OWVAR 39
14184: PUSH
14185: LD_INT 3
14187: ST_TO_ADDR
// vc_control := control_apeman ;
14188: LD_ADDR_OWVAR 38
14192: PUSH
14193: LD_INT 5
14195: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14196: LD_ADDR_OWVAR 40
14200: PUSH
14201: LD_INT 29
14203: ST_TO_ADDR
// un := CreateVehicle ;
14204: LD_ADDR_VAR 0 2
14208: PUSH
14209: CALL_OW 45
14213: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14214: LD_VAR 0 2
14218: PPUSH
14219: LD_INT 1
14221: PPUSH
14222: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14226: LD_INT 35
14228: PPUSH
14229: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14233: LD_VAR 0 2
14237: PPUSH
14238: LD_INT 22
14240: PUSH
14241: LD_OWVAR 2
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PPUSH
14250: CALL_OW 69
14254: PPUSH
14255: LD_VAR 0 2
14259: PPUSH
14260: CALL_OW 74
14264: PPUSH
14265: CALL_OW 115
// until IsDead ( un ) ;
14269: LD_VAR 0 2
14273: PPUSH
14274: CALL_OW 301
14278: IFFALSE 14226
// end ;
14280: PPOPN 2
14282: END
// every 0 0$1 trigger StreamModeActive and sStu do
14283: LD_EXP 16
14287: IFFALSE 14295
14289: PUSH
14290: LD_EXP 55
14294: AND
14295: IFFALSE 14311
14297: GO 14299
14299: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14300: LD_STRING displayStucuk();
14302: PPUSH
14303: CALL_OW 559
// ResetFog ;
14307: CALL_OW 335
// end ;
14311: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14312: LD_EXP 16
14316: IFFALSE 14324
14318: PUSH
14319: LD_EXP 48
14323: AND
14324: IFFALSE 14465
14326: GO 14328
14328: DISABLE
14329: LD_INT 0
14331: PPUSH
14332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14333: LD_ADDR_VAR 0 2
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_OWVAR 2
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 21
14352: PUSH
14353: LD_INT 1
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 69
14368: ST_TO_ADDR
// if not tmp then
14369: LD_VAR 0 2
14373: NOT
14374: IFFALSE 14378
// exit ;
14376: GO 14465
// un := tmp [ rand ( 1 , tmp ) ] ;
14378: LD_ADDR_VAR 0 1
14382: PUSH
14383: LD_VAR 0 2
14387: PUSH
14388: LD_INT 1
14390: PPUSH
14391: LD_VAR 0 2
14395: PPUSH
14396: CALL_OW 12
14400: ARRAY
14401: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14402: LD_VAR 0 1
14406: PPUSH
14407: LD_INT 0
14409: PPUSH
14410: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14414: LD_VAR 0 1
14418: PPUSH
14419: LD_OWVAR 3
14423: PUSH
14424: LD_VAR 0 1
14428: DIFF
14429: PPUSH
14430: LD_VAR 0 1
14434: PPUSH
14435: CALL_OW 74
14439: PPUSH
14440: CALL_OW 115
// wait ( 0 0$20 ) ;
14444: LD_INT 700
14446: PPUSH
14447: CALL_OW 67
// SetSide ( un , your_side ) ;
14451: LD_VAR 0 1
14455: PPUSH
14456: LD_OWVAR 2
14460: PPUSH
14461: CALL_OW 235
// end ;
14465: PPOPN 2
14467: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14468: LD_EXP 16
14472: IFFALSE 14480
14474: PUSH
14475: LD_EXP 49
14479: AND
14480: IFFALSE 14586
14482: GO 14484
14484: DISABLE
14485: LD_INT 0
14487: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14488: LD_ADDR_VAR 0 1
14492: PUSH
14493: LD_INT 22
14495: PUSH
14496: LD_OWVAR 2
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 2
14507: PUSH
14508: LD_INT 30
14510: PUSH
14511: LD_INT 0
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 30
14520: PUSH
14521: LD_INT 1
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PPUSH
14537: CALL_OW 69
14541: ST_TO_ADDR
// if not depot then
14542: LD_VAR 0 1
14546: NOT
14547: IFFALSE 14551
// exit ;
14549: GO 14586
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14551: LD_VAR 0 1
14555: PUSH
14556: LD_INT 1
14558: ARRAY
14559: PPUSH
14560: CALL_OW 250
14564: PPUSH
14565: LD_VAR 0 1
14569: PUSH
14570: LD_INT 1
14572: ARRAY
14573: PPUSH
14574: CALL_OW 251
14578: PPUSH
14579: LD_INT 70
14581: PPUSH
14582: CALL_OW 495
// end ;
14586: PPOPN 1
14588: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14589: LD_EXP 16
14593: IFFALSE 14601
14595: PUSH
14596: LD_EXP 50
14600: AND
14601: IFFALSE 14812
14603: GO 14605
14605: DISABLE
14606: LD_INT 0
14608: PPUSH
14609: PPUSH
14610: PPUSH
14611: PPUSH
14612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14613: LD_ADDR_VAR 0 5
14617: PUSH
14618: LD_INT 22
14620: PUSH
14621: LD_OWVAR 2
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 21
14632: PUSH
14633: LD_INT 1
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: ST_TO_ADDR
// if not tmp then
14649: LD_VAR 0 5
14653: NOT
14654: IFFALSE 14658
// exit ;
14656: GO 14812
// for i in tmp do
14658: LD_ADDR_VAR 0 1
14662: PUSH
14663: LD_VAR 0 5
14667: PUSH
14668: FOR_IN
14669: IFFALSE 14810
// begin d := rand ( 0 , 5 ) ;
14671: LD_ADDR_VAR 0 4
14675: PUSH
14676: LD_INT 0
14678: PPUSH
14679: LD_INT 5
14681: PPUSH
14682: CALL_OW 12
14686: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14687: LD_ADDR_VAR 0 2
14691: PUSH
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 250
14701: PPUSH
14702: LD_VAR 0 4
14706: PPUSH
14707: LD_INT 3
14709: PPUSH
14710: LD_INT 12
14712: PPUSH
14713: CALL_OW 12
14717: PPUSH
14718: CALL_OW 272
14722: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14723: LD_ADDR_VAR 0 3
14727: PUSH
14728: LD_VAR 0 1
14732: PPUSH
14733: CALL_OW 251
14737: PPUSH
14738: LD_VAR 0 4
14742: PPUSH
14743: LD_INT 3
14745: PPUSH
14746: LD_INT 12
14748: PPUSH
14749: CALL_OW 12
14753: PPUSH
14754: CALL_OW 273
14758: ST_TO_ADDR
// if ValidHex ( x , y ) then
14759: LD_VAR 0 2
14763: PPUSH
14764: LD_VAR 0 3
14768: PPUSH
14769: CALL_OW 488
14773: IFFALSE 14808
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14775: LD_VAR 0 1
14779: PPUSH
14780: LD_VAR 0 2
14784: PPUSH
14785: LD_VAR 0 3
14789: PPUSH
14790: LD_INT 3
14792: PPUSH
14793: LD_INT 6
14795: PPUSH
14796: CALL_OW 12
14800: PPUSH
14801: LD_INT 1
14803: PPUSH
14804: CALL_OW 483
// end ;
14808: GO 14668
14810: POP
14811: POP
// end ;
14812: PPOPN 5
14814: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14815: LD_EXP 16
14819: IFFALSE 14827
14821: PUSH
14822: LD_EXP 51
14826: AND
14827: IFFALSE 14921
14829: GO 14831
14831: DISABLE
14832: LD_INT 0
14834: PPUSH
14835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14836: LD_ADDR_VAR 0 2
14840: PUSH
14841: LD_INT 22
14843: PUSH
14844: LD_OWVAR 2
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 32
14855: PUSH
14856: LD_INT 1
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 2
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: PPUSH
14878: CALL_OW 69
14882: ST_TO_ADDR
// if not tmp then
14883: LD_VAR 0 2
14887: NOT
14888: IFFALSE 14892
// exit ;
14890: GO 14921
// for i in tmp do
14892: LD_ADDR_VAR 0 1
14896: PUSH
14897: LD_VAR 0 2
14901: PUSH
14902: FOR_IN
14903: IFFALSE 14919
// SetFuel ( i , 0 ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_INT 0
14912: PPUSH
14913: CALL_OW 240
14917: GO 14902
14919: POP
14920: POP
// end ;
14921: PPOPN 2
14923: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14924: LD_EXP 16
14928: IFFALSE 14936
14930: PUSH
14931: LD_EXP 52
14935: AND
14936: IFFALSE 15002
14938: GO 14940
14940: DISABLE
14941: LD_INT 0
14943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14944: LD_ADDR_VAR 0 1
14948: PUSH
14949: LD_INT 22
14951: PUSH
14952: LD_OWVAR 2
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 30
14963: PUSH
14964: LD_INT 29
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PPUSH
14975: CALL_OW 69
14979: ST_TO_ADDR
// if not tmp then
14980: LD_VAR 0 1
14984: NOT
14985: IFFALSE 14989
// exit ;
14987: GO 15002
// DestroyUnit ( tmp [ 1 ] ) ;
14989: LD_VAR 0 1
14993: PUSH
14994: LD_INT 1
14996: ARRAY
14997: PPUSH
14998: CALL_OW 65
// end ;
15002: PPOPN 1
15004: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15005: LD_EXP 16
15009: IFFALSE 15017
15011: PUSH
15012: LD_EXP 54
15016: AND
15017: IFFALSE 15146
15019: GO 15021
15021: DISABLE
15022: LD_INT 0
15024: PPUSH
// begin uc_side := 0 ;
15025: LD_ADDR_OWVAR 20
15029: PUSH
15030: LD_INT 0
15032: ST_TO_ADDR
// uc_nation := nation_arabian ;
15033: LD_ADDR_OWVAR 21
15037: PUSH
15038: LD_INT 2
15040: ST_TO_ADDR
// hc_gallery :=  ;
15041: LD_ADDR_OWVAR 33
15045: PUSH
15046: LD_STRING 
15048: ST_TO_ADDR
// hc_name :=  ;
15049: LD_ADDR_OWVAR 26
15053: PUSH
15054: LD_STRING 
15056: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15057: LD_INT 1
15059: PPUSH
15060: LD_INT 11
15062: PPUSH
15063: LD_INT 10
15065: PPUSH
15066: CALL_OW 380
// un := CreateHuman ;
15070: LD_ADDR_VAR 0 1
15074: PUSH
15075: CALL_OW 44
15079: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15080: LD_VAR 0 1
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15092: LD_INT 35
15094: PPUSH
15095: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15099: LD_VAR 0 1
15103: PPUSH
15104: LD_INT 22
15106: PUSH
15107: LD_OWVAR 2
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PPUSH
15116: CALL_OW 69
15120: PPUSH
15121: LD_VAR 0 1
15125: PPUSH
15126: CALL_OW 74
15130: PPUSH
15131: CALL_OW 115
// until IsDead ( un ) ;
15135: LD_VAR 0 1
15139: PPUSH
15140: CALL_OW 301
15144: IFFALSE 15092
// end ;
15146: PPOPN 1
15148: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15149: LD_EXP 16
15153: IFFALSE 15161
15155: PUSH
15156: LD_EXP 56
15160: AND
15161: IFFALSE 15173
15163: GO 15165
15165: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15166: LD_STRING earthquake(getX(game), 0, 32)
15168: PPUSH
15169: CALL_OW 559
15173: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15174: LD_EXP 16
15178: IFFALSE 15186
15180: PUSH
15181: LD_EXP 57
15185: AND
15186: IFFALSE 15277
15188: GO 15190
15190: DISABLE
15191: LD_INT 0
15193: PPUSH
// begin enable ;
15194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15195: LD_ADDR_VAR 0 1
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 21
15214: PUSH
15215: LD_INT 2
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 33
15224: PUSH
15225: LD_INT 3
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: PPUSH
15237: CALL_OW 69
15241: ST_TO_ADDR
// if not tmp then
15242: LD_VAR 0 1
15246: NOT
15247: IFFALSE 15251
// exit ;
15249: GO 15277
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15251: LD_VAR 0 1
15255: PUSH
15256: LD_INT 1
15258: PPUSH
15259: LD_VAR 0 1
15263: PPUSH
15264: CALL_OW 12
15268: ARRAY
15269: PPUSH
15270: LD_INT 1
15272: PPUSH
15273: CALL_OW 234
// end ;
15277: PPOPN 1
15279: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15280: LD_EXP 16
15284: IFFALSE 15292
15286: PUSH
15287: LD_EXP 58
15291: AND
15292: IFFALSE 15433
15294: GO 15296
15296: DISABLE
15297: LD_INT 0
15299: PPUSH
15300: PPUSH
15301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15302: LD_ADDR_VAR 0 3
15306: PUSH
15307: LD_INT 22
15309: PUSH
15310: LD_OWVAR 2
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 25
15321: PUSH
15322: LD_INT 1
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PPUSH
15333: CALL_OW 69
15337: ST_TO_ADDR
// if not tmp then
15338: LD_VAR 0 3
15342: NOT
15343: IFFALSE 15347
// exit ;
15345: GO 15433
// un := tmp [ rand ( 1 , tmp ) ] ;
15347: LD_ADDR_VAR 0 2
15351: PUSH
15352: LD_VAR 0 3
15356: PUSH
15357: LD_INT 1
15359: PPUSH
15360: LD_VAR 0 3
15364: PPUSH
15365: CALL_OW 12
15369: ARRAY
15370: ST_TO_ADDR
// if Crawls ( un ) then
15371: LD_VAR 0 2
15375: PPUSH
15376: CALL_OW 318
15380: IFFALSE 15391
// ComWalk ( un ) ;
15382: LD_VAR 0 2
15386: PPUSH
15387: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15391: LD_VAR 0 2
15395: PPUSH
15396: LD_INT 9
15398: PPUSH
15399: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15403: LD_INT 28
15405: PPUSH
15406: LD_OWVAR 2
15410: PPUSH
15411: LD_INT 2
15413: PPUSH
15414: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15418: LD_INT 29
15420: PPUSH
15421: LD_OWVAR 2
15425: PPUSH
15426: LD_INT 2
15428: PPUSH
15429: CALL_OW 322
// end ;
15433: PPOPN 3
15435: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15436: LD_EXP 16
15440: IFFALSE 15448
15442: PUSH
15443: LD_EXP 59
15447: AND
15448: IFFALSE 15559
15450: GO 15452
15452: DISABLE
15453: LD_INT 0
15455: PPUSH
15456: PPUSH
15457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15458: LD_ADDR_VAR 0 3
15462: PUSH
15463: LD_INT 22
15465: PUSH
15466: LD_OWVAR 2
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 25
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 69
15493: ST_TO_ADDR
// if not tmp then
15494: LD_VAR 0 3
15498: NOT
15499: IFFALSE 15503
// exit ;
15501: GO 15559
// un := tmp [ rand ( 1 , tmp ) ] ;
15503: LD_ADDR_VAR 0 2
15507: PUSH
15508: LD_VAR 0 3
15512: PUSH
15513: LD_INT 1
15515: PPUSH
15516: LD_VAR 0 3
15520: PPUSH
15521: CALL_OW 12
15525: ARRAY
15526: ST_TO_ADDR
// if Crawls ( un ) then
15527: LD_VAR 0 2
15531: PPUSH
15532: CALL_OW 318
15536: IFFALSE 15547
// ComWalk ( un ) ;
15538: LD_VAR 0 2
15542: PPUSH
15543: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15547: LD_VAR 0 2
15551: PPUSH
15552: LD_INT 8
15554: PPUSH
15555: CALL_OW 336
// end ;
15559: PPOPN 3
15561: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15562: LD_EXP 16
15566: IFFALSE 15574
15568: PUSH
15569: LD_EXP 60
15573: AND
15574: IFFALSE 15718
15576: GO 15578
15578: DISABLE
15579: LD_INT 0
15581: PPUSH
15582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15583: LD_ADDR_VAR 0 2
15587: PUSH
15588: LD_INT 22
15590: PUSH
15591: LD_OWVAR 2
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 21
15602: PUSH
15603: LD_INT 2
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 34
15615: PUSH
15616: LD_INT 12
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: LD_INT 34
15625: PUSH
15626: LD_INT 51
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 34
15635: PUSH
15636: LD_INT 32
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: LIST
15653: PPUSH
15654: CALL_OW 69
15658: ST_TO_ADDR
// if not tmp then
15659: LD_VAR 0 2
15663: NOT
15664: IFFALSE 15668
// exit ;
15666: GO 15718
// for i in tmp do
15668: LD_ADDR_VAR 0 1
15672: PUSH
15673: LD_VAR 0 2
15677: PUSH
15678: FOR_IN
15679: IFFALSE 15716
// if GetCargo ( i , mat_artifact ) = 0 then
15681: LD_VAR 0 1
15685: PPUSH
15686: LD_INT 4
15688: PPUSH
15689: CALL_OW 289
15693: PUSH
15694: LD_INT 0
15696: EQUAL
15697: IFFALSE 15714
// SetCargo ( i , mat_siberit , 100 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 3
15706: PPUSH
15707: LD_INT 100
15709: PPUSH
15710: CALL_OW 290
15714: GO 15678
15716: POP
15717: POP
// end ;
15718: PPOPN 2
15720: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15721: LD_EXP 16
15725: IFFALSE 15733
15727: PUSH
15728: LD_EXP 61
15732: AND
15733: IFFALSE 15916
15735: GO 15737
15737: DISABLE
15738: LD_INT 0
15740: PPUSH
15741: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15742: LD_ADDR_VAR 0 2
15746: PUSH
15747: LD_INT 22
15749: PUSH
15750: LD_OWVAR 2
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PPUSH
15759: CALL_OW 69
15763: ST_TO_ADDR
// if not tmp then
15764: LD_VAR 0 2
15768: NOT
15769: IFFALSE 15773
// exit ;
15771: GO 15916
// for i := 1 to 2 do
15773: LD_ADDR_VAR 0 1
15777: PUSH
15778: DOUBLE
15779: LD_INT 1
15781: DEC
15782: ST_TO_ADDR
15783: LD_INT 2
15785: PUSH
15786: FOR_TO
15787: IFFALSE 15914
// begin uc_side := your_side ;
15789: LD_ADDR_OWVAR 20
15793: PUSH
15794: LD_OWVAR 2
15798: ST_TO_ADDR
// uc_nation := nation_american ;
15799: LD_ADDR_OWVAR 21
15803: PUSH
15804: LD_INT 1
15806: ST_TO_ADDR
// vc_chassis := us_morphling ;
15807: LD_ADDR_OWVAR 37
15811: PUSH
15812: LD_INT 5
15814: ST_TO_ADDR
// vc_engine := engine_siberite ;
15815: LD_ADDR_OWVAR 39
15819: PUSH
15820: LD_INT 3
15822: ST_TO_ADDR
// vc_control := control_computer ;
15823: LD_ADDR_OWVAR 38
15827: PUSH
15828: LD_INT 3
15830: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15831: LD_ADDR_OWVAR 40
15835: PUSH
15836: LD_INT 10
15838: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15839: LD_VAR 0 2
15843: PUSH
15844: LD_INT 1
15846: ARRAY
15847: PPUSH
15848: CALL_OW 310
15852: NOT
15853: IFFALSE 15900
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15855: CALL_OW 45
15859: PPUSH
15860: LD_VAR 0 2
15864: PUSH
15865: LD_INT 1
15867: ARRAY
15868: PPUSH
15869: CALL_OW 250
15873: PPUSH
15874: LD_VAR 0 2
15878: PUSH
15879: LD_INT 1
15881: ARRAY
15882: PPUSH
15883: CALL_OW 251
15887: PPUSH
15888: LD_INT 12
15890: PPUSH
15891: LD_INT 1
15893: PPUSH
15894: CALL_OW 50
15898: GO 15912
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15900: CALL_OW 45
15904: PPUSH
15905: LD_INT 1
15907: PPUSH
15908: CALL_OW 51
// end ;
15912: GO 15786
15914: POP
15915: POP
// end ;
15916: PPOPN 2
15918: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15919: LD_EXP 16
15923: IFFALSE 15931
15925: PUSH
15926: LD_EXP 62
15930: AND
15931: IFFALSE 16153
15933: GO 15935
15935: DISABLE
15936: LD_INT 0
15938: PPUSH
15939: PPUSH
15940: PPUSH
15941: PPUSH
15942: PPUSH
15943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15944: LD_ADDR_VAR 0 6
15948: PUSH
15949: LD_INT 22
15951: PUSH
15952: LD_OWVAR 2
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 21
15963: PUSH
15964: LD_INT 1
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 3
15973: PUSH
15974: LD_INT 23
15976: PUSH
15977: LD_INT 0
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 69
15997: ST_TO_ADDR
// if not tmp then
15998: LD_VAR 0 6
16002: NOT
16003: IFFALSE 16007
// exit ;
16005: GO 16153
// s1 := rand ( 1 , 4 ) ;
16007: LD_ADDR_VAR 0 2
16011: PUSH
16012: LD_INT 1
16014: PPUSH
16015: LD_INT 4
16017: PPUSH
16018: CALL_OW 12
16022: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16023: LD_ADDR_VAR 0 4
16027: PUSH
16028: LD_VAR 0 6
16032: PUSH
16033: LD_INT 1
16035: ARRAY
16036: PPUSH
16037: LD_VAR 0 2
16041: PPUSH
16042: CALL_OW 259
16046: ST_TO_ADDR
// if s1 = 1 then
16047: LD_VAR 0 2
16051: PUSH
16052: LD_INT 1
16054: EQUAL
16055: IFFALSE 16075
// s2 := rand ( 2 , 4 ) else
16057: LD_ADDR_VAR 0 3
16061: PUSH
16062: LD_INT 2
16064: PPUSH
16065: LD_INT 4
16067: PPUSH
16068: CALL_OW 12
16072: ST_TO_ADDR
16073: GO 16083
// s2 := 1 ;
16075: LD_ADDR_VAR 0 3
16079: PUSH
16080: LD_INT 1
16082: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16083: LD_ADDR_VAR 0 5
16087: PUSH
16088: LD_VAR 0 6
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: CALL_OW 259
16106: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16107: LD_VAR 0 6
16111: PUSH
16112: LD_INT 1
16114: ARRAY
16115: PPUSH
16116: LD_VAR 0 2
16120: PPUSH
16121: LD_VAR 0 5
16125: PPUSH
16126: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16130: LD_VAR 0 6
16134: PUSH
16135: LD_INT 1
16137: ARRAY
16138: PPUSH
16139: LD_VAR 0 3
16143: PPUSH
16144: LD_VAR 0 4
16148: PPUSH
16149: CALL_OW 237
// end ;
16153: PPOPN 6
16155: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16156: LD_EXP 16
16160: IFFALSE 16168
16162: PUSH
16163: LD_EXP 63
16167: AND
16168: IFFALSE 16247
16170: GO 16172
16172: DISABLE
16173: LD_INT 0
16175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16176: LD_ADDR_VAR 0 1
16180: PUSH
16181: LD_INT 22
16183: PUSH
16184: LD_OWVAR 2
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: LD_INT 30
16195: PUSH
16196: LD_INT 3
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PPUSH
16207: CALL_OW 69
16211: ST_TO_ADDR
// if not tmp then
16212: LD_VAR 0 1
16216: NOT
16217: IFFALSE 16221
// exit ;
16219: GO 16247
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16221: LD_VAR 0 1
16225: PUSH
16226: LD_INT 1
16228: PPUSH
16229: LD_VAR 0 1
16233: PPUSH
16234: CALL_OW 12
16238: ARRAY
16239: PPUSH
16240: LD_INT 1
16242: PPUSH
16243: CALL_OW 234
// end ;
16247: PPOPN 1
16249: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16250: LD_EXP 16
16254: IFFALSE 16262
16256: PUSH
16257: LD_EXP 64
16261: AND
16262: IFFALSE 16374
16264: GO 16266
16266: DISABLE
16267: LD_INT 0
16269: PPUSH
16270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16271: LD_ADDR_VAR 0 2
16275: PUSH
16276: LD_INT 22
16278: PUSH
16279: LD_OWVAR 2
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: LD_INT 2
16290: PUSH
16291: LD_INT 30
16293: PUSH
16294: LD_INT 27
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 30
16303: PUSH
16304: LD_INT 26
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 30
16313: PUSH
16314: LD_INT 28
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PPUSH
16331: CALL_OW 69
16335: ST_TO_ADDR
// if not tmp then
16336: LD_VAR 0 2
16340: NOT
16341: IFFALSE 16345
// exit ;
16343: GO 16374
// for i in tmp do
16345: LD_ADDR_VAR 0 1
16349: PUSH
16350: LD_VAR 0 2
16354: PUSH
16355: FOR_IN
16356: IFFALSE 16372
// SetLives ( i , 1 ) ;
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 1
16365: PPUSH
16366: CALL_OW 234
16370: GO 16355
16372: POP
16373: POP
// end ;
16374: PPOPN 2
16376: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16377: LD_EXP 16
16381: IFFALSE 16389
16383: PUSH
16384: LD_EXP 65
16388: AND
16389: IFFALSE 16676
16391: GO 16393
16393: DISABLE
16394: LD_INT 0
16396: PPUSH
16397: PPUSH
16398: PPUSH
// begin i := rand ( 1 , 7 ) ;
16399: LD_ADDR_VAR 0 1
16403: PUSH
16404: LD_INT 1
16406: PPUSH
16407: LD_INT 7
16409: PPUSH
16410: CALL_OW 12
16414: ST_TO_ADDR
// case i of 1 :
16415: LD_VAR 0 1
16419: PUSH
16420: LD_INT 1
16422: DOUBLE
16423: EQUAL
16424: IFTRUE 16428
16426: GO 16438
16428: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16429: LD_STRING earthquake(getX(game), 0, 32)
16431: PPUSH
16432: CALL_OW 559
16436: GO 16676
16438: LD_INT 2
16440: DOUBLE
16441: EQUAL
16442: IFTRUE 16446
16444: GO 16460
16446: POP
// begin ToLua ( displayStucuk(); ) ;
16447: LD_STRING displayStucuk();
16449: PPUSH
16450: CALL_OW 559
// ResetFog ;
16454: CALL_OW 335
// end ; 3 :
16458: GO 16676
16460: LD_INT 3
16462: DOUBLE
16463: EQUAL
16464: IFTRUE 16468
16466: GO 16572
16468: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16469: LD_ADDR_VAR 0 2
16473: PUSH
16474: LD_INT 22
16476: PUSH
16477: LD_OWVAR 2
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: ST_TO_ADDR
// if not tmp then
16505: LD_VAR 0 2
16509: NOT
16510: IFFALSE 16514
// exit ;
16512: GO 16676
// un := tmp [ rand ( 1 , tmp ) ] ;
16514: LD_ADDR_VAR 0 3
16518: PUSH
16519: LD_VAR 0 2
16523: PUSH
16524: LD_INT 1
16526: PPUSH
16527: LD_VAR 0 2
16531: PPUSH
16532: CALL_OW 12
16536: ARRAY
16537: ST_TO_ADDR
// if Crawls ( un ) then
16538: LD_VAR 0 3
16542: PPUSH
16543: CALL_OW 318
16547: IFFALSE 16558
// ComWalk ( un ) ;
16549: LD_VAR 0 3
16553: PPUSH
16554: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16558: LD_VAR 0 3
16562: PPUSH
16563: LD_INT 8
16565: PPUSH
16566: CALL_OW 336
// end ; 4 :
16570: GO 16676
16572: LD_INT 4
16574: DOUBLE
16575: EQUAL
16576: IFTRUE 16580
16578: GO 16654
16580: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16581: LD_ADDR_VAR 0 2
16585: PUSH
16586: LD_INT 22
16588: PUSH
16589: LD_OWVAR 2
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 30
16600: PUSH
16601: LD_INT 29
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: ST_TO_ADDR
// if not tmp then
16617: LD_VAR 0 2
16621: NOT
16622: IFFALSE 16626
// exit ;
16624: GO 16676
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16626: LD_VAR 0 2
16630: PUSH
16631: LD_INT 1
16633: ARRAY
16634: PPUSH
16635: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16639: LD_VAR 0 2
16643: PUSH
16644: LD_INT 1
16646: ARRAY
16647: PPUSH
16648: CALL_OW 65
// end ; 5 .. 7 :
16652: GO 16676
16654: LD_INT 5
16656: DOUBLE
16657: GREATEREQUAL
16658: IFFALSE 16666
16660: LD_INT 7
16662: DOUBLE
16663: LESSEQUAL
16664: IFTRUE 16668
16666: GO 16675
16668: POP
// StreamSibBomb ; end ;
16669: CALL 12857 0 0
16673: GO 16676
16675: POP
// end ;
16676: PPOPN 3
16678: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16679: LD_EXP 16
16683: IFFALSE 16691
16685: PUSH
16686: LD_EXP 66
16690: AND
16691: IFFALSE 16847
16693: GO 16695
16695: DISABLE
16696: LD_INT 0
16698: PPUSH
16699: PPUSH
16700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16701: LD_ADDR_VAR 0 2
16705: PUSH
16706: LD_INT 81
16708: PUSH
16709: LD_OWVAR 2
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 2
16720: PUSH
16721: LD_INT 21
16723: PUSH
16724: LD_INT 1
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 21
16733: PUSH
16734: LD_INT 2
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: LIST
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PPUSH
16750: CALL_OW 69
16754: ST_TO_ADDR
// if not tmp then
16755: LD_VAR 0 2
16759: NOT
16760: IFFALSE 16764
// exit ;
16762: GO 16847
// p := 0 ;
16764: LD_ADDR_VAR 0 3
16768: PUSH
16769: LD_INT 0
16771: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16772: LD_INT 35
16774: PPUSH
16775: CALL_OW 67
// p := p + 1 ;
16779: LD_ADDR_VAR 0 3
16783: PUSH
16784: LD_VAR 0 3
16788: PUSH
16789: LD_INT 1
16791: PLUS
16792: ST_TO_ADDR
// for i in tmp do
16793: LD_ADDR_VAR 0 1
16797: PUSH
16798: LD_VAR 0 2
16802: PUSH
16803: FOR_IN
16804: IFFALSE 16835
// if GetLives ( i ) < 1000 then
16806: LD_VAR 0 1
16810: PPUSH
16811: CALL_OW 256
16815: PUSH
16816: LD_INT 1000
16818: LESS
16819: IFFALSE 16833
// SetLives ( i , 1000 ) ;
16821: LD_VAR 0 1
16825: PPUSH
16826: LD_INT 1000
16828: PPUSH
16829: CALL_OW 234
16833: GO 16803
16835: POP
16836: POP
// until p > 20 ;
16837: LD_VAR 0 3
16841: PUSH
16842: LD_INT 20
16844: GREATER
16845: IFFALSE 16772
// end ;
16847: PPOPN 3
16849: END
// every 0 0$1 trigger StreamModeActive and sTime do
16850: LD_EXP 16
16854: IFFALSE 16862
16856: PUSH
16857: LD_EXP 67
16861: AND
16862: IFFALSE 16897
16864: GO 16866
16866: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16867: LD_INT 28
16869: PPUSH
16870: LD_OWVAR 2
16874: PPUSH
16875: LD_INT 2
16877: PPUSH
16878: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16882: LD_INT 30
16884: PPUSH
16885: LD_OWVAR 2
16889: PPUSH
16890: LD_INT 2
16892: PPUSH
16893: CALL_OW 322
// end ;
16897: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16898: LD_EXP 16
16902: IFFALSE 16910
16904: PUSH
16905: LD_EXP 68
16909: AND
16910: IFFALSE 17031
16912: GO 16914
16914: DISABLE
16915: LD_INT 0
16917: PPUSH
16918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_OWVAR 2
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 21
16938: PUSH
16939: LD_INT 1
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 3
16948: PUSH
16949: LD_INT 23
16951: PUSH
16952: LD_INT 0
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: PPUSH
16968: CALL_OW 69
16972: ST_TO_ADDR
// if not tmp then
16973: LD_VAR 0 2
16977: NOT
16978: IFFALSE 16982
// exit ;
16980: GO 17031
// for i in tmp do
16982: LD_ADDR_VAR 0 1
16986: PUSH
16987: LD_VAR 0 2
16991: PUSH
16992: FOR_IN
16993: IFFALSE 17029
// begin if Crawls ( i ) then
16995: LD_VAR 0 1
16999: PPUSH
17000: CALL_OW 318
17004: IFFALSE 17015
// ComWalk ( i ) ;
17006: LD_VAR 0 1
17010: PPUSH
17011: CALL_OW 138
// SetClass ( i , 2 ) ;
17015: LD_VAR 0 1
17019: PPUSH
17020: LD_INT 2
17022: PPUSH
17023: CALL_OW 336
// end ;
17027: GO 16992
17029: POP
17030: POP
// end ;
17031: PPOPN 2
17033: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17034: LD_EXP 16
17038: IFFALSE 17046
17040: PUSH
17041: LD_EXP 69
17045: AND
17046: IFFALSE 17336
17048: GO 17050
17050: DISABLE
17051: LD_INT 0
17053: PPUSH
17054: PPUSH
17055: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17056: LD_OWVAR 2
17060: PPUSH
17061: LD_INT 9
17063: PPUSH
17064: LD_INT 1
17066: PPUSH
17067: LD_INT 1
17069: PPUSH
17070: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17074: LD_INT 9
17076: PPUSH
17077: LD_OWVAR 2
17081: PPUSH
17082: CALL_OW 343
// uc_side := 9 ;
17086: LD_ADDR_OWVAR 20
17090: PUSH
17091: LD_INT 9
17093: ST_TO_ADDR
// uc_nation := 2 ;
17094: LD_ADDR_OWVAR 21
17098: PUSH
17099: LD_INT 2
17101: ST_TO_ADDR
// hc_name := Dark Warrior ;
17102: LD_ADDR_OWVAR 26
17106: PUSH
17107: LD_STRING Dark Warrior
17109: ST_TO_ADDR
// hc_gallery :=  ;
17110: LD_ADDR_OWVAR 33
17114: PUSH
17115: LD_STRING 
17117: ST_TO_ADDR
// hc_noskilllimit := true ;
17118: LD_ADDR_OWVAR 76
17122: PUSH
17123: LD_INT 1
17125: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17126: LD_ADDR_OWVAR 31
17130: PUSH
17131: LD_INT 30
17133: PUSH
17134: LD_INT 30
17136: PUSH
17137: LD_INT 30
17139: PUSH
17140: LD_INT 30
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: ST_TO_ADDR
// un := CreateHuman ;
17149: LD_ADDR_VAR 0 3
17153: PUSH
17154: CALL_OW 44
17158: ST_TO_ADDR
// hc_noskilllimit := false ;
17159: LD_ADDR_OWVAR 76
17163: PUSH
17164: LD_INT 0
17166: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17167: LD_VAR 0 3
17171: PPUSH
17172: LD_INT 1
17174: PPUSH
17175: CALL_OW 51
// ToLua ( playRanger() ) ;
17179: LD_STRING playRanger()
17181: PPUSH
17182: CALL_OW 559
// p := 0 ;
17186: LD_ADDR_VAR 0 2
17190: PUSH
17191: LD_INT 0
17193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17194: LD_INT 35
17196: PPUSH
17197: CALL_OW 67
// p := p + 1 ;
17201: LD_ADDR_VAR 0 2
17205: PUSH
17206: LD_VAR 0 2
17210: PUSH
17211: LD_INT 1
17213: PLUS
17214: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17215: LD_VAR 0 3
17219: PPUSH
17220: CALL_OW 256
17224: PUSH
17225: LD_INT 1000
17227: LESS
17228: IFFALSE 17242
// SetLives ( un , 1000 ) ;
17230: LD_VAR 0 3
17234: PPUSH
17235: LD_INT 1000
17237: PPUSH
17238: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17242: LD_VAR 0 3
17246: PPUSH
17247: LD_INT 81
17249: PUSH
17250: LD_OWVAR 2
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 91
17261: PUSH
17262: LD_VAR 0 3
17266: PUSH
17267: LD_INT 30
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PPUSH
17279: CALL_OW 69
17283: PPUSH
17284: LD_VAR 0 3
17288: PPUSH
17289: CALL_OW 74
17293: PPUSH
17294: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17298: LD_VAR 0 2
17302: PUSH
17303: LD_INT 80
17305: GREATER
17306: IFTRUE 17319
17308: PUSH
17309: LD_VAR 0 3
17313: PPUSH
17314: CALL_OW 301
17318: OR
17319: IFFALSE 17194
// if un then
17321: LD_VAR 0 3
17325: IFFALSE 17336
// RemoveUnit ( un ) ;
17327: LD_VAR 0 3
17331: PPUSH
17332: CALL_OW 64
// end ;
17336: PPOPN 3
17338: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17339: LD_EXP 70
17343: IFFALSE 17459
17345: GO 17347
17347: DISABLE
17348: LD_INT 0
17350: PPUSH
17351: PPUSH
17352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17353: LD_ADDR_VAR 0 2
17357: PUSH
17358: LD_INT 81
17360: PUSH
17361: LD_OWVAR 2
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 21
17372: PUSH
17373: LD_INT 1
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PPUSH
17384: CALL_OW 69
17388: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17389: LD_STRING playComputer()
17391: PPUSH
17392: CALL_OW 559
// if not tmp then
17396: LD_VAR 0 2
17400: NOT
17401: IFFALSE 17405
// exit ;
17403: GO 17459
// for i in tmp do
17405: LD_ADDR_VAR 0 1
17409: PUSH
17410: LD_VAR 0 2
17414: PUSH
17415: FOR_IN
17416: IFFALSE 17457
// for j := 1 to 4 do
17418: LD_ADDR_VAR 0 3
17422: PUSH
17423: DOUBLE
17424: LD_INT 1
17426: DEC
17427: ST_TO_ADDR
17428: LD_INT 4
17430: PUSH
17431: FOR_TO
17432: IFFALSE 17453
// SetSkill ( i , j , 10 ) ;
17434: LD_VAR 0 1
17438: PPUSH
17439: LD_VAR 0 3
17443: PPUSH
17444: LD_INT 10
17446: PPUSH
17447: CALL_OW 237
17451: GO 17431
17453: POP
17454: POP
17455: GO 17415
17457: POP
17458: POP
// end ;
17459: PPOPN 3
17461: END
// every 0 0$1 trigger s30 do var i , tmp ;
17462: LD_EXP 71
17466: IFFALSE 17535
17468: GO 17470
17470: DISABLE
17471: LD_INT 0
17473: PPUSH
17474: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17475: LD_ADDR_VAR 0 2
17479: PUSH
17480: LD_INT 22
17482: PUSH
17483: LD_OWVAR 2
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PPUSH
17492: CALL_OW 69
17496: ST_TO_ADDR
// if not tmp then
17497: LD_VAR 0 2
17501: NOT
17502: IFFALSE 17506
// exit ;
17504: GO 17535
// for i in tmp do
17506: LD_ADDR_VAR 0 1
17510: PUSH
17511: LD_VAR 0 2
17515: PUSH
17516: FOR_IN
17517: IFFALSE 17533
// SetLives ( i , 300 ) ;
17519: LD_VAR 0 1
17523: PPUSH
17524: LD_INT 300
17526: PPUSH
17527: CALL_OW 234
17531: GO 17516
17533: POP
17534: POP
// end ;
17535: PPOPN 2
17537: END
// every 0 0$1 trigger s60 do var i , tmp ;
17538: LD_EXP 72
17542: IFFALSE 17611
17544: GO 17546
17546: DISABLE
17547: LD_INT 0
17549: PPUSH
17550: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17551: LD_ADDR_VAR 0 2
17555: PUSH
17556: LD_INT 22
17558: PUSH
17559: LD_OWVAR 2
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PPUSH
17568: CALL_OW 69
17572: ST_TO_ADDR
// if not tmp then
17573: LD_VAR 0 2
17577: NOT
17578: IFFALSE 17582
// exit ;
17580: GO 17611
// for i in tmp do
17582: LD_ADDR_VAR 0 1
17586: PUSH
17587: LD_VAR 0 2
17591: PUSH
17592: FOR_IN
17593: IFFALSE 17609
// SetLives ( i , 600 ) ;
17595: LD_VAR 0 1
17599: PPUSH
17600: LD_INT 600
17602: PPUSH
17603: CALL_OW 234
17607: GO 17592
17609: POP
17610: POP
// end ;
17611: PPOPN 2
17613: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17614: LD_INT 0
17616: PPUSH
// case cmd of 301 :
17617: LD_VAR 0 1
17621: PUSH
17622: LD_INT 301
17624: DOUBLE
17625: EQUAL
17626: IFTRUE 17630
17628: GO 17662
17630: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17631: LD_VAR 0 6
17635: PPUSH
17636: LD_VAR 0 7
17640: PPUSH
17641: LD_VAR 0 8
17645: PPUSH
17646: LD_VAR 0 4
17650: PPUSH
17651: LD_VAR 0 5
17655: PPUSH
17656: CALL 18875 0 5
17660: GO 17783
17662: LD_INT 302
17664: DOUBLE
17665: EQUAL
17666: IFTRUE 17670
17668: GO 17707
17670: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17671: LD_VAR 0 6
17675: PPUSH
17676: LD_VAR 0 7
17680: PPUSH
17681: LD_VAR 0 8
17685: PPUSH
17686: LD_VAR 0 9
17690: PPUSH
17691: LD_VAR 0 4
17695: PPUSH
17696: LD_VAR 0 5
17700: PPUSH
17701: CALL 18966 0 6
17705: GO 17783
17707: LD_INT 303
17709: DOUBLE
17710: EQUAL
17711: IFTRUE 17715
17713: GO 17752
17715: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17716: LD_VAR 0 6
17720: PPUSH
17721: LD_VAR 0 7
17725: PPUSH
17726: LD_VAR 0 8
17730: PPUSH
17731: LD_VAR 0 9
17735: PPUSH
17736: LD_VAR 0 4
17740: PPUSH
17741: LD_VAR 0 5
17745: PPUSH
17746: CALL 17788 0 6
17750: GO 17783
17752: LD_INT 304
17754: DOUBLE
17755: EQUAL
17756: IFTRUE 17760
17758: GO 17782
17760: POP
// hHackTeleport ( unit , x , y ) ; end ;
17761: LD_VAR 0 2
17765: PPUSH
17766: LD_VAR 0 4
17770: PPUSH
17771: LD_VAR 0 5
17775: PPUSH
17776: CALL 19559 0 3
17780: GO 17783
17782: POP
// end ;
17783: LD_VAR 0 12
17787: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17788: LD_INT 0
17790: PPUSH
17791: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17792: LD_VAR 0 1
17796: PUSH
17797: LD_INT 1
17799: LESS
17800: IFTRUE 17812
17802: PUSH
17803: LD_VAR 0 1
17807: PUSH
17808: LD_INT 3
17810: GREATER
17811: OR
17812: IFTRUE 17830
17814: PUSH
17815: LD_VAR 0 5
17819: PPUSH
17820: LD_VAR 0 6
17824: PPUSH
17825: CALL_OW 428
17829: OR
17830: IFFALSE 17834
// exit ;
17832: GO 18562
// uc_side := your_side ;
17834: LD_ADDR_OWVAR 20
17838: PUSH
17839: LD_OWVAR 2
17843: ST_TO_ADDR
// uc_nation := nation ;
17844: LD_ADDR_OWVAR 21
17848: PUSH
17849: LD_VAR 0 1
17853: ST_TO_ADDR
// bc_level = 1 ;
17854: LD_ADDR_OWVAR 43
17858: PUSH
17859: LD_INT 1
17861: ST_TO_ADDR
// case btype of 1 :
17862: LD_VAR 0 2
17866: PUSH
17867: LD_INT 1
17869: DOUBLE
17870: EQUAL
17871: IFTRUE 17875
17873: GO 17886
17875: POP
// bc_type := b_depot ; 2 :
17876: LD_ADDR_OWVAR 42
17880: PUSH
17881: LD_INT 0
17883: ST_TO_ADDR
17884: GO 18506
17886: LD_INT 2
17888: DOUBLE
17889: EQUAL
17890: IFTRUE 17894
17892: GO 17905
17894: POP
// bc_type := b_warehouse ; 3 :
17895: LD_ADDR_OWVAR 42
17899: PUSH
17900: LD_INT 1
17902: ST_TO_ADDR
17903: GO 18506
17905: LD_INT 3
17907: DOUBLE
17908: EQUAL
17909: IFTRUE 17913
17911: GO 17924
17913: POP
// bc_type := b_lab ; 4 .. 9 :
17914: LD_ADDR_OWVAR 42
17918: PUSH
17919: LD_INT 6
17921: ST_TO_ADDR
17922: GO 18506
17924: LD_INT 4
17926: DOUBLE
17927: GREATEREQUAL
17928: IFFALSE 17936
17930: LD_INT 9
17932: DOUBLE
17933: LESSEQUAL
17934: IFTRUE 17938
17936: GO 17998
17938: POP
// begin bc_type := b_lab_half ;
17939: LD_ADDR_OWVAR 42
17943: PUSH
17944: LD_INT 7
17946: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17947: LD_ADDR_OWVAR 44
17951: PUSH
17952: LD_INT 10
17954: PUSH
17955: LD_INT 11
17957: PUSH
17958: LD_INT 12
17960: PUSH
17961: LD_INT 15
17963: PUSH
17964: LD_INT 14
17966: PUSH
17967: LD_INT 13
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: PUSH
17978: LD_VAR 0 2
17982: PUSH
17983: LD_INT 3
17985: MINUS
17986: ARRAY
17987: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17988: LD_ADDR_OWVAR 45
17992: PUSH
17993: LD_INT 9
17995: ST_TO_ADDR
// end ; 10 .. 13 :
17996: GO 18506
17998: LD_INT 10
18000: DOUBLE
18001: GREATEREQUAL
18002: IFFALSE 18010
18004: LD_INT 13
18006: DOUBLE
18007: LESSEQUAL
18008: IFTRUE 18012
18010: GO 18089
18012: POP
// begin bc_type := b_lab_full ;
18013: LD_ADDR_OWVAR 42
18017: PUSH
18018: LD_INT 8
18020: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18021: LD_ADDR_OWVAR 44
18025: PUSH
18026: LD_INT 10
18028: PUSH
18029: LD_INT 12
18031: PUSH
18032: LD_INT 14
18034: PUSH
18035: LD_INT 13
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: PUSH
18044: LD_VAR 0 2
18048: PUSH
18049: LD_INT 9
18051: MINUS
18052: ARRAY
18053: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18054: LD_ADDR_OWVAR 45
18058: PUSH
18059: LD_INT 11
18061: PUSH
18062: LD_INT 15
18064: PUSH
18065: LD_INT 12
18067: PUSH
18068: LD_INT 15
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: PUSH
18077: LD_VAR 0 2
18081: PUSH
18082: LD_INT 9
18084: MINUS
18085: ARRAY
18086: ST_TO_ADDR
// end ; 14 :
18087: GO 18506
18089: LD_INT 14
18091: DOUBLE
18092: EQUAL
18093: IFTRUE 18097
18095: GO 18108
18097: POP
// bc_type := b_workshop ; 15 :
18098: LD_ADDR_OWVAR 42
18102: PUSH
18103: LD_INT 2
18105: ST_TO_ADDR
18106: GO 18506
18108: LD_INT 15
18110: DOUBLE
18111: EQUAL
18112: IFTRUE 18116
18114: GO 18127
18116: POP
// bc_type := b_factory ; 16 :
18117: LD_ADDR_OWVAR 42
18121: PUSH
18122: LD_INT 3
18124: ST_TO_ADDR
18125: GO 18506
18127: LD_INT 16
18129: DOUBLE
18130: EQUAL
18131: IFTRUE 18135
18133: GO 18146
18135: POP
// bc_type := b_ext_gun ; 17 :
18136: LD_ADDR_OWVAR 42
18140: PUSH
18141: LD_INT 17
18143: ST_TO_ADDR
18144: GO 18506
18146: LD_INT 17
18148: DOUBLE
18149: EQUAL
18150: IFTRUE 18154
18152: GO 18182
18154: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18155: LD_ADDR_OWVAR 42
18159: PUSH
18160: LD_INT 19
18162: PUSH
18163: LD_INT 23
18165: PUSH
18166: LD_INT 19
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: PUSH
18174: LD_VAR 0 1
18178: ARRAY
18179: ST_TO_ADDR
18180: GO 18506
18182: LD_INT 18
18184: DOUBLE
18185: EQUAL
18186: IFTRUE 18190
18188: GO 18201
18190: POP
// bc_type := b_ext_radar ; 19 :
18191: LD_ADDR_OWVAR 42
18195: PUSH
18196: LD_INT 20
18198: ST_TO_ADDR
18199: GO 18506
18201: LD_INT 19
18203: DOUBLE
18204: EQUAL
18205: IFTRUE 18209
18207: GO 18220
18209: POP
// bc_type := b_ext_radio ; 20 :
18210: LD_ADDR_OWVAR 42
18214: PUSH
18215: LD_INT 22
18217: ST_TO_ADDR
18218: GO 18506
18220: LD_INT 20
18222: DOUBLE
18223: EQUAL
18224: IFTRUE 18228
18226: GO 18239
18228: POP
// bc_type := b_ext_siberium ; 21 :
18229: LD_ADDR_OWVAR 42
18233: PUSH
18234: LD_INT 21
18236: ST_TO_ADDR
18237: GO 18506
18239: LD_INT 21
18241: DOUBLE
18242: EQUAL
18243: IFTRUE 18247
18245: GO 18258
18247: POP
// bc_type := b_ext_computer ; 22 :
18248: LD_ADDR_OWVAR 42
18252: PUSH
18253: LD_INT 24
18255: ST_TO_ADDR
18256: GO 18506
18258: LD_INT 22
18260: DOUBLE
18261: EQUAL
18262: IFTRUE 18266
18264: GO 18277
18266: POP
// bc_type := b_ext_track ; 23 :
18267: LD_ADDR_OWVAR 42
18271: PUSH
18272: LD_INT 16
18274: ST_TO_ADDR
18275: GO 18506
18277: LD_INT 23
18279: DOUBLE
18280: EQUAL
18281: IFTRUE 18285
18283: GO 18296
18285: POP
// bc_type := b_ext_laser ; 24 :
18286: LD_ADDR_OWVAR 42
18290: PUSH
18291: LD_INT 25
18293: ST_TO_ADDR
18294: GO 18506
18296: LD_INT 24
18298: DOUBLE
18299: EQUAL
18300: IFTRUE 18304
18302: GO 18315
18304: POP
// bc_type := b_control_tower ; 25 :
18305: LD_ADDR_OWVAR 42
18309: PUSH
18310: LD_INT 36
18312: ST_TO_ADDR
18313: GO 18506
18315: LD_INT 25
18317: DOUBLE
18318: EQUAL
18319: IFTRUE 18323
18321: GO 18334
18323: POP
// bc_type := b_breastwork ; 26 :
18324: LD_ADDR_OWVAR 42
18328: PUSH
18329: LD_INT 31
18331: ST_TO_ADDR
18332: GO 18506
18334: LD_INT 26
18336: DOUBLE
18337: EQUAL
18338: IFTRUE 18342
18340: GO 18353
18342: POP
// bc_type := b_bunker ; 27 :
18343: LD_ADDR_OWVAR 42
18347: PUSH
18348: LD_INT 32
18350: ST_TO_ADDR
18351: GO 18506
18353: LD_INT 27
18355: DOUBLE
18356: EQUAL
18357: IFTRUE 18361
18359: GO 18372
18361: POP
// bc_type := b_turret ; 28 :
18362: LD_ADDR_OWVAR 42
18366: PUSH
18367: LD_INT 33
18369: ST_TO_ADDR
18370: GO 18506
18372: LD_INT 28
18374: DOUBLE
18375: EQUAL
18376: IFTRUE 18380
18378: GO 18391
18380: POP
// bc_type := b_armoury ; 29 :
18381: LD_ADDR_OWVAR 42
18385: PUSH
18386: LD_INT 4
18388: ST_TO_ADDR
18389: GO 18506
18391: LD_INT 29
18393: DOUBLE
18394: EQUAL
18395: IFTRUE 18399
18397: GO 18410
18399: POP
// bc_type := b_barracks ; 30 :
18400: LD_ADDR_OWVAR 42
18404: PUSH
18405: LD_INT 5
18407: ST_TO_ADDR
18408: GO 18506
18410: LD_INT 30
18412: DOUBLE
18413: EQUAL
18414: IFTRUE 18418
18416: GO 18429
18418: POP
// bc_type := b_solar_power ; 31 :
18419: LD_ADDR_OWVAR 42
18423: PUSH
18424: LD_INT 27
18426: ST_TO_ADDR
18427: GO 18506
18429: LD_INT 31
18431: DOUBLE
18432: EQUAL
18433: IFTRUE 18437
18435: GO 18448
18437: POP
// bc_type := b_oil_power ; 32 :
18438: LD_ADDR_OWVAR 42
18442: PUSH
18443: LD_INT 26
18445: ST_TO_ADDR
18446: GO 18506
18448: LD_INT 32
18450: DOUBLE
18451: EQUAL
18452: IFTRUE 18456
18454: GO 18467
18456: POP
// bc_type := b_siberite_power ; 33 :
18457: LD_ADDR_OWVAR 42
18461: PUSH
18462: LD_INT 28
18464: ST_TO_ADDR
18465: GO 18506
18467: LD_INT 33
18469: DOUBLE
18470: EQUAL
18471: IFTRUE 18475
18473: GO 18486
18475: POP
// bc_type := b_oil_mine ; 34 :
18476: LD_ADDR_OWVAR 42
18480: PUSH
18481: LD_INT 29
18483: ST_TO_ADDR
18484: GO 18506
18486: LD_INT 34
18488: DOUBLE
18489: EQUAL
18490: IFTRUE 18494
18492: GO 18505
18494: POP
// bc_type := b_siberite_mine ; end ;
18495: LD_ADDR_OWVAR 42
18499: PUSH
18500: LD_INT 30
18502: ST_TO_ADDR
18503: GO 18506
18505: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18506: LD_ADDR_VAR 0 8
18510: PUSH
18511: LD_VAR 0 5
18515: PPUSH
18516: LD_VAR 0 6
18520: PPUSH
18521: LD_VAR 0 3
18525: PPUSH
18526: CALL_OW 47
18530: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18531: LD_OWVAR 42
18535: PUSH
18536: LD_INT 32
18538: PUSH
18539: LD_INT 33
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: IN
18546: IFFALSE 18562
// PlaceWeaponTurret ( b , weapon ) ;
18548: LD_VAR 0 8
18552: PPUSH
18553: LD_VAR 0 4
18557: PPUSH
18558: CALL_OW 431
// end ;
18562: LD_VAR 0 7
18566: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18567: LD_INT 0
18569: PPUSH
18570: PPUSH
18571: PPUSH
18572: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18573: LD_ADDR_VAR 0 4
18577: PUSH
18578: LD_INT 22
18580: PUSH
18581: LD_OWVAR 2
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: LD_INT 30
18595: PUSH
18596: LD_INT 0
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 30
18605: PUSH
18606: LD_INT 1
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PPUSH
18622: CALL_OW 69
18626: ST_TO_ADDR
// if not tmp then
18627: LD_VAR 0 4
18631: NOT
18632: IFFALSE 18636
// exit ;
18634: GO 18695
// for i in tmp do
18636: LD_ADDR_VAR 0 2
18640: PUSH
18641: LD_VAR 0 4
18645: PUSH
18646: FOR_IN
18647: IFFALSE 18693
// for j = 1 to 3 do
18649: LD_ADDR_VAR 0 3
18653: PUSH
18654: DOUBLE
18655: LD_INT 1
18657: DEC
18658: ST_TO_ADDR
18659: LD_INT 3
18661: PUSH
18662: FOR_TO
18663: IFFALSE 18689
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18665: LD_VAR 0 2
18669: PPUSH
18670: CALL_OW 274
18674: PPUSH
18675: LD_VAR 0 3
18679: PPUSH
18680: LD_INT 99999
18682: PPUSH
18683: CALL_OW 277
18687: GO 18662
18689: POP
18690: POP
18691: GO 18646
18693: POP
18694: POP
// end ;
18695: LD_VAR 0 1
18699: RET
// export function hHackSetLevel10 ; var i , j ; begin
18700: LD_INT 0
18702: PPUSH
18703: PPUSH
18704: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18705: LD_ADDR_VAR 0 2
18709: PUSH
18710: LD_INT 21
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PPUSH
18720: CALL_OW 69
18724: PUSH
18725: FOR_IN
18726: IFFALSE 18778
// if IsSelected ( i ) then
18728: LD_VAR 0 2
18732: PPUSH
18733: CALL_OW 306
18737: IFFALSE 18776
// begin for j := 1 to 4 do
18739: LD_ADDR_VAR 0 3
18743: PUSH
18744: DOUBLE
18745: LD_INT 1
18747: DEC
18748: ST_TO_ADDR
18749: LD_INT 4
18751: PUSH
18752: FOR_TO
18753: IFFALSE 18774
// SetSkill ( i , j , 10 ) ;
18755: LD_VAR 0 2
18759: PPUSH
18760: LD_VAR 0 3
18764: PPUSH
18765: LD_INT 10
18767: PPUSH
18768: CALL_OW 237
18772: GO 18752
18774: POP
18775: POP
// end ;
18776: GO 18725
18778: POP
18779: POP
// end ;
18780: LD_VAR 0 1
18784: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18785: LD_INT 0
18787: PPUSH
18788: PPUSH
18789: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18790: LD_ADDR_VAR 0 2
18794: PUSH
18795: LD_INT 22
18797: PUSH
18798: LD_OWVAR 2
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 21
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PPUSH
18821: CALL_OW 69
18825: PUSH
18826: FOR_IN
18827: IFFALSE 18868
// begin for j := 1 to 4 do
18829: LD_ADDR_VAR 0 3
18833: PUSH
18834: DOUBLE
18835: LD_INT 1
18837: DEC
18838: ST_TO_ADDR
18839: LD_INT 4
18841: PUSH
18842: FOR_TO
18843: IFFALSE 18864
// SetSkill ( i , j , 10 ) ;
18845: LD_VAR 0 2
18849: PPUSH
18850: LD_VAR 0 3
18854: PPUSH
18855: LD_INT 10
18857: PPUSH
18858: CALL_OW 237
18862: GO 18842
18864: POP
18865: POP
// end ;
18866: GO 18826
18868: POP
18869: POP
// end ;
18870: LD_VAR 0 1
18874: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18875: LD_INT 0
18877: PPUSH
// uc_side := your_side ;
18878: LD_ADDR_OWVAR 20
18882: PUSH
18883: LD_OWVAR 2
18887: ST_TO_ADDR
// uc_nation := nation ;
18888: LD_ADDR_OWVAR 21
18892: PUSH
18893: LD_VAR 0 1
18897: ST_TO_ADDR
// InitHc ;
18898: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18902: LD_INT 0
18904: PPUSH
18905: LD_VAR 0 2
18909: PPUSH
18910: LD_VAR 0 3
18914: PPUSH
18915: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18919: LD_VAR 0 4
18923: PPUSH
18924: LD_VAR 0 5
18928: PPUSH
18929: CALL_OW 428
18933: PUSH
18934: LD_INT 0
18936: EQUAL
18937: IFFALSE 18961
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18939: CALL_OW 44
18943: PPUSH
18944: LD_VAR 0 4
18948: PPUSH
18949: LD_VAR 0 5
18953: PPUSH
18954: LD_INT 1
18956: PPUSH
18957: CALL_OW 48
// end ;
18961: LD_VAR 0 6
18965: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18966: LD_INT 0
18968: PPUSH
18969: PPUSH
// uc_side := your_side ;
18970: LD_ADDR_OWVAR 20
18974: PUSH
18975: LD_OWVAR 2
18979: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18980: LD_VAR 0 1
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: LD_INT 2
18990: PUSH
18991: LD_INT 3
18993: PUSH
18994: LD_INT 4
18996: PUSH
18997: LD_INT 5
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: IN
19007: IFFALSE 19019
// uc_nation := nation_american else
19009: LD_ADDR_OWVAR 21
19013: PUSH
19014: LD_INT 1
19016: ST_TO_ADDR
19017: GO 19062
// if chassis in [ 11 , 12 , 13 , 14 ] then
19019: LD_VAR 0 1
19023: PUSH
19024: LD_INT 11
19026: PUSH
19027: LD_INT 12
19029: PUSH
19030: LD_INT 13
19032: PUSH
19033: LD_INT 14
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: IN
19042: IFFALSE 19054
// uc_nation := nation_arabian else
19044: LD_ADDR_OWVAR 21
19048: PUSH
19049: LD_INT 2
19051: ST_TO_ADDR
19052: GO 19062
// uc_nation := nation_russian ;
19054: LD_ADDR_OWVAR 21
19058: PUSH
19059: LD_INT 3
19061: ST_TO_ADDR
// vc_chassis := chassis ;
19062: LD_ADDR_OWVAR 37
19066: PUSH
19067: LD_VAR 0 1
19071: ST_TO_ADDR
// vc_engine := engine ;
19072: LD_ADDR_OWVAR 39
19076: PUSH
19077: LD_VAR 0 2
19081: ST_TO_ADDR
// vc_control := control ;
19082: LD_ADDR_OWVAR 38
19086: PUSH
19087: LD_VAR 0 3
19091: ST_TO_ADDR
// vc_weapon := weapon ;
19092: LD_ADDR_OWVAR 40
19096: PUSH
19097: LD_VAR 0 4
19101: ST_TO_ADDR
// un := CreateVehicle ;
19102: LD_ADDR_VAR 0 8
19106: PUSH
19107: CALL_OW 45
19111: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19112: LD_VAR 0 8
19116: PPUSH
19117: LD_INT 0
19119: PPUSH
19120: LD_INT 5
19122: PPUSH
19123: CALL_OW 12
19127: PPUSH
19128: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19132: LD_VAR 0 8
19136: PPUSH
19137: LD_VAR 0 5
19141: PPUSH
19142: LD_VAR 0 6
19146: PPUSH
19147: LD_INT 1
19149: PPUSH
19150: CALL_OW 48
// end ;
19154: LD_VAR 0 7
19158: RET
// export hInvincible ; every 1 do
19159: GO 19161
19161: DISABLE
// hInvincible := [ ] ;
19162: LD_ADDR_EXP 73
19166: PUSH
19167: EMPTY
19168: ST_TO_ADDR
19169: END
// every 10 do var i ;
19170: GO 19172
19172: DISABLE
19173: LD_INT 0
19175: PPUSH
// begin enable ;
19176: ENABLE
// if not hInvincible then
19177: LD_EXP 73
19181: NOT
19182: IFFALSE 19186
// exit ;
19184: GO 19230
// for i in hInvincible do
19186: LD_ADDR_VAR 0 1
19190: PUSH
19191: LD_EXP 73
19195: PUSH
19196: FOR_IN
19197: IFFALSE 19228
// if GetLives ( i ) < 1000 then
19199: LD_VAR 0 1
19203: PPUSH
19204: CALL_OW 256
19208: PUSH
19209: LD_INT 1000
19211: LESS
19212: IFFALSE 19226
// SetLives ( i , 1000 ) ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_INT 1000
19221: PPUSH
19222: CALL_OW 234
19226: GO 19196
19228: POP
19229: POP
// end ;
19230: PPOPN 1
19232: END
// export function hHackInvincible ; var i ; begin
19233: LD_INT 0
19235: PPUSH
19236: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19237: LD_ADDR_VAR 0 2
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: LD_INT 21
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 69
19274: PUSH
19275: FOR_IN
19276: IFFALSE 19337
// if IsSelected ( i ) then
19278: LD_VAR 0 2
19282: PPUSH
19283: CALL_OW 306
19287: IFFALSE 19335
// begin if i in hInvincible then
19289: LD_VAR 0 2
19293: PUSH
19294: LD_EXP 73
19298: IN
19299: IFFALSE 19319
// hInvincible := hInvincible diff i else
19301: LD_ADDR_EXP 73
19305: PUSH
19306: LD_EXP 73
19310: PUSH
19311: LD_VAR 0 2
19315: DIFF
19316: ST_TO_ADDR
19317: GO 19335
// hInvincible := hInvincible union i ;
19319: LD_ADDR_EXP 73
19323: PUSH
19324: LD_EXP 73
19328: PUSH
19329: LD_VAR 0 2
19333: UNION
19334: ST_TO_ADDR
// end ;
19335: GO 19275
19337: POP
19338: POP
// end ;
19339: LD_VAR 0 1
19343: RET
// export function hHackInvisible ; var i , j ; begin
19344: LD_INT 0
19346: PPUSH
19347: PPUSH
19348: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19349: LD_ADDR_VAR 0 2
19353: PUSH
19354: LD_INT 21
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PPUSH
19364: CALL_OW 69
19368: PUSH
19369: FOR_IN
19370: IFFALSE 19394
// if IsSelected ( i ) then
19372: LD_VAR 0 2
19376: PPUSH
19377: CALL_OW 306
19381: IFFALSE 19392
// ComForceInvisible ( i ) ;
19383: LD_VAR 0 2
19387: PPUSH
19388: CALL_OW 496
19392: GO 19369
19394: POP
19395: POP
// end ;
19396: LD_VAR 0 1
19400: RET
// export function hHackChangeYourSide ; begin
19401: LD_INT 0
19403: PPUSH
// if your_side = 8 then
19404: LD_OWVAR 2
19408: PUSH
19409: LD_INT 8
19411: EQUAL
19412: IFFALSE 19424
// your_side := 0 else
19414: LD_ADDR_OWVAR 2
19418: PUSH
19419: LD_INT 0
19421: ST_TO_ADDR
19422: GO 19438
// your_side := your_side + 1 ;
19424: LD_ADDR_OWVAR 2
19428: PUSH
19429: LD_OWVAR 2
19433: PUSH
19434: LD_INT 1
19436: PLUS
19437: ST_TO_ADDR
// end ;
19438: LD_VAR 0 1
19442: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19443: LD_INT 0
19445: PPUSH
19446: PPUSH
19447: PPUSH
// for i in all_units do
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: LD_OWVAR 3
19457: PUSH
19458: FOR_IN
19459: IFFALSE 19537
// if IsSelected ( i ) then
19461: LD_VAR 0 2
19465: PPUSH
19466: CALL_OW 306
19470: IFFALSE 19535
// begin j := GetSide ( i ) ;
19472: LD_ADDR_VAR 0 3
19476: PUSH
19477: LD_VAR 0 2
19481: PPUSH
19482: CALL_OW 255
19486: ST_TO_ADDR
// if j = 8 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 8
19494: EQUAL
19495: IFFALSE 19507
// j := 0 else
19497: LD_ADDR_VAR 0 3
19501: PUSH
19502: LD_INT 0
19504: ST_TO_ADDR
19505: GO 19521
// j := j + 1 ;
19507: LD_ADDR_VAR 0 3
19511: PUSH
19512: LD_VAR 0 3
19516: PUSH
19517: LD_INT 1
19519: PLUS
19520: ST_TO_ADDR
// SetSide ( i , j ) ;
19521: LD_VAR 0 2
19525: PPUSH
19526: LD_VAR 0 3
19530: PPUSH
19531: CALL_OW 235
// end ;
19535: GO 19458
19537: POP
19538: POP
// end ;
19539: LD_VAR 0 1
19543: RET
// export function hHackFog ; begin
19544: LD_INT 0
19546: PPUSH
// FogOff ( true ) ;
19547: LD_INT 1
19549: PPUSH
19550: CALL_OW 344
// end ;
19554: LD_VAR 0 1
19558: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19559: LD_INT 0
19561: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19562: LD_VAR 0 1
19566: PPUSH
19567: LD_VAR 0 2
19571: PPUSH
19572: LD_VAR 0 3
19576: PPUSH
19577: LD_INT 1
19579: PPUSH
19580: LD_INT 1
19582: PPUSH
19583: CALL_OW 483
// CenterOnXY ( x , y ) ;
19587: LD_VAR 0 2
19591: PPUSH
19592: LD_VAR 0 3
19596: PPUSH
19597: CALL_OW 84
// end ;
19601: LD_VAR 0 4
19605: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19610: LD_VAR 0 1
19614: NOT
19615: IFTRUE 19634
19617: PUSH
19618: LD_VAR 0 2
19622: PPUSH
19623: LD_VAR 0 3
19627: PPUSH
19628: CALL_OW 488
19632: NOT
19633: OR
19634: IFTRUE 19669
19636: PUSH
19637: LD_VAR 0 1
19641: PPUSH
19642: CALL_OW 266
19646: PUSH
19647: LD_INT 3
19649: NONEQUAL
19650: IFFALSE 19668
19652: PUSH
19653: LD_VAR 0 1
19657: PPUSH
19658: CALL_OW 247
19662: PUSH
19663: LD_INT 1
19665: EQUAL
19666: NOT
19667: AND
19668: OR
19669: IFFALSE 19673
// exit ;
19671: GO 19955
// if GetType ( factory ) = unit_human then
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL_OW 247
19682: PUSH
19683: LD_INT 1
19685: EQUAL
19686: IFFALSE 19703
// factory := IsInUnit ( factory ) ;
19688: LD_ADDR_VAR 0 1
19692: PUSH
19693: LD_VAR 0 1
19697: PPUSH
19698: CALL_OW 310
19702: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19703: LD_VAR 0 1
19707: PPUSH
19708: CALL_OW 266
19712: PUSH
19713: LD_INT 3
19715: NONEQUAL
19716: IFFALSE 19720
// exit ;
19718: GO 19955
// for i := 1 to Count ( factoryWaypoints ) do
19720: LD_ADDR_VAR 0 5
19724: PUSH
19725: DOUBLE
19726: LD_INT 1
19728: DEC
19729: ST_TO_ADDR
19730: LD_EXP 74
19734: PPUSH
19735: CALL 29922 0 1
19739: PUSH
19740: FOR_TO
19741: IFFALSE 19903
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
19743: LD_VAR 0 2
19747: PPUSH
19748: LD_VAR 0 3
19752: PPUSH
19753: CALL_OW 428
19757: PUSH
19758: LD_EXP 74
19762: PUSH
19763: LD_VAR 0 5
19767: ARRAY
19768: PUSH
19769: LD_INT 2
19771: ARRAY
19772: EQUAL
19773: IFFALSE 19805
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19775: LD_ADDR_EXP 74
19779: PUSH
19780: LD_EXP 74
19784: PPUSH
19785: LD_VAR 0 5
19789: PPUSH
19790: CALL_OW 3
19794: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19795: CALL 19960 0 0
// exit ;
19799: POP
19800: POP
19801: GO 19955
// end else
19803: GO 19901
// if factory = factoryWaypoints [ i ] [ 2 ] then
19805: LD_VAR 0 1
19809: PUSH
19810: LD_EXP 74
19814: PUSH
19815: LD_VAR 0 5
19819: ARRAY
19820: PUSH
19821: LD_INT 2
19823: ARRAY
19824: EQUAL
19825: IFFALSE 19901
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19827: LD_ADDR_EXP 74
19831: PUSH
19832: LD_EXP 74
19836: PPUSH
19837: LD_VAR 0 5
19841: PPUSH
19842: CALL_OW 3
19846: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19847: LD_ADDR_EXP 74
19851: PUSH
19852: LD_EXP 74
19856: PPUSH
19857: LD_VAR 0 1
19861: PPUSH
19862: CALL_OW 255
19866: PUSH
19867: LD_VAR 0 1
19871: PUSH
19872: LD_VAR 0 2
19876: PUSH
19877: LD_VAR 0 3
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: PPUSH
19888: CALL 65898 0 2
19892: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19893: CALL 19960 0 0
// exit ;
19897: POP
19898: POP
19899: GO 19955
// end ; end ;
19901: GO 19740
19903: POP
19904: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19905: LD_ADDR_EXP 74
19909: PUSH
19910: LD_EXP 74
19914: PPUSH
19915: LD_VAR 0 1
19919: PPUSH
19920: CALL_OW 255
19924: PUSH
19925: LD_VAR 0 1
19929: PUSH
19930: LD_VAR 0 2
19934: PUSH
19935: LD_VAR 0 3
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: PPUSH
19946: CALL 65898 0 2
19950: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19951: CALL 19960 0 0
// end ;
19955: LD_VAR 0 4
19959: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19960: LD_INT 0
19962: PPUSH
19963: PPUSH
19964: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19965: LD_STRING resetFactoryWaypoint();
19967: PPUSH
19968: CALL_OW 559
// if factoryWaypoints then
19972: LD_EXP 74
19976: IFFALSE 20097
// begin list := factoryWaypoints ;
19978: LD_ADDR_VAR 0 3
19982: PUSH
19983: LD_EXP 74
19987: ST_TO_ADDR
// for i := 1 to list do
19988: LD_ADDR_VAR 0 2
19992: PUSH
19993: DOUBLE
19994: LD_INT 1
19996: DEC
19997: ST_TO_ADDR
19998: LD_VAR 0 3
20002: PUSH
20003: FOR_TO
20004: IFFALSE 20095
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20006: LD_STRING setFactoryWaypointXY(
20008: PUSH
20009: LD_VAR 0 3
20013: PUSH
20014: LD_VAR 0 2
20018: ARRAY
20019: PUSH
20020: LD_INT 1
20022: ARRAY
20023: STR
20024: PUSH
20025: LD_STRING ,
20027: STR
20028: PUSH
20029: LD_VAR 0 3
20033: PUSH
20034: LD_VAR 0 2
20038: ARRAY
20039: PUSH
20040: LD_INT 2
20042: ARRAY
20043: STR
20044: PUSH
20045: LD_STRING ,
20047: STR
20048: PUSH
20049: LD_VAR 0 3
20053: PUSH
20054: LD_VAR 0 2
20058: ARRAY
20059: PUSH
20060: LD_INT 3
20062: ARRAY
20063: STR
20064: PUSH
20065: LD_STRING ,
20067: STR
20068: PUSH
20069: LD_VAR 0 3
20073: PUSH
20074: LD_VAR 0 2
20078: ARRAY
20079: PUSH
20080: LD_INT 4
20082: ARRAY
20083: STR
20084: PUSH
20085: LD_STRING )
20087: STR
20088: PPUSH
20089: CALL_OW 559
20093: GO 20003
20095: POP
20096: POP
// end ; end ;
20097: LD_VAR 0 1
20101: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20102: LD_INT 0
20104: PPUSH
// if HexInfo ( x , y ) = warehouse then
20105: LD_VAR 0 2
20109: PPUSH
20110: LD_VAR 0 3
20114: PPUSH
20115: CALL_OW 428
20119: PUSH
20120: LD_VAR 0 1
20124: EQUAL
20125: IFFALSE 20152
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20127: LD_ADDR_EXP 76
20131: PUSH
20132: LD_EXP 76
20136: PPUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: LD_INT 0
20144: PPUSH
20145: CALL_OW 1
20149: ST_TO_ADDR
20150: GO 20203
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20152: LD_ADDR_EXP 76
20156: PUSH
20157: LD_EXP 76
20161: PPUSH
20162: LD_VAR 0 1
20166: PPUSH
20167: LD_VAR 0 1
20171: PPUSH
20172: CALL_OW 255
20176: PUSH
20177: LD_VAR 0 1
20181: PUSH
20182: LD_VAR 0 2
20186: PUSH
20187: LD_VAR 0 3
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: PPUSH
20198: CALL_OW 1
20202: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20203: CALL 20212 0 0
// end ;
20207: LD_VAR 0 4
20211: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20212: LD_INT 0
20214: PPUSH
20215: PPUSH
20216: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20217: LD_STRING resetWarehouseGatheringPoints();
20219: PPUSH
20220: CALL_OW 559
// if warehouseGatheringPoints then
20224: LD_EXP 76
20228: IFFALSE 20354
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_EXP 76
20239: PPUSH
20240: CALL 69832 0 1
20244: ST_TO_ADDR
// for i := 1 to list do
20245: LD_ADDR_VAR 0 2
20249: PUSH
20250: DOUBLE
20251: LD_INT 1
20253: DEC
20254: ST_TO_ADDR
20255: LD_VAR 0 3
20259: PUSH
20260: FOR_TO
20261: IFFALSE 20352
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20263: LD_STRING setWarehouseGatheringPointXY(
20265: PUSH
20266: LD_VAR 0 3
20270: PUSH
20271: LD_VAR 0 2
20275: ARRAY
20276: PUSH
20277: LD_INT 1
20279: ARRAY
20280: STR
20281: PUSH
20282: LD_STRING ,
20284: STR
20285: PUSH
20286: LD_VAR 0 3
20290: PUSH
20291: LD_VAR 0 2
20295: ARRAY
20296: PUSH
20297: LD_INT 2
20299: ARRAY
20300: STR
20301: PUSH
20302: LD_STRING ,
20304: STR
20305: PUSH
20306: LD_VAR 0 3
20310: PUSH
20311: LD_VAR 0 2
20315: ARRAY
20316: PUSH
20317: LD_INT 3
20319: ARRAY
20320: STR
20321: PUSH
20322: LD_STRING ,
20324: STR
20325: PUSH
20326: LD_VAR 0 3
20330: PUSH
20331: LD_VAR 0 2
20335: ARRAY
20336: PUSH
20337: LD_INT 4
20339: ARRAY
20340: STR
20341: PUSH
20342: LD_STRING )
20344: STR
20345: PPUSH
20346: CALL_OW 559
20350: GO 20260
20352: POP
20353: POP
// end ; end ;
20354: LD_VAR 0 1
20358: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20359: LD_EXP 76
20363: IFFALSE 21058
20365: GO 20367
20367: DISABLE
20368: LD_INT 0
20370: PPUSH
20371: PPUSH
20372: PPUSH
20373: PPUSH
20374: PPUSH
20375: PPUSH
20376: PPUSH
20377: PPUSH
20378: PPUSH
// begin enable ;
20379: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20380: LD_ADDR_VAR 0 3
20384: PUSH
20385: LD_EXP 76
20389: PPUSH
20390: CALL 69832 0 1
20394: ST_TO_ADDR
// if not list then
20395: LD_VAR 0 3
20399: NOT
20400: IFFALSE 20404
// exit ;
20402: GO 21058
// for i := 1 to list do
20404: LD_ADDR_VAR 0 1
20408: PUSH
20409: DOUBLE
20410: LD_INT 1
20412: DEC
20413: ST_TO_ADDR
20414: LD_VAR 0 3
20418: PUSH
20419: FOR_TO
20420: IFFALSE 21056
// begin depot := list [ i ] [ 2 ] ;
20422: LD_ADDR_VAR 0 8
20426: PUSH
20427: LD_VAR 0 3
20431: PUSH
20432: LD_VAR 0 1
20436: ARRAY
20437: PUSH
20438: LD_INT 2
20440: ARRAY
20441: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20442: LD_ADDR_VAR 0 5
20446: PUSH
20447: LD_VAR 0 3
20451: PUSH
20452: LD_VAR 0 1
20456: ARRAY
20457: PUSH
20458: LD_INT 1
20460: ARRAY
20461: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20462: LD_VAR 0 8
20466: PPUSH
20467: CALL_OW 301
20471: IFTRUE 20490
20473: PUSH
20474: LD_VAR 0 5
20478: PUSH
20479: LD_VAR 0 8
20483: PPUSH
20484: CALL_OW 255
20488: NONEQUAL
20489: OR
20490: IFFALSE 20519
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20492: LD_ADDR_EXP 76
20496: PUSH
20497: LD_EXP 76
20501: PPUSH
20502: LD_VAR 0 8
20506: PPUSH
20507: LD_INT 0
20509: PPUSH
20510: CALL_OW 1
20514: ST_TO_ADDR
// exit ;
20515: POP
20516: POP
20517: GO 21058
// end ; x := list [ i ] [ 3 ] ;
20519: LD_ADDR_VAR 0 6
20523: PUSH
20524: LD_VAR 0 3
20528: PUSH
20529: LD_VAR 0 1
20533: ARRAY
20534: PUSH
20535: LD_INT 3
20537: ARRAY
20538: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20539: LD_ADDR_VAR 0 7
20543: PUSH
20544: LD_VAR 0 3
20548: PUSH
20549: LD_VAR 0 1
20553: ARRAY
20554: PUSH
20555: LD_INT 4
20557: ARRAY
20558: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20559: LD_ADDR_VAR 0 9
20563: PUSH
20564: LD_VAR 0 6
20568: PPUSH
20569: LD_VAR 0 7
20573: PPUSH
20574: LD_INT 16
20576: PPUSH
20577: CALL 68406 0 3
20581: ST_TO_ADDR
// if not cratesNearbyPoint then
20582: LD_VAR 0 9
20586: NOT
20587: IFFALSE 20593
// exit ;
20589: POP
20590: POP
20591: GO 21058
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20593: LD_ADDR_VAR 0 4
20597: PUSH
20598: LD_INT 22
20600: PUSH
20601: LD_VAR 0 5
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 3
20612: PUSH
20613: LD_INT 60
20615: PUSH
20616: EMPTY
20617: LIST
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 91
20625: PUSH
20626: LD_VAR 0 8
20630: PUSH
20631: LD_INT 6
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 2
20641: PUSH
20642: LD_INT 25
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 25
20654: PUSH
20655: LD_INT 16
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: LIST
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: PPUSH
20673: CALL_OW 69
20677: PUSH
20678: LD_VAR 0 8
20682: PPUSH
20683: CALL_OW 313
20687: PPUSH
20688: LD_INT 3
20690: PUSH
20691: LD_INT 60
20693: PUSH
20694: EMPTY
20695: LIST
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: LD_INT 25
20706: PUSH
20707: LD_INT 2
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 25
20716: PUSH
20717: LD_INT 16
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: LIST
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PPUSH
20733: CALL_OW 72
20737: UNION
20738: ST_TO_ADDR
// if tmp then
20739: LD_VAR 0 4
20743: IFFALSE 20823
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20745: LD_ADDR_VAR 0 4
20749: PUSH
20750: LD_VAR 0 4
20754: PPUSH
20755: LD_INT 3
20757: PPUSH
20758: CALL 66213 0 2
20762: ST_TO_ADDR
// for j in tmp do
20763: LD_ADDR_VAR 0 2
20767: PUSH
20768: LD_VAR 0 4
20772: PUSH
20773: FOR_IN
20774: IFFALSE 20817
// begin if IsInUnit ( j ) then
20776: LD_VAR 0 2
20780: PPUSH
20781: CALL_OW 310
20785: IFFALSE 20796
// ComExit ( j ) ;
20787: LD_VAR 0 2
20791: PPUSH
20792: CALL 66296 0 1
// AddComCollect ( j , x , y ) ;
20796: LD_VAR 0 2
20800: PPUSH
20801: LD_VAR 0 6
20805: PPUSH
20806: LD_VAR 0 7
20810: PPUSH
20811: CALL_OW 177
// end ;
20815: GO 20773
20817: POP
20818: POP
// exit ;
20819: POP
20820: POP
20821: GO 21058
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20823: LD_ADDR_VAR 0 4
20827: PUSH
20828: LD_INT 22
20830: PUSH
20831: LD_VAR 0 5
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 91
20842: PUSH
20843: LD_VAR 0 8
20847: PUSH
20848: LD_INT 8
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 2
20858: PUSH
20859: LD_INT 34
20861: PUSH
20862: LD_INT 12
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 34
20871: PUSH
20872: LD_INT 51
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 34
20881: PUSH
20882: LD_INT 32
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 34
20891: PUSH
20892: LD_INT 89
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: PPUSH
20911: CALL_OW 69
20915: ST_TO_ADDR
// if tmp then
20916: LD_VAR 0 4
20920: IFFALSE 21054
// begin for j in tmp do
20922: LD_ADDR_VAR 0 2
20926: PUSH
20927: LD_VAR 0 4
20931: PUSH
20932: FOR_IN
20933: IFFALSE 21052
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20935: LD_VAR 0 2
20939: PPUSH
20940: CALL_OW 262
20944: PUSH
20945: LD_INT 3
20947: EQUAL
20948: IFTRUE 20965
20950: PUSH
20951: LD_VAR 0 2
20955: PPUSH
20956: CALL_OW 261
20960: PUSH
20961: LD_INT 20
20963: GREATER
20964: OR
20965: IFFALSE 20979
20967: PUSH
20968: LD_VAR 0 2
20972: PPUSH
20973: CALL_OW 314
20977: NOT
20978: AND
20979: IFFALSE 21009
20981: PUSH
20982: LD_VAR 0 2
20986: PPUSH
20987: CALL_OW 263
20991: PUSH
20992: LD_INT 1
20994: NONEQUAL
20995: IFTRUE 21008
20997: PUSH
20998: LD_VAR 0 2
21002: PPUSH
21003: CALL_OW 311
21007: OR
21008: AND
21009: IFFALSE 21050
// begin ComCollect ( j , x , y ) ;
21011: LD_VAR 0 2
21015: PPUSH
21016: LD_VAR 0 6
21020: PPUSH
21021: LD_VAR 0 7
21025: PPUSH
21026: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21030: LD_VAR 0 2
21034: PPUSH
21035: LD_VAR 0 8
21039: PPUSH
21040: CALL_OW 172
// exit ;
21044: POP
21045: POP
21046: POP
21047: POP
21048: GO 21058
// end ;
21050: GO 20932
21052: POP
21053: POP
// end ; end ;
21054: GO 20419
21056: POP
21057: POP
// end ; end_of_file
21058: PPOPN 9
21060: END
// export function SOS_UnitDestroyed ( un ) ; begin
21061: LD_INT 0
21063: PPUSH
// ComRadiation ( un ) ;
21064: LD_VAR 0 1
21068: PPUSH
21069: CALL 22231 0 1
// end ;
21073: LD_VAR 0 2
21077: RET
// export function SOS_UnitKamikazed ( un ) ; begin
21078: LD_INT 0
21080: PPUSH
// ComRadiation ( un ) ;
21081: LD_VAR 0 1
21085: PPUSH
21086: CALL 22231 0 1
// end ;
21090: LD_VAR 0 2
21094: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21095: LD_INT 0
21097: PPUSH
// end ;
21098: LD_VAR 0 4
21102: RET
// export function SOS_Command ( cmd ) ; begin
21103: LD_INT 0
21105: PPUSH
// end ;
21106: LD_VAR 0 2
21110: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21111: LD_INT 0
21113: PPUSH
// end ;
21114: LD_VAR 0 6
21118: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
21119: LD_INT 0
21121: PPUSH
21122: PPUSH
21123: PPUSH
21124: PPUSH
21125: PPUSH
// if not vehicle or not factory then
21126: LD_VAR 0 1
21130: NOT
21131: IFTRUE 21140
21133: PUSH
21134: LD_VAR 0 2
21138: NOT
21139: OR
21140: IFFALSE 21144
// exit ;
21142: GO 21806
// weapon := GetWeapon ( vehicle ) ;
21144: LD_ADDR_VAR 0 7
21148: PUSH
21149: LD_VAR 0 1
21153: PPUSH
21154: CALL_OW 264
21158: ST_TO_ADDR
// if weapon = ar_miner then
21159: LD_VAR 0 7
21163: PUSH
21164: LD_INT 81
21166: EQUAL
21167: IFFALSE 21224
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
21169: LD_ADDR_EXP 85
21173: PUSH
21174: LD_EXP 85
21178: PPUSH
21179: LD_EXP 85
21183: PUSH
21184: LD_INT 1
21186: PLUS
21187: PPUSH
21188: LD_VAR 0 1
21192: PPUSH
21193: CALL_OW 1
21197: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21198: LD_ADDR_EXP 86
21202: PUSH
21203: LD_EXP 86
21207: PPUSH
21208: LD_EXP 86
21212: PUSH
21213: LD_INT 1
21215: PLUS
21216: PPUSH
21217: EMPTY
21218: PPUSH
21219: CALL_OW 1
21223: ST_TO_ADDR
// end ; if not factoryWaypoints then
21224: LD_EXP 74
21228: NOT
21229: IFFALSE 21233
// exit ;
21231: GO 21806
// for i := 1 to Count ( factoryWaypoints ) do
21233: LD_ADDR_VAR 0 4
21237: PUSH
21238: DOUBLE
21239: LD_INT 1
21241: DEC
21242: ST_TO_ADDR
21243: LD_EXP 74
21247: PPUSH
21248: CALL 29922 0 1
21252: PUSH
21253: FOR_TO
21254: IFFALSE 21804
// if factoryWaypoints [ i ] [ 2 ] = factory then
21256: LD_EXP 74
21260: PUSH
21261: LD_VAR 0 4
21265: ARRAY
21266: PUSH
21267: LD_INT 2
21269: ARRAY
21270: PUSH
21271: LD_VAR 0 2
21275: EQUAL
21276: IFFALSE 21802
// begin if GetControl ( vehicle ) = control_manual then
21278: LD_VAR 0 1
21282: PPUSH
21283: CALL_OW 263
21287: PUSH
21288: LD_INT 1
21290: EQUAL
21291: IFFALSE 21655
// begin driver := IsDrivenBy ( vehicle ) ;
21293: LD_ADDR_VAR 0 5
21297: PUSH
21298: LD_VAR 0 1
21302: PPUSH
21303: CALL_OW 311
21307: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
21308: LD_VAR 0 5
21312: PUSH
21313: LD_EXP 75
21317: IN
21318: IFTRUE 21332
21320: PUSH
21321: LD_VAR 0 1
21325: PUSH
21326: LD_EXP 75
21330: IN
21331: OR
21332: IFFALSE 21338
// exit ;
21334: POP
21335: POP
21336: GO 21806
// if not HasTask ( driver ) then
21338: LD_VAR 0 5
21342: PPUSH
21343: CALL_OW 314
21347: NOT
21348: IFFALSE 21653
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
21350: LD_ADDR_EXP 75
21354: PUSH
21355: LD_EXP 75
21359: PPUSH
21360: LD_VAR 0 5
21364: PPUSH
21365: CALL 65898 0 2
21369: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
21370: LD_ADDR_EXP 75
21374: PUSH
21375: LD_EXP 75
21379: PPUSH
21380: LD_VAR 0 1
21384: PPUSH
21385: CALL 65898 0 2
21389: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21390: LD_ADDR_VAR 0 6
21394: PUSH
21395: LD_EXP 74
21399: PUSH
21400: LD_VAR 0 4
21404: ARRAY
21405: PUSH
21406: LD_INT 3
21408: ARRAY
21409: PPUSH
21410: LD_EXP 74
21414: PUSH
21415: LD_VAR 0 4
21419: ARRAY
21420: PUSH
21421: LD_INT 4
21423: ARRAY
21424: PPUSH
21425: CALL_OW 428
21429: ST_TO_ADDR
// if hex then
21430: LD_VAR 0 6
21434: IFFALSE 21452
// ComMoveUnit ( driver , hex ) else
21436: LD_VAR 0 5
21440: PPUSH
21441: LD_VAR 0 6
21445: PPUSH
21446: CALL_OW 112
21450: GO 21536
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
21452: LD_VAR 0 1
21456: PPUSH
21457: LD_EXP 74
21461: PUSH
21462: LD_VAR 0 4
21466: ARRAY
21467: PUSH
21468: LD_INT 3
21470: ARRAY
21471: PPUSH
21472: LD_EXP 74
21476: PUSH
21477: LD_VAR 0 4
21481: ARRAY
21482: PUSH
21483: LD_INT 4
21485: ARRAY
21486: PPUSH
21487: CALL_OW 297
21491: PUSH
21492: LD_INT 0
21494: GREATER
21495: IFFALSE 21536
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21497: LD_VAR 0 5
21501: PPUSH
21502: LD_EXP 74
21506: PUSH
21507: LD_VAR 0 4
21511: ARRAY
21512: PUSH
21513: LD_INT 3
21515: ARRAY
21516: PPUSH
21517: LD_EXP 74
21521: PUSH
21522: LD_VAR 0 4
21526: ARRAY
21527: PUSH
21528: LD_INT 4
21530: ARRAY
21531: PPUSH
21532: CALL_OW 111
// AddComExitVehicle ( driver ) ;
21536: LD_VAR 0 5
21540: PPUSH
21541: CALL_OW 181
// if Multiplayer then
21545: LD_OWVAR 4
21549: IFFALSE 21598
// begin repeat wait ( 10 ) ;
21551: LD_INT 10
21553: PPUSH
21554: CALL_OW 67
// until not IsInUnit ( driver ) ;
21558: LD_VAR 0 5
21562: PPUSH
21563: CALL_OW 310
21567: NOT
21568: IFFALSE 21551
// if not HasTask ( driver ) then
21570: LD_VAR 0 5
21574: PPUSH
21575: CALL_OW 314
21579: NOT
21580: IFFALSE 21596
// ComEnterUnit ( driver , factory ) ;
21582: LD_VAR 0 5
21586: PPUSH
21587: LD_VAR 0 2
21591: PPUSH
21592: CALL_OW 120
// end else
21596: GO 21612
// AddComEnterUnit ( driver , factory ) ;
21598: LD_VAR 0 5
21602: PPUSH
21603: LD_VAR 0 2
21607: PPUSH
21608: CALL_OW 180
// wait ( 0 0$1 ) ;
21612: LD_INT 35
21614: PPUSH
21615: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
21619: LD_ADDR_EXP 75
21623: PUSH
21624: LD_EXP 75
21628: PUSH
21629: LD_VAR 0 5
21633: DIFF
21634: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
21635: LD_ADDR_EXP 75
21639: PUSH
21640: LD_EXP 75
21644: PUSH
21645: LD_VAR 0 1
21649: DIFF
21650: ST_TO_ADDR
// break ;
21651: GO 21804
// end ; end else
21653: GO 21802
// if GetControl ( vehicle ) = control_remote then
21655: LD_VAR 0 1
21659: PPUSH
21660: CALL_OW 263
21664: PUSH
21665: LD_INT 2
21667: EQUAL
21668: IFFALSE 21754
// begin wait ( 0 0$2 ) ;
21670: LD_INT 70
21672: PPUSH
21673: CALL_OW 67
// repeat wait ( 10 ) ;
21677: LD_INT 10
21679: PPUSH
21680: CALL_OW 67
// Connect ( vehicle ) ;
21684: LD_VAR 0 1
21688: PPUSH
21689: CALL 36200 0 1
// until IsControledBy ( vehicle ) ;
21693: LD_VAR 0 1
21697: PPUSH
21698: CALL_OW 312
21702: IFFALSE 21677
// wait ( 10 ) ;
21704: LD_INT 10
21706: PPUSH
21707: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21711: LD_VAR 0 1
21715: PPUSH
21716: LD_EXP 74
21720: PUSH
21721: LD_VAR 0 4
21725: ARRAY
21726: PUSH
21727: LD_INT 3
21729: ARRAY
21730: PPUSH
21731: LD_EXP 74
21735: PUSH
21736: LD_VAR 0 4
21740: ARRAY
21741: PUSH
21742: LD_INT 4
21744: ARRAY
21745: PPUSH
21746: CALL_OW 111
// break ;
21750: GO 21804
// end else
21752: GO 21802
// begin wait ( 0 0$3 ) ;
21754: LD_INT 105
21756: PPUSH
21757: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21761: LD_VAR 0 1
21765: PPUSH
21766: LD_EXP 74
21770: PUSH
21771: LD_VAR 0 4
21775: ARRAY
21776: PUSH
21777: LD_INT 3
21779: ARRAY
21780: PPUSH
21781: LD_EXP 74
21785: PUSH
21786: LD_VAR 0 4
21790: ARRAY
21791: PUSH
21792: LD_INT 4
21794: ARRAY
21795: PPUSH
21796: CALL_OW 111
// break ;
21800: GO 21804
// end ; end ;
21802: GO 21253
21804: POP
21805: POP
// end ;
21806: LD_VAR 0 3
21810: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21811: LD_INT 0
21813: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21814: LD_VAR 0 1
21818: PUSH
21819: LD_INT 250
21821: EQUAL
21822: IFFALSE 21839
21824: PUSH
21825: LD_VAR 0 2
21829: PPUSH
21830: CALL_OW 264
21834: PUSH
21835: LD_INT 81
21837: EQUAL
21838: AND
21839: IFFALSE 21860
// MinerPlaceMine ( unit , x , y ) ;
21841: LD_VAR 0 2
21845: PPUSH
21846: LD_VAR 0 4
21850: PPUSH
21851: LD_VAR 0 5
21855: PPUSH
21856: CALL 25206 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21860: LD_VAR 0 1
21864: PUSH
21865: LD_INT 251
21867: EQUAL
21868: IFFALSE 21885
21870: PUSH
21871: LD_VAR 0 2
21875: PPUSH
21876: CALL_OW 264
21880: PUSH
21881: LD_INT 81
21883: EQUAL
21884: AND
21885: IFFALSE 21906
// MinerDetonateMine ( unit , x , y ) ;
21887: LD_VAR 0 2
21891: PPUSH
21892: LD_VAR 0 4
21896: PPUSH
21897: LD_VAR 0 5
21901: PPUSH
21902: CALL 25613 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21906: LD_VAR 0 1
21910: PUSH
21911: LD_INT 252
21913: EQUAL
21914: IFFALSE 21931
21916: PUSH
21917: LD_VAR 0 2
21921: PPUSH
21922: CALL_OW 264
21926: PUSH
21927: LD_INT 81
21929: EQUAL
21930: AND
21931: IFFALSE 21952
// MinerCreateMinefield ( unit , x , y ) ;
21933: LD_VAR 0 2
21937: PPUSH
21938: LD_VAR 0 4
21942: PPUSH
21943: LD_VAR 0 5
21947: PPUSH
21948: CALL 25845 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21952: LD_VAR 0 1
21956: PUSH
21957: LD_INT 253
21959: EQUAL
21960: IFFALSE 21977
21962: PUSH
21963: LD_VAR 0 2
21967: PPUSH
21968: CALL_OW 257
21972: PUSH
21973: LD_INT 5
21975: EQUAL
21976: AND
21977: IFFALSE 21998
// ComBinocular ( unit , x , y ) ;
21979: LD_VAR 0 2
21983: PPUSH
21984: LD_VAR 0 4
21988: PPUSH
21989: LD_VAR 0 5
21993: PPUSH
21994: CALL 26220 0 3
// if selectedUnit then
21998: LD_VAR 0 3
22002: IFFALSE 22062
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22004: LD_VAR 0 1
22008: PUSH
22009: LD_INT 254
22011: EQUAL
22012: IFFALSE 22029
22014: PUSH
22015: LD_VAR 0 2
22019: PPUSH
22020: CALL_OW 264
22024: PUSH
22025: LD_INT 99
22027: EQUAL
22028: AND
22029: IFFALSE 22046
22031: PUSH
22032: LD_VAR 0 3
22036: PPUSH
22037: CALL_OW 263
22041: PUSH
22042: LD_INT 3
22044: EQUAL
22045: AND
22046: IFFALSE 22062
// HackDestroyVehicle ( unit , selectedUnit ) ;
22048: LD_VAR 0 2
22052: PPUSH
22053: LD_VAR 0 3
22057: PPUSH
22058: CALL 24396 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22062: LD_VAR 0 1
22066: PUSH
22067: LD_INT 255
22069: EQUAL
22070: IFFALSE 22094
22072: PUSH
22073: LD_VAR 0 2
22077: PPUSH
22078: CALL_OW 264
22082: PUSH
22083: LD_INT 14
22085: PUSH
22086: LD_INT 53
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: IN
22093: AND
22094: IFFALSE 22112
22096: PUSH
22097: LD_VAR 0 4
22101: PPUSH
22102: LD_VAR 0 5
22106: PPUSH
22107: CALL_OW 488
22111: AND
22112: IFFALSE 22136
// CutTreeXYR ( unit , x , y , 12 ) ;
22114: LD_VAR 0 2
22118: PPUSH
22119: LD_VAR 0 4
22123: PPUSH
22124: LD_VAR 0 5
22128: PPUSH
22129: LD_INT 12
22131: PPUSH
22132: CALL 22327 0 4
// if cmd = 256 then
22136: LD_VAR 0 1
22140: PUSH
22141: LD_INT 256
22143: EQUAL
22144: IFFALSE 22165
// SetFactoryWaypoint ( unit , x , y ) ;
22146: LD_VAR 0 2
22150: PPUSH
22151: LD_VAR 0 4
22155: PPUSH
22156: LD_VAR 0 5
22160: PPUSH
22161: CALL 19606 0 3
// if cmd = 257 then
22165: LD_VAR 0 1
22169: PUSH
22170: LD_INT 257
22172: EQUAL
22173: IFFALSE 22194
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22175: LD_VAR 0 2
22179: PPUSH
22180: LD_VAR 0 4
22184: PPUSH
22185: LD_VAR 0 5
22189: PPUSH
22190: CALL 20102 0 3
// if cmd = 258 then
22194: LD_VAR 0 1
22198: PUSH
22199: LD_INT 258
22201: EQUAL
22202: IFFALSE 22226
// BurnTreeXYR ( unit , x , y , 8 ) ;
22204: LD_VAR 0 2
22208: PPUSH
22209: LD_VAR 0 4
22213: PPUSH
22214: LD_VAR 0 5
22218: PPUSH
22219: LD_INT 8
22221: PPUSH
22222: CALL 22749 0 4
// end ;
22226: LD_VAR 0 6
22230: RET
// export function ComRadiation ( un ) ; var eff ; begin
22231: LD_INT 0
22233: PPUSH
22234: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22235: LD_VAR 0 1
22239: PPUSH
22240: CALL_OW 264
22244: PUSH
22245: LD_INT 91
22247: NONEQUAL
22248: IFFALSE 22252
// exit ;
22250: GO 22322
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22252: LD_INT 68
22254: PPUSH
22255: LD_VAR 0 1
22259: PPUSH
22260: CALL_OW 255
22264: PPUSH
22265: CALL_OW 321
22269: PUSH
22270: LD_INT 2
22272: EQUAL
22273: IFFALSE 22285
// eff := 50 else
22275: LD_ADDR_VAR 0 3
22279: PUSH
22280: LD_INT 50
22282: ST_TO_ADDR
22283: GO 22293
// eff := 25 ;
22285: LD_ADDR_VAR 0 3
22289: PUSH
22290: LD_INT 25
22292: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22293: LD_VAR 0 1
22297: PPUSH
22298: CALL_OW 250
22302: PPUSH
22303: LD_VAR 0 1
22307: PPUSH
22308: CALL_OW 251
22312: PPUSH
22313: LD_VAR 0 3
22317: PPUSH
22318: CALL_OW 495
// end ;
22322: LD_VAR 0 2
22326: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22327: LD_INT 0
22329: PPUSH
22330: PPUSH
22331: PPUSH
22332: PPUSH
22333: PPUSH
22334: PPUSH
22335: PPUSH
22336: PPUSH
22337: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22338: LD_VAR 0 1
22342: PPUSH
22343: CALL_OW 302
22347: NOT
22348: IFTRUE 22367
22350: PUSH
22351: LD_VAR 0 2
22355: PPUSH
22356: LD_VAR 0 3
22360: PPUSH
22361: CALL_OW 488
22365: NOT
22366: OR
22367: IFTRUE 22376
22369: PUSH
22370: LD_VAR 0 4
22374: NOT
22375: OR
22376: IFFALSE 22380
// exit ;
22378: GO 22744
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
22380: LD_VAR 0 1
22384: PPUSH
22385: CALL_OW 437
22389: PPUSH
22390: CALL 29922 0 1
22394: PUSH
22395: LD_INT 10
22397: GREATER
22398: IFFALSE 22402
// exit ;
22400: GO 22744
// list := [ ] ;
22402: LD_ADDR_VAR 0 13
22406: PUSH
22407: EMPTY
22408: ST_TO_ADDR
// if x - r < 0 then
22409: LD_VAR 0 2
22413: PUSH
22414: LD_VAR 0 4
22418: MINUS
22419: PUSH
22420: LD_INT 0
22422: LESS
22423: IFFALSE 22435
// min_x := 0 else
22425: LD_ADDR_VAR 0 7
22429: PUSH
22430: LD_INT 0
22432: ST_TO_ADDR
22433: GO 22451
// min_x := x - r ;
22435: LD_ADDR_VAR 0 7
22439: PUSH
22440: LD_VAR 0 2
22444: PUSH
22445: LD_VAR 0 4
22449: MINUS
22450: ST_TO_ADDR
// if y - r < 0 then
22451: LD_VAR 0 3
22455: PUSH
22456: LD_VAR 0 4
22460: MINUS
22461: PUSH
22462: LD_INT 0
22464: LESS
22465: IFFALSE 22477
// min_y := 0 else
22467: LD_ADDR_VAR 0 8
22471: PUSH
22472: LD_INT 0
22474: ST_TO_ADDR
22475: GO 22493
// min_y := y - r ;
22477: LD_ADDR_VAR 0 8
22481: PUSH
22482: LD_VAR 0 3
22486: PUSH
22487: LD_VAR 0 4
22491: MINUS
22492: ST_TO_ADDR
// max_x := x + r ;
22493: LD_ADDR_VAR 0 9
22497: PUSH
22498: LD_VAR 0 2
22502: PUSH
22503: LD_VAR 0 4
22507: PLUS
22508: ST_TO_ADDR
// max_y := y + r ;
22509: LD_ADDR_VAR 0 10
22513: PUSH
22514: LD_VAR 0 3
22518: PUSH
22519: LD_VAR 0 4
22523: PLUS
22524: ST_TO_ADDR
// for _x = min_x to max_x do
22525: LD_ADDR_VAR 0 11
22529: PUSH
22530: DOUBLE
22531: LD_VAR 0 7
22535: DEC
22536: ST_TO_ADDR
22537: LD_VAR 0 9
22541: PUSH
22542: FOR_TO
22543: IFFALSE 22662
// for _y = min_y to max_y do
22545: LD_ADDR_VAR 0 12
22549: PUSH
22550: DOUBLE
22551: LD_VAR 0 8
22555: DEC
22556: ST_TO_ADDR
22557: LD_VAR 0 10
22561: PUSH
22562: FOR_TO
22563: IFFALSE 22658
// begin if not ValidHex ( _x , _y ) then
22565: LD_VAR 0 11
22569: PPUSH
22570: LD_VAR 0 12
22574: PPUSH
22575: CALL_OW 488
22579: NOT
22580: IFFALSE 22584
// continue ;
22582: GO 22562
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22584: LD_VAR 0 11
22588: PPUSH
22589: LD_VAR 0 12
22593: PPUSH
22594: CALL_OW 351
22598: IFFALSE 22616
22600: PUSH
22601: LD_VAR 0 11
22605: PPUSH
22606: LD_VAR 0 12
22610: PPUSH
22611: CALL_OW 554
22615: AND
22616: IFFALSE 22656
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22618: LD_ADDR_VAR 0 13
22622: PUSH
22623: LD_VAR 0 13
22627: PPUSH
22628: LD_VAR 0 13
22632: PUSH
22633: LD_INT 1
22635: PLUS
22636: PPUSH
22637: LD_VAR 0 11
22641: PUSH
22642: LD_VAR 0 12
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PPUSH
22651: CALL_OW 2
22655: ST_TO_ADDR
// end ;
22656: GO 22562
22658: POP
22659: POP
22660: GO 22542
22662: POP
22663: POP
// if not list then
22664: LD_VAR 0 13
22668: NOT
22669: IFFALSE 22673
// exit ;
22671: GO 22744
// for i in list do
22673: LD_ADDR_VAR 0 6
22677: PUSH
22678: LD_VAR 0 13
22682: PUSH
22683: FOR_IN
22684: IFFALSE 22742
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22686: LD_VAR 0 1
22690: PPUSH
22691: LD_STRING M
22693: PUSH
22694: LD_VAR 0 6
22698: PUSH
22699: LD_INT 1
22701: ARRAY
22702: PUSH
22703: LD_VAR 0 6
22707: PUSH
22708: LD_INT 2
22710: ARRAY
22711: PUSH
22712: LD_INT 0
22714: PUSH
22715: LD_INT 0
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: LD_INT 0
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: PUSH
22733: EMPTY
22734: LIST
22735: PPUSH
22736: CALL_OW 447
22740: GO 22683
22742: POP
22743: POP
// end ;
22744: LD_VAR 0 5
22748: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22749: LD_INT 0
22751: PPUSH
22752: PPUSH
22753: PPUSH
22754: PPUSH
22755: PPUSH
22756: PPUSH
22757: PPUSH
22758: PPUSH
22759: PPUSH
22760: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22761: LD_VAR 0 1
22765: PPUSH
22766: CALL_OW 302
22770: NOT
22771: IFTRUE 22790
22773: PUSH
22774: LD_VAR 0 2
22778: PPUSH
22779: LD_VAR 0 3
22783: PPUSH
22784: CALL_OW 488
22788: NOT
22789: OR
22790: IFTRUE 22799
22792: PUSH
22793: LD_VAR 0 4
22797: NOT
22798: OR
22799: IFFALSE 22803
// exit ;
22801: GO 23342
// if Count ( GetTaskList ( flame ) ) > 10 then
22803: LD_VAR 0 1
22807: PPUSH
22808: CALL_OW 437
22812: PPUSH
22813: CALL 29922 0 1
22817: PUSH
22818: LD_INT 10
22820: GREATER
22821: IFFALSE 22825
// exit ;
22823: GO 23342
// list := [ ] ;
22825: LD_ADDR_VAR 0 13
22829: PUSH
22830: EMPTY
22831: ST_TO_ADDR
// if x - r < 0 then
22832: LD_VAR 0 2
22836: PUSH
22837: LD_VAR 0 4
22841: MINUS
22842: PUSH
22843: LD_INT 0
22845: LESS
22846: IFFALSE 22858
// min_x := 0 else
22848: LD_ADDR_VAR 0 7
22852: PUSH
22853: LD_INT 0
22855: ST_TO_ADDR
22856: GO 22874
// min_x := x - r ;
22858: LD_ADDR_VAR 0 7
22862: PUSH
22863: LD_VAR 0 2
22867: PUSH
22868: LD_VAR 0 4
22872: MINUS
22873: ST_TO_ADDR
// if y - r < 0 then
22874: LD_VAR 0 3
22878: PUSH
22879: LD_VAR 0 4
22883: MINUS
22884: PUSH
22885: LD_INT 0
22887: LESS
22888: IFFALSE 22900
// min_y := 0 else
22890: LD_ADDR_VAR 0 8
22894: PUSH
22895: LD_INT 0
22897: ST_TO_ADDR
22898: GO 22916
// min_y := y - r ;
22900: LD_ADDR_VAR 0 8
22904: PUSH
22905: LD_VAR 0 3
22909: PUSH
22910: LD_VAR 0 4
22914: MINUS
22915: ST_TO_ADDR
// max_x := x + r ;
22916: LD_ADDR_VAR 0 9
22920: PUSH
22921: LD_VAR 0 2
22925: PUSH
22926: LD_VAR 0 4
22930: PLUS
22931: ST_TO_ADDR
// max_y := y + r ;
22932: LD_ADDR_VAR 0 10
22936: PUSH
22937: LD_VAR 0 3
22941: PUSH
22942: LD_VAR 0 4
22946: PLUS
22947: ST_TO_ADDR
// for _x = min_x to max_x do
22948: LD_ADDR_VAR 0 11
22952: PUSH
22953: DOUBLE
22954: LD_VAR 0 7
22958: DEC
22959: ST_TO_ADDR
22960: LD_VAR 0 9
22964: PUSH
22965: FOR_TO
22966: IFFALSE 23085
// for _y = min_y to max_y do
22968: LD_ADDR_VAR 0 12
22972: PUSH
22973: DOUBLE
22974: LD_VAR 0 8
22978: DEC
22979: ST_TO_ADDR
22980: LD_VAR 0 10
22984: PUSH
22985: FOR_TO
22986: IFFALSE 23081
// begin if not ValidHex ( _x , _y ) then
22988: LD_VAR 0 11
22992: PPUSH
22993: LD_VAR 0 12
22997: PPUSH
22998: CALL_OW 488
23002: NOT
23003: IFFALSE 23007
// continue ;
23005: GO 22985
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23007: LD_VAR 0 11
23011: PPUSH
23012: LD_VAR 0 12
23016: PPUSH
23017: CALL_OW 351
23021: IFFALSE 23039
23023: PUSH
23024: LD_VAR 0 11
23028: PPUSH
23029: LD_VAR 0 12
23033: PPUSH
23034: CALL_OW 554
23038: AND
23039: IFFALSE 23079
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23041: LD_ADDR_VAR 0 13
23045: PUSH
23046: LD_VAR 0 13
23050: PPUSH
23051: LD_VAR 0 13
23055: PUSH
23056: LD_INT 1
23058: PLUS
23059: PPUSH
23060: LD_VAR 0 11
23064: PUSH
23065: LD_VAR 0 12
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PPUSH
23074: CALL_OW 2
23078: ST_TO_ADDR
// end ;
23079: GO 22985
23081: POP
23082: POP
23083: GO 22965
23085: POP
23086: POP
// if not list then
23087: LD_VAR 0 13
23091: NOT
23092: IFFALSE 23096
// exit ;
23094: GO 23342
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23096: LD_ADDR_VAR 0 13
23100: PUSH
23101: LD_VAR 0 1
23105: PPUSH
23106: LD_VAR 0 13
23110: PPUSH
23111: LD_INT 1
23113: PPUSH
23114: LD_INT 1
23116: PPUSH
23117: CALL 33328 0 4
23121: ST_TO_ADDR
// ComStop ( flame ) ;
23122: LD_VAR 0 1
23126: PPUSH
23127: CALL_OW 141
// for i in list do
23131: LD_ADDR_VAR 0 6
23135: PUSH
23136: LD_VAR 0 13
23140: PUSH
23141: FOR_IN
23142: IFFALSE 23173
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23144: LD_VAR 0 1
23148: PPUSH
23149: LD_VAR 0 6
23153: PUSH
23154: LD_INT 1
23156: ARRAY
23157: PPUSH
23158: LD_VAR 0 6
23162: PUSH
23163: LD_INT 2
23165: ARRAY
23166: PPUSH
23167: CALL_OW 176
23171: GO 23141
23173: POP
23174: POP
// repeat wait ( 0 0$1 ) ;
23175: LD_INT 35
23177: PPUSH
23178: CALL_OW 67
// task := GetTaskList ( flame ) ;
23182: LD_ADDR_VAR 0 14
23186: PUSH
23187: LD_VAR 0 1
23191: PPUSH
23192: CALL_OW 437
23196: ST_TO_ADDR
// if not task then
23197: LD_VAR 0 14
23201: NOT
23202: IFFALSE 23206
// exit ;
23204: GO 23342
// if task [ 1 ] [ 1 ] <> | then
23206: LD_VAR 0 14
23210: PUSH
23211: LD_INT 1
23213: ARRAY
23214: PUSH
23215: LD_INT 1
23217: ARRAY
23218: PUSH
23219: LD_STRING |
23221: NONEQUAL
23222: IFFALSE 23226
// exit ;
23224: GO 23342
// _x := task [ 1 ] [ 2 ] ;
23226: LD_ADDR_VAR 0 11
23230: PUSH
23231: LD_VAR 0 14
23235: PUSH
23236: LD_INT 1
23238: ARRAY
23239: PUSH
23240: LD_INT 2
23242: ARRAY
23243: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23244: LD_ADDR_VAR 0 12
23248: PUSH
23249: LD_VAR 0 14
23253: PUSH
23254: LD_INT 1
23256: ARRAY
23257: PUSH
23258: LD_INT 3
23260: ARRAY
23261: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23262: LD_VAR 0 11
23266: PPUSH
23267: LD_VAR 0 12
23271: PPUSH
23272: CALL_OW 351
23276: NOT
23277: IFTRUE 23296
23279: PUSH
23280: LD_VAR 0 11
23284: PPUSH
23285: LD_VAR 0 12
23289: PPUSH
23290: CALL_OW 554
23294: NOT
23295: OR
23296: IFFALSE 23330
// begin task := Delete ( task , 1 ) ;
23298: LD_ADDR_VAR 0 14
23302: PUSH
23303: LD_VAR 0 14
23307: PPUSH
23308: LD_INT 1
23310: PPUSH
23311: CALL_OW 3
23315: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23316: LD_VAR 0 1
23320: PPUSH
23321: LD_VAR 0 14
23325: PPUSH
23326: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23330: LD_VAR 0 1
23334: PPUSH
23335: CALL_OW 314
23339: NOT
23340: IFFALSE 23175
// end ;
23342: LD_VAR 0 5
23346: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23347: LD_EXP 78
23351: NOT
23352: IFFALSE 23402
23354: GO 23356
23356: DISABLE
// begin initHack := true ;
23357: LD_ADDR_EXP 78
23361: PUSH
23362: LD_INT 1
23364: ST_TO_ADDR
// hackTanks := [ ] ;
23365: LD_ADDR_EXP 79
23369: PUSH
23370: EMPTY
23371: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23372: LD_ADDR_EXP 80
23376: PUSH
23377: EMPTY
23378: ST_TO_ADDR
// hackLimit := 3 ;
23379: LD_ADDR_EXP 81
23383: PUSH
23384: LD_INT 3
23386: ST_TO_ADDR
// hackDist := 12 ;
23387: LD_ADDR_EXP 82
23391: PUSH
23392: LD_INT 12
23394: ST_TO_ADDR
// hackCounter := [ ] ;
23395: LD_ADDR_EXP 83
23399: PUSH
23400: EMPTY
23401: ST_TO_ADDR
// end ;
23402: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23403: LD_EXP 78
23407: IFFALSE 23425
23409: PUSH
23410: LD_INT 34
23412: PUSH
23413: LD_INT 99
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PPUSH
23420: CALL_OW 69
23424: AND
23425: IFFALSE 23678
23427: GO 23429
23429: DISABLE
23430: LD_INT 0
23432: PPUSH
23433: PPUSH
// begin enable ;
23434: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23435: LD_ADDR_VAR 0 1
23439: PUSH
23440: LD_INT 34
23442: PUSH
23443: LD_INT 99
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PPUSH
23450: CALL_OW 69
23454: PUSH
23455: FOR_IN
23456: IFFALSE 23676
// begin if not i in hackTanks then
23458: LD_VAR 0 1
23462: PUSH
23463: LD_EXP 79
23467: IN
23468: NOT
23469: IFFALSE 23552
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23471: LD_ADDR_EXP 79
23475: PUSH
23476: LD_EXP 79
23480: PPUSH
23481: LD_EXP 79
23485: PUSH
23486: LD_INT 1
23488: PLUS
23489: PPUSH
23490: LD_VAR 0 1
23494: PPUSH
23495: CALL_OW 1
23499: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23500: LD_ADDR_EXP 80
23504: PUSH
23505: LD_EXP 80
23509: PPUSH
23510: LD_EXP 80
23514: PUSH
23515: LD_INT 1
23517: PLUS
23518: PPUSH
23519: EMPTY
23520: PPUSH
23521: CALL_OW 1
23525: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23526: LD_ADDR_EXP 83
23530: PUSH
23531: LD_EXP 83
23535: PPUSH
23536: LD_EXP 83
23540: PUSH
23541: LD_INT 1
23543: PLUS
23544: PPUSH
23545: EMPTY
23546: PPUSH
23547: CALL_OW 1
23551: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23552: LD_VAR 0 1
23556: PPUSH
23557: CALL_OW 302
23561: NOT
23562: IFFALSE 23575
// begin HackUnlinkAll ( i ) ;
23564: LD_VAR 0 1
23568: PPUSH
23569: CALL 23681 0 1
// continue ;
23573: GO 23455
// end ; HackCheckCapturedStatus ( i ) ;
23575: LD_VAR 0 1
23579: PPUSH
23580: CALL 24126 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23584: LD_ADDR_VAR 0 2
23588: PUSH
23589: LD_INT 81
23591: PUSH
23592: LD_VAR 0 1
23596: PPUSH
23597: CALL_OW 255
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 33
23608: PUSH
23609: LD_INT 3
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 91
23618: PUSH
23619: LD_VAR 0 1
23623: PUSH
23624: LD_EXP 82
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 50
23636: PUSH
23637: EMPTY
23638: LIST
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: PPUSH
23646: CALL_OW 69
23650: ST_TO_ADDR
// if not tmp then
23651: LD_VAR 0 2
23655: NOT
23656: IFFALSE 23660
// continue ;
23658: GO 23455
// HackLink ( i , tmp ) ;
23660: LD_VAR 0 1
23664: PPUSH
23665: LD_VAR 0 2
23669: PPUSH
23670: CALL 23817 0 2
// end ;
23674: GO 23455
23676: POP
23677: POP
// end ;
23678: PPOPN 2
23680: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23681: LD_INT 0
23683: PPUSH
23684: PPUSH
23685: PPUSH
// if not hack in hackTanks then
23686: LD_VAR 0 1
23690: PUSH
23691: LD_EXP 79
23695: IN
23696: NOT
23697: IFFALSE 23701
// exit ;
23699: GO 23812
// index := GetElementIndex ( hackTanks , hack ) ;
23701: LD_ADDR_VAR 0 4
23705: PUSH
23706: LD_EXP 79
23710: PPUSH
23711: LD_VAR 0 1
23715: PPUSH
23716: CALL 32623 0 2
23720: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23721: LD_EXP 80
23725: PUSH
23726: LD_VAR 0 4
23730: ARRAY
23731: IFFALSE 23812
// begin for i in hackTanksCaptured [ index ] do
23733: LD_ADDR_VAR 0 3
23737: PUSH
23738: LD_EXP 80
23742: PUSH
23743: LD_VAR 0 4
23747: ARRAY
23748: PUSH
23749: FOR_IN
23750: IFFALSE 23776
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23752: LD_VAR 0 3
23756: PUSH
23757: LD_INT 1
23759: ARRAY
23760: PPUSH
23761: LD_VAR 0 3
23765: PUSH
23766: LD_INT 2
23768: ARRAY
23769: PPUSH
23770: CALL_OW 235
23774: GO 23749
23776: POP
23777: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23778: LD_ADDR_EXP 80
23782: PUSH
23783: LD_EXP 80
23787: PPUSH
23788: LD_VAR 0 4
23792: PPUSH
23793: EMPTY
23794: PPUSH
23795: CALL_OW 1
23799: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23800: LD_VAR 0 1
23804: PPUSH
23805: LD_INT 0
23807: PPUSH
23808: CALL_OW 505
// end ; end ;
23812: LD_VAR 0 2
23816: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23817: LD_INT 0
23819: PPUSH
23820: PPUSH
23821: PPUSH
// if not hack in hackTanks or not vehicles then
23822: LD_VAR 0 1
23826: PUSH
23827: LD_EXP 79
23831: IN
23832: NOT
23833: IFTRUE 23842
23835: PUSH
23836: LD_VAR 0 2
23840: NOT
23841: OR
23842: IFFALSE 23846
// exit ;
23844: GO 24121
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23846: LD_ADDR_VAR 0 2
23850: PUSH
23851: LD_VAR 0 1
23855: PPUSH
23856: LD_VAR 0 2
23860: PPUSH
23861: LD_INT 1
23863: PPUSH
23864: LD_INT 1
23866: PPUSH
23867: CALL 33275 0 4
23871: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23872: LD_ADDR_VAR 0 5
23876: PUSH
23877: LD_EXP 79
23881: PPUSH
23882: LD_VAR 0 1
23886: PPUSH
23887: CALL 32623 0 2
23891: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23892: LD_EXP 80
23896: PUSH
23897: LD_VAR 0 5
23901: ARRAY
23902: PUSH
23903: LD_EXP 81
23907: LESS
23908: IFFALSE 24097
// begin for i := 1 to vehicles do
23910: LD_ADDR_VAR 0 4
23914: PUSH
23915: DOUBLE
23916: LD_INT 1
23918: DEC
23919: ST_TO_ADDR
23920: LD_VAR 0 2
23924: PUSH
23925: FOR_TO
23926: IFFALSE 24095
// begin if hackTanksCaptured [ index ] = hackLimit then
23928: LD_EXP 80
23932: PUSH
23933: LD_VAR 0 5
23937: ARRAY
23938: PUSH
23939: LD_EXP 81
23943: EQUAL
23944: IFFALSE 23948
// break ;
23946: GO 24095
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23948: LD_ADDR_EXP 83
23952: PUSH
23953: LD_EXP 83
23957: PPUSH
23958: LD_VAR 0 5
23962: PPUSH
23963: LD_EXP 83
23967: PUSH
23968: LD_VAR 0 5
23972: ARRAY
23973: PUSH
23974: LD_INT 1
23976: PLUS
23977: PPUSH
23978: CALL_OW 1
23982: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23983: LD_ADDR_EXP 80
23987: PUSH
23988: LD_EXP 80
23992: PPUSH
23993: LD_VAR 0 5
23997: PUSH
23998: LD_EXP 80
24002: PUSH
24003: LD_VAR 0 5
24007: ARRAY
24008: PUSH
24009: LD_INT 1
24011: PLUS
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PPUSH
24017: LD_VAR 0 2
24021: PUSH
24022: LD_VAR 0 4
24026: ARRAY
24027: PUSH
24028: LD_VAR 0 2
24032: PUSH
24033: LD_VAR 0 4
24037: ARRAY
24038: PPUSH
24039: CALL_OW 255
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL 32840 0 3
24052: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24053: LD_VAR 0 2
24057: PUSH
24058: LD_VAR 0 4
24062: ARRAY
24063: PPUSH
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL_OW 255
24073: PPUSH
24074: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24078: LD_VAR 0 2
24082: PUSH
24083: LD_VAR 0 4
24087: ARRAY
24088: PPUSH
24089: CALL_OW 141
// end ;
24093: GO 23925
24095: POP
24096: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24097: LD_VAR 0 1
24101: PPUSH
24102: LD_EXP 80
24106: PUSH
24107: LD_VAR 0 5
24111: ARRAY
24112: PUSH
24113: LD_INT 0
24115: PLUS
24116: PPUSH
24117: CALL_OW 505
// end ;
24121: LD_VAR 0 3
24125: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24126: LD_INT 0
24128: PPUSH
24129: PPUSH
24130: PPUSH
24131: PPUSH
// if not hack in hackTanks then
24132: LD_VAR 0 1
24136: PUSH
24137: LD_EXP 79
24141: IN
24142: NOT
24143: IFFALSE 24147
// exit ;
24145: GO 24391
// index := GetElementIndex ( hackTanks , hack ) ;
24147: LD_ADDR_VAR 0 4
24151: PUSH
24152: LD_EXP 79
24156: PPUSH
24157: LD_VAR 0 1
24161: PPUSH
24162: CALL 32623 0 2
24166: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24167: LD_ADDR_VAR 0 3
24171: PUSH
24172: DOUBLE
24173: LD_EXP 80
24177: PUSH
24178: LD_VAR 0 4
24182: ARRAY
24183: INC
24184: ST_TO_ADDR
24185: LD_INT 1
24187: PUSH
24188: FOR_DOWNTO
24189: IFFALSE 24365
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24191: LD_ADDR_VAR 0 5
24195: PUSH
24196: LD_EXP 80
24200: PUSH
24201: LD_VAR 0 4
24205: ARRAY
24206: PUSH
24207: LD_VAR 0 3
24211: ARRAY
24212: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24213: LD_VAR 0 5
24217: PUSH
24218: LD_INT 1
24220: ARRAY
24221: PPUSH
24222: CALL_OW 302
24226: NOT
24227: IFTRUE 24255
24229: PUSH
24230: LD_VAR 0 5
24234: PUSH
24235: LD_INT 1
24237: ARRAY
24238: PPUSH
24239: CALL_OW 255
24243: PUSH
24244: LD_VAR 0 1
24248: PPUSH
24249: CALL_OW 255
24253: NONEQUAL
24254: OR
24255: IFFALSE 24363
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24257: LD_VAR 0 5
24261: PUSH
24262: LD_INT 1
24264: ARRAY
24265: PPUSH
24266: CALL_OW 305
24270: IFFALSE 24298
24272: PUSH
24273: LD_VAR 0 5
24277: PUSH
24278: LD_INT 1
24280: ARRAY
24281: PPUSH
24282: CALL_OW 255
24286: PUSH
24287: LD_VAR 0 1
24291: PPUSH
24292: CALL_OW 255
24296: EQUAL
24297: AND
24298: IFFALSE 24322
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24300: LD_VAR 0 5
24304: PUSH
24305: LD_INT 1
24307: ARRAY
24308: PPUSH
24309: LD_VAR 0 5
24313: PUSH
24314: LD_INT 2
24316: ARRAY
24317: PPUSH
24318: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24322: LD_ADDR_EXP 80
24326: PUSH
24327: LD_EXP 80
24331: PPUSH
24332: LD_VAR 0 4
24336: PPUSH
24337: LD_EXP 80
24341: PUSH
24342: LD_VAR 0 4
24346: ARRAY
24347: PPUSH
24348: LD_VAR 0 3
24352: PPUSH
24353: CALL_OW 3
24357: PPUSH
24358: CALL_OW 1
24362: ST_TO_ADDR
// end ; end ;
24363: GO 24188
24365: POP
24366: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_EXP 80
24376: PUSH
24377: LD_VAR 0 4
24381: ARRAY
24382: PUSH
24383: LD_INT 0
24385: PLUS
24386: PPUSH
24387: CALL_OW 505
// end ;
24391: LD_VAR 0 2
24395: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24396: LD_INT 0
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
// if not hack in hackTanks then
24402: LD_VAR 0 1
24406: PUSH
24407: LD_EXP 79
24411: IN
24412: NOT
24413: IFFALSE 24417
// exit ;
24415: GO 24502
// index := GetElementIndex ( hackTanks , hack ) ;
24417: LD_ADDR_VAR 0 5
24421: PUSH
24422: LD_EXP 79
24426: PPUSH
24427: LD_VAR 0 1
24431: PPUSH
24432: CALL 32623 0 2
24436: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24437: LD_ADDR_VAR 0 4
24441: PUSH
24442: DOUBLE
24443: LD_INT 1
24445: DEC
24446: ST_TO_ADDR
24447: LD_EXP 80
24451: PUSH
24452: LD_VAR 0 5
24456: ARRAY
24457: PUSH
24458: FOR_TO
24459: IFFALSE 24500
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24461: LD_EXP 80
24465: PUSH
24466: LD_VAR 0 5
24470: ARRAY
24471: PUSH
24472: LD_VAR 0 4
24476: ARRAY
24477: PUSH
24478: LD_INT 1
24480: ARRAY
24481: PUSH
24482: LD_VAR 0 2
24486: EQUAL
24487: IFFALSE 24498
// KillUnit ( vehicle ) ;
24489: LD_VAR 0 2
24493: PPUSH
24494: CALL_OW 66
24498: GO 24458
24500: POP
24501: POP
// end ;
24502: LD_VAR 0 3
24506: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
24507: LD_EXP 84
24511: NOT
24512: IFFALSE 24645
24514: GO 24516
24516: DISABLE
24517: LD_INT 0
24519: PPUSH
// begin initMiner := true ;
24520: LD_ADDR_EXP 84
24524: PUSH
24525: LD_INT 1
24527: ST_TO_ADDR
// minersList := [ ] ;
24528: LD_ADDR_EXP 85
24532: PUSH
24533: EMPTY
24534: ST_TO_ADDR
// minerMinesList := [ ] ;
24535: LD_ADDR_EXP 86
24539: PUSH
24540: EMPTY
24541: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
24542: LD_ADDR_EXP 87
24546: PUSH
24547: LD_INT 10
24549: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24550: LD_ADDR_VAR 0 1
24554: PUSH
24555: LD_INT 34
24557: PUSH
24558: LD_INT 81
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PPUSH
24565: CALL_OW 69
24569: PUSH
24570: FOR_IN
24571: IFFALSE 24643
// begin if not i in minersList then
24573: LD_VAR 0 1
24577: PUSH
24578: LD_EXP 85
24582: IN
24583: NOT
24584: IFFALSE 24641
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24586: LD_ADDR_EXP 85
24590: PUSH
24591: LD_EXP 85
24595: PPUSH
24596: LD_EXP 85
24600: PUSH
24601: LD_INT 1
24603: PLUS
24604: PPUSH
24605: LD_VAR 0 1
24609: PPUSH
24610: CALL_OW 1
24614: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24615: LD_ADDR_EXP 86
24619: PUSH
24620: LD_EXP 86
24624: PPUSH
24625: LD_EXP 86
24629: PUSH
24630: LD_INT 1
24632: PLUS
24633: PPUSH
24634: EMPTY
24635: PPUSH
24636: CALL_OW 1
24640: ST_TO_ADDR
// end end ;
24641: GO 24570
24643: POP
24644: POP
// end ;
24645: PPOPN 1
24647: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
24648: LD_EXP 84
24652: IFFALSE 24683
24654: PUSH
24655: LD_EXP 86
24659: PPUSH
24660: CALL 29922 0 1
24664: IFTRUE 24682
24666: PUSH
24667: LD_INT 34
24669: PUSH
24670: LD_INT 81
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PPUSH
24677: CALL_OW 69
24681: OR
24682: AND
24683: IFFALSE 25203
24685: GO 24687
24687: DISABLE
24688: LD_INT 0
24690: PPUSH
24691: PPUSH
24692: PPUSH
24693: PPUSH
// begin enable ;
24694: ENABLE
// for i := minerMinesList downto 1 do
24695: LD_ADDR_VAR 0 1
24699: PUSH
24700: DOUBLE
24701: LD_EXP 86
24705: INC
24706: ST_TO_ADDR
24707: LD_INT 1
24709: PUSH
24710: FOR_DOWNTO
24711: IFFALSE 25201
// begin side := GetSide ( minersList [ i ] ) ;
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_EXP 85
24722: PUSH
24723: LD_VAR 0 1
24727: ARRAY
24728: PPUSH
24729: CALL_OW 255
24733: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
24734: LD_EXP 85
24738: PUSH
24739: LD_VAR 0 1
24743: ARRAY
24744: PPUSH
24745: CALL_OW 300
24749: IFFALSE 24770
24751: PUSH
24752: LD_VAR 0 3
24756: PUSH
24757: LD_OWVAR 2
24761: PUSH
24762: LD_INT 9
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: IN
24769: AND
24770: IFFALSE 24803
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
24772: LD_EXP 85
24776: PUSH
24777: LD_VAR 0 1
24781: ARRAY
24782: PPUSH
24783: LD_EXP 86
24787: PUSH
24788: LD_VAR 0 1
24792: ARRAY
24793: PPUSH
24794: CALL 29922 0 1
24798: PPUSH
24799: CALL_OW 505
// if not minerMinesList [ i ] then
24803: LD_EXP 86
24807: PUSH
24808: LD_VAR 0 1
24812: ARRAY
24813: NOT
24814: IFFALSE 24818
// continue ;
24816: GO 24710
// for j := minerMinesList [ i ] downto 1 do
24818: LD_ADDR_VAR 0 2
24822: PUSH
24823: DOUBLE
24824: LD_EXP 86
24828: PUSH
24829: LD_VAR 0 1
24833: ARRAY
24834: INC
24835: ST_TO_ADDR
24836: LD_INT 1
24838: PUSH
24839: FOR_DOWNTO
24840: IFFALSE 25197
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
24842: LD_EXP 85
24846: PUSH
24847: LD_VAR 0 1
24851: ARRAY
24852: PPUSH
24853: CALL_OW 301
24857: IFTRUE 24877
24859: PUSH
24860: LD_EXP 85
24864: PUSH
24865: LD_VAR 0 1
24869: ARRAY
24870: PPUSH
24871: CALL_OW 305
24875: NOT
24876: OR
24877: IFFALSE 24968
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24879: LD_EXP 86
24883: PUSH
24884: LD_VAR 0 1
24888: ARRAY
24889: PUSH
24890: LD_VAR 0 2
24894: ARRAY
24895: PUSH
24896: LD_INT 1
24898: ARRAY
24899: PPUSH
24900: LD_EXP 86
24904: PUSH
24905: LD_VAR 0 1
24909: ARRAY
24910: PUSH
24911: LD_VAR 0 2
24915: ARRAY
24916: PUSH
24917: LD_INT 2
24919: ARRAY
24920: PPUSH
24921: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24925: LD_ADDR_EXP 86
24929: PUSH
24930: LD_EXP 86
24934: PPUSH
24935: LD_VAR 0 1
24939: PPUSH
24940: LD_EXP 86
24944: PUSH
24945: LD_VAR 0 1
24949: ARRAY
24950: PPUSH
24951: LD_VAR 0 2
24955: PPUSH
24956: CALL_OW 3
24960: PPUSH
24961: CALL_OW 1
24965: ST_TO_ADDR
// continue ;
24966: GO 24839
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24968: LD_ADDR_VAR 0 4
24972: PUSH
24973: LD_EXP 86
24977: PUSH
24978: LD_VAR 0 1
24982: ARRAY
24983: PUSH
24984: LD_VAR 0 2
24988: ARRAY
24989: PUSH
24990: LD_INT 1
24992: ARRAY
24993: PPUSH
24994: LD_EXP 86
24998: PUSH
24999: LD_VAR 0 1
25003: ARRAY
25004: PUSH
25005: LD_VAR 0 2
25009: ARRAY
25010: PUSH
25011: LD_INT 2
25013: ARRAY
25014: PPUSH
25015: CALL_OW 428
25019: ST_TO_ADDR
// if not tmp then
25020: LD_VAR 0 4
25024: NOT
25025: IFFALSE 25029
// continue ;
25027: GO 24839
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25029: LD_VAR 0 4
25033: PUSH
25034: LD_INT 81
25036: PUSH
25037: LD_VAR 0 3
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PPUSH
25046: CALL_OW 69
25050: IN
25051: IFFALSE 25101
25053: PUSH
25054: LD_EXP 86
25058: PUSH
25059: LD_VAR 0 1
25063: ARRAY
25064: PUSH
25065: LD_VAR 0 2
25069: ARRAY
25070: PUSH
25071: LD_INT 1
25073: ARRAY
25074: PPUSH
25075: LD_EXP 86
25079: PUSH
25080: LD_VAR 0 1
25084: ARRAY
25085: PUSH
25086: LD_VAR 0 2
25090: ARRAY
25091: PUSH
25092: LD_INT 2
25094: ARRAY
25095: PPUSH
25096: CALL_OW 458
25100: AND
25101: IFFALSE 25195
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25103: LD_EXP 86
25107: PUSH
25108: LD_VAR 0 1
25112: ARRAY
25113: PUSH
25114: LD_VAR 0 2
25118: ARRAY
25119: PUSH
25120: LD_INT 1
25122: ARRAY
25123: PPUSH
25124: LD_EXP 86
25128: PUSH
25129: LD_VAR 0 1
25133: ARRAY
25134: PUSH
25135: LD_VAR 0 2
25139: ARRAY
25140: PUSH
25141: LD_INT 2
25143: ARRAY
25144: PPUSH
25145: LD_VAR 0 3
25149: PPUSH
25150: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25154: LD_ADDR_EXP 86
25158: PUSH
25159: LD_EXP 86
25163: PPUSH
25164: LD_VAR 0 1
25168: PPUSH
25169: LD_EXP 86
25173: PUSH
25174: LD_VAR 0 1
25178: ARRAY
25179: PPUSH
25180: LD_VAR 0 2
25184: PPUSH
25185: CALL_OW 3
25189: PPUSH
25190: CALL_OW 1
25194: ST_TO_ADDR
// end ; end ;
25195: GO 24839
25197: POP
25198: POP
// end ;
25199: GO 24710
25201: POP
25202: POP
// end ;
25203: PPOPN 4
25205: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
25206: LD_INT 0
25208: PPUSH
25209: PPUSH
25210: PPUSH
25211: PPUSH
// result := false ;
25212: LD_ADDR_VAR 0 4
25216: PUSH
25217: LD_INT 0
25219: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25220: LD_VAR 0 1
25224: PPUSH
25225: CALL_OW 264
25229: PUSH
25230: LD_INT 81
25232: EQUAL
25233: NOT
25234: IFFALSE 25238
// exit ;
25236: GO 25608
// side := GetSide ( unit ) ;
25238: LD_ADDR_VAR 0 6
25242: PUSH
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL_OW 255
25252: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
25253: LD_ADDR_VAR 0 5
25257: PUSH
25258: LD_EXP 85
25262: PPUSH
25263: LD_VAR 0 1
25267: PPUSH
25268: CALL 32623 0 2
25272: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25273: LD_EXP 86
25277: PUSH
25278: LD_VAR 0 5
25282: ARRAY
25283: PUSH
25284: LD_EXP 87
25288: GREATEREQUAL
25289: IFFALSE 25293
// exit ;
25291: GO 25608
// ComMoveXY ( unit , x , y ) ;
25293: LD_VAR 0 1
25297: PPUSH
25298: LD_VAR 0 2
25302: PPUSH
25303: LD_VAR 0 3
25307: PPUSH
25308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25312: LD_INT 35
25314: PPUSH
25315: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25319: LD_VAR 0 1
25323: PPUSH
25324: LD_VAR 0 2
25328: PPUSH
25329: LD_VAR 0 3
25333: PPUSH
25334: CALL 64679 0 3
25338: NOT
25339: IFFALSE 25352
25341: PUSH
25342: LD_VAR 0 1
25346: PPUSH
25347: CALL_OW 314
25351: AND
25352: IFFALSE 25356
// exit ;
25354: GO 25608
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25356: LD_VAR 0 2
25360: PPUSH
25361: LD_VAR 0 3
25365: PPUSH
25366: CALL_OW 428
25370: PUSH
25371: LD_VAR 0 1
25375: EQUAL
25376: IFFALSE 25390
25378: PUSH
25379: LD_VAR 0 1
25383: PPUSH
25384: CALL_OW 314
25388: NOT
25389: AND
25390: IFFALSE 25312
// if MineAtPos ( x , y ) then
25392: LD_VAR 0 2
25396: PPUSH
25397: LD_VAR 0 3
25401: PPUSH
25402: CALL_OW 458
25406: IFFALSE 25410
// exit ;
25408: GO 25608
// if your_side = side then
25410: LD_OWVAR 2
25414: PUSH
25415: LD_VAR 0 6
25419: EQUAL
25420: IFFALSE 25439
// PlaySoundXY ( x , y , PlantMine ) ;
25422: LD_VAR 0 2
25426: PPUSH
25427: LD_VAR 0 3
25431: PPUSH
25432: LD_STRING PlantMine
25434: PPUSH
25435: CALL_OW 366
// repeat wait ( 1 ) ;
25439: LD_INT 1
25441: PPUSH
25442: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
25446: LD_VAR 0 2
25450: PPUSH
25451: LD_VAR 0 3
25455: PPUSH
25456: LD_VAR 0 6
25460: PPUSH
25461: LD_INT 0
25463: PPUSH
25464: CALL_OW 454
25468: IFFALSE 25439
// if MineAtPos ( x , y ) then
25470: LD_VAR 0 2
25474: PPUSH
25475: LD_VAR 0 3
25479: PPUSH
25480: CALL_OW 458
25484: IFFALSE 25600
// begin for i in minerMinesList [ index ] do
25486: LD_ADDR_VAR 0 7
25490: PUSH
25491: LD_EXP 86
25495: PUSH
25496: LD_VAR 0 5
25500: ARRAY
25501: PUSH
25502: FOR_IN
25503: IFFALSE 25545
// if i [ 1 ] = x and i [ 2 ] = y then
25505: LD_VAR 0 7
25509: PUSH
25510: LD_INT 1
25512: ARRAY
25513: PUSH
25514: LD_VAR 0 2
25518: EQUAL
25519: IFFALSE 25537
25521: PUSH
25522: LD_VAR 0 7
25526: PUSH
25527: LD_INT 2
25529: ARRAY
25530: PUSH
25531: LD_VAR 0 3
25535: EQUAL
25536: AND
25537: IFFALSE 25543
// exit ;
25539: POP
25540: POP
25541: GO 25608
25543: GO 25502
25545: POP
25546: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25547: LD_ADDR_EXP 86
25551: PUSH
25552: LD_EXP 86
25556: PPUSH
25557: LD_VAR 0 5
25561: PUSH
25562: LD_EXP 86
25566: PUSH
25567: LD_VAR 0 5
25571: ARRAY
25572: PUSH
25573: LD_INT 1
25575: PLUS
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PPUSH
25581: LD_VAR 0 2
25585: PUSH
25586: LD_VAR 0 3
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PPUSH
25595: CALL 32840 0 3
25599: ST_TO_ADDR
// end ; result := true ;
25600: LD_ADDR_VAR 0 4
25604: PUSH
25605: LD_INT 1
25607: ST_TO_ADDR
// end ;
25608: LD_VAR 0 4
25612: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25613: LD_INT 0
25615: PPUSH
25616: PPUSH
25617: PPUSH
// if not unit in minersList then
25618: LD_VAR 0 1
25622: PUSH
25623: LD_EXP 85
25627: IN
25628: NOT
25629: IFFALSE 25633
// exit ;
25631: GO 25840
// index := GetElementIndex ( minersList , unit ) ;
25633: LD_ADDR_VAR 0 6
25637: PUSH
25638: LD_EXP 85
25642: PPUSH
25643: LD_VAR 0 1
25647: PPUSH
25648: CALL 32623 0 2
25652: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25653: LD_ADDR_VAR 0 5
25657: PUSH
25658: DOUBLE
25659: LD_EXP 86
25663: PUSH
25664: LD_VAR 0 6
25668: ARRAY
25669: INC
25670: ST_TO_ADDR
25671: LD_INT 1
25673: PUSH
25674: FOR_DOWNTO
25675: IFFALSE 25838
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25677: LD_EXP 86
25681: PUSH
25682: LD_VAR 0 6
25686: ARRAY
25687: PUSH
25688: LD_VAR 0 5
25692: ARRAY
25693: PUSH
25694: LD_INT 1
25696: ARRAY
25697: PPUSH
25698: LD_EXP 86
25702: PUSH
25703: LD_VAR 0 6
25707: ARRAY
25708: PUSH
25709: LD_VAR 0 5
25713: ARRAY
25714: PUSH
25715: LD_INT 2
25717: ARRAY
25718: PPUSH
25719: LD_VAR 0 2
25723: PPUSH
25724: LD_VAR 0 3
25728: PPUSH
25729: CALL_OW 298
25733: PUSH
25734: LD_INT 6
25736: LESS
25737: IFFALSE 25836
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25739: LD_EXP 86
25743: PUSH
25744: LD_VAR 0 6
25748: ARRAY
25749: PUSH
25750: LD_VAR 0 5
25754: ARRAY
25755: PUSH
25756: LD_INT 1
25758: ARRAY
25759: PPUSH
25760: LD_EXP 86
25764: PUSH
25765: LD_VAR 0 6
25769: ARRAY
25770: PUSH
25771: LD_VAR 0 5
25775: ARRAY
25776: PUSH
25777: LD_INT 2
25779: ARRAY
25780: PPUSH
25781: LD_VAR 0 1
25785: PPUSH
25786: CALL_OW 255
25790: PPUSH
25791: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25795: LD_ADDR_EXP 86
25799: PUSH
25800: LD_EXP 86
25804: PPUSH
25805: LD_VAR 0 6
25809: PPUSH
25810: LD_EXP 86
25814: PUSH
25815: LD_VAR 0 6
25819: ARRAY
25820: PPUSH
25821: LD_VAR 0 5
25825: PPUSH
25826: CALL_OW 3
25830: PPUSH
25831: CALL_OW 1
25835: ST_TO_ADDR
// end ; end ;
25836: GO 25674
25838: POP
25839: POP
// end ;
25840: LD_VAR 0 4
25844: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25845: LD_INT 0
25847: PPUSH
25848: PPUSH
25849: PPUSH
25850: PPUSH
25851: PPUSH
25852: PPUSH
25853: PPUSH
25854: PPUSH
25855: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25856: LD_VAR 0 1
25860: PPUSH
25861: CALL_OW 264
25865: PUSH
25866: LD_INT 81
25868: EQUAL
25869: NOT
25870: IFTRUE 25885
25872: PUSH
25873: LD_VAR 0 1
25877: PUSH
25878: LD_EXP 85
25882: IN
25883: NOT
25884: OR
25885: IFFALSE 25889
// exit ;
25887: GO 26215
// index := GetElementIndex ( minersList , unit ) ;
25889: LD_ADDR_VAR 0 6
25893: PUSH
25894: LD_EXP 85
25898: PPUSH
25899: LD_VAR 0 1
25903: PPUSH
25904: CALL 32623 0 2
25908: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25909: LD_ADDR_VAR 0 8
25913: PUSH
25914: LD_EXP 87
25918: PUSH
25919: LD_EXP 86
25923: PUSH
25924: LD_VAR 0 6
25928: ARRAY
25929: MINUS
25930: ST_TO_ADDR
// if not minesFreeAmount then
25931: LD_VAR 0 8
25935: NOT
25936: IFFALSE 25940
// exit ;
25938: GO 26215
// tmp := [ ] ;
25940: LD_ADDR_VAR 0 7
25944: PUSH
25945: EMPTY
25946: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25947: LD_ADDR_VAR 0 5
25951: PUSH
25952: DOUBLE
25953: LD_INT 1
25955: DEC
25956: ST_TO_ADDR
25957: LD_VAR 0 8
25961: PUSH
25962: FOR_TO
25963: IFFALSE 26162
// begin _d := rand ( 0 , 5 ) ;
25965: LD_ADDR_VAR 0 11
25969: PUSH
25970: LD_INT 0
25972: PPUSH
25973: LD_INT 5
25975: PPUSH
25976: CALL_OW 12
25980: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25981: LD_ADDR_VAR 0 12
25985: PUSH
25986: LD_INT 2
25988: PPUSH
25989: LD_INT 6
25991: PPUSH
25992: CALL_OW 12
25996: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25997: LD_ADDR_VAR 0 9
26001: PUSH
26002: LD_VAR 0 2
26006: PPUSH
26007: LD_VAR 0 11
26011: PPUSH
26012: LD_VAR 0 12
26016: PPUSH
26017: CALL_OW 272
26021: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26022: LD_ADDR_VAR 0 10
26026: PUSH
26027: LD_VAR 0 3
26031: PPUSH
26032: LD_VAR 0 11
26036: PPUSH
26037: LD_VAR 0 12
26041: PPUSH
26042: CALL_OW 273
26046: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26047: LD_VAR 0 9
26051: PPUSH
26052: LD_VAR 0 10
26056: PPUSH
26057: CALL_OW 488
26061: IFFALSE 26085
26063: PUSH
26064: LD_VAR 0 9
26068: PUSH
26069: LD_VAR 0 10
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_VAR 0 7
26082: IN
26083: NOT
26084: AND
26085: IFFALSE 26104
26087: PUSH
26088: LD_VAR 0 9
26092: PPUSH
26093: LD_VAR 0 10
26097: PPUSH
26098: CALL_OW 458
26102: NOT
26103: AND
26104: IFFALSE 26146
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26106: LD_ADDR_VAR 0 7
26110: PUSH
26111: LD_VAR 0 7
26115: PPUSH
26116: LD_VAR 0 7
26120: PUSH
26121: LD_INT 1
26123: PLUS
26124: PPUSH
26125: LD_VAR 0 9
26129: PUSH
26130: LD_VAR 0 10
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PPUSH
26139: CALL_OW 1
26143: ST_TO_ADDR
26144: GO 26160
// i := i - 1 ;
26146: LD_ADDR_VAR 0 5
26150: PUSH
26151: LD_VAR 0 5
26155: PUSH
26156: LD_INT 1
26158: MINUS
26159: ST_TO_ADDR
// end ;
26160: GO 25962
26162: POP
26163: POP
// for i in tmp do
26164: LD_ADDR_VAR 0 5
26168: PUSH
26169: LD_VAR 0 7
26173: PUSH
26174: FOR_IN
26175: IFFALSE 26213
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26177: LD_VAR 0 1
26181: PPUSH
26182: LD_VAR 0 5
26186: PUSH
26187: LD_INT 1
26189: ARRAY
26190: PPUSH
26191: LD_VAR 0 5
26195: PUSH
26196: LD_INT 2
26198: ARRAY
26199: PPUSH
26200: CALL 25206 0 3
26204: NOT
26205: IFFALSE 26211
// exit ;
26207: POP
26208: POP
26209: GO 26215
26211: GO 26174
26213: POP
26214: POP
// end ;
26215: LD_VAR 0 4
26219: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26220: LD_INT 0
26222: PPUSH
26223: PPUSH
26224: PPUSH
26225: PPUSH
26226: PPUSH
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
// if GetClass ( unit ) <> class_sniper then
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL_OW 257
26240: PUSH
26241: LD_INT 5
26243: NONEQUAL
26244: IFFALSE 26248
// exit ;
26246: GO 26718
// dist := 8 ;
26248: LD_ADDR_VAR 0 5
26252: PUSH
26253: LD_INT 8
26255: ST_TO_ADDR
// viewRange := 12 ;
26256: LD_ADDR_VAR 0 8
26260: PUSH
26261: LD_INT 12
26263: ST_TO_ADDR
// side := GetSide ( unit ) ;
26264: LD_ADDR_VAR 0 6
26268: PUSH
26269: LD_VAR 0 1
26273: PPUSH
26274: CALL_OW 255
26278: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26279: LD_INT 61
26281: PPUSH
26282: LD_VAR 0 6
26286: PPUSH
26287: CALL_OW 321
26291: PUSH
26292: LD_INT 2
26294: EQUAL
26295: IFFALSE 26305
// viewRange := 16 ;
26297: LD_ADDR_VAR 0 8
26301: PUSH
26302: LD_INT 16
26304: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26305: LD_VAR 0 1
26309: PPUSH
26310: LD_VAR 0 2
26314: PPUSH
26315: LD_VAR 0 3
26319: PPUSH
26320: CALL_OW 297
26324: PUSH
26325: LD_VAR 0 5
26329: GREATER
26330: IFFALSE 26409
// begin ComMoveXY ( unit , x , y ) ;
26332: LD_VAR 0 1
26336: PPUSH
26337: LD_VAR 0 2
26341: PPUSH
26342: LD_VAR 0 3
26346: PPUSH
26347: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26351: LD_INT 35
26353: PPUSH
26354: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26358: LD_VAR 0 1
26362: PPUSH
26363: LD_VAR 0 2
26367: PPUSH
26368: LD_VAR 0 3
26372: PPUSH
26373: CALL 64679 0 3
26377: NOT
26378: IFFALSE 26382
// exit ;
26380: GO 26718
// until GetDistUnitXY ( unit , x , y ) < dist ;
26382: LD_VAR 0 1
26386: PPUSH
26387: LD_VAR 0 2
26391: PPUSH
26392: LD_VAR 0 3
26396: PPUSH
26397: CALL_OW 297
26401: PUSH
26402: LD_VAR 0 5
26406: LESS
26407: IFFALSE 26351
// end ; ComTurnXY ( unit , x , y ) ;
26409: LD_VAR 0 1
26413: PPUSH
26414: LD_VAR 0 2
26418: PPUSH
26419: LD_VAR 0 3
26423: PPUSH
26424: CALL_OW 118
// repeat if Multiplayer then
26428: LD_OWVAR 4
26432: IFFALSE 26443
// wait ( 35 ) else
26434: LD_INT 35
26436: PPUSH
26437: CALL_OW 67
26441: GO 26450
// wait ( 5 ) ;
26443: LD_INT 5
26445: PPUSH
26446: CALL_OW 67
// _d := GetDir ( unit ) ;
26450: LD_ADDR_VAR 0 11
26454: PUSH
26455: LD_VAR 0 1
26459: PPUSH
26460: CALL_OW 254
26464: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
26465: LD_ADDR_VAR 0 7
26469: PUSH
26470: LD_VAR 0 1
26474: PPUSH
26475: CALL_OW 250
26479: PPUSH
26480: LD_VAR 0 1
26484: PPUSH
26485: CALL_OW 251
26489: PPUSH
26490: LD_VAR 0 2
26494: PPUSH
26495: LD_VAR 0 3
26499: PPUSH
26500: CALL 67315 0 4
26504: ST_TO_ADDR
// until dir = _d ;
26505: LD_VAR 0 7
26509: PUSH
26510: LD_VAR 0 11
26514: EQUAL
26515: IFFALSE 26428
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26517: LD_ADDR_VAR 0 9
26521: PUSH
26522: LD_VAR 0 1
26526: PPUSH
26527: CALL_OW 250
26531: PPUSH
26532: LD_VAR 0 7
26536: PPUSH
26537: LD_VAR 0 5
26541: PPUSH
26542: CALL_OW 272
26546: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26547: LD_ADDR_VAR 0 10
26551: PUSH
26552: LD_VAR 0 1
26556: PPUSH
26557: CALL_OW 251
26561: PPUSH
26562: LD_VAR 0 7
26566: PPUSH
26567: LD_VAR 0 5
26571: PPUSH
26572: CALL_OW 273
26576: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26577: LD_VAR 0 9
26581: PPUSH
26582: LD_VAR 0 10
26586: PPUSH
26587: CALL_OW 488
26591: NOT
26592: IFFALSE 26596
// exit ;
26594: GO 26718
// ComAnimCustom ( unit , 1 ) ;
26596: LD_VAR 0 1
26600: PPUSH
26601: LD_INT 1
26603: PPUSH
26604: CALL_OW 592
// p := 0 ;
26608: LD_ADDR_VAR 0 12
26612: PUSH
26613: LD_INT 0
26615: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26616: LD_VAR 0 9
26620: PPUSH
26621: LD_VAR 0 10
26625: PPUSH
26626: LD_VAR 0 6
26630: PPUSH
26631: LD_VAR 0 8
26635: PPUSH
26636: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
26640: LD_INT 35
26642: PPUSH
26643: CALL_OW 67
// p := Inc ( p ) ;
26647: LD_ADDR_VAR 0 12
26651: PUSH
26652: LD_VAR 0 12
26656: PPUSH
26657: CALL 67271 0 1
26661: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
26662: LD_VAR 0 12
26666: PUSH
26667: LD_INT 3
26669: EQUAL
26670: IFTRUE 26684
26672: PUSH
26673: LD_VAR 0 1
26677: PPUSH
26678: CALL_OW 302
26682: NOT
26683: OR
26684: IFTRUE 26697
26686: PUSH
26687: LD_VAR 0 1
26691: PPUSH
26692: CALL_OW 301
26696: OR
26697: IFFALSE 26640
// RemoveSeeing ( _x , _y , side ) ;
26699: LD_VAR 0 9
26703: PPUSH
26704: LD_VAR 0 10
26708: PPUSH
26709: LD_VAR 0 6
26713: PPUSH
26714: CALL_OW 331
// end ;
26718: LD_VAR 0 4
26722: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
26723: LD_INT 0
26725: PPUSH
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
// if not unit then
26736: LD_VAR 0 1
26740: NOT
26741: IFFALSE 26745
// exit ;
26743: GO 27016
// side := GetSide ( unit ) ;
26745: LD_ADDR_VAR 0 3
26749: PUSH
26750: LD_VAR 0 1
26754: PPUSH
26755: CALL_OW 255
26759: ST_TO_ADDR
// x := GetX ( unit ) ;
26760: LD_ADDR_VAR 0 5
26764: PUSH
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 250
26774: ST_TO_ADDR
// y := GetY ( unit ) ;
26775: LD_ADDR_VAR 0 6
26779: PUSH
26780: LD_VAR 0 1
26784: PPUSH
26785: CALL_OW 251
26789: ST_TO_ADDR
// r := 8 ;
26790: LD_ADDR_VAR 0 4
26794: PUSH
26795: LD_INT 8
26797: ST_TO_ADDR
// if x - r < 0 then
26798: LD_VAR 0 5
26802: PUSH
26803: LD_VAR 0 4
26807: MINUS
26808: PUSH
26809: LD_INT 0
26811: LESS
26812: IFFALSE 26824
// min_x := 0 else
26814: LD_ADDR_VAR 0 7
26818: PUSH
26819: LD_INT 0
26821: ST_TO_ADDR
26822: GO 26840
// min_x := x - r ;
26824: LD_ADDR_VAR 0 7
26828: PUSH
26829: LD_VAR 0 5
26833: PUSH
26834: LD_VAR 0 4
26838: MINUS
26839: ST_TO_ADDR
// if y - r < 0 then
26840: LD_VAR 0 6
26844: PUSH
26845: LD_VAR 0 4
26849: MINUS
26850: PUSH
26851: LD_INT 0
26853: LESS
26854: IFFALSE 26866
// min_y := 0 else
26856: LD_ADDR_VAR 0 8
26860: PUSH
26861: LD_INT 0
26863: ST_TO_ADDR
26864: GO 26882
// min_y := y - r ;
26866: LD_ADDR_VAR 0 8
26870: PUSH
26871: LD_VAR 0 6
26875: PUSH
26876: LD_VAR 0 4
26880: MINUS
26881: ST_TO_ADDR
// max_x := x + r ;
26882: LD_ADDR_VAR 0 9
26886: PUSH
26887: LD_VAR 0 5
26891: PUSH
26892: LD_VAR 0 4
26896: PLUS
26897: ST_TO_ADDR
// max_y := y + r ;
26898: LD_ADDR_VAR 0 10
26902: PUSH
26903: LD_VAR 0 6
26907: PUSH
26908: LD_VAR 0 4
26912: PLUS
26913: ST_TO_ADDR
// for _x = min_x to max_x do
26914: LD_ADDR_VAR 0 11
26918: PUSH
26919: DOUBLE
26920: LD_VAR 0 7
26924: DEC
26925: ST_TO_ADDR
26926: LD_VAR 0 9
26930: PUSH
26931: FOR_TO
26932: IFFALSE 27014
// for _y = min_y to max_y do
26934: LD_ADDR_VAR 0 12
26938: PUSH
26939: DOUBLE
26940: LD_VAR 0 8
26944: DEC
26945: ST_TO_ADDR
26946: LD_VAR 0 10
26950: PUSH
26951: FOR_TO
26952: IFFALSE 27010
// begin if not ValidHex ( _x , _y ) then
26954: LD_VAR 0 11
26958: PPUSH
26959: LD_VAR 0 12
26963: PPUSH
26964: CALL_OW 488
26968: NOT
26969: IFFALSE 26973
// continue ;
26971: GO 26951
// if MineAtPos ( _x , _y ) then
26973: LD_VAR 0 11
26977: PPUSH
26978: LD_VAR 0 12
26982: PPUSH
26983: CALL_OW 458
26987: IFFALSE 27008
// ViewMineAtPos ( _x , _y , side ) ;
26989: LD_VAR 0 11
26993: PPUSH
26994: LD_VAR 0 12
26998: PPUSH
26999: LD_VAR 0 3
27003: PPUSH
27004: CALL_OW 457
// end ;
27008: GO 26951
27010: POP
27011: POP
27012: GO 26931
27014: POP
27015: POP
// end ;
27016: LD_VAR 0 2
27020: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
27021: LD_INT 0
27023: PPUSH
27024: PPUSH
27025: PPUSH
27026: PPUSH
27027: PPUSH
27028: PPUSH
27029: PPUSH
// if not units then
27030: LD_VAR 0 1
27034: NOT
27035: IFFALSE 27039
// exit ;
27037: GO 27503
// scaners := [ ] ;
27039: LD_ADDR_VAR 0 6
27043: PUSH
27044: EMPTY
27045: ST_TO_ADDR
// for i in units do
27046: LD_ADDR_VAR 0 3
27050: PUSH
27051: LD_VAR 0 1
27055: PUSH
27056: FOR_IN
27057: IFFALSE 27214
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
27059: LD_VAR 0 3
27063: PPUSH
27064: CALL_OW 264
27068: PUSH
27069: LD_INT 11
27071: NONEQUAL
27072: IFTRUE 27086
27074: PUSH
27075: LD_VAR 0 3
27079: PPUSH
27080: CALL_OW 302
27084: NOT
27085: OR
27086: IFTRUE 27103
27088: PUSH
27089: LD_VAR 0 3
27093: PPUSH
27094: CALL_OW 110
27098: PUSH
27099: LD_INT 502
27101: EQUAL
27102: OR
27103: IFFALSE 27107
// continue ;
27105: GO 27056
// ComStop ( i ) ;
27107: LD_VAR 0 3
27111: PPUSH
27112: CALL_OW 141
// x := GetX ( i ) ;
27116: LD_ADDR_VAR 0 4
27120: PUSH
27121: LD_VAR 0 3
27125: PPUSH
27126: CALL_OW 250
27130: ST_TO_ADDR
// y := GetY ( i ) ;
27131: LD_ADDR_VAR 0 5
27135: PUSH
27136: LD_VAR 0 3
27140: PPUSH
27141: CALL_OW 251
27145: ST_TO_ADDR
// if GetSide ( i ) = your_side then
27146: LD_VAR 0 3
27150: PPUSH
27151: CALL_OW 255
27155: PUSH
27156: LD_OWVAR 2
27160: EQUAL
27161: IFFALSE 27180
// PlaySoundXY ( x , y , mineDetector ) ;
27163: LD_VAR 0 4
27167: PPUSH
27168: LD_VAR 0 5
27172: PPUSH
27173: LD_STRING mineDetector
27175: PPUSH
27176: CALL_OW 366
// scaners := Join ( scaners , i ) ;
27180: LD_ADDR_VAR 0 6
27184: PUSH
27185: LD_VAR 0 6
27189: PPUSH
27190: LD_VAR 0 3
27194: PPUSH
27195: CALL 65898 0 2
27199: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
27200: LD_VAR 0 3
27204: PPUSH
27205: LD_INT 502
27207: PPUSH
27208: CALL_OW 109
// end ;
27212: GO 27056
27214: POP
27215: POP
// if not scaners then
27216: LD_VAR 0 6
27220: NOT
27221: IFFALSE 27225
// exit ;
27223: GO 27503
// wait ( 3 ) ;
27225: LD_INT 3
27227: PPUSH
27228: CALL_OW 67
// timer := 6 ;
27232: LD_ADDR_VAR 0 7
27236: PUSH
27237: LD_INT 6
27239: ST_TO_ADDR
// repeat for i in scaners do
27240: LD_ADDR_VAR 0 3
27244: PUSH
27245: LD_VAR 0 6
27249: PUSH
27250: FOR_IN
27251: IFFALSE 27401
// begin side := GetSide ( i ) ;
27253: LD_ADDR_VAR 0 8
27257: PUSH
27258: LD_VAR 0 3
27262: PPUSH
27263: CALL_OW 255
27267: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
27268: LD_VAR 0 3
27272: PPUSH
27273: CALL_OW 302
27277: NOT
27278: IFTRUE 27291
27280: PUSH
27281: LD_VAR 0 3
27285: PPUSH
27286: CALL_OW 314
27290: OR
27291: IFTRUE 27322
27293: PUSH
27294: LD_VAR 0 3
27298: PPUSH
27299: CALL_OW 263
27303: PUSH
27304: LD_INT 1
27306: EQUAL
27307: IFFALSE 27321
27309: PUSH
27310: LD_VAR 0 3
27314: PPUSH
27315: CALL_OW 311
27319: NOT
27320: AND
27321: OR
27322: IFFALSE 27366
// begin SetUnitDisplayNumber ( i , 0 ) ;
27324: LD_VAR 0 3
27328: PPUSH
27329: LD_INT 0
27331: PPUSH
27332: CALL_OW 505
// SetTag ( i , 0 ) ;
27336: LD_VAR 0 3
27340: PPUSH
27341: LD_INT 0
27343: PPUSH
27344: CALL_OW 109
// scaners := scaners diff i ;
27348: LD_ADDR_VAR 0 6
27352: PUSH
27353: LD_VAR 0 6
27357: PUSH
27358: LD_VAR 0 3
27362: DIFF
27363: ST_TO_ADDR
// continue ;
27364: GO 27250
// end ; if side in [ your_side , 9 ] then
27366: LD_VAR 0 8
27370: PUSH
27371: LD_OWVAR 2
27375: PUSH
27376: LD_INT 9
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: IN
27383: IFFALSE 27399
// SetUnitDisplayNumber ( i , timer ) ;
27385: LD_VAR 0 3
27389: PPUSH
27390: LD_VAR 0 7
27394: PPUSH
27395: CALL_OW 505
// end ;
27399: GO 27250
27401: POP
27402: POP
// if not scaners then
27403: LD_VAR 0 6
27407: NOT
27408: IFFALSE 27412
// exit ;
27410: GO 27503
// timer := Dec ( timer ) ;
27412: LD_ADDR_VAR 0 7
27416: PUSH
27417: LD_VAR 0 7
27421: PPUSH
27422: CALL 67293 0 1
27426: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27427: LD_INT 35
27429: PPUSH
27430: CALL_OW 67
// until timer = 0 ;
27434: LD_VAR 0 7
27438: PUSH
27439: LD_INT 0
27441: EQUAL
27442: IFFALSE 27240
// if not scaners then
27444: LD_VAR 0 6
27448: NOT
27449: IFFALSE 27453
// exit ;
27451: GO 27503
// for i in scaners do
27453: LD_ADDR_VAR 0 3
27457: PUSH
27458: LD_VAR 0 6
27462: PUSH
27463: FOR_IN
27464: IFFALSE 27501
// begin SetUnitDisplayNumber ( i , 0 ) ;
27466: LD_VAR 0 3
27470: PPUSH
27471: LD_INT 0
27473: PPUSH
27474: CALL_OW 505
// SetTag ( i , 0 ) ;
27478: LD_VAR 0 3
27482: PPUSH
27483: LD_INT 0
27485: PPUSH
27486: CALL_OW 109
// RevealDetectorMine ( i ) ;
27490: LD_VAR 0 3
27494: PPUSH
27495: CALL 26723 0 1
// end ;
27499: GO 27463
27501: POP
27502: POP
// end ;
27503: LD_VAR 0 2
27507: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
27508: LD_INT 0
27510: PPUSH
// if p1 = mine_detector_mode then
27511: LD_VAR 0 2
27515: PUSH
27516: LD_INT 103
27518: EQUAL
27519: IFFALSE 27530
// DetectMine ( units ) ;
27521: LD_VAR 0 1
27525: PPUSH
27526: CALL 27021 0 1
// end ; end_of_file
27530: LD_VAR 0 7
27534: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
27535: LD_VAR 0 1
27539: PUSH
27540: LD_INT 200
27542: DOUBLE
27543: GREATEREQUAL
27544: IFFALSE 27552
27546: LD_INT 299
27548: DOUBLE
27549: LESSEQUAL
27550: IFTRUE 27554
27552: GO 27586
27554: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
27555: LD_VAR 0 1
27559: PPUSH
27560: LD_VAR 0 2
27564: PPUSH
27565: LD_VAR 0 3
27569: PPUSH
27570: LD_VAR 0 4
27574: PPUSH
27575: LD_VAR 0 5
27579: PPUSH
27580: CALL 21811 0 5
27584: GO 27663
27586: LD_INT 300
27588: DOUBLE
27589: GREATEREQUAL
27590: IFFALSE 27598
27592: LD_INT 399
27594: DOUBLE
27595: LESSEQUAL
27596: IFTRUE 27600
27598: GO 27662
27600: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
27601: LD_VAR 0 1
27605: PPUSH
27606: LD_VAR 0 2
27610: PPUSH
27611: LD_VAR 0 3
27615: PPUSH
27616: LD_VAR 0 4
27620: PPUSH
27621: LD_VAR 0 5
27625: PPUSH
27626: LD_VAR 0 6
27630: PPUSH
27631: LD_VAR 0 7
27635: PPUSH
27636: LD_VAR 0 8
27640: PPUSH
27641: LD_VAR 0 9
27645: PPUSH
27646: LD_VAR 0 10
27650: PPUSH
27651: LD_VAR 0 11
27655: PPUSH
27656: CALL 17614 0 11
27660: GO 27663
27662: POP
// end ;
27663: PPOPN 11
27665: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
27666: LD_VAR 0 1
27670: PPUSH
27671: LD_VAR 0 2
27675: PPUSH
27676: LD_VAR 0 3
27680: PPUSH
27681: LD_VAR 0 4
27685: PPUSH
27686: LD_VAR 0 5
27690: PPUSH
27691: CALL 21111 0 5
// end ; end_of_file
27695: PPOPN 5
27697: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27698: LD_INT 0
27700: PPUSH
27701: PPUSH
// if exist_mode then
27702: LD_VAR 0 2
27706: IFFALSE 27752
// begin unit := CreateCharacter ( prefix & ident ) ;
27708: LD_ADDR_VAR 0 5
27712: PUSH
27713: LD_VAR 0 3
27717: PUSH
27718: LD_VAR 0 1
27722: STR
27723: PPUSH
27724: CALL_OW 34
27728: ST_TO_ADDR
// if unit then
27729: LD_VAR 0 5
27733: IFFALSE 27750
// DeleteCharacters ( prefix & ident ) ;
27735: LD_VAR 0 3
27739: PUSH
27740: LD_VAR 0 1
27744: STR
27745: PPUSH
27746: CALL_OW 40
// end else
27750: GO 27767
// unit := NewCharacter ( ident ) ;
27752: LD_ADDR_VAR 0 5
27756: PUSH
27757: LD_VAR 0 1
27761: PPUSH
27762: CALL_OW 25
27766: ST_TO_ADDR
// result := unit ;
27767: LD_ADDR_VAR 0 4
27771: PUSH
27772: LD_VAR 0 5
27776: ST_TO_ADDR
// end ;
27777: LD_VAR 0 4
27781: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
27782: LD_INT 0
27784: PPUSH
27785: PPUSH
// if exist_mode then
27786: LD_VAR 0 2
27790: IFFALSE 27815
// unit := CreateCharacter ( prefix & ident ) else
27792: LD_ADDR_VAR 0 5
27796: PUSH
27797: LD_VAR 0 3
27801: PUSH
27802: LD_VAR 0 1
27806: STR
27807: PPUSH
27808: CALL_OW 34
27812: ST_TO_ADDR
27813: GO 27830
// unit := NewCharacter ( ident ) ;
27815: LD_ADDR_VAR 0 5
27819: PUSH
27820: LD_VAR 0 1
27824: PPUSH
27825: CALL_OW 25
27829: ST_TO_ADDR
// result := unit ;
27830: LD_ADDR_VAR 0 4
27834: PUSH
27835: LD_VAR 0 5
27839: ST_TO_ADDR
// end ;
27840: LD_VAR 0 4
27844: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27845: LD_INT 0
27847: PPUSH
27848: PPUSH
// if not side or not nation then
27849: LD_VAR 0 1
27853: NOT
27854: IFTRUE 27863
27856: PUSH
27857: LD_VAR 0 2
27861: NOT
27862: OR
27863: IFFALSE 27867
// exit ;
27865: GO 28661
// case nation of nation_american :
27867: LD_VAR 0 2
27871: PUSH
27872: LD_INT 1
27874: DOUBLE
27875: EQUAL
27876: IFTRUE 27880
27878: GO 28102
27880: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
27881: LD_ADDR_VAR 0 4
27885: PUSH
27886: LD_INT 35
27888: PUSH
27889: LD_INT 45
27891: PUSH
27892: LD_INT 46
27894: PUSH
27895: LD_INT 47
27897: PUSH
27898: LD_INT 82
27900: PUSH
27901: LD_INT 83
27903: PUSH
27904: LD_INT 84
27906: PUSH
27907: LD_INT 85
27909: PUSH
27910: LD_INT 86
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: LD_INT 6
27921: PUSH
27922: LD_INT 15
27924: PUSH
27925: LD_INT 16
27927: PUSH
27928: LD_INT 7
27930: PUSH
27931: LD_INT 12
27933: PUSH
27934: LD_INT 13
27936: PUSH
27937: LD_INT 10
27939: PUSH
27940: LD_INT 14
27942: PUSH
27943: LD_INT 20
27945: PUSH
27946: LD_INT 21
27948: PUSH
27949: LD_INT 22
27951: PUSH
27952: LD_INT 25
27954: PUSH
27955: LD_INT 32
27957: PUSH
27958: LD_INT 27
27960: PUSH
27961: LD_INT 36
27963: PUSH
27964: LD_INT 69
27966: PUSH
27967: LD_INT 39
27969: PUSH
27970: LD_INT 34
27972: PUSH
27973: LD_INT 40
27975: PUSH
27976: LD_INT 48
27978: PUSH
27979: LD_INT 49
27981: PUSH
27982: LD_INT 50
27984: PUSH
27985: LD_INT 51
27987: PUSH
27988: LD_INT 52
27990: PUSH
27991: LD_INT 53
27993: PUSH
27994: LD_INT 54
27996: PUSH
27997: LD_INT 55
27999: PUSH
28000: LD_INT 56
28002: PUSH
28003: LD_INT 57
28005: PUSH
28006: LD_INT 58
28008: PUSH
28009: LD_INT 59
28011: PUSH
28012: LD_INT 60
28014: PUSH
28015: LD_INT 61
28017: PUSH
28018: LD_INT 62
28020: PUSH
28021: LD_INT 80
28023: PUSH
28024: LD_INT 82
28026: PUSH
28027: LD_INT 83
28029: PUSH
28030: LD_INT 84
28032: PUSH
28033: LD_INT 85
28035: PUSH
28036: LD_INT 86
28038: PUSH
28039: LD_INT 90
28041: PUSH
28042: LD_INT 93
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: ST_TO_ADDR
28100: GO 28583
28102: LD_INT 2
28104: DOUBLE
28105: EQUAL
28106: IFTRUE 28110
28108: GO 28344
28110: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
28111: LD_ADDR_VAR 0 4
28115: PUSH
28116: LD_INT 35
28118: PUSH
28119: LD_INT 45
28121: PUSH
28122: LD_INT 46
28124: PUSH
28125: LD_INT 47
28127: PUSH
28128: LD_INT 82
28130: PUSH
28131: LD_INT 83
28133: PUSH
28134: LD_INT 84
28136: PUSH
28137: LD_INT 85
28139: PUSH
28140: LD_INT 87
28142: PUSH
28143: LD_INT 70
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: LD_INT 11
28151: PUSH
28152: LD_INT 3
28154: PUSH
28155: LD_INT 4
28157: PUSH
28158: LD_INT 5
28160: PUSH
28161: LD_INT 6
28163: PUSH
28164: LD_INT 15
28166: PUSH
28167: LD_INT 18
28169: PUSH
28170: LD_INT 7
28172: PUSH
28173: LD_INT 17
28175: PUSH
28176: LD_INT 8
28178: PUSH
28179: LD_INT 20
28181: PUSH
28182: LD_INT 21
28184: PUSH
28185: LD_INT 22
28187: PUSH
28188: LD_INT 72
28190: PUSH
28191: LD_INT 26
28193: PUSH
28194: LD_INT 69
28196: PUSH
28197: LD_INT 39
28199: PUSH
28200: LD_INT 40
28202: PUSH
28203: LD_INT 41
28205: PUSH
28206: LD_INT 42
28208: PUSH
28209: LD_INT 43
28211: PUSH
28212: LD_INT 48
28214: PUSH
28215: LD_INT 49
28217: PUSH
28218: LD_INT 50
28220: PUSH
28221: LD_INT 51
28223: PUSH
28224: LD_INT 52
28226: PUSH
28227: LD_INT 53
28229: PUSH
28230: LD_INT 54
28232: PUSH
28233: LD_INT 55
28235: PUSH
28236: LD_INT 56
28238: PUSH
28239: LD_INT 60
28241: PUSH
28242: LD_INT 61
28244: PUSH
28245: LD_INT 62
28247: PUSH
28248: LD_INT 66
28250: PUSH
28251: LD_INT 67
28253: PUSH
28254: LD_INT 68
28256: PUSH
28257: LD_INT 81
28259: PUSH
28260: LD_INT 82
28262: PUSH
28263: LD_INT 83
28265: PUSH
28266: LD_INT 84
28268: PUSH
28269: LD_INT 85
28271: PUSH
28272: LD_INT 87
28274: PUSH
28275: LD_INT 88
28277: PUSH
28278: LD_INT 92
28280: PUSH
28281: LD_INT 94
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: ST_TO_ADDR
28342: GO 28583
28344: LD_INT 3
28346: DOUBLE
28347: EQUAL
28348: IFTRUE 28352
28350: GO 28582
28352: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
28353: LD_ADDR_VAR 0 4
28357: PUSH
28358: LD_INT 46
28360: PUSH
28361: LD_INT 47
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: LD_INT 2
28369: PUSH
28370: LD_INT 82
28372: PUSH
28373: LD_INT 83
28375: PUSH
28376: LD_INT 84
28378: PUSH
28379: LD_INT 85
28381: PUSH
28382: LD_INT 86
28384: PUSH
28385: LD_INT 11
28387: PUSH
28388: LD_INT 9
28390: PUSH
28391: LD_INT 20
28393: PUSH
28394: LD_INT 19
28396: PUSH
28397: LD_INT 21
28399: PUSH
28400: LD_INT 24
28402: PUSH
28403: LD_INT 22
28405: PUSH
28406: LD_INT 25
28408: PUSH
28409: LD_INT 28
28411: PUSH
28412: LD_INT 29
28414: PUSH
28415: LD_INT 30
28417: PUSH
28418: LD_INT 31
28420: PUSH
28421: LD_INT 37
28423: PUSH
28424: LD_INT 38
28426: PUSH
28427: LD_INT 32
28429: PUSH
28430: LD_INT 27
28432: PUSH
28433: LD_INT 33
28435: PUSH
28436: LD_INT 69
28438: PUSH
28439: LD_INT 39
28441: PUSH
28442: LD_INT 34
28444: PUSH
28445: LD_INT 40
28447: PUSH
28448: LD_INT 71
28450: PUSH
28451: LD_INT 23
28453: PUSH
28454: LD_INT 44
28456: PUSH
28457: LD_INT 48
28459: PUSH
28460: LD_INT 49
28462: PUSH
28463: LD_INT 50
28465: PUSH
28466: LD_INT 51
28468: PUSH
28469: LD_INT 52
28471: PUSH
28472: LD_INT 53
28474: PUSH
28475: LD_INT 54
28477: PUSH
28478: LD_INT 55
28480: PUSH
28481: LD_INT 56
28483: PUSH
28484: LD_INT 57
28486: PUSH
28487: LD_INT 58
28489: PUSH
28490: LD_INT 59
28492: PUSH
28493: LD_INT 63
28495: PUSH
28496: LD_INT 64
28498: PUSH
28499: LD_INT 65
28501: PUSH
28502: LD_INT 82
28504: PUSH
28505: LD_INT 83
28507: PUSH
28508: LD_INT 84
28510: PUSH
28511: LD_INT 85
28513: PUSH
28514: LD_INT 86
28516: PUSH
28517: LD_INT 89
28519: PUSH
28520: LD_INT 91
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: ST_TO_ADDR
28580: GO 28583
28582: POP
// if state > - 1 and state < 3 then
28583: LD_VAR 0 3
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: GREATER
28592: IFFALSE 28604
28594: PUSH
28595: LD_VAR 0 3
28599: PUSH
28600: LD_INT 3
28602: LESS
28603: AND
28604: IFFALSE 28661
// for i in result do
28606: LD_ADDR_VAR 0 5
28610: PUSH
28611: LD_VAR 0 4
28615: PUSH
28616: FOR_IN
28617: IFFALSE 28659
// if GetTech ( i , side ) <> state then
28619: LD_VAR 0 5
28623: PPUSH
28624: LD_VAR 0 1
28628: PPUSH
28629: CALL_OW 321
28633: PUSH
28634: LD_VAR 0 3
28638: NONEQUAL
28639: IFFALSE 28657
// result := result diff i ;
28641: LD_ADDR_VAR 0 4
28645: PUSH
28646: LD_VAR 0 4
28650: PUSH
28651: LD_VAR 0 5
28655: DIFF
28656: ST_TO_ADDR
28657: GO 28616
28659: POP
28660: POP
// end ;
28661: LD_VAR 0 4
28665: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28666: LD_INT 0
28668: PPUSH
28669: PPUSH
28670: PPUSH
// result := true ;
28671: LD_ADDR_VAR 0 3
28675: PUSH
28676: LD_INT 1
28678: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28679: LD_ADDR_VAR 0 5
28683: PUSH
28684: LD_VAR 0 2
28688: PPUSH
28689: CALL_OW 480
28693: ST_TO_ADDR
// if not tmp then
28694: LD_VAR 0 5
28698: NOT
28699: IFFALSE 28703
// exit ;
28701: GO 28752
// for i in tmp do
28703: LD_ADDR_VAR 0 4
28707: PUSH
28708: LD_VAR 0 5
28712: PUSH
28713: FOR_IN
28714: IFFALSE 28750
// if GetTech ( i , side ) <> state_researched then
28716: LD_VAR 0 4
28720: PPUSH
28721: LD_VAR 0 1
28725: PPUSH
28726: CALL_OW 321
28730: PUSH
28731: LD_INT 2
28733: NONEQUAL
28734: IFFALSE 28748
// begin result := false ;
28736: LD_ADDR_VAR 0 3
28740: PUSH
28741: LD_INT 0
28743: ST_TO_ADDR
// exit ;
28744: POP
28745: POP
28746: GO 28752
// end ;
28748: GO 28713
28750: POP
28751: POP
// end ;
28752: LD_VAR 0 3
28756: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28757: LD_INT 0
28759: PPUSH
28760: PPUSH
28761: PPUSH
28762: PPUSH
28763: PPUSH
28764: PPUSH
28765: PPUSH
28766: PPUSH
28767: PPUSH
28768: PPUSH
28769: PPUSH
28770: PPUSH
28771: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28772: LD_VAR 0 1
28776: NOT
28777: IFTRUE 28794
28779: PUSH
28780: LD_VAR 0 1
28784: PPUSH
28785: CALL_OW 257
28789: PUSH
28790: LD_INT 9
28792: NONEQUAL
28793: OR
28794: IFFALSE 28798
// exit ;
28796: GO 29377
// side := GetSide ( unit ) ;
28798: LD_ADDR_VAR 0 9
28802: PUSH
28803: LD_VAR 0 1
28807: PPUSH
28808: CALL_OW 255
28812: ST_TO_ADDR
// tech_space := tech_spacanom ;
28813: LD_ADDR_VAR 0 12
28817: PUSH
28818: LD_INT 29
28820: ST_TO_ADDR
// tech_time := tech_taurad ;
28821: LD_ADDR_VAR 0 13
28825: PUSH
28826: LD_INT 28
28828: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28829: LD_ADDR_VAR 0 11
28833: PUSH
28834: LD_VAR 0 1
28838: PPUSH
28839: CALL_OW 310
28843: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28844: LD_VAR 0 11
28848: PPUSH
28849: CALL_OW 247
28853: PUSH
28854: LD_INT 2
28856: EQUAL
28857: IFFALSE 28861
// exit ;
28859: GO 29377
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28861: LD_ADDR_VAR 0 8
28865: PUSH
28866: LD_INT 81
28868: PUSH
28869: LD_VAR 0 9
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 3
28880: PUSH
28881: LD_INT 21
28883: PUSH
28884: LD_INT 3
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PPUSH
28899: CALL_OW 69
28903: ST_TO_ADDR
// if not tmp then
28904: LD_VAR 0 8
28908: NOT
28909: IFFALSE 28913
// exit ;
28911: GO 29377
// if in_unit then
28913: LD_VAR 0 11
28917: IFFALSE 28941
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28919: LD_ADDR_VAR 0 10
28923: PUSH
28924: LD_VAR 0 8
28928: PPUSH
28929: LD_VAR 0 11
28933: PPUSH
28934: CALL_OW 74
28938: ST_TO_ADDR
28939: GO 28961
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28941: LD_ADDR_VAR 0 10
28945: PUSH
28946: LD_VAR 0 8
28950: PPUSH
28951: LD_VAR 0 1
28955: PPUSH
28956: CALL_OW 74
28960: ST_TO_ADDR
// if not enemy then
28961: LD_VAR 0 10
28965: NOT
28966: IFFALSE 28970
// exit ;
28968: GO 29377
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28970: LD_VAR 0 11
28974: IFFALSE 28996
28976: PUSH
28977: LD_VAR 0 11
28981: PPUSH
28982: LD_VAR 0 10
28986: PPUSH
28987: CALL_OW 296
28991: PUSH
28992: LD_INT 13
28994: GREATER
28995: AND
28996: IFTRUE 29018
28998: PUSH
28999: LD_VAR 0 1
29003: PPUSH
29004: LD_VAR 0 10
29008: PPUSH
29009: CALL_OW 296
29013: PUSH
29014: LD_INT 12
29016: GREATER
29017: OR
29018: IFFALSE 29022
// exit ;
29020: GO 29377
// missile := [ 1 ] ;
29022: LD_ADDR_VAR 0 14
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: EMPTY
29031: LIST
29032: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29033: LD_VAR 0 9
29037: PPUSH
29038: LD_VAR 0 12
29042: PPUSH
29043: CALL_OW 325
29047: IFFALSE 29076
// missile := Replace ( missile , missile + 1 , 2 ) ;
29049: LD_ADDR_VAR 0 14
29053: PUSH
29054: LD_VAR 0 14
29058: PPUSH
29059: LD_VAR 0 14
29063: PUSH
29064: LD_INT 1
29066: PLUS
29067: PPUSH
29068: LD_INT 2
29070: PPUSH
29071: CALL_OW 1
29075: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29076: LD_VAR 0 9
29080: PPUSH
29081: LD_VAR 0 13
29085: PPUSH
29086: CALL_OW 325
29090: IFFALSE 29114
29092: PUSH
29093: LD_VAR 0 10
29097: PPUSH
29098: CALL_OW 255
29102: PPUSH
29103: LD_VAR 0 13
29107: PPUSH
29108: CALL_OW 325
29112: NOT
29113: AND
29114: IFFALSE 29143
// missile := Replace ( missile , missile + 1 , 3 ) ;
29116: LD_ADDR_VAR 0 14
29120: PUSH
29121: LD_VAR 0 14
29125: PPUSH
29126: LD_VAR 0 14
29130: PUSH
29131: LD_INT 1
29133: PLUS
29134: PPUSH
29135: LD_INT 3
29137: PPUSH
29138: CALL_OW 1
29142: ST_TO_ADDR
// if missile < 2 then
29143: LD_VAR 0 14
29147: PUSH
29148: LD_INT 2
29150: LESS
29151: IFFALSE 29155
// exit ;
29153: GO 29377
// x := GetX ( enemy ) ;
29155: LD_ADDR_VAR 0 4
29159: PUSH
29160: LD_VAR 0 10
29164: PPUSH
29165: CALL_OW 250
29169: ST_TO_ADDR
// y := GetY ( enemy ) ;
29170: LD_ADDR_VAR 0 5
29174: PUSH
29175: LD_VAR 0 10
29179: PPUSH
29180: CALL_OW 251
29184: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29185: LD_ADDR_VAR 0 6
29189: PUSH
29190: LD_VAR 0 4
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PPUSH
29199: LD_INT 1
29201: PPUSH
29202: CALL_OW 12
29206: PLUS
29207: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29208: LD_ADDR_VAR 0 7
29212: PUSH
29213: LD_VAR 0 5
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PPUSH
29222: LD_INT 1
29224: PPUSH
29225: CALL_OW 12
29229: PLUS
29230: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29231: LD_VAR 0 6
29235: PPUSH
29236: LD_VAR 0 7
29240: PPUSH
29241: CALL_OW 488
29245: NOT
29246: IFFALSE 29268
// begin _x := x ;
29248: LD_ADDR_VAR 0 6
29252: PUSH
29253: LD_VAR 0 4
29257: ST_TO_ADDR
// _y := y ;
29258: LD_ADDR_VAR 0 7
29262: PUSH
29263: LD_VAR 0 5
29267: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29268: LD_ADDR_VAR 0 3
29272: PUSH
29273: LD_INT 1
29275: PPUSH
29276: LD_VAR 0 14
29280: PPUSH
29281: CALL_OW 12
29285: ST_TO_ADDR
// case i of 1 :
29286: LD_VAR 0 3
29290: PUSH
29291: LD_INT 1
29293: DOUBLE
29294: EQUAL
29295: IFTRUE 29299
29297: GO 29316
29299: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29300: LD_VAR 0 1
29304: PPUSH
29305: LD_VAR 0 10
29309: PPUSH
29310: CALL_OW 115
29314: GO 29377
29316: LD_INT 2
29318: DOUBLE
29319: EQUAL
29320: IFTRUE 29324
29322: GO 29346
29324: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29325: LD_VAR 0 1
29329: PPUSH
29330: LD_VAR 0 6
29334: PPUSH
29335: LD_VAR 0 7
29339: PPUSH
29340: CALL_OW 153
29344: GO 29377
29346: LD_INT 3
29348: DOUBLE
29349: EQUAL
29350: IFTRUE 29354
29352: GO 29376
29354: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29355: LD_VAR 0 1
29359: PPUSH
29360: LD_VAR 0 6
29364: PPUSH
29365: LD_VAR 0 7
29369: PPUSH
29370: CALL_OW 154
29374: GO 29377
29376: POP
// end ;
29377: LD_VAR 0 2
29381: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29382: LD_INT 0
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
29388: PPUSH
29389: PPUSH
// if not unit or not building then
29390: LD_VAR 0 1
29394: NOT
29395: IFTRUE 29404
29397: PUSH
29398: LD_VAR 0 2
29402: NOT
29403: OR
29404: IFFALSE 29408
// exit ;
29406: GO 29566
// x := GetX ( building ) ;
29408: LD_ADDR_VAR 0 5
29412: PUSH
29413: LD_VAR 0 2
29417: PPUSH
29418: CALL_OW 250
29422: ST_TO_ADDR
// y := GetY ( building ) ;
29423: LD_ADDR_VAR 0 6
29427: PUSH
29428: LD_VAR 0 2
29432: PPUSH
29433: CALL_OW 251
29437: ST_TO_ADDR
// for i := 0 to 5 do
29438: LD_ADDR_VAR 0 4
29442: PUSH
29443: DOUBLE
29444: LD_INT 0
29446: DEC
29447: ST_TO_ADDR
29448: LD_INT 5
29450: PUSH
29451: FOR_TO
29452: IFFALSE 29564
// begin _x := ShiftX ( x , i , 3 ) ;
29454: LD_ADDR_VAR 0 7
29458: PUSH
29459: LD_VAR 0 5
29463: PPUSH
29464: LD_VAR 0 4
29468: PPUSH
29469: LD_INT 3
29471: PPUSH
29472: CALL_OW 272
29476: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29477: LD_ADDR_VAR 0 8
29481: PUSH
29482: LD_VAR 0 6
29486: PPUSH
29487: LD_VAR 0 4
29491: PPUSH
29492: LD_INT 3
29494: PPUSH
29495: CALL_OW 273
29499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29500: LD_VAR 0 7
29504: PPUSH
29505: LD_VAR 0 8
29509: PPUSH
29510: CALL_OW 488
29514: NOT
29515: IFFALSE 29519
// continue ;
29517: GO 29451
// if HexInfo ( _x , _y ) = 0 then
29519: LD_VAR 0 7
29523: PPUSH
29524: LD_VAR 0 8
29528: PPUSH
29529: CALL_OW 428
29533: PUSH
29534: LD_INT 0
29536: EQUAL
29537: IFFALSE 29562
// begin ComMoveXY ( unit , _x , _y ) ;
29539: LD_VAR 0 1
29543: PPUSH
29544: LD_VAR 0 7
29548: PPUSH
29549: LD_VAR 0 8
29553: PPUSH
29554: CALL_OW 111
// exit ;
29558: POP
29559: POP
29560: GO 29566
// end ; end ;
29562: GO 29451
29564: POP
29565: POP
// end ;
29566: LD_VAR 0 3
29570: RET
// export function ScanBase ( side , base_area ) ; begin
29571: LD_INT 0
29573: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29574: LD_ADDR_VAR 0 3
29578: PUSH
29579: LD_VAR 0 2
29583: PPUSH
29584: LD_INT 81
29586: PUSH
29587: LD_VAR 0 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PPUSH
29596: CALL_OW 70
29600: ST_TO_ADDR
// end ;
29601: LD_VAR 0 3
29605: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29606: LD_INT 0
29608: PPUSH
29609: PPUSH
29610: PPUSH
29611: PPUSH
// result := false ;
29612: LD_ADDR_VAR 0 2
29616: PUSH
29617: LD_INT 0
29619: ST_TO_ADDR
// side := GetSide ( unit ) ;
29620: LD_ADDR_VAR 0 3
29624: PUSH
29625: LD_VAR 0 1
29629: PPUSH
29630: CALL_OW 255
29634: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29635: LD_ADDR_VAR 0 4
29639: PUSH
29640: LD_VAR 0 1
29644: PPUSH
29645: CALL_OW 248
29649: ST_TO_ADDR
// case nat of 1 :
29650: LD_VAR 0 4
29654: PUSH
29655: LD_INT 1
29657: DOUBLE
29658: EQUAL
29659: IFTRUE 29663
29661: GO 29674
29663: POP
// tech := tech_lassight ; 2 :
29664: LD_ADDR_VAR 0 5
29668: PUSH
29669: LD_INT 12
29671: ST_TO_ADDR
29672: GO 29713
29674: LD_INT 2
29676: DOUBLE
29677: EQUAL
29678: IFTRUE 29682
29680: GO 29693
29682: POP
// tech := tech_mortar ; 3 :
29683: LD_ADDR_VAR 0 5
29687: PUSH
29688: LD_INT 41
29690: ST_TO_ADDR
29691: GO 29713
29693: LD_INT 3
29695: DOUBLE
29696: EQUAL
29697: IFTRUE 29701
29699: GO 29712
29701: POP
// tech := tech_bazooka ; end ;
29702: LD_ADDR_VAR 0 5
29706: PUSH
29707: LD_INT 44
29709: ST_TO_ADDR
29710: GO 29713
29712: POP
// if Researched ( side , tech ) then
29713: LD_VAR 0 3
29717: PPUSH
29718: LD_VAR 0 5
29722: PPUSH
29723: CALL_OW 325
29727: IFFALSE 29754
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29729: LD_ADDR_VAR 0 2
29733: PUSH
29734: LD_INT 5
29736: PUSH
29737: LD_INT 8
29739: PUSH
29740: LD_INT 9
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: PUSH
29748: LD_VAR 0 4
29752: ARRAY
29753: ST_TO_ADDR
// end ;
29754: LD_VAR 0 2
29758: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29759: LD_INT 0
29761: PPUSH
29762: PPUSH
29763: PPUSH
// if not mines then
29764: LD_VAR 0 2
29768: NOT
29769: IFFALSE 29773
// exit ;
29771: GO 29917
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29773: LD_ADDR_VAR 0 5
29777: PUSH
29778: LD_INT 81
29780: PUSH
29781: LD_VAR 0 1
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 3
29792: PUSH
29793: LD_INT 21
29795: PUSH
29796: LD_INT 3
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PPUSH
29811: CALL_OW 69
29815: ST_TO_ADDR
// for i in mines do
29816: LD_ADDR_VAR 0 4
29820: PUSH
29821: LD_VAR 0 2
29825: PUSH
29826: FOR_IN
29827: IFFALSE 29915
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29829: LD_VAR 0 4
29833: PUSH
29834: LD_INT 1
29836: ARRAY
29837: PPUSH
29838: LD_VAR 0 4
29842: PUSH
29843: LD_INT 2
29845: ARRAY
29846: PPUSH
29847: CALL_OW 458
29851: NOT
29852: IFFALSE 29856
// continue ;
29854: GO 29826
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29856: LD_VAR 0 4
29860: PUSH
29861: LD_INT 1
29863: ARRAY
29864: PPUSH
29865: LD_VAR 0 4
29869: PUSH
29870: LD_INT 2
29872: ARRAY
29873: PPUSH
29874: CALL_OW 428
29878: PUSH
29879: LD_VAR 0 5
29883: IN
29884: IFFALSE 29913
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29886: LD_VAR 0 4
29890: PUSH
29891: LD_INT 1
29893: ARRAY
29894: PPUSH
29895: LD_VAR 0 4
29899: PUSH
29900: LD_INT 2
29902: ARRAY
29903: PPUSH
29904: LD_VAR 0 1
29908: PPUSH
29909: CALL_OW 456
// end ;
29913: GO 29826
29915: POP
29916: POP
// end ;
29917: LD_VAR 0 3
29921: RET
// export function Count ( array ) ; begin
29922: LD_INT 0
29924: PPUSH
// result := array + 0 ;
29925: LD_ADDR_VAR 0 2
29929: PUSH
29930: LD_VAR 0 1
29934: PUSH
29935: LD_INT 0
29937: PLUS
29938: ST_TO_ADDR
// end ;
29939: LD_VAR 0 2
29943: RET
// export function IsEmpty ( building ) ; begin
29944: LD_INT 0
29946: PPUSH
// if not building then
29947: LD_VAR 0 1
29951: NOT
29952: IFFALSE 29956
// exit ;
29954: GO 29999
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29956: LD_ADDR_VAR 0 2
29960: PUSH
29961: LD_VAR 0 1
29965: PUSH
29966: LD_INT 22
29968: PUSH
29969: LD_VAR 0 1
29973: PPUSH
29974: CALL_OW 255
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 58
29985: PUSH
29986: EMPTY
29987: LIST
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PPUSH
29993: CALL_OW 69
29997: IN
29998: ST_TO_ADDR
// end ;
29999: LD_VAR 0 2
30003: RET
// export function IsNotFull ( building ) ; var places ; begin
30004: LD_INT 0
30006: PPUSH
30007: PPUSH
// if not building then
30008: LD_VAR 0 1
30012: NOT
30013: IFFALSE 30017
// exit ;
30015: GO 30045
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30017: LD_ADDR_VAR 0 2
30021: PUSH
30022: LD_VAR 0 1
30026: PPUSH
30027: LD_INT 3
30029: PUSH
30030: LD_INT 62
30032: PUSH
30033: EMPTY
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PPUSH
30040: CALL_OW 72
30044: ST_TO_ADDR
// end ;
30045: LD_VAR 0 2
30049: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30050: LD_INT 0
30052: PPUSH
30053: PPUSH
30054: PPUSH
30055: PPUSH
// tmp := [ ] ;
30056: LD_ADDR_VAR 0 3
30060: PUSH
30061: EMPTY
30062: ST_TO_ADDR
// list := [ ] ;
30063: LD_ADDR_VAR 0 5
30067: PUSH
30068: EMPTY
30069: ST_TO_ADDR
// for i = 16 to 25 do
30070: LD_ADDR_VAR 0 4
30074: PUSH
30075: DOUBLE
30076: LD_INT 16
30078: DEC
30079: ST_TO_ADDR
30080: LD_INT 25
30082: PUSH
30083: FOR_TO
30084: IFFALSE 30157
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30086: LD_ADDR_VAR 0 3
30090: PUSH
30091: LD_VAR 0 3
30095: PUSH
30096: LD_INT 22
30098: PUSH
30099: LD_VAR 0 1
30103: PPUSH
30104: CALL_OW 255
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 91
30115: PUSH
30116: LD_VAR 0 1
30120: PUSH
30121: LD_INT 6
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 30
30131: PUSH
30132: LD_VAR 0 4
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: PUSH
30146: EMPTY
30147: LIST
30148: PPUSH
30149: CALL_OW 69
30153: ADD
30154: ST_TO_ADDR
30155: GO 30083
30157: POP
30158: POP
// for i = 1 to tmp do
30159: LD_ADDR_VAR 0 4
30163: PUSH
30164: DOUBLE
30165: LD_INT 1
30167: DEC
30168: ST_TO_ADDR
30169: LD_VAR 0 3
30173: PUSH
30174: FOR_TO
30175: IFFALSE 30263
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30177: LD_ADDR_VAR 0 5
30181: PUSH
30182: LD_VAR 0 5
30186: PUSH
30187: LD_VAR 0 3
30191: PUSH
30192: LD_VAR 0 4
30196: ARRAY
30197: PPUSH
30198: CALL_OW 266
30202: PUSH
30203: LD_VAR 0 3
30207: PUSH
30208: LD_VAR 0 4
30212: ARRAY
30213: PPUSH
30214: CALL_OW 250
30218: PUSH
30219: LD_VAR 0 3
30223: PUSH
30224: LD_VAR 0 4
30228: ARRAY
30229: PPUSH
30230: CALL_OW 251
30234: PUSH
30235: LD_VAR 0 3
30239: PUSH
30240: LD_VAR 0 4
30244: ARRAY
30245: PPUSH
30246: CALL_OW 254
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: PUSH
30257: EMPTY
30258: LIST
30259: ADD
30260: ST_TO_ADDR
30261: GO 30174
30263: POP
30264: POP
// result := list ;
30265: LD_ADDR_VAR 0 2
30269: PUSH
30270: LD_VAR 0 5
30274: ST_TO_ADDR
// end ;
30275: LD_VAR 0 2
30279: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30280: LD_INT 0
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
// if not factory then
30289: LD_VAR 0 1
30293: NOT
30294: IFFALSE 30298
// exit ;
30296: GO 30901
// if control = control_apeman then
30298: LD_VAR 0 4
30302: PUSH
30303: LD_INT 5
30305: EQUAL
30306: IFFALSE 30415
// begin tmp := UnitsInside ( factory ) ;
30308: LD_ADDR_VAR 0 8
30312: PUSH
30313: LD_VAR 0 1
30317: PPUSH
30318: CALL_OW 313
30322: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30323: LD_VAR 0 8
30327: PPUSH
30328: LD_INT 25
30330: PUSH
30331: LD_INT 12
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PPUSH
30338: CALL_OW 72
30342: NOT
30343: IFFALSE 30353
// control := control_manual ;
30345: LD_ADDR_VAR 0 4
30349: PUSH
30350: LD_INT 1
30352: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30353: LD_ADDR_VAR 0 8
30357: PUSH
30358: LD_VAR 0 1
30362: PPUSH
30363: CALL 30050 0 1
30367: ST_TO_ADDR
// if tmp then
30368: LD_VAR 0 8
30372: IFFALSE 30415
// begin for i in tmp do
30374: LD_ADDR_VAR 0 7
30378: PUSH
30379: LD_VAR 0 8
30383: PUSH
30384: FOR_IN
30385: IFFALSE 30413
// if i [ 1 ] = b_ext_radio then
30387: LD_VAR 0 7
30391: PUSH
30392: LD_INT 1
30394: ARRAY
30395: PUSH
30396: LD_INT 22
30398: EQUAL
30399: IFFALSE 30411
// begin control := control_remote ;
30401: LD_ADDR_VAR 0 4
30405: PUSH
30406: LD_INT 2
30408: ST_TO_ADDR
// break ;
30409: GO 30413
// end ;
30411: GO 30384
30413: POP
30414: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30415: LD_VAR 0 1
30419: PPUSH
30420: LD_VAR 0 2
30424: PPUSH
30425: LD_VAR 0 3
30429: PPUSH
30430: LD_VAR 0 4
30434: PPUSH
30435: LD_VAR 0 5
30439: PPUSH
30440: CALL_OW 448
30444: IFFALSE 30479
// begin result := [ chassis , engine , control , weapon ] ;
30446: LD_ADDR_VAR 0 6
30450: PUSH
30451: LD_VAR 0 2
30455: PUSH
30456: LD_VAR 0 3
30460: PUSH
30461: LD_VAR 0 4
30465: PUSH
30466: LD_VAR 0 5
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: ST_TO_ADDR
// exit ;
30477: GO 30901
// end ; _chassis := AvailableChassisList ( factory ) ;
30479: LD_ADDR_VAR 0 9
30483: PUSH
30484: LD_VAR 0 1
30488: PPUSH
30489: CALL_OW 475
30493: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30494: LD_ADDR_VAR 0 11
30498: PUSH
30499: LD_VAR 0 1
30503: PPUSH
30504: CALL_OW 476
30508: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30509: LD_ADDR_VAR 0 12
30513: PUSH
30514: LD_VAR 0 1
30518: PPUSH
30519: CALL_OW 477
30523: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30524: LD_ADDR_VAR 0 10
30528: PUSH
30529: LD_VAR 0 1
30533: PPUSH
30534: CALL_OW 478
30538: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30539: LD_VAR 0 9
30543: NOT
30544: IFTRUE 30553
30546: PUSH
30547: LD_VAR 0 11
30551: NOT
30552: OR
30553: IFTRUE 30562
30555: PUSH
30556: LD_VAR 0 12
30560: NOT
30561: OR
30562: IFTRUE 30571
30564: PUSH
30565: LD_VAR 0 10
30569: NOT
30570: OR
30571: IFFALSE 30606
// begin result := [ chassis , engine , control , weapon ] ;
30573: LD_ADDR_VAR 0 6
30577: PUSH
30578: LD_VAR 0 2
30582: PUSH
30583: LD_VAR 0 3
30587: PUSH
30588: LD_VAR 0 4
30592: PUSH
30593: LD_VAR 0 5
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: ST_TO_ADDR
// exit ;
30604: GO 30901
// end ; if not chassis in _chassis then
30606: LD_VAR 0 2
30610: PUSH
30611: LD_VAR 0 9
30615: IN
30616: NOT
30617: IFFALSE 30643
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30619: LD_ADDR_VAR 0 2
30623: PUSH
30624: LD_VAR 0 9
30628: PUSH
30629: LD_INT 1
30631: PPUSH
30632: LD_VAR 0 9
30636: PPUSH
30637: CALL_OW 12
30641: ARRAY
30642: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30643: LD_VAR 0 2
30647: PPUSH
30648: LD_VAR 0 3
30652: PPUSH
30653: CALL 30906 0 2
30657: NOT
30658: IFFALSE 30719
// repeat engine := _engine [ 1 ] ;
30660: LD_ADDR_VAR 0 3
30664: PUSH
30665: LD_VAR 0 11
30669: PUSH
30670: LD_INT 1
30672: ARRAY
30673: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30674: LD_ADDR_VAR 0 11
30678: PUSH
30679: LD_VAR 0 11
30683: PPUSH
30684: LD_INT 1
30686: PPUSH
30687: CALL_OW 3
30691: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30692: LD_VAR 0 2
30696: PPUSH
30697: LD_VAR 0 3
30701: PPUSH
30702: CALL 30906 0 2
30706: IFTRUE 30717
30708: PUSH
30709: LD_VAR 0 11
30713: PUSH
30714: EMPTY
30715: EQUAL
30716: OR
30717: IFFALSE 30660
// if not control in _control then
30719: LD_VAR 0 4
30723: PUSH
30724: LD_VAR 0 12
30728: IN
30729: NOT
30730: IFFALSE 30756
// control := _control [ rand ( 1 , _control ) ] ;
30732: LD_ADDR_VAR 0 4
30736: PUSH
30737: LD_VAR 0 12
30741: PUSH
30742: LD_INT 1
30744: PPUSH
30745: LD_VAR 0 12
30749: PPUSH
30750: CALL_OW 12
30754: ARRAY
30755: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30756: LD_VAR 0 2
30760: PPUSH
30761: LD_VAR 0 5
30765: PPUSH
30766: CALL 31128 0 2
30770: NOT
30771: IFFALSE 30832
// repeat weapon := _weapon [ 1 ] ;
30773: LD_ADDR_VAR 0 5
30777: PUSH
30778: LD_VAR 0 10
30782: PUSH
30783: LD_INT 1
30785: ARRAY
30786: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30787: LD_ADDR_VAR 0 10
30791: PUSH
30792: LD_VAR 0 10
30796: PPUSH
30797: LD_INT 1
30799: PPUSH
30800: CALL_OW 3
30804: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30805: LD_VAR 0 2
30809: PPUSH
30810: LD_VAR 0 5
30814: PPUSH
30815: CALL 31128 0 2
30819: IFTRUE 30830
30821: PUSH
30822: LD_VAR 0 10
30826: PUSH
30827: EMPTY
30828: EQUAL
30829: OR
30830: IFFALSE 30773
// result := [ ] ;
30832: LD_ADDR_VAR 0 6
30836: PUSH
30837: EMPTY
30838: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30839: LD_VAR 0 1
30843: PPUSH
30844: LD_VAR 0 2
30848: PPUSH
30849: LD_VAR 0 3
30853: PPUSH
30854: LD_VAR 0 4
30858: PPUSH
30859: LD_VAR 0 5
30863: PPUSH
30864: CALL_OW 448
30868: IFFALSE 30901
// result := [ chassis , engine , control , weapon ] ;
30870: LD_ADDR_VAR 0 6
30874: PUSH
30875: LD_VAR 0 2
30879: PUSH
30880: LD_VAR 0 3
30884: PUSH
30885: LD_VAR 0 4
30889: PUSH
30890: LD_VAR 0 5
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: ST_TO_ADDR
// end ;
30901: LD_VAR 0 6
30905: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30906: LD_INT 0
30908: PPUSH
// if not chassis or not engine then
30909: LD_VAR 0 1
30913: NOT
30914: IFTRUE 30923
30916: PUSH
30917: LD_VAR 0 2
30921: NOT
30922: OR
30923: IFFALSE 30927
// exit ;
30925: GO 31123
// case engine of engine_solar :
30927: LD_VAR 0 2
30931: PUSH
30932: LD_INT 2
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 30978
30940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30941: LD_ADDR_VAR 0 3
30945: PUSH
30946: LD_INT 11
30948: PUSH
30949: LD_INT 12
30951: PUSH
30952: LD_INT 13
30954: PUSH
30955: LD_INT 14
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: LD_INT 2
30963: PUSH
30964: LD_INT 3
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: ST_TO_ADDR
30976: GO 31107
30978: LD_INT 1
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31048
30986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30987: LD_ADDR_VAR 0 3
30991: PUSH
30992: LD_INT 11
30994: PUSH
30995: LD_INT 12
30997: PUSH
30998: LD_INT 13
31000: PUSH
31001: LD_INT 14
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 3
31012: PUSH
31013: LD_INT 4
31015: PUSH
31016: LD_INT 5
31018: PUSH
31019: LD_INT 21
31021: PUSH
31022: LD_INT 23
31024: PUSH
31025: LD_INT 22
31027: PUSH
31028: LD_INT 24
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: ST_TO_ADDR
31046: GO 31107
31048: LD_INT 3
31050: DOUBLE
31051: EQUAL
31052: IFTRUE 31056
31054: GO 31106
31056: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: LD_INT 13
31064: PUSH
31065: LD_INT 14
31067: PUSH
31068: LD_INT 2
31070: PUSH
31071: LD_INT 3
31073: PUSH
31074: LD_INT 4
31076: PUSH
31077: LD_INT 5
31079: PUSH
31080: LD_INT 21
31082: PUSH
31083: LD_INT 22
31085: PUSH
31086: LD_INT 23
31088: PUSH
31089: LD_INT 24
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: ST_TO_ADDR
31104: GO 31107
31106: POP
// result := ( chassis in result ) ;
31107: LD_ADDR_VAR 0 3
31111: PUSH
31112: LD_VAR 0 1
31116: PUSH
31117: LD_VAR 0 3
31121: IN
31122: ST_TO_ADDR
// end ;
31123: LD_VAR 0 3
31127: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31128: LD_INT 0
31130: PPUSH
// if not chassis or not weapon then
31131: LD_VAR 0 1
31135: NOT
31136: IFTRUE 31145
31138: PUSH
31139: LD_VAR 0 2
31143: NOT
31144: OR
31145: IFFALSE 31149
// exit ;
31147: GO 32243
// case weapon of us_machine_gun :
31149: LD_VAR 0 2
31153: PUSH
31154: LD_INT 2
31156: DOUBLE
31157: EQUAL
31158: IFTRUE 31162
31160: GO 31192
31162: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31163: LD_ADDR_VAR 0 3
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 3
31176: PUSH
31177: LD_INT 4
31179: PUSH
31180: LD_INT 5
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: ST_TO_ADDR
31190: GO 32227
31192: LD_INT 3
31194: DOUBLE
31195: EQUAL
31196: IFTRUE 31200
31198: GO 31230
31200: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31201: LD_ADDR_VAR 0 3
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: LD_INT 3
31214: PUSH
31215: LD_INT 4
31217: PUSH
31218: LD_INT 5
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: ST_TO_ADDR
31228: GO 32227
31230: LD_INT 11
31232: DOUBLE
31233: EQUAL
31234: IFTRUE 31238
31236: GO 31268
31238: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31239: LD_ADDR_VAR 0 3
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: LD_INT 3
31252: PUSH
31253: LD_INT 4
31255: PUSH
31256: LD_INT 5
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: ST_TO_ADDR
31266: GO 32227
31268: LD_INT 4
31270: DOUBLE
31271: EQUAL
31272: IFTRUE 31276
31274: GO 31302
31276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31277: LD_ADDR_VAR 0 3
31281: PUSH
31282: LD_INT 2
31284: PUSH
31285: LD_INT 3
31287: PUSH
31288: LD_INT 4
31290: PUSH
31291: LD_INT 5
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: ST_TO_ADDR
31300: GO 32227
31302: LD_INT 5
31304: DOUBLE
31305: EQUAL
31306: IFTRUE 31310
31308: GO 31336
31310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31311: LD_ADDR_VAR 0 3
31315: PUSH
31316: LD_INT 2
31318: PUSH
31319: LD_INT 3
31321: PUSH
31322: LD_INT 4
31324: PUSH
31325: LD_INT 5
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: ST_TO_ADDR
31334: GO 32227
31336: LD_INT 9
31338: DOUBLE
31339: EQUAL
31340: IFTRUE 31344
31342: GO 31370
31344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31345: LD_ADDR_VAR 0 3
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: LD_INT 3
31355: PUSH
31356: LD_INT 4
31358: PUSH
31359: LD_INT 5
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: ST_TO_ADDR
31368: GO 32227
31370: LD_INT 7
31372: DOUBLE
31373: EQUAL
31374: IFTRUE 31378
31376: GO 31404
31378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31379: LD_ADDR_VAR 0 3
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: LD_INT 3
31389: PUSH
31390: LD_INT 4
31392: PUSH
31393: LD_INT 5
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: ST_TO_ADDR
31402: GO 32227
31404: LD_INT 12
31406: DOUBLE
31407: EQUAL
31408: IFTRUE 31412
31410: GO 31438
31412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31413: LD_ADDR_VAR 0 3
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: LD_INT 3
31423: PUSH
31424: LD_INT 4
31426: PUSH
31427: LD_INT 5
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: ST_TO_ADDR
31436: GO 32227
31438: LD_INT 13
31440: DOUBLE
31441: EQUAL
31442: IFTRUE 31446
31444: GO 31472
31446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31447: LD_ADDR_VAR 0 3
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: LD_INT 3
31457: PUSH
31458: LD_INT 4
31460: PUSH
31461: LD_INT 5
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: ST_TO_ADDR
31470: GO 32227
31472: LD_INT 14
31474: DOUBLE
31475: EQUAL
31476: IFTRUE 31480
31478: GO 31498
31480: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31481: LD_ADDR_VAR 0 3
31485: PUSH
31486: LD_INT 4
31488: PUSH
31489: LD_INT 5
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: ST_TO_ADDR
31496: GO 32227
31498: LD_INT 6
31500: DOUBLE
31501: EQUAL
31502: IFTRUE 31506
31504: GO 31524
31506: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31507: LD_ADDR_VAR 0 3
31511: PUSH
31512: LD_INT 4
31514: PUSH
31515: LD_INT 5
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: ST_TO_ADDR
31522: GO 32227
31524: LD_INT 10
31526: DOUBLE
31527: EQUAL
31528: IFTRUE 31532
31530: GO 31550
31532: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31533: LD_ADDR_VAR 0 3
31537: PUSH
31538: LD_INT 4
31540: PUSH
31541: LD_INT 5
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: ST_TO_ADDR
31548: GO 32227
31550: LD_INT 22
31552: DOUBLE
31553: EQUAL
31554: IFTRUE 31558
31556: GO 31584
31558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31559: LD_ADDR_VAR 0 3
31563: PUSH
31564: LD_INT 11
31566: PUSH
31567: LD_INT 12
31569: PUSH
31570: LD_INT 13
31572: PUSH
31573: LD_INT 14
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: ST_TO_ADDR
31582: GO 32227
31584: LD_INT 23
31586: DOUBLE
31587: EQUAL
31588: IFTRUE 31592
31590: GO 31618
31592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31593: LD_ADDR_VAR 0 3
31597: PUSH
31598: LD_INT 11
31600: PUSH
31601: LD_INT 12
31603: PUSH
31604: LD_INT 13
31606: PUSH
31607: LD_INT 14
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: ST_TO_ADDR
31616: GO 32227
31618: LD_INT 24
31620: DOUBLE
31621: EQUAL
31622: IFTRUE 31626
31624: GO 31652
31626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31627: LD_ADDR_VAR 0 3
31631: PUSH
31632: LD_INT 11
31634: PUSH
31635: LD_INT 12
31637: PUSH
31638: LD_INT 13
31640: PUSH
31641: LD_INT 14
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: ST_TO_ADDR
31650: GO 32227
31652: LD_INT 30
31654: DOUBLE
31655: EQUAL
31656: IFTRUE 31660
31658: GO 31686
31660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31661: LD_ADDR_VAR 0 3
31665: PUSH
31666: LD_INT 11
31668: PUSH
31669: LD_INT 12
31671: PUSH
31672: LD_INT 13
31674: PUSH
31675: LD_INT 14
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: ST_TO_ADDR
31684: GO 32227
31686: LD_INT 25
31688: DOUBLE
31689: EQUAL
31690: IFTRUE 31694
31692: GO 31712
31694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31695: LD_ADDR_VAR 0 3
31699: PUSH
31700: LD_INT 13
31702: PUSH
31703: LD_INT 14
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: ST_TO_ADDR
31710: GO 32227
31712: LD_INT 27
31714: DOUBLE
31715: EQUAL
31716: IFTRUE 31720
31718: GO 31738
31720: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31721: LD_ADDR_VAR 0 3
31725: PUSH
31726: LD_INT 13
31728: PUSH
31729: LD_INT 14
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: ST_TO_ADDR
31736: GO 32227
31738: LD_INT 92
31740: DOUBLE
31741: EQUAL
31742: IFTRUE 31746
31744: GO 31772
31746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31747: LD_ADDR_VAR 0 3
31751: PUSH
31752: LD_INT 11
31754: PUSH
31755: LD_INT 12
31757: PUSH
31758: LD_INT 13
31760: PUSH
31761: LD_INT 14
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: ST_TO_ADDR
31770: GO 32227
31772: LD_INT 28
31774: DOUBLE
31775: EQUAL
31776: IFTRUE 31780
31778: GO 31798
31780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31781: LD_ADDR_VAR 0 3
31785: PUSH
31786: LD_INT 13
31788: PUSH
31789: LD_INT 14
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: ST_TO_ADDR
31796: GO 32227
31798: LD_INT 29
31800: DOUBLE
31801: EQUAL
31802: IFTRUE 31806
31804: GO 31824
31806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31807: LD_ADDR_VAR 0 3
31811: PUSH
31812: LD_INT 13
31814: PUSH
31815: LD_INT 14
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: ST_TO_ADDR
31822: GO 32227
31824: LD_INT 31
31826: DOUBLE
31827: EQUAL
31828: IFTRUE 31832
31830: GO 31850
31832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31833: LD_ADDR_VAR 0 3
31837: PUSH
31838: LD_INT 13
31840: PUSH
31841: LD_INT 14
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: ST_TO_ADDR
31848: GO 32227
31850: LD_INT 26
31852: DOUBLE
31853: EQUAL
31854: IFTRUE 31858
31856: GO 31876
31858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31859: LD_ADDR_VAR 0 3
31863: PUSH
31864: LD_INT 13
31866: PUSH
31867: LD_INT 14
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: ST_TO_ADDR
31874: GO 32227
31876: LD_INT 42
31878: DOUBLE
31879: EQUAL
31880: IFTRUE 31884
31882: GO 31910
31884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31885: LD_ADDR_VAR 0 3
31889: PUSH
31890: LD_INT 21
31892: PUSH
31893: LD_INT 22
31895: PUSH
31896: LD_INT 23
31898: PUSH
31899: LD_INT 24
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: ST_TO_ADDR
31908: GO 32227
31910: LD_INT 43
31912: DOUBLE
31913: EQUAL
31914: IFTRUE 31918
31916: GO 31944
31918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31919: LD_ADDR_VAR 0 3
31923: PUSH
31924: LD_INT 21
31926: PUSH
31927: LD_INT 22
31929: PUSH
31930: LD_INT 23
31932: PUSH
31933: LD_INT 24
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: ST_TO_ADDR
31942: GO 32227
31944: LD_INT 44
31946: DOUBLE
31947: EQUAL
31948: IFTRUE 31952
31950: GO 31978
31952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31953: LD_ADDR_VAR 0 3
31957: PUSH
31958: LD_INT 21
31960: PUSH
31961: LD_INT 22
31963: PUSH
31964: LD_INT 23
31966: PUSH
31967: LD_INT 24
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: ST_TO_ADDR
31976: GO 32227
31978: LD_INT 45
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 31986
31984: GO 32012
31986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: LD_INT 21
31994: PUSH
31995: LD_INT 22
31997: PUSH
31998: LD_INT 23
32000: PUSH
32001: LD_INT 24
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: ST_TO_ADDR
32010: GO 32227
32012: LD_INT 49
32014: DOUBLE
32015: EQUAL
32016: IFTRUE 32020
32018: GO 32046
32020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32021: LD_ADDR_VAR 0 3
32025: PUSH
32026: LD_INT 21
32028: PUSH
32029: LD_INT 22
32031: PUSH
32032: LD_INT 23
32034: PUSH
32035: LD_INT 24
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: ST_TO_ADDR
32044: GO 32227
32046: LD_INT 51
32048: DOUBLE
32049: EQUAL
32050: IFTRUE 32054
32052: GO 32080
32054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32055: LD_ADDR_VAR 0 3
32059: PUSH
32060: LD_INT 21
32062: PUSH
32063: LD_INT 22
32065: PUSH
32066: LD_INT 23
32068: PUSH
32069: LD_INT 24
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: ST_TO_ADDR
32078: GO 32227
32080: LD_INT 52
32082: DOUBLE
32083: EQUAL
32084: IFTRUE 32088
32086: GO 32114
32088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32089: LD_ADDR_VAR 0 3
32093: PUSH
32094: LD_INT 21
32096: PUSH
32097: LD_INT 22
32099: PUSH
32100: LD_INT 23
32102: PUSH
32103: LD_INT 24
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: ST_TO_ADDR
32112: GO 32227
32114: LD_INT 53
32116: DOUBLE
32117: EQUAL
32118: IFTRUE 32122
32120: GO 32140
32122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32123: LD_ADDR_VAR 0 3
32127: PUSH
32128: LD_INT 23
32130: PUSH
32131: LD_INT 24
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: ST_TO_ADDR
32138: GO 32227
32140: LD_INT 46
32142: DOUBLE
32143: EQUAL
32144: IFTRUE 32148
32146: GO 32166
32148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: LD_INT 23
32156: PUSH
32157: LD_INT 24
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: ST_TO_ADDR
32164: GO 32227
32166: LD_INT 47
32168: DOUBLE
32169: EQUAL
32170: IFTRUE 32174
32172: GO 32192
32174: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
32175: LD_ADDR_VAR 0 3
32179: PUSH
32180: LD_INT 23
32182: PUSH
32183: LD_INT 24
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: ST_TO_ADDR
32190: GO 32227
32192: LD_INT 98
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32226
32200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32201: LD_ADDR_VAR 0 3
32205: PUSH
32206: LD_INT 21
32208: PUSH
32209: LD_INT 22
32211: PUSH
32212: LD_INT 23
32214: PUSH
32215: LD_INT 24
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: ST_TO_ADDR
32224: GO 32227
32226: POP
// result := ( chassis in result ) ;
32227: LD_ADDR_VAR 0 3
32231: PUSH
32232: LD_VAR 0 1
32236: PUSH
32237: LD_VAR 0 3
32241: IN
32242: ST_TO_ADDR
// end ;
32243: LD_VAR 0 3
32247: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32248: LD_INT 0
32250: PPUSH
32251: PPUSH
32252: PPUSH
32253: PPUSH
32254: PPUSH
32255: PPUSH
32256: PPUSH
// result := array ;
32257: LD_ADDR_VAR 0 5
32261: PUSH
32262: LD_VAR 0 1
32266: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32267: LD_VAR 0 1
32271: NOT
32272: IFTRUE 32281
32274: PUSH
32275: LD_VAR 0 2
32279: NOT
32280: OR
32281: IFTRUE 32290
32283: PUSH
32284: LD_VAR 0 3
32288: NOT
32289: OR
32290: IFTRUE 32304
32292: PUSH
32293: LD_VAR 0 2
32297: PUSH
32298: LD_VAR 0 1
32302: GREATER
32303: OR
32304: IFTRUE 32318
32306: PUSH
32307: LD_VAR 0 3
32311: PUSH
32312: LD_VAR 0 1
32316: GREATER
32317: OR
32318: IFFALSE 32322
// exit ;
32320: GO 32618
// if direction then
32322: LD_VAR 0 4
32326: IFFALSE 32390
// begin d := 1 ;
32328: LD_ADDR_VAR 0 9
32332: PUSH
32333: LD_INT 1
32335: ST_TO_ADDR
// if i_from > i_to then
32336: LD_VAR 0 2
32340: PUSH
32341: LD_VAR 0 3
32345: GREATER
32346: IFFALSE 32372
// length := ( array - i_from ) + i_to else
32348: LD_ADDR_VAR 0 11
32352: PUSH
32353: LD_VAR 0 1
32357: PUSH
32358: LD_VAR 0 2
32362: MINUS
32363: PUSH
32364: LD_VAR 0 3
32368: PLUS
32369: ST_TO_ADDR
32370: GO 32388
// length := i_to - i_from ;
32372: LD_ADDR_VAR 0 11
32376: PUSH
32377: LD_VAR 0 3
32381: PUSH
32382: LD_VAR 0 2
32386: MINUS
32387: ST_TO_ADDR
// end else
32388: GO 32451
// begin d := - 1 ;
32390: LD_ADDR_VAR 0 9
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: ST_TO_ADDR
// if i_from > i_to then
32399: LD_VAR 0 2
32403: PUSH
32404: LD_VAR 0 3
32408: GREATER
32409: IFFALSE 32429
// length := i_from - i_to else
32411: LD_ADDR_VAR 0 11
32415: PUSH
32416: LD_VAR 0 2
32420: PUSH
32421: LD_VAR 0 3
32425: MINUS
32426: ST_TO_ADDR
32427: GO 32451
// length := ( array - i_to ) + i_from ;
32429: LD_ADDR_VAR 0 11
32433: PUSH
32434: LD_VAR 0 1
32438: PUSH
32439: LD_VAR 0 3
32443: MINUS
32444: PUSH
32445: LD_VAR 0 2
32449: PLUS
32450: ST_TO_ADDR
// end ; if not length then
32451: LD_VAR 0 11
32455: NOT
32456: IFFALSE 32460
// exit ;
32458: GO 32618
// tmp := array ;
32460: LD_ADDR_VAR 0 10
32464: PUSH
32465: LD_VAR 0 1
32469: ST_TO_ADDR
// for i = 1 to length do
32470: LD_ADDR_VAR 0 6
32474: PUSH
32475: DOUBLE
32476: LD_INT 1
32478: DEC
32479: ST_TO_ADDR
32480: LD_VAR 0 11
32484: PUSH
32485: FOR_TO
32486: IFFALSE 32606
// begin for j = 1 to array do
32488: LD_ADDR_VAR 0 7
32492: PUSH
32493: DOUBLE
32494: LD_INT 1
32496: DEC
32497: ST_TO_ADDR
32498: LD_VAR 0 1
32502: PUSH
32503: FOR_TO
32504: IFFALSE 32592
// begin k := j + d ;
32506: LD_ADDR_VAR 0 8
32510: PUSH
32511: LD_VAR 0 7
32515: PUSH
32516: LD_VAR 0 9
32520: PLUS
32521: ST_TO_ADDR
// if k > array then
32522: LD_VAR 0 8
32526: PUSH
32527: LD_VAR 0 1
32531: GREATER
32532: IFFALSE 32542
// k := 1 ;
32534: LD_ADDR_VAR 0 8
32538: PUSH
32539: LD_INT 1
32541: ST_TO_ADDR
// if not k then
32542: LD_VAR 0 8
32546: NOT
32547: IFFALSE 32559
// k := array ;
32549: LD_ADDR_VAR 0 8
32553: PUSH
32554: LD_VAR 0 1
32558: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32559: LD_ADDR_VAR 0 10
32563: PUSH
32564: LD_VAR 0 10
32568: PPUSH
32569: LD_VAR 0 8
32573: PPUSH
32574: LD_VAR 0 1
32578: PUSH
32579: LD_VAR 0 7
32583: ARRAY
32584: PPUSH
32585: CALL_OW 1
32589: ST_TO_ADDR
// end ;
32590: GO 32503
32592: POP
32593: POP
// array := tmp ;
32594: LD_ADDR_VAR 0 1
32598: PUSH
32599: LD_VAR 0 10
32603: ST_TO_ADDR
// end ;
32604: GO 32485
32606: POP
32607: POP
// result := array ;
32608: LD_ADDR_VAR 0 5
32612: PUSH
32613: LD_VAR 0 1
32617: ST_TO_ADDR
// end ;
32618: LD_VAR 0 5
32622: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32623: LD_INT 0
32625: PPUSH
32626: PPUSH
// result := 0 ;
32627: LD_ADDR_VAR 0 3
32631: PUSH
32632: LD_INT 0
32634: ST_TO_ADDR
// if not array or not value in array then
32635: LD_VAR 0 1
32639: NOT
32640: IFTRUE 32655
32642: PUSH
32643: LD_VAR 0 2
32647: PUSH
32648: LD_VAR 0 1
32652: IN
32653: NOT
32654: OR
32655: IFFALSE 32659
// exit ;
32657: GO 32713
// for i = 1 to array do
32659: LD_ADDR_VAR 0 4
32663: PUSH
32664: DOUBLE
32665: LD_INT 1
32667: DEC
32668: ST_TO_ADDR
32669: LD_VAR 0 1
32673: PUSH
32674: FOR_TO
32675: IFFALSE 32711
// if value = array [ i ] then
32677: LD_VAR 0 2
32681: PUSH
32682: LD_VAR 0 1
32686: PUSH
32687: LD_VAR 0 4
32691: ARRAY
32692: EQUAL
32693: IFFALSE 32709
// begin result := i ;
32695: LD_ADDR_VAR 0 3
32699: PUSH
32700: LD_VAR 0 4
32704: ST_TO_ADDR
// exit ;
32705: POP
32706: POP
32707: GO 32713
// end ;
32709: GO 32674
32711: POP
32712: POP
// end ;
32713: LD_VAR 0 3
32717: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32718: LD_INT 0
32720: PPUSH
// vc_chassis := chassis ;
32721: LD_ADDR_OWVAR 37
32725: PUSH
32726: LD_VAR 0 1
32730: ST_TO_ADDR
// vc_engine := engine ;
32731: LD_ADDR_OWVAR 39
32735: PUSH
32736: LD_VAR 0 2
32740: ST_TO_ADDR
// vc_control := control ;
32741: LD_ADDR_OWVAR 38
32745: PUSH
32746: LD_VAR 0 3
32750: ST_TO_ADDR
// vc_weapon := weapon ;
32751: LD_ADDR_OWVAR 40
32755: PUSH
32756: LD_VAR 0 4
32760: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32761: LD_ADDR_OWVAR 41
32765: PUSH
32766: LD_VAR 0 5
32770: ST_TO_ADDR
// end ;
32771: LD_VAR 0 6
32775: RET
// export function WantPlant ( unit ) ; var task ; begin
32776: LD_INT 0
32778: PPUSH
32779: PPUSH
// result := false ;
32780: LD_ADDR_VAR 0 2
32784: PUSH
32785: LD_INT 0
32787: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32788: LD_ADDR_VAR 0 3
32792: PUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 437
32802: ST_TO_ADDR
// if task then
32803: LD_VAR 0 3
32807: IFFALSE 32835
// if task [ 1 ] [ 1 ] = p then
32809: LD_VAR 0 3
32813: PUSH
32814: LD_INT 1
32816: ARRAY
32817: PUSH
32818: LD_INT 1
32820: ARRAY
32821: PUSH
32822: LD_STRING p
32824: EQUAL
32825: IFFALSE 32835
// result := true ;
32827: LD_ADDR_VAR 0 2
32831: PUSH
32832: LD_INT 1
32834: ST_TO_ADDR
// end ;
32835: LD_VAR 0 2
32839: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32840: LD_INT 0
32842: PPUSH
32843: PPUSH
32844: PPUSH
32845: PPUSH
// if pos < 1 then
32846: LD_VAR 0 2
32850: PUSH
32851: LD_INT 1
32853: LESS
32854: IFFALSE 32858
// exit ;
32856: GO 33161
// if pos = 1 then
32858: LD_VAR 0 2
32862: PUSH
32863: LD_INT 1
32865: EQUAL
32866: IFFALSE 32899
// result := Replace ( arr , pos [ 1 ] , value ) else
32868: LD_ADDR_VAR 0 4
32872: PUSH
32873: LD_VAR 0 1
32877: PPUSH
32878: LD_VAR 0 2
32882: PUSH
32883: LD_INT 1
32885: ARRAY
32886: PPUSH
32887: LD_VAR 0 3
32891: PPUSH
32892: CALL_OW 1
32896: ST_TO_ADDR
32897: GO 33161
// begin tmp := arr ;
32899: LD_ADDR_VAR 0 6
32903: PUSH
32904: LD_VAR 0 1
32908: ST_TO_ADDR
// s_arr := [ tmp ] ;
32909: LD_ADDR_VAR 0 7
32913: PUSH
32914: LD_VAR 0 6
32918: PUSH
32919: EMPTY
32920: LIST
32921: ST_TO_ADDR
// for i = 1 to pos - 1 do
32922: LD_ADDR_VAR 0 5
32926: PUSH
32927: DOUBLE
32928: LD_INT 1
32930: DEC
32931: ST_TO_ADDR
32932: LD_VAR 0 2
32936: PUSH
32937: LD_INT 1
32939: MINUS
32940: PUSH
32941: FOR_TO
32942: IFFALSE 32987
// begin tmp := tmp [ pos [ i ] ] ;
32944: LD_ADDR_VAR 0 6
32948: PUSH
32949: LD_VAR 0 6
32953: PUSH
32954: LD_VAR 0 2
32958: PUSH
32959: LD_VAR 0 5
32963: ARRAY
32964: ARRAY
32965: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32966: LD_ADDR_VAR 0 7
32970: PUSH
32971: LD_VAR 0 7
32975: PUSH
32976: LD_VAR 0 6
32980: PUSH
32981: EMPTY
32982: LIST
32983: ADD
32984: ST_TO_ADDR
// end ;
32985: GO 32941
32987: POP
32988: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32989: LD_ADDR_VAR 0 6
32993: PUSH
32994: LD_VAR 0 6
32998: PPUSH
32999: LD_VAR 0 2
33003: PUSH
33004: LD_VAR 0 2
33008: ARRAY
33009: PPUSH
33010: LD_VAR 0 3
33014: PPUSH
33015: CALL_OW 1
33019: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33020: LD_ADDR_VAR 0 7
33024: PUSH
33025: LD_VAR 0 7
33029: PPUSH
33030: LD_VAR 0 7
33034: PPUSH
33035: LD_VAR 0 6
33039: PPUSH
33040: CALL_OW 1
33044: ST_TO_ADDR
// for i = s_arr downto 2 do
33045: LD_ADDR_VAR 0 5
33049: PUSH
33050: DOUBLE
33051: LD_VAR 0 7
33055: INC
33056: ST_TO_ADDR
33057: LD_INT 2
33059: PUSH
33060: FOR_DOWNTO
33061: IFFALSE 33145
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33063: LD_ADDR_VAR 0 6
33067: PUSH
33068: LD_VAR 0 7
33072: PUSH
33073: LD_VAR 0 5
33077: PUSH
33078: LD_INT 1
33080: MINUS
33081: ARRAY
33082: PPUSH
33083: LD_VAR 0 2
33087: PUSH
33088: LD_VAR 0 5
33092: PUSH
33093: LD_INT 1
33095: MINUS
33096: ARRAY
33097: PPUSH
33098: LD_VAR 0 7
33102: PUSH
33103: LD_VAR 0 5
33107: ARRAY
33108: PPUSH
33109: CALL_OW 1
33113: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33114: LD_ADDR_VAR 0 7
33118: PUSH
33119: LD_VAR 0 7
33123: PPUSH
33124: LD_VAR 0 5
33128: PUSH
33129: LD_INT 1
33131: MINUS
33132: PPUSH
33133: LD_VAR 0 6
33137: PPUSH
33138: CALL_OW 1
33142: ST_TO_ADDR
// end ;
33143: GO 33060
33145: POP
33146: POP
// result := s_arr [ 1 ] ;
33147: LD_ADDR_VAR 0 4
33151: PUSH
33152: LD_VAR 0 7
33156: PUSH
33157: LD_INT 1
33159: ARRAY
33160: ST_TO_ADDR
// end ; end ;
33161: LD_VAR 0 4
33165: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33166: LD_INT 0
33168: PPUSH
33169: PPUSH
// if not list then
33170: LD_VAR 0 1
33174: NOT
33175: IFFALSE 33179
// exit ;
33177: GO 33270
// i := list [ pos1 ] ;
33179: LD_ADDR_VAR 0 5
33183: PUSH
33184: LD_VAR 0 1
33188: PUSH
33189: LD_VAR 0 2
33193: ARRAY
33194: ST_TO_ADDR
// if not i then
33195: LD_VAR 0 5
33199: NOT
33200: IFFALSE 33204
// exit ;
33202: GO 33270
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33204: LD_ADDR_VAR 0 1
33208: PUSH
33209: LD_VAR 0 1
33213: PPUSH
33214: LD_VAR 0 2
33218: PPUSH
33219: LD_VAR 0 1
33223: PUSH
33224: LD_VAR 0 3
33228: ARRAY
33229: PPUSH
33230: CALL_OW 1
33234: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33235: LD_ADDR_VAR 0 1
33239: PUSH
33240: LD_VAR 0 1
33244: PPUSH
33245: LD_VAR 0 3
33249: PPUSH
33250: LD_VAR 0 5
33254: PPUSH
33255: CALL_OW 1
33259: ST_TO_ADDR
// result := list ;
33260: LD_ADDR_VAR 0 4
33264: PUSH
33265: LD_VAR 0 1
33269: ST_TO_ADDR
// end ;
33270: LD_VAR 0 4
33274: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33275: LD_INT 0
33277: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33278: LD_ADDR_VAR 0 5
33282: PUSH
33283: LD_VAR 0 1
33287: PPUSH
33288: CALL_OW 250
33292: PPUSH
33293: LD_VAR 0 1
33297: PPUSH
33298: CALL_OW 251
33302: PPUSH
33303: LD_VAR 0 2
33307: PPUSH
33308: LD_VAR 0 3
33312: PPUSH
33313: LD_VAR 0 4
33317: PPUSH
33318: CALL 33700 0 5
33322: ST_TO_ADDR
// end ;
33323: LD_VAR 0 5
33327: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33328: LD_INT 0
33330: PPUSH
33331: PPUSH
33332: PPUSH
33333: PPUSH
// if not list or not unit then
33334: LD_VAR 0 2
33338: NOT
33339: IFTRUE 33348
33341: PUSH
33342: LD_VAR 0 1
33346: NOT
33347: OR
33348: IFFALSE 33352
// exit ;
33350: GO 33695
// result := [ ] ;
33352: LD_ADDR_VAR 0 5
33356: PUSH
33357: EMPTY
33358: ST_TO_ADDR
// for i in list do
33359: LD_ADDR_VAR 0 6
33363: PUSH
33364: LD_VAR 0 2
33368: PUSH
33369: FOR_IN
33370: IFFALSE 33588
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33372: LD_ADDR_VAR 0 8
33376: PUSH
33377: LD_VAR 0 1
33381: PPUSH
33382: LD_VAR 0 6
33386: PUSH
33387: LD_INT 1
33389: ARRAY
33390: PPUSH
33391: LD_VAR 0 6
33395: PUSH
33396: LD_INT 2
33398: ARRAY
33399: PPUSH
33400: CALL_OW 297
33404: ST_TO_ADDR
// if not Count ( result ) then
33405: LD_VAR 0 5
33409: PPUSH
33410: CALL 29922 0 1
33414: NOT
33415: IFFALSE 33448
// begin result := Join ( result , [ i , tmp ] ) ;
33417: LD_ADDR_VAR 0 5
33421: PUSH
33422: LD_VAR 0 5
33426: PPUSH
33427: LD_VAR 0 6
33431: PUSH
33432: LD_VAR 0 8
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PPUSH
33441: CALL 65898 0 2
33445: ST_TO_ADDR
// continue ;
33446: GO 33369
// end ; if result [ result ] [ 2 ] <= tmp then
33448: LD_VAR 0 5
33452: PUSH
33453: LD_VAR 0 5
33457: ARRAY
33458: PUSH
33459: LD_INT 2
33461: ARRAY
33462: PUSH
33463: LD_VAR 0 8
33467: LESSEQUAL
33468: IFFALSE 33501
// result := Join ( result , [ i , tmp ] ) else
33470: LD_ADDR_VAR 0 5
33474: PUSH
33475: LD_VAR 0 5
33479: PPUSH
33480: LD_VAR 0 6
33484: PUSH
33485: LD_VAR 0 8
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PPUSH
33494: CALL 65898 0 2
33498: ST_TO_ADDR
33499: GO 33586
// begin for j := 1 to Count ( result ) do
33501: LD_ADDR_VAR 0 7
33505: PUSH
33506: DOUBLE
33507: LD_INT 1
33509: DEC
33510: ST_TO_ADDR
33511: LD_VAR 0 5
33515: PPUSH
33516: CALL 29922 0 1
33520: PUSH
33521: FOR_TO
33522: IFFALSE 33584
// begin if tmp < result [ j ] [ 2 ] then
33524: LD_VAR 0 8
33528: PUSH
33529: LD_VAR 0 5
33533: PUSH
33534: LD_VAR 0 7
33538: ARRAY
33539: PUSH
33540: LD_INT 2
33542: ARRAY
33543: LESS
33544: IFFALSE 33582
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33546: LD_ADDR_VAR 0 5
33550: PUSH
33551: LD_VAR 0 5
33555: PPUSH
33556: LD_VAR 0 7
33560: PPUSH
33561: LD_VAR 0 6
33565: PUSH
33566: LD_VAR 0 8
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PPUSH
33575: CALL_OW 2
33579: ST_TO_ADDR
// break ;
33580: GO 33584
// end ; end ;
33582: GO 33521
33584: POP
33585: POP
// end ; end ;
33586: GO 33369
33588: POP
33589: POP
// if result and not asc then
33590: LD_VAR 0 5
33594: IFFALSE 33603
33596: PUSH
33597: LD_VAR 0 3
33601: NOT
33602: AND
33603: IFFALSE 33620
// result := ReverseArray ( result ) ;
33605: LD_ADDR_VAR 0 5
33609: PUSH
33610: LD_VAR 0 5
33614: PPUSH
33615: CALL 60978 0 1
33619: ST_TO_ADDR
// tmp := [ ] ;
33620: LD_ADDR_VAR 0 8
33624: PUSH
33625: EMPTY
33626: ST_TO_ADDR
// if mode then
33627: LD_VAR 0 4
33631: IFFALSE 33695
// begin for i := 1 to result do
33633: LD_ADDR_VAR 0 6
33637: PUSH
33638: DOUBLE
33639: LD_INT 1
33641: DEC
33642: ST_TO_ADDR
33643: LD_VAR 0 5
33647: PUSH
33648: FOR_TO
33649: IFFALSE 33683
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33651: LD_ADDR_VAR 0 8
33655: PUSH
33656: LD_VAR 0 8
33660: PPUSH
33661: LD_VAR 0 5
33665: PUSH
33666: LD_VAR 0 6
33670: ARRAY
33671: PUSH
33672: LD_INT 1
33674: ARRAY
33675: PPUSH
33676: CALL 65898 0 2
33680: ST_TO_ADDR
33681: GO 33648
33683: POP
33684: POP
// result := tmp ;
33685: LD_ADDR_VAR 0 5
33689: PUSH
33690: LD_VAR 0 8
33694: ST_TO_ADDR
// end ; end ;
33695: LD_VAR 0 5
33699: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33700: LD_INT 0
33702: PPUSH
33703: PPUSH
33704: PPUSH
33705: PPUSH
// if not list then
33706: LD_VAR 0 3
33710: NOT
33711: IFFALSE 33715
// exit ;
33713: GO 34105
// result := [ ] ;
33715: LD_ADDR_VAR 0 6
33719: PUSH
33720: EMPTY
33721: ST_TO_ADDR
// for i in list do
33722: LD_ADDR_VAR 0 7
33726: PUSH
33727: LD_VAR 0 3
33731: PUSH
33732: FOR_IN
33733: IFFALSE 33935
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33735: LD_ADDR_VAR 0 9
33739: PUSH
33740: LD_VAR 0 7
33744: PPUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: LD_VAR 0 2
33754: PPUSH
33755: CALL_OW 297
33759: ST_TO_ADDR
// if not result then
33760: LD_VAR 0 6
33764: NOT
33765: IFFALSE 33791
// result := [ [ i , tmp ] ] else
33767: LD_ADDR_VAR 0 6
33771: PUSH
33772: LD_VAR 0 7
33776: PUSH
33777: LD_VAR 0 9
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: EMPTY
33787: LIST
33788: ST_TO_ADDR
33789: GO 33933
// begin if result [ result ] [ 2 ] <= tmp then
33791: LD_VAR 0 6
33795: PUSH
33796: LD_VAR 0 6
33800: ARRAY
33801: PUSH
33802: LD_INT 2
33804: ARRAY
33805: PUSH
33806: LD_VAR 0 9
33810: LESSEQUAL
33811: IFFALSE 33853
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33813: LD_ADDR_VAR 0 6
33817: PUSH
33818: LD_VAR 0 6
33822: PPUSH
33823: LD_VAR 0 6
33827: PUSH
33828: LD_INT 1
33830: PLUS
33831: PPUSH
33832: LD_VAR 0 7
33836: PUSH
33837: LD_VAR 0 9
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PPUSH
33846: CALL_OW 2
33850: ST_TO_ADDR
33851: GO 33933
// for j := 1 to result do
33853: LD_ADDR_VAR 0 8
33857: PUSH
33858: DOUBLE
33859: LD_INT 1
33861: DEC
33862: ST_TO_ADDR
33863: LD_VAR 0 6
33867: PUSH
33868: FOR_TO
33869: IFFALSE 33931
// begin if tmp < result [ j ] [ 2 ] then
33871: LD_VAR 0 9
33875: PUSH
33876: LD_VAR 0 6
33880: PUSH
33881: LD_VAR 0 8
33885: ARRAY
33886: PUSH
33887: LD_INT 2
33889: ARRAY
33890: LESS
33891: IFFALSE 33929
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33893: LD_ADDR_VAR 0 6
33897: PUSH
33898: LD_VAR 0 6
33902: PPUSH
33903: LD_VAR 0 8
33907: PPUSH
33908: LD_VAR 0 7
33912: PUSH
33913: LD_VAR 0 9
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PPUSH
33922: CALL_OW 2
33926: ST_TO_ADDR
// break ;
33927: GO 33931
// end ; end ;
33929: GO 33868
33931: POP
33932: POP
// end ; end ;
33933: GO 33732
33935: POP
33936: POP
// if result and not asc then
33937: LD_VAR 0 6
33941: IFFALSE 33950
33943: PUSH
33944: LD_VAR 0 4
33948: NOT
33949: AND
33950: IFFALSE 34025
// begin tmp := result ;
33952: LD_ADDR_VAR 0 9
33956: PUSH
33957: LD_VAR 0 6
33961: ST_TO_ADDR
// for i = tmp downto 1 do
33962: LD_ADDR_VAR 0 7
33966: PUSH
33967: DOUBLE
33968: LD_VAR 0 9
33972: INC
33973: ST_TO_ADDR
33974: LD_INT 1
33976: PUSH
33977: FOR_DOWNTO
33978: IFFALSE 34023
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33980: LD_ADDR_VAR 0 6
33984: PUSH
33985: LD_VAR 0 6
33989: PPUSH
33990: LD_VAR 0 9
33994: PUSH
33995: LD_VAR 0 7
33999: MINUS
34000: PUSH
34001: LD_INT 1
34003: PLUS
34004: PPUSH
34005: LD_VAR 0 9
34009: PUSH
34010: LD_VAR 0 7
34014: ARRAY
34015: PPUSH
34016: CALL_OW 1
34020: ST_TO_ADDR
34021: GO 33977
34023: POP
34024: POP
// end ; tmp := [ ] ;
34025: LD_ADDR_VAR 0 9
34029: PUSH
34030: EMPTY
34031: ST_TO_ADDR
// if mode then
34032: LD_VAR 0 5
34036: IFFALSE 34105
// begin for i = 1 to result do
34038: LD_ADDR_VAR 0 7
34042: PUSH
34043: DOUBLE
34044: LD_INT 1
34046: DEC
34047: ST_TO_ADDR
34048: LD_VAR 0 6
34052: PUSH
34053: FOR_TO
34054: IFFALSE 34093
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34056: LD_ADDR_VAR 0 9
34060: PUSH
34061: LD_VAR 0 9
34065: PPUSH
34066: LD_VAR 0 7
34070: PPUSH
34071: LD_VAR 0 6
34075: PUSH
34076: LD_VAR 0 7
34080: ARRAY
34081: PUSH
34082: LD_INT 1
34084: ARRAY
34085: PPUSH
34086: CALL_OW 1
34090: ST_TO_ADDR
34091: GO 34053
34093: POP
34094: POP
// result := tmp ;
34095: LD_ADDR_VAR 0 6
34099: PUSH
34100: LD_VAR 0 9
34104: ST_TO_ADDR
// end ; end ;
34105: LD_VAR 0 6
34109: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34110: LD_INT 0
34112: PPUSH
34113: PPUSH
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34118: LD_ADDR_VAR 0 5
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: EMPTY
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: ST_TO_ADDR
// if not x or not y then
34140: LD_VAR 0 2
34144: NOT
34145: IFTRUE 34154
34147: PUSH
34148: LD_VAR 0 3
34152: NOT
34153: OR
34154: IFFALSE 34158
// exit ;
34156: GO 35814
// if not range then
34158: LD_VAR 0 4
34162: NOT
34163: IFFALSE 34173
// range := 10 ;
34165: LD_ADDR_VAR 0 4
34169: PUSH
34170: LD_INT 10
34172: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34173: LD_ADDR_VAR 0 8
34177: PUSH
34178: LD_INT 81
34180: PUSH
34181: LD_VAR 0 1
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 92
34192: PUSH
34193: LD_VAR 0 2
34197: PUSH
34198: LD_VAR 0 3
34202: PUSH
34203: LD_VAR 0 4
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 3
34216: PUSH
34217: LD_INT 21
34219: PUSH
34220: LD_INT 3
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: PPUSH
34236: CALL_OW 69
34240: ST_TO_ADDR
// if not tmp then
34241: LD_VAR 0 8
34245: NOT
34246: IFFALSE 34250
// exit ;
34248: GO 35814
// for i in tmp do
34250: LD_ADDR_VAR 0 6
34254: PUSH
34255: LD_VAR 0 8
34259: PUSH
34260: FOR_IN
34261: IFFALSE 35789
// begin points := [ 0 , 0 , 0 ] ;
34263: LD_ADDR_VAR 0 9
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: ST_TO_ADDR
// bpoints := 1 ;
34282: LD_ADDR_VAR 0 10
34286: PUSH
34287: LD_INT 1
34289: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34290: LD_VAR 0 6
34294: PPUSH
34295: CALL_OW 247
34299: PUSH
34300: LD_INT 1
34302: DOUBLE
34303: EQUAL
34304: IFTRUE 34308
34306: GO 34890
34308: POP
// begin if GetClass ( i ) = 1 then
34309: LD_VAR 0 6
34313: PPUSH
34314: CALL_OW 257
34318: PUSH
34319: LD_INT 1
34321: EQUAL
34322: IFFALSE 34343
// points := [ 10 , 5 , 3 ] ;
34324: LD_ADDR_VAR 0 9
34328: PUSH
34329: LD_INT 10
34331: PUSH
34332: LD_INT 5
34334: PUSH
34335: LD_INT 3
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34343: LD_VAR 0 6
34347: PPUSH
34348: CALL_OW 257
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: LD_INT 3
34358: PUSH
34359: LD_INT 4
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: LIST
34366: IN
34367: IFFALSE 34388
// points := [ 3 , 2 , 1 ] ;
34369: LD_ADDR_VAR 0 9
34373: PUSH
34374: LD_INT 3
34376: PUSH
34377: LD_INT 2
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: LIST
34387: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34388: LD_VAR 0 6
34392: PPUSH
34393: CALL_OW 257
34397: PUSH
34398: LD_INT 5
34400: EQUAL
34401: IFFALSE 34422
// points := [ 130 , 5 , 2 ] ;
34403: LD_ADDR_VAR 0 9
34407: PUSH
34408: LD_INT 130
34410: PUSH
34411: LD_INT 5
34413: PUSH
34414: LD_INT 2
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34422: LD_VAR 0 6
34426: PPUSH
34427: CALL_OW 257
34431: PUSH
34432: LD_INT 8
34434: EQUAL
34435: IFFALSE 34456
// points := [ 35 , 35 , 30 ] ;
34437: LD_ADDR_VAR 0 9
34441: PUSH
34442: LD_INT 35
34444: PUSH
34445: LD_INT 35
34447: PUSH
34448: LD_INT 30
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34456: LD_VAR 0 6
34460: PPUSH
34461: CALL_OW 257
34465: PUSH
34466: LD_INT 9
34468: EQUAL
34469: IFFALSE 34490
// points := [ 20 , 55 , 40 ] ;
34471: LD_ADDR_VAR 0 9
34475: PUSH
34476: LD_INT 20
34478: PUSH
34479: LD_INT 55
34481: PUSH
34482: LD_INT 40
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: LIST
34489: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34490: LD_VAR 0 6
34494: PPUSH
34495: CALL_OW 257
34499: PUSH
34500: LD_INT 12
34502: PUSH
34503: LD_INT 16
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: IN
34510: IFFALSE 34531
// points := [ 5 , 3 , 2 ] ;
34512: LD_ADDR_VAR 0 9
34516: PUSH
34517: LD_INT 5
34519: PUSH
34520: LD_INT 3
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34531: LD_VAR 0 6
34535: PPUSH
34536: CALL_OW 257
34540: PUSH
34541: LD_INT 17
34543: EQUAL
34544: IFFALSE 34565
// points := [ 100 , 50 , 75 ] ;
34546: LD_ADDR_VAR 0 9
34550: PUSH
34551: LD_INT 100
34553: PUSH
34554: LD_INT 50
34556: PUSH
34557: LD_INT 75
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34565: LD_VAR 0 6
34569: PPUSH
34570: CALL_OW 257
34574: PUSH
34575: LD_INT 15
34577: EQUAL
34578: IFFALSE 34599
// points := [ 10 , 5 , 3 ] ;
34580: LD_ADDR_VAR 0 9
34584: PUSH
34585: LD_INT 10
34587: PUSH
34588: LD_INT 5
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34599: LD_VAR 0 6
34603: PPUSH
34604: CALL_OW 257
34608: PUSH
34609: LD_INT 14
34611: EQUAL
34612: IFFALSE 34633
// points := [ 10 , 0 , 0 ] ;
34614: LD_ADDR_VAR 0 9
34618: PUSH
34619: LD_INT 10
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34633: LD_VAR 0 6
34637: PPUSH
34638: CALL_OW 257
34642: PUSH
34643: LD_INT 11
34645: EQUAL
34646: IFFALSE 34667
// points := [ 30 , 10 , 5 ] ;
34648: LD_ADDR_VAR 0 9
34652: PUSH
34653: LD_INT 30
34655: PUSH
34656: LD_INT 10
34658: PUSH
34659: LD_INT 5
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34667: LD_VAR 0 1
34671: PPUSH
34672: LD_INT 5
34674: PPUSH
34675: CALL_OW 321
34679: PUSH
34680: LD_INT 2
34682: EQUAL
34683: IFFALSE 34700
// bpoints := bpoints * 1.8 ;
34685: LD_ADDR_VAR 0 10
34689: PUSH
34690: LD_VAR 0 10
34694: PUSH
34695: LD_REAL  1.80000000000000E+0000
34698: MUL
34699: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34700: LD_VAR 0 6
34704: PPUSH
34705: CALL_OW 257
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: LD_INT 3
34718: PUSH
34719: LD_INT 4
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: IN
34728: IFFALSE 34748
34730: PUSH
34731: LD_VAR 0 1
34735: PPUSH
34736: LD_INT 51
34738: PPUSH
34739: CALL_OW 321
34743: PUSH
34744: LD_INT 2
34746: EQUAL
34747: AND
34748: IFFALSE 34765
// bpoints := bpoints * 1.2 ;
34750: LD_ADDR_VAR 0 10
34754: PUSH
34755: LD_VAR 0 10
34759: PUSH
34760: LD_REAL  1.20000000000000E+0000
34763: MUL
34764: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34765: LD_VAR 0 6
34769: PPUSH
34770: CALL_OW 257
34774: PUSH
34775: LD_INT 5
34777: PUSH
34778: LD_INT 7
34780: PUSH
34781: LD_INT 9
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: IN
34789: IFFALSE 34809
34791: PUSH
34792: LD_VAR 0 1
34796: PPUSH
34797: LD_INT 52
34799: PPUSH
34800: CALL_OW 321
34804: PUSH
34805: LD_INT 2
34807: EQUAL
34808: AND
34809: IFFALSE 34826
// bpoints := bpoints * 1.5 ;
34811: LD_ADDR_VAR 0 10
34815: PUSH
34816: LD_VAR 0 10
34820: PUSH
34821: LD_REAL  1.50000000000000E+0000
34824: MUL
34825: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34826: LD_VAR 0 1
34830: PPUSH
34831: LD_INT 66
34833: PPUSH
34834: CALL_OW 321
34838: PUSH
34839: LD_INT 2
34841: EQUAL
34842: IFFALSE 34859
// bpoints := bpoints * 1.1 ;
34844: LD_ADDR_VAR 0 10
34848: PUSH
34849: LD_VAR 0 10
34853: PUSH
34854: LD_REAL  1.10000000000000E+0000
34857: MUL
34858: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34859: LD_ADDR_VAR 0 10
34863: PUSH
34864: LD_VAR 0 10
34868: PUSH
34869: LD_VAR 0 6
34873: PPUSH
34874: LD_INT 1
34876: PPUSH
34877: CALL_OW 259
34881: PUSH
34882: LD_REAL  1.15000000000000E+0000
34885: MUL
34886: MUL
34887: ST_TO_ADDR
// end ; unit_vehicle :
34888: GO 35718
34890: LD_INT 2
34892: DOUBLE
34893: EQUAL
34894: IFTRUE 34898
34896: GO 35706
34898: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34899: LD_VAR 0 6
34903: PPUSH
34904: CALL_OW 264
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: LD_INT 42
34914: PUSH
34915: LD_INT 24
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: IN
34923: IFFALSE 34944
// points := [ 25 , 5 , 3 ] ;
34925: LD_ADDR_VAR 0 9
34929: PUSH
34930: LD_INT 25
34932: PUSH
34933: LD_INT 5
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: LIST
34943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34944: LD_VAR 0 6
34948: PPUSH
34949: CALL_OW 264
34953: PUSH
34954: LD_INT 4
34956: PUSH
34957: LD_INT 43
34959: PUSH
34960: LD_INT 25
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: IN
34968: IFFALSE 34989
// points := [ 40 , 15 , 5 ] ;
34970: LD_ADDR_VAR 0 9
34974: PUSH
34975: LD_INT 40
34977: PUSH
34978: LD_INT 15
34980: PUSH
34981: LD_INT 5
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: LIST
34988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34989: LD_VAR 0 6
34993: PPUSH
34994: CALL_OW 264
34998: PUSH
34999: LD_INT 3
35001: PUSH
35002: LD_INT 23
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: IN
35009: IFFALSE 35030
// points := [ 7 , 25 , 8 ] ;
35011: LD_ADDR_VAR 0 9
35015: PUSH
35016: LD_INT 7
35018: PUSH
35019: LD_INT 25
35021: PUSH
35022: LD_INT 8
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35030: LD_VAR 0 6
35034: PPUSH
35035: CALL_OW 264
35039: PUSH
35040: LD_INT 5
35042: PUSH
35043: LD_INT 27
35045: PUSH
35046: LD_INT 44
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: LIST
35053: IN
35054: IFFALSE 35075
// points := [ 14 , 50 , 16 ] ;
35056: LD_ADDR_VAR 0 9
35060: PUSH
35061: LD_INT 14
35063: PUSH
35064: LD_INT 50
35066: PUSH
35067: LD_INT 16
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: LIST
35074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35075: LD_VAR 0 6
35079: PPUSH
35080: CALL_OW 264
35084: PUSH
35085: LD_INT 6
35087: PUSH
35088: LD_INT 46
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: IN
35095: IFFALSE 35116
// points := [ 32 , 120 , 70 ] ;
35097: LD_ADDR_VAR 0 9
35101: PUSH
35102: LD_INT 32
35104: PUSH
35105: LD_INT 120
35107: PUSH
35108: LD_INT 70
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35116: LD_VAR 0 6
35120: PPUSH
35121: CALL_OW 264
35125: PUSH
35126: LD_INT 7
35128: PUSH
35129: LD_INT 28
35131: PUSH
35132: LD_INT 45
35134: PUSH
35135: LD_INT 92
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: IN
35144: IFFALSE 35165
// points := [ 35 , 20 , 45 ] ;
35146: LD_ADDR_VAR 0 9
35150: PUSH
35151: LD_INT 35
35153: PUSH
35154: LD_INT 20
35156: PUSH
35157: LD_INT 45
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: LIST
35164: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35165: LD_VAR 0 6
35169: PPUSH
35170: CALL_OW 264
35174: PUSH
35175: LD_INT 47
35177: PUSH
35178: EMPTY
35179: LIST
35180: IN
35181: IFFALSE 35202
// points := [ 67 , 45 , 75 ] ;
35183: LD_ADDR_VAR 0 9
35187: PUSH
35188: LD_INT 67
35190: PUSH
35191: LD_INT 45
35193: PUSH
35194: LD_INT 75
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35202: LD_VAR 0 6
35206: PPUSH
35207: CALL_OW 264
35211: PUSH
35212: LD_INT 26
35214: PUSH
35215: EMPTY
35216: LIST
35217: IN
35218: IFFALSE 35239
// points := [ 120 , 30 , 80 ] ;
35220: LD_ADDR_VAR 0 9
35224: PUSH
35225: LD_INT 120
35227: PUSH
35228: LD_INT 30
35230: PUSH
35231: LD_INT 80
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35239: LD_VAR 0 6
35243: PPUSH
35244: CALL_OW 264
35248: PUSH
35249: LD_INT 22
35251: PUSH
35252: EMPTY
35253: LIST
35254: IN
35255: IFFALSE 35276
// points := [ 40 , 1 , 1 ] ;
35257: LD_ADDR_VAR 0 9
35261: PUSH
35262: LD_INT 40
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35276: LD_VAR 0 6
35280: PPUSH
35281: CALL_OW 264
35285: PUSH
35286: LD_INT 29
35288: PUSH
35289: EMPTY
35290: LIST
35291: IN
35292: IFFALSE 35313
// points := [ 70 , 200 , 400 ] ;
35294: LD_ADDR_VAR 0 9
35298: PUSH
35299: LD_INT 70
35301: PUSH
35302: LD_INT 200
35304: PUSH
35305: LD_INT 400
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35313: LD_VAR 0 6
35317: PPUSH
35318: CALL_OW 264
35322: PUSH
35323: LD_INT 14
35325: PUSH
35326: LD_INT 53
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: IN
35333: IFFALSE 35354
// points := [ 40 , 10 , 20 ] ;
35335: LD_ADDR_VAR 0 9
35339: PUSH
35340: LD_INT 40
35342: PUSH
35343: LD_INT 10
35345: PUSH
35346: LD_INT 20
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35354: LD_VAR 0 6
35358: PPUSH
35359: CALL_OW 264
35363: PUSH
35364: LD_INT 9
35366: PUSH
35367: EMPTY
35368: LIST
35369: IN
35370: IFFALSE 35391
// points := [ 5 , 70 , 20 ] ;
35372: LD_ADDR_VAR 0 9
35376: PUSH
35377: LD_INT 5
35379: PUSH
35380: LD_INT 70
35382: PUSH
35383: LD_INT 20
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: LIST
35390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35391: LD_VAR 0 6
35395: PPUSH
35396: CALL_OW 264
35400: PUSH
35401: LD_INT 10
35403: PUSH
35404: EMPTY
35405: LIST
35406: IN
35407: IFFALSE 35428
// points := [ 35 , 110 , 70 ] ;
35409: LD_ADDR_VAR 0 9
35413: PUSH
35414: LD_INT 35
35416: PUSH
35417: LD_INT 110
35419: PUSH
35420: LD_INT 70
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: LIST
35427: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35428: LD_VAR 0 6
35432: PPUSH
35433: CALL_OW 265
35437: PUSH
35438: LD_INT 25
35440: EQUAL
35441: IFFALSE 35462
// points := [ 80 , 65 , 100 ] ;
35443: LD_ADDR_VAR 0 9
35447: PUSH
35448: LD_INT 80
35450: PUSH
35451: LD_INT 65
35453: PUSH
35454: LD_INT 100
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35462: LD_VAR 0 6
35466: PPUSH
35467: CALL_OW 263
35471: PUSH
35472: LD_INT 1
35474: EQUAL
35475: IFFALSE 35510
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35477: LD_ADDR_VAR 0 10
35481: PUSH
35482: LD_VAR 0 10
35486: PUSH
35487: LD_VAR 0 6
35491: PPUSH
35492: CALL_OW 311
35496: PPUSH
35497: LD_INT 3
35499: PPUSH
35500: CALL_OW 259
35504: PUSH
35505: LD_INT 4
35507: MUL
35508: MUL
35509: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35510: LD_VAR 0 6
35514: PPUSH
35515: CALL_OW 263
35519: PUSH
35520: LD_INT 2
35522: EQUAL
35523: IFFALSE 35574
// begin j := IsControledBy ( i ) ;
35525: LD_ADDR_VAR 0 7
35529: PUSH
35530: LD_VAR 0 6
35534: PPUSH
35535: CALL_OW 312
35539: ST_TO_ADDR
// if j then
35540: LD_VAR 0 7
35544: IFFALSE 35574
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35546: LD_ADDR_VAR 0 10
35550: PUSH
35551: LD_VAR 0 10
35555: PUSH
35556: LD_VAR 0 7
35560: PPUSH
35561: LD_INT 3
35563: PPUSH
35564: CALL_OW 259
35568: PUSH
35569: LD_INT 3
35571: MUL
35572: MUL
35573: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35574: LD_VAR 0 6
35578: PPUSH
35579: CALL_OW 264
35583: PUSH
35584: LD_INT 5
35586: PUSH
35587: LD_INT 6
35589: PUSH
35590: LD_INT 46
35592: PUSH
35593: LD_INT 44
35595: PUSH
35596: LD_INT 47
35598: PUSH
35599: LD_INT 45
35601: PUSH
35602: LD_INT 28
35604: PUSH
35605: LD_INT 7
35607: PUSH
35608: LD_INT 27
35610: PUSH
35611: LD_INT 29
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: IN
35626: IFFALSE 35646
35628: PUSH
35629: LD_VAR 0 1
35633: PPUSH
35634: LD_INT 52
35636: PPUSH
35637: CALL_OW 321
35641: PUSH
35642: LD_INT 2
35644: EQUAL
35645: AND
35646: IFFALSE 35663
// bpoints := bpoints * 1.2 ;
35648: LD_ADDR_VAR 0 10
35652: PUSH
35653: LD_VAR 0 10
35657: PUSH
35658: LD_REAL  1.20000000000000E+0000
35661: MUL
35662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35663: LD_VAR 0 6
35667: PPUSH
35668: CALL_OW 264
35672: PUSH
35673: LD_INT 6
35675: PUSH
35676: LD_INT 46
35678: PUSH
35679: LD_INT 47
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: LIST
35686: IN
35687: IFFALSE 35704
// bpoints := bpoints * 1.2 ;
35689: LD_ADDR_VAR 0 10
35693: PUSH
35694: LD_VAR 0 10
35698: PUSH
35699: LD_REAL  1.20000000000000E+0000
35702: MUL
35703: ST_TO_ADDR
// end ; unit_building :
35704: GO 35718
35706: LD_INT 3
35708: DOUBLE
35709: EQUAL
35710: IFTRUE 35714
35712: GO 35717
35714: POP
// ; end ;
35715: GO 35718
35717: POP
// for j = 1 to 3 do
35718: LD_ADDR_VAR 0 7
35722: PUSH
35723: DOUBLE
35724: LD_INT 1
35726: DEC
35727: ST_TO_ADDR
35728: LD_INT 3
35730: PUSH
35731: FOR_TO
35732: IFFALSE 35785
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35734: LD_ADDR_VAR 0 5
35738: PUSH
35739: LD_VAR 0 5
35743: PPUSH
35744: LD_VAR 0 7
35748: PPUSH
35749: LD_VAR 0 5
35753: PUSH
35754: LD_VAR 0 7
35758: ARRAY
35759: PUSH
35760: LD_VAR 0 9
35764: PUSH
35765: LD_VAR 0 7
35769: ARRAY
35770: PUSH
35771: LD_VAR 0 10
35775: MUL
35776: PLUS
35777: PPUSH
35778: CALL_OW 1
35782: ST_TO_ADDR
35783: GO 35731
35785: POP
35786: POP
// end ;
35787: GO 34260
35789: POP
35790: POP
// result := Replace ( result , 4 , tmp ) ;
35791: LD_ADDR_VAR 0 5
35795: PUSH
35796: LD_VAR 0 5
35800: PPUSH
35801: LD_INT 4
35803: PPUSH
35804: LD_VAR 0 8
35808: PPUSH
35809: CALL_OW 1
35813: ST_TO_ADDR
// end ;
35814: LD_VAR 0 5
35818: RET
// export function DangerAtRange ( unit , range ) ; begin
35819: LD_INT 0
35821: PPUSH
// if not unit then
35822: LD_VAR 0 1
35826: NOT
35827: IFFALSE 35831
// exit ;
35829: GO 35876
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35831: LD_ADDR_VAR 0 3
35835: PUSH
35836: LD_VAR 0 1
35840: PPUSH
35841: CALL_OW 255
35845: PPUSH
35846: LD_VAR 0 1
35850: PPUSH
35851: CALL_OW 250
35855: PPUSH
35856: LD_VAR 0 1
35860: PPUSH
35861: CALL_OW 251
35865: PPUSH
35866: LD_VAR 0 2
35870: PPUSH
35871: CALL 34110 0 4
35875: ST_TO_ADDR
// end ;
35876: LD_VAR 0 3
35880: RET
// export function DangerInArea ( side , area ) ; begin
35881: LD_INT 0
35883: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35884: LD_ADDR_VAR 0 3
35888: PUSH
35889: LD_VAR 0 2
35893: PPUSH
35894: LD_INT 81
35896: PUSH
35897: LD_VAR 0 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PPUSH
35906: CALL_OW 70
35910: ST_TO_ADDR
// end ;
35911: LD_VAR 0 3
35915: RET
// export function IsExtension ( b ) ; begin
35916: LD_INT 0
35918: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35919: LD_ADDR_VAR 0 2
35923: PUSH
35924: LD_VAR 0 1
35928: PUSH
35929: LD_INT 23
35931: PUSH
35932: LD_INT 20
35934: PUSH
35935: LD_INT 22
35937: PUSH
35938: LD_INT 17
35940: PUSH
35941: LD_INT 24
35943: PUSH
35944: LD_INT 21
35946: PUSH
35947: LD_INT 19
35949: PUSH
35950: LD_INT 16
35952: PUSH
35953: LD_INT 25
35955: PUSH
35956: LD_INT 18
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: IN
35971: ST_TO_ADDR
// end ;
35972: LD_VAR 0 2
35976: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35977: LD_INT 0
35979: PPUSH
35980: PPUSH
35981: PPUSH
// result := [ ] ;
35982: LD_ADDR_VAR 0 4
35986: PUSH
35987: EMPTY
35988: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35989: LD_ADDR_VAR 0 5
35993: PUSH
35994: LD_VAR 0 2
35998: PPUSH
35999: LD_INT 21
36001: PUSH
36002: LD_INT 3
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PPUSH
36009: CALL_OW 70
36013: ST_TO_ADDR
// if not tmp then
36014: LD_VAR 0 5
36018: NOT
36019: IFFALSE 36023
// exit ;
36021: GO 36087
// if checkLink then
36023: LD_VAR 0 3
36027: IFFALSE 36077
// begin for i in tmp do
36029: LD_ADDR_VAR 0 6
36033: PUSH
36034: LD_VAR 0 5
36038: PUSH
36039: FOR_IN
36040: IFFALSE 36075
// if GetBase ( i ) <> base then
36042: LD_VAR 0 6
36046: PPUSH
36047: CALL_OW 274
36051: PUSH
36052: LD_VAR 0 1
36056: NONEQUAL
36057: IFFALSE 36073
// ComLinkToBase ( base , i ) ;
36059: LD_VAR 0 1
36063: PPUSH
36064: LD_VAR 0 6
36068: PPUSH
36069: CALL_OW 169
36073: GO 36039
36075: POP
36076: POP
// end ; result := tmp ;
36077: LD_ADDR_VAR 0 4
36081: PUSH
36082: LD_VAR 0 5
36086: ST_TO_ADDR
// end ;
36087: LD_VAR 0 4
36091: RET
// export function ComComplete ( units , b ) ; var i ; begin
36092: LD_INT 0
36094: PPUSH
36095: PPUSH
// if not units then
36096: LD_VAR 0 1
36100: NOT
36101: IFFALSE 36105
// exit ;
36103: GO 36195
// for i in units do
36105: LD_ADDR_VAR 0 4
36109: PUSH
36110: LD_VAR 0 1
36114: PUSH
36115: FOR_IN
36116: IFFALSE 36193
// if BuildingStatus ( b ) = bs_build then
36118: LD_VAR 0 2
36122: PPUSH
36123: CALL_OW 461
36127: PUSH
36128: LD_INT 1
36130: EQUAL
36131: IFFALSE 36191
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36133: LD_VAR 0 4
36137: PPUSH
36138: LD_STRING h
36140: PUSH
36141: LD_VAR 0 2
36145: PPUSH
36146: CALL_OW 250
36150: PUSH
36151: LD_VAR 0 2
36155: PPUSH
36156: CALL_OW 251
36160: PUSH
36161: LD_VAR 0 2
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: PUSH
36184: EMPTY
36185: LIST
36186: PPUSH
36187: CALL_OW 446
36191: GO 36115
36193: POP
36194: POP
// end ;
36195: LD_VAR 0 3
36199: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36200: LD_INT 0
36202: PPUSH
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36208: LD_VAR 0 1
36212: NOT
36213: IFTRUE 36230
36215: PUSH
36216: LD_VAR 0 1
36220: PPUSH
36221: CALL_OW 263
36225: PUSH
36226: LD_INT 2
36228: NONEQUAL
36229: OR
36230: IFFALSE 36234
// exit ;
36232: GO 36550
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36234: LD_ADDR_VAR 0 6
36238: PUSH
36239: LD_INT 22
36241: PUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 255
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: LD_INT 30
36261: PUSH
36262: LD_INT 36
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 34
36271: PUSH
36272: LD_INT 31
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PPUSH
36288: CALL_OW 69
36292: ST_TO_ADDR
// if not tmp then
36293: LD_VAR 0 6
36297: NOT
36298: IFFALSE 36302
// exit ;
36300: GO 36550
// result := [ ] ;
36302: LD_ADDR_VAR 0 2
36306: PUSH
36307: EMPTY
36308: ST_TO_ADDR
// for i in tmp do
36309: LD_ADDR_VAR 0 3
36313: PUSH
36314: LD_VAR 0 6
36318: PUSH
36319: FOR_IN
36320: IFFALSE 36391
// begin t := UnitsInside ( i ) ;
36322: LD_ADDR_VAR 0 4
36326: PUSH
36327: LD_VAR 0 3
36331: PPUSH
36332: CALL_OW 313
36336: ST_TO_ADDR
// if t then
36337: LD_VAR 0 4
36341: IFFALSE 36389
// for j in t do
36343: LD_ADDR_VAR 0 7
36347: PUSH
36348: LD_VAR 0 4
36352: PUSH
36353: FOR_IN
36354: IFFALSE 36387
// result := Replace ( result , result + 1 , j ) ;
36356: LD_ADDR_VAR 0 2
36360: PUSH
36361: LD_VAR 0 2
36365: PPUSH
36366: LD_VAR 0 2
36370: PUSH
36371: LD_INT 1
36373: PLUS
36374: PPUSH
36375: LD_VAR 0 7
36379: PPUSH
36380: CALL_OW 1
36384: ST_TO_ADDR
36385: GO 36353
36387: POP
36388: POP
// end ;
36389: GO 36319
36391: POP
36392: POP
// if not result then
36393: LD_VAR 0 2
36397: NOT
36398: IFFALSE 36402
// exit ;
36400: GO 36550
// mech := result [ 1 ] ;
36402: LD_ADDR_VAR 0 5
36406: PUSH
36407: LD_VAR 0 2
36411: PUSH
36412: LD_INT 1
36414: ARRAY
36415: ST_TO_ADDR
// if result > 1 then
36416: LD_VAR 0 2
36420: PUSH
36421: LD_INT 1
36423: GREATER
36424: IFFALSE 36536
// begin for i = 2 to result do
36426: LD_ADDR_VAR 0 3
36430: PUSH
36431: DOUBLE
36432: LD_INT 2
36434: DEC
36435: ST_TO_ADDR
36436: LD_VAR 0 2
36440: PUSH
36441: FOR_TO
36442: IFFALSE 36534
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36444: LD_ADDR_VAR 0 4
36448: PUSH
36449: LD_VAR 0 2
36453: PUSH
36454: LD_VAR 0 3
36458: ARRAY
36459: PPUSH
36460: LD_INT 3
36462: PPUSH
36463: CALL_OW 259
36467: PUSH
36468: LD_VAR 0 2
36472: PUSH
36473: LD_VAR 0 3
36477: ARRAY
36478: PPUSH
36479: CALL_OW 432
36483: MINUS
36484: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36485: LD_VAR 0 4
36489: PUSH
36490: LD_VAR 0 5
36494: PPUSH
36495: LD_INT 3
36497: PPUSH
36498: CALL_OW 259
36502: PUSH
36503: LD_VAR 0 5
36507: PPUSH
36508: CALL_OW 432
36512: MINUS
36513: GREATEREQUAL
36514: IFFALSE 36532
// mech := result [ i ] ;
36516: LD_ADDR_VAR 0 5
36520: PUSH
36521: LD_VAR 0 2
36525: PUSH
36526: LD_VAR 0 3
36530: ARRAY
36531: ST_TO_ADDR
// end ;
36532: GO 36441
36534: POP
36535: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36536: LD_VAR 0 1
36540: PPUSH
36541: LD_VAR 0 5
36545: PPUSH
36546: CALL_OW 135
// end ;
36550: LD_VAR 0 2
36554: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36555: LD_INT 0
36557: PPUSH
36558: PPUSH
36559: PPUSH
36560: PPUSH
36561: PPUSH
36562: PPUSH
36563: PPUSH
36564: PPUSH
36565: PPUSH
36566: PPUSH
36567: PPUSH
36568: PPUSH
36569: PPUSH
// result := [ ] ;
36570: LD_ADDR_VAR 0 7
36574: PUSH
36575: EMPTY
36576: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36577: LD_VAR 0 1
36581: PPUSH
36582: CALL_OW 266
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: IN
36597: NOT
36598: IFFALSE 36602
// exit ;
36600: GO 38242
// if name then
36602: LD_VAR 0 3
36606: IFFALSE 36622
// SetBName ( base_dep , name ) ;
36608: LD_VAR 0 1
36612: PPUSH
36613: LD_VAR 0 3
36617: PPUSH
36618: CALL_OW 500
// base := GetBase ( base_dep ) ;
36622: LD_ADDR_VAR 0 15
36626: PUSH
36627: LD_VAR 0 1
36631: PPUSH
36632: CALL_OW 274
36636: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36637: LD_ADDR_VAR 0 16
36641: PUSH
36642: LD_VAR 0 1
36646: PPUSH
36647: CALL_OW 255
36651: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36652: LD_ADDR_VAR 0 17
36656: PUSH
36657: LD_VAR 0 1
36661: PPUSH
36662: CALL_OW 248
36666: ST_TO_ADDR
// if sources then
36667: LD_VAR 0 5
36671: IFFALSE 36718
// for i = 1 to 3 do
36673: LD_ADDR_VAR 0 8
36677: PUSH
36678: DOUBLE
36679: LD_INT 1
36681: DEC
36682: ST_TO_ADDR
36683: LD_INT 3
36685: PUSH
36686: FOR_TO
36687: IFFALSE 36716
// AddResourceType ( base , i , sources [ i ] ) ;
36689: LD_VAR 0 15
36693: PPUSH
36694: LD_VAR 0 8
36698: PPUSH
36699: LD_VAR 0 5
36703: PUSH
36704: LD_VAR 0 8
36708: ARRAY
36709: PPUSH
36710: CALL_OW 276
36714: GO 36686
36716: POP
36717: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36718: LD_ADDR_VAR 0 18
36722: PUSH
36723: LD_VAR 0 15
36727: PPUSH
36728: LD_VAR 0 2
36732: PPUSH
36733: LD_INT 1
36735: PPUSH
36736: CALL 35977 0 3
36740: ST_TO_ADDR
// InitHc ;
36741: CALL_OW 19
// InitUc ;
36745: CALL_OW 18
// uc_side := side ;
36749: LD_ADDR_OWVAR 20
36753: PUSH
36754: LD_VAR 0 16
36758: ST_TO_ADDR
// uc_nation := nation ;
36759: LD_ADDR_OWVAR 21
36763: PUSH
36764: LD_VAR 0 17
36768: ST_TO_ADDR
// if buildings then
36769: LD_VAR 0 18
36773: IFFALSE 38101
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36775: LD_ADDR_VAR 0 19
36779: PUSH
36780: LD_VAR 0 18
36784: PPUSH
36785: LD_INT 2
36787: PUSH
36788: LD_INT 30
36790: PUSH
36791: LD_INT 29
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 30
36800: PUSH
36801: LD_INT 30
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: LIST
36812: PPUSH
36813: CALL_OW 72
36817: ST_TO_ADDR
// if tmp then
36818: LD_VAR 0 19
36822: IFFALSE 36870
// for i in tmp do
36824: LD_ADDR_VAR 0 8
36828: PUSH
36829: LD_VAR 0 19
36833: PUSH
36834: FOR_IN
36835: IFFALSE 36868
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36837: LD_VAR 0 8
36841: PPUSH
36842: CALL_OW 250
36846: PPUSH
36847: LD_VAR 0 8
36851: PPUSH
36852: CALL_OW 251
36856: PPUSH
36857: LD_VAR 0 16
36861: PPUSH
36862: CALL_OW 441
36866: GO 36834
36868: POP
36869: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36870: LD_VAR 0 18
36874: PPUSH
36875: LD_INT 2
36877: PUSH
36878: LD_INT 30
36880: PUSH
36881: LD_INT 32
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 30
36890: PUSH
36891: LD_INT 33
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: PPUSH
36903: CALL_OW 72
36907: IFFALSE 36995
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36909: LD_ADDR_VAR 0 8
36913: PUSH
36914: LD_VAR 0 18
36918: PPUSH
36919: LD_INT 2
36921: PUSH
36922: LD_INT 30
36924: PUSH
36925: LD_INT 32
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 30
36934: PUSH
36935: LD_INT 33
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: LIST
36946: PPUSH
36947: CALL_OW 72
36951: PUSH
36952: FOR_IN
36953: IFFALSE 36993
// begin if not GetBWeapon ( i ) then
36955: LD_VAR 0 8
36959: PPUSH
36960: CALL_OW 269
36964: NOT
36965: IFFALSE 36991
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36967: LD_VAR 0 8
36971: PPUSH
36972: LD_VAR 0 8
36976: PPUSH
36977: LD_VAR 0 2
36981: PPUSH
36982: CALL 38247 0 2
36986: PPUSH
36987: CALL_OW 431
// end ;
36991: GO 36952
36993: POP
36994: POP
// end ; for i = 1 to personel do
36995: LD_ADDR_VAR 0 8
36999: PUSH
37000: DOUBLE
37001: LD_INT 1
37003: DEC
37004: ST_TO_ADDR
37005: LD_VAR 0 6
37009: PUSH
37010: FOR_TO
37011: IFFALSE 38081
// begin if i > 4 then
37013: LD_VAR 0 8
37017: PUSH
37018: LD_INT 4
37020: GREATER
37021: IFFALSE 37025
// break ;
37023: GO 38081
// case i of 1 :
37025: LD_VAR 0 8
37029: PUSH
37030: LD_INT 1
37032: DOUBLE
37033: EQUAL
37034: IFTRUE 37038
37036: GO 37118
37038: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37039: LD_ADDR_VAR 0 12
37043: PUSH
37044: LD_VAR 0 18
37048: PPUSH
37049: LD_INT 22
37051: PUSH
37052: LD_VAR 0 16
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 58
37063: PUSH
37064: EMPTY
37065: LIST
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: LD_INT 30
37072: PUSH
37073: LD_INT 32
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 30
37082: PUSH
37083: LD_INT 4
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 30
37092: PUSH
37093: LD_INT 5
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: LIST
37110: PPUSH
37111: CALL_OW 72
37115: ST_TO_ADDR
37116: GO 37340
37118: LD_INT 2
37120: DOUBLE
37121: EQUAL
37122: IFTRUE 37126
37124: GO 37188
37126: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37127: LD_ADDR_VAR 0 12
37131: PUSH
37132: LD_VAR 0 18
37136: PPUSH
37137: LD_INT 22
37139: PUSH
37140: LD_VAR 0 16
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: LD_INT 30
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 30
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PPUSH
37181: CALL_OW 72
37185: ST_TO_ADDR
37186: GO 37340
37188: LD_INT 3
37190: DOUBLE
37191: EQUAL
37192: IFTRUE 37196
37194: GO 37258
37196: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37197: LD_ADDR_VAR 0 12
37201: PUSH
37202: LD_VAR 0 18
37206: PPUSH
37207: LD_INT 22
37209: PUSH
37210: LD_VAR 0 16
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: LD_INT 30
37224: PUSH
37225: LD_INT 2
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 30
37234: PUSH
37235: LD_INT 3
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PPUSH
37251: CALL_OW 72
37255: ST_TO_ADDR
37256: GO 37340
37258: LD_INT 4
37260: DOUBLE
37261: EQUAL
37262: IFTRUE 37266
37264: GO 37339
37266: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37267: LD_ADDR_VAR 0 12
37271: PUSH
37272: LD_VAR 0 18
37276: PPUSH
37277: LD_INT 22
37279: PUSH
37280: LD_VAR 0 16
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 2
37291: PUSH
37292: LD_INT 30
37294: PUSH
37295: LD_INT 6
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 30
37304: PUSH
37305: LD_INT 7
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 30
37314: PUSH
37315: LD_INT 8
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PPUSH
37332: CALL_OW 72
37336: ST_TO_ADDR
37337: GO 37340
37339: POP
// if i = 1 then
37340: LD_VAR 0 8
37344: PUSH
37345: LD_INT 1
37347: EQUAL
37348: IFFALSE 37459
// begin tmp := [ ] ;
37350: LD_ADDR_VAR 0 19
37354: PUSH
37355: EMPTY
37356: ST_TO_ADDR
// for j in f do
37357: LD_ADDR_VAR 0 9
37361: PUSH
37362: LD_VAR 0 12
37366: PUSH
37367: FOR_IN
37368: IFFALSE 37441
// if GetBType ( j ) = b_bunker then
37370: LD_VAR 0 9
37374: PPUSH
37375: CALL_OW 266
37379: PUSH
37380: LD_INT 32
37382: EQUAL
37383: IFFALSE 37410
// tmp := Insert ( tmp , 1 , j ) else
37385: LD_ADDR_VAR 0 19
37389: PUSH
37390: LD_VAR 0 19
37394: PPUSH
37395: LD_INT 1
37397: PPUSH
37398: LD_VAR 0 9
37402: PPUSH
37403: CALL_OW 2
37407: ST_TO_ADDR
37408: GO 37439
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37410: LD_ADDR_VAR 0 19
37414: PUSH
37415: LD_VAR 0 19
37419: PPUSH
37420: LD_VAR 0 19
37424: PUSH
37425: LD_INT 1
37427: PLUS
37428: PPUSH
37429: LD_VAR 0 9
37433: PPUSH
37434: CALL_OW 2
37438: ST_TO_ADDR
37439: GO 37367
37441: POP
37442: POP
// if tmp then
37443: LD_VAR 0 19
37447: IFFALSE 37459
// f := tmp ;
37449: LD_ADDR_VAR 0 12
37453: PUSH
37454: LD_VAR 0 19
37458: ST_TO_ADDR
// end ; x := personel [ i ] ;
37459: LD_ADDR_VAR 0 13
37463: PUSH
37464: LD_VAR 0 6
37468: PUSH
37469: LD_VAR 0 8
37473: ARRAY
37474: ST_TO_ADDR
// if x = - 1 then
37475: LD_VAR 0 13
37479: PUSH
37480: LD_INT 1
37482: NEG
37483: EQUAL
37484: IFFALSE 37695
// begin for j in f do
37486: LD_ADDR_VAR 0 9
37490: PUSH
37491: LD_VAR 0 12
37495: PUSH
37496: FOR_IN
37497: IFFALSE 37691
// repeat InitHc ;
37499: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37503: LD_VAR 0 9
37507: PPUSH
37508: CALL_OW 266
37512: PUSH
37513: LD_INT 5
37515: EQUAL
37516: IFFALSE 37586
// begin if UnitsInside ( j ) < 3 then
37518: LD_VAR 0 9
37522: PPUSH
37523: CALL_OW 313
37527: PUSH
37528: LD_INT 3
37530: LESS
37531: IFFALSE 37567
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37533: LD_INT 0
37535: PPUSH
37536: LD_INT 5
37538: PUSH
37539: LD_INT 8
37541: PUSH
37542: LD_INT 9
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: PUSH
37550: LD_VAR 0 17
37554: ARRAY
37555: PPUSH
37556: LD_VAR 0 4
37560: PPUSH
37561: CALL_OW 380
37565: GO 37584
// PrepareHuman ( false , i , skill ) ;
37567: LD_INT 0
37569: PPUSH
37570: LD_VAR 0 8
37574: PPUSH
37575: LD_VAR 0 4
37579: PPUSH
37580: CALL_OW 380
// end else
37584: GO 37603
// PrepareHuman ( false , i , skill ) ;
37586: LD_INT 0
37588: PPUSH
37589: LD_VAR 0 8
37593: PPUSH
37594: LD_VAR 0 4
37598: PPUSH
37599: CALL_OW 380
// un := CreateHuman ;
37603: LD_ADDR_VAR 0 14
37607: PUSH
37608: CALL_OW 44
37612: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37613: LD_ADDR_VAR 0 7
37617: PUSH
37618: LD_VAR 0 7
37622: PPUSH
37623: LD_INT 1
37625: PPUSH
37626: LD_VAR 0 14
37630: PPUSH
37631: CALL_OW 2
37635: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37636: LD_VAR 0 14
37640: PPUSH
37641: LD_VAR 0 9
37645: PPUSH
37646: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37650: LD_VAR 0 9
37654: PPUSH
37655: CALL_OW 313
37659: PUSH
37660: LD_INT 6
37662: EQUAL
37663: IFTRUE 37687
37665: PUSH
37666: LD_VAR 0 9
37670: PPUSH
37671: CALL_OW 266
37675: PUSH
37676: LD_INT 32
37678: PUSH
37679: LD_INT 31
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: IN
37686: OR
37687: IFFALSE 37499
37689: GO 37496
37691: POP
37692: POP
// end else
37693: GO 38079
// for j = 1 to x do
37695: LD_ADDR_VAR 0 9
37699: PUSH
37700: DOUBLE
37701: LD_INT 1
37703: DEC
37704: ST_TO_ADDR
37705: LD_VAR 0 13
37709: PUSH
37710: FOR_TO
37711: IFFALSE 38077
// begin InitHc ;
37713: CALL_OW 19
// if not f then
37717: LD_VAR 0 12
37721: NOT
37722: IFFALSE 37811
// begin PrepareHuman ( false , i , skill ) ;
37724: LD_INT 0
37726: PPUSH
37727: LD_VAR 0 8
37731: PPUSH
37732: LD_VAR 0 4
37736: PPUSH
37737: CALL_OW 380
// un := CreateHuman ;
37741: LD_ADDR_VAR 0 14
37745: PUSH
37746: CALL_OW 44
37750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37751: LD_ADDR_VAR 0 7
37755: PUSH
37756: LD_VAR 0 7
37760: PPUSH
37761: LD_INT 1
37763: PPUSH
37764: LD_VAR 0 14
37768: PPUSH
37769: CALL_OW 2
37773: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37774: LD_VAR 0 14
37778: PPUSH
37779: LD_VAR 0 1
37783: PPUSH
37784: CALL_OW 250
37788: PPUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL_OW 251
37798: PPUSH
37799: LD_INT 10
37801: PPUSH
37802: LD_INT 0
37804: PPUSH
37805: CALL_OW 50
// continue ;
37809: GO 37710
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37811: LD_VAR 0 12
37815: PUSH
37816: LD_INT 1
37818: ARRAY
37819: PPUSH
37820: CALL_OW 313
37824: IFFALSE 37852
37826: PUSH
37827: LD_VAR 0 12
37831: PUSH
37832: LD_INT 1
37834: ARRAY
37835: PPUSH
37836: CALL_OW 266
37840: PUSH
37841: LD_INT 32
37843: PUSH
37844: LD_INT 31
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: IN
37851: AND
37852: IFTRUE 37873
37854: PUSH
37855: LD_VAR 0 12
37859: PUSH
37860: LD_INT 1
37862: ARRAY
37863: PPUSH
37864: CALL_OW 313
37868: PUSH
37869: LD_INT 6
37871: EQUAL
37872: OR
37873: IFFALSE 37893
// f := Delete ( f , 1 ) ;
37875: LD_ADDR_VAR 0 12
37879: PUSH
37880: LD_VAR 0 12
37884: PPUSH
37885: LD_INT 1
37887: PPUSH
37888: CALL_OW 3
37892: ST_TO_ADDR
// if not f then
37893: LD_VAR 0 12
37897: NOT
37898: IFFALSE 37916
// begin x := x + 2 ;
37900: LD_ADDR_VAR 0 13
37904: PUSH
37905: LD_VAR 0 13
37909: PUSH
37910: LD_INT 2
37912: PLUS
37913: ST_TO_ADDR
// continue ;
37914: GO 37710
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37916: LD_VAR 0 12
37920: PUSH
37921: LD_INT 1
37923: ARRAY
37924: PPUSH
37925: CALL_OW 266
37929: PUSH
37930: LD_INT 5
37932: EQUAL
37933: IFFALSE 38007
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37935: LD_VAR 0 12
37939: PUSH
37940: LD_INT 1
37942: ARRAY
37943: PPUSH
37944: CALL_OW 313
37948: PUSH
37949: LD_INT 3
37951: LESS
37952: IFFALSE 37988
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37954: LD_INT 0
37956: PPUSH
37957: LD_INT 5
37959: PUSH
37960: LD_INT 8
37962: PUSH
37963: LD_INT 9
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: PUSH
37971: LD_VAR 0 17
37975: ARRAY
37976: PPUSH
37977: LD_VAR 0 4
37981: PPUSH
37982: CALL_OW 380
37986: GO 38005
// PrepareHuman ( false , i , skill ) ;
37988: LD_INT 0
37990: PPUSH
37991: LD_VAR 0 8
37995: PPUSH
37996: LD_VAR 0 4
38000: PPUSH
38001: CALL_OW 380
// end else
38005: GO 38024
// PrepareHuman ( false , i , skill ) ;
38007: LD_INT 0
38009: PPUSH
38010: LD_VAR 0 8
38014: PPUSH
38015: LD_VAR 0 4
38019: PPUSH
38020: CALL_OW 380
// un := CreateHuman ;
38024: LD_ADDR_VAR 0 14
38028: PUSH
38029: CALL_OW 44
38033: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38034: LD_ADDR_VAR 0 7
38038: PUSH
38039: LD_VAR 0 7
38043: PPUSH
38044: LD_INT 1
38046: PPUSH
38047: LD_VAR 0 14
38051: PPUSH
38052: CALL_OW 2
38056: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38057: LD_VAR 0 14
38061: PPUSH
38062: LD_VAR 0 12
38066: PUSH
38067: LD_INT 1
38069: ARRAY
38070: PPUSH
38071: CALL_OW 52
// end ;
38075: GO 37710
38077: POP
38078: POP
// end ;
38079: GO 37010
38081: POP
38082: POP
// result := result ^ buildings ;
38083: LD_ADDR_VAR 0 7
38087: PUSH
38088: LD_VAR 0 7
38092: PUSH
38093: LD_VAR 0 18
38097: ADD
38098: ST_TO_ADDR
// end else
38099: GO 38242
// begin for i = 1 to personel do
38101: LD_ADDR_VAR 0 8
38105: PUSH
38106: DOUBLE
38107: LD_INT 1
38109: DEC
38110: ST_TO_ADDR
38111: LD_VAR 0 6
38115: PUSH
38116: FOR_TO
38117: IFFALSE 38240
// begin if i > 4 then
38119: LD_VAR 0 8
38123: PUSH
38124: LD_INT 4
38126: GREATER
38127: IFFALSE 38131
// break ;
38129: GO 38240
// x := personel [ i ] ;
38131: LD_ADDR_VAR 0 13
38135: PUSH
38136: LD_VAR 0 6
38140: PUSH
38141: LD_VAR 0 8
38145: ARRAY
38146: ST_TO_ADDR
// if x = - 1 then
38147: LD_VAR 0 13
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: EQUAL
38156: IFFALSE 38160
// continue ;
38158: GO 38116
// PrepareHuman ( false , i , skill ) ;
38160: LD_INT 0
38162: PPUSH
38163: LD_VAR 0 8
38167: PPUSH
38168: LD_VAR 0 4
38172: PPUSH
38173: CALL_OW 380
// un := CreateHuman ;
38177: LD_ADDR_VAR 0 14
38181: PUSH
38182: CALL_OW 44
38186: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38187: LD_VAR 0 14
38191: PPUSH
38192: LD_VAR 0 1
38196: PPUSH
38197: CALL_OW 250
38201: PPUSH
38202: LD_VAR 0 1
38206: PPUSH
38207: CALL_OW 251
38211: PPUSH
38212: LD_INT 10
38214: PPUSH
38215: LD_INT 0
38217: PPUSH
38218: CALL_OW 50
// result := result ^ un ;
38222: LD_ADDR_VAR 0 7
38226: PUSH
38227: LD_VAR 0 7
38231: PUSH
38232: LD_VAR 0 14
38236: ADD
38237: ST_TO_ADDR
// end ;
38238: GO 38116
38240: POP
38241: POP
// end ; end ;
38242: LD_VAR 0 7
38246: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38247: LD_INT 0
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
38253: PPUSH
38254: PPUSH
38255: PPUSH
38256: PPUSH
38257: PPUSH
38258: PPUSH
38259: PPUSH
38260: PPUSH
38261: PPUSH
38262: PPUSH
38263: PPUSH
38264: PPUSH
// result := false ;
38265: LD_ADDR_VAR 0 3
38269: PUSH
38270: LD_INT 0
38272: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38273: LD_VAR 0 1
38277: NOT
38278: IFTRUE 38303
38280: PUSH
38281: LD_VAR 0 1
38285: PPUSH
38286: CALL_OW 266
38290: PUSH
38291: LD_INT 32
38293: PUSH
38294: LD_INT 33
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: IN
38301: NOT
38302: OR
38303: IFFALSE 38307
// exit ;
38305: GO 39442
// nat := GetNation ( tower ) ;
38307: LD_ADDR_VAR 0 12
38311: PUSH
38312: LD_VAR 0 1
38316: PPUSH
38317: CALL_OW 248
38321: ST_TO_ADDR
// side := GetSide ( tower ) ;
38322: LD_ADDR_VAR 0 16
38326: PUSH
38327: LD_VAR 0 1
38331: PPUSH
38332: CALL_OW 255
38336: ST_TO_ADDR
// x := GetX ( tower ) ;
38337: LD_ADDR_VAR 0 10
38341: PUSH
38342: LD_VAR 0 1
38346: PPUSH
38347: CALL_OW 250
38351: ST_TO_ADDR
// y := GetY ( tower ) ;
38352: LD_ADDR_VAR 0 11
38356: PUSH
38357: LD_VAR 0 1
38361: PPUSH
38362: CALL_OW 251
38366: ST_TO_ADDR
// if not x or not y then
38367: LD_VAR 0 10
38371: NOT
38372: IFTRUE 38381
38374: PUSH
38375: LD_VAR 0 11
38379: NOT
38380: OR
38381: IFFALSE 38385
// exit ;
38383: GO 39442
// weapon := 0 ;
38385: LD_ADDR_VAR 0 18
38389: PUSH
38390: LD_INT 0
38392: ST_TO_ADDR
// fac_list := [ ] ;
38393: LD_ADDR_VAR 0 17
38397: PUSH
38398: EMPTY
38399: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38400: LD_ADDR_VAR 0 6
38404: PUSH
38405: LD_VAR 0 1
38409: PPUSH
38410: CALL_OW 274
38414: PPUSH
38415: LD_VAR 0 2
38419: PPUSH
38420: LD_INT 0
38422: PPUSH
38423: CALL 35977 0 3
38427: PPUSH
38428: LD_INT 30
38430: PUSH
38431: LD_INT 3
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PPUSH
38438: CALL_OW 72
38442: ST_TO_ADDR
// if not factories then
38443: LD_VAR 0 6
38447: NOT
38448: IFFALSE 38452
// exit ;
38450: GO 39442
// for i in factories do
38452: LD_ADDR_VAR 0 8
38456: PUSH
38457: LD_VAR 0 6
38461: PUSH
38462: FOR_IN
38463: IFFALSE 38488
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38465: LD_ADDR_VAR 0 17
38469: PUSH
38470: LD_VAR 0 17
38474: PUSH
38475: LD_VAR 0 8
38479: PPUSH
38480: CALL_OW 478
38484: UNION
38485: ST_TO_ADDR
38486: GO 38462
38488: POP
38489: POP
// if not fac_list then
38490: LD_VAR 0 17
38494: NOT
38495: IFFALSE 38499
// exit ;
38497: GO 39442
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38499: LD_ADDR_VAR 0 5
38503: PUSH
38504: LD_INT 4
38506: PUSH
38507: LD_INT 5
38509: PUSH
38510: LD_INT 9
38512: PUSH
38513: LD_INT 10
38515: PUSH
38516: LD_INT 6
38518: PUSH
38519: LD_INT 7
38521: PUSH
38522: LD_INT 11
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 27
38536: PUSH
38537: LD_INT 28
38539: PUSH
38540: LD_INT 26
38542: PUSH
38543: LD_INT 30
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 43
38554: PUSH
38555: LD_INT 44
38557: PUSH
38558: LD_INT 46
38560: PUSH
38561: LD_INT 45
38563: PUSH
38564: LD_INT 47
38566: PUSH
38567: LD_INT 49
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: PUSH
38583: LD_VAR 0 12
38587: ARRAY
38588: ST_TO_ADDR
// list := list isect fac_list ;
38589: LD_ADDR_VAR 0 5
38593: PUSH
38594: LD_VAR 0 5
38598: PUSH
38599: LD_VAR 0 17
38603: ISECT
38604: ST_TO_ADDR
// if not list then
38605: LD_VAR 0 5
38609: NOT
38610: IFFALSE 38614
// exit ;
38612: GO 39442
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38614: LD_VAR 0 12
38618: PUSH
38619: LD_INT 3
38621: EQUAL
38622: IFFALSE 38634
38624: PUSH
38625: LD_INT 49
38627: PUSH
38628: LD_VAR 0 5
38632: IN
38633: AND
38634: IFFALSE 38654
38636: PUSH
38637: LD_INT 31
38639: PPUSH
38640: LD_VAR 0 16
38644: PPUSH
38645: CALL_OW 321
38649: PUSH
38650: LD_INT 2
38652: EQUAL
38653: AND
38654: IFFALSE 38714
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38656: LD_INT 22
38658: PUSH
38659: LD_VAR 0 16
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 35
38670: PUSH
38671: LD_INT 49
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 91
38680: PUSH
38681: LD_VAR 0 1
38685: PUSH
38686: LD_INT 10
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: LIST
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: PPUSH
38699: CALL_OW 69
38703: NOT
38704: IFFALSE 38714
// weapon := ru_time_lapser ;
38706: LD_ADDR_VAR 0 18
38710: PUSH
38711: LD_INT 49
38713: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38714: LD_VAR 0 12
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: LD_INT 2
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: IN
38729: IFFALSE 38753
38731: PUSH
38732: LD_INT 11
38734: PUSH
38735: LD_VAR 0 5
38739: IN
38740: IFTRUE 38752
38742: PUSH
38743: LD_INT 30
38745: PUSH
38746: LD_VAR 0 5
38750: IN
38751: OR
38752: AND
38753: IFFALSE 38773
38755: PUSH
38756: LD_INT 6
38758: PPUSH
38759: LD_VAR 0 16
38763: PPUSH
38764: CALL_OW 321
38768: PUSH
38769: LD_INT 2
38771: EQUAL
38772: AND
38773: IFFALSE 38940
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38775: LD_INT 22
38777: PUSH
38778: LD_VAR 0 16
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 2
38789: PUSH
38790: LD_INT 35
38792: PUSH
38793: LD_INT 11
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 35
38802: PUSH
38803: LD_INT 30
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 91
38817: PUSH
38818: LD_VAR 0 1
38822: PUSH
38823: LD_INT 18
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: LIST
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: LIST
38835: PPUSH
38836: CALL_OW 69
38840: NOT
38841: IFFALSE 38917
38843: PUSH
38844: LD_INT 22
38846: PUSH
38847: LD_VAR 0 16
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: LD_INT 30
38861: PUSH
38862: LD_INT 32
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 30
38871: PUSH
38872: LD_INT 33
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 91
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: LD_INT 12
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: PPUSH
38908: CALL_OW 69
38912: PUSH
38913: LD_INT 2
38915: GREATER
38916: AND
38917: IFFALSE 38940
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38919: LD_ADDR_VAR 0 18
38923: PUSH
38924: LD_INT 11
38926: PUSH
38927: LD_INT 30
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_VAR 0 12
38938: ARRAY
38939: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38940: LD_VAR 0 18
38944: NOT
38945: IFFALSE 38965
38947: PUSH
38948: LD_INT 40
38950: PPUSH
38951: LD_VAR 0 16
38955: PPUSH
38956: CALL_OW 321
38960: PUSH
38961: LD_INT 2
38963: EQUAL
38964: AND
38965: IFFALSE 39001
38967: PUSH
38968: LD_INT 7
38970: PUSH
38971: LD_VAR 0 5
38975: IN
38976: IFTRUE 38988
38978: PUSH
38979: LD_INT 28
38981: PUSH
38982: LD_VAR 0 5
38986: IN
38987: OR
38988: IFTRUE 39000
38990: PUSH
38991: LD_INT 45
38993: PUSH
38994: LD_VAR 0 5
38998: IN
38999: OR
39000: AND
39001: IFFALSE 39255
// begin hex := GetHexInfo ( x , y ) ;
39003: LD_ADDR_VAR 0 4
39007: PUSH
39008: LD_VAR 0 10
39012: PPUSH
39013: LD_VAR 0 11
39017: PPUSH
39018: CALL_OW 546
39022: ST_TO_ADDR
// if hex [ 1 ] then
39023: LD_VAR 0 4
39027: PUSH
39028: LD_INT 1
39030: ARRAY
39031: IFFALSE 39035
// exit ;
39033: GO 39442
// height := hex [ 2 ] ;
39035: LD_ADDR_VAR 0 15
39039: PUSH
39040: LD_VAR 0 4
39044: PUSH
39045: LD_INT 2
39047: ARRAY
39048: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39049: LD_ADDR_VAR 0 14
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: LD_INT 3
39062: PUSH
39063: LD_INT 5
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: ST_TO_ADDR
// for i in tmp do
39072: LD_ADDR_VAR 0 8
39076: PUSH
39077: LD_VAR 0 14
39081: PUSH
39082: FOR_IN
39083: IFFALSE 39253
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39085: LD_ADDR_VAR 0 9
39089: PUSH
39090: LD_VAR 0 10
39094: PPUSH
39095: LD_VAR 0 8
39099: PPUSH
39100: LD_INT 5
39102: PPUSH
39103: CALL_OW 272
39107: PUSH
39108: LD_VAR 0 11
39112: PPUSH
39113: LD_VAR 0 8
39117: PPUSH
39118: LD_INT 5
39120: PPUSH
39121: CALL_OW 273
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39130: LD_VAR 0 9
39134: PUSH
39135: LD_INT 1
39137: ARRAY
39138: PPUSH
39139: LD_VAR 0 9
39143: PUSH
39144: LD_INT 2
39146: ARRAY
39147: PPUSH
39148: CALL_OW 488
39152: IFFALSE 39251
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39154: LD_ADDR_VAR 0 4
39158: PUSH
39159: LD_VAR 0 9
39163: PUSH
39164: LD_INT 1
39166: ARRAY
39167: PPUSH
39168: LD_VAR 0 9
39172: PUSH
39173: LD_INT 2
39175: ARRAY
39176: PPUSH
39177: CALL_OW 546
39181: ST_TO_ADDR
// if hex [ 1 ] then
39182: LD_VAR 0 4
39186: PUSH
39187: LD_INT 1
39189: ARRAY
39190: IFFALSE 39194
// continue ;
39192: GO 39082
// h := hex [ 2 ] ;
39194: LD_ADDR_VAR 0 13
39198: PUSH
39199: LD_VAR 0 4
39203: PUSH
39204: LD_INT 2
39206: ARRAY
39207: ST_TO_ADDR
// if h + 7 < height then
39208: LD_VAR 0 13
39212: PUSH
39213: LD_INT 7
39215: PLUS
39216: PUSH
39217: LD_VAR 0 15
39221: LESS
39222: IFFALSE 39251
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39224: LD_ADDR_VAR 0 18
39228: PUSH
39229: LD_INT 7
39231: PUSH
39232: LD_INT 28
39234: PUSH
39235: LD_INT 45
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: PUSH
39243: LD_VAR 0 12
39247: ARRAY
39248: ST_TO_ADDR
// break ;
39249: GO 39253
// end ; end ; end ;
39251: GO 39082
39253: POP
39254: POP
// end ; if not weapon then
39255: LD_VAR 0 18
39259: NOT
39260: IFFALSE 39320
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39262: LD_ADDR_VAR 0 5
39266: PUSH
39267: LD_VAR 0 5
39271: PUSH
39272: LD_INT 11
39274: PUSH
39275: LD_INT 30
39277: PUSH
39278: LD_INT 49
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: DIFF
39286: ST_TO_ADDR
// if not list then
39287: LD_VAR 0 5
39291: NOT
39292: IFFALSE 39296
// exit ;
39294: GO 39442
// weapon := list [ rand ( 1 , list ) ] ;
39296: LD_ADDR_VAR 0 18
39300: PUSH
39301: LD_VAR 0 5
39305: PUSH
39306: LD_INT 1
39308: PPUSH
39309: LD_VAR 0 5
39313: PPUSH
39314: CALL_OW 12
39318: ARRAY
39319: ST_TO_ADDR
// end ; if weapon then
39320: LD_VAR 0 18
39324: IFFALSE 39442
// begin tmp := CostOfWeapon ( weapon ) ;
39326: LD_ADDR_VAR 0 14
39330: PUSH
39331: LD_VAR 0 18
39335: PPUSH
39336: CALL_OW 451
39340: ST_TO_ADDR
// j := GetBase ( tower ) ;
39341: LD_ADDR_VAR 0 9
39345: PUSH
39346: LD_VAR 0 1
39350: PPUSH
39351: CALL_OW 274
39355: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39356: LD_VAR 0 9
39360: PPUSH
39361: LD_INT 1
39363: PPUSH
39364: CALL_OW 275
39368: PUSH
39369: LD_VAR 0 14
39373: PUSH
39374: LD_INT 1
39376: ARRAY
39377: GREATEREQUAL
39378: IFFALSE 39404
39380: PUSH
39381: LD_VAR 0 9
39385: PPUSH
39386: LD_INT 2
39388: PPUSH
39389: CALL_OW 275
39393: PUSH
39394: LD_VAR 0 14
39398: PUSH
39399: LD_INT 2
39401: ARRAY
39402: GREATEREQUAL
39403: AND
39404: IFFALSE 39430
39406: PUSH
39407: LD_VAR 0 9
39411: PPUSH
39412: LD_INT 3
39414: PPUSH
39415: CALL_OW 275
39419: PUSH
39420: LD_VAR 0 14
39424: PUSH
39425: LD_INT 3
39427: ARRAY
39428: GREATEREQUAL
39429: AND
39430: IFFALSE 39442
// result := weapon ;
39432: LD_ADDR_VAR 0 3
39436: PUSH
39437: LD_VAR 0 18
39441: ST_TO_ADDR
// end ; end ;
39442: LD_VAR 0 3
39446: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39447: LD_INT 0
39449: PPUSH
39450: PPUSH
// result := true ;
39451: LD_ADDR_VAR 0 3
39455: PUSH
39456: LD_INT 1
39458: ST_TO_ADDR
// if array1 = array2 then
39459: LD_VAR 0 1
39463: PUSH
39464: LD_VAR 0 2
39468: EQUAL
39469: IFFALSE 39529
// begin for i = 1 to array1 do
39471: LD_ADDR_VAR 0 4
39475: PUSH
39476: DOUBLE
39477: LD_INT 1
39479: DEC
39480: ST_TO_ADDR
39481: LD_VAR 0 1
39485: PUSH
39486: FOR_TO
39487: IFFALSE 39525
// if array1 [ i ] <> array2 [ i ] then
39489: LD_VAR 0 1
39493: PUSH
39494: LD_VAR 0 4
39498: ARRAY
39499: PUSH
39500: LD_VAR 0 2
39504: PUSH
39505: LD_VAR 0 4
39509: ARRAY
39510: NONEQUAL
39511: IFFALSE 39523
// begin result := false ;
39513: LD_ADDR_VAR 0 3
39517: PUSH
39518: LD_INT 0
39520: ST_TO_ADDR
// break ;
39521: GO 39525
// end ;
39523: GO 39486
39525: POP
39526: POP
// end else
39527: GO 39537
// result := false ;
39529: LD_ADDR_VAR 0 3
39533: PUSH
39534: LD_INT 0
39536: ST_TO_ADDR
// end ;
39537: LD_VAR 0 3
39541: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39542: LD_INT 0
39544: PPUSH
39545: PPUSH
// if not array1 or not array2 then
39546: LD_VAR 0 1
39550: NOT
39551: IFTRUE 39560
39553: PUSH
39554: LD_VAR 0 2
39558: NOT
39559: OR
39560: IFFALSE 39564
// exit ;
39562: GO 39628
// result := true ;
39564: LD_ADDR_VAR 0 3
39568: PUSH
39569: LD_INT 1
39571: ST_TO_ADDR
// for i = 1 to array1 do
39572: LD_ADDR_VAR 0 4
39576: PUSH
39577: DOUBLE
39578: LD_INT 1
39580: DEC
39581: ST_TO_ADDR
39582: LD_VAR 0 1
39586: PUSH
39587: FOR_TO
39588: IFFALSE 39626
// if array1 [ i ] <> array2 [ i ] then
39590: LD_VAR 0 1
39594: PUSH
39595: LD_VAR 0 4
39599: ARRAY
39600: PUSH
39601: LD_VAR 0 2
39605: PUSH
39606: LD_VAR 0 4
39610: ARRAY
39611: NONEQUAL
39612: IFFALSE 39624
// begin result := false ;
39614: LD_ADDR_VAR 0 3
39618: PUSH
39619: LD_INT 0
39621: ST_TO_ADDR
// break ;
39622: GO 39626
// end ;
39624: GO 39587
39626: POP
39627: POP
// end ;
39628: LD_VAR 0 3
39632: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39633: LD_INT 0
39635: PPUSH
39636: PPUSH
39637: PPUSH
// pom := GetBase ( fac ) ;
39638: LD_ADDR_VAR 0 5
39642: PUSH
39643: LD_VAR 0 1
39647: PPUSH
39648: CALL_OW 274
39652: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39653: LD_ADDR_VAR 0 4
39657: PUSH
39658: LD_VAR 0 2
39662: PUSH
39663: LD_INT 1
39665: ARRAY
39666: PPUSH
39667: LD_VAR 0 2
39671: PUSH
39672: LD_INT 2
39674: ARRAY
39675: PPUSH
39676: LD_VAR 0 2
39680: PUSH
39681: LD_INT 3
39683: ARRAY
39684: PPUSH
39685: LD_VAR 0 2
39689: PUSH
39690: LD_INT 4
39692: ARRAY
39693: PPUSH
39694: CALL_OW 449
39698: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39699: LD_ADDR_VAR 0 3
39703: PUSH
39704: LD_VAR 0 5
39708: PPUSH
39709: LD_INT 1
39711: PPUSH
39712: CALL_OW 275
39716: PUSH
39717: LD_VAR 0 4
39721: PUSH
39722: LD_INT 1
39724: ARRAY
39725: GREATEREQUAL
39726: IFFALSE 39752
39728: PUSH
39729: LD_VAR 0 5
39733: PPUSH
39734: LD_INT 2
39736: PPUSH
39737: CALL_OW 275
39741: PUSH
39742: LD_VAR 0 4
39746: PUSH
39747: LD_INT 2
39749: ARRAY
39750: GREATEREQUAL
39751: AND
39752: IFFALSE 39778
39754: PUSH
39755: LD_VAR 0 5
39759: PPUSH
39760: LD_INT 3
39762: PPUSH
39763: CALL_OW 275
39767: PUSH
39768: LD_VAR 0 4
39772: PUSH
39773: LD_INT 3
39775: ARRAY
39776: GREATEREQUAL
39777: AND
39778: ST_TO_ADDR
// end ;
39779: LD_VAR 0 3
39783: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39784: LD_INT 0
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
// pom := GetBase ( building ) ;
39790: LD_ADDR_VAR 0 3
39794: PUSH
39795: LD_VAR 0 1
39799: PPUSH
39800: CALL_OW 274
39804: ST_TO_ADDR
// if not pom then
39805: LD_VAR 0 3
39809: NOT
39810: IFFALSE 39814
// exit ;
39812: GO 39988
// btype := GetBType ( building ) ;
39814: LD_ADDR_VAR 0 5
39818: PUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 266
39828: ST_TO_ADDR
// if btype = b_armoury then
39829: LD_VAR 0 5
39833: PUSH
39834: LD_INT 4
39836: EQUAL
39837: IFFALSE 39847
// btype := b_barracks ;
39839: LD_ADDR_VAR 0 5
39843: PUSH
39844: LD_INT 5
39846: ST_TO_ADDR
// if btype = b_depot then
39847: LD_VAR 0 5
39851: PUSH
39852: LD_INT 0
39854: EQUAL
39855: IFFALSE 39865
// btype := b_warehouse ;
39857: LD_ADDR_VAR 0 5
39861: PUSH
39862: LD_INT 1
39864: ST_TO_ADDR
// if btype = b_workshop then
39865: LD_VAR 0 5
39869: PUSH
39870: LD_INT 2
39872: EQUAL
39873: IFFALSE 39883
// btype := b_factory ;
39875: LD_ADDR_VAR 0 5
39879: PUSH
39880: LD_INT 3
39882: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39883: LD_ADDR_VAR 0 4
39887: PUSH
39888: LD_VAR 0 5
39892: PPUSH
39893: LD_VAR 0 1
39897: PPUSH
39898: CALL_OW 248
39902: PPUSH
39903: CALL_OW 450
39907: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39908: LD_ADDR_VAR 0 2
39912: PUSH
39913: LD_VAR 0 3
39917: PPUSH
39918: LD_INT 1
39920: PPUSH
39921: CALL_OW 275
39925: PUSH
39926: LD_VAR 0 4
39930: PUSH
39931: LD_INT 1
39933: ARRAY
39934: GREATEREQUAL
39935: IFFALSE 39961
39937: PUSH
39938: LD_VAR 0 3
39942: PPUSH
39943: LD_INT 2
39945: PPUSH
39946: CALL_OW 275
39950: PUSH
39951: LD_VAR 0 4
39955: PUSH
39956: LD_INT 2
39958: ARRAY
39959: GREATEREQUAL
39960: AND
39961: IFFALSE 39987
39963: PUSH
39964: LD_VAR 0 3
39968: PPUSH
39969: LD_INT 3
39971: PPUSH
39972: CALL_OW 275
39976: PUSH
39977: LD_VAR 0 4
39981: PUSH
39982: LD_INT 3
39984: ARRAY
39985: GREATEREQUAL
39986: AND
39987: ST_TO_ADDR
// end ;
39988: LD_VAR 0 2
39992: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39993: LD_INT 0
39995: PPUSH
39996: PPUSH
39997: PPUSH
// pom := GetBase ( building ) ;
39998: LD_ADDR_VAR 0 4
40002: PUSH
40003: LD_VAR 0 1
40007: PPUSH
40008: CALL_OW 274
40012: ST_TO_ADDR
// if not pom then
40013: LD_VAR 0 4
40017: NOT
40018: IFFALSE 40022
// exit ;
40020: GO 40127
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40022: LD_ADDR_VAR 0 5
40026: PUSH
40027: LD_VAR 0 2
40031: PPUSH
40032: LD_VAR 0 1
40036: PPUSH
40037: CALL_OW 248
40041: PPUSH
40042: CALL_OW 450
40046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40047: LD_ADDR_VAR 0 3
40051: PUSH
40052: LD_VAR 0 4
40056: PPUSH
40057: LD_INT 1
40059: PPUSH
40060: CALL_OW 275
40064: PUSH
40065: LD_VAR 0 5
40069: PUSH
40070: LD_INT 1
40072: ARRAY
40073: GREATEREQUAL
40074: IFFALSE 40100
40076: PUSH
40077: LD_VAR 0 4
40081: PPUSH
40082: LD_INT 2
40084: PPUSH
40085: CALL_OW 275
40089: PUSH
40090: LD_VAR 0 5
40094: PUSH
40095: LD_INT 2
40097: ARRAY
40098: GREATEREQUAL
40099: AND
40100: IFFALSE 40126
40102: PUSH
40103: LD_VAR 0 4
40107: PPUSH
40108: LD_INT 3
40110: PPUSH
40111: CALL_OW 275
40115: PUSH
40116: LD_VAR 0 5
40120: PUSH
40121: LD_INT 3
40123: ARRAY
40124: GREATEREQUAL
40125: AND
40126: ST_TO_ADDR
// end ;
40127: LD_VAR 0 3
40131: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40132: LD_INT 0
40134: PPUSH
40135: PPUSH
40136: PPUSH
40137: PPUSH
40138: PPUSH
40139: PPUSH
40140: PPUSH
40141: PPUSH
40142: PPUSH
40143: PPUSH
40144: PPUSH
// result := false ;
40145: LD_ADDR_VAR 0 8
40149: PUSH
40150: LD_INT 0
40152: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40153: LD_VAR 0 5
40157: NOT
40158: IFTRUE 40167
40160: PUSH
40161: LD_VAR 0 1
40165: NOT
40166: OR
40167: IFTRUE 40176
40169: PUSH
40170: LD_VAR 0 2
40174: NOT
40175: OR
40176: IFTRUE 40185
40178: PUSH
40179: LD_VAR 0 3
40183: NOT
40184: OR
40185: IFFALSE 40189
// exit ;
40187: GO 41015
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40189: LD_ADDR_VAR 0 14
40193: PUSH
40194: LD_VAR 0 1
40198: PPUSH
40199: LD_VAR 0 2
40203: PPUSH
40204: LD_VAR 0 3
40208: PPUSH
40209: LD_VAR 0 4
40213: PPUSH
40214: LD_VAR 0 5
40218: PUSH
40219: LD_INT 1
40221: ARRAY
40222: PPUSH
40223: CALL_OW 248
40227: PPUSH
40228: LD_INT 0
40230: PPUSH
40231: CALL 42296 0 6
40235: ST_TO_ADDR
// if not hexes then
40236: LD_VAR 0 14
40240: NOT
40241: IFFALSE 40245
// exit ;
40243: GO 41015
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40245: LD_ADDR_VAR 0 17
40249: PUSH
40250: LD_VAR 0 5
40254: PPUSH
40255: LD_INT 22
40257: PUSH
40258: LD_VAR 0 13
40262: PPUSH
40263: CALL_OW 255
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: LD_INT 30
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 30
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PPUSH
40304: CALL_OW 72
40308: ST_TO_ADDR
// for i = 1 to hexes do
40309: LD_ADDR_VAR 0 9
40313: PUSH
40314: DOUBLE
40315: LD_INT 1
40317: DEC
40318: ST_TO_ADDR
40319: LD_VAR 0 14
40323: PUSH
40324: FOR_TO
40325: IFFALSE 41013
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40327: LD_ADDR_VAR 0 13
40331: PUSH
40332: LD_VAR 0 14
40336: PUSH
40337: LD_VAR 0 9
40341: ARRAY
40342: PUSH
40343: LD_INT 1
40345: ARRAY
40346: PPUSH
40347: LD_VAR 0 14
40351: PUSH
40352: LD_VAR 0 9
40356: ARRAY
40357: PUSH
40358: LD_INT 2
40360: ARRAY
40361: PPUSH
40362: CALL_OW 428
40366: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40367: LD_VAR 0 14
40371: PUSH
40372: LD_VAR 0 9
40376: ARRAY
40377: PUSH
40378: LD_INT 1
40380: ARRAY
40381: PPUSH
40382: LD_VAR 0 14
40386: PUSH
40387: LD_VAR 0 9
40391: ARRAY
40392: PUSH
40393: LD_INT 2
40395: ARRAY
40396: PPUSH
40397: CALL_OW 351
40401: IFTRUE 40440
40403: PUSH
40404: LD_VAR 0 14
40408: PUSH
40409: LD_VAR 0 9
40413: ARRAY
40414: PUSH
40415: LD_INT 1
40417: ARRAY
40418: PPUSH
40419: LD_VAR 0 14
40423: PUSH
40424: LD_VAR 0 9
40428: ARRAY
40429: PUSH
40430: LD_INT 2
40432: ARRAY
40433: PPUSH
40434: CALL_OW 488
40438: NOT
40439: OR
40440: IFTRUE 40457
40442: PUSH
40443: LD_VAR 0 13
40447: PPUSH
40448: CALL_OW 247
40452: PUSH
40453: LD_INT 3
40455: EQUAL
40456: OR
40457: IFFALSE 40463
// exit ;
40459: POP
40460: POP
40461: GO 41015
// if not tmp then
40463: LD_VAR 0 13
40467: NOT
40468: IFFALSE 40472
// continue ;
40470: GO 40324
// result := true ;
40472: LD_ADDR_VAR 0 8
40476: PUSH
40477: LD_INT 1
40479: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40480: LD_VAR 0 6
40484: IFFALSE 40501
40486: PUSH
40487: LD_VAR 0 13
40491: PPUSH
40492: CALL_OW 247
40496: PUSH
40497: LD_INT 2
40499: EQUAL
40500: AND
40501: IFFALSE 40518
40503: PUSH
40504: LD_VAR 0 13
40508: PPUSH
40509: CALL_OW 263
40513: PUSH
40514: LD_INT 1
40516: EQUAL
40517: AND
40518: IFFALSE 40682
// begin if IsDrivenBy ( tmp ) then
40520: LD_VAR 0 13
40524: PPUSH
40525: CALL_OW 311
40529: IFFALSE 40533
// continue ;
40531: GO 40324
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40533: LD_VAR 0 6
40537: PPUSH
40538: LD_INT 3
40540: PUSH
40541: LD_INT 60
40543: PUSH
40544: EMPTY
40545: LIST
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 3
40553: PUSH
40554: LD_INT 55
40556: PUSH
40557: EMPTY
40558: LIST
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PPUSH
40568: CALL_OW 72
40572: IFFALSE 40680
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40574: LD_ADDR_VAR 0 18
40578: PUSH
40579: LD_VAR 0 6
40583: PPUSH
40584: LD_INT 3
40586: PUSH
40587: LD_INT 60
40589: PUSH
40590: EMPTY
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 3
40599: PUSH
40600: LD_INT 55
40602: PUSH
40603: EMPTY
40604: LIST
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PPUSH
40614: CALL_OW 72
40618: PUSH
40619: LD_INT 1
40621: ARRAY
40622: ST_TO_ADDR
// if IsInUnit ( driver ) then
40623: LD_VAR 0 18
40627: PPUSH
40628: CALL_OW 310
40632: IFFALSE 40643
// ComExit ( driver ) ;
40634: LD_VAR 0 18
40638: PPUSH
40639: CALL 66296 0 1
// AddComEnterUnit ( driver , tmp ) ;
40643: LD_VAR 0 18
40647: PPUSH
40648: LD_VAR 0 13
40652: PPUSH
40653: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40657: LD_VAR 0 18
40661: PPUSH
40662: LD_VAR 0 7
40666: PPUSH
40667: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40671: LD_VAR 0 18
40675: PPUSH
40676: CALL_OW 181
// end ; continue ;
40680: GO 40324
// end ; if not cleaners or not tmp in cleaners then
40682: LD_VAR 0 6
40686: NOT
40687: IFTRUE 40702
40689: PUSH
40690: LD_VAR 0 13
40694: PUSH
40695: LD_VAR 0 6
40699: IN
40700: NOT
40701: OR
40702: IFFALSE 41011
// begin if dep then
40704: LD_VAR 0 17
40708: IFFALSE 40844
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40710: LD_ADDR_VAR 0 16
40714: PUSH
40715: LD_VAR 0 17
40719: PUSH
40720: LD_INT 1
40722: ARRAY
40723: PPUSH
40724: CALL_OW 250
40728: PPUSH
40729: LD_VAR 0 17
40733: PUSH
40734: LD_INT 1
40736: ARRAY
40737: PPUSH
40738: CALL_OW 254
40742: PPUSH
40743: LD_INT 5
40745: PPUSH
40746: CALL_OW 272
40750: PUSH
40751: LD_VAR 0 17
40755: PUSH
40756: LD_INT 1
40758: ARRAY
40759: PPUSH
40760: CALL_OW 251
40764: PPUSH
40765: LD_VAR 0 17
40769: PUSH
40770: LD_INT 1
40772: ARRAY
40773: PPUSH
40774: CALL_OW 254
40778: PPUSH
40779: LD_INT 5
40781: PPUSH
40782: CALL_OW 273
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40791: LD_VAR 0 16
40795: PUSH
40796: LD_INT 1
40798: ARRAY
40799: PPUSH
40800: LD_VAR 0 16
40804: PUSH
40805: LD_INT 2
40807: ARRAY
40808: PPUSH
40809: CALL_OW 488
40813: IFFALSE 40844
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40815: LD_VAR 0 13
40819: PPUSH
40820: LD_VAR 0 16
40824: PUSH
40825: LD_INT 1
40827: ARRAY
40828: PPUSH
40829: LD_VAR 0 16
40833: PUSH
40834: LD_INT 2
40836: ARRAY
40837: PPUSH
40838: CALL_OW 111
// continue ;
40842: GO 40324
// end ; end ; r := GetDir ( tmp ) ;
40844: LD_ADDR_VAR 0 15
40848: PUSH
40849: LD_VAR 0 13
40853: PPUSH
40854: CALL_OW 254
40858: ST_TO_ADDR
// if r = 5 then
40859: LD_VAR 0 15
40863: PUSH
40864: LD_INT 5
40866: EQUAL
40867: IFFALSE 40877
// r := 0 ;
40869: LD_ADDR_VAR 0 15
40873: PUSH
40874: LD_INT 0
40876: ST_TO_ADDR
// for j = r to 5 do
40877: LD_ADDR_VAR 0 10
40881: PUSH
40882: DOUBLE
40883: LD_VAR 0 15
40887: DEC
40888: ST_TO_ADDR
40889: LD_INT 5
40891: PUSH
40892: FOR_TO
40893: IFFALSE 41009
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40895: LD_ADDR_VAR 0 11
40899: PUSH
40900: LD_VAR 0 13
40904: PPUSH
40905: CALL_OW 250
40909: PPUSH
40910: LD_VAR 0 10
40914: PPUSH
40915: LD_INT 2
40917: PPUSH
40918: CALL_OW 272
40922: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40923: LD_ADDR_VAR 0 12
40927: PUSH
40928: LD_VAR 0 13
40932: PPUSH
40933: CALL_OW 251
40937: PPUSH
40938: LD_VAR 0 10
40942: PPUSH
40943: LD_INT 2
40945: PPUSH
40946: CALL_OW 273
40950: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40951: LD_VAR 0 11
40955: PPUSH
40956: LD_VAR 0 12
40960: PPUSH
40961: CALL_OW 488
40965: IFFALSE 40984
40967: PUSH
40968: LD_VAR 0 11
40972: PPUSH
40973: LD_VAR 0 12
40977: PPUSH
40978: CALL_OW 428
40982: NOT
40983: AND
40984: IFFALSE 41007
// begin ComMoveXY ( tmp , _x , _y ) ;
40986: LD_VAR 0 13
40990: PPUSH
40991: LD_VAR 0 11
40995: PPUSH
40996: LD_VAR 0 12
41000: PPUSH
41001: CALL_OW 111
// break ;
41005: GO 41009
// end ; end ;
41007: GO 40892
41009: POP
41010: POP
// end ; end ;
41011: GO 40324
41013: POP
41014: POP
// end ;
41015: LD_VAR 0 8
41019: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41020: LD_INT 0
41022: PPUSH
// result := true ;
41023: LD_ADDR_VAR 0 3
41027: PUSH
41028: LD_INT 1
41030: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41031: LD_VAR 0 2
41035: PUSH
41036: LD_INT 24
41038: DOUBLE
41039: EQUAL
41040: IFTRUE 41050
41042: LD_INT 33
41044: DOUBLE
41045: EQUAL
41046: IFTRUE 41050
41048: GO 41075
41050: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41051: LD_ADDR_VAR 0 3
41055: PUSH
41056: LD_INT 32
41058: PPUSH
41059: LD_VAR 0 1
41063: PPUSH
41064: CALL_OW 321
41068: PUSH
41069: LD_INT 2
41071: EQUAL
41072: ST_TO_ADDR
41073: GO 41391
41075: LD_INT 20
41077: DOUBLE
41078: EQUAL
41079: IFTRUE 41083
41081: GO 41108
41083: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41084: LD_ADDR_VAR 0 3
41088: PUSH
41089: LD_INT 6
41091: PPUSH
41092: LD_VAR 0 1
41096: PPUSH
41097: CALL_OW 321
41101: PUSH
41102: LD_INT 2
41104: EQUAL
41105: ST_TO_ADDR
41106: GO 41391
41108: LD_INT 22
41110: DOUBLE
41111: EQUAL
41112: IFTRUE 41122
41114: LD_INT 36
41116: DOUBLE
41117: EQUAL
41118: IFTRUE 41122
41120: GO 41147
41122: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41123: LD_ADDR_VAR 0 3
41127: PUSH
41128: LD_INT 15
41130: PPUSH
41131: LD_VAR 0 1
41135: PPUSH
41136: CALL_OW 321
41140: PUSH
41141: LD_INT 2
41143: EQUAL
41144: ST_TO_ADDR
41145: GO 41391
41147: LD_INT 30
41149: DOUBLE
41150: EQUAL
41151: IFTRUE 41155
41153: GO 41180
41155: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41156: LD_ADDR_VAR 0 3
41160: PUSH
41161: LD_INT 20
41163: PPUSH
41164: LD_VAR 0 1
41168: PPUSH
41169: CALL_OW 321
41173: PUSH
41174: LD_INT 2
41176: EQUAL
41177: ST_TO_ADDR
41178: GO 41391
41180: LD_INT 28
41182: DOUBLE
41183: EQUAL
41184: IFTRUE 41194
41186: LD_INT 21
41188: DOUBLE
41189: EQUAL
41190: IFTRUE 41194
41192: GO 41219
41194: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41195: LD_ADDR_VAR 0 3
41199: PUSH
41200: LD_INT 21
41202: PPUSH
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 321
41212: PUSH
41213: LD_INT 2
41215: EQUAL
41216: ST_TO_ADDR
41217: GO 41391
41219: LD_INT 16
41221: DOUBLE
41222: EQUAL
41223: IFTRUE 41227
41225: GO 41252
41227: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41228: LD_ADDR_VAR 0 3
41232: PUSH
41233: LD_INT 84
41235: PPUSH
41236: LD_VAR 0 1
41240: PPUSH
41241: CALL_OW 321
41245: PUSH
41246: LD_INT 2
41248: EQUAL
41249: ST_TO_ADDR
41250: GO 41391
41252: LD_INT 19
41254: DOUBLE
41255: EQUAL
41256: IFTRUE 41266
41258: LD_INT 23
41260: DOUBLE
41261: EQUAL
41262: IFTRUE 41266
41264: GO 41291
41266: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41267: LD_ADDR_VAR 0 3
41271: PUSH
41272: LD_INT 83
41274: PPUSH
41275: LD_VAR 0 1
41279: PPUSH
41280: CALL_OW 321
41284: PUSH
41285: LD_INT 2
41287: EQUAL
41288: ST_TO_ADDR
41289: GO 41391
41291: LD_INT 17
41293: DOUBLE
41294: EQUAL
41295: IFTRUE 41299
41297: GO 41324
41299: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41300: LD_ADDR_VAR 0 3
41304: PUSH
41305: LD_INT 39
41307: PPUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: CALL_OW 321
41317: PUSH
41318: LD_INT 2
41320: EQUAL
41321: ST_TO_ADDR
41322: GO 41391
41324: LD_INT 18
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41332
41330: GO 41357
41332: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_INT 40
41340: PPUSH
41341: LD_VAR 0 1
41345: PPUSH
41346: CALL_OW 321
41350: PUSH
41351: LD_INT 2
41353: EQUAL
41354: ST_TO_ADDR
41355: GO 41391
41357: LD_INT 27
41359: DOUBLE
41360: EQUAL
41361: IFTRUE 41365
41363: GO 41390
41365: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41366: LD_ADDR_VAR 0 3
41370: PUSH
41371: LD_INT 35
41373: PPUSH
41374: LD_VAR 0 1
41378: PPUSH
41379: CALL_OW 321
41383: PUSH
41384: LD_INT 2
41386: EQUAL
41387: ST_TO_ADDR
41388: GO 41391
41390: POP
// end ;
41391: LD_VAR 0 3
41395: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41396: LD_INT 0
41398: PPUSH
41399: PPUSH
41400: PPUSH
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
41407: PPUSH
41408: PPUSH
// result := false ;
41409: LD_ADDR_VAR 0 6
41413: PUSH
41414: LD_INT 0
41416: ST_TO_ADDR
// if btype = b_depot then
41417: LD_VAR 0 2
41421: PUSH
41422: LD_INT 0
41424: EQUAL
41425: IFFALSE 41437
// begin result := true ;
41427: LD_ADDR_VAR 0 6
41431: PUSH
41432: LD_INT 1
41434: ST_TO_ADDR
// exit ;
41435: GO 42291
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41437: LD_VAR 0 1
41441: NOT
41442: IFTRUE 41467
41444: PUSH
41445: LD_VAR 0 1
41449: PPUSH
41450: CALL_OW 266
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: IN
41465: NOT
41466: OR
41467: IFTRUE 41476
41469: PUSH
41470: LD_VAR 0 2
41474: NOT
41475: OR
41476: IFTRUE 41512
41478: PUSH
41479: LD_VAR 0 5
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: LD_INT 3
41495: PUSH
41496: LD_INT 4
41498: PUSH
41499: LD_INT 5
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: IN
41510: NOT
41511: OR
41512: IFTRUE 41531
41514: PUSH
41515: LD_VAR 0 3
41519: PPUSH
41520: LD_VAR 0 4
41524: PPUSH
41525: CALL_OW 488
41529: NOT
41530: OR
41531: IFFALSE 41535
// exit ;
41533: GO 42291
// side := GetSide ( depot ) ;
41535: LD_ADDR_VAR 0 9
41539: PUSH
41540: LD_VAR 0 1
41544: PPUSH
41545: CALL_OW 255
41549: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41550: LD_VAR 0 9
41554: PPUSH
41555: LD_VAR 0 2
41559: PPUSH
41560: CALL 41020 0 2
41564: NOT
41565: IFFALSE 41569
// exit ;
41567: GO 42291
// pom := GetBase ( depot ) ;
41569: LD_ADDR_VAR 0 10
41573: PUSH
41574: LD_VAR 0 1
41578: PPUSH
41579: CALL_OW 274
41583: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41584: LD_ADDR_VAR 0 11
41588: PUSH
41589: LD_VAR 0 2
41593: PPUSH
41594: LD_VAR 0 1
41598: PPUSH
41599: CALL_OW 248
41603: PPUSH
41604: CALL_OW 450
41608: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41609: LD_VAR 0 10
41613: PPUSH
41614: LD_INT 1
41616: PPUSH
41617: CALL_OW 275
41621: PUSH
41622: LD_VAR 0 11
41626: PUSH
41627: LD_INT 1
41629: ARRAY
41630: GREATEREQUAL
41631: IFFALSE 41657
41633: PUSH
41634: LD_VAR 0 10
41638: PPUSH
41639: LD_INT 2
41641: PPUSH
41642: CALL_OW 275
41646: PUSH
41647: LD_VAR 0 11
41651: PUSH
41652: LD_INT 2
41654: ARRAY
41655: GREATEREQUAL
41656: AND
41657: IFFALSE 41683
41659: PUSH
41660: LD_VAR 0 10
41664: PPUSH
41665: LD_INT 3
41667: PPUSH
41668: CALL_OW 275
41672: PUSH
41673: LD_VAR 0 11
41677: PUSH
41678: LD_INT 3
41680: ARRAY
41681: GREATEREQUAL
41682: AND
41683: NOT
41684: IFFALSE 41688
// exit ;
41686: GO 42291
// if GetBType ( depot ) = b_depot then
41688: LD_VAR 0 1
41692: PPUSH
41693: CALL_OW 266
41697: PUSH
41698: LD_INT 0
41700: EQUAL
41701: IFFALSE 41713
// dist := 28 else
41703: LD_ADDR_VAR 0 14
41707: PUSH
41708: LD_INT 28
41710: ST_TO_ADDR
41711: GO 41721
// dist := 36 ;
41713: LD_ADDR_VAR 0 14
41717: PUSH
41718: LD_INT 36
41720: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41721: LD_VAR 0 1
41725: PPUSH
41726: LD_VAR 0 3
41730: PPUSH
41731: LD_VAR 0 4
41735: PPUSH
41736: CALL_OW 297
41740: PUSH
41741: LD_VAR 0 14
41745: GREATER
41746: IFFALSE 41750
// exit ;
41748: GO 42291
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41750: LD_ADDR_VAR 0 12
41754: PUSH
41755: LD_VAR 0 2
41759: PPUSH
41760: LD_VAR 0 3
41764: PPUSH
41765: LD_VAR 0 4
41769: PPUSH
41770: LD_VAR 0 5
41774: PPUSH
41775: LD_VAR 0 1
41779: PPUSH
41780: CALL_OW 248
41784: PPUSH
41785: LD_INT 0
41787: PPUSH
41788: CALL 42296 0 6
41792: ST_TO_ADDR
// if not hexes then
41793: LD_VAR 0 12
41797: NOT
41798: IFFALSE 41802
// exit ;
41800: GO 42291
// hex := GetHexInfo ( x , y ) ;
41802: LD_ADDR_VAR 0 15
41806: PUSH
41807: LD_VAR 0 3
41811: PPUSH
41812: LD_VAR 0 4
41816: PPUSH
41817: CALL_OW 546
41821: ST_TO_ADDR
// if hex [ 1 ] then
41822: LD_VAR 0 15
41826: PUSH
41827: LD_INT 1
41829: ARRAY
41830: IFFALSE 41834
// exit ;
41832: GO 42291
// height := hex [ 2 ] ;
41834: LD_ADDR_VAR 0 13
41838: PUSH
41839: LD_VAR 0 15
41843: PUSH
41844: LD_INT 2
41846: ARRAY
41847: ST_TO_ADDR
// for i = 1 to hexes do
41848: LD_ADDR_VAR 0 7
41852: PUSH
41853: DOUBLE
41854: LD_INT 1
41856: DEC
41857: ST_TO_ADDR
41858: LD_VAR 0 12
41862: PUSH
41863: FOR_TO
41864: IFFALSE 42208
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41866: LD_VAR 0 12
41870: PUSH
41871: LD_VAR 0 7
41875: ARRAY
41876: PUSH
41877: LD_INT 1
41879: ARRAY
41880: PPUSH
41881: LD_VAR 0 12
41885: PUSH
41886: LD_VAR 0 7
41890: ARRAY
41891: PUSH
41892: LD_INT 2
41894: ARRAY
41895: PPUSH
41896: CALL_OW 488
41900: NOT
41901: IFTRUE 41943
41903: PUSH
41904: LD_VAR 0 12
41908: PUSH
41909: LD_VAR 0 7
41913: ARRAY
41914: PUSH
41915: LD_INT 1
41917: ARRAY
41918: PPUSH
41919: LD_VAR 0 12
41923: PUSH
41924: LD_VAR 0 7
41928: ARRAY
41929: PUSH
41930: LD_INT 2
41932: ARRAY
41933: PPUSH
41934: CALL_OW 428
41938: PUSH
41939: LD_INT 0
41941: GREATER
41942: OR
41943: IFTRUE 41981
41945: PUSH
41946: LD_VAR 0 12
41950: PUSH
41951: LD_VAR 0 7
41955: ARRAY
41956: PUSH
41957: LD_INT 1
41959: ARRAY
41960: PPUSH
41961: LD_VAR 0 12
41965: PUSH
41966: LD_VAR 0 7
41970: ARRAY
41971: PUSH
41972: LD_INT 2
41974: ARRAY
41975: PPUSH
41976: CALL_OW 351
41980: OR
41981: IFFALSE 41987
// exit ;
41983: POP
41984: POP
41985: GO 42291
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41987: LD_ADDR_VAR 0 8
41991: PUSH
41992: LD_VAR 0 12
41996: PUSH
41997: LD_VAR 0 7
42001: ARRAY
42002: PUSH
42003: LD_INT 1
42005: ARRAY
42006: PPUSH
42007: LD_VAR 0 12
42011: PUSH
42012: LD_VAR 0 7
42016: ARRAY
42017: PUSH
42018: LD_INT 2
42020: ARRAY
42021: PPUSH
42022: CALL_OW 546
42026: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42027: LD_VAR 0 8
42031: PUSH
42032: LD_INT 1
42034: ARRAY
42035: IFTRUE 42057
42037: PUSH
42038: LD_VAR 0 8
42042: PUSH
42043: LD_INT 2
42045: ARRAY
42046: PUSH
42047: LD_VAR 0 13
42051: PUSH
42052: LD_INT 2
42054: PLUS
42055: GREATER
42056: OR
42057: IFTRUE 42079
42059: PUSH
42060: LD_VAR 0 8
42064: PUSH
42065: LD_INT 2
42067: ARRAY
42068: PUSH
42069: LD_VAR 0 13
42073: PUSH
42074: LD_INT 2
42076: MINUS
42077: LESS
42078: OR
42079: IFTRUE 42147
42081: PUSH
42082: LD_VAR 0 8
42086: PUSH
42087: LD_INT 3
42089: ARRAY
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 8
42096: PUSH
42097: LD_INT 9
42099: PUSH
42100: LD_INT 10
42102: PUSH
42103: LD_INT 11
42105: PUSH
42106: LD_INT 12
42108: PUSH
42109: LD_INT 13
42111: PUSH
42112: LD_INT 16
42114: PUSH
42115: LD_INT 17
42117: PUSH
42118: LD_INT 18
42120: PUSH
42121: LD_INT 19
42123: PUSH
42124: LD_INT 20
42126: PUSH
42127: LD_INT 21
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: IN
42145: NOT
42146: OR
42147: IFTRUE 42160
42149: PUSH
42150: LD_VAR 0 8
42154: PUSH
42155: LD_INT 5
42157: ARRAY
42158: NOT
42159: OR
42160: IFTRUE 42200
42162: PUSH
42163: LD_VAR 0 8
42167: PUSH
42168: LD_INT 6
42170: ARRAY
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: LD_INT 2
42177: PUSH
42178: LD_INT 7
42180: PUSH
42181: LD_INT 9
42183: PUSH
42184: LD_INT 10
42186: PUSH
42187: LD_INT 11
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: IN
42198: NOT
42199: OR
42200: IFFALSE 42206
// exit ;
42202: POP
42203: POP
42204: GO 42291
// end ;
42206: GO 41863
42208: POP
42209: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42210: LD_VAR 0 9
42214: PPUSH
42215: LD_VAR 0 3
42219: PPUSH
42220: LD_VAR 0 4
42224: PPUSH
42225: LD_INT 20
42227: PPUSH
42228: CALL 34110 0 4
42232: PUSH
42233: LD_INT 4
42235: ARRAY
42236: IFFALSE 42240
// exit ;
42238: GO 42291
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42240: LD_VAR 0 2
42244: PUSH
42245: LD_INT 29
42247: PUSH
42248: LD_INT 30
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: IN
42255: IFFALSE 42279
42257: PUSH
42258: LD_VAR 0 3
42262: PPUSH
42263: LD_VAR 0 4
42267: PPUSH
42268: LD_VAR 0 9
42272: PPUSH
42273: CALL_OW 440
42277: NOT
42278: AND
42279: IFFALSE 42283
// exit ;
42281: GO 42291
// result := true ;
42283: LD_ADDR_VAR 0 6
42287: PUSH
42288: LD_INT 1
42290: ST_TO_ADDR
// end ;
42291: LD_VAR 0 6
42295: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42296: LD_INT 0
42298: PPUSH
42299: PPUSH
42300: PPUSH
42301: PPUSH
42302: PPUSH
42303: PPUSH
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
42311: PPUSH
42312: PPUSH
42313: PPUSH
42314: PPUSH
42315: PPUSH
42316: PPUSH
42317: PPUSH
42318: PPUSH
42319: PPUSH
42320: PPUSH
42321: PPUSH
42322: PPUSH
42323: PPUSH
42324: PPUSH
42325: PPUSH
42326: PPUSH
42327: PPUSH
42328: PPUSH
42329: PPUSH
42330: PPUSH
42331: PPUSH
42332: PPUSH
42333: PPUSH
42334: PPUSH
42335: PPUSH
42336: PPUSH
42337: PPUSH
42338: PPUSH
42339: PPUSH
42340: PPUSH
42341: PPUSH
42342: PPUSH
42343: PPUSH
42344: PPUSH
42345: PPUSH
42346: PPUSH
42347: PPUSH
42348: PPUSH
42349: PPUSH
42350: PPUSH
42351: PPUSH
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
// result = [ ] ;
42356: LD_ADDR_VAR 0 7
42360: PUSH
42361: EMPTY
42362: ST_TO_ADDR
// temp_list = [ ] ;
42363: LD_ADDR_VAR 0 9
42367: PUSH
42368: EMPTY
42369: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42370: LD_VAR 0 4
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: LD_INT 3
42386: PUSH
42387: LD_INT 4
42389: PUSH
42390: LD_INT 5
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: IN
42401: NOT
42402: IFTRUE 42445
42404: PUSH
42405: LD_VAR 0 1
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: IN
42420: IFFALSE 42444
42422: PUSH
42423: LD_VAR 0 5
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 3
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: LIST
42441: IN
42442: NOT
42443: AND
42444: OR
42445: IFFALSE 42449
// exit ;
42447: GO 60848
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42449: LD_VAR 0 1
42453: PUSH
42454: LD_INT 6
42456: PUSH
42457: LD_INT 7
42459: PUSH
42460: LD_INT 8
42462: PUSH
42463: LD_INT 13
42465: PUSH
42466: LD_INT 12
42468: PUSH
42469: LD_INT 15
42471: PUSH
42472: LD_INT 11
42474: PUSH
42475: LD_INT 14
42477: PUSH
42478: LD_INT 10
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: IN
42492: IFFALSE 42502
// btype = b_lab ;
42494: LD_ADDR_VAR 0 1
42498: PUSH
42499: LD_INT 6
42501: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42502: LD_VAR 0 6
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: LIST
42520: IN
42521: NOT
42522: IFTRUE 42590
42524: PUSH
42525: LD_VAR 0 1
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 3
42541: PUSH
42542: LD_INT 6
42544: PUSH
42545: LD_INT 36
42547: PUSH
42548: LD_INT 4
42550: PUSH
42551: LD_INT 5
42553: PUSH
42554: LD_INT 31
42556: PUSH
42557: LD_INT 32
42559: PUSH
42560: LD_INT 33
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: IN
42576: NOT
42577: IFFALSE 42589
42579: PUSH
42580: LD_VAR 0 6
42584: PUSH
42585: LD_INT 1
42587: EQUAL
42588: AND
42589: OR
42590: IFTRUE 42622
42592: PUSH
42593: LD_VAR 0 1
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: IN
42608: NOT
42609: IFFALSE 42621
42611: PUSH
42612: LD_VAR 0 6
42616: PUSH
42617: LD_INT 2
42619: EQUAL
42620: AND
42621: OR
42622: IFFALSE 42632
// mode = 0 ;
42624: LD_ADDR_VAR 0 6
42628: PUSH
42629: LD_INT 0
42631: ST_TO_ADDR
// case mode of 0 :
42632: LD_VAR 0 6
42636: PUSH
42637: LD_INT 0
42639: DOUBLE
42640: EQUAL
42641: IFTRUE 42645
42643: GO 54098
42645: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42646: LD_ADDR_VAR 0 11
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: LD_INT 2
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 3
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 3
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42839: LD_ADDR_VAR 0 12
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: NEG
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 3
42996: NEG
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 3
43007: NEG
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43035: LD_ADDR_VAR 0 13
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: LD_INT 3
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 3
43194: NEG
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 3
43206: NEG
43207: PUSH
43208: LD_INT 3
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43234: LD_ADDR_VAR 0 14
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 3
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 3
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43430: LD_ADDR_VAR 0 15
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 2
43553: NEG
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 2
43564: NEG
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 3
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43623: LD_ADDR_VAR 0 16
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 3
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 3
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43816: LD_ADDR_VAR 0 17
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44046: LD_ADDR_VAR 0 18
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: NEG
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44276: LD_ADDR_VAR 0 19
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 2
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44506: LD_ADDR_VAR 0 20
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 2
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 2
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44736: LD_ADDR_VAR 0 21
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: NEG
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44966: LD_ADDR_VAR 0 22
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45196: LD_ADDR_VAR 0 23
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 3
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 3
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45476: LD_ADDR_VAR 0 24
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: LD_INT 2
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45752: LD_ADDR_VAR 0 25
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 2
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 3
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 3
45973: PUSH
45974: LD_INT 2
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: LD_INT 3
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: LD_INT 3
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46026: LD_ADDR_VAR 0 26
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 3
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46302: LD_ADDR_VAR 0 27
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 3
46535: NEG
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 3
46547: NEG
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46582: LD_ADDR_VAR 0 28
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: LD_INT 3
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 3
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 3
46817: NEG
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 3
46829: NEG
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46864: LD_ADDR_VAR 0 29
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: LD_INT 3
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 3
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 3
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 3
47108: NEG
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47143: LD_ADDR_VAR 0 30
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 2
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 2
47320: NEG
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 3
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 3
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 3
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47421: LD_ADDR_VAR 0 31
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 3
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 3
47664: NEG
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47699: LD_ADDR_VAR 0 32
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 3
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 3
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 3
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47977: LD_ADDR_VAR 0 33
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 2
48143: NEG
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: LD_INT 3
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 3
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 3
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48256: LD_ADDR_VAR 0 34
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: LD_INT 3
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 2
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 3
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: LD_INT 3
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 3
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48536: LD_ADDR_VAR 0 35
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48648: LD_ADDR_VAR 0 36
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48760: LD_ADDR_VAR 0 37
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48872: LD_ADDR_VAR 0 38
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48984: LD_ADDR_VAR 0 39
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49096: LD_ADDR_VAR 0 40
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49208: LD_ADDR_VAR 0 41
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: LD_INT 3
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: LD_INT 3
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 3
49505: NEG
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 3
49517: NEG
49518: PUSH
49519: LD_INT 3
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49558: LD_ADDR_VAR 0 42
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: LD_INT 3
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 3
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: LD_INT 3
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 3
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 3
49804: PUSH
49805: LD_INT 3
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: NEG
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 3
49867: NEG
49868: PUSH
49869: LD_INT 3
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49908: LD_ADDR_VAR 0 43
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: LD_INT 2
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 3
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 3
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 3
50204: NEG
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 3
50215: NEG
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50256: LD_ADDR_VAR 0 44
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 2
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 2
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: LD_INT 3
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 3
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 3
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 3
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 3
50499: PUSH
50500: LD_INT 3
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 3
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 3
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: LD_INT 3
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50606: LD_ADDR_VAR 0 45
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 3
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 3
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 3
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 3
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: LD_INT 3
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 3
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 3
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 3
50903: NEG
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 3
50915: NEG
50916: PUSH
50917: LD_INT 3
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50956: LD_ADDR_VAR 0 46
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 3
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 2
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 3
51252: NEG
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51304: LD_ADDR_VAR 0 47
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51455: LD_ADDR_VAR 0 48
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51602: LD_ADDR_VAR 0 49
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51746: LD_ADDR_VAR 0 50
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51890: LD_ADDR_VAR 0 51
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52037: LD_ADDR_VAR 0 52
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52188: LD_ADDR_VAR 0 53
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: NEG
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: LD_INT 2
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52418: LD_ADDR_VAR 0 54
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 2
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52648: LD_ADDR_VAR 0 55
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 2
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52878: LD_ADDR_VAR 0 56
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 2
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53108: LD_ADDR_VAR 0 57
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53338: LD_ADDR_VAR 0 58
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53568: LD_ADDR_VAR 0 59
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53656: LD_ADDR_VAR 0 60
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53744: LD_ADDR_VAR 0 61
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53832: LD_ADDR_VAR 0 62
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53920: LD_ADDR_VAR 0 63
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54008: LD_ADDR_VAR 0 64
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: ST_TO_ADDR
// end ; 1 :
54096: GO 59993
54098: LD_INT 1
54100: DOUBLE
54101: EQUAL
54102: IFTRUE 54106
54104: GO 56729
54106: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54107: LD_ADDR_VAR 0 11
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 3
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 3
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: LIST
54150: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54151: LD_ADDR_VAR 0 12
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 3
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: LIST
54191: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54192: LD_ADDR_VAR 0 13
54196: PUSH
54197: LD_INT 3
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 3
54209: PUSH
54210: LD_INT 3
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: LD_INT 3
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: LIST
54231: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54232: LD_ADDR_VAR 0 14
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: LD_INT 3
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: LIST
54272: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54273: LD_ADDR_VAR 0 15
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 3
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54317: LD_ADDR_VAR 0 16
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 3
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 3
54336: NEG
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: NEG
54349: PUSH
54350: LD_INT 3
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54363: LD_ADDR_VAR 0 17
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 3
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 3
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54407: LD_ADDR_VAR 0 18
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 3
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 3
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: LIST
54447: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54448: LD_ADDR_VAR 0 19
54452: PUSH
54453: LD_INT 3
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: PUSH
54466: LD_INT 3
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: LIST
54487: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54488: LD_ADDR_VAR 0 20
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 3
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: LIST
54528: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54529: LD_ADDR_VAR 0 21
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54573: LD_ADDR_VAR 0 22
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: LD_INT 3
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 3
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 3
54604: NEG
54605: PUSH
54606: LD_INT 3
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: LIST
54618: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54619: LD_ADDR_VAR 0 23
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 3
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 4
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 3
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: LIST
54662: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54663: LD_ADDR_VAR 0 24
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 4
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54704: LD_ADDR_VAR 0 25
54708: PUSH
54709: LD_INT 3
54711: PUSH
54712: LD_INT 3
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 4
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: LD_INT 4
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54744: LD_ADDR_VAR 0 26
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 3
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 4
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: LIST
54784: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54785: LD_ADDR_VAR 0 27
54789: PUSH
54790: LD_INT 3
54792: NEG
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 4
54814: NEG
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: LIST
54828: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54829: LD_ADDR_VAR 0 28
54833: PUSH
54834: LD_INT 3
54836: NEG
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: LD_INT 4
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 4
54860: NEG
54861: PUSH
54862: LD_INT 3
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: LIST
54874: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54875: LD_ADDR_VAR 0 29
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 3
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 3
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 4
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 4
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 3
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: LD_INT 5
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 5
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 4
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: LD_INT 6
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 6
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: LD_INT 5
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55030: LD_ADDR_VAR 0 30
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 4
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 4
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 4
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 5
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 5
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 5
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 6
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 6
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55173: LD_ADDR_VAR 0 31
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 3
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 4
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 4
55220: PUSH
55221: LD_INT 4
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: PUSH
55231: LD_INT 4
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 5
55240: PUSH
55241: LD_INT 4
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 5
55250: PUSH
55251: LD_INT 5
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 4
55260: PUSH
55261: LD_INT 5
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 6
55270: PUSH
55271: LD_INT 5
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 6
55280: PUSH
55281: LD_INT 6
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 5
55290: PUSH
55291: LD_INT 6
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55312: LD_ADDR_VAR 0 32
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: LD_INT 4
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 4
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 3
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 5
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 5
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 4
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 6
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 6
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 5
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55455: LD_ADDR_VAR 0 33
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: NEG
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 3
55484: NEG
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 3
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 4
55507: NEG
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 4
55518: NEG
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 4
55530: NEG
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 5
55541: NEG
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 5
55552: NEG
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 5
55564: NEG
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 6
55575: NEG
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 6
55586: NEG
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55610: LD_ADDR_VAR 0 34
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 3
55629: NEG
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: NEG
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 3
55653: NEG
55654: PUSH
55655: LD_INT 4
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 4
55665: NEG
55666: PUSH
55667: LD_INT 3
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 4
55677: NEG
55678: PUSH
55679: LD_INT 4
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 4
55689: NEG
55690: PUSH
55691: LD_INT 5
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 5
55701: NEG
55702: PUSH
55703: LD_INT 4
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 5
55713: NEG
55714: PUSH
55715: LD_INT 5
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 5
55725: NEG
55726: PUSH
55727: LD_INT 6
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 6
55737: NEG
55738: PUSH
55739: LD_INT 5
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 6
55749: NEG
55750: PUSH
55751: LD_INT 6
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55773: LD_ADDR_VAR 0 41
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: LIST
55816: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55817: LD_ADDR_VAR 0 42
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 3
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55858: LD_ADDR_VAR 0 43
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 3
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 3
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: LIST
55897: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55898: LD_ADDR_VAR 0 44
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: LD_INT 3
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55939: LD_ADDR_VAR 0 45
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 3
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: LIST
55982: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55983: LD_ADDR_VAR 0 46
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: LIST
56028: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56029: LD_ADDR_VAR 0 47
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 3
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56062: LD_ADDR_VAR 0 48
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56093: LD_ADDR_VAR 0 49
56097: PUSH
56098: LD_INT 3
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56122: LD_ADDR_VAR 0 50
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 3
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56151: LD_ADDR_VAR 0 51
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56182: LD_ADDR_VAR 0 52
56186: PUSH
56187: LD_INT 3
56189: NEG
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 3
56201: NEG
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56215: LD_ADDR_VAR 0 53
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 3
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 3
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56259: LD_ADDR_VAR 0 54
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56300: LD_ADDR_VAR 0 55
56304: PUSH
56305: LD_INT 3
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: LD_INT 3
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: LIST
56339: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56340: LD_ADDR_VAR 0 56
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 3
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 3
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: LIST
56380: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56381: LD_ADDR_VAR 0 57
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: NEG
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56425: LD_ADDR_VAR 0 58
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: LD_INT 3
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 3
56444: NEG
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 3
56456: NEG
56457: PUSH
56458: LD_INT 3
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56471: LD_ADDR_VAR 0 59
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 2
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: LIST
56514: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56515: LD_ADDR_VAR 0 60
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: LIST
56555: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56556: LD_ADDR_VAR 0 61
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: LIST
56595: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56596: LD_ADDR_VAR 0 62
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 2
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56637: LD_ADDR_VAR 0 63
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: LIST
56680: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56681: LD_ADDR_VAR 0 64
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: LIST
56726: ST_TO_ADDR
// end ; 2 :
56727: GO 59993
56729: LD_INT 2
56731: DOUBLE
56732: EQUAL
56733: IFTRUE 56737
56735: GO 59992
56737: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56738: LD_ADDR_VAR 0 29
56742: PUSH
56743: LD_INT 4
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 4
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 5
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 5
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 4
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 5
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: PUSH
56839: LD_INT 3
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 4
56858: PUSH
56859: LD_INT 3
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 4
56868: PUSH
56869: LD_INT 4
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: LD_INT 4
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 4
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: LD_INT 4
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 4
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 3
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: LD_INT 4
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: LD_INT 5
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 5
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 4
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: LD_INT 5
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 3
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 3
57066: NEG
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 4
57077: NEG
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 4
57088: NEG
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 4
57100: NEG
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 4
57123: NEG
57124: PUSH
57125: LD_INT 4
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 4
57135: NEG
57136: PUSH
57137: LD_INT 5
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: LD_INT 4
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 4
57171: NEG
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 5
57183: NEG
57184: PUSH
57185: LD_INT 4
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 5
57195: NEG
57196: PUSH
57197: LD_INT 5
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: LD_INT 5
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 5
57219: NEG
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57276: LD_ADDR_VAR 0 30
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: LD_INT 4
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 4
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 5
57303: PUSH
57304: LD_INT 4
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 5
57313: PUSH
57314: LD_INT 5
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 4
57323: PUSH
57324: LD_INT 5
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: LD_INT 4
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 3
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 5
57353: PUSH
57354: LD_INT 3
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 3
57363: PUSH
57364: LD_INT 5
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: LD_INT 3
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: LD_INT 4
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 4
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: LD_INT 4
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 4
57466: NEG
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 4
57477: NEG
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 4
57511: NEG
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 5
57522: NEG
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 5
57533: NEG
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 5
57545: NEG
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 3
57557: NEG
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 3
57568: NEG
57569: PUSH
57570: LD_INT 3
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 3
57580: NEG
57581: PUSH
57582: LD_INT 4
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: LD_INT 3
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 2
57604: NEG
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 3
57616: NEG
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 4
57628: NEG
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 4
57640: NEG
57641: PUSH
57642: LD_INT 4
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: LD_INT 4
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 4
57664: NEG
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 4
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 5
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: LD_INT 4
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 3
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 3
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 4
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: LD_INT 5
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: LD_INT 5
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57823: LD_ADDR_VAR 0 31
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 4
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: LD_INT 4
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: LD_INT 5
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 5
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: LD_INT 4
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 5
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 3
57934: NEG
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 3
57968: NEG
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 4
57979: NEG
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 4
57990: NEG
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 4
58002: NEG
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 4
58025: NEG
58026: PUSH
58027: LD_INT 4
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 4
58037: NEG
58038: PUSH
58039: LD_INT 5
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: LD_INT 4
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: LD_INT 3
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 4
58073: NEG
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 5
58085: NEG
58086: PUSH
58087: LD_INT 4
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 5
58097: NEG
58098: PUSH
58099: LD_INT 5
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: LD_INT 5
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 5
58121: NEG
58122: PUSH
58123: LD_INT 3
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 3
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: LD_INT 4
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 3
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: LD_INT 3
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 4
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: NEG
58224: PUSH
58225: LD_INT 4
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 4
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 4
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 5
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 5
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 4
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 5
58318: PUSH
58319: LD_INT 2
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58373: LD_ADDR_VAR 0 32
58377: PUSH
58378: LD_INT 4
58380: NEG
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 4
58391: NEG
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 3
58403: NEG
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: NEG
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 4
58425: NEG
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 5
58436: NEG
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 5
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 5
58459: NEG
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: LD_INT 2
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 3
58482: NEG
58483: PUSH
58484: LD_INT 3
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: LD_INT 4
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 3
58530: NEG
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 4
58542: NEG
58543: PUSH
58544: LD_INT 3
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 4
58554: NEG
58555: PUSH
58556: LD_INT 4
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: LD_INT 4
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 4
58578: NEG
58579: PUSH
58580: LD_INT 2
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 4
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 5
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: LD_INT 4
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: LD_INT 3
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 3
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 4
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 5
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: LD_INT 5
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 4
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 4
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 4
58775: PUSH
58776: LD_INT 2
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 4
58785: PUSH
58786: LD_INT 4
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 4
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 5
58805: PUSH
58806: LD_INT 4
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 5
58815: PUSH
58816: LD_INT 5
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 4
58825: PUSH
58826: LD_INT 5
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: PUSH
58836: LD_INT 4
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 3
58845: PUSH
58846: LD_INT 3
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 5
58855: PUSH
58856: LD_INT 3
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 3
58865: PUSH
58866: LD_INT 5
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58920: LD_ADDR_VAR 0 33
58924: PUSH
58925: LD_INT 4
58927: NEG
58928: PUSH
58929: LD_INT 4
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 4
58939: NEG
58940: PUSH
58941: LD_INT 5
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: NEG
58952: PUSH
58953: LD_INT 4
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: LD_INT 3
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 4
58975: NEG
58976: PUSH
58977: LD_INT 3
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 5
58987: NEG
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 5
58999: NEG
59000: PUSH
59001: LD_INT 5
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: LD_INT 5
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 5
59023: NEG
59024: PUSH
59025: LD_INT 3
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 3
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 4
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: LD_INT 3
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: LD_INT 4
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: NEG
59126: PUSH
59127: LD_INT 4
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 4
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 4
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 5
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 5
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 4
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 3
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: LD_INT 2
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 5
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 3
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 4
59250: PUSH
59251: LD_INT 3
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 4
59260: PUSH
59261: LD_INT 4
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 3
59270: PUSH
59271: LD_INT 4
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 4
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: LD_INT 4
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 4
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: LD_INT 4
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 5
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 5
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 4
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: LD_INT 3
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: LD_INT 5
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59458: LD_ADDR_VAR 0 34
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 5
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: LD_INT 4
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 3
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 4
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: LD_INT 5
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 2
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: LD_INT 5
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 3
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 3
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 4
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 4
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 3
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 4
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 4
59660: PUSH
59661: LD_INT 4
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 4
59670: PUSH
59671: LD_INT 3
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 5
59680: PUSH
59681: LD_INT 4
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 5
59690: PUSH
59691: LD_INT 5
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 4
59700: PUSH
59701: LD_INT 5
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 3
59710: PUSH
59711: LD_INT 4
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 3
59720: PUSH
59721: LD_INT 3
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 5
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: LD_INT 5
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 3
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 4
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 4
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 3
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: LD_INT 4
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 4
59843: NEG
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 4
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 3
59866: NEG
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 3
59877: NEG
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 4
59888: NEG
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 5
59899: NEG
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 5
59910: NEG
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 5
59922: NEG
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: ST_TO_ADDR
// end ; end ;
59990: GO 59993
59992: POP
// case btype of b_depot , b_warehouse :
59993: LD_VAR 0 1
59997: PUSH
59998: LD_INT 0
60000: DOUBLE
60001: EQUAL
60002: IFTRUE 60012
60004: LD_INT 1
60006: DOUBLE
60007: EQUAL
60008: IFTRUE 60012
60010: GO 60213
60012: POP
// case nation of nation_american :
60013: LD_VAR 0 5
60017: PUSH
60018: LD_INT 1
60020: DOUBLE
60021: EQUAL
60022: IFTRUE 60026
60024: GO 60082
60026: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60027: LD_ADDR_VAR 0 9
60031: PUSH
60032: LD_VAR 0 11
60036: PUSH
60037: LD_VAR 0 12
60041: PUSH
60042: LD_VAR 0 13
60046: PUSH
60047: LD_VAR 0 14
60051: PUSH
60052: LD_VAR 0 15
60056: PUSH
60057: LD_VAR 0 16
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: PUSH
60070: LD_VAR 0 4
60074: PUSH
60075: LD_INT 1
60077: PLUS
60078: ARRAY
60079: ST_TO_ADDR
60080: GO 60211
60082: LD_INT 2
60084: DOUBLE
60085: EQUAL
60086: IFTRUE 60090
60088: GO 60146
60090: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60091: LD_ADDR_VAR 0 9
60095: PUSH
60096: LD_VAR 0 17
60100: PUSH
60101: LD_VAR 0 18
60105: PUSH
60106: LD_VAR 0 19
60110: PUSH
60111: LD_VAR 0 20
60115: PUSH
60116: LD_VAR 0 21
60120: PUSH
60121: LD_VAR 0 22
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: PUSH
60134: LD_VAR 0 4
60138: PUSH
60139: LD_INT 1
60141: PLUS
60142: ARRAY
60143: ST_TO_ADDR
60144: GO 60211
60146: LD_INT 3
60148: DOUBLE
60149: EQUAL
60150: IFTRUE 60154
60152: GO 60210
60154: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60155: LD_ADDR_VAR 0 9
60159: PUSH
60160: LD_VAR 0 23
60164: PUSH
60165: LD_VAR 0 24
60169: PUSH
60170: LD_VAR 0 25
60174: PUSH
60175: LD_VAR 0 26
60179: PUSH
60180: LD_VAR 0 27
60184: PUSH
60185: LD_VAR 0 28
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: PUSH
60198: LD_VAR 0 4
60202: PUSH
60203: LD_INT 1
60205: PLUS
60206: ARRAY
60207: ST_TO_ADDR
60208: GO 60211
60210: POP
60211: GO 60766
60213: LD_INT 2
60215: DOUBLE
60216: EQUAL
60217: IFTRUE 60227
60219: LD_INT 3
60221: DOUBLE
60222: EQUAL
60223: IFTRUE 60227
60225: GO 60283
60227: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60228: LD_ADDR_VAR 0 9
60232: PUSH
60233: LD_VAR 0 29
60237: PUSH
60238: LD_VAR 0 30
60242: PUSH
60243: LD_VAR 0 31
60247: PUSH
60248: LD_VAR 0 32
60252: PUSH
60253: LD_VAR 0 33
60257: PUSH
60258: LD_VAR 0 34
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: PUSH
60271: LD_VAR 0 4
60275: PUSH
60276: LD_INT 1
60278: PLUS
60279: ARRAY
60280: ST_TO_ADDR
60281: GO 60766
60283: LD_INT 16
60285: DOUBLE
60286: EQUAL
60287: IFTRUE 60345
60289: LD_INT 17
60291: DOUBLE
60292: EQUAL
60293: IFTRUE 60345
60295: LD_INT 18
60297: DOUBLE
60298: EQUAL
60299: IFTRUE 60345
60301: LD_INT 19
60303: DOUBLE
60304: EQUAL
60305: IFTRUE 60345
60307: LD_INT 22
60309: DOUBLE
60310: EQUAL
60311: IFTRUE 60345
60313: LD_INT 20
60315: DOUBLE
60316: EQUAL
60317: IFTRUE 60345
60319: LD_INT 21
60321: DOUBLE
60322: EQUAL
60323: IFTRUE 60345
60325: LD_INT 23
60327: DOUBLE
60328: EQUAL
60329: IFTRUE 60345
60331: LD_INT 24
60333: DOUBLE
60334: EQUAL
60335: IFTRUE 60345
60337: LD_INT 25
60339: DOUBLE
60340: EQUAL
60341: IFTRUE 60345
60343: GO 60401
60345: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60346: LD_ADDR_VAR 0 9
60350: PUSH
60351: LD_VAR 0 35
60355: PUSH
60356: LD_VAR 0 36
60360: PUSH
60361: LD_VAR 0 37
60365: PUSH
60366: LD_VAR 0 38
60370: PUSH
60371: LD_VAR 0 39
60375: PUSH
60376: LD_VAR 0 40
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: LD_VAR 0 4
60393: PUSH
60394: LD_INT 1
60396: PLUS
60397: ARRAY
60398: ST_TO_ADDR
60399: GO 60766
60401: LD_INT 6
60403: DOUBLE
60404: EQUAL
60405: IFTRUE 60457
60407: LD_INT 7
60409: DOUBLE
60410: EQUAL
60411: IFTRUE 60457
60413: LD_INT 8
60415: DOUBLE
60416: EQUAL
60417: IFTRUE 60457
60419: LD_INT 13
60421: DOUBLE
60422: EQUAL
60423: IFTRUE 60457
60425: LD_INT 12
60427: DOUBLE
60428: EQUAL
60429: IFTRUE 60457
60431: LD_INT 15
60433: DOUBLE
60434: EQUAL
60435: IFTRUE 60457
60437: LD_INT 11
60439: DOUBLE
60440: EQUAL
60441: IFTRUE 60457
60443: LD_INT 14
60445: DOUBLE
60446: EQUAL
60447: IFTRUE 60457
60449: LD_INT 10
60451: DOUBLE
60452: EQUAL
60453: IFTRUE 60457
60455: GO 60513
60457: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60458: LD_ADDR_VAR 0 9
60462: PUSH
60463: LD_VAR 0 41
60467: PUSH
60468: LD_VAR 0 42
60472: PUSH
60473: LD_VAR 0 43
60477: PUSH
60478: LD_VAR 0 44
60482: PUSH
60483: LD_VAR 0 45
60487: PUSH
60488: LD_VAR 0 46
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: PUSH
60501: LD_VAR 0 4
60505: PUSH
60506: LD_INT 1
60508: PLUS
60509: ARRAY
60510: ST_TO_ADDR
60511: GO 60766
60513: LD_INT 36
60515: DOUBLE
60516: EQUAL
60517: IFTRUE 60521
60519: GO 60577
60521: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60522: LD_ADDR_VAR 0 9
60526: PUSH
60527: LD_VAR 0 47
60531: PUSH
60532: LD_VAR 0 48
60536: PUSH
60537: LD_VAR 0 49
60541: PUSH
60542: LD_VAR 0 50
60546: PUSH
60547: LD_VAR 0 51
60551: PUSH
60552: LD_VAR 0 52
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: PUSH
60565: LD_VAR 0 4
60569: PUSH
60570: LD_INT 1
60572: PLUS
60573: ARRAY
60574: ST_TO_ADDR
60575: GO 60766
60577: LD_INT 4
60579: DOUBLE
60580: EQUAL
60581: IFTRUE 60603
60583: LD_INT 5
60585: DOUBLE
60586: EQUAL
60587: IFTRUE 60603
60589: LD_INT 34
60591: DOUBLE
60592: EQUAL
60593: IFTRUE 60603
60595: LD_INT 37
60597: DOUBLE
60598: EQUAL
60599: IFTRUE 60603
60601: GO 60659
60603: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60604: LD_ADDR_VAR 0 9
60608: PUSH
60609: LD_VAR 0 53
60613: PUSH
60614: LD_VAR 0 54
60618: PUSH
60619: LD_VAR 0 55
60623: PUSH
60624: LD_VAR 0 56
60628: PUSH
60629: LD_VAR 0 57
60633: PUSH
60634: LD_VAR 0 58
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: PUSH
60647: LD_VAR 0 4
60651: PUSH
60652: LD_INT 1
60654: PLUS
60655: ARRAY
60656: ST_TO_ADDR
60657: GO 60766
60659: LD_INT 31
60661: DOUBLE
60662: EQUAL
60663: IFTRUE 60709
60665: LD_INT 32
60667: DOUBLE
60668: EQUAL
60669: IFTRUE 60709
60671: LD_INT 33
60673: DOUBLE
60674: EQUAL
60675: IFTRUE 60709
60677: LD_INT 27
60679: DOUBLE
60680: EQUAL
60681: IFTRUE 60709
60683: LD_INT 26
60685: DOUBLE
60686: EQUAL
60687: IFTRUE 60709
60689: LD_INT 28
60691: DOUBLE
60692: EQUAL
60693: IFTRUE 60709
60695: LD_INT 29
60697: DOUBLE
60698: EQUAL
60699: IFTRUE 60709
60701: LD_INT 30
60703: DOUBLE
60704: EQUAL
60705: IFTRUE 60709
60707: GO 60765
60709: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60710: LD_ADDR_VAR 0 9
60714: PUSH
60715: LD_VAR 0 59
60719: PUSH
60720: LD_VAR 0 60
60724: PUSH
60725: LD_VAR 0 61
60729: PUSH
60730: LD_VAR 0 62
60734: PUSH
60735: LD_VAR 0 63
60739: PUSH
60740: LD_VAR 0 64
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: PUSH
60753: LD_VAR 0 4
60757: PUSH
60758: LD_INT 1
60760: PLUS
60761: ARRAY
60762: ST_TO_ADDR
60763: GO 60766
60765: POP
// temp_list2 = [ ] ;
60766: LD_ADDR_VAR 0 10
60770: PUSH
60771: EMPTY
60772: ST_TO_ADDR
// for i in temp_list do
60773: LD_ADDR_VAR 0 8
60777: PUSH
60778: LD_VAR 0 9
60782: PUSH
60783: FOR_IN
60784: IFFALSE 60836
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60786: LD_ADDR_VAR 0 10
60790: PUSH
60791: LD_VAR 0 10
60795: PUSH
60796: LD_VAR 0 8
60800: PUSH
60801: LD_INT 1
60803: ARRAY
60804: PUSH
60805: LD_VAR 0 2
60809: PLUS
60810: PUSH
60811: LD_VAR 0 8
60815: PUSH
60816: LD_INT 2
60818: ARRAY
60819: PUSH
60820: LD_VAR 0 3
60824: PLUS
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: EMPTY
60831: LIST
60832: ADD
60833: ST_TO_ADDR
60834: GO 60783
60836: POP
60837: POP
// result = temp_list2 ;
60838: LD_ADDR_VAR 0 7
60842: PUSH
60843: LD_VAR 0 10
60847: ST_TO_ADDR
// end ;
60848: LD_VAR 0 7
60852: RET
// export function EnemyInRange ( unit , dist ) ; begin
60853: LD_INT 0
60855: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60856: LD_ADDR_VAR 0 3
60860: PUSH
60861: LD_VAR 0 1
60865: PPUSH
60866: CALL_OW 255
60870: PPUSH
60871: LD_VAR 0 1
60875: PPUSH
60876: CALL_OW 250
60880: PPUSH
60881: LD_VAR 0 1
60885: PPUSH
60886: CALL_OW 251
60890: PPUSH
60891: LD_VAR 0 2
60895: PPUSH
60896: CALL 34110 0 4
60900: PUSH
60901: LD_INT 4
60903: ARRAY
60904: ST_TO_ADDR
// end ;
60905: LD_VAR 0 3
60909: RET
// export function PlayerSeeMe ( unit ) ; begin
60910: LD_INT 0
60912: PPUSH
// result := See ( your_side , unit ) ;
60913: LD_ADDR_VAR 0 2
60917: PUSH
60918: LD_OWVAR 2
60922: PPUSH
60923: LD_VAR 0 1
60927: PPUSH
60928: CALL_OW 292
60932: ST_TO_ADDR
// end ;
60933: LD_VAR 0 2
60937: RET
// export function ReverseDir ( unit ) ; begin
60938: LD_INT 0
60940: PPUSH
// if not unit then
60941: LD_VAR 0 1
60945: NOT
60946: IFFALSE 60950
// exit ;
60948: GO 60973
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60950: LD_ADDR_VAR 0 2
60954: PUSH
60955: LD_VAR 0 1
60959: PPUSH
60960: CALL_OW 254
60964: PUSH
60965: LD_INT 3
60967: PLUS
60968: PUSH
60969: LD_INT 6
60971: MOD
60972: ST_TO_ADDR
// end ;
60973: LD_VAR 0 2
60977: RET
// export function ReverseArray ( array ) ; var i ; begin
60978: LD_INT 0
60980: PPUSH
60981: PPUSH
// if not array then
60982: LD_VAR 0 1
60986: NOT
60987: IFFALSE 60991
// exit ;
60989: GO 61046
// result := [ ] ;
60991: LD_ADDR_VAR 0 2
60995: PUSH
60996: EMPTY
60997: ST_TO_ADDR
// for i := array downto 1 do
60998: LD_ADDR_VAR 0 3
61002: PUSH
61003: DOUBLE
61004: LD_VAR 0 1
61008: INC
61009: ST_TO_ADDR
61010: LD_INT 1
61012: PUSH
61013: FOR_DOWNTO
61014: IFFALSE 61044
// result := Join ( result , array [ i ] ) ;
61016: LD_ADDR_VAR 0 2
61020: PUSH
61021: LD_VAR 0 2
61025: PPUSH
61026: LD_VAR 0 1
61030: PUSH
61031: LD_VAR 0 3
61035: ARRAY
61036: PPUSH
61037: CALL 65898 0 2
61041: ST_TO_ADDR
61042: GO 61013
61044: POP
61045: POP
// end ;
61046: LD_VAR 0 2
61050: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61051: LD_INT 0
61053: PPUSH
61054: PPUSH
61055: PPUSH
61056: PPUSH
61057: PPUSH
61058: PPUSH
// if not unit or not hexes then
61059: LD_VAR 0 1
61063: NOT
61064: IFTRUE 61073
61066: PUSH
61067: LD_VAR 0 2
61071: NOT
61072: OR
61073: IFFALSE 61077
// exit ;
61075: GO 61200
// dist := 9999 ;
61077: LD_ADDR_VAR 0 5
61081: PUSH
61082: LD_INT 9999
61084: ST_TO_ADDR
// for i = 1 to hexes do
61085: LD_ADDR_VAR 0 4
61089: PUSH
61090: DOUBLE
61091: LD_INT 1
61093: DEC
61094: ST_TO_ADDR
61095: LD_VAR 0 2
61099: PUSH
61100: FOR_TO
61101: IFFALSE 61188
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61103: LD_ADDR_VAR 0 6
61107: PUSH
61108: LD_VAR 0 1
61112: PPUSH
61113: LD_VAR 0 2
61117: PUSH
61118: LD_VAR 0 4
61122: ARRAY
61123: PUSH
61124: LD_INT 1
61126: ARRAY
61127: PPUSH
61128: LD_VAR 0 2
61132: PUSH
61133: LD_VAR 0 4
61137: ARRAY
61138: PUSH
61139: LD_INT 2
61141: ARRAY
61142: PPUSH
61143: CALL_OW 297
61147: ST_TO_ADDR
// if tdist < dist then
61148: LD_VAR 0 6
61152: PUSH
61153: LD_VAR 0 5
61157: LESS
61158: IFFALSE 61186
// begin hex := hexes [ i ] ;
61160: LD_ADDR_VAR 0 8
61164: PUSH
61165: LD_VAR 0 2
61169: PUSH
61170: LD_VAR 0 4
61174: ARRAY
61175: ST_TO_ADDR
// dist := tdist ;
61176: LD_ADDR_VAR 0 5
61180: PUSH
61181: LD_VAR 0 6
61185: ST_TO_ADDR
// end ; end ;
61186: GO 61100
61188: POP
61189: POP
// result := hex ;
61190: LD_ADDR_VAR 0 3
61194: PUSH
61195: LD_VAR 0 8
61199: ST_TO_ADDR
// end ;
61200: LD_VAR 0 3
61204: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61205: LD_INT 0
61207: PPUSH
61208: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61209: LD_VAR 0 1
61213: NOT
61214: IFTRUE 61253
61216: PUSH
61217: LD_VAR 0 1
61221: PUSH
61222: LD_INT 21
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 23
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PPUSH
61246: CALL_OW 69
61250: IN
61251: NOT
61252: OR
61253: IFFALSE 61257
// exit ;
61255: GO 61304
// for i = 1 to 3 do
61257: LD_ADDR_VAR 0 3
61261: PUSH
61262: DOUBLE
61263: LD_INT 1
61265: DEC
61266: ST_TO_ADDR
61267: LD_INT 3
61269: PUSH
61270: FOR_TO
61271: IFFALSE 61302
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61273: LD_VAR 0 1
61277: PPUSH
61278: CALL_OW 250
61282: PPUSH
61283: LD_VAR 0 1
61287: PPUSH
61288: CALL_OW 251
61292: PPUSH
61293: LD_INT 1
61295: PPUSH
61296: CALL_OW 453
61300: GO 61270
61302: POP
61303: POP
// end ;
61304: LD_VAR 0 2
61308: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61309: LD_INT 0
61311: PPUSH
61312: PPUSH
61313: PPUSH
61314: PPUSH
61315: PPUSH
61316: PPUSH
// if not unit or not enemy_unit then
61317: LD_VAR 0 1
61321: NOT
61322: IFTRUE 61331
61324: PUSH
61325: LD_VAR 0 2
61329: NOT
61330: OR
61331: IFFALSE 61335
// exit ;
61333: GO 61816
// if GetLives ( i ) < 250 then
61335: LD_VAR 0 4
61339: PPUSH
61340: CALL_OW 256
61344: PUSH
61345: LD_INT 250
61347: LESS
61348: IFFALSE 61361
// begin ComAutodestruct ( i ) ;
61350: LD_VAR 0 4
61354: PPUSH
61355: CALL 61205 0 1
// exit ;
61359: GO 61816
// end ; x := GetX ( enemy_unit ) ;
61361: LD_ADDR_VAR 0 7
61365: PUSH
61366: LD_VAR 0 2
61370: PPUSH
61371: CALL_OW 250
61375: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61376: LD_ADDR_VAR 0 8
61380: PUSH
61381: LD_VAR 0 2
61385: PPUSH
61386: CALL_OW 251
61390: ST_TO_ADDR
// if not x or not y then
61391: LD_VAR 0 7
61395: NOT
61396: IFTRUE 61405
61398: PUSH
61399: LD_VAR 0 8
61403: NOT
61404: OR
61405: IFFALSE 61409
// exit ;
61407: GO 61816
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61409: LD_ADDR_VAR 0 6
61413: PUSH
61414: LD_VAR 0 7
61418: PPUSH
61419: LD_INT 0
61421: PPUSH
61422: LD_INT 4
61424: PPUSH
61425: CALL_OW 272
61429: PUSH
61430: LD_VAR 0 8
61434: PPUSH
61435: LD_INT 0
61437: PPUSH
61438: LD_INT 4
61440: PPUSH
61441: CALL_OW 273
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_VAR 0 7
61454: PPUSH
61455: LD_INT 1
61457: PPUSH
61458: LD_INT 4
61460: PPUSH
61461: CALL_OW 272
61465: PUSH
61466: LD_VAR 0 8
61470: PPUSH
61471: LD_INT 1
61473: PPUSH
61474: LD_INT 4
61476: PPUSH
61477: CALL_OW 273
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_VAR 0 7
61490: PPUSH
61491: LD_INT 2
61493: PPUSH
61494: LD_INT 4
61496: PPUSH
61497: CALL_OW 272
61501: PUSH
61502: LD_VAR 0 8
61506: PPUSH
61507: LD_INT 2
61509: PPUSH
61510: LD_INT 4
61512: PPUSH
61513: CALL_OW 273
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_VAR 0 7
61526: PPUSH
61527: LD_INT 3
61529: PPUSH
61530: LD_INT 4
61532: PPUSH
61533: CALL_OW 272
61537: PUSH
61538: LD_VAR 0 8
61542: PPUSH
61543: LD_INT 3
61545: PPUSH
61546: LD_INT 4
61548: PPUSH
61549: CALL_OW 273
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_VAR 0 7
61562: PPUSH
61563: LD_INT 4
61565: PPUSH
61566: LD_INT 4
61568: PPUSH
61569: CALL_OW 272
61573: PUSH
61574: LD_VAR 0 8
61578: PPUSH
61579: LD_INT 4
61581: PPUSH
61582: LD_INT 4
61584: PPUSH
61585: CALL_OW 273
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_VAR 0 7
61598: PPUSH
61599: LD_INT 5
61601: PPUSH
61602: LD_INT 4
61604: PPUSH
61605: CALL_OW 272
61609: PUSH
61610: LD_VAR 0 8
61614: PPUSH
61615: LD_INT 5
61617: PPUSH
61618: LD_INT 4
61620: PPUSH
61621: CALL_OW 273
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: ST_TO_ADDR
// for i = tmp downto 1 do
61638: LD_ADDR_VAR 0 4
61642: PUSH
61643: DOUBLE
61644: LD_VAR 0 6
61648: INC
61649: ST_TO_ADDR
61650: LD_INT 1
61652: PUSH
61653: FOR_DOWNTO
61654: IFFALSE 61757
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61656: LD_VAR 0 6
61660: PUSH
61661: LD_VAR 0 4
61665: ARRAY
61666: PUSH
61667: LD_INT 1
61669: ARRAY
61670: PPUSH
61671: LD_VAR 0 6
61675: PUSH
61676: LD_VAR 0 4
61680: ARRAY
61681: PUSH
61682: LD_INT 2
61684: ARRAY
61685: PPUSH
61686: CALL_OW 488
61690: NOT
61691: IFTRUE 61733
61693: PUSH
61694: LD_VAR 0 6
61698: PUSH
61699: LD_VAR 0 4
61703: ARRAY
61704: PUSH
61705: LD_INT 1
61707: ARRAY
61708: PPUSH
61709: LD_VAR 0 6
61713: PUSH
61714: LD_VAR 0 4
61718: ARRAY
61719: PUSH
61720: LD_INT 2
61722: ARRAY
61723: PPUSH
61724: CALL_OW 428
61728: PUSH
61729: LD_INT 0
61731: NONEQUAL
61732: OR
61733: IFFALSE 61755
// tmp := Delete ( tmp , i ) ;
61735: LD_ADDR_VAR 0 6
61739: PUSH
61740: LD_VAR 0 6
61744: PPUSH
61745: LD_VAR 0 4
61749: PPUSH
61750: CALL_OW 3
61754: ST_TO_ADDR
61755: GO 61653
61757: POP
61758: POP
// j := GetClosestHex ( unit , tmp ) ;
61759: LD_ADDR_VAR 0 5
61763: PUSH
61764: LD_VAR 0 1
61768: PPUSH
61769: LD_VAR 0 6
61773: PPUSH
61774: CALL 61051 0 2
61778: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61779: LD_VAR 0 1
61783: PPUSH
61784: LD_VAR 0 5
61788: PUSH
61789: LD_INT 1
61791: ARRAY
61792: PPUSH
61793: LD_VAR 0 5
61797: PUSH
61798: LD_INT 2
61800: ARRAY
61801: PPUSH
61802: CALL_OW 111
// result := j ;
61806: LD_ADDR_VAR 0 3
61810: PUSH
61811: LD_VAR 0 5
61815: ST_TO_ADDR
// end ;
61816: LD_VAR 0 3
61820: RET
// export function PrepareApemanSoldier ( ) ; begin
61821: LD_INT 0
61823: PPUSH
// uc_nation := 0 ;
61824: LD_ADDR_OWVAR 21
61828: PUSH
61829: LD_INT 0
61831: ST_TO_ADDR
// hc_sex := sex_male ;
61832: LD_ADDR_OWVAR 27
61836: PUSH
61837: LD_INT 1
61839: ST_TO_ADDR
// hc_name :=  ;
61840: LD_ADDR_OWVAR 26
61844: PUSH
61845: LD_STRING 
61847: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61848: LD_ADDR_OWVAR 28
61852: PUSH
61853: LD_INT 15
61855: ST_TO_ADDR
// hc_gallery :=  ;
61856: LD_ADDR_OWVAR 33
61860: PUSH
61861: LD_STRING 
61863: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61864: LD_ADDR_OWVAR 31
61868: PUSH
61869: LD_INT 0
61871: PPUSH
61872: LD_INT 3
61874: PPUSH
61875: CALL_OW 12
61879: PUSH
61880: LD_INT 0
61882: PPUSH
61883: LD_INT 3
61885: PPUSH
61886: CALL_OW 12
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
61903: LD_ADDR_OWVAR 29
61907: PUSH
61908: LD_INT 10
61910: PUSH
61911: LD_INT 12
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: ST_TO_ADDR
// end ;
61918: LD_VAR 0 1
61922: RET
// export function PrepareApemanEngineer ( ) ; begin
61923: LD_INT 0
61925: PPUSH
// uc_nation := 0 ;
61926: LD_ADDR_OWVAR 21
61930: PUSH
61931: LD_INT 0
61933: ST_TO_ADDR
// hc_sex := sex_male ;
61934: LD_ADDR_OWVAR 27
61938: PUSH
61939: LD_INT 1
61941: ST_TO_ADDR
// hc_name :=  ;
61942: LD_ADDR_OWVAR 26
61946: PUSH
61947: LD_STRING 
61949: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61950: LD_ADDR_OWVAR 28
61954: PUSH
61955: LD_INT 16
61957: ST_TO_ADDR
// hc_gallery :=  ;
61958: LD_ADDR_OWVAR 33
61962: PUSH
61963: LD_STRING 
61965: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61966: LD_ADDR_OWVAR 31
61970: PUSH
61971: LD_INT 0
61973: PPUSH
61974: LD_INT 3
61976: PPUSH
61977: CALL_OW 12
61981: PUSH
61982: LD_INT 0
61984: PPUSH
61985: LD_INT 3
61987: PPUSH
61988: CALL_OW 12
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
62005: LD_ADDR_OWVAR 29
62009: PUSH
62010: LD_INT 10
62012: PUSH
62013: LD_INT 12
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: ST_TO_ADDR
// end ;
62020: LD_VAR 0 1
62024: RET
// export function PrepareApeman ( agressivity ) ; begin
62025: LD_INT 0
62027: PPUSH
// uc_side := 0 ;
62028: LD_ADDR_OWVAR 20
62032: PUSH
62033: LD_INT 0
62035: ST_TO_ADDR
// uc_nation := 0 ;
62036: LD_ADDR_OWVAR 21
62040: PUSH
62041: LD_INT 0
62043: ST_TO_ADDR
// hc_sex := sex_male ;
62044: LD_ADDR_OWVAR 27
62048: PUSH
62049: LD_INT 1
62051: ST_TO_ADDR
// hc_class := class_apeman ;
62052: LD_ADDR_OWVAR 28
62056: PUSH
62057: LD_INT 12
62059: ST_TO_ADDR
// hc_gallery :=  ;
62060: LD_ADDR_OWVAR 33
62064: PUSH
62065: LD_STRING 
62067: ST_TO_ADDR
// hc_name :=  ;
62068: LD_ADDR_OWVAR 26
62072: PUSH
62073: LD_STRING 
62075: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
62076: LD_ADDR_OWVAR 29
62080: PUSH
62081: LD_INT 10
62083: PUSH
62084: LD_INT 12
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: ST_TO_ADDR
// if agressivity = 0 then
62091: LD_VAR 0 1
62095: PUSH
62096: LD_INT 0
62098: EQUAL
62099: IFFALSE 62111
// hc_agressivity := 0 else
62101: LD_ADDR_OWVAR 35
62105: PUSH
62106: LD_INT 0
62108: ST_TO_ADDR
62109: GO 62132
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62111: LD_ADDR_OWVAR 35
62115: PUSH
62116: LD_VAR 0 1
62120: NEG
62121: PPUSH
62122: LD_VAR 0 1
62126: PPUSH
62127: CALL_OW 12
62131: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62132: LD_ADDR_OWVAR 31
62136: PUSH
62137: LD_INT 0
62139: PPUSH
62140: LD_INT 3
62142: PPUSH
62143: CALL_OW 12
62147: PUSH
62148: LD_INT 0
62150: PPUSH
62151: LD_INT 3
62153: PPUSH
62154: CALL_OW 12
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: ST_TO_ADDR
// end ;
62171: LD_VAR 0 2
62175: RET
// export function PrepareTiger ( agressivity ) ; begin
62176: LD_INT 0
62178: PPUSH
// uc_side := 0 ;
62179: LD_ADDR_OWVAR 20
62183: PUSH
62184: LD_INT 0
62186: ST_TO_ADDR
// uc_nation := 0 ;
62187: LD_ADDR_OWVAR 21
62191: PUSH
62192: LD_INT 0
62194: ST_TO_ADDR
// InitHc ;
62195: CALL_OW 19
// hc_class := class_tiger ;
62199: LD_ADDR_OWVAR 28
62203: PUSH
62204: LD_INT 14
62206: ST_TO_ADDR
// hc_gallery :=  ;
62207: LD_ADDR_OWVAR 33
62211: PUSH
62212: LD_STRING 
62214: ST_TO_ADDR
// hc_name :=  ;
62215: LD_ADDR_OWVAR 26
62219: PUSH
62220: LD_STRING 
62222: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62223: LD_ADDR_OWVAR 35
62227: PUSH
62228: LD_VAR 0 1
62232: NEG
62233: PPUSH
62234: LD_VAR 0 1
62238: PPUSH
62239: CALL_OW 12
62243: ST_TO_ADDR
// end ;
62244: LD_VAR 0 2
62248: RET
// export function PrepareEnchidna ( ) ; begin
62249: LD_INT 0
62251: PPUSH
// uc_side := 0 ;
62252: LD_ADDR_OWVAR 20
62256: PUSH
62257: LD_INT 0
62259: ST_TO_ADDR
// uc_nation := 0 ;
62260: LD_ADDR_OWVAR 21
62264: PUSH
62265: LD_INT 0
62267: ST_TO_ADDR
// InitHc ;
62268: CALL_OW 19
// hc_class := class_baggie ;
62272: LD_ADDR_OWVAR 28
62276: PUSH
62277: LD_INT 13
62279: ST_TO_ADDR
// hc_gallery :=  ;
62280: LD_ADDR_OWVAR 33
62284: PUSH
62285: LD_STRING 
62287: ST_TO_ADDR
// hc_name :=  ;
62288: LD_ADDR_OWVAR 26
62292: PUSH
62293: LD_STRING 
62295: ST_TO_ADDR
// end ;
62296: LD_VAR 0 1
62300: RET
// export function PrepareFrog ( ) ; begin
62301: LD_INT 0
62303: PPUSH
// uc_side := 0 ;
62304: LD_ADDR_OWVAR 20
62308: PUSH
62309: LD_INT 0
62311: ST_TO_ADDR
// uc_nation := 0 ;
62312: LD_ADDR_OWVAR 21
62316: PUSH
62317: LD_INT 0
62319: ST_TO_ADDR
// InitHc ;
62320: CALL_OW 19
// hc_class := class_frog ;
62324: LD_ADDR_OWVAR 28
62328: PUSH
62329: LD_INT 19
62331: ST_TO_ADDR
// hc_gallery :=  ;
62332: LD_ADDR_OWVAR 33
62336: PUSH
62337: LD_STRING 
62339: ST_TO_ADDR
// hc_name :=  ;
62340: LD_ADDR_OWVAR 26
62344: PUSH
62345: LD_STRING 
62347: ST_TO_ADDR
// end ;
62348: LD_VAR 0 1
62352: RET
// export function PrepareFish ( ) ; begin
62353: LD_INT 0
62355: PPUSH
// uc_side := 0 ;
62356: LD_ADDR_OWVAR 20
62360: PUSH
62361: LD_INT 0
62363: ST_TO_ADDR
// uc_nation := 0 ;
62364: LD_ADDR_OWVAR 21
62368: PUSH
62369: LD_INT 0
62371: ST_TO_ADDR
// InitHc ;
62372: CALL_OW 19
// hc_class := class_fish ;
62376: LD_ADDR_OWVAR 28
62380: PUSH
62381: LD_INT 20
62383: ST_TO_ADDR
// hc_gallery :=  ;
62384: LD_ADDR_OWVAR 33
62388: PUSH
62389: LD_STRING 
62391: ST_TO_ADDR
// hc_name :=  ;
62392: LD_ADDR_OWVAR 26
62396: PUSH
62397: LD_STRING 
62399: ST_TO_ADDR
// end ;
62400: LD_VAR 0 1
62404: RET
// export function PrepareBird ( ) ; begin
62405: LD_INT 0
62407: PPUSH
// uc_side := 0 ;
62408: LD_ADDR_OWVAR 20
62412: PUSH
62413: LD_INT 0
62415: ST_TO_ADDR
// uc_nation := 0 ;
62416: LD_ADDR_OWVAR 21
62420: PUSH
62421: LD_INT 0
62423: ST_TO_ADDR
// InitHc ;
62424: CALL_OW 19
// hc_class := class_phororhacos ;
62428: LD_ADDR_OWVAR 28
62432: PUSH
62433: LD_INT 18
62435: ST_TO_ADDR
// hc_gallery :=  ;
62436: LD_ADDR_OWVAR 33
62440: PUSH
62441: LD_STRING 
62443: ST_TO_ADDR
// hc_name :=  ;
62444: LD_ADDR_OWVAR 26
62448: PUSH
62449: LD_STRING 
62451: ST_TO_ADDR
// end ;
62452: LD_VAR 0 1
62456: RET
// export function PrepareHorse ( ) ; begin
62457: LD_INT 0
62459: PPUSH
// uc_side := 0 ;
62460: LD_ADDR_OWVAR 20
62464: PUSH
62465: LD_INT 0
62467: ST_TO_ADDR
// uc_nation := 0 ;
62468: LD_ADDR_OWVAR 21
62472: PUSH
62473: LD_INT 0
62475: ST_TO_ADDR
// InitHc ;
62476: CALL_OW 19
// hc_class := class_horse ;
62480: LD_ADDR_OWVAR 28
62484: PUSH
62485: LD_INT 21
62487: ST_TO_ADDR
// hc_gallery :=  ;
62488: LD_ADDR_OWVAR 33
62492: PUSH
62493: LD_STRING 
62495: ST_TO_ADDR
// hc_name :=  ;
62496: LD_ADDR_OWVAR 26
62500: PUSH
62501: LD_STRING 
62503: ST_TO_ADDR
// end ;
62504: LD_VAR 0 1
62508: RET
// export function PrepareMastodont ( ) ; begin
62509: LD_INT 0
62511: PPUSH
// uc_side := 0 ;
62512: LD_ADDR_OWVAR 20
62516: PUSH
62517: LD_INT 0
62519: ST_TO_ADDR
// uc_nation := 0 ;
62520: LD_ADDR_OWVAR 21
62524: PUSH
62525: LD_INT 0
62527: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62528: LD_ADDR_OWVAR 37
62532: PUSH
62533: LD_INT 31
62535: ST_TO_ADDR
// vc_control := control_rider ;
62536: LD_ADDR_OWVAR 38
62540: PUSH
62541: LD_INT 4
62543: ST_TO_ADDR
// end ;
62544: LD_VAR 0 1
62548: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62549: LD_INT 0
62551: PPUSH
62552: PPUSH
62553: PPUSH
// uc_side = 0 ;
62554: LD_ADDR_OWVAR 20
62558: PUSH
62559: LD_INT 0
62561: ST_TO_ADDR
// uc_nation = 0 ;
62562: LD_ADDR_OWVAR 21
62566: PUSH
62567: LD_INT 0
62569: ST_TO_ADDR
// InitHc_All ( ) ;
62570: CALL_OW 584
// InitVc ;
62574: CALL_OW 20
// if mastodonts then
62578: LD_VAR 0 6
62582: IFFALSE 62649
// for i = 1 to mastodonts do
62584: LD_ADDR_VAR 0 11
62588: PUSH
62589: DOUBLE
62590: LD_INT 1
62592: DEC
62593: ST_TO_ADDR
62594: LD_VAR 0 6
62598: PUSH
62599: FOR_TO
62600: IFFALSE 62647
// begin vc_chassis := 31 ;
62602: LD_ADDR_OWVAR 37
62606: PUSH
62607: LD_INT 31
62609: ST_TO_ADDR
// vc_control := control_rider ;
62610: LD_ADDR_OWVAR 38
62614: PUSH
62615: LD_INT 4
62617: ST_TO_ADDR
// animal := CreateVehicle ;
62618: LD_ADDR_VAR 0 12
62622: PUSH
62623: CALL_OW 45
62627: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62628: LD_VAR 0 12
62632: PPUSH
62633: LD_VAR 0 8
62637: PPUSH
62638: LD_INT 0
62640: PPUSH
62641: CALL 64791 0 3
// end ;
62645: GO 62599
62647: POP
62648: POP
// if horses then
62649: LD_VAR 0 5
62653: IFFALSE 62720
// for i = 1 to horses do
62655: LD_ADDR_VAR 0 11
62659: PUSH
62660: DOUBLE
62661: LD_INT 1
62663: DEC
62664: ST_TO_ADDR
62665: LD_VAR 0 5
62669: PUSH
62670: FOR_TO
62671: IFFALSE 62718
// begin hc_class := 21 ;
62673: LD_ADDR_OWVAR 28
62677: PUSH
62678: LD_INT 21
62680: ST_TO_ADDR
// hc_gallery :=  ;
62681: LD_ADDR_OWVAR 33
62685: PUSH
62686: LD_STRING 
62688: ST_TO_ADDR
// animal := CreateHuman ;
62689: LD_ADDR_VAR 0 12
62693: PUSH
62694: CALL_OW 44
62698: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62699: LD_VAR 0 12
62703: PPUSH
62704: LD_VAR 0 8
62708: PPUSH
62709: LD_INT 0
62711: PPUSH
62712: CALL 64791 0 3
// end ;
62716: GO 62670
62718: POP
62719: POP
// if birds then
62720: LD_VAR 0 1
62724: IFFALSE 62791
// for i = 1 to birds do
62726: LD_ADDR_VAR 0 11
62730: PUSH
62731: DOUBLE
62732: LD_INT 1
62734: DEC
62735: ST_TO_ADDR
62736: LD_VAR 0 1
62740: PUSH
62741: FOR_TO
62742: IFFALSE 62789
// begin hc_class := 18 ;
62744: LD_ADDR_OWVAR 28
62748: PUSH
62749: LD_INT 18
62751: ST_TO_ADDR
// hc_gallery =  ;
62752: LD_ADDR_OWVAR 33
62756: PUSH
62757: LD_STRING 
62759: ST_TO_ADDR
// animal := CreateHuman ;
62760: LD_ADDR_VAR 0 12
62764: PUSH
62765: CALL_OW 44
62769: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62770: LD_VAR 0 12
62774: PPUSH
62775: LD_VAR 0 8
62779: PPUSH
62780: LD_INT 0
62782: PPUSH
62783: CALL 64791 0 3
// end ;
62787: GO 62741
62789: POP
62790: POP
// if tigers then
62791: LD_VAR 0 2
62795: IFFALSE 62879
// for i = 1 to tigers do
62797: LD_ADDR_VAR 0 11
62801: PUSH
62802: DOUBLE
62803: LD_INT 1
62805: DEC
62806: ST_TO_ADDR
62807: LD_VAR 0 2
62811: PUSH
62812: FOR_TO
62813: IFFALSE 62877
// begin hc_class = class_tiger ;
62815: LD_ADDR_OWVAR 28
62819: PUSH
62820: LD_INT 14
62822: ST_TO_ADDR
// hc_gallery =  ;
62823: LD_ADDR_OWVAR 33
62827: PUSH
62828: LD_STRING 
62830: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62831: LD_ADDR_OWVAR 35
62835: PUSH
62836: LD_INT 7
62838: NEG
62839: PPUSH
62840: LD_INT 7
62842: PPUSH
62843: CALL_OW 12
62847: ST_TO_ADDR
// animal := CreateHuman ;
62848: LD_ADDR_VAR 0 12
62852: PUSH
62853: CALL_OW 44
62857: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62858: LD_VAR 0 12
62862: PPUSH
62863: LD_VAR 0 8
62867: PPUSH
62868: LD_INT 0
62870: PPUSH
62871: CALL 64791 0 3
// end ;
62875: GO 62812
62877: POP
62878: POP
// if apemans then
62879: LD_VAR 0 3
62883: IFFALSE 63006
// for i = 1 to apemans do
62885: LD_ADDR_VAR 0 11
62889: PUSH
62890: DOUBLE
62891: LD_INT 1
62893: DEC
62894: ST_TO_ADDR
62895: LD_VAR 0 3
62899: PUSH
62900: FOR_TO
62901: IFFALSE 63004
// begin hc_class = class_apeman ;
62903: LD_ADDR_OWVAR 28
62907: PUSH
62908: LD_INT 12
62910: ST_TO_ADDR
// hc_gallery =  ;
62911: LD_ADDR_OWVAR 33
62915: PUSH
62916: LD_STRING 
62918: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62919: LD_ADDR_OWVAR 35
62923: PUSH
62924: LD_INT 2
62926: NEG
62927: PPUSH
62928: LD_INT 2
62930: PPUSH
62931: CALL_OW 12
62935: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62936: LD_ADDR_OWVAR 31
62940: PUSH
62941: LD_INT 1
62943: PPUSH
62944: LD_INT 3
62946: PPUSH
62947: CALL_OW 12
62951: PUSH
62952: LD_INT 1
62954: PPUSH
62955: LD_INT 3
62957: PPUSH
62958: CALL_OW 12
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: ST_TO_ADDR
// animal := CreateHuman ;
62975: LD_ADDR_VAR 0 12
62979: PUSH
62980: CALL_OW 44
62984: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62985: LD_VAR 0 12
62989: PPUSH
62990: LD_VAR 0 8
62994: PPUSH
62995: LD_INT 0
62997: PPUSH
62998: CALL 64791 0 3
// end ;
63002: GO 62900
63004: POP
63005: POP
// if enchidnas then
63006: LD_VAR 0 4
63010: IFFALSE 63077
// for i = 1 to enchidnas do
63012: LD_ADDR_VAR 0 11
63016: PUSH
63017: DOUBLE
63018: LD_INT 1
63020: DEC
63021: ST_TO_ADDR
63022: LD_VAR 0 4
63026: PUSH
63027: FOR_TO
63028: IFFALSE 63075
// begin hc_class = 13 ;
63030: LD_ADDR_OWVAR 28
63034: PUSH
63035: LD_INT 13
63037: ST_TO_ADDR
// hc_gallery =  ;
63038: LD_ADDR_OWVAR 33
63042: PUSH
63043: LD_STRING 
63045: ST_TO_ADDR
// animal := CreateHuman ;
63046: LD_ADDR_VAR 0 12
63050: PUSH
63051: CALL_OW 44
63055: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63056: LD_VAR 0 12
63060: PPUSH
63061: LD_VAR 0 8
63065: PPUSH
63066: LD_INT 0
63068: PPUSH
63069: CALL 64791 0 3
// end ;
63073: GO 63027
63075: POP
63076: POP
// if fishes then
63077: LD_VAR 0 7
63081: IFFALSE 63148
// for i = 1 to fishes do
63083: LD_ADDR_VAR 0 11
63087: PUSH
63088: DOUBLE
63089: LD_INT 1
63091: DEC
63092: ST_TO_ADDR
63093: LD_VAR 0 7
63097: PUSH
63098: FOR_TO
63099: IFFALSE 63146
// begin hc_class = 20 ;
63101: LD_ADDR_OWVAR 28
63105: PUSH
63106: LD_INT 20
63108: ST_TO_ADDR
// hc_gallery =  ;
63109: LD_ADDR_OWVAR 33
63113: PUSH
63114: LD_STRING 
63116: ST_TO_ADDR
// animal := CreateHuman ;
63117: LD_ADDR_VAR 0 12
63121: PUSH
63122: CALL_OW 44
63126: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63127: LD_VAR 0 12
63131: PPUSH
63132: LD_VAR 0 9
63136: PPUSH
63137: LD_INT 0
63139: PPUSH
63140: CALL 64791 0 3
// end ;
63144: GO 63098
63146: POP
63147: POP
// end ;
63148: LD_VAR 0 10
63152: RET
// export function WantHeal ( sci , unit ) ; begin
63153: LD_INT 0
63155: PPUSH
// if GetTaskList ( sci ) > 0 then
63156: LD_VAR 0 1
63160: PPUSH
63161: CALL_OW 437
63165: PUSH
63166: LD_INT 0
63168: GREATER
63169: IFFALSE 63241
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63171: LD_VAR 0 1
63175: PPUSH
63176: CALL_OW 437
63180: PUSH
63181: LD_INT 1
63183: ARRAY
63184: PUSH
63185: LD_INT 1
63187: ARRAY
63188: PUSH
63189: LD_STRING l
63191: EQUAL
63192: IFFALSE 63219
63194: PUSH
63195: LD_VAR 0 1
63199: PPUSH
63200: CALL_OW 437
63204: PUSH
63205: LD_INT 1
63207: ARRAY
63208: PUSH
63209: LD_INT 4
63211: ARRAY
63212: PUSH
63213: LD_VAR 0 2
63217: EQUAL
63218: AND
63219: IFFALSE 63231
// result := true else
63221: LD_ADDR_VAR 0 3
63225: PUSH
63226: LD_INT 1
63228: ST_TO_ADDR
63229: GO 63239
// result := false ;
63231: LD_ADDR_VAR 0 3
63235: PUSH
63236: LD_INT 0
63238: ST_TO_ADDR
// end else
63239: GO 63249
// result := false ;
63241: LD_ADDR_VAR 0 3
63245: PUSH
63246: LD_INT 0
63248: ST_TO_ADDR
// end ;
63249: LD_VAR 0 3
63253: RET
// export function HealTarget ( sci ) ; begin
63254: LD_INT 0
63256: PPUSH
// if not sci then
63257: LD_VAR 0 1
63261: NOT
63262: IFFALSE 63266
// exit ;
63264: GO 63331
// result := 0 ;
63266: LD_ADDR_VAR 0 2
63270: PUSH
63271: LD_INT 0
63273: ST_TO_ADDR
// if GetTaskList ( sci ) then
63274: LD_VAR 0 1
63278: PPUSH
63279: CALL_OW 437
63283: IFFALSE 63331
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63285: LD_VAR 0 1
63289: PPUSH
63290: CALL_OW 437
63294: PUSH
63295: LD_INT 1
63297: ARRAY
63298: PUSH
63299: LD_INT 1
63301: ARRAY
63302: PUSH
63303: LD_STRING l
63305: EQUAL
63306: IFFALSE 63331
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63308: LD_ADDR_VAR 0 2
63312: PUSH
63313: LD_VAR 0 1
63317: PPUSH
63318: CALL_OW 437
63322: PUSH
63323: LD_INT 1
63325: ARRAY
63326: PUSH
63327: LD_INT 4
63329: ARRAY
63330: ST_TO_ADDR
// end ;
63331: LD_VAR 0 2
63335: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63336: LD_INT 0
63338: PPUSH
63339: PPUSH
63340: PPUSH
63341: PPUSH
// if not base_units then
63342: LD_VAR 0 1
63346: NOT
63347: IFFALSE 63351
// exit ;
63349: GO 63438
// result := false ;
63351: LD_ADDR_VAR 0 2
63355: PUSH
63356: LD_INT 0
63358: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63359: LD_ADDR_VAR 0 5
63363: PUSH
63364: LD_VAR 0 1
63368: PPUSH
63369: LD_INT 21
63371: PUSH
63372: LD_INT 3
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PPUSH
63379: CALL_OW 72
63383: ST_TO_ADDR
// if not tmp then
63384: LD_VAR 0 5
63388: NOT
63389: IFFALSE 63393
// exit ;
63391: GO 63438
// for i in tmp do
63393: LD_ADDR_VAR 0 3
63397: PUSH
63398: LD_VAR 0 5
63402: PUSH
63403: FOR_IN
63404: IFFALSE 63436
// begin result := EnemyInRange ( i , 22 ) ;
63406: LD_ADDR_VAR 0 2
63410: PUSH
63411: LD_VAR 0 3
63415: PPUSH
63416: LD_INT 22
63418: PPUSH
63419: CALL 60853 0 2
63423: ST_TO_ADDR
// if result then
63424: LD_VAR 0 2
63428: IFFALSE 63434
// exit ;
63430: POP
63431: POP
63432: GO 63438
// end ;
63434: GO 63403
63436: POP
63437: POP
// end ;
63438: LD_VAR 0 2
63442: RET
// export function FilterByTag ( units , tag ) ; begin
63443: LD_INT 0
63445: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63446: LD_ADDR_VAR 0 3
63450: PUSH
63451: LD_VAR 0 1
63455: PPUSH
63456: LD_INT 120
63458: PUSH
63459: LD_VAR 0 2
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PPUSH
63468: CALL_OW 72
63472: ST_TO_ADDR
// end ;
63473: LD_VAR 0 3
63477: RET
// export function IsDriver ( un ) ; begin
63478: LD_INT 0
63480: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63481: LD_ADDR_VAR 0 2
63485: PUSH
63486: LD_VAR 0 1
63490: PUSH
63491: LD_INT 55
63493: PUSH
63494: EMPTY
63495: LIST
63496: PPUSH
63497: CALL_OW 69
63501: IN
63502: ST_TO_ADDR
// end ;
63503: LD_VAR 0 2
63507: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63508: LD_INT 0
63510: PPUSH
63511: PPUSH
// list := [ ] ;
63512: LD_ADDR_VAR 0 5
63516: PUSH
63517: EMPTY
63518: ST_TO_ADDR
// case d of 0 :
63519: LD_VAR 0 3
63523: PUSH
63524: LD_INT 0
63526: DOUBLE
63527: EQUAL
63528: IFTRUE 63532
63530: GO 63665
63532: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63533: LD_ADDR_VAR 0 5
63537: PUSH
63538: LD_VAR 0 1
63542: PUSH
63543: LD_INT 4
63545: MINUS
63546: PUSH
63547: LD_VAR 0 2
63551: PUSH
63552: LD_INT 4
63554: MINUS
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: PUSH
63564: LD_VAR 0 1
63568: PUSH
63569: LD_INT 3
63571: MINUS
63572: PUSH
63573: LD_VAR 0 2
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: LIST
63585: PUSH
63586: LD_VAR 0 1
63590: PUSH
63591: LD_INT 4
63593: PLUS
63594: PUSH
63595: LD_VAR 0 2
63599: PUSH
63600: LD_INT 4
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: PUSH
63608: LD_VAR 0 1
63612: PUSH
63613: LD_INT 3
63615: PLUS
63616: PUSH
63617: LD_VAR 0 2
63621: PUSH
63622: LD_INT 3
63624: PLUS
63625: PUSH
63626: LD_INT 5
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: LIST
63633: PUSH
63634: LD_VAR 0 1
63638: PUSH
63639: LD_VAR 0 2
63643: PUSH
63644: LD_INT 4
63646: PLUS
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: LIST
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: ST_TO_ADDR
// end ; 1 :
63663: GO 64363
63665: LD_INT 1
63667: DOUBLE
63668: EQUAL
63669: IFTRUE 63673
63671: GO 63806
63673: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63674: LD_ADDR_VAR 0 5
63678: PUSH
63679: LD_VAR 0 1
63683: PUSH
63684: LD_VAR 0 2
63688: PUSH
63689: LD_INT 4
63691: MINUS
63692: PUSH
63693: LD_INT 3
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: PUSH
63701: LD_VAR 0 1
63705: PUSH
63706: LD_INT 3
63708: MINUS
63709: PUSH
63710: LD_VAR 0 2
63714: PUSH
63715: LD_INT 3
63717: MINUS
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: PUSH
63727: LD_VAR 0 1
63731: PUSH
63732: LD_INT 4
63734: MINUS
63735: PUSH
63736: LD_VAR 0 2
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: PUSH
63749: LD_VAR 0 1
63753: PUSH
63754: LD_VAR 0 2
63758: PUSH
63759: LD_INT 3
63761: PLUS
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: LIST
63770: PUSH
63771: LD_VAR 0 1
63775: PUSH
63776: LD_INT 4
63778: PLUS
63779: PUSH
63780: LD_VAR 0 2
63784: PUSH
63785: LD_INT 4
63787: PLUS
63788: PUSH
63789: LD_INT 5
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: LIST
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: ST_TO_ADDR
// end ; 2 :
63804: GO 64363
63806: LD_INT 2
63808: DOUBLE
63809: EQUAL
63810: IFTRUE 63814
63812: GO 63943
63814: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63815: LD_ADDR_VAR 0 5
63819: PUSH
63820: LD_VAR 0 1
63824: PUSH
63825: LD_VAR 0 2
63829: PUSH
63830: LD_INT 3
63832: MINUS
63833: PUSH
63834: LD_INT 3
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: PUSH
63842: LD_VAR 0 1
63846: PUSH
63847: LD_INT 4
63849: PLUS
63850: PUSH
63851: LD_VAR 0 2
63855: PUSH
63856: LD_INT 4
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: PUSH
63864: LD_VAR 0 1
63868: PUSH
63869: LD_VAR 0 2
63873: PUSH
63874: LD_INT 4
63876: PLUS
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: PUSH
63886: LD_VAR 0 1
63890: PUSH
63891: LD_INT 3
63893: MINUS
63894: PUSH
63895: LD_VAR 0 2
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: LIST
63907: PUSH
63908: LD_VAR 0 1
63912: PUSH
63913: LD_INT 4
63915: MINUS
63916: PUSH
63917: LD_VAR 0 2
63921: PUSH
63922: LD_INT 4
63924: MINUS
63925: PUSH
63926: LD_INT 2
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: LIST
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: ST_TO_ADDR
// end ; 3 :
63941: GO 64363
63943: LD_INT 3
63945: DOUBLE
63946: EQUAL
63947: IFTRUE 63951
63949: GO 64084
63951: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63952: LD_ADDR_VAR 0 5
63956: PUSH
63957: LD_VAR 0 1
63961: PUSH
63962: LD_INT 3
63964: PLUS
63965: PUSH
63966: LD_VAR 0 2
63970: PUSH
63971: LD_INT 4
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: PUSH
63979: LD_VAR 0 1
63983: PUSH
63984: LD_INT 4
63986: PLUS
63987: PUSH
63988: LD_VAR 0 2
63992: PUSH
63993: LD_INT 4
63995: PLUS
63996: PUSH
63997: LD_INT 5
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: LIST
64004: PUSH
64005: LD_VAR 0 1
64009: PUSH
64010: LD_INT 4
64012: MINUS
64013: PUSH
64014: LD_VAR 0 2
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: LIST
64026: PUSH
64027: LD_VAR 0 1
64031: PUSH
64032: LD_VAR 0 2
64036: PUSH
64037: LD_INT 4
64039: MINUS
64040: PUSH
64041: LD_INT 3
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: LIST
64048: PUSH
64049: LD_VAR 0 1
64053: PUSH
64054: LD_INT 3
64056: MINUS
64057: PUSH
64058: LD_VAR 0 2
64062: PUSH
64063: LD_INT 3
64065: MINUS
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: ST_TO_ADDR
// end ; 4 :
64082: GO 64363
64084: LD_INT 4
64086: DOUBLE
64087: EQUAL
64088: IFTRUE 64092
64090: GO 64225
64092: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64093: LD_ADDR_VAR 0 5
64097: PUSH
64098: LD_VAR 0 1
64102: PUSH
64103: LD_VAR 0 2
64107: PUSH
64108: LD_INT 4
64110: PLUS
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: LIST
64119: PUSH
64120: LD_VAR 0 1
64124: PUSH
64125: LD_INT 3
64127: PLUS
64128: PUSH
64129: LD_VAR 0 2
64133: PUSH
64134: LD_INT 3
64136: PLUS
64137: PUSH
64138: LD_INT 5
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: PUSH
64146: LD_VAR 0 1
64150: PUSH
64151: LD_INT 4
64153: PLUS
64154: PUSH
64155: LD_VAR 0 2
64159: PUSH
64160: LD_INT 4
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: LIST
64167: PUSH
64168: LD_VAR 0 1
64172: PUSH
64173: LD_VAR 0 2
64177: PUSH
64178: LD_INT 3
64180: MINUS
64181: PUSH
64182: LD_INT 3
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: LIST
64189: PUSH
64190: LD_VAR 0 1
64194: PUSH
64195: LD_INT 4
64197: MINUS
64198: PUSH
64199: LD_VAR 0 2
64203: PUSH
64204: LD_INT 4
64206: MINUS
64207: PUSH
64208: LD_INT 2
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: LIST
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: ST_TO_ADDR
// end ; 5 :
64223: GO 64363
64225: LD_INT 5
64227: DOUBLE
64228: EQUAL
64229: IFTRUE 64233
64231: GO 64362
64233: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64234: LD_ADDR_VAR 0 5
64238: PUSH
64239: LD_VAR 0 1
64243: PUSH
64244: LD_INT 4
64246: MINUS
64247: PUSH
64248: LD_VAR 0 2
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: LIST
64260: PUSH
64261: LD_VAR 0 1
64265: PUSH
64266: LD_VAR 0 2
64270: PUSH
64271: LD_INT 4
64273: MINUS
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: LIST
64282: PUSH
64283: LD_VAR 0 1
64287: PUSH
64288: LD_INT 4
64290: PLUS
64291: PUSH
64292: LD_VAR 0 2
64296: PUSH
64297: LD_INT 4
64299: PLUS
64300: PUSH
64301: LD_INT 5
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: LIST
64308: PUSH
64309: LD_VAR 0 1
64313: PUSH
64314: LD_INT 3
64316: PLUS
64317: PUSH
64318: LD_VAR 0 2
64322: PUSH
64323: LD_INT 4
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: PUSH
64331: LD_VAR 0 1
64335: PUSH
64336: LD_VAR 0 2
64340: PUSH
64341: LD_INT 3
64343: PLUS
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: LIST
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: ST_TO_ADDR
// end ; end ;
64360: GO 64363
64362: POP
// result := list ;
64363: LD_ADDR_VAR 0 4
64367: PUSH
64368: LD_VAR 0 5
64372: ST_TO_ADDR
// end ;
64373: LD_VAR 0 4
64377: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64378: LD_INT 0
64380: PPUSH
64381: PPUSH
64382: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64383: LD_VAR 0 1
64387: NOT
64388: IFTRUE 64416
64390: PUSH
64391: LD_VAR 0 2
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: LD_INT 2
64401: PUSH
64402: LD_INT 3
64404: PUSH
64405: LD_INT 4
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: IN
64414: NOT
64415: OR
64416: IFFALSE 64420
// exit ;
64418: GO 64503
// tmp := [ ] ;
64420: LD_ADDR_VAR 0 5
64424: PUSH
64425: EMPTY
64426: ST_TO_ADDR
// for i in units do
64427: LD_ADDR_VAR 0 4
64431: PUSH
64432: LD_VAR 0 1
64436: PUSH
64437: FOR_IN
64438: IFFALSE 64472
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64440: LD_ADDR_VAR 0 5
64444: PUSH
64445: LD_VAR 0 5
64449: PPUSH
64450: LD_VAR 0 4
64454: PPUSH
64455: LD_VAR 0 2
64459: PPUSH
64460: CALL_OW 259
64464: PPUSH
64465: CALL 65898 0 2
64469: ST_TO_ADDR
64470: GO 64437
64472: POP
64473: POP
// if not tmp then
64474: LD_VAR 0 5
64478: NOT
64479: IFFALSE 64483
// exit ;
64481: GO 64503
// result := SortListByListDesc ( units , tmp ) ;
64483: LD_ADDR_VAR 0 3
64487: PUSH
64488: LD_VAR 0 1
64492: PPUSH
64493: LD_VAR 0 5
64497: PPUSH
64498: CALL_OW 77
64502: ST_TO_ADDR
// end ;
64503: LD_VAR 0 3
64507: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64508: LD_INT 0
64510: PPUSH
64511: PPUSH
64512: PPUSH
// result := false ;
64513: LD_ADDR_VAR 0 3
64517: PUSH
64518: LD_INT 0
64520: ST_TO_ADDR
// if not building then
64521: LD_VAR 0 2
64525: NOT
64526: IFFALSE 64530
// exit ;
64528: GO 64674
// x := GetX ( building ) ;
64530: LD_ADDR_VAR 0 4
64534: PUSH
64535: LD_VAR 0 2
64539: PPUSH
64540: CALL_OW 250
64544: ST_TO_ADDR
// y := GetY ( building ) ;
64545: LD_ADDR_VAR 0 5
64549: PUSH
64550: LD_VAR 0 2
64554: PPUSH
64555: CALL_OW 251
64559: ST_TO_ADDR
// if not x or not y then
64560: LD_VAR 0 4
64564: NOT
64565: IFTRUE 64574
64567: PUSH
64568: LD_VAR 0 5
64572: NOT
64573: OR
64574: IFFALSE 64578
// exit ;
64576: GO 64674
// if GetTaskList ( unit ) then
64578: LD_VAR 0 1
64582: PPUSH
64583: CALL_OW 437
64587: IFFALSE 64674
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64589: LD_STRING e
64591: PUSH
64592: LD_VAR 0 1
64596: PPUSH
64597: CALL_OW 437
64601: PUSH
64602: LD_INT 1
64604: ARRAY
64605: PUSH
64606: LD_INT 1
64608: ARRAY
64609: EQUAL
64610: IFFALSE 64637
64612: PUSH
64613: LD_VAR 0 4
64617: PUSH
64618: LD_VAR 0 1
64622: PPUSH
64623: CALL_OW 437
64627: PUSH
64628: LD_INT 1
64630: ARRAY
64631: PUSH
64632: LD_INT 2
64634: ARRAY
64635: EQUAL
64636: AND
64637: IFFALSE 64664
64639: PUSH
64640: LD_VAR 0 5
64644: PUSH
64645: LD_VAR 0 1
64649: PPUSH
64650: CALL_OW 437
64654: PUSH
64655: LD_INT 1
64657: ARRAY
64658: PUSH
64659: LD_INT 3
64661: ARRAY
64662: EQUAL
64663: AND
64664: IFFALSE 64674
// result := true end ;
64666: LD_ADDR_VAR 0 3
64670: PUSH
64671: LD_INT 1
64673: ST_TO_ADDR
// end ;
64674: LD_VAR 0 3
64678: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64679: LD_INT 0
64681: PPUSH
// result := false ;
64682: LD_ADDR_VAR 0 4
64686: PUSH
64687: LD_INT 0
64689: ST_TO_ADDR
// if GetTaskList ( unit ) then
64690: LD_VAR 0 1
64694: PPUSH
64695: CALL_OW 437
64699: IFFALSE 64786
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64701: LD_STRING M
64703: PUSH
64704: LD_VAR 0 1
64708: PPUSH
64709: CALL_OW 437
64713: PUSH
64714: LD_INT 1
64716: ARRAY
64717: PUSH
64718: LD_INT 1
64720: ARRAY
64721: EQUAL
64722: IFFALSE 64749
64724: PUSH
64725: LD_VAR 0 2
64729: PUSH
64730: LD_VAR 0 1
64734: PPUSH
64735: CALL_OW 437
64739: PUSH
64740: LD_INT 1
64742: ARRAY
64743: PUSH
64744: LD_INT 2
64746: ARRAY
64747: EQUAL
64748: AND
64749: IFFALSE 64776
64751: PUSH
64752: LD_VAR 0 3
64756: PUSH
64757: LD_VAR 0 1
64761: PPUSH
64762: CALL_OW 437
64766: PUSH
64767: LD_INT 1
64769: ARRAY
64770: PUSH
64771: LD_INT 3
64773: ARRAY
64774: EQUAL
64775: AND
64776: IFFALSE 64786
// result := true ;
64778: LD_ADDR_VAR 0 4
64782: PUSH
64783: LD_INT 1
64785: ST_TO_ADDR
// end ; end ;
64786: LD_VAR 0 4
64790: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64791: LD_INT 0
64793: PPUSH
64794: PPUSH
64795: PPUSH
64796: PPUSH
// if not unit or not area then
64797: LD_VAR 0 1
64801: NOT
64802: IFTRUE 64811
64804: PUSH
64805: LD_VAR 0 2
64809: NOT
64810: OR
64811: IFFALSE 64815
// exit ;
64813: GO 64991
// tmp := AreaToList ( area , i ) ;
64815: LD_ADDR_VAR 0 6
64819: PUSH
64820: LD_VAR 0 2
64824: PPUSH
64825: LD_VAR 0 5
64829: PPUSH
64830: CALL_OW 517
64834: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64835: LD_ADDR_VAR 0 5
64839: PUSH
64840: DOUBLE
64841: LD_INT 1
64843: DEC
64844: ST_TO_ADDR
64845: LD_VAR 0 6
64849: PUSH
64850: LD_INT 1
64852: ARRAY
64853: PUSH
64854: FOR_TO
64855: IFFALSE 64989
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64857: LD_ADDR_VAR 0 7
64861: PUSH
64862: LD_VAR 0 6
64866: PUSH
64867: LD_INT 1
64869: ARRAY
64870: PUSH
64871: LD_VAR 0 5
64875: ARRAY
64876: PUSH
64877: LD_VAR 0 6
64881: PUSH
64882: LD_INT 2
64884: ARRAY
64885: PUSH
64886: LD_VAR 0 5
64890: ARRAY
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64896: LD_INT 92
64898: PUSH
64899: LD_VAR 0 7
64903: PUSH
64904: LD_INT 1
64906: ARRAY
64907: PUSH
64908: LD_VAR 0 7
64912: PUSH
64913: LD_INT 2
64915: ARRAY
64916: PUSH
64917: LD_INT 2
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: PPUSH
64926: CALL_OW 69
64930: PUSH
64931: LD_INT 0
64933: EQUAL
64934: IFFALSE 64987
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64936: LD_VAR 0 1
64940: PPUSH
64941: LD_VAR 0 7
64945: PUSH
64946: LD_INT 1
64948: ARRAY
64949: PPUSH
64950: LD_VAR 0 7
64954: PUSH
64955: LD_INT 2
64957: ARRAY
64958: PPUSH
64959: LD_VAR 0 3
64963: PPUSH
64964: CALL_OW 48
// result := IsPlaced ( unit ) ;
64968: LD_ADDR_VAR 0 4
64972: PUSH
64973: LD_VAR 0 1
64977: PPUSH
64978: CALL_OW 305
64982: ST_TO_ADDR
// exit ;
64983: POP
64984: POP
64985: GO 64991
// end ; end ;
64987: GO 64854
64989: POP
64990: POP
// end ;
64991: LD_VAR 0 4
64995: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64996: LD_INT 0
64998: PPUSH
64999: PPUSH
65000: PPUSH
// if not side or side > 8 then
65001: LD_VAR 0 1
65005: NOT
65006: IFTRUE 65018
65008: PUSH
65009: LD_VAR 0 1
65013: PUSH
65014: LD_INT 8
65016: GREATER
65017: OR
65018: IFFALSE 65022
// exit ;
65020: GO 65209
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65022: LD_ADDR_VAR 0 4
65026: PUSH
65027: LD_INT 22
65029: PUSH
65030: LD_VAR 0 1
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 21
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PPUSH
65053: CALL_OW 69
65057: ST_TO_ADDR
// if not tmp then
65058: LD_VAR 0 4
65062: NOT
65063: IFFALSE 65067
// exit ;
65065: GO 65209
// enable_addtolog := true ;
65067: LD_ADDR_OWVAR 81
65071: PUSH
65072: LD_INT 1
65074: ST_TO_ADDR
// AddToLog ( [ ) ;
65075: LD_STRING [
65077: PPUSH
65078: CALL_OW 561
// for i in tmp do
65082: LD_ADDR_VAR 0 3
65086: PUSH
65087: LD_VAR 0 4
65091: PUSH
65092: FOR_IN
65093: IFFALSE 65200
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65095: LD_STRING [
65097: PUSH
65098: LD_VAR 0 3
65102: PPUSH
65103: CALL_OW 266
65107: STR
65108: PUSH
65109: LD_STRING , 
65111: STR
65112: PUSH
65113: LD_VAR 0 3
65117: PPUSH
65118: CALL_OW 250
65122: STR
65123: PUSH
65124: LD_STRING , 
65126: STR
65127: PUSH
65128: LD_VAR 0 3
65132: PPUSH
65133: CALL_OW 251
65137: STR
65138: PUSH
65139: LD_STRING , 
65141: STR
65142: PUSH
65143: LD_VAR 0 3
65147: PPUSH
65148: CALL_OW 254
65152: STR
65153: PUSH
65154: LD_STRING , 
65156: STR
65157: PUSH
65158: LD_VAR 0 3
65162: PPUSH
65163: LD_INT 1
65165: PPUSH
65166: CALL_OW 268
65170: STR
65171: PUSH
65172: LD_STRING , 
65174: STR
65175: PUSH
65176: LD_VAR 0 3
65180: PPUSH
65181: LD_INT 2
65183: PPUSH
65184: CALL_OW 268
65188: STR
65189: PUSH
65190: LD_STRING ],
65192: STR
65193: PPUSH
65194: CALL_OW 561
// end ;
65198: GO 65092
65200: POP
65201: POP
// AddToLog ( ]; ) ;
65202: LD_STRING ];
65204: PPUSH
65205: CALL_OW 561
// end ;
65209: LD_VAR 0 2
65213: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65214: LD_INT 0
65216: PPUSH
65217: PPUSH
65218: PPUSH
65219: PPUSH
65220: PPUSH
// if not area or not rate or not max then
65221: LD_VAR 0 1
65225: NOT
65226: IFTRUE 65235
65228: PUSH
65229: LD_VAR 0 2
65233: NOT
65234: OR
65235: IFTRUE 65244
65237: PUSH
65238: LD_VAR 0 4
65242: NOT
65243: OR
65244: IFFALSE 65248
// exit ;
65246: GO 65437
// while 1 do
65248: LD_INT 1
65250: IFFALSE 65437
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65252: LD_ADDR_VAR 0 9
65256: PUSH
65257: LD_VAR 0 1
65261: PPUSH
65262: LD_INT 1
65264: PPUSH
65265: CALL_OW 287
65269: PUSH
65270: LD_INT 10
65272: MUL
65273: ST_TO_ADDR
// r := rate / 10 ;
65274: LD_ADDR_VAR 0 7
65278: PUSH
65279: LD_VAR 0 2
65283: PUSH
65284: LD_INT 10
65286: DIVREAL
65287: ST_TO_ADDR
// time := 1 1$00 ;
65288: LD_ADDR_VAR 0 8
65292: PUSH
65293: LD_INT 2100
65295: ST_TO_ADDR
// if amount < min then
65296: LD_VAR 0 9
65300: PUSH
65301: LD_VAR 0 3
65305: LESS
65306: IFFALSE 65324
// r := r * 2 else
65308: LD_ADDR_VAR 0 7
65312: PUSH
65313: LD_VAR 0 7
65317: PUSH
65318: LD_INT 2
65320: MUL
65321: ST_TO_ADDR
65322: GO 65350
// if amount > max then
65324: LD_VAR 0 9
65328: PUSH
65329: LD_VAR 0 4
65333: GREATER
65334: IFFALSE 65350
// r := r / 2 ;
65336: LD_ADDR_VAR 0 7
65340: PUSH
65341: LD_VAR 0 7
65345: PUSH
65346: LD_INT 2
65348: DIVREAL
65349: ST_TO_ADDR
// time := time / r ;
65350: LD_ADDR_VAR 0 8
65354: PUSH
65355: LD_VAR 0 8
65359: PUSH
65360: LD_VAR 0 7
65364: DIVREAL
65365: ST_TO_ADDR
// if time < 0 then
65366: LD_VAR 0 8
65370: PUSH
65371: LD_INT 0
65373: LESS
65374: IFFALSE 65391
// time := time * - 1 ;
65376: LD_ADDR_VAR 0 8
65380: PUSH
65381: LD_VAR 0 8
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: MUL
65390: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65391: LD_VAR 0 8
65395: PUSH
65396: LD_INT 35
65398: PPUSH
65399: LD_INT 875
65401: PPUSH
65402: CALL_OW 12
65406: PLUS
65407: PPUSH
65408: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65412: LD_INT 1
65414: PPUSH
65415: LD_INT 5
65417: PPUSH
65418: CALL_OW 12
65422: PPUSH
65423: LD_VAR 0 1
65427: PPUSH
65428: LD_INT 1
65430: PPUSH
65431: CALL_OW 55
// end ;
65435: GO 65248
// end ;
65437: LD_VAR 0 5
65441: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65442: LD_INT 0
65444: PPUSH
65445: PPUSH
65446: PPUSH
65447: PPUSH
65448: PPUSH
65449: PPUSH
65450: PPUSH
65451: PPUSH
// if not turrets or not factories then
65452: LD_VAR 0 1
65456: NOT
65457: IFTRUE 65466
65459: PUSH
65460: LD_VAR 0 2
65464: NOT
65465: OR
65466: IFFALSE 65470
// exit ;
65468: GO 65777
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65470: LD_ADDR_VAR 0 10
65474: PUSH
65475: LD_INT 5
65477: PUSH
65478: LD_INT 6
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: LD_INT 4
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 3
65497: PUSH
65498: LD_INT 5
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 24
65512: PUSH
65513: LD_INT 25
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 23
65522: PUSH
65523: LD_INT 27
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 42
65536: PUSH
65537: LD_INT 43
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 44
65546: PUSH
65547: LD_INT 46
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 45
65556: PUSH
65557: LD_INT 47
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: LIST
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: ST_TO_ADDR
// result := [ ] ;
65574: LD_ADDR_VAR 0 3
65578: PUSH
65579: EMPTY
65580: ST_TO_ADDR
// for i in turrets do
65581: LD_ADDR_VAR 0 4
65585: PUSH
65586: LD_VAR 0 1
65590: PUSH
65591: FOR_IN
65592: IFFALSE 65775
// begin nat := GetNation ( i ) ;
65594: LD_ADDR_VAR 0 7
65598: PUSH
65599: LD_VAR 0 4
65603: PPUSH
65604: CALL_OW 248
65608: ST_TO_ADDR
// weapon := 0 ;
65609: LD_ADDR_VAR 0 8
65613: PUSH
65614: LD_INT 0
65616: ST_TO_ADDR
// if not nat then
65617: LD_VAR 0 7
65621: NOT
65622: IFFALSE 65626
// continue ;
65624: GO 65591
// for j in list [ nat ] do
65626: LD_ADDR_VAR 0 5
65630: PUSH
65631: LD_VAR 0 10
65635: PUSH
65636: LD_VAR 0 7
65640: ARRAY
65641: PUSH
65642: FOR_IN
65643: IFFALSE 65684
// if GetBWeapon ( i ) = j [ 1 ] then
65645: LD_VAR 0 4
65649: PPUSH
65650: CALL_OW 269
65654: PUSH
65655: LD_VAR 0 5
65659: PUSH
65660: LD_INT 1
65662: ARRAY
65663: EQUAL
65664: IFFALSE 65682
// begin weapon := j [ 2 ] ;
65666: LD_ADDR_VAR 0 8
65670: PUSH
65671: LD_VAR 0 5
65675: PUSH
65676: LD_INT 2
65678: ARRAY
65679: ST_TO_ADDR
// break ;
65680: GO 65684
// end ;
65682: GO 65642
65684: POP
65685: POP
// if not weapon then
65686: LD_VAR 0 8
65690: NOT
65691: IFFALSE 65695
// continue ;
65693: GO 65591
// for k in factories do
65695: LD_ADDR_VAR 0 6
65699: PUSH
65700: LD_VAR 0 2
65704: PUSH
65705: FOR_IN
65706: IFFALSE 65771
// begin weapons := AvailableWeaponList ( k ) ;
65708: LD_ADDR_VAR 0 9
65712: PUSH
65713: LD_VAR 0 6
65717: PPUSH
65718: CALL_OW 478
65722: ST_TO_ADDR
// if not weapons then
65723: LD_VAR 0 9
65727: NOT
65728: IFFALSE 65732
// continue ;
65730: GO 65705
// if weapon in weapons then
65732: LD_VAR 0 8
65736: PUSH
65737: LD_VAR 0 9
65741: IN
65742: IFFALSE 65769
// begin result := [ i , weapon ] ;
65744: LD_ADDR_VAR 0 3
65748: PUSH
65749: LD_VAR 0 4
65753: PUSH
65754: LD_VAR 0 8
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: ST_TO_ADDR
// exit ;
65763: POP
65764: POP
65765: POP
65766: POP
65767: GO 65777
// end ; end ;
65769: GO 65705
65771: POP
65772: POP
// end ;
65773: GO 65591
65775: POP
65776: POP
// end ;
65777: LD_VAR 0 3
65781: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65782: LD_INT 0
65784: PPUSH
// if not side or side > 8 then
65785: LD_VAR 0 3
65789: NOT
65790: IFTRUE 65802
65792: PUSH
65793: LD_VAR 0 3
65797: PUSH
65798: LD_INT 8
65800: GREATER
65801: OR
65802: IFFALSE 65806
// exit ;
65804: GO 65865
// if not range then
65806: LD_VAR 0 4
65810: NOT
65811: IFFALSE 65822
// range := - 12 ;
65813: LD_ADDR_VAR 0 4
65817: PUSH
65818: LD_INT 12
65820: NEG
65821: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65822: LD_VAR 0 1
65826: PPUSH
65827: LD_VAR 0 2
65831: PPUSH
65832: LD_VAR 0 3
65836: PPUSH
65837: LD_VAR 0 4
65841: PPUSH
65842: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65846: LD_VAR 0 1
65850: PPUSH
65851: LD_VAR 0 2
65855: PPUSH
65856: LD_VAR 0 3
65860: PPUSH
65861: CALL_OW 331
// end ;
65865: LD_VAR 0 5
65869: RET
// export function Video ( mode ) ; begin
65870: LD_INT 0
65872: PPUSH
// ingame_video = mode ;
65873: LD_ADDR_OWVAR 52
65877: PUSH
65878: LD_VAR 0 1
65882: ST_TO_ADDR
// interface_hidden = mode ;
65883: LD_ADDR_OWVAR 54
65887: PUSH
65888: LD_VAR 0 1
65892: ST_TO_ADDR
// end ;
65893: LD_VAR 0 2
65897: RET
// export function Join ( array , element ) ; begin
65898: LD_INT 0
65900: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65901: LD_ADDR_VAR 0 3
65905: PUSH
65906: LD_VAR 0 1
65910: PPUSH
65911: LD_VAR 0 1
65915: PUSH
65916: LD_INT 1
65918: PLUS
65919: PPUSH
65920: LD_VAR 0 2
65924: PPUSH
65925: CALL_OW 1
65929: ST_TO_ADDR
// end ;
65930: LD_VAR 0 3
65934: RET
// export function JoinUnion ( array , element ) ; begin
65935: LD_INT 0
65937: PPUSH
// result := array union element ;
65938: LD_ADDR_VAR 0 3
65942: PUSH
65943: LD_VAR 0 1
65947: PUSH
65948: LD_VAR 0 2
65952: UNION
65953: ST_TO_ADDR
// end ;
65954: LD_VAR 0 3
65958: RET
// export function GetBehemoths ( side ) ; begin
65959: LD_INT 0
65961: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65962: LD_ADDR_VAR 0 2
65966: PUSH
65967: LD_INT 22
65969: PUSH
65970: LD_VAR 0 1
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 31
65981: PUSH
65982: LD_INT 25
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PPUSH
65993: CALL_OW 69
65997: ST_TO_ADDR
// end ;
65998: LD_VAR 0 2
66002: RET
// export function Shuffle ( array ) ; var i , index ; begin
66003: LD_INT 0
66005: PPUSH
66006: PPUSH
66007: PPUSH
// result := [ ] ;
66008: LD_ADDR_VAR 0 2
66012: PUSH
66013: EMPTY
66014: ST_TO_ADDR
// if not array then
66015: LD_VAR 0 1
66019: NOT
66020: IFFALSE 66024
// exit ;
66022: GO 66123
// Randomize ;
66024: CALL_OW 10
// for i = array downto 1 do
66028: LD_ADDR_VAR 0 3
66032: PUSH
66033: DOUBLE
66034: LD_VAR 0 1
66038: INC
66039: ST_TO_ADDR
66040: LD_INT 1
66042: PUSH
66043: FOR_DOWNTO
66044: IFFALSE 66121
// begin index := rand ( 1 , array ) ;
66046: LD_ADDR_VAR 0 4
66050: PUSH
66051: LD_INT 1
66053: PPUSH
66054: LD_VAR 0 1
66058: PPUSH
66059: CALL_OW 12
66063: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66064: LD_ADDR_VAR 0 2
66068: PUSH
66069: LD_VAR 0 2
66073: PPUSH
66074: LD_VAR 0 2
66078: PUSH
66079: LD_INT 1
66081: PLUS
66082: PPUSH
66083: LD_VAR 0 1
66087: PUSH
66088: LD_VAR 0 4
66092: ARRAY
66093: PPUSH
66094: CALL_OW 2
66098: ST_TO_ADDR
// array := Delete ( array , index ) ;
66099: LD_ADDR_VAR 0 1
66103: PUSH
66104: LD_VAR 0 1
66108: PPUSH
66109: LD_VAR 0 4
66113: PPUSH
66114: CALL_OW 3
66118: ST_TO_ADDR
// end ;
66119: GO 66043
66121: POP
66122: POP
// end ;
66123: LD_VAR 0 2
66127: RET
// export function GetBaseMaterials ( base ) ; begin
66128: LD_INT 0
66130: PPUSH
// result := [ 0 , 0 , 0 ] ;
66131: LD_ADDR_VAR 0 2
66135: PUSH
66136: LD_INT 0
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: LIST
66149: ST_TO_ADDR
// if not base then
66150: LD_VAR 0 1
66154: NOT
66155: IFFALSE 66159
// exit ;
66157: GO 66208
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66159: LD_ADDR_VAR 0 2
66163: PUSH
66164: LD_VAR 0 1
66168: PPUSH
66169: LD_INT 1
66171: PPUSH
66172: CALL_OW 275
66176: PUSH
66177: LD_VAR 0 1
66181: PPUSH
66182: LD_INT 2
66184: PPUSH
66185: CALL_OW 275
66189: PUSH
66190: LD_VAR 0 1
66194: PPUSH
66195: LD_INT 3
66197: PPUSH
66198: CALL_OW 275
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: LIST
66207: ST_TO_ADDR
// end ;
66208: LD_VAR 0 2
66212: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66213: LD_INT 0
66215: PPUSH
66216: PPUSH
// result := array ;
66217: LD_ADDR_VAR 0 3
66221: PUSH
66222: LD_VAR 0 1
66226: ST_TO_ADDR
// if size >= result then
66227: LD_VAR 0 2
66231: PUSH
66232: LD_VAR 0 3
66236: GREATEREQUAL
66237: IFFALSE 66241
// exit ;
66239: GO 66291
// if size then
66241: LD_VAR 0 2
66245: IFFALSE 66291
// for i := array downto size do
66247: LD_ADDR_VAR 0 4
66251: PUSH
66252: DOUBLE
66253: LD_VAR 0 1
66257: INC
66258: ST_TO_ADDR
66259: LD_VAR 0 2
66263: PUSH
66264: FOR_DOWNTO
66265: IFFALSE 66289
// result := Delete ( result , result ) ;
66267: LD_ADDR_VAR 0 3
66271: PUSH
66272: LD_VAR 0 3
66276: PPUSH
66277: LD_VAR 0 3
66281: PPUSH
66282: CALL_OW 3
66286: ST_TO_ADDR
66287: GO 66264
66289: POP
66290: POP
// end ;
66291: LD_VAR 0 3
66295: RET
// export function ComExit ( unit ) ; var tmp ; begin
66296: LD_INT 0
66298: PPUSH
66299: PPUSH
// if not IsInUnit ( unit ) then
66300: LD_VAR 0 1
66304: PPUSH
66305: CALL_OW 310
66309: NOT
66310: IFFALSE 66314
// exit ;
66312: GO 66374
// tmp := IsInUnit ( unit ) ;
66314: LD_ADDR_VAR 0 3
66318: PUSH
66319: LD_VAR 0 1
66323: PPUSH
66324: CALL_OW 310
66328: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66329: LD_VAR 0 3
66333: PPUSH
66334: CALL_OW 247
66338: PUSH
66339: LD_INT 2
66341: EQUAL
66342: IFFALSE 66355
// ComExitVehicle ( unit ) else
66344: LD_VAR 0 1
66348: PPUSH
66349: CALL_OW 121
66353: GO 66364
// ComExitBuilding ( unit ) ;
66355: LD_VAR 0 1
66359: PPUSH
66360: CALL_OW 122
// result := tmp ;
66364: LD_ADDR_VAR 0 2
66368: PUSH
66369: LD_VAR 0 3
66373: ST_TO_ADDR
// end ;
66374: LD_VAR 0 2
66378: RET
// export function ComExitAll ( units ) ; var i ; begin
66379: LD_INT 0
66381: PPUSH
66382: PPUSH
// if not units then
66383: LD_VAR 0 1
66387: NOT
66388: IFFALSE 66392
// exit ;
66390: GO 66418
// for i in units do
66392: LD_ADDR_VAR 0 3
66396: PUSH
66397: LD_VAR 0 1
66401: PUSH
66402: FOR_IN
66403: IFFALSE 66416
// ComExit ( i ) ;
66405: LD_VAR 0 3
66409: PPUSH
66410: CALL 66296 0 1
66414: GO 66402
66416: POP
66417: POP
// end ;
66418: LD_VAR 0 2
66422: RET
// export function ResetHc ; begin
66423: LD_INT 0
66425: PPUSH
// InitHc ;
66426: CALL_OW 19
// hc_importance := 0 ;
66430: LD_ADDR_OWVAR 32
66434: PUSH
66435: LD_INT 0
66437: ST_TO_ADDR
// end ;
66438: LD_VAR 0 1
66442: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66443: LD_INT 0
66445: PPUSH
66446: PPUSH
66447: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66448: LD_ADDR_VAR 0 6
66452: PUSH
66453: LD_VAR 0 1
66457: PUSH
66458: LD_VAR 0 3
66462: PLUS
66463: PUSH
66464: LD_INT 2
66466: DIV
66467: ST_TO_ADDR
// if _x < 0 then
66468: LD_VAR 0 6
66472: PUSH
66473: LD_INT 0
66475: LESS
66476: IFFALSE 66493
// _x := _x * - 1 ;
66478: LD_ADDR_VAR 0 6
66482: PUSH
66483: LD_VAR 0 6
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: MUL
66492: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66493: LD_ADDR_VAR 0 7
66497: PUSH
66498: LD_VAR 0 2
66502: PUSH
66503: LD_VAR 0 4
66507: PLUS
66508: PUSH
66509: LD_INT 2
66511: DIV
66512: ST_TO_ADDR
// if _y < 0 then
66513: LD_VAR 0 7
66517: PUSH
66518: LD_INT 0
66520: LESS
66521: IFFALSE 66538
// _y := _y * - 1 ;
66523: LD_ADDR_VAR 0 7
66527: PUSH
66528: LD_VAR 0 7
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: MUL
66537: ST_TO_ADDR
// result := [ _x , _y ] ;
66538: LD_ADDR_VAR 0 5
66542: PUSH
66543: LD_VAR 0 6
66547: PUSH
66548: LD_VAR 0 7
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: ST_TO_ADDR
// end ;
66557: LD_VAR 0 5
66561: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66562: LD_INT 0
66564: PPUSH
66565: PPUSH
66566: PPUSH
66567: PPUSH
// task := GetTaskList ( unit ) ;
66568: LD_ADDR_VAR 0 7
66572: PUSH
66573: LD_VAR 0 1
66577: PPUSH
66578: CALL_OW 437
66582: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66583: LD_VAR 0 7
66587: NOT
66588: IFFALSE 66607
66590: PUSH
66591: LD_VAR 0 1
66595: PPUSH
66596: LD_VAR 0 2
66600: PPUSH
66601: CALL_OW 308
66605: NOT
66606: AND
66607: IFFALSE 66611
// exit ;
66609: GO 66729
// if IsInArea ( unit , area ) then
66611: LD_VAR 0 1
66615: PPUSH
66616: LD_VAR 0 2
66620: PPUSH
66621: CALL_OW 308
66625: IFFALSE 66643
// begin ComMoveToArea ( unit , goAway ) ;
66627: LD_VAR 0 1
66631: PPUSH
66632: LD_VAR 0 3
66636: PPUSH
66637: CALL_OW 113
// exit ;
66641: GO 66729
// end ; if task [ 1 ] [ 1 ] <> M then
66643: LD_VAR 0 7
66647: PUSH
66648: LD_INT 1
66650: ARRAY
66651: PUSH
66652: LD_INT 1
66654: ARRAY
66655: PUSH
66656: LD_STRING M
66658: NONEQUAL
66659: IFFALSE 66663
// exit ;
66661: GO 66729
// x := task [ 1 ] [ 2 ] ;
66663: LD_ADDR_VAR 0 5
66667: PUSH
66668: LD_VAR 0 7
66672: PUSH
66673: LD_INT 1
66675: ARRAY
66676: PUSH
66677: LD_INT 2
66679: ARRAY
66680: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66681: LD_ADDR_VAR 0 6
66685: PUSH
66686: LD_VAR 0 7
66690: PUSH
66691: LD_INT 1
66693: ARRAY
66694: PUSH
66695: LD_INT 3
66697: ARRAY
66698: ST_TO_ADDR
// if InArea ( x , y , area ) then
66699: LD_VAR 0 5
66703: PPUSH
66704: LD_VAR 0 6
66708: PPUSH
66709: LD_VAR 0 2
66713: PPUSH
66714: CALL_OW 309
66718: IFFALSE 66729
// ComStop ( unit ) ;
66720: LD_VAR 0 1
66724: PPUSH
66725: CALL_OW 141
// end ;
66729: LD_VAR 0 4
66733: RET
// export function Abs ( value ) ; begin
66734: LD_INT 0
66736: PPUSH
// result := value ;
66737: LD_ADDR_VAR 0 2
66741: PUSH
66742: LD_VAR 0 1
66746: ST_TO_ADDR
// if value < 0 then
66747: LD_VAR 0 1
66751: PUSH
66752: LD_INT 0
66754: LESS
66755: IFFALSE 66772
// result := value * - 1 ;
66757: LD_ADDR_VAR 0 2
66761: PUSH
66762: LD_VAR 0 1
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: MUL
66771: ST_TO_ADDR
// end ;
66772: LD_VAR 0 2
66776: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66777: LD_INT 0
66779: PPUSH
66780: PPUSH
66781: PPUSH
66782: PPUSH
66783: PPUSH
66784: PPUSH
66785: PPUSH
66786: PPUSH
// if not unit or not building then
66787: LD_VAR 0 1
66791: NOT
66792: IFTRUE 66801
66794: PUSH
66795: LD_VAR 0 2
66799: NOT
66800: OR
66801: IFFALSE 66805
// exit ;
66803: GO 67033
// x := GetX ( building ) ;
66805: LD_ADDR_VAR 0 4
66809: PUSH
66810: LD_VAR 0 2
66814: PPUSH
66815: CALL_OW 250
66819: ST_TO_ADDR
// y := GetY ( building ) ;
66820: LD_ADDR_VAR 0 6
66824: PUSH
66825: LD_VAR 0 2
66829: PPUSH
66830: CALL_OW 251
66834: ST_TO_ADDR
// d := GetDir ( building ) ;
66835: LD_ADDR_VAR 0 8
66839: PUSH
66840: LD_VAR 0 2
66844: PPUSH
66845: CALL_OW 254
66849: ST_TO_ADDR
// r := 4 ;
66850: LD_ADDR_VAR 0 9
66854: PUSH
66855: LD_INT 4
66857: ST_TO_ADDR
// for i := 1 to 5 do
66858: LD_ADDR_VAR 0 10
66862: PUSH
66863: DOUBLE
66864: LD_INT 1
66866: DEC
66867: ST_TO_ADDR
66868: LD_INT 5
66870: PUSH
66871: FOR_TO
66872: IFFALSE 67031
// begin _x := ShiftX ( x , d , r + i ) ;
66874: LD_ADDR_VAR 0 5
66878: PUSH
66879: LD_VAR 0 4
66883: PPUSH
66884: LD_VAR 0 8
66888: PPUSH
66889: LD_VAR 0 9
66893: PUSH
66894: LD_VAR 0 10
66898: PLUS
66899: PPUSH
66900: CALL_OW 272
66904: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66905: LD_ADDR_VAR 0 7
66909: PUSH
66910: LD_VAR 0 6
66914: PPUSH
66915: LD_VAR 0 8
66919: PPUSH
66920: LD_VAR 0 9
66924: PUSH
66925: LD_VAR 0 10
66929: PLUS
66930: PPUSH
66931: CALL_OW 273
66935: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66936: LD_VAR 0 5
66940: PPUSH
66941: LD_VAR 0 7
66945: PPUSH
66946: CALL_OW 488
66950: IFFALSE 66985
66952: PUSH
66953: LD_VAR 0 5
66957: PPUSH
66958: LD_VAR 0 7
66962: PPUSH
66963: CALL_OW 428
66967: PPUSH
66968: CALL_OW 247
66972: PUSH
66973: LD_INT 3
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: IN
66983: NOT
66984: AND
66985: IFFALSE 67029
// begin ComMoveXY ( unit , _x , _y ) ;
66987: LD_VAR 0 1
66991: PPUSH
66992: LD_VAR 0 5
66996: PPUSH
66997: LD_VAR 0 7
67001: PPUSH
67002: CALL_OW 111
// result := [ _x , _y ] ;
67006: LD_ADDR_VAR 0 3
67010: PUSH
67011: LD_VAR 0 5
67015: PUSH
67016: LD_VAR 0 7
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: ST_TO_ADDR
// exit ;
67025: POP
67026: POP
67027: GO 67033
// end ; end ;
67029: GO 66871
67031: POP
67032: POP
// end ;
67033: LD_VAR 0 3
67037: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67038: LD_INT 0
67040: PPUSH
67041: PPUSH
67042: PPUSH
// result := 0 ;
67043: LD_ADDR_VAR 0 3
67047: PUSH
67048: LD_INT 0
67050: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67051: LD_VAR 0 1
67055: PUSH
67056: LD_INT 0
67058: LESS
67059: IFTRUE 67071
67061: PUSH
67062: LD_VAR 0 1
67066: PUSH
67067: LD_INT 8
67069: GREATER
67070: OR
67071: IFTRUE 67083
67073: PUSH
67074: LD_VAR 0 2
67078: PUSH
67079: LD_INT 0
67081: LESS
67082: OR
67083: IFTRUE 67095
67085: PUSH
67086: LD_VAR 0 2
67090: PUSH
67091: LD_INT 8
67093: GREATER
67094: OR
67095: IFFALSE 67099
// exit ;
67097: GO 67174
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67099: LD_ADDR_VAR 0 4
67103: PUSH
67104: LD_INT 22
67106: PUSH
67107: LD_VAR 0 2
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PPUSH
67116: CALL_OW 69
67120: PUSH
67121: FOR_IN
67122: IFFALSE 67172
// begin un := UnitShoot ( i ) ;
67124: LD_ADDR_VAR 0 5
67128: PUSH
67129: LD_VAR 0 4
67133: PPUSH
67134: CALL_OW 504
67138: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67139: LD_VAR 0 5
67143: PPUSH
67144: CALL_OW 255
67148: PUSH
67149: LD_VAR 0 1
67153: EQUAL
67154: IFFALSE 67170
// begin result := un ;
67156: LD_ADDR_VAR 0 3
67160: PUSH
67161: LD_VAR 0 5
67165: ST_TO_ADDR
// exit ;
67166: POP
67167: POP
67168: GO 67174
// end ; end ;
67170: GO 67121
67172: POP
67173: POP
// end ;
67174: LD_VAR 0 3
67178: RET
// export function GetCargoBay ( units ) ; begin
67179: LD_INT 0
67181: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67182: LD_ADDR_VAR 0 2
67186: PUSH
67187: LD_VAR 0 1
67191: PPUSH
67192: LD_INT 2
67194: PUSH
67195: LD_INT 34
67197: PUSH
67198: LD_INT 12
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 34
67207: PUSH
67208: LD_INT 51
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 34
67217: PUSH
67218: LD_INT 32
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 34
67227: PUSH
67228: LD_INT 89
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: PPUSH
67242: CALL_OW 72
67246: ST_TO_ADDR
// end ;
67247: LD_VAR 0 2
67251: RET
// export function Negate ( value ) ; begin
67252: LD_INT 0
67254: PPUSH
// result := not value ;
67255: LD_ADDR_VAR 0 2
67259: PUSH
67260: LD_VAR 0 1
67264: NOT
67265: ST_TO_ADDR
// end ;
67266: LD_VAR 0 2
67270: RET
// export function Inc ( value ) ; begin
67271: LD_INT 0
67273: PPUSH
// result := value + 1 ;
67274: LD_ADDR_VAR 0 2
67278: PUSH
67279: LD_VAR 0 1
67283: PUSH
67284: LD_INT 1
67286: PLUS
67287: ST_TO_ADDR
// end ;
67288: LD_VAR 0 2
67292: RET
// export function Dec ( value ) ; begin
67293: LD_INT 0
67295: PPUSH
// result := value - 1 ;
67296: LD_ADDR_VAR 0 2
67300: PUSH
67301: LD_VAR 0 1
67305: PUSH
67306: LD_INT 1
67308: MINUS
67309: ST_TO_ADDR
// end ;
67310: LD_VAR 0 2
67314: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67315: LD_INT 0
67317: PPUSH
67318: PPUSH
67319: PPUSH
67320: PPUSH
67321: PPUSH
67322: PPUSH
67323: PPUSH
67324: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67325: LD_VAR 0 1
67329: PPUSH
67330: LD_VAR 0 2
67334: PPUSH
67335: CALL_OW 488
67339: NOT
67340: IFTRUE 67359
67342: PUSH
67343: LD_VAR 0 3
67347: PPUSH
67348: LD_VAR 0 4
67352: PPUSH
67353: CALL_OW 488
67357: NOT
67358: OR
67359: IFFALSE 67372
// begin result := - 1 ;
67361: LD_ADDR_VAR 0 5
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: ST_TO_ADDR
// exit ;
67370: GO 67607
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67372: LD_ADDR_VAR 0 12
67376: PUSH
67377: LD_VAR 0 1
67381: PPUSH
67382: LD_VAR 0 2
67386: PPUSH
67387: LD_VAR 0 3
67391: PPUSH
67392: LD_VAR 0 4
67396: PPUSH
67397: CALL 66443 0 4
67401: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67402: LD_ADDR_VAR 0 11
67406: PUSH
67407: LD_VAR 0 1
67411: PPUSH
67412: LD_VAR 0 2
67416: PPUSH
67417: LD_VAR 0 12
67421: PUSH
67422: LD_INT 1
67424: ARRAY
67425: PPUSH
67426: LD_VAR 0 12
67430: PUSH
67431: LD_INT 2
67433: ARRAY
67434: PPUSH
67435: CALL_OW 298
67439: ST_TO_ADDR
// distance := 9999 ;
67440: LD_ADDR_VAR 0 10
67444: PUSH
67445: LD_INT 9999
67447: ST_TO_ADDR
// for i := 0 to 5 do
67448: LD_ADDR_VAR 0 6
67452: PUSH
67453: DOUBLE
67454: LD_INT 0
67456: DEC
67457: ST_TO_ADDR
67458: LD_INT 5
67460: PUSH
67461: FOR_TO
67462: IFFALSE 67605
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67464: LD_ADDR_VAR 0 7
67468: PUSH
67469: LD_VAR 0 1
67473: PPUSH
67474: LD_VAR 0 6
67478: PPUSH
67479: LD_VAR 0 11
67483: PPUSH
67484: CALL_OW 272
67488: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67489: LD_ADDR_VAR 0 8
67493: PUSH
67494: LD_VAR 0 2
67498: PPUSH
67499: LD_VAR 0 6
67503: PPUSH
67504: LD_VAR 0 11
67508: PPUSH
67509: CALL_OW 273
67513: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67514: LD_VAR 0 7
67518: PPUSH
67519: LD_VAR 0 8
67523: PPUSH
67524: CALL_OW 488
67528: NOT
67529: IFFALSE 67533
// continue ;
67531: GO 67461
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67533: LD_ADDR_VAR 0 9
67537: PUSH
67538: LD_VAR 0 12
67542: PUSH
67543: LD_INT 1
67545: ARRAY
67546: PPUSH
67547: LD_VAR 0 12
67551: PUSH
67552: LD_INT 2
67554: ARRAY
67555: PPUSH
67556: LD_VAR 0 7
67560: PPUSH
67561: LD_VAR 0 8
67565: PPUSH
67566: CALL_OW 298
67570: ST_TO_ADDR
// if tmp < distance then
67571: LD_VAR 0 9
67575: PUSH
67576: LD_VAR 0 10
67580: LESS
67581: IFFALSE 67603
// begin result := i ;
67583: LD_ADDR_VAR 0 5
67587: PUSH
67588: LD_VAR 0 6
67592: ST_TO_ADDR
// distance := tmp ;
67593: LD_ADDR_VAR 0 10
67597: PUSH
67598: LD_VAR 0 9
67602: ST_TO_ADDR
// end ; end ;
67603: GO 67461
67605: POP
67606: POP
// end ;
67607: LD_VAR 0 5
67611: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67612: LD_INT 0
67614: PPUSH
67615: PPUSH
// if not driver or not IsInUnit ( driver ) then
67616: LD_VAR 0 1
67620: NOT
67621: IFTRUE 67635
67623: PUSH
67624: LD_VAR 0 1
67628: PPUSH
67629: CALL_OW 310
67633: NOT
67634: OR
67635: IFFALSE 67639
// exit ;
67637: GO 67729
// vehicle := IsInUnit ( driver ) ;
67639: LD_ADDR_VAR 0 3
67643: PUSH
67644: LD_VAR 0 1
67648: PPUSH
67649: CALL_OW 310
67653: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67654: LD_VAR 0 1
67658: PPUSH
67659: LD_STRING \
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: LD_INT 0
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: LD_INT 0
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: PUSH
67689: LD_STRING E
67691: PUSH
67692: LD_INT 0
67694: PUSH
67695: LD_INT 0
67697: PUSH
67698: LD_VAR 0 3
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PPUSH
67725: CALL_OW 446
// end ;
67729: LD_VAR 0 2
67733: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67734: LD_INT 0
67736: PPUSH
67737: PPUSH
// if not driver or not IsInUnit ( driver ) then
67738: LD_VAR 0 1
67742: NOT
67743: IFTRUE 67757
67745: PUSH
67746: LD_VAR 0 1
67750: PPUSH
67751: CALL_OW 310
67755: NOT
67756: OR
67757: IFFALSE 67761
// exit ;
67759: GO 67851
// vehicle := IsInUnit ( driver ) ;
67761: LD_ADDR_VAR 0 3
67765: PUSH
67766: LD_VAR 0 1
67770: PPUSH
67771: CALL_OW 310
67775: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67776: LD_VAR 0 1
67780: PPUSH
67781: LD_STRING \
67783: PUSH
67784: LD_INT 0
67786: PUSH
67787: LD_INT 0
67789: PUSH
67790: LD_INT 0
67792: PUSH
67793: LD_INT 0
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: LD_INT 0
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: PUSH
67811: LD_STRING E
67813: PUSH
67814: LD_INT 0
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: LD_VAR 0 3
67824: PUSH
67825: LD_INT 0
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PPUSH
67847: CALL_OW 447
// end ;
67851: LD_VAR 0 2
67855: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67856: LD_INT 0
67858: PPUSH
67859: PPUSH
67860: PPUSH
// tmp := [ ] ;
67861: LD_ADDR_VAR 0 5
67865: PUSH
67866: EMPTY
67867: ST_TO_ADDR
// for i in units do
67868: LD_ADDR_VAR 0 4
67872: PUSH
67873: LD_VAR 0 1
67877: PUSH
67878: FOR_IN
67879: IFFALSE 67917
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67881: LD_ADDR_VAR 0 5
67885: PUSH
67886: LD_VAR 0 5
67890: PPUSH
67891: LD_VAR 0 5
67895: PUSH
67896: LD_INT 1
67898: PLUS
67899: PPUSH
67900: LD_VAR 0 4
67904: PPUSH
67905: CALL_OW 256
67909: PPUSH
67910: CALL_OW 2
67914: ST_TO_ADDR
67915: GO 67878
67917: POP
67918: POP
// if not tmp then
67919: LD_VAR 0 5
67923: NOT
67924: IFFALSE 67928
// exit ;
67926: GO 67976
// if asc then
67928: LD_VAR 0 2
67932: IFFALSE 67956
// result := SortListByListAsc ( units , tmp ) else
67934: LD_ADDR_VAR 0 3
67938: PUSH
67939: LD_VAR 0 1
67943: PPUSH
67944: LD_VAR 0 5
67948: PPUSH
67949: CALL_OW 76
67953: ST_TO_ADDR
67954: GO 67976
// result := SortListByListDesc ( units , tmp ) ;
67956: LD_ADDR_VAR 0 3
67960: PUSH
67961: LD_VAR 0 1
67965: PPUSH
67966: LD_VAR 0 5
67970: PPUSH
67971: CALL_OW 77
67975: ST_TO_ADDR
// end ;
67976: LD_VAR 0 3
67980: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67981: LD_INT 0
67983: PPUSH
67984: PPUSH
// task := GetTaskList ( mech ) ;
67985: LD_ADDR_VAR 0 4
67989: PUSH
67990: LD_VAR 0 1
67994: PPUSH
67995: CALL_OW 437
67999: ST_TO_ADDR
// if not task then
68000: LD_VAR 0 4
68004: NOT
68005: IFFALSE 68009
// exit ;
68007: GO 68053
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68009: LD_ADDR_VAR 0 3
68013: PUSH
68014: LD_VAR 0 4
68018: PUSH
68019: LD_INT 1
68021: ARRAY
68022: PUSH
68023: LD_INT 1
68025: ARRAY
68026: PUSH
68027: LD_STRING r
68029: EQUAL
68030: IFFALSE 68052
68032: PUSH
68033: LD_VAR 0 4
68037: PUSH
68038: LD_INT 1
68040: ARRAY
68041: PUSH
68042: LD_INT 4
68044: ARRAY
68045: PUSH
68046: LD_VAR 0 2
68050: EQUAL
68051: AND
68052: ST_TO_ADDR
// end ;
68053: LD_VAR 0 3
68057: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68058: LD_INT 0
68060: PPUSH
// SetDir ( unit , d ) ;
68061: LD_VAR 0 1
68065: PPUSH
68066: LD_VAR 0 4
68070: PPUSH
68071: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
68075: LD_ADDR_VAR 0 6
68079: PUSH
68080: LD_VAR 0 1
68084: PPUSH
68085: LD_VAR 0 2
68089: PPUSH
68090: LD_VAR 0 3
68094: PPUSH
68095: LD_VAR 0 5
68099: PPUSH
68100: CALL_OW 48
68104: ST_TO_ADDR
// end ;
68105: LD_VAR 0 6
68109: RET
// export function ToNaturalNumber ( number ) ; begin
68110: LD_INT 0
68112: PPUSH
// result := number div 1 ;
68113: LD_ADDR_VAR 0 2
68117: PUSH
68118: LD_VAR 0 1
68122: PUSH
68123: LD_INT 1
68125: DIV
68126: ST_TO_ADDR
// if number < 0 then
68127: LD_VAR 0 1
68131: PUSH
68132: LD_INT 0
68134: LESS
68135: IFFALSE 68145
// result := 0 ;
68137: LD_ADDR_VAR 0 2
68141: PUSH
68142: LD_INT 0
68144: ST_TO_ADDR
// end ;
68145: LD_VAR 0 2
68149: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
68150: LD_INT 0
68152: PPUSH
68153: PPUSH
68154: PPUSH
// if not buildings then
68155: LD_VAR 0 1
68159: NOT
68160: IFFALSE 68164
// exit ;
68162: GO 68279
// tmp := [ ] ;
68164: LD_ADDR_VAR 0 5
68168: PUSH
68169: EMPTY
68170: ST_TO_ADDR
// for b in buildings do
68171: LD_ADDR_VAR 0 4
68175: PUSH
68176: LD_VAR 0 1
68180: PUSH
68181: FOR_IN
68182: IFFALSE 68220
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
68184: LD_ADDR_VAR 0 5
68188: PUSH
68189: LD_VAR 0 5
68193: PPUSH
68194: LD_VAR 0 5
68198: PUSH
68199: LD_INT 1
68201: PLUS
68202: PPUSH
68203: LD_VAR 0 4
68207: PPUSH
68208: CALL_OW 266
68212: PPUSH
68213: CALL_OW 1
68217: ST_TO_ADDR
68218: GO 68181
68220: POP
68221: POP
// if not tmp then
68222: LD_VAR 0 5
68226: NOT
68227: IFFALSE 68231
// exit ;
68229: GO 68279
// if asc then
68231: LD_VAR 0 2
68235: IFFALSE 68259
// result := SortListByListAsc ( buildings , tmp ) else
68237: LD_ADDR_VAR 0 3
68241: PUSH
68242: LD_VAR 0 1
68246: PPUSH
68247: LD_VAR 0 5
68251: PPUSH
68252: CALL_OW 76
68256: ST_TO_ADDR
68257: GO 68279
// result := SortListByListDesc ( buildings , tmp ) ;
68259: LD_ADDR_VAR 0 3
68263: PUSH
68264: LD_VAR 0 1
68268: PPUSH
68269: LD_VAR 0 5
68273: PPUSH
68274: CALL_OW 77
68278: ST_TO_ADDR
// end ;
68279: LD_VAR 0 3
68283: RET
// export function SortByClass ( units , class ) ; var un ; begin
68284: LD_INT 0
68286: PPUSH
68287: PPUSH
// if not units or not class then
68288: LD_VAR 0 1
68292: NOT
68293: IFTRUE 68302
68295: PUSH
68296: LD_VAR 0 2
68300: NOT
68301: OR
68302: IFFALSE 68306
// exit ;
68304: GO 68401
// result := [ ] ;
68306: LD_ADDR_VAR 0 3
68310: PUSH
68311: EMPTY
68312: ST_TO_ADDR
// for un in units do
68313: LD_ADDR_VAR 0 4
68317: PUSH
68318: LD_VAR 0 1
68322: PUSH
68323: FOR_IN
68324: IFFALSE 68399
// if GetClass ( un ) = class then
68326: LD_VAR 0 4
68330: PPUSH
68331: CALL_OW 257
68335: PUSH
68336: LD_VAR 0 2
68340: EQUAL
68341: IFFALSE 68368
// result := Insert ( result , 1 , un ) else
68343: LD_ADDR_VAR 0 3
68347: PUSH
68348: LD_VAR 0 3
68352: PPUSH
68353: LD_INT 1
68355: PPUSH
68356: LD_VAR 0 4
68360: PPUSH
68361: CALL_OW 2
68365: ST_TO_ADDR
68366: GO 68397
// result := Replace ( result , result + 1 , un ) ;
68368: LD_ADDR_VAR 0 3
68372: PUSH
68373: LD_VAR 0 3
68377: PPUSH
68378: LD_VAR 0 3
68382: PUSH
68383: LD_INT 1
68385: PLUS
68386: PPUSH
68387: LD_VAR 0 4
68391: PPUSH
68392: CALL_OW 1
68396: ST_TO_ADDR
68397: GO 68323
68399: POP
68400: POP
// end ;
68401: LD_VAR 0 3
68405: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68406: LD_INT 0
68408: PPUSH
68409: PPUSH
68410: PPUSH
68411: PPUSH
68412: PPUSH
68413: PPUSH
68414: PPUSH
// result := [ ] ;
68415: LD_ADDR_VAR 0 4
68419: PUSH
68420: EMPTY
68421: ST_TO_ADDR
// if x - r < 0 then
68422: LD_VAR 0 1
68426: PUSH
68427: LD_VAR 0 3
68431: MINUS
68432: PUSH
68433: LD_INT 0
68435: LESS
68436: IFFALSE 68448
// min_x := 0 else
68438: LD_ADDR_VAR 0 8
68442: PUSH
68443: LD_INT 0
68445: ST_TO_ADDR
68446: GO 68464
// min_x := x - r ;
68448: LD_ADDR_VAR 0 8
68452: PUSH
68453: LD_VAR 0 1
68457: PUSH
68458: LD_VAR 0 3
68462: MINUS
68463: ST_TO_ADDR
// if y - r < 0 then
68464: LD_VAR 0 2
68468: PUSH
68469: LD_VAR 0 3
68473: MINUS
68474: PUSH
68475: LD_INT 0
68477: LESS
68478: IFFALSE 68490
// min_y := 0 else
68480: LD_ADDR_VAR 0 7
68484: PUSH
68485: LD_INT 0
68487: ST_TO_ADDR
68488: GO 68506
// min_y := y - r ;
68490: LD_ADDR_VAR 0 7
68494: PUSH
68495: LD_VAR 0 2
68499: PUSH
68500: LD_VAR 0 3
68504: MINUS
68505: ST_TO_ADDR
// max_x := x + r ;
68506: LD_ADDR_VAR 0 9
68510: PUSH
68511: LD_VAR 0 1
68515: PUSH
68516: LD_VAR 0 3
68520: PLUS
68521: ST_TO_ADDR
// max_y := y + r ;
68522: LD_ADDR_VAR 0 10
68526: PUSH
68527: LD_VAR 0 2
68531: PUSH
68532: LD_VAR 0 3
68536: PLUS
68537: ST_TO_ADDR
// for _x = min_x to max_x do
68538: LD_ADDR_VAR 0 5
68542: PUSH
68543: DOUBLE
68544: LD_VAR 0 8
68548: DEC
68549: ST_TO_ADDR
68550: LD_VAR 0 9
68554: PUSH
68555: FOR_TO
68556: IFFALSE 68657
// for _y = min_y to max_y do
68558: LD_ADDR_VAR 0 6
68562: PUSH
68563: DOUBLE
68564: LD_VAR 0 7
68568: DEC
68569: ST_TO_ADDR
68570: LD_VAR 0 10
68574: PUSH
68575: FOR_TO
68576: IFFALSE 68653
// begin if not ValidHex ( _x , _y ) then
68578: LD_VAR 0 5
68582: PPUSH
68583: LD_VAR 0 6
68587: PPUSH
68588: CALL_OW 488
68592: NOT
68593: IFFALSE 68597
// continue ;
68595: GO 68575
// if GetResourceTypeXY ( _x , _y ) then
68597: LD_VAR 0 5
68601: PPUSH
68602: LD_VAR 0 6
68606: PPUSH
68607: CALL_OW 283
68611: IFFALSE 68651
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68613: LD_ADDR_VAR 0 4
68617: PUSH
68618: LD_VAR 0 4
68622: PPUSH
68623: LD_VAR 0 4
68627: PUSH
68628: LD_INT 1
68630: PLUS
68631: PPUSH
68632: LD_VAR 0 5
68636: PUSH
68637: LD_VAR 0 6
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PPUSH
68646: CALL_OW 1
68650: ST_TO_ADDR
// end ;
68651: GO 68575
68653: POP
68654: POP
68655: GO 68555
68657: POP
68658: POP
// end ;
68659: LD_VAR 0 4
68663: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68664: LD_INT 0
68666: PPUSH
68667: PPUSH
68668: PPUSH
68669: PPUSH
68670: PPUSH
68671: PPUSH
68672: PPUSH
68673: PPUSH
// if not units then
68674: LD_VAR 0 1
68678: NOT
68679: IFFALSE 68683
// exit ;
68681: GO 69215
// result := UnitFilter ( units , [ f_ok ] ) ;
68683: LD_ADDR_VAR 0 3
68687: PUSH
68688: LD_VAR 0 1
68692: PPUSH
68693: LD_INT 50
68695: PUSH
68696: EMPTY
68697: LIST
68698: PPUSH
68699: CALL_OW 72
68703: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68704: LD_ADDR_VAR 0 8
68708: PUSH
68709: LD_VAR 0 1
68713: PUSH
68714: LD_INT 1
68716: ARRAY
68717: PPUSH
68718: CALL_OW 255
68722: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68723: LD_ADDR_VAR 0 10
68727: PUSH
68728: LD_INT 29
68730: PUSH
68731: LD_INT 91
68733: PUSH
68734: LD_INT 49
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: LIST
68741: ST_TO_ADDR
// if not result then
68742: LD_VAR 0 3
68746: NOT
68747: IFFALSE 68751
// exit ;
68749: GO 69215
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68751: LD_ADDR_VAR 0 5
68755: PUSH
68756: LD_INT 81
68758: PUSH
68759: LD_VAR 0 8
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PPUSH
68768: CALL_OW 69
68772: ST_TO_ADDR
// for i in result do
68773: LD_ADDR_VAR 0 4
68777: PUSH
68778: LD_VAR 0 3
68782: PUSH
68783: FOR_IN
68784: IFFALSE 69213
// begin tag := GetTag ( i ) + 1 ;
68786: LD_ADDR_VAR 0 9
68790: PUSH
68791: LD_VAR 0 4
68795: PPUSH
68796: CALL_OW 110
68800: PUSH
68801: LD_INT 1
68803: PLUS
68804: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
68805: LD_ADDR_VAR 0 7
68809: PUSH
68810: LD_VAR 0 4
68814: PPUSH
68815: CALL_OW 250
68819: PPUSH
68820: LD_VAR 0 4
68824: PPUSH
68825: CALL_OW 251
68829: PPUSH
68830: LD_INT 4
68832: PPUSH
68833: CALL 68406 0 3
68837: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
68838: LD_VAR 0 4
68842: PPUSH
68843: CALL_OW 247
68847: PUSH
68848: LD_INT 2
68850: EQUAL
68851: IFFALSE 68863
68853: PUSH
68854: LD_VAR 0 7
68858: PUSH
68859: LD_INT 2
68861: GREATER
68862: AND
68863: IFFALSE 68883
68865: PUSH
68866: LD_VAR 0 4
68870: PPUSH
68871: CALL_OW 264
68875: PUSH
68876: LD_VAR 0 10
68880: IN
68881: NOT
68882: AND
68883: IFFALSE 68922
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68885: LD_VAR 0 4
68889: PPUSH
68890: LD_VAR 0 7
68894: PUSH
68895: LD_INT 1
68897: ARRAY
68898: PUSH
68899: LD_INT 1
68901: ARRAY
68902: PPUSH
68903: LD_VAR 0 7
68907: PUSH
68908: LD_INT 1
68910: ARRAY
68911: PUSH
68912: LD_INT 2
68914: ARRAY
68915: PPUSH
68916: CALL_OW 116
68920: GO 69211
// if path > tag then
68922: LD_VAR 0 2
68926: PUSH
68927: LD_VAR 0 9
68931: GREATER
68932: IFFALSE 69140
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68934: LD_ADDR_VAR 0 6
68938: PUSH
68939: LD_VAR 0 5
68943: PPUSH
68944: LD_INT 91
68946: PUSH
68947: LD_VAR 0 4
68951: PUSH
68952: LD_INT 8
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: LIST
68959: PPUSH
68960: CALL_OW 72
68964: ST_TO_ADDR
// if nearEnemy then
68965: LD_VAR 0 6
68969: IFFALSE 69038
// begin if GetWeapon ( i ) = ru_time_lapser then
68971: LD_VAR 0 4
68975: PPUSH
68976: CALL_OW 264
68980: PUSH
68981: LD_INT 49
68983: EQUAL
68984: IFFALSE 69012
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68986: LD_VAR 0 4
68990: PPUSH
68991: LD_VAR 0 6
68995: PPUSH
68996: LD_VAR 0 4
69000: PPUSH
69001: CALL_OW 74
69005: PPUSH
69006: CALL_OW 112
69010: GO 69036
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69012: LD_VAR 0 4
69016: PPUSH
69017: LD_VAR 0 6
69021: PPUSH
69022: LD_VAR 0 4
69026: PPUSH
69027: CALL_OW 74
69031: PPUSH
69032: CALL 70296 0 2
// end else
69036: GO 69138
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69038: LD_VAR 0 4
69042: PPUSH
69043: LD_VAR 0 2
69047: PUSH
69048: LD_VAR 0 9
69052: ARRAY
69053: PUSH
69054: LD_INT 1
69056: ARRAY
69057: PPUSH
69058: LD_VAR 0 2
69062: PUSH
69063: LD_VAR 0 9
69067: ARRAY
69068: PUSH
69069: LD_INT 2
69071: ARRAY
69072: PPUSH
69073: CALL_OW 297
69077: PUSH
69078: LD_INT 6
69080: GREATER
69081: IFFALSE 69124
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69083: LD_VAR 0 4
69087: PPUSH
69088: LD_VAR 0 2
69092: PUSH
69093: LD_VAR 0 9
69097: ARRAY
69098: PUSH
69099: LD_INT 1
69101: ARRAY
69102: PPUSH
69103: LD_VAR 0 2
69107: PUSH
69108: LD_VAR 0 9
69112: ARRAY
69113: PUSH
69114: LD_INT 2
69116: ARRAY
69117: PPUSH
69118: CALL_OW 114
69122: GO 69138
// SetTag ( i , tag ) ;
69124: LD_VAR 0 4
69128: PPUSH
69129: LD_VAR 0 9
69133: PPUSH
69134: CALL_OW 109
// end else
69138: GO 69211
// if enemy then
69140: LD_VAR 0 5
69144: IFFALSE 69211
// begin if GetWeapon ( i ) = ru_time_lapser then
69146: LD_VAR 0 4
69150: PPUSH
69151: CALL_OW 264
69155: PUSH
69156: LD_INT 49
69158: EQUAL
69159: IFFALSE 69187
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69161: LD_VAR 0 4
69165: PPUSH
69166: LD_VAR 0 5
69170: PPUSH
69171: LD_VAR 0 4
69175: PPUSH
69176: CALL_OW 74
69180: PPUSH
69181: CALL_OW 112
69185: GO 69211
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69187: LD_VAR 0 4
69191: PPUSH
69192: LD_VAR 0 5
69196: PPUSH
69197: LD_VAR 0 4
69201: PPUSH
69202: CALL_OW 74
69206: PPUSH
69207: CALL 70296 0 2
// end ; end ;
69211: GO 68783
69213: POP
69214: POP
// end ;
69215: LD_VAR 0 3
69219: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69220: LD_INT 0
69222: PPUSH
69223: PPUSH
69224: PPUSH
// if not unit or IsInUnit ( unit ) then
69225: LD_VAR 0 1
69229: NOT
69230: IFTRUE 69243
69232: PUSH
69233: LD_VAR 0 1
69237: PPUSH
69238: CALL_OW 310
69242: OR
69243: IFFALSE 69247
// exit ;
69245: GO 69338
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69247: LD_ADDR_VAR 0 4
69251: PUSH
69252: LD_VAR 0 1
69256: PPUSH
69257: CALL_OW 250
69261: PPUSH
69262: LD_VAR 0 2
69266: PPUSH
69267: LD_INT 1
69269: PPUSH
69270: CALL_OW 272
69274: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69275: LD_ADDR_VAR 0 5
69279: PUSH
69280: LD_VAR 0 1
69284: PPUSH
69285: CALL_OW 251
69289: PPUSH
69290: LD_VAR 0 2
69294: PPUSH
69295: LD_INT 1
69297: PPUSH
69298: CALL_OW 273
69302: ST_TO_ADDR
// if ValidHex ( x , y ) then
69303: LD_VAR 0 4
69307: PPUSH
69308: LD_VAR 0 5
69312: PPUSH
69313: CALL_OW 488
69317: IFFALSE 69338
// ComTurnXY ( unit , x , y ) ;
69319: LD_VAR 0 1
69323: PPUSH
69324: LD_VAR 0 4
69328: PPUSH
69329: LD_VAR 0 5
69333: PPUSH
69334: CALL_OW 118
// end ;
69338: LD_VAR 0 3
69342: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69343: LD_INT 0
69345: PPUSH
69346: PPUSH
// result := false ;
69347: LD_ADDR_VAR 0 3
69351: PUSH
69352: LD_INT 0
69354: ST_TO_ADDR
// if not units then
69355: LD_VAR 0 2
69359: NOT
69360: IFFALSE 69364
// exit ;
69362: GO 69409
// for i in units do
69364: LD_ADDR_VAR 0 4
69368: PUSH
69369: LD_VAR 0 2
69373: PUSH
69374: FOR_IN
69375: IFFALSE 69407
// if See ( side , i ) then
69377: LD_VAR 0 1
69381: PPUSH
69382: LD_VAR 0 4
69386: PPUSH
69387: CALL_OW 292
69391: IFFALSE 69405
// begin result := true ;
69393: LD_ADDR_VAR 0 3
69397: PUSH
69398: LD_INT 1
69400: ST_TO_ADDR
// exit ;
69401: POP
69402: POP
69403: GO 69409
// end ;
69405: GO 69374
69407: POP
69408: POP
// end ;
69409: LD_VAR 0 3
69413: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69414: LD_INT 0
69416: PPUSH
69417: PPUSH
69418: PPUSH
69419: PPUSH
// if not unit or not points then
69420: LD_VAR 0 1
69424: NOT
69425: IFTRUE 69434
69427: PUSH
69428: LD_VAR 0 2
69432: NOT
69433: OR
69434: IFFALSE 69438
// exit ;
69436: GO 69528
// dist := 99999 ;
69438: LD_ADDR_VAR 0 5
69442: PUSH
69443: LD_INT 99999
69445: ST_TO_ADDR
// for i in points do
69446: LD_ADDR_VAR 0 4
69450: PUSH
69451: LD_VAR 0 2
69455: PUSH
69456: FOR_IN
69457: IFFALSE 69526
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69459: LD_ADDR_VAR 0 6
69463: PUSH
69464: LD_VAR 0 1
69468: PPUSH
69469: LD_VAR 0 4
69473: PUSH
69474: LD_INT 1
69476: ARRAY
69477: PPUSH
69478: LD_VAR 0 4
69482: PUSH
69483: LD_INT 2
69485: ARRAY
69486: PPUSH
69487: CALL_OW 297
69491: ST_TO_ADDR
// if tmpDist < dist then
69492: LD_VAR 0 6
69496: PUSH
69497: LD_VAR 0 5
69501: LESS
69502: IFFALSE 69524
// begin result := i ;
69504: LD_ADDR_VAR 0 3
69508: PUSH
69509: LD_VAR 0 4
69513: ST_TO_ADDR
// dist := tmpDist ;
69514: LD_ADDR_VAR 0 5
69518: PUSH
69519: LD_VAR 0 6
69523: ST_TO_ADDR
// end ; end ;
69524: GO 69456
69526: POP
69527: POP
// end ;
69528: LD_VAR 0 3
69532: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69533: LD_INT 0
69535: PPUSH
// uc_side := side ;
69536: LD_ADDR_OWVAR 20
69540: PUSH
69541: LD_VAR 0 1
69545: ST_TO_ADDR
// uc_nation := 3 ;
69546: LD_ADDR_OWVAR 21
69550: PUSH
69551: LD_INT 3
69553: ST_TO_ADDR
// vc_chassis := 25 ;
69554: LD_ADDR_OWVAR 37
69558: PUSH
69559: LD_INT 25
69561: ST_TO_ADDR
// vc_engine := engine_siberite ;
69562: LD_ADDR_OWVAR 39
69566: PUSH
69567: LD_INT 3
69569: ST_TO_ADDR
// vc_control := control_computer ;
69570: LD_ADDR_OWVAR 38
69574: PUSH
69575: LD_INT 3
69577: ST_TO_ADDR
// vc_weapon := 59 ;
69578: LD_ADDR_OWVAR 40
69582: PUSH
69583: LD_INT 59
69585: ST_TO_ADDR
// result := CreateVehicle ;
69586: LD_ADDR_VAR 0 5
69590: PUSH
69591: CALL_OW 45
69595: ST_TO_ADDR
// SetDir ( result , d ) ;
69596: LD_VAR 0 5
69600: PPUSH
69601: LD_VAR 0 4
69605: PPUSH
69606: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69610: LD_VAR 0 5
69614: PPUSH
69615: LD_VAR 0 2
69619: PPUSH
69620: LD_VAR 0 3
69624: PPUSH
69625: LD_INT 0
69627: PPUSH
69628: CALL_OW 48
// end ;
69632: LD_VAR 0 5
69636: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69637: LD_INT 0
69639: PPUSH
69640: PPUSH
69641: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69642: LD_ADDR_VAR 0 2
69646: PUSH
69647: LD_INT 0
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: LD_INT 0
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69665: LD_VAR 0 1
69669: NOT
69670: IFTRUE 69703
69672: PUSH
69673: LD_VAR 0 1
69677: PPUSH
69678: CALL_OW 264
69682: PUSH
69683: LD_INT 12
69685: PUSH
69686: LD_INT 51
69688: PUSH
69689: LD_INT 32
69691: PUSH
69692: LD_INT 89
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: IN
69701: NOT
69702: OR
69703: IFFALSE 69707
// exit ;
69705: GO 69805
// for i := 1 to 3 do
69707: LD_ADDR_VAR 0 3
69711: PUSH
69712: DOUBLE
69713: LD_INT 1
69715: DEC
69716: ST_TO_ADDR
69717: LD_INT 3
69719: PUSH
69720: FOR_TO
69721: IFFALSE 69803
// begin tmp := GetCargo ( cargo , i ) ;
69723: LD_ADDR_VAR 0 4
69727: PUSH
69728: LD_VAR 0 1
69732: PPUSH
69733: LD_VAR 0 3
69737: PPUSH
69738: CALL_OW 289
69742: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69743: LD_ADDR_VAR 0 2
69747: PUSH
69748: LD_VAR 0 2
69752: PPUSH
69753: LD_VAR 0 3
69757: PPUSH
69758: LD_VAR 0 4
69762: PPUSH
69763: CALL_OW 1
69767: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69768: LD_ADDR_VAR 0 2
69772: PUSH
69773: LD_VAR 0 2
69777: PPUSH
69778: LD_INT 4
69780: PPUSH
69781: LD_VAR 0 2
69785: PUSH
69786: LD_INT 4
69788: ARRAY
69789: PUSH
69790: LD_VAR 0 4
69794: PLUS
69795: PPUSH
69796: CALL_OW 1
69800: ST_TO_ADDR
// end ;
69801: GO 69720
69803: POP
69804: POP
// end ;
69805: LD_VAR 0 2
69809: RET
// export function Length ( array ) ; begin
69810: LD_INT 0
69812: PPUSH
// result := array + 0 ;
69813: LD_ADDR_VAR 0 2
69817: PUSH
69818: LD_VAR 0 1
69822: PUSH
69823: LD_INT 0
69825: PLUS
69826: ST_TO_ADDR
// end ;
69827: LD_VAR 0 2
69831: RET
// export function PrepareArray ( array ) ; begin
69832: LD_INT 0
69834: PPUSH
// result := array diff 0 ;
69835: LD_ADDR_VAR 0 2
69839: PUSH
69840: LD_VAR 0 1
69844: PUSH
69845: LD_INT 0
69847: DIFF
69848: ST_TO_ADDR
// if not result [ 1 ] then
69849: LD_VAR 0 2
69853: PUSH
69854: LD_INT 1
69856: ARRAY
69857: NOT
69858: IFFALSE 69878
// result := Delete ( result , 1 ) ;
69860: LD_ADDR_VAR 0 2
69864: PUSH
69865: LD_VAR 0 2
69869: PPUSH
69870: LD_INT 1
69872: PPUSH
69873: CALL_OW 3
69877: ST_TO_ADDR
// end ;
69878: LD_VAR 0 2
69882: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69883: LD_INT 0
69885: PPUSH
69886: PPUSH
69887: PPUSH
69888: PPUSH
// sibRocketRange := 25 ;
69889: LD_ADDR_VAR 0 6
69893: PUSH
69894: LD_INT 25
69896: ST_TO_ADDR
// result := false ;
69897: LD_ADDR_VAR 0 4
69901: PUSH
69902: LD_INT 0
69904: ST_TO_ADDR
// for i := 0 to 5 do
69905: LD_ADDR_VAR 0 5
69909: PUSH
69910: DOUBLE
69911: LD_INT 0
69913: DEC
69914: ST_TO_ADDR
69915: LD_INT 5
69917: PUSH
69918: FOR_TO
69919: IFFALSE 69986
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69921: LD_VAR 0 1
69925: PPUSH
69926: LD_VAR 0 5
69930: PPUSH
69931: LD_VAR 0 6
69935: PPUSH
69936: CALL_OW 272
69940: PPUSH
69941: LD_VAR 0 2
69945: PPUSH
69946: LD_VAR 0 5
69950: PPUSH
69951: LD_VAR 0 6
69955: PPUSH
69956: CALL_OW 273
69960: PPUSH
69961: LD_VAR 0 3
69965: PPUSH
69966: CALL_OW 309
69970: IFFALSE 69984
// begin result := true ;
69972: LD_ADDR_VAR 0 4
69976: PUSH
69977: LD_INT 1
69979: ST_TO_ADDR
// exit ;
69980: POP
69981: POP
69982: GO 69988
// end ;
69984: GO 69918
69986: POP
69987: POP
// end ;
69988: LD_VAR 0 4
69992: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
69993: LD_INT 0
69995: PPUSH
69996: PPUSH
69997: PPUSH
// if btype = b_depot then
69998: LD_VAR 0 2
70002: PUSH
70003: LD_INT 0
70005: EQUAL
70006: IFFALSE 70018
// begin result := true ;
70008: LD_ADDR_VAR 0 3
70012: PUSH
70013: LD_INT 1
70015: ST_TO_ADDR
// exit ;
70016: GO 70138
// end ; pom := GetBase ( depot ) ;
70018: LD_ADDR_VAR 0 4
70022: PUSH
70023: LD_VAR 0 1
70027: PPUSH
70028: CALL_OW 274
70032: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70033: LD_ADDR_VAR 0 5
70037: PUSH
70038: LD_VAR 0 2
70042: PPUSH
70043: LD_VAR 0 1
70047: PPUSH
70048: CALL_OW 248
70052: PPUSH
70053: CALL_OW 450
70057: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70058: LD_ADDR_VAR 0 3
70062: PUSH
70063: LD_VAR 0 4
70067: PPUSH
70068: LD_INT 1
70070: PPUSH
70071: CALL_OW 275
70075: PUSH
70076: LD_VAR 0 5
70080: PUSH
70081: LD_INT 1
70083: ARRAY
70084: GREATEREQUAL
70085: IFFALSE 70111
70087: PUSH
70088: LD_VAR 0 4
70092: PPUSH
70093: LD_INT 2
70095: PPUSH
70096: CALL_OW 275
70100: PUSH
70101: LD_VAR 0 5
70105: PUSH
70106: LD_INT 2
70108: ARRAY
70109: GREATEREQUAL
70110: AND
70111: IFFALSE 70137
70113: PUSH
70114: LD_VAR 0 4
70118: PPUSH
70119: LD_INT 3
70121: PPUSH
70122: CALL_OW 275
70126: PUSH
70127: LD_VAR 0 5
70131: PUSH
70132: LD_INT 3
70134: ARRAY
70135: GREATEREQUAL
70136: AND
70137: ST_TO_ADDR
// end ;
70138: LD_VAR 0 3
70142: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70143: LD_INT 0
70145: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70146: LD_VAR 0 1
70150: PPUSH
70151: LD_VAR 0 2
70155: PPUSH
70156: LD_INT 0
70158: PPUSH
70159: LD_INT 0
70161: PPUSH
70162: LD_INT 1
70164: PPUSH
70165: LD_INT 0
70167: PPUSH
70168: CALL_OW 587
// end ;
70172: LD_VAR 0 3
70176: RET
// export function CenterOnNow ( unit ) ; begin
70177: LD_INT 0
70179: PPUSH
// result := IsInUnit ( unit ) ;
70180: LD_ADDR_VAR 0 2
70184: PUSH
70185: LD_VAR 0 1
70189: PPUSH
70190: CALL_OW 310
70194: ST_TO_ADDR
// if not result then
70195: LD_VAR 0 2
70199: NOT
70200: IFFALSE 70212
// result := unit ;
70202: LD_ADDR_VAR 0 2
70206: PUSH
70207: LD_VAR 0 1
70211: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70212: LD_VAR 0 1
70216: PPUSH
70217: CALL_OW 87
// end ;
70221: LD_VAR 0 2
70225: RET
// export function ComMoveHex ( unit , hex ) ; begin
70226: LD_INT 0
70228: PPUSH
// if not hex then
70229: LD_VAR 0 2
70233: NOT
70234: IFFALSE 70238
// exit ;
70236: GO 70291
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70238: LD_VAR 0 2
70242: PUSH
70243: LD_INT 1
70245: ARRAY
70246: PPUSH
70247: LD_VAR 0 2
70251: PUSH
70252: LD_INT 2
70254: ARRAY
70255: PPUSH
70256: CALL_OW 428
70260: IFFALSE 70264
// exit ;
70262: GO 70291
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70264: LD_VAR 0 1
70268: PPUSH
70269: LD_VAR 0 2
70273: PUSH
70274: LD_INT 1
70276: ARRAY
70277: PPUSH
70278: LD_VAR 0 2
70282: PUSH
70283: LD_INT 2
70285: ARRAY
70286: PPUSH
70287: CALL_OW 111
// end ;
70291: LD_VAR 0 3
70295: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70296: LD_INT 0
70298: PPUSH
70299: PPUSH
70300: PPUSH
// if not unit or not enemy then
70301: LD_VAR 0 1
70305: NOT
70306: IFTRUE 70315
70308: PUSH
70309: LD_VAR 0 2
70313: NOT
70314: OR
70315: IFFALSE 70319
// exit ;
70317: GO 70445
// x := GetX ( enemy ) ;
70319: LD_ADDR_VAR 0 4
70323: PUSH
70324: LD_VAR 0 2
70328: PPUSH
70329: CALL_OW 250
70333: ST_TO_ADDR
// y := GetY ( enemy ) ;
70334: LD_ADDR_VAR 0 5
70338: PUSH
70339: LD_VAR 0 2
70343: PPUSH
70344: CALL_OW 251
70348: ST_TO_ADDR
// if ValidHex ( x , y ) then
70349: LD_VAR 0 4
70353: PPUSH
70354: LD_VAR 0 5
70358: PPUSH
70359: CALL_OW 488
70363: IFFALSE 70445
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70365: LD_VAR 0 2
70369: PPUSH
70370: CALL_OW 247
70374: PUSH
70375: LD_INT 3
70377: PUSH
70378: LD_INT 2
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: IN
70385: IFTRUE 70408
70387: PUSH
70388: LD_VAR 0 1
70392: PPUSH
70393: CALL_OW 255
70397: PPUSH
70398: LD_VAR 0 2
70402: PPUSH
70403: CALL_OW 292
70407: OR
70408: IFFALSE 70426
// ComAttackUnit ( unit , enemy ) else
70410: LD_VAR 0 1
70414: PPUSH
70415: LD_VAR 0 2
70419: PPUSH
70420: CALL_OW 115
70424: GO 70445
// ComAgressiveMove ( unit , x , y ) ;
70426: LD_VAR 0 1
70430: PPUSH
70431: LD_VAR 0 4
70435: PPUSH
70436: LD_VAR 0 5
70440: PPUSH
70441: CALL_OW 114
// end ;
70445: LD_VAR 0 3
70449: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70450: LD_INT 0
70452: PPUSH
70453: PPUSH
70454: PPUSH
// list := AreaToList ( area , 0 ) ;
70455: LD_ADDR_VAR 0 5
70459: PUSH
70460: LD_VAR 0 1
70464: PPUSH
70465: LD_INT 0
70467: PPUSH
70468: CALL_OW 517
70472: ST_TO_ADDR
// if not list then
70473: LD_VAR 0 5
70477: NOT
70478: IFFALSE 70482
// exit ;
70480: GO 70612
// if all then
70482: LD_VAR 0 2
70486: IFFALSE 70574
// begin for i := 1 to list [ 1 ] do
70488: LD_ADDR_VAR 0 4
70492: PUSH
70493: DOUBLE
70494: LD_INT 1
70496: DEC
70497: ST_TO_ADDR
70498: LD_VAR 0 5
70502: PUSH
70503: LD_INT 1
70505: ARRAY
70506: PUSH
70507: FOR_TO
70508: IFFALSE 70570
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70510: LD_ADDR_VAR 0 3
70514: PUSH
70515: LD_VAR 0 3
70519: PPUSH
70520: LD_VAR 0 3
70524: PUSH
70525: LD_INT 1
70527: PLUS
70528: PPUSH
70529: LD_VAR 0 5
70533: PUSH
70534: LD_INT 1
70536: ARRAY
70537: PUSH
70538: LD_VAR 0 4
70542: ARRAY
70543: PUSH
70544: LD_VAR 0 5
70548: PUSH
70549: LD_INT 2
70551: ARRAY
70552: PUSH
70553: LD_VAR 0 4
70557: ARRAY
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PPUSH
70563: CALL_OW 1
70567: ST_TO_ADDR
70568: GO 70507
70570: POP
70571: POP
// exit ;
70572: GO 70612
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70574: LD_ADDR_VAR 0 3
70578: PUSH
70579: LD_VAR 0 5
70583: PUSH
70584: LD_INT 1
70586: ARRAY
70587: PUSH
70588: LD_INT 1
70590: ARRAY
70591: PUSH
70592: LD_VAR 0 5
70596: PUSH
70597: LD_INT 2
70599: ARRAY
70600: PUSH
70601: LD_INT 1
70603: ARRAY
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: EMPTY
70610: LIST
70611: ST_TO_ADDR
// end ;
70612: LD_VAR 0 3
70616: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70617: LD_INT 0
70619: PPUSH
70620: PPUSH
// list := AreaToList ( area , 0 ) ;
70621: LD_ADDR_VAR 0 4
70625: PUSH
70626: LD_VAR 0 1
70630: PPUSH
70631: LD_INT 0
70633: PPUSH
70634: CALL_OW 517
70638: ST_TO_ADDR
// if not list then
70639: LD_VAR 0 4
70643: NOT
70644: IFFALSE 70648
// exit ;
70646: GO 70689
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70648: LD_ADDR_VAR 0 3
70652: PUSH
70653: LD_VAR 0 4
70657: PUSH
70658: LD_INT 1
70660: ARRAY
70661: PUSH
70662: LD_INT 1
70664: ARRAY
70665: PUSH
70666: LD_VAR 0 4
70670: PUSH
70671: LD_INT 2
70673: ARRAY
70674: PUSH
70675: LD_INT 1
70677: ARRAY
70678: PUSH
70679: LD_VAR 0 2
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: LIST
70688: ST_TO_ADDR
// end ;
70689: LD_VAR 0 3
70693: RET
// export function First ( array ) ; begin
70694: LD_INT 0
70696: PPUSH
// if not array then
70697: LD_VAR 0 1
70701: NOT
70702: IFFALSE 70706
// exit ;
70704: GO 70720
// result := array [ 1 ] ;
70706: LD_ADDR_VAR 0 2
70710: PUSH
70711: LD_VAR 0 1
70715: PUSH
70716: LD_INT 1
70718: ARRAY
70719: ST_TO_ADDR
// end ;
70720: LD_VAR 0 2
70724: RET
// export function Last ( array ) ; begin
70725: LD_INT 0
70727: PPUSH
// if not array then
70728: LD_VAR 0 1
70732: NOT
70733: IFFALSE 70737
// exit ;
70735: GO 70753
// result := array [ array ] ;
70737: LD_ADDR_VAR 0 2
70741: PUSH
70742: LD_VAR 0 1
70746: PUSH
70747: LD_VAR 0 1
70751: ARRAY
70752: ST_TO_ADDR
// end ;
70753: LD_VAR 0 2
70757: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70758: LD_INT 0
70760: PPUSH
70761: PPUSH
// result := [ ] ;
70762: LD_ADDR_VAR 0 5
70766: PUSH
70767: EMPTY
70768: ST_TO_ADDR
// if not array then
70769: LD_VAR 0 1
70773: NOT
70774: IFFALSE 70778
// exit ;
70776: GO 70890
// for i := 1 to array do
70778: LD_ADDR_VAR 0 6
70782: PUSH
70783: DOUBLE
70784: LD_INT 1
70786: DEC
70787: ST_TO_ADDR
70788: LD_VAR 0 1
70792: PUSH
70793: FOR_TO
70794: IFFALSE 70888
// if array [ i ] [ index ] = value then
70796: LD_VAR 0 1
70800: PUSH
70801: LD_VAR 0 6
70805: ARRAY
70806: PUSH
70807: LD_VAR 0 2
70811: ARRAY
70812: PUSH
70813: LD_VAR 0 3
70817: EQUAL
70818: IFFALSE 70886
// begin if indexColumn then
70820: LD_VAR 0 4
70824: IFFALSE 70860
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70826: LD_ADDR_VAR 0 5
70830: PUSH
70831: LD_VAR 0 5
70835: PPUSH
70836: LD_VAR 0 1
70840: PUSH
70841: LD_VAR 0 6
70845: ARRAY
70846: PUSH
70847: LD_VAR 0 4
70851: ARRAY
70852: PPUSH
70853: CALL 65898 0 2
70857: ST_TO_ADDR
70858: GO 70886
// result := Join ( result , array [ i ] ) ;
70860: LD_ADDR_VAR 0 5
70864: PUSH
70865: LD_VAR 0 5
70869: PPUSH
70870: LD_VAR 0 1
70874: PUSH
70875: LD_VAR 0 6
70879: ARRAY
70880: PPUSH
70881: CALL 65898 0 2
70885: ST_TO_ADDR
// end ;
70886: GO 70793
70888: POP
70889: POP
// end ;
70890: LD_VAR 0 5
70894: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70895: LD_INT 0
70897: PPUSH
// if not vehicles or not parkingPoint then
70898: LD_VAR 0 1
70902: NOT
70903: IFTRUE 70912
70905: PUSH
70906: LD_VAR 0 2
70910: NOT
70911: OR
70912: IFFALSE 70916
// exit ;
70914: GO 71014
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70916: LD_ADDR_VAR 0 1
70920: PUSH
70921: LD_VAR 0 1
70925: PPUSH
70926: LD_INT 50
70928: PUSH
70929: EMPTY
70930: LIST
70931: PUSH
70932: LD_INT 3
70934: PUSH
70935: LD_INT 92
70937: PUSH
70938: LD_VAR 0 2
70942: PUSH
70943: LD_INT 1
70945: ARRAY
70946: PUSH
70947: LD_VAR 0 2
70951: PUSH
70952: LD_INT 2
70954: ARRAY
70955: PUSH
70956: LD_INT 8
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PPUSH
70973: CALL_OW 72
70977: ST_TO_ADDR
// if not vehicles then
70978: LD_VAR 0 1
70982: NOT
70983: IFFALSE 70987
// exit ;
70985: GO 71014
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70987: LD_VAR 0 1
70991: PPUSH
70992: LD_VAR 0 2
70996: PUSH
70997: LD_INT 1
70999: ARRAY
71000: PPUSH
71001: LD_VAR 0 2
71005: PUSH
71006: LD_INT 2
71008: ARRAY
71009: PPUSH
71010: CALL_OW 111
// end ;
71014: LD_VAR 0 3
71018: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71019: LD_INT 0
71021: PPUSH
71022: PPUSH
71023: PPUSH
// if not side or not area then
71024: LD_VAR 0 1
71028: NOT
71029: IFTRUE 71038
71031: PUSH
71032: LD_VAR 0 2
71036: NOT
71037: OR
71038: IFFALSE 71042
// exit ;
71040: GO 71161
// tmp := AreaToList ( area , 0 ) ;
71042: LD_ADDR_VAR 0 5
71046: PUSH
71047: LD_VAR 0 2
71051: PPUSH
71052: LD_INT 0
71054: PPUSH
71055: CALL_OW 517
71059: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71060: LD_ADDR_VAR 0 4
71064: PUSH
71065: DOUBLE
71066: LD_INT 1
71068: DEC
71069: ST_TO_ADDR
71070: LD_VAR 0 5
71074: PUSH
71075: LD_INT 1
71077: ARRAY
71078: PUSH
71079: FOR_TO
71080: IFFALSE 71159
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71082: LD_VAR 0 5
71086: PUSH
71087: LD_INT 1
71089: ARRAY
71090: PUSH
71091: LD_VAR 0 4
71095: ARRAY
71096: PPUSH
71097: LD_VAR 0 5
71101: PUSH
71102: LD_INT 2
71104: ARRAY
71105: PUSH
71106: LD_VAR 0 4
71110: ARRAY
71111: PPUSH
71112: CALL_OW 351
71116: IFFALSE 71157
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
71118: LD_VAR 0 5
71122: PUSH
71123: LD_INT 1
71125: ARRAY
71126: PUSH
71127: LD_VAR 0 4
71131: ARRAY
71132: PPUSH
71133: LD_VAR 0 5
71137: PUSH
71138: LD_INT 2
71140: ARRAY
71141: PUSH
71142: LD_VAR 0 4
71146: ARRAY
71147: PPUSH
71148: LD_VAR 0 1
71152: PPUSH
71153: CALL_OW 244
// end ;
71157: GO 71079
71159: POP
71160: POP
// end ;
71161: LD_VAR 0 3
71165: RET
// export function UniqueArray ( array ) ; var i ; begin
71166: LD_INT 0
71168: PPUSH
71169: PPUSH
// result := [ ] ;
71170: LD_ADDR_VAR 0 2
71174: PUSH
71175: EMPTY
71176: ST_TO_ADDR
// if not array then
71177: LD_VAR 0 1
71181: NOT
71182: IFFALSE 71186
// exit ;
71184: GO 71247
// for i := 1 to array do
71186: LD_ADDR_VAR 0 3
71190: PUSH
71191: DOUBLE
71192: LD_INT 1
71194: DEC
71195: ST_TO_ADDR
71196: LD_VAR 0 1
71200: PUSH
71201: FOR_TO
71202: IFFALSE 71245
// if not array [ i ] in result then
71204: LD_VAR 0 1
71208: PUSH
71209: LD_VAR 0 3
71213: ARRAY
71214: PUSH
71215: LD_VAR 0 2
71219: IN
71220: NOT
71221: IFFALSE 71243
// result := Join ( result , i ) ;
71223: LD_ADDR_VAR 0 2
71227: PUSH
71228: LD_VAR 0 2
71232: PPUSH
71233: LD_VAR 0 3
71237: PPUSH
71238: CALL 65898 0 2
71242: ST_TO_ADDR
71243: GO 71201
71245: POP
71246: POP
// end ; end_of_file
71247: LD_VAR 0 2
71251: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71252: LD_VAR 0 1
71256: PPUSH
71257: LD_VAR 0 2
71261: PPUSH
71262: LD_VAR 0 3
71266: PPUSH
71267: LD_VAR 0 4
71271: PPUSH
71272: LD_VAR 0 5
71276: PPUSH
71277: LD_VAR 0 6
71281: PPUSH
71282: CALL 5154 0 6
// end ;
71286: PPOPN 6
71288: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71289: LD_INT 0
71291: PPUSH
// begin if not units then
71292: LD_VAR 0 1
71296: NOT
71297: IFFALSE 71301
// exit ;
71299: GO 71335
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
71301: LD_VAR 0 1
71305: PPUSH
71306: LD_VAR 0 2
71310: PPUSH
71311: LD_VAR 0 3
71315: PPUSH
71316: LD_VAR 0 4
71320: PPUSH
71321: LD_VAR 0 5
71325: PPUSH
71326: LD_VAR 0 6
71330: PPUSH
71331: CALL 27508 0 6
// end ;
71335: PPOPN 7
71337: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71338: CALL 5034 0 0
// end ;
71342: PPOPN 1
71344: END
