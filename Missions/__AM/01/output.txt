// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// export globalGameSaveCounter ; every 0 0$1 do
4963: GO 4965
4965: DISABLE
// begin enable ;
4966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4967: LD_STRING updateTimer(
4969: PUSH
4970: LD_OWVAR 1
4974: STR
4975: PUSH
4976: LD_STRING );
4978: STR
4979: PPUSH
4980: CALL_OW 559
// end ;
4984: END
// every 0 0$1 do
4985: GO 4987
4987: DISABLE
// begin globalGameSaveCounter := 0 ;
4988: LD_ADDR_EXP 15
4992: PUSH
4993: LD_INT 0
4995: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4996: LD_STRING setGameSaveCounter(0)
4998: PPUSH
4999: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5003: LD_STRING initStreamRollete();
5005: PPUSH
5006: CALL_OW 559
// InitStreamMode ;
5010: CALL 6353 0 0
// DefineStreamItems ( false ) ;
5014: LD_INT 0
5016: PPUSH
5017: CALL 6817 0 1
// end ;
5021: END
// export function SOS_MapStart ( ) ; begin
5022: LD_INT 0
5024: PPUSH
// if streamModeActive then
5025: LD_EXP 16
5029: IFFALSE 5038
// DefineStreamItems ( true ) ;
5031: LD_INT 1
5033: PPUSH
5034: CALL 6817 0 1
// UpdateLuaVariables ( ) ;
5038: CALL 5055 0 0
// UpdateFactoryWaypoints ( ) ;
5042: CALL 19819 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5046: CALL 20071 0 0
// end ;
5050: LD_VAR 0 1
5054: RET
// function UpdateLuaVariables ( ) ; begin
5055: LD_INT 0
5057: PPUSH
// if globalGameSaveCounter then
5058: LD_EXP 15
5062: IFFALSE 5096
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5064: LD_ADDR_EXP 15
5068: PUSH
5069: LD_EXP 15
5073: PPUSH
5074: CALL 65450 0 1
5078: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5079: LD_STRING setGameSaveCounter(
5081: PUSH
5082: LD_EXP 15
5086: STR
5087: PUSH
5088: LD_STRING )
5090: STR
5091: PPUSH
5092: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5096: LD_STRING setGameDifficulty(
5098: PUSH
5099: LD_OWVAR 67
5103: STR
5104: PUSH
5105: LD_STRING )
5107: STR
5108: PPUSH
5109: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
5113: LD_STRING displayDifficulty(
5115: PUSH
5116: LD_OWVAR 67
5120: STR
5121: PUSH
5122: LD_STRING )
5124: STR
5125: PPUSH
5126: CALL_OW 559
// end ;
5130: LD_VAR 0 1
5134: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5135: LD_INT 0
5137: PPUSH
// if p2 = stream_mode then
5138: LD_VAR 0 2
5142: PUSH
5143: LD_INT 100
5145: EQUAL
5146: IFFALSE 6149
// begin if not StreamModeActive then
5148: LD_EXP 16
5152: NOT
5153: IFFALSE 5163
// StreamModeActive := true ;
5155: LD_ADDR_EXP 16
5159: PUSH
5160: LD_INT 1
5162: ST_TO_ADDR
// if p3 = 0 then
5163: LD_VAR 0 3
5167: PUSH
5168: LD_INT 0
5170: EQUAL
5171: IFFALSE 5177
// InitStreamMode ;
5173: CALL 6353 0 0
// if p3 = 1 then
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 1
5184: EQUAL
5185: IFFALSE 5195
// sRocket := true ;
5187: LD_ADDR_EXP 21
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// if p3 = 2 then
5195: LD_VAR 0 3
5199: PUSH
5200: LD_INT 2
5202: EQUAL
5203: IFFALSE 5213
// sSpeed := true ;
5205: LD_ADDR_EXP 20
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if p3 = 3 then
5213: LD_VAR 0 3
5217: PUSH
5218: LD_INT 3
5220: EQUAL
5221: IFFALSE 5231
// sEngine := true ;
5223: LD_ADDR_EXP 22
5227: PUSH
5228: LD_INT 1
5230: ST_TO_ADDR
// if p3 = 4 then
5231: LD_VAR 0 3
5235: PUSH
5236: LD_INT 4
5238: EQUAL
5239: IFFALSE 5249
// sSpec := true ;
5241: LD_ADDR_EXP 19
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if p3 = 5 then
5249: LD_VAR 0 3
5253: PUSH
5254: LD_INT 5
5256: EQUAL
5257: IFFALSE 5267
// sLevel := true ;
5259: LD_ADDR_EXP 23
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// if p3 = 6 then
5267: LD_VAR 0 3
5271: PUSH
5272: LD_INT 6
5274: EQUAL
5275: IFFALSE 5285
// sArmoury := true ;
5277: LD_ADDR_EXP 24
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// if p3 = 7 then
5285: LD_VAR 0 3
5289: PUSH
5290: LD_INT 7
5292: EQUAL
5293: IFFALSE 5303
// sRadar := true ;
5295: LD_ADDR_EXP 25
5299: PUSH
5300: LD_INT 1
5302: ST_TO_ADDR
// if p3 = 8 then
5303: LD_VAR 0 3
5307: PUSH
5308: LD_INT 8
5310: EQUAL
5311: IFFALSE 5321
// sBunker := true ;
5313: LD_ADDR_EXP 26
5317: PUSH
5318: LD_INT 1
5320: ST_TO_ADDR
// if p3 = 9 then
5321: LD_VAR 0 3
5325: PUSH
5326: LD_INT 9
5328: EQUAL
5329: IFFALSE 5339
// sHack := true ;
5331: LD_ADDR_EXP 27
5335: PUSH
5336: LD_INT 1
5338: ST_TO_ADDR
// if p3 = 10 then
5339: LD_VAR 0 3
5343: PUSH
5344: LD_INT 10
5346: EQUAL
5347: IFFALSE 5357
// sFire := true ;
5349: LD_ADDR_EXP 28
5353: PUSH
5354: LD_INT 1
5356: ST_TO_ADDR
// if p3 = 11 then
5357: LD_VAR 0 3
5361: PUSH
5362: LD_INT 11
5364: EQUAL
5365: IFFALSE 5375
// sRefresh := true ;
5367: LD_ADDR_EXP 29
5371: PUSH
5372: LD_INT 1
5374: ST_TO_ADDR
// if p3 = 12 then
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 12
5382: EQUAL
5383: IFFALSE 5393
// sExp := true ;
5385: LD_ADDR_EXP 30
5389: PUSH
5390: LD_INT 1
5392: ST_TO_ADDR
// if p3 = 13 then
5393: LD_VAR 0 3
5397: PUSH
5398: LD_INT 13
5400: EQUAL
5401: IFFALSE 5411
// sDepot := true ;
5403: LD_ADDR_EXP 31
5407: PUSH
5408: LD_INT 1
5410: ST_TO_ADDR
// if p3 = 14 then
5411: LD_VAR 0 3
5415: PUSH
5416: LD_INT 14
5418: EQUAL
5419: IFFALSE 5429
// sFlag := true ;
5421: LD_ADDR_EXP 32
5425: PUSH
5426: LD_INT 1
5428: ST_TO_ADDR
// if p3 = 15 then
5429: LD_VAR 0 3
5433: PUSH
5434: LD_INT 15
5436: EQUAL
5437: IFFALSE 5447
// sKamikadze := true ;
5439: LD_ADDR_EXP 40
5443: PUSH
5444: LD_INT 1
5446: ST_TO_ADDR
// if p3 = 16 then
5447: LD_VAR 0 3
5451: PUSH
5452: LD_INT 16
5454: EQUAL
5455: IFFALSE 5465
// sTroll := true ;
5457: LD_ADDR_EXP 41
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// if p3 = 17 then
5465: LD_VAR 0 3
5469: PUSH
5470: LD_INT 17
5472: EQUAL
5473: IFFALSE 5483
// sSlow := true ;
5475: LD_ADDR_EXP 42
5479: PUSH
5480: LD_INT 1
5482: ST_TO_ADDR
// if p3 = 18 then
5483: LD_VAR 0 3
5487: PUSH
5488: LD_INT 18
5490: EQUAL
5491: IFFALSE 5501
// sLack := true ;
5493: LD_ADDR_EXP 43
5497: PUSH
5498: LD_INT 1
5500: ST_TO_ADDR
// if p3 = 19 then
5501: LD_VAR 0 3
5505: PUSH
5506: LD_INT 19
5508: EQUAL
5509: IFFALSE 5519
// sTank := true ;
5511: LD_ADDR_EXP 45
5515: PUSH
5516: LD_INT 1
5518: ST_TO_ADDR
// if p3 = 20 then
5519: LD_VAR 0 3
5523: PUSH
5524: LD_INT 20
5526: EQUAL
5527: IFFALSE 5537
// sRemote := true ;
5529: LD_ADDR_EXP 46
5533: PUSH
5534: LD_INT 1
5536: ST_TO_ADDR
// if p3 = 21 then
5537: LD_VAR 0 3
5541: PUSH
5542: LD_INT 21
5544: EQUAL
5545: IFFALSE 5555
// sPowell := true ;
5547: LD_ADDR_EXP 47
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// if p3 = 22 then
5555: LD_VAR 0 3
5559: PUSH
5560: LD_INT 22
5562: EQUAL
5563: IFFALSE 5573
// sTeleport := true ;
5565: LD_ADDR_EXP 50
5569: PUSH
5570: LD_INT 1
5572: ST_TO_ADDR
// if p3 = 23 then
5573: LD_VAR 0 3
5577: PUSH
5578: LD_INT 23
5580: EQUAL
5581: IFFALSE 5591
// sOilTower := true ;
5583: LD_ADDR_EXP 52
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// if p3 = 24 then
5591: LD_VAR 0 3
5595: PUSH
5596: LD_INT 24
5598: EQUAL
5599: IFFALSE 5609
// sShovel := true ;
5601: LD_ADDR_EXP 53
5605: PUSH
5606: LD_INT 1
5608: ST_TO_ADDR
// if p3 = 25 then
5609: LD_VAR 0 3
5613: PUSH
5614: LD_INT 25
5616: EQUAL
5617: IFFALSE 5627
// sSheik := true ;
5619: LD_ADDR_EXP 54
5623: PUSH
5624: LD_INT 1
5626: ST_TO_ADDR
// if p3 = 26 then
5627: LD_VAR 0 3
5631: PUSH
5632: LD_INT 26
5634: EQUAL
5635: IFFALSE 5645
// sEarthquake := true ;
5637: LD_ADDR_EXP 56
5641: PUSH
5642: LD_INT 1
5644: ST_TO_ADDR
// if p3 = 27 then
5645: LD_VAR 0 3
5649: PUSH
5650: LD_INT 27
5652: EQUAL
5653: IFFALSE 5663
// sAI := true ;
5655: LD_ADDR_EXP 57
5659: PUSH
5660: LD_INT 1
5662: ST_TO_ADDR
// if p3 = 28 then
5663: LD_VAR 0 3
5667: PUSH
5668: LD_INT 28
5670: EQUAL
5671: IFFALSE 5681
// sCargo := true ;
5673: LD_ADDR_EXP 60
5677: PUSH
5678: LD_INT 1
5680: ST_TO_ADDR
// if p3 = 29 then
5681: LD_VAR 0 3
5685: PUSH
5686: LD_INT 29
5688: EQUAL
5689: IFFALSE 5699
// sDLaser := true ;
5691: LD_ADDR_EXP 61
5695: PUSH
5696: LD_INT 1
5698: ST_TO_ADDR
// if p3 = 30 then
5699: LD_VAR 0 3
5703: PUSH
5704: LD_INT 30
5706: EQUAL
5707: IFFALSE 5717
// sExchange := true ;
5709: LD_ADDR_EXP 62
5713: PUSH
5714: LD_INT 1
5716: ST_TO_ADDR
// if p3 = 31 then
5717: LD_VAR 0 3
5721: PUSH
5722: LD_INT 31
5724: EQUAL
5725: IFFALSE 5735
// sFac := true ;
5727: LD_ADDR_EXP 63
5731: PUSH
5732: LD_INT 1
5734: ST_TO_ADDR
// if p3 = 32 then
5735: LD_VAR 0 3
5739: PUSH
5740: LD_INT 32
5742: EQUAL
5743: IFFALSE 5753
// sPower := true ;
5745: LD_ADDR_EXP 64
5749: PUSH
5750: LD_INT 1
5752: ST_TO_ADDR
// if p3 = 33 then
5753: LD_VAR 0 3
5757: PUSH
5758: LD_INT 33
5760: EQUAL
5761: IFFALSE 5771
// sRandom := true ;
5763: LD_ADDR_EXP 65
5767: PUSH
5768: LD_INT 1
5770: ST_TO_ADDR
// if p3 = 34 then
5771: LD_VAR 0 3
5775: PUSH
5776: LD_INT 34
5778: EQUAL
5779: IFFALSE 5789
// sShield := true ;
5781: LD_ADDR_EXP 66
5785: PUSH
5786: LD_INT 1
5788: ST_TO_ADDR
// if p3 = 35 then
5789: LD_VAR 0 3
5793: PUSH
5794: LD_INT 35
5796: EQUAL
5797: IFFALSE 5807
// sTime := true ;
5799: LD_ADDR_EXP 67
5803: PUSH
5804: LD_INT 1
5806: ST_TO_ADDR
// if p3 = 36 then
5807: LD_VAR 0 3
5811: PUSH
5812: LD_INT 36
5814: EQUAL
5815: IFFALSE 5825
// sTools := true ;
5817: LD_ADDR_EXP 68
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// if p3 = 101 then
5825: LD_VAR 0 3
5829: PUSH
5830: LD_INT 101
5832: EQUAL
5833: IFFALSE 5843
// sSold := true ;
5835: LD_ADDR_EXP 33
5839: PUSH
5840: LD_INT 1
5842: ST_TO_ADDR
// if p3 = 102 then
5843: LD_VAR 0 3
5847: PUSH
5848: LD_INT 102
5850: EQUAL
5851: IFFALSE 5861
// sDiff := true ;
5853: LD_ADDR_EXP 34
5857: PUSH
5858: LD_INT 1
5860: ST_TO_ADDR
// if p3 = 103 then
5861: LD_VAR 0 3
5865: PUSH
5866: LD_INT 103
5868: EQUAL
5869: IFFALSE 5879
// sFog := true ;
5871: LD_ADDR_EXP 37
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
// if p3 = 104 then
5879: LD_VAR 0 3
5883: PUSH
5884: LD_INT 104
5886: EQUAL
5887: IFFALSE 5897
// sReset := true ;
5889: LD_ADDR_EXP 38
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// if p3 = 105 then
5897: LD_VAR 0 3
5901: PUSH
5902: LD_INT 105
5904: EQUAL
5905: IFFALSE 5915
// sSun := true ;
5907: LD_ADDR_EXP 39
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// if p3 = 106 then
5915: LD_VAR 0 3
5919: PUSH
5920: LD_INT 106
5922: EQUAL
5923: IFFALSE 5933
// sTiger := true ;
5925: LD_ADDR_EXP 35
5929: PUSH
5930: LD_INT 1
5932: ST_TO_ADDR
// if p3 = 107 then
5933: LD_VAR 0 3
5937: PUSH
5938: LD_INT 107
5940: EQUAL
5941: IFFALSE 5951
// sBomb := true ;
5943: LD_ADDR_EXP 36
5947: PUSH
5948: LD_INT 1
5950: ST_TO_ADDR
// if p3 = 108 then
5951: LD_VAR 0 3
5955: PUSH
5956: LD_INT 108
5958: EQUAL
5959: IFFALSE 5969
// sWound := true ;
5961: LD_ADDR_EXP 44
5965: PUSH
5966: LD_INT 1
5968: ST_TO_ADDR
// if p3 = 109 then
5969: LD_VAR 0 3
5973: PUSH
5974: LD_INT 109
5976: EQUAL
5977: IFFALSE 5987
// sBetray := true ;
5979: LD_ADDR_EXP 48
5983: PUSH
5984: LD_INT 1
5986: ST_TO_ADDR
// if p3 = 110 then
5987: LD_VAR 0 3
5991: PUSH
5992: LD_INT 110
5994: EQUAL
5995: IFFALSE 6005
// sContamin := true ;
5997: LD_ADDR_EXP 49
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// if p3 = 111 then
6005: LD_VAR 0 3
6009: PUSH
6010: LD_INT 111
6012: EQUAL
6013: IFFALSE 6023
// sOil := true ;
6015: LD_ADDR_EXP 51
6019: PUSH
6020: LD_INT 1
6022: ST_TO_ADDR
// if p3 = 112 then
6023: LD_VAR 0 3
6027: PUSH
6028: LD_INT 112
6030: EQUAL
6031: IFFALSE 6041
// sStu := true ;
6033: LD_ADDR_EXP 55
6037: PUSH
6038: LD_INT 1
6040: ST_TO_ADDR
// if p3 = 113 then
6041: LD_VAR 0 3
6045: PUSH
6046: LD_INT 113
6048: EQUAL
6049: IFFALSE 6059
// sBazooka := true ;
6051: LD_ADDR_EXP 58
6055: PUSH
6056: LD_INT 1
6058: ST_TO_ADDR
// if p3 = 114 then
6059: LD_VAR 0 3
6063: PUSH
6064: LD_INT 114
6066: EQUAL
6067: IFFALSE 6077
// sMortar := true ;
6069: LD_ADDR_EXP 59
6073: PUSH
6074: LD_INT 1
6076: ST_TO_ADDR
// if p3 = 115 then
6077: LD_VAR 0 3
6081: PUSH
6082: LD_INT 115
6084: EQUAL
6085: IFFALSE 6095
// sRanger := true ;
6087: LD_ADDR_EXP 69
6091: PUSH
6092: LD_INT 1
6094: ST_TO_ADDR
// if p3 = 116 then
6095: LD_VAR 0 3
6099: PUSH
6100: LD_INT 116
6102: EQUAL
6103: IFFALSE 6113
// sComputer := true ;
6105: LD_ADDR_EXP 70
6109: PUSH
6110: LD_INT 1
6112: ST_TO_ADDR
// if p3 = 117 then
6113: LD_VAR 0 3
6117: PUSH
6118: LD_INT 117
6120: EQUAL
6121: IFFALSE 6131
// s30 := true ;
6123: LD_ADDR_EXP 71
6127: PUSH
6128: LD_INT 1
6130: ST_TO_ADDR
// if p3 = 118 then
6131: LD_VAR 0 3
6135: PUSH
6136: LD_INT 118
6138: EQUAL
6139: IFFALSE 6149
// s60 := true ;
6141: LD_ADDR_EXP 72
6145: PUSH
6146: LD_INT 1
6148: ST_TO_ADDR
// end ; if p2 = hack_mode then
6149: LD_VAR 0 2
6153: PUSH
6154: LD_INT 101
6156: EQUAL
6157: IFFALSE 6285
// begin case p3 of 1 :
6159: LD_VAR 0 3
6163: PUSH
6164: LD_INT 1
6166: DOUBLE
6167: EQUAL
6168: IFTRUE 6172
6170: GO 6179
6172: POP
// hHackUnlimitedResources ; 2 :
6173: CALL 18432 0 0
6177: GO 6285
6179: LD_INT 2
6181: DOUBLE
6182: EQUAL
6183: IFTRUE 6187
6185: GO 6194
6187: POP
// hHackSetLevel10 ; 3 :
6188: CALL 18565 0 0
6192: GO 6285
6194: LD_INT 3
6196: DOUBLE
6197: EQUAL
6198: IFTRUE 6202
6200: GO 6209
6202: POP
// hHackSetLevel10YourUnits ; 4 :
6203: CALL 18650 0 0
6207: GO 6285
6209: LD_INT 4
6211: DOUBLE
6212: EQUAL
6213: IFTRUE 6217
6215: GO 6224
6217: POP
// hHackInvincible ; 5 :
6218: CALL 19098 0 0
6222: GO 6285
6224: LD_INT 5
6226: DOUBLE
6227: EQUAL
6228: IFTRUE 6232
6230: GO 6239
6232: POP
// hHackInvisible ; 6 :
6233: CALL 19209 0 0
6237: GO 6285
6239: LD_INT 6
6241: DOUBLE
6242: EQUAL
6243: IFTRUE 6247
6245: GO 6254
6247: POP
// hHackChangeYourSide ; 7 :
6248: CALL 19266 0 0
6252: GO 6285
6254: LD_INT 7
6256: DOUBLE
6257: EQUAL
6258: IFTRUE 6262
6260: GO 6269
6262: POP
// hHackChangeUnitSide ; 8 :
6263: CALL 19308 0 0
6267: GO 6285
6269: LD_INT 8
6271: DOUBLE
6272: EQUAL
6273: IFTRUE 6277
6275: GO 6284
6277: POP
// hHackFog ; end ;
6278: CALL 19409 0 0
6282: GO 6285
6284: POP
// end ; if p2 = game_save_mode then
6285: LD_VAR 0 2
6289: PUSH
6290: LD_INT 102
6292: EQUAL
6293: IFFALSE 6348
// begin if p3 = 1 then
6295: LD_VAR 0 3
6299: PUSH
6300: LD_INT 1
6302: EQUAL
6303: IFFALSE 6315
// globalGameSaveCounter := p4 ;
6305: LD_ADDR_EXP 15
6309: PUSH
6310: LD_VAR 0 4
6314: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6315: LD_VAR 0 3
6319: PUSH
6320: LD_INT 2
6322: EQUAL
6323: PUSH
6324: LD_EXP 15
6328: AND
6329: IFFALSE 6348
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6331: LD_STRING setGameSaveCounter(
6333: PUSH
6334: LD_EXP 15
6338: STR
6339: PUSH
6340: LD_STRING )
6342: STR
6343: PPUSH
6344: CALL_OW 559
// end ; end ;
6348: LD_VAR 0 7
6352: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6353: LD_INT 0
6355: PPUSH
// streamModeActive := false ;
6356: LD_ADDR_EXP 16
6360: PUSH
6361: LD_INT 0
6363: ST_TO_ADDR
// normalCounter := 36 ;
6364: LD_ADDR_EXP 17
6368: PUSH
6369: LD_INT 36
6371: ST_TO_ADDR
// hardcoreCounter := 18 ;
6372: LD_ADDR_EXP 18
6376: PUSH
6377: LD_INT 18
6379: ST_TO_ADDR
// sRocket := false ;
6380: LD_ADDR_EXP 21
6384: PUSH
6385: LD_INT 0
6387: ST_TO_ADDR
// sSpeed := false ;
6388: LD_ADDR_EXP 20
6392: PUSH
6393: LD_INT 0
6395: ST_TO_ADDR
// sEngine := false ;
6396: LD_ADDR_EXP 22
6400: PUSH
6401: LD_INT 0
6403: ST_TO_ADDR
// sSpec := false ;
6404: LD_ADDR_EXP 19
6408: PUSH
6409: LD_INT 0
6411: ST_TO_ADDR
// sLevel := false ;
6412: LD_ADDR_EXP 23
6416: PUSH
6417: LD_INT 0
6419: ST_TO_ADDR
// sArmoury := false ;
6420: LD_ADDR_EXP 24
6424: PUSH
6425: LD_INT 0
6427: ST_TO_ADDR
// sRadar := false ;
6428: LD_ADDR_EXP 25
6432: PUSH
6433: LD_INT 0
6435: ST_TO_ADDR
// sBunker := false ;
6436: LD_ADDR_EXP 26
6440: PUSH
6441: LD_INT 0
6443: ST_TO_ADDR
// sHack := false ;
6444: LD_ADDR_EXP 27
6448: PUSH
6449: LD_INT 0
6451: ST_TO_ADDR
// sFire := false ;
6452: LD_ADDR_EXP 28
6456: PUSH
6457: LD_INT 0
6459: ST_TO_ADDR
// sRefresh := false ;
6460: LD_ADDR_EXP 29
6464: PUSH
6465: LD_INT 0
6467: ST_TO_ADDR
// sExp := false ;
6468: LD_ADDR_EXP 30
6472: PUSH
6473: LD_INT 0
6475: ST_TO_ADDR
// sDepot := false ;
6476: LD_ADDR_EXP 31
6480: PUSH
6481: LD_INT 0
6483: ST_TO_ADDR
// sFlag := false ;
6484: LD_ADDR_EXP 32
6488: PUSH
6489: LD_INT 0
6491: ST_TO_ADDR
// sKamikadze := false ;
6492: LD_ADDR_EXP 40
6496: PUSH
6497: LD_INT 0
6499: ST_TO_ADDR
// sTroll := false ;
6500: LD_ADDR_EXP 41
6504: PUSH
6505: LD_INT 0
6507: ST_TO_ADDR
// sSlow := false ;
6508: LD_ADDR_EXP 42
6512: PUSH
6513: LD_INT 0
6515: ST_TO_ADDR
// sLack := false ;
6516: LD_ADDR_EXP 43
6520: PUSH
6521: LD_INT 0
6523: ST_TO_ADDR
// sTank := false ;
6524: LD_ADDR_EXP 45
6528: PUSH
6529: LD_INT 0
6531: ST_TO_ADDR
// sRemote := false ;
6532: LD_ADDR_EXP 46
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// sPowell := false ;
6540: LD_ADDR_EXP 47
6544: PUSH
6545: LD_INT 0
6547: ST_TO_ADDR
// sTeleport := false ;
6548: LD_ADDR_EXP 50
6552: PUSH
6553: LD_INT 0
6555: ST_TO_ADDR
// sOilTower := false ;
6556: LD_ADDR_EXP 52
6560: PUSH
6561: LD_INT 0
6563: ST_TO_ADDR
// sShovel := false ;
6564: LD_ADDR_EXP 53
6568: PUSH
6569: LD_INT 0
6571: ST_TO_ADDR
// sSheik := false ;
6572: LD_ADDR_EXP 54
6576: PUSH
6577: LD_INT 0
6579: ST_TO_ADDR
// sEarthquake := false ;
6580: LD_ADDR_EXP 56
6584: PUSH
6585: LD_INT 0
6587: ST_TO_ADDR
// sAI := false ;
6588: LD_ADDR_EXP 57
6592: PUSH
6593: LD_INT 0
6595: ST_TO_ADDR
// sCargo := false ;
6596: LD_ADDR_EXP 60
6600: PUSH
6601: LD_INT 0
6603: ST_TO_ADDR
// sDLaser := false ;
6604: LD_ADDR_EXP 61
6608: PUSH
6609: LD_INT 0
6611: ST_TO_ADDR
// sExchange := false ;
6612: LD_ADDR_EXP 62
6616: PUSH
6617: LD_INT 0
6619: ST_TO_ADDR
// sFac := false ;
6620: LD_ADDR_EXP 63
6624: PUSH
6625: LD_INT 0
6627: ST_TO_ADDR
// sPower := false ;
6628: LD_ADDR_EXP 64
6632: PUSH
6633: LD_INT 0
6635: ST_TO_ADDR
// sRandom := false ;
6636: LD_ADDR_EXP 65
6640: PUSH
6641: LD_INT 0
6643: ST_TO_ADDR
// sShield := false ;
6644: LD_ADDR_EXP 66
6648: PUSH
6649: LD_INT 0
6651: ST_TO_ADDR
// sTime := false ;
6652: LD_ADDR_EXP 67
6656: PUSH
6657: LD_INT 0
6659: ST_TO_ADDR
// sTools := false ;
6660: LD_ADDR_EXP 68
6664: PUSH
6665: LD_INT 0
6667: ST_TO_ADDR
// sSold := false ;
6668: LD_ADDR_EXP 33
6672: PUSH
6673: LD_INT 0
6675: ST_TO_ADDR
// sDiff := false ;
6676: LD_ADDR_EXP 34
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// sFog := false ;
6684: LD_ADDR_EXP 37
6688: PUSH
6689: LD_INT 0
6691: ST_TO_ADDR
// sReset := false ;
6692: LD_ADDR_EXP 38
6696: PUSH
6697: LD_INT 0
6699: ST_TO_ADDR
// sSun := false ;
6700: LD_ADDR_EXP 39
6704: PUSH
6705: LD_INT 0
6707: ST_TO_ADDR
// sTiger := false ;
6708: LD_ADDR_EXP 35
6712: PUSH
6713: LD_INT 0
6715: ST_TO_ADDR
// sBomb := false ;
6716: LD_ADDR_EXP 36
6720: PUSH
6721: LD_INT 0
6723: ST_TO_ADDR
// sWound := false ;
6724: LD_ADDR_EXP 44
6728: PUSH
6729: LD_INT 0
6731: ST_TO_ADDR
// sBetray := false ;
6732: LD_ADDR_EXP 48
6736: PUSH
6737: LD_INT 0
6739: ST_TO_ADDR
// sContamin := false ;
6740: LD_ADDR_EXP 49
6744: PUSH
6745: LD_INT 0
6747: ST_TO_ADDR
// sOil := false ;
6748: LD_ADDR_EXP 51
6752: PUSH
6753: LD_INT 0
6755: ST_TO_ADDR
// sStu := false ;
6756: LD_ADDR_EXP 55
6760: PUSH
6761: LD_INT 0
6763: ST_TO_ADDR
// sBazooka := false ;
6764: LD_ADDR_EXP 58
6768: PUSH
6769: LD_INT 0
6771: ST_TO_ADDR
// sMortar := false ;
6772: LD_ADDR_EXP 59
6776: PUSH
6777: LD_INT 0
6779: ST_TO_ADDR
// sRanger := false ;
6780: LD_ADDR_EXP 69
6784: PUSH
6785: LD_INT 0
6787: ST_TO_ADDR
// sComputer := false ;
6788: LD_ADDR_EXP 70
6792: PUSH
6793: LD_INT 0
6795: ST_TO_ADDR
// s30 := false ;
6796: LD_ADDR_EXP 71
6800: PUSH
6801: LD_INT 0
6803: ST_TO_ADDR
// s60 := false ;
6804: LD_ADDR_EXP 72
6808: PUSH
6809: LD_INT 0
6811: ST_TO_ADDR
// end ;
6812: LD_VAR 0 1
6816: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6817: LD_INT 0
6819: PPUSH
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
6824: PPUSH
6825: PPUSH
// result := [ ] ;
6826: LD_ADDR_VAR 0 2
6830: PUSH
6831: EMPTY
6832: ST_TO_ADDR
// if campaign_id = 1 then
6833: LD_OWVAR 69
6837: PUSH
6838: LD_INT 1
6840: EQUAL
6841: IFFALSE 10007
// begin case mission_number of 1 :
6843: LD_OWVAR 70
6847: PUSH
6848: LD_INT 1
6850: DOUBLE
6851: EQUAL
6852: IFTRUE 6856
6854: GO 6932
6856: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6857: LD_ADDR_VAR 0 2
6861: PUSH
6862: LD_INT 2
6864: PUSH
6865: LD_INT 4
6867: PUSH
6868: LD_INT 11
6870: PUSH
6871: LD_INT 12
6873: PUSH
6874: LD_INT 15
6876: PUSH
6877: LD_INT 16
6879: PUSH
6880: LD_INT 22
6882: PUSH
6883: LD_INT 23
6885: PUSH
6886: LD_INT 26
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 101
6902: PUSH
6903: LD_INT 102
6905: PUSH
6906: LD_INT 106
6908: PUSH
6909: LD_INT 116
6911: PUSH
6912: LD_INT 117
6914: PUSH
6915: LD_INT 118
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: ST_TO_ADDR
6930: GO 10005
6932: LD_INT 2
6934: DOUBLE
6935: EQUAL
6936: IFTRUE 6940
6938: GO 7024
6940: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6941: LD_ADDR_VAR 0 2
6945: PUSH
6946: LD_INT 2
6948: PUSH
6949: LD_INT 4
6951: PUSH
6952: LD_INT 11
6954: PUSH
6955: LD_INT 12
6957: PUSH
6958: LD_INT 15
6960: PUSH
6961: LD_INT 16
6963: PUSH
6964: LD_INT 22
6966: PUSH
6967: LD_INT 23
6969: PUSH
6970: LD_INT 26
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 101
6986: PUSH
6987: LD_INT 102
6989: PUSH
6990: LD_INT 105
6992: PUSH
6993: LD_INT 106
6995: PUSH
6996: LD_INT 108
6998: PUSH
6999: LD_INT 116
7001: PUSH
7002: LD_INT 117
7004: PUSH
7005: LD_INT 118
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: ST_TO_ADDR
7022: GO 10005
7024: LD_INT 3
7026: DOUBLE
7027: EQUAL
7028: IFTRUE 7032
7030: GO 7120
7032: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7033: LD_ADDR_VAR 0 2
7037: PUSH
7038: LD_INT 2
7040: PUSH
7041: LD_INT 4
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: LD_INT 11
7049: PUSH
7050: LD_INT 12
7052: PUSH
7053: LD_INT 15
7055: PUSH
7056: LD_INT 16
7058: PUSH
7059: LD_INT 22
7061: PUSH
7062: LD_INT 26
7064: PUSH
7065: LD_INT 36
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 101
7082: PUSH
7083: LD_INT 102
7085: PUSH
7086: LD_INT 105
7088: PUSH
7089: LD_INT 106
7091: PUSH
7092: LD_INT 108
7094: PUSH
7095: LD_INT 116
7097: PUSH
7098: LD_INT 117
7100: PUSH
7101: LD_INT 118
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: ST_TO_ADDR
7118: GO 10005
7120: LD_INT 4
7122: DOUBLE
7123: EQUAL
7124: IFTRUE 7128
7126: GO 7224
7128: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7129: LD_ADDR_VAR 0 2
7133: PUSH
7134: LD_INT 2
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: LD_INT 5
7142: PUSH
7143: LD_INT 8
7145: PUSH
7146: LD_INT 11
7148: PUSH
7149: LD_INT 12
7151: PUSH
7152: LD_INT 15
7154: PUSH
7155: LD_INT 16
7157: PUSH
7158: LD_INT 22
7160: PUSH
7161: LD_INT 23
7163: PUSH
7164: LD_INT 26
7166: PUSH
7167: LD_INT 36
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 101
7186: PUSH
7187: LD_INT 102
7189: PUSH
7190: LD_INT 105
7192: PUSH
7193: LD_INT 106
7195: PUSH
7196: LD_INT 108
7198: PUSH
7199: LD_INT 116
7201: PUSH
7202: LD_INT 117
7204: PUSH
7205: LD_INT 118
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: ST_TO_ADDR
7222: GO 10005
7224: LD_INT 5
7226: DOUBLE
7227: EQUAL
7228: IFTRUE 7232
7230: GO 7344
7232: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7233: LD_ADDR_VAR 0 2
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: LD_INT 4
7243: PUSH
7244: LD_INT 5
7246: PUSH
7247: LD_INT 6
7249: PUSH
7250: LD_INT 8
7252: PUSH
7253: LD_INT 11
7255: PUSH
7256: LD_INT 12
7258: PUSH
7259: LD_INT 15
7261: PUSH
7262: LD_INT 16
7264: PUSH
7265: LD_INT 22
7267: PUSH
7268: LD_INT 23
7270: PUSH
7271: LD_INT 25
7273: PUSH
7274: LD_INT 26
7276: PUSH
7277: LD_INT 36
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 101
7298: PUSH
7299: LD_INT 102
7301: PUSH
7302: LD_INT 105
7304: PUSH
7305: LD_INT 106
7307: PUSH
7308: LD_INT 108
7310: PUSH
7311: LD_INT 109
7313: PUSH
7314: LD_INT 112
7316: PUSH
7317: LD_INT 116
7319: PUSH
7320: LD_INT 117
7322: PUSH
7323: LD_INT 118
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: ST_TO_ADDR
7342: GO 10005
7344: LD_INT 6
7346: DOUBLE
7347: EQUAL
7348: IFTRUE 7352
7350: GO 7484
7352: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7353: LD_ADDR_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: PUSH
7361: LD_INT 4
7363: PUSH
7364: LD_INT 5
7366: PUSH
7367: LD_INT 6
7369: PUSH
7370: LD_INT 8
7372: PUSH
7373: LD_INT 11
7375: PUSH
7376: LD_INT 12
7378: PUSH
7379: LD_INT 15
7381: PUSH
7382: LD_INT 16
7384: PUSH
7385: LD_INT 20
7387: PUSH
7388: LD_INT 21
7390: PUSH
7391: LD_INT 22
7393: PUSH
7394: LD_INT 23
7396: PUSH
7397: LD_INT 25
7399: PUSH
7400: LD_INT 26
7402: PUSH
7403: LD_INT 30
7405: PUSH
7406: LD_INT 31
7408: PUSH
7409: LD_INT 32
7411: PUSH
7412: LD_INT 36
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 101
7438: PUSH
7439: LD_INT 102
7441: PUSH
7442: LD_INT 105
7444: PUSH
7445: LD_INT 106
7447: PUSH
7448: LD_INT 108
7450: PUSH
7451: LD_INT 109
7453: PUSH
7454: LD_INT 112
7456: PUSH
7457: LD_INT 116
7459: PUSH
7460: LD_INT 117
7462: PUSH
7463: LD_INT 118
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: ST_TO_ADDR
7482: GO 10005
7484: LD_INT 7
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7604
7492: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7493: LD_ADDR_VAR 0 2
7497: PUSH
7498: LD_INT 2
7500: PUSH
7501: LD_INT 4
7503: PUSH
7504: LD_INT 5
7506: PUSH
7507: LD_INT 7
7509: PUSH
7510: LD_INT 11
7512: PUSH
7513: LD_INT 12
7515: PUSH
7516: LD_INT 15
7518: PUSH
7519: LD_INT 16
7521: PUSH
7522: LD_INT 20
7524: PUSH
7525: LD_INT 21
7527: PUSH
7528: LD_INT 22
7530: PUSH
7531: LD_INT 23
7533: PUSH
7534: LD_INT 25
7536: PUSH
7537: LD_INT 26
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 101
7558: PUSH
7559: LD_INT 102
7561: PUSH
7562: LD_INT 103
7564: PUSH
7565: LD_INT 105
7567: PUSH
7568: LD_INT 106
7570: PUSH
7571: LD_INT 108
7573: PUSH
7574: LD_INT 112
7576: PUSH
7577: LD_INT 116
7579: PUSH
7580: LD_INT 117
7582: PUSH
7583: LD_INT 118
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: ST_TO_ADDR
7602: GO 10005
7604: LD_INT 8
7606: DOUBLE
7607: EQUAL
7608: IFTRUE 7612
7610: GO 7752
7612: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7613: LD_ADDR_VAR 0 2
7617: PUSH
7618: LD_INT 2
7620: PUSH
7621: LD_INT 4
7623: PUSH
7624: LD_INT 5
7626: PUSH
7627: LD_INT 6
7629: PUSH
7630: LD_INT 7
7632: PUSH
7633: LD_INT 8
7635: PUSH
7636: LD_INT 11
7638: PUSH
7639: LD_INT 12
7641: PUSH
7642: LD_INT 15
7644: PUSH
7645: LD_INT 16
7647: PUSH
7648: LD_INT 20
7650: PUSH
7651: LD_INT 21
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 23
7659: PUSH
7660: LD_INT 25
7662: PUSH
7663: LD_INT 26
7665: PUSH
7666: LD_INT 30
7668: PUSH
7669: LD_INT 31
7671: PUSH
7672: LD_INT 32
7674: PUSH
7675: LD_INT 36
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: PUSH
7700: LD_INT 101
7702: PUSH
7703: LD_INT 102
7705: PUSH
7706: LD_INT 103
7708: PUSH
7709: LD_INT 105
7711: PUSH
7712: LD_INT 106
7714: PUSH
7715: LD_INT 108
7717: PUSH
7718: LD_INT 109
7720: PUSH
7721: LD_INT 112
7723: PUSH
7724: LD_INT 116
7726: PUSH
7727: LD_INT 117
7729: PUSH
7730: LD_INT 118
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: ST_TO_ADDR
7750: GO 10005
7752: LD_INT 9
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7908
7760: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7761: LD_ADDR_VAR 0 2
7765: PUSH
7766: LD_INT 2
7768: PUSH
7769: LD_INT 4
7771: PUSH
7772: LD_INT 5
7774: PUSH
7775: LD_INT 6
7777: PUSH
7778: LD_INT 7
7780: PUSH
7781: LD_INT 8
7783: PUSH
7784: LD_INT 11
7786: PUSH
7787: LD_INT 12
7789: PUSH
7790: LD_INT 15
7792: PUSH
7793: LD_INT 16
7795: PUSH
7796: LD_INT 20
7798: PUSH
7799: LD_INT 21
7801: PUSH
7802: LD_INT 22
7804: PUSH
7805: LD_INT 23
7807: PUSH
7808: LD_INT 25
7810: PUSH
7811: LD_INT 26
7813: PUSH
7814: LD_INT 28
7816: PUSH
7817: LD_INT 30
7819: PUSH
7820: LD_INT 31
7822: PUSH
7823: LD_INT 32
7825: PUSH
7826: LD_INT 36
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 101
7854: PUSH
7855: LD_INT 102
7857: PUSH
7858: LD_INT 103
7860: PUSH
7861: LD_INT 105
7863: PUSH
7864: LD_INT 106
7866: PUSH
7867: LD_INT 108
7869: PUSH
7870: LD_INT 109
7872: PUSH
7873: LD_INT 112
7875: PUSH
7876: LD_INT 114
7878: PUSH
7879: LD_INT 116
7881: PUSH
7882: LD_INT 117
7884: PUSH
7885: LD_INT 118
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: ST_TO_ADDR
7906: GO 10005
7908: LD_INT 10
7910: DOUBLE
7911: EQUAL
7912: IFTRUE 7916
7914: GO 8112
7916: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7917: LD_ADDR_VAR 0 2
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: LD_INT 4
7927: PUSH
7928: LD_INT 5
7930: PUSH
7931: LD_INT 6
7933: PUSH
7934: LD_INT 7
7936: PUSH
7937: LD_INT 8
7939: PUSH
7940: LD_INT 9
7942: PUSH
7943: LD_INT 10
7945: PUSH
7946: LD_INT 11
7948: PUSH
7949: LD_INT 12
7951: PUSH
7952: LD_INT 13
7954: PUSH
7955: LD_INT 14
7957: PUSH
7958: LD_INT 15
7960: PUSH
7961: LD_INT 16
7963: PUSH
7964: LD_INT 17
7966: PUSH
7967: LD_INT 18
7969: PUSH
7970: LD_INT 19
7972: PUSH
7973: LD_INT 20
7975: PUSH
7976: LD_INT 21
7978: PUSH
7979: LD_INT 22
7981: PUSH
7982: LD_INT 23
7984: PUSH
7985: LD_INT 24
7987: PUSH
7988: LD_INT 25
7990: PUSH
7991: LD_INT 26
7993: PUSH
7994: LD_INT 28
7996: PUSH
7997: LD_INT 30
7999: PUSH
8000: LD_INT 31
8002: PUSH
8003: LD_INT 32
8005: PUSH
8006: LD_INT 36
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: PUSH
8040: LD_INT 101
8042: PUSH
8043: LD_INT 102
8045: PUSH
8046: LD_INT 103
8048: PUSH
8049: LD_INT 104
8051: PUSH
8052: LD_INT 105
8054: PUSH
8055: LD_INT 106
8057: PUSH
8058: LD_INT 107
8060: PUSH
8061: LD_INT 108
8063: PUSH
8064: LD_INT 109
8066: PUSH
8067: LD_INT 110
8069: PUSH
8070: LD_INT 111
8072: PUSH
8073: LD_INT 112
8075: PUSH
8076: LD_INT 114
8078: PUSH
8079: LD_INT 116
8081: PUSH
8082: LD_INT 117
8084: PUSH
8085: LD_INT 118
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: ST_TO_ADDR
8110: GO 10005
8112: LD_INT 11
8114: DOUBLE
8115: EQUAL
8116: IFTRUE 8120
8118: GO 8324
8120: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8121: LD_ADDR_VAR 0 2
8125: PUSH
8126: LD_INT 2
8128: PUSH
8129: LD_INT 3
8131: PUSH
8132: LD_INT 4
8134: PUSH
8135: LD_INT 5
8137: PUSH
8138: LD_INT 6
8140: PUSH
8141: LD_INT 7
8143: PUSH
8144: LD_INT 8
8146: PUSH
8147: LD_INT 9
8149: PUSH
8150: LD_INT 10
8152: PUSH
8153: LD_INT 11
8155: PUSH
8156: LD_INT 12
8158: PUSH
8159: LD_INT 13
8161: PUSH
8162: LD_INT 14
8164: PUSH
8165: LD_INT 15
8167: PUSH
8168: LD_INT 16
8170: PUSH
8171: LD_INT 17
8173: PUSH
8174: LD_INT 18
8176: PUSH
8177: LD_INT 19
8179: PUSH
8180: LD_INT 20
8182: PUSH
8183: LD_INT 21
8185: PUSH
8186: LD_INT 22
8188: PUSH
8189: LD_INT 23
8191: PUSH
8192: LD_INT 24
8194: PUSH
8195: LD_INT 25
8197: PUSH
8198: LD_INT 26
8200: PUSH
8201: LD_INT 28
8203: PUSH
8204: LD_INT 30
8206: PUSH
8207: LD_INT 31
8209: PUSH
8210: LD_INT 32
8212: PUSH
8213: LD_INT 34
8215: PUSH
8216: LD_INT 36
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 101
8254: PUSH
8255: LD_INT 102
8257: PUSH
8258: LD_INT 103
8260: PUSH
8261: LD_INT 104
8263: PUSH
8264: LD_INT 105
8266: PUSH
8267: LD_INT 106
8269: PUSH
8270: LD_INT 107
8272: PUSH
8273: LD_INT 108
8275: PUSH
8276: LD_INT 109
8278: PUSH
8279: LD_INT 110
8281: PUSH
8282: LD_INT 111
8284: PUSH
8285: LD_INT 112
8287: PUSH
8288: LD_INT 114
8290: PUSH
8291: LD_INT 116
8293: PUSH
8294: LD_INT 117
8296: PUSH
8297: LD_INT 118
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: ST_TO_ADDR
8322: GO 10005
8324: LD_INT 12
8326: DOUBLE
8327: EQUAL
8328: IFTRUE 8332
8330: GO 8552
8332: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8333: LD_ADDR_VAR 0 2
8337: PUSH
8338: LD_INT 1
8340: PUSH
8341: LD_INT 2
8343: PUSH
8344: LD_INT 3
8346: PUSH
8347: LD_INT 4
8349: PUSH
8350: LD_INT 5
8352: PUSH
8353: LD_INT 6
8355: PUSH
8356: LD_INT 7
8358: PUSH
8359: LD_INT 8
8361: PUSH
8362: LD_INT 9
8364: PUSH
8365: LD_INT 10
8367: PUSH
8368: LD_INT 11
8370: PUSH
8371: LD_INT 12
8373: PUSH
8374: LD_INT 13
8376: PUSH
8377: LD_INT 14
8379: PUSH
8380: LD_INT 15
8382: PUSH
8383: LD_INT 16
8385: PUSH
8386: LD_INT 17
8388: PUSH
8389: LD_INT 18
8391: PUSH
8392: LD_INT 19
8394: PUSH
8395: LD_INT 20
8397: PUSH
8398: LD_INT 21
8400: PUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 23
8406: PUSH
8407: LD_INT 24
8409: PUSH
8410: LD_INT 25
8412: PUSH
8413: LD_INT 26
8415: PUSH
8416: LD_INT 27
8418: PUSH
8419: LD_INT 28
8421: PUSH
8422: LD_INT 30
8424: PUSH
8425: LD_INT 31
8427: PUSH
8428: LD_INT 32
8430: PUSH
8431: LD_INT 33
8433: PUSH
8434: LD_INT 34
8436: PUSH
8437: LD_INT 36
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: LD_INT 101
8478: PUSH
8479: LD_INT 102
8481: PUSH
8482: LD_INT 103
8484: PUSH
8485: LD_INT 104
8487: PUSH
8488: LD_INT 105
8490: PUSH
8491: LD_INT 106
8493: PUSH
8494: LD_INT 107
8496: PUSH
8497: LD_INT 108
8499: PUSH
8500: LD_INT 109
8502: PUSH
8503: LD_INT 110
8505: PUSH
8506: LD_INT 111
8508: PUSH
8509: LD_INT 112
8511: PUSH
8512: LD_INT 113
8514: PUSH
8515: LD_INT 114
8517: PUSH
8518: LD_INT 116
8520: PUSH
8521: LD_INT 117
8523: PUSH
8524: LD_INT 118
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: ST_TO_ADDR
8550: GO 10005
8552: LD_INT 13
8554: DOUBLE
8555: EQUAL
8556: IFTRUE 8560
8558: GO 8768
8560: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8561: LD_ADDR_VAR 0 2
8565: PUSH
8566: LD_INT 1
8568: PUSH
8569: LD_INT 2
8571: PUSH
8572: LD_INT 3
8574: PUSH
8575: LD_INT 4
8577: PUSH
8578: LD_INT 5
8580: PUSH
8581: LD_INT 8
8583: PUSH
8584: LD_INT 9
8586: PUSH
8587: LD_INT 10
8589: PUSH
8590: LD_INT 11
8592: PUSH
8593: LD_INT 12
8595: PUSH
8596: LD_INT 14
8598: PUSH
8599: LD_INT 15
8601: PUSH
8602: LD_INT 16
8604: PUSH
8605: LD_INT 17
8607: PUSH
8608: LD_INT 18
8610: PUSH
8611: LD_INT 19
8613: PUSH
8614: LD_INT 20
8616: PUSH
8617: LD_INT 21
8619: PUSH
8620: LD_INT 22
8622: PUSH
8623: LD_INT 23
8625: PUSH
8626: LD_INT 24
8628: PUSH
8629: LD_INT 25
8631: PUSH
8632: LD_INT 26
8634: PUSH
8635: LD_INT 27
8637: PUSH
8638: LD_INT 28
8640: PUSH
8641: LD_INT 30
8643: PUSH
8644: LD_INT 31
8646: PUSH
8647: LD_INT 32
8649: PUSH
8650: LD_INT 33
8652: PUSH
8653: LD_INT 34
8655: PUSH
8656: LD_INT 36
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 101
8694: PUSH
8695: LD_INT 102
8697: PUSH
8698: LD_INT 103
8700: PUSH
8701: LD_INT 104
8703: PUSH
8704: LD_INT 105
8706: PUSH
8707: LD_INT 106
8709: PUSH
8710: LD_INT 107
8712: PUSH
8713: LD_INT 108
8715: PUSH
8716: LD_INT 109
8718: PUSH
8719: LD_INT 110
8721: PUSH
8722: LD_INT 111
8724: PUSH
8725: LD_INT 112
8727: PUSH
8728: LD_INT 113
8730: PUSH
8731: LD_INT 114
8733: PUSH
8734: LD_INT 116
8736: PUSH
8737: LD_INT 117
8739: PUSH
8740: LD_INT 118
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: ST_TO_ADDR
8766: GO 10005
8768: LD_INT 14
8770: DOUBLE
8771: EQUAL
8772: IFTRUE 8776
8774: GO 9000
8776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8777: LD_ADDR_VAR 0 2
8781: PUSH
8782: LD_INT 1
8784: PUSH
8785: LD_INT 2
8787: PUSH
8788: LD_INT 3
8790: PUSH
8791: LD_INT 4
8793: PUSH
8794: LD_INT 5
8796: PUSH
8797: LD_INT 6
8799: PUSH
8800: LD_INT 7
8802: PUSH
8803: LD_INT 8
8805: PUSH
8806: LD_INT 9
8808: PUSH
8809: LD_INT 10
8811: PUSH
8812: LD_INT 11
8814: PUSH
8815: LD_INT 12
8817: PUSH
8818: LD_INT 13
8820: PUSH
8821: LD_INT 14
8823: PUSH
8824: LD_INT 15
8826: PUSH
8827: LD_INT 16
8829: PUSH
8830: LD_INT 17
8832: PUSH
8833: LD_INT 18
8835: PUSH
8836: LD_INT 19
8838: PUSH
8839: LD_INT 20
8841: PUSH
8842: LD_INT 21
8844: PUSH
8845: LD_INT 22
8847: PUSH
8848: LD_INT 23
8850: PUSH
8851: LD_INT 24
8853: PUSH
8854: LD_INT 25
8856: PUSH
8857: LD_INT 26
8859: PUSH
8860: LD_INT 27
8862: PUSH
8863: LD_INT 28
8865: PUSH
8866: LD_INT 29
8868: PUSH
8869: LD_INT 30
8871: PUSH
8872: LD_INT 31
8874: PUSH
8875: LD_INT 32
8877: PUSH
8878: LD_INT 33
8880: PUSH
8881: LD_INT 34
8883: PUSH
8884: LD_INT 36
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 101
8926: PUSH
8927: LD_INT 102
8929: PUSH
8930: LD_INT 103
8932: PUSH
8933: LD_INT 104
8935: PUSH
8936: LD_INT 105
8938: PUSH
8939: LD_INT 106
8941: PUSH
8942: LD_INT 107
8944: PUSH
8945: LD_INT 108
8947: PUSH
8948: LD_INT 109
8950: PUSH
8951: LD_INT 110
8953: PUSH
8954: LD_INT 111
8956: PUSH
8957: LD_INT 112
8959: PUSH
8960: LD_INT 113
8962: PUSH
8963: LD_INT 114
8965: PUSH
8966: LD_INT 116
8968: PUSH
8969: LD_INT 117
8971: PUSH
8972: LD_INT 118
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: ST_TO_ADDR
8998: GO 10005
9000: LD_INT 15
9002: DOUBLE
9003: EQUAL
9004: IFTRUE 9008
9006: GO 9232
9008: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9009: LD_ADDR_VAR 0 2
9013: PUSH
9014: LD_INT 1
9016: PUSH
9017: LD_INT 2
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: LD_INT 4
9025: PUSH
9026: LD_INT 5
9028: PUSH
9029: LD_INT 6
9031: PUSH
9032: LD_INT 7
9034: PUSH
9035: LD_INT 8
9037: PUSH
9038: LD_INT 9
9040: PUSH
9041: LD_INT 10
9043: PUSH
9044: LD_INT 11
9046: PUSH
9047: LD_INT 12
9049: PUSH
9050: LD_INT 13
9052: PUSH
9053: LD_INT 14
9055: PUSH
9056: LD_INT 15
9058: PUSH
9059: LD_INT 16
9061: PUSH
9062: LD_INT 17
9064: PUSH
9065: LD_INT 18
9067: PUSH
9068: LD_INT 19
9070: PUSH
9071: LD_INT 20
9073: PUSH
9074: LD_INT 21
9076: PUSH
9077: LD_INT 22
9079: PUSH
9080: LD_INT 23
9082: PUSH
9083: LD_INT 24
9085: PUSH
9086: LD_INT 25
9088: PUSH
9089: LD_INT 26
9091: PUSH
9092: LD_INT 27
9094: PUSH
9095: LD_INT 28
9097: PUSH
9098: LD_INT 29
9100: PUSH
9101: LD_INT 30
9103: PUSH
9104: LD_INT 31
9106: PUSH
9107: LD_INT 32
9109: PUSH
9110: LD_INT 33
9112: PUSH
9113: LD_INT 34
9115: PUSH
9116: LD_INT 36
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 101
9158: PUSH
9159: LD_INT 102
9161: PUSH
9162: LD_INT 103
9164: PUSH
9165: LD_INT 104
9167: PUSH
9168: LD_INT 105
9170: PUSH
9171: LD_INT 106
9173: PUSH
9174: LD_INT 107
9176: PUSH
9177: LD_INT 108
9179: PUSH
9180: LD_INT 109
9182: PUSH
9183: LD_INT 110
9185: PUSH
9186: LD_INT 111
9188: PUSH
9189: LD_INT 112
9191: PUSH
9192: LD_INT 113
9194: PUSH
9195: LD_INT 114
9197: PUSH
9198: LD_INT 116
9200: PUSH
9201: LD_INT 117
9203: PUSH
9204: LD_INT 118
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: ST_TO_ADDR
9230: GO 10005
9232: LD_INT 16
9234: DOUBLE
9235: EQUAL
9236: IFTRUE 9240
9238: GO 9376
9240: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: LD_INT 4
9251: PUSH
9252: LD_INT 5
9254: PUSH
9255: LD_INT 7
9257: PUSH
9258: LD_INT 11
9260: PUSH
9261: LD_INT 12
9263: PUSH
9264: LD_INT 15
9266: PUSH
9267: LD_INT 16
9269: PUSH
9270: LD_INT 20
9272: PUSH
9273: LD_INT 21
9275: PUSH
9276: LD_INT 22
9278: PUSH
9279: LD_INT 23
9281: PUSH
9282: LD_INT 25
9284: PUSH
9285: LD_INT 26
9287: PUSH
9288: LD_INT 30
9290: PUSH
9291: LD_INT 31
9293: PUSH
9294: LD_INT 32
9296: PUSH
9297: LD_INT 33
9299: PUSH
9300: LD_INT 34
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 101
9326: PUSH
9327: LD_INT 102
9329: PUSH
9330: LD_INT 103
9332: PUSH
9333: LD_INT 106
9335: PUSH
9336: LD_INT 108
9338: PUSH
9339: LD_INT 112
9341: PUSH
9342: LD_INT 113
9344: PUSH
9345: LD_INT 114
9347: PUSH
9348: LD_INT 116
9350: PUSH
9351: LD_INT 117
9353: PUSH
9354: LD_INT 118
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: ST_TO_ADDR
9374: GO 10005
9376: LD_INT 17
9378: DOUBLE
9379: EQUAL
9380: IFTRUE 9384
9382: GO 9608
9384: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9385: LD_ADDR_VAR 0 2
9389: PUSH
9390: LD_INT 1
9392: PUSH
9393: LD_INT 2
9395: PUSH
9396: LD_INT 3
9398: PUSH
9399: LD_INT 4
9401: PUSH
9402: LD_INT 5
9404: PUSH
9405: LD_INT 6
9407: PUSH
9408: LD_INT 7
9410: PUSH
9411: LD_INT 8
9413: PUSH
9414: LD_INT 9
9416: PUSH
9417: LD_INT 10
9419: PUSH
9420: LD_INT 11
9422: PUSH
9423: LD_INT 12
9425: PUSH
9426: LD_INT 13
9428: PUSH
9429: LD_INT 14
9431: PUSH
9432: LD_INT 15
9434: PUSH
9435: LD_INT 16
9437: PUSH
9438: LD_INT 17
9440: PUSH
9441: LD_INT 18
9443: PUSH
9444: LD_INT 19
9446: PUSH
9447: LD_INT 20
9449: PUSH
9450: LD_INT 21
9452: PUSH
9453: LD_INT 22
9455: PUSH
9456: LD_INT 23
9458: PUSH
9459: LD_INT 24
9461: PUSH
9462: LD_INT 25
9464: PUSH
9465: LD_INT 26
9467: PUSH
9468: LD_INT 27
9470: PUSH
9471: LD_INT 28
9473: PUSH
9474: LD_INT 29
9476: PUSH
9477: LD_INT 30
9479: PUSH
9480: LD_INT 31
9482: PUSH
9483: LD_INT 32
9485: PUSH
9486: LD_INT 33
9488: PUSH
9489: LD_INT 34
9491: PUSH
9492: LD_INT 36
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 101
9534: PUSH
9535: LD_INT 102
9537: PUSH
9538: LD_INT 103
9540: PUSH
9541: LD_INT 104
9543: PUSH
9544: LD_INT 105
9546: PUSH
9547: LD_INT 106
9549: PUSH
9550: LD_INT 107
9552: PUSH
9553: LD_INT 108
9555: PUSH
9556: LD_INT 109
9558: PUSH
9559: LD_INT 110
9561: PUSH
9562: LD_INT 111
9564: PUSH
9565: LD_INT 112
9567: PUSH
9568: LD_INT 113
9570: PUSH
9571: LD_INT 114
9573: PUSH
9574: LD_INT 116
9576: PUSH
9577: LD_INT 117
9579: PUSH
9580: LD_INT 118
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: ST_TO_ADDR
9606: GO 10005
9608: LD_INT 18
9610: DOUBLE
9611: EQUAL
9612: IFTRUE 9616
9614: GO 9764
9616: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9617: LD_ADDR_VAR 0 2
9621: PUSH
9622: LD_INT 2
9624: PUSH
9625: LD_INT 4
9627: PUSH
9628: LD_INT 5
9630: PUSH
9631: LD_INT 7
9633: PUSH
9634: LD_INT 11
9636: PUSH
9637: LD_INT 12
9639: PUSH
9640: LD_INT 15
9642: PUSH
9643: LD_INT 16
9645: PUSH
9646: LD_INT 20
9648: PUSH
9649: LD_INT 21
9651: PUSH
9652: LD_INT 22
9654: PUSH
9655: LD_INT 23
9657: PUSH
9658: LD_INT 25
9660: PUSH
9661: LD_INT 26
9663: PUSH
9664: LD_INT 30
9666: PUSH
9667: LD_INT 31
9669: PUSH
9670: LD_INT 32
9672: PUSH
9673: LD_INT 33
9675: PUSH
9676: LD_INT 34
9678: PUSH
9679: LD_INT 35
9681: PUSH
9682: LD_INT 36
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 101
9710: PUSH
9711: LD_INT 102
9713: PUSH
9714: LD_INT 103
9716: PUSH
9717: LD_INT 106
9719: PUSH
9720: LD_INT 108
9722: PUSH
9723: LD_INT 112
9725: PUSH
9726: LD_INT 113
9728: PUSH
9729: LD_INT 114
9731: PUSH
9732: LD_INT 115
9734: PUSH
9735: LD_INT 116
9737: PUSH
9738: LD_INT 117
9740: PUSH
9741: LD_INT 118
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: ST_TO_ADDR
9762: GO 10005
9764: LD_INT 19
9766: DOUBLE
9767: EQUAL
9768: IFTRUE 9772
9770: GO 10004
9772: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9773: LD_ADDR_VAR 0 2
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: LD_INT 3
9786: PUSH
9787: LD_INT 4
9789: PUSH
9790: LD_INT 5
9792: PUSH
9793: LD_INT 6
9795: PUSH
9796: LD_INT 7
9798: PUSH
9799: LD_INT 8
9801: PUSH
9802: LD_INT 9
9804: PUSH
9805: LD_INT 10
9807: PUSH
9808: LD_INT 11
9810: PUSH
9811: LD_INT 12
9813: PUSH
9814: LD_INT 13
9816: PUSH
9817: LD_INT 14
9819: PUSH
9820: LD_INT 15
9822: PUSH
9823: LD_INT 16
9825: PUSH
9826: LD_INT 17
9828: PUSH
9829: LD_INT 18
9831: PUSH
9832: LD_INT 19
9834: PUSH
9835: LD_INT 20
9837: PUSH
9838: LD_INT 21
9840: PUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 23
9846: PUSH
9847: LD_INT 24
9849: PUSH
9850: LD_INT 25
9852: PUSH
9853: LD_INT 26
9855: PUSH
9856: LD_INT 27
9858: PUSH
9859: LD_INT 28
9861: PUSH
9862: LD_INT 29
9864: PUSH
9865: LD_INT 30
9867: PUSH
9868: LD_INT 31
9870: PUSH
9871: LD_INT 32
9873: PUSH
9874: LD_INT 33
9876: PUSH
9877: LD_INT 34
9879: PUSH
9880: LD_INT 35
9882: PUSH
9883: LD_INT 36
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 101
9926: PUSH
9927: LD_INT 102
9929: PUSH
9930: LD_INT 103
9932: PUSH
9933: LD_INT 104
9935: PUSH
9936: LD_INT 105
9938: PUSH
9939: LD_INT 106
9941: PUSH
9942: LD_INT 107
9944: PUSH
9945: LD_INT 108
9947: PUSH
9948: LD_INT 109
9950: PUSH
9951: LD_INT 110
9953: PUSH
9954: LD_INT 111
9956: PUSH
9957: LD_INT 112
9959: PUSH
9960: LD_INT 113
9962: PUSH
9963: LD_INT 114
9965: PUSH
9966: LD_INT 115
9968: PUSH
9969: LD_INT 116
9971: PUSH
9972: LD_INT 117
9974: PUSH
9975: LD_INT 118
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: ST_TO_ADDR
10002: GO 10005
10004: POP
// end else
10005: GO 10236
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10007: LD_ADDR_VAR 0 2
10011: PUSH
10012: LD_INT 1
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: LD_INT 3
10020: PUSH
10021: LD_INT 4
10023: PUSH
10024: LD_INT 5
10026: PUSH
10027: LD_INT 6
10029: PUSH
10030: LD_INT 7
10032: PUSH
10033: LD_INT 8
10035: PUSH
10036: LD_INT 9
10038: PUSH
10039: LD_INT 10
10041: PUSH
10042: LD_INT 11
10044: PUSH
10045: LD_INT 12
10047: PUSH
10048: LD_INT 13
10050: PUSH
10051: LD_INT 14
10053: PUSH
10054: LD_INT 15
10056: PUSH
10057: LD_INT 16
10059: PUSH
10060: LD_INT 17
10062: PUSH
10063: LD_INT 18
10065: PUSH
10066: LD_INT 19
10068: PUSH
10069: LD_INT 20
10071: PUSH
10072: LD_INT 21
10074: PUSH
10075: LD_INT 22
10077: PUSH
10078: LD_INT 23
10080: PUSH
10081: LD_INT 24
10083: PUSH
10084: LD_INT 25
10086: PUSH
10087: LD_INT 26
10089: PUSH
10090: LD_INT 27
10092: PUSH
10093: LD_INT 28
10095: PUSH
10096: LD_INT 29
10098: PUSH
10099: LD_INT 30
10101: PUSH
10102: LD_INT 31
10104: PUSH
10105: LD_INT 32
10107: PUSH
10108: LD_INT 33
10110: PUSH
10111: LD_INT 34
10113: PUSH
10114: LD_INT 35
10116: PUSH
10117: LD_INT 36
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: PUSH
10158: LD_INT 101
10160: PUSH
10161: LD_INT 102
10163: PUSH
10164: LD_INT 103
10166: PUSH
10167: LD_INT 104
10169: PUSH
10170: LD_INT 105
10172: PUSH
10173: LD_INT 106
10175: PUSH
10176: LD_INT 107
10178: PUSH
10179: LD_INT 108
10181: PUSH
10182: LD_INT 109
10184: PUSH
10185: LD_INT 110
10187: PUSH
10188: LD_INT 111
10190: PUSH
10191: LD_INT 112
10193: PUSH
10194: LD_INT 113
10196: PUSH
10197: LD_INT 114
10199: PUSH
10200: LD_INT 115
10202: PUSH
10203: LD_INT 116
10205: PUSH
10206: LD_INT 117
10208: PUSH
10209: LD_INT 118
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: ST_TO_ADDR
// if result then
10236: LD_VAR 0 2
10240: IFFALSE 11026
// begin normal :=  ;
10242: LD_ADDR_VAR 0 5
10246: PUSH
10247: LD_STRING 
10249: ST_TO_ADDR
// hardcore :=  ;
10250: LD_ADDR_VAR 0 6
10254: PUSH
10255: LD_STRING 
10257: ST_TO_ADDR
// active :=  ;
10258: LD_ADDR_VAR 0 7
10262: PUSH
10263: LD_STRING 
10265: ST_TO_ADDR
// for i = 1 to normalCounter do
10266: LD_ADDR_VAR 0 8
10270: PUSH
10271: DOUBLE
10272: LD_INT 1
10274: DEC
10275: ST_TO_ADDR
10276: LD_EXP 17
10280: PUSH
10281: FOR_TO
10282: IFFALSE 10383
// begin tmp := 0 ;
10284: LD_ADDR_VAR 0 3
10288: PUSH
10289: LD_STRING 0
10291: ST_TO_ADDR
// if result [ 1 ] then
10292: LD_VAR 0 2
10296: PUSH
10297: LD_INT 1
10299: ARRAY
10300: IFFALSE 10365
// if result [ 1 ] [ 1 ] = i then
10302: LD_VAR 0 2
10306: PUSH
10307: LD_INT 1
10309: ARRAY
10310: PUSH
10311: LD_INT 1
10313: ARRAY
10314: PUSH
10315: LD_VAR 0 8
10319: EQUAL
10320: IFFALSE 10365
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10322: LD_ADDR_VAR 0 2
10326: PUSH
10327: LD_VAR 0 2
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: LD_VAR 0 2
10339: PUSH
10340: LD_INT 1
10342: ARRAY
10343: PPUSH
10344: LD_INT 1
10346: PPUSH
10347: CALL_OW 3
10351: PPUSH
10352: CALL_OW 1
10356: ST_TO_ADDR
// tmp := 1 ;
10357: LD_ADDR_VAR 0 3
10361: PUSH
10362: LD_STRING 1
10364: ST_TO_ADDR
// end ; normal := normal & tmp ;
10365: LD_ADDR_VAR 0 5
10369: PUSH
10370: LD_VAR 0 5
10374: PUSH
10375: LD_VAR 0 3
10379: STR
10380: ST_TO_ADDR
// end ;
10381: GO 10281
10383: POP
10384: POP
// for i = 1 to hardcoreCounter do
10385: LD_ADDR_VAR 0 8
10389: PUSH
10390: DOUBLE
10391: LD_INT 1
10393: DEC
10394: ST_TO_ADDR
10395: LD_EXP 18
10399: PUSH
10400: FOR_TO
10401: IFFALSE 10506
// begin tmp := 0 ;
10403: LD_ADDR_VAR 0 3
10407: PUSH
10408: LD_STRING 0
10410: ST_TO_ADDR
// if result [ 2 ] then
10411: LD_VAR 0 2
10415: PUSH
10416: LD_INT 2
10418: ARRAY
10419: IFFALSE 10488
// if result [ 2 ] [ 1 ] = 100 + i then
10421: LD_VAR 0 2
10425: PUSH
10426: LD_INT 2
10428: ARRAY
10429: PUSH
10430: LD_INT 1
10432: ARRAY
10433: PUSH
10434: LD_INT 100
10436: PUSH
10437: LD_VAR 0 8
10441: PLUS
10442: EQUAL
10443: IFFALSE 10488
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10445: LD_ADDR_VAR 0 2
10449: PUSH
10450: LD_VAR 0 2
10454: PPUSH
10455: LD_INT 2
10457: PPUSH
10458: LD_VAR 0 2
10462: PUSH
10463: LD_INT 2
10465: ARRAY
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 3
10474: PPUSH
10475: CALL_OW 1
10479: ST_TO_ADDR
// tmp := 1 ;
10480: LD_ADDR_VAR 0 3
10484: PUSH
10485: LD_STRING 1
10487: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10488: LD_ADDR_VAR 0 6
10492: PUSH
10493: LD_VAR 0 6
10497: PUSH
10498: LD_VAR 0 3
10502: STR
10503: ST_TO_ADDR
// end ;
10504: GO 10400
10506: POP
10507: POP
// if isGameLoad then
10508: LD_VAR 0 1
10512: IFFALSE 10987
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10514: LD_ADDR_VAR 0 4
10518: PUSH
10519: LD_EXP 21
10523: PUSH
10524: LD_EXP 20
10528: PUSH
10529: LD_EXP 22
10533: PUSH
10534: LD_EXP 19
10538: PUSH
10539: LD_EXP 23
10543: PUSH
10544: LD_EXP 24
10548: PUSH
10549: LD_EXP 25
10553: PUSH
10554: LD_EXP 26
10558: PUSH
10559: LD_EXP 27
10563: PUSH
10564: LD_EXP 28
10568: PUSH
10569: LD_EXP 29
10573: PUSH
10574: LD_EXP 30
10578: PUSH
10579: LD_EXP 31
10583: PUSH
10584: LD_EXP 32
10588: PUSH
10589: LD_EXP 40
10593: PUSH
10594: LD_EXP 41
10598: PUSH
10599: LD_EXP 42
10603: PUSH
10604: LD_EXP 43
10608: PUSH
10609: LD_EXP 45
10613: PUSH
10614: LD_EXP 46
10618: PUSH
10619: LD_EXP 47
10623: PUSH
10624: LD_EXP 50
10628: PUSH
10629: LD_EXP 52
10633: PUSH
10634: LD_EXP 53
10638: PUSH
10639: LD_EXP 54
10643: PUSH
10644: LD_EXP 56
10648: PUSH
10649: LD_EXP 57
10653: PUSH
10654: LD_EXP 60
10658: PUSH
10659: LD_EXP 61
10663: PUSH
10664: LD_EXP 62
10668: PUSH
10669: LD_EXP 63
10673: PUSH
10674: LD_EXP 64
10678: PUSH
10679: LD_EXP 65
10683: PUSH
10684: LD_EXP 66
10688: PUSH
10689: LD_EXP 67
10693: PUSH
10694: LD_EXP 68
10698: PUSH
10699: LD_EXP 33
10703: PUSH
10704: LD_EXP 34
10708: PUSH
10709: LD_EXP 37
10713: PUSH
10714: LD_EXP 38
10718: PUSH
10719: LD_EXP 39
10723: PUSH
10724: LD_EXP 35
10728: PUSH
10729: LD_EXP 36
10733: PUSH
10734: LD_EXP 44
10738: PUSH
10739: LD_EXP 48
10743: PUSH
10744: LD_EXP 49
10748: PUSH
10749: LD_EXP 51
10753: PUSH
10754: LD_EXP 55
10758: PUSH
10759: LD_EXP 58
10763: PUSH
10764: LD_EXP 59
10768: PUSH
10769: LD_EXP 69
10773: PUSH
10774: LD_EXP 70
10778: PUSH
10779: LD_EXP 71
10783: PUSH
10784: LD_EXP 72
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: ST_TO_ADDR
// tmp :=  ;
10845: LD_ADDR_VAR 0 3
10849: PUSH
10850: LD_STRING 
10852: ST_TO_ADDR
// for i = 1 to normalCounter do
10853: LD_ADDR_VAR 0 8
10857: PUSH
10858: DOUBLE
10859: LD_INT 1
10861: DEC
10862: ST_TO_ADDR
10863: LD_EXP 17
10867: PUSH
10868: FOR_TO
10869: IFFALSE 10905
// begin if flags [ i ] then
10871: LD_VAR 0 4
10875: PUSH
10876: LD_VAR 0 8
10880: ARRAY
10881: IFFALSE 10903
// tmp := tmp & i & ; ;
10883: LD_ADDR_VAR 0 3
10887: PUSH
10888: LD_VAR 0 3
10892: PUSH
10893: LD_VAR 0 8
10897: STR
10898: PUSH
10899: LD_STRING ;
10901: STR
10902: ST_TO_ADDR
// end ;
10903: GO 10868
10905: POP
10906: POP
// for i = 1 to hardcoreCounter do
10907: LD_ADDR_VAR 0 8
10911: PUSH
10912: DOUBLE
10913: LD_INT 1
10915: DEC
10916: ST_TO_ADDR
10917: LD_EXP 18
10921: PUSH
10922: FOR_TO
10923: IFFALSE 10969
// begin if flags [ normalCounter + i ] then
10925: LD_VAR 0 4
10929: PUSH
10930: LD_EXP 17
10934: PUSH
10935: LD_VAR 0 8
10939: PLUS
10940: ARRAY
10941: IFFALSE 10967
// tmp := tmp & ( 100 + i ) & ; ;
10943: LD_ADDR_VAR 0 3
10947: PUSH
10948: LD_VAR 0 3
10952: PUSH
10953: LD_INT 100
10955: PUSH
10956: LD_VAR 0 8
10960: PLUS
10961: STR
10962: PUSH
10963: LD_STRING ;
10965: STR
10966: ST_TO_ADDR
// end ;
10967: GO 10922
10969: POP
10970: POP
// if tmp then
10971: LD_VAR 0 3
10975: IFFALSE 10987
// active := tmp ;
10977: LD_ADDR_VAR 0 7
10981: PUSH
10982: LD_VAR 0 3
10986: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10987: LD_STRING getStreamItemsFromMission("
10989: PUSH
10990: LD_VAR 0 5
10994: STR
10995: PUSH
10996: LD_STRING ","
10998: STR
10999: PUSH
11000: LD_VAR 0 6
11004: STR
11005: PUSH
11006: LD_STRING ","
11008: STR
11009: PUSH
11010: LD_VAR 0 7
11014: STR
11015: PUSH
11016: LD_STRING ")
11018: STR
11019: PPUSH
11020: CALL_OW 559
// end else
11024: GO 11033
// ToLua ( getStreamItemsFromMission("","","") ) ;
11026: LD_STRING getStreamItemsFromMission("","","")
11028: PPUSH
11029: CALL_OW 559
// end ;
11033: LD_VAR 0 2
11037: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11038: LD_EXP 16
11042: PUSH
11043: LD_EXP 21
11047: AND
11048: IFFALSE 11172
11050: GO 11052
11052: DISABLE
11053: LD_INT 0
11055: PPUSH
11056: PPUSH
// begin enable ;
11057: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11058: LD_ADDR_VAR 0 2
11062: PUSH
11063: LD_INT 22
11065: PUSH
11066: LD_OWVAR 2
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 2
11077: PUSH
11078: LD_INT 34
11080: PUSH
11081: LD_INT 7
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 34
11090: PUSH
11091: LD_INT 45
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 34
11100: PUSH
11101: LD_INT 28
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: LD_INT 34
11110: PUSH
11111: LD_INT 47
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PPUSH
11129: CALL_OW 69
11133: ST_TO_ADDR
// if not tmp then
11134: LD_VAR 0 2
11138: NOT
11139: IFFALSE 11143
// exit ;
11141: GO 11172
// for i in tmp do
11143: LD_ADDR_VAR 0 1
11147: PUSH
11148: LD_VAR 0 2
11152: PUSH
11153: FOR_IN
11154: IFFALSE 11170
// begin SetLives ( i , 0 ) ;
11156: LD_VAR 0 1
11160: PPUSH
11161: LD_INT 0
11163: PPUSH
11164: CALL_OW 234
// end ;
11168: GO 11153
11170: POP
11171: POP
// end ;
11172: PPOPN 2
11174: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11175: LD_EXP 16
11179: PUSH
11180: LD_EXP 22
11184: AND
11185: IFFALSE 11269
11187: GO 11189
11189: DISABLE
11190: LD_INT 0
11192: PPUSH
11193: PPUSH
// begin enable ;
11194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11195: LD_ADDR_VAR 0 2
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_OWVAR 2
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 32
11214: PUSH
11215: LD_INT 3
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PPUSH
11226: CALL_OW 69
11230: ST_TO_ADDR
// if not tmp then
11231: LD_VAR 0 2
11235: NOT
11236: IFFALSE 11240
// exit ;
11238: GO 11269
// for i in tmp do
11240: LD_ADDR_VAR 0 1
11244: PUSH
11245: LD_VAR 0 2
11249: PUSH
11250: FOR_IN
11251: IFFALSE 11267
// begin SetLives ( i , 0 ) ;
11253: LD_VAR 0 1
11257: PPUSH
11258: LD_INT 0
11260: PPUSH
11261: CALL_OW 234
// end ;
11265: GO 11250
11267: POP
11268: POP
// end ;
11269: PPOPN 2
11271: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11272: LD_EXP 16
11276: PUSH
11277: LD_EXP 19
11281: AND
11282: IFFALSE 11375
11284: GO 11286
11286: DISABLE
11287: LD_INT 0
11289: PPUSH
// begin enable ;
11290: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11291: LD_ADDR_VAR 0 1
11295: PUSH
11296: LD_INT 22
11298: PUSH
11299: LD_OWVAR 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 2
11310: PUSH
11311: LD_INT 25
11313: PUSH
11314: LD_INT 5
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 25
11323: PUSH
11324: LD_INT 9
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 25
11333: PUSH
11334: LD_INT 8
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 69
11355: PUSH
11356: FOR_IN
11357: IFFALSE 11373
// begin SetClass ( i , 1 ) ;
11359: LD_VAR 0 1
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 336
// end ;
11371: GO 11356
11373: POP
11374: POP
// end ;
11375: PPOPN 1
11377: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11378: LD_EXP 16
11382: PUSH
11383: LD_EXP 20
11387: AND
11388: PUSH
11389: LD_OWVAR 65
11393: PUSH
11394: LD_INT 7
11396: LESS
11397: AND
11398: IFFALSE 11412
11400: GO 11402
11402: DISABLE
// begin enable ;
11403: ENABLE
// game_speed := 7 ;
11404: LD_ADDR_OWVAR 65
11408: PUSH
11409: LD_INT 7
11411: ST_TO_ADDR
// end ;
11412: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11413: LD_EXP 16
11417: PUSH
11418: LD_EXP 23
11422: AND
11423: IFFALSE 11625
11425: GO 11427
11427: DISABLE
11428: LD_INT 0
11430: PPUSH
11431: PPUSH
11432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11433: LD_ADDR_VAR 0 3
11437: PUSH
11438: LD_INT 81
11440: PUSH
11441: LD_OWVAR 2
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 21
11452: PUSH
11453: LD_INT 1
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PPUSH
11464: CALL_OW 69
11468: ST_TO_ADDR
// if not tmp then
11469: LD_VAR 0 3
11473: NOT
11474: IFFALSE 11478
// exit ;
11476: GO 11625
// if tmp > 5 then
11478: LD_VAR 0 3
11482: PUSH
11483: LD_INT 5
11485: GREATER
11486: IFFALSE 11498
// k := 5 else
11488: LD_ADDR_VAR 0 2
11492: PUSH
11493: LD_INT 5
11495: ST_TO_ADDR
11496: GO 11508
// k := tmp ;
11498: LD_ADDR_VAR 0 2
11502: PUSH
11503: LD_VAR 0 3
11507: ST_TO_ADDR
// for i := 1 to k do
11508: LD_ADDR_VAR 0 1
11512: PUSH
11513: DOUBLE
11514: LD_INT 1
11516: DEC
11517: ST_TO_ADDR
11518: LD_VAR 0 2
11522: PUSH
11523: FOR_TO
11524: IFFALSE 11623
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11526: LD_VAR 0 3
11530: PUSH
11531: LD_VAR 0 1
11535: ARRAY
11536: PPUSH
11537: LD_VAR 0 1
11541: PUSH
11542: LD_INT 4
11544: MOD
11545: PUSH
11546: LD_INT 1
11548: PLUS
11549: PPUSH
11550: CALL_OW 259
11554: PUSH
11555: LD_INT 10
11557: LESS
11558: IFFALSE 11621
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11560: LD_VAR 0 3
11564: PUSH
11565: LD_VAR 0 1
11569: ARRAY
11570: PPUSH
11571: LD_VAR 0 1
11575: PUSH
11576: LD_INT 4
11578: MOD
11579: PUSH
11580: LD_INT 1
11582: PLUS
11583: PPUSH
11584: LD_VAR 0 3
11588: PUSH
11589: LD_VAR 0 1
11593: ARRAY
11594: PPUSH
11595: LD_VAR 0 1
11599: PUSH
11600: LD_INT 4
11602: MOD
11603: PUSH
11604: LD_INT 1
11606: PLUS
11607: PPUSH
11608: CALL_OW 259
11612: PUSH
11613: LD_INT 1
11615: PLUS
11616: PPUSH
11617: CALL_OW 237
11621: GO 11523
11623: POP
11624: POP
// end ;
11625: PPOPN 3
11627: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11628: LD_EXP 16
11632: PUSH
11633: LD_EXP 24
11637: AND
11638: IFFALSE 11658
11640: GO 11642
11642: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11643: LD_INT 4
11645: PPUSH
11646: LD_OWVAR 2
11650: PPUSH
11651: LD_INT 0
11653: PPUSH
11654: CALL_OW 324
11658: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11659: LD_EXP 16
11663: PUSH
11664: LD_EXP 53
11668: AND
11669: IFFALSE 11689
11671: GO 11673
11673: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11674: LD_INT 19
11676: PPUSH
11677: LD_OWVAR 2
11681: PPUSH
11682: LD_INT 0
11684: PPUSH
11685: CALL_OW 324
11689: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11690: LD_EXP 16
11694: PUSH
11695: LD_EXP 25
11699: AND
11700: IFFALSE 11802
11702: GO 11704
11704: DISABLE
11705: LD_INT 0
11707: PPUSH
11708: PPUSH
// begin enable ;
11709: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11710: LD_ADDR_VAR 0 2
11714: PUSH
11715: LD_INT 22
11717: PUSH
11718: LD_OWVAR 2
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 34
11732: PUSH
11733: LD_INT 11
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 34
11742: PUSH
11743: LD_INT 30
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: LIST
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PPUSH
11759: CALL_OW 69
11763: ST_TO_ADDR
// if not tmp then
11764: LD_VAR 0 2
11768: NOT
11769: IFFALSE 11773
// exit ;
11771: GO 11802
// for i in tmp do
11773: LD_ADDR_VAR 0 1
11777: PUSH
11778: LD_VAR 0 2
11782: PUSH
11783: FOR_IN
11784: IFFALSE 11800
// begin SetLives ( i , 0 ) ;
11786: LD_VAR 0 1
11790: PPUSH
11791: LD_INT 0
11793: PPUSH
11794: CALL_OW 234
// end ;
11798: GO 11783
11800: POP
11801: POP
// end ;
11802: PPOPN 2
11804: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11805: LD_EXP 16
11809: PUSH
11810: LD_EXP 26
11814: AND
11815: IFFALSE 11835
11817: GO 11819
11819: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11820: LD_INT 32
11822: PPUSH
11823: LD_OWVAR 2
11827: PPUSH
11828: LD_INT 0
11830: PPUSH
11831: CALL_OW 324
11835: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11836: LD_EXP 16
11840: PUSH
11841: LD_EXP 27
11845: AND
11846: IFFALSE 12027
11848: GO 11850
11850: DISABLE
11851: LD_INT 0
11853: PPUSH
11854: PPUSH
11855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11856: LD_ADDR_VAR 0 2
11860: PUSH
11861: LD_INT 22
11863: PUSH
11864: LD_OWVAR 2
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 33
11875: PUSH
11876: LD_INT 3
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PPUSH
11887: CALL_OW 69
11891: ST_TO_ADDR
// if not tmp then
11892: LD_VAR 0 2
11896: NOT
11897: IFFALSE 11901
// exit ;
11899: GO 12027
// side := 0 ;
11901: LD_ADDR_VAR 0 3
11905: PUSH
11906: LD_INT 0
11908: ST_TO_ADDR
// for i := 1 to 8 do
11909: LD_ADDR_VAR 0 1
11913: PUSH
11914: DOUBLE
11915: LD_INT 1
11917: DEC
11918: ST_TO_ADDR
11919: LD_INT 8
11921: PUSH
11922: FOR_TO
11923: IFFALSE 11971
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11925: LD_OWVAR 2
11929: PUSH
11930: LD_VAR 0 1
11934: NONEQUAL
11935: PUSH
11936: LD_OWVAR 2
11940: PPUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 81
11950: PUSH
11951: LD_INT 2
11953: EQUAL
11954: AND
11955: IFFALSE 11969
// begin side := i ;
11957: LD_ADDR_VAR 0 3
11961: PUSH
11962: LD_VAR 0 1
11966: ST_TO_ADDR
// break ;
11967: GO 11971
// end ;
11969: GO 11922
11971: POP
11972: POP
// if not side then
11973: LD_VAR 0 3
11977: NOT
11978: IFFALSE 11982
// exit ;
11980: GO 12027
// for i := 1 to tmp do
11982: LD_ADDR_VAR 0 1
11986: PUSH
11987: DOUBLE
11988: LD_INT 1
11990: DEC
11991: ST_TO_ADDR
11992: LD_VAR 0 2
11996: PUSH
11997: FOR_TO
11998: IFFALSE 12025
// if Prob ( 60 ) then
12000: LD_INT 60
12002: PPUSH
12003: CALL_OW 13
12007: IFFALSE 12023
// SetSide ( i , side ) ;
12009: LD_VAR 0 1
12013: PPUSH
12014: LD_VAR 0 3
12018: PPUSH
12019: CALL_OW 235
12023: GO 11997
12025: POP
12026: POP
// end ;
12027: PPOPN 3
12029: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12030: LD_EXP 16
12034: PUSH
12035: LD_EXP 29
12039: AND
12040: IFFALSE 12159
12042: GO 12044
12044: DISABLE
12045: LD_INT 0
12047: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12048: LD_ADDR_VAR 0 1
12052: PUSH
12053: LD_INT 22
12055: PUSH
12056: LD_OWVAR 2
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 21
12067: PUSH
12068: LD_INT 1
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 3
12077: PUSH
12078: LD_INT 23
12080: PUSH
12081: LD_INT 0
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: PPUSH
12097: CALL_OW 69
12101: PUSH
12102: FOR_IN
12103: IFFALSE 12157
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12105: LD_VAR 0 1
12109: PPUSH
12110: CALL_OW 257
12114: PUSH
12115: LD_INT 1
12117: PUSH
12118: LD_INT 2
12120: PUSH
12121: LD_INT 3
12123: PUSH
12124: LD_INT 4
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: IN
12133: IFFALSE 12155
// SetClass ( un , rand ( 1 , 4 ) ) ;
12135: LD_VAR 0 1
12139: PPUSH
12140: LD_INT 1
12142: PPUSH
12143: LD_INT 4
12145: PPUSH
12146: CALL_OW 12
12150: PPUSH
12151: CALL_OW 336
12155: GO 12102
12157: POP
12158: POP
// end ;
12159: PPOPN 1
12161: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12162: LD_EXP 16
12166: PUSH
12167: LD_EXP 28
12171: AND
12172: IFFALSE 12251
12174: GO 12176
12176: DISABLE
12177: LD_INT 0
12179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12180: LD_ADDR_VAR 0 1
12184: PUSH
12185: LD_INT 22
12187: PUSH
12188: LD_OWVAR 2
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 21
12199: PUSH
12200: LD_INT 3
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PPUSH
12211: CALL_OW 69
12215: ST_TO_ADDR
// if not tmp then
12216: LD_VAR 0 1
12220: NOT
12221: IFFALSE 12225
// exit ;
12223: GO 12251
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12225: LD_VAR 0 1
12229: PUSH
12230: LD_INT 1
12232: PPUSH
12233: LD_VAR 0 1
12237: PPUSH
12238: CALL_OW 12
12242: ARRAY
12243: PPUSH
12244: LD_INT 100
12246: PPUSH
12247: CALL_OW 234
// end ;
12251: PPOPN 1
12253: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12254: LD_EXP 16
12258: PUSH
12259: LD_EXP 30
12263: AND
12264: IFFALSE 12362
12266: GO 12268
12268: DISABLE
12269: LD_INT 0
12271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12272: LD_ADDR_VAR 0 1
12276: PUSH
12277: LD_INT 22
12279: PUSH
12280: LD_OWVAR 2
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 21
12291: PUSH
12292: LD_INT 1
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PPUSH
12303: CALL_OW 69
12307: ST_TO_ADDR
// if not tmp then
12308: LD_VAR 0 1
12312: NOT
12313: IFFALSE 12317
// exit ;
12315: GO 12362
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12317: LD_VAR 0 1
12321: PUSH
12322: LD_INT 1
12324: PPUSH
12325: LD_VAR 0 1
12329: PPUSH
12330: CALL_OW 12
12334: ARRAY
12335: PPUSH
12336: LD_INT 1
12338: PPUSH
12339: LD_INT 4
12341: PPUSH
12342: CALL_OW 12
12346: PPUSH
12347: LD_INT 3000
12349: PPUSH
12350: LD_INT 9000
12352: PPUSH
12353: CALL_OW 12
12357: PPUSH
12358: CALL_OW 492
// end ;
12362: PPOPN 1
12364: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12365: LD_EXP 16
12369: PUSH
12370: LD_EXP 31
12374: AND
12375: IFFALSE 12395
12377: GO 12379
12379: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12380: LD_INT 1
12382: PPUSH
12383: LD_OWVAR 2
12387: PPUSH
12388: LD_INT 0
12390: PPUSH
12391: CALL_OW 324
12395: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12396: LD_EXP 16
12400: PUSH
12401: LD_EXP 32
12405: AND
12406: IFFALSE 12489
12408: GO 12410
12410: DISABLE
12411: LD_INT 0
12413: PPUSH
12414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12415: LD_ADDR_VAR 0 2
12419: PUSH
12420: LD_INT 22
12422: PUSH
12423: LD_OWVAR 2
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 21
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PPUSH
12446: CALL_OW 69
12450: ST_TO_ADDR
// if not tmp then
12451: LD_VAR 0 2
12455: NOT
12456: IFFALSE 12460
// exit ;
12458: GO 12489
// for i in tmp do
12460: LD_ADDR_VAR 0 1
12464: PUSH
12465: LD_VAR 0 2
12469: PUSH
12470: FOR_IN
12471: IFFALSE 12487
// SetBLevel ( i , 10 ) ;
12473: LD_VAR 0 1
12477: PPUSH
12478: LD_INT 10
12480: PPUSH
12481: CALL_OW 241
12485: GO 12470
12487: POP
12488: POP
// end ;
12489: PPOPN 2
12491: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12492: LD_EXP 16
12496: PUSH
12497: LD_EXP 33
12501: AND
12502: IFFALSE 12613
12504: GO 12506
12506: DISABLE
12507: LD_INT 0
12509: PPUSH
12510: PPUSH
12511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12512: LD_ADDR_VAR 0 3
12516: PUSH
12517: LD_INT 22
12519: PUSH
12520: LD_OWVAR 2
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 25
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PPUSH
12543: CALL_OW 69
12547: ST_TO_ADDR
// if not tmp then
12548: LD_VAR 0 3
12552: NOT
12553: IFFALSE 12557
// exit ;
12555: GO 12613
// un := tmp [ rand ( 1 , tmp ) ] ;
12557: LD_ADDR_VAR 0 2
12561: PUSH
12562: LD_VAR 0 3
12566: PUSH
12567: LD_INT 1
12569: PPUSH
12570: LD_VAR 0 3
12574: PPUSH
12575: CALL_OW 12
12579: ARRAY
12580: ST_TO_ADDR
// if Crawls ( un ) then
12581: LD_VAR 0 2
12585: PPUSH
12586: CALL_OW 318
12590: IFFALSE 12601
// ComWalk ( un ) ;
12592: LD_VAR 0 2
12596: PPUSH
12597: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12601: LD_VAR 0 2
12605: PPUSH
12606: LD_INT 5
12608: PPUSH
12609: CALL_OW 336
// end ;
12613: PPOPN 3
12615: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12616: LD_EXP 16
12620: PUSH
12621: LD_EXP 34
12625: AND
12626: PUSH
12627: LD_OWVAR 67
12631: PUSH
12632: LD_INT 4
12634: LESS
12635: AND
12636: IFFALSE 12655
12638: GO 12640
12640: DISABLE
// begin Difficulty := Difficulty + 1 ;
12641: LD_ADDR_OWVAR 67
12645: PUSH
12646: LD_OWVAR 67
12650: PUSH
12651: LD_INT 1
12653: PLUS
12654: ST_TO_ADDR
// end ;
12655: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12656: LD_EXP 16
12660: PUSH
12661: LD_EXP 35
12665: AND
12666: IFFALSE 12769
12668: GO 12670
12670: DISABLE
12671: LD_INT 0
12673: PPUSH
// begin for i := 1 to 5 do
12674: LD_ADDR_VAR 0 1
12678: PUSH
12679: DOUBLE
12680: LD_INT 1
12682: DEC
12683: ST_TO_ADDR
12684: LD_INT 5
12686: PUSH
12687: FOR_TO
12688: IFFALSE 12767
// begin uc_nation := nation_nature ;
12690: LD_ADDR_OWVAR 21
12694: PUSH
12695: LD_INT 0
12697: ST_TO_ADDR
// uc_side := 0 ;
12698: LD_ADDR_OWVAR 20
12702: PUSH
12703: LD_INT 0
12705: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12706: LD_ADDR_OWVAR 29
12710: PUSH
12711: LD_INT 12
12713: PUSH
12714: LD_INT 12
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: ST_TO_ADDR
// hc_agressivity := 20 ;
12721: LD_ADDR_OWVAR 35
12725: PUSH
12726: LD_INT 20
12728: ST_TO_ADDR
// hc_class := class_tiger ;
12729: LD_ADDR_OWVAR 28
12733: PUSH
12734: LD_INT 14
12736: ST_TO_ADDR
// hc_gallery :=  ;
12737: LD_ADDR_OWVAR 33
12741: PUSH
12742: LD_STRING 
12744: ST_TO_ADDR
// hc_name :=  ;
12745: LD_ADDR_OWVAR 26
12749: PUSH
12750: LD_STRING 
12752: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12753: CALL_OW 44
12757: PPUSH
12758: LD_INT 0
12760: PPUSH
12761: CALL_OW 51
// end ;
12765: GO 12687
12767: POP
12768: POP
// end ;
12769: PPOPN 1
12771: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12772: LD_EXP 16
12776: PUSH
12777: LD_EXP 36
12781: AND
12782: IFFALSE 12791
12784: GO 12786
12786: DISABLE
// StreamSibBomb ;
12787: CALL 12792 0 0
12791: END
// export function StreamSibBomb ; var i , x , y ; begin
12792: LD_INT 0
12794: PPUSH
12795: PPUSH
12796: PPUSH
12797: PPUSH
// result := false ;
12798: LD_ADDR_VAR 0 1
12802: PUSH
12803: LD_INT 0
12805: ST_TO_ADDR
// for i := 1 to 16 do
12806: LD_ADDR_VAR 0 2
12810: PUSH
12811: DOUBLE
12812: LD_INT 1
12814: DEC
12815: ST_TO_ADDR
12816: LD_INT 16
12818: PUSH
12819: FOR_TO
12820: IFFALSE 13019
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12822: LD_ADDR_VAR 0 3
12826: PUSH
12827: LD_INT 10
12829: PUSH
12830: LD_INT 20
12832: PUSH
12833: LD_INT 30
12835: PUSH
12836: LD_INT 40
12838: PUSH
12839: LD_INT 50
12841: PUSH
12842: LD_INT 60
12844: PUSH
12845: LD_INT 70
12847: PUSH
12848: LD_INT 80
12850: PUSH
12851: LD_INT 90
12853: PUSH
12854: LD_INT 100
12856: PUSH
12857: LD_INT 110
12859: PUSH
12860: LD_INT 120
12862: PUSH
12863: LD_INT 130
12865: PUSH
12866: LD_INT 140
12868: PUSH
12869: LD_INT 150
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 1
12891: PPUSH
12892: LD_INT 15
12894: PPUSH
12895: CALL_OW 12
12899: ARRAY
12900: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12901: LD_ADDR_VAR 0 4
12905: PUSH
12906: LD_INT 10
12908: PUSH
12909: LD_INT 20
12911: PUSH
12912: LD_INT 30
12914: PUSH
12915: LD_INT 40
12917: PUSH
12918: LD_INT 50
12920: PUSH
12921: LD_INT 60
12923: PUSH
12924: LD_INT 70
12926: PUSH
12927: LD_INT 80
12929: PUSH
12930: LD_INT 90
12932: PUSH
12933: LD_INT 100
12935: PUSH
12936: LD_INT 110
12938: PUSH
12939: LD_INT 120
12941: PUSH
12942: LD_INT 130
12944: PUSH
12945: LD_INT 140
12947: PUSH
12948: LD_INT 150
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: PUSH
12968: LD_INT 1
12970: PPUSH
12971: LD_INT 15
12973: PPUSH
12974: CALL_OW 12
12978: ARRAY
12979: ST_TO_ADDR
// if ValidHex ( x , y ) then
12980: LD_VAR 0 3
12984: PPUSH
12985: LD_VAR 0 4
12989: PPUSH
12990: CALL_OW 488
12994: IFFALSE 13017
// begin result := [ x , y ] ;
12996: LD_ADDR_VAR 0 1
13000: PUSH
13001: LD_VAR 0 3
13005: PUSH
13006: LD_VAR 0 4
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: ST_TO_ADDR
// break ;
13015: GO 13019
// end ; end ;
13017: GO 12819
13019: POP
13020: POP
// if result then
13021: LD_VAR 0 1
13025: IFFALSE 13085
// begin ToLua ( playSibBomb() ) ;
13027: LD_STRING playSibBomb()
13029: PPUSH
13030: CALL_OW 559
// wait ( 0 0$14 ) ;
13034: LD_INT 490
13036: PPUSH
13037: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13041: LD_VAR 0 1
13045: PUSH
13046: LD_INT 1
13048: ARRAY
13049: PPUSH
13050: LD_VAR 0 1
13054: PUSH
13055: LD_INT 2
13057: ARRAY
13058: PPUSH
13059: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13063: LD_VAR 0 1
13067: PUSH
13068: LD_INT 1
13070: ARRAY
13071: PPUSH
13072: LD_VAR 0 1
13076: PUSH
13077: LD_INT 2
13079: ARRAY
13080: PPUSH
13081: CALL_OW 429
// end ; end ;
13085: LD_VAR 0 1
13089: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13090: LD_EXP 16
13094: PUSH
13095: LD_EXP 38
13099: AND
13100: IFFALSE 13112
13102: GO 13104
13104: DISABLE
// YouLost (  ) ;
13105: LD_STRING 
13107: PPUSH
13108: CALL_OW 104
13112: END
// every 0 0$1 trigger StreamModeActive and sFog do
13113: LD_EXP 16
13117: PUSH
13118: LD_EXP 37
13122: AND
13123: IFFALSE 13137
13125: GO 13127
13127: DISABLE
// FogOff ( your_side ) ;
13128: LD_OWVAR 2
13132: PPUSH
13133: CALL_OW 344
13137: END
// every 0 0$1 trigger StreamModeActive and sSun do
13138: LD_EXP 16
13142: PUSH
13143: LD_EXP 39
13147: AND
13148: IFFALSE 13176
13150: GO 13152
13152: DISABLE
// begin solar_recharge_percent := 0 ;
13153: LD_ADDR_OWVAR 79
13157: PUSH
13158: LD_INT 0
13160: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13161: LD_INT 10500
13163: PPUSH
13164: CALL_OW 67
// solar_recharge_percent := 100 ;
13168: LD_ADDR_OWVAR 79
13172: PUSH
13173: LD_INT 100
13175: ST_TO_ADDR
// end ;
13176: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13177: LD_EXP 16
13181: PUSH
13182: LD_EXP 40
13186: AND
13187: IFFALSE 13426
13189: GO 13191
13191: DISABLE
13192: LD_INT 0
13194: PPUSH
13195: PPUSH
13196: PPUSH
// begin tmp := [ ] ;
13197: LD_ADDR_VAR 0 3
13201: PUSH
13202: EMPTY
13203: ST_TO_ADDR
// for i := 1 to 6 do
13204: LD_ADDR_VAR 0 1
13208: PUSH
13209: DOUBLE
13210: LD_INT 1
13212: DEC
13213: ST_TO_ADDR
13214: LD_INT 6
13216: PUSH
13217: FOR_TO
13218: IFFALSE 13323
// begin uc_nation := nation_nature ;
13220: LD_ADDR_OWVAR 21
13224: PUSH
13225: LD_INT 0
13227: ST_TO_ADDR
// uc_side := 0 ;
13228: LD_ADDR_OWVAR 20
13232: PUSH
13233: LD_INT 0
13235: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13236: LD_ADDR_OWVAR 29
13240: PUSH
13241: LD_INT 12
13243: PUSH
13244: LD_INT 12
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: ST_TO_ADDR
// hc_agressivity := 20 ;
13251: LD_ADDR_OWVAR 35
13255: PUSH
13256: LD_INT 20
13258: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13259: LD_ADDR_OWVAR 28
13263: PUSH
13264: LD_INT 17
13266: ST_TO_ADDR
// hc_gallery :=  ;
13267: LD_ADDR_OWVAR 33
13271: PUSH
13272: LD_STRING 
13274: ST_TO_ADDR
// hc_name :=  ;
13275: LD_ADDR_OWVAR 26
13279: PUSH
13280: LD_STRING 
13282: ST_TO_ADDR
// un := CreateHuman ;
13283: LD_ADDR_VAR 0 2
13287: PUSH
13288: CALL_OW 44
13292: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13293: LD_VAR 0 2
13297: PPUSH
13298: LD_INT 1
13300: PPUSH
13301: CALL_OW 51
// tmp := tmp ^ un ;
13305: LD_ADDR_VAR 0 3
13309: PUSH
13310: LD_VAR 0 3
13314: PUSH
13315: LD_VAR 0 2
13319: ADD
13320: ST_TO_ADDR
// end ;
13321: GO 13217
13323: POP
13324: POP
// repeat wait ( 0 0$1 ) ;
13325: LD_INT 35
13327: PPUSH
13328: CALL_OW 67
// for un in tmp do
13332: LD_ADDR_VAR 0 2
13336: PUSH
13337: LD_VAR 0 3
13341: PUSH
13342: FOR_IN
13343: IFFALSE 13417
// begin if IsDead ( un ) then
13345: LD_VAR 0 2
13349: PPUSH
13350: CALL_OW 301
13354: IFFALSE 13374
// begin tmp := tmp diff un ;
13356: LD_ADDR_VAR 0 3
13360: PUSH
13361: LD_VAR 0 3
13365: PUSH
13366: LD_VAR 0 2
13370: DIFF
13371: ST_TO_ADDR
// continue ;
13372: GO 13342
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13374: LD_VAR 0 2
13378: PPUSH
13379: LD_INT 3
13381: PUSH
13382: LD_INT 22
13384: PUSH
13385: LD_INT 0
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PPUSH
13396: CALL_OW 69
13400: PPUSH
13401: LD_VAR 0 2
13405: PPUSH
13406: CALL_OW 74
13410: PPUSH
13411: CALL_OW 115
// end ;
13415: GO 13342
13417: POP
13418: POP
// until not tmp ;
13419: LD_VAR 0 3
13423: NOT
13424: IFFALSE 13325
// end ;
13426: PPOPN 3
13428: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13429: LD_EXP 16
13433: PUSH
13434: LD_EXP 41
13438: AND
13439: IFFALSE 13493
13441: GO 13443
13443: DISABLE
// begin ToLua ( displayTroll(); ) ;
13444: LD_STRING displayTroll();
13446: PPUSH
13447: CALL_OW 559
// wait ( 3 3$00 ) ;
13451: LD_INT 6300
13453: PPUSH
13454: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13458: LD_STRING hideTroll();
13460: PPUSH
13461: CALL_OW 559
// wait ( 1 1$00 ) ;
13465: LD_INT 2100
13467: PPUSH
13468: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13472: LD_STRING displayTroll();
13474: PPUSH
13475: CALL_OW 559
// wait ( 1 1$00 ) ;
13479: LD_INT 2100
13481: PPUSH
13482: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13486: LD_STRING hideTroll();
13488: PPUSH
13489: CALL_OW 559
// end ;
13493: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13494: LD_EXP 16
13498: PUSH
13499: LD_EXP 42
13503: AND
13504: IFFALSE 13567
13506: GO 13508
13508: DISABLE
13509: LD_INT 0
13511: PPUSH
// begin p := 0 ;
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: LD_INT 0
13519: ST_TO_ADDR
// repeat game_speed := 1 ;
13520: LD_ADDR_OWVAR 65
13524: PUSH
13525: LD_INT 1
13527: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13528: LD_INT 35
13530: PPUSH
13531: CALL_OW 67
// p := p + 1 ;
13535: LD_ADDR_VAR 0 1
13539: PUSH
13540: LD_VAR 0 1
13544: PUSH
13545: LD_INT 1
13547: PLUS
13548: ST_TO_ADDR
// until p >= 60 ;
13549: LD_VAR 0 1
13553: PUSH
13554: LD_INT 60
13556: GREATEREQUAL
13557: IFFALSE 13520
// game_speed := 4 ;
13559: LD_ADDR_OWVAR 65
13563: PUSH
13564: LD_INT 4
13566: ST_TO_ADDR
// end ;
13567: PPOPN 1
13569: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13570: LD_EXP 16
13574: PUSH
13575: LD_EXP 43
13579: AND
13580: IFFALSE 13726
13582: GO 13584
13584: DISABLE
13585: LD_INT 0
13587: PPUSH
13588: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13589: LD_ADDR_VAR 0 1
13593: PUSH
13594: LD_INT 22
13596: PUSH
13597: LD_OWVAR 2
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 2
13608: PUSH
13609: LD_INT 30
13611: PUSH
13612: LD_INT 0
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 30
13621: PUSH
13622: LD_INT 1
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PPUSH
13638: CALL_OW 69
13642: ST_TO_ADDR
// if not depot then
13643: LD_VAR 0 1
13647: NOT
13648: IFFALSE 13652
// exit ;
13650: GO 13726
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13652: LD_ADDR_VAR 0 2
13656: PUSH
13657: LD_VAR 0 1
13661: PUSH
13662: LD_INT 1
13664: PPUSH
13665: LD_VAR 0 1
13669: PPUSH
13670: CALL_OW 12
13674: ARRAY
13675: PPUSH
13676: CALL_OW 274
13680: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13681: LD_VAR 0 2
13685: PPUSH
13686: LD_INT 1
13688: PPUSH
13689: LD_INT 0
13691: PPUSH
13692: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13696: LD_VAR 0 2
13700: PPUSH
13701: LD_INT 2
13703: PPUSH
13704: LD_INT 0
13706: PPUSH
13707: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13711: LD_VAR 0 2
13715: PPUSH
13716: LD_INT 3
13718: PPUSH
13719: LD_INT 0
13721: PPUSH
13722: CALL_OW 277
// end ;
13726: PPOPN 2
13728: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13729: LD_EXP 16
13733: PUSH
13734: LD_EXP 44
13738: AND
13739: IFFALSE 13836
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13747: LD_ADDR_VAR 0 1
13751: PUSH
13752: LD_INT 22
13754: PUSH
13755: LD_OWVAR 2
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: LD_INT 21
13766: PUSH
13767: LD_INT 1
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: LD_INT 3
13776: PUSH
13777: LD_INT 23
13779: PUSH
13780: LD_INT 0
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: LIST
13795: PPUSH
13796: CALL_OW 69
13800: ST_TO_ADDR
// if not tmp then
13801: LD_VAR 0 1
13805: NOT
13806: IFFALSE 13810
// exit ;
13808: GO 13836
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13810: LD_VAR 0 1
13814: PUSH
13815: LD_INT 1
13817: PPUSH
13818: LD_VAR 0 1
13822: PPUSH
13823: CALL_OW 12
13827: ARRAY
13828: PPUSH
13829: LD_INT 200
13831: PPUSH
13832: CALL_OW 234
// end ;
13836: PPOPN 1
13838: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13839: LD_EXP 16
13843: PUSH
13844: LD_EXP 45
13848: AND
13849: IFFALSE 13928
13851: GO 13853
13853: DISABLE
13854: LD_INT 0
13856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13857: LD_ADDR_VAR 0 1
13861: PUSH
13862: LD_INT 22
13864: PUSH
13865: LD_OWVAR 2
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 21
13876: PUSH
13877: LD_INT 2
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PPUSH
13888: CALL_OW 69
13892: ST_TO_ADDR
// if not tmp then
13893: LD_VAR 0 1
13897: NOT
13898: IFFALSE 13902
// exit ;
13900: GO 13928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13902: LD_VAR 0 1
13906: PUSH
13907: LD_INT 1
13909: PPUSH
13910: LD_VAR 0 1
13914: PPUSH
13915: CALL_OW 12
13919: ARRAY
13920: PPUSH
13921: LD_INT 60
13923: PPUSH
13924: CALL_OW 234
// end ;
13928: PPOPN 1
13930: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13931: LD_EXP 16
13935: PUSH
13936: LD_EXP 46
13940: AND
13941: IFFALSE 14040
13943: GO 13945
13945: DISABLE
13946: LD_INT 0
13948: PPUSH
13949: PPUSH
// begin enable ;
13950: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13951: LD_ADDR_VAR 0 1
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_OWVAR 2
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 61
13970: PUSH
13971: EMPTY
13972: LIST
13973: PUSH
13974: LD_INT 33
13976: PUSH
13977: LD_INT 2
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: PPUSH
13989: CALL_OW 69
13993: ST_TO_ADDR
// if not tmp then
13994: LD_VAR 0 1
13998: NOT
13999: IFFALSE 14003
// exit ;
14001: GO 14040
// for i in tmp do
14003: LD_ADDR_VAR 0 2
14007: PUSH
14008: LD_VAR 0 1
14012: PUSH
14013: FOR_IN
14014: IFFALSE 14038
// if IsControledBy ( i ) then
14016: LD_VAR 0 2
14020: PPUSH
14021: CALL_OW 312
14025: IFFALSE 14036
// ComUnlink ( i ) ;
14027: LD_VAR 0 2
14031: PPUSH
14032: CALL_OW 136
14036: GO 14013
14038: POP
14039: POP
// end ;
14040: PPOPN 2
14042: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14043: LD_EXP 16
14047: PUSH
14048: LD_EXP 47
14052: AND
14053: IFFALSE 14193
14055: GO 14057
14057: DISABLE
14058: LD_INT 0
14060: PPUSH
14061: PPUSH
// begin ToLua ( displayPowell(); ) ;
14062: LD_STRING displayPowell();
14064: PPUSH
14065: CALL_OW 559
// uc_side := 0 ;
14069: LD_ADDR_OWVAR 20
14073: PUSH
14074: LD_INT 0
14076: ST_TO_ADDR
// uc_nation := 2 ;
14077: LD_ADDR_OWVAR 21
14081: PUSH
14082: LD_INT 2
14084: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14085: LD_ADDR_OWVAR 37
14089: PUSH
14090: LD_INT 14
14092: ST_TO_ADDR
// vc_engine := engine_siberite ;
14093: LD_ADDR_OWVAR 39
14097: PUSH
14098: LD_INT 3
14100: ST_TO_ADDR
// vc_control := control_apeman ;
14101: LD_ADDR_OWVAR 38
14105: PUSH
14106: LD_INT 5
14108: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14109: LD_ADDR_OWVAR 40
14113: PUSH
14114: LD_INT 29
14116: ST_TO_ADDR
// un := CreateVehicle ;
14117: LD_ADDR_VAR 0 2
14121: PUSH
14122: CALL_OW 45
14126: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14127: LD_VAR 0 2
14131: PPUSH
14132: LD_INT 1
14134: PPUSH
14135: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14139: LD_INT 35
14141: PPUSH
14142: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14146: LD_VAR 0 2
14150: PPUSH
14151: LD_INT 22
14153: PUSH
14154: LD_OWVAR 2
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PPUSH
14163: CALL_OW 69
14167: PPUSH
14168: LD_VAR 0 2
14172: PPUSH
14173: CALL_OW 74
14177: PPUSH
14178: CALL_OW 115
// until IsDead ( un ) ;
14182: LD_VAR 0 2
14186: PPUSH
14187: CALL_OW 301
14191: IFFALSE 14139
// end ;
14193: PPOPN 2
14195: END
// every 0 0$1 trigger StreamModeActive and sStu do
14196: LD_EXP 16
14200: PUSH
14201: LD_EXP 55
14205: AND
14206: IFFALSE 14222
14208: GO 14210
14210: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14211: LD_STRING displayStucuk();
14213: PPUSH
14214: CALL_OW 559
// ResetFog ;
14218: CALL_OW 335
// end ;
14222: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14223: LD_EXP 16
14227: PUSH
14228: LD_EXP 48
14232: AND
14233: IFFALSE 14374
14235: GO 14237
14237: DISABLE
14238: LD_INT 0
14240: PPUSH
14241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14242: LD_ADDR_VAR 0 2
14246: PUSH
14247: LD_INT 22
14249: PUSH
14250: LD_OWVAR 2
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: ST_TO_ADDR
// if not tmp then
14278: LD_VAR 0 2
14282: NOT
14283: IFFALSE 14287
// exit ;
14285: GO 14374
// un := tmp [ rand ( 1 , tmp ) ] ;
14287: LD_ADDR_VAR 0 1
14291: PUSH
14292: LD_VAR 0 2
14296: PUSH
14297: LD_INT 1
14299: PPUSH
14300: LD_VAR 0 2
14304: PPUSH
14305: CALL_OW 12
14309: ARRAY
14310: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14311: LD_VAR 0 1
14315: PPUSH
14316: LD_INT 0
14318: PPUSH
14319: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14323: LD_VAR 0 1
14327: PPUSH
14328: LD_OWVAR 3
14332: PUSH
14333: LD_VAR 0 1
14337: DIFF
14338: PPUSH
14339: LD_VAR 0 1
14343: PPUSH
14344: CALL_OW 74
14348: PPUSH
14349: CALL_OW 115
// wait ( 0 0$20 ) ;
14353: LD_INT 700
14355: PPUSH
14356: CALL_OW 67
// SetSide ( un , your_side ) ;
14360: LD_VAR 0 1
14364: PPUSH
14365: LD_OWVAR 2
14369: PPUSH
14370: CALL_OW 235
// end ;
14374: PPOPN 2
14376: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14377: LD_EXP 16
14381: PUSH
14382: LD_EXP 49
14386: AND
14387: IFFALSE 14493
14389: GO 14391
14391: DISABLE
14392: LD_INT 0
14394: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14395: LD_ADDR_VAR 0 1
14399: PUSH
14400: LD_INT 22
14402: PUSH
14403: LD_OWVAR 2
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: LD_INT 2
14414: PUSH
14415: LD_INT 30
14417: PUSH
14418: LD_INT 0
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 30
14427: PUSH
14428: LD_INT 1
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PPUSH
14444: CALL_OW 69
14448: ST_TO_ADDR
// if not depot then
14449: LD_VAR 0 1
14453: NOT
14454: IFFALSE 14458
// exit ;
14456: GO 14493
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14458: LD_VAR 0 1
14462: PUSH
14463: LD_INT 1
14465: ARRAY
14466: PPUSH
14467: CALL_OW 250
14471: PPUSH
14472: LD_VAR 0 1
14476: PUSH
14477: LD_INT 1
14479: ARRAY
14480: PPUSH
14481: CALL_OW 251
14485: PPUSH
14486: LD_INT 70
14488: PPUSH
14489: CALL_OW 495
// end ;
14493: PPOPN 1
14495: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14496: LD_EXP 16
14500: PUSH
14501: LD_EXP 50
14505: AND
14506: IFFALSE 14717
14508: GO 14510
14510: DISABLE
14511: LD_INT 0
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
14517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14518: LD_ADDR_VAR 0 5
14522: PUSH
14523: LD_INT 22
14525: PUSH
14526: LD_OWVAR 2
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 21
14537: PUSH
14538: LD_INT 1
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PPUSH
14549: CALL_OW 69
14553: ST_TO_ADDR
// if not tmp then
14554: LD_VAR 0 5
14558: NOT
14559: IFFALSE 14563
// exit ;
14561: GO 14717
// for i in tmp do
14563: LD_ADDR_VAR 0 1
14567: PUSH
14568: LD_VAR 0 5
14572: PUSH
14573: FOR_IN
14574: IFFALSE 14715
// begin d := rand ( 0 , 5 ) ;
14576: LD_ADDR_VAR 0 4
14580: PUSH
14581: LD_INT 0
14583: PPUSH
14584: LD_INT 5
14586: PPUSH
14587: CALL_OW 12
14591: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14592: LD_ADDR_VAR 0 2
14596: PUSH
14597: LD_VAR 0 1
14601: PPUSH
14602: CALL_OW 250
14606: PPUSH
14607: LD_VAR 0 4
14611: PPUSH
14612: LD_INT 3
14614: PPUSH
14615: LD_INT 12
14617: PPUSH
14618: CALL_OW 12
14622: PPUSH
14623: CALL_OW 272
14627: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14628: LD_ADDR_VAR 0 3
14632: PUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 251
14642: PPUSH
14643: LD_VAR 0 4
14647: PPUSH
14648: LD_INT 3
14650: PPUSH
14651: LD_INT 12
14653: PPUSH
14654: CALL_OW 12
14658: PPUSH
14659: CALL_OW 273
14663: ST_TO_ADDR
// if ValidHex ( x , y ) then
14664: LD_VAR 0 2
14668: PPUSH
14669: LD_VAR 0 3
14673: PPUSH
14674: CALL_OW 488
14678: IFFALSE 14713
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14680: LD_VAR 0 1
14684: PPUSH
14685: LD_VAR 0 2
14689: PPUSH
14690: LD_VAR 0 3
14694: PPUSH
14695: LD_INT 3
14697: PPUSH
14698: LD_INT 6
14700: PPUSH
14701: CALL_OW 12
14705: PPUSH
14706: LD_INT 1
14708: PPUSH
14709: CALL_OW 483
// end ;
14713: GO 14573
14715: POP
14716: POP
// end ;
14717: PPOPN 5
14719: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14720: LD_EXP 16
14724: PUSH
14725: LD_EXP 51
14729: AND
14730: IFFALSE 14824
14732: GO 14734
14734: DISABLE
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14739: LD_ADDR_VAR 0 2
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_OWVAR 2
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 32
14758: PUSH
14759: LD_INT 1
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 2
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: PPUSH
14781: CALL_OW 69
14785: ST_TO_ADDR
// if not tmp then
14786: LD_VAR 0 2
14790: NOT
14791: IFFALSE 14795
// exit ;
14793: GO 14824
// for i in tmp do
14795: LD_ADDR_VAR 0 1
14799: PUSH
14800: LD_VAR 0 2
14804: PUSH
14805: FOR_IN
14806: IFFALSE 14822
// SetFuel ( i , 0 ) ;
14808: LD_VAR 0 1
14812: PPUSH
14813: LD_INT 0
14815: PPUSH
14816: CALL_OW 240
14820: GO 14805
14822: POP
14823: POP
// end ;
14824: PPOPN 2
14826: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14827: LD_EXP 16
14831: PUSH
14832: LD_EXP 52
14836: AND
14837: IFFALSE 14903
14839: GO 14841
14841: DISABLE
14842: LD_INT 0
14844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14845: LD_ADDR_VAR 0 1
14849: PUSH
14850: LD_INT 22
14852: PUSH
14853: LD_OWVAR 2
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 30
14864: PUSH
14865: LD_INT 29
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PPUSH
14876: CALL_OW 69
14880: ST_TO_ADDR
// if not tmp then
14881: LD_VAR 0 1
14885: NOT
14886: IFFALSE 14890
// exit ;
14888: GO 14903
// DestroyUnit ( tmp [ 1 ] ) ;
14890: LD_VAR 0 1
14894: PUSH
14895: LD_INT 1
14897: ARRAY
14898: PPUSH
14899: CALL_OW 65
// end ;
14903: PPOPN 1
14905: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14906: LD_EXP 16
14910: PUSH
14911: LD_EXP 54
14915: AND
14916: IFFALSE 15045
14918: GO 14920
14920: DISABLE
14921: LD_INT 0
14923: PPUSH
// begin uc_side := 0 ;
14924: LD_ADDR_OWVAR 20
14928: PUSH
14929: LD_INT 0
14931: ST_TO_ADDR
// uc_nation := nation_arabian ;
14932: LD_ADDR_OWVAR 21
14936: PUSH
14937: LD_INT 2
14939: ST_TO_ADDR
// hc_gallery :=  ;
14940: LD_ADDR_OWVAR 33
14944: PUSH
14945: LD_STRING 
14947: ST_TO_ADDR
// hc_name :=  ;
14948: LD_ADDR_OWVAR 26
14952: PUSH
14953: LD_STRING 
14955: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14956: LD_INT 1
14958: PPUSH
14959: LD_INT 11
14961: PPUSH
14962: LD_INT 10
14964: PPUSH
14965: CALL_OW 380
// un := CreateHuman ;
14969: LD_ADDR_VAR 0 1
14973: PUSH
14974: CALL_OW 44
14978: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14979: LD_VAR 0 1
14983: PPUSH
14984: LD_INT 1
14986: PPUSH
14987: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14991: LD_INT 35
14993: PPUSH
14994: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14998: LD_VAR 0 1
15002: PPUSH
15003: LD_INT 22
15005: PUSH
15006: LD_OWVAR 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PPUSH
15015: CALL_OW 69
15019: PPUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: CALL_OW 74
15029: PPUSH
15030: CALL_OW 115
// until IsDead ( un ) ;
15034: LD_VAR 0 1
15038: PPUSH
15039: CALL_OW 301
15043: IFFALSE 14991
// end ;
15045: PPOPN 1
15047: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15048: LD_EXP 16
15052: PUSH
15053: LD_EXP 56
15057: AND
15058: IFFALSE 15070
15060: GO 15062
15062: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15063: LD_STRING earthquake(getX(game), 0, 32)
15065: PPUSH
15066: CALL_OW 559
15070: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15071: LD_EXP 16
15075: PUSH
15076: LD_EXP 57
15080: AND
15081: IFFALSE 15172
15083: GO 15085
15085: DISABLE
15086: LD_INT 0
15088: PPUSH
// begin enable ;
15089: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15090: LD_ADDR_VAR 0 1
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_OWVAR 2
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 21
15109: PUSH
15110: LD_INT 2
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: LD_INT 33
15119: PUSH
15120: LD_INT 3
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: LIST
15131: PPUSH
15132: CALL_OW 69
15136: ST_TO_ADDR
// if not tmp then
15137: LD_VAR 0 1
15141: NOT
15142: IFFALSE 15146
// exit ;
15144: GO 15172
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15146: LD_VAR 0 1
15150: PUSH
15151: LD_INT 1
15153: PPUSH
15154: LD_VAR 0 1
15158: PPUSH
15159: CALL_OW 12
15163: ARRAY
15164: PPUSH
15165: LD_INT 1
15167: PPUSH
15168: CALL_OW 234
// end ;
15172: PPOPN 1
15174: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15175: LD_EXP 16
15179: PUSH
15180: LD_EXP 58
15184: AND
15185: IFFALSE 15326
15187: GO 15189
15189: DISABLE
15190: LD_INT 0
15192: PPUSH
15193: PPUSH
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15195: LD_ADDR_VAR 0 3
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 25
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 3
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15326
// un := tmp [ rand ( 1 , tmp ) ] ;
15240: LD_ADDR_VAR 0 2
15244: PUSH
15245: LD_VAR 0 3
15249: PUSH
15250: LD_INT 1
15252: PPUSH
15253: LD_VAR 0 3
15257: PPUSH
15258: CALL_OW 12
15262: ARRAY
15263: ST_TO_ADDR
// if Crawls ( un ) then
15264: LD_VAR 0 2
15268: PPUSH
15269: CALL_OW 318
15273: IFFALSE 15284
// ComWalk ( un ) ;
15275: LD_VAR 0 2
15279: PPUSH
15280: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15284: LD_VAR 0 2
15288: PPUSH
15289: LD_INT 9
15291: PPUSH
15292: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15296: LD_INT 28
15298: PPUSH
15299: LD_OWVAR 2
15303: PPUSH
15304: LD_INT 2
15306: PPUSH
15307: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15311: LD_INT 29
15313: PPUSH
15314: LD_OWVAR 2
15318: PPUSH
15319: LD_INT 2
15321: PPUSH
15322: CALL_OW 322
// end ;
15326: PPOPN 3
15328: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15329: LD_EXP 16
15333: PUSH
15334: LD_EXP 59
15338: AND
15339: IFFALSE 15450
15341: GO 15343
15343: DISABLE
15344: LD_INT 0
15346: PPUSH
15347: PPUSH
15348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15349: LD_ADDR_VAR 0 3
15353: PUSH
15354: LD_INT 22
15356: PUSH
15357: LD_OWVAR 2
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 25
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PPUSH
15380: CALL_OW 69
15384: ST_TO_ADDR
// if not tmp then
15385: LD_VAR 0 3
15389: NOT
15390: IFFALSE 15394
// exit ;
15392: GO 15450
// un := tmp [ rand ( 1 , tmp ) ] ;
15394: LD_ADDR_VAR 0 2
15398: PUSH
15399: LD_VAR 0 3
15403: PUSH
15404: LD_INT 1
15406: PPUSH
15407: LD_VAR 0 3
15411: PPUSH
15412: CALL_OW 12
15416: ARRAY
15417: ST_TO_ADDR
// if Crawls ( un ) then
15418: LD_VAR 0 2
15422: PPUSH
15423: CALL_OW 318
15427: IFFALSE 15438
// ComWalk ( un ) ;
15429: LD_VAR 0 2
15433: PPUSH
15434: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15438: LD_VAR 0 2
15442: PPUSH
15443: LD_INT 8
15445: PPUSH
15446: CALL_OW 336
// end ;
15450: PPOPN 3
15452: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15453: LD_EXP 16
15457: PUSH
15458: LD_EXP 60
15462: AND
15463: IFFALSE 15607
15465: GO 15467
15467: DISABLE
15468: LD_INT 0
15470: PPUSH
15471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15472: LD_ADDR_VAR 0 2
15476: PUSH
15477: LD_INT 22
15479: PUSH
15480: LD_OWVAR 2
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 21
15491: PUSH
15492: LD_INT 2
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 2
15501: PUSH
15502: LD_INT 34
15504: PUSH
15505: LD_INT 12
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 34
15514: PUSH
15515: LD_INT 51
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 34
15524: PUSH
15525: LD_INT 32
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: PPUSH
15543: CALL_OW 69
15547: ST_TO_ADDR
// if not tmp then
15548: LD_VAR 0 2
15552: NOT
15553: IFFALSE 15557
// exit ;
15555: GO 15607
// for i in tmp do
15557: LD_ADDR_VAR 0 1
15561: PUSH
15562: LD_VAR 0 2
15566: PUSH
15567: FOR_IN
15568: IFFALSE 15605
// if GetCargo ( i , mat_artifact ) = 0 then
15570: LD_VAR 0 1
15574: PPUSH
15575: LD_INT 4
15577: PPUSH
15578: CALL_OW 289
15582: PUSH
15583: LD_INT 0
15585: EQUAL
15586: IFFALSE 15603
// SetCargo ( i , mat_siberit , 100 ) ;
15588: LD_VAR 0 1
15592: PPUSH
15593: LD_INT 3
15595: PPUSH
15596: LD_INT 100
15598: PPUSH
15599: CALL_OW 290
15603: GO 15567
15605: POP
15606: POP
// end ;
15607: PPOPN 2
15609: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15610: LD_EXP 16
15614: PUSH
15615: LD_EXP 61
15619: AND
15620: IFFALSE 15803
15622: GO 15624
15624: DISABLE
15625: LD_INT 0
15627: PPUSH
15628: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15629: LD_ADDR_VAR 0 2
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_OWVAR 2
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PPUSH
15646: CALL_OW 69
15650: ST_TO_ADDR
// if not tmp then
15651: LD_VAR 0 2
15655: NOT
15656: IFFALSE 15660
// exit ;
15658: GO 15803
// for i := 1 to 2 do
15660: LD_ADDR_VAR 0 1
15664: PUSH
15665: DOUBLE
15666: LD_INT 1
15668: DEC
15669: ST_TO_ADDR
15670: LD_INT 2
15672: PUSH
15673: FOR_TO
15674: IFFALSE 15801
// begin uc_side := your_side ;
15676: LD_ADDR_OWVAR 20
15680: PUSH
15681: LD_OWVAR 2
15685: ST_TO_ADDR
// uc_nation := nation_american ;
15686: LD_ADDR_OWVAR 21
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// vc_chassis := us_morphling ;
15694: LD_ADDR_OWVAR 37
15698: PUSH
15699: LD_INT 5
15701: ST_TO_ADDR
// vc_engine := engine_siberite ;
15702: LD_ADDR_OWVAR 39
15706: PUSH
15707: LD_INT 3
15709: ST_TO_ADDR
// vc_control := control_computer ;
15710: LD_ADDR_OWVAR 38
15714: PUSH
15715: LD_INT 3
15717: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15718: LD_ADDR_OWVAR 40
15722: PUSH
15723: LD_INT 10
15725: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15726: LD_VAR 0 2
15730: PUSH
15731: LD_INT 1
15733: ARRAY
15734: PPUSH
15735: CALL_OW 310
15739: NOT
15740: IFFALSE 15787
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15742: CALL_OW 45
15746: PPUSH
15747: LD_VAR 0 2
15751: PUSH
15752: LD_INT 1
15754: ARRAY
15755: PPUSH
15756: CALL_OW 250
15760: PPUSH
15761: LD_VAR 0 2
15765: PUSH
15766: LD_INT 1
15768: ARRAY
15769: PPUSH
15770: CALL_OW 251
15774: PPUSH
15775: LD_INT 12
15777: PPUSH
15778: LD_INT 1
15780: PPUSH
15781: CALL_OW 50
15785: GO 15799
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15787: CALL_OW 45
15791: PPUSH
15792: LD_INT 1
15794: PPUSH
15795: CALL_OW 51
// end ;
15799: GO 15673
15801: POP
15802: POP
// end ;
15803: PPOPN 2
15805: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15806: LD_EXP 16
15810: PUSH
15811: LD_EXP 62
15815: AND
15816: IFFALSE 16038
15818: GO 15820
15820: DISABLE
15821: LD_INT 0
15823: PPUSH
15824: PPUSH
15825: PPUSH
15826: PPUSH
15827: PPUSH
15828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15829: LD_ADDR_VAR 0 6
15833: PUSH
15834: LD_INT 22
15836: PUSH
15837: LD_OWVAR 2
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 21
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 3
15858: PUSH
15859: LD_INT 23
15861: PUSH
15862: LD_INT 0
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: PPUSH
15878: CALL_OW 69
15882: ST_TO_ADDR
// if not tmp then
15883: LD_VAR 0 6
15887: NOT
15888: IFFALSE 15892
// exit ;
15890: GO 16038
// s1 := rand ( 1 , 4 ) ;
15892: LD_ADDR_VAR 0 2
15896: PUSH
15897: LD_INT 1
15899: PPUSH
15900: LD_INT 4
15902: PPUSH
15903: CALL_OW 12
15907: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15908: LD_ADDR_VAR 0 4
15912: PUSH
15913: LD_VAR 0 6
15917: PUSH
15918: LD_INT 1
15920: ARRAY
15921: PPUSH
15922: LD_VAR 0 2
15926: PPUSH
15927: CALL_OW 259
15931: ST_TO_ADDR
// if s1 = 1 then
15932: LD_VAR 0 2
15936: PUSH
15937: LD_INT 1
15939: EQUAL
15940: IFFALSE 15960
// s2 := rand ( 2 , 4 ) else
15942: LD_ADDR_VAR 0 3
15946: PUSH
15947: LD_INT 2
15949: PPUSH
15950: LD_INT 4
15952: PPUSH
15953: CALL_OW 12
15957: ST_TO_ADDR
15958: GO 15968
// s2 := 1 ;
15960: LD_ADDR_VAR 0 3
15964: PUSH
15965: LD_INT 1
15967: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15968: LD_ADDR_VAR 0 5
15972: PUSH
15973: LD_VAR 0 6
15977: PUSH
15978: LD_INT 1
15980: ARRAY
15981: PPUSH
15982: LD_VAR 0 3
15986: PPUSH
15987: CALL_OW 259
15991: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15992: LD_VAR 0 6
15996: PUSH
15997: LD_INT 1
15999: ARRAY
16000: PPUSH
16001: LD_VAR 0 2
16005: PPUSH
16006: LD_VAR 0 5
16010: PPUSH
16011: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16015: LD_VAR 0 6
16019: PUSH
16020: LD_INT 1
16022: ARRAY
16023: PPUSH
16024: LD_VAR 0 3
16028: PPUSH
16029: LD_VAR 0 4
16033: PPUSH
16034: CALL_OW 237
// end ;
16038: PPOPN 6
16040: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16041: LD_EXP 16
16045: PUSH
16046: LD_EXP 63
16050: AND
16051: IFFALSE 16130
16053: GO 16055
16055: DISABLE
16056: LD_INT 0
16058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16059: LD_ADDR_VAR 0 1
16063: PUSH
16064: LD_INT 22
16066: PUSH
16067: LD_OWVAR 2
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 30
16078: PUSH
16079: LD_INT 3
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PPUSH
16090: CALL_OW 69
16094: ST_TO_ADDR
// if not tmp then
16095: LD_VAR 0 1
16099: NOT
16100: IFFALSE 16104
// exit ;
16102: GO 16130
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16104: LD_VAR 0 1
16108: PUSH
16109: LD_INT 1
16111: PPUSH
16112: LD_VAR 0 1
16116: PPUSH
16117: CALL_OW 12
16121: ARRAY
16122: PPUSH
16123: LD_INT 1
16125: PPUSH
16126: CALL_OW 234
// end ;
16130: PPOPN 1
16132: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16133: LD_EXP 16
16137: PUSH
16138: LD_EXP 64
16142: AND
16143: IFFALSE 16255
16145: GO 16147
16147: DISABLE
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16152: LD_ADDR_VAR 0 2
16156: PUSH
16157: LD_INT 22
16159: PUSH
16160: LD_OWVAR 2
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 2
16171: PUSH
16172: LD_INT 30
16174: PUSH
16175: LD_INT 27
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 30
16184: PUSH
16185: LD_INT 26
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 30
16194: PUSH
16195: LD_INT 28
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PPUSH
16212: CALL_OW 69
16216: ST_TO_ADDR
// if not tmp then
16217: LD_VAR 0 2
16221: NOT
16222: IFFALSE 16226
// exit ;
16224: GO 16255
// for i in tmp do
16226: LD_ADDR_VAR 0 1
16230: PUSH
16231: LD_VAR 0 2
16235: PUSH
16236: FOR_IN
16237: IFFALSE 16253
// SetLives ( i , 1 ) ;
16239: LD_VAR 0 1
16243: PPUSH
16244: LD_INT 1
16246: PPUSH
16247: CALL_OW 234
16251: GO 16236
16253: POP
16254: POP
// end ;
16255: PPOPN 2
16257: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16258: LD_EXP 16
16262: PUSH
16263: LD_EXP 65
16267: AND
16268: IFFALSE 16555
16270: GO 16272
16272: DISABLE
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
16277: PPUSH
// begin i := rand ( 1 , 7 ) ;
16278: LD_ADDR_VAR 0 1
16282: PUSH
16283: LD_INT 1
16285: PPUSH
16286: LD_INT 7
16288: PPUSH
16289: CALL_OW 12
16293: ST_TO_ADDR
// case i of 1 :
16294: LD_VAR 0 1
16298: PUSH
16299: LD_INT 1
16301: DOUBLE
16302: EQUAL
16303: IFTRUE 16307
16305: GO 16317
16307: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16308: LD_STRING earthquake(getX(game), 0, 32)
16310: PPUSH
16311: CALL_OW 559
16315: GO 16555
16317: LD_INT 2
16319: DOUBLE
16320: EQUAL
16321: IFTRUE 16325
16323: GO 16339
16325: POP
// begin ToLua ( displayStucuk(); ) ;
16326: LD_STRING displayStucuk();
16328: PPUSH
16329: CALL_OW 559
// ResetFog ;
16333: CALL_OW 335
// end ; 3 :
16337: GO 16555
16339: LD_INT 3
16341: DOUBLE
16342: EQUAL
16343: IFTRUE 16347
16345: GO 16451
16347: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16348: LD_ADDR_VAR 0 2
16352: PUSH
16353: LD_INT 22
16355: PUSH
16356: LD_OWVAR 2
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 25
16367: PUSH
16368: LD_INT 1
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PPUSH
16379: CALL_OW 69
16383: ST_TO_ADDR
// if not tmp then
16384: LD_VAR 0 2
16388: NOT
16389: IFFALSE 16393
// exit ;
16391: GO 16555
// un := tmp [ rand ( 1 , tmp ) ] ;
16393: LD_ADDR_VAR 0 3
16397: PUSH
16398: LD_VAR 0 2
16402: PUSH
16403: LD_INT 1
16405: PPUSH
16406: LD_VAR 0 2
16410: PPUSH
16411: CALL_OW 12
16415: ARRAY
16416: ST_TO_ADDR
// if Crawls ( un ) then
16417: LD_VAR 0 3
16421: PPUSH
16422: CALL_OW 318
16426: IFFALSE 16437
// ComWalk ( un ) ;
16428: LD_VAR 0 3
16432: PPUSH
16433: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16437: LD_VAR 0 3
16441: PPUSH
16442: LD_INT 8
16444: PPUSH
16445: CALL_OW 336
// end ; 4 :
16449: GO 16555
16451: LD_INT 4
16453: DOUBLE
16454: EQUAL
16455: IFTRUE 16459
16457: GO 16533
16459: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16460: LD_ADDR_VAR 0 2
16464: PUSH
16465: LD_INT 22
16467: PUSH
16468: LD_OWVAR 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 30
16479: PUSH
16480: LD_INT 29
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PPUSH
16491: CALL_OW 69
16495: ST_TO_ADDR
// if not tmp then
16496: LD_VAR 0 2
16500: NOT
16501: IFFALSE 16505
// exit ;
16503: GO 16555
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16505: LD_VAR 0 2
16509: PUSH
16510: LD_INT 1
16512: ARRAY
16513: PPUSH
16514: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16518: LD_VAR 0 2
16522: PUSH
16523: LD_INT 1
16525: ARRAY
16526: PPUSH
16527: CALL_OW 65
// end ; 5 .. 7 :
16531: GO 16555
16533: LD_INT 5
16535: DOUBLE
16536: GREATEREQUAL
16537: IFFALSE 16545
16539: LD_INT 7
16541: DOUBLE
16542: LESSEQUAL
16543: IFTRUE 16547
16545: GO 16554
16547: POP
// StreamSibBomb ; end ;
16548: CALL 12792 0 0
16552: GO 16555
16554: POP
// end ;
16555: PPOPN 3
16557: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16558: LD_EXP 16
16562: PUSH
16563: LD_EXP 66
16567: AND
16568: IFFALSE 16724
16570: GO 16572
16572: DISABLE
16573: LD_INT 0
16575: PPUSH
16576: PPUSH
16577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16578: LD_ADDR_VAR 0 2
16582: PUSH
16583: LD_INT 81
16585: PUSH
16586: LD_OWVAR 2
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 2
16597: PUSH
16598: LD_INT 21
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 21
16610: PUSH
16611: LD_INT 2
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PPUSH
16627: CALL_OW 69
16631: ST_TO_ADDR
// if not tmp then
16632: LD_VAR 0 2
16636: NOT
16637: IFFALSE 16641
// exit ;
16639: GO 16724
// p := 0 ;
16641: LD_ADDR_VAR 0 3
16645: PUSH
16646: LD_INT 0
16648: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16649: LD_INT 35
16651: PPUSH
16652: CALL_OW 67
// p := p + 1 ;
16656: LD_ADDR_VAR 0 3
16660: PUSH
16661: LD_VAR 0 3
16665: PUSH
16666: LD_INT 1
16668: PLUS
16669: ST_TO_ADDR
// for i in tmp do
16670: LD_ADDR_VAR 0 1
16674: PUSH
16675: LD_VAR 0 2
16679: PUSH
16680: FOR_IN
16681: IFFALSE 16712
// if GetLives ( i ) < 1000 then
16683: LD_VAR 0 1
16687: PPUSH
16688: CALL_OW 256
16692: PUSH
16693: LD_INT 1000
16695: LESS
16696: IFFALSE 16710
// SetLives ( i , 1000 ) ;
16698: LD_VAR 0 1
16702: PPUSH
16703: LD_INT 1000
16705: PPUSH
16706: CALL_OW 234
16710: GO 16680
16712: POP
16713: POP
// until p > 20 ;
16714: LD_VAR 0 3
16718: PUSH
16719: LD_INT 20
16721: GREATER
16722: IFFALSE 16649
// end ;
16724: PPOPN 3
16726: END
// every 0 0$1 trigger StreamModeActive and sTime do
16727: LD_EXP 16
16731: PUSH
16732: LD_EXP 67
16736: AND
16737: IFFALSE 16772
16739: GO 16741
16741: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16742: LD_INT 28
16744: PPUSH
16745: LD_OWVAR 2
16749: PPUSH
16750: LD_INT 2
16752: PPUSH
16753: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16757: LD_INT 30
16759: PPUSH
16760: LD_OWVAR 2
16764: PPUSH
16765: LD_INT 2
16767: PPUSH
16768: CALL_OW 322
// end ;
16772: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16773: LD_EXP 16
16777: PUSH
16778: LD_EXP 68
16782: AND
16783: IFFALSE 16904
16785: GO 16787
16787: DISABLE
16788: LD_INT 0
16790: PPUSH
16791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16792: LD_ADDR_VAR 0 2
16796: PUSH
16797: LD_INT 22
16799: PUSH
16800: LD_OWVAR 2
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 21
16811: PUSH
16812: LD_INT 1
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 3
16821: PUSH
16822: LD_INT 23
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: LIST
16840: PPUSH
16841: CALL_OW 69
16845: ST_TO_ADDR
// if not tmp then
16846: LD_VAR 0 2
16850: NOT
16851: IFFALSE 16855
// exit ;
16853: GO 16904
// for i in tmp do
16855: LD_ADDR_VAR 0 1
16859: PUSH
16860: LD_VAR 0 2
16864: PUSH
16865: FOR_IN
16866: IFFALSE 16902
// begin if Crawls ( i ) then
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL_OW 318
16877: IFFALSE 16888
// ComWalk ( i ) ;
16879: LD_VAR 0 1
16883: PPUSH
16884: CALL_OW 138
// SetClass ( i , 2 ) ;
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 2
16895: PPUSH
16896: CALL_OW 336
// end ;
16900: GO 16865
16902: POP
16903: POP
// end ;
16904: PPOPN 2
16906: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16907: LD_EXP 16
16911: PUSH
16912: LD_EXP 69
16916: AND
16917: IFFALSE 17205
16919: GO 16921
16921: DISABLE
16922: LD_INT 0
16924: PPUSH
16925: PPUSH
16926: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16927: LD_OWVAR 2
16931: PPUSH
16932: LD_INT 9
16934: PPUSH
16935: LD_INT 1
16937: PPUSH
16938: LD_INT 1
16940: PPUSH
16941: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16945: LD_INT 9
16947: PPUSH
16948: LD_OWVAR 2
16952: PPUSH
16953: CALL_OW 343
// uc_side := 9 ;
16957: LD_ADDR_OWVAR 20
16961: PUSH
16962: LD_INT 9
16964: ST_TO_ADDR
// uc_nation := 2 ;
16965: LD_ADDR_OWVAR 21
16969: PUSH
16970: LD_INT 2
16972: ST_TO_ADDR
// hc_name := Dark Warrior ;
16973: LD_ADDR_OWVAR 26
16977: PUSH
16978: LD_STRING Dark Warrior
16980: ST_TO_ADDR
// hc_gallery :=  ;
16981: LD_ADDR_OWVAR 33
16985: PUSH
16986: LD_STRING 
16988: ST_TO_ADDR
// hc_noskilllimit := true ;
16989: LD_ADDR_OWVAR 76
16993: PUSH
16994: LD_INT 1
16996: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16997: LD_ADDR_OWVAR 31
17001: PUSH
17002: LD_INT 30
17004: PUSH
17005: LD_INT 30
17007: PUSH
17008: LD_INT 30
17010: PUSH
17011: LD_INT 30
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: ST_TO_ADDR
// un := CreateHuman ;
17020: LD_ADDR_VAR 0 3
17024: PUSH
17025: CALL_OW 44
17029: ST_TO_ADDR
// hc_noskilllimit := false ;
17030: LD_ADDR_OWVAR 76
17034: PUSH
17035: LD_INT 0
17037: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17038: LD_VAR 0 3
17042: PPUSH
17043: LD_INT 1
17045: PPUSH
17046: CALL_OW 51
// ToLua ( playRanger() ) ;
17050: LD_STRING playRanger()
17052: PPUSH
17053: CALL_OW 559
// p := 0 ;
17057: LD_ADDR_VAR 0 2
17061: PUSH
17062: LD_INT 0
17064: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17065: LD_INT 35
17067: PPUSH
17068: CALL_OW 67
// p := p + 1 ;
17072: LD_ADDR_VAR 0 2
17076: PUSH
17077: LD_VAR 0 2
17081: PUSH
17082: LD_INT 1
17084: PLUS
17085: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17086: LD_VAR 0 3
17090: PPUSH
17091: CALL_OW 256
17095: PUSH
17096: LD_INT 1000
17098: LESS
17099: IFFALSE 17113
// SetLives ( un , 1000 ) ;
17101: LD_VAR 0 3
17105: PPUSH
17106: LD_INT 1000
17108: PPUSH
17109: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17113: LD_VAR 0 3
17117: PPUSH
17118: LD_INT 81
17120: PUSH
17121: LD_OWVAR 2
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 91
17132: PUSH
17133: LD_VAR 0 3
17137: PUSH
17138: LD_INT 30
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: LIST
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: PPUSH
17155: LD_VAR 0 3
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17169: LD_VAR 0 2
17173: PUSH
17174: LD_INT 80
17176: GREATER
17177: PUSH
17178: LD_VAR 0 3
17182: PPUSH
17183: CALL_OW 301
17187: OR
17188: IFFALSE 17065
// if un then
17190: LD_VAR 0 3
17194: IFFALSE 17205
// RemoveUnit ( un ) ;
17196: LD_VAR 0 3
17200: PPUSH
17201: CALL_OW 64
// end ;
17205: PPOPN 3
17207: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17208: LD_EXP 70
17212: IFFALSE 17328
17214: GO 17216
17216: DISABLE
17217: LD_INT 0
17219: PPUSH
17220: PPUSH
17221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_INT 81
17229: PUSH
17230: LD_OWVAR 2
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 21
17241: PUSH
17242: LD_INT 1
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PPUSH
17253: CALL_OW 69
17257: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17258: LD_STRING playComputer()
17260: PPUSH
17261: CALL_OW 559
// if not tmp then
17265: LD_VAR 0 2
17269: NOT
17270: IFFALSE 17274
// exit ;
17272: GO 17328
// for i in tmp do
17274: LD_ADDR_VAR 0 1
17278: PUSH
17279: LD_VAR 0 2
17283: PUSH
17284: FOR_IN
17285: IFFALSE 17326
// for j := 1 to 4 do
17287: LD_ADDR_VAR 0 3
17291: PUSH
17292: DOUBLE
17293: LD_INT 1
17295: DEC
17296: ST_TO_ADDR
17297: LD_INT 4
17299: PUSH
17300: FOR_TO
17301: IFFALSE 17322
// SetSkill ( i , j , 10 ) ;
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_VAR 0 3
17312: PPUSH
17313: LD_INT 10
17315: PPUSH
17316: CALL_OW 237
17320: GO 17300
17322: POP
17323: POP
17324: GO 17284
17326: POP
17327: POP
// end ;
17328: PPOPN 3
17330: END
// every 0 0$1 trigger s30 do var i , tmp ;
17331: LD_EXP 71
17335: IFFALSE 17404
17337: GO 17339
17339: DISABLE
17340: LD_INT 0
17342: PPUSH
17343: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17344: LD_ADDR_VAR 0 2
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_OWVAR 2
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 69
17365: ST_TO_ADDR
// if not tmp then
17366: LD_VAR 0 2
17370: NOT
17371: IFFALSE 17375
// exit ;
17373: GO 17404
// for i in tmp do
17375: LD_ADDR_VAR 0 1
17379: PUSH
17380: LD_VAR 0 2
17384: PUSH
17385: FOR_IN
17386: IFFALSE 17402
// SetLives ( i , 300 ) ;
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 300
17395: PPUSH
17396: CALL_OW 234
17400: GO 17385
17402: POP
17403: POP
// end ;
17404: PPOPN 2
17406: END
// every 0 0$1 trigger s60 do var i , tmp ;
17407: LD_EXP 72
17411: IFFALSE 17480
17413: GO 17415
17415: DISABLE
17416: LD_INT 0
17418: PPUSH
17419: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17420: LD_ADDR_VAR 0 2
17424: PUSH
17425: LD_INT 22
17427: PUSH
17428: LD_OWVAR 2
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: ST_TO_ADDR
// if not tmp then
17442: LD_VAR 0 2
17446: NOT
17447: IFFALSE 17451
// exit ;
17449: GO 17480
// for i in tmp do
17451: LD_ADDR_VAR 0 1
17455: PUSH
17456: LD_VAR 0 2
17460: PUSH
17461: FOR_IN
17462: IFFALSE 17478
// SetLives ( i , 600 ) ;
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_INT 600
17471: PPUSH
17472: CALL_OW 234
17476: GO 17461
17478: POP
17479: POP
// end ;
17480: PPOPN 2
17482: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17483: LD_INT 0
17485: PPUSH
// case cmd of 301 :
17486: LD_VAR 0 1
17490: PUSH
17491: LD_INT 301
17493: DOUBLE
17494: EQUAL
17495: IFTRUE 17499
17497: GO 17531
17499: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17500: LD_VAR 0 6
17504: PPUSH
17505: LD_VAR 0 7
17509: PPUSH
17510: LD_VAR 0 8
17514: PPUSH
17515: LD_VAR 0 4
17519: PPUSH
17520: LD_VAR 0 5
17524: PPUSH
17525: CALL 18740 0 5
17529: GO 17652
17531: LD_INT 302
17533: DOUBLE
17534: EQUAL
17535: IFTRUE 17539
17537: GO 17576
17539: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17540: LD_VAR 0 6
17544: PPUSH
17545: LD_VAR 0 7
17549: PPUSH
17550: LD_VAR 0 8
17554: PPUSH
17555: LD_VAR 0 9
17559: PPUSH
17560: LD_VAR 0 4
17564: PPUSH
17565: LD_VAR 0 5
17569: PPUSH
17570: CALL 18831 0 6
17574: GO 17652
17576: LD_INT 303
17578: DOUBLE
17579: EQUAL
17580: IFTRUE 17584
17582: GO 17621
17584: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17585: LD_VAR 0 6
17589: PPUSH
17590: LD_VAR 0 7
17594: PPUSH
17595: LD_VAR 0 8
17599: PPUSH
17600: LD_VAR 0 9
17604: PPUSH
17605: LD_VAR 0 4
17609: PPUSH
17610: LD_VAR 0 5
17614: PPUSH
17615: CALL 17657 0 6
17619: GO 17652
17621: LD_INT 304
17623: DOUBLE
17624: EQUAL
17625: IFTRUE 17629
17627: GO 17651
17629: POP
// hHackTeleport ( unit , x , y ) ; end ;
17630: LD_VAR 0 2
17634: PPUSH
17635: LD_VAR 0 4
17639: PPUSH
17640: LD_VAR 0 5
17644: PPUSH
17645: CALL 19424 0 3
17649: GO 17652
17651: POP
// end ;
17652: LD_VAR 0 12
17656: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17657: LD_INT 0
17659: PPUSH
17660: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17661: LD_VAR 0 1
17665: PUSH
17666: LD_INT 1
17668: LESS
17669: PUSH
17670: LD_VAR 0 1
17674: PUSH
17675: LD_INT 3
17677: GREATER
17678: OR
17679: PUSH
17680: LD_VAR 0 5
17684: PPUSH
17685: LD_VAR 0 6
17689: PPUSH
17690: CALL_OW 428
17694: OR
17695: IFFALSE 17699
// exit ;
17697: GO 18427
// uc_side := your_side ;
17699: LD_ADDR_OWVAR 20
17703: PUSH
17704: LD_OWVAR 2
17708: ST_TO_ADDR
// uc_nation := nation ;
17709: LD_ADDR_OWVAR 21
17713: PUSH
17714: LD_VAR 0 1
17718: ST_TO_ADDR
// bc_level = 1 ;
17719: LD_ADDR_OWVAR 43
17723: PUSH
17724: LD_INT 1
17726: ST_TO_ADDR
// case btype of 1 :
17727: LD_VAR 0 2
17731: PUSH
17732: LD_INT 1
17734: DOUBLE
17735: EQUAL
17736: IFTRUE 17740
17738: GO 17751
17740: POP
// bc_type := b_depot ; 2 :
17741: LD_ADDR_OWVAR 42
17745: PUSH
17746: LD_INT 0
17748: ST_TO_ADDR
17749: GO 18371
17751: LD_INT 2
17753: DOUBLE
17754: EQUAL
17755: IFTRUE 17759
17757: GO 17770
17759: POP
// bc_type := b_warehouse ; 3 :
17760: LD_ADDR_OWVAR 42
17764: PUSH
17765: LD_INT 1
17767: ST_TO_ADDR
17768: GO 18371
17770: LD_INT 3
17772: DOUBLE
17773: EQUAL
17774: IFTRUE 17778
17776: GO 17789
17778: POP
// bc_type := b_lab ; 4 .. 9 :
17779: LD_ADDR_OWVAR 42
17783: PUSH
17784: LD_INT 6
17786: ST_TO_ADDR
17787: GO 18371
17789: LD_INT 4
17791: DOUBLE
17792: GREATEREQUAL
17793: IFFALSE 17801
17795: LD_INT 9
17797: DOUBLE
17798: LESSEQUAL
17799: IFTRUE 17803
17801: GO 17863
17803: POP
// begin bc_type := b_lab_half ;
17804: LD_ADDR_OWVAR 42
17808: PUSH
17809: LD_INT 7
17811: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17812: LD_ADDR_OWVAR 44
17816: PUSH
17817: LD_INT 10
17819: PUSH
17820: LD_INT 11
17822: PUSH
17823: LD_INT 12
17825: PUSH
17826: LD_INT 15
17828: PUSH
17829: LD_INT 14
17831: PUSH
17832: LD_INT 13
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: PUSH
17843: LD_VAR 0 2
17847: PUSH
17848: LD_INT 3
17850: MINUS
17851: ARRAY
17852: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17853: LD_ADDR_OWVAR 45
17857: PUSH
17858: LD_INT 9
17860: ST_TO_ADDR
// end ; 10 .. 13 :
17861: GO 18371
17863: LD_INT 10
17865: DOUBLE
17866: GREATEREQUAL
17867: IFFALSE 17875
17869: LD_INT 13
17871: DOUBLE
17872: LESSEQUAL
17873: IFTRUE 17877
17875: GO 17954
17877: POP
// begin bc_type := b_lab_full ;
17878: LD_ADDR_OWVAR 42
17882: PUSH
17883: LD_INT 8
17885: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17886: LD_ADDR_OWVAR 44
17890: PUSH
17891: LD_INT 10
17893: PUSH
17894: LD_INT 12
17896: PUSH
17897: LD_INT 14
17899: PUSH
17900: LD_INT 13
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: PUSH
17909: LD_VAR 0 2
17913: PUSH
17914: LD_INT 9
17916: MINUS
17917: ARRAY
17918: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17919: LD_ADDR_OWVAR 45
17923: PUSH
17924: LD_INT 11
17926: PUSH
17927: LD_INT 15
17929: PUSH
17930: LD_INT 12
17932: PUSH
17933: LD_INT 15
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: PUSH
17942: LD_VAR 0 2
17946: PUSH
17947: LD_INT 9
17949: MINUS
17950: ARRAY
17951: ST_TO_ADDR
// end ; 14 :
17952: GO 18371
17954: LD_INT 14
17956: DOUBLE
17957: EQUAL
17958: IFTRUE 17962
17960: GO 17973
17962: POP
// bc_type := b_workshop ; 15 :
17963: LD_ADDR_OWVAR 42
17967: PUSH
17968: LD_INT 2
17970: ST_TO_ADDR
17971: GO 18371
17973: LD_INT 15
17975: DOUBLE
17976: EQUAL
17977: IFTRUE 17981
17979: GO 17992
17981: POP
// bc_type := b_factory ; 16 :
17982: LD_ADDR_OWVAR 42
17986: PUSH
17987: LD_INT 3
17989: ST_TO_ADDR
17990: GO 18371
17992: LD_INT 16
17994: DOUBLE
17995: EQUAL
17996: IFTRUE 18000
17998: GO 18011
18000: POP
// bc_type := b_ext_gun ; 17 :
18001: LD_ADDR_OWVAR 42
18005: PUSH
18006: LD_INT 17
18008: ST_TO_ADDR
18009: GO 18371
18011: LD_INT 17
18013: DOUBLE
18014: EQUAL
18015: IFTRUE 18019
18017: GO 18047
18019: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18020: LD_ADDR_OWVAR 42
18024: PUSH
18025: LD_INT 19
18027: PUSH
18028: LD_INT 23
18030: PUSH
18031: LD_INT 19
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: LIST
18038: PUSH
18039: LD_VAR 0 1
18043: ARRAY
18044: ST_TO_ADDR
18045: GO 18371
18047: LD_INT 18
18049: DOUBLE
18050: EQUAL
18051: IFTRUE 18055
18053: GO 18066
18055: POP
// bc_type := b_ext_radar ; 19 :
18056: LD_ADDR_OWVAR 42
18060: PUSH
18061: LD_INT 20
18063: ST_TO_ADDR
18064: GO 18371
18066: LD_INT 19
18068: DOUBLE
18069: EQUAL
18070: IFTRUE 18074
18072: GO 18085
18074: POP
// bc_type := b_ext_radio ; 20 :
18075: LD_ADDR_OWVAR 42
18079: PUSH
18080: LD_INT 22
18082: ST_TO_ADDR
18083: GO 18371
18085: LD_INT 20
18087: DOUBLE
18088: EQUAL
18089: IFTRUE 18093
18091: GO 18104
18093: POP
// bc_type := b_ext_siberium ; 21 :
18094: LD_ADDR_OWVAR 42
18098: PUSH
18099: LD_INT 21
18101: ST_TO_ADDR
18102: GO 18371
18104: LD_INT 21
18106: DOUBLE
18107: EQUAL
18108: IFTRUE 18112
18110: GO 18123
18112: POP
// bc_type := b_ext_computer ; 22 :
18113: LD_ADDR_OWVAR 42
18117: PUSH
18118: LD_INT 24
18120: ST_TO_ADDR
18121: GO 18371
18123: LD_INT 22
18125: DOUBLE
18126: EQUAL
18127: IFTRUE 18131
18129: GO 18142
18131: POP
// bc_type := b_ext_track ; 23 :
18132: LD_ADDR_OWVAR 42
18136: PUSH
18137: LD_INT 16
18139: ST_TO_ADDR
18140: GO 18371
18142: LD_INT 23
18144: DOUBLE
18145: EQUAL
18146: IFTRUE 18150
18148: GO 18161
18150: POP
// bc_type := b_ext_laser ; 24 :
18151: LD_ADDR_OWVAR 42
18155: PUSH
18156: LD_INT 25
18158: ST_TO_ADDR
18159: GO 18371
18161: LD_INT 24
18163: DOUBLE
18164: EQUAL
18165: IFTRUE 18169
18167: GO 18180
18169: POP
// bc_type := b_control_tower ; 25 :
18170: LD_ADDR_OWVAR 42
18174: PUSH
18175: LD_INT 36
18177: ST_TO_ADDR
18178: GO 18371
18180: LD_INT 25
18182: DOUBLE
18183: EQUAL
18184: IFTRUE 18188
18186: GO 18199
18188: POP
// bc_type := b_breastwork ; 26 :
18189: LD_ADDR_OWVAR 42
18193: PUSH
18194: LD_INT 31
18196: ST_TO_ADDR
18197: GO 18371
18199: LD_INT 26
18201: DOUBLE
18202: EQUAL
18203: IFTRUE 18207
18205: GO 18218
18207: POP
// bc_type := b_bunker ; 27 :
18208: LD_ADDR_OWVAR 42
18212: PUSH
18213: LD_INT 32
18215: ST_TO_ADDR
18216: GO 18371
18218: LD_INT 27
18220: DOUBLE
18221: EQUAL
18222: IFTRUE 18226
18224: GO 18237
18226: POP
// bc_type := b_turret ; 28 :
18227: LD_ADDR_OWVAR 42
18231: PUSH
18232: LD_INT 33
18234: ST_TO_ADDR
18235: GO 18371
18237: LD_INT 28
18239: DOUBLE
18240: EQUAL
18241: IFTRUE 18245
18243: GO 18256
18245: POP
// bc_type := b_armoury ; 29 :
18246: LD_ADDR_OWVAR 42
18250: PUSH
18251: LD_INT 4
18253: ST_TO_ADDR
18254: GO 18371
18256: LD_INT 29
18258: DOUBLE
18259: EQUAL
18260: IFTRUE 18264
18262: GO 18275
18264: POP
// bc_type := b_barracks ; 30 :
18265: LD_ADDR_OWVAR 42
18269: PUSH
18270: LD_INT 5
18272: ST_TO_ADDR
18273: GO 18371
18275: LD_INT 30
18277: DOUBLE
18278: EQUAL
18279: IFTRUE 18283
18281: GO 18294
18283: POP
// bc_type := b_solar_power ; 31 :
18284: LD_ADDR_OWVAR 42
18288: PUSH
18289: LD_INT 27
18291: ST_TO_ADDR
18292: GO 18371
18294: LD_INT 31
18296: DOUBLE
18297: EQUAL
18298: IFTRUE 18302
18300: GO 18313
18302: POP
// bc_type := b_oil_power ; 32 :
18303: LD_ADDR_OWVAR 42
18307: PUSH
18308: LD_INT 26
18310: ST_TO_ADDR
18311: GO 18371
18313: LD_INT 32
18315: DOUBLE
18316: EQUAL
18317: IFTRUE 18321
18319: GO 18332
18321: POP
// bc_type := b_siberite_power ; 33 :
18322: LD_ADDR_OWVAR 42
18326: PUSH
18327: LD_INT 28
18329: ST_TO_ADDR
18330: GO 18371
18332: LD_INT 33
18334: DOUBLE
18335: EQUAL
18336: IFTRUE 18340
18338: GO 18351
18340: POP
// bc_type := b_oil_mine ; 34 :
18341: LD_ADDR_OWVAR 42
18345: PUSH
18346: LD_INT 29
18348: ST_TO_ADDR
18349: GO 18371
18351: LD_INT 34
18353: DOUBLE
18354: EQUAL
18355: IFTRUE 18359
18357: GO 18370
18359: POP
// bc_type := b_siberite_mine ; end ;
18360: LD_ADDR_OWVAR 42
18364: PUSH
18365: LD_INT 30
18367: ST_TO_ADDR
18368: GO 18371
18370: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18371: LD_ADDR_VAR 0 8
18375: PUSH
18376: LD_VAR 0 5
18380: PPUSH
18381: LD_VAR 0 6
18385: PPUSH
18386: LD_VAR 0 3
18390: PPUSH
18391: CALL_OW 47
18395: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18396: LD_OWVAR 42
18400: PUSH
18401: LD_INT 32
18403: PUSH
18404: LD_INT 33
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: IN
18411: IFFALSE 18427
// PlaceWeaponTurret ( b , weapon ) ;
18413: LD_VAR 0 8
18417: PPUSH
18418: LD_VAR 0 4
18422: PPUSH
18423: CALL_OW 431
// end ;
18427: LD_VAR 0 7
18431: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18432: LD_INT 0
18434: PPUSH
18435: PPUSH
18436: PPUSH
18437: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18438: LD_ADDR_VAR 0 4
18442: PUSH
18443: LD_INT 22
18445: PUSH
18446: LD_OWVAR 2
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 2
18457: PUSH
18458: LD_INT 30
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 30
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PPUSH
18487: CALL_OW 69
18491: ST_TO_ADDR
// if not tmp then
18492: LD_VAR 0 4
18496: NOT
18497: IFFALSE 18501
// exit ;
18499: GO 18560
// for i in tmp do
18501: LD_ADDR_VAR 0 2
18505: PUSH
18506: LD_VAR 0 4
18510: PUSH
18511: FOR_IN
18512: IFFALSE 18558
// for j = 1 to 3 do
18514: LD_ADDR_VAR 0 3
18518: PUSH
18519: DOUBLE
18520: LD_INT 1
18522: DEC
18523: ST_TO_ADDR
18524: LD_INT 3
18526: PUSH
18527: FOR_TO
18528: IFFALSE 18554
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18530: LD_VAR 0 2
18534: PPUSH
18535: CALL_OW 274
18539: PPUSH
18540: LD_VAR 0 3
18544: PPUSH
18545: LD_INT 99999
18547: PPUSH
18548: CALL_OW 277
18552: GO 18527
18554: POP
18555: POP
18556: GO 18511
18558: POP
18559: POP
// end ;
18560: LD_VAR 0 1
18564: RET
// export function hHackSetLevel10 ; var i , j ; begin
18565: LD_INT 0
18567: PPUSH
18568: PPUSH
18569: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18570: LD_ADDR_VAR 0 2
18574: PUSH
18575: LD_INT 21
18577: PUSH
18578: LD_INT 1
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PPUSH
18585: CALL_OW 69
18589: PUSH
18590: FOR_IN
18591: IFFALSE 18643
// if IsSelected ( i ) then
18593: LD_VAR 0 2
18597: PPUSH
18598: CALL_OW 306
18602: IFFALSE 18641
// begin for j := 1 to 4 do
18604: LD_ADDR_VAR 0 3
18608: PUSH
18609: DOUBLE
18610: LD_INT 1
18612: DEC
18613: ST_TO_ADDR
18614: LD_INT 4
18616: PUSH
18617: FOR_TO
18618: IFFALSE 18639
// SetSkill ( i , j , 10 ) ;
18620: LD_VAR 0 2
18624: PPUSH
18625: LD_VAR 0 3
18629: PPUSH
18630: LD_INT 10
18632: PPUSH
18633: CALL_OW 237
18637: GO 18617
18639: POP
18640: POP
// end ;
18641: GO 18590
18643: POP
18644: POP
// end ;
18645: LD_VAR 0 1
18649: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18650: LD_INT 0
18652: PPUSH
18653: PPUSH
18654: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18655: LD_ADDR_VAR 0 2
18659: PUSH
18660: LD_INT 22
18662: PUSH
18663: LD_OWVAR 2
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 21
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PPUSH
18686: CALL_OW 69
18690: PUSH
18691: FOR_IN
18692: IFFALSE 18733
// begin for j := 1 to 4 do
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: DOUBLE
18700: LD_INT 1
18702: DEC
18703: ST_TO_ADDR
18704: LD_INT 4
18706: PUSH
18707: FOR_TO
18708: IFFALSE 18729
// SetSkill ( i , j , 10 ) ;
18710: LD_VAR 0 2
18714: PPUSH
18715: LD_VAR 0 3
18719: PPUSH
18720: LD_INT 10
18722: PPUSH
18723: CALL_OW 237
18727: GO 18707
18729: POP
18730: POP
// end ;
18731: GO 18691
18733: POP
18734: POP
// end ;
18735: LD_VAR 0 1
18739: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18740: LD_INT 0
18742: PPUSH
// uc_side := your_side ;
18743: LD_ADDR_OWVAR 20
18747: PUSH
18748: LD_OWVAR 2
18752: ST_TO_ADDR
// uc_nation := nation ;
18753: LD_ADDR_OWVAR 21
18757: PUSH
18758: LD_VAR 0 1
18762: ST_TO_ADDR
// InitHc ;
18763: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18767: LD_INT 0
18769: PPUSH
18770: LD_VAR 0 2
18774: PPUSH
18775: LD_VAR 0 3
18779: PPUSH
18780: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18784: LD_VAR 0 4
18788: PPUSH
18789: LD_VAR 0 5
18793: PPUSH
18794: CALL_OW 428
18798: PUSH
18799: LD_INT 0
18801: EQUAL
18802: IFFALSE 18826
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18804: CALL_OW 44
18808: PPUSH
18809: LD_VAR 0 4
18813: PPUSH
18814: LD_VAR 0 5
18818: PPUSH
18819: LD_INT 1
18821: PPUSH
18822: CALL_OW 48
// end ;
18826: LD_VAR 0 6
18830: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18831: LD_INT 0
18833: PPUSH
18834: PPUSH
// uc_side := your_side ;
18835: LD_ADDR_OWVAR 20
18839: PUSH
18840: LD_OWVAR 2
18844: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18845: LD_VAR 0 1
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: LD_INT 2
18855: PUSH
18856: LD_INT 3
18858: PUSH
18859: LD_INT 4
18861: PUSH
18862: LD_INT 5
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: IN
18872: IFFALSE 18884
// uc_nation := nation_american else
18874: LD_ADDR_OWVAR 21
18878: PUSH
18879: LD_INT 1
18881: ST_TO_ADDR
18882: GO 18927
// if chassis in [ 11 , 12 , 13 , 14 ] then
18884: LD_VAR 0 1
18888: PUSH
18889: LD_INT 11
18891: PUSH
18892: LD_INT 12
18894: PUSH
18895: LD_INT 13
18897: PUSH
18898: LD_INT 14
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: IN
18907: IFFALSE 18919
// uc_nation := nation_arabian else
18909: LD_ADDR_OWVAR 21
18913: PUSH
18914: LD_INT 2
18916: ST_TO_ADDR
18917: GO 18927
// uc_nation := nation_russian ;
18919: LD_ADDR_OWVAR 21
18923: PUSH
18924: LD_INT 3
18926: ST_TO_ADDR
// vc_chassis := chassis ;
18927: LD_ADDR_OWVAR 37
18931: PUSH
18932: LD_VAR 0 1
18936: ST_TO_ADDR
// vc_engine := engine ;
18937: LD_ADDR_OWVAR 39
18941: PUSH
18942: LD_VAR 0 2
18946: ST_TO_ADDR
// vc_control := control ;
18947: LD_ADDR_OWVAR 38
18951: PUSH
18952: LD_VAR 0 3
18956: ST_TO_ADDR
// vc_weapon := weapon ;
18957: LD_ADDR_OWVAR 40
18961: PUSH
18962: LD_VAR 0 4
18966: ST_TO_ADDR
// un := CreateVehicle ;
18967: LD_ADDR_VAR 0 8
18971: PUSH
18972: CALL_OW 45
18976: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18977: LD_VAR 0 8
18981: PPUSH
18982: LD_INT 0
18984: PPUSH
18985: LD_INT 5
18987: PPUSH
18988: CALL_OW 12
18992: PPUSH
18993: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18997: LD_VAR 0 8
19001: PPUSH
19002: LD_VAR 0 5
19006: PPUSH
19007: LD_VAR 0 6
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 48
// end ;
19019: LD_VAR 0 7
19023: RET
// export hInvincible ; every 1 do
19024: GO 19026
19026: DISABLE
// hInvincible := [ ] ;
19027: LD_ADDR_EXP 73
19031: PUSH
19032: EMPTY
19033: ST_TO_ADDR
19034: END
// every 10 do var i ;
19035: GO 19037
19037: DISABLE
19038: LD_INT 0
19040: PPUSH
// begin enable ;
19041: ENABLE
// if not hInvincible then
19042: LD_EXP 73
19046: NOT
19047: IFFALSE 19051
// exit ;
19049: GO 19095
// for i in hInvincible do
19051: LD_ADDR_VAR 0 1
19055: PUSH
19056: LD_EXP 73
19060: PUSH
19061: FOR_IN
19062: IFFALSE 19093
// if GetLives ( i ) < 1000 then
19064: LD_VAR 0 1
19068: PPUSH
19069: CALL_OW 256
19073: PUSH
19074: LD_INT 1000
19076: LESS
19077: IFFALSE 19091
// SetLives ( i , 1000 ) ;
19079: LD_VAR 0 1
19083: PPUSH
19084: LD_INT 1000
19086: PPUSH
19087: CALL_OW 234
19091: GO 19061
19093: POP
19094: POP
// end ;
19095: PPOPN 1
19097: END
// export function hHackInvincible ; var i ; begin
19098: LD_INT 0
19100: PPUSH
19101: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19102: LD_ADDR_VAR 0 2
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: LD_INT 21
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 21
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: LIST
19134: PPUSH
19135: CALL_OW 69
19139: PUSH
19140: FOR_IN
19141: IFFALSE 19202
// if IsSelected ( i ) then
19143: LD_VAR 0 2
19147: PPUSH
19148: CALL_OW 306
19152: IFFALSE 19200
// begin if i in hInvincible then
19154: LD_VAR 0 2
19158: PUSH
19159: LD_EXP 73
19163: IN
19164: IFFALSE 19184
// hInvincible := hInvincible diff i else
19166: LD_ADDR_EXP 73
19170: PUSH
19171: LD_EXP 73
19175: PUSH
19176: LD_VAR 0 2
19180: DIFF
19181: ST_TO_ADDR
19182: GO 19200
// hInvincible := hInvincible union i ;
19184: LD_ADDR_EXP 73
19188: PUSH
19189: LD_EXP 73
19193: PUSH
19194: LD_VAR 0 2
19198: UNION
19199: ST_TO_ADDR
// end ;
19200: GO 19140
19202: POP
19203: POP
// end ;
19204: LD_VAR 0 1
19208: RET
// export function hHackInvisible ; var i , j ; begin
19209: LD_INT 0
19211: PPUSH
19212: PPUSH
19213: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19214: LD_ADDR_VAR 0 2
19218: PUSH
19219: LD_INT 21
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PPUSH
19229: CALL_OW 69
19233: PUSH
19234: FOR_IN
19235: IFFALSE 19259
// if IsSelected ( i ) then
19237: LD_VAR 0 2
19241: PPUSH
19242: CALL_OW 306
19246: IFFALSE 19257
// ComForceInvisible ( i ) ;
19248: LD_VAR 0 2
19252: PPUSH
19253: CALL_OW 496
19257: GO 19234
19259: POP
19260: POP
// end ;
19261: LD_VAR 0 1
19265: RET
// export function hHackChangeYourSide ; begin
19266: LD_INT 0
19268: PPUSH
// if your_side = 8 then
19269: LD_OWVAR 2
19273: PUSH
19274: LD_INT 8
19276: EQUAL
19277: IFFALSE 19289
// your_side := 0 else
19279: LD_ADDR_OWVAR 2
19283: PUSH
19284: LD_INT 0
19286: ST_TO_ADDR
19287: GO 19303
// your_side := your_side + 1 ;
19289: LD_ADDR_OWVAR 2
19293: PUSH
19294: LD_OWVAR 2
19298: PUSH
19299: LD_INT 1
19301: PLUS
19302: ST_TO_ADDR
// end ;
19303: LD_VAR 0 1
19307: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
19312: PPUSH
// for i in all_units do
19313: LD_ADDR_VAR 0 2
19317: PUSH
19318: LD_OWVAR 3
19322: PUSH
19323: FOR_IN
19324: IFFALSE 19402
// if IsSelected ( i ) then
19326: LD_VAR 0 2
19330: PPUSH
19331: CALL_OW 306
19335: IFFALSE 19400
// begin j := GetSide ( i ) ;
19337: LD_ADDR_VAR 0 3
19341: PUSH
19342: LD_VAR 0 2
19346: PPUSH
19347: CALL_OW 255
19351: ST_TO_ADDR
// if j = 8 then
19352: LD_VAR 0 3
19356: PUSH
19357: LD_INT 8
19359: EQUAL
19360: IFFALSE 19372
// j := 0 else
19362: LD_ADDR_VAR 0 3
19366: PUSH
19367: LD_INT 0
19369: ST_TO_ADDR
19370: GO 19386
// j := j + 1 ;
19372: LD_ADDR_VAR 0 3
19376: PUSH
19377: LD_VAR 0 3
19381: PUSH
19382: LD_INT 1
19384: PLUS
19385: ST_TO_ADDR
// SetSide ( i , j ) ;
19386: LD_VAR 0 2
19390: PPUSH
19391: LD_VAR 0 3
19395: PPUSH
19396: CALL_OW 235
// end ;
19400: GO 19323
19402: POP
19403: POP
// end ;
19404: LD_VAR 0 1
19408: RET
// export function hHackFog ; begin
19409: LD_INT 0
19411: PPUSH
// FogOff ( true ) ;
19412: LD_INT 1
19414: PPUSH
19415: CALL_OW 344
// end ;
19419: LD_VAR 0 1
19423: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19424: LD_INT 0
19426: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19427: LD_VAR 0 1
19431: PPUSH
19432: LD_VAR 0 2
19436: PPUSH
19437: LD_VAR 0 3
19441: PPUSH
19442: LD_INT 1
19444: PPUSH
19445: LD_INT 1
19447: PPUSH
19448: CALL_OW 483
// CenterOnXY ( x , y ) ;
19452: LD_VAR 0 2
19456: PPUSH
19457: LD_VAR 0 3
19461: PPUSH
19462: CALL_OW 84
// end ;
19466: LD_VAR 0 4
19470: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19475: LD_VAR 0 1
19479: NOT
19480: PUSH
19481: LD_VAR 0 2
19485: PPUSH
19486: LD_VAR 0 3
19490: PPUSH
19491: CALL_OW 488
19495: NOT
19496: OR
19497: PUSH
19498: LD_VAR 0 1
19502: PPUSH
19503: CALL_OW 266
19507: PUSH
19508: LD_INT 3
19510: NONEQUAL
19511: PUSH
19512: LD_VAR 0 1
19516: PPUSH
19517: CALL_OW 247
19521: PUSH
19522: LD_INT 1
19524: EQUAL
19525: NOT
19526: AND
19527: OR
19528: IFFALSE 19532
// exit ;
19530: GO 19814
// if GetType ( factory ) = unit_human then
19532: LD_VAR 0 1
19536: PPUSH
19537: CALL_OW 247
19541: PUSH
19542: LD_INT 1
19544: EQUAL
19545: IFFALSE 19562
// factory := IsInUnit ( factory ) ;
19547: LD_ADDR_VAR 0 1
19551: PUSH
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL_OW 310
19561: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19562: LD_VAR 0 1
19566: PPUSH
19567: CALL_OW 266
19571: PUSH
19572: LD_INT 3
19574: NONEQUAL
19575: IFFALSE 19579
// exit ;
19577: GO 19814
// for i := 1 to Count ( factoryWaypoints ) do
19579: LD_ADDR_VAR 0 5
19583: PUSH
19584: DOUBLE
19585: LD_INT 1
19587: DEC
19588: ST_TO_ADDR
19589: LD_EXP 74
19593: PPUSH
19594: CALL 28480 0 1
19598: PUSH
19599: FOR_TO
19600: IFFALSE 19762
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
19602: LD_VAR 0 2
19606: PPUSH
19607: LD_VAR 0 3
19611: PPUSH
19612: CALL_OW 428
19616: PUSH
19617: LD_EXP 74
19621: PUSH
19622: LD_VAR 0 5
19626: ARRAY
19627: PUSH
19628: LD_INT 2
19630: ARRAY
19631: EQUAL
19632: IFFALSE 19664
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19634: LD_ADDR_EXP 74
19638: PUSH
19639: LD_EXP 74
19643: PPUSH
19644: LD_VAR 0 5
19648: PPUSH
19649: CALL_OW 3
19653: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19654: CALL 19819 0 0
// exit ;
19658: POP
19659: POP
19660: GO 19814
// end else
19662: GO 19760
// if factory = factoryWaypoints [ i ] [ 2 ] then
19664: LD_VAR 0 1
19668: PUSH
19669: LD_EXP 74
19673: PUSH
19674: LD_VAR 0 5
19678: ARRAY
19679: PUSH
19680: LD_INT 2
19682: ARRAY
19683: EQUAL
19684: IFFALSE 19760
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19686: LD_ADDR_EXP 74
19690: PUSH
19691: LD_EXP 74
19695: PPUSH
19696: LD_VAR 0 5
19700: PPUSH
19701: CALL_OW 3
19705: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19706: LD_ADDR_EXP 74
19710: PUSH
19711: LD_EXP 74
19715: PPUSH
19716: LD_VAR 0 1
19720: PPUSH
19721: CALL_OW 255
19725: PUSH
19726: LD_VAR 0 1
19730: PUSH
19731: LD_VAR 0 2
19735: PUSH
19736: LD_VAR 0 3
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL 64089 0 2
19751: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19752: CALL 19819 0 0
// exit ;
19756: POP
19757: POP
19758: GO 19814
// end ; end ;
19760: GO 19599
19762: POP
19763: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19764: LD_ADDR_EXP 74
19768: PUSH
19769: LD_EXP 74
19773: PPUSH
19774: LD_VAR 0 1
19778: PPUSH
19779: CALL_OW 255
19783: PUSH
19784: LD_VAR 0 1
19788: PUSH
19789: LD_VAR 0 2
19793: PUSH
19794: LD_VAR 0 3
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: PPUSH
19805: CALL 64089 0 2
19809: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19810: CALL 19819 0 0
// end ;
19814: LD_VAR 0 4
19818: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19819: LD_INT 0
19821: PPUSH
19822: PPUSH
19823: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19824: LD_STRING resetFactoryWaypoint();
19826: PPUSH
19827: CALL_OW 559
// if factoryWaypoints then
19831: LD_EXP 74
19835: IFFALSE 19956
// begin list := factoryWaypoints ;
19837: LD_ADDR_VAR 0 3
19841: PUSH
19842: LD_EXP 74
19846: ST_TO_ADDR
// for i := 1 to list do
19847: LD_ADDR_VAR 0 2
19851: PUSH
19852: DOUBLE
19853: LD_INT 1
19855: DEC
19856: ST_TO_ADDR
19857: LD_VAR 0 3
19861: PUSH
19862: FOR_TO
19863: IFFALSE 19954
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19865: LD_STRING setFactoryWaypointXY(
19867: PUSH
19868: LD_VAR 0 3
19872: PUSH
19873: LD_VAR 0 2
19877: ARRAY
19878: PUSH
19879: LD_INT 1
19881: ARRAY
19882: STR
19883: PUSH
19884: LD_STRING ,
19886: STR
19887: PUSH
19888: LD_VAR 0 3
19892: PUSH
19893: LD_VAR 0 2
19897: ARRAY
19898: PUSH
19899: LD_INT 2
19901: ARRAY
19902: STR
19903: PUSH
19904: LD_STRING ,
19906: STR
19907: PUSH
19908: LD_VAR 0 3
19912: PUSH
19913: LD_VAR 0 2
19917: ARRAY
19918: PUSH
19919: LD_INT 3
19921: ARRAY
19922: STR
19923: PUSH
19924: LD_STRING ,
19926: STR
19927: PUSH
19928: LD_VAR 0 3
19932: PUSH
19933: LD_VAR 0 2
19937: ARRAY
19938: PUSH
19939: LD_INT 4
19941: ARRAY
19942: STR
19943: PUSH
19944: LD_STRING )
19946: STR
19947: PPUSH
19948: CALL_OW 559
19952: GO 19862
19954: POP
19955: POP
// end ; end ;
19956: LD_VAR 0 1
19960: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19961: LD_INT 0
19963: PPUSH
// if HexInfo ( x , y ) = warehouse then
19964: LD_VAR 0 2
19968: PPUSH
19969: LD_VAR 0 3
19973: PPUSH
19974: CALL_OW 428
19978: PUSH
19979: LD_VAR 0 1
19983: EQUAL
19984: IFFALSE 20011
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19986: LD_ADDR_EXP 75
19990: PUSH
19991: LD_EXP 75
19995: PPUSH
19996: LD_VAR 0 1
20000: PPUSH
20001: LD_INT 0
20003: PPUSH
20004: CALL_OW 1
20008: ST_TO_ADDR
20009: GO 20062
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20011: LD_ADDR_EXP 75
20015: PUSH
20016: LD_EXP 75
20020: PPUSH
20021: LD_VAR 0 1
20025: PPUSH
20026: LD_VAR 0 1
20030: PPUSH
20031: CALL_OW 255
20035: PUSH
20036: LD_VAR 0 1
20040: PUSH
20041: LD_VAR 0 2
20045: PUSH
20046: LD_VAR 0 3
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: PPUSH
20057: CALL_OW 1
20061: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20062: CALL 20071 0 0
// end ;
20066: LD_VAR 0 4
20070: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20071: LD_INT 0
20073: PPUSH
20074: PPUSH
20075: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20076: LD_STRING resetWarehouseGatheringPoints();
20078: PPUSH
20079: CALL_OW 559
// if warehouseGatheringPoints then
20083: LD_EXP 75
20087: IFFALSE 20213
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20089: LD_ADDR_VAR 0 3
20093: PUSH
20094: LD_EXP 75
20098: PPUSH
20099: CALL 67851 0 1
20103: ST_TO_ADDR
// for i := 1 to list do
20104: LD_ADDR_VAR 0 2
20108: PUSH
20109: DOUBLE
20110: LD_INT 1
20112: DEC
20113: ST_TO_ADDR
20114: LD_VAR 0 3
20118: PUSH
20119: FOR_TO
20120: IFFALSE 20211
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20122: LD_STRING setWarehouseGatheringPointXY(
20124: PUSH
20125: LD_VAR 0 3
20129: PUSH
20130: LD_VAR 0 2
20134: ARRAY
20135: PUSH
20136: LD_INT 1
20138: ARRAY
20139: STR
20140: PUSH
20141: LD_STRING ,
20143: STR
20144: PUSH
20145: LD_VAR 0 3
20149: PUSH
20150: LD_VAR 0 2
20154: ARRAY
20155: PUSH
20156: LD_INT 2
20158: ARRAY
20159: STR
20160: PUSH
20161: LD_STRING ,
20163: STR
20164: PUSH
20165: LD_VAR 0 3
20169: PUSH
20170: LD_VAR 0 2
20174: ARRAY
20175: PUSH
20176: LD_INT 3
20178: ARRAY
20179: STR
20180: PUSH
20181: LD_STRING ,
20183: STR
20184: PUSH
20185: LD_VAR 0 3
20189: PUSH
20190: LD_VAR 0 2
20194: ARRAY
20195: PUSH
20196: LD_INT 4
20198: ARRAY
20199: STR
20200: PUSH
20201: LD_STRING )
20203: STR
20204: PPUSH
20205: CALL_OW 559
20209: GO 20119
20211: POP
20212: POP
// end ; end ;
20213: LD_VAR 0 1
20217: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20218: LD_EXP 75
20222: IFFALSE 20907
20224: GO 20226
20226: DISABLE
20227: LD_INT 0
20229: PPUSH
20230: PPUSH
20231: PPUSH
20232: PPUSH
20233: PPUSH
20234: PPUSH
20235: PPUSH
20236: PPUSH
20237: PPUSH
// begin enable ;
20238: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20239: LD_ADDR_VAR 0 3
20243: PUSH
20244: LD_EXP 75
20248: PPUSH
20249: CALL 67851 0 1
20253: ST_TO_ADDR
// if not list then
20254: LD_VAR 0 3
20258: NOT
20259: IFFALSE 20263
// exit ;
20261: GO 20907
// for i := 1 to list do
20263: LD_ADDR_VAR 0 1
20267: PUSH
20268: DOUBLE
20269: LD_INT 1
20271: DEC
20272: ST_TO_ADDR
20273: LD_VAR 0 3
20277: PUSH
20278: FOR_TO
20279: IFFALSE 20905
// begin depot := list [ i ] [ 2 ] ;
20281: LD_ADDR_VAR 0 8
20285: PUSH
20286: LD_VAR 0 3
20290: PUSH
20291: LD_VAR 0 1
20295: ARRAY
20296: PUSH
20297: LD_INT 2
20299: ARRAY
20300: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20301: LD_ADDR_VAR 0 5
20305: PUSH
20306: LD_VAR 0 3
20310: PUSH
20311: LD_VAR 0 1
20315: ARRAY
20316: PUSH
20317: LD_INT 1
20319: ARRAY
20320: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20321: LD_VAR 0 8
20325: PPUSH
20326: CALL_OW 301
20330: PUSH
20331: LD_VAR 0 5
20335: PUSH
20336: LD_VAR 0 8
20340: PPUSH
20341: CALL_OW 255
20345: NONEQUAL
20346: OR
20347: IFFALSE 20376
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20349: LD_ADDR_EXP 75
20353: PUSH
20354: LD_EXP 75
20358: PPUSH
20359: LD_VAR 0 8
20363: PPUSH
20364: LD_INT 0
20366: PPUSH
20367: CALL_OW 1
20371: ST_TO_ADDR
// exit ;
20372: POP
20373: POP
20374: GO 20907
// end ; x := list [ i ] [ 3 ] ;
20376: LD_ADDR_VAR 0 6
20380: PUSH
20381: LD_VAR 0 3
20385: PUSH
20386: LD_VAR 0 1
20390: ARRAY
20391: PUSH
20392: LD_INT 3
20394: ARRAY
20395: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20396: LD_ADDR_VAR 0 7
20400: PUSH
20401: LD_VAR 0 3
20405: PUSH
20406: LD_VAR 0 1
20410: ARRAY
20411: PUSH
20412: LD_INT 4
20414: ARRAY
20415: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20416: LD_ADDR_VAR 0 9
20420: PUSH
20421: LD_VAR 0 6
20425: PPUSH
20426: LD_VAR 0 7
20430: PPUSH
20431: LD_INT 16
20433: PPUSH
20434: CALL 66435 0 3
20438: ST_TO_ADDR
// if not cratesNearbyPoint then
20439: LD_VAR 0 9
20443: NOT
20444: IFFALSE 20450
// exit ;
20446: POP
20447: POP
20448: GO 20907
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20450: LD_ADDR_VAR 0 4
20454: PUSH
20455: LD_INT 22
20457: PUSH
20458: LD_VAR 0 5
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 3
20469: PUSH
20470: LD_INT 60
20472: PUSH
20473: EMPTY
20474: LIST
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 91
20482: PUSH
20483: LD_VAR 0 8
20487: PUSH
20488: LD_INT 6
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: LD_INT 25
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 25
20511: PUSH
20512: LD_INT 16
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: LIST
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: PPUSH
20530: CALL_OW 69
20534: PUSH
20535: LD_VAR 0 8
20539: PPUSH
20540: CALL_OW 313
20544: PPUSH
20545: LD_INT 3
20547: PUSH
20548: LD_INT 60
20550: PUSH
20551: EMPTY
20552: LIST
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 2
20560: PUSH
20561: LD_INT 25
20563: PUSH
20564: LD_INT 2
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 25
20573: PUSH
20574: LD_INT 16
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: LIST
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PPUSH
20590: CALL_OW 72
20594: UNION
20595: ST_TO_ADDR
// if tmp then
20596: LD_VAR 0 4
20600: IFFALSE 20680
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20602: LD_ADDR_VAR 0 4
20606: PUSH
20607: LD_VAR 0 4
20611: PPUSH
20612: LD_INT 3
20614: PPUSH
20615: CALL 64404 0 2
20619: ST_TO_ADDR
// for j in tmp do
20620: LD_ADDR_VAR 0 2
20624: PUSH
20625: LD_VAR 0 4
20629: PUSH
20630: FOR_IN
20631: IFFALSE 20674
// begin if IsInUnit ( j ) then
20633: LD_VAR 0 2
20637: PPUSH
20638: CALL_OW 310
20642: IFFALSE 20653
// ComExit ( j ) ;
20644: LD_VAR 0 2
20648: PPUSH
20649: CALL 64487 0 1
// AddComCollect ( j , x , y ) ;
20653: LD_VAR 0 2
20657: PPUSH
20658: LD_VAR 0 6
20662: PPUSH
20663: LD_VAR 0 7
20667: PPUSH
20668: CALL_OW 177
// end ;
20672: GO 20630
20674: POP
20675: POP
// exit ;
20676: POP
20677: POP
20678: GO 20907
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20680: LD_ADDR_VAR 0 4
20684: PUSH
20685: LD_INT 22
20687: PUSH
20688: LD_VAR 0 5
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 91
20699: PUSH
20700: LD_VAR 0 8
20704: PUSH
20705: LD_INT 8
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 2
20715: PUSH
20716: LD_INT 34
20718: PUSH
20719: LD_INT 12
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 34
20728: PUSH
20729: LD_INT 51
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 34
20738: PUSH
20739: LD_INT 32
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 34
20748: PUSH
20749: LD_INT 89
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: LIST
20767: PPUSH
20768: CALL_OW 69
20772: ST_TO_ADDR
// if tmp then
20773: LD_VAR 0 4
20777: IFFALSE 20903
// begin for j in tmp do
20779: LD_ADDR_VAR 0 2
20783: PUSH
20784: LD_VAR 0 4
20788: PUSH
20789: FOR_IN
20790: IFFALSE 20901
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20792: LD_VAR 0 2
20796: PPUSH
20797: CALL_OW 262
20801: PUSH
20802: LD_INT 3
20804: EQUAL
20805: PUSH
20806: LD_VAR 0 2
20810: PPUSH
20811: CALL_OW 261
20815: PUSH
20816: LD_INT 20
20818: GREATER
20819: OR
20820: PUSH
20821: LD_VAR 0 2
20825: PPUSH
20826: CALL_OW 314
20830: NOT
20831: AND
20832: PUSH
20833: LD_VAR 0 2
20837: PPUSH
20838: CALL_OW 263
20842: PUSH
20843: LD_INT 1
20845: NONEQUAL
20846: PUSH
20847: LD_VAR 0 2
20851: PPUSH
20852: CALL_OW 311
20856: OR
20857: AND
20858: IFFALSE 20899
// begin ComCollect ( j , x , y ) ;
20860: LD_VAR 0 2
20864: PPUSH
20865: LD_VAR 0 6
20869: PPUSH
20870: LD_VAR 0 7
20874: PPUSH
20875: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20879: LD_VAR 0 2
20883: PPUSH
20884: LD_VAR 0 8
20888: PPUSH
20889: CALL_OW 172
// exit ;
20893: POP
20894: POP
20895: POP
20896: POP
20897: GO 20907
// end ;
20899: GO 20789
20901: POP
20902: POP
// end ; end ;
20903: GO 20278
20905: POP
20906: POP
// end ; end_of_file
20907: PPOPN 9
20909: END
// export function SOS_UnitDestroyed ( un ) ; begin
20910: LD_INT 0
20912: PPUSH
// ComRadiation ( un ) ;
20913: LD_VAR 0 1
20917: PPUSH
20918: CALL 21899 0 1
// end ;
20922: LD_VAR 0 2
20926: RET
// export function SOS_UnitKamikazed ( un ) ; begin
20927: LD_INT 0
20929: PPUSH
// ComRadiation ( un ) ;
20930: LD_VAR 0 1
20934: PPUSH
20935: CALL 21899 0 1
// end ;
20939: LD_VAR 0 2
20943: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20944: LD_INT 0
20946: PPUSH
// end ;
20947: LD_VAR 0 4
20951: RET
// export function SOS_Command ( cmd ) ; begin
20952: LD_INT 0
20954: PPUSH
// end ;
20955: LD_VAR 0 2
20959: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20960: LD_INT 0
20962: PPUSH
// end ;
20963: LD_VAR 0 6
20967: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
20968: LD_INT 0
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
20974: PPUSH
// if not vehicle or not factory then
20975: LD_VAR 0 1
20979: NOT
20980: PUSH
20981: LD_VAR 0 2
20985: NOT
20986: OR
20987: IFFALSE 20991
// exit ;
20989: GO 21490
// if not factoryWaypoints then
20991: LD_EXP 74
20995: NOT
20996: IFFALSE 21000
// exit ;
20998: GO 21490
// for i := 1 to Count ( factoryWaypoints ) do
21000: LD_ADDR_VAR 0 4
21004: PUSH
21005: DOUBLE
21006: LD_INT 1
21008: DEC
21009: ST_TO_ADDR
21010: LD_EXP 74
21014: PPUSH
21015: CALL 28480 0 1
21019: PUSH
21020: FOR_TO
21021: IFFALSE 21488
// if factoryWaypoints [ i ] [ 2 ] = factory then
21023: LD_EXP 74
21027: PUSH
21028: LD_VAR 0 4
21032: ARRAY
21033: PUSH
21034: LD_INT 2
21036: ARRAY
21037: PUSH
21038: LD_VAR 0 2
21042: EQUAL
21043: IFFALSE 21486
// begin if GetControl ( vehicle ) = control_manual then
21045: LD_VAR 0 1
21049: PPUSH
21050: CALL_OW 263
21054: PUSH
21055: LD_INT 1
21057: EQUAL
21058: IFFALSE 21369
// begin driver := IsDrivenBy ( vehicle ) ;
21060: LD_ADDR_VAR 0 6
21064: PUSH
21065: LD_VAR 0 1
21069: PPUSH
21070: CALL_OW 311
21074: ST_TO_ADDR
// tag := GetTag ( driver ) ;
21075: LD_ADDR_VAR 0 5
21079: PUSH
21080: LD_VAR 0 6
21084: PPUSH
21085: CALL_OW 110
21089: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
21090: LD_VAR 0 5
21094: PUSH
21095: LD_INT 501
21097: EQUAL
21098: PUSH
21099: LD_VAR 0 1
21103: PPUSH
21104: CALL_OW 110
21108: PUSH
21109: LD_INT 501
21111: EQUAL
21112: OR
21113: IFFALSE 21119
// exit ;
21115: POP
21116: POP
21117: GO 21490
// if not HasTask ( driver ) then
21119: LD_VAR 0 6
21123: PPUSH
21124: CALL_OW 314
21128: NOT
21129: IFFALSE 21367
// begin SetTag ( driver , tDriver ) ;
21131: LD_VAR 0 6
21135: PPUSH
21136: LD_INT 501
21138: PPUSH
21139: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
21143: LD_VAR 0 1
21147: PPUSH
21148: LD_INT 501
21150: PPUSH
21151: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21155: LD_ADDR_VAR 0 7
21159: PUSH
21160: LD_EXP 74
21164: PUSH
21165: LD_VAR 0 4
21169: ARRAY
21170: PUSH
21171: LD_INT 3
21173: ARRAY
21174: PPUSH
21175: LD_EXP 74
21179: PUSH
21180: LD_VAR 0 4
21184: ARRAY
21185: PUSH
21186: LD_INT 4
21188: ARRAY
21189: PPUSH
21190: CALL_OW 428
21194: ST_TO_ADDR
// if hex then
21195: LD_VAR 0 7
21199: IFFALSE 21217
// ComMoveUnit ( driver , hex ) else
21201: LD_VAR 0 6
21205: PPUSH
21206: LD_VAR 0 7
21210: PPUSH
21211: CALL_OW 112
21215: GO 21256
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21217: LD_VAR 0 6
21221: PPUSH
21222: LD_EXP 74
21226: PUSH
21227: LD_VAR 0 4
21231: ARRAY
21232: PUSH
21233: LD_INT 3
21235: ARRAY
21236: PPUSH
21237: LD_EXP 74
21241: PUSH
21242: LD_VAR 0 4
21246: ARRAY
21247: PUSH
21248: LD_INT 4
21250: ARRAY
21251: PPUSH
21252: CALL_OW 111
// AddComExitVehicle ( driver ) ;
21256: LD_VAR 0 6
21260: PPUSH
21261: CALL_OW 181
// if Multiplayer then
21265: LD_OWVAR 4
21269: IFFALSE 21318
// begin repeat wait ( 10 ) ;
21271: LD_INT 10
21273: PPUSH
21274: CALL_OW 67
// until not IsInUnit ( driver ) ;
21278: LD_VAR 0 6
21282: PPUSH
21283: CALL_OW 310
21287: NOT
21288: IFFALSE 21271
// if not HasTask ( driver ) then
21290: LD_VAR 0 6
21294: PPUSH
21295: CALL_OW 314
21299: NOT
21300: IFFALSE 21316
// ComEnterUnit ( driver , factory ) ;
21302: LD_VAR 0 6
21306: PPUSH
21307: LD_VAR 0 2
21311: PPUSH
21312: CALL_OW 120
// end else
21316: GO 21332
// AddComEnterUnit ( driver , factory ) ;
21318: LD_VAR 0 6
21322: PPUSH
21323: LD_VAR 0 2
21327: PPUSH
21328: CALL_OW 180
// wait ( 0 0$1 ) ;
21332: LD_INT 35
21334: PPUSH
21335: CALL_OW 67
// SetTag ( driver , tag ) ;
21339: LD_VAR 0 6
21343: PPUSH
21344: LD_VAR 0 5
21348: PPUSH
21349: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
21353: LD_VAR 0 1
21357: PPUSH
21358: LD_INT 0
21360: PPUSH
21361: CALL_OW 109
// break ;
21365: GO 21488
// end ; end else
21367: GO 21486
// if GetControl ( vehicle ) = control_remote then
21369: LD_VAR 0 1
21373: PPUSH
21374: CALL_OW 263
21378: PUSH
21379: LD_INT 2
21381: EQUAL
21382: IFFALSE 21445
// begin wait ( 0 0$2 ) ;
21384: LD_INT 70
21386: PPUSH
21387: CALL_OW 67
// if Connect ( vehicle ) then
21391: LD_VAR 0 1
21395: PPUSH
21396: CALL 34686 0 1
21400: IFFALSE 21441
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21402: LD_VAR 0 1
21406: PPUSH
21407: LD_EXP 74
21411: PUSH
21412: LD_VAR 0 4
21416: ARRAY
21417: PUSH
21418: LD_INT 3
21420: ARRAY
21421: PPUSH
21422: LD_EXP 74
21426: PUSH
21427: LD_VAR 0 4
21431: ARRAY
21432: PUSH
21433: LD_INT 4
21435: ARRAY
21436: PPUSH
21437: CALL_OW 171
// break ;
21441: GO 21488
// end else
21443: GO 21486
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21445: LD_VAR 0 1
21449: PPUSH
21450: LD_EXP 74
21454: PUSH
21455: LD_VAR 0 4
21459: ARRAY
21460: PUSH
21461: LD_INT 3
21463: ARRAY
21464: PPUSH
21465: LD_EXP 74
21469: PUSH
21470: LD_VAR 0 4
21474: ARRAY
21475: PUSH
21476: LD_INT 4
21478: ARRAY
21479: PPUSH
21480: CALL_OW 171
// break ;
21484: GO 21488
// end ; end ;
21486: GO 21020
21488: POP
21489: POP
// end ;
21490: LD_VAR 0 3
21494: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21495: LD_INT 0
21497: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21498: LD_VAR 0 1
21502: PUSH
21503: LD_INT 250
21505: EQUAL
21506: PUSH
21507: LD_VAR 0 2
21511: PPUSH
21512: CALL_OW 264
21516: PUSH
21517: LD_INT 81
21519: EQUAL
21520: AND
21521: IFFALSE 21542
// MinerPlaceMine ( unit , x , y ) ;
21523: LD_VAR 0 2
21527: PPUSH
21528: LD_VAR 0 4
21532: PPUSH
21533: LD_VAR 0 5
21537: PPUSH
21538: CALL 24634 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21542: LD_VAR 0 1
21546: PUSH
21547: LD_INT 251
21549: EQUAL
21550: PUSH
21551: LD_VAR 0 2
21555: PPUSH
21556: CALL_OW 264
21560: PUSH
21561: LD_INT 81
21563: EQUAL
21564: AND
21565: IFFALSE 21586
// MinerDetonateMine ( unit , x , y ) ;
21567: LD_VAR 0 2
21571: PPUSH
21572: LD_VAR 0 4
21576: PPUSH
21577: LD_VAR 0 5
21581: PPUSH
21582: CALL 24909 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21586: LD_VAR 0 1
21590: PUSH
21591: LD_INT 252
21593: EQUAL
21594: PUSH
21595: LD_VAR 0 2
21599: PPUSH
21600: CALL_OW 264
21604: PUSH
21605: LD_INT 81
21607: EQUAL
21608: AND
21609: IFFALSE 21630
// MinerCreateMinefield ( unit , x , y ) ;
21611: LD_VAR 0 2
21615: PPUSH
21616: LD_VAR 0 4
21620: PPUSH
21621: LD_VAR 0 5
21625: PPUSH
21626: CALL 25326 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21630: LD_VAR 0 1
21634: PUSH
21635: LD_INT 253
21637: EQUAL
21638: PUSH
21639: LD_VAR 0 2
21643: PPUSH
21644: CALL_OW 257
21648: PUSH
21649: LD_INT 5
21651: EQUAL
21652: AND
21653: IFFALSE 21674
// ComBinocular ( unit , x , y ) ;
21655: LD_VAR 0 2
21659: PPUSH
21660: LD_VAR 0 4
21664: PPUSH
21665: LD_VAR 0 5
21669: PPUSH
21670: CALL 25695 0 3
// if selectedUnit then
21674: LD_VAR 0 3
21678: IFFALSE 21734
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21680: LD_VAR 0 1
21684: PUSH
21685: LD_INT 254
21687: EQUAL
21688: PUSH
21689: LD_VAR 0 2
21693: PPUSH
21694: CALL_OW 264
21698: PUSH
21699: LD_INT 99
21701: EQUAL
21702: AND
21703: PUSH
21704: LD_VAR 0 3
21708: PPUSH
21709: CALL_OW 263
21713: PUSH
21714: LD_INT 3
21716: EQUAL
21717: AND
21718: IFFALSE 21734
// HackDestroyVehicle ( unit , selectedUnit ) ;
21720: LD_VAR 0 2
21724: PPUSH
21725: LD_VAR 0 3
21729: PPUSH
21730: CALL 23998 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21734: LD_VAR 0 1
21738: PUSH
21739: LD_INT 255
21741: EQUAL
21742: PUSH
21743: LD_VAR 0 2
21747: PPUSH
21748: CALL_OW 264
21752: PUSH
21753: LD_INT 14
21755: PUSH
21756: LD_INT 53
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: IN
21763: AND
21764: PUSH
21765: LD_VAR 0 4
21769: PPUSH
21770: LD_VAR 0 5
21774: PPUSH
21775: CALL_OW 488
21779: AND
21780: IFFALSE 21804
// CutTreeXYR ( unit , x , y , 12 ) ;
21782: LD_VAR 0 2
21786: PPUSH
21787: LD_VAR 0 4
21791: PPUSH
21792: LD_VAR 0 5
21796: PPUSH
21797: LD_INT 12
21799: PPUSH
21800: CALL 21995 0 4
// if cmd = 256 then
21804: LD_VAR 0 1
21808: PUSH
21809: LD_INT 256
21811: EQUAL
21812: IFFALSE 21833
// SetFactoryWaypoint ( unit , x , y ) ;
21814: LD_VAR 0 2
21818: PPUSH
21819: LD_VAR 0 4
21823: PPUSH
21824: LD_VAR 0 5
21828: PPUSH
21829: CALL 19471 0 3
// if cmd = 257 then
21833: LD_VAR 0 1
21837: PUSH
21838: LD_INT 257
21840: EQUAL
21841: IFFALSE 21862
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21843: LD_VAR 0 2
21847: PPUSH
21848: LD_VAR 0 4
21852: PPUSH
21853: LD_VAR 0 5
21857: PPUSH
21858: CALL 19961 0 3
// if cmd = 258 then
21862: LD_VAR 0 1
21866: PUSH
21867: LD_INT 258
21869: EQUAL
21870: IFFALSE 21894
// BurnTreeXYR ( unit , x , y , 8 ) ;
21872: LD_VAR 0 2
21876: PPUSH
21877: LD_VAR 0 4
21881: PPUSH
21882: LD_VAR 0 5
21886: PPUSH
21887: LD_INT 8
21889: PPUSH
21890: CALL 22389 0 4
// end ;
21894: LD_VAR 0 6
21898: RET
// export function ComRadiation ( un ) ; var eff ; begin
21899: LD_INT 0
21901: PPUSH
21902: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
21903: LD_VAR 0 1
21907: PPUSH
21908: CALL_OW 264
21912: PUSH
21913: LD_INT 91
21915: NONEQUAL
21916: IFFALSE 21920
// exit ;
21918: GO 21990
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21920: LD_INT 68
21922: PPUSH
21923: LD_VAR 0 1
21927: PPUSH
21928: CALL_OW 255
21932: PPUSH
21933: CALL_OW 321
21937: PUSH
21938: LD_INT 2
21940: EQUAL
21941: IFFALSE 21953
// eff := 70 else
21943: LD_ADDR_VAR 0 3
21947: PUSH
21948: LD_INT 70
21950: ST_TO_ADDR
21951: GO 21961
// eff := 30 ;
21953: LD_ADDR_VAR 0 3
21957: PUSH
21958: LD_INT 30
21960: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21961: LD_VAR 0 1
21965: PPUSH
21966: CALL_OW 250
21970: PPUSH
21971: LD_VAR 0 1
21975: PPUSH
21976: CALL_OW 251
21980: PPUSH
21981: LD_VAR 0 3
21985: PPUSH
21986: CALL_OW 495
// end ;
21990: LD_VAR 0 2
21994: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21995: LD_INT 0
21997: PPUSH
21998: PPUSH
21999: PPUSH
22000: PPUSH
22001: PPUSH
22002: PPUSH
22003: PPUSH
22004: PPUSH
22005: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22006: LD_VAR 0 1
22010: PPUSH
22011: CALL_OW 302
22015: NOT
22016: PUSH
22017: LD_VAR 0 2
22021: PPUSH
22022: LD_VAR 0 3
22026: PPUSH
22027: CALL_OW 488
22031: NOT
22032: OR
22033: PUSH
22034: LD_VAR 0 4
22038: NOT
22039: OR
22040: IFFALSE 22044
// exit ;
22042: GO 22384
// list := [ ] ;
22044: LD_ADDR_VAR 0 13
22048: PUSH
22049: EMPTY
22050: ST_TO_ADDR
// if x - r < 0 then
22051: LD_VAR 0 2
22055: PUSH
22056: LD_VAR 0 4
22060: MINUS
22061: PUSH
22062: LD_INT 0
22064: LESS
22065: IFFALSE 22077
// min_x := 0 else
22067: LD_ADDR_VAR 0 7
22071: PUSH
22072: LD_INT 0
22074: ST_TO_ADDR
22075: GO 22093
// min_x := x - r ;
22077: LD_ADDR_VAR 0 7
22081: PUSH
22082: LD_VAR 0 2
22086: PUSH
22087: LD_VAR 0 4
22091: MINUS
22092: ST_TO_ADDR
// if y - r < 0 then
22093: LD_VAR 0 3
22097: PUSH
22098: LD_VAR 0 4
22102: MINUS
22103: PUSH
22104: LD_INT 0
22106: LESS
22107: IFFALSE 22119
// min_y := 0 else
22109: LD_ADDR_VAR 0 8
22113: PUSH
22114: LD_INT 0
22116: ST_TO_ADDR
22117: GO 22135
// min_y := y - r ;
22119: LD_ADDR_VAR 0 8
22123: PUSH
22124: LD_VAR 0 3
22128: PUSH
22129: LD_VAR 0 4
22133: MINUS
22134: ST_TO_ADDR
// max_x := x + r ;
22135: LD_ADDR_VAR 0 9
22139: PUSH
22140: LD_VAR 0 2
22144: PUSH
22145: LD_VAR 0 4
22149: PLUS
22150: ST_TO_ADDR
// max_y := y + r ;
22151: LD_ADDR_VAR 0 10
22155: PUSH
22156: LD_VAR 0 3
22160: PUSH
22161: LD_VAR 0 4
22165: PLUS
22166: ST_TO_ADDR
// for _x = min_x to max_x do
22167: LD_ADDR_VAR 0 11
22171: PUSH
22172: DOUBLE
22173: LD_VAR 0 7
22177: DEC
22178: ST_TO_ADDR
22179: LD_VAR 0 9
22183: PUSH
22184: FOR_TO
22185: IFFALSE 22302
// for _y = min_y to max_y do
22187: LD_ADDR_VAR 0 12
22191: PUSH
22192: DOUBLE
22193: LD_VAR 0 8
22197: DEC
22198: ST_TO_ADDR
22199: LD_VAR 0 10
22203: PUSH
22204: FOR_TO
22205: IFFALSE 22298
// begin if not ValidHex ( _x , _y ) then
22207: LD_VAR 0 11
22211: PPUSH
22212: LD_VAR 0 12
22216: PPUSH
22217: CALL_OW 488
22221: NOT
22222: IFFALSE 22226
// continue ;
22224: GO 22204
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22226: LD_VAR 0 11
22230: PPUSH
22231: LD_VAR 0 12
22235: PPUSH
22236: CALL_OW 351
22240: PUSH
22241: LD_VAR 0 11
22245: PPUSH
22246: LD_VAR 0 12
22250: PPUSH
22251: CALL_OW 554
22255: AND
22256: IFFALSE 22296
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22258: LD_ADDR_VAR 0 13
22262: PUSH
22263: LD_VAR 0 13
22267: PPUSH
22268: LD_VAR 0 13
22272: PUSH
22273: LD_INT 1
22275: PLUS
22276: PPUSH
22277: LD_VAR 0 11
22281: PUSH
22282: LD_VAR 0 12
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PPUSH
22291: CALL_OW 2
22295: ST_TO_ADDR
// end ;
22296: GO 22204
22298: POP
22299: POP
22300: GO 22184
22302: POP
22303: POP
// if not list then
22304: LD_VAR 0 13
22308: NOT
22309: IFFALSE 22313
// exit ;
22311: GO 22384
// for i in list do
22313: LD_ADDR_VAR 0 6
22317: PUSH
22318: LD_VAR 0 13
22322: PUSH
22323: FOR_IN
22324: IFFALSE 22382
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22326: LD_VAR 0 1
22330: PPUSH
22331: LD_STRING M
22333: PUSH
22334: LD_VAR 0 6
22338: PUSH
22339: LD_INT 1
22341: ARRAY
22342: PUSH
22343: LD_VAR 0 6
22347: PUSH
22348: LD_INT 2
22350: ARRAY
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: LD_INT 0
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: PUSH
22373: EMPTY
22374: LIST
22375: PPUSH
22376: CALL_OW 447
22380: GO 22323
22382: POP
22383: POP
// end ;
22384: LD_VAR 0 5
22388: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
22396: PPUSH
22397: PPUSH
22398: PPUSH
22399: PPUSH
22400: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 302
22410: NOT
22411: PUSH
22412: LD_VAR 0 2
22416: PPUSH
22417: LD_VAR 0 3
22421: PPUSH
22422: CALL_OW 488
22426: NOT
22427: OR
22428: PUSH
22429: LD_VAR 0 4
22433: NOT
22434: OR
22435: IFFALSE 22439
// exit ;
22437: GO 22952
// list := [ ] ;
22439: LD_ADDR_VAR 0 13
22443: PUSH
22444: EMPTY
22445: ST_TO_ADDR
// if x - r < 0 then
22446: LD_VAR 0 2
22450: PUSH
22451: LD_VAR 0 4
22455: MINUS
22456: PUSH
22457: LD_INT 0
22459: LESS
22460: IFFALSE 22472
// min_x := 0 else
22462: LD_ADDR_VAR 0 7
22466: PUSH
22467: LD_INT 0
22469: ST_TO_ADDR
22470: GO 22488
// min_x := x - r ;
22472: LD_ADDR_VAR 0 7
22476: PUSH
22477: LD_VAR 0 2
22481: PUSH
22482: LD_VAR 0 4
22486: MINUS
22487: ST_TO_ADDR
// if y - r < 0 then
22488: LD_VAR 0 3
22492: PUSH
22493: LD_VAR 0 4
22497: MINUS
22498: PUSH
22499: LD_INT 0
22501: LESS
22502: IFFALSE 22514
// min_y := 0 else
22504: LD_ADDR_VAR 0 8
22508: PUSH
22509: LD_INT 0
22511: ST_TO_ADDR
22512: GO 22530
// min_y := y - r ;
22514: LD_ADDR_VAR 0 8
22518: PUSH
22519: LD_VAR 0 3
22523: PUSH
22524: LD_VAR 0 4
22528: MINUS
22529: ST_TO_ADDR
// max_x := x + r ;
22530: LD_ADDR_VAR 0 9
22534: PUSH
22535: LD_VAR 0 2
22539: PUSH
22540: LD_VAR 0 4
22544: PLUS
22545: ST_TO_ADDR
// max_y := y + r ;
22546: LD_ADDR_VAR 0 10
22550: PUSH
22551: LD_VAR 0 3
22555: PUSH
22556: LD_VAR 0 4
22560: PLUS
22561: ST_TO_ADDR
// for _x = min_x to max_x do
22562: LD_ADDR_VAR 0 11
22566: PUSH
22567: DOUBLE
22568: LD_VAR 0 7
22572: DEC
22573: ST_TO_ADDR
22574: LD_VAR 0 9
22578: PUSH
22579: FOR_TO
22580: IFFALSE 22697
// for _y = min_y to max_y do
22582: LD_ADDR_VAR 0 12
22586: PUSH
22587: DOUBLE
22588: LD_VAR 0 8
22592: DEC
22593: ST_TO_ADDR
22594: LD_VAR 0 10
22598: PUSH
22599: FOR_TO
22600: IFFALSE 22693
// begin if not ValidHex ( _x , _y ) then
22602: LD_VAR 0 11
22606: PPUSH
22607: LD_VAR 0 12
22611: PPUSH
22612: CALL_OW 488
22616: NOT
22617: IFFALSE 22621
// continue ;
22619: GO 22599
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22621: LD_VAR 0 11
22625: PPUSH
22626: LD_VAR 0 12
22630: PPUSH
22631: CALL_OW 351
22635: PUSH
22636: LD_VAR 0 11
22640: PPUSH
22641: LD_VAR 0 12
22645: PPUSH
22646: CALL_OW 554
22650: AND
22651: IFFALSE 22691
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22653: LD_ADDR_VAR 0 13
22657: PUSH
22658: LD_VAR 0 13
22662: PPUSH
22663: LD_VAR 0 13
22667: PUSH
22668: LD_INT 1
22670: PLUS
22671: PPUSH
22672: LD_VAR 0 11
22676: PUSH
22677: LD_VAR 0 12
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PPUSH
22686: CALL_OW 2
22690: ST_TO_ADDR
// end ;
22691: GO 22599
22693: POP
22694: POP
22695: GO 22579
22697: POP
22698: POP
// if not list then
22699: LD_VAR 0 13
22703: NOT
22704: IFFALSE 22708
// exit ;
22706: GO 22952
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22708: LD_ADDR_VAR 0 13
22712: PUSH
22713: LD_VAR 0 1
22717: PPUSH
22718: LD_VAR 0 13
22722: PPUSH
22723: LD_INT 1
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: CALL 31828 0 4
22733: ST_TO_ADDR
// ComStop ( flame ) ;
22734: LD_VAR 0 1
22738: PPUSH
22739: CALL_OW 141
// for i in list do
22743: LD_ADDR_VAR 0 6
22747: PUSH
22748: LD_VAR 0 13
22752: PUSH
22753: FOR_IN
22754: IFFALSE 22785
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22756: LD_VAR 0 1
22760: PPUSH
22761: LD_VAR 0 6
22765: PUSH
22766: LD_INT 1
22768: ARRAY
22769: PPUSH
22770: LD_VAR 0 6
22774: PUSH
22775: LD_INT 2
22777: ARRAY
22778: PPUSH
22779: CALL_OW 176
22783: GO 22753
22785: POP
22786: POP
// repeat wait ( 0 0$1 ) ;
22787: LD_INT 35
22789: PPUSH
22790: CALL_OW 67
// task := GetTaskList ( flame ) ;
22794: LD_ADDR_VAR 0 14
22798: PUSH
22799: LD_VAR 0 1
22803: PPUSH
22804: CALL_OW 437
22808: ST_TO_ADDR
// if not task then
22809: LD_VAR 0 14
22813: NOT
22814: IFFALSE 22818
// exit ;
22816: GO 22952
// if task [ 1 ] [ 1 ] <> | then
22818: LD_VAR 0 14
22822: PUSH
22823: LD_INT 1
22825: ARRAY
22826: PUSH
22827: LD_INT 1
22829: ARRAY
22830: PUSH
22831: LD_STRING |
22833: NONEQUAL
22834: IFFALSE 22838
// exit ;
22836: GO 22952
// _x := task [ 1 ] [ 2 ] ;
22838: LD_ADDR_VAR 0 11
22842: PUSH
22843: LD_VAR 0 14
22847: PUSH
22848: LD_INT 1
22850: ARRAY
22851: PUSH
22852: LD_INT 2
22854: ARRAY
22855: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22856: LD_ADDR_VAR 0 12
22860: PUSH
22861: LD_VAR 0 14
22865: PUSH
22866: LD_INT 1
22868: ARRAY
22869: PUSH
22870: LD_INT 3
22872: ARRAY
22873: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22874: LD_VAR 0 11
22878: PPUSH
22879: LD_VAR 0 12
22883: PPUSH
22884: CALL_OW 351
22888: NOT
22889: PUSH
22890: LD_VAR 0 11
22894: PPUSH
22895: LD_VAR 0 12
22899: PPUSH
22900: CALL_OW 554
22904: NOT
22905: OR
22906: IFFALSE 22940
// begin task := Delete ( task , 1 ) ;
22908: LD_ADDR_VAR 0 14
22912: PUSH
22913: LD_VAR 0 14
22917: PPUSH
22918: LD_INT 1
22920: PPUSH
22921: CALL_OW 3
22925: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
22926: LD_VAR 0 1
22930: PPUSH
22931: LD_VAR 0 14
22935: PPUSH
22936: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22940: LD_VAR 0 1
22944: PPUSH
22945: CALL_OW 314
22949: NOT
22950: IFFALSE 22787
// end ;
22952: LD_VAR 0 5
22956: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22957: LD_EXP 77
22961: NOT
22962: IFFALSE 23012
22964: GO 22966
22966: DISABLE
// begin initHack := true ;
22967: LD_ADDR_EXP 77
22971: PUSH
22972: LD_INT 1
22974: ST_TO_ADDR
// hackTanks := [ ] ;
22975: LD_ADDR_EXP 78
22979: PUSH
22980: EMPTY
22981: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22982: LD_ADDR_EXP 79
22986: PUSH
22987: EMPTY
22988: ST_TO_ADDR
// hackLimit := 3 ;
22989: LD_ADDR_EXP 80
22993: PUSH
22994: LD_INT 3
22996: ST_TO_ADDR
// hackDist := 12 ;
22997: LD_ADDR_EXP 81
23001: PUSH
23002: LD_INT 12
23004: ST_TO_ADDR
// hackCounter := [ ] ;
23005: LD_ADDR_EXP 82
23009: PUSH
23010: EMPTY
23011: ST_TO_ADDR
// end ;
23012: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23013: LD_EXP 77
23017: PUSH
23018: LD_INT 34
23020: PUSH
23021: LD_INT 99
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PPUSH
23028: CALL_OW 69
23032: AND
23033: IFFALSE 23286
23035: GO 23037
23037: DISABLE
23038: LD_INT 0
23040: PPUSH
23041: PPUSH
// begin enable ;
23042: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23043: LD_ADDR_VAR 0 1
23047: PUSH
23048: LD_INT 34
23050: PUSH
23051: LD_INT 99
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PPUSH
23058: CALL_OW 69
23062: PUSH
23063: FOR_IN
23064: IFFALSE 23284
// begin if not i in hackTanks then
23066: LD_VAR 0 1
23070: PUSH
23071: LD_EXP 78
23075: IN
23076: NOT
23077: IFFALSE 23160
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23079: LD_ADDR_EXP 78
23083: PUSH
23084: LD_EXP 78
23088: PPUSH
23089: LD_EXP 78
23093: PUSH
23094: LD_INT 1
23096: PLUS
23097: PPUSH
23098: LD_VAR 0 1
23102: PPUSH
23103: CALL_OW 1
23107: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23108: LD_ADDR_EXP 79
23112: PUSH
23113: LD_EXP 79
23117: PPUSH
23118: LD_EXP 79
23122: PUSH
23123: LD_INT 1
23125: PLUS
23126: PPUSH
23127: EMPTY
23128: PPUSH
23129: CALL_OW 1
23133: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23134: LD_ADDR_EXP 82
23138: PUSH
23139: LD_EXP 82
23143: PPUSH
23144: LD_EXP 82
23148: PUSH
23149: LD_INT 1
23151: PLUS
23152: PPUSH
23153: EMPTY
23154: PPUSH
23155: CALL_OW 1
23159: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23160: LD_VAR 0 1
23164: PPUSH
23165: CALL_OW 302
23169: NOT
23170: IFFALSE 23183
// begin HackUnlinkAll ( i ) ;
23172: LD_VAR 0 1
23176: PPUSH
23177: CALL 23289 0 1
// continue ;
23181: GO 23063
// end ; HackCheckCapturedStatus ( i ) ;
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL 23732 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23192: LD_ADDR_VAR 0 2
23196: PUSH
23197: LD_INT 81
23199: PUSH
23200: LD_VAR 0 1
23204: PPUSH
23205: CALL_OW 255
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 33
23216: PUSH
23217: LD_INT 3
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 91
23226: PUSH
23227: LD_VAR 0 1
23231: PUSH
23232: LD_EXP 81
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 50
23244: PUSH
23245: EMPTY
23246: LIST
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: PPUSH
23254: CALL_OW 69
23258: ST_TO_ADDR
// if not tmp then
23259: LD_VAR 0 2
23263: NOT
23264: IFFALSE 23268
// continue ;
23266: GO 23063
// HackLink ( i , tmp ) ;
23268: LD_VAR 0 1
23272: PPUSH
23273: LD_VAR 0 2
23277: PPUSH
23278: CALL 23425 0 2
// end ;
23282: GO 23063
23284: POP
23285: POP
// end ;
23286: PPOPN 2
23288: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23289: LD_INT 0
23291: PPUSH
23292: PPUSH
23293: PPUSH
// if not hack in hackTanks then
23294: LD_VAR 0 1
23298: PUSH
23299: LD_EXP 78
23303: IN
23304: NOT
23305: IFFALSE 23309
// exit ;
23307: GO 23420
// index := GetElementIndex ( hackTanks , hack ) ;
23309: LD_ADDR_VAR 0 4
23313: PUSH
23314: LD_EXP 78
23318: PPUSH
23319: LD_VAR 0 1
23323: PPUSH
23324: CALL 31125 0 2
23328: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23329: LD_EXP 79
23333: PUSH
23334: LD_VAR 0 4
23338: ARRAY
23339: IFFALSE 23420
// begin for i in hackTanksCaptured [ index ] do
23341: LD_ADDR_VAR 0 3
23345: PUSH
23346: LD_EXP 79
23350: PUSH
23351: LD_VAR 0 4
23355: ARRAY
23356: PUSH
23357: FOR_IN
23358: IFFALSE 23384
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23360: LD_VAR 0 3
23364: PUSH
23365: LD_INT 1
23367: ARRAY
23368: PPUSH
23369: LD_VAR 0 3
23373: PUSH
23374: LD_INT 2
23376: ARRAY
23377: PPUSH
23378: CALL_OW 235
23382: GO 23357
23384: POP
23385: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23386: LD_ADDR_EXP 79
23390: PUSH
23391: LD_EXP 79
23395: PPUSH
23396: LD_VAR 0 4
23400: PPUSH
23401: EMPTY
23402: PPUSH
23403: CALL_OW 1
23407: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23408: LD_VAR 0 1
23412: PPUSH
23413: LD_INT 0
23415: PPUSH
23416: CALL_OW 505
// end ; end ;
23420: LD_VAR 0 2
23424: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23425: LD_INT 0
23427: PPUSH
23428: PPUSH
23429: PPUSH
// if not hack in hackTanks or not vehicles then
23430: LD_VAR 0 1
23434: PUSH
23435: LD_EXP 78
23439: IN
23440: NOT
23441: PUSH
23442: LD_VAR 0 2
23446: NOT
23447: OR
23448: IFFALSE 23452
// exit ;
23450: GO 23727
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23452: LD_ADDR_VAR 0 2
23456: PUSH
23457: LD_VAR 0 1
23461: PPUSH
23462: LD_VAR 0 2
23466: PPUSH
23467: LD_INT 1
23469: PPUSH
23470: LD_INT 1
23472: PPUSH
23473: CALL 31775 0 4
23477: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23478: LD_ADDR_VAR 0 5
23482: PUSH
23483: LD_EXP 78
23487: PPUSH
23488: LD_VAR 0 1
23492: PPUSH
23493: CALL 31125 0 2
23497: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23498: LD_EXP 79
23502: PUSH
23503: LD_VAR 0 5
23507: ARRAY
23508: PUSH
23509: LD_EXP 80
23513: LESS
23514: IFFALSE 23703
// begin for i := 1 to vehicles do
23516: LD_ADDR_VAR 0 4
23520: PUSH
23521: DOUBLE
23522: LD_INT 1
23524: DEC
23525: ST_TO_ADDR
23526: LD_VAR 0 2
23530: PUSH
23531: FOR_TO
23532: IFFALSE 23701
// begin if hackTanksCaptured [ index ] = hackLimit then
23534: LD_EXP 79
23538: PUSH
23539: LD_VAR 0 5
23543: ARRAY
23544: PUSH
23545: LD_EXP 80
23549: EQUAL
23550: IFFALSE 23554
// break ;
23552: GO 23701
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23554: LD_ADDR_EXP 82
23558: PUSH
23559: LD_EXP 82
23563: PPUSH
23564: LD_VAR 0 5
23568: PPUSH
23569: LD_EXP 82
23573: PUSH
23574: LD_VAR 0 5
23578: ARRAY
23579: PUSH
23580: LD_INT 1
23582: PLUS
23583: PPUSH
23584: CALL_OW 1
23588: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23589: LD_ADDR_EXP 79
23593: PUSH
23594: LD_EXP 79
23598: PPUSH
23599: LD_VAR 0 5
23603: PUSH
23604: LD_EXP 79
23608: PUSH
23609: LD_VAR 0 5
23613: ARRAY
23614: PUSH
23615: LD_INT 1
23617: PLUS
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PPUSH
23623: LD_VAR 0 2
23627: PUSH
23628: LD_VAR 0 4
23632: ARRAY
23633: PUSH
23634: LD_VAR 0 2
23638: PUSH
23639: LD_VAR 0 4
23643: ARRAY
23644: PPUSH
23645: CALL_OW 255
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PPUSH
23654: CALL 31340 0 3
23658: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23659: LD_VAR 0 2
23663: PUSH
23664: LD_VAR 0 4
23668: ARRAY
23669: PPUSH
23670: LD_VAR 0 1
23674: PPUSH
23675: CALL_OW 255
23679: PPUSH
23680: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23684: LD_VAR 0 2
23688: PUSH
23689: LD_VAR 0 4
23693: ARRAY
23694: PPUSH
23695: CALL_OW 141
// end ;
23699: GO 23531
23701: POP
23702: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23703: LD_VAR 0 1
23707: PPUSH
23708: LD_EXP 79
23712: PUSH
23713: LD_VAR 0 5
23717: ARRAY
23718: PUSH
23719: LD_INT 0
23721: PLUS
23722: PPUSH
23723: CALL_OW 505
// end ;
23727: LD_VAR 0 3
23731: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23732: LD_INT 0
23734: PPUSH
23735: PPUSH
23736: PPUSH
23737: PPUSH
// if not hack in hackTanks then
23738: LD_VAR 0 1
23742: PUSH
23743: LD_EXP 78
23747: IN
23748: NOT
23749: IFFALSE 23753
// exit ;
23751: GO 23993
// index := GetElementIndex ( hackTanks , hack ) ;
23753: LD_ADDR_VAR 0 4
23757: PUSH
23758: LD_EXP 78
23762: PPUSH
23763: LD_VAR 0 1
23767: PPUSH
23768: CALL 31125 0 2
23772: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23773: LD_ADDR_VAR 0 3
23777: PUSH
23778: DOUBLE
23779: LD_EXP 79
23783: PUSH
23784: LD_VAR 0 4
23788: ARRAY
23789: INC
23790: ST_TO_ADDR
23791: LD_INT 1
23793: PUSH
23794: FOR_DOWNTO
23795: IFFALSE 23967
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23797: LD_ADDR_VAR 0 5
23801: PUSH
23802: LD_EXP 79
23806: PUSH
23807: LD_VAR 0 4
23811: ARRAY
23812: PUSH
23813: LD_VAR 0 3
23817: ARRAY
23818: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23819: LD_VAR 0 5
23823: PUSH
23824: LD_INT 1
23826: ARRAY
23827: PPUSH
23828: CALL_OW 302
23832: NOT
23833: PUSH
23834: LD_VAR 0 5
23838: PUSH
23839: LD_INT 1
23841: ARRAY
23842: PPUSH
23843: CALL_OW 255
23847: PUSH
23848: LD_VAR 0 1
23852: PPUSH
23853: CALL_OW 255
23857: NONEQUAL
23858: OR
23859: IFFALSE 23965
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23861: LD_VAR 0 5
23865: PUSH
23866: LD_INT 1
23868: ARRAY
23869: PPUSH
23870: CALL_OW 305
23874: PUSH
23875: LD_VAR 0 5
23879: PUSH
23880: LD_INT 1
23882: ARRAY
23883: PPUSH
23884: CALL_OW 255
23888: PUSH
23889: LD_VAR 0 1
23893: PPUSH
23894: CALL_OW 255
23898: EQUAL
23899: AND
23900: IFFALSE 23924
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23902: LD_VAR 0 5
23906: PUSH
23907: LD_INT 1
23909: ARRAY
23910: PPUSH
23911: LD_VAR 0 5
23915: PUSH
23916: LD_INT 2
23918: ARRAY
23919: PPUSH
23920: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23924: LD_ADDR_EXP 79
23928: PUSH
23929: LD_EXP 79
23933: PPUSH
23934: LD_VAR 0 4
23938: PPUSH
23939: LD_EXP 79
23943: PUSH
23944: LD_VAR 0 4
23948: ARRAY
23949: PPUSH
23950: LD_VAR 0 3
23954: PPUSH
23955: CALL_OW 3
23959: PPUSH
23960: CALL_OW 1
23964: ST_TO_ADDR
// end ; end ;
23965: GO 23794
23967: POP
23968: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23969: LD_VAR 0 1
23973: PPUSH
23974: LD_EXP 79
23978: PUSH
23979: LD_VAR 0 4
23983: ARRAY
23984: PUSH
23985: LD_INT 0
23987: PLUS
23988: PPUSH
23989: CALL_OW 505
// end ;
23993: LD_VAR 0 2
23997: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23998: LD_INT 0
24000: PPUSH
24001: PPUSH
24002: PPUSH
24003: PPUSH
// if not hack in hackTanks then
24004: LD_VAR 0 1
24008: PUSH
24009: LD_EXP 78
24013: IN
24014: NOT
24015: IFFALSE 24019
// exit ;
24017: GO 24104
// index := GetElementIndex ( hackTanks , hack ) ;
24019: LD_ADDR_VAR 0 5
24023: PUSH
24024: LD_EXP 78
24028: PPUSH
24029: LD_VAR 0 1
24033: PPUSH
24034: CALL 31125 0 2
24038: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24039: LD_ADDR_VAR 0 4
24043: PUSH
24044: DOUBLE
24045: LD_INT 1
24047: DEC
24048: ST_TO_ADDR
24049: LD_EXP 79
24053: PUSH
24054: LD_VAR 0 5
24058: ARRAY
24059: PUSH
24060: FOR_TO
24061: IFFALSE 24102
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24063: LD_EXP 79
24067: PUSH
24068: LD_VAR 0 5
24072: ARRAY
24073: PUSH
24074: LD_VAR 0 4
24078: ARRAY
24079: PUSH
24080: LD_INT 1
24082: ARRAY
24083: PUSH
24084: LD_VAR 0 2
24088: EQUAL
24089: IFFALSE 24100
// KillUnit ( vehicle ) ;
24091: LD_VAR 0 2
24095: PPUSH
24096: CALL_OW 66
24100: GO 24060
24102: POP
24103: POP
// end ;
24104: LD_VAR 0 3
24108: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24109: LD_EXP 83
24113: NOT
24114: IFFALSE 24149
24116: GO 24118
24118: DISABLE
// begin initMiner := true ;
24119: LD_ADDR_EXP 83
24123: PUSH
24124: LD_INT 1
24126: ST_TO_ADDR
// minersList := [ ] ;
24127: LD_ADDR_EXP 84
24131: PUSH
24132: EMPTY
24133: ST_TO_ADDR
// minerMinesList := [ ] ;
24134: LD_ADDR_EXP 85
24138: PUSH
24139: EMPTY
24140: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24141: LD_ADDR_EXP 86
24145: PUSH
24146: LD_INT 5
24148: ST_TO_ADDR
// end ;
24149: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24150: LD_EXP 83
24154: PUSH
24155: LD_INT 34
24157: PUSH
24158: LD_INT 81
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PPUSH
24165: CALL_OW 69
24169: AND
24170: IFFALSE 24631
24172: GO 24174
24174: DISABLE
24175: LD_INT 0
24177: PPUSH
24178: PPUSH
24179: PPUSH
24180: PPUSH
// begin enable ;
24181: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24182: LD_ADDR_VAR 0 1
24186: PUSH
24187: LD_INT 34
24189: PUSH
24190: LD_INT 81
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PPUSH
24197: CALL_OW 69
24201: PUSH
24202: FOR_IN
24203: IFFALSE 24275
// begin if not i in minersList then
24205: LD_VAR 0 1
24209: PUSH
24210: LD_EXP 84
24214: IN
24215: NOT
24216: IFFALSE 24273
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24218: LD_ADDR_EXP 84
24222: PUSH
24223: LD_EXP 84
24227: PPUSH
24228: LD_EXP 84
24232: PUSH
24233: LD_INT 1
24235: PLUS
24236: PPUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL_OW 1
24246: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24247: LD_ADDR_EXP 85
24251: PUSH
24252: LD_EXP 85
24256: PPUSH
24257: LD_EXP 85
24261: PUSH
24262: LD_INT 1
24264: PLUS
24265: PPUSH
24266: EMPTY
24267: PPUSH
24268: CALL_OW 1
24272: ST_TO_ADDR
// end end ;
24273: GO 24202
24275: POP
24276: POP
// for i := minerMinesList downto 1 do
24277: LD_ADDR_VAR 0 1
24281: PUSH
24282: DOUBLE
24283: LD_EXP 85
24287: INC
24288: ST_TO_ADDR
24289: LD_INT 1
24291: PUSH
24292: FOR_DOWNTO
24293: IFFALSE 24629
// begin if IsLive ( minersList [ i ] ) then
24295: LD_EXP 84
24299: PUSH
24300: LD_VAR 0 1
24304: ARRAY
24305: PPUSH
24306: CALL_OW 300
24310: IFFALSE 24338
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24312: LD_EXP 84
24316: PUSH
24317: LD_VAR 0 1
24321: ARRAY
24322: PPUSH
24323: LD_EXP 85
24327: PUSH
24328: LD_VAR 0 1
24332: ARRAY
24333: PPUSH
24334: CALL_OW 505
// if not minerMinesList [ i ] then
24338: LD_EXP 85
24342: PUSH
24343: LD_VAR 0 1
24347: ARRAY
24348: NOT
24349: IFFALSE 24353
// continue ;
24351: GO 24292
// for j := minerMinesList [ i ] downto 1 do
24353: LD_ADDR_VAR 0 2
24357: PUSH
24358: DOUBLE
24359: LD_EXP 85
24363: PUSH
24364: LD_VAR 0 1
24368: ARRAY
24369: INC
24370: ST_TO_ADDR
24371: LD_INT 1
24373: PUSH
24374: FOR_DOWNTO
24375: IFFALSE 24625
// begin side := GetSide ( minersList [ i ] ) ;
24377: LD_ADDR_VAR 0 3
24381: PUSH
24382: LD_EXP 84
24386: PUSH
24387: LD_VAR 0 1
24391: ARRAY
24392: PPUSH
24393: CALL_OW 255
24397: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24398: LD_ADDR_VAR 0 4
24402: PUSH
24403: LD_EXP 85
24407: PUSH
24408: LD_VAR 0 1
24412: ARRAY
24413: PUSH
24414: LD_VAR 0 2
24418: ARRAY
24419: PUSH
24420: LD_INT 1
24422: ARRAY
24423: PPUSH
24424: LD_EXP 85
24428: PUSH
24429: LD_VAR 0 1
24433: ARRAY
24434: PUSH
24435: LD_VAR 0 2
24439: ARRAY
24440: PUSH
24441: LD_INT 2
24443: ARRAY
24444: PPUSH
24445: CALL_OW 428
24449: ST_TO_ADDR
// if not tmp then
24450: LD_VAR 0 4
24454: NOT
24455: IFFALSE 24459
// continue ;
24457: GO 24374
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24459: LD_VAR 0 4
24463: PUSH
24464: LD_INT 81
24466: PUSH
24467: LD_VAR 0 3
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PPUSH
24476: CALL_OW 69
24480: IN
24481: PUSH
24482: LD_EXP 85
24486: PUSH
24487: LD_VAR 0 1
24491: ARRAY
24492: PUSH
24493: LD_VAR 0 2
24497: ARRAY
24498: PUSH
24499: LD_INT 1
24501: ARRAY
24502: PPUSH
24503: LD_EXP 85
24507: PUSH
24508: LD_VAR 0 1
24512: ARRAY
24513: PUSH
24514: LD_VAR 0 2
24518: ARRAY
24519: PUSH
24520: LD_INT 2
24522: ARRAY
24523: PPUSH
24524: CALL_OW 458
24528: AND
24529: IFFALSE 24623
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24531: LD_EXP 85
24535: PUSH
24536: LD_VAR 0 1
24540: ARRAY
24541: PUSH
24542: LD_VAR 0 2
24546: ARRAY
24547: PUSH
24548: LD_INT 1
24550: ARRAY
24551: PPUSH
24552: LD_EXP 85
24556: PUSH
24557: LD_VAR 0 1
24561: ARRAY
24562: PUSH
24563: LD_VAR 0 2
24567: ARRAY
24568: PUSH
24569: LD_INT 2
24571: ARRAY
24572: PPUSH
24573: LD_VAR 0 3
24577: PPUSH
24578: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24582: LD_ADDR_EXP 85
24586: PUSH
24587: LD_EXP 85
24591: PPUSH
24592: LD_VAR 0 1
24596: PPUSH
24597: LD_EXP 85
24601: PUSH
24602: LD_VAR 0 1
24606: ARRAY
24607: PPUSH
24608: LD_VAR 0 2
24612: PPUSH
24613: CALL_OW 3
24617: PPUSH
24618: CALL_OW 1
24622: ST_TO_ADDR
// end ; end ;
24623: GO 24374
24625: POP
24626: POP
// end ;
24627: GO 24292
24629: POP
24630: POP
// end ;
24631: PPOPN 4
24633: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24634: LD_INT 0
24636: PPUSH
24637: PPUSH
// result := false ;
24638: LD_ADDR_VAR 0 4
24642: PUSH
24643: LD_INT 0
24645: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24646: LD_VAR 0 1
24650: PPUSH
24651: CALL_OW 264
24655: PUSH
24656: LD_INT 81
24658: EQUAL
24659: NOT
24660: IFFALSE 24664
// exit ;
24662: GO 24904
// index := GetElementIndex ( minersList , unit ) ;
24664: LD_ADDR_VAR 0 5
24668: PUSH
24669: LD_EXP 84
24673: PPUSH
24674: LD_VAR 0 1
24678: PPUSH
24679: CALL 31125 0 2
24683: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24684: LD_EXP 85
24688: PUSH
24689: LD_VAR 0 5
24693: ARRAY
24694: PUSH
24695: LD_EXP 86
24699: GREATEREQUAL
24700: IFFALSE 24704
// exit ;
24702: GO 24904
// ComMoveXY ( unit , x , y ) ;
24704: LD_VAR 0 1
24708: PPUSH
24709: LD_VAR 0 2
24713: PPUSH
24714: LD_VAR 0 3
24718: PPUSH
24719: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24723: LD_INT 35
24725: PPUSH
24726: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24730: LD_VAR 0 1
24734: PPUSH
24735: LD_VAR 0 2
24739: PPUSH
24740: LD_VAR 0 3
24744: PPUSH
24745: CALL 62886 0 3
24749: NOT
24750: PUSH
24751: LD_VAR 0 1
24755: PPUSH
24756: CALL_OW 314
24760: AND
24761: IFFALSE 24765
// exit ;
24763: GO 24904
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24765: LD_VAR 0 2
24769: PPUSH
24770: LD_VAR 0 3
24774: PPUSH
24775: CALL_OW 428
24779: PUSH
24780: LD_VAR 0 1
24784: EQUAL
24785: PUSH
24786: LD_VAR 0 1
24790: PPUSH
24791: CALL_OW 314
24795: NOT
24796: AND
24797: IFFALSE 24723
// PlaySoundXY ( x , y , PlantMine ) ;
24799: LD_VAR 0 2
24803: PPUSH
24804: LD_VAR 0 3
24808: PPUSH
24809: LD_STRING PlantMine
24811: PPUSH
24812: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24816: LD_VAR 0 2
24820: PPUSH
24821: LD_VAR 0 3
24825: PPUSH
24826: LD_VAR 0 1
24830: PPUSH
24831: CALL_OW 255
24835: PPUSH
24836: LD_INT 0
24838: PPUSH
24839: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24843: LD_ADDR_EXP 85
24847: PUSH
24848: LD_EXP 85
24852: PPUSH
24853: LD_VAR 0 5
24857: PUSH
24858: LD_EXP 85
24862: PUSH
24863: LD_VAR 0 5
24867: ARRAY
24868: PUSH
24869: LD_INT 1
24871: PLUS
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PPUSH
24877: LD_VAR 0 2
24881: PUSH
24882: LD_VAR 0 3
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL 31340 0 3
24895: ST_TO_ADDR
// result := true ;
24896: LD_ADDR_VAR 0 4
24900: PUSH
24901: LD_INT 1
24903: ST_TO_ADDR
// end ;
24904: LD_VAR 0 4
24908: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24909: LD_INT 0
24911: PPUSH
24912: PPUSH
24913: PPUSH
// if not unit in minersList then
24914: LD_VAR 0 1
24918: PUSH
24919: LD_EXP 84
24923: IN
24924: NOT
24925: IFFALSE 24929
// exit ;
24927: GO 25321
// index := GetElementIndex ( minersList , unit ) ;
24929: LD_ADDR_VAR 0 6
24933: PUSH
24934: LD_EXP 84
24938: PPUSH
24939: LD_VAR 0 1
24943: PPUSH
24944: CALL 31125 0 2
24948: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24949: LD_ADDR_VAR 0 5
24953: PUSH
24954: DOUBLE
24955: LD_EXP 85
24959: PUSH
24960: LD_VAR 0 6
24964: ARRAY
24965: INC
24966: ST_TO_ADDR
24967: LD_INT 1
24969: PUSH
24970: FOR_DOWNTO
24971: IFFALSE 25132
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24973: LD_EXP 85
24977: PUSH
24978: LD_VAR 0 6
24982: ARRAY
24983: PUSH
24984: LD_VAR 0 5
24988: ARRAY
24989: PUSH
24990: LD_INT 1
24992: ARRAY
24993: PUSH
24994: LD_VAR 0 2
24998: EQUAL
24999: PUSH
25000: LD_EXP 85
25004: PUSH
25005: LD_VAR 0 6
25009: ARRAY
25010: PUSH
25011: LD_VAR 0 5
25015: ARRAY
25016: PUSH
25017: LD_INT 2
25019: ARRAY
25020: PUSH
25021: LD_VAR 0 3
25025: EQUAL
25026: AND
25027: IFFALSE 25130
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25029: LD_EXP 85
25033: PUSH
25034: LD_VAR 0 6
25038: ARRAY
25039: PUSH
25040: LD_VAR 0 5
25044: ARRAY
25045: PUSH
25046: LD_INT 1
25048: ARRAY
25049: PPUSH
25050: LD_EXP 85
25054: PUSH
25055: LD_VAR 0 6
25059: ARRAY
25060: PUSH
25061: LD_VAR 0 5
25065: ARRAY
25066: PUSH
25067: LD_INT 2
25069: ARRAY
25070: PPUSH
25071: LD_VAR 0 1
25075: PPUSH
25076: CALL_OW 255
25080: PPUSH
25081: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25085: LD_ADDR_EXP 85
25089: PUSH
25090: LD_EXP 85
25094: PPUSH
25095: LD_VAR 0 6
25099: PPUSH
25100: LD_EXP 85
25104: PUSH
25105: LD_VAR 0 6
25109: ARRAY
25110: PPUSH
25111: LD_VAR 0 5
25115: PPUSH
25116: CALL_OW 3
25120: PPUSH
25121: CALL_OW 1
25125: ST_TO_ADDR
// exit ;
25126: POP
25127: POP
25128: GO 25321
// end ; end ;
25130: GO 24970
25132: POP
25133: POP
// for i := minerMinesList [ index ] downto 1 do
25134: LD_ADDR_VAR 0 5
25138: PUSH
25139: DOUBLE
25140: LD_EXP 85
25144: PUSH
25145: LD_VAR 0 6
25149: ARRAY
25150: INC
25151: ST_TO_ADDR
25152: LD_INT 1
25154: PUSH
25155: FOR_DOWNTO
25156: IFFALSE 25319
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25158: LD_EXP 85
25162: PUSH
25163: LD_VAR 0 6
25167: ARRAY
25168: PUSH
25169: LD_VAR 0 5
25173: ARRAY
25174: PUSH
25175: LD_INT 1
25177: ARRAY
25178: PPUSH
25179: LD_EXP 85
25183: PUSH
25184: LD_VAR 0 6
25188: ARRAY
25189: PUSH
25190: LD_VAR 0 5
25194: ARRAY
25195: PUSH
25196: LD_INT 2
25198: ARRAY
25199: PPUSH
25200: LD_VAR 0 2
25204: PPUSH
25205: LD_VAR 0 3
25209: PPUSH
25210: CALL_OW 298
25214: PUSH
25215: LD_INT 6
25217: LESS
25218: IFFALSE 25317
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25220: LD_EXP 85
25224: PUSH
25225: LD_VAR 0 6
25229: ARRAY
25230: PUSH
25231: LD_VAR 0 5
25235: ARRAY
25236: PUSH
25237: LD_INT 1
25239: ARRAY
25240: PPUSH
25241: LD_EXP 85
25245: PUSH
25246: LD_VAR 0 6
25250: ARRAY
25251: PUSH
25252: LD_VAR 0 5
25256: ARRAY
25257: PUSH
25258: LD_INT 2
25260: ARRAY
25261: PPUSH
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL_OW 255
25271: PPUSH
25272: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25276: LD_ADDR_EXP 85
25280: PUSH
25281: LD_EXP 85
25285: PPUSH
25286: LD_VAR 0 6
25290: PPUSH
25291: LD_EXP 85
25295: PUSH
25296: LD_VAR 0 6
25300: ARRAY
25301: PPUSH
25302: LD_VAR 0 5
25306: PPUSH
25307: CALL_OW 3
25311: PPUSH
25312: CALL_OW 1
25316: ST_TO_ADDR
// end ; end ;
25317: GO 25155
25319: POP
25320: POP
// end ;
25321: LD_VAR 0 4
25325: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25326: LD_INT 0
25328: PPUSH
25329: PPUSH
25330: PPUSH
25331: PPUSH
25332: PPUSH
25333: PPUSH
25334: PPUSH
25335: PPUSH
25336: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25337: LD_VAR 0 1
25341: PPUSH
25342: CALL_OW 264
25346: PUSH
25347: LD_INT 81
25349: EQUAL
25350: NOT
25351: PUSH
25352: LD_VAR 0 1
25356: PUSH
25357: LD_EXP 84
25361: IN
25362: NOT
25363: OR
25364: IFFALSE 25368
// exit ;
25366: GO 25690
// index := GetElementIndex ( minersList , unit ) ;
25368: LD_ADDR_VAR 0 6
25372: PUSH
25373: LD_EXP 84
25377: PPUSH
25378: LD_VAR 0 1
25382: PPUSH
25383: CALL 31125 0 2
25387: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25388: LD_ADDR_VAR 0 8
25392: PUSH
25393: LD_EXP 86
25397: PUSH
25398: LD_EXP 85
25402: PUSH
25403: LD_VAR 0 6
25407: ARRAY
25408: MINUS
25409: ST_TO_ADDR
// if not minesFreeAmount then
25410: LD_VAR 0 8
25414: NOT
25415: IFFALSE 25419
// exit ;
25417: GO 25690
// tmp := [ ] ;
25419: LD_ADDR_VAR 0 7
25423: PUSH
25424: EMPTY
25425: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25426: LD_ADDR_VAR 0 5
25430: PUSH
25431: DOUBLE
25432: LD_INT 1
25434: DEC
25435: ST_TO_ADDR
25436: LD_VAR 0 8
25440: PUSH
25441: FOR_TO
25442: IFFALSE 25637
// begin _d := rand ( 0 , 5 ) ;
25444: LD_ADDR_VAR 0 11
25448: PUSH
25449: LD_INT 0
25451: PPUSH
25452: LD_INT 5
25454: PPUSH
25455: CALL_OW 12
25459: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25460: LD_ADDR_VAR 0 12
25464: PUSH
25465: LD_INT 2
25467: PPUSH
25468: LD_INT 6
25470: PPUSH
25471: CALL_OW 12
25475: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25476: LD_ADDR_VAR 0 9
25480: PUSH
25481: LD_VAR 0 2
25485: PPUSH
25486: LD_VAR 0 11
25490: PPUSH
25491: LD_VAR 0 12
25495: PPUSH
25496: CALL_OW 272
25500: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25501: LD_ADDR_VAR 0 10
25505: PUSH
25506: LD_VAR 0 3
25510: PPUSH
25511: LD_VAR 0 11
25515: PPUSH
25516: LD_VAR 0 12
25520: PPUSH
25521: CALL_OW 273
25525: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25526: LD_VAR 0 9
25530: PPUSH
25531: LD_VAR 0 10
25535: PPUSH
25536: CALL_OW 488
25540: PUSH
25541: LD_VAR 0 9
25545: PUSH
25546: LD_VAR 0 10
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_VAR 0 7
25559: IN
25560: NOT
25561: AND
25562: PUSH
25563: LD_VAR 0 9
25567: PPUSH
25568: LD_VAR 0 10
25572: PPUSH
25573: CALL_OW 458
25577: NOT
25578: AND
25579: IFFALSE 25621
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25581: LD_ADDR_VAR 0 7
25585: PUSH
25586: LD_VAR 0 7
25590: PPUSH
25591: LD_VAR 0 7
25595: PUSH
25596: LD_INT 1
25598: PLUS
25599: PPUSH
25600: LD_VAR 0 9
25604: PUSH
25605: LD_VAR 0 10
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PPUSH
25614: CALL_OW 1
25618: ST_TO_ADDR
25619: GO 25635
// i := i - 1 ;
25621: LD_ADDR_VAR 0 5
25625: PUSH
25626: LD_VAR 0 5
25630: PUSH
25631: LD_INT 1
25633: MINUS
25634: ST_TO_ADDR
// end ;
25635: GO 25441
25637: POP
25638: POP
// for i in tmp do
25639: LD_ADDR_VAR 0 5
25643: PUSH
25644: LD_VAR 0 7
25648: PUSH
25649: FOR_IN
25650: IFFALSE 25688
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25652: LD_VAR 0 1
25656: PPUSH
25657: LD_VAR 0 5
25661: PUSH
25662: LD_INT 1
25664: ARRAY
25665: PPUSH
25666: LD_VAR 0 5
25670: PUSH
25671: LD_INT 2
25673: ARRAY
25674: PPUSH
25675: CALL 24634 0 3
25679: NOT
25680: IFFALSE 25686
// exit ;
25682: POP
25683: POP
25684: GO 25690
25686: GO 25649
25688: POP
25689: POP
// end ;
25690: LD_VAR 0 4
25694: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
25695: LD_INT 0
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
// if GetClass ( unit ) <> class_sniper then
25706: LD_VAR 0 1
25710: PPUSH
25711: CALL_OW 257
25715: PUSH
25716: LD_INT 5
25718: NONEQUAL
25719: IFFALSE 25723
// exit ;
25721: GO 26189
// dist := 8 ;
25723: LD_ADDR_VAR 0 5
25727: PUSH
25728: LD_INT 8
25730: ST_TO_ADDR
// viewRange := 12 ;
25731: LD_ADDR_VAR 0 8
25735: PUSH
25736: LD_INT 12
25738: ST_TO_ADDR
// side := GetSide ( unit ) ;
25739: LD_ADDR_VAR 0 6
25743: PUSH
25744: LD_VAR 0 1
25748: PPUSH
25749: CALL_OW 255
25753: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25754: LD_INT 61
25756: PPUSH
25757: LD_VAR 0 6
25761: PPUSH
25762: CALL_OW 321
25766: PUSH
25767: LD_INT 2
25769: EQUAL
25770: IFFALSE 25780
// viewRange := 16 ;
25772: LD_ADDR_VAR 0 8
25776: PUSH
25777: LD_INT 16
25779: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25780: LD_VAR 0 1
25784: PPUSH
25785: LD_VAR 0 2
25789: PPUSH
25790: LD_VAR 0 3
25794: PPUSH
25795: CALL_OW 297
25799: PUSH
25800: LD_VAR 0 5
25804: GREATER
25805: IFFALSE 25884
// begin ComMoveXY ( unit , x , y ) ;
25807: LD_VAR 0 1
25811: PPUSH
25812: LD_VAR 0 2
25816: PPUSH
25817: LD_VAR 0 3
25821: PPUSH
25822: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25826: LD_INT 35
25828: PPUSH
25829: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25833: LD_VAR 0 1
25837: PPUSH
25838: LD_VAR 0 2
25842: PPUSH
25843: LD_VAR 0 3
25847: PPUSH
25848: CALL 62886 0 3
25852: NOT
25853: IFFALSE 25857
// exit ;
25855: GO 26189
// until GetDistUnitXY ( unit , x , y ) < dist ;
25857: LD_VAR 0 1
25861: PPUSH
25862: LD_VAR 0 2
25866: PPUSH
25867: LD_VAR 0 3
25871: PPUSH
25872: CALL_OW 297
25876: PUSH
25877: LD_VAR 0 5
25881: LESS
25882: IFFALSE 25826
// end ; ComTurnXY ( unit , x , y ) ;
25884: LD_VAR 0 1
25888: PPUSH
25889: LD_VAR 0 2
25893: PPUSH
25894: LD_VAR 0 3
25898: PPUSH
25899: CALL_OW 118
// repeat if Multiplayer then
25903: LD_OWVAR 4
25907: IFFALSE 25918
// wait ( 35 ) else
25909: LD_INT 35
25911: PPUSH
25912: CALL_OW 67
25916: GO 25925
// wait ( 5 ) ;
25918: LD_INT 5
25920: PPUSH
25921: CALL_OW 67
// _d := GetDir ( unit ) ;
25925: LD_ADDR_VAR 0 11
25929: PUSH
25930: LD_VAR 0 1
25934: PPUSH
25935: CALL_OW 254
25939: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
25940: LD_ADDR_VAR 0 7
25944: PUSH
25945: LD_VAR 0 1
25949: PPUSH
25950: CALL_OW 250
25954: PPUSH
25955: LD_VAR 0 1
25959: PPUSH
25960: CALL_OW 251
25964: PPUSH
25965: LD_VAR 0 2
25969: PPUSH
25970: LD_VAR 0 3
25974: PPUSH
25975: CALL 65494 0 4
25979: ST_TO_ADDR
// until dir = _d ;
25980: LD_VAR 0 7
25984: PUSH
25985: LD_VAR 0 11
25989: EQUAL
25990: IFFALSE 25903
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
25992: LD_ADDR_VAR 0 9
25996: PUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 250
26006: PPUSH
26007: LD_VAR 0 7
26011: PPUSH
26012: LD_VAR 0 5
26016: PPUSH
26017: CALL_OW 272
26021: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26022: LD_ADDR_VAR 0 10
26026: PUSH
26027: LD_VAR 0 1
26031: PPUSH
26032: CALL_OW 251
26036: PPUSH
26037: LD_VAR 0 7
26041: PPUSH
26042: LD_VAR 0 5
26046: PPUSH
26047: CALL_OW 273
26051: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26052: LD_VAR 0 9
26056: PPUSH
26057: LD_VAR 0 10
26061: PPUSH
26062: CALL_OW 488
26066: NOT
26067: IFFALSE 26071
// exit ;
26069: GO 26189
// ComAnimCustom ( unit , 1 ) ;
26071: LD_VAR 0 1
26075: PPUSH
26076: LD_INT 1
26078: PPUSH
26079: CALL_OW 592
// p := 0 ;
26083: LD_ADDR_VAR 0 12
26087: PUSH
26088: LD_INT 0
26090: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26091: LD_VAR 0 9
26095: PPUSH
26096: LD_VAR 0 10
26100: PPUSH
26101: LD_VAR 0 6
26105: PPUSH
26106: LD_VAR 0 8
26110: PPUSH
26111: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
26115: LD_INT 35
26117: PPUSH
26118: CALL_OW 67
// p := Inc ( p ) ;
26122: LD_ADDR_VAR 0 12
26126: PUSH
26127: LD_VAR 0 12
26131: PPUSH
26132: CALL 65450 0 1
26136: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
26137: LD_VAR 0 12
26141: PUSH
26142: LD_INT 3
26144: EQUAL
26145: PUSH
26146: LD_VAR 0 1
26150: PPUSH
26151: CALL_OW 302
26155: NOT
26156: OR
26157: PUSH
26158: LD_VAR 0 1
26162: PPUSH
26163: CALL_OW 301
26167: OR
26168: IFFALSE 26115
// RemoveSeeing ( _x , _y , side ) ;
26170: LD_VAR 0 9
26174: PPUSH
26175: LD_VAR 0 10
26179: PPUSH
26180: LD_VAR 0 6
26184: PPUSH
26185: CALL_OW 331
// end ; end_of_file
26189: LD_VAR 0 4
26193: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26194: LD_VAR 0 1
26198: PUSH
26199: LD_INT 200
26201: DOUBLE
26202: GREATEREQUAL
26203: IFFALSE 26211
26205: LD_INT 299
26207: DOUBLE
26208: LESSEQUAL
26209: IFTRUE 26213
26211: GO 26245
26213: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26214: LD_VAR 0 1
26218: PPUSH
26219: LD_VAR 0 2
26223: PPUSH
26224: LD_VAR 0 3
26228: PPUSH
26229: LD_VAR 0 4
26233: PPUSH
26234: LD_VAR 0 5
26238: PPUSH
26239: CALL 21495 0 5
26243: GO 26322
26245: LD_INT 300
26247: DOUBLE
26248: GREATEREQUAL
26249: IFFALSE 26257
26251: LD_INT 399
26253: DOUBLE
26254: LESSEQUAL
26255: IFTRUE 26259
26257: GO 26321
26259: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26260: LD_VAR 0 1
26264: PPUSH
26265: LD_VAR 0 2
26269: PPUSH
26270: LD_VAR 0 3
26274: PPUSH
26275: LD_VAR 0 4
26279: PPUSH
26280: LD_VAR 0 5
26284: PPUSH
26285: LD_VAR 0 6
26289: PPUSH
26290: LD_VAR 0 7
26294: PPUSH
26295: LD_VAR 0 8
26299: PPUSH
26300: LD_VAR 0 9
26304: PPUSH
26305: LD_VAR 0 10
26309: PPUSH
26310: LD_VAR 0 11
26314: PPUSH
26315: CALL 17483 0 11
26319: GO 26322
26321: POP
// end ;
26322: PPOPN 11
26324: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26325: LD_VAR 0 1
26329: PPUSH
26330: LD_VAR 0 2
26334: PPUSH
26335: LD_VAR 0 3
26339: PPUSH
26340: LD_VAR 0 4
26344: PPUSH
26345: LD_VAR 0 5
26349: PPUSH
26350: CALL 20960 0 5
// end ; end_of_file
26354: PPOPN 5
26356: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26357: LD_INT 0
26359: PPUSH
26360: PPUSH
// if exist_mode then
26361: LD_VAR 0 2
26365: IFFALSE 26411
// begin unit := CreateCharacter ( prefix & ident ) ;
26367: LD_ADDR_VAR 0 5
26371: PUSH
26372: LD_VAR 0 3
26376: PUSH
26377: LD_VAR 0 1
26381: STR
26382: PPUSH
26383: CALL_OW 34
26387: ST_TO_ADDR
// if unit then
26388: LD_VAR 0 5
26392: IFFALSE 26409
// DeleteCharacters ( prefix & ident ) ;
26394: LD_VAR 0 3
26398: PUSH
26399: LD_VAR 0 1
26403: STR
26404: PPUSH
26405: CALL_OW 40
// end else
26409: GO 26426
// unit := NewCharacter ( ident ) ;
26411: LD_ADDR_VAR 0 5
26415: PUSH
26416: LD_VAR 0 1
26420: PPUSH
26421: CALL_OW 25
26425: ST_TO_ADDR
// result := unit ;
26426: LD_ADDR_VAR 0 4
26430: PUSH
26431: LD_VAR 0 5
26435: ST_TO_ADDR
// end ;
26436: LD_VAR 0 4
26440: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26441: LD_INT 0
26443: PPUSH
26444: PPUSH
// if not side or not nation then
26445: LD_VAR 0 1
26449: NOT
26450: PUSH
26451: LD_VAR 0 2
26455: NOT
26456: OR
26457: IFFALSE 26461
// exit ;
26459: GO 27229
// case nation of nation_american :
26461: LD_VAR 0 2
26465: PUSH
26466: LD_INT 1
26468: DOUBLE
26469: EQUAL
26470: IFTRUE 26474
26472: GO 26688
26474: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26475: LD_ADDR_VAR 0 4
26479: PUSH
26480: LD_INT 35
26482: PUSH
26483: LD_INT 45
26485: PUSH
26486: LD_INT 46
26488: PUSH
26489: LD_INT 47
26491: PUSH
26492: LD_INT 82
26494: PUSH
26495: LD_INT 83
26497: PUSH
26498: LD_INT 84
26500: PUSH
26501: LD_INT 85
26503: PUSH
26504: LD_INT 86
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 6
26515: PUSH
26516: LD_INT 15
26518: PUSH
26519: LD_INT 16
26521: PUSH
26522: LD_INT 7
26524: PUSH
26525: LD_INT 12
26527: PUSH
26528: LD_INT 13
26530: PUSH
26531: LD_INT 10
26533: PUSH
26534: LD_INT 14
26536: PUSH
26537: LD_INT 20
26539: PUSH
26540: LD_INT 21
26542: PUSH
26543: LD_INT 22
26545: PUSH
26546: LD_INT 25
26548: PUSH
26549: LD_INT 32
26551: PUSH
26552: LD_INT 27
26554: PUSH
26555: LD_INT 36
26557: PUSH
26558: LD_INT 69
26560: PUSH
26561: LD_INT 39
26563: PUSH
26564: LD_INT 34
26566: PUSH
26567: LD_INT 40
26569: PUSH
26570: LD_INT 48
26572: PUSH
26573: LD_INT 49
26575: PUSH
26576: LD_INT 50
26578: PUSH
26579: LD_INT 51
26581: PUSH
26582: LD_INT 52
26584: PUSH
26585: LD_INT 53
26587: PUSH
26588: LD_INT 54
26590: PUSH
26591: LD_INT 55
26593: PUSH
26594: LD_INT 56
26596: PUSH
26597: LD_INT 57
26599: PUSH
26600: LD_INT 58
26602: PUSH
26603: LD_INT 59
26605: PUSH
26606: LD_INT 60
26608: PUSH
26609: LD_INT 61
26611: PUSH
26612: LD_INT 62
26614: PUSH
26615: LD_INT 80
26617: PUSH
26618: LD_INT 82
26620: PUSH
26621: LD_INT 83
26623: PUSH
26624: LD_INT 84
26626: PUSH
26627: LD_INT 85
26629: PUSH
26630: LD_INT 86
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: ST_TO_ADDR
26686: GO 27153
26688: LD_INT 2
26690: DOUBLE
26691: EQUAL
26692: IFTRUE 26696
26694: GO 26922
26696: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26697: LD_ADDR_VAR 0 4
26701: PUSH
26702: LD_INT 35
26704: PUSH
26705: LD_INT 45
26707: PUSH
26708: LD_INT 46
26710: PUSH
26711: LD_INT 47
26713: PUSH
26714: LD_INT 82
26716: PUSH
26717: LD_INT 83
26719: PUSH
26720: LD_INT 84
26722: PUSH
26723: LD_INT 85
26725: PUSH
26726: LD_INT 87
26728: PUSH
26729: LD_INT 70
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: LD_INT 11
26737: PUSH
26738: LD_INT 3
26740: PUSH
26741: LD_INT 4
26743: PUSH
26744: LD_INT 5
26746: PUSH
26747: LD_INT 6
26749: PUSH
26750: LD_INT 15
26752: PUSH
26753: LD_INT 18
26755: PUSH
26756: LD_INT 7
26758: PUSH
26759: LD_INT 17
26761: PUSH
26762: LD_INT 8
26764: PUSH
26765: LD_INT 20
26767: PUSH
26768: LD_INT 21
26770: PUSH
26771: LD_INT 22
26773: PUSH
26774: LD_INT 72
26776: PUSH
26777: LD_INT 26
26779: PUSH
26780: LD_INT 69
26782: PUSH
26783: LD_INT 39
26785: PUSH
26786: LD_INT 40
26788: PUSH
26789: LD_INT 41
26791: PUSH
26792: LD_INT 42
26794: PUSH
26795: LD_INT 43
26797: PUSH
26798: LD_INT 48
26800: PUSH
26801: LD_INT 49
26803: PUSH
26804: LD_INT 50
26806: PUSH
26807: LD_INT 51
26809: PUSH
26810: LD_INT 52
26812: PUSH
26813: LD_INT 53
26815: PUSH
26816: LD_INT 54
26818: PUSH
26819: LD_INT 55
26821: PUSH
26822: LD_INT 56
26824: PUSH
26825: LD_INT 60
26827: PUSH
26828: LD_INT 61
26830: PUSH
26831: LD_INT 62
26833: PUSH
26834: LD_INT 66
26836: PUSH
26837: LD_INT 67
26839: PUSH
26840: LD_INT 68
26842: PUSH
26843: LD_INT 81
26845: PUSH
26846: LD_INT 82
26848: PUSH
26849: LD_INT 83
26851: PUSH
26852: LD_INT 84
26854: PUSH
26855: LD_INT 85
26857: PUSH
26858: LD_INT 87
26860: PUSH
26861: LD_INT 88
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: ST_TO_ADDR
26920: GO 27153
26922: LD_INT 3
26924: DOUBLE
26925: EQUAL
26926: IFTRUE 26930
26928: GO 27152
26930: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26931: LD_ADDR_VAR 0 4
26935: PUSH
26936: LD_INT 46
26938: PUSH
26939: LD_INT 47
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: LD_INT 2
26947: PUSH
26948: LD_INT 82
26950: PUSH
26951: LD_INT 83
26953: PUSH
26954: LD_INT 84
26956: PUSH
26957: LD_INT 85
26959: PUSH
26960: LD_INT 86
26962: PUSH
26963: LD_INT 11
26965: PUSH
26966: LD_INT 9
26968: PUSH
26969: LD_INT 20
26971: PUSH
26972: LD_INT 19
26974: PUSH
26975: LD_INT 21
26977: PUSH
26978: LD_INT 24
26980: PUSH
26981: LD_INT 22
26983: PUSH
26984: LD_INT 25
26986: PUSH
26987: LD_INT 28
26989: PUSH
26990: LD_INT 29
26992: PUSH
26993: LD_INT 30
26995: PUSH
26996: LD_INT 31
26998: PUSH
26999: LD_INT 37
27001: PUSH
27002: LD_INT 38
27004: PUSH
27005: LD_INT 32
27007: PUSH
27008: LD_INT 27
27010: PUSH
27011: LD_INT 33
27013: PUSH
27014: LD_INT 69
27016: PUSH
27017: LD_INT 39
27019: PUSH
27020: LD_INT 34
27022: PUSH
27023: LD_INT 40
27025: PUSH
27026: LD_INT 71
27028: PUSH
27029: LD_INT 23
27031: PUSH
27032: LD_INT 44
27034: PUSH
27035: LD_INT 48
27037: PUSH
27038: LD_INT 49
27040: PUSH
27041: LD_INT 50
27043: PUSH
27044: LD_INT 51
27046: PUSH
27047: LD_INT 52
27049: PUSH
27050: LD_INT 53
27052: PUSH
27053: LD_INT 54
27055: PUSH
27056: LD_INT 55
27058: PUSH
27059: LD_INT 56
27061: PUSH
27062: LD_INT 57
27064: PUSH
27065: LD_INT 58
27067: PUSH
27068: LD_INT 59
27070: PUSH
27071: LD_INT 63
27073: PUSH
27074: LD_INT 64
27076: PUSH
27077: LD_INT 65
27079: PUSH
27080: LD_INT 82
27082: PUSH
27083: LD_INT 83
27085: PUSH
27086: LD_INT 84
27088: PUSH
27089: LD_INT 85
27091: PUSH
27092: LD_INT 86
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: ST_TO_ADDR
27150: GO 27153
27152: POP
// if state > - 1 and state < 3 then
27153: LD_VAR 0 3
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: GREATER
27162: PUSH
27163: LD_VAR 0 3
27167: PUSH
27168: LD_INT 3
27170: LESS
27171: AND
27172: IFFALSE 27229
// for i in result do
27174: LD_ADDR_VAR 0 5
27178: PUSH
27179: LD_VAR 0 4
27183: PUSH
27184: FOR_IN
27185: IFFALSE 27227
// if GetTech ( i , side ) <> state then
27187: LD_VAR 0 5
27191: PPUSH
27192: LD_VAR 0 1
27196: PPUSH
27197: CALL_OW 321
27201: PUSH
27202: LD_VAR 0 3
27206: NONEQUAL
27207: IFFALSE 27225
// result := result diff i ;
27209: LD_ADDR_VAR 0 4
27213: PUSH
27214: LD_VAR 0 4
27218: PUSH
27219: LD_VAR 0 5
27223: DIFF
27224: ST_TO_ADDR
27225: GO 27184
27227: POP
27228: POP
// end ;
27229: LD_VAR 0 4
27233: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
27238: PPUSH
// result := true ;
27239: LD_ADDR_VAR 0 3
27243: PUSH
27244: LD_INT 1
27246: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27247: LD_ADDR_VAR 0 5
27251: PUSH
27252: LD_VAR 0 2
27256: PPUSH
27257: CALL_OW 480
27261: ST_TO_ADDR
// if not tmp then
27262: LD_VAR 0 5
27266: NOT
27267: IFFALSE 27271
// exit ;
27269: GO 27320
// for i in tmp do
27271: LD_ADDR_VAR 0 4
27275: PUSH
27276: LD_VAR 0 5
27280: PUSH
27281: FOR_IN
27282: IFFALSE 27318
// if GetTech ( i , side ) <> state_researched then
27284: LD_VAR 0 4
27288: PPUSH
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL_OW 321
27298: PUSH
27299: LD_INT 2
27301: NONEQUAL
27302: IFFALSE 27316
// begin result := false ;
27304: LD_ADDR_VAR 0 3
27308: PUSH
27309: LD_INT 0
27311: ST_TO_ADDR
// exit ;
27312: POP
27313: POP
27314: GO 27320
// end ;
27316: GO 27281
27318: POP
27319: POP
// end ;
27320: LD_VAR 0 3
27324: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27325: LD_INT 0
27327: PPUSH
27328: PPUSH
27329: PPUSH
27330: PPUSH
27331: PPUSH
27332: PPUSH
27333: PPUSH
27334: PPUSH
27335: PPUSH
27336: PPUSH
27337: PPUSH
27338: PPUSH
27339: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27340: LD_VAR 0 1
27344: NOT
27345: PUSH
27346: LD_VAR 0 1
27350: PPUSH
27351: CALL_OW 257
27355: PUSH
27356: LD_INT 9
27358: NONEQUAL
27359: OR
27360: IFFALSE 27364
// exit ;
27362: GO 27937
// side := GetSide ( unit ) ;
27364: LD_ADDR_VAR 0 9
27368: PUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL_OW 255
27378: ST_TO_ADDR
// tech_space := tech_spacanom ;
27379: LD_ADDR_VAR 0 12
27383: PUSH
27384: LD_INT 29
27386: ST_TO_ADDR
// tech_time := tech_taurad ;
27387: LD_ADDR_VAR 0 13
27391: PUSH
27392: LD_INT 28
27394: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27395: LD_ADDR_VAR 0 11
27399: PUSH
27400: LD_VAR 0 1
27404: PPUSH
27405: CALL_OW 310
27409: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27410: LD_VAR 0 11
27414: PPUSH
27415: CALL_OW 247
27419: PUSH
27420: LD_INT 2
27422: EQUAL
27423: IFFALSE 27427
// exit ;
27425: GO 27937
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27427: LD_ADDR_VAR 0 8
27431: PUSH
27432: LD_INT 81
27434: PUSH
27435: LD_VAR 0 9
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 3
27446: PUSH
27447: LD_INT 21
27449: PUSH
27450: LD_INT 3
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PPUSH
27465: CALL_OW 69
27469: ST_TO_ADDR
// if not tmp then
27470: LD_VAR 0 8
27474: NOT
27475: IFFALSE 27479
// exit ;
27477: GO 27937
// if in_unit then
27479: LD_VAR 0 11
27483: IFFALSE 27507
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27485: LD_ADDR_VAR 0 10
27489: PUSH
27490: LD_VAR 0 8
27494: PPUSH
27495: LD_VAR 0 11
27499: PPUSH
27500: CALL_OW 74
27504: ST_TO_ADDR
27505: GO 27527
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27507: LD_ADDR_VAR 0 10
27511: PUSH
27512: LD_VAR 0 8
27516: PPUSH
27517: LD_VAR 0 1
27521: PPUSH
27522: CALL_OW 74
27526: ST_TO_ADDR
// if not enemy then
27527: LD_VAR 0 10
27531: NOT
27532: IFFALSE 27536
// exit ;
27534: GO 27937
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27536: LD_VAR 0 11
27540: PUSH
27541: LD_VAR 0 11
27545: PPUSH
27546: LD_VAR 0 10
27550: PPUSH
27551: CALL_OW 296
27555: PUSH
27556: LD_INT 13
27558: GREATER
27559: AND
27560: PUSH
27561: LD_VAR 0 1
27565: PPUSH
27566: LD_VAR 0 10
27570: PPUSH
27571: CALL_OW 296
27575: PUSH
27576: LD_INT 12
27578: GREATER
27579: OR
27580: IFFALSE 27584
// exit ;
27582: GO 27937
// missile := [ 1 ] ;
27584: LD_ADDR_VAR 0 14
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27595: LD_VAR 0 9
27599: PPUSH
27600: LD_VAR 0 12
27604: PPUSH
27605: CALL_OW 325
27609: IFFALSE 27638
// missile := Replace ( missile , missile + 1 , 2 ) ;
27611: LD_ADDR_VAR 0 14
27615: PUSH
27616: LD_VAR 0 14
27620: PPUSH
27621: LD_VAR 0 14
27625: PUSH
27626: LD_INT 1
27628: PLUS
27629: PPUSH
27630: LD_INT 2
27632: PPUSH
27633: CALL_OW 1
27637: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27638: LD_VAR 0 9
27642: PPUSH
27643: LD_VAR 0 13
27647: PPUSH
27648: CALL_OW 325
27652: PUSH
27653: LD_VAR 0 10
27657: PPUSH
27658: CALL_OW 255
27662: PPUSH
27663: LD_VAR 0 13
27667: PPUSH
27668: CALL_OW 325
27672: NOT
27673: AND
27674: IFFALSE 27703
// missile := Replace ( missile , missile + 1 , 3 ) ;
27676: LD_ADDR_VAR 0 14
27680: PUSH
27681: LD_VAR 0 14
27685: PPUSH
27686: LD_VAR 0 14
27690: PUSH
27691: LD_INT 1
27693: PLUS
27694: PPUSH
27695: LD_INT 3
27697: PPUSH
27698: CALL_OW 1
27702: ST_TO_ADDR
// if missile < 2 then
27703: LD_VAR 0 14
27707: PUSH
27708: LD_INT 2
27710: LESS
27711: IFFALSE 27715
// exit ;
27713: GO 27937
// x := GetX ( enemy ) ;
27715: LD_ADDR_VAR 0 4
27719: PUSH
27720: LD_VAR 0 10
27724: PPUSH
27725: CALL_OW 250
27729: ST_TO_ADDR
// y := GetY ( enemy ) ;
27730: LD_ADDR_VAR 0 5
27734: PUSH
27735: LD_VAR 0 10
27739: PPUSH
27740: CALL_OW 251
27744: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27745: LD_ADDR_VAR 0 6
27749: PUSH
27750: LD_VAR 0 4
27754: PUSH
27755: LD_INT 1
27757: NEG
27758: PPUSH
27759: LD_INT 1
27761: PPUSH
27762: CALL_OW 12
27766: PLUS
27767: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27768: LD_ADDR_VAR 0 7
27772: PUSH
27773: LD_VAR 0 5
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PPUSH
27782: LD_INT 1
27784: PPUSH
27785: CALL_OW 12
27789: PLUS
27790: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27791: LD_VAR 0 6
27795: PPUSH
27796: LD_VAR 0 7
27800: PPUSH
27801: CALL_OW 488
27805: NOT
27806: IFFALSE 27828
// begin _x := x ;
27808: LD_ADDR_VAR 0 6
27812: PUSH
27813: LD_VAR 0 4
27817: ST_TO_ADDR
// _y := y ;
27818: LD_ADDR_VAR 0 7
27822: PUSH
27823: LD_VAR 0 5
27827: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27828: LD_ADDR_VAR 0 3
27832: PUSH
27833: LD_INT 1
27835: PPUSH
27836: LD_VAR 0 14
27840: PPUSH
27841: CALL_OW 12
27845: ST_TO_ADDR
// case i of 1 :
27846: LD_VAR 0 3
27850: PUSH
27851: LD_INT 1
27853: DOUBLE
27854: EQUAL
27855: IFTRUE 27859
27857: GO 27876
27859: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27860: LD_VAR 0 1
27864: PPUSH
27865: LD_VAR 0 10
27869: PPUSH
27870: CALL_OW 115
27874: GO 27937
27876: LD_INT 2
27878: DOUBLE
27879: EQUAL
27880: IFTRUE 27884
27882: GO 27906
27884: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27885: LD_VAR 0 1
27889: PPUSH
27890: LD_VAR 0 6
27894: PPUSH
27895: LD_VAR 0 7
27899: PPUSH
27900: CALL_OW 153
27904: GO 27937
27906: LD_INT 3
27908: DOUBLE
27909: EQUAL
27910: IFTRUE 27914
27912: GO 27936
27914: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27915: LD_VAR 0 1
27919: PPUSH
27920: LD_VAR 0 6
27924: PPUSH
27925: LD_VAR 0 7
27929: PPUSH
27930: CALL_OW 154
27934: GO 27937
27936: POP
// end ;
27937: LD_VAR 0 2
27941: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27942: LD_INT 0
27944: PPUSH
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
// if not unit or not building then
27950: LD_VAR 0 1
27954: NOT
27955: PUSH
27956: LD_VAR 0 2
27960: NOT
27961: OR
27962: IFFALSE 27966
// exit ;
27964: GO 28124
// x := GetX ( building ) ;
27966: LD_ADDR_VAR 0 5
27970: PUSH
27971: LD_VAR 0 2
27975: PPUSH
27976: CALL_OW 250
27980: ST_TO_ADDR
// y := GetY ( building ) ;
27981: LD_ADDR_VAR 0 6
27985: PUSH
27986: LD_VAR 0 2
27990: PPUSH
27991: CALL_OW 251
27995: ST_TO_ADDR
// for i = 0 to 5 do
27996: LD_ADDR_VAR 0 4
28000: PUSH
28001: DOUBLE
28002: LD_INT 0
28004: DEC
28005: ST_TO_ADDR
28006: LD_INT 5
28008: PUSH
28009: FOR_TO
28010: IFFALSE 28122
// begin _x := ShiftX ( x , i , 3 ) ;
28012: LD_ADDR_VAR 0 7
28016: PUSH
28017: LD_VAR 0 5
28021: PPUSH
28022: LD_VAR 0 4
28026: PPUSH
28027: LD_INT 3
28029: PPUSH
28030: CALL_OW 272
28034: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28035: LD_ADDR_VAR 0 8
28039: PUSH
28040: LD_VAR 0 6
28044: PPUSH
28045: LD_VAR 0 4
28049: PPUSH
28050: LD_INT 3
28052: PPUSH
28053: CALL_OW 273
28057: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28058: LD_VAR 0 7
28062: PPUSH
28063: LD_VAR 0 8
28067: PPUSH
28068: CALL_OW 488
28072: NOT
28073: IFFALSE 28077
// continue ;
28075: GO 28009
// if HexInfo ( _x , _y ) = 0 then
28077: LD_VAR 0 7
28081: PPUSH
28082: LD_VAR 0 8
28086: PPUSH
28087: CALL_OW 428
28091: PUSH
28092: LD_INT 0
28094: EQUAL
28095: IFFALSE 28120
// begin ComMoveXY ( unit , _x , _y ) ;
28097: LD_VAR 0 1
28101: PPUSH
28102: LD_VAR 0 7
28106: PPUSH
28107: LD_VAR 0 8
28111: PPUSH
28112: CALL_OW 111
// exit ;
28116: POP
28117: POP
28118: GO 28124
// end ; end ;
28120: GO 28009
28122: POP
28123: POP
// end ;
28124: LD_VAR 0 3
28128: RET
// export function ScanBase ( side , base_area ) ; begin
28129: LD_INT 0
28131: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28132: LD_ADDR_VAR 0 3
28136: PUSH
28137: LD_VAR 0 2
28141: PPUSH
28142: LD_INT 81
28144: PUSH
28145: LD_VAR 0 1
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PPUSH
28154: CALL_OW 70
28158: ST_TO_ADDR
// end ;
28159: LD_VAR 0 3
28163: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28164: LD_INT 0
28166: PPUSH
28167: PPUSH
28168: PPUSH
28169: PPUSH
// result := false ;
28170: LD_ADDR_VAR 0 2
28174: PUSH
28175: LD_INT 0
28177: ST_TO_ADDR
// side := GetSide ( unit ) ;
28178: LD_ADDR_VAR 0 3
28182: PUSH
28183: LD_VAR 0 1
28187: PPUSH
28188: CALL_OW 255
28192: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28193: LD_ADDR_VAR 0 4
28197: PUSH
28198: LD_VAR 0 1
28202: PPUSH
28203: CALL_OW 248
28207: ST_TO_ADDR
// case nat of 1 :
28208: LD_VAR 0 4
28212: PUSH
28213: LD_INT 1
28215: DOUBLE
28216: EQUAL
28217: IFTRUE 28221
28219: GO 28232
28221: POP
// tech := tech_lassight ; 2 :
28222: LD_ADDR_VAR 0 5
28226: PUSH
28227: LD_INT 12
28229: ST_TO_ADDR
28230: GO 28271
28232: LD_INT 2
28234: DOUBLE
28235: EQUAL
28236: IFTRUE 28240
28238: GO 28251
28240: POP
// tech := tech_mortar ; 3 :
28241: LD_ADDR_VAR 0 5
28245: PUSH
28246: LD_INT 41
28248: ST_TO_ADDR
28249: GO 28271
28251: LD_INT 3
28253: DOUBLE
28254: EQUAL
28255: IFTRUE 28259
28257: GO 28270
28259: POP
// tech := tech_bazooka ; end ;
28260: LD_ADDR_VAR 0 5
28264: PUSH
28265: LD_INT 44
28267: ST_TO_ADDR
28268: GO 28271
28270: POP
// if Researched ( side , tech ) then
28271: LD_VAR 0 3
28275: PPUSH
28276: LD_VAR 0 5
28280: PPUSH
28281: CALL_OW 325
28285: IFFALSE 28312
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28287: LD_ADDR_VAR 0 2
28291: PUSH
28292: LD_INT 5
28294: PUSH
28295: LD_INT 8
28297: PUSH
28298: LD_INT 9
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: LIST
28305: PUSH
28306: LD_VAR 0 4
28310: ARRAY
28311: ST_TO_ADDR
// end ;
28312: LD_VAR 0 2
28316: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28317: LD_INT 0
28319: PPUSH
28320: PPUSH
28321: PPUSH
// if not mines then
28322: LD_VAR 0 2
28326: NOT
28327: IFFALSE 28331
// exit ;
28329: GO 28475
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28331: LD_ADDR_VAR 0 5
28335: PUSH
28336: LD_INT 81
28338: PUSH
28339: LD_VAR 0 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 3
28350: PUSH
28351: LD_INT 21
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PPUSH
28369: CALL_OW 69
28373: ST_TO_ADDR
// for i in mines do
28374: LD_ADDR_VAR 0 4
28378: PUSH
28379: LD_VAR 0 2
28383: PUSH
28384: FOR_IN
28385: IFFALSE 28473
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28387: LD_VAR 0 4
28391: PUSH
28392: LD_INT 1
28394: ARRAY
28395: PPUSH
28396: LD_VAR 0 4
28400: PUSH
28401: LD_INT 2
28403: ARRAY
28404: PPUSH
28405: CALL_OW 458
28409: NOT
28410: IFFALSE 28414
// continue ;
28412: GO 28384
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28414: LD_VAR 0 4
28418: PUSH
28419: LD_INT 1
28421: ARRAY
28422: PPUSH
28423: LD_VAR 0 4
28427: PUSH
28428: LD_INT 2
28430: ARRAY
28431: PPUSH
28432: CALL_OW 428
28436: PUSH
28437: LD_VAR 0 5
28441: IN
28442: IFFALSE 28471
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28444: LD_VAR 0 4
28448: PUSH
28449: LD_INT 1
28451: ARRAY
28452: PPUSH
28453: LD_VAR 0 4
28457: PUSH
28458: LD_INT 2
28460: ARRAY
28461: PPUSH
28462: LD_VAR 0 1
28466: PPUSH
28467: CALL_OW 456
// end ;
28471: GO 28384
28473: POP
28474: POP
// end ;
28475: LD_VAR 0 3
28479: RET
// export function Count ( array ) ; begin
28480: LD_INT 0
28482: PPUSH
// result := array + 0 ;
28483: LD_ADDR_VAR 0 2
28487: PUSH
28488: LD_VAR 0 1
28492: PUSH
28493: LD_INT 0
28495: PLUS
28496: ST_TO_ADDR
// end ;
28497: LD_VAR 0 2
28501: RET
// export function IsEmpty ( building ) ; begin
28502: LD_INT 0
28504: PPUSH
// if not building then
28505: LD_VAR 0 1
28509: NOT
28510: IFFALSE 28514
// exit ;
28512: GO 28557
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28514: LD_ADDR_VAR 0 2
28518: PUSH
28519: LD_VAR 0 1
28523: PUSH
28524: LD_INT 22
28526: PUSH
28527: LD_VAR 0 1
28531: PPUSH
28532: CALL_OW 255
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 58
28543: PUSH
28544: EMPTY
28545: LIST
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PPUSH
28551: CALL_OW 69
28555: IN
28556: ST_TO_ADDR
// end ;
28557: LD_VAR 0 2
28561: RET
// export function IsNotFull ( building ) ; var places ; begin
28562: LD_INT 0
28564: PPUSH
28565: PPUSH
// if not building then
28566: LD_VAR 0 1
28570: NOT
28571: IFFALSE 28575
// exit ;
28573: GO 28603
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28575: LD_ADDR_VAR 0 2
28579: PUSH
28580: LD_VAR 0 1
28584: PPUSH
28585: LD_INT 3
28587: PUSH
28588: LD_INT 62
28590: PUSH
28591: EMPTY
28592: LIST
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PPUSH
28598: CALL_OW 72
28602: ST_TO_ADDR
// end ;
28603: LD_VAR 0 2
28607: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28608: LD_INT 0
28610: PPUSH
28611: PPUSH
28612: PPUSH
28613: PPUSH
// tmp := [ ] ;
28614: LD_ADDR_VAR 0 3
28618: PUSH
28619: EMPTY
28620: ST_TO_ADDR
// list := [ ] ;
28621: LD_ADDR_VAR 0 5
28625: PUSH
28626: EMPTY
28627: ST_TO_ADDR
// for i = 16 to 25 do
28628: LD_ADDR_VAR 0 4
28632: PUSH
28633: DOUBLE
28634: LD_INT 16
28636: DEC
28637: ST_TO_ADDR
28638: LD_INT 25
28640: PUSH
28641: FOR_TO
28642: IFFALSE 28715
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28644: LD_ADDR_VAR 0 3
28648: PUSH
28649: LD_VAR 0 3
28653: PUSH
28654: LD_INT 22
28656: PUSH
28657: LD_VAR 0 1
28661: PPUSH
28662: CALL_OW 255
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 91
28673: PUSH
28674: LD_VAR 0 1
28678: PUSH
28679: LD_INT 6
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 30
28689: PUSH
28690: LD_VAR 0 4
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: PUSH
28704: EMPTY
28705: LIST
28706: PPUSH
28707: CALL_OW 69
28711: ADD
28712: ST_TO_ADDR
28713: GO 28641
28715: POP
28716: POP
// for i = 1 to tmp do
28717: LD_ADDR_VAR 0 4
28721: PUSH
28722: DOUBLE
28723: LD_INT 1
28725: DEC
28726: ST_TO_ADDR
28727: LD_VAR 0 3
28731: PUSH
28732: FOR_TO
28733: IFFALSE 28821
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28735: LD_ADDR_VAR 0 5
28739: PUSH
28740: LD_VAR 0 5
28744: PUSH
28745: LD_VAR 0 3
28749: PUSH
28750: LD_VAR 0 4
28754: ARRAY
28755: PPUSH
28756: CALL_OW 266
28760: PUSH
28761: LD_VAR 0 3
28765: PUSH
28766: LD_VAR 0 4
28770: ARRAY
28771: PPUSH
28772: CALL_OW 250
28776: PUSH
28777: LD_VAR 0 3
28781: PUSH
28782: LD_VAR 0 4
28786: ARRAY
28787: PPUSH
28788: CALL_OW 251
28792: PUSH
28793: LD_VAR 0 3
28797: PUSH
28798: LD_VAR 0 4
28802: ARRAY
28803: PPUSH
28804: CALL_OW 254
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: PUSH
28815: EMPTY
28816: LIST
28817: ADD
28818: ST_TO_ADDR
28819: GO 28732
28821: POP
28822: POP
// result := list ;
28823: LD_ADDR_VAR 0 2
28827: PUSH
28828: LD_VAR 0 5
28832: ST_TO_ADDR
// end ;
28833: LD_VAR 0 2
28837: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28838: LD_INT 0
28840: PPUSH
28841: PPUSH
28842: PPUSH
28843: PPUSH
28844: PPUSH
28845: PPUSH
28846: PPUSH
// if not factory then
28847: LD_VAR 0 1
28851: NOT
28852: IFFALSE 28856
// exit ;
28854: GO 29449
// if control = control_apeman then
28856: LD_VAR 0 4
28860: PUSH
28861: LD_INT 5
28863: EQUAL
28864: IFFALSE 28973
// begin tmp := UnitsInside ( factory ) ;
28866: LD_ADDR_VAR 0 8
28870: PUSH
28871: LD_VAR 0 1
28875: PPUSH
28876: CALL_OW 313
28880: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28881: LD_VAR 0 8
28885: PPUSH
28886: LD_INT 25
28888: PUSH
28889: LD_INT 12
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PPUSH
28896: CALL_OW 72
28900: NOT
28901: IFFALSE 28911
// control := control_manual ;
28903: LD_ADDR_VAR 0 4
28907: PUSH
28908: LD_INT 1
28910: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28911: LD_ADDR_VAR 0 8
28915: PUSH
28916: LD_VAR 0 1
28920: PPUSH
28921: CALL 28608 0 1
28925: ST_TO_ADDR
// if tmp then
28926: LD_VAR 0 8
28930: IFFALSE 28973
// begin for i in tmp do
28932: LD_ADDR_VAR 0 7
28936: PUSH
28937: LD_VAR 0 8
28941: PUSH
28942: FOR_IN
28943: IFFALSE 28971
// if i [ 1 ] = b_ext_radio then
28945: LD_VAR 0 7
28949: PUSH
28950: LD_INT 1
28952: ARRAY
28953: PUSH
28954: LD_INT 22
28956: EQUAL
28957: IFFALSE 28969
// begin control := control_remote ;
28959: LD_ADDR_VAR 0 4
28963: PUSH
28964: LD_INT 2
28966: ST_TO_ADDR
// break ;
28967: GO 28971
// end ;
28969: GO 28942
28971: POP
28972: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28973: LD_VAR 0 1
28977: PPUSH
28978: LD_VAR 0 2
28982: PPUSH
28983: LD_VAR 0 3
28987: PPUSH
28988: LD_VAR 0 4
28992: PPUSH
28993: LD_VAR 0 5
28997: PPUSH
28998: CALL_OW 448
29002: IFFALSE 29037
// begin result := [ chassis , engine , control , weapon ] ;
29004: LD_ADDR_VAR 0 6
29008: PUSH
29009: LD_VAR 0 2
29013: PUSH
29014: LD_VAR 0 3
29018: PUSH
29019: LD_VAR 0 4
29023: PUSH
29024: LD_VAR 0 5
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: ST_TO_ADDR
// exit ;
29035: GO 29449
// end ; _chassis := AvailableChassisList ( factory ) ;
29037: LD_ADDR_VAR 0 9
29041: PUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 475
29051: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29052: LD_ADDR_VAR 0 11
29056: PUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: CALL_OW 476
29066: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29067: LD_ADDR_VAR 0 12
29071: PUSH
29072: LD_VAR 0 1
29076: PPUSH
29077: CALL_OW 477
29081: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29082: LD_ADDR_VAR 0 10
29086: PUSH
29087: LD_VAR 0 1
29091: PPUSH
29092: CALL_OW 478
29096: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29097: LD_VAR 0 9
29101: NOT
29102: PUSH
29103: LD_VAR 0 11
29107: NOT
29108: OR
29109: PUSH
29110: LD_VAR 0 12
29114: NOT
29115: OR
29116: PUSH
29117: LD_VAR 0 10
29121: NOT
29122: OR
29123: IFFALSE 29158
// begin result := [ chassis , engine , control , weapon ] ;
29125: LD_ADDR_VAR 0 6
29129: PUSH
29130: LD_VAR 0 2
29134: PUSH
29135: LD_VAR 0 3
29139: PUSH
29140: LD_VAR 0 4
29144: PUSH
29145: LD_VAR 0 5
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: ST_TO_ADDR
// exit ;
29156: GO 29449
// end ; if not chassis in _chassis then
29158: LD_VAR 0 2
29162: PUSH
29163: LD_VAR 0 9
29167: IN
29168: NOT
29169: IFFALSE 29195
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29171: LD_ADDR_VAR 0 2
29175: PUSH
29176: LD_VAR 0 9
29180: PUSH
29181: LD_INT 1
29183: PPUSH
29184: LD_VAR 0 9
29188: PPUSH
29189: CALL_OW 12
29193: ARRAY
29194: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29195: LD_VAR 0 2
29199: PPUSH
29200: LD_VAR 0 3
29204: PPUSH
29205: CALL 29454 0 2
29209: NOT
29210: IFFALSE 29269
// repeat engine := _engine [ 1 ] ;
29212: LD_ADDR_VAR 0 3
29216: PUSH
29217: LD_VAR 0 11
29221: PUSH
29222: LD_INT 1
29224: ARRAY
29225: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29226: LD_ADDR_VAR 0 11
29230: PUSH
29231: LD_VAR 0 11
29235: PPUSH
29236: LD_INT 1
29238: PPUSH
29239: CALL_OW 3
29243: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29244: LD_VAR 0 2
29248: PPUSH
29249: LD_VAR 0 3
29253: PPUSH
29254: CALL 29454 0 2
29258: PUSH
29259: LD_VAR 0 11
29263: PUSH
29264: EMPTY
29265: EQUAL
29266: OR
29267: IFFALSE 29212
// if not control in _control then
29269: LD_VAR 0 4
29273: PUSH
29274: LD_VAR 0 12
29278: IN
29279: NOT
29280: IFFALSE 29306
// control := _control [ rand ( 1 , _control ) ] ;
29282: LD_ADDR_VAR 0 4
29286: PUSH
29287: LD_VAR 0 12
29291: PUSH
29292: LD_INT 1
29294: PPUSH
29295: LD_VAR 0 12
29299: PPUSH
29300: CALL_OW 12
29304: ARRAY
29305: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29306: LD_VAR 0 2
29310: PPUSH
29311: LD_VAR 0 5
29315: PPUSH
29316: CALL 29674 0 2
29320: NOT
29321: IFFALSE 29380
// repeat weapon := _weapon [ 1 ] ;
29323: LD_ADDR_VAR 0 5
29327: PUSH
29328: LD_VAR 0 10
29332: PUSH
29333: LD_INT 1
29335: ARRAY
29336: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29337: LD_ADDR_VAR 0 10
29341: PUSH
29342: LD_VAR 0 10
29346: PPUSH
29347: LD_INT 1
29349: PPUSH
29350: CALL_OW 3
29354: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29355: LD_VAR 0 2
29359: PPUSH
29360: LD_VAR 0 5
29364: PPUSH
29365: CALL 29674 0 2
29369: PUSH
29370: LD_VAR 0 10
29374: PUSH
29375: EMPTY
29376: EQUAL
29377: OR
29378: IFFALSE 29323
// result := [ ] ;
29380: LD_ADDR_VAR 0 6
29384: PUSH
29385: EMPTY
29386: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29387: LD_VAR 0 1
29391: PPUSH
29392: LD_VAR 0 2
29396: PPUSH
29397: LD_VAR 0 3
29401: PPUSH
29402: LD_VAR 0 4
29406: PPUSH
29407: LD_VAR 0 5
29411: PPUSH
29412: CALL_OW 448
29416: IFFALSE 29449
// result := [ chassis , engine , control , weapon ] ;
29418: LD_ADDR_VAR 0 6
29422: PUSH
29423: LD_VAR 0 2
29427: PUSH
29428: LD_VAR 0 3
29432: PUSH
29433: LD_VAR 0 4
29437: PUSH
29438: LD_VAR 0 5
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: ST_TO_ADDR
// end ;
29449: LD_VAR 0 6
29453: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29454: LD_INT 0
29456: PPUSH
// if not chassis or not engine then
29457: LD_VAR 0 1
29461: NOT
29462: PUSH
29463: LD_VAR 0 2
29467: NOT
29468: OR
29469: IFFALSE 29473
// exit ;
29471: GO 29669
// case engine of engine_solar :
29473: LD_VAR 0 2
29477: PUSH
29478: LD_INT 2
29480: DOUBLE
29481: EQUAL
29482: IFTRUE 29486
29484: GO 29524
29486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29487: LD_ADDR_VAR 0 3
29491: PUSH
29492: LD_INT 11
29494: PUSH
29495: LD_INT 12
29497: PUSH
29498: LD_INT 13
29500: PUSH
29501: LD_INT 14
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: ST_TO_ADDR
29522: GO 29653
29524: LD_INT 1
29526: DOUBLE
29527: EQUAL
29528: IFTRUE 29532
29530: GO 29594
29532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29533: LD_ADDR_VAR 0 3
29537: PUSH
29538: LD_INT 11
29540: PUSH
29541: LD_INT 12
29543: PUSH
29544: LD_INT 13
29546: PUSH
29547: LD_INT 14
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: LD_INT 3
29558: PUSH
29559: LD_INT 4
29561: PUSH
29562: LD_INT 5
29564: PUSH
29565: LD_INT 21
29567: PUSH
29568: LD_INT 23
29570: PUSH
29571: LD_INT 22
29573: PUSH
29574: LD_INT 24
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: ST_TO_ADDR
29592: GO 29653
29594: LD_INT 3
29596: DOUBLE
29597: EQUAL
29598: IFTRUE 29602
29600: GO 29652
29602: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_INT 13
29610: PUSH
29611: LD_INT 14
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: LD_INT 3
29619: PUSH
29620: LD_INT 4
29622: PUSH
29623: LD_INT 5
29625: PUSH
29626: LD_INT 21
29628: PUSH
29629: LD_INT 22
29631: PUSH
29632: LD_INT 23
29634: PUSH
29635: LD_INT 24
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: ST_TO_ADDR
29650: GO 29653
29652: POP
// result := ( chassis in result ) ;
29653: LD_ADDR_VAR 0 3
29657: PUSH
29658: LD_VAR 0 1
29662: PUSH
29663: LD_VAR 0 3
29667: IN
29668: ST_TO_ADDR
// end ;
29669: LD_VAR 0 3
29673: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29674: LD_INT 0
29676: PPUSH
// if not chassis or not weapon then
29677: LD_VAR 0 1
29681: NOT
29682: PUSH
29683: LD_VAR 0 2
29687: NOT
29688: OR
29689: IFFALSE 29693
// exit ;
29691: GO 30753
// case weapon of us_machine_gun :
29693: LD_VAR 0 2
29697: PUSH
29698: LD_INT 2
29700: DOUBLE
29701: EQUAL
29702: IFTRUE 29706
29704: GO 29736
29706: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29707: LD_ADDR_VAR 0 3
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: LD_INT 2
29717: PUSH
29718: LD_INT 3
29720: PUSH
29721: LD_INT 4
29723: PUSH
29724: LD_INT 5
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
29734: GO 30737
29736: LD_INT 3
29738: DOUBLE
29739: EQUAL
29740: IFTRUE 29744
29742: GO 29774
29744: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29745: LD_ADDR_VAR 0 3
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: LD_INT 4
29761: PUSH
29762: LD_INT 5
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: ST_TO_ADDR
29772: GO 30737
29774: LD_INT 11
29776: DOUBLE
29777: EQUAL
29778: IFTRUE 29782
29780: GO 29812
29782: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29783: LD_ADDR_VAR 0 3
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: LD_INT 4
29799: PUSH
29800: LD_INT 5
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: ST_TO_ADDR
29810: GO 30737
29812: LD_INT 4
29814: DOUBLE
29815: EQUAL
29816: IFTRUE 29820
29818: GO 29846
29820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29821: LD_ADDR_VAR 0 3
29825: PUSH
29826: LD_INT 2
29828: PUSH
29829: LD_INT 3
29831: PUSH
29832: LD_INT 4
29834: PUSH
29835: LD_INT 5
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: ST_TO_ADDR
29844: GO 30737
29846: LD_INT 5
29848: DOUBLE
29849: EQUAL
29850: IFTRUE 29854
29852: GO 29880
29854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29855: LD_ADDR_VAR 0 3
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: LD_INT 3
29865: PUSH
29866: LD_INT 4
29868: PUSH
29869: LD_INT 5
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: ST_TO_ADDR
29878: GO 30737
29880: LD_INT 9
29882: DOUBLE
29883: EQUAL
29884: IFTRUE 29888
29886: GO 29914
29888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29889: LD_ADDR_VAR 0 3
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: LD_INT 3
29899: PUSH
29900: LD_INT 4
29902: PUSH
29903: LD_INT 5
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: ST_TO_ADDR
29912: GO 30737
29914: LD_INT 7
29916: DOUBLE
29917: EQUAL
29918: IFTRUE 29922
29920: GO 29948
29922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29923: LD_ADDR_VAR 0 3
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: LD_INT 4
29936: PUSH
29937: LD_INT 5
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: ST_TO_ADDR
29946: GO 30737
29948: LD_INT 12
29950: DOUBLE
29951: EQUAL
29952: IFTRUE 29956
29954: GO 29982
29956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29957: LD_ADDR_VAR 0 3
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: LD_INT 4
29970: PUSH
29971: LD_INT 5
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: ST_TO_ADDR
29980: GO 30737
29982: LD_INT 13
29984: DOUBLE
29985: EQUAL
29986: IFTRUE 29990
29988: GO 30016
29990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29991: LD_ADDR_VAR 0 3
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: LD_INT 3
30001: PUSH
30002: LD_INT 4
30004: PUSH
30005: LD_INT 5
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: ST_TO_ADDR
30014: GO 30737
30016: LD_INT 14
30018: DOUBLE
30019: EQUAL
30020: IFTRUE 30024
30022: GO 30042
30024: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30025: LD_ADDR_VAR 0 3
30029: PUSH
30030: LD_INT 4
30032: PUSH
30033: LD_INT 5
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: ST_TO_ADDR
30040: GO 30737
30042: LD_INT 6
30044: DOUBLE
30045: EQUAL
30046: IFTRUE 30050
30048: GO 30068
30050: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30051: LD_ADDR_VAR 0 3
30055: PUSH
30056: LD_INT 4
30058: PUSH
30059: LD_INT 5
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: ST_TO_ADDR
30066: GO 30737
30068: LD_INT 10
30070: DOUBLE
30071: EQUAL
30072: IFTRUE 30076
30074: GO 30094
30076: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30077: LD_ADDR_VAR 0 3
30081: PUSH
30082: LD_INT 4
30084: PUSH
30085: LD_INT 5
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: ST_TO_ADDR
30092: GO 30737
30094: LD_INT 22
30096: DOUBLE
30097: EQUAL
30098: IFTRUE 30102
30100: GO 30128
30102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30103: LD_ADDR_VAR 0 3
30107: PUSH
30108: LD_INT 11
30110: PUSH
30111: LD_INT 12
30113: PUSH
30114: LD_INT 13
30116: PUSH
30117: LD_INT 14
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: ST_TO_ADDR
30126: GO 30737
30128: LD_INT 23
30130: DOUBLE
30131: EQUAL
30132: IFTRUE 30136
30134: GO 30162
30136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30137: LD_ADDR_VAR 0 3
30141: PUSH
30142: LD_INT 11
30144: PUSH
30145: LD_INT 12
30147: PUSH
30148: LD_INT 13
30150: PUSH
30151: LD_INT 14
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: ST_TO_ADDR
30160: GO 30737
30162: LD_INT 24
30164: DOUBLE
30165: EQUAL
30166: IFTRUE 30170
30168: GO 30196
30170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30171: LD_ADDR_VAR 0 3
30175: PUSH
30176: LD_INT 11
30178: PUSH
30179: LD_INT 12
30181: PUSH
30182: LD_INT 13
30184: PUSH
30185: LD_INT 14
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: ST_TO_ADDR
30194: GO 30737
30196: LD_INT 30
30198: DOUBLE
30199: EQUAL
30200: IFTRUE 30204
30202: GO 30230
30204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30205: LD_ADDR_VAR 0 3
30209: PUSH
30210: LD_INT 11
30212: PUSH
30213: LD_INT 12
30215: PUSH
30216: LD_INT 13
30218: PUSH
30219: LD_INT 14
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: ST_TO_ADDR
30228: GO 30737
30230: LD_INT 25
30232: DOUBLE
30233: EQUAL
30234: IFTRUE 30238
30236: GO 30256
30238: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30239: LD_ADDR_VAR 0 3
30243: PUSH
30244: LD_INT 13
30246: PUSH
30247: LD_INT 14
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: ST_TO_ADDR
30254: GO 30737
30256: LD_INT 27
30258: DOUBLE
30259: EQUAL
30260: IFTRUE 30264
30262: GO 30282
30264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30265: LD_ADDR_VAR 0 3
30269: PUSH
30270: LD_INT 13
30272: PUSH
30273: LD_INT 14
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: ST_TO_ADDR
30280: GO 30737
30282: LD_INT 92
30284: DOUBLE
30285: EQUAL
30286: IFTRUE 30290
30288: GO 30316
30290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30291: LD_ADDR_VAR 0 3
30295: PUSH
30296: LD_INT 11
30298: PUSH
30299: LD_INT 12
30301: PUSH
30302: LD_INT 13
30304: PUSH
30305: LD_INT 14
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: ST_TO_ADDR
30314: GO 30737
30316: LD_INT 28
30318: DOUBLE
30319: EQUAL
30320: IFTRUE 30324
30322: GO 30342
30324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30325: LD_ADDR_VAR 0 3
30329: PUSH
30330: LD_INT 13
30332: PUSH
30333: LD_INT 14
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: ST_TO_ADDR
30340: GO 30737
30342: LD_INT 29
30344: DOUBLE
30345: EQUAL
30346: IFTRUE 30350
30348: GO 30368
30350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30351: LD_ADDR_VAR 0 3
30355: PUSH
30356: LD_INT 13
30358: PUSH
30359: LD_INT 14
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: ST_TO_ADDR
30366: GO 30737
30368: LD_INT 31
30370: DOUBLE
30371: EQUAL
30372: IFTRUE 30376
30374: GO 30394
30376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30377: LD_ADDR_VAR 0 3
30381: PUSH
30382: LD_INT 13
30384: PUSH
30385: LD_INT 14
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: ST_TO_ADDR
30392: GO 30737
30394: LD_INT 26
30396: DOUBLE
30397: EQUAL
30398: IFTRUE 30402
30400: GO 30420
30402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30403: LD_ADDR_VAR 0 3
30407: PUSH
30408: LD_INT 13
30410: PUSH
30411: LD_INT 14
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: ST_TO_ADDR
30418: GO 30737
30420: LD_INT 42
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30454
30428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30429: LD_ADDR_VAR 0 3
30433: PUSH
30434: LD_INT 21
30436: PUSH
30437: LD_INT 22
30439: PUSH
30440: LD_INT 23
30442: PUSH
30443: LD_INT 24
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: ST_TO_ADDR
30452: GO 30737
30454: LD_INT 43
30456: DOUBLE
30457: EQUAL
30458: IFTRUE 30462
30460: GO 30488
30462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30463: LD_ADDR_VAR 0 3
30467: PUSH
30468: LD_INT 21
30470: PUSH
30471: LD_INT 22
30473: PUSH
30474: LD_INT 23
30476: PUSH
30477: LD_INT 24
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: ST_TO_ADDR
30486: GO 30737
30488: LD_INT 44
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30522
30496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30497: LD_ADDR_VAR 0 3
30501: PUSH
30502: LD_INT 21
30504: PUSH
30505: LD_INT 22
30507: PUSH
30508: LD_INT 23
30510: PUSH
30511: LD_INT 24
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: ST_TO_ADDR
30520: GO 30737
30522: LD_INT 45
30524: DOUBLE
30525: EQUAL
30526: IFTRUE 30530
30528: GO 30556
30530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30531: LD_ADDR_VAR 0 3
30535: PUSH
30536: LD_INT 21
30538: PUSH
30539: LD_INT 22
30541: PUSH
30542: LD_INT 23
30544: PUSH
30545: LD_INT 24
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: ST_TO_ADDR
30554: GO 30737
30556: LD_INT 49
30558: DOUBLE
30559: EQUAL
30560: IFTRUE 30564
30562: GO 30590
30564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30565: LD_ADDR_VAR 0 3
30569: PUSH
30570: LD_INT 21
30572: PUSH
30573: LD_INT 22
30575: PUSH
30576: LD_INT 23
30578: PUSH
30579: LD_INT 24
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: ST_TO_ADDR
30588: GO 30737
30590: LD_INT 51
30592: DOUBLE
30593: EQUAL
30594: IFTRUE 30598
30596: GO 30624
30598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30599: LD_ADDR_VAR 0 3
30603: PUSH
30604: LD_INT 21
30606: PUSH
30607: LD_INT 22
30609: PUSH
30610: LD_INT 23
30612: PUSH
30613: LD_INT 24
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: ST_TO_ADDR
30622: GO 30737
30624: LD_INT 52
30626: DOUBLE
30627: EQUAL
30628: IFTRUE 30632
30630: GO 30658
30632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30633: LD_ADDR_VAR 0 3
30637: PUSH
30638: LD_INT 21
30640: PUSH
30641: LD_INT 22
30643: PUSH
30644: LD_INT 23
30646: PUSH
30647: LD_INT 24
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: ST_TO_ADDR
30656: GO 30737
30658: LD_INT 53
30660: DOUBLE
30661: EQUAL
30662: IFTRUE 30666
30664: GO 30684
30666: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30667: LD_ADDR_VAR 0 3
30671: PUSH
30672: LD_INT 23
30674: PUSH
30675: LD_INT 24
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: ST_TO_ADDR
30682: GO 30737
30684: LD_INT 46
30686: DOUBLE
30687: EQUAL
30688: IFTRUE 30692
30690: GO 30710
30692: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30693: LD_ADDR_VAR 0 3
30697: PUSH
30698: LD_INT 23
30700: PUSH
30701: LD_INT 24
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: ST_TO_ADDR
30708: GO 30737
30710: LD_INT 47
30712: DOUBLE
30713: EQUAL
30714: IFTRUE 30718
30716: GO 30736
30718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30719: LD_ADDR_VAR 0 3
30723: PUSH
30724: LD_INT 23
30726: PUSH
30727: LD_INT 24
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: ST_TO_ADDR
30734: GO 30737
30736: POP
// result := ( chassis in result ) ;
30737: LD_ADDR_VAR 0 3
30741: PUSH
30742: LD_VAR 0 1
30746: PUSH
30747: LD_VAR 0 3
30751: IN
30752: ST_TO_ADDR
// end ;
30753: LD_VAR 0 3
30757: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30758: LD_INT 0
30760: PPUSH
30761: PPUSH
30762: PPUSH
30763: PPUSH
30764: PPUSH
30765: PPUSH
30766: PPUSH
// result := array ;
30767: LD_ADDR_VAR 0 5
30771: PUSH
30772: LD_VAR 0 1
30776: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30777: LD_VAR 0 1
30781: NOT
30782: PUSH
30783: LD_VAR 0 2
30787: NOT
30788: OR
30789: PUSH
30790: LD_VAR 0 3
30794: NOT
30795: OR
30796: PUSH
30797: LD_VAR 0 2
30801: PUSH
30802: LD_VAR 0 1
30806: GREATER
30807: OR
30808: PUSH
30809: LD_VAR 0 3
30813: PUSH
30814: LD_VAR 0 1
30818: GREATER
30819: OR
30820: IFFALSE 30824
// exit ;
30822: GO 31120
// if direction then
30824: LD_VAR 0 4
30828: IFFALSE 30892
// begin d := 1 ;
30830: LD_ADDR_VAR 0 9
30834: PUSH
30835: LD_INT 1
30837: ST_TO_ADDR
// if i_from > i_to then
30838: LD_VAR 0 2
30842: PUSH
30843: LD_VAR 0 3
30847: GREATER
30848: IFFALSE 30874
// length := ( array - i_from ) + i_to else
30850: LD_ADDR_VAR 0 11
30854: PUSH
30855: LD_VAR 0 1
30859: PUSH
30860: LD_VAR 0 2
30864: MINUS
30865: PUSH
30866: LD_VAR 0 3
30870: PLUS
30871: ST_TO_ADDR
30872: GO 30890
// length := i_to - i_from ;
30874: LD_ADDR_VAR 0 11
30878: PUSH
30879: LD_VAR 0 3
30883: PUSH
30884: LD_VAR 0 2
30888: MINUS
30889: ST_TO_ADDR
// end else
30890: GO 30953
// begin d := - 1 ;
30892: LD_ADDR_VAR 0 9
30896: PUSH
30897: LD_INT 1
30899: NEG
30900: ST_TO_ADDR
// if i_from > i_to then
30901: LD_VAR 0 2
30905: PUSH
30906: LD_VAR 0 3
30910: GREATER
30911: IFFALSE 30931
// length := i_from - i_to else
30913: LD_ADDR_VAR 0 11
30917: PUSH
30918: LD_VAR 0 2
30922: PUSH
30923: LD_VAR 0 3
30927: MINUS
30928: ST_TO_ADDR
30929: GO 30953
// length := ( array - i_to ) + i_from ;
30931: LD_ADDR_VAR 0 11
30935: PUSH
30936: LD_VAR 0 1
30940: PUSH
30941: LD_VAR 0 3
30945: MINUS
30946: PUSH
30947: LD_VAR 0 2
30951: PLUS
30952: ST_TO_ADDR
// end ; if not length then
30953: LD_VAR 0 11
30957: NOT
30958: IFFALSE 30962
// exit ;
30960: GO 31120
// tmp := array ;
30962: LD_ADDR_VAR 0 10
30966: PUSH
30967: LD_VAR 0 1
30971: ST_TO_ADDR
// for i = 1 to length do
30972: LD_ADDR_VAR 0 6
30976: PUSH
30977: DOUBLE
30978: LD_INT 1
30980: DEC
30981: ST_TO_ADDR
30982: LD_VAR 0 11
30986: PUSH
30987: FOR_TO
30988: IFFALSE 31108
// begin for j = 1 to array do
30990: LD_ADDR_VAR 0 7
30994: PUSH
30995: DOUBLE
30996: LD_INT 1
30998: DEC
30999: ST_TO_ADDR
31000: LD_VAR 0 1
31004: PUSH
31005: FOR_TO
31006: IFFALSE 31094
// begin k := j + d ;
31008: LD_ADDR_VAR 0 8
31012: PUSH
31013: LD_VAR 0 7
31017: PUSH
31018: LD_VAR 0 9
31022: PLUS
31023: ST_TO_ADDR
// if k > array then
31024: LD_VAR 0 8
31028: PUSH
31029: LD_VAR 0 1
31033: GREATER
31034: IFFALSE 31044
// k := 1 ;
31036: LD_ADDR_VAR 0 8
31040: PUSH
31041: LD_INT 1
31043: ST_TO_ADDR
// if not k then
31044: LD_VAR 0 8
31048: NOT
31049: IFFALSE 31061
// k := array ;
31051: LD_ADDR_VAR 0 8
31055: PUSH
31056: LD_VAR 0 1
31060: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31061: LD_ADDR_VAR 0 10
31065: PUSH
31066: LD_VAR 0 10
31070: PPUSH
31071: LD_VAR 0 8
31075: PPUSH
31076: LD_VAR 0 1
31080: PUSH
31081: LD_VAR 0 7
31085: ARRAY
31086: PPUSH
31087: CALL_OW 1
31091: ST_TO_ADDR
// end ;
31092: GO 31005
31094: POP
31095: POP
// array := tmp ;
31096: LD_ADDR_VAR 0 1
31100: PUSH
31101: LD_VAR 0 10
31105: ST_TO_ADDR
// end ;
31106: GO 30987
31108: POP
31109: POP
// result := array ;
31110: LD_ADDR_VAR 0 5
31114: PUSH
31115: LD_VAR 0 1
31119: ST_TO_ADDR
// end ;
31120: LD_VAR 0 5
31124: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31125: LD_INT 0
31127: PPUSH
31128: PPUSH
// result := 0 ;
31129: LD_ADDR_VAR 0 3
31133: PUSH
31134: LD_INT 0
31136: ST_TO_ADDR
// if not array or not value in array then
31137: LD_VAR 0 1
31141: NOT
31142: PUSH
31143: LD_VAR 0 2
31147: PUSH
31148: LD_VAR 0 1
31152: IN
31153: NOT
31154: OR
31155: IFFALSE 31159
// exit ;
31157: GO 31213
// for i = 1 to array do
31159: LD_ADDR_VAR 0 4
31163: PUSH
31164: DOUBLE
31165: LD_INT 1
31167: DEC
31168: ST_TO_ADDR
31169: LD_VAR 0 1
31173: PUSH
31174: FOR_TO
31175: IFFALSE 31211
// if value = array [ i ] then
31177: LD_VAR 0 2
31181: PUSH
31182: LD_VAR 0 1
31186: PUSH
31187: LD_VAR 0 4
31191: ARRAY
31192: EQUAL
31193: IFFALSE 31209
// begin result := i ;
31195: LD_ADDR_VAR 0 3
31199: PUSH
31200: LD_VAR 0 4
31204: ST_TO_ADDR
// exit ;
31205: POP
31206: POP
31207: GO 31213
// end ;
31209: GO 31174
31211: POP
31212: POP
// end ;
31213: LD_VAR 0 3
31217: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31218: LD_INT 0
31220: PPUSH
// vc_chassis := chassis ;
31221: LD_ADDR_OWVAR 37
31225: PUSH
31226: LD_VAR 0 1
31230: ST_TO_ADDR
// vc_engine := engine ;
31231: LD_ADDR_OWVAR 39
31235: PUSH
31236: LD_VAR 0 2
31240: ST_TO_ADDR
// vc_control := control ;
31241: LD_ADDR_OWVAR 38
31245: PUSH
31246: LD_VAR 0 3
31250: ST_TO_ADDR
// vc_weapon := weapon ;
31251: LD_ADDR_OWVAR 40
31255: PUSH
31256: LD_VAR 0 4
31260: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31261: LD_ADDR_OWVAR 41
31265: PUSH
31266: LD_VAR 0 5
31270: ST_TO_ADDR
// end ;
31271: LD_VAR 0 6
31275: RET
// export function WantPlant ( unit ) ; var task ; begin
31276: LD_INT 0
31278: PPUSH
31279: PPUSH
// result := false ;
31280: LD_ADDR_VAR 0 2
31284: PUSH
31285: LD_INT 0
31287: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31288: LD_ADDR_VAR 0 3
31292: PUSH
31293: LD_VAR 0 1
31297: PPUSH
31298: CALL_OW 437
31302: ST_TO_ADDR
// if task then
31303: LD_VAR 0 3
31307: IFFALSE 31335
// if task [ 1 ] [ 1 ] = p then
31309: LD_VAR 0 3
31313: PUSH
31314: LD_INT 1
31316: ARRAY
31317: PUSH
31318: LD_INT 1
31320: ARRAY
31321: PUSH
31322: LD_STRING p
31324: EQUAL
31325: IFFALSE 31335
// result := true ;
31327: LD_ADDR_VAR 0 2
31331: PUSH
31332: LD_INT 1
31334: ST_TO_ADDR
// end ;
31335: LD_VAR 0 2
31339: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31340: LD_INT 0
31342: PPUSH
31343: PPUSH
31344: PPUSH
31345: PPUSH
// if pos < 1 then
31346: LD_VAR 0 2
31350: PUSH
31351: LD_INT 1
31353: LESS
31354: IFFALSE 31358
// exit ;
31356: GO 31661
// if pos = 1 then
31358: LD_VAR 0 2
31362: PUSH
31363: LD_INT 1
31365: EQUAL
31366: IFFALSE 31399
// result := Replace ( arr , pos [ 1 ] , value ) else
31368: LD_ADDR_VAR 0 4
31372: PUSH
31373: LD_VAR 0 1
31377: PPUSH
31378: LD_VAR 0 2
31382: PUSH
31383: LD_INT 1
31385: ARRAY
31386: PPUSH
31387: LD_VAR 0 3
31391: PPUSH
31392: CALL_OW 1
31396: ST_TO_ADDR
31397: GO 31661
// begin tmp := arr ;
31399: LD_ADDR_VAR 0 6
31403: PUSH
31404: LD_VAR 0 1
31408: ST_TO_ADDR
// s_arr := [ tmp ] ;
31409: LD_ADDR_VAR 0 7
31413: PUSH
31414: LD_VAR 0 6
31418: PUSH
31419: EMPTY
31420: LIST
31421: ST_TO_ADDR
// for i = 1 to pos - 1 do
31422: LD_ADDR_VAR 0 5
31426: PUSH
31427: DOUBLE
31428: LD_INT 1
31430: DEC
31431: ST_TO_ADDR
31432: LD_VAR 0 2
31436: PUSH
31437: LD_INT 1
31439: MINUS
31440: PUSH
31441: FOR_TO
31442: IFFALSE 31487
// begin tmp := tmp [ pos [ i ] ] ;
31444: LD_ADDR_VAR 0 6
31448: PUSH
31449: LD_VAR 0 6
31453: PUSH
31454: LD_VAR 0 2
31458: PUSH
31459: LD_VAR 0 5
31463: ARRAY
31464: ARRAY
31465: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31466: LD_ADDR_VAR 0 7
31470: PUSH
31471: LD_VAR 0 7
31475: PUSH
31476: LD_VAR 0 6
31480: PUSH
31481: EMPTY
31482: LIST
31483: ADD
31484: ST_TO_ADDR
// end ;
31485: GO 31441
31487: POP
31488: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31489: LD_ADDR_VAR 0 6
31493: PUSH
31494: LD_VAR 0 6
31498: PPUSH
31499: LD_VAR 0 2
31503: PUSH
31504: LD_VAR 0 2
31508: ARRAY
31509: PPUSH
31510: LD_VAR 0 3
31514: PPUSH
31515: CALL_OW 1
31519: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31520: LD_ADDR_VAR 0 7
31524: PUSH
31525: LD_VAR 0 7
31529: PPUSH
31530: LD_VAR 0 7
31534: PPUSH
31535: LD_VAR 0 6
31539: PPUSH
31540: CALL_OW 1
31544: ST_TO_ADDR
// for i = s_arr downto 2 do
31545: LD_ADDR_VAR 0 5
31549: PUSH
31550: DOUBLE
31551: LD_VAR 0 7
31555: INC
31556: ST_TO_ADDR
31557: LD_INT 2
31559: PUSH
31560: FOR_DOWNTO
31561: IFFALSE 31645
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31563: LD_ADDR_VAR 0 6
31567: PUSH
31568: LD_VAR 0 7
31572: PUSH
31573: LD_VAR 0 5
31577: PUSH
31578: LD_INT 1
31580: MINUS
31581: ARRAY
31582: PPUSH
31583: LD_VAR 0 2
31587: PUSH
31588: LD_VAR 0 5
31592: PUSH
31593: LD_INT 1
31595: MINUS
31596: ARRAY
31597: PPUSH
31598: LD_VAR 0 7
31602: PUSH
31603: LD_VAR 0 5
31607: ARRAY
31608: PPUSH
31609: CALL_OW 1
31613: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31614: LD_ADDR_VAR 0 7
31618: PUSH
31619: LD_VAR 0 7
31623: PPUSH
31624: LD_VAR 0 5
31628: PUSH
31629: LD_INT 1
31631: MINUS
31632: PPUSH
31633: LD_VAR 0 6
31637: PPUSH
31638: CALL_OW 1
31642: ST_TO_ADDR
// end ;
31643: GO 31560
31645: POP
31646: POP
// result := s_arr [ 1 ] ;
31647: LD_ADDR_VAR 0 4
31651: PUSH
31652: LD_VAR 0 7
31656: PUSH
31657: LD_INT 1
31659: ARRAY
31660: ST_TO_ADDR
// end ; end ;
31661: LD_VAR 0 4
31665: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31666: LD_INT 0
31668: PPUSH
31669: PPUSH
// if not list then
31670: LD_VAR 0 1
31674: NOT
31675: IFFALSE 31679
// exit ;
31677: GO 31770
// i := list [ pos1 ] ;
31679: LD_ADDR_VAR 0 5
31683: PUSH
31684: LD_VAR 0 1
31688: PUSH
31689: LD_VAR 0 2
31693: ARRAY
31694: ST_TO_ADDR
// if not i then
31695: LD_VAR 0 5
31699: NOT
31700: IFFALSE 31704
// exit ;
31702: GO 31770
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31704: LD_ADDR_VAR 0 1
31708: PUSH
31709: LD_VAR 0 1
31713: PPUSH
31714: LD_VAR 0 2
31718: PPUSH
31719: LD_VAR 0 1
31723: PUSH
31724: LD_VAR 0 3
31728: ARRAY
31729: PPUSH
31730: CALL_OW 1
31734: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31735: LD_ADDR_VAR 0 1
31739: PUSH
31740: LD_VAR 0 1
31744: PPUSH
31745: LD_VAR 0 3
31749: PPUSH
31750: LD_VAR 0 5
31754: PPUSH
31755: CALL_OW 1
31759: ST_TO_ADDR
// result := list ;
31760: LD_ADDR_VAR 0 4
31764: PUSH
31765: LD_VAR 0 1
31769: ST_TO_ADDR
// end ;
31770: LD_VAR 0 4
31774: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31775: LD_INT 0
31777: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31778: LD_ADDR_VAR 0 5
31782: PUSH
31783: LD_VAR 0 1
31787: PPUSH
31788: CALL_OW 250
31792: PPUSH
31793: LD_VAR 0 1
31797: PPUSH
31798: CALL_OW 251
31802: PPUSH
31803: LD_VAR 0 2
31807: PPUSH
31808: LD_VAR 0 3
31812: PPUSH
31813: LD_VAR 0 4
31817: PPUSH
31818: CALL 32196 0 5
31822: ST_TO_ADDR
// end ;
31823: LD_VAR 0 5
31827: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31828: LD_INT 0
31830: PPUSH
31831: PPUSH
31832: PPUSH
31833: PPUSH
// if not list or not unit then
31834: LD_VAR 0 2
31838: NOT
31839: PUSH
31840: LD_VAR 0 1
31844: NOT
31845: OR
31846: IFFALSE 31850
// exit ;
31848: GO 32191
// result := [ ] ;
31850: LD_ADDR_VAR 0 5
31854: PUSH
31855: EMPTY
31856: ST_TO_ADDR
// for i in list do
31857: LD_ADDR_VAR 0 6
31861: PUSH
31862: LD_VAR 0 2
31866: PUSH
31867: FOR_IN
31868: IFFALSE 32086
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31870: LD_ADDR_VAR 0 8
31874: PUSH
31875: LD_VAR 0 1
31879: PPUSH
31880: LD_VAR 0 6
31884: PUSH
31885: LD_INT 1
31887: ARRAY
31888: PPUSH
31889: LD_VAR 0 6
31893: PUSH
31894: LD_INT 2
31896: ARRAY
31897: PPUSH
31898: CALL_OW 297
31902: ST_TO_ADDR
// if not Count ( result ) then
31903: LD_VAR 0 5
31907: PPUSH
31908: CALL 28480 0 1
31912: NOT
31913: IFFALSE 31946
// begin result := Join ( result , [ i , tmp ] ) ;
31915: LD_ADDR_VAR 0 5
31919: PUSH
31920: LD_VAR 0 5
31924: PPUSH
31925: LD_VAR 0 6
31929: PUSH
31930: LD_VAR 0 8
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PPUSH
31939: CALL 64089 0 2
31943: ST_TO_ADDR
// continue ;
31944: GO 31867
// end ; if result [ result ] [ 2 ] <= tmp then
31946: LD_VAR 0 5
31950: PUSH
31951: LD_VAR 0 5
31955: ARRAY
31956: PUSH
31957: LD_INT 2
31959: ARRAY
31960: PUSH
31961: LD_VAR 0 8
31965: LESSEQUAL
31966: IFFALSE 31999
// result := Join ( result , [ i , tmp ] ) else
31968: LD_ADDR_VAR 0 5
31972: PUSH
31973: LD_VAR 0 5
31977: PPUSH
31978: LD_VAR 0 6
31982: PUSH
31983: LD_VAR 0 8
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PPUSH
31992: CALL 64089 0 2
31996: ST_TO_ADDR
31997: GO 32084
// begin for j := 1 to Count ( result ) do
31999: LD_ADDR_VAR 0 7
32003: PUSH
32004: DOUBLE
32005: LD_INT 1
32007: DEC
32008: ST_TO_ADDR
32009: LD_VAR 0 5
32013: PPUSH
32014: CALL 28480 0 1
32018: PUSH
32019: FOR_TO
32020: IFFALSE 32082
// begin if tmp < result [ j ] [ 2 ] then
32022: LD_VAR 0 8
32026: PUSH
32027: LD_VAR 0 5
32031: PUSH
32032: LD_VAR 0 7
32036: ARRAY
32037: PUSH
32038: LD_INT 2
32040: ARRAY
32041: LESS
32042: IFFALSE 32080
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32044: LD_ADDR_VAR 0 5
32048: PUSH
32049: LD_VAR 0 5
32053: PPUSH
32054: LD_VAR 0 7
32058: PPUSH
32059: LD_VAR 0 6
32063: PUSH
32064: LD_VAR 0 8
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PPUSH
32073: CALL_OW 2
32077: ST_TO_ADDR
// break ;
32078: GO 32082
// end ; end ;
32080: GO 32019
32082: POP
32083: POP
// end ; end ;
32084: GO 31867
32086: POP
32087: POP
// if result and not asc then
32088: LD_VAR 0 5
32092: PUSH
32093: LD_VAR 0 3
32097: NOT
32098: AND
32099: IFFALSE 32116
// result := ReverseArray ( result ) ;
32101: LD_ADDR_VAR 0 5
32105: PUSH
32106: LD_VAR 0 5
32110: PPUSH
32111: CALL 59356 0 1
32115: ST_TO_ADDR
// tmp := [ ] ;
32116: LD_ADDR_VAR 0 8
32120: PUSH
32121: EMPTY
32122: ST_TO_ADDR
// if mode then
32123: LD_VAR 0 4
32127: IFFALSE 32191
// begin for i := 1 to result do
32129: LD_ADDR_VAR 0 6
32133: PUSH
32134: DOUBLE
32135: LD_INT 1
32137: DEC
32138: ST_TO_ADDR
32139: LD_VAR 0 5
32143: PUSH
32144: FOR_TO
32145: IFFALSE 32179
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32147: LD_ADDR_VAR 0 8
32151: PUSH
32152: LD_VAR 0 8
32156: PPUSH
32157: LD_VAR 0 5
32161: PUSH
32162: LD_VAR 0 6
32166: ARRAY
32167: PUSH
32168: LD_INT 1
32170: ARRAY
32171: PPUSH
32172: CALL 64089 0 2
32176: ST_TO_ADDR
32177: GO 32144
32179: POP
32180: POP
// result := tmp ;
32181: LD_ADDR_VAR 0 5
32185: PUSH
32186: LD_VAR 0 8
32190: ST_TO_ADDR
// end ; end ;
32191: LD_VAR 0 5
32195: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32196: LD_INT 0
32198: PPUSH
32199: PPUSH
32200: PPUSH
32201: PPUSH
// if not list then
32202: LD_VAR 0 3
32206: NOT
32207: IFFALSE 32211
// exit ;
32209: GO 32599
// result := [ ] ;
32211: LD_ADDR_VAR 0 6
32215: PUSH
32216: EMPTY
32217: ST_TO_ADDR
// for i in list do
32218: LD_ADDR_VAR 0 7
32222: PUSH
32223: LD_VAR 0 3
32227: PUSH
32228: FOR_IN
32229: IFFALSE 32431
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32231: LD_ADDR_VAR 0 9
32235: PUSH
32236: LD_VAR 0 7
32240: PPUSH
32241: LD_VAR 0 1
32245: PPUSH
32246: LD_VAR 0 2
32250: PPUSH
32251: CALL_OW 297
32255: ST_TO_ADDR
// if not result then
32256: LD_VAR 0 6
32260: NOT
32261: IFFALSE 32287
// result := [ [ i , tmp ] ] else
32263: LD_ADDR_VAR 0 6
32267: PUSH
32268: LD_VAR 0 7
32272: PUSH
32273: LD_VAR 0 9
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: EMPTY
32283: LIST
32284: ST_TO_ADDR
32285: GO 32429
// begin if result [ result ] [ 2 ] <= tmp then
32287: LD_VAR 0 6
32291: PUSH
32292: LD_VAR 0 6
32296: ARRAY
32297: PUSH
32298: LD_INT 2
32300: ARRAY
32301: PUSH
32302: LD_VAR 0 9
32306: LESSEQUAL
32307: IFFALSE 32349
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32309: LD_ADDR_VAR 0 6
32313: PUSH
32314: LD_VAR 0 6
32318: PPUSH
32319: LD_VAR 0 6
32323: PUSH
32324: LD_INT 1
32326: PLUS
32327: PPUSH
32328: LD_VAR 0 7
32332: PUSH
32333: LD_VAR 0 9
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PPUSH
32342: CALL_OW 2
32346: ST_TO_ADDR
32347: GO 32429
// for j := 1 to result do
32349: LD_ADDR_VAR 0 8
32353: PUSH
32354: DOUBLE
32355: LD_INT 1
32357: DEC
32358: ST_TO_ADDR
32359: LD_VAR 0 6
32363: PUSH
32364: FOR_TO
32365: IFFALSE 32427
// begin if tmp < result [ j ] [ 2 ] then
32367: LD_VAR 0 9
32371: PUSH
32372: LD_VAR 0 6
32376: PUSH
32377: LD_VAR 0 8
32381: ARRAY
32382: PUSH
32383: LD_INT 2
32385: ARRAY
32386: LESS
32387: IFFALSE 32425
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32389: LD_ADDR_VAR 0 6
32393: PUSH
32394: LD_VAR 0 6
32398: PPUSH
32399: LD_VAR 0 8
32403: PPUSH
32404: LD_VAR 0 7
32408: PUSH
32409: LD_VAR 0 9
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PPUSH
32418: CALL_OW 2
32422: ST_TO_ADDR
// break ;
32423: GO 32427
// end ; end ;
32425: GO 32364
32427: POP
32428: POP
// end ; end ;
32429: GO 32228
32431: POP
32432: POP
// if result and not asc then
32433: LD_VAR 0 6
32437: PUSH
32438: LD_VAR 0 4
32442: NOT
32443: AND
32444: IFFALSE 32519
// begin tmp := result ;
32446: LD_ADDR_VAR 0 9
32450: PUSH
32451: LD_VAR 0 6
32455: ST_TO_ADDR
// for i = tmp downto 1 do
32456: LD_ADDR_VAR 0 7
32460: PUSH
32461: DOUBLE
32462: LD_VAR 0 9
32466: INC
32467: ST_TO_ADDR
32468: LD_INT 1
32470: PUSH
32471: FOR_DOWNTO
32472: IFFALSE 32517
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32474: LD_ADDR_VAR 0 6
32478: PUSH
32479: LD_VAR 0 6
32483: PPUSH
32484: LD_VAR 0 9
32488: PUSH
32489: LD_VAR 0 7
32493: MINUS
32494: PUSH
32495: LD_INT 1
32497: PLUS
32498: PPUSH
32499: LD_VAR 0 9
32503: PUSH
32504: LD_VAR 0 7
32508: ARRAY
32509: PPUSH
32510: CALL_OW 1
32514: ST_TO_ADDR
32515: GO 32471
32517: POP
32518: POP
// end ; tmp := [ ] ;
32519: LD_ADDR_VAR 0 9
32523: PUSH
32524: EMPTY
32525: ST_TO_ADDR
// if mode then
32526: LD_VAR 0 5
32530: IFFALSE 32599
// begin for i = 1 to result do
32532: LD_ADDR_VAR 0 7
32536: PUSH
32537: DOUBLE
32538: LD_INT 1
32540: DEC
32541: ST_TO_ADDR
32542: LD_VAR 0 6
32546: PUSH
32547: FOR_TO
32548: IFFALSE 32587
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32550: LD_ADDR_VAR 0 9
32554: PUSH
32555: LD_VAR 0 9
32559: PPUSH
32560: LD_VAR 0 7
32564: PPUSH
32565: LD_VAR 0 6
32569: PUSH
32570: LD_VAR 0 7
32574: ARRAY
32575: PUSH
32576: LD_INT 1
32578: ARRAY
32579: PPUSH
32580: CALL_OW 1
32584: ST_TO_ADDR
32585: GO 32547
32587: POP
32588: POP
// result := tmp ;
32589: LD_ADDR_VAR 0 6
32593: PUSH
32594: LD_VAR 0 9
32598: ST_TO_ADDR
// end ; end ;
32599: LD_VAR 0 6
32603: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32604: LD_INT 0
32606: PPUSH
32607: PPUSH
32608: PPUSH
32609: PPUSH
32610: PPUSH
32611: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32612: LD_ADDR_VAR 0 5
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: EMPTY
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: ST_TO_ADDR
// if not x or not y then
32634: LD_VAR 0 2
32638: NOT
32639: PUSH
32640: LD_VAR 0 3
32644: NOT
32645: OR
32646: IFFALSE 32650
// exit ;
32648: GO 34300
// if not range then
32650: LD_VAR 0 4
32654: NOT
32655: IFFALSE 32665
// range := 10 ;
32657: LD_ADDR_VAR 0 4
32661: PUSH
32662: LD_INT 10
32664: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32665: LD_ADDR_VAR 0 8
32669: PUSH
32670: LD_INT 81
32672: PUSH
32673: LD_VAR 0 1
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 92
32684: PUSH
32685: LD_VAR 0 2
32689: PUSH
32690: LD_VAR 0 3
32694: PUSH
32695: LD_VAR 0 4
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 3
32708: PUSH
32709: LD_INT 21
32711: PUSH
32712: LD_INT 3
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: LIST
32727: PPUSH
32728: CALL_OW 69
32732: ST_TO_ADDR
// if not tmp then
32733: LD_VAR 0 8
32737: NOT
32738: IFFALSE 32742
// exit ;
32740: GO 34300
// for i in tmp do
32742: LD_ADDR_VAR 0 6
32746: PUSH
32747: LD_VAR 0 8
32751: PUSH
32752: FOR_IN
32753: IFFALSE 34275
// begin points := [ 0 , 0 , 0 ] ;
32755: LD_ADDR_VAR 0 9
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: LIST
32773: ST_TO_ADDR
// bpoints := 1 ;
32774: LD_ADDR_VAR 0 10
32778: PUSH
32779: LD_INT 1
32781: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32782: LD_VAR 0 6
32786: PPUSH
32787: CALL_OW 247
32791: PUSH
32792: LD_INT 1
32794: DOUBLE
32795: EQUAL
32796: IFTRUE 32800
32798: GO 33378
32800: POP
// begin if GetClass ( i ) = 1 then
32801: LD_VAR 0 6
32805: PPUSH
32806: CALL_OW 257
32810: PUSH
32811: LD_INT 1
32813: EQUAL
32814: IFFALSE 32835
// points := [ 10 , 5 , 3 ] ;
32816: LD_ADDR_VAR 0 9
32820: PUSH
32821: LD_INT 10
32823: PUSH
32824: LD_INT 5
32826: PUSH
32827: LD_INT 3
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: LIST
32834: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32835: LD_VAR 0 6
32839: PPUSH
32840: CALL_OW 257
32844: PUSH
32845: LD_INT 2
32847: PUSH
32848: LD_INT 3
32850: PUSH
32851: LD_INT 4
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: LIST
32858: IN
32859: IFFALSE 32880
// points := [ 3 , 2 , 1 ] ;
32861: LD_ADDR_VAR 0 9
32865: PUSH
32866: LD_INT 3
32868: PUSH
32869: LD_INT 2
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: LIST
32879: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32880: LD_VAR 0 6
32884: PPUSH
32885: CALL_OW 257
32889: PUSH
32890: LD_INT 5
32892: EQUAL
32893: IFFALSE 32914
// points := [ 130 , 5 , 2 ] ;
32895: LD_ADDR_VAR 0 9
32899: PUSH
32900: LD_INT 130
32902: PUSH
32903: LD_INT 5
32905: PUSH
32906: LD_INT 2
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: LIST
32913: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32914: LD_VAR 0 6
32918: PPUSH
32919: CALL_OW 257
32923: PUSH
32924: LD_INT 8
32926: EQUAL
32927: IFFALSE 32948
// points := [ 35 , 35 , 30 ] ;
32929: LD_ADDR_VAR 0 9
32933: PUSH
32934: LD_INT 35
32936: PUSH
32937: LD_INT 35
32939: PUSH
32940: LD_INT 30
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: LIST
32947: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32948: LD_VAR 0 6
32952: PPUSH
32953: CALL_OW 257
32957: PUSH
32958: LD_INT 9
32960: EQUAL
32961: IFFALSE 32982
// points := [ 20 , 55 , 40 ] ;
32963: LD_ADDR_VAR 0 9
32967: PUSH
32968: LD_INT 20
32970: PUSH
32971: LD_INT 55
32973: PUSH
32974: LD_INT 40
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32982: LD_VAR 0 6
32986: PPUSH
32987: CALL_OW 257
32991: PUSH
32992: LD_INT 12
32994: PUSH
32995: LD_INT 16
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: IN
33002: IFFALSE 33023
// points := [ 5 , 3 , 2 ] ;
33004: LD_ADDR_VAR 0 9
33008: PUSH
33009: LD_INT 5
33011: PUSH
33012: LD_INT 3
33014: PUSH
33015: LD_INT 2
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: LIST
33022: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33023: LD_VAR 0 6
33027: PPUSH
33028: CALL_OW 257
33032: PUSH
33033: LD_INT 17
33035: EQUAL
33036: IFFALSE 33057
// points := [ 100 , 50 , 75 ] ;
33038: LD_ADDR_VAR 0 9
33042: PUSH
33043: LD_INT 100
33045: PUSH
33046: LD_INT 50
33048: PUSH
33049: LD_INT 75
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: LIST
33056: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33057: LD_VAR 0 6
33061: PPUSH
33062: CALL_OW 257
33066: PUSH
33067: LD_INT 15
33069: EQUAL
33070: IFFALSE 33091
// points := [ 10 , 5 , 3 ] ;
33072: LD_ADDR_VAR 0 9
33076: PUSH
33077: LD_INT 10
33079: PUSH
33080: LD_INT 5
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: LIST
33090: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33091: LD_VAR 0 6
33095: PPUSH
33096: CALL_OW 257
33100: PUSH
33101: LD_INT 14
33103: EQUAL
33104: IFFALSE 33125
// points := [ 10 , 0 , 0 ] ;
33106: LD_ADDR_VAR 0 9
33110: PUSH
33111: LD_INT 10
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: LIST
33124: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33125: LD_VAR 0 6
33129: PPUSH
33130: CALL_OW 257
33134: PUSH
33135: LD_INT 11
33137: EQUAL
33138: IFFALSE 33159
// points := [ 30 , 10 , 5 ] ;
33140: LD_ADDR_VAR 0 9
33144: PUSH
33145: LD_INT 30
33147: PUSH
33148: LD_INT 10
33150: PUSH
33151: LD_INT 5
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: LIST
33158: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33159: LD_VAR 0 1
33163: PPUSH
33164: LD_INT 5
33166: PPUSH
33167: CALL_OW 321
33171: PUSH
33172: LD_INT 2
33174: EQUAL
33175: IFFALSE 33192
// bpoints := bpoints * 1.8 ;
33177: LD_ADDR_VAR 0 10
33181: PUSH
33182: LD_VAR 0 10
33186: PUSH
33187: LD_REAL  1.80000000000000E+0000
33190: MUL
33191: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33192: LD_VAR 0 6
33196: PPUSH
33197: CALL_OW 257
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: LD_INT 3
33210: PUSH
33211: LD_INT 4
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: IN
33220: PUSH
33221: LD_VAR 0 1
33225: PPUSH
33226: LD_INT 51
33228: PPUSH
33229: CALL_OW 321
33233: PUSH
33234: LD_INT 2
33236: EQUAL
33237: AND
33238: IFFALSE 33255
// bpoints := bpoints * 1.2 ;
33240: LD_ADDR_VAR 0 10
33244: PUSH
33245: LD_VAR 0 10
33249: PUSH
33250: LD_REAL  1.20000000000000E+0000
33253: MUL
33254: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33255: LD_VAR 0 6
33259: PPUSH
33260: CALL_OW 257
33264: PUSH
33265: LD_INT 5
33267: PUSH
33268: LD_INT 7
33270: PUSH
33271: LD_INT 9
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: IN
33279: PUSH
33280: LD_VAR 0 1
33284: PPUSH
33285: LD_INT 52
33287: PPUSH
33288: CALL_OW 321
33292: PUSH
33293: LD_INT 2
33295: EQUAL
33296: AND
33297: IFFALSE 33314
// bpoints := bpoints * 1.5 ;
33299: LD_ADDR_VAR 0 10
33303: PUSH
33304: LD_VAR 0 10
33308: PUSH
33309: LD_REAL  1.50000000000000E+0000
33312: MUL
33313: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33314: LD_VAR 0 1
33318: PPUSH
33319: LD_INT 66
33321: PPUSH
33322: CALL_OW 321
33326: PUSH
33327: LD_INT 2
33329: EQUAL
33330: IFFALSE 33347
// bpoints := bpoints * 1.1 ;
33332: LD_ADDR_VAR 0 10
33336: PUSH
33337: LD_VAR 0 10
33341: PUSH
33342: LD_REAL  1.10000000000000E+0000
33345: MUL
33346: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33347: LD_ADDR_VAR 0 10
33351: PUSH
33352: LD_VAR 0 10
33356: PUSH
33357: LD_VAR 0 6
33361: PPUSH
33362: LD_INT 1
33364: PPUSH
33365: CALL_OW 259
33369: PUSH
33370: LD_REAL  1.15000000000000E+0000
33373: MUL
33374: MUL
33375: ST_TO_ADDR
// end ; unit_vehicle :
33376: GO 34204
33378: LD_INT 2
33380: DOUBLE
33381: EQUAL
33382: IFTRUE 33386
33384: GO 34192
33386: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33387: LD_VAR 0 6
33391: PPUSH
33392: CALL_OW 264
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: LD_INT 42
33402: PUSH
33403: LD_INT 24
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: IN
33411: IFFALSE 33432
// points := [ 25 , 5 , 3 ] ;
33413: LD_ADDR_VAR 0 9
33417: PUSH
33418: LD_INT 25
33420: PUSH
33421: LD_INT 5
33423: PUSH
33424: LD_INT 3
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33432: LD_VAR 0 6
33436: PPUSH
33437: CALL_OW 264
33441: PUSH
33442: LD_INT 4
33444: PUSH
33445: LD_INT 43
33447: PUSH
33448: LD_INT 25
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: LIST
33455: IN
33456: IFFALSE 33477
// points := [ 40 , 15 , 5 ] ;
33458: LD_ADDR_VAR 0 9
33462: PUSH
33463: LD_INT 40
33465: PUSH
33466: LD_INT 15
33468: PUSH
33469: LD_INT 5
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: LIST
33476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33477: LD_VAR 0 6
33481: PPUSH
33482: CALL_OW 264
33486: PUSH
33487: LD_INT 3
33489: PUSH
33490: LD_INT 23
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: IN
33497: IFFALSE 33518
// points := [ 7 , 25 , 8 ] ;
33499: LD_ADDR_VAR 0 9
33503: PUSH
33504: LD_INT 7
33506: PUSH
33507: LD_INT 25
33509: PUSH
33510: LD_INT 8
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33518: LD_VAR 0 6
33522: PPUSH
33523: CALL_OW 264
33527: PUSH
33528: LD_INT 5
33530: PUSH
33531: LD_INT 27
33533: PUSH
33534: LD_INT 44
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: IN
33542: IFFALSE 33563
// points := [ 14 , 50 , 16 ] ;
33544: LD_ADDR_VAR 0 9
33548: PUSH
33549: LD_INT 14
33551: PUSH
33552: LD_INT 50
33554: PUSH
33555: LD_INT 16
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: LIST
33562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33563: LD_VAR 0 6
33567: PPUSH
33568: CALL_OW 264
33572: PUSH
33573: LD_INT 6
33575: PUSH
33576: LD_INT 46
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: IN
33583: IFFALSE 33604
// points := [ 32 , 120 , 70 ] ;
33585: LD_ADDR_VAR 0 9
33589: PUSH
33590: LD_INT 32
33592: PUSH
33593: LD_INT 120
33595: PUSH
33596: LD_INT 70
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33604: LD_VAR 0 6
33608: PPUSH
33609: CALL_OW 264
33613: PUSH
33614: LD_INT 7
33616: PUSH
33617: LD_INT 28
33619: PUSH
33620: LD_INT 45
33622: PUSH
33623: LD_INT 92
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: IN
33632: IFFALSE 33653
// points := [ 35 , 20 , 45 ] ;
33634: LD_ADDR_VAR 0 9
33638: PUSH
33639: LD_INT 35
33641: PUSH
33642: LD_INT 20
33644: PUSH
33645: LD_INT 45
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: LIST
33652: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33653: LD_VAR 0 6
33657: PPUSH
33658: CALL_OW 264
33662: PUSH
33663: LD_INT 47
33665: PUSH
33666: EMPTY
33667: LIST
33668: IN
33669: IFFALSE 33690
// points := [ 67 , 45 , 75 ] ;
33671: LD_ADDR_VAR 0 9
33675: PUSH
33676: LD_INT 67
33678: PUSH
33679: LD_INT 45
33681: PUSH
33682: LD_INT 75
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33690: LD_VAR 0 6
33694: PPUSH
33695: CALL_OW 264
33699: PUSH
33700: LD_INT 26
33702: PUSH
33703: EMPTY
33704: LIST
33705: IN
33706: IFFALSE 33727
// points := [ 120 , 30 , 80 ] ;
33708: LD_ADDR_VAR 0 9
33712: PUSH
33713: LD_INT 120
33715: PUSH
33716: LD_INT 30
33718: PUSH
33719: LD_INT 80
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: LIST
33726: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33727: LD_VAR 0 6
33731: PPUSH
33732: CALL_OW 264
33736: PUSH
33737: LD_INT 22
33739: PUSH
33740: EMPTY
33741: LIST
33742: IN
33743: IFFALSE 33764
// points := [ 40 , 1 , 1 ] ;
33745: LD_ADDR_VAR 0 9
33749: PUSH
33750: LD_INT 40
33752: PUSH
33753: LD_INT 1
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33764: LD_VAR 0 6
33768: PPUSH
33769: CALL_OW 264
33773: PUSH
33774: LD_INT 29
33776: PUSH
33777: EMPTY
33778: LIST
33779: IN
33780: IFFALSE 33801
// points := [ 70 , 200 , 400 ] ;
33782: LD_ADDR_VAR 0 9
33786: PUSH
33787: LD_INT 70
33789: PUSH
33790: LD_INT 200
33792: PUSH
33793: LD_INT 400
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: LIST
33800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33801: LD_VAR 0 6
33805: PPUSH
33806: CALL_OW 264
33810: PUSH
33811: LD_INT 14
33813: PUSH
33814: LD_INT 53
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: IN
33821: IFFALSE 33842
// points := [ 40 , 10 , 20 ] ;
33823: LD_ADDR_VAR 0 9
33827: PUSH
33828: LD_INT 40
33830: PUSH
33831: LD_INT 10
33833: PUSH
33834: LD_INT 20
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: LIST
33841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33842: LD_VAR 0 6
33846: PPUSH
33847: CALL_OW 264
33851: PUSH
33852: LD_INT 9
33854: PUSH
33855: EMPTY
33856: LIST
33857: IN
33858: IFFALSE 33879
// points := [ 5 , 70 , 20 ] ;
33860: LD_ADDR_VAR 0 9
33864: PUSH
33865: LD_INT 5
33867: PUSH
33868: LD_INT 70
33870: PUSH
33871: LD_INT 20
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33879: LD_VAR 0 6
33883: PPUSH
33884: CALL_OW 264
33888: PUSH
33889: LD_INT 10
33891: PUSH
33892: EMPTY
33893: LIST
33894: IN
33895: IFFALSE 33916
// points := [ 35 , 110 , 70 ] ;
33897: LD_ADDR_VAR 0 9
33901: PUSH
33902: LD_INT 35
33904: PUSH
33905: LD_INT 110
33907: PUSH
33908: LD_INT 70
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: LIST
33915: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33916: LD_VAR 0 6
33920: PPUSH
33921: CALL_OW 265
33925: PUSH
33926: LD_INT 25
33928: EQUAL
33929: IFFALSE 33950
// points := [ 80 , 65 , 100 ] ;
33931: LD_ADDR_VAR 0 9
33935: PUSH
33936: LD_INT 80
33938: PUSH
33939: LD_INT 65
33941: PUSH
33942: LD_INT 100
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33950: LD_VAR 0 6
33954: PPUSH
33955: CALL_OW 263
33959: PUSH
33960: LD_INT 1
33962: EQUAL
33963: IFFALSE 33998
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33965: LD_ADDR_VAR 0 10
33969: PUSH
33970: LD_VAR 0 10
33974: PUSH
33975: LD_VAR 0 6
33979: PPUSH
33980: CALL_OW 311
33984: PPUSH
33985: LD_INT 3
33987: PPUSH
33988: CALL_OW 259
33992: PUSH
33993: LD_INT 4
33995: MUL
33996: MUL
33997: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33998: LD_VAR 0 6
34002: PPUSH
34003: CALL_OW 263
34007: PUSH
34008: LD_INT 2
34010: EQUAL
34011: IFFALSE 34062
// begin j := IsControledBy ( i ) ;
34013: LD_ADDR_VAR 0 7
34017: PUSH
34018: LD_VAR 0 6
34022: PPUSH
34023: CALL_OW 312
34027: ST_TO_ADDR
// if j then
34028: LD_VAR 0 7
34032: IFFALSE 34062
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34034: LD_ADDR_VAR 0 10
34038: PUSH
34039: LD_VAR 0 10
34043: PUSH
34044: LD_VAR 0 7
34048: PPUSH
34049: LD_INT 3
34051: PPUSH
34052: CALL_OW 259
34056: PUSH
34057: LD_INT 3
34059: MUL
34060: MUL
34061: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34062: LD_VAR 0 6
34066: PPUSH
34067: CALL_OW 264
34071: PUSH
34072: LD_INT 5
34074: PUSH
34075: LD_INT 6
34077: PUSH
34078: LD_INT 46
34080: PUSH
34081: LD_INT 44
34083: PUSH
34084: LD_INT 47
34086: PUSH
34087: LD_INT 45
34089: PUSH
34090: LD_INT 28
34092: PUSH
34093: LD_INT 7
34095: PUSH
34096: LD_INT 27
34098: PUSH
34099: LD_INT 29
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: IN
34114: PUSH
34115: LD_VAR 0 1
34119: PPUSH
34120: LD_INT 52
34122: PPUSH
34123: CALL_OW 321
34127: PUSH
34128: LD_INT 2
34130: EQUAL
34131: AND
34132: IFFALSE 34149
// bpoints := bpoints * 1.2 ;
34134: LD_ADDR_VAR 0 10
34138: PUSH
34139: LD_VAR 0 10
34143: PUSH
34144: LD_REAL  1.20000000000000E+0000
34147: MUL
34148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34149: LD_VAR 0 6
34153: PPUSH
34154: CALL_OW 264
34158: PUSH
34159: LD_INT 6
34161: PUSH
34162: LD_INT 46
34164: PUSH
34165: LD_INT 47
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: LIST
34172: IN
34173: IFFALSE 34190
// bpoints := bpoints * 1.2 ;
34175: LD_ADDR_VAR 0 10
34179: PUSH
34180: LD_VAR 0 10
34184: PUSH
34185: LD_REAL  1.20000000000000E+0000
34188: MUL
34189: ST_TO_ADDR
// end ; unit_building :
34190: GO 34204
34192: LD_INT 3
34194: DOUBLE
34195: EQUAL
34196: IFTRUE 34200
34198: GO 34203
34200: POP
// ; end ;
34201: GO 34204
34203: POP
// for j = 1 to 3 do
34204: LD_ADDR_VAR 0 7
34208: PUSH
34209: DOUBLE
34210: LD_INT 1
34212: DEC
34213: ST_TO_ADDR
34214: LD_INT 3
34216: PUSH
34217: FOR_TO
34218: IFFALSE 34271
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34220: LD_ADDR_VAR 0 5
34224: PUSH
34225: LD_VAR 0 5
34229: PPUSH
34230: LD_VAR 0 7
34234: PPUSH
34235: LD_VAR 0 5
34239: PUSH
34240: LD_VAR 0 7
34244: ARRAY
34245: PUSH
34246: LD_VAR 0 9
34250: PUSH
34251: LD_VAR 0 7
34255: ARRAY
34256: PUSH
34257: LD_VAR 0 10
34261: MUL
34262: PLUS
34263: PPUSH
34264: CALL_OW 1
34268: ST_TO_ADDR
34269: GO 34217
34271: POP
34272: POP
// end ;
34273: GO 32752
34275: POP
34276: POP
// result := Replace ( result , 4 , tmp ) ;
34277: LD_ADDR_VAR 0 5
34281: PUSH
34282: LD_VAR 0 5
34286: PPUSH
34287: LD_INT 4
34289: PPUSH
34290: LD_VAR 0 8
34294: PPUSH
34295: CALL_OW 1
34299: ST_TO_ADDR
// end ;
34300: LD_VAR 0 5
34304: RET
// export function DangerAtRange ( unit , range ) ; begin
34305: LD_INT 0
34307: PPUSH
// if not unit then
34308: LD_VAR 0 1
34312: NOT
34313: IFFALSE 34317
// exit ;
34315: GO 34362
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34317: LD_ADDR_VAR 0 3
34321: PUSH
34322: LD_VAR 0 1
34326: PPUSH
34327: CALL_OW 255
34331: PPUSH
34332: LD_VAR 0 1
34336: PPUSH
34337: CALL_OW 250
34341: PPUSH
34342: LD_VAR 0 1
34346: PPUSH
34347: CALL_OW 251
34351: PPUSH
34352: LD_VAR 0 2
34356: PPUSH
34357: CALL 32604 0 4
34361: ST_TO_ADDR
// end ;
34362: LD_VAR 0 3
34366: RET
// export function DangerInArea ( side , area ) ; begin
34367: LD_INT 0
34369: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34370: LD_ADDR_VAR 0 3
34374: PUSH
34375: LD_VAR 0 2
34379: PPUSH
34380: LD_INT 81
34382: PUSH
34383: LD_VAR 0 1
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PPUSH
34392: CALL_OW 70
34396: ST_TO_ADDR
// end ;
34397: LD_VAR 0 3
34401: RET
// export function IsExtension ( b ) ; begin
34402: LD_INT 0
34404: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34405: LD_ADDR_VAR 0 2
34409: PUSH
34410: LD_VAR 0 1
34414: PUSH
34415: LD_INT 23
34417: PUSH
34418: LD_INT 20
34420: PUSH
34421: LD_INT 22
34423: PUSH
34424: LD_INT 17
34426: PUSH
34427: LD_INT 24
34429: PUSH
34430: LD_INT 21
34432: PUSH
34433: LD_INT 19
34435: PUSH
34436: LD_INT 16
34438: PUSH
34439: LD_INT 25
34441: PUSH
34442: LD_INT 18
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: IN
34457: ST_TO_ADDR
// end ;
34458: LD_VAR 0 2
34462: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34463: LD_INT 0
34465: PPUSH
34466: PPUSH
34467: PPUSH
// result := [ ] ;
34468: LD_ADDR_VAR 0 4
34472: PUSH
34473: EMPTY
34474: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34475: LD_ADDR_VAR 0 5
34479: PUSH
34480: LD_VAR 0 2
34484: PPUSH
34485: LD_INT 21
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PPUSH
34495: CALL_OW 70
34499: ST_TO_ADDR
// if not tmp then
34500: LD_VAR 0 5
34504: NOT
34505: IFFALSE 34509
// exit ;
34507: GO 34573
// if checkLink then
34509: LD_VAR 0 3
34513: IFFALSE 34563
// begin for i in tmp do
34515: LD_ADDR_VAR 0 6
34519: PUSH
34520: LD_VAR 0 5
34524: PUSH
34525: FOR_IN
34526: IFFALSE 34561
// if GetBase ( i ) <> base then
34528: LD_VAR 0 6
34532: PPUSH
34533: CALL_OW 274
34537: PUSH
34538: LD_VAR 0 1
34542: NONEQUAL
34543: IFFALSE 34559
// ComLinkToBase ( base , i ) ;
34545: LD_VAR 0 1
34549: PPUSH
34550: LD_VAR 0 6
34554: PPUSH
34555: CALL_OW 169
34559: GO 34525
34561: POP
34562: POP
// end ; result := tmp ;
34563: LD_ADDR_VAR 0 4
34567: PUSH
34568: LD_VAR 0 5
34572: ST_TO_ADDR
// end ;
34573: LD_VAR 0 4
34577: RET
// export function ComComplete ( units , b ) ; var i ; begin
34578: LD_INT 0
34580: PPUSH
34581: PPUSH
// if not units then
34582: LD_VAR 0 1
34586: NOT
34587: IFFALSE 34591
// exit ;
34589: GO 34681
// for i in units do
34591: LD_ADDR_VAR 0 4
34595: PUSH
34596: LD_VAR 0 1
34600: PUSH
34601: FOR_IN
34602: IFFALSE 34679
// if BuildingStatus ( b ) = bs_build then
34604: LD_VAR 0 2
34608: PPUSH
34609: CALL_OW 461
34613: PUSH
34614: LD_INT 1
34616: EQUAL
34617: IFFALSE 34677
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34619: LD_VAR 0 4
34623: PPUSH
34624: LD_STRING h
34626: PUSH
34627: LD_VAR 0 2
34631: PPUSH
34632: CALL_OW 250
34636: PUSH
34637: LD_VAR 0 2
34641: PPUSH
34642: CALL_OW 251
34646: PUSH
34647: LD_VAR 0 2
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: PUSH
34670: EMPTY
34671: LIST
34672: PPUSH
34673: CALL_OW 446
34677: GO 34601
34679: POP
34680: POP
// end ;
34681: LD_VAR 0 3
34685: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34686: LD_INT 0
34688: PPUSH
34689: PPUSH
34690: PPUSH
34691: PPUSH
34692: PPUSH
34693: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34694: LD_VAR 0 1
34698: NOT
34699: PUSH
34700: LD_VAR 0 1
34704: PPUSH
34705: CALL_OW 263
34709: PUSH
34710: LD_INT 2
34712: NONEQUAL
34713: OR
34714: IFFALSE 34718
// exit ;
34716: GO 35034
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34718: LD_ADDR_VAR 0 6
34722: PUSH
34723: LD_INT 22
34725: PUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: CALL_OW 255
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: LD_INT 30
34745: PUSH
34746: LD_INT 36
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 34
34755: PUSH
34756: LD_INT 31
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PPUSH
34772: CALL_OW 69
34776: ST_TO_ADDR
// if not tmp then
34777: LD_VAR 0 6
34781: NOT
34782: IFFALSE 34786
// exit ;
34784: GO 35034
// result := [ ] ;
34786: LD_ADDR_VAR 0 2
34790: PUSH
34791: EMPTY
34792: ST_TO_ADDR
// for i in tmp do
34793: LD_ADDR_VAR 0 3
34797: PUSH
34798: LD_VAR 0 6
34802: PUSH
34803: FOR_IN
34804: IFFALSE 34875
// begin t := UnitsInside ( i ) ;
34806: LD_ADDR_VAR 0 4
34810: PUSH
34811: LD_VAR 0 3
34815: PPUSH
34816: CALL_OW 313
34820: ST_TO_ADDR
// if t then
34821: LD_VAR 0 4
34825: IFFALSE 34873
// for j in t do
34827: LD_ADDR_VAR 0 7
34831: PUSH
34832: LD_VAR 0 4
34836: PUSH
34837: FOR_IN
34838: IFFALSE 34871
// result := Replace ( result , result + 1 , j ) ;
34840: LD_ADDR_VAR 0 2
34844: PUSH
34845: LD_VAR 0 2
34849: PPUSH
34850: LD_VAR 0 2
34854: PUSH
34855: LD_INT 1
34857: PLUS
34858: PPUSH
34859: LD_VAR 0 7
34863: PPUSH
34864: CALL_OW 1
34868: ST_TO_ADDR
34869: GO 34837
34871: POP
34872: POP
// end ;
34873: GO 34803
34875: POP
34876: POP
// if not result then
34877: LD_VAR 0 2
34881: NOT
34882: IFFALSE 34886
// exit ;
34884: GO 35034
// mech := result [ 1 ] ;
34886: LD_ADDR_VAR 0 5
34890: PUSH
34891: LD_VAR 0 2
34895: PUSH
34896: LD_INT 1
34898: ARRAY
34899: ST_TO_ADDR
// if result > 1 then
34900: LD_VAR 0 2
34904: PUSH
34905: LD_INT 1
34907: GREATER
34908: IFFALSE 35020
// begin for i = 2 to result do
34910: LD_ADDR_VAR 0 3
34914: PUSH
34915: DOUBLE
34916: LD_INT 2
34918: DEC
34919: ST_TO_ADDR
34920: LD_VAR 0 2
34924: PUSH
34925: FOR_TO
34926: IFFALSE 35018
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34928: LD_ADDR_VAR 0 4
34932: PUSH
34933: LD_VAR 0 2
34937: PUSH
34938: LD_VAR 0 3
34942: ARRAY
34943: PPUSH
34944: LD_INT 3
34946: PPUSH
34947: CALL_OW 259
34951: PUSH
34952: LD_VAR 0 2
34956: PUSH
34957: LD_VAR 0 3
34961: ARRAY
34962: PPUSH
34963: CALL_OW 432
34967: MINUS
34968: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34969: LD_VAR 0 4
34973: PUSH
34974: LD_VAR 0 5
34978: PPUSH
34979: LD_INT 3
34981: PPUSH
34982: CALL_OW 259
34986: PUSH
34987: LD_VAR 0 5
34991: PPUSH
34992: CALL_OW 432
34996: MINUS
34997: GREATEREQUAL
34998: IFFALSE 35016
// mech := result [ i ] ;
35000: LD_ADDR_VAR 0 5
35004: PUSH
35005: LD_VAR 0 2
35009: PUSH
35010: LD_VAR 0 3
35014: ARRAY
35015: ST_TO_ADDR
// end ;
35016: GO 34925
35018: POP
35019: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35020: LD_VAR 0 1
35024: PPUSH
35025: LD_VAR 0 5
35029: PPUSH
35030: CALL_OW 135
// end ;
35034: LD_VAR 0 2
35038: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35039: LD_INT 0
35041: PPUSH
35042: PPUSH
35043: PPUSH
35044: PPUSH
35045: PPUSH
35046: PPUSH
35047: PPUSH
35048: PPUSH
35049: PPUSH
35050: PPUSH
35051: PPUSH
35052: PPUSH
35053: PPUSH
// result := [ ] ;
35054: LD_ADDR_VAR 0 7
35058: PUSH
35059: EMPTY
35060: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35061: LD_VAR 0 1
35065: PPUSH
35066: CALL_OW 266
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: IN
35081: NOT
35082: IFFALSE 35086
// exit ;
35084: GO 36720
// if name then
35086: LD_VAR 0 3
35090: IFFALSE 35106
// SetBName ( base_dep , name ) ;
35092: LD_VAR 0 1
35096: PPUSH
35097: LD_VAR 0 3
35101: PPUSH
35102: CALL_OW 500
// base := GetBase ( base_dep ) ;
35106: LD_ADDR_VAR 0 15
35110: PUSH
35111: LD_VAR 0 1
35115: PPUSH
35116: CALL_OW 274
35120: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35121: LD_ADDR_VAR 0 16
35125: PUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 255
35135: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35136: LD_ADDR_VAR 0 17
35140: PUSH
35141: LD_VAR 0 1
35145: PPUSH
35146: CALL_OW 248
35150: ST_TO_ADDR
// if sources then
35151: LD_VAR 0 5
35155: IFFALSE 35202
// for i = 1 to 3 do
35157: LD_ADDR_VAR 0 8
35161: PUSH
35162: DOUBLE
35163: LD_INT 1
35165: DEC
35166: ST_TO_ADDR
35167: LD_INT 3
35169: PUSH
35170: FOR_TO
35171: IFFALSE 35200
// AddResourceType ( base , i , sources [ i ] ) ;
35173: LD_VAR 0 15
35177: PPUSH
35178: LD_VAR 0 8
35182: PPUSH
35183: LD_VAR 0 5
35187: PUSH
35188: LD_VAR 0 8
35192: ARRAY
35193: PPUSH
35194: CALL_OW 276
35198: GO 35170
35200: POP
35201: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35202: LD_ADDR_VAR 0 18
35206: PUSH
35207: LD_VAR 0 15
35211: PPUSH
35212: LD_VAR 0 2
35216: PPUSH
35217: LD_INT 1
35219: PPUSH
35220: CALL 34463 0 3
35224: ST_TO_ADDR
// InitHc ;
35225: CALL_OW 19
// InitUc ;
35229: CALL_OW 18
// uc_side := side ;
35233: LD_ADDR_OWVAR 20
35237: PUSH
35238: LD_VAR 0 16
35242: ST_TO_ADDR
// uc_nation := nation ;
35243: LD_ADDR_OWVAR 21
35247: PUSH
35248: LD_VAR 0 17
35252: ST_TO_ADDR
// if buildings then
35253: LD_VAR 0 18
35257: IFFALSE 36579
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35259: LD_ADDR_VAR 0 19
35263: PUSH
35264: LD_VAR 0 18
35268: PPUSH
35269: LD_INT 2
35271: PUSH
35272: LD_INT 30
35274: PUSH
35275: LD_INT 29
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 30
35284: PUSH
35285: LD_INT 30
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: LIST
35296: PPUSH
35297: CALL_OW 72
35301: ST_TO_ADDR
// if tmp then
35302: LD_VAR 0 19
35306: IFFALSE 35354
// for i in tmp do
35308: LD_ADDR_VAR 0 8
35312: PUSH
35313: LD_VAR 0 19
35317: PUSH
35318: FOR_IN
35319: IFFALSE 35352
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35321: LD_VAR 0 8
35325: PPUSH
35326: CALL_OW 250
35330: PPUSH
35331: LD_VAR 0 8
35335: PPUSH
35336: CALL_OW 251
35340: PPUSH
35341: LD_VAR 0 16
35345: PPUSH
35346: CALL_OW 441
35350: GO 35318
35352: POP
35353: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35354: LD_VAR 0 18
35358: PPUSH
35359: LD_INT 2
35361: PUSH
35362: LD_INT 30
35364: PUSH
35365: LD_INT 32
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 30
35374: PUSH
35375: LD_INT 33
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: PPUSH
35387: CALL_OW 72
35391: IFFALSE 35479
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35393: LD_ADDR_VAR 0 8
35397: PUSH
35398: LD_VAR 0 18
35402: PPUSH
35403: LD_INT 2
35405: PUSH
35406: LD_INT 30
35408: PUSH
35409: LD_INT 32
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 30
35418: PUSH
35419: LD_INT 33
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: LIST
35430: PPUSH
35431: CALL_OW 72
35435: PUSH
35436: FOR_IN
35437: IFFALSE 35477
// begin if not GetBWeapon ( i ) then
35439: LD_VAR 0 8
35443: PPUSH
35444: CALL_OW 269
35448: NOT
35449: IFFALSE 35475
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35451: LD_VAR 0 8
35455: PPUSH
35456: LD_VAR 0 8
35460: PPUSH
35461: LD_VAR 0 2
35465: PPUSH
35466: CALL 36725 0 2
35470: PPUSH
35471: CALL_OW 431
// end ;
35475: GO 35436
35477: POP
35478: POP
// end ; for i = 1 to personel do
35479: LD_ADDR_VAR 0 8
35483: PUSH
35484: DOUBLE
35485: LD_INT 1
35487: DEC
35488: ST_TO_ADDR
35489: LD_VAR 0 6
35493: PUSH
35494: FOR_TO
35495: IFFALSE 36559
// begin if i > 4 then
35497: LD_VAR 0 8
35501: PUSH
35502: LD_INT 4
35504: GREATER
35505: IFFALSE 35509
// break ;
35507: GO 36559
// case i of 1 :
35509: LD_VAR 0 8
35513: PUSH
35514: LD_INT 1
35516: DOUBLE
35517: EQUAL
35518: IFTRUE 35522
35520: GO 35602
35522: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35523: LD_ADDR_VAR 0 12
35527: PUSH
35528: LD_VAR 0 18
35532: PPUSH
35533: LD_INT 22
35535: PUSH
35536: LD_VAR 0 16
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 58
35547: PUSH
35548: EMPTY
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: LD_INT 30
35556: PUSH
35557: LD_INT 32
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 30
35566: PUSH
35567: LD_INT 4
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 30
35576: PUSH
35577: LD_INT 5
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: LIST
35594: PPUSH
35595: CALL_OW 72
35599: ST_TO_ADDR
35600: GO 35824
35602: LD_INT 2
35604: DOUBLE
35605: EQUAL
35606: IFTRUE 35610
35608: GO 35672
35610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35611: LD_ADDR_VAR 0 12
35615: PUSH
35616: LD_VAR 0 18
35620: PPUSH
35621: LD_INT 22
35623: PUSH
35624: LD_VAR 0 16
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 30
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 30
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PPUSH
35665: CALL_OW 72
35669: ST_TO_ADDR
35670: GO 35824
35672: LD_INT 3
35674: DOUBLE
35675: EQUAL
35676: IFTRUE 35680
35678: GO 35742
35680: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35681: LD_ADDR_VAR 0 12
35685: PUSH
35686: LD_VAR 0 18
35690: PPUSH
35691: LD_INT 22
35693: PUSH
35694: LD_VAR 0 16
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: LD_INT 30
35708: PUSH
35709: LD_INT 2
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 30
35718: PUSH
35719: LD_INT 3
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: LIST
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PPUSH
35735: CALL_OW 72
35739: ST_TO_ADDR
35740: GO 35824
35742: LD_INT 4
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35750
35748: GO 35823
35750: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35751: LD_ADDR_VAR 0 12
35755: PUSH
35756: LD_VAR 0 18
35760: PPUSH
35761: LD_INT 22
35763: PUSH
35764: LD_VAR 0 16
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: LD_INT 30
35778: PUSH
35779: LD_INT 6
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 30
35788: PUSH
35789: LD_INT 7
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 30
35798: PUSH
35799: LD_INT 8
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PPUSH
35816: CALL_OW 72
35820: ST_TO_ADDR
35821: GO 35824
35823: POP
// if i = 1 then
35824: LD_VAR 0 8
35828: PUSH
35829: LD_INT 1
35831: EQUAL
35832: IFFALSE 35943
// begin tmp := [ ] ;
35834: LD_ADDR_VAR 0 19
35838: PUSH
35839: EMPTY
35840: ST_TO_ADDR
// for j in f do
35841: LD_ADDR_VAR 0 9
35845: PUSH
35846: LD_VAR 0 12
35850: PUSH
35851: FOR_IN
35852: IFFALSE 35925
// if GetBType ( j ) = b_bunker then
35854: LD_VAR 0 9
35858: PPUSH
35859: CALL_OW 266
35863: PUSH
35864: LD_INT 32
35866: EQUAL
35867: IFFALSE 35894
// tmp := Insert ( tmp , 1 , j ) else
35869: LD_ADDR_VAR 0 19
35873: PUSH
35874: LD_VAR 0 19
35878: PPUSH
35879: LD_INT 1
35881: PPUSH
35882: LD_VAR 0 9
35886: PPUSH
35887: CALL_OW 2
35891: ST_TO_ADDR
35892: GO 35923
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35894: LD_ADDR_VAR 0 19
35898: PUSH
35899: LD_VAR 0 19
35903: PPUSH
35904: LD_VAR 0 19
35908: PUSH
35909: LD_INT 1
35911: PLUS
35912: PPUSH
35913: LD_VAR 0 9
35917: PPUSH
35918: CALL_OW 2
35922: ST_TO_ADDR
35923: GO 35851
35925: POP
35926: POP
// if tmp then
35927: LD_VAR 0 19
35931: IFFALSE 35943
// f := tmp ;
35933: LD_ADDR_VAR 0 12
35937: PUSH
35938: LD_VAR 0 19
35942: ST_TO_ADDR
// end ; x := personel [ i ] ;
35943: LD_ADDR_VAR 0 13
35947: PUSH
35948: LD_VAR 0 6
35952: PUSH
35953: LD_VAR 0 8
35957: ARRAY
35958: ST_TO_ADDR
// if x = - 1 then
35959: LD_VAR 0 13
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: EQUAL
35968: IFFALSE 36177
// begin for j in f do
35970: LD_ADDR_VAR 0 9
35974: PUSH
35975: LD_VAR 0 12
35979: PUSH
35980: FOR_IN
35981: IFFALSE 36173
// repeat InitHc ;
35983: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35987: LD_VAR 0 9
35991: PPUSH
35992: CALL_OW 266
35996: PUSH
35997: LD_INT 5
35999: EQUAL
36000: IFFALSE 36070
// begin if UnitsInside ( j ) < 3 then
36002: LD_VAR 0 9
36006: PPUSH
36007: CALL_OW 313
36011: PUSH
36012: LD_INT 3
36014: LESS
36015: IFFALSE 36051
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36017: LD_INT 0
36019: PPUSH
36020: LD_INT 5
36022: PUSH
36023: LD_INT 8
36025: PUSH
36026: LD_INT 9
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: PUSH
36034: LD_VAR 0 17
36038: ARRAY
36039: PPUSH
36040: LD_VAR 0 4
36044: PPUSH
36045: CALL_OW 380
36049: GO 36068
// PrepareHuman ( false , i , skill ) ;
36051: LD_INT 0
36053: PPUSH
36054: LD_VAR 0 8
36058: PPUSH
36059: LD_VAR 0 4
36063: PPUSH
36064: CALL_OW 380
// end else
36068: GO 36087
// PrepareHuman ( false , i , skill ) ;
36070: LD_INT 0
36072: PPUSH
36073: LD_VAR 0 8
36077: PPUSH
36078: LD_VAR 0 4
36082: PPUSH
36083: CALL_OW 380
// un := CreateHuman ;
36087: LD_ADDR_VAR 0 14
36091: PUSH
36092: CALL_OW 44
36096: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36097: LD_ADDR_VAR 0 7
36101: PUSH
36102: LD_VAR 0 7
36106: PPUSH
36107: LD_INT 1
36109: PPUSH
36110: LD_VAR 0 14
36114: PPUSH
36115: CALL_OW 2
36119: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36120: LD_VAR 0 14
36124: PPUSH
36125: LD_VAR 0 9
36129: PPUSH
36130: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36134: LD_VAR 0 9
36138: PPUSH
36139: CALL_OW 313
36143: PUSH
36144: LD_INT 6
36146: EQUAL
36147: PUSH
36148: LD_VAR 0 9
36152: PPUSH
36153: CALL_OW 266
36157: PUSH
36158: LD_INT 32
36160: PUSH
36161: LD_INT 31
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: IN
36168: OR
36169: IFFALSE 35983
36171: GO 35980
36173: POP
36174: POP
// end else
36175: GO 36557
// for j = 1 to x do
36177: LD_ADDR_VAR 0 9
36181: PUSH
36182: DOUBLE
36183: LD_INT 1
36185: DEC
36186: ST_TO_ADDR
36187: LD_VAR 0 13
36191: PUSH
36192: FOR_TO
36193: IFFALSE 36555
// begin InitHc ;
36195: CALL_OW 19
// if not f then
36199: LD_VAR 0 12
36203: NOT
36204: IFFALSE 36293
// begin PrepareHuman ( false , i , skill ) ;
36206: LD_INT 0
36208: PPUSH
36209: LD_VAR 0 8
36213: PPUSH
36214: LD_VAR 0 4
36218: PPUSH
36219: CALL_OW 380
// un := CreateHuman ;
36223: LD_ADDR_VAR 0 14
36227: PUSH
36228: CALL_OW 44
36232: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36233: LD_ADDR_VAR 0 7
36237: PUSH
36238: LD_VAR 0 7
36242: PPUSH
36243: LD_INT 1
36245: PPUSH
36246: LD_VAR 0 14
36250: PPUSH
36251: CALL_OW 2
36255: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36256: LD_VAR 0 14
36260: PPUSH
36261: LD_VAR 0 1
36265: PPUSH
36266: CALL_OW 250
36270: PPUSH
36271: LD_VAR 0 1
36275: PPUSH
36276: CALL_OW 251
36280: PPUSH
36281: LD_INT 10
36283: PPUSH
36284: LD_INT 0
36286: PPUSH
36287: CALL_OW 50
// continue ;
36291: GO 36192
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36293: LD_VAR 0 12
36297: PUSH
36298: LD_INT 1
36300: ARRAY
36301: PPUSH
36302: CALL_OW 313
36306: PUSH
36307: LD_VAR 0 12
36311: PUSH
36312: LD_INT 1
36314: ARRAY
36315: PPUSH
36316: CALL_OW 266
36320: PUSH
36321: LD_INT 32
36323: PUSH
36324: LD_INT 31
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: IN
36331: AND
36332: PUSH
36333: LD_VAR 0 12
36337: PUSH
36338: LD_INT 1
36340: ARRAY
36341: PPUSH
36342: CALL_OW 313
36346: PUSH
36347: LD_INT 6
36349: EQUAL
36350: OR
36351: IFFALSE 36371
// f := Delete ( f , 1 ) ;
36353: LD_ADDR_VAR 0 12
36357: PUSH
36358: LD_VAR 0 12
36362: PPUSH
36363: LD_INT 1
36365: PPUSH
36366: CALL_OW 3
36370: ST_TO_ADDR
// if not f then
36371: LD_VAR 0 12
36375: NOT
36376: IFFALSE 36394
// begin x := x + 2 ;
36378: LD_ADDR_VAR 0 13
36382: PUSH
36383: LD_VAR 0 13
36387: PUSH
36388: LD_INT 2
36390: PLUS
36391: ST_TO_ADDR
// continue ;
36392: GO 36192
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36394: LD_VAR 0 12
36398: PUSH
36399: LD_INT 1
36401: ARRAY
36402: PPUSH
36403: CALL_OW 266
36407: PUSH
36408: LD_INT 5
36410: EQUAL
36411: IFFALSE 36485
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36413: LD_VAR 0 12
36417: PUSH
36418: LD_INT 1
36420: ARRAY
36421: PPUSH
36422: CALL_OW 313
36426: PUSH
36427: LD_INT 3
36429: LESS
36430: IFFALSE 36466
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36432: LD_INT 0
36434: PPUSH
36435: LD_INT 5
36437: PUSH
36438: LD_INT 8
36440: PUSH
36441: LD_INT 9
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: LIST
36448: PUSH
36449: LD_VAR 0 17
36453: ARRAY
36454: PPUSH
36455: LD_VAR 0 4
36459: PPUSH
36460: CALL_OW 380
36464: GO 36483
// PrepareHuman ( false , i , skill ) ;
36466: LD_INT 0
36468: PPUSH
36469: LD_VAR 0 8
36473: PPUSH
36474: LD_VAR 0 4
36478: PPUSH
36479: CALL_OW 380
// end else
36483: GO 36502
// PrepareHuman ( false , i , skill ) ;
36485: LD_INT 0
36487: PPUSH
36488: LD_VAR 0 8
36492: PPUSH
36493: LD_VAR 0 4
36497: PPUSH
36498: CALL_OW 380
// un := CreateHuman ;
36502: LD_ADDR_VAR 0 14
36506: PUSH
36507: CALL_OW 44
36511: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36512: LD_ADDR_VAR 0 7
36516: PUSH
36517: LD_VAR 0 7
36521: PPUSH
36522: LD_INT 1
36524: PPUSH
36525: LD_VAR 0 14
36529: PPUSH
36530: CALL_OW 2
36534: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36535: LD_VAR 0 14
36539: PPUSH
36540: LD_VAR 0 12
36544: PUSH
36545: LD_INT 1
36547: ARRAY
36548: PPUSH
36549: CALL_OW 52
// end ;
36553: GO 36192
36555: POP
36556: POP
// end ;
36557: GO 35494
36559: POP
36560: POP
// result := result ^ buildings ;
36561: LD_ADDR_VAR 0 7
36565: PUSH
36566: LD_VAR 0 7
36570: PUSH
36571: LD_VAR 0 18
36575: ADD
36576: ST_TO_ADDR
// end else
36577: GO 36720
// begin for i = 1 to personel do
36579: LD_ADDR_VAR 0 8
36583: PUSH
36584: DOUBLE
36585: LD_INT 1
36587: DEC
36588: ST_TO_ADDR
36589: LD_VAR 0 6
36593: PUSH
36594: FOR_TO
36595: IFFALSE 36718
// begin if i > 4 then
36597: LD_VAR 0 8
36601: PUSH
36602: LD_INT 4
36604: GREATER
36605: IFFALSE 36609
// break ;
36607: GO 36718
// x := personel [ i ] ;
36609: LD_ADDR_VAR 0 13
36613: PUSH
36614: LD_VAR 0 6
36618: PUSH
36619: LD_VAR 0 8
36623: ARRAY
36624: ST_TO_ADDR
// if x = - 1 then
36625: LD_VAR 0 13
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: EQUAL
36634: IFFALSE 36638
// continue ;
36636: GO 36594
// PrepareHuman ( false , i , skill ) ;
36638: LD_INT 0
36640: PPUSH
36641: LD_VAR 0 8
36645: PPUSH
36646: LD_VAR 0 4
36650: PPUSH
36651: CALL_OW 380
// un := CreateHuman ;
36655: LD_ADDR_VAR 0 14
36659: PUSH
36660: CALL_OW 44
36664: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36665: LD_VAR 0 14
36669: PPUSH
36670: LD_VAR 0 1
36674: PPUSH
36675: CALL_OW 250
36679: PPUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: CALL_OW 251
36689: PPUSH
36690: LD_INT 10
36692: PPUSH
36693: LD_INT 0
36695: PPUSH
36696: CALL_OW 50
// result := result ^ un ;
36700: LD_ADDR_VAR 0 7
36704: PUSH
36705: LD_VAR 0 7
36709: PUSH
36710: LD_VAR 0 14
36714: ADD
36715: ST_TO_ADDR
// end ;
36716: GO 36594
36718: POP
36719: POP
// end ; end ;
36720: LD_VAR 0 7
36724: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36725: LD_INT 0
36727: PPUSH
36728: PPUSH
36729: PPUSH
36730: PPUSH
36731: PPUSH
36732: PPUSH
36733: PPUSH
36734: PPUSH
36735: PPUSH
36736: PPUSH
36737: PPUSH
36738: PPUSH
36739: PPUSH
36740: PPUSH
36741: PPUSH
36742: PPUSH
// result := false ;
36743: LD_ADDR_VAR 0 3
36747: PUSH
36748: LD_INT 0
36750: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36751: LD_VAR 0 1
36755: NOT
36756: PUSH
36757: LD_VAR 0 1
36761: PPUSH
36762: CALL_OW 266
36766: PUSH
36767: LD_INT 32
36769: PUSH
36770: LD_INT 33
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: IN
36777: NOT
36778: OR
36779: IFFALSE 36783
// exit ;
36781: GO 37892
// nat := GetNation ( tower ) ;
36783: LD_ADDR_VAR 0 12
36787: PUSH
36788: LD_VAR 0 1
36792: PPUSH
36793: CALL_OW 248
36797: ST_TO_ADDR
// side := GetSide ( tower ) ;
36798: LD_ADDR_VAR 0 16
36802: PUSH
36803: LD_VAR 0 1
36807: PPUSH
36808: CALL_OW 255
36812: ST_TO_ADDR
// x := GetX ( tower ) ;
36813: LD_ADDR_VAR 0 10
36817: PUSH
36818: LD_VAR 0 1
36822: PPUSH
36823: CALL_OW 250
36827: ST_TO_ADDR
// y := GetY ( tower ) ;
36828: LD_ADDR_VAR 0 11
36832: PUSH
36833: LD_VAR 0 1
36837: PPUSH
36838: CALL_OW 251
36842: ST_TO_ADDR
// if not x or not y then
36843: LD_VAR 0 10
36847: NOT
36848: PUSH
36849: LD_VAR 0 11
36853: NOT
36854: OR
36855: IFFALSE 36859
// exit ;
36857: GO 37892
// weapon := 0 ;
36859: LD_ADDR_VAR 0 18
36863: PUSH
36864: LD_INT 0
36866: ST_TO_ADDR
// fac_list := [ ] ;
36867: LD_ADDR_VAR 0 17
36871: PUSH
36872: EMPTY
36873: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36874: LD_ADDR_VAR 0 6
36878: PUSH
36879: LD_VAR 0 1
36883: PPUSH
36884: CALL_OW 274
36888: PPUSH
36889: LD_VAR 0 2
36893: PPUSH
36894: LD_INT 0
36896: PPUSH
36897: CALL 34463 0 3
36901: PPUSH
36902: LD_INT 30
36904: PUSH
36905: LD_INT 3
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PPUSH
36912: CALL_OW 72
36916: ST_TO_ADDR
// if not factories then
36917: LD_VAR 0 6
36921: NOT
36922: IFFALSE 36926
// exit ;
36924: GO 37892
// for i in factories do
36926: LD_ADDR_VAR 0 8
36930: PUSH
36931: LD_VAR 0 6
36935: PUSH
36936: FOR_IN
36937: IFFALSE 36962
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36939: LD_ADDR_VAR 0 17
36943: PUSH
36944: LD_VAR 0 17
36948: PUSH
36949: LD_VAR 0 8
36953: PPUSH
36954: CALL_OW 478
36958: UNION
36959: ST_TO_ADDR
36960: GO 36936
36962: POP
36963: POP
// if not fac_list then
36964: LD_VAR 0 17
36968: NOT
36969: IFFALSE 36973
// exit ;
36971: GO 37892
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36973: LD_ADDR_VAR 0 5
36977: PUSH
36978: LD_INT 4
36980: PUSH
36981: LD_INT 5
36983: PUSH
36984: LD_INT 9
36986: PUSH
36987: LD_INT 10
36989: PUSH
36990: LD_INT 6
36992: PUSH
36993: LD_INT 7
36995: PUSH
36996: LD_INT 11
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 27
37010: PUSH
37011: LD_INT 28
37013: PUSH
37014: LD_INT 26
37016: PUSH
37017: LD_INT 30
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 43
37028: PUSH
37029: LD_INT 44
37031: PUSH
37032: LD_INT 46
37034: PUSH
37035: LD_INT 45
37037: PUSH
37038: LD_INT 47
37040: PUSH
37041: LD_INT 49
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: PUSH
37057: LD_VAR 0 12
37061: ARRAY
37062: ST_TO_ADDR
// list := list isect fac_list ;
37063: LD_ADDR_VAR 0 5
37067: PUSH
37068: LD_VAR 0 5
37072: PUSH
37073: LD_VAR 0 17
37077: ISECT
37078: ST_TO_ADDR
// if not list then
37079: LD_VAR 0 5
37083: NOT
37084: IFFALSE 37088
// exit ;
37086: GO 37892
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37088: LD_VAR 0 12
37092: PUSH
37093: LD_INT 3
37095: EQUAL
37096: PUSH
37097: LD_INT 49
37099: PUSH
37100: LD_VAR 0 5
37104: IN
37105: AND
37106: PUSH
37107: LD_INT 31
37109: PPUSH
37110: LD_VAR 0 16
37114: PPUSH
37115: CALL_OW 321
37119: PUSH
37120: LD_INT 2
37122: EQUAL
37123: AND
37124: IFFALSE 37184
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37126: LD_INT 22
37128: PUSH
37129: LD_VAR 0 16
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 35
37140: PUSH
37141: LD_INT 49
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 91
37150: PUSH
37151: LD_VAR 0 1
37155: PUSH
37156: LD_INT 10
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: PPUSH
37169: CALL_OW 69
37173: NOT
37174: IFFALSE 37184
// weapon := ru_time_lapser ;
37176: LD_ADDR_VAR 0 18
37180: PUSH
37181: LD_INT 49
37183: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37184: LD_VAR 0 12
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: IN
37199: PUSH
37200: LD_INT 11
37202: PUSH
37203: LD_VAR 0 5
37207: IN
37208: PUSH
37209: LD_INT 30
37211: PUSH
37212: LD_VAR 0 5
37216: IN
37217: OR
37218: AND
37219: PUSH
37220: LD_INT 6
37222: PPUSH
37223: LD_VAR 0 16
37227: PPUSH
37228: CALL_OW 321
37232: PUSH
37233: LD_INT 2
37235: EQUAL
37236: AND
37237: IFFALSE 37402
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37239: LD_INT 22
37241: PUSH
37242: LD_VAR 0 16
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: LD_INT 35
37256: PUSH
37257: LD_INT 11
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 35
37266: PUSH
37267: LD_INT 30
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 91
37281: PUSH
37282: LD_VAR 0 1
37286: PUSH
37287: LD_INT 18
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: LIST
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: PPUSH
37300: CALL_OW 69
37304: NOT
37305: PUSH
37306: LD_INT 22
37308: PUSH
37309: LD_VAR 0 16
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 2
37320: PUSH
37321: LD_INT 30
37323: PUSH
37324: LD_INT 32
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 30
37333: PUSH
37334: LD_INT 33
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 91
37348: PUSH
37349: LD_VAR 0 1
37353: PUSH
37354: LD_INT 12
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: PUSH
37367: EMPTY
37368: LIST
37369: PPUSH
37370: CALL_OW 69
37374: PUSH
37375: LD_INT 2
37377: GREATER
37378: AND
37379: IFFALSE 37402
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37381: LD_ADDR_VAR 0 18
37385: PUSH
37386: LD_INT 11
37388: PUSH
37389: LD_INT 30
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_VAR 0 12
37400: ARRAY
37401: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37402: LD_VAR 0 18
37406: NOT
37407: PUSH
37408: LD_INT 40
37410: PPUSH
37411: LD_VAR 0 16
37415: PPUSH
37416: CALL_OW 321
37420: PUSH
37421: LD_INT 2
37423: EQUAL
37424: AND
37425: PUSH
37426: LD_INT 7
37428: PUSH
37429: LD_VAR 0 5
37433: IN
37434: PUSH
37435: LD_INT 28
37437: PUSH
37438: LD_VAR 0 5
37442: IN
37443: OR
37444: PUSH
37445: LD_INT 45
37447: PUSH
37448: LD_VAR 0 5
37452: IN
37453: OR
37454: AND
37455: IFFALSE 37709
// begin hex := GetHexInfo ( x , y ) ;
37457: LD_ADDR_VAR 0 4
37461: PUSH
37462: LD_VAR 0 10
37466: PPUSH
37467: LD_VAR 0 11
37471: PPUSH
37472: CALL_OW 546
37476: ST_TO_ADDR
// if hex [ 1 ] then
37477: LD_VAR 0 4
37481: PUSH
37482: LD_INT 1
37484: ARRAY
37485: IFFALSE 37489
// exit ;
37487: GO 37892
// height := hex [ 2 ] ;
37489: LD_ADDR_VAR 0 15
37493: PUSH
37494: LD_VAR 0 4
37498: PUSH
37499: LD_INT 2
37501: ARRAY
37502: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37503: LD_ADDR_VAR 0 14
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: LD_INT 3
37516: PUSH
37517: LD_INT 5
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: ST_TO_ADDR
// for i in tmp do
37526: LD_ADDR_VAR 0 8
37530: PUSH
37531: LD_VAR 0 14
37535: PUSH
37536: FOR_IN
37537: IFFALSE 37707
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37539: LD_ADDR_VAR 0 9
37543: PUSH
37544: LD_VAR 0 10
37548: PPUSH
37549: LD_VAR 0 8
37553: PPUSH
37554: LD_INT 5
37556: PPUSH
37557: CALL_OW 272
37561: PUSH
37562: LD_VAR 0 11
37566: PPUSH
37567: LD_VAR 0 8
37571: PPUSH
37572: LD_INT 5
37574: PPUSH
37575: CALL_OW 273
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37584: LD_VAR 0 9
37588: PUSH
37589: LD_INT 1
37591: ARRAY
37592: PPUSH
37593: LD_VAR 0 9
37597: PUSH
37598: LD_INT 2
37600: ARRAY
37601: PPUSH
37602: CALL_OW 488
37606: IFFALSE 37705
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37608: LD_ADDR_VAR 0 4
37612: PUSH
37613: LD_VAR 0 9
37617: PUSH
37618: LD_INT 1
37620: ARRAY
37621: PPUSH
37622: LD_VAR 0 9
37626: PUSH
37627: LD_INT 2
37629: ARRAY
37630: PPUSH
37631: CALL_OW 546
37635: ST_TO_ADDR
// if hex [ 1 ] then
37636: LD_VAR 0 4
37640: PUSH
37641: LD_INT 1
37643: ARRAY
37644: IFFALSE 37648
// continue ;
37646: GO 37536
// h := hex [ 2 ] ;
37648: LD_ADDR_VAR 0 13
37652: PUSH
37653: LD_VAR 0 4
37657: PUSH
37658: LD_INT 2
37660: ARRAY
37661: ST_TO_ADDR
// if h + 7 < height then
37662: LD_VAR 0 13
37666: PUSH
37667: LD_INT 7
37669: PLUS
37670: PUSH
37671: LD_VAR 0 15
37675: LESS
37676: IFFALSE 37705
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37678: LD_ADDR_VAR 0 18
37682: PUSH
37683: LD_INT 7
37685: PUSH
37686: LD_INT 28
37688: PUSH
37689: LD_INT 45
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: LIST
37696: PUSH
37697: LD_VAR 0 12
37701: ARRAY
37702: ST_TO_ADDR
// break ;
37703: GO 37707
// end ; end ; end ;
37705: GO 37536
37707: POP
37708: POP
// end ; if not weapon then
37709: LD_VAR 0 18
37713: NOT
37714: IFFALSE 37774
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37716: LD_ADDR_VAR 0 5
37720: PUSH
37721: LD_VAR 0 5
37725: PUSH
37726: LD_INT 11
37728: PUSH
37729: LD_INT 30
37731: PUSH
37732: LD_INT 49
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: DIFF
37740: ST_TO_ADDR
// if not list then
37741: LD_VAR 0 5
37745: NOT
37746: IFFALSE 37750
// exit ;
37748: GO 37892
// weapon := list [ rand ( 1 , list ) ] ;
37750: LD_ADDR_VAR 0 18
37754: PUSH
37755: LD_VAR 0 5
37759: PUSH
37760: LD_INT 1
37762: PPUSH
37763: LD_VAR 0 5
37767: PPUSH
37768: CALL_OW 12
37772: ARRAY
37773: ST_TO_ADDR
// end ; if weapon then
37774: LD_VAR 0 18
37778: IFFALSE 37892
// begin tmp := CostOfWeapon ( weapon ) ;
37780: LD_ADDR_VAR 0 14
37784: PUSH
37785: LD_VAR 0 18
37789: PPUSH
37790: CALL_OW 451
37794: ST_TO_ADDR
// j := GetBase ( tower ) ;
37795: LD_ADDR_VAR 0 9
37799: PUSH
37800: LD_VAR 0 1
37804: PPUSH
37805: CALL_OW 274
37809: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37810: LD_VAR 0 9
37814: PPUSH
37815: LD_INT 1
37817: PPUSH
37818: CALL_OW 275
37822: PUSH
37823: LD_VAR 0 14
37827: PUSH
37828: LD_INT 1
37830: ARRAY
37831: GREATEREQUAL
37832: PUSH
37833: LD_VAR 0 9
37837: PPUSH
37838: LD_INT 2
37840: PPUSH
37841: CALL_OW 275
37845: PUSH
37846: LD_VAR 0 14
37850: PUSH
37851: LD_INT 2
37853: ARRAY
37854: GREATEREQUAL
37855: AND
37856: PUSH
37857: LD_VAR 0 9
37861: PPUSH
37862: LD_INT 3
37864: PPUSH
37865: CALL_OW 275
37869: PUSH
37870: LD_VAR 0 14
37874: PUSH
37875: LD_INT 3
37877: ARRAY
37878: GREATEREQUAL
37879: AND
37880: IFFALSE 37892
// result := weapon ;
37882: LD_ADDR_VAR 0 3
37886: PUSH
37887: LD_VAR 0 18
37891: ST_TO_ADDR
// end ; end ;
37892: LD_VAR 0 3
37896: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37897: LD_INT 0
37899: PPUSH
37900: PPUSH
// result := true ;
37901: LD_ADDR_VAR 0 3
37905: PUSH
37906: LD_INT 1
37908: ST_TO_ADDR
// if array1 = array2 then
37909: LD_VAR 0 1
37913: PUSH
37914: LD_VAR 0 2
37918: EQUAL
37919: IFFALSE 37979
// begin for i = 1 to array1 do
37921: LD_ADDR_VAR 0 4
37925: PUSH
37926: DOUBLE
37927: LD_INT 1
37929: DEC
37930: ST_TO_ADDR
37931: LD_VAR 0 1
37935: PUSH
37936: FOR_TO
37937: IFFALSE 37975
// if array1 [ i ] <> array2 [ i ] then
37939: LD_VAR 0 1
37943: PUSH
37944: LD_VAR 0 4
37948: ARRAY
37949: PUSH
37950: LD_VAR 0 2
37954: PUSH
37955: LD_VAR 0 4
37959: ARRAY
37960: NONEQUAL
37961: IFFALSE 37973
// begin result := false ;
37963: LD_ADDR_VAR 0 3
37967: PUSH
37968: LD_INT 0
37970: ST_TO_ADDR
// break ;
37971: GO 37975
// end ;
37973: GO 37936
37975: POP
37976: POP
// end else
37977: GO 37987
// result := false ;
37979: LD_ADDR_VAR 0 3
37983: PUSH
37984: LD_INT 0
37986: ST_TO_ADDR
// end ;
37987: LD_VAR 0 3
37991: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37992: LD_INT 0
37994: PPUSH
37995: PPUSH
// if not array1 or not array2 then
37996: LD_VAR 0 1
38000: NOT
38001: PUSH
38002: LD_VAR 0 2
38006: NOT
38007: OR
38008: IFFALSE 38012
// exit ;
38010: GO 38076
// result := true ;
38012: LD_ADDR_VAR 0 3
38016: PUSH
38017: LD_INT 1
38019: ST_TO_ADDR
// for i = 1 to array1 do
38020: LD_ADDR_VAR 0 4
38024: PUSH
38025: DOUBLE
38026: LD_INT 1
38028: DEC
38029: ST_TO_ADDR
38030: LD_VAR 0 1
38034: PUSH
38035: FOR_TO
38036: IFFALSE 38074
// if array1 [ i ] <> array2 [ i ] then
38038: LD_VAR 0 1
38042: PUSH
38043: LD_VAR 0 4
38047: ARRAY
38048: PUSH
38049: LD_VAR 0 2
38053: PUSH
38054: LD_VAR 0 4
38058: ARRAY
38059: NONEQUAL
38060: IFFALSE 38072
// begin result := false ;
38062: LD_ADDR_VAR 0 3
38066: PUSH
38067: LD_INT 0
38069: ST_TO_ADDR
// break ;
38070: GO 38074
// end ;
38072: GO 38035
38074: POP
38075: POP
// end ;
38076: LD_VAR 0 3
38080: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38081: LD_INT 0
38083: PPUSH
38084: PPUSH
38085: PPUSH
// pom := GetBase ( fac ) ;
38086: LD_ADDR_VAR 0 5
38090: PUSH
38091: LD_VAR 0 1
38095: PPUSH
38096: CALL_OW 274
38100: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38101: LD_ADDR_VAR 0 4
38105: PUSH
38106: LD_VAR 0 2
38110: PUSH
38111: LD_INT 1
38113: ARRAY
38114: PPUSH
38115: LD_VAR 0 2
38119: PUSH
38120: LD_INT 2
38122: ARRAY
38123: PPUSH
38124: LD_VAR 0 2
38128: PUSH
38129: LD_INT 3
38131: ARRAY
38132: PPUSH
38133: LD_VAR 0 2
38137: PUSH
38138: LD_INT 4
38140: ARRAY
38141: PPUSH
38142: CALL_OW 449
38146: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38147: LD_ADDR_VAR 0 3
38151: PUSH
38152: LD_VAR 0 5
38156: PPUSH
38157: LD_INT 1
38159: PPUSH
38160: CALL_OW 275
38164: PUSH
38165: LD_VAR 0 4
38169: PUSH
38170: LD_INT 1
38172: ARRAY
38173: GREATEREQUAL
38174: PUSH
38175: LD_VAR 0 5
38179: PPUSH
38180: LD_INT 2
38182: PPUSH
38183: CALL_OW 275
38187: PUSH
38188: LD_VAR 0 4
38192: PUSH
38193: LD_INT 2
38195: ARRAY
38196: GREATEREQUAL
38197: AND
38198: PUSH
38199: LD_VAR 0 5
38203: PPUSH
38204: LD_INT 3
38206: PPUSH
38207: CALL_OW 275
38211: PUSH
38212: LD_VAR 0 4
38216: PUSH
38217: LD_INT 3
38219: ARRAY
38220: GREATEREQUAL
38221: AND
38222: ST_TO_ADDR
// end ;
38223: LD_VAR 0 3
38227: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38228: LD_INT 0
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
// pom := GetBase ( building ) ;
38234: LD_ADDR_VAR 0 3
38238: PUSH
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL_OW 274
38248: ST_TO_ADDR
// if not pom then
38249: LD_VAR 0 3
38253: NOT
38254: IFFALSE 38258
// exit ;
38256: GO 38428
// btype := GetBType ( building ) ;
38258: LD_ADDR_VAR 0 5
38262: PUSH
38263: LD_VAR 0 1
38267: PPUSH
38268: CALL_OW 266
38272: ST_TO_ADDR
// if btype = b_armoury then
38273: LD_VAR 0 5
38277: PUSH
38278: LD_INT 4
38280: EQUAL
38281: IFFALSE 38291
// btype := b_barracks ;
38283: LD_ADDR_VAR 0 5
38287: PUSH
38288: LD_INT 5
38290: ST_TO_ADDR
// if btype = b_depot then
38291: LD_VAR 0 5
38295: PUSH
38296: LD_INT 0
38298: EQUAL
38299: IFFALSE 38309
// btype := b_warehouse ;
38301: LD_ADDR_VAR 0 5
38305: PUSH
38306: LD_INT 1
38308: ST_TO_ADDR
// if btype = b_workshop then
38309: LD_VAR 0 5
38313: PUSH
38314: LD_INT 2
38316: EQUAL
38317: IFFALSE 38327
// btype := b_factory ;
38319: LD_ADDR_VAR 0 5
38323: PUSH
38324: LD_INT 3
38326: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38327: LD_ADDR_VAR 0 4
38331: PUSH
38332: LD_VAR 0 5
38336: PPUSH
38337: LD_VAR 0 1
38341: PPUSH
38342: CALL_OW 248
38346: PPUSH
38347: CALL_OW 450
38351: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38352: LD_ADDR_VAR 0 2
38356: PUSH
38357: LD_VAR 0 3
38361: PPUSH
38362: LD_INT 1
38364: PPUSH
38365: CALL_OW 275
38369: PUSH
38370: LD_VAR 0 4
38374: PUSH
38375: LD_INT 1
38377: ARRAY
38378: GREATEREQUAL
38379: PUSH
38380: LD_VAR 0 3
38384: PPUSH
38385: LD_INT 2
38387: PPUSH
38388: CALL_OW 275
38392: PUSH
38393: LD_VAR 0 4
38397: PUSH
38398: LD_INT 2
38400: ARRAY
38401: GREATEREQUAL
38402: AND
38403: PUSH
38404: LD_VAR 0 3
38408: PPUSH
38409: LD_INT 3
38411: PPUSH
38412: CALL_OW 275
38416: PUSH
38417: LD_VAR 0 4
38421: PUSH
38422: LD_INT 3
38424: ARRAY
38425: GREATEREQUAL
38426: AND
38427: ST_TO_ADDR
// end ;
38428: LD_VAR 0 2
38432: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38433: LD_INT 0
38435: PPUSH
38436: PPUSH
38437: PPUSH
// pom := GetBase ( building ) ;
38438: LD_ADDR_VAR 0 4
38442: PUSH
38443: LD_VAR 0 1
38447: PPUSH
38448: CALL_OW 274
38452: ST_TO_ADDR
// if not pom then
38453: LD_VAR 0 4
38457: NOT
38458: IFFALSE 38462
// exit ;
38460: GO 38563
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38462: LD_ADDR_VAR 0 5
38466: PUSH
38467: LD_VAR 0 2
38471: PPUSH
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL_OW 248
38481: PPUSH
38482: CALL_OW 450
38486: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38487: LD_ADDR_VAR 0 3
38491: PUSH
38492: LD_VAR 0 4
38496: PPUSH
38497: LD_INT 1
38499: PPUSH
38500: CALL_OW 275
38504: PUSH
38505: LD_VAR 0 5
38509: PUSH
38510: LD_INT 1
38512: ARRAY
38513: GREATEREQUAL
38514: PUSH
38515: LD_VAR 0 4
38519: PPUSH
38520: LD_INT 2
38522: PPUSH
38523: CALL_OW 275
38527: PUSH
38528: LD_VAR 0 5
38532: PUSH
38533: LD_INT 2
38535: ARRAY
38536: GREATEREQUAL
38537: AND
38538: PUSH
38539: LD_VAR 0 4
38543: PPUSH
38544: LD_INT 3
38546: PPUSH
38547: CALL_OW 275
38551: PUSH
38552: LD_VAR 0 5
38556: PUSH
38557: LD_INT 3
38559: ARRAY
38560: GREATEREQUAL
38561: AND
38562: ST_TO_ADDR
// end ;
38563: LD_VAR 0 3
38567: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38568: LD_INT 0
38570: PPUSH
38571: PPUSH
38572: PPUSH
38573: PPUSH
38574: PPUSH
38575: PPUSH
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
// result := false ;
38581: LD_ADDR_VAR 0 8
38585: PUSH
38586: LD_INT 0
38588: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38589: LD_VAR 0 5
38593: NOT
38594: PUSH
38595: LD_VAR 0 1
38599: NOT
38600: OR
38601: PUSH
38602: LD_VAR 0 2
38606: NOT
38607: OR
38608: PUSH
38609: LD_VAR 0 3
38613: NOT
38614: OR
38615: IFFALSE 38619
// exit ;
38617: GO 39433
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38619: LD_ADDR_VAR 0 14
38623: PUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: LD_VAR 0 2
38633: PPUSH
38634: LD_VAR 0 3
38638: PPUSH
38639: LD_VAR 0 4
38643: PPUSH
38644: LD_VAR 0 5
38648: PUSH
38649: LD_INT 1
38651: ARRAY
38652: PPUSH
38653: CALL_OW 248
38657: PPUSH
38658: LD_INT 0
38660: PPUSH
38661: CALL 40686 0 6
38665: ST_TO_ADDR
// if not hexes then
38666: LD_VAR 0 14
38670: NOT
38671: IFFALSE 38675
// exit ;
38673: GO 39433
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38675: LD_ADDR_VAR 0 17
38679: PUSH
38680: LD_VAR 0 5
38684: PPUSH
38685: LD_INT 22
38687: PUSH
38688: LD_VAR 0 13
38692: PPUSH
38693: CALL_OW 255
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 30
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 30
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PPUSH
38734: CALL_OW 72
38738: ST_TO_ADDR
// for i = 1 to hexes do
38739: LD_ADDR_VAR 0 9
38743: PUSH
38744: DOUBLE
38745: LD_INT 1
38747: DEC
38748: ST_TO_ADDR
38749: LD_VAR 0 14
38753: PUSH
38754: FOR_TO
38755: IFFALSE 39431
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38757: LD_ADDR_VAR 0 13
38761: PUSH
38762: LD_VAR 0 14
38766: PUSH
38767: LD_VAR 0 9
38771: ARRAY
38772: PUSH
38773: LD_INT 1
38775: ARRAY
38776: PPUSH
38777: LD_VAR 0 14
38781: PUSH
38782: LD_VAR 0 9
38786: ARRAY
38787: PUSH
38788: LD_INT 2
38790: ARRAY
38791: PPUSH
38792: CALL_OW 428
38796: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38797: LD_VAR 0 14
38801: PUSH
38802: LD_VAR 0 9
38806: ARRAY
38807: PUSH
38808: LD_INT 1
38810: ARRAY
38811: PPUSH
38812: LD_VAR 0 14
38816: PUSH
38817: LD_VAR 0 9
38821: ARRAY
38822: PUSH
38823: LD_INT 2
38825: ARRAY
38826: PPUSH
38827: CALL_OW 351
38831: PUSH
38832: LD_VAR 0 14
38836: PUSH
38837: LD_VAR 0 9
38841: ARRAY
38842: PUSH
38843: LD_INT 1
38845: ARRAY
38846: PPUSH
38847: LD_VAR 0 14
38851: PUSH
38852: LD_VAR 0 9
38856: ARRAY
38857: PUSH
38858: LD_INT 2
38860: ARRAY
38861: PPUSH
38862: CALL_OW 488
38866: NOT
38867: OR
38868: PUSH
38869: LD_VAR 0 13
38873: PPUSH
38874: CALL_OW 247
38878: PUSH
38879: LD_INT 3
38881: EQUAL
38882: OR
38883: IFFALSE 38889
// exit ;
38885: POP
38886: POP
38887: GO 39433
// if not tmp then
38889: LD_VAR 0 13
38893: NOT
38894: IFFALSE 38898
// continue ;
38896: GO 38754
// result := true ;
38898: LD_ADDR_VAR 0 8
38902: PUSH
38903: LD_INT 1
38905: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38906: LD_VAR 0 6
38910: PUSH
38911: LD_VAR 0 13
38915: PPUSH
38916: CALL_OW 247
38920: PUSH
38921: LD_INT 2
38923: EQUAL
38924: AND
38925: PUSH
38926: LD_VAR 0 13
38930: PPUSH
38931: CALL_OW 263
38935: PUSH
38936: LD_INT 1
38938: EQUAL
38939: AND
38940: IFFALSE 39104
// begin if IsDrivenBy ( tmp ) then
38942: LD_VAR 0 13
38946: PPUSH
38947: CALL_OW 311
38951: IFFALSE 38955
// continue ;
38953: GO 38754
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38955: LD_VAR 0 6
38959: PPUSH
38960: LD_INT 3
38962: PUSH
38963: LD_INT 60
38965: PUSH
38966: EMPTY
38967: LIST
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 3
38975: PUSH
38976: LD_INT 55
38978: PUSH
38979: EMPTY
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PPUSH
38990: CALL_OW 72
38994: IFFALSE 39102
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38996: LD_ADDR_VAR 0 18
39000: PUSH
39001: LD_VAR 0 6
39005: PPUSH
39006: LD_INT 3
39008: PUSH
39009: LD_INT 60
39011: PUSH
39012: EMPTY
39013: LIST
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 3
39021: PUSH
39022: LD_INT 55
39024: PUSH
39025: EMPTY
39026: LIST
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PPUSH
39036: CALL_OW 72
39040: PUSH
39041: LD_INT 1
39043: ARRAY
39044: ST_TO_ADDR
// if IsInUnit ( driver ) then
39045: LD_VAR 0 18
39049: PPUSH
39050: CALL_OW 310
39054: IFFALSE 39065
// ComExit ( driver ) ;
39056: LD_VAR 0 18
39060: PPUSH
39061: CALL 64487 0 1
// AddComEnterUnit ( driver , tmp ) ;
39065: LD_VAR 0 18
39069: PPUSH
39070: LD_VAR 0 13
39074: PPUSH
39075: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39079: LD_VAR 0 18
39083: PPUSH
39084: LD_VAR 0 7
39088: PPUSH
39089: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39093: LD_VAR 0 18
39097: PPUSH
39098: CALL_OW 181
// end ; continue ;
39102: GO 38754
// end ; if not cleaners or not tmp in cleaners then
39104: LD_VAR 0 6
39108: NOT
39109: PUSH
39110: LD_VAR 0 13
39114: PUSH
39115: LD_VAR 0 6
39119: IN
39120: NOT
39121: OR
39122: IFFALSE 39429
// begin if dep then
39124: LD_VAR 0 17
39128: IFFALSE 39264
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39130: LD_ADDR_VAR 0 16
39134: PUSH
39135: LD_VAR 0 17
39139: PUSH
39140: LD_INT 1
39142: ARRAY
39143: PPUSH
39144: CALL_OW 250
39148: PPUSH
39149: LD_VAR 0 17
39153: PUSH
39154: LD_INT 1
39156: ARRAY
39157: PPUSH
39158: CALL_OW 254
39162: PPUSH
39163: LD_INT 5
39165: PPUSH
39166: CALL_OW 272
39170: PUSH
39171: LD_VAR 0 17
39175: PUSH
39176: LD_INT 1
39178: ARRAY
39179: PPUSH
39180: CALL_OW 251
39184: PPUSH
39185: LD_VAR 0 17
39189: PUSH
39190: LD_INT 1
39192: ARRAY
39193: PPUSH
39194: CALL_OW 254
39198: PPUSH
39199: LD_INT 5
39201: PPUSH
39202: CALL_OW 273
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39211: LD_VAR 0 16
39215: PUSH
39216: LD_INT 1
39218: ARRAY
39219: PPUSH
39220: LD_VAR 0 16
39224: PUSH
39225: LD_INT 2
39227: ARRAY
39228: PPUSH
39229: CALL_OW 488
39233: IFFALSE 39264
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39235: LD_VAR 0 13
39239: PPUSH
39240: LD_VAR 0 16
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: PPUSH
39249: LD_VAR 0 16
39253: PUSH
39254: LD_INT 2
39256: ARRAY
39257: PPUSH
39258: CALL_OW 111
// continue ;
39262: GO 38754
// end ; end ; r := GetDir ( tmp ) ;
39264: LD_ADDR_VAR 0 15
39268: PUSH
39269: LD_VAR 0 13
39273: PPUSH
39274: CALL_OW 254
39278: ST_TO_ADDR
// if r = 5 then
39279: LD_VAR 0 15
39283: PUSH
39284: LD_INT 5
39286: EQUAL
39287: IFFALSE 39297
// r := 0 ;
39289: LD_ADDR_VAR 0 15
39293: PUSH
39294: LD_INT 0
39296: ST_TO_ADDR
// for j = r to 5 do
39297: LD_ADDR_VAR 0 10
39301: PUSH
39302: DOUBLE
39303: LD_VAR 0 15
39307: DEC
39308: ST_TO_ADDR
39309: LD_INT 5
39311: PUSH
39312: FOR_TO
39313: IFFALSE 39427
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39315: LD_ADDR_VAR 0 11
39319: PUSH
39320: LD_VAR 0 13
39324: PPUSH
39325: CALL_OW 250
39329: PPUSH
39330: LD_VAR 0 10
39334: PPUSH
39335: LD_INT 2
39337: PPUSH
39338: CALL_OW 272
39342: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39343: LD_ADDR_VAR 0 12
39347: PUSH
39348: LD_VAR 0 13
39352: PPUSH
39353: CALL_OW 251
39357: PPUSH
39358: LD_VAR 0 10
39362: PPUSH
39363: LD_INT 2
39365: PPUSH
39366: CALL_OW 273
39370: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39371: LD_VAR 0 11
39375: PPUSH
39376: LD_VAR 0 12
39380: PPUSH
39381: CALL_OW 488
39385: PUSH
39386: LD_VAR 0 11
39390: PPUSH
39391: LD_VAR 0 12
39395: PPUSH
39396: CALL_OW 428
39400: NOT
39401: AND
39402: IFFALSE 39425
// begin ComMoveXY ( tmp , _x , _y ) ;
39404: LD_VAR 0 13
39408: PPUSH
39409: LD_VAR 0 11
39413: PPUSH
39414: LD_VAR 0 12
39418: PPUSH
39419: CALL_OW 111
// break ;
39423: GO 39427
// end ; end ;
39425: GO 39312
39427: POP
39428: POP
// end ; end ;
39429: GO 38754
39431: POP
39432: POP
// end ;
39433: LD_VAR 0 8
39437: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39438: LD_INT 0
39440: PPUSH
// result := true ;
39441: LD_ADDR_VAR 0 3
39445: PUSH
39446: LD_INT 1
39448: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39449: LD_VAR 0 2
39453: PUSH
39454: LD_INT 24
39456: DOUBLE
39457: EQUAL
39458: IFTRUE 39468
39460: LD_INT 33
39462: DOUBLE
39463: EQUAL
39464: IFTRUE 39468
39466: GO 39493
39468: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39469: LD_ADDR_VAR 0 3
39473: PUSH
39474: LD_INT 32
39476: PPUSH
39477: LD_VAR 0 1
39481: PPUSH
39482: CALL_OW 321
39486: PUSH
39487: LD_INT 2
39489: EQUAL
39490: ST_TO_ADDR
39491: GO 39809
39493: LD_INT 20
39495: DOUBLE
39496: EQUAL
39497: IFTRUE 39501
39499: GO 39526
39501: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39502: LD_ADDR_VAR 0 3
39506: PUSH
39507: LD_INT 6
39509: PPUSH
39510: LD_VAR 0 1
39514: PPUSH
39515: CALL_OW 321
39519: PUSH
39520: LD_INT 2
39522: EQUAL
39523: ST_TO_ADDR
39524: GO 39809
39526: LD_INT 22
39528: DOUBLE
39529: EQUAL
39530: IFTRUE 39540
39532: LD_INT 36
39534: DOUBLE
39535: EQUAL
39536: IFTRUE 39540
39538: GO 39565
39540: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39541: LD_ADDR_VAR 0 3
39545: PUSH
39546: LD_INT 15
39548: PPUSH
39549: LD_VAR 0 1
39553: PPUSH
39554: CALL_OW 321
39558: PUSH
39559: LD_INT 2
39561: EQUAL
39562: ST_TO_ADDR
39563: GO 39809
39565: LD_INT 30
39567: DOUBLE
39568: EQUAL
39569: IFTRUE 39573
39571: GO 39598
39573: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39574: LD_ADDR_VAR 0 3
39578: PUSH
39579: LD_INT 20
39581: PPUSH
39582: LD_VAR 0 1
39586: PPUSH
39587: CALL_OW 321
39591: PUSH
39592: LD_INT 2
39594: EQUAL
39595: ST_TO_ADDR
39596: GO 39809
39598: LD_INT 28
39600: DOUBLE
39601: EQUAL
39602: IFTRUE 39612
39604: LD_INT 21
39606: DOUBLE
39607: EQUAL
39608: IFTRUE 39612
39610: GO 39637
39612: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39613: LD_ADDR_VAR 0 3
39617: PUSH
39618: LD_INT 21
39620: PPUSH
39621: LD_VAR 0 1
39625: PPUSH
39626: CALL_OW 321
39630: PUSH
39631: LD_INT 2
39633: EQUAL
39634: ST_TO_ADDR
39635: GO 39809
39637: LD_INT 16
39639: DOUBLE
39640: EQUAL
39641: IFTRUE 39645
39643: GO 39670
39645: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39646: LD_ADDR_VAR 0 3
39650: PUSH
39651: LD_INT 84
39653: PPUSH
39654: LD_VAR 0 1
39658: PPUSH
39659: CALL_OW 321
39663: PUSH
39664: LD_INT 2
39666: EQUAL
39667: ST_TO_ADDR
39668: GO 39809
39670: LD_INT 19
39672: DOUBLE
39673: EQUAL
39674: IFTRUE 39684
39676: LD_INT 23
39678: DOUBLE
39679: EQUAL
39680: IFTRUE 39684
39682: GO 39709
39684: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39685: LD_ADDR_VAR 0 3
39689: PUSH
39690: LD_INT 83
39692: PPUSH
39693: LD_VAR 0 1
39697: PPUSH
39698: CALL_OW 321
39702: PUSH
39703: LD_INT 2
39705: EQUAL
39706: ST_TO_ADDR
39707: GO 39809
39709: LD_INT 17
39711: DOUBLE
39712: EQUAL
39713: IFTRUE 39717
39715: GO 39742
39717: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39718: LD_ADDR_VAR 0 3
39722: PUSH
39723: LD_INT 39
39725: PPUSH
39726: LD_VAR 0 1
39730: PPUSH
39731: CALL_OW 321
39735: PUSH
39736: LD_INT 2
39738: EQUAL
39739: ST_TO_ADDR
39740: GO 39809
39742: LD_INT 18
39744: DOUBLE
39745: EQUAL
39746: IFTRUE 39750
39748: GO 39775
39750: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39751: LD_ADDR_VAR 0 3
39755: PUSH
39756: LD_INT 40
39758: PPUSH
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 321
39768: PUSH
39769: LD_INT 2
39771: EQUAL
39772: ST_TO_ADDR
39773: GO 39809
39775: LD_INT 27
39777: DOUBLE
39778: EQUAL
39779: IFTRUE 39783
39781: GO 39808
39783: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39784: LD_ADDR_VAR 0 3
39788: PUSH
39789: LD_INT 35
39791: PPUSH
39792: LD_VAR 0 1
39796: PPUSH
39797: CALL_OW 321
39801: PUSH
39802: LD_INT 2
39804: EQUAL
39805: ST_TO_ADDR
39806: GO 39809
39808: POP
// end ;
39809: LD_VAR 0 3
39813: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39814: LD_INT 0
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
// result := false ;
39827: LD_ADDR_VAR 0 6
39831: PUSH
39832: LD_INT 0
39834: ST_TO_ADDR
// if btype = b_depot then
39835: LD_VAR 0 2
39839: PUSH
39840: LD_INT 0
39842: EQUAL
39843: IFFALSE 39855
// begin result := true ;
39845: LD_ADDR_VAR 0 6
39849: PUSH
39850: LD_INT 1
39852: ST_TO_ADDR
// exit ;
39853: GO 40681
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39855: LD_VAR 0 1
39859: NOT
39860: PUSH
39861: LD_VAR 0 1
39865: PPUSH
39866: CALL_OW 266
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: IN
39881: NOT
39882: OR
39883: PUSH
39884: LD_VAR 0 2
39888: NOT
39889: OR
39890: PUSH
39891: LD_VAR 0 5
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: LD_INT 3
39907: PUSH
39908: LD_INT 4
39910: PUSH
39911: LD_INT 5
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: IN
39922: NOT
39923: OR
39924: PUSH
39925: LD_VAR 0 3
39929: PPUSH
39930: LD_VAR 0 4
39934: PPUSH
39935: CALL_OW 488
39939: NOT
39940: OR
39941: IFFALSE 39945
// exit ;
39943: GO 40681
// side := GetSide ( depot ) ;
39945: LD_ADDR_VAR 0 9
39949: PUSH
39950: LD_VAR 0 1
39954: PPUSH
39955: CALL_OW 255
39959: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39960: LD_VAR 0 9
39964: PPUSH
39965: LD_VAR 0 2
39969: PPUSH
39970: CALL 39438 0 2
39974: NOT
39975: IFFALSE 39979
// exit ;
39977: GO 40681
// pom := GetBase ( depot ) ;
39979: LD_ADDR_VAR 0 10
39983: PUSH
39984: LD_VAR 0 1
39988: PPUSH
39989: CALL_OW 274
39993: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39994: LD_ADDR_VAR 0 11
39998: PUSH
39999: LD_VAR 0 2
40003: PPUSH
40004: LD_VAR 0 1
40008: PPUSH
40009: CALL_OW 248
40013: PPUSH
40014: CALL_OW 450
40018: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40019: LD_VAR 0 10
40023: PPUSH
40024: LD_INT 1
40026: PPUSH
40027: CALL_OW 275
40031: PUSH
40032: LD_VAR 0 11
40036: PUSH
40037: LD_INT 1
40039: ARRAY
40040: GREATEREQUAL
40041: PUSH
40042: LD_VAR 0 10
40046: PPUSH
40047: LD_INT 2
40049: PPUSH
40050: CALL_OW 275
40054: PUSH
40055: LD_VAR 0 11
40059: PUSH
40060: LD_INT 2
40062: ARRAY
40063: GREATEREQUAL
40064: AND
40065: PUSH
40066: LD_VAR 0 10
40070: PPUSH
40071: LD_INT 3
40073: PPUSH
40074: CALL_OW 275
40078: PUSH
40079: LD_VAR 0 11
40083: PUSH
40084: LD_INT 3
40086: ARRAY
40087: GREATEREQUAL
40088: AND
40089: NOT
40090: IFFALSE 40094
// exit ;
40092: GO 40681
// if GetBType ( depot ) = b_depot then
40094: LD_VAR 0 1
40098: PPUSH
40099: CALL_OW 266
40103: PUSH
40104: LD_INT 0
40106: EQUAL
40107: IFFALSE 40119
// dist := 28 else
40109: LD_ADDR_VAR 0 14
40113: PUSH
40114: LD_INT 28
40116: ST_TO_ADDR
40117: GO 40127
// dist := 36 ;
40119: LD_ADDR_VAR 0 14
40123: PUSH
40124: LD_INT 36
40126: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40127: LD_VAR 0 1
40131: PPUSH
40132: LD_VAR 0 3
40136: PPUSH
40137: LD_VAR 0 4
40141: PPUSH
40142: CALL_OW 297
40146: PUSH
40147: LD_VAR 0 14
40151: GREATER
40152: IFFALSE 40156
// exit ;
40154: GO 40681
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40156: LD_ADDR_VAR 0 12
40160: PUSH
40161: LD_VAR 0 2
40165: PPUSH
40166: LD_VAR 0 3
40170: PPUSH
40171: LD_VAR 0 4
40175: PPUSH
40176: LD_VAR 0 5
40180: PPUSH
40181: LD_VAR 0 1
40185: PPUSH
40186: CALL_OW 248
40190: PPUSH
40191: LD_INT 0
40193: PPUSH
40194: CALL 40686 0 6
40198: ST_TO_ADDR
// if not hexes then
40199: LD_VAR 0 12
40203: NOT
40204: IFFALSE 40208
// exit ;
40206: GO 40681
// hex := GetHexInfo ( x , y ) ;
40208: LD_ADDR_VAR 0 15
40212: PUSH
40213: LD_VAR 0 3
40217: PPUSH
40218: LD_VAR 0 4
40222: PPUSH
40223: CALL_OW 546
40227: ST_TO_ADDR
// if hex [ 1 ] then
40228: LD_VAR 0 15
40232: PUSH
40233: LD_INT 1
40235: ARRAY
40236: IFFALSE 40240
// exit ;
40238: GO 40681
// height := hex [ 2 ] ;
40240: LD_ADDR_VAR 0 13
40244: PUSH
40245: LD_VAR 0 15
40249: PUSH
40250: LD_INT 2
40252: ARRAY
40253: ST_TO_ADDR
// for i = 1 to hexes do
40254: LD_ADDR_VAR 0 7
40258: PUSH
40259: DOUBLE
40260: LD_INT 1
40262: DEC
40263: ST_TO_ADDR
40264: LD_VAR 0 12
40268: PUSH
40269: FOR_TO
40270: IFFALSE 40600
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40272: LD_VAR 0 12
40276: PUSH
40277: LD_VAR 0 7
40281: ARRAY
40282: PUSH
40283: LD_INT 1
40285: ARRAY
40286: PPUSH
40287: LD_VAR 0 12
40291: PUSH
40292: LD_VAR 0 7
40296: ARRAY
40297: PUSH
40298: LD_INT 2
40300: ARRAY
40301: PPUSH
40302: CALL_OW 488
40306: NOT
40307: PUSH
40308: LD_VAR 0 12
40312: PUSH
40313: LD_VAR 0 7
40317: ARRAY
40318: PUSH
40319: LD_INT 1
40321: ARRAY
40322: PPUSH
40323: LD_VAR 0 12
40327: PUSH
40328: LD_VAR 0 7
40332: ARRAY
40333: PUSH
40334: LD_INT 2
40336: ARRAY
40337: PPUSH
40338: CALL_OW 428
40342: PUSH
40343: LD_INT 0
40345: GREATER
40346: OR
40347: PUSH
40348: LD_VAR 0 12
40352: PUSH
40353: LD_VAR 0 7
40357: ARRAY
40358: PUSH
40359: LD_INT 1
40361: ARRAY
40362: PPUSH
40363: LD_VAR 0 12
40367: PUSH
40368: LD_VAR 0 7
40372: ARRAY
40373: PUSH
40374: LD_INT 2
40376: ARRAY
40377: PPUSH
40378: CALL_OW 351
40382: OR
40383: IFFALSE 40389
// exit ;
40385: POP
40386: POP
40387: GO 40681
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40389: LD_ADDR_VAR 0 8
40393: PUSH
40394: LD_VAR 0 12
40398: PUSH
40399: LD_VAR 0 7
40403: ARRAY
40404: PUSH
40405: LD_INT 1
40407: ARRAY
40408: PPUSH
40409: LD_VAR 0 12
40413: PUSH
40414: LD_VAR 0 7
40418: ARRAY
40419: PUSH
40420: LD_INT 2
40422: ARRAY
40423: PPUSH
40424: CALL_OW 546
40428: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40429: LD_VAR 0 8
40433: PUSH
40434: LD_INT 1
40436: ARRAY
40437: PUSH
40438: LD_VAR 0 8
40442: PUSH
40443: LD_INT 2
40445: ARRAY
40446: PUSH
40447: LD_VAR 0 13
40451: PUSH
40452: LD_INT 2
40454: PLUS
40455: GREATER
40456: OR
40457: PUSH
40458: LD_VAR 0 8
40462: PUSH
40463: LD_INT 2
40465: ARRAY
40466: PUSH
40467: LD_VAR 0 13
40471: PUSH
40472: LD_INT 2
40474: MINUS
40475: LESS
40476: OR
40477: PUSH
40478: LD_VAR 0 8
40482: PUSH
40483: LD_INT 3
40485: ARRAY
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: LD_INT 8
40492: PUSH
40493: LD_INT 9
40495: PUSH
40496: LD_INT 10
40498: PUSH
40499: LD_INT 11
40501: PUSH
40502: LD_INT 12
40504: PUSH
40505: LD_INT 13
40507: PUSH
40508: LD_INT 16
40510: PUSH
40511: LD_INT 17
40513: PUSH
40514: LD_INT 18
40516: PUSH
40517: LD_INT 19
40519: PUSH
40520: LD_INT 20
40522: PUSH
40523: LD_INT 21
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: IN
40541: NOT
40542: OR
40543: PUSH
40544: LD_VAR 0 8
40548: PUSH
40549: LD_INT 5
40551: ARRAY
40552: NOT
40553: OR
40554: PUSH
40555: LD_VAR 0 8
40559: PUSH
40560: LD_INT 6
40562: ARRAY
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: LD_INT 7
40572: PUSH
40573: LD_INT 9
40575: PUSH
40576: LD_INT 10
40578: PUSH
40579: LD_INT 11
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: IN
40590: NOT
40591: OR
40592: IFFALSE 40598
// exit ;
40594: POP
40595: POP
40596: GO 40681
// end ;
40598: GO 40269
40600: POP
40601: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40602: LD_VAR 0 9
40606: PPUSH
40607: LD_VAR 0 3
40611: PPUSH
40612: LD_VAR 0 4
40616: PPUSH
40617: LD_INT 20
40619: PPUSH
40620: CALL 32604 0 4
40624: PUSH
40625: LD_INT 4
40627: ARRAY
40628: IFFALSE 40632
// exit ;
40630: GO 40681
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40632: LD_VAR 0 2
40636: PUSH
40637: LD_INT 29
40639: PUSH
40640: LD_INT 30
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: IN
40647: PUSH
40648: LD_VAR 0 3
40652: PPUSH
40653: LD_VAR 0 4
40657: PPUSH
40658: LD_VAR 0 9
40662: PPUSH
40663: CALL_OW 440
40667: NOT
40668: AND
40669: IFFALSE 40673
// exit ;
40671: GO 40681
// result := true ;
40673: LD_ADDR_VAR 0 6
40677: PUSH
40678: LD_INT 1
40680: ST_TO_ADDR
// end ;
40681: LD_VAR 0 6
40685: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40686: LD_INT 0
40688: PPUSH
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
40700: PPUSH
40701: PPUSH
40702: PPUSH
40703: PPUSH
40704: PPUSH
40705: PPUSH
40706: PPUSH
40707: PPUSH
40708: PPUSH
40709: PPUSH
40710: PPUSH
40711: PPUSH
40712: PPUSH
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
40730: PPUSH
40731: PPUSH
40732: PPUSH
40733: PPUSH
40734: PPUSH
40735: PPUSH
40736: PPUSH
40737: PPUSH
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
40744: PPUSH
40745: PPUSH
// result = [ ] ;
40746: LD_ADDR_VAR 0 7
40750: PUSH
40751: EMPTY
40752: ST_TO_ADDR
// temp_list = [ ] ;
40753: LD_ADDR_VAR 0 9
40757: PUSH
40758: EMPTY
40759: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40760: LD_VAR 0 4
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: LD_INT 3
40776: PUSH
40777: LD_INT 4
40779: PUSH
40780: LD_INT 5
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: IN
40791: NOT
40792: PUSH
40793: LD_VAR 0 1
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: IN
40808: PUSH
40809: LD_VAR 0 5
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: LD_INT 3
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: IN
40828: NOT
40829: AND
40830: OR
40831: IFFALSE 40835
// exit ;
40833: GO 59226
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40835: LD_VAR 0 1
40839: PUSH
40840: LD_INT 6
40842: PUSH
40843: LD_INT 7
40845: PUSH
40846: LD_INT 8
40848: PUSH
40849: LD_INT 13
40851: PUSH
40852: LD_INT 12
40854: PUSH
40855: LD_INT 15
40857: PUSH
40858: LD_INT 11
40860: PUSH
40861: LD_INT 14
40863: PUSH
40864: LD_INT 10
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: IN
40878: IFFALSE 40888
// btype = b_lab ;
40880: LD_ADDR_VAR 0 1
40884: PUSH
40885: LD_INT 6
40887: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40888: LD_VAR 0 6
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: LIST
40906: IN
40907: NOT
40908: PUSH
40909: LD_VAR 0 1
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: LD_INT 3
40925: PUSH
40926: LD_INT 6
40928: PUSH
40929: LD_INT 36
40931: PUSH
40932: LD_INT 4
40934: PUSH
40935: LD_INT 5
40937: PUSH
40938: LD_INT 31
40940: PUSH
40941: LD_INT 32
40943: PUSH
40944: LD_INT 33
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: IN
40960: NOT
40961: PUSH
40962: LD_VAR 0 6
40966: PUSH
40967: LD_INT 1
40969: EQUAL
40970: AND
40971: OR
40972: PUSH
40973: LD_VAR 0 1
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: LD_INT 3
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: IN
40988: NOT
40989: PUSH
40990: LD_VAR 0 6
40994: PUSH
40995: LD_INT 2
40997: EQUAL
40998: AND
40999: OR
41000: IFFALSE 41010
// mode = 0 ;
41002: LD_ADDR_VAR 0 6
41006: PUSH
41007: LD_INT 0
41009: ST_TO_ADDR
// case mode of 0 :
41010: LD_VAR 0 6
41014: PUSH
41015: LD_INT 0
41017: DOUBLE
41018: EQUAL
41019: IFTRUE 41023
41021: GO 52476
41023: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41024: LD_ADDR_VAR 0 11
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: LD_INT 1
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 2
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: LD_INT 3
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 3
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41217: LD_ADDR_VAR 0 12
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: NEG
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 3
41374: NEG
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 3
41385: NEG
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41413: LD_ADDR_VAR 0 13
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 2
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: LD_INT 3
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 3
41572: NEG
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 3
41584: NEG
41585: PUSH
41586: LD_INT 3
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41612: LD_ADDR_VAR 0 14
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 2
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: LD_INT 2
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: LD_INT 3
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: LD_INT 3
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41808: LD_ADDR_VAR 0 15
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 2
41942: NEG
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 3
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 3
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42001: LD_ADDR_VAR 0 16
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 3
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 3
42158: PUSH
42159: LD_INT 3
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: LD_INT 3
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42194: LD_ADDR_VAR 0 17
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 2
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 2
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: NEG
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: LD_INT 2
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42424: LD_ADDR_VAR 0 18
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: LD_INT 2
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 2
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: NEG
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42654: LD_ADDR_VAR 0 19
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42884: LD_ADDR_VAR 0 20
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43114: LD_ADDR_VAR 0 21
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 2
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 2
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: NEG
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43344: LD_ADDR_VAR 0 22
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: NEG
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43574: LD_ADDR_VAR 0 23
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: LD_INT 2
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: LD_INT 3
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: LD_INT 3
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43854: LD_ADDR_VAR 0 24
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: LD_INT 2
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 2
44030: NEG
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 3
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44130: LD_ADDR_VAR 0 25
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 3
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 3
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: LD_INT 3
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 3
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44404: LD_ADDR_VAR 0 26
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: LD_INT 3
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 3
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44680: LD_ADDR_VAR 0 27
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 3
44913: NEG
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 3
44925: NEG
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44960: LD_ADDR_VAR 0 28
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 2
45147: NEG
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 3
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 3
45195: NEG
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 3
45207: NEG
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45242: LD_ADDR_VAR 0 29
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: LD_INT 3
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 3
45486: NEG
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45521: LD_ADDR_VAR 0 30
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 2
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: LD_INT 3
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 3
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 3
45764: NEG
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45799: LD_ADDR_VAR 0 31
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: LD_INT 3
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 3
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 3
46042: NEG
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46077: LD_ADDR_VAR 0 32
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 3
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 3
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 3
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46355: LD_ADDR_VAR 0 33
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: LD_INT 3
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 3
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 3
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 3
46599: NEG
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46634: LD_ADDR_VAR 0 34
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 3
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 3
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: LD_INT 3
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 3
46879: NEG
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46914: LD_ADDR_VAR 0 35
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47026: LD_ADDR_VAR 0 36
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47138: LD_ADDR_VAR 0 37
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47250: LD_ADDR_VAR 0 38
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47362: LD_ADDR_VAR 0 39
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47474: LD_ADDR_VAR 0 40
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47586: LD_ADDR_VAR 0 41
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: LD_INT 3
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 3
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 3
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 3
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 3
47829: PUSH
47830: LD_INT 3
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: PUSH
47840: LD_INT 3
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: NEG
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 3
47871: NEG
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 3
47895: NEG
47896: PUSH
47897: LD_INT 3
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47936: LD_ADDR_VAR 0 42
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: LD_INT 3
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 3
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 3
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 3
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 3
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 3
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 3
48233: NEG
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 3
48245: NEG
48246: PUSH
48247: LD_INT 3
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48286: LD_ADDR_VAR 0 43
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 3
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 3
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 3
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 3
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 3
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 3
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 3
48582: NEG
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 3
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48634: LD_ADDR_VAR 0 44
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: LD_INT 2
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: LD_INT 3
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 3
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 3
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 3
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 3
48877: PUSH
48878: LD_INT 3
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 3
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 3
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 3
48931: NEG
48932: PUSH
48933: LD_INT 2
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 3
48943: NEG
48944: PUSH
48945: LD_INT 3
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48984: LD_ADDR_VAR 0 45
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 2
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: LD_INT 3
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 3
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 3
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 3
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 3
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: LD_INT 3
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 3
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 3
49281: NEG
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 3
49293: NEG
49294: PUSH
49295: LD_INT 3
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49334: LD_ADDR_VAR 0 46
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 3
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: LD_INT 3
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 3
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 3
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 3
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 3
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 3
49630: NEG
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 3
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49682: LD_ADDR_VAR 0 47
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49833: LD_ADDR_VAR 0 48
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49980: LD_ADDR_VAR 0 49
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50124: LD_ADDR_VAR 0 50
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50268: LD_ADDR_VAR 0 51
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50415: LD_ADDR_VAR 0 52
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50566: LD_ADDR_VAR 0 53
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 2
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50796: LD_ADDR_VAR 0 54
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 2
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: LD_INT 2
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51026: LD_ADDR_VAR 0 55
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51256: LD_ADDR_VAR 0 56
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51486: LD_ADDR_VAR 0 57
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 2
51673: NEG
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51716: LD_ADDR_VAR 0 58
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 2
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51946: LD_ADDR_VAR 0 59
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52034: LD_ADDR_VAR 0 60
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52122: LD_ADDR_VAR 0 61
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52210: LD_ADDR_VAR 0 62
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52298: LD_ADDR_VAR 0 63
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52386: LD_ADDR_VAR 0 64
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: ST_TO_ADDR
// end ; 1 :
52474: GO 58371
52476: LD_INT 1
52478: DOUBLE
52479: EQUAL
52480: IFTRUE 52484
52482: GO 55107
52484: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52485: LD_ADDR_VAR 0 11
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52529: LD_ADDR_VAR 0 12
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 3
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 3
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52570: LD_ADDR_VAR 0 13
52574: PUSH
52575: LD_INT 3
52577: PUSH
52578: LD_INT 2
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 3
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: LD_INT 3
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: LIST
52609: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52610: LD_ADDR_VAR 0 14
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 3
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 3
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: LIST
52650: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52651: LD_ADDR_VAR 0 15
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 3
52669: NEG
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 3
52680: NEG
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: LIST
52694: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52695: LD_ADDR_VAR 0 16
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: LD_INT 3
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: NEG
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 3
52726: NEG
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52741: LD_ADDR_VAR 0 17
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: LD_INT 3
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 3
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: LIST
52784: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52785: LD_ADDR_VAR 0 18
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52826: LD_ADDR_VAR 0 19
52830: PUSH
52831: LD_INT 3
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 3
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: LIST
52865: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52866: LD_ADDR_VAR 0 20
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 3
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: LIST
52906: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52907: LD_ADDR_VAR 0 21
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: NEG
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: LIST
52950: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52951: LD_ADDR_VAR 0 22
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 3
52970: NEG
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: LD_INT 3
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52997: LD_ADDR_VAR 0 23
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 4
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: LIST
53040: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53041: LD_ADDR_VAR 0 24
53045: PUSH
53046: LD_INT 3
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 4
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53082: LD_ADDR_VAR 0 25
53086: PUSH
53087: LD_INT 3
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 4
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 3
53109: PUSH
53110: LD_INT 4
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53122: LD_ADDR_VAR 0 26
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 3
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 4
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: LIST
53162: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53163: LD_ADDR_VAR 0 27
53167: PUSH
53168: LD_INT 3
53170: NEG
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 3
53181: NEG
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 4
53192: NEG
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: LIST
53206: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53207: LD_ADDR_VAR 0 28
53211: PUSH
53212: LD_INT 3
53214: NEG
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 3
53226: NEG
53227: PUSH
53228: LD_INT 4
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 4
53238: NEG
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53253: LD_ADDR_VAR 0 29
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 3
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 3
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 4
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 4
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 5
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 5
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 4
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 6
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 6
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 5
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53408: LD_ADDR_VAR 0 30
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 4
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 4
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 4
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 5
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 5
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 5
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 6
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 6
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53551: LD_ADDR_VAR 0 31
53555: PUSH
53556: LD_INT 3
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: LD_INT 3
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 4
53588: PUSH
53589: LD_INT 3
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 4
53598: PUSH
53599: LD_INT 4
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 3
53608: PUSH
53609: LD_INT 4
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 5
53618: PUSH
53619: LD_INT 4
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 5
53628: PUSH
53629: LD_INT 5
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 4
53638: PUSH
53639: LD_INT 5
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 6
53648: PUSH
53649: LD_INT 5
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 6
53658: PUSH
53659: LD_INT 6
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 5
53668: PUSH
53669: LD_INT 6
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53690: LD_ADDR_VAR 0 32
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 3
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 3
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 4
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 4
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: LD_INT 3
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 5
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 5
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 4
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 6
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 6
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 5
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53833: LD_ADDR_VAR 0 33
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 3
53851: NEG
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 3
53862: NEG
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 3
53874: NEG
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 4
53885: NEG
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 4
53896: NEG
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 4
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 5
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 5
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 5
53942: NEG
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 6
53953: NEG
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 6
53964: NEG
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53988: LD_ADDR_VAR 0 34
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 3
54007: NEG
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: LD_INT 3
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: LD_INT 4
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 4
54043: NEG
54044: PUSH
54045: LD_INT 3
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 4
54055: NEG
54056: PUSH
54057: LD_INT 4
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 4
54067: NEG
54068: PUSH
54069: LD_INT 5
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 5
54079: NEG
54080: PUSH
54081: LD_INT 4
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 5
54091: NEG
54092: PUSH
54093: LD_INT 5
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 5
54103: NEG
54104: PUSH
54105: LD_INT 6
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 6
54115: NEG
54116: PUSH
54117: LD_INT 5
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 6
54127: NEG
54128: PUSH
54129: LD_INT 6
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54151: LD_ADDR_VAR 0 41
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 3
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: LIST
54194: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54195: LD_ADDR_VAR 0 42
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 3
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: LIST
54235: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54236: LD_ADDR_VAR 0 43
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: LIST
54275: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54276: LD_ADDR_VAR 0 44
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 3
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54317: LD_ADDR_VAR 0 45
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 3
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54361: LD_ADDR_VAR 0 46
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 3
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: NEG
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54407: LD_ADDR_VAR 0 47
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: LD_INT 3
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 3
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54440: LD_ADDR_VAR 0 48
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54471: LD_ADDR_VAR 0 49
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54500: LD_ADDR_VAR 0 50
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: LD_INT 3
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 3
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54529: LD_ADDR_VAR 0 51
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54560: LD_ADDR_VAR 0 52
54564: PUSH
54565: LD_INT 3
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54593: LD_ADDR_VAR 0 53
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: LD_INT 3
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 3
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: LIST
54636: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54637: LD_ADDR_VAR 0 54
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 3
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: LIST
54677: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54678: LD_ADDR_VAR 0 55
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 3
54695: PUSH
54696: LD_INT 3
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: LD_INT 3
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: LIST
54717: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54718: LD_ADDR_VAR 0 56
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 3
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 3
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: LIST
54758: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54759: LD_ADDR_VAR 0 57
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 3
54777: NEG
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: LIST
54802: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54803: LD_ADDR_VAR 0 58
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: LD_INT 3
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 3
54822: NEG
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 3
54834: NEG
54835: PUSH
54836: LD_INT 3
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: LIST
54848: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54849: LD_ADDR_VAR 0 59
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54893: LD_ADDR_VAR 0 60
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54934: LD_ADDR_VAR 0 61
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54974: LD_ADDR_VAR 0 62
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55015: LD_ADDR_VAR 0 63
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: LIST
55058: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55059: LD_ADDR_VAR 0 64
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: LIST
55104: ST_TO_ADDR
// end ; 2 :
55105: GO 58371
55107: LD_INT 2
55109: DOUBLE
55110: EQUAL
55111: IFTRUE 55115
55113: GO 58370
55115: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55116: LD_ADDR_VAR 0 29
55120: PUSH
55121: LD_INT 4
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 4
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 5
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 5
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 4
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 3
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 5
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: PUSH
55217: LD_INT 3
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: PUSH
55227: LD_INT 2
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 4
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 4
55246: PUSH
55247: LD_INT 4
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: LD_INT 4
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 4
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 4
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 4
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: LD_INT 4
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: LD_INT 5
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 5
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: LD_INT 4
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: LD_INT 5
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 3
55399: NEG
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: NEG
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: NEG
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 4
55455: NEG
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 4
55466: NEG
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 4
55478: NEG
55479: PUSH
55480: LD_INT 2
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 4
55501: NEG
55502: PUSH
55503: LD_INT 4
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 4
55513: NEG
55514: PUSH
55515: LD_INT 5
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 3
55525: NEG
55526: PUSH
55527: LD_INT 4
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 3
55537: NEG
55538: PUSH
55539: LD_INT 3
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 4
55549: NEG
55550: PUSH
55551: LD_INT 3
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 5
55561: NEG
55562: PUSH
55563: LD_INT 4
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 5
55573: NEG
55574: PUSH
55575: LD_INT 5
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: LD_INT 5
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 5
55597: NEG
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55654: LD_ADDR_VAR 0 30
55658: PUSH
55659: LD_INT 4
55661: PUSH
55662: LD_INT 4
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 4
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 5
55681: PUSH
55682: LD_INT 4
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 5
55691: PUSH
55692: LD_INT 5
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 4
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 3
55711: PUSH
55712: LD_INT 4
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 5
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 3
55741: PUSH
55742: LD_INT 5
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 3
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 4
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 4
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: LD_INT 4
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 4
55844: NEG
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 4
55855: NEG
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 4
55889: NEG
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 5
55900: NEG
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 5
55911: NEG
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 5
55923: NEG
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: LD_INT 3
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: NEG
55959: PUSH
55960: LD_INT 4
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: NEG
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 4
56006: NEG
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 4
56018: NEG
56019: PUSH
56020: LD_INT 4
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 4
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 4
56042: NEG
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 4
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 5
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 4
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 4
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 5
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: LD_INT 3
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: LD_INT 5
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56201: LD_ADDR_VAR 0 31
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 4
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 3
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 4
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 5
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 5
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: LD_INT 4
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: LD_INT 3
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: LD_INT 5
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: LD_INT 3
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 3
56301: NEG
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 3
56346: NEG
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 4
56357: NEG
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 4
56368: NEG
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 4
56380: NEG
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 4
56403: NEG
56404: PUSH
56405: LD_INT 4
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 4
56415: NEG
56416: PUSH
56417: LD_INT 5
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 3
56427: NEG
56428: PUSH
56429: LD_INT 4
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 3
56439: NEG
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 4
56451: NEG
56452: PUSH
56453: LD_INT 3
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 5
56463: NEG
56464: PUSH
56465: LD_INT 4
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 5
56475: NEG
56476: PUSH
56477: LD_INT 5
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 3
56487: NEG
56488: PUSH
56489: LD_INT 5
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 5
56499: NEG
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 3
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 4
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 3
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 4
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: LD_INT 4
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 4
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 4
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 5
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 5
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 4
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 3
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 5
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56751: LD_ADDR_VAR 0 32
56755: PUSH
56756: LD_INT 4
56758: NEG
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 4
56769: NEG
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 3
56781: NEG
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 3
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 4
56803: NEG
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 5
56814: NEG
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 5
56825: NEG
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 5
56837: NEG
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 3
56849: NEG
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 3
56872: NEG
56873: PUSH
56874: LD_INT 4
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: LD_INT 3
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 4
56920: NEG
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 4
56932: NEG
56933: PUSH
56934: LD_INT 4
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 4
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 4
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 4
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 5
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 4
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 3
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: LD_INT 4
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 5
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 3
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: LD_INT 5
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 4
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 4
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 3
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 4
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 4
57163: PUSH
57164: LD_INT 4
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 4
57173: PUSH
57174: LD_INT 3
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 5
57183: PUSH
57184: LD_INT 4
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 5
57193: PUSH
57194: LD_INT 5
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 4
57203: PUSH
57204: LD_INT 5
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: PUSH
57214: LD_INT 4
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: LD_INT 3
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 5
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: LD_INT 5
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57298: LD_ADDR_VAR 0 33
57302: PUSH
57303: LD_INT 4
57305: NEG
57306: PUSH
57307: LD_INT 4
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 4
57317: NEG
57318: PUSH
57319: LD_INT 5
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: LD_INT 4
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 3
57341: NEG
57342: PUSH
57343: LD_INT 3
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 4
57353: NEG
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 5
57365: NEG
57366: PUSH
57367: LD_INT 4
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 5
57377: NEG
57378: PUSH
57379: LD_INT 5
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 3
57389: NEG
57390: PUSH
57391: LD_INT 5
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 5
57401: NEG
57402: PUSH
57403: LD_INT 3
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 3
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 4
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 3
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 4
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 4
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 4
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 4
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 5
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 5
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 4
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 3
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 5
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 3
57608: PUSH
57609: LD_INT 3
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 3
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 4
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 4
57638: PUSH
57639: LD_INT 4
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 3
57648: PUSH
57649: LD_INT 4
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 4
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: LD_INT 4
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 4
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 3
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 4
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 5
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 5
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 4
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 5
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: LD_INT 3
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57836: LD_ADDR_VAR 0 34
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: LD_INT 4
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 5
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: LD_INT 4
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 3
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: LD_INT 4
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: LD_INT 5
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 3
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: LD_INT 5
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 4
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 4
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 3
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 4
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 4
58038: PUSH
58039: LD_INT 4
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 4
58048: PUSH
58049: LD_INT 3
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 5
58058: PUSH
58059: LD_INT 4
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 5
58068: PUSH
58069: LD_INT 5
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 4
58078: PUSH
58079: LD_INT 5
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: PUSH
58089: LD_INT 4
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: PUSH
58099: LD_INT 3
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 5
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: LD_INT 5
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: LD_INT 4
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: LD_INT 4
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 3
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: LD_INT 4
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 4
58221: NEG
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 4
58232: NEG
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 4
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 5
58277: NEG
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 5
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 5
58300: NEG
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 3
58312: NEG
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: ST_TO_ADDR
// end ; end ;
58368: GO 58371
58370: POP
// case btype of b_depot , b_warehouse :
58371: LD_VAR 0 1
58375: PUSH
58376: LD_INT 0
58378: DOUBLE
58379: EQUAL
58380: IFTRUE 58390
58382: LD_INT 1
58384: DOUBLE
58385: EQUAL
58386: IFTRUE 58390
58388: GO 58591
58390: POP
// case nation of nation_american :
58391: LD_VAR 0 5
58395: PUSH
58396: LD_INT 1
58398: DOUBLE
58399: EQUAL
58400: IFTRUE 58404
58402: GO 58460
58404: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58405: LD_ADDR_VAR 0 9
58409: PUSH
58410: LD_VAR 0 11
58414: PUSH
58415: LD_VAR 0 12
58419: PUSH
58420: LD_VAR 0 13
58424: PUSH
58425: LD_VAR 0 14
58429: PUSH
58430: LD_VAR 0 15
58434: PUSH
58435: LD_VAR 0 16
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: PUSH
58448: LD_VAR 0 4
58452: PUSH
58453: LD_INT 1
58455: PLUS
58456: ARRAY
58457: ST_TO_ADDR
58458: GO 58589
58460: LD_INT 2
58462: DOUBLE
58463: EQUAL
58464: IFTRUE 58468
58466: GO 58524
58468: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58469: LD_ADDR_VAR 0 9
58473: PUSH
58474: LD_VAR 0 17
58478: PUSH
58479: LD_VAR 0 18
58483: PUSH
58484: LD_VAR 0 19
58488: PUSH
58489: LD_VAR 0 20
58493: PUSH
58494: LD_VAR 0 21
58498: PUSH
58499: LD_VAR 0 22
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: PUSH
58512: LD_VAR 0 4
58516: PUSH
58517: LD_INT 1
58519: PLUS
58520: ARRAY
58521: ST_TO_ADDR
58522: GO 58589
58524: LD_INT 3
58526: DOUBLE
58527: EQUAL
58528: IFTRUE 58532
58530: GO 58588
58532: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58533: LD_ADDR_VAR 0 9
58537: PUSH
58538: LD_VAR 0 23
58542: PUSH
58543: LD_VAR 0 24
58547: PUSH
58548: LD_VAR 0 25
58552: PUSH
58553: LD_VAR 0 26
58557: PUSH
58558: LD_VAR 0 27
58562: PUSH
58563: LD_VAR 0 28
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: PUSH
58576: LD_VAR 0 4
58580: PUSH
58581: LD_INT 1
58583: PLUS
58584: ARRAY
58585: ST_TO_ADDR
58586: GO 58589
58588: POP
58589: GO 59144
58591: LD_INT 2
58593: DOUBLE
58594: EQUAL
58595: IFTRUE 58605
58597: LD_INT 3
58599: DOUBLE
58600: EQUAL
58601: IFTRUE 58605
58603: GO 58661
58605: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58606: LD_ADDR_VAR 0 9
58610: PUSH
58611: LD_VAR 0 29
58615: PUSH
58616: LD_VAR 0 30
58620: PUSH
58621: LD_VAR 0 31
58625: PUSH
58626: LD_VAR 0 32
58630: PUSH
58631: LD_VAR 0 33
58635: PUSH
58636: LD_VAR 0 34
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: PUSH
58649: LD_VAR 0 4
58653: PUSH
58654: LD_INT 1
58656: PLUS
58657: ARRAY
58658: ST_TO_ADDR
58659: GO 59144
58661: LD_INT 16
58663: DOUBLE
58664: EQUAL
58665: IFTRUE 58723
58667: LD_INT 17
58669: DOUBLE
58670: EQUAL
58671: IFTRUE 58723
58673: LD_INT 18
58675: DOUBLE
58676: EQUAL
58677: IFTRUE 58723
58679: LD_INT 19
58681: DOUBLE
58682: EQUAL
58683: IFTRUE 58723
58685: LD_INT 22
58687: DOUBLE
58688: EQUAL
58689: IFTRUE 58723
58691: LD_INT 20
58693: DOUBLE
58694: EQUAL
58695: IFTRUE 58723
58697: LD_INT 21
58699: DOUBLE
58700: EQUAL
58701: IFTRUE 58723
58703: LD_INT 23
58705: DOUBLE
58706: EQUAL
58707: IFTRUE 58723
58709: LD_INT 24
58711: DOUBLE
58712: EQUAL
58713: IFTRUE 58723
58715: LD_INT 25
58717: DOUBLE
58718: EQUAL
58719: IFTRUE 58723
58721: GO 58779
58723: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58724: LD_ADDR_VAR 0 9
58728: PUSH
58729: LD_VAR 0 35
58733: PUSH
58734: LD_VAR 0 36
58738: PUSH
58739: LD_VAR 0 37
58743: PUSH
58744: LD_VAR 0 38
58748: PUSH
58749: LD_VAR 0 39
58753: PUSH
58754: LD_VAR 0 40
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: PUSH
58767: LD_VAR 0 4
58771: PUSH
58772: LD_INT 1
58774: PLUS
58775: ARRAY
58776: ST_TO_ADDR
58777: GO 59144
58779: LD_INT 6
58781: DOUBLE
58782: EQUAL
58783: IFTRUE 58835
58785: LD_INT 7
58787: DOUBLE
58788: EQUAL
58789: IFTRUE 58835
58791: LD_INT 8
58793: DOUBLE
58794: EQUAL
58795: IFTRUE 58835
58797: LD_INT 13
58799: DOUBLE
58800: EQUAL
58801: IFTRUE 58835
58803: LD_INT 12
58805: DOUBLE
58806: EQUAL
58807: IFTRUE 58835
58809: LD_INT 15
58811: DOUBLE
58812: EQUAL
58813: IFTRUE 58835
58815: LD_INT 11
58817: DOUBLE
58818: EQUAL
58819: IFTRUE 58835
58821: LD_INT 14
58823: DOUBLE
58824: EQUAL
58825: IFTRUE 58835
58827: LD_INT 10
58829: DOUBLE
58830: EQUAL
58831: IFTRUE 58835
58833: GO 58891
58835: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58836: LD_ADDR_VAR 0 9
58840: PUSH
58841: LD_VAR 0 41
58845: PUSH
58846: LD_VAR 0 42
58850: PUSH
58851: LD_VAR 0 43
58855: PUSH
58856: LD_VAR 0 44
58860: PUSH
58861: LD_VAR 0 45
58865: PUSH
58866: LD_VAR 0 46
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: PUSH
58879: LD_VAR 0 4
58883: PUSH
58884: LD_INT 1
58886: PLUS
58887: ARRAY
58888: ST_TO_ADDR
58889: GO 59144
58891: LD_INT 36
58893: DOUBLE
58894: EQUAL
58895: IFTRUE 58899
58897: GO 58955
58899: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58900: LD_ADDR_VAR 0 9
58904: PUSH
58905: LD_VAR 0 47
58909: PUSH
58910: LD_VAR 0 48
58914: PUSH
58915: LD_VAR 0 49
58919: PUSH
58920: LD_VAR 0 50
58924: PUSH
58925: LD_VAR 0 51
58929: PUSH
58930: LD_VAR 0 52
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: PUSH
58943: LD_VAR 0 4
58947: PUSH
58948: LD_INT 1
58950: PLUS
58951: ARRAY
58952: ST_TO_ADDR
58953: GO 59144
58955: LD_INT 4
58957: DOUBLE
58958: EQUAL
58959: IFTRUE 58981
58961: LD_INT 5
58963: DOUBLE
58964: EQUAL
58965: IFTRUE 58981
58967: LD_INT 34
58969: DOUBLE
58970: EQUAL
58971: IFTRUE 58981
58973: LD_INT 37
58975: DOUBLE
58976: EQUAL
58977: IFTRUE 58981
58979: GO 59037
58981: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58982: LD_ADDR_VAR 0 9
58986: PUSH
58987: LD_VAR 0 53
58991: PUSH
58992: LD_VAR 0 54
58996: PUSH
58997: LD_VAR 0 55
59001: PUSH
59002: LD_VAR 0 56
59006: PUSH
59007: LD_VAR 0 57
59011: PUSH
59012: LD_VAR 0 58
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: PUSH
59025: LD_VAR 0 4
59029: PUSH
59030: LD_INT 1
59032: PLUS
59033: ARRAY
59034: ST_TO_ADDR
59035: GO 59144
59037: LD_INT 31
59039: DOUBLE
59040: EQUAL
59041: IFTRUE 59087
59043: LD_INT 32
59045: DOUBLE
59046: EQUAL
59047: IFTRUE 59087
59049: LD_INT 33
59051: DOUBLE
59052: EQUAL
59053: IFTRUE 59087
59055: LD_INT 27
59057: DOUBLE
59058: EQUAL
59059: IFTRUE 59087
59061: LD_INT 26
59063: DOUBLE
59064: EQUAL
59065: IFTRUE 59087
59067: LD_INT 28
59069: DOUBLE
59070: EQUAL
59071: IFTRUE 59087
59073: LD_INT 29
59075: DOUBLE
59076: EQUAL
59077: IFTRUE 59087
59079: LD_INT 30
59081: DOUBLE
59082: EQUAL
59083: IFTRUE 59087
59085: GO 59143
59087: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59088: LD_ADDR_VAR 0 9
59092: PUSH
59093: LD_VAR 0 59
59097: PUSH
59098: LD_VAR 0 60
59102: PUSH
59103: LD_VAR 0 61
59107: PUSH
59108: LD_VAR 0 62
59112: PUSH
59113: LD_VAR 0 63
59117: PUSH
59118: LD_VAR 0 64
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: PUSH
59131: LD_VAR 0 4
59135: PUSH
59136: LD_INT 1
59138: PLUS
59139: ARRAY
59140: ST_TO_ADDR
59141: GO 59144
59143: POP
// temp_list2 = [ ] ;
59144: LD_ADDR_VAR 0 10
59148: PUSH
59149: EMPTY
59150: ST_TO_ADDR
// for i in temp_list do
59151: LD_ADDR_VAR 0 8
59155: PUSH
59156: LD_VAR 0 9
59160: PUSH
59161: FOR_IN
59162: IFFALSE 59214
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59164: LD_ADDR_VAR 0 10
59168: PUSH
59169: LD_VAR 0 10
59173: PUSH
59174: LD_VAR 0 8
59178: PUSH
59179: LD_INT 1
59181: ARRAY
59182: PUSH
59183: LD_VAR 0 2
59187: PLUS
59188: PUSH
59189: LD_VAR 0 8
59193: PUSH
59194: LD_INT 2
59196: ARRAY
59197: PUSH
59198: LD_VAR 0 3
59202: PLUS
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: ADD
59211: ST_TO_ADDR
59212: GO 59161
59214: POP
59215: POP
// result = temp_list2 ;
59216: LD_ADDR_VAR 0 7
59220: PUSH
59221: LD_VAR 0 10
59225: ST_TO_ADDR
// end ;
59226: LD_VAR 0 7
59230: RET
// export function EnemyInRange ( unit , dist ) ; begin
59231: LD_INT 0
59233: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59234: LD_ADDR_VAR 0 3
59238: PUSH
59239: LD_VAR 0 1
59243: PPUSH
59244: CALL_OW 255
59248: PPUSH
59249: LD_VAR 0 1
59253: PPUSH
59254: CALL_OW 250
59258: PPUSH
59259: LD_VAR 0 1
59263: PPUSH
59264: CALL_OW 251
59268: PPUSH
59269: LD_VAR 0 2
59273: PPUSH
59274: CALL 32604 0 4
59278: PUSH
59279: LD_INT 4
59281: ARRAY
59282: ST_TO_ADDR
// end ;
59283: LD_VAR 0 3
59287: RET
// export function PlayerSeeMe ( unit ) ; begin
59288: LD_INT 0
59290: PPUSH
// result := See ( your_side , unit ) ;
59291: LD_ADDR_VAR 0 2
59295: PUSH
59296: LD_OWVAR 2
59300: PPUSH
59301: LD_VAR 0 1
59305: PPUSH
59306: CALL_OW 292
59310: ST_TO_ADDR
// end ;
59311: LD_VAR 0 2
59315: RET
// export function ReverseDir ( unit ) ; begin
59316: LD_INT 0
59318: PPUSH
// if not unit then
59319: LD_VAR 0 1
59323: NOT
59324: IFFALSE 59328
// exit ;
59326: GO 59351
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59328: LD_ADDR_VAR 0 2
59332: PUSH
59333: LD_VAR 0 1
59337: PPUSH
59338: CALL_OW 254
59342: PUSH
59343: LD_INT 3
59345: PLUS
59346: PUSH
59347: LD_INT 6
59349: MOD
59350: ST_TO_ADDR
// end ;
59351: LD_VAR 0 2
59355: RET
// export function ReverseArray ( array ) ; var i ; begin
59356: LD_INT 0
59358: PPUSH
59359: PPUSH
// if not array then
59360: LD_VAR 0 1
59364: NOT
59365: IFFALSE 59369
// exit ;
59367: GO 59424
// result := [ ] ;
59369: LD_ADDR_VAR 0 2
59373: PUSH
59374: EMPTY
59375: ST_TO_ADDR
// for i := array downto 1 do
59376: LD_ADDR_VAR 0 3
59380: PUSH
59381: DOUBLE
59382: LD_VAR 0 1
59386: INC
59387: ST_TO_ADDR
59388: LD_INT 1
59390: PUSH
59391: FOR_DOWNTO
59392: IFFALSE 59422
// result := Join ( result , array [ i ] ) ;
59394: LD_ADDR_VAR 0 2
59398: PUSH
59399: LD_VAR 0 2
59403: PPUSH
59404: LD_VAR 0 1
59408: PUSH
59409: LD_VAR 0 3
59413: ARRAY
59414: PPUSH
59415: CALL 64089 0 2
59419: ST_TO_ADDR
59420: GO 59391
59422: POP
59423: POP
// end ;
59424: LD_VAR 0 2
59428: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59429: LD_INT 0
59431: PPUSH
59432: PPUSH
59433: PPUSH
59434: PPUSH
59435: PPUSH
59436: PPUSH
// if not unit or not hexes then
59437: LD_VAR 0 1
59441: NOT
59442: PUSH
59443: LD_VAR 0 2
59447: NOT
59448: OR
59449: IFFALSE 59453
// exit ;
59451: GO 59576
// dist := 9999 ;
59453: LD_ADDR_VAR 0 5
59457: PUSH
59458: LD_INT 9999
59460: ST_TO_ADDR
// for i = 1 to hexes do
59461: LD_ADDR_VAR 0 4
59465: PUSH
59466: DOUBLE
59467: LD_INT 1
59469: DEC
59470: ST_TO_ADDR
59471: LD_VAR 0 2
59475: PUSH
59476: FOR_TO
59477: IFFALSE 59564
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59479: LD_ADDR_VAR 0 6
59483: PUSH
59484: LD_VAR 0 1
59488: PPUSH
59489: LD_VAR 0 2
59493: PUSH
59494: LD_VAR 0 4
59498: ARRAY
59499: PUSH
59500: LD_INT 1
59502: ARRAY
59503: PPUSH
59504: LD_VAR 0 2
59508: PUSH
59509: LD_VAR 0 4
59513: ARRAY
59514: PUSH
59515: LD_INT 2
59517: ARRAY
59518: PPUSH
59519: CALL_OW 297
59523: ST_TO_ADDR
// if tdist < dist then
59524: LD_VAR 0 6
59528: PUSH
59529: LD_VAR 0 5
59533: LESS
59534: IFFALSE 59562
// begin hex := hexes [ i ] ;
59536: LD_ADDR_VAR 0 8
59540: PUSH
59541: LD_VAR 0 2
59545: PUSH
59546: LD_VAR 0 4
59550: ARRAY
59551: ST_TO_ADDR
// dist := tdist ;
59552: LD_ADDR_VAR 0 5
59556: PUSH
59557: LD_VAR 0 6
59561: ST_TO_ADDR
// end ; end ;
59562: GO 59476
59564: POP
59565: POP
// result := hex ;
59566: LD_ADDR_VAR 0 3
59570: PUSH
59571: LD_VAR 0 8
59575: ST_TO_ADDR
// end ;
59576: LD_VAR 0 3
59580: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59581: LD_INT 0
59583: PPUSH
59584: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59585: LD_VAR 0 1
59589: NOT
59590: PUSH
59591: LD_VAR 0 1
59595: PUSH
59596: LD_INT 21
59598: PUSH
59599: LD_INT 2
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 23
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PPUSH
59620: CALL_OW 69
59624: IN
59625: NOT
59626: OR
59627: IFFALSE 59631
// exit ;
59629: GO 59678
// for i = 1 to 3 do
59631: LD_ADDR_VAR 0 3
59635: PUSH
59636: DOUBLE
59637: LD_INT 1
59639: DEC
59640: ST_TO_ADDR
59641: LD_INT 3
59643: PUSH
59644: FOR_TO
59645: IFFALSE 59676
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59647: LD_VAR 0 1
59651: PPUSH
59652: CALL_OW 250
59656: PPUSH
59657: LD_VAR 0 1
59661: PPUSH
59662: CALL_OW 251
59666: PPUSH
59667: LD_INT 1
59669: PPUSH
59670: CALL_OW 453
59674: GO 59644
59676: POP
59677: POP
// end ;
59678: LD_VAR 0 2
59682: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59683: LD_INT 0
59685: PPUSH
59686: PPUSH
59687: PPUSH
59688: PPUSH
59689: PPUSH
59690: PPUSH
// if not unit or not enemy_unit then
59691: LD_VAR 0 1
59695: NOT
59696: PUSH
59697: LD_VAR 0 2
59701: NOT
59702: OR
59703: IFFALSE 59707
// exit ;
59705: GO 60174
// if GetLives ( i ) < 250 then
59707: LD_VAR 0 4
59711: PPUSH
59712: CALL_OW 256
59716: PUSH
59717: LD_INT 250
59719: LESS
59720: IFFALSE 59733
// begin ComAutodestruct ( i ) ;
59722: LD_VAR 0 4
59726: PPUSH
59727: CALL 59581 0 1
// exit ;
59731: GO 60174
// end ; x := GetX ( enemy_unit ) ;
59733: LD_ADDR_VAR 0 7
59737: PUSH
59738: LD_VAR 0 2
59742: PPUSH
59743: CALL_OW 250
59747: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59748: LD_ADDR_VAR 0 8
59752: PUSH
59753: LD_VAR 0 2
59757: PPUSH
59758: CALL_OW 251
59762: ST_TO_ADDR
// if not x or not y then
59763: LD_VAR 0 7
59767: NOT
59768: PUSH
59769: LD_VAR 0 8
59773: NOT
59774: OR
59775: IFFALSE 59779
// exit ;
59777: GO 60174
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59779: LD_ADDR_VAR 0 6
59783: PUSH
59784: LD_VAR 0 7
59788: PPUSH
59789: LD_INT 0
59791: PPUSH
59792: LD_INT 4
59794: PPUSH
59795: CALL_OW 272
59799: PUSH
59800: LD_VAR 0 8
59804: PPUSH
59805: LD_INT 0
59807: PPUSH
59808: LD_INT 4
59810: PPUSH
59811: CALL_OW 273
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_VAR 0 7
59824: PPUSH
59825: LD_INT 1
59827: PPUSH
59828: LD_INT 4
59830: PPUSH
59831: CALL_OW 272
59835: PUSH
59836: LD_VAR 0 8
59840: PPUSH
59841: LD_INT 1
59843: PPUSH
59844: LD_INT 4
59846: PPUSH
59847: CALL_OW 273
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_VAR 0 7
59860: PPUSH
59861: LD_INT 2
59863: PPUSH
59864: LD_INT 4
59866: PPUSH
59867: CALL_OW 272
59871: PUSH
59872: LD_VAR 0 8
59876: PPUSH
59877: LD_INT 2
59879: PPUSH
59880: LD_INT 4
59882: PPUSH
59883: CALL_OW 273
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_VAR 0 7
59896: PPUSH
59897: LD_INT 3
59899: PPUSH
59900: LD_INT 4
59902: PPUSH
59903: CALL_OW 272
59907: PUSH
59908: LD_VAR 0 8
59912: PPUSH
59913: LD_INT 3
59915: PPUSH
59916: LD_INT 4
59918: PPUSH
59919: CALL_OW 273
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_VAR 0 7
59932: PPUSH
59933: LD_INT 4
59935: PPUSH
59936: LD_INT 4
59938: PPUSH
59939: CALL_OW 272
59943: PUSH
59944: LD_VAR 0 8
59948: PPUSH
59949: LD_INT 4
59951: PPUSH
59952: LD_INT 4
59954: PPUSH
59955: CALL_OW 273
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_VAR 0 7
59968: PPUSH
59969: LD_INT 5
59971: PPUSH
59972: LD_INT 4
59974: PPUSH
59975: CALL_OW 272
59979: PUSH
59980: LD_VAR 0 8
59984: PPUSH
59985: LD_INT 5
59987: PPUSH
59988: LD_INT 4
59990: PPUSH
59991: CALL_OW 273
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: ST_TO_ADDR
// for i = tmp downto 1 do
60008: LD_ADDR_VAR 0 4
60012: PUSH
60013: DOUBLE
60014: LD_VAR 0 6
60018: INC
60019: ST_TO_ADDR
60020: LD_INT 1
60022: PUSH
60023: FOR_DOWNTO
60024: IFFALSE 60125
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60026: LD_VAR 0 6
60030: PUSH
60031: LD_VAR 0 4
60035: ARRAY
60036: PUSH
60037: LD_INT 1
60039: ARRAY
60040: PPUSH
60041: LD_VAR 0 6
60045: PUSH
60046: LD_VAR 0 4
60050: ARRAY
60051: PUSH
60052: LD_INT 2
60054: ARRAY
60055: PPUSH
60056: CALL_OW 488
60060: NOT
60061: PUSH
60062: LD_VAR 0 6
60066: PUSH
60067: LD_VAR 0 4
60071: ARRAY
60072: PUSH
60073: LD_INT 1
60075: ARRAY
60076: PPUSH
60077: LD_VAR 0 6
60081: PUSH
60082: LD_VAR 0 4
60086: ARRAY
60087: PUSH
60088: LD_INT 2
60090: ARRAY
60091: PPUSH
60092: CALL_OW 428
60096: PUSH
60097: LD_INT 0
60099: NONEQUAL
60100: OR
60101: IFFALSE 60123
// tmp := Delete ( tmp , i ) ;
60103: LD_ADDR_VAR 0 6
60107: PUSH
60108: LD_VAR 0 6
60112: PPUSH
60113: LD_VAR 0 4
60117: PPUSH
60118: CALL_OW 3
60122: ST_TO_ADDR
60123: GO 60023
60125: POP
60126: POP
// j := GetClosestHex ( unit , tmp ) ;
60127: LD_ADDR_VAR 0 5
60131: PUSH
60132: LD_VAR 0 1
60136: PPUSH
60137: LD_VAR 0 6
60141: PPUSH
60142: CALL 59429 0 2
60146: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60147: LD_VAR 0 1
60151: PPUSH
60152: LD_VAR 0 5
60156: PUSH
60157: LD_INT 1
60159: ARRAY
60160: PPUSH
60161: LD_VAR 0 5
60165: PUSH
60166: LD_INT 2
60168: ARRAY
60169: PPUSH
60170: CALL_OW 111
// end ;
60174: LD_VAR 0 3
60178: RET
// export function PrepareApemanSoldier ( ) ; begin
60179: LD_INT 0
60181: PPUSH
// uc_nation := 0 ;
60182: LD_ADDR_OWVAR 21
60186: PUSH
60187: LD_INT 0
60189: ST_TO_ADDR
// hc_sex := sex_male ;
60190: LD_ADDR_OWVAR 27
60194: PUSH
60195: LD_INT 1
60197: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60198: LD_ADDR_OWVAR 28
60202: PUSH
60203: LD_INT 15
60205: ST_TO_ADDR
// hc_gallery :=  ;
60206: LD_ADDR_OWVAR 33
60210: PUSH
60211: LD_STRING 
60213: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60214: LD_ADDR_OWVAR 31
60218: PUSH
60219: LD_INT 0
60221: PPUSH
60222: LD_INT 3
60224: PPUSH
60225: CALL_OW 12
60229: PUSH
60230: LD_INT 0
60232: PPUSH
60233: LD_INT 3
60235: PPUSH
60236: CALL_OW 12
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: ST_TO_ADDR
// end ;
60253: LD_VAR 0 1
60257: RET
// export function PrepareApemanEngineer ( ) ; begin
60258: LD_INT 0
60260: PPUSH
// uc_nation := 0 ;
60261: LD_ADDR_OWVAR 21
60265: PUSH
60266: LD_INT 0
60268: ST_TO_ADDR
// hc_sex := sex_male ;
60269: LD_ADDR_OWVAR 27
60273: PUSH
60274: LD_INT 1
60276: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60277: LD_ADDR_OWVAR 28
60281: PUSH
60282: LD_INT 16
60284: ST_TO_ADDR
// hc_gallery :=  ;
60285: LD_ADDR_OWVAR 33
60289: PUSH
60290: LD_STRING 
60292: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60293: LD_ADDR_OWVAR 31
60297: PUSH
60298: LD_INT 0
60300: PPUSH
60301: LD_INT 3
60303: PPUSH
60304: CALL_OW 12
60308: PUSH
60309: LD_INT 0
60311: PPUSH
60312: LD_INT 3
60314: PPUSH
60315: CALL_OW 12
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: ST_TO_ADDR
// end ;
60332: LD_VAR 0 1
60336: RET
// export function PrepareApeman ( agressivity ) ; begin
60337: LD_INT 0
60339: PPUSH
// uc_side := 0 ;
60340: LD_ADDR_OWVAR 20
60344: PUSH
60345: LD_INT 0
60347: ST_TO_ADDR
// uc_nation := 0 ;
60348: LD_ADDR_OWVAR 21
60352: PUSH
60353: LD_INT 0
60355: ST_TO_ADDR
// hc_sex := sex_male ;
60356: LD_ADDR_OWVAR 27
60360: PUSH
60361: LD_INT 1
60363: ST_TO_ADDR
// hc_class := class_apeman ;
60364: LD_ADDR_OWVAR 28
60368: PUSH
60369: LD_INT 12
60371: ST_TO_ADDR
// hc_gallery :=  ;
60372: LD_ADDR_OWVAR 33
60376: PUSH
60377: LD_STRING 
60379: ST_TO_ADDR
// if agressivity = 0 then
60380: LD_VAR 0 1
60384: PUSH
60385: LD_INT 0
60387: EQUAL
60388: IFFALSE 60400
// hc_agressivity := 0 else
60390: LD_ADDR_OWVAR 35
60394: PUSH
60395: LD_INT 0
60397: ST_TO_ADDR
60398: GO 60421
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60400: LD_ADDR_OWVAR 35
60404: PUSH
60405: LD_VAR 0 1
60409: NEG
60410: PPUSH
60411: LD_VAR 0 1
60415: PPUSH
60416: CALL_OW 12
60420: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60421: LD_ADDR_OWVAR 31
60425: PUSH
60426: LD_INT 0
60428: PPUSH
60429: LD_INT 3
60431: PPUSH
60432: CALL_OW 12
60436: PUSH
60437: LD_INT 0
60439: PPUSH
60440: LD_INT 3
60442: PPUSH
60443: CALL_OW 12
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: ST_TO_ADDR
// end ;
60460: LD_VAR 0 2
60464: RET
// export function PrepareTiger ( agressivity ) ; begin
60465: LD_INT 0
60467: PPUSH
// uc_side := 0 ;
60468: LD_ADDR_OWVAR 20
60472: PUSH
60473: LD_INT 0
60475: ST_TO_ADDR
// uc_nation := 0 ;
60476: LD_ADDR_OWVAR 21
60480: PUSH
60481: LD_INT 0
60483: ST_TO_ADDR
// hc_class := class_tiger ;
60484: LD_ADDR_OWVAR 28
60488: PUSH
60489: LD_INT 14
60491: ST_TO_ADDR
// hc_gallery :=  ;
60492: LD_ADDR_OWVAR 33
60496: PUSH
60497: LD_STRING 
60499: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60500: LD_ADDR_OWVAR 35
60504: PUSH
60505: LD_VAR 0 1
60509: NEG
60510: PPUSH
60511: LD_VAR 0 1
60515: PPUSH
60516: CALL_OW 12
60520: ST_TO_ADDR
// end ;
60521: LD_VAR 0 2
60525: RET
// export function PrepareEnchidna ( ) ; begin
60526: LD_INT 0
60528: PPUSH
// uc_side := 0 ;
60529: LD_ADDR_OWVAR 20
60533: PUSH
60534: LD_INT 0
60536: ST_TO_ADDR
// uc_nation := 0 ;
60537: LD_ADDR_OWVAR 21
60541: PUSH
60542: LD_INT 0
60544: ST_TO_ADDR
// hc_class := class_baggie ;
60545: LD_ADDR_OWVAR 28
60549: PUSH
60550: LD_INT 13
60552: ST_TO_ADDR
// hc_gallery :=  ;
60553: LD_ADDR_OWVAR 33
60557: PUSH
60558: LD_STRING 
60560: ST_TO_ADDR
// end ;
60561: LD_VAR 0 1
60565: RET
// export function PrepareFrog ( ) ; begin
60566: LD_INT 0
60568: PPUSH
// uc_side := 0 ;
60569: LD_ADDR_OWVAR 20
60573: PUSH
60574: LD_INT 0
60576: ST_TO_ADDR
// uc_nation := 0 ;
60577: LD_ADDR_OWVAR 21
60581: PUSH
60582: LD_INT 0
60584: ST_TO_ADDR
// hc_class := class_frog ;
60585: LD_ADDR_OWVAR 28
60589: PUSH
60590: LD_INT 19
60592: ST_TO_ADDR
// hc_gallery :=  ;
60593: LD_ADDR_OWVAR 33
60597: PUSH
60598: LD_STRING 
60600: ST_TO_ADDR
// end ;
60601: LD_VAR 0 1
60605: RET
// export function PrepareFish ( ) ; begin
60606: LD_INT 0
60608: PPUSH
// uc_side := 0 ;
60609: LD_ADDR_OWVAR 20
60613: PUSH
60614: LD_INT 0
60616: ST_TO_ADDR
// uc_nation := 0 ;
60617: LD_ADDR_OWVAR 21
60621: PUSH
60622: LD_INT 0
60624: ST_TO_ADDR
// hc_class := class_fish ;
60625: LD_ADDR_OWVAR 28
60629: PUSH
60630: LD_INT 20
60632: ST_TO_ADDR
// hc_gallery :=  ;
60633: LD_ADDR_OWVAR 33
60637: PUSH
60638: LD_STRING 
60640: ST_TO_ADDR
// end ;
60641: LD_VAR 0 1
60645: RET
// export function PrepareBird ( ) ; begin
60646: LD_INT 0
60648: PPUSH
// uc_side := 0 ;
60649: LD_ADDR_OWVAR 20
60653: PUSH
60654: LD_INT 0
60656: ST_TO_ADDR
// uc_nation := 0 ;
60657: LD_ADDR_OWVAR 21
60661: PUSH
60662: LD_INT 0
60664: ST_TO_ADDR
// hc_class := class_phororhacos ;
60665: LD_ADDR_OWVAR 28
60669: PUSH
60670: LD_INT 18
60672: ST_TO_ADDR
// hc_gallery :=  ;
60673: LD_ADDR_OWVAR 33
60677: PUSH
60678: LD_STRING 
60680: ST_TO_ADDR
// end ;
60681: LD_VAR 0 1
60685: RET
// export function PrepareHorse ( ) ; begin
60686: LD_INT 0
60688: PPUSH
// uc_side := 0 ;
60689: LD_ADDR_OWVAR 20
60693: PUSH
60694: LD_INT 0
60696: ST_TO_ADDR
// uc_nation := 0 ;
60697: LD_ADDR_OWVAR 21
60701: PUSH
60702: LD_INT 0
60704: ST_TO_ADDR
// hc_class := class_horse ;
60705: LD_ADDR_OWVAR 28
60709: PUSH
60710: LD_INT 21
60712: ST_TO_ADDR
// hc_gallery :=  ;
60713: LD_ADDR_OWVAR 33
60717: PUSH
60718: LD_STRING 
60720: ST_TO_ADDR
// end ;
60721: LD_VAR 0 1
60725: RET
// export function PrepareMastodont ( ) ; begin
60726: LD_INT 0
60728: PPUSH
// uc_side := 0 ;
60729: LD_ADDR_OWVAR 20
60733: PUSH
60734: LD_INT 0
60736: ST_TO_ADDR
// uc_nation := 0 ;
60737: LD_ADDR_OWVAR 21
60741: PUSH
60742: LD_INT 0
60744: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60745: LD_ADDR_OWVAR 37
60749: PUSH
60750: LD_INT 31
60752: ST_TO_ADDR
// vc_control := control_rider ;
60753: LD_ADDR_OWVAR 38
60757: PUSH
60758: LD_INT 4
60760: ST_TO_ADDR
// end ;
60761: LD_VAR 0 1
60765: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60766: LD_INT 0
60768: PPUSH
60769: PPUSH
60770: PPUSH
// uc_side = 0 ;
60771: LD_ADDR_OWVAR 20
60775: PUSH
60776: LD_INT 0
60778: ST_TO_ADDR
// uc_nation = 0 ;
60779: LD_ADDR_OWVAR 21
60783: PUSH
60784: LD_INT 0
60786: ST_TO_ADDR
// InitHc_All ( ) ;
60787: CALL_OW 584
// InitVc ;
60791: CALL_OW 20
// if mastodonts then
60795: LD_VAR 0 6
60799: IFFALSE 60866
// for i = 1 to mastodonts do
60801: LD_ADDR_VAR 0 11
60805: PUSH
60806: DOUBLE
60807: LD_INT 1
60809: DEC
60810: ST_TO_ADDR
60811: LD_VAR 0 6
60815: PUSH
60816: FOR_TO
60817: IFFALSE 60864
// begin vc_chassis := 31 ;
60819: LD_ADDR_OWVAR 37
60823: PUSH
60824: LD_INT 31
60826: ST_TO_ADDR
// vc_control := control_rider ;
60827: LD_ADDR_OWVAR 38
60831: PUSH
60832: LD_INT 4
60834: ST_TO_ADDR
// animal := CreateVehicle ;
60835: LD_ADDR_VAR 0 12
60839: PUSH
60840: CALL_OW 45
60844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60845: LD_VAR 0 12
60849: PPUSH
60850: LD_VAR 0 8
60854: PPUSH
60855: LD_INT 0
60857: PPUSH
60858: CALL 62994 0 3
// end ;
60862: GO 60816
60864: POP
60865: POP
// if horses then
60866: LD_VAR 0 5
60870: IFFALSE 60937
// for i = 1 to horses do
60872: LD_ADDR_VAR 0 11
60876: PUSH
60877: DOUBLE
60878: LD_INT 1
60880: DEC
60881: ST_TO_ADDR
60882: LD_VAR 0 5
60886: PUSH
60887: FOR_TO
60888: IFFALSE 60935
// begin hc_class := 21 ;
60890: LD_ADDR_OWVAR 28
60894: PUSH
60895: LD_INT 21
60897: ST_TO_ADDR
// hc_gallery :=  ;
60898: LD_ADDR_OWVAR 33
60902: PUSH
60903: LD_STRING 
60905: ST_TO_ADDR
// animal := CreateHuman ;
60906: LD_ADDR_VAR 0 12
60910: PUSH
60911: CALL_OW 44
60915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60916: LD_VAR 0 12
60920: PPUSH
60921: LD_VAR 0 8
60925: PPUSH
60926: LD_INT 0
60928: PPUSH
60929: CALL 62994 0 3
// end ;
60933: GO 60887
60935: POP
60936: POP
// if birds then
60937: LD_VAR 0 1
60941: IFFALSE 61008
// for i = 1 to birds do
60943: LD_ADDR_VAR 0 11
60947: PUSH
60948: DOUBLE
60949: LD_INT 1
60951: DEC
60952: ST_TO_ADDR
60953: LD_VAR 0 1
60957: PUSH
60958: FOR_TO
60959: IFFALSE 61006
// begin hc_class := 18 ;
60961: LD_ADDR_OWVAR 28
60965: PUSH
60966: LD_INT 18
60968: ST_TO_ADDR
// hc_gallery =  ;
60969: LD_ADDR_OWVAR 33
60973: PUSH
60974: LD_STRING 
60976: ST_TO_ADDR
// animal := CreateHuman ;
60977: LD_ADDR_VAR 0 12
60981: PUSH
60982: CALL_OW 44
60986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60987: LD_VAR 0 12
60991: PPUSH
60992: LD_VAR 0 8
60996: PPUSH
60997: LD_INT 0
60999: PPUSH
61000: CALL 62994 0 3
// end ;
61004: GO 60958
61006: POP
61007: POP
// if tigers then
61008: LD_VAR 0 2
61012: IFFALSE 61096
// for i = 1 to tigers do
61014: LD_ADDR_VAR 0 11
61018: PUSH
61019: DOUBLE
61020: LD_INT 1
61022: DEC
61023: ST_TO_ADDR
61024: LD_VAR 0 2
61028: PUSH
61029: FOR_TO
61030: IFFALSE 61094
// begin hc_class = class_tiger ;
61032: LD_ADDR_OWVAR 28
61036: PUSH
61037: LD_INT 14
61039: ST_TO_ADDR
// hc_gallery =  ;
61040: LD_ADDR_OWVAR 33
61044: PUSH
61045: LD_STRING 
61047: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61048: LD_ADDR_OWVAR 35
61052: PUSH
61053: LD_INT 7
61055: NEG
61056: PPUSH
61057: LD_INT 7
61059: PPUSH
61060: CALL_OW 12
61064: ST_TO_ADDR
// animal := CreateHuman ;
61065: LD_ADDR_VAR 0 12
61069: PUSH
61070: CALL_OW 44
61074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61075: LD_VAR 0 12
61079: PPUSH
61080: LD_VAR 0 8
61084: PPUSH
61085: LD_INT 0
61087: PPUSH
61088: CALL 62994 0 3
// end ;
61092: GO 61029
61094: POP
61095: POP
// if apemans then
61096: LD_VAR 0 3
61100: IFFALSE 61223
// for i = 1 to apemans do
61102: LD_ADDR_VAR 0 11
61106: PUSH
61107: DOUBLE
61108: LD_INT 1
61110: DEC
61111: ST_TO_ADDR
61112: LD_VAR 0 3
61116: PUSH
61117: FOR_TO
61118: IFFALSE 61221
// begin hc_class = class_apeman ;
61120: LD_ADDR_OWVAR 28
61124: PUSH
61125: LD_INT 12
61127: ST_TO_ADDR
// hc_gallery =  ;
61128: LD_ADDR_OWVAR 33
61132: PUSH
61133: LD_STRING 
61135: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61136: LD_ADDR_OWVAR 35
61140: PUSH
61141: LD_INT 2
61143: NEG
61144: PPUSH
61145: LD_INT 2
61147: PPUSH
61148: CALL_OW 12
61152: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61153: LD_ADDR_OWVAR 31
61157: PUSH
61158: LD_INT 1
61160: PPUSH
61161: LD_INT 3
61163: PPUSH
61164: CALL_OW 12
61168: PUSH
61169: LD_INT 1
61171: PPUSH
61172: LD_INT 3
61174: PPUSH
61175: CALL_OW 12
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: ST_TO_ADDR
// animal := CreateHuman ;
61192: LD_ADDR_VAR 0 12
61196: PUSH
61197: CALL_OW 44
61201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61202: LD_VAR 0 12
61206: PPUSH
61207: LD_VAR 0 8
61211: PPUSH
61212: LD_INT 0
61214: PPUSH
61215: CALL 62994 0 3
// end ;
61219: GO 61117
61221: POP
61222: POP
// if enchidnas then
61223: LD_VAR 0 4
61227: IFFALSE 61294
// for i = 1 to enchidnas do
61229: LD_ADDR_VAR 0 11
61233: PUSH
61234: DOUBLE
61235: LD_INT 1
61237: DEC
61238: ST_TO_ADDR
61239: LD_VAR 0 4
61243: PUSH
61244: FOR_TO
61245: IFFALSE 61292
// begin hc_class = 13 ;
61247: LD_ADDR_OWVAR 28
61251: PUSH
61252: LD_INT 13
61254: ST_TO_ADDR
// hc_gallery =  ;
61255: LD_ADDR_OWVAR 33
61259: PUSH
61260: LD_STRING 
61262: ST_TO_ADDR
// animal := CreateHuman ;
61263: LD_ADDR_VAR 0 12
61267: PUSH
61268: CALL_OW 44
61272: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61273: LD_VAR 0 12
61277: PPUSH
61278: LD_VAR 0 8
61282: PPUSH
61283: LD_INT 0
61285: PPUSH
61286: CALL 62994 0 3
// end ;
61290: GO 61244
61292: POP
61293: POP
// if fishes then
61294: LD_VAR 0 7
61298: IFFALSE 61365
// for i = 1 to fishes do
61300: LD_ADDR_VAR 0 11
61304: PUSH
61305: DOUBLE
61306: LD_INT 1
61308: DEC
61309: ST_TO_ADDR
61310: LD_VAR 0 7
61314: PUSH
61315: FOR_TO
61316: IFFALSE 61363
// begin hc_class = 20 ;
61318: LD_ADDR_OWVAR 28
61322: PUSH
61323: LD_INT 20
61325: ST_TO_ADDR
// hc_gallery =  ;
61326: LD_ADDR_OWVAR 33
61330: PUSH
61331: LD_STRING 
61333: ST_TO_ADDR
// animal := CreateHuman ;
61334: LD_ADDR_VAR 0 12
61338: PUSH
61339: CALL_OW 44
61343: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61344: LD_VAR 0 12
61348: PPUSH
61349: LD_VAR 0 9
61353: PPUSH
61354: LD_INT 0
61356: PPUSH
61357: CALL 62994 0 3
// end ;
61361: GO 61315
61363: POP
61364: POP
// end ;
61365: LD_VAR 0 10
61369: RET
// export function WantHeal ( sci , unit ) ; begin
61370: LD_INT 0
61372: PPUSH
// if GetTaskList ( sci ) > 0 then
61373: LD_VAR 0 1
61377: PPUSH
61378: CALL_OW 437
61382: PUSH
61383: LD_INT 0
61385: GREATER
61386: IFFALSE 61456
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61388: LD_VAR 0 1
61392: PPUSH
61393: CALL_OW 437
61397: PUSH
61398: LD_INT 1
61400: ARRAY
61401: PUSH
61402: LD_INT 1
61404: ARRAY
61405: PUSH
61406: LD_STRING l
61408: EQUAL
61409: PUSH
61410: LD_VAR 0 1
61414: PPUSH
61415: CALL_OW 437
61419: PUSH
61420: LD_INT 1
61422: ARRAY
61423: PUSH
61424: LD_INT 4
61426: ARRAY
61427: PUSH
61428: LD_VAR 0 2
61432: EQUAL
61433: AND
61434: IFFALSE 61446
// result := true else
61436: LD_ADDR_VAR 0 3
61440: PUSH
61441: LD_INT 1
61443: ST_TO_ADDR
61444: GO 61454
// result := false ;
61446: LD_ADDR_VAR 0 3
61450: PUSH
61451: LD_INT 0
61453: ST_TO_ADDR
// end else
61454: GO 61464
// result := false ;
61456: LD_ADDR_VAR 0 3
61460: PUSH
61461: LD_INT 0
61463: ST_TO_ADDR
// end ;
61464: LD_VAR 0 3
61468: RET
// export function HealTarget ( sci ) ; begin
61469: LD_INT 0
61471: PPUSH
// if not sci then
61472: LD_VAR 0 1
61476: NOT
61477: IFFALSE 61481
// exit ;
61479: GO 61546
// result := 0 ;
61481: LD_ADDR_VAR 0 2
61485: PUSH
61486: LD_INT 0
61488: ST_TO_ADDR
// if GetTaskList ( sci ) then
61489: LD_VAR 0 1
61493: PPUSH
61494: CALL_OW 437
61498: IFFALSE 61546
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61500: LD_VAR 0 1
61504: PPUSH
61505: CALL_OW 437
61509: PUSH
61510: LD_INT 1
61512: ARRAY
61513: PUSH
61514: LD_INT 1
61516: ARRAY
61517: PUSH
61518: LD_STRING l
61520: EQUAL
61521: IFFALSE 61546
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61523: LD_ADDR_VAR 0 2
61527: PUSH
61528: LD_VAR 0 1
61532: PPUSH
61533: CALL_OW 437
61537: PUSH
61538: LD_INT 1
61540: ARRAY
61541: PUSH
61542: LD_INT 4
61544: ARRAY
61545: ST_TO_ADDR
// end ;
61546: LD_VAR 0 2
61550: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61551: LD_INT 0
61553: PPUSH
61554: PPUSH
61555: PPUSH
61556: PPUSH
// if not base_units then
61557: LD_VAR 0 1
61561: NOT
61562: IFFALSE 61566
// exit ;
61564: GO 61653
// result := false ;
61566: LD_ADDR_VAR 0 2
61570: PUSH
61571: LD_INT 0
61573: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61574: LD_ADDR_VAR 0 5
61578: PUSH
61579: LD_VAR 0 1
61583: PPUSH
61584: LD_INT 21
61586: PUSH
61587: LD_INT 3
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PPUSH
61594: CALL_OW 72
61598: ST_TO_ADDR
// if not tmp then
61599: LD_VAR 0 5
61603: NOT
61604: IFFALSE 61608
// exit ;
61606: GO 61653
// for i in tmp do
61608: LD_ADDR_VAR 0 3
61612: PUSH
61613: LD_VAR 0 5
61617: PUSH
61618: FOR_IN
61619: IFFALSE 61651
// begin result := EnemyInRange ( i , 22 ) ;
61621: LD_ADDR_VAR 0 2
61625: PUSH
61626: LD_VAR 0 3
61630: PPUSH
61631: LD_INT 22
61633: PPUSH
61634: CALL 59231 0 2
61638: ST_TO_ADDR
// if result then
61639: LD_VAR 0 2
61643: IFFALSE 61649
// exit ;
61645: POP
61646: POP
61647: GO 61653
// end ;
61649: GO 61618
61651: POP
61652: POP
// end ;
61653: LD_VAR 0 2
61657: RET
// export function FilterByTag ( units , tag ) ; begin
61658: LD_INT 0
61660: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61661: LD_ADDR_VAR 0 3
61665: PUSH
61666: LD_VAR 0 1
61670: PPUSH
61671: LD_INT 120
61673: PUSH
61674: LD_VAR 0 2
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PPUSH
61683: CALL_OW 72
61687: ST_TO_ADDR
// end ;
61688: LD_VAR 0 3
61692: RET
// export function IsDriver ( un ) ; begin
61693: LD_INT 0
61695: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61696: LD_ADDR_VAR 0 2
61700: PUSH
61701: LD_VAR 0 1
61705: PUSH
61706: LD_INT 55
61708: PUSH
61709: EMPTY
61710: LIST
61711: PPUSH
61712: CALL_OW 69
61716: IN
61717: ST_TO_ADDR
// end ;
61718: LD_VAR 0 2
61722: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61723: LD_INT 0
61725: PPUSH
61726: PPUSH
// list := [ ] ;
61727: LD_ADDR_VAR 0 5
61731: PUSH
61732: EMPTY
61733: ST_TO_ADDR
// case d of 0 :
61734: LD_VAR 0 3
61738: PUSH
61739: LD_INT 0
61741: DOUBLE
61742: EQUAL
61743: IFTRUE 61747
61745: GO 61880
61747: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61748: LD_ADDR_VAR 0 5
61752: PUSH
61753: LD_VAR 0 1
61757: PUSH
61758: LD_INT 4
61760: MINUS
61761: PUSH
61762: LD_VAR 0 2
61766: PUSH
61767: LD_INT 4
61769: MINUS
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: LIST
61778: PUSH
61779: LD_VAR 0 1
61783: PUSH
61784: LD_INT 3
61786: MINUS
61787: PUSH
61788: LD_VAR 0 2
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: LIST
61800: PUSH
61801: LD_VAR 0 1
61805: PUSH
61806: LD_INT 4
61808: PLUS
61809: PUSH
61810: LD_VAR 0 2
61814: PUSH
61815: LD_INT 4
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: LIST
61822: PUSH
61823: LD_VAR 0 1
61827: PUSH
61828: LD_INT 3
61830: PLUS
61831: PUSH
61832: LD_VAR 0 2
61836: PUSH
61837: LD_INT 3
61839: PLUS
61840: PUSH
61841: LD_INT 5
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: LIST
61848: PUSH
61849: LD_VAR 0 1
61853: PUSH
61854: LD_VAR 0 2
61858: PUSH
61859: LD_INT 4
61861: PLUS
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: ST_TO_ADDR
// end ; 1 :
61878: GO 62578
61880: LD_INT 1
61882: DOUBLE
61883: EQUAL
61884: IFTRUE 61888
61886: GO 62021
61888: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61889: LD_ADDR_VAR 0 5
61893: PUSH
61894: LD_VAR 0 1
61898: PUSH
61899: LD_VAR 0 2
61903: PUSH
61904: LD_INT 4
61906: MINUS
61907: PUSH
61908: LD_INT 3
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: LIST
61915: PUSH
61916: LD_VAR 0 1
61920: PUSH
61921: LD_INT 3
61923: MINUS
61924: PUSH
61925: LD_VAR 0 2
61929: PUSH
61930: LD_INT 3
61932: MINUS
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: PUSH
61942: LD_VAR 0 1
61946: PUSH
61947: LD_INT 4
61949: MINUS
61950: PUSH
61951: LD_VAR 0 2
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: PUSH
61964: LD_VAR 0 1
61968: PUSH
61969: LD_VAR 0 2
61973: PUSH
61974: LD_INT 3
61976: PLUS
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: LIST
61985: PUSH
61986: LD_VAR 0 1
61990: PUSH
61991: LD_INT 4
61993: PLUS
61994: PUSH
61995: LD_VAR 0 2
61999: PUSH
62000: LD_INT 4
62002: PLUS
62003: PUSH
62004: LD_INT 5
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: LIST
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: ST_TO_ADDR
// end ; 2 :
62019: GO 62578
62021: LD_INT 2
62023: DOUBLE
62024: EQUAL
62025: IFTRUE 62029
62027: GO 62158
62029: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62030: LD_ADDR_VAR 0 5
62034: PUSH
62035: LD_VAR 0 1
62039: PUSH
62040: LD_VAR 0 2
62044: PUSH
62045: LD_INT 3
62047: MINUS
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: LIST
62056: PUSH
62057: LD_VAR 0 1
62061: PUSH
62062: LD_INT 4
62064: PLUS
62065: PUSH
62066: LD_VAR 0 2
62070: PUSH
62071: LD_INT 4
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: PUSH
62079: LD_VAR 0 1
62083: PUSH
62084: LD_VAR 0 2
62088: PUSH
62089: LD_INT 4
62091: PLUS
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: LIST
62100: PUSH
62101: LD_VAR 0 1
62105: PUSH
62106: LD_INT 3
62108: MINUS
62109: PUSH
62110: LD_VAR 0 2
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: LIST
62122: PUSH
62123: LD_VAR 0 1
62127: PUSH
62128: LD_INT 4
62130: MINUS
62131: PUSH
62132: LD_VAR 0 2
62136: PUSH
62137: LD_INT 4
62139: MINUS
62140: PUSH
62141: LD_INT 2
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: LIST
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: ST_TO_ADDR
// end ; 3 :
62156: GO 62578
62158: LD_INT 3
62160: DOUBLE
62161: EQUAL
62162: IFTRUE 62166
62164: GO 62299
62166: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62167: LD_ADDR_VAR 0 5
62171: PUSH
62172: LD_VAR 0 1
62176: PUSH
62177: LD_INT 3
62179: PLUS
62180: PUSH
62181: LD_VAR 0 2
62185: PUSH
62186: LD_INT 4
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: PUSH
62194: LD_VAR 0 1
62198: PUSH
62199: LD_INT 4
62201: PLUS
62202: PUSH
62203: LD_VAR 0 2
62207: PUSH
62208: LD_INT 4
62210: PLUS
62211: PUSH
62212: LD_INT 5
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: PUSH
62220: LD_VAR 0 1
62224: PUSH
62225: LD_INT 4
62227: MINUS
62228: PUSH
62229: LD_VAR 0 2
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: LIST
62241: PUSH
62242: LD_VAR 0 1
62246: PUSH
62247: LD_VAR 0 2
62251: PUSH
62252: LD_INT 4
62254: MINUS
62255: PUSH
62256: LD_INT 3
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: LIST
62263: PUSH
62264: LD_VAR 0 1
62268: PUSH
62269: LD_INT 3
62271: MINUS
62272: PUSH
62273: LD_VAR 0 2
62277: PUSH
62278: LD_INT 3
62280: MINUS
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: LIST
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: ST_TO_ADDR
// end ; 4 :
62297: GO 62578
62299: LD_INT 4
62301: DOUBLE
62302: EQUAL
62303: IFTRUE 62307
62305: GO 62440
62307: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62308: LD_ADDR_VAR 0 5
62312: PUSH
62313: LD_VAR 0 1
62317: PUSH
62318: LD_VAR 0 2
62322: PUSH
62323: LD_INT 4
62325: PLUS
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: PUSH
62335: LD_VAR 0 1
62339: PUSH
62340: LD_INT 3
62342: PLUS
62343: PUSH
62344: LD_VAR 0 2
62348: PUSH
62349: LD_INT 3
62351: PLUS
62352: PUSH
62353: LD_INT 5
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: LIST
62360: PUSH
62361: LD_VAR 0 1
62365: PUSH
62366: LD_INT 4
62368: PLUS
62369: PUSH
62370: LD_VAR 0 2
62374: PUSH
62375: LD_INT 4
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: PUSH
62383: LD_VAR 0 1
62387: PUSH
62388: LD_VAR 0 2
62392: PUSH
62393: LD_INT 3
62395: MINUS
62396: PUSH
62397: LD_INT 3
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: LIST
62404: PUSH
62405: LD_VAR 0 1
62409: PUSH
62410: LD_INT 4
62412: MINUS
62413: PUSH
62414: LD_VAR 0 2
62418: PUSH
62419: LD_INT 4
62421: MINUS
62422: PUSH
62423: LD_INT 2
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: LIST
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: ST_TO_ADDR
// end ; 5 :
62438: GO 62578
62440: LD_INT 5
62442: DOUBLE
62443: EQUAL
62444: IFTRUE 62448
62446: GO 62577
62448: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62449: LD_ADDR_VAR 0 5
62453: PUSH
62454: LD_VAR 0 1
62458: PUSH
62459: LD_INT 4
62461: MINUS
62462: PUSH
62463: LD_VAR 0 2
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: PUSH
62476: LD_VAR 0 1
62480: PUSH
62481: LD_VAR 0 2
62485: PUSH
62486: LD_INT 4
62488: MINUS
62489: PUSH
62490: LD_INT 3
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: PUSH
62498: LD_VAR 0 1
62502: PUSH
62503: LD_INT 4
62505: PLUS
62506: PUSH
62507: LD_VAR 0 2
62511: PUSH
62512: LD_INT 4
62514: PLUS
62515: PUSH
62516: LD_INT 5
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: LIST
62523: PUSH
62524: LD_VAR 0 1
62528: PUSH
62529: LD_INT 3
62531: PLUS
62532: PUSH
62533: LD_VAR 0 2
62537: PUSH
62538: LD_INT 4
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: LIST
62545: PUSH
62546: LD_VAR 0 1
62550: PUSH
62551: LD_VAR 0 2
62555: PUSH
62556: LD_INT 3
62558: PLUS
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: ST_TO_ADDR
// end ; end ;
62575: GO 62578
62577: POP
// result := list ;
62578: LD_ADDR_VAR 0 4
62582: PUSH
62583: LD_VAR 0 5
62587: ST_TO_ADDR
// end ;
62588: LD_VAR 0 4
62592: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62593: LD_INT 0
62595: PPUSH
62596: PPUSH
62597: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62598: LD_VAR 0 1
62602: NOT
62603: PUSH
62604: LD_VAR 0 2
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: LD_INT 3
62617: PUSH
62618: LD_INT 4
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: IN
62627: NOT
62628: OR
62629: IFFALSE 62633
// exit ;
62631: GO 62716
// tmp := [ ] ;
62633: LD_ADDR_VAR 0 5
62637: PUSH
62638: EMPTY
62639: ST_TO_ADDR
// for i in units do
62640: LD_ADDR_VAR 0 4
62644: PUSH
62645: LD_VAR 0 1
62649: PUSH
62650: FOR_IN
62651: IFFALSE 62685
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62653: LD_ADDR_VAR 0 5
62657: PUSH
62658: LD_VAR 0 5
62662: PPUSH
62663: LD_VAR 0 4
62667: PPUSH
62668: LD_VAR 0 2
62672: PPUSH
62673: CALL_OW 259
62677: PPUSH
62678: CALL 64089 0 2
62682: ST_TO_ADDR
62683: GO 62650
62685: POP
62686: POP
// if not tmp then
62687: LD_VAR 0 5
62691: NOT
62692: IFFALSE 62696
// exit ;
62694: GO 62716
// result := SortListByListDesc ( units , tmp ) ;
62696: LD_ADDR_VAR 0 3
62700: PUSH
62701: LD_VAR 0 1
62705: PPUSH
62706: LD_VAR 0 5
62710: PPUSH
62711: CALL_OW 77
62715: ST_TO_ADDR
// end ;
62716: LD_VAR 0 3
62720: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62721: LD_INT 0
62723: PPUSH
62724: PPUSH
62725: PPUSH
// result := false ;
62726: LD_ADDR_VAR 0 3
62730: PUSH
62731: LD_INT 0
62733: ST_TO_ADDR
// if not building then
62734: LD_VAR 0 2
62738: NOT
62739: IFFALSE 62743
// exit ;
62741: GO 62881
// x := GetX ( building ) ;
62743: LD_ADDR_VAR 0 4
62747: PUSH
62748: LD_VAR 0 2
62752: PPUSH
62753: CALL_OW 250
62757: ST_TO_ADDR
// y := GetY ( building ) ;
62758: LD_ADDR_VAR 0 5
62762: PUSH
62763: LD_VAR 0 2
62767: PPUSH
62768: CALL_OW 251
62772: ST_TO_ADDR
// if not x or not y then
62773: LD_VAR 0 4
62777: NOT
62778: PUSH
62779: LD_VAR 0 5
62783: NOT
62784: OR
62785: IFFALSE 62789
// exit ;
62787: GO 62881
// if GetTaskList ( unit ) then
62789: LD_VAR 0 1
62793: PPUSH
62794: CALL_OW 437
62798: IFFALSE 62881
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62800: LD_STRING e
62802: PUSH
62803: LD_VAR 0 1
62807: PPUSH
62808: CALL_OW 437
62812: PUSH
62813: LD_INT 1
62815: ARRAY
62816: PUSH
62817: LD_INT 1
62819: ARRAY
62820: EQUAL
62821: PUSH
62822: LD_VAR 0 4
62826: PUSH
62827: LD_VAR 0 1
62831: PPUSH
62832: CALL_OW 437
62836: PUSH
62837: LD_INT 1
62839: ARRAY
62840: PUSH
62841: LD_INT 2
62843: ARRAY
62844: EQUAL
62845: AND
62846: PUSH
62847: LD_VAR 0 5
62851: PUSH
62852: LD_VAR 0 1
62856: PPUSH
62857: CALL_OW 437
62861: PUSH
62862: LD_INT 1
62864: ARRAY
62865: PUSH
62866: LD_INT 3
62868: ARRAY
62869: EQUAL
62870: AND
62871: IFFALSE 62881
// result := true end ;
62873: LD_ADDR_VAR 0 3
62877: PUSH
62878: LD_INT 1
62880: ST_TO_ADDR
// end ;
62881: LD_VAR 0 3
62885: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62886: LD_INT 0
62888: PPUSH
// result := false ;
62889: LD_ADDR_VAR 0 4
62893: PUSH
62894: LD_INT 0
62896: ST_TO_ADDR
// if GetTaskList ( unit ) then
62897: LD_VAR 0 1
62901: PPUSH
62902: CALL_OW 437
62906: IFFALSE 62989
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62908: LD_STRING M
62910: PUSH
62911: LD_VAR 0 1
62915: PPUSH
62916: CALL_OW 437
62920: PUSH
62921: LD_INT 1
62923: ARRAY
62924: PUSH
62925: LD_INT 1
62927: ARRAY
62928: EQUAL
62929: PUSH
62930: LD_VAR 0 2
62934: PUSH
62935: LD_VAR 0 1
62939: PPUSH
62940: CALL_OW 437
62944: PUSH
62945: LD_INT 1
62947: ARRAY
62948: PUSH
62949: LD_INT 2
62951: ARRAY
62952: EQUAL
62953: AND
62954: PUSH
62955: LD_VAR 0 3
62959: PUSH
62960: LD_VAR 0 1
62964: PPUSH
62965: CALL_OW 437
62969: PUSH
62970: LD_INT 1
62972: ARRAY
62973: PUSH
62974: LD_INT 3
62976: ARRAY
62977: EQUAL
62978: AND
62979: IFFALSE 62989
// result := true ;
62981: LD_ADDR_VAR 0 4
62985: PUSH
62986: LD_INT 1
62988: ST_TO_ADDR
// end ; end ;
62989: LD_VAR 0 4
62993: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62994: LD_INT 0
62996: PPUSH
62997: PPUSH
62998: PPUSH
62999: PPUSH
// if not unit or not area then
63000: LD_VAR 0 1
63004: NOT
63005: PUSH
63006: LD_VAR 0 2
63010: NOT
63011: OR
63012: IFFALSE 63016
// exit ;
63014: GO 63192
// tmp := AreaToList ( area , i ) ;
63016: LD_ADDR_VAR 0 6
63020: PUSH
63021: LD_VAR 0 2
63025: PPUSH
63026: LD_VAR 0 5
63030: PPUSH
63031: CALL_OW 517
63035: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63036: LD_ADDR_VAR 0 5
63040: PUSH
63041: DOUBLE
63042: LD_INT 1
63044: DEC
63045: ST_TO_ADDR
63046: LD_VAR 0 6
63050: PUSH
63051: LD_INT 1
63053: ARRAY
63054: PUSH
63055: FOR_TO
63056: IFFALSE 63190
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63058: LD_ADDR_VAR 0 7
63062: PUSH
63063: LD_VAR 0 6
63067: PUSH
63068: LD_INT 1
63070: ARRAY
63071: PUSH
63072: LD_VAR 0 5
63076: ARRAY
63077: PUSH
63078: LD_VAR 0 6
63082: PUSH
63083: LD_INT 2
63085: ARRAY
63086: PUSH
63087: LD_VAR 0 5
63091: ARRAY
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63097: LD_INT 92
63099: PUSH
63100: LD_VAR 0 7
63104: PUSH
63105: LD_INT 1
63107: ARRAY
63108: PUSH
63109: LD_VAR 0 7
63113: PUSH
63114: LD_INT 2
63116: ARRAY
63117: PUSH
63118: LD_INT 2
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: PPUSH
63127: CALL_OW 69
63131: PUSH
63132: LD_INT 0
63134: EQUAL
63135: IFFALSE 63188
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63137: LD_VAR 0 1
63141: PPUSH
63142: LD_VAR 0 7
63146: PUSH
63147: LD_INT 1
63149: ARRAY
63150: PPUSH
63151: LD_VAR 0 7
63155: PUSH
63156: LD_INT 2
63158: ARRAY
63159: PPUSH
63160: LD_VAR 0 3
63164: PPUSH
63165: CALL_OW 48
// result := IsPlaced ( unit ) ;
63169: LD_ADDR_VAR 0 4
63173: PUSH
63174: LD_VAR 0 1
63178: PPUSH
63179: CALL_OW 305
63183: ST_TO_ADDR
// exit ;
63184: POP
63185: POP
63186: GO 63192
// end ; end ;
63188: GO 63055
63190: POP
63191: POP
// end ;
63192: LD_VAR 0 4
63196: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63197: LD_INT 0
63199: PPUSH
63200: PPUSH
63201: PPUSH
// if not side or side > 8 then
63202: LD_VAR 0 1
63206: NOT
63207: PUSH
63208: LD_VAR 0 1
63212: PUSH
63213: LD_INT 8
63215: GREATER
63216: OR
63217: IFFALSE 63221
// exit ;
63219: GO 63408
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63221: LD_ADDR_VAR 0 4
63225: PUSH
63226: LD_INT 22
63228: PUSH
63229: LD_VAR 0 1
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 21
63240: PUSH
63241: LD_INT 3
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PPUSH
63252: CALL_OW 69
63256: ST_TO_ADDR
// if not tmp then
63257: LD_VAR 0 4
63261: NOT
63262: IFFALSE 63266
// exit ;
63264: GO 63408
// enable_addtolog := true ;
63266: LD_ADDR_OWVAR 81
63270: PUSH
63271: LD_INT 1
63273: ST_TO_ADDR
// AddToLog ( [ ) ;
63274: LD_STRING [
63276: PPUSH
63277: CALL_OW 561
// for i in tmp do
63281: LD_ADDR_VAR 0 3
63285: PUSH
63286: LD_VAR 0 4
63290: PUSH
63291: FOR_IN
63292: IFFALSE 63399
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63294: LD_STRING [
63296: PUSH
63297: LD_VAR 0 3
63301: PPUSH
63302: CALL_OW 266
63306: STR
63307: PUSH
63308: LD_STRING , 
63310: STR
63311: PUSH
63312: LD_VAR 0 3
63316: PPUSH
63317: CALL_OW 250
63321: STR
63322: PUSH
63323: LD_STRING , 
63325: STR
63326: PUSH
63327: LD_VAR 0 3
63331: PPUSH
63332: CALL_OW 251
63336: STR
63337: PUSH
63338: LD_STRING , 
63340: STR
63341: PUSH
63342: LD_VAR 0 3
63346: PPUSH
63347: CALL_OW 254
63351: STR
63352: PUSH
63353: LD_STRING , 
63355: STR
63356: PUSH
63357: LD_VAR 0 3
63361: PPUSH
63362: LD_INT 1
63364: PPUSH
63365: CALL_OW 268
63369: STR
63370: PUSH
63371: LD_STRING , 
63373: STR
63374: PUSH
63375: LD_VAR 0 3
63379: PPUSH
63380: LD_INT 2
63382: PPUSH
63383: CALL_OW 268
63387: STR
63388: PUSH
63389: LD_STRING ],
63391: STR
63392: PPUSH
63393: CALL_OW 561
// end ;
63397: GO 63291
63399: POP
63400: POP
// AddToLog ( ]; ) ;
63401: LD_STRING ];
63403: PPUSH
63404: CALL_OW 561
// end ;
63408: LD_VAR 0 2
63412: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63413: LD_INT 0
63415: PPUSH
63416: PPUSH
63417: PPUSH
63418: PPUSH
63419: PPUSH
// if not area or not rate or not max then
63420: LD_VAR 0 1
63424: NOT
63425: PUSH
63426: LD_VAR 0 2
63430: NOT
63431: OR
63432: PUSH
63433: LD_VAR 0 4
63437: NOT
63438: OR
63439: IFFALSE 63443
// exit ;
63441: GO 63632
// while 1 do
63443: LD_INT 1
63445: IFFALSE 63632
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63447: LD_ADDR_VAR 0 9
63451: PUSH
63452: LD_VAR 0 1
63456: PPUSH
63457: LD_INT 1
63459: PPUSH
63460: CALL_OW 287
63464: PUSH
63465: LD_INT 10
63467: MUL
63468: ST_TO_ADDR
// r := rate / 10 ;
63469: LD_ADDR_VAR 0 7
63473: PUSH
63474: LD_VAR 0 2
63478: PUSH
63479: LD_INT 10
63481: DIVREAL
63482: ST_TO_ADDR
// time := 1 1$00 ;
63483: LD_ADDR_VAR 0 8
63487: PUSH
63488: LD_INT 2100
63490: ST_TO_ADDR
// if amount < min then
63491: LD_VAR 0 9
63495: PUSH
63496: LD_VAR 0 3
63500: LESS
63501: IFFALSE 63519
// r := r * 2 else
63503: LD_ADDR_VAR 0 7
63507: PUSH
63508: LD_VAR 0 7
63512: PUSH
63513: LD_INT 2
63515: MUL
63516: ST_TO_ADDR
63517: GO 63545
// if amount > max then
63519: LD_VAR 0 9
63523: PUSH
63524: LD_VAR 0 4
63528: GREATER
63529: IFFALSE 63545
// r := r / 2 ;
63531: LD_ADDR_VAR 0 7
63535: PUSH
63536: LD_VAR 0 7
63540: PUSH
63541: LD_INT 2
63543: DIVREAL
63544: ST_TO_ADDR
// time := time / r ;
63545: LD_ADDR_VAR 0 8
63549: PUSH
63550: LD_VAR 0 8
63554: PUSH
63555: LD_VAR 0 7
63559: DIVREAL
63560: ST_TO_ADDR
// if time < 0 then
63561: LD_VAR 0 8
63565: PUSH
63566: LD_INT 0
63568: LESS
63569: IFFALSE 63586
// time := time * - 1 ;
63571: LD_ADDR_VAR 0 8
63575: PUSH
63576: LD_VAR 0 8
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: MUL
63585: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63586: LD_VAR 0 8
63590: PUSH
63591: LD_INT 35
63593: PPUSH
63594: LD_INT 875
63596: PPUSH
63597: CALL_OW 12
63601: PLUS
63602: PPUSH
63603: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63607: LD_INT 1
63609: PPUSH
63610: LD_INT 5
63612: PPUSH
63613: CALL_OW 12
63617: PPUSH
63618: LD_VAR 0 1
63622: PPUSH
63623: LD_INT 1
63625: PPUSH
63626: CALL_OW 55
// end ;
63630: GO 63443
// end ;
63632: LD_VAR 0 5
63636: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63637: LD_INT 0
63639: PPUSH
63640: PPUSH
63641: PPUSH
63642: PPUSH
63643: PPUSH
63644: PPUSH
63645: PPUSH
63646: PPUSH
// if not turrets or not factories then
63647: LD_VAR 0 1
63651: NOT
63652: PUSH
63653: LD_VAR 0 2
63657: NOT
63658: OR
63659: IFFALSE 63663
// exit ;
63661: GO 63970
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63663: LD_ADDR_VAR 0 10
63667: PUSH
63668: LD_INT 5
63670: PUSH
63671: LD_INT 6
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: LD_INT 4
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 3
63690: PUSH
63691: LD_INT 5
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 24
63705: PUSH
63706: LD_INT 25
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 23
63715: PUSH
63716: LD_INT 27
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 42
63729: PUSH
63730: LD_INT 43
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 44
63739: PUSH
63740: LD_INT 46
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 45
63749: PUSH
63750: LD_INT 47
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: LIST
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: LIST
63766: ST_TO_ADDR
// result := [ ] ;
63767: LD_ADDR_VAR 0 3
63771: PUSH
63772: EMPTY
63773: ST_TO_ADDR
// for i in turrets do
63774: LD_ADDR_VAR 0 4
63778: PUSH
63779: LD_VAR 0 1
63783: PUSH
63784: FOR_IN
63785: IFFALSE 63968
// begin nat := GetNation ( i ) ;
63787: LD_ADDR_VAR 0 7
63791: PUSH
63792: LD_VAR 0 4
63796: PPUSH
63797: CALL_OW 248
63801: ST_TO_ADDR
// weapon := 0 ;
63802: LD_ADDR_VAR 0 8
63806: PUSH
63807: LD_INT 0
63809: ST_TO_ADDR
// if not nat then
63810: LD_VAR 0 7
63814: NOT
63815: IFFALSE 63819
// continue ;
63817: GO 63784
// for j in list [ nat ] do
63819: LD_ADDR_VAR 0 5
63823: PUSH
63824: LD_VAR 0 10
63828: PUSH
63829: LD_VAR 0 7
63833: ARRAY
63834: PUSH
63835: FOR_IN
63836: IFFALSE 63877
// if GetBWeapon ( i ) = j [ 1 ] then
63838: LD_VAR 0 4
63842: PPUSH
63843: CALL_OW 269
63847: PUSH
63848: LD_VAR 0 5
63852: PUSH
63853: LD_INT 1
63855: ARRAY
63856: EQUAL
63857: IFFALSE 63875
// begin weapon := j [ 2 ] ;
63859: LD_ADDR_VAR 0 8
63863: PUSH
63864: LD_VAR 0 5
63868: PUSH
63869: LD_INT 2
63871: ARRAY
63872: ST_TO_ADDR
// break ;
63873: GO 63877
// end ;
63875: GO 63835
63877: POP
63878: POP
// if not weapon then
63879: LD_VAR 0 8
63883: NOT
63884: IFFALSE 63888
// continue ;
63886: GO 63784
// for k in factories do
63888: LD_ADDR_VAR 0 6
63892: PUSH
63893: LD_VAR 0 2
63897: PUSH
63898: FOR_IN
63899: IFFALSE 63964
// begin weapons := AvailableWeaponList ( k ) ;
63901: LD_ADDR_VAR 0 9
63905: PUSH
63906: LD_VAR 0 6
63910: PPUSH
63911: CALL_OW 478
63915: ST_TO_ADDR
// if not weapons then
63916: LD_VAR 0 9
63920: NOT
63921: IFFALSE 63925
// continue ;
63923: GO 63898
// if weapon in weapons then
63925: LD_VAR 0 8
63929: PUSH
63930: LD_VAR 0 9
63934: IN
63935: IFFALSE 63962
// begin result := [ i , weapon ] ;
63937: LD_ADDR_VAR 0 3
63941: PUSH
63942: LD_VAR 0 4
63946: PUSH
63947: LD_VAR 0 8
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: ST_TO_ADDR
// exit ;
63956: POP
63957: POP
63958: POP
63959: POP
63960: GO 63970
// end ; end ;
63962: GO 63898
63964: POP
63965: POP
// end ;
63966: GO 63784
63968: POP
63969: POP
// end ;
63970: LD_VAR 0 3
63974: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63975: LD_INT 0
63977: PPUSH
// if not side or side > 8 then
63978: LD_VAR 0 3
63982: NOT
63983: PUSH
63984: LD_VAR 0 3
63988: PUSH
63989: LD_INT 8
63991: GREATER
63992: OR
63993: IFFALSE 63997
// exit ;
63995: GO 64056
// if not range then
63997: LD_VAR 0 4
64001: NOT
64002: IFFALSE 64013
// range := - 12 ;
64004: LD_ADDR_VAR 0 4
64008: PUSH
64009: LD_INT 12
64011: NEG
64012: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64013: LD_VAR 0 1
64017: PPUSH
64018: LD_VAR 0 2
64022: PPUSH
64023: LD_VAR 0 3
64027: PPUSH
64028: LD_VAR 0 4
64032: PPUSH
64033: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64037: LD_VAR 0 1
64041: PPUSH
64042: LD_VAR 0 2
64046: PPUSH
64047: LD_VAR 0 3
64051: PPUSH
64052: CALL_OW 331
// end ;
64056: LD_VAR 0 5
64060: RET
// export function Video ( mode ) ; begin
64061: LD_INT 0
64063: PPUSH
// ingame_video = mode ;
64064: LD_ADDR_OWVAR 52
64068: PUSH
64069: LD_VAR 0 1
64073: ST_TO_ADDR
// interface_hidden = mode ;
64074: LD_ADDR_OWVAR 54
64078: PUSH
64079: LD_VAR 0 1
64083: ST_TO_ADDR
// end ;
64084: LD_VAR 0 2
64088: RET
// export function Join ( array , element ) ; begin
64089: LD_INT 0
64091: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64092: LD_ADDR_VAR 0 3
64096: PUSH
64097: LD_VAR 0 1
64101: PPUSH
64102: LD_VAR 0 1
64106: PUSH
64107: LD_INT 1
64109: PLUS
64110: PPUSH
64111: LD_VAR 0 2
64115: PPUSH
64116: CALL_OW 1
64120: ST_TO_ADDR
// end ;
64121: LD_VAR 0 3
64125: RET
// export function JoinUnion ( array , element ) ; begin
64126: LD_INT 0
64128: PPUSH
// result := array union element ;
64129: LD_ADDR_VAR 0 3
64133: PUSH
64134: LD_VAR 0 1
64138: PUSH
64139: LD_VAR 0 2
64143: UNION
64144: ST_TO_ADDR
// end ;
64145: LD_VAR 0 3
64149: RET
// export function GetBehemoths ( side ) ; begin
64150: LD_INT 0
64152: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64153: LD_ADDR_VAR 0 2
64157: PUSH
64158: LD_INT 22
64160: PUSH
64161: LD_VAR 0 1
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 31
64172: PUSH
64173: LD_INT 25
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PPUSH
64184: CALL_OW 69
64188: ST_TO_ADDR
// end ;
64189: LD_VAR 0 2
64193: RET
// export function Shuffle ( array ) ; var i , index ; begin
64194: LD_INT 0
64196: PPUSH
64197: PPUSH
64198: PPUSH
// result := [ ] ;
64199: LD_ADDR_VAR 0 2
64203: PUSH
64204: EMPTY
64205: ST_TO_ADDR
// if not array then
64206: LD_VAR 0 1
64210: NOT
64211: IFFALSE 64215
// exit ;
64213: GO 64314
// Randomize ;
64215: CALL_OW 10
// for i = array downto 1 do
64219: LD_ADDR_VAR 0 3
64223: PUSH
64224: DOUBLE
64225: LD_VAR 0 1
64229: INC
64230: ST_TO_ADDR
64231: LD_INT 1
64233: PUSH
64234: FOR_DOWNTO
64235: IFFALSE 64312
// begin index := rand ( 1 , array ) ;
64237: LD_ADDR_VAR 0 4
64241: PUSH
64242: LD_INT 1
64244: PPUSH
64245: LD_VAR 0 1
64249: PPUSH
64250: CALL_OW 12
64254: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64255: LD_ADDR_VAR 0 2
64259: PUSH
64260: LD_VAR 0 2
64264: PPUSH
64265: LD_VAR 0 2
64269: PUSH
64270: LD_INT 1
64272: PLUS
64273: PPUSH
64274: LD_VAR 0 1
64278: PUSH
64279: LD_VAR 0 4
64283: ARRAY
64284: PPUSH
64285: CALL_OW 2
64289: ST_TO_ADDR
// array := Delete ( array , index ) ;
64290: LD_ADDR_VAR 0 1
64294: PUSH
64295: LD_VAR 0 1
64299: PPUSH
64300: LD_VAR 0 4
64304: PPUSH
64305: CALL_OW 3
64309: ST_TO_ADDR
// end ;
64310: GO 64234
64312: POP
64313: POP
// end ;
64314: LD_VAR 0 2
64318: RET
// export function GetBaseMaterials ( base ) ; begin
64319: LD_INT 0
64321: PPUSH
// result := [ 0 , 0 , 0 ] ;
64322: LD_ADDR_VAR 0 2
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: LIST
64340: ST_TO_ADDR
// if not base then
64341: LD_VAR 0 1
64345: NOT
64346: IFFALSE 64350
// exit ;
64348: GO 64399
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64350: LD_ADDR_VAR 0 2
64354: PUSH
64355: LD_VAR 0 1
64359: PPUSH
64360: LD_INT 1
64362: PPUSH
64363: CALL_OW 275
64367: PUSH
64368: LD_VAR 0 1
64372: PPUSH
64373: LD_INT 2
64375: PPUSH
64376: CALL_OW 275
64380: PUSH
64381: LD_VAR 0 1
64385: PPUSH
64386: LD_INT 3
64388: PPUSH
64389: CALL_OW 275
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: LIST
64398: ST_TO_ADDR
// end ;
64399: LD_VAR 0 2
64403: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64404: LD_INT 0
64406: PPUSH
64407: PPUSH
// result := array ;
64408: LD_ADDR_VAR 0 3
64412: PUSH
64413: LD_VAR 0 1
64417: ST_TO_ADDR
// if size >= result then
64418: LD_VAR 0 2
64422: PUSH
64423: LD_VAR 0 3
64427: GREATEREQUAL
64428: IFFALSE 64432
// exit ;
64430: GO 64482
// if size then
64432: LD_VAR 0 2
64436: IFFALSE 64482
// for i := array downto size do
64438: LD_ADDR_VAR 0 4
64442: PUSH
64443: DOUBLE
64444: LD_VAR 0 1
64448: INC
64449: ST_TO_ADDR
64450: LD_VAR 0 2
64454: PUSH
64455: FOR_DOWNTO
64456: IFFALSE 64480
// result := Delete ( result , result ) ;
64458: LD_ADDR_VAR 0 3
64462: PUSH
64463: LD_VAR 0 3
64467: PPUSH
64468: LD_VAR 0 3
64472: PPUSH
64473: CALL_OW 3
64477: ST_TO_ADDR
64478: GO 64455
64480: POP
64481: POP
// end ;
64482: LD_VAR 0 3
64486: RET
// export function ComExit ( unit ) ; var tmp ; begin
64487: LD_INT 0
64489: PPUSH
64490: PPUSH
// if not IsInUnit ( unit ) then
64491: LD_VAR 0 1
64495: PPUSH
64496: CALL_OW 310
64500: NOT
64501: IFFALSE 64505
// exit ;
64503: GO 64565
// tmp := IsInUnit ( unit ) ;
64505: LD_ADDR_VAR 0 3
64509: PUSH
64510: LD_VAR 0 1
64514: PPUSH
64515: CALL_OW 310
64519: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64520: LD_VAR 0 3
64524: PPUSH
64525: CALL_OW 247
64529: PUSH
64530: LD_INT 2
64532: EQUAL
64533: IFFALSE 64546
// ComExitVehicle ( unit ) else
64535: LD_VAR 0 1
64539: PPUSH
64540: CALL_OW 121
64544: GO 64555
// ComExitBuilding ( unit ) ;
64546: LD_VAR 0 1
64550: PPUSH
64551: CALL_OW 122
// result := tmp ;
64555: LD_ADDR_VAR 0 2
64559: PUSH
64560: LD_VAR 0 3
64564: ST_TO_ADDR
// end ;
64565: LD_VAR 0 2
64569: RET
// export function ComExitAll ( units ) ; var i ; begin
64570: LD_INT 0
64572: PPUSH
64573: PPUSH
// if not units then
64574: LD_VAR 0 1
64578: NOT
64579: IFFALSE 64583
// exit ;
64581: GO 64609
// for i in units do
64583: LD_ADDR_VAR 0 3
64587: PUSH
64588: LD_VAR 0 1
64592: PUSH
64593: FOR_IN
64594: IFFALSE 64607
// ComExit ( i ) ;
64596: LD_VAR 0 3
64600: PPUSH
64601: CALL 64487 0 1
64605: GO 64593
64607: POP
64608: POP
// end ;
64609: LD_VAR 0 2
64613: RET
// export function ResetHc ; begin
64614: LD_INT 0
64616: PPUSH
// InitHc ;
64617: CALL_OW 19
// hc_importance := 0 ;
64621: LD_ADDR_OWVAR 32
64625: PUSH
64626: LD_INT 0
64628: ST_TO_ADDR
// end ;
64629: LD_VAR 0 1
64633: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64634: LD_INT 0
64636: PPUSH
64637: PPUSH
64638: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64639: LD_ADDR_VAR 0 6
64643: PUSH
64644: LD_VAR 0 1
64648: PUSH
64649: LD_VAR 0 3
64653: PLUS
64654: PUSH
64655: LD_INT 2
64657: DIV
64658: ST_TO_ADDR
// if _x < 0 then
64659: LD_VAR 0 6
64663: PUSH
64664: LD_INT 0
64666: LESS
64667: IFFALSE 64684
// _x := _x * - 1 ;
64669: LD_ADDR_VAR 0 6
64673: PUSH
64674: LD_VAR 0 6
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: MUL
64683: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64684: LD_ADDR_VAR 0 7
64688: PUSH
64689: LD_VAR 0 2
64693: PUSH
64694: LD_VAR 0 4
64698: PLUS
64699: PUSH
64700: LD_INT 2
64702: DIV
64703: ST_TO_ADDR
// if _y < 0 then
64704: LD_VAR 0 7
64708: PUSH
64709: LD_INT 0
64711: LESS
64712: IFFALSE 64729
// _y := _y * - 1 ;
64714: LD_ADDR_VAR 0 7
64718: PUSH
64719: LD_VAR 0 7
64723: PUSH
64724: LD_INT 1
64726: NEG
64727: MUL
64728: ST_TO_ADDR
// result := [ _x , _y ] ;
64729: LD_ADDR_VAR 0 5
64733: PUSH
64734: LD_VAR 0 6
64738: PUSH
64739: LD_VAR 0 7
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: ST_TO_ADDR
// end ;
64748: LD_VAR 0 5
64752: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64753: LD_INT 0
64755: PPUSH
64756: PPUSH
64757: PPUSH
64758: PPUSH
// task := GetTaskList ( unit ) ;
64759: LD_ADDR_VAR 0 7
64763: PUSH
64764: LD_VAR 0 1
64768: PPUSH
64769: CALL_OW 437
64773: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64774: LD_VAR 0 7
64778: NOT
64779: PUSH
64780: LD_VAR 0 1
64784: PPUSH
64785: LD_VAR 0 2
64789: PPUSH
64790: CALL_OW 308
64794: NOT
64795: AND
64796: IFFALSE 64800
// exit ;
64798: GO 64918
// if IsInArea ( unit , area ) then
64800: LD_VAR 0 1
64804: PPUSH
64805: LD_VAR 0 2
64809: PPUSH
64810: CALL_OW 308
64814: IFFALSE 64832
// begin ComMoveToArea ( unit , goAway ) ;
64816: LD_VAR 0 1
64820: PPUSH
64821: LD_VAR 0 3
64825: PPUSH
64826: CALL_OW 113
// exit ;
64830: GO 64918
// end ; if task [ 1 ] [ 1 ] <> M then
64832: LD_VAR 0 7
64836: PUSH
64837: LD_INT 1
64839: ARRAY
64840: PUSH
64841: LD_INT 1
64843: ARRAY
64844: PUSH
64845: LD_STRING M
64847: NONEQUAL
64848: IFFALSE 64852
// exit ;
64850: GO 64918
// x := task [ 1 ] [ 2 ] ;
64852: LD_ADDR_VAR 0 5
64856: PUSH
64857: LD_VAR 0 7
64861: PUSH
64862: LD_INT 1
64864: ARRAY
64865: PUSH
64866: LD_INT 2
64868: ARRAY
64869: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64870: LD_ADDR_VAR 0 6
64874: PUSH
64875: LD_VAR 0 7
64879: PUSH
64880: LD_INT 1
64882: ARRAY
64883: PUSH
64884: LD_INT 3
64886: ARRAY
64887: ST_TO_ADDR
// if InArea ( x , y , area ) then
64888: LD_VAR 0 5
64892: PPUSH
64893: LD_VAR 0 6
64897: PPUSH
64898: LD_VAR 0 2
64902: PPUSH
64903: CALL_OW 309
64907: IFFALSE 64918
// ComStop ( unit ) ;
64909: LD_VAR 0 1
64913: PPUSH
64914: CALL_OW 141
// end ;
64918: LD_VAR 0 4
64922: RET
// export function Abs ( value ) ; begin
64923: LD_INT 0
64925: PPUSH
// result := value ;
64926: LD_ADDR_VAR 0 2
64930: PUSH
64931: LD_VAR 0 1
64935: ST_TO_ADDR
// if value < 0 then
64936: LD_VAR 0 1
64940: PUSH
64941: LD_INT 0
64943: LESS
64944: IFFALSE 64961
// result := value * - 1 ;
64946: LD_ADDR_VAR 0 2
64950: PUSH
64951: LD_VAR 0 1
64955: PUSH
64956: LD_INT 1
64958: NEG
64959: MUL
64960: ST_TO_ADDR
// end ;
64961: LD_VAR 0 2
64965: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64966: LD_INT 0
64968: PPUSH
64969: PPUSH
64970: PPUSH
64971: PPUSH
64972: PPUSH
64973: PPUSH
64974: PPUSH
64975: PPUSH
// if not unit or not building then
64976: LD_VAR 0 1
64980: NOT
64981: PUSH
64982: LD_VAR 0 2
64986: NOT
64987: OR
64988: IFFALSE 64992
// exit ;
64990: GO 65218
// x := GetX ( building ) ;
64992: LD_ADDR_VAR 0 4
64996: PUSH
64997: LD_VAR 0 2
65001: PPUSH
65002: CALL_OW 250
65006: ST_TO_ADDR
// y := GetY ( building ) ;
65007: LD_ADDR_VAR 0 6
65011: PUSH
65012: LD_VAR 0 2
65016: PPUSH
65017: CALL_OW 251
65021: ST_TO_ADDR
// d := GetDir ( building ) ;
65022: LD_ADDR_VAR 0 8
65026: PUSH
65027: LD_VAR 0 2
65031: PPUSH
65032: CALL_OW 254
65036: ST_TO_ADDR
// r := 4 ;
65037: LD_ADDR_VAR 0 9
65041: PUSH
65042: LD_INT 4
65044: ST_TO_ADDR
// for i := 1 to 5 do
65045: LD_ADDR_VAR 0 10
65049: PUSH
65050: DOUBLE
65051: LD_INT 1
65053: DEC
65054: ST_TO_ADDR
65055: LD_INT 5
65057: PUSH
65058: FOR_TO
65059: IFFALSE 65216
// begin _x := ShiftX ( x , d , r + i ) ;
65061: LD_ADDR_VAR 0 5
65065: PUSH
65066: LD_VAR 0 4
65070: PPUSH
65071: LD_VAR 0 8
65075: PPUSH
65076: LD_VAR 0 9
65080: PUSH
65081: LD_VAR 0 10
65085: PLUS
65086: PPUSH
65087: CALL_OW 272
65091: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65092: LD_ADDR_VAR 0 7
65096: PUSH
65097: LD_VAR 0 6
65101: PPUSH
65102: LD_VAR 0 8
65106: PPUSH
65107: LD_VAR 0 9
65111: PUSH
65112: LD_VAR 0 10
65116: PLUS
65117: PPUSH
65118: CALL_OW 273
65122: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65123: LD_VAR 0 5
65127: PPUSH
65128: LD_VAR 0 7
65132: PPUSH
65133: CALL_OW 488
65137: PUSH
65138: LD_VAR 0 5
65142: PPUSH
65143: LD_VAR 0 7
65147: PPUSH
65148: CALL_OW 428
65152: PPUSH
65153: CALL_OW 247
65157: PUSH
65158: LD_INT 3
65160: PUSH
65161: LD_INT 2
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: IN
65168: NOT
65169: AND
65170: IFFALSE 65214
// begin ComMoveXY ( unit , _x , _y ) ;
65172: LD_VAR 0 1
65176: PPUSH
65177: LD_VAR 0 5
65181: PPUSH
65182: LD_VAR 0 7
65186: PPUSH
65187: CALL_OW 111
// result := [ _x , _y ] ;
65191: LD_ADDR_VAR 0 3
65195: PUSH
65196: LD_VAR 0 5
65200: PUSH
65201: LD_VAR 0 7
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: ST_TO_ADDR
// exit ;
65210: POP
65211: POP
65212: GO 65218
// end ; end ;
65214: GO 65058
65216: POP
65217: POP
// end ;
65218: LD_VAR 0 3
65222: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65223: LD_INT 0
65225: PPUSH
65226: PPUSH
65227: PPUSH
// result := 0 ;
65228: LD_ADDR_VAR 0 3
65232: PUSH
65233: LD_INT 0
65235: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65236: LD_VAR 0 1
65240: PUSH
65241: LD_INT 0
65243: LESS
65244: PUSH
65245: LD_VAR 0 1
65249: PUSH
65250: LD_INT 8
65252: GREATER
65253: OR
65254: PUSH
65255: LD_VAR 0 2
65259: PUSH
65260: LD_INT 0
65262: LESS
65263: OR
65264: PUSH
65265: LD_VAR 0 2
65269: PUSH
65270: LD_INT 8
65272: GREATER
65273: OR
65274: IFFALSE 65278
// exit ;
65276: GO 65353
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65278: LD_ADDR_VAR 0 4
65282: PUSH
65283: LD_INT 22
65285: PUSH
65286: LD_VAR 0 2
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PPUSH
65295: CALL_OW 69
65299: PUSH
65300: FOR_IN
65301: IFFALSE 65351
// begin un := UnitShoot ( i ) ;
65303: LD_ADDR_VAR 0 5
65307: PUSH
65308: LD_VAR 0 4
65312: PPUSH
65313: CALL_OW 504
65317: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65318: LD_VAR 0 5
65322: PPUSH
65323: CALL_OW 255
65327: PUSH
65328: LD_VAR 0 1
65332: EQUAL
65333: IFFALSE 65349
// begin result := un ;
65335: LD_ADDR_VAR 0 3
65339: PUSH
65340: LD_VAR 0 5
65344: ST_TO_ADDR
// exit ;
65345: POP
65346: POP
65347: GO 65353
// end ; end ;
65349: GO 65300
65351: POP
65352: POP
// end ;
65353: LD_VAR 0 3
65357: RET
// export function GetCargoBay ( units ) ; begin
65358: LD_INT 0
65360: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65361: LD_ADDR_VAR 0 2
65365: PUSH
65366: LD_VAR 0 1
65370: PPUSH
65371: LD_INT 2
65373: PUSH
65374: LD_INT 34
65376: PUSH
65377: LD_INT 12
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 34
65386: PUSH
65387: LD_INT 51
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 34
65396: PUSH
65397: LD_INT 32
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 34
65406: PUSH
65407: LD_INT 89
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: PPUSH
65421: CALL_OW 72
65425: ST_TO_ADDR
// end ;
65426: LD_VAR 0 2
65430: RET
// export function Negate ( value ) ; begin
65431: LD_INT 0
65433: PPUSH
// result := not value ;
65434: LD_ADDR_VAR 0 2
65438: PUSH
65439: LD_VAR 0 1
65443: NOT
65444: ST_TO_ADDR
// end ;
65445: LD_VAR 0 2
65449: RET
// export function Inc ( value ) ; begin
65450: LD_INT 0
65452: PPUSH
// result := value + 1 ;
65453: LD_ADDR_VAR 0 2
65457: PUSH
65458: LD_VAR 0 1
65462: PUSH
65463: LD_INT 1
65465: PLUS
65466: ST_TO_ADDR
// end ;
65467: LD_VAR 0 2
65471: RET
// export function Dec ( value ) ; begin
65472: LD_INT 0
65474: PPUSH
// result := value - 1 ;
65475: LD_ADDR_VAR 0 2
65479: PUSH
65480: LD_VAR 0 1
65484: PUSH
65485: LD_INT 1
65487: MINUS
65488: ST_TO_ADDR
// end ;
65489: LD_VAR 0 2
65493: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65494: LD_INT 0
65496: PPUSH
65497: PPUSH
65498: PPUSH
65499: PPUSH
65500: PPUSH
65501: PPUSH
65502: PPUSH
65503: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65504: LD_VAR 0 1
65508: PPUSH
65509: LD_VAR 0 2
65513: PPUSH
65514: CALL_OW 488
65518: NOT
65519: PUSH
65520: LD_VAR 0 3
65524: PPUSH
65525: LD_VAR 0 4
65529: PPUSH
65530: CALL_OW 488
65534: NOT
65535: OR
65536: IFFALSE 65549
// begin result := - 1 ;
65538: LD_ADDR_VAR 0 5
65542: PUSH
65543: LD_INT 1
65545: NEG
65546: ST_TO_ADDR
// exit ;
65547: GO 65784
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65549: LD_ADDR_VAR 0 12
65553: PUSH
65554: LD_VAR 0 1
65558: PPUSH
65559: LD_VAR 0 2
65563: PPUSH
65564: LD_VAR 0 3
65568: PPUSH
65569: LD_VAR 0 4
65573: PPUSH
65574: CALL 64634 0 4
65578: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65579: LD_ADDR_VAR 0 11
65583: PUSH
65584: LD_VAR 0 1
65588: PPUSH
65589: LD_VAR 0 2
65593: PPUSH
65594: LD_VAR 0 12
65598: PUSH
65599: LD_INT 1
65601: ARRAY
65602: PPUSH
65603: LD_VAR 0 12
65607: PUSH
65608: LD_INT 2
65610: ARRAY
65611: PPUSH
65612: CALL_OW 298
65616: ST_TO_ADDR
// distance := 9999 ;
65617: LD_ADDR_VAR 0 10
65621: PUSH
65622: LD_INT 9999
65624: ST_TO_ADDR
// for i := 0 to 5 do
65625: LD_ADDR_VAR 0 6
65629: PUSH
65630: DOUBLE
65631: LD_INT 0
65633: DEC
65634: ST_TO_ADDR
65635: LD_INT 5
65637: PUSH
65638: FOR_TO
65639: IFFALSE 65782
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65641: LD_ADDR_VAR 0 7
65645: PUSH
65646: LD_VAR 0 1
65650: PPUSH
65651: LD_VAR 0 6
65655: PPUSH
65656: LD_VAR 0 11
65660: PPUSH
65661: CALL_OW 272
65665: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65666: LD_ADDR_VAR 0 8
65670: PUSH
65671: LD_VAR 0 2
65675: PPUSH
65676: LD_VAR 0 6
65680: PPUSH
65681: LD_VAR 0 11
65685: PPUSH
65686: CALL_OW 273
65690: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65691: LD_VAR 0 7
65695: PPUSH
65696: LD_VAR 0 8
65700: PPUSH
65701: CALL_OW 488
65705: NOT
65706: IFFALSE 65710
// continue ;
65708: GO 65638
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65710: LD_ADDR_VAR 0 9
65714: PUSH
65715: LD_VAR 0 12
65719: PUSH
65720: LD_INT 1
65722: ARRAY
65723: PPUSH
65724: LD_VAR 0 12
65728: PUSH
65729: LD_INT 2
65731: ARRAY
65732: PPUSH
65733: LD_VAR 0 7
65737: PPUSH
65738: LD_VAR 0 8
65742: PPUSH
65743: CALL_OW 298
65747: ST_TO_ADDR
// if tmp < distance then
65748: LD_VAR 0 9
65752: PUSH
65753: LD_VAR 0 10
65757: LESS
65758: IFFALSE 65780
// begin result := i ;
65760: LD_ADDR_VAR 0 5
65764: PUSH
65765: LD_VAR 0 6
65769: ST_TO_ADDR
// distance := tmp ;
65770: LD_ADDR_VAR 0 10
65774: PUSH
65775: LD_VAR 0 9
65779: ST_TO_ADDR
// end ; end ;
65780: GO 65638
65782: POP
65783: POP
// end ;
65784: LD_VAR 0 5
65788: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65789: LD_INT 0
65791: PPUSH
65792: PPUSH
// if not driver or not IsInUnit ( driver ) then
65793: LD_VAR 0 1
65797: NOT
65798: PUSH
65799: LD_VAR 0 1
65803: PPUSH
65804: CALL_OW 310
65808: NOT
65809: OR
65810: IFFALSE 65814
// exit ;
65812: GO 65904
// vehicle := IsInUnit ( driver ) ;
65814: LD_ADDR_VAR 0 3
65818: PUSH
65819: LD_VAR 0 1
65823: PPUSH
65824: CALL_OW 310
65828: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65829: LD_VAR 0 1
65833: PPUSH
65834: LD_STRING \
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: LD_INT 0
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: PUSH
65864: LD_STRING E
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: LD_VAR 0 3
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PPUSH
65900: CALL_OW 446
// end ;
65904: LD_VAR 0 2
65908: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65909: LD_INT 0
65911: PPUSH
65912: PPUSH
// if not driver or not IsInUnit ( driver ) then
65913: LD_VAR 0 1
65917: NOT
65918: PUSH
65919: LD_VAR 0 1
65923: PPUSH
65924: CALL_OW 310
65928: NOT
65929: OR
65930: IFFALSE 65934
// exit ;
65932: GO 66024
// vehicle := IsInUnit ( driver ) ;
65934: LD_ADDR_VAR 0 3
65938: PUSH
65939: LD_VAR 0 1
65943: PPUSH
65944: CALL_OW 310
65948: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65949: LD_VAR 0 1
65953: PPUSH
65954: LD_STRING \
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: LD_INT 0
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: PUSH
65984: LD_STRING E
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: LD_VAR 0 3
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PPUSH
66020: CALL_OW 447
// end ;
66024: LD_VAR 0 2
66028: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66029: LD_INT 0
66031: PPUSH
66032: PPUSH
66033: PPUSH
// tmp := [ ] ;
66034: LD_ADDR_VAR 0 5
66038: PUSH
66039: EMPTY
66040: ST_TO_ADDR
// for i in units do
66041: LD_ADDR_VAR 0 4
66045: PUSH
66046: LD_VAR 0 1
66050: PUSH
66051: FOR_IN
66052: IFFALSE 66090
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66054: LD_ADDR_VAR 0 5
66058: PUSH
66059: LD_VAR 0 5
66063: PPUSH
66064: LD_VAR 0 5
66068: PUSH
66069: LD_INT 1
66071: PLUS
66072: PPUSH
66073: LD_VAR 0 4
66077: PPUSH
66078: CALL_OW 256
66082: PPUSH
66083: CALL_OW 2
66087: ST_TO_ADDR
66088: GO 66051
66090: POP
66091: POP
// if not tmp then
66092: LD_VAR 0 5
66096: NOT
66097: IFFALSE 66101
// exit ;
66099: GO 66149
// if asc then
66101: LD_VAR 0 2
66105: IFFALSE 66129
// result := SortListByListAsc ( units , tmp ) else
66107: LD_ADDR_VAR 0 3
66111: PUSH
66112: LD_VAR 0 1
66116: PPUSH
66117: LD_VAR 0 5
66121: PPUSH
66122: CALL_OW 76
66126: ST_TO_ADDR
66127: GO 66149
// result := SortListByListDesc ( units , tmp ) ;
66129: LD_ADDR_VAR 0 3
66133: PUSH
66134: LD_VAR 0 1
66138: PPUSH
66139: LD_VAR 0 5
66143: PPUSH
66144: CALL_OW 77
66148: ST_TO_ADDR
// end ;
66149: LD_VAR 0 3
66153: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66154: LD_INT 0
66156: PPUSH
66157: PPUSH
// task := GetTaskList ( mech ) ;
66158: LD_ADDR_VAR 0 4
66162: PUSH
66163: LD_VAR 0 1
66167: PPUSH
66168: CALL_OW 437
66172: ST_TO_ADDR
// if not task then
66173: LD_VAR 0 4
66177: NOT
66178: IFFALSE 66182
// exit ;
66180: GO 66224
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66182: LD_ADDR_VAR 0 3
66186: PUSH
66187: LD_VAR 0 4
66191: PUSH
66192: LD_INT 1
66194: ARRAY
66195: PUSH
66196: LD_INT 1
66198: ARRAY
66199: PUSH
66200: LD_STRING r
66202: EQUAL
66203: PUSH
66204: LD_VAR 0 4
66208: PUSH
66209: LD_INT 1
66211: ARRAY
66212: PUSH
66213: LD_INT 4
66215: ARRAY
66216: PUSH
66217: LD_VAR 0 2
66221: EQUAL
66222: AND
66223: ST_TO_ADDR
// end ;
66224: LD_VAR 0 3
66228: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66229: LD_INT 0
66231: PPUSH
// SetDir ( unit , d ) ;
66232: LD_VAR 0 1
66236: PPUSH
66237: LD_VAR 0 4
66241: PPUSH
66242: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66246: LD_VAR 0 1
66250: PPUSH
66251: LD_VAR 0 2
66255: PPUSH
66256: LD_VAR 0 3
66260: PPUSH
66261: LD_VAR 0 5
66265: PPUSH
66266: CALL_OW 48
// end ;
66270: LD_VAR 0 6
66274: RET
// export function ToNaturalNumber ( number ) ; begin
66275: LD_INT 0
66277: PPUSH
// result := number div 1 ;
66278: LD_ADDR_VAR 0 2
66282: PUSH
66283: LD_VAR 0 1
66287: PUSH
66288: LD_INT 1
66290: DIV
66291: ST_TO_ADDR
// if number < 0 then
66292: LD_VAR 0 1
66296: PUSH
66297: LD_INT 0
66299: LESS
66300: IFFALSE 66310
// result := 0 ;
66302: LD_ADDR_VAR 0 2
66306: PUSH
66307: LD_INT 0
66309: ST_TO_ADDR
// end ;
66310: LD_VAR 0 2
66314: RET
// export function SortByClass ( units , class ) ; var un ; begin
66315: LD_INT 0
66317: PPUSH
66318: PPUSH
// if not units or not class then
66319: LD_VAR 0 1
66323: NOT
66324: PUSH
66325: LD_VAR 0 2
66329: NOT
66330: OR
66331: IFFALSE 66335
// exit ;
66333: GO 66430
// result := [ ] ;
66335: LD_ADDR_VAR 0 3
66339: PUSH
66340: EMPTY
66341: ST_TO_ADDR
// for un in units do
66342: LD_ADDR_VAR 0 4
66346: PUSH
66347: LD_VAR 0 1
66351: PUSH
66352: FOR_IN
66353: IFFALSE 66428
// if GetClass ( un ) = class then
66355: LD_VAR 0 4
66359: PPUSH
66360: CALL_OW 257
66364: PUSH
66365: LD_VAR 0 2
66369: EQUAL
66370: IFFALSE 66397
// result := Insert ( result , 1 , un ) else
66372: LD_ADDR_VAR 0 3
66376: PUSH
66377: LD_VAR 0 3
66381: PPUSH
66382: LD_INT 1
66384: PPUSH
66385: LD_VAR 0 4
66389: PPUSH
66390: CALL_OW 2
66394: ST_TO_ADDR
66395: GO 66426
// result := Replace ( result , result + 1 , un ) ;
66397: LD_ADDR_VAR 0 3
66401: PUSH
66402: LD_VAR 0 3
66406: PPUSH
66407: LD_VAR 0 3
66411: PUSH
66412: LD_INT 1
66414: PLUS
66415: PPUSH
66416: LD_VAR 0 4
66420: PPUSH
66421: CALL_OW 1
66425: ST_TO_ADDR
66426: GO 66352
66428: POP
66429: POP
// end ;
66430: LD_VAR 0 3
66434: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66435: LD_INT 0
66437: PPUSH
66438: PPUSH
66439: PPUSH
66440: PPUSH
66441: PPUSH
66442: PPUSH
66443: PPUSH
// result := [ ] ;
66444: LD_ADDR_VAR 0 4
66448: PUSH
66449: EMPTY
66450: ST_TO_ADDR
// if x - r < 0 then
66451: LD_VAR 0 1
66455: PUSH
66456: LD_VAR 0 3
66460: MINUS
66461: PUSH
66462: LD_INT 0
66464: LESS
66465: IFFALSE 66477
// min_x := 0 else
66467: LD_ADDR_VAR 0 8
66471: PUSH
66472: LD_INT 0
66474: ST_TO_ADDR
66475: GO 66493
// min_x := x - r ;
66477: LD_ADDR_VAR 0 8
66481: PUSH
66482: LD_VAR 0 1
66486: PUSH
66487: LD_VAR 0 3
66491: MINUS
66492: ST_TO_ADDR
// if y - r < 0 then
66493: LD_VAR 0 2
66497: PUSH
66498: LD_VAR 0 3
66502: MINUS
66503: PUSH
66504: LD_INT 0
66506: LESS
66507: IFFALSE 66519
// min_y := 0 else
66509: LD_ADDR_VAR 0 7
66513: PUSH
66514: LD_INT 0
66516: ST_TO_ADDR
66517: GO 66535
// min_y := y - r ;
66519: LD_ADDR_VAR 0 7
66523: PUSH
66524: LD_VAR 0 2
66528: PUSH
66529: LD_VAR 0 3
66533: MINUS
66534: ST_TO_ADDR
// max_x := x + r ;
66535: LD_ADDR_VAR 0 9
66539: PUSH
66540: LD_VAR 0 1
66544: PUSH
66545: LD_VAR 0 3
66549: PLUS
66550: ST_TO_ADDR
// max_y := y + r ;
66551: LD_ADDR_VAR 0 10
66555: PUSH
66556: LD_VAR 0 2
66560: PUSH
66561: LD_VAR 0 3
66565: PLUS
66566: ST_TO_ADDR
// for _x = min_x to max_x do
66567: LD_ADDR_VAR 0 5
66571: PUSH
66572: DOUBLE
66573: LD_VAR 0 8
66577: DEC
66578: ST_TO_ADDR
66579: LD_VAR 0 9
66583: PUSH
66584: FOR_TO
66585: IFFALSE 66686
// for _y = min_y to max_y do
66587: LD_ADDR_VAR 0 6
66591: PUSH
66592: DOUBLE
66593: LD_VAR 0 7
66597: DEC
66598: ST_TO_ADDR
66599: LD_VAR 0 10
66603: PUSH
66604: FOR_TO
66605: IFFALSE 66682
// begin if not ValidHex ( _x , _y ) then
66607: LD_VAR 0 5
66611: PPUSH
66612: LD_VAR 0 6
66616: PPUSH
66617: CALL_OW 488
66621: NOT
66622: IFFALSE 66626
// continue ;
66624: GO 66604
// if GetResourceTypeXY ( _x , _y ) then
66626: LD_VAR 0 5
66630: PPUSH
66631: LD_VAR 0 6
66635: PPUSH
66636: CALL_OW 283
66640: IFFALSE 66680
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66642: LD_ADDR_VAR 0 4
66646: PUSH
66647: LD_VAR 0 4
66651: PPUSH
66652: LD_VAR 0 4
66656: PUSH
66657: LD_INT 1
66659: PLUS
66660: PPUSH
66661: LD_VAR 0 5
66665: PUSH
66666: LD_VAR 0 6
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PPUSH
66675: CALL_OW 1
66679: ST_TO_ADDR
// end ;
66680: GO 66604
66682: POP
66683: POP
66684: GO 66584
66686: POP
66687: POP
// end ;
66688: LD_VAR 0 4
66692: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66693: LD_INT 0
66695: PPUSH
66696: PPUSH
66697: PPUSH
66698: PPUSH
66699: PPUSH
66700: PPUSH
66701: PPUSH
66702: PPUSH
// if not units then
66703: LD_VAR 0 1
66707: NOT
66708: IFFALSE 66712
// exit ;
66710: GO 67240
// result := UnitFilter ( units , [ f_ok ] ) ;
66712: LD_ADDR_VAR 0 3
66716: PUSH
66717: LD_VAR 0 1
66721: PPUSH
66722: LD_INT 50
66724: PUSH
66725: EMPTY
66726: LIST
66727: PPUSH
66728: CALL_OW 72
66732: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66733: LD_ADDR_VAR 0 8
66737: PUSH
66738: LD_VAR 0 1
66742: PUSH
66743: LD_INT 1
66745: ARRAY
66746: PPUSH
66747: CALL_OW 255
66751: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66752: LD_ADDR_VAR 0 10
66756: PUSH
66757: LD_INT 29
66759: PUSH
66760: LD_INT 91
66762: PUSH
66763: LD_INT 49
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: LIST
66770: ST_TO_ADDR
// if not result then
66771: LD_VAR 0 3
66775: NOT
66776: IFFALSE 66780
// exit ;
66778: GO 67240
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66780: LD_ADDR_VAR 0 5
66784: PUSH
66785: LD_INT 81
66787: PUSH
66788: LD_VAR 0 8
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PPUSH
66797: CALL_OW 69
66801: ST_TO_ADDR
// for i in result do
66802: LD_ADDR_VAR 0 4
66806: PUSH
66807: LD_VAR 0 3
66811: PUSH
66812: FOR_IN
66813: IFFALSE 67238
// begin tag := GetTag ( i ) + 1 ;
66815: LD_ADDR_VAR 0 9
66819: PUSH
66820: LD_VAR 0 4
66824: PPUSH
66825: CALL_OW 110
66829: PUSH
66830: LD_INT 1
66832: PLUS
66833: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
66834: LD_ADDR_VAR 0 7
66838: PUSH
66839: LD_VAR 0 4
66843: PPUSH
66844: CALL_OW 250
66848: PPUSH
66849: LD_VAR 0 4
66853: PPUSH
66854: CALL_OW 251
66858: PPUSH
66859: LD_INT 4
66861: PPUSH
66862: CALL 66435 0 3
66866: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
66867: LD_VAR 0 4
66871: PPUSH
66872: CALL_OW 247
66876: PUSH
66877: LD_INT 2
66879: EQUAL
66880: PUSH
66881: LD_VAR 0 7
66885: PUSH
66886: LD_INT 2
66888: GREATER
66889: AND
66890: PUSH
66891: LD_VAR 0 4
66895: PPUSH
66896: CALL_OW 264
66900: PUSH
66901: LD_VAR 0 10
66905: IN
66906: NOT
66907: AND
66908: IFFALSE 66947
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66910: LD_VAR 0 4
66914: PPUSH
66915: LD_VAR 0 7
66919: PUSH
66920: LD_INT 1
66922: ARRAY
66923: PUSH
66924: LD_INT 1
66926: ARRAY
66927: PPUSH
66928: LD_VAR 0 7
66932: PUSH
66933: LD_INT 1
66935: ARRAY
66936: PUSH
66937: LD_INT 2
66939: ARRAY
66940: PPUSH
66941: CALL_OW 116
66945: GO 67236
// if path > tag then
66947: LD_VAR 0 2
66951: PUSH
66952: LD_VAR 0 9
66956: GREATER
66957: IFFALSE 67165
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66959: LD_ADDR_VAR 0 6
66963: PUSH
66964: LD_VAR 0 5
66968: PPUSH
66969: LD_INT 91
66971: PUSH
66972: LD_VAR 0 4
66976: PUSH
66977: LD_INT 8
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: LIST
66984: PPUSH
66985: CALL_OW 72
66989: ST_TO_ADDR
// if nearEnemy then
66990: LD_VAR 0 6
66994: IFFALSE 67063
// begin if GetWeapon ( i ) = ru_time_lapser then
66996: LD_VAR 0 4
67000: PPUSH
67001: CALL_OW 264
67005: PUSH
67006: LD_INT 49
67008: EQUAL
67009: IFFALSE 67037
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67011: LD_VAR 0 4
67015: PPUSH
67016: LD_VAR 0 6
67020: PPUSH
67021: LD_VAR 0 4
67025: PPUSH
67026: CALL_OW 74
67030: PPUSH
67031: CALL_OW 112
67035: GO 67061
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67037: LD_VAR 0 4
67041: PPUSH
67042: LD_VAR 0 6
67046: PPUSH
67047: LD_VAR 0 4
67051: PPUSH
67052: CALL_OW 74
67056: PPUSH
67057: CALL 68311 0 2
// end else
67061: GO 67163
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67063: LD_VAR 0 4
67067: PPUSH
67068: LD_VAR 0 2
67072: PUSH
67073: LD_VAR 0 9
67077: ARRAY
67078: PUSH
67079: LD_INT 1
67081: ARRAY
67082: PPUSH
67083: LD_VAR 0 2
67087: PUSH
67088: LD_VAR 0 9
67092: ARRAY
67093: PUSH
67094: LD_INT 2
67096: ARRAY
67097: PPUSH
67098: CALL_OW 297
67102: PUSH
67103: LD_INT 6
67105: GREATER
67106: IFFALSE 67149
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67108: LD_VAR 0 4
67112: PPUSH
67113: LD_VAR 0 2
67117: PUSH
67118: LD_VAR 0 9
67122: ARRAY
67123: PUSH
67124: LD_INT 1
67126: ARRAY
67127: PPUSH
67128: LD_VAR 0 2
67132: PUSH
67133: LD_VAR 0 9
67137: ARRAY
67138: PUSH
67139: LD_INT 2
67141: ARRAY
67142: PPUSH
67143: CALL_OW 114
67147: GO 67163
// SetTag ( i , tag ) ;
67149: LD_VAR 0 4
67153: PPUSH
67154: LD_VAR 0 9
67158: PPUSH
67159: CALL_OW 109
// end else
67163: GO 67236
// if enemy then
67165: LD_VAR 0 5
67169: IFFALSE 67236
// begin if GetWeapon ( i ) = ru_time_lapser then
67171: LD_VAR 0 4
67175: PPUSH
67176: CALL_OW 264
67180: PUSH
67181: LD_INT 49
67183: EQUAL
67184: IFFALSE 67212
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67186: LD_VAR 0 4
67190: PPUSH
67191: LD_VAR 0 5
67195: PPUSH
67196: LD_VAR 0 4
67200: PPUSH
67201: CALL_OW 74
67205: PPUSH
67206: CALL_OW 112
67210: GO 67236
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67212: LD_VAR 0 4
67216: PPUSH
67217: LD_VAR 0 5
67221: PPUSH
67222: LD_VAR 0 4
67226: PPUSH
67227: CALL_OW 74
67231: PPUSH
67232: CALL 68311 0 2
// end ; end ;
67236: GO 66812
67238: POP
67239: POP
// end ;
67240: LD_VAR 0 3
67244: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67245: LD_INT 0
67247: PPUSH
67248: PPUSH
67249: PPUSH
// if not unit or IsInUnit ( unit ) then
67250: LD_VAR 0 1
67254: NOT
67255: PUSH
67256: LD_VAR 0 1
67260: PPUSH
67261: CALL_OW 310
67265: OR
67266: IFFALSE 67270
// exit ;
67268: GO 67361
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67270: LD_ADDR_VAR 0 4
67274: PUSH
67275: LD_VAR 0 1
67279: PPUSH
67280: CALL_OW 250
67284: PPUSH
67285: LD_VAR 0 2
67289: PPUSH
67290: LD_INT 1
67292: PPUSH
67293: CALL_OW 272
67297: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67298: LD_ADDR_VAR 0 5
67302: PUSH
67303: LD_VAR 0 1
67307: PPUSH
67308: CALL_OW 251
67312: PPUSH
67313: LD_VAR 0 2
67317: PPUSH
67318: LD_INT 1
67320: PPUSH
67321: CALL_OW 273
67325: ST_TO_ADDR
// if ValidHex ( x , y ) then
67326: LD_VAR 0 4
67330: PPUSH
67331: LD_VAR 0 5
67335: PPUSH
67336: CALL_OW 488
67340: IFFALSE 67361
// ComTurnXY ( unit , x , y ) ;
67342: LD_VAR 0 1
67346: PPUSH
67347: LD_VAR 0 4
67351: PPUSH
67352: LD_VAR 0 5
67356: PPUSH
67357: CALL_OW 118
// end ;
67361: LD_VAR 0 3
67365: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67366: LD_INT 0
67368: PPUSH
67369: PPUSH
// result := false ;
67370: LD_ADDR_VAR 0 3
67374: PUSH
67375: LD_INT 0
67377: ST_TO_ADDR
// if not units then
67378: LD_VAR 0 2
67382: NOT
67383: IFFALSE 67387
// exit ;
67385: GO 67432
// for i in units do
67387: LD_ADDR_VAR 0 4
67391: PUSH
67392: LD_VAR 0 2
67396: PUSH
67397: FOR_IN
67398: IFFALSE 67430
// if See ( side , i ) then
67400: LD_VAR 0 1
67404: PPUSH
67405: LD_VAR 0 4
67409: PPUSH
67410: CALL_OW 292
67414: IFFALSE 67428
// begin result := true ;
67416: LD_ADDR_VAR 0 3
67420: PUSH
67421: LD_INT 1
67423: ST_TO_ADDR
// exit ;
67424: POP
67425: POP
67426: GO 67432
// end ;
67428: GO 67397
67430: POP
67431: POP
// end ;
67432: LD_VAR 0 3
67436: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67437: LD_INT 0
67439: PPUSH
67440: PPUSH
67441: PPUSH
67442: PPUSH
// if not unit or not points then
67443: LD_VAR 0 1
67447: NOT
67448: PUSH
67449: LD_VAR 0 2
67453: NOT
67454: OR
67455: IFFALSE 67459
// exit ;
67457: GO 67549
// dist := 99999 ;
67459: LD_ADDR_VAR 0 5
67463: PUSH
67464: LD_INT 99999
67466: ST_TO_ADDR
// for i in points do
67467: LD_ADDR_VAR 0 4
67471: PUSH
67472: LD_VAR 0 2
67476: PUSH
67477: FOR_IN
67478: IFFALSE 67547
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67480: LD_ADDR_VAR 0 6
67484: PUSH
67485: LD_VAR 0 1
67489: PPUSH
67490: LD_VAR 0 4
67494: PUSH
67495: LD_INT 1
67497: ARRAY
67498: PPUSH
67499: LD_VAR 0 4
67503: PUSH
67504: LD_INT 2
67506: ARRAY
67507: PPUSH
67508: CALL_OW 297
67512: ST_TO_ADDR
// if tmpDist < dist then
67513: LD_VAR 0 6
67517: PUSH
67518: LD_VAR 0 5
67522: LESS
67523: IFFALSE 67545
// begin result := i ;
67525: LD_ADDR_VAR 0 3
67529: PUSH
67530: LD_VAR 0 4
67534: ST_TO_ADDR
// dist := tmpDist ;
67535: LD_ADDR_VAR 0 5
67539: PUSH
67540: LD_VAR 0 6
67544: ST_TO_ADDR
// end ; end ;
67545: GO 67477
67547: POP
67548: POP
// end ;
67549: LD_VAR 0 3
67553: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67554: LD_INT 0
67556: PPUSH
// uc_side := side ;
67557: LD_ADDR_OWVAR 20
67561: PUSH
67562: LD_VAR 0 1
67566: ST_TO_ADDR
// uc_nation := 3 ;
67567: LD_ADDR_OWVAR 21
67571: PUSH
67572: LD_INT 3
67574: ST_TO_ADDR
// vc_chassis := 25 ;
67575: LD_ADDR_OWVAR 37
67579: PUSH
67580: LD_INT 25
67582: ST_TO_ADDR
// vc_engine := engine_siberite ;
67583: LD_ADDR_OWVAR 39
67587: PUSH
67588: LD_INT 3
67590: ST_TO_ADDR
// vc_control := control_computer ;
67591: LD_ADDR_OWVAR 38
67595: PUSH
67596: LD_INT 3
67598: ST_TO_ADDR
// vc_weapon := 59 ;
67599: LD_ADDR_OWVAR 40
67603: PUSH
67604: LD_INT 59
67606: ST_TO_ADDR
// result := CreateVehicle ;
67607: LD_ADDR_VAR 0 5
67611: PUSH
67612: CALL_OW 45
67616: ST_TO_ADDR
// SetDir ( result , d ) ;
67617: LD_VAR 0 5
67621: PPUSH
67622: LD_VAR 0 4
67626: PPUSH
67627: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67631: LD_VAR 0 5
67635: PPUSH
67636: LD_VAR 0 2
67640: PPUSH
67641: LD_VAR 0 3
67645: PPUSH
67646: LD_INT 0
67648: PPUSH
67649: CALL_OW 48
// end ;
67653: LD_VAR 0 5
67657: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67658: LD_INT 0
67660: PPUSH
67661: PPUSH
67662: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67663: LD_ADDR_VAR 0 2
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: LD_INT 0
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67686: LD_VAR 0 1
67690: NOT
67691: PUSH
67692: LD_VAR 0 1
67696: PPUSH
67697: CALL_OW 264
67701: PUSH
67702: LD_INT 12
67704: PUSH
67705: LD_INT 51
67707: PUSH
67708: LD_INT 32
67710: PUSH
67711: LD_INT 89
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: IN
67720: NOT
67721: OR
67722: IFFALSE 67726
// exit ;
67724: GO 67824
// for i := 1 to 3 do
67726: LD_ADDR_VAR 0 3
67730: PUSH
67731: DOUBLE
67732: LD_INT 1
67734: DEC
67735: ST_TO_ADDR
67736: LD_INT 3
67738: PUSH
67739: FOR_TO
67740: IFFALSE 67822
// begin tmp := GetCargo ( cargo , i ) ;
67742: LD_ADDR_VAR 0 4
67746: PUSH
67747: LD_VAR 0 1
67751: PPUSH
67752: LD_VAR 0 3
67756: PPUSH
67757: CALL_OW 289
67761: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67762: LD_ADDR_VAR 0 2
67766: PUSH
67767: LD_VAR 0 2
67771: PPUSH
67772: LD_VAR 0 3
67776: PPUSH
67777: LD_VAR 0 4
67781: PPUSH
67782: CALL_OW 1
67786: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67787: LD_ADDR_VAR 0 2
67791: PUSH
67792: LD_VAR 0 2
67796: PPUSH
67797: LD_INT 4
67799: PPUSH
67800: LD_VAR 0 2
67804: PUSH
67805: LD_INT 4
67807: ARRAY
67808: PUSH
67809: LD_VAR 0 4
67813: PLUS
67814: PPUSH
67815: CALL_OW 1
67819: ST_TO_ADDR
// end ;
67820: GO 67739
67822: POP
67823: POP
// end ;
67824: LD_VAR 0 2
67828: RET
// export function Length ( array ) ; begin
67829: LD_INT 0
67831: PPUSH
// result := array + 0 ;
67832: LD_ADDR_VAR 0 2
67836: PUSH
67837: LD_VAR 0 1
67841: PUSH
67842: LD_INT 0
67844: PLUS
67845: ST_TO_ADDR
// end ;
67846: LD_VAR 0 2
67850: RET
// export function PrepareArray ( array ) ; begin
67851: LD_INT 0
67853: PPUSH
// result := array diff 0 ;
67854: LD_ADDR_VAR 0 2
67858: PUSH
67859: LD_VAR 0 1
67863: PUSH
67864: LD_INT 0
67866: DIFF
67867: ST_TO_ADDR
// if not result [ 1 ] then
67868: LD_VAR 0 2
67872: PUSH
67873: LD_INT 1
67875: ARRAY
67876: NOT
67877: IFFALSE 67897
// result := Delete ( result , 1 ) ;
67879: LD_ADDR_VAR 0 2
67883: PUSH
67884: LD_VAR 0 2
67888: PPUSH
67889: LD_INT 1
67891: PPUSH
67892: CALL_OW 3
67896: ST_TO_ADDR
// end ;
67897: LD_VAR 0 2
67901: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67902: LD_INT 0
67904: PPUSH
67905: PPUSH
67906: PPUSH
67907: PPUSH
// sibRocketRange := 25 ;
67908: LD_ADDR_VAR 0 6
67912: PUSH
67913: LD_INT 25
67915: ST_TO_ADDR
// result := false ;
67916: LD_ADDR_VAR 0 4
67920: PUSH
67921: LD_INT 0
67923: ST_TO_ADDR
// for i := 0 to 5 do
67924: LD_ADDR_VAR 0 5
67928: PUSH
67929: DOUBLE
67930: LD_INT 0
67932: DEC
67933: ST_TO_ADDR
67934: LD_INT 5
67936: PUSH
67937: FOR_TO
67938: IFFALSE 68005
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67940: LD_VAR 0 1
67944: PPUSH
67945: LD_VAR 0 5
67949: PPUSH
67950: LD_VAR 0 6
67954: PPUSH
67955: CALL_OW 272
67959: PPUSH
67960: LD_VAR 0 2
67964: PPUSH
67965: LD_VAR 0 5
67969: PPUSH
67970: LD_VAR 0 6
67974: PPUSH
67975: CALL_OW 273
67979: PPUSH
67980: LD_VAR 0 3
67984: PPUSH
67985: CALL_OW 309
67989: IFFALSE 68003
// begin result := true ;
67991: LD_ADDR_VAR 0 4
67995: PUSH
67996: LD_INT 1
67998: ST_TO_ADDR
// exit ;
67999: POP
68000: POP
68001: GO 68007
// end ;
68003: GO 67937
68005: POP
68006: POP
// end ;
68007: LD_VAR 0 4
68011: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68012: LD_INT 0
68014: PPUSH
68015: PPUSH
68016: PPUSH
// if btype = b_depot then
68017: LD_VAR 0 2
68021: PUSH
68022: LD_INT 0
68024: EQUAL
68025: IFFALSE 68037
// begin result := true ;
68027: LD_ADDR_VAR 0 3
68031: PUSH
68032: LD_INT 1
68034: ST_TO_ADDR
// exit ;
68035: GO 68153
// end ; pom := GetBase ( depot ) ;
68037: LD_ADDR_VAR 0 4
68041: PUSH
68042: LD_VAR 0 1
68046: PPUSH
68047: CALL_OW 274
68051: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68052: LD_ADDR_VAR 0 5
68056: PUSH
68057: LD_VAR 0 2
68061: PPUSH
68062: LD_VAR 0 1
68066: PPUSH
68067: CALL_OW 248
68071: PPUSH
68072: CALL_OW 450
68076: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68077: LD_ADDR_VAR 0 3
68081: PUSH
68082: LD_VAR 0 4
68086: PPUSH
68087: LD_INT 1
68089: PPUSH
68090: CALL_OW 275
68094: PUSH
68095: LD_VAR 0 5
68099: PUSH
68100: LD_INT 1
68102: ARRAY
68103: GREATEREQUAL
68104: PUSH
68105: LD_VAR 0 4
68109: PPUSH
68110: LD_INT 2
68112: PPUSH
68113: CALL_OW 275
68117: PUSH
68118: LD_VAR 0 5
68122: PUSH
68123: LD_INT 2
68125: ARRAY
68126: GREATEREQUAL
68127: AND
68128: PUSH
68129: LD_VAR 0 4
68133: PPUSH
68134: LD_INT 3
68136: PPUSH
68137: CALL_OW 275
68141: PUSH
68142: LD_VAR 0 5
68146: PUSH
68147: LD_INT 3
68149: ARRAY
68150: GREATEREQUAL
68151: AND
68152: ST_TO_ADDR
// end ;
68153: LD_VAR 0 3
68157: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68158: LD_INT 0
68160: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68161: LD_VAR 0 1
68165: PPUSH
68166: LD_VAR 0 2
68170: PPUSH
68171: LD_INT 0
68173: PPUSH
68174: LD_INT 0
68176: PPUSH
68177: LD_INT 1
68179: PPUSH
68180: LD_INT 0
68182: PPUSH
68183: CALL_OW 587
// end ;
68187: LD_VAR 0 3
68191: RET
// export function CenterOnNow ( unit ) ; begin
68192: LD_INT 0
68194: PPUSH
// result := IsInUnit ( unit ) ;
68195: LD_ADDR_VAR 0 2
68199: PUSH
68200: LD_VAR 0 1
68204: PPUSH
68205: CALL_OW 310
68209: ST_TO_ADDR
// if not result then
68210: LD_VAR 0 2
68214: NOT
68215: IFFALSE 68227
// result := unit ;
68217: LD_ADDR_VAR 0 2
68221: PUSH
68222: LD_VAR 0 1
68226: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68227: LD_VAR 0 1
68231: PPUSH
68232: CALL_OW 87
// end ;
68236: LD_VAR 0 2
68240: RET
// export function ComMoveHex ( unit , hex ) ; begin
68241: LD_INT 0
68243: PPUSH
// if not hex then
68244: LD_VAR 0 2
68248: NOT
68249: IFFALSE 68253
// exit ;
68251: GO 68306
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68253: LD_VAR 0 2
68257: PUSH
68258: LD_INT 1
68260: ARRAY
68261: PPUSH
68262: LD_VAR 0 2
68266: PUSH
68267: LD_INT 2
68269: ARRAY
68270: PPUSH
68271: CALL_OW 428
68275: IFFALSE 68279
// exit ;
68277: GO 68306
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68279: LD_VAR 0 1
68283: PPUSH
68284: LD_VAR 0 2
68288: PUSH
68289: LD_INT 1
68291: ARRAY
68292: PPUSH
68293: LD_VAR 0 2
68297: PUSH
68298: LD_INT 2
68300: ARRAY
68301: PPUSH
68302: CALL_OW 111
// end ;
68306: LD_VAR 0 3
68310: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68311: LD_INT 0
68313: PPUSH
68314: PPUSH
68315: PPUSH
// if not unit or not enemy then
68316: LD_VAR 0 1
68320: NOT
68321: PUSH
68322: LD_VAR 0 2
68326: NOT
68327: OR
68328: IFFALSE 68332
// exit ;
68330: GO 68456
// x := GetX ( enemy ) ;
68332: LD_ADDR_VAR 0 4
68336: PUSH
68337: LD_VAR 0 2
68341: PPUSH
68342: CALL_OW 250
68346: ST_TO_ADDR
// y := GetY ( enemy ) ;
68347: LD_ADDR_VAR 0 5
68351: PUSH
68352: LD_VAR 0 2
68356: PPUSH
68357: CALL_OW 251
68361: ST_TO_ADDR
// if ValidHex ( x , y ) then
68362: LD_VAR 0 4
68366: PPUSH
68367: LD_VAR 0 5
68371: PPUSH
68372: CALL_OW 488
68376: IFFALSE 68456
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
68378: LD_VAR 0 2
68382: PPUSH
68383: CALL_OW 247
68387: PUSH
68388: LD_INT 3
68390: PUSH
68391: LD_INT 2
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: IN
68398: PUSH
68399: LD_VAR 0 1
68403: PPUSH
68404: CALL_OW 255
68408: PPUSH
68409: LD_VAR 0 2
68413: PPUSH
68414: CALL_OW 292
68418: OR
68419: IFFALSE 68437
// ComAttackUnit ( unit , enemy ) else
68421: LD_VAR 0 1
68425: PPUSH
68426: LD_VAR 0 2
68430: PPUSH
68431: CALL_OW 115
68435: GO 68456
// ComAgressiveMove ( unit , x , y ) ;
68437: LD_VAR 0 1
68441: PPUSH
68442: LD_VAR 0 4
68446: PPUSH
68447: LD_VAR 0 5
68451: PPUSH
68452: CALL_OW 114
// end ;
68456: LD_VAR 0 3
68460: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
68461: LD_INT 0
68463: PPUSH
68464: PPUSH
68465: PPUSH
// list := AreaToList ( area , 0 ) ;
68466: LD_ADDR_VAR 0 5
68470: PUSH
68471: LD_VAR 0 1
68475: PPUSH
68476: LD_INT 0
68478: PPUSH
68479: CALL_OW 517
68483: ST_TO_ADDR
// if not list then
68484: LD_VAR 0 5
68488: NOT
68489: IFFALSE 68493
// exit ;
68491: GO 68623
// if all then
68493: LD_VAR 0 2
68497: IFFALSE 68585
// begin for i := 1 to list [ 1 ] do
68499: LD_ADDR_VAR 0 4
68503: PUSH
68504: DOUBLE
68505: LD_INT 1
68507: DEC
68508: ST_TO_ADDR
68509: LD_VAR 0 5
68513: PUSH
68514: LD_INT 1
68516: ARRAY
68517: PUSH
68518: FOR_TO
68519: IFFALSE 68581
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
68521: LD_ADDR_VAR 0 3
68525: PUSH
68526: LD_VAR 0 3
68530: PPUSH
68531: LD_VAR 0 3
68535: PUSH
68536: LD_INT 1
68538: PLUS
68539: PPUSH
68540: LD_VAR 0 5
68544: PUSH
68545: LD_INT 1
68547: ARRAY
68548: PUSH
68549: LD_VAR 0 4
68553: ARRAY
68554: PUSH
68555: LD_VAR 0 5
68559: PUSH
68560: LD_INT 2
68562: ARRAY
68563: PUSH
68564: LD_VAR 0 4
68568: ARRAY
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PPUSH
68574: CALL_OW 1
68578: ST_TO_ADDR
68579: GO 68518
68581: POP
68582: POP
// exit ;
68583: GO 68623
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
68585: LD_ADDR_VAR 0 3
68589: PUSH
68590: LD_VAR 0 5
68594: PUSH
68595: LD_INT 1
68597: ARRAY
68598: PUSH
68599: LD_INT 1
68601: ARRAY
68602: PUSH
68603: LD_VAR 0 5
68607: PUSH
68608: LD_INT 2
68610: ARRAY
68611: PUSH
68612: LD_INT 1
68614: ARRAY
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: EMPTY
68621: LIST
68622: ST_TO_ADDR
// end ;
68623: LD_VAR 0 3
68627: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
68628: LD_INT 0
68630: PPUSH
68631: PPUSH
// list := AreaToList ( area , 0 ) ;
68632: LD_ADDR_VAR 0 4
68636: PUSH
68637: LD_VAR 0 1
68641: PPUSH
68642: LD_INT 0
68644: PPUSH
68645: CALL_OW 517
68649: ST_TO_ADDR
// if not list then
68650: LD_VAR 0 4
68654: NOT
68655: IFFALSE 68659
// exit ;
68657: GO 68700
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
68659: LD_ADDR_VAR 0 3
68663: PUSH
68664: LD_VAR 0 4
68668: PUSH
68669: LD_INT 1
68671: ARRAY
68672: PUSH
68673: LD_INT 1
68675: ARRAY
68676: PUSH
68677: LD_VAR 0 4
68681: PUSH
68682: LD_INT 2
68684: ARRAY
68685: PUSH
68686: LD_INT 1
68688: ARRAY
68689: PUSH
68690: LD_VAR 0 2
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: LIST
68699: ST_TO_ADDR
// end ;
68700: LD_VAR 0 3
68704: RET
// export function First ( array ) ; begin
68705: LD_INT 0
68707: PPUSH
// if not array then
68708: LD_VAR 0 1
68712: NOT
68713: IFFALSE 68717
// exit ;
68715: GO 68731
// result := array [ 1 ] ;
68717: LD_ADDR_VAR 0 2
68721: PUSH
68722: LD_VAR 0 1
68726: PUSH
68727: LD_INT 1
68729: ARRAY
68730: ST_TO_ADDR
// end ;
68731: LD_VAR 0 2
68735: RET
// export function Last ( array ) ; begin
68736: LD_INT 0
68738: PPUSH
// if not array then
68739: LD_VAR 0 1
68743: NOT
68744: IFFALSE 68748
// exit ;
68746: GO 68764
// result := array [ array ] ;
68748: LD_ADDR_VAR 0 2
68752: PUSH
68753: LD_VAR 0 1
68757: PUSH
68758: LD_VAR 0 1
68762: ARRAY
68763: ST_TO_ADDR
// end ;
68764: LD_VAR 0 2
68768: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
68769: LD_INT 0
68771: PPUSH
68772: PPUSH
// result := [ ] ;
68773: LD_ADDR_VAR 0 5
68777: PUSH
68778: EMPTY
68779: ST_TO_ADDR
// if not array then
68780: LD_VAR 0 1
68784: NOT
68785: IFFALSE 68789
// exit ;
68787: GO 68901
// for i := 1 to array do
68789: LD_ADDR_VAR 0 6
68793: PUSH
68794: DOUBLE
68795: LD_INT 1
68797: DEC
68798: ST_TO_ADDR
68799: LD_VAR 0 1
68803: PUSH
68804: FOR_TO
68805: IFFALSE 68899
// if array [ i ] [ index ] = value then
68807: LD_VAR 0 1
68811: PUSH
68812: LD_VAR 0 6
68816: ARRAY
68817: PUSH
68818: LD_VAR 0 2
68822: ARRAY
68823: PUSH
68824: LD_VAR 0 3
68828: EQUAL
68829: IFFALSE 68897
// begin if indexColumn then
68831: LD_VAR 0 4
68835: IFFALSE 68871
// result := Join ( result , array [ i ] [ indexColumn ] ) else
68837: LD_ADDR_VAR 0 5
68841: PUSH
68842: LD_VAR 0 5
68846: PPUSH
68847: LD_VAR 0 1
68851: PUSH
68852: LD_VAR 0 6
68856: ARRAY
68857: PUSH
68858: LD_VAR 0 4
68862: ARRAY
68863: PPUSH
68864: CALL 64089 0 2
68868: ST_TO_ADDR
68869: GO 68897
// result := Join ( result , array [ i ] ) ;
68871: LD_ADDR_VAR 0 5
68875: PUSH
68876: LD_VAR 0 5
68880: PPUSH
68881: LD_VAR 0 1
68885: PUSH
68886: LD_VAR 0 6
68890: ARRAY
68891: PPUSH
68892: CALL 64089 0 2
68896: ST_TO_ADDR
// end ;
68897: GO 68804
68899: POP
68900: POP
// end ;
68901: LD_VAR 0 5
68905: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
68906: LD_INT 0
68908: PPUSH
// if not vehicles or not parkingPoint then
68909: LD_VAR 0 1
68913: NOT
68914: PUSH
68915: LD_VAR 0 2
68919: NOT
68920: OR
68921: IFFALSE 68925
// exit ;
68923: GO 69023
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
68925: LD_ADDR_VAR 0 1
68929: PUSH
68930: LD_VAR 0 1
68934: PPUSH
68935: LD_INT 50
68937: PUSH
68938: EMPTY
68939: LIST
68940: PUSH
68941: LD_INT 3
68943: PUSH
68944: LD_INT 92
68946: PUSH
68947: LD_VAR 0 2
68951: PUSH
68952: LD_INT 1
68954: ARRAY
68955: PUSH
68956: LD_VAR 0 2
68960: PUSH
68961: LD_INT 2
68963: ARRAY
68964: PUSH
68965: LD_INT 8
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PPUSH
68982: CALL_OW 72
68986: ST_TO_ADDR
// if not vehicles then
68987: LD_VAR 0 1
68991: NOT
68992: IFFALSE 68996
// exit ;
68994: GO 69023
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
68996: LD_VAR 0 1
69000: PPUSH
69001: LD_VAR 0 2
69005: PUSH
69006: LD_INT 1
69008: ARRAY
69009: PPUSH
69010: LD_VAR 0 2
69014: PUSH
69015: LD_INT 2
69017: ARRAY
69018: PPUSH
69019: CALL_OW 111
// end ;
69023: LD_VAR 0 3
69027: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69028: LD_INT 0
69030: PPUSH
69031: PPUSH
69032: PPUSH
// if not side or not area then
69033: LD_VAR 0 1
69037: NOT
69038: PUSH
69039: LD_VAR 0 2
69043: NOT
69044: OR
69045: IFFALSE 69049
// exit ;
69047: GO 69168
// tmp := AreaToList ( area , 0 ) ;
69049: LD_ADDR_VAR 0 5
69053: PUSH
69054: LD_VAR 0 2
69058: PPUSH
69059: LD_INT 0
69061: PPUSH
69062: CALL_OW 517
69066: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69067: LD_ADDR_VAR 0 4
69071: PUSH
69072: DOUBLE
69073: LD_INT 1
69075: DEC
69076: ST_TO_ADDR
69077: LD_VAR 0 5
69081: PUSH
69082: LD_INT 1
69084: ARRAY
69085: PUSH
69086: FOR_TO
69087: IFFALSE 69166
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69089: LD_VAR 0 5
69093: PUSH
69094: LD_INT 1
69096: ARRAY
69097: PUSH
69098: LD_VAR 0 4
69102: ARRAY
69103: PPUSH
69104: LD_VAR 0 5
69108: PUSH
69109: LD_INT 2
69111: ARRAY
69112: PUSH
69113: LD_VAR 0 4
69117: ARRAY
69118: PPUSH
69119: CALL_OW 351
69123: IFFALSE 69164
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69125: LD_VAR 0 5
69129: PUSH
69130: LD_INT 1
69132: ARRAY
69133: PUSH
69134: LD_VAR 0 4
69138: ARRAY
69139: PPUSH
69140: LD_VAR 0 5
69144: PUSH
69145: LD_INT 2
69147: ARRAY
69148: PUSH
69149: LD_VAR 0 4
69153: ARRAY
69154: PPUSH
69155: LD_VAR 0 1
69159: PPUSH
69160: CALL_OW 244
// end ;
69164: GO 69086
69166: POP
69167: POP
// end ; end_of_file
69168: LD_VAR 0 3
69172: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69173: LD_VAR 0 1
69177: PPUSH
69178: LD_VAR 0 2
69182: PPUSH
69183: LD_VAR 0 3
69187: PPUSH
69188: LD_VAR 0 4
69192: PPUSH
69193: LD_VAR 0 5
69197: PPUSH
69198: LD_VAR 0 6
69202: PPUSH
69203: CALL 5135 0 6
// end ;
69207: PPOPN 6
69209: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69210: LD_INT 0
69212: PPUSH
// begin if not units then
69213: LD_VAR 0 1
69217: NOT
69218: IFFALSE 69222
// exit ;
69220: GO 69222
// end ;
69222: PPOPN 7
69224: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69225: CALL 5022 0 0
// end ;
69229: PPOPN 1
69231: END
