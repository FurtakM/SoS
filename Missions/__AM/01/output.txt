// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_sniper ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 5
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_sniper ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 5
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4963: GO 4965
4965: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4966: LD_STRING initStreamRollete();
4968: PPUSH
4969: CALL_OW 559
// InitStreamMode ;
4973: CALL 4982 0 0
// DefineStreamItems ( ) ;
4977: CALL 5422 0 0
// end ;
4981: END
// function InitStreamMode ; begin
4982: LD_INT 0
4984: PPUSH
// streamModeActive := false ;
4985: LD_ADDR_EXP 15
4989: PUSH
4990: LD_INT 0
4992: ST_TO_ADDR
// normalCounter := 36 ;
4993: LD_ADDR_EXP 16
4997: PUSH
4998: LD_INT 36
5000: ST_TO_ADDR
// hardcoreCounter := 16 ;
5001: LD_ADDR_EXP 17
5005: PUSH
5006: LD_INT 16
5008: ST_TO_ADDR
// sRocket := false ;
5009: LD_ADDR_EXP 20
5013: PUSH
5014: LD_INT 0
5016: ST_TO_ADDR
// sSpeed := false ;
5017: LD_ADDR_EXP 19
5021: PUSH
5022: LD_INT 0
5024: ST_TO_ADDR
// sEngine := false ;
5025: LD_ADDR_EXP 21
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
// sSpec := false ;
5033: LD_ADDR_EXP 18
5037: PUSH
5038: LD_INT 0
5040: ST_TO_ADDR
// sLevel := false ;
5041: LD_ADDR_EXP 22
5045: PUSH
5046: LD_INT 0
5048: ST_TO_ADDR
// sArmoury := false ;
5049: LD_ADDR_EXP 23
5053: PUSH
5054: LD_INT 0
5056: ST_TO_ADDR
// sRadar := false ;
5057: LD_ADDR_EXP 24
5061: PUSH
5062: LD_INT 0
5064: ST_TO_ADDR
// sBunker := false ;
5065: LD_ADDR_EXP 25
5069: PUSH
5070: LD_INT 0
5072: ST_TO_ADDR
// sHack := false ;
5073: LD_ADDR_EXP 26
5077: PUSH
5078: LD_INT 0
5080: ST_TO_ADDR
// sFire := false ;
5081: LD_ADDR_EXP 27
5085: PUSH
5086: LD_INT 0
5088: ST_TO_ADDR
// sRefresh := false ;
5089: LD_ADDR_EXP 28
5093: PUSH
5094: LD_INT 0
5096: ST_TO_ADDR
// sExp := false ;
5097: LD_ADDR_EXP 29
5101: PUSH
5102: LD_INT 0
5104: ST_TO_ADDR
// sDepot := false ;
5105: LD_ADDR_EXP 30
5109: PUSH
5110: LD_INT 0
5112: ST_TO_ADDR
// sFlag := false ;
5113: LD_ADDR_EXP 31
5117: PUSH
5118: LD_INT 0
5120: ST_TO_ADDR
// sKamikadze := false ;
5121: LD_ADDR_EXP 39
5125: PUSH
5126: LD_INT 0
5128: ST_TO_ADDR
// sTroll := false ;
5129: LD_ADDR_EXP 40
5133: PUSH
5134: LD_INT 0
5136: ST_TO_ADDR
// sSlow := false ;
5137: LD_ADDR_EXP 41
5141: PUSH
5142: LD_INT 0
5144: ST_TO_ADDR
// sLack := false ;
5145: LD_ADDR_EXP 42
5149: PUSH
5150: LD_INT 0
5152: ST_TO_ADDR
// sTank := false ;
5153: LD_ADDR_EXP 44
5157: PUSH
5158: LD_INT 0
5160: ST_TO_ADDR
// sRemote := false ;
5161: LD_ADDR_EXP 45
5165: PUSH
5166: LD_INT 0
5168: ST_TO_ADDR
// sPowell := false ;
5169: LD_ADDR_EXP 46
5173: PUSH
5174: LD_INT 0
5176: ST_TO_ADDR
// sTeleport := false ;
5177: LD_ADDR_EXP 49
5181: PUSH
5182: LD_INT 0
5184: ST_TO_ADDR
// sOilTower := false ;
5185: LD_ADDR_EXP 51
5189: PUSH
5190: LD_INT 0
5192: ST_TO_ADDR
// sShovel := false ;
5193: LD_ADDR_EXP 52
5197: PUSH
5198: LD_INT 0
5200: ST_TO_ADDR
// sSheik := false ;
5201: LD_ADDR_EXP 53
5205: PUSH
5206: LD_INT 0
5208: ST_TO_ADDR
// sEarthquake := false ;
5209: LD_ADDR_EXP 55
5213: PUSH
5214: LD_INT 0
5216: ST_TO_ADDR
// sAI := false ;
5217: LD_ADDR_EXP 56
5221: PUSH
5222: LD_INT 0
5224: ST_TO_ADDR
// sCargo := false ;
5225: LD_ADDR_EXP 59
5229: PUSH
5230: LD_INT 0
5232: ST_TO_ADDR
// sDLaser := false ;
5233: LD_ADDR_EXP 60
5237: PUSH
5238: LD_INT 0
5240: ST_TO_ADDR
// sExchange := false ;
5241: LD_ADDR_EXP 61
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// sFac := false ;
5249: LD_ADDR_EXP 62
5253: PUSH
5254: LD_INT 0
5256: ST_TO_ADDR
// sPower := false ;
5257: LD_ADDR_EXP 63
5261: PUSH
5262: LD_INT 0
5264: ST_TO_ADDR
// sRandom := false ;
5265: LD_ADDR_EXP 64
5269: PUSH
5270: LD_INT 0
5272: ST_TO_ADDR
// sShield := false ;
5273: LD_ADDR_EXP 65
5277: PUSH
5278: LD_INT 0
5280: ST_TO_ADDR
// sTime := false ;
5281: LD_ADDR_EXP 66
5285: PUSH
5286: LD_INT 0
5288: ST_TO_ADDR
// sTools := false ;
5289: LD_ADDR_EXP 67
5293: PUSH
5294: LD_INT 0
5296: ST_TO_ADDR
// sSold := false ;
5297: LD_ADDR_EXP 32
5301: PUSH
5302: LD_INT 0
5304: ST_TO_ADDR
// sDiff := false ;
5305: LD_ADDR_EXP 33
5309: PUSH
5310: LD_INT 0
5312: ST_TO_ADDR
// sFog := false ;
5313: LD_ADDR_EXP 36
5317: PUSH
5318: LD_INT 0
5320: ST_TO_ADDR
// sReset := false ;
5321: LD_ADDR_EXP 37
5325: PUSH
5326: LD_INT 0
5328: ST_TO_ADDR
// sSun := false ;
5329: LD_ADDR_EXP 38
5333: PUSH
5334: LD_INT 0
5336: ST_TO_ADDR
// sTiger := false ;
5337: LD_ADDR_EXP 34
5341: PUSH
5342: LD_INT 0
5344: ST_TO_ADDR
// sBomb := false ;
5345: LD_ADDR_EXP 35
5349: PUSH
5350: LD_INT 0
5352: ST_TO_ADDR
// sWound := false ;
5353: LD_ADDR_EXP 43
5357: PUSH
5358: LD_INT 0
5360: ST_TO_ADDR
// sBetray := false ;
5361: LD_ADDR_EXP 47
5365: PUSH
5366: LD_INT 0
5368: ST_TO_ADDR
// sContamin := false ;
5369: LD_ADDR_EXP 48
5373: PUSH
5374: LD_INT 0
5376: ST_TO_ADDR
// sOil := false ;
5377: LD_ADDR_EXP 50
5381: PUSH
5382: LD_INT 0
5384: ST_TO_ADDR
// sStu := false ;
5385: LD_ADDR_EXP 54
5389: PUSH
5390: LD_INT 0
5392: ST_TO_ADDR
// sBazooka := false ;
5393: LD_ADDR_EXP 57
5397: PUSH
5398: LD_INT 0
5400: ST_TO_ADDR
// sMortar := false ;
5401: LD_ADDR_EXP 58
5405: PUSH
5406: LD_INT 0
5408: ST_TO_ADDR
// sRanger := false ;
5409: LD_ADDR_EXP 68
5413: PUSH
5414: LD_INT 0
5416: ST_TO_ADDR
// end ;
5417: LD_VAR 0 1
5421: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5422: LD_INT 0
5424: PPUSH
5425: PPUSH
5426: PPUSH
5427: PPUSH
5428: PPUSH
// result := [ ] ;
5429: LD_ADDR_VAR 0 1
5433: PUSH
5434: EMPTY
5435: ST_TO_ADDR
// if campaign_id = 1 then
5436: LD_OWVAR 69
5440: PUSH
5441: LD_INT 1
5443: EQUAL
5444: IFFALSE 8382
// begin case mission_number of 1 :
5446: LD_OWVAR 70
5450: PUSH
5451: LD_INT 1
5453: DOUBLE
5454: EQUAL
5455: IFTRUE 5459
5457: GO 5523
5459: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 2
5467: PUSH
5468: LD_INT 4
5470: PUSH
5471: LD_INT 11
5473: PUSH
5474: LD_INT 12
5476: PUSH
5477: LD_INT 15
5479: PUSH
5480: LD_INT 16
5482: PUSH
5483: LD_INT 22
5485: PUSH
5486: LD_INT 23
5488: PUSH
5489: LD_INT 26
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: PUSH
5503: LD_INT 101
5505: PUSH
5506: LD_INT 102
5508: PUSH
5509: LD_INT 106
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: LIST
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: ST_TO_ADDR
5521: GO 8380
5523: LD_INT 2
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5603
5531: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5532: LD_ADDR_VAR 0 1
5536: PUSH
5537: LD_INT 2
5539: PUSH
5540: LD_INT 4
5542: PUSH
5543: LD_INT 11
5545: PUSH
5546: LD_INT 12
5548: PUSH
5549: LD_INT 15
5551: PUSH
5552: LD_INT 16
5554: PUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 23
5560: PUSH
5561: LD_INT 26
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 101
5577: PUSH
5578: LD_INT 102
5580: PUSH
5581: LD_INT 105
5583: PUSH
5584: LD_INT 106
5586: PUSH
5587: LD_INT 108
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: ST_TO_ADDR
5601: GO 8380
5603: LD_INT 3
5605: DOUBLE
5606: EQUAL
5607: IFTRUE 5611
5609: GO 5687
5611: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5612: LD_ADDR_VAR 0 1
5616: PUSH
5617: LD_INT 2
5619: PUSH
5620: LD_INT 4
5622: PUSH
5623: LD_INT 5
5625: PUSH
5626: LD_INT 11
5628: PUSH
5629: LD_INT 12
5631: PUSH
5632: LD_INT 15
5634: PUSH
5635: LD_INT 16
5637: PUSH
5638: LD_INT 22
5640: PUSH
5641: LD_INT 26
5643: PUSH
5644: LD_INT 36
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: PUSH
5659: LD_INT 101
5661: PUSH
5662: LD_INT 102
5664: PUSH
5665: LD_INT 105
5667: PUSH
5668: LD_INT 106
5670: PUSH
5671: LD_INT 108
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: ST_TO_ADDR
5685: GO 8380
5687: LD_INT 4
5689: DOUBLE
5690: EQUAL
5691: IFTRUE 5695
5693: GO 5779
5695: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5696: LD_ADDR_VAR 0 1
5700: PUSH
5701: LD_INT 2
5703: PUSH
5704: LD_INT 4
5706: PUSH
5707: LD_INT 5
5709: PUSH
5710: LD_INT 8
5712: PUSH
5713: LD_INT 11
5715: PUSH
5716: LD_INT 12
5718: PUSH
5719: LD_INT 15
5721: PUSH
5722: LD_INT 16
5724: PUSH
5725: LD_INT 22
5727: PUSH
5728: LD_INT 23
5730: PUSH
5731: LD_INT 26
5733: PUSH
5734: LD_INT 36
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: PUSH
5751: LD_INT 101
5753: PUSH
5754: LD_INT 102
5756: PUSH
5757: LD_INT 105
5759: PUSH
5760: LD_INT 106
5762: PUSH
5763: LD_INT 108
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: ST_TO_ADDR
5777: GO 8380
5779: LD_INT 5
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5887
5787: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: LD_INT 5
5801: PUSH
5802: LD_INT 6
5804: PUSH
5805: LD_INT 8
5807: PUSH
5808: LD_INT 11
5810: PUSH
5811: LD_INT 12
5813: PUSH
5814: LD_INT 15
5816: PUSH
5817: LD_INT 16
5819: PUSH
5820: LD_INT 22
5822: PUSH
5823: LD_INT 23
5825: PUSH
5826: LD_INT 25
5828: PUSH
5829: LD_INT 26
5831: PUSH
5832: LD_INT 36
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: LD_INT 101
5853: PUSH
5854: LD_INT 102
5856: PUSH
5857: LD_INT 105
5859: PUSH
5860: LD_INT 106
5862: PUSH
5863: LD_INT 108
5865: PUSH
5866: LD_INT 109
5868: PUSH
5869: LD_INT 112
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: ST_TO_ADDR
5885: GO 8380
5887: LD_INT 6
5889: DOUBLE
5890: EQUAL
5891: IFTRUE 5895
5893: GO 6015
5895: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5896: LD_ADDR_VAR 0 1
5900: PUSH
5901: LD_INT 2
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: LD_INT 5
5909: PUSH
5910: LD_INT 6
5912: PUSH
5913: LD_INT 8
5915: PUSH
5916: LD_INT 11
5918: PUSH
5919: LD_INT 12
5921: PUSH
5922: LD_INT 15
5924: PUSH
5925: LD_INT 16
5927: PUSH
5928: LD_INT 20
5930: PUSH
5931: LD_INT 21
5933: PUSH
5934: LD_INT 22
5936: PUSH
5937: LD_INT 23
5939: PUSH
5940: LD_INT 25
5942: PUSH
5943: LD_INT 26
5945: PUSH
5946: LD_INT 30
5948: PUSH
5949: LD_INT 31
5951: PUSH
5952: LD_INT 32
5954: PUSH
5955: LD_INT 36
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: PUSH
5979: LD_INT 101
5981: PUSH
5982: LD_INT 102
5984: PUSH
5985: LD_INT 105
5987: PUSH
5988: LD_INT 106
5990: PUSH
5991: LD_INT 108
5993: PUSH
5994: LD_INT 109
5996: PUSH
5997: LD_INT 112
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: ST_TO_ADDR
6013: GO 8380
6015: LD_INT 7
6017: DOUBLE
6018: EQUAL
6019: IFTRUE 6023
6021: GO 6123
6023: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6024: LD_ADDR_VAR 0 1
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: LD_INT 5
6037: PUSH
6038: LD_INT 7
6040: PUSH
6041: LD_INT 11
6043: PUSH
6044: LD_INT 12
6046: PUSH
6047: LD_INT 15
6049: PUSH
6050: LD_INT 16
6052: PUSH
6053: LD_INT 20
6055: PUSH
6056: LD_INT 21
6058: PUSH
6059: LD_INT 22
6061: PUSH
6062: LD_INT 23
6064: PUSH
6065: LD_INT 25
6067: PUSH
6068: LD_INT 26
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 101
6089: PUSH
6090: LD_INT 102
6092: PUSH
6093: LD_INT 103
6095: PUSH
6096: LD_INT 105
6098: PUSH
6099: LD_INT 106
6101: PUSH
6102: LD_INT 108
6104: PUSH
6105: LD_INT 112
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: ST_TO_ADDR
6121: GO 8380
6123: LD_INT 8
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6259
6131: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6132: LD_ADDR_VAR 0 1
6136: PUSH
6137: LD_INT 2
6139: PUSH
6140: LD_INT 4
6142: PUSH
6143: LD_INT 5
6145: PUSH
6146: LD_INT 6
6148: PUSH
6149: LD_INT 7
6151: PUSH
6152: LD_INT 8
6154: PUSH
6155: LD_INT 11
6157: PUSH
6158: LD_INT 12
6160: PUSH
6161: LD_INT 15
6163: PUSH
6164: LD_INT 16
6166: PUSH
6167: LD_INT 20
6169: PUSH
6170: LD_INT 21
6172: PUSH
6173: LD_INT 22
6175: PUSH
6176: LD_INT 23
6178: PUSH
6179: LD_INT 25
6181: PUSH
6182: LD_INT 26
6184: PUSH
6185: LD_INT 30
6187: PUSH
6188: LD_INT 31
6190: PUSH
6191: LD_INT 32
6193: PUSH
6194: LD_INT 36
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 101
6221: PUSH
6222: LD_INT 102
6224: PUSH
6225: LD_INT 103
6227: PUSH
6228: LD_INT 105
6230: PUSH
6231: LD_INT 106
6233: PUSH
6234: LD_INT 108
6236: PUSH
6237: LD_INT 109
6239: PUSH
6240: LD_INT 112
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: ST_TO_ADDR
6257: GO 8380
6259: LD_INT 9
6261: DOUBLE
6262: EQUAL
6263: IFTRUE 6267
6265: GO 6403
6267: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6268: LD_ADDR_VAR 0 1
6272: PUSH
6273: LD_INT 2
6275: PUSH
6276: LD_INT 4
6278: PUSH
6279: LD_INT 5
6281: PUSH
6282: LD_INT 6
6284: PUSH
6285: LD_INT 7
6287: PUSH
6288: LD_INT 8
6290: PUSH
6291: LD_INT 11
6293: PUSH
6294: LD_INT 12
6296: PUSH
6297: LD_INT 15
6299: PUSH
6300: LD_INT 16
6302: PUSH
6303: LD_INT 20
6305: PUSH
6306: LD_INT 21
6308: PUSH
6309: LD_INT 22
6311: PUSH
6312: LD_INT 23
6314: PUSH
6315: LD_INT 25
6317: PUSH
6318: LD_INT 26
6320: PUSH
6321: LD_INT 28
6323: PUSH
6324: LD_INT 30
6326: PUSH
6327: LD_INT 31
6329: PUSH
6330: LD_INT 32
6332: PUSH
6333: LD_INT 36
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 101
6361: PUSH
6362: LD_INT 102
6364: PUSH
6365: LD_INT 103
6367: PUSH
6368: LD_INT 105
6370: PUSH
6371: LD_INT 106
6373: PUSH
6374: LD_INT 108
6376: PUSH
6377: LD_INT 109
6379: PUSH
6380: LD_INT 112
6382: PUSH
6383: LD_INT 114
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: ST_TO_ADDR
6401: GO 8380
6403: LD_INT 10
6405: DOUBLE
6406: EQUAL
6407: IFTRUE 6411
6409: GO 6595
6411: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6412: LD_ADDR_VAR 0 1
6416: PUSH
6417: LD_INT 2
6419: PUSH
6420: LD_INT 4
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: LD_INT 6
6428: PUSH
6429: LD_INT 7
6431: PUSH
6432: LD_INT 8
6434: PUSH
6435: LD_INT 9
6437: PUSH
6438: LD_INT 10
6440: PUSH
6441: LD_INT 11
6443: PUSH
6444: LD_INT 12
6446: PUSH
6447: LD_INT 13
6449: PUSH
6450: LD_INT 14
6452: PUSH
6453: LD_INT 15
6455: PUSH
6456: LD_INT 16
6458: PUSH
6459: LD_INT 17
6461: PUSH
6462: LD_INT 18
6464: PUSH
6465: LD_INT 19
6467: PUSH
6468: LD_INT 20
6470: PUSH
6471: LD_INT 21
6473: PUSH
6474: LD_INT 22
6476: PUSH
6477: LD_INT 23
6479: PUSH
6480: LD_INT 24
6482: PUSH
6483: LD_INT 25
6485: PUSH
6486: LD_INT 26
6488: PUSH
6489: LD_INT 28
6491: PUSH
6492: LD_INT 30
6494: PUSH
6495: LD_INT 31
6497: PUSH
6498: LD_INT 32
6500: PUSH
6501: LD_INT 36
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: PUSH
6535: LD_INT 101
6537: PUSH
6538: LD_INT 102
6540: PUSH
6541: LD_INT 103
6543: PUSH
6544: LD_INT 104
6546: PUSH
6547: LD_INT 105
6549: PUSH
6550: LD_INT 106
6552: PUSH
6553: LD_INT 107
6555: PUSH
6556: LD_INT 108
6558: PUSH
6559: LD_INT 109
6561: PUSH
6562: LD_INT 110
6564: PUSH
6565: LD_INT 111
6567: PUSH
6568: LD_INT 112
6570: PUSH
6571: LD_INT 114
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: ST_TO_ADDR
6593: GO 8380
6595: LD_INT 11
6597: DOUBLE
6598: EQUAL
6599: IFTRUE 6603
6601: GO 6795
6603: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6604: LD_ADDR_VAR 0 1
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 3
6614: PUSH
6615: LD_INT 4
6617: PUSH
6618: LD_INT 5
6620: PUSH
6621: LD_INT 6
6623: PUSH
6624: LD_INT 7
6626: PUSH
6627: LD_INT 8
6629: PUSH
6630: LD_INT 9
6632: PUSH
6633: LD_INT 10
6635: PUSH
6636: LD_INT 11
6638: PUSH
6639: LD_INT 12
6641: PUSH
6642: LD_INT 13
6644: PUSH
6645: LD_INT 14
6647: PUSH
6648: LD_INT 15
6650: PUSH
6651: LD_INT 16
6653: PUSH
6654: LD_INT 17
6656: PUSH
6657: LD_INT 18
6659: PUSH
6660: LD_INT 19
6662: PUSH
6663: LD_INT 20
6665: PUSH
6666: LD_INT 21
6668: PUSH
6669: LD_INT 22
6671: PUSH
6672: LD_INT 23
6674: PUSH
6675: LD_INT 24
6677: PUSH
6678: LD_INT 25
6680: PUSH
6681: LD_INT 26
6683: PUSH
6684: LD_INT 28
6686: PUSH
6687: LD_INT 30
6689: PUSH
6690: LD_INT 31
6692: PUSH
6693: LD_INT 32
6695: PUSH
6696: LD_INT 34
6698: PUSH
6699: LD_INT 36
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 101
6737: PUSH
6738: LD_INT 102
6740: PUSH
6741: LD_INT 103
6743: PUSH
6744: LD_INT 104
6746: PUSH
6747: LD_INT 105
6749: PUSH
6750: LD_INT 106
6752: PUSH
6753: LD_INT 107
6755: PUSH
6756: LD_INT 108
6758: PUSH
6759: LD_INT 109
6761: PUSH
6762: LD_INT 110
6764: PUSH
6765: LD_INT 111
6767: PUSH
6768: LD_INT 112
6770: PUSH
6771: LD_INT 114
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: ST_TO_ADDR
6793: GO 8380
6795: LD_INT 12
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 7011
6803: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6804: LD_ADDR_VAR 0 1
6808: PUSH
6809: LD_INT 1
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: LD_INT 4
6820: PUSH
6821: LD_INT 5
6823: PUSH
6824: LD_INT 6
6826: PUSH
6827: LD_INT 7
6829: PUSH
6830: LD_INT 8
6832: PUSH
6833: LD_INT 9
6835: PUSH
6836: LD_INT 10
6838: PUSH
6839: LD_INT 11
6841: PUSH
6842: LD_INT 12
6844: PUSH
6845: LD_INT 13
6847: PUSH
6848: LD_INT 14
6850: PUSH
6851: LD_INT 15
6853: PUSH
6854: LD_INT 16
6856: PUSH
6857: LD_INT 17
6859: PUSH
6860: LD_INT 18
6862: PUSH
6863: LD_INT 19
6865: PUSH
6866: LD_INT 20
6868: PUSH
6869: LD_INT 21
6871: PUSH
6872: LD_INT 22
6874: PUSH
6875: LD_INT 23
6877: PUSH
6878: LD_INT 24
6880: PUSH
6881: LD_INT 25
6883: PUSH
6884: LD_INT 26
6886: PUSH
6887: LD_INT 27
6889: PUSH
6890: LD_INT 28
6892: PUSH
6893: LD_INT 30
6895: PUSH
6896: LD_INT 31
6898: PUSH
6899: LD_INT 32
6901: PUSH
6902: LD_INT 33
6904: PUSH
6905: LD_INT 34
6907: PUSH
6908: LD_INT 36
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 101
6949: PUSH
6950: LD_INT 102
6952: PUSH
6953: LD_INT 103
6955: PUSH
6956: LD_INT 104
6958: PUSH
6959: LD_INT 105
6961: PUSH
6962: LD_INT 106
6964: PUSH
6965: LD_INT 107
6967: PUSH
6968: LD_INT 108
6970: PUSH
6971: LD_INT 109
6973: PUSH
6974: LD_INT 110
6976: PUSH
6977: LD_INT 111
6979: PUSH
6980: LD_INT 112
6982: PUSH
6983: LD_INT 113
6985: PUSH
6986: LD_INT 114
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: ST_TO_ADDR
7009: GO 8380
7011: LD_INT 13
7013: DOUBLE
7014: EQUAL
7015: IFTRUE 7019
7017: GO 7215
7019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7020: LD_ADDR_VAR 0 1
7024: PUSH
7025: LD_INT 1
7027: PUSH
7028: LD_INT 2
7030: PUSH
7031: LD_INT 3
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: LD_INT 5
7039: PUSH
7040: LD_INT 8
7042: PUSH
7043: LD_INT 9
7045: PUSH
7046: LD_INT 10
7048: PUSH
7049: LD_INT 11
7051: PUSH
7052: LD_INT 12
7054: PUSH
7055: LD_INT 14
7057: PUSH
7058: LD_INT 15
7060: PUSH
7061: LD_INT 16
7063: PUSH
7064: LD_INT 17
7066: PUSH
7067: LD_INT 18
7069: PUSH
7070: LD_INT 19
7072: PUSH
7073: LD_INT 20
7075: PUSH
7076: LD_INT 21
7078: PUSH
7079: LD_INT 22
7081: PUSH
7082: LD_INT 23
7084: PUSH
7085: LD_INT 24
7087: PUSH
7088: LD_INT 25
7090: PUSH
7091: LD_INT 26
7093: PUSH
7094: LD_INT 27
7096: PUSH
7097: LD_INT 28
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 31
7105: PUSH
7106: LD_INT 32
7108: PUSH
7109: LD_INT 33
7111: PUSH
7112: LD_INT 34
7114: PUSH
7115: LD_INT 36
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 101
7153: PUSH
7154: LD_INT 102
7156: PUSH
7157: LD_INT 103
7159: PUSH
7160: LD_INT 104
7162: PUSH
7163: LD_INT 105
7165: PUSH
7166: LD_INT 106
7168: PUSH
7169: LD_INT 107
7171: PUSH
7172: LD_INT 108
7174: PUSH
7175: LD_INT 109
7177: PUSH
7178: LD_INT 110
7180: PUSH
7181: LD_INT 111
7183: PUSH
7184: LD_INT 112
7186: PUSH
7187: LD_INT 113
7189: PUSH
7190: LD_INT 114
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: ST_TO_ADDR
7213: GO 8380
7215: LD_INT 14
7217: DOUBLE
7218: EQUAL
7219: IFTRUE 7223
7221: GO 7435
7223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7224: LD_ADDR_VAR 0 1
7228: PUSH
7229: LD_INT 1
7231: PUSH
7232: LD_INT 2
7234: PUSH
7235: LD_INT 3
7237: PUSH
7238: LD_INT 4
7240: PUSH
7241: LD_INT 5
7243: PUSH
7244: LD_INT 6
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: LD_INT 8
7252: PUSH
7253: LD_INT 9
7255: PUSH
7256: LD_INT 10
7258: PUSH
7259: LD_INT 11
7261: PUSH
7262: LD_INT 12
7264: PUSH
7265: LD_INT 13
7267: PUSH
7268: LD_INT 14
7270: PUSH
7271: LD_INT 15
7273: PUSH
7274: LD_INT 16
7276: PUSH
7277: LD_INT 17
7279: PUSH
7280: LD_INT 18
7282: PUSH
7283: LD_INT 19
7285: PUSH
7286: LD_INT 20
7288: PUSH
7289: LD_INT 21
7291: PUSH
7292: LD_INT 22
7294: PUSH
7295: LD_INT 23
7297: PUSH
7298: LD_INT 24
7300: PUSH
7301: LD_INT 25
7303: PUSH
7304: LD_INT 26
7306: PUSH
7307: LD_INT 27
7309: PUSH
7310: LD_INT 28
7312: PUSH
7313: LD_INT 29
7315: PUSH
7316: LD_INT 30
7318: PUSH
7319: LD_INT 31
7321: PUSH
7322: LD_INT 32
7324: PUSH
7325: LD_INT 33
7327: PUSH
7328: LD_INT 34
7330: PUSH
7331: LD_INT 36
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 101
7373: PUSH
7374: LD_INT 102
7376: PUSH
7377: LD_INT 103
7379: PUSH
7380: LD_INT 104
7382: PUSH
7383: LD_INT 105
7385: PUSH
7386: LD_INT 106
7388: PUSH
7389: LD_INT 107
7391: PUSH
7392: LD_INT 108
7394: PUSH
7395: LD_INT 109
7397: PUSH
7398: LD_INT 110
7400: PUSH
7401: LD_INT 111
7403: PUSH
7404: LD_INT 112
7406: PUSH
7407: LD_INT 113
7409: PUSH
7410: LD_INT 114
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: ST_TO_ADDR
7433: GO 8380
7435: LD_INT 15
7437: DOUBLE
7438: EQUAL
7439: IFTRUE 7443
7441: GO 7655
7443: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7444: LD_ADDR_VAR 0 1
7448: PUSH
7449: LD_INT 1
7451: PUSH
7452: LD_INT 2
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: LD_INT 4
7460: PUSH
7461: LD_INT 5
7463: PUSH
7464: LD_INT 6
7466: PUSH
7467: LD_INT 7
7469: PUSH
7470: LD_INT 8
7472: PUSH
7473: LD_INT 9
7475: PUSH
7476: LD_INT 10
7478: PUSH
7479: LD_INT 11
7481: PUSH
7482: LD_INT 12
7484: PUSH
7485: LD_INT 13
7487: PUSH
7488: LD_INT 14
7490: PUSH
7491: LD_INT 15
7493: PUSH
7494: LD_INT 16
7496: PUSH
7497: LD_INT 17
7499: PUSH
7500: LD_INT 18
7502: PUSH
7503: LD_INT 19
7505: PUSH
7506: LD_INT 20
7508: PUSH
7509: LD_INT 21
7511: PUSH
7512: LD_INT 22
7514: PUSH
7515: LD_INT 23
7517: PUSH
7518: LD_INT 24
7520: PUSH
7521: LD_INT 25
7523: PUSH
7524: LD_INT 26
7526: PUSH
7527: LD_INT 27
7529: PUSH
7530: LD_INT 28
7532: PUSH
7533: LD_INT 29
7535: PUSH
7536: LD_INT 30
7538: PUSH
7539: LD_INT 31
7541: PUSH
7542: LD_INT 32
7544: PUSH
7545: LD_INT 33
7547: PUSH
7548: LD_INT 34
7550: PUSH
7551: LD_INT 36
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 101
7593: PUSH
7594: LD_INT 102
7596: PUSH
7597: LD_INT 103
7599: PUSH
7600: LD_INT 104
7602: PUSH
7603: LD_INT 105
7605: PUSH
7606: LD_INT 106
7608: PUSH
7609: LD_INT 107
7611: PUSH
7612: LD_INT 108
7614: PUSH
7615: LD_INT 109
7617: PUSH
7618: LD_INT 110
7620: PUSH
7621: LD_INT 111
7623: PUSH
7624: LD_INT 112
7626: PUSH
7627: LD_INT 113
7629: PUSH
7630: LD_INT 114
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: ST_TO_ADDR
7653: GO 8380
7655: LD_INT 16
7657: DOUBLE
7658: EQUAL
7659: IFTRUE 7663
7661: GO 7787
7663: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7664: LD_ADDR_VAR 0 1
7668: PUSH
7669: LD_INT 2
7671: PUSH
7672: LD_INT 4
7674: PUSH
7675: LD_INT 5
7677: PUSH
7678: LD_INT 7
7680: PUSH
7681: LD_INT 11
7683: PUSH
7684: LD_INT 12
7686: PUSH
7687: LD_INT 15
7689: PUSH
7690: LD_INT 16
7692: PUSH
7693: LD_INT 20
7695: PUSH
7696: LD_INT 21
7698: PUSH
7699: LD_INT 22
7701: PUSH
7702: LD_INT 23
7704: PUSH
7705: LD_INT 25
7707: PUSH
7708: LD_INT 26
7710: PUSH
7711: LD_INT 30
7713: PUSH
7714: LD_INT 31
7716: PUSH
7717: LD_INT 32
7719: PUSH
7720: LD_INT 33
7722: PUSH
7723: LD_INT 34
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 101
7749: PUSH
7750: LD_INT 102
7752: PUSH
7753: LD_INT 103
7755: PUSH
7756: LD_INT 106
7758: PUSH
7759: LD_INT 108
7761: PUSH
7762: LD_INT 112
7764: PUSH
7765: LD_INT 113
7767: PUSH
7768: LD_INT 114
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: ST_TO_ADDR
7785: GO 8380
7787: LD_INT 17
7789: DOUBLE
7790: EQUAL
7791: IFTRUE 7795
7793: GO 8007
7795: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7796: LD_ADDR_VAR 0 1
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: LD_INT 2
7806: PUSH
7807: LD_INT 3
7809: PUSH
7810: LD_INT 4
7812: PUSH
7813: LD_INT 5
7815: PUSH
7816: LD_INT 6
7818: PUSH
7819: LD_INT 7
7821: PUSH
7822: LD_INT 8
7824: PUSH
7825: LD_INT 9
7827: PUSH
7828: LD_INT 10
7830: PUSH
7831: LD_INT 11
7833: PUSH
7834: LD_INT 12
7836: PUSH
7837: LD_INT 13
7839: PUSH
7840: LD_INT 14
7842: PUSH
7843: LD_INT 15
7845: PUSH
7846: LD_INT 16
7848: PUSH
7849: LD_INT 17
7851: PUSH
7852: LD_INT 18
7854: PUSH
7855: LD_INT 19
7857: PUSH
7858: LD_INT 20
7860: PUSH
7861: LD_INT 21
7863: PUSH
7864: LD_INT 22
7866: PUSH
7867: LD_INT 23
7869: PUSH
7870: LD_INT 24
7872: PUSH
7873: LD_INT 25
7875: PUSH
7876: LD_INT 26
7878: PUSH
7879: LD_INT 27
7881: PUSH
7882: LD_INT 28
7884: PUSH
7885: LD_INT 29
7887: PUSH
7888: LD_INT 30
7890: PUSH
7891: LD_INT 31
7893: PUSH
7894: LD_INT 32
7896: PUSH
7897: LD_INT 33
7899: PUSH
7900: LD_INT 34
7902: PUSH
7903: LD_INT 36
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 101
7945: PUSH
7946: LD_INT 102
7948: PUSH
7949: LD_INT 103
7951: PUSH
7952: LD_INT 104
7954: PUSH
7955: LD_INT 105
7957: PUSH
7958: LD_INT 106
7960: PUSH
7961: LD_INT 107
7963: PUSH
7964: LD_INT 108
7966: PUSH
7967: LD_INT 109
7969: PUSH
7970: LD_INT 110
7972: PUSH
7973: LD_INT 111
7975: PUSH
7976: LD_INT 112
7978: PUSH
7979: LD_INT 113
7981: PUSH
7982: LD_INT 114
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: ST_TO_ADDR
8005: GO 8380
8007: LD_INT 18
8009: DOUBLE
8010: EQUAL
8011: IFTRUE 8015
8013: GO 8151
8015: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8016: LD_ADDR_VAR 0 1
8020: PUSH
8021: LD_INT 2
8023: PUSH
8024: LD_INT 4
8026: PUSH
8027: LD_INT 5
8029: PUSH
8030: LD_INT 7
8032: PUSH
8033: LD_INT 11
8035: PUSH
8036: LD_INT 12
8038: PUSH
8039: LD_INT 15
8041: PUSH
8042: LD_INT 16
8044: PUSH
8045: LD_INT 20
8047: PUSH
8048: LD_INT 21
8050: PUSH
8051: LD_INT 22
8053: PUSH
8054: LD_INT 23
8056: PUSH
8057: LD_INT 25
8059: PUSH
8060: LD_INT 26
8062: PUSH
8063: LD_INT 30
8065: PUSH
8066: LD_INT 31
8068: PUSH
8069: LD_INT 32
8071: PUSH
8072: LD_INT 33
8074: PUSH
8075: LD_INT 34
8077: PUSH
8078: LD_INT 35
8080: PUSH
8081: LD_INT 36
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 101
8109: PUSH
8110: LD_INT 102
8112: PUSH
8113: LD_INT 103
8115: PUSH
8116: LD_INT 106
8118: PUSH
8119: LD_INT 108
8121: PUSH
8122: LD_INT 112
8124: PUSH
8125: LD_INT 113
8127: PUSH
8128: LD_INT 114
8130: PUSH
8131: LD_INT 115
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: ST_TO_ADDR
8149: GO 8380
8151: LD_INT 19
8153: DOUBLE
8154: EQUAL
8155: IFTRUE 8159
8157: GO 8379
8159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8160: LD_ADDR_VAR 0 1
8164: PUSH
8165: LD_INT 1
8167: PUSH
8168: LD_INT 2
8170: PUSH
8171: LD_INT 3
8173: PUSH
8174: LD_INT 4
8176: PUSH
8177: LD_INT 5
8179: PUSH
8180: LD_INT 6
8182: PUSH
8183: LD_INT 7
8185: PUSH
8186: LD_INT 8
8188: PUSH
8189: LD_INT 9
8191: PUSH
8192: LD_INT 10
8194: PUSH
8195: LD_INT 11
8197: PUSH
8198: LD_INT 12
8200: PUSH
8201: LD_INT 13
8203: PUSH
8204: LD_INT 14
8206: PUSH
8207: LD_INT 15
8209: PUSH
8210: LD_INT 16
8212: PUSH
8213: LD_INT 17
8215: PUSH
8216: LD_INT 18
8218: PUSH
8219: LD_INT 19
8221: PUSH
8222: LD_INT 20
8224: PUSH
8225: LD_INT 21
8227: PUSH
8228: LD_INT 22
8230: PUSH
8231: LD_INT 23
8233: PUSH
8234: LD_INT 24
8236: PUSH
8237: LD_INT 25
8239: PUSH
8240: LD_INT 26
8242: PUSH
8243: LD_INT 27
8245: PUSH
8246: LD_INT 28
8248: PUSH
8249: LD_INT 29
8251: PUSH
8252: LD_INT 30
8254: PUSH
8255: LD_INT 31
8257: PUSH
8258: LD_INT 32
8260: PUSH
8261: LD_INT 33
8263: PUSH
8264: LD_INT 34
8266: PUSH
8267: LD_INT 35
8269: PUSH
8270: LD_INT 36
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 101
8313: PUSH
8314: LD_INT 102
8316: PUSH
8317: LD_INT 103
8319: PUSH
8320: LD_INT 104
8322: PUSH
8323: LD_INT 105
8325: PUSH
8326: LD_INT 106
8328: PUSH
8329: LD_INT 107
8331: PUSH
8332: LD_INT 108
8334: PUSH
8335: LD_INT 109
8337: PUSH
8338: LD_INT 110
8340: PUSH
8341: LD_INT 111
8343: PUSH
8344: LD_INT 112
8346: PUSH
8347: LD_INT 113
8349: PUSH
8350: LD_INT 114
8352: PUSH
8353: LD_INT 115
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: ST_TO_ADDR
8377: GO 8380
8379: POP
// end else
8380: GO 8599
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8382: LD_ADDR_VAR 0 1
8386: PUSH
8387: LD_INT 1
8389: PUSH
8390: LD_INT 2
8392: PUSH
8393: LD_INT 3
8395: PUSH
8396: LD_INT 4
8398: PUSH
8399: LD_INT 5
8401: PUSH
8402: LD_INT 6
8404: PUSH
8405: LD_INT 7
8407: PUSH
8408: LD_INT 8
8410: PUSH
8411: LD_INT 9
8413: PUSH
8414: LD_INT 10
8416: PUSH
8417: LD_INT 11
8419: PUSH
8420: LD_INT 12
8422: PUSH
8423: LD_INT 13
8425: PUSH
8426: LD_INT 14
8428: PUSH
8429: LD_INT 15
8431: PUSH
8432: LD_INT 16
8434: PUSH
8435: LD_INT 17
8437: PUSH
8438: LD_INT 18
8440: PUSH
8441: LD_INT 19
8443: PUSH
8444: LD_INT 20
8446: PUSH
8447: LD_INT 21
8449: PUSH
8450: LD_INT 22
8452: PUSH
8453: LD_INT 23
8455: PUSH
8456: LD_INT 24
8458: PUSH
8459: LD_INT 25
8461: PUSH
8462: LD_INT 26
8464: PUSH
8465: LD_INT 27
8467: PUSH
8468: LD_INT 28
8470: PUSH
8471: LD_INT 29
8473: PUSH
8474: LD_INT 30
8476: PUSH
8477: LD_INT 31
8479: PUSH
8480: LD_INT 32
8482: PUSH
8483: LD_INT 33
8485: PUSH
8486: LD_INT 34
8488: PUSH
8489: LD_INT 35
8491: PUSH
8492: LD_INT 36
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 101
8535: PUSH
8536: LD_INT 102
8538: PUSH
8539: LD_INT 103
8541: PUSH
8542: LD_INT 104
8544: PUSH
8545: LD_INT 105
8547: PUSH
8548: LD_INT 106
8550: PUSH
8551: LD_INT 107
8553: PUSH
8554: LD_INT 108
8556: PUSH
8557: LD_INT 109
8559: PUSH
8560: LD_INT 110
8562: PUSH
8563: LD_INT 111
8565: PUSH
8566: LD_INT 112
8568: PUSH
8569: LD_INT 113
8571: PUSH
8572: LD_INT 114
8574: PUSH
8575: LD_INT 115
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: ST_TO_ADDR
// if result then
8599: LD_VAR 0 1
8603: IFFALSE 8892
// begin normal :=  ;
8605: LD_ADDR_VAR 0 3
8609: PUSH
8610: LD_STRING 
8612: ST_TO_ADDR
// hardcore :=  ;
8613: LD_ADDR_VAR 0 4
8617: PUSH
8618: LD_STRING 
8620: ST_TO_ADDR
// for i = 1 to normalCounter do
8621: LD_ADDR_VAR 0 5
8625: PUSH
8626: DOUBLE
8627: LD_INT 1
8629: DEC
8630: ST_TO_ADDR
8631: LD_EXP 16
8635: PUSH
8636: FOR_TO
8637: IFFALSE 8738
// begin tmp := 0 ;
8639: LD_ADDR_VAR 0 2
8643: PUSH
8644: LD_STRING 0
8646: ST_TO_ADDR
// if result [ 1 ] then
8647: LD_VAR 0 1
8651: PUSH
8652: LD_INT 1
8654: ARRAY
8655: IFFALSE 8720
// if result [ 1 ] [ 1 ] = i then
8657: LD_VAR 0 1
8661: PUSH
8662: LD_INT 1
8664: ARRAY
8665: PUSH
8666: LD_INT 1
8668: ARRAY
8669: PUSH
8670: LD_VAR 0 5
8674: EQUAL
8675: IFFALSE 8720
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8677: LD_ADDR_VAR 0 1
8681: PUSH
8682: LD_VAR 0 1
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: LD_VAR 0 1
8694: PUSH
8695: LD_INT 1
8697: ARRAY
8698: PPUSH
8699: LD_INT 1
8701: PPUSH
8702: CALL_OW 3
8706: PPUSH
8707: CALL_OW 1
8711: ST_TO_ADDR
// tmp := 1 ;
8712: LD_ADDR_VAR 0 2
8716: PUSH
8717: LD_STRING 1
8719: ST_TO_ADDR
// end ; normal := normal & tmp ;
8720: LD_ADDR_VAR 0 3
8724: PUSH
8725: LD_VAR 0 3
8729: PUSH
8730: LD_VAR 0 2
8734: STR
8735: ST_TO_ADDR
// end ;
8736: GO 8636
8738: POP
8739: POP
// for i = 1 to hardcoreCounter do
8740: LD_ADDR_VAR 0 5
8744: PUSH
8745: DOUBLE
8746: LD_INT 1
8748: DEC
8749: ST_TO_ADDR
8750: LD_EXP 17
8754: PUSH
8755: FOR_TO
8756: IFFALSE 8861
// begin tmp := 0 ;
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: LD_STRING 0
8765: ST_TO_ADDR
// if result [ 2 ] then
8766: LD_VAR 0 1
8770: PUSH
8771: LD_INT 2
8773: ARRAY
8774: IFFALSE 8843
// if result [ 2 ] [ 1 ] = 100 + i then
8776: LD_VAR 0 1
8780: PUSH
8781: LD_INT 2
8783: ARRAY
8784: PUSH
8785: LD_INT 1
8787: ARRAY
8788: PUSH
8789: LD_INT 100
8791: PUSH
8792: LD_VAR 0 5
8796: PLUS
8797: EQUAL
8798: IFFALSE 8843
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8800: LD_ADDR_VAR 0 1
8804: PUSH
8805: LD_VAR 0 1
8809: PPUSH
8810: LD_INT 2
8812: PPUSH
8813: LD_VAR 0 1
8817: PUSH
8818: LD_INT 2
8820: ARRAY
8821: PPUSH
8822: LD_INT 1
8824: PPUSH
8825: CALL_OW 3
8829: PPUSH
8830: CALL_OW 1
8834: ST_TO_ADDR
// tmp := 1 ;
8835: LD_ADDR_VAR 0 2
8839: PUSH
8840: LD_STRING 1
8842: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8843: LD_ADDR_VAR 0 4
8847: PUSH
8848: LD_VAR 0 4
8852: PUSH
8853: LD_VAR 0 2
8857: STR
8858: ST_TO_ADDR
// end ;
8859: GO 8755
8861: POP
8862: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8863: LD_STRING getStreamItemsFromMission("
8865: PUSH
8866: LD_VAR 0 3
8870: STR
8871: PUSH
8872: LD_STRING ","
8874: STR
8875: PUSH
8876: LD_VAR 0 4
8880: STR
8881: PUSH
8882: LD_STRING ")
8884: STR
8885: PPUSH
8886: CALL_OW 559
// end else
8890: GO 8899
// ToLua ( getStreamItemsFromMission("","") ) ;
8892: LD_STRING getStreamItemsFromMission("","")
8894: PPUSH
8895: CALL_OW 559
// end ;
8899: LD_VAR 0 1
8903: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8904: LD_VAR 0 2
8908: PUSH
8909: LD_INT 100
8911: EQUAL
8912: IFFALSE 9861
// begin if not StreamModeActive then
8914: LD_EXP 15
8918: NOT
8919: IFFALSE 8929
// StreamModeActive := true ;
8921: LD_ADDR_EXP 15
8925: PUSH
8926: LD_INT 1
8928: ST_TO_ADDR
// if p3 = 0 then
8929: LD_VAR 0 3
8933: PUSH
8934: LD_INT 0
8936: EQUAL
8937: IFFALSE 8943
// InitStreamMode ;
8939: CALL 4982 0 0
// if p3 = 1 then
8943: LD_VAR 0 3
8947: PUSH
8948: LD_INT 1
8950: EQUAL
8951: IFFALSE 8961
// sRocket := true ;
8953: LD_ADDR_EXP 20
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if p3 = 2 then
8961: LD_VAR 0 3
8965: PUSH
8966: LD_INT 2
8968: EQUAL
8969: IFFALSE 8979
// sSpeed := true ;
8971: LD_ADDR_EXP 19
8975: PUSH
8976: LD_INT 1
8978: ST_TO_ADDR
// if p3 = 3 then
8979: LD_VAR 0 3
8983: PUSH
8984: LD_INT 3
8986: EQUAL
8987: IFFALSE 8997
// sEngine := true ;
8989: LD_ADDR_EXP 21
8993: PUSH
8994: LD_INT 1
8996: ST_TO_ADDR
// if p3 = 4 then
8997: LD_VAR 0 3
9001: PUSH
9002: LD_INT 4
9004: EQUAL
9005: IFFALSE 9015
// sSpec := true ;
9007: LD_ADDR_EXP 18
9011: PUSH
9012: LD_INT 1
9014: ST_TO_ADDR
// if p3 = 5 then
9015: LD_VAR 0 3
9019: PUSH
9020: LD_INT 5
9022: EQUAL
9023: IFFALSE 9033
// sLevel := true ;
9025: LD_ADDR_EXP 22
9029: PUSH
9030: LD_INT 1
9032: ST_TO_ADDR
// if p3 = 6 then
9033: LD_VAR 0 3
9037: PUSH
9038: LD_INT 6
9040: EQUAL
9041: IFFALSE 9051
// sArmoury := true ;
9043: LD_ADDR_EXP 23
9047: PUSH
9048: LD_INT 1
9050: ST_TO_ADDR
// if p3 = 7 then
9051: LD_VAR 0 3
9055: PUSH
9056: LD_INT 7
9058: EQUAL
9059: IFFALSE 9069
// sRadar := true ;
9061: LD_ADDR_EXP 24
9065: PUSH
9066: LD_INT 1
9068: ST_TO_ADDR
// if p3 = 8 then
9069: LD_VAR 0 3
9073: PUSH
9074: LD_INT 8
9076: EQUAL
9077: IFFALSE 9087
// sBunker := true ;
9079: LD_ADDR_EXP 25
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// if p3 = 9 then
9087: LD_VAR 0 3
9091: PUSH
9092: LD_INT 9
9094: EQUAL
9095: IFFALSE 9105
// sHack := true ;
9097: LD_ADDR_EXP 26
9101: PUSH
9102: LD_INT 1
9104: ST_TO_ADDR
// if p3 = 10 then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_INT 10
9112: EQUAL
9113: IFFALSE 9123
// sFire := true ;
9115: LD_ADDR_EXP 27
9119: PUSH
9120: LD_INT 1
9122: ST_TO_ADDR
// if p3 = 11 then
9123: LD_VAR 0 3
9127: PUSH
9128: LD_INT 11
9130: EQUAL
9131: IFFALSE 9141
// sRefresh := true ;
9133: LD_ADDR_EXP 28
9137: PUSH
9138: LD_INT 1
9140: ST_TO_ADDR
// if p3 = 12 then
9141: LD_VAR 0 3
9145: PUSH
9146: LD_INT 12
9148: EQUAL
9149: IFFALSE 9159
// sExp := true ;
9151: LD_ADDR_EXP 29
9155: PUSH
9156: LD_INT 1
9158: ST_TO_ADDR
// if p3 = 13 then
9159: LD_VAR 0 3
9163: PUSH
9164: LD_INT 13
9166: EQUAL
9167: IFFALSE 9177
// sDepot := true ;
9169: LD_ADDR_EXP 30
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// if p3 = 14 then
9177: LD_VAR 0 3
9181: PUSH
9182: LD_INT 14
9184: EQUAL
9185: IFFALSE 9195
// sFlag := true ;
9187: LD_ADDR_EXP 31
9191: PUSH
9192: LD_INT 1
9194: ST_TO_ADDR
// if p3 = 15 then
9195: LD_VAR 0 3
9199: PUSH
9200: LD_INT 15
9202: EQUAL
9203: IFFALSE 9213
// sKamikadze := true ;
9205: LD_ADDR_EXP 39
9209: PUSH
9210: LD_INT 1
9212: ST_TO_ADDR
// if p3 = 16 then
9213: LD_VAR 0 3
9217: PUSH
9218: LD_INT 16
9220: EQUAL
9221: IFFALSE 9231
// sTroll := true ;
9223: LD_ADDR_EXP 40
9227: PUSH
9228: LD_INT 1
9230: ST_TO_ADDR
// if p3 = 17 then
9231: LD_VAR 0 3
9235: PUSH
9236: LD_INT 17
9238: EQUAL
9239: IFFALSE 9249
// sSlow := true ;
9241: LD_ADDR_EXP 41
9245: PUSH
9246: LD_INT 1
9248: ST_TO_ADDR
// if p3 = 18 then
9249: LD_VAR 0 3
9253: PUSH
9254: LD_INT 18
9256: EQUAL
9257: IFFALSE 9267
// sLack := true ;
9259: LD_ADDR_EXP 42
9263: PUSH
9264: LD_INT 1
9266: ST_TO_ADDR
// if p3 = 19 then
9267: LD_VAR 0 3
9271: PUSH
9272: LD_INT 19
9274: EQUAL
9275: IFFALSE 9285
// sTank := true ;
9277: LD_ADDR_EXP 44
9281: PUSH
9282: LD_INT 1
9284: ST_TO_ADDR
// if p3 = 20 then
9285: LD_VAR 0 3
9289: PUSH
9290: LD_INT 20
9292: EQUAL
9293: IFFALSE 9303
// sRemote := true ;
9295: LD_ADDR_EXP 45
9299: PUSH
9300: LD_INT 1
9302: ST_TO_ADDR
// if p3 = 21 then
9303: LD_VAR 0 3
9307: PUSH
9308: LD_INT 21
9310: EQUAL
9311: IFFALSE 9321
// sPowell := true ;
9313: LD_ADDR_EXP 46
9317: PUSH
9318: LD_INT 1
9320: ST_TO_ADDR
// if p3 = 22 then
9321: LD_VAR 0 3
9325: PUSH
9326: LD_INT 22
9328: EQUAL
9329: IFFALSE 9339
// sTeleport := true ;
9331: LD_ADDR_EXP 49
9335: PUSH
9336: LD_INT 1
9338: ST_TO_ADDR
// if p3 = 23 then
9339: LD_VAR 0 3
9343: PUSH
9344: LD_INT 23
9346: EQUAL
9347: IFFALSE 9357
// sOilTower := true ;
9349: LD_ADDR_EXP 51
9353: PUSH
9354: LD_INT 1
9356: ST_TO_ADDR
// if p3 = 24 then
9357: LD_VAR 0 3
9361: PUSH
9362: LD_INT 24
9364: EQUAL
9365: IFFALSE 9375
// sShovel := true ;
9367: LD_ADDR_EXP 52
9371: PUSH
9372: LD_INT 1
9374: ST_TO_ADDR
// if p3 = 25 then
9375: LD_VAR 0 3
9379: PUSH
9380: LD_INT 25
9382: EQUAL
9383: IFFALSE 9393
// sSheik := true ;
9385: LD_ADDR_EXP 53
9389: PUSH
9390: LD_INT 1
9392: ST_TO_ADDR
// if p3 = 26 then
9393: LD_VAR 0 3
9397: PUSH
9398: LD_INT 26
9400: EQUAL
9401: IFFALSE 9411
// sEarthquake := true ;
9403: LD_ADDR_EXP 55
9407: PUSH
9408: LD_INT 1
9410: ST_TO_ADDR
// if p3 = 27 then
9411: LD_VAR 0 3
9415: PUSH
9416: LD_INT 27
9418: EQUAL
9419: IFFALSE 9429
// sAI := true ;
9421: LD_ADDR_EXP 56
9425: PUSH
9426: LD_INT 1
9428: ST_TO_ADDR
// if p3 = 28 then
9429: LD_VAR 0 3
9433: PUSH
9434: LD_INT 28
9436: EQUAL
9437: IFFALSE 9447
// sCargo := true ;
9439: LD_ADDR_EXP 59
9443: PUSH
9444: LD_INT 1
9446: ST_TO_ADDR
// if p3 = 29 then
9447: LD_VAR 0 3
9451: PUSH
9452: LD_INT 29
9454: EQUAL
9455: IFFALSE 9465
// sDLaser := true ;
9457: LD_ADDR_EXP 60
9461: PUSH
9462: LD_INT 1
9464: ST_TO_ADDR
// if p3 = 30 then
9465: LD_VAR 0 3
9469: PUSH
9470: LD_INT 30
9472: EQUAL
9473: IFFALSE 9483
// sExchange := true ;
9475: LD_ADDR_EXP 61
9479: PUSH
9480: LD_INT 1
9482: ST_TO_ADDR
// if p3 = 31 then
9483: LD_VAR 0 3
9487: PUSH
9488: LD_INT 31
9490: EQUAL
9491: IFFALSE 9501
// sFac := true ;
9493: LD_ADDR_EXP 62
9497: PUSH
9498: LD_INT 1
9500: ST_TO_ADDR
// if p3 = 32 then
9501: LD_VAR 0 3
9505: PUSH
9506: LD_INT 32
9508: EQUAL
9509: IFFALSE 9519
// sPower := true ;
9511: LD_ADDR_EXP 63
9515: PUSH
9516: LD_INT 1
9518: ST_TO_ADDR
// if p3 = 33 then
9519: LD_VAR 0 3
9523: PUSH
9524: LD_INT 33
9526: EQUAL
9527: IFFALSE 9537
// sRandom := true ;
9529: LD_ADDR_EXP 64
9533: PUSH
9534: LD_INT 1
9536: ST_TO_ADDR
// if p3 = 34 then
9537: LD_VAR 0 3
9541: PUSH
9542: LD_INT 34
9544: EQUAL
9545: IFFALSE 9555
// sShield := true ;
9547: LD_ADDR_EXP 65
9551: PUSH
9552: LD_INT 1
9554: ST_TO_ADDR
// if p3 = 35 then
9555: LD_VAR 0 3
9559: PUSH
9560: LD_INT 35
9562: EQUAL
9563: IFFALSE 9573
// sTime := true ;
9565: LD_ADDR_EXP 66
9569: PUSH
9570: LD_INT 1
9572: ST_TO_ADDR
// if p3 = 36 then
9573: LD_VAR 0 3
9577: PUSH
9578: LD_INT 36
9580: EQUAL
9581: IFFALSE 9591
// sTools := true ;
9583: LD_ADDR_EXP 67
9587: PUSH
9588: LD_INT 1
9590: ST_TO_ADDR
// if p3 = 101 then
9591: LD_VAR 0 3
9595: PUSH
9596: LD_INT 101
9598: EQUAL
9599: IFFALSE 9609
// sSold := true ;
9601: LD_ADDR_EXP 32
9605: PUSH
9606: LD_INT 1
9608: ST_TO_ADDR
// if p3 = 102 then
9609: LD_VAR 0 3
9613: PUSH
9614: LD_INT 102
9616: EQUAL
9617: IFFALSE 9627
// sDiff := true ;
9619: LD_ADDR_EXP 33
9623: PUSH
9624: LD_INT 1
9626: ST_TO_ADDR
// if p3 = 103 then
9627: LD_VAR 0 3
9631: PUSH
9632: LD_INT 103
9634: EQUAL
9635: IFFALSE 9645
// sFog := true ;
9637: LD_ADDR_EXP 36
9641: PUSH
9642: LD_INT 1
9644: ST_TO_ADDR
// if p3 = 104 then
9645: LD_VAR 0 3
9649: PUSH
9650: LD_INT 104
9652: EQUAL
9653: IFFALSE 9663
// sReset := true ;
9655: LD_ADDR_EXP 37
9659: PUSH
9660: LD_INT 1
9662: ST_TO_ADDR
// if p3 = 105 then
9663: LD_VAR 0 3
9667: PUSH
9668: LD_INT 105
9670: EQUAL
9671: IFFALSE 9681
// sSun := true ;
9673: LD_ADDR_EXP 38
9677: PUSH
9678: LD_INT 1
9680: ST_TO_ADDR
// if p3 = 106 then
9681: LD_VAR 0 3
9685: PUSH
9686: LD_INT 106
9688: EQUAL
9689: IFFALSE 9699
// sTiger := true ;
9691: LD_ADDR_EXP 34
9695: PUSH
9696: LD_INT 1
9698: ST_TO_ADDR
// if p3 = 107 then
9699: LD_VAR 0 3
9703: PUSH
9704: LD_INT 107
9706: EQUAL
9707: IFFALSE 9717
// sBomb := true ;
9709: LD_ADDR_EXP 35
9713: PUSH
9714: LD_INT 1
9716: ST_TO_ADDR
// if p3 = 108 then
9717: LD_VAR 0 3
9721: PUSH
9722: LD_INT 108
9724: EQUAL
9725: IFFALSE 9735
// sWound := true ;
9727: LD_ADDR_EXP 43
9731: PUSH
9732: LD_INT 1
9734: ST_TO_ADDR
// if p3 = 109 then
9735: LD_VAR 0 3
9739: PUSH
9740: LD_INT 109
9742: EQUAL
9743: IFFALSE 9753
// sBetray := true ;
9745: LD_ADDR_EXP 47
9749: PUSH
9750: LD_INT 1
9752: ST_TO_ADDR
// if p3 = 110 then
9753: LD_VAR 0 3
9757: PUSH
9758: LD_INT 110
9760: EQUAL
9761: IFFALSE 9771
// sContamin := true ;
9763: LD_ADDR_EXP 48
9767: PUSH
9768: LD_INT 1
9770: ST_TO_ADDR
// if p3 = 111 then
9771: LD_VAR 0 3
9775: PUSH
9776: LD_INT 111
9778: EQUAL
9779: IFFALSE 9789
// sOil := true ;
9781: LD_ADDR_EXP 50
9785: PUSH
9786: LD_INT 1
9788: ST_TO_ADDR
// if p3 = 112 then
9789: LD_VAR 0 3
9793: PUSH
9794: LD_INT 112
9796: EQUAL
9797: IFFALSE 9807
// sStu := true ;
9799: LD_ADDR_EXP 54
9803: PUSH
9804: LD_INT 1
9806: ST_TO_ADDR
// if p3 = 113 then
9807: LD_VAR 0 3
9811: PUSH
9812: LD_INT 113
9814: EQUAL
9815: IFFALSE 9825
// sBazooka := true ;
9817: LD_ADDR_EXP 57
9821: PUSH
9822: LD_INT 1
9824: ST_TO_ADDR
// if p3 = 114 then
9825: LD_VAR 0 3
9829: PUSH
9830: LD_INT 114
9832: EQUAL
9833: IFFALSE 9843
// sMortar := true ;
9835: LD_ADDR_EXP 58
9839: PUSH
9840: LD_INT 1
9842: ST_TO_ADDR
// if p3 = 115 then
9843: LD_VAR 0 3
9847: PUSH
9848: LD_INT 115
9850: EQUAL
9851: IFFALSE 9861
// sRanger := true ;
9853: LD_ADDR_EXP 68
9857: PUSH
9858: LD_INT 1
9860: ST_TO_ADDR
// end ; end ;
9861: PPOPN 6
9863: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9864: LD_EXP 15
9868: PUSH
9869: LD_EXP 20
9873: AND
9874: IFFALSE 9998
9876: GO 9878
9878: DISABLE
9879: LD_INT 0
9881: PPUSH
9882: PPUSH
// begin enable ;
9883: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9884: LD_ADDR_VAR 0 2
9888: PUSH
9889: LD_INT 22
9891: PUSH
9892: LD_OWVAR 2
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 2
9903: PUSH
9904: LD_INT 34
9906: PUSH
9907: LD_INT 7
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 34
9916: PUSH
9917: LD_INT 45
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 34
9926: PUSH
9927: LD_INT 28
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 34
9936: PUSH
9937: LD_INT 47
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 69
9959: ST_TO_ADDR
// if not tmp then
9960: LD_VAR 0 2
9964: NOT
9965: IFFALSE 9969
// exit ;
9967: GO 9998
// for i in tmp do
9969: LD_ADDR_VAR 0 1
9973: PUSH
9974: LD_VAR 0 2
9978: PUSH
9979: FOR_IN
9980: IFFALSE 9996
// begin SetLives ( i , 0 ) ;
9982: LD_VAR 0 1
9986: PPUSH
9987: LD_INT 0
9989: PPUSH
9990: CALL_OW 234
// end ;
9994: GO 9979
9996: POP
9997: POP
// end ;
9998: PPOPN 2
10000: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10001: LD_EXP 15
10005: PUSH
10006: LD_EXP 21
10010: AND
10011: IFFALSE 10095
10013: GO 10015
10015: DISABLE
10016: LD_INT 0
10018: PPUSH
10019: PPUSH
// begin enable ;
10020: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10021: LD_ADDR_VAR 0 2
10025: PUSH
10026: LD_INT 22
10028: PUSH
10029: LD_OWVAR 2
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 32
10040: PUSH
10041: LD_INT 3
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PPUSH
10052: CALL_OW 69
10056: ST_TO_ADDR
// if not tmp then
10057: LD_VAR 0 2
10061: NOT
10062: IFFALSE 10066
// exit ;
10064: GO 10095
// for i in tmp do
10066: LD_ADDR_VAR 0 1
10070: PUSH
10071: LD_VAR 0 2
10075: PUSH
10076: FOR_IN
10077: IFFALSE 10093
// begin SetLives ( i , 0 ) ;
10079: LD_VAR 0 1
10083: PPUSH
10084: LD_INT 0
10086: PPUSH
10087: CALL_OW 234
// end ;
10091: GO 10076
10093: POP
10094: POP
// end ;
10095: PPOPN 2
10097: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10098: LD_EXP 15
10102: PUSH
10103: LD_EXP 18
10107: AND
10108: IFFALSE 10201
10110: GO 10112
10112: DISABLE
10113: LD_INT 0
10115: PPUSH
// begin enable ;
10116: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10117: LD_ADDR_VAR 0 1
10121: PUSH
10122: LD_INT 22
10124: PUSH
10125: LD_OWVAR 2
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 2
10136: PUSH
10137: LD_INT 25
10139: PUSH
10140: LD_INT 5
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: LD_INT 25
10149: PUSH
10150: LD_INT 9
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 25
10159: PUSH
10160: LD_INT 8
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PPUSH
10177: CALL_OW 69
10181: PUSH
10182: FOR_IN
10183: IFFALSE 10199
// begin SetClass ( i , 1 ) ;
10185: LD_VAR 0 1
10189: PPUSH
10190: LD_INT 1
10192: PPUSH
10193: CALL_OW 336
// end ;
10197: GO 10182
10199: POP
10200: POP
// end ;
10201: PPOPN 1
10203: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10204: LD_EXP 15
10208: PUSH
10209: LD_EXP 19
10213: AND
10214: PUSH
10215: LD_OWVAR 65
10219: PUSH
10220: LD_INT 7
10222: LESS
10223: AND
10224: IFFALSE 10238
10226: GO 10228
10228: DISABLE
// begin enable ;
10229: ENABLE
// game_speed := 7 ;
10230: LD_ADDR_OWVAR 65
10234: PUSH
10235: LD_INT 7
10237: ST_TO_ADDR
// end ;
10238: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10239: LD_EXP 15
10243: PUSH
10244: LD_EXP 22
10248: AND
10249: IFFALSE 10451
10251: GO 10253
10253: DISABLE
10254: LD_INT 0
10256: PPUSH
10257: PPUSH
10258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10259: LD_ADDR_VAR 0 3
10263: PUSH
10264: LD_INT 81
10266: PUSH
10267: LD_OWVAR 2
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL_OW 69
10294: ST_TO_ADDR
// if not tmp then
10295: LD_VAR 0 3
10299: NOT
10300: IFFALSE 10304
// exit ;
10302: GO 10451
// if tmp > 5 then
10304: LD_VAR 0 3
10308: PUSH
10309: LD_INT 5
10311: GREATER
10312: IFFALSE 10324
// k := 5 else
10314: LD_ADDR_VAR 0 2
10318: PUSH
10319: LD_INT 5
10321: ST_TO_ADDR
10322: GO 10334
// k := tmp ;
10324: LD_ADDR_VAR 0 2
10328: PUSH
10329: LD_VAR 0 3
10333: ST_TO_ADDR
// for i := 1 to k do
10334: LD_ADDR_VAR 0 1
10338: PUSH
10339: DOUBLE
10340: LD_INT 1
10342: DEC
10343: ST_TO_ADDR
10344: LD_VAR 0 2
10348: PUSH
10349: FOR_TO
10350: IFFALSE 10449
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10352: LD_VAR 0 3
10356: PUSH
10357: LD_VAR 0 1
10361: ARRAY
10362: PPUSH
10363: LD_VAR 0 1
10367: PUSH
10368: LD_INT 4
10370: MOD
10371: PUSH
10372: LD_INT 1
10374: PLUS
10375: PPUSH
10376: CALL_OW 259
10380: PUSH
10381: LD_INT 10
10383: LESS
10384: IFFALSE 10447
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10386: LD_VAR 0 3
10390: PUSH
10391: LD_VAR 0 1
10395: ARRAY
10396: PPUSH
10397: LD_VAR 0 1
10401: PUSH
10402: LD_INT 4
10404: MOD
10405: PUSH
10406: LD_INT 1
10408: PLUS
10409: PPUSH
10410: LD_VAR 0 3
10414: PUSH
10415: LD_VAR 0 1
10419: ARRAY
10420: PPUSH
10421: LD_VAR 0 1
10425: PUSH
10426: LD_INT 4
10428: MOD
10429: PUSH
10430: LD_INT 1
10432: PLUS
10433: PPUSH
10434: CALL_OW 259
10438: PUSH
10439: LD_INT 1
10441: PLUS
10442: PPUSH
10443: CALL_OW 237
10447: GO 10349
10449: POP
10450: POP
// end ;
10451: PPOPN 3
10453: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10454: LD_EXP 15
10458: PUSH
10459: LD_EXP 23
10463: AND
10464: IFFALSE 10484
10466: GO 10468
10468: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10469: LD_INT 4
10471: PPUSH
10472: LD_OWVAR 2
10476: PPUSH
10477: LD_INT 0
10479: PPUSH
10480: CALL_OW 324
10484: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10485: LD_EXP 15
10489: PUSH
10490: LD_EXP 52
10494: AND
10495: IFFALSE 10515
10497: GO 10499
10499: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10500: LD_INT 19
10502: PPUSH
10503: LD_OWVAR 2
10507: PPUSH
10508: LD_INT 0
10510: PPUSH
10511: CALL_OW 324
10515: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10516: LD_EXP 15
10520: PUSH
10521: LD_EXP 24
10525: AND
10526: IFFALSE 10628
10528: GO 10530
10530: DISABLE
10531: LD_INT 0
10533: PPUSH
10534: PPUSH
// begin enable ;
10535: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10536: LD_ADDR_VAR 0 2
10540: PUSH
10541: LD_INT 22
10543: PUSH
10544: LD_OWVAR 2
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 2
10555: PUSH
10556: LD_INT 34
10558: PUSH
10559: LD_INT 11
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 34
10568: PUSH
10569: LD_INT 30
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: LIST
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PPUSH
10585: CALL_OW 69
10589: ST_TO_ADDR
// if not tmp then
10590: LD_VAR 0 2
10594: NOT
10595: IFFALSE 10599
// exit ;
10597: GO 10628
// for i in tmp do
10599: LD_ADDR_VAR 0 1
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: FOR_IN
10610: IFFALSE 10626
// begin SetLives ( i , 0 ) ;
10612: LD_VAR 0 1
10616: PPUSH
10617: LD_INT 0
10619: PPUSH
10620: CALL_OW 234
// end ;
10624: GO 10609
10626: POP
10627: POP
// end ;
10628: PPOPN 2
10630: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10631: LD_EXP 15
10635: PUSH
10636: LD_EXP 25
10640: AND
10641: IFFALSE 10661
10643: GO 10645
10645: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10646: LD_INT 32
10648: PPUSH
10649: LD_OWVAR 2
10653: PPUSH
10654: LD_INT 0
10656: PPUSH
10657: CALL_OW 324
10661: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10662: LD_EXP 15
10666: PUSH
10667: LD_EXP 26
10671: AND
10672: IFFALSE 10853
10674: GO 10676
10676: DISABLE
10677: LD_INT 0
10679: PPUSH
10680: PPUSH
10681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10682: LD_ADDR_VAR 0 2
10686: PUSH
10687: LD_INT 22
10689: PUSH
10690: LD_OWVAR 2
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 33
10701: PUSH
10702: LD_INT 3
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 69
10717: ST_TO_ADDR
// if not tmp then
10718: LD_VAR 0 2
10722: NOT
10723: IFFALSE 10727
// exit ;
10725: GO 10853
// side := 0 ;
10727: LD_ADDR_VAR 0 3
10731: PUSH
10732: LD_INT 0
10734: ST_TO_ADDR
// for i := 1 to 8 do
10735: LD_ADDR_VAR 0 1
10739: PUSH
10740: DOUBLE
10741: LD_INT 1
10743: DEC
10744: ST_TO_ADDR
10745: LD_INT 8
10747: PUSH
10748: FOR_TO
10749: IFFALSE 10797
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10751: LD_OWVAR 2
10755: PUSH
10756: LD_VAR 0 1
10760: NONEQUAL
10761: PUSH
10762: LD_OWVAR 2
10766: PPUSH
10767: LD_VAR 0 1
10771: PPUSH
10772: CALL_OW 81
10776: PUSH
10777: LD_INT 2
10779: EQUAL
10780: AND
10781: IFFALSE 10795
// begin side := i ;
10783: LD_ADDR_VAR 0 3
10787: PUSH
10788: LD_VAR 0 1
10792: ST_TO_ADDR
// break ;
10793: GO 10797
// end ;
10795: GO 10748
10797: POP
10798: POP
// if not side then
10799: LD_VAR 0 3
10803: NOT
10804: IFFALSE 10808
// exit ;
10806: GO 10853
// for i := 1 to tmp do
10808: LD_ADDR_VAR 0 1
10812: PUSH
10813: DOUBLE
10814: LD_INT 1
10816: DEC
10817: ST_TO_ADDR
10818: LD_VAR 0 2
10822: PUSH
10823: FOR_TO
10824: IFFALSE 10851
// if Prob ( 60 ) then
10826: LD_INT 60
10828: PPUSH
10829: CALL_OW 13
10833: IFFALSE 10849
// SetSide ( i , side ) ;
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_VAR 0 3
10844: PPUSH
10845: CALL_OW 235
10849: GO 10823
10851: POP
10852: POP
// end ;
10853: PPOPN 3
10855: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10856: LD_EXP 15
10860: PUSH
10861: LD_EXP 28
10865: AND
10866: IFFALSE 10985
10868: GO 10870
10870: DISABLE
10871: LD_INT 0
10873: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10874: LD_ADDR_VAR 0 1
10878: PUSH
10879: LD_INT 22
10881: PUSH
10882: LD_OWVAR 2
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 21
10893: PUSH
10894: LD_INT 1
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 3
10903: PUSH
10904: LD_INT 23
10906: PUSH
10907: LD_INT 0
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: PPUSH
10923: CALL_OW 69
10927: PUSH
10928: FOR_IN
10929: IFFALSE 10983
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10931: LD_VAR 0 1
10935: PPUSH
10936: CALL_OW 257
10940: PUSH
10941: LD_INT 1
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: LD_INT 3
10949: PUSH
10950: LD_INT 4
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: IN
10959: IFFALSE 10981
// SetClass ( un , rand ( 1 , 4 ) ) ;
10961: LD_VAR 0 1
10965: PPUSH
10966: LD_INT 1
10968: PPUSH
10969: LD_INT 4
10971: PPUSH
10972: CALL_OW 12
10976: PPUSH
10977: CALL_OW 336
10981: GO 10928
10983: POP
10984: POP
// end ;
10985: PPOPN 1
10987: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10988: LD_EXP 15
10992: PUSH
10993: LD_EXP 27
10997: AND
10998: IFFALSE 11077
11000: GO 11002
11002: DISABLE
11003: LD_INT 0
11005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11006: LD_ADDR_VAR 0 1
11010: PUSH
11011: LD_INT 22
11013: PUSH
11014: LD_OWVAR 2
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 21
11025: PUSH
11026: LD_INT 3
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PPUSH
11037: CALL_OW 69
11041: ST_TO_ADDR
// if not tmp then
11042: LD_VAR 0 1
11046: NOT
11047: IFFALSE 11051
// exit ;
11049: GO 11077
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11051: LD_VAR 0 1
11055: PUSH
11056: LD_INT 1
11058: PPUSH
11059: LD_VAR 0 1
11063: PPUSH
11064: CALL_OW 12
11068: ARRAY
11069: PPUSH
11070: LD_INT 100
11072: PPUSH
11073: CALL_OW 234
// end ;
11077: PPOPN 1
11079: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11080: LD_EXP 15
11084: PUSH
11085: LD_EXP 29
11089: AND
11090: IFFALSE 11188
11092: GO 11094
11094: DISABLE
11095: LD_INT 0
11097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11098: LD_ADDR_VAR 0 1
11102: PUSH
11103: LD_INT 22
11105: PUSH
11106: LD_OWVAR 2
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 21
11117: PUSH
11118: LD_INT 1
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PPUSH
11129: CALL_OW 69
11133: ST_TO_ADDR
// if not tmp then
11134: LD_VAR 0 1
11138: NOT
11139: IFFALSE 11143
// exit ;
11141: GO 11188
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11143: LD_VAR 0 1
11147: PUSH
11148: LD_INT 1
11150: PPUSH
11151: LD_VAR 0 1
11155: PPUSH
11156: CALL_OW 12
11160: ARRAY
11161: PPUSH
11162: LD_INT 1
11164: PPUSH
11165: LD_INT 4
11167: PPUSH
11168: CALL_OW 12
11172: PPUSH
11173: LD_INT 3000
11175: PPUSH
11176: LD_INT 9000
11178: PPUSH
11179: CALL_OW 12
11183: PPUSH
11184: CALL_OW 492
// end ;
11188: PPOPN 1
11190: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11191: LD_EXP 15
11195: PUSH
11196: LD_EXP 30
11200: AND
11201: IFFALSE 11221
11203: GO 11205
11205: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11206: LD_INT 1
11208: PPUSH
11209: LD_OWVAR 2
11213: PPUSH
11214: LD_INT 0
11216: PPUSH
11217: CALL_OW 324
11221: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11222: LD_EXP 15
11226: PUSH
11227: LD_EXP 31
11231: AND
11232: IFFALSE 11315
11234: GO 11236
11236: DISABLE
11237: LD_INT 0
11239: PPUSH
11240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11241: LD_ADDR_VAR 0 2
11245: PUSH
11246: LD_INT 22
11248: PUSH
11249: LD_OWVAR 2
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 21
11260: PUSH
11261: LD_INT 3
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 69
11276: ST_TO_ADDR
// if not tmp then
11277: LD_VAR 0 2
11281: NOT
11282: IFFALSE 11286
// exit ;
11284: GO 11315
// for i in tmp do
11286: LD_ADDR_VAR 0 1
11290: PUSH
11291: LD_VAR 0 2
11295: PUSH
11296: FOR_IN
11297: IFFALSE 11313
// SetBLevel ( i , 10 ) ;
11299: LD_VAR 0 1
11303: PPUSH
11304: LD_INT 10
11306: PPUSH
11307: CALL_OW 241
11311: GO 11296
11313: POP
11314: POP
// end ;
11315: PPOPN 2
11317: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11318: LD_EXP 15
11322: PUSH
11323: LD_EXP 32
11327: AND
11328: IFFALSE 11439
11330: GO 11332
11332: DISABLE
11333: LD_INT 0
11335: PPUSH
11336: PPUSH
11337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11338: LD_ADDR_VAR 0 3
11342: PUSH
11343: LD_INT 22
11345: PUSH
11346: LD_OWVAR 2
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: LD_INT 1
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PPUSH
11369: CALL_OW 69
11373: ST_TO_ADDR
// if not tmp then
11374: LD_VAR 0 3
11378: NOT
11379: IFFALSE 11383
// exit ;
11381: GO 11439
// un := tmp [ rand ( 1 , tmp ) ] ;
11383: LD_ADDR_VAR 0 2
11387: PUSH
11388: LD_VAR 0 3
11392: PUSH
11393: LD_INT 1
11395: PPUSH
11396: LD_VAR 0 3
11400: PPUSH
11401: CALL_OW 12
11405: ARRAY
11406: ST_TO_ADDR
// if Crawls ( un ) then
11407: LD_VAR 0 2
11411: PPUSH
11412: CALL_OW 318
11416: IFFALSE 11427
// ComWalk ( un ) ;
11418: LD_VAR 0 2
11422: PPUSH
11423: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11427: LD_VAR 0 2
11431: PPUSH
11432: LD_INT 5
11434: PPUSH
11435: CALL_OW 336
// end ;
11439: PPOPN 3
11441: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11442: LD_EXP 15
11446: PUSH
11447: LD_EXP 33
11451: AND
11452: PUSH
11453: LD_OWVAR 67
11457: PUSH
11458: LD_INT 3
11460: LESS
11461: AND
11462: IFFALSE 11481
11464: GO 11466
11466: DISABLE
// Difficulty := Difficulty + 1 ;
11467: LD_ADDR_OWVAR 67
11471: PUSH
11472: LD_OWVAR 67
11476: PUSH
11477: LD_INT 1
11479: PLUS
11480: ST_TO_ADDR
11481: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11482: LD_EXP 15
11486: PUSH
11487: LD_EXP 34
11491: AND
11492: IFFALSE 11595
11494: GO 11496
11496: DISABLE
11497: LD_INT 0
11499: PPUSH
// begin for i := 1 to 5 do
11500: LD_ADDR_VAR 0 1
11504: PUSH
11505: DOUBLE
11506: LD_INT 1
11508: DEC
11509: ST_TO_ADDR
11510: LD_INT 5
11512: PUSH
11513: FOR_TO
11514: IFFALSE 11593
// begin uc_nation := nation_nature ;
11516: LD_ADDR_OWVAR 21
11520: PUSH
11521: LD_INT 0
11523: ST_TO_ADDR
// uc_side := 0 ;
11524: LD_ADDR_OWVAR 20
11528: PUSH
11529: LD_INT 0
11531: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11532: LD_ADDR_OWVAR 29
11536: PUSH
11537: LD_INT 12
11539: PUSH
11540: LD_INT 12
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: ST_TO_ADDR
// hc_agressivity := 20 ;
11547: LD_ADDR_OWVAR 35
11551: PUSH
11552: LD_INT 20
11554: ST_TO_ADDR
// hc_class := class_tiger ;
11555: LD_ADDR_OWVAR 28
11559: PUSH
11560: LD_INT 14
11562: ST_TO_ADDR
// hc_gallery :=  ;
11563: LD_ADDR_OWVAR 33
11567: PUSH
11568: LD_STRING 
11570: ST_TO_ADDR
// hc_name :=  ;
11571: LD_ADDR_OWVAR 26
11575: PUSH
11576: LD_STRING 
11578: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11579: CALL_OW 44
11583: PPUSH
11584: LD_INT 0
11586: PPUSH
11587: CALL_OW 51
// end ;
11591: GO 11513
11593: POP
11594: POP
// end ;
11595: PPOPN 1
11597: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11598: LD_EXP 15
11602: PUSH
11603: LD_EXP 35
11607: AND
11608: IFFALSE 11617
11610: GO 11612
11612: DISABLE
// StreamSibBomb ;
11613: CALL 11618 0 0
11617: END
// export function StreamSibBomb ; var i , x , y ; begin
11618: LD_INT 0
11620: PPUSH
11621: PPUSH
11622: PPUSH
11623: PPUSH
// result := false ;
11624: LD_ADDR_VAR 0 1
11628: PUSH
11629: LD_INT 0
11631: ST_TO_ADDR
// for i := 1 to 16 do
11632: LD_ADDR_VAR 0 2
11636: PUSH
11637: DOUBLE
11638: LD_INT 1
11640: DEC
11641: ST_TO_ADDR
11642: LD_INT 16
11644: PUSH
11645: FOR_TO
11646: IFFALSE 11845
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11648: LD_ADDR_VAR 0 3
11652: PUSH
11653: LD_INT 10
11655: PUSH
11656: LD_INT 20
11658: PUSH
11659: LD_INT 30
11661: PUSH
11662: LD_INT 40
11664: PUSH
11665: LD_INT 50
11667: PUSH
11668: LD_INT 60
11670: PUSH
11671: LD_INT 70
11673: PUSH
11674: LD_INT 80
11676: PUSH
11677: LD_INT 90
11679: PUSH
11680: LD_INT 100
11682: PUSH
11683: LD_INT 110
11685: PUSH
11686: LD_INT 120
11688: PUSH
11689: LD_INT 130
11691: PUSH
11692: LD_INT 140
11694: PUSH
11695: LD_INT 150
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: PUSH
11715: LD_INT 1
11717: PPUSH
11718: LD_INT 15
11720: PPUSH
11721: CALL_OW 12
11725: ARRAY
11726: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11727: LD_ADDR_VAR 0 4
11731: PUSH
11732: LD_INT 10
11734: PUSH
11735: LD_INT 20
11737: PUSH
11738: LD_INT 30
11740: PUSH
11741: LD_INT 40
11743: PUSH
11744: LD_INT 50
11746: PUSH
11747: LD_INT 60
11749: PUSH
11750: LD_INT 70
11752: PUSH
11753: LD_INT 80
11755: PUSH
11756: LD_INT 90
11758: PUSH
11759: LD_INT 100
11761: PUSH
11762: LD_INT 110
11764: PUSH
11765: LD_INT 120
11767: PUSH
11768: LD_INT 130
11770: PUSH
11771: LD_INT 140
11773: PUSH
11774: LD_INT 150
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 1
11796: PPUSH
11797: LD_INT 15
11799: PPUSH
11800: CALL_OW 12
11804: ARRAY
11805: ST_TO_ADDR
// if ValidHex ( x , y ) then
11806: LD_VAR 0 3
11810: PPUSH
11811: LD_VAR 0 4
11815: PPUSH
11816: CALL_OW 488
11820: IFFALSE 11843
// begin result := [ x , y ] ;
11822: LD_ADDR_VAR 0 1
11826: PUSH
11827: LD_VAR 0 3
11831: PUSH
11832: LD_VAR 0 4
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: ST_TO_ADDR
// break ;
11841: GO 11845
// end ; end ;
11843: GO 11645
11845: POP
11846: POP
// if result then
11847: LD_VAR 0 1
11851: IFFALSE 11911
// begin ToLua ( playSibBomb() ) ;
11853: LD_STRING playSibBomb()
11855: PPUSH
11856: CALL_OW 559
// wait ( 0 0$14 ) ;
11860: LD_INT 490
11862: PPUSH
11863: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11867: LD_VAR 0 1
11871: PUSH
11872: LD_INT 1
11874: ARRAY
11875: PPUSH
11876: LD_VAR 0 1
11880: PUSH
11881: LD_INT 2
11883: ARRAY
11884: PPUSH
11885: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11889: LD_VAR 0 1
11893: PUSH
11894: LD_INT 1
11896: ARRAY
11897: PPUSH
11898: LD_VAR 0 1
11902: PUSH
11903: LD_INT 2
11905: ARRAY
11906: PPUSH
11907: CALL_OW 429
// end ; end ;
11911: LD_VAR 0 1
11915: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11916: LD_EXP 15
11920: PUSH
11921: LD_EXP 37
11925: AND
11926: IFFALSE 11938
11928: GO 11930
11930: DISABLE
// YouLost (  ) ;
11931: LD_STRING 
11933: PPUSH
11934: CALL_OW 104
11938: END
// every 0 0$1 trigger StreamModeActive and sFog do
11939: LD_EXP 15
11943: PUSH
11944: LD_EXP 36
11948: AND
11949: IFFALSE 11963
11951: GO 11953
11953: DISABLE
// FogOff ( your_side ) ;
11954: LD_OWVAR 2
11958: PPUSH
11959: CALL_OW 344
11963: END
// every 0 0$1 trigger StreamModeActive and sSun do
11964: LD_EXP 15
11968: PUSH
11969: LD_EXP 38
11973: AND
11974: IFFALSE 12002
11976: GO 11978
11978: DISABLE
// begin solar_recharge_percent := 0 ;
11979: LD_ADDR_OWVAR 79
11983: PUSH
11984: LD_INT 0
11986: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11987: LD_INT 10500
11989: PPUSH
11990: CALL_OW 67
// solar_recharge_percent := 100 ;
11994: LD_ADDR_OWVAR 79
11998: PUSH
11999: LD_INT 100
12001: ST_TO_ADDR
// end ;
12002: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12003: LD_EXP 15
12007: PUSH
12008: LD_EXP 39
12012: AND
12013: IFFALSE 12252
12015: GO 12017
12017: DISABLE
12018: LD_INT 0
12020: PPUSH
12021: PPUSH
12022: PPUSH
// begin tmp := [ ] ;
12023: LD_ADDR_VAR 0 3
12027: PUSH
12028: EMPTY
12029: ST_TO_ADDR
// for i := 1 to 6 do
12030: LD_ADDR_VAR 0 1
12034: PUSH
12035: DOUBLE
12036: LD_INT 1
12038: DEC
12039: ST_TO_ADDR
12040: LD_INT 6
12042: PUSH
12043: FOR_TO
12044: IFFALSE 12149
// begin uc_nation := nation_nature ;
12046: LD_ADDR_OWVAR 21
12050: PUSH
12051: LD_INT 0
12053: ST_TO_ADDR
// uc_side := 0 ;
12054: LD_ADDR_OWVAR 20
12058: PUSH
12059: LD_INT 0
12061: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12062: LD_ADDR_OWVAR 29
12066: PUSH
12067: LD_INT 12
12069: PUSH
12070: LD_INT 12
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: ST_TO_ADDR
// hc_agressivity := 20 ;
12077: LD_ADDR_OWVAR 35
12081: PUSH
12082: LD_INT 20
12084: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12085: LD_ADDR_OWVAR 28
12089: PUSH
12090: LD_INT 17
12092: ST_TO_ADDR
// hc_gallery :=  ;
12093: LD_ADDR_OWVAR 33
12097: PUSH
12098: LD_STRING 
12100: ST_TO_ADDR
// hc_name :=  ;
12101: LD_ADDR_OWVAR 26
12105: PUSH
12106: LD_STRING 
12108: ST_TO_ADDR
// un := CreateHuman ;
12109: LD_ADDR_VAR 0 2
12113: PUSH
12114: CALL_OW 44
12118: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12119: LD_VAR 0 2
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 51
// tmp := tmp ^ un ;
12131: LD_ADDR_VAR 0 3
12135: PUSH
12136: LD_VAR 0 3
12140: PUSH
12141: LD_VAR 0 2
12145: ADD
12146: ST_TO_ADDR
// end ;
12147: GO 12043
12149: POP
12150: POP
// repeat wait ( 0 0$1 ) ;
12151: LD_INT 35
12153: PPUSH
12154: CALL_OW 67
// for un in tmp do
12158: LD_ADDR_VAR 0 2
12162: PUSH
12163: LD_VAR 0 3
12167: PUSH
12168: FOR_IN
12169: IFFALSE 12243
// begin if IsDead ( un ) then
12171: LD_VAR 0 2
12175: PPUSH
12176: CALL_OW 301
12180: IFFALSE 12200
// begin tmp := tmp diff un ;
12182: LD_ADDR_VAR 0 3
12186: PUSH
12187: LD_VAR 0 3
12191: PUSH
12192: LD_VAR 0 2
12196: DIFF
12197: ST_TO_ADDR
// continue ;
12198: GO 12168
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12200: LD_VAR 0 2
12204: PPUSH
12205: LD_INT 3
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_INT 0
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PPUSH
12222: CALL_OW 69
12226: PPUSH
12227: LD_VAR 0 2
12231: PPUSH
12232: CALL_OW 74
12236: PPUSH
12237: CALL_OW 115
// end ;
12241: GO 12168
12243: POP
12244: POP
// until not tmp ;
12245: LD_VAR 0 3
12249: NOT
12250: IFFALSE 12151
// end ;
12252: PPOPN 3
12254: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12255: LD_EXP 15
12259: PUSH
12260: LD_EXP 40
12264: AND
12265: IFFALSE 12319
12267: GO 12269
12269: DISABLE
// begin ToLua ( displayTroll(); ) ;
12270: LD_STRING displayTroll();
12272: PPUSH
12273: CALL_OW 559
// wait ( 3 3$00 ) ;
12277: LD_INT 6300
12279: PPUSH
12280: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12284: LD_STRING hideTroll();
12286: PPUSH
12287: CALL_OW 559
// wait ( 1 1$00 ) ;
12291: LD_INT 2100
12293: PPUSH
12294: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12298: LD_STRING displayTroll();
12300: PPUSH
12301: CALL_OW 559
// wait ( 1 1$00 ) ;
12305: LD_INT 2100
12307: PPUSH
12308: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12312: LD_STRING hideTroll();
12314: PPUSH
12315: CALL_OW 559
// end ;
12319: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12320: LD_EXP 15
12324: PUSH
12325: LD_EXP 41
12329: AND
12330: IFFALSE 12393
12332: GO 12334
12334: DISABLE
12335: LD_INT 0
12337: PPUSH
// begin p := 0 ;
12338: LD_ADDR_VAR 0 1
12342: PUSH
12343: LD_INT 0
12345: ST_TO_ADDR
// repeat game_speed := 1 ;
12346: LD_ADDR_OWVAR 65
12350: PUSH
12351: LD_INT 1
12353: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12354: LD_INT 35
12356: PPUSH
12357: CALL_OW 67
// p := p + 1 ;
12361: LD_ADDR_VAR 0 1
12365: PUSH
12366: LD_VAR 0 1
12370: PUSH
12371: LD_INT 1
12373: PLUS
12374: ST_TO_ADDR
// until p >= 60 ;
12375: LD_VAR 0 1
12379: PUSH
12380: LD_INT 60
12382: GREATEREQUAL
12383: IFFALSE 12346
// game_speed := 4 ;
12385: LD_ADDR_OWVAR 65
12389: PUSH
12390: LD_INT 4
12392: ST_TO_ADDR
// end ;
12393: PPOPN 1
12395: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12396: LD_EXP 15
12400: PUSH
12401: LD_EXP 42
12405: AND
12406: IFFALSE 12552
12408: GO 12410
12410: DISABLE
12411: LD_INT 0
12413: PPUSH
12414: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12415: LD_ADDR_VAR 0 1
12419: PUSH
12420: LD_INT 22
12422: PUSH
12423: LD_OWVAR 2
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 2
12434: PUSH
12435: LD_INT 30
12437: PUSH
12438: LD_INT 0
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PUSH
12445: LD_INT 30
12447: PUSH
12448: LD_INT 1
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: LIST
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PPUSH
12464: CALL_OW 69
12468: ST_TO_ADDR
// if not depot then
12469: LD_VAR 0 1
12473: NOT
12474: IFFALSE 12478
// exit ;
12476: GO 12552
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12478: LD_ADDR_VAR 0 2
12482: PUSH
12483: LD_VAR 0 1
12487: PUSH
12488: LD_INT 1
12490: PPUSH
12491: LD_VAR 0 1
12495: PPUSH
12496: CALL_OW 12
12500: ARRAY
12501: PPUSH
12502: CALL_OW 274
12506: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12507: LD_VAR 0 2
12511: PPUSH
12512: LD_INT 1
12514: PPUSH
12515: LD_INT 0
12517: PPUSH
12518: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12522: LD_VAR 0 2
12526: PPUSH
12527: LD_INT 2
12529: PPUSH
12530: LD_INT 0
12532: PPUSH
12533: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12537: LD_VAR 0 2
12541: PPUSH
12542: LD_INT 3
12544: PPUSH
12545: LD_INT 0
12547: PPUSH
12548: CALL_OW 277
// end ;
12552: PPOPN 2
12554: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12555: LD_EXP 15
12559: PUSH
12560: LD_EXP 43
12564: AND
12565: IFFALSE 12662
12567: GO 12569
12569: DISABLE
12570: LD_INT 0
12572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12573: LD_ADDR_VAR 0 1
12577: PUSH
12578: LD_INT 22
12580: PUSH
12581: LD_OWVAR 2
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 21
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 3
12602: PUSH
12603: LD_INT 23
12605: PUSH
12606: LD_INT 0
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 69
12626: ST_TO_ADDR
// if not tmp then
12627: LD_VAR 0 1
12631: NOT
12632: IFFALSE 12636
// exit ;
12634: GO 12662
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12636: LD_VAR 0 1
12640: PUSH
12641: LD_INT 1
12643: PPUSH
12644: LD_VAR 0 1
12648: PPUSH
12649: CALL_OW 12
12653: ARRAY
12654: PPUSH
12655: LD_INT 200
12657: PPUSH
12658: CALL_OW 234
// end ;
12662: PPOPN 1
12664: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12665: LD_EXP 15
12669: PUSH
12670: LD_EXP 44
12674: AND
12675: IFFALSE 12754
12677: GO 12679
12679: DISABLE
12680: LD_INT 0
12682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12683: LD_ADDR_VAR 0 1
12687: PUSH
12688: LD_INT 22
12690: PUSH
12691: LD_OWVAR 2
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 21
12702: PUSH
12703: LD_INT 2
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: ST_TO_ADDR
// if not tmp then
12719: LD_VAR 0 1
12723: NOT
12724: IFFALSE 12728
// exit ;
12726: GO 12754
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12728: LD_VAR 0 1
12732: PUSH
12733: LD_INT 1
12735: PPUSH
12736: LD_VAR 0 1
12740: PPUSH
12741: CALL_OW 12
12745: ARRAY
12746: PPUSH
12747: LD_INT 60
12749: PPUSH
12750: CALL_OW 234
// end ;
12754: PPOPN 1
12756: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12757: LD_EXP 15
12761: PUSH
12762: LD_EXP 45
12766: AND
12767: IFFALSE 12866
12769: GO 12771
12771: DISABLE
12772: LD_INT 0
12774: PPUSH
12775: PPUSH
// begin enable ;
12776: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12777: LD_ADDR_VAR 0 1
12781: PUSH
12782: LD_INT 22
12784: PUSH
12785: LD_OWVAR 2
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 61
12796: PUSH
12797: EMPTY
12798: LIST
12799: PUSH
12800: LD_INT 33
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: PPUSH
12815: CALL_OW 69
12819: ST_TO_ADDR
// if not tmp then
12820: LD_VAR 0 1
12824: NOT
12825: IFFALSE 12829
// exit ;
12827: GO 12866
// for i in tmp do
12829: LD_ADDR_VAR 0 2
12833: PUSH
12834: LD_VAR 0 1
12838: PUSH
12839: FOR_IN
12840: IFFALSE 12864
// if IsControledBy ( i ) then
12842: LD_VAR 0 2
12846: PPUSH
12847: CALL_OW 312
12851: IFFALSE 12862
// ComUnlink ( i ) ;
12853: LD_VAR 0 2
12857: PPUSH
12858: CALL_OW 136
12862: GO 12839
12864: POP
12865: POP
// end ;
12866: PPOPN 2
12868: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12869: LD_EXP 15
12873: PUSH
12874: LD_EXP 46
12878: AND
12879: IFFALSE 13019
12881: GO 12883
12883: DISABLE
12884: LD_INT 0
12886: PPUSH
12887: PPUSH
// begin ToLua ( displayPowell(); ) ;
12888: LD_STRING displayPowell();
12890: PPUSH
12891: CALL_OW 559
// uc_side := 0 ;
12895: LD_ADDR_OWVAR 20
12899: PUSH
12900: LD_INT 0
12902: ST_TO_ADDR
// uc_nation := 2 ;
12903: LD_ADDR_OWVAR 21
12907: PUSH
12908: LD_INT 2
12910: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12911: LD_ADDR_OWVAR 37
12915: PUSH
12916: LD_INT 14
12918: ST_TO_ADDR
// vc_engine := engine_siberite ;
12919: LD_ADDR_OWVAR 39
12923: PUSH
12924: LD_INT 3
12926: ST_TO_ADDR
// vc_control := control_apeman ;
12927: LD_ADDR_OWVAR 38
12931: PUSH
12932: LD_INT 5
12934: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12935: LD_ADDR_OWVAR 40
12939: PUSH
12940: LD_INT 29
12942: ST_TO_ADDR
// un := CreateVehicle ;
12943: LD_ADDR_VAR 0 2
12947: PUSH
12948: CALL_OW 45
12952: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12953: LD_VAR 0 2
12957: PPUSH
12958: LD_INT 1
12960: PPUSH
12961: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12965: LD_INT 35
12967: PPUSH
12968: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12972: LD_VAR 0 2
12976: PPUSH
12977: LD_INT 22
12979: PUSH
12980: LD_OWVAR 2
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PPUSH
12989: CALL_OW 69
12993: PPUSH
12994: LD_VAR 0 2
12998: PPUSH
12999: CALL_OW 74
13003: PPUSH
13004: CALL_OW 115
// until IsDead ( un ) ;
13008: LD_VAR 0 2
13012: PPUSH
13013: CALL_OW 301
13017: IFFALSE 12965
// end ;
13019: PPOPN 2
13021: END
// every 0 0$1 trigger StreamModeActive and sStu do
13022: LD_EXP 15
13026: PUSH
13027: LD_EXP 54
13031: AND
13032: IFFALSE 13048
13034: GO 13036
13036: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13037: LD_STRING displayStucuk();
13039: PPUSH
13040: CALL_OW 559
// ResetFog ;
13044: CALL_OW 335
// end ;
13048: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13049: LD_EXP 15
13053: PUSH
13054: LD_EXP 47
13058: AND
13059: IFFALSE 13200
13061: GO 13063
13063: DISABLE
13064: LD_INT 0
13066: PPUSH
13067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13068: LD_ADDR_VAR 0 2
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_OWVAR 2
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 21
13087: PUSH
13088: LD_INT 1
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PPUSH
13099: CALL_OW 69
13103: ST_TO_ADDR
// if not tmp then
13104: LD_VAR 0 2
13108: NOT
13109: IFFALSE 13113
// exit ;
13111: GO 13200
// un := tmp [ rand ( 1 , tmp ) ] ;
13113: LD_ADDR_VAR 0 1
13117: PUSH
13118: LD_VAR 0 2
13122: PUSH
13123: LD_INT 1
13125: PPUSH
13126: LD_VAR 0 2
13130: PPUSH
13131: CALL_OW 12
13135: ARRAY
13136: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13137: LD_VAR 0 1
13141: PPUSH
13142: LD_INT 0
13144: PPUSH
13145: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13149: LD_VAR 0 1
13153: PPUSH
13154: LD_OWVAR 3
13158: PUSH
13159: LD_VAR 0 1
13163: DIFF
13164: PPUSH
13165: LD_VAR 0 1
13169: PPUSH
13170: CALL_OW 74
13174: PPUSH
13175: CALL_OW 115
// wait ( 0 0$20 ) ;
13179: LD_INT 700
13181: PPUSH
13182: CALL_OW 67
// SetSide ( un , your_side ) ;
13186: LD_VAR 0 1
13190: PPUSH
13191: LD_OWVAR 2
13195: PPUSH
13196: CALL_OW 235
// end ;
13200: PPOPN 2
13202: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13203: LD_EXP 15
13207: PUSH
13208: LD_EXP 48
13212: AND
13213: IFFALSE 13319
13215: GO 13217
13217: DISABLE
13218: LD_INT 0
13220: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13221: LD_ADDR_VAR 0 1
13225: PUSH
13226: LD_INT 22
13228: PUSH
13229: LD_OWVAR 2
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 2
13240: PUSH
13241: LD_INT 30
13243: PUSH
13244: LD_INT 0
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 30
13253: PUSH
13254: LD_INT 1
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PPUSH
13270: CALL_OW 69
13274: ST_TO_ADDR
// if not depot then
13275: LD_VAR 0 1
13279: NOT
13280: IFFALSE 13284
// exit ;
13282: GO 13319
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13284: LD_VAR 0 1
13288: PUSH
13289: LD_INT 1
13291: ARRAY
13292: PPUSH
13293: CALL_OW 250
13297: PPUSH
13298: LD_VAR 0 1
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: CALL_OW 251
13311: PPUSH
13312: LD_INT 70
13314: PPUSH
13315: CALL_OW 495
// end ;
13319: PPOPN 1
13321: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13322: LD_EXP 15
13326: PUSH
13327: LD_EXP 49
13331: AND
13332: IFFALSE 13543
13334: GO 13336
13336: DISABLE
13337: LD_INT 0
13339: PPUSH
13340: PPUSH
13341: PPUSH
13342: PPUSH
13343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13344: LD_ADDR_VAR 0 5
13348: PUSH
13349: LD_INT 22
13351: PUSH
13352: LD_OWVAR 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 21
13363: PUSH
13364: LD_INT 1
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PPUSH
13375: CALL_OW 69
13379: ST_TO_ADDR
// if not tmp then
13380: LD_VAR 0 5
13384: NOT
13385: IFFALSE 13389
// exit ;
13387: GO 13543
// for i in tmp do
13389: LD_ADDR_VAR 0 1
13393: PUSH
13394: LD_VAR 0 5
13398: PUSH
13399: FOR_IN
13400: IFFALSE 13541
// begin d := rand ( 0 , 5 ) ;
13402: LD_ADDR_VAR 0 4
13406: PUSH
13407: LD_INT 0
13409: PPUSH
13410: LD_INT 5
13412: PPUSH
13413: CALL_OW 12
13417: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13418: LD_ADDR_VAR 0 2
13422: PUSH
13423: LD_VAR 0 1
13427: PPUSH
13428: CALL_OW 250
13432: PPUSH
13433: LD_VAR 0 4
13437: PPUSH
13438: LD_INT 3
13440: PPUSH
13441: LD_INT 12
13443: PPUSH
13444: CALL_OW 12
13448: PPUSH
13449: CALL_OW 272
13453: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13454: LD_ADDR_VAR 0 3
13458: PUSH
13459: LD_VAR 0 1
13463: PPUSH
13464: CALL_OW 251
13468: PPUSH
13469: LD_VAR 0 4
13473: PPUSH
13474: LD_INT 3
13476: PPUSH
13477: LD_INT 12
13479: PPUSH
13480: CALL_OW 12
13484: PPUSH
13485: CALL_OW 273
13489: ST_TO_ADDR
// if ValidHex ( x , y ) then
13490: LD_VAR 0 2
13494: PPUSH
13495: LD_VAR 0 3
13499: PPUSH
13500: CALL_OW 488
13504: IFFALSE 13539
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13506: LD_VAR 0 1
13510: PPUSH
13511: LD_VAR 0 2
13515: PPUSH
13516: LD_VAR 0 3
13520: PPUSH
13521: LD_INT 3
13523: PPUSH
13524: LD_INT 6
13526: PPUSH
13527: CALL_OW 12
13531: PPUSH
13532: LD_INT 1
13534: PPUSH
13535: CALL_OW 483
// end ;
13539: GO 13399
13541: POP
13542: POP
// end ;
13543: PPOPN 5
13545: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13546: LD_EXP 15
13550: PUSH
13551: LD_EXP 50
13555: AND
13556: IFFALSE 13650
13558: GO 13560
13560: DISABLE
13561: LD_INT 0
13563: PPUSH
13564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13565: LD_ADDR_VAR 0 2
13569: PUSH
13570: LD_INT 22
13572: PUSH
13573: LD_OWVAR 2
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 32
13584: PUSH
13585: LD_INT 1
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 21
13594: PUSH
13595: LD_INT 2
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 69
13611: ST_TO_ADDR
// if not tmp then
13612: LD_VAR 0 2
13616: NOT
13617: IFFALSE 13621
// exit ;
13619: GO 13650
// for i in tmp do
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: LD_VAR 0 2
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13648
// SetFuel ( i , 0 ) ;
13634: LD_VAR 0 1
13638: PPUSH
13639: LD_INT 0
13641: PPUSH
13642: CALL_OW 240
13646: GO 13631
13648: POP
13649: POP
// end ;
13650: PPOPN 2
13652: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13653: LD_EXP 15
13657: PUSH
13658: LD_EXP 51
13662: AND
13663: IFFALSE 13729
13665: GO 13667
13667: DISABLE
13668: LD_INT 0
13670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13671: LD_ADDR_VAR 0 1
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_OWVAR 2
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 30
13690: PUSH
13691: LD_INT 29
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 69
13706: ST_TO_ADDR
// if not tmp then
13707: LD_VAR 0 1
13711: NOT
13712: IFFALSE 13716
// exit ;
13714: GO 13729
// DestroyUnit ( tmp [ 1 ] ) ;
13716: LD_VAR 0 1
13720: PUSH
13721: LD_INT 1
13723: ARRAY
13724: PPUSH
13725: CALL_OW 65
// end ;
13729: PPOPN 1
13731: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13732: LD_EXP 15
13736: PUSH
13737: LD_EXP 53
13741: AND
13742: IFFALSE 13871
13744: GO 13746
13746: DISABLE
13747: LD_INT 0
13749: PPUSH
// begin uc_side := 0 ;
13750: LD_ADDR_OWVAR 20
13754: PUSH
13755: LD_INT 0
13757: ST_TO_ADDR
// uc_nation := nation_arabian ;
13758: LD_ADDR_OWVAR 21
13762: PUSH
13763: LD_INT 2
13765: ST_TO_ADDR
// hc_gallery :=  ;
13766: LD_ADDR_OWVAR 33
13770: PUSH
13771: LD_STRING 
13773: ST_TO_ADDR
// hc_name :=  ;
13774: LD_ADDR_OWVAR 26
13778: PUSH
13779: LD_STRING 
13781: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13782: LD_INT 1
13784: PPUSH
13785: LD_INT 11
13787: PPUSH
13788: LD_INT 10
13790: PPUSH
13791: CALL_OW 380
// un := CreateHuman ;
13795: LD_ADDR_VAR 0 1
13799: PUSH
13800: CALL_OW 44
13804: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13805: LD_VAR 0 1
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13817: LD_INT 35
13819: PPUSH
13820: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13824: LD_VAR 0 1
13828: PPUSH
13829: LD_INT 22
13831: PUSH
13832: LD_OWVAR 2
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PPUSH
13841: CALL_OW 69
13845: PPUSH
13846: LD_VAR 0 1
13850: PPUSH
13851: CALL_OW 74
13855: PPUSH
13856: CALL_OW 115
// until IsDead ( un ) ;
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL_OW 301
13869: IFFALSE 13817
// end ;
13871: PPOPN 1
13873: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13874: LD_EXP 15
13878: PUSH
13879: LD_EXP 55
13883: AND
13884: IFFALSE 13896
13886: GO 13888
13888: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13889: LD_STRING earthquake(getX(game), 0, 32)
13891: PPUSH
13892: CALL_OW 559
13896: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13897: LD_EXP 15
13901: PUSH
13902: LD_EXP 56
13906: AND
13907: IFFALSE 13998
13909: GO 13911
13911: DISABLE
13912: LD_INT 0
13914: PPUSH
// begin enable ;
13915: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13916: LD_ADDR_VAR 0 1
13920: PUSH
13921: LD_INT 22
13923: PUSH
13924: LD_OWVAR 2
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 21
13935: PUSH
13936: LD_INT 2
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 33
13945: PUSH
13946: LD_INT 3
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: LIST
13957: PPUSH
13958: CALL_OW 69
13962: ST_TO_ADDR
// if not tmp then
13963: LD_VAR 0 1
13967: NOT
13968: IFFALSE 13972
// exit ;
13970: GO 13998
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13972: LD_VAR 0 1
13976: PUSH
13977: LD_INT 1
13979: PPUSH
13980: LD_VAR 0 1
13984: PPUSH
13985: CALL_OW 12
13989: ARRAY
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: CALL_OW 234
// end ;
13998: PPOPN 1
14000: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14001: LD_EXP 15
14005: PUSH
14006: LD_EXP 57
14010: AND
14011: IFFALSE 14152
14013: GO 14015
14015: DISABLE
14016: LD_INT 0
14018: PPUSH
14019: PPUSH
14020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14021: LD_ADDR_VAR 0 3
14025: PUSH
14026: LD_INT 22
14028: PUSH
14029: LD_OWVAR 2
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 25
14040: PUSH
14041: LD_INT 1
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 69
14056: ST_TO_ADDR
// if not tmp then
14057: LD_VAR 0 3
14061: NOT
14062: IFFALSE 14066
// exit ;
14064: GO 14152
// un := tmp [ rand ( 1 , tmp ) ] ;
14066: LD_ADDR_VAR 0 2
14070: PUSH
14071: LD_VAR 0 3
14075: PUSH
14076: LD_INT 1
14078: PPUSH
14079: LD_VAR 0 3
14083: PPUSH
14084: CALL_OW 12
14088: ARRAY
14089: ST_TO_ADDR
// if Crawls ( un ) then
14090: LD_VAR 0 2
14094: PPUSH
14095: CALL_OW 318
14099: IFFALSE 14110
// ComWalk ( un ) ;
14101: LD_VAR 0 2
14105: PPUSH
14106: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14110: LD_VAR 0 2
14114: PPUSH
14115: LD_INT 9
14117: PPUSH
14118: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14122: LD_INT 28
14124: PPUSH
14125: LD_OWVAR 2
14129: PPUSH
14130: LD_INT 2
14132: PPUSH
14133: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14137: LD_INT 29
14139: PPUSH
14140: LD_OWVAR 2
14144: PPUSH
14145: LD_INT 2
14147: PPUSH
14148: CALL_OW 322
// end ;
14152: PPOPN 3
14154: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14155: LD_EXP 15
14159: PUSH
14160: LD_EXP 58
14164: AND
14165: IFFALSE 14276
14167: GO 14169
14169: DISABLE
14170: LD_INT 0
14172: PPUSH
14173: PPUSH
14174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14175: LD_ADDR_VAR 0 3
14179: PUSH
14180: LD_INT 22
14182: PUSH
14183: LD_OWVAR 2
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 25
14194: PUSH
14195: LD_INT 1
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PPUSH
14206: CALL_OW 69
14210: ST_TO_ADDR
// if not tmp then
14211: LD_VAR 0 3
14215: NOT
14216: IFFALSE 14220
// exit ;
14218: GO 14276
// un := tmp [ rand ( 1 , tmp ) ] ;
14220: LD_ADDR_VAR 0 2
14224: PUSH
14225: LD_VAR 0 3
14229: PUSH
14230: LD_INT 1
14232: PPUSH
14233: LD_VAR 0 3
14237: PPUSH
14238: CALL_OW 12
14242: ARRAY
14243: ST_TO_ADDR
// if Crawls ( un ) then
14244: LD_VAR 0 2
14248: PPUSH
14249: CALL_OW 318
14253: IFFALSE 14264
// ComWalk ( un ) ;
14255: LD_VAR 0 2
14259: PPUSH
14260: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14264: LD_VAR 0 2
14268: PPUSH
14269: LD_INT 8
14271: PPUSH
14272: CALL_OW 336
// end ;
14276: PPOPN 3
14278: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14279: LD_EXP 15
14283: PUSH
14284: LD_EXP 59
14288: AND
14289: IFFALSE 14433
14291: GO 14293
14293: DISABLE
14294: LD_INT 0
14296: PPUSH
14297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14298: LD_ADDR_VAR 0 2
14302: PUSH
14303: LD_INT 22
14305: PUSH
14306: LD_OWVAR 2
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 21
14317: PUSH
14318: LD_INT 2
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 2
14327: PUSH
14328: LD_INT 34
14330: PUSH
14331: LD_INT 12
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 34
14340: PUSH
14341: LD_INT 51
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 34
14350: PUSH
14351: LD_INT 32
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: ST_TO_ADDR
// if not tmp then
14374: LD_VAR 0 2
14378: NOT
14379: IFFALSE 14383
// exit ;
14381: GO 14433
// for i in tmp do
14383: LD_ADDR_VAR 0 1
14387: PUSH
14388: LD_VAR 0 2
14392: PUSH
14393: FOR_IN
14394: IFFALSE 14431
// if GetCargo ( i , mat_artifact ) = 0 then
14396: LD_VAR 0 1
14400: PPUSH
14401: LD_INT 4
14403: PPUSH
14404: CALL_OW 289
14408: PUSH
14409: LD_INT 0
14411: EQUAL
14412: IFFALSE 14429
// SetCargo ( i , mat_siberit , 100 ) ;
14414: LD_VAR 0 1
14418: PPUSH
14419: LD_INT 3
14421: PPUSH
14422: LD_INT 100
14424: PPUSH
14425: CALL_OW 290
14429: GO 14393
14431: POP
14432: POP
// end ;
14433: PPOPN 2
14435: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14436: LD_EXP 15
14440: PUSH
14441: LD_EXP 60
14445: AND
14446: IFFALSE 14599
14448: GO 14450
14450: DISABLE
14451: LD_INT 0
14453: PPUSH
14454: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14455: LD_ADDR_VAR 0 2
14459: PUSH
14460: LD_INT 22
14462: PUSH
14463: LD_OWVAR 2
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PPUSH
14472: CALL_OW 69
14476: ST_TO_ADDR
// if not tmp then
14477: LD_VAR 0 2
14481: NOT
14482: IFFALSE 14486
// exit ;
14484: GO 14599
// for i := 1 to 2 do
14486: LD_ADDR_VAR 0 1
14490: PUSH
14491: DOUBLE
14492: LD_INT 1
14494: DEC
14495: ST_TO_ADDR
14496: LD_INT 2
14498: PUSH
14499: FOR_TO
14500: IFFALSE 14597
// begin uc_side := your_side ;
14502: LD_ADDR_OWVAR 20
14506: PUSH
14507: LD_OWVAR 2
14511: ST_TO_ADDR
// uc_nation := nation_american ;
14512: LD_ADDR_OWVAR 21
14516: PUSH
14517: LD_INT 1
14519: ST_TO_ADDR
// vc_chassis := us_morphling ;
14520: LD_ADDR_OWVAR 37
14524: PUSH
14525: LD_INT 5
14527: ST_TO_ADDR
// vc_engine := engine_siberite ;
14528: LD_ADDR_OWVAR 39
14532: PUSH
14533: LD_INT 3
14535: ST_TO_ADDR
// vc_control := control_computer ;
14536: LD_ADDR_OWVAR 38
14540: PUSH
14541: LD_INT 3
14543: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14544: LD_ADDR_OWVAR 40
14548: PUSH
14549: LD_INT 10
14551: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
14552: CALL_OW 45
14556: PPUSH
14557: LD_VAR 0 2
14561: PUSH
14562: LD_INT 1
14564: ARRAY
14565: PPUSH
14566: CALL_OW 250
14570: PPUSH
14571: LD_VAR 0 2
14575: PUSH
14576: LD_INT 1
14578: ARRAY
14579: PPUSH
14580: CALL_OW 251
14584: PPUSH
14585: LD_INT 12
14587: PPUSH
14588: LD_INT 1
14590: PPUSH
14591: CALL_OW 50
// end ;
14595: GO 14499
14597: POP
14598: POP
// end ;
14599: PPOPN 2
14601: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14602: LD_EXP 15
14606: PUSH
14607: LD_EXP 61
14611: AND
14612: IFFALSE 14834
14614: GO 14616
14616: DISABLE
14617: LD_INT 0
14619: PPUSH
14620: PPUSH
14621: PPUSH
14622: PPUSH
14623: PPUSH
14624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14625: LD_ADDR_VAR 0 6
14629: PUSH
14630: LD_INT 22
14632: PUSH
14633: LD_OWVAR 2
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 21
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: LD_INT 3
14654: PUSH
14655: LD_INT 23
14657: PUSH
14658: LD_INT 0
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: PPUSH
14674: CALL_OW 69
14678: ST_TO_ADDR
// if not tmp then
14679: LD_VAR 0 6
14683: NOT
14684: IFFALSE 14688
// exit ;
14686: GO 14834
// s1 := rand ( 1 , 4 ) ;
14688: LD_ADDR_VAR 0 2
14692: PUSH
14693: LD_INT 1
14695: PPUSH
14696: LD_INT 4
14698: PPUSH
14699: CALL_OW 12
14703: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14704: LD_ADDR_VAR 0 4
14708: PUSH
14709: LD_VAR 0 6
14713: PUSH
14714: LD_INT 1
14716: ARRAY
14717: PPUSH
14718: LD_VAR 0 2
14722: PPUSH
14723: CALL_OW 259
14727: ST_TO_ADDR
// if s1 = 1 then
14728: LD_VAR 0 2
14732: PUSH
14733: LD_INT 1
14735: EQUAL
14736: IFFALSE 14756
// s2 := rand ( 2 , 4 ) else
14738: LD_ADDR_VAR 0 3
14742: PUSH
14743: LD_INT 2
14745: PPUSH
14746: LD_INT 4
14748: PPUSH
14749: CALL_OW 12
14753: ST_TO_ADDR
14754: GO 14764
// s2 := 1 ;
14756: LD_ADDR_VAR 0 3
14760: PUSH
14761: LD_INT 1
14763: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14764: LD_ADDR_VAR 0 5
14768: PUSH
14769: LD_VAR 0 6
14773: PUSH
14774: LD_INT 1
14776: ARRAY
14777: PPUSH
14778: LD_VAR 0 3
14782: PPUSH
14783: CALL_OW 259
14787: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14788: LD_VAR 0 6
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: LD_VAR 0 2
14801: PPUSH
14802: LD_VAR 0 5
14806: PPUSH
14807: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14811: LD_VAR 0 6
14815: PUSH
14816: LD_INT 1
14818: ARRAY
14819: PPUSH
14820: LD_VAR 0 3
14824: PPUSH
14825: LD_VAR 0 4
14829: PPUSH
14830: CALL_OW 237
// end ;
14834: PPOPN 6
14836: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14837: LD_EXP 15
14841: PUSH
14842: LD_EXP 62
14846: AND
14847: IFFALSE 14926
14849: GO 14851
14851: DISABLE
14852: LD_INT 0
14854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14855: LD_ADDR_VAR 0 1
14859: PUSH
14860: LD_INT 22
14862: PUSH
14863: LD_OWVAR 2
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 30
14874: PUSH
14875: LD_INT 3
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PPUSH
14886: CALL_OW 69
14890: ST_TO_ADDR
// if not tmp then
14891: LD_VAR 0 1
14895: NOT
14896: IFFALSE 14900
// exit ;
14898: GO 14926
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14900: LD_VAR 0 1
14904: PUSH
14905: LD_INT 1
14907: PPUSH
14908: LD_VAR 0 1
14912: PPUSH
14913: CALL_OW 12
14917: ARRAY
14918: PPUSH
14919: LD_INT 1
14921: PPUSH
14922: CALL_OW 234
// end ;
14926: PPOPN 1
14928: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14929: LD_EXP 15
14933: PUSH
14934: LD_EXP 63
14938: AND
14939: IFFALSE 15051
14941: GO 14943
14943: DISABLE
14944: LD_INT 0
14946: PPUSH
14947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_OWVAR 2
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 2
14967: PUSH
14968: LD_INT 30
14970: PUSH
14971: LD_INT 27
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 30
14980: PUSH
14981: LD_INT 26
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 30
14990: PUSH
14991: LD_INT 28
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: ST_TO_ADDR
// if not tmp then
15013: LD_VAR 0 2
15017: NOT
15018: IFFALSE 15022
// exit ;
15020: GO 15051
// for i in tmp do
15022: LD_ADDR_VAR 0 1
15026: PUSH
15027: LD_VAR 0 2
15031: PUSH
15032: FOR_IN
15033: IFFALSE 15049
// SetLives ( i , 1 ) ;
15035: LD_VAR 0 1
15039: PPUSH
15040: LD_INT 1
15042: PPUSH
15043: CALL_OW 234
15047: GO 15032
15049: POP
15050: POP
// end ;
15051: PPOPN 2
15053: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15054: LD_EXP 15
15058: PUSH
15059: LD_EXP 64
15063: AND
15064: IFFALSE 15338
15066: GO 15068
15068: DISABLE
15069: LD_INT 0
15071: PPUSH
15072: PPUSH
15073: PPUSH
// begin i := rand ( 1 , 7 ) ;
15074: LD_ADDR_VAR 0 1
15078: PUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_INT 7
15084: PPUSH
15085: CALL_OW 12
15089: ST_TO_ADDR
// case i of 1 :
15090: LD_VAR 0 1
15094: PUSH
15095: LD_INT 1
15097: DOUBLE
15098: EQUAL
15099: IFTRUE 15103
15101: GO 15113
15103: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15104: LD_STRING earthquake(getX(game), 0, 32)
15106: PPUSH
15107: CALL_OW 559
15111: GO 15338
15113: LD_INT 2
15115: DOUBLE
15116: EQUAL
15117: IFTRUE 15121
15119: GO 15135
15121: POP
// begin ToLua ( displayStucuk(); ) ;
15122: LD_STRING displayStucuk();
15124: PPUSH
15125: CALL_OW 559
// ResetFog ;
15129: CALL_OW 335
// end ; 3 :
15133: GO 15338
15135: LD_INT 3
15137: DOUBLE
15138: EQUAL
15139: IFTRUE 15143
15141: GO 15247
15143: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15144: LD_ADDR_VAR 0 2
15148: PUSH
15149: LD_INT 22
15151: PUSH
15152: LD_OWVAR 2
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 25
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PPUSH
15175: CALL_OW 69
15179: ST_TO_ADDR
// if not tmp then
15180: LD_VAR 0 2
15184: NOT
15185: IFFALSE 15189
// exit ;
15187: GO 15338
// un := tmp [ rand ( 1 , tmp ) ] ;
15189: LD_ADDR_VAR 0 3
15193: PUSH
15194: LD_VAR 0 2
15198: PUSH
15199: LD_INT 1
15201: PPUSH
15202: LD_VAR 0 2
15206: PPUSH
15207: CALL_OW 12
15211: ARRAY
15212: ST_TO_ADDR
// if Crawls ( un ) then
15213: LD_VAR 0 3
15217: PPUSH
15218: CALL_OW 318
15222: IFFALSE 15233
// ComWalk ( un ) ;
15224: LD_VAR 0 3
15228: PPUSH
15229: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15233: LD_VAR 0 3
15237: PPUSH
15238: LD_INT 8
15240: PPUSH
15241: CALL_OW 336
// end ; 4 :
15245: GO 15338
15247: LD_INT 4
15249: DOUBLE
15250: EQUAL
15251: IFTRUE 15255
15253: GO 15316
15255: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15256: LD_ADDR_VAR 0 2
15260: PUSH
15261: LD_INT 22
15263: PUSH
15264: LD_OWVAR 2
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 30
15275: PUSH
15276: LD_INT 29
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PPUSH
15287: CALL_OW 69
15291: ST_TO_ADDR
// if not tmp then
15292: LD_VAR 0 2
15296: NOT
15297: IFFALSE 15301
// exit ;
15299: GO 15338
// DestroyUnit ( tmp [ 1 ] ) ;
15301: LD_VAR 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 65
// end ; 5 .. 7 :
15314: GO 15338
15316: LD_INT 5
15318: DOUBLE
15319: GREATEREQUAL
15320: IFFALSE 15328
15322: LD_INT 7
15324: DOUBLE
15325: LESSEQUAL
15326: IFTRUE 15330
15328: GO 15337
15330: POP
// StreamSibBomb ; end ;
15331: CALL 11618 0 0
15335: GO 15338
15337: POP
// end ;
15338: PPOPN 3
15340: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15341: LD_EXP 15
15345: PUSH
15346: LD_EXP 65
15350: AND
15351: IFFALSE 15507
15353: GO 15355
15355: DISABLE
15356: LD_INT 0
15358: PPUSH
15359: PPUSH
15360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15361: LD_ADDR_VAR 0 2
15365: PUSH
15366: LD_INT 81
15368: PUSH
15369: LD_OWVAR 2
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 2
15380: PUSH
15381: LD_INT 21
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 21
15393: PUSH
15394: LD_INT 2
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PPUSH
15410: CALL_OW 69
15414: ST_TO_ADDR
// if not tmp then
15415: LD_VAR 0 2
15419: NOT
15420: IFFALSE 15424
// exit ;
15422: GO 15507
// p := 0 ;
15424: LD_ADDR_VAR 0 3
15428: PUSH
15429: LD_INT 0
15431: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15432: LD_INT 35
15434: PPUSH
15435: CALL_OW 67
// p := p + 1 ;
15439: LD_ADDR_VAR 0 3
15443: PUSH
15444: LD_VAR 0 3
15448: PUSH
15449: LD_INT 1
15451: PLUS
15452: ST_TO_ADDR
// for i in tmp do
15453: LD_ADDR_VAR 0 1
15457: PUSH
15458: LD_VAR 0 2
15462: PUSH
15463: FOR_IN
15464: IFFALSE 15495
// if GetLives ( i ) < 1000 then
15466: LD_VAR 0 1
15470: PPUSH
15471: CALL_OW 256
15475: PUSH
15476: LD_INT 1000
15478: LESS
15479: IFFALSE 15493
// SetLives ( i , 1000 ) ;
15481: LD_VAR 0 1
15485: PPUSH
15486: LD_INT 1000
15488: PPUSH
15489: CALL_OW 234
15493: GO 15463
15495: POP
15496: POP
// until p > 20 ;
15497: LD_VAR 0 3
15501: PUSH
15502: LD_INT 20
15504: GREATER
15505: IFFALSE 15432
// end ;
15507: PPOPN 3
15509: END
// every 0 0$1 trigger StreamModeActive and sTime do
15510: LD_EXP 15
15514: PUSH
15515: LD_EXP 66
15519: AND
15520: IFFALSE 15555
15522: GO 15524
15524: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15525: LD_INT 28
15527: PPUSH
15528: LD_OWVAR 2
15532: PPUSH
15533: LD_INT 2
15535: PPUSH
15536: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15540: LD_INT 30
15542: PPUSH
15543: LD_OWVAR 2
15547: PPUSH
15548: LD_INT 2
15550: PPUSH
15551: CALL_OW 322
// end ;
15555: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15556: LD_EXP 15
15560: PUSH
15561: LD_EXP 67
15565: AND
15566: IFFALSE 15687
15568: GO 15570
15570: DISABLE
15571: LD_INT 0
15573: PPUSH
15574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15575: LD_ADDR_VAR 0 2
15579: PUSH
15580: LD_INT 22
15582: PUSH
15583: LD_OWVAR 2
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 21
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 3
15604: PUSH
15605: LD_INT 23
15607: PUSH
15608: LD_INT 0
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: LIST
15623: PPUSH
15624: CALL_OW 69
15628: ST_TO_ADDR
// if not tmp then
15629: LD_VAR 0 2
15633: NOT
15634: IFFALSE 15638
// exit ;
15636: GO 15687
// for i in tmp do
15638: LD_ADDR_VAR 0 1
15642: PUSH
15643: LD_VAR 0 2
15647: PUSH
15648: FOR_IN
15649: IFFALSE 15685
// begin if Crawls ( i ) then
15651: LD_VAR 0 1
15655: PPUSH
15656: CALL_OW 318
15660: IFFALSE 15671
// ComWalk ( i ) ;
15662: LD_VAR 0 1
15666: PPUSH
15667: CALL_OW 138
// SetClass ( i , 2 ) ;
15671: LD_VAR 0 1
15675: PPUSH
15676: LD_INT 2
15678: PPUSH
15679: CALL_OW 336
// end ;
15683: GO 15648
15685: POP
15686: POP
// end ;
15687: PPOPN 2
15689: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15690: LD_EXP 15
15694: PUSH
15695: LD_EXP 68
15699: AND
15700: IFFALSE 15981
15702: GO 15704
15704: DISABLE
15705: LD_INT 0
15707: PPUSH
15708: PPUSH
15709: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15710: LD_OWVAR 2
15714: PPUSH
15715: LD_INT 9
15717: PPUSH
15718: LD_INT 1
15720: PPUSH
15721: LD_INT 1
15723: PPUSH
15724: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15728: LD_INT 9
15730: PPUSH
15731: LD_OWVAR 2
15735: PPUSH
15736: CALL_OW 343
// uc_side := 9 ;
15740: LD_ADDR_OWVAR 20
15744: PUSH
15745: LD_INT 9
15747: ST_TO_ADDR
// uc_nation := 2 ;
15748: LD_ADDR_OWVAR 21
15752: PUSH
15753: LD_INT 2
15755: ST_TO_ADDR
// hc_name := Dark Warrior ;
15756: LD_ADDR_OWVAR 26
15760: PUSH
15761: LD_STRING Dark Warrior
15763: ST_TO_ADDR
// hc_gallery :=  ;
15764: LD_ADDR_OWVAR 33
15768: PUSH
15769: LD_STRING 
15771: ST_TO_ADDR
// hc_noskilllimit := true ;
15772: LD_ADDR_OWVAR 76
15776: PUSH
15777: LD_INT 1
15779: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15780: LD_ADDR_OWVAR 31
15784: PUSH
15785: LD_INT 30
15787: PUSH
15788: LD_INT 30
15790: PUSH
15791: LD_INT 30
15793: PUSH
15794: LD_INT 30
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: ST_TO_ADDR
// un := CreateHuman ;
15803: LD_ADDR_VAR 0 3
15807: PUSH
15808: CALL_OW 44
15812: ST_TO_ADDR
// hc_noskilllimit := false ;
15813: LD_ADDR_OWVAR 76
15817: PUSH
15818: LD_INT 0
15820: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15821: LD_VAR 0 3
15825: PPUSH
15826: LD_INT 1
15828: PPUSH
15829: CALL_OW 51
// p := 0 ;
15833: LD_ADDR_VAR 0 2
15837: PUSH
15838: LD_INT 0
15840: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15841: LD_INT 35
15843: PPUSH
15844: CALL_OW 67
// p := p + 1 ;
15848: LD_ADDR_VAR 0 2
15852: PUSH
15853: LD_VAR 0 2
15857: PUSH
15858: LD_INT 1
15860: PLUS
15861: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15862: LD_VAR 0 3
15866: PPUSH
15867: CALL_OW 256
15871: PUSH
15872: LD_INT 1000
15874: LESS
15875: IFFALSE 15889
// SetLives ( un , 1000 ) ;
15877: LD_VAR 0 3
15881: PPUSH
15882: LD_INT 1000
15884: PPUSH
15885: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15889: LD_VAR 0 3
15893: PPUSH
15894: LD_INT 81
15896: PUSH
15897: LD_OWVAR 2
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 91
15908: PUSH
15909: LD_VAR 0 3
15913: PUSH
15914: LD_INT 30
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: LIST
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PPUSH
15926: CALL_OW 69
15930: PPUSH
15931: LD_VAR 0 3
15935: PPUSH
15936: CALL_OW 74
15940: PPUSH
15941: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15945: LD_VAR 0 2
15949: PUSH
15950: LD_INT 60
15952: GREATER
15953: PUSH
15954: LD_VAR 0 3
15958: PPUSH
15959: CALL_OW 301
15963: OR
15964: IFFALSE 15841
// if un then
15966: LD_VAR 0 3
15970: IFFALSE 15981
// RemoveUnit ( un ) ;
15972: LD_VAR 0 3
15976: PPUSH
15977: CALL_OW 64
// end ;
15981: PPOPN 3
15983: END
