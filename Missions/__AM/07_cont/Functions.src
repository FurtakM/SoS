// Prepare Hero for use
// ident - ident from start.txt - 'JMM' for example
// exist_mode
//   - false if unit not exist in save
//   - true if unit already exist in save
// example: JMM := PrepareUnit('JMM', false);
Export Function PrepareUnit(ident, exist_mode);
var unit;
begin

if exist_mode then
   unit := CreateCharacter(mission_prev_prefix&ident)
  else
   unit := NewCharacter(ident);

result := unit;
End;

// example: PrepareTank(1, 1, us_medium_wheeled, engine_combustion, control_manual, us_machine_gun, 80);
Export Function PrepareTank(side, nation, chassis, engine, control, weapon, fuel);
begin
uc_side := side;
uc_nation := nation;

vc_chassis := chassis;
vc_engine := engine;
vc_control := control;
vc_weapon := weapon;
vc_fuel_battery := fuel;

result := CreateVehicle;
End;

Export Function GetRandom(sex);
var i, filter;
begin
filter := FilterAllUnits([[f_side, 1], [f_type, unit_human], [f_ok]]) diff [JMM, Brown, Donaldson, Bobby, Cyrus, Lisa, Frank, Gladstone, Kikuchi, Khatam];

if not filter then
   exit;

result := UnitFilter(filter, [f_sex, sex]);
End;

Export Function SayX(units, ident);
var i;
begin
result := false;

if not units then
   exit;

for i in units do
    if IsOk(i) then
       begin
       Say(i, ident);
       result := i;
       break;
       end;
End;

Export Function GetBaseBuildings(base);
var tmp, i;
begin
result := [];
tmp := FilterAllUnits([f_type, unit_building]);

if not tmp then
   exit;

for i in tmp do
    if GetBase(i) = base then
       result := result ^ i;
End;

Export Function GetTurretWeapon(tower);
var hex, list, factories, base, i, j, x, y, nat, h, tmp, height, side, fac_list, weapon;
begin
result := false;

if not tower or not GetBType(tower) in [b_bunker, b_turret] then
   exit;

nat := GetNation(tower);
side := GetSide(tower);

x := GetX(tower);
y := GetY(tower);

if not x or not y then
   exit;

weapon := 0;
fac_list := [ru_heavy_machine_gun, ru_gatling_gun, ru_gun, ru_heavy_gun];


if not fac_list then
   exit;

list := [
             [us_gatling_gun, us_double_gun, us_laser,
              us_double_laser, us_heavy_gun, us_rocket_launcher, us_radar],
             [ar_gun,
              ar_rocket_launcher, ar_flame_thrower, ar_radar],
             [ru_gatling_gun, ru_gun, ru_heavy_gun,
              ru_rocket_launcher, ru_rocket, ru_time_lapser]
        ][nat];

// filter list
for i in list do
    if not i in fac_list then
       list := list diff i;

if not list then
   exit;

// time lapsers
if nat = nation_russian and ru_time_lapser in list and GetTech(tech_lapser, side) = state_researched then
   begin
   if not FilterAllUnits([[f_side, side], [f_bweapon, ru_time_lapser], [f_dist, tower, 10]]) then
      weapon := ru_time_lapser;
   end;

// radar
if nat in [1,2] and (us_radar in list or ar_radar in list) and GetTech(tech_radar, side) = state_researched then
   begin
   if not FilterAllUnits([[f_side, side], [f_or, [f_bweapon, us_radar], [f_bweapon, ar_radar]], [f_dist, tower, 18]]) and
      FilterAllUnits([[[f_side, side], [f_or, [f_btype, b_bunker], [f_btype, b_turret]], [f_dist, tower, 12]]]) > 2 then
      weapon := [us_radar, ar_radar][nat];
   end;

// rocket_launcher
if not weapon and GetTech(tech_rocket, side) = state_researched and
   (us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list) then
   begin
   hex := GetHexInfo(x, y);

   if hex[1] then
      exit;

   height := hex[2];
   tmp := [0, 2, 3, 5];

   for i in tmp do
       begin
       j := [ShiftX(x, i, 5), ShiftY(y, i, 5)];

       if ValidHex(j[1], j[2]) then
          begin
          hex := GetHexInfo(j[1], j[2]);

          if hex[1] then
             continue;

          h := hex[2];

          if h+7 < height then
             begin
             weapon := [us_rocket_launcher, ar_rocket_launcher, ru_rocket_launcher][nat];
             break;
             end;
          end;
       end;
   end;

// group of weapons
if not weapon then
   begin
   list := list diff [us_radar, ar_radar, ru_time_lapser];
   tmp := FilterAllUnits([[f_side, side], [f_dist, tower, 6], [f_not, [f_bweapon, 0]]]);

   for i in tmp do
       list := list diff GetBWeapon(i);

   if list then
      weapon := list[rand(1, list)];
   end;

if weapon then
   begin
   tmp := CostOfWeapon(weapon);
   j := GetBase(tower);

   if GetResourceType(j, mat_cans) >= tmp[1] and
      GetResourceType(j, mat_oil) >= tmp[2] and
      GetResourceType(j, mat_siberit) >= tmp[3] then
      result := weapon;
   end;
End;

Export Function GoToAnotherTower(un, b, x, y);
var i, filter, t, side;
begin
if not un or not IsOk(un) then
   exit;

side := GetSide(un);

filter := FilterAllUnits([[f_side, side], [f_btype, b_bunker], [f_ok], [f_empty]]) diff b;

if not filter then
   begin
   filter := FilterAllUnits([[f_side, side], [f_btype, b_barracks]]);

   if debug then
      display_strings := [filter, '1'];

   if not filter then
      begin
      ComMoveXY(un, x, y); 
      exit;
      end;

   repeat
     t := NearestUnitToUnit(filter, un);

     if UnitsInside(t) = 6 then
        filter := filter diff t
       else
        break;
   until UnitsInside(t) < 6 or not filter;

   display_strings := [filter, t];

   if not filter then
      ComMoveXY(un, x, y) // ?
     else
      ComEnterUnit(un, t);
   end
  else
   begin

   repeat
    t := NearestUnitToUnit(filter, un);

    if (GetTag(t) = 7) then
        filter := filter diff t;
    until GetTag(t) <> 7 or not filter;

    if GetTag(t) <> 7 then
       begin
       SetTag(t, 7);
       ComEnterUnit(un, t);
       end
      else
       ComMoveXY(un, x, y);
    end;
End;

// Return true if base don't have enough energy
// param: base
Export Function BaseNeedEnergy(base);
var i, tmp;
begin
if not base then
   exit;

// [need, need_max, prod, max_prod]
tmp := GetEnergy(GetBase(base));

if tmp[1] > tmp[4] then
   result := true
  else
   result := false;
End;

Export Function FilterPeople(side);
begin
result := FilterAllUnits([[f_side, side], [f_type, unit_human]]);
End;

Export Function FilterDrivers(side);
begin
result := FilterAllUnits([[f_side, side], [f_not, [f_outside]]]);
End;

Export Function FilterPeopleArea(side, area);
begin
result := FilterUnitsInArea(area, [[f_side, 1], [f_type, unit_human]]);
End;

Export Function FilterDriversArea(side, area);
var i, tmp;
begin
tmp := FilterUnitsInArea(area, [[f_side, 1], [f_type, unit_vehicle], [f_not, [f_empty]]]);

result := [];

if not tmp then
   exit;

for i in tmp do
    result := result union IsDrivenBy(i);

result := result diff 0;
End;

Export Function FilterBuildings(side);
begin
result := FilterAllUnits([[f_side, side], [f_type, unit_building]]);
End;

// animals
Export Function PrepareNature;
var i, animal, nat_area;
begin

     uc_side = 0;
     uc_nation = 0;

     nat_area := wildArea;

     InitHc;

     // birds
     for i = 1 to 4 do
     begin
     hc_class = 18;
     hc_gallery = '';
     hc_face_number = 1;

     animal := CreateHuman;
     PlaceUnitArea(animal, nat_area, false);
     end;

     // tigers
     for i = 1 to 6 do
     begin
     hc_class = class_tiger;
     hc_gallery = '';
     hc_agressivity = Rand(0, 10);
     hc_face_number = 3;

     animal := CreateHuman;
     PlaceUnitArea(animal, nat_area, false);
     end;

     // horses
     for i = 1 to 2 do
     begin
     hc_class = 21;
     hc_gallery = '';
     hc_agressivity = 0;
     hc_face_number = 5;

     animal := CreateHuman;
     PlaceUnitArea(animal, nat_area, false);
     end;


     // enhidna
     for i = 1 to 6 do
     begin
     hc_class = 13;
     hc_gallery = '';
     hc_face_number = 4;

     animal := CreateHuman;
     PlaceUnitArea(animal, nat_area, false);
     end;

     // fish
     for i = 1 to 2 do
     begin
     hc_class = 20;
     hc_gallery = '';
     hc_face_number = 2;

     animal := CreateHuman;
     PlaceUnitXYR(animal, 101, 37, 3, false);
     end;

     // mastodonts
     for i = 1 to 1 do
     begin
     vc_chassis := 31;
     vc_control := control_rider;
     animal := CreateVehicle;
     PlaceUnitArea(animal, nat_area, false);
     end;

End;

Export Function NearbyTowerHasEnergy(unit);
var i, tmp, energy;
begin
result := [];
tmp := FilterAllUnits([[f_enemy, GetSide(unit)], [f_dist, unit, 15], [f_or, [f_btype, b_bunker], [f_btype, b_turret]]]);

if not tmp then
   exit;

for i in tmp do
    begin
    energy := GetEnergy(GetBase(i));

    if energy[4] > energy[1] then
       begin
       result := i;
       break;
       end;
    end;

End;