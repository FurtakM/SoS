// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8696 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 38347 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 32950 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 32950 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 32950 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 32950 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 32950 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 32950 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 32950 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 32950 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 32950 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 32950 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4794
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; if Difficulty > 3 then
4763: LD_OWVAR 67
4767: PUSH
4768: LD_INT 3
4770: GREATER
4771: IFFALSE 4794
// begin bc_type := b_bunker ;
4773: LD_ADDR_OWVAR 42
4777: PUSH
4778: LD_INT 32
4780: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4781: LD_INT 44
4783: PPUSH
4784: LD_INT 50
4786: PPUSH
4787: LD_INT 4
4789: PPUSH
4790: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4794: LD_ADDR_VAR 0 9
4798: PUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 3
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 30
4814: PUSH
4815: LD_INT 0
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PPUSH
4841: CALL_OW 69
4845: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4846: LD_ADDR_VAR 0 10
4850: PUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 30
4866: PUSH
4867: LD_INT 6
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 7
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 30
4886: PUSH
4887: LD_INT 8
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4909: LD_ADDR_VAR 0 11
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4943: LD_ADDR_VAR 0 12
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 31
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4977: LD_ADDR_VAR 0 13
4981: PUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 3
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 32
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PPUSH
5006: CALL_OW 69
5010: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5011: LD_ADDR_VAR 0 14
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 30
5028: PUSH
5029: LD_INT 33
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 69
5044: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5045: LD_ADDR_VAR 0 15
5049: PUSH
5050: LD_INT 42
5052: PUSH
5053: LD_INT 5
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 43
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 44
5072: PUSH
5073: LD_INT 30
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 46
5082: PUSH
5083: LD_INT 15
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5096: LD_ADDR_VAR 0 16
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 6
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5119: LD_ADDR_VAR 0 6
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: LD_INT 7
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5148: LD_INT 16
5150: PPUSH
5151: LD_STRING am_tukh
5153: PPUSH
5154: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5158: LD_ADDR_VAR 0 2
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: PUSH
5178: FOR_IN
5179: IFFALSE 5216
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5181: LD_VAR 0 2
5185: PPUSH
5186: LD_INT 4
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: LD_INT 6
5194: PUSH
5195: LD_INT 7
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PUSH
5204: LD_OWVAR 67
5208: ARRAY
5209: PPUSH
5210: CALL_OW 241
5214: GO 5178
5216: POP
5217: POP
// for i in dep_list do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 9
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5273
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: CALL_OW 274
5240: PPUSH
5241: LD_INT 1
5243: PPUSH
5244: LD_INT 1000
5246: PPUSH
5247: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 274
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_INT 1000
5266: PPUSH
5267: CALL_OW 277
// end ;
5271: GO 5228
5273: POP
5274: POP
// InitHc ;
5275: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 70 , 80 ] [ Difficulty ] div 100 ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_VAR 0 13
5288: PUSH
5289: LD_INT 45
5291: PUSH
5292: LD_INT 60
5294: PUSH
5295: LD_INT 70
5297: PUSH
5298: LD_INT 80
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: MUL
5313: PUSH
5314: LD_INT 100
5316: DIV
5317: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5318: LD_ADDR_VAR 0 16
5322: PUSH
5323: LD_VAR 0 16
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_VAR 0 8
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// tmp := [ ] ;
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: EMPTY
5347: ST_TO_ADDR
// for i in bunker_list do
5348: LD_ADDR_VAR 0 2
5352: PUSH
5353: LD_VAR 0 13
5357: PUSH
5358: FOR_IN
5359: IFFALSE 5455
// if i mod 10 + 1 < tmp then
5361: LD_VAR 0 2
5365: PUSH
5366: LD_INT 10
5368: MOD
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: PUSH
5374: LD_VAR 0 8
5378: LESS
5379: IFFALSE 5424
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5381: LD_ADDR_VAR 0 8
5385: PUSH
5386: LD_VAR 0 8
5390: PPUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 3
5398: PPUSH
5399: LD_INT 5
5401: PPUSH
5402: CALL_OW 12
5406: MOD
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5453
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_VAR 0 8
5438: PUSH
5439: LD_INT 1
5441: PLUS
5442: PPUSH
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 2
5452: ST_TO_ADDR
5453: GO 5358
5455: POP
5456: POP
// bunker_list := tmp ;
5457: LD_ADDR_VAR 0 13
5461: PUSH
5462: LD_VAR 0 8
5466: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 13
5476: PUSH
5477: LD_VAR 0 14
5481: ADD
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5507
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_VAR 0 2
5495: PPUSH
5496: CALL 2225 0 1
5500: PPUSH
5501: CALL_OW 431
5505: GO 5483
5507: POP
5508: POP
// while ( personel_counter [ 1 ] ) do
5509: LD_VAR 0 16
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: IFFALSE 5625
// begin i := rand ( 1 , bunker_list ) ;
5519: LD_ADDR_VAR 0 2
5523: PUSH
5524: LD_INT 1
5526: PPUSH
5527: LD_VAR 0 13
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: LD_VAR 0 6
5547: PPUSH
5548: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5552: CALL_OW 44
5556: PPUSH
5557: LD_VAR 0 13
5561: PUSH
5562: LD_VAR 0 2
5566: ARRAY
5567: PPUSH
5568: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5572: LD_ADDR_VAR 0 13
5576: PUSH
5577: LD_VAR 0 13
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL_OW 3
5591: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5592: LD_ADDR_VAR 0 16
5596: PUSH
5597: LD_VAR 0 16
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_VAR 0 16
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PUSH
5614: LD_INT 1
5616: MINUS
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// end ;
5623: GO 5509
// for i = 1 to personel_counter [ 2 ] do
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: DOUBLE
5631: LD_INT 1
5633: DEC
5634: ST_TO_ADDR
5635: LD_VAR 0 16
5639: PUSH
5640: LD_INT 2
5642: ARRAY
5643: PUSH
5644: FOR_TO
5645: IFFALSE 5676
// begin PrepareHuman ( false , 2 , skill ) ;
5647: LD_INT 0
5649: PPUSH
5650: LD_INT 2
5652: PPUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5662: CALL_OW 44
5666: PPUSH
5667: LD_INT 16
5669: PPUSH
5670: CALL_OW 52
// end ;
5674: GO 5644
5676: POP
5677: POP
// for i = 1 to personel_counter [ 3 ] do
5678: LD_ADDR_VAR 0 2
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 16
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PUSH
5697: FOR_TO
5698: IFFALSE 5745
// begin PrepareHuman ( false , 3 , skill ) ;
5700: LD_INT 0
5702: PPUSH
5703: LD_INT 3
5705: PPUSH
5706: LD_VAR 0 6
5710: PPUSH
5711: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5715: CALL_OW 44
5719: PPUSH
5720: LD_VAR 0 11
5724: PUSH
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 2
5732: MOD
5733: PUSH
5734: LD_INT 1
5736: PLUS
5737: ARRAY
5738: PPUSH
5739: CALL_OW 52
// end ;
5743: GO 5697
5745: POP
5746: POP
// for i = 1 to personel_counter [ 4 ] do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 16
5761: PUSH
5762: LD_INT 4
5764: ARRAY
5765: PUSH
5766: FOR_TO
5767: IFFALSE 5804
// begin PrepareHuman ( false , 4 , skill ) ;
5769: LD_INT 0
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: LD_VAR 0 6
5779: PPUSH
5780: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5784: CALL_OW 44
5788: PPUSH
5789: LD_VAR 0 10
5793: PUSH
5794: LD_INT 1
5796: ARRAY
5797: PPUSH
5798: CALL_OW 52
// end ;
5802: GO 5766
5804: POP
5805: POP
// for i in breastworks_list do
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: LD_VAR 0 12
5815: PUSH
5816: FOR_IN
5817: IFFALSE 5929
// begin r := GetDir ( i ) ;
5819: LD_ADDR_VAR 0 4
5823: PUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: CALL_OW 254
5833: ST_TO_ADDR
// if r > 3 then
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: GREATER
5842: IFFALSE 5860
// r := r - 3 else
5844: LD_ADDR_VAR 0 4
5848: PUSH
5849: LD_VAR 0 4
5853: PUSH
5854: LD_INT 3
5856: MINUS
5857: ST_TO_ADDR
5858: GO 5874
// r := r + 3 ;
5860: LD_ADDR_VAR 0 4
5864: PUSH
5865: LD_VAR 0 4
5869: PUSH
5870: LD_INT 3
5872: PLUS
5873: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 6
5884: PPUSH
5885: CALL_OW 380
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 5
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// SetDir ( un , r ) ;
5899: LD_VAR 0 5
5903: PPUSH
5904: LD_VAR 0 4
5908: PPUSH
5909: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5913: LD_VAR 0 5
5917: PPUSH
5918: LD_VAR 0 2
5922: PPUSH
5923: CALL_OW 52
// end ;
5927: GO 5816
5929: POP
5930: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 22
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 25
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 69
5964: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5965: LD_ADDR_VAR 0 4
5969: PUSH
5970: LD_INT 4
5972: PUSH
5973: LD_INT 5
5975: PUSH
5976: LD_INT 6
5978: PUSH
5979: LD_INT 6
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_OWVAR 67
5992: ARRAY
5993: ST_TO_ADDR
// for i = 1 to r do
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: DOUBLE
6000: LD_INT 1
6002: DEC
6003: ST_TO_ADDR
6004: LD_VAR 0 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6183
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6012: LD_ADDR_VAR 0 5
6016: PUSH
6017: LD_INT 3
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: LD_INT 22
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 24
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 3
6044: MOD
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: ARRAY
6050: PPUSH
6051: LD_INT 1
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 43
6059: PUSH
6060: LD_INT 44
6062: PUSH
6063: LD_INT 42
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_VAR 0 2
6075: PUSH
6076: LD_INT 3
6078: MOD
6079: PUSH
6080: LD_INT 1
6082: PLUS
6083: ARRAY
6084: PPUSH
6085: LD_INT 100
6087: PPUSH
6088: CALL 520 0 7
6092: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6093: LD_VAR 0 5
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 5
6103: PPUSH
6104: CALL_OW 12
6108: PPUSH
6109: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6113: LD_VAR 0 5
6117: PPUSH
6118: LD_INT 5
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// if i > tmp - 2 then
6128: LD_VAR 0 2
6132: PUSH
6133: LD_VAR 0 8
6137: PUSH
6138: LD_INT 2
6140: MINUS
6141: GREATER
6142: IFFALSE 6146
// continue ;
6144: GO 6009
// ComExitBuilding ( tmp [ i ] ) ;
6146: LD_VAR 0 8
6150: PUSH
6151: LD_VAR 0 2
6155: ARRAY
6156: PPUSH
6157: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6161: LD_VAR 0 8
6165: PUSH
6166: LD_VAR 0 2
6170: ARRAY
6171: PPUSH
6172: LD_VAR 0 5
6176: PPUSH
6177: CALL_OW 180
// end ;
6181: GO 6009
6183: POP
6184: POP
// end ;
6185: LD_VAR 0 1
6189: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6190: LD_INT 22
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 25
6202: PUSH
6203: LD_INT 2
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: IFFALSE 6950
6220: GO 6222
6222: DISABLE
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
6229: PPUSH
// begin enable ;
6230: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: LD_INT 6
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 70
6274: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6275: LD_ADDR_VAR 0 4
6279: PUSH
6280: LD_INT 22
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 25
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6309: LD_VAR 0 2
6313: NOT
6314: PUSH
6315: LD_EXP 20
6319: NOT
6320: AND
6321: IFFALSE 6391
// begin for i in engs do
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6389
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 256
6345: PUSH
6346: LD_INT 1000
6348: EQUAL
6349: PUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL_OW 314
6359: NOT
6360: AND
6361: PUSH
6362: LD_VAR 0 1
6366: PPUSH
6367: CALL_OW 310
6371: NOT
6372: AND
6373: IFFALSE 6387
// ComEnterUnit ( i , ru_dep_main ) ;
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_INT 16
6382: PPUSH
6383: CALL_OW 120
6387: GO 6333
6389: POP
6390: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6391: LD_VAR 0 4
6395: PPUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 24
6401: PUSH
6402: LD_INT 650
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: IFFALSE 6510
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_VAR 0 4
6428: PPUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 650
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// for i in tmp do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_VAR 0 3
6460: PUSH
6461: FOR_IN
6462: IFFALSE 6508
// if not IsInArea ( i , mainBaseArea ) then
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 14
6471: PPUSH
6472: CALL_OW 308
6476: NOT
6477: IFFALSE 6506
// begin ComMoveXY ( i , 129 , 125 ) ;
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_INT 129
6486: PPUSH
6487: LD_INT 125
6489: PPUSH
6490: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6494: LD_VAR 0 1
6498: PPUSH
6499: LD_INT 1050
6501: PPUSH
6502: CALL_OW 202
// end ;
6506: GO 6461
6508: POP
6509: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6510: LD_ADDR_VAR 0 4
6514: PUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 650
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PPUSH
6530: CALL_OW 72
6534: ST_TO_ADDR
// if not engs then
6535: LD_VAR 0 4
6539: NOT
6540: IFFALSE 6544
// exit ;
6542: GO 6950
// if filter then
6544: LD_VAR 0 2
6548: IFFALSE 6807
// begin for i in engs do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_VAR 0 4
6559: PUSH
6560: FOR_IN
6561: IFFALSE 6585
// if IsInUnit ( i ) then
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL_OW 310
6572: IFFALSE 6583
// ComExitBuilding ( i ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 122
6583: GO 6560
6585: POP
6586: POP
// wait ( 3 ) ;
6587: LD_INT 3
6589: PPUSH
6590: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6594: LD_VAR 0 2
6598: PUSH
6599: LD_INT 2
6601: GREATEREQUAL
6602: PUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 2
6610: GREATEREQUAL
6611: AND
6612: IFFALSE 6760
// begin for i = 1 to engs / 2 do
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: DOUBLE
6620: LD_INT 1
6622: DEC
6623: ST_TO_ADDR
6624: LD_VAR 0 4
6628: PUSH
6629: LD_INT 2
6631: DIVREAL
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6680
// if not HasTask ( engs [ i ] ) then
6636: LD_VAR 0 4
6640: PUSH
6641: LD_VAR 0 1
6645: ARRAY
6646: PPUSH
6647: CALL_OW 314
6651: NOT
6652: IFFALSE 6678
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: LD_VAR 0 2
6669: PUSH
6670: LD_INT 1
6672: ARRAY
6673: PPUSH
6674: CALL_OW 130
6678: GO 6633
6680: POP
6681: POP
// for i = engs / 2 + 1 to engs do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: DOUBLE
6688: LD_VAR 0 4
6692: PUSH
6693: LD_INT 2
6695: DIVREAL
6696: PUSH
6697: LD_INT 1
6699: PLUS
6700: DEC
6701: ST_TO_ADDR
6702: LD_VAR 0 4
6706: PUSH
6707: FOR_TO
6708: IFFALSE 6756
// if not HasTask ( engs [ i ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_VAR 0 1
6719: ARRAY
6720: PPUSH
6721: CALL_OW 314
6725: NOT
6726: IFFALSE 6754
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6728: LD_VAR 0 4
6732: PUSH
6733: LD_VAR 0 1
6737: ARRAY
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 2
6748: ARRAY
6749: PPUSH
6750: CALL_OW 130
6754: GO 6707
6756: POP
6757: POP
// end else
6758: GO 6807
// for i in engs do
6760: LD_ADDR_VAR 0 1
6764: PUSH
6765: LD_VAR 0 4
6769: PUSH
6770: FOR_IN
6771: IFFALSE 6805
// if not HasTask ( i ) then
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 314
6782: NOT
6783: IFFALSE 6803
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: PPUSH
6799: CALL_OW 130
6803: GO 6770
6805: POP
6806: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 81
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6827: LD_EXP 20
6831: PUSH
6832: LD_VAR 0 2
6836: NOT
6837: AND
6838: IFFALSE 6950
// begin ComExitBuilding ( engs ) ;
6840: LD_VAR 0 4
6844: PPUSH
6845: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: CALL_OW 73
6876: PPUSH
6877: LD_EXP 20
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 3
6893: ARRAY
6894: PPUSH
6895: CALL_OW 297
6899: PUSH
6900: LD_INT 10
6902: GREATER
6903: IFFALSE 6950
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6905: LD_VAR 0 4
6909: PPUSH
6910: LD_EXP 20
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 20
6923: PUSH
6924: LD_INT 2
6926: ARRAY
6927: PPUSH
6928: LD_EXP 20
6932: PUSH
6933: LD_INT 3
6935: ARRAY
6936: PPUSH
6937: LD_EXP 20
6941: PUSH
6942: LD_INT 4
6944: ARRAY
6945: PPUSH
6946: CALL_OW 145
// end ; end ;
6950: PPOPN 5
6952: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6953: LD_INT 16
6955: PPUSH
6956: CALL_OW 256
6960: PUSH
6961: LD_INT 250
6963: LESS
6964: IFFALSE 7154
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6973: LD_ADDR_VAR 0 2
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_INT 3
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: LD_INT 25
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 25
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7036: LD_VAR 0 2
7040: PPUSH
7041: CALL_OW 122
// wait ( 3 ) ;
7045: LD_INT 3
7047: PPUSH
7048: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: LD_INT 156
7059: PPUSH
7060: LD_INT 211
7062: PPUSH
7063: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7067: LD_INT 35
7069: PPUSH
7070: CALL_OW 67
// for i in tmp do
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: LD_VAR 0 2
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7145
// if IsInArea ( i , escapeArea ) then
7087: LD_VAR 0 1
7091: PPUSH
7092: LD_INT 15
7094: PPUSH
7095: CALL_OW 308
7099: IFFALSE 7128
// begin RemoveUnit ( i ) ;
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 64
// tmp := tmp diff i ;
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_VAR 0 1
7124: DIFF
7125: ST_TO_ADDR
// end else
7126: GO 7143
// ComMoveXY ( i , 156 , 211 ) ;
7128: LD_VAR 0 1
7132: PPUSH
7133: LD_INT 156
7135: PPUSH
7136: LD_INT 211
7138: PPUSH
7139: CALL_OW 111
7143: GO 7084
7145: POP
7146: POP
// until not tmp ;
7147: LD_VAR 0 2
7151: NOT
7152: IFFALSE 7067
// end ;
7154: PPOPN 2
7156: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 4
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: IFFALSE 7439
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// begin enable ;
7195: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7196: LD_ADDR_VAR 0 2
7200: PUSH
7201: LD_INT 14
7203: PPUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 1000
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 70
7250: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 4
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// if not doc then
7285: LD_VAR 0 3
7289: NOT
7290: IFFALSE 7294
// exit ;
7292: GO 7439
// if not tmp then
7294: LD_VAR 0 2
7298: NOT
7299: IFFALSE 7390
// begin if not IsInUnit ( doc [ 1 ] ) then
7301: LD_VAR 0 3
7305: PUSH
7306: LD_INT 1
7308: ARRAY
7309: PPUSH
7310: CALL_OW 310
7314: NOT
7315: IFFALSE 7388
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7317: LD_VAR 0 3
7321: PPUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 6
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 30
7357: PUSH
7358: LD_INT 8
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 69
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: PPUSH
7384: CALL_OW 120
// exit ;
7388: GO 7439
// end ; if IsInUnit ( doc [ 1 ] ) then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: ARRAY
7398: PPUSH
7399: CALL_OW 310
7403: IFFALSE 7414
// ComExitBuilding ( doc ) ;
7405: LD_VAR 0 3
7409: PPUSH
7410: CALL_OW 122
// wait ( 3 ) ;
7414: LD_INT 3
7416: PPUSH
7417: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7421: LD_VAR 0 3
7425: PPUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: CALL_OW 128
// end ;
7439: PPOPN 3
7441: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7442: LD_INT 22
7444: PUSH
7445: LD_INT 3
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 25
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PPUSH
7466: CALL_OW 69
7470: PUSH
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: AND
7500: IFFALSE 8259
7502: GO 7504
7504: DISABLE
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
// begin enable ;
7513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 3
7541: PUSH
7542: LD_INT 58
7544: PUSH
7545: EMPTY
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: PPUSH
7557: CALL_OW 69
7561: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: LD_INT 10
7569: PUSH
7570: LD_INT 11
7572: PUSH
7573: LD_INT 12
7575: PUSH
7576: LD_INT 14
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: ST_TO_ADDR
// area := 0 ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// attacking := false ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_INT 0
7600: ST_TO_ADDR
// for i in tmp do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: FOR_IN
7612: IFFALSE 8040
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 22
7621: PUSH
7622: LD_INT 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PPUSH
7629: CALL_OW 69
7633: PPUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 74
7643: PPUSH
7644: CALL_OW 296
7648: PUSH
7649: LD_INT 10
7651: LESS
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 314
7662: NOT
7663: AND
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 110
7674: NOT
7675: AND
7676: PUSH
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 256
7686: PUSH
7687: LD_INT 650
7689: GREATER
7690: AND
7691: IFFALSE 7735
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7693: LD_VAR 0 1
7697: PPUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PPUSH
7708: CALL_OW 69
7712: PPUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 74
7722: PPUSH
7723: CALL_OW 115
// attacking := true ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 1
7734: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 110
7744: NOT
7745: PUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 256
7755: PUSH
7756: LD_INT 650
7758: LESS
7759: AND
7760: PUSH
7761: LD_VAR 0 1
7765: PPUSH
7766: CALL_OW 247
7770: PUSH
7771: LD_INT 2
7773: EQUAL
7774: AND
7775: IFFALSE 7804
// begin SetTag ( i , 1 ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7789: LD_VAR 0 1
7793: PPUSH
7794: LD_INT 130
7796: PPUSH
7797: LD_INT 139
7799: PPUSH
7800: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 110
7813: PUSH
7814: LD_INT 1
7816: EQUAL
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: LD_INT 130
7825: PPUSH
7826: LD_INT 139
7828: PPUSH
7829: CALL_OW 297
7833: PUSH
7834: LD_INT 6
7836: LESS
7837: AND
7838: IFFALSE 7852
// SetTag ( i , 2 ) ;
7840: LD_VAR 0 1
7844: PPUSH
7845: LD_INT 2
7847: PPUSH
7848: CALL_OW 109
// if GetTag ( i ) = 2 then
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 110
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: IFFALSE 8000
// begin if GetLives ( i ) = 1000 then
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 256
7876: PUSH
7877: LD_INT 1000
7879: EQUAL
7880: IFFALSE 7896
// SetTag ( i , 3 ) else
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_INT 3
7889: PPUSH
7890: CALL_OW 109
7894: GO 8000
// if IsDrivenBy ( i ) then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 311
7905: IFFALSE 8000
// begin mech := IsDrivenBy ( i ) ;
7907: LD_ADDR_VAR 0 6
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 311
7921: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7922: LD_INT 1
7924: PPUSH
7925: LD_VAR 0 6
7929: PPUSH
7930: CALL_OW 292
7934: NOT
7935: PUSH
7936: LD_VAR 0 6
7940: PPUSH
7941: CALL_OW 256
7945: PUSH
7946: LD_INT 1000
7948: LESS
7949: AND
7950: IFFALSE 7964
// SetLives ( mech , 1000 ) ;
7952: LD_VAR 0 6
7956: PPUSH
7957: LD_INT 1000
7959: PPUSH
7960: CALL_OW 234
// if not See ( 1 , i ) then
7964: LD_INT 1
7966: PPUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 292
7976: NOT
7977: IFFALSE 7991
// SetFuel ( i , 100 ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_INT 100
7986: PPUSH
7987: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7991: LD_VAR 0 6
7995: PPUSH
7996: CALL 72352 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 110
8009: PUSH
8010: LD_INT 3
8012: EQUAL
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 311
8023: AND
8024: IFFALSE 8038
// SetTag ( i , 0 ) ;
8026: LD_VAR 0 1
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 109
// end ;
8038: GO 7611
8040: POP
8041: POP
// if attacking then
8042: LD_VAR 0 3
8046: IFFALSE 8050
// exit ;
8048: GO 8259
// if can_end and tmp then
8050: LD_EXP 6
8054: PUSH
8055: LD_VAR 0 2
8059: AND
8060: IFFALSE 8115
// begin for i in tmp do
8062: LD_ADDR_VAR 0 1
8066: PUSH
8067: LD_VAR 0 2
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8111
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 1
8099: PPUSH
8100: CALL_OW 74
8104: PPUSH
8105: CALL_OW 115
8109: GO 8072
8111: POP
8112: POP
// exit ;
8113: GO 8259
// end ; for i in areas do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 4
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8163
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 22
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PPUSH
8143: CALL_OW 70
8147: IFFALSE 8161
// begin area := i ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 1
8158: ST_TO_ADDR
// break ;
8159: GO 8163
// end ;
8161: GO 8125
8163: POP
8164: POP
// if area then
8165: LD_VAR 0 5
8169: IFFALSE 8259
// begin for i in tmp do
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 2
8180: PUSH
8181: FOR_IN
8182: IFFALSE 8257
// begin if GetTag ( i ) then
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 110
8193: IFFALSE 8197
// continue ;
8195: GO 8181
// if GetFuel ( i ) < 33 then
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 261
8206: PUSH
8207: LD_INT 33
8209: LESS
8210: IFFALSE 8224
// SetFuel ( i , 33 ) ;
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_INT 33
8219: PPUSH
8220: CALL_OW 240
// if not IsInArea ( i , area ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_VAR 0 5
8233: PPUSH
8234: CALL_OW 308
8238: NOT
8239: IFFALSE 8255
// ComMoveToArea ( i , area ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 113
// end ;
8255: GO 8181
8257: POP
8258: POP
// end ; end ;
8259: PPOPN 6
8261: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: GREATER
8270: IFFALSE 8559
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 18900
8306: PUSH
8307: LD_INT 14700
8309: PUSH
8310: LD_INT 12600
8312: PUSH
8313: LD_INT 11550
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_OWVAR 67
8326: ARRAY
8327: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_OWVAR 67
8355: ARRAY
8356: ST_TO_ADDR
// for i = 1 to count do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: DOUBLE
8363: LD_INT 1
8365: DEC
8366: ST_TO_ADDR
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8557
// begin wait ( time ) ;
8375: LD_VAR 0 5
8379: PPUSH
8380: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 1
8396: PPUSH
8397: LD_OWVAR 67
8401: PPUSH
8402: CALL_OW 12
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8553
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8410: LD_ADDR_VAR 0 4
8414: PUSH
8415: LD_INT 3
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: LD_INT 22
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: LD_INT 43
8432: PUSH
8433: LD_INT 44
8435: PUSH
8436: LD_INT 42
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: LD_INT 3
8451: MOD
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ARRAY
8457: PPUSH
8458: LD_INT 80
8460: PPUSH
8461: CALL 520 0 7
8465: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 13
8473: PPUSH
8474: LD_INT 0
8476: PPUSH
8477: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8481: LD_INT 0
8483: PPUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 4
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 5
8495: PUSH
8496: LD_INT 7
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: PUSH
8505: LD_OWVAR 67
8509: ARRAY
8510: PPUSH
8511: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8515: CALL_OW 44
8519: PPUSH
8520: LD_VAR 0 4
8524: PPUSH
8525: CALL_OW 52
// wait ( 0 0$01 ) ;
8529: LD_INT 35
8531: PPUSH
8532: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8536: LD_VAR 0 4
8540: PPUSH
8541: LD_INT 143
8543: PPUSH
8544: LD_INT 143
8546: PPUSH
8547: CALL_OW 111
// end ;
8551: GO 8407
8553: POP
8554: POP
// end ;
8555: GO 8372
8557: POP
8558: POP
// end ;
8559: PPOPN 6
8561: END
// every 8 8$00 do var i , un , time ;
8562: GO 8564
8564: DISABLE
8565: LD_INT 0
8567: PPUSH
8568: PPUSH
8569: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: LD_INT 6300
8577: PUSH
8578: LD_INT 2100
8580: PUSH
8581: LD_INT 1050
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: ST_TO_ADDR
// wait ( time ) ;
8589: LD_VAR 0 3
8593: PPUSH
8594: CALL_OW 67
// uc_side := 3 ;
8598: LD_ADDR_OWVAR 20
8602: PUSH
8603: LD_INT 3
8605: ST_TO_ADDR
// uc_nation := 3 ;
8606: LD_ADDR_OWVAR 21
8610: PUSH
8611: LD_INT 3
8613: ST_TO_ADDR
// for i = 1 to 2 do
8614: LD_ADDR_VAR 0 1
8618: PUSH
8619: DOUBLE
8620: LD_INT 1
8622: DEC
8623: ST_TO_ADDR
8624: LD_INT 2
8626: PUSH
8627: FOR_TO
8628: IFFALSE 8691
// begin PrepareHuman ( false , 1 , 4 ) ;
8630: LD_INT 0
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: LD_INT 4
8638: PPUSH
8639: CALL_OW 380
// un := CreateHuman ;
8643: LD_ADDR_VAR 0 2
8647: PUSH
8648: CALL_OW 44
8652: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: LD_INT 16
8660: PPUSH
8661: CALL_OW 52
// ComExitBuilding ( un ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8674: LD_VAR 0 2
8678: PPUSH
8679: LD_INT 41
8681: PPUSH
8682: LD_INT 76
8684: PPUSH
8685: CALL_OW 174
// end ;
8689: GO 8627
8691: POP
8692: POP
// end ; end_of_file
8693: PPOPN 3
8695: END
// export function Action ; begin
8696: LD_INT 0
8698: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8699: LD_INT 28
8701: PPUSH
8702: LD_INT 3
8704: PPUSH
8705: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8709: LD_INT 41
8711: PPUSH
8712: LD_INT 76
8714: PPUSH
8715: LD_INT 1
8717: PPUSH
8718: LD_INT 10
8720: PPUSH
8721: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8725: LD_INT 41
8727: PPUSH
8728: LD_INT 76
8730: PPUSH
8731: LD_INT 1
8733: PPUSH
8734: CALL_OW 331
// InGameOn ;
8738: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8742: LD_EXP 19
8746: PPUSH
8747: LD_STRING D2-Har-1
8749: PPUSH
8750: CALL_OW 94
// InGameOff ;
8754: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8758: LD_STRING M1
8760: PPUSH
8761: CALL_OW 337
// end ;
8765: LD_VAR 0 1
8769: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8770: LD_EXP 4
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8869
8780: GO 8782
8782: DISABLE
8783: LD_INT 0
8785: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8786: LD_ADDR_VAR 0 1
8790: PUSH
8791: LD_INT 1
8793: PPUSH
8794: CALL 608 0 1
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8803: LD_VAR 0 1
8807: PPUSH
8808: LD_STRING D2a-Sol1-1
8810: PPUSH
8811: CALL_OW 88
// if not un then
8815: LD_VAR 0 1
8819: NOT
8820: IFFALSE 8851
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8822: LD_ADDR_VAR 0 1
8826: PUSH
8827: LD_INT 2
8829: PPUSH
8830: CALL 608 0 1
8834: PUSH
8835: LD_INT 1
8837: ARRAY
8838: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8839: LD_VAR 0 1
8843: PPUSH
8844: LD_STRING D2a-FSol1-1
8846: PPUSH
8847: CALL_OW 88
// end ; if Khatam then
8851: LD_EXP 17
8855: IFFALSE 8869
// Say ( Khatam , D3b-Khat-3 ) ;
8857: LD_EXP 17
8861: PPUSH
8862: LD_STRING D3b-Khat-3
8864: PPUSH
8865: CALL_OW 88
// end ;
8869: PPOPN 1
8871: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8872: LD_EXP 15
8876: PUSH
8877: LD_EXP 18
8881: NOT
8882: AND
8883: PUSH
8884: LD_INT 22
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 91
8896: PUSH
8897: LD_EXP 15
8901: PUSH
8902: LD_INT 7
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: AND
8919: PUSH
8920: LD_EXP 15
8924: PPUSH
8925: CALL_OW 302
8929: AND
8930: PUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 463
8938: NOT
8939: AND
8940: PUSH
8941: LD_INT 4
8943: PPUSH
8944: CALL_OW 463
8948: NOT
8949: AND
8950: IFFALSE 9537
8952: GO 8954
8954: DISABLE
8955: LD_INT 0
8957: PPUSH
8958: PPUSH
// begin InGameOn ;
8959: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8963: LD_ADDR_VAR 0 2
8967: PUSH
8968: LD_INT 22
8970: PUSH
8971: LD_INT 0
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 12
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 69
8996: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_EXP 15
9011: PPUSH
9012: CALL_OW 74
9016: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9017: LD_ADDR_VAR 0 1
9021: PUSH
9022: LD_INT 22
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 21
9034: PUSH
9035: LD_INT 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 91
9044: PUSH
9045: LD_EXP 15
9049: PUSH
9050: LD_INT 20
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: PUSH
9068: FOR_IN
9069: IFFALSE 9087
// ComTurnUnit ( i , Frank ) ;
9071: LD_VAR 0 1
9075: PPUSH
9076: LD_EXP 15
9080: PPUSH
9081: CALL_OW 119
9085: GO 9068
9087: POP
9088: POP
// SetSide ( Frank , 1 ) ;
9089: LD_EXP 15
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9101: LD_EXP 9
9105: PPUSH
9106: LD_EXP 15
9110: PPUSH
9111: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9115: LD_EXP 9
9119: PPUSH
9120: LD_EXP 15
9124: PPUSH
9125: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9129: LD_EXP 15
9133: PPUSH
9134: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9138: LD_EXP 15
9142: PPUSH
9143: LD_STRING D3a-Frank-1
9145: PPUSH
9146: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9150: LD_VAR 0 2
9154: PPUSH
9155: LD_INT 42
9157: PPUSH
9158: LD_INT 78
9160: PPUSH
9161: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9165: LD_VAR 0 2
9169: PPUSH
9170: LD_EXP 15
9174: PPUSH
9175: CALL_OW 179
// if Lisa then
9179: LD_EXP 14
9183: IFFALSE 9197
// Say ( Lisa , D3a-Lisa-1 ) ;
9185: LD_EXP 14
9189: PPUSH
9190: LD_STRING D3a-Lisa-1
9192: PPUSH
9193: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9197: LD_EXP 9
9201: PPUSH
9202: LD_STRING D3a-JMM-1
9204: PPUSH
9205: CALL_OW 88
// if Cyrus then
9209: LD_EXP 13
9213: IFFALSE 9227
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9215: LD_EXP 13
9219: PPUSH
9220: LD_STRING D3a-Cyrus-1
9222: PPUSH
9223: CALL_OW 88
// if GetRandom ( sex_male ) then
9227: LD_INT 1
9229: PPUSH
9230: CALL 608 0 1
9234: IFFALSE 9255
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9236: LD_INT 1
9238: PPUSH
9239: CALL 608 0 1
9243: PUSH
9244: LD_INT 1
9246: ARRAY
9247: PPUSH
9248: LD_STRING D3a-Sol1-1
9250: PPUSH
9251: CALL_OW 88
// if GetRandom ( sex_female ) then
9255: LD_INT 2
9257: PPUSH
9258: CALL 608 0 1
9262: IFFALSE 9283
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9264: LD_INT 2
9266: PPUSH
9267: CALL 608 0 1
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: LD_STRING D3a-FSol1-1
9278: PPUSH
9279: CALL_OW 88
// if Gladstone then
9283: LD_EXP 16
9287: IFFALSE 9301
// Say ( Gladstone , D3a-Glad-1 ) ;
9289: LD_EXP 16
9293: PPUSH
9294: LD_STRING D3a-Glad-1
9296: PPUSH
9297: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9301: LD_VAR 0 2
9305: PPUSH
9306: LD_INT 60
9308: PPUSH
9309: LD_INT 113
9311: PPUSH
9312: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9316: LD_EXP 15
9320: PPUSH
9321: LD_STRING D3a-Frank-2
9323: PPUSH
9324: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9328: LD_EXP 15
9332: PPUSH
9333: LD_EXP 9
9337: PPUSH
9338: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9342: LD_EXP 9
9346: PPUSH
9347: LD_STRING D3a-JMM-2
9349: PPUSH
9350: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9354: LD_INT 1
9356: PPUSH
9357: LD_INT 4
9359: PPUSH
9360: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9364: LD_INT 85
9366: PPUSH
9367: LD_INT 134
9369: PPUSH
9370: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9374: LD_EXP 15
9378: PPUSH
9379: LD_STRING D3a-Frank-3
9381: PPUSH
9382: CALL_OW 88
// Wait ( 0 0$01 ) ;
9386: LD_INT 35
9388: PPUSH
9389: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9393: LD_INT 166
9395: PPUSH
9396: LD_INT 136
9398: PPUSH
9399: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9403: LD_EXP 9
9407: PPUSH
9408: LD_STRING D3a-JMM-3
9410: PPUSH
9411: CALL_OW 88
// Wait ( 0 0$01 ) ;
9415: LD_INT 35
9417: PPUSH
9418: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9422: LD_EXP 15
9426: PPUSH
9427: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9431: LD_EXP 15
9435: PPUSH
9436: LD_STRING D3a-Frank-4
9438: PPUSH
9439: CALL_OW 88
// if Lisa then
9443: LD_EXP 14
9447: IFFALSE 9461
// Say ( Lisa , D3a-Lisa-4 ) ;
9449: LD_EXP 14
9453: PPUSH
9454: LD_STRING D3a-Lisa-4
9456: PPUSH
9457: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9461: LD_EXP 9
9465: PPUSH
9466: LD_STRING D3a-JMM-4
9468: PPUSH
9469: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9473: LD_EXP 15
9477: PPUSH
9478: LD_STRING D3a-Frank-5
9480: PPUSH
9481: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9485: LD_EXP 9
9489: PPUSH
9490: LD_STRING D3a-JMM-5
9492: PPUSH
9493: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9497: LD_EXP 15
9501: PPUSH
9502: LD_STRING D3a-Frank-6
9504: PPUSH
9505: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9509: LD_EXP 9
9513: PPUSH
9514: LD_STRING D3a-JMM-6
9516: PPUSH
9517: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9521: LD_EXP 15
9525: PPUSH
9526: LD_STRING D3a-Frank-7
9528: PPUSH
9529: CALL_OW 88
// InGameOff ;
9533: CALL_OW 9
// end ;
9537: PPOPN 2
9539: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9540: LD_EXP 18
9544: PUSH
9545: LD_EXP 15
9549: NOT
9550: AND
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 91
9564: PUSH
9565: LD_EXP 18
9569: PUSH
9570: LD_INT 7
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PPUSH
9582: CALL_OW 69
9586: AND
9587: PUSH
9588: LD_EXP 18
9592: PPUSH
9593: CALL_OW 302
9597: AND
9598: PUSH
9599: LD_INT 1
9601: PPUSH
9602: CALL_OW 463
9606: NOT
9607: AND
9608: PUSH
9609: LD_INT 4
9611: PPUSH
9612: CALL_OW 463
9616: NOT
9617: AND
9618: IFFALSE 9798
9620: GO 9622
9622: DISABLE
// begin InGameOn ;
9623: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9627: LD_EXP 9
9631: PPUSH
9632: LD_EXP 18
9636: PPUSH
9637: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9641: LD_EXP 18
9645: PPUSH
9646: LD_EXP 9
9650: PPUSH
9651: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9655: LD_EXP 18
9659: PPUSH
9660: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9664: LD_EXP 18
9668: PPUSH
9669: LD_STRING D3b-Yam-1
9671: PPUSH
9672: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9676: LD_EXP 9
9680: PPUSH
9681: LD_STRING D3b-JMM-1
9683: PPUSH
9684: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9688: LD_INT 1
9690: PPUSH
9691: LD_INT 4
9693: PPUSH
9694: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9698: LD_INT 85
9700: PPUSH
9701: LD_INT 134
9703: PPUSH
9704: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9708: LD_EXP 18
9712: PPUSH
9713: LD_STRING D3b-Yam-2
9715: PPUSH
9716: CALL_OW 88
// Wait ( 0 0$01 ) ;
9720: LD_INT 35
9722: PPUSH
9723: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9727: LD_EXP 9
9731: PPUSH
9732: LD_STRING D3b-JMM-2
9734: PPUSH
9735: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9739: LD_INT 166
9741: PPUSH
9742: LD_INT 136
9744: PPUSH
9745: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9749: LD_EXP 18
9753: PPUSH
9754: LD_STRING D3b-Yam-3
9756: PPUSH
9757: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9761: LD_EXP 9
9765: PPUSH
9766: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9770: LD_EXP 9
9774: PPUSH
9775: LD_STRING D3b-JMM-3a
9777: PPUSH
9778: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9782: LD_EXP 18
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 235
// InGameOff ;
9794: CALL_OW 9
// end ;
9798: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9799: LD_INT 7
9801: PPUSH
9802: LD_INT 22
9804: PUSH
9805: LD_INT 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: LD_INT 24
9817: PUSH
9818: LD_INT 1000
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 70
9837: IFFALSE 10293
9839: GO 9841
9841: DISABLE
9842: LD_INT 0
9844: PPUSH
9845: PPUSH
9846: PPUSH
9847: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9848: LD_INT 35
9850: PPUSH
9851: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9855: LD_ADDR_VAR 0 1
9859: PUSH
9860: LD_INT 7
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: LD_INT 24
9878: PUSH
9879: LD_INT 1000
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 70
9898: ST_TO_ADDR
// if not un then
9899: LD_VAR 0 1
9903: NOT
9904: IFFALSE 9908
// continue ;
9906: GO 9848
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9908: LD_ADDR_VAR 0 3
9912: PUSH
9913: LD_VAR 0 1
9917: PUSH
9918: LD_INT 1
9920: ARRAY
9921: PPUSH
9922: CALL 2053 0 1
9926: ST_TO_ADDR
// until tw ;
9927: LD_VAR 0 3
9931: IFFALSE 9848
// DialogueOn ;
9933: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9937: LD_VAR 0 3
9941: PPUSH
9942: CALL_OW 87
// if Lisa then
9946: LD_EXP 14
9950: IFFALSE 9978
// begin Say ( Lisa , D5-Lisa-1 ) ;
9952: LD_EXP 14
9956: PPUSH
9957: LD_STRING D5-Lisa-1
9959: PPUSH
9960: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9964: LD_EXP 9
9968: PPUSH
9969: LD_STRING D5-JMM-1a
9971: PPUSH
9972: CALL_OW 88
// end else
9976: GO 9990
// Say ( JMM , D5-JMM-1 ) ;
9978: LD_EXP 9
9982: PPUSH
9983: LD_STRING D5-JMM-1
9985: PPUSH
9986: CALL_OW 88
// DialogueOff ;
9990: CALL_OW 7
// while ( true ) do
9994: LD_INT 1
9996: IFFALSE 10052
// begin wait ( 0 0$01 ) ;
9998: LD_INT 35
10000: PPUSH
10001: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
10005: LD_ADDR_VAR 0 2
10009: PUSH
10010: LD_INT 8
10012: PPUSH
10013: LD_INT 30
10015: PUSH
10016: LD_INT 26
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 101
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 71
10041: ST_TO_ADDR
// if x then
10042: LD_VAR 0 2
10046: IFFALSE 10050
// break ;
10048: GO 10052
// end ;
10050: GO 9994
// CenterOnUnits ( x [ 1 ] ) ;
10052: LD_VAR 0 2
10056: PUSH
10057: LD_INT 1
10059: ARRAY
10060: PPUSH
10061: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10065: LD_EXP 15
10069: PUSH
10070: LD_EXP 15
10074: PPUSH
10075: CALL_OW 255
10079: PUSH
10080: LD_INT 1
10082: EQUAL
10083: AND
10084: IFFALSE 10100
// Say ( Frank , D5a-Frank-1 ) else
10086: LD_EXP 15
10090: PPUSH
10091: LD_STRING D5a-Frank-1
10093: PPUSH
10094: CALL_OW 88
10098: GO 10154
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10100: LD_EXP 18
10104: PUSH
10105: LD_EXP 18
10109: PPUSH
10110: CALL_OW 255
10114: PUSH
10115: LD_INT 1
10117: EQUAL
10118: AND
10119: IFFALSE 10135
// Say ( Kikuchi , D5a-Yam-1 ) else
10121: LD_EXP 18
10125: PPUSH
10126: LD_STRING D5a-Yam-1
10128: PPUSH
10129: CALL_OW 88
10133: GO 10154
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10135: LD_INT 1
10137: PPUSH
10138: CALL 608 0 1
10142: PUSH
10143: LD_INT 1
10145: ARRAY
10146: PPUSH
10147: LD_STRING D5a-Sol1-1
10149: PPUSH
10150: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10154: LD_EXP 9
10158: PPUSH
10159: LD_STRING D5a-JMM-1
10161: PPUSH
10162: CALL_OW 88
// if Cyrus then
10166: LD_EXP 13
10170: IFFALSE 10184
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10172: LD_EXP 13
10176: PPUSH
10177: LD_STRING D5a-Cyrus-1
10179: PPUSH
10180: CALL_OW 88
// x := false ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// while ( true ) do
10192: LD_INT 1
10194: IFFALSE 10281
// begin wait ( 0 0$01 ) ;
10196: LD_INT 35
10198: PPUSH
10199: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10203: LD_ADDR_VAR 0 4
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: LD_INT 30
10213: PUSH
10214: LD_INT 0
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 30
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: PPUSH
10236: CALL_OW 69
10240: PUSH
10241: LD_INT 1
10243: DIFF
10244: PUSH
10245: FOR_IN
10246: IFFALSE 10269
// if BaseNeedEnergy ( i ) then
10248: LD_VAR 0 4
10252: PPUSH
10253: CALL 1178 0 1
10257: IFFALSE 10267
// x := true ;
10259: LD_ADDR_VAR 0 2
10263: PUSH
10264: LD_INT 1
10266: ST_TO_ADDR
10267: GO 10245
10269: POP
10270: POP
// if x then
10271: LD_VAR 0 2
10275: IFFALSE 10279
// break ;
10277: GO 10281
// end ;
10279: GO 10192
// Say ( JMM , D5b-JMM-1 ) ;
10281: LD_EXP 9
10285: PPUSH
10286: LD_STRING D5b-JMM-1
10288: PPUSH
10289: CALL_OW 88
// end ;
10293: PPOPN 4
10295: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10296: LD_EXP 5
10300: PUSH
10301: LD_INT 1
10303: ARRAY
10304: PUSH
10305: LD_OWVAR 1
10309: LESS
10310: PUSH
10311: LD_INT 22
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 21
10323: PUSH
10324: LD_INT 3
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PPUSH
10335: CALL_OW 69
10339: PUSH
10340: LD_INT 10
10342: LESS
10343: OR
10344: IFFALSE 10544
10346: GO 10348
10348: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10349: LD_INT 16
10351: PPUSH
10352: CALL_OW 301
10356: NOT
10357: IFFALSE 10380
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10359: LD_EXP 19
10363: PPUSH
10364: LD_STRING D3b-Har-3
10366: PPUSH
10367: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10371: LD_STRING M2a
10373: PPUSH
10374: CALL_OW 337
// end else
10378: GO 10399
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10380: LD_EXP 19
10384: PPUSH
10385: LD_STRING D3b-Har-3a
10387: PPUSH
10388: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10392: LD_STRING M2
10394: PPUSH
10395: CALL_OW 337
// end ; can_end := true ;
10399: LD_ADDR_EXP 6
10403: PUSH
10404: LD_INT 1
10406: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10407: LD_INT 9
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 424
// Wait ( 0 0$02 ) ;
10417: LD_INT 70
10419: PPUSH
10420: CALL_OW 67
// if Lisa then
10424: LD_EXP 14
10428: IFFALSE 10442
// Say ( Lisa , D3b-Lisa ) ;
10430: LD_EXP 14
10434: PPUSH
10435: LD_STRING D3b-Lisa
10437: PPUSH
10438: CALL_OW 88
// if Bobby then
10442: LD_EXP 12
10446: IFFALSE 10460
// Say ( Bobby , D3b-Bobby-3 ) ;
10448: LD_EXP 12
10452: PPUSH
10453: LD_STRING D3b-Bobby-3
10455: PPUSH
10456: CALL_OW 88
// if Cyrus then
10460: LD_EXP 13
10464: IFFALSE 10478
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10466: LD_EXP 13
10470: PPUSH
10471: LD_STRING D3b-Cyrus-3
10473: PPUSH
10474: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10478: LD_EXP 15
10482: PUSH
10483: LD_EXP 15
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_INT 1
10495: EQUAL
10496: AND
10497: IFFALSE 10511
// Say ( Frank , D3b-Frank-3 ) ;
10499: LD_EXP 15
10503: PPUSH
10504: LD_STRING D3b-Frank-3
10506: PPUSH
10507: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10511: LD_EXP 18
10515: PUSH
10516: LD_EXP 18
10520: PPUSH
10521: CALL_OW 255
10525: PUSH
10526: LD_INT 1
10528: EQUAL
10529: AND
10530: IFFALSE 10544
// Say ( Kikuchi , D3b-Yam-4 ) ;
10532: LD_EXP 18
10536: PPUSH
10537: LD_STRING D3b-Yam-4
10539: PPUSH
10540: CALL_OW 88
// end ;
10544: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10545: LD_EXP 5
10549: PUSH
10550: LD_INT 2
10552: ARRAY
10553: PUSH
10554: LD_OWVAR 1
10558: LESS
10559: IFFALSE 10591
10561: GO 10563
10563: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10564: LD_EXP 19
10568: PPUSH
10569: LD_STRING D4-Har-1
10571: PPUSH
10572: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10576: LD_STRING M3
10578: PPUSH
10579: CALL_OW 337
// must_end := true ;
10583: LD_ADDR_EXP 7
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// end ;
10591: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10592: LD_EXP 5
10596: PUSH
10597: LD_INT 3
10599: ARRAY
10600: PUSH
10601: LD_OWVAR 1
10605: LESS
10606: IFFALSE 10637
10608: GO 10610
10610: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10611: LD_INT 16
10613: PPUSH
10614: CALL_OW 301
10618: NOT
10619: IFFALSE 10630
// YouLost ( TimeOut1 ) else
10621: LD_STRING TimeOut1
10623: PPUSH
10624: CALL_OW 104
10628: GO 10637
// YouLost ( TimeOut2 ) ;
10630: LD_STRING TimeOut2
10632: PPUSH
10633: CALL_OW 104
// end ;
10637: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10638: LD_EXP 9
10642: PPUSH
10643: LD_INT 9
10645: PPUSH
10646: CALL_OW 308
10650: PUSH
10651: LD_EXP 6
10655: AND
10656: IFFALSE 11744
10658: GO 10660
10660: DISABLE
10661: LD_INT 0
10663: PPUSH
10664: PPUSH
10665: PPUSH
10666: PPUSH
10667: PPUSH
10668: PPUSH
// begin wait_on := false ;
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_INT 0
10676: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10677: LD_INT 1
10679: PPUSH
10680: CALL 1255 0 1
10684: PPUSH
10685: CALL 35052 0 1
10689: PUSH
10690: LD_INT 1
10692: PPUSH
10693: LD_INT 9
10695: PPUSH
10696: CALL 1346 0 2
10700: PUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_INT 9
10706: PPUSH
10707: CALL 1393 0 2
10711: ADD
10712: PPUSH
10713: CALL 35052 0 1
10717: GREATER
10718: IFFALSE 10741
// if Query ( Q1 ) = 1 then
10720: LD_STRING Q1
10722: PPUSH
10723: CALL_OW 97
10727: PUSH
10728: LD_INT 1
10730: EQUAL
10731: IFFALSE 10741
// wait_on := true ;
10733: LD_ADDR_VAR 0 1
10737: PUSH
10738: LD_INT 1
10740: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10741: LD_INT 35
10743: PPUSH
10744: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10748: LD_INT 1
10750: PPUSH
10751: CALL 1255 0 1
10755: PPUSH
10756: CALL 35052 0 1
10760: PUSH
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 9
10766: PPUSH
10767: CALL 1346 0 2
10771: PUSH
10772: LD_INT 1
10774: PPUSH
10775: LD_INT 9
10777: PPUSH
10778: CALL 1393 0 2
10782: UNION
10783: PPUSH
10784: CALL 35052 0 1
10788: EQUAL
10789: IFFALSE 10741
// DialogueOn ;
10791: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10795: LD_EXP 9
10799: PPUSH
10800: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10804: LD_EXP 9
10808: PPUSH
10809: LD_STRING D6-JMM-1
10811: PPUSH
10812: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10816: LD_EXP 19
10820: PPUSH
10821: LD_STRING D6-Har-1
10823: PPUSH
10824: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10828: LD_EXP 9
10832: PPUSH
10833: LD_STRING D6-JMM-2
10835: PPUSH
10836: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10840: LD_EXP 19
10844: PPUSH
10845: LD_STRING D6-Har-2
10847: PPUSH
10848: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10852: LD_EXP 9
10856: PPUSH
10857: LD_STRING D6-JMM-3
10859: PPUSH
10860: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10864: LD_EXP 19
10868: PPUSH
10869: LD_STRING D6-Har-3
10871: PPUSH
10872: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10876: LD_EXP 9
10880: PPUSH
10881: LD_STRING D6-JMM-4
10883: PPUSH
10884: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10888: LD_EXP 19
10892: PPUSH
10893: LD_STRING D6-Har-4
10895: PPUSH
10896: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10900: LD_EXP 9
10904: PPUSH
10905: LD_STRING D6-JMM-5
10907: PPUSH
10908: CALL_OW 88
// DialogueOff ;
10912: CALL_OW 7
// m1 := false ;
10916: LD_ADDR_VAR 0 4
10920: PUSH
10921: LD_INT 0
10923: ST_TO_ADDR
// m2 := false ;
10924: LD_ADDR_VAR 0 5
10928: PUSH
10929: LD_INT 0
10931: ST_TO_ADDR
// m3 := false ;
10932: LD_ADDR_VAR 0 6
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10940: LD_ADDR_VAR 0 3
10944: PUSH
10945: LD_INT 3
10947: PPUSH
10948: CALL 1524 0 1
10952: ST_TO_ADDR
// if tmp >= 35 then
10953: LD_VAR 0 3
10957: PUSH
10958: LD_INT 35
10960: GREATEREQUAL
10961: IFFALSE 10998
// begin AddMedal ( Destroy1 , - 1 ) ;
10963: LD_STRING Destroy1
10965: PPUSH
10966: LD_INT 1
10968: NEG
10969: PPUSH
10970: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10974: LD_STRING Destroy2
10976: PPUSH
10977: LD_INT 1
10979: NEG
10980: PPUSH
10981: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10985: LD_STRING Destroy3
10987: PPUSH
10988: LD_INT 1
10990: NEG
10991: PPUSH
10992: CALL_OW 101
// end else
10996: GO 11109
// begin AddMedal ( Destroy1 , 1 ) ;
10998: LD_STRING Destroy1
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 101
// m1 := true ;
11008: LD_ADDR_VAR 0 4
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// if tmp >= 25 then
11016: LD_VAR 0 3
11020: PUSH
11021: LD_INT 25
11023: GREATEREQUAL
11024: IFFALSE 11050
// begin AddMedal ( Destroy2 , - 1 ) ;
11026: LD_STRING Destroy2
11028: PPUSH
11029: LD_INT 1
11031: NEG
11032: PPUSH
11033: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11037: LD_STRING Destroy3
11039: PPUSH
11040: LD_INT 1
11042: NEG
11043: PPUSH
11044: CALL_OW 101
// end else
11048: GO 11109
// begin AddMedal ( Destroy2 , 1 ) ;
11050: LD_STRING Destroy2
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 101
// m2 := true ;
11060: LD_ADDR_VAR 0 5
11064: PUSH
11065: LD_INT 1
11067: ST_TO_ADDR
// if tmp >= 15 then
11068: LD_VAR 0 3
11072: PUSH
11073: LD_INT 15
11075: GREATEREQUAL
11076: IFFALSE 11091
// AddMedal ( Destroy3 , - 1 ) else
11078: LD_STRING Destroy3
11080: PPUSH
11081: LD_INT 1
11083: NEG
11084: PPUSH
11085: CALL_OW 101
11089: GO 11109
// begin AddMedal ( Destroy3 , 1 ) ;
11091: LD_STRING Destroy3
11093: PPUSH
11094: LD_INT 1
11096: PPUSH
11097: CALL_OW 101
// m3 := true ;
11101: LD_ADDR_VAR 0 6
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11109: LD_OWVAR 1
11113: PUSH
11114: LD_INT 67200
11116: LESSEQUAL
11117: IFFALSE 11126
// SetAchievement ( ACH_ASPEED_7 ) ;
11119: LD_STRING ACH_ASPEED_7
11121: PPUSH
11122: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11126: LD_VAR 0 4
11130: PUSH
11131: LD_VAR 0 5
11135: AND
11136: PUSH
11137: LD_VAR 0 6
11141: AND
11142: PUSH
11143: LD_OWVAR 67
11147: PUSH
11148: LD_INT 3
11150: GREATEREQUAL
11151: AND
11152: IFFALSE 11164
// SetAchievementEX ( ACH_AMER , 7 ) ;
11154: LD_STRING ACH_AMER
11156: PPUSH
11157: LD_INT 7
11159: PPUSH
11160: CALL_OW 564
// GiveMedals ( MAIN ) ;
11164: LD_STRING MAIN
11166: PPUSH
11167: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11171: LD_ADDR_VAR 0 3
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 1
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 23
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11205: LD_VAR 0 3
11209: PPUSH
11210: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11214: LD_EXP 9
11218: PPUSH
11219: LD_EXP 3
11223: PUSH
11224: LD_STRING JMM
11226: STR
11227: PPUSH
11228: CALL_OW 38
// if Brown in tmp then
11232: LD_EXP 10
11236: PUSH
11237: LD_VAR 0 3
11241: IN
11242: IFFALSE 11262
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11244: LD_EXP 10
11248: PPUSH
11249: LD_EXP 3
11253: PUSH
11254: LD_STRING Brown
11256: STR
11257: PPUSH
11258: CALL_OW 38
// if Donaldson in tmp then
11262: LD_EXP 11
11266: PUSH
11267: LD_VAR 0 3
11271: IN
11272: IFFALSE 11292
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11274: LD_EXP 11
11278: PPUSH
11279: LD_EXP 3
11283: PUSH
11284: LD_STRING Donaldson
11286: STR
11287: PPUSH
11288: CALL_OW 38
// if Bobby in tmp then
11292: LD_EXP 12
11296: PUSH
11297: LD_VAR 0 3
11301: IN
11302: IFFALSE 11322
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11304: LD_EXP 12
11308: PPUSH
11309: LD_EXP 3
11313: PUSH
11314: LD_STRING Bobby
11316: STR
11317: PPUSH
11318: CALL_OW 38
// if Cyrus in tmp then
11322: LD_EXP 13
11326: PUSH
11327: LD_VAR 0 3
11331: IN
11332: IFFALSE 11352
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11334: LD_EXP 13
11338: PPUSH
11339: LD_EXP 3
11343: PUSH
11344: LD_STRING Cyrus
11346: STR
11347: PPUSH
11348: CALL_OW 38
// if Lisa in tmp then
11352: LD_EXP 14
11356: PUSH
11357: LD_VAR 0 3
11361: IN
11362: IFFALSE 11382
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11364: LD_EXP 14
11368: PPUSH
11369: LD_EXP 3
11373: PUSH
11374: LD_STRING Lisa
11376: STR
11377: PPUSH
11378: CALL_OW 38
// if Frank in tmp then
11382: LD_EXP 15
11386: PUSH
11387: LD_VAR 0 3
11391: IN
11392: IFFALSE 11412
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11394: LD_EXP 15
11398: PPUSH
11399: LD_EXP 3
11403: PUSH
11404: LD_STRING Frank
11406: STR
11407: PPUSH
11408: CALL_OW 38
// if Gladstone in tmp then
11412: LD_EXP 16
11416: PUSH
11417: LD_VAR 0 3
11421: IN
11422: IFFALSE 11442
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11424: LD_EXP 16
11428: PPUSH
11429: LD_EXP 3
11433: PUSH
11434: LD_STRING Gladstone
11436: STR
11437: PPUSH
11438: CALL_OW 38
// if Khatam in tmp then
11442: LD_EXP 17
11446: PUSH
11447: LD_VAR 0 3
11451: IN
11452: IFFALSE 11472
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11454: LD_EXP 17
11458: PPUSH
11459: LD_EXP 3
11463: PUSH
11464: LD_STRING Khatam
11466: STR
11467: PPUSH
11468: CALL_OW 38
// if Kikuchi in tmp then
11472: LD_EXP 18
11476: PUSH
11477: LD_VAR 0 3
11481: IN
11482: IFFALSE 11509
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
11484: LD_STRING enableBioCharacter(BIO_YAMO)
11486: PPUSH
11487: CALL_OW 559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11491: LD_EXP 18
11495: PPUSH
11496: LD_EXP 3
11500: PUSH
11501: LD_STRING Kikuchi
11503: STR
11504: PPUSH
11505: CALL_OW 38
// end ; SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11509: LD_VAR 0 3
11513: PUSH
11514: LD_EXP 9
11518: PUSH
11519: LD_EXP 10
11523: PUSH
11524: LD_EXP 11
11528: PUSH
11529: LD_EXP 12
11533: PUSH
11534: LD_EXP 13
11538: PUSH
11539: LD_EXP 14
11543: PUSH
11544: LD_EXP 15
11548: PUSH
11549: LD_EXP 16
11553: PUSH
11554: LD_EXP 18
11558: PUSH
11559: LD_EXP 17
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: DIFF
11576: PPUSH
11577: LD_EXP 3
11581: PUSH
11582: LD_STRING others
11584: STR
11585: PPUSH
11586: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11590: LD_OWVAR 1
11594: PPUSH
11595: LD_STRING 07_time
11597: PPUSH
11598: CALL_OW 39
// tmp := [ ] ;
11602: LD_ADDR_VAR 0 3
11606: PUSH
11607: EMPTY
11608: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11609: LD_ADDR_VAR 0 2
11613: PUSH
11614: LD_INT 9
11616: PPUSH
11617: LD_INT 22
11619: PUSH
11620: LD_INT 1
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 23
11629: PUSH
11630: LD_INT 1
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: LD_INT 21
11639: PUSH
11640: LD_INT 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: PPUSH
11655: CALL_OW 70
11659: PUSH
11660: FOR_IN
11661: IFFALSE 11726
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_VAR 0 2
11677: PPUSH
11678: CALL_OW 265
11682: PUSH
11683: LD_VAR 0 2
11687: PPUSH
11688: CALL_OW 262
11692: PUSH
11693: LD_VAR 0 2
11697: PPUSH
11698: CALL_OW 263
11702: PUSH
11703: LD_VAR 0 2
11707: PPUSH
11708: CALL_OW 264
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: PPUSH
11719: CALL 70652 0 2
11723: ST_TO_ADDR
11724: GO 11660
11726: POP
11727: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_STRING 07_vehicles
11735: PPUSH
11736: CALL_OW 39
// YouWin ;
11740: CALL_OW 103
// end ; end_of_file
11744: PPOPN 6
11746: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11747: LD_VAR 0 1
11751: PPUSH
11752: CALL 28056 0 1
// if un = JMM then
11756: LD_VAR 0 1
11760: PUSH
11761: LD_EXP 9
11765: EQUAL
11766: IFFALSE 11775
// YouLost ( JMM ) ;
11768: LD_STRING JMM
11770: PPUSH
11771: CALL_OW 104
// if GetType ( un ) = unit_building then
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL_OW 247
11784: PUSH
11785: LD_INT 3
11787: EQUAL
11788: IFFALSE 11804
// buildings_counter := buildings_counter + 1 ;
11790: LD_ADDR_EXP 4
11794: PUSH
11795: LD_EXP 4
11799: PUSH
11800: LD_INT 1
11802: PLUS
11803: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11804: LD_VAR 0 1
11808: PUSH
11809: LD_INT 6
11811: PPUSH
11812: LD_INT 2
11814: PUSH
11815: LD_INT 30
11817: PUSH
11818: LD_INT 33
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 30
11827: PUSH
11828: LD_INT 32
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 70
11844: IN
11845: IFFALSE 11904
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11847: LD_ADDR_EXP 20
11851: PUSH
11852: LD_EXP 20
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL_OW 266
11866: PUSH
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 250
11876: PUSH
11877: LD_VAR 0 1
11881: PPUSH
11882: CALL_OW 251
11886: PUSH
11887: LD_VAR 0 1
11891: PPUSH
11892: CALL_OW 254
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: ADD
11903: ST_TO_ADDR
// if un = ru_dep_main then
11904: LD_VAR 0 1
11908: PUSH
11909: LD_INT 16
11911: EQUAL
11912: IFFALSE 11921
// ChangeMissionObjectives ( M1a ) ;
11914: LD_STRING M1a
11916: PPUSH
11917: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 247
11930: PUSH
11931: LD_INT 1
11933: EQUAL
11934: PUSH
11935: LD_VAR 0 1
11939: PPUSH
11940: CALL_OW 255
11944: PUSH
11945: LD_INT 3
11947: EQUAL
11948: AND
11949: IFFALSE 11965
// kill_counter := kill_counter + 1 ;
11951: LD_ADDR_EXP 8
11955: PUSH
11956: LD_EXP 8
11960: PUSH
11961: LD_INT 1
11963: PLUS
11964: ST_TO_ADDR
// end ;
11965: PPOPN 1
11967: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11968: LD_VAR 0 1
11972: PPUSH
11973: LD_VAR 0 2
11977: PPUSH
11978: CALL 28176 0 2
// end ;
11982: PPOPN 2
11984: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11985: LD_VAR 0 1
11989: PPUSH
11990: CALL_OW 266
11994: PUSH
11995: LD_INT 32
11997: EQUAL
11998: PUSH
11999: LD_VAR 0 1
12003: PPUSH
12004: CALL_OW 110
12008: PUSH
12009: LD_INT 7
12011: EQUAL
12012: AND
12013: IFFALSE 12027
// SetTag ( un , 0 ) ;
12015: LD_VAR 0 1
12019: PPUSH
12020: LD_INT 0
12022: PPUSH
12023: CALL_OW 109
// end ;
12027: PPOPN 1
12029: END
// on BuildingStarted ( b , builder ) do var i ;
12030: LD_INT 0
12032: PPUSH
// begin if GetSide ( b ) = 3 then
12033: LD_VAR 0 1
12037: PPUSH
12038: CALL_OW 255
12042: PUSH
12043: LD_INT 3
12045: EQUAL
12046: IFFALSE 12086
// for i = 1 to 4 do
12048: LD_ADDR_VAR 0 3
12052: PUSH
12053: DOUBLE
12054: LD_INT 1
12056: DEC
12057: ST_TO_ADDR
12058: LD_INT 4
12060: PUSH
12061: FOR_TO
12062: IFFALSE 12084
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12064: LD_ADDR_EXP 20
12068: PUSH
12069: LD_EXP 20
12073: PPUSH
12074: LD_INT 1
12076: PPUSH
12077: CALL_OW 3
12081: ST_TO_ADDR
12082: GO 12061
12084: POP
12085: POP
// end ;
12086: PPOPN 3
12088: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12089: LD_VAR 0 1
12093: PPUSH
12094: CALL_OW 266
12098: PUSH
12099: LD_INT 32
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: IN
12109: IFFALSE 12123
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12111: LD_VAR 0 1
12115: PPUSH
12116: LD_INT 43
12118: PPUSH
12119: CALL_OW 148
12123: PPOPN 1
12125: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12126: LD_VAR 0 1
12130: PUSH
12131: LD_INT 22
12133: PUSH
12134: LD_INT 3
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 2
12143: PUSH
12144: LD_INT 30
12146: PUSH
12147: LD_INT 31
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 30
12156: PUSH
12157: LD_INT 32
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PPUSH
12173: CALL_OW 69
12177: IN
12178: IFFALSE 12200
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12180: LD_VAR 0 2
12184: PPUSH
12185: LD_VAR 0 1
12189: PPUSH
12190: LD_INT 134
12192: PPUSH
12193: LD_INT 136
12195: PPUSH
12196: CALL 838 0 4
// end ;
12200: PPOPN 2
12202: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_INT 3
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 30
12220: PUSH
12221: LD_INT 32
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 69
12236: IN
12237: IFFALSE 12251
// SetTag ( b , 0 ) ;
12239: LD_VAR 0 1
12243: PPUSH
12244: LD_INT 0
12246: PPUSH
12247: CALL_OW 109
// end ; end_of_file end_of_file
12251: PPOPN 2
12253: END
// export globalGameSaveCounter ; every 0 0$1 do
12254: GO 12256
12256: DISABLE
// begin enable ;
12257: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12258: LD_STRING updateTimer(
12260: PUSH
12261: LD_OWVAR 1
12265: STR
12266: PUSH
12267: LD_STRING );
12269: STR
12270: PPUSH
12271: CALL_OW 559
// end ;
12275: END
// every 0 0$1 do
12276: GO 12278
12278: DISABLE
// begin globalGameSaveCounter := 0 ;
12279: LD_ADDR_EXP 21
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12287: LD_STRING setGameSaveCounter(0)
12289: PPUSH
12290: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12294: LD_STRING initStreamRollete();
12296: PPUSH
12297: CALL_OW 559
// InitStreamMode ;
12301: CALL 13627 0 0
// DefineStreamItems ( false ) ;
12305: LD_INT 0
12307: PPUSH
12308: CALL 14091 0 1
// end ;
12312: END
// export function SOS_MapStart ( ) ; begin
12313: LD_INT 0
12315: PPUSH
// if streamModeActive then
12316: LD_EXP 22
12320: IFFALSE 12329
// DefineStreamItems ( true ) ;
12322: LD_INT 1
12324: PPUSH
12325: CALL 14091 0 1
// UpdateLuaVariables ( ) ;
12329: CALL 12346 0 0
// UpdateFactoryWaypoints ( ) ;
12333: CALL 26960 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12337: CALL 27217 0 0
// end ;
12341: LD_VAR 0 1
12345: RET
// function UpdateLuaVariables ( ) ; begin
12346: LD_INT 0
12348: PPUSH
// if globalGameSaveCounter then
12349: LD_EXP 21
12353: IFFALSE 12387
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12355: LD_ADDR_EXP 21
12359: PUSH
12360: LD_EXP 21
12364: PPUSH
12365: CALL 72013 0 1
12369: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12370: LD_STRING setGameSaveCounter(
12372: PUSH
12373: LD_EXP 21
12377: STR
12378: PUSH
12379: LD_STRING )
12381: STR
12382: PPUSH
12383: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12387: LD_STRING setGameDifficulty(
12389: PUSH
12390: LD_OWVAR 67
12394: STR
12395: PUSH
12396: LD_STRING )
12398: STR
12399: PPUSH
12400: CALL_OW 559
// end ;
12404: LD_VAR 0 1
12408: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12409: LD_INT 0
12411: PPUSH
// if p2 = stream_mode then
12412: LD_VAR 0 2
12416: PUSH
12417: LD_INT 100
12419: EQUAL
12420: IFFALSE 13423
// begin if not StreamModeActive then
12422: LD_EXP 22
12426: NOT
12427: IFFALSE 12437
// StreamModeActive := true ;
12429: LD_ADDR_EXP 22
12433: PUSH
12434: LD_INT 1
12436: ST_TO_ADDR
// if p3 = 0 then
12437: LD_VAR 0 3
12441: PUSH
12442: LD_INT 0
12444: EQUAL
12445: IFFALSE 12451
// InitStreamMode ;
12447: CALL 13627 0 0
// if p3 = 1 then
12451: LD_VAR 0 3
12455: PUSH
12456: LD_INT 1
12458: EQUAL
12459: IFFALSE 12469
// sRocket := true ;
12461: LD_ADDR_EXP 27
12465: PUSH
12466: LD_INT 1
12468: ST_TO_ADDR
// if p3 = 2 then
12469: LD_VAR 0 3
12473: PUSH
12474: LD_INT 2
12476: EQUAL
12477: IFFALSE 12487
// sSpeed := true ;
12479: LD_ADDR_EXP 26
12483: PUSH
12484: LD_INT 1
12486: ST_TO_ADDR
// if p3 = 3 then
12487: LD_VAR 0 3
12491: PUSH
12492: LD_INT 3
12494: EQUAL
12495: IFFALSE 12505
// sEngine := true ;
12497: LD_ADDR_EXP 28
12501: PUSH
12502: LD_INT 1
12504: ST_TO_ADDR
// if p3 = 4 then
12505: LD_VAR 0 3
12509: PUSH
12510: LD_INT 4
12512: EQUAL
12513: IFFALSE 12523
// sSpec := true ;
12515: LD_ADDR_EXP 25
12519: PUSH
12520: LD_INT 1
12522: ST_TO_ADDR
// if p3 = 5 then
12523: LD_VAR 0 3
12527: PUSH
12528: LD_INT 5
12530: EQUAL
12531: IFFALSE 12541
// sLevel := true ;
12533: LD_ADDR_EXP 29
12537: PUSH
12538: LD_INT 1
12540: ST_TO_ADDR
// if p3 = 6 then
12541: LD_VAR 0 3
12545: PUSH
12546: LD_INT 6
12548: EQUAL
12549: IFFALSE 12559
// sArmoury := true ;
12551: LD_ADDR_EXP 30
12555: PUSH
12556: LD_INT 1
12558: ST_TO_ADDR
// if p3 = 7 then
12559: LD_VAR 0 3
12563: PUSH
12564: LD_INT 7
12566: EQUAL
12567: IFFALSE 12577
// sRadar := true ;
12569: LD_ADDR_EXP 31
12573: PUSH
12574: LD_INT 1
12576: ST_TO_ADDR
// if p3 = 8 then
12577: LD_VAR 0 3
12581: PUSH
12582: LD_INT 8
12584: EQUAL
12585: IFFALSE 12595
// sBunker := true ;
12587: LD_ADDR_EXP 32
12591: PUSH
12592: LD_INT 1
12594: ST_TO_ADDR
// if p3 = 9 then
12595: LD_VAR 0 3
12599: PUSH
12600: LD_INT 9
12602: EQUAL
12603: IFFALSE 12613
// sHack := true ;
12605: LD_ADDR_EXP 33
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// if p3 = 10 then
12613: LD_VAR 0 3
12617: PUSH
12618: LD_INT 10
12620: EQUAL
12621: IFFALSE 12631
// sFire := true ;
12623: LD_ADDR_EXP 34
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// if p3 = 11 then
12631: LD_VAR 0 3
12635: PUSH
12636: LD_INT 11
12638: EQUAL
12639: IFFALSE 12649
// sRefresh := true ;
12641: LD_ADDR_EXP 35
12645: PUSH
12646: LD_INT 1
12648: ST_TO_ADDR
// if p3 = 12 then
12649: LD_VAR 0 3
12653: PUSH
12654: LD_INT 12
12656: EQUAL
12657: IFFALSE 12667
// sExp := true ;
12659: LD_ADDR_EXP 36
12663: PUSH
12664: LD_INT 1
12666: ST_TO_ADDR
// if p3 = 13 then
12667: LD_VAR 0 3
12671: PUSH
12672: LD_INT 13
12674: EQUAL
12675: IFFALSE 12685
// sDepot := true ;
12677: LD_ADDR_EXP 37
12681: PUSH
12682: LD_INT 1
12684: ST_TO_ADDR
// if p3 = 14 then
12685: LD_VAR 0 3
12689: PUSH
12690: LD_INT 14
12692: EQUAL
12693: IFFALSE 12703
// sFlag := true ;
12695: LD_ADDR_EXP 38
12699: PUSH
12700: LD_INT 1
12702: ST_TO_ADDR
// if p3 = 15 then
12703: LD_VAR 0 3
12707: PUSH
12708: LD_INT 15
12710: EQUAL
12711: IFFALSE 12721
// sKamikadze := true ;
12713: LD_ADDR_EXP 46
12717: PUSH
12718: LD_INT 1
12720: ST_TO_ADDR
// if p3 = 16 then
12721: LD_VAR 0 3
12725: PUSH
12726: LD_INT 16
12728: EQUAL
12729: IFFALSE 12739
// sTroll := true ;
12731: LD_ADDR_EXP 47
12735: PUSH
12736: LD_INT 1
12738: ST_TO_ADDR
// if p3 = 17 then
12739: LD_VAR 0 3
12743: PUSH
12744: LD_INT 17
12746: EQUAL
12747: IFFALSE 12757
// sSlow := true ;
12749: LD_ADDR_EXP 48
12753: PUSH
12754: LD_INT 1
12756: ST_TO_ADDR
// if p3 = 18 then
12757: LD_VAR 0 3
12761: PUSH
12762: LD_INT 18
12764: EQUAL
12765: IFFALSE 12775
// sLack := true ;
12767: LD_ADDR_EXP 49
12771: PUSH
12772: LD_INT 1
12774: ST_TO_ADDR
// if p3 = 19 then
12775: LD_VAR 0 3
12779: PUSH
12780: LD_INT 19
12782: EQUAL
12783: IFFALSE 12793
// sTank := true ;
12785: LD_ADDR_EXP 51
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// if p3 = 20 then
12793: LD_VAR 0 3
12797: PUSH
12798: LD_INT 20
12800: EQUAL
12801: IFFALSE 12811
// sRemote := true ;
12803: LD_ADDR_EXP 52
12807: PUSH
12808: LD_INT 1
12810: ST_TO_ADDR
// if p3 = 21 then
12811: LD_VAR 0 3
12815: PUSH
12816: LD_INT 21
12818: EQUAL
12819: IFFALSE 12829
// sPowell := true ;
12821: LD_ADDR_EXP 53
12825: PUSH
12826: LD_INT 1
12828: ST_TO_ADDR
// if p3 = 22 then
12829: LD_VAR 0 3
12833: PUSH
12834: LD_INT 22
12836: EQUAL
12837: IFFALSE 12847
// sTeleport := true ;
12839: LD_ADDR_EXP 56
12843: PUSH
12844: LD_INT 1
12846: ST_TO_ADDR
// if p3 = 23 then
12847: LD_VAR 0 3
12851: PUSH
12852: LD_INT 23
12854: EQUAL
12855: IFFALSE 12865
// sOilTower := true ;
12857: LD_ADDR_EXP 58
12861: PUSH
12862: LD_INT 1
12864: ST_TO_ADDR
// if p3 = 24 then
12865: LD_VAR 0 3
12869: PUSH
12870: LD_INT 24
12872: EQUAL
12873: IFFALSE 12883
// sShovel := true ;
12875: LD_ADDR_EXP 59
12879: PUSH
12880: LD_INT 1
12882: ST_TO_ADDR
// if p3 = 25 then
12883: LD_VAR 0 3
12887: PUSH
12888: LD_INT 25
12890: EQUAL
12891: IFFALSE 12901
// sSheik := true ;
12893: LD_ADDR_EXP 60
12897: PUSH
12898: LD_INT 1
12900: ST_TO_ADDR
// if p3 = 26 then
12901: LD_VAR 0 3
12905: PUSH
12906: LD_INT 26
12908: EQUAL
12909: IFFALSE 12919
// sEarthquake := true ;
12911: LD_ADDR_EXP 62
12915: PUSH
12916: LD_INT 1
12918: ST_TO_ADDR
// if p3 = 27 then
12919: LD_VAR 0 3
12923: PUSH
12924: LD_INT 27
12926: EQUAL
12927: IFFALSE 12937
// sAI := true ;
12929: LD_ADDR_EXP 63
12933: PUSH
12934: LD_INT 1
12936: ST_TO_ADDR
// if p3 = 28 then
12937: LD_VAR 0 3
12941: PUSH
12942: LD_INT 28
12944: EQUAL
12945: IFFALSE 12955
// sCargo := true ;
12947: LD_ADDR_EXP 66
12951: PUSH
12952: LD_INT 1
12954: ST_TO_ADDR
// if p3 = 29 then
12955: LD_VAR 0 3
12959: PUSH
12960: LD_INT 29
12962: EQUAL
12963: IFFALSE 12973
// sDLaser := true ;
12965: LD_ADDR_EXP 67
12969: PUSH
12970: LD_INT 1
12972: ST_TO_ADDR
// if p3 = 30 then
12973: LD_VAR 0 3
12977: PUSH
12978: LD_INT 30
12980: EQUAL
12981: IFFALSE 12991
// sExchange := true ;
12983: LD_ADDR_EXP 68
12987: PUSH
12988: LD_INT 1
12990: ST_TO_ADDR
// if p3 = 31 then
12991: LD_VAR 0 3
12995: PUSH
12996: LD_INT 31
12998: EQUAL
12999: IFFALSE 13009
// sFac := true ;
13001: LD_ADDR_EXP 69
13005: PUSH
13006: LD_INT 1
13008: ST_TO_ADDR
// if p3 = 32 then
13009: LD_VAR 0 3
13013: PUSH
13014: LD_INT 32
13016: EQUAL
13017: IFFALSE 13027
// sPower := true ;
13019: LD_ADDR_EXP 70
13023: PUSH
13024: LD_INT 1
13026: ST_TO_ADDR
// if p3 = 33 then
13027: LD_VAR 0 3
13031: PUSH
13032: LD_INT 33
13034: EQUAL
13035: IFFALSE 13045
// sRandom := true ;
13037: LD_ADDR_EXP 71
13041: PUSH
13042: LD_INT 1
13044: ST_TO_ADDR
// if p3 = 34 then
13045: LD_VAR 0 3
13049: PUSH
13050: LD_INT 34
13052: EQUAL
13053: IFFALSE 13063
// sShield := true ;
13055: LD_ADDR_EXP 72
13059: PUSH
13060: LD_INT 1
13062: ST_TO_ADDR
// if p3 = 35 then
13063: LD_VAR 0 3
13067: PUSH
13068: LD_INT 35
13070: EQUAL
13071: IFFALSE 13081
// sTime := true ;
13073: LD_ADDR_EXP 73
13077: PUSH
13078: LD_INT 1
13080: ST_TO_ADDR
// if p3 = 36 then
13081: LD_VAR 0 3
13085: PUSH
13086: LD_INT 36
13088: EQUAL
13089: IFFALSE 13099
// sTools := true ;
13091: LD_ADDR_EXP 74
13095: PUSH
13096: LD_INT 1
13098: ST_TO_ADDR
// if p3 = 101 then
13099: LD_VAR 0 3
13103: PUSH
13104: LD_INT 101
13106: EQUAL
13107: IFFALSE 13117
// sSold := true ;
13109: LD_ADDR_EXP 39
13113: PUSH
13114: LD_INT 1
13116: ST_TO_ADDR
// if p3 = 102 then
13117: LD_VAR 0 3
13121: PUSH
13122: LD_INT 102
13124: EQUAL
13125: IFFALSE 13135
// sDiff := true ;
13127: LD_ADDR_EXP 40
13131: PUSH
13132: LD_INT 1
13134: ST_TO_ADDR
// if p3 = 103 then
13135: LD_VAR 0 3
13139: PUSH
13140: LD_INT 103
13142: EQUAL
13143: IFFALSE 13153
// sFog := true ;
13145: LD_ADDR_EXP 43
13149: PUSH
13150: LD_INT 1
13152: ST_TO_ADDR
// if p3 = 104 then
13153: LD_VAR 0 3
13157: PUSH
13158: LD_INT 104
13160: EQUAL
13161: IFFALSE 13171
// sReset := true ;
13163: LD_ADDR_EXP 44
13167: PUSH
13168: LD_INT 1
13170: ST_TO_ADDR
// if p3 = 105 then
13171: LD_VAR 0 3
13175: PUSH
13176: LD_INT 105
13178: EQUAL
13179: IFFALSE 13189
// sSun := true ;
13181: LD_ADDR_EXP 45
13185: PUSH
13186: LD_INT 1
13188: ST_TO_ADDR
// if p3 = 106 then
13189: LD_VAR 0 3
13193: PUSH
13194: LD_INT 106
13196: EQUAL
13197: IFFALSE 13207
// sTiger := true ;
13199: LD_ADDR_EXP 41
13203: PUSH
13204: LD_INT 1
13206: ST_TO_ADDR
// if p3 = 107 then
13207: LD_VAR 0 3
13211: PUSH
13212: LD_INT 107
13214: EQUAL
13215: IFFALSE 13225
// sBomb := true ;
13217: LD_ADDR_EXP 42
13221: PUSH
13222: LD_INT 1
13224: ST_TO_ADDR
// if p3 = 108 then
13225: LD_VAR 0 3
13229: PUSH
13230: LD_INT 108
13232: EQUAL
13233: IFFALSE 13243
// sWound := true ;
13235: LD_ADDR_EXP 50
13239: PUSH
13240: LD_INT 1
13242: ST_TO_ADDR
// if p3 = 109 then
13243: LD_VAR 0 3
13247: PUSH
13248: LD_INT 109
13250: EQUAL
13251: IFFALSE 13261
// sBetray := true ;
13253: LD_ADDR_EXP 54
13257: PUSH
13258: LD_INT 1
13260: ST_TO_ADDR
// if p3 = 110 then
13261: LD_VAR 0 3
13265: PUSH
13266: LD_INT 110
13268: EQUAL
13269: IFFALSE 13279
// sContamin := true ;
13271: LD_ADDR_EXP 55
13275: PUSH
13276: LD_INT 1
13278: ST_TO_ADDR
// if p3 = 111 then
13279: LD_VAR 0 3
13283: PUSH
13284: LD_INT 111
13286: EQUAL
13287: IFFALSE 13297
// sOil := true ;
13289: LD_ADDR_EXP 57
13293: PUSH
13294: LD_INT 1
13296: ST_TO_ADDR
// if p3 = 112 then
13297: LD_VAR 0 3
13301: PUSH
13302: LD_INT 112
13304: EQUAL
13305: IFFALSE 13315
// sStu := true ;
13307: LD_ADDR_EXP 61
13311: PUSH
13312: LD_INT 1
13314: ST_TO_ADDR
// if p3 = 113 then
13315: LD_VAR 0 3
13319: PUSH
13320: LD_INT 113
13322: EQUAL
13323: IFFALSE 13333
// sBazooka := true ;
13325: LD_ADDR_EXP 64
13329: PUSH
13330: LD_INT 1
13332: ST_TO_ADDR
// if p3 = 114 then
13333: LD_VAR 0 3
13337: PUSH
13338: LD_INT 114
13340: EQUAL
13341: IFFALSE 13351
// sMortar := true ;
13343: LD_ADDR_EXP 65
13347: PUSH
13348: LD_INT 1
13350: ST_TO_ADDR
// if p3 = 115 then
13351: LD_VAR 0 3
13355: PUSH
13356: LD_INT 115
13358: EQUAL
13359: IFFALSE 13369
// sRanger := true ;
13361: LD_ADDR_EXP 75
13365: PUSH
13366: LD_INT 1
13368: ST_TO_ADDR
// if p3 = 116 then
13369: LD_VAR 0 3
13373: PUSH
13374: LD_INT 116
13376: EQUAL
13377: IFFALSE 13387
// sComputer := true ;
13379: LD_ADDR_EXP 76
13383: PUSH
13384: LD_INT 1
13386: ST_TO_ADDR
// if p3 = 117 then
13387: LD_VAR 0 3
13391: PUSH
13392: LD_INT 117
13394: EQUAL
13395: IFFALSE 13405
// s30 := true ;
13397: LD_ADDR_EXP 77
13401: PUSH
13402: LD_INT 1
13404: ST_TO_ADDR
// if p3 = 118 then
13405: LD_VAR 0 3
13409: PUSH
13410: LD_INT 118
13412: EQUAL
13413: IFFALSE 13423
// s60 := true ;
13415: LD_ADDR_EXP 78
13419: PUSH
13420: LD_INT 1
13422: ST_TO_ADDR
// end ; if p2 = hack_mode then
13423: LD_VAR 0 2
13427: PUSH
13428: LD_INT 101
13430: EQUAL
13431: IFFALSE 13559
// begin case p3 of 1 :
13433: LD_VAR 0 3
13437: PUSH
13438: LD_INT 1
13440: DOUBLE
13441: EQUAL
13442: IFTRUE 13446
13444: GO 13453
13446: POP
// hHackUnlimitedResources ; 2 :
13447: CALL 25706 0 0
13451: GO 13559
13453: LD_INT 2
13455: DOUBLE
13456: EQUAL
13457: IFTRUE 13461
13459: GO 13468
13461: POP
// hHackSetLevel10 ; 3 :
13462: CALL 25839 0 0
13466: GO 13559
13468: LD_INT 3
13470: DOUBLE
13471: EQUAL
13472: IFTRUE 13476
13474: GO 13483
13476: POP
// hHackSetLevel10YourUnits ; 4 :
13477: CALL 25924 0 0
13481: GO 13559
13483: LD_INT 4
13485: DOUBLE
13486: EQUAL
13487: IFTRUE 13491
13489: GO 13498
13491: POP
// hHackInvincible ; 5 :
13492: CALL 26372 0 0
13496: GO 13559
13498: LD_INT 5
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13513
13506: POP
// hHackInvisible ; 6 :
13507: CALL 26483 0 0
13511: GO 13559
13513: LD_INT 6
13515: DOUBLE
13516: EQUAL
13517: IFTRUE 13521
13519: GO 13528
13521: POP
// hHackChangeYourSide ; 7 :
13522: CALL 26540 0 0
13526: GO 13559
13528: LD_INT 7
13530: DOUBLE
13531: EQUAL
13532: IFTRUE 13536
13534: GO 13543
13536: POP
// hHackChangeUnitSide ; 8 :
13537: CALL 26582 0 0
13541: GO 13559
13543: LD_INT 8
13545: DOUBLE
13546: EQUAL
13547: IFTRUE 13551
13549: GO 13558
13551: POP
// hHackFog ; end ;
13552: CALL 26683 0 0
13556: GO 13559
13558: POP
// end ; if p2 = game_save_mode then
13559: LD_VAR 0 2
13563: PUSH
13564: LD_INT 102
13566: EQUAL
13567: IFFALSE 13622
// begin if p3 = 1 then
13569: LD_VAR 0 3
13573: PUSH
13574: LD_INT 1
13576: EQUAL
13577: IFFALSE 13589
// globalGameSaveCounter := p4 ;
13579: LD_ADDR_EXP 21
13583: PUSH
13584: LD_VAR 0 4
13588: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13589: LD_VAR 0 3
13593: PUSH
13594: LD_INT 2
13596: EQUAL
13597: PUSH
13598: LD_EXP 21
13602: AND
13603: IFFALSE 13622
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13605: LD_STRING setGameSaveCounter(
13607: PUSH
13608: LD_EXP 21
13612: STR
13613: PUSH
13614: LD_STRING )
13616: STR
13617: PPUSH
13618: CALL_OW 559
// end ; end ;
13622: LD_VAR 0 7
13626: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13627: LD_INT 0
13629: PPUSH
// streamModeActive := false ;
13630: LD_ADDR_EXP 22
13634: PUSH
13635: LD_INT 0
13637: ST_TO_ADDR
// normalCounter := 36 ;
13638: LD_ADDR_EXP 23
13642: PUSH
13643: LD_INT 36
13645: ST_TO_ADDR
// hardcoreCounter := 18 ;
13646: LD_ADDR_EXP 24
13650: PUSH
13651: LD_INT 18
13653: ST_TO_ADDR
// sRocket := false ;
13654: LD_ADDR_EXP 27
13658: PUSH
13659: LD_INT 0
13661: ST_TO_ADDR
// sSpeed := false ;
13662: LD_ADDR_EXP 26
13666: PUSH
13667: LD_INT 0
13669: ST_TO_ADDR
// sEngine := false ;
13670: LD_ADDR_EXP 28
13674: PUSH
13675: LD_INT 0
13677: ST_TO_ADDR
// sSpec := false ;
13678: LD_ADDR_EXP 25
13682: PUSH
13683: LD_INT 0
13685: ST_TO_ADDR
// sLevel := false ;
13686: LD_ADDR_EXP 29
13690: PUSH
13691: LD_INT 0
13693: ST_TO_ADDR
// sArmoury := false ;
13694: LD_ADDR_EXP 30
13698: PUSH
13699: LD_INT 0
13701: ST_TO_ADDR
// sRadar := false ;
13702: LD_ADDR_EXP 31
13706: PUSH
13707: LD_INT 0
13709: ST_TO_ADDR
// sBunker := false ;
13710: LD_ADDR_EXP 32
13714: PUSH
13715: LD_INT 0
13717: ST_TO_ADDR
// sHack := false ;
13718: LD_ADDR_EXP 33
13722: PUSH
13723: LD_INT 0
13725: ST_TO_ADDR
// sFire := false ;
13726: LD_ADDR_EXP 34
13730: PUSH
13731: LD_INT 0
13733: ST_TO_ADDR
// sRefresh := false ;
13734: LD_ADDR_EXP 35
13738: PUSH
13739: LD_INT 0
13741: ST_TO_ADDR
// sExp := false ;
13742: LD_ADDR_EXP 36
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// sDepot := false ;
13750: LD_ADDR_EXP 37
13754: PUSH
13755: LD_INT 0
13757: ST_TO_ADDR
// sFlag := false ;
13758: LD_ADDR_EXP 38
13762: PUSH
13763: LD_INT 0
13765: ST_TO_ADDR
// sKamikadze := false ;
13766: LD_ADDR_EXP 46
13770: PUSH
13771: LD_INT 0
13773: ST_TO_ADDR
// sTroll := false ;
13774: LD_ADDR_EXP 47
13778: PUSH
13779: LD_INT 0
13781: ST_TO_ADDR
// sSlow := false ;
13782: LD_ADDR_EXP 48
13786: PUSH
13787: LD_INT 0
13789: ST_TO_ADDR
// sLack := false ;
13790: LD_ADDR_EXP 49
13794: PUSH
13795: LD_INT 0
13797: ST_TO_ADDR
// sTank := false ;
13798: LD_ADDR_EXP 51
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// sRemote := false ;
13806: LD_ADDR_EXP 52
13810: PUSH
13811: LD_INT 0
13813: ST_TO_ADDR
// sPowell := false ;
13814: LD_ADDR_EXP 53
13818: PUSH
13819: LD_INT 0
13821: ST_TO_ADDR
// sTeleport := false ;
13822: LD_ADDR_EXP 56
13826: PUSH
13827: LD_INT 0
13829: ST_TO_ADDR
// sOilTower := false ;
13830: LD_ADDR_EXP 58
13834: PUSH
13835: LD_INT 0
13837: ST_TO_ADDR
// sShovel := false ;
13838: LD_ADDR_EXP 59
13842: PUSH
13843: LD_INT 0
13845: ST_TO_ADDR
// sSheik := false ;
13846: LD_ADDR_EXP 60
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// sEarthquake := false ;
13854: LD_ADDR_EXP 62
13858: PUSH
13859: LD_INT 0
13861: ST_TO_ADDR
// sAI := false ;
13862: LD_ADDR_EXP 63
13866: PUSH
13867: LD_INT 0
13869: ST_TO_ADDR
// sCargo := false ;
13870: LD_ADDR_EXP 66
13874: PUSH
13875: LD_INT 0
13877: ST_TO_ADDR
// sDLaser := false ;
13878: LD_ADDR_EXP 67
13882: PUSH
13883: LD_INT 0
13885: ST_TO_ADDR
// sExchange := false ;
13886: LD_ADDR_EXP 68
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// sFac := false ;
13894: LD_ADDR_EXP 69
13898: PUSH
13899: LD_INT 0
13901: ST_TO_ADDR
// sPower := false ;
13902: LD_ADDR_EXP 70
13906: PUSH
13907: LD_INT 0
13909: ST_TO_ADDR
// sRandom := false ;
13910: LD_ADDR_EXP 71
13914: PUSH
13915: LD_INT 0
13917: ST_TO_ADDR
// sShield := false ;
13918: LD_ADDR_EXP 72
13922: PUSH
13923: LD_INT 0
13925: ST_TO_ADDR
// sTime := false ;
13926: LD_ADDR_EXP 73
13930: PUSH
13931: LD_INT 0
13933: ST_TO_ADDR
// sTools := false ;
13934: LD_ADDR_EXP 74
13938: PUSH
13939: LD_INT 0
13941: ST_TO_ADDR
// sSold := false ;
13942: LD_ADDR_EXP 39
13946: PUSH
13947: LD_INT 0
13949: ST_TO_ADDR
// sDiff := false ;
13950: LD_ADDR_EXP 40
13954: PUSH
13955: LD_INT 0
13957: ST_TO_ADDR
// sFog := false ;
13958: LD_ADDR_EXP 43
13962: PUSH
13963: LD_INT 0
13965: ST_TO_ADDR
// sReset := false ;
13966: LD_ADDR_EXP 44
13970: PUSH
13971: LD_INT 0
13973: ST_TO_ADDR
// sSun := false ;
13974: LD_ADDR_EXP 45
13978: PUSH
13979: LD_INT 0
13981: ST_TO_ADDR
// sTiger := false ;
13982: LD_ADDR_EXP 41
13986: PUSH
13987: LD_INT 0
13989: ST_TO_ADDR
// sBomb := false ;
13990: LD_ADDR_EXP 42
13994: PUSH
13995: LD_INT 0
13997: ST_TO_ADDR
// sWound := false ;
13998: LD_ADDR_EXP 50
14002: PUSH
14003: LD_INT 0
14005: ST_TO_ADDR
// sBetray := false ;
14006: LD_ADDR_EXP 54
14010: PUSH
14011: LD_INT 0
14013: ST_TO_ADDR
// sContamin := false ;
14014: LD_ADDR_EXP 55
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// sOil := false ;
14022: LD_ADDR_EXP 57
14026: PUSH
14027: LD_INT 0
14029: ST_TO_ADDR
// sStu := false ;
14030: LD_ADDR_EXP 61
14034: PUSH
14035: LD_INT 0
14037: ST_TO_ADDR
// sBazooka := false ;
14038: LD_ADDR_EXP 64
14042: PUSH
14043: LD_INT 0
14045: ST_TO_ADDR
// sMortar := false ;
14046: LD_ADDR_EXP 65
14050: PUSH
14051: LD_INT 0
14053: ST_TO_ADDR
// sRanger := false ;
14054: LD_ADDR_EXP 75
14058: PUSH
14059: LD_INT 0
14061: ST_TO_ADDR
// sComputer := false ;
14062: LD_ADDR_EXP 76
14066: PUSH
14067: LD_INT 0
14069: ST_TO_ADDR
// s30 := false ;
14070: LD_ADDR_EXP 77
14074: PUSH
14075: LD_INT 0
14077: ST_TO_ADDR
// s60 := false ;
14078: LD_ADDR_EXP 78
14082: PUSH
14083: LD_INT 0
14085: ST_TO_ADDR
// end ;
14086: LD_VAR 0 1
14090: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
14095: PPUSH
14096: PPUSH
14097: PPUSH
14098: PPUSH
14099: PPUSH
// result := [ ] ;
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: EMPTY
14106: ST_TO_ADDR
// if campaign_id = 1 then
14107: LD_OWVAR 69
14111: PUSH
14112: LD_INT 1
14114: EQUAL
14115: IFFALSE 17281
// begin case mission_number of 1 :
14117: LD_OWVAR 70
14121: PUSH
14122: LD_INT 1
14124: DOUBLE
14125: EQUAL
14126: IFTRUE 14130
14128: GO 14206
14130: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14131: LD_ADDR_VAR 0 2
14135: PUSH
14136: LD_INT 2
14138: PUSH
14139: LD_INT 4
14141: PUSH
14142: LD_INT 11
14144: PUSH
14145: LD_INT 12
14147: PUSH
14148: LD_INT 15
14150: PUSH
14151: LD_INT 16
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_INT 23
14159: PUSH
14160: LD_INT 26
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 101
14176: PUSH
14177: LD_INT 102
14179: PUSH
14180: LD_INT 106
14182: PUSH
14183: LD_INT 116
14185: PUSH
14186: LD_INT 117
14188: PUSH
14189: LD_INT 118
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: ST_TO_ADDR
14204: GO 17279
14206: LD_INT 2
14208: DOUBLE
14209: EQUAL
14210: IFTRUE 14214
14212: GO 14298
14214: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14215: LD_ADDR_VAR 0 2
14219: PUSH
14220: LD_INT 2
14222: PUSH
14223: LD_INT 4
14225: PUSH
14226: LD_INT 11
14228: PUSH
14229: LD_INT 12
14231: PUSH
14232: LD_INT 15
14234: PUSH
14235: LD_INT 16
14237: PUSH
14238: LD_INT 22
14240: PUSH
14241: LD_INT 23
14243: PUSH
14244: LD_INT 26
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 101
14260: PUSH
14261: LD_INT 102
14263: PUSH
14264: LD_INT 105
14266: PUSH
14267: LD_INT 106
14269: PUSH
14270: LD_INT 108
14272: PUSH
14273: LD_INT 116
14275: PUSH
14276: LD_INT 117
14278: PUSH
14279: LD_INT 118
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: ST_TO_ADDR
14296: GO 17279
14298: LD_INT 3
14300: DOUBLE
14301: EQUAL
14302: IFTRUE 14306
14304: GO 14394
14306: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14307: LD_ADDR_VAR 0 2
14311: PUSH
14312: LD_INT 2
14314: PUSH
14315: LD_INT 4
14317: PUSH
14318: LD_INT 5
14320: PUSH
14321: LD_INT 11
14323: PUSH
14324: LD_INT 12
14326: PUSH
14327: LD_INT 15
14329: PUSH
14330: LD_INT 16
14332: PUSH
14333: LD_INT 22
14335: PUSH
14336: LD_INT 26
14338: PUSH
14339: LD_INT 36
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 101
14356: PUSH
14357: LD_INT 102
14359: PUSH
14360: LD_INT 105
14362: PUSH
14363: LD_INT 106
14365: PUSH
14366: LD_INT 108
14368: PUSH
14369: LD_INT 116
14371: PUSH
14372: LD_INT 117
14374: PUSH
14375: LD_INT 118
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: ST_TO_ADDR
14392: GO 17279
14394: LD_INT 4
14396: DOUBLE
14397: EQUAL
14398: IFTRUE 14402
14400: GO 14498
14402: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14403: LD_ADDR_VAR 0 2
14407: PUSH
14408: LD_INT 2
14410: PUSH
14411: LD_INT 4
14413: PUSH
14414: LD_INT 5
14416: PUSH
14417: LD_INT 8
14419: PUSH
14420: LD_INT 11
14422: PUSH
14423: LD_INT 12
14425: PUSH
14426: LD_INT 15
14428: PUSH
14429: LD_INT 16
14431: PUSH
14432: LD_INT 22
14434: PUSH
14435: LD_INT 23
14437: PUSH
14438: LD_INT 26
14440: PUSH
14441: LD_INT 36
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 101
14460: PUSH
14461: LD_INT 102
14463: PUSH
14464: LD_INT 105
14466: PUSH
14467: LD_INT 106
14469: PUSH
14470: LD_INT 108
14472: PUSH
14473: LD_INT 116
14475: PUSH
14476: LD_INT 117
14478: PUSH
14479: LD_INT 118
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: ST_TO_ADDR
14496: GO 17279
14498: LD_INT 5
14500: DOUBLE
14501: EQUAL
14502: IFTRUE 14506
14504: GO 14618
14506: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14507: LD_ADDR_VAR 0 2
14511: PUSH
14512: LD_INT 2
14514: PUSH
14515: LD_INT 4
14517: PUSH
14518: LD_INT 5
14520: PUSH
14521: LD_INT 6
14523: PUSH
14524: LD_INT 8
14526: PUSH
14527: LD_INT 11
14529: PUSH
14530: LD_INT 12
14532: PUSH
14533: LD_INT 15
14535: PUSH
14536: LD_INT 16
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_INT 23
14544: PUSH
14545: LD_INT 25
14547: PUSH
14548: LD_INT 26
14550: PUSH
14551: LD_INT 36
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 101
14572: PUSH
14573: LD_INT 102
14575: PUSH
14576: LD_INT 105
14578: PUSH
14579: LD_INT 106
14581: PUSH
14582: LD_INT 108
14584: PUSH
14585: LD_INT 109
14587: PUSH
14588: LD_INT 112
14590: PUSH
14591: LD_INT 116
14593: PUSH
14594: LD_INT 117
14596: PUSH
14597: LD_INT 118
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: ST_TO_ADDR
14616: GO 17279
14618: LD_INT 6
14620: DOUBLE
14621: EQUAL
14622: IFTRUE 14626
14624: GO 14758
14626: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14627: LD_ADDR_VAR 0 2
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: LD_INT 4
14637: PUSH
14638: LD_INT 5
14640: PUSH
14641: LD_INT 6
14643: PUSH
14644: LD_INT 8
14646: PUSH
14647: LD_INT 11
14649: PUSH
14650: LD_INT 12
14652: PUSH
14653: LD_INT 15
14655: PUSH
14656: LD_INT 16
14658: PUSH
14659: LD_INT 20
14661: PUSH
14662: LD_INT 21
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 25
14673: PUSH
14674: LD_INT 26
14676: PUSH
14677: LD_INT 30
14679: PUSH
14680: LD_INT 31
14682: PUSH
14683: LD_INT 32
14685: PUSH
14686: LD_INT 36
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 101
14712: PUSH
14713: LD_INT 102
14715: PUSH
14716: LD_INT 105
14718: PUSH
14719: LD_INT 106
14721: PUSH
14722: LD_INT 108
14724: PUSH
14725: LD_INT 109
14727: PUSH
14728: LD_INT 112
14730: PUSH
14731: LD_INT 116
14733: PUSH
14734: LD_INT 117
14736: PUSH
14737: LD_INT 118
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: ST_TO_ADDR
14756: GO 17279
14758: LD_INT 7
14760: DOUBLE
14761: EQUAL
14762: IFTRUE 14766
14764: GO 14878
14766: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14767: LD_ADDR_VAR 0 2
14771: PUSH
14772: LD_INT 2
14774: PUSH
14775: LD_INT 4
14777: PUSH
14778: LD_INT 5
14780: PUSH
14781: LD_INT 7
14783: PUSH
14784: LD_INT 11
14786: PUSH
14787: LD_INT 12
14789: PUSH
14790: LD_INT 15
14792: PUSH
14793: LD_INT 16
14795: PUSH
14796: LD_INT 20
14798: PUSH
14799: LD_INT 21
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_INT 23
14807: PUSH
14808: LD_INT 25
14810: PUSH
14811: LD_INT 26
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: PUSH
14830: LD_INT 101
14832: PUSH
14833: LD_INT 102
14835: PUSH
14836: LD_INT 103
14838: PUSH
14839: LD_INT 105
14841: PUSH
14842: LD_INT 106
14844: PUSH
14845: LD_INT 108
14847: PUSH
14848: LD_INT 112
14850: PUSH
14851: LD_INT 116
14853: PUSH
14854: LD_INT 117
14856: PUSH
14857: LD_INT 118
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: ST_TO_ADDR
14876: GO 17279
14878: LD_INT 8
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 15026
14886: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14887: LD_ADDR_VAR 0 2
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: LD_INT 4
14897: PUSH
14898: LD_INT 5
14900: PUSH
14901: LD_INT 6
14903: PUSH
14904: LD_INT 7
14906: PUSH
14907: LD_INT 8
14909: PUSH
14910: LD_INT 11
14912: PUSH
14913: LD_INT 12
14915: PUSH
14916: LD_INT 15
14918: PUSH
14919: LD_INT 16
14921: PUSH
14922: LD_INT 20
14924: PUSH
14925: LD_INT 21
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_INT 23
14933: PUSH
14934: LD_INT 25
14936: PUSH
14937: LD_INT 26
14939: PUSH
14940: LD_INT 30
14942: PUSH
14943: LD_INT 31
14945: PUSH
14946: LD_INT 32
14948: PUSH
14949: LD_INT 36
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 101
14976: PUSH
14977: LD_INT 102
14979: PUSH
14980: LD_INT 103
14982: PUSH
14983: LD_INT 105
14985: PUSH
14986: LD_INT 106
14988: PUSH
14989: LD_INT 108
14991: PUSH
14992: LD_INT 109
14994: PUSH
14995: LD_INT 112
14997: PUSH
14998: LD_INT 116
15000: PUSH
15001: LD_INT 117
15003: PUSH
15004: LD_INT 118
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 17279
15026: LD_INT 9
15028: DOUBLE
15029: EQUAL
15030: IFTRUE 15034
15032: GO 15182
15034: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15035: LD_ADDR_VAR 0 2
15039: PUSH
15040: LD_INT 2
15042: PUSH
15043: LD_INT 4
15045: PUSH
15046: LD_INT 5
15048: PUSH
15049: LD_INT 6
15051: PUSH
15052: LD_INT 7
15054: PUSH
15055: LD_INT 8
15057: PUSH
15058: LD_INT 11
15060: PUSH
15061: LD_INT 12
15063: PUSH
15064: LD_INT 15
15066: PUSH
15067: LD_INT 16
15069: PUSH
15070: LD_INT 20
15072: PUSH
15073: LD_INT 21
15075: PUSH
15076: LD_INT 22
15078: PUSH
15079: LD_INT 23
15081: PUSH
15082: LD_INT 25
15084: PUSH
15085: LD_INT 26
15087: PUSH
15088: LD_INT 28
15090: PUSH
15091: LD_INT 30
15093: PUSH
15094: LD_INT 31
15096: PUSH
15097: LD_INT 32
15099: PUSH
15100: LD_INT 36
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 101
15128: PUSH
15129: LD_INT 102
15131: PUSH
15132: LD_INT 103
15134: PUSH
15135: LD_INT 105
15137: PUSH
15138: LD_INT 106
15140: PUSH
15141: LD_INT 108
15143: PUSH
15144: LD_INT 109
15146: PUSH
15147: LD_INT 112
15149: PUSH
15150: LD_INT 114
15152: PUSH
15153: LD_INT 116
15155: PUSH
15156: LD_INT 117
15158: PUSH
15159: LD_INT 118
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: ST_TO_ADDR
15180: GO 17279
15182: LD_INT 10
15184: DOUBLE
15185: EQUAL
15186: IFTRUE 15190
15188: GO 15386
15190: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15191: LD_ADDR_VAR 0 2
15195: PUSH
15196: LD_INT 2
15198: PUSH
15199: LD_INT 4
15201: PUSH
15202: LD_INT 5
15204: PUSH
15205: LD_INT 6
15207: PUSH
15208: LD_INT 7
15210: PUSH
15211: LD_INT 8
15213: PUSH
15214: LD_INT 9
15216: PUSH
15217: LD_INT 10
15219: PUSH
15220: LD_INT 11
15222: PUSH
15223: LD_INT 12
15225: PUSH
15226: LD_INT 13
15228: PUSH
15229: LD_INT 14
15231: PUSH
15232: LD_INT 15
15234: PUSH
15235: LD_INT 16
15237: PUSH
15238: LD_INT 17
15240: PUSH
15241: LD_INT 18
15243: PUSH
15244: LD_INT 19
15246: PUSH
15247: LD_INT 20
15249: PUSH
15250: LD_INT 21
15252: PUSH
15253: LD_INT 22
15255: PUSH
15256: LD_INT 23
15258: PUSH
15259: LD_INT 24
15261: PUSH
15262: LD_INT 25
15264: PUSH
15265: LD_INT 26
15267: PUSH
15268: LD_INT 28
15270: PUSH
15271: LD_INT 30
15273: PUSH
15274: LD_INT 31
15276: PUSH
15277: LD_INT 32
15279: PUSH
15280: LD_INT 36
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 101
15316: PUSH
15317: LD_INT 102
15319: PUSH
15320: LD_INT 103
15322: PUSH
15323: LD_INT 104
15325: PUSH
15326: LD_INT 105
15328: PUSH
15329: LD_INT 106
15331: PUSH
15332: LD_INT 107
15334: PUSH
15335: LD_INT 108
15337: PUSH
15338: LD_INT 109
15340: PUSH
15341: LD_INT 110
15343: PUSH
15344: LD_INT 111
15346: PUSH
15347: LD_INT 112
15349: PUSH
15350: LD_INT 114
15352: PUSH
15353: LD_INT 116
15355: PUSH
15356: LD_INT 117
15358: PUSH
15359: LD_INT 118
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: ST_TO_ADDR
15384: GO 17279
15386: LD_INT 11
15388: DOUBLE
15389: EQUAL
15390: IFTRUE 15394
15392: GO 15598
15394: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: LD_INT 4
15408: PUSH
15409: LD_INT 5
15411: PUSH
15412: LD_INT 6
15414: PUSH
15415: LD_INT 7
15417: PUSH
15418: LD_INT 8
15420: PUSH
15421: LD_INT 9
15423: PUSH
15424: LD_INT 10
15426: PUSH
15427: LD_INT 11
15429: PUSH
15430: LD_INT 12
15432: PUSH
15433: LD_INT 13
15435: PUSH
15436: LD_INT 14
15438: PUSH
15439: LD_INT 15
15441: PUSH
15442: LD_INT 16
15444: PUSH
15445: LD_INT 17
15447: PUSH
15448: LD_INT 18
15450: PUSH
15451: LD_INT 19
15453: PUSH
15454: LD_INT 20
15456: PUSH
15457: LD_INT 21
15459: PUSH
15460: LD_INT 22
15462: PUSH
15463: LD_INT 23
15465: PUSH
15466: LD_INT 24
15468: PUSH
15469: LD_INT 25
15471: PUSH
15472: LD_INT 26
15474: PUSH
15475: LD_INT 28
15477: PUSH
15478: LD_INT 30
15480: PUSH
15481: LD_INT 31
15483: PUSH
15484: LD_INT 32
15486: PUSH
15487: LD_INT 34
15489: PUSH
15490: LD_INT 36
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 101
15528: PUSH
15529: LD_INT 102
15531: PUSH
15532: LD_INT 103
15534: PUSH
15535: LD_INT 104
15537: PUSH
15538: LD_INT 105
15540: PUSH
15541: LD_INT 106
15543: PUSH
15544: LD_INT 107
15546: PUSH
15547: LD_INT 108
15549: PUSH
15550: LD_INT 109
15552: PUSH
15553: LD_INT 110
15555: PUSH
15556: LD_INT 111
15558: PUSH
15559: LD_INT 112
15561: PUSH
15562: LD_INT 114
15564: PUSH
15565: LD_INT 116
15567: PUSH
15568: LD_INT 117
15570: PUSH
15571: LD_INT 118
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: ST_TO_ADDR
15596: GO 17279
15598: LD_INT 12
15600: DOUBLE
15601: EQUAL
15602: IFTRUE 15606
15604: GO 15826
15606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15607: LD_ADDR_VAR 0 2
15611: PUSH
15612: LD_INT 1
15614: PUSH
15615: LD_INT 2
15617: PUSH
15618: LD_INT 3
15620: PUSH
15621: LD_INT 4
15623: PUSH
15624: LD_INT 5
15626: PUSH
15627: LD_INT 6
15629: PUSH
15630: LD_INT 7
15632: PUSH
15633: LD_INT 8
15635: PUSH
15636: LD_INT 9
15638: PUSH
15639: LD_INT 10
15641: PUSH
15642: LD_INT 11
15644: PUSH
15645: LD_INT 12
15647: PUSH
15648: LD_INT 13
15650: PUSH
15651: LD_INT 14
15653: PUSH
15654: LD_INT 15
15656: PUSH
15657: LD_INT 16
15659: PUSH
15660: LD_INT 17
15662: PUSH
15663: LD_INT 18
15665: PUSH
15666: LD_INT 19
15668: PUSH
15669: LD_INT 20
15671: PUSH
15672: LD_INT 21
15674: PUSH
15675: LD_INT 22
15677: PUSH
15678: LD_INT 23
15680: PUSH
15681: LD_INT 24
15683: PUSH
15684: LD_INT 25
15686: PUSH
15687: LD_INT 26
15689: PUSH
15690: LD_INT 27
15692: PUSH
15693: LD_INT 28
15695: PUSH
15696: LD_INT 30
15698: PUSH
15699: LD_INT 31
15701: PUSH
15702: LD_INT 32
15704: PUSH
15705: LD_INT 33
15707: PUSH
15708: LD_INT 34
15710: PUSH
15711: LD_INT 36
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 101
15752: PUSH
15753: LD_INT 102
15755: PUSH
15756: LD_INT 103
15758: PUSH
15759: LD_INT 104
15761: PUSH
15762: LD_INT 105
15764: PUSH
15765: LD_INT 106
15767: PUSH
15768: LD_INT 107
15770: PUSH
15771: LD_INT 108
15773: PUSH
15774: LD_INT 109
15776: PUSH
15777: LD_INT 110
15779: PUSH
15780: LD_INT 111
15782: PUSH
15783: LD_INT 112
15785: PUSH
15786: LD_INT 113
15788: PUSH
15789: LD_INT 114
15791: PUSH
15792: LD_INT 116
15794: PUSH
15795: LD_INT 117
15797: PUSH
15798: LD_INT 118
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: ST_TO_ADDR
15824: GO 17279
15826: LD_INT 13
15828: DOUBLE
15829: EQUAL
15830: IFTRUE 15834
15832: GO 16042
15834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: LD_INT 5
15854: PUSH
15855: LD_INT 8
15857: PUSH
15858: LD_INT 9
15860: PUSH
15861: LD_INT 10
15863: PUSH
15864: LD_INT 11
15866: PUSH
15867: LD_INT 12
15869: PUSH
15870: LD_INT 14
15872: PUSH
15873: LD_INT 15
15875: PUSH
15876: LD_INT 16
15878: PUSH
15879: LD_INT 17
15881: PUSH
15882: LD_INT 18
15884: PUSH
15885: LD_INT 19
15887: PUSH
15888: LD_INT 20
15890: PUSH
15891: LD_INT 21
15893: PUSH
15894: LD_INT 22
15896: PUSH
15897: LD_INT 23
15899: PUSH
15900: LD_INT 24
15902: PUSH
15903: LD_INT 25
15905: PUSH
15906: LD_INT 26
15908: PUSH
15909: LD_INT 27
15911: PUSH
15912: LD_INT 28
15914: PUSH
15915: LD_INT 30
15917: PUSH
15918: LD_INT 31
15920: PUSH
15921: LD_INT 32
15923: PUSH
15924: LD_INT 33
15926: PUSH
15927: LD_INT 34
15929: PUSH
15930: LD_INT 36
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 101
15968: PUSH
15969: LD_INT 102
15971: PUSH
15972: LD_INT 103
15974: PUSH
15975: LD_INT 104
15977: PUSH
15978: LD_INT 105
15980: PUSH
15981: LD_INT 106
15983: PUSH
15984: LD_INT 107
15986: PUSH
15987: LD_INT 108
15989: PUSH
15990: LD_INT 109
15992: PUSH
15993: LD_INT 110
15995: PUSH
15996: LD_INT 111
15998: PUSH
15999: LD_INT 112
16001: PUSH
16002: LD_INT 113
16004: PUSH
16005: LD_INT 114
16007: PUSH
16008: LD_INT 116
16010: PUSH
16011: LD_INT 117
16013: PUSH
16014: LD_INT 118
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: ST_TO_ADDR
16040: GO 17279
16042: LD_INT 14
16044: DOUBLE
16045: EQUAL
16046: IFTRUE 16050
16048: GO 16274
16050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16051: LD_ADDR_VAR 0 2
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: LD_INT 2
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: LD_INT 4
16067: PUSH
16068: LD_INT 5
16070: PUSH
16071: LD_INT 6
16073: PUSH
16074: LD_INT 7
16076: PUSH
16077: LD_INT 8
16079: PUSH
16080: LD_INT 9
16082: PUSH
16083: LD_INT 10
16085: PUSH
16086: LD_INT 11
16088: PUSH
16089: LD_INT 12
16091: PUSH
16092: LD_INT 13
16094: PUSH
16095: LD_INT 14
16097: PUSH
16098: LD_INT 15
16100: PUSH
16101: LD_INT 16
16103: PUSH
16104: LD_INT 17
16106: PUSH
16107: LD_INT 18
16109: PUSH
16110: LD_INT 19
16112: PUSH
16113: LD_INT 20
16115: PUSH
16116: LD_INT 21
16118: PUSH
16119: LD_INT 22
16121: PUSH
16122: LD_INT 23
16124: PUSH
16125: LD_INT 24
16127: PUSH
16128: LD_INT 25
16130: PUSH
16131: LD_INT 26
16133: PUSH
16134: LD_INT 27
16136: PUSH
16137: LD_INT 28
16139: PUSH
16140: LD_INT 29
16142: PUSH
16143: LD_INT 30
16145: PUSH
16146: LD_INT 31
16148: PUSH
16149: LD_INT 32
16151: PUSH
16152: LD_INT 33
16154: PUSH
16155: LD_INT 34
16157: PUSH
16158: LD_INT 36
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 101
16200: PUSH
16201: LD_INT 102
16203: PUSH
16204: LD_INT 103
16206: PUSH
16207: LD_INT 104
16209: PUSH
16210: LD_INT 105
16212: PUSH
16213: LD_INT 106
16215: PUSH
16216: LD_INT 107
16218: PUSH
16219: LD_INT 108
16221: PUSH
16222: LD_INT 109
16224: PUSH
16225: LD_INT 110
16227: PUSH
16228: LD_INT 111
16230: PUSH
16231: LD_INT 112
16233: PUSH
16234: LD_INT 113
16236: PUSH
16237: LD_INT 114
16239: PUSH
16240: LD_INT 116
16242: PUSH
16243: LD_INT 117
16245: PUSH
16246: LD_INT 118
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: ST_TO_ADDR
16272: GO 17279
16274: LD_INT 15
16276: DOUBLE
16277: EQUAL
16278: IFTRUE 16282
16280: GO 16506
16282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16283: LD_ADDR_VAR 0 2
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: LD_INT 2
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: LD_INT 4
16299: PUSH
16300: LD_INT 5
16302: PUSH
16303: LD_INT 6
16305: PUSH
16306: LD_INT 7
16308: PUSH
16309: LD_INT 8
16311: PUSH
16312: LD_INT 9
16314: PUSH
16315: LD_INT 10
16317: PUSH
16318: LD_INT 11
16320: PUSH
16321: LD_INT 12
16323: PUSH
16324: LD_INT 13
16326: PUSH
16327: LD_INT 14
16329: PUSH
16330: LD_INT 15
16332: PUSH
16333: LD_INT 16
16335: PUSH
16336: LD_INT 17
16338: PUSH
16339: LD_INT 18
16341: PUSH
16342: LD_INT 19
16344: PUSH
16345: LD_INT 20
16347: PUSH
16348: LD_INT 21
16350: PUSH
16351: LD_INT 22
16353: PUSH
16354: LD_INT 23
16356: PUSH
16357: LD_INT 24
16359: PUSH
16360: LD_INT 25
16362: PUSH
16363: LD_INT 26
16365: PUSH
16366: LD_INT 27
16368: PUSH
16369: LD_INT 28
16371: PUSH
16372: LD_INT 29
16374: PUSH
16375: LD_INT 30
16377: PUSH
16378: LD_INT 31
16380: PUSH
16381: LD_INT 32
16383: PUSH
16384: LD_INT 33
16386: PUSH
16387: LD_INT 34
16389: PUSH
16390: LD_INT 36
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 101
16432: PUSH
16433: LD_INT 102
16435: PUSH
16436: LD_INT 103
16438: PUSH
16439: LD_INT 104
16441: PUSH
16442: LD_INT 105
16444: PUSH
16445: LD_INT 106
16447: PUSH
16448: LD_INT 107
16450: PUSH
16451: LD_INT 108
16453: PUSH
16454: LD_INT 109
16456: PUSH
16457: LD_INT 110
16459: PUSH
16460: LD_INT 111
16462: PUSH
16463: LD_INT 112
16465: PUSH
16466: LD_INT 113
16468: PUSH
16469: LD_INT 114
16471: PUSH
16472: LD_INT 116
16474: PUSH
16475: LD_INT 117
16477: PUSH
16478: LD_INT 118
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: ST_TO_ADDR
16504: GO 17279
16506: LD_INT 16
16508: DOUBLE
16509: EQUAL
16510: IFTRUE 16514
16512: GO 16650
16514: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16515: LD_ADDR_VAR 0 2
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: LD_INT 4
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: LD_INT 7
16531: PUSH
16532: LD_INT 11
16534: PUSH
16535: LD_INT 12
16537: PUSH
16538: LD_INT 15
16540: PUSH
16541: LD_INT 16
16543: PUSH
16544: LD_INT 20
16546: PUSH
16547: LD_INT 21
16549: PUSH
16550: LD_INT 22
16552: PUSH
16553: LD_INT 23
16555: PUSH
16556: LD_INT 25
16558: PUSH
16559: LD_INT 26
16561: PUSH
16562: LD_INT 30
16564: PUSH
16565: LD_INT 31
16567: PUSH
16568: LD_INT 32
16570: PUSH
16571: LD_INT 33
16573: PUSH
16574: LD_INT 34
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 101
16600: PUSH
16601: LD_INT 102
16603: PUSH
16604: LD_INT 103
16606: PUSH
16607: LD_INT 106
16609: PUSH
16610: LD_INT 108
16612: PUSH
16613: LD_INT 112
16615: PUSH
16616: LD_INT 113
16618: PUSH
16619: LD_INT 114
16621: PUSH
16622: LD_INT 116
16624: PUSH
16625: LD_INT 117
16627: PUSH
16628: LD_INT 118
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: ST_TO_ADDR
16648: GO 17279
16650: LD_INT 17
16652: DOUBLE
16653: EQUAL
16654: IFTRUE 16658
16656: GO 16882
16658: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16659: LD_ADDR_VAR 0 2
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 3
16672: PUSH
16673: LD_INT 4
16675: PUSH
16676: LD_INT 5
16678: PUSH
16679: LD_INT 6
16681: PUSH
16682: LD_INT 7
16684: PUSH
16685: LD_INT 8
16687: PUSH
16688: LD_INT 9
16690: PUSH
16691: LD_INT 10
16693: PUSH
16694: LD_INT 11
16696: PUSH
16697: LD_INT 12
16699: PUSH
16700: LD_INT 13
16702: PUSH
16703: LD_INT 14
16705: PUSH
16706: LD_INT 15
16708: PUSH
16709: LD_INT 16
16711: PUSH
16712: LD_INT 17
16714: PUSH
16715: LD_INT 18
16717: PUSH
16718: LD_INT 19
16720: PUSH
16721: LD_INT 20
16723: PUSH
16724: LD_INT 21
16726: PUSH
16727: LD_INT 22
16729: PUSH
16730: LD_INT 23
16732: PUSH
16733: LD_INT 24
16735: PUSH
16736: LD_INT 25
16738: PUSH
16739: LD_INT 26
16741: PUSH
16742: LD_INT 27
16744: PUSH
16745: LD_INT 28
16747: PUSH
16748: LD_INT 29
16750: PUSH
16751: LD_INT 30
16753: PUSH
16754: LD_INT 31
16756: PUSH
16757: LD_INT 32
16759: PUSH
16760: LD_INT 33
16762: PUSH
16763: LD_INT 34
16765: PUSH
16766: LD_INT 36
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 101
16808: PUSH
16809: LD_INT 102
16811: PUSH
16812: LD_INT 103
16814: PUSH
16815: LD_INT 104
16817: PUSH
16818: LD_INT 105
16820: PUSH
16821: LD_INT 106
16823: PUSH
16824: LD_INT 107
16826: PUSH
16827: LD_INT 108
16829: PUSH
16830: LD_INT 109
16832: PUSH
16833: LD_INT 110
16835: PUSH
16836: LD_INT 111
16838: PUSH
16839: LD_INT 112
16841: PUSH
16842: LD_INT 113
16844: PUSH
16845: LD_INT 114
16847: PUSH
16848: LD_INT 116
16850: PUSH
16851: LD_INT 117
16853: PUSH
16854: LD_INT 118
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: ST_TO_ADDR
16880: GO 17279
16882: LD_INT 18
16884: DOUBLE
16885: EQUAL
16886: IFTRUE 16890
16888: GO 17038
16890: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16891: LD_ADDR_VAR 0 2
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: LD_INT 4
16901: PUSH
16902: LD_INT 5
16904: PUSH
16905: LD_INT 7
16907: PUSH
16908: LD_INT 11
16910: PUSH
16911: LD_INT 12
16913: PUSH
16914: LD_INT 15
16916: PUSH
16917: LD_INT 16
16919: PUSH
16920: LD_INT 20
16922: PUSH
16923: LD_INT 21
16925: PUSH
16926: LD_INT 22
16928: PUSH
16929: LD_INT 23
16931: PUSH
16932: LD_INT 25
16934: PUSH
16935: LD_INT 26
16937: PUSH
16938: LD_INT 30
16940: PUSH
16941: LD_INT 31
16943: PUSH
16944: LD_INT 32
16946: PUSH
16947: LD_INT 33
16949: PUSH
16950: LD_INT 34
16952: PUSH
16953: LD_INT 35
16955: PUSH
16956: LD_INT 36
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 101
16984: PUSH
16985: LD_INT 102
16987: PUSH
16988: LD_INT 103
16990: PUSH
16991: LD_INT 106
16993: PUSH
16994: LD_INT 108
16996: PUSH
16997: LD_INT 112
16999: PUSH
17000: LD_INT 113
17002: PUSH
17003: LD_INT 114
17005: PUSH
17006: LD_INT 115
17008: PUSH
17009: LD_INT 116
17011: PUSH
17012: LD_INT 117
17014: PUSH
17015: LD_INT 118
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: ST_TO_ADDR
17036: GO 17279
17038: LD_INT 19
17040: DOUBLE
17041: EQUAL
17042: IFTRUE 17046
17044: GO 17278
17046: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: LD_INT 2
17057: PUSH
17058: LD_INT 3
17060: PUSH
17061: LD_INT 4
17063: PUSH
17064: LD_INT 5
17066: PUSH
17067: LD_INT 6
17069: PUSH
17070: LD_INT 7
17072: PUSH
17073: LD_INT 8
17075: PUSH
17076: LD_INT 9
17078: PUSH
17079: LD_INT 10
17081: PUSH
17082: LD_INT 11
17084: PUSH
17085: LD_INT 12
17087: PUSH
17088: LD_INT 13
17090: PUSH
17091: LD_INT 14
17093: PUSH
17094: LD_INT 15
17096: PUSH
17097: LD_INT 16
17099: PUSH
17100: LD_INT 17
17102: PUSH
17103: LD_INT 18
17105: PUSH
17106: LD_INT 19
17108: PUSH
17109: LD_INT 20
17111: PUSH
17112: LD_INT 21
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_INT 23
17120: PUSH
17121: LD_INT 24
17123: PUSH
17124: LD_INT 25
17126: PUSH
17127: LD_INT 26
17129: PUSH
17130: LD_INT 27
17132: PUSH
17133: LD_INT 28
17135: PUSH
17136: LD_INT 29
17138: PUSH
17139: LD_INT 30
17141: PUSH
17142: LD_INT 31
17144: PUSH
17145: LD_INT 32
17147: PUSH
17148: LD_INT 33
17150: PUSH
17151: LD_INT 34
17153: PUSH
17154: LD_INT 35
17156: PUSH
17157: LD_INT 36
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 101
17200: PUSH
17201: LD_INT 102
17203: PUSH
17204: LD_INT 103
17206: PUSH
17207: LD_INT 104
17209: PUSH
17210: LD_INT 105
17212: PUSH
17213: LD_INT 106
17215: PUSH
17216: LD_INT 107
17218: PUSH
17219: LD_INT 108
17221: PUSH
17222: LD_INT 109
17224: PUSH
17225: LD_INT 110
17227: PUSH
17228: LD_INT 111
17230: PUSH
17231: LD_INT 112
17233: PUSH
17234: LD_INT 113
17236: PUSH
17237: LD_INT 114
17239: PUSH
17240: LD_INT 115
17242: PUSH
17243: LD_INT 116
17245: PUSH
17246: LD_INT 117
17248: PUSH
17249: LD_INT 118
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: ST_TO_ADDR
17276: GO 17279
17278: POP
// end else
17279: GO 17510
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 2
17291: PUSH
17292: LD_INT 3
17294: PUSH
17295: LD_INT 4
17297: PUSH
17298: LD_INT 5
17300: PUSH
17301: LD_INT 6
17303: PUSH
17304: LD_INT 7
17306: PUSH
17307: LD_INT 8
17309: PUSH
17310: LD_INT 9
17312: PUSH
17313: LD_INT 10
17315: PUSH
17316: LD_INT 11
17318: PUSH
17319: LD_INT 12
17321: PUSH
17322: LD_INT 13
17324: PUSH
17325: LD_INT 14
17327: PUSH
17328: LD_INT 15
17330: PUSH
17331: LD_INT 16
17333: PUSH
17334: LD_INT 17
17336: PUSH
17337: LD_INT 18
17339: PUSH
17340: LD_INT 19
17342: PUSH
17343: LD_INT 20
17345: PUSH
17346: LD_INT 21
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 23
17354: PUSH
17355: LD_INT 24
17357: PUSH
17358: LD_INT 25
17360: PUSH
17361: LD_INT 26
17363: PUSH
17364: LD_INT 27
17366: PUSH
17367: LD_INT 28
17369: PUSH
17370: LD_INT 29
17372: PUSH
17373: LD_INT 30
17375: PUSH
17376: LD_INT 31
17378: PUSH
17379: LD_INT 32
17381: PUSH
17382: LD_INT 33
17384: PUSH
17385: LD_INT 34
17387: PUSH
17388: LD_INT 35
17390: PUSH
17391: LD_INT 36
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 101
17434: PUSH
17435: LD_INT 102
17437: PUSH
17438: LD_INT 103
17440: PUSH
17441: LD_INT 104
17443: PUSH
17444: LD_INT 105
17446: PUSH
17447: LD_INT 106
17449: PUSH
17450: LD_INT 107
17452: PUSH
17453: LD_INT 108
17455: PUSH
17456: LD_INT 109
17458: PUSH
17459: LD_INT 110
17461: PUSH
17462: LD_INT 111
17464: PUSH
17465: LD_INT 112
17467: PUSH
17468: LD_INT 113
17470: PUSH
17471: LD_INT 114
17473: PUSH
17474: LD_INT 115
17476: PUSH
17477: LD_INT 116
17479: PUSH
17480: LD_INT 117
17482: PUSH
17483: LD_INT 118
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: ST_TO_ADDR
// if result then
17510: LD_VAR 0 2
17514: IFFALSE 18300
// begin normal :=  ;
17516: LD_ADDR_VAR 0 5
17520: PUSH
17521: LD_STRING 
17523: ST_TO_ADDR
// hardcore :=  ;
17524: LD_ADDR_VAR 0 6
17528: PUSH
17529: LD_STRING 
17531: ST_TO_ADDR
// active :=  ;
17532: LD_ADDR_VAR 0 7
17536: PUSH
17537: LD_STRING 
17539: ST_TO_ADDR
// for i = 1 to normalCounter do
17540: LD_ADDR_VAR 0 8
17544: PUSH
17545: DOUBLE
17546: LD_INT 1
17548: DEC
17549: ST_TO_ADDR
17550: LD_EXP 23
17554: PUSH
17555: FOR_TO
17556: IFFALSE 17657
// begin tmp := 0 ;
17558: LD_ADDR_VAR 0 3
17562: PUSH
17563: LD_STRING 0
17565: ST_TO_ADDR
// if result [ 1 ] then
17566: LD_VAR 0 2
17570: PUSH
17571: LD_INT 1
17573: ARRAY
17574: IFFALSE 17639
// if result [ 1 ] [ 1 ] = i then
17576: LD_VAR 0 2
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PUSH
17585: LD_INT 1
17587: ARRAY
17588: PUSH
17589: LD_VAR 0 8
17593: EQUAL
17594: IFFALSE 17639
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17596: LD_ADDR_VAR 0 2
17600: PUSH
17601: LD_VAR 0 2
17605: PPUSH
17606: LD_INT 1
17608: PPUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_INT 1
17616: ARRAY
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: CALL_OW 3
17625: PPUSH
17626: CALL_OW 1
17630: ST_TO_ADDR
// tmp := 1 ;
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: LD_STRING 1
17638: ST_TO_ADDR
// end ; normal := normal & tmp ;
17639: LD_ADDR_VAR 0 5
17643: PUSH
17644: LD_VAR 0 5
17648: PUSH
17649: LD_VAR 0 3
17653: STR
17654: ST_TO_ADDR
// end ;
17655: GO 17555
17657: POP
17658: POP
// for i = 1 to hardcoreCounter do
17659: LD_ADDR_VAR 0 8
17663: PUSH
17664: DOUBLE
17665: LD_INT 1
17667: DEC
17668: ST_TO_ADDR
17669: LD_EXP 24
17673: PUSH
17674: FOR_TO
17675: IFFALSE 17780
// begin tmp := 0 ;
17677: LD_ADDR_VAR 0 3
17681: PUSH
17682: LD_STRING 0
17684: ST_TO_ADDR
// if result [ 2 ] then
17685: LD_VAR 0 2
17689: PUSH
17690: LD_INT 2
17692: ARRAY
17693: IFFALSE 17762
// if result [ 2 ] [ 1 ] = 100 + i then
17695: LD_VAR 0 2
17699: PUSH
17700: LD_INT 2
17702: ARRAY
17703: PUSH
17704: LD_INT 1
17706: ARRAY
17707: PUSH
17708: LD_INT 100
17710: PUSH
17711: LD_VAR 0 8
17715: PLUS
17716: EQUAL
17717: IFFALSE 17762
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17719: LD_ADDR_VAR 0 2
17723: PUSH
17724: LD_VAR 0 2
17728: PPUSH
17729: LD_INT 2
17731: PPUSH
17732: LD_VAR 0 2
17736: PUSH
17737: LD_INT 2
17739: ARRAY
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: CALL_OW 3
17748: PPUSH
17749: CALL_OW 1
17753: ST_TO_ADDR
// tmp := 1 ;
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: LD_STRING 1
17761: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17762: LD_ADDR_VAR 0 6
17766: PUSH
17767: LD_VAR 0 6
17771: PUSH
17772: LD_VAR 0 3
17776: STR
17777: ST_TO_ADDR
// end ;
17778: GO 17674
17780: POP
17781: POP
// if isGameLoad then
17782: LD_VAR 0 1
17786: IFFALSE 18261
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17788: LD_ADDR_VAR 0 4
17792: PUSH
17793: LD_EXP 27
17797: PUSH
17798: LD_EXP 26
17802: PUSH
17803: LD_EXP 28
17807: PUSH
17808: LD_EXP 25
17812: PUSH
17813: LD_EXP 29
17817: PUSH
17818: LD_EXP 30
17822: PUSH
17823: LD_EXP 31
17827: PUSH
17828: LD_EXP 32
17832: PUSH
17833: LD_EXP 33
17837: PUSH
17838: LD_EXP 34
17842: PUSH
17843: LD_EXP 35
17847: PUSH
17848: LD_EXP 36
17852: PUSH
17853: LD_EXP 37
17857: PUSH
17858: LD_EXP 38
17862: PUSH
17863: LD_EXP 46
17867: PUSH
17868: LD_EXP 47
17872: PUSH
17873: LD_EXP 48
17877: PUSH
17878: LD_EXP 49
17882: PUSH
17883: LD_EXP 51
17887: PUSH
17888: LD_EXP 52
17892: PUSH
17893: LD_EXP 53
17897: PUSH
17898: LD_EXP 56
17902: PUSH
17903: LD_EXP 58
17907: PUSH
17908: LD_EXP 59
17912: PUSH
17913: LD_EXP 60
17917: PUSH
17918: LD_EXP 62
17922: PUSH
17923: LD_EXP 63
17927: PUSH
17928: LD_EXP 66
17932: PUSH
17933: LD_EXP 67
17937: PUSH
17938: LD_EXP 68
17942: PUSH
17943: LD_EXP 69
17947: PUSH
17948: LD_EXP 70
17952: PUSH
17953: LD_EXP 71
17957: PUSH
17958: LD_EXP 72
17962: PUSH
17963: LD_EXP 73
17967: PUSH
17968: LD_EXP 74
17972: PUSH
17973: LD_EXP 39
17977: PUSH
17978: LD_EXP 40
17982: PUSH
17983: LD_EXP 43
17987: PUSH
17988: LD_EXP 44
17992: PUSH
17993: LD_EXP 45
17997: PUSH
17998: LD_EXP 41
18002: PUSH
18003: LD_EXP 42
18007: PUSH
18008: LD_EXP 50
18012: PUSH
18013: LD_EXP 54
18017: PUSH
18018: LD_EXP 55
18022: PUSH
18023: LD_EXP 57
18027: PUSH
18028: LD_EXP 61
18032: PUSH
18033: LD_EXP 64
18037: PUSH
18038: LD_EXP 65
18042: PUSH
18043: LD_EXP 75
18047: PUSH
18048: LD_EXP 76
18052: PUSH
18053: LD_EXP 77
18057: PUSH
18058: LD_EXP 78
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: ST_TO_ADDR
// tmp :=  ;
18119: LD_ADDR_VAR 0 3
18123: PUSH
18124: LD_STRING 
18126: ST_TO_ADDR
// for i = 1 to normalCounter do
18127: LD_ADDR_VAR 0 8
18131: PUSH
18132: DOUBLE
18133: LD_INT 1
18135: DEC
18136: ST_TO_ADDR
18137: LD_EXP 23
18141: PUSH
18142: FOR_TO
18143: IFFALSE 18179
// begin if flags [ i ] then
18145: LD_VAR 0 4
18149: PUSH
18150: LD_VAR 0 8
18154: ARRAY
18155: IFFALSE 18177
// tmp := tmp & i & ; ;
18157: LD_ADDR_VAR 0 3
18161: PUSH
18162: LD_VAR 0 3
18166: PUSH
18167: LD_VAR 0 8
18171: STR
18172: PUSH
18173: LD_STRING ;
18175: STR
18176: ST_TO_ADDR
// end ;
18177: GO 18142
18179: POP
18180: POP
// for i = 1 to hardcoreCounter do
18181: LD_ADDR_VAR 0 8
18185: PUSH
18186: DOUBLE
18187: LD_INT 1
18189: DEC
18190: ST_TO_ADDR
18191: LD_EXP 24
18195: PUSH
18196: FOR_TO
18197: IFFALSE 18243
// begin if flags [ normalCounter + i ] then
18199: LD_VAR 0 4
18203: PUSH
18204: LD_EXP 23
18208: PUSH
18209: LD_VAR 0 8
18213: PLUS
18214: ARRAY
18215: IFFALSE 18241
// tmp := tmp & ( 100 + i ) & ; ;
18217: LD_ADDR_VAR 0 3
18221: PUSH
18222: LD_VAR 0 3
18226: PUSH
18227: LD_INT 100
18229: PUSH
18230: LD_VAR 0 8
18234: PLUS
18235: STR
18236: PUSH
18237: LD_STRING ;
18239: STR
18240: ST_TO_ADDR
// end ;
18241: GO 18196
18243: POP
18244: POP
// if tmp then
18245: LD_VAR 0 3
18249: IFFALSE 18261
// active := tmp ;
18251: LD_ADDR_VAR 0 7
18255: PUSH
18256: LD_VAR 0 3
18260: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18261: LD_STRING getStreamItemsFromMission("
18263: PUSH
18264: LD_VAR 0 5
18268: STR
18269: PUSH
18270: LD_STRING ","
18272: STR
18273: PUSH
18274: LD_VAR 0 6
18278: STR
18279: PUSH
18280: LD_STRING ","
18282: STR
18283: PUSH
18284: LD_VAR 0 7
18288: STR
18289: PUSH
18290: LD_STRING ")
18292: STR
18293: PPUSH
18294: CALL_OW 559
// end else
18298: GO 18307
// ToLua ( getStreamItemsFromMission("","","") ) ;
18300: LD_STRING getStreamItemsFromMission("","","")
18302: PPUSH
18303: CALL_OW 559
// end ;
18307: LD_VAR 0 2
18311: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18312: LD_EXP 22
18316: PUSH
18317: LD_EXP 27
18321: AND
18322: IFFALSE 18446
18324: GO 18326
18326: DISABLE
18327: LD_INT 0
18329: PPUSH
18330: PPUSH
// begin enable ;
18331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18332: LD_ADDR_VAR 0 2
18336: PUSH
18337: LD_INT 22
18339: PUSH
18340: LD_OWVAR 2
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: LD_INT 34
18354: PUSH
18355: LD_INT 7
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 34
18364: PUSH
18365: LD_INT 45
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 34
18374: PUSH
18375: LD_INT 28
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 34
18384: PUSH
18385: LD_INT 47
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PPUSH
18403: CALL_OW 69
18407: ST_TO_ADDR
// if not tmp then
18408: LD_VAR 0 2
18412: NOT
18413: IFFALSE 18417
// exit ;
18415: GO 18446
// for i in tmp do
18417: LD_ADDR_VAR 0 1
18421: PUSH
18422: LD_VAR 0 2
18426: PUSH
18427: FOR_IN
18428: IFFALSE 18444
// begin SetLives ( i , 0 ) ;
18430: LD_VAR 0 1
18434: PPUSH
18435: LD_INT 0
18437: PPUSH
18438: CALL_OW 234
// end ;
18442: GO 18427
18444: POP
18445: POP
// end ;
18446: PPOPN 2
18448: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18449: LD_EXP 22
18453: PUSH
18454: LD_EXP 28
18458: AND
18459: IFFALSE 18543
18461: GO 18463
18463: DISABLE
18464: LD_INT 0
18466: PPUSH
18467: PPUSH
// begin enable ;
18468: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18469: LD_ADDR_VAR 0 2
18473: PUSH
18474: LD_INT 22
18476: PUSH
18477: LD_OWVAR 2
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 32
18488: PUSH
18489: LD_INT 3
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PPUSH
18500: CALL_OW 69
18504: ST_TO_ADDR
// if not tmp then
18505: LD_VAR 0 2
18509: NOT
18510: IFFALSE 18514
// exit ;
18512: GO 18543
// for i in tmp do
18514: LD_ADDR_VAR 0 1
18518: PUSH
18519: LD_VAR 0 2
18523: PUSH
18524: FOR_IN
18525: IFFALSE 18541
// begin SetLives ( i , 0 ) ;
18527: LD_VAR 0 1
18531: PPUSH
18532: LD_INT 0
18534: PPUSH
18535: CALL_OW 234
// end ;
18539: GO 18524
18541: POP
18542: POP
// end ;
18543: PPOPN 2
18545: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18546: LD_EXP 22
18550: PUSH
18551: LD_EXP 25
18555: AND
18556: IFFALSE 18649
18558: GO 18560
18560: DISABLE
18561: LD_INT 0
18563: PPUSH
// begin enable ;
18564: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18565: LD_ADDR_VAR 0 1
18569: PUSH
18570: LD_INT 22
18572: PUSH
18573: LD_OWVAR 2
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 2
18584: PUSH
18585: LD_INT 25
18587: PUSH
18588: LD_INT 5
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 25
18597: PUSH
18598: LD_INT 9
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 25
18607: PUSH
18608: LD_INT 8
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PPUSH
18625: CALL_OW 69
18629: PUSH
18630: FOR_IN
18631: IFFALSE 18647
// begin SetClass ( i , 1 ) ;
18633: LD_VAR 0 1
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: CALL_OW 336
// end ;
18645: GO 18630
18647: POP
18648: POP
// end ;
18649: PPOPN 1
18651: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18652: LD_EXP 22
18656: PUSH
18657: LD_EXP 26
18661: AND
18662: PUSH
18663: LD_OWVAR 65
18667: PUSH
18668: LD_INT 7
18670: LESS
18671: AND
18672: IFFALSE 18686
18674: GO 18676
18676: DISABLE
// begin enable ;
18677: ENABLE
// game_speed := 7 ;
18678: LD_ADDR_OWVAR 65
18682: PUSH
18683: LD_INT 7
18685: ST_TO_ADDR
// end ;
18686: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18687: LD_EXP 22
18691: PUSH
18692: LD_EXP 29
18696: AND
18697: IFFALSE 18899
18699: GO 18701
18701: DISABLE
18702: LD_INT 0
18704: PPUSH
18705: PPUSH
18706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18707: LD_ADDR_VAR 0 3
18711: PUSH
18712: LD_INT 81
18714: PUSH
18715: LD_OWVAR 2
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 21
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PPUSH
18738: CALL_OW 69
18742: ST_TO_ADDR
// if not tmp then
18743: LD_VAR 0 3
18747: NOT
18748: IFFALSE 18752
// exit ;
18750: GO 18899
// if tmp > 5 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_INT 5
18759: GREATER
18760: IFFALSE 18772
// k := 5 else
18762: LD_ADDR_VAR 0 2
18766: PUSH
18767: LD_INT 5
18769: ST_TO_ADDR
18770: GO 18782
// k := tmp ;
18772: LD_ADDR_VAR 0 2
18776: PUSH
18777: LD_VAR 0 3
18781: ST_TO_ADDR
// for i := 1 to k do
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: DOUBLE
18788: LD_INT 1
18790: DEC
18791: ST_TO_ADDR
18792: LD_VAR 0 2
18796: PUSH
18797: FOR_TO
18798: IFFALSE 18897
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18800: LD_VAR 0 3
18804: PUSH
18805: LD_VAR 0 1
18809: ARRAY
18810: PPUSH
18811: LD_VAR 0 1
18815: PUSH
18816: LD_INT 4
18818: MOD
18819: PUSH
18820: LD_INT 1
18822: PLUS
18823: PPUSH
18824: CALL_OW 259
18828: PUSH
18829: LD_INT 10
18831: LESS
18832: IFFALSE 18895
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18834: LD_VAR 0 3
18838: PUSH
18839: LD_VAR 0 1
18843: ARRAY
18844: PPUSH
18845: LD_VAR 0 1
18849: PUSH
18850: LD_INT 4
18852: MOD
18853: PUSH
18854: LD_INT 1
18856: PLUS
18857: PPUSH
18858: LD_VAR 0 3
18862: PUSH
18863: LD_VAR 0 1
18867: ARRAY
18868: PPUSH
18869: LD_VAR 0 1
18873: PUSH
18874: LD_INT 4
18876: MOD
18877: PUSH
18878: LD_INT 1
18880: PLUS
18881: PPUSH
18882: CALL_OW 259
18886: PUSH
18887: LD_INT 1
18889: PLUS
18890: PPUSH
18891: CALL_OW 237
18895: GO 18797
18897: POP
18898: POP
// end ;
18899: PPOPN 3
18901: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18902: LD_EXP 22
18906: PUSH
18907: LD_EXP 30
18911: AND
18912: IFFALSE 18932
18914: GO 18916
18916: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18917: LD_INT 4
18919: PPUSH
18920: LD_OWVAR 2
18924: PPUSH
18925: LD_INT 0
18927: PPUSH
18928: CALL_OW 324
18932: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18933: LD_EXP 22
18937: PUSH
18938: LD_EXP 59
18942: AND
18943: IFFALSE 18963
18945: GO 18947
18947: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18948: LD_INT 19
18950: PPUSH
18951: LD_OWVAR 2
18955: PPUSH
18956: LD_INT 0
18958: PPUSH
18959: CALL_OW 324
18963: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18964: LD_EXP 22
18968: PUSH
18969: LD_EXP 31
18973: AND
18974: IFFALSE 19076
18976: GO 18978
18978: DISABLE
18979: LD_INT 0
18981: PPUSH
18982: PPUSH
// begin enable ;
18983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18984: LD_ADDR_VAR 0 2
18988: PUSH
18989: LD_INT 22
18991: PUSH
18992: LD_OWVAR 2
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 34
19006: PUSH
19007: LD_INT 11
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 34
19016: PUSH
19017: LD_INT 30
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PPUSH
19033: CALL_OW 69
19037: ST_TO_ADDR
// if not tmp then
19038: LD_VAR 0 2
19042: NOT
19043: IFFALSE 19047
// exit ;
19045: GO 19076
// for i in tmp do
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: LD_VAR 0 2
19056: PUSH
19057: FOR_IN
19058: IFFALSE 19074
// begin SetLives ( i , 0 ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 0
19067: PPUSH
19068: CALL_OW 234
// end ;
19072: GO 19057
19074: POP
19075: POP
// end ;
19076: PPOPN 2
19078: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19079: LD_EXP 22
19083: PUSH
19084: LD_EXP 32
19088: AND
19089: IFFALSE 19109
19091: GO 19093
19093: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19094: LD_INT 32
19096: PPUSH
19097: LD_OWVAR 2
19101: PPUSH
19102: LD_INT 0
19104: PPUSH
19105: CALL_OW 324
19109: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19110: LD_EXP 22
19114: PUSH
19115: LD_EXP 33
19119: AND
19120: IFFALSE 19301
19122: GO 19124
19124: DISABLE
19125: LD_INT 0
19127: PPUSH
19128: PPUSH
19129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_INT 22
19137: PUSH
19138: LD_OWVAR 2
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 33
19149: PUSH
19150: LD_INT 3
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PPUSH
19161: CALL_OW 69
19165: ST_TO_ADDR
// if not tmp then
19166: LD_VAR 0 2
19170: NOT
19171: IFFALSE 19175
// exit ;
19173: GO 19301
// side := 0 ;
19175: LD_ADDR_VAR 0 3
19179: PUSH
19180: LD_INT 0
19182: ST_TO_ADDR
// for i := 1 to 8 do
19183: LD_ADDR_VAR 0 1
19187: PUSH
19188: DOUBLE
19189: LD_INT 1
19191: DEC
19192: ST_TO_ADDR
19193: LD_INT 8
19195: PUSH
19196: FOR_TO
19197: IFFALSE 19245
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19199: LD_OWVAR 2
19203: PUSH
19204: LD_VAR 0 1
19208: NONEQUAL
19209: PUSH
19210: LD_OWVAR 2
19214: PPUSH
19215: LD_VAR 0 1
19219: PPUSH
19220: CALL_OW 81
19224: PUSH
19225: LD_INT 2
19227: EQUAL
19228: AND
19229: IFFALSE 19243
// begin side := i ;
19231: LD_ADDR_VAR 0 3
19235: PUSH
19236: LD_VAR 0 1
19240: ST_TO_ADDR
// break ;
19241: GO 19245
// end ;
19243: GO 19196
19245: POP
19246: POP
// if not side then
19247: LD_VAR 0 3
19251: NOT
19252: IFFALSE 19256
// exit ;
19254: GO 19301
// for i := 1 to tmp do
19256: LD_ADDR_VAR 0 1
19260: PUSH
19261: DOUBLE
19262: LD_INT 1
19264: DEC
19265: ST_TO_ADDR
19266: LD_VAR 0 2
19270: PUSH
19271: FOR_TO
19272: IFFALSE 19299
// if Prob ( 60 ) then
19274: LD_INT 60
19276: PPUSH
19277: CALL_OW 13
19281: IFFALSE 19297
// SetSide ( i , side ) ;
19283: LD_VAR 0 1
19287: PPUSH
19288: LD_VAR 0 3
19292: PPUSH
19293: CALL_OW 235
19297: GO 19271
19299: POP
19300: POP
// end ;
19301: PPOPN 3
19303: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19304: LD_EXP 22
19308: PUSH
19309: LD_EXP 35
19313: AND
19314: IFFALSE 19433
19316: GO 19318
19318: DISABLE
19319: LD_INT 0
19321: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19322: LD_ADDR_VAR 0 1
19326: PUSH
19327: LD_INT 22
19329: PUSH
19330: LD_OWVAR 2
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 21
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 3
19351: PUSH
19352: LD_INT 23
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: PPUSH
19371: CALL_OW 69
19375: PUSH
19376: FOR_IN
19377: IFFALSE 19431
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 257
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: LD_INT 2
19394: PUSH
19395: LD_INT 3
19397: PUSH
19398: LD_INT 4
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: IN
19407: IFFALSE 19429
// SetClass ( un , rand ( 1 , 4 ) ) ;
19409: LD_VAR 0 1
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: LD_INT 4
19419: PPUSH
19420: CALL_OW 12
19424: PPUSH
19425: CALL_OW 336
19429: GO 19376
19431: POP
19432: POP
// end ;
19433: PPOPN 1
19435: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19436: LD_EXP 22
19440: PUSH
19441: LD_EXP 34
19445: AND
19446: IFFALSE 19525
19448: GO 19450
19450: DISABLE
19451: LD_INT 0
19453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19454: LD_ADDR_VAR 0 1
19458: PUSH
19459: LD_INT 22
19461: PUSH
19462: LD_OWVAR 2
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 21
19473: PUSH
19474: LD_INT 3
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 69
19489: ST_TO_ADDR
// if not tmp then
19490: LD_VAR 0 1
19494: NOT
19495: IFFALSE 19499
// exit ;
19497: GO 19525
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19499: LD_VAR 0 1
19503: PUSH
19504: LD_INT 1
19506: PPUSH
19507: LD_VAR 0 1
19511: PPUSH
19512: CALL_OW 12
19516: ARRAY
19517: PPUSH
19518: LD_INT 100
19520: PPUSH
19521: CALL_OW 234
// end ;
19525: PPOPN 1
19527: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19528: LD_EXP 22
19532: PUSH
19533: LD_EXP 36
19537: AND
19538: IFFALSE 19636
19540: GO 19542
19542: DISABLE
19543: LD_INT 0
19545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19546: LD_ADDR_VAR 0 1
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_OWVAR 2
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 21
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: ST_TO_ADDR
// if not tmp then
19582: LD_VAR 0 1
19586: NOT
19587: IFFALSE 19591
// exit ;
19589: GO 19636
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19591: LD_VAR 0 1
19595: PUSH
19596: LD_INT 1
19598: PPUSH
19599: LD_VAR 0 1
19603: PPUSH
19604: CALL_OW 12
19608: ARRAY
19609: PPUSH
19610: LD_INT 1
19612: PPUSH
19613: LD_INT 4
19615: PPUSH
19616: CALL_OW 12
19620: PPUSH
19621: LD_INT 3000
19623: PPUSH
19624: LD_INT 9000
19626: PPUSH
19627: CALL_OW 12
19631: PPUSH
19632: CALL_OW 492
// end ;
19636: PPOPN 1
19638: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19639: LD_EXP 22
19643: PUSH
19644: LD_EXP 37
19648: AND
19649: IFFALSE 19669
19651: GO 19653
19653: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19654: LD_INT 1
19656: PPUSH
19657: LD_OWVAR 2
19661: PPUSH
19662: LD_INT 0
19664: PPUSH
19665: CALL_OW 324
19669: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19670: LD_EXP 22
19674: PUSH
19675: LD_EXP 38
19679: AND
19680: IFFALSE 19763
19682: GO 19684
19684: DISABLE
19685: LD_INT 0
19687: PPUSH
19688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19689: LD_ADDR_VAR 0 2
19693: PUSH
19694: LD_INT 22
19696: PUSH
19697: LD_OWVAR 2
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 21
19708: PUSH
19709: LD_INT 3
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PPUSH
19720: CALL_OW 69
19724: ST_TO_ADDR
// if not tmp then
19725: LD_VAR 0 2
19729: NOT
19730: IFFALSE 19734
// exit ;
19732: GO 19763
// for i in tmp do
19734: LD_ADDR_VAR 0 1
19738: PUSH
19739: LD_VAR 0 2
19743: PUSH
19744: FOR_IN
19745: IFFALSE 19761
// SetBLevel ( i , 10 ) ;
19747: LD_VAR 0 1
19751: PPUSH
19752: LD_INT 10
19754: PPUSH
19755: CALL_OW 241
19759: GO 19744
19761: POP
19762: POP
// end ;
19763: PPOPN 2
19765: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19766: LD_EXP 22
19770: PUSH
19771: LD_EXP 39
19775: AND
19776: IFFALSE 19887
19778: GO 19780
19780: DISABLE
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
19785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19786: LD_ADDR_VAR 0 3
19790: PUSH
19791: LD_INT 22
19793: PUSH
19794: LD_OWVAR 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 25
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: ST_TO_ADDR
// if not tmp then
19822: LD_VAR 0 3
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 19887
// un := tmp [ rand ( 1 , tmp ) ] ;
19831: LD_ADDR_VAR 0 2
19835: PUSH
19836: LD_VAR 0 3
19840: PUSH
19841: LD_INT 1
19843: PPUSH
19844: LD_VAR 0 3
19848: PPUSH
19849: CALL_OW 12
19853: ARRAY
19854: ST_TO_ADDR
// if Crawls ( un ) then
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 318
19864: IFFALSE 19875
// ComWalk ( un ) ;
19866: LD_VAR 0 2
19870: PPUSH
19871: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19875: LD_VAR 0 2
19879: PPUSH
19880: LD_INT 5
19882: PPUSH
19883: CALL_OW 336
// end ;
19887: PPOPN 3
19889: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19890: LD_EXP 22
19894: PUSH
19895: LD_EXP 40
19899: AND
19900: PUSH
19901: LD_OWVAR 67
19905: PUSH
19906: LD_INT 4
19908: LESS
19909: AND
19910: IFFALSE 19929
19912: GO 19914
19914: DISABLE
// begin Difficulty := Difficulty + 1 ;
19915: LD_ADDR_OWVAR 67
19919: PUSH
19920: LD_OWVAR 67
19924: PUSH
19925: LD_INT 1
19927: PLUS
19928: ST_TO_ADDR
// end ;
19929: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19930: LD_EXP 22
19934: PUSH
19935: LD_EXP 41
19939: AND
19940: IFFALSE 20043
19942: GO 19944
19944: DISABLE
19945: LD_INT 0
19947: PPUSH
// begin for i := 1 to 5 do
19948: LD_ADDR_VAR 0 1
19952: PUSH
19953: DOUBLE
19954: LD_INT 1
19956: DEC
19957: ST_TO_ADDR
19958: LD_INT 5
19960: PUSH
19961: FOR_TO
19962: IFFALSE 20041
// begin uc_nation := nation_nature ;
19964: LD_ADDR_OWVAR 21
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// uc_side := 0 ;
19972: LD_ADDR_OWVAR 20
19976: PUSH
19977: LD_INT 0
19979: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19980: LD_ADDR_OWVAR 29
19984: PUSH
19985: LD_INT 12
19987: PUSH
19988: LD_INT 12
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: ST_TO_ADDR
// hc_agressivity := 20 ;
19995: LD_ADDR_OWVAR 35
19999: PUSH
20000: LD_INT 20
20002: ST_TO_ADDR
// hc_class := class_tiger ;
20003: LD_ADDR_OWVAR 28
20007: PUSH
20008: LD_INT 14
20010: ST_TO_ADDR
// hc_gallery :=  ;
20011: LD_ADDR_OWVAR 33
20015: PUSH
20016: LD_STRING 
20018: ST_TO_ADDR
// hc_name :=  ;
20019: LD_ADDR_OWVAR 26
20023: PUSH
20024: LD_STRING 
20026: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20027: CALL_OW 44
20031: PPUSH
20032: LD_INT 0
20034: PPUSH
20035: CALL_OW 51
// end ;
20039: GO 19961
20041: POP
20042: POP
// end ;
20043: PPOPN 1
20045: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20046: LD_EXP 22
20050: PUSH
20051: LD_EXP 42
20055: AND
20056: IFFALSE 20065
20058: GO 20060
20060: DISABLE
// StreamSibBomb ;
20061: CALL 20066 0 0
20065: END
// export function StreamSibBomb ; var i , x , y ; begin
20066: LD_INT 0
20068: PPUSH
20069: PPUSH
20070: PPUSH
20071: PPUSH
// result := false ;
20072: LD_ADDR_VAR 0 1
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// for i := 1 to 16 do
20080: LD_ADDR_VAR 0 2
20084: PUSH
20085: DOUBLE
20086: LD_INT 1
20088: DEC
20089: ST_TO_ADDR
20090: LD_INT 16
20092: PUSH
20093: FOR_TO
20094: IFFALSE 20293
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20096: LD_ADDR_VAR 0 3
20100: PUSH
20101: LD_INT 10
20103: PUSH
20104: LD_INT 20
20106: PUSH
20107: LD_INT 30
20109: PUSH
20110: LD_INT 40
20112: PUSH
20113: LD_INT 50
20115: PUSH
20116: LD_INT 60
20118: PUSH
20119: LD_INT 70
20121: PUSH
20122: LD_INT 80
20124: PUSH
20125: LD_INT 90
20127: PUSH
20128: LD_INT 100
20130: PUSH
20131: LD_INT 110
20133: PUSH
20134: LD_INT 120
20136: PUSH
20137: LD_INT 130
20139: PUSH
20140: LD_INT 140
20142: PUSH
20143: LD_INT 150
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: PPUSH
20166: LD_INT 15
20168: PPUSH
20169: CALL_OW 12
20173: ARRAY
20174: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20175: LD_ADDR_VAR 0 4
20179: PUSH
20180: LD_INT 10
20182: PUSH
20183: LD_INT 20
20185: PUSH
20186: LD_INT 30
20188: PUSH
20189: LD_INT 40
20191: PUSH
20192: LD_INT 50
20194: PUSH
20195: LD_INT 60
20197: PUSH
20198: LD_INT 70
20200: PUSH
20201: LD_INT 80
20203: PUSH
20204: LD_INT 90
20206: PUSH
20207: LD_INT 100
20209: PUSH
20210: LD_INT 110
20212: PUSH
20213: LD_INT 120
20215: PUSH
20216: LD_INT 130
20218: PUSH
20219: LD_INT 140
20221: PUSH
20222: LD_INT 150
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: PPUSH
20245: LD_INT 15
20247: PPUSH
20248: CALL_OW 12
20252: ARRAY
20253: ST_TO_ADDR
// if ValidHex ( x , y ) then
20254: LD_VAR 0 3
20258: PPUSH
20259: LD_VAR 0 4
20263: PPUSH
20264: CALL_OW 488
20268: IFFALSE 20291
// begin result := [ x , y ] ;
20270: LD_ADDR_VAR 0 1
20274: PUSH
20275: LD_VAR 0 3
20279: PUSH
20280: LD_VAR 0 4
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: ST_TO_ADDR
// break ;
20289: GO 20293
// end ; end ;
20291: GO 20093
20293: POP
20294: POP
// if result then
20295: LD_VAR 0 1
20299: IFFALSE 20359
// begin ToLua ( playSibBomb() ) ;
20301: LD_STRING playSibBomb()
20303: PPUSH
20304: CALL_OW 559
// wait ( 0 0$14 ) ;
20308: LD_INT 490
20310: PPUSH
20311: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20315: LD_VAR 0 1
20319: PUSH
20320: LD_INT 1
20322: ARRAY
20323: PPUSH
20324: LD_VAR 0 1
20328: PUSH
20329: LD_INT 2
20331: ARRAY
20332: PPUSH
20333: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20337: LD_VAR 0 1
20341: PUSH
20342: LD_INT 1
20344: ARRAY
20345: PPUSH
20346: LD_VAR 0 1
20350: PUSH
20351: LD_INT 2
20353: ARRAY
20354: PPUSH
20355: CALL_OW 429
// end ; end ;
20359: LD_VAR 0 1
20363: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20364: LD_EXP 22
20368: PUSH
20369: LD_EXP 44
20373: AND
20374: IFFALSE 20386
20376: GO 20378
20378: DISABLE
// YouLost (  ) ;
20379: LD_STRING 
20381: PPUSH
20382: CALL_OW 104
20386: END
// every 0 0$1 trigger StreamModeActive and sFog do
20387: LD_EXP 22
20391: PUSH
20392: LD_EXP 43
20396: AND
20397: IFFALSE 20411
20399: GO 20401
20401: DISABLE
// FogOff ( your_side ) ;
20402: LD_OWVAR 2
20406: PPUSH
20407: CALL_OW 344
20411: END
// every 0 0$1 trigger StreamModeActive and sSun do
20412: LD_EXP 22
20416: PUSH
20417: LD_EXP 45
20421: AND
20422: IFFALSE 20450
20424: GO 20426
20426: DISABLE
// begin solar_recharge_percent := 0 ;
20427: LD_ADDR_OWVAR 79
20431: PUSH
20432: LD_INT 0
20434: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20435: LD_INT 10500
20437: PPUSH
20438: CALL_OW 67
// solar_recharge_percent := 100 ;
20442: LD_ADDR_OWVAR 79
20446: PUSH
20447: LD_INT 100
20449: ST_TO_ADDR
// end ;
20450: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20451: LD_EXP 22
20455: PUSH
20456: LD_EXP 46
20460: AND
20461: IFFALSE 20700
20463: GO 20465
20465: DISABLE
20466: LD_INT 0
20468: PPUSH
20469: PPUSH
20470: PPUSH
// begin tmp := [ ] ;
20471: LD_ADDR_VAR 0 3
20475: PUSH
20476: EMPTY
20477: ST_TO_ADDR
// for i := 1 to 6 do
20478: LD_ADDR_VAR 0 1
20482: PUSH
20483: DOUBLE
20484: LD_INT 1
20486: DEC
20487: ST_TO_ADDR
20488: LD_INT 6
20490: PUSH
20491: FOR_TO
20492: IFFALSE 20597
// begin uc_nation := nation_nature ;
20494: LD_ADDR_OWVAR 21
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// uc_side := 0 ;
20502: LD_ADDR_OWVAR 20
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20510: LD_ADDR_OWVAR 29
20514: PUSH
20515: LD_INT 12
20517: PUSH
20518: LD_INT 12
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: ST_TO_ADDR
// hc_agressivity := 20 ;
20525: LD_ADDR_OWVAR 35
20529: PUSH
20530: LD_INT 20
20532: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20533: LD_ADDR_OWVAR 28
20537: PUSH
20538: LD_INT 17
20540: ST_TO_ADDR
// hc_gallery :=  ;
20541: LD_ADDR_OWVAR 33
20545: PUSH
20546: LD_STRING 
20548: ST_TO_ADDR
// hc_name :=  ;
20549: LD_ADDR_OWVAR 26
20553: PUSH
20554: LD_STRING 
20556: ST_TO_ADDR
// un := CreateHuman ;
20557: LD_ADDR_VAR 0 2
20561: PUSH
20562: CALL_OW 44
20566: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20567: LD_VAR 0 2
20571: PPUSH
20572: LD_INT 1
20574: PPUSH
20575: CALL_OW 51
// tmp := tmp ^ un ;
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_VAR 0 3
20588: PUSH
20589: LD_VAR 0 2
20593: ADD
20594: ST_TO_ADDR
// end ;
20595: GO 20491
20597: POP
20598: POP
// repeat wait ( 0 0$1 ) ;
20599: LD_INT 35
20601: PPUSH
20602: CALL_OW 67
// for un in tmp do
20606: LD_ADDR_VAR 0 2
20610: PUSH
20611: LD_VAR 0 3
20615: PUSH
20616: FOR_IN
20617: IFFALSE 20691
// begin if IsDead ( un ) then
20619: LD_VAR 0 2
20623: PPUSH
20624: CALL_OW 301
20628: IFFALSE 20648
// begin tmp := tmp diff un ;
20630: LD_ADDR_VAR 0 3
20634: PUSH
20635: LD_VAR 0 3
20639: PUSH
20640: LD_VAR 0 2
20644: DIFF
20645: ST_TO_ADDR
// continue ;
20646: GO 20616
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20648: LD_VAR 0 2
20652: PPUSH
20653: LD_INT 3
20655: PUSH
20656: LD_INT 22
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PPUSH
20670: CALL_OW 69
20674: PPUSH
20675: LD_VAR 0 2
20679: PPUSH
20680: CALL_OW 74
20684: PPUSH
20685: CALL_OW 115
// end ;
20689: GO 20616
20691: POP
20692: POP
// until not tmp ;
20693: LD_VAR 0 3
20697: NOT
20698: IFFALSE 20599
// end ;
20700: PPOPN 3
20702: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20703: LD_EXP 22
20707: PUSH
20708: LD_EXP 47
20712: AND
20713: IFFALSE 20767
20715: GO 20717
20717: DISABLE
// begin ToLua ( displayTroll(); ) ;
20718: LD_STRING displayTroll();
20720: PPUSH
20721: CALL_OW 559
// wait ( 3 3$00 ) ;
20725: LD_INT 6300
20727: PPUSH
20728: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20732: LD_STRING hideTroll();
20734: PPUSH
20735: CALL_OW 559
// wait ( 1 1$00 ) ;
20739: LD_INT 2100
20741: PPUSH
20742: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20746: LD_STRING displayTroll();
20748: PPUSH
20749: CALL_OW 559
// wait ( 1 1$00 ) ;
20753: LD_INT 2100
20755: PPUSH
20756: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20760: LD_STRING hideTroll();
20762: PPUSH
20763: CALL_OW 559
// end ;
20767: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20768: LD_EXP 22
20772: PUSH
20773: LD_EXP 48
20777: AND
20778: IFFALSE 20841
20780: GO 20782
20782: DISABLE
20783: LD_INT 0
20785: PPUSH
// begin p := 0 ;
20786: LD_ADDR_VAR 0 1
20790: PUSH
20791: LD_INT 0
20793: ST_TO_ADDR
// repeat game_speed := 1 ;
20794: LD_ADDR_OWVAR 65
20798: PUSH
20799: LD_INT 1
20801: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20802: LD_INT 35
20804: PPUSH
20805: CALL_OW 67
// p := p + 1 ;
20809: LD_ADDR_VAR 0 1
20813: PUSH
20814: LD_VAR 0 1
20818: PUSH
20819: LD_INT 1
20821: PLUS
20822: ST_TO_ADDR
// until p >= 60 ;
20823: LD_VAR 0 1
20827: PUSH
20828: LD_INT 60
20830: GREATEREQUAL
20831: IFFALSE 20794
// game_speed := 4 ;
20833: LD_ADDR_OWVAR 65
20837: PUSH
20838: LD_INT 4
20840: ST_TO_ADDR
// end ;
20841: PPOPN 1
20843: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20844: LD_EXP 22
20848: PUSH
20849: LD_EXP 49
20853: AND
20854: IFFALSE 21000
20856: GO 20858
20858: DISABLE
20859: LD_INT 0
20861: PPUSH
20862: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20863: LD_ADDR_VAR 0 1
20867: PUSH
20868: LD_INT 22
20870: PUSH
20871: LD_OWVAR 2
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 2
20882: PUSH
20883: LD_INT 30
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 30
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PPUSH
20912: CALL_OW 69
20916: ST_TO_ADDR
// if not depot then
20917: LD_VAR 0 1
20921: NOT
20922: IFFALSE 20926
// exit ;
20924: GO 21000
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20926: LD_ADDR_VAR 0 2
20930: PUSH
20931: LD_VAR 0 1
20935: PUSH
20936: LD_INT 1
20938: PPUSH
20939: LD_VAR 0 1
20943: PPUSH
20944: CALL_OW 12
20948: ARRAY
20949: PPUSH
20950: CALL_OW 274
20954: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20955: LD_VAR 0 2
20959: PPUSH
20960: LD_INT 1
20962: PPUSH
20963: LD_INT 0
20965: PPUSH
20966: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20970: LD_VAR 0 2
20974: PPUSH
20975: LD_INT 2
20977: PPUSH
20978: LD_INT 0
20980: PPUSH
20981: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20985: LD_VAR 0 2
20989: PPUSH
20990: LD_INT 3
20992: PPUSH
20993: LD_INT 0
20995: PPUSH
20996: CALL_OW 277
// end ;
21000: PPOPN 2
21002: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21003: LD_EXP 22
21007: PUSH
21008: LD_EXP 50
21012: AND
21013: IFFALSE 21110
21015: GO 21017
21017: DISABLE
21018: LD_INT 0
21020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21021: LD_ADDR_VAR 0 1
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_OWVAR 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 21
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: LD_INT 23
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: LIST
21069: PPUSH
21070: CALL_OW 69
21074: ST_TO_ADDR
// if not tmp then
21075: LD_VAR 0 1
21079: NOT
21080: IFFALSE 21084
// exit ;
21082: GO 21110
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21084: LD_VAR 0 1
21088: PUSH
21089: LD_INT 1
21091: PPUSH
21092: LD_VAR 0 1
21096: PPUSH
21097: CALL_OW 12
21101: ARRAY
21102: PPUSH
21103: LD_INT 200
21105: PPUSH
21106: CALL_OW 234
// end ;
21110: PPOPN 1
21112: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21113: LD_EXP 22
21117: PUSH
21118: LD_EXP 51
21122: AND
21123: IFFALSE 21202
21125: GO 21127
21127: DISABLE
21128: LD_INT 0
21130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21131: LD_ADDR_VAR 0 1
21135: PUSH
21136: LD_INT 22
21138: PUSH
21139: LD_OWVAR 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 21
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 69
21166: ST_TO_ADDR
// if not tmp then
21167: LD_VAR 0 1
21171: NOT
21172: IFFALSE 21176
// exit ;
21174: GO 21202
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21176: LD_VAR 0 1
21180: PUSH
21181: LD_INT 1
21183: PPUSH
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL_OW 12
21193: ARRAY
21194: PPUSH
21195: LD_INT 60
21197: PPUSH
21198: CALL_OW 234
// end ;
21202: PPOPN 1
21204: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21205: LD_EXP 22
21209: PUSH
21210: LD_EXP 52
21214: AND
21215: IFFALSE 21314
21217: GO 21219
21219: DISABLE
21220: LD_INT 0
21222: PPUSH
21223: PPUSH
// begin enable ;
21224: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21225: LD_ADDR_VAR 0 1
21229: PUSH
21230: LD_INT 22
21232: PUSH
21233: LD_OWVAR 2
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 61
21244: PUSH
21245: EMPTY
21246: LIST
21247: PUSH
21248: LD_INT 33
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: PPUSH
21263: CALL_OW 69
21267: ST_TO_ADDR
// if not tmp then
21268: LD_VAR 0 1
21272: NOT
21273: IFFALSE 21277
// exit ;
21275: GO 21314
// for i in tmp do
21277: LD_ADDR_VAR 0 2
21281: PUSH
21282: LD_VAR 0 1
21286: PUSH
21287: FOR_IN
21288: IFFALSE 21312
// if IsControledBy ( i ) then
21290: LD_VAR 0 2
21294: PPUSH
21295: CALL_OW 312
21299: IFFALSE 21310
// ComUnlink ( i ) ;
21301: LD_VAR 0 2
21305: PPUSH
21306: CALL_OW 136
21310: GO 21287
21312: POP
21313: POP
// end ;
21314: PPOPN 2
21316: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21317: LD_EXP 22
21321: PUSH
21322: LD_EXP 53
21326: AND
21327: IFFALSE 21467
21329: GO 21331
21331: DISABLE
21332: LD_INT 0
21334: PPUSH
21335: PPUSH
// begin ToLua ( displayPowell(); ) ;
21336: LD_STRING displayPowell();
21338: PPUSH
21339: CALL_OW 559
// uc_side := 0 ;
21343: LD_ADDR_OWVAR 20
21347: PUSH
21348: LD_INT 0
21350: ST_TO_ADDR
// uc_nation := 2 ;
21351: LD_ADDR_OWVAR 21
21355: PUSH
21356: LD_INT 2
21358: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21359: LD_ADDR_OWVAR 37
21363: PUSH
21364: LD_INT 14
21366: ST_TO_ADDR
// vc_engine := engine_siberite ;
21367: LD_ADDR_OWVAR 39
21371: PUSH
21372: LD_INT 3
21374: ST_TO_ADDR
// vc_control := control_apeman ;
21375: LD_ADDR_OWVAR 38
21379: PUSH
21380: LD_INT 5
21382: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21383: LD_ADDR_OWVAR 40
21387: PUSH
21388: LD_INT 29
21390: ST_TO_ADDR
// un := CreateVehicle ;
21391: LD_ADDR_VAR 0 2
21395: PUSH
21396: CALL_OW 45
21400: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_INT 1
21408: PPUSH
21409: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21413: LD_INT 35
21415: PPUSH
21416: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21420: LD_VAR 0 2
21424: PPUSH
21425: LD_INT 22
21427: PUSH
21428: LD_OWVAR 2
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PPUSH
21437: CALL_OW 69
21441: PPUSH
21442: LD_VAR 0 2
21446: PPUSH
21447: CALL_OW 74
21451: PPUSH
21452: CALL_OW 115
// until IsDead ( un ) ;
21456: LD_VAR 0 2
21460: PPUSH
21461: CALL_OW 301
21465: IFFALSE 21413
// end ;
21467: PPOPN 2
21469: END
// every 0 0$1 trigger StreamModeActive and sStu do
21470: LD_EXP 22
21474: PUSH
21475: LD_EXP 61
21479: AND
21480: IFFALSE 21496
21482: GO 21484
21484: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21485: LD_STRING displayStucuk();
21487: PPUSH
21488: CALL_OW 559
// ResetFog ;
21492: CALL_OW 335
// end ;
21496: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21497: LD_EXP 22
21501: PUSH
21502: LD_EXP 54
21506: AND
21507: IFFALSE 21648
21509: GO 21511
21511: DISABLE
21512: LD_INT 0
21514: PPUSH
21515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21516: LD_ADDR_VAR 0 2
21520: PUSH
21521: LD_INT 22
21523: PUSH
21524: LD_OWVAR 2
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 21
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PPUSH
21547: CALL_OW 69
21551: ST_TO_ADDR
// if not tmp then
21552: LD_VAR 0 2
21556: NOT
21557: IFFALSE 21561
// exit ;
21559: GO 21648
// un := tmp [ rand ( 1 , tmp ) ] ;
21561: LD_ADDR_VAR 0 1
21565: PUSH
21566: LD_VAR 0 2
21570: PUSH
21571: LD_INT 1
21573: PPUSH
21574: LD_VAR 0 2
21578: PPUSH
21579: CALL_OW 12
21583: ARRAY
21584: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21585: LD_VAR 0 1
21589: PPUSH
21590: LD_INT 0
21592: PPUSH
21593: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21597: LD_VAR 0 1
21601: PPUSH
21602: LD_OWVAR 3
21606: PUSH
21607: LD_VAR 0 1
21611: DIFF
21612: PPUSH
21613: LD_VAR 0 1
21617: PPUSH
21618: CALL_OW 74
21622: PPUSH
21623: CALL_OW 115
// wait ( 0 0$20 ) ;
21627: LD_INT 700
21629: PPUSH
21630: CALL_OW 67
// SetSide ( un , your_side ) ;
21634: LD_VAR 0 1
21638: PPUSH
21639: LD_OWVAR 2
21643: PPUSH
21644: CALL_OW 235
// end ;
21648: PPOPN 2
21650: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21651: LD_EXP 22
21655: PUSH
21656: LD_EXP 55
21660: AND
21661: IFFALSE 21767
21663: GO 21665
21665: DISABLE
21666: LD_INT 0
21668: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21669: LD_ADDR_VAR 0 1
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_OWVAR 2
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 2
21688: PUSH
21689: LD_INT 30
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 30
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PPUSH
21718: CALL_OW 69
21722: ST_TO_ADDR
// if not depot then
21723: LD_VAR 0 1
21727: NOT
21728: IFFALSE 21732
// exit ;
21730: GO 21767
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21732: LD_VAR 0 1
21736: PUSH
21737: LD_INT 1
21739: ARRAY
21740: PPUSH
21741: CALL_OW 250
21745: PPUSH
21746: LD_VAR 0 1
21750: PUSH
21751: LD_INT 1
21753: ARRAY
21754: PPUSH
21755: CALL_OW 251
21759: PPUSH
21760: LD_INT 70
21762: PPUSH
21763: CALL_OW 495
// end ;
21767: PPOPN 1
21769: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21770: LD_EXP 22
21774: PUSH
21775: LD_EXP 56
21779: AND
21780: IFFALSE 21991
21782: GO 21784
21784: DISABLE
21785: LD_INT 0
21787: PPUSH
21788: PPUSH
21789: PPUSH
21790: PPUSH
21791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21792: LD_ADDR_VAR 0 5
21796: PUSH
21797: LD_INT 22
21799: PUSH
21800: LD_OWVAR 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 69
21827: ST_TO_ADDR
// if not tmp then
21828: LD_VAR 0 5
21832: NOT
21833: IFFALSE 21837
// exit ;
21835: GO 21991
// for i in tmp do
21837: LD_ADDR_VAR 0 1
21841: PUSH
21842: LD_VAR 0 5
21846: PUSH
21847: FOR_IN
21848: IFFALSE 21989
// begin d := rand ( 0 , 5 ) ;
21850: LD_ADDR_VAR 0 4
21854: PUSH
21855: LD_INT 0
21857: PPUSH
21858: LD_INT 5
21860: PPUSH
21861: CALL_OW 12
21865: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21866: LD_ADDR_VAR 0 2
21870: PUSH
21871: LD_VAR 0 1
21875: PPUSH
21876: CALL_OW 250
21880: PPUSH
21881: LD_VAR 0 4
21885: PPUSH
21886: LD_INT 3
21888: PPUSH
21889: LD_INT 12
21891: PPUSH
21892: CALL_OW 12
21896: PPUSH
21897: CALL_OW 272
21901: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21902: LD_ADDR_VAR 0 3
21906: PUSH
21907: LD_VAR 0 1
21911: PPUSH
21912: CALL_OW 251
21916: PPUSH
21917: LD_VAR 0 4
21921: PPUSH
21922: LD_INT 3
21924: PPUSH
21925: LD_INT 12
21927: PPUSH
21928: CALL_OW 12
21932: PPUSH
21933: CALL_OW 273
21937: ST_TO_ADDR
// if ValidHex ( x , y ) then
21938: LD_VAR 0 2
21942: PPUSH
21943: LD_VAR 0 3
21947: PPUSH
21948: CALL_OW 488
21952: IFFALSE 21987
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21954: LD_VAR 0 1
21958: PPUSH
21959: LD_VAR 0 2
21963: PPUSH
21964: LD_VAR 0 3
21968: PPUSH
21969: LD_INT 3
21971: PPUSH
21972: LD_INT 6
21974: PPUSH
21975: CALL_OW 12
21979: PPUSH
21980: LD_INT 1
21982: PPUSH
21983: CALL_OW 483
// end ;
21987: GO 21847
21989: POP
21990: POP
// end ;
21991: PPOPN 5
21993: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21994: LD_EXP 22
21998: PUSH
21999: LD_EXP 57
22003: AND
22004: IFFALSE 22098
22006: GO 22008
22008: DISABLE
22009: LD_INT 0
22011: PPUSH
22012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22013: LD_ADDR_VAR 0 2
22017: PUSH
22018: LD_INT 22
22020: PUSH
22021: LD_OWVAR 2
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 32
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 21
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: PPUSH
22055: CALL_OW 69
22059: ST_TO_ADDR
// if not tmp then
22060: LD_VAR 0 2
22064: NOT
22065: IFFALSE 22069
// exit ;
22067: GO 22098
// for i in tmp do
22069: LD_ADDR_VAR 0 1
22073: PUSH
22074: LD_VAR 0 2
22078: PUSH
22079: FOR_IN
22080: IFFALSE 22096
// SetFuel ( i , 0 ) ;
22082: LD_VAR 0 1
22086: PPUSH
22087: LD_INT 0
22089: PPUSH
22090: CALL_OW 240
22094: GO 22079
22096: POP
22097: POP
// end ;
22098: PPOPN 2
22100: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22101: LD_EXP 22
22105: PUSH
22106: LD_EXP 58
22110: AND
22111: IFFALSE 22177
22113: GO 22115
22115: DISABLE
22116: LD_INT 0
22118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22119: LD_ADDR_VAR 0 1
22123: PUSH
22124: LD_INT 22
22126: PUSH
22127: LD_OWVAR 2
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 29
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PPUSH
22150: CALL_OW 69
22154: ST_TO_ADDR
// if not tmp then
22155: LD_VAR 0 1
22159: NOT
22160: IFFALSE 22164
// exit ;
22162: GO 22177
// DestroyUnit ( tmp [ 1 ] ) ;
22164: LD_VAR 0 1
22168: PUSH
22169: LD_INT 1
22171: ARRAY
22172: PPUSH
22173: CALL_OW 65
// end ;
22177: PPOPN 1
22179: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22180: LD_EXP 22
22184: PUSH
22185: LD_EXP 60
22189: AND
22190: IFFALSE 22319
22192: GO 22194
22194: DISABLE
22195: LD_INT 0
22197: PPUSH
// begin uc_side := 0 ;
22198: LD_ADDR_OWVAR 20
22202: PUSH
22203: LD_INT 0
22205: ST_TO_ADDR
// uc_nation := nation_arabian ;
22206: LD_ADDR_OWVAR 21
22210: PUSH
22211: LD_INT 2
22213: ST_TO_ADDR
// hc_gallery :=  ;
22214: LD_ADDR_OWVAR 33
22218: PUSH
22219: LD_STRING 
22221: ST_TO_ADDR
// hc_name :=  ;
22222: LD_ADDR_OWVAR 26
22226: PUSH
22227: LD_STRING 
22229: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22230: LD_INT 1
22232: PPUSH
22233: LD_INT 11
22235: PPUSH
22236: LD_INT 10
22238: PPUSH
22239: CALL_OW 380
// un := CreateHuman ;
22243: LD_ADDR_VAR 0 1
22247: PUSH
22248: CALL_OW 44
22252: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22253: LD_VAR 0 1
22257: PPUSH
22258: LD_INT 1
22260: PPUSH
22261: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22265: LD_INT 35
22267: PPUSH
22268: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22272: LD_VAR 0 1
22276: PPUSH
22277: LD_INT 22
22279: PUSH
22280: LD_OWVAR 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: PPUSH
22294: LD_VAR 0 1
22298: PPUSH
22299: CALL_OW 74
22303: PPUSH
22304: CALL_OW 115
// until IsDead ( un ) ;
22308: LD_VAR 0 1
22312: PPUSH
22313: CALL_OW 301
22317: IFFALSE 22265
// end ;
22319: PPOPN 1
22321: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22322: LD_EXP 22
22326: PUSH
22327: LD_EXP 62
22331: AND
22332: IFFALSE 22344
22334: GO 22336
22336: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22337: LD_STRING earthquake(getX(game), 0, 32)
22339: PPUSH
22340: CALL_OW 559
22344: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22345: LD_EXP 22
22349: PUSH
22350: LD_EXP 63
22354: AND
22355: IFFALSE 22446
22357: GO 22359
22359: DISABLE
22360: LD_INT 0
22362: PPUSH
// begin enable ;
22363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22364: LD_ADDR_VAR 0 1
22368: PUSH
22369: LD_INT 22
22371: PUSH
22372: LD_OWVAR 2
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 21
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 33
22393: PUSH
22394: LD_INT 3
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: PPUSH
22406: CALL_OW 69
22410: ST_TO_ADDR
// if not tmp then
22411: LD_VAR 0 1
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22446
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22420: LD_VAR 0 1
22424: PUSH
22425: LD_INT 1
22427: PPUSH
22428: LD_VAR 0 1
22432: PPUSH
22433: CALL_OW 12
22437: ARRAY
22438: PPUSH
22439: LD_INT 1
22441: PPUSH
22442: CALL_OW 234
// end ;
22446: PPOPN 1
22448: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22449: LD_EXP 22
22453: PUSH
22454: LD_EXP 64
22458: AND
22459: IFFALSE 22600
22461: GO 22463
22463: DISABLE
22464: LD_INT 0
22466: PPUSH
22467: PPUSH
22468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22469: LD_ADDR_VAR 0 3
22473: PUSH
22474: LD_INT 22
22476: PUSH
22477: LD_OWVAR 2
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 25
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PPUSH
22500: CALL_OW 69
22504: ST_TO_ADDR
// if not tmp then
22505: LD_VAR 0 3
22509: NOT
22510: IFFALSE 22514
// exit ;
22512: GO 22600
// un := tmp [ rand ( 1 , tmp ) ] ;
22514: LD_ADDR_VAR 0 2
22518: PUSH
22519: LD_VAR 0 3
22523: PUSH
22524: LD_INT 1
22526: PPUSH
22527: LD_VAR 0 3
22531: PPUSH
22532: CALL_OW 12
22536: ARRAY
22537: ST_TO_ADDR
// if Crawls ( un ) then
22538: LD_VAR 0 2
22542: PPUSH
22543: CALL_OW 318
22547: IFFALSE 22558
// ComWalk ( un ) ;
22549: LD_VAR 0 2
22553: PPUSH
22554: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22558: LD_VAR 0 2
22562: PPUSH
22563: LD_INT 9
22565: PPUSH
22566: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22570: LD_INT 28
22572: PPUSH
22573: LD_OWVAR 2
22577: PPUSH
22578: LD_INT 2
22580: PPUSH
22581: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22585: LD_INT 29
22587: PPUSH
22588: LD_OWVAR 2
22592: PPUSH
22593: LD_INT 2
22595: PPUSH
22596: CALL_OW 322
// end ;
22600: PPOPN 3
22602: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22603: LD_EXP 22
22607: PUSH
22608: LD_EXP 65
22612: AND
22613: IFFALSE 22724
22615: GO 22617
22617: DISABLE
22618: LD_INT 0
22620: PPUSH
22621: PPUSH
22622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22623: LD_ADDR_VAR 0 3
22627: PUSH
22628: LD_INT 22
22630: PUSH
22631: LD_OWVAR 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 25
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PPUSH
22654: CALL_OW 69
22658: ST_TO_ADDR
// if not tmp then
22659: LD_VAR 0 3
22663: NOT
22664: IFFALSE 22668
// exit ;
22666: GO 22724
// un := tmp [ rand ( 1 , tmp ) ] ;
22668: LD_ADDR_VAR 0 2
22672: PUSH
22673: LD_VAR 0 3
22677: PUSH
22678: LD_INT 1
22680: PPUSH
22681: LD_VAR 0 3
22685: PPUSH
22686: CALL_OW 12
22690: ARRAY
22691: ST_TO_ADDR
// if Crawls ( un ) then
22692: LD_VAR 0 2
22696: PPUSH
22697: CALL_OW 318
22701: IFFALSE 22712
// ComWalk ( un ) ;
22703: LD_VAR 0 2
22707: PPUSH
22708: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22712: LD_VAR 0 2
22716: PPUSH
22717: LD_INT 8
22719: PPUSH
22720: CALL_OW 336
// end ;
22724: PPOPN 3
22726: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22727: LD_EXP 22
22731: PUSH
22732: LD_EXP 66
22736: AND
22737: IFFALSE 22881
22739: GO 22741
22741: DISABLE
22742: LD_INT 0
22744: PPUSH
22745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22746: LD_ADDR_VAR 0 2
22750: PUSH
22751: LD_INT 22
22753: PUSH
22754: LD_OWVAR 2
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 21
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 2
22775: PUSH
22776: LD_INT 34
22778: PUSH
22779: LD_INT 12
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 34
22788: PUSH
22789: LD_INT 51
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 34
22798: PUSH
22799: LD_INT 32
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: PPUSH
22817: CALL_OW 69
22821: ST_TO_ADDR
// if not tmp then
22822: LD_VAR 0 2
22826: NOT
22827: IFFALSE 22831
// exit ;
22829: GO 22881
// for i in tmp do
22831: LD_ADDR_VAR 0 1
22835: PUSH
22836: LD_VAR 0 2
22840: PUSH
22841: FOR_IN
22842: IFFALSE 22879
// if GetCargo ( i , mat_artifact ) = 0 then
22844: LD_VAR 0 1
22848: PPUSH
22849: LD_INT 4
22851: PPUSH
22852: CALL_OW 289
22856: PUSH
22857: LD_INT 0
22859: EQUAL
22860: IFFALSE 22877
// SetCargo ( i , mat_siberit , 100 ) ;
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_INT 3
22869: PPUSH
22870: LD_INT 100
22872: PPUSH
22873: CALL_OW 290
22877: GO 22841
22879: POP
22880: POP
// end ;
22881: PPOPN 2
22883: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22884: LD_EXP 22
22888: PUSH
22889: LD_EXP 67
22893: AND
22894: IFFALSE 23077
22896: GO 22898
22898: DISABLE
22899: LD_INT 0
22901: PPUSH
22902: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22903: LD_ADDR_VAR 0 2
22907: PUSH
22908: LD_INT 22
22910: PUSH
22911: LD_OWVAR 2
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 69
22924: ST_TO_ADDR
// if not tmp then
22925: LD_VAR 0 2
22929: NOT
22930: IFFALSE 22934
// exit ;
22932: GO 23077
// for i := 1 to 2 do
22934: LD_ADDR_VAR 0 1
22938: PUSH
22939: DOUBLE
22940: LD_INT 1
22942: DEC
22943: ST_TO_ADDR
22944: LD_INT 2
22946: PUSH
22947: FOR_TO
22948: IFFALSE 23075
// begin uc_side := your_side ;
22950: LD_ADDR_OWVAR 20
22954: PUSH
22955: LD_OWVAR 2
22959: ST_TO_ADDR
// uc_nation := nation_american ;
22960: LD_ADDR_OWVAR 21
22964: PUSH
22965: LD_INT 1
22967: ST_TO_ADDR
// vc_chassis := us_morphling ;
22968: LD_ADDR_OWVAR 37
22972: PUSH
22973: LD_INT 5
22975: ST_TO_ADDR
// vc_engine := engine_siberite ;
22976: LD_ADDR_OWVAR 39
22980: PUSH
22981: LD_INT 3
22983: ST_TO_ADDR
// vc_control := control_computer ;
22984: LD_ADDR_OWVAR 38
22988: PUSH
22989: LD_INT 3
22991: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22992: LD_ADDR_OWVAR 40
22996: PUSH
22997: LD_INT 10
22999: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23000: LD_VAR 0 2
23004: PUSH
23005: LD_INT 1
23007: ARRAY
23008: PPUSH
23009: CALL_OW 310
23013: NOT
23014: IFFALSE 23061
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23016: CALL_OW 45
23020: PPUSH
23021: LD_VAR 0 2
23025: PUSH
23026: LD_INT 1
23028: ARRAY
23029: PPUSH
23030: CALL_OW 250
23034: PPUSH
23035: LD_VAR 0 2
23039: PUSH
23040: LD_INT 1
23042: ARRAY
23043: PPUSH
23044: CALL_OW 251
23048: PPUSH
23049: LD_INT 12
23051: PPUSH
23052: LD_INT 1
23054: PPUSH
23055: CALL_OW 50
23059: GO 23073
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23061: CALL_OW 45
23065: PPUSH
23066: LD_INT 1
23068: PPUSH
23069: CALL_OW 51
// end ;
23073: GO 22947
23075: POP
23076: POP
// end ;
23077: PPOPN 2
23079: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23080: LD_EXP 22
23084: PUSH
23085: LD_EXP 68
23089: AND
23090: IFFALSE 23312
23092: GO 23094
23094: DISABLE
23095: LD_INT 0
23097: PPUSH
23098: PPUSH
23099: PPUSH
23100: PPUSH
23101: PPUSH
23102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23103: LD_ADDR_VAR 0 6
23107: PUSH
23108: LD_INT 22
23110: PUSH
23111: LD_OWVAR 2
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 21
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 23
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: LIST
23151: PPUSH
23152: CALL_OW 69
23156: ST_TO_ADDR
// if not tmp then
23157: LD_VAR 0 6
23161: NOT
23162: IFFALSE 23166
// exit ;
23164: GO 23312
// s1 := rand ( 1 , 4 ) ;
23166: LD_ADDR_VAR 0 2
23170: PUSH
23171: LD_INT 1
23173: PPUSH
23174: LD_INT 4
23176: PPUSH
23177: CALL_OW 12
23181: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23182: LD_ADDR_VAR 0 4
23186: PUSH
23187: LD_VAR 0 6
23191: PUSH
23192: LD_INT 1
23194: ARRAY
23195: PPUSH
23196: LD_VAR 0 2
23200: PPUSH
23201: CALL_OW 259
23205: ST_TO_ADDR
// if s1 = 1 then
23206: LD_VAR 0 2
23210: PUSH
23211: LD_INT 1
23213: EQUAL
23214: IFFALSE 23234
// s2 := rand ( 2 , 4 ) else
23216: LD_ADDR_VAR 0 3
23220: PUSH
23221: LD_INT 2
23223: PPUSH
23224: LD_INT 4
23226: PPUSH
23227: CALL_OW 12
23231: ST_TO_ADDR
23232: GO 23242
// s2 := 1 ;
23234: LD_ADDR_VAR 0 3
23238: PUSH
23239: LD_INT 1
23241: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23242: LD_ADDR_VAR 0 5
23246: PUSH
23247: LD_VAR 0 6
23251: PUSH
23252: LD_INT 1
23254: ARRAY
23255: PPUSH
23256: LD_VAR 0 3
23260: PPUSH
23261: CALL_OW 259
23265: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23266: LD_VAR 0 6
23270: PUSH
23271: LD_INT 1
23273: ARRAY
23274: PPUSH
23275: LD_VAR 0 2
23279: PPUSH
23280: LD_VAR 0 5
23284: PPUSH
23285: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23289: LD_VAR 0 6
23293: PUSH
23294: LD_INT 1
23296: ARRAY
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: LD_VAR 0 4
23307: PPUSH
23308: CALL_OW 237
// end ;
23312: PPOPN 6
23314: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23315: LD_EXP 22
23319: PUSH
23320: LD_EXP 69
23324: AND
23325: IFFALSE 23404
23327: GO 23329
23329: DISABLE
23330: LD_INT 0
23332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23333: LD_ADDR_VAR 0 1
23337: PUSH
23338: LD_INT 22
23340: PUSH
23341: LD_OWVAR 2
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 30
23352: PUSH
23353: LD_INT 3
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PPUSH
23364: CALL_OW 69
23368: ST_TO_ADDR
// if not tmp then
23369: LD_VAR 0 1
23373: NOT
23374: IFFALSE 23378
// exit ;
23376: GO 23404
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23378: LD_VAR 0 1
23382: PUSH
23383: LD_INT 1
23385: PPUSH
23386: LD_VAR 0 1
23390: PPUSH
23391: CALL_OW 12
23395: ARRAY
23396: PPUSH
23397: LD_INT 1
23399: PPUSH
23400: CALL_OW 234
// end ;
23404: PPOPN 1
23406: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23407: LD_EXP 22
23411: PUSH
23412: LD_EXP 70
23416: AND
23417: IFFALSE 23529
23419: GO 23421
23421: DISABLE
23422: LD_INT 0
23424: PPUSH
23425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23426: LD_ADDR_VAR 0 2
23430: PUSH
23431: LD_INT 22
23433: PUSH
23434: LD_OWVAR 2
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 30
23448: PUSH
23449: LD_INT 27
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 30
23458: PUSH
23459: LD_INT 26
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 30
23468: PUSH
23469: LD_INT 28
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PPUSH
23486: CALL_OW 69
23490: ST_TO_ADDR
// if not tmp then
23491: LD_VAR 0 2
23495: NOT
23496: IFFALSE 23500
// exit ;
23498: GO 23529
// for i in tmp do
23500: LD_ADDR_VAR 0 1
23504: PUSH
23505: LD_VAR 0 2
23509: PUSH
23510: FOR_IN
23511: IFFALSE 23527
// SetLives ( i , 1 ) ;
23513: LD_VAR 0 1
23517: PPUSH
23518: LD_INT 1
23520: PPUSH
23521: CALL_OW 234
23525: GO 23510
23527: POP
23528: POP
// end ;
23529: PPOPN 2
23531: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23532: LD_EXP 22
23536: PUSH
23537: LD_EXP 71
23541: AND
23542: IFFALSE 23829
23544: GO 23546
23546: DISABLE
23547: LD_INT 0
23549: PPUSH
23550: PPUSH
23551: PPUSH
// begin i := rand ( 1 , 7 ) ;
23552: LD_ADDR_VAR 0 1
23556: PUSH
23557: LD_INT 1
23559: PPUSH
23560: LD_INT 7
23562: PPUSH
23563: CALL_OW 12
23567: ST_TO_ADDR
// case i of 1 :
23568: LD_VAR 0 1
23572: PUSH
23573: LD_INT 1
23575: DOUBLE
23576: EQUAL
23577: IFTRUE 23581
23579: GO 23591
23581: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23582: LD_STRING earthquake(getX(game), 0, 32)
23584: PPUSH
23585: CALL_OW 559
23589: GO 23829
23591: LD_INT 2
23593: DOUBLE
23594: EQUAL
23595: IFTRUE 23599
23597: GO 23613
23599: POP
// begin ToLua ( displayStucuk(); ) ;
23600: LD_STRING displayStucuk();
23602: PPUSH
23603: CALL_OW 559
// ResetFog ;
23607: CALL_OW 335
// end ; 3 :
23611: GO 23829
23613: LD_INT 3
23615: DOUBLE
23616: EQUAL
23617: IFTRUE 23621
23619: GO 23725
23621: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23622: LD_ADDR_VAR 0 2
23626: PUSH
23627: LD_INT 22
23629: PUSH
23630: LD_OWVAR 2
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 25
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PPUSH
23653: CALL_OW 69
23657: ST_TO_ADDR
// if not tmp then
23658: LD_VAR 0 2
23662: NOT
23663: IFFALSE 23667
// exit ;
23665: GO 23829
// un := tmp [ rand ( 1 , tmp ) ] ;
23667: LD_ADDR_VAR 0 3
23671: PUSH
23672: LD_VAR 0 2
23676: PUSH
23677: LD_INT 1
23679: PPUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: CALL_OW 12
23689: ARRAY
23690: ST_TO_ADDR
// if Crawls ( un ) then
23691: LD_VAR 0 3
23695: PPUSH
23696: CALL_OW 318
23700: IFFALSE 23711
// ComWalk ( un ) ;
23702: LD_VAR 0 3
23706: PPUSH
23707: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_INT 8
23718: PPUSH
23719: CALL_OW 336
// end ; 4 :
23723: GO 23829
23725: LD_INT 4
23727: DOUBLE
23728: EQUAL
23729: IFTRUE 23733
23731: GO 23807
23733: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23734: LD_ADDR_VAR 0 2
23738: PUSH
23739: LD_INT 22
23741: PUSH
23742: LD_OWVAR 2
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 30
23753: PUSH
23754: LD_INT 29
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PPUSH
23765: CALL_OW 69
23769: ST_TO_ADDR
// if not tmp then
23770: LD_VAR 0 2
23774: NOT
23775: IFFALSE 23779
// exit ;
23777: GO 23829
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23779: LD_VAR 0 2
23783: PUSH
23784: LD_INT 1
23786: ARRAY
23787: PPUSH
23788: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23792: LD_VAR 0 2
23796: PUSH
23797: LD_INT 1
23799: ARRAY
23800: PPUSH
23801: CALL_OW 65
// end ; 5 .. 7 :
23805: GO 23829
23807: LD_INT 5
23809: DOUBLE
23810: GREATEREQUAL
23811: IFFALSE 23819
23813: LD_INT 7
23815: DOUBLE
23816: LESSEQUAL
23817: IFTRUE 23821
23819: GO 23828
23821: POP
// StreamSibBomb ; end ;
23822: CALL 20066 0 0
23826: GO 23829
23828: POP
// end ;
23829: PPOPN 3
23831: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23832: LD_EXP 22
23836: PUSH
23837: LD_EXP 72
23841: AND
23842: IFFALSE 23998
23844: GO 23846
23846: DISABLE
23847: LD_INT 0
23849: PPUSH
23850: PPUSH
23851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23852: LD_ADDR_VAR 0 2
23856: PUSH
23857: LD_INT 81
23859: PUSH
23860: LD_OWVAR 2
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: LD_INT 21
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 21
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PPUSH
23901: CALL_OW 69
23905: ST_TO_ADDR
// if not tmp then
23906: LD_VAR 0 2
23910: NOT
23911: IFFALSE 23915
// exit ;
23913: GO 23998
// p := 0 ;
23915: LD_ADDR_VAR 0 3
23919: PUSH
23920: LD_INT 0
23922: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23923: LD_INT 35
23925: PPUSH
23926: CALL_OW 67
// p := p + 1 ;
23930: LD_ADDR_VAR 0 3
23934: PUSH
23935: LD_VAR 0 3
23939: PUSH
23940: LD_INT 1
23942: PLUS
23943: ST_TO_ADDR
// for i in tmp do
23944: LD_ADDR_VAR 0 1
23948: PUSH
23949: LD_VAR 0 2
23953: PUSH
23954: FOR_IN
23955: IFFALSE 23986
// if GetLives ( i ) < 1000 then
23957: LD_VAR 0 1
23961: PPUSH
23962: CALL_OW 256
23966: PUSH
23967: LD_INT 1000
23969: LESS
23970: IFFALSE 23984
// SetLives ( i , 1000 ) ;
23972: LD_VAR 0 1
23976: PPUSH
23977: LD_INT 1000
23979: PPUSH
23980: CALL_OW 234
23984: GO 23954
23986: POP
23987: POP
// until p > 20 ;
23988: LD_VAR 0 3
23992: PUSH
23993: LD_INT 20
23995: GREATER
23996: IFFALSE 23923
// end ;
23998: PPOPN 3
24000: END
// every 0 0$1 trigger StreamModeActive and sTime do
24001: LD_EXP 22
24005: PUSH
24006: LD_EXP 73
24010: AND
24011: IFFALSE 24046
24013: GO 24015
24015: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24016: LD_INT 28
24018: PPUSH
24019: LD_OWVAR 2
24023: PPUSH
24024: LD_INT 2
24026: PPUSH
24027: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24031: LD_INT 30
24033: PPUSH
24034: LD_OWVAR 2
24038: PPUSH
24039: LD_INT 2
24041: PPUSH
24042: CALL_OW 322
// end ;
24046: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24047: LD_EXP 22
24051: PUSH
24052: LD_EXP 74
24056: AND
24057: IFFALSE 24178
24059: GO 24061
24061: DISABLE
24062: LD_INT 0
24064: PPUSH
24065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24066: LD_ADDR_VAR 0 2
24070: PUSH
24071: LD_INT 22
24073: PUSH
24074: LD_OWVAR 2
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 21
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 3
24095: PUSH
24096: LD_INT 23
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: PPUSH
24115: CALL_OW 69
24119: ST_TO_ADDR
// if not tmp then
24120: LD_VAR 0 2
24124: NOT
24125: IFFALSE 24129
// exit ;
24127: GO 24178
// for i in tmp do
24129: LD_ADDR_VAR 0 1
24133: PUSH
24134: LD_VAR 0 2
24138: PUSH
24139: FOR_IN
24140: IFFALSE 24176
// begin if Crawls ( i ) then
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 318
24151: IFFALSE 24162
// ComWalk ( i ) ;
24153: LD_VAR 0 1
24157: PPUSH
24158: CALL_OW 138
// SetClass ( i , 2 ) ;
24162: LD_VAR 0 1
24166: PPUSH
24167: LD_INT 2
24169: PPUSH
24170: CALL_OW 336
// end ;
24174: GO 24139
24176: POP
24177: POP
// end ;
24178: PPOPN 2
24180: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24181: LD_EXP 22
24185: PUSH
24186: LD_EXP 75
24190: AND
24191: IFFALSE 24479
24193: GO 24195
24195: DISABLE
24196: LD_INT 0
24198: PPUSH
24199: PPUSH
24200: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24201: LD_OWVAR 2
24205: PPUSH
24206: LD_INT 9
24208: PPUSH
24209: LD_INT 1
24211: PPUSH
24212: LD_INT 1
24214: PPUSH
24215: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24219: LD_INT 9
24221: PPUSH
24222: LD_OWVAR 2
24226: PPUSH
24227: CALL_OW 343
// uc_side := 9 ;
24231: LD_ADDR_OWVAR 20
24235: PUSH
24236: LD_INT 9
24238: ST_TO_ADDR
// uc_nation := 2 ;
24239: LD_ADDR_OWVAR 21
24243: PUSH
24244: LD_INT 2
24246: ST_TO_ADDR
// hc_name := Dark Warrior ;
24247: LD_ADDR_OWVAR 26
24251: PUSH
24252: LD_STRING Dark Warrior
24254: ST_TO_ADDR
// hc_gallery :=  ;
24255: LD_ADDR_OWVAR 33
24259: PUSH
24260: LD_STRING 
24262: ST_TO_ADDR
// hc_noskilllimit := true ;
24263: LD_ADDR_OWVAR 76
24267: PUSH
24268: LD_INT 1
24270: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24271: LD_ADDR_OWVAR 31
24275: PUSH
24276: LD_INT 30
24278: PUSH
24279: LD_INT 30
24281: PUSH
24282: LD_INT 30
24284: PUSH
24285: LD_INT 30
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// un := CreateHuman ;
24294: LD_ADDR_VAR 0 3
24298: PUSH
24299: CALL_OW 44
24303: ST_TO_ADDR
// hc_noskilllimit := false ;
24304: LD_ADDR_OWVAR 76
24308: PUSH
24309: LD_INT 0
24311: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24312: LD_VAR 0 3
24316: PPUSH
24317: LD_INT 1
24319: PPUSH
24320: CALL_OW 51
// ToLua ( playRanger() ) ;
24324: LD_STRING playRanger()
24326: PPUSH
24327: CALL_OW 559
// p := 0 ;
24331: LD_ADDR_VAR 0 2
24335: PUSH
24336: LD_INT 0
24338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24339: LD_INT 35
24341: PPUSH
24342: CALL_OW 67
// p := p + 1 ;
24346: LD_ADDR_VAR 0 2
24350: PUSH
24351: LD_VAR 0 2
24355: PUSH
24356: LD_INT 1
24358: PLUS
24359: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24360: LD_VAR 0 3
24364: PPUSH
24365: CALL_OW 256
24369: PUSH
24370: LD_INT 1000
24372: LESS
24373: IFFALSE 24387
// SetLives ( un , 1000 ) ;
24375: LD_VAR 0 3
24379: PPUSH
24380: LD_INT 1000
24382: PPUSH
24383: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24387: LD_VAR 0 3
24391: PPUSH
24392: LD_INT 81
24394: PUSH
24395: LD_OWVAR 2
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 91
24406: PUSH
24407: LD_VAR 0 3
24411: PUSH
24412: LD_INT 30
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PPUSH
24424: CALL_OW 69
24428: PPUSH
24429: LD_VAR 0 3
24433: PPUSH
24434: CALL_OW 74
24438: PPUSH
24439: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24443: LD_VAR 0 2
24447: PUSH
24448: LD_INT 80
24450: GREATER
24451: PUSH
24452: LD_VAR 0 3
24456: PPUSH
24457: CALL_OW 301
24461: OR
24462: IFFALSE 24339
// if un then
24464: LD_VAR 0 3
24468: IFFALSE 24479
// RemoveUnit ( un ) ;
24470: LD_VAR 0 3
24474: PPUSH
24475: CALL_OW 64
// end ;
24479: PPOPN 3
24481: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24482: LD_EXP 76
24486: IFFALSE 24602
24488: GO 24490
24490: DISABLE
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
24495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_INT 81
24503: PUSH
24504: LD_OWVAR 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 21
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PPUSH
24527: CALL_OW 69
24531: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24532: LD_STRING playComputer()
24534: PPUSH
24535: CALL_OW 559
// if not tmp then
24539: LD_VAR 0 2
24543: NOT
24544: IFFALSE 24548
// exit ;
24546: GO 24602
// for i in tmp do
24548: LD_ADDR_VAR 0 1
24552: PUSH
24553: LD_VAR 0 2
24557: PUSH
24558: FOR_IN
24559: IFFALSE 24600
// for j := 1 to 4 do
24561: LD_ADDR_VAR 0 3
24565: PUSH
24566: DOUBLE
24567: LD_INT 1
24569: DEC
24570: ST_TO_ADDR
24571: LD_INT 4
24573: PUSH
24574: FOR_TO
24575: IFFALSE 24596
// SetSkill ( i , j , 10 ) ;
24577: LD_VAR 0 1
24581: PPUSH
24582: LD_VAR 0 3
24586: PPUSH
24587: LD_INT 10
24589: PPUSH
24590: CALL_OW 237
24594: GO 24574
24596: POP
24597: POP
24598: GO 24558
24600: POP
24601: POP
// end ;
24602: PPOPN 3
24604: END
// every 0 0$1 trigger s30 do var i , tmp ;
24605: LD_EXP 77
24609: IFFALSE 24678
24611: GO 24613
24613: DISABLE
24614: LD_INT 0
24616: PPUSH
24617: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_INT 22
24625: PUSH
24626: LD_OWVAR 2
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PPUSH
24635: CALL_OW 69
24639: ST_TO_ADDR
// if not tmp then
24640: LD_VAR 0 2
24644: NOT
24645: IFFALSE 24649
// exit ;
24647: GO 24678
// for i in tmp do
24649: LD_ADDR_VAR 0 1
24653: PUSH
24654: LD_VAR 0 2
24658: PUSH
24659: FOR_IN
24660: IFFALSE 24676
// SetLives ( i , 300 ) ;
24662: LD_VAR 0 1
24666: PPUSH
24667: LD_INT 300
24669: PPUSH
24670: CALL_OW 234
24674: GO 24659
24676: POP
24677: POP
// end ;
24678: PPOPN 2
24680: END
// every 0 0$1 trigger s60 do var i , tmp ;
24681: LD_EXP 78
24685: IFFALSE 24754
24687: GO 24689
24689: DISABLE
24690: LD_INT 0
24692: PPUSH
24693: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24694: LD_ADDR_VAR 0 2
24698: PUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: ST_TO_ADDR
// if not tmp then
24716: LD_VAR 0 2
24720: NOT
24721: IFFALSE 24725
// exit ;
24723: GO 24754
// for i in tmp do
24725: LD_ADDR_VAR 0 1
24729: PUSH
24730: LD_VAR 0 2
24734: PUSH
24735: FOR_IN
24736: IFFALSE 24752
// SetLives ( i , 600 ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_INT 600
24745: PPUSH
24746: CALL_OW 234
24750: GO 24735
24752: POP
24753: POP
// end ;
24754: PPOPN 2
24756: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24757: LD_INT 0
24759: PPUSH
// case cmd of 301 :
24760: LD_VAR 0 1
24764: PUSH
24765: LD_INT 301
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 24805
24773: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24774: LD_VAR 0 6
24778: PPUSH
24779: LD_VAR 0 7
24783: PPUSH
24784: LD_VAR 0 8
24788: PPUSH
24789: LD_VAR 0 4
24793: PPUSH
24794: LD_VAR 0 5
24798: PPUSH
24799: CALL 26014 0 5
24803: GO 24926
24805: LD_INT 302
24807: DOUBLE
24808: EQUAL
24809: IFTRUE 24813
24811: GO 24850
24813: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24814: LD_VAR 0 6
24818: PPUSH
24819: LD_VAR 0 7
24823: PPUSH
24824: LD_VAR 0 8
24828: PPUSH
24829: LD_VAR 0 9
24833: PPUSH
24834: LD_VAR 0 4
24838: PPUSH
24839: LD_VAR 0 5
24843: PPUSH
24844: CALL 26105 0 6
24848: GO 24926
24850: LD_INT 303
24852: DOUBLE
24853: EQUAL
24854: IFTRUE 24858
24856: GO 24895
24858: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24859: LD_VAR 0 6
24863: PPUSH
24864: LD_VAR 0 7
24868: PPUSH
24869: LD_VAR 0 8
24873: PPUSH
24874: LD_VAR 0 9
24878: PPUSH
24879: LD_VAR 0 4
24883: PPUSH
24884: LD_VAR 0 5
24888: PPUSH
24889: CALL 24931 0 6
24893: GO 24926
24895: LD_INT 304
24897: DOUBLE
24898: EQUAL
24899: IFTRUE 24903
24901: GO 24925
24903: POP
// hHackTeleport ( unit , x , y ) ; end ;
24904: LD_VAR 0 2
24908: PPUSH
24909: LD_VAR 0 4
24913: PPUSH
24914: LD_VAR 0 5
24918: PPUSH
24919: CALL 26698 0 3
24923: GO 24926
24925: POP
// end ;
24926: LD_VAR 0 12
24930: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24931: LD_INT 0
24933: PPUSH
24934: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24935: LD_VAR 0 1
24939: PUSH
24940: LD_INT 1
24942: LESS
24943: PUSH
24944: LD_VAR 0 1
24948: PUSH
24949: LD_INT 3
24951: GREATER
24952: OR
24953: PUSH
24954: LD_VAR 0 5
24958: PPUSH
24959: LD_VAR 0 6
24963: PPUSH
24964: CALL_OW 428
24968: OR
24969: IFFALSE 24973
// exit ;
24971: GO 25701
// uc_side := your_side ;
24973: LD_ADDR_OWVAR 20
24977: PUSH
24978: LD_OWVAR 2
24982: ST_TO_ADDR
// uc_nation := nation ;
24983: LD_ADDR_OWVAR 21
24987: PUSH
24988: LD_VAR 0 1
24992: ST_TO_ADDR
// bc_level = 1 ;
24993: LD_ADDR_OWVAR 43
24997: PUSH
24998: LD_INT 1
25000: ST_TO_ADDR
// case btype of 1 :
25001: LD_VAR 0 2
25005: PUSH
25006: LD_INT 1
25008: DOUBLE
25009: EQUAL
25010: IFTRUE 25014
25012: GO 25025
25014: POP
// bc_type := b_depot ; 2 :
25015: LD_ADDR_OWVAR 42
25019: PUSH
25020: LD_INT 0
25022: ST_TO_ADDR
25023: GO 25645
25025: LD_INT 2
25027: DOUBLE
25028: EQUAL
25029: IFTRUE 25033
25031: GO 25044
25033: POP
// bc_type := b_warehouse ; 3 :
25034: LD_ADDR_OWVAR 42
25038: PUSH
25039: LD_INT 1
25041: ST_TO_ADDR
25042: GO 25645
25044: LD_INT 3
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25063
25052: POP
// bc_type := b_lab ; 4 .. 9 :
25053: LD_ADDR_OWVAR 42
25057: PUSH
25058: LD_INT 6
25060: ST_TO_ADDR
25061: GO 25645
25063: LD_INT 4
25065: DOUBLE
25066: GREATEREQUAL
25067: IFFALSE 25075
25069: LD_INT 9
25071: DOUBLE
25072: LESSEQUAL
25073: IFTRUE 25077
25075: GO 25137
25077: POP
// begin bc_type := b_lab_half ;
25078: LD_ADDR_OWVAR 42
25082: PUSH
25083: LD_INT 7
25085: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25086: LD_ADDR_OWVAR 44
25090: PUSH
25091: LD_INT 10
25093: PUSH
25094: LD_INT 11
25096: PUSH
25097: LD_INT 12
25099: PUSH
25100: LD_INT 15
25102: PUSH
25103: LD_INT 14
25105: PUSH
25106: LD_INT 13
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: PUSH
25117: LD_VAR 0 2
25121: PUSH
25122: LD_INT 3
25124: MINUS
25125: ARRAY
25126: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25127: LD_ADDR_OWVAR 45
25131: PUSH
25132: LD_INT 9
25134: ST_TO_ADDR
// end ; 10 .. 13 :
25135: GO 25645
25137: LD_INT 10
25139: DOUBLE
25140: GREATEREQUAL
25141: IFFALSE 25149
25143: LD_INT 13
25145: DOUBLE
25146: LESSEQUAL
25147: IFTRUE 25151
25149: GO 25228
25151: POP
// begin bc_type := b_lab_full ;
25152: LD_ADDR_OWVAR 42
25156: PUSH
25157: LD_INT 8
25159: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25160: LD_ADDR_OWVAR 44
25164: PUSH
25165: LD_INT 10
25167: PUSH
25168: LD_INT 12
25170: PUSH
25171: LD_INT 14
25173: PUSH
25174: LD_INT 13
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: PUSH
25183: LD_VAR 0 2
25187: PUSH
25188: LD_INT 9
25190: MINUS
25191: ARRAY
25192: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25193: LD_ADDR_OWVAR 45
25197: PUSH
25198: LD_INT 11
25200: PUSH
25201: LD_INT 15
25203: PUSH
25204: LD_INT 12
25206: PUSH
25207: LD_INT 15
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_VAR 0 2
25220: PUSH
25221: LD_INT 9
25223: MINUS
25224: ARRAY
25225: ST_TO_ADDR
// end ; 14 :
25226: GO 25645
25228: LD_INT 14
25230: DOUBLE
25231: EQUAL
25232: IFTRUE 25236
25234: GO 25247
25236: POP
// bc_type := b_workshop ; 15 :
25237: LD_ADDR_OWVAR 42
25241: PUSH
25242: LD_INT 2
25244: ST_TO_ADDR
25245: GO 25645
25247: LD_INT 15
25249: DOUBLE
25250: EQUAL
25251: IFTRUE 25255
25253: GO 25266
25255: POP
// bc_type := b_factory ; 16 :
25256: LD_ADDR_OWVAR 42
25260: PUSH
25261: LD_INT 3
25263: ST_TO_ADDR
25264: GO 25645
25266: LD_INT 16
25268: DOUBLE
25269: EQUAL
25270: IFTRUE 25274
25272: GO 25285
25274: POP
// bc_type := b_ext_gun ; 17 :
25275: LD_ADDR_OWVAR 42
25279: PUSH
25280: LD_INT 17
25282: ST_TO_ADDR
25283: GO 25645
25285: LD_INT 17
25287: DOUBLE
25288: EQUAL
25289: IFTRUE 25293
25291: GO 25321
25293: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25294: LD_ADDR_OWVAR 42
25298: PUSH
25299: LD_INT 19
25301: PUSH
25302: LD_INT 23
25304: PUSH
25305: LD_INT 19
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: PUSH
25313: LD_VAR 0 1
25317: ARRAY
25318: ST_TO_ADDR
25319: GO 25645
25321: LD_INT 18
25323: DOUBLE
25324: EQUAL
25325: IFTRUE 25329
25327: GO 25340
25329: POP
// bc_type := b_ext_radar ; 19 :
25330: LD_ADDR_OWVAR 42
25334: PUSH
25335: LD_INT 20
25337: ST_TO_ADDR
25338: GO 25645
25340: LD_INT 19
25342: DOUBLE
25343: EQUAL
25344: IFTRUE 25348
25346: GO 25359
25348: POP
// bc_type := b_ext_radio ; 20 :
25349: LD_ADDR_OWVAR 42
25353: PUSH
25354: LD_INT 22
25356: ST_TO_ADDR
25357: GO 25645
25359: LD_INT 20
25361: DOUBLE
25362: EQUAL
25363: IFTRUE 25367
25365: GO 25378
25367: POP
// bc_type := b_ext_siberium ; 21 :
25368: LD_ADDR_OWVAR 42
25372: PUSH
25373: LD_INT 21
25375: ST_TO_ADDR
25376: GO 25645
25378: LD_INT 21
25380: DOUBLE
25381: EQUAL
25382: IFTRUE 25386
25384: GO 25397
25386: POP
// bc_type := b_ext_computer ; 22 :
25387: LD_ADDR_OWVAR 42
25391: PUSH
25392: LD_INT 24
25394: ST_TO_ADDR
25395: GO 25645
25397: LD_INT 22
25399: DOUBLE
25400: EQUAL
25401: IFTRUE 25405
25403: GO 25416
25405: POP
// bc_type := b_ext_track ; 23 :
25406: LD_ADDR_OWVAR 42
25410: PUSH
25411: LD_INT 16
25413: ST_TO_ADDR
25414: GO 25645
25416: LD_INT 23
25418: DOUBLE
25419: EQUAL
25420: IFTRUE 25424
25422: GO 25435
25424: POP
// bc_type := b_ext_laser ; 24 :
25425: LD_ADDR_OWVAR 42
25429: PUSH
25430: LD_INT 25
25432: ST_TO_ADDR
25433: GO 25645
25435: LD_INT 24
25437: DOUBLE
25438: EQUAL
25439: IFTRUE 25443
25441: GO 25454
25443: POP
// bc_type := b_control_tower ; 25 :
25444: LD_ADDR_OWVAR 42
25448: PUSH
25449: LD_INT 36
25451: ST_TO_ADDR
25452: GO 25645
25454: LD_INT 25
25456: DOUBLE
25457: EQUAL
25458: IFTRUE 25462
25460: GO 25473
25462: POP
// bc_type := b_breastwork ; 26 :
25463: LD_ADDR_OWVAR 42
25467: PUSH
25468: LD_INT 31
25470: ST_TO_ADDR
25471: GO 25645
25473: LD_INT 26
25475: DOUBLE
25476: EQUAL
25477: IFTRUE 25481
25479: GO 25492
25481: POP
// bc_type := b_bunker ; 27 :
25482: LD_ADDR_OWVAR 42
25486: PUSH
25487: LD_INT 32
25489: ST_TO_ADDR
25490: GO 25645
25492: LD_INT 27
25494: DOUBLE
25495: EQUAL
25496: IFTRUE 25500
25498: GO 25511
25500: POP
// bc_type := b_turret ; 28 :
25501: LD_ADDR_OWVAR 42
25505: PUSH
25506: LD_INT 33
25508: ST_TO_ADDR
25509: GO 25645
25511: LD_INT 28
25513: DOUBLE
25514: EQUAL
25515: IFTRUE 25519
25517: GO 25530
25519: POP
// bc_type := b_armoury ; 29 :
25520: LD_ADDR_OWVAR 42
25524: PUSH
25525: LD_INT 4
25527: ST_TO_ADDR
25528: GO 25645
25530: LD_INT 29
25532: DOUBLE
25533: EQUAL
25534: IFTRUE 25538
25536: GO 25549
25538: POP
// bc_type := b_barracks ; 30 :
25539: LD_ADDR_OWVAR 42
25543: PUSH
25544: LD_INT 5
25546: ST_TO_ADDR
25547: GO 25645
25549: LD_INT 30
25551: DOUBLE
25552: EQUAL
25553: IFTRUE 25557
25555: GO 25568
25557: POP
// bc_type := b_solar_power ; 31 :
25558: LD_ADDR_OWVAR 42
25562: PUSH
25563: LD_INT 27
25565: ST_TO_ADDR
25566: GO 25645
25568: LD_INT 31
25570: DOUBLE
25571: EQUAL
25572: IFTRUE 25576
25574: GO 25587
25576: POP
// bc_type := b_oil_power ; 32 :
25577: LD_ADDR_OWVAR 42
25581: PUSH
25582: LD_INT 26
25584: ST_TO_ADDR
25585: GO 25645
25587: LD_INT 32
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25606
25595: POP
// bc_type := b_siberite_power ; 33 :
25596: LD_ADDR_OWVAR 42
25600: PUSH
25601: LD_INT 28
25603: ST_TO_ADDR
25604: GO 25645
25606: LD_INT 33
25608: DOUBLE
25609: EQUAL
25610: IFTRUE 25614
25612: GO 25625
25614: POP
// bc_type := b_oil_mine ; 34 :
25615: LD_ADDR_OWVAR 42
25619: PUSH
25620: LD_INT 29
25622: ST_TO_ADDR
25623: GO 25645
25625: LD_INT 34
25627: DOUBLE
25628: EQUAL
25629: IFTRUE 25633
25631: GO 25644
25633: POP
// bc_type := b_siberite_mine ; end ;
25634: LD_ADDR_OWVAR 42
25638: PUSH
25639: LD_INT 30
25641: ST_TO_ADDR
25642: GO 25645
25644: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25645: LD_ADDR_VAR 0 8
25649: PUSH
25650: LD_VAR 0 5
25654: PPUSH
25655: LD_VAR 0 6
25659: PPUSH
25660: LD_VAR 0 3
25664: PPUSH
25665: CALL_OW 47
25669: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25670: LD_OWVAR 42
25674: PUSH
25675: LD_INT 32
25677: PUSH
25678: LD_INT 33
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: IN
25685: IFFALSE 25701
// PlaceWeaponTurret ( b , weapon ) ;
25687: LD_VAR 0 8
25691: PPUSH
25692: LD_VAR 0 4
25696: PPUSH
25697: CALL_OW 431
// end ;
25701: LD_VAR 0 7
25705: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25712: LD_ADDR_VAR 0 4
25716: PUSH
25717: LD_INT 22
25719: PUSH
25720: LD_OWVAR 2
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: LD_INT 30
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 30
25744: PUSH
25745: LD_INT 1
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: LIST
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PPUSH
25761: CALL_OW 69
25765: ST_TO_ADDR
// if not tmp then
25766: LD_VAR 0 4
25770: NOT
25771: IFFALSE 25775
// exit ;
25773: GO 25834
// for i in tmp do
25775: LD_ADDR_VAR 0 2
25779: PUSH
25780: LD_VAR 0 4
25784: PUSH
25785: FOR_IN
25786: IFFALSE 25832
// for j = 1 to 3 do
25788: LD_ADDR_VAR 0 3
25792: PUSH
25793: DOUBLE
25794: LD_INT 1
25796: DEC
25797: ST_TO_ADDR
25798: LD_INT 3
25800: PUSH
25801: FOR_TO
25802: IFFALSE 25828
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25804: LD_VAR 0 2
25808: PPUSH
25809: CALL_OW 274
25813: PPUSH
25814: LD_VAR 0 3
25818: PPUSH
25819: LD_INT 99999
25821: PPUSH
25822: CALL_OW 277
25826: GO 25801
25828: POP
25829: POP
25830: GO 25785
25832: POP
25833: POP
// end ;
25834: LD_VAR 0 1
25838: RET
// export function hHackSetLevel10 ; var i , j ; begin
25839: LD_INT 0
25841: PPUSH
25842: PPUSH
25843: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25844: LD_ADDR_VAR 0 2
25848: PUSH
25849: LD_INT 21
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PPUSH
25859: CALL_OW 69
25863: PUSH
25864: FOR_IN
25865: IFFALSE 25917
// if IsSelected ( i ) then
25867: LD_VAR 0 2
25871: PPUSH
25872: CALL_OW 306
25876: IFFALSE 25915
// begin for j := 1 to 4 do
25878: LD_ADDR_VAR 0 3
25882: PUSH
25883: DOUBLE
25884: LD_INT 1
25886: DEC
25887: ST_TO_ADDR
25888: LD_INT 4
25890: PUSH
25891: FOR_TO
25892: IFFALSE 25913
// SetSkill ( i , j , 10 ) ;
25894: LD_VAR 0 2
25898: PPUSH
25899: LD_VAR 0 3
25903: PPUSH
25904: LD_INT 10
25906: PPUSH
25907: CALL_OW 237
25911: GO 25891
25913: POP
25914: POP
// end ;
25915: GO 25864
25917: POP
25918: POP
// end ;
25919: LD_VAR 0 1
25923: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25924: LD_INT 0
25926: PPUSH
25927: PPUSH
25928: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25929: LD_ADDR_VAR 0 2
25933: PUSH
25934: LD_INT 22
25936: PUSH
25937: LD_OWVAR 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 21
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PPUSH
25960: CALL_OW 69
25964: PUSH
25965: FOR_IN
25966: IFFALSE 26007
// begin for j := 1 to 4 do
25968: LD_ADDR_VAR 0 3
25972: PUSH
25973: DOUBLE
25974: LD_INT 1
25976: DEC
25977: ST_TO_ADDR
25978: LD_INT 4
25980: PUSH
25981: FOR_TO
25982: IFFALSE 26003
// SetSkill ( i , j , 10 ) ;
25984: LD_VAR 0 2
25988: PPUSH
25989: LD_VAR 0 3
25993: PPUSH
25994: LD_INT 10
25996: PPUSH
25997: CALL_OW 237
26001: GO 25981
26003: POP
26004: POP
// end ;
26005: GO 25965
26007: POP
26008: POP
// end ;
26009: LD_VAR 0 1
26013: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26014: LD_INT 0
26016: PPUSH
// uc_side := your_side ;
26017: LD_ADDR_OWVAR 20
26021: PUSH
26022: LD_OWVAR 2
26026: ST_TO_ADDR
// uc_nation := nation ;
26027: LD_ADDR_OWVAR 21
26031: PUSH
26032: LD_VAR 0 1
26036: ST_TO_ADDR
// InitHc ;
26037: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26041: LD_INT 0
26043: PPUSH
26044: LD_VAR 0 2
26048: PPUSH
26049: LD_VAR 0 3
26053: PPUSH
26054: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26058: LD_VAR 0 4
26062: PPUSH
26063: LD_VAR 0 5
26067: PPUSH
26068: CALL_OW 428
26072: PUSH
26073: LD_INT 0
26075: EQUAL
26076: IFFALSE 26100
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26078: CALL_OW 44
26082: PPUSH
26083: LD_VAR 0 4
26087: PPUSH
26088: LD_VAR 0 5
26092: PPUSH
26093: LD_INT 1
26095: PPUSH
26096: CALL_OW 48
// end ;
26100: LD_VAR 0 6
26104: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26105: LD_INT 0
26107: PPUSH
26108: PPUSH
// uc_side := your_side ;
26109: LD_ADDR_OWVAR 20
26113: PUSH
26114: LD_OWVAR 2
26118: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26119: LD_VAR 0 1
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: LD_INT 2
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: LD_INT 4
26135: PUSH
26136: LD_INT 5
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: IN
26146: IFFALSE 26158
// uc_nation := nation_american else
26148: LD_ADDR_OWVAR 21
26152: PUSH
26153: LD_INT 1
26155: ST_TO_ADDR
26156: GO 26201
// if chassis in [ 11 , 12 , 13 , 14 ] then
26158: LD_VAR 0 1
26162: PUSH
26163: LD_INT 11
26165: PUSH
26166: LD_INT 12
26168: PUSH
26169: LD_INT 13
26171: PUSH
26172: LD_INT 14
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: IN
26181: IFFALSE 26193
// uc_nation := nation_arabian else
26183: LD_ADDR_OWVAR 21
26187: PUSH
26188: LD_INT 2
26190: ST_TO_ADDR
26191: GO 26201
// uc_nation := nation_russian ;
26193: LD_ADDR_OWVAR 21
26197: PUSH
26198: LD_INT 3
26200: ST_TO_ADDR
// vc_chassis := chassis ;
26201: LD_ADDR_OWVAR 37
26205: PUSH
26206: LD_VAR 0 1
26210: ST_TO_ADDR
// vc_engine := engine ;
26211: LD_ADDR_OWVAR 39
26215: PUSH
26216: LD_VAR 0 2
26220: ST_TO_ADDR
// vc_control := control ;
26221: LD_ADDR_OWVAR 38
26225: PUSH
26226: LD_VAR 0 3
26230: ST_TO_ADDR
// vc_weapon := weapon ;
26231: LD_ADDR_OWVAR 40
26235: PUSH
26236: LD_VAR 0 4
26240: ST_TO_ADDR
// un := CreateVehicle ;
26241: LD_ADDR_VAR 0 8
26245: PUSH
26246: CALL_OW 45
26250: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26251: LD_VAR 0 8
26255: PPUSH
26256: LD_INT 0
26258: PPUSH
26259: LD_INT 5
26261: PPUSH
26262: CALL_OW 12
26266: PPUSH
26267: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26271: LD_VAR 0 8
26275: PPUSH
26276: LD_VAR 0 5
26280: PPUSH
26281: LD_VAR 0 6
26285: PPUSH
26286: LD_INT 1
26288: PPUSH
26289: CALL_OW 48
// end ;
26293: LD_VAR 0 7
26297: RET
// export hInvincible ; every 1 do
26298: GO 26300
26300: DISABLE
// hInvincible := [ ] ;
26301: LD_ADDR_EXP 79
26305: PUSH
26306: EMPTY
26307: ST_TO_ADDR
26308: END
// every 10 do var i ;
26309: GO 26311
26311: DISABLE
26312: LD_INT 0
26314: PPUSH
// begin enable ;
26315: ENABLE
// if not hInvincible then
26316: LD_EXP 79
26320: NOT
26321: IFFALSE 26325
// exit ;
26323: GO 26369
// for i in hInvincible do
26325: LD_ADDR_VAR 0 1
26329: PUSH
26330: LD_EXP 79
26334: PUSH
26335: FOR_IN
26336: IFFALSE 26367
// if GetLives ( i ) < 1000 then
26338: LD_VAR 0 1
26342: PPUSH
26343: CALL_OW 256
26347: PUSH
26348: LD_INT 1000
26350: LESS
26351: IFFALSE 26365
// SetLives ( i , 1000 ) ;
26353: LD_VAR 0 1
26357: PPUSH
26358: LD_INT 1000
26360: PPUSH
26361: CALL_OW 234
26365: GO 26335
26367: POP
26368: POP
// end ;
26369: PPOPN 1
26371: END
// export function hHackInvincible ; var i ; begin
26372: LD_INT 0
26374: PPUSH
26375: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26376: LD_ADDR_VAR 0 2
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 21
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 21
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: PPUSH
26409: CALL_OW 69
26413: PUSH
26414: FOR_IN
26415: IFFALSE 26476
// if IsSelected ( i ) then
26417: LD_VAR 0 2
26421: PPUSH
26422: CALL_OW 306
26426: IFFALSE 26474
// begin if i in hInvincible then
26428: LD_VAR 0 2
26432: PUSH
26433: LD_EXP 79
26437: IN
26438: IFFALSE 26458
// hInvincible := hInvincible diff i else
26440: LD_ADDR_EXP 79
26444: PUSH
26445: LD_EXP 79
26449: PUSH
26450: LD_VAR 0 2
26454: DIFF
26455: ST_TO_ADDR
26456: GO 26474
// hInvincible := hInvincible union i ;
26458: LD_ADDR_EXP 79
26462: PUSH
26463: LD_EXP 79
26467: PUSH
26468: LD_VAR 0 2
26472: UNION
26473: ST_TO_ADDR
// end ;
26474: GO 26414
26476: POP
26477: POP
// end ;
26478: LD_VAR 0 1
26482: RET
// export function hHackInvisible ; var i , j ; begin
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
26487: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26488: LD_ADDR_VAR 0 2
26492: PUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PPUSH
26503: CALL_OW 69
26507: PUSH
26508: FOR_IN
26509: IFFALSE 26533
// if IsSelected ( i ) then
26511: LD_VAR 0 2
26515: PPUSH
26516: CALL_OW 306
26520: IFFALSE 26531
// ComForceInvisible ( i ) ;
26522: LD_VAR 0 2
26526: PPUSH
26527: CALL_OW 496
26531: GO 26508
26533: POP
26534: POP
// end ;
26535: LD_VAR 0 1
26539: RET
// export function hHackChangeYourSide ; begin
26540: LD_INT 0
26542: PPUSH
// if your_side = 8 then
26543: LD_OWVAR 2
26547: PUSH
26548: LD_INT 8
26550: EQUAL
26551: IFFALSE 26563
// your_side := 0 else
26553: LD_ADDR_OWVAR 2
26557: PUSH
26558: LD_INT 0
26560: ST_TO_ADDR
26561: GO 26577
// your_side := your_side + 1 ;
26563: LD_ADDR_OWVAR 2
26567: PUSH
26568: LD_OWVAR 2
26572: PUSH
26573: LD_INT 1
26575: PLUS
26576: ST_TO_ADDR
// end ;
26577: LD_VAR 0 1
26581: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26582: LD_INT 0
26584: PPUSH
26585: PPUSH
26586: PPUSH
// for i in all_units do
26587: LD_ADDR_VAR 0 2
26591: PUSH
26592: LD_OWVAR 3
26596: PUSH
26597: FOR_IN
26598: IFFALSE 26676
// if IsSelected ( i ) then
26600: LD_VAR 0 2
26604: PPUSH
26605: CALL_OW 306
26609: IFFALSE 26674
// begin j := GetSide ( i ) ;
26611: LD_ADDR_VAR 0 3
26615: PUSH
26616: LD_VAR 0 2
26620: PPUSH
26621: CALL_OW 255
26625: ST_TO_ADDR
// if j = 8 then
26626: LD_VAR 0 3
26630: PUSH
26631: LD_INT 8
26633: EQUAL
26634: IFFALSE 26646
// j := 0 else
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: LD_INT 0
26643: ST_TO_ADDR
26644: GO 26660
// j := j + 1 ;
26646: LD_ADDR_VAR 0 3
26650: PUSH
26651: LD_VAR 0 3
26655: PUSH
26656: LD_INT 1
26658: PLUS
26659: ST_TO_ADDR
// SetSide ( i , j ) ;
26660: LD_VAR 0 2
26664: PPUSH
26665: LD_VAR 0 3
26669: PPUSH
26670: CALL_OW 235
// end ;
26674: GO 26597
26676: POP
26677: POP
// end ;
26678: LD_VAR 0 1
26682: RET
// export function hHackFog ; begin
26683: LD_INT 0
26685: PPUSH
// FogOff ( true ) ;
26686: LD_INT 1
26688: PPUSH
26689: CALL_OW 344
// end ;
26693: LD_VAR 0 1
26697: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26698: LD_INT 0
26700: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26701: LD_VAR 0 1
26705: PPUSH
26706: LD_VAR 0 2
26710: PPUSH
26711: LD_VAR 0 3
26715: PPUSH
26716: LD_INT 1
26718: PPUSH
26719: LD_INT 1
26721: PPUSH
26722: CALL_OW 483
// CenterOnXY ( x , y ) ;
26726: LD_VAR 0 2
26730: PPUSH
26731: LD_VAR 0 3
26735: PPUSH
26736: CALL_OW 84
// end ;
26740: LD_VAR 0 4
26744: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26749: LD_VAR 0 1
26753: NOT
26754: PUSH
26755: LD_VAR 0 2
26759: PPUSH
26760: LD_VAR 0 3
26764: PPUSH
26765: CALL_OW 488
26769: NOT
26770: OR
26771: PUSH
26772: LD_VAR 0 1
26776: PPUSH
26777: CALL_OW 266
26781: PUSH
26782: LD_INT 3
26784: NONEQUAL
26785: PUSH
26786: LD_VAR 0 1
26790: PPUSH
26791: CALL_OW 247
26795: PUSH
26796: LD_INT 1
26798: EQUAL
26799: NOT
26800: AND
26801: OR
26802: IFFALSE 26806
// exit ;
26804: GO 26955
// if GetType ( factory ) = unit_human then
26806: LD_VAR 0 1
26810: PPUSH
26811: CALL_OW 247
26815: PUSH
26816: LD_INT 1
26818: EQUAL
26819: IFFALSE 26836
// factory := IsInUnit ( factory ) ;
26821: LD_ADDR_VAR 0 1
26825: PUSH
26826: LD_VAR 0 1
26830: PPUSH
26831: CALL_OW 310
26835: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26836: LD_VAR 0 1
26840: PPUSH
26841: CALL_OW 266
26845: PUSH
26846: LD_INT 3
26848: NONEQUAL
26849: IFFALSE 26853
// exit ;
26851: GO 26955
// if HexInfo ( x , y ) = factory then
26853: LD_VAR 0 2
26857: PPUSH
26858: LD_VAR 0 3
26862: PPUSH
26863: CALL_OW 428
26867: PUSH
26868: LD_VAR 0 1
26872: EQUAL
26873: IFFALSE 26900
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26875: LD_ADDR_EXP 80
26879: PUSH
26880: LD_EXP 80
26884: PPUSH
26885: LD_VAR 0 1
26889: PPUSH
26890: LD_INT 0
26892: PPUSH
26893: CALL_OW 1
26897: ST_TO_ADDR
26898: GO 26951
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26900: LD_ADDR_EXP 80
26904: PUSH
26905: LD_EXP 80
26909: PPUSH
26910: LD_VAR 0 1
26914: PPUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 255
26924: PUSH
26925: LD_VAR 0 1
26929: PUSH
26930: LD_VAR 0 2
26934: PUSH
26935: LD_VAR 0 3
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: PPUSH
26946: CALL_OW 1
26950: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26951: CALL 26960 0 0
// end ;
26955: LD_VAR 0 4
26959: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26960: LD_INT 0
26962: PPUSH
26963: PPUSH
26964: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26965: LD_STRING resetFactoryWaypoint();
26967: PPUSH
26968: CALL_OW 559
// if factoryWaypoints then
26972: LD_EXP 80
26976: IFFALSE 27102
// begin list := PrepareArray ( factoryWaypoints ) ;
26978: LD_ADDR_VAR 0 3
26982: PUSH
26983: LD_EXP 80
26987: PPUSH
26988: CALL 74410 0 1
26992: ST_TO_ADDR
// for i := 1 to list do
26993: LD_ADDR_VAR 0 2
26997: PUSH
26998: DOUBLE
26999: LD_INT 1
27001: DEC
27002: ST_TO_ADDR
27003: LD_VAR 0 3
27007: PUSH
27008: FOR_TO
27009: IFFALSE 27100
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27011: LD_STRING setFactoryWaypointXY(
27013: PUSH
27014: LD_VAR 0 3
27018: PUSH
27019: LD_VAR 0 2
27023: ARRAY
27024: PUSH
27025: LD_INT 1
27027: ARRAY
27028: STR
27029: PUSH
27030: LD_STRING ,
27032: STR
27033: PUSH
27034: LD_VAR 0 3
27038: PUSH
27039: LD_VAR 0 2
27043: ARRAY
27044: PUSH
27045: LD_INT 2
27047: ARRAY
27048: STR
27049: PUSH
27050: LD_STRING ,
27052: STR
27053: PUSH
27054: LD_VAR 0 3
27058: PUSH
27059: LD_VAR 0 2
27063: ARRAY
27064: PUSH
27065: LD_INT 3
27067: ARRAY
27068: STR
27069: PUSH
27070: LD_STRING ,
27072: STR
27073: PUSH
27074: LD_VAR 0 3
27078: PUSH
27079: LD_VAR 0 2
27083: ARRAY
27084: PUSH
27085: LD_INT 4
27087: ARRAY
27088: STR
27089: PUSH
27090: LD_STRING )
27092: STR
27093: PPUSH
27094: CALL_OW 559
27098: GO 27008
27100: POP
27101: POP
// end ; end ;
27102: LD_VAR 0 1
27106: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27107: LD_INT 0
27109: PPUSH
// if HexInfo ( x , y ) = warehouse then
27110: LD_VAR 0 2
27114: PPUSH
27115: LD_VAR 0 3
27119: PPUSH
27120: CALL_OW 428
27124: PUSH
27125: LD_VAR 0 1
27129: EQUAL
27130: IFFALSE 27157
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27132: LD_ADDR_EXP 81
27136: PUSH
27137: LD_EXP 81
27141: PPUSH
27142: LD_VAR 0 1
27146: PPUSH
27147: LD_INT 0
27149: PPUSH
27150: CALL_OW 1
27154: ST_TO_ADDR
27155: GO 27208
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27157: LD_ADDR_EXP 81
27161: PUSH
27162: LD_EXP 81
27166: PPUSH
27167: LD_VAR 0 1
27171: PPUSH
27172: LD_VAR 0 1
27176: PPUSH
27177: CALL_OW 255
27181: PUSH
27182: LD_VAR 0 1
27186: PUSH
27187: LD_VAR 0 2
27191: PUSH
27192: LD_VAR 0 3
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: PPUSH
27203: CALL_OW 1
27207: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27208: CALL 27217 0 0
// end ;
27212: LD_VAR 0 4
27216: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27217: LD_INT 0
27219: PPUSH
27220: PPUSH
27221: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27222: LD_STRING resetWarehouseGatheringPoints();
27224: PPUSH
27225: CALL_OW 559
// if warehouseGatheringPoints then
27229: LD_EXP 81
27233: IFFALSE 27359
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27235: LD_ADDR_VAR 0 3
27239: PUSH
27240: LD_EXP 81
27244: PPUSH
27245: CALL 74410 0 1
27249: ST_TO_ADDR
// for i := 1 to list do
27250: LD_ADDR_VAR 0 2
27254: PUSH
27255: DOUBLE
27256: LD_INT 1
27258: DEC
27259: ST_TO_ADDR
27260: LD_VAR 0 3
27264: PUSH
27265: FOR_TO
27266: IFFALSE 27357
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27268: LD_STRING setWarehouseGatheringPointXY(
27270: PUSH
27271: LD_VAR 0 3
27275: PUSH
27276: LD_VAR 0 2
27280: ARRAY
27281: PUSH
27282: LD_INT 1
27284: ARRAY
27285: STR
27286: PUSH
27287: LD_STRING ,
27289: STR
27290: PUSH
27291: LD_VAR 0 3
27295: PUSH
27296: LD_VAR 0 2
27300: ARRAY
27301: PUSH
27302: LD_INT 2
27304: ARRAY
27305: STR
27306: PUSH
27307: LD_STRING ,
27309: STR
27310: PUSH
27311: LD_VAR 0 3
27315: PUSH
27316: LD_VAR 0 2
27320: ARRAY
27321: PUSH
27322: LD_INT 3
27324: ARRAY
27325: STR
27326: PUSH
27327: LD_STRING ,
27329: STR
27330: PUSH
27331: LD_VAR 0 3
27335: PUSH
27336: LD_VAR 0 2
27340: ARRAY
27341: PUSH
27342: LD_INT 4
27344: ARRAY
27345: STR
27346: PUSH
27347: LD_STRING )
27349: STR
27350: PPUSH
27351: CALL_OW 559
27355: GO 27265
27357: POP
27358: POP
// end ; end ;
27359: LD_VAR 0 1
27363: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27364: LD_EXP 81
27368: IFFALSE 28053
27370: GO 27372
27372: DISABLE
27373: LD_INT 0
27375: PPUSH
27376: PPUSH
27377: PPUSH
27378: PPUSH
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
27383: PPUSH
// begin enable ;
27384: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27385: LD_ADDR_VAR 0 3
27389: PUSH
27390: LD_EXP 81
27394: PPUSH
27395: CALL 74410 0 1
27399: ST_TO_ADDR
// if not list then
27400: LD_VAR 0 3
27404: NOT
27405: IFFALSE 27409
// exit ;
27407: GO 28053
// for i := 1 to list do
27409: LD_ADDR_VAR 0 1
27413: PUSH
27414: DOUBLE
27415: LD_INT 1
27417: DEC
27418: ST_TO_ADDR
27419: LD_VAR 0 3
27423: PUSH
27424: FOR_TO
27425: IFFALSE 28051
// begin depot := list [ i ] [ 2 ] ;
27427: LD_ADDR_VAR 0 8
27431: PUSH
27432: LD_VAR 0 3
27436: PUSH
27437: LD_VAR 0 1
27441: ARRAY
27442: PUSH
27443: LD_INT 2
27445: ARRAY
27446: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27447: LD_ADDR_VAR 0 5
27451: PUSH
27452: LD_VAR 0 3
27456: PUSH
27457: LD_VAR 0 1
27461: ARRAY
27462: PUSH
27463: LD_INT 1
27465: ARRAY
27466: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27467: LD_VAR 0 8
27471: PPUSH
27472: CALL_OW 301
27476: PUSH
27477: LD_VAR 0 5
27481: PUSH
27482: LD_VAR 0 8
27486: PPUSH
27487: CALL_OW 255
27491: NONEQUAL
27492: OR
27493: IFFALSE 27522
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27495: LD_ADDR_EXP 81
27499: PUSH
27500: LD_EXP 81
27504: PPUSH
27505: LD_VAR 0 8
27509: PPUSH
27510: LD_INT 0
27512: PPUSH
27513: CALL_OW 1
27517: ST_TO_ADDR
// exit ;
27518: POP
27519: POP
27520: GO 28053
// end ; x := list [ i ] [ 3 ] ;
27522: LD_ADDR_VAR 0 6
27526: PUSH
27527: LD_VAR 0 3
27531: PUSH
27532: LD_VAR 0 1
27536: ARRAY
27537: PUSH
27538: LD_INT 3
27540: ARRAY
27541: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27542: LD_ADDR_VAR 0 7
27546: PUSH
27547: LD_VAR 0 3
27551: PUSH
27552: LD_VAR 0 1
27556: ARRAY
27557: PUSH
27558: LD_INT 4
27560: ARRAY
27561: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27562: LD_ADDR_VAR 0 9
27566: PUSH
27567: LD_VAR 0 6
27571: PPUSH
27572: LD_VAR 0 7
27576: PPUSH
27577: LD_INT 16
27579: PPUSH
27580: CALL 72998 0 3
27584: ST_TO_ADDR
// if not cratesNearbyPoint then
27585: LD_VAR 0 9
27589: NOT
27590: IFFALSE 27596
// exit ;
27592: POP
27593: POP
27594: GO 28053
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27596: LD_ADDR_VAR 0 4
27600: PUSH
27601: LD_INT 22
27603: PUSH
27604: LD_VAR 0 5
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 3
27615: PUSH
27616: LD_INT 60
27618: PUSH
27619: EMPTY
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 91
27628: PUSH
27629: LD_VAR 0 8
27633: PUSH
27634: LD_INT 6
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: LD_INT 25
27647: PUSH
27648: LD_INT 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 25
27657: PUSH
27658: LD_INT 16
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: PPUSH
27676: CALL_OW 69
27680: PUSH
27681: LD_VAR 0 8
27685: PPUSH
27686: CALL_OW 313
27690: PPUSH
27691: LD_INT 3
27693: PUSH
27694: LD_INT 60
27696: PUSH
27697: EMPTY
27698: LIST
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: LD_INT 25
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 25
27719: PUSH
27720: LD_INT 16
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PPUSH
27736: CALL_OW 72
27740: UNION
27741: ST_TO_ADDR
// if tmp then
27742: LD_VAR 0 4
27746: IFFALSE 27826
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27748: LD_ADDR_VAR 0 4
27752: PUSH
27753: LD_VAR 0 4
27757: PPUSH
27758: LD_INT 3
27760: PPUSH
27761: CALL 70967 0 2
27765: ST_TO_ADDR
// for j in tmp do
27766: LD_ADDR_VAR 0 2
27770: PUSH
27771: LD_VAR 0 4
27775: PUSH
27776: FOR_IN
27777: IFFALSE 27820
// begin if IsInUnit ( j ) then
27779: LD_VAR 0 2
27783: PPUSH
27784: CALL_OW 310
27788: IFFALSE 27799
// ComExit ( j ) ;
27790: LD_VAR 0 2
27794: PPUSH
27795: CALL 71050 0 1
// AddComCollect ( j , x , y ) ;
27799: LD_VAR 0 2
27803: PPUSH
27804: LD_VAR 0 6
27808: PPUSH
27809: LD_VAR 0 7
27813: PPUSH
27814: CALL_OW 177
// end ;
27818: GO 27776
27820: POP
27821: POP
// exit ;
27822: POP
27823: POP
27824: GO 28053
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27826: LD_ADDR_VAR 0 4
27830: PUSH
27831: LD_INT 22
27833: PUSH
27834: LD_VAR 0 5
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 91
27845: PUSH
27846: LD_VAR 0 8
27850: PUSH
27851: LD_INT 8
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: PUSH
27862: LD_INT 34
27864: PUSH
27865: LD_INT 12
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 34
27874: PUSH
27875: LD_INT 51
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 34
27884: PUSH
27885: LD_INT 32
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 34
27894: PUSH
27895: LD_INT 89
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: PPUSH
27914: CALL_OW 69
27918: ST_TO_ADDR
// if tmp then
27919: LD_VAR 0 4
27923: IFFALSE 28049
// begin for j in tmp do
27925: LD_ADDR_VAR 0 2
27929: PUSH
27930: LD_VAR 0 4
27934: PUSH
27935: FOR_IN
27936: IFFALSE 28047
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27938: LD_VAR 0 2
27942: PPUSH
27943: CALL_OW 262
27947: PUSH
27948: LD_INT 3
27950: EQUAL
27951: PUSH
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 261
27961: PUSH
27962: LD_INT 20
27964: GREATER
27965: OR
27966: PUSH
27967: LD_VAR 0 2
27971: PPUSH
27972: CALL_OW 314
27976: NOT
27977: AND
27978: PUSH
27979: LD_VAR 0 2
27983: PPUSH
27984: CALL_OW 263
27988: PUSH
27989: LD_INT 1
27991: NONEQUAL
27992: PUSH
27993: LD_VAR 0 2
27997: PPUSH
27998: CALL_OW 311
28002: OR
28003: AND
28004: IFFALSE 28045
// begin ComCollect ( j , x , y ) ;
28006: LD_VAR 0 2
28010: PPUSH
28011: LD_VAR 0 6
28015: PPUSH
28016: LD_VAR 0 7
28020: PPUSH
28021: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28025: LD_VAR 0 2
28029: PPUSH
28030: LD_VAR 0 8
28034: PPUSH
28035: CALL_OW 172
// exit ;
28039: POP
28040: POP
28041: POP
28042: POP
28043: GO 28053
// end ;
28045: GO 27935
28047: POP
28048: POP
// end ; end ;
28049: GO 27424
28051: POP
28052: POP
// end ; end_of_file
28053: PPOPN 9
28055: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28056: LD_INT 0
28058: PPUSH
28059: PPUSH
28060: PPUSH
28061: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28062: LD_VAR 0 1
28066: PPUSH
28067: CALL_OW 264
28071: PUSH
28072: LD_INT 91
28074: EQUAL
28075: IFFALSE 28147
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28077: LD_INT 68
28079: PPUSH
28080: LD_VAR 0 1
28084: PPUSH
28085: CALL_OW 255
28089: PPUSH
28090: CALL_OW 321
28094: PUSH
28095: LD_INT 2
28097: EQUAL
28098: IFFALSE 28110
// eff := 70 else
28100: LD_ADDR_VAR 0 4
28104: PUSH
28105: LD_INT 70
28107: ST_TO_ADDR
28108: GO 28118
// eff := 30 ;
28110: LD_ADDR_VAR 0 4
28114: PUSH
28115: LD_INT 30
28117: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 250
28127: PPUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 251
28137: PPUSH
28138: LD_VAR 0 4
28142: PPUSH
28143: CALL_OW 495
// end ; end ;
28147: LD_VAR 0 2
28151: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28152: LD_INT 0
28154: PPUSH
// end ;
28155: LD_VAR 0 4
28159: RET
// export function SOS_Command ( cmd ) ; begin
28160: LD_INT 0
28162: PPUSH
// end ;
28163: LD_VAR 0 2
28167: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28168: LD_INT 0
28170: PPUSH
// end ;
28171: LD_VAR 0 6
28175: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28176: LD_INT 0
28178: PPUSH
28179: PPUSH
// if not vehicle or not factory then
28180: LD_VAR 0 1
28184: NOT
28185: PUSH
28186: LD_VAR 0 2
28190: NOT
28191: OR
28192: IFFALSE 28196
// exit ;
28194: GO 28427
// if factoryWaypoints >= factory then
28196: LD_EXP 80
28200: PUSH
28201: LD_VAR 0 2
28205: GREATEREQUAL
28206: IFFALSE 28427
// if factoryWaypoints [ factory ] then
28208: LD_EXP 80
28212: PUSH
28213: LD_VAR 0 2
28217: ARRAY
28218: IFFALSE 28427
// begin if GetControl ( vehicle ) = control_manual then
28220: LD_VAR 0 1
28224: PPUSH
28225: CALL_OW 263
28229: PUSH
28230: LD_INT 1
28232: EQUAL
28233: IFFALSE 28314
// begin driver := IsDrivenBy ( vehicle ) ;
28235: LD_ADDR_VAR 0 4
28239: PUSH
28240: LD_VAR 0 1
28244: PPUSH
28245: CALL_OW 311
28249: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28250: LD_VAR 0 4
28254: PPUSH
28255: LD_EXP 80
28259: PUSH
28260: LD_VAR 0 2
28264: ARRAY
28265: PUSH
28266: LD_INT 3
28268: ARRAY
28269: PPUSH
28270: LD_EXP 80
28274: PUSH
28275: LD_VAR 0 2
28279: ARRAY
28280: PUSH
28281: LD_INT 4
28283: ARRAY
28284: PPUSH
28285: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28289: LD_VAR 0 4
28293: PPUSH
28294: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28298: LD_VAR 0 4
28302: PPUSH
28303: LD_VAR 0 2
28307: PPUSH
28308: CALL_OW 180
// end else
28312: GO 28427
// if GetControl ( vehicle ) = control_remote then
28314: LD_VAR 0 1
28318: PPUSH
28319: CALL_OW 263
28323: PUSH
28324: LD_INT 2
28326: EQUAL
28327: IFFALSE 28388
// begin wait ( 0 0$2 ) ;
28329: LD_INT 70
28331: PPUSH
28332: CALL_OW 67
// if Connect ( vehicle ) then
28336: LD_VAR 0 1
28340: PPUSH
28341: CALL 41258 0 1
28345: IFFALSE 28386
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28347: LD_VAR 0 1
28351: PPUSH
28352: LD_EXP 80
28356: PUSH
28357: LD_VAR 0 2
28361: ARRAY
28362: PUSH
28363: LD_INT 3
28365: ARRAY
28366: PPUSH
28367: LD_EXP 80
28371: PUSH
28372: LD_VAR 0 2
28376: ARRAY
28377: PUSH
28378: LD_INT 4
28380: ARRAY
28381: PPUSH
28382: CALL_OW 171
// end else
28386: GO 28427
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28388: LD_VAR 0 1
28392: PPUSH
28393: LD_EXP 80
28397: PUSH
28398: LD_VAR 0 2
28402: ARRAY
28403: PUSH
28404: LD_INT 3
28406: ARRAY
28407: PPUSH
28408: LD_EXP 80
28412: PUSH
28413: LD_VAR 0 2
28417: ARRAY
28418: PUSH
28419: LD_INT 4
28421: ARRAY
28422: PPUSH
28423: CALL_OW 171
// end ; end ;
28427: LD_VAR 0 3
28431: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28432: LD_INT 0
28434: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28435: LD_VAR 0 1
28439: PUSH
28440: LD_INT 250
28442: EQUAL
28443: PUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: CALL_OW 264
28453: PUSH
28454: LD_INT 81
28456: EQUAL
28457: AND
28458: IFFALSE 28479
// MinerPlaceMine ( unit , x , y ) ;
28460: LD_VAR 0 2
28464: PPUSH
28465: LD_VAR 0 4
28469: PPUSH
28470: LD_VAR 0 5
28474: PPUSH
28475: CALL 31469 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28479: LD_VAR 0 1
28483: PUSH
28484: LD_INT 251
28486: EQUAL
28487: PUSH
28488: LD_VAR 0 2
28492: PPUSH
28493: CALL_OW 264
28497: PUSH
28498: LD_INT 81
28500: EQUAL
28501: AND
28502: IFFALSE 28523
// MinerDetonateMine ( unit , x , y ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_VAR 0 4
28513: PPUSH
28514: LD_VAR 0 5
28518: PPUSH
28519: CALL 31744 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28523: LD_VAR 0 1
28527: PUSH
28528: LD_INT 252
28530: EQUAL
28531: PUSH
28532: LD_VAR 0 2
28536: PPUSH
28537: CALL_OW 264
28541: PUSH
28542: LD_INT 81
28544: EQUAL
28545: AND
28546: IFFALSE 28567
// MinerCreateMinefield ( unit , x , y ) ;
28548: LD_VAR 0 2
28552: PPUSH
28553: LD_VAR 0 4
28557: PPUSH
28558: LD_VAR 0 5
28562: PPUSH
28563: CALL 32161 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28567: LD_VAR 0 1
28571: PUSH
28572: LD_INT 253
28574: EQUAL
28575: PUSH
28576: LD_VAR 0 2
28580: PPUSH
28581: CALL_OW 257
28585: PUSH
28586: LD_INT 5
28588: EQUAL
28589: AND
28590: IFFALSE 28611
// ComBinocular ( unit , x , y ) ;
28592: LD_VAR 0 2
28596: PPUSH
28597: LD_VAR 0 4
28601: PPUSH
28602: LD_VAR 0 5
28606: PPUSH
28607: CALL 32530 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28611: LD_VAR 0 1
28615: PUSH
28616: LD_INT 254
28618: EQUAL
28619: PUSH
28620: LD_VAR 0 2
28624: PPUSH
28625: CALL_OW 264
28629: PUSH
28630: LD_INT 99
28632: EQUAL
28633: AND
28634: PUSH
28635: LD_VAR 0 3
28639: PPUSH
28640: CALL_OW 263
28644: PUSH
28645: LD_INT 3
28647: EQUAL
28648: AND
28649: IFFALSE 28665
// HackDestroyVehicle ( unit , selectedUnit ) ;
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_VAR 0 3
28660: PPUSH
28661: CALL 30833 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28665: LD_VAR 0 1
28669: PUSH
28670: LD_INT 255
28672: EQUAL
28673: PUSH
28674: LD_VAR 0 2
28678: PPUSH
28679: CALL_OW 264
28683: PUSH
28684: LD_INT 14
28686: PUSH
28687: LD_INT 53
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: IN
28694: AND
28695: PUSH
28696: LD_VAR 0 4
28700: PPUSH
28701: LD_VAR 0 5
28705: PPUSH
28706: CALL_OW 488
28710: AND
28711: IFFALSE 28735
// CutTreeXYR ( unit , x , y , 12 ) ;
28713: LD_VAR 0 2
28717: PPUSH
28718: LD_VAR 0 4
28722: PPUSH
28723: LD_VAR 0 5
28727: PPUSH
28728: LD_INT 12
28730: PPUSH
28731: CALL 28830 0 4
// if cmd = 256 then
28735: LD_VAR 0 1
28739: PUSH
28740: LD_INT 256
28742: EQUAL
28743: IFFALSE 28764
// SetFactoryWaypoint ( unit , x , y ) ;
28745: LD_VAR 0 2
28749: PPUSH
28750: LD_VAR 0 4
28754: PPUSH
28755: LD_VAR 0 5
28759: PPUSH
28760: CALL 26745 0 3
// if cmd = 257 then
28764: LD_VAR 0 1
28768: PUSH
28769: LD_INT 257
28771: EQUAL
28772: IFFALSE 28793
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28774: LD_VAR 0 2
28778: PPUSH
28779: LD_VAR 0 4
28783: PPUSH
28784: LD_VAR 0 5
28788: PPUSH
28789: CALL 27107 0 3
// if cmd = 258 then
28793: LD_VAR 0 1
28797: PUSH
28798: LD_INT 258
28800: EQUAL
28801: IFFALSE 28825
// BurnTreeXYR ( unit , x , y , 8 ) ;
28803: LD_VAR 0 2
28807: PPUSH
28808: LD_VAR 0 4
28812: PPUSH
28813: LD_VAR 0 5
28817: PPUSH
28818: LD_INT 8
28820: PPUSH
28821: CALL 29224 0 4
// end ;
28825: LD_VAR 0 6
28829: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28830: LD_INT 0
28832: PPUSH
28833: PPUSH
28834: PPUSH
28835: PPUSH
28836: PPUSH
28837: PPUSH
28838: PPUSH
28839: PPUSH
28840: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28841: LD_VAR 0 1
28845: PPUSH
28846: CALL_OW 302
28850: NOT
28851: PUSH
28852: LD_VAR 0 2
28856: PPUSH
28857: LD_VAR 0 3
28861: PPUSH
28862: CALL_OW 488
28866: NOT
28867: OR
28868: PUSH
28869: LD_VAR 0 4
28873: NOT
28874: OR
28875: IFFALSE 28879
// exit ;
28877: GO 29219
// list := [ ] ;
28879: LD_ADDR_VAR 0 13
28883: PUSH
28884: EMPTY
28885: ST_TO_ADDR
// if x - r < 0 then
28886: LD_VAR 0 2
28890: PUSH
28891: LD_VAR 0 4
28895: MINUS
28896: PUSH
28897: LD_INT 0
28899: LESS
28900: IFFALSE 28912
// min_x := 0 else
28902: LD_ADDR_VAR 0 7
28906: PUSH
28907: LD_INT 0
28909: ST_TO_ADDR
28910: GO 28928
// min_x := x - r ;
28912: LD_ADDR_VAR 0 7
28916: PUSH
28917: LD_VAR 0 2
28921: PUSH
28922: LD_VAR 0 4
28926: MINUS
28927: ST_TO_ADDR
// if y - r < 0 then
28928: LD_VAR 0 3
28932: PUSH
28933: LD_VAR 0 4
28937: MINUS
28938: PUSH
28939: LD_INT 0
28941: LESS
28942: IFFALSE 28954
// min_y := 0 else
28944: LD_ADDR_VAR 0 8
28948: PUSH
28949: LD_INT 0
28951: ST_TO_ADDR
28952: GO 28970
// min_y := y - r ;
28954: LD_ADDR_VAR 0 8
28958: PUSH
28959: LD_VAR 0 3
28963: PUSH
28964: LD_VAR 0 4
28968: MINUS
28969: ST_TO_ADDR
// max_x := x + r ;
28970: LD_ADDR_VAR 0 9
28974: PUSH
28975: LD_VAR 0 2
28979: PUSH
28980: LD_VAR 0 4
28984: PLUS
28985: ST_TO_ADDR
// max_y := y + r ;
28986: LD_ADDR_VAR 0 10
28990: PUSH
28991: LD_VAR 0 3
28995: PUSH
28996: LD_VAR 0 4
29000: PLUS
29001: ST_TO_ADDR
// for _x = min_x to max_x do
29002: LD_ADDR_VAR 0 11
29006: PUSH
29007: DOUBLE
29008: LD_VAR 0 7
29012: DEC
29013: ST_TO_ADDR
29014: LD_VAR 0 9
29018: PUSH
29019: FOR_TO
29020: IFFALSE 29137
// for _y = min_y to max_y do
29022: LD_ADDR_VAR 0 12
29026: PUSH
29027: DOUBLE
29028: LD_VAR 0 8
29032: DEC
29033: ST_TO_ADDR
29034: LD_VAR 0 10
29038: PUSH
29039: FOR_TO
29040: IFFALSE 29133
// begin if not ValidHex ( _x , _y ) then
29042: LD_VAR 0 11
29046: PPUSH
29047: LD_VAR 0 12
29051: PPUSH
29052: CALL_OW 488
29056: NOT
29057: IFFALSE 29061
// continue ;
29059: GO 29039
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29061: LD_VAR 0 11
29065: PPUSH
29066: LD_VAR 0 12
29070: PPUSH
29071: CALL_OW 351
29075: PUSH
29076: LD_VAR 0 11
29080: PPUSH
29081: LD_VAR 0 12
29085: PPUSH
29086: CALL_OW 554
29090: AND
29091: IFFALSE 29131
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29093: LD_ADDR_VAR 0 13
29097: PUSH
29098: LD_VAR 0 13
29102: PPUSH
29103: LD_VAR 0 13
29107: PUSH
29108: LD_INT 1
29110: PLUS
29111: PPUSH
29112: LD_VAR 0 11
29116: PUSH
29117: LD_VAR 0 12
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PPUSH
29126: CALL_OW 2
29130: ST_TO_ADDR
// end ;
29131: GO 29039
29133: POP
29134: POP
29135: GO 29019
29137: POP
29138: POP
// if not list then
29139: LD_VAR 0 13
29143: NOT
29144: IFFALSE 29148
// exit ;
29146: GO 29219
// for i in list do
29148: LD_ADDR_VAR 0 6
29152: PUSH
29153: LD_VAR 0 13
29157: PUSH
29158: FOR_IN
29159: IFFALSE 29217
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29161: LD_VAR 0 1
29165: PPUSH
29166: LD_STRING M
29168: PUSH
29169: LD_VAR 0 6
29173: PUSH
29174: LD_INT 1
29176: ARRAY
29177: PUSH
29178: LD_VAR 0 6
29182: PUSH
29183: LD_INT 2
29185: ARRAY
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: PUSH
29208: EMPTY
29209: LIST
29210: PPUSH
29211: CALL_OW 447
29215: GO 29158
29217: POP
29218: POP
// end ;
29219: LD_VAR 0 5
29223: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29224: LD_INT 0
29226: PPUSH
29227: PPUSH
29228: PPUSH
29229: PPUSH
29230: PPUSH
29231: PPUSH
29232: PPUSH
29233: PPUSH
29234: PPUSH
29235: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29236: LD_VAR 0 1
29240: PPUSH
29241: CALL_OW 302
29245: NOT
29246: PUSH
29247: LD_VAR 0 2
29251: PPUSH
29252: LD_VAR 0 3
29256: PPUSH
29257: CALL_OW 488
29261: NOT
29262: OR
29263: PUSH
29264: LD_VAR 0 4
29268: NOT
29269: OR
29270: IFFALSE 29274
// exit ;
29272: GO 29787
// list := [ ] ;
29274: LD_ADDR_VAR 0 13
29278: PUSH
29279: EMPTY
29280: ST_TO_ADDR
// if x - r < 0 then
29281: LD_VAR 0 2
29285: PUSH
29286: LD_VAR 0 4
29290: MINUS
29291: PUSH
29292: LD_INT 0
29294: LESS
29295: IFFALSE 29307
// min_x := 0 else
29297: LD_ADDR_VAR 0 7
29301: PUSH
29302: LD_INT 0
29304: ST_TO_ADDR
29305: GO 29323
// min_x := x - r ;
29307: LD_ADDR_VAR 0 7
29311: PUSH
29312: LD_VAR 0 2
29316: PUSH
29317: LD_VAR 0 4
29321: MINUS
29322: ST_TO_ADDR
// if y - r < 0 then
29323: LD_VAR 0 3
29327: PUSH
29328: LD_VAR 0 4
29332: MINUS
29333: PUSH
29334: LD_INT 0
29336: LESS
29337: IFFALSE 29349
// min_y := 0 else
29339: LD_ADDR_VAR 0 8
29343: PUSH
29344: LD_INT 0
29346: ST_TO_ADDR
29347: GO 29365
// min_y := y - r ;
29349: LD_ADDR_VAR 0 8
29353: PUSH
29354: LD_VAR 0 3
29358: PUSH
29359: LD_VAR 0 4
29363: MINUS
29364: ST_TO_ADDR
// max_x := x + r ;
29365: LD_ADDR_VAR 0 9
29369: PUSH
29370: LD_VAR 0 2
29374: PUSH
29375: LD_VAR 0 4
29379: PLUS
29380: ST_TO_ADDR
// max_y := y + r ;
29381: LD_ADDR_VAR 0 10
29385: PUSH
29386: LD_VAR 0 3
29390: PUSH
29391: LD_VAR 0 4
29395: PLUS
29396: ST_TO_ADDR
// for _x = min_x to max_x do
29397: LD_ADDR_VAR 0 11
29401: PUSH
29402: DOUBLE
29403: LD_VAR 0 7
29407: DEC
29408: ST_TO_ADDR
29409: LD_VAR 0 9
29413: PUSH
29414: FOR_TO
29415: IFFALSE 29532
// for _y = min_y to max_y do
29417: LD_ADDR_VAR 0 12
29421: PUSH
29422: DOUBLE
29423: LD_VAR 0 8
29427: DEC
29428: ST_TO_ADDR
29429: LD_VAR 0 10
29433: PUSH
29434: FOR_TO
29435: IFFALSE 29528
// begin if not ValidHex ( _x , _y ) then
29437: LD_VAR 0 11
29441: PPUSH
29442: LD_VAR 0 12
29446: PPUSH
29447: CALL_OW 488
29451: NOT
29452: IFFALSE 29456
// continue ;
29454: GO 29434
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29456: LD_VAR 0 11
29460: PPUSH
29461: LD_VAR 0 12
29465: PPUSH
29466: CALL_OW 351
29470: PUSH
29471: LD_VAR 0 11
29475: PPUSH
29476: LD_VAR 0 12
29480: PPUSH
29481: CALL_OW 554
29485: AND
29486: IFFALSE 29526
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29488: LD_ADDR_VAR 0 13
29492: PUSH
29493: LD_VAR 0 13
29497: PPUSH
29498: LD_VAR 0 13
29502: PUSH
29503: LD_INT 1
29505: PLUS
29506: PPUSH
29507: LD_VAR 0 11
29511: PUSH
29512: LD_VAR 0 12
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PPUSH
29521: CALL_OW 2
29525: ST_TO_ADDR
// end ;
29526: GO 29434
29528: POP
29529: POP
29530: GO 29414
29532: POP
29533: POP
// if not list then
29534: LD_VAR 0 13
29538: NOT
29539: IFFALSE 29543
// exit ;
29541: GO 29787
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29543: LD_ADDR_VAR 0 13
29547: PUSH
29548: LD_VAR 0 1
29552: PPUSH
29553: LD_VAR 0 13
29557: PPUSH
29558: LD_INT 1
29560: PPUSH
29561: LD_INT 1
29563: PPUSH
29564: CALL 38400 0 4
29568: ST_TO_ADDR
// ComStop ( flame ) ;
29569: LD_VAR 0 1
29573: PPUSH
29574: CALL_OW 141
// for i in list do
29578: LD_ADDR_VAR 0 6
29582: PUSH
29583: LD_VAR 0 13
29587: PUSH
29588: FOR_IN
29589: IFFALSE 29620
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29591: LD_VAR 0 1
29595: PPUSH
29596: LD_VAR 0 6
29600: PUSH
29601: LD_INT 1
29603: ARRAY
29604: PPUSH
29605: LD_VAR 0 6
29609: PUSH
29610: LD_INT 2
29612: ARRAY
29613: PPUSH
29614: CALL_OW 176
29618: GO 29588
29620: POP
29621: POP
// repeat wait ( 0 0$1 ) ;
29622: LD_INT 35
29624: PPUSH
29625: CALL_OW 67
// task := GetTaskList ( flame ) ;
29629: LD_ADDR_VAR 0 14
29633: PUSH
29634: LD_VAR 0 1
29638: PPUSH
29639: CALL_OW 437
29643: ST_TO_ADDR
// if not task then
29644: LD_VAR 0 14
29648: NOT
29649: IFFALSE 29653
// exit ;
29651: GO 29787
// if task [ 1 ] [ 1 ] <> | then
29653: LD_VAR 0 14
29657: PUSH
29658: LD_INT 1
29660: ARRAY
29661: PUSH
29662: LD_INT 1
29664: ARRAY
29665: PUSH
29666: LD_STRING |
29668: NONEQUAL
29669: IFFALSE 29673
// exit ;
29671: GO 29787
// _x := task [ 1 ] [ 2 ] ;
29673: LD_ADDR_VAR 0 11
29677: PUSH
29678: LD_VAR 0 14
29682: PUSH
29683: LD_INT 1
29685: ARRAY
29686: PUSH
29687: LD_INT 2
29689: ARRAY
29690: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29691: LD_ADDR_VAR 0 12
29695: PUSH
29696: LD_VAR 0 14
29700: PUSH
29701: LD_INT 1
29703: ARRAY
29704: PUSH
29705: LD_INT 3
29707: ARRAY
29708: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29709: LD_VAR 0 11
29713: PPUSH
29714: LD_VAR 0 12
29718: PPUSH
29719: CALL_OW 351
29723: NOT
29724: PUSH
29725: LD_VAR 0 11
29729: PPUSH
29730: LD_VAR 0 12
29734: PPUSH
29735: CALL_OW 554
29739: NOT
29740: OR
29741: IFFALSE 29775
// begin task := Delete ( task , 1 ) ;
29743: LD_ADDR_VAR 0 14
29747: PUSH
29748: LD_VAR 0 14
29752: PPUSH
29753: LD_INT 1
29755: PPUSH
29756: CALL_OW 3
29760: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29761: LD_VAR 0 1
29765: PPUSH
29766: LD_VAR 0 14
29770: PPUSH
29771: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29775: LD_VAR 0 1
29779: PPUSH
29780: CALL_OW 314
29784: NOT
29785: IFFALSE 29622
// end ;
29787: LD_VAR 0 5
29791: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29792: LD_EXP 83
29796: NOT
29797: IFFALSE 29847
29799: GO 29801
29801: DISABLE
// begin initHack := true ;
29802: LD_ADDR_EXP 83
29806: PUSH
29807: LD_INT 1
29809: ST_TO_ADDR
// hackTanks := [ ] ;
29810: LD_ADDR_EXP 84
29814: PUSH
29815: EMPTY
29816: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29817: LD_ADDR_EXP 85
29821: PUSH
29822: EMPTY
29823: ST_TO_ADDR
// hackLimit := 3 ;
29824: LD_ADDR_EXP 86
29828: PUSH
29829: LD_INT 3
29831: ST_TO_ADDR
// hackDist := 12 ;
29832: LD_ADDR_EXP 87
29836: PUSH
29837: LD_INT 12
29839: ST_TO_ADDR
// hackCounter := [ ] ;
29840: LD_ADDR_EXP 88
29844: PUSH
29845: EMPTY
29846: ST_TO_ADDR
// end ;
29847: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29848: LD_EXP 83
29852: PUSH
29853: LD_INT 34
29855: PUSH
29856: LD_INT 99
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PPUSH
29863: CALL_OW 69
29867: AND
29868: IFFALSE 30121
29870: GO 29872
29872: DISABLE
29873: LD_INT 0
29875: PPUSH
29876: PPUSH
// begin enable ;
29877: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29878: LD_ADDR_VAR 0 1
29882: PUSH
29883: LD_INT 34
29885: PUSH
29886: LD_INT 99
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PPUSH
29893: CALL_OW 69
29897: PUSH
29898: FOR_IN
29899: IFFALSE 30119
// begin if not i in hackTanks then
29901: LD_VAR 0 1
29905: PUSH
29906: LD_EXP 84
29910: IN
29911: NOT
29912: IFFALSE 29995
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29914: LD_ADDR_EXP 84
29918: PUSH
29919: LD_EXP 84
29923: PPUSH
29924: LD_EXP 84
29928: PUSH
29929: LD_INT 1
29931: PLUS
29932: PPUSH
29933: LD_VAR 0 1
29937: PPUSH
29938: CALL_OW 1
29942: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29943: LD_ADDR_EXP 85
29947: PUSH
29948: LD_EXP 85
29952: PPUSH
29953: LD_EXP 85
29957: PUSH
29958: LD_INT 1
29960: PLUS
29961: PPUSH
29962: EMPTY
29963: PPUSH
29964: CALL_OW 1
29968: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29969: LD_ADDR_EXP 88
29973: PUSH
29974: LD_EXP 88
29978: PPUSH
29979: LD_EXP 88
29983: PUSH
29984: LD_INT 1
29986: PLUS
29987: PPUSH
29988: EMPTY
29989: PPUSH
29990: CALL_OW 1
29994: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29995: LD_VAR 0 1
29999: PPUSH
30000: CALL_OW 302
30004: NOT
30005: IFFALSE 30018
// begin HackUnlinkAll ( i ) ;
30007: LD_VAR 0 1
30011: PPUSH
30012: CALL 30124 0 1
// continue ;
30016: GO 29898
// end ; HackCheckCapturedStatus ( i ) ;
30018: LD_VAR 0 1
30022: PPUSH
30023: CALL 30567 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30027: LD_ADDR_VAR 0 2
30031: PUSH
30032: LD_INT 81
30034: PUSH
30035: LD_VAR 0 1
30039: PPUSH
30040: CALL_OW 255
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 33
30051: PUSH
30052: LD_INT 3
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 91
30061: PUSH
30062: LD_VAR 0 1
30066: PUSH
30067: LD_EXP 87
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 50
30079: PUSH
30080: EMPTY
30081: LIST
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: PPUSH
30089: CALL_OW 69
30093: ST_TO_ADDR
// if not tmp then
30094: LD_VAR 0 2
30098: NOT
30099: IFFALSE 30103
// continue ;
30101: GO 29898
// HackLink ( i , tmp ) ;
30103: LD_VAR 0 1
30107: PPUSH
30108: LD_VAR 0 2
30112: PPUSH
30113: CALL 30260 0 2
// end ;
30117: GO 29898
30119: POP
30120: POP
// end ;
30121: PPOPN 2
30123: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30124: LD_INT 0
30126: PPUSH
30127: PPUSH
30128: PPUSH
// if not hack in hackTanks then
30129: LD_VAR 0 1
30133: PUSH
30134: LD_EXP 84
30138: IN
30139: NOT
30140: IFFALSE 30144
// exit ;
30142: GO 30255
// index := GetElementIndex ( hackTanks , hack ) ;
30144: LD_ADDR_VAR 0 4
30148: PUSH
30149: LD_EXP 84
30153: PPUSH
30154: LD_VAR 0 1
30158: PPUSH
30159: CALL 37697 0 2
30163: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30164: LD_EXP 85
30168: PUSH
30169: LD_VAR 0 4
30173: ARRAY
30174: IFFALSE 30255
// begin for i in hackTanksCaptured [ index ] do
30176: LD_ADDR_VAR 0 3
30180: PUSH
30181: LD_EXP 85
30185: PUSH
30186: LD_VAR 0 4
30190: ARRAY
30191: PUSH
30192: FOR_IN
30193: IFFALSE 30219
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30195: LD_VAR 0 3
30199: PUSH
30200: LD_INT 1
30202: ARRAY
30203: PPUSH
30204: LD_VAR 0 3
30208: PUSH
30209: LD_INT 2
30211: ARRAY
30212: PPUSH
30213: CALL_OW 235
30217: GO 30192
30219: POP
30220: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30221: LD_ADDR_EXP 85
30225: PUSH
30226: LD_EXP 85
30230: PPUSH
30231: LD_VAR 0 4
30235: PPUSH
30236: EMPTY
30237: PPUSH
30238: CALL_OW 1
30242: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30243: LD_VAR 0 1
30247: PPUSH
30248: LD_INT 0
30250: PPUSH
30251: CALL_OW 505
// end ; end ;
30255: LD_VAR 0 2
30259: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30260: LD_INT 0
30262: PPUSH
30263: PPUSH
30264: PPUSH
// if not hack in hackTanks or not vehicles then
30265: LD_VAR 0 1
30269: PUSH
30270: LD_EXP 84
30274: IN
30275: NOT
30276: PUSH
30277: LD_VAR 0 2
30281: NOT
30282: OR
30283: IFFALSE 30287
// exit ;
30285: GO 30562
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30287: LD_ADDR_VAR 0 2
30291: PUSH
30292: LD_VAR 0 1
30296: PPUSH
30297: LD_VAR 0 2
30301: PPUSH
30302: LD_INT 1
30304: PPUSH
30305: LD_INT 1
30307: PPUSH
30308: CALL 38347 0 4
30312: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30313: LD_ADDR_VAR 0 5
30317: PUSH
30318: LD_EXP 84
30322: PPUSH
30323: LD_VAR 0 1
30327: PPUSH
30328: CALL 37697 0 2
30332: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30333: LD_EXP 85
30337: PUSH
30338: LD_VAR 0 5
30342: ARRAY
30343: PUSH
30344: LD_EXP 86
30348: LESS
30349: IFFALSE 30538
// begin for i := 1 to vehicles do
30351: LD_ADDR_VAR 0 4
30355: PUSH
30356: DOUBLE
30357: LD_INT 1
30359: DEC
30360: ST_TO_ADDR
30361: LD_VAR 0 2
30365: PUSH
30366: FOR_TO
30367: IFFALSE 30536
// begin if hackTanksCaptured [ index ] = hackLimit then
30369: LD_EXP 85
30373: PUSH
30374: LD_VAR 0 5
30378: ARRAY
30379: PUSH
30380: LD_EXP 86
30384: EQUAL
30385: IFFALSE 30389
// break ;
30387: GO 30536
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30389: LD_ADDR_EXP 88
30393: PUSH
30394: LD_EXP 88
30398: PPUSH
30399: LD_VAR 0 5
30403: PPUSH
30404: LD_EXP 88
30408: PUSH
30409: LD_VAR 0 5
30413: ARRAY
30414: PUSH
30415: LD_INT 1
30417: PLUS
30418: PPUSH
30419: CALL_OW 1
30423: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30424: LD_ADDR_EXP 85
30428: PUSH
30429: LD_EXP 85
30433: PPUSH
30434: LD_VAR 0 5
30438: PUSH
30439: LD_EXP 85
30443: PUSH
30444: LD_VAR 0 5
30448: ARRAY
30449: PUSH
30450: LD_INT 1
30452: PLUS
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PPUSH
30458: LD_VAR 0 2
30462: PUSH
30463: LD_VAR 0 4
30467: ARRAY
30468: PUSH
30469: LD_VAR 0 2
30473: PUSH
30474: LD_VAR 0 4
30478: ARRAY
30479: PPUSH
30480: CALL_OW 255
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PPUSH
30489: CALL 37912 0 3
30493: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30494: LD_VAR 0 2
30498: PUSH
30499: LD_VAR 0 4
30503: ARRAY
30504: PPUSH
30505: LD_VAR 0 1
30509: PPUSH
30510: CALL_OW 255
30514: PPUSH
30515: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30519: LD_VAR 0 2
30523: PUSH
30524: LD_VAR 0 4
30528: ARRAY
30529: PPUSH
30530: CALL_OW 141
// end ;
30534: GO 30366
30536: POP
30537: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30538: LD_VAR 0 1
30542: PPUSH
30543: LD_EXP 85
30547: PUSH
30548: LD_VAR 0 5
30552: ARRAY
30553: PUSH
30554: LD_INT 0
30556: PLUS
30557: PPUSH
30558: CALL_OW 505
// end ;
30562: LD_VAR 0 3
30566: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30567: LD_INT 0
30569: PPUSH
30570: PPUSH
30571: PPUSH
30572: PPUSH
// if not hack in hackTanks then
30573: LD_VAR 0 1
30577: PUSH
30578: LD_EXP 84
30582: IN
30583: NOT
30584: IFFALSE 30588
// exit ;
30586: GO 30828
// index := GetElementIndex ( hackTanks , hack ) ;
30588: LD_ADDR_VAR 0 4
30592: PUSH
30593: LD_EXP 84
30597: PPUSH
30598: LD_VAR 0 1
30602: PPUSH
30603: CALL 37697 0 2
30607: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30608: LD_ADDR_VAR 0 3
30612: PUSH
30613: DOUBLE
30614: LD_EXP 85
30618: PUSH
30619: LD_VAR 0 4
30623: ARRAY
30624: INC
30625: ST_TO_ADDR
30626: LD_INT 1
30628: PUSH
30629: FOR_DOWNTO
30630: IFFALSE 30802
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30632: LD_ADDR_VAR 0 5
30636: PUSH
30637: LD_EXP 85
30641: PUSH
30642: LD_VAR 0 4
30646: ARRAY
30647: PUSH
30648: LD_VAR 0 3
30652: ARRAY
30653: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30654: LD_VAR 0 5
30658: PUSH
30659: LD_INT 1
30661: ARRAY
30662: PPUSH
30663: CALL_OW 302
30667: NOT
30668: PUSH
30669: LD_VAR 0 5
30673: PUSH
30674: LD_INT 1
30676: ARRAY
30677: PPUSH
30678: CALL_OW 255
30682: PUSH
30683: LD_VAR 0 1
30687: PPUSH
30688: CALL_OW 255
30692: NONEQUAL
30693: OR
30694: IFFALSE 30800
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30696: LD_VAR 0 5
30700: PUSH
30701: LD_INT 1
30703: ARRAY
30704: PPUSH
30705: CALL_OW 305
30709: PUSH
30710: LD_VAR 0 5
30714: PUSH
30715: LD_INT 1
30717: ARRAY
30718: PPUSH
30719: CALL_OW 255
30723: PUSH
30724: LD_VAR 0 1
30728: PPUSH
30729: CALL_OW 255
30733: EQUAL
30734: AND
30735: IFFALSE 30759
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30737: LD_VAR 0 5
30741: PUSH
30742: LD_INT 1
30744: ARRAY
30745: PPUSH
30746: LD_VAR 0 5
30750: PUSH
30751: LD_INT 2
30753: ARRAY
30754: PPUSH
30755: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30759: LD_ADDR_EXP 85
30763: PUSH
30764: LD_EXP 85
30768: PPUSH
30769: LD_VAR 0 4
30773: PPUSH
30774: LD_EXP 85
30778: PUSH
30779: LD_VAR 0 4
30783: ARRAY
30784: PPUSH
30785: LD_VAR 0 3
30789: PPUSH
30790: CALL_OW 3
30794: PPUSH
30795: CALL_OW 1
30799: ST_TO_ADDR
// end ; end ;
30800: GO 30629
30802: POP
30803: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30804: LD_VAR 0 1
30808: PPUSH
30809: LD_EXP 85
30813: PUSH
30814: LD_VAR 0 4
30818: ARRAY
30819: PUSH
30820: LD_INT 0
30822: PLUS
30823: PPUSH
30824: CALL_OW 505
// end ;
30828: LD_VAR 0 2
30832: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30833: LD_INT 0
30835: PPUSH
30836: PPUSH
30837: PPUSH
30838: PPUSH
// if not hack in hackTanks then
30839: LD_VAR 0 1
30843: PUSH
30844: LD_EXP 84
30848: IN
30849: NOT
30850: IFFALSE 30854
// exit ;
30852: GO 30939
// index := GetElementIndex ( hackTanks , hack ) ;
30854: LD_ADDR_VAR 0 5
30858: PUSH
30859: LD_EXP 84
30863: PPUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL 37697 0 2
30873: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30874: LD_ADDR_VAR 0 4
30878: PUSH
30879: DOUBLE
30880: LD_INT 1
30882: DEC
30883: ST_TO_ADDR
30884: LD_EXP 85
30888: PUSH
30889: LD_VAR 0 5
30893: ARRAY
30894: PUSH
30895: FOR_TO
30896: IFFALSE 30937
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30898: LD_EXP 85
30902: PUSH
30903: LD_VAR 0 5
30907: ARRAY
30908: PUSH
30909: LD_VAR 0 4
30913: ARRAY
30914: PUSH
30915: LD_INT 1
30917: ARRAY
30918: PUSH
30919: LD_VAR 0 2
30923: EQUAL
30924: IFFALSE 30935
// KillUnit ( vehicle ) ;
30926: LD_VAR 0 2
30930: PPUSH
30931: CALL_OW 66
30935: GO 30895
30937: POP
30938: POP
// end ;
30939: LD_VAR 0 3
30943: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30944: LD_EXP 89
30948: NOT
30949: IFFALSE 30984
30951: GO 30953
30953: DISABLE
// begin initMiner := true ;
30954: LD_ADDR_EXP 89
30958: PUSH
30959: LD_INT 1
30961: ST_TO_ADDR
// minersList := [ ] ;
30962: LD_ADDR_EXP 90
30966: PUSH
30967: EMPTY
30968: ST_TO_ADDR
// minerMinesList := [ ] ;
30969: LD_ADDR_EXP 91
30973: PUSH
30974: EMPTY
30975: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30976: LD_ADDR_EXP 92
30980: PUSH
30981: LD_INT 5
30983: ST_TO_ADDR
// end ;
30984: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30985: LD_EXP 89
30989: PUSH
30990: LD_INT 34
30992: PUSH
30993: LD_INT 81
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PPUSH
31000: CALL_OW 69
31004: AND
31005: IFFALSE 31466
31007: GO 31009
31009: DISABLE
31010: LD_INT 0
31012: PPUSH
31013: PPUSH
31014: PPUSH
31015: PPUSH
// begin enable ;
31016: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31017: LD_ADDR_VAR 0 1
31021: PUSH
31022: LD_INT 34
31024: PUSH
31025: LD_INT 81
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PPUSH
31032: CALL_OW 69
31036: PUSH
31037: FOR_IN
31038: IFFALSE 31110
// begin if not i in minersList then
31040: LD_VAR 0 1
31044: PUSH
31045: LD_EXP 90
31049: IN
31050: NOT
31051: IFFALSE 31108
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31053: LD_ADDR_EXP 90
31057: PUSH
31058: LD_EXP 90
31062: PPUSH
31063: LD_EXP 90
31067: PUSH
31068: LD_INT 1
31070: PLUS
31071: PPUSH
31072: LD_VAR 0 1
31076: PPUSH
31077: CALL_OW 1
31081: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31082: LD_ADDR_EXP 91
31086: PUSH
31087: LD_EXP 91
31091: PPUSH
31092: LD_EXP 91
31096: PUSH
31097: LD_INT 1
31099: PLUS
31100: PPUSH
31101: EMPTY
31102: PPUSH
31103: CALL_OW 1
31107: ST_TO_ADDR
// end end ;
31108: GO 31037
31110: POP
31111: POP
// for i := minerMinesList downto 1 do
31112: LD_ADDR_VAR 0 1
31116: PUSH
31117: DOUBLE
31118: LD_EXP 91
31122: INC
31123: ST_TO_ADDR
31124: LD_INT 1
31126: PUSH
31127: FOR_DOWNTO
31128: IFFALSE 31464
// begin if IsLive ( minersList [ i ] ) then
31130: LD_EXP 90
31134: PUSH
31135: LD_VAR 0 1
31139: ARRAY
31140: PPUSH
31141: CALL_OW 300
31145: IFFALSE 31173
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31147: LD_EXP 90
31151: PUSH
31152: LD_VAR 0 1
31156: ARRAY
31157: PPUSH
31158: LD_EXP 91
31162: PUSH
31163: LD_VAR 0 1
31167: ARRAY
31168: PPUSH
31169: CALL_OW 505
// if not minerMinesList [ i ] then
31173: LD_EXP 91
31177: PUSH
31178: LD_VAR 0 1
31182: ARRAY
31183: NOT
31184: IFFALSE 31188
// continue ;
31186: GO 31127
// for j := minerMinesList [ i ] downto 1 do
31188: LD_ADDR_VAR 0 2
31192: PUSH
31193: DOUBLE
31194: LD_EXP 91
31198: PUSH
31199: LD_VAR 0 1
31203: ARRAY
31204: INC
31205: ST_TO_ADDR
31206: LD_INT 1
31208: PUSH
31209: FOR_DOWNTO
31210: IFFALSE 31460
// begin side := GetSide ( minersList [ i ] ) ;
31212: LD_ADDR_VAR 0 3
31216: PUSH
31217: LD_EXP 90
31221: PUSH
31222: LD_VAR 0 1
31226: ARRAY
31227: PPUSH
31228: CALL_OW 255
31232: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31233: LD_ADDR_VAR 0 4
31237: PUSH
31238: LD_EXP 91
31242: PUSH
31243: LD_VAR 0 1
31247: ARRAY
31248: PUSH
31249: LD_VAR 0 2
31253: ARRAY
31254: PUSH
31255: LD_INT 1
31257: ARRAY
31258: PPUSH
31259: LD_EXP 91
31263: PUSH
31264: LD_VAR 0 1
31268: ARRAY
31269: PUSH
31270: LD_VAR 0 2
31274: ARRAY
31275: PUSH
31276: LD_INT 2
31278: ARRAY
31279: PPUSH
31280: CALL_OW 428
31284: ST_TO_ADDR
// if not tmp then
31285: LD_VAR 0 4
31289: NOT
31290: IFFALSE 31294
// continue ;
31292: GO 31209
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31294: LD_VAR 0 4
31298: PUSH
31299: LD_INT 81
31301: PUSH
31302: LD_VAR 0 3
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PPUSH
31311: CALL_OW 69
31315: IN
31316: PUSH
31317: LD_EXP 91
31321: PUSH
31322: LD_VAR 0 1
31326: ARRAY
31327: PUSH
31328: LD_VAR 0 2
31332: ARRAY
31333: PUSH
31334: LD_INT 1
31336: ARRAY
31337: PPUSH
31338: LD_EXP 91
31342: PUSH
31343: LD_VAR 0 1
31347: ARRAY
31348: PUSH
31349: LD_VAR 0 2
31353: ARRAY
31354: PUSH
31355: LD_INT 2
31357: ARRAY
31358: PPUSH
31359: CALL_OW 458
31363: AND
31364: IFFALSE 31458
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31366: LD_EXP 91
31370: PUSH
31371: LD_VAR 0 1
31375: ARRAY
31376: PUSH
31377: LD_VAR 0 2
31381: ARRAY
31382: PUSH
31383: LD_INT 1
31385: ARRAY
31386: PPUSH
31387: LD_EXP 91
31391: PUSH
31392: LD_VAR 0 1
31396: ARRAY
31397: PUSH
31398: LD_VAR 0 2
31402: ARRAY
31403: PUSH
31404: LD_INT 2
31406: ARRAY
31407: PPUSH
31408: LD_VAR 0 3
31412: PPUSH
31413: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31417: LD_ADDR_EXP 91
31421: PUSH
31422: LD_EXP 91
31426: PPUSH
31427: LD_VAR 0 1
31431: PPUSH
31432: LD_EXP 91
31436: PUSH
31437: LD_VAR 0 1
31441: ARRAY
31442: PPUSH
31443: LD_VAR 0 2
31447: PPUSH
31448: CALL_OW 3
31452: PPUSH
31453: CALL_OW 1
31457: ST_TO_ADDR
// end ; end ;
31458: GO 31209
31460: POP
31461: POP
// end ;
31462: GO 31127
31464: POP
31465: POP
// end ;
31466: PPOPN 4
31468: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31469: LD_INT 0
31471: PPUSH
31472: PPUSH
// result := false ;
31473: LD_ADDR_VAR 0 4
31477: PUSH
31478: LD_INT 0
31480: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31481: LD_VAR 0 1
31485: PPUSH
31486: CALL_OW 264
31490: PUSH
31491: LD_INT 81
31493: EQUAL
31494: NOT
31495: IFFALSE 31499
// exit ;
31497: GO 31739
// index := GetElementIndex ( minersList , unit ) ;
31499: LD_ADDR_VAR 0 5
31503: PUSH
31504: LD_EXP 90
31508: PPUSH
31509: LD_VAR 0 1
31513: PPUSH
31514: CALL 37697 0 2
31518: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31519: LD_EXP 91
31523: PUSH
31524: LD_VAR 0 5
31528: ARRAY
31529: PUSH
31530: LD_EXP 92
31534: GREATEREQUAL
31535: IFFALSE 31539
// exit ;
31537: GO 31739
// ComMoveXY ( unit , x , y ) ;
31539: LD_VAR 0 1
31543: PPUSH
31544: LD_VAR 0 2
31548: PPUSH
31549: LD_VAR 0 3
31553: PPUSH
31554: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31558: LD_INT 35
31560: PPUSH
31561: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31565: LD_VAR 0 1
31569: PPUSH
31570: LD_VAR 0 2
31574: PPUSH
31575: LD_VAR 0 3
31579: PPUSH
31580: CALL 69449 0 3
31584: NOT
31585: PUSH
31586: LD_VAR 0 1
31590: PPUSH
31591: CALL_OW 314
31595: AND
31596: IFFALSE 31600
// exit ;
31598: GO 31739
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31600: LD_VAR 0 2
31604: PPUSH
31605: LD_VAR 0 3
31609: PPUSH
31610: CALL_OW 428
31614: PUSH
31615: LD_VAR 0 1
31619: EQUAL
31620: PUSH
31621: LD_VAR 0 1
31625: PPUSH
31626: CALL_OW 314
31630: NOT
31631: AND
31632: IFFALSE 31558
// PlaySoundXY ( x , y , PlantMine ) ;
31634: LD_VAR 0 2
31638: PPUSH
31639: LD_VAR 0 3
31643: PPUSH
31644: LD_STRING PlantMine
31646: PPUSH
31647: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31651: LD_VAR 0 2
31655: PPUSH
31656: LD_VAR 0 3
31660: PPUSH
31661: LD_VAR 0 1
31665: PPUSH
31666: CALL_OW 255
31670: PPUSH
31671: LD_INT 0
31673: PPUSH
31674: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31678: LD_ADDR_EXP 91
31682: PUSH
31683: LD_EXP 91
31687: PPUSH
31688: LD_VAR 0 5
31692: PUSH
31693: LD_EXP 91
31697: PUSH
31698: LD_VAR 0 5
31702: ARRAY
31703: PUSH
31704: LD_INT 1
31706: PLUS
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PPUSH
31712: LD_VAR 0 2
31716: PUSH
31717: LD_VAR 0 3
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PPUSH
31726: CALL 37912 0 3
31730: ST_TO_ADDR
// result := true ;
31731: LD_ADDR_VAR 0 4
31735: PUSH
31736: LD_INT 1
31738: ST_TO_ADDR
// end ;
31739: LD_VAR 0 4
31743: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31744: LD_INT 0
31746: PPUSH
31747: PPUSH
31748: PPUSH
// if not unit in minersList then
31749: LD_VAR 0 1
31753: PUSH
31754: LD_EXP 90
31758: IN
31759: NOT
31760: IFFALSE 31764
// exit ;
31762: GO 32156
// index := GetElementIndex ( minersList , unit ) ;
31764: LD_ADDR_VAR 0 6
31768: PUSH
31769: LD_EXP 90
31773: PPUSH
31774: LD_VAR 0 1
31778: PPUSH
31779: CALL 37697 0 2
31783: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31784: LD_ADDR_VAR 0 5
31788: PUSH
31789: DOUBLE
31790: LD_EXP 91
31794: PUSH
31795: LD_VAR 0 6
31799: ARRAY
31800: INC
31801: ST_TO_ADDR
31802: LD_INT 1
31804: PUSH
31805: FOR_DOWNTO
31806: IFFALSE 31967
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31808: LD_EXP 91
31812: PUSH
31813: LD_VAR 0 6
31817: ARRAY
31818: PUSH
31819: LD_VAR 0 5
31823: ARRAY
31824: PUSH
31825: LD_INT 1
31827: ARRAY
31828: PUSH
31829: LD_VAR 0 2
31833: EQUAL
31834: PUSH
31835: LD_EXP 91
31839: PUSH
31840: LD_VAR 0 6
31844: ARRAY
31845: PUSH
31846: LD_VAR 0 5
31850: ARRAY
31851: PUSH
31852: LD_INT 2
31854: ARRAY
31855: PUSH
31856: LD_VAR 0 3
31860: EQUAL
31861: AND
31862: IFFALSE 31965
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31864: LD_EXP 91
31868: PUSH
31869: LD_VAR 0 6
31873: ARRAY
31874: PUSH
31875: LD_VAR 0 5
31879: ARRAY
31880: PUSH
31881: LD_INT 1
31883: ARRAY
31884: PPUSH
31885: LD_EXP 91
31889: PUSH
31890: LD_VAR 0 6
31894: ARRAY
31895: PUSH
31896: LD_VAR 0 5
31900: ARRAY
31901: PUSH
31902: LD_INT 2
31904: ARRAY
31905: PPUSH
31906: LD_VAR 0 1
31910: PPUSH
31911: CALL_OW 255
31915: PPUSH
31916: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31920: LD_ADDR_EXP 91
31924: PUSH
31925: LD_EXP 91
31929: PPUSH
31930: LD_VAR 0 6
31934: PPUSH
31935: LD_EXP 91
31939: PUSH
31940: LD_VAR 0 6
31944: ARRAY
31945: PPUSH
31946: LD_VAR 0 5
31950: PPUSH
31951: CALL_OW 3
31955: PPUSH
31956: CALL_OW 1
31960: ST_TO_ADDR
// exit ;
31961: POP
31962: POP
31963: GO 32156
// end ; end ;
31965: GO 31805
31967: POP
31968: POP
// for i := minerMinesList [ index ] downto 1 do
31969: LD_ADDR_VAR 0 5
31973: PUSH
31974: DOUBLE
31975: LD_EXP 91
31979: PUSH
31980: LD_VAR 0 6
31984: ARRAY
31985: INC
31986: ST_TO_ADDR
31987: LD_INT 1
31989: PUSH
31990: FOR_DOWNTO
31991: IFFALSE 32154
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31993: LD_EXP 91
31997: PUSH
31998: LD_VAR 0 6
32002: ARRAY
32003: PUSH
32004: LD_VAR 0 5
32008: ARRAY
32009: PUSH
32010: LD_INT 1
32012: ARRAY
32013: PPUSH
32014: LD_EXP 91
32018: PUSH
32019: LD_VAR 0 6
32023: ARRAY
32024: PUSH
32025: LD_VAR 0 5
32029: ARRAY
32030: PUSH
32031: LD_INT 2
32033: ARRAY
32034: PPUSH
32035: LD_VAR 0 2
32039: PPUSH
32040: LD_VAR 0 3
32044: PPUSH
32045: CALL_OW 298
32049: PUSH
32050: LD_INT 6
32052: LESS
32053: IFFALSE 32152
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32055: LD_EXP 91
32059: PUSH
32060: LD_VAR 0 6
32064: ARRAY
32065: PUSH
32066: LD_VAR 0 5
32070: ARRAY
32071: PUSH
32072: LD_INT 1
32074: ARRAY
32075: PPUSH
32076: LD_EXP 91
32080: PUSH
32081: LD_VAR 0 6
32085: ARRAY
32086: PUSH
32087: LD_VAR 0 5
32091: ARRAY
32092: PUSH
32093: LD_INT 2
32095: ARRAY
32096: PPUSH
32097: LD_VAR 0 1
32101: PPUSH
32102: CALL_OW 255
32106: PPUSH
32107: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32111: LD_ADDR_EXP 91
32115: PUSH
32116: LD_EXP 91
32120: PPUSH
32121: LD_VAR 0 6
32125: PPUSH
32126: LD_EXP 91
32130: PUSH
32131: LD_VAR 0 6
32135: ARRAY
32136: PPUSH
32137: LD_VAR 0 5
32141: PPUSH
32142: CALL_OW 3
32146: PPUSH
32147: CALL_OW 1
32151: ST_TO_ADDR
// end ; end ;
32152: GO 31990
32154: POP
32155: POP
// end ;
32156: LD_VAR 0 4
32160: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32161: LD_INT 0
32163: PPUSH
32164: PPUSH
32165: PPUSH
32166: PPUSH
32167: PPUSH
32168: PPUSH
32169: PPUSH
32170: PPUSH
32171: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32172: LD_VAR 0 1
32176: PPUSH
32177: CALL_OW 264
32181: PUSH
32182: LD_INT 81
32184: EQUAL
32185: NOT
32186: PUSH
32187: LD_VAR 0 1
32191: PUSH
32192: LD_EXP 90
32196: IN
32197: NOT
32198: OR
32199: IFFALSE 32203
// exit ;
32201: GO 32525
// index := GetElementIndex ( minersList , unit ) ;
32203: LD_ADDR_VAR 0 6
32207: PUSH
32208: LD_EXP 90
32212: PPUSH
32213: LD_VAR 0 1
32217: PPUSH
32218: CALL 37697 0 2
32222: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32223: LD_ADDR_VAR 0 8
32227: PUSH
32228: LD_EXP 92
32232: PUSH
32233: LD_EXP 91
32237: PUSH
32238: LD_VAR 0 6
32242: ARRAY
32243: MINUS
32244: ST_TO_ADDR
// if not minesFreeAmount then
32245: LD_VAR 0 8
32249: NOT
32250: IFFALSE 32254
// exit ;
32252: GO 32525
// tmp := [ ] ;
32254: LD_ADDR_VAR 0 7
32258: PUSH
32259: EMPTY
32260: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32261: LD_ADDR_VAR 0 5
32265: PUSH
32266: DOUBLE
32267: LD_INT 1
32269: DEC
32270: ST_TO_ADDR
32271: LD_VAR 0 8
32275: PUSH
32276: FOR_TO
32277: IFFALSE 32472
// begin _d := rand ( 0 , 5 ) ;
32279: LD_ADDR_VAR 0 11
32283: PUSH
32284: LD_INT 0
32286: PPUSH
32287: LD_INT 5
32289: PPUSH
32290: CALL_OW 12
32294: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32295: LD_ADDR_VAR 0 12
32299: PUSH
32300: LD_INT 2
32302: PPUSH
32303: LD_INT 6
32305: PPUSH
32306: CALL_OW 12
32310: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32311: LD_ADDR_VAR 0 9
32315: PUSH
32316: LD_VAR 0 2
32320: PPUSH
32321: LD_VAR 0 11
32325: PPUSH
32326: LD_VAR 0 12
32330: PPUSH
32331: CALL_OW 272
32335: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32336: LD_ADDR_VAR 0 10
32340: PUSH
32341: LD_VAR 0 3
32345: PPUSH
32346: LD_VAR 0 11
32350: PPUSH
32351: LD_VAR 0 12
32355: PPUSH
32356: CALL_OW 273
32360: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32361: LD_VAR 0 9
32365: PPUSH
32366: LD_VAR 0 10
32370: PPUSH
32371: CALL_OW 488
32375: PUSH
32376: LD_VAR 0 9
32380: PUSH
32381: LD_VAR 0 10
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_VAR 0 7
32394: IN
32395: NOT
32396: AND
32397: PUSH
32398: LD_VAR 0 9
32402: PPUSH
32403: LD_VAR 0 10
32407: PPUSH
32408: CALL_OW 458
32412: NOT
32413: AND
32414: IFFALSE 32456
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32416: LD_ADDR_VAR 0 7
32420: PUSH
32421: LD_VAR 0 7
32425: PPUSH
32426: LD_VAR 0 7
32430: PUSH
32431: LD_INT 1
32433: PLUS
32434: PPUSH
32435: LD_VAR 0 9
32439: PUSH
32440: LD_VAR 0 10
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PPUSH
32449: CALL_OW 1
32453: ST_TO_ADDR
32454: GO 32470
// i := i - 1 ;
32456: LD_ADDR_VAR 0 5
32460: PUSH
32461: LD_VAR 0 5
32465: PUSH
32466: LD_INT 1
32468: MINUS
32469: ST_TO_ADDR
// end ;
32470: GO 32276
32472: POP
32473: POP
// for i in tmp do
32474: LD_ADDR_VAR 0 5
32478: PUSH
32479: LD_VAR 0 7
32483: PUSH
32484: FOR_IN
32485: IFFALSE 32523
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32487: LD_VAR 0 1
32491: PPUSH
32492: LD_VAR 0 5
32496: PUSH
32497: LD_INT 1
32499: ARRAY
32500: PPUSH
32501: LD_VAR 0 5
32505: PUSH
32506: LD_INT 2
32508: ARRAY
32509: PPUSH
32510: CALL 31469 0 3
32514: NOT
32515: IFFALSE 32521
// exit ;
32517: POP
32518: POP
32519: GO 32525
32521: GO 32484
32523: POP
32524: POP
// end ;
32525: LD_VAR 0 4
32529: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32530: LD_INT 0
32532: PPUSH
32533: PPUSH
32534: PPUSH
32535: PPUSH
32536: PPUSH
32537: PPUSH
32538: PPUSH
// if not GetClass ( unit ) = class_sniper then
32539: LD_VAR 0 1
32543: PPUSH
32544: CALL_OW 257
32548: PUSH
32549: LD_INT 5
32551: EQUAL
32552: NOT
32553: IFFALSE 32557
// exit ;
32555: GO 32945
// dist := 8 ;
32557: LD_ADDR_VAR 0 5
32561: PUSH
32562: LD_INT 8
32564: ST_TO_ADDR
// viewRange := 12 ;
32565: LD_ADDR_VAR 0 7
32569: PUSH
32570: LD_INT 12
32572: ST_TO_ADDR
// side := GetSide ( unit ) ;
32573: LD_ADDR_VAR 0 6
32577: PUSH
32578: LD_VAR 0 1
32582: PPUSH
32583: CALL_OW 255
32587: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32588: LD_INT 61
32590: PPUSH
32591: LD_VAR 0 6
32595: PPUSH
32596: CALL_OW 321
32600: PUSH
32601: LD_INT 2
32603: EQUAL
32604: IFFALSE 32614
// viewRange := 16 ;
32606: LD_ADDR_VAR 0 7
32610: PUSH
32611: LD_INT 16
32613: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32614: LD_VAR 0 1
32618: PPUSH
32619: LD_VAR 0 2
32623: PPUSH
32624: LD_VAR 0 3
32628: PPUSH
32629: CALL_OW 297
32633: PUSH
32634: LD_VAR 0 5
32638: GREATER
32639: IFFALSE 32718
// begin ComMoveXY ( unit , x , y ) ;
32641: LD_VAR 0 1
32645: PPUSH
32646: LD_VAR 0 2
32650: PPUSH
32651: LD_VAR 0 3
32655: PPUSH
32656: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32660: LD_INT 35
32662: PPUSH
32663: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32667: LD_VAR 0 1
32671: PPUSH
32672: LD_VAR 0 2
32676: PPUSH
32677: LD_VAR 0 3
32681: PPUSH
32682: CALL 69449 0 3
32686: NOT
32687: IFFALSE 32691
// exit ;
32689: GO 32945
// until GetDistUnitXY ( unit , x , y ) < dist ;
32691: LD_VAR 0 1
32695: PPUSH
32696: LD_VAR 0 2
32700: PPUSH
32701: LD_VAR 0 3
32705: PPUSH
32706: CALL_OW 297
32710: PUSH
32711: LD_VAR 0 5
32715: LESS
32716: IFFALSE 32660
// end ; ComTurnXY ( unit , x , y ) ;
32718: LD_VAR 0 1
32722: PPUSH
32723: LD_VAR 0 2
32727: PPUSH
32728: LD_VAR 0 3
32732: PPUSH
32733: CALL_OW 118
// wait ( 5 ) ;
32737: LD_INT 5
32739: PPUSH
32740: CALL_OW 67
// _d := GetDir ( unit ) ;
32744: LD_ADDR_VAR 0 10
32748: PUSH
32749: LD_VAR 0 1
32753: PPUSH
32754: CALL_OW 254
32758: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32759: LD_ADDR_VAR 0 8
32763: PUSH
32764: LD_VAR 0 1
32768: PPUSH
32769: CALL_OW 250
32773: PPUSH
32774: LD_VAR 0 10
32778: PPUSH
32779: LD_VAR 0 5
32783: PPUSH
32784: CALL_OW 272
32788: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32789: LD_ADDR_VAR 0 9
32793: PUSH
32794: LD_VAR 0 1
32798: PPUSH
32799: CALL_OW 251
32803: PPUSH
32804: LD_VAR 0 10
32808: PPUSH
32809: LD_VAR 0 5
32813: PPUSH
32814: CALL_OW 273
32818: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32819: LD_VAR 0 8
32823: PPUSH
32824: LD_VAR 0 9
32828: PPUSH
32829: CALL_OW 488
32833: NOT
32834: IFFALSE 32838
// exit ;
32836: GO 32945
// ComAnimCustom ( unit , 1 ) ;
32838: LD_VAR 0 1
32842: PPUSH
32843: LD_INT 1
32845: PPUSH
32846: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32850: LD_VAR 0 8
32854: PPUSH
32855: LD_VAR 0 9
32859: PPUSH
32860: LD_VAR 0 6
32864: PPUSH
32865: LD_VAR 0 7
32869: PPUSH
32870: CALL_OW 330
// repeat wait ( 1 ) ;
32874: LD_INT 1
32876: PPUSH
32877: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32881: LD_VAR 0 1
32885: PPUSH
32886: CALL_OW 316
32890: PUSH
32891: LD_VAR 0 1
32895: PPUSH
32896: CALL_OW 314
32900: OR
32901: PUSH
32902: LD_VAR 0 1
32906: PPUSH
32907: CALL_OW 302
32911: NOT
32912: OR
32913: PUSH
32914: LD_VAR 0 1
32918: PPUSH
32919: CALL_OW 301
32923: OR
32924: IFFALSE 32874
// RemoveSeeing ( _x , _y , side ) ;
32926: LD_VAR 0 8
32930: PPUSH
32931: LD_VAR 0 9
32935: PPUSH
32936: LD_VAR 0 6
32940: PPUSH
32941: CALL_OW 331
// end ; end_of_file
32945: LD_VAR 0 4
32949: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32950: LD_INT 0
32952: PPUSH
32953: PPUSH
// if exist_mode then
32954: LD_VAR 0 2
32958: IFFALSE 32983
// unit := CreateCharacter ( prefix & ident ) else
32960: LD_ADDR_VAR 0 5
32964: PUSH
32965: LD_VAR 0 3
32969: PUSH
32970: LD_VAR 0 1
32974: STR
32975: PPUSH
32976: CALL_OW 34
32980: ST_TO_ADDR
32981: GO 32998
// unit := NewCharacter ( ident ) ;
32983: LD_ADDR_VAR 0 5
32987: PUSH
32988: LD_VAR 0 1
32992: PPUSH
32993: CALL_OW 25
32997: ST_TO_ADDR
// result := unit ;
32998: LD_ADDR_VAR 0 4
33002: PUSH
33003: LD_VAR 0 5
33007: ST_TO_ADDR
// end ;
33008: LD_VAR 0 4
33012: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33013: LD_INT 0
33015: PPUSH
33016: PPUSH
// if not side or not nation then
33017: LD_VAR 0 1
33021: NOT
33022: PUSH
33023: LD_VAR 0 2
33027: NOT
33028: OR
33029: IFFALSE 33033
// exit ;
33031: GO 33801
// case nation of nation_american :
33033: LD_VAR 0 2
33037: PUSH
33038: LD_INT 1
33040: DOUBLE
33041: EQUAL
33042: IFTRUE 33046
33044: GO 33260
33046: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33047: LD_ADDR_VAR 0 4
33051: PUSH
33052: LD_INT 35
33054: PUSH
33055: LD_INT 45
33057: PUSH
33058: LD_INT 46
33060: PUSH
33061: LD_INT 47
33063: PUSH
33064: LD_INT 82
33066: PUSH
33067: LD_INT 83
33069: PUSH
33070: LD_INT 84
33072: PUSH
33073: LD_INT 85
33075: PUSH
33076: LD_INT 86
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: LD_INT 6
33087: PUSH
33088: LD_INT 15
33090: PUSH
33091: LD_INT 16
33093: PUSH
33094: LD_INT 7
33096: PUSH
33097: LD_INT 12
33099: PUSH
33100: LD_INT 13
33102: PUSH
33103: LD_INT 10
33105: PUSH
33106: LD_INT 14
33108: PUSH
33109: LD_INT 20
33111: PUSH
33112: LD_INT 21
33114: PUSH
33115: LD_INT 22
33117: PUSH
33118: LD_INT 25
33120: PUSH
33121: LD_INT 32
33123: PUSH
33124: LD_INT 27
33126: PUSH
33127: LD_INT 36
33129: PUSH
33130: LD_INT 69
33132: PUSH
33133: LD_INT 39
33135: PUSH
33136: LD_INT 34
33138: PUSH
33139: LD_INT 40
33141: PUSH
33142: LD_INT 48
33144: PUSH
33145: LD_INT 49
33147: PUSH
33148: LD_INT 50
33150: PUSH
33151: LD_INT 51
33153: PUSH
33154: LD_INT 52
33156: PUSH
33157: LD_INT 53
33159: PUSH
33160: LD_INT 54
33162: PUSH
33163: LD_INT 55
33165: PUSH
33166: LD_INT 56
33168: PUSH
33169: LD_INT 57
33171: PUSH
33172: LD_INT 58
33174: PUSH
33175: LD_INT 59
33177: PUSH
33178: LD_INT 60
33180: PUSH
33181: LD_INT 61
33183: PUSH
33184: LD_INT 62
33186: PUSH
33187: LD_INT 80
33189: PUSH
33190: LD_INT 82
33192: PUSH
33193: LD_INT 83
33195: PUSH
33196: LD_INT 84
33198: PUSH
33199: LD_INT 85
33201: PUSH
33202: LD_INT 86
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: ST_TO_ADDR
33258: GO 33725
33260: LD_INT 2
33262: DOUBLE
33263: EQUAL
33264: IFTRUE 33268
33266: GO 33494
33268: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33269: LD_ADDR_VAR 0 4
33273: PUSH
33274: LD_INT 35
33276: PUSH
33277: LD_INT 45
33279: PUSH
33280: LD_INT 46
33282: PUSH
33283: LD_INT 47
33285: PUSH
33286: LD_INT 82
33288: PUSH
33289: LD_INT 83
33291: PUSH
33292: LD_INT 84
33294: PUSH
33295: LD_INT 85
33297: PUSH
33298: LD_INT 87
33300: PUSH
33301: LD_INT 70
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: LD_INT 11
33309: PUSH
33310: LD_INT 3
33312: PUSH
33313: LD_INT 4
33315: PUSH
33316: LD_INT 5
33318: PUSH
33319: LD_INT 6
33321: PUSH
33322: LD_INT 15
33324: PUSH
33325: LD_INT 18
33327: PUSH
33328: LD_INT 7
33330: PUSH
33331: LD_INT 17
33333: PUSH
33334: LD_INT 8
33336: PUSH
33337: LD_INT 20
33339: PUSH
33340: LD_INT 21
33342: PUSH
33343: LD_INT 22
33345: PUSH
33346: LD_INT 72
33348: PUSH
33349: LD_INT 26
33351: PUSH
33352: LD_INT 69
33354: PUSH
33355: LD_INT 39
33357: PUSH
33358: LD_INT 40
33360: PUSH
33361: LD_INT 41
33363: PUSH
33364: LD_INT 42
33366: PUSH
33367: LD_INT 43
33369: PUSH
33370: LD_INT 48
33372: PUSH
33373: LD_INT 49
33375: PUSH
33376: LD_INT 50
33378: PUSH
33379: LD_INT 51
33381: PUSH
33382: LD_INT 52
33384: PUSH
33385: LD_INT 53
33387: PUSH
33388: LD_INT 54
33390: PUSH
33391: LD_INT 55
33393: PUSH
33394: LD_INT 56
33396: PUSH
33397: LD_INT 60
33399: PUSH
33400: LD_INT 61
33402: PUSH
33403: LD_INT 62
33405: PUSH
33406: LD_INT 66
33408: PUSH
33409: LD_INT 67
33411: PUSH
33412: LD_INT 68
33414: PUSH
33415: LD_INT 81
33417: PUSH
33418: LD_INT 82
33420: PUSH
33421: LD_INT 83
33423: PUSH
33424: LD_INT 84
33426: PUSH
33427: LD_INT 85
33429: PUSH
33430: LD_INT 87
33432: PUSH
33433: LD_INT 88
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: ST_TO_ADDR
33492: GO 33725
33494: LD_INT 3
33496: DOUBLE
33497: EQUAL
33498: IFTRUE 33502
33500: GO 33724
33502: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33503: LD_ADDR_VAR 0 4
33507: PUSH
33508: LD_INT 46
33510: PUSH
33511: LD_INT 47
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 2
33519: PUSH
33520: LD_INT 82
33522: PUSH
33523: LD_INT 83
33525: PUSH
33526: LD_INT 84
33528: PUSH
33529: LD_INT 85
33531: PUSH
33532: LD_INT 86
33534: PUSH
33535: LD_INT 11
33537: PUSH
33538: LD_INT 9
33540: PUSH
33541: LD_INT 20
33543: PUSH
33544: LD_INT 19
33546: PUSH
33547: LD_INT 21
33549: PUSH
33550: LD_INT 24
33552: PUSH
33553: LD_INT 22
33555: PUSH
33556: LD_INT 25
33558: PUSH
33559: LD_INT 28
33561: PUSH
33562: LD_INT 29
33564: PUSH
33565: LD_INT 30
33567: PUSH
33568: LD_INT 31
33570: PUSH
33571: LD_INT 37
33573: PUSH
33574: LD_INT 38
33576: PUSH
33577: LD_INT 32
33579: PUSH
33580: LD_INT 27
33582: PUSH
33583: LD_INT 33
33585: PUSH
33586: LD_INT 69
33588: PUSH
33589: LD_INT 39
33591: PUSH
33592: LD_INT 34
33594: PUSH
33595: LD_INT 40
33597: PUSH
33598: LD_INT 71
33600: PUSH
33601: LD_INT 23
33603: PUSH
33604: LD_INT 44
33606: PUSH
33607: LD_INT 48
33609: PUSH
33610: LD_INT 49
33612: PUSH
33613: LD_INT 50
33615: PUSH
33616: LD_INT 51
33618: PUSH
33619: LD_INT 52
33621: PUSH
33622: LD_INT 53
33624: PUSH
33625: LD_INT 54
33627: PUSH
33628: LD_INT 55
33630: PUSH
33631: LD_INT 56
33633: PUSH
33634: LD_INT 57
33636: PUSH
33637: LD_INT 58
33639: PUSH
33640: LD_INT 59
33642: PUSH
33643: LD_INT 63
33645: PUSH
33646: LD_INT 64
33648: PUSH
33649: LD_INT 65
33651: PUSH
33652: LD_INT 82
33654: PUSH
33655: LD_INT 83
33657: PUSH
33658: LD_INT 84
33660: PUSH
33661: LD_INT 85
33663: PUSH
33664: LD_INT 86
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: ST_TO_ADDR
33722: GO 33725
33724: POP
// if state > - 1 and state < 3 then
33725: LD_VAR 0 3
33729: PUSH
33730: LD_INT 1
33732: NEG
33733: GREATER
33734: PUSH
33735: LD_VAR 0 3
33739: PUSH
33740: LD_INT 3
33742: LESS
33743: AND
33744: IFFALSE 33801
// for i in result do
33746: LD_ADDR_VAR 0 5
33750: PUSH
33751: LD_VAR 0 4
33755: PUSH
33756: FOR_IN
33757: IFFALSE 33799
// if GetTech ( i , side ) <> state then
33759: LD_VAR 0 5
33763: PPUSH
33764: LD_VAR 0 1
33768: PPUSH
33769: CALL_OW 321
33773: PUSH
33774: LD_VAR 0 3
33778: NONEQUAL
33779: IFFALSE 33797
// result := result diff i ;
33781: LD_ADDR_VAR 0 4
33785: PUSH
33786: LD_VAR 0 4
33790: PUSH
33791: LD_VAR 0 5
33795: DIFF
33796: ST_TO_ADDR
33797: GO 33756
33799: POP
33800: POP
// end ;
33801: LD_VAR 0 4
33805: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33806: LD_INT 0
33808: PPUSH
33809: PPUSH
33810: PPUSH
// result := true ;
33811: LD_ADDR_VAR 0 3
33815: PUSH
33816: LD_INT 1
33818: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33819: LD_ADDR_VAR 0 5
33823: PUSH
33824: LD_VAR 0 2
33828: PPUSH
33829: CALL_OW 480
33833: ST_TO_ADDR
// if not tmp then
33834: LD_VAR 0 5
33838: NOT
33839: IFFALSE 33843
// exit ;
33841: GO 33892
// for i in tmp do
33843: LD_ADDR_VAR 0 4
33847: PUSH
33848: LD_VAR 0 5
33852: PUSH
33853: FOR_IN
33854: IFFALSE 33890
// if GetTech ( i , side ) <> state_researched then
33856: LD_VAR 0 4
33860: PPUSH
33861: LD_VAR 0 1
33865: PPUSH
33866: CALL_OW 321
33870: PUSH
33871: LD_INT 2
33873: NONEQUAL
33874: IFFALSE 33888
// begin result := false ;
33876: LD_ADDR_VAR 0 3
33880: PUSH
33881: LD_INT 0
33883: ST_TO_ADDR
// exit ;
33884: POP
33885: POP
33886: GO 33892
// end ;
33888: GO 33853
33890: POP
33891: POP
// end ;
33892: LD_VAR 0 3
33896: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33897: LD_INT 0
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
33907: PPUSH
33908: PPUSH
33909: PPUSH
33910: PPUSH
33911: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33912: LD_VAR 0 1
33916: NOT
33917: PUSH
33918: LD_VAR 0 1
33922: PPUSH
33923: CALL_OW 257
33927: PUSH
33928: LD_INT 9
33930: NONEQUAL
33931: OR
33932: IFFALSE 33936
// exit ;
33934: GO 34509
// side := GetSide ( unit ) ;
33936: LD_ADDR_VAR 0 9
33940: PUSH
33941: LD_VAR 0 1
33945: PPUSH
33946: CALL_OW 255
33950: ST_TO_ADDR
// tech_space := tech_spacanom ;
33951: LD_ADDR_VAR 0 12
33955: PUSH
33956: LD_INT 29
33958: ST_TO_ADDR
// tech_time := tech_taurad ;
33959: LD_ADDR_VAR 0 13
33963: PUSH
33964: LD_INT 28
33966: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33967: LD_ADDR_VAR 0 11
33971: PUSH
33972: LD_VAR 0 1
33976: PPUSH
33977: CALL_OW 310
33981: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33982: LD_VAR 0 11
33986: PPUSH
33987: CALL_OW 247
33991: PUSH
33992: LD_INT 2
33994: EQUAL
33995: IFFALSE 33999
// exit ;
33997: GO 34509
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33999: LD_ADDR_VAR 0 8
34003: PUSH
34004: LD_INT 81
34006: PUSH
34007: LD_VAR 0 9
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 3
34018: PUSH
34019: LD_INT 21
34021: PUSH
34022: LD_INT 3
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PPUSH
34037: CALL_OW 69
34041: ST_TO_ADDR
// if not tmp then
34042: LD_VAR 0 8
34046: NOT
34047: IFFALSE 34051
// exit ;
34049: GO 34509
// if in_unit then
34051: LD_VAR 0 11
34055: IFFALSE 34079
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34057: LD_ADDR_VAR 0 10
34061: PUSH
34062: LD_VAR 0 8
34066: PPUSH
34067: LD_VAR 0 11
34071: PPUSH
34072: CALL_OW 74
34076: ST_TO_ADDR
34077: GO 34099
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34079: LD_ADDR_VAR 0 10
34083: PUSH
34084: LD_VAR 0 8
34088: PPUSH
34089: LD_VAR 0 1
34093: PPUSH
34094: CALL_OW 74
34098: ST_TO_ADDR
// if not enemy then
34099: LD_VAR 0 10
34103: NOT
34104: IFFALSE 34108
// exit ;
34106: GO 34509
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34108: LD_VAR 0 11
34112: PUSH
34113: LD_VAR 0 11
34117: PPUSH
34118: LD_VAR 0 10
34122: PPUSH
34123: CALL_OW 296
34127: PUSH
34128: LD_INT 13
34130: GREATER
34131: AND
34132: PUSH
34133: LD_VAR 0 1
34137: PPUSH
34138: LD_VAR 0 10
34142: PPUSH
34143: CALL_OW 296
34147: PUSH
34148: LD_INT 12
34150: GREATER
34151: OR
34152: IFFALSE 34156
// exit ;
34154: GO 34509
// missile := [ 1 ] ;
34156: LD_ADDR_VAR 0 14
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: EMPTY
34165: LIST
34166: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34167: LD_VAR 0 9
34171: PPUSH
34172: LD_VAR 0 12
34176: PPUSH
34177: CALL_OW 325
34181: IFFALSE 34210
// missile := Replace ( missile , missile + 1 , 2 ) ;
34183: LD_ADDR_VAR 0 14
34187: PUSH
34188: LD_VAR 0 14
34192: PPUSH
34193: LD_VAR 0 14
34197: PUSH
34198: LD_INT 1
34200: PLUS
34201: PPUSH
34202: LD_INT 2
34204: PPUSH
34205: CALL_OW 1
34209: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34210: LD_VAR 0 9
34214: PPUSH
34215: LD_VAR 0 13
34219: PPUSH
34220: CALL_OW 325
34224: PUSH
34225: LD_VAR 0 10
34229: PPUSH
34230: CALL_OW 255
34234: PPUSH
34235: LD_VAR 0 13
34239: PPUSH
34240: CALL_OW 325
34244: NOT
34245: AND
34246: IFFALSE 34275
// missile := Replace ( missile , missile + 1 , 3 ) ;
34248: LD_ADDR_VAR 0 14
34252: PUSH
34253: LD_VAR 0 14
34257: PPUSH
34258: LD_VAR 0 14
34262: PUSH
34263: LD_INT 1
34265: PLUS
34266: PPUSH
34267: LD_INT 3
34269: PPUSH
34270: CALL_OW 1
34274: ST_TO_ADDR
// if missile < 2 then
34275: LD_VAR 0 14
34279: PUSH
34280: LD_INT 2
34282: LESS
34283: IFFALSE 34287
// exit ;
34285: GO 34509
// x := GetX ( enemy ) ;
34287: LD_ADDR_VAR 0 4
34291: PUSH
34292: LD_VAR 0 10
34296: PPUSH
34297: CALL_OW 250
34301: ST_TO_ADDR
// y := GetY ( enemy ) ;
34302: LD_ADDR_VAR 0 5
34306: PUSH
34307: LD_VAR 0 10
34311: PPUSH
34312: CALL_OW 251
34316: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34317: LD_ADDR_VAR 0 6
34321: PUSH
34322: LD_VAR 0 4
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PPUSH
34331: LD_INT 1
34333: PPUSH
34334: CALL_OW 12
34338: PLUS
34339: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34340: LD_ADDR_VAR 0 7
34344: PUSH
34345: LD_VAR 0 5
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PPUSH
34354: LD_INT 1
34356: PPUSH
34357: CALL_OW 12
34361: PLUS
34362: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34363: LD_VAR 0 6
34367: PPUSH
34368: LD_VAR 0 7
34372: PPUSH
34373: CALL_OW 488
34377: NOT
34378: IFFALSE 34400
// begin _x := x ;
34380: LD_ADDR_VAR 0 6
34384: PUSH
34385: LD_VAR 0 4
34389: ST_TO_ADDR
// _y := y ;
34390: LD_ADDR_VAR 0 7
34394: PUSH
34395: LD_VAR 0 5
34399: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34400: LD_ADDR_VAR 0 3
34404: PUSH
34405: LD_INT 1
34407: PPUSH
34408: LD_VAR 0 14
34412: PPUSH
34413: CALL_OW 12
34417: ST_TO_ADDR
// case i of 1 :
34418: LD_VAR 0 3
34422: PUSH
34423: LD_INT 1
34425: DOUBLE
34426: EQUAL
34427: IFTRUE 34431
34429: GO 34448
34431: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34432: LD_VAR 0 1
34436: PPUSH
34437: LD_VAR 0 10
34441: PPUSH
34442: CALL_OW 115
34446: GO 34509
34448: LD_INT 2
34450: DOUBLE
34451: EQUAL
34452: IFTRUE 34456
34454: GO 34478
34456: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34457: LD_VAR 0 1
34461: PPUSH
34462: LD_VAR 0 6
34466: PPUSH
34467: LD_VAR 0 7
34471: PPUSH
34472: CALL_OW 153
34476: GO 34509
34478: LD_INT 3
34480: DOUBLE
34481: EQUAL
34482: IFTRUE 34486
34484: GO 34508
34486: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34487: LD_VAR 0 1
34491: PPUSH
34492: LD_VAR 0 6
34496: PPUSH
34497: LD_VAR 0 7
34501: PPUSH
34502: CALL_OW 154
34506: GO 34509
34508: POP
// end ;
34509: LD_VAR 0 2
34513: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34514: LD_INT 0
34516: PPUSH
34517: PPUSH
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
// if not unit or not building then
34522: LD_VAR 0 1
34526: NOT
34527: PUSH
34528: LD_VAR 0 2
34532: NOT
34533: OR
34534: IFFALSE 34538
// exit ;
34536: GO 34696
// x := GetX ( building ) ;
34538: LD_ADDR_VAR 0 5
34542: PUSH
34543: LD_VAR 0 2
34547: PPUSH
34548: CALL_OW 250
34552: ST_TO_ADDR
// y := GetY ( building ) ;
34553: LD_ADDR_VAR 0 6
34557: PUSH
34558: LD_VAR 0 2
34562: PPUSH
34563: CALL_OW 251
34567: ST_TO_ADDR
// for i = 0 to 5 do
34568: LD_ADDR_VAR 0 4
34572: PUSH
34573: DOUBLE
34574: LD_INT 0
34576: DEC
34577: ST_TO_ADDR
34578: LD_INT 5
34580: PUSH
34581: FOR_TO
34582: IFFALSE 34694
// begin _x := ShiftX ( x , i , 3 ) ;
34584: LD_ADDR_VAR 0 7
34588: PUSH
34589: LD_VAR 0 5
34593: PPUSH
34594: LD_VAR 0 4
34598: PPUSH
34599: LD_INT 3
34601: PPUSH
34602: CALL_OW 272
34606: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34607: LD_ADDR_VAR 0 8
34611: PUSH
34612: LD_VAR 0 6
34616: PPUSH
34617: LD_VAR 0 4
34621: PPUSH
34622: LD_INT 3
34624: PPUSH
34625: CALL_OW 273
34629: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34630: LD_VAR 0 7
34634: PPUSH
34635: LD_VAR 0 8
34639: PPUSH
34640: CALL_OW 488
34644: NOT
34645: IFFALSE 34649
// continue ;
34647: GO 34581
// if HexInfo ( _x , _y ) = 0 then
34649: LD_VAR 0 7
34653: PPUSH
34654: LD_VAR 0 8
34658: PPUSH
34659: CALL_OW 428
34663: PUSH
34664: LD_INT 0
34666: EQUAL
34667: IFFALSE 34692
// begin ComMoveXY ( unit , _x , _y ) ;
34669: LD_VAR 0 1
34673: PPUSH
34674: LD_VAR 0 7
34678: PPUSH
34679: LD_VAR 0 8
34683: PPUSH
34684: CALL_OW 111
// exit ;
34688: POP
34689: POP
34690: GO 34696
// end ; end ;
34692: GO 34581
34694: POP
34695: POP
// end ;
34696: LD_VAR 0 3
34700: RET
// export function ScanBase ( side , base_area ) ; begin
34701: LD_INT 0
34703: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34704: LD_ADDR_VAR 0 3
34708: PUSH
34709: LD_VAR 0 2
34713: PPUSH
34714: LD_INT 81
34716: PUSH
34717: LD_VAR 0 1
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PPUSH
34726: CALL_OW 70
34730: ST_TO_ADDR
// end ;
34731: LD_VAR 0 3
34735: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34736: LD_INT 0
34738: PPUSH
34739: PPUSH
34740: PPUSH
34741: PPUSH
// result := false ;
34742: LD_ADDR_VAR 0 2
34746: PUSH
34747: LD_INT 0
34749: ST_TO_ADDR
// side := GetSide ( unit ) ;
34750: LD_ADDR_VAR 0 3
34754: PUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 255
34764: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34765: LD_ADDR_VAR 0 4
34769: PUSH
34770: LD_VAR 0 1
34774: PPUSH
34775: CALL_OW 248
34779: ST_TO_ADDR
// case nat of 1 :
34780: LD_VAR 0 4
34784: PUSH
34785: LD_INT 1
34787: DOUBLE
34788: EQUAL
34789: IFTRUE 34793
34791: GO 34804
34793: POP
// tech := tech_lassight ; 2 :
34794: LD_ADDR_VAR 0 5
34798: PUSH
34799: LD_INT 12
34801: ST_TO_ADDR
34802: GO 34843
34804: LD_INT 2
34806: DOUBLE
34807: EQUAL
34808: IFTRUE 34812
34810: GO 34823
34812: POP
// tech := tech_mortar ; 3 :
34813: LD_ADDR_VAR 0 5
34817: PUSH
34818: LD_INT 41
34820: ST_TO_ADDR
34821: GO 34843
34823: LD_INT 3
34825: DOUBLE
34826: EQUAL
34827: IFTRUE 34831
34829: GO 34842
34831: POP
// tech := tech_bazooka ; end ;
34832: LD_ADDR_VAR 0 5
34836: PUSH
34837: LD_INT 44
34839: ST_TO_ADDR
34840: GO 34843
34842: POP
// if Researched ( side , tech ) then
34843: LD_VAR 0 3
34847: PPUSH
34848: LD_VAR 0 5
34852: PPUSH
34853: CALL_OW 325
34857: IFFALSE 34884
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34859: LD_ADDR_VAR 0 2
34863: PUSH
34864: LD_INT 5
34866: PUSH
34867: LD_INT 8
34869: PUSH
34870: LD_INT 9
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: LIST
34877: PUSH
34878: LD_VAR 0 4
34882: ARRAY
34883: ST_TO_ADDR
// end ;
34884: LD_VAR 0 2
34888: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34889: LD_INT 0
34891: PPUSH
34892: PPUSH
34893: PPUSH
// if not mines then
34894: LD_VAR 0 2
34898: NOT
34899: IFFALSE 34903
// exit ;
34901: GO 35047
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34903: LD_ADDR_VAR 0 5
34907: PUSH
34908: LD_INT 81
34910: PUSH
34911: LD_VAR 0 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 3
34922: PUSH
34923: LD_INT 21
34925: PUSH
34926: LD_INT 3
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PPUSH
34941: CALL_OW 69
34945: ST_TO_ADDR
// for i in mines do
34946: LD_ADDR_VAR 0 4
34950: PUSH
34951: LD_VAR 0 2
34955: PUSH
34956: FOR_IN
34957: IFFALSE 35045
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34959: LD_VAR 0 4
34963: PUSH
34964: LD_INT 1
34966: ARRAY
34967: PPUSH
34968: LD_VAR 0 4
34972: PUSH
34973: LD_INT 2
34975: ARRAY
34976: PPUSH
34977: CALL_OW 458
34981: NOT
34982: IFFALSE 34986
// continue ;
34984: GO 34956
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34986: LD_VAR 0 4
34990: PUSH
34991: LD_INT 1
34993: ARRAY
34994: PPUSH
34995: LD_VAR 0 4
34999: PUSH
35000: LD_INT 2
35002: ARRAY
35003: PPUSH
35004: CALL_OW 428
35008: PUSH
35009: LD_VAR 0 5
35013: IN
35014: IFFALSE 35043
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35016: LD_VAR 0 4
35020: PUSH
35021: LD_INT 1
35023: ARRAY
35024: PPUSH
35025: LD_VAR 0 4
35029: PUSH
35030: LD_INT 2
35032: ARRAY
35033: PPUSH
35034: LD_VAR 0 1
35038: PPUSH
35039: CALL_OW 456
// end ;
35043: GO 34956
35045: POP
35046: POP
// end ;
35047: LD_VAR 0 3
35051: RET
// export function Count ( array ) ; begin
35052: LD_INT 0
35054: PPUSH
// result := array + 0 ;
35055: LD_ADDR_VAR 0 2
35059: PUSH
35060: LD_VAR 0 1
35064: PUSH
35065: LD_INT 0
35067: PLUS
35068: ST_TO_ADDR
// end ;
35069: LD_VAR 0 2
35073: RET
// export function IsEmpty ( building ) ; begin
35074: LD_INT 0
35076: PPUSH
// if not building then
35077: LD_VAR 0 1
35081: NOT
35082: IFFALSE 35086
// exit ;
35084: GO 35129
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35086: LD_ADDR_VAR 0 2
35090: PUSH
35091: LD_VAR 0 1
35095: PUSH
35096: LD_INT 22
35098: PUSH
35099: LD_VAR 0 1
35103: PPUSH
35104: CALL_OW 255
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 58
35115: PUSH
35116: EMPTY
35117: LIST
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PPUSH
35123: CALL_OW 69
35127: IN
35128: ST_TO_ADDR
// end ;
35129: LD_VAR 0 2
35133: RET
// export function IsNotFull ( building ) ; var places ; begin
35134: LD_INT 0
35136: PPUSH
35137: PPUSH
// if not building then
35138: LD_VAR 0 1
35142: NOT
35143: IFFALSE 35147
// exit ;
35145: GO 35175
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35147: LD_ADDR_VAR 0 2
35151: PUSH
35152: LD_VAR 0 1
35156: PPUSH
35157: LD_INT 3
35159: PUSH
35160: LD_INT 62
35162: PUSH
35163: EMPTY
35164: LIST
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PPUSH
35170: CALL_OW 72
35174: ST_TO_ADDR
// end ;
35175: LD_VAR 0 2
35179: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35180: LD_INT 0
35182: PPUSH
35183: PPUSH
35184: PPUSH
35185: PPUSH
// tmp := [ ] ;
35186: LD_ADDR_VAR 0 3
35190: PUSH
35191: EMPTY
35192: ST_TO_ADDR
// list := [ ] ;
35193: LD_ADDR_VAR 0 5
35197: PUSH
35198: EMPTY
35199: ST_TO_ADDR
// for i = 16 to 25 do
35200: LD_ADDR_VAR 0 4
35204: PUSH
35205: DOUBLE
35206: LD_INT 16
35208: DEC
35209: ST_TO_ADDR
35210: LD_INT 25
35212: PUSH
35213: FOR_TO
35214: IFFALSE 35287
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35216: LD_ADDR_VAR 0 3
35220: PUSH
35221: LD_VAR 0 3
35225: PUSH
35226: LD_INT 22
35228: PUSH
35229: LD_VAR 0 1
35233: PPUSH
35234: CALL_OW 255
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 91
35245: PUSH
35246: LD_VAR 0 1
35250: PUSH
35251: LD_INT 6
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 30
35261: PUSH
35262: LD_VAR 0 4
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: PUSH
35276: EMPTY
35277: LIST
35278: PPUSH
35279: CALL_OW 69
35283: ADD
35284: ST_TO_ADDR
35285: GO 35213
35287: POP
35288: POP
// for i = 1 to tmp do
35289: LD_ADDR_VAR 0 4
35293: PUSH
35294: DOUBLE
35295: LD_INT 1
35297: DEC
35298: ST_TO_ADDR
35299: LD_VAR 0 3
35303: PUSH
35304: FOR_TO
35305: IFFALSE 35393
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35307: LD_ADDR_VAR 0 5
35311: PUSH
35312: LD_VAR 0 5
35316: PUSH
35317: LD_VAR 0 3
35321: PUSH
35322: LD_VAR 0 4
35326: ARRAY
35327: PPUSH
35328: CALL_OW 266
35332: PUSH
35333: LD_VAR 0 3
35337: PUSH
35338: LD_VAR 0 4
35342: ARRAY
35343: PPUSH
35344: CALL_OW 250
35348: PUSH
35349: LD_VAR 0 3
35353: PUSH
35354: LD_VAR 0 4
35358: ARRAY
35359: PPUSH
35360: CALL_OW 251
35364: PUSH
35365: LD_VAR 0 3
35369: PUSH
35370: LD_VAR 0 4
35374: ARRAY
35375: PPUSH
35376: CALL_OW 254
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: ADD
35390: ST_TO_ADDR
35391: GO 35304
35393: POP
35394: POP
// result := list ;
35395: LD_ADDR_VAR 0 2
35399: PUSH
35400: LD_VAR 0 5
35404: ST_TO_ADDR
// end ;
35405: LD_VAR 0 2
35409: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35410: LD_INT 0
35412: PPUSH
35413: PPUSH
35414: PPUSH
35415: PPUSH
35416: PPUSH
35417: PPUSH
35418: PPUSH
// if not factory then
35419: LD_VAR 0 1
35423: NOT
35424: IFFALSE 35428
// exit ;
35426: GO 36021
// if control = control_apeman then
35428: LD_VAR 0 4
35432: PUSH
35433: LD_INT 5
35435: EQUAL
35436: IFFALSE 35545
// begin tmp := UnitsInside ( factory ) ;
35438: LD_ADDR_VAR 0 8
35442: PUSH
35443: LD_VAR 0 1
35447: PPUSH
35448: CALL_OW 313
35452: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35453: LD_VAR 0 8
35457: PPUSH
35458: LD_INT 25
35460: PUSH
35461: LD_INT 12
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PPUSH
35468: CALL_OW 72
35472: NOT
35473: IFFALSE 35483
// control := control_manual ;
35475: LD_ADDR_VAR 0 4
35479: PUSH
35480: LD_INT 1
35482: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35483: LD_ADDR_VAR 0 8
35487: PUSH
35488: LD_VAR 0 1
35492: PPUSH
35493: CALL 35180 0 1
35497: ST_TO_ADDR
// if tmp then
35498: LD_VAR 0 8
35502: IFFALSE 35545
// begin for i in tmp do
35504: LD_ADDR_VAR 0 7
35508: PUSH
35509: LD_VAR 0 8
35513: PUSH
35514: FOR_IN
35515: IFFALSE 35543
// if i [ 1 ] = b_ext_radio then
35517: LD_VAR 0 7
35521: PUSH
35522: LD_INT 1
35524: ARRAY
35525: PUSH
35526: LD_INT 22
35528: EQUAL
35529: IFFALSE 35541
// begin control := control_remote ;
35531: LD_ADDR_VAR 0 4
35535: PUSH
35536: LD_INT 2
35538: ST_TO_ADDR
// break ;
35539: GO 35543
// end ;
35541: GO 35514
35543: POP
35544: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35545: LD_VAR 0 1
35549: PPUSH
35550: LD_VAR 0 2
35554: PPUSH
35555: LD_VAR 0 3
35559: PPUSH
35560: LD_VAR 0 4
35564: PPUSH
35565: LD_VAR 0 5
35569: PPUSH
35570: CALL_OW 448
35574: IFFALSE 35609
// begin result := [ chassis , engine , control , weapon ] ;
35576: LD_ADDR_VAR 0 6
35580: PUSH
35581: LD_VAR 0 2
35585: PUSH
35586: LD_VAR 0 3
35590: PUSH
35591: LD_VAR 0 4
35595: PUSH
35596: LD_VAR 0 5
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: ST_TO_ADDR
// exit ;
35607: GO 36021
// end ; _chassis := AvailableChassisList ( factory ) ;
35609: LD_ADDR_VAR 0 9
35613: PUSH
35614: LD_VAR 0 1
35618: PPUSH
35619: CALL_OW 475
35623: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35624: LD_ADDR_VAR 0 11
35628: PUSH
35629: LD_VAR 0 1
35633: PPUSH
35634: CALL_OW 476
35638: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35639: LD_ADDR_VAR 0 12
35643: PUSH
35644: LD_VAR 0 1
35648: PPUSH
35649: CALL_OW 477
35653: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35654: LD_ADDR_VAR 0 10
35658: PUSH
35659: LD_VAR 0 1
35663: PPUSH
35664: CALL_OW 478
35668: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35669: LD_VAR 0 9
35673: NOT
35674: PUSH
35675: LD_VAR 0 11
35679: NOT
35680: OR
35681: PUSH
35682: LD_VAR 0 12
35686: NOT
35687: OR
35688: PUSH
35689: LD_VAR 0 10
35693: NOT
35694: OR
35695: IFFALSE 35730
// begin result := [ chassis , engine , control , weapon ] ;
35697: LD_ADDR_VAR 0 6
35701: PUSH
35702: LD_VAR 0 2
35706: PUSH
35707: LD_VAR 0 3
35711: PUSH
35712: LD_VAR 0 4
35716: PUSH
35717: LD_VAR 0 5
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: ST_TO_ADDR
// exit ;
35728: GO 36021
// end ; if not chassis in _chassis then
35730: LD_VAR 0 2
35734: PUSH
35735: LD_VAR 0 9
35739: IN
35740: NOT
35741: IFFALSE 35767
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35743: LD_ADDR_VAR 0 2
35747: PUSH
35748: LD_VAR 0 9
35752: PUSH
35753: LD_INT 1
35755: PPUSH
35756: LD_VAR 0 9
35760: PPUSH
35761: CALL_OW 12
35765: ARRAY
35766: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35767: LD_VAR 0 2
35771: PPUSH
35772: LD_VAR 0 3
35776: PPUSH
35777: CALL 36026 0 2
35781: NOT
35782: IFFALSE 35841
// repeat engine := _engine [ 1 ] ;
35784: LD_ADDR_VAR 0 3
35788: PUSH
35789: LD_VAR 0 11
35793: PUSH
35794: LD_INT 1
35796: ARRAY
35797: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35798: LD_ADDR_VAR 0 11
35802: PUSH
35803: LD_VAR 0 11
35807: PPUSH
35808: LD_INT 1
35810: PPUSH
35811: CALL_OW 3
35815: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35816: LD_VAR 0 2
35820: PPUSH
35821: LD_VAR 0 3
35825: PPUSH
35826: CALL 36026 0 2
35830: PUSH
35831: LD_VAR 0 11
35835: PUSH
35836: EMPTY
35837: EQUAL
35838: OR
35839: IFFALSE 35784
// if not control in _control then
35841: LD_VAR 0 4
35845: PUSH
35846: LD_VAR 0 12
35850: IN
35851: NOT
35852: IFFALSE 35878
// control := _control [ rand ( 1 , _control ) ] ;
35854: LD_ADDR_VAR 0 4
35858: PUSH
35859: LD_VAR 0 12
35863: PUSH
35864: LD_INT 1
35866: PPUSH
35867: LD_VAR 0 12
35871: PPUSH
35872: CALL_OW 12
35876: ARRAY
35877: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35878: LD_VAR 0 2
35882: PPUSH
35883: LD_VAR 0 5
35887: PPUSH
35888: CALL 36246 0 2
35892: NOT
35893: IFFALSE 35952
// repeat weapon := _weapon [ 1 ] ;
35895: LD_ADDR_VAR 0 5
35899: PUSH
35900: LD_VAR 0 10
35904: PUSH
35905: LD_INT 1
35907: ARRAY
35908: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35909: LD_ADDR_VAR 0 10
35913: PUSH
35914: LD_VAR 0 10
35918: PPUSH
35919: LD_INT 1
35921: PPUSH
35922: CALL_OW 3
35926: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35927: LD_VAR 0 2
35931: PPUSH
35932: LD_VAR 0 5
35936: PPUSH
35937: CALL 36246 0 2
35941: PUSH
35942: LD_VAR 0 10
35946: PUSH
35947: EMPTY
35948: EQUAL
35949: OR
35950: IFFALSE 35895
// result := [ ] ;
35952: LD_ADDR_VAR 0 6
35956: PUSH
35957: EMPTY
35958: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35959: LD_VAR 0 1
35963: PPUSH
35964: LD_VAR 0 2
35968: PPUSH
35969: LD_VAR 0 3
35973: PPUSH
35974: LD_VAR 0 4
35978: PPUSH
35979: LD_VAR 0 5
35983: PPUSH
35984: CALL_OW 448
35988: IFFALSE 36021
// result := [ chassis , engine , control , weapon ] ;
35990: LD_ADDR_VAR 0 6
35994: PUSH
35995: LD_VAR 0 2
35999: PUSH
36000: LD_VAR 0 3
36004: PUSH
36005: LD_VAR 0 4
36009: PUSH
36010: LD_VAR 0 5
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: ST_TO_ADDR
// end ;
36021: LD_VAR 0 6
36025: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36026: LD_INT 0
36028: PPUSH
// if not chassis or not engine then
36029: LD_VAR 0 1
36033: NOT
36034: PUSH
36035: LD_VAR 0 2
36039: NOT
36040: OR
36041: IFFALSE 36045
// exit ;
36043: GO 36241
// case engine of engine_solar :
36045: LD_VAR 0 2
36049: PUSH
36050: LD_INT 2
36052: DOUBLE
36053: EQUAL
36054: IFTRUE 36058
36056: GO 36096
36058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36059: LD_ADDR_VAR 0 3
36063: PUSH
36064: LD_INT 11
36066: PUSH
36067: LD_INT 12
36069: PUSH
36070: LD_INT 13
36072: PUSH
36073: LD_INT 14
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 3
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
36094: GO 36225
36096: LD_INT 1
36098: DOUBLE
36099: EQUAL
36100: IFTRUE 36104
36102: GO 36166
36104: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36105: LD_ADDR_VAR 0 3
36109: PUSH
36110: LD_INT 11
36112: PUSH
36113: LD_INT 12
36115: PUSH
36116: LD_INT 13
36118: PUSH
36119: LD_INT 14
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: LD_INT 2
36127: PUSH
36128: LD_INT 3
36130: PUSH
36131: LD_INT 4
36133: PUSH
36134: LD_INT 5
36136: PUSH
36137: LD_INT 21
36139: PUSH
36140: LD_INT 23
36142: PUSH
36143: LD_INT 22
36145: PUSH
36146: LD_INT 24
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: ST_TO_ADDR
36164: GO 36225
36166: LD_INT 3
36168: DOUBLE
36169: EQUAL
36170: IFTRUE 36174
36172: GO 36224
36174: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36175: LD_ADDR_VAR 0 3
36179: PUSH
36180: LD_INT 13
36182: PUSH
36183: LD_INT 14
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 3
36191: PUSH
36192: LD_INT 4
36194: PUSH
36195: LD_INT 5
36197: PUSH
36198: LD_INT 21
36200: PUSH
36201: LD_INT 22
36203: PUSH
36204: LD_INT 23
36206: PUSH
36207: LD_INT 24
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: ST_TO_ADDR
36222: GO 36225
36224: POP
// result := ( chassis in result ) ;
36225: LD_ADDR_VAR 0 3
36229: PUSH
36230: LD_VAR 0 1
36234: PUSH
36235: LD_VAR 0 3
36239: IN
36240: ST_TO_ADDR
// end ;
36241: LD_VAR 0 3
36245: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36246: LD_INT 0
36248: PPUSH
// if not chassis or not weapon then
36249: LD_VAR 0 1
36253: NOT
36254: PUSH
36255: LD_VAR 0 2
36259: NOT
36260: OR
36261: IFFALSE 36265
// exit ;
36263: GO 37325
// case weapon of us_machine_gun :
36265: LD_VAR 0 2
36269: PUSH
36270: LD_INT 2
36272: DOUBLE
36273: EQUAL
36274: IFTRUE 36278
36276: GO 36308
36278: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36279: LD_ADDR_VAR 0 3
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: LD_INT 3
36292: PUSH
36293: LD_INT 4
36295: PUSH
36296: LD_INT 5
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: ST_TO_ADDR
36306: GO 37309
36308: LD_INT 3
36310: DOUBLE
36311: EQUAL
36312: IFTRUE 36316
36314: GO 36346
36316: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36317: LD_ADDR_VAR 0 3
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 3
36330: PUSH
36331: LD_INT 4
36333: PUSH
36334: LD_INT 5
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: ST_TO_ADDR
36344: GO 37309
36346: LD_INT 11
36348: DOUBLE
36349: EQUAL
36350: IFTRUE 36354
36352: GO 36384
36354: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36355: LD_ADDR_VAR 0 3
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: LD_INT 3
36368: PUSH
36369: LD_INT 4
36371: PUSH
36372: LD_INT 5
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: ST_TO_ADDR
36382: GO 37309
36384: LD_INT 4
36386: DOUBLE
36387: EQUAL
36388: IFTRUE 36392
36390: GO 36418
36392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36393: LD_ADDR_VAR 0 3
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: LD_INT 3
36403: PUSH
36404: LD_INT 4
36406: PUSH
36407: LD_INT 5
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: ST_TO_ADDR
36416: GO 37309
36418: LD_INT 5
36420: DOUBLE
36421: EQUAL
36422: IFTRUE 36426
36424: GO 36452
36426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36427: LD_ADDR_VAR 0 3
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 3
36437: PUSH
36438: LD_INT 4
36440: PUSH
36441: LD_INT 5
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: ST_TO_ADDR
36450: GO 37309
36452: LD_INT 9
36454: DOUBLE
36455: EQUAL
36456: IFTRUE 36460
36458: GO 36486
36460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36461: LD_ADDR_VAR 0 3
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: LD_INT 4
36474: PUSH
36475: LD_INT 5
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: ST_TO_ADDR
36484: GO 37309
36486: LD_INT 7
36488: DOUBLE
36489: EQUAL
36490: IFTRUE 36494
36492: GO 36520
36494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36495: LD_ADDR_VAR 0 3
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: LD_INT 3
36505: PUSH
36506: LD_INT 4
36508: PUSH
36509: LD_INT 5
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: ST_TO_ADDR
36518: GO 37309
36520: LD_INT 12
36522: DOUBLE
36523: EQUAL
36524: IFTRUE 36528
36526: GO 36554
36528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36529: LD_ADDR_VAR 0 3
36533: PUSH
36534: LD_INT 2
36536: PUSH
36537: LD_INT 3
36539: PUSH
36540: LD_INT 4
36542: PUSH
36543: LD_INT 5
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: ST_TO_ADDR
36552: GO 37309
36554: LD_INT 13
36556: DOUBLE
36557: EQUAL
36558: IFTRUE 36562
36560: GO 36588
36562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36563: LD_ADDR_VAR 0 3
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: LD_INT 3
36573: PUSH
36574: LD_INT 4
36576: PUSH
36577: LD_INT 5
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: ST_TO_ADDR
36586: GO 37309
36588: LD_INT 14
36590: DOUBLE
36591: EQUAL
36592: IFTRUE 36596
36594: GO 36614
36596: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36597: LD_ADDR_VAR 0 3
36601: PUSH
36602: LD_INT 4
36604: PUSH
36605: LD_INT 5
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: ST_TO_ADDR
36612: GO 37309
36614: LD_INT 6
36616: DOUBLE
36617: EQUAL
36618: IFTRUE 36622
36620: GO 36640
36622: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36623: LD_ADDR_VAR 0 3
36627: PUSH
36628: LD_INT 4
36630: PUSH
36631: LD_INT 5
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: ST_TO_ADDR
36638: GO 37309
36640: LD_INT 10
36642: DOUBLE
36643: EQUAL
36644: IFTRUE 36648
36646: GO 36666
36648: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36649: LD_ADDR_VAR 0 3
36653: PUSH
36654: LD_INT 4
36656: PUSH
36657: LD_INT 5
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: ST_TO_ADDR
36664: GO 37309
36666: LD_INT 22
36668: DOUBLE
36669: EQUAL
36670: IFTRUE 36674
36672: GO 36700
36674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36675: LD_ADDR_VAR 0 3
36679: PUSH
36680: LD_INT 11
36682: PUSH
36683: LD_INT 12
36685: PUSH
36686: LD_INT 13
36688: PUSH
36689: LD_INT 14
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: ST_TO_ADDR
36698: GO 37309
36700: LD_INT 23
36702: DOUBLE
36703: EQUAL
36704: IFTRUE 36708
36706: GO 36734
36708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36709: LD_ADDR_VAR 0 3
36713: PUSH
36714: LD_INT 11
36716: PUSH
36717: LD_INT 12
36719: PUSH
36720: LD_INT 13
36722: PUSH
36723: LD_INT 14
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: ST_TO_ADDR
36732: GO 37309
36734: LD_INT 24
36736: DOUBLE
36737: EQUAL
36738: IFTRUE 36742
36740: GO 36768
36742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36743: LD_ADDR_VAR 0 3
36747: PUSH
36748: LD_INT 11
36750: PUSH
36751: LD_INT 12
36753: PUSH
36754: LD_INT 13
36756: PUSH
36757: LD_INT 14
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: ST_TO_ADDR
36766: GO 37309
36768: LD_INT 30
36770: DOUBLE
36771: EQUAL
36772: IFTRUE 36776
36774: GO 36802
36776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36777: LD_ADDR_VAR 0 3
36781: PUSH
36782: LD_INT 11
36784: PUSH
36785: LD_INT 12
36787: PUSH
36788: LD_INT 13
36790: PUSH
36791: LD_INT 14
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: ST_TO_ADDR
36800: GO 37309
36802: LD_INT 25
36804: DOUBLE
36805: EQUAL
36806: IFTRUE 36810
36808: GO 36828
36810: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36811: LD_ADDR_VAR 0 3
36815: PUSH
36816: LD_INT 13
36818: PUSH
36819: LD_INT 14
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: ST_TO_ADDR
36826: GO 37309
36828: LD_INT 27
36830: DOUBLE
36831: EQUAL
36832: IFTRUE 36836
36834: GO 36854
36836: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36837: LD_ADDR_VAR 0 3
36841: PUSH
36842: LD_INT 13
36844: PUSH
36845: LD_INT 14
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: ST_TO_ADDR
36852: GO 37309
36854: LD_INT 92
36856: DOUBLE
36857: EQUAL
36858: IFTRUE 36862
36860: GO 36888
36862: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36863: LD_ADDR_VAR 0 3
36867: PUSH
36868: LD_INT 11
36870: PUSH
36871: LD_INT 12
36873: PUSH
36874: LD_INT 13
36876: PUSH
36877: LD_INT 14
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: ST_TO_ADDR
36886: GO 37309
36888: LD_INT 28
36890: DOUBLE
36891: EQUAL
36892: IFTRUE 36896
36894: GO 36914
36896: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36897: LD_ADDR_VAR 0 3
36901: PUSH
36902: LD_INT 13
36904: PUSH
36905: LD_INT 14
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: ST_TO_ADDR
36912: GO 37309
36914: LD_INT 29
36916: DOUBLE
36917: EQUAL
36918: IFTRUE 36922
36920: GO 36940
36922: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36923: LD_ADDR_VAR 0 3
36927: PUSH
36928: LD_INT 13
36930: PUSH
36931: LD_INT 14
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: ST_TO_ADDR
36938: GO 37309
36940: LD_INT 31
36942: DOUBLE
36943: EQUAL
36944: IFTRUE 36948
36946: GO 36966
36948: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36949: LD_ADDR_VAR 0 3
36953: PUSH
36954: LD_INT 13
36956: PUSH
36957: LD_INT 14
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: ST_TO_ADDR
36964: GO 37309
36966: LD_INT 26
36968: DOUBLE
36969: EQUAL
36970: IFTRUE 36974
36972: GO 36992
36974: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36975: LD_ADDR_VAR 0 3
36979: PUSH
36980: LD_INT 13
36982: PUSH
36983: LD_INT 14
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: ST_TO_ADDR
36990: GO 37309
36992: LD_INT 42
36994: DOUBLE
36995: EQUAL
36996: IFTRUE 37000
36998: GO 37026
37000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37001: LD_ADDR_VAR 0 3
37005: PUSH
37006: LD_INT 21
37008: PUSH
37009: LD_INT 22
37011: PUSH
37012: LD_INT 23
37014: PUSH
37015: LD_INT 24
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: ST_TO_ADDR
37024: GO 37309
37026: LD_INT 43
37028: DOUBLE
37029: EQUAL
37030: IFTRUE 37034
37032: GO 37060
37034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37035: LD_ADDR_VAR 0 3
37039: PUSH
37040: LD_INT 21
37042: PUSH
37043: LD_INT 22
37045: PUSH
37046: LD_INT 23
37048: PUSH
37049: LD_INT 24
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: ST_TO_ADDR
37058: GO 37309
37060: LD_INT 44
37062: DOUBLE
37063: EQUAL
37064: IFTRUE 37068
37066: GO 37094
37068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37069: LD_ADDR_VAR 0 3
37073: PUSH
37074: LD_INT 21
37076: PUSH
37077: LD_INT 22
37079: PUSH
37080: LD_INT 23
37082: PUSH
37083: LD_INT 24
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: ST_TO_ADDR
37092: GO 37309
37094: LD_INT 45
37096: DOUBLE
37097: EQUAL
37098: IFTRUE 37102
37100: GO 37128
37102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37103: LD_ADDR_VAR 0 3
37107: PUSH
37108: LD_INT 21
37110: PUSH
37111: LD_INT 22
37113: PUSH
37114: LD_INT 23
37116: PUSH
37117: LD_INT 24
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: ST_TO_ADDR
37126: GO 37309
37128: LD_INT 49
37130: DOUBLE
37131: EQUAL
37132: IFTRUE 37136
37134: GO 37162
37136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37137: LD_ADDR_VAR 0 3
37141: PUSH
37142: LD_INT 21
37144: PUSH
37145: LD_INT 22
37147: PUSH
37148: LD_INT 23
37150: PUSH
37151: LD_INT 24
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: ST_TO_ADDR
37160: GO 37309
37162: LD_INT 51
37164: DOUBLE
37165: EQUAL
37166: IFTRUE 37170
37168: GO 37196
37170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37171: LD_ADDR_VAR 0 3
37175: PUSH
37176: LD_INT 21
37178: PUSH
37179: LD_INT 22
37181: PUSH
37182: LD_INT 23
37184: PUSH
37185: LD_INT 24
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: ST_TO_ADDR
37194: GO 37309
37196: LD_INT 52
37198: DOUBLE
37199: EQUAL
37200: IFTRUE 37204
37202: GO 37230
37204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37205: LD_ADDR_VAR 0 3
37209: PUSH
37210: LD_INT 21
37212: PUSH
37213: LD_INT 22
37215: PUSH
37216: LD_INT 23
37218: PUSH
37219: LD_INT 24
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: ST_TO_ADDR
37228: GO 37309
37230: LD_INT 53
37232: DOUBLE
37233: EQUAL
37234: IFTRUE 37238
37236: GO 37256
37238: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37239: LD_ADDR_VAR 0 3
37243: PUSH
37244: LD_INT 23
37246: PUSH
37247: LD_INT 24
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: ST_TO_ADDR
37254: GO 37309
37256: LD_INT 46
37258: DOUBLE
37259: EQUAL
37260: IFTRUE 37264
37262: GO 37282
37264: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37265: LD_ADDR_VAR 0 3
37269: PUSH
37270: LD_INT 23
37272: PUSH
37273: LD_INT 24
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: ST_TO_ADDR
37280: GO 37309
37282: LD_INT 47
37284: DOUBLE
37285: EQUAL
37286: IFTRUE 37290
37288: GO 37308
37290: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37291: LD_ADDR_VAR 0 3
37295: PUSH
37296: LD_INT 23
37298: PUSH
37299: LD_INT 24
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: ST_TO_ADDR
37306: GO 37309
37308: POP
// result := ( chassis in result ) ;
37309: LD_ADDR_VAR 0 3
37313: PUSH
37314: LD_VAR 0 1
37318: PUSH
37319: LD_VAR 0 3
37323: IN
37324: ST_TO_ADDR
// end ;
37325: LD_VAR 0 3
37329: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37330: LD_INT 0
37332: PPUSH
37333: PPUSH
37334: PPUSH
37335: PPUSH
37336: PPUSH
37337: PPUSH
37338: PPUSH
// result := array ;
37339: LD_ADDR_VAR 0 5
37343: PUSH
37344: LD_VAR 0 1
37348: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37349: LD_VAR 0 1
37353: NOT
37354: PUSH
37355: LD_VAR 0 2
37359: NOT
37360: OR
37361: PUSH
37362: LD_VAR 0 3
37366: NOT
37367: OR
37368: PUSH
37369: LD_VAR 0 2
37373: PUSH
37374: LD_VAR 0 1
37378: GREATER
37379: OR
37380: PUSH
37381: LD_VAR 0 3
37385: PUSH
37386: LD_VAR 0 1
37390: GREATER
37391: OR
37392: IFFALSE 37396
// exit ;
37394: GO 37692
// if direction then
37396: LD_VAR 0 4
37400: IFFALSE 37464
// begin d := 1 ;
37402: LD_ADDR_VAR 0 9
37406: PUSH
37407: LD_INT 1
37409: ST_TO_ADDR
// if i_from > i_to then
37410: LD_VAR 0 2
37414: PUSH
37415: LD_VAR 0 3
37419: GREATER
37420: IFFALSE 37446
// length := ( array - i_from ) + i_to else
37422: LD_ADDR_VAR 0 11
37426: PUSH
37427: LD_VAR 0 1
37431: PUSH
37432: LD_VAR 0 2
37436: MINUS
37437: PUSH
37438: LD_VAR 0 3
37442: PLUS
37443: ST_TO_ADDR
37444: GO 37462
// length := i_to - i_from ;
37446: LD_ADDR_VAR 0 11
37450: PUSH
37451: LD_VAR 0 3
37455: PUSH
37456: LD_VAR 0 2
37460: MINUS
37461: ST_TO_ADDR
// end else
37462: GO 37525
// begin d := - 1 ;
37464: LD_ADDR_VAR 0 9
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: ST_TO_ADDR
// if i_from > i_to then
37473: LD_VAR 0 2
37477: PUSH
37478: LD_VAR 0 3
37482: GREATER
37483: IFFALSE 37503
// length := i_from - i_to else
37485: LD_ADDR_VAR 0 11
37489: PUSH
37490: LD_VAR 0 2
37494: PUSH
37495: LD_VAR 0 3
37499: MINUS
37500: ST_TO_ADDR
37501: GO 37525
// length := ( array - i_to ) + i_from ;
37503: LD_ADDR_VAR 0 11
37507: PUSH
37508: LD_VAR 0 1
37512: PUSH
37513: LD_VAR 0 3
37517: MINUS
37518: PUSH
37519: LD_VAR 0 2
37523: PLUS
37524: ST_TO_ADDR
// end ; if not length then
37525: LD_VAR 0 11
37529: NOT
37530: IFFALSE 37534
// exit ;
37532: GO 37692
// tmp := array ;
37534: LD_ADDR_VAR 0 10
37538: PUSH
37539: LD_VAR 0 1
37543: ST_TO_ADDR
// for i = 1 to length do
37544: LD_ADDR_VAR 0 6
37548: PUSH
37549: DOUBLE
37550: LD_INT 1
37552: DEC
37553: ST_TO_ADDR
37554: LD_VAR 0 11
37558: PUSH
37559: FOR_TO
37560: IFFALSE 37680
// begin for j = 1 to array do
37562: LD_ADDR_VAR 0 7
37566: PUSH
37567: DOUBLE
37568: LD_INT 1
37570: DEC
37571: ST_TO_ADDR
37572: LD_VAR 0 1
37576: PUSH
37577: FOR_TO
37578: IFFALSE 37666
// begin k := j + d ;
37580: LD_ADDR_VAR 0 8
37584: PUSH
37585: LD_VAR 0 7
37589: PUSH
37590: LD_VAR 0 9
37594: PLUS
37595: ST_TO_ADDR
// if k > array then
37596: LD_VAR 0 8
37600: PUSH
37601: LD_VAR 0 1
37605: GREATER
37606: IFFALSE 37616
// k := 1 ;
37608: LD_ADDR_VAR 0 8
37612: PUSH
37613: LD_INT 1
37615: ST_TO_ADDR
// if not k then
37616: LD_VAR 0 8
37620: NOT
37621: IFFALSE 37633
// k := array ;
37623: LD_ADDR_VAR 0 8
37627: PUSH
37628: LD_VAR 0 1
37632: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37633: LD_ADDR_VAR 0 10
37637: PUSH
37638: LD_VAR 0 10
37642: PPUSH
37643: LD_VAR 0 8
37647: PPUSH
37648: LD_VAR 0 1
37652: PUSH
37653: LD_VAR 0 7
37657: ARRAY
37658: PPUSH
37659: CALL_OW 1
37663: ST_TO_ADDR
// end ;
37664: GO 37577
37666: POP
37667: POP
// array := tmp ;
37668: LD_ADDR_VAR 0 1
37672: PUSH
37673: LD_VAR 0 10
37677: ST_TO_ADDR
// end ;
37678: GO 37559
37680: POP
37681: POP
// result := array ;
37682: LD_ADDR_VAR 0 5
37686: PUSH
37687: LD_VAR 0 1
37691: ST_TO_ADDR
// end ;
37692: LD_VAR 0 5
37696: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37697: LD_INT 0
37699: PPUSH
37700: PPUSH
// result := 0 ;
37701: LD_ADDR_VAR 0 3
37705: PUSH
37706: LD_INT 0
37708: ST_TO_ADDR
// if not array or not value in array then
37709: LD_VAR 0 1
37713: NOT
37714: PUSH
37715: LD_VAR 0 2
37719: PUSH
37720: LD_VAR 0 1
37724: IN
37725: NOT
37726: OR
37727: IFFALSE 37731
// exit ;
37729: GO 37785
// for i = 1 to array do
37731: LD_ADDR_VAR 0 4
37735: PUSH
37736: DOUBLE
37737: LD_INT 1
37739: DEC
37740: ST_TO_ADDR
37741: LD_VAR 0 1
37745: PUSH
37746: FOR_TO
37747: IFFALSE 37783
// if value = array [ i ] then
37749: LD_VAR 0 2
37753: PUSH
37754: LD_VAR 0 1
37758: PUSH
37759: LD_VAR 0 4
37763: ARRAY
37764: EQUAL
37765: IFFALSE 37781
// begin result := i ;
37767: LD_ADDR_VAR 0 3
37771: PUSH
37772: LD_VAR 0 4
37776: ST_TO_ADDR
// exit ;
37777: POP
37778: POP
37779: GO 37785
// end ;
37781: GO 37746
37783: POP
37784: POP
// end ;
37785: LD_VAR 0 3
37789: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37790: LD_INT 0
37792: PPUSH
// vc_chassis := chassis ;
37793: LD_ADDR_OWVAR 37
37797: PUSH
37798: LD_VAR 0 1
37802: ST_TO_ADDR
// vc_engine := engine ;
37803: LD_ADDR_OWVAR 39
37807: PUSH
37808: LD_VAR 0 2
37812: ST_TO_ADDR
// vc_control := control ;
37813: LD_ADDR_OWVAR 38
37817: PUSH
37818: LD_VAR 0 3
37822: ST_TO_ADDR
// vc_weapon := weapon ;
37823: LD_ADDR_OWVAR 40
37827: PUSH
37828: LD_VAR 0 4
37832: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37833: LD_ADDR_OWVAR 41
37837: PUSH
37838: LD_VAR 0 5
37842: ST_TO_ADDR
// end ;
37843: LD_VAR 0 6
37847: RET
// export function WantPlant ( unit ) ; var task ; begin
37848: LD_INT 0
37850: PPUSH
37851: PPUSH
// result := false ;
37852: LD_ADDR_VAR 0 2
37856: PUSH
37857: LD_INT 0
37859: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37860: LD_ADDR_VAR 0 3
37864: PUSH
37865: LD_VAR 0 1
37869: PPUSH
37870: CALL_OW 437
37874: ST_TO_ADDR
// if task then
37875: LD_VAR 0 3
37879: IFFALSE 37907
// if task [ 1 ] [ 1 ] = p then
37881: LD_VAR 0 3
37885: PUSH
37886: LD_INT 1
37888: ARRAY
37889: PUSH
37890: LD_INT 1
37892: ARRAY
37893: PUSH
37894: LD_STRING p
37896: EQUAL
37897: IFFALSE 37907
// result := true ;
37899: LD_ADDR_VAR 0 2
37903: PUSH
37904: LD_INT 1
37906: ST_TO_ADDR
// end ;
37907: LD_VAR 0 2
37911: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37912: LD_INT 0
37914: PPUSH
37915: PPUSH
37916: PPUSH
37917: PPUSH
// if pos < 1 then
37918: LD_VAR 0 2
37922: PUSH
37923: LD_INT 1
37925: LESS
37926: IFFALSE 37930
// exit ;
37928: GO 38233
// if pos = 1 then
37930: LD_VAR 0 2
37934: PUSH
37935: LD_INT 1
37937: EQUAL
37938: IFFALSE 37971
// result := Replace ( arr , pos [ 1 ] , value ) else
37940: LD_ADDR_VAR 0 4
37944: PUSH
37945: LD_VAR 0 1
37949: PPUSH
37950: LD_VAR 0 2
37954: PUSH
37955: LD_INT 1
37957: ARRAY
37958: PPUSH
37959: LD_VAR 0 3
37963: PPUSH
37964: CALL_OW 1
37968: ST_TO_ADDR
37969: GO 38233
// begin tmp := arr ;
37971: LD_ADDR_VAR 0 6
37975: PUSH
37976: LD_VAR 0 1
37980: ST_TO_ADDR
// s_arr := [ tmp ] ;
37981: LD_ADDR_VAR 0 7
37985: PUSH
37986: LD_VAR 0 6
37990: PUSH
37991: EMPTY
37992: LIST
37993: ST_TO_ADDR
// for i = 1 to pos - 1 do
37994: LD_ADDR_VAR 0 5
37998: PUSH
37999: DOUBLE
38000: LD_INT 1
38002: DEC
38003: ST_TO_ADDR
38004: LD_VAR 0 2
38008: PUSH
38009: LD_INT 1
38011: MINUS
38012: PUSH
38013: FOR_TO
38014: IFFALSE 38059
// begin tmp := tmp [ pos [ i ] ] ;
38016: LD_ADDR_VAR 0 6
38020: PUSH
38021: LD_VAR 0 6
38025: PUSH
38026: LD_VAR 0 2
38030: PUSH
38031: LD_VAR 0 5
38035: ARRAY
38036: ARRAY
38037: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38038: LD_ADDR_VAR 0 7
38042: PUSH
38043: LD_VAR 0 7
38047: PUSH
38048: LD_VAR 0 6
38052: PUSH
38053: EMPTY
38054: LIST
38055: ADD
38056: ST_TO_ADDR
// end ;
38057: GO 38013
38059: POP
38060: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38061: LD_ADDR_VAR 0 6
38065: PUSH
38066: LD_VAR 0 6
38070: PPUSH
38071: LD_VAR 0 2
38075: PUSH
38076: LD_VAR 0 2
38080: ARRAY
38081: PPUSH
38082: LD_VAR 0 3
38086: PPUSH
38087: CALL_OW 1
38091: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38092: LD_ADDR_VAR 0 7
38096: PUSH
38097: LD_VAR 0 7
38101: PPUSH
38102: LD_VAR 0 7
38106: PPUSH
38107: LD_VAR 0 6
38111: PPUSH
38112: CALL_OW 1
38116: ST_TO_ADDR
// for i = s_arr downto 2 do
38117: LD_ADDR_VAR 0 5
38121: PUSH
38122: DOUBLE
38123: LD_VAR 0 7
38127: INC
38128: ST_TO_ADDR
38129: LD_INT 2
38131: PUSH
38132: FOR_DOWNTO
38133: IFFALSE 38217
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38135: LD_ADDR_VAR 0 6
38139: PUSH
38140: LD_VAR 0 7
38144: PUSH
38145: LD_VAR 0 5
38149: PUSH
38150: LD_INT 1
38152: MINUS
38153: ARRAY
38154: PPUSH
38155: LD_VAR 0 2
38159: PUSH
38160: LD_VAR 0 5
38164: PUSH
38165: LD_INT 1
38167: MINUS
38168: ARRAY
38169: PPUSH
38170: LD_VAR 0 7
38174: PUSH
38175: LD_VAR 0 5
38179: ARRAY
38180: PPUSH
38181: CALL_OW 1
38185: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38186: LD_ADDR_VAR 0 7
38190: PUSH
38191: LD_VAR 0 7
38195: PPUSH
38196: LD_VAR 0 5
38200: PUSH
38201: LD_INT 1
38203: MINUS
38204: PPUSH
38205: LD_VAR 0 6
38209: PPUSH
38210: CALL_OW 1
38214: ST_TO_ADDR
// end ;
38215: GO 38132
38217: POP
38218: POP
// result := s_arr [ 1 ] ;
38219: LD_ADDR_VAR 0 4
38223: PUSH
38224: LD_VAR 0 7
38228: PUSH
38229: LD_INT 1
38231: ARRAY
38232: ST_TO_ADDR
// end ; end ;
38233: LD_VAR 0 4
38237: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38238: LD_INT 0
38240: PPUSH
38241: PPUSH
// if not list then
38242: LD_VAR 0 1
38246: NOT
38247: IFFALSE 38251
// exit ;
38249: GO 38342
// i := list [ pos1 ] ;
38251: LD_ADDR_VAR 0 5
38255: PUSH
38256: LD_VAR 0 1
38260: PUSH
38261: LD_VAR 0 2
38265: ARRAY
38266: ST_TO_ADDR
// if not i then
38267: LD_VAR 0 5
38271: NOT
38272: IFFALSE 38276
// exit ;
38274: GO 38342
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38276: LD_ADDR_VAR 0 1
38280: PUSH
38281: LD_VAR 0 1
38285: PPUSH
38286: LD_VAR 0 2
38290: PPUSH
38291: LD_VAR 0 1
38295: PUSH
38296: LD_VAR 0 3
38300: ARRAY
38301: PPUSH
38302: CALL_OW 1
38306: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38307: LD_ADDR_VAR 0 1
38311: PUSH
38312: LD_VAR 0 1
38316: PPUSH
38317: LD_VAR 0 3
38321: PPUSH
38322: LD_VAR 0 5
38326: PPUSH
38327: CALL_OW 1
38331: ST_TO_ADDR
// result := list ;
38332: LD_ADDR_VAR 0 4
38336: PUSH
38337: LD_VAR 0 1
38341: ST_TO_ADDR
// end ;
38342: LD_VAR 0 4
38346: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38347: LD_INT 0
38349: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38350: LD_ADDR_VAR 0 5
38354: PUSH
38355: LD_VAR 0 1
38359: PPUSH
38360: CALL_OW 250
38364: PPUSH
38365: LD_VAR 0 1
38369: PPUSH
38370: CALL_OW 251
38374: PPUSH
38375: LD_VAR 0 2
38379: PPUSH
38380: LD_VAR 0 3
38384: PPUSH
38385: LD_VAR 0 4
38389: PPUSH
38390: CALL 38768 0 5
38394: ST_TO_ADDR
// end ;
38395: LD_VAR 0 5
38399: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38400: LD_INT 0
38402: PPUSH
38403: PPUSH
38404: PPUSH
38405: PPUSH
// if not list or not unit then
38406: LD_VAR 0 2
38410: NOT
38411: PUSH
38412: LD_VAR 0 1
38416: NOT
38417: OR
38418: IFFALSE 38422
// exit ;
38420: GO 38763
// result := [ ] ;
38422: LD_ADDR_VAR 0 5
38426: PUSH
38427: EMPTY
38428: ST_TO_ADDR
// for i in list do
38429: LD_ADDR_VAR 0 6
38433: PUSH
38434: LD_VAR 0 2
38438: PUSH
38439: FOR_IN
38440: IFFALSE 38658
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38442: LD_ADDR_VAR 0 8
38446: PUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: LD_VAR 0 6
38456: PUSH
38457: LD_INT 1
38459: ARRAY
38460: PPUSH
38461: LD_VAR 0 6
38465: PUSH
38466: LD_INT 2
38468: ARRAY
38469: PPUSH
38470: CALL_OW 297
38474: ST_TO_ADDR
// if not Count ( result ) then
38475: LD_VAR 0 5
38479: PPUSH
38480: CALL 35052 0 1
38484: NOT
38485: IFFALSE 38518
// begin result := Join ( result , [ i , tmp ] ) ;
38487: LD_ADDR_VAR 0 5
38491: PUSH
38492: LD_VAR 0 5
38496: PPUSH
38497: LD_VAR 0 6
38501: PUSH
38502: LD_VAR 0 8
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PPUSH
38511: CALL 70652 0 2
38515: ST_TO_ADDR
// continue ;
38516: GO 38439
// end ; if result [ result ] [ 2 ] <= tmp then
38518: LD_VAR 0 5
38522: PUSH
38523: LD_VAR 0 5
38527: ARRAY
38528: PUSH
38529: LD_INT 2
38531: ARRAY
38532: PUSH
38533: LD_VAR 0 8
38537: LESSEQUAL
38538: IFFALSE 38571
// result := Join ( result , [ i , tmp ] ) else
38540: LD_ADDR_VAR 0 5
38544: PUSH
38545: LD_VAR 0 5
38549: PPUSH
38550: LD_VAR 0 6
38554: PUSH
38555: LD_VAR 0 8
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PPUSH
38564: CALL 70652 0 2
38568: ST_TO_ADDR
38569: GO 38656
// begin for j := 1 to Count ( result ) do
38571: LD_ADDR_VAR 0 7
38575: PUSH
38576: DOUBLE
38577: LD_INT 1
38579: DEC
38580: ST_TO_ADDR
38581: LD_VAR 0 5
38585: PPUSH
38586: CALL 35052 0 1
38590: PUSH
38591: FOR_TO
38592: IFFALSE 38654
// begin if tmp < result [ j ] [ 2 ] then
38594: LD_VAR 0 8
38598: PUSH
38599: LD_VAR 0 5
38603: PUSH
38604: LD_VAR 0 7
38608: ARRAY
38609: PUSH
38610: LD_INT 2
38612: ARRAY
38613: LESS
38614: IFFALSE 38652
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38616: LD_ADDR_VAR 0 5
38620: PUSH
38621: LD_VAR 0 5
38625: PPUSH
38626: LD_VAR 0 7
38630: PPUSH
38631: LD_VAR 0 6
38635: PUSH
38636: LD_VAR 0 8
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PPUSH
38645: CALL_OW 2
38649: ST_TO_ADDR
// break ;
38650: GO 38654
// end ; end ;
38652: GO 38591
38654: POP
38655: POP
// end ; end ;
38656: GO 38439
38658: POP
38659: POP
// if result and not asc then
38660: LD_VAR 0 5
38664: PUSH
38665: LD_VAR 0 3
38669: NOT
38670: AND
38671: IFFALSE 38688
// result := ReverseArray ( result ) ;
38673: LD_ADDR_VAR 0 5
38677: PUSH
38678: LD_VAR 0 5
38682: PPUSH
38683: CALL 65928 0 1
38687: ST_TO_ADDR
// tmp := [ ] ;
38688: LD_ADDR_VAR 0 8
38692: PUSH
38693: EMPTY
38694: ST_TO_ADDR
// if mode then
38695: LD_VAR 0 4
38699: IFFALSE 38763
// begin for i := 1 to result do
38701: LD_ADDR_VAR 0 6
38705: PUSH
38706: DOUBLE
38707: LD_INT 1
38709: DEC
38710: ST_TO_ADDR
38711: LD_VAR 0 5
38715: PUSH
38716: FOR_TO
38717: IFFALSE 38751
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38719: LD_ADDR_VAR 0 8
38723: PUSH
38724: LD_VAR 0 8
38728: PPUSH
38729: LD_VAR 0 5
38733: PUSH
38734: LD_VAR 0 6
38738: ARRAY
38739: PUSH
38740: LD_INT 1
38742: ARRAY
38743: PPUSH
38744: CALL 70652 0 2
38748: ST_TO_ADDR
38749: GO 38716
38751: POP
38752: POP
// result := tmp ;
38753: LD_ADDR_VAR 0 5
38757: PUSH
38758: LD_VAR 0 8
38762: ST_TO_ADDR
// end ; end ;
38763: LD_VAR 0 5
38767: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38768: LD_INT 0
38770: PPUSH
38771: PPUSH
38772: PPUSH
38773: PPUSH
// if not list then
38774: LD_VAR 0 3
38778: NOT
38779: IFFALSE 38783
// exit ;
38781: GO 39171
// result := [ ] ;
38783: LD_ADDR_VAR 0 6
38787: PUSH
38788: EMPTY
38789: ST_TO_ADDR
// for i in list do
38790: LD_ADDR_VAR 0 7
38794: PUSH
38795: LD_VAR 0 3
38799: PUSH
38800: FOR_IN
38801: IFFALSE 39003
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38803: LD_ADDR_VAR 0 9
38807: PUSH
38808: LD_VAR 0 7
38812: PPUSH
38813: LD_VAR 0 1
38817: PPUSH
38818: LD_VAR 0 2
38822: PPUSH
38823: CALL_OW 297
38827: ST_TO_ADDR
// if not result then
38828: LD_VAR 0 6
38832: NOT
38833: IFFALSE 38859
// result := [ [ i , tmp ] ] else
38835: LD_ADDR_VAR 0 6
38839: PUSH
38840: LD_VAR 0 7
38844: PUSH
38845: LD_VAR 0 9
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: EMPTY
38855: LIST
38856: ST_TO_ADDR
38857: GO 39001
// begin if result [ result ] [ 2 ] < tmp then
38859: LD_VAR 0 6
38863: PUSH
38864: LD_VAR 0 6
38868: ARRAY
38869: PUSH
38870: LD_INT 2
38872: ARRAY
38873: PUSH
38874: LD_VAR 0 9
38878: LESS
38879: IFFALSE 38921
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38881: LD_ADDR_VAR 0 6
38885: PUSH
38886: LD_VAR 0 6
38890: PPUSH
38891: LD_VAR 0 6
38895: PUSH
38896: LD_INT 1
38898: PLUS
38899: PPUSH
38900: LD_VAR 0 7
38904: PUSH
38905: LD_VAR 0 9
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PPUSH
38914: CALL_OW 2
38918: ST_TO_ADDR
38919: GO 39001
// for j = 1 to result do
38921: LD_ADDR_VAR 0 8
38925: PUSH
38926: DOUBLE
38927: LD_INT 1
38929: DEC
38930: ST_TO_ADDR
38931: LD_VAR 0 6
38935: PUSH
38936: FOR_TO
38937: IFFALSE 38999
// begin if tmp < result [ j ] [ 2 ] then
38939: LD_VAR 0 9
38943: PUSH
38944: LD_VAR 0 6
38948: PUSH
38949: LD_VAR 0 8
38953: ARRAY
38954: PUSH
38955: LD_INT 2
38957: ARRAY
38958: LESS
38959: IFFALSE 38997
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38961: LD_ADDR_VAR 0 6
38965: PUSH
38966: LD_VAR 0 6
38970: PPUSH
38971: LD_VAR 0 8
38975: PPUSH
38976: LD_VAR 0 7
38980: PUSH
38981: LD_VAR 0 9
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PPUSH
38990: CALL_OW 2
38994: ST_TO_ADDR
// break ;
38995: GO 38999
// end ; end ;
38997: GO 38936
38999: POP
39000: POP
// end ; end ;
39001: GO 38800
39003: POP
39004: POP
// if result and not asc then
39005: LD_VAR 0 6
39009: PUSH
39010: LD_VAR 0 4
39014: NOT
39015: AND
39016: IFFALSE 39091
// begin tmp := result ;
39018: LD_ADDR_VAR 0 9
39022: PUSH
39023: LD_VAR 0 6
39027: ST_TO_ADDR
// for i = tmp downto 1 do
39028: LD_ADDR_VAR 0 7
39032: PUSH
39033: DOUBLE
39034: LD_VAR 0 9
39038: INC
39039: ST_TO_ADDR
39040: LD_INT 1
39042: PUSH
39043: FOR_DOWNTO
39044: IFFALSE 39089
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39046: LD_ADDR_VAR 0 6
39050: PUSH
39051: LD_VAR 0 6
39055: PPUSH
39056: LD_VAR 0 9
39060: PUSH
39061: LD_VAR 0 7
39065: MINUS
39066: PUSH
39067: LD_INT 1
39069: PLUS
39070: PPUSH
39071: LD_VAR 0 9
39075: PUSH
39076: LD_VAR 0 7
39080: ARRAY
39081: PPUSH
39082: CALL_OW 1
39086: ST_TO_ADDR
39087: GO 39043
39089: POP
39090: POP
// end ; tmp := [ ] ;
39091: LD_ADDR_VAR 0 9
39095: PUSH
39096: EMPTY
39097: ST_TO_ADDR
// if mode then
39098: LD_VAR 0 5
39102: IFFALSE 39171
// begin for i = 1 to result do
39104: LD_ADDR_VAR 0 7
39108: PUSH
39109: DOUBLE
39110: LD_INT 1
39112: DEC
39113: ST_TO_ADDR
39114: LD_VAR 0 6
39118: PUSH
39119: FOR_TO
39120: IFFALSE 39159
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39122: LD_ADDR_VAR 0 9
39126: PUSH
39127: LD_VAR 0 9
39131: PPUSH
39132: LD_VAR 0 7
39136: PPUSH
39137: LD_VAR 0 6
39141: PUSH
39142: LD_VAR 0 7
39146: ARRAY
39147: PUSH
39148: LD_INT 1
39150: ARRAY
39151: PPUSH
39152: CALL_OW 1
39156: ST_TO_ADDR
39157: GO 39119
39159: POP
39160: POP
// result := tmp ;
39161: LD_ADDR_VAR 0 6
39165: PUSH
39166: LD_VAR 0 9
39170: ST_TO_ADDR
// end ; end ;
39171: LD_VAR 0 6
39175: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39176: LD_INT 0
39178: PPUSH
39179: PPUSH
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39184: LD_ADDR_VAR 0 5
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: EMPTY
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: ST_TO_ADDR
// if not x or not y then
39206: LD_VAR 0 2
39210: NOT
39211: PUSH
39212: LD_VAR 0 3
39216: NOT
39217: OR
39218: IFFALSE 39222
// exit ;
39220: GO 40872
// if not range then
39222: LD_VAR 0 4
39226: NOT
39227: IFFALSE 39237
// range := 10 ;
39229: LD_ADDR_VAR 0 4
39233: PUSH
39234: LD_INT 10
39236: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39237: LD_ADDR_VAR 0 8
39241: PUSH
39242: LD_INT 81
39244: PUSH
39245: LD_VAR 0 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 92
39256: PUSH
39257: LD_VAR 0 2
39261: PUSH
39262: LD_VAR 0 3
39266: PUSH
39267: LD_VAR 0 4
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 3
39280: PUSH
39281: LD_INT 21
39283: PUSH
39284: LD_INT 3
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: PPUSH
39300: CALL_OW 69
39304: ST_TO_ADDR
// if not tmp then
39305: LD_VAR 0 8
39309: NOT
39310: IFFALSE 39314
// exit ;
39312: GO 40872
// for i in tmp do
39314: LD_ADDR_VAR 0 6
39318: PUSH
39319: LD_VAR 0 8
39323: PUSH
39324: FOR_IN
39325: IFFALSE 40847
// begin points := [ 0 , 0 , 0 ] ;
39327: LD_ADDR_VAR 0 9
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: ST_TO_ADDR
// bpoints := 1 ;
39346: LD_ADDR_VAR 0 10
39350: PUSH
39351: LD_INT 1
39353: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39354: LD_VAR 0 6
39358: PPUSH
39359: CALL_OW 247
39363: PUSH
39364: LD_INT 1
39366: DOUBLE
39367: EQUAL
39368: IFTRUE 39372
39370: GO 39950
39372: POP
// begin if GetClass ( i ) = 1 then
39373: LD_VAR 0 6
39377: PPUSH
39378: CALL_OW 257
39382: PUSH
39383: LD_INT 1
39385: EQUAL
39386: IFFALSE 39407
// points := [ 10 , 5 , 3 ] ;
39388: LD_ADDR_VAR 0 9
39392: PUSH
39393: LD_INT 10
39395: PUSH
39396: LD_INT 5
39398: PUSH
39399: LD_INT 3
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39407: LD_VAR 0 6
39411: PPUSH
39412: CALL_OW 257
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: LD_INT 3
39422: PUSH
39423: LD_INT 4
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: LIST
39430: IN
39431: IFFALSE 39452
// points := [ 3 , 2 , 1 ] ;
39433: LD_ADDR_VAR 0 9
39437: PUSH
39438: LD_INT 3
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: LIST
39451: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39452: LD_VAR 0 6
39456: PPUSH
39457: CALL_OW 257
39461: PUSH
39462: LD_INT 5
39464: EQUAL
39465: IFFALSE 39486
// points := [ 130 , 5 , 2 ] ;
39467: LD_ADDR_VAR 0 9
39471: PUSH
39472: LD_INT 130
39474: PUSH
39475: LD_INT 5
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39486: LD_VAR 0 6
39490: PPUSH
39491: CALL_OW 257
39495: PUSH
39496: LD_INT 8
39498: EQUAL
39499: IFFALSE 39520
// points := [ 35 , 35 , 30 ] ;
39501: LD_ADDR_VAR 0 9
39505: PUSH
39506: LD_INT 35
39508: PUSH
39509: LD_INT 35
39511: PUSH
39512: LD_INT 30
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: LIST
39519: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39520: LD_VAR 0 6
39524: PPUSH
39525: CALL_OW 257
39529: PUSH
39530: LD_INT 9
39532: EQUAL
39533: IFFALSE 39554
// points := [ 20 , 55 , 40 ] ;
39535: LD_ADDR_VAR 0 9
39539: PUSH
39540: LD_INT 20
39542: PUSH
39543: LD_INT 55
39545: PUSH
39546: LD_INT 40
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: LIST
39553: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39554: LD_VAR 0 6
39558: PPUSH
39559: CALL_OW 257
39563: PUSH
39564: LD_INT 12
39566: PUSH
39567: LD_INT 16
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: IN
39574: IFFALSE 39595
// points := [ 5 , 3 , 2 ] ;
39576: LD_ADDR_VAR 0 9
39580: PUSH
39581: LD_INT 5
39583: PUSH
39584: LD_INT 3
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: LIST
39594: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39595: LD_VAR 0 6
39599: PPUSH
39600: CALL_OW 257
39604: PUSH
39605: LD_INT 17
39607: EQUAL
39608: IFFALSE 39629
// points := [ 100 , 50 , 75 ] ;
39610: LD_ADDR_VAR 0 9
39614: PUSH
39615: LD_INT 100
39617: PUSH
39618: LD_INT 50
39620: PUSH
39621: LD_INT 75
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: LIST
39628: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39629: LD_VAR 0 6
39633: PPUSH
39634: CALL_OW 257
39638: PUSH
39639: LD_INT 15
39641: EQUAL
39642: IFFALSE 39663
// points := [ 10 , 5 , 3 ] ;
39644: LD_ADDR_VAR 0 9
39648: PUSH
39649: LD_INT 10
39651: PUSH
39652: LD_INT 5
39654: PUSH
39655: LD_INT 3
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39663: LD_VAR 0 6
39667: PPUSH
39668: CALL_OW 257
39672: PUSH
39673: LD_INT 14
39675: EQUAL
39676: IFFALSE 39697
// points := [ 10 , 0 , 0 ] ;
39678: LD_ADDR_VAR 0 9
39682: PUSH
39683: LD_INT 10
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: LIST
39696: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39697: LD_VAR 0 6
39701: PPUSH
39702: CALL_OW 257
39706: PUSH
39707: LD_INT 11
39709: EQUAL
39710: IFFALSE 39731
// points := [ 30 , 10 , 5 ] ;
39712: LD_ADDR_VAR 0 9
39716: PUSH
39717: LD_INT 30
39719: PUSH
39720: LD_INT 10
39722: PUSH
39723: LD_INT 5
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: LIST
39730: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39731: LD_VAR 0 1
39735: PPUSH
39736: LD_INT 5
39738: PPUSH
39739: CALL_OW 321
39743: PUSH
39744: LD_INT 2
39746: EQUAL
39747: IFFALSE 39764
// bpoints := bpoints * 1.8 ;
39749: LD_ADDR_VAR 0 10
39753: PUSH
39754: LD_VAR 0 10
39758: PUSH
39759: LD_REAL  1.80000000000000E+0000
39762: MUL
39763: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39764: LD_VAR 0 6
39768: PPUSH
39769: CALL_OW 257
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: LD_INT 3
39782: PUSH
39783: LD_INT 4
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: IN
39792: PUSH
39793: LD_VAR 0 1
39797: PPUSH
39798: LD_INT 51
39800: PPUSH
39801: CALL_OW 321
39805: PUSH
39806: LD_INT 2
39808: EQUAL
39809: AND
39810: IFFALSE 39827
// bpoints := bpoints * 1.2 ;
39812: LD_ADDR_VAR 0 10
39816: PUSH
39817: LD_VAR 0 10
39821: PUSH
39822: LD_REAL  1.20000000000000E+0000
39825: MUL
39826: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39827: LD_VAR 0 6
39831: PPUSH
39832: CALL_OW 257
39836: PUSH
39837: LD_INT 5
39839: PUSH
39840: LD_INT 7
39842: PUSH
39843: LD_INT 9
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: IN
39851: PUSH
39852: LD_VAR 0 1
39856: PPUSH
39857: LD_INT 52
39859: PPUSH
39860: CALL_OW 321
39864: PUSH
39865: LD_INT 2
39867: EQUAL
39868: AND
39869: IFFALSE 39886
// bpoints := bpoints * 1.5 ;
39871: LD_ADDR_VAR 0 10
39875: PUSH
39876: LD_VAR 0 10
39880: PUSH
39881: LD_REAL  1.50000000000000E+0000
39884: MUL
39885: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39886: LD_VAR 0 1
39890: PPUSH
39891: LD_INT 66
39893: PPUSH
39894: CALL_OW 321
39898: PUSH
39899: LD_INT 2
39901: EQUAL
39902: IFFALSE 39919
// bpoints := bpoints * 1.1 ;
39904: LD_ADDR_VAR 0 10
39908: PUSH
39909: LD_VAR 0 10
39913: PUSH
39914: LD_REAL  1.10000000000000E+0000
39917: MUL
39918: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39919: LD_ADDR_VAR 0 10
39923: PUSH
39924: LD_VAR 0 10
39928: PUSH
39929: LD_VAR 0 6
39933: PPUSH
39934: LD_INT 1
39936: PPUSH
39937: CALL_OW 259
39941: PUSH
39942: LD_REAL  1.15000000000000E+0000
39945: MUL
39946: MUL
39947: ST_TO_ADDR
// end ; unit_vehicle :
39948: GO 40776
39950: LD_INT 2
39952: DOUBLE
39953: EQUAL
39954: IFTRUE 39958
39956: GO 40764
39958: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39959: LD_VAR 0 6
39963: PPUSH
39964: CALL_OW 264
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: LD_INT 42
39974: PUSH
39975: LD_INT 24
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: LIST
39982: IN
39983: IFFALSE 40004
// points := [ 25 , 5 , 3 ] ;
39985: LD_ADDR_VAR 0 9
39989: PUSH
39990: LD_INT 25
39992: PUSH
39993: LD_INT 5
39995: PUSH
39996: LD_INT 3
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40004: LD_VAR 0 6
40008: PPUSH
40009: CALL_OW 264
40013: PUSH
40014: LD_INT 4
40016: PUSH
40017: LD_INT 43
40019: PUSH
40020: LD_INT 25
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: LIST
40027: IN
40028: IFFALSE 40049
// points := [ 40 , 15 , 5 ] ;
40030: LD_ADDR_VAR 0 9
40034: PUSH
40035: LD_INT 40
40037: PUSH
40038: LD_INT 15
40040: PUSH
40041: LD_INT 5
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40049: LD_VAR 0 6
40053: PPUSH
40054: CALL_OW 264
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: LD_INT 23
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: IN
40069: IFFALSE 40090
// points := [ 7 , 25 , 8 ] ;
40071: LD_ADDR_VAR 0 9
40075: PUSH
40076: LD_INT 7
40078: PUSH
40079: LD_INT 25
40081: PUSH
40082: LD_INT 8
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40090: LD_VAR 0 6
40094: PPUSH
40095: CALL_OW 264
40099: PUSH
40100: LD_INT 5
40102: PUSH
40103: LD_INT 27
40105: PUSH
40106: LD_INT 44
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: LIST
40113: IN
40114: IFFALSE 40135
// points := [ 14 , 50 , 16 ] ;
40116: LD_ADDR_VAR 0 9
40120: PUSH
40121: LD_INT 14
40123: PUSH
40124: LD_INT 50
40126: PUSH
40127: LD_INT 16
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40135: LD_VAR 0 6
40139: PPUSH
40140: CALL_OW 264
40144: PUSH
40145: LD_INT 6
40147: PUSH
40148: LD_INT 46
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: IN
40155: IFFALSE 40176
// points := [ 32 , 120 , 70 ] ;
40157: LD_ADDR_VAR 0 9
40161: PUSH
40162: LD_INT 32
40164: PUSH
40165: LD_INT 120
40167: PUSH
40168: LD_INT 70
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: LIST
40175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40176: LD_VAR 0 6
40180: PPUSH
40181: CALL_OW 264
40185: PUSH
40186: LD_INT 7
40188: PUSH
40189: LD_INT 28
40191: PUSH
40192: LD_INT 45
40194: PUSH
40195: LD_INT 92
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: IN
40204: IFFALSE 40225
// points := [ 35 , 20 , 45 ] ;
40206: LD_ADDR_VAR 0 9
40210: PUSH
40211: LD_INT 35
40213: PUSH
40214: LD_INT 20
40216: PUSH
40217: LD_INT 45
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: LIST
40224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40225: LD_VAR 0 6
40229: PPUSH
40230: CALL_OW 264
40234: PUSH
40235: LD_INT 47
40237: PUSH
40238: EMPTY
40239: LIST
40240: IN
40241: IFFALSE 40262
// points := [ 67 , 45 , 75 ] ;
40243: LD_ADDR_VAR 0 9
40247: PUSH
40248: LD_INT 67
40250: PUSH
40251: LD_INT 45
40253: PUSH
40254: LD_INT 75
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40262: LD_VAR 0 6
40266: PPUSH
40267: CALL_OW 264
40271: PUSH
40272: LD_INT 26
40274: PUSH
40275: EMPTY
40276: LIST
40277: IN
40278: IFFALSE 40299
// points := [ 120 , 30 , 80 ] ;
40280: LD_ADDR_VAR 0 9
40284: PUSH
40285: LD_INT 120
40287: PUSH
40288: LD_INT 30
40290: PUSH
40291: LD_INT 80
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40299: LD_VAR 0 6
40303: PPUSH
40304: CALL_OW 264
40308: PUSH
40309: LD_INT 22
40311: PUSH
40312: EMPTY
40313: LIST
40314: IN
40315: IFFALSE 40336
// points := [ 40 , 1 , 1 ] ;
40317: LD_ADDR_VAR 0 9
40321: PUSH
40322: LD_INT 40
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: LIST
40335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40336: LD_VAR 0 6
40340: PPUSH
40341: CALL_OW 264
40345: PUSH
40346: LD_INT 29
40348: PUSH
40349: EMPTY
40350: LIST
40351: IN
40352: IFFALSE 40373
// points := [ 70 , 200 , 400 ] ;
40354: LD_ADDR_VAR 0 9
40358: PUSH
40359: LD_INT 70
40361: PUSH
40362: LD_INT 200
40364: PUSH
40365: LD_INT 400
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: LIST
40372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40373: LD_VAR 0 6
40377: PPUSH
40378: CALL_OW 264
40382: PUSH
40383: LD_INT 14
40385: PUSH
40386: LD_INT 53
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: IN
40393: IFFALSE 40414
// points := [ 40 , 10 , 20 ] ;
40395: LD_ADDR_VAR 0 9
40399: PUSH
40400: LD_INT 40
40402: PUSH
40403: LD_INT 10
40405: PUSH
40406: LD_INT 20
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: LIST
40413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40414: LD_VAR 0 6
40418: PPUSH
40419: CALL_OW 264
40423: PUSH
40424: LD_INT 9
40426: PUSH
40427: EMPTY
40428: LIST
40429: IN
40430: IFFALSE 40451
// points := [ 5 , 70 , 20 ] ;
40432: LD_ADDR_VAR 0 9
40436: PUSH
40437: LD_INT 5
40439: PUSH
40440: LD_INT 70
40442: PUSH
40443: LD_INT 20
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40451: LD_VAR 0 6
40455: PPUSH
40456: CALL_OW 264
40460: PUSH
40461: LD_INT 10
40463: PUSH
40464: EMPTY
40465: LIST
40466: IN
40467: IFFALSE 40488
// points := [ 35 , 110 , 70 ] ;
40469: LD_ADDR_VAR 0 9
40473: PUSH
40474: LD_INT 35
40476: PUSH
40477: LD_INT 110
40479: PUSH
40480: LD_INT 70
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40488: LD_VAR 0 6
40492: PPUSH
40493: CALL_OW 265
40497: PUSH
40498: LD_INT 25
40500: EQUAL
40501: IFFALSE 40522
// points := [ 80 , 65 , 100 ] ;
40503: LD_ADDR_VAR 0 9
40507: PUSH
40508: LD_INT 80
40510: PUSH
40511: LD_INT 65
40513: PUSH
40514: LD_INT 100
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40522: LD_VAR 0 6
40526: PPUSH
40527: CALL_OW 263
40531: PUSH
40532: LD_INT 1
40534: EQUAL
40535: IFFALSE 40570
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40537: LD_ADDR_VAR 0 10
40541: PUSH
40542: LD_VAR 0 10
40546: PUSH
40547: LD_VAR 0 6
40551: PPUSH
40552: CALL_OW 311
40556: PPUSH
40557: LD_INT 3
40559: PPUSH
40560: CALL_OW 259
40564: PUSH
40565: LD_INT 4
40567: MUL
40568: MUL
40569: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40570: LD_VAR 0 6
40574: PPUSH
40575: CALL_OW 263
40579: PUSH
40580: LD_INT 2
40582: EQUAL
40583: IFFALSE 40634
// begin j := IsControledBy ( i ) ;
40585: LD_ADDR_VAR 0 7
40589: PUSH
40590: LD_VAR 0 6
40594: PPUSH
40595: CALL_OW 312
40599: ST_TO_ADDR
// if j then
40600: LD_VAR 0 7
40604: IFFALSE 40634
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40606: LD_ADDR_VAR 0 10
40610: PUSH
40611: LD_VAR 0 10
40615: PUSH
40616: LD_VAR 0 7
40620: PPUSH
40621: LD_INT 3
40623: PPUSH
40624: CALL_OW 259
40628: PUSH
40629: LD_INT 3
40631: MUL
40632: MUL
40633: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40634: LD_VAR 0 6
40638: PPUSH
40639: CALL_OW 264
40643: PUSH
40644: LD_INT 5
40646: PUSH
40647: LD_INT 6
40649: PUSH
40650: LD_INT 46
40652: PUSH
40653: LD_INT 44
40655: PUSH
40656: LD_INT 47
40658: PUSH
40659: LD_INT 45
40661: PUSH
40662: LD_INT 28
40664: PUSH
40665: LD_INT 7
40667: PUSH
40668: LD_INT 27
40670: PUSH
40671: LD_INT 29
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: IN
40686: PUSH
40687: LD_VAR 0 1
40691: PPUSH
40692: LD_INT 52
40694: PPUSH
40695: CALL_OW 321
40699: PUSH
40700: LD_INT 2
40702: EQUAL
40703: AND
40704: IFFALSE 40721
// bpoints := bpoints * 1.2 ;
40706: LD_ADDR_VAR 0 10
40710: PUSH
40711: LD_VAR 0 10
40715: PUSH
40716: LD_REAL  1.20000000000000E+0000
40719: MUL
40720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40721: LD_VAR 0 6
40725: PPUSH
40726: CALL_OW 264
40730: PUSH
40731: LD_INT 6
40733: PUSH
40734: LD_INT 46
40736: PUSH
40737: LD_INT 47
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: IN
40745: IFFALSE 40762
// bpoints := bpoints * 1.2 ;
40747: LD_ADDR_VAR 0 10
40751: PUSH
40752: LD_VAR 0 10
40756: PUSH
40757: LD_REAL  1.20000000000000E+0000
40760: MUL
40761: ST_TO_ADDR
// end ; unit_building :
40762: GO 40776
40764: LD_INT 3
40766: DOUBLE
40767: EQUAL
40768: IFTRUE 40772
40770: GO 40775
40772: POP
// ; end ;
40773: GO 40776
40775: POP
// for j = 1 to 3 do
40776: LD_ADDR_VAR 0 7
40780: PUSH
40781: DOUBLE
40782: LD_INT 1
40784: DEC
40785: ST_TO_ADDR
40786: LD_INT 3
40788: PUSH
40789: FOR_TO
40790: IFFALSE 40843
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40792: LD_ADDR_VAR 0 5
40796: PUSH
40797: LD_VAR 0 5
40801: PPUSH
40802: LD_VAR 0 7
40806: PPUSH
40807: LD_VAR 0 5
40811: PUSH
40812: LD_VAR 0 7
40816: ARRAY
40817: PUSH
40818: LD_VAR 0 9
40822: PUSH
40823: LD_VAR 0 7
40827: ARRAY
40828: PUSH
40829: LD_VAR 0 10
40833: MUL
40834: PLUS
40835: PPUSH
40836: CALL_OW 1
40840: ST_TO_ADDR
40841: GO 40789
40843: POP
40844: POP
// end ;
40845: GO 39324
40847: POP
40848: POP
// result := Replace ( result , 4 , tmp ) ;
40849: LD_ADDR_VAR 0 5
40853: PUSH
40854: LD_VAR 0 5
40858: PPUSH
40859: LD_INT 4
40861: PPUSH
40862: LD_VAR 0 8
40866: PPUSH
40867: CALL_OW 1
40871: ST_TO_ADDR
// end ;
40872: LD_VAR 0 5
40876: RET
// export function DangerAtRange ( unit , range ) ; begin
40877: LD_INT 0
40879: PPUSH
// if not unit then
40880: LD_VAR 0 1
40884: NOT
40885: IFFALSE 40889
// exit ;
40887: GO 40934
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40889: LD_ADDR_VAR 0 3
40893: PUSH
40894: LD_VAR 0 1
40898: PPUSH
40899: CALL_OW 255
40903: PPUSH
40904: LD_VAR 0 1
40908: PPUSH
40909: CALL_OW 250
40913: PPUSH
40914: LD_VAR 0 1
40918: PPUSH
40919: CALL_OW 251
40923: PPUSH
40924: LD_VAR 0 2
40928: PPUSH
40929: CALL 39176 0 4
40933: ST_TO_ADDR
// end ;
40934: LD_VAR 0 3
40938: RET
// export function DangerInArea ( side , area ) ; begin
40939: LD_INT 0
40941: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40942: LD_ADDR_VAR 0 3
40946: PUSH
40947: LD_VAR 0 2
40951: PPUSH
40952: LD_INT 81
40954: PUSH
40955: LD_VAR 0 1
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PPUSH
40964: CALL_OW 70
40968: ST_TO_ADDR
// end ;
40969: LD_VAR 0 3
40973: RET
// export function IsExtension ( b ) ; begin
40974: LD_INT 0
40976: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40977: LD_ADDR_VAR 0 2
40981: PUSH
40982: LD_VAR 0 1
40986: PUSH
40987: LD_INT 23
40989: PUSH
40990: LD_INT 20
40992: PUSH
40993: LD_INT 22
40995: PUSH
40996: LD_INT 17
40998: PUSH
40999: LD_INT 24
41001: PUSH
41002: LD_INT 21
41004: PUSH
41005: LD_INT 19
41007: PUSH
41008: LD_INT 16
41010: PUSH
41011: LD_INT 25
41013: PUSH
41014: LD_INT 18
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: IN
41029: ST_TO_ADDR
// end ;
41030: LD_VAR 0 2
41034: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41035: LD_INT 0
41037: PPUSH
41038: PPUSH
41039: PPUSH
// result := [ ] ;
41040: LD_ADDR_VAR 0 4
41044: PUSH
41045: EMPTY
41046: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41047: LD_ADDR_VAR 0 5
41051: PUSH
41052: LD_VAR 0 2
41056: PPUSH
41057: LD_INT 21
41059: PUSH
41060: LD_INT 3
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PPUSH
41067: CALL_OW 70
41071: ST_TO_ADDR
// if not tmp then
41072: LD_VAR 0 5
41076: NOT
41077: IFFALSE 41081
// exit ;
41079: GO 41145
// if checkLink then
41081: LD_VAR 0 3
41085: IFFALSE 41135
// begin for i in tmp do
41087: LD_ADDR_VAR 0 6
41091: PUSH
41092: LD_VAR 0 5
41096: PUSH
41097: FOR_IN
41098: IFFALSE 41133
// if GetBase ( i ) <> base then
41100: LD_VAR 0 6
41104: PPUSH
41105: CALL_OW 274
41109: PUSH
41110: LD_VAR 0 1
41114: NONEQUAL
41115: IFFALSE 41131
// ComLinkToBase ( base , i ) ;
41117: LD_VAR 0 1
41121: PPUSH
41122: LD_VAR 0 6
41126: PPUSH
41127: CALL_OW 169
41131: GO 41097
41133: POP
41134: POP
// end ; result := tmp ;
41135: LD_ADDR_VAR 0 4
41139: PUSH
41140: LD_VAR 0 5
41144: ST_TO_ADDR
// end ;
41145: LD_VAR 0 4
41149: RET
// export function ComComplete ( units , b ) ; var i ; begin
41150: LD_INT 0
41152: PPUSH
41153: PPUSH
// if not units then
41154: LD_VAR 0 1
41158: NOT
41159: IFFALSE 41163
// exit ;
41161: GO 41253
// for i in units do
41163: LD_ADDR_VAR 0 4
41167: PUSH
41168: LD_VAR 0 1
41172: PUSH
41173: FOR_IN
41174: IFFALSE 41251
// if BuildingStatus ( b ) = bs_build then
41176: LD_VAR 0 2
41180: PPUSH
41181: CALL_OW 461
41185: PUSH
41186: LD_INT 1
41188: EQUAL
41189: IFFALSE 41249
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41191: LD_VAR 0 4
41195: PPUSH
41196: LD_STRING h
41198: PUSH
41199: LD_VAR 0 2
41203: PPUSH
41204: CALL_OW 250
41208: PUSH
41209: LD_VAR 0 2
41213: PPUSH
41214: CALL_OW 251
41218: PUSH
41219: LD_VAR 0 2
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: PUSH
41242: EMPTY
41243: LIST
41244: PPUSH
41245: CALL_OW 446
41249: GO 41173
41251: POP
41252: POP
// end ;
41253: LD_VAR 0 3
41257: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41258: LD_INT 0
41260: PPUSH
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41266: LD_VAR 0 1
41270: NOT
41271: PUSH
41272: LD_VAR 0 1
41276: PPUSH
41277: CALL_OW 263
41281: PUSH
41282: LD_INT 2
41284: NONEQUAL
41285: OR
41286: IFFALSE 41290
// exit ;
41288: GO 41606
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41290: LD_ADDR_VAR 0 6
41294: PUSH
41295: LD_INT 22
41297: PUSH
41298: LD_VAR 0 1
41302: PPUSH
41303: CALL_OW 255
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: PUSH
41315: LD_INT 30
41317: PUSH
41318: LD_INT 36
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 34
41327: PUSH
41328: LD_INT 31
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PPUSH
41344: CALL_OW 69
41348: ST_TO_ADDR
// if not tmp then
41349: LD_VAR 0 6
41353: NOT
41354: IFFALSE 41358
// exit ;
41356: GO 41606
// result := [ ] ;
41358: LD_ADDR_VAR 0 2
41362: PUSH
41363: EMPTY
41364: ST_TO_ADDR
// for i in tmp do
41365: LD_ADDR_VAR 0 3
41369: PUSH
41370: LD_VAR 0 6
41374: PUSH
41375: FOR_IN
41376: IFFALSE 41447
// begin t := UnitsInside ( i ) ;
41378: LD_ADDR_VAR 0 4
41382: PUSH
41383: LD_VAR 0 3
41387: PPUSH
41388: CALL_OW 313
41392: ST_TO_ADDR
// if t then
41393: LD_VAR 0 4
41397: IFFALSE 41445
// for j in t do
41399: LD_ADDR_VAR 0 7
41403: PUSH
41404: LD_VAR 0 4
41408: PUSH
41409: FOR_IN
41410: IFFALSE 41443
// result := Replace ( result , result + 1 , j ) ;
41412: LD_ADDR_VAR 0 2
41416: PUSH
41417: LD_VAR 0 2
41421: PPUSH
41422: LD_VAR 0 2
41426: PUSH
41427: LD_INT 1
41429: PLUS
41430: PPUSH
41431: LD_VAR 0 7
41435: PPUSH
41436: CALL_OW 1
41440: ST_TO_ADDR
41441: GO 41409
41443: POP
41444: POP
// end ;
41445: GO 41375
41447: POP
41448: POP
// if not result then
41449: LD_VAR 0 2
41453: NOT
41454: IFFALSE 41458
// exit ;
41456: GO 41606
// mech := result [ 1 ] ;
41458: LD_ADDR_VAR 0 5
41462: PUSH
41463: LD_VAR 0 2
41467: PUSH
41468: LD_INT 1
41470: ARRAY
41471: ST_TO_ADDR
// if result > 1 then
41472: LD_VAR 0 2
41476: PUSH
41477: LD_INT 1
41479: GREATER
41480: IFFALSE 41592
// begin for i = 2 to result do
41482: LD_ADDR_VAR 0 3
41486: PUSH
41487: DOUBLE
41488: LD_INT 2
41490: DEC
41491: ST_TO_ADDR
41492: LD_VAR 0 2
41496: PUSH
41497: FOR_TO
41498: IFFALSE 41590
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41500: LD_ADDR_VAR 0 4
41504: PUSH
41505: LD_VAR 0 2
41509: PUSH
41510: LD_VAR 0 3
41514: ARRAY
41515: PPUSH
41516: LD_INT 3
41518: PPUSH
41519: CALL_OW 259
41523: PUSH
41524: LD_VAR 0 2
41528: PUSH
41529: LD_VAR 0 3
41533: ARRAY
41534: PPUSH
41535: CALL_OW 432
41539: MINUS
41540: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41541: LD_VAR 0 4
41545: PUSH
41546: LD_VAR 0 5
41550: PPUSH
41551: LD_INT 3
41553: PPUSH
41554: CALL_OW 259
41558: PUSH
41559: LD_VAR 0 5
41563: PPUSH
41564: CALL_OW 432
41568: MINUS
41569: GREATEREQUAL
41570: IFFALSE 41588
// mech := result [ i ] ;
41572: LD_ADDR_VAR 0 5
41576: PUSH
41577: LD_VAR 0 2
41581: PUSH
41582: LD_VAR 0 3
41586: ARRAY
41587: ST_TO_ADDR
// end ;
41588: GO 41497
41590: POP
41591: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41592: LD_VAR 0 1
41596: PPUSH
41597: LD_VAR 0 5
41601: PPUSH
41602: CALL_OW 135
// end ;
41606: LD_VAR 0 2
41610: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41611: LD_INT 0
41613: PPUSH
41614: PPUSH
41615: PPUSH
41616: PPUSH
41617: PPUSH
41618: PPUSH
41619: PPUSH
41620: PPUSH
41621: PPUSH
41622: PPUSH
41623: PPUSH
41624: PPUSH
41625: PPUSH
// result := [ ] ;
41626: LD_ADDR_VAR 0 7
41630: PUSH
41631: EMPTY
41632: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41633: LD_VAR 0 1
41637: PPUSH
41638: CALL_OW 266
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: IN
41653: NOT
41654: IFFALSE 41658
// exit ;
41656: GO 43292
// if name then
41658: LD_VAR 0 3
41662: IFFALSE 41678
// SetBName ( base_dep , name ) ;
41664: LD_VAR 0 1
41668: PPUSH
41669: LD_VAR 0 3
41673: PPUSH
41674: CALL_OW 500
// base := GetBase ( base_dep ) ;
41678: LD_ADDR_VAR 0 15
41682: PUSH
41683: LD_VAR 0 1
41687: PPUSH
41688: CALL_OW 274
41692: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41693: LD_ADDR_VAR 0 16
41697: PUSH
41698: LD_VAR 0 1
41702: PPUSH
41703: CALL_OW 255
41707: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41708: LD_ADDR_VAR 0 17
41712: PUSH
41713: LD_VAR 0 1
41717: PPUSH
41718: CALL_OW 248
41722: ST_TO_ADDR
// if sources then
41723: LD_VAR 0 5
41727: IFFALSE 41774
// for i = 1 to 3 do
41729: LD_ADDR_VAR 0 8
41733: PUSH
41734: DOUBLE
41735: LD_INT 1
41737: DEC
41738: ST_TO_ADDR
41739: LD_INT 3
41741: PUSH
41742: FOR_TO
41743: IFFALSE 41772
// AddResourceType ( base , i , sources [ i ] ) ;
41745: LD_VAR 0 15
41749: PPUSH
41750: LD_VAR 0 8
41754: PPUSH
41755: LD_VAR 0 5
41759: PUSH
41760: LD_VAR 0 8
41764: ARRAY
41765: PPUSH
41766: CALL_OW 276
41770: GO 41742
41772: POP
41773: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41774: LD_ADDR_VAR 0 18
41778: PUSH
41779: LD_VAR 0 15
41783: PPUSH
41784: LD_VAR 0 2
41788: PPUSH
41789: LD_INT 1
41791: PPUSH
41792: CALL 41035 0 3
41796: ST_TO_ADDR
// InitHc ;
41797: CALL_OW 19
// InitUc ;
41801: CALL_OW 18
// uc_side := side ;
41805: LD_ADDR_OWVAR 20
41809: PUSH
41810: LD_VAR 0 16
41814: ST_TO_ADDR
// uc_nation := nation ;
41815: LD_ADDR_OWVAR 21
41819: PUSH
41820: LD_VAR 0 17
41824: ST_TO_ADDR
// if buildings then
41825: LD_VAR 0 18
41829: IFFALSE 43151
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41831: LD_ADDR_VAR 0 19
41835: PUSH
41836: LD_VAR 0 18
41840: PPUSH
41841: LD_INT 2
41843: PUSH
41844: LD_INT 30
41846: PUSH
41847: LD_INT 29
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 30
41856: PUSH
41857: LD_INT 30
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: PPUSH
41869: CALL_OW 72
41873: ST_TO_ADDR
// if tmp then
41874: LD_VAR 0 19
41878: IFFALSE 41926
// for i in tmp do
41880: LD_ADDR_VAR 0 8
41884: PUSH
41885: LD_VAR 0 19
41889: PUSH
41890: FOR_IN
41891: IFFALSE 41924
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41893: LD_VAR 0 8
41897: PPUSH
41898: CALL_OW 250
41902: PPUSH
41903: LD_VAR 0 8
41907: PPUSH
41908: CALL_OW 251
41912: PPUSH
41913: LD_VAR 0 16
41917: PPUSH
41918: CALL_OW 441
41922: GO 41890
41924: POP
41925: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41926: LD_VAR 0 18
41930: PPUSH
41931: LD_INT 2
41933: PUSH
41934: LD_INT 30
41936: PUSH
41937: LD_INT 32
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 30
41946: PUSH
41947: LD_INT 33
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: LIST
41958: PPUSH
41959: CALL_OW 72
41963: IFFALSE 42051
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41965: LD_ADDR_VAR 0 8
41969: PUSH
41970: LD_VAR 0 18
41974: PPUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 30
41980: PUSH
41981: LD_INT 32
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 30
41990: PUSH
41991: LD_INT 33
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: PPUSH
42003: CALL_OW 72
42007: PUSH
42008: FOR_IN
42009: IFFALSE 42049
// begin if not GetBWeapon ( i ) then
42011: LD_VAR 0 8
42015: PPUSH
42016: CALL_OW 269
42020: NOT
42021: IFFALSE 42047
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42023: LD_VAR 0 8
42027: PPUSH
42028: LD_VAR 0 8
42032: PPUSH
42033: LD_VAR 0 2
42037: PPUSH
42038: CALL 43297 0 2
42042: PPUSH
42043: CALL_OW 431
// end ;
42047: GO 42008
42049: POP
42050: POP
// end ; for i = 1 to personel do
42051: LD_ADDR_VAR 0 8
42055: PUSH
42056: DOUBLE
42057: LD_INT 1
42059: DEC
42060: ST_TO_ADDR
42061: LD_VAR 0 6
42065: PUSH
42066: FOR_TO
42067: IFFALSE 43131
// begin if i > 4 then
42069: LD_VAR 0 8
42073: PUSH
42074: LD_INT 4
42076: GREATER
42077: IFFALSE 42081
// break ;
42079: GO 43131
// case i of 1 :
42081: LD_VAR 0 8
42085: PUSH
42086: LD_INT 1
42088: DOUBLE
42089: EQUAL
42090: IFTRUE 42094
42092: GO 42174
42094: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42095: LD_ADDR_VAR 0 12
42099: PUSH
42100: LD_VAR 0 18
42104: PPUSH
42105: LD_INT 22
42107: PUSH
42108: LD_VAR 0 16
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 58
42119: PUSH
42120: EMPTY
42121: LIST
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: LD_INT 30
42128: PUSH
42129: LD_INT 32
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 30
42138: PUSH
42139: LD_INT 4
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 30
42148: PUSH
42149: LD_INT 5
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: LIST
42166: PPUSH
42167: CALL_OW 72
42171: ST_TO_ADDR
42172: GO 42396
42174: LD_INT 2
42176: DOUBLE
42177: EQUAL
42178: IFTRUE 42182
42180: GO 42244
42182: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42183: LD_ADDR_VAR 0 12
42187: PUSH
42188: LD_VAR 0 18
42192: PPUSH
42193: LD_INT 22
42195: PUSH
42196: LD_VAR 0 16
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: LD_INT 30
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 30
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PPUSH
42237: CALL_OW 72
42241: ST_TO_ADDR
42242: GO 42396
42244: LD_INT 3
42246: DOUBLE
42247: EQUAL
42248: IFTRUE 42252
42250: GO 42314
42252: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42253: LD_ADDR_VAR 0 12
42257: PUSH
42258: LD_VAR 0 18
42262: PPUSH
42263: LD_INT 22
42265: PUSH
42266: LD_VAR 0 16
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: LD_INT 30
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 30
42290: PUSH
42291: LD_INT 3
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: LIST
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PPUSH
42307: CALL_OW 72
42311: ST_TO_ADDR
42312: GO 42396
42314: LD_INT 4
42316: DOUBLE
42317: EQUAL
42318: IFTRUE 42322
42320: GO 42395
42322: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42323: LD_ADDR_VAR 0 12
42327: PUSH
42328: LD_VAR 0 18
42332: PPUSH
42333: LD_INT 22
42335: PUSH
42336: LD_VAR 0 16
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 30
42350: PUSH
42351: LD_INT 6
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 30
42360: PUSH
42361: LD_INT 7
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 30
42370: PUSH
42371: LD_INT 8
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PPUSH
42388: CALL_OW 72
42392: ST_TO_ADDR
42393: GO 42396
42395: POP
// if i = 1 then
42396: LD_VAR 0 8
42400: PUSH
42401: LD_INT 1
42403: EQUAL
42404: IFFALSE 42515
// begin tmp := [ ] ;
42406: LD_ADDR_VAR 0 19
42410: PUSH
42411: EMPTY
42412: ST_TO_ADDR
// for j in f do
42413: LD_ADDR_VAR 0 9
42417: PUSH
42418: LD_VAR 0 12
42422: PUSH
42423: FOR_IN
42424: IFFALSE 42497
// if GetBType ( j ) = b_bunker then
42426: LD_VAR 0 9
42430: PPUSH
42431: CALL_OW 266
42435: PUSH
42436: LD_INT 32
42438: EQUAL
42439: IFFALSE 42466
// tmp := Insert ( tmp , 1 , j ) else
42441: LD_ADDR_VAR 0 19
42445: PUSH
42446: LD_VAR 0 19
42450: PPUSH
42451: LD_INT 1
42453: PPUSH
42454: LD_VAR 0 9
42458: PPUSH
42459: CALL_OW 2
42463: ST_TO_ADDR
42464: GO 42495
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42466: LD_ADDR_VAR 0 19
42470: PUSH
42471: LD_VAR 0 19
42475: PPUSH
42476: LD_VAR 0 19
42480: PUSH
42481: LD_INT 1
42483: PLUS
42484: PPUSH
42485: LD_VAR 0 9
42489: PPUSH
42490: CALL_OW 2
42494: ST_TO_ADDR
42495: GO 42423
42497: POP
42498: POP
// if tmp then
42499: LD_VAR 0 19
42503: IFFALSE 42515
// f := tmp ;
42505: LD_ADDR_VAR 0 12
42509: PUSH
42510: LD_VAR 0 19
42514: ST_TO_ADDR
// end ; x := personel [ i ] ;
42515: LD_ADDR_VAR 0 13
42519: PUSH
42520: LD_VAR 0 6
42524: PUSH
42525: LD_VAR 0 8
42529: ARRAY
42530: ST_TO_ADDR
// if x = - 1 then
42531: LD_VAR 0 13
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: EQUAL
42540: IFFALSE 42749
// begin for j in f do
42542: LD_ADDR_VAR 0 9
42546: PUSH
42547: LD_VAR 0 12
42551: PUSH
42552: FOR_IN
42553: IFFALSE 42745
// repeat InitHc ;
42555: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42559: LD_VAR 0 9
42563: PPUSH
42564: CALL_OW 266
42568: PUSH
42569: LD_INT 5
42571: EQUAL
42572: IFFALSE 42642
// begin if UnitsInside ( j ) < 3 then
42574: LD_VAR 0 9
42578: PPUSH
42579: CALL_OW 313
42583: PUSH
42584: LD_INT 3
42586: LESS
42587: IFFALSE 42623
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42589: LD_INT 0
42591: PPUSH
42592: LD_INT 5
42594: PUSH
42595: LD_INT 8
42597: PUSH
42598: LD_INT 9
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: LIST
42605: PUSH
42606: LD_VAR 0 17
42610: ARRAY
42611: PPUSH
42612: LD_VAR 0 4
42616: PPUSH
42617: CALL_OW 380
42621: GO 42640
// PrepareHuman ( false , i , skill ) ;
42623: LD_INT 0
42625: PPUSH
42626: LD_VAR 0 8
42630: PPUSH
42631: LD_VAR 0 4
42635: PPUSH
42636: CALL_OW 380
// end else
42640: GO 42659
// PrepareHuman ( false , i , skill ) ;
42642: LD_INT 0
42644: PPUSH
42645: LD_VAR 0 8
42649: PPUSH
42650: LD_VAR 0 4
42654: PPUSH
42655: CALL_OW 380
// un := CreateHuman ;
42659: LD_ADDR_VAR 0 14
42663: PUSH
42664: CALL_OW 44
42668: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42669: LD_ADDR_VAR 0 7
42673: PUSH
42674: LD_VAR 0 7
42678: PPUSH
42679: LD_INT 1
42681: PPUSH
42682: LD_VAR 0 14
42686: PPUSH
42687: CALL_OW 2
42691: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42692: LD_VAR 0 14
42696: PPUSH
42697: LD_VAR 0 9
42701: PPUSH
42702: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42706: LD_VAR 0 9
42710: PPUSH
42711: CALL_OW 313
42715: PUSH
42716: LD_INT 6
42718: EQUAL
42719: PUSH
42720: LD_VAR 0 9
42724: PPUSH
42725: CALL_OW 266
42729: PUSH
42730: LD_INT 32
42732: PUSH
42733: LD_INT 31
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: IN
42740: OR
42741: IFFALSE 42555
42743: GO 42552
42745: POP
42746: POP
// end else
42747: GO 43129
// for j = 1 to x do
42749: LD_ADDR_VAR 0 9
42753: PUSH
42754: DOUBLE
42755: LD_INT 1
42757: DEC
42758: ST_TO_ADDR
42759: LD_VAR 0 13
42763: PUSH
42764: FOR_TO
42765: IFFALSE 43127
// begin InitHc ;
42767: CALL_OW 19
// if not f then
42771: LD_VAR 0 12
42775: NOT
42776: IFFALSE 42865
// begin PrepareHuman ( false , i , skill ) ;
42778: LD_INT 0
42780: PPUSH
42781: LD_VAR 0 8
42785: PPUSH
42786: LD_VAR 0 4
42790: PPUSH
42791: CALL_OW 380
// un := CreateHuman ;
42795: LD_ADDR_VAR 0 14
42799: PUSH
42800: CALL_OW 44
42804: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42805: LD_ADDR_VAR 0 7
42809: PUSH
42810: LD_VAR 0 7
42814: PPUSH
42815: LD_INT 1
42817: PPUSH
42818: LD_VAR 0 14
42822: PPUSH
42823: CALL_OW 2
42827: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42828: LD_VAR 0 14
42832: PPUSH
42833: LD_VAR 0 1
42837: PPUSH
42838: CALL_OW 250
42842: PPUSH
42843: LD_VAR 0 1
42847: PPUSH
42848: CALL_OW 251
42852: PPUSH
42853: LD_INT 10
42855: PPUSH
42856: LD_INT 0
42858: PPUSH
42859: CALL_OW 50
// continue ;
42863: GO 42764
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42865: LD_VAR 0 12
42869: PUSH
42870: LD_INT 1
42872: ARRAY
42873: PPUSH
42874: CALL_OW 313
42878: PUSH
42879: LD_VAR 0 12
42883: PUSH
42884: LD_INT 1
42886: ARRAY
42887: PPUSH
42888: CALL_OW 266
42892: PUSH
42893: LD_INT 32
42895: PUSH
42896: LD_INT 31
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: IN
42903: AND
42904: PUSH
42905: LD_VAR 0 12
42909: PUSH
42910: LD_INT 1
42912: ARRAY
42913: PPUSH
42914: CALL_OW 313
42918: PUSH
42919: LD_INT 6
42921: EQUAL
42922: OR
42923: IFFALSE 42943
// f := Delete ( f , 1 ) ;
42925: LD_ADDR_VAR 0 12
42929: PUSH
42930: LD_VAR 0 12
42934: PPUSH
42935: LD_INT 1
42937: PPUSH
42938: CALL_OW 3
42942: ST_TO_ADDR
// if not f then
42943: LD_VAR 0 12
42947: NOT
42948: IFFALSE 42966
// begin x := x + 2 ;
42950: LD_ADDR_VAR 0 13
42954: PUSH
42955: LD_VAR 0 13
42959: PUSH
42960: LD_INT 2
42962: PLUS
42963: ST_TO_ADDR
// continue ;
42964: GO 42764
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42966: LD_VAR 0 12
42970: PUSH
42971: LD_INT 1
42973: ARRAY
42974: PPUSH
42975: CALL_OW 266
42979: PUSH
42980: LD_INT 5
42982: EQUAL
42983: IFFALSE 43057
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42985: LD_VAR 0 12
42989: PUSH
42990: LD_INT 1
42992: ARRAY
42993: PPUSH
42994: CALL_OW 313
42998: PUSH
42999: LD_INT 3
43001: LESS
43002: IFFALSE 43038
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43004: LD_INT 0
43006: PPUSH
43007: LD_INT 5
43009: PUSH
43010: LD_INT 8
43012: PUSH
43013: LD_INT 9
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: PUSH
43021: LD_VAR 0 17
43025: ARRAY
43026: PPUSH
43027: LD_VAR 0 4
43031: PPUSH
43032: CALL_OW 380
43036: GO 43055
// PrepareHuman ( false , i , skill ) ;
43038: LD_INT 0
43040: PPUSH
43041: LD_VAR 0 8
43045: PPUSH
43046: LD_VAR 0 4
43050: PPUSH
43051: CALL_OW 380
// end else
43055: GO 43074
// PrepareHuman ( false , i , skill ) ;
43057: LD_INT 0
43059: PPUSH
43060: LD_VAR 0 8
43064: PPUSH
43065: LD_VAR 0 4
43069: PPUSH
43070: CALL_OW 380
// un := CreateHuman ;
43074: LD_ADDR_VAR 0 14
43078: PUSH
43079: CALL_OW 44
43083: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43084: LD_ADDR_VAR 0 7
43088: PUSH
43089: LD_VAR 0 7
43093: PPUSH
43094: LD_INT 1
43096: PPUSH
43097: LD_VAR 0 14
43101: PPUSH
43102: CALL_OW 2
43106: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43107: LD_VAR 0 14
43111: PPUSH
43112: LD_VAR 0 12
43116: PUSH
43117: LD_INT 1
43119: ARRAY
43120: PPUSH
43121: CALL_OW 52
// end ;
43125: GO 42764
43127: POP
43128: POP
// end ;
43129: GO 42066
43131: POP
43132: POP
// result := result ^ buildings ;
43133: LD_ADDR_VAR 0 7
43137: PUSH
43138: LD_VAR 0 7
43142: PUSH
43143: LD_VAR 0 18
43147: ADD
43148: ST_TO_ADDR
// end else
43149: GO 43292
// begin for i = 1 to personel do
43151: LD_ADDR_VAR 0 8
43155: PUSH
43156: DOUBLE
43157: LD_INT 1
43159: DEC
43160: ST_TO_ADDR
43161: LD_VAR 0 6
43165: PUSH
43166: FOR_TO
43167: IFFALSE 43290
// begin if i > 4 then
43169: LD_VAR 0 8
43173: PUSH
43174: LD_INT 4
43176: GREATER
43177: IFFALSE 43181
// break ;
43179: GO 43290
// x := personel [ i ] ;
43181: LD_ADDR_VAR 0 13
43185: PUSH
43186: LD_VAR 0 6
43190: PUSH
43191: LD_VAR 0 8
43195: ARRAY
43196: ST_TO_ADDR
// if x = - 1 then
43197: LD_VAR 0 13
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: EQUAL
43206: IFFALSE 43210
// continue ;
43208: GO 43166
// PrepareHuman ( false , i , skill ) ;
43210: LD_INT 0
43212: PPUSH
43213: LD_VAR 0 8
43217: PPUSH
43218: LD_VAR 0 4
43222: PPUSH
43223: CALL_OW 380
// un := CreateHuman ;
43227: LD_ADDR_VAR 0 14
43231: PUSH
43232: CALL_OW 44
43236: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43237: LD_VAR 0 14
43241: PPUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: CALL_OW 250
43251: PPUSH
43252: LD_VAR 0 1
43256: PPUSH
43257: CALL_OW 251
43261: PPUSH
43262: LD_INT 10
43264: PPUSH
43265: LD_INT 0
43267: PPUSH
43268: CALL_OW 50
// result := result ^ un ;
43272: LD_ADDR_VAR 0 7
43276: PUSH
43277: LD_VAR 0 7
43281: PUSH
43282: LD_VAR 0 14
43286: ADD
43287: ST_TO_ADDR
// end ;
43288: GO 43166
43290: POP
43291: POP
// end ; end ;
43292: LD_VAR 0 7
43296: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43297: LD_INT 0
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
43303: PPUSH
43304: PPUSH
43305: PPUSH
43306: PPUSH
43307: PPUSH
43308: PPUSH
43309: PPUSH
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
// result := false ;
43315: LD_ADDR_VAR 0 3
43319: PUSH
43320: LD_INT 0
43322: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43323: LD_VAR 0 1
43327: NOT
43328: PUSH
43329: LD_VAR 0 1
43333: PPUSH
43334: CALL_OW 266
43338: PUSH
43339: LD_INT 32
43341: PUSH
43342: LD_INT 33
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: IN
43349: NOT
43350: OR
43351: IFFALSE 43355
// exit ;
43353: GO 44464
// nat := GetNation ( tower ) ;
43355: LD_ADDR_VAR 0 12
43359: PUSH
43360: LD_VAR 0 1
43364: PPUSH
43365: CALL_OW 248
43369: ST_TO_ADDR
// side := GetSide ( tower ) ;
43370: LD_ADDR_VAR 0 16
43374: PUSH
43375: LD_VAR 0 1
43379: PPUSH
43380: CALL_OW 255
43384: ST_TO_ADDR
// x := GetX ( tower ) ;
43385: LD_ADDR_VAR 0 10
43389: PUSH
43390: LD_VAR 0 1
43394: PPUSH
43395: CALL_OW 250
43399: ST_TO_ADDR
// y := GetY ( tower ) ;
43400: LD_ADDR_VAR 0 11
43404: PUSH
43405: LD_VAR 0 1
43409: PPUSH
43410: CALL_OW 251
43414: ST_TO_ADDR
// if not x or not y then
43415: LD_VAR 0 10
43419: NOT
43420: PUSH
43421: LD_VAR 0 11
43425: NOT
43426: OR
43427: IFFALSE 43431
// exit ;
43429: GO 44464
// weapon := 0 ;
43431: LD_ADDR_VAR 0 18
43435: PUSH
43436: LD_INT 0
43438: ST_TO_ADDR
// fac_list := [ ] ;
43439: LD_ADDR_VAR 0 17
43443: PUSH
43444: EMPTY
43445: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43446: LD_ADDR_VAR 0 6
43450: PUSH
43451: LD_VAR 0 1
43455: PPUSH
43456: CALL_OW 274
43460: PPUSH
43461: LD_VAR 0 2
43465: PPUSH
43466: LD_INT 0
43468: PPUSH
43469: CALL 41035 0 3
43473: PPUSH
43474: LD_INT 30
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PPUSH
43484: CALL_OW 72
43488: ST_TO_ADDR
// if not factories then
43489: LD_VAR 0 6
43493: NOT
43494: IFFALSE 43498
// exit ;
43496: GO 44464
// for i in factories do
43498: LD_ADDR_VAR 0 8
43502: PUSH
43503: LD_VAR 0 6
43507: PUSH
43508: FOR_IN
43509: IFFALSE 43534
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43511: LD_ADDR_VAR 0 17
43515: PUSH
43516: LD_VAR 0 17
43520: PUSH
43521: LD_VAR 0 8
43525: PPUSH
43526: CALL_OW 478
43530: UNION
43531: ST_TO_ADDR
43532: GO 43508
43534: POP
43535: POP
// if not fac_list then
43536: LD_VAR 0 17
43540: NOT
43541: IFFALSE 43545
// exit ;
43543: GO 44464
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43545: LD_ADDR_VAR 0 5
43549: PUSH
43550: LD_INT 4
43552: PUSH
43553: LD_INT 5
43555: PUSH
43556: LD_INT 9
43558: PUSH
43559: LD_INT 10
43561: PUSH
43562: LD_INT 6
43564: PUSH
43565: LD_INT 7
43567: PUSH
43568: LD_INT 11
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 27
43582: PUSH
43583: LD_INT 28
43585: PUSH
43586: LD_INT 26
43588: PUSH
43589: LD_INT 30
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 43
43600: PUSH
43601: LD_INT 44
43603: PUSH
43604: LD_INT 46
43606: PUSH
43607: LD_INT 45
43609: PUSH
43610: LD_INT 47
43612: PUSH
43613: LD_INT 49
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: LIST
43628: PUSH
43629: LD_VAR 0 12
43633: ARRAY
43634: ST_TO_ADDR
// list := list isect fac_list ;
43635: LD_ADDR_VAR 0 5
43639: PUSH
43640: LD_VAR 0 5
43644: PUSH
43645: LD_VAR 0 17
43649: ISECT
43650: ST_TO_ADDR
// if not list then
43651: LD_VAR 0 5
43655: NOT
43656: IFFALSE 43660
// exit ;
43658: GO 44464
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43660: LD_VAR 0 12
43664: PUSH
43665: LD_INT 3
43667: EQUAL
43668: PUSH
43669: LD_INT 49
43671: PUSH
43672: LD_VAR 0 5
43676: IN
43677: AND
43678: PUSH
43679: LD_INT 31
43681: PPUSH
43682: LD_VAR 0 16
43686: PPUSH
43687: CALL_OW 321
43691: PUSH
43692: LD_INT 2
43694: EQUAL
43695: AND
43696: IFFALSE 43756
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43698: LD_INT 22
43700: PUSH
43701: LD_VAR 0 16
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 35
43712: PUSH
43713: LD_INT 49
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 91
43722: PUSH
43723: LD_VAR 0 1
43727: PUSH
43728: LD_INT 10
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: LIST
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: PPUSH
43741: CALL_OW 69
43745: NOT
43746: IFFALSE 43756
// weapon := ru_time_lapser ;
43748: LD_ADDR_VAR 0 18
43752: PUSH
43753: LD_INT 49
43755: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43756: LD_VAR 0 12
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: IN
43771: PUSH
43772: LD_INT 11
43774: PUSH
43775: LD_VAR 0 5
43779: IN
43780: PUSH
43781: LD_INT 30
43783: PUSH
43784: LD_VAR 0 5
43788: IN
43789: OR
43790: AND
43791: PUSH
43792: LD_INT 6
43794: PPUSH
43795: LD_VAR 0 16
43799: PPUSH
43800: CALL_OW 321
43804: PUSH
43805: LD_INT 2
43807: EQUAL
43808: AND
43809: IFFALSE 43974
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43811: LD_INT 22
43813: PUSH
43814: LD_VAR 0 16
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: LD_INT 35
43828: PUSH
43829: LD_INT 11
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 35
43838: PUSH
43839: LD_INT 30
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 91
43853: PUSH
43854: LD_VAR 0 1
43858: PUSH
43859: LD_INT 18
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: LIST
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: PPUSH
43872: CALL_OW 69
43876: NOT
43877: PUSH
43878: LD_INT 22
43880: PUSH
43881: LD_VAR 0 16
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: LD_INT 30
43895: PUSH
43896: LD_INT 32
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 30
43905: PUSH
43906: LD_INT 33
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 91
43920: PUSH
43921: LD_VAR 0 1
43925: PUSH
43926: LD_INT 12
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: PUSH
43939: EMPTY
43940: LIST
43941: PPUSH
43942: CALL_OW 69
43946: PUSH
43947: LD_INT 2
43949: GREATER
43950: AND
43951: IFFALSE 43974
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43953: LD_ADDR_VAR 0 18
43957: PUSH
43958: LD_INT 11
43960: PUSH
43961: LD_INT 30
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_VAR 0 12
43972: ARRAY
43973: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43974: LD_VAR 0 18
43978: NOT
43979: PUSH
43980: LD_INT 40
43982: PPUSH
43983: LD_VAR 0 16
43987: PPUSH
43988: CALL_OW 321
43992: PUSH
43993: LD_INT 2
43995: EQUAL
43996: AND
43997: PUSH
43998: LD_INT 7
44000: PUSH
44001: LD_VAR 0 5
44005: IN
44006: PUSH
44007: LD_INT 28
44009: PUSH
44010: LD_VAR 0 5
44014: IN
44015: OR
44016: PUSH
44017: LD_INT 45
44019: PUSH
44020: LD_VAR 0 5
44024: IN
44025: OR
44026: AND
44027: IFFALSE 44281
// begin hex := GetHexInfo ( x , y ) ;
44029: LD_ADDR_VAR 0 4
44033: PUSH
44034: LD_VAR 0 10
44038: PPUSH
44039: LD_VAR 0 11
44043: PPUSH
44044: CALL_OW 546
44048: ST_TO_ADDR
// if hex [ 1 ] then
44049: LD_VAR 0 4
44053: PUSH
44054: LD_INT 1
44056: ARRAY
44057: IFFALSE 44061
// exit ;
44059: GO 44464
// height := hex [ 2 ] ;
44061: LD_ADDR_VAR 0 15
44065: PUSH
44066: LD_VAR 0 4
44070: PUSH
44071: LD_INT 2
44073: ARRAY
44074: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44075: LD_ADDR_VAR 0 14
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: LD_INT 3
44088: PUSH
44089: LD_INT 5
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: ST_TO_ADDR
// for i in tmp do
44098: LD_ADDR_VAR 0 8
44102: PUSH
44103: LD_VAR 0 14
44107: PUSH
44108: FOR_IN
44109: IFFALSE 44279
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44111: LD_ADDR_VAR 0 9
44115: PUSH
44116: LD_VAR 0 10
44120: PPUSH
44121: LD_VAR 0 8
44125: PPUSH
44126: LD_INT 5
44128: PPUSH
44129: CALL_OW 272
44133: PUSH
44134: LD_VAR 0 11
44138: PPUSH
44139: LD_VAR 0 8
44143: PPUSH
44144: LD_INT 5
44146: PPUSH
44147: CALL_OW 273
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44156: LD_VAR 0 9
44160: PUSH
44161: LD_INT 1
44163: ARRAY
44164: PPUSH
44165: LD_VAR 0 9
44169: PUSH
44170: LD_INT 2
44172: ARRAY
44173: PPUSH
44174: CALL_OW 488
44178: IFFALSE 44277
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44180: LD_ADDR_VAR 0 4
44184: PUSH
44185: LD_VAR 0 9
44189: PUSH
44190: LD_INT 1
44192: ARRAY
44193: PPUSH
44194: LD_VAR 0 9
44198: PUSH
44199: LD_INT 2
44201: ARRAY
44202: PPUSH
44203: CALL_OW 546
44207: ST_TO_ADDR
// if hex [ 1 ] then
44208: LD_VAR 0 4
44212: PUSH
44213: LD_INT 1
44215: ARRAY
44216: IFFALSE 44220
// continue ;
44218: GO 44108
// h := hex [ 2 ] ;
44220: LD_ADDR_VAR 0 13
44224: PUSH
44225: LD_VAR 0 4
44229: PUSH
44230: LD_INT 2
44232: ARRAY
44233: ST_TO_ADDR
// if h + 7 < height then
44234: LD_VAR 0 13
44238: PUSH
44239: LD_INT 7
44241: PLUS
44242: PUSH
44243: LD_VAR 0 15
44247: LESS
44248: IFFALSE 44277
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44250: LD_ADDR_VAR 0 18
44254: PUSH
44255: LD_INT 7
44257: PUSH
44258: LD_INT 28
44260: PUSH
44261: LD_INT 45
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: PUSH
44269: LD_VAR 0 12
44273: ARRAY
44274: ST_TO_ADDR
// break ;
44275: GO 44279
// end ; end ; end ;
44277: GO 44108
44279: POP
44280: POP
// end ; if not weapon then
44281: LD_VAR 0 18
44285: NOT
44286: IFFALSE 44346
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44288: LD_ADDR_VAR 0 5
44292: PUSH
44293: LD_VAR 0 5
44297: PUSH
44298: LD_INT 11
44300: PUSH
44301: LD_INT 30
44303: PUSH
44304: LD_INT 49
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: LIST
44311: DIFF
44312: ST_TO_ADDR
// if not list then
44313: LD_VAR 0 5
44317: NOT
44318: IFFALSE 44322
// exit ;
44320: GO 44464
// weapon := list [ rand ( 1 , list ) ] ;
44322: LD_ADDR_VAR 0 18
44326: PUSH
44327: LD_VAR 0 5
44331: PUSH
44332: LD_INT 1
44334: PPUSH
44335: LD_VAR 0 5
44339: PPUSH
44340: CALL_OW 12
44344: ARRAY
44345: ST_TO_ADDR
// end ; if weapon then
44346: LD_VAR 0 18
44350: IFFALSE 44464
// begin tmp := CostOfWeapon ( weapon ) ;
44352: LD_ADDR_VAR 0 14
44356: PUSH
44357: LD_VAR 0 18
44361: PPUSH
44362: CALL_OW 451
44366: ST_TO_ADDR
// j := GetBase ( tower ) ;
44367: LD_ADDR_VAR 0 9
44371: PUSH
44372: LD_VAR 0 1
44376: PPUSH
44377: CALL_OW 274
44381: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44382: LD_VAR 0 9
44386: PPUSH
44387: LD_INT 1
44389: PPUSH
44390: CALL_OW 275
44394: PUSH
44395: LD_VAR 0 14
44399: PUSH
44400: LD_INT 1
44402: ARRAY
44403: GREATEREQUAL
44404: PUSH
44405: LD_VAR 0 9
44409: PPUSH
44410: LD_INT 2
44412: PPUSH
44413: CALL_OW 275
44417: PUSH
44418: LD_VAR 0 14
44422: PUSH
44423: LD_INT 2
44425: ARRAY
44426: GREATEREQUAL
44427: AND
44428: PUSH
44429: LD_VAR 0 9
44433: PPUSH
44434: LD_INT 3
44436: PPUSH
44437: CALL_OW 275
44441: PUSH
44442: LD_VAR 0 14
44446: PUSH
44447: LD_INT 3
44449: ARRAY
44450: GREATEREQUAL
44451: AND
44452: IFFALSE 44464
// result := weapon ;
44454: LD_ADDR_VAR 0 3
44458: PUSH
44459: LD_VAR 0 18
44463: ST_TO_ADDR
// end ; end ;
44464: LD_VAR 0 3
44468: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44469: LD_INT 0
44471: PPUSH
44472: PPUSH
// result := true ;
44473: LD_ADDR_VAR 0 3
44477: PUSH
44478: LD_INT 1
44480: ST_TO_ADDR
// if array1 = array2 then
44481: LD_VAR 0 1
44485: PUSH
44486: LD_VAR 0 2
44490: EQUAL
44491: IFFALSE 44551
// begin for i = 1 to array1 do
44493: LD_ADDR_VAR 0 4
44497: PUSH
44498: DOUBLE
44499: LD_INT 1
44501: DEC
44502: ST_TO_ADDR
44503: LD_VAR 0 1
44507: PUSH
44508: FOR_TO
44509: IFFALSE 44547
// if array1 [ i ] <> array2 [ i ] then
44511: LD_VAR 0 1
44515: PUSH
44516: LD_VAR 0 4
44520: ARRAY
44521: PUSH
44522: LD_VAR 0 2
44526: PUSH
44527: LD_VAR 0 4
44531: ARRAY
44532: NONEQUAL
44533: IFFALSE 44545
// begin result := false ;
44535: LD_ADDR_VAR 0 3
44539: PUSH
44540: LD_INT 0
44542: ST_TO_ADDR
// break ;
44543: GO 44547
// end ;
44545: GO 44508
44547: POP
44548: POP
// end else
44549: GO 44559
// result := false ;
44551: LD_ADDR_VAR 0 3
44555: PUSH
44556: LD_INT 0
44558: ST_TO_ADDR
// end ;
44559: LD_VAR 0 3
44563: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44564: LD_INT 0
44566: PPUSH
44567: PPUSH
// if not array1 or not array2 then
44568: LD_VAR 0 1
44572: NOT
44573: PUSH
44574: LD_VAR 0 2
44578: NOT
44579: OR
44580: IFFALSE 44584
// exit ;
44582: GO 44648
// result := true ;
44584: LD_ADDR_VAR 0 3
44588: PUSH
44589: LD_INT 1
44591: ST_TO_ADDR
// for i = 1 to array1 do
44592: LD_ADDR_VAR 0 4
44596: PUSH
44597: DOUBLE
44598: LD_INT 1
44600: DEC
44601: ST_TO_ADDR
44602: LD_VAR 0 1
44606: PUSH
44607: FOR_TO
44608: IFFALSE 44646
// if array1 [ i ] <> array2 [ i ] then
44610: LD_VAR 0 1
44614: PUSH
44615: LD_VAR 0 4
44619: ARRAY
44620: PUSH
44621: LD_VAR 0 2
44625: PUSH
44626: LD_VAR 0 4
44630: ARRAY
44631: NONEQUAL
44632: IFFALSE 44644
// begin result := false ;
44634: LD_ADDR_VAR 0 3
44638: PUSH
44639: LD_INT 0
44641: ST_TO_ADDR
// break ;
44642: GO 44646
// end ;
44644: GO 44607
44646: POP
44647: POP
// end ;
44648: LD_VAR 0 3
44652: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44653: LD_INT 0
44655: PPUSH
44656: PPUSH
44657: PPUSH
// pom := GetBase ( fac ) ;
44658: LD_ADDR_VAR 0 5
44662: PUSH
44663: LD_VAR 0 1
44667: PPUSH
44668: CALL_OW 274
44672: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44673: LD_ADDR_VAR 0 4
44677: PUSH
44678: LD_VAR 0 2
44682: PUSH
44683: LD_INT 1
44685: ARRAY
44686: PPUSH
44687: LD_VAR 0 2
44691: PUSH
44692: LD_INT 2
44694: ARRAY
44695: PPUSH
44696: LD_VAR 0 2
44700: PUSH
44701: LD_INT 3
44703: ARRAY
44704: PPUSH
44705: LD_VAR 0 2
44709: PUSH
44710: LD_INT 4
44712: ARRAY
44713: PPUSH
44714: CALL_OW 449
44718: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44719: LD_ADDR_VAR 0 3
44723: PUSH
44724: LD_VAR 0 5
44728: PPUSH
44729: LD_INT 1
44731: PPUSH
44732: CALL_OW 275
44736: PUSH
44737: LD_VAR 0 4
44741: PUSH
44742: LD_INT 1
44744: ARRAY
44745: GREATEREQUAL
44746: PUSH
44747: LD_VAR 0 5
44751: PPUSH
44752: LD_INT 2
44754: PPUSH
44755: CALL_OW 275
44759: PUSH
44760: LD_VAR 0 4
44764: PUSH
44765: LD_INT 2
44767: ARRAY
44768: GREATEREQUAL
44769: AND
44770: PUSH
44771: LD_VAR 0 5
44775: PPUSH
44776: LD_INT 3
44778: PPUSH
44779: CALL_OW 275
44783: PUSH
44784: LD_VAR 0 4
44788: PUSH
44789: LD_INT 3
44791: ARRAY
44792: GREATEREQUAL
44793: AND
44794: ST_TO_ADDR
// end ;
44795: LD_VAR 0 3
44799: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44800: LD_INT 0
44802: PPUSH
44803: PPUSH
44804: PPUSH
44805: PPUSH
// pom := GetBase ( building ) ;
44806: LD_ADDR_VAR 0 3
44810: PUSH
44811: LD_VAR 0 1
44815: PPUSH
44816: CALL_OW 274
44820: ST_TO_ADDR
// if not pom then
44821: LD_VAR 0 3
44825: NOT
44826: IFFALSE 44830
// exit ;
44828: GO 45000
// btype := GetBType ( building ) ;
44830: LD_ADDR_VAR 0 5
44834: PUSH
44835: LD_VAR 0 1
44839: PPUSH
44840: CALL_OW 266
44844: ST_TO_ADDR
// if btype = b_armoury then
44845: LD_VAR 0 5
44849: PUSH
44850: LD_INT 4
44852: EQUAL
44853: IFFALSE 44863
// btype := b_barracks ;
44855: LD_ADDR_VAR 0 5
44859: PUSH
44860: LD_INT 5
44862: ST_TO_ADDR
// if btype = b_depot then
44863: LD_VAR 0 5
44867: PUSH
44868: LD_INT 0
44870: EQUAL
44871: IFFALSE 44881
// btype := b_warehouse ;
44873: LD_ADDR_VAR 0 5
44877: PUSH
44878: LD_INT 1
44880: ST_TO_ADDR
// if btype = b_workshop then
44881: LD_VAR 0 5
44885: PUSH
44886: LD_INT 2
44888: EQUAL
44889: IFFALSE 44899
// btype := b_factory ;
44891: LD_ADDR_VAR 0 5
44895: PUSH
44896: LD_INT 3
44898: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44899: LD_ADDR_VAR 0 4
44903: PUSH
44904: LD_VAR 0 5
44908: PPUSH
44909: LD_VAR 0 1
44913: PPUSH
44914: CALL_OW 248
44918: PPUSH
44919: CALL_OW 450
44923: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44924: LD_ADDR_VAR 0 2
44928: PUSH
44929: LD_VAR 0 3
44933: PPUSH
44934: LD_INT 1
44936: PPUSH
44937: CALL_OW 275
44941: PUSH
44942: LD_VAR 0 4
44946: PUSH
44947: LD_INT 1
44949: ARRAY
44950: GREATEREQUAL
44951: PUSH
44952: LD_VAR 0 3
44956: PPUSH
44957: LD_INT 2
44959: PPUSH
44960: CALL_OW 275
44964: PUSH
44965: LD_VAR 0 4
44969: PUSH
44970: LD_INT 2
44972: ARRAY
44973: GREATEREQUAL
44974: AND
44975: PUSH
44976: LD_VAR 0 3
44980: PPUSH
44981: LD_INT 3
44983: PPUSH
44984: CALL_OW 275
44988: PUSH
44989: LD_VAR 0 4
44993: PUSH
44994: LD_INT 3
44996: ARRAY
44997: GREATEREQUAL
44998: AND
44999: ST_TO_ADDR
// end ;
45000: LD_VAR 0 2
45004: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45005: LD_INT 0
45007: PPUSH
45008: PPUSH
45009: PPUSH
// pom := GetBase ( building ) ;
45010: LD_ADDR_VAR 0 4
45014: PUSH
45015: LD_VAR 0 1
45019: PPUSH
45020: CALL_OW 274
45024: ST_TO_ADDR
// if not pom then
45025: LD_VAR 0 4
45029: NOT
45030: IFFALSE 45034
// exit ;
45032: GO 45135
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45034: LD_ADDR_VAR 0 5
45038: PUSH
45039: LD_VAR 0 2
45043: PPUSH
45044: LD_VAR 0 1
45048: PPUSH
45049: CALL_OW 248
45053: PPUSH
45054: CALL_OW 450
45058: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45059: LD_ADDR_VAR 0 3
45063: PUSH
45064: LD_VAR 0 4
45068: PPUSH
45069: LD_INT 1
45071: PPUSH
45072: CALL_OW 275
45076: PUSH
45077: LD_VAR 0 5
45081: PUSH
45082: LD_INT 1
45084: ARRAY
45085: GREATEREQUAL
45086: PUSH
45087: LD_VAR 0 4
45091: PPUSH
45092: LD_INT 2
45094: PPUSH
45095: CALL_OW 275
45099: PUSH
45100: LD_VAR 0 5
45104: PUSH
45105: LD_INT 2
45107: ARRAY
45108: GREATEREQUAL
45109: AND
45110: PUSH
45111: LD_VAR 0 4
45115: PPUSH
45116: LD_INT 3
45118: PPUSH
45119: CALL_OW 275
45123: PUSH
45124: LD_VAR 0 5
45128: PUSH
45129: LD_INT 3
45131: ARRAY
45132: GREATEREQUAL
45133: AND
45134: ST_TO_ADDR
// end ;
45135: LD_VAR 0 3
45139: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45140: LD_INT 0
45142: PPUSH
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
// result := false ;
45153: LD_ADDR_VAR 0 8
45157: PUSH
45158: LD_INT 0
45160: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45161: LD_VAR 0 5
45165: NOT
45166: PUSH
45167: LD_VAR 0 1
45171: NOT
45172: OR
45173: PUSH
45174: LD_VAR 0 2
45178: NOT
45179: OR
45180: PUSH
45181: LD_VAR 0 3
45185: NOT
45186: OR
45187: IFFALSE 45191
// exit ;
45189: GO 46005
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45191: LD_ADDR_VAR 0 14
45195: PUSH
45196: LD_VAR 0 1
45200: PPUSH
45201: LD_VAR 0 2
45205: PPUSH
45206: LD_VAR 0 3
45210: PPUSH
45211: LD_VAR 0 4
45215: PPUSH
45216: LD_VAR 0 5
45220: PUSH
45221: LD_INT 1
45223: ARRAY
45224: PPUSH
45225: CALL_OW 248
45229: PPUSH
45230: LD_INT 0
45232: PPUSH
45233: CALL 47258 0 6
45237: ST_TO_ADDR
// if not hexes then
45238: LD_VAR 0 14
45242: NOT
45243: IFFALSE 45247
// exit ;
45245: GO 46005
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45247: LD_ADDR_VAR 0 17
45251: PUSH
45252: LD_VAR 0 5
45256: PPUSH
45257: LD_INT 22
45259: PUSH
45260: LD_VAR 0 13
45264: PPUSH
45265: CALL_OW 255
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: LD_INT 30
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 30
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: LIST
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PPUSH
45306: CALL_OW 72
45310: ST_TO_ADDR
// for i = 1 to hexes do
45311: LD_ADDR_VAR 0 9
45315: PUSH
45316: DOUBLE
45317: LD_INT 1
45319: DEC
45320: ST_TO_ADDR
45321: LD_VAR 0 14
45325: PUSH
45326: FOR_TO
45327: IFFALSE 46003
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45329: LD_ADDR_VAR 0 13
45333: PUSH
45334: LD_VAR 0 14
45338: PUSH
45339: LD_VAR 0 9
45343: ARRAY
45344: PUSH
45345: LD_INT 1
45347: ARRAY
45348: PPUSH
45349: LD_VAR 0 14
45353: PUSH
45354: LD_VAR 0 9
45358: ARRAY
45359: PUSH
45360: LD_INT 2
45362: ARRAY
45363: PPUSH
45364: CALL_OW 428
45368: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45369: LD_VAR 0 14
45373: PUSH
45374: LD_VAR 0 9
45378: ARRAY
45379: PUSH
45380: LD_INT 1
45382: ARRAY
45383: PPUSH
45384: LD_VAR 0 14
45388: PUSH
45389: LD_VAR 0 9
45393: ARRAY
45394: PUSH
45395: LD_INT 2
45397: ARRAY
45398: PPUSH
45399: CALL_OW 351
45403: PUSH
45404: LD_VAR 0 14
45408: PUSH
45409: LD_VAR 0 9
45413: ARRAY
45414: PUSH
45415: LD_INT 1
45417: ARRAY
45418: PPUSH
45419: LD_VAR 0 14
45423: PUSH
45424: LD_VAR 0 9
45428: ARRAY
45429: PUSH
45430: LD_INT 2
45432: ARRAY
45433: PPUSH
45434: CALL_OW 488
45438: NOT
45439: OR
45440: PUSH
45441: LD_VAR 0 13
45445: PPUSH
45446: CALL_OW 247
45450: PUSH
45451: LD_INT 3
45453: EQUAL
45454: OR
45455: IFFALSE 45461
// exit ;
45457: POP
45458: POP
45459: GO 46005
// if not tmp then
45461: LD_VAR 0 13
45465: NOT
45466: IFFALSE 45470
// continue ;
45468: GO 45326
// result := true ;
45470: LD_ADDR_VAR 0 8
45474: PUSH
45475: LD_INT 1
45477: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45478: LD_VAR 0 6
45482: PUSH
45483: LD_VAR 0 13
45487: PPUSH
45488: CALL_OW 247
45492: PUSH
45493: LD_INT 2
45495: EQUAL
45496: AND
45497: PUSH
45498: LD_VAR 0 13
45502: PPUSH
45503: CALL_OW 263
45507: PUSH
45508: LD_INT 1
45510: EQUAL
45511: AND
45512: IFFALSE 45676
// begin if IsDrivenBy ( tmp ) then
45514: LD_VAR 0 13
45518: PPUSH
45519: CALL_OW 311
45523: IFFALSE 45527
// continue ;
45525: GO 45326
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45527: LD_VAR 0 6
45531: PPUSH
45532: LD_INT 3
45534: PUSH
45535: LD_INT 60
45537: PUSH
45538: EMPTY
45539: LIST
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 3
45547: PUSH
45548: LD_INT 55
45550: PUSH
45551: EMPTY
45552: LIST
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PPUSH
45562: CALL_OW 72
45566: IFFALSE 45674
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45568: LD_ADDR_VAR 0 18
45572: PUSH
45573: LD_VAR 0 6
45577: PPUSH
45578: LD_INT 3
45580: PUSH
45581: LD_INT 60
45583: PUSH
45584: EMPTY
45585: LIST
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 3
45593: PUSH
45594: LD_INT 55
45596: PUSH
45597: EMPTY
45598: LIST
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PPUSH
45608: CALL_OW 72
45612: PUSH
45613: LD_INT 1
45615: ARRAY
45616: ST_TO_ADDR
// if IsInUnit ( driver ) then
45617: LD_VAR 0 18
45621: PPUSH
45622: CALL_OW 310
45626: IFFALSE 45637
// ComExit ( driver ) ;
45628: LD_VAR 0 18
45632: PPUSH
45633: CALL 71050 0 1
// AddComEnterUnit ( driver , tmp ) ;
45637: LD_VAR 0 18
45641: PPUSH
45642: LD_VAR 0 13
45646: PPUSH
45647: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45651: LD_VAR 0 18
45655: PPUSH
45656: LD_VAR 0 7
45660: PPUSH
45661: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45665: LD_VAR 0 18
45669: PPUSH
45670: CALL_OW 181
// end ; continue ;
45674: GO 45326
// end ; if not cleaners or not tmp in cleaners then
45676: LD_VAR 0 6
45680: NOT
45681: PUSH
45682: LD_VAR 0 13
45686: PUSH
45687: LD_VAR 0 6
45691: IN
45692: NOT
45693: OR
45694: IFFALSE 46001
// begin if dep then
45696: LD_VAR 0 17
45700: IFFALSE 45836
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45702: LD_ADDR_VAR 0 16
45706: PUSH
45707: LD_VAR 0 17
45711: PUSH
45712: LD_INT 1
45714: ARRAY
45715: PPUSH
45716: CALL_OW 250
45720: PPUSH
45721: LD_VAR 0 17
45725: PUSH
45726: LD_INT 1
45728: ARRAY
45729: PPUSH
45730: CALL_OW 254
45734: PPUSH
45735: LD_INT 5
45737: PPUSH
45738: CALL_OW 272
45742: PUSH
45743: LD_VAR 0 17
45747: PUSH
45748: LD_INT 1
45750: ARRAY
45751: PPUSH
45752: CALL_OW 251
45756: PPUSH
45757: LD_VAR 0 17
45761: PUSH
45762: LD_INT 1
45764: ARRAY
45765: PPUSH
45766: CALL_OW 254
45770: PPUSH
45771: LD_INT 5
45773: PPUSH
45774: CALL_OW 273
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45783: LD_VAR 0 16
45787: PUSH
45788: LD_INT 1
45790: ARRAY
45791: PPUSH
45792: LD_VAR 0 16
45796: PUSH
45797: LD_INT 2
45799: ARRAY
45800: PPUSH
45801: CALL_OW 488
45805: IFFALSE 45836
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45807: LD_VAR 0 13
45811: PPUSH
45812: LD_VAR 0 16
45816: PUSH
45817: LD_INT 1
45819: ARRAY
45820: PPUSH
45821: LD_VAR 0 16
45825: PUSH
45826: LD_INT 2
45828: ARRAY
45829: PPUSH
45830: CALL_OW 111
// continue ;
45834: GO 45326
// end ; end ; r := GetDir ( tmp ) ;
45836: LD_ADDR_VAR 0 15
45840: PUSH
45841: LD_VAR 0 13
45845: PPUSH
45846: CALL_OW 254
45850: ST_TO_ADDR
// if r = 5 then
45851: LD_VAR 0 15
45855: PUSH
45856: LD_INT 5
45858: EQUAL
45859: IFFALSE 45869
// r := 0 ;
45861: LD_ADDR_VAR 0 15
45865: PUSH
45866: LD_INT 0
45868: ST_TO_ADDR
// for j = r to 5 do
45869: LD_ADDR_VAR 0 10
45873: PUSH
45874: DOUBLE
45875: LD_VAR 0 15
45879: DEC
45880: ST_TO_ADDR
45881: LD_INT 5
45883: PUSH
45884: FOR_TO
45885: IFFALSE 45999
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45887: LD_ADDR_VAR 0 11
45891: PUSH
45892: LD_VAR 0 13
45896: PPUSH
45897: CALL_OW 250
45901: PPUSH
45902: LD_VAR 0 10
45906: PPUSH
45907: LD_INT 2
45909: PPUSH
45910: CALL_OW 272
45914: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45915: LD_ADDR_VAR 0 12
45919: PUSH
45920: LD_VAR 0 13
45924: PPUSH
45925: CALL_OW 251
45929: PPUSH
45930: LD_VAR 0 10
45934: PPUSH
45935: LD_INT 2
45937: PPUSH
45938: CALL_OW 273
45942: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45943: LD_VAR 0 11
45947: PPUSH
45948: LD_VAR 0 12
45952: PPUSH
45953: CALL_OW 488
45957: PUSH
45958: LD_VAR 0 11
45962: PPUSH
45963: LD_VAR 0 12
45967: PPUSH
45968: CALL_OW 428
45972: NOT
45973: AND
45974: IFFALSE 45997
// begin ComMoveXY ( tmp , _x , _y ) ;
45976: LD_VAR 0 13
45980: PPUSH
45981: LD_VAR 0 11
45985: PPUSH
45986: LD_VAR 0 12
45990: PPUSH
45991: CALL_OW 111
// break ;
45995: GO 45999
// end ; end ;
45997: GO 45884
45999: POP
46000: POP
// end ; end ;
46001: GO 45326
46003: POP
46004: POP
// end ;
46005: LD_VAR 0 8
46009: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46010: LD_INT 0
46012: PPUSH
// result := true ;
46013: LD_ADDR_VAR 0 3
46017: PUSH
46018: LD_INT 1
46020: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46021: LD_VAR 0 2
46025: PUSH
46026: LD_INT 24
46028: DOUBLE
46029: EQUAL
46030: IFTRUE 46040
46032: LD_INT 33
46034: DOUBLE
46035: EQUAL
46036: IFTRUE 46040
46038: GO 46065
46040: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46041: LD_ADDR_VAR 0 3
46045: PUSH
46046: LD_INT 32
46048: PPUSH
46049: LD_VAR 0 1
46053: PPUSH
46054: CALL_OW 321
46058: PUSH
46059: LD_INT 2
46061: EQUAL
46062: ST_TO_ADDR
46063: GO 46381
46065: LD_INT 20
46067: DOUBLE
46068: EQUAL
46069: IFTRUE 46073
46071: GO 46098
46073: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46074: LD_ADDR_VAR 0 3
46078: PUSH
46079: LD_INT 6
46081: PPUSH
46082: LD_VAR 0 1
46086: PPUSH
46087: CALL_OW 321
46091: PUSH
46092: LD_INT 2
46094: EQUAL
46095: ST_TO_ADDR
46096: GO 46381
46098: LD_INT 22
46100: DOUBLE
46101: EQUAL
46102: IFTRUE 46112
46104: LD_INT 36
46106: DOUBLE
46107: EQUAL
46108: IFTRUE 46112
46110: GO 46137
46112: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46113: LD_ADDR_VAR 0 3
46117: PUSH
46118: LD_INT 15
46120: PPUSH
46121: LD_VAR 0 1
46125: PPUSH
46126: CALL_OW 321
46130: PUSH
46131: LD_INT 2
46133: EQUAL
46134: ST_TO_ADDR
46135: GO 46381
46137: LD_INT 30
46139: DOUBLE
46140: EQUAL
46141: IFTRUE 46145
46143: GO 46170
46145: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46146: LD_ADDR_VAR 0 3
46150: PUSH
46151: LD_INT 20
46153: PPUSH
46154: LD_VAR 0 1
46158: PPUSH
46159: CALL_OW 321
46163: PUSH
46164: LD_INT 2
46166: EQUAL
46167: ST_TO_ADDR
46168: GO 46381
46170: LD_INT 28
46172: DOUBLE
46173: EQUAL
46174: IFTRUE 46184
46176: LD_INT 21
46178: DOUBLE
46179: EQUAL
46180: IFTRUE 46184
46182: GO 46209
46184: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46185: LD_ADDR_VAR 0 3
46189: PUSH
46190: LD_INT 21
46192: PPUSH
46193: LD_VAR 0 1
46197: PPUSH
46198: CALL_OW 321
46202: PUSH
46203: LD_INT 2
46205: EQUAL
46206: ST_TO_ADDR
46207: GO 46381
46209: LD_INT 16
46211: DOUBLE
46212: EQUAL
46213: IFTRUE 46217
46215: GO 46242
46217: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46218: LD_ADDR_VAR 0 3
46222: PUSH
46223: LD_INT 84
46225: PPUSH
46226: LD_VAR 0 1
46230: PPUSH
46231: CALL_OW 321
46235: PUSH
46236: LD_INT 2
46238: EQUAL
46239: ST_TO_ADDR
46240: GO 46381
46242: LD_INT 19
46244: DOUBLE
46245: EQUAL
46246: IFTRUE 46256
46248: LD_INT 23
46250: DOUBLE
46251: EQUAL
46252: IFTRUE 46256
46254: GO 46281
46256: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46257: LD_ADDR_VAR 0 3
46261: PUSH
46262: LD_INT 83
46264: PPUSH
46265: LD_VAR 0 1
46269: PPUSH
46270: CALL_OW 321
46274: PUSH
46275: LD_INT 2
46277: EQUAL
46278: ST_TO_ADDR
46279: GO 46381
46281: LD_INT 17
46283: DOUBLE
46284: EQUAL
46285: IFTRUE 46289
46287: GO 46314
46289: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46290: LD_ADDR_VAR 0 3
46294: PUSH
46295: LD_INT 39
46297: PPUSH
46298: LD_VAR 0 1
46302: PPUSH
46303: CALL_OW 321
46307: PUSH
46308: LD_INT 2
46310: EQUAL
46311: ST_TO_ADDR
46312: GO 46381
46314: LD_INT 18
46316: DOUBLE
46317: EQUAL
46318: IFTRUE 46322
46320: GO 46347
46322: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46323: LD_ADDR_VAR 0 3
46327: PUSH
46328: LD_INT 40
46330: PPUSH
46331: LD_VAR 0 1
46335: PPUSH
46336: CALL_OW 321
46340: PUSH
46341: LD_INT 2
46343: EQUAL
46344: ST_TO_ADDR
46345: GO 46381
46347: LD_INT 27
46349: DOUBLE
46350: EQUAL
46351: IFTRUE 46355
46353: GO 46380
46355: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46356: LD_ADDR_VAR 0 3
46360: PUSH
46361: LD_INT 35
46363: PPUSH
46364: LD_VAR 0 1
46368: PPUSH
46369: CALL_OW 321
46373: PUSH
46374: LD_INT 2
46376: EQUAL
46377: ST_TO_ADDR
46378: GO 46381
46380: POP
// end ;
46381: LD_VAR 0 3
46385: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46386: LD_INT 0
46388: PPUSH
46389: PPUSH
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
46394: PPUSH
46395: PPUSH
46396: PPUSH
46397: PPUSH
46398: PPUSH
// result := false ;
46399: LD_ADDR_VAR 0 6
46403: PUSH
46404: LD_INT 0
46406: ST_TO_ADDR
// if btype = b_depot then
46407: LD_VAR 0 2
46411: PUSH
46412: LD_INT 0
46414: EQUAL
46415: IFFALSE 46427
// begin result := true ;
46417: LD_ADDR_VAR 0 6
46421: PUSH
46422: LD_INT 1
46424: ST_TO_ADDR
// exit ;
46425: GO 47253
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46427: LD_VAR 0 1
46431: NOT
46432: PUSH
46433: LD_VAR 0 1
46437: PPUSH
46438: CALL_OW 266
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: IN
46453: NOT
46454: OR
46455: PUSH
46456: LD_VAR 0 2
46460: NOT
46461: OR
46462: PUSH
46463: LD_VAR 0 5
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: LD_INT 4
46482: PUSH
46483: LD_INT 5
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: IN
46494: NOT
46495: OR
46496: PUSH
46497: LD_VAR 0 3
46501: PPUSH
46502: LD_VAR 0 4
46506: PPUSH
46507: CALL_OW 488
46511: NOT
46512: OR
46513: IFFALSE 46517
// exit ;
46515: GO 47253
// side := GetSide ( depot ) ;
46517: LD_ADDR_VAR 0 9
46521: PUSH
46522: LD_VAR 0 1
46526: PPUSH
46527: CALL_OW 255
46531: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46532: LD_VAR 0 9
46536: PPUSH
46537: LD_VAR 0 2
46541: PPUSH
46542: CALL 46010 0 2
46546: NOT
46547: IFFALSE 46551
// exit ;
46549: GO 47253
// pom := GetBase ( depot ) ;
46551: LD_ADDR_VAR 0 10
46555: PUSH
46556: LD_VAR 0 1
46560: PPUSH
46561: CALL_OW 274
46565: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46566: LD_ADDR_VAR 0 11
46570: PUSH
46571: LD_VAR 0 2
46575: PPUSH
46576: LD_VAR 0 1
46580: PPUSH
46581: CALL_OW 248
46585: PPUSH
46586: CALL_OW 450
46590: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46591: LD_VAR 0 10
46595: PPUSH
46596: LD_INT 1
46598: PPUSH
46599: CALL_OW 275
46603: PUSH
46604: LD_VAR 0 11
46608: PUSH
46609: LD_INT 1
46611: ARRAY
46612: GREATEREQUAL
46613: PUSH
46614: LD_VAR 0 10
46618: PPUSH
46619: LD_INT 2
46621: PPUSH
46622: CALL_OW 275
46626: PUSH
46627: LD_VAR 0 11
46631: PUSH
46632: LD_INT 2
46634: ARRAY
46635: GREATEREQUAL
46636: AND
46637: PUSH
46638: LD_VAR 0 10
46642: PPUSH
46643: LD_INT 3
46645: PPUSH
46646: CALL_OW 275
46650: PUSH
46651: LD_VAR 0 11
46655: PUSH
46656: LD_INT 3
46658: ARRAY
46659: GREATEREQUAL
46660: AND
46661: NOT
46662: IFFALSE 46666
// exit ;
46664: GO 47253
// if GetBType ( depot ) = b_depot then
46666: LD_VAR 0 1
46670: PPUSH
46671: CALL_OW 266
46675: PUSH
46676: LD_INT 0
46678: EQUAL
46679: IFFALSE 46691
// dist := 28 else
46681: LD_ADDR_VAR 0 14
46685: PUSH
46686: LD_INT 28
46688: ST_TO_ADDR
46689: GO 46699
// dist := 36 ;
46691: LD_ADDR_VAR 0 14
46695: PUSH
46696: LD_INT 36
46698: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46699: LD_VAR 0 1
46703: PPUSH
46704: LD_VAR 0 3
46708: PPUSH
46709: LD_VAR 0 4
46713: PPUSH
46714: CALL_OW 297
46718: PUSH
46719: LD_VAR 0 14
46723: GREATER
46724: IFFALSE 46728
// exit ;
46726: GO 47253
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46728: LD_ADDR_VAR 0 12
46732: PUSH
46733: LD_VAR 0 2
46737: PPUSH
46738: LD_VAR 0 3
46742: PPUSH
46743: LD_VAR 0 4
46747: PPUSH
46748: LD_VAR 0 5
46752: PPUSH
46753: LD_VAR 0 1
46757: PPUSH
46758: CALL_OW 248
46762: PPUSH
46763: LD_INT 0
46765: PPUSH
46766: CALL 47258 0 6
46770: ST_TO_ADDR
// if not hexes then
46771: LD_VAR 0 12
46775: NOT
46776: IFFALSE 46780
// exit ;
46778: GO 47253
// hex := GetHexInfo ( x , y ) ;
46780: LD_ADDR_VAR 0 15
46784: PUSH
46785: LD_VAR 0 3
46789: PPUSH
46790: LD_VAR 0 4
46794: PPUSH
46795: CALL_OW 546
46799: ST_TO_ADDR
// if hex [ 1 ] then
46800: LD_VAR 0 15
46804: PUSH
46805: LD_INT 1
46807: ARRAY
46808: IFFALSE 46812
// exit ;
46810: GO 47253
// height := hex [ 2 ] ;
46812: LD_ADDR_VAR 0 13
46816: PUSH
46817: LD_VAR 0 15
46821: PUSH
46822: LD_INT 2
46824: ARRAY
46825: ST_TO_ADDR
// for i = 1 to hexes do
46826: LD_ADDR_VAR 0 7
46830: PUSH
46831: DOUBLE
46832: LD_INT 1
46834: DEC
46835: ST_TO_ADDR
46836: LD_VAR 0 12
46840: PUSH
46841: FOR_TO
46842: IFFALSE 47172
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46844: LD_VAR 0 12
46848: PUSH
46849: LD_VAR 0 7
46853: ARRAY
46854: PUSH
46855: LD_INT 1
46857: ARRAY
46858: PPUSH
46859: LD_VAR 0 12
46863: PUSH
46864: LD_VAR 0 7
46868: ARRAY
46869: PUSH
46870: LD_INT 2
46872: ARRAY
46873: PPUSH
46874: CALL_OW 488
46878: NOT
46879: PUSH
46880: LD_VAR 0 12
46884: PUSH
46885: LD_VAR 0 7
46889: ARRAY
46890: PUSH
46891: LD_INT 1
46893: ARRAY
46894: PPUSH
46895: LD_VAR 0 12
46899: PUSH
46900: LD_VAR 0 7
46904: ARRAY
46905: PUSH
46906: LD_INT 2
46908: ARRAY
46909: PPUSH
46910: CALL_OW 428
46914: PUSH
46915: LD_INT 0
46917: GREATER
46918: OR
46919: PUSH
46920: LD_VAR 0 12
46924: PUSH
46925: LD_VAR 0 7
46929: ARRAY
46930: PUSH
46931: LD_INT 1
46933: ARRAY
46934: PPUSH
46935: LD_VAR 0 12
46939: PUSH
46940: LD_VAR 0 7
46944: ARRAY
46945: PUSH
46946: LD_INT 2
46948: ARRAY
46949: PPUSH
46950: CALL_OW 351
46954: OR
46955: IFFALSE 46961
// exit ;
46957: POP
46958: POP
46959: GO 47253
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46961: LD_ADDR_VAR 0 8
46965: PUSH
46966: LD_VAR 0 12
46970: PUSH
46971: LD_VAR 0 7
46975: ARRAY
46976: PUSH
46977: LD_INT 1
46979: ARRAY
46980: PPUSH
46981: LD_VAR 0 12
46985: PUSH
46986: LD_VAR 0 7
46990: ARRAY
46991: PUSH
46992: LD_INT 2
46994: ARRAY
46995: PPUSH
46996: CALL_OW 546
47000: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47001: LD_VAR 0 8
47005: PUSH
47006: LD_INT 1
47008: ARRAY
47009: PUSH
47010: LD_VAR 0 8
47014: PUSH
47015: LD_INT 2
47017: ARRAY
47018: PUSH
47019: LD_VAR 0 13
47023: PUSH
47024: LD_INT 2
47026: PLUS
47027: GREATER
47028: OR
47029: PUSH
47030: LD_VAR 0 8
47034: PUSH
47035: LD_INT 2
47037: ARRAY
47038: PUSH
47039: LD_VAR 0 13
47043: PUSH
47044: LD_INT 2
47046: MINUS
47047: LESS
47048: OR
47049: PUSH
47050: LD_VAR 0 8
47054: PUSH
47055: LD_INT 3
47057: ARRAY
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 8
47064: PUSH
47065: LD_INT 9
47067: PUSH
47068: LD_INT 10
47070: PUSH
47071: LD_INT 11
47073: PUSH
47074: LD_INT 12
47076: PUSH
47077: LD_INT 13
47079: PUSH
47080: LD_INT 16
47082: PUSH
47083: LD_INT 17
47085: PUSH
47086: LD_INT 18
47088: PUSH
47089: LD_INT 19
47091: PUSH
47092: LD_INT 20
47094: PUSH
47095: LD_INT 21
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: IN
47113: NOT
47114: OR
47115: PUSH
47116: LD_VAR 0 8
47120: PUSH
47121: LD_INT 5
47123: ARRAY
47124: NOT
47125: OR
47126: PUSH
47127: LD_VAR 0 8
47131: PUSH
47132: LD_INT 6
47134: ARRAY
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: LD_INT 7
47144: PUSH
47145: LD_INT 9
47147: PUSH
47148: LD_INT 10
47150: PUSH
47151: LD_INT 11
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: IN
47162: NOT
47163: OR
47164: IFFALSE 47170
// exit ;
47166: POP
47167: POP
47168: GO 47253
// end ;
47170: GO 46841
47172: POP
47173: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47174: LD_VAR 0 9
47178: PPUSH
47179: LD_VAR 0 3
47183: PPUSH
47184: LD_VAR 0 4
47188: PPUSH
47189: LD_INT 20
47191: PPUSH
47192: CALL 39176 0 4
47196: PUSH
47197: LD_INT 4
47199: ARRAY
47200: IFFALSE 47204
// exit ;
47202: GO 47253
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47204: LD_VAR 0 2
47208: PUSH
47209: LD_INT 29
47211: PUSH
47212: LD_INT 30
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: IN
47219: PUSH
47220: LD_VAR 0 3
47224: PPUSH
47225: LD_VAR 0 4
47229: PPUSH
47230: LD_VAR 0 9
47234: PPUSH
47235: CALL_OW 440
47239: NOT
47240: AND
47241: IFFALSE 47245
// exit ;
47243: GO 47253
// result := true ;
47245: LD_ADDR_VAR 0 6
47249: PUSH
47250: LD_INT 1
47252: ST_TO_ADDR
// end ;
47253: LD_VAR 0 6
47257: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47258: LD_INT 0
47260: PPUSH
47261: PPUSH
47262: PPUSH
47263: PPUSH
47264: PPUSH
47265: PPUSH
47266: PPUSH
47267: PPUSH
47268: PPUSH
47269: PPUSH
47270: PPUSH
47271: PPUSH
47272: PPUSH
47273: PPUSH
47274: PPUSH
47275: PPUSH
47276: PPUSH
47277: PPUSH
47278: PPUSH
47279: PPUSH
47280: PPUSH
47281: PPUSH
47282: PPUSH
47283: PPUSH
47284: PPUSH
47285: PPUSH
47286: PPUSH
47287: PPUSH
47288: PPUSH
47289: PPUSH
47290: PPUSH
47291: PPUSH
47292: PPUSH
47293: PPUSH
47294: PPUSH
47295: PPUSH
47296: PPUSH
47297: PPUSH
47298: PPUSH
47299: PPUSH
47300: PPUSH
47301: PPUSH
47302: PPUSH
47303: PPUSH
47304: PPUSH
47305: PPUSH
47306: PPUSH
47307: PPUSH
47308: PPUSH
47309: PPUSH
47310: PPUSH
47311: PPUSH
47312: PPUSH
47313: PPUSH
47314: PPUSH
47315: PPUSH
47316: PPUSH
47317: PPUSH
// result = [ ] ;
47318: LD_ADDR_VAR 0 7
47322: PUSH
47323: EMPTY
47324: ST_TO_ADDR
// temp_list = [ ] ;
47325: LD_ADDR_VAR 0 9
47329: PUSH
47330: EMPTY
47331: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47332: LD_VAR 0 4
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: LD_INT 4
47351: PUSH
47352: LD_INT 5
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: IN
47363: NOT
47364: PUSH
47365: LD_VAR 0 1
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: IN
47380: PUSH
47381: LD_VAR 0 5
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: LIST
47399: IN
47400: NOT
47401: AND
47402: OR
47403: IFFALSE 47407
// exit ;
47405: GO 65798
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47407: LD_VAR 0 1
47411: PUSH
47412: LD_INT 6
47414: PUSH
47415: LD_INT 7
47417: PUSH
47418: LD_INT 8
47420: PUSH
47421: LD_INT 13
47423: PUSH
47424: LD_INT 12
47426: PUSH
47427: LD_INT 15
47429: PUSH
47430: LD_INT 11
47432: PUSH
47433: LD_INT 14
47435: PUSH
47436: LD_INT 10
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: IN
47450: IFFALSE 47460
// btype = b_lab ;
47452: LD_ADDR_VAR 0 1
47456: PUSH
47457: LD_INT 6
47459: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47460: LD_VAR 0 6
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: LIST
47478: IN
47479: NOT
47480: PUSH
47481: LD_VAR 0 1
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 3
47497: PUSH
47498: LD_INT 6
47500: PUSH
47501: LD_INT 36
47503: PUSH
47504: LD_INT 4
47506: PUSH
47507: LD_INT 5
47509: PUSH
47510: LD_INT 31
47512: PUSH
47513: LD_INT 32
47515: PUSH
47516: LD_INT 33
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: IN
47532: NOT
47533: PUSH
47534: LD_VAR 0 6
47538: PUSH
47539: LD_INT 1
47541: EQUAL
47542: AND
47543: OR
47544: PUSH
47545: LD_VAR 0 1
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: IN
47560: NOT
47561: PUSH
47562: LD_VAR 0 6
47566: PUSH
47567: LD_INT 2
47569: EQUAL
47570: AND
47571: OR
47572: IFFALSE 47582
// mode = 0 ;
47574: LD_ADDR_VAR 0 6
47578: PUSH
47579: LD_INT 0
47581: ST_TO_ADDR
// case mode of 0 :
47582: LD_VAR 0 6
47586: PUSH
47587: LD_INT 0
47589: DOUBLE
47590: EQUAL
47591: IFTRUE 47595
47593: GO 59048
47595: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47596: LD_ADDR_VAR 0 11
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: LD_INT 2
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 3
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 3
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47789: LD_ADDR_VAR 0 12
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: NEG
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 3
47946: NEG
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 3
47957: NEG
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47985: LD_ADDR_VAR 0 13
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: LD_INT 3
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 3
48144: NEG
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 3
48156: NEG
48157: PUSH
48158: LD_INT 3
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48184: LD_ADDR_VAR 0 14
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 2
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 3
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 3
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48380: LD_ADDR_VAR 0 15
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 3
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 3
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48573: LD_ADDR_VAR 0 16
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: LD_INT 2
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 3
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 3
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48766: LD_ADDR_VAR 0 17
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48996: LD_ADDR_VAR 0 18
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49226: LD_ADDR_VAR 0 19
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: LD_INT 2
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49456: LD_ADDR_VAR 0 20
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49686: LD_ADDR_VAR 0 21
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49916: LD_ADDR_VAR 0 22
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50146: LD_ADDR_VAR 0 23
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 3
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: LD_INT 3
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50426: LD_ADDR_VAR 0 24
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: NEG
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 3
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 3
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50702: LD_ADDR_VAR 0 25
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 2
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 3
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 3
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: LD_INT 3
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 3
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50976: LD_ADDR_VAR 0 26
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: NEG
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51252: LD_ADDR_VAR 0 27
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 2
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51532: LD_ADDR_VAR 0 28
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: LD_INT 3
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 3
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51814: LD_ADDR_VAR 0 29
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: NEG
52005: PUSH
52006: LD_INT 3
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 3
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 3
52058: NEG
52059: PUSH
52060: LD_INT 2
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52093: LD_ADDR_VAR 0 30
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 3
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 3
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: LD_INT 3
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 3
52336: NEG
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52371: LD_ADDR_VAR 0 31
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 3
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 3
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 3
52614: NEG
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52649: LD_ADDR_VAR 0 32
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 3
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: PUSH
52872: LD_INT 3
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: NEG
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52927: LD_ADDR_VAR 0 33
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: LD_INT 3
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 3
53171: NEG
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53206: LD_ADDR_VAR 0 34
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: LD_INT 3
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 3
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53486: LD_ADDR_VAR 0 35
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53598: LD_ADDR_VAR 0 36
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53710: LD_ADDR_VAR 0 37
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53822: LD_ADDR_VAR 0 38
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53934: LD_ADDR_VAR 0 39
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54046: LD_ADDR_VAR 0 40
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54158: LD_ADDR_VAR 0 41
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 3
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 3
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 3
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: LD_INT 3
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 3
54432: NEG
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 3
54467: NEG
54468: PUSH
54469: LD_INT 3
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54508: LD_ADDR_VAR 0 42
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 3
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 3
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 3
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 3
54754: PUSH
54755: LD_INT 3
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 3
54805: NEG
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 3
54817: NEG
54818: PUSH
54819: LD_INT 3
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54858: LD_ADDR_VAR 0 43
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 3
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 3
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 3
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 3
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55206: LD_ADDR_VAR 0 44
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: LD_INT 2
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 3
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 3
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 3
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 3
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 3
55449: PUSH
55450: LD_INT 3
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 3
55480: NEG
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 3
55503: NEG
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 3
55515: NEG
55516: PUSH
55517: LD_INT 3
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55556: LD_ADDR_VAR 0 45
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: LD_INT 3
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 2
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: LD_INT 3
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 3
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 3
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 3
55853: NEG
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 3
55865: NEG
55866: PUSH
55867: LD_INT 3
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55906: LD_ADDR_VAR 0 46
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 3
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 3
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 3
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 3
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 3
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 3
56202: NEG
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56254: LD_ADDR_VAR 0 47
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56405: LD_ADDR_VAR 0 48
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56552: LD_ADDR_VAR 0 49
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56696: LD_ADDR_VAR 0 50
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56840: LD_ADDR_VAR 0 51
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56987: LD_ADDR_VAR 0 52
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 2
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57138: LD_ADDR_VAR 0 53
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: LD_INT 2
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57368: LD_ADDR_VAR 0 54
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57598: LD_ADDR_VAR 0 55
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57828: LD_ADDR_VAR 0 56
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58058: LD_ADDR_VAR 0 57
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: LD_INT 2
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58288: LD_ADDR_VAR 0 58
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: NEG
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58518: LD_ADDR_VAR 0 59
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58606: LD_ADDR_VAR 0 60
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58694: LD_ADDR_VAR 0 61
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58782: LD_ADDR_VAR 0 62
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58870: LD_ADDR_VAR 0 63
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58958: LD_ADDR_VAR 0 64
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: ST_TO_ADDR
// end ; 1 :
59046: GO 64943
59048: LD_INT 1
59050: DOUBLE
59051: EQUAL
59052: IFTRUE 59056
59054: GO 61679
59056: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59057: LD_ADDR_VAR 0 11
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: LD_INT 3
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: LD_INT 3
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59101: LD_ADDR_VAR 0 12
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: LIST
59141: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59142: LD_ADDR_VAR 0 13
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: LIST
59181: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59182: LD_ADDR_VAR 0 14
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: LD_INT 3
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 3
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59223: LD_ADDR_VAR 0 15
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: NEG
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: LIST
59266: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59267: LD_ADDR_VAR 0 16
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: LD_INT 3
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: LD_INT 2
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 3
59298: NEG
59299: PUSH
59300: LD_INT 3
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: LIST
59312: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59313: LD_ADDR_VAR 0 17
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: LD_INT 2
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59357: LD_ADDR_VAR 0 18
59361: PUSH
59362: LD_INT 2
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 3
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 3
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: LIST
59397: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59398: LD_ADDR_VAR 0 19
59402: PUSH
59403: LD_INT 3
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 3
59415: PUSH
59416: LD_INT 3
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: LD_INT 3
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: LIST
59437: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59438: LD_ADDR_VAR 0 20
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 3
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 3
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: LD_INT 2
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59479: LD_ADDR_VAR 0 21
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 3
59497: NEG
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: NEG
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59523: LD_ADDR_VAR 0 22
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: LD_INT 3
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 3
59542: NEG
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: LD_INT 3
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: LIST
59568: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59569: LD_ADDR_VAR 0 23
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 4
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: LD_INT 3
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59613: LD_ADDR_VAR 0 24
59617: PUSH
59618: LD_INT 3
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 3
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 4
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: LIST
59653: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59654: LD_ADDR_VAR 0 25
59658: PUSH
59659: LD_INT 3
59661: PUSH
59662: LD_INT 3
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 4
59671: PUSH
59672: LD_INT 3
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: LD_INT 4
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: LIST
59693: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59694: LD_ADDR_VAR 0 26
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: LD_INT 4
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: LD_INT 3
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: LIST
59734: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59735: LD_ADDR_VAR 0 27
59739: PUSH
59740: LD_INT 3
59742: NEG
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 4
59764: NEG
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: LIST
59778: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59779: LD_ADDR_VAR 0 28
59783: PUSH
59784: LD_INT 3
59786: NEG
59787: PUSH
59788: LD_INT 3
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 3
59798: NEG
59799: PUSH
59800: LD_INT 4
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 4
59810: NEG
59811: PUSH
59812: LD_INT 3
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: LIST
59824: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59825: LD_ADDR_VAR 0 29
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 3
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 3
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: LD_INT 4
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: LD_INT 4
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: LD_INT 3
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 5
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 5
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 4
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 6
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: LD_INT 6
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: LD_INT 5
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59980: LD_ADDR_VAR 0 30
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 3
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 3
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 3
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 4
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 4
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 4
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 5
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 5
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 5
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 6
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 6
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60123: LD_ADDR_VAR 0 31
60127: PUSH
60128: LD_INT 3
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 3
60140: PUSH
60141: LD_INT 3
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 4
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 4
60170: PUSH
60171: LD_INT 4
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 3
60180: PUSH
60181: LD_INT 4
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 5
60190: PUSH
60191: LD_INT 4
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 5
60200: PUSH
60201: LD_INT 5
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 4
60210: PUSH
60211: LD_INT 5
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 6
60220: PUSH
60221: LD_INT 5
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 6
60230: PUSH
60231: LD_INT 6
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 5
60240: PUSH
60241: LD_INT 6
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60262: LD_ADDR_VAR 0 32
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 4
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: LD_INT 4
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: LD_INT 3
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 5
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 5
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 4
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: LD_INT 6
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: LD_INT 6
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: LD_INT 5
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60405: LD_ADDR_VAR 0 33
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 3
60434: NEG
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: NEG
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 4
60457: NEG
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 4
60468: NEG
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 4
60480: NEG
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 5
60491: NEG
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 5
60502: NEG
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 5
60514: NEG
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 6
60525: NEG
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 6
60536: NEG
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60560: LD_ADDR_VAR 0 34
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: LD_INT 3
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 3
60591: NEG
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: NEG
60604: PUSH
60605: LD_INT 4
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 4
60615: NEG
60616: PUSH
60617: LD_INT 3
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 4
60627: NEG
60628: PUSH
60629: LD_INT 4
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 4
60639: NEG
60640: PUSH
60641: LD_INT 5
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 5
60651: NEG
60652: PUSH
60653: LD_INT 4
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 5
60663: NEG
60664: PUSH
60665: LD_INT 5
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 5
60675: NEG
60676: PUSH
60677: LD_INT 6
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 6
60687: NEG
60688: PUSH
60689: LD_INT 5
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 6
60699: NEG
60700: PUSH
60701: LD_INT 6
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60723: LD_ADDR_VAR 0 41
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 2
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: LD_INT 3
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: LD_INT 2
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60767: LD_ADDR_VAR 0 42
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 3
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: LIST
60807: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60808: LD_ADDR_VAR 0 43
60812: PUSH
60813: LD_INT 2
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: LIST
60847: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60848: LD_ADDR_VAR 0 44
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: LD_INT 2
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: LIST
60888: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60889: LD_ADDR_VAR 0 45
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 3
60918: NEG
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: LIST
60932: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60933: LD_ADDR_VAR 0 46
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: LD_INT 2
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: LD_INT 3
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 3
60964: NEG
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: LIST
60978: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60979: LD_ADDR_VAR 0 47
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: LD_INT 3
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: LD_INT 3
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61012: LD_ADDR_VAR 0 48
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61043: LD_ADDR_VAR 0 49
61047: PUSH
61048: LD_INT 3
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 3
61060: PUSH
61061: LD_INT 2
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61072: LD_ADDR_VAR 0 50
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: LD_INT 3
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: LD_INT 3
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61101: LD_ADDR_VAR 0 51
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: PUSH
61110: LD_INT 2
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61132: LD_ADDR_VAR 0 52
61136: PUSH
61137: LD_INT 3
61139: NEG
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 3
61151: NEG
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61165: LD_ADDR_VAR 0 53
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 3
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: LD_INT 3
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: LIST
61208: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61209: LD_ADDR_VAR 0 54
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 3
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: LIST
61249: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61250: LD_ADDR_VAR 0 55
61254: PUSH
61255: LD_INT 3
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 3
61267: PUSH
61268: LD_INT 3
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: LD_INT 3
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: LIST
61289: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61290: LD_ADDR_VAR 0 56
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 2
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: LIST
61330: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61331: LD_ADDR_VAR 0 57
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 3
61349: NEG
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: LIST
61374: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61375: LD_ADDR_VAR 0 58
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: LD_INT 3
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: LD_INT 3
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61421: LD_ADDR_VAR 0 59
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: LIST
61464: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61465: LD_ADDR_VAR 0 60
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 2
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 2
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61506: LD_ADDR_VAR 0 61
61510: PUSH
61511: LD_INT 2
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: LD_INT 2
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: LIST
61545: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61546: LD_ADDR_VAR 0 62
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: LIST
61586: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61587: LD_ADDR_VAR 0 63
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 2
61616: NEG
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: LIST
61630: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61631: LD_ADDR_VAR 0 64
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// end ; 2 :
61677: GO 64943
61679: LD_INT 2
61681: DOUBLE
61682: EQUAL
61683: IFTRUE 61687
61685: GO 64942
61687: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61688: LD_ADDR_VAR 0 29
61692: PUSH
61693: LD_INT 4
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 4
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 5
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 5
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 4
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 3
61767: PUSH
61768: LD_INT 2
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 5
61778: PUSH
61779: LD_INT 2
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 3
61788: PUSH
61789: LD_INT 3
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 3
61798: PUSH
61799: LD_INT 2
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 4
61808: PUSH
61809: LD_INT 3
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 4
61818: PUSH
61819: LD_INT 4
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 3
61828: PUSH
61829: LD_INT 4
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: LD_INT 3
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 2
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 4
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 2
61868: PUSH
61869: LD_INT 4
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: LD_INT 4
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 3
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 4
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: LD_INT 5
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 5
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: LD_INT 4
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: LD_INT 3
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: LD_INT 5
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 2
61960: NEG
61961: PUSH
61962: LD_INT 3
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 3
61971: NEG
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 3
61982: NEG
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 2
61994: NEG
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 3
62016: NEG
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 4
62027: NEG
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 4
62038: NEG
62039: PUSH
62040: LD_INT 1
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 4
62050: NEG
62051: PUSH
62052: LD_INT 2
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: NEG
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 4
62073: NEG
62074: PUSH
62075: LD_INT 4
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 4
62085: NEG
62086: PUSH
62087: LD_INT 5
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 3
62097: NEG
62098: PUSH
62099: LD_INT 4
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 3
62109: NEG
62110: PUSH
62111: LD_INT 3
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 4
62121: NEG
62122: PUSH
62123: LD_INT 3
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 5
62133: NEG
62134: PUSH
62135: LD_INT 4
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 5
62145: NEG
62146: PUSH
62147: LD_INT 5
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: LD_INT 5
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 5
62169: NEG
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62226: LD_ADDR_VAR 0 30
62230: PUSH
62231: LD_INT 4
62233: PUSH
62234: LD_INT 4
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 4
62243: PUSH
62244: LD_INT 3
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 5
62253: PUSH
62254: LD_INT 4
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 5
62263: PUSH
62264: LD_INT 5
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 4
62273: PUSH
62274: LD_INT 5
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 3
62283: PUSH
62284: LD_INT 4
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 3
62293: PUSH
62294: LD_INT 3
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 5
62303: PUSH
62304: LD_INT 3
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 3
62313: PUSH
62314: LD_INT 5
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: LD_INT 3
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: LD_INT 3
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: LD_INT 4
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 4
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: LD_INT 3
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: NEG
62385: PUSH
62386: LD_INT 2
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: PUSH
62396: LD_INT 4
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 2
62405: NEG
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 4
62416: NEG
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 4
62427: NEG
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 3
62439: NEG
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 3
62450: NEG
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 4
62461: NEG
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 5
62472: NEG
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 5
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 5
62495: NEG
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 3
62507: NEG
62508: PUSH
62509: LD_INT 2
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 3
62518: NEG
62519: PUSH
62520: LD_INT 3
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 3
62530: NEG
62531: PUSH
62532: LD_INT 4
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 2
62542: NEG
62543: PUSH
62544: LD_INT 3
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 2
62554: NEG
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 3
62566: NEG
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 4
62578: NEG
62579: PUSH
62580: LD_INT 3
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 4
62590: NEG
62591: PUSH
62592: LD_INT 4
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: LD_INT 4
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 4
62614: NEG
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 4
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: LD_INT 5
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: LD_INT 4
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: LD_INT 3
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 3
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: LD_INT 4
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: LD_INT 5
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 3
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: LD_INT 5
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62773: LD_ADDR_VAR 0 31
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: LD_INT 4
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: LD_INT 3
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: PUSH
62801: LD_INT 4
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: LD_INT 5
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 0
62820: PUSH
62821: LD_INT 5
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: LD_INT 4
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 1
62841: NEG
62842: PUSH
62843: LD_INT 3
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: LD_INT 5
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 2
62862: NEG
62863: PUSH
62864: LD_INT 3
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 3
62873: NEG
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 3
62884: NEG
62885: PUSH
62886: LD_INT 1
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 2
62896: NEG
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 3
62918: NEG
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 4
62929: NEG
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 4
62940: NEG
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 4
62952: NEG
62953: PUSH
62954: LD_INT 2
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: NEG
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 4
62975: NEG
62976: PUSH
62977: LD_INT 4
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 4
62987: NEG
62988: PUSH
62989: LD_INT 5
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 3
62999: NEG
63000: PUSH
63001: LD_INT 4
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 3
63011: NEG
63012: PUSH
63013: LD_INT 3
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 4
63023: NEG
63024: PUSH
63025: LD_INT 3
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 5
63035: NEG
63036: PUSH
63037: LD_INT 4
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 5
63047: NEG
63048: PUSH
63049: LD_INT 5
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: LD_INT 5
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 5
63071: NEG
63072: PUSH
63073: LD_INT 3
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: LD_INT 3
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: LD_INT 4
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 3
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: LD_INT 2
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: PUSH
63152: LD_INT 4
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: LD_INT 2
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: LD_INT 4
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 4
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 4
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 5
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 5
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 4
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 3
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 3
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 3
63257: PUSH
63258: LD_INT 2
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 5
63268: PUSH
63269: LD_INT 2
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63323: LD_ADDR_VAR 0 32
63327: PUSH
63328: LD_INT 4
63330: NEG
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 4
63341: NEG
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 3
63353: NEG
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 3
63364: NEG
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 4
63375: NEG
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 5
63386: NEG
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 5
63397: NEG
63398: PUSH
63399: LD_INT 1
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 5
63409: NEG
63410: PUSH
63411: LD_INT 2
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 3
63421: NEG
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 3
63432: NEG
63433: PUSH
63434: LD_INT 3
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 3
63444: NEG
63445: PUSH
63446: LD_INT 4
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 2
63456: NEG
63457: PUSH
63458: LD_INT 3
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: NEG
63469: PUSH
63470: LD_INT 2
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 3
63480: NEG
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 4
63492: NEG
63493: PUSH
63494: LD_INT 3
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 4
63504: NEG
63505: PUSH
63506: LD_INT 4
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 2
63516: NEG
63517: PUSH
63518: LD_INT 4
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 4
63528: NEG
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 4
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 5
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: LD_INT 4
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: LD_INT 3
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: LD_INT 3
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: LD_INT 4
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 5
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 2
63619: PUSH
63620: LD_INT 3
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 2
63630: NEG
63631: PUSH
63632: LD_INT 5
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 3
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 3
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 4
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 4
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 3
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 2
63693: PUSH
63694: LD_INT 0
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 4
63725: PUSH
63726: LD_INT 2
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 4
63735: PUSH
63736: LD_INT 4
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 4
63745: PUSH
63746: LD_INT 3
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 5
63755: PUSH
63756: LD_INT 4
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 5
63765: PUSH
63766: LD_INT 5
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 4
63775: PUSH
63776: LD_INT 5
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 3
63785: PUSH
63786: LD_INT 4
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 3
63795: PUSH
63796: LD_INT 3
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 5
63805: PUSH
63806: LD_INT 3
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 3
63815: PUSH
63816: LD_INT 5
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63870: LD_ADDR_VAR 0 33
63874: PUSH
63875: LD_INT 4
63877: NEG
63878: PUSH
63879: LD_INT 4
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 4
63889: NEG
63890: PUSH
63891: LD_INT 5
63893: NEG
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 3
63901: NEG
63902: PUSH
63903: LD_INT 4
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 3
63913: NEG
63914: PUSH
63915: LD_INT 3
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 4
63925: NEG
63926: PUSH
63927: LD_INT 3
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 5
63937: NEG
63938: PUSH
63939: LD_INT 4
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 5
63949: NEG
63950: PUSH
63951: LD_INT 5
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 3
63961: NEG
63962: PUSH
63963: LD_INT 5
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 5
63973: NEG
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: LD_INT 3
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: LD_INT 4
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: LD_INT 3
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: LD_INT 2
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 2
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: LD_INT 3
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: PUSH
64054: LD_INT 4
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 2
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 2
64075: NEG
64076: PUSH
64077: LD_INT 4
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 4
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 4
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 5
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 5
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 4
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 3
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 3
64148: PUSH
64149: LD_INT 1
64151: NEG
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 3
64159: PUSH
64160: LD_INT 2
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 5
64170: PUSH
64171: LD_INT 2
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 3
64180: PUSH
64181: LD_INT 3
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: LD_INT 2
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 4
64200: PUSH
64201: LD_INT 3
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 4
64210: PUSH
64211: LD_INT 4
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 3
64220: PUSH
64221: LD_INT 4
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: PUSH
64231: LD_INT 3
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 2
64240: PUSH
64241: LD_INT 2
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 4
64250: PUSH
64251: LD_INT 2
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 2
64260: PUSH
64261: LD_INT 4
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 4
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: LD_INT 3
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: LD_INT 4
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: LD_INT 5
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 5
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: LD_INT 4
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 2
64342: PUSH
64343: LD_INT 5
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 2
64352: NEG
64353: PUSH
64354: LD_INT 3
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64408: LD_ADDR_VAR 0 34
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: LD_INT 4
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 5
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 4
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: LD_INT 3
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: LD_INT 3
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: LD_INT 4
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: LD_INT 5
64486: NEG
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: LD_INT 3
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 2
64505: NEG
64506: PUSH
64507: LD_INT 5
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 3
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 3
64527: PUSH
64528: LD_INT 1
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 4
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 4
64548: PUSH
64549: LD_INT 1
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 3
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 2
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 2
64578: PUSH
64579: LD_INT 1
64581: NEG
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 2
64589: PUSH
64590: LD_INT 2
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 4
64600: PUSH
64601: LD_INT 2
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 4
64610: PUSH
64611: LD_INT 4
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 4
64620: PUSH
64621: LD_INT 3
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 5
64630: PUSH
64631: LD_INT 4
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 5
64640: PUSH
64641: LD_INT 5
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 4
64650: PUSH
64651: LD_INT 5
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 3
64660: PUSH
64661: LD_INT 4
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 3
64670: PUSH
64671: LD_INT 3
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 5
64680: PUSH
64681: LD_INT 3
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 3
64690: PUSH
64691: LD_INT 5
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: LD_INT 3
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 2
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: LD_INT 3
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: LD_INT 4
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: LD_INT 4
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: LD_INT 3
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: NEG
64762: PUSH
64763: LD_INT 2
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 2
64772: PUSH
64773: LD_INT 4
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 2
64782: NEG
64783: PUSH
64784: LD_INT 2
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 4
64793: NEG
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 4
64804: NEG
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 3
64816: NEG
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 3
64827: NEG
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 4
64838: NEG
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 5
64849: NEG
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 5
64860: NEG
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 5
64872: NEG
64873: PUSH
64874: LD_INT 2
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 3
64884: NEG
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: ST_TO_ADDR
// end ; end ;
64940: GO 64943
64942: POP
// case btype of b_depot , b_warehouse :
64943: LD_VAR 0 1
64947: PUSH
64948: LD_INT 0
64950: DOUBLE
64951: EQUAL
64952: IFTRUE 64962
64954: LD_INT 1
64956: DOUBLE
64957: EQUAL
64958: IFTRUE 64962
64960: GO 65163
64962: POP
// case nation of nation_american :
64963: LD_VAR 0 5
64967: PUSH
64968: LD_INT 1
64970: DOUBLE
64971: EQUAL
64972: IFTRUE 64976
64974: GO 65032
64976: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64977: LD_ADDR_VAR 0 9
64981: PUSH
64982: LD_VAR 0 11
64986: PUSH
64987: LD_VAR 0 12
64991: PUSH
64992: LD_VAR 0 13
64996: PUSH
64997: LD_VAR 0 14
65001: PUSH
65002: LD_VAR 0 15
65006: PUSH
65007: LD_VAR 0 16
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: PUSH
65020: LD_VAR 0 4
65024: PUSH
65025: LD_INT 1
65027: PLUS
65028: ARRAY
65029: ST_TO_ADDR
65030: GO 65161
65032: LD_INT 2
65034: DOUBLE
65035: EQUAL
65036: IFTRUE 65040
65038: GO 65096
65040: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65041: LD_ADDR_VAR 0 9
65045: PUSH
65046: LD_VAR 0 17
65050: PUSH
65051: LD_VAR 0 18
65055: PUSH
65056: LD_VAR 0 19
65060: PUSH
65061: LD_VAR 0 20
65065: PUSH
65066: LD_VAR 0 21
65070: PUSH
65071: LD_VAR 0 22
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: PUSH
65084: LD_VAR 0 4
65088: PUSH
65089: LD_INT 1
65091: PLUS
65092: ARRAY
65093: ST_TO_ADDR
65094: GO 65161
65096: LD_INT 3
65098: DOUBLE
65099: EQUAL
65100: IFTRUE 65104
65102: GO 65160
65104: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65105: LD_ADDR_VAR 0 9
65109: PUSH
65110: LD_VAR 0 23
65114: PUSH
65115: LD_VAR 0 24
65119: PUSH
65120: LD_VAR 0 25
65124: PUSH
65125: LD_VAR 0 26
65129: PUSH
65130: LD_VAR 0 27
65134: PUSH
65135: LD_VAR 0 28
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: PUSH
65148: LD_VAR 0 4
65152: PUSH
65153: LD_INT 1
65155: PLUS
65156: ARRAY
65157: ST_TO_ADDR
65158: GO 65161
65160: POP
65161: GO 65716
65163: LD_INT 2
65165: DOUBLE
65166: EQUAL
65167: IFTRUE 65177
65169: LD_INT 3
65171: DOUBLE
65172: EQUAL
65173: IFTRUE 65177
65175: GO 65233
65177: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65178: LD_ADDR_VAR 0 9
65182: PUSH
65183: LD_VAR 0 29
65187: PUSH
65188: LD_VAR 0 30
65192: PUSH
65193: LD_VAR 0 31
65197: PUSH
65198: LD_VAR 0 32
65202: PUSH
65203: LD_VAR 0 33
65207: PUSH
65208: LD_VAR 0 34
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: PUSH
65221: LD_VAR 0 4
65225: PUSH
65226: LD_INT 1
65228: PLUS
65229: ARRAY
65230: ST_TO_ADDR
65231: GO 65716
65233: LD_INT 16
65235: DOUBLE
65236: EQUAL
65237: IFTRUE 65295
65239: LD_INT 17
65241: DOUBLE
65242: EQUAL
65243: IFTRUE 65295
65245: LD_INT 18
65247: DOUBLE
65248: EQUAL
65249: IFTRUE 65295
65251: LD_INT 19
65253: DOUBLE
65254: EQUAL
65255: IFTRUE 65295
65257: LD_INT 22
65259: DOUBLE
65260: EQUAL
65261: IFTRUE 65295
65263: LD_INT 20
65265: DOUBLE
65266: EQUAL
65267: IFTRUE 65295
65269: LD_INT 21
65271: DOUBLE
65272: EQUAL
65273: IFTRUE 65295
65275: LD_INT 23
65277: DOUBLE
65278: EQUAL
65279: IFTRUE 65295
65281: LD_INT 24
65283: DOUBLE
65284: EQUAL
65285: IFTRUE 65295
65287: LD_INT 25
65289: DOUBLE
65290: EQUAL
65291: IFTRUE 65295
65293: GO 65351
65295: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65296: LD_ADDR_VAR 0 9
65300: PUSH
65301: LD_VAR 0 35
65305: PUSH
65306: LD_VAR 0 36
65310: PUSH
65311: LD_VAR 0 37
65315: PUSH
65316: LD_VAR 0 38
65320: PUSH
65321: LD_VAR 0 39
65325: PUSH
65326: LD_VAR 0 40
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: PUSH
65339: LD_VAR 0 4
65343: PUSH
65344: LD_INT 1
65346: PLUS
65347: ARRAY
65348: ST_TO_ADDR
65349: GO 65716
65351: LD_INT 6
65353: DOUBLE
65354: EQUAL
65355: IFTRUE 65407
65357: LD_INT 7
65359: DOUBLE
65360: EQUAL
65361: IFTRUE 65407
65363: LD_INT 8
65365: DOUBLE
65366: EQUAL
65367: IFTRUE 65407
65369: LD_INT 13
65371: DOUBLE
65372: EQUAL
65373: IFTRUE 65407
65375: LD_INT 12
65377: DOUBLE
65378: EQUAL
65379: IFTRUE 65407
65381: LD_INT 15
65383: DOUBLE
65384: EQUAL
65385: IFTRUE 65407
65387: LD_INT 11
65389: DOUBLE
65390: EQUAL
65391: IFTRUE 65407
65393: LD_INT 14
65395: DOUBLE
65396: EQUAL
65397: IFTRUE 65407
65399: LD_INT 10
65401: DOUBLE
65402: EQUAL
65403: IFTRUE 65407
65405: GO 65463
65407: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65408: LD_ADDR_VAR 0 9
65412: PUSH
65413: LD_VAR 0 41
65417: PUSH
65418: LD_VAR 0 42
65422: PUSH
65423: LD_VAR 0 43
65427: PUSH
65428: LD_VAR 0 44
65432: PUSH
65433: LD_VAR 0 45
65437: PUSH
65438: LD_VAR 0 46
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: PUSH
65451: LD_VAR 0 4
65455: PUSH
65456: LD_INT 1
65458: PLUS
65459: ARRAY
65460: ST_TO_ADDR
65461: GO 65716
65463: LD_INT 36
65465: DOUBLE
65466: EQUAL
65467: IFTRUE 65471
65469: GO 65527
65471: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65472: LD_ADDR_VAR 0 9
65476: PUSH
65477: LD_VAR 0 47
65481: PUSH
65482: LD_VAR 0 48
65486: PUSH
65487: LD_VAR 0 49
65491: PUSH
65492: LD_VAR 0 50
65496: PUSH
65497: LD_VAR 0 51
65501: PUSH
65502: LD_VAR 0 52
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: PUSH
65515: LD_VAR 0 4
65519: PUSH
65520: LD_INT 1
65522: PLUS
65523: ARRAY
65524: ST_TO_ADDR
65525: GO 65716
65527: LD_INT 4
65529: DOUBLE
65530: EQUAL
65531: IFTRUE 65553
65533: LD_INT 5
65535: DOUBLE
65536: EQUAL
65537: IFTRUE 65553
65539: LD_INT 34
65541: DOUBLE
65542: EQUAL
65543: IFTRUE 65553
65545: LD_INT 37
65547: DOUBLE
65548: EQUAL
65549: IFTRUE 65553
65551: GO 65609
65553: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65554: LD_ADDR_VAR 0 9
65558: PUSH
65559: LD_VAR 0 53
65563: PUSH
65564: LD_VAR 0 54
65568: PUSH
65569: LD_VAR 0 55
65573: PUSH
65574: LD_VAR 0 56
65578: PUSH
65579: LD_VAR 0 57
65583: PUSH
65584: LD_VAR 0 58
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: PUSH
65597: LD_VAR 0 4
65601: PUSH
65602: LD_INT 1
65604: PLUS
65605: ARRAY
65606: ST_TO_ADDR
65607: GO 65716
65609: LD_INT 31
65611: DOUBLE
65612: EQUAL
65613: IFTRUE 65659
65615: LD_INT 32
65617: DOUBLE
65618: EQUAL
65619: IFTRUE 65659
65621: LD_INT 33
65623: DOUBLE
65624: EQUAL
65625: IFTRUE 65659
65627: LD_INT 27
65629: DOUBLE
65630: EQUAL
65631: IFTRUE 65659
65633: LD_INT 26
65635: DOUBLE
65636: EQUAL
65637: IFTRUE 65659
65639: LD_INT 28
65641: DOUBLE
65642: EQUAL
65643: IFTRUE 65659
65645: LD_INT 29
65647: DOUBLE
65648: EQUAL
65649: IFTRUE 65659
65651: LD_INT 30
65653: DOUBLE
65654: EQUAL
65655: IFTRUE 65659
65657: GO 65715
65659: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65660: LD_ADDR_VAR 0 9
65664: PUSH
65665: LD_VAR 0 59
65669: PUSH
65670: LD_VAR 0 60
65674: PUSH
65675: LD_VAR 0 61
65679: PUSH
65680: LD_VAR 0 62
65684: PUSH
65685: LD_VAR 0 63
65689: PUSH
65690: LD_VAR 0 64
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: PUSH
65703: LD_VAR 0 4
65707: PUSH
65708: LD_INT 1
65710: PLUS
65711: ARRAY
65712: ST_TO_ADDR
65713: GO 65716
65715: POP
// temp_list2 = [ ] ;
65716: LD_ADDR_VAR 0 10
65720: PUSH
65721: EMPTY
65722: ST_TO_ADDR
// for i in temp_list do
65723: LD_ADDR_VAR 0 8
65727: PUSH
65728: LD_VAR 0 9
65732: PUSH
65733: FOR_IN
65734: IFFALSE 65786
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65736: LD_ADDR_VAR 0 10
65740: PUSH
65741: LD_VAR 0 10
65745: PUSH
65746: LD_VAR 0 8
65750: PUSH
65751: LD_INT 1
65753: ARRAY
65754: PUSH
65755: LD_VAR 0 2
65759: PLUS
65760: PUSH
65761: LD_VAR 0 8
65765: PUSH
65766: LD_INT 2
65768: ARRAY
65769: PUSH
65770: LD_VAR 0 3
65774: PLUS
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: EMPTY
65781: LIST
65782: ADD
65783: ST_TO_ADDR
65784: GO 65733
65786: POP
65787: POP
// result = temp_list2 ;
65788: LD_ADDR_VAR 0 7
65792: PUSH
65793: LD_VAR 0 10
65797: ST_TO_ADDR
// end ;
65798: LD_VAR 0 7
65802: RET
// export function EnemyInRange ( unit , dist ) ; begin
65803: LD_INT 0
65805: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65806: LD_ADDR_VAR 0 3
65810: PUSH
65811: LD_VAR 0 1
65815: PPUSH
65816: CALL_OW 255
65820: PPUSH
65821: LD_VAR 0 1
65825: PPUSH
65826: CALL_OW 250
65830: PPUSH
65831: LD_VAR 0 1
65835: PPUSH
65836: CALL_OW 251
65840: PPUSH
65841: LD_VAR 0 2
65845: PPUSH
65846: CALL 39176 0 4
65850: PUSH
65851: LD_INT 4
65853: ARRAY
65854: ST_TO_ADDR
// end ;
65855: LD_VAR 0 3
65859: RET
// export function PlayerSeeMe ( unit ) ; begin
65860: LD_INT 0
65862: PPUSH
// result := See ( your_side , unit ) ;
65863: LD_ADDR_VAR 0 2
65867: PUSH
65868: LD_OWVAR 2
65872: PPUSH
65873: LD_VAR 0 1
65877: PPUSH
65878: CALL_OW 292
65882: ST_TO_ADDR
// end ;
65883: LD_VAR 0 2
65887: RET
// export function ReverseDir ( unit ) ; begin
65888: LD_INT 0
65890: PPUSH
// if not unit then
65891: LD_VAR 0 1
65895: NOT
65896: IFFALSE 65900
// exit ;
65898: GO 65923
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65900: LD_ADDR_VAR 0 2
65904: PUSH
65905: LD_VAR 0 1
65909: PPUSH
65910: CALL_OW 254
65914: PUSH
65915: LD_INT 3
65917: PLUS
65918: PUSH
65919: LD_INT 6
65921: MOD
65922: ST_TO_ADDR
// end ;
65923: LD_VAR 0 2
65927: RET
// export function ReverseArray ( array ) ; var i ; begin
65928: LD_INT 0
65930: PPUSH
65931: PPUSH
// if not array then
65932: LD_VAR 0 1
65936: NOT
65937: IFFALSE 65941
// exit ;
65939: GO 65996
// result := [ ] ;
65941: LD_ADDR_VAR 0 2
65945: PUSH
65946: EMPTY
65947: ST_TO_ADDR
// for i := array downto 1 do
65948: LD_ADDR_VAR 0 3
65952: PUSH
65953: DOUBLE
65954: LD_VAR 0 1
65958: INC
65959: ST_TO_ADDR
65960: LD_INT 1
65962: PUSH
65963: FOR_DOWNTO
65964: IFFALSE 65994
// result := Join ( result , array [ i ] ) ;
65966: LD_ADDR_VAR 0 2
65970: PUSH
65971: LD_VAR 0 2
65975: PPUSH
65976: LD_VAR 0 1
65980: PUSH
65981: LD_VAR 0 3
65985: ARRAY
65986: PPUSH
65987: CALL 70652 0 2
65991: ST_TO_ADDR
65992: GO 65963
65994: POP
65995: POP
// end ;
65996: LD_VAR 0 2
66000: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66001: LD_INT 0
66003: PPUSH
66004: PPUSH
66005: PPUSH
66006: PPUSH
66007: PPUSH
66008: PPUSH
// if not unit or not hexes then
66009: LD_VAR 0 1
66013: NOT
66014: PUSH
66015: LD_VAR 0 2
66019: NOT
66020: OR
66021: IFFALSE 66025
// exit ;
66023: GO 66148
// dist := 9999 ;
66025: LD_ADDR_VAR 0 5
66029: PUSH
66030: LD_INT 9999
66032: ST_TO_ADDR
// for i = 1 to hexes do
66033: LD_ADDR_VAR 0 4
66037: PUSH
66038: DOUBLE
66039: LD_INT 1
66041: DEC
66042: ST_TO_ADDR
66043: LD_VAR 0 2
66047: PUSH
66048: FOR_TO
66049: IFFALSE 66136
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66051: LD_ADDR_VAR 0 6
66055: PUSH
66056: LD_VAR 0 1
66060: PPUSH
66061: LD_VAR 0 2
66065: PUSH
66066: LD_VAR 0 4
66070: ARRAY
66071: PUSH
66072: LD_INT 1
66074: ARRAY
66075: PPUSH
66076: LD_VAR 0 2
66080: PUSH
66081: LD_VAR 0 4
66085: ARRAY
66086: PUSH
66087: LD_INT 2
66089: ARRAY
66090: PPUSH
66091: CALL_OW 297
66095: ST_TO_ADDR
// if tdist < dist then
66096: LD_VAR 0 6
66100: PUSH
66101: LD_VAR 0 5
66105: LESS
66106: IFFALSE 66134
// begin hex := hexes [ i ] ;
66108: LD_ADDR_VAR 0 8
66112: PUSH
66113: LD_VAR 0 2
66117: PUSH
66118: LD_VAR 0 4
66122: ARRAY
66123: ST_TO_ADDR
// dist := tdist ;
66124: LD_ADDR_VAR 0 5
66128: PUSH
66129: LD_VAR 0 6
66133: ST_TO_ADDR
// end ; end ;
66134: GO 66048
66136: POP
66137: POP
// result := hex ;
66138: LD_ADDR_VAR 0 3
66142: PUSH
66143: LD_VAR 0 8
66147: ST_TO_ADDR
// end ;
66148: LD_VAR 0 3
66152: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66153: LD_INT 0
66155: PPUSH
66156: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66157: LD_VAR 0 1
66161: NOT
66162: PUSH
66163: LD_VAR 0 1
66167: PUSH
66168: LD_INT 21
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 23
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PPUSH
66192: CALL_OW 69
66196: IN
66197: NOT
66198: OR
66199: IFFALSE 66203
// exit ;
66201: GO 66250
// for i = 1 to 3 do
66203: LD_ADDR_VAR 0 3
66207: PUSH
66208: DOUBLE
66209: LD_INT 1
66211: DEC
66212: ST_TO_ADDR
66213: LD_INT 3
66215: PUSH
66216: FOR_TO
66217: IFFALSE 66248
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66219: LD_VAR 0 1
66223: PPUSH
66224: CALL_OW 250
66228: PPUSH
66229: LD_VAR 0 1
66233: PPUSH
66234: CALL_OW 251
66238: PPUSH
66239: LD_INT 1
66241: PPUSH
66242: CALL_OW 453
66246: GO 66216
66248: POP
66249: POP
// end ;
66250: LD_VAR 0 2
66254: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66255: LD_INT 0
66257: PPUSH
66258: PPUSH
66259: PPUSH
66260: PPUSH
66261: PPUSH
66262: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66263: LD_VAR 0 1
66267: NOT
66268: PUSH
66269: LD_VAR 0 2
66273: NOT
66274: OR
66275: PUSH
66276: LD_VAR 0 1
66280: PPUSH
66281: CALL_OW 314
66285: OR
66286: IFFALSE 66290
// exit ;
66288: GO 66757
// if GetLives ( i ) < 250 then
66290: LD_VAR 0 4
66294: PPUSH
66295: CALL_OW 256
66299: PUSH
66300: LD_INT 250
66302: LESS
66303: IFFALSE 66316
// begin ComAutodestruct ( i ) ;
66305: LD_VAR 0 4
66309: PPUSH
66310: CALL 66153 0 1
// exit ;
66314: GO 66757
// end ; x := GetX ( enemy_unit ) ;
66316: LD_ADDR_VAR 0 7
66320: PUSH
66321: LD_VAR 0 2
66325: PPUSH
66326: CALL_OW 250
66330: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66331: LD_ADDR_VAR 0 8
66335: PUSH
66336: LD_VAR 0 2
66340: PPUSH
66341: CALL_OW 251
66345: ST_TO_ADDR
// if not x or not y then
66346: LD_VAR 0 7
66350: NOT
66351: PUSH
66352: LD_VAR 0 8
66356: NOT
66357: OR
66358: IFFALSE 66362
// exit ;
66360: GO 66757
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66362: LD_ADDR_VAR 0 6
66366: PUSH
66367: LD_VAR 0 7
66371: PPUSH
66372: LD_INT 0
66374: PPUSH
66375: LD_INT 4
66377: PPUSH
66378: CALL_OW 272
66382: PUSH
66383: LD_VAR 0 8
66387: PPUSH
66388: LD_INT 0
66390: PPUSH
66391: LD_INT 4
66393: PPUSH
66394: CALL_OW 273
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_VAR 0 7
66407: PPUSH
66408: LD_INT 1
66410: PPUSH
66411: LD_INT 4
66413: PPUSH
66414: CALL_OW 272
66418: PUSH
66419: LD_VAR 0 8
66423: PPUSH
66424: LD_INT 1
66426: PPUSH
66427: LD_INT 4
66429: PPUSH
66430: CALL_OW 273
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_VAR 0 7
66443: PPUSH
66444: LD_INT 2
66446: PPUSH
66447: LD_INT 4
66449: PPUSH
66450: CALL_OW 272
66454: PUSH
66455: LD_VAR 0 8
66459: PPUSH
66460: LD_INT 2
66462: PPUSH
66463: LD_INT 4
66465: PPUSH
66466: CALL_OW 273
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_VAR 0 7
66479: PPUSH
66480: LD_INT 3
66482: PPUSH
66483: LD_INT 4
66485: PPUSH
66486: CALL_OW 272
66490: PUSH
66491: LD_VAR 0 8
66495: PPUSH
66496: LD_INT 3
66498: PPUSH
66499: LD_INT 4
66501: PPUSH
66502: CALL_OW 273
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_VAR 0 7
66515: PPUSH
66516: LD_INT 4
66518: PPUSH
66519: LD_INT 4
66521: PPUSH
66522: CALL_OW 272
66526: PUSH
66527: LD_VAR 0 8
66531: PPUSH
66532: LD_INT 4
66534: PPUSH
66535: LD_INT 4
66537: PPUSH
66538: CALL_OW 273
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_VAR 0 7
66551: PPUSH
66552: LD_INT 5
66554: PPUSH
66555: LD_INT 4
66557: PPUSH
66558: CALL_OW 272
66562: PUSH
66563: LD_VAR 0 8
66567: PPUSH
66568: LD_INT 5
66570: PPUSH
66571: LD_INT 4
66573: PPUSH
66574: CALL_OW 273
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: ST_TO_ADDR
// for i = tmp downto 1 do
66591: LD_ADDR_VAR 0 4
66595: PUSH
66596: DOUBLE
66597: LD_VAR 0 6
66601: INC
66602: ST_TO_ADDR
66603: LD_INT 1
66605: PUSH
66606: FOR_DOWNTO
66607: IFFALSE 66708
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66609: LD_VAR 0 6
66613: PUSH
66614: LD_VAR 0 4
66618: ARRAY
66619: PUSH
66620: LD_INT 1
66622: ARRAY
66623: PPUSH
66624: LD_VAR 0 6
66628: PUSH
66629: LD_VAR 0 4
66633: ARRAY
66634: PUSH
66635: LD_INT 2
66637: ARRAY
66638: PPUSH
66639: CALL_OW 488
66643: NOT
66644: PUSH
66645: LD_VAR 0 6
66649: PUSH
66650: LD_VAR 0 4
66654: ARRAY
66655: PUSH
66656: LD_INT 1
66658: ARRAY
66659: PPUSH
66660: LD_VAR 0 6
66664: PUSH
66665: LD_VAR 0 4
66669: ARRAY
66670: PUSH
66671: LD_INT 2
66673: ARRAY
66674: PPUSH
66675: CALL_OW 428
66679: PUSH
66680: LD_INT 0
66682: NONEQUAL
66683: OR
66684: IFFALSE 66706
// tmp := Delete ( tmp , i ) ;
66686: LD_ADDR_VAR 0 6
66690: PUSH
66691: LD_VAR 0 6
66695: PPUSH
66696: LD_VAR 0 4
66700: PPUSH
66701: CALL_OW 3
66705: ST_TO_ADDR
66706: GO 66606
66708: POP
66709: POP
// j := GetClosestHex ( unit , tmp ) ;
66710: LD_ADDR_VAR 0 5
66714: PUSH
66715: LD_VAR 0 1
66719: PPUSH
66720: LD_VAR 0 6
66724: PPUSH
66725: CALL 66001 0 2
66729: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66730: LD_VAR 0 1
66734: PPUSH
66735: LD_VAR 0 5
66739: PUSH
66740: LD_INT 1
66742: ARRAY
66743: PPUSH
66744: LD_VAR 0 5
66748: PUSH
66749: LD_INT 2
66751: ARRAY
66752: PPUSH
66753: CALL_OW 111
// end ;
66757: LD_VAR 0 3
66761: RET
// export function PrepareApemanSoldier ( ) ; begin
66762: LD_INT 0
66764: PPUSH
// uc_nation := 0 ;
66765: LD_ADDR_OWVAR 21
66769: PUSH
66770: LD_INT 0
66772: ST_TO_ADDR
// hc_sex := sex_male ;
66773: LD_ADDR_OWVAR 27
66777: PUSH
66778: LD_INT 1
66780: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66781: LD_ADDR_OWVAR 28
66785: PUSH
66786: LD_INT 15
66788: ST_TO_ADDR
// hc_gallery :=  ;
66789: LD_ADDR_OWVAR 33
66793: PUSH
66794: LD_STRING 
66796: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66797: LD_ADDR_OWVAR 31
66801: PUSH
66802: LD_INT 0
66804: PPUSH
66805: LD_INT 3
66807: PPUSH
66808: CALL_OW 12
66812: PUSH
66813: LD_INT 0
66815: PPUSH
66816: LD_INT 3
66818: PPUSH
66819: CALL_OW 12
66823: PUSH
66824: LD_INT 0
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: ST_TO_ADDR
// end ;
66836: LD_VAR 0 1
66840: RET
// export function PrepareApemanEngineer ( ) ; begin
66841: LD_INT 0
66843: PPUSH
// uc_nation := 0 ;
66844: LD_ADDR_OWVAR 21
66848: PUSH
66849: LD_INT 0
66851: ST_TO_ADDR
// hc_sex := sex_male ;
66852: LD_ADDR_OWVAR 27
66856: PUSH
66857: LD_INT 1
66859: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66860: LD_ADDR_OWVAR 28
66864: PUSH
66865: LD_INT 16
66867: ST_TO_ADDR
// hc_gallery :=  ;
66868: LD_ADDR_OWVAR 33
66872: PUSH
66873: LD_STRING 
66875: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66876: LD_ADDR_OWVAR 31
66880: PUSH
66881: LD_INT 0
66883: PPUSH
66884: LD_INT 3
66886: PPUSH
66887: CALL_OW 12
66891: PUSH
66892: LD_INT 0
66894: PPUSH
66895: LD_INT 3
66897: PPUSH
66898: CALL_OW 12
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: ST_TO_ADDR
// end ;
66915: LD_VAR 0 1
66919: RET
// export function PrepareApeman ( agressivity ) ; begin
66920: LD_INT 0
66922: PPUSH
// uc_side := 0 ;
66923: LD_ADDR_OWVAR 20
66927: PUSH
66928: LD_INT 0
66930: ST_TO_ADDR
// uc_nation := 0 ;
66931: LD_ADDR_OWVAR 21
66935: PUSH
66936: LD_INT 0
66938: ST_TO_ADDR
// hc_sex := sex_male ;
66939: LD_ADDR_OWVAR 27
66943: PUSH
66944: LD_INT 1
66946: ST_TO_ADDR
// hc_class := class_apeman ;
66947: LD_ADDR_OWVAR 28
66951: PUSH
66952: LD_INT 12
66954: ST_TO_ADDR
// hc_gallery :=  ;
66955: LD_ADDR_OWVAR 33
66959: PUSH
66960: LD_STRING 
66962: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66963: LD_ADDR_OWVAR 35
66967: PUSH
66968: LD_VAR 0 1
66972: NEG
66973: PPUSH
66974: LD_VAR 0 1
66978: PPUSH
66979: CALL_OW 12
66983: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66984: LD_ADDR_OWVAR 31
66988: PUSH
66989: LD_INT 0
66991: PPUSH
66992: LD_INT 3
66994: PPUSH
66995: CALL_OW 12
66999: PUSH
67000: LD_INT 0
67002: PPUSH
67003: LD_INT 3
67005: PPUSH
67006: CALL_OW 12
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: LD_INT 0
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: ST_TO_ADDR
// end ;
67023: LD_VAR 0 2
67027: RET
// export function PrepareTiger ( agressivity ) ; begin
67028: LD_INT 0
67030: PPUSH
// uc_side := 0 ;
67031: LD_ADDR_OWVAR 20
67035: PUSH
67036: LD_INT 0
67038: ST_TO_ADDR
// uc_nation := 0 ;
67039: LD_ADDR_OWVAR 21
67043: PUSH
67044: LD_INT 0
67046: ST_TO_ADDR
// hc_class := class_tiger ;
67047: LD_ADDR_OWVAR 28
67051: PUSH
67052: LD_INT 14
67054: ST_TO_ADDR
// hc_gallery :=  ;
67055: LD_ADDR_OWVAR 33
67059: PUSH
67060: LD_STRING 
67062: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67063: LD_ADDR_OWVAR 35
67067: PUSH
67068: LD_VAR 0 1
67072: NEG
67073: PPUSH
67074: LD_VAR 0 1
67078: PPUSH
67079: CALL_OW 12
67083: ST_TO_ADDR
// end ;
67084: LD_VAR 0 2
67088: RET
// export function PrepareEnchidna ( ) ; begin
67089: LD_INT 0
67091: PPUSH
// uc_side := 0 ;
67092: LD_ADDR_OWVAR 20
67096: PUSH
67097: LD_INT 0
67099: ST_TO_ADDR
// uc_nation := 0 ;
67100: LD_ADDR_OWVAR 21
67104: PUSH
67105: LD_INT 0
67107: ST_TO_ADDR
// hc_class := class_baggie ;
67108: LD_ADDR_OWVAR 28
67112: PUSH
67113: LD_INT 13
67115: ST_TO_ADDR
// hc_gallery :=  ;
67116: LD_ADDR_OWVAR 33
67120: PUSH
67121: LD_STRING 
67123: ST_TO_ADDR
// end ;
67124: LD_VAR 0 1
67128: RET
// export function PrepareFrog ( ) ; begin
67129: LD_INT 0
67131: PPUSH
// uc_side := 0 ;
67132: LD_ADDR_OWVAR 20
67136: PUSH
67137: LD_INT 0
67139: ST_TO_ADDR
// uc_nation := 0 ;
67140: LD_ADDR_OWVAR 21
67144: PUSH
67145: LD_INT 0
67147: ST_TO_ADDR
// hc_class := class_frog ;
67148: LD_ADDR_OWVAR 28
67152: PUSH
67153: LD_INT 19
67155: ST_TO_ADDR
// hc_gallery :=  ;
67156: LD_ADDR_OWVAR 33
67160: PUSH
67161: LD_STRING 
67163: ST_TO_ADDR
// end ;
67164: LD_VAR 0 1
67168: RET
// export function PrepareFish ( ) ; begin
67169: LD_INT 0
67171: PPUSH
// uc_side := 0 ;
67172: LD_ADDR_OWVAR 20
67176: PUSH
67177: LD_INT 0
67179: ST_TO_ADDR
// uc_nation := 0 ;
67180: LD_ADDR_OWVAR 21
67184: PUSH
67185: LD_INT 0
67187: ST_TO_ADDR
// hc_class := class_fish ;
67188: LD_ADDR_OWVAR 28
67192: PUSH
67193: LD_INT 20
67195: ST_TO_ADDR
// hc_gallery :=  ;
67196: LD_ADDR_OWVAR 33
67200: PUSH
67201: LD_STRING 
67203: ST_TO_ADDR
// end ;
67204: LD_VAR 0 1
67208: RET
// export function PrepareBird ( ) ; begin
67209: LD_INT 0
67211: PPUSH
// uc_side := 0 ;
67212: LD_ADDR_OWVAR 20
67216: PUSH
67217: LD_INT 0
67219: ST_TO_ADDR
// uc_nation := 0 ;
67220: LD_ADDR_OWVAR 21
67224: PUSH
67225: LD_INT 0
67227: ST_TO_ADDR
// hc_class := class_phororhacos ;
67228: LD_ADDR_OWVAR 28
67232: PUSH
67233: LD_INT 18
67235: ST_TO_ADDR
// hc_gallery :=  ;
67236: LD_ADDR_OWVAR 33
67240: PUSH
67241: LD_STRING 
67243: ST_TO_ADDR
// end ;
67244: LD_VAR 0 1
67248: RET
// export function PrepareHorse ( ) ; begin
67249: LD_INT 0
67251: PPUSH
// uc_side := 0 ;
67252: LD_ADDR_OWVAR 20
67256: PUSH
67257: LD_INT 0
67259: ST_TO_ADDR
// uc_nation := 0 ;
67260: LD_ADDR_OWVAR 21
67264: PUSH
67265: LD_INT 0
67267: ST_TO_ADDR
// hc_class := class_horse ;
67268: LD_ADDR_OWVAR 28
67272: PUSH
67273: LD_INT 21
67275: ST_TO_ADDR
// hc_gallery :=  ;
67276: LD_ADDR_OWVAR 33
67280: PUSH
67281: LD_STRING 
67283: ST_TO_ADDR
// end ;
67284: LD_VAR 0 1
67288: RET
// export function PrepareMastodont ( ) ; begin
67289: LD_INT 0
67291: PPUSH
// uc_side := 0 ;
67292: LD_ADDR_OWVAR 20
67296: PUSH
67297: LD_INT 0
67299: ST_TO_ADDR
// uc_nation := 0 ;
67300: LD_ADDR_OWVAR 21
67304: PUSH
67305: LD_INT 0
67307: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67308: LD_ADDR_OWVAR 37
67312: PUSH
67313: LD_INT 31
67315: ST_TO_ADDR
// vc_control := control_rider ;
67316: LD_ADDR_OWVAR 38
67320: PUSH
67321: LD_INT 4
67323: ST_TO_ADDR
// end ;
67324: LD_VAR 0 1
67328: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67329: LD_INT 0
67331: PPUSH
67332: PPUSH
67333: PPUSH
// uc_side = 0 ;
67334: LD_ADDR_OWVAR 20
67338: PUSH
67339: LD_INT 0
67341: ST_TO_ADDR
// uc_nation = 0 ;
67342: LD_ADDR_OWVAR 21
67346: PUSH
67347: LD_INT 0
67349: ST_TO_ADDR
// InitHc_All ( ) ;
67350: CALL_OW 584
// InitVc ;
67354: CALL_OW 20
// if mastodonts then
67358: LD_VAR 0 6
67362: IFFALSE 67429
// for i = 1 to mastodonts do
67364: LD_ADDR_VAR 0 11
67368: PUSH
67369: DOUBLE
67370: LD_INT 1
67372: DEC
67373: ST_TO_ADDR
67374: LD_VAR 0 6
67378: PUSH
67379: FOR_TO
67380: IFFALSE 67427
// begin vc_chassis := 31 ;
67382: LD_ADDR_OWVAR 37
67386: PUSH
67387: LD_INT 31
67389: ST_TO_ADDR
// vc_control := control_rider ;
67390: LD_ADDR_OWVAR 38
67394: PUSH
67395: LD_INT 4
67397: ST_TO_ADDR
// animal := CreateVehicle ;
67398: LD_ADDR_VAR 0 12
67402: PUSH
67403: CALL_OW 45
67407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67408: LD_VAR 0 12
67412: PPUSH
67413: LD_VAR 0 8
67417: PPUSH
67418: LD_INT 0
67420: PPUSH
67421: CALL 69557 0 3
// end ;
67425: GO 67379
67427: POP
67428: POP
// if horses then
67429: LD_VAR 0 5
67433: IFFALSE 67500
// for i = 1 to horses do
67435: LD_ADDR_VAR 0 11
67439: PUSH
67440: DOUBLE
67441: LD_INT 1
67443: DEC
67444: ST_TO_ADDR
67445: LD_VAR 0 5
67449: PUSH
67450: FOR_TO
67451: IFFALSE 67498
// begin hc_class := 21 ;
67453: LD_ADDR_OWVAR 28
67457: PUSH
67458: LD_INT 21
67460: ST_TO_ADDR
// hc_gallery :=  ;
67461: LD_ADDR_OWVAR 33
67465: PUSH
67466: LD_STRING 
67468: ST_TO_ADDR
// animal := CreateHuman ;
67469: LD_ADDR_VAR 0 12
67473: PUSH
67474: CALL_OW 44
67478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67479: LD_VAR 0 12
67483: PPUSH
67484: LD_VAR 0 8
67488: PPUSH
67489: LD_INT 0
67491: PPUSH
67492: CALL 69557 0 3
// end ;
67496: GO 67450
67498: POP
67499: POP
// if birds then
67500: LD_VAR 0 1
67504: IFFALSE 67571
// for i = 1 to birds do
67506: LD_ADDR_VAR 0 11
67510: PUSH
67511: DOUBLE
67512: LD_INT 1
67514: DEC
67515: ST_TO_ADDR
67516: LD_VAR 0 1
67520: PUSH
67521: FOR_TO
67522: IFFALSE 67569
// begin hc_class := 18 ;
67524: LD_ADDR_OWVAR 28
67528: PUSH
67529: LD_INT 18
67531: ST_TO_ADDR
// hc_gallery =  ;
67532: LD_ADDR_OWVAR 33
67536: PUSH
67537: LD_STRING 
67539: ST_TO_ADDR
// animal := CreateHuman ;
67540: LD_ADDR_VAR 0 12
67544: PUSH
67545: CALL_OW 44
67549: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67550: LD_VAR 0 12
67554: PPUSH
67555: LD_VAR 0 8
67559: PPUSH
67560: LD_INT 0
67562: PPUSH
67563: CALL 69557 0 3
// end ;
67567: GO 67521
67569: POP
67570: POP
// if tigers then
67571: LD_VAR 0 2
67575: IFFALSE 67659
// for i = 1 to tigers do
67577: LD_ADDR_VAR 0 11
67581: PUSH
67582: DOUBLE
67583: LD_INT 1
67585: DEC
67586: ST_TO_ADDR
67587: LD_VAR 0 2
67591: PUSH
67592: FOR_TO
67593: IFFALSE 67657
// begin hc_class = class_tiger ;
67595: LD_ADDR_OWVAR 28
67599: PUSH
67600: LD_INT 14
67602: ST_TO_ADDR
// hc_gallery =  ;
67603: LD_ADDR_OWVAR 33
67607: PUSH
67608: LD_STRING 
67610: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67611: LD_ADDR_OWVAR 35
67615: PUSH
67616: LD_INT 7
67618: NEG
67619: PPUSH
67620: LD_INT 7
67622: PPUSH
67623: CALL_OW 12
67627: ST_TO_ADDR
// animal := CreateHuman ;
67628: LD_ADDR_VAR 0 12
67632: PUSH
67633: CALL_OW 44
67637: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67638: LD_VAR 0 12
67642: PPUSH
67643: LD_VAR 0 8
67647: PPUSH
67648: LD_INT 0
67650: PPUSH
67651: CALL 69557 0 3
// end ;
67655: GO 67592
67657: POP
67658: POP
// if apemans then
67659: LD_VAR 0 3
67663: IFFALSE 67786
// for i = 1 to apemans do
67665: LD_ADDR_VAR 0 11
67669: PUSH
67670: DOUBLE
67671: LD_INT 1
67673: DEC
67674: ST_TO_ADDR
67675: LD_VAR 0 3
67679: PUSH
67680: FOR_TO
67681: IFFALSE 67784
// begin hc_class = class_apeman ;
67683: LD_ADDR_OWVAR 28
67687: PUSH
67688: LD_INT 12
67690: ST_TO_ADDR
// hc_gallery =  ;
67691: LD_ADDR_OWVAR 33
67695: PUSH
67696: LD_STRING 
67698: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67699: LD_ADDR_OWVAR 35
67703: PUSH
67704: LD_INT 2
67706: NEG
67707: PPUSH
67708: LD_INT 2
67710: PPUSH
67711: CALL_OW 12
67715: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67716: LD_ADDR_OWVAR 31
67720: PUSH
67721: LD_INT 1
67723: PPUSH
67724: LD_INT 3
67726: PPUSH
67727: CALL_OW 12
67731: PUSH
67732: LD_INT 1
67734: PPUSH
67735: LD_INT 3
67737: PPUSH
67738: CALL_OW 12
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: ST_TO_ADDR
// animal := CreateHuman ;
67755: LD_ADDR_VAR 0 12
67759: PUSH
67760: CALL_OW 44
67764: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67765: LD_VAR 0 12
67769: PPUSH
67770: LD_VAR 0 8
67774: PPUSH
67775: LD_INT 0
67777: PPUSH
67778: CALL 69557 0 3
// end ;
67782: GO 67680
67784: POP
67785: POP
// if enchidnas then
67786: LD_VAR 0 4
67790: IFFALSE 67857
// for i = 1 to enchidnas do
67792: LD_ADDR_VAR 0 11
67796: PUSH
67797: DOUBLE
67798: LD_INT 1
67800: DEC
67801: ST_TO_ADDR
67802: LD_VAR 0 4
67806: PUSH
67807: FOR_TO
67808: IFFALSE 67855
// begin hc_class = 13 ;
67810: LD_ADDR_OWVAR 28
67814: PUSH
67815: LD_INT 13
67817: ST_TO_ADDR
// hc_gallery =  ;
67818: LD_ADDR_OWVAR 33
67822: PUSH
67823: LD_STRING 
67825: ST_TO_ADDR
// animal := CreateHuman ;
67826: LD_ADDR_VAR 0 12
67830: PUSH
67831: CALL_OW 44
67835: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67836: LD_VAR 0 12
67840: PPUSH
67841: LD_VAR 0 8
67845: PPUSH
67846: LD_INT 0
67848: PPUSH
67849: CALL 69557 0 3
// end ;
67853: GO 67807
67855: POP
67856: POP
// if fishes then
67857: LD_VAR 0 7
67861: IFFALSE 67928
// for i = 1 to fishes do
67863: LD_ADDR_VAR 0 11
67867: PUSH
67868: DOUBLE
67869: LD_INT 1
67871: DEC
67872: ST_TO_ADDR
67873: LD_VAR 0 7
67877: PUSH
67878: FOR_TO
67879: IFFALSE 67926
// begin hc_class = 20 ;
67881: LD_ADDR_OWVAR 28
67885: PUSH
67886: LD_INT 20
67888: ST_TO_ADDR
// hc_gallery =  ;
67889: LD_ADDR_OWVAR 33
67893: PUSH
67894: LD_STRING 
67896: ST_TO_ADDR
// animal := CreateHuman ;
67897: LD_ADDR_VAR 0 12
67901: PUSH
67902: CALL_OW 44
67906: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67907: LD_VAR 0 12
67911: PPUSH
67912: LD_VAR 0 9
67916: PPUSH
67917: LD_INT 0
67919: PPUSH
67920: CALL 69557 0 3
// end ;
67924: GO 67878
67926: POP
67927: POP
// end ;
67928: LD_VAR 0 10
67932: RET
// export function WantHeal ( sci , unit ) ; begin
67933: LD_INT 0
67935: PPUSH
// if GetTaskList ( sci ) > 0 then
67936: LD_VAR 0 1
67940: PPUSH
67941: CALL_OW 437
67945: PUSH
67946: LD_INT 0
67948: GREATER
67949: IFFALSE 68019
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67951: LD_VAR 0 1
67955: PPUSH
67956: CALL_OW 437
67960: PUSH
67961: LD_INT 1
67963: ARRAY
67964: PUSH
67965: LD_INT 1
67967: ARRAY
67968: PUSH
67969: LD_STRING l
67971: EQUAL
67972: PUSH
67973: LD_VAR 0 1
67977: PPUSH
67978: CALL_OW 437
67982: PUSH
67983: LD_INT 1
67985: ARRAY
67986: PUSH
67987: LD_INT 4
67989: ARRAY
67990: PUSH
67991: LD_VAR 0 2
67995: EQUAL
67996: AND
67997: IFFALSE 68009
// result := true else
67999: LD_ADDR_VAR 0 3
68003: PUSH
68004: LD_INT 1
68006: ST_TO_ADDR
68007: GO 68017
// result := false ;
68009: LD_ADDR_VAR 0 3
68013: PUSH
68014: LD_INT 0
68016: ST_TO_ADDR
// end else
68017: GO 68027
// result := false ;
68019: LD_ADDR_VAR 0 3
68023: PUSH
68024: LD_INT 0
68026: ST_TO_ADDR
// end ;
68027: LD_VAR 0 3
68031: RET
// export function HealTarget ( sci ) ; begin
68032: LD_INT 0
68034: PPUSH
// if not sci then
68035: LD_VAR 0 1
68039: NOT
68040: IFFALSE 68044
// exit ;
68042: GO 68109
// result := 0 ;
68044: LD_ADDR_VAR 0 2
68048: PUSH
68049: LD_INT 0
68051: ST_TO_ADDR
// if GetTaskList ( sci ) then
68052: LD_VAR 0 1
68056: PPUSH
68057: CALL_OW 437
68061: IFFALSE 68109
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68063: LD_VAR 0 1
68067: PPUSH
68068: CALL_OW 437
68072: PUSH
68073: LD_INT 1
68075: ARRAY
68076: PUSH
68077: LD_INT 1
68079: ARRAY
68080: PUSH
68081: LD_STRING l
68083: EQUAL
68084: IFFALSE 68109
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68086: LD_ADDR_VAR 0 2
68090: PUSH
68091: LD_VAR 0 1
68095: PPUSH
68096: CALL_OW 437
68100: PUSH
68101: LD_INT 1
68103: ARRAY
68104: PUSH
68105: LD_INT 4
68107: ARRAY
68108: ST_TO_ADDR
// end ;
68109: LD_VAR 0 2
68113: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68114: LD_INT 0
68116: PPUSH
68117: PPUSH
68118: PPUSH
68119: PPUSH
// if not base_units then
68120: LD_VAR 0 1
68124: NOT
68125: IFFALSE 68129
// exit ;
68127: GO 68216
// result := false ;
68129: LD_ADDR_VAR 0 2
68133: PUSH
68134: LD_INT 0
68136: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68137: LD_ADDR_VAR 0 5
68141: PUSH
68142: LD_VAR 0 1
68146: PPUSH
68147: LD_INT 21
68149: PUSH
68150: LD_INT 3
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PPUSH
68157: CALL_OW 72
68161: ST_TO_ADDR
// if not tmp then
68162: LD_VAR 0 5
68166: NOT
68167: IFFALSE 68171
// exit ;
68169: GO 68216
// for i in tmp do
68171: LD_ADDR_VAR 0 3
68175: PUSH
68176: LD_VAR 0 5
68180: PUSH
68181: FOR_IN
68182: IFFALSE 68214
// begin result := EnemyInRange ( i , 22 ) ;
68184: LD_ADDR_VAR 0 2
68188: PUSH
68189: LD_VAR 0 3
68193: PPUSH
68194: LD_INT 22
68196: PPUSH
68197: CALL 65803 0 2
68201: ST_TO_ADDR
// if result then
68202: LD_VAR 0 2
68206: IFFALSE 68212
// exit ;
68208: POP
68209: POP
68210: GO 68216
// end ;
68212: GO 68181
68214: POP
68215: POP
// end ;
68216: LD_VAR 0 2
68220: RET
// export function FilterByTag ( units , tag ) ; begin
68221: LD_INT 0
68223: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68224: LD_ADDR_VAR 0 3
68228: PUSH
68229: LD_VAR 0 1
68233: PPUSH
68234: LD_INT 120
68236: PUSH
68237: LD_VAR 0 2
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PPUSH
68246: CALL_OW 72
68250: ST_TO_ADDR
// end ;
68251: LD_VAR 0 3
68255: RET
// export function IsDriver ( un ) ; begin
68256: LD_INT 0
68258: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68259: LD_ADDR_VAR 0 2
68263: PUSH
68264: LD_VAR 0 1
68268: PUSH
68269: LD_INT 55
68271: PUSH
68272: EMPTY
68273: LIST
68274: PPUSH
68275: CALL_OW 69
68279: IN
68280: ST_TO_ADDR
// end ;
68281: LD_VAR 0 2
68285: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68286: LD_INT 0
68288: PPUSH
68289: PPUSH
// list := [ ] ;
68290: LD_ADDR_VAR 0 5
68294: PUSH
68295: EMPTY
68296: ST_TO_ADDR
// case d of 0 :
68297: LD_VAR 0 3
68301: PUSH
68302: LD_INT 0
68304: DOUBLE
68305: EQUAL
68306: IFTRUE 68310
68308: GO 68443
68310: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68311: LD_ADDR_VAR 0 5
68315: PUSH
68316: LD_VAR 0 1
68320: PUSH
68321: LD_INT 4
68323: MINUS
68324: PUSH
68325: LD_VAR 0 2
68329: PUSH
68330: LD_INT 4
68332: MINUS
68333: PUSH
68334: LD_INT 2
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: LIST
68341: PUSH
68342: LD_VAR 0 1
68346: PUSH
68347: LD_INT 3
68349: MINUS
68350: PUSH
68351: LD_VAR 0 2
68355: PUSH
68356: LD_INT 1
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: LIST
68363: PUSH
68364: LD_VAR 0 1
68368: PUSH
68369: LD_INT 4
68371: PLUS
68372: PUSH
68373: LD_VAR 0 2
68377: PUSH
68378: LD_INT 4
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: LIST
68385: PUSH
68386: LD_VAR 0 1
68390: PUSH
68391: LD_INT 3
68393: PLUS
68394: PUSH
68395: LD_VAR 0 2
68399: PUSH
68400: LD_INT 3
68402: PLUS
68403: PUSH
68404: LD_INT 5
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: LIST
68411: PUSH
68412: LD_VAR 0 1
68416: PUSH
68417: LD_VAR 0 2
68421: PUSH
68422: LD_INT 4
68424: PLUS
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: LIST
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: ST_TO_ADDR
// end ; 1 :
68441: GO 69141
68443: LD_INT 1
68445: DOUBLE
68446: EQUAL
68447: IFTRUE 68451
68449: GO 68584
68451: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68452: LD_ADDR_VAR 0 5
68456: PUSH
68457: LD_VAR 0 1
68461: PUSH
68462: LD_VAR 0 2
68466: PUSH
68467: LD_INT 4
68469: MINUS
68470: PUSH
68471: LD_INT 3
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: LIST
68478: PUSH
68479: LD_VAR 0 1
68483: PUSH
68484: LD_INT 3
68486: MINUS
68487: PUSH
68488: LD_VAR 0 2
68492: PUSH
68493: LD_INT 3
68495: MINUS
68496: PUSH
68497: LD_INT 2
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: LIST
68504: PUSH
68505: LD_VAR 0 1
68509: PUSH
68510: LD_INT 4
68512: MINUS
68513: PUSH
68514: LD_VAR 0 2
68518: PUSH
68519: LD_INT 1
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: LIST
68526: PUSH
68527: LD_VAR 0 1
68531: PUSH
68532: LD_VAR 0 2
68536: PUSH
68537: LD_INT 3
68539: PLUS
68540: PUSH
68541: LD_INT 0
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: LIST
68548: PUSH
68549: LD_VAR 0 1
68553: PUSH
68554: LD_INT 4
68556: PLUS
68557: PUSH
68558: LD_VAR 0 2
68562: PUSH
68563: LD_INT 4
68565: PLUS
68566: PUSH
68567: LD_INT 5
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: LIST
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: ST_TO_ADDR
// end ; 2 :
68582: GO 69141
68584: LD_INT 2
68586: DOUBLE
68587: EQUAL
68588: IFTRUE 68592
68590: GO 68721
68592: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68593: LD_ADDR_VAR 0 5
68597: PUSH
68598: LD_VAR 0 1
68602: PUSH
68603: LD_VAR 0 2
68607: PUSH
68608: LD_INT 3
68610: MINUS
68611: PUSH
68612: LD_INT 3
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: LIST
68619: PUSH
68620: LD_VAR 0 1
68624: PUSH
68625: LD_INT 4
68627: PLUS
68628: PUSH
68629: LD_VAR 0 2
68633: PUSH
68634: LD_INT 4
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: LIST
68641: PUSH
68642: LD_VAR 0 1
68646: PUSH
68647: LD_VAR 0 2
68651: PUSH
68652: LD_INT 4
68654: PLUS
68655: PUSH
68656: LD_INT 0
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: LIST
68663: PUSH
68664: LD_VAR 0 1
68668: PUSH
68669: LD_INT 3
68671: MINUS
68672: PUSH
68673: LD_VAR 0 2
68677: PUSH
68678: LD_INT 1
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: LIST
68685: PUSH
68686: LD_VAR 0 1
68690: PUSH
68691: LD_INT 4
68693: MINUS
68694: PUSH
68695: LD_VAR 0 2
68699: PUSH
68700: LD_INT 4
68702: MINUS
68703: PUSH
68704: LD_INT 2
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: LIST
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: ST_TO_ADDR
// end ; 3 :
68719: GO 69141
68721: LD_INT 3
68723: DOUBLE
68724: EQUAL
68725: IFTRUE 68729
68727: GO 68862
68729: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68730: LD_ADDR_VAR 0 5
68734: PUSH
68735: LD_VAR 0 1
68739: PUSH
68740: LD_INT 3
68742: PLUS
68743: PUSH
68744: LD_VAR 0 2
68748: PUSH
68749: LD_INT 4
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: LIST
68756: PUSH
68757: LD_VAR 0 1
68761: PUSH
68762: LD_INT 4
68764: PLUS
68765: PUSH
68766: LD_VAR 0 2
68770: PUSH
68771: LD_INT 4
68773: PLUS
68774: PUSH
68775: LD_INT 5
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: LIST
68782: PUSH
68783: LD_VAR 0 1
68787: PUSH
68788: LD_INT 4
68790: MINUS
68791: PUSH
68792: LD_VAR 0 2
68796: PUSH
68797: LD_INT 1
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: LIST
68804: PUSH
68805: LD_VAR 0 1
68809: PUSH
68810: LD_VAR 0 2
68814: PUSH
68815: LD_INT 4
68817: MINUS
68818: PUSH
68819: LD_INT 3
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: LIST
68826: PUSH
68827: LD_VAR 0 1
68831: PUSH
68832: LD_INT 3
68834: MINUS
68835: PUSH
68836: LD_VAR 0 2
68840: PUSH
68841: LD_INT 3
68843: MINUS
68844: PUSH
68845: LD_INT 2
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: LIST
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: ST_TO_ADDR
// end ; 4 :
68860: GO 69141
68862: LD_INT 4
68864: DOUBLE
68865: EQUAL
68866: IFTRUE 68870
68868: GO 69003
68870: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68871: LD_ADDR_VAR 0 5
68875: PUSH
68876: LD_VAR 0 1
68880: PUSH
68881: LD_VAR 0 2
68885: PUSH
68886: LD_INT 4
68888: PLUS
68889: PUSH
68890: LD_INT 0
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: LIST
68897: PUSH
68898: LD_VAR 0 1
68902: PUSH
68903: LD_INT 3
68905: PLUS
68906: PUSH
68907: LD_VAR 0 2
68911: PUSH
68912: LD_INT 3
68914: PLUS
68915: PUSH
68916: LD_INT 5
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: LIST
68923: PUSH
68924: LD_VAR 0 1
68928: PUSH
68929: LD_INT 4
68931: PLUS
68932: PUSH
68933: LD_VAR 0 2
68937: PUSH
68938: LD_INT 4
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: LIST
68945: PUSH
68946: LD_VAR 0 1
68950: PUSH
68951: LD_VAR 0 2
68955: PUSH
68956: LD_INT 3
68958: MINUS
68959: PUSH
68960: LD_INT 3
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: LIST
68967: PUSH
68968: LD_VAR 0 1
68972: PUSH
68973: LD_INT 4
68975: MINUS
68976: PUSH
68977: LD_VAR 0 2
68981: PUSH
68982: LD_INT 4
68984: MINUS
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: LIST
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: ST_TO_ADDR
// end ; 5 :
69001: GO 69141
69003: LD_INT 5
69005: DOUBLE
69006: EQUAL
69007: IFTRUE 69011
69009: GO 69140
69011: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69012: LD_ADDR_VAR 0 5
69016: PUSH
69017: LD_VAR 0 1
69021: PUSH
69022: LD_INT 4
69024: MINUS
69025: PUSH
69026: LD_VAR 0 2
69030: PUSH
69031: LD_INT 1
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: LIST
69038: PUSH
69039: LD_VAR 0 1
69043: PUSH
69044: LD_VAR 0 2
69048: PUSH
69049: LD_INT 4
69051: MINUS
69052: PUSH
69053: LD_INT 3
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: LIST
69060: PUSH
69061: LD_VAR 0 1
69065: PUSH
69066: LD_INT 4
69068: PLUS
69069: PUSH
69070: LD_VAR 0 2
69074: PUSH
69075: LD_INT 4
69077: PLUS
69078: PUSH
69079: LD_INT 5
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: LIST
69086: PUSH
69087: LD_VAR 0 1
69091: PUSH
69092: LD_INT 3
69094: PLUS
69095: PUSH
69096: LD_VAR 0 2
69100: PUSH
69101: LD_INT 4
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: LIST
69108: PUSH
69109: LD_VAR 0 1
69113: PUSH
69114: LD_VAR 0 2
69118: PUSH
69119: LD_INT 3
69121: PLUS
69122: PUSH
69123: LD_INT 0
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: LIST
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: ST_TO_ADDR
// end ; end ;
69138: GO 69141
69140: POP
// result := list ;
69141: LD_ADDR_VAR 0 4
69145: PUSH
69146: LD_VAR 0 5
69150: ST_TO_ADDR
// end ;
69151: LD_VAR 0 4
69155: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69156: LD_INT 0
69158: PPUSH
69159: PPUSH
69160: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69161: LD_VAR 0 1
69165: NOT
69166: PUSH
69167: LD_VAR 0 2
69171: PUSH
69172: LD_INT 1
69174: PUSH
69175: LD_INT 2
69177: PUSH
69178: LD_INT 3
69180: PUSH
69181: LD_INT 4
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: IN
69190: NOT
69191: OR
69192: IFFALSE 69196
// exit ;
69194: GO 69279
// tmp := [ ] ;
69196: LD_ADDR_VAR 0 5
69200: PUSH
69201: EMPTY
69202: ST_TO_ADDR
// for i in units do
69203: LD_ADDR_VAR 0 4
69207: PUSH
69208: LD_VAR 0 1
69212: PUSH
69213: FOR_IN
69214: IFFALSE 69248
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69216: LD_ADDR_VAR 0 5
69220: PUSH
69221: LD_VAR 0 5
69225: PPUSH
69226: LD_VAR 0 4
69230: PPUSH
69231: LD_VAR 0 2
69235: PPUSH
69236: CALL_OW 259
69240: PPUSH
69241: CALL 70652 0 2
69245: ST_TO_ADDR
69246: GO 69213
69248: POP
69249: POP
// if not tmp then
69250: LD_VAR 0 5
69254: NOT
69255: IFFALSE 69259
// exit ;
69257: GO 69279
// result := SortListByListDesc ( units , tmp ) ;
69259: LD_ADDR_VAR 0 3
69263: PUSH
69264: LD_VAR 0 1
69268: PPUSH
69269: LD_VAR 0 5
69273: PPUSH
69274: CALL_OW 77
69278: ST_TO_ADDR
// end ;
69279: LD_VAR 0 3
69283: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69284: LD_INT 0
69286: PPUSH
69287: PPUSH
69288: PPUSH
// result := false ;
69289: LD_ADDR_VAR 0 3
69293: PUSH
69294: LD_INT 0
69296: ST_TO_ADDR
// if not building then
69297: LD_VAR 0 2
69301: NOT
69302: IFFALSE 69306
// exit ;
69304: GO 69444
// x := GetX ( building ) ;
69306: LD_ADDR_VAR 0 4
69310: PUSH
69311: LD_VAR 0 2
69315: PPUSH
69316: CALL_OW 250
69320: ST_TO_ADDR
// y := GetY ( building ) ;
69321: LD_ADDR_VAR 0 5
69325: PUSH
69326: LD_VAR 0 2
69330: PPUSH
69331: CALL_OW 251
69335: ST_TO_ADDR
// if not x or not y then
69336: LD_VAR 0 4
69340: NOT
69341: PUSH
69342: LD_VAR 0 5
69346: NOT
69347: OR
69348: IFFALSE 69352
// exit ;
69350: GO 69444
// if GetTaskList ( unit ) then
69352: LD_VAR 0 1
69356: PPUSH
69357: CALL_OW 437
69361: IFFALSE 69444
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69363: LD_STRING e
69365: PUSH
69366: LD_VAR 0 1
69370: PPUSH
69371: CALL_OW 437
69375: PUSH
69376: LD_INT 1
69378: ARRAY
69379: PUSH
69380: LD_INT 1
69382: ARRAY
69383: EQUAL
69384: PUSH
69385: LD_VAR 0 4
69389: PUSH
69390: LD_VAR 0 1
69394: PPUSH
69395: CALL_OW 437
69399: PUSH
69400: LD_INT 1
69402: ARRAY
69403: PUSH
69404: LD_INT 2
69406: ARRAY
69407: EQUAL
69408: AND
69409: PUSH
69410: LD_VAR 0 5
69414: PUSH
69415: LD_VAR 0 1
69419: PPUSH
69420: CALL_OW 437
69424: PUSH
69425: LD_INT 1
69427: ARRAY
69428: PUSH
69429: LD_INT 3
69431: ARRAY
69432: EQUAL
69433: AND
69434: IFFALSE 69444
// result := true end ;
69436: LD_ADDR_VAR 0 3
69440: PUSH
69441: LD_INT 1
69443: ST_TO_ADDR
// end ;
69444: LD_VAR 0 3
69448: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69449: LD_INT 0
69451: PPUSH
// result := false ;
69452: LD_ADDR_VAR 0 4
69456: PUSH
69457: LD_INT 0
69459: ST_TO_ADDR
// if GetTaskList ( unit ) then
69460: LD_VAR 0 1
69464: PPUSH
69465: CALL_OW 437
69469: IFFALSE 69552
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69471: LD_STRING M
69473: PUSH
69474: LD_VAR 0 1
69478: PPUSH
69479: CALL_OW 437
69483: PUSH
69484: LD_INT 1
69486: ARRAY
69487: PUSH
69488: LD_INT 1
69490: ARRAY
69491: EQUAL
69492: PUSH
69493: LD_VAR 0 2
69497: PUSH
69498: LD_VAR 0 1
69502: PPUSH
69503: CALL_OW 437
69507: PUSH
69508: LD_INT 1
69510: ARRAY
69511: PUSH
69512: LD_INT 2
69514: ARRAY
69515: EQUAL
69516: AND
69517: PUSH
69518: LD_VAR 0 3
69522: PUSH
69523: LD_VAR 0 1
69527: PPUSH
69528: CALL_OW 437
69532: PUSH
69533: LD_INT 1
69535: ARRAY
69536: PUSH
69537: LD_INT 3
69539: ARRAY
69540: EQUAL
69541: AND
69542: IFFALSE 69552
// result := true ;
69544: LD_ADDR_VAR 0 4
69548: PUSH
69549: LD_INT 1
69551: ST_TO_ADDR
// end ; end ;
69552: LD_VAR 0 4
69556: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69557: LD_INT 0
69559: PPUSH
69560: PPUSH
69561: PPUSH
69562: PPUSH
// if not unit or not area then
69563: LD_VAR 0 1
69567: NOT
69568: PUSH
69569: LD_VAR 0 2
69573: NOT
69574: OR
69575: IFFALSE 69579
// exit ;
69577: GO 69755
// tmp := AreaToList ( area , i ) ;
69579: LD_ADDR_VAR 0 6
69583: PUSH
69584: LD_VAR 0 2
69588: PPUSH
69589: LD_VAR 0 5
69593: PPUSH
69594: CALL_OW 517
69598: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69599: LD_ADDR_VAR 0 5
69603: PUSH
69604: DOUBLE
69605: LD_INT 1
69607: DEC
69608: ST_TO_ADDR
69609: LD_VAR 0 6
69613: PUSH
69614: LD_INT 1
69616: ARRAY
69617: PUSH
69618: FOR_TO
69619: IFFALSE 69753
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69621: LD_ADDR_VAR 0 7
69625: PUSH
69626: LD_VAR 0 6
69630: PUSH
69631: LD_INT 1
69633: ARRAY
69634: PUSH
69635: LD_VAR 0 5
69639: ARRAY
69640: PUSH
69641: LD_VAR 0 6
69645: PUSH
69646: LD_INT 2
69648: ARRAY
69649: PUSH
69650: LD_VAR 0 5
69654: ARRAY
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69660: LD_INT 92
69662: PUSH
69663: LD_VAR 0 7
69667: PUSH
69668: LD_INT 1
69670: ARRAY
69671: PUSH
69672: LD_VAR 0 7
69676: PUSH
69677: LD_INT 2
69679: ARRAY
69680: PUSH
69681: LD_INT 2
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: PPUSH
69690: CALL_OW 69
69694: PUSH
69695: LD_INT 0
69697: EQUAL
69698: IFFALSE 69751
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69700: LD_VAR 0 1
69704: PPUSH
69705: LD_VAR 0 7
69709: PUSH
69710: LD_INT 1
69712: ARRAY
69713: PPUSH
69714: LD_VAR 0 7
69718: PUSH
69719: LD_INT 2
69721: ARRAY
69722: PPUSH
69723: LD_VAR 0 3
69727: PPUSH
69728: CALL_OW 48
// result := IsPlaced ( unit ) ;
69732: LD_ADDR_VAR 0 4
69736: PUSH
69737: LD_VAR 0 1
69741: PPUSH
69742: CALL_OW 305
69746: ST_TO_ADDR
// exit ;
69747: POP
69748: POP
69749: GO 69755
// end ; end ;
69751: GO 69618
69753: POP
69754: POP
// end ;
69755: LD_VAR 0 4
69759: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69760: LD_INT 0
69762: PPUSH
69763: PPUSH
69764: PPUSH
// if not side or side > 8 then
69765: LD_VAR 0 1
69769: NOT
69770: PUSH
69771: LD_VAR 0 1
69775: PUSH
69776: LD_INT 8
69778: GREATER
69779: OR
69780: IFFALSE 69784
// exit ;
69782: GO 69971
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69784: LD_ADDR_VAR 0 4
69788: PUSH
69789: LD_INT 22
69791: PUSH
69792: LD_VAR 0 1
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 21
69803: PUSH
69804: LD_INT 3
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PPUSH
69815: CALL_OW 69
69819: ST_TO_ADDR
// if not tmp then
69820: LD_VAR 0 4
69824: NOT
69825: IFFALSE 69829
// exit ;
69827: GO 69971
// enable_addtolog := true ;
69829: LD_ADDR_OWVAR 81
69833: PUSH
69834: LD_INT 1
69836: ST_TO_ADDR
// AddToLog ( [ ) ;
69837: LD_STRING [
69839: PPUSH
69840: CALL_OW 561
// for i in tmp do
69844: LD_ADDR_VAR 0 3
69848: PUSH
69849: LD_VAR 0 4
69853: PUSH
69854: FOR_IN
69855: IFFALSE 69962
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69857: LD_STRING [
69859: PUSH
69860: LD_VAR 0 3
69864: PPUSH
69865: CALL_OW 266
69869: STR
69870: PUSH
69871: LD_STRING , 
69873: STR
69874: PUSH
69875: LD_VAR 0 3
69879: PPUSH
69880: CALL_OW 250
69884: STR
69885: PUSH
69886: LD_STRING , 
69888: STR
69889: PUSH
69890: LD_VAR 0 3
69894: PPUSH
69895: CALL_OW 251
69899: STR
69900: PUSH
69901: LD_STRING , 
69903: STR
69904: PUSH
69905: LD_VAR 0 3
69909: PPUSH
69910: CALL_OW 254
69914: STR
69915: PUSH
69916: LD_STRING , 
69918: STR
69919: PUSH
69920: LD_VAR 0 3
69924: PPUSH
69925: LD_INT 1
69927: PPUSH
69928: CALL_OW 268
69932: STR
69933: PUSH
69934: LD_STRING , 
69936: STR
69937: PUSH
69938: LD_VAR 0 3
69942: PPUSH
69943: LD_INT 2
69945: PPUSH
69946: CALL_OW 268
69950: STR
69951: PUSH
69952: LD_STRING ],
69954: STR
69955: PPUSH
69956: CALL_OW 561
// end ;
69960: GO 69854
69962: POP
69963: POP
// AddToLog ( ]; ) ;
69964: LD_STRING ];
69966: PPUSH
69967: CALL_OW 561
// end ;
69971: LD_VAR 0 2
69975: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69976: LD_INT 0
69978: PPUSH
69979: PPUSH
69980: PPUSH
69981: PPUSH
69982: PPUSH
// if not area or not rate or not max then
69983: LD_VAR 0 1
69987: NOT
69988: PUSH
69989: LD_VAR 0 2
69993: NOT
69994: OR
69995: PUSH
69996: LD_VAR 0 4
70000: NOT
70001: OR
70002: IFFALSE 70006
// exit ;
70004: GO 70195
// while 1 do
70006: LD_INT 1
70008: IFFALSE 70195
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70010: LD_ADDR_VAR 0 9
70014: PUSH
70015: LD_VAR 0 1
70019: PPUSH
70020: LD_INT 1
70022: PPUSH
70023: CALL_OW 287
70027: PUSH
70028: LD_INT 10
70030: MUL
70031: ST_TO_ADDR
// r := rate / 10 ;
70032: LD_ADDR_VAR 0 7
70036: PUSH
70037: LD_VAR 0 2
70041: PUSH
70042: LD_INT 10
70044: DIVREAL
70045: ST_TO_ADDR
// time := 1 1$00 ;
70046: LD_ADDR_VAR 0 8
70050: PUSH
70051: LD_INT 2100
70053: ST_TO_ADDR
// if amount < min then
70054: LD_VAR 0 9
70058: PUSH
70059: LD_VAR 0 3
70063: LESS
70064: IFFALSE 70082
// r := r * 2 else
70066: LD_ADDR_VAR 0 7
70070: PUSH
70071: LD_VAR 0 7
70075: PUSH
70076: LD_INT 2
70078: MUL
70079: ST_TO_ADDR
70080: GO 70108
// if amount > max then
70082: LD_VAR 0 9
70086: PUSH
70087: LD_VAR 0 4
70091: GREATER
70092: IFFALSE 70108
// r := r / 2 ;
70094: LD_ADDR_VAR 0 7
70098: PUSH
70099: LD_VAR 0 7
70103: PUSH
70104: LD_INT 2
70106: DIVREAL
70107: ST_TO_ADDR
// time := time / r ;
70108: LD_ADDR_VAR 0 8
70112: PUSH
70113: LD_VAR 0 8
70117: PUSH
70118: LD_VAR 0 7
70122: DIVREAL
70123: ST_TO_ADDR
// if time < 0 then
70124: LD_VAR 0 8
70128: PUSH
70129: LD_INT 0
70131: LESS
70132: IFFALSE 70149
// time := time * - 1 ;
70134: LD_ADDR_VAR 0 8
70138: PUSH
70139: LD_VAR 0 8
70143: PUSH
70144: LD_INT 1
70146: NEG
70147: MUL
70148: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70149: LD_VAR 0 8
70153: PUSH
70154: LD_INT 35
70156: PPUSH
70157: LD_INT 875
70159: PPUSH
70160: CALL_OW 12
70164: PLUS
70165: PPUSH
70166: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70170: LD_INT 1
70172: PPUSH
70173: LD_INT 5
70175: PPUSH
70176: CALL_OW 12
70180: PPUSH
70181: LD_VAR 0 1
70185: PPUSH
70186: LD_INT 1
70188: PPUSH
70189: CALL_OW 55
// end ;
70193: GO 70006
// end ;
70195: LD_VAR 0 5
70199: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70200: LD_INT 0
70202: PPUSH
70203: PPUSH
70204: PPUSH
70205: PPUSH
70206: PPUSH
70207: PPUSH
70208: PPUSH
70209: PPUSH
// if not turrets or not factories then
70210: LD_VAR 0 1
70214: NOT
70215: PUSH
70216: LD_VAR 0 2
70220: NOT
70221: OR
70222: IFFALSE 70226
// exit ;
70224: GO 70533
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70226: LD_ADDR_VAR 0 10
70230: PUSH
70231: LD_INT 5
70233: PUSH
70234: LD_INT 6
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 2
70243: PUSH
70244: LD_INT 4
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 3
70253: PUSH
70254: LD_INT 5
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 24
70268: PUSH
70269: LD_INT 25
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 23
70278: PUSH
70279: LD_INT 27
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 42
70292: PUSH
70293: LD_INT 43
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 44
70302: PUSH
70303: LD_INT 46
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 45
70312: PUSH
70313: LD_INT 47
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: LIST
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: LIST
70329: ST_TO_ADDR
// result := [ ] ;
70330: LD_ADDR_VAR 0 3
70334: PUSH
70335: EMPTY
70336: ST_TO_ADDR
// for i in turrets do
70337: LD_ADDR_VAR 0 4
70341: PUSH
70342: LD_VAR 0 1
70346: PUSH
70347: FOR_IN
70348: IFFALSE 70531
// begin nat := GetNation ( i ) ;
70350: LD_ADDR_VAR 0 7
70354: PUSH
70355: LD_VAR 0 4
70359: PPUSH
70360: CALL_OW 248
70364: ST_TO_ADDR
// weapon := 0 ;
70365: LD_ADDR_VAR 0 8
70369: PUSH
70370: LD_INT 0
70372: ST_TO_ADDR
// if not nat then
70373: LD_VAR 0 7
70377: NOT
70378: IFFALSE 70382
// continue ;
70380: GO 70347
// for j in list [ nat ] do
70382: LD_ADDR_VAR 0 5
70386: PUSH
70387: LD_VAR 0 10
70391: PUSH
70392: LD_VAR 0 7
70396: ARRAY
70397: PUSH
70398: FOR_IN
70399: IFFALSE 70440
// if GetBWeapon ( i ) = j [ 1 ] then
70401: LD_VAR 0 4
70405: PPUSH
70406: CALL_OW 269
70410: PUSH
70411: LD_VAR 0 5
70415: PUSH
70416: LD_INT 1
70418: ARRAY
70419: EQUAL
70420: IFFALSE 70438
// begin weapon := j [ 2 ] ;
70422: LD_ADDR_VAR 0 8
70426: PUSH
70427: LD_VAR 0 5
70431: PUSH
70432: LD_INT 2
70434: ARRAY
70435: ST_TO_ADDR
// break ;
70436: GO 70440
// end ;
70438: GO 70398
70440: POP
70441: POP
// if not weapon then
70442: LD_VAR 0 8
70446: NOT
70447: IFFALSE 70451
// continue ;
70449: GO 70347
// for k in factories do
70451: LD_ADDR_VAR 0 6
70455: PUSH
70456: LD_VAR 0 2
70460: PUSH
70461: FOR_IN
70462: IFFALSE 70527
// begin weapons := AvailableWeaponList ( k ) ;
70464: LD_ADDR_VAR 0 9
70468: PUSH
70469: LD_VAR 0 6
70473: PPUSH
70474: CALL_OW 478
70478: ST_TO_ADDR
// if not weapons then
70479: LD_VAR 0 9
70483: NOT
70484: IFFALSE 70488
// continue ;
70486: GO 70461
// if weapon in weapons then
70488: LD_VAR 0 8
70492: PUSH
70493: LD_VAR 0 9
70497: IN
70498: IFFALSE 70525
// begin result := [ i , weapon ] ;
70500: LD_ADDR_VAR 0 3
70504: PUSH
70505: LD_VAR 0 4
70509: PUSH
70510: LD_VAR 0 8
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: ST_TO_ADDR
// exit ;
70519: POP
70520: POP
70521: POP
70522: POP
70523: GO 70533
// end ; end ;
70525: GO 70461
70527: POP
70528: POP
// end ;
70529: GO 70347
70531: POP
70532: POP
// end ;
70533: LD_VAR 0 3
70537: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70538: LD_INT 0
70540: PPUSH
// if not side or side > 8 then
70541: LD_VAR 0 3
70545: NOT
70546: PUSH
70547: LD_VAR 0 3
70551: PUSH
70552: LD_INT 8
70554: GREATER
70555: OR
70556: IFFALSE 70560
// exit ;
70558: GO 70619
// if not range then
70560: LD_VAR 0 4
70564: NOT
70565: IFFALSE 70576
// range := - 12 ;
70567: LD_ADDR_VAR 0 4
70571: PUSH
70572: LD_INT 12
70574: NEG
70575: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70576: LD_VAR 0 1
70580: PPUSH
70581: LD_VAR 0 2
70585: PPUSH
70586: LD_VAR 0 3
70590: PPUSH
70591: LD_VAR 0 4
70595: PPUSH
70596: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70600: LD_VAR 0 1
70604: PPUSH
70605: LD_VAR 0 2
70609: PPUSH
70610: LD_VAR 0 3
70614: PPUSH
70615: CALL_OW 331
// end ;
70619: LD_VAR 0 5
70623: RET
// export function Video ( mode ) ; begin
70624: LD_INT 0
70626: PPUSH
// ingame_video = mode ;
70627: LD_ADDR_OWVAR 52
70631: PUSH
70632: LD_VAR 0 1
70636: ST_TO_ADDR
// interface_hidden = mode ;
70637: LD_ADDR_OWVAR 54
70641: PUSH
70642: LD_VAR 0 1
70646: ST_TO_ADDR
// end ;
70647: LD_VAR 0 2
70651: RET
// export function Join ( array , element ) ; begin
70652: LD_INT 0
70654: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70655: LD_ADDR_VAR 0 3
70659: PUSH
70660: LD_VAR 0 1
70664: PPUSH
70665: LD_VAR 0 1
70669: PUSH
70670: LD_INT 1
70672: PLUS
70673: PPUSH
70674: LD_VAR 0 2
70678: PPUSH
70679: CALL_OW 1
70683: ST_TO_ADDR
// end ;
70684: LD_VAR 0 3
70688: RET
// export function JoinUnion ( array , element ) ; begin
70689: LD_INT 0
70691: PPUSH
// result := array union element ;
70692: LD_ADDR_VAR 0 3
70696: PUSH
70697: LD_VAR 0 1
70701: PUSH
70702: LD_VAR 0 2
70706: UNION
70707: ST_TO_ADDR
// end ;
70708: LD_VAR 0 3
70712: RET
// export function GetBehemoths ( side ) ; begin
70713: LD_INT 0
70715: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70716: LD_ADDR_VAR 0 2
70720: PUSH
70721: LD_INT 22
70723: PUSH
70724: LD_VAR 0 1
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 31
70735: PUSH
70736: LD_INT 25
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PPUSH
70747: CALL_OW 69
70751: ST_TO_ADDR
// end ;
70752: LD_VAR 0 2
70756: RET
// export function Shuffle ( array ) ; var i , index ; begin
70757: LD_INT 0
70759: PPUSH
70760: PPUSH
70761: PPUSH
// result := [ ] ;
70762: LD_ADDR_VAR 0 2
70766: PUSH
70767: EMPTY
70768: ST_TO_ADDR
// if not array then
70769: LD_VAR 0 1
70773: NOT
70774: IFFALSE 70778
// exit ;
70776: GO 70877
// Randomize ;
70778: CALL_OW 10
// for i = array downto 1 do
70782: LD_ADDR_VAR 0 3
70786: PUSH
70787: DOUBLE
70788: LD_VAR 0 1
70792: INC
70793: ST_TO_ADDR
70794: LD_INT 1
70796: PUSH
70797: FOR_DOWNTO
70798: IFFALSE 70875
// begin index := rand ( 1 , array ) ;
70800: LD_ADDR_VAR 0 4
70804: PUSH
70805: LD_INT 1
70807: PPUSH
70808: LD_VAR 0 1
70812: PPUSH
70813: CALL_OW 12
70817: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70818: LD_ADDR_VAR 0 2
70822: PUSH
70823: LD_VAR 0 2
70827: PPUSH
70828: LD_VAR 0 2
70832: PUSH
70833: LD_INT 1
70835: PLUS
70836: PPUSH
70837: LD_VAR 0 1
70841: PUSH
70842: LD_VAR 0 4
70846: ARRAY
70847: PPUSH
70848: CALL_OW 2
70852: ST_TO_ADDR
// array := Delete ( array , index ) ;
70853: LD_ADDR_VAR 0 1
70857: PUSH
70858: LD_VAR 0 1
70862: PPUSH
70863: LD_VAR 0 4
70867: PPUSH
70868: CALL_OW 3
70872: ST_TO_ADDR
// end ;
70873: GO 70797
70875: POP
70876: POP
// end ;
70877: LD_VAR 0 2
70881: RET
// export function GetBaseMaterials ( base ) ; begin
70882: LD_INT 0
70884: PPUSH
// result := [ 0 , 0 , 0 ] ;
70885: LD_ADDR_VAR 0 2
70889: PUSH
70890: LD_INT 0
70892: PUSH
70893: LD_INT 0
70895: PUSH
70896: LD_INT 0
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: LIST
70903: ST_TO_ADDR
// if not base then
70904: LD_VAR 0 1
70908: NOT
70909: IFFALSE 70913
// exit ;
70911: GO 70962
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70913: LD_ADDR_VAR 0 2
70917: PUSH
70918: LD_VAR 0 1
70922: PPUSH
70923: LD_INT 1
70925: PPUSH
70926: CALL_OW 275
70930: PUSH
70931: LD_VAR 0 1
70935: PPUSH
70936: LD_INT 2
70938: PPUSH
70939: CALL_OW 275
70943: PUSH
70944: LD_VAR 0 1
70948: PPUSH
70949: LD_INT 3
70951: PPUSH
70952: CALL_OW 275
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: LIST
70961: ST_TO_ADDR
// end ;
70962: LD_VAR 0 2
70966: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70967: LD_INT 0
70969: PPUSH
70970: PPUSH
// result := array ;
70971: LD_ADDR_VAR 0 3
70975: PUSH
70976: LD_VAR 0 1
70980: ST_TO_ADDR
// if size >= result then
70981: LD_VAR 0 2
70985: PUSH
70986: LD_VAR 0 3
70990: GREATEREQUAL
70991: IFFALSE 70995
// exit ;
70993: GO 71045
// if size then
70995: LD_VAR 0 2
70999: IFFALSE 71045
// for i := array downto size do
71001: LD_ADDR_VAR 0 4
71005: PUSH
71006: DOUBLE
71007: LD_VAR 0 1
71011: INC
71012: ST_TO_ADDR
71013: LD_VAR 0 2
71017: PUSH
71018: FOR_DOWNTO
71019: IFFALSE 71043
// result := Delete ( result , result ) ;
71021: LD_ADDR_VAR 0 3
71025: PUSH
71026: LD_VAR 0 3
71030: PPUSH
71031: LD_VAR 0 3
71035: PPUSH
71036: CALL_OW 3
71040: ST_TO_ADDR
71041: GO 71018
71043: POP
71044: POP
// end ;
71045: LD_VAR 0 3
71049: RET
// export function ComExit ( unit ) ; var tmp ; begin
71050: LD_INT 0
71052: PPUSH
71053: PPUSH
// if not IsInUnit ( unit ) then
71054: LD_VAR 0 1
71058: PPUSH
71059: CALL_OW 310
71063: NOT
71064: IFFALSE 71068
// exit ;
71066: GO 71128
// tmp := IsInUnit ( unit ) ;
71068: LD_ADDR_VAR 0 3
71072: PUSH
71073: LD_VAR 0 1
71077: PPUSH
71078: CALL_OW 310
71082: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71083: LD_VAR 0 3
71087: PPUSH
71088: CALL_OW 247
71092: PUSH
71093: LD_INT 2
71095: EQUAL
71096: IFFALSE 71109
// ComExitVehicle ( unit ) else
71098: LD_VAR 0 1
71102: PPUSH
71103: CALL_OW 121
71107: GO 71118
// ComExitBuilding ( unit ) ;
71109: LD_VAR 0 1
71113: PPUSH
71114: CALL_OW 122
// result := tmp ;
71118: LD_ADDR_VAR 0 2
71122: PUSH
71123: LD_VAR 0 3
71127: ST_TO_ADDR
// end ;
71128: LD_VAR 0 2
71132: RET
// export function ComExitAll ( units ) ; var i ; begin
71133: LD_INT 0
71135: PPUSH
71136: PPUSH
// if not units then
71137: LD_VAR 0 1
71141: NOT
71142: IFFALSE 71146
// exit ;
71144: GO 71172
// for i in units do
71146: LD_ADDR_VAR 0 3
71150: PUSH
71151: LD_VAR 0 1
71155: PUSH
71156: FOR_IN
71157: IFFALSE 71170
// ComExit ( i ) ;
71159: LD_VAR 0 3
71163: PPUSH
71164: CALL 71050 0 1
71168: GO 71156
71170: POP
71171: POP
// end ;
71172: LD_VAR 0 2
71176: RET
// export function ResetHc ; begin
71177: LD_INT 0
71179: PPUSH
// InitHc ;
71180: CALL_OW 19
// hc_importance := 0 ;
71184: LD_ADDR_OWVAR 32
71188: PUSH
71189: LD_INT 0
71191: ST_TO_ADDR
// end ;
71192: LD_VAR 0 1
71196: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71197: LD_INT 0
71199: PPUSH
71200: PPUSH
71201: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71202: LD_ADDR_VAR 0 6
71206: PUSH
71207: LD_VAR 0 1
71211: PUSH
71212: LD_VAR 0 3
71216: PLUS
71217: PUSH
71218: LD_INT 2
71220: DIV
71221: ST_TO_ADDR
// if _x < 0 then
71222: LD_VAR 0 6
71226: PUSH
71227: LD_INT 0
71229: LESS
71230: IFFALSE 71247
// _x := _x * - 1 ;
71232: LD_ADDR_VAR 0 6
71236: PUSH
71237: LD_VAR 0 6
71241: PUSH
71242: LD_INT 1
71244: NEG
71245: MUL
71246: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71247: LD_ADDR_VAR 0 7
71251: PUSH
71252: LD_VAR 0 2
71256: PUSH
71257: LD_VAR 0 4
71261: PLUS
71262: PUSH
71263: LD_INT 2
71265: DIV
71266: ST_TO_ADDR
// if _y < 0 then
71267: LD_VAR 0 7
71271: PUSH
71272: LD_INT 0
71274: LESS
71275: IFFALSE 71292
// _y := _y * - 1 ;
71277: LD_ADDR_VAR 0 7
71281: PUSH
71282: LD_VAR 0 7
71286: PUSH
71287: LD_INT 1
71289: NEG
71290: MUL
71291: ST_TO_ADDR
// result := [ _x , _y ] ;
71292: LD_ADDR_VAR 0 5
71296: PUSH
71297: LD_VAR 0 6
71301: PUSH
71302: LD_VAR 0 7
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: ST_TO_ADDR
// end ;
71311: LD_VAR 0 5
71315: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71316: LD_INT 0
71318: PPUSH
71319: PPUSH
71320: PPUSH
71321: PPUSH
// task := GetTaskList ( unit ) ;
71322: LD_ADDR_VAR 0 7
71326: PUSH
71327: LD_VAR 0 1
71331: PPUSH
71332: CALL_OW 437
71336: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71337: LD_VAR 0 7
71341: NOT
71342: PUSH
71343: LD_VAR 0 1
71347: PPUSH
71348: LD_VAR 0 2
71352: PPUSH
71353: CALL_OW 308
71357: NOT
71358: AND
71359: IFFALSE 71363
// exit ;
71361: GO 71481
// if IsInArea ( unit , area ) then
71363: LD_VAR 0 1
71367: PPUSH
71368: LD_VAR 0 2
71372: PPUSH
71373: CALL_OW 308
71377: IFFALSE 71395
// begin ComMoveToArea ( unit , goAway ) ;
71379: LD_VAR 0 1
71383: PPUSH
71384: LD_VAR 0 3
71388: PPUSH
71389: CALL_OW 113
// exit ;
71393: GO 71481
// end ; if task [ 1 ] [ 1 ] <> M then
71395: LD_VAR 0 7
71399: PUSH
71400: LD_INT 1
71402: ARRAY
71403: PUSH
71404: LD_INT 1
71406: ARRAY
71407: PUSH
71408: LD_STRING M
71410: NONEQUAL
71411: IFFALSE 71415
// exit ;
71413: GO 71481
// x := task [ 1 ] [ 2 ] ;
71415: LD_ADDR_VAR 0 5
71419: PUSH
71420: LD_VAR 0 7
71424: PUSH
71425: LD_INT 1
71427: ARRAY
71428: PUSH
71429: LD_INT 2
71431: ARRAY
71432: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71433: LD_ADDR_VAR 0 6
71437: PUSH
71438: LD_VAR 0 7
71442: PUSH
71443: LD_INT 1
71445: ARRAY
71446: PUSH
71447: LD_INT 3
71449: ARRAY
71450: ST_TO_ADDR
// if InArea ( x , y , area ) then
71451: LD_VAR 0 5
71455: PPUSH
71456: LD_VAR 0 6
71460: PPUSH
71461: LD_VAR 0 2
71465: PPUSH
71466: CALL_OW 309
71470: IFFALSE 71481
// ComStop ( unit ) ;
71472: LD_VAR 0 1
71476: PPUSH
71477: CALL_OW 141
// end ;
71481: LD_VAR 0 4
71485: RET
// export function Abs ( value ) ; begin
71486: LD_INT 0
71488: PPUSH
// result := value ;
71489: LD_ADDR_VAR 0 2
71493: PUSH
71494: LD_VAR 0 1
71498: ST_TO_ADDR
// if value < 0 then
71499: LD_VAR 0 1
71503: PUSH
71504: LD_INT 0
71506: LESS
71507: IFFALSE 71524
// result := value * - 1 ;
71509: LD_ADDR_VAR 0 2
71513: PUSH
71514: LD_VAR 0 1
71518: PUSH
71519: LD_INT 1
71521: NEG
71522: MUL
71523: ST_TO_ADDR
// end ;
71524: LD_VAR 0 2
71528: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71529: LD_INT 0
71531: PPUSH
71532: PPUSH
71533: PPUSH
71534: PPUSH
71535: PPUSH
71536: PPUSH
71537: PPUSH
71538: PPUSH
// if not unit or not building then
71539: LD_VAR 0 1
71543: NOT
71544: PUSH
71545: LD_VAR 0 2
71549: NOT
71550: OR
71551: IFFALSE 71555
// exit ;
71553: GO 71781
// x := GetX ( building ) ;
71555: LD_ADDR_VAR 0 4
71559: PUSH
71560: LD_VAR 0 2
71564: PPUSH
71565: CALL_OW 250
71569: ST_TO_ADDR
// y := GetY ( building ) ;
71570: LD_ADDR_VAR 0 6
71574: PUSH
71575: LD_VAR 0 2
71579: PPUSH
71580: CALL_OW 251
71584: ST_TO_ADDR
// d := GetDir ( building ) ;
71585: LD_ADDR_VAR 0 8
71589: PUSH
71590: LD_VAR 0 2
71594: PPUSH
71595: CALL_OW 254
71599: ST_TO_ADDR
// r := 4 ;
71600: LD_ADDR_VAR 0 9
71604: PUSH
71605: LD_INT 4
71607: ST_TO_ADDR
// for i := 1 to 5 do
71608: LD_ADDR_VAR 0 10
71612: PUSH
71613: DOUBLE
71614: LD_INT 1
71616: DEC
71617: ST_TO_ADDR
71618: LD_INT 5
71620: PUSH
71621: FOR_TO
71622: IFFALSE 71779
// begin _x := ShiftX ( x , d , r + i ) ;
71624: LD_ADDR_VAR 0 5
71628: PUSH
71629: LD_VAR 0 4
71633: PPUSH
71634: LD_VAR 0 8
71638: PPUSH
71639: LD_VAR 0 9
71643: PUSH
71644: LD_VAR 0 10
71648: PLUS
71649: PPUSH
71650: CALL_OW 272
71654: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71655: LD_ADDR_VAR 0 7
71659: PUSH
71660: LD_VAR 0 6
71664: PPUSH
71665: LD_VAR 0 8
71669: PPUSH
71670: LD_VAR 0 9
71674: PUSH
71675: LD_VAR 0 10
71679: PLUS
71680: PPUSH
71681: CALL_OW 273
71685: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71686: LD_VAR 0 5
71690: PPUSH
71691: LD_VAR 0 7
71695: PPUSH
71696: CALL_OW 488
71700: PUSH
71701: LD_VAR 0 5
71705: PPUSH
71706: LD_VAR 0 7
71710: PPUSH
71711: CALL_OW 428
71715: PPUSH
71716: CALL_OW 247
71720: PUSH
71721: LD_INT 3
71723: PUSH
71724: LD_INT 2
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: IN
71731: NOT
71732: AND
71733: IFFALSE 71777
// begin ComMoveXY ( unit , _x , _y ) ;
71735: LD_VAR 0 1
71739: PPUSH
71740: LD_VAR 0 5
71744: PPUSH
71745: LD_VAR 0 7
71749: PPUSH
71750: CALL_OW 111
// result := [ _x , _y ] ;
71754: LD_ADDR_VAR 0 3
71758: PUSH
71759: LD_VAR 0 5
71763: PUSH
71764: LD_VAR 0 7
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: ST_TO_ADDR
// exit ;
71773: POP
71774: POP
71775: GO 71781
// end ; end ;
71777: GO 71621
71779: POP
71780: POP
// end ;
71781: LD_VAR 0 3
71785: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71786: LD_INT 0
71788: PPUSH
71789: PPUSH
71790: PPUSH
// result := 0 ;
71791: LD_ADDR_VAR 0 3
71795: PUSH
71796: LD_INT 0
71798: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71799: LD_VAR 0 1
71803: PUSH
71804: LD_INT 0
71806: LESS
71807: PUSH
71808: LD_VAR 0 1
71812: PUSH
71813: LD_INT 8
71815: GREATER
71816: OR
71817: PUSH
71818: LD_VAR 0 2
71822: PUSH
71823: LD_INT 0
71825: LESS
71826: OR
71827: PUSH
71828: LD_VAR 0 2
71832: PUSH
71833: LD_INT 8
71835: GREATER
71836: OR
71837: IFFALSE 71841
// exit ;
71839: GO 71916
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71841: LD_ADDR_VAR 0 4
71845: PUSH
71846: LD_INT 22
71848: PUSH
71849: LD_VAR 0 2
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PPUSH
71858: CALL_OW 69
71862: PUSH
71863: FOR_IN
71864: IFFALSE 71914
// begin un := UnitShoot ( i ) ;
71866: LD_ADDR_VAR 0 5
71870: PUSH
71871: LD_VAR 0 4
71875: PPUSH
71876: CALL_OW 504
71880: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71881: LD_VAR 0 5
71885: PPUSH
71886: CALL_OW 255
71890: PUSH
71891: LD_VAR 0 1
71895: EQUAL
71896: IFFALSE 71912
// begin result := un ;
71898: LD_ADDR_VAR 0 3
71902: PUSH
71903: LD_VAR 0 5
71907: ST_TO_ADDR
// exit ;
71908: POP
71909: POP
71910: GO 71916
// end ; end ;
71912: GO 71863
71914: POP
71915: POP
// end ;
71916: LD_VAR 0 3
71920: RET
// export function GetCargoBay ( units ) ; begin
71921: LD_INT 0
71923: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71924: LD_ADDR_VAR 0 2
71928: PUSH
71929: LD_VAR 0 1
71933: PPUSH
71934: LD_INT 2
71936: PUSH
71937: LD_INT 34
71939: PUSH
71940: LD_INT 12
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 34
71949: PUSH
71950: LD_INT 51
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 34
71959: PUSH
71960: LD_INT 32
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 34
71969: PUSH
71970: LD_INT 89
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: PPUSH
71984: CALL_OW 72
71988: ST_TO_ADDR
// end ;
71989: LD_VAR 0 2
71993: RET
// export function Negate ( value ) ; begin
71994: LD_INT 0
71996: PPUSH
// result := not value ;
71997: LD_ADDR_VAR 0 2
72001: PUSH
72002: LD_VAR 0 1
72006: NOT
72007: ST_TO_ADDR
// end ;
72008: LD_VAR 0 2
72012: RET
// export function Inc ( value ) ; begin
72013: LD_INT 0
72015: PPUSH
// result := value + 1 ;
72016: LD_ADDR_VAR 0 2
72020: PUSH
72021: LD_VAR 0 1
72025: PUSH
72026: LD_INT 1
72028: PLUS
72029: ST_TO_ADDR
// end ;
72030: LD_VAR 0 2
72034: RET
// export function Dec ( value ) ; begin
72035: LD_INT 0
72037: PPUSH
// result := value - 1 ;
72038: LD_ADDR_VAR 0 2
72042: PUSH
72043: LD_VAR 0 1
72047: PUSH
72048: LD_INT 1
72050: MINUS
72051: ST_TO_ADDR
// end ;
72052: LD_VAR 0 2
72056: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72057: LD_INT 0
72059: PPUSH
72060: PPUSH
72061: PPUSH
72062: PPUSH
72063: PPUSH
72064: PPUSH
72065: PPUSH
72066: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72067: LD_VAR 0 1
72071: PPUSH
72072: LD_VAR 0 2
72076: PPUSH
72077: CALL_OW 488
72081: NOT
72082: PUSH
72083: LD_VAR 0 3
72087: PPUSH
72088: LD_VAR 0 4
72092: PPUSH
72093: CALL_OW 488
72097: NOT
72098: OR
72099: IFFALSE 72112
// begin result := - 1 ;
72101: LD_ADDR_VAR 0 5
72105: PUSH
72106: LD_INT 1
72108: NEG
72109: ST_TO_ADDR
// exit ;
72110: GO 72347
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72112: LD_ADDR_VAR 0 12
72116: PUSH
72117: LD_VAR 0 1
72121: PPUSH
72122: LD_VAR 0 2
72126: PPUSH
72127: LD_VAR 0 3
72131: PPUSH
72132: LD_VAR 0 4
72136: PPUSH
72137: CALL 71197 0 4
72141: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72142: LD_ADDR_VAR 0 11
72146: PUSH
72147: LD_VAR 0 1
72151: PPUSH
72152: LD_VAR 0 2
72156: PPUSH
72157: LD_VAR 0 12
72161: PUSH
72162: LD_INT 1
72164: ARRAY
72165: PPUSH
72166: LD_VAR 0 12
72170: PUSH
72171: LD_INT 2
72173: ARRAY
72174: PPUSH
72175: CALL_OW 298
72179: ST_TO_ADDR
// distance := 9999 ;
72180: LD_ADDR_VAR 0 10
72184: PUSH
72185: LD_INT 9999
72187: ST_TO_ADDR
// for i := 0 to 5 do
72188: LD_ADDR_VAR 0 6
72192: PUSH
72193: DOUBLE
72194: LD_INT 0
72196: DEC
72197: ST_TO_ADDR
72198: LD_INT 5
72200: PUSH
72201: FOR_TO
72202: IFFALSE 72345
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72204: LD_ADDR_VAR 0 7
72208: PUSH
72209: LD_VAR 0 1
72213: PPUSH
72214: LD_VAR 0 6
72218: PPUSH
72219: LD_VAR 0 11
72223: PPUSH
72224: CALL_OW 272
72228: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72229: LD_ADDR_VAR 0 8
72233: PUSH
72234: LD_VAR 0 2
72238: PPUSH
72239: LD_VAR 0 6
72243: PPUSH
72244: LD_VAR 0 11
72248: PPUSH
72249: CALL_OW 273
72253: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72254: LD_VAR 0 7
72258: PPUSH
72259: LD_VAR 0 8
72263: PPUSH
72264: CALL_OW 488
72268: NOT
72269: IFFALSE 72273
// continue ;
72271: GO 72201
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72273: LD_ADDR_VAR 0 9
72277: PUSH
72278: LD_VAR 0 12
72282: PUSH
72283: LD_INT 1
72285: ARRAY
72286: PPUSH
72287: LD_VAR 0 12
72291: PUSH
72292: LD_INT 2
72294: ARRAY
72295: PPUSH
72296: LD_VAR 0 7
72300: PPUSH
72301: LD_VAR 0 8
72305: PPUSH
72306: CALL_OW 298
72310: ST_TO_ADDR
// if tmp < distance then
72311: LD_VAR 0 9
72315: PUSH
72316: LD_VAR 0 10
72320: LESS
72321: IFFALSE 72343
// begin result := i ;
72323: LD_ADDR_VAR 0 5
72327: PUSH
72328: LD_VAR 0 6
72332: ST_TO_ADDR
// distance := tmp ;
72333: LD_ADDR_VAR 0 10
72337: PUSH
72338: LD_VAR 0 9
72342: ST_TO_ADDR
// end ; end ;
72343: GO 72201
72345: POP
72346: POP
// end ;
72347: LD_VAR 0 5
72351: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72352: LD_INT 0
72354: PPUSH
72355: PPUSH
// if not driver or not IsInUnit ( driver ) then
72356: LD_VAR 0 1
72360: NOT
72361: PUSH
72362: LD_VAR 0 1
72366: PPUSH
72367: CALL_OW 310
72371: NOT
72372: OR
72373: IFFALSE 72377
// exit ;
72375: GO 72467
// vehicle := IsInUnit ( driver ) ;
72377: LD_ADDR_VAR 0 3
72381: PUSH
72382: LD_VAR 0 1
72386: PPUSH
72387: CALL_OW 310
72391: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72392: LD_VAR 0 1
72396: PPUSH
72397: LD_STRING \
72399: PUSH
72400: LD_INT 0
72402: PUSH
72403: LD_INT 0
72405: PUSH
72406: LD_INT 0
72408: PUSH
72409: LD_INT 0
72411: PUSH
72412: LD_INT 0
72414: PUSH
72415: LD_INT 0
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: PUSH
72427: LD_STRING E
72429: PUSH
72430: LD_INT 0
72432: PUSH
72433: LD_INT 0
72435: PUSH
72436: LD_VAR 0 3
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: LD_INT 0
72446: PUSH
72447: LD_INT 0
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PPUSH
72463: CALL_OW 446
// end ;
72467: LD_VAR 0 2
72471: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72472: LD_INT 0
72474: PPUSH
72475: PPUSH
// if not driver or not IsInUnit ( driver ) then
72476: LD_VAR 0 1
72480: NOT
72481: PUSH
72482: LD_VAR 0 1
72486: PPUSH
72487: CALL_OW 310
72491: NOT
72492: OR
72493: IFFALSE 72497
// exit ;
72495: GO 72587
// vehicle := IsInUnit ( driver ) ;
72497: LD_ADDR_VAR 0 3
72501: PUSH
72502: LD_VAR 0 1
72506: PPUSH
72507: CALL_OW 310
72511: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72512: LD_VAR 0 1
72516: PPUSH
72517: LD_STRING \
72519: PUSH
72520: LD_INT 0
72522: PUSH
72523: LD_INT 0
72525: PUSH
72526: LD_INT 0
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: LD_INT 0
72534: PUSH
72535: LD_INT 0
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: PUSH
72547: LD_STRING E
72549: PUSH
72550: LD_INT 0
72552: PUSH
72553: LD_INT 0
72555: PUSH
72556: LD_VAR 0 3
72560: PUSH
72561: LD_INT 0
72563: PUSH
72564: LD_INT 0
72566: PUSH
72567: LD_INT 0
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PPUSH
72583: CALL_OW 447
// end ;
72587: LD_VAR 0 2
72591: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72592: LD_INT 0
72594: PPUSH
72595: PPUSH
72596: PPUSH
// tmp := [ ] ;
72597: LD_ADDR_VAR 0 5
72601: PUSH
72602: EMPTY
72603: ST_TO_ADDR
// for i in units do
72604: LD_ADDR_VAR 0 4
72608: PUSH
72609: LD_VAR 0 1
72613: PUSH
72614: FOR_IN
72615: IFFALSE 72653
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72617: LD_ADDR_VAR 0 5
72621: PUSH
72622: LD_VAR 0 5
72626: PPUSH
72627: LD_VAR 0 5
72631: PUSH
72632: LD_INT 1
72634: PLUS
72635: PPUSH
72636: LD_VAR 0 4
72640: PPUSH
72641: CALL_OW 256
72645: PPUSH
72646: CALL_OW 2
72650: ST_TO_ADDR
72651: GO 72614
72653: POP
72654: POP
// if not tmp then
72655: LD_VAR 0 5
72659: NOT
72660: IFFALSE 72664
// exit ;
72662: GO 72712
// if asc then
72664: LD_VAR 0 2
72668: IFFALSE 72692
// result := SortListByListAsc ( units , tmp ) else
72670: LD_ADDR_VAR 0 3
72674: PUSH
72675: LD_VAR 0 1
72679: PPUSH
72680: LD_VAR 0 5
72684: PPUSH
72685: CALL_OW 76
72689: ST_TO_ADDR
72690: GO 72712
// result := SortListByListDesc ( units , tmp ) ;
72692: LD_ADDR_VAR 0 3
72696: PUSH
72697: LD_VAR 0 1
72701: PPUSH
72702: LD_VAR 0 5
72706: PPUSH
72707: CALL_OW 77
72711: ST_TO_ADDR
// end ;
72712: LD_VAR 0 3
72716: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72717: LD_INT 0
72719: PPUSH
72720: PPUSH
// task := GetTaskList ( mech ) ;
72721: LD_ADDR_VAR 0 4
72725: PUSH
72726: LD_VAR 0 1
72730: PPUSH
72731: CALL_OW 437
72735: ST_TO_ADDR
// if not task then
72736: LD_VAR 0 4
72740: NOT
72741: IFFALSE 72745
// exit ;
72743: GO 72787
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72745: LD_ADDR_VAR 0 3
72749: PUSH
72750: LD_VAR 0 4
72754: PUSH
72755: LD_INT 1
72757: ARRAY
72758: PUSH
72759: LD_INT 1
72761: ARRAY
72762: PUSH
72763: LD_STRING r
72765: EQUAL
72766: PUSH
72767: LD_VAR 0 4
72771: PUSH
72772: LD_INT 1
72774: ARRAY
72775: PUSH
72776: LD_INT 4
72778: ARRAY
72779: PUSH
72780: LD_VAR 0 2
72784: EQUAL
72785: AND
72786: ST_TO_ADDR
// end ;
72787: LD_VAR 0 3
72791: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72792: LD_INT 0
72794: PPUSH
// SetDir ( unit , d ) ;
72795: LD_VAR 0 1
72799: PPUSH
72800: LD_VAR 0 4
72804: PPUSH
72805: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72809: LD_VAR 0 1
72813: PPUSH
72814: LD_VAR 0 2
72818: PPUSH
72819: LD_VAR 0 3
72823: PPUSH
72824: LD_VAR 0 5
72828: PPUSH
72829: CALL_OW 48
// end ;
72833: LD_VAR 0 6
72837: RET
// export function ToNaturalNumber ( number ) ; begin
72838: LD_INT 0
72840: PPUSH
// result := number div 1 ;
72841: LD_ADDR_VAR 0 2
72845: PUSH
72846: LD_VAR 0 1
72850: PUSH
72851: LD_INT 1
72853: DIV
72854: ST_TO_ADDR
// if number < 0 then
72855: LD_VAR 0 1
72859: PUSH
72860: LD_INT 0
72862: LESS
72863: IFFALSE 72873
// result := 0 ;
72865: LD_ADDR_VAR 0 2
72869: PUSH
72870: LD_INT 0
72872: ST_TO_ADDR
// end ;
72873: LD_VAR 0 2
72877: RET
// export function SortByClass ( units , class ) ; var un ; begin
72878: LD_INT 0
72880: PPUSH
72881: PPUSH
// if not units or not class then
72882: LD_VAR 0 1
72886: NOT
72887: PUSH
72888: LD_VAR 0 2
72892: NOT
72893: OR
72894: IFFALSE 72898
// exit ;
72896: GO 72993
// result := [ ] ;
72898: LD_ADDR_VAR 0 3
72902: PUSH
72903: EMPTY
72904: ST_TO_ADDR
// for un in units do
72905: LD_ADDR_VAR 0 4
72909: PUSH
72910: LD_VAR 0 1
72914: PUSH
72915: FOR_IN
72916: IFFALSE 72991
// if GetClass ( un ) = class then
72918: LD_VAR 0 4
72922: PPUSH
72923: CALL_OW 257
72927: PUSH
72928: LD_VAR 0 2
72932: EQUAL
72933: IFFALSE 72960
// result := Insert ( result , 1 , un ) else
72935: LD_ADDR_VAR 0 3
72939: PUSH
72940: LD_VAR 0 3
72944: PPUSH
72945: LD_INT 1
72947: PPUSH
72948: LD_VAR 0 4
72952: PPUSH
72953: CALL_OW 2
72957: ST_TO_ADDR
72958: GO 72989
// result := Replace ( result , result + 1 , un ) ;
72960: LD_ADDR_VAR 0 3
72964: PUSH
72965: LD_VAR 0 3
72969: PPUSH
72970: LD_VAR 0 3
72974: PUSH
72975: LD_INT 1
72977: PLUS
72978: PPUSH
72979: LD_VAR 0 4
72983: PPUSH
72984: CALL_OW 1
72988: ST_TO_ADDR
72989: GO 72915
72991: POP
72992: POP
// end ;
72993: LD_VAR 0 3
72997: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72998: LD_INT 0
73000: PPUSH
73001: PPUSH
73002: PPUSH
73003: PPUSH
73004: PPUSH
73005: PPUSH
73006: PPUSH
// result := [ ] ;
73007: LD_ADDR_VAR 0 4
73011: PUSH
73012: EMPTY
73013: ST_TO_ADDR
// if x - r < 0 then
73014: LD_VAR 0 1
73018: PUSH
73019: LD_VAR 0 3
73023: MINUS
73024: PUSH
73025: LD_INT 0
73027: LESS
73028: IFFALSE 73040
// min_x := 0 else
73030: LD_ADDR_VAR 0 8
73034: PUSH
73035: LD_INT 0
73037: ST_TO_ADDR
73038: GO 73056
// min_x := x - r ;
73040: LD_ADDR_VAR 0 8
73044: PUSH
73045: LD_VAR 0 1
73049: PUSH
73050: LD_VAR 0 3
73054: MINUS
73055: ST_TO_ADDR
// if y - r < 0 then
73056: LD_VAR 0 2
73060: PUSH
73061: LD_VAR 0 3
73065: MINUS
73066: PUSH
73067: LD_INT 0
73069: LESS
73070: IFFALSE 73082
// min_y := 0 else
73072: LD_ADDR_VAR 0 7
73076: PUSH
73077: LD_INT 0
73079: ST_TO_ADDR
73080: GO 73098
// min_y := y - r ;
73082: LD_ADDR_VAR 0 7
73086: PUSH
73087: LD_VAR 0 2
73091: PUSH
73092: LD_VAR 0 3
73096: MINUS
73097: ST_TO_ADDR
// max_x := x + r ;
73098: LD_ADDR_VAR 0 9
73102: PUSH
73103: LD_VAR 0 1
73107: PUSH
73108: LD_VAR 0 3
73112: PLUS
73113: ST_TO_ADDR
// max_y := y + r ;
73114: LD_ADDR_VAR 0 10
73118: PUSH
73119: LD_VAR 0 2
73123: PUSH
73124: LD_VAR 0 3
73128: PLUS
73129: ST_TO_ADDR
// for _x = min_x to max_x do
73130: LD_ADDR_VAR 0 5
73134: PUSH
73135: DOUBLE
73136: LD_VAR 0 8
73140: DEC
73141: ST_TO_ADDR
73142: LD_VAR 0 9
73146: PUSH
73147: FOR_TO
73148: IFFALSE 73249
// for _y = min_y to max_y do
73150: LD_ADDR_VAR 0 6
73154: PUSH
73155: DOUBLE
73156: LD_VAR 0 7
73160: DEC
73161: ST_TO_ADDR
73162: LD_VAR 0 10
73166: PUSH
73167: FOR_TO
73168: IFFALSE 73245
// begin if not ValidHex ( _x , _y ) then
73170: LD_VAR 0 5
73174: PPUSH
73175: LD_VAR 0 6
73179: PPUSH
73180: CALL_OW 488
73184: NOT
73185: IFFALSE 73189
// continue ;
73187: GO 73167
// if GetResourceTypeXY ( _x , _y ) then
73189: LD_VAR 0 5
73193: PPUSH
73194: LD_VAR 0 6
73198: PPUSH
73199: CALL_OW 283
73203: IFFALSE 73243
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73205: LD_ADDR_VAR 0 4
73209: PUSH
73210: LD_VAR 0 4
73214: PPUSH
73215: LD_VAR 0 4
73219: PUSH
73220: LD_INT 1
73222: PLUS
73223: PPUSH
73224: LD_VAR 0 5
73228: PUSH
73229: LD_VAR 0 6
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PPUSH
73238: CALL_OW 1
73242: ST_TO_ADDR
// end ;
73243: GO 73167
73245: POP
73246: POP
73247: GO 73147
73249: POP
73250: POP
// end ;
73251: LD_VAR 0 4
73255: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73256: LD_INT 0
73258: PPUSH
73259: PPUSH
73260: PPUSH
73261: PPUSH
73262: PPUSH
73263: PPUSH
73264: PPUSH
73265: PPUSH
// if not units then
73266: LD_VAR 0 1
73270: NOT
73271: IFFALSE 73275
// exit ;
73273: GO 73799
// result := UnitFilter ( units , [ f_ok ] ) ;
73275: LD_ADDR_VAR 0 3
73279: PUSH
73280: LD_VAR 0 1
73284: PPUSH
73285: LD_INT 50
73287: PUSH
73288: EMPTY
73289: LIST
73290: PPUSH
73291: CALL_OW 72
73295: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73296: LD_ADDR_VAR 0 8
73300: PUSH
73301: LD_VAR 0 1
73305: PUSH
73306: LD_INT 1
73308: ARRAY
73309: PPUSH
73310: CALL_OW 255
73314: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73315: LD_ADDR_VAR 0 10
73319: PUSH
73320: LD_INT 29
73322: PUSH
73323: LD_INT 91
73325: PUSH
73326: LD_INT 49
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: LIST
73333: ST_TO_ADDR
// if not result then
73334: LD_VAR 0 3
73338: NOT
73339: IFFALSE 73343
// exit ;
73341: GO 73799
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73343: LD_ADDR_VAR 0 5
73347: PUSH
73348: LD_INT 81
73350: PUSH
73351: LD_VAR 0 8
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PPUSH
73360: CALL_OW 69
73364: ST_TO_ADDR
// for i in result do
73365: LD_ADDR_VAR 0 4
73369: PUSH
73370: LD_VAR 0 3
73374: PUSH
73375: FOR_IN
73376: IFFALSE 73797
// begin tag := GetTag ( i ) + 1 ;
73378: LD_ADDR_VAR 0 9
73382: PUSH
73383: LD_VAR 0 4
73387: PPUSH
73388: CALL_OW 110
73392: PUSH
73393: LD_INT 1
73395: PLUS
73396: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73397: LD_ADDR_VAR 0 7
73401: PUSH
73402: LD_VAR 0 4
73406: PPUSH
73407: CALL_OW 250
73411: PPUSH
73412: LD_VAR 0 4
73416: PPUSH
73417: CALL_OW 251
73421: PPUSH
73422: LD_INT 6
73424: PPUSH
73425: CALL 72998 0 3
73429: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73430: LD_VAR 0 4
73434: PPUSH
73435: CALL_OW 247
73439: PUSH
73440: LD_INT 2
73442: EQUAL
73443: PUSH
73444: LD_VAR 0 7
73448: AND
73449: PUSH
73450: LD_VAR 0 4
73454: PPUSH
73455: CALL_OW 264
73459: PUSH
73460: LD_VAR 0 10
73464: IN
73465: NOT
73466: AND
73467: IFFALSE 73506
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73469: LD_VAR 0 4
73473: PPUSH
73474: LD_VAR 0 7
73478: PUSH
73479: LD_INT 1
73481: ARRAY
73482: PUSH
73483: LD_INT 1
73485: ARRAY
73486: PPUSH
73487: LD_VAR 0 7
73491: PUSH
73492: LD_INT 1
73494: ARRAY
73495: PUSH
73496: LD_INT 2
73498: ARRAY
73499: PPUSH
73500: CALL_OW 116
73504: GO 73795
// if path > tag then
73506: LD_VAR 0 2
73510: PUSH
73511: LD_VAR 0 9
73515: GREATER
73516: IFFALSE 73724
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73518: LD_ADDR_VAR 0 6
73522: PUSH
73523: LD_VAR 0 5
73527: PPUSH
73528: LD_INT 91
73530: PUSH
73531: LD_VAR 0 4
73535: PUSH
73536: LD_INT 8
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: LIST
73543: PPUSH
73544: CALL_OW 72
73548: ST_TO_ADDR
// if nearEnemy then
73549: LD_VAR 0 6
73553: IFFALSE 73622
// begin if GetWeapon ( i ) = ru_time_lapser then
73555: LD_VAR 0 4
73559: PPUSH
73560: CALL_OW 264
73564: PUSH
73565: LD_INT 49
73567: EQUAL
73568: IFFALSE 73596
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73570: LD_VAR 0 4
73574: PPUSH
73575: LD_VAR 0 6
73579: PPUSH
73580: LD_VAR 0 4
73584: PPUSH
73585: CALL_OW 74
73589: PPUSH
73590: CALL_OW 112
73594: GO 73620
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73596: LD_VAR 0 4
73600: PPUSH
73601: LD_VAR 0 6
73605: PPUSH
73606: LD_VAR 0 4
73610: PPUSH
73611: CALL_OW 74
73615: PPUSH
73616: CALL 74724 0 2
// end else
73620: GO 73722
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73622: LD_VAR 0 4
73626: PPUSH
73627: LD_VAR 0 2
73631: PUSH
73632: LD_VAR 0 9
73636: ARRAY
73637: PUSH
73638: LD_INT 1
73640: ARRAY
73641: PPUSH
73642: LD_VAR 0 2
73646: PUSH
73647: LD_VAR 0 9
73651: ARRAY
73652: PUSH
73653: LD_INT 2
73655: ARRAY
73656: PPUSH
73657: CALL_OW 297
73661: PUSH
73662: LD_INT 6
73664: GREATER
73665: IFFALSE 73708
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73667: LD_VAR 0 4
73671: PPUSH
73672: LD_VAR 0 2
73676: PUSH
73677: LD_VAR 0 9
73681: ARRAY
73682: PUSH
73683: LD_INT 1
73685: ARRAY
73686: PPUSH
73687: LD_VAR 0 2
73691: PUSH
73692: LD_VAR 0 9
73696: ARRAY
73697: PUSH
73698: LD_INT 2
73700: ARRAY
73701: PPUSH
73702: CALL_OW 114
73706: GO 73722
// SetTag ( i , tag ) ;
73708: LD_VAR 0 4
73712: PPUSH
73713: LD_VAR 0 9
73717: PPUSH
73718: CALL_OW 109
// end else
73722: GO 73795
// if enemy then
73724: LD_VAR 0 5
73728: IFFALSE 73795
// begin if GetWeapon ( i ) = ru_time_lapser then
73730: LD_VAR 0 4
73734: PPUSH
73735: CALL_OW 264
73739: PUSH
73740: LD_INT 49
73742: EQUAL
73743: IFFALSE 73771
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73745: LD_VAR 0 4
73749: PPUSH
73750: LD_VAR 0 5
73754: PPUSH
73755: LD_VAR 0 4
73759: PPUSH
73760: CALL_OW 74
73764: PPUSH
73765: CALL_OW 112
73769: GO 73795
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73771: LD_VAR 0 4
73775: PPUSH
73776: LD_VAR 0 5
73780: PPUSH
73781: LD_VAR 0 4
73785: PPUSH
73786: CALL_OW 74
73790: PPUSH
73791: CALL 74724 0 2
// end ; end ;
73795: GO 73375
73797: POP
73798: POP
// end ;
73799: LD_VAR 0 3
73803: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73804: LD_INT 0
73806: PPUSH
73807: PPUSH
73808: PPUSH
// if not unit or IsInUnit ( unit ) then
73809: LD_VAR 0 1
73813: NOT
73814: PUSH
73815: LD_VAR 0 1
73819: PPUSH
73820: CALL_OW 310
73824: OR
73825: IFFALSE 73829
// exit ;
73827: GO 73920
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73829: LD_ADDR_VAR 0 4
73833: PUSH
73834: LD_VAR 0 1
73838: PPUSH
73839: CALL_OW 250
73843: PPUSH
73844: LD_VAR 0 2
73848: PPUSH
73849: LD_INT 1
73851: PPUSH
73852: CALL_OW 272
73856: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73857: LD_ADDR_VAR 0 5
73861: PUSH
73862: LD_VAR 0 1
73866: PPUSH
73867: CALL_OW 251
73871: PPUSH
73872: LD_VAR 0 2
73876: PPUSH
73877: LD_INT 1
73879: PPUSH
73880: CALL_OW 273
73884: ST_TO_ADDR
// if ValidHex ( x , y ) then
73885: LD_VAR 0 4
73889: PPUSH
73890: LD_VAR 0 5
73894: PPUSH
73895: CALL_OW 488
73899: IFFALSE 73920
// ComTurnXY ( unit , x , y ) ;
73901: LD_VAR 0 1
73905: PPUSH
73906: LD_VAR 0 4
73910: PPUSH
73911: LD_VAR 0 5
73915: PPUSH
73916: CALL_OW 118
// end ;
73920: LD_VAR 0 3
73924: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73925: LD_INT 0
73927: PPUSH
73928: PPUSH
// result := false ;
73929: LD_ADDR_VAR 0 3
73933: PUSH
73934: LD_INT 0
73936: ST_TO_ADDR
// if not units then
73937: LD_VAR 0 2
73941: NOT
73942: IFFALSE 73946
// exit ;
73944: GO 73991
// for i in units do
73946: LD_ADDR_VAR 0 4
73950: PUSH
73951: LD_VAR 0 2
73955: PUSH
73956: FOR_IN
73957: IFFALSE 73989
// if See ( side , i ) then
73959: LD_VAR 0 1
73963: PPUSH
73964: LD_VAR 0 4
73968: PPUSH
73969: CALL_OW 292
73973: IFFALSE 73987
// begin result := true ;
73975: LD_ADDR_VAR 0 3
73979: PUSH
73980: LD_INT 1
73982: ST_TO_ADDR
// exit ;
73983: POP
73984: POP
73985: GO 73991
// end ;
73987: GO 73956
73989: POP
73990: POP
// end ;
73991: LD_VAR 0 3
73995: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73996: LD_INT 0
73998: PPUSH
73999: PPUSH
74000: PPUSH
74001: PPUSH
// if not unit or not points then
74002: LD_VAR 0 1
74006: NOT
74007: PUSH
74008: LD_VAR 0 2
74012: NOT
74013: OR
74014: IFFALSE 74018
// exit ;
74016: GO 74108
// dist := 99999 ;
74018: LD_ADDR_VAR 0 5
74022: PUSH
74023: LD_INT 99999
74025: ST_TO_ADDR
// for i in points do
74026: LD_ADDR_VAR 0 4
74030: PUSH
74031: LD_VAR 0 2
74035: PUSH
74036: FOR_IN
74037: IFFALSE 74106
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74039: LD_ADDR_VAR 0 6
74043: PUSH
74044: LD_VAR 0 1
74048: PPUSH
74049: LD_VAR 0 4
74053: PUSH
74054: LD_INT 1
74056: ARRAY
74057: PPUSH
74058: LD_VAR 0 4
74062: PUSH
74063: LD_INT 2
74065: ARRAY
74066: PPUSH
74067: CALL_OW 297
74071: ST_TO_ADDR
// if tmpDist < dist then
74072: LD_VAR 0 6
74076: PUSH
74077: LD_VAR 0 5
74081: LESS
74082: IFFALSE 74104
// begin result := i ;
74084: LD_ADDR_VAR 0 3
74088: PUSH
74089: LD_VAR 0 4
74093: ST_TO_ADDR
// dist := tmpDist ;
74094: LD_ADDR_VAR 0 5
74098: PUSH
74099: LD_VAR 0 6
74103: ST_TO_ADDR
// end ; end ;
74104: GO 74036
74106: POP
74107: POP
// end ;
74108: LD_VAR 0 3
74112: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74113: LD_INT 0
74115: PPUSH
// uc_side := side ;
74116: LD_ADDR_OWVAR 20
74120: PUSH
74121: LD_VAR 0 1
74125: ST_TO_ADDR
// uc_nation := 3 ;
74126: LD_ADDR_OWVAR 21
74130: PUSH
74131: LD_INT 3
74133: ST_TO_ADDR
// vc_chassis := 25 ;
74134: LD_ADDR_OWVAR 37
74138: PUSH
74139: LD_INT 25
74141: ST_TO_ADDR
// vc_engine := engine_siberite ;
74142: LD_ADDR_OWVAR 39
74146: PUSH
74147: LD_INT 3
74149: ST_TO_ADDR
// vc_control := control_computer ;
74150: LD_ADDR_OWVAR 38
74154: PUSH
74155: LD_INT 3
74157: ST_TO_ADDR
// vc_weapon := 59 ;
74158: LD_ADDR_OWVAR 40
74162: PUSH
74163: LD_INT 59
74165: ST_TO_ADDR
// result := CreateVehicle ;
74166: LD_ADDR_VAR 0 5
74170: PUSH
74171: CALL_OW 45
74175: ST_TO_ADDR
// SetDir ( result , d ) ;
74176: LD_VAR 0 5
74180: PPUSH
74181: LD_VAR 0 4
74185: PPUSH
74186: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74190: LD_VAR 0 5
74194: PPUSH
74195: LD_VAR 0 2
74199: PPUSH
74200: LD_VAR 0 3
74204: PPUSH
74205: LD_INT 0
74207: PPUSH
74208: CALL_OW 48
// end ;
74212: LD_VAR 0 5
74216: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74217: LD_INT 0
74219: PPUSH
74220: PPUSH
74221: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74222: LD_ADDR_VAR 0 2
74226: PUSH
74227: LD_INT 0
74229: PUSH
74230: LD_INT 0
74232: PUSH
74233: LD_INT 0
74235: PUSH
74236: LD_INT 0
74238: PUSH
74239: EMPTY
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74245: LD_VAR 0 1
74249: NOT
74250: PUSH
74251: LD_VAR 0 1
74255: PPUSH
74256: CALL_OW 264
74260: PUSH
74261: LD_INT 12
74263: PUSH
74264: LD_INT 51
74266: PUSH
74267: LD_INT 32
74269: PUSH
74270: LD_INT 89
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: IN
74279: NOT
74280: OR
74281: IFFALSE 74285
// exit ;
74283: GO 74383
// for i := 1 to 3 do
74285: LD_ADDR_VAR 0 3
74289: PUSH
74290: DOUBLE
74291: LD_INT 1
74293: DEC
74294: ST_TO_ADDR
74295: LD_INT 3
74297: PUSH
74298: FOR_TO
74299: IFFALSE 74381
// begin tmp := GetCargo ( cargo , i ) ;
74301: LD_ADDR_VAR 0 4
74305: PUSH
74306: LD_VAR 0 1
74310: PPUSH
74311: LD_VAR 0 3
74315: PPUSH
74316: CALL_OW 289
74320: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74321: LD_ADDR_VAR 0 2
74325: PUSH
74326: LD_VAR 0 2
74330: PPUSH
74331: LD_VAR 0 3
74335: PPUSH
74336: LD_VAR 0 4
74340: PPUSH
74341: CALL_OW 1
74345: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74346: LD_ADDR_VAR 0 2
74350: PUSH
74351: LD_VAR 0 2
74355: PPUSH
74356: LD_INT 4
74358: PPUSH
74359: LD_VAR 0 2
74363: PUSH
74364: LD_INT 4
74366: ARRAY
74367: PUSH
74368: LD_VAR 0 4
74372: PLUS
74373: PPUSH
74374: CALL_OW 1
74378: ST_TO_ADDR
// end ;
74379: GO 74298
74381: POP
74382: POP
// end ;
74383: LD_VAR 0 2
74387: RET
// export function Length ( array ) ; begin
74388: LD_INT 0
74390: PPUSH
// result := array + 0 ;
74391: LD_ADDR_VAR 0 2
74395: PUSH
74396: LD_VAR 0 1
74400: PUSH
74401: LD_INT 0
74403: PLUS
74404: ST_TO_ADDR
// end ;
74405: LD_VAR 0 2
74409: RET
// export function PrepareArray ( array ) ; begin
74410: LD_INT 0
74412: PPUSH
// result := array diff 0 ;
74413: LD_ADDR_VAR 0 2
74417: PUSH
74418: LD_VAR 0 1
74422: PUSH
74423: LD_INT 0
74425: DIFF
74426: ST_TO_ADDR
// if not result [ 1 ] then
74427: LD_VAR 0 2
74431: PUSH
74432: LD_INT 1
74434: ARRAY
74435: NOT
74436: IFFALSE 74456
// result := Delete ( result , 1 ) ;
74438: LD_ADDR_VAR 0 2
74442: PUSH
74443: LD_VAR 0 2
74447: PPUSH
74448: LD_INT 1
74450: PPUSH
74451: CALL_OW 3
74455: ST_TO_ADDR
// end ;
74456: LD_VAR 0 2
74460: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74461: LD_INT 0
74463: PPUSH
74464: PPUSH
74465: PPUSH
74466: PPUSH
// sibRocketRange := 25 ;
74467: LD_ADDR_VAR 0 6
74471: PUSH
74472: LD_INT 25
74474: ST_TO_ADDR
// result := false ;
74475: LD_ADDR_VAR 0 4
74479: PUSH
74480: LD_INT 0
74482: ST_TO_ADDR
// for i := 0 to 5 do
74483: LD_ADDR_VAR 0 5
74487: PUSH
74488: DOUBLE
74489: LD_INT 0
74491: DEC
74492: ST_TO_ADDR
74493: LD_INT 5
74495: PUSH
74496: FOR_TO
74497: IFFALSE 74564
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74499: LD_VAR 0 1
74503: PPUSH
74504: LD_VAR 0 5
74508: PPUSH
74509: LD_VAR 0 6
74513: PPUSH
74514: CALL_OW 272
74518: PPUSH
74519: LD_VAR 0 2
74523: PPUSH
74524: LD_VAR 0 5
74528: PPUSH
74529: LD_VAR 0 6
74533: PPUSH
74534: CALL_OW 273
74538: PPUSH
74539: LD_VAR 0 3
74543: PPUSH
74544: CALL_OW 309
74548: IFFALSE 74562
// begin result := true ;
74550: LD_ADDR_VAR 0 4
74554: PUSH
74555: LD_INT 1
74557: ST_TO_ADDR
// exit ;
74558: POP
74559: POP
74560: GO 74566
// end ;
74562: GO 74496
74564: POP
74565: POP
// end ;
74566: LD_VAR 0 4
74570: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74571: LD_INT 0
74573: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74574: LD_VAR 0 1
74578: PPUSH
74579: LD_VAR 0 2
74583: PPUSH
74584: LD_INT 0
74586: PPUSH
74587: LD_INT 0
74589: PPUSH
74590: LD_INT 1
74592: PPUSH
74593: LD_INT 0
74595: PPUSH
74596: CALL_OW 587
// end ;
74600: LD_VAR 0 3
74604: RET
// export function CenterOnNow ( unit ) ; begin
74605: LD_INT 0
74607: PPUSH
// result := IsInUnit ( unit ) ;
74608: LD_ADDR_VAR 0 2
74612: PUSH
74613: LD_VAR 0 1
74617: PPUSH
74618: CALL_OW 310
74622: ST_TO_ADDR
// if not result then
74623: LD_VAR 0 2
74627: NOT
74628: IFFALSE 74640
// result := unit ;
74630: LD_ADDR_VAR 0 2
74634: PUSH
74635: LD_VAR 0 1
74639: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74640: LD_VAR 0 1
74644: PPUSH
74645: CALL_OW 87
// end ;
74649: LD_VAR 0 2
74653: RET
// export function ComMoveHex ( unit , hex ) ; begin
74654: LD_INT 0
74656: PPUSH
// if not hex then
74657: LD_VAR 0 2
74661: NOT
74662: IFFALSE 74666
// exit ;
74664: GO 74719
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74666: LD_VAR 0 2
74670: PUSH
74671: LD_INT 1
74673: ARRAY
74674: PPUSH
74675: LD_VAR 0 2
74679: PUSH
74680: LD_INT 2
74682: ARRAY
74683: PPUSH
74684: CALL_OW 428
74688: IFFALSE 74692
// exit ;
74690: GO 74719
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74692: LD_VAR 0 1
74696: PPUSH
74697: LD_VAR 0 2
74701: PUSH
74702: LD_INT 1
74704: ARRAY
74705: PPUSH
74706: LD_VAR 0 2
74710: PUSH
74711: LD_INT 2
74713: ARRAY
74714: PPUSH
74715: CALL_OW 111
// end ;
74719: LD_VAR 0 3
74723: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74724: LD_INT 0
74726: PPUSH
74727: PPUSH
74728: PPUSH
// if not unit or not enemy then
74729: LD_VAR 0 1
74733: NOT
74734: PUSH
74735: LD_VAR 0 2
74739: NOT
74740: OR
74741: IFFALSE 74745
// exit ;
74743: GO 74869
// x := GetX ( enemy ) ;
74745: LD_ADDR_VAR 0 4
74749: PUSH
74750: LD_VAR 0 2
74754: PPUSH
74755: CALL_OW 250
74759: ST_TO_ADDR
// y := GetY ( enemy ) ;
74760: LD_ADDR_VAR 0 5
74764: PUSH
74765: LD_VAR 0 2
74769: PPUSH
74770: CALL_OW 251
74774: ST_TO_ADDR
// if ValidHex ( x , y ) then
74775: LD_VAR 0 4
74779: PPUSH
74780: LD_VAR 0 5
74784: PPUSH
74785: CALL_OW 488
74789: IFFALSE 74869
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
74791: LD_VAR 0 2
74795: PPUSH
74796: CALL_OW 247
74800: PUSH
74801: LD_INT 3
74803: PUSH
74804: LD_INT 2
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: IN
74811: PUSH
74812: LD_VAR 0 1
74816: PPUSH
74817: CALL_OW 255
74821: PPUSH
74822: LD_VAR 0 2
74826: PPUSH
74827: CALL_OW 292
74831: AND
74832: IFFALSE 74850
// ComAttackUnit ( unit , enemy ) else
74834: LD_VAR 0 1
74838: PPUSH
74839: LD_VAR 0 2
74843: PPUSH
74844: CALL_OW 115
74848: GO 74869
// ComAgressiveMove ( unit , x , y ) ;
74850: LD_VAR 0 1
74854: PPUSH
74855: LD_VAR 0 4
74859: PPUSH
74860: LD_VAR 0 5
74864: PPUSH
74865: CALL_OW 114
// end ;
74869: LD_VAR 0 3
74873: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74874: LD_INT 0
74876: PPUSH
74877: PPUSH
74878: PPUSH
// list := AreaToList ( area , 0 ) ;
74879: LD_ADDR_VAR 0 5
74883: PUSH
74884: LD_VAR 0 1
74888: PPUSH
74889: LD_INT 0
74891: PPUSH
74892: CALL_OW 517
74896: ST_TO_ADDR
// if not list then
74897: LD_VAR 0 5
74901: NOT
74902: IFFALSE 74906
// exit ;
74904: GO 75036
// if all then
74906: LD_VAR 0 2
74910: IFFALSE 74998
// begin for i := 1 to list [ 1 ] do
74912: LD_ADDR_VAR 0 4
74916: PUSH
74917: DOUBLE
74918: LD_INT 1
74920: DEC
74921: ST_TO_ADDR
74922: LD_VAR 0 5
74926: PUSH
74927: LD_INT 1
74929: ARRAY
74930: PUSH
74931: FOR_TO
74932: IFFALSE 74994
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74934: LD_ADDR_VAR 0 3
74938: PUSH
74939: LD_VAR 0 3
74943: PPUSH
74944: LD_VAR 0 3
74948: PUSH
74949: LD_INT 1
74951: PLUS
74952: PPUSH
74953: LD_VAR 0 5
74957: PUSH
74958: LD_INT 1
74960: ARRAY
74961: PUSH
74962: LD_VAR 0 4
74966: ARRAY
74967: PUSH
74968: LD_VAR 0 5
74972: PUSH
74973: LD_INT 2
74975: ARRAY
74976: PUSH
74977: LD_VAR 0 4
74981: ARRAY
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PPUSH
74987: CALL_OW 1
74991: ST_TO_ADDR
74992: GO 74931
74994: POP
74995: POP
// exit ;
74996: GO 75036
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74998: LD_ADDR_VAR 0 3
75002: PUSH
75003: LD_VAR 0 5
75007: PUSH
75008: LD_INT 1
75010: ARRAY
75011: PUSH
75012: LD_INT 1
75014: ARRAY
75015: PUSH
75016: LD_VAR 0 5
75020: PUSH
75021: LD_INT 2
75023: ARRAY
75024: PUSH
75025: LD_INT 1
75027: ARRAY
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: PUSH
75033: EMPTY
75034: LIST
75035: ST_TO_ADDR
// end ;
75036: LD_VAR 0 3
75040: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75041: LD_INT 0
75043: PPUSH
75044: PPUSH
// list := AreaToList ( area , 0 ) ;
75045: LD_ADDR_VAR 0 4
75049: PUSH
75050: LD_VAR 0 1
75054: PPUSH
75055: LD_INT 0
75057: PPUSH
75058: CALL_OW 517
75062: ST_TO_ADDR
// if not list then
75063: LD_VAR 0 4
75067: NOT
75068: IFFALSE 75072
// exit ;
75070: GO 75113
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75072: LD_ADDR_VAR 0 3
75076: PUSH
75077: LD_VAR 0 4
75081: PUSH
75082: LD_INT 1
75084: ARRAY
75085: PUSH
75086: LD_INT 1
75088: ARRAY
75089: PUSH
75090: LD_VAR 0 4
75094: PUSH
75095: LD_INT 2
75097: ARRAY
75098: PUSH
75099: LD_INT 1
75101: ARRAY
75102: PUSH
75103: LD_VAR 0 2
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: LIST
75112: ST_TO_ADDR
// end ;
75113: LD_VAR 0 3
75117: RET
// export function First ( array ) ; begin
75118: LD_INT 0
75120: PPUSH
// if not array then
75121: LD_VAR 0 1
75125: NOT
75126: IFFALSE 75130
// exit ;
75128: GO 75144
// result := array [ 1 ] ;
75130: LD_ADDR_VAR 0 2
75134: PUSH
75135: LD_VAR 0 1
75139: PUSH
75140: LD_INT 1
75142: ARRAY
75143: ST_TO_ADDR
// end ;
75144: LD_VAR 0 2
75148: RET
// export function Last ( array ) ; begin
75149: LD_INT 0
75151: PPUSH
// if not array then
75152: LD_VAR 0 1
75156: NOT
75157: IFFALSE 75161
// exit ;
75159: GO 75177
// result := array [ array ] ;
75161: LD_ADDR_VAR 0 2
75165: PUSH
75166: LD_VAR 0 1
75170: PUSH
75171: LD_VAR 0 1
75175: ARRAY
75176: ST_TO_ADDR
// end ; end_of_file
75177: LD_VAR 0 2
75181: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75182: LD_VAR 0 1
75186: PUSH
75187: LD_INT 200
75189: DOUBLE
75190: GREATEREQUAL
75191: IFFALSE 75199
75193: LD_INT 299
75195: DOUBLE
75196: LESSEQUAL
75197: IFTRUE 75201
75199: GO 75233
75201: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75202: LD_VAR 0 1
75206: PPUSH
75207: LD_VAR 0 2
75211: PPUSH
75212: LD_VAR 0 3
75216: PPUSH
75217: LD_VAR 0 4
75221: PPUSH
75222: LD_VAR 0 5
75226: PPUSH
75227: CALL 28432 0 5
75231: GO 75310
75233: LD_INT 300
75235: DOUBLE
75236: GREATEREQUAL
75237: IFFALSE 75245
75239: LD_INT 399
75241: DOUBLE
75242: LESSEQUAL
75243: IFTRUE 75247
75245: GO 75309
75247: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75248: LD_VAR 0 1
75252: PPUSH
75253: LD_VAR 0 2
75257: PPUSH
75258: LD_VAR 0 3
75262: PPUSH
75263: LD_VAR 0 4
75267: PPUSH
75268: LD_VAR 0 5
75272: PPUSH
75273: LD_VAR 0 6
75277: PPUSH
75278: LD_VAR 0 7
75282: PPUSH
75283: LD_VAR 0 8
75287: PPUSH
75288: LD_VAR 0 9
75292: PPUSH
75293: LD_VAR 0 10
75297: PPUSH
75298: LD_VAR 0 11
75302: PPUSH
75303: CALL 24757 0 11
75307: GO 75310
75309: POP
// end ;
75310: PPOPN 11
75312: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75313: LD_VAR 0 1
75317: PPUSH
75318: LD_VAR 0 2
75322: PPUSH
75323: LD_VAR 0 3
75327: PPUSH
75328: LD_VAR 0 4
75332: PPUSH
75333: LD_VAR 0 5
75337: PPUSH
75338: CALL 28168 0 5
// end ; end_of_file
75342: PPOPN 5
75344: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75345: LD_VAR 0 1
75349: PPUSH
75350: LD_VAR 0 2
75354: PPUSH
75355: LD_VAR 0 3
75359: PPUSH
75360: LD_VAR 0 4
75364: PPUSH
75365: LD_VAR 0 5
75369: PPUSH
75370: LD_VAR 0 6
75374: PPUSH
75375: CALL 12409 0 6
// end ;
75379: PPOPN 6
75381: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75382: LD_INT 0
75384: PPUSH
// begin if not units then
75385: LD_VAR 0 1
75389: NOT
75390: IFFALSE 75394
// exit ;
75392: GO 75394
// end ;
75394: PPOPN 7
75396: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75397: CALL 12313 0 0
// end ;
75401: PPOPN 1
75403: END
