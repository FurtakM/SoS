// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4559 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8677 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 38418 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 33021 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 33021 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 33021 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 33021 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 33021 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 33021 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 33021 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 33021 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4023
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4021
// begin PrepareHuman ( false , class_mechanic , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 3
3995: PPUSH
3996: LD_INT 4
3998: PPUSH
3999: CALL_OW 380
// team := team ^ CreateHuman ;
4003: LD_ADDR_VAR 0 3
4007: PUSH
4008: LD_VAR 0 3
4012: PUSH
4013: CALL_OW 44
4017: ADD
4018: ST_TO_ADDR
// end ;
4019: GO 3987
4021: POP
4022: POP
// end ; m := 0 ;
4023: LD_ADDR_VAR 0 6
4027: PUSH
4028: LD_INT 0
4030: ST_TO_ADDR
// for i in team do
4031: LD_ADDR_VAR 0 2
4035: PUSH
4036: LD_VAR 0 3
4040: PUSH
4041: FOR_IN
4042: IFFALSE 4249
// if GetClass ( i ) = 3 then
4044: LD_VAR 0 2
4048: PPUSH
4049: CALL_OW 257
4053: PUSH
4054: LD_INT 3
4056: EQUAL
4057: IFFALSE 4205
// begin m := m + 1 ;
4059: LD_ADDR_VAR 0 6
4063: PUSH
4064: LD_VAR 0 6
4068: PUSH
4069: LD_INT 1
4071: PLUS
4072: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4073: LD_ADDR_VAR 0 5
4077: PUSH
4078: LD_INT 1
4080: PPUSH
4081: LD_INT 1
4083: PPUSH
4084: LD_INT 2
4086: PUSH
4087: LD_INT 3
4089: PUSH
4090: LD_INT 2
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: LD_VAR 0 6
4106: PUSH
4107: LD_INT 4
4109: MOD
4110: PUSH
4111: LD_INT 1
4113: PLUS
4114: ARRAY
4115: PPUSH
4116: LD_INT 2
4118: PPUSH
4119: LD_INT 1
4121: PPUSH
4122: LD_INT 4
4124: PUSH
4125: LD_INT 5
4127: PUSH
4128: LD_INT 3
4130: PUSH
4131: LD_INT 11
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_VAR 0 6
4144: PUSH
4145: LD_INT 4
4147: MOD
4148: PUSH
4149: LD_INT 1
4151: PLUS
4152: ARRAY
4153: PPUSH
4154: LD_INT 60
4156: PPUSH
4157: CALL 520 0 7
4161: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4162: LD_VAR 0 5
4166: PPUSH
4167: LD_INT 2
4169: PPUSH
4170: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4174: LD_VAR 0 5
4178: PPUSH
4179: LD_INT 1
4181: PPUSH
4182: LD_INT 0
4184: PPUSH
4185: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4189: LD_VAR 0 2
4193: PPUSH
4194: LD_VAR 0 5
4198: PPUSH
4199: CALL_OW 52
// end else
4203: GO 4247
// begin if GetClass ( i ) = 2 then
4205: LD_VAR 0 2
4209: PPUSH
4210: CALL_OW 257
4214: PUSH
4215: LD_INT 2
4217: EQUAL
4218: IFFALSE 4232
// SetClass ( i , 1 ) ;
4220: LD_VAR 0 2
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4232: LD_VAR 0 2
4236: PPUSH
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: CALL_OW 49
// end ;
4247: GO 4041
4249: POP
4250: POP
// uc_side := 4 ;
4251: LD_ADDR_OWVAR 20
4255: PUSH
4256: LD_INT 4
4258: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4259: LD_ADDR_EXP 19
4263: PUSH
4264: LD_STRING Harisson
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: LD_STRING 
4272: PPUSH
4273: CALL 33021 0 3
4277: ST_TO_ADDR
// PrepareScout ;
4278: CALL 4287 0 0
// end ;
4282: LD_VAR 0 1
4286: RET
// function PrepareScout ; var ape ; begin
4287: LD_INT 0
4289: PPUSH
4290: PPUSH
// uc_side := 4 ;
4291: LD_ADDR_OWVAR 20
4295: PUSH
4296: LD_INT 4
4298: ST_TO_ADDR
// uc_nation := 1 ;
4299: LD_ADDR_OWVAR 21
4303: PUSH
4304: LD_INT 1
4306: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4307: LD_STRING FrankIn06
4309: PPUSH
4310: LD_INT 0
4312: PPUSH
4313: CALL_OW 30
4317: IFFALSE 4334
// Frank := CreateCharacter ( 06c_Frank ) else
4319: LD_ADDR_EXP 15
4323: PUSH
4324: LD_STRING 06c_Frank
4326: PPUSH
4327: CALL_OW 34
4331: ST_TO_ADDR
4332: GO 4374
// if LoadVariable ( FrankInDelta , 0 ) then
4334: LD_STRING FrankInDelta
4336: PPUSH
4337: LD_INT 0
4339: PPUSH
4340: CALL_OW 30
4344: IFFALSE 4361
// Frank := CreateCharacter ( 05_Frank ) else
4346: LD_ADDR_EXP 15
4350: PUSH
4351: LD_STRING 05_Frank
4353: PPUSH
4354: CALL_OW 34
4358: ST_TO_ADDR
4359: GO 4374
// Frank := CreateCharacter ( 04_Frank ) ;
4361: LD_ADDR_EXP 15
4365: PUSH
4366: LD_STRING 04_Frank
4368: PPUSH
4369: CALL_OW 34
4373: ST_TO_ADDR
// if Frank then
4374: LD_EXP 15
4378: IFFALSE 4511
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4380: LD_EXP 15
4384: PPUSH
4385: LD_INT 2
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4395: LD_EXP 15
4399: PPUSH
4400: LD_INT 1
4402: PPUSH
4403: CALL_OW 336
// uc_side := 0 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 0
4414: ST_TO_ADDR
// uc_nation := 0 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 0
4422: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4423: LD_INT 0
4425: PPUSH
4426: LD_INT 12
4428: PPUSH
4429: LD_INT 0
4431: PPUSH
4432: CALL_OW 380
// ape := CreateHuman ;
4436: LD_ADDR_VAR 0 2
4440: PUSH
4441: CALL_OW 44
4445: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4446: LD_VAR 0 2
4450: PPUSH
4451: LD_EXP 15
4455: PPUSH
4456: CALL_OW 250
4460: PPUSH
4461: LD_EXP 15
4465: PPUSH
4466: CALL_OW 251
4470: PPUSH
4471: LD_INT 5
4473: PPUSH
4474: LD_INT 0
4476: PPUSH
4477: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4481: LD_VAR 0 2
4485: PPUSH
4486: LD_EXP 15
4490: PPUSH
4491: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4495: LD_EXP 15
4499: PPUSH
4500: LD_VAR 0 2
4504: PPUSH
4505: CALL_OW 119
// exit ;
4509: GO 4554
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4511: LD_ADDR_EXP 18
4515: PUSH
4516: LD_STRING Yamoko
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: LD_STRING 
4524: PPUSH
4525: CALL 33021 0 3
4529: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4530: LD_EXP 18
4534: PPUSH
4535: LD_INT 2
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: CALL_OW 49
// ComHold ( Kikuchi ) ;
4545: LD_EXP 18
4549: PPUSH
4550: CALL_OW 140
// end ; end_of_file
4554: LD_VAR 0 1
4558: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4559: LD_INT 0
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
4575: PPUSH
4576: PPUSH
// ru_rebuild_list := [ ] ;
4577: LD_ADDR_EXP 20
4581: PUSH
4582: EMPTY
4583: ST_TO_ADDR
// uc_side := 3 ;
4584: LD_ADDR_OWVAR 20
4588: PUSH
4589: LD_INT 3
4591: ST_TO_ADDR
// uc_nation := 3 ;
4592: LD_ADDR_OWVAR 21
4596: PUSH
4597: LD_INT 3
4599: ST_TO_ADDR
// if Difficulty > 1 then
4600: LD_OWVAR 67
4604: PUSH
4605: LD_INT 1
4607: GREATER
4608: IFFALSE 4775
// begin bc_type := b_breastwork ;
4610: LD_ADDR_OWVAR 42
4614: PUSH
4615: LD_INT 31
4617: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4618: LD_INT 78
4620: PPUSH
4621: LD_INT 74
4623: PPUSH
4624: LD_INT 2
4626: PPUSH
4627: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4631: LD_INT 171
4633: PPUSH
4634: LD_INT 193
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: CALL_OW 47
// bc_type := b_turret ;
4644: LD_ADDR_OWVAR 42
4648: PUSH
4649: LD_INT 33
4651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4652: LD_INT 129
4654: PPUSH
4655: LD_INT 96
4657: PPUSH
4658: LD_INT 3
4660: PPUSH
4661: CALL_OW 47
// if Difficulty > 2 then
4665: LD_OWVAR 67
4669: PUSH
4670: LD_INT 2
4672: GREATER
4673: IFFALSE 4744
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4675: LD_INT 83
4677: PPUSH
4678: LD_INT 141
4680: PPUSH
4681: CALL_OW 428
4685: PPUSH
4686: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4690: LD_INT 78
4692: PPUSH
4693: LD_INT 133
4695: PPUSH
4696: CALL_OW 428
4700: PPUSH
4701: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4705: LD_INT 83
4707: PPUSH
4708: LD_INT 141
4710: PPUSH
4711: LD_INT 2
4713: PPUSH
4714: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4718: LD_INT 78
4720: PPUSH
4721: LD_INT 133
4723: PPUSH
4724: LD_INT 2
4726: PPUSH
4727: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4731: LD_INT 145
4733: PPUSH
4734: LD_INT 112
4736: PPUSH
4737: LD_INT 3
4739: PPUSH
4740: CALL_OW 47
// end ; if Difficulty > 3 then
4744: LD_OWVAR 67
4748: PUSH
4749: LD_INT 3
4751: GREATER
4752: IFFALSE 4775
// begin bc_type := b_bunker ;
4754: LD_ADDR_OWVAR 42
4758: PUSH
4759: LD_INT 32
4761: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4762: LD_INT 44
4764: PPUSH
4765: LD_INT 50
4767: PPUSH
4768: LD_INT 4
4770: PPUSH
4771: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4775: LD_ADDR_VAR 0 9
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 3
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 2
4792: PUSH
4793: LD_INT 30
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 30
4805: PUSH
4806: LD_INT 1
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: LIST
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PPUSH
4822: CALL_OW 69
4826: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4827: LD_ADDR_VAR 0 10
4831: PUSH
4832: LD_INT 22
4834: PUSH
4835: LD_INT 3
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 2
4844: PUSH
4845: LD_INT 30
4847: PUSH
4848: LD_INT 6
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 7
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 30
4867: PUSH
4868: LD_INT 8
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4890: LD_ADDR_VAR 0 11
4894: PUSH
4895: LD_INT 22
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 30
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PPUSH
4919: CALL_OW 69
4923: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4924: LD_ADDR_VAR 0 12
4928: PUSH
4929: LD_INT 22
4931: PUSH
4932: LD_INT 3
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 30
4941: PUSH
4942: LD_INT 31
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PPUSH
4953: CALL_OW 69
4957: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4958: LD_ADDR_VAR 0 13
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 3
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: LD_INT 30
4975: PUSH
4976: LD_INT 32
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PPUSH
4987: CALL_OW 69
4991: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4992: LD_ADDR_VAR 0 14
4996: PUSH
4997: LD_INT 22
4999: PUSH
5000: LD_INT 3
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 30
5009: PUSH
5010: LD_INT 33
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5026: LD_ADDR_VAR 0 15
5030: PUSH
5031: LD_INT 42
5033: PUSH
5034: LD_INT 5
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: LD_INT 43
5043: PUSH
5044: LD_INT 50
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: PUSH
5051: LD_INT 44
5053: PUSH
5054: LD_INT 30
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 46
5063: PUSH
5064: LD_INT 15
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5077: LD_ADDR_VAR 0 16
5081: PUSH
5082: LD_INT 0
5084: PUSH
5085: LD_INT 4
5087: PUSH
5088: LD_INT 6
5090: PUSH
5091: LD_INT 3
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5100: LD_ADDR_VAR 0 6
5104: PUSH
5105: LD_INT 4
5107: PUSH
5108: LD_INT 5
5110: PUSH
5111: LD_INT 6
5113: PUSH
5114: LD_INT 7
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: PUSH
5123: LD_OWVAR 67
5127: ARRAY
5128: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5129: LD_INT 16
5131: PPUSH
5132: LD_STRING am_tukh
5134: PPUSH
5135: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5139: LD_ADDR_VAR 0 2
5143: PUSH
5144: LD_INT 21
5146: PUSH
5147: LD_INT 3
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 69
5158: PUSH
5159: FOR_IN
5160: IFFALSE 5197
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5162: LD_VAR 0 2
5166: PPUSH
5167: LD_INT 4
5169: PUSH
5170: LD_INT 5
5172: PUSH
5173: LD_INT 6
5175: PUSH
5176: LD_INT 7
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PUSH
5185: LD_OWVAR 67
5189: ARRAY
5190: PPUSH
5191: CALL_OW 241
5195: GO 5159
5197: POP
5198: POP
// for i in dep_list do
5199: LD_ADDR_VAR 0 2
5203: PUSH
5204: LD_VAR 0 9
5208: PUSH
5209: FOR_IN
5210: IFFALSE 5254
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5212: LD_VAR 0 2
5216: PPUSH
5217: CALL_OW 274
5221: PPUSH
5222: LD_INT 1
5224: PPUSH
5225: LD_INT 1000
5227: PPUSH
5228: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 274
5241: PPUSH
5242: LD_INT 2
5244: PPUSH
5245: LD_INT 1000
5247: PPUSH
5248: CALL_OW 277
// end ;
5252: GO 5209
5254: POP
5255: POP
// InitHc ;
5256: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 70 , 80 ] [ Difficulty ] div 100 ;
5260: LD_ADDR_VAR 0 8
5264: PUSH
5265: LD_VAR 0 13
5269: PUSH
5270: LD_INT 45
5272: PUSH
5273: LD_INT 60
5275: PUSH
5276: LD_INT 70
5278: PUSH
5279: LD_INT 80
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: PUSH
5288: LD_OWVAR 67
5292: ARRAY
5293: MUL
5294: PUSH
5295: LD_INT 100
5297: DIV
5298: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5299: LD_ADDR_VAR 0 16
5303: PUSH
5304: LD_VAR 0 16
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: LD_VAR 0 8
5316: PPUSH
5317: CALL_OW 1
5321: ST_TO_ADDR
// tmp := [ ] ;
5322: LD_ADDR_VAR 0 8
5326: PUSH
5327: EMPTY
5328: ST_TO_ADDR
// for i in bunker_list do
5329: LD_ADDR_VAR 0 2
5333: PUSH
5334: LD_VAR 0 13
5338: PUSH
5339: FOR_IN
5340: IFFALSE 5436
// if i mod 10 + 1 < tmp then
5342: LD_VAR 0 2
5346: PUSH
5347: LD_INT 10
5349: MOD
5350: PUSH
5351: LD_INT 1
5353: PLUS
5354: PUSH
5355: LD_VAR 0 8
5359: LESS
5360: IFFALSE 5405
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5362: LD_ADDR_VAR 0 8
5366: PUSH
5367: LD_VAR 0 8
5371: PPUSH
5372: LD_VAR 0 2
5376: PUSH
5377: LD_INT 3
5379: PPUSH
5380: LD_INT 5
5382: PPUSH
5383: CALL_OW 12
5387: MOD
5388: PUSH
5389: LD_INT 1
5391: PLUS
5392: PPUSH
5393: LD_VAR 0 2
5397: PPUSH
5398: CALL_OW 2
5402: ST_TO_ADDR
5403: GO 5434
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5405: LD_ADDR_VAR 0 8
5409: PUSH
5410: LD_VAR 0 8
5414: PPUSH
5415: LD_VAR 0 8
5419: PUSH
5420: LD_INT 1
5422: PLUS
5423: PPUSH
5424: LD_VAR 0 2
5428: PPUSH
5429: CALL_OW 2
5433: ST_TO_ADDR
5434: GO 5339
5436: POP
5437: POP
// bunker_list := tmp ;
5438: LD_ADDR_VAR 0 13
5442: PUSH
5443: LD_VAR 0 8
5447: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5448: LD_ADDR_VAR 0 2
5452: PUSH
5453: LD_VAR 0 13
5457: PUSH
5458: LD_VAR 0 14
5462: ADD
5463: PUSH
5464: FOR_IN
5465: IFFALSE 5488
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5467: LD_VAR 0 2
5471: PPUSH
5472: LD_VAR 0 2
5476: PPUSH
5477: CALL 2225 0 1
5481: PPUSH
5482: CALL_OW 431
5486: GO 5464
5488: POP
5489: POP
// while ( personel_counter [ 1 ] ) do
5490: LD_VAR 0 16
5494: PUSH
5495: LD_INT 1
5497: ARRAY
5498: IFFALSE 5606
// begin i := rand ( 1 , bunker_list ) ;
5500: LD_ADDR_VAR 0 2
5504: PUSH
5505: LD_INT 1
5507: PPUSH
5508: LD_VAR 0 13
5512: PPUSH
5513: CALL_OW 12
5517: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5518: LD_INT 0
5520: PPUSH
5521: LD_INT 1
5523: PPUSH
5524: LD_VAR 0 6
5528: PPUSH
5529: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5533: CALL_OW 44
5537: PPUSH
5538: LD_VAR 0 13
5542: PUSH
5543: LD_VAR 0 2
5547: ARRAY
5548: PPUSH
5549: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5553: LD_ADDR_VAR 0 13
5557: PUSH
5558: LD_VAR 0 13
5562: PPUSH
5563: LD_VAR 0 2
5567: PPUSH
5568: CALL_OW 3
5572: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5573: LD_ADDR_VAR 0 16
5577: PUSH
5578: LD_VAR 0 16
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_VAR 0 16
5590: PUSH
5591: LD_INT 1
5593: ARRAY
5594: PUSH
5595: LD_INT 1
5597: MINUS
5598: PPUSH
5599: CALL_OW 1
5603: ST_TO_ADDR
// end ;
5604: GO 5490
// for i = 1 to personel_counter [ 2 ] do
5606: LD_ADDR_VAR 0 2
5610: PUSH
5611: DOUBLE
5612: LD_INT 1
5614: DEC
5615: ST_TO_ADDR
5616: LD_VAR 0 16
5620: PUSH
5621: LD_INT 2
5623: ARRAY
5624: PUSH
5625: FOR_TO
5626: IFFALSE 5657
// begin PrepareHuman ( false , 2 , skill ) ;
5628: LD_INT 0
5630: PPUSH
5631: LD_INT 2
5633: PPUSH
5634: LD_VAR 0 6
5638: PPUSH
5639: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5643: CALL_OW 44
5647: PPUSH
5648: LD_INT 16
5650: PPUSH
5651: CALL_OW 52
// end ;
5655: GO 5625
5657: POP
5658: POP
// for i = 1 to personel_counter [ 3 ] do
5659: LD_ADDR_VAR 0 2
5663: PUSH
5664: DOUBLE
5665: LD_INT 1
5667: DEC
5668: ST_TO_ADDR
5669: LD_VAR 0 16
5673: PUSH
5674: LD_INT 3
5676: ARRAY
5677: PUSH
5678: FOR_TO
5679: IFFALSE 5726
// begin PrepareHuman ( false , 3 , skill ) ;
5681: LD_INT 0
5683: PPUSH
5684: LD_INT 3
5686: PPUSH
5687: LD_VAR 0 6
5691: PPUSH
5692: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5696: CALL_OW 44
5700: PPUSH
5701: LD_VAR 0 11
5705: PUSH
5706: LD_VAR 0 2
5710: PUSH
5711: LD_INT 2
5713: MOD
5714: PUSH
5715: LD_INT 1
5717: PLUS
5718: ARRAY
5719: PPUSH
5720: CALL_OW 52
// end ;
5724: GO 5678
5726: POP
5727: POP
// for i = 1 to personel_counter [ 4 ] do
5728: LD_ADDR_VAR 0 2
5732: PUSH
5733: DOUBLE
5734: LD_INT 1
5736: DEC
5737: ST_TO_ADDR
5738: LD_VAR 0 16
5742: PUSH
5743: LD_INT 4
5745: ARRAY
5746: PUSH
5747: FOR_TO
5748: IFFALSE 5785
// begin PrepareHuman ( false , 4 , skill ) ;
5750: LD_INT 0
5752: PPUSH
5753: LD_INT 4
5755: PPUSH
5756: LD_VAR 0 6
5760: PPUSH
5761: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5765: CALL_OW 44
5769: PPUSH
5770: LD_VAR 0 10
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: CALL_OW 52
// end ;
5783: GO 5747
5785: POP
5786: POP
// for i in breastworks_list do
5787: LD_ADDR_VAR 0 2
5791: PUSH
5792: LD_VAR 0 12
5796: PUSH
5797: FOR_IN
5798: IFFALSE 5910
// begin r := GetDir ( i ) ;
5800: LD_ADDR_VAR 0 4
5804: PUSH
5805: LD_VAR 0 2
5809: PPUSH
5810: CALL_OW 254
5814: ST_TO_ADDR
// if r > 3 then
5815: LD_VAR 0 4
5819: PUSH
5820: LD_INT 3
5822: GREATER
5823: IFFALSE 5841
// r := r - 3 else
5825: LD_ADDR_VAR 0 4
5829: PUSH
5830: LD_VAR 0 4
5834: PUSH
5835: LD_INT 3
5837: MINUS
5838: ST_TO_ADDR
5839: GO 5855
// r := r + 3 ;
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: LD_VAR 0 4
5850: PUSH
5851: LD_INT 3
5853: PLUS
5854: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5855: LD_INT 0
5857: PPUSH
5858: LD_INT 1
5860: PPUSH
5861: LD_VAR 0 6
5865: PPUSH
5866: CALL_OW 380
// un := CreateHuman ;
5870: LD_ADDR_VAR 0 5
5874: PUSH
5875: CALL_OW 44
5879: ST_TO_ADDR
// SetDir ( un , r ) ;
5880: LD_VAR 0 5
5884: PPUSH
5885: LD_VAR 0 4
5889: PPUSH
5890: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5894: LD_VAR 0 5
5898: PPUSH
5899: LD_VAR 0 2
5903: PPUSH
5904: CALL_OW 52
// end ;
5908: GO 5797
5910: POP
5911: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5912: LD_ADDR_VAR 0 8
5916: PUSH
5917: LD_INT 22
5919: PUSH
5920: LD_INT 3
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 25
5929: PUSH
5930: LD_INT 3
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 69
5945: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5946: LD_ADDR_VAR 0 4
5950: PUSH
5951: LD_INT 4
5953: PUSH
5954: LD_INT 5
5956: PUSH
5957: LD_INT 6
5959: PUSH
5960: LD_INT 6
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: PUSH
5969: LD_OWVAR 67
5973: ARRAY
5974: ST_TO_ADDR
// for i = 1 to r do
5975: LD_ADDR_VAR 0 2
5979: PUSH
5980: DOUBLE
5981: LD_INT 1
5983: DEC
5984: ST_TO_ADDR
5985: LD_VAR 0 4
5989: PUSH
5990: FOR_TO
5991: IFFALSE 6164
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5993: LD_ADDR_VAR 0 5
5997: PUSH
5998: LD_INT 3
6000: PPUSH
6001: LD_INT 3
6003: PPUSH
6004: LD_INT 22
6006: PUSH
6007: LD_INT 22
6009: PUSH
6010: LD_INT 24
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: PUSH
6018: LD_VAR 0 2
6022: PUSH
6023: LD_INT 3
6025: MOD
6026: PUSH
6027: LD_INT 1
6029: PLUS
6030: ARRAY
6031: PPUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_INT 1
6037: PPUSH
6038: LD_INT 43
6040: PUSH
6041: LD_INT 44
6043: PUSH
6044: LD_INT 42
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: PUSH
6052: LD_VAR 0 2
6056: PUSH
6057: LD_INT 3
6059: MOD
6060: PUSH
6061: LD_INT 1
6063: PLUS
6064: ARRAY
6065: PPUSH
6066: LD_INT 100
6068: PPUSH
6069: CALL 520 0 7
6073: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6074: LD_VAR 0 5
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: LD_INT 5
6084: PPUSH
6085: CALL_OW 12
6089: PPUSH
6090: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6094: LD_VAR 0 5
6098: PPUSH
6099: LD_INT 5
6101: PPUSH
6102: LD_INT 0
6104: PPUSH
6105: CALL_OW 49
// if i > tmp - 2 then
6109: LD_VAR 0 2
6113: PUSH
6114: LD_VAR 0 8
6118: PUSH
6119: LD_INT 2
6121: MINUS
6122: GREATER
6123: IFFALSE 6127
// continue ;
6125: GO 5990
// ComExitBuilding ( tmp [ i ] ) ;
6127: LD_VAR 0 8
6131: PUSH
6132: LD_VAR 0 2
6136: ARRAY
6137: PPUSH
6138: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6142: LD_VAR 0 8
6146: PUSH
6147: LD_VAR 0 2
6151: ARRAY
6152: PPUSH
6153: LD_VAR 0 5
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 5990
6164: POP
6165: POP
// end ;
6166: LD_VAR 0 1
6170: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6171: LD_INT 22
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: IFFALSE 6931
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
6210: PPUSH
// begin enable ;
6211: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_INT 6
6219: PPUSH
6220: LD_INT 3
6222: PUSH
6223: LD_INT 24
6225: PUSH
6226: LD_INT 1000
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 21
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PPUSH
6251: CALL_OW 70
6255: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6256: LD_ADDR_VAR 0 4
6260: PUSH
6261: LD_INT 22
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 25
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 69
6289: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6290: LD_VAR 0 2
6294: NOT
6295: PUSH
6296: LD_EXP 20
6300: NOT
6301: AND
6302: IFFALSE 6372
// begin for i in engs do
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_VAR 0 4
6313: PUSH
6314: FOR_IN
6315: IFFALSE 6370
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6317: LD_VAR 0 1
6321: PPUSH
6322: CALL_OW 256
6326: PUSH
6327: LD_INT 1000
6329: EQUAL
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 314
6340: NOT
6341: AND
6342: PUSH
6343: LD_VAR 0 1
6347: PPUSH
6348: CALL_OW 310
6352: NOT
6353: AND
6354: IFFALSE 6368
// ComEnterUnit ( i , ru_dep_main ) ;
6356: LD_VAR 0 1
6360: PPUSH
6361: LD_INT 16
6363: PPUSH
6364: CALL_OW 120
6368: GO 6314
6370: POP
6371: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6372: LD_VAR 0 4
6376: PPUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 650
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: IFFALSE 6491
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6400: LD_ADDR_VAR 0 3
6404: PUSH
6405: LD_VAR 0 4
6409: PPUSH
6410: LD_INT 3
6412: PUSH
6413: LD_INT 24
6415: PUSH
6416: LD_INT 650
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: PPUSH
6427: CALL_OW 72
6431: ST_TO_ADDR
// for i in tmp do
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_VAR 0 3
6441: PUSH
6442: FOR_IN
6443: IFFALSE 6489
// if not IsInArea ( i , mainBaseArea ) then
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 14
6452: PPUSH
6453: CALL_OW 308
6457: NOT
6458: IFFALSE 6487
// begin ComMoveXY ( i , 129 , 125 ) ;
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_INT 129
6467: PPUSH
6468: LD_INT 125
6470: PPUSH
6471: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6475: LD_VAR 0 1
6479: PPUSH
6480: LD_INT 1050
6482: PPUSH
6483: CALL_OW 202
// end ;
6487: GO 6442
6489: POP
6490: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6491: LD_ADDR_VAR 0 4
6495: PUSH
6496: LD_VAR 0 4
6500: PPUSH
6501: LD_INT 24
6503: PUSH
6504: LD_INT 650
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PPUSH
6511: CALL_OW 72
6515: ST_TO_ADDR
// if not engs then
6516: LD_VAR 0 4
6520: NOT
6521: IFFALSE 6525
// exit ;
6523: GO 6931
// if filter then
6525: LD_VAR 0 2
6529: IFFALSE 6788
// begin for i in engs do
6531: LD_ADDR_VAR 0 1
6535: PUSH
6536: LD_VAR 0 4
6540: PUSH
6541: FOR_IN
6542: IFFALSE 6566
// if IsInUnit ( i ) then
6544: LD_VAR 0 1
6548: PPUSH
6549: CALL_OW 310
6553: IFFALSE 6564
// ComExitBuilding ( i ) ;
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 122
6564: GO 6541
6566: POP
6567: POP
// wait ( 3 ) ;
6568: LD_INT 3
6570: PPUSH
6571: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6575: LD_VAR 0 2
6579: PUSH
6580: LD_INT 2
6582: GREATEREQUAL
6583: PUSH
6584: LD_VAR 0 4
6588: PUSH
6589: LD_INT 2
6591: GREATEREQUAL
6592: AND
6593: IFFALSE 6741
// begin for i = 1 to engs / 2 do
6595: LD_ADDR_VAR 0 1
6599: PUSH
6600: DOUBLE
6601: LD_INT 1
6603: DEC
6604: ST_TO_ADDR
6605: LD_VAR 0 4
6609: PUSH
6610: LD_INT 2
6612: DIVREAL
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6661
// if not HasTask ( engs [ i ] ) then
6617: LD_VAR 0 4
6621: PUSH
6622: LD_VAR 0 1
6626: ARRAY
6627: PPUSH
6628: CALL_OW 314
6632: NOT
6633: IFFALSE 6659
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6635: LD_VAR 0 4
6639: PUSH
6640: LD_VAR 0 1
6644: ARRAY
6645: PPUSH
6646: LD_VAR 0 2
6650: PUSH
6651: LD_INT 1
6653: ARRAY
6654: PPUSH
6655: CALL_OW 130
6659: GO 6614
6661: POP
6662: POP
// for i = engs / 2 + 1 to engs do
6663: LD_ADDR_VAR 0 1
6667: PUSH
6668: DOUBLE
6669: LD_VAR 0 4
6673: PUSH
6674: LD_INT 2
6676: DIVREAL
6677: PUSH
6678: LD_INT 1
6680: PLUS
6681: DEC
6682: ST_TO_ADDR
6683: LD_VAR 0 4
6687: PUSH
6688: FOR_TO
6689: IFFALSE 6737
// if not HasTask ( engs [ i ] ) then
6691: LD_VAR 0 4
6695: PUSH
6696: LD_VAR 0 1
6700: ARRAY
6701: PPUSH
6702: CALL_OW 314
6706: NOT
6707: IFFALSE 6735
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6709: LD_VAR 0 4
6713: PUSH
6714: LD_VAR 0 1
6718: ARRAY
6719: PPUSH
6720: LD_VAR 0 2
6724: PUSH
6725: LD_VAR 0 2
6729: ARRAY
6730: PPUSH
6731: CALL_OW 130
6735: GO 6688
6737: POP
6738: POP
// end else
6739: GO 6788
// for i in engs do
6741: LD_ADDR_VAR 0 1
6745: PUSH
6746: LD_VAR 0 4
6750: PUSH
6751: FOR_IN
6752: IFFALSE 6786
// if not HasTask ( i ) then
6754: LD_VAR 0 1
6758: PPUSH
6759: CALL_OW 314
6763: NOT
6764: IFFALSE 6784
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6766: LD_VAR 0 1
6770: PPUSH
6771: LD_VAR 0 2
6775: PUSH
6776: LD_INT 1
6778: ARRAY
6779: PPUSH
6780: CALL_OW 130
6784: GO 6751
6786: POP
6787: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6788: LD_ADDR_VAR 0 5
6792: PUSH
6793: LD_INT 81
6795: PUSH
6796: LD_INT 3
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PPUSH
6803: CALL_OW 69
6807: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6808: LD_EXP 20
6812: PUSH
6813: LD_VAR 0 2
6817: NOT
6818: AND
6819: IFFALSE 6931
// begin ComExitBuilding ( engs ) ;
6821: LD_VAR 0 4
6825: PPUSH
6826: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6830: LD_VAR 0 5
6834: PPUSH
6835: LD_EXP 20
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: PPUSH
6844: LD_EXP 20
6848: PUSH
6849: LD_INT 3
6851: ARRAY
6852: PPUSH
6853: CALL_OW 73
6857: PPUSH
6858: LD_EXP 20
6862: PUSH
6863: LD_INT 2
6865: ARRAY
6866: PPUSH
6867: LD_EXP 20
6871: PUSH
6872: LD_INT 3
6874: ARRAY
6875: PPUSH
6876: CALL_OW 297
6880: PUSH
6881: LD_INT 10
6883: GREATER
6884: IFFALSE 6931
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6886: LD_VAR 0 4
6890: PPUSH
6891: LD_EXP 20
6895: PUSH
6896: LD_INT 1
6898: ARRAY
6899: PPUSH
6900: LD_EXP 20
6904: PUSH
6905: LD_INT 2
6907: ARRAY
6908: PPUSH
6909: LD_EXP 20
6913: PUSH
6914: LD_INT 3
6916: ARRAY
6917: PPUSH
6918: LD_EXP 20
6922: PUSH
6923: LD_INT 4
6925: ARRAY
6926: PPUSH
6927: CALL_OW 145
// end ; end ;
6931: PPOPN 5
6933: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6934: LD_INT 16
6936: PPUSH
6937: CALL_OW 256
6941: PUSH
6942: LD_INT 250
6944: LESS
6945: IFFALSE 7135
6947: GO 6949
6949: DISABLE
6950: LD_INT 0
6952: PPUSH
6953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6954: LD_ADDR_VAR 0 2
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_INT 3
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 25
6974: PUSH
6975: LD_INT 1
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 25
6984: PUSH
6985: LD_INT 3
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 25
6994: PUSH
6995: LD_INT 4
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 69
7016: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 122
// wait ( 3 ) ;
7026: LD_INT 3
7028: PPUSH
7029: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7033: LD_VAR 0 2
7037: PPUSH
7038: LD_INT 156
7040: PPUSH
7041: LD_INT 211
7043: PPUSH
7044: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7048: LD_INT 35
7050: PPUSH
7051: CALL_OW 67
// for i in tmp do
7055: LD_ADDR_VAR 0 1
7059: PUSH
7060: LD_VAR 0 2
7064: PUSH
7065: FOR_IN
7066: IFFALSE 7126
// if IsInArea ( i , escapeArea ) then
7068: LD_VAR 0 1
7072: PPUSH
7073: LD_INT 15
7075: PPUSH
7076: CALL_OW 308
7080: IFFALSE 7109
// begin RemoveUnit ( i ) ;
7082: LD_VAR 0 1
7086: PPUSH
7087: CALL_OW 64
// tmp := tmp diff i ;
7091: LD_ADDR_VAR 0 2
7095: PUSH
7096: LD_VAR 0 2
7100: PUSH
7101: LD_VAR 0 1
7105: DIFF
7106: ST_TO_ADDR
// end else
7107: GO 7124
// ComMoveXY ( i , 156 , 211 ) ;
7109: LD_VAR 0 1
7113: PPUSH
7114: LD_INT 156
7116: PPUSH
7117: LD_INT 211
7119: PPUSH
7120: CALL_OW 111
7124: GO 7065
7126: POP
7127: POP
// until not tmp ;
7128: LD_VAR 0 2
7132: NOT
7133: IFFALSE 7048
// end ;
7135: PPOPN 2
7137: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7138: LD_INT 22
7140: PUSH
7141: LD_INT 3
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: IFFALSE 7420
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
// begin enable ;
7176: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7177: LD_ADDR_VAR 0 2
7181: PUSH
7182: LD_INT 14
7184: PPUSH
7185: LD_INT 22
7187: PUSH
7188: LD_INT 3
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 21
7197: PUSH
7198: LD_INT 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 3
7207: PUSH
7208: LD_INT 24
7210: PUSH
7211: LD_INT 1000
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 70
7231: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_INT 22
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 4
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: ST_TO_ADDR
// if not doc then
7266: LD_VAR 0 3
7270: NOT
7271: IFFALSE 7275
// exit ;
7273: GO 7420
// if not tmp then
7275: LD_VAR 0 2
7279: NOT
7280: IFFALSE 7371
// begin if not IsInUnit ( doc [ 1 ] ) then
7282: LD_VAR 0 3
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: PPUSH
7291: CALL_OW 310
7295: NOT
7296: IFFALSE 7369
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7298: LD_VAR 0 3
7302: PPUSH
7303: LD_INT 22
7305: PUSH
7306: LD_INT 3
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 30
7318: PUSH
7319: LD_INT 6
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PUSH
7326: LD_INT 30
7328: PUSH
7329: LD_INT 7
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 30
7338: PUSH
7339: LD_INT 8
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 69
7360: PUSH
7361: LD_INT 1
7363: ARRAY
7364: PPUSH
7365: CALL_OW 120
// exit ;
7369: GO 7420
// end ; if IsInUnit ( doc [ 1 ] ) then
7371: LD_VAR 0 3
7375: PUSH
7376: LD_INT 1
7378: ARRAY
7379: PPUSH
7380: CALL_OW 310
7384: IFFALSE 7395
// ComExitBuilding ( doc ) ;
7386: LD_VAR 0 3
7390: PPUSH
7391: CALL_OW 122
// wait ( 3 ) ;
7395: LD_INT 3
7397: PPUSH
7398: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7402: LD_VAR 0 3
7406: PPUSH
7407: LD_VAR 0 2
7411: PUSH
7412: LD_INT 1
7414: ARRAY
7415: PPUSH
7416: CALL_OW 128
// end ;
7420: PPOPN 3
7422: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7423: LD_INT 22
7425: PUSH
7426: LD_INT 3
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 25
7435: PUSH
7436: LD_INT 3
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PPUSH
7447: CALL_OW 69
7451: PUSH
7452: LD_INT 22
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 21
7464: PUSH
7465: LD_INT 2
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PPUSH
7476: CALL_OW 69
7480: AND
7481: IFFALSE 8240
7483: GO 7485
7485: DISABLE
7486: LD_INT 0
7488: PPUSH
7489: PPUSH
7490: PPUSH
7491: PPUSH
7492: PPUSH
7493: PPUSH
// begin enable ;
7494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: LD_INT 22
7502: PUSH
7503: LD_INT 3
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 21
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PUSH
7520: LD_INT 3
7522: PUSH
7523: LD_INT 58
7525: PUSH
7526: EMPTY
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: PPUSH
7538: CALL_OW 69
7542: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7543: LD_ADDR_VAR 0 4
7547: PUSH
7548: LD_INT 10
7550: PUSH
7551: LD_INT 11
7553: PUSH
7554: LD_INT 12
7556: PUSH
7557: LD_INT 14
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: ST_TO_ADDR
// area := 0 ;
7566: LD_ADDR_VAR 0 5
7570: PUSH
7571: LD_INT 0
7573: ST_TO_ADDR
// attacking := false ;
7574: LD_ADDR_VAR 0 3
7578: PUSH
7579: LD_INT 0
7581: ST_TO_ADDR
// for i in tmp do
7582: LD_ADDR_VAR 0 1
7586: PUSH
7587: LD_VAR 0 2
7591: PUSH
7592: FOR_IN
7593: IFFALSE 8021
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7595: LD_VAR 0 1
7599: PPUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 69
7614: PPUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 74
7624: PPUSH
7625: CALL_OW 296
7629: PUSH
7630: LD_INT 10
7632: LESS
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 314
7643: NOT
7644: AND
7645: PUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 110
7655: NOT
7656: AND
7657: PUSH
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 256
7667: PUSH
7668: LD_INT 650
7670: GREATER
7671: AND
7672: IFFALSE 7716
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7674: LD_VAR 0 1
7678: PPUSH
7679: LD_INT 22
7681: PUSH
7682: LD_INT 1
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: PPUSH
7694: LD_VAR 0 1
7698: PPUSH
7699: CALL_OW 74
7703: PPUSH
7704: CALL_OW 115
// attacking := true ;
7708: LD_ADDR_VAR 0 3
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 110
7725: NOT
7726: PUSH
7727: LD_VAR 0 1
7731: PPUSH
7732: CALL_OW 256
7736: PUSH
7737: LD_INT 650
7739: LESS
7740: AND
7741: PUSH
7742: LD_VAR 0 1
7746: PPUSH
7747: CALL_OW 247
7751: PUSH
7752: LD_INT 2
7754: EQUAL
7755: AND
7756: IFFALSE 7785
// begin SetTag ( i , 1 ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_INT 1
7765: PPUSH
7766: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7770: LD_VAR 0 1
7774: PPUSH
7775: LD_INT 130
7777: PPUSH
7778: LD_INT 139
7780: PPUSH
7781: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 110
7794: PUSH
7795: LD_INT 1
7797: EQUAL
7798: PUSH
7799: LD_VAR 0 1
7803: PPUSH
7804: LD_INT 130
7806: PPUSH
7807: LD_INT 139
7809: PPUSH
7810: CALL_OW 297
7814: PUSH
7815: LD_INT 6
7817: LESS
7818: AND
7819: IFFALSE 7833
// SetTag ( i , 2 ) ;
7821: LD_VAR 0 1
7825: PPUSH
7826: LD_INT 2
7828: PPUSH
7829: CALL_OW 109
// if GetTag ( i ) = 2 then
7833: LD_VAR 0 1
7837: PPUSH
7838: CALL_OW 110
7842: PUSH
7843: LD_INT 2
7845: EQUAL
7846: IFFALSE 7981
// begin if GetLives ( i ) = 1000 then
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 256
7857: PUSH
7858: LD_INT 1000
7860: EQUAL
7861: IFFALSE 7877
// SetTag ( i , 3 ) else
7863: LD_VAR 0 1
7867: PPUSH
7868: LD_INT 3
7870: PPUSH
7871: CALL_OW 109
7875: GO 7981
// if IsDrivenBy ( i ) then
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL_OW 311
7886: IFFALSE 7981
// begin mech := IsDrivenBy ( i ) ;
7888: LD_ADDR_VAR 0 6
7892: PUSH
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 311
7902: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7903: LD_INT 1
7905: PPUSH
7906: LD_VAR 0 6
7910: PPUSH
7911: CALL_OW 292
7915: NOT
7916: PUSH
7917: LD_VAR 0 6
7921: PPUSH
7922: CALL_OW 256
7926: PUSH
7927: LD_INT 1000
7929: LESS
7930: AND
7931: IFFALSE 7945
// SetLives ( mech , 1000 ) ;
7933: LD_VAR 0 6
7937: PPUSH
7938: LD_INT 1000
7940: PPUSH
7941: CALL_OW 234
// if not See ( 1 , i ) then
7945: LD_INT 1
7947: PPUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 292
7957: NOT
7958: IFFALSE 7972
// SetFuel ( i , 100 ) ;
7960: LD_VAR 0 1
7964: PPUSH
7965: LD_INT 100
7967: PPUSH
7968: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7972: LD_VAR 0 6
7976: PPUSH
7977: CALL 72412 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 110
7990: PUSH
7991: LD_INT 3
7993: EQUAL
7994: PUSH
7995: LD_VAR 0 1
7999: PPUSH
8000: CALL_OW 311
8004: AND
8005: IFFALSE 8019
// SetTag ( i , 0 ) ;
8007: LD_VAR 0 1
8011: PPUSH
8012: LD_INT 0
8014: PPUSH
8015: CALL_OW 109
// end ;
8019: GO 7592
8021: POP
8022: POP
// if attacking then
8023: LD_VAR 0 3
8027: IFFALSE 8031
// exit ;
8029: GO 8240
// if can_end and tmp then
8031: LD_EXP 6
8035: PUSH
8036: LD_VAR 0 2
8040: AND
8041: IFFALSE 8096
// begin for i in tmp do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: LD_VAR 0 2
8052: PUSH
8053: FOR_IN
8054: IFFALSE 8092
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8056: LD_VAR 0 1
8060: PPUSH
8061: LD_INT 22
8063: PUSH
8064: LD_INT 1
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 69
8075: PPUSH
8076: LD_VAR 0 1
8080: PPUSH
8081: CALL_OW 74
8085: PPUSH
8086: CALL_OW 115
8090: GO 8053
8092: POP
8093: POP
// exit ;
8094: GO 8240
// end ; for i in areas do
8096: LD_ADDR_VAR 0 1
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: FOR_IN
8107: IFFALSE 8144
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8109: LD_VAR 0 1
8113: PPUSH
8114: LD_INT 22
8116: PUSH
8117: LD_INT 1
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PPUSH
8124: CALL_OW 70
8128: IFFALSE 8142
// begin area := i ;
8130: LD_ADDR_VAR 0 5
8134: PUSH
8135: LD_VAR 0 1
8139: ST_TO_ADDR
// break ;
8140: GO 8144
// end ;
8142: GO 8106
8144: POP
8145: POP
// if area then
8146: LD_VAR 0 5
8150: IFFALSE 8240
// begin for i in tmp do
8152: LD_ADDR_VAR 0 1
8156: PUSH
8157: LD_VAR 0 2
8161: PUSH
8162: FOR_IN
8163: IFFALSE 8238
// begin if GetTag ( i ) then
8165: LD_VAR 0 1
8169: PPUSH
8170: CALL_OW 110
8174: IFFALSE 8178
// continue ;
8176: GO 8162
// if GetFuel ( i ) < 33 then
8178: LD_VAR 0 1
8182: PPUSH
8183: CALL_OW 261
8187: PUSH
8188: LD_INT 33
8190: LESS
8191: IFFALSE 8205
// SetFuel ( i , 33 ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_INT 33
8200: PPUSH
8201: CALL_OW 240
// if not IsInArea ( i , area ) then
8205: LD_VAR 0 1
8209: PPUSH
8210: LD_VAR 0 5
8214: PPUSH
8215: CALL_OW 308
8219: NOT
8220: IFFALSE 8236
// ComMoveToArea ( i , area ) ;
8222: LD_VAR 0 1
8226: PPUSH
8227: LD_VAR 0 5
8231: PPUSH
8232: CALL_OW 113
// end ;
8236: GO 8162
8238: POP
8239: POP
// end ; end ;
8240: PPOPN 6
8242: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8243: LD_OWVAR 67
8247: PUSH
8248: LD_INT 1
8250: GREATER
8251: IFFALSE 8540
8253: GO 8255
8255: DISABLE
8256: LD_INT 0
8258: PPUSH
8259: PPUSH
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
// begin uc_side := 3 ;
8264: LD_ADDR_OWVAR 20
8268: PUSH
8269: LD_INT 3
8271: ST_TO_ADDR
// uc_nation := 3 ;
8272: LD_ADDR_OWVAR 21
8276: PUSH
8277: LD_INT 3
8279: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8280: LD_ADDR_VAR 0 5
8284: PUSH
8285: LD_INT 18900
8287: PUSH
8288: LD_INT 14700
8290: PUSH
8291: LD_INT 12600
8293: PUSH
8294: LD_INT 11550
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: PUSH
8303: LD_OWVAR 67
8307: ARRAY
8308: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8309: LD_ADDR_VAR 0 6
8313: PUSH
8314: LD_INT 2
8316: PUSH
8317: LD_INT 2
8319: PUSH
8320: LD_INT 3
8322: PUSH
8323: LD_INT 3
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PUSH
8332: LD_OWVAR 67
8336: ARRAY
8337: ST_TO_ADDR
// for i = 1 to count do
8338: LD_ADDR_VAR 0 1
8342: PUSH
8343: DOUBLE
8344: LD_INT 1
8346: DEC
8347: ST_TO_ADDR
8348: LD_VAR 0 6
8352: PUSH
8353: FOR_TO
8354: IFFALSE 8538
// begin wait ( time ) ;
8356: LD_VAR 0 5
8360: PPUSH
8361: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8365: LD_ADDR_VAR 0 2
8369: PUSH
8370: DOUBLE
8371: LD_INT 1
8373: DEC
8374: ST_TO_ADDR
8375: LD_INT 1
8377: PPUSH
8378: LD_OWVAR 67
8382: PPUSH
8383: CALL_OW 12
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8534
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8391: LD_ADDR_VAR 0 4
8395: PUSH
8396: LD_INT 3
8398: PPUSH
8399: LD_INT 3
8401: PPUSH
8402: LD_INT 22
8404: PPUSH
8405: LD_INT 1
8407: PPUSH
8408: LD_INT 1
8410: PPUSH
8411: LD_INT 43
8413: PUSH
8414: LD_INT 44
8416: PUSH
8417: LD_INT 42
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: LIST
8424: PUSH
8425: LD_VAR 0 1
8429: PUSH
8430: LD_INT 3
8432: MOD
8433: PUSH
8434: LD_INT 1
8436: PLUS
8437: ARRAY
8438: PPUSH
8439: LD_INT 80
8441: PPUSH
8442: CALL 520 0 7
8446: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8447: LD_VAR 0 4
8451: PPUSH
8452: LD_INT 13
8454: PPUSH
8455: LD_INT 0
8457: PPUSH
8458: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8462: LD_INT 0
8464: PPUSH
8465: LD_INT 3
8467: PPUSH
8468: LD_INT 4
8470: PUSH
8471: LD_INT 5
8473: PUSH
8474: LD_INT 5
8476: PUSH
8477: LD_INT 7
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: PUSH
8486: LD_OWVAR 67
8490: ARRAY
8491: PPUSH
8492: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8496: CALL_OW 44
8500: PPUSH
8501: LD_VAR 0 4
8505: PPUSH
8506: CALL_OW 52
// wait ( 0 0$01 ) ;
8510: LD_INT 35
8512: PPUSH
8513: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8517: LD_VAR 0 4
8521: PPUSH
8522: LD_INT 143
8524: PPUSH
8525: LD_INT 143
8527: PPUSH
8528: CALL_OW 111
// end ;
8532: GO 8388
8534: POP
8535: POP
// end ;
8536: GO 8353
8538: POP
8539: POP
// end ;
8540: PPOPN 6
8542: END
// every 8 8$00 do var i , un , time ;
8543: GO 8545
8545: DISABLE
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
8550: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8551: LD_ADDR_VAR 0 3
8555: PUSH
8556: LD_INT 6300
8558: PUSH
8559: LD_INT 2100
8561: PUSH
8562: LD_INT 1050
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: LIST
8569: ST_TO_ADDR
// wait ( time ) ;
8570: LD_VAR 0 3
8574: PPUSH
8575: CALL_OW 67
// uc_side := 3 ;
8579: LD_ADDR_OWVAR 20
8583: PUSH
8584: LD_INT 3
8586: ST_TO_ADDR
// uc_nation := 3 ;
8587: LD_ADDR_OWVAR 21
8591: PUSH
8592: LD_INT 3
8594: ST_TO_ADDR
// for i = 1 to 2 do
8595: LD_ADDR_VAR 0 1
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_INT 2
8607: PUSH
8608: FOR_TO
8609: IFFALSE 8672
// begin PrepareHuman ( false , 1 , 4 ) ;
8611: LD_INT 0
8613: PPUSH
8614: LD_INT 1
8616: PPUSH
8617: LD_INT 4
8619: PPUSH
8620: CALL_OW 380
// un := CreateHuman ;
8624: LD_ADDR_VAR 0 2
8628: PUSH
8629: CALL_OW 44
8633: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8634: LD_VAR 0 2
8638: PPUSH
8639: LD_INT 16
8641: PPUSH
8642: CALL_OW 52
// ComExitBuilding ( un ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8655: LD_VAR 0 2
8659: PPUSH
8660: LD_INT 41
8662: PPUSH
8663: LD_INT 76
8665: PPUSH
8666: CALL_OW 174
// end ;
8670: GO 8608
8672: POP
8673: POP
// end ; end_of_file
8674: PPOPN 3
8676: END
// export function Action ; begin
8677: LD_INT 0
8679: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8680: LD_INT 28
8682: PPUSH
8683: LD_INT 3
8685: PPUSH
8686: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8690: LD_INT 41
8692: PPUSH
8693: LD_INT 76
8695: PPUSH
8696: LD_INT 1
8698: PPUSH
8699: LD_INT 10
8701: PPUSH
8702: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8706: LD_INT 41
8708: PPUSH
8709: LD_INT 76
8711: PPUSH
8712: LD_INT 1
8714: PPUSH
8715: CALL_OW 331
// InGameOn ;
8719: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8723: LD_EXP 19
8727: PPUSH
8728: LD_STRING D2-Har-1
8730: PPUSH
8731: CALL_OW 94
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8739: LD_STRING M1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8751: LD_EXP 4
8755: PUSH
8756: LD_INT 1
8758: GREATER
8759: IFFALSE 8850
8761: GO 8763
8763: DISABLE
8764: LD_INT 0
8766: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8767: LD_ADDR_VAR 0 1
8771: PUSH
8772: LD_INT 1
8774: PPUSH
8775: CALL 608 0 1
8779: PUSH
8780: LD_INT 1
8782: ARRAY
8783: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8784: LD_VAR 0 1
8788: PPUSH
8789: LD_STRING D2a-Sol1-1
8791: PPUSH
8792: CALL_OW 88
// if not un then
8796: LD_VAR 0 1
8800: NOT
8801: IFFALSE 8832
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8803: LD_ADDR_VAR 0 1
8807: PUSH
8808: LD_INT 2
8810: PPUSH
8811: CALL 608 0 1
8815: PUSH
8816: LD_INT 1
8818: ARRAY
8819: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8820: LD_VAR 0 1
8824: PPUSH
8825: LD_STRING D2a-FSol1-1
8827: PPUSH
8828: CALL_OW 88
// end ; if Khatam then
8832: LD_EXP 17
8836: IFFALSE 8850
// Say ( Khatam , D3b-Khat-3 ) ;
8838: LD_EXP 17
8842: PPUSH
8843: LD_STRING D3b-Khat-3
8845: PPUSH
8846: CALL_OW 88
// end ;
8850: PPOPN 1
8852: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8853: LD_EXP 15
8857: PUSH
8858: LD_EXP 18
8862: NOT
8863: AND
8864: PUSH
8865: LD_INT 22
8867: PUSH
8868: LD_INT 1
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 91
8877: PUSH
8878: LD_EXP 15
8882: PUSH
8883: LD_INT 7
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: AND
8900: PUSH
8901: LD_EXP 15
8905: PPUSH
8906: CALL_OW 302
8910: AND
8911: PUSH
8912: LD_INT 1
8914: PPUSH
8915: CALL_OW 463
8919: NOT
8920: AND
8921: PUSH
8922: LD_INT 4
8924: PPUSH
8925: CALL_OW 463
8929: NOT
8930: AND
8931: IFFALSE 9518
8933: GO 8935
8935: DISABLE
8936: LD_INT 0
8938: PPUSH
8939: PPUSH
// begin InGameOn ;
8940: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_INT 0
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 25
8961: PUSH
8962: LD_INT 12
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PPUSH
8973: CALL_OW 69
8977: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: LD_EXP 15
8992: PPUSH
8993: CALL_OW 74
8997: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8998: LD_ADDR_VAR 0 1
9002: PUSH
9003: LD_INT 22
9005: PUSH
9006: LD_INT 1
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 21
9015: PUSH
9016: LD_INT 1
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 91
9025: PUSH
9026: LD_EXP 15
9030: PUSH
9031: LD_INT 20
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: PPUSH
9044: CALL_OW 69
9048: PUSH
9049: FOR_IN
9050: IFFALSE 9068
// ComTurnUnit ( i , Frank ) ;
9052: LD_VAR 0 1
9056: PPUSH
9057: LD_EXP 15
9061: PPUSH
9062: CALL_OW 119
9066: GO 9049
9068: POP
9069: POP
// SetSide ( Frank , 1 ) ;
9070: LD_EXP 15
9074: PPUSH
9075: LD_INT 1
9077: PPUSH
9078: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9082: LD_EXP 9
9086: PPUSH
9087: LD_EXP 15
9091: PPUSH
9092: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9096: LD_EXP 9
9100: PPUSH
9101: LD_EXP 15
9105: PPUSH
9106: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9110: LD_EXP 15
9114: PPUSH
9115: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9119: LD_EXP 15
9123: PPUSH
9124: LD_STRING D3a-Frank-1
9126: PPUSH
9127: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9131: LD_VAR 0 2
9135: PPUSH
9136: LD_INT 42
9138: PPUSH
9139: LD_INT 78
9141: PPUSH
9142: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9146: LD_VAR 0 2
9150: PPUSH
9151: LD_EXP 15
9155: PPUSH
9156: CALL_OW 179
// if Lisa then
9160: LD_EXP 14
9164: IFFALSE 9178
// Say ( Lisa , D3a-Lisa-1 ) ;
9166: LD_EXP 14
9170: PPUSH
9171: LD_STRING D3a-Lisa-1
9173: PPUSH
9174: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9178: LD_EXP 9
9182: PPUSH
9183: LD_STRING D3a-JMM-1
9185: PPUSH
9186: CALL_OW 88
// if Cyrus then
9190: LD_EXP 13
9194: IFFALSE 9208
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9196: LD_EXP 13
9200: PPUSH
9201: LD_STRING D3a-Cyrus-1
9203: PPUSH
9204: CALL_OW 88
// if GetRandom ( sex_male ) then
9208: LD_INT 1
9210: PPUSH
9211: CALL 608 0 1
9215: IFFALSE 9236
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9217: LD_INT 1
9219: PPUSH
9220: CALL 608 0 1
9224: PUSH
9225: LD_INT 1
9227: ARRAY
9228: PPUSH
9229: LD_STRING D3a-Sol1-1
9231: PPUSH
9232: CALL_OW 88
// if GetRandom ( sex_female ) then
9236: LD_INT 2
9238: PPUSH
9239: CALL 608 0 1
9243: IFFALSE 9264
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9245: LD_INT 2
9247: PPUSH
9248: CALL 608 0 1
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PPUSH
9257: LD_STRING D3a-FSol1-1
9259: PPUSH
9260: CALL_OW 88
// if Gladstone then
9264: LD_EXP 16
9268: IFFALSE 9282
// Say ( Gladstone , D3a-Glad-1 ) ;
9270: LD_EXP 16
9274: PPUSH
9275: LD_STRING D3a-Glad-1
9277: PPUSH
9278: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9282: LD_VAR 0 2
9286: PPUSH
9287: LD_INT 60
9289: PPUSH
9290: LD_INT 113
9292: PPUSH
9293: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9297: LD_EXP 15
9301: PPUSH
9302: LD_STRING D3a-Frank-2
9304: PPUSH
9305: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9309: LD_EXP 15
9313: PPUSH
9314: LD_EXP 9
9318: PPUSH
9319: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9323: LD_EXP 9
9327: PPUSH
9328: LD_STRING D3a-JMM-2
9330: PPUSH
9331: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9335: LD_INT 1
9337: PPUSH
9338: LD_INT 4
9340: PPUSH
9341: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9345: LD_INT 85
9347: PPUSH
9348: LD_INT 134
9350: PPUSH
9351: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9355: LD_EXP 15
9359: PPUSH
9360: LD_STRING D3a-Frank-3
9362: PPUSH
9363: CALL_OW 88
// Wait ( 0 0$01 ) ;
9367: LD_INT 35
9369: PPUSH
9370: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9374: LD_INT 166
9376: PPUSH
9377: LD_INT 136
9379: PPUSH
9380: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9384: LD_EXP 9
9388: PPUSH
9389: LD_STRING D3a-JMM-3
9391: PPUSH
9392: CALL_OW 88
// Wait ( 0 0$01 ) ;
9396: LD_INT 35
9398: PPUSH
9399: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9403: LD_EXP 15
9407: PPUSH
9408: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9412: LD_EXP 15
9416: PPUSH
9417: LD_STRING D3a-Frank-4
9419: PPUSH
9420: CALL_OW 88
// if Lisa then
9424: LD_EXP 14
9428: IFFALSE 9442
// Say ( Lisa , D3a-Lisa-4 ) ;
9430: LD_EXP 14
9434: PPUSH
9435: LD_STRING D3a-Lisa-4
9437: PPUSH
9438: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9442: LD_EXP 9
9446: PPUSH
9447: LD_STRING D3a-JMM-4
9449: PPUSH
9450: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9454: LD_EXP 15
9458: PPUSH
9459: LD_STRING D3a-Frank-5
9461: PPUSH
9462: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9466: LD_EXP 9
9470: PPUSH
9471: LD_STRING D3a-JMM-5
9473: PPUSH
9474: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9478: LD_EXP 15
9482: PPUSH
9483: LD_STRING D3a-Frank-6
9485: PPUSH
9486: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9490: LD_EXP 9
9494: PPUSH
9495: LD_STRING D3a-JMM-6
9497: PPUSH
9498: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9502: LD_EXP 15
9506: PPUSH
9507: LD_STRING D3a-Frank-7
9509: PPUSH
9510: CALL_OW 88
// InGameOff ;
9514: CALL_OW 9
// end ;
9518: PPOPN 2
9520: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9521: LD_EXP 18
9525: PUSH
9526: LD_EXP 15
9530: NOT
9531: AND
9532: PUSH
9533: LD_INT 22
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 91
9545: PUSH
9546: LD_EXP 18
9550: PUSH
9551: LD_INT 7
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 69
9567: AND
9568: PUSH
9569: LD_EXP 18
9573: PPUSH
9574: CALL_OW 302
9578: AND
9579: PUSH
9580: LD_INT 1
9582: PPUSH
9583: CALL_OW 463
9587: NOT
9588: AND
9589: PUSH
9590: LD_INT 4
9592: PPUSH
9593: CALL_OW 463
9597: NOT
9598: AND
9599: IFFALSE 9779
9601: GO 9603
9603: DISABLE
// begin InGameOn ;
9604: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9608: LD_EXP 9
9612: PPUSH
9613: LD_EXP 18
9617: PPUSH
9618: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9622: LD_EXP 18
9626: PPUSH
9627: LD_EXP 9
9631: PPUSH
9632: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9636: LD_EXP 18
9640: PPUSH
9641: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9645: LD_EXP 18
9649: PPUSH
9650: LD_STRING D3b-Yam-1
9652: PPUSH
9653: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9657: LD_EXP 9
9661: PPUSH
9662: LD_STRING D3b-JMM-1
9664: PPUSH
9665: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9669: LD_INT 1
9671: PPUSH
9672: LD_INT 4
9674: PPUSH
9675: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9679: LD_INT 85
9681: PPUSH
9682: LD_INT 134
9684: PPUSH
9685: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9689: LD_EXP 18
9693: PPUSH
9694: LD_STRING D3b-Yam-2
9696: PPUSH
9697: CALL_OW 88
// Wait ( 0 0$01 ) ;
9701: LD_INT 35
9703: PPUSH
9704: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9708: LD_EXP 9
9712: PPUSH
9713: LD_STRING D3b-JMM-2
9715: PPUSH
9716: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9720: LD_INT 166
9722: PPUSH
9723: LD_INT 136
9725: PPUSH
9726: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9730: LD_EXP 18
9734: PPUSH
9735: LD_STRING D3b-Yam-3
9737: PPUSH
9738: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9742: LD_EXP 9
9746: PPUSH
9747: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9751: LD_EXP 9
9755: PPUSH
9756: LD_STRING D3b-JMM-3a
9758: PPUSH
9759: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9763: LD_EXP 18
9767: PPUSH
9768: LD_INT 1
9770: PPUSH
9771: CALL_OW 235
// InGameOff ;
9775: CALL_OW 9
// end ;
9779: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9780: LD_INT 7
9782: PPUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 3
9795: PUSH
9796: LD_INT 24
9798: PUSH
9799: LD_INT 1000
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PPUSH
9814: CALL_OW 70
9818: IFFALSE 10274
9820: GO 9822
9822: DISABLE
9823: LD_INT 0
9825: PPUSH
9826: PPUSH
9827: PPUSH
9828: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9829: LD_INT 35
9831: PPUSH
9832: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9836: LD_ADDR_VAR 0 1
9840: PUSH
9841: LD_INT 7
9843: PPUSH
9844: LD_INT 22
9846: PUSH
9847: LD_INT 1
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: LD_INT 24
9859: PUSH
9860: LD_INT 1000
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PPUSH
9875: CALL_OW 70
9879: ST_TO_ADDR
// if not un then
9880: LD_VAR 0 1
9884: NOT
9885: IFFALSE 9889
// continue ;
9887: GO 9829
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9889: LD_ADDR_VAR 0 3
9893: PUSH
9894: LD_VAR 0 1
9898: PUSH
9899: LD_INT 1
9901: ARRAY
9902: PPUSH
9903: CALL 2053 0 1
9907: ST_TO_ADDR
// until tw ;
9908: LD_VAR 0 3
9912: IFFALSE 9829
// DialogueOn ;
9914: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9918: LD_VAR 0 3
9922: PPUSH
9923: CALL_OW 87
// if Lisa then
9927: LD_EXP 14
9931: IFFALSE 9959
// begin Say ( Lisa , D5-Lisa-1 ) ;
9933: LD_EXP 14
9937: PPUSH
9938: LD_STRING D5-Lisa-1
9940: PPUSH
9941: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9945: LD_EXP 9
9949: PPUSH
9950: LD_STRING D5-JMM-1a
9952: PPUSH
9953: CALL_OW 88
// end else
9957: GO 9971
// Say ( JMM , D5-JMM-1 ) ;
9959: LD_EXP 9
9963: PPUSH
9964: LD_STRING D5-JMM-1
9966: PPUSH
9967: CALL_OW 88
// DialogueOff ;
9971: CALL_OW 7
// while ( true ) do
9975: LD_INT 1
9977: IFFALSE 10033
// begin wait ( 0 0$01 ) ;
9979: LD_INT 35
9981: PPUSH
9982: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9986: LD_ADDR_VAR 0 2
9990: PUSH
9991: LD_INT 8
9993: PPUSH
9994: LD_INT 30
9996: PUSH
9997: LD_INT 26
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 101
10006: PUSH
10007: LD_INT 1
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 71
10022: ST_TO_ADDR
// if x then
10023: LD_VAR 0 2
10027: IFFALSE 10031
// break ;
10029: GO 10033
// end ;
10031: GO 9975
// CenterOnUnits ( x [ 1 ] ) ;
10033: LD_VAR 0 2
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10046: LD_EXP 15
10050: PUSH
10051: LD_EXP 15
10055: PPUSH
10056: CALL_OW 255
10060: PUSH
10061: LD_INT 1
10063: EQUAL
10064: AND
10065: IFFALSE 10081
// Say ( Frank , D5a-Frank-1 ) else
10067: LD_EXP 15
10071: PPUSH
10072: LD_STRING D5a-Frank-1
10074: PPUSH
10075: CALL_OW 88
10079: GO 10135
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10081: LD_EXP 18
10085: PUSH
10086: LD_EXP 18
10090: PPUSH
10091: CALL_OW 255
10095: PUSH
10096: LD_INT 1
10098: EQUAL
10099: AND
10100: IFFALSE 10116
// Say ( Kikuchi , D5a-Yam-1 ) else
10102: LD_EXP 18
10106: PPUSH
10107: LD_STRING D5a-Yam-1
10109: PPUSH
10110: CALL_OW 88
10114: GO 10135
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10116: LD_INT 1
10118: PPUSH
10119: CALL 608 0 1
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_STRING D5a-Sol1-1
10130: PPUSH
10131: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10135: LD_EXP 9
10139: PPUSH
10140: LD_STRING D5a-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Cyrus then
10147: LD_EXP 13
10151: IFFALSE 10165
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10153: LD_EXP 13
10157: PPUSH
10158: LD_STRING D5a-Cyrus-1
10160: PPUSH
10161: CALL_OW 88
// x := false ;
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 0
10172: ST_TO_ADDR
// while ( true ) do
10173: LD_INT 1
10175: IFFALSE 10262
// begin wait ( 0 0$01 ) ;
10177: LD_INT 35
10179: PPUSH
10180: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10184: LD_ADDR_VAR 0 4
10188: PUSH
10189: LD_INT 2
10191: PUSH
10192: LD_INT 30
10194: PUSH
10195: LD_INT 0
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 30
10204: PUSH
10205: LD_INT 1
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: PPUSH
10217: CALL_OW 69
10221: PUSH
10222: LD_INT 1
10224: DIFF
10225: PUSH
10226: FOR_IN
10227: IFFALSE 10250
// if BaseNeedEnergy ( i ) then
10229: LD_VAR 0 4
10233: PPUSH
10234: CALL 1178 0 1
10238: IFFALSE 10248
// x := true ;
10240: LD_ADDR_VAR 0 2
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
10248: GO 10226
10250: POP
10251: POP
// if x then
10252: LD_VAR 0 2
10256: IFFALSE 10260
// break ;
10258: GO 10262
// end ;
10260: GO 10173
// Say ( JMM , D5b-JMM-1 ) ;
10262: LD_EXP 9
10266: PPUSH
10267: LD_STRING D5b-JMM-1
10269: PPUSH
10270: CALL_OW 88
// end ;
10274: PPOPN 4
10276: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10277: LD_EXP 5
10281: PUSH
10282: LD_INT 1
10284: ARRAY
10285: PUSH
10286: LD_OWVAR 1
10290: LESS
10291: PUSH
10292: LD_INT 22
10294: PUSH
10295: LD_INT 3
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 3
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 69
10320: PUSH
10321: LD_INT 10
10323: LESS
10324: OR
10325: IFFALSE 10525
10327: GO 10329
10329: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10330: LD_INT 16
10332: PPUSH
10333: CALL_OW 301
10337: NOT
10338: IFFALSE 10361
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10340: LD_EXP 19
10344: PPUSH
10345: LD_STRING D3b-Har-3
10347: PPUSH
10348: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10352: LD_STRING M2a
10354: PPUSH
10355: CALL_OW 337
// end else
10359: GO 10380
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10361: LD_EXP 19
10365: PPUSH
10366: LD_STRING D3b-Har-3a
10368: PPUSH
10369: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10373: LD_STRING M2
10375: PPUSH
10376: CALL_OW 337
// end ; can_end := true ;
10380: LD_ADDR_EXP 6
10384: PUSH
10385: LD_INT 1
10387: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10388: LD_INT 9
10390: PPUSH
10391: LD_INT 1
10393: PPUSH
10394: CALL_OW 424
// Wait ( 0 0$02 ) ;
10398: LD_INT 70
10400: PPUSH
10401: CALL_OW 67
// if Lisa then
10405: LD_EXP 14
10409: IFFALSE 10423
// Say ( Lisa , D3b-Lisa ) ;
10411: LD_EXP 14
10415: PPUSH
10416: LD_STRING D3b-Lisa
10418: PPUSH
10419: CALL_OW 88
// if Bobby then
10423: LD_EXP 12
10427: IFFALSE 10441
// Say ( Bobby , D3b-Bobby-3 ) ;
10429: LD_EXP 12
10433: PPUSH
10434: LD_STRING D3b-Bobby-3
10436: PPUSH
10437: CALL_OW 88
// if Cyrus then
10441: LD_EXP 13
10445: IFFALSE 10459
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10447: LD_EXP 13
10451: PPUSH
10452: LD_STRING D3b-Cyrus-3
10454: PPUSH
10455: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10459: LD_EXP 15
10463: PUSH
10464: LD_EXP 15
10468: PPUSH
10469: CALL_OW 255
10473: PUSH
10474: LD_INT 1
10476: EQUAL
10477: AND
10478: IFFALSE 10492
// Say ( Frank , D3b-Frank-3 ) ;
10480: LD_EXP 15
10484: PPUSH
10485: LD_STRING D3b-Frank-3
10487: PPUSH
10488: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10492: LD_EXP 18
10496: PUSH
10497: LD_EXP 18
10501: PPUSH
10502: CALL_OW 255
10506: PUSH
10507: LD_INT 1
10509: EQUAL
10510: AND
10511: IFFALSE 10525
// Say ( Kikuchi , D3b-Yam-4 ) ;
10513: LD_EXP 18
10517: PPUSH
10518: LD_STRING D3b-Yam-4
10520: PPUSH
10521: CALL_OW 88
// end ;
10525: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10526: LD_EXP 5
10530: PUSH
10531: LD_INT 2
10533: ARRAY
10534: PUSH
10535: LD_OWVAR 1
10539: LESS
10540: IFFALSE 10572
10542: GO 10544
10544: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10545: LD_EXP 19
10549: PPUSH
10550: LD_STRING D4-Har-1
10552: PPUSH
10553: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10557: LD_STRING M3
10559: PPUSH
10560: CALL_OW 337
// must_end := true ;
10564: LD_ADDR_EXP 7
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// end ;
10572: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10573: LD_EXP 5
10577: PUSH
10578: LD_INT 3
10580: ARRAY
10581: PUSH
10582: LD_OWVAR 1
10586: LESS
10587: IFFALSE 10618
10589: GO 10591
10591: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10592: LD_INT 16
10594: PPUSH
10595: CALL_OW 301
10599: NOT
10600: IFFALSE 10611
// YouLost ( TimeOut1 ) else
10602: LD_STRING TimeOut1
10604: PPUSH
10605: CALL_OW 104
10609: GO 10618
// YouLost ( TimeOut2 ) ;
10611: LD_STRING TimeOut2
10613: PPUSH
10614: CALL_OW 104
// end ;
10618: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10619: LD_EXP 9
10623: PPUSH
10624: LD_INT 9
10626: PPUSH
10627: CALL_OW 308
10631: PUSH
10632: LD_EXP 6
10636: AND
10637: IFFALSE 11798
10639: GO 10641
10641: DISABLE
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
10650: LD_INT 22
10652: PUSH
10653: LD_INT 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 23
10672: PUSH
10673: LD_INT 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 50
10682: PUSH
10683: EMPTY
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 69
10696: PPUSH
10697: CALL 35123 0 1
10701: PUSH
10702: LD_INT 5
10704: LESS
10705: IFFALSE 10716
// begin YouLost ( LostVictory ) ;
10707: LD_STRING LostVictory
10709: PPUSH
10710: CALL_OW 104
// exit ;
10714: GO 11798
// end ; wait_on := false ;
10716: LD_ADDR_VAR 0 1
10720: PUSH
10721: LD_INT 0
10723: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10724: LD_INT 1
10726: PPUSH
10727: CALL 1255 0 1
10731: PPUSH
10732: CALL 35123 0 1
10736: PUSH
10737: LD_INT 1
10739: PPUSH
10740: LD_INT 9
10742: PPUSH
10743: CALL 1346 0 2
10747: PUSH
10748: LD_INT 1
10750: PPUSH
10751: LD_INT 9
10753: PPUSH
10754: CALL 1393 0 2
10758: ADD
10759: PPUSH
10760: CALL 35123 0 1
10764: GREATER
10765: IFFALSE 10788
// if Query ( Q1 ) = 1 then
10767: LD_STRING Q1
10769: PPUSH
10770: CALL_OW 97
10774: PUSH
10775: LD_INT 1
10777: EQUAL
10778: IFFALSE 10788
// wait_on := true ;
10780: LD_ADDR_VAR 0 1
10784: PUSH
10785: LD_INT 1
10787: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10788: LD_INT 35
10790: PPUSH
10791: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10795: LD_INT 1
10797: PPUSH
10798: CALL 1255 0 1
10802: PPUSH
10803: CALL 35123 0 1
10807: PUSH
10808: LD_INT 1
10810: PPUSH
10811: LD_INT 9
10813: PPUSH
10814: CALL 1346 0 2
10818: PUSH
10819: LD_INT 1
10821: PPUSH
10822: LD_INT 9
10824: PPUSH
10825: CALL 1393 0 2
10829: UNION
10830: PPUSH
10831: CALL 35123 0 1
10835: EQUAL
10836: IFFALSE 10788
// DialogueOn ;
10838: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10842: LD_EXP 9
10846: PPUSH
10847: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10851: LD_EXP 9
10855: PPUSH
10856: LD_STRING D6-JMM-1
10858: PPUSH
10859: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10863: LD_EXP 19
10867: PPUSH
10868: LD_STRING D6-Har-1
10870: PPUSH
10871: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10875: LD_EXP 9
10879: PPUSH
10880: LD_STRING D6-JMM-2
10882: PPUSH
10883: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10887: LD_EXP 19
10891: PPUSH
10892: LD_STRING D6-Har-2
10894: PPUSH
10895: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10899: LD_EXP 9
10903: PPUSH
10904: LD_STRING D6-JMM-3
10906: PPUSH
10907: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10911: LD_EXP 19
10915: PPUSH
10916: LD_STRING D6-Har-3
10918: PPUSH
10919: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10923: LD_EXP 9
10927: PPUSH
10928: LD_STRING D6-JMM-4
10930: PPUSH
10931: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10935: LD_EXP 19
10939: PPUSH
10940: LD_STRING D6-Har-4
10942: PPUSH
10943: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10947: LD_EXP 9
10951: PPUSH
10952: LD_STRING D6-JMM-5
10954: PPUSH
10955: CALL_OW 88
// DialogueOff ;
10959: CALL_OW 7
// m1 := false ;
10963: LD_ADDR_VAR 0 4
10967: PUSH
10968: LD_INT 0
10970: ST_TO_ADDR
// m2 := false ;
10971: LD_ADDR_VAR 0 5
10975: PUSH
10976: LD_INT 0
10978: ST_TO_ADDR
// m3 := false ;
10979: LD_ADDR_VAR 0 6
10983: PUSH
10984: LD_INT 0
10986: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10987: LD_ADDR_VAR 0 3
10991: PUSH
10992: LD_INT 3
10994: PPUSH
10995: CALL 1524 0 1
10999: ST_TO_ADDR
// if tmp >= 35 then
11000: LD_VAR 0 3
11004: PUSH
11005: LD_INT 35
11007: GREATEREQUAL
11008: IFFALSE 11045
// begin AddMedal ( Destroy1 , - 1 ) ;
11010: LD_STRING Destroy1
11012: PPUSH
11013: LD_INT 1
11015: NEG
11016: PPUSH
11017: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
11021: LD_STRING Destroy2
11023: PPUSH
11024: LD_INT 1
11026: NEG
11027: PPUSH
11028: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11032: LD_STRING Destroy3
11034: PPUSH
11035: LD_INT 1
11037: NEG
11038: PPUSH
11039: CALL_OW 101
// end else
11043: GO 11156
// begin AddMedal ( Destroy1 , 1 ) ;
11045: LD_STRING Destroy1
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: CALL_OW 101
// m1 := true ;
11055: LD_ADDR_VAR 0 4
11059: PUSH
11060: LD_INT 1
11062: ST_TO_ADDR
// if tmp >= 25 then
11063: LD_VAR 0 3
11067: PUSH
11068: LD_INT 25
11070: GREATEREQUAL
11071: IFFALSE 11097
// begin AddMedal ( Destroy2 , - 1 ) ;
11073: LD_STRING Destroy2
11075: PPUSH
11076: LD_INT 1
11078: NEG
11079: PPUSH
11080: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11084: LD_STRING Destroy3
11086: PPUSH
11087: LD_INT 1
11089: NEG
11090: PPUSH
11091: CALL_OW 101
// end else
11095: GO 11156
// begin AddMedal ( Destroy2 , 1 ) ;
11097: LD_STRING Destroy2
11099: PPUSH
11100: LD_INT 1
11102: PPUSH
11103: CALL_OW 101
// m2 := true ;
11107: LD_ADDR_VAR 0 5
11111: PUSH
11112: LD_INT 1
11114: ST_TO_ADDR
// if tmp >= 15 then
11115: LD_VAR 0 3
11119: PUSH
11120: LD_INT 15
11122: GREATEREQUAL
11123: IFFALSE 11138
// AddMedal ( Destroy3 , - 1 ) else
11125: LD_STRING Destroy3
11127: PPUSH
11128: LD_INT 1
11130: NEG
11131: PPUSH
11132: CALL_OW 101
11136: GO 11156
// begin AddMedal ( Destroy3 , 1 ) ;
11138: LD_STRING Destroy3
11140: PPUSH
11141: LD_INT 1
11143: PPUSH
11144: CALL_OW 101
// m3 := true ;
11148: LD_ADDR_VAR 0 6
11152: PUSH
11153: LD_INT 1
11155: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11156: LD_OWVAR 1
11160: PUSH
11161: LD_INT 67200
11163: LESSEQUAL
11164: IFFALSE 11173
// SetAchievement ( ACH_ASPEED_7 ) ;
11166: LD_STRING ACH_ASPEED_7
11168: PPUSH
11169: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11173: LD_VAR 0 4
11177: PUSH
11178: LD_VAR 0 5
11182: AND
11183: PUSH
11184: LD_VAR 0 6
11188: AND
11189: PUSH
11190: LD_OWVAR 67
11194: PUSH
11195: LD_INT 3
11197: GREATEREQUAL
11198: AND
11199: IFFALSE 11211
// SetAchievementEX ( ACH_AMER , 7 ) ;
11201: LD_STRING ACH_AMER
11203: PPUSH
11204: LD_INT 7
11206: PPUSH
11207: CALL_OW 564
// GiveMedals ( MAIN ) ;
11211: LD_STRING MAIN
11213: PPUSH
11214: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11218: LD_ADDR_VAR 0 3
11222: PUSH
11223: LD_INT 22
11225: PUSH
11226: LD_INT 1
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 23
11235: PUSH
11236: LD_INT 1
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PPUSH
11247: CALL_OW 69
11251: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11252: LD_VAR 0 3
11256: PPUSH
11257: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11261: LD_EXP 9
11265: PPUSH
11266: LD_EXP 3
11270: PUSH
11271: LD_STRING JMM
11273: STR
11274: PPUSH
11275: CALL_OW 38
// if Brown in tmp then
11279: LD_EXP 10
11283: PUSH
11284: LD_VAR 0 3
11288: IN
11289: IFFALSE 11309
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11291: LD_EXP 10
11295: PPUSH
11296: LD_EXP 3
11300: PUSH
11301: LD_STRING Brown
11303: STR
11304: PPUSH
11305: CALL_OW 38
// if Donaldson in tmp then
11309: LD_EXP 11
11313: PUSH
11314: LD_VAR 0 3
11318: IN
11319: IFFALSE 11339
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11321: LD_EXP 11
11325: PPUSH
11326: LD_EXP 3
11330: PUSH
11331: LD_STRING Donaldson
11333: STR
11334: PPUSH
11335: CALL_OW 38
// if Bobby in tmp then
11339: LD_EXP 12
11343: PUSH
11344: LD_VAR 0 3
11348: IN
11349: IFFALSE 11369
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11351: LD_EXP 12
11355: PPUSH
11356: LD_EXP 3
11360: PUSH
11361: LD_STRING Bobby
11363: STR
11364: PPUSH
11365: CALL_OW 38
// if Cyrus in tmp then
11369: LD_EXP 13
11373: PUSH
11374: LD_VAR 0 3
11378: IN
11379: IFFALSE 11399
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11381: LD_EXP 13
11385: PPUSH
11386: LD_EXP 3
11390: PUSH
11391: LD_STRING Cyrus
11393: STR
11394: PPUSH
11395: CALL_OW 38
// if Lisa in tmp then
11399: LD_EXP 14
11403: PUSH
11404: LD_VAR 0 3
11408: IN
11409: IFFALSE 11429
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11411: LD_EXP 14
11415: PPUSH
11416: LD_EXP 3
11420: PUSH
11421: LD_STRING Lisa
11423: STR
11424: PPUSH
11425: CALL_OW 38
// if Frank in tmp then
11429: LD_EXP 15
11433: PUSH
11434: LD_VAR 0 3
11438: IN
11439: IFFALSE 11459
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11441: LD_EXP 15
11445: PPUSH
11446: LD_EXP 3
11450: PUSH
11451: LD_STRING Frank
11453: STR
11454: PPUSH
11455: CALL_OW 38
// if Gladstone in tmp then
11459: LD_EXP 16
11463: PUSH
11464: LD_VAR 0 3
11468: IN
11469: IFFALSE 11489
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11471: LD_EXP 16
11475: PPUSH
11476: LD_EXP 3
11480: PUSH
11481: LD_STRING Gladstone
11483: STR
11484: PPUSH
11485: CALL_OW 38
// if Khatam in tmp then
11489: LD_EXP 17
11493: PUSH
11494: LD_VAR 0 3
11498: IN
11499: IFFALSE 11519
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11501: LD_EXP 17
11505: PPUSH
11506: LD_EXP 3
11510: PUSH
11511: LD_STRING Khatam
11513: STR
11514: PPUSH
11515: CALL_OW 38
// if Kikuchi in tmp then
11519: LD_EXP 18
11523: PUSH
11524: LD_VAR 0 3
11528: IN
11529: IFFALSE 11556
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
11531: LD_STRING enableBioCharacter(BIO_YAMO)
11533: PPUSH
11534: CALL_OW 559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11538: LD_EXP 18
11542: PPUSH
11543: LD_EXP 3
11547: PUSH
11548: LD_STRING Kikuchi
11550: STR
11551: PPUSH
11552: CALL_OW 38
// end ; SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11556: LD_VAR 0 3
11560: PUSH
11561: LD_EXP 9
11565: PUSH
11566: LD_EXP 10
11570: PUSH
11571: LD_EXP 11
11575: PUSH
11576: LD_EXP 12
11580: PUSH
11581: LD_EXP 13
11585: PUSH
11586: LD_EXP 14
11590: PUSH
11591: LD_EXP 15
11595: PUSH
11596: LD_EXP 16
11600: PUSH
11601: LD_EXP 18
11605: PUSH
11606: LD_EXP 17
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: DIFF
11623: PPUSH
11624: LD_EXP 3
11628: PUSH
11629: LD_STRING others
11631: STR
11632: PPUSH
11633: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11637: LD_OWVAR 1
11641: PPUSH
11642: LD_STRING 07_time
11644: PPUSH
11645: CALL_OW 39
// tmp := [ ] ;
11649: LD_ADDR_VAR 0 3
11653: PUSH
11654: EMPTY
11655: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ] ) do
11656: LD_ADDR_VAR 0 2
11660: PUSH
11661: LD_INT 9
11663: PPUSH
11664: LD_INT 22
11666: PUSH
11667: LD_INT 1
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 23
11676: PUSH
11677: LD_INT 1
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 21
11686: PUSH
11687: LD_INT 2
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 50
11696: PUSH
11697: EMPTY
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: PPUSH
11709: CALL_OW 70
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11780
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11717: LD_ADDR_VAR 0 3
11721: PUSH
11722: LD_VAR 0 3
11726: PPUSH
11727: LD_VAR 0 2
11731: PPUSH
11732: CALL_OW 265
11736: PUSH
11737: LD_VAR 0 2
11741: PPUSH
11742: CALL_OW 262
11746: PUSH
11747: LD_VAR 0 2
11751: PPUSH
11752: CALL_OW 263
11756: PUSH
11757: LD_VAR 0 2
11761: PPUSH
11762: CALL_OW 264
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL 70712 0 2
11777: ST_TO_ADDR
11778: GO 11714
11780: POP
11781: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11782: LD_VAR 0 3
11786: PPUSH
11787: LD_STRING 07_vehicles
11789: PPUSH
11790: CALL_OW 39
// YouWin ;
11794: CALL_OW 103
// end ; end_of_file
11798: PPOPN 6
11800: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11801: LD_VAR 0 1
11805: PPUSH
11806: CALL 28127 0 1
// if un = JMM then
11810: LD_VAR 0 1
11814: PUSH
11815: LD_EXP 9
11819: EQUAL
11820: IFFALSE 11829
// YouLost ( JMM ) ;
11822: LD_STRING JMM
11824: PPUSH
11825: CALL_OW 104
// if GetType ( un ) = unit_building then
11829: LD_VAR 0 1
11833: PPUSH
11834: CALL_OW 247
11838: PUSH
11839: LD_INT 3
11841: EQUAL
11842: IFFALSE 11858
// buildings_counter := buildings_counter + 1 ;
11844: LD_ADDR_EXP 4
11848: PUSH
11849: LD_EXP 4
11853: PUSH
11854: LD_INT 1
11856: PLUS
11857: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11858: LD_VAR 0 1
11862: PUSH
11863: LD_INT 6
11865: PPUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 30
11871: PUSH
11872: LD_INT 33
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 30
11881: PUSH
11882: LD_INT 32
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 70
11898: IN
11899: IFFALSE 11958
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11901: LD_ADDR_EXP 20
11905: PUSH
11906: LD_EXP 20
11910: PUSH
11911: LD_VAR 0 1
11915: PPUSH
11916: CALL_OW 266
11920: PUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 250
11930: PUSH
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 251
11940: PUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 254
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: ADD
11957: ST_TO_ADDR
// if un = ru_dep_main then
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 16
11965: EQUAL
11966: IFFALSE 11975
// ChangeMissionObjectives ( M1a ) ;
11968: LD_STRING M1a
11970: PPUSH
11971: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11975: LD_VAR 0 1
11979: PPUSH
11980: CALL_OW 247
11984: PUSH
11985: LD_INT 1
11987: EQUAL
11988: PUSH
11989: LD_VAR 0 1
11993: PPUSH
11994: CALL_OW 255
11998: PUSH
11999: LD_INT 3
12001: EQUAL
12002: AND
12003: IFFALSE 12019
// kill_counter := kill_counter + 1 ;
12005: LD_ADDR_EXP 8
12009: PUSH
12010: LD_EXP 8
12014: PUSH
12015: LD_INT 1
12017: PLUS
12018: ST_TO_ADDR
// end ;
12019: PPOPN 1
12021: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
12022: LD_VAR 0 1
12026: PPUSH
12027: LD_VAR 0 2
12031: PPUSH
12032: CALL 28247 0 2
// end ;
12036: PPOPN 2
12038: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
12039: LD_VAR 0 1
12043: PPUSH
12044: CALL_OW 266
12048: PUSH
12049: LD_INT 32
12051: EQUAL
12052: PUSH
12053: LD_VAR 0 1
12057: PPUSH
12058: CALL_OW 110
12062: PUSH
12063: LD_INT 7
12065: EQUAL
12066: AND
12067: IFFALSE 12081
// SetTag ( un , 0 ) ;
12069: LD_VAR 0 1
12073: PPUSH
12074: LD_INT 0
12076: PPUSH
12077: CALL_OW 109
// end ;
12081: PPOPN 1
12083: END
// on BuildingStarted ( b , builder ) do var i ;
12084: LD_INT 0
12086: PPUSH
// begin if GetSide ( b ) = 3 then
12087: LD_VAR 0 1
12091: PPUSH
12092: CALL_OW 255
12096: PUSH
12097: LD_INT 3
12099: EQUAL
12100: IFFALSE 12140
// for i = 1 to 4 do
12102: LD_ADDR_VAR 0 3
12106: PUSH
12107: DOUBLE
12108: LD_INT 1
12110: DEC
12111: ST_TO_ADDR
12112: LD_INT 4
12114: PUSH
12115: FOR_TO
12116: IFFALSE 12138
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12118: LD_ADDR_EXP 20
12122: PUSH
12123: LD_EXP 20
12127: PPUSH
12128: LD_INT 1
12130: PPUSH
12131: CALL_OW 3
12135: ST_TO_ADDR
12136: GO 12115
12138: POP
12139: POP
// end ;
12140: PPOPN 3
12142: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12143: LD_VAR 0 1
12147: PPUSH
12148: CALL_OW 266
12152: PUSH
12153: LD_INT 32
12155: PUSH
12156: LD_INT 33
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: IN
12163: IFFALSE 12177
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12165: LD_VAR 0 1
12169: PPUSH
12170: LD_INT 43
12172: PPUSH
12173: CALL_OW 148
12177: PPOPN 1
12179: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12180: LD_VAR 0 1
12184: PUSH
12185: LD_INT 22
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 2
12197: PUSH
12198: LD_INT 30
12200: PUSH
12201: LD_INT 31
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 30
12210: PUSH
12211: LD_INT 32
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: IN
12232: IFFALSE 12254
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12234: LD_VAR 0 2
12238: PPUSH
12239: LD_VAR 0 1
12243: PPUSH
12244: LD_INT 134
12246: PPUSH
12247: LD_INT 136
12249: PPUSH
12250: CALL 838 0 4
// end ;
12254: PPOPN 2
12256: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12257: LD_VAR 0 1
12261: PUSH
12262: LD_INT 22
12264: PUSH
12265: LD_INT 3
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 30
12274: PUSH
12275: LD_INT 32
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PPUSH
12286: CALL_OW 69
12290: IN
12291: IFFALSE 12305
// SetTag ( b , 0 ) ;
12293: LD_VAR 0 1
12297: PPUSH
12298: LD_INT 0
12300: PPUSH
12301: CALL_OW 109
// end ; end_of_file end_of_file
12305: PPOPN 2
12307: END
// export globalGameSaveCounter ; every 0 0$1 do
12308: GO 12310
12310: DISABLE
// begin enable ;
12311: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12312: LD_STRING updateTimer(
12314: PUSH
12315: LD_OWVAR 1
12319: STR
12320: PUSH
12321: LD_STRING );
12323: STR
12324: PPUSH
12325: CALL_OW 559
// end ;
12329: END
// every 0 0$1 do
12330: GO 12332
12332: DISABLE
// begin globalGameSaveCounter := 0 ;
12333: LD_ADDR_EXP 21
12337: PUSH
12338: LD_INT 0
12340: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12341: LD_STRING setGameSaveCounter(0)
12343: PPUSH
12344: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12348: LD_STRING initStreamRollete();
12350: PPUSH
12351: CALL_OW 559
// InitStreamMode ;
12355: CALL 13698 0 0
// DefineStreamItems ( false ) ;
12359: LD_INT 0
12361: PPUSH
12362: CALL 14162 0 1
// end ;
12366: END
// export function SOS_MapStart ( ) ; begin
12367: LD_INT 0
12369: PPUSH
// if streamModeActive then
12370: LD_EXP 22
12374: IFFALSE 12383
// DefineStreamItems ( true ) ;
12376: LD_INT 1
12378: PPUSH
12379: CALL 14162 0 1
// UpdateLuaVariables ( ) ;
12383: CALL 12400 0 0
// UpdateFactoryWaypoints ( ) ;
12387: CALL 27031 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12391: CALL 27288 0 0
// end ;
12395: LD_VAR 0 1
12399: RET
// function UpdateLuaVariables ( ) ; begin
12400: LD_INT 0
12402: PPUSH
// if globalGameSaveCounter then
12403: LD_EXP 21
12407: IFFALSE 12441
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12409: LD_ADDR_EXP 21
12413: PUSH
12414: LD_EXP 21
12418: PPUSH
12419: CALL 72073 0 1
12423: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12424: LD_STRING setGameSaveCounter(
12426: PUSH
12427: LD_EXP 21
12431: STR
12432: PUSH
12433: LD_STRING )
12435: STR
12436: PPUSH
12437: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12441: LD_STRING setGameDifficulty(
12443: PUSH
12444: LD_OWVAR 67
12448: STR
12449: PUSH
12450: LD_STRING )
12452: STR
12453: PPUSH
12454: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
12458: LD_STRING displayDifficulty(
12460: PUSH
12461: LD_OWVAR 67
12465: STR
12466: PUSH
12467: LD_STRING )
12469: STR
12470: PPUSH
12471: CALL_OW 559
// end ;
12475: LD_VAR 0 1
12479: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12480: LD_INT 0
12482: PPUSH
// if p2 = stream_mode then
12483: LD_VAR 0 2
12487: PUSH
12488: LD_INT 100
12490: EQUAL
12491: IFFALSE 13494
// begin if not StreamModeActive then
12493: LD_EXP 22
12497: NOT
12498: IFFALSE 12508
// StreamModeActive := true ;
12500: LD_ADDR_EXP 22
12504: PUSH
12505: LD_INT 1
12507: ST_TO_ADDR
// if p3 = 0 then
12508: LD_VAR 0 3
12512: PUSH
12513: LD_INT 0
12515: EQUAL
12516: IFFALSE 12522
// InitStreamMode ;
12518: CALL 13698 0 0
// if p3 = 1 then
12522: LD_VAR 0 3
12526: PUSH
12527: LD_INT 1
12529: EQUAL
12530: IFFALSE 12540
// sRocket := true ;
12532: LD_ADDR_EXP 27
12536: PUSH
12537: LD_INT 1
12539: ST_TO_ADDR
// if p3 = 2 then
12540: LD_VAR 0 3
12544: PUSH
12545: LD_INT 2
12547: EQUAL
12548: IFFALSE 12558
// sSpeed := true ;
12550: LD_ADDR_EXP 26
12554: PUSH
12555: LD_INT 1
12557: ST_TO_ADDR
// if p3 = 3 then
12558: LD_VAR 0 3
12562: PUSH
12563: LD_INT 3
12565: EQUAL
12566: IFFALSE 12576
// sEngine := true ;
12568: LD_ADDR_EXP 28
12572: PUSH
12573: LD_INT 1
12575: ST_TO_ADDR
// if p3 = 4 then
12576: LD_VAR 0 3
12580: PUSH
12581: LD_INT 4
12583: EQUAL
12584: IFFALSE 12594
// sSpec := true ;
12586: LD_ADDR_EXP 25
12590: PUSH
12591: LD_INT 1
12593: ST_TO_ADDR
// if p3 = 5 then
12594: LD_VAR 0 3
12598: PUSH
12599: LD_INT 5
12601: EQUAL
12602: IFFALSE 12612
// sLevel := true ;
12604: LD_ADDR_EXP 29
12608: PUSH
12609: LD_INT 1
12611: ST_TO_ADDR
// if p3 = 6 then
12612: LD_VAR 0 3
12616: PUSH
12617: LD_INT 6
12619: EQUAL
12620: IFFALSE 12630
// sArmoury := true ;
12622: LD_ADDR_EXP 30
12626: PUSH
12627: LD_INT 1
12629: ST_TO_ADDR
// if p3 = 7 then
12630: LD_VAR 0 3
12634: PUSH
12635: LD_INT 7
12637: EQUAL
12638: IFFALSE 12648
// sRadar := true ;
12640: LD_ADDR_EXP 31
12644: PUSH
12645: LD_INT 1
12647: ST_TO_ADDR
// if p3 = 8 then
12648: LD_VAR 0 3
12652: PUSH
12653: LD_INT 8
12655: EQUAL
12656: IFFALSE 12666
// sBunker := true ;
12658: LD_ADDR_EXP 32
12662: PUSH
12663: LD_INT 1
12665: ST_TO_ADDR
// if p3 = 9 then
12666: LD_VAR 0 3
12670: PUSH
12671: LD_INT 9
12673: EQUAL
12674: IFFALSE 12684
// sHack := true ;
12676: LD_ADDR_EXP 33
12680: PUSH
12681: LD_INT 1
12683: ST_TO_ADDR
// if p3 = 10 then
12684: LD_VAR 0 3
12688: PUSH
12689: LD_INT 10
12691: EQUAL
12692: IFFALSE 12702
// sFire := true ;
12694: LD_ADDR_EXP 34
12698: PUSH
12699: LD_INT 1
12701: ST_TO_ADDR
// if p3 = 11 then
12702: LD_VAR 0 3
12706: PUSH
12707: LD_INT 11
12709: EQUAL
12710: IFFALSE 12720
// sRefresh := true ;
12712: LD_ADDR_EXP 35
12716: PUSH
12717: LD_INT 1
12719: ST_TO_ADDR
// if p3 = 12 then
12720: LD_VAR 0 3
12724: PUSH
12725: LD_INT 12
12727: EQUAL
12728: IFFALSE 12738
// sExp := true ;
12730: LD_ADDR_EXP 36
12734: PUSH
12735: LD_INT 1
12737: ST_TO_ADDR
// if p3 = 13 then
12738: LD_VAR 0 3
12742: PUSH
12743: LD_INT 13
12745: EQUAL
12746: IFFALSE 12756
// sDepot := true ;
12748: LD_ADDR_EXP 37
12752: PUSH
12753: LD_INT 1
12755: ST_TO_ADDR
// if p3 = 14 then
12756: LD_VAR 0 3
12760: PUSH
12761: LD_INT 14
12763: EQUAL
12764: IFFALSE 12774
// sFlag := true ;
12766: LD_ADDR_EXP 38
12770: PUSH
12771: LD_INT 1
12773: ST_TO_ADDR
// if p3 = 15 then
12774: LD_VAR 0 3
12778: PUSH
12779: LD_INT 15
12781: EQUAL
12782: IFFALSE 12792
// sKamikadze := true ;
12784: LD_ADDR_EXP 46
12788: PUSH
12789: LD_INT 1
12791: ST_TO_ADDR
// if p3 = 16 then
12792: LD_VAR 0 3
12796: PUSH
12797: LD_INT 16
12799: EQUAL
12800: IFFALSE 12810
// sTroll := true ;
12802: LD_ADDR_EXP 47
12806: PUSH
12807: LD_INT 1
12809: ST_TO_ADDR
// if p3 = 17 then
12810: LD_VAR 0 3
12814: PUSH
12815: LD_INT 17
12817: EQUAL
12818: IFFALSE 12828
// sSlow := true ;
12820: LD_ADDR_EXP 48
12824: PUSH
12825: LD_INT 1
12827: ST_TO_ADDR
// if p3 = 18 then
12828: LD_VAR 0 3
12832: PUSH
12833: LD_INT 18
12835: EQUAL
12836: IFFALSE 12846
// sLack := true ;
12838: LD_ADDR_EXP 49
12842: PUSH
12843: LD_INT 1
12845: ST_TO_ADDR
// if p3 = 19 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 19
12853: EQUAL
12854: IFFALSE 12864
// sTank := true ;
12856: LD_ADDR_EXP 51
12860: PUSH
12861: LD_INT 1
12863: ST_TO_ADDR
// if p3 = 20 then
12864: LD_VAR 0 3
12868: PUSH
12869: LD_INT 20
12871: EQUAL
12872: IFFALSE 12882
// sRemote := true ;
12874: LD_ADDR_EXP 52
12878: PUSH
12879: LD_INT 1
12881: ST_TO_ADDR
// if p3 = 21 then
12882: LD_VAR 0 3
12886: PUSH
12887: LD_INT 21
12889: EQUAL
12890: IFFALSE 12900
// sPowell := true ;
12892: LD_ADDR_EXP 53
12896: PUSH
12897: LD_INT 1
12899: ST_TO_ADDR
// if p3 = 22 then
12900: LD_VAR 0 3
12904: PUSH
12905: LD_INT 22
12907: EQUAL
12908: IFFALSE 12918
// sTeleport := true ;
12910: LD_ADDR_EXP 56
12914: PUSH
12915: LD_INT 1
12917: ST_TO_ADDR
// if p3 = 23 then
12918: LD_VAR 0 3
12922: PUSH
12923: LD_INT 23
12925: EQUAL
12926: IFFALSE 12936
// sOilTower := true ;
12928: LD_ADDR_EXP 58
12932: PUSH
12933: LD_INT 1
12935: ST_TO_ADDR
// if p3 = 24 then
12936: LD_VAR 0 3
12940: PUSH
12941: LD_INT 24
12943: EQUAL
12944: IFFALSE 12954
// sShovel := true ;
12946: LD_ADDR_EXP 59
12950: PUSH
12951: LD_INT 1
12953: ST_TO_ADDR
// if p3 = 25 then
12954: LD_VAR 0 3
12958: PUSH
12959: LD_INT 25
12961: EQUAL
12962: IFFALSE 12972
// sSheik := true ;
12964: LD_ADDR_EXP 60
12968: PUSH
12969: LD_INT 1
12971: ST_TO_ADDR
// if p3 = 26 then
12972: LD_VAR 0 3
12976: PUSH
12977: LD_INT 26
12979: EQUAL
12980: IFFALSE 12990
// sEarthquake := true ;
12982: LD_ADDR_EXP 62
12986: PUSH
12987: LD_INT 1
12989: ST_TO_ADDR
// if p3 = 27 then
12990: LD_VAR 0 3
12994: PUSH
12995: LD_INT 27
12997: EQUAL
12998: IFFALSE 13008
// sAI := true ;
13000: LD_ADDR_EXP 63
13004: PUSH
13005: LD_INT 1
13007: ST_TO_ADDR
// if p3 = 28 then
13008: LD_VAR 0 3
13012: PUSH
13013: LD_INT 28
13015: EQUAL
13016: IFFALSE 13026
// sCargo := true ;
13018: LD_ADDR_EXP 66
13022: PUSH
13023: LD_INT 1
13025: ST_TO_ADDR
// if p3 = 29 then
13026: LD_VAR 0 3
13030: PUSH
13031: LD_INT 29
13033: EQUAL
13034: IFFALSE 13044
// sDLaser := true ;
13036: LD_ADDR_EXP 67
13040: PUSH
13041: LD_INT 1
13043: ST_TO_ADDR
// if p3 = 30 then
13044: LD_VAR 0 3
13048: PUSH
13049: LD_INT 30
13051: EQUAL
13052: IFFALSE 13062
// sExchange := true ;
13054: LD_ADDR_EXP 68
13058: PUSH
13059: LD_INT 1
13061: ST_TO_ADDR
// if p3 = 31 then
13062: LD_VAR 0 3
13066: PUSH
13067: LD_INT 31
13069: EQUAL
13070: IFFALSE 13080
// sFac := true ;
13072: LD_ADDR_EXP 69
13076: PUSH
13077: LD_INT 1
13079: ST_TO_ADDR
// if p3 = 32 then
13080: LD_VAR 0 3
13084: PUSH
13085: LD_INT 32
13087: EQUAL
13088: IFFALSE 13098
// sPower := true ;
13090: LD_ADDR_EXP 70
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// if p3 = 33 then
13098: LD_VAR 0 3
13102: PUSH
13103: LD_INT 33
13105: EQUAL
13106: IFFALSE 13116
// sRandom := true ;
13108: LD_ADDR_EXP 71
13112: PUSH
13113: LD_INT 1
13115: ST_TO_ADDR
// if p3 = 34 then
13116: LD_VAR 0 3
13120: PUSH
13121: LD_INT 34
13123: EQUAL
13124: IFFALSE 13134
// sShield := true ;
13126: LD_ADDR_EXP 72
13130: PUSH
13131: LD_INT 1
13133: ST_TO_ADDR
// if p3 = 35 then
13134: LD_VAR 0 3
13138: PUSH
13139: LD_INT 35
13141: EQUAL
13142: IFFALSE 13152
// sTime := true ;
13144: LD_ADDR_EXP 73
13148: PUSH
13149: LD_INT 1
13151: ST_TO_ADDR
// if p3 = 36 then
13152: LD_VAR 0 3
13156: PUSH
13157: LD_INT 36
13159: EQUAL
13160: IFFALSE 13170
// sTools := true ;
13162: LD_ADDR_EXP 74
13166: PUSH
13167: LD_INT 1
13169: ST_TO_ADDR
// if p3 = 101 then
13170: LD_VAR 0 3
13174: PUSH
13175: LD_INT 101
13177: EQUAL
13178: IFFALSE 13188
// sSold := true ;
13180: LD_ADDR_EXP 39
13184: PUSH
13185: LD_INT 1
13187: ST_TO_ADDR
// if p3 = 102 then
13188: LD_VAR 0 3
13192: PUSH
13193: LD_INT 102
13195: EQUAL
13196: IFFALSE 13206
// sDiff := true ;
13198: LD_ADDR_EXP 40
13202: PUSH
13203: LD_INT 1
13205: ST_TO_ADDR
// if p3 = 103 then
13206: LD_VAR 0 3
13210: PUSH
13211: LD_INT 103
13213: EQUAL
13214: IFFALSE 13224
// sFog := true ;
13216: LD_ADDR_EXP 43
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// if p3 = 104 then
13224: LD_VAR 0 3
13228: PUSH
13229: LD_INT 104
13231: EQUAL
13232: IFFALSE 13242
// sReset := true ;
13234: LD_ADDR_EXP 44
13238: PUSH
13239: LD_INT 1
13241: ST_TO_ADDR
// if p3 = 105 then
13242: LD_VAR 0 3
13246: PUSH
13247: LD_INT 105
13249: EQUAL
13250: IFFALSE 13260
// sSun := true ;
13252: LD_ADDR_EXP 45
13256: PUSH
13257: LD_INT 1
13259: ST_TO_ADDR
// if p3 = 106 then
13260: LD_VAR 0 3
13264: PUSH
13265: LD_INT 106
13267: EQUAL
13268: IFFALSE 13278
// sTiger := true ;
13270: LD_ADDR_EXP 41
13274: PUSH
13275: LD_INT 1
13277: ST_TO_ADDR
// if p3 = 107 then
13278: LD_VAR 0 3
13282: PUSH
13283: LD_INT 107
13285: EQUAL
13286: IFFALSE 13296
// sBomb := true ;
13288: LD_ADDR_EXP 42
13292: PUSH
13293: LD_INT 1
13295: ST_TO_ADDR
// if p3 = 108 then
13296: LD_VAR 0 3
13300: PUSH
13301: LD_INT 108
13303: EQUAL
13304: IFFALSE 13314
// sWound := true ;
13306: LD_ADDR_EXP 50
13310: PUSH
13311: LD_INT 1
13313: ST_TO_ADDR
// if p3 = 109 then
13314: LD_VAR 0 3
13318: PUSH
13319: LD_INT 109
13321: EQUAL
13322: IFFALSE 13332
// sBetray := true ;
13324: LD_ADDR_EXP 54
13328: PUSH
13329: LD_INT 1
13331: ST_TO_ADDR
// if p3 = 110 then
13332: LD_VAR 0 3
13336: PUSH
13337: LD_INT 110
13339: EQUAL
13340: IFFALSE 13350
// sContamin := true ;
13342: LD_ADDR_EXP 55
13346: PUSH
13347: LD_INT 1
13349: ST_TO_ADDR
// if p3 = 111 then
13350: LD_VAR 0 3
13354: PUSH
13355: LD_INT 111
13357: EQUAL
13358: IFFALSE 13368
// sOil := true ;
13360: LD_ADDR_EXP 57
13364: PUSH
13365: LD_INT 1
13367: ST_TO_ADDR
// if p3 = 112 then
13368: LD_VAR 0 3
13372: PUSH
13373: LD_INT 112
13375: EQUAL
13376: IFFALSE 13386
// sStu := true ;
13378: LD_ADDR_EXP 61
13382: PUSH
13383: LD_INT 1
13385: ST_TO_ADDR
// if p3 = 113 then
13386: LD_VAR 0 3
13390: PUSH
13391: LD_INT 113
13393: EQUAL
13394: IFFALSE 13404
// sBazooka := true ;
13396: LD_ADDR_EXP 64
13400: PUSH
13401: LD_INT 1
13403: ST_TO_ADDR
// if p3 = 114 then
13404: LD_VAR 0 3
13408: PUSH
13409: LD_INT 114
13411: EQUAL
13412: IFFALSE 13422
// sMortar := true ;
13414: LD_ADDR_EXP 65
13418: PUSH
13419: LD_INT 1
13421: ST_TO_ADDR
// if p3 = 115 then
13422: LD_VAR 0 3
13426: PUSH
13427: LD_INT 115
13429: EQUAL
13430: IFFALSE 13440
// sRanger := true ;
13432: LD_ADDR_EXP 75
13436: PUSH
13437: LD_INT 1
13439: ST_TO_ADDR
// if p3 = 116 then
13440: LD_VAR 0 3
13444: PUSH
13445: LD_INT 116
13447: EQUAL
13448: IFFALSE 13458
// sComputer := true ;
13450: LD_ADDR_EXP 76
13454: PUSH
13455: LD_INT 1
13457: ST_TO_ADDR
// if p3 = 117 then
13458: LD_VAR 0 3
13462: PUSH
13463: LD_INT 117
13465: EQUAL
13466: IFFALSE 13476
// s30 := true ;
13468: LD_ADDR_EXP 77
13472: PUSH
13473: LD_INT 1
13475: ST_TO_ADDR
// if p3 = 118 then
13476: LD_VAR 0 3
13480: PUSH
13481: LD_INT 118
13483: EQUAL
13484: IFFALSE 13494
// s60 := true ;
13486: LD_ADDR_EXP 78
13490: PUSH
13491: LD_INT 1
13493: ST_TO_ADDR
// end ; if p2 = hack_mode then
13494: LD_VAR 0 2
13498: PUSH
13499: LD_INT 101
13501: EQUAL
13502: IFFALSE 13630
// begin case p3 of 1 :
13504: LD_VAR 0 3
13508: PUSH
13509: LD_INT 1
13511: DOUBLE
13512: EQUAL
13513: IFTRUE 13517
13515: GO 13524
13517: POP
// hHackUnlimitedResources ; 2 :
13518: CALL 25777 0 0
13522: GO 13630
13524: LD_INT 2
13526: DOUBLE
13527: EQUAL
13528: IFTRUE 13532
13530: GO 13539
13532: POP
// hHackSetLevel10 ; 3 :
13533: CALL 25910 0 0
13537: GO 13630
13539: LD_INT 3
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 13554
13547: POP
// hHackSetLevel10YourUnits ; 4 :
13548: CALL 25995 0 0
13552: GO 13630
13554: LD_INT 4
13556: DOUBLE
13557: EQUAL
13558: IFTRUE 13562
13560: GO 13569
13562: POP
// hHackInvincible ; 5 :
13563: CALL 26443 0 0
13567: GO 13630
13569: LD_INT 5
13571: DOUBLE
13572: EQUAL
13573: IFTRUE 13577
13575: GO 13584
13577: POP
// hHackInvisible ; 6 :
13578: CALL 26554 0 0
13582: GO 13630
13584: LD_INT 6
13586: DOUBLE
13587: EQUAL
13588: IFTRUE 13592
13590: GO 13599
13592: POP
// hHackChangeYourSide ; 7 :
13593: CALL 26611 0 0
13597: GO 13630
13599: LD_INT 7
13601: DOUBLE
13602: EQUAL
13603: IFTRUE 13607
13605: GO 13614
13607: POP
// hHackChangeUnitSide ; 8 :
13608: CALL 26653 0 0
13612: GO 13630
13614: LD_INT 8
13616: DOUBLE
13617: EQUAL
13618: IFTRUE 13622
13620: GO 13629
13622: POP
// hHackFog ; end ;
13623: CALL 26754 0 0
13627: GO 13630
13629: POP
// end ; if p2 = game_save_mode then
13630: LD_VAR 0 2
13634: PUSH
13635: LD_INT 102
13637: EQUAL
13638: IFFALSE 13693
// begin if p3 = 1 then
13640: LD_VAR 0 3
13644: PUSH
13645: LD_INT 1
13647: EQUAL
13648: IFFALSE 13660
// globalGameSaveCounter := p4 ;
13650: LD_ADDR_EXP 21
13654: PUSH
13655: LD_VAR 0 4
13659: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13660: LD_VAR 0 3
13664: PUSH
13665: LD_INT 2
13667: EQUAL
13668: PUSH
13669: LD_EXP 21
13673: AND
13674: IFFALSE 13693
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13676: LD_STRING setGameSaveCounter(
13678: PUSH
13679: LD_EXP 21
13683: STR
13684: PUSH
13685: LD_STRING )
13687: STR
13688: PPUSH
13689: CALL_OW 559
// end ; end ;
13693: LD_VAR 0 7
13697: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13698: LD_INT 0
13700: PPUSH
// streamModeActive := false ;
13701: LD_ADDR_EXP 22
13705: PUSH
13706: LD_INT 0
13708: ST_TO_ADDR
// normalCounter := 36 ;
13709: LD_ADDR_EXP 23
13713: PUSH
13714: LD_INT 36
13716: ST_TO_ADDR
// hardcoreCounter := 18 ;
13717: LD_ADDR_EXP 24
13721: PUSH
13722: LD_INT 18
13724: ST_TO_ADDR
// sRocket := false ;
13725: LD_ADDR_EXP 27
13729: PUSH
13730: LD_INT 0
13732: ST_TO_ADDR
// sSpeed := false ;
13733: LD_ADDR_EXP 26
13737: PUSH
13738: LD_INT 0
13740: ST_TO_ADDR
// sEngine := false ;
13741: LD_ADDR_EXP 28
13745: PUSH
13746: LD_INT 0
13748: ST_TO_ADDR
// sSpec := false ;
13749: LD_ADDR_EXP 25
13753: PUSH
13754: LD_INT 0
13756: ST_TO_ADDR
// sLevel := false ;
13757: LD_ADDR_EXP 29
13761: PUSH
13762: LD_INT 0
13764: ST_TO_ADDR
// sArmoury := false ;
13765: LD_ADDR_EXP 30
13769: PUSH
13770: LD_INT 0
13772: ST_TO_ADDR
// sRadar := false ;
13773: LD_ADDR_EXP 31
13777: PUSH
13778: LD_INT 0
13780: ST_TO_ADDR
// sBunker := false ;
13781: LD_ADDR_EXP 32
13785: PUSH
13786: LD_INT 0
13788: ST_TO_ADDR
// sHack := false ;
13789: LD_ADDR_EXP 33
13793: PUSH
13794: LD_INT 0
13796: ST_TO_ADDR
// sFire := false ;
13797: LD_ADDR_EXP 34
13801: PUSH
13802: LD_INT 0
13804: ST_TO_ADDR
// sRefresh := false ;
13805: LD_ADDR_EXP 35
13809: PUSH
13810: LD_INT 0
13812: ST_TO_ADDR
// sExp := false ;
13813: LD_ADDR_EXP 36
13817: PUSH
13818: LD_INT 0
13820: ST_TO_ADDR
// sDepot := false ;
13821: LD_ADDR_EXP 37
13825: PUSH
13826: LD_INT 0
13828: ST_TO_ADDR
// sFlag := false ;
13829: LD_ADDR_EXP 38
13833: PUSH
13834: LD_INT 0
13836: ST_TO_ADDR
// sKamikadze := false ;
13837: LD_ADDR_EXP 46
13841: PUSH
13842: LD_INT 0
13844: ST_TO_ADDR
// sTroll := false ;
13845: LD_ADDR_EXP 47
13849: PUSH
13850: LD_INT 0
13852: ST_TO_ADDR
// sSlow := false ;
13853: LD_ADDR_EXP 48
13857: PUSH
13858: LD_INT 0
13860: ST_TO_ADDR
// sLack := false ;
13861: LD_ADDR_EXP 49
13865: PUSH
13866: LD_INT 0
13868: ST_TO_ADDR
// sTank := false ;
13869: LD_ADDR_EXP 51
13873: PUSH
13874: LD_INT 0
13876: ST_TO_ADDR
// sRemote := false ;
13877: LD_ADDR_EXP 52
13881: PUSH
13882: LD_INT 0
13884: ST_TO_ADDR
// sPowell := false ;
13885: LD_ADDR_EXP 53
13889: PUSH
13890: LD_INT 0
13892: ST_TO_ADDR
// sTeleport := false ;
13893: LD_ADDR_EXP 56
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// sOilTower := false ;
13901: LD_ADDR_EXP 58
13905: PUSH
13906: LD_INT 0
13908: ST_TO_ADDR
// sShovel := false ;
13909: LD_ADDR_EXP 59
13913: PUSH
13914: LD_INT 0
13916: ST_TO_ADDR
// sSheik := false ;
13917: LD_ADDR_EXP 60
13921: PUSH
13922: LD_INT 0
13924: ST_TO_ADDR
// sEarthquake := false ;
13925: LD_ADDR_EXP 62
13929: PUSH
13930: LD_INT 0
13932: ST_TO_ADDR
// sAI := false ;
13933: LD_ADDR_EXP 63
13937: PUSH
13938: LD_INT 0
13940: ST_TO_ADDR
// sCargo := false ;
13941: LD_ADDR_EXP 66
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// sDLaser := false ;
13949: LD_ADDR_EXP 67
13953: PUSH
13954: LD_INT 0
13956: ST_TO_ADDR
// sExchange := false ;
13957: LD_ADDR_EXP 68
13961: PUSH
13962: LD_INT 0
13964: ST_TO_ADDR
// sFac := false ;
13965: LD_ADDR_EXP 69
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// sPower := false ;
13973: LD_ADDR_EXP 70
13977: PUSH
13978: LD_INT 0
13980: ST_TO_ADDR
// sRandom := false ;
13981: LD_ADDR_EXP 71
13985: PUSH
13986: LD_INT 0
13988: ST_TO_ADDR
// sShield := false ;
13989: LD_ADDR_EXP 72
13993: PUSH
13994: LD_INT 0
13996: ST_TO_ADDR
// sTime := false ;
13997: LD_ADDR_EXP 73
14001: PUSH
14002: LD_INT 0
14004: ST_TO_ADDR
// sTools := false ;
14005: LD_ADDR_EXP 74
14009: PUSH
14010: LD_INT 0
14012: ST_TO_ADDR
// sSold := false ;
14013: LD_ADDR_EXP 39
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
// sDiff := false ;
14021: LD_ADDR_EXP 40
14025: PUSH
14026: LD_INT 0
14028: ST_TO_ADDR
// sFog := false ;
14029: LD_ADDR_EXP 43
14033: PUSH
14034: LD_INT 0
14036: ST_TO_ADDR
// sReset := false ;
14037: LD_ADDR_EXP 44
14041: PUSH
14042: LD_INT 0
14044: ST_TO_ADDR
// sSun := false ;
14045: LD_ADDR_EXP 45
14049: PUSH
14050: LD_INT 0
14052: ST_TO_ADDR
// sTiger := false ;
14053: LD_ADDR_EXP 41
14057: PUSH
14058: LD_INT 0
14060: ST_TO_ADDR
// sBomb := false ;
14061: LD_ADDR_EXP 42
14065: PUSH
14066: LD_INT 0
14068: ST_TO_ADDR
// sWound := false ;
14069: LD_ADDR_EXP 50
14073: PUSH
14074: LD_INT 0
14076: ST_TO_ADDR
// sBetray := false ;
14077: LD_ADDR_EXP 54
14081: PUSH
14082: LD_INT 0
14084: ST_TO_ADDR
// sContamin := false ;
14085: LD_ADDR_EXP 55
14089: PUSH
14090: LD_INT 0
14092: ST_TO_ADDR
// sOil := false ;
14093: LD_ADDR_EXP 57
14097: PUSH
14098: LD_INT 0
14100: ST_TO_ADDR
// sStu := false ;
14101: LD_ADDR_EXP 61
14105: PUSH
14106: LD_INT 0
14108: ST_TO_ADDR
// sBazooka := false ;
14109: LD_ADDR_EXP 64
14113: PUSH
14114: LD_INT 0
14116: ST_TO_ADDR
// sMortar := false ;
14117: LD_ADDR_EXP 65
14121: PUSH
14122: LD_INT 0
14124: ST_TO_ADDR
// sRanger := false ;
14125: LD_ADDR_EXP 75
14129: PUSH
14130: LD_INT 0
14132: ST_TO_ADDR
// sComputer := false ;
14133: LD_ADDR_EXP 76
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
// s30 := false ;
14141: LD_ADDR_EXP 77
14145: PUSH
14146: LD_INT 0
14148: ST_TO_ADDR
// s60 := false ;
14149: LD_ADDR_EXP 78
14153: PUSH
14154: LD_INT 0
14156: ST_TO_ADDR
// end ;
14157: LD_VAR 0 1
14161: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14162: LD_INT 0
14164: PPUSH
14165: PPUSH
14166: PPUSH
14167: PPUSH
14168: PPUSH
14169: PPUSH
14170: PPUSH
// result := [ ] ;
14171: LD_ADDR_VAR 0 2
14175: PUSH
14176: EMPTY
14177: ST_TO_ADDR
// if campaign_id = 1 then
14178: LD_OWVAR 69
14182: PUSH
14183: LD_INT 1
14185: EQUAL
14186: IFFALSE 17352
// begin case mission_number of 1 :
14188: LD_OWVAR 70
14192: PUSH
14193: LD_INT 1
14195: DOUBLE
14196: EQUAL
14197: IFTRUE 14201
14199: GO 14277
14201: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14202: LD_ADDR_VAR 0 2
14206: PUSH
14207: LD_INT 2
14209: PUSH
14210: LD_INT 4
14212: PUSH
14213: LD_INT 11
14215: PUSH
14216: LD_INT 12
14218: PUSH
14219: LD_INT 15
14221: PUSH
14222: LD_INT 16
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_INT 23
14230: PUSH
14231: LD_INT 26
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 101
14247: PUSH
14248: LD_INT 102
14250: PUSH
14251: LD_INT 106
14253: PUSH
14254: LD_INT 116
14256: PUSH
14257: LD_INT 117
14259: PUSH
14260: LD_INT 118
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: ST_TO_ADDR
14275: GO 17350
14277: LD_INT 2
14279: DOUBLE
14280: EQUAL
14281: IFTRUE 14285
14283: GO 14369
14285: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14286: LD_ADDR_VAR 0 2
14290: PUSH
14291: LD_INT 2
14293: PUSH
14294: LD_INT 4
14296: PUSH
14297: LD_INT 11
14299: PUSH
14300: LD_INT 12
14302: PUSH
14303: LD_INT 15
14305: PUSH
14306: LD_INT 16
14308: PUSH
14309: LD_INT 22
14311: PUSH
14312: LD_INT 23
14314: PUSH
14315: LD_INT 26
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 101
14331: PUSH
14332: LD_INT 102
14334: PUSH
14335: LD_INT 105
14337: PUSH
14338: LD_INT 106
14340: PUSH
14341: LD_INT 108
14343: PUSH
14344: LD_INT 116
14346: PUSH
14347: LD_INT 117
14349: PUSH
14350: LD_INT 118
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: ST_TO_ADDR
14367: GO 17350
14369: LD_INT 3
14371: DOUBLE
14372: EQUAL
14373: IFTRUE 14377
14375: GO 14465
14377: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14378: LD_ADDR_VAR 0 2
14382: PUSH
14383: LD_INT 2
14385: PUSH
14386: LD_INT 4
14388: PUSH
14389: LD_INT 5
14391: PUSH
14392: LD_INT 11
14394: PUSH
14395: LD_INT 12
14397: PUSH
14398: LD_INT 15
14400: PUSH
14401: LD_INT 16
14403: PUSH
14404: LD_INT 22
14406: PUSH
14407: LD_INT 26
14409: PUSH
14410: LD_INT 36
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 101
14427: PUSH
14428: LD_INT 102
14430: PUSH
14431: LD_INT 105
14433: PUSH
14434: LD_INT 106
14436: PUSH
14437: LD_INT 108
14439: PUSH
14440: LD_INT 116
14442: PUSH
14443: LD_INT 117
14445: PUSH
14446: LD_INT 118
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: ST_TO_ADDR
14463: GO 17350
14465: LD_INT 4
14467: DOUBLE
14468: EQUAL
14469: IFTRUE 14473
14471: GO 14569
14473: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14474: LD_ADDR_VAR 0 2
14478: PUSH
14479: LD_INT 2
14481: PUSH
14482: LD_INT 4
14484: PUSH
14485: LD_INT 5
14487: PUSH
14488: LD_INT 8
14490: PUSH
14491: LD_INT 11
14493: PUSH
14494: LD_INT 12
14496: PUSH
14497: LD_INT 15
14499: PUSH
14500: LD_INT 16
14502: PUSH
14503: LD_INT 22
14505: PUSH
14506: LD_INT 23
14508: PUSH
14509: LD_INT 26
14511: PUSH
14512: LD_INT 36
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 101
14531: PUSH
14532: LD_INT 102
14534: PUSH
14535: LD_INT 105
14537: PUSH
14538: LD_INT 106
14540: PUSH
14541: LD_INT 108
14543: PUSH
14544: LD_INT 116
14546: PUSH
14547: LD_INT 117
14549: PUSH
14550: LD_INT 118
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: ST_TO_ADDR
14567: GO 17350
14569: LD_INT 5
14571: DOUBLE
14572: EQUAL
14573: IFTRUE 14577
14575: GO 14689
14577: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14578: LD_ADDR_VAR 0 2
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 4
14588: PUSH
14589: LD_INT 5
14591: PUSH
14592: LD_INT 6
14594: PUSH
14595: LD_INT 8
14597: PUSH
14598: LD_INT 11
14600: PUSH
14601: LD_INT 12
14603: PUSH
14604: LD_INT 15
14606: PUSH
14607: LD_INT 16
14609: PUSH
14610: LD_INT 22
14612: PUSH
14613: LD_INT 23
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 26
14621: PUSH
14622: LD_INT 36
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 101
14643: PUSH
14644: LD_INT 102
14646: PUSH
14647: LD_INT 105
14649: PUSH
14650: LD_INT 106
14652: PUSH
14653: LD_INT 108
14655: PUSH
14656: LD_INT 109
14658: PUSH
14659: LD_INT 112
14661: PUSH
14662: LD_INT 116
14664: PUSH
14665: LD_INT 117
14667: PUSH
14668: LD_INT 118
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: ST_TO_ADDR
14687: GO 17350
14689: LD_INT 6
14691: DOUBLE
14692: EQUAL
14693: IFTRUE 14697
14695: GO 14829
14697: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14698: LD_ADDR_VAR 0 2
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 4
14708: PUSH
14709: LD_INT 5
14711: PUSH
14712: LD_INT 6
14714: PUSH
14715: LD_INT 8
14717: PUSH
14718: LD_INT 11
14720: PUSH
14721: LD_INT 12
14723: PUSH
14724: LD_INT 15
14726: PUSH
14727: LD_INT 16
14729: PUSH
14730: LD_INT 20
14732: PUSH
14733: LD_INT 21
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_INT 23
14741: PUSH
14742: LD_INT 25
14744: PUSH
14745: LD_INT 26
14747: PUSH
14748: LD_INT 30
14750: PUSH
14751: LD_INT 31
14753: PUSH
14754: LD_INT 32
14756: PUSH
14757: LD_INT 36
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 101
14783: PUSH
14784: LD_INT 102
14786: PUSH
14787: LD_INT 105
14789: PUSH
14790: LD_INT 106
14792: PUSH
14793: LD_INT 108
14795: PUSH
14796: LD_INT 109
14798: PUSH
14799: LD_INT 112
14801: PUSH
14802: LD_INT 116
14804: PUSH
14805: LD_INT 117
14807: PUSH
14808: LD_INT 118
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: ST_TO_ADDR
14827: GO 17350
14829: LD_INT 7
14831: DOUBLE
14832: EQUAL
14833: IFTRUE 14837
14835: GO 14949
14837: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14838: LD_ADDR_VAR 0 2
14842: PUSH
14843: LD_INT 2
14845: PUSH
14846: LD_INT 4
14848: PUSH
14849: LD_INT 5
14851: PUSH
14852: LD_INT 7
14854: PUSH
14855: LD_INT 11
14857: PUSH
14858: LD_INT 12
14860: PUSH
14861: LD_INT 15
14863: PUSH
14864: LD_INT 16
14866: PUSH
14867: LD_INT 20
14869: PUSH
14870: LD_INT 21
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_INT 23
14878: PUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 26
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 101
14903: PUSH
14904: LD_INT 102
14906: PUSH
14907: LD_INT 103
14909: PUSH
14910: LD_INT 105
14912: PUSH
14913: LD_INT 106
14915: PUSH
14916: LD_INT 108
14918: PUSH
14919: LD_INT 112
14921: PUSH
14922: LD_INT 116
14924: PUSH
14925: LD_INT 117
14927: PUSH
14928: LD_INT 118
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: ST_TO_ADDR
14947: GO 17350
14949: LD_INT 8
14951: DOUBLE
14952: EQUAL
14953: IFTRUE 14957
14955: GO 15097
14957: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14958: LD_ADDR_VAR 0 2
14962: PUSH
14963: LD_INT 2
14965: PUSH
14966: LD_INT 4
14968: PUSH
14969: LD_INT 5
14971: PUSH
14972: LD_INT 6
14974: PUSH
14975: LD_INT 7
14977: PUSH
14978: LD_INT 8
14980: PUSH
14981: LD_INT 11
14983: PUSH
14984: LD_INT 12
14986: PUSH
14987: LD_INT 15
14989: PUSH
14990: LD_INT 16
14992: PUSH
14993: LD_INT 20
14995: PUSH
14996: LD_INT 21
14998: PUSH
14999: LD_INT 22
15001: PUSH
15002: LD_INT 23
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 26
15010: PUSH
15011: LD_INT 30
15013: PUSH
15014: LD_INT 31
15016: PUSH
15017: LD_INT 32
15019: PUSH
15020: LD_INT 36
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 101
15047: PUSH
15048: LD_INT 102
15050: PUSH
15051: LD_INT 103
15053: PUSH
15054: LD_INT 105
15056: PUSH
15057: LD_INT 106
15059: PUSH
15060: LD_INT 108
15062: PUSH
15063: LD_INT 109
15065: PUSH
15066: LD_INT 112
15068: PUSH
15069: LD_INT 116
15071: PUSH
15072: LD_INT 117
15074: PUSH
15075: LD_INT 118
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: ST_TO_ADDR
15095: GO 17350
15097: LD_INT 9
15099: DOUBLE
15100: EQUAL
15101: IFTRUE 15105
15103: GO 15253
15105: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15106: LD_ADDR_VAR 0 2
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 4
15116: PUSH
15117: LD_INT 5
15119: PUSH
15120: LD_INT 6
15122: PUSH
15123: LD_INT 7
15125: PUSH
15126: LD_INT 8
15128: PUSH
15129: LD_INT 11
15131: PUSH
15132: LD_INT 12
15134: PUSH
15135: LD_INT 15
15137: PUSH
15138: LD_INT 16
15140: PUSH
15141: LD_INT 20
15143: PUSH
15144: LD_INT 21
15146: PUSH
15147: LD_INT 22
15149: PUSH
15150: LD_INT 23
15152: PUSH
15153: LD_INT 25
15155: PUSH
15156: LD_INT 26
15158: PUSH
15159: LD_INT 28
15161: PUSH
15162: LD_INT 30
15164: PUSH
15165: LD_INT 31
15167: PUSH
15168: LD_INT 32
15170: PUSH
15171: LD_INT 36
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 101
15199: PUSH
15200: LD_INT 102
15202: PUSH
15203: LD_INT 103
15205: PUSH
15206: LD_INT 105
15208: PUSH
15209: LD_INT 106
15211: PUSH
15212: LD_INT 108
15214: PUSH
15215: LD_INT 109
15217: PUSH
15218: LD_INT 112
15220: PUSH
15221: LD_INT 114
15223: PUSH
15224: LD_INT 116
15226: PUSH
15227: LD_INT 117
15229: PUSH
15230: LD_INT 118
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: ST_TO_ADDR
15251: GO 17350
15253: LD_INT 10
15255: DOUBLE
15256: EQUAL
15257: IFTRUE 15261
15259: GO 15457
15261: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 4
15272: PUSH
15273: LD_INT 5
15275: PUSH
15276: LD_INT 6
15278: PUSH
15279: LD_INT 7
15281: PUSH
15282: LD_INT 8
15284: PUSH
15285: LD_INT 9
15287: PUSH
15288: LD_INT 10
15290: PUSH
15291: LD_INT 11
15293: PUSH
15294: LD_INT 12
15296: PUSH
15297: LD_INT 13
15299: PUSH
15300: LD_INT 14
15302: PUSH
15303: LD_INT 15
15305: PUSH
15306: LD_INT 16
15308: PUSH
15309: LD_INT 17
15311: PUSH
15312: LD_INT 18
15314: PUSH
15315: LD_INT 19
15317: PUSH
15318: LD_INT 20
15320: PUSH
15321: LD_INT 21
15323: PUSH
15324: LD_INT 22
15326: PUSH
15327: LD_INT 23
15329: PUSH
15330: LD_INT 24
15332: PUSH
15333: LD_INT 25
15335: PUSH
15336: LD_INT 26
15338: PUSH
15339: LD_INT 28
15341: PUSH
15342: LD_INT 30
15344: PUSH
15345: LD_INT 31
15347: PUSH
15348: LD_INT 32
15350: PUSH
15351: LD_INT 36
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 101
15387: PUSH
15388: LD_INT 102
15390: PUSH
15391: LD_INT 103
15393: PUSH
15394: LD_INT 104
15396: PUSH
15397: LD_INT 105
15399: PUSH
15400: LD_INT 106
15402: PUSH
15403: LD_INT 107
15405: PUSH
15406: LD_INT 108
15408: PUSH
15409: LD_INT 109
15411: PUSH
15412: LD_INT 110
15414: PUSH
15415: LD_INT 111
15417: PUSH
15418: LD_INT 112
15420: PUSH
15421: LD_INT 114
15423: PUSH
15424: LD_INT 116
15426: PUSH
15427: LD_INT 117
15429: PUSH
15430: LD_INT 118
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: ST_TO_ADDR
15455: GO 17350
15457: LD_INT 11
15459: DOUBLE
15460: EQUAL
15461: IFTRUE 15465
15463: GO 15669
15465: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15466: LD_ADDR_VAR 0 2
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: LD_INT 4
15479: PUSH
15480: LD_INT 5
15482: PUSH
15483: LD_INT 6
15485: PUSH
15486: LD_INT 7
15488: PUSH
15489: LD_INT 8
15491: PUSH
15492: LD_INT 9
15494: PUSH
15495: LD_INT 10
15497: PUSH
15498: LD_INT 11
15500: PUSH
15501: LD_INT 12
15503: PUSH
15504: LD_INT 13
15506: PUSH
15507: LD_INT 14
15509: PUSH
15510: LD_INT 15
15512: PUSH
15513: LD_INT 16
15515: PUSH
15516: LD_INT 17
15518: PUSH
15519: LD_INT 18
15521: PUSH
15522: LD_INT 19
15524: PUSH
15525: LD_INT 20
15527: PUSH
15528: LD_INT 21
15530: PUSH
15531: LD_INT 22
15533: PUSH
15534: LD_INT 23
15536: PUSH
15537: LD_INT 24
15539: PUSH
15540: LD_INT 25
15542: PUSH
15543: LD_INT 26
15545: PUSH
15546: LD_INT 28
15548: PUSH
15549: LD_INT 30
15551: PUSH
15552: LD_INT 31
15554: PUSH
15555: LD_INT 32
15557: PUSH
15558: LD_INT 34
15560: PUSH
15561: LD_INT 36
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 101
15599: PUSH
15600: LD_INT 102
15602: PUSH
15603: LD_INT 103
15605: PUSH
15606: LD_INT 104
15608: PUSH
15609: LD_INT 105
15611: PUSH
15612: LD_INT 106
15614: PUSH
15615: LD_INT 107
15617: PUSH
15618: LD_INT 108
15620: PUSH
15621: LD_INT 109
15623: PUSH
15624: LD_INT 110
15626: PUSH
15627: LD_INT 111
15629: PUSH
15630: LD_INT 112
15632: PUSH
15633: LD_INT 114
15635: PUSH
15636: LD_INT 116
15638: PUSH
15639: LD_INT 117
15641: PUSH
15642: LD_INT 118
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: ST_TO_ADDR
15667: GO 17350
15669: LD_INT 12
15671: DOUBLE
15672: EQUAL
15673: IFTRUE 15677
15675: GO 15897
15677: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15678: LD_ADDR_VAR 0 2
15682: PUSH
15683: LD_INT 1
15685: PUSH
15686: LD_INT 2
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: LD_INT 4
15694: PUSH
15695: LD_INT 5
15697: PUSH
15698: LD_INT 6
15700: PUSH
15701: LD_INT 7
15703: PUSH
15704: LD_INT 8
15706: PUSH
15707: LD_INT 9
15709: PUSH
15710: LD_INT 10
15712: PUSH
15713: LD_INT 11
15715: PUSH
15716: LD_INT 12
15718: PUSH
15719: LD_INT 13
15721: PUSH
15722: LD_INT 14
15724: PUSH
15725: LD_INT 15
15727: PUSH
15728: LD_INT 16
15730: PUSH
15731: LD_INT 17
15733: PUSH
15734: LD_INT 18
15736: PUSH
15737: LD_INT 19
15739: PUSH
15740: LD_INT 20
15742: PUSH
15743: LD_INT 21
15745: PUSH
15746: LD_INT 22
15748: PUSH
15749: LD_INT 23
15751: PUSH
15752: LD_INT 24
15754: PUSH
15755: LD_INT 25
15757: PUSH
15758: LD_INT 26
15760: PUSH
15761: LD_INT 27
15763: PUSH
15764: LD_INT 28
15766: PUSH
15767: LD_INT 30
15769: PUSH
15770: LD_INT 31
15772: PUSH
15773: LD_INT 32
15775: PUSH
15776: LD_INT 33
15778: PUSH
15779: LD_INT 34
15781: PUSH
15782: LD_INT 36
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 101
15823: PUSH
15824: LD_INT 102
15826: PUSH
15827: LD_INT 103
15829: PUSH
15830: LD_INT 104
15832: PUSH
15833: LD_INT 105
15835: PUSH
15836: LD_INT 106
15838: PUSH
15839: LD_INT 107
15841: PUSH
15842: LD_INT 108
15844: PUSH
15845: LD_INT 109
15847: PUSH
15848: LD_INT 110
15850: PUSH
15851: LD_INT 111
15853: PUSH
15854: LD_INT 112
15856: PUSH
15857: LD_INT 113
15859: PUSH
15860: LD_INT 114
15862: PUSH
15863: LD_INT 116
15865: PUSH
15866: LD_INT 117
15868: PUSH
15869: LD_INT 118
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: ST_TO_ADDR
15895: GO 17350
15897: LD_INT 13
15899: DOUBLE
15900: EQUAL
15901: IFTRUE 15905
15903: GO 16113
15905: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: LD_INT 2
15916: PUSH
15917: LD_INT 3
15919: PUSH
15920: LD_INT 4
15922: PUSH
15923: LD_INT 5
15925: PUSH
15926: LD_INT 8
15928: PUSH
15929: LD_INT 9
15931: PUSH
15932: LD_INT 10
15934: PUSH
15935: LD_INT 11
15937: PUSH
15938: LD_INT 12
15940: PUSH
15941: LD_INT 14
15943: PUSH
15944: LD_INT 15
15946: PUSH
15947: LD_INT 16
15949: PUSH
15950: LD_INT 17
15952: PUSH
15953: LD_INT 18
15955: PUSH
15956: LD_INT 19
15958: PUSH
15959: LD_INT 20
15961: PUSH
15962: LD_INT 21
15964: PUSH
15965: LD_INT 22
15967: PUSH
15968: LD_INT 23
15970: PUSH
15971: LD_INT 24
15973: PUSH
15974: LD_INT 25
15976: PUSH
15977: LD_INT 26
15979: PUSH
15980: LD_INT 27
15982: PUSH
15983: LD_INT 28
15985: PUSH
15986: LD_INT 30
15988: PUSH
15989: LD_INT 31
15991: PUSH
15992: LD_INT 32
15994: PUSH
15995: LD_INT 33
15997: PUSH
15998: LD_INT 34
16000: PUSH
16001: LD_INT 36
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 101
16039: PUSH
16040: LD_INT 102
16042: PUSH
16043: LD_INT 103
16045: PUSH
16046: LD_INT 104
16048: PUSH
16049: LD_INT 105
16051: PUSH
16052: LD_INT 106
16054: PUSH
16055: LD_INT 107
16057: PUSH
16058: LD_INT 108
16060: PUSH
16061: LD_INT 109
16063: PUSH
16064: LD_INT 110
16066: PUSH
16067: LD_INT 111
16069: PUSH
16070: LD_INT 112
16072: PUSH
16073: LD_INT 113
16075: PUSH
16076: LD_INT 114
16078: PUSH
16079: LD_INT 116
16081: PUSH
16082: LD_INT 117
16084: PUSH
16085: LD_INT 118
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: ST_TO_ADDR
16111: GO 17350
16113: LD_INT 14
16115: DOUBLE
16116: EQUAL
16117: IFTRUE 16121
16119: GO 16345
16121: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16122: LD_ADDR_VAR 0 2
16126: PUSH
16127: LD_INT 1
16129: PUSH
16130: LD_INT 2
16132: PUSH
16133: LD_INT 3
16135: PUSH
16136: LD_INT 4
16138: PUSH
16139: LD_INT 5
16141: PUSH
16142: LD_INT 6
16144: PUSH
16145: LD_INT 7
16147: PUSH
16148: LD_INT 8
16150: PUSH
16151: LD_INT 9
16153: PUSH
16154: LD_INT 10
16156: PUSH
16157: LD_INT 11
16159: PUSH
16160: LD_INT 12
16162: PUSH
16163: LD_INT 13
16165: PUSH
16166: LD_INT 14
16168: PUSH
16169: LD_INT 15
16171: PUSH
16172: LD_INT 16
16174: PUSH
16175: LD_INT 17
16177: PUSH
16178: LD_INT 18
16180: PUSH
16181: LD_INT 19
16183: PUSH
16184: LD_INT 20
16186: PUSH
16187: LD_INT 21
16189: PUSH
16190: LD_INT 22
16192: PUSH
16193: LD_INT 23
16195: PUSH
16196: LD_INT 24
16198: PUSH
16199: LD_INT 25
16201: PUSH
16202: LD_INT 26
16204: PUSH
16205: LD_INT 27
16207: PUSH
16208: LD_INT 28
16210: PUSH
16211: LD_INT 29
16213: PUSH
16214: LD_INT 30
16216: PUSH
16217: LD_INT 31
16219: PUSH
16220: LD_INT 32
16222: PUSH
16223: LD_INT 33
16225: PUSH
16226: LD_INT 34
16228: PUSH
16229: LD_INT 36
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 101
16271: PUSH
16272: LD_INT 102
16274: PUSH
16275: LD_INT 103
16277: PUSH
16278: LD_INT 104
16280: PUSH
16281: LD_INT 105
16283: PUSH
16284: LD_INT 106
16286: PUSH
16287: LD_INT 107
16289: PUSH
16290: LD_INT 108
16292: PUSH
16293: LD_INT 109
16295: PUSH
16296: LD_INT 110
16298: PUSH
16299: LD_INT 111
16301: PUSH
16302: LD_INT 112
16304: PUSH
16305: LD_INT 113
16307: PUSH
16308: LD_INT 114
16310: PUSH
16311: LD_INT 116
16313: PUSH
16314: LD_INT 117
16316: PUSH
16317: LD_INT 118
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: ST_TO_ADDR
16343: GO 17350
16345: LD_INT 15
16347: DOUBLE
16348: EQUAL
16349: IFTRUE 16353
16351: GO 16577
16353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16354: LD_ADDR_VAR 0 2
16358: PUSH
16359: LD_INT 1
16361: PUSH
16362: LD_INT 2
16364: PUSH
16365: LD_INT 3
16367: PUSH
16368: LD_INT 4
16370: PUSH
16371: LD_INT 5
16373: PUSH
16374: LD_INT 6
16376: PUSH
16377: LD_INT 7
16379: PUSH
16380: LD_INT 8
16382: PUSH
16383: LD_INT 9
16385: PUSH
16386: LD_INT 10
16388: PUSH
16389: LD_INT 11
16391: PUSH
16392: LD_INT 12
16394: PUSH
16395: LD_INT 13
16397: PUSH
16398: LD_INT 14
16400: PUSH
16401: LD_INT 15
16403: PUSH
16404: LD_INT 16
16406: PUSH
16407: LD_INT 17
16409: PUSH
16410: LD_INT 18
16412: PUSH
16413: LD_INT 19
16415: PUSH
16416: LD_INT 20
16418: PUSH
16419: LD_INT 21
16421: PUSH
16422: LD_INT 22
16424: PUSH
16425: LD_INT 23
16427: PUSH
16428: LD_INT 24
16430: PUSH
16431: LD_INT 25
16433: PUSH
16434: LD_INT 26
16436: PUSH
16437: LD_INT 27
16439: PUSH
16440: LD_INT 28
16442: PUSH
16443: LD_INT 29
16445: PUSH
16446: LD_INT 30
16448: PUSH
16449: LD_INT 31
16451: PUSH
16452: LD_INT 32
16454: PUSH
16455: LD_INT 33
16457: PUSH
16458: LD_INT 34
16460: PUSH
16461: LD_INT 36
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 101
16503: PUSH
16504: LD_INT 102
16506: PUSH
16507: LD_INT 103
16509: PUSH
16510: LD_INT 104
16512: PUSH
16513: LD_INT 105
16515: PUSH
16516: LD_INT 106
16518: PUSH
16519: LD_INT 107
16521: PUSH
16522: LD_INT 108
16524: PUSH
16525: LD_INT 109
16527: PUSH
16528: LD_INT 110
16530: PUSH
16531: LD_INT 111
16533: PUSH
16534: LD_INT 112
16536: PUSH
16537: LD_INT 113
16539: PUSH
16540: LD_INT 114
16542: PUSH
16543: LD_INT 116
16545: PUSH
16546: LD_INT 117
16548: PUSH
16549: LD_INT 118
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: ST_TO_ADDR
16575: GO 17350
16577: LD_INT 16
16579: DOUBLE
16580: EQUAL
16581: IFTRUE 16585
16583: GO 16721
16585: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16586: LD_ADDR_VAR 0 2
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: LD_INT 4
16596: PUSH
16597: LD_INT 5
16599: PUSH
16600: LD_INT 7
16602: PUSH
16603: LD_INT 11
16605: PUSH
16606: LD_INT 12
16608: PUSH
16609: LD_INT 15
16611: PUSH
16612: LD_INT 16
16614: PUSH
16615: LD_INT 20
16617: PUSH
16618: LD_INT 21
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_INT 23
16626: PUSH
16627: LD_INT 25
16629: PUSH
16630: LD_INT 26
16632: PUSH
16633: LD_INT 30
16635: PUSH
16636: LD_INT 31
16638: PUSH
16639: LD_INT 32
16641: PUSH
16642: LD_INT 33
16644: PUSH
16645: LD_INT 34
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 101
16671: PUSH
16672: LD_INT 102
16674: PUSH
16675: LD_INT 103
16677: PUSH
16678: LD_INT 106
16680: PUSH
16681: LD_INT 108
16683: PUSH
16684: LD_INT 112
16686: PUSH
16687: LD_INT 113
16689: PUSH
16690: LD_INT 114
16692: PUSH
16693: LD_INT 116
16695: PUSH
16696: LD_INT 117
16698: PUSH
16699: LD_INT 118
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: ST_TO_ADDR
16719: GO 17350
16721: LD_INT 17
16723: DOUBLE
16724: EQUAL
16725: IFTRUE 16729
16727: GO 16953
16729: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16730: LD_ADDR_VAR 0 2
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: LD_INT 2
16740: PUSH
16741: LD_INT 3
16743: PUSH
16744: LD_INT 4
16746: PUSH
16747: LD_INT 5
16749: PUSH
16750: LD_INT 6
16752: PUSH
16753: LD_INT 7
16755: PUSH
16756: LD_INT 8
16758: PUSH
16759: LD_INT 9
16761: PUSH
16762: LD_INT 10
16764: PUSH
16765: LD_INT 11
16767: PUSH
16768: LD_INT 12
16770: PUSH
16771: LD_INT 13
16773: PUSH
16774: LD_INT 14
16776: PUSH
16777: LD_INT 15
16779: PUSH
16780: LD_INT 16
16782: PUSH
16783: LD_INT 17
16785: PUSH
16786: LD_INT 18
16788: PUSH
16789: LD_INT 19
16791: PUSH
16792: LD_INT 20
16794: PUSH
16795: LD_INT 21
16797: PUSH
16798: LD_INT 22
16800: PUSH
16801: LD_INT 23
16803: PUSH
16804: LD_INT 24
16806: PUSH
16807: LD_INT 25
16809: PUSH
16810: LD_INT 26
16812: PUSH
16813: LD_INT 27
16815: PUSH
16816: LD_INT 28
16818: PUSH
16819: LD_INT 29
16821: PUSH
16822: LD_INT 30
16824: PUSH
16825: LD_INT 31
16827: PUSH
16828: LD_INT 32
16830: PUSH
16831: LD_INT 33
16833: PUSH
16834: LD_INT 34
16836: PUSH
16837: LD_INT 36
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 101
16879: PUSH
16880: LD_INT 102
16882: PUSH
16883: LD_INT 103
16885: PUSH
16886: LD_INT 104
16888: PUSH
16889: LD_INT 105
16891: PUSH
16892: LD_INT 106
16894: PUSH
16895: LD_INT 107
16897: PUSH
16898: LD_INT 108
16900: PUSH
16901: LD_INT 109
16903: PUSH
16904: LD_INT 110
16906: PUSH
16907: LD_INT 111
16909: PUSH
16910: LD_INT 112
16912: PUSH
16913: LD_INT 113
16915: PUSH
16916: LD_INT 114
16918: PUSH
16919: LD_INT 116
16921: PUSH
16922: LD_INT 117
16924: PUSH
16925: LD_INT 118
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: ST_TO_ADDR
16951: GO 17350
16953: LD_INT 18
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 17109
16961: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16962: LD_ADDR_VAR 0 2
16966: PUSH
16967: LD_INT 2
16969: PUSH
16970: LD_INT 4
16972: PUSH
16973: LD_INT 5
16975: PUSH
16976: LD_INT 7
16978: PUSH
16979: LD_INT 11
16981: PUSH
16982: LD_INT 12
16984: PUSH
16985: LD_INT 15
16987: PUSH
16988: LD_INT 16
16990: PUSH
16991: LD_INT 20
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_INT 23
17002: PUSH
17003: LD_INT 25
17005: PUSH
17006: LD_INT 26
17008: PUSH
17009: LD_INT 30
17011: PUSH
17012: LD_INT 31
17014: PUSH
17015: LD_INT 32
17017: PUSH
17018: LD_INT 33
17020: PUSH
17021: LD_INT 34
17023: PUSH
17024: LD_INT 35
17026: PUSH
17027: LD_INT 36
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 101
17055: PUSH
17056: LD_INT 102
17058: PUSH
17059: LD_INT 103
17061: PUSH
17062: LD_INT 106
17064: PUSH
17065: LD_INT 108
17067: PUSH
17068: LD_INT 112
17070: PUSH
17071: LD_INT 113
17073: PUSH
17074: LD_INT 114
17076: PUSH
17077: LD_INT 115
17079: PUSH
17080: LD_INT 116
17082: PUSH
17083: LD_INT 117
17085: PUSH
17086: LD_INT 118
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: ST_TO_ADDR
17107: GO 17350
17109: LD_INT 19
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17349
17117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17118: LD_ADDR_VAR 0 2
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: LD_INT 2
17128: PUSH
17129: LD_INT 3
17131: PUSH
17132: LD_INT 4
17134: PUSH
17135: LD_INT 5
17137: PUSH
17138: LD_INT 6
17140: PUSH
17141: LD_INT 7
17143: PUSH
17144: LD_INT 8
17146: PUSH
17147: LD_INT 9
17149: PUSH
17150: LD_INT 10
17152: PUSH
17153: LD_INT 11
17155: PUSH
17156: LD_INT 12
17158: PUSH
17159: LD_INT 13
17161: PUSH
17162: LD_INT 14
17164: PUSH
17165: LD_INT 15
17167: PUSH
17168: LD_INT 16
17170: PUSH
17171: LD_INT 17
17173: PUSH
17174: LD_INT 18
17176: PUSH
17177: LD_INT 19
17179: PUSH
17180: LD_INT 20
17182: PUSH
17183: LD_INT 21
17185: PUSH
17186: LD_INT 22
17188: PUSH
17189: LD_INT 23
17191: PUSH
17192: LD_INT 24
17194: PUSH
17195: LD_INT 25
17197: PUSH
17198: LD_INT 26
17200: PUSH
17201: LD_INT 27
17203: PUSH
17204: LD_INT 28
17206: PUSH
17207: LD_INT 29
17209: PUSH
17210: LD_INT 30
17212: PUSH
17213: LD_INT 31
17215: PUSH
17216: LD_INT 32
17218: PUSH
17219: LD_INT 33
17221: PUSH
17222: LD_INT 34
17224: PUSH
17225: LD_INT 35
17227: PUSH
17228: LD_INT 36
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 101
17271: PUSH
17272: LD_INT 102
17274: PUSH
17275: LD_INT 103
17277: PUSH
17278: LD_INT 104
17280: PUSH
17281: LD_INT 105
17283: PUSH
17284: LD_INT 106
17286: PUSH
17287: LD_INT 107
17289: PUSH
17290: LD_INT 108
17292: PUSH
17293: LD_INT 109
17295: PUSH
17296: LD_INT 110
17298: PUSH
17299: LD_INT 111
17301: PUSH
17302: LD_INT 112
17304: PUSH
17305: LD_INT 113
17307: PUSH
17308: LD_INT 114
17310: PUSH
17311: LD_INT 115
17313: PUSH
17314: LD_INT 116
17316: PUSH
17317: LD_INT 117
17319: PUSH
17320: LD_INT 118
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: ST_TO_ADDR
17347: GO 17350
17349: POP
// end else
17350: GO 17581
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17352: LD_ADDR_VAR 0 2
17356: PUSH
17357: LD_INT 1
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: LD_INT 3
17365: PUSH
17366: LD_INT 4
17368: PUSH
17369: LD_INT 5
17371: PUSH
17372: LD_INT 6
17374: PUSH
17375: LD_INT 7
17377: PUSH
17378: LD_INT 8
17380: PUSH
17381: LD_INT 9
17383: PUSH
17384: LD_INT 10
17386: PUSH
17387: LD_INT 11
17389: PUSH
17390: LD_INT 12
17392: PUSH
17393: LD_INT 13
17395: PUSH
17396: LD_INT 14
17398: PUSH
17399: LD_INT 15
17401: PUSH
17402: LD_INT 16
17404: PUSH
17405: LD_INT 17
17407: PUSH
17408: LD_INT 18
17410: PUSH
17411: LD_INT 19
17413: PUSH
17414: LD_INT 20
17416: PUSH
17417: LD_INT 21
17419: PUSH
17420: LD_INT 22
17422: PUSH
17423: LD_INT 23
17425: PUSH
17426: LD_INT 24
17428: PUSH
17429: LD_INT 25
17431: PUSH
17432: LD_INT 26
17434: PUSH
17435: LD_INT 27
17437: PUSH
17438: LD_INT 28
17440: PUSH
17441: LD_INT 29
17443: PUSH
17444: LD_INT 30
17446: PUSH
17447: LD_INT 31
17449: PUSH
17450: LD_INT 32
17452: PUSH
17453: LD_INT 33
17455: PUSH
17456: LD_INT 34
17458: PUSH
17459: LD_INT 35
17461: PUSH
17462: LD_INT 36
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 101
17505: PUSH
17506: LD_INT 102
17508: PUSH
17509: LD_INT 103
17511: PUSH
17512: LD_INT 104
17514: PUSH
17515: LD_INT 105
17517: PUSH
17518: LD_INT 106
17520: PUSH
17521: LD_INT 107
17523: PUSH
17524: LD_INT 108
17526: PUSH
17527: LD_INT 109
17529: PUSH
17530: LD_INT 110
17532: PUSH
17533: LD_INT 111
17535: PUSH
17536: LD_INT 112
17538: PUSH
17539: LD_INT 113
17541: PUSH
17542: LD_INT 114
17544: PUSH
17545: LD_INT 115
17547: PUSH
17548: LD_INT 116
17550: PUSH
17551: LD_INT 117
17553: PUSH
17554: LD_INT 118
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: ST_TO_ADDR
// if result then
17581: LD_VAR 0 2
17585: IFFALSE 18371
// begin normal :=  ;
17587: LD_ADDR_VAR 0 5
17591: PUSH
17592: LD_STRING 
17594: ST_TO_ADDR
// hardcore :=  ;
17595: LD_ADDR_VAR 0 6
17599: PUSH
17600: LD_STRING 
17602: ST_TO_ADDR
// active :=  ;
17603: LD_ADDR_VAR 0 7
17607: PUSH
17608: LD_STRING 
17610: ST_TO_ADDR
// for i = 1 to normalCounter do
17611: LD_ADDR_VAR 0 8
17615: PUSH
17616: DOUBLE
17617: LD_INT 1
17619: DEC
17620: ST_TO_ADDR
17621: LD_EXP 23
17625: PUSH
17626: FOR_TO
17627: IFFALSE 17728
// begin tmp := 0 ;
17629: LD_ADDR_VAR 0 3
17633: PUSH
17634: LD_STRING 0
17636: ST_TO_ADDR
// if result [ 1 ] then
17637: LD_VAR 0 2
17641: PUSH
17642: LD_INT 1
17644: ARRAY
17645: IFFALSE 17710
// if result [ 1 ] [ 1 ] = i then
17647: LD_VAR 0 2
17651: PUSH
17652: LD_INT 1
17654: ARRAY
17655: PUSH
17656: LD_INT 1
17658: ARRAY
17659: PUSH
17660: LD_VAR 0 8
17664: EQUAL
17665: IFFALSE 17710
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17667: LD_ADDR_VAR 0 2
17671: PUSH
17672: LD_VAR 0 2
17676: PPUSH
17677: LD_INT 1
17679: PPUSH
17680: LD_VAR 0 2
17684: PUSH
17685: LD_INT 1
17687: ARRAY
17688: PPUSH
17689: LD_INT 1
17691: PPUSH
17692: CALL_OW 3
17696: PPUSH
17697: CALL_OW 1
17701: ST_TO_ADDR
// tmp := 1 ;
17702: LD_ADDR_VAR 0 3
17706: PUSH
17707: LD_STRING 1
17709: ST_TO_ADDR
// end ; normal := normal & tmp ;
17710: LD_ADDR_VAR 0 5
17714: PUSH
17715: LD_VAR 0 5
17719: PUSH
17720: LD_VAR 0 3
17724: STR
17725: ST_TO_ADDR
// end ;
17726: GO 17626
17728: POP
17729: POP
// for i = 1 to hardcoreCounter do
17730: LD_ADDR_VAR 0 8
17734: PUSH
17735: DOUBLE
17736: LD_INT 1
17738: DEC
17739: ST_TO_ADDR
17740: LD_EXP 24
17744: PUSH
17745: FOR_TO
17746: IFFALSE 17851
// begin tmp := 0 ;
17748: LD_ADDR_VAR 0 3
17752: PUSH
17753: LD_STRING 0
17755: ST_TO_ADDR
// if result [ 2 ] then
17756: LD_VAR 0 2
17760: PUSH
17761: LD_INT 2
17763: ARRAY
17764: IFFALSE 17833
// if result [ 2 ] [ 1 ] = 100 + i then
17766: LD_VAR 0 2
17770: PUSH
17771: LD_INT 2
17773: ARRAY
17774: PUSH
17775: LD_INT 1
17777: ARRAY
17778: PUSH
17779: LD_INT 100
17781: PUSH
17782: LD_VAR 0 8
17786: PLUS
17787: EQUAL
17788: IFFALSE 17833
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17790: LD_ADDR_VAR 0 2
17794: PUSH
17795: LD_VAR 0 2
17799: PPUSH
17800: LD_INT 2
17802: PPUSH
17803: LD_VAR 0 2
17807: PUSH
17808: LD_INT 2
17810: ARRAY
17811: PPUSH
17812: LD_INT 1
17814: PPUSH
17815: CALL_OW 3
17819: PPUSH
17820: CALL_OW 1
17824: ST_TO_ADDR
// tmp := 1 ;
17825: LD_ADDR_VAR 0 3
17829: PUSH
17830: LD_STRING 1
17832: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17833: LD_ADDR_VAR 0 6
17837: PUSH
17838: LD_VAR 0 6
17842: PUSH
17843: LD_VAR 0 3
17847: STR
17848: ST_TO_ADDR
// end ;
17849: GO 17745
17851: POP
17852: POP
// if isGameLoad then
17853: LD_VAR 0 1
17857: IFFALSE 18332
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17859: LD_ADDR_VAR 0 4
17863: PUSH
17864: LD_EXP 27
17868: PUSH
17869: LD_EXP 26
17873: PUSH
17874: LD_EXP 28
17878: PUSH
17879: LD_EXP 25
17883: PUSH
17884: LD_EXP 29
17888: PUSH
17889: LD_EXP 30
17893: PUSH
17894: LD_EXP 31
17898: PUSH
17899: LD_EXP 32
17903: PUSH
17904: LD_EXP 33
17908: PUSH
17909: LD_EXP 34
17913: PUSH
17914: LD_EXP 35
17918: PUSH
17919: LD_EXP 36
17923: PUSH
17924: LD_EXP 37
17928: PUSH
17929: LD_EXP 38
17933: PUSH
17934: LD_EXP 46
17938: PUSH
17939: LD_EXP 47
17943: PUSH
17944: LD_EXP 48
17948: PUSH
17949: LD_EXP 49
17953: PUSH
17954: LD_EXP 51
17958: PUSH
17959: LD_EXP 52
17963: PUSH
17964: LD_EXP 53
17968: PUSH
17969: LD_EXP 56
17973: PUSH
17974: LD_EXP 58
17978: PUSH
17979: LD_EXP 59
17983: PUSH
17984: LD_EXP 60
17988: PUSH
17989: LD_EXP 62
17993: PUSH
17994: LD_EXP 63
17998: PUSH
17999: LD_EXP 66
18003: PUSH
18004: LD_EXP 67
18008: PUSH
18009: LD_EXP 68
18013: PUSH
18014: LD_EXP 69
18018: PUSH
18019: LD_EXP 70
18023: PUSH
18024: LD_EXP 71
18028: PUSH
18029: LD_EXP 72
18033: PUSH
18034: LD_EXP 73
18038: PUSH
18039: LD_EXP 74
18043: PUSH
18044: LD_EXP 39
18048: PUSH
18049: LD_EXP 40
18053: PUSH
18054: LD_EXP 43
18058: PUSH
18059: LD_EXP 44
18063: PUSH
18064: LD_EXP 45
18068: PUSH
18069: LD_EXP 41
18073: PUSH
18074: LD_EXP 42
18078: PUSH
18079: LD_EXP 50
18083: PUSH
18084: LD_EXP 54
18088: PUSH
18089: LD_EXP 55
18093: PUSH
18094: LD_EXP 57
18098: PUSH
18099: LD_EXP 61
18103: PUSH
18104: LD_EXP 64
18108: PUSH
18109: LD_EXP 65
18113: PUSH
18114: LD_EXP 75
18118: PUSH
18119: LD_EXP 76
18123: PUSH
18124: LD_EXP 77
18128: PUSH
18129: LD_EXP 78
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: ST_TO_ADDR
// tmp :=  ;
18190: LD_ADDR_VAR 0 3
18194: PUSH
18195: LD_STRING 
18197: ST_TO_ADDR
// for i = 1 to normalCounter do
18198: LD_ADDR_VAR 0 8
18202: PUSH
18203: DOUBLE
18204: LD_INT 1
18206: DEC
18207: ST_TO_ADDR
18208: LD_EXP 23
18212: PUSH
18213: FOR_TO
18214: IFFALSE 18250
// begin if flags [ i ] then
18216: LD_VAR 0 4
18220: PUSH
18221: LD_VAR 0 8
18225: ARRAY
18226: IFFALSE 18248
// tmp := tmp & i & ; ;
18228: LD_ADDR_VAR 0 3
18232: PUSH
18233: LD_VAR 0 3
18237: PUSH
18238: LD_VAR 0 8
18242: STR
18243: PUSH
18244: LD_STRING ;
18246: STR
18247: ST_TO_ADDR
// end ;
18248: GO 18213
18250: POP
18251: POP
// for i = 1 to hardcoreCounter do
18252: LD_ADDR_VAR 0 8
18256: PUSH
18257: DOUBLE
18258: LD_INT 1
18260: DEC
18261: ST_TO_ADDR
18262: LD_EXP 24
18266: PUSH
18267: FOR_TO
18268: IFFALSE 18314
// begin if flags [ normalCounter + i ] then
18270: LD_VAR 0 4
18274: PUSH
18275: LD_EXP 23
18279: PUSH
18280: LD_VAR 0 8
18284: PLUS
18285: ARRAY
18286: IFFALSE 18312
// tmp := tmp & ( 100 + i ) & ; ;
18288: LD_ADDR_VAR 0 3
18292: PUSH
18293: LD_VAR 0 3
18297: PUSH
18298: LD_INT 100
18300: PUSH
18301: LD_VAR 0 8
18305: PLUS
18306: STR
18307: PUSH
18308: LD_STRING ;
18310: STR
18311: ST_TO_ADDR
// end ;
18312: GO 18267
18314: POP
18315: POP
// if tmp then
18316: LD_VAR 0 3
18320: IFFALSE 18332
// active := tmp ;
18322: LD_ADDR_VAR 0 7
18326: PUSH
18327: LD_VAR 0 3
18331: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18332: LD_STRING getStreamItemsFromMission("
18334: PUSH
18335: LD_VAR 0 5
18339: STR
18340: PUSH
18341: LD_STRING ","
18343: STR
18344: PUSH
18345: LD_VAR 0 6
18349: STR
18350: PUSH
18351: LD_STRING ","
18353: STR
18354: PUSH
18355: LD_VAR 0 7
18359: STR
18360: PUSH
18361: LD_STRING ")
18363: STR
18364: PPUSH
18365: CALL_OW 559
// end else
18369: GO 18378
// ToLua ( getStreamItemsFromMission("","","") ) ;
18371: LD_STRING getStreamItemsFromMission("","","")
18373: PPUSH
18374: CALL_OW 559
// end ;
18378: LD_VAR 0 2
18382: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18383: LD_EXP 22
18387: PUSH
18388: LD_EXP 27
18392: AND
18393: IFFALSE 18517
18395: GO 18397
18397: DISABLE
18398: LD_INT 0
18400: PPUSH
18401: PPUSH
// begin enable ;
18402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18403: LD_ADDR_VAR 0 2
18407: PUSH
18408: LD_INT 22
18410: PUSH
18411: LD_OWVAR 2
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 2
18422: PUSH
18423: LD_INT 34
18425: PUSH
18426: LD_INT 7
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 34
18435: PUSH
18436: LD_INT 45
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 34
18445: PUSH
18446: LD_INT 28
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 34
18455: PUSH
18456: LD_INT 47
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: ST_TO_ADDR
// if not tmp then
18479: LD_VAR 0 2
18483: NOT
18484: IFFALSE 18488
// exit ;
18486: GO 18517
// for i in tmp do
18488: LD_ADDR_VAR 0 1
18492: PUSH
18493: LD_VAR 0 2
18497: PUSH
18498: FOR_IN
18499: IFFALSE 18515
// begin SetLives ( i , 0 ) ;
18501: LD_VAR 0 1
18505: PPUSH
18506: LD_INT 0
18508: PPUSH
18509: CALL_OW 234
// end ;
18513: GO 18498
18515: POP
18516: POP
// end ;
18517: PPOPN 2
18519: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18520: LD_EXP 22
18524: PUSH
18525: LD_EXP 28
18529: AND
18530: IFFALSE 18614
18532: GO 18534
18534: DISABLE
18535: LD_INT 0
18537: PPUSH
18538: PPUSH
// begin enable ;
18539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18540: LD_ADDR_VAR 0 2
18544: PUSH
18545: LD_INT 22
18547: PUSH
18548: LD_OWVAR 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 32
18559: PUSH
18560: LD_INT 3
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PPUSH
18571: CALL_OW 69
18575: ST_TO_ADDR
// if not tmp then
18576: LD_VAR 0 2
18580: NOT
18581: IFFALSE 18585
// exit ;
18583: GO 18614
// for i in tmp do
18585: LD_ADDR_VAR 0 1
18589: PUSH
18590: LD_VAR 0 2
18594: PUSH
18595: FOR_IN
18596: IFFALSE 18612
// begin SetLives ( i , 0 ) ;
18598: LD_VAR 0 1
18602: PPUSH
18603: LD_INT 0
18605: PPUSH
18606: CALL_OW 234
// end ;
18610: GO 18595
18612: POP
18613: POP
// end ;
18614: PPOPN 2
18616: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18617: LD_EXP 22
18621: PUSH
18622: LD_EXP 25
18626: AND
18627: IFFALSE 18720
18629: GO 18631
18631: DISABLE
18632: LD_INT 0
18634: PPUSH
// begin enable ;
18635: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18636: LD_ADDR_VAR 0 1
18640: PUSH
18641: LD_INT 22
18643: PUSH
18644: LD_OWVAR 2
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: LD_INT 25
18658: PUSH
18659: LD_INT 5
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 25
18668: PUSH
18669: LD_INT 9
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 25
18678: PUSH
18679: LD_INT 8
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PPUSH
18696: CALL_OW 69
18700: PUSH
18701: FOR_IN
18702: IFFALSE 18718
// begin SetClass ( i , 1 ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_INT 1
18711: PPUSH
18712: CALL_OW 336
// end ;
18716: GO 18701
18718: POP
18719: POP
// end ;
18720: PPOPN 1
18722: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18723: LD_EXP 22
18727: PUSH
18728: LD_EXP 26
18732: AND
18733: PUSH
18734: LD_OWVAR 65
18738: PUSH
18739: LD_INT 7
18741: LESS
18742: AND
18743: IFFALSE 18757
18745: GO 18747
18747: DISABLE
// begin enable ;
18748: ENABLE
// game_speed := 7 ;
18749: LD_ADDR_OWVAR 65
18753: PUSH
18754: LD_INT 7
18756: ST_TO_ADDR
// end ;
18757: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18758: LD_EXP 22
18762: PUSH
18763: LD_EXP 29
18767: AND
18768: IFFALSE 18970
18770: GO 18772
18772: DISABLE
18773: LD_INT 0
18775: PPUSH
18776: PPUSH
18777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18778: LD_ADDR_VAR 0 3
18782: PUSH
18783: LD_INT 81
18785: PUSH
18786: LD_OWVAR 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 21
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 69
18813: ST_TO_ADDR
// if not tmp then
18814: LD_VAR 0 3
18818: NOT
18819: IFFALSE 18823
// exit ;
18821: GO 18970
// if tmp > 5 then
18823: LD_VAR 0 3
18827: PUSH
18828: LD_INT 5
18830: GREATER
18831: IFFALSE 18843
// k := 5 else
18833: LD_ADDR_VAR 0 2
18837: PUSH
18838: LD_INT 5
18840: ST_TO_ADDR
18841: GO 18853
// k := tmp ;
18843: LD_ADDR_VAR 0 2
18847: PUSH
18848: LD_VAR 0 3
18852: ST_TO_ADDR
// for i := 1 to k do
18853: LD_ADDR_VAR 0 1
18857: PUSH
18858: DOUBLE
18859: LD_INT 1
18861: DEC
18862: ST_TO_ADDR
18863: LD_VAR 0 2
18867: PUSH
18868: FOR_TO
18869: IFFALSE 18968
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18871: LD_VAR 0 3
18875: PUSH
18876: LD_VAR 0 1
18880: ARRAY
18881: PPUSH
18882: LD_VAR 0 1
18886: PUSH
18887: LD_INT 4
18889: MOD
18890: PUSH
18891: LD_INT 1
18893: PLUS
18894: PPUSH
18895: CALL_OW 259
18899: PUSH
18900: LD_INT 10
18902: LESS
18903: IFFALSE 18966
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18905: LD_VAR 0 3
18909: PUSH
18910: LD_VAR 0 1
18914: ARRAY
18915: PPUSH
18916: LD_VAR 0 1
18920: PUSH
18921: LD_INT 4
18923: MOD
18924: PUSH
18925: LD_INT 1
18927: PLUS
18928: PPUSH
18929: LD_VAR 0 3
18933: PUSH
18934: LD_VAR 0 1
18938: ARRAY
18939: PPUSH
18940: LD_VAR 0 1
18944: PUSH
18945: LD_INT 4
18947: MOD
18948: PUSH
18949: LD_INT 1
18951: PLUS
18952: PPUSH
18953: CALL_OW 259
18957: PUSH
18958: LD_INT 1
18960: PLUS
18961: PPUSH
18962: CALL_OW 237
18966: GO 18868
18968: POP
18969: POP
// end ;
18970: PPOPN 3
18972: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18973: LD_EXP 22
18977: PUSH
18978: LD_EXP 30
18982: AND
18983: IFFALSE 19003
18985: GO 18987
18987: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18988: LD_INT 4
18990: PPUSH
18991: LD_OWVAR 2
18995: PPUSH
18996: LD_INT 0
18998: PPUSH
18999: CALL_OW 324
19003: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19004: LD_EXP 22
19008: PUSH
19009: LD_EXP 59
19013: AND
19014: IFFALSE 19034
19016: GO 19018
19018: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19019: LD_INT 19
19021: PPUSH
19022: LD_OWVAR 2
19026: PPUSH
19027: LD_INT 0
19029: PPUSH
19030: CALL_OW 324
19034: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19035: LD_EXP 22
19039: PUSH
19040: LD_EXP 31
19044: AND
19045: IFFALSE 19147
19047: GO 19049
19049: DISABLE
19050: LD_INT 0
19052: PPUSH
19053: PPUSH
// begin enable ;
19054: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19055: LD_ADDR_VAR 0 2
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_OWVAR 2
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 34
19077: PUSH
19078: LD_INT 11
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 34
19087: PUSH
19088: LD_INT 30
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: ST_TO_ADDR
// if not tmp then
19109: LD_VAR 0 2
19113: NOT
19114: IFFALSE 19118
// exit ;
19116: GO 19147
// for i in tmp do
19118: LD_ADDR_VAR 0 1
19122: PUSH
19123: LD_VAR 0 2
19127: PUSH
19128: FOR_IN
19129: IFFALSE 19145
// begin SetLives ( i , 0 ) ;
19131: LD_VAR 0 1
19135: PPUSH
19136: LD_INT 0
19138: PPUSH
19139: CALL_OW 234
// end ;
19143: GO 19128
19145: POP
19146: POP
// end ;
19147: PPOPN 2
19149: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19150: LD_EXP 22
19154: PUSH
19155: LD_EXP 32
19159: AND
19160: IFFALSE 19180
19162: GO 19164
19164: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19165: LD_INT 32
19167: PPUSH
19168: LD_OWVAR 2
19172: PPUSH
19173: LD_INT 0
19175: PPUSH
19176: CALL_OW 324
19180: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19181: LD_EXP 22
19185: PUSH
19186: LD_EXP 33
19190: AND
19191: IFFALSE 19372
19193: GO 19195
19195: DISABLE
19196: LD_INT 0
19198: PPUSH
19199: PPUSH
19200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: LD_INT 22
19208: PUSH
19209: LD_OWVAR 2
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 33
19220: PUSH
19221: LD_INT 3
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PPUSH
19232: CALL_OW 69
19236: ST_TO_ADDR
// if not tmp then
19237: LD_VAR 0 2
19241: NOT
19242: IFFALSE 19246
// exit ;
19244: GO 19372
// side := 0 ;
19246: LD_ADDR_VAR 0 3
19250: PUSH
19251: LD_INT 0
19253: ST_TO_ADDR
// for i := 1 to 8 do
19254: LD_ADDR_VAR 0 1
19258: PUSH
19259: DOUBLE
19260: LD_INT 1
19262: DEC
19263: ST_TO_ADDR
19264: LD_INT 8
19266: PUSH
19267: FOR_TO
19268: IFFALSE 19316
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19270: LD_OWVAR 2
19274: PUSH
19275: LD_VAR 0 1
19279: NONEQUAL
19280: PUSH
19281: LD_OWVAR 2
19285: PPUSH
19286: LD_VAR 0 1
19290: PPUSH
19291: CALL_OW 81
19295: PUSH
19296: LD_INT 2
19298: EQUAL
19299: AND
19300: IFFALSE 19314
// begin side := i ;
19302: LD_ADDR_VAR 0 3
19306: PUSH
19307: LD_VAR 0 1
19311: ST_TO_ADDR
// break ;
19312: GO 19316
// end ;
19314: GO 19267
19316: POP
19317: POP
// if not side then
19318: LD_VAR 0 3
19322: NOT
19323: IFFALSE 19327
// exit ;
19325: GO 19372
// for i := 1 to tmp do
19327: LD_ADDR_VAR 0 1
19331: PUSH
19332: DOUBLE
19333: LD_INT 1
19335: DEC
19336: ST_TO_ADDR
19337: LD_VAR 0 2
19341: PUSH
19342: FOR_TO
19343: IFFALSE 19370
// if Prob ( 60 ) then
19345: LD_INT 60
19347: PPUSH
19348: CALL_OW 13
19352: IFFALSE 19368
// SetSide ( i , side ) ;
19354: LD_VAR 0 1
19358: PPUSH
19359: LD_VAR 0 3
19363: PPUSH
19364: CALL_OW 235
19368: GO 19342
19370: POP
19371: POP
// end ;
19372: PPOPN 3
19374: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19375: LD_EXP 22
19379: PUSH
19380: LD_EXP 35
19384: AND
19385: IFFALSE 19504
19387: GO 19389
19389: DISABLE
19390: LD_INT 0
19392: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19393: LD_ADDR_VAR 0 1
19397: PUSH
19398: LD_INT 22
19400: PUSH
19401: LD_OWVAR 2
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 21
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 3
19422: PUSH
19423: LD_INT 23
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: PPUSH
19442: CALL_OW 69
19446: PUSH
19447: FOR_IN
19448: IFFALSE 19502
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19450: LD_VAR 0 1
19454: PPUSH
19455: CALL_OW 257
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 3
19468: PUSH
19469: LD_INT 4
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: IN
19478: IFFALSE 19500
// SetClass ( un , rand ( 1 , 4 ) ) ;
19480: LD_VAR 0 1
19484: PPUSH
19485: LD_INT 1
19487: PPUSH
19488: LD_INT 4
19490: PPUSH
19491: CALL_OW 12
19495: PPUSH
19496: CALL_OW 336
19500: GO 19447
19502: POP
19503: POP
// end ;
19504: PPOPN 1
19506: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19507: LD_EXP 22
19511: PUSH
19512: LD_EXP 34
19516: AND
19517: IFFALSE 19596
19519: GO 19521
19521: DISABLE
19522: LD_INT 0
19524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19525: LD_ADDR_VAR 0 1
19529: PUSH
19530: LD_INT 22
19532: PUSH
19533: LD_OWVAR 2
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 21
19544: PUSH
19545: LD_INT 3
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PPUSH
19556: CALL_OW 69
19560: ST_TO_ADDR
// if not tmp then
19561: LD_VAR 0 1
19565: NOT
19566: IFFALSE 19570
// exit ;
19568: GO 19596
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 1
19577: PPUSH
19578: LD_VAR 0 1
19582: PPUSH
19583: CALL_OW 12
19587: ARRAY
19588: PPUSH
19589: LD_INT 100
19591: PPUSH
19592: CALL_OW 234
// end ;
19596: PPOPN 1
19598: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19599: LD_EXP 22
19603: PUSH
19604: LD_EXP 36
19608: AND
19609: IFFALSE 19707
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19617: LD_ADDR_VAR 0 1
19621: PUSH
19622: LD_INT 22
19624: PUSH
19625: LD_OWVAR 2
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 21
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PPUSH
19648: CALL_OW 69
19652: ST_TO_ADDR
// if not tmp then
19653: LD_VAR 0 1
19657: NOT
19658: IFFALSE 19662
// exit ;
19660: GO 19707
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19662: LD_VAR 0 1
19666: PUSH
19667: LD_INT 1
19669: PPUSH
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 12
19679: ARRAY
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: LD_INT 4
19686: PPUSH
19687: CALL_OW 12
19691: PPUSH
19692: LD_INT 3000
19694: PPUSH
19695: LD_INT 9000
19697: PPUSH
19698: CALL_OW 12
19702: PPUSH
19703: CALL_OW 492
// end ;
19707: PPOPN 1
19709: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19710: LD_EXP 22
19714: PUSH
19715: LD_EXP 37
19719: AND
19720: IFFALSE 19740
19722: GO 19724
19724: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19725: LD_INT 1
19727: PPUSH
19728: LD_OWVAR 2
19732: PPUSH
19733: LD_INT 0
19735: PPUSH
19736: CALL_OW 324
19740: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19741: LD_EXP 22
19745: PUSH
19746: LD_EXP 38
19750: AND
19751: IFFALSE 19834
19753: GO 19755
19755: DISABLE
19756: LD_INT 0
19758: PPUSH
19759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19760: LD_ADDR_VAR 0 2
19764: PUSH
19765: LD_INT 22
19767: PUSH
19768: LD_OWVAR 2
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 3
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PPUSH
19791: CALL_OW 69
19795: ST_TO_ADDR
// if not tmp then
19796: LD_VAR 0 2
19800: NOT
19801: IFFALSE 19805
// exit ;
19803: GO 19834
// for i in tmp do
19805: LD_ADDR_VAR 0 1
19809: PUSH
19810: LD_VAR 0 2
19814: PUSH
19815: FOR_IN
19816: IFFALSE 19832
// SetBLevel ( i , 10 ) ;
19818: LD_VAR 0 1
19822: PPUSH
19823: LD_INT 10
19825: PPUSH
19826: CALL_OW 241
19830: GO 19815
19832: POP
19833: POP
// end ;
19834: PPOPN 2
19836: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19837: LD_EXP 22
19841: PUSH
19842: LD_EXP 39
19846: AND
19847: IFFALSE 19958
19849: GO 19851
19851: DISABLE
19852: LD_INT 0
19854: PPUSH
19855: PPUSH
19856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19857: LD_ADDR_VAR 0 3
19861: PUSH
19862: LD_INT 22
19864: PUSH
19865: LD_OWVAR 2
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 25
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PPUSH
19888: CALL_OW 69
19892: ST_TO_ADDR
// if not tmp then
19893: LD_VAR 0 3
19897: NOT
19898: IFFALSE 19902
// exit ;
19900: GO 19958
// un := tmp [ rand ( 1 , tmp ) ] ;
19902: LD_ADDR_VAR 0 2
19906: PUSH
19907: LD_VAR 0 3
19911: PUSH
19912: LD_INT 1
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL_OW 12
19924: ARRAY
19925: ST_TO_ADDR
// if Crawls ( un ) then
19926: LD_VAR 0 2
19930: PPUSH
19931: CALL_OW 318
19935: IFFALSE 19946
// ComWalk ( un ) ;
19937: LD_VAR 0 2
19941: PPUSH
19942: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_INT 5
19953: PPUSH
19954: CALL_OW 336
// end ;
19958: PPOPN 3
19960: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19961: LD_EXP 22
19965: PUSH
19966: LD_EXP 40
19970: AND
19971: PUSH
19972: LD_OWVAR 67
19976: PUSH
19977: LD_INT 4
19979: LESS
19980: AND
19981: IFFALSE 20000
19983: GO 19985
19985: DISABLE
// begin Difficulty := Difficulty + 1 ;
19986: LD_ADDR_OWVAR 67
19990: PUSH
19991: LD_OWVAR 67
19995: PUSH
19996: LD_INT 1
19998: PLUS
19999: ST_TO_ADDR
// end ;
20000: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20001: LD_EXP 22
20005: PUSH
20006: LD_EXP 41
20010: AND
20011: IFFALSE 20114
20013: GO 20015
20015: DISABLE
20016: LD_INT 0
20018: PPUSH
// begin for i := 1 to 5 do
20019: LD_ADDR_VAR 0 1
20023: PUSH
20024: DOUBLE
20025: LD_INT 1
20027: DEC
20028: ST_TO_ADDR
20029: LD_INT 5
20031: PUSH
20032: FOR_TO
20033: IFFALSE 20112
// begin uc_nation := nation_nature ;
20035: LD_ADDR_OWVAR 21
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// uc_side := 0 ;
20043: LD_ADDR_OWVAR 20
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20051: LD_ADDR_OWVAR 29
20055: PUSH
20056: LD_INT 12
20058: PUSH
20059: LD_INT 12
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: ST_TO_ADDR
// hc_agressivity := 20 ;
20066: LD_ADDR_OWVAR 35
20070: PUSH
20071: LD_INT 20
20073: ST_TO_ADDR
// hc_class := class_tiger ;
20074: LD_ADDR_OWVAR 28
20078: PUSH
20079: LD_INT 14
20081: ST_TO_ADDR
// hc_gallery :=  ;
20082: LD_ADDR_OWVAR 33
20086: PUSH
20087: LD_STRING 
20089: ST_TO_ADDR
// hc_name :=  ;
20090: LD_ADDR_OWVAR 26
20094: PUSH
20095: LD_STRING 
20097: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20098: CALL_OW 44
20102: PPUSH
20103: LD_INT 0
20105: PPUSH
20106: CALL_OW 51
// end ;
20110: GO 20032
20112: POP
20113: POP
// end ;
20114: PPOPN 1
20116: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20117: LD_EXP 22
20121: PUSH
20122: LD_EXP 42
20126: AND
20127: IFFALSE 20136
20129: GO 20131
20131: DISABLE
// StreamSibBomb ;
20132: CALL 20137 0 0
20136: END
// export function StreamSibBomb ; var i , x , y ; begin
20137: LD_INT 0
20139: PPUSH
20140: PPUSH
20141: PPUSH
20142: PPUSH
// result := false ;
20143: LD_ADDR_VAR 0 1
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// for i := 1 to 16 do
20151: LD_ADDR_VAR 0 2
20155: PUSH
20156: DOUBLE
20157: LD_INT 1
20159: DEC
20160: ST_TO_ADDR
20161: LD_INT 16
20163: PUSH
20164: FOR_TO
20165: IFFALSE 20364
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20167: LD_ADDR_VAR 0 3
20171: PUSH
20172: LD_INT 10
20174: PUSH
20175: LD_INT 20
20177: PUSH
20178: LD_INT 30
20180: PUSH
20181: LD_INT 40
20183: PUSH
20184: LD_INT 50
20186: PUSH
20187: LD_INT 60
20189: PUSH
20190: LD_INT 70
20192: PUSH
20193: LD_INT 80
20195: PUSH
20196: LD_INT 90
20198: PUSH
20199: LD_INT 100
20201: PUSH
20202: LD_INT 110
20204: PUSH
20205: LD_INT 120
20207: PUSH
20208: LD_INT 130
20210: PUSH
20211: LD_INT 140
20213: PUSH
20214: LD_INT 150
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 1
20236: PPUSH
20237: LD_INT 15
20239: PPUSH
20240: CALL_OW 12
20244: ARRAY
20245: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20246: LD_ADDR_VAR 0 4
20250: PUSH
20251: LD_INT 10
20253: PUSH
20254: LD_INT 20
20256: PUSH
20257: LD_INT 30
20259: PUSH
20260: LD_INT 40
20262: PUSH
20263: LD_INT 50
20265: PUSH
20266: LD_INT 60
20268: PUSH
20269: LD_INT 70
20271: PUSH
20272: LD_INT 80
20274: PUSH
20275: LD_INT 90
20277: PUSH
20278: LD_INT 100
20280: PUSH
20281: LD_INT 110
20283: PUSH
20284: LD_INT 120
20286: PUSH
20287: LD_INT 130
20289: PUSH
20290: LD_INT 140
20292: PUSH
20293: LD_INT 150
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: PPUSH
20316: LD_INT 15
20318: PPUSH
20319: CALL_OW 12
20323: ARRAY
20324: ST_TO_ADDR
// if ValidHex ( x , y ) then
20325: LD_VAR 0 3
20329: PPUSH
20330: LD_VAR 0 4
20334: PPUSH
20335: CALL_OW 488
20339: IFFALSE 20362
// begin result := [ x , y ] ;
20341: LD_ADDR_VAR 0 1
20345: PUSH
20346: LD_VAR 0 3
20350: PUSH
20351: LD_VAR 0 4
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: ST_TO_ADDR
// break ;
20360: GO 20364
// end ; end ;
20362: GO 20164
20364: POP
20365: POP
// if result then
20366: LD_VAR 0 1
20370: IFFALSE 20430
// begin ToLua ( playSibBomb() ) ;
20372: LD_STRING playSibBomb()
20374: PPUSH
20375: CALL_OW 559
// wait ( 0 0$14 ) ;
20379: LD_INT 490
20381: PPUSH
20382: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20386: LD_VAR 0 1
20390: PUSH
20391: LD_INT 1
20393: ARRAY
20394: PPUSH
20395: LD_VAR 0 1
20399: PUSH
20400: LD_INT 2
20402: ARRAY
20403: PPUSH
20404: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20408: LD_VAR 0 1
20412: PUSH
20413: LD_INT 1
20415: ARRAY
20416: PPUSH
20417: LD_VAR 0 1
20421: PUSH
20422: LD_INT 2
20424: ARRAY
20425: PPUSH
20426: CALL_OW 429
// end ; end ;
20430: LD_VAR 0 1
20434: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20435: LD_EXP 22
20439: PUSH
20440: LD_EXP 44
20444: AND
20445: IFFALSE 20457
20447: GO 20449
20449: DISABLE
// YouLost (  ) ;
20450: LD_STRING 
20452: PPUSH
20453: CALL_OW 104
20457: END
// every 0 0$1 trigger StreamModeActive and sFog do
20458: LD_EXP 22
20462: PUSH
20463: LD_EXP 43
20467: AND
20468: IFFALSE 20482
20470: GO 20472
20472: DISABLE
// FogOff ( your_side ) ;
20473: LD_OWVAR 2
20477: PPUSH
20478: CALL_OW 344
20482: END
// every 0 0$1 trigger StreamModeActive and sSun do
20483: LD_EXP 22
20487: PUSH
20488: LD_EXP 45
20492: AND
20493: IFFALSE 20521
20495: GO 20497
20497: DISABLE
// begin solar_recharge_percent := 0 ;
20498: LD_ADDR_OWVAR 79
20502: PUSH
20503: LD_INT 0
20505: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20506: LD_INT 10500
20508: PPUSH
20509: CALL_OW 67
// solar_recharge_percent := 100 ;
20513: LD_ADDR_OWVAR 79
20517: PUSH
20518: LD_INT 100
20520: ST_TO_ADDR
// end ;
20521: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20522: LD_EXP 22
20526: PUSH
20527: LD_EXP 46
20531: AND
20532: IFFALSE 20771
20534: GO 20536
20536: DISABLE
20537: LD_INT 0
20539: PPUSH
20540: PPUSH
20541: PPUSH
// begin tmp := [ ] ;
20542: LD_ADDR_VAR 0 3
20546: PUSH
20547: EMPTY
20548: ST_TO_ADDR
// for i := 1 to 6 do
20549: LD_ADDR_VAR 0 1
20553: PUSH
20554: DOUBLE
20555: LD_INT 1
20557: DEC
20558: ST_TO_ADDR
20559: LD_INT 6
20561: PUSH
20562: FOR_TO
20563: IFFALSE 20668
// begin uc_nation := nation_nature ;
20565: LD_ADDR_OWVAR 21
20569: PUSH
20570: LD_INT 0
20572: ST_TO_ADDR
// uc_side := 0 ;
20573: LD_ADDR_OWVAR 20
20577: PUSH
20578: LD_INT 0
20580: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20581: LD_ADDR_OWVAR 29
20585: PUSH
20586: LD_INT 12
20588: PUSH
20589: LD_INT 12
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: ST_TO_ADDR
// hc_agressivity := 20 ;
20596: LD_ADDR_OWVAR 35
20600: PUSH
20601: LD_INT 20
20603: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20604: LD_ADDR_OWVAR 28
20608: PUSH
20609: LD_INT 17
20611: ST_TO_ADDR
// hc_gallery :=  ;
20612: LD_ADDR_OWVAR 33
20616: PUSH
20617: LD_STRING 
20619: ST_TO_ADDR
// hc_name :=  ;
20620: LD_ADDR_OWVAR 26
20624: PUSH
20625: LD_STRING 
20627: ST_TO_ADDR
// un := CreateHuman ;
20628: LD_ADDR_VAR 0 2
20632: PUSH
20633: CALL_OW 44
20637: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20638: LD_VAR 0 2
20642: PPUSH
20643: LD_INT 1
20645: PPUSH
20646: CALL_OW 51
// tmp := tmp ^ un ;
20650: LD_ADDR_VAR 0 3
20654: PUSH
20655: LD_VAR 0 3
20659: PUSH
20660: LD_VAR 0 2
20664: ADD
20665: ST_TO_ADDR
// end ;
20666: GO 20562
20668: POP
20669: POP
// repeat wait ( 0 0$1 ) ;
20670: LD_INT 35
20672: PPUSH
20673: CALL_OW 67
// for un in tmp do
20677: LD_ADDR_VAR 0 2
20681: PUSH
20682: LD_VAR 0 3
20686: PUSH
20687: FOR_IN
20688: IFFALSE 20762
// begin if IsDead ( un ) then
20690: LD_VAR 0 2
20694: PPUSH
20695: CALL_OW 301
20699: IFFALSE 20719
// begin tmp := tmp diff un ;
20701: LD_ADDR_VAR 0 3
20705: PUSH
20706: LD_VAR 0 3
20710: PUSH
20711: LD_VAR 0 2
20715: DIFF
20716: ST_TO_ADDR
// continue ;
20717: GO 20687
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20719: LD_VAR 0 2
20723: PPUSH
20724: LD_INT 3
20726: PUSH
20727: LD_INT 22
20729: PUSH
20730: LD_INT 0
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PPUSH
20741: CALL_OW 69
20745: PPUSH
20746: LD_VAR 0 2
20750: PPUSH
20751: CALL_OW 74
20755: PPUSH
20756: CALL_OW 115
// end ;
20760: GO 20687
20762: POP
20763: POP
// until not tmp ;
20764: LD_VAR 0 3
20768: NOT
20769: IFFALSE 20670
// end ;
20771: PPOPN 3
20773: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20774: LD_EXP 22
20778: PUSH
20779: LD_EXP 47
20783: AND
20784: IFFALSE 20838
20786: GO 20788
20788: DISABLE
// begin ToLua ( displayTroll(); ) ;
20789: LD_STRING displayTroll();
20791: PPUSH
20792: CALL_OW 559
// wait ( 3 3$00 ) ;
20796: LD_INT 6300
20798: PPUSH
20799: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20803: LD_STRING hideTroll();
20805: PPUSH
20806: CALL_OW 559
// wait ( 1 1$00 ) ;
20810: LD_INT 2100
20812: PPUSH
20813: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20817: LD_STRING displayTroll();
20819: PPUSH
20820: CALL_OW 559
// wait ( 1 1$00 ) ;
20824: LD_INT 2100
20826: PPUSH
20827: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20831: LD_STRING hideTroll();
20833: PPUSH
20834: CALL_OW 559
// end ;
20838: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20839: LD_EXP 22
20843: PUSH
20844: LD_EXP 48
20848: AND
20849: IFFALSE 20912
20851: GO 20853
20853: DISABLE
20854: LD_INT 0
20856: PPUSH
// begin p := 0 ;
20857: LD_ADDR_VAR 0 1
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// repeat game_speed := 1 ;
20865: LD_ADDR_OWVAR 65
20869: PUSH
20870: LD_INT 1
20872: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20873: LD_INT 35
20875: PPUSH
20876: CALL_OW 67
// p := p + 1 ;
20880: LD_ADDR_VAR 0 1
20884: PUSH
20885: LD_VAR 0 1
20889: PUSH
20890: LD_INT 1
20892: PLUS
20893: ST_TO_ADDR
// until p >= 60 ;
20894: LD_VAR 0 1
20898: PUSH
20899: LD_INT 60
20901: GREATEREQUAL
20902: IFFALSE 20865
// game_speed := 4 ;
20904: LD_ADDR_OWVAR 65
20908: PUSH
20909: LD_INT 4
20911: ST_TO_ADDR
// end ;
20912: PPOPN 1
20914: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20915: LD_EXP 22
20919: PUSH
20920: LD_EXP 49
20924: AND
20925: IFFALSE 21071
20927: GO 20929
20929: DISABLE
20930: LD_INT 0
20932: PPUSH
20933: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20934: LD_ADDR_VAR 0 1
20938: PUSH
20939: LD_INT 22
20941: PUSH
20942: LD_OWVAR 2
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 2
20953: PUSH
20954: LD_INT 30
20956: PUSH
20957: LD_INT 0
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 30
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: LIST
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PPUSH
20983: CALL_OW 69
20987: ST_TO_ADDR
// if not depot then
20988: LD_VAR 0 1
20992: NOT
20993: IFFALSE 20997
// exit ;
20995: GO 21071
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20997: LD_ADDR_VAR 0 2
21001: PUSH
21002: LD_VAR 0 1
21006: PUSH
21007: LD_INT 1
21009: PPUSH
21010: LD_VAR 0 1
21014: PPUSH
21015: CALL_OW 12
21019: ARRAY
21020: PPUSH
21021: CALL_OW 274
21025: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21026: LD_VAR 0 2
21030: PPUSH
21031: LD_INT 1
21033: PPUSH
21034: LD_INT 0
21036: PPUSH
21037: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21041: LD_VAR 0 2
21045: PPUSH
21046: LD_INT 2
21048: PPUSH
21049: LD_INT 0
21051: PPUSH
21052: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21056: LD_VAR 0 2
21060: PPUSH
21061: LD_INT 3
21063: PPUSH
21064: LD_INT 0
21066: PPUSH
21067: CALL_OW 277
// end ;
21071: PPOPN 2
21073: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21074: LD_EXP 22
21078: PUSH
21079: LD_EXP 50
21083: AND
21084: IFFALSE 21181
21086: GO 21088
21088: DISABLE
21089: LD_INT 0
21091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21092: LD_ADDR_VAR 0 1
21096: PUSH
21097: LD_INT 22
21099: PUSH
21100: LD_OWVAR 2
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 21
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 3
21121: PUSH
21122: LD_INT 23
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: PPUSH
21141: CALL_OW 69
21145: ST_TO_ADDR
// if not tmp then
21146: LD_VAR 0 1
21150: NOT
21151: IFFALSE 21155
// exit ;
21153: GO 21181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21155: LD_VAR 0 1
21159: PUSH
21160: LD_INT 1
21162: PPUSH
21163: LD_VAR 0 1
21167: PPUSH
21168: CALL_OW 12
21172: ARRAY
21173: PPUSH
21174: LD_INT 200
21176: PPUSH
21177: CALL_OW 234
// end ;
21181: PPOPN 1
21183: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21184: LD_EXP 22
21188: PUSH
21189: LD_EXP 51
21193: AND
21194: IFFALSE 21273
21196: GO 21198
21198: DISABLE
21199: LD_INT 0
21201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21202: LD_ADDR_VAR 0 1
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_OWVAR 2
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 21
21221: PUSH
21222: LD_INT 2
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PPUSH
21233: CALL_OW 69
21237: ST_TO_ADDR
// if not tmp then
21238: LD_VAR 0 1
21242: NOT
21243: IFFALSE 21247
// exit ;
21245: GO 21273
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21247: LD_VAR 0 1
21251: PUSH
21252: LD_INT 1
21254: PPUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL_OW 12
21264: ARRAY
21265: PPUSH
21266: LD_INT 60
21268: PPUSH
21269: CALL_OW 234
// end ;
21273: PPOPN 1
21275: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21276: LD_EXP 22
21280: PUSH
21281: LD_EXP 52
21285: AND
21286: IFFALSE 21385
21288: GO 21290
21290: DISABLE
21291: LD_INT 0
21293: PPUSH
21294: PPUSH
// begin enable ;
21295: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21296: LD_ADDR_VAR 0 1
21300: PUSH
21301: LD_INT 22
21303: PUSH
21304: LD_OWVAR 2
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 61
21315: PUSH
21316: EMPTY
21317: LIST
21318: PUSH
21319: LD_INT 33
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: PPUSH
21334: CALL_OW 69
21338: ST_TO_ADDR
// if not tmp then
21339: LD_VAR 0 1
21343: NOT
21344: IFFALSE 21348
// exit ;
21346: GO 21385
// for i in tmp do
21348: LD_ADDR_VAR 0 2
21352: PUSH
21353: LD_VAR 0 1
21357: PUSH
21358: FOR_IN
21359: IFFALSE 21383
// if IsControledBy ( i ) then
21361: LD_VAR 0 2
21365: PPUSH
21366: CALL_OW 312
21370: IFFALSE 21381
// ComUnlink ( i ) ;
21372: LD_VAR 0 2
21376: PPUSH
21377: CALL_OW 136
21381: GO 21358
21383: POP
21384: POP
// end ;
21385: PPOPN 2
21387: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21388: LD_EXP 22
21392: PUSH
21393: LD_EXP 53
21397: AND
21398: IFFALSE 21538
21400: GO 21402
21402: DISABLE
21403: LD_INT 0
21405: PPUSH
21406: PPUSH
// begin ToLua ( displayPowell(); ) ;
21407: LD_STRING displayPowell();
21409: PPUSH
21410: CALL_OW 559
// uc_side := 0 ;
21414: LD_ADDR_OWVAR 20
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// uc_nation := 2 ;
21422: LD_ADDR_OWVAR 21
21426: PUSH
21427: LD_INT 2
21429: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21430: LD_ADDR_OWVAR 37
21434: PUSH
21435: LD_INT 14
21437: ST_TO_ADDR
// vc_engine := engine_siberite ;
21438: LD_ADDR_OWVAR 39
21442: PUSH
21443: LD_INT 3
21445: ST_TO_ADDR
// vc_control := control_apeman ;
21446: LD_ADDR_OWVAR 38
21450: PUSH
21451: LD_INT 5
21453: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21454: LD_ADDR_OWVAR 40
21458: PUSH
21459: LD_INT 29
21461: ST_TO_ADDR
// un := CreateVehicle ;
21462: LD_ADDR_VAR 0 2
21466: PUSH
21467: CALL_OW 45
21471: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21472: LD_VAR 0 2
21476: PPUSH
21477: LD_INT 1
21479: PPUSH
21480: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21484: LD_INT 35
21486: PPUSH
21487: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21491: LD_VAR 0 2
21495: PPUSH
21496: LD_INT 22
21498: PUSH
21499: LD_OWVAR 2
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PPUSH
21508: CALL_OW 69
21512: PPUSH
21513: LD_VAR 0 2
21517: PPUSH
21518: CALL_OW 74
21522: PPUSH
21523: CALL_OW 115
// until IsDead ( un ) ;
21527: LD_VAR 0 2
21531: PPUSH
21532: CALL_OW 301
21536: IFFALSE 21484
// end ;
21538: PPOPN 2
21540: END
// every 0 0$1 trigger StreamModeActive and sStu do
21541: LD_EXP 22
21545: PUSH
21546: LD_EXP 61
21550: AND
21551: IFFALSE 21567
21553: GO 21555
21555: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21556: LD_STRING displayStucuk();
21558: PPUSH
21559: CALL_OW 559
// ResetFog ;
21563: CALL_OW 335
// end ;
21567: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21568: LD_EXP 22
21572: PUSH
21573: LD_EXP 54
21577: AND
21578: IFFALSE 21719
21580: GO 21582
21582: DISABLE
21583: LD_INT 0
21585: PPUSH
21586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21587: LD_ADDR_VAR 0 2
21591: PUSH
21592: LD_INT 22
21594: PUSH
21595: LD_OWVAR 2
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 21
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PPUSH
21618: CALL_OW 69
21622: ST_TO_ADDR
// if not tmp then
21623: LD_VAR 0 2
21627: NOT
21628: IFFALSE 21632
// exit ;
21630: GO 21719
// un := tmp [ rand ( 1 , tmp ) ] ;
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_VAR 0 2
21641: PUSH
21642: LD_INT 1
21644: PPUSH
21645: LD_VAR 0 2
21649: PPUSH
21650: CALL_OW 12
21654: ARRAY
21655: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21656: LD_VAR 0 1
21660: PPUSH
21661: LD_INT 0
21663: PPUSH
21664: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21668: LD_VAR 0 1
21672: PPUSH
21673: LD_OWVAR 3
21677: PUSH
21678: LD_VAR 0 1
21682: DIFF
21683: PPUSH
21684: LD_VAR 0 1
21688: PPUSH
21689: CALL_OW 74
21693: PPUSH
21694: CALL_OW 115
// wait ( 0 0$20 ) ;
21698: LD_INT 700
21700: PPUSH
21701: CALL_OW 67
// SetSide ( un , your_side ) ;
21705: LD_VAR 0 1
21709: PPUSH
21710: LD_OWVAR 2
21714: PPUSH
21715: CALL_OW 235
// end ;
21719: PPOPN 2
21721: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21722: LD_EXP 22
21726: PUSH
21727: LD_EXP 55
21731: AND
21732: IFFALSE 21838
21734: GO 21736
21736: DISABLE
21737: LD_INT 0
21739: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21740: LD_ADDR_VAR 0 1
21744: PUSH
21745: LD_INT 22
21747: PUSH
21748: LD_OWVAR 2
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 30
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 30
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PPUSH
21789: CALL_OW 69
21793: ST_TO_ADDR
// if not depot then
21794: LD_VAR 0 1
21798: NOT
21799: IFFALSE 21803
// exit ;
21801: GO 21838
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21803: LD_VAR 0 1
21807: PUSH
21808: LD_INT 1
21810: ARRAY
21811: PPUSH
21812: CALL_OW 250
21816: PPUSH
21817: LD_VAR 0 1
21821: PUSH
21822: LD_INT 1
21824: ARRAY
21825: PPUSH
21826: CALL_OW 251
21830: PPUSH
21831: LD_INT 70
21833: PPUSH
21834: CALL_OW 495
// end ;
21838: PPOPN 1
21840: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21841: LD_EXP 22
21845: PUSH
21846: LD_EXP 56
21850: AND
21851: IFFALSE 22062
21853: GO 21855
21855: DISABLE
21856: LD_INT 0
21858: PPUSH
21859: PPUSH
21860: PPUSH
21861: PPUSH
21862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21863: LD_ADDR_VAR 0 5
21867: PUSH
21868: LD_INT 22
21870: PUSH
21871: LD_OWVAR 2
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 21
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PPUSH
21894: CALL_OW 69
21898: ST_TO_ADDR
// if not tmp then
21899: LD_VAR 0 5
21903: NOT
21904: IFFALSE 21908
// exit ;
21906: GO 22062
// for i in tmp do
21908: LD_ADDR_VAR 0 1
21912: PUSH
21913: LD_VAR 0 5
21917: PUSH
21918: FOR_IN
21919: IFFALSE 22060
// begin d := rand ( 0 , 5 ) ;
21921: LD_ADDR_VAR 0 4
21925: PUSH
21926: LD_INT 0
21928: PPUSH
21929: LD_INT 5
21931: PPUSH
21932: CALL_OW 12
21936: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21937: LD_ADDR_VAR 0 2
21941: PUSH
21942: LD_VAR 0 1
21946: PPUSH
21947: CALL_OW 250
21951: PPUSH
21952: LD_VAR 0 4
21956: PPUSH
21957: LD_INT 3
21959: PPUSH
21960: LD_INT 12
21962: PPUSH
21963: CALL_OW 12
21967: PPUSH
21968: CALL_OW 272
21972: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21973: LD_ADDR_VAR 0 3
21977: PUSH
21978: LD_VAR 0 1
21982: PPUSH
21983: CALL_OW 251
21987: PPUSH
21988: LD_VAR 0 4
21992: PPUSH
21993: LD_INT 3
21995: PPUSH
21996: LD_INT 12
21998: PPUSH
21999: CALL_OW 12
22003: PPUSH
22004: CALL_OW 273
22008: ST_TO_ADDR
// if ValidHex ( x , y ) then
22009: LD_VAR 0 2
22013: PPUSH
22014: LD_VAR 0 3
22018: PPUSH
22019: CALL_OW 488
22023: IFFALSE 22058
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22025: LD_VAR 0 1
22029: PPUSH
22030: LD_VAR 0 2
22034: PPUSH
22035: LD_VAR 0 3
22039: PPUSH
22040: LD_INT 3
22042: PPUSH
22043: LD_INT 6
22045: PPUSH
22046: CALL_OW 12
22050: PPUSH
22051: LD_INT 1
22053: PPUSH
22054: CALL_OW 483
// end ;
22058: GO 21918
22060: POP
22061: POP
// end ;
22062: PPOPN 5
22064: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22065: LD_EXP 22
22069: PUSH
22070: LD_EXP 57
22074: AND
22075: IFFALSE 22169
22077: GO 22079
22079: DISABLE
22080: LD_INT 0
22082: PPUSH
22083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22084: LD_ADDR_VAR 0 2
22088: PUSH
22089: LD_INT 22
22091: PUSH
22092: LD_OWVAR 2
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 32
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 21
22113: PUSH
22114: LD_INT 2
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: PPUSH
22126: CALL_OW 69
22130: ST_TO_ADDR
// if not tmp then
22131: LD_VAR 0 2
22135: NOT
22136: IFFALSE 22140
// exit ;
22138: GO 22169
// for i in tmp do
22140: LD_ADDR_VAR 0 1
22144: PUSH
22145: LD_VAR 0 2
22149: PUSH
22150: FOR_IN
22151: IFFALSE 22167
// SetFuel ( i , 0 ) ;
22153: LD_VAR 0 1
22157: PPUSH
22158: LD_INT 0
22160: PPUSH
22161: CALL_OW 240
22165: GO 22150
22167: POP
22168: POP
// end ;
22169: PPOPN 2
22171: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22172: LD_EXP 22
22176: PUSH
22177: LD_EXP 58
22181: AND
22182: IFFALSE 22248
22184: GO 22186
22186: DISABLE
22187: LD_INT 0
22189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22190: LD_ADDR_VAR 0 1
22194: PUSH
22195: LD_INT 22
22197: PUSH
22198: LD_OWVAR 2
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 30
22209: PUSH
22210: LD_INT 29
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PPUSH
22221: CALL_OW 69
22225: ST_TO_ADDR
// if not tmp then
22226: LD_VAR 0 1
22230: NOT
22231: IFFALSE 22235
// exit ;
22233: GO 22248
// DestroyUnit ( tmp [ 1 ] ) ;
22235: LD_VAR 0 1
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: CALL_OW 65
// end ;
22248: PPOPN 1
22250: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22251: LD_EXP 22
22255: PUSH
22256: LD_EXP 60
22260: AND
22261: IFFALSE 22390
22263: GO 22265
22265: DISABLE
22266: LD_INT 0
22268: PPUSH
// begin uc_side := 0 ;
22269: LD_ADDR_OWVAR 20
22273: PUSH
22274: LD_INT 0
22276: ST_TO_ADDR
// uc_nation := nation_arabian ;
22277: LD_ADDR_OWVAR 21
22281: PUSH
22282: LD_INT 2
22284: ST_TO_ADDR
// hc_gallery :=  ;
22285: LD_ADDR_OWVAR 33
22289: PUSH
22290: LD_STRING 
22292: ST_TO_ADDR
// hc_name :=  ;
22293: LD_ADDR_OWVAR 26
22297: PUSH
22298: LD_STRING 
22300: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22301: LD_INT 1
22303: PPUSH
22304: LD_INT 11
22306: PPUSH
22307: LD_INT 10
22309: PPUSH
22310: CALL_OW 380
// un := CreateHuman ;
22314: LD_ADDR_VAR 0 1
22318: PUSH
22319: CALL_OW 44
22323: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22324: LD_VAR 0 1
22328: PPUSH
22329: LD_INT 1
22331: PPUSH
22332: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22336: LD_INT 35
22338: PPUSH
22339: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22343: LD_VAR 0 1
22347: PPUSH
22348: LD_INT 22
22350: PUSH
22351: LD_OWVAR 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PPUSH
22360: CALL_OW 69
22364: PPUSH
22365: LD_VAR 0 1
22369: PPUSH
22370: CALL_OW 74
22374: PPUSH
22375: CALL_OW 115
// until IsDead ( un ) ;
22379: LD_VAR 0 1
22383: PPUSH
22384: CALL_OW 301
22388: IFFALSE 22336
// end ;
22390: PPOPN 1
22392: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22393: LD_EXP 22
22397: PUSH
22398: LD_EXP 62
22402: AND
22403: IFFALSE 22415
22405: GO 22407
22407: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22408: LD_STRING earthquake(getX(game), 0, 32)
22410: PPUSH
22411: CALL_OW 559
22415: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22416: LD_EXP 22
22420: PUSH
22421: LD_EXP 63
22425: AND
22426: IFFALSE 22517
22428: GO 22430
22430: DISABLE
22431: LD_INT 0
22433: PPUSH
// begin enable ;
22434: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22435: LD_ADDR_VAR 0 1
22439: PUSH
22440: LD_INT 22
22442: PUSH
22443: LD_OWVAR 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 21
22454: PUSH
22455: LD_INT 2
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 33
22464: PUSH
22465: LD_INT 3
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 69
22481: ST_TO_ADDR
// if not tmp then
22482: LD_VAR 0 1
22486: NOT
22487: IFFALSE 22491
// exit ;
22489: GO 22517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22491: LD_VAR 0 1
22495: PUSH
22496: LD_INT 1
22498: PPUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 12
22508: ARRAY
22509: PPUSH
22510: LD_INT 1
22512: PPUSH
22513: CALL_OW 234
// end ;
22517: PPOPN 1
22519: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22520: LD_EXP 22
22524: PUSH
22525: LD_EXP 64
22529: AND
22530: IFFALSE 22671
22532: GO 22534
22534: DISABLE
22535: LD_INT 0
22537: PPUSH
22538: PPUSH
22539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22540: LD_ADDR_VAR 0 3
22544: PUSH
22545: LD_INT 22
22547: PUSH
22548: LD_OWVAR 2
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 25
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PPUSH
22571: CALL_OW 69
22575: ST_TO_ADDR
// if not tmp then
22576: LD_VAR 0 3
22580: NOT
22581: IFFALSE 22585
// exit ;
22583: GO 22671
// un := tmp [ rand ( 1 , tmp ) ] ;
22585: LD_ADDR_VAR 0 2
22589: PUSH
22590: LD_VAR 0 3
22594: PUSH
22595: LD_INT 1
22597: PPUSH
22598: LD_VAR 0 3
22602: PPUSH
22603: CALL_OW 12
22607: ARRAY
22608: ST_TO_ADDR
// if Crawls ( un ) then
22609: LD_VAR 0 2
22613: PPUSH
22614: CALL_OW 318
22618: IFFALSE 22629
// ComWalk ( un ) ;
22620: LD_VAR 0 2
22624: PPUSH
22625: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22629: LD_VAR 0 2
22633: PPUSH
22634: LD_INT 9
22636: PPUSH
22637: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22641: LD_INT 28
22643: PPUSH
22644: LD_OWVAR 2
22648: PPUSH
22649: LD_INT 2
22651: PPUSH
22652: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22656: LD_INT 29
22658: PPUSH
22659: LD_OWVAR 2
22663: PPUSH
22664: LD_INT 2
22666: PPUSH
22667: CALL_OW 322
// end ;
22671: PPOPN 3
22673: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22674: LD_EXP 22
22678: PUSH
22679: LD_EXP 65
22683: AND
22684: IFFALSE 22795
22686: GO 22688
22688: DISABLE
22689: LD_INT 0
22691: PPUSH
22692: PPUSH
22693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22694: LD_ADDR_VAR 0 3
22698: PUSH
22699: LD_INT 22
22701: PUSH
22702: LD_OWVAR 2
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 25
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PPUSH
22725: CALL_OW 69
22729: ST_TO_ADDR
// if not tmp then
22730: LD_VAR 0 3
22734: NOT
22735: IFFALSE 22739
// exit ;
22737: GO 22795
// un := tmp [ rand ( 1 , tmp ) ] ;
22739: LD_ADDR_VAR 0 2
22743: PUSH
22744: LD_VAR 0 3
22748: PUSH
22749: LD_INT 1
22751: PPUSH
22752: LD_VAR 0 3
22756: PPUSH
22757: CALL_OW 12
22761: ARRAY
22762: ST_TO_ADDR
// if Crawls ( un ) then
22763: LD_VAR 0 2
22767: PPUSH
22768: CALL_OW 318
22772: IFFALSE 22783
// ComWalk ( un ) ;
22774: LD_VAR 0 2
22778: PPUSH
22779: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22783: LD_VAR 0 2
22787: PPUSH
22788: LD_INT 8
22790: PPUSH
22791: CALL_OW 336
// end ;
22795: PPOPN 3
22797: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22798: LD_EXP 22
22802: PUSH
22803: LD_EXP 66
22807: AND
22808: IFFALSE 22952
22810: GO 22812
22812: DISABLE
22813: LD_INT 0
22815: PPUSH
22816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22817: LD_ADDR_VAR 0 2
22821: PUSH
22822: LD_INT 22
22824: PUSH
22825: LD_OWVAR 2
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 21
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: LD_INT 34
22849: PUSH
22850: LD_INT 12
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 34
22859: PUSH
22860: LD_INT 51
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 34
22869: PUSH
22870: LD_INT 32
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: PPUSH
22888: CALL_OW 69
22892: ST_TO_ADDR
// if not tmp then
22893: LD_VAR 0 2
22897: NOT
22898: IFFALSE 22902
// exit ;
22900: GO 22952
// for i in tmp do
22902: LD_ADDR_VAR 0 1
22906: PUSH
22907: LD_VAR 0 2
22911: PUSH
22912: FOR_IN
22913: IFFALSE 22950
// if GetCargo ( i , mat_artifact ) = 0 then
22915: LD_VAR 0 1
22919: PPUSH
22920: LD_INT 4
22922: PPUSH
22923: CALL_OW 289
22927: PUSH
22928: LD_INT 0
22930: EQUAL
22931: IFFALSE 22948
// SetCargo ( i , mat_siberit , 100 ) ;
22933: LD_VAR 0 1
22937: PPUSH
22938: LD_INT 3
22940: PPUSH
22941: LD_INT 100
22943: PPUSH
22944: CALL_OW 290
22948: GO 22912
22950: POP
22951: POP
// end ;
22952: PPOPN 2
22954: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22955: LD_EXP 22
22959: PUSH
22960: LD_EXP 67
22964: AND
22965: IFFALSE 23148
22967: GO 22969
22969: DISABLE
22970: LD_INT 0
22972: PPUSH
22973: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22974: LD_ADDR_VAR 0 2
22978: PUSH
22979: LD_INT 22
22981: PUSH
22982: LD_OWVAR 2
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PPUSH
22991: CALL_OW 69
22995: ST_TO_ADDR
// if not tmp then
22996: LD_VAR 0 2
23000: NOT
23001: IFFALSE 23005
// exit ;
23003: GO 23148
// for i := 1 to 2 do
23005: LD_ADDR_VAR 0 1
23009: PUSH
23010: DOUBLE
23011: LD_INT 1
23013: DEC
23014: ST_TO_ADDR
23015: LD_INT 2
23017: PUSH
23018: FOR_TO
23019: IFFALSE 23146
// begin uc_side := your_side ;
23021: LD_ADDR_OWVAR 20
23025: PUSH
23026: LD_OWVAR 2
23030: ST_TO_ADDR
// uc_nation := nation_american ;
23031: LD_ADDR_OWVAR 21
23035: PUSH
23036: LD_INT 1
23038: ST_TO_ADDR
// vc_chassis := us_morphling ;
23039: LD_ADDR_OWVAR 37
23043: PUSH
23044: LD_INT 5
23046: ST_TO_ADDR
// vc_engine := engine_siberite ;
23047: LD_ADDR_OWVAR 39
23051: PUSH
23052: LD_INT 3
23054: ST_TO_ADDR
// vc_control := control_computer ;
23055: LD_ADDR_OWVAR 38
23059: PUSH
23060: LD_INT 3
23062: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23063: LD_ADDR_OWVAR 40
23067: PUSH
23068: LD_INT 10
23070: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23071: LD_VAR 0 2
23075: PUSH
23076: LD_INT 1
23078: ARRAY
23079: PPUSH
23080: CALL_OW 310
23084: NOT
23085: IFFALSE 23132
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23087: CALL_OW 45
23091: PPUSH
23092: LD_VAR 0 2
23096: PUSH
23097: LD_INT 1
23099: ARRAY
23100: PPUSH
23101: CALL_OW 250
23105: PPUSH
23106: LD_VAR 0 2
23110: PUSH
23111: LD_INT 1
23113: ARRAY
23114: PPUSH
23115: CALL_OW 251
23119: PPUSH
23120: LD_INT 12
23122: PPUSH
23123: LD_INT 1
23125: PPUSH
23126: CALL_OW 50
23130: GO 23144
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23132: CALL_OW 45
23136: PPUSH
23137: LD_INT 1
23139: PPUSH
23140: CALL_OW 51
// end ;
23144: GO 23018
23146: POP
23147: POP
// end ;
23148: PPOPN 2
23150: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23151: LD_EXP 22
23155: PUSH
23156: LD_EXP 68
23160: AND
23161: IFFALSE 23383
23163: GO 23165
23165: DISABLE
23166: LD_INT 0
23168: PPUSH
23169: PPUSH
23170: PPUSH
23171: PPUSH
23172: PPUSH
23173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23174: LD_ADDR_VAR 0 6
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_OWVAR 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: LD_INT 23
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: ST_TO_ADDR
// if not tmp then
23228: LD_VAR 0 6
23232: NOT
23233: IFFALSE 23237
// exit ;
23235: GO 23383
// s1 := rand ( 1 , 4 ) ;
23237: LD_ADDR_VAR 0 2
23241: PUSH
23242: LD_INT 1
23244: PPUSH
23245: LD_INT 4
23247: PPUSH
23248: CALL_OW 12
23252: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23253: LD_ADDR_VAR 0 4
23257: PUSH
23258: LD_VAR 0 6
23262: PUSH
23263: LD_INT 1
23265: ARRAY
23266: PPUSH
23267: LD_VAR 0 2
23271: PPUSH
23272: CALL_OW 259
23276: ST_TO_ADDR
// if s1 = 1 then
23277: LD_VAR 0 2
23281: PUSH
23282: LD_INT 1
23284: EQUAL
23285: IFFALSE 23305
// s2 := rand ( 2 , 4 ) else
23287: LD_ADDR_VAR 0 3
23291: PUSH
23292: LD_INT 2
23294: PPUSH
23295: LD_INT 4
23297: PPUSH
23298: CALL_OW 12
23302: ST_TO_ADDR
23303: GO 23313
// s2 := 1 ;
23305: LD_ADDR_VAR 0 3
23309: PUSH
23310: LD_INT 1
23312: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23313: LD_ADDR_VAR 0 5
23317: PUSH
23318: LD_VAR 0 6
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PPUSH
23327: LD_VAR 0 3
23331: PPUSH
23332: CALL_OW 259
23336: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23337: LD_VAR 0 6
23341: PUSH
23342: LD_INT 1
23344: ARRAY
23345: PPUSH
23346: LD_VAR 0 2
23350: PPUSH
23351: LD_VAR 0 5
23355: PPUSH
23356: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23360: LD_VAR 0 6
23364: PUSH
23365: LD_INT 1
23367: ARRAY
23368: PPUSH
23369: LD_VAR 0 3
23373: PPUSH
23374: LD_VAR 0 4
23378: PPUSH
23379: CALL_OW 237
// end ;
23383: PPOPN 6
23385: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23386: LD_EXP 22
23390: PUSH
23391: LD_EXP 69
23395: AND
23396: IFFALSE 23475
23398: GO 23400
23400: DISABLE
23401: LD_INT 0
23403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23404: LD_ADDR_VAR 0 1
23408: PUSH
23409: LD_INT 22
23411: PUSH
23412: LD_OWVAR 2
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 30
23423: PUSH
23424: LD_INT 3
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PPUSH
23435: CALL_OW 69
23439: ST_TO_ADDR
// if not tmp then
23440: LD_VAR 0 1
23444: NOT
23445: IFFALSE 23449
// exit ;
23447: GO 23475
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23449: LD_VAR 0 1
23453: PUSH
23454: LD_INT 1
23456: PPUSH
23457: LD_VAR 0 1
23461: PPUSH
23462: CALL_OW 12
23466: ARRAY
23467: PPUSH
23468: LD_INT 1
23470: PPUSH
23471: CALL_OW 234
// end ;
23475: PPOPN 1
23477: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23478: LD_EXP 22
23482: PUSH
23483: LD_EXP 70
23487: AND
23488: IFFALSE 23600
23490: GO 23492
23492: DISABLE
23493: LD_INT 0
23495: PPUSH
23496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23497: LD_ADDR_VAR 0 2
23501: PUSH
23502: LD_INT 22
23504: PUSH
23505: LD_OWVAR 2
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: LD_INT 30
23519: PUSH
23520: LD_INT 27
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 30
23529: PUSH
23530: LD_INT 26
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 30
23539: PUSH
23540: LD_INT 28
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PPUSH
23557: CALL_OW 69
23561: ST_TO_ADDR
// if not tmp then
23562: LD_VAR 0 2
23566: NOT
23567: IFFALSE 23571
// exit ;
23569: GO 23600
// for i in tmp do
23571: LD_ADDR_VAR 0 1
23575: PUSH
23576: LD_VAR 0 2
23580: PUSH
23581: FOR_IN
23582: IFFALSE 23598
// SetLives ( i , 1 ) ;
23584: LD_VAR 0 1
23588: PPUSH
23589: LD_INT 1
23591: PPUSH
23592: CALL_OW 234
23596: GO 23581
23598: POP
23599: POP
// end ;
23600: PPOPN 2
23602: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23603: LD_EXP 22
23607: PUSH
23608: LD_EXP 71
23612: AND
23613: IFFALSE 23900
23615: GO 23617
23617: DISABLE
23618: LD_INT 0
23620: PPUSH
23621: PPUSH
23622: PPUSH
// begin i := rand ( 1 , 7 ) ;
23623: LD_ADDR_VAR 0 1
23627: PUSH
23628: LD_INT 1
23630: PPUSH
23631: LD_INT 7
23633: PPUSH
23634: CALL_OW 12
23638: ST_TO_ADDR
// case i of 1 :
23639: LD_VAR 0 1
23643: PUSH
23644: LD_INT 1
23646: DOUBLE
23647: EQUAL
23648: IFTRUE 23652
23650: GO 23662
23652: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23653: LD_STRING earthquake(getX(game), 0, 32)
23655: PPUSH
23656: CALL_OW 559
23660: GO 23900
23662: LD_INT 2
23664: DOUBLE
23665: EQUAL
23666: IFTRUE 23670
23668: GO 23684
23670: POP
// begin ToLua ( displayStucuk(); ) ;
23671: LD_STRING displayStucuk();
23673: PPUSH
23674: CALL_OW 559
// ResetFog ;
23678: CALL_OW 335
// end ; 3 :
23682: GO 23900
23684: LD_INT 3
23686: DOUBLE
23687: EQUAL
23688: IFTRUE 23692
23690: GO 23796
23692: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23693: LD_ADDR_VAR 0 2
23697: PUSH
23698: LD_INT 22
23700: PUSH
23701: LD_OWVAR 2
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 25
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PPUSH
23724: CALL_OW 69
23728: ST_TO_ADDR
// if not tmp then
23729: LD_VAR 0 2
23733: NOT
23734: IFFALSE 23738
// exit ;
23736: GO 23900
// un := tmp [ rand ( 1 , tmp ) ] ;
23738: LD_ADDR_VAR 0 3
23742: PUSH
23743: LD_VAR 0 2
23747: PUSH
23748: LD_INT 1
23750: PPUSH
23751: LD_VAR 0 2
23755: PPUSH
23756: CALL_OW 12
23760: ARRAY
23761: ST_TO_ADDR
// if Crawls ( un ) then
23762: LD_VAR 0 3
23766: PPUSH
23767: CALL_OW 318
23771: IFFALSE 23782
// ComWalk ( un ) ;
23773: LD_VAR 0 3
23777: PPUSH
23778: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23782: LD_VAR 0 3
23786: PPUSH
23787: LD_INT 8
23789: PPUSH
23790: CALL_OW 336
// end ; 4 :
23794: GO 23900
23796: LD_INT 4
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23878
23804: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_INT 22
23812: PUSH
23813: LD_OWVAR 2
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 30
23824: PUSH
23825: LD_INT 29
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PPUSH
23836: CALL_OW 69
23840: ST_TO_ADDR
// if not tmp then
23841: LD_VAR 0 2
23845: NOT
23846: IFFALSE 23850
// exit ;
23848: GO 23900
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23850: LD_VAR 0 2
23854: PUSH
23855: LD_INT 1
23857: ARRAY
23858: PPUSH
23859: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23863: LD_VAR 0 2
23867: PUSH
23868: LD_INT 1
23870: ARRAY
23871: PPUSH
23872: CALL_OW 65
// end ; 5 .. 7 :
23876: GO 23900
23878: LD_INT 5
23880: DOUBLE
23881: GREATEREQUAL
23882: IFFALSE 23890
23884: LD_INT 7
23886: DOUBLE
23887: LESSEQUAL
23888: IFTRUE 23892
23890: GO 23899
23892: POP
// StreamSibBomb ; end ;
23893: CALL 20137 0 0
23897: GO 23900
23899: POP
// end ;
23900: PPOPN 3
23902: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23903: LD_EXP 22
23907: PUSH
23908: LD_EXP 72
23912: AND
23913: IFFALSE 24069
23915: GO 23917
23917: DISABLE
23918: LD_INT 0
23920: PPUSH
23921: PPUSH
23922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23923: LD_ADDR_VAR 0 2
23927: PUSH
23928: LD_INT 81
23930: PUSH
23931: LD_OWVAR 2
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 2
23942: PUSH
23943: LD_INT 21
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 21
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PPUSH
23972: CALL_OW 69
23976: ST_TO_ADDR
// if not tmp then
23977: LD_VAR 0 2
23981: NOT
23982: IFFALSE 23986
// exit ;
23984: GO 24069
// p := 0 ;
23986: LD_ADDR_VAR 0 3
23990: PUSH
23991: LD_INT 0
23993: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23994: LD_INT 35
23996: PPUSH
23997: CALL_OW 67
// p := p + 1 ;
24001: LD_ADDR_VAR 0 3
24005: PUSH
24006: LD_VAR 0 3
24010: PUSH
24011: LD_INT 1
24013: PLUS
24014: ST_TO_ADDR
// for i in tmp do
24015: LD_ADDR_VAR 0 1
24019: PUSH
24020: LD_VAR 0 2
24024: PUSH
24025: FOR_IN
24026: IFFALSE 24057
// if GetLives ( i ) < 1000 then
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 256
24037: PUSH
24038: LD_INT 1000
24040: LESS
24041: IFFALSE 24055
// SetLives ( i , 1000 ) ;
24043: LD_VAR 0 1
24047: PPUSH
24048: LD_INT 1000
24050: PPUSH
24051: CALL_OW 234
24055: GO 24025
24057: POP
24058: POP
// until p > 20 ;
24059: LD_VAR 0 3
24063: PUSH
24064: LD_INT 20
24066: GREATER
24067: IFFALSE 23994
// end ;
24069: PPOPN 3
24071: END
// every 0 0$1 trigger StreamModeActive and sTime do
24072: LD_EXP 22
24076: PUSH
24077: LD_EXP 73
24081: AND
24082: IFFALSE 24117
24084: GO 24086
24086: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24087: LD_INT 28
24089: PPUSH
24090: LD_OWVAR 2
24094: PPUSH
24095: LD_INT 2
24097: PPUSH
24098: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24102: LD_INT 30
24104: PPUSH
24105: LD_OWVAR 2
24109: PPUSH
24110: LD_INT 2
24112: PPUSH
24113: CALL_OW 322
// end ;
24117: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24118: LD_EXP 22
24122: PUSH
24123: LD_EXP 74
24127: AND
24128: IFFALSE 24249
24130: GO 24132
24132: DISABLE
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: LD_INT 22
24144: PUSH
24145: LD_OWVAR 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 21
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 3
24166: PUSH
24167: LD_INT 23
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: LIST
24185: PPUSH
24186: CALL_OW 69
24190: ST_TO_ADDR
// if not tmp then
24191: LD_VAR 0 2
24195: NOT
24196: IFFALSE 24200
// exit ;
24198: GO 24249
// for i in tmp do
24200: LD_ADDR_VAR 0 1
24204: PUSH
24205: LD_VAR 0 2
24209: PUSH
24210: FOR_IN
24211: IFFALSE 24247
// begin if Crawls ( i ) then
24213: LD_VAR 0 1
24217: PPUSH
24218: CALL_OW 318
24222: IFFALSE 24233
// ComWalk ( i ) ;
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL_OW 138
// SetClass ( i , 2 ) ;
24233: LD_VAR 0 1
24237: PPUSH
24238: LD_INT 2
24240: PPUSH
24241: CALL_OW 336
// end ;
24245: GO 24210
24247: POP
24248: POP
// end ;
24249: PPOPN 2
24251: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24252: LD_EXP 22
24256: PUSH
24257: LD_EXP 75
24261: AND
24262: IFFALSE 24550
24264: GO 24266
24266: DISABLE
24267: LD_INT 0
24269: PPUSH
24270: PPUSH
24271: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24272: LD_OWVAR 2
24276: PPUSH
24277: LD_INT 9
24279: PPUSH
24280: LD_INT 1
24282: PPUSH
24283: LD_INT 1
24285: PPUSH
24286: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24290: LD_INT 9
24292: PPUSH
24293: LD_OWVAR 2
24297: PPUSH
24298: CALL_OW 343
// uc_side := 9 ;
24302: LD_ADDR_OWVAR 20
24306: PUSH
24307: LD_INT 9
24309: ST_TO_ADDR
// uc_nation := 2 ;
24310: LD_ADDR_OWVAR 21
24314: PUSH
24315: LD_INT 2
24317: ST_TO_ADDR
// hc_name := Dark Warrior ;
24318: LD_ADDR_OWVAR 26
24322: PUSH
24323: LD_STRING Dark Warrior
24325: ST_TO_ADDR
// hc_gallery :=  ;
24326: LD_ADDR_OWVAR 33
24330: PUSH
24331: LD_STRING 
24333: ST_TO_ADDR
// hc_noskilllimit := true ;
24334: LD_ADDR_OWVAR 76
24338: PUSH
24339: LD_INT 1
24341: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24342: LD_ADDR_OWVAR 31
24346: PUSH
24347: LD_INT 30
24349: PUSH
24350: LD_INT 30
24352: PUSH
24353: LD_INT 30
24355: PUSH
24356: LD_INT 30
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: ST_TO_ADDR
// un := CreateHuman ;
24365: LD_ADDR_VAR 0 3
24369: PUSH
24370: CALL_OW 44
24374: ST_TO_ADDR
// hc_noskilllimit := false ;
24375: LD_ADDR_OWVAR 76
24379: PUSH
24380: LD_INT 0
24382: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24383: LD_VAR 0 3
24387: PPUSH
24388: LD_INT 1
24390: PPUSH
24391: CALL_OW 51
// ToLua ( playRanger() ) ;
24395: LD_STRING playRanger()
24397: PPUSH
24398: CALL_OW 559
// p := 0 ;
24402: LD_ADDR_VAR 0 2
24406: PUSH
24407: LD_INT 0
24409: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24410: LD_INT 35
24412: PPUSH
24413: CALL_OW 67
// p := p + 1 ;
24417: LD_ADDR_VAR 0 2
24421: PUSH
24422: LD_VAR 0 2
24426: PUSH
24427: LD_INT 1
24429: PLUS
24430: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24431: LD_VAR 0 3
24435: PPUSH
24436: CALL_OW 256
24440: PUSH
24441: LD_INT 1000
24443: LESS
24444: IFFALSE 24458
// SetLives ( un , 1000 ) ;
24446: LD_VAR 0 3
24450: PPUSH
24451: LD_INT 1000
24453: PPUSH
24454: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24458: LD_VAR 0 3
24462: PPUSH
24463: LD_INT 81
24465: PUSH
24466: LD_OWVAR 2
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 91
24477: PUSH
24478: LD_VAR 0 3
24482: PUSH
24483: LD_INT 30
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 69
24499: PPUSH
24500: LD_VAR 0 3
24504: PPUSH
24505: CALL_OW 74
24509: PPUSH
24510: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24514: LD_VAR 0 2
24518: PUSH
24519: LD_INT 80
24521: GREATER
24522: PUSH
24523: LD_VAR 0 3
24527: PPUSH
24528: CALL_OW 301
24532: OR
24533: IFFALSE 24410
// if un then
24535: LD_VAR 0 3
24539: IFFALSE 24550
// RemoveUnit ( un ) ;
24541: LD_VAR 0 3
24545: PPUSH
24546: CALL_OW 64
// end ;
24550: PPOPN 3
24552: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24553: LD_EXP 76
24557: IFFALSE 24673
24559: GO 24561
24561: DISABLE
24562: LD_INT 0
24564: PPUSH
24565: PPUSH
24566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24567: LD_ADDR_VAR 0 2
24571: PUSH
24572: LD_INT 81
24574: PUSH
24575: LD_OWVAR 2
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 21
24586: PUSH
24587: LD_INT 1
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PPUSH
24598: CALL_OW 69
24602: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24603: LD_STRING playComputer()
24605: PPUSH
24606: CALL_OW 559
// if not tmp then
24610: LD_VAR 0 2
24614: NOT
24615: IFFALSE 24619
// exit ;
24617: GO 24673
// for i in tmp do
24619: LD_ADDR_VAR 0 1
24623: PUSH
24624: LD_VAR 0 2
24628: PUSH
24629: FOR_IN
24630: IFFALSE 24671
// for j := 1 to 4 do
24632: LD_ADDR_VAR 0 3
24636: PUSH
24637: DOUBLE
24638: LD_INT 1
24640: DEC
24641: ST_TO_ADDR
24642: LD_INT 4
24644: PUSH
24645: FOR_TO
24646: IFFALSE 24667
// SetSkill ( i , j , 10 ) ;
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_VAR 0 3
24657: PPUSH
24658: LD_INT 10
24660: PPUSH
24661: CALL_OW 237
24665: GO 24645
24667: POP
24668: POP
24669: GO 24629
24671: POP
24672: POP
// end ;
24673: PPOPN 3
24675: END
// every 0 0$1 trigger s30 do var i , tmp ;
24676: LD_EXP 77
24680: IFFALSE 24749
24682: GO 24684
24684: DISABLE
24685: LD_INT 0
24687: PPUSH
24688: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24689: LD_ADDR_VAR 0 2
24693: PUSH
24694: LD_INT 22
24696: PUSH
24697: LD_OWVAR 2
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PPUSH
24706: CALL_OW 69
24710: ST_TO_ADDR
// if not tmp then
24711: LD_VAR 0 2
24715: NOT
24716: IFFALSE 24720
// exit ;
24718: GO 24749
// for i in tmp do
24720: LD_ADDR_VAR 0 1
24724: PUSH
24725: LD_VAR 0 2
24729: PUSH
24730: FOR_IN
24731: IFFALSE 24747
// SetLives ( i , 300 ) ;
24733: LD_VAR 0 1
24737: PPUSH
24738: LD_INT 300
24740: PPUSH
24741: CALL_OW 234
24745: GO 24730
24747: POP
24748: POP
// end ;
24749: PPOPN 2
24751: END
// every 0 0$1 trigger s60 do var i , tmp ;
24752: LD_EXP 78
24756: IFFALSE 24825
24758: GO 24760
24760: DISABLE
24761: LD_INT 0
24763: PPUSH
24764: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24765: LD_ADDR_VAR 0 2
24769: PUSH
24770: LD_INT 22
24772: PUSH
24773: LD_OWVAR 2
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PPUSH
24782: CALL_OW 69
24786: ST_TO_ADDR
// if not tmp then
24787: LD_VAR 0 2
24791: NOT
24792: IFFALSE 24796
// exit ;
24794: GO 24825
// for i in tmp do
24796: LD_ADDR_VAR 0 1
24800: PUSH
24801: LD_VAR 0 2
24805: PUSH
24806: FOR_IN
24807: IFFALSE 24823
// SetLives ( i , 600 ) ;
24809: LD_VAR 0 1
24813: PPUSH
24814: LD_INT 600
24816: PPUSH
24817: CALL_OW 234
24821: GO 24806
24823: POP
24824: POP
// end ;
24825: PPOPN 2
24827: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24828: LD_INT 0
24830: PPUSH
// case cmd of 301 :
24831: LD_VAR 0 1
24835: PUSH
24836: LD_INT 301
24838: DOUBLE
24839: EQUAL
24840: IFTRUE 24844
24842: GO 24876
24844: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24845: LD_VAR 0 6
24849: PPUSH
24850: LD_VAR 0 7
24854: PPUSH
24855: LD_VAR 0 8
24859: PPUSH
24860: LD_VAR 0 4
24864: PPUSH
24865: LD_VAR 0 5
24869: PPUSH
24870: CALL 26085 0 5
24874: GO 24997
24876: LD_INT 302
24878: DOUBLE
24879: EQUAL
24880: IFTRUE 24884
24882: GO 24921
24884: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24885: LD_VAR 0 6
24889: PPUSH
24890: LD_VAR 0 7
24894: PPUSH
24895: LD_VAR 0 8
24899: PPUSH
24900: LD_VAR 0 9
24904: PPUSH
24905: LD_VAR 0 4
24909: PPUSH
24910: LD_VAR 0 5
24914: PPUSH
24915: CALL 26176 0 6
24919: GO 24997
24921: LD_INT 303
24923: DOUBLE
24924: EQUAL
24925: IFTRUE 24929
24927: GO 24966
24929: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24930: LD_VAR 0 6
24934: PPUSH
24935: LD_VAR 0 7
24939: PPUSH
24940: LD_VAR 0 8
24944: PPUSH
24945: LD_VAR 0 9
24949: PPUSH
24950: LD_VAR 0 4
24954: PPUSH
24955: LD_VAR 0 5
24959: PPUSH
24960: CALL 25002 0 6
24964: GO 24997
24966: LD_INT 304
24968: DOUBLE
24969: EQUAL
24970: IFTRUE 24974
24972: GO 24996
24974: POP
// hHackTeleport ( unit , x , y ) ; end ;
24975: LD_VAR 0 2
24979: PPUSH
24980: LD_VAR 0 4
24984: PPUSH
24985: LD_VAR 0 5
24989: PPUSH
24990: CALL 26769 0 3
24994: GO 24997
24996: POP
// end ;
24997: LD_VAR 0 12
25001: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25002: LD_INT 0
25004: PPUSH
25005: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25006: LD_VAR 0 1
25010: PUSH
25011: LD_INT 1
25013: LESS
25014: PUSH
25015: LD_VAR 0 1
25019: PUSH
25020: LD_INT 3
25022: GREATER
25023: OR
25024: PUSH
25025: LD_VAR 0 5
25029: PPUSH
25030: LD_VAR 0 6
25034: PPUSH
25035: CALL_OW 428
25039: OR
25040: IFFALSE 25044
// exit ;
25042: GO 25772
// uc_side := your_side ;
25044: LD_ADDR_OWVAR 20
25048: PUSH
25049: LD_OWVAR 2
25053: ST_TO_ADDR
// uc_nation := nation ;
25054: LD_ADDR_OWVAR 21
25058: PUSH
25059: LD_VAR 0 1
25063: ST_TO_ADDR
// bc_level = 1 ;
25064: LD_ADDR_OWVAR 43
25068: PUSH
25069: LD_INT 1
25071: ST_TO_ADDR
// case btype of 1 :
25072: LD_VAR 0 2
25076: PUSH
25077: LD_INT 1
25079: DOUBLE
25080: EQUAL
25081: IFTRUE 25085
25083: GO 25096
25085: POP
// bc_type := b_depot ; 2 :
25086: LD_ADDR_OWVAR 42
25090: PUSH
25091: LD_INT 0
25093: ST_TO_ADDR
25094: GO 25716
25096: LD_INT 2
25098: DOUBLE
25099: EQUAL
25100: IFTRUE 25104
25102: GO 25115
25104: POP
// bc_type := b_warehouse ; 3 :
25105: LD_ADDR_OWVAR 42
25109: PUSH
25110: LD_INT 1
25112: ST_TO_ADDR
25113: GO 25716
25115: LD_INT 3
25117: DOUBLE
25118: EQUAL
25119: IFTRUE 25123
25121: GO 25134
25123: POP
// bc_type := b_lab ; 4 .. 9 :
25124: LD_ADDR_OWVAR 42
25128: PUSH
25129: LD_INT 6
25131: ST_TO_ADDR
25132: GO 25716
25134: LD_INT 4
25136: DOUBLE
25137: GREATEREQUAL
25138: IFFALSE 25146
25140: LD_INT 9
25142: DOUBLE
25143: LESSEQUAL
25144: IFTRUE 25148
25146: GO 25208
25148: POP
// begin bc_type := b_lab_half ;
25149: LD_ADDR_OWVAR 42
25153: PUSH
25154: LD_INT 7
25156: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25157: LD_ADDR_OWVAR 44
25161: PUSH
25162: LD_INT 10
25164: PUSH
25165: LD_INT 11
25167: PUSH
25168: LD_INT 12
25170: PUSH
25171: LD_INT 15
25173: PUSH
25174: LD_INT 14
25176: PUSH
25177: LD_INT 13
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: PUSH
25188: LD_VAR 0 2
25192: PUSH
25193: LD_INT 3
25195: MINUS
25196: ARRAY
25197: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25198: LD_ADDR_OWVAR 45
25202: PUSH
25203: LD_INT 9
25205: ST_TO_ADDR
// end ; 10 .. 13 :
25206: GO 25716
25208: LD_INT 10
25210: DOUBLE
25211: GREATEREQUAL
25212: IFFALSE 25220
25214: LD_INT 13
25216: DOUBLE
25217: LESSEQUAL
25218: IFTRUE 25222
25220: GO 25299
25222: POP
// begin bc_type := b_lab_full ;
25223: LD_ADDR_OWVAR 42
25227: PUSH
25228: LD_INT 8
25230: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25231: LD_ADDR_OWVAR 44
25235: PUSH
25236: LD_INT 10
25238: PUSH
25239: LD_INT 12
25241: PUSH
25242: LD_INT 14
25244: PUSH
25245: LD_INT 13
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: PUSH
25254: LD_VAR 0 2
25258: PUSH
25259: LD_INT 9
25261: MINUS
25262: ARRAY
25263: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25264: LD_ADDR_OWVAR 45
25268: PUSH
25269: LD_INT 11
25271: PUSH
25272: LD_INT 15
25274: PUSH
25275: LD_INT 12
25277: PUSH
25278: LD_INT 15
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: PUSH
25287: LD_VAR 0 2
25291: PUSH
25292: LD_INT 9
25294: MINUS
25295: ARRAY
25296: ST_TO_ADDR
// end ; 14 :
25297: GO 25716
25299: LD_INT 14
25301: DOUBLE
25302: EQUAL
25303: IFTRUE 25307
25305: GO 25318
25307: POP
// bc_type := b_workshop ; 15 :
25308: LD_ADDR_OWVAR 42
25312: PUSH
25313: LD_INT 2
25315: ST_TO_ADDR
25316: GO 25716
25318: LD_INT 15
25320: DOUBLE
25321: EQUAL
25322: IFTRUE 25326
25324: GO 25337
25326: POP
// bc_type := b_factory ; 16 :
25327: LD_ADDR_OWVAR 42
25331: PUSH
25332: LD_INT 3
25334: ST_TO_ADDR
25335: GO 25716
25337: LD_INT 16
25339: DOUBLE
25340: EQUAL
25341: IFTRUE 25345
25343: GO 25356
25345: POP
// bc_type := b_ext_gun ; 17 :
25346: LD_ADDR_OWVAR 42
25350: PUSH
25351: LD_INT 17
25353: ST_TO_ADDR
25354: GO 25716
25356: LD_INT 17
25358: DOUBLE
25359: EQUAL
25360: IFTRUE 25364
25362: GO 25392
25364: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25365: LD_ADDR_OWVAR 42
25369: PUSH
25370: LD_INT 19
25372: PUSH
25373: LD_INT 23
25375: PUSH
25376: LD_INT 19
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: PUSH
25384: LD_VAR 0 1
25388: ARRAY
25389: ST_TO_ADDR
25390: GO 25716
25392: LD_INT 18
25394: DOUBLE
25395: EQUAL
25396: IFTRUE 25400
25398: GO 25411
25400: POP
// bc_type := b_ext_radar ; 19 :
25401: LD_ADDR_OWVAR 42
25405: PUSH
25406: LD_INT 20
25408: ST_TO_ADDR
25409: GO 25716
25411: LD_INT 19
25413: DOUBLE
25414: EQUAL
25415: IFTRUE 25419
25417: GO 25430
25419: POP
// bc_type := b_ext_radio ; 20 :
25420: LD_ADDR_OWVAR 42
25424: PUSH
25425: LD_INT 22
25427: ST_TO_ADDR
25428: GO 25716
25430: LD_INT 20
25432: DOUBLE
25433: EQUAL
25434: IFTRUE 25438
25436: GO 25449
25438: POP
// bc_type := b_ext_siberium ; 21 :
25439: LD_ADDR_OWVAR 42
25443: PUSH
25444: LD_INT 21
25446: ST_TO_ADDR
25447: GO 25716
25449: LD_INT 21
25451: DOUBLE
25452: EQUAL
25453: IFTRUE 25457
25455: GO 25468
25457: POP
// bc_type := b_ext_computer ; 22 :
25458: LD_ADDR_OWVAR 42
25462: PUSH
25463: LD_INT 24
25465: ST_TO_ADDR
25466: GO 25716
25468: LD_INT 22
25470: DOUBLE
25471: EQUAL
25472: IFTRUE 25476
25474: GO 25487
25476: POP
// bc_type := b_ext_track ; 23 :
25477: LD_ADDR_OWVAR 42
25481: PUSH
25482: LD_INT 16
25484: ST_TO_ADDR
25485: GO 25716
25487: LD_INT 23
25489: DOUBLE
25490: EQUAL
25491: IFTRUE 25495
25493: GO 25506
25495: POP
// bc_type := b_ext_laser ; 24 :
25496: LD_ADDR_OWVAR 42
25500: PUSH
25501: LD_INT 25
25503: ST_TO_ADDR
25504: GO 25716
25506: LD_INT 24
25508: DOUBLE
25509: EQUAL
25510: IFTRUE 25514
25512: GO 25525
25514: POP
// bc_type := b_control_tower ; 25 :
25515: LD_ADDR_OWVAR 42
25519: PUSH
25520: LD_INT 36
25522: ST_TO_ADDR
25523: GO 25716
25525: LD_INT 25
25527: DOUBLE
25528: EQUAL
25529: IFTRUE 25533
25531: GO 25544
25533: POP
// bc_type := b_breastwork ; 26 :
25534: LD_ADDR_OWVAR 42
25538: PUSH
25539: LD_INT 31
25541: ST_TO_ADDR
25542: GO 25716
25544: LD_INT 26
25546: DOUBLE
25547: EQUAL
25548: IFTRUE 25552
25550: GO 25563
25552: POP
// bc_type := b_bunker ; 27 :
25553: LD_ADDR_OWVAR 42
25557: PUSH
25558: LD_INT 32
25560: ST_TO_ADDR
25561: GO 25716
25563: LD_INT 27
25565: DOUBLE
25566: EQUAL
25567: IFTRUE 25571
25569: GO 25582
25571: POP
// bc_type := b_turret ; 28 :
25572: LD_ADDR_OWVAR 42
25576: PUSH
25577: LD_INT 33
25579: ST_TO_ADDR
25580: GO 25716
25582: LD_INT 28
25584: DOUBLE
25585: EQUAL
25586: IFTRUE 25590
25588: GO 25601
25590: POP
// bc_type := b_armoury ; 29 :
25591: LD_ADDR_OWVAR 42
25595: PUSH
25596: LD_INT 4
25598: ST_TO_ADDR
25599: GO 25716
25601: LD_INT 29
25603: DOUBLE
25604: EQUAL
25605: IFTRUE 25609
25607: GO 25620
25609: POP
// bc_type := b_barracks ; 30 :
25610: LD_ADDR_OWVAR 42
25614: PUSH
25615: LD_INT 5
25617: ST_TO_ADDR
25618: GO 25716
25620: LD_INT 30
25622: DOUBLE
25623: EQUAL
25624: IFTRUE 25628
25626: GO 25639
25628: POP
// bc_type := b_solar_power ; 31 :
25629: LD_ADDR_OWVAR 42
25633: PUSH
25634: LD_INT 27
25636: ST_TO_ADDR
25637: GO 25716
25639: LD_INT 31
25641: DOUBLE
25642: EQUAL
25643: IFTRUE 25647
25645: GO 25658
25647: POP
// bc_type := b_oil_power ; 32 :
25648: LD_ADDR_OWVAR 42
25652: PUSH
25653: LD_INT 26
25655: ST_TO_ADDR
25656: GO 25716
25658: LD_INT 32
25660: DOUBLE
25661: EQUAL
25662: IFTRUE 25666
25664: GO 25677
25666: POP
// bc_type := b_siberite_power ; 33 :
25667: LD_ADDR_OWVAR 42
25671: PUSH
25672: LD_INT 28
25674: ST_TO_ADDR
25675: GO 25716
25677: LD_INT 33
25679: DOUBLE
25680: EQUAL
25681: IFTRUE 25685
25683: GO 25696
25685: POP
// bc_type := b_oil_mine ; 34 :
25686: LD_ADDR_OWVAR 42
25690: PUSH
25691: LD_INT 29
25693: ST_TO_ADDR
25694: GO 25716
25696: LD_INT 34
25698: DOUBLE
25699: EQUAL
25700: IFTRUE 25704
25702: GO 25715
25704: POP
// bc_type := b_siberite_mine ; end ;
25705: LD_ADDR_OWVAR 42
25709: PUSH
25710: LD_INT 30
25712: ST_TO_ADDR
25713: GO 25716
25715: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25716: LD_ADDR_VAR 0 8
25720: PUSH
25721: LD_VAR 0 5
25725: PPUSH
25726: LD_VAR 0 6
25730: PPUSH
25731: LD_VAR 0 3
25735: PPUSH
25736: CALL_OW 47
25740: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25741: LD_OWVAR 42
25745: PUSH
25746: LD_INT 32
25748: PUSH
25749: LD_INT 33
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: IN
25756: IFFALSE 25772
// PlaceWeaponTurret ( b , weapon ) ;
25758: LD_VAR 0 8
25762: PPUSH
25763: LD_VAR 0 4
25767: PPUSH
25768: CALL_OW 431
// end ;
25772: LD_VAR 0 7
25776: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25777: LD_INT 0
25779: PPUSH
25780: PPUSH
25781: PPUSH
25782: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25783: LD_ADDR_VAR 0 4
25787: PUSH
25788: LD_INT 22
25790: PUSH
25791: LD_OWVAR 2
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: LD_INT 30
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 30
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PPUSH
25832: CALL_OW 69
25836: ST_TO_ADDR
// if not tmp then
25837: LD_VAR 0 4
25841: NOT
25842: IFFALSE 25846
// exit ;
25844: GO 25905
// for i in tmp do
25846: LD_ADDR_VAR 0 2
25850: PUSH
25851: LD_VAR 0 4
25855: PUSH
25856: FOR_IN
25857: IFFALSE 25903
// for j = 1 to 3 do
25859: LD_ADDR_VAR 0 3
25863: PUSH
25864: DOUBLE
25865: LD_INT 1
25867: DEC
25868: ST_TO_ADDR
25869: LD_INT 3
25871: PUSH
25872: FOR_TO
25873: IFFALSE 25899
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25875: LD_VAR 0 2
25879: PPUSH
25880: CALL_OW 274
25884: PPUSH
25885: LD_VAR 0 3
25889: PPUSH
25890: LD_INT 99999
25892: PPUSH
25893: CALL_OW 277
25897: GO 25872
25899: POP
25900: POP
25901: GO 25856
25903: POP
25904: POP
// end ;
25905: LD_VAR 0 1
25909: RET
// export function hHackSetLevel10 ; var i , j ; begin
25910: LD_INT 0
25912: PPUSH
25913: PPUSH
25914: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25915: LD_ADDR_VAR 0 2
25919: PUSH
25920: LD_INT 21
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PPUSH
25930: CALL_OW 69
25934: PUSH
25935: FOR_IN
25936: IFFALSE 25988
// if IsSelected ( i ) then
25938: LD_VAR 0 2
25942: PPUSH
25943: CALL_OW 306
25947: IFFALSE 25986
// begin for j := 1 to 4 do
25949: LD_ADDR_VAR 0 3
25953: PUSH
25954: DOUBLE
25955: LD_INT 1
25957: DEC
25958: ST_TO_ADDR
25959: LD_INT 4
25961: PUSH
25962: FOR_TO
25963: IFFALSE 25984
// SetSkill ( i , j , 10 ) ;
25965: LD_VAR 0 2
25969: PPUSH
25970: LD_VAR 0 3
25974: PPUSH
25975: LD_INT 10
25977: PPUSH
25978: CALL_OW 237
25982: GO 25962
25984: POP
25985: POP
// end ;
25986: GO 25935
25988: POP
25989: POP
// end ;
25990: LD_VAR 0 1
25994: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25995: LD_INT 0
25997: PPUSH
25998: PPUSH
25999: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26000: LD_ADDR_VAR 0 2
26004: PUSH
26005: LD_INT 22
26007: PUSH
26008: LD_OWVAR 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 21
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PPUSH
26031: CALL_OW 69
26035: PUSH
26036: FOR_IN
26037: IFFALSE 26078
// begin for j := 1 to 4 do
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: DOUBLE
26045: LD_INT 1
26047: DEC
26048: ST_TO_ADDR
26049: LD_INT 4
26051: PUSH
26052: FOR_TO
26053: IFFALSE 26074
// SetSkill ( i , j , 10 ) ;
26055: LD_VAR 0 2
26059: PPUSH
26060: LD_VAR 0 3
26064: PPUSH
26065: LD_INT 10
26067: PPUSH
26068: CALL_OW 237
26072: GO 26052
26074: POP
26075: POP
// end ;
26076: GO 26036
26078: POP
26079: POP
// end ;
26080: LD_VAR 0 1
26084: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26085: LD_INT 0
26087: PPUSH
// uc_side := your_side ;
26088: LD_ADDR_OWVAR 20
26092: PUSH
26093: LD_OWVAR 2
26097: ST_TO_ADDR
// uc_nation := nation ;
26098: LD_ADDR_OWVAR 21
26102: PUSH
26103: LD_VAR 0 1
26107: ST_TO_ADDR
// InitHc ;
26108: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26112: LD_INT 0
26114: PPUSH
26115: LD_VAR 0 2
26119: PPUSH
26120: LD_VAR 0 3
26124: PPUSH
26125: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26129: LD_VAR 0 4
26133: PPUSH
26134: LD_VAR 0 5
26138: PPUSH
26139: CALL_OW 428
26143: PUSH
26144: LD_INT 0
26146: EQUAL
26147: IFFALSE 26171
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26149: CALL_OW 44
26153: PPUSH
26154: LD_VAR 0 4
26158: PPUSH
26159: LD_VAR 0 5
26163: PPUSH
26164: LD_INT 1
26166: PPUSH
26167: CALL_OW 48
// end ;
26171: LD_VAR 0 6
26175: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26176: LD_INT 0
26178: PPUSH
26179: PPUSH
// uc_side := your_side ;
26180: LD_ADDR_OWVAR 20
26184: PUSH
26185: LD_OWVAR 2
26189: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26190: LD_VAR 0 1
26194: PUSH
26195: LD_INT 1
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: LD_INT 3
26203: PUSH
26204: LD_INT 4
26206: PUSH
26207: LD_INT 5
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: IN
26217: IFFALSE 26229
// uc_nation := nation_american else
26219: LD_ADDR_OWVAR 21
26223: PUSH
26224: LD_INT 1
26226: ST_TO_ADDR
26227: GO 26272
// if chassis in [ 11 , 12 , 13 , 14 ] then
26229: LD_VAR 0 1
26233: PUSH
26234: LD_INT 11
26236: PUSH
26237: LD_INT 12
26239: PUSH
26240: LD_INT 13
26242: PUSH
26243: LD_INT 14
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: IN
26252: IFFALSE 26264
// uc_nation := nation_arabian else
26254: LD_ADDR_OWVAR 21
26258: PUSH
26259: LD_INT 2
26261: ST_TO_ADDR
26262: GO 26272
// uc_nation := nation_russian ;
26264: LD_ADDR_OWVAR 21
26268: PUSH
26269: LD_INT 3
26271: ST_TO_ADDR
// vc_chassis := chassis ;
26272: LD_ADDR_OWVAR 37
26276: PUSH
26277: LD_VAR 0 1
26281: ST_TO_ADDR
// vc_engine := engine ;
26282: LD_ADDR_OWVAR 39
26286: PUSH
26287: LD_VAR 0 2
26291: ST_TO_ADDR
// vc_control := control ;
26292: LD_ADDR_OWVAR 38
26296: PUSH
26297: LD_VAR 0 3
26301: ST_TO_ADDR
// vc_weapon := weapon ;
26302: LD_ADDR_OWVAR 40
26306: PUSH
26307: LD_VAR 0 4
26311: ST_TO_ADDR
// un := CreateVehicle ;
26312: LD_ADDR_VAR 0 8
26316: PUSH
26317: CALL_OW 45
26321: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26322: LD_VAR 0 8
26326: PPUSH
26327: LD_INT 0
26329: PPUSH
26330: LD_INT 5
26332: PPUSH
26333: CALL_OW 12
26337: PPUSH
26338: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26342: LD_VAR 0 8
26346: PPUSH
26347: LD_VAR 0 5
26351: PPUSH
26352: LD_VAR 0 6
26356: PPUSH
26357: LD_INT 1
26359: PPUSH
26360: CALL_OW 48
// end ;
26364: LD_VAR 0 7
26368: RET
// export hInvincible ; every 1 do
26369: GO 26371
26371: DISABLE
// hInvincible := [ ] ;
26372: LD_ADDR_EXP 79
26376: PUSH
26377: EMPTY
26378: ST_TO_ADDR
26379: END
// every 10 do var i ;
26380: GO 26382
26382: DISABLE
26383: LD_INT 0
26385: PPUSH
// begin enable ;
26386: ENABLE
// if not hInvincible then
26387: LD_EXP 79
26391: NOT
26392: IFFALSE 26396
// exit ;
26394: GO 26440
// for i in hInvincible do
26396: LD_ADDR_VAR 0 1
26400: PUSH
26401: LD_EXP 79
26405: PUSH
26406: FOR_IN
26407: IFFALSE 26438
// if GetLives ( i ) < 1000 then
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 256
26418: PUSH
26419: LD_INT 1000
26421: LESS
26422: IFFALSE 26436
// SetLives ( i , 1000 ) ;
26424: LD_VAR 0 1
26428: PPUSH
26429: LD_INT 1000
26431: PPUSH
26432: CALL_OW 234
26436: GO 26406
26438: POP
26439: POP
// end ;
26440: PPOPN 1
26442: END
// export function hHackInvincible ; var i ; begin
26443: LD_INT 0
26445: PPUSH
26446: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26447: LD_ADDR_VAR 0 2
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: LD_INT 21
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 21
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 69
26484: PUSH
26485: FOR_IN
26486: IFFALSE 26547
// if IsSelected ( i ) then
26488: LD_VAR 0 2
26492: PPUSH
26493: CALL_OW 306
26497: IFFALSE 26545
// begin if i in hInvincible then
26499: LD_VAR 0 2
26503: PUSH
26504: LD_EXP 79
26508: IN
26509: IFFALSE 26529
// hInvincible := hInvincible diff i else
26511: LD_ADDR_EXP 79
26515: PUSH
26516: LD_EXP 79
26520: PUSH
26521: LD_VAR 0 2
26525: DIFF
26526: ST_TO_ADDR
26527: GO 26545
// hInvincible := hInvincible union i ;
26529: LD_ADDR_EXP 79
26533: PUSH
26534: LD_EXP 79
26538: PUSH
26539: LD_VAR 0 2
26543: UNION
26544: ST_TO_ADDR
// end ;
26545: GO 26485
26547: POP
26548: POP
// end ;
26549: LD_VAR 0 1
26553: RET
// export function hHackInvisible ; var i , j ; begin
26554: LD_INT 0
26556: PPUSH
26557: PPUSH
26558: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26559: LD_ADDR_VAR 0 2
26563: PUSH
26564: LD_INT 21
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PPUSH
26574: CALL_OW 69
26578: PUSH
26579: FOR_IN
26580: IFFALSE 26604
// if IsSelected ( i ) then
26582: LD_VAR 0 2
26586: PPUSH
26587: CALL_OW 306
26591: IFFALSE 26602
// ComForceInvisible ( i ) ;
26593: LD_VAR 0 2
26597: PPUSH
26598: CALL_OW 496
26602: GO 26579
26604: POP
26605: POP
// end ;
26606: LD_VAR 0 1
26610: RET
// export function hHackChangeYourSide ; begin
26611: LD_INT 0
26613: PPUSH
// if your_side = 8 then
26614: LD_OWVAR 2
26618: PUSH
26619: LD_INT 8
26621: EQUAL
26622: IFFALSE 26634
// your_side := 0 else
26624: LD_ADDR_OWVAR 2
26628: PUSH
26629: LD_INT 0
26631: ST_TO_ADDR
26632: GO 26648
// your_side := your_side + 1 ;
26634: LD_ADDR_OWVAR 2
26638: PUSH
26639: LD_OWVAR 2
26643: PUSH
26644: LD_INT 1
26646: PLUS
26647: ST_TO_ADDR
// end ;
26648: LD_VAR 0 1
26652: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26653: LD_INT 0
26655: PPUSH
26656: PPUSH
26657: PPUSH
// for i in all_units do
26658: LD_ADDR_VAR 0 2
26662: PUSH
26663: LD_OWVAR 3
26667: PUSH
26668: FOR_IN
26669: IFFALSE 26747
// if IsSelected ( i ) then
26671: LD_VAR 0 2
26675: PPUSH
26676: CALL_OW 306
26680: IFFALSE 26745
// begin j := GetSide ( i ) ;
26682: LD_ADDR_VAR 0 3
26686: PUSH
26687: LD_VAR 0 2
26691: PPUSH
26692: CALL_OW 255
26696: ST_TO_ADDR
// if j = 8 then
26697: LD_VAR 0 3
26701: PUSH
26702: LD_INT 8
26704: EQUAL
26705: IFFALSE 26717
// j := 0 else
26707: LD_ADDR_VAR 0 3
26711: PUSH
26712: LD_INT 0
26714: ST_TO_ADDR
26715: GO 26731
// j := j + 1 ;
26717: LD_ADDR_VAR 0 3
26721: PUSH
26722: LD_VAR 0 3
26726: PUSH
26727: LD_INT 1
26729: PLUS
26730: ST_TO_ADDR
// SetSide ( i , j ) ;
26731: LD_VAR 0 2
26735: PPUSH
26736: LD_VAR 0 3
26740: PPUSH
26741: CALL_OW 235
// end ;
26745: GO 26668
26747: POP
26748: POP
// end ;
26749: LD_VAR 0 1
26753: RET
// export function hHackFog ; begin
26754: LD_INT 0
26756: PPUSH
// FogOff ( true ) ;
26757: LD_INT 1
26759: PPUSH
26760: CALL_OW 344
// end ;
26764: LD_VAR 0 1
26768: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26769: LD_INT 0
26771: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26772: LD_VAR 0 1
26776: PPUSH
26777: LD_VAR 0 2
26781: PPUSH
26782: LD_VAR 0 3
26786: PPUSH
26787: LD_INT 1
26789: PPUSH
26790: LD_INT 1
26792: PPUSH
26793: CALL_OW 483
// CenterOnXY ( x , y ) ;
26797: LD_VAR 0 2
26801: PPUSH
26802: LD_VAR 0 3
26806: PPUSH
26807: CALL_OW 84
// end ;
26811: LD_VAR 0 4
26815: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26816: LD_INT 0
26818: PPUSH
26819: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26820: LD_VAR 0 1
26824: NOT
26825: PUSH
26826: LD_VAR 0 2
26830: PPUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: CALL_OW 488
26840: NOT
26841: OR
26842: PUSH
26843: LD_VAR 0 1
26847: PPUSH
26848: CALL_OW 266
26852: PUSH
26853: LD_INT 3
26855: NONEQUAL
26856: PUSH
26857: LD_VAR 0 1
26861: PPUSH
26862: CALL_OW 247
26866: PUSH
26867: LD_INT 1
26869: EQUAL
26870: NOT
26871: AND
26872: OR
26873: IFFALSE 26877
// exit ;
26875: GO 27026
// if GetType ( factory ) = unit_human then
26877: LD_VAR 0 1
26881: PPUSH
26882: CALL_OW 247
26886: PUSH
26887: LD_INT 1
26889: EQUAL
26890: IFFALSE 26907
// factory := IsInUnit ( factory ) ;
26892: LD_ADDR_VAR 0 1
26896: PUSH
26897: LD_VAR 0 1
26901: PPUSH
26902: CALL_OW 310
26906: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 266
26916: PUSH
26917: LD_INT 3
26919: NONEQUAL
26920: IFFALSE 26924
// exit ;
26922: GO 27026
// if HexInfo ( x , y ) = factory then
26924: LD_VAR 0 2
26928: PPUSH
26929: LD_VAR 0 3
26933: PPUSH
26934: CALL_OW 428
26938: PUSH
26939: LD_VAR 0 1
26943: EQUAL
26944: IFFALSE 26971
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26946: LD_ADDR_EXP 80
26950: PUSH
26951: LD_EXP 80
26955: PPUSH
26956: LD_VAR 0 1
26960: PPUSH
26961: LD_INT 0
26963: PPUSH
26964: CALL_OW 1
26968: ST_TO_ADDR
26969: GO 27022
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26971: LD_ADDR_EXP 80
26975: PUSH
26976: LD_EXP 80
26980: PPUSH
26981: LD_VAR 0 1
26985: PPUSH
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 255
26995: PUSH
26996: LD_VAR 0 1
27000: PUSH
27001: LD_VAR 0 2
27005: PUSH
27006: LD_VAR 0 3
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: PPUSH
27017: CALL_OW 1
27021: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27022: CALL 27031 0 0
// end ;
27026: LD_VAR 0 4
27030: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27031: LD_INT 0
27033: PPUSH
27034: PPUSH
27035: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27036: LD_STRING resetFactoryWaypoint();
27038: PPUSH
27039: CALL_OW 559
// if factoryWaypoints then
27043: LD_EXP 80
27047: IFFALSE 27173
// begin list := PrepareArray ( factoryWaypoints ) ;
27049: LD_ADDR_VAR 0 3
27053: PUSH
27054: LD_EXP 80
27058: PPUSH
27059: CALL 74470 0 1
27063: ST_TO_ADDR
// for i := 1 to list do
27064: LD_ADDR_VAR 0 2
27068: PUSH
27069: DOUBLE
27070: LD_INT 1
27072: DEC
27073: ST_TO_ADDR
27074: LD_VAR 0 3
27078: PUSH
27079: FOR_TO
27080: IFFALSE 27171
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27082: LD_STRING setFactoryWaypointXY(
27084: PUSH
27085: LD_VAR 0 3
27089: PUSH
27090: LD_VAR 0 2
27094: ARRAY
27095: PUSH
27096: LD_INT 1
27098: ARRAY
27099: STR
27100: PUSH
27101: LD_STRING ,
27103: STR
27104: PUSH
27105: LD_VAR 0 3
27109: PUSH
27110: LD_VAR 0 2
27114: ARRAY
27115: PUSH
27116: LD_INT 2
27118: ARRAY
27119: STR
27120: PUSH
27121: LD_STRING ,
27123: STR
27124: PUSH
27125: LD_VAR 0 3
27129: PUSH
27130: LD_VAR 0 2
27134: ARRAY
27135: PUSH
27136: LD_INT 3
27138: ARRAY
27139: STR
27140: PUSH
27141: LD_STRING ,
27143: STR
27144: PUSH
27145: LD_VAR 0 3
27149: PUSH
27150: LD_VAR 0 2
27154: ARRAY
27155: PUSH
27156: LD_INT 4
27158: ARRAY
27159: STR
27160: PUSH
27161: LD_STRING )
27163: STR
27164: PPUSH
27165: CALL_OW 559
27169: GO 27079
27171: POP
27172: POP
// end ; end ;
27173: LD_VAR 0 1
27177: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27178: LD_INT 0
27180: PPUSH
// if HexInfo ( x , y ) = warehouse then
27181: LD_VAR 0 2
27185: PPUSH
27186: LD_VAR 0 3
27190: PPUSH
27191: CALL_OW 428
27195: PUSH
27196: LD_VAR 0 1
27200: EQUAL
27201: IFFALSE 27228
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27203: LD_ADDR_EXP 81
27207: PUSH
27208: LD_EXP 81
27212: PPUSH
27213: LD_VAR 0 1
27217: PPUSH
27218: LD_INT 0
27220: PPUSH
27221: CALL_OW 1
27225: ST_TO_ADDR
27226: GO 27279
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27228: LD_ADDR_EXP 81
27232: PUSH
27233: LD_EXP 81
27237: PPUSH
27238: LD_VAR 0 1
27242: PPUSH
27243: LD_VAR 0 1
27247: PPUSH
27248: CALL_OW 255
27252: PUSH
27253: LD_VAR 0 1
27257: PUSH
27258: LD_VAR 0 2
27262: PUSH
27263: LD_VAR 0 3
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: PPUSH
27274: CALL_OW 1
27278: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27279: CALL 27288 0 0
// end ;
27283: LD_VAR 0 4
27287: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27288: LD_INT 0
27290: PPUSH
27291: PPUSH
27292: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27293: LD_STRING resetWarehouseGatheringPoints();
27295: PPUSH
27296: CALL_OW 559
// if warehouseGatheringPoints then
27300: LD_EXP 81
27304: IFFALSE 27430
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27306: LD_ADDR_VAR 0 3
27310: PUSH
27311: LD_EXP 81
27315: PPUSH
27316: CALL 74470 0 1
27320: ST_TO_ADDR
// for i := 1 to list do
27321: LD_ADDR_VAR 0 2
27325: PUSH
27326: DOUBLE
27327: LD_INT 1
27329: DEC
27330: ST_TO_ADDR
27331: LD_VAR 0 3
27335: PUSH
27336: FOR_TO
27337: IFFALSE 27428
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27339: LD_STRING setWarehouseGatheringPointXY(
27341: PUSH
27342: LD_VAR 0 3
27346: PUSH
27347: LD_VAR 0 2
27351: ARRAY
27352: PUSH
27353: LD_INT 1
27355: ARRAY
27356: STR
27357: PUSH
27358: LD_STRING ,
27360: STR
27361: PUSH
27362: LD_VAR 0 3
27366: PUSH
27367: LD_VAR 0 2
27371: ARRAY
27372: PUSH
27373: LD_INT 2
27375: ARRAY
27376: STR
27377: PUSH
27378: LD_STRING ,
27380: STR
27381: PUSH
27382: LD_VAR 0 3
27386: PUSH
27387: LD_VAR 0 2
27391: ARRAY
27392: PUSH
27393: LD_INT 3
27395: ARRAY
27396: STR
27397: PUSH
27398: LD_STRING ,
27400: STR
27401: PUSH
27402: LD_VAR 0 3
27406: PUSH
27407: LD_VAR 0 2
27411: ARRAY
27412: PUSH
27413: LD_INT 4
27415: ARRAY
27416: STR
27417: PUSH
27418: LD_STRING )
27420: STR
27421: PPUSH
27422: CALL_OW 559
27426: GO 27336
27428: POP
27429: POP
// end ; end ;
27430: LD_VAR 0 1
27434: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27435: LD_EXP 81
27439: IFFALSE 28124
27441: GO 27443
27443: DISABLE
27444: LD_INT 0
27446: PPUSH
27447: PPUSH
27448: PPUSH
27449: PPUSH
27450: PPUSH
27451: PPUSH
27452: PPUSH
27453: PPUSH
27454: PPUSH
// begin enable ;
27455: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27456: LD_ADDR_VAR 0 3
27460: PUSH
27461: LD_EXP 81
27465: PPUSH
27466: CALL 74470 0 1
27470: ST_TO_ADDR
// if not list then
27471: LD_VAR 0 3
27475: NOT
27476: IFFALSE 27480
// exit ;
27478: GO 28124
// for i := 1 to list do
27480: LD_ADDR_VAR 0 1
27484: PUSH
27485: DOUBLE
27486: LD_INT 1
27488: DEC
27489: ST_TO_ADDR
27490: LD_VAR 0 3
27494: PUSH
27495: FOR_TO
27496: IFFALSE 28122
// begin depot := list [ i ] [ 2 ] ;
27498: LD_ADDR_VAR 0 8
27502: PUSH
27503: LD_VAR 0 3
27507: PUSH
27508: LD_VAR 0 1
27512: ARRAY
27513: PUSH
27514: LD_INT 2
27516: ARRAY
27517: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27518: LD_ADDR_VAR 0 5
27522: PUSH
27523: LD_VAR 0 3
27527: PUSH
27528: LD_VAR 0 1
27532: ARRAY
27533: PUSH
27534: LD_INT 1
27536: ARRAY
27537: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27538: LD_VAR 0 8
27542: PPUSH
27543: CALL_OW 301
27547: PUSH
27548: LD_VAR 0 5
27552: PUSH
27553: LD_VAR 0 8
27557: PPUSH
27558: CALL_OW 255
27562: NONEQUAL
27563: OR
27564: IFFALSE 27593
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27566: LD_ADDR_EXP 81
27570: PUSH
27571: LD_EXP 81
27575: PPUSH
27576: LD_VAR 0 8
27580: PPUSH
27581: LD_INT 0
27583: PPUSH
27584: CALL_OW 1
27588: ST_TO_ADDR
// exit ;
27589: POP
27590: POP
27591: GO 28124
// end ; x := list [ i ] [ 3 ] ;
27593: LD_ADDR_VAR 0 6
27597: PUSH
27598: LD_VAR 0 3
27602: PUSH
27603: LD_VAR 0 1
27607: ARRAY
27608: PUSH
27609: LD_INT 3
27611: ARRAY
27612: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27613: LD_ADDR_VAR 0 7
27617: PUSH
27618: LD_VAR 0 3
27622: PUSH
27623: LD_VAR 0 1
27627: ARRAY
27628: PUSH
27629: LD_INT 4
27631: ARRAY
27632: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27633: LD_ADDR_VAR 0 9
27637: PUSH
27638: LD_VAR 0 6
27642: PPUSH
27643: LD_VAR 0 7
27647: PPUSH
27648: LD_INT 16
27650: PPUSH
27651: CALL 73058 0 3
27655: ST_TO_ADDR
// if not cratesNearbyPoint then
27656: LD_VAR 0 9
27660: NOT
27661: IFFALSE 27667
// exit ;
27663: POP
27664: POP
27665: GO 28124
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27667: LD_ADDR_VAR 0 4
27671: PUSH
27672: LD_INT 22
27674: PUSH
27675: LD_VAR 0 5
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 3
27686: PUSH
27687: LD_INT 60
27689: PUSH
27690: EMPTY
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 91
27699: PUSH
27700: LD_VAR 0 8
27704: PUSH
27705: LD_INT 6
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 2
27715: PUSH
27716: LD_INT 25
27718: PUSH
27719: LD_INT 2
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 25
27728: PUSH
27729: LD_INT 16
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: LIST
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: PPUSH
27747: CALL_OW 69
27751: PUSH
27752: LD_VAR 0 8
27756: PPUSH
27757: CALL_OW 313
27761: PPUSH
27762: LD_INT 3
27764: PUSH
27765: LD_INT 60
27767: PUSH
27768: EMPTY
27769: LIST
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 2
27777: PUSH
27778: LD_INT 25
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 25
27790: PUSH
27791: LD_INT 16
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: LIST
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PPUSH
27807: CALL_OW 72
27811: UNION
27812: ST_TO_ADDR
// if tmp then
27813: LD_VAR 0 4
27817: IFFALSE 27897
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27819: LD_ADDR_VAR 0 4
27823: PUSH
27824: LD_VAR 0 4
27828: PPUSH
27829: LD_INT 3
27831: PPUSH
27832: CALL 71027 0 2
27836: ST_TO_ADDR
// for j in tmp do
27837: LD_ADDR_VAR 0 2
27841: PUSH
27842: LD_VAR 0 4
27846: PUSH
27847: FOR_IN
27848: IFFALSE 27891
// begin if IsInUnit ( j ) then
27850: LD_VAR 0 2
27854: PPUSH
27855: CALL_OW 310
27859: IFFALSE 27870
// ComExit ( j ) ;
27861: LD_VAR 0 2
27865: PPUSH
27866: CALL 71110 0 1
// AddComCollect ( j , x , y ) ;
27870: LD_VAR 0 2
27874: PPUSH
27875: LD_VAR 0 6
27879: PPUSH
27880: LD_VAR 0 7
27884: PPUSH
27885: CALL_OW 177
// end ;
27889: GO 27847
27891: POP
27892: POP
// exit ;
27893: POP
27894: POP
27895: GO 28124
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27897: LD_ADDR_VAR 0 4
27901: PUSH
27902: LD_INT 22
27904: PUSH
27905: LD_VAR 0 5
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 91
27916: PUSH
27917: LD_VAR 0 8
27921: PUSH
27922: LD_INT 8
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: LD_INT 34
27935: PUSH
27936: LD_INT 12
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 34
27945: PUSH
27946: LD_INT 51
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 34
27955: PUSH
27956: LD_INT 32
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 34
27965: PUSH
27966: LD_INT 89
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: LIST
27984: PPUSH
27985: CALL_OW 69
27989: ST_TO_ADDR
// if tmp then
27990: LD_VAR 0 4
27994: IFFALSE 28120
// begin for j in tmp do
27996: LD_ADDR_VAR 0 2
28000: PUSH
28001: LD_VAR 0 4
28005: PUSH
28006: FOR_IN
28007: IFFALSE 28118
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28009: LD_VAR 0 2
28013: PPUSH
28014: CALL_OW 262
28018: PUSH
28019: LD_INT 3
28021: EQUAL
28022: PUSH
28023: LD_VAR 0 2
28027: PPUSH
28028: CALL_OW 261
28032: PUSH
28033: LD_INT 20
28035: GREATER
28036: OR
28037: PUSH
28038: LD_VAR 0 2
28042: PPUSH
28043: CALL_OW 314
28047: NOT
28048: AND
28049: PUSH
28050: LD_VAR 0 2
28054: PPUSH
28055: CALL_OW 263
28059: PUSH
28060: LD_INT 1
28062: NONEQUAL
28063: PUSH
28064: LD_VAR 0 2
28068: PPUSH
28069: CALL_OW 311
28073: OR
28074: AND
28075: IFFALSE 28116
// begin ComCollect ( j , x , y ) ;
28077: LD_VAR 0 2
28081: PPUSH
28082: LD_VAR 0 6
28086: PPUSH
28087: LD_VAR 0 7
28091: PPUSH
28092: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28096: LD_VAR 0 2
28100: PPUSH
28101: LD_VAR 0 8
28105: PPUSH
28106: CALL_OW 172
// exit ;
28110: POP
28111: POP
28112: POP
28113: POP
28114: GO 28124
// end ;
28116: GO 28006
28118: POP
28119: POP
// end ; end ;
28120: GO 27495
28122: POP
28123: POP
// end ; end_of_file
28124: PPOPN 9
28126: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28127: LD_INT 0
28129: PPUSH
28130: PPUSH
28131: PPUSH
28132: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28133: LD_VAR 0 1
28137: PPUSH
28138: CALL_OW 264
28142: PUSH
28143: LD_INT 91
28145: EQUAL
28146: IFFALSE 28218
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28148: LD_INT 68
28150: PPUSH
28151: LD_VAR 0 1
28155: PPUSH
28156: CALL_OW 255
28160: PPUSH
28161: CALL_OW 321
28165: PUSH
28166: LD_INT 2
28168: EQUAL
28169: IFFALSE 28181
// eff := 70 else
28171: LD_ADDR_VAR 0 4
28175: PUSH
28176: LD_INT 70
28178: ST_TO_ADDR
28179: GO 28189
// eff := 30 ;
28181: LD_ADDR_VAR 0 4
28185: PUSH
28186: LD_INT 30
28188: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28189: LD_VAR 0 1
28193: PPUSH
28194: CALL_OW 250
28198: PPUSH
28199: LD_VAR 0 1
28203: PPUSH
28204: CALL_OW 251
28208: PPUSH
28209: LD_VAR 0 4
28213: PPUSH
28214: CALL_OW 495
// end ; end ;
28218: LD_VAR 0 2
28222: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28223: LD_INT 0
28225: PPUSH
// end ;
28226: LD_VAR 0 4
28230: RET
// export function SOS_Command ( cmd ) ; begin
28231: LD_INT 0
28233: PPUSH
// end ;
28234: LD_VAR 0 2
28238: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28239: LD_INT 0
28241: PPUSH
// end ;
28242: LD_VAR 0 6
28246: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28247: LD_INT 0
28249: PPUSH
28250: PPUSH
// if not vehicle or not factory then
28251: LD_VAR 0 1
28255: NOT
28256: PUSH
28257: LD_VAR 0 2
28261: NOT
28262: OR
28263: IFFALSE 28267
// exit ;
28265: GO 28498
// if factoryWaypoints >= factory then
28267: LD_EXP 80
28271: PUSH
28272: LD_VAR 0 2
28276: GREATEREQUAL
28277: IFFALSE 28498
// if factoryWaypoints [ factory ] then
28279: LD_EXP 80
28283: PUSH
28284: LD_VAR 0 2
28288: ARRAY
28289: IFFALSE 28498
// begin if GetControl ( vehicle ) = control_manual then
28291: LD_VAR 0 1
28295: PPUSH
28296: CALL_OW 263
28300: PUSH
28301: LD_INT 1
28303: EQUAL
28304: IFFALSE 28385
// begin driver := IsDrivenBy ( vehicle ) ;
28306: LD_ADDR_VAR 0 4
28310: PUSH
28311: LD_VAR 0 1
28315: PPUSH
28316: CALL_OW 311
28320: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28321: LD_VAR 0 4
28325: PPUSH
28326: LD_EXP 80
28330: PUSH
28331: LD_VAR 0 2
28335: ARRAY
28336: PUSH
28337: LD_INT 3
28339: ARRAY
28340: PPUSH
28341: LD_EXP 80
28345: PUSH
28346: LD_VAR 0 2
28350: ARRAY
28351: PUSH
28352: LD_INT 4
28354: ARRAY
28355: PPUSH
28356: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28360: LD_VAR 0 4
28364: PPUSH
28365: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28369: LD_VAR 0 4
28373: PPUSH
28374: LD_VAR 0 2
28378: PPUSH
28379: CALL_OW 180
// end else
28383: GO 28498
// if GetControl ( vehicle ) = control_remote then
28385: LD_VAR 0 1
28389: PPUSH
28390: CALL_OW 263
28394: PUSH
28395: LD_INT 2
28397: EQUAL
28398: IFFALSE 28459
// begin wait ( 0 0$2 ) ;
28400: LD_INT 70
28402: PPUSH
28403: CALL_OW 67
// if Connect ( vehicle ) then
28407: LD_VAR 0 1
28411: PPUSH
28412: CALL 41329 0 1
28416: IFFALSE 28457
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28418: LD_VAR 0 1
28422: PPUSH
28423: LD_EXP 80
28427: PUSH
28428: LD_VAR 0 2
28432: ARRAY
28433: PUSH
28434: LD_INT 3
28436: ARRAY
28437: PPUSH
28438: LD_EXP 80
28442: PUSH
28443: LD_VAR 0 2
28447: ARRAY
28448: PUSH
28449: LD_INT 4
28451: ARRAY
28452: PPUSH
28453: CALL_OW 171
// end else
28457: GO 28498
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28459: LD_VAR 0 1
28463: PPUSH
28464: LD_EXP 80
28468: PUSH
28469: LD_VAR 0 2
28473: ARRAY
28474: PUSH
28475: LD_INT 3
28477: ARRAY
28478: PPUSH
28479: LD_EXP 80
28483: PUSH
28484: LD_VAR 0 2
28488: ARRAY
28489: PUSH
28490: LD_INT 4
28492: ARRAY
28493: PPUSH
28494: CALL_OW 171
// end ; end ;
28498: LD_VAR 0 3
28502: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28503: LD_INT 0
28505: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28506: LD_VAR 0 1
28510: PUSH
28511: LD_INT 250
28513: EQUAL
28514: PUSH
28515: LD_VAR 0 2
28519: PPUSH
28520: CALL_OW 264
28524: PUSH
28525: LD_INT 81
28527: EQUAL
28528: AND
28529: IFFALSE 28550
// MinerPlaceMine ( unit , x , y ) ;
28531: LD_VAR 0 2
28535: PPUSH
28536: LD_VAR 0 4
28540: PPUSH
28541: LD_VAR 0 5
28545: PPUSH
28546: CALL 31540 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28550: LD_VAR 0 1
28554: PUSH
28555: LD_INT 251
28557: EQUAL
28558: PUSH
28559: LD_VAR 0 2
28563: PPUSH
28564: CALL_OW 264
28568: PUSH
28569: LD_INT 81
28571: EQUAL
28572: AND
28573: IFFALSE 28594
// MinerDetonateMine ( unit , x , y ) ;
28575: LD_VAR 0 2
28579: PPUSH
28580: LD_VAR 0 4
28584: PPUSH
28585: LD_VAR 0 5
28589: PPUSH
28590: CALL 31815 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28594: LD_VAR 0 1
28598: PUSH
28599: LD_INT 252
28601: EQUAL
28602: PUSH
28603: LD_VAR 0 2
28607: PPUSH
28608: CALL_OW 264
28612: PUSH
28613: LD_INT 81
28615: EQUAL
28616: AND
28617: IFFALSE 28638
// MinerCreateMinefield ( unit , x , y ) ;
28619: LD_VAR 0 2
28623: PPUSH
28624: LD_VAR 0 4
28628: PPUSH
28629: LD_VAR 0 5
28633: PPUSH
28634: CALL 32232 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28638: LD_VAR 0 1
28642: PUSH
28643: LD_INT 253
28645: EQUAL
28646: PUSH
28647: LD_VAR 0 2
28651: PPUSH
28652: CALL_OW 257
28656: PUSH
28657: LD_INT 5
28659: EQUAL
28660: AND
28661: IFFALSE 28682
// ComBinocular ( unit , x , y ) ;
28663: LD_VAR 0 2
28667: PPUSH
28668: LD_VAR 0 4
28672: PPUSH
28673: LD_VAR 0 5
28677: PPUSH
28678: CALL 32601 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28682: LD_VAR 0 1
28686: PUSH
28687: LD_INT 254
28689: EQUAL
28690: PUSH
28691: LD_VAR 0 2
28695: PPUSH
28696: CALL_OW 264
28700: PUSH
28701: LD_INT 99
28703: EQUAL
28704: AND
28705: PUSH
28706: LD_VAR 0 3
28710: PPUSH
28711: CALL_OW 263
28715: PUSH
28716: LD_INT 3
28718: EQUAL
28719: AND
28720: IFFALSE 28736
// HackDestroyVehicle ( unit , selectedUnit ) ;
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 3
28731: PPUSH
28732: CALL 30904 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28736: LD_VAR 0 1
28740: PUSH
28741: LD_INT 255
28743: EQUAL
28744: PUSH
28745: LD_VAR 0 2
28749: PPUSH
28750: CALL_OW 264
28754: PUSH
28755: LD_INT 14
28757: PUSH
28758: LD_INT 53
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: IN
28765: AND
28766: PUSH
28767: LD_VAR 0 4
28771: PPUSH
28772: LD_VAR 0 5
28776: PPUSH
28777: CALL_OW 488
28781: AND
28782: IFFALSE 28806
// CutTreeXYR ( unit , x , y , 12 ) ;
28784: LD_VAR 0 2
28788: PPUSH
28789: LD_VAR 0 4
28793: PPUSH
28794: LD_VAR 0 5
28798: PPUSH
28799: LD_INT 12
28801: PPUSH
28802: CALL 28901 0 4
// if cmd = 256 then
28806: LD_VAR 0 1
28810: PUSH
28811: LD_INT 256
28813: EQUAL
28814: IFFALSE 28835
// SetFactoryWaypoint ( unit , x , y ) ;
28816: LD_VAR 0 2
28820: PPUSH
28821: LD_VAR 0 4
28825: PPUSH
28826: LD_VAR 0 5
28830: PPUSH
28831: CALL 26816 0 3
// if cmd = 257 then
28835: LD_VAR 0 1
28839: PUSH
28840: LD_INT 257
28842: EQUAL
28843: IFFALSE 28864
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28845: LD_VAR 0 2
28849: PPUSH
28850: LD_VAR 0 4
28854: PPUSH
28855: LD_VAR 0 5
28859: PPUSH
28860: CALL 27178 0 3
// if cmd = 258 then
28864: LD_VAR 0 1
28868: PUSH
28869: LD_INT 258
28871: EQUAL
28872: IFFALSE 28896
// BurnTreeXYR ( unit , x , y , 8 ) ;
28874: LD_VAR 0 2
28878: PPUSH
28879: LD_VAR 0 4
28883: PPUSH
28884: LD_VAR 0 5
28888: PPUSH
28889: LD_INT 8
28891: PPUSH
28892: CALL 29295 0 4
// end ;
28896: LD_VAR 0 6
28900: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28901: LD_INT 0
28903: PPUSH
28904: PPUSH
28905: PPUSH
28906: PPUSH
28907: PPUSH
28908: PPUSH
28909: PPUSH
28910: PPUSH
28911: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28912: LD_VAR 0 1
28916: PPUSH
28917: CALL_OW 302
28921: NOT
28922: PUSH
28923: LD_VAR 0 2
28927: PPUSH
28928: LD_VAR 0 3
28932: PPUSH
28933: CALL_OW 488
28937: NOT
28938: OR
28939: PUSH
28940: LD_VAR 0 4
28944: NOT
28945: OR
28946: IFFALSE 28950
// exit ;
28948: GO 29290
// list := [ ] ;
28950: LD_ADDR_VAR 0 13
28954: PUSH
28955: EMPTY
28956: ST_TO_ADDR
// if x - r < 0 then
28957: LD_VAR 0 2
28961: PUSH
28962: LD_VAR 0 4
28966: MINUS
28967: PUSH
28968: LD_INT 0
28970: LESS
28971: IFFALSE 28983
// min_x := 0 else
28973: LD_ADDR_VAR 0 7
28977: PUSH
28978: LD_INT 0
28980: ST_TO_ADDR
28981: GO 28999
// min_x := x - r ;
28983: LD_ADDR_VAR 0 7
28987: PUSH
28988: LD_VAR 0 2
28992: PUSH
28993: LD_VAR 0 4
28997: MINUS
28998: ST_TO_ADDR
// if y - r < 0 then
28999: LD_VAR 0 3
29003: PUSH
29004: LD_VAR 0 4
29008: MINUS
29009: PUSH
29010: LD_INT 0
29012: LESS
29013: IFFALSE 29025
// min_y := 0 else
29015: LD_ADDR_VAR 0 8
29019: PUSH
29020: LD_INT 0
29022: ST_TO_ADDR
29023: GO 29041
// min_y := y - r ;
29025: LD_ADDR_VAR 0 8
29029: PUSH
29030: LD_VAR 0 3
29034: PUSH
29035: LD_VAR 0 4
29039: MINUS
29040: ST_TO_ADDR
// max_x := x + r ;
29041: LD_ADDR_VAR 0 9
29045: PUSH
29046: LD_VAR 0 2
29050: PUSH
29051: LD_VAR 0 4
29055: PLUS
29056: ST_TO_ADDR
// max_y := y + r ;
29057: LD_ADDR_VAR 0 10
29061: PUSH
29062: LD_VAR 0 3
29066: PUSH
29067: LD_VAR 0 4
29071: PLUS
29072: ST_TO_ADDR
// for _x = min_x to max_x do
29073: LD_ADDR_VAR 0 11
29077: PUSH
29078: DOUBLE
29079: LD_VAR 0 7
29083: DEC
29084: ST_TO_ADDR
29085: LD_VAR 0 9
29089: PUSH
29090: FOR_TO
29091: IFFALSE 29208
// for _y = min_y to max_y do
29093: LD_ADDR_VAR 0 12
29097: PUSH
29098: DOUBLE
29099: LD_VAR 0 8
29103: DEC
29104: ST_TO_ADDR
29105: LD_VAR 0 10
29109: PUSH
29110: FOR_TO
29111: IFFALSE 29204
// begin if not ValidHex ( _x , _y ) then
29113: LD_VAR 0 11
29117: PPUSH
29118: LD_VAR 0 12
29122: PPUSH
29123: CALL_OW 488
29127: NOT
29128: IFFALSE 29132
// continue ;
29130: GO 29110
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29132: LD_VAR 0 11
29136: PPUSH
29137: LD_VAR 0 12
29141: PPUSH
29142: CALL_OW 351
29146: PUSH
29147: LD_VAR 0 11
29151: PPUSH
29152: LD_VAR 0 12
29156: PPUSH
29157: CALL_OW 554
29161: AND
29162: IFFALSE 29202
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29164: LD_ADDR_VAR 0 13
29168: PUSH
29169: LD_VAR 0 13
29173: PPUSH
29174: LD_VAR 0 13
29178: PUSH
29179: LD_INT 1
29181: PLUS
29182: PPUSH
29183: LD_VAR 0 11
29187: PUSH
29188: LD_VAR 0 12
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PPUSH
29197: CALL_OW 2
29201: ST_TO_ADDR
// end ;
29202: GO 29110
29204: POP
29205: POP
29206: GO 29090
29208: POP
29209: POP
// if not list then
29210: LD_VAR 0 13
29214: NOT
29215: IFFALSE 29219
// exit ;
29217: GO 29290
// for i in list do
29219: LD_ADDR_VAR 0 6
29223: PUSH
29224: LD_VAR 0 13
29228: PUSH
29229: FOR_IN
29230: IFFALSE 29288
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29232: LD_VAR 0 1
29236: PPUSH
29237: LD_STRING M
29239: PUSH
29240: LD_VAR 0 6
29244: PUSH
29245: LD_INT 1
29247: ARRAY
29248: PUSH
29249: LD_VAR 0 6
29253: PUSH
29254: LD_INT 2
29256: ARRAY
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: LD_INT 0
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: PPUSH
29282: CALL_OW 447
29286: GO 29229
29288: POP
29289: POP
// end ;
29290: LD_VAR 0 5
29294: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29295: LD_INT 0
29297: PPUSH
29298: PPUSH
29299: PPUSH
29300: PPUSH
29301: PPUSH
29302: PPUSH
29303: PPUSH
29304: PPUSH
29305: PPUSH
29306: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29307: LD_VAR 0 1
29311: PPUSH
29312: CALL_OW 302
29316: NOT
29317: PUSH
29318: LD_VAR 0 2
29322: PPUSH
29323: LD_VAR 0 3
29327: PPUSH
29328: CALL_OW 488
29332: NOT
29333: OR
29334: PUSH
29335: LD_VAR 0 4
29339: NOT
29340: OR
29341: IFFALSE 29345
// exit ;
29343: GO 29858
// list := [ ] ;
29345: LD_ADDR_VAR 0 13
29349: PUSH
29350: EMPTY
29351: ST_TO_ADDR
// if x - r < 0 then
29352: LD_VAR 0 2
29356: PUSH
29357: LD_VAR 0 4
29361: MINUS
29362: PUSH
29363: LD_INT 0
29365: LESS
29366: IFFALSE 29378
// min_x := 0 else
29368: LD_ADDR_VAR 0 7
29372: PUSH
29373: LD_INT 0
29375: ST_TO_ADDR
29376: GO 29394
// min_x := x - r ;
29378: LD_ADDR_VAR 0 7
29382: PUSH
29383: LD_VAR 0 2
29387: PUSH
29388: LD_VAR 0 4
29392: MINUS
29393: ST_TO_ADDR
// if y - r < 0 then
29394: LD_VAR 0 3
29398: PUSH
29399: LD_VAR 0 4
29403: MINUS
29404: PUSH
29405: LD_INT 0
29407: LESS
29408: IFFALSE 29420
// min_y := 0 else
29410: LD_ADDR_VAR 0 8
29414: PUSH
29415: LD_INT 0
29417: ST_TO_ADDR
29418: GO 29436
// min_y := y - r ;
29420: LD_ADDR_VAR 0 8
29424: PUSH
29425: LD_VAR 0 3
29429: PUSH
29430: LD_VAR 0 4
29434: MINUS
29435: ST_TO_ADDR
// max_x := x + r ;
29436: LD_ADDR_VAR 0 9
29440: PUSH
29441: LD_VAR 0 2
29445: PUSH
29446: LD_VAR 0 4
29450: PLUS
29451: ST_TO_ADDR
// max_y := y + r ;
29452: LD_ADDR_VAR 0 10
29456: PUSH
29457: LD_VAR 0 3
29461: PUSH
29462: LD_VAR 0 4
29466: PLUS
29467: ST_TO_ADDR
// for _x = min_x to max_x do
29468: LD_ADDR_VAR 0 11
29472: PUSH
29473: DOUBLE
29474: LD_VAR 0 7
29478: DEC
29479: ST_TO_ADDR
29480: LD_VAR 0 9
29484: PUSH
29485: FOR_TO
29486: IFFALSE 29603
// for _y = min_y to max_y do
29488: LD_ADDR_VAR 0 12
29492: PUSH
29493: DOUBLE
29494: LD_VAR 0 8
29498: DEC
29499: ST_TO_ADDR
29500: LD_VAR 0 10
29504: PUSH
29505: FOR_TO
29506: IFFALSE 29599
// begin if not ValidHex ( _x , _y ) then
29508: LD_VAR 0 11
29512: PPUSH
29513: LD_VAR 0 12
29517: PPUSH
29518: CALL_OW 488
29522: NOT
29523: IFFALSE 29527
// continue ;
29525: GO 29505
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29527: LD_VAR 0 11
29531: PPUSH
29532: LD_VAR 0 12
29536: PPUSH
29537: CALL_OW 351
29541: PUSH
29542: LD_VAR 0 11
29546: PPUSH
29547: LD_VAR 0 12
29551: PPUSH
29552: CALL_OW 554
29556: AND
29557: IFFALSE 29597
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29559: LD_ADDR_VAR 0 13
29563: PUSH
29564: LD_VAR 0 13
29568: PPUSH
29569: LD_VAR 0 13
29573: PUSH
29574: LD_INT 1
29576: PLUS
29577: PPUSH
29578: LD_VAR 0 11
29582: PUSH
29583: LD_VAR 0 12
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PPUSH
29592: CALL_OW 2
29596: ST_TO_ADDR
// end ;
29597: GO 29505
29599: POP
29600: POP
29601: GO 29485
29603: POP
29604: POP
// if not list then
29605: LD_VAR 0 13
29609: NOT
29610: IFFALSE 29614
// exit ;
29612: GO 29858
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29614: LD_ADDR_VAR 0 13
29618: PUSH
29619: LD_VAR 0 1
29623: PPUSH
29624: LD_VAR 0 13
29628: PPUSH
29629: LD_INT 1
29631: PPUSH
29632: LD_INT 1
29634: PPUSH
29635: CALL 38471 0 4
29639: ST_TO_ADDR
// ComStop ( flame ) ;
29640: LD_VAR 0 1
29644: PPUSH
29645: CALL_OW 141
// for i in list do
29649: LD_ADDR_VAR 0 6
29653: PUSH
29654: LD_VAR 0 13
29658: PUSH
29659: FOR_IN
29660: IFFALSE 29691
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29662: LD_VAR 0 1
29666: PPUSH
29667: LD_VAR 0 6
29671: PUSH
29672: LD_INT 1
29674: ARRAY
29675: PPUSH
29676: LD_VAR 0 6
29680: PUSH
29681: LD_INT 2
29683: ARRAY
29684: PPUSH
29685: CALL_OW 176
29689: GO 29659
29691: POP
29692: POP
// repeat wait ( 0 0$1 ) ;
29693: LD_INT 35
29695: PPUSH
29696: CALL_OW 67
// task := GetTaskList ( flame ) ;
29700: LD_ADDR_VAR 0 14
29704: PUSH
29705: LD_VAR 0 1
29709: PPUSH
29710: CALL_OW 437
29714: ST_TO_ADDR
// if not task then
29715: LD_VAR 0 14
29719: NOT
29720: IFFALSE 29724
// exit ;
29722: GO 29858
// if task [ 1 ] [ 1 ] <> | then
29724: LD_VAR 0 14
29728: PUSH
29729: LD_INT 1
29731: ARRAY
29732: PUSH
29733: LD_INT 1
29735: ARRAY
29736: PUSH
29737: LD_STRING |
29739: NONEQUAL
29740: IFFALSE 29744
// exit ;
29742: GO 29858
// _x := task [ 1 ] [ 2 ] ;
29744: LD_ADDR_VAR 0 11
29748: PUSH
29749: LD_VAR 0 14
29753: PUSH
29754: LD_INT 1
29756: ARRAY
29757: PUSH
29758: LD_INT 2
29760: ARRAY
29761: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29762: LD_ADDR_VAR 0 12
29766: PUSH
29767: LD_VAR 0 14
29771: PUSH
29772: LD_INT 1
29774: ARRAY
29775: PUSH
29776: LD_INT 3
29778: ARRAY
29779: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29780: LD_VAR 0 11
29784: PPUSH
29785: LD_VAR 0 12
29789: PPUSH
29790: CALL_OW 351
29794: NOT
29795: PUSH
29796: LD_VAR 0 11
29800: PPUSH
29801: LD_VAR 0 12
29805: PPUSH
29806: CALL_OW 554
29810: NOT
29811: OR
29812: IFFALSE 29846
// begin task := Delete ( task , 1 ) ;
29814: LD_ADDR_VAR 0 14
29818: PUSH
29819: LD_VAR 0 14
29823: PPUSH
29824: LD_INT 1
29826: PPUSH
29827: CALL_OW 3
29831: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29832: LD_VAR 0 1
29836: PPUSH
29837: LD_VAR 0 14
29841: PPUSH
29842: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29846: LD_VAR 0 1
29850: PPUSH
29851: CALL_OW 314
29855: NOT
29856: IFFALSE 29693
// end ;
29858: LD_VAR 0 5
29862: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29863: LD_EXP 83
29867: NOT
29868: IFFALSE 29918
29870: GO 29872
29872: DISABLE
// begin initHack := true ;
29873: LD_ADDR_EXP 83
29877: PUSH
29878: LD_INT 1
29880: ST_TO_ADDR
// hackTanks := [ ] ;
29881: LD_ADDR_EXP 84
29885: PUSH
29886: EMPTY
29887: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29888: LD_ADDR_EXP 85
29892: PUSH
29893: EMPTY
29894: ST_TO_ADDR
// hackLimit := 3 ;
29895: LD_ADDR_EXP 86
29899: PUSH
29900: LD_INT 3
29902: ST_TO_ADDR
// hackDist := 12 ;
29903: LD_ADDR_EXP 87
29907: PUSH
29908: LD_INT 12
29910: ST_TO_ADDR
// hackCounter := [ ] ;
29911: LD_ADDR_EXP 88
29915: PUSH
29916: EMPTY
29917: ST_TO_ADDR
// end ;
29918: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29919: LD_EXP 83
29923: PUSH
29924: LD_INT 34
29926: PUSH
29927: LD_INT 99
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PPUSH
29934: CALL_OW 69
29938: AND
29939: IFFALSE 30192
29941: GO 29943
29943: DISABLE
29944: LD_INT 0
29946: PPUSH
29947: PPUSH
// begin enable ;
29948: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29949: LD_ADDR_VAR 0 1
29953: PUSH
29954: LD_INT 34
29956: PUSH
29957: LD_INT 99
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PPUSH
29964: CALL_OW 69
29968: PUSH
29969: FOR_IN
29970: IFFALSE 30190
// begin if not i in hackTanks then
29972: LD_VAR 0 1
29976: PUSH
29977: LD_EXP 84
29981: IN
29982: NOT
29983: IFFALSE 30066
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29985: LD_ADDR_EXP 84
29989: PUSH
29990: LD_EXP 84
29994: PPUSH
29995: LD_EXP 84
29999: PUSH
30000: LD_INT 1
30002: PLUS
30003: PPUSH
30004: LD_VAR 0 1
30008: PPUSH
30009: CALL_OW 1
30013: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30014: LD_ADDR_EXP 85
30018: PUSH
30019: LD_EXP 85
30023: PPUSH
30024: LD_EXP 85
30028: PUSH
30029: LD_INT 1
30031: PLUS
30032: PPUSH
30033: EMPTY
30034: PPUSH
30035: CALL_OW 1
30039: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30040: LD_ADDR_EXP 88
30044: PUSH
30045: LD_EXP 88
30049: PPUSH
30050: LD_EXP 88
30054: PUSH
30055: LD_INT 1
30057: PLUS
30058: PPUSH
30059: EMPTY
30060: PPUSH
30061: CALL_OW 1
30065: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30066: LD_VAR 0 1
30070: PPUSH
30071: CALL_OW 302
30075: NOT
30076: IFFALSE 30089
// begin HackUnlinkAll ( i ) ;
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL 30195 0 1
// continue ;
30087: GO 29969
// end ; HackCheckCapturedStatus ( i ) ;
30089: LD_VAR 0 1
30093: PPUSH
30094: CALL 30638 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30098: LD_ADDR_VAR 0 2
30102: PUSH
30103: LD_INT 81
30105: PUSH
30106: LD_VAR 0 1
30110: PPUSH
30111: CALL_OW 255
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 33
30122: PUSH
30123: LD_INT 3
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 91
30132: PUSH
30133: LD_VAR 0 1
30137: PUSH
30138: LD_EXP 87
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 50
30150: PUSH
30151: EMPTY
30152: LIST
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: PPUSH
30160: CALL_OW 69
30164: ST_TO_ADDR
// if not tmp then
30165: LD_VAR 0 2
30169: NOT
30170: IFFALSE 30174
// continue ;
30172: GO 29969
// HackLink ( i , tmp ) ;
30174: LD_VAR 0 1
30178: PPUSH
30179: LD_VAR 0 2
30183: PPUSH
30184: CALL 30331 0 2
// end ;
30188: GO 29969
30190: POP
30191: POP
// end ;
30192: PPOPN 2
30194: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30195: LD_INT 0
30197: PPUSH
30198: PPUSH
30199: PPUSH
// if not hack in hackTanks then
30200: LD_VAR 0 1
30204: PUSH
30205: LD_EXP 84
30209: IN
30210: NOT
30211: IFFALSE 30215
// exit ;
30213: GO 30326
// index := GetElementIndex ( hackTanks , hack ) ;
30215: LD_ADDR_VAR 0 4
30219: PUSH
30220: LD_EXP 84
30224: PPUSH
30225: LD_VAR 0 1
30229: PPUSH
30230: CALL 37768 0 2
30234: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30235: LD_EXP 85
30239: PUSH
30240: LD_VAR 0 4
30244: ARRAY
30245: IFFALSE 30326
// begin for i in hackTanksCaptured [ index ] do
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: LD_EXP 85
30256: PUSH
30257: LD_VAR 0 4
30261: ARRAY
30262: PUSH
30263: FOR_IN
30264: IFFALSE 30290
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30266: LD_VAR 0 3
30270: PUSH
30271: LD_INT 1
30273: ARRAY
30274: PPUSH
30275: LD_VAR 0 3
30279: PUSH
30280: LD_INT 2
30282: ARRAY
30283: PPUSH
30284: CALL_OW 235
30288: GO 30263
30290: POP
30291: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30292: LD_ADDR_EXP 85
30296: PUSH
30297: LD_EXP 85
30301: PPUSH
30302: LD_VAR 0 4
30306: PPUSH
30307: EMPTY
30308: PPUSH
30309: CALL_OW 1
30313: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30314: LD_VAR 0 1
30318: PPUSH
30319: LD_INT 0
30321: PPUSH
30322: CALL_OW 505
// end ; end ;
30326: LD_VAR 0 2
30330: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30331: LD_INT 0
30333: PPUSH
30334: PPUSH
30335: PPUSH
// if not hack in hackTanks or not vehicles then
30336: LD_VAR 0 1
30340: PUSH
30341: LD_EXP 84
30345: IN
30346: NOT
30347: PUSH
30348: LD_VAR 0 2
30352: NOT
30353: OR
30354: IFFALSE 30358
// exit ;
30356: GO 30633
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30358: LD_ADDR_VAR 0 2
30362: PUSH
30363: LD_VAR 0 1
30367: PPUSH
30368: LD_VAR 0 2
30372: PPUSH
30373: LD_INT 1
30375: PPUSH
30376: LD_INT 1
30378: PPUSH
30379: CALL 38418 0 4
30383: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30384: LD_ADDR_VAR 0 5
30388: PUSH
30389: LD_EXP 84
30393: PPUSH
30394: LD_VAR 0 1
30398: PPUSH
30399: CALL 37768 0 2
30403: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30404: LD_EXP 85
30408: PUSH
30409: LD_VAR 0 5
30413: ARRAY
30414: PUSH
30415: LD_EXP 86
30419: LESS
30420: IFFALSE 30609
// begin for i := 1 to vehicles do
30422: LD_ADDR_VAR 0 4
30426: PUSH
30427: DOUBLE
30428: LD_INT 1
30430: DEC
30431: ST_TO_ADDR
30432: LD_VAR 0 2
30436: PUSH
30437: FOR_TO
30438: IFFALSE 30607
// begin if hackTanksCaptured [ index ] = hackLimit then
30440: LD_EXP 85
30444: PUSH
30445: LD_VAR 0 5
30449: ARRAY
30450: PUSH
30451: LD_EXP 86
30455: EQUAL
30456: IFFALSE 30460
// break ;
30458: GO 30607
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30460: LD_ADDR_EXP 88
30464: PUSH
30465: LD_EXP 88
30469: PPUSH
30470: LD_VAR 0 5
30474: PPUSH
30475: LD_EXP 88
30479: PUSH
30480: LD_VAR 0 5
30484: ARRAY
30485: PUSH
30486: LD_INT 1
30488: PLUS
30489: PPUSH
30490: CALL_OW 1
30494: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30495: LD_ADDR_EXP 85
30499: PUSH
30500: LD_EXP 85
30504: PPUSH
30505: LD_VAR 0 5
30509: PUSH
30510: LD_EXP 85
30514: PUSH
30515: LD_VAR 0 5
30519: ARRAY
30520: PUSH
30521: LD_INT 1
30523: PLUS
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PPUSH
30529: LD_VAR 0 2
30533: PUSH
30534: LD_VAR 0 4
30538: ARRAY
30539: PUSH
30540: LD_VAR 0 2
30544: PUSH
30545: LD_VAR 0 4
30549: ARRAY
30550: PPUSH
30551: CALL_OW 255
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PPUSH
30560: CALL 37983 0 3
30564: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30565: LD_VAR 0 2
30569: PUSH
30570: LD_VAR 0 4
30574: ARRAY
30575: PPUSH
30576: LD_VAR 0 1
30580: PPUSH
30581: CALL_OW 255
30585: PPUSH
30586: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30590: LD_VAR 0 2
30594: PUSH
30595: LD_VAR 0 4
30599: ARRAY
30600: PPUSH
30601: CALL_OW 141
// end ;
30605: GO 30437
30607: POP
30608: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30609: LD_VAR 0 1
30613: PPUSH
30614: LD_EXP 85
30618: PUSH
30619: LD_VAR 0 5
30623: ARRAY
30624: PUSH
30625: LD_INT 0
30627: PLUS
30628: PPUSH
30629: CALL_OW 505
// end ;
30633: LD_VAR 0 3
30637: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30638: LD_INT 0
30640: PPUSH
30641: PPUSH
30642: PPUSH
30643: PPUSH
// if not hack in hackTanks then
30644: LD_VAR 0 1
30648: PUSH
30649: LD_EXP 84
30653: IN
30654: NOT
30655: IFFALSE 30659
// exit ;
30657: GO 30899
// index := GetElementIndex ( hackTanks , hack ) ;
30659: LD_ADDR_VAR 0 4
30663: PUSH
30664: LD_EXP 84
30668: PPUSH
30669: LD_VAR 0 1
30673: PPUSH
30674: CALL 37768 0 2
30678: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30679: LD_ADDR_VAR 0 3
30683: PUSH
30684: DOUBLE
30685: LD_EXP 85
30689: PUSH
30690: LD_VAR 0 4
30694: ARRAY
30695: INC
30696: ST_TO_ADDR
30697: LD_INT 1
30699: PUSH
30700: FOR_DOWNTO
30701: IFFALSE 30873
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30703: LD_ADDR_VAR 0 5
30707: PUSH
30708: LD_EXP 85
30712: PUSH
30713: LD_VAR 0 4
30717: ARRAY
30718: PUSH
30719: LD_VAR 0 3
30723: ARRAY
30724: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30725: LD_VAR 0 5
30729: PUSH
30730: LD_INT 1
30732: ARRAY
30733: PPUSH
30734: CALL_OW 302
30738: NOT
30739: PUSH
30740: LD_VAR 0 5
30744: PUSH
30745: LD_INT 1
30747: ARRAY
30748: PPUSH
30749: CALL_OW 255
30753: PUSH
30754: LD_VAR 0 1
30758: PPUSH
30759: CALL_OW 255
30763: NONEQUAL
30764: OR
30765: IFFALSE 30871
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30767: LD_VAR 0 5
30771: PUSH
30772: LD_INT 1
30774: ARRAY
30775: PPUSH
30776: CALL_OW 305
30780: PUSH
30781: LD_VAR 0 5
30785: PUSH
30786: LD_INT 1
30788: ARRAY
30789: PPUSH
30790: CALL_OW 255
30794: PUSH
30795: LD_VAR 0 1
30799: PPUSH
30800: CALL_OW 255
30804: EQUAL
30805: AND
30806: IFFALSE 30830
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30808: LD_VAR 0 5
30812: PUSH
30813: LD_INT 1
30815: ARRAY
30816: PPUSH
30817: LD_VAR 0 5
30821: PUSH
30822: LD_INT 2
30824: ARRAY
30825: PPUSH
30826: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30830: LD_ADDR_EXP 85
30834: PUSH
30835: LD_EXP 85
30839: PPUSH
30840: LD_VAR 0 4
30844: PPUSH
30845: LD_EXP 85
30849: PUSH
30850: LD_VAR 0 4
30854: ARRAY
30855: PPUSH
30856: LD_VAR 0 3
30860: PPUSH
30861: CALL_OW 3
30865: PPUSH
30866: CALL_OW 1
30870: ST_TO_ADDR
// end ; end ;
30871: GO 30700
30873: POP
30874: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30875: LD_VAR 0 1
30879: PPUSH
30880: LD_EXP 85
30884: PUSH
30885: LD_VAR 0 4
30889: ARRAY
30890: PUSH
30891: LD_INT 0
30893: PLUS
30894: PPUSH
30895: CALL_OW 505
// end ;
30899: LD_VAR 0 2
30903: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30904: LD_INT 0
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
// if not hack in hackTanks then
30910: LD_VAR 0 1
30914: PUSH
30915: LD_EXP 84
30919: IN
30920: NOT
30921: IFFALSE 30925
// exit ;
30923: GO 31010
// index := GetElementIndex ( hackTanks , hack ) ;
30925: LD_ADDR_VAR 0 5
30929: PUSH
30930: LD_EXP 84
30934: PPUSH
30935: LD_VAR 0 1
30939: PPUSH
30940: CALL 37768 0 2
30944: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30945: LD_ADDR_VAR 0 4
30949: PUSH
30950: DOUBLE
30951: LD_INT 1
30953: DEC
30954: ST_TO_ADDR
30955: LD_EXP 85
30959: PUSH
30960: LD_VAR 0 5
30964: ARRAY
30965: PUSH
30966: FOR_TO
30967: IFFALSE 31008
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30969: LD_EXP 85
30973: PUSH
30974: LD_VAR 0 5
30978: ARRAY
30979: PUSH
30980: LD_VAR 0 4
30984: ARRAY
30985: PUSH
30986: LD_INT 1
30988: ARRAY
30989: PUSH
30990: LD_VAR 0 2
30994: EQUAL
30995: IFFALSE 31006
// KillUnit ( vehicle ) ;
30997: LD_VAR 0 2
31001: PPUSH
31002: CALL_OW 66
31006: GO 30966
31008: POP
31009: POP
// end ;
31010: LD_VAR 0 3
31014: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31015: LD_EXP 89
31019: NOT
31020: IFFALSE 31055
31022: GO 31024
31024: DISABLE
// begin initMiner := true ;
31025: LD_ADDR_EXP 89
31029: PUSH
31030: LD_INT 1
31032: ST_TO_ADDR
// minersList := [ ] ;
31033: LD_ADDR_EXP 90
31037: PUSH
31038: EMPTY
31039: ST_TO_ADDR
// minerMinesList := [ ] ;
31040: LD_ADDR_EXP 91
31044: PUSH
31045: EMPTY
31046: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31047: LD_ADDR_EXP 92
31051: PUSH
31052: LD_INT 5
31054: ST_TO_ADDR
// end ;
31055: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31056: LD_EXP 89
31060: PUSH
31061: LD_INT 34
31063: PUSH
31064: LD_INT 81
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PPUSH
31071: CALL_OW 69
31075: AND
31076: IFFALSE 31537
31078: GO 31080
31080: DISABLE
31081: LD_INT 0
31083: PPUSH
31084: PPUSH
31085: PPUSH
31086: PPUSH
// begin enable ;
31087: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31088: LD_ADDR_VAR 0 1
31092: PUSH
31093: LD_INT 34
31095: PUSH
31096: LD_INT 81
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PPUSH
31103: CALL_OW 69
31107: PUSH
31108: FOR_IN
31109: IFFALSE 31181
// begin if not i in minersList then
31111: LD_VAR 0 1
31115: PUSH
31116: LD_EXP 90
31120: IN
31121: NOT
31122: IFFALSE 31179
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31124: LD_ADDR_EXP 90
31128: PUSH
31129: LD_EXP 90
31133: PPUSH
31134: LD_EXP 90
31138: PUSH
31139: LD_INT 1
31141: PLUS
31142: PPUSH
31143: LD_VAR 0 1
31147: PPUSH
31148: CALL_OW 1
31152: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31153: LD_ADDR_EXP 91
31157: PUSH
31158: LD_EXP 91
31162: PPUSH
31163: LD_EXP 91
31167: PUSH
31168: LD_INT 1
31170: PLUS
31171: PPUSH
31172: EMPTY
31173: PPUSH
31174: CALL_OW 1
31178: ST_TO_ADDR
// end end ;
31179: GO 31108
31181: POP
31182: POP
// for i := minerMinesList downto 1 do
31183: LD_ADDR_VAR 0 1
31187: PUSH
31188: DOUBLE
31189: LD_EXP 91
31193: INC
31194: ST_TO_ADDR
31195: LD_INT 1
31197: PUSH
31198: FOR_DOWNTO
31199: IFFALSE 31535
// begin if IsLive ( minersList [ i ] ) then
31201: LD_EXP 90
31205: PUSH
31206: LD_VAR 0 1
31210: ARRAY
31211: PPUSH
31212: CALL_OW 300
31216: IFFALSE 31244
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31218: LD_EXP 90
31222: PUSH
31223: LD_VAR 0 1
31227: ARRAY
31228: PPUSH
31229: LD_EXP 91
31233: PUSH
31234: LD_VAR 0 1
31238: ARRAY
31239: PPUSH
31240: CALL_OW 505
// if not minerMinesList [ i ] then
31244: LD_EXP 91
31248: PUSH
31249: LD_VAR 0 1
31253: ARRAY
31254: NOT
31255: IFFALSE 31259
// continue ;
31257: GO 31198
// for j := minerMinesList [ i ] downto 1 do
31259: LD_ADDR_VAR 0 2
31263: PUSH
31264: DOUBLE
31265: LD_EXP 91
31269: PUSH
31270: LD_VAR 0 1
31274: ARRAY
31275: INC
31276: ST_TO_ADDR
31277: LD_INT 1
31279: PUSH
31280: FOR_DOWNTO
31281: IFFALSE 31531
// begin side := GetSide ( minersList [ i ] ) ;
31283: LD_ADDR_VAR 0 3
31287: PUSH
31288: LD_EXP 90
31292: PUSH
31293: LD_VAR 0 1
31297: ARRAY
31298: PPUSH
31299: CALL_OW 255
31303: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31304: LD_ADDR_VAR 0 4
31308: PUSH
31309: LD_EXP 91
31313: PUSH
31314: LD_VAR 0 1
31318: ARRAY
31319: PUSH
31320: LD_VAR 0 2
31324: ARRAY
31325: PUSH
31326: LD_INT 1
31328: ARRAY
31329: PPUSH
31330: LD_EXP 91
31334: PUSH
31335: LD_VAR 0 1
31339: ARRAY
31340: PUSH
31341: LD_VAR 0 2
31345: ARRAY
31346: PUSH
31347: LD_INT 2
31349: ARRAY
31350: PPUSH
31351: CALL_OW 428
31355: ST_TO_ADDR
// if not tmp then
31356: LD_VAR 0 4
31360: NOT
31361: IFFALSE 31365
// continue ;
31363: GO 31280
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31365: LD_VAR 0 4
31369: PUSH
31370: LD_INT 81
31372: PUSH
31373: LD_VAR 0 3
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PPUSH
31382: CALL_OW 69
31386: IN
31387: PUSH
31388: LD_EXP 91
31392: PUSH
31393: LD_VAR 0 1
31397: ARRAY
31398: PUSH
31399: LD_VAR 0 2
31403: ARRAY
31404: PUSH
31405: LD_INT 1
31407: ARRAY
31408: PPUSH
31409: LD_EXP 91
31413: PUSH
31414: LD_VAR 0 1
31418: ARRAY
31419: PUSH
31420: LD_VAR 0 2
31424: ARRAY
31425: PUSH
31426: LD_INT 2
31428: ARRAY
31429: PPUSH
31430: CALL_OW 458
31434: AND
31435: IFFALSE 31529
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31437: LD_EXP 91
31441: PUSH
31442: LD_VAR 0 1
31446: ARRAY
31447: PUSH
31448: LD_VAR 0 2
31452: ARRAY
31453: PUSH
31454: LD_INT 1
31456: ARRAY
31457: PPUSH
31458: LD_EXP 91
31462: PUSH
31463: LD_VAR 0 1
31467: ARRAY
31468: PUSH
31469: LD_VAR 0 2
31473: ARRAY
31474: PUSH
31475: LD_INT 2
31477: ARRAY
31478: PPUSH
31479: LD_VAR 0 3
31483: PPUSH
31484: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31488: LD_ADDR_EXP 91
31492: PUSH
31493: LD_EXP 91
31497: PPUSH
31498: LD_VAR 0 1
31502: PPUSH
31503: LD_EXP 91
31507: PUSH
31508: LD_VAR 0 1
31512: ARRAY
31513: PPUSH
31514: LD_VAR 0 2
31518: PPUSH
31519: CALL_OW 3
31523: PPUSH
31524: CALL_OW 1
31528: ST_TO_ADDR
// end ; end ;
31529: GO 31280
31531: POP
31532: POP
// end ;
31533: GO 31198
31535: POP
31536: POP
// end ;
31537: PPOPN 4
31539: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31540: LD_INT 0
31542: PPUSH
31543: PPUSH
// result := false ;
31544: LD_ADDR_VAR 0 4
31548: PUSH
31549: LD_INT 0
31551: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31552: LD_VAR 0 1
31556: PPUSH
31557: CALL_OW 264
31561: PUSH
31562: LD_INT 81
31564: EQUAL
31565: NOT
31566: IFFALSE 31570
// exit ;
31568: GO 31810
// index := GetElementIndex ( minersList , unit ) ;
31570: LD_ADDR_VAR 0 5
31574: PUSH
31575: LD_EXP 90
31579: PPUSH
31580: LD_VAR 0 1
31584: PPUSH
31585: CALL 37768 0 2
31589: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31590: LD_EXP 91
31594: PUSH
31595: LD_VAR 0 5
31599: ARRAY
31600: PUSH
31601: LD_EXP 92
31605: GREATEREQUAL
31606: IFFALSE 31610
// exit ;
31608: GO 31810
// ComMoveXY ( unit , x , y ) ;
31610: LD_VAR 0 1
31614: PPUSH
31615: LD_VAR 0 2
31619: PPUSH
31620: LD_VAR 0 3
31624: PPUSH
31625: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31629: LD_INT 35
31631: PPUSH
31632: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31636: LD_VAR 0 1
31640: PPUSH
31641: LD_VAR 0 2
31645: PPUSH
31646: LD_VAR 0 3
31650: PPUSH
31651: CALL 69509 0 3
31655: NOT
31656: PUSH
31657: LD_VAR 0 1
31661: PPUSH
31662: CALL_OW 314
31666: AND
31667: IFFALSE 31671
// exit ;
31669: GO 31810
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31671: LD_VAR 0 2
31675: PPUSH
31676: LD_VAR 0 3
31680: PPUSH
31681: CALL_OW 428
31685: PUSH
31686: LD_VAR 0 1
31690: EQUAL
31691: PUSH
31692: LD_VAR 0 1
31696: PPUSH
31697: CALL_OW 314
31701: NOT
31702: AND
31703: IFFALSE 31629
// PlaySoundXY ( x , y , PlantMine ) ;
31705: LD_VAR 0 2
31709: PPUSH
31710: LD_VAR 0 3
31714: PPUSH
31715: LD_STRING PlantMine
31717: PPUSH
31718: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31722: LD_VAR 0 2
31726: PPUSH
31727: LD_VAR 0 3
31731: PPUSH
31732: LD_VAR 0 1
31736: PPUSH
31737: CALL_OW 255
31741: PPUSH
31742: LD_INT 0
31744: PPUSH
31745: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31749: LD_ADDR_EXP 91
31753: PUSH
31754: LD_EXP 91
31758: PPUSH
31759: LD_VAR 0 5
31763: PUSH
31764: LD_EXP 91
31768: PUSH
31769: LD_VAR 0 5
31773: ARRAY
31774: PUSH
31775: LD_INT 1
31777: PLUS
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PPUSH
31783: LD_VAR 0 2
31787: PUSH
31788: LD_VAR 0 3
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PPUSH
31797: CALL 37983 0 3
31801: ST_TO_ADDR
// result := true ;
31802: LD_ADDR_VAR 0 4
31806: PUSH
31807: LD_INT 1
31809: ST_TO_ADDR
// end ;
31810: LD_VAR 0 4
31814: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31815: LD_INT 0
31817: PPUSH
31818: PPUSH
31819: PPUSH
// if not unit in minersList then
31820: LD_VAR 0 1
31824: PUSH
31825: LD_EXP 90
31829: IN
31830: NOT
31831: IFFALSE 31835
// exit ;
31833: GO 32227
// index := GetElementIndex ( minersList , unit ) ;
31835: LD_ADDR_VAR 0 6
31839: PUSH
31840: LD_EXP 90
31844: PPUSH
31845: LD_VAR 0 1
31849: PPUSH
31850: CALL 37768 0 2
31854: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31855: LD_ADDR_VAR 0 5
31859: PUSH
31860: DOUBLE
31861: LD_EXP 91
31865: PUSH
31866: LD_VAR 0 6
31870: ARRAY
31871: INC
31872: ST_TO_ADDR
31873: LD_INT 1
31875: PUSH
31876: FOR_DOWNTO
31877: IFFALSE 32038
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31879: LD_EXP 91
31883: PUSH
31884: LD_VAR 0 6
31888: ARRAY
31889: PUSH
31890: LD_VAR 0 5
31894: ARRAY
31895: PUSH
31896: LD_INT 1
31898: ARRAY
31899: PUSH
31900: LD_VAR 0 2
31904: EQUAL
31905: PUSH
31906: LD_EXP 91
31910: PUSH
31911: LD_VAR 0 6
31915: ARRAY
31916: PUSH
31917: LD_VAR 0 5
31921: ARRAY
31922: PUSH
31923: LD_INT 2
31925: ARRAY
31926: PUSH
31927: LD_VAR 0 3
31931: EQUAL
31932: AND
31933: IFFALSE 32036
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31935: LD_EXP 91
31939: PUSH
31940: LD_VAR 0 6
31944: ARRAY
31945: PUSH
31946: LD_VAR 0 5
31950: ARRAY
31951: PUSH
31952: LD_INT 1
31954: ARRAY
31955: PPUSH
31956: LD_EXP 91
31960: PUSH
31961: LD_VAR 0 6
31965: ARRAY
31966: PUSH
31967: LD_VAR 0 5
31971: ARRAY
31972: PUSH
31973: LD_INT 2
31975: ARRAY
31976: PPUSH
31977: LD_VAR 0 1
31981: PPUSH
31982: CALL_OW 255
31986: PPUSH
31987: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31991: LD_ADDR_EXP 91
31995: PUSH
31996: LD_EXP 91
32000: PPUSH
32001: LD_VAR 0 6
32005: PPUSH
32006: LD_EXP 91
32010: PUSH
32011: LD_VAR 0 6
32015: ARRAY
32016: PPUSH
32017: LD_VAR 0 5
32021: PPUSH
32022: CALL_OW 3
32026: PPUSH
32027: CALL_OW 1
32031: ST_TO_ADDR
// exit ;
32032: POP
32033: POP
32034: GO 32227
// end ; end ;
32036: GO 31876
32038: POP
32039: POP
// for i := minerMinesList [ index ] downto 1 do
32040: LD_ADDR_VAR 0 5
32044: PUSH
32045: DOUBLE
32046: LD_EXP 91
32050: PUSH
32051: LD_VAR 0 6
32055: ARRAY
32056: INC
32057: ST_TO_ADDR
32058: LD_INT 1
32060: PUSH
32061: FOR_DOWNTO
32062: IFFALSE 32225
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32064: LD_EXP 91
32068: PUSH
32069: LD_VAR 0 6
32073: ARRAY
32074: PUSH
32075: LD_VAR 0 5
32079: ARRAY
32080: PUSH
32081: LD_INT 1
32083: ARRAY
32084: PPUSH
32085: LD_EXP 91
32089: PUSH
32090: LD_VAR 0 6
32094: ARRAY
32095: PUSH
32096: LD_VAR 0 5
32100: ARRAY
32101: PUSH
32102: LD_INT 2
32104: ARRAY
32105: PPUSH
32106: LD_VAR 0 2
32110: PPUSH
32111: LD_VAR 0 3
32115: PPUSH
32116: CALL_OW 298
32120: PUSH
32121: LD_INT 6
32123: LESS
32124: IFFALSE 32223
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32126: LD_EXP 91
32130: PUSH
32131: LD_VAR 0 6
32135: ARRAY
32136: PUSH
32137: LD_VAR 0 5
32141: ARRAY
32142: PUSH
32143: LD_INT 1
32145: ARRAY
32146: PPUSH
32147: LD_EXP 91
32151: PUSH
32152: LD_VAR 0 6
32156: ARRAY
32157: PUSH
32158: LD_VAR 0 5
32162: ARRAY
32163: PUSH
32164: LD_INT 2
32166: ARRAY
32167: PPUSH
32168: LD_VAR 0 1
32172: PPUSH
32173: CALL_OW 255
32177: PPUSH
32178: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32182: LD_ADDR_EXP 91
32186: PUSH
32187: LD_EXP 91
32191: PPUSH
32192: LD_VAR 0 6
32196: PPUSH
32197: LD_EXP 91
32201: PUSH
32202: LD_VAR 0 6
32206: ARRAY
32207: PPUSH
32208: LD_VAR 0 5
32212: PPUSH
32213: CALL_OW 3
32217: PPUSH
32218: CALL_OW 1
32222: ST_TO_ADDR
// end ; end ;
32223: GO 32061
32225: POP
32226: POP
// end ;
32227: LD_VAR 0 4
32231: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32232: LD_INT 0
32234: PPUSH
32235: PPUSH
32236: PPUSH
32237: PPUSH
32238: PPUSH
32239: PPUSH
32240: PPUSH
32241: PPUSH
32242: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32243: LD_VAR 0 1
32247: PPUSH
32248: CALL_OW 264
32252: PUSH
32253: LD_INT 81
32255: EQUAL
32256: NOT
32257: PUSH
32258: LD_VAR 0 1
32262: PUSH
32263: LD_EXP 90
32267: IN
32268: NOT
32269: OR
32270: IFFALSE 32274
// exit ;
32272: GO 32596
// index := GetElementIndex ( minersList , unit ) ;
32274: LD_ADDR_VAR 0 6
32278: PUSH
32279: LD_EXP 90
32283: PPUSH
32284: LD_VAR 0 1
32288: PPUSH
32289: CALL 37768 0 2
32293: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32294: LD_ADDR_VAR 0 8
32298: PUSH
32299: LD_EXP 92
32303: PUSH
32304: LD_EXP 91
32308: PUSH
32309: LD_VAR 0 6
32313: ARRAY
32314: MINUS
32315: ST_TO_ADDR
// if not minesFreeAmount then
32316: LD_VAR 0 8
32320: NOT
32321: IFFALSE 32325
// exit ;
32323: GO 32596
// tmp := [ ] ;
32325: LD_ADDR_VAR 0 7
32329: PUSH
32330: EMPTY
32331: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32332: LD_ADDR_VAR 0 5
32336: PUSH
32337: DOUBLE
32338: LD_INT 1
32340: DEC
32341: ST_TO_ADDR
32342: LD_VAR 0 8
32346: PUSH
32347: FOR_TO
32348: IFFALSE 32543
// begin _d := rand ( 0 , 5 ) ;
32350: LD_ADDR_VAR 0 11
32354: PUSH
32355: LD_INT 0
32357: PPUSH
32358: LD_INT 5
32360: PPUSH
32361: CALL_OW 12
32365: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32366: LD_ADDR_VAR 0 12
32370: PUSH
32371: LD_INT 2
32373: PPUSH
32374: LD_INT 6
32376: PPUSH
32377: CALL_OW 12
32381: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32382: LD_ADDR_VAR 0 9
32386: PUSH
32387: LD_VAR 0 2
32391: PPUSH
32392: LD_VAR 0 11
32396: PPUSH
32397: LD_VAR 0 12
32401: PPUSH
32402: CALL_OW 272
32406: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32407: LD_ADDR_VAR 0 10
32411: PUSH
32412: LD_VAR 0 3
32416: PPUSH
32417: LD_VAR 0 11
32421: PPUSH
32422: LD_VAR 0 12
32426: PPUSH
32427: CALL_OW 273
32431: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32432: LD_VAR 0 9
32436: PPUSH
32437: LD_VAR 0 10
32441: PPUSH
32442: CALL_OW 488
32446: PUSH
32447: LD_VAR 0 9
32451: PUSH
32452: LD_VAR 0 10
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_VAR 0 7
32465: IN
32466: NOT
32467: AND
32468: PUSH
32469: LD_VAR 0 9
32473: PPUSH
32474: LD_VAR 0 10
32478: PPUSH
32479: CALL_OW 458
32483: NOT
32484: AND
32485: IFFALSE 32527
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32487: LD_ADDR_VAR 0 7
32491: PUSH
32492: LD_VAR 0 7
32496: PPUSH
32497: LD_VAR 0 7
32501: PUSH
32502: LD_INT 1
32504: PLUS
32505: PPUSH
32506: LD_VAR 0 9
32510: PUSH
32511: LD_VAR 0 10
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PPUSH
32520: CALL_OW 1
32524: ST_TO_ADDR
32525: GO 32541
// i := i - 1 ;
32527: LD_ADDR_VAR 0 5
32531: PUSH
32532: LD_VAR 0 5
32536: PUSH
32537: LD_INT 1
32539: MINUS
32540: ST_TO_ADDR
// end ;
32541: GO 32347
32543: POP
32544: POP
// for i in tmp do
32545: LD_ADDR_VAR 0 5
32549: PUSH
32550: LD_VAR 0 7
32554: PUSH
32555: FOR_IN
32556: IFFALSE 32594
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32558: LD_VAR 0 1
32562: PPUSH
32563: LD_VAR 0 5
32567: PUSH
32568: LD_INT 1
32570: ARRAY
32571: PPUSH
32572: LD_VAR 0 5
32576: PUSH
32577: LD_INT 2
32579: ARRAY
32580: PPUSH
32581: CALL 31540 0 3
32585: NOT
32586: IFFALSE 32592
// exit ;
32588: POP
32589: POP
32590: GO 32596
32592: GO 32555
32594: POP
32595: POP
// end ;
32596: LD_VAR 0 4
32600: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32601: LD_INT 0
32603: PPUSH
32604: PPUSH
32605: PPUSH
32606: PPUSH
32607: PPUSH
32608: PPUSH
32609: PPUSH
// if not GetClass ( unit ) = class_sniper then
32610: LD_VAR 0 1
32614: PPUSH
32615: CALL_OW 257
32619: PUSH
32620: LD_INT 5
32622: EQUAL
32623: NOT
32624: IFFALSE 32628
// exit ;
32626: GO 33016
// dist := 8 ;
32628: LD_ADDR_VAR 0 5
32632: PUSH
32633: LD_INT 8
32635: ST_TO_ADDR
// viewRange := 12 ;
32636: LD_ADDR_VAR 0 7
32640: PUSH
32641: LD_INT 12
32643: ST_TO_ADDR
// side := GetSide ( unit ) ;
32644: LD_ADDR_VAR 0 6
32648: PUSH
32649: LD_VAR 0 1
32653: PPUSH
32654: CALL_OW 255
32658: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32659: LD_INT 61
32661: PPUSH
32662: LD_VAR 0 6
32666: PPUSH
32667: CALL_OW 321
32671: PUSH
32672: LD_INT 2
32674: EQUAL
32675: IFFALSE 32685
// viewRange := 16 ;
32677: LD_ADDR_VAR 0 7
32681: PUSH
32682: LD_INT 16
32684: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32685: LD_VAR 0 1
32689: PPUSH
32690: LD_VAR 0 2
32694: PPUSH
32695: LD_VAR 0 3
32699: PPUSH
32700: CALL_OW 297
32704: PUSH
32705: LD_VAR 0 5
32709: GREATER
32710: IFFALSE 32789
// begin ComMoveXY ( unit , x , y ) ;
32712: LD_VAR 0 1
32716: PPUSH
32717: LD_VAR 0 2
32721: PPUSH
32722: LD_VAR 0 3
32726: PPUSH
32727: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32731: LD_INT 35
32733: PPUSH
32734: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32738: LD_VAR 0 1
32742: PPUSH
32743: LD_VAR 0 2
32747: PPUSH
32748: LD_VAR 0 3
32752: PPUSH
32753: CALL 69509 0 3
32757: NOT
32758: IFFALSE 32762
// exit ;
32760: GO 33016
// until GetDistUnitXY ( unit , x , y ) < dist ;
32762: LD_VAR 0 1
32766: PPUSH
32767: LD_VAR 0 2
32771: PPUSH
32772: LD_VAR 0 3
32776: PPUSH
32777: CALL_OW 297
32781: PUSH
32782: LD_VAR 0 5
32786: LESS
32787: IFFALSE 32731
// end ; ComTurnXY ( unit , x , y ) ;
32789: LD_VAR 0 1
32793: PPUSH
32794: LD_VAR 0 2
32798: PPUSH
32799: LD_VAR 0 3
32803: PPUSH
32804: CALL_OW 118
// wait ( 5 ) ;
32808: LD_INT 5
32810: PPUSH
32811: CALL_OW 67
// _d := GetDir ( unit ) ;
32815: LD_ADDR_VAR 0 10
32819: PUSH
32820: LD_VAR 0 1
32824: PPUSH
32825: CALL_OW 254
32829: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32830: LD_ADDR_VAR 0 8
32834: PUSH
32835: LD_VAR 0 1
32839: PPUSH
32840: CALL_OW 250
32844: PPUSH
32845: LD_VAR 0 10
32849: PPUSH
32850: LD_VAR 0 5
32854: PPUSH
32855: CALL_OW 272
32859: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32860: LD_ADDR_VAR 0 9
32864: PUSH
32865: LD_VAR 0 1
32869: PPUSH
32870: CALL_OW 251
32874: PPUSH
32875: LD_VAR 0 10
32879: PPUSH
32880: LD_VAR 0 5
32884: PPUSH
32885: CALL_OW 273
32889: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32890: LD_VAR 0 8
32894: PPUSH
32895: LD_VAR 0 9
32899: PPUSH
32900: CALL_OW 488
32904: NOT
32905: IFFALSE 32909
// exit ;
32907: GO 33016
// ComAnimCustom ( unit , 1 ) ;
32909: LD_VAR 0 1
32913: PPUSH
32914: LD_INT 1
32916: PPUSH
32917: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32921: LD_VAR 0 8
32925: PPUSH
32926: LD_VAR 0 9
32930: PPUSH
32931: LD_VAR 0 6
32935: PPUSH
32936: LD_VAR 0 7
32940: PPUSH
32941: CALL_OW 330
// repeat wait ( 1 ) ;
32945: LD_INT 1
32947: PPUSH
32948: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32952: LD_VAR 0 1
32956: PPUSH
32957: CALL_OW 316
32961: PUSH
32962: LD_VAR 0 1
32966: PPUSH
32967: CALL_OW 314
32971: OR
32972: PUSH
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL_OW 302
32982: NOT
32983: OR
32984: PUSH
32985: LD_VAR 0 1
32989: PPUSH
32990: CALL_OW 301
32994: OR
32995: IFFALSE 32945
// RemoveSeeing ( _x , _y , side ) ;
32997: LD_VAR 0 8
33001: PPUSH
33002: LD_VAR 0 9
33006: PPUSH
33007: LD_VAR 0 6
33011: PPUSH
33012: CALL_OW 331
// end ; end_of_file
33016: LD_VAR 0 4
33020: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33021: LD_INT 0
33023: PPUSH
33024: PPUSH
// if exist_mode then
33025: LD_VAR 0 2
33029: IFFALSE 33054
// unit := CreateCharacter ( prefix & ident ) else
33031: LD_ADDR_VAR 0 5
33035: PUSH
33036: LD_VAR 0 3
33040: PUSH
33041: LD_VAR 0 1
33045: STR
33046: PPUSH
33047: CALL_OW 34
33051: ST_TO_ADDR
33052: GO 33069
// unit := NewCharacter ( ident ) ;
33054: LD_ADDR_VAR 0 5
33058: PUSH
33059: LD_VAR 0 1
33063: PPUSH
33064: CALL_OW 25
33068: ST_TO_ADDR
// result := unit ;
33069: LD_ADDR_VAR 0 4
33073: PUSH
33074: LD_VAR 0 5
33078: ST_TO_ADDR
// end ;
33079: LD_VAR 0 4
33083: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33084: LD_INT 0
33086: PPUSH
33087: PPUSH
// if not side or not nation then
33088: LD_VAR 0 1
33092: NOT
33093: PUSH
33094: LD_VAR 0 2
33098: NOT
33099: OR
33100: IFFALSE 33104
// exit ;
33102: GO 33872
// case nation of nation_american :
33104: LD_VAR 0 2
33108: PUSH
33109: LD_INT 1
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33331
33117: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33118: LD_ADDR_VAR 0 4
33122: PUSH
33123: LD_INT 35
33125: PUSH
33126: LD_INT 45
33128: PUSH
33129: LD_INT 46
33131: PUSH
33132: LD_INT 47
33134: PUSH
33135: LD_INT 82
33137: PUSH
33138: LD_INT 83
33140: PUSH
33141: LD_INT 84
33143: PUSH
33144: LD_INT 85
33146: PUSH
33147: LD_INT 86
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: LD_INT 2
33155: PUSH
33156: LD_INT 6
33158: PUSH
33159: LD_INT 15
33161: PUSH
33162: LD_INT 16
33164: PUSH
33165: LD_INT 7
33167: PUSH
33168: LD_INT 12
33170: PUSH
33171: LD_INT 13
33173: PUSH
33174: LD_INT 10
33176: PUSH
33177: LD_INT 14
33179: PUSH
33180: LD_INT 20
33182: PUSH
33183: LD_INT 21
33185: PUSH
33186: LD_INT 22
33188: PUSH
33189: LD_INT 25
33191: PUSH
33192: LD_INT 32
33194: PUSH
33195: LD_INT 27
33197: PUSH
33198: LD_INT 36
33200: PUSH
33201: LD_INT 69
33203: PUSH
33204: LD_INT 39
33206: PUSH
33207: LD_INT 34
33209: PUSH
33210: LD_INT 40
33212: PUSH
33213: LD_INT 48
33215: PUSH
33216: LD_INT 49
33218: PUSH
33219: LD_INT 50
33221: PUSH
33222: LD_INT 51
33224: PUSH
33225: LD_INT 52
33227: PUSH
33228: LD_INT 53
33230: PUSH
33231: LD_INT 54
33233: PUSH
33234: LD_INT 55
33236: PUSH
33237: LD_INT 56
33239: PUSH
33240: LD_INT 57
33242: PUSH
33243: LD_INT 58
33245: PUSH
33246: LD_INT 59
33248: PUSH
33249: LD_INT 60
33251: PUSH
33252: LD_INT 61
33254: PUSH
33255: LD_INT 62
33257: PUSH
33258: LD_INT 80
33260: PUSH
33261: LD_INT 82
33263: PUSH
33264: LD_INT 83
33266: PUSH
33267: LD_INT 84
33269: PUSH
33270: LD_INT 85
33272: PUSH
33273: LD_INT 86
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: ST_TO_ADDR
33329: GO 33796
33331: LD_INT 2
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33339
33337: GO 33565
33339: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33340: LD_ADDR_VAR 0 4
33344: PUSH
33345: LD_INT 35
33347: PUSH
33348: LD_INT 45
33350: PUSH
33351: LD_INT 46
33353: PUSH
33354: LD_INT 47
33356: PUSH
33357: LD_INT 82
33359: PUSH
33360: LD_INT 83
33362: PUSH
33363: LD_INT 84
33365: PUSH
33366: LD_INT 85
33368: PUSH
33369: LD_INT 87
33371: PUSH
33372: LD_INT 70
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: LD_INT 11
33380: PUSH
33381: LD_INT 3
33383: PUSH
33384: LD_INT 4
33386: PUSH
33387: LD_INT 5
33389: PUSH
33390: LD_INT 6
33392: PUSH
33393: LD_INT 15
33395: PUSH
33396: LD_INT 18
33398: PUSH
33399: LD_INT 7
33401: PUSH
33402: LD_INT 17
33404: PUSH
33405: LD_INT 8
33407: PUSH
33408: LD_INT 20
33410: PUSH
33411: LD_INT 21
33413: PUSH
33414: LD_INT 22
33416: PUSH
33417: LD_INT 72
33419: PUSH
33420: LD_INT 26
33422: PUSH
33423: LD_INT 69
33425: PUSH
33426: LD_INT 39
33428: PUSH
33429: LD_INT 40
33431: PUSH
33432: LD_INT 41
33434: PUSH
33435: LD_INT 42
33437: PUSH
33438: LD_INT 43
33440: PUSH
33441: LD_INT 48
33443: PUSH
33444: LD_INT 49
33446: PUSH
33447: LD_INT 50
33449: PUSH
33450: LD_INT 51
33452: PUSH
33453: LD_INT 52
33455: PUSH
33456: LD_INT 53
33458: PUSH
33459: LD_INT 54
33461: PUSH
33462: LD_INT 55
33464: PUSH
33465: LD_INT 56
33467: PUSH
33468: LD_INT 60
33470: PUSH
33471: LD_INT 61
33473: PUSH
33474: LD_INT 62
33476: PUSH
33477: LD_INT 66
33479: PUSH
33480: LD_INT 67
33482: PUSH
33483: LD_INT 68
33485: PUSH
33486: LD_INT 81
33488: PUSH
33489: LD_INT 82
33491: PUSH
33492: LD_INT 83
33494: PUSH
33495: LD_INT 84
33497: PUSH
33498: LD_INT 85
33500: PUSH
33501: LD_INT 87
33503: PUSH
33504: LD_INT 88
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: ST_TO_ADDR
33563: GO 33796
33565: LD_INT 3
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33573
33571: GO 33795
33573: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33574: LD_ADDR_VAR 0 4
33578: PUSH
33579: LD_INT 46
33581: PUSH
33582: LD_INT 47
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 82
33593: PUSH
33594: LD_INT 83
33596: PUSH
33597: LD_INT 84
33599: PUSH
33600: LD_INT 85
33602: PUSH
33603: LD_INT 86
33605: PUSH
33606: LD_INT 11
33608: PUSH
33609: LD_INT 9
33611: PUSH
33612: LD_INT 20
33614: PUSH
33615: LD_INT 19
33617: PUSH
33618: LD_INT 21
33620: PUSH
33621: LD_INT 24
33623: PUSH
33624: LD_INT 22
33626: PUSH
33627: LD_INT 25
33629: PUSH
33630: LD_INT 28
33632: PUSH
33633: LD_INT 29
33635: PUSH
33636: LD_INT 30
33638: PUSH
33639: LD_INT 31
33641: PUSH
33642: LD_INT 37
33644: PUSH
33645: LD_INT 38
33647: PUSH
33648: LD_INT 32
33650: PUSH
33651: LD_INT 27
33653: PUSH
33654: LD_INT 33
33656: PUSH
33657: LD_INT 69
33659: PUSH
33660: LD_INT 39
33662: PUSH
33663: LD_INT 34
33665: PUSH
33666: LD_INT 40
33668: PUSH
33669: LD_INT 71
33671: PUSH
33672: LD_INT 23
33674: PUSH
33675: LD_INT 44
33677: PUSH
33678: LD_INT 48
33680: PUSH
33681: LD_INT 49
33683: PUSH
33684: LD_INT 50
33686: PUSH
33687: LD_INT 51
33689: PUSH
33690: LD_INT 52
33692: PUSH
33693: LD_INT 53
33695: PUSH
33696: LD_INT 54
33698: PUSH
33699: LD_INT 55
33701: PUSH
33702: LD_INT 56
33704: PUSH
33705: LD_INT 57
33707: PUSH
33708: LD_INT 58
33710: PUSH
33711: LD_INT 59
33713: PUSH
33714: LD_INT 63
33716: PUSH
33717: LD_INT 64
33719: PUSH
33720: LD_INT 65
33722: PUSH
33723: LD_INT 82
33725: PUSH
33726: LD_INT 83
33728: PUSH
33729: LD_INT 84
33731: PUSH
33732: LD_INT 85
33734: PUSH
33735: LD_INT 86
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: ST_TO_ADDR
33793: GO 33796
33795: POP
// if state > - 1 and state < 3 then
33796: LD_VAR 0 3
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: GREATER
33805: PUSH
33806: LD_VAR 0 3
33810: PUSH
33811: LD_INT 3
33813: LESS
33814: AND
33815: IFFALSE 33872
// for i in result do
33817: LD_ADDR_VAR 0 5
33821: PUSH
33822: LD_VAR 0 4
33826: PUSH
33827: FOR_IN
33828: IFFALSE 33870
// if GetTech ( i , side ) <> state then
33830: LD_VAR 0 5
33834: PPUSH
33835: LD_VAR 0 1
33839: PPUSH
33840: CALL_OW 321
33844: PUSH
33845: LD_VAR 0 3
33849: NONEQUAL
33850: IFFALSE 33868
// result := result diff i ;
33852: LD_ADDR_VAR 0 4
33856: PUSH
33857: LD_VAR 0 4
33861: PUSH
33862: LD_VAR 0 5
33866: DIFF
33867: ST_TO_ADDR
33868: GO 33827
33870: POP
33871: POP
// end ;
33872: LD_VAR 0 4
33876: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33877: LD_INT 0
33879: PPUSH
33880: PPUSH
33881: PPUSH
// result := true ;
33882: LD_ADDR_VAR 0 3
33886: PUSH
33887: LD_INT 1
33889: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33890: LD_ADDR_VAR 0 5
33894: PUSH
33895: LD_VAR 0 2
33899: PPUSH
33900: CALL_OW 480
33904: ST_TO_ADDR
// if not tmp then
33905: LD_VAR 0 5
33909: NOT
33910: IFFALSE 33914
// exit ;
33912: GO 33963
// for i in tmp do
33914: LD_ADDR_VAR 0 4
33918: PUSH
33919: LD_VAR 0 5
33923: PUSH
33924: FOR_IN
33925: IFFALSE 33961
// if GetTech ( i , side ) <> state_researched then
33927: LD_VAR 0 4
33931: PPUSH
33932: LD_VAR 0 1
33936: PPUSH
33937: CALL_OW 321
33941: PUSH
33942: LD_INT 2
33944: NONEQUAL
33945: IFFALSE 33959
// begin result := false ;
33947: LD_ADDR_VAR 0 3
33951: PUSH
33952: LD_INT 0
33954: ST_TO_ADDR
// exit ;
33955: POP
33956: POP
33957: GO 33963
// end ;
33959: GO 33924
33961: POP
33962: POP
// end ;
33963: LD_VAR 0 3
33967: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33968: LD_INT 0
33970: PPUSH
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
33978: PPUSH
33979: PPUSH
33980: PPUSH
33981: PPUSH
33982: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33983: LD_VAR 0 1
33987: NOT
33988: PUSH
33989: LD_VAR 0 1
33993: PPUSH
33994: CALL_OW 257
33998: PUSH
33999: LD_INT 9
34001: NONEQUAL
34002: OR
34003: IFFALSE 34007
// exit ;
34005: GO 34580
// side := GetSide ( unit ) ;
34007: LD_ADDR_VAR 0 9
34011: PUSH
34012: LD_VAR 0 1
34016: PPUSH
34017: CALL_OW 255
34021: ST_TO_ADDR
// tech_space := tech_spacanom ;
34022: LD_ADDR_VAR 0 12
34026: PUSH
34027: LD_INT 29
34029: ST_TO_ADDR
// tech_time := tech_taurad ;
34030: LD_ADDR_VAR 0 13
34034: PUSH
34035: LD_INT 28
34037: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34038: LD_ADDR_VAR 0 11
34042: PUSH
34043: LD_VAR 0 1
34047: PPUSH
34048: CALL_OW 310
34052: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34053: LD_VAR 0 11
34057: PPUSH
34058: CALL_OW 247
34062: PUSH
34063: LD_INT 2
34065: EQUAL
34066: IFFALSE 34070
// exit ;
34068: GO 34580
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34070: LD_ADDR_VAR 0 8
34074: PUSH
34075: LD_INT 81
34077: PUSH
34078: LD_VAR 0 9
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 3
34089: PUSH
34090: LD_INT 21
34092: PUSH
34093: LD_INT 3
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PPUSH
34108: CALL_OW 69
34112: ST_TO_ADDR
// if not tmp then
34113: LD_VAR 0 8
34117: NOT
34118: IFFALSE 34122
// exit ;
34120: GO 34580
// if in_unit then
34122: LD_VAR 0 11
34126: IFFALSE 34150
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34128: LD_ADDR_VAR 0 10
34132: PUSH
34133: LD_VAR 0 8
34137: PPUSH
34138: LD_VAR 0 11
34142: PPUSH
34143: CALL_OW 74
34147: ST_TO_ADDR
34148: GO 34170
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34150: LD_ADDR_VAR 0 10
34154: PUSH
34155: LD_VAR 0 8
34159: PPUSH
34160: LD_VAR 0 1
34164: PPUSH
34165: CALL_OW 74
34169: ST_TO_ADDR
// if not enemy then
34170: LD_VAR 0 10
34174: NOT
34175: IFFALSE 34179
// exit ;
34177: GO 34580
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34179: LD_VAR 0 11
34183: PUSH
34184: LD_VAR 0 11
34188: PPUSH
34189: LD_VAR 0 10
34193: PPUSH
34194: CALL_OW 296
34198: PUSH
34199: LD_INT 13
34201: GREATER
34202: AND
34203: PUSH
34204: LD_VAR 0 1
34208: PPUSH
34209: LD_VAR 0 10
34213: PPUSH
34214: CALL_OW 296
34218: PUSH
34219: LD_INT 12
34221: GREATER
34222: OR
34223: IFFALSE 34227
// exit ;
34225: GO 34580
// missile := [ 1 ] ;
34227: LD_ADDR_VAR 0 14
34231: PUSH
34232: LD_INT 1
34234: PUSH
34235: EMPTY
34236: LIST
34237: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34238: LD_VAR 0 9
34242: PPUSH
34243: LD_VAR 0 12
34247: PPUSH
34248: CALL_OW 325
34252: IFFALSE 34281
// missile := Replace ( missile , missile + 1 , 2 ) ;
34254: LD_ADDR_VAR 0 14
34258: PUSH
34259: LD_VAR 0 14
34263: PPUSH
34264: LD_VAR 0 14
34268: PUSH
34269: LD_INT 1
34271: PLUS
34272: PPUSH
34273: LD_INT 2
34275: PPUSH
34276: CALL_OW 1
34280: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34281: LD_VAR 0 9
34285: PPUSH
34286: LD_VAR 0 13
34290: PPUSH
34291: CALL_OW 325
34295: PUSH
34296: LD_VAR 0 10
34300: PPUSH
34301: CALL_OW 255
34305: PPUSH
34306: LD_VAR 0 13
34310: PPUSH
34311: CALL_OW 325
34315: NOT
34316: AND
34317: IFFALSE 34346
// missile := Replace ( missile , missile + 1 , 3 ) ;
34319: LD_ADDR_VAR 0 14
34323: PUSH
34324: LD_VAR 0 14
34328: PPUSH
34329: LD_VAR 0 14
34333: PUSH
34334: LD_INT 1
34336: PLUS
34337: PPUSH
34338: LD_INT 3
34340: PPUSH
34341: CALL_OW 1
34345: ST_TO_ADDR
// if missile < 2 then
34346: LD_VAR 0 14
34350: PUSH
34351: LD_INT 2
34353: LESS
34354: IFFALSE 34358
// exit ;
34356: GO 34580
// x := GetX ( enemy ) ;
34358: LD_ADDR_VAR 0 4
34362: PUSH
34363: LD_VAR 0 10
34367: PPUSH
34368: CALL_OW 250
34372: ST_TO_ADDR
// y := GetY ( enemy ) ;
34373: LD_ADDR_VAR 0 5
34377: PUSH
34378: LD_VAR 0 10
34382: PPUSH
34383: CALL_OW 251
34387: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34388: LD_ADDR_VAR 0 6
34392: PUSH
34393: LD_VAR 0 4
34397: PUSH
34398: LD_INT 1
34400: NEG
34401: PPUSH
34402: LD_INT 1
34404: PPUSH
34405: CALL_OW 12
34409: PLUS
34410: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34411: LD_ADDR_VAR 0 7
34415: PUSH
34416: LD_VAR 0 5
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PPUSH
34425: LD_INT 1
34427: PPUSH
34428: CALL_OW 12
34432: PLUS
34433: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34434: LD_VAR 0 6
34438: PPUSH
34439: LD_VAR 0 7
34443: PPUSH
34444: CALL_OW 488
34448: NOT
34449: IFFALSE 34471
// begin _x := x ;
34451: LD_ADDR_VAR 0 6
34455: PUSH
34456: LD_VAR 0 4
34460: ST_TO_ADDR
// _y := y ;
34461: LD_ADDR_VAR 0 7
34465: PUSH
34466: LD_VAR 0 5
34470: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34471: LD_ADDR_VAR 0 3
34475: PUSH
34476: LD_INT 1
34478: PPUSH
34479: LD_VAR 0 14
34483: PPUSH
34484: CALL_OW 12
34488: ST_TO_ADDR
// case i of 1 :
34489: LD_VAR 0 3
34493: PUSH
34494: LD_INT 1
34496: DOUBLE
34497: EQUAL
34498: IFTRUE 34502
34500: GO 34519
34502: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34503: LD_VAR 0 1
34507: PPUSH
34508: LD_VAR 0 10
34512: PPUSH
34513: CALL_OW 115
34517: GO 34580
34519: LD_INT 2
34521: DOUBLE
34522: EQUAL
34523: IFTRUE 34527
34525: GO 34549
34527: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34528: LD_VAR 0 1
34532: PPUSH
34533: LD_VAR 0 6
34537: PPUSH
34538: LD_VAR 0 7
34542: PPUSH
34543: CALL_OW 153
34547: GO 34580
34549: LD_INT 3
34551: DOUBLE
34552: EQUAL
34553: IFTRUE 34557
34555: GO 34579
34557: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34558: LD_VAR 0 1
34562: PPUSH
34563: LD_VAR 0 6
34567: PPUSH
34568: LD_VAR 0 7
34572: PPUSH
34573: CALL_OW 154
34577: GO 34580
34579: POP
// end ;
34580: LD_VAR 0 2
34584: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34585: LD_INT 0
34587: PPUSH
34588: PPUSH
34589: PPUSH
34590: PPUSH
34591: PPUSH
34592: PPUSH
// if not unit or not building then
34593: LD_VAR 0 1
34597: NOT
34598: PUSH
34599: LD_VAR 0 2
34603: NOT
34604: OR
34605: IFFALSE 34609
// exit ;
34607: GO 34767
// x := GetX ( building ) ;
34609: LD_ADDR_VAR 0 5
34613: PUSH
34614: LD_VAR 0 2
34618: PPUSH
34619: CALL_OW 250
34623: ST_TO_ADDR
// y := GetY ( building ) ;
34624: LD_ADDR_VAR 0 6
34628: PUSH
34629: LD_VAR 0 2
34633: PPUSH
34634: CALL_OW 251
34638: ST_TO_ADDR
// for i = 0 to 5 do
34639: LD_ADDR_VAR 0 4
34643: PUSH
34644: DOUBLE
34645: LD_INT 0
34647: DEC
34648: ST_TO_ADDR
34649: LD_INT 5
34651: PUSH
34652: FOR_TO
34653: IFFALSE 34765
// begin _x := ShiftX ( x , i , 3 ) ;
34655: LD_ADDR_VAR 0 7
34659: PUSH
34660: LD_VAR 0 5
34664: PPUSH
34665: LD_VAR 0 4
34669: PPUSH
34670: LD_INT 3
34672: PPUSH
34673: CALL_OW 272
34677: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34678: LD_ADDR_VAR 0 8
34682: PUSH
34683: LD_VAR 0 6
34687: PPUSH
34688: LD_VAR 0 4
34692: PPUSH
34693: LD_INT 3
34695: PPUSH
34696: CALL_OW 273
34700: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34701: LD_VAR 0 7
34705: PPUSH
34706: LD_VAR 0 8
34710: PPUSH
34711: CALL_OW 488
34715: NOT
34716: IFFALSE 34720
// continue ;
34718: GO 34652
// if HexInfo ( _x , _y ) = 0 then
34720: LD_VAR 0 7
34724: PPUSH
34725: LD_VAR 0 8
34729: PPUSH
34730: CALL_OW 428
34734: PUSH
34735: LD_INT 0
34737: EQUAL
34738: IFFALSE 34763
// begin ComMoveXY ( unit , _x , _y ) ;
34740: LD_VAR 0 1
34744: PPUSH
34745: LD_VAR 0 7
34749: PPUSH
34750: LD_VAR 0 8
34754: PPUSH
34755: CALL_OW 111
// exit ;
34759: POP
34760: POP
34761: GO 34767
// end ; end ;
34763: GO 34652
34765: POP
34766: POP
// end ;
34767: LD_VAR 0 3
34771: RET
// export function ScanBase ( side , base_area ) ; begin
34772: LD_INT 0
34774: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34775: LD_ADDR_VAR 0 3
34779: PUSH
34780: LD_VAR 0 2
34784: PPUSH
34785: LD_INT 81
34787: PUSH
34788: LD_VAR 0 1
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PPUSH
34797: CALL_OW 70
34801: ST_TO_ADDR
// end ;
34802: LD_VAR 0 3
34806: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34807: LD_INT 0
34809: PPUSH
34810: PPUSH
34811: PPUSH
34812: PPUSH
// result := false ;
34813: LD_ADDR_VAR 0 2
34817: PUSH
34818: LD_INT 0
34820: ST_TO_ADDR
// side := GetSide ( unit ) ;
34821: LD_ADDR_VAR 0 3
34825: PUSH
34826: LD_VAR 0 1
34830: PPUSH
34831: CALL_OW 255
34835: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34836: LD_ADDR_VAR 0 4
34840: PUSH
34841: LD_VAR 0 1
34845: PPUSH
34846: CALL_OW 248
34850: ST_TO_ADDR
// case nat of 1 :
34851: LD_VAR 0 4
34855: PUSH
34856: LD_INT 1
34858: DOUBLE
34859: EQUAL
34860: IFTRUE 34864
34862: GO 34875
34864: POP
// tech := tech_lassight ; 2 :
34865: LD_ADDR_VAR 0 5
34869: PUSH
34870: LD_INT 12
34872: ST_TO_ADDR
34873: GO 34914
34875: LD_INT 2
34877: DOUBLE
34878: EQUAL
34879: IFTRUE 34883
34881: GO 34894
34883: POP
// tech := tech_mortar ; 3 :
34884: LD_ADDR_VAR 0 5
34888: PUSH
34889: LD_INT 41
34891: ST_TO_ADDR
34892: GO 34914
34894: LD_INT 3
34896: DOUBLE
34897: EQUAL
34898: IFTRUE 34902
34900: GO 34913
34902: POP
// tech := tech_bazooka ; end ;
34903: LD_ADDR_VAR 0 5
34907: PUSH
34908: LD_INT 44
34910: ST_TO_ADDR
34911: GO 34914
34913: POP
// if Researched ( side , tech ) then
34914: LD_VAR 0 3
34918: PPUSH
34919: LD_VAR 0 5
34923: PPUSH
34924: CALL_OW 325
34928: IFFALSE 34955
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34930: LD_ADDR_VAR 0 2
34934: PUSH
34935: LD_INT 5
34937: PUSH
34938: LD_INT 8
34940: PUSH
34941: LD_INT 9
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: PUSH
34949: LD_VAR 0 4
34953: ARRAY
34954: ST_TO_ADDR
// end ;
34955: LD_VAR 0 2
34959: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34960: LD_INT 0
34962: PPUSH
34963: PPUSH
34964: PPUSH
// if not mines then
34965: LD_VAR 0 2
34969: NOT
34970: IFFALSE 34974
// exit ;
34972: GO 35118
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34974: LD_ADDR_VAR 0 5
34978: PUSH
34979: LD_INT 81
34981: PUSH
34982: LD_VAR 0 1
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: LD_INT 21
34996: PUSH
34997: LD_INT 3
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PPUSH
35012: CALL_OW 69
35016: ST_TO_ADDR
// for i in mines do
35017: LD_ADDR_VAR 0 4
35021: PUSH
35022: LD_VAR 0 2
35026: PUSH
35027: FOR_IN
35028: IFFALSE 35116
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35030: LD_VAR 0 4
35034: PUSH
35035: LD_INT 1
35037: ARRAY
35038: PPUSH
35039: LD_VAR 0 4
35043: PUSH
35044: LD_INT 2
35046: ARRAY
35047: PPUSH
35048: CALL_OW 458
35052: NOT
35053: IFFALSE 35057
// continue ;
35055: GO 35027
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35057: LD_VAR 0 4
35061: PUSH
35062: LD_INT 1
35064: ARRAY
35065: PPUSH
35066: LD_VAR 0 4
35070: PUSH
35071: LD_INT 2
35073: ARRAY
35074: PPUSH
35075: CALL_OW 428
35079: PUSH
35080: LD_VAR 0 5
35084: IN
35085: IFFALSE 35114
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35087: LD_VAR 0 4
35091: PUSH
35092: LD_INT 1
35094: ARRAY
35095: PPUSH
35096: LD_VAR 0 4
35100: PUSH
35101: LD_INT 2
35103: ARRAY
35104: PPUSH
35105: LD_VAR 0 1
35109: PPUSH
35110: CALL_OW 456
// end ;
35114: GO 35027
35116: POP
35117: POP
// end ;
35118: LD_VAR 0 3
35122: RET
// export function Count ( array ) ; begin
35123: LD_INT 0
35125: PPUSH
// result := array + 0 ;
35126: LD_ADDR_VAR 0 2
35130: PUSH
35131: LD_VAR 0 1
35135: PUSH
35136: LD_INT 0
35138: PLUS
35139: ST_TO_ADDR
// end ;
35140: LD_VAR 0 2
35144: RET
// export function IsEmpty ( building ) ; begin
35145: LD_INT 0
35147: PPUSH
// if not building then
35148: LD_VAR 0 1
35152: NOT
35153: IFFALSE 35157
// exit ;
35155: GO 35200
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35157: LD_ADDR_VAR 0 2
35161: PUSH
35162: LD_VAR 0 1
35166: PUSH
35167: LD_INT 22
35169: PUSH
35170: LD_VAR 0 1
35174: PPUSH
35175: CALL_OW 255
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 58
35186: PUSH
35187: EMPTY
35188: LIST
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PPUSH
35194: CALL_OW 69
35198: IN
35199: ST_TO_ADDR
// end ;
35200: LD_VAR 0 2
35204: RET
// export function IsNotFull ( building ) ; var places ; begin
35205: LD_INT 0
35207: PPUSH
35208: PPUSH
// if not building then
35209: LD_VAR 0 1
35213: NOT
35214: IFFALSE 35218
// exit ;
35216: GO 35246
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35218: LD_ADDR_VAR 0 2
35222: PUSH
35223: LD_VAR 0 1
35227: PPUSH
35228: LD_INT 3
35230: PUSH
35231: LD_INT 62
35233: PUSH
35234: EMPTY
35235: LIST
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PPUSH
35241: CALL_OW 72
35245: ST_TO_ADDR
// end ;
35246: LD_VAR 0 2
35250: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35251: LD_INT 0
35253: PPUSH
35254: PPUSH
35255: PPUSH
35256: PPUSH
// tmp := [ ] ;
35257: LD_ADDR_VAR 0 3
35261: PUSH
35262: EMPTY
35263: ST_TO_ADDR
// list := [ ] ;
35264: LD_ADDR_VAR 0 5
35268: PUSH
35269: EMPTY
35270: ST_TO_ADDR
// for i = 16 to 25 do
35271: LD_ADDR_VAR 0 4
35275: PUSH
35276: DOUBLE
35277: LD_INT 16
35279: DEC
35280: ST_TO_ADDR
35281: LD_INT 25
35283: PUSH
35284: FOR_TO
35285: IFFALSE 35358
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35287: LD_ADDR_VAR 0 3
35291: PUSH
35292: LD_VAR 0 3
35296: PUSH
35297: LD_INT 22
35299: PUSH
35300: LD_VAR 0 1
35304: PPUSH
35305: CALL_OW 255
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 91
35316: PUSH
35317: LD_VAR 0 1
35321: PUSH
35322: LD_INT 6
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 30
35332: PUSH
35333: LD_VAR 0 4
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: PUSH
35347: EMPTY
35348: LIST
35349: PPUSH
35350: CALL_OW 69
35354: ADD
35355: ST_TO_ADDR
35356: GO 35284
35358: POP
35359: POP
// for i = 1 to tmp do
35360: LD_ADDR_VAR 0 4
35364: PUSH
35365: DOUBLE
35366: LD_INT 1
35368: DEC
35369: ST_TO_ADDR
35370: LD_VAR 0 3
35374: PUSH
35375: FOR_TO
35376: IFFALSE 35464
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35378: LD_ADDR_VAR 0 5
35382: PUSH
35383: LD_VAR 0 5
35387: PUSH
35388: LD_VAR 0 3
35392: PUSH
35393: LD_VAR 0 4
35397: ARRAY
35398: PPUSH
35399: CALL_OW 266
35403: PUSH
35404: LD_VAR 0 3
35408: PUSH
35409: LD_VAR 0 4
35413: ARRAY
35414: PPUSH
35415: CALL_OW 250
35419: PUSH
35420: LD_VAR 0 3
35424: PUSH
35425: LD_VAR 0 4
35429: ARRAY
35430: PPUSH
35431: CALL_OW 251
35435: PUSH
35436: LD_VAR 0 3
35440: PUSH
35441: LD_VAR 0 4
35445: ARRAY
35446: PPUSH
35447: CALL_OW 254
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: PUSH
35458: EMPTY
35459: LIST
35460: ADD
35461: ST_TO_ADDR
35462: GO 35375
35464: POP
35465: POP
// result := list ;
35466: LD_ADDR_VAR 0 2
35470: PUSH
35471: LD_VAR 0 5
35475: ST_TO_ADDR
// end ;
35476: LD_VAR 0 2
35480: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35481: LD_INT 0
35483: PPUSH
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
35488: PPUSH
35489: PPUSH
// if not factory then
35490: LD_VAR 0 1
35494: NOT
35495: IFFALSE 35499
// exit ;
35497: GO 36092
// if control = control_apeman then
35499: LD_VAR 0 4
35503: PUSH
35504: LD_INT 5
35506: EQUAL
35507: IFFALSE 35616
// begin tmp := UnitsInside ( factory ) ;
35509: LD_ADDR_VAR 0 8
35513: PUSH
35514: LD_VAR 0 1
35518: PPUSH
35519: CALL_OW 313
35523: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35524: LD_VAR 0 8
35528: PPUSH
35529: LD_INT 25
35531: PUSH
35532: LD_INT 12
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PPUSH
35539: CALL_OW 72
35543: NOT
35544: IFFALSE 35554
// control := control_manual ;
35546: LD_ADDR_VAR 0 4
35550: PUSH
35551: LD_INT 1
35553: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35554: LD_ADDR_VAR 0 8
35558: PUSH
35559: LD_VAR 0 1
35563: PPUSH
35564: CALL 35251 0 1
35568: ST_TO_ADDR
// if tmp then
35569: LD_VAR 0 8
35573: IFFALSE 35616
// begin for i in tmp do
35575: LD_ADDR_VAR 0 7
35579: PUSH
35580: LD_VAR 0 8
35584: PUSH
35585: FOR_IN
35586: IFFALSE 35614
// if i [ 1 ] = b_ext_radio then
35588: LD_VAR 0 7
35592: PUSH
35593: LD_INT 1
35595: ARRAY
35596: PUSH
35597: LD_INT 22
35599: EQUAL
35600: IFFALSE 35612
// begin control := control_remote ;
35602: LD_ADDR_VAR 0 4
35606: PUSH
35607: LD_INT 2
35609: ST_TO_ADDR
// break ;
35610: GO 35614
// end ;
35612: GO 35585
35614: POP
35615: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35616: LD_VAR 0 1
35620: PPUSH
35621: LD_VAR 0 2
35625: PPUSH
35626: LD_VAR 0 3
35630: PPUSH
35631: LD_VAR 0 4
35635: PPUSH
35636: LD_VAR 0 5
35640: PPUSH
35641: CALL_OW 448
35645: IFFALSE 35680
// begin result := [ chassis , engine , control , weapon ] ;
35647: LD_ADDR_VAR 0 6
35651: PUSH
35652: LD_VAR 0 2
35656: PUSH
35657: LD_VAR 0 3
35661: PUSH
35662: LD_VAR 0 4
35666: PUSH
35667: LD_VAR 0 5
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: ST_TO_ADDR
// exit ;
35678: GO 36092
// end ; _chassis := AvailableChassisList ( factory ) ;
35680: LD_ADDR_VAR 0 9
35684: PUSH
35685: LD_VAR 0 1
35689: PPUSH
35690: CALL_OW 475
35694: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35695: LD_ADDR_VAR 0 11
35699: PUSH
35700: LD_VAR 0 1
35704: PPUSH
35705: CALL_OW 476
35709: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35710: LD_ADDR_VAR 0 12
35714: PUSH
35715: LD_VAR 0 1
35719: PPUSH
35720: CALL_OW 477
35724: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35725: LD_ADDR_VAR 0 10
35729: PUSH
35730: LD_VAR 0 1
35734: PPUSH
35735: CALL_OW 478
35739: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35740: LD_VAR 0 9
35744: NOT
35745: PUSH
35746: LD_VAR 0 11
35750: NOT
35751: OR
35752: PUSH
35753: LD_VAR 0 12
35757: NOT
35758: OR
35759: PUSH
35760: LD_VAR 0 10
35764: NOT
35765: OR
35766: IFFALSE 35801
// begin result := [ chassis , engine , control , weapon ] ;
35768: LD_ADDR_VAR 0 6
35772: PUSH
35773: LD_VAR 0 2
35777: PUSH
35778: LD_VAR 0 3
35782: PUSH
35783: LD_VAR 0 4
35787: PUSH
35788: LD_VAR 0 5
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: ST_TO_ADDR
// exit ;
35799: GO 36092
// end ; if not chassis in _chassis then
35801: LD_VAR 0 2
35805: PUSH
35806: LD_VAR 0 9
35810: IN
35811: NOT
35812: IFFALSE 35838
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35814: LD_ADDR_VAR 0 2
35818: PUSH
35819: LD_VAR 0 9
35823: PUSH
35824: LD_INT 1
35826: PPUSH
35827: LD_VAR 0 9
35831: PPUSH
35832: CALL_OW 12
35836: ARRAY
35837: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35838: LD_VAR 0 2
35842: PPUSH
35843: LD_VAR 0 3
35847: PPUSH
35848: CALL 36097 0 2
35852: NOT
35853: IFFALSE 35912
// repeat engine := _engine [ 1 ] ;
35855: LD_ADDR_VAR 0 3
35859: PUSH
35860: LD_VAR 0 11
35864: PUSH
35865: LD_INT 1
35867: ARRAY
35868: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35869: LD_ADDR_VAR 0 11
35873: PUSH
35874: LD_VAR 0 11
35878: PPUSH
35879: LD_INT 1
35881: PPUSH
35882: CALL_OW 3
35886: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35887: LD_VAR 0 2
35891: PPUSH
35892: LD_VAR 0 3
35896: PPUSH
35897: CALL 36097 0 2
35901: PUSH
35902: LD_VAR 0 11
35906: PUSH
35907: EMPTY
35908: EQUAL
35909: OR
35910: IFFALSE 35855
// if not control in _control then
35912: LD_VAR 0 4
35916: PUSH
35917: LD_VAR 0 12
35921: IN
35922: NOT
35923: IFFALSE 35949
// control := _control [ rand ( 1 , _control ) ] ;
35925: LD_ADDR_VAR 0 4
35929: PUSH
35930: LD_VAR 0 12
35934: PUSH
35935: LD_INT 1
35937: PPUSH
35938: LD_VAR 0 12
35942: PPUSH
35943: CALL_OW 12
35947: ARRAY
35948: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35949: LD_VAR 0 2
35953: PPUSH
35954: LD_VAR 0 5
35958: PPUSH
35959: CALL 36317 0 2
35963: NOT
35964: IFFALSE 36023
// repeat weapon := _weapon [ 1 ] ;
35966: LD_ADDR_VAR 0 5
35970: PUSH
35971: LD_VAR 0 10
35975: PUSH
35976: LD_INT 1
35978: ARRAY
35979: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35980: LD_ADDR_VAR 0 10
35984: PUSH
35985: LD_VAR 0 10
35989: PPUSH
35990: LD_INT 1
35992: PPUSH
35993: CALL_OW 3
35997: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35998: LD_VAR 0 2
36002: PPUSH
36003: LD_VAR 0 5
36007: PPUSH
36008: CALL 36317 0 2
36012: PUSH
36013: LD_VAR 0 10
36017: PUSH
36018: EMPTY
36019: EQUAL
36020: OR
36021: IFFALSE 35966
// result := [ ] ;
36023: LD_ADDR_VAR 0 6
36027: PUSH
36028: EMPTY
36029: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36030: LD_VAR 0 1
36034: PPUSH
36035: LD_VAR 0 2
36039: PPUSH
36040: LD_VAR 0 3
36044: PPUSH
36045: LD_VAR 0 4
36049: PPUSH
36050: LD_VAR 0 5
36054: PPUSH
36055: CALL_OW 448
36059: IFFALSE 36092
// result := [ chassis , engine , control , weapon ] ;
36061: LD_ADDR_VAR 0 6
36065: PUSH
36066: LD_VAR 0 2
36070: PUSH
36071: LD_VAR 0 3
36075: PUSH
36076: LD_VAR 0 4
36080: PUSH
36081: LD_VAR 0 5
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: ST_TO_ADDR
// end ;
36092: LD_VAR 0 6
36096: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36097: LD_INT 0
36099: PPUSH
// if not chassis or not engine then
36100: LD_VAR 0 1
36104: NOT
36105: PUSH
36106: LD_VAR 0 2
36110: NOT
36111: OR
36112: IFFALSE 36116
// exit ;
36114: GO 36312
// case engine of engine_solar :
36116: LD_VAR 0 2
36120: PUSH
36121: LD_INT 2
36123: DOUBLE
36124: EQUAL
36125: IFTRUE 36129
36127: GO 36167
36129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36130: LD_ADDR_VAR 0 3
36134: PUSH
36135: LD_INT 11
36137: PUSH
36138: LD_INT 12
36140: PUSH
36141: LD_INT 13
36143: PUSH
36144: LD_INT 14
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: LD_INT 3
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: ST_TO_ADDR
36165: GO 36296
36167: LD_INT 1
36169: DOUBLE
36170: EQUAL
36171: IFTRUE 36175
36173: GO 36237
36175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36176: LD_ADDR_VAR 0 3
36180: PUSH
36181: LD_INT 11
36183: PUSH
36184: LD_INT 12
36186: PUSH
36187: LD_INT 13
36189: PUSH
36190: LD_INT 14
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: LD_INT 3
36201: PUSH
36202: LD_INT 4
36204: PUSH
36205: LD_INT 5
36207: PUSH
36208: LD_INT 21
36210: PUSH
36211: LD_INT 23
36213: PUSH
36214: LD_INT 22
36216: PUSH
36217: LD_INT 24
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: ST_TO_ADDR
36235: GO 36296
36237: LD_INT 3
36239: DOUBLE
36240: EQUAL
36241: IFTRUE 36245
36243: GO 36295
36245: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36246: LD_ADDR_VAR 0 3
36250: PUSH
36251: LD_INT 13
36253: PUSH
36254: LD_INT 14
36256: PUSH
36257: LD_INT 2
36259: PUSH
36260: LD_INT 3
36262: PUSH
36263: LD_INT 4
36265: PUSH
36266: LD_INT 5
36268: PUSH
36269: LD_INT 21
36271: PUSH
36272: LD_INT 22
36274: PUSH
36275: LD_INT 23
36277: PUSH
36278: LD_INT 24
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: ST_TO_ADDR
36293: GO 36296
36295: POP
// result := ( chassis in result ) ;
36296: LD_ADDR_VAR 0 3
36300: PUSH
36301: LD_VAR 0 1
36305: PUSH
36306: LD_VAR 0 3
36310: IN
36311: ST_TO_ADDR
// end ;
36312: LD_VAR 0 3
36316: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36317: LD_INT 0
36319: PPUSH
// if not chassis or not weapon then
36320: LD_VAR 0 1
36324: NOT
36325: PUSH
36326: LD_VAR 0 2
36330: NOT
36331: OR
36332: IFFALSE 36336
// exit ;
36334: GO 37396
// case weapon of us_machine_gun :
36336: LD_VAR 0 2
36340: PUSH
36341: LD_INT 2
36343: DOUBLE
36344: EQUAL
36345: IFTRUE 36349
36347: GO 36379
36349: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36350: LD_ADDR_VAR 0 3
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: LD_INT 3
36363: PUSH
36364: LD_INT 4
36366: PUSH
36367: LD_INT 5
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: ST_TO_ADDR
36377: GO 37380
36379: LD_INT 3
36381: DOUBLE
36382: EQUAL
36383: IFTRUE 36387
36385: GO 36417
36387: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36388: LD_ADDR_VAR 0 3
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: LD_INT 3
36401: PUSH
36402: LD_INT 4
36404: PUSH
36405: LD_INT 5
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: ST_TO_ADDR
36415: GO 37380
36417: LD_INT 11
36419: DOUBLE
36420: EQUAL
36421: IFTRUE 36425
36423: GO 36455
36425: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36426: LD_ADDR_VAR 0 3
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: LD_INT 3
36439: PUSH
36440: LD_INT 4
36442: PUSH
36443: LD_INT 5
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: ST_TO_ADDR
36453: GO 37380
36455: LD_INT 4
36457: DOUBLE
36458: EQUAL
36459: IFTRUE 36463
36461: GO 36489
36463: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36464: LD_ADDR_VAR 0 3
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: LD_INT 3
36474: PUSH
36475: LD_INT 4
36477: PUSH
36478: LD_INT 5
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: ST_TO_ADDR
36487: GO 37380
36489: LD_INT 5
36491: DOUBLE
36492: EQUAL
36493: IFTRUE 36497
36495: GO 36523
36497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36498: LD_ADDR_VAR 0 3
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: LD_INT 3
36508: PUSH
36509: LD_INT 4
36511: PUSH
36512: LD_INT 5
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: ST_TO_ADDR
36521: GO 37380
36523: LD_INT 9
36525: DOUBLE
36526: EQUAL
36527: IFTRUE 36531
36529: GO 36557
36531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36532: LD_ADDR_VAR 0 3
36536: PUSH
36537: LD_INT 2
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: LD_INT 4
36545: PUSH
36546: LD_INT 5
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
36555: GO 37380
36557: LD_INT 7
36559: DOUBLE
36560: EQUAL
36561: IFTRUE 36565
36563: GO 36591
36565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36566: LD_ADDR_VAR 0 3
36570: PUSH
36571: LD_INT 2
36573: PUSH
36574: LD_INT 3
36576: PUSH
36577: LD_INT 4
36579: PUSH
36580: LD_INT 5
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: ST_TO_ADDR
36589: GO 37380
36591: LD_INT 12
36593: DOUBLE
36594: EQUAL
36595: IFTRUE 36599
36597: GO 36625
36599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36600: LD_ADDR_VAR 0 3
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: LD_INT 3
36610: PUSH
36611: LD_INT 4
36613: PUSH
36614: LD_INT 5
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: ST_TO_ADDR
36623: GO 37380
36625: LD_INT 13
36627: DOUBLE
36628: EQUAL
36629: IFTRUE 36633
36631: GO 36659
36633: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36634: LD_ADDR_VAR 0 3
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: LD_INT 3
36644: PUSH
36645: LD_INT 4
36647: PUSH
36648: LD_INT 5
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
36657: GO 37380
36659: LD_INT 14
36661: DOUBLE
36662: EQUAL
36663: IFTRUE 36667
36665: GO 36685
36667: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36668: LD_ADDR_VAR 0 3
36672: PUSH
36673: LD_INT 4
36675: PUSH
36676: LD_INT 5
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: ST_TO_ADDR
36683: GO 37380
36685: LD_INT 6
36687: DOUBLE
36688: EQUAL
36689: IFTRUE 36693
36691: GO 36711
36693: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36694: LD_ADDR_VAR 0 3
36698: PUSH
36699: LD_INT 4
36701: PUSH
36702: LD_INT 5
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: ST_TO_ADDR
36709: GO 37380
36711: LD_INT 10
36713: DOUBLE
36714: EQUAL
36715: IFTRUE 36719
36717: GO 36737
36719: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36720: LD_ADDR_VAR 0 3
36724: PUSH
36725: LD_INT 4
36727: PUSH
36728: LD_INT 5
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: ST_TO_ADDR
36735: GO 37380
36737: LD_INT 22
36739: DOUBLE
36740: EQUAL
36741: IFTRUE 36745
36743: GO 36771
36745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36746: LD_ADDR_VAR 0 3
36750: PUSH
36751: LD_INT 11
36753: PUSH
36754: LD_INT 12
36756: PUSH
36757: LD_INT 13
36759: PUSH
36760: LD_INT 14
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
36769: GO 37380
36771: LD_INT 23
36773: DOUBLE
36774: EQUAL
36775: IFTRUE 36779
36777: GO 36805
36779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36780: LD_ADDR_VAR 0 3
36784: PUSH
36785: LD_INT 11
36787: PUSH
36788: LD_INT 12
36790: PUSH
36791: LD_INT 13
36793: PUSH
36794: LD_INT 14
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: ST_TO_ADDR
36803: GO 37380
36805: LD_INT 24
36807: DOUBLE
36808: EQUAL
36809: IFTRUE 36813
36811: GO 36839
36813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36814: LD_ADDR_VAR 0 3
36818: PUSH
36819: LD_INT 11
36821: PUSH
36822: LD_INT 12
36824: PUSH
36825: LD_INT 13
36827: PUSH
36828: LD_INT 14
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: ST_TO_ADDR
36837: GO 37380
36839: LD_INT 30
36841: DOUBLE
36842: EQUAL
36843: IFTRUE 36847
36845: GO 36873
36847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36848: LD_ADDR_VAR 0 3
36852: PUSH
36853: LD_INT 11
36855: PUSH
36856: LD_INT 12
36858: PUSH
36859: LD_INT 13
36861: PUSH
36862: LD_INT 14
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: ST_TO_ADDR
36871: GO 37380
36873: LD_INT 25
36875: DOUBLE
36876: EQUAL
36877: IFTRUE 36881
36879: GO 36899
36881: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36882: LD_ADDR_VAR 0 3
36886: PUSH
36887: LD_INT 13
36889: PUSH
36890: LD_INT 14
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: ST_TO_ADDR
36897: GO 37380
36899: LD_INT 27
36901: DOUBLE
36902: EQUAL
36903: IFTRUE 36907
36905: GO 36925
36907: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36908: LD_ADDR_VAR 0 3
36912: PUSH
36913: LD_INT 13
36915: PUSH
36916: LD_INT 14
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: ST_TO_ADDR
36923: GO 37380
36925: LD_INT 92
36927: DOUBLE
36928: EQUAL
36929: IFTRUE 36933
36931: GO 36959
36933: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36934: LD_ADDR_VAR 0 3
36938: PUSH
36939: LD_INT 11
36941: PUSH
36942: LD_INT 12
36944: PUSH
36945: LD_INT 13
36947: PUSH
36948: LD_INT 14
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: ST_TO_ADDR
36957: GO 37380
36959: LD_INT 28
36961: DOUBLE
36962: EQUAL
36963: IFTRUE 36967
36965: GO 36985
36967: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36968: LD_ADDR_VAR 0 3
36972: PUSH
36973: LD_INT 13
36975: PUSH
36976: LD_INT 14
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: ST_TO_ADDR
36983: GO 37380
36985: LD_INT 29
36987: DOUBLE
36988: EQUAL
36989: IFTRUE 36993
36991: GO 37011
36993: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36994: LD_ADDR_VAR 0 3
36998: PUSH
36999: LD_INT 13
37001: PUSH
37002: LD_INT 14
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: ST_TO_ADDR
37009: GO 37380
37011: LD_INT 31
37013: DOUBLE
37014: EQUAL
37015: IFTRUE 37019
37017: GO 37037
37019: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37020: LD_ADDR_VAR 0 3
37024: PUSH
37025: LD_INT 13
37027: PUSH
37028: LD_INT 14
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: ST_TO_ADDR
37035: GO 37380
37037: LD_INT 26
37039: DOUBLE
37040: EQUAL
37041: IFTRUE 37045
37043: GO 37063
37045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37046: LD_ADDR_VAR 0 3
37050: PUSH
37051: LD_INT 13
37053: PUSH
37054: LD_INT 14
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: ST_TO_ADDR
37061: GO 37380
37063: LD_INT 42
37065: DOUBLE
37066: EQUAL
37067: IFTRUE 37071
37069: GO 37097
37071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37072: LD_ADDR_VAR 0 3
37076: PUSH
37077: LD_INT 21
37079: PUSH
37080: LD_INT 22
37082: PUSH
37083: LD_INT 23
37085: PUSH
37086: LD_INT 24
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: ST_TO_ADDR
37095: GO 37380
37097: LD_INT 43
37099: DOUBLE
37100: EQUAL
37101: IFTRUE 37105
37103: GO 37131
37105: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37106: LD_ADDR_VAR 0 3
37110: PUSH
37111: LD_INT 21
37113: PUSH
37114: LD_INT 22
37116: PUSH
37117: LD_INT 23
37119: PUSH
37120: LD_INT 24
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: ST_TO_ADDR
37129: GO 37380
37131: LD_INT 44
37133: DOUBLE
37134: EQUAL
37135: IFTRUE 37139
37137: GO 37165
37139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37140: LD_ADDR_VAR 0 3
37144: PUSH
37145: LD_INT 21
37147: PUSH
37148: LD_INT 22
37150: PUSH
37151: LD_INT 23
37153: PUSH
37154: LD_INT 24
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: ST_TO_ADDR
37163: GO 37380
37165: LD_INT 45
37167: DOUBLE
37168: EQUAL
37169: IFTRUE 37173
37171: GO 37199
37173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37174: LD_ADDR_VAR 0 3
37178: PUSH
37179: LD_INT 21
37181: PUSH
37182: LD_INT 22
37184: PUSH
37185: LD_INT 23
37187: PUSH
37188: LD_INT 24
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: ST_TO_ADDR
37197: GO 37380
37199: LD_INT 49
37201: DOUBLE
37202: EQUAL
37203: IFTRUE 37207
37205: GO 37233
37207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37208: LD_ADDR_VAR 0 3
37212: PUSH
37213: LD_INT 21
37215: PUSH
37216: LD_INT 22
37218: PUSH
37219: LD_INT 23
37221: PUSH
37222: LD_INT 24
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: ST_TO_ADDR
37231: GO 37380
37233: LD_INT 51
37235: DOUBLE
37236: EQUAL
37237: IFTRUE 37241
37239: GO 37267
37241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37242: LD_ADDR_VAR 0 3
37246: PUSH
37247: LD_INT 21
37249: PUSH
37250: LD_INT 22
37252: PUSH
37253: LD_INT 23
37255: PUSH
37256: LD_INT 24
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: ST_TO_ADDR
37265: GO 37380
37267: LD_INT 52
37269: DOUBLE
37270: EQUAL
37271: IFTRUE 37275
37273: GO 37301
37275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37276: LD_ADDR_VAR 0 3
37280: PUSH
37281: LD_INT 21
37283: PUSH
37284: LD_INT 22
37286: PUSH
37287: LD_INT 23
37289: PUSH
37290: LD_INT 24
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: ST_TO_ADDR
37299: GO 37380
37301: LD_INT 53
37303: DOUBLE
37304: EQUAL
37305: IFTRUE 37309
37307: GO 37327
37309: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37310: LD_ADDR_VAR 0 3
37314: PUSH
37315: LD_INT 23
37317: PUSH
37318: LD_INT 24
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: ST_TO_ADDR
37325: GO 37380
37327: LD_INT 46
37329: DOUBLE
37330: EQUAL
37331: IFTRUE 37335
37333: GO 37353
37335: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37336: LD_ADDR_VAR 0 3
37340: PUSH
37341: LD_INT 23
37343: PUSH
37344: LD_INT 24
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: ST_TO_ADDR
37351: GO 37380
37353: LD_INT 47
37355: DOUBLE
37356: EQUAL
37357: IFTRUE 37361
37359: GO 37379
37361: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37362: LD_ADDR_VAR 0 3
37366: PUSH
37367: LD_INT 23
37369: PUSH
37370: LD_INT 24
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: ST_TO_ADDR
37377: GO 37380
37379: POP
// result := ( chassis in result ) ;
37380: LD_ADDR_VAR 0 3
37384: PUSH
37385: LD_VAR 0 1
37389: PUSH
37390: LD_VAR 0 3
37394: IN
37395: ST_TO_ADDR
// end ;
37396: LD_VAR 0 3
37400: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37401: LD_INT 0
37403: PPUSH
37404: PPUSH
37405: PPUSH
37406: PPUSH
37407: PPUSH
37408: PPUSH
37409: PPUSH
// result := array ;
37410: LD_ADDR_VAR 0 5
37414: PUSH
37415: LD_VAR 0 1
37419: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37420: LD_VAR 0 1
37424: NOT
37425: PUSH
37426: LD_VAR 0 2
37430: NOT
37431: OR
37432: PUSH
37433: LD_VAR 0 3
37437: NOT
37438: OR
37439: PUSH
37440: LD_VAR 0 2
37444: PUSH
37445: LD_VAR 0 1
37449: GREATER
37450: OR
37451: PUSH
37452: LD_VAR 0 3
37456: PUSH
37457: LD_VAR 0 1
37461: GREATER
37462: OR
37463: IFFALSE 37467
// exit ;
37465: GO 37763
// if direction then
37467: LD_VAR 0 4
37471: IFFALSE 37535
// begin d := 1 ;
37473: LD_ADDR_VAR 0 9
37477: PUSH
37478: LD_INT 1
37480: ST_TO_ADDR
// if i_from > i_to then
37481: LD_VAR 0 2
37485: PUSH
37486: LD_VAR 0 3
37490: GREATER
37491: IFFALSE 37517
// length := ( array - i_from ) + i_to else
37493: LD_ADDR_VAR 0 11
37497: PUSH
37498: LD_VAR 0 1
37502: PUSH
37503: LD_VAR 0 2
37507: MINUS
37508: PUSH
37509: LD_VAR 0 3
37513: PLUS
37514: ST_TO_ADDR
37515: GO 37533
// length := i_to - i_from ;
37517: LD_ADDR_VAR 0 11
37521: PUSH
37522: LD_VAR 0 3
37526: PUSH
37527: LD_VAR 0 2
37531: MINUS
37532: ST_TO_ADDR
// end else
37533: GO 37596
// begin d := - 1 ;
37535: LD_ADDR_VAR 0 9
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: ST_TO_ADDR
// if i_from > i_to then
37544: LD_VAR 0 2
37548: PUSH
37549: LD_VAR 0 3
37553: GREATER
37554: IFFALSE 37574
// length := i_from - i_to else
37556: LD_ADDR_VAR 0 11
37560: PUSH
37561: LD_VAR 0 2
37565: PUSH
37566: LD_VAR 0 3
37570: MINUS
37571: ST_TO_ADDR
37572: GO 37596
// length := ( array - i_to ) + i_from ;
37574: LD_ADDR_VAR 0 11
37578: PUSH
37579: LD_VAR 0 1
37583: PUSH
37584: LD_VAR 0 3
37588: MINUS
37589: PUSH
37590: LD_VAR 0 2
37594: PLUS
37595: ST_TO_ADDR
// end ; if not length then
37596: LD_VAR 0 11
37600: NOT
37601: IFFALSE 37605
// exit ;
37603: GO 37763
// tmp := array ;
37605: LD_ADDR_VAR 0 10
37609: PUSH
37610: LD_VAR 0 1
37614: ST_TO_ADDR
// for i = 1 to length do
37615: LD_ADDR_VAR 0 6
37619: PUSH
37620: DOUBLE
37621: LD_INT 1
37623: DEC
37624: ST_TO_ADDR
37625: LD_VAR 0 11
37629: PUSH
37630: FOR_TO
37631: IFFALSE 37751
// begin for j = 1 to array do
37633: LD_ADDR_VAR 0 7
37637: PUSH
37638: DOUBLE
37639: LD_INT 1
37641: DEC
37642: ST_TO_ADDR
37643: LD_VAR 0 1
37647: PUSH
37648: FOR_TO
37649: IFFALSE 37737
// begin k := j + d ;
37651: LD_ADDR_VAR 0 8
37655: PUSH
37656: LD_VAR 0 7
37660: PUSH
37661: LD_VAR 0 9
37665: PLUS
37666: ST_TO_ADDR
// if k > array then
37667: LD_VAR 0 8
37671: PUSH
37672: LD_VAR 0 1
37676: GREATER
37677: IFFALSE 37687
// k := 1 ;
37679: LD_ADDR_VAR 0 8
37683: PUSH
37684: LD_INT 1
37686: ST_TO_ADDR
// if not k then
37687: LD_VAR 0 8
37691: NOT
37692: IFFALSE 37704
// k := array ;
37694: LD_ADDR_VAR 0 8
37698: PUSH
37699: LD_VAR 0 1
37703: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37704: LD_ADDR_VAR 0 10
37708: PUSH
37709: LD_VAR 0 10
37713: PPUSH
37714: LD_VAR 0 8
37718: PPUSH
37719: LD_VAR 0 1
37723: PUSH
37724: LD_VAR 0 7
37728: ARRAY
37729: PPUSH
37730: CALL_OW 1
37734: ST_TO_ADDR
// end ;
37735: GO 37648
37737: POP
37738: POP
// array := tmp ;
37739: LD_ADDR_VAR 0 1
37743: PUSH
37744: LD_VAR 0 10
37748: ST_TO_ADDR
// end ;
37749: GO 37630
37751: POP
37752: POP
// result := array ;
37753: LD_ADDR_VAR 0 5
37757: PUSH
37758: LD_VAR 0 1
37762: ST_TO_ADDR
// end ;
37763: LD_VAR 0 5
37767: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37768: LD_INT 0
37770: PPUSH
37771: PPUSH
// result := 0 ;
37772: LD_ADDR_VAR 0 3
37776: PUSH
37777: LD_INT 0
37779: ST_TO_ADDR
// if not array or not value in array then
37780: LD_VAR 0 1
37784: NOT
37785: PUSH
37786: LD_VAR 0 2
37790: PUSH
37791: LD_VAR 0 1
37795: IN
37796: NOT
37797: OR
37798: IFFALSE 37802
// exit ;
37800: GO 37856
// for i = 1 to array do
37802: LD_ADDR_VAR 0 4
37806: PUSH
37807: DOUBLE
37808: LD_INT 1
37810: DEC
37811: ST_TO_ADDR
37812: LD_VAR 0 1
37816: PUSH
37817: FOR_TO
37818: IFFALSE 37854
// if value = array [ i ] then
37820: LD_VAR 0 2
37824: PUSH
37825: LD_VAR 0 1
37829: PUSH
37830: LD_VAR 0 4
37834: ARRAY
37835: EQUAL
37836: IFFALSE 37852
// begin result := i ;
37838: LD_ADDR_VAR 0 3
37842: PUSH
37843: LD_VAR 0 4
37847: ST_TO_ADDR
// exit ;
37848: POP
37849: POP
37850: GO 37856
// end ;
37852: GO 37817
37854: POP
37855: POP
// end ;
37856: LD_VAR 0 3
37860: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37861: LD_INT 0
37863: PPUSH
// vc_chassis := chassis ;
37864: LD_ADDR_OWVAR 37
37868: PUSH
37869: LD_VAR 0 1
37873: ST_TO_ADDR
// vc_engine := engine ;
37874: LD_ADDR_OWVAR 39
37878: PUSH
37879: LD_VAR 0 2
37883: ST_TO_ADDR
// vc_control := control ;
37884: LD_ADDR_OWVAR 38
37888: PUSH
37889: LD_VAR 0 3
37893: ST_TO_ADDR
// vc_weapon := weapon ;
37894: LD_ADDR_OWVAR 40
37898: PUSH
37899: LD_VAR 0 4
37903: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37904: LD_ADDR_OWVAR 41
37908: PUSH
37909: LD_VAR 0 5
37913: ST_TO_ADDR
// end ;
37914: LD_VAR 0 6
37918: RET
// export function WantPlant ( unit ) ; var task ; begin
37919: LD_INT 0
37921: PPUSH
37922: PPUSH
// result := false ;
37923: LD_ADDR_VAR 0 2
37927: PUSH
37928: LD_INT 0
37930: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37931: LD_ADDR_VAR 0 3
37935: PUSH
37936: LD_VAR 0 1
37940: PPUSH
37941: CALL_OW 437
37945: ST_TO_ADDR
// if task then
37946: LD_VAR 0 3
37950: IFFALSE 37978
// if task [ 1 ] [ 1 ] = p then
37952: LD_VAR 0 3
37956: PUSH
37957: LD_INT 1
37959: ARRAY
37960: PUSH
37961: LD_INT 1
37963: ARRAY
37964: PUSH
37965: LD_STRING p
37967: EQUAL
37968: IFFALSE 37978
// result := true ;
37970: LD_ADDR_VAR 0 2
37974: PUSH
37975: LD_INT 1
37977: ST_TO_ADDR
// end ;
37978: LD_VAR 0 2
37982: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37983: LD_INT 0
37985: PPUSH
37986: PPUSH
37987: PPUSH
37988: PPUSH
// if pos < 1 then
37989: LD_VAR 0 2
37993: PUSH
37994: LD_INT 1
37996: LESS
37997: IFFALSE 38001
// exit ;
37999: GO 38304
// if pos = 1 then
38001: LD_VAR 0 2
38005: PUSH
38006: LD_INT 1
38008: EQUAL
38009: IFFALSE 38042
// result := Replace ( arr , pos [ 1 ] , value ) else
38011: LD_ADDR_VAR 0 4
38015: PUSH
38016: LD_VAR 0 1
38020: PPUSH
38021: LD_VAR 0 2
38025: PUSH
38026: LD_INT 1
38028: ARRAY
38029: PPUSH
38030: LD_VAR 0 3
38034: PPUSH
38035: CALL_OW 1
38039: ST_TO_ADDR
38040: GO 38304
// begin tmp := arr ;
38042: LD_ADDR_VAR 0 6
38046: PUSH
38047: LD_VAR 0 1
38051: ST_TO_ADDR
// s_arr := [ tmp ] ;
38052: LD_ADDR_VAR 0 7
38056: PUSH
38057: LD_VAR 0 6
38061: PUSH
38062: EMPTY
38063: LIST
38064: ST_TO_ADDR
// for i = 1 to pos - 1 do
38065: LD_ADDR_VAR 0 5
38069: PUSH
38070: DOUBLE
38071: LD_INT 1
38073: DEC
38074: ST_TO_ADDR
38075: LD_VAR 0 2
38079: PUSH
38080: LD_INT 1
38082: MINUS
38083: PUSH
38084: FOR_TO
38085: IFFALSE 38130
// begin tmp := tmp [ pos [ i ] ] ;
38087: LD_ADDR_VAR 0 6
38091: PUSH
38092: LD_VAR 0 6
38096: PUSH
38097: LD_VAR 0 2
38101: PUSH
38102: LD_VAR 0 5
38106: ARRAY
38107: ARRAY
38108: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38109: LD_ADDR_VAR 0 7
38113: PUSH
38114: LD_VAR 0 7
38118: PUSH
38119: LD_VAR 0 6
38123: PUSH
38124: EMPTY
38125: LIST
38126: ADD
38127: ST_TO_ADDR
// end ;
38128: GO 38084
38130: POP
38131: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38132: LD_ADDR_VAR 0 6
38136: PUSH
38137: LD_VAR 0 6
38141: PPUSH
38142: LD_VAR 0 2
38146: PUSH
38147: LD_VAR 0 2
38151: ARRAY
38152: PPUSH
38153: LD_VAR 0 3
38157: PPUSH
38158: CALL_OW 1
38162: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38163: LD_ADDR_VAR 0 7
38167: PUSH
38168: LD_VAR 0 7
38172: PPUSH
38173: LD_VAR 0 7
38177: PPUSH
38178: LD_VAR 0 6
38182: PPUSH
38183: CALL_OW 1
38187: ST_TO_ADDR
// for i = s_arr downto 2 do
38188: LD_ADDR_VAR 0 5
38192: PUSH
38193: DOUBLE
38194: LD_VAR 0 7
38198: INC
38199: ST_TO_ADDR
38200: LD_INT 2
38202: PUSH
38203: FOR_DOWNTO
38204: IFFALSE 38288
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38206: LD_ADDR_VAR 0 6
38210: PUSH
38211: LD_VAR 0 7
38215: PUSH
38216: LD_VAR 0 5
38220: PUSH
38221: LD_INT 1
38223: MINUS
38224: ARRAY
38225: PPUSH
38226: LD_VAR 0 2
38230: PUSH
38231: LD_VAR 0 5
38235: PUSH
38236: LD_INT 1
38238: MINUS
38239: ARRAY
38240: PPUSH
38241: LD_VAR 0 7
38245: PUSH
38246: LD_VAR 0 5
38250: ARRAY
38251: PPUSH
38252: CALL_OW 1
38256: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38257: LD_ADDR_VAR 0 7
38261: PUSH
38262: LD_VAR 0 7
38266: PPUSH
38267: LD_VAR 0 5
38271: PUSH
38272: LD_INT 1
38274: MINUS
38275: PPUSH
38276: LD_VAR 0 6
38280: PPUSH
38281: CALL_OW 1
38285: ST_TO_ADDR
// end ;
38286: GO 38203
38288: POP
38289: POP
// result := s_arr [ 1 ] ;
38290: LD_ADDR_VAR 0 4
38294: PUSH
38295: LD_VAR 0 7
38299: PUSH
38300: LD_INT 1
38302: ARRAY
38303: ST_TO_ADDR
// end ; end ;
38304: LD_VAR 0 4
38308: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38309: LD_INT 0
38311: PPUSH
38312: PPUSH
// if not list then
38313: LD_VAR 0 1
38317: NOT
38318: IFFALSE 38322
// exit ;
38320: GO 38413
// i := list [ pos1 ] ;
38322: LD_ADDR_VAR 0 5
38326: PUSH
38327: LD_VAR 0 1
38331: PUSH
38332: LD_VAR 0 2
38336: ARRAY
38337: ST_TO_ADDR
// if not i then
38338: LD_VAR 0 5
38342: NOT
38343: IFFALSE 38347
// exit ;
38345: GO 38413
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38347: LD_ADDR_VAR 0 1
38351: PUSH
38352: LD_VAR 0 1
38356: PPUSH
38357: LD_VAR 0 2
38361: PPUSH
38362: LD_VAR 0 1
38366: PUSH
38367: LD_VAR 0 3
38371: ARRAY
38372: PPUSH
38373: CALL_OW 1
38377: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38378: LD_ADDR_VAR 0 1
38382: PUSH
38383: LD_VAR 0 1
38387: PPUSH
38388: LD_VAR 0 3
38392: PPUSH
38393: LD_VAR 0 5
38397: PPUSH
38398: CALL_OW 1
38402: ST_TO_ADDR
// result := list ;
38403: LD_ADDR_VAR 0 4
38407: PUSH
38408: LD_VAR 0 1
38412: ST_TO_ADDR
// end ;
38413: LD_VAR 0 4
38417: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38418: LD_INT 0
38420: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38421: LD_ADDR_VAR 0 5
38425: PUSH
38426: LD_VAR 0 1
38430: PPUSH
38431: CALL_OW 250
38435: PPUSH
38436: LD_VAR 0 1
38440: PPUSH
38441: CALL_OW 251
38445: PPUSH
38446: LD_VAR 0 2
38450: PPUSH
38451: LD_VAR 0 3
38455: PPUSH
38456: LD_VAR 0 4
38460: PPUSH
38461: CALL 38839 0 5
38465: ST_TO_ADDR
// end ;
38466: LD_VAR 0 5
38470: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38471: LD_INT 0
38473: PPUSH
38474: PPUSH
38475: PPUSH
38476: PPUSH
// if not list or not unit then
38477: LD_VAR 0 2
38481: NOT
38482: PUSH
38483: LD_VAR 0 1
38487: NOT
38488: OR
38489: IFFALSE 38493
// exit ;
38491: GO 38834
// result := [ ] ;
38493: LD_ADDR_VAR 0 5
38497: PUSH
38498: EMPTY
38499: ST_TO_ADDR
// for i in list do
38500: LD_ADDR_VAR 0 6
38504: PUSH
38505: LD_VAR 0 2
38509: PUSH
38510: FOR_IN
38511: IFFALSE 38729
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38513: LD_ADDR_VAR 0 8
38517: PUSH
38518: LD_VAR 0 1
38522: PPUSH
38523: LD_VAR 0 6
38527: PUSH
38528: LD_INT 1
38530: ARRAY
38531: PPUSH
38532: LD_VAR 0 6
38536: PUSH
38537: LD_INT 2
38539: ARRAY
38540: PPUSH
38541: CALL_OW 297
38545: ST_TO_ADDR
// if not Count ( result ) then
38546: LD_VAR 0 5
38550: PPUSH
38551: CALL 35123 0 1
38555: NOT
38556: IFFALSE 38589
// begin result := Join ( result , [ i , tmp ] ) ;
38558: LD_ADDR_VAR 0 5
38562: PUSH
38563: LD_VAR 0 5
38567: PPUSH
38568: LD_VAR 0 6
38572: PUSH
38573: LD_VAR 0 8
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PPUSH
38582: CALL 70712 0 2
38586: ST_TO_ADDR
// continue ;
38587: GO 38510
// end ; if result [ result ] [ 2 ] <= tmp then
38589: LD_VAR 0 5
38593: PUSH
38594: LD_VAR 0 5
38598: ARRAY
38599: PUSH
38600: LD_INT 2
38602: ARRAY
38603: PUSH
38604: LD_VAR 0 8
38608: LESSEQUAL
38609: IFFALSE 38642
// result := Join ( result , [ i , tmp ] ) else
38611: LD_ADDR_VAR 0 5
38615: PUSH
38616: LD_VAR 0 5
38620: PPUSH
38621: LD_VAR 0 6
38625: PUSH
38626: LD_VAR 0 8
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PPUSH
38635: CALL 70712 0 2
38639: ST_TO_ADDR
38640: GO 38727
// begin for j := 1 to Count ( result ) do
38642: LD_ADDR_VAR 0 7
38646: PUSH
38647: DOUBLE
38648: LD_INT 1
38650: DEC
38651: ST_TO_ADDR
38652: LD_VAR 0 5
38656: PPUSH
38657: CALL 35123 0 1
38661: PUSH
38662: FOR_TO
38663: IFFALSE 38725
// begin if tmp < result [ j ] [ 2 ] then
38665: LD_VAR 0 8
38669: PUSH
38670: LD_VAR 0 5
38674: PUSH
38675: LD_VAR 0 7
38679: ARRAY
38680: PUSH
38681: LD_INT 2
38683: ARRAY
38684: LESS
38685: IFFALSE 38723
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38687: LD_ADDR_VAR 0 5
38691: PUSH
38692: LD_VAR 0 5
38696: PPUSH
38697: LD_VAR 0 7
38701: PPUSH
38702: LD_VAR 0 6
38706: PUSH
38707: LD_VAR 0 8
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PPUSH
38716: CALL_OW 2
38720: ST_TO_ADDR
// break ;
38721: GO 38725
// end ; end ;
38723: GO 38662
38725: POP
38726: POP
// end ; end ;
38727: GO 38510
38729: POP
38730: POP
// if result and not asc then
38731: LD_VAR 0 5
38735: PUSH
38736: LD_VAR 0 3
38740: NOT
38741: AND
38742: IFFALSE 38759
// result := ReverseArray ( result ) ;
38744: LD_ADDR_VAR 0 5
38748: PUSH
38749: LD_VAR 0 5
38753: PPUSH
38754: CALL 65999 0 1
38758: ST_TO_ADDR
// tmp := [ ] ;
38759: LD_ADDR_VAR 0 8
38763: PUSH
38764: EMPTY
38765: ST_TO_ADDR
// if mode then
38766: LD_VAR 0 4
38770: IFFALSE 38834
// begin for i := 1 to result do
38772: LD_ADDR_VAR 0 6
38776: PUSH
38777: DOUBLE
38778: LD_INT 1
38780: DEC
38781: ST_TO_ADDR
38782: LD_VAR 0 5
38786: PUSH
38787: FOR_TO
38788: IFFALSE 38822
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38790: LD_ADDR_VAR 0 8
38794: PUSH
38795: LD_VAR 0 8
38799: PPUSH
38800: LD_VAR 0 5
38804: PUSH
38805: LD_VAR 0 6
38809: ARRAY
38810: PUSH
38811: LD_INT 1
38813: ARRAY
38814: PPUSH
38815: CALL 70712 0 2
38819: ST_TO_ADDR
38820: GO 38787
38822: POP
38823: POP
// result := tmp ;
38824: LD_ADDR_VAR 0 5
38828: PUSH
38829: LD_VAR 0 8
38833: ST_TO_ADDR
// end ; end ;
38834: LD_VAR 0 5
38838: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38839: LD_INT 0
38841: PPUSH
38842: PPUSH
38843: PPUSH
38844: PPUSH
// if not list then
38845: LD_VAR 0 3
38849: NOT
38850: IFFALSE 38854
// exit ;
38852: GO 39242
// result := [ ] ;
38854: LD_ADDR_VAR 0 6
38858: PUSH
38859: EMPTY
38860: ST_TO_ADDR
// for i in list do
38861: LD_ADDR_VAR 0 7
38865: PUSH
38866: LD_VAR 0 3
38870: PUSH
38871: FOR_IN
38872: IFFALSE 39074
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38874: LD_ADDR_VAR 0 9
38878: PUSH
38879: LD_VAR 0 7
38883: PPUSH
38884: LD_VAR 0 1
38888: PPUSH
38889: LD_VAR 0 2
38893: PPUSH
38894: CALL_OW 297
38898: ST_TO_ADDR
// if not result then
38899: LD_VAR 0 6
38903: NOT
38904: IFFALSE 38930
// result := [ [ i , tmp ] ] else
38906: LD_ADDR_VAR 0 6
38910: PUSH
38911: LD_VAR 0 7
38915: PUSH
38916: LD_VAR 0 9
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: EMPTY
38926: LIST
38927: ST_TO_ADDR
38928: GO 39072
// begin if result [ result ] [ 2 ] < tmp then
38930: LD_VAR 0 6
38934: PUSH
38935: LD_VAR 0 6
38939: ARRAY
38940: PUSH
38941: LD_INT 2
38943: ARRAY
38944: PUSH
38945: LD_VAR 0 9
38949: LESS
38950: IFFALSE 38992
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38952: LD_ADDR_VAR 0 6
38956: PUSH
38957: LD_VAR 0 6
38961: PPUSH
38962: LD_VAR 0 6
38966: PUSH
38967: LD_INT 1
38969: PLUS
38970: PPUSH
38971: LD_VAR 0 7
38975: PUSH
38976: LD_VAR 0 9
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PPUSH
38985: CALL_OW 2
38989: ST_TO_ADDR
38990: GO 39072
// for j = 1 to result do
38992: LD_ADDR_VAR 0 8
38996: PUSH
38997: DOUBLE
38998: LD_INT 1
39000: DEC
39001: ST_TO_ADDR
39002: LD_VAR 0 6
39006: PUSH
39007: FOR_TO
39008: IFFALSE 39070
// begin if tmp < result [ j ] [ 2 ] then
39010: LD_VAR 0 9
39014: PUSH
39015: LD_VAR 0 6
39019: PUSH
39020: LD_VAR 0 8
39024: ARRAY
39025: PUSH
39026: LD_INT 2
39028: ARRAY
39029: LESS
39030: IFFALSE 39068
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39032: LD_ADDR_VAR 0 6
39036: PUSH
39037: LD_VAR 0 6
39041: PPUSH
39042: LD_VAR 0 8
39046: PPUSH
39047: LD_VAR 0 7
39051: PUSH
39052: LD_VAR 0 9
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PPUSH
39061: CALL_OW 2
39065: ST_TO_ADDR
// break ;
39066: GO 39070
// end ; end ;
39068: GO 39007
39070: POP
39071: POP
// end ; end ;
39072: GO 38871
39074: POP
39075: POP
// if result and not asc then
39076: LD_VAR 0 6
39080: PUSH
39081: LD_VAR 0 4
39085: NOT
39086: AND
39087: IFFALSE 39162
// begin tmp := result ;
39089: LD_ADDR_VAR 0 9
39093: PUSH
39094: LD_VAR 0 6
39098: ST_TO_ADDR
// for i = tmp downto 1 do
39099: LD_ADDR_VAR 0 7
39103: PUSH
39104: DOUBLE
39105: LD_VAR 0 9
39109: INC
39110: ST_TO_ADDR
39111: LD_INT 1
39113: PUSH
39114: FOR_DOWNTO
39115: IFFALSE 39160
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39117: LD_ADDR_VAR 0 6
39121: PUSH
39122: LD_VAR 0 6
39126: PPUSH
39127: LD_VAR 0 9
39131: PUSH
39132: LD_VAR 0 7
39136: MINUS
39137: PUSH
39138: LD_INT 1
39140: PLUS
39141: PPUSH
39142: LD_VAR 0 9
39146: PUSH
39147: LD_VAR 0 7
39151: ARRAY
39152: PPUSH
39153: CALL_OW 1
39157: ST_TO_ADDR
39158: GO 39114
39160: POP
39161: POP
// end ; tmp := [ ] ;
39162: LD_ADDR_VAR 0 9
39166: PUSH
39167: EMPTY
39168: ST_TO_ADDR
// if mode then
39169: LD_VAR 0 5
39173: IFFALSE 39242
// begin for i = 1 to result do
39175: LD_ADDR_VAR 0 7
39179: PUSH
39180: DOUBLE
39181: LD_INT 1
39183: DEC
39184: ST_TO_ADDR
39185: LD_VAR 0 6
39189: PUSH
39190: FOR_TO
39191: IFFALSE 39230
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39193: LD_ADDR_VAR 0 9
39197: PUSH
39198: LD_VAR 0 9
39202: PPUSH
39203: LD_VAR 0 7
39207: PPUSH
39208: LD_VAR 0 6
39212: PUSH
39213: LD_VAR 0 7
39217: ARRAY
39218: PUSH
39219: LD_INT 1
39221: ARRAY
39222: PPUSH
39223: CALL_OW 1
39227: ST_TO_ADDR
39228: GO 39190
39230: POP
39231: POP
// result := tmp ;
39232: LD_ADDR_VAR 0 6
39236: PUSH
39237: LD_VAR 0 9
39241: ST_TO_ADDR
// end ; end ;
39242: LD_VAR 0 6
39246: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39247: LD_INT 0
39249: PPUSH
39250: PPUSH
39251: PPUSH
39252: PPUSH
39253: PPUSH
39254: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39255: LD_ADDR_VAR 0 5
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: ST_TO_ADDR
// if not x or not y then
39277: LD_VAR 0 2
39281: NOT
39282: PUSH
39283: LD_VAR 0 3
39287: NOT
39288: OR
39289: IFFALSE 39293
// exit ;
39291: GO 40943
// if not range then
39293: LD_VAR 0 4
39297: NOT
39298: IFFALSE 39308
// range := 10 ;
39300: LD_ADDR_VAR 0 4
39304: PUSH
39305: LD_INT 10
39307: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39308: LD_ADDR_VAR 0 8
39312: PUSH
39313: LD_INT 81
39315: PUSH
39316: LD_VAR 0 1
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 92
39327: PUSH
39328: LD_VAR 0 2
39332: PUSH
39333: LD_VAR 0 3
39337: PUSH
39338: LD_VAR 0 4
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 3
39351: PUSH
39352: LD_INT 21
39354: PUSH
39355: LD_INT 3
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: LIST
39370: PPUSH
39371: CALL_OW 69
39375: ST_TO_ADDR
// if not tmp then
39376: LD_VAR 0 8
39380: NOT
39381: IFFALSE 39385
// exit ;
39383: GO 40943
// for i in tmp do
39385: LD_ADDR_VAR 0 6
39389: PUSH
39390: LD_VAR 0 8
39394: PUSH
39395: FOR_IN
39396: IFFALSE 40918
// begin points := [ 0 , 0 , 0 ] ;
39398: LD_ADDR_VAR 0 9
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: LIST
39416: ST_TO_ADDR
// bpoints := 1 ;
39417: LD_ADDR_VAR 0 10
39421: PUSH
39422: LD_INT 1
39424: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39425: LD_VAR 0 6
39429: PPUSH
39430: CALL_OW 247
39434: PUSH
39435: LD_INT 1
39437: DOUBLE
39438: EQUAL
39439: IFTRUE 39443
39441: GO 40021
39443: POP
// begin if GetClass ( i ) = 1 then
39444: LD_VAR 0 6
39448: PPUSH
39449: CALL_OW 257
39453: PUSH
39454: LD_INT 1
39456: EQUAL
39457: IFFALSE 39478
// points := [ 10 , 5 , 3 ] ;
39459: LD_ADDR_VAR 0 9
39463: PUSH
39464: LD_INT 10
39466: PUSH
39467: LD_INT 5
39469: PUSH
39470: LD_INT 3
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39478: LD_VAR 0 6
39482: PPUSH
39483: CALL_OW 257
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: LD_INT 4
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: LIST
39501: IN
39502: IFFALSE 39523
// points := [ 3 , 2 , 1 ] ;
39504: LD_ADDR_VAR 0 9
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39523: LD_VAR 0 6
39527: PPUSH
39528: CALL_OW 257
39532: PUSH
39533: LD_INT 5
39535: EQUAL
39536: IFFALSE 39557
// points := [ 130 , 5 , 2 ] ;
39538: LD_ADDR_VAR 0 9
39542: PUSH
39543: LD_INT 130
39545: PUSH
39546: LD_INT 5
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: LIST
39556: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39557: LD_VAR 0 6
39561: PPUSH
39562: CALL_OW 257
39566: PUSH
39567: LD_INT 8
39569: EQUAL
39570: IFFALSE 39591
// points := [ 35 , 35 , 30 ] ;
39572: LD_ADDR_VAR 0 9
39576: PUSH
39577: LD_INT 35
39579: PUSH
39580: LD_INT 35
39582: PUSH
39583: LD_INT 30
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39591: LD_VAR 0 6
39595: PPUSH
39596: CALL_OW 257
39600: PUSH
39601: LD_INT 9
39603: EQUAL
39604: IFFALSE 39625
// points := [ 20 , 55 , 40 ] ;
39606: LD_ADDR_VAR 0 9
39610: PUSH
39611: LD_INT 20
39613: PUSH
39614: LD_INT 55
39616: PUSH
39617: LD_INT 40
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39625: LD_VAR 0 6
39629: PPUSH
39630: CALL_OW 257
39634: PUSH
39635: LD_INT 12
39637: PUSH
39638: LD_INT 16
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: IN
39645: IFFALSE 39666
// points := [ 5 , 3 , 2 ] ;
39647: LD_ADDR_VAR 0 9
39651: PUSH
39652: LD_INT 5
39654: PUSH
39655: LD_INT 3
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: LIST
39665: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39666: LD_VAR 0 6
39670: PPUSH
39671: CALL_OW 257
39675: PUSH
39676: LD_INT 17
39678: EQUAL
39679: IFFALSE 39700
// points := [ 100 , 50 , 75 ] ;
39681: LD_ADDR_VAR 0 9
39685: PUSH
39686: LD_INT 100
39688: PUSH
39689: LD_INT 50
39691: PUSH
39692: LD_INT 75
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: LIST
39699: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39700: LD_VAR 0 6
39704: PPUSH
39705: CALL_OW 257
39709: PUSH
39710: LD_INT 15
39712: EQUAL
39713: IFFALSE 39734
// points := [ 10 , 5 , 3 ] ;
39715: LD_ADDR_VAR 0 9
39719: PUSH
39720: LD_INT 10
39722: PUSH
39723: LD_INT 5
39725: PUSH
39726: LD_INT 3
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: LIST
39733: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39734: LD_VAR 0 6
39738: PPUSH
39739: CALL_OW 257
39743: PUSH
39744: LD_INT 14
39746: EQUAL
39747: IFFALSE 39768
// points := [ 10 , 0 , 0 ] ;
39749: LD_ADDR_VAR 0 9
39753: PUSH
39754: LD_INT 10
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: LIST
39767: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39768: LD_VAR 0 6
39772: PPUSH
39773: CALL_OW 257
39777: PUSH
39778: LD_INT 11
39780: EQUAL
39781: IFFALSE 39802
// points := [ 30 , 10 , 5 ] ;
39783: LD_ADDR_VAR 0 9
39787: PUSH
39788: LD_INT 30
39790: PUSH
39791: LD_INT 10
39793: PUSH
39794: LD_INT 5
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: LIST
39801: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39802: LD_VAR 0 1
39806: PPUSH
39807: LD_INT 5
39809: PPUSH
39810: CALL_OW 321
39814: PUSH
39815: LD_INT 2
39817: EQUAL
39818: IFFALSE 39835
// bpoints := bpoints * 1.8 ;
39820: LD_ADDR_VAR 0 10
39824: PUSH
39825: LD_VAR 0 10
39829: PUSH
39830: LD_REAL  1.80000000000000E+0000
39833: MUL
39834: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39835: LD_VAR 0 6
39839: PPUSH
39840: CALL_OW 257
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: LD_INT 3
39853: PUSH
39854: LD_INT 4
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: IN
39863: PUSH
39864: LD_VAR 0 1
39868: PPUSH
39869: LD_INT 51
39871: PPUSH
39872: CALL_OW 321
39876: PUSH
39877: LD_INT 2
39879: EQUAL
39880: AND
39881: IFFALSE 39898
// bpoints := bpoints * 1.2 ;
39883: LD_ADDR_VAR 0 10
39887: PUSH
39888: LD_VAR 0 10
39892: PUSH
39893: LD_REAL  1.20000000000000E+0000
39896: MUL
39897: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39898: LD_VAR 0 6
39902: PPUSH
39903: CALL_OW 257
39907: PUSH
39908: LD_INT 5
39910: PUSH
39911: LD_INT 7
39913: PUSH
39914: LD_INT 9
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: LIST
39921: IN
39922: PUSH
39923: LD_VAR 0 1
39927: PPUSH
39928: LD_INT 52
39930: PPUSH
39931: CALL_OW 321
39935: PUSH
39936: LD_INT 2
39938: EQUAL
39939: AND
39940: IFFALSE 39957
// bpoints := bpoints * 1.5 ;
39942: LD_ADDR_VAR 0 10
39946: PUSH
39947: LD_VAR 0 10
39951: PUSH
39952: LD_REAL  1.50000000000000E+0000
39955: MUL
39956: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39957: LD_VAR 0 1
39961: PPUSH
39962: LD_INT 66
39964: PPUSH
39965: CALL_OW 321
39969: PUSH
39970: LD_INT 2
39972: EQUAL
39973: IFFALSE 39990
// bpoints := bpoints * 1.1 ;
39975: LD_ADDR_VAR 0 10
39979: PUSH
39980: LD_VAR 0 10
39984: PUSH
39985: LD_REAL  1.10000000000000E+0000
39988: MUL
39989: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39990: LD_ADDR_VAR 0 10
39994: PUSH
39995: LD_VAR 0 10
39999: PUSH
40000: LD_VAR 0 6
40004: PPUSH
40005: LD_INT 1
40007: PPUSH
40008: CALL_OW 259
40012: PUSH
40013: LD_REAL  1.15000000000000E+0000
40016: MUL
40017: MUL
40018: ST_TO_ADDR
// end ; unit_vehicle :
40019: GO 40847
40021: LD_INT 2
40023: DOUBLE
40024: EQUAL
40025: IFTRUE 40029
40027: GO 40835
40029: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40030: LD_VAR 0 6
40034: PPUSH
40035: CALL_OW 264
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: LD_INT 42
40045: PUSH
40046: LD_INT 24
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: LIST
40053: IN
40054: IFFALSE 40075
// points := [ 25 , 5 , 3 ] ;
40056: LD_ADDR_VAR 0 9
40060: PUSH
40061: LD_INT 25
40063: PUSH
40064: LD_INT 5
40066: PUSH
40067: LD_INT 3
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: LIST
40074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40075: LD_VAR 0 6
40079: PPUSH
40080: CALL_OW 264
40084: PUSH
40085: LD_INT 4
40087: PUSH
40088: LD_INT 43
40090: PUSH
40091: LD_INT 25
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: LIST
40098: IN
40099: IFFALSE 40120
// points := [ 40 , 15 , 5 ] ;
40101: LD_ADDR_VAR 0 9
40105: PUSH
40106: LD_INT 40
40108: PUSH
40109: LD_INT 15
40111: PUSH
40112: LD_INT 5
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40120: LD_VAR 0 6
40124: PPUSH
40125: CALL_OW 264
40129: PUSH
40130: LD_INT 3
40132: PUSH
40133: LD_INT 23
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: IN
40140: IFFALSE 40161
// points := [ 7 , 25 , 8 ] ;
40142: LD_ADDR_VAR 0 9
40146: PUSH
40147: LD_INT 7
40149: PUSH
40150: LD_INT 25
40152: PUSH
40153: LD_INT 8
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40161: LD_VAR 0 6
40165: PPUSH
40166: CALL_OW 264
40170: PUSH
40171: LD_INT 5
40173: PUSH
40174: LD_INT 27
40176: PUSH
40177: LD_INT 44
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: LIST
40184: IN
40185: IFFALSE 40206
// points := [ 14 , 50 , 16 ] ;
40187: LD_ADDR_VAR 0 9
40191: PUSH
40192: LD_INT 14
40194: PUSH
40195: LD_INT 50
40197: PUSH
40198: LD_INT 16
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40206: LD_VAR 0 6
40210: PPUSH
40211: CALL_OW 264
40215: PUSH
40216: LD_INT 6
40218: PUSH
40219: LD_INT 46
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: IN
40226: IFFALSE 40247
// points := [ 32 , 120 , 70 ] ;
40228: LD_ADDR_VAR 0 9
40232: PUSH
40233: LD_INT 32
40235: PUSH
40236: LD_INT 120
40238: PUSH
40239: LD_INT 70
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: LIST
40246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40247: LD_VAR 0 6
40251: PPUSH
40252: CALL_OW 264
40256: PUSH
40257: LD_INT 7
40259: PUSH
40260: LD_INT 28
40262: PUSH
40263: LD_INT 45
40265: PUSH
40266: LD_INT 92
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: IN
40275: IFFALSE 40296
// points := [ 35 , 20 , 45 ] ;
40277: LD_ADDR_VAR 0 9
40281: PUSH
40282: LD_INT 35
40284: PUSH
40285: LD_INT 20
40287: PUSH
40288: LD_INT 45
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40296: LD_VAR 0 6
40300: PPUSH
40301: CALL_OW 264
40305: PUSH
40306: LD_INT 47
40308: PUSH
40309: EMPTY
40310: LIST
40311: IN
40312: IFFALSE 40333
// points := [ 67 , 45 , 75 ] ;
40314: LD_ADDR_VAR 0 9
40318: PUSH
40319: LD_INT 67
40321: PUSH
40322: LD_INT 45
40324: PUSH
40325: LD_INT 75
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40333: LD_VAR 0 6
40337: PPUSH
40338: CALL_OW 264
40342: PUSH
40343: LD_INT 26
40345: PUSH
40346: EMPTY
40347: LIST
40348: IN
40349: IFFALSE 40370
// points := [ 120 , 30 , 80 ] ;
40351: LD_ADDR_VAR 0 9
40355: PUSH
40356: LD_INT 120
40358: PUSH
40359: LD_INT 30
40361: PUSH
40362: LD_INT 80
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: LIST
40369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40370: LD_VAR 0 6
40374: PPUSH
40375: CALL_OW 264
40379: PUSH
40380: LD_INT 22
40382: PUSH
40383: EMPTY
40384: LIST
40385: IN
40386: IFFALSE 40407
// points := [ 40 , 1 , 1 ] ;
40388: LD_ADDR_VAR 0 9
40392: PUSH
40393: LD_INT 40
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: LIST
40406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40407: LD_VAR 0 6
40411: PPUSH
40412: CALL_OW 264
40416: PUSH
40417: LD_INT 29
40419: PUSH
40420: EMPTY
40421: LIST
40422: IN
40423: IFFALSE 40444
// points := [ 70 , 200 , 400 ] ;
40425: LD_ADDR_VAR 0 9
40429: PUSH
40430: LD_INT 70
40432: PUSH
40433: LD_INT 200
40435: PUSH
40436: LD_INT 400
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: LIST
40443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40444: LD_VAR 0 6
40448: PPUSH
40449: CALL_OW 264
40453: PUSH
40454: LD_INT 14
40456: PUSH
40457: LD_INT 53
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: IN
40464: IFFALSE 40485
// points := [ 40 , 10 , 20 ] ;
40466: LD_ADDR_VAR 0 9
40470: PUSH
40471: LD_INT 40
40473: PUSH
40474: LD_INT 10
40476: PUSH
40477: LD_INT 20
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40485: LD_VAR 0 6
40489: PPUSH
40490: CALL_OW 264
40494: PUSH
40495: LD_INT 9
40497: PUSH
40498: EMPTY
40499: LIST
40500: IN
40501: IFFALSE 40522
// points := [ 5 , 70 , 20 ] ;
40503: LD_ADDR_VAR 0 9
40507: PUSH
40508: LD_INT 5
40510: PUSH
40511: LD_INT 70
40513: PUSH
40514: LD_INT 20
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40522: LD_VAR 0 6
40526: PPUSH
40527: CALL_OW 264
40531: PUSH
40532: LD_INT 10
40534: PUSH
40535: EMPTY
40536: LIST
40537: IN
40538: IFFALSE 40559
// points := [ 35 , 110 , 70 ] ;
40540: LD_ADDR_VAR 0 9
40544: PUSH
40545: LD_INT 35
40547: PUSH
40548: LD_INT 110
40550: PUSH
40551: LD_INT 70
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40559: LD_VAR 0 6
40563: PPUSH
40564: CALL_OW 265
40568: PUSH
40569: LD_INT 25
40571: EQUAL
40572: IFFALSE 40593
// points := [ 80 , 65 , 100 ] ;
40574: LD_ADDR_VAR 0 9
40578: PUSH
40579: LD_INT 80
40581: PUSH
40582: LD_INT 65
40584: PUSH
40585: LD_INT 100
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40593: LD_VAR 0 6
40597: PPUSH
40598: CALL_OW 263
40602: PUSH
40603: LD_INT 1
40605: EQUAL
40606: IFFALSE 40641
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40608: LD_ADDR_VAR 0 10
40612: PUSH
40613: LD_VAR 0 10
40617: PUSH
40618: LD_VAR 0 6
40622: PPUSH
40623: CALL_OW 311
40627: PPUSH
40628: LD_INT 3
40630: PPUSH
40631: CALL_OW 259
40635: PUSH
40636: LD_INT 4
40638: MUL
40639: MUL
40640: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40641: LD_VAR 0 6
40645: PPUSH
40646: CALL_OW 263
40650: PUSH
40651: LD_INT 2
40653: EQUAL
40654: IFFALSE 40705
// begin j := IsControledBy ( i ) ;
40656: LD_ADDR_VAR 0 7
40660: PUSH
40661: LD_VAR 0 6
40665: PPUSH
40666: CALL_OW 312
40670: ST_TO_ADDR
// if j then
40671: LD_VAR 0 7
40675: IFFALSE 40705
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40677: LD_ADDR_VAR 0 10
40681: PUSH
40682: LD_VAR 0 10
40686: PUSH
40687: LD_VAR 0 7
40691: PPUSH
40692: LD_INT 3
40694: PPUSH
40695: CALL_OW 259
40699: PUSH
40700: LD_INT 3
40702: MUL
40703: MUL
40704: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40705: LD_VAR 0 6
40709: PPUSH
40710: CALL_OW 264
40714: PUSH
40715: LD_INT 5
40717: PUSH
40718: LD_INT 6
40720: PUSH
40721: LD_INT 46
40723: PUSH
40724: LD_INT 44
40726: PUSH
40727: LD_INT 47
40729: PUSH
40730: LD_INT 45
40732: PUSH
40733: LD_INT 28
40735: PUSH
40736: LD_INT 7
40738: PUSH
40739: LD_INT 27
40741: PUSH
40742: LD_INT 29
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: IN
40757: PUSH
40758: LD_VAR 0 1
40762: PPUSH
40763: LD_INT 52
40765: PPUSH
40766: CALL_OW 321
40770: PUSH
40771: LD_INT 2
40773: EQUAL
40774: AND
40775: IFFALSE 40792
// bpoints := bpoints * 1.2 ;
40777: LD_ADDR_VAR 0 10
40781: PUSH
40782: LD_VAR 0 10
40786: PUSH
40787: LD_REAL  1.20000000000000E+0000
40790: MUL
40791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40792: LD_VAR 0 6
40796: PPUSH
40797: CALL_OW 264
40801: PUSH
40802: LD_INT 6
40804: PUSH
40805: LD_INT 46
40807: PUSH
40808: LD_INT 47
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: IN
40816: IFFALSE 40833
// bpoints := bpoints * 1.2 ;
40818: LD_ADDR_VAR 0 10
40822: PUSH
40823: LD_VAR 0 10
40827: PUSH
40828: LD_REAL  1.20000000000000E+0000
40831: MUL
40832: ST_TO_ADDR
// end ; unit_building :
40833: GO 40847
40835: LD_INT 3
40837: DOUBLE
40838: EQUAL
40839: IFTRUE 40843
40841: GO 40846
40843: POP
// ; end ;
40844: GO 40847
40846: POP
// for j = 1 to 3 do
40847: LD_ADDR_VAR 0 7
40851: PUSH
40852: DOUBLE
40853: LD_INT 1
40855: DEC
40856: ST_TO_ADDR
40857: LD_INT 3
40859: PUSH
40860: FOR_TO
40861: IFFALSE 40914
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40863: LD_ADDR_VAR 0 5
40867: PUSH
40868: LD_VAR 0 5
40872: PPUSH
40873: LD_VAR 0 7
40877: PPUSH
40878: LD_VAR 0 5
40882: PUSH
40883: LD_VAR 0 7
40887: ARRAY
40888: PUSH
40889: LD_VAR 0 9
40893: PUSH
40894: LD_VAR 0 7
40898: ARRAY
40899: PUSH
40900: LD_VAR 0 10
40904: MUL
40905: PLUS
40906: PPUSH
40907: CALL_OW 1
40911: ST_TO_ADDR
40912: GO 40860
40914: POP
40915: POP
// end ;
40916: GO 39395
40918: POP
40919: POP
// result := Replace ( result , 4 , tmp ) ;
40920: LD_ADDR_VAR 0 5
40924: PUSH
40925: LD_VAR 0 5
40929: PPUSH
40930: LD_INT 4
40932: PPUSH
40933: LD_VAR 0 8
40937: PPUSH
40938: CALL_OW 1
40942: ST_TO_ADDR
// end ;
40943: LD_VAR 0 5
40947: RET
// export function DangerAtRange ( unit , range ) ; begin
40948: LD_INT 0
40950: PPUSH
// if not unit then
40951: LD_VAR 0 1
40955: NOT
40956: IFFALSE 40960
// exit ;
40958: GO 41005
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40960: LD_ADDR_VAR 0 3
40964: PUSH
40965: LD_VAR 0 1
40969: PPUSH
40970: CALL_OW 255
40974: PPUSH
40975: LD_VAR 0 1
40979: PPUSH
40980: CALL_OW 250
40984: PPUSH
40985: LD_VAR 0 1
40989: PPUSH
40990: CALL_OW 251
40994: PPUSH
40995: LD_VAR 0 2
40999: PPUSH
41000: CALL 39247 0 4
41004: ST_TO_ADDR
// end ;
41005: LD_VAR 0 3
41009: RET
// export function DangerInArea ( side , area ) ; begin
41010: LD_INT 0
41012: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41013: LD_ADDR_VAR 0 3
41017: PUSH
41018: LD_VAR 0 2
41022: PPUSH
41023: LD_INT 81
41025: PUSH
41026: LD_VAR 0 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PPUSH
41035: CALL_OW 70
41039: ST_TO_ADDR
// end ;
41040: LD_VAR 0 3
41044: RET
// export function IsExtension ( b ) ; begin
41045: LD_INT 0
41047: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41048: LD_ADDR_VAR 0 2
41052: PUSH
41053: LD_VAR 0 1
41057: PUSH
41058: LD_INT 23
41060: PUSH
41061: LD_INT 20
41063: PUSH
41064: LD_INT 22
41066: PUSH
41067: LD_INT 17
41069: PUSH
41070: LD_INT 24
41072: PUSH
41073: LD_INT 21
41075: PUSH
41076: LD_INT 19
41078: PUSH
41079: LD_INT 16
41081: PUSH
41082: LD_INT 25
41084: PUSH
41085: LD_INT 18
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: IN
41100: ST_TO_ADDR
// end ;
41101: LD_VAR 0 2
41105: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41106: LD_INT 0
41108: PPUSH
41109: PPUSH
41110: PPUSH
// result := [ ] ;
41111: LD_ADDR_VAR 0 4
41115: PUSH
41116: EMPTY
41117: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41118: LD_ADDR_VAR 0 5
41122: PUSH
41123: LD_VAR 0 2
41127: PPUSH
41128: LD_INT 21
41130: PUSH
41131: LD_INT 3
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PPUSH
41138: CALL_OW 70
41142: ST_TO_ADDR
// if not tmp then
41143: LD_VAR 0 5
41147: NOT
41148: IFFALSE 41152
// exit ;
41150: GO 41216
// if checkLink then
41152: LD_VAR 0 3
41156: IFFALSE 41206
// begin for i in tmp do
41158: LD_ADDR_VAR 0 6
41162: PUSH
41163: LD_VAR 0 5
41167: PUSH
41168: FOR_IN
41169: IFFALSE 41204
// if GetBase ( i ) <> base then
41171: LD_VAR 0 6
41175: PPUSH
41176: CALL_OW 274
41180: PUSH
41181: LD_VAR 0 1
41185: NONEQUAL
41186: IFFALSE 41202
// ComLinkToBase ( base , i ) ;
41188: LD_VAR 0 1
41192: PPUSH
41193: LD_VAR 0 6
41197: PPUSH
41198: CALL_OW 169
41202: GO 41168
41204: POP
41205: POP
// end ; result := tmp ;
41206: LD_ADDR_VAR 0 4
41210: PUSH
41211: LD_VAR 0 5
41215: ST_TO_ADDR
// end ;
41216: LD_VAR 0 4
41220: RET
// export function ComComplete ( units , b ) ; var i ; begin
41221: LD_INT 0
41223: PPUSH
41224: PPUSH
// if not units then
41225: LD_VAR 0 1
41229: NOT
41230: IFFALSE 41234
// exit ;
41232: GO 41324
// for i in units do
41234: LD_ADDR_VAR 0 4
41238: PUSH
41239: LD_VAR 0 1
41243: PUSH
41244: FOR_IN
41245: IFFALSE 41322
// if BuildingStatus ( b ) = bs_build then
41247: LD_VAR 0 2
41251: PPUSH
41252: CALL_OW 461
41256: PUSH
41257: LD_INT 1
41259: EQUAL
41260: IFFALSE 41320
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41262: LD_VAR 0 4
41266: PPUSH
41267: LD_STRING h
41269: PUSH
41270: LD_VAR 0 2
41274: PPUSH
41275: CALL_OW 250
41279: PUSH
41280: LD_VAR 0 2
41284: PPUSH
41285: CALL_OW 251
41289: PUSH
41290: LD_VAR 0 2
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: PUSH
41313: EMPTY
41314: LIST
41315: PPUSH
41316: CALL_OW 446
41320: GO 41244
41322: POP
41323: POP
// end ;
41324: LD_VAR 0 3
41328: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41329: LD_INT 0
41331: PPUSH
41332: PPUSH
41333: PPUSH
41334: PPUSH
41335: PPUSH
41336: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41337: LD_VAR 0 1
41341: NOT
41342: PUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: CALL_OW 263
41352: PUSH
41353: LD_INT 2
41355: NONEQUAL
41356: OR
41357: IFFALSE 41361
// exit ;
41359: GO 41677
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41361: LD_ADDR_VAR 0 6
41365: PUSH
41366: LD_INT 22
41368: PUSH
41369: LD_VAR 0 1
41373: PPUSH
41374: CALL_OW 255
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 30
41388: PUSH
41389: LD_INT 36
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 34
41398: PUSH
41399: LD_INT 31
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PPUSH
41415: CALL_OW 69
41419: ST_TO_ADDR
// if not tmp then
41420: LD_VAR 0 6
41424: NOT
41425: IFFALSE 41429
// exit ;
41427: GO 41677
// result := [ ] ;
41429: LD_ADDR_VAR 0 2
41433: PUSH
41434: EMPTY
41435: ST_TO_ADDR
// for i in tmp do
41436: LD_ADDR_VAR 0 3
41440: PUSH
41441: LD_VAR 0 6
41445: PUSH
41446: FOR_IN
41447: IFFALSE 41518
// begin t := UnitsInside ( i ) ;
41449: LD_ADDR_VAR 0 4
41453: PUSH
41454: LD_VAR 0 3
41458: PPUSH
41459: CALL_OW 313
41463: ST_TO_ADDR
// if t then
41464: LD_VAR 0 4
41468: IFFALSE 41516
// for j in t do
41470: LD_ADDR_VAR 0 7
41474: PUSH
41475: LD_VAR 0 4
41479: PUSH
41480: FOR_IN
41481: IFFALSE 41514
// result := Replace ( result , result + 1 , j ) ;
41483: LD_ADDR_VAR 0 2
41487: PUSH
41488: LD_VAR 0 2
41492: PPUSH
41493: LD_VAR 0 2
41497: PUSH
41498: LD_INT 1
41500: PLUS
41501: PPUSH
41502: LD_VAR 0 7
41506: PPUSH
41507: CALL_OW 1
41511: ST_TO_ADDR
41512: GO 41480
41514: POP
41515: POP
// end ;
41516: GO 41446
41518: POP
41519: POP
// if not result then
41520: LD_VAR 0 2
41524: NOT
41525: IFFALSE 41529
// exit ;
41527: GO 41677
// mech := result [ 1 ] ;
41529: LD_ADDR_VAR 0 5
41533: PUSH
41534: LD_VAR 0 2
41538: PUSH
41539: LD_INT 1
41541: ARRAY
41542: ST_TO_ADDR
// if result > 1 then
41543: LD_VAR 0 2
41547: PUSH
41548: LD_INT 1
41550: GREATER
41551: IFFALSE 41663
// begin for i = 2 to result do
41553: LD_ADDR_VAR 0 3
41557: PUSH
41558: DOUBLE
41559: LD_INT 2
41561: DEC
41562: ST_TO_ADDR
41563: LD_VAR 0 2
41567: PUSH
41568: FOR_TO
41569: IFFALSE 41661
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41571: LD_ADDR_VAR 0 4
41575: PUSH
41576: LD_VAR 0 2
41580: PUSH
41581: LD_VAR 0 3
41585: ARRAY
41586: PPUSH
41587: LD_INT 3
41589: PPUSH
41590: CALL_OW 259
41594: PUSH
41595: LD_VAR 0 2
41599: PUSH
41600: LD_VAR 0 3
41604: ARRAY
41605: PPUSH
41606: CALL_OW 432
41610: MINUS
41611: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41612: LD_VAR 0 4
41616: PUSH
41617: LD_VAR 0 5
41621: PPUSH
41622: LD_INT 3
41624: PPUSH
41625: CALL_OW 259
41629: PUSH
41630: LD_VAR 0 5
41634: PPUSH
41635: CALL_OW 432
41639: MINUS
41640: GREATEREQUAL
41641: IFFALSE 41659
// mech := result [ i ] ;
41643: LD_ADDR_VAR 0 5
41647: PUSH
41648: LD_VAR 0 2
41652: PUSH
41653: LD_VAR 0 3
41657: ARRAY
41658: ST_TO_ADDR
// end ;
41659: GO 41568
41661: POP
41662: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41663: LD_VAR 0 1
41667: PPUSH
41668: LD_VAR 0 5
41672: PPUSH
41673: CALL_OW 135
// end ;
41677: LD_VAR 0 2
41681: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41682: LD_INT 0
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
41695: PPUSH
41696: PPUSH
// result := [ ] ;
41697: LD_ADDR_VAR 0 7
41701: PUSH
41702: EMPTY
41703: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41704: LD_VAR 0 1
41708: PPUSH
41709: CALL_OW 266
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: IN
41724: NOT
41725: IFFALSE 41729
// exit ;
41727: GO 43363
// if name then
41729: LD_VAR 0 3
41733: IFFALSE 41749
// SetBName ( base_dep , name ) ;
41735: LD_VAR 0 1
41739: PPUSH
41740: LD_VAR 0 3
41744: PPUSH
41745: CALL_OW 500
// base := GetBase ( base_dep ) ;
41749: LD_ADDR_VAR 0 15
41753: PUSH
41754: LD_VAR 0 1
41758: PPUSH
41759: CALL_OW 274
41763: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41764: LD_ADDR_VAR 0 16
41768: PUSH
41769: LD_VAR 0 1
41773: PPUSH
41774: CALL_OW 255
41778: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41779: LD_ADDR_VAR 0 17
41783: PUSH
41784: LD_VAR 0 1
41788: PPUSH
41789: CALL_OW 248
41793: ST_TO_ADDR
// if sources then
41794: LD_VAR 0 5
41798: IFFALSE 41845
// for i = 1 to 3 do
41800: LD_ADDR_VAR 0 8
41804: PUSH
41805: DOUBLE
41806: LD_INT 1
41808: DEC
41809: ST_TO_ADDR
41810: LD_INT 3
41812: PUSH
41813: FOR_TO
41814: IFFALSE 41843
// AddResourceType ( base , i , sources [ i ] ) ;
41816: LD_VAR 0 15
41820: PPUSH
41821: LD_VAR 0 8
41825: PPUSH
41826: LD_VAR 0 5
41830: PUSH
41831: LD_VAR 0 8
41835: ARRAY
41836: PPUSH
41837: CALL_OW 276
41841: GO 41813
41843: POP
41844: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41845: LD_ADDR_VAR 0 18
41849: PUSH
41850: LD_VAR 0 15
41854: PPUSH
41855: LD_VAR 0 2
41859: PPUSH
41860: LD_INT 1
41862: PPUSH
41863: CALL 41106 0 3
41867: ST_TO_ADDR
// InitHc ;
41868: CALL_OW 19
// InitUc ;
41872: CALL_OW 18
// uc_side := side ;
41876: LD_ADDR_OWVAR 20
41880: PUSH
41881: LD_VAR 0 16
41885: ST_TO_ADDR
// uc_nation := nation ;
41886: LD_ADDR_OWVAR 21
41890: PUSH
41891: LD_VAR 0 17
41895: ST_TO_ADDR
// if buildings then
41896: LD_VAR 0 18
41900: IFFALSE 43222
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41902: LD_ADDR_VAR 0 19
41906: PUSH
41907: LD_VAR 0 18
41911: PPUSH
41912: LD_INT 2
41914: PUSH
41915: LD_INT 30
41917: PUSH
41918: LD_INT 29
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 30
41927: PUSH
41928: LD_INT 30
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: PPUSH
41940: CALL_OW 72
41944: ST_TO_ADDR
// if tmp then
41945: LD_VAR 0 19
41949: IFFALSE 41997
// for i in tmp do
41951: LD_ADDR_VAR 0 8
41955: PUSH
41956: LD_VAR 0 19
41960: PUSH
41961: FOR_IN
41962: IFFALSE 41995
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41964: LD_VAR 0 8
41968: PPUSH
41969: CALL_OW 250
41973: PPUSH
41974: LD_VAR 0 8
41978: PPUSH
41979: CALL_OW 251
41983: PPUSH
41984: LD_VAR 0 16
41988: PPUSH
41989: CALL_OW 441
41993: GO 41961
41995: POP
41996: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41997: LD_VAR 0 18
42001: PPUSH
42002: LD_INT 2
42004: PUSH
42005: LD_INT 30
42007: PUSH
42008: LD_INT 32
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 30
42017: PUSH
42018: LD_INT 33
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: LIST
42029: PPUSH
42030: CALL_OW 72
42034: IFFALSE 42122
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42036: LD_ADDR_VAR 0 8
42040: PUSH
42041: LD_VAR 0 18
42045: PPUSH
42046: LD_INT 2
42048: PUSH
42049: LD_INT 30
42051: PUSH
42052: LD_INT 32
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 30
42061: PUSH
42062: LD_INT 33
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: LIST
42073: PPUSH
42074: CALL_OW 72
42078: PUSH
42079: FOR_IN
42080: IFFALSE 42120
// begin if not GetBWeapon ( i ) then
42082: LD_VAR 0 8
42086: PPUSH
42087: CALL_OW 269
42091: NOT
42092: IFFALSE 42118
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42094: LD_VAR 0 8
42098: PPUSH
42099: LD_VAR 0 8
42103: PPUSH
42104: LD_VAR 0 2
42108: PPUSH
42109: CALL 43368 0 2
42113: PPUSH
42114: CALL_OW 431
// end ;
42118: GO 42079
42120: POP
42121: POP
// end ; for i = 1 to personel do
42122: LD_ADDR_VAR 0 8
42126: PUSH
42127: DOUBLE
42128: LD_INT 1
42130: DEC
42131: ST_TO_ADDR
42132: LD_VAR 0 6
42136: PUSH
42137: FOR_TO
42138: IFFALSE 43202
// begin if i > 4 then
42140: LD_VAR 0 8
42144: PUSH
42145: LD_INT 4
42147: GREATER
42148: IFFALSE 42152
// break ;
42150: GO 43202
// case i of 1 :
42152: LD_VAR 0 8
42156: PUSH
42157: LD_INT 1
42159: DOUBLE
42160: EQUAL
42161: IFTRUE 42165
42163: GO 42245
42165: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42166: LD_ADDR_VAR 0 12
42170: PUSH
42171: LD_VAR 0 18
42175: PPUSH
42176: LD_INT 22
42178: PUSH
42179: LD_VAR 0 16
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 58
42190: PUSH
42191: EMPTY
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: LD_INT 30
42199: PUSH
42200: LD_INT 32
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 30
42209: PUSH
42210: LD_INT 4
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 30
42219: PUSH
42220: LD_INT 5
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: LIST
42237: PPUSH
42238: CALL_OW 72
42242: ST_TO_ADDR
42243: GO 42467
42245: LD_INT 2
42247: DOUBLE
42248: EQUAL
42249: IFTRUE 42253
42251: GO 42315
42253: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42254: LD_ADDR_VAR 0 12
42258: PUSH
42259: LD_VAR 0 18
42263: PPUSH
42264: LD_INT 22
42266: PUSH
42267: LD_VAR 0 16
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: LD_INT 30
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 30
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PPUSH
42308: CALL_OW 72
42312: ST_TO_ADDR
42313: GO 42467
42315: LD_INT 3
42317: DOUBLE
42318: EQUAL
42319: IFTRUE 42323
42321: GO 42385
42323: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42324: LD_ADDR_VAR 0 12
42328: PUSH
42329: LD_VAR 0 18
42333: PPUSH
42334: LD_INT 22
42336: PUSH
42337: LD_VAR 0 16
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 30
42351: PUSH
42352: LD_INT 2
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 30
42361: PUSH
42362: LD_INT 3
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: LIST
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PPUSH
42378: CALL_OW 72
42382: ST_TO_ADDR
42383: GO 42467
42385: LD_INT 4
42387: DOUBLE
42388: EQUAL
42389: IFTRUE 42393
42391: GO 42466
42393: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42394: LD_ADDR_VAR 0 12
42398: PUSH
42399: LD_VAR 0 18
42403: PPUSH
42404: LD_INT 22
42406: PUSH
42407: LD_VAR 0 16
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: LD_INT 30
42421: PUSH
42422: LD_INT 6
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 30
42431: PUSH
42432: LD_INT 7
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 30
42441: PUSH
42442: LD_INT 8
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PPUSH
42459: CALL_OW 72
42463: ST_TO_ADDR
42464: GO 42467
42466: POP
// if i = 1 then
42467: LD_VAR 0 8
42471: PUSH
42472: LD_INT 1
42474: EQUAL
42475: IFFALSE 42586
// begin tmp := [ ] ;
42477: LD_ADDR_VAR 0 19
42481: PUSH
42482: EMPTY
42483: ST_TO_ADDR
// for j in f do
42484: LD_ADDR_VAR 0 9
42488: PUSH
42489: LD_VAR 0 12
42493: PUSH
42494: FOR_IN
42495: IFFALSE 42568
// if GetBType ( j ) = b_bunker then
42497: LD_VAR 0 9
42501: PPUSH
42502: CALL_OW 266
42506: PUSH
42507: LD_INT 32
42509: EQUAL
42510: IFFALSE 42537
// tmp := Insert ( tmp , 1 , j ) else
42512: LD_ADDR_VAR 0 19
42516: PUSH
42517: LD_VAR 0 19
42521: PPUSH
42522: LD_INT 1
42524: PPUSH
42525: LD_VAR 0 9
42529: PPUSH
42530: CALL_OW 2
42534: ST_TO_ADDR
42535: GO 42566
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42537: LD_ADDR_VAR 0 19
42541: PUSH
42542: LD_VAR 0 19
42546: PPUSH
42547: LD_VAR 0 19
42551: PUSH
42552: LD_INT 1
42554: PLUS
42555: PPUSH
42556: LD_VAR 0 9
42560: PPUSH
42561: CALL_OW 2
42565: ST_TO_ADDR
42566: GO 42494
42568: POP
42569: POP
// if tmp then
42570: LD_VAR 0 19
42574: IFFALSE 42586
// f := tmp ;
42576: LD_ADDR_VAR 0 12
42580: PUSH
42581: LD_VAR 0 19
42585: ST_TO_ADDR
// end ; x := personel [ i ] ;
42586: LD_ADDR_VAR 0 13
42590: PUSH
42591: LD_VAR 0 6
42595: PUSH
42596: LD_VAR 0 8
42600: ARRAY
42601: ST_TO_ADDR
// if x = - 1 then
42602: LD_VAR 0 13
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: EQUAL
42611: IFFALSE 42820
// begin for j in f do
42613: LD_ADDR_VAR 0 9
42617: PUSH
42618: LD_VAR 0 12
42622: PUSH
42623: FOR_IN
42624: IFFALSE 42816
// repeat InitHc ;
42626: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42630: LD_VAR 0 9
42634: PPUSH
42635: CALL_OW 266
42639: PUSH
42640: LD_INT 5
42642: EQUAL
42643: IFFALSE 42713
// begin if UnitsInside ( j ) < 3 then
42645: LD_VAR 0 9
42649: PPUSH
42650: CALL_OW 313
42654: PUSH
42655: LD_INT 3
42657: LESS
42658: IFFALSE 42694
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42660: LD_INT 0
42662: PPUSH
42663: LD_INT 5
42665: PUSH
42666: LD_INT 8
42668: PUSH
42669: LD_INT 9
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: LIST
42676: PUSH
42677: LD_VAR 0 17
42681: ARRAY
42682: PPUSH
42683: LD_VAR 0 4
42687: PPUSH
42688: CALL_OW 380
42692: GO 42711
// PrepareHuman ( false , i , skill ) ;
42694: LD_INT 0
42696: PPUSH
42697: LD_VAR 0 8
42701: PPUSH
42702: LD_VAR 0 4
42706: PPUSH
42707: CALL_OW 380
// end else
42711: GO 42730
// PrepareHuman ( false , i , skill ) ;
42713: LD_INT 0
42715: PPUSH
42716: LD_VAR 0 8
42720: PPUSH
42721: LD_VAR 0 4
42725: PPUSH
42726: CALL_OW 380
// un := CreateHuman ;
42730: LD_ADDR_VAR 0 14
42734: PUSH
42735: CALL_OW 44
42739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42740: LD_ADDR_VAR 0 7
42744: PUSH
42745: LD_VAR 0 7
42749: PPUSH
42750: LD_INT 1
42752: PPUSH
42753: LD_VAR 0 14
42757: PPUSH
42758: CALL_OW 2
42762: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42763: LD_VAR 0 14
42767: PPUSH
42768: LD_VAR 0 9
42772: PPUSH
42773: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42777: LD_VAR 0 9
42781: PPUSH
42782: CALL_OW 313
42786: PUSH
42787: LD_INT 6
42789: EQUAL
42790: PUSH
42791: LD_VAR 0 9
42795: PPUSH
42796: CALL_OW 266
42800: PUSH
42801: LD_INT 32
42803: PUSH
42804: LD_INT 31
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: IN
42811: OR
42812: IFFALSE 42626
42814: GO 42623
42816: POP
42817: POP
// end else
42818: GO 43200
// for j = 1 to x do
42820: LD_ADDR_VAR 0 9
42824: PUSH
42825: DOUBLE
42826: LD_INT 1
42828: DEC
42829: ST_TO_ADDR
42830: LD_VAR 0 13
42834: PUSH
42835: FOR_TO
42836: IFFALSE 43198
// begin InitHc ;
42838: CALL_OW 19
// if not f then
42842: LD_VAR 0 12
42846: NOT
42847: IFFALSE 42936
// begin PrepareHuman ( false , i , skill ) ;
42849: LD_INT 0
42851: PPUSH
42852: LD_VAR 0 8
42856: PPUSH
42857: LD_VAR 0 4
42861: PPUSH
42862: CALL_OW 380
// un := CreateHuman ;
42866: LD_ADDR_VAR 0 14
42870: PUSH
42871: CALL_OW 44
42875: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42876: LD_ADDR_VAR 0 7
42880: PUSH
42881: LD_VAR 0 7
42885: PPUSH
42886: LD_INT 1
42888: PPUSH
42889: LD_VAR 0 14
42893: PPUSH
42894: CALL_OW 2
42898: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42899: LD_VAR 0 14
42903: PPUSH
42904: LD_VAR 0 1
42908: PPUSH
42909: CALL_OW 250
42913: PPUSH
42914: LD_VAR 0 1
42918: PPUSH
42919: CALL_OW 251
42923: PPUSH
42924: LD_INT 10
42926: PPUSH
42927: LD_INT 0
42929: PPUSH
42930: CALL_OW 50
// continue ;
42934: GO 42835
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42936: LD_VAR 0 12
42940: PUSH
42941: LD_INT 1
42943: ARRAY
42944: PPUSH
42945: CALL_OW 313
42949: PUSH
42950: LD_VAR 0 12
42954: PUSH
42955: LD_INT 1
42957: ARRAY
42958: PPUSH
42959: CALL_OW 266
42963: PUSH
42964: LD_INT 32
42966: PUSH
42967: LD_INT 31
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: IN
42974: AND
42975: PUSH
42976: LD_VAR 0 12
42980: PUSH
42981: LD_INT 1
42983: ARRAY
42984: PPUSH
42985: CALL_OW 313
42989: PUSH
42990: LD_INT 6
42992: EQUAL
42993: OR
42994: IFFALSE 43014
// f := Delete ( f , 1 ) ;
42996: LD_ADDR_VAR 0 12
43000: PUSH
43001: LD_VAR 0 12
43005: PPUSH
43006: LD_INT 1
43008: PPUSH
43009: CALL_OW 3
43013: ST_TO_ADDR
// if not f then
43014: LD_VAR 0 12
43018: NOT
43019: IFFALSE 43037
// begin x := x + 2 ;
43021: LD_ADDR_VAR 0 13
43025: PUSH
43026: LD_VAR 0 13
43030: PUSH
43031: LD_INT 2
43033: PLUS
43034: ST_TO_ADDR
// continue ;
43035: GO 42835
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43037: LD_VAR 0 12
43041: PUSH
43042: LD_INT 1
43044: ARRAY
43045: PPUSH
43046: CALL_OW 266
43050: PUSH
43051: LD_INT 5
43053: EQUAL
43054: IFFALSE 43128
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43056: LD_VAR 0 12
43060: PUSH
43061: LD_INT 1
43063: ARRAY
43064: PPUSH
43065: CALL_OW 313
43069: PUSH
43070: LD_INT 3
43072: LESS
43073: IFFALSE 43109
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43075: LD_INT 0
43077: PPUSH
43078: LD_INT 5
43080: PUSH
43081: LD_INT 8
43083: PUSH
43084: LD_INT 9
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: PUSH
43092: LD_VAR 0 17
43096: ARRAY
43097: PPUSH
43098: LD_VAR 0 4
43102: PPUSH
43103: CALL_OW 380
43107: GO 43126
// PrepareHuman ( false , i , skill ) ;
43109: LD_INT 0
43111: PPUSH
43112: LD_VAR 0 8
43116: PPUSH
43117: LD_VAR 0 4
43121: PPUSH
43122: CALL_OW 380
// end else
43126: GO 43145
// PrepareHuman ( false , i , skill ) ;
43128: LD_INT 0
43130: PPUSH
43131: LD_VAR 0 8
43135: PPUSH
43136: LD_VAR 0 4
43140: PPUSH
43141: CALL_OW 380
// un := CreateHuman ;
43145: LD_ADDR_VAR 0 14
43149: PUSH
43150: CALL_OW 44
43154: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43155: LD_ADDR_VAR 0 7
43159: PUSH
43160: LD_VAR 0 7
43164: PPUSH
43165: LD_INT 1
43167: PPUSH
43168: LD_VAR 0 14
43172: PPUSH
43173: CALL_OW 2
43177: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43178: LD_VAR 0 14
43182: PPUSH
43183: LD_VAR 0 12
43187: PUSH
43188: LD_INT 1
43190: ARRAY
43191: PPUSH
43192: CALL_OW 52
// end ;
43196: GO 42835
43198: POP
43199: POP
// end ;
43200: GO 42137
43202: POP
43203: POP
// result := result ^ buildings ;
43204: LD_ADDR_VAR 0 7
43208: PUSH
43209: LD_VAR 0 7
43213: PUSH
43214: LD_VAR 0 18
43218: ADD
43219: ST_TO_ADDR
// end else
43220: GO 43363
// begin for i = 1 to personel do
43222: LD_ADDR_VAR 0 8
43226: PUSH
43227: DOUBLE
43228: LD_INT 1
43230: DEC
43231: ST_TO_ADDR
43232: LD_VAR 0 6
43236: PUSH
43237: FOR_TO
43238: IFFALSE 43361
// begin if i > 4 then
43240: LD_VAR 0 8
43244: PUSH
43245: LD_INT 4
43247: GREATER
43248: IFFALSE 43252
// break ;
43250: GO 43361
// x := personel [ i ] ;
43252: LD_ADDR_VAR 0 13
43256: PUSH
43257: LD_VAR 0 6
43261: PUSH
43262: LD_VAR 0 8
43266: ARRAY
43267: ST_TO_ADDR
// if x = - 1 then
43268: LD_VAR 0 13
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: EQUAL
43277: IFFALSE 43281
// continue ;
43279: GO 43237
// PrepareHuman ( false , i , skill ) ;
43281: LD_INT 0
43283: PPUSH
43284: LD_VAR 0 8
43288: PPUSH
43289: LD_VAR 0 4
43293: PPUSH
43294: CALL_OW 380
// un := CreateHuman ;
43298: LD_ADDR_VAR 0 14
43302: PUSH
43303: CALL_OW 44
43307: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43308: LD_VAR 0 14
43312: PPUSH
43313: LD_VAR 0 1
43317: PPUSH
43318: CALL_OW 250
43322: PPUSH
43323: LD_VAR 0 1
43327: PPUSH
43328: CALL_OW 251
43332: PPUSH
43333: LD_INT 10
43335: PPUSH
43336: LD_INT 0
43338: PPUSH
43339: CALL_OW 50
// result := result ^ un ;
43343: LD_ADDR_VAR 0 7
43347: PUSH
43348: LD_VAR 0 7
43352: PUSH
43353: LD_VAR 0 14
43357: ADD
43358: ST_TO_ADDR
// end ;
43359: GO 43237
43361: POP
43362: POP
// end ; end ;
43363: LD_VAR 0 7
43367: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43368: LD_INT 0
43370: PPUSH
43371: PPUSH
43372: PPUSH
43373: PPUSH
43374: PPUSH
43375: PPUSH
43376: PPUSH
43377: PPUSH
43378: PPUSH
43379: PPUSH
43380: PPUSH
43381: PPUSH
43382: PPUSH
43383: PPUSH
43384: PPUSH
43385: PPUSH
// result := false ;
43386: LD_ADDR_VAR 0 3
43390: PUSH
43391: LD_INT 0
43393: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43394: LD_VAR 0 1
43398: NOT
43399: PUSH
43400: LD_VAR 0 1
43404: PPUSH
43405: CALL_OW 266
43409: PUSH
43410: LD_INT 32
43412: PUSH
43413: LD_INT 33
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: IN
43420: NOT
43421: OR
43422: IFFALSE 43426
// exit ;
43424: GO 44535
// nat := GetNation ( tower ) ;
43426: LD_ADDR_VAR 0 12
43430: PUSH
43431: LD_VAR 0 1
43435: PPUSH
43436: CALL_OW 248
43440: ST_TO_ADDR
// side := GetSide ( tower ) ;
43441: LD_ADDR_VAR 0 16
43445: PUSH
43446: LD_VAR 0 1
43450: PPUSH
43451: CALL_OW 255
43455: ST_TO_ADDR
// x := GetX ( tower ) ;
43456: LD_ADDR_VAR 0 10
43460: PUSH
43461: LD_VAR 0 1
43465: PPUSH
43466: CALL_OW 250
43470: ST_TO_ADDR
// y := GetY ( tower ) ;
43471: LD_ADDR_VAR 0 11
43475: PUSH
43476: LD_VAR 0 1
43480: PPUSH
43481: CALL_OW 251
43485: ST_TO_ADDR
// if not x or not y then
43486: LD_VAR 0 10
43490: NOT
43491: PUSH
43492: LD_VAR 0 11
43496: NOT
43497: OR
43498: IFFALSE 43502
// exit ;
43500: GO 44535
// weapon := 0 ;
43502: LD_ADDR_VAR 0 18
43506: PUSH
43507: LD_INT 0
43509: ST_TO_ADDR
// fac_list := [ ] ;
43510: LD_ADDR_VAR 0 17
43514: PUSH
43515: EMPTY
43516: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43517: LD_ADDR_VAR 0 6
43521: PUSH
43522: LD_VAR 0 1
43526: PPUSH
43527: CALL_OW 274
43531: PPUSH
43532: LD_VAR 0 2
43536: PPUSH
43537: LD_INT 0
43539: PPUSH
43540: CALL 41106 0 3
43544: PPUSH
43545: LD_INT 30
43547: PUSH
43548: LD_INT 3
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PPUSH
43555: CALL_OW 72
43559: ST_TO_ADDR
// if not factories then
43560: LD_VAR 0 6
43564: NOT
43565: IFFALSE 43569
// exit ;
43567: GO 44535
// for i in factories do
43569: LD_ADDR_VAR 0 8
43573: PUSH
43574: LD_VAR 0 6
43578: PUSH
43579: FOR_IN
43580: IFFALSE 43605
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43582: LD_ADDR_VAR 0 17
43586: PUSH
43587: LD_VAR 0 17
43591: PUSH
43592: LD_VAR 0 8
43596: PPUSH
43597: CALL_OW 478
43601: UNION
43602: ST_TO_ADDR
43603: GO 43579
43605: POP
43606: POP
// if not fac_list then
43607: LD_VAR 0 17
43611: NOT
43612: IFFALSE 43616
// exit ;
43614: GO 44535
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43616: LD_ADDR_VAR 0 5
43620: PUSH
43621: LD_INT 4
43623: PUSH
43624: LD_INT 5
43626: PUSH
43627: LD_INT 9
43629: PUSH
43630: LD_INT 10
43632: PUSH
43633: LD_INT 6
43635: PUSH
43636: LD_INT 7
43638: PUSH
43639: LD_INT 11
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 27
43653: PUSH
43654: LD_INT 28
43656: PUSH
43657: LD_INT 26
43659: PUSH
43660: LD_INT 30
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 43
43671: PUSH
43672: LD_INT 44
43674: PUSH
43675: LD_INT 46
43677: PUSH
43678: LD_INT 45
43680: PUSH
43681: LD_INT 47
43683: PUSH
43684: LD_INT 49
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: LIST
43699: PUSH
43700: LD_VAR 0 12
43704: ARRAY
43705: ST_TO_ADDR
// list := list isect fac_list ;
43706: LD_ADDR_VAR 0 5
43710: PUSH
43711: LD_VAR 0 5
43715: PUSH
43716: LD_VAR 0 17
43720: ISECT
43721: ST_TO_ADDR
// if not list then
43722: LD_VAR 0 5
43726: NOT
43727: IFFALSE 43731
// exit ;
43729: GO 44535
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43731: LD_VAR 0 12
43735: PUSH
43736: LD_INT 3
43738: EQUAL
43739: PUSH
43740: LD_INT 49
43742: PUSH
43743: LD_VAR 0 5
43747: IN
43748: AND
43749: PUSH
43750: LD_INT 31
43752: PPUSH
43753: LD_VAR 0 16
43757: PPUSH
43758: CALL_OW 321
43762: PUSH
43763: LD_INT 2
43765: EQUAL
43766: AND
43767: IFFALSE 43827
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43769: LD_INT 22
43771: PUSH
43772: LD_VAR 0 16
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 35
43783: PUSH
43784: LD_INT 49
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 91
43793: PUSH
43794: LD_VAR 0 1
43798: PUSH
43799: LD_INT 10
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: LIST
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: PPUSH
43812: CALL_OW 69
43816: NOT
43817: IFFALSE 43827
// weapon := ru_time_lapser ;
43819: LD_ADDR_VAR 0 18
43823: PUSH
43824: LD_INT 49
43826: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43827: LD_VAR 0 12
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: IN
43842: PUSH
43843: LD_INT 11
43845: PUSH
43846: LD_VAR 0 5
43850: IN
43851: PUSH
43852: LD_INT 30
43854: PUSH
43855: LD_VAR 0 5
43859: IN
43860: OR
43861: AND
43862: PUSH
43863: LD_INT 6
43865: PPUSH
43866: LD_VAR 0 16
43870: PPUSH
43871: CALL_OW 321
43875: PUSH
43876: LD_INT 2
43878: EQUAL
43879: AND
43880: IFFALSE 44045
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43882: LD_INT 22
43884: PUSH
43885: LD_VAR 0 16
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 35
43899: PUSH
43900: LD_INT 11
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 35
43909: PUSH
43910: LD_INT 30
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 91
43924: PUSH
43925: LD_VAR 0 1
43929: PUSH
43930: LD_INT 18
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: PPUSH
43943: CALL_OW 69
43947: NOT
43948: PUSH
43949: LD_INT 22
43951: PUSH
43952: LD_VAR 0 16
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 30
43966: PUSH
43967: LD_INT 32
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 30
43976: PUSH
43977: LD_INT 33
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 91
43991: PUSH
43992: LD_VAR 0 1
43996: PUSH
43997: LD_INT 12
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: LIST
44009: PUSH
44010: EMPTY
44011: LIST
44012: PPUSH
44013: CALL_OW 69
44017: PUSH
44018: LD_INT 2
44020: GREATER
44021: AND
44022: IFFALSE 44045
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44024: LD_ADDR_VAR 0 18
44028: PUSH
44029: LD_INT 11
44031: PUSH
44032: LD_INT 30
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_VAR 0 12
44043: ARRAY
44044: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44045: LD_VAR 0 18
44049: NOT
44050: PUSH
44051: LD_INT 40
44053: PPUSH
44054: LD_VAR 0 16
44058: PPUSH
44059: CALL_OW 321
44063: PUSH
44064: LD_INT 2
44066: EQUAL
44067: AND
44068: PUSH
44069: LD_INT 7
44071: PUSH
44072: LD_VAR 0 5
44076: IN
44077: PUSH
44078: LD_INT 28
44080: PUSH
44081: LD_VAR 0 5
44085: IN
44086: OR
44087: PUSH
44088: LD_INT 45
44090: PUSH
44091: LD_VAR 0 5
44095: IN
44096: OR
44097: AND
44098: IFFALSE 44352
// begin hex := GetHexInfo ( x , y ) ;
44100: LD_ADDR_VAR 0 4
44104: PUSH
44105: LD_VAR 0 10
44109: PPUSH
44110: LD_VAR 0 11
44114: PPUSH
44115: CALL_OW 546
44119: ST_TO_ADDR
// if hex [ 1 ] then
44120: LD_VAR 0 4
44124: PUSH
44125: LD_INT 1
44127: ARRAY
44128: IFFALSE 44132
// exit ;
44130: GO 44535
// height := hex [ 2 ] ;
44132: LD_ADDR_VAR 0 15
44136: PUSH
44137: LD_VAR 0 4
44141: PUSH
44142: LD_INT 2
44144: ARRAY
44145: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44146: LD_ADDR_VAR 0 14
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: LD_INT 5
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: ST_TO_ADDR
// for i in tmp do
44169: LD_ADDR_VAR 0 8
44173: PUSH
44174: LD_VAR 0 14
44178: PUSH
44179: FOR_IN
44180: IFFALSE 44350
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44182: LD_ADDR_VAR 0 9
44186: PUSH
44187: LD_VAR 0 10
44191: PPUSH
44192: LD_VAR 0 8
44196: PPUSH
44197: LD_INT 5
44199: PPUSH
44200: CALL_OW 272
44204: PUSH
44205: LD_VAR 0 11
44209: PPUSH
44210: LD_VAR 0 8
44214: PPUSH
44215: LD_INT 5
44217: PPUSH
44218: CALL_OW 273
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44227: LD_VAR 0 9
44231: PUSH
44232: LD_INT 1
44234: ARRAY
44235: PPUSH
44236: LD_VAR 0 9
44240: PUSH
44241: LD_INT 2
44243: ARRAY
44244: PPUSH
44245: CALL_OW 488
44249: IFFALSE 44348
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44251: LD_ADDR_VAR 0 4
44255: PUSH
44256: LD_VAR 0 9
44260: PUSH
44261: LD_INT 1
44263: ARRAY
44264: PPUSH
44265: LD_VAR 0 9
44269: PUSH
44270: LD_INT 2
44272: ARRAY
44273: PPUSH
44274: CALL_OW 546
44278: ST_TO_ADDR
// if hex [ 1 ] then
44279: LD_VAR 0 4
44283: PUSH
44284: LD_INT 1
44286: ARRAY
44287: IFFALSE 44291
// continue ;
44289: GO 44179
// h := hex [ 2 ] ;
44291: LD_ADDR_VAR 0 13
44295: PUSH
44296: LD_VAR 0 4
44300: PUSH
44301: LD_INT 2
44303: ARRAY
44304: ST_TO_ADDR
// if h + 7 < height then
44305: LD_VAR 0 13
44309: PUSH
44310: LD_INT 7
44312: PLUS
44313: PUSH
44314: LD_VAR 0 15
44318: LESS
44319: IFFALSE 44348
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44321: LD_ADDR_VAR 0 18
44325: PUSH
44326: LD_INT 7
44328: PUSH
44329: LD_INT 28
44331: PUSH
44332: LD_INT 45
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: LIST
44339: PUSH
44340: LD_VAR 0 12
44344: ARRAY
44345: ST_TO_ADDR
// break ;
44346: GO 44350
// end ; end ; end ;
44348: GO 44179
44350: POP
44351: POP
// end ; if not weapon then
44352: LD_VAR 0 18
44356: NOT
44357: IFFALSE 44417
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44359: LD_ADDR_VAR 0 5
44363: PUSH
44364: LD_VAR 0 5
44368: PUSH
44369: LD_INT 11
44371: PUSH
44372: LD_INT 30
44374: PUSH
44375: LD_INT 49
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: LIST
44382: DIFF
44383: ST_TO_ADDR
// if not list then
44384: LD_VAR 0 5
44388: NOT
44389: IFFALSE 44393
// exit ;
44391: GO 44535
// weapon := list [ rand ( 1 , list ) ] ;
44393: LD_ADDR_VAR 0 18
44397: PUSH
44398: LD_VAR 0 5
44402: PUSH
44403: LD_INT 1
44405: PPUSH
44406: LD_VAR 0 5
44410: PPUSH
44411: CALL_OW 12
44415: ARRAY
44416: ST_TO_ADDR
// end ; if weapon then
44417: LD_VAR 0 18
44421: IFFALSE 44535
// begin tmp := CostOfWeapon ( weapon ) ;
44423: LD_ADDR_VAR 0 14
44427: PUSH
44428: LD_VAR 0 18
44432: PPUSH
44433: CALL_OW 451
44437: ST_TO_ADDR
// j := GetBase ( tower ) ;
44438: LD_ADDR_VAR 0 9
44442: PUSH
44443: LD_VAR 0 1
44447: PPUSH
44448: CALL_OW 274
44452: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44453: LD_VAR 0 9
44457: PPUSH
44458: LD_INT 1
44460: PPUSH
44461: CALL_OW 275
44465: PUSH
44466: LD_VAR 0 14
44470: PUSH
44471: LD_INT 1
44473: ARRAY
44474: GREATEREQUAL
44475: PUSH
44476: LD_VAR 0 9
44480: PPUSH
44481: LD_INT 2
44483: PPUSH
44484: CALL_OW 275
44488: PUSH
44489: LD_VAR 0 14
44493: PUSH
44494: LD_INT 2
44496: ARRAY
44497: GREATEREQUAL
44498: AND
44499: PUSH
44500: LD_VAR 0 9
44504: PPUSH
44505: LD_INT 3
44507: PPUSH
44508: CALL_OW 275
44512: PUSH
44513: LD_VAR 0 14
44517: PUSH
44518: LD_INT 3
44520: ARRAY
44521: GREATEREQUAL
44522: AND
44523: IFFALSE 44535
// result := weapon ;
44525: LD_ADDR_VAR 0 3
44529: PUSH
44530: LD_VAR 0 18
44534: ST_TO_ADDR
// end ; end ;
44535: LD_VAR 0 3
44539: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44540: LD_INT 0
44542: PPUSH
44543: PPUSH
// result := true ;
44544: LD_ADDR_VAR 0 3
44548: PUSH
44549: LD_INT 1
44551: ST_TO_ADDR
// if array1 = array2 then
44552: LD_VAR 0 1
44556: PUSH
44557: LD_VAR 0 2
44561: EQUAL
44562: IFFALSE 44622
// begin for i = 1 to array1 do
44564: LD_ADDR_VAR 0 4
44568: PUSH
44569: DOUBLE
44570: LD_INT 1
44572: DEC
44573: ST_TO_ADDR
44574: LD_VAR 0 1
44578: PUSH
44579: FOR_TO
44580: IFFALSE 44618
// if array1 [ i ] <> array2 [ i ] then
44582: LD_VAR 0 1
44586: PUSH
44587: LD_VAR 0 4
44591: ARRAY
44592: PUSH
44593: LD_VAR 0 2
44597: PUSH
44598: LD_VAR 0 4
44602: ARRAY
44603: NONEQUAL
44604: IFFALSE 44616
// begin result := false ;
44606: LD_ADDR_VAR 0 3
44610: PUSH
44611: LD_INT 0
44613: ST_TO_ADDR
// break ;
44614: GO 44618
// end ;
44616: GO 44579
44618: POP
44619: POP
// end else
44620: GO 44630
// result := false ;
44622: LD_ADDR_VAR 0 3
44626: PUSH
44627: LD_INT 0
44629: ST_TO_ADDR
// end ;
44630: LD_VAR 0 3
44634: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44635: LD_INT 0
44637: PPUSH
44638: PPUSH
// if not array1 or not array2 then
44639: LD_VAR 0 1
44643: NOT
44644: PUSH
44645: LD_VAR 0 2
44649: NOT
44650: OR
44651: IFFALSE 44655
// exit ;
44653: GO 44719
// result := true ;
44655: LD_ADDR_VAR 0 3
44659: PUSH
44660: LD_INT 1
44662: ST_TO_ADDR
// for i = 1 to array1 do
44663: LD_ADDR_VAR 0 4
44667: PUSH
44668: DOUBLE
44669: LD_INT 1
44671: DEC
44672: ST_TO_ADDR
44673: LD_VAR 0 1
44677: PUSH
44678: FOR_TO
44679: IFFALSE 44717
// if array1 [ i ] <> array2 [ i ] then
44681: LD_VAR 0 1
44685: PUSH
44686: LD_VAR 0 4
44690: ARRAY
44691: PUSH
44692: LD_VAR 0 2
44696: PUSH
44697: LD_VAR 0 4
44701: ARRAY
44702: NONEQUAL
44703: IFFALSE 44715
// begin result := false ;
44705: LD_ADDR_VAR 0 3
44709: PUSH
44710: LD_INT 0
44712: ST_TO_ADDR
// break ;
44713: GO 44717
// end ;
44715: GO 44678
44717: POP
44718: POP
// end ;
44719: LD_VAR 0 3
44723: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44724: LD_INT 0
44726: PPUSH
44727: PPUSH
44728: PPUSH
// pom := GetBase ( fac ) ;
44729: LD_ADDR_VAR 0 5
44733: PUSH
44734: LD_VAR 0 1
44738: PPUSH
44739: CALL_OW 274
44743: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44744: LD_ADDR_VAR 0 4
44748: PUSH
44749: LD_VAR 0 2
44753: PUSH
44754: LD_INT 1
44756: ARRAY
44757: PPUSH
44758: LD_VAR 0 2
44762: PUSH
44763: LD_INT 2
44765: ARRAY
44766: PPUSH
44767: LD_VAR 0 2
44771: PUSH
44772: LD_INT 3
44774: ARRAY
44775: PPUSH
44776: LD_VAR 0 2
44780: PUSH
44781: LD_INT 4
44783: ARRAY
44784: PPUSH
44785: CALL_OW 449
44789: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44790: LD_ADDR_VAR 0 3
44794: PUSH
44795: LD_VAR 0 5
44799: PPUSH
44800: LD_INT 1
44802: PPUSH
44803: CALL_OW 275
44807: PUSH
44808: LD_VAR 0 4
44812: PUSH
44813: LD_INT 1
44815: ARRAY
44816: GREATEREQUAL
44817: PUSH
44818: LD_VAR 0 5
44822: PPUSH
44823: LD_INT 2
44825: PPUSH
44826: CALL_OW 275
44830: PUSH
44831: LD_VAR 0 4
44835: PUSH
44836: LD_INT 2
44838: ARRAY
44839: GREATEREQUAL
44840: AND
44841: PUSH
44842: LD_VAR 0 5
44846: PPUSH
44847: LD_INT 3
44849: PPUSH
44850: CALL_OW 275
44854: PUSH
44855: LD_VAR 0 4
44859: PUSH
44860: LD_INT 3
44862: ARRAY
44863: GREATEREQUAL
44864: AND
44865: ST_TO_ADDR
// end ;
44866: LD_VAR 0 3
44870: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44871: LD_INT 0
44873: PPUSH
44874: PPUSH
44875: PPUSH
44876: PPUSH
// pom := GetBase ( building ) ;
44877: LD_ADDR_VAR 0 3
44881: PUSH
44882: LD_VAR 0 1
44886: PPUSH
44887: CALL_OW 274
44891: ST_TO_ADDR
// if not pom then
44892: LD_VAR 0 3
44896: NOT
44897: IFFALSE 44901
// exit ;
44899: GO 45071
// btype := GetBType ( building ) ;
44901: LD_ADDR_VAR 0 5
44905: PUSH
44906: LD_VAR 0 1
44910: PPUSH
44911: CALL_OW 266
44915: ST_TO_ADDR
// if btype = b_armoury then
44916: LD_VAR 0 5
44920: PUSH
44921: LD_INT 4
44923: EQUAL
44924: IFFALSE 44934
// btype := b_barracks ;
44926: LD_ADDR_VAR 0 5
44930: PUSH
44931: LD_INT 5
44933: ST_TO_ADDR
// if btype = b_depot then
44934: LD_VAR 0 5
44938: PUSH
44939: LD_INT 0
44941: EQUAL
44942: IFFALSE 44952
// btype := b_warehouse ;
44944: LD_ADDR_VAR 0 5
44948: PUSH
44949: LD_INT 1
44951: ST_TO_ADDR
// if btype = b_workshop then
44952: LD_VAR 0 5
44956: PUSH
44957: LD_INT 2
44959: EQUAL
44960: IFFALSE 44970
// btype := b_factory ;
44962: LD_ADDR_VAR 0 5
44966: PUSH
44967: LD_INT 3
44969: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44970: LD_ADDR_VAR 0 4
44974: PUSH
44975: LD_VAR 0 5
44979: PPUSH
44980: LD_VAR 0 1
44984: PPUSH
44985: CALL_OW 248
44989: PPUSH
44990: CALL_OW 450
44994: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44995: LD_ADDR_VAR 0 2
44999: PUSH
45000: LD_VAR 0 3
45004: PPUSH
45005: LD_INT 1
45007: PPUSH
45008: CALL_OW 275
45012: PUSH
45013: LD_VAR 0 4
45017: PUSH
45018: LD_INT 1
45020: ARRAY
45021: GREATEREQUAL
45022: PUSH
45023: LD_VAR 0 3
45027: PPUSH
45028: LD_INT 2
45030: PPUSH
45031: CALL_OW 275
45035: PUSH
45036: LD_VAR 0 4
45040: PUSH
45041: LD_INT 2
45043: ARRAY
45044: GREATEREQUAL
45045: AND
45046: PUSH
45047: LD_VAR 0 3
45051: PPUSH
45052: LD_INT 3
45054: PPUSH
45055: CALL_OW 275
45059: PUSH
45060: LD_VAR 0 4
45064: PUSH
45065: LD_INT 3
45067: ARRAY
45068: GREATEREQUAL
45069: AND
45070: ST_TO_ADDR
// end ;
45071: LD_VAR 0 2
45075: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45076: LD_INT 0
45078: PPUSH
45079: PPUSH
45080: PPUSH
// pom := GetBase ( building ) ;
45081: LD_ADDR_VAR 0 4
45085: PUSH
45086: LD_VAR 0 1
45090: PPUSH
45091: CALL_OW 274
45095: ST_TO_ADDR
// if not pom then
45096: LD_VAR 0 4
45100: NOT
45101: IFFALSE 45105
// exit ;
45103: GO 45206
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45105: LD_ADDR_VAR 0 5
45109: PUSH
45110: LD_VAR 0 2
45114: PPUSH
45115: LD_VAR 0 1
45119: PPUSH
45120: CALL_OW 248
45124: PPUSH
45125: CALL_OW 450
45129: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45130: LD_ADDR_VAR 0 3
45134: PUSH
45135: LD_VAR 0 4
45139: PPUSH
45140: LD_INT 1
45142: PPUSH
45143: CALL_OW 275
45147: PUSH
45148: LD_VAR 0 5
45152: PUSH
45153: LD_INT 1
45155: ARRAY
45156: GREATEREQUAL
45157: PUSH
45158: LD_VAR 0 4
45162: PPUSH
45163: LD_INT 2
45165: PPUSH
45166: CALL_OW 275
45170: PUSH
45171: LD_VAR 0 5
45175: PUSH
45176: LD_INT 2
45178: ARRAY
45179: GREATEREQUAL
45180: AND
45181: PUSH
45182: LD_VAR 0 4
45186: PPUSH
45187: LD_INT 3
45189: PPUSH
45190: CALL_OW 275
45194: PUSH
45195: LD_VAR 0 5
45199: PUSH
45200: LD_INT 3
45202: ARRAY
45203: GREATEREQUAL
45204: AND
45205: ST_TO_ADDR
// end ;
45206: LD_VAR 0 3
45210: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45211: LD_INT 0
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
45220: PPUSH
45221: PPUSH
45222: PPUSH
45223: PPUSH
// result := false ;
45224: LD_ADDR_VAR 0 8
45228: PUSH
45229: LD_INT 0
45231: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45232: LD_VAR 0 5
45236: NOT
45237: PUSH
45238: LD_VAR 0 1
45242: NOT
45243: OR
45244: PUSH
45245: LD_VAR 0 2
45249: NOT
45250: OR
45251: PUSH
45252: LD_VAR 0 3
45256: NOT
45257: OR
45258: IFFALSE 45262
// exit ;
45260: GO 46076
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45262: LD_ADDR_VAR 0 14
45266: PUSH
45267: LD_VAR 0 1
45271: PPUSH
45272: LD_VAR 0 2
45276: PPUSH
45277: LD_VAR 0 3
45281: PPUSH
45282: LD_VAR 0 4
45286: PPUSH
45287: LD_VAR 0 5
45291: PUSH
45292: LD_INT 1
45294: ARRAY
45295: PPUSH
45296: CALL_OW 248
45300: PPUSH
45301: LD_INT 0
45303: PPUSH
45304: CALL 47329 0 6
45308: ST_TO_ADDR
// if not hexes then
45309: LD_VAR 0 14
45313: NOT
45314: IFFALSE 45318
// exit ;
45316: GO 46076
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45318: LD_ADDR_VAR 0 17
45322: PUSH
45323: LD_VAR 0 5
45327: PPUSH
45328: LD_INT 22
45330: PUSH
45331: LD_VAR 0 13
45335: PPUSH
45336: CALL_OW 255
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 30
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 30
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: LIST
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PPUSH
45377: CALL_OW 72
45381: ST_TO_ADDR
// for i = 1 to hexes do
45382: LD_ADDR_VAR 0 9
45386: PUSH
45387: DOUBLE
45388: LD_INT 1
45390: DEC
45391: ST_TO_ADDR
45392: LD_VAR 0 14
45396: PUSH
45397: FOR_TO
45398: IFFALSE 46074
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45400: LD_ADDR_VAR 0 13
45404: PUSH
45405: LD_VAR 0 14
45409: PUSH
45410: LD_VAR 0 9
45414: ARRAY
45415: PUSH
45416: LD_INT 1
45418: ARRAY
45419: PPUSH
45420: LD_VAR 0 14
45424: PUSH
45425: LD_VAR 0 9
45429: ARRAY
45430: PUSH
45431: LD_INT 2
45433: ARRAY
45434: PPUSH
45435: CALL_OW 428
45439: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45440: LD_VAR 0 14
45444: PUSH
45445: LD_VAR 0 9
45449: ARRAY
45450: PUSH
45451: LD_INT 1
45453: ARRAY
45454: PPUSH
45455: LD_VAR 0 14
45459: PUSH
45460: LD_VAR 0 9
45464: ARRAY
45465: PUSH
45466: LD_INT 2
45468: ARRAY
45469: PPUSH
45470: CALL_OW 351
45474: PUSH
45475: LD_VAR 0 14
45479: PUSH
45480: LD_VAR 0 9
45484: ARRAY
45485: PUSH
45486: LD_INT 1
45488: ARRAY
45489: PPUSH
45490: LD_VAR 0 14
45494: PUSH
45495: LD_VAR 0 9
45499: ARRAY
45500: PUSH
45501: LD_INT 2
45503: ARRAY
45504: PPUSH
45505: CALL_OW 488
45509: NOT
45510: OR
45511: PUSH
45512: LD_VAR 0 13
45516: PPUSH
45517: CALL_OW 247
45521: PUSH
45522: LD_INT 3
45524: EQUAL
45525: OR
45526: IFFALSE 45532
// exit ;
45528: POP
45529: POP
45530: GO 46076
// if not tmp then
45532: LD_VAR 0 13
45536: NOT
45537: IFFALSE 45541
// continue ;
45539: GO 45397
// result := true ;
45541: LD_ADDR_VAR 0 8
45545: PUSH
45546: LD_INT 1
45548: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45549: LD_VAR 0 6
45553: PUSH
45554: LD_VAR 0 13
45558: PPUSH
45559: CALL_OW 247
45563: PUSH
45564: LD_INT 2
45566: EQUAL
45567: AND
45568: PUSH
45569: LD_VAR 0 13
45573: PPUSH
45574: CALL_OW 263
45578: PUSH
45579: LD_INT 1
45581: EQUAL
45582: AND
45583: IFFALSE 45747
// begin if IsDrivenBy ( tmp ) then
45585: LD_VAR 0 13
45589: PPUSH
45590: CALL_OW 311
45594: IFFALSE 45598
// continue ;
45596: GO 45397
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45598: LD_VAR 0 6
45602: PPUSH
45603: LD_INT 3
45605: PUSH
45606: LD_INT 60
45608: PUSH
45609: EMPTY
45610: LIST
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 3
45618: PUSH
45619: LD_INT 55
45621: PUSH
45622: EMPTY
45623: LIST
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PPUSH
45633: CALL_OW 72
45637: IFFALSE 45745
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45639: LD_ADDR_VAR 0 18
45643: PUSH
45644: LD_VAR 0 6
45648: PPUSH
45649: LD_INT 3
45651: PUSH
45652: LD_INT 60
45654: PUSH
45655: EMPTY
45656: LIST
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 3
45664: PUSH
45665: LD_INT 55
45667: PUSH
45668: EMPTY
45669: LIST
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PPUSH
45679: CALL_OW 72
45683: PUSH
45684: LD_INT 1
45686: ARRAY
45687: ST_TO_ADDR
// if IsInUnit ( driver ) then
45688: LD_VAR 0 18
45692: PPUSH
45693: CALL_OW 310
45697: IFFALSE 45708
// ComExit ( driver ) ;
45699: LD_VAR 0 18
45703: PPUSH
45704: CALL 71110 0 1
// AddComEnterUnit ( driver , tmp ) ;
45708: LD_VAR 0 18
45712: PPUSH
45713: LD_VAR 0 13
45717: PPUSH
45718: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45722: LD_VAR 0 18
45726: PPUSH
45727: LD_VAR 0 7
45731: PPUSH
45732: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45736: LD_VAR 0 18
45740: PPUSH
45741: CALL_OW 181
// end ; continue ;
45745: GO 45397
// end ; if not cleaners or not tmp in cleaners then
45747: LD_VAR 0 6
45751: NOT
45752: PUSH
45753: LD_VAR 0 13
45757: PUSH
45758: LD_VAR 0 6
45762: IN
45763: NOT
45764: OR
45765: IFFALSE 46072
// begin if dep then
45767: LD_VAR 0 17
45771: IFFALSE 45907
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45773: LD_ADDR_VAR 0 16
45777: PUSH
45778: LD_VAR 0 17
45782: PUSH
45783: LD_INT 1
45785: ARRAY
45786: PPUSH
45787: CALL_OW 250
45791: PPUSH
45792: LD_VAR 0 17
45796: PUSH
45797: LD_INT 1
45799: ARRAY
45800: PPUSH
45801: CALL_OW 254
45805: PPUSH
45806: LD_INT 5
45808: PPUSH
45809: CALL_OW 272
45813: PUSH
45814: LD_VAR 0 17
45818: PUSH
45819: LD_INT 1
45821: ARRAY
45822: PPUSH
45823: CALL_OW 251
45827: PPUSH
45828: LD_VAR 0 17
45832: PUSH
45833: LD_INT 1
45835: ARRAY
45836: PPUSH
45837: CALL_OW 254
45841: PPUSH
45842: LD_INT 5
45844: PPUSH
45845: CALL_OW 273
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45854: LD_VAR 0 16
45858: PUSH
45859: LD_INT 1
45861: ARRAY
45862: PPUSH
45863: LD_VAR 0 16
45867: PUSH
45868: LD_INT 2
45870: ARRAY
45871: PPUSH
45872: CALL_OW 488
45876: IFFALSE 45907
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45878: LD_VAR 0 13
45882: PPUSH
45883: LD_VAR 0 16
45887: PUSH
45888: LD_INT 1
45890: ARRAY
45891: PPUSH
45892: LD_VAR 0 16
45896: PUSH
45897: LD_INT 2
45899: ARRAY
45900: PPUSH
45901: CALL_OW 111
// continue ;
45905: GO 45397
// end ; end ; r := GetDir ( tmp ) ;
45907: LD_ADDR_VAR 0 15
45911: PUSH
45912: LD_VAR 0 13
45916: PPUSH
45917: CALL_OW 254
45921: ST_TO_ADDR
// if r = 5 then
45922: LD_VAR 0 15
45926: PUSH
45927: LD_INT 5
45929: EQUAL
45930: IFFALSE 45940
// r := 0 ;
45932: LD_ADDR_VAR 0 15
45936: PUSH
45937: LD_INT 0
45939: ST_TO_ADDR
// for j = r to 5 do
45940: LD_ADDR_VAR 0 10
45944: PUSH
45945: DOUBLE
45946: LD_VAR 0 15
45950: DEC
45951: ST_TO_ADDR
45952: LD_INT 5
45954: PUSH
45955: FOR_TO
45956: IFFALSE 46070
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45958: LD_ADDR_VAR 0 11
45962: PUSH
45963: LD_VAR 0 13
45967: PPUSH
45968: CALL_OW 250
45972: PPUSH
45973: LD_VAR 0 10
45977: PPUSH
45978: LD_INT 2
45980: PPUSH
45981: CALL_OW 272
45985: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45986: LD_ADDR_VAR 0 12
45990: PUSH
45991: LD_VAR 0 13
45995: PPUSH
45996: CALL_OW 251
46000: PPUSH
46001: LD_VAR 0 10
46005: PPUSH
46006: LD_INT 2
46008: PPUSH
46009: CALL_OW 273
46013: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46014: LD_VAR 0 11
46018: PPUSH
46019: LD_VAR 0 12
46023: PPUSH
46024: CALL_OW 488
46028: PUSH
46029: LD_VAR 0 11
46033: PPUSH
46034: LD_VAR 0 12
46038: PPUSH
46039: CALL_OW 428
46043: NOT
46044: AND
46045: IFFALSE 46068
// begin ComMoveXY ( tmp , _x , _y ) ;
46047: LD_VAR 0 13
46051: PPUSH
46052: LD_VAR 0 11
46056: PPUSH
46057: LD_VAR 0 12
46061: PPUSH
46062: CALL_OW 111
// break ;
46066: GO 46070
// end ; end ;
46068: GO 45955
46070: POP
46071: POP
// end ; end ;
46072: GO 45397
46074: POP
46075: POP
// end ;
46076: LD_VAR 0 8
46080: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46081: LD_INT 0
46083: PPUSH
// result := true ;
46084: LD_ADDR_VAR 0 3
46088: PUSH
46089: LD_INT 1
46091: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46092: LD_VAR 0 2
46096: PUSH
46097: LD_INT 24
46099: DOUBLE
46100: EQUAL
46101: IFTRUE 46111
46103: LD_INT 33
46105: DOUBLE
46106: EQUAL
46107: IFTRUE 46111
46109: GO 46136
46111: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46112: LD_ADDR_VAR 0 3
46116: PUSH
46117: LD_INT 32
46119: PPUSH
46120: LD_VAR 0 1
46124: PPUSH
46125: CALL_OW 321
46129: PUSH
46130: LD_INT 2
46132: EQUAL
46133: ST_TO_ADDR
46134: GO 46452
46136: LD_INT 20
46138: DOUBLE
46139: EQUAL
46140: IFTRUE 46144
46142: GO 46169
46144: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46145: LD_ADDR_VAR 0 3
46149: PUSH
46150: LD_INT 6
46152: PPUSH
46153: LD_VAR 0 1
46157: PPUSH
46158: CALL_OW 321
46162: PUSH
46163: LD_INT 2
46165: EQUAL
46166: ST_TO_ADDR
46167: GO 46452
46169: LD_INT 22
46171: DOUBLE
46172: EQUAL
46173: IFTRUE 46183
46175: LD_INT 36
46177: DOUBLE
46178: EQUAL
46179: IFTRUE 46183
46181: GO 46208
46183: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46184: LD_ADDR_VAR 0 3
46188: PUSH
46189: LD_INT 15
46191: PPUSH
46192: LD_VAR 0 1
46196: PPUSH
46197: CALL_OW 321
46201: PUSH
46202: LD_INT 2
46204: EQUAL
46205: ST_TO_ADDR
46206: GO 46452
46208: LD_INT 30
46210: DOUBLE
46211: EQUAL
46212: IFTRUE 46216
46214: GO 46241
46216: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46217: LD_ADDR_VAR 0 3
46221: PUSH
46222: LD_INT 20
46224: PPUSH
46225: LD_VAR 0 1
46229: PPUSH
46230: CALL_OW 321
46234: PUSH
46235: LD_INT 2
46237: EQUAL
46238: ST_TO_ADDR
46239: GO 46452
46241: LD_INT 28
46243: DOUBLE
46244: EQUAL
46245: IFTRUE 46255
46247: LD_INT 21
46249: DOUBLE
46250: EQUAL
46251: IFTRUE 46255
46253: GO 46280
46255: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46256: LD_ADDR_VAR 0 3
46260: PUSH
46261: LD_INT 21
46263: PPUSH
46264: LD_VAR 0 1
46268: PPUSH
46269: CALL_OW 321
46273: PUSH
46274: LD_INT 2
46276: EQUAL
46277: ST_TO_ADDR
46278: GO 46452
46280: LD_INT 16
46282: DOUBLE
46283: EQUAL
46284: IFTRUE 46288
46286: GO 46313
46288: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46289: LD_ADDR_VAR 0 3
46293: PUSH
46294: LD_INT 84
46296: PPUSH
46297: LD_VAR 0 1
46301: PPUSH
46302: CALL_OW 321
46306: PUSH
46307: LD_INT 2
46309: EQUAL
46310: ST_TO_ADDR
46311: GO 46452
46313: LD_INT 19
46315: DOUBLE
46316: EQUAL
46317: IFTRUE 46327
46319: LD_INT 23
46321: DOUBLE
46322: EQUAL
46323: IFTRUE 46327
46325: GO 46352
46327: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46328: LD_ADDR_VAR 0 3
46332: PUSH
46333: LD_INT 83
46335: PPUSH
46336: LD_VAR 0 1
46340: PPUSH
46341: CALL_OW 321
46345: PUSH
46346: LD_INT 2
46348: EQUAL
46349: ST_TO_ADDR
46350: GO 46452
46352: LD_INT 17
46354: DOUBLE
46355: EQUAL
46356: IFTRUE 46360
46358: GO 46385
46360: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46361: LD_ADDR_VAR 0 3
46365: PUSH
46366: LD_INT 39
46368: PPUSH
46369: LD_VAR 0 1
46373: PPUSH
46374: CALL_OW 321
46378: PUSH
46379: LD_INT 2
46381: EQUAL
46382: ST_TO_ADDR
46383: GO 46452
46385: LD_INT 18
46387: DOUBLE
46388: EQUAL
46389: IFTRUE 46393
46391: GO 46418
46393: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46394: LD_ADDR_VAR 0 3
46398: PUSH
46399: LD_INT 40
46401: PPUSH
46402: LD_VAR 0 1
46406: PPUSH
46407: CALL_OW 321
46411: PUSH
46412: LD_INT 2
46414: EQUAL
46415: ST_TO_ADDR
46416: GO 46452
46418: LD_INT 27
46420: DOUBLE
46421: EQUAL
46422: IFTRUE 46426
46424: GO 46451
46426: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46427: LD_ADDR_VAR 0 3
46431: PUSH
46432: LD_INT 35
46434: PPUSH
46435: LD_VAR 0 1
46439: PPUSH
46440: CALL_OW 321
46444: PUSH
46445: LD_INT 2
46447: EQUAL
46448: ST_TO_ADDR
46449: GO 46452
46451: POP
// end ;
46452: LD_VAR 0 3
46456: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46457: LD_INT 0
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
46465: PPUSH
46466: PPUSH
46467: PPUSH
46468: PPUSH
46469: PPUSH
// result := false ;
46470: LD_ADDR_VAR 0 6
46474: PUSH
46475: LD_INT 0
46477: ST_TO_ADDR
// if btype = b_depot then
46478: LD_VAR 0 2
46482: PUSH
46483: LD_INT 0
46485: EQUAL
46486: IFFALSE 46498
// begin result := true ;
46488: LD_ADDR_VAR 0 6
46492: PUSH
46493: LD_INT 1
46495: ST_TO_ADDR
// exit ;
46496: GO 47324
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46498: LD_VAR 0 1
46502: NOT
46503: PUSH
46504: LD_VAR 0 1
46508: PPUSH
46509: CALL_OW 266
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: IN
46524: NOT
46525: OR
46526: PUSH
46527: LD_VAR 0 2
46531: NOT
46532: OR
46533: PUSH
46534: LD_VAR 0 5
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: LD_INT 4
46553: PUSH
46554: LD_INT 5
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: IN
46565: NOT
46566: OR
46567: PUSH
46568: LD_VAR 0 3
46572: PPUSH
46573: LD_VAR 0 4
46577: PPUSH
46578: CALL_OW 488
46582: NOT
46583: OR
46584: IFFALSE 46588
// exit ;
46586: GO 47324
// side := GetSide ( depot ) ;
46588: LD_ADDR_VAR 0 9
46592: PUSH
46593: LD_VAR 0 1
46597: PPUSH
46598: CALL_OW 255
46602: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46603: LD_VAR 0 9
46607: PPUSH
46608: LD_VAR 0 2
46612: PPUSH
46613: CALL 46081 0 2
46617: NOT
46618: IFFALSE 46622
// exit ;
46620: GO 47324
// pom := GetBase ( depot ) ;
46622: LD_ADDR_VAR 0 10
46626: PUSH
46627: LD_VAR 0 1
46631: PPUSH
46632: CALL_OW 274
46636: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46637: LD_ADDR_VAR 0 11
46641: PUSH
46642: LD_VAR 0 2
46646: PPUSH
46647: LD_VAR 0 1
46651: PPUSH
46652: CALL_OW 248
46656: PPUSH
46657: CALL_OW 450
46661: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46662: LD_VAR 0 10
46666: PPUSH
46667: LD_INT 1
46669: PPUSH
46670: CALL_OW 275
46674: PUSH
46675: LD_VAR 0 11
46679: PUSH
46680: LD_INT 1
46682: ARRAY
46683: GREATEREQUAL
46684: PUSH
46685: LD_VAR 0 10
46689: PPUSH
46690: LD_INT 2
46692: PPUSH
46693: CALL_OW 275
46697: PUSH
46698: LD_VAR 0 11
46702: PUSH
46703: LD_INT 2
46705: ARRAY
46706: GREATEREQUAL
46707: AND
46708: PUSH
46709: LD_VAR 0 10
46713: PPUSH
46714: LD_INT 3
46716: PPUSH
46717: CALL_OW 275
46721: PUSH
46722: LD_VAR 0 11
46726: PUSH
46727: LD_INT 3
46729: ARRAY
46730: GREATEREQUAL
46731: AND
46732: NOT
46733: IFFALSE 46737
// exit ;
46735: GO 47324
// if GetBType ( depot ) = b_depot then
46737: LD_VAR 0 1
46741: PPUSH
46742: CALL_OW 266
46746: PUSH
46747: LD_INT 0
46749: EQUAL
46750: IFFALSE 46762
// dist := 28 else
46752: LD_ADDR_VAR 0 14
46756: PUSH
46757: LD_INT 28
46759: ST_TO_ADDR
46760: GO 46770
// dist := 36 ;
46762: LD_ADDR_VAR 0 14
46766: PUSH
46767: LD_INT 36
46769: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46770: LD_VAR 0 1
46774: PPUSH
46775: LD_VAR 0 3
46779: PPUSH
46780: LD_VAR 0 4
46784: PPUSH
46785: CALL_OW 297
46789: PUSH
46790: LD_VAR 0 14
46794: GREATER
46795: IFFALSE 46799
// exit ;
46797: GO 47324
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46799: LD_ADDR_VAR 0 12
46803: PUSH
46804: LD_VAR 0 2
46808: PPUSH
46809: LD_VAR 0 3
46813: PPUSH
46814: LD_VAR 0 4
46818: PPUSH
46819: LD_VAR 0 5
46823: PPUSH
46824: LD_VAR 0 1
46828: PPUSH
46829: CALL_OW 248
46833: PPUSH
46834: LD_INT 0
46836: PPUSH
46837: CALL 47329 0 6
46841: ST_TO_ADDR
// if not hexes then
46842: LD_VAR 0 12
46846: NOT
46847: IFFALSE 46851
// exit ;
46849: GO 47324
// hex := GetHexInfo ( x , y ) ;
46851: LD_ADDR_VAR 0 15
46855: PUSH
46856: LD_VAR 0 3
46860: PPUSH
46861: LD_VAR 0 4
46865: PPUSH
46866: CALL_OW 546
46870: ST_TO_ADDR
// if hex [ 1 ] then
46871: LD_VAR 0 15
46875: PUSH
46876: LD_INT 1
46878: ARRAY
46879: IFFALSE 46883
// exit ;
46881: GO 47324
// height := hex [ 2 ] ;
46883: LD_ADDR_VAR 0 13
46887: PUSH
46888: LD_VAR 0 15
46892: PUSH
46893: LD_INT 2
46895: ARRAY
46896: ST_TO_ADDR
// for i = 1 to hexes do
46897: LD_ADDR_VAR 0 7
46901: PUSH
46902: DOUBLE
46903: LD_INT 1
46905: DEC
46906: ST_TO_ADDR
46907: LD_VAR 0 12
46911: PUSH
46912: FOR_TO
46913: IFFALSE 47243
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46915: LD_VAR 0 12
46919: PUSH
46920: LD_VAR 0 7
46924: ARRAY
46925: PUSH
46926: LD_INT 1
46928: ARRAY
46929: PPUSH
46930: LD_VAR 0 12
46934: PUSH
46935: LD_VAR 0 7
46939: ARRAY
46940: PUSH
46941: LD_INT 2
46943: ARRAY
46944: PPUSH
46945: CALL_OW 488
46949: NOT
46950: PUSH
46951: LD_VAR 0 12
46955: PUSH
46956: LD_VAR 0 7
46960: ARRAY
46961: PUSH
46962: LD_INT 1
46964: ARRAY
46965: PPUSH
46966: LD_VAR 0 12
46970: PUSH
46971: LD_VAR 0 7
46975: ARRAY
46976: PUSH
46977: LD_INT 2
46979: ARRAY
46980: PPUSH
46981: CALL_OW 428
46985: PUSH
46986: LD_INT 0
46988: GREATER
46989: OR
46990: PUSH
46991: LD_VAR 0 12
46995: PUSH
46996: LD_VAR 0 7
47000: ARRAY
47001: PUSH
47002: LD_INT 1
47004: ARRAY
47005: PPUSH
47006: LD_VAR 0 12
47010: PUSH
47011: LD_VAR 0 7
47015: ARRAY
47016: PUSH
47017: LD_INT 2
47019: ARRAY
47020: PPUSH
47021: CALL_OW 351
47025: OR
47026: IFFALSE 47032
// exit ;
47028: POP
47029: POP
47030: GO 47324
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47032: LD_ADDR_VAR 0 8
47036: PUSH
47037: LD_VAR 0 12
47041: PUSH
47042: LD_VAR 0 7
47046: ARRAY
47047: PUSH
47048: LD_INT 1
47050: ARRAY
47051: PPUSH
47052: LD_VAR 0 12
47056: PUSH
47057: LD_VAR 0 7
47061: ARRAY
47062: PUSH
47063: LD_INT 2
47065: ARRAY
47066: PPUSH
47067: CALL_OW 546
47071: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47072: LD_VAR 0 8
47076: PUSH
47077: LD_INT 1
47079: ARRAY
47080: PUSH
47081: LD_VAR 0 8
47085: PUSH
47086: LD_INT 2
47088: ARRAY
47089: PUSH
47090: LD_VAR 0 13
47094: PUSH
47095: LD_INT 2
47097: PLUS
47098: GREATER
47099: OR
47100: PUSH
47101: LD_VAR 0 8
47105: PUSH
47106: LD_INT 2
47108: ARRAY
47109: PUSH
47110: LD_VAR 0 13
47114: PUSH
47115: LD_INT 2
47117: MINUS
47118: LESS
47119: OR
47120: PUSH
47121: LD_VAR 0 8
47125: PUSH
47126: LD_INT 3
47128: ARRAY
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 8
47135: PUSH
47136: LD_INT 9
47138: PUSH
47139: LD_INT 10
47141: PUSH
47142: LD_INT 11
47144: PUSH
47145: LD_INT 12
47147: PUSH
47148: LD_INT 13
47150: PUSH
47151: LD_INT 16
47153: PUSH
47154: LD_INT 17
47156: PUSH
47157: LD_INT 18
47159: PUSH
47160: LD_INT 19
47162: PUSH
47163: LD_INT 20
47165: PUSH
47166: LD_INT 21
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: IN
47184: NOT
47185: OR
47186: PUSH
47187: LD_VAR 0 8
47191: PUSH
47192: LD_INT 5
47194: ARRAY
47195: NOT
47196: OR
47197: PUSH
47198: LD_VAR 0 8
47202: PUSH
47203: LD_INT 6
47205: ARRAY
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 7
47215: PUSH
47216: LD_INT 9
47218: PUSH
47219: LD_INT 10
47221: PUSH
47222: LD_INT 11
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: IN
47233: NOT
47234: OR
47235: IFFALSE 47241
// exit ;
47237: POP
47238: POP
47239: GO 47324
// end ;
47241: GO 46912
47243: POP
47244: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47245: LD_VAR 0 9
47249: PPUSH
47250: LD_VAR 0 3
47254: PPUSH
47255: LD_VAR 0 4
47259: PPUSH
47260: LD_INT 20
47262: PPUSH
47263: CALL 39247 0 4
47267: PUSH
47268: LD_INT 4
47270: ARRAY
47271: IFFALSE 47275
// exit ;
47273: GO 47324
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47275: LD_VAR 0 2
47279: PUSH
47280: LD_INT 29
47282: PUSH
47283: LD_INT 30
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: IN
47290: PUSH
47291: LD_VAR 0 3
47295: PPUSH
47296: LD_VAR 0 4
47300: PPUSH
47301: LD_VAR 0 9
47305: PPUSH
47306: CALL_OW 440
47310: NOT
47311: AND
47312: IFFALSE 47316
// exit ;
47314: GO 47324
// result := true ;
47316: LD_ADDR_VAR 0 6
47320: PUSH
47321: LD_INT 1
47323: ST_TO_ADDR
// end ;
47324: LD_VAR 0 6
47328: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47329: LD_INT 0
47331: PPUSH
47332: PPUSH
47333: PPUSH
47334: PPUSH
47335: PPUSH
47336: PPUSH
47337: PPUSH
47338: PPUSH
47339: PPUSH
47340: PPUSH
47341: PPUSH
47342: PPUSH
47343: PPUSH
47344: PPUSH
47345: PPUSH
47346: PPUSH
47347: PPUSH
47348: PPUSH
47349: PPUSH
47350: PPUSH
47351: PPUSH
47352: PPUSH
47353: PPUSH
47354: PPUSH
47355: PPUSH
47356: PPUSH
47357: PPUSH
47358: PPUSH
47359: PPUSH
47360: PPUSH
47361: PPUSH
47362: PPUSH
47363: PPUSH
47364: PPUSH
47365: PPUSH
47366: PPUSH
47367: PPUSH
47368: PPUSH
47369: PPUSH
47370: PPUSH
47371: PPUSH
47372: PPUSH
47373: PPUSH
47374: PPUSH
47375: PPUSH
47376: PPUSH
47377: PPUSH
47378: PPUSH
47379: PPUSH
47380: PPUSH
47381: PPUSH
47382: PPUSH
47383: PPUSH
47384: PPUSH
47385: PPUSH
47386: PPUSH
47387: PPUSH
47388: PPUSH
// result = [ ] ;
47389: LD_ADDR_VAR 0 7
47393: PUSH
47394: EMPTY
47395: ST_TO_ADDR
// temp_list = [ ] ;
47396: LD_ADDR_VAR 0 9
47400: PUSH
47401: EMPTY
47402: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47403: LD_VAR 0 4
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: LD_INT 3
47419: PUSH
47420: LD_INT 4
47422: PUSH
47423: LD_INT 5
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: IN
47434: NOT
47435: PUSH
47436: LD_VAR 0 1
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: IN
47451: PUSH
47452: LD_VAR 0 5
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 3
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: IN
47471: NOT
47472: AND
47473: OR
47474: IFFALSE 47478
// exit ;
47476: GO 65869
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47478: LD_VAR 0 1
47482: PUSH
47483: LD_INT 6
47485: PUSH
47486: LD_INT 7
47488: PUSH
47489: LD_INT 8
47491: PUSH
47492: LD_INT 13
47494: PUSH
47495: LD_INT 12
47497: PUSH
47498: LD_INT 15
47500: PUSH
47501: LD_INT 11
47503: PUSH
47504: LD_INT 14
47506: PUSH
47507: LD_INT 10
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: IN
47521: IFFALSE 47531
// btype = b_lab ;
47523: LD_ADDR_VAR 0 1
47527: PUSH
47528: LD_INT 6
47530: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47531: LD_VAR 0 6
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: IN
47550: NOT
47551: PUSH
47552: LD_VAR 0 1
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: LD_INT 3
47568: PUSH
47569: LD_INT 6
47571: PUSH
47572: LD_INT 36
47574: PUSH
47575: LD_INT 4
47577: PUSH
47578: LD_INT 5
47580: PUSH
47581: LD_INT 31
47583: PUSH
47584: LD_INT 32
47586: PUSH
47587: LD_INT 33
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: IN
47603: NOT
47604: PUSH
47605: LD_VAR 0 6
47609: PUSH
47610: LD_INT 1
47612: EQUAL
47613: AND
47614: OR
47615: PUSH
47616: LD_VAR 0 1
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: LD_INT 3
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: IN
47631: NOT
47632: PUSH
47633: LD_VAR 0 6
47637: PUSH
47638: LD_INT 2
47640: EQUAL
47641: AND
47642: OR
47643: IFFALSE 47653
// mode = 0 ;
47645: LD_ADDR_VAR 0 6
47649: PUSH
47650: LD_INT 0
47652: ST_TO_ADDR
// case mode of 0 :
47653: LD_VAR 0 6
47657: PUSH
47658: LD_INT 0
47660: DOUBLE
47661: EQUAL
47662: IFTRUE 47666
47664: GO 59119
47666: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47667: LD_ADDR_VAR 0 11
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 3
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47860: LD_ADDR_VAR 0 12
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 2
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 3
48017: NEG
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 3
48028: NEG
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48056: LD_ADDR_VAR 0 13
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: LD_INT 3
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 3
48215: NEG
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: LD_INT 3
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48255: LD_ADDR_VAR 0 14
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 3
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 3
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48451: LD_ADDR_VAR 0 15
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48644: LD_ADDR_VAR 0 16
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 3
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 3
48801: PUSH
48802: LD_INT 3
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 3
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48837: LD_ADDR_VAR 0 17
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49067: LD_ADDR_VAR 0 18
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49297: LD_ADDR_VAR 0 19
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49527: LD_ADDR_VAR 0 20
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: NEG
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49757: LD_ADDR_VAR 0 21
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49987: LD_ADDR_VAR 0 22
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50217: LD_ADDR_VAR 0 23
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: LD_INT 3
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 3
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50497: LD_ADDR_VAR 0 24
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: LD_INT 2
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: LD_INT 2
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50773: LD_ADDR_VAR 0 25
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 2
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 2
50960: NEG
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: LD_INT 3
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 3
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51047: LD_ADDR_VAR 0 26
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 2
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51323: LD_ADDR_VAR 0 27
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 3
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 3
51568: NEG
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51603: LD_ADDR_VAR 0 28
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: NEG
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 3
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 3
51838: NEG
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 3
51850: NEG
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51885: LD_ADDR_VAR 0 29
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: NEG
52076: PUSH
52077: LD_INT 3
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 3
52129: NEG
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52164: LD_ADDR_VAR 0 30
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 2
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: LD_INT 2
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 2
52386: PUSH
52387: LD_INT 3
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52442: LD_ADDR_VAR 0 31
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: LD_INT 3
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 3
52685: NEG
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52720: LD_ADDR_VAR 0 32
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 3
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 3
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 3
52963: NEG
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52998: LD_ADDR_VAR 0 33
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: LD_INT 3
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 3
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53277: LD_ADDR_VAR 0 34
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 3
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 2
53501: PUSH
53502: LD_INT 3
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53557: LD_ADDR_VAR 0 35
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53669: LD_ADDR_VAR 0 36
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53781: LD_ADDR_VAR 0 37
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53893: LD_ADDR_VAR 0 38
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54005: LD_ADDR_VAR 0 39
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54117: LD_ADDR_VAR 0 40
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54229: LD_ADDR_VAR 0 41
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 3
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 3
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: LD_INT 3
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 3
54503: NEG
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 3
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 3
54526: NEG
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 3
54538: NEG
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54579: LD_ADDR_VAR 0 42
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: LD_INT 3
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 3
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 3
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 3
54825: PUSH
54826: LD_INT 3
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 3
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 3
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 3
54876: NEG
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 3
54888: NEG
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54929: LD_ADDR_VAR 0 43
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 3
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 3
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 3
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 3
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: LD_INT 3
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 3
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 3
55225: NEG
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55277: LD_ADDR_VAR 0 44
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 3
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: LD_INT 3
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 3
55551: NEG
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 3
55574: NEG
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: LD_INT 3
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55627: LD_ADDR_VAR 0 45
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 3
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 3
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 3
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 3
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: LD_INT 3
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55977: LD_ADDR_VAR 0 46
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 3
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 3
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: LD_INT 3
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 3
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 3
56273: NEG
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56325: LD_ADDR_VAR 0 47
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56476: LD_ADDR_VAR 0 48
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56623: LD_ADDR_VAR 0 49
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 2
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56767: LD_ADDR_VAR 0 50
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56911: LD_ADDR_VAR 0 51
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57058: LD_ADDR_VAR 0 52
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57209: LD_ADDR_VAR 0 53
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57439: LD_ADDR_VAR 0 54
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: LD_INT 2
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57669: LD_ADDR_VAR 0 55
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57899: LD_ADDR_VAR 0 56
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58129: LD_ADDR_VAR 0 57
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: NEG
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 2
58328: NEG
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58359: LD_ADDR_VAR 0 58
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 2
58535: NEG
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58589: LD_ADDR_VAR 0 59
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58677: LD_ADDR_VAR 0 60
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58765: LD_ADDR_VAR 0 61
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58853: LD_ADDR_VAR 0 62
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58941: LD_ADDR_VAR 0 63
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59029: LD_ADDR_VAR 0 64
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: ST_TO_ADDR
// end ; 1 :
59117: GO 65014
59119: LD_INT 1
59121: DOUBLE
59122: EQUAL
59123: IFTRUE 59127
59125: GO 61750
59127: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59128: LD_ADDR_VAR 0 11
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 3
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 3
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 2
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: LIST
59171: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59172: LD_ADDR_VAR 0 12
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59213: LD_ADDR_VAR 0 13
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 3
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: LIST
59252: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59253: LD_ADDR_VAR 0 14
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: LD_INT 3
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 3
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: LIST
59293: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59294: LD_ADDR_VAR 0 15
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: NEG
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 3
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59338: LD_ADDR_VAR 0 16
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 3
59357: NEG
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 3
59369: NEG
59370: PUSH
59371: LD_INT 3
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59384: LD_ADDR_VAR 0 17
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 3
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: LIST
59427: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59428: LD_ADDR_VAR 0 18
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 3
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 3
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: LIST
59468: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59469: LD_ADDR_VAR 0 19
59473: PUSH
59474: LD_INT 3
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: PUSH
59487: LD_INT 3
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: LD_INT 3
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: LIST
59508: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59509: LD_ADDR_VAR 0 20
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 3
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: LIST
59549: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59550: LD_ADDR_VAR 0 21
59554: PUSH
59555: LD_INT 2
59557: NEG
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: LIST
59593: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59594: LD_ADDR_VAR 0 22
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: LD_INT 2
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: LD_INT 3
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: LIST
59639: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59640: LD_ADDR_VAR 0 23
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 4
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 3
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59684: LD_ADDR_VAR 0 24
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 4
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: LIST
59724: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59725: LD_ADDR_VAR 0 25
59729: PUSH
59730: LD_INT 3
59732: PUSH
59733: LD_INT 3
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 4
59742: PUSH
59743: LD_INT 3
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: PUSH
59753: LD_INT 4
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: LIST
59764: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59765: LD_ADDR_VAR 0 26
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: LD_INT 3
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 4
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 3
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59806: LD_ADDR_VAR 0 27
59810: PUSH
59811: LD_INT 3
59813: NEG
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 3
59824: NEG
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 4
59835: NEG
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: LIST
59849: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59850: LD_ADDR_VAR 0 28
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 3
59869: NEG
59870: PUSH
59871: LD_INT 4
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 4
59881: NEG
59882: PUSH
59883: LD_INT 3
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59896: LD_ADDR_VAR 0 29
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 4
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: LD_INT 4
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: LD_INT 5
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 5
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: LD_INT 4
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: LD_INT 6
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 6
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 5
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60051: LD_ADDR_VAR 0 30
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 3
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 3
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 4
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 4
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 4
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 5
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 5
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 5
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 6
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 6
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60194: LD_ADDR_VAR 0 31
60198: PUSH
60199: LD_INT 3
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: LD_INT 3
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: LD_INT 3
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 4
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 4
60241: PUSH
60242: LD_INT 4
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: LD_INT 4
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 5
60261: PUSH
60262: LD_INT 4
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 5
60271: PUSH
60272: LD_INT 5
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 4
60281: PUSH
60282: LD_INT 5
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 6
60291: PUSH
60292: LD_INT 5
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 6
60301: PUSH
60302: LD_INT 6
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 5
60311: PUSH
60312: LD_INT 6
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60333: LD_ADDR_VAR 0 32
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: LD_INT 3
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: LD_INT 4
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: LD_INT 4
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: LD_INT 3
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: LD_INT 5
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 5
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: LD_INT 4
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 6
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: LD_INT 6
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 5
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60476: LD_ADDR_VAR 0 33
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 3
60494: NEG
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: NEG
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 4
60528: NEG
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 4
60539: NEG
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 4
60551: NEG
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 5
60562: NEG
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 5
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 5
60585: NEG
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 6
60596: NEG
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 6
60607: NEG
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60631: LD_ADDR_VAR 0 34
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 3
60650: NEG
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: LD_INT 3
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 3
60674: NEG
60675: PUSH
60676: LD_INT 4
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 4
60686: NEG
60687: PUSH
60688: LD_INT 3
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 4
60698: NEG
60699: PUSH
60700: LD_INT 4
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 4
60710: NEG
60711: PUSH
60712: LD_INT 5
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 5
60722: NEG
60723: PUSH
60724: LD_INT 4
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 5
60734: NEG
60735: PUSH
60736: LD_INT 5
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 5
60746: NEG
60747: PUSH
60748: LD_INT 6
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 6
60758: NEG
60759: PUSH
60760: LD_INT 5
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 6
60770: NEG
60771: PUSH
60772: LD_INT 6
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60794: LD_ADDR_VAR 0 41
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: LD_INT 3
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 2
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: LIST
60837: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60838: LD_ADDR_VAR 0 42
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: LIST
60878: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60879: LD_ADDR_VAR 0 43
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 3
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: LIST
60918: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60919: LD_ADDR_VAR 0 44
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 2
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 3
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: LIST
60959: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60960: LD_ADDR_VAR 0 45
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61004: LD_ADDR_VAR 0 46
61008: PUSH
61009: LD_INT 2
61011: NEG
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: LD_INT 3
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 3
61035: NEG
61036: PUSH
61037: LD_INT 2
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61050: LD_ADDR_VAR 0 47
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: LD_INT 3
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: LD_INT 3
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61083: LD_ADDR_VAR 0 48
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: LD_INT 2
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61114: LD_ADDR_VAR 0 49
61118: PUSH
61119: LD_INT 3
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 3
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61143: LD_ADDR_VAR 0 50
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: LD_INT 3
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61172: LD_ADDR_VAR 0 51
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: NEG
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61203: LD_ADDR_VAR 0 52
61207: PUSH
61208: LD_INT 3
61210: NEG
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 3
61222: NEG
61223: PUSH
61224: LD_INT 2
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61236: LD_ADDR_VAR 0 53
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: LD_INT 3
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 3
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61280: LD_ADDR_VAR 0 54
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 3
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 3
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: LIST
61320: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61321: LD_ADDR_VAR 0 55
61325: PUSH
61326: LD_INT 3
61328: PUSH
61329: LD_INT 2
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 3
61338: PUSH
61339: LD_INT 3
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 2
61348: PUSH
61349: LD_INT 3
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: LIST
61360: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61361: LD_ADDR_VAR 0 56
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 3
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61402: LD_ADDR_VAR 0 57
61406: PUSH
61407: LD_INT 2
61409: NEG
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 3
61420: NEG
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 3
61431: NEG
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: LIST
61445: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61446: LD_ADDR_VAR 0 58
61450: PUSH
61451: LD_INT 2
61453: NEG
61454: PUSH
61455: LD_INT 3
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: LD_INT 2
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 3
61477: NEG
61478: PUSH
61479: LD_INT 3
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: LIST
61491: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61492: LD_ADDR_VAR 0 59
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: LD_INT 2
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 2
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61536: LD_ADDR_VAR 0 60
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: LIST
61576: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61577: LD_ADDR_VAR 0 61
61581: PUSH
61582: LD_INT 2
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: LIST
61616: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61617: LD_ADDR_VAR 0 62
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61658: LD_ADDR_VAR 0 63
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61702: LD_ADDR_VAR 0 64
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: LIST
61747: ST_TO_ADDR
// end ; 2 :
61748: GO 65014
61750: LD_INT 2
61752: DOUBLE
61753: EQUAL
61754: IFTRUE 61758
61756: GO 65013
61758: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61759: LD_ADDR_VAR 0 29
61763: PUSH
61764: LD_INT 4
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 4
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 5
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 5
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 4
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 3
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 3
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 3
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 5
61849: PUSH
61850: LD_INT 2
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 3
61859: PUSH
61860: LD_INT 3
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 3
61869: PUSH
61870: LD_INT 2
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 4
61879: PUSH
61880: LD_INT 3
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 4
61889: PUSH
61890: LD_INT 4
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 3
61899: PUSH
61900: LD_INT 4
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: LD_INT 3
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: LD_INT 2
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 4
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: LD_INT 4
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 4
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 3
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 4
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 5
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 5
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: LD_INT 4
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: LD_INT 3
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: LD_INT 5
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: NEG
62032: PUSH
62033: LD_INT 3
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 3
62042: NEG
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 3
62053: NEG
62054: PUSH
62055: LD_INT 1
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 3
62087: NEG
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 4
62098: NEG
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 4
62109: NEG
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 4
62121: NEG
62122: PUSH
62123: LD_INT 2
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 2
62133: NEG
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 4
62144: NEG
62145: PUSH
62146: LD_INT 4
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 4
62156: NEG
62157: PUSH
62158: LD_INT 5
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 3
62168: NEG
62169: PUSH
62170: LD_INT 4
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 3
62180: NEG
62181: PUSH
62182: LD_INT 3
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 4
62192: NEG
62193: PUSH
62194: LD_INT 3
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 5
62204: NEG
62205: PUSH
62206: LD_INT 4
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 5
62216: NEG
62217: PUSH
62218: LD_INT 5
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 3
62228: NEG
62229: PUSH
62230: LD_INT 5
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 5
62240: NEG
62241: PUSH
62242: LD_INT 3
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62297: LD_ADDR_VAR 0 30
62301: PUSH
62302: LD_INT 4
62304: PUSH
62305: LD_INT 4
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 4
62314: PUSH
62315: LD_INT 3
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 5
62324: PUSH
62325: LD_INT 4
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 5
62334: PUSH
62335: LD_INT 5
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 4
62344: PUSH
62345: LD_INT 5
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 3
62354: PUSH
62355: LD_INT 4
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 3
62364: PUSH
62365: LD_INT 3
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 5
62374: PUSH
62375: LD_INT 3
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: LD_INT 5
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: LD_INT 3
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 2
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 3
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 4
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 4
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: LD_INT 3
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: LD_INT 4
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: NEG
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 4
62487: NEG
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 4
62498: NEG
62499: PUSH
62500: LD_INT 1
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 3
62521: NEG
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 4
62532: NEG
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 5
62543: NEG
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 5
62554: NEG
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 5
62566: NEG
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 3
62578: NEG
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: NEG
62590: PUSH
62591: LD_INT 3
62593: NEG
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 3
62601: NEG
62602: PUSH
62603: LD_INT 4
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: LD_INT 3
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: NEG
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 3
62637: NEG
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 4
62649: NEG
62650: PUSH
62651: LD_INT 3
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 4
62661: NEG
62662: PUSH
62663: LD_INT 4
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 2
62673: NEG
62674: PUSH
62675: LD_INT 4
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 4
62685: NEG
62686: PUSH
62687: LD_INT 2
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 4
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: LD_INT 5
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: LD_INT 4
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: LD_INT 3
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: LD_INT 3
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 4
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: LD_INT 5
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: LD_INT 3
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: LD_INT 5
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62844: LD_ADDR_VAR 0 31
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: LD_INT 4
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: LD_INT 3
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: LD_INT 4
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: LD_INT 5
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 5
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 4
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 2
62923: PUSH
62924: LD_INT 5
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 2
62933: NEG
62934: PUSH
62935: LD_INT 3
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 3
62944: NEG
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 3
62955: NEG
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 2
62967: NEG
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 3
62989: NEG
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 4
63000: NEG
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 4
63011: NEG
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 4
63023: NEG
63024: PUSH
63025: LD_INT 2
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 2
63035: NEG
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 4
63046: NEG
63047: PUSH
63048: LD_INT 4
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 4
63058: NEG
63059: PUSH
63060: LD_INT 5
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 3
63070: NEG
63071: PUSH
63072: LD_INT 4
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: LD_INT 3
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 4
63094: NEG
63095: PUSH
63096: LD_INT 3
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 5
63106: NEG
63107: PUSH
63108: LD_INT 4
63110: NEG
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 5
63118: NEG
63119: PUSH
63120: LD_INT 5
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 3
63130: NEG
63131: PUSH
63132: LD_INT 5
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 5
63142: NEG
63143: PUSH
63144: LD_INT 3
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: LD_INT 3
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: LD_INT 4
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: LD_INT 3
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: LD_INT 2
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: LD_INT 2
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: LD_INT 3
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: LD_INT 4
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: LD_INT 2
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: NEG
63245: PUSH
63246: LD_INT 4
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 4
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 4
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 5
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 5
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 4
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 3
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 3
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 3
63328: PUSH
63329: LD_INT 2
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 5
63339: PUSH
63340: LD_INT 2
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63394: LD_ADDR_VAR 0 32
63398: PUSH
63399: LD_INT 4
63401: NEG
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 4
63412: NEG
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 3
63424: NEG
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 3
63435: NEG
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 4
63446: NEG
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 5
63457: NEG
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 5
63468: NEG
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 5
63480: NEG
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 3
63492: NEG
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 3
63503: NEG
63504: PUSH
63505: LD_INT 3
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 3
63515: NEG
63516: PUSH
63517: LD_INT 4
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 2
63527: NEG
63528: PUSH
63529: LD_INT 3
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 2
63539: NEG
63540: PUSH
63541: LD_INT 2
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 3
63551: NEG
63552: PUSH
63553: LD_INT 2
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 4
63563: NEG
63564: PUSH
63565: LD_INT 3
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 4
63575: NEG
63576: PUSH
63577: LD_INT 4
63579: NEG
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 2
63587: NEG
63588: PUSH
63589: LD_INT 4
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 4
63599: NEG
63600: PUSH
63601: LD_INT 2
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 4
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 5
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: LD_INT 4
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: LD_INT 3
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: LD_INT 3
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: LD_INT 4
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 5
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 2
63690: PUSH
63691: LD_INT 3
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 2
63701: NEG
63702: PUSH
63703: LD_INT 5
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 3
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 3
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 4
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 4
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 3
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 2
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: LD_INT 2
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 4
63796: PUSH
63797: LD_INT 2
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 4
63806: PUSH
63807: LD_INT 4
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 4
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 5
63826: PUSH
63827: LD_INT 4
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 5
63836: PUSH
63837: LD_INT 5
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 4
63846: PUSH
63847: LD_INT 5
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 3
63856: PUSH
63857: LD_INT 4
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 3
63866: PUSH
63867: LD_INT 3
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 5
63876: PUSH
63877: LD_INT 3
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 3
63886: PUSH
63887: LD_INT 5
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63941: LD_ADDR_VAR 0 33
63945: PUSH
63946: LD_INT 4
63948: NEG
63949: PUSH
63950: LD_INT 4
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 4
63960: NEG
63961: PUSH
63962: LD_INT 5
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: NEG
63973: PUSH
63974: LD_INT 4
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 3
63984: NEG
63985: PUSH
63986: LD_INT 3
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 4
63996: NEG
63997: PUSH
63998: LD_INT 3
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 5
64008: NEG
64009: PUSH
64010: LD_INT 4
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 5
64020: NEG
64021: PUSH
64022: LD_INT 5
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 3
64032: NEG
64033: PUSH
64034: LD_INT 5
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 5
64044: NEG
64045: PUSH
64046: LD_INT 3
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: LD_INT 3
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: LD_INT 4
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 3
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: LD_INT 2
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: LD_INT 2
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 1
64111: NEG
64112: PUSH
64113: LD_INT 3
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: LD_INT 4
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: LD_INT 2
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 2
64146: NEG
64147: PUSH
64148: LD_INT 4
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 4
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 4
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 5
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 5
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 4
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 3
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 3
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 3
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 5
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 3
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 3
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 4
64271: PUSH
64272: LD_INT 3
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 4
64281: PUSH
64282: LD_INT 4
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 3
64291: PUSH
64292: LD_INT 4
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 2
64301: PUSH
64302: LD_INT 3
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 2
64311: PUSH
64312: LD_INT 2
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 4
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: PUSH
64332: LD_INT 4
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 4
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: LD_INT 3
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 4
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 5
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_INT 5
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: LD_INT 4
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 3
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 2
64413: PUSH
64414: LD_INT 5
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 2
64423: NEG
64424: PUSH
64425: LD_INT 3
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64479: LD_ADDR_VAR 0 34
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: LD_INT 4
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: LD_INT 5
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: LD_INT 4
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: LD_INT 3
64522: NEG
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: LD_INT 3
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: LD_INT 4
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: LD_INT 5
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: LD_INT 3
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 2
64576: NEG
64577: PUSH
64578: LD_INT 5
64580: NEG
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 3
64598: PUSH
64599: LD_INT 1
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 4
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 4
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 3
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 2
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 2
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 2
64660: PUSH
64661: LD_INT 2
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 4
64671: PUSH
64672: LD_INT 2
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 4
64681: PUSH
64682: LD_INT 4
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 4
64691: PUSH
64692: LD_INT 3
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 5
64701: PUSH
64702: LD_INT 4
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 5
64711: PUSH
64712: LD_INT 5
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 4
64721: PUSH
64722: LD_INT 5
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: LD_INT 4
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 3
64741: PUSH
64742: LD_INT 3
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 5
64751: PUSH
64752: LD_INT 3
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 3
64761: PUSH
64762: LD_INT 5
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: LD_INT 3
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 2
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: LD_INT 3
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: LD_INT 4
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: LD_INT 4
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: LD_INT 3
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: LD_INT 2
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 2
64843: PUSH
64844: LD_INT 4
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 4
64864: NEG
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 4
64875: NEG
64876: PUSH
64877: LD_INT 1
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 3
64887: NEG
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 3
64898: NEG
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 4
64909: NEG
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 5
64920: NEG
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 5
64931: NEG
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 5
64943: NEG
64944: PUSH
64945: LD_INT 2
64947: NEG
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 3
64955: NEG
64956: PUSH
64957: LD_INT 2
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: ST_TO_ADDR
// end ; end ;
65011: GO 65014
65013: POP
// case btype of b_depot , b_warehouse :
65014: LD_VAR 0 1
65018: PUSH
65019: LD_INT 0
65021: DOUBLE
65022: EQUAL
65023: IFTRUE 65033
65025: LD_INT 1
65027: DOUBLE
65028: EQUAL
65029: IFTRUE 65033
65031: GO 65234
65033: POP
// case nation of nation_american :
65034: LD_VAR 0 5
65038: PUSH
65039: LD_INT 1
65041: DOUBLE
65042: EQUAL
65043: IFTRUE 65047
65045: GO 65103
65047: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65048: LD_ADDR_VAR 0 9
65052: PUSH
65053: LD_VAR 0 11
65057: PUSH
65058: LD_VAR 0 12
65062: PUSH
65063: LD_VAR 0 13
65067: PUSH
65068: LD_VAR 0 14
65072: PUSH
65073: LD_VAR 0 15
65077: PUSH
65078: LD_VAR 0 16
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: PUSH
65091: LD_VAR 0 4
65095: PUSH
65096: LD_INT 1
65098: PLUS
65099: ARRAY
65100: ST_TO_ADDR
65101: GO 65232
65103: LD_INT 2
65105: DOUBLE
65106: EQUAL
65107: IFTRUE 65111
65109: GO 65167
65111: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65112: LD_ADDR_VAR 0 9
65116: PUSH
65117: LD_VAR 0 17
65121: PUSH
65122: LD_VAR 0 18
65126: PUSH
65127: LD_VAR 0 19
65131: PUSH
65132: LD_VAR 0 20
65136: PUSH
65137: LD_VAR 0 21
65141: PUSH
65142: LD_VAR 0 22
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: PUSH
65155: LD_VAR 0 4
65159: PUSH
65160: LD_INT 1
65162: PLUS
65163: ARRAY
65164: ST_TO_ADDR
65165: GO 65232
65167: LD_INT 3
65169: DOUBLE
65170: EQUAL
65171: IFTRUE 65175
65173: GO 65231
65175: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65176: LD_ADDR_VAR 0 9
65180: PUSH
65181: LD_VAR 0 23
65185: PUSH
65186: LD_VAR 0 24
65190: PUSH
65191: LD_VAR 0 25
65195: PUSH
65196: LD_VAR 0 26
65200: PUSH
65201: LD_VAR 0 27
65205: PUSH
65206: LD_VAR 0 28
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: PUSH
65219: LD_VAR 0 4
65223: PUSH
65224: LD_INT 1
65226: PLUS
65227: ARRAY
65228: ST_TO_ADDR
65229: GO 65232
65231: POP
65232: GO 65787
65234: LD_INT 2
65236: DOUBLE
65237: EQUAL
65238: IFTRUE 65248
65240: LD_INT 3
65242: DOUBLE
65243: EQUAL
65244: IFTRUE 65248
65246: GO 65304
65248: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65249: LD_ADDR_VAR 0 9
65253: PUSH
65254: LD_VAR 0 29
65258: PUSH
65259: LD_VAR 0 30
65263: PUSH
65264: LD_VAR 0 31
65268: PUSH
65269: LD_VAR 0 32
65273: PUSH
65274: LD_VAR 0 33
65278: PUSH
65279: LD_VAR 0 34
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: PUSH
65292: LD_VAR 0 4
65296: PUSH
65297: LD_INT 1
65299: PLUS
65300: ARRAY
65301: ST_TO_ADDR
65302: GO 65787
65304: LD_INT 16
65306: DOUBLE
65307: EQUAL
65308: IFTRUE 65366
65310: LD_INT 17
65312: DOUBLE
65313: EQUAL
65314: IFTRUE 65366
65316: LD_INT 18
65318: DOUBLE
65319: EQUAL
65320: IFTRUE 65366
65322: LD_INT 19
65324: DOUBLE
65325: EQUAL
65326: IFTRUE 65366
65328: LD_INT 22
65330: DOUBLE
65331: EQUAL
65332: IFTRUE 65366
65334: LD_INT 20
65336: DOUBLE
65337: EQUAL
65338: IFTRUE 65366
65340: LD_INT 21
65342: DOUBLE
65343: EQUAL
65344: IFTRUE 65366
65346: LD_INT 23
65348: DOUBLE
65349: EQUAL
65350: IFTRUE 65366
65352: LD_INT 24
65354: DOUBLE
65355: EQUAL
65356: IFTRUE 65366
65358: LD_INT 25
65360: DOUBLE
65361: EQUAL
65362: IFTRUE 65366
65364: GO 65422
65366: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65367: LD_ADDR_VAR 0 9
65371: PUSH
65372: LD_VAR 0 35
65376: PUSH
65377: LD_VAR 0 36
65381: PUSH
65382: LD_VAR 0 37
65386: PUSH
65387: LD_VAR 0 38
65391: PUSH
65392: LD_VAR 0 39
65396: PUSH
65397: LD_VAR 0 40
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: PUSH
65410: LD_VAR 0 4
65414: PUSH
65415: LD_INT 1
65417: PLUS
65418: ARRAY
65419: ST_TO_ADDR
65420: GO 65787
65422: LD_INT 6
65424: DOUBLE
65425: EQUAL
65426: IFTRUE 65478
65428: LD_INT 7
65430: DOUBLE
65431: EQUAL
65432: IFTRUE 65478
65434: LD_INT 8
65436: DOUBLE
65437: EQUAL
65438: IFTRUE 65478
65440: LD_INT 13
65442: DOUBLE
65443: EQUAL
65444: IFTRUE 65478
65446: LD_INT 12
65448: DOUBLE
65449: EQUAL
65450: IFTRUE 65478
65452: LD_INT 15
65454: DOUBLE
65455: EQUAL
65456: IFTRUE 65478
65458: LD_INT 11
65460: DOUBLE
65461: EQUAL
65462: IFTRUE 65478
65464: LD_INT 14
65466: DOUBLE
65467: EQUAL
65468: IFTRUE 65478
65470: LD_INT 10
65472: DOUBLE
65473: EQUAL
65474: IFTRUE 65478
65476: GO 65534
65478: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65479: LD_ADDR_VAR 0 9
65483: PUSH
65484: LD_VAR 0 41
65488: PUSH
65489: LD_VAR 0 42
65493: PUSH
65494: LD_VAR 0 43
65498: PUSH
65499: LD_VAR 0 44
65503: PUSH
65504: LD_VAR 0 45
65508: PUSH
65509: LD_VAR 0 46
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: PUSH
65522: LD_VAR 0 4
65526: PUSH
65527: LD_INT 1
65529: PLUS
65530: ARRAY
65531: ST_TO_ADDR
65532: GO 65787
65534: LD_INT 36
65536: DOUBLE
65537: EQUAL
65538: IFTRUE 65542
65540: GO 65598
65542: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65543: LD_ADDR_VAR 0 9
65547: PUSH
65548: LD_VAR 0 47
65552: PUSH
65553: LD_VAR 0 48
65557: PUSH
65558: LD_VAR 0 49
65562: PUSH
65563: LD_VAR 0 50
65567: PUSH
65568: LD_VAR 0 51
65572: PUSH
65573: LD_VAR 0 52
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: PUSH
65586: LD_VAR 0 4
65590: PUSH
65591: LD_INT 1
65593: PLUS
65594: ARRAY
65595: ST_TO_ADDR
65596: GO 65787
65598: LD_INT 4
65600: DOUBLE
65601: EQUAL
65602: IFTRUE 65624
65604: LD_INT 5
65606: DOUBLE
65607: EQUAL
65608: IFTRUE 65624
65610: LD_INT 34
65612: DOUBLE
65613: EQUAL
65614: IFTRUE 65624
65616: LD_INT 37
65618: DOUBLE
65619: EQUAL
65620: IFTRUE 65624
65622: GO 65680
65624: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65625: LD_ADDR_VAR 0 9
65629: PUSH
65630: LD_VAR 0 53
65634: PUSH
65635: LD_VAR 0 54
65639: PUSH
65640: LD_VAR 0 55
65644: PUSH
65645: LD_VAR 0 56
65649: PUSH
65650: LD_VAR 0 57
65654: PUSH
65655: LD_VAR 0 58
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: PUSH
65668: LD_VAR 0 4
65672: PUSH
65673: LD_INT 1
65675: PLUS
65676: ARRAY
65677: ST_TO_ADDR
65678: GO 65787
65680: LD_INT 31
65682: DOUBLE
65683: EQUAL
65684: IFTRUE 65730
65686: LD_INT 32
65688: DOUBLE
65689: EQUAL
65690: IFTRUE 65730
65692: LD_INT 33
65694: DOUBLE
65695: EQUAL
65696: IFTRUE 65730
65698: LD_INT 27
65700: DOUBLE
65701: EQUAL
65702: IFTRUE 65730
65704: LD_INT 26
65706: DOUBLE
65707: EQUAL
65708: IFTRUE 65730
65710: LD_INT 28
65712: DOUBLE
65713: EQUAL
65714: IFTRUE 65730
65716: LD_INT 29
65718: DOUBLE
65719: EQUAL
65720: IFTRUE 65730
65722: LD_INT 30
65724: DOUBLE
65725: EQUAL
65726: IFTRUE 65730
65728: GO 65786
65730: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65731: LD_ADDR_VAR 0 9
65735: PUSH
65736: LD_VAR 0 59
65740: PUSH
65741: LD_VAR 0 60
65745: PUSH
65746: LD_VAR 0 61
65750: PUSH
65751: LD_VAR 0 62
65755: PUSH
65756: LD_VAR 0 63
65760: PUSH
65761: LD_VAR 0 64
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: PUSH
65774: LD_VAR 0 4
65778: PUSH
65779: LD_INT 1
65781: PLUS
65782: ARRAY
65783: ST_TO_ADDR
65784: GO 65787
65786: POP
// temp_list2 = [ ] ;
65787: LD_ADDR_VAR 0 10
65791: PUSH
65792: EMPTY
65793: ST_TO_ADDR
// for i in temp_list do
65794: LD_ADDR_VAR 0 8
65798: PUSH
65799: LD_VAR 0 9
65803: PUSH
65804: FOR_IN
65805: IFFALSE 65857
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65807: LD_ADDR_VAR 0 10
65811: PUSH
65812: LD_VAR 0 10
65816: PUSH
65817: LD_VAR 0 8
65821: PUSH
65822: LD_INT 1
65824: ARRAY
65825: PUSH
65826: LD_VAR 0 2
65830: PLUS
65831: PUSH
65832: LD_VAR 0 8
65836: PUSH
65837: LD_INT 2
65839: ARRAY
65840: PUSH
65841: LD_VAR 0 3
65845: PLUS
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: EMPTY
65852: LIST
65853: ADD
65854: ST_TO_ADDR
65855: GO 65804
65857: POP
65858: POP
// result = temp_list2 ;
65859: LD_ADDR_VAR 0 7
65863: PUSH
65864: LD_VAR 0 10
65868: ST_TO_ADDR
// end ;
65869: LD_VAR 0 7
65873: RET
// export function EnemyInRange ( unit , dist ) ; begin
65874: LD_INT 0
65876: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65877: LD_ADDR_VAR 0 3
65881: PUSH
65882: LD_VAR 0 1
65886: PPUSH
65887: CALL_OW 255
65891: PPUSH
65892: LD_VAR 0 1
65896: PPUSH
65897: CALL_OW 250
65901: PPUSH
65902: LD_VAR 0 1
65906: PPUSH
65907: CALL_OW 251
65911: PPUSH
65912: LD_VAR 0 2
65916: PPUSH
65917: CALL 39247 0 4
65921: PUSH
65922: LD_INT 4
65924: ARRAY
65925: ST_TO_ADDR
// end ;
65926: LD_VAR 0 3
65930: RET
// export function PlayerSeeMe ( unit ) ; begin
65931: LD_INT 0
65933: PPUSH
// result := See ( your_side , unit ) ;
65934: LD_ADDR_VAR 0 2
65938: PUSH
65939: LD_OWVAR 2
65943: PPUSH
65944: LD_VAR 0 1
65948: PPUSH
65949: CALL_OW 292
65953: ST_TO_ADDR
// end ;
65954: LD_VAR 0 2
65958: RET
// export function ReverseDir ( unit ) ; begin
65959: LD_INT 0
65961: PPUSH
// if not unit then
65962: LD_VAR 0 1
65966: NOT
65967: IFFALSE 65971
// exit ;
65969: GO 65994
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65971: LD_ADDR_VAR 0 2
65975: PUSH
65976: LD_VAR 0 1
65980: PPUSH
65981: CALL_OW 254
65985: PUSH
65986: LD_INT 3
65988: PLUS
65989: PUSH
65990: LD_INT 6
65992: MOD
65993: ST_TO_ADDR
// end ;
65994: LD_VAR 0 2
65998: RET
// export function ReverseArray ( array ) ; var i ; begin
65999: LD_INT 0
66001: PPUSH
66002: PPUSH
// if not array then
66003: LD_VAR 0 1
66007: NOT
66008: IFFALSE 66012
// exit ;
66010: GO 66067
// result := [ ] ;
66012: LD_ADDR_VAR 0 2
66016: PUSH
66017: EMPTY
66018: ST_TO_ADDR
// for i := array downto 1 do
66019: LD_ADDR_VAR 0 3
66023: PUSH
66024: DOUBLE
66025: LD_VAR 0 1
66029: INC
66030: ST_TO_ADDR
66031: LD_INT 1
66033: PUSH
66034: FOR_DOWNTO
66035: IFFALSE 66065
// result := Join ( result , array [ i ] ) ;
66037: LD_ADDR_VAR 0 2
66041: PUSH
66042: LD_VAR 0 2
66046: PPUSH
66047: LD_VAR 0 1
66051: PUSH
66052: LD_VAR 0 3
66056: ARRAY
66057: PPUSH
66058: CALL 70712 0 2
66062: ST_TO_ADDR
66063: GO 66034
66065: POP
66066: POP
// end ;
66067: LD_VAR 0 2
66071: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66072: LD_INT 0
66074: PPUSH
66075: PPUSH
66076: PPUSH
66077: PPUSH
66078: PPUSH
66079: PPUSH
// if not unit or not hexes then
66080: LD_VAR 0 1
66084: NOT
66085: PUSH
66086: LD_VAR 0 2
66090: NOT
66091: OR
66092: IFFALSE 66096
// exit ;
66094: GO 66219
// dist := 9999 ;
66096: LD_ADDR_VAR 0 5
66100: PUSH
66101: LD_INT 9999
66103: ST_TO_ADDR
// for i = 1 to hexes do
66104: LD_ADDR_VAR 0 4
66108: PUSH
66109: DOUBLE
66110: LD_INT 1
66112: DEC
66113: ST_TO_ADDR
66114: LD_VAR 0 2
66118: PUSH
66119: FOR_TO
66120: IFFALSE 66207
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66122: LD_ADDR_VAR 0 6
66126: PUSH
66127: LD_VAR 0 1
66131: PPUSH
66132: LD_VAR 0 2
66136: PUSH
66137: LD_VAR 0 4
66141: ARRAY
66142: PUSH
66143: LD_INT 1
66145: ARRAY
66146: PPUSH
66147: LD_VAR 0 2
66151: PUSH
66152: LD_VAR 0 4
66156: ARRAY
66157: PUSH
66158: LD_INT 2
66160: ARRAY
66161: PPUSH
66162: CALL_OW 297
66166: ST_TO_ADDR
// if tdist < dist then
66167: LD_VAR 0 6
66171: PUSH
66172: LD_VAR 0 5
66176: LESS
66177: IFFALSE 66205
// begin hex := hexes [ i ] ;
66179: LD_ADDR_VAR 0 8
66183: PUSH
66184: LD_VAR 0 2
66188: PUSH
66189: LD_VAR 0 4
66193: ARRAY
66194: ST_TO_ADDR
// dist := tdist ;
66195: LD_ADDR_VAR 0 5
66199: PUSH
66200: LD_VAR 0 6
66204: ST_TO_ADDR
// end ; end ;
66205: GO 66119
66207: POP
66208: POP
// result := hex ;
66209: LD_ADDR_VAR 0 3
66213: PUSH
66214: LD_VAR 0 8
66218: ST_TO_ADDR
// end ;
66219: LD_VAR 0 3
66223: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66224: LD_INT 0
66226: PPUSH
66227: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66228: LD_VAR 0 1
66232: NOT
66233: PUSH
66234: LD_VAR 0 1
66238: PUSH
66239: LD_INT 21
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 23
66251: PUSH
66252: LD_INT 2
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PPUSH
66263: CALL_OW 69
66267: IN
66268: NOT
66269: OR
66270: IFFALSE 66274
// exit ;
66272: GO 66321
// for i = 1 to 3 do
66274: LD_ADDR_VAR 0 3
66278: PUSH
66279: DOUBLE
66280: LD_INT 1
66282: DEC
66283: ST_TO_ADDR
66284: LD_INT 3
66286: PUSH
66287: FOR_TO
66288: IFFALSE 66319
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66290: LD_VAR 0 1
66294: PPUSH
66295: CALL_OW 250
66299: PPUSH
66300: LD_VAR 0 1
66304: PPUSH
66305: CALL_OW 251
66309: PPUSH
66310: LD_INT 1
66312: PPUSH
66313: CALL_OW 453
66317: GO 66287
66319: POP
66320: POP
// end ;
66321: LD_VAR 0 2
66325: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66326: LD_INT 0
66328: PPUSH
66329: PPUSH
66330: PPUSH
66331: PPUSH
66332: PPUSH
66333: PPUSH
// if not unit or not enemy_unit then
66334: LD_VAR 0 1
66338: NOT
66339: PUSH
66340: LD_VAR 0 2
66344: NOT
66345: OR
66346: IFFALSE 66350
// exit ;
66348: GO 66817
// if GetLives ( i ) < 250 then
66350: LD_VAR 0 4
66354: PPUSH
66355: CALL_OW 256
66359: PUSH
66360: LD_INT 250
66362: LESS
66363: IFFALSE 66376
// begin ComAutodestruct ( i ) ;
66365: LD_VAR 0 4
66369: PPUSH
66370: CALL 66224 0 1
// exit ;
66374: GO 66817
// end ; x := GetX ( enemy_unit ) ;
66376: LD_ADDR_VAR 0 7
66380: PUSH
66381: LD_VAR 0 2
66385: PPUSH
66386: CALL_OW 250
66390: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66391: LD_ADDR_VAR 0 8
66395: PUSH
66396: LD_VAR 0 2
66400: PPUSH
66401: CALL_OW 251
66405: ST_TO_ADDR
// if not x or not y then
66406: LD_VAR 0 7
66410: NOT
66411: PUSH
66412: LD_VAR 0 8
66416: NOT
66417: OR
66418: IFFALSE 66422
// exit ;
66420: GO 66817
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66422: LD_ADDR_VAR 0 6
66426: PUSH
66427: LD_VAR 0 7
66431: PPUSH
66432: LD_INT 0
66434: PPUSH
66435: LD_INT 4
66437: PPUSH
66438: CALL_OW 272
66442: PUSH
66443: LD_VAR 0 8
66447: PPUSH
66448: LD_INT 0
66450: PPUSH
66451: LD_INT 4
66453: PPUSH
66454: CALL_OW 273
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_VAR 0 7
66467: PPUSH
66468: LD_INT 1
66470: PPUSH
66471: LD_INT 4
66473: PPUSH
66474: CALL_OW 272
66478: PUSH
66479: LD_VAR 0 8
66483: PPUSH
66484: LD_INT 1
66486: PPUSH
66487: LD_INT 4
66489: PPUSH
66490: CALL_OW 273
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_VAR 0 7
66503: PPUSH
66504: LD_INT 2
66506: PPUSH
66507: LD_INT 4
66509: PPUSH
66510: CALL_OW 272
66514: PUSH
66515: LD_VAR 0 8
66519: PPUSH
66520: LD_INT 2
66522: PPUSH
66523: LD_INT 4
66525: PPUSH
66526: CALL_OW 273
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_VAR 0 7
66539: PPUSH
66540: LD_INT 3
66542: PPUSH
66543: LD_INT 4
66545: PPUSH
66546: CALL_OW 272
66550: PUSH
66551: LD_VAR 0 8
66555: PPUSH
66556: LD_INT 3
66558: PPUSH
66559: LD_INT 4
66561: PPUSH
66562: CALL_OW 273
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_VAR 0 7
66575: PPUSH
66576: LD_INT 4
66578: PPUSH
66579: LD_INT 4
66581: PPUSH
66582: CALL_OW 272
66586: PUSH
66587: LD_VAR 0 8
66591: PPUSH
66592: LD_INT 4
66594: PPUSH
66595: LD_INT 4
66597: PPUSH
66598: CALL_OW 273
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_VAR 0 7
66611: PPUSH
66612: LD_INT 5
66614: PPUSH
66615: LD_INT 4
66617: PPUSH
66618: CALL_OW 272
66622: PUSH
66623: LD_VAR 0 8
66627: PPUSH
66628: LD_INT 5
66630: PPUSH
66631: LD_INT 4
66633: PPUSH
66634: CALL_OW 273
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: ST_TO_ADDR
// for i = tmp downto 1 do
66651: LD_ADDR_VAR 0 4
66655: PUSH
66656: DOUBLE
66657: LD_VAR 0 6
66661: INC
66662: ST_TO_ADDR
66663: LD_INT 1
66665: PUSH
66666: FOR_DOWNTO
66667: IFFALSE 66768
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66669: LD_VAR 0 6
66673: PUSH
66674: LD_VAR 0 4
66678: ARRAY
66679: PUSH
66680: LD_INT 1
66682: ARRAY
66683: PPUSH
66684: LD_VAR 0 6
66688: PUSH
66689: LD_VAR 0 4
66693: ARRAY
66694: PUSH
66695: LD_INT 2
66697: ARRAY
66698: PPUSH
66699: CALL_OW 488
66703: NOT
66704: PUSH
66705: LD_VAR 0 6
66709: PUSH
66710: LD_VAR 0 4
66714: ARRAY
66715: PUSH
66716: LD_INT 1
66718: ARRAY
66719: PPUSH
66720: LD_VAR 0 6
66724: PUSH
66725: LD_VAR 0 4
66729: ARRAY
66730: PUSH
66731: LD_INT 2
66733: ARRAY
66734: PPUSH
66735: CALL_OW 428
66739: PUSH
66740: LD_INT 0
66742: NONEQUAL
66743: OR
66744: IFFALSE 66766
// tmp := Delete ( tmp , i ) ;
66746: LD_ADDR_VAR 0 6
66750: PUSH
66751: LD_VAR 0 6
66755: PPUSH
66756: LD_VAR 0 4
66760: PPUSH
66761: CALL_OW 3
66765: ST_TO_ADDR
66766: GO 66666
66768: POP
66769: POP
// j := GetClosestHex ( unit , tmp ) ;
66770: LD_ADDR_VAR 0 5
66774: PUSH
66775: LD_VAR 0 1
66779: PPUSH
66780: LD_VAR 0 6
66784: PPUSH
66785: CALL 66072 0 2
66789: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66790: LD_VAR 0 1
66794: PPUSH
66795: LD_VAR 0 5
66799: PUSH
66800: LD_INT 1
66802: ARRAY
66803: PPUSH
66804: LD_VAR 0 5
66808: PUSH
66809: LD_INT 2
66811: ARRAY
66812: PPUSH
66813: CALL_OW 111
// end ;
66817: LD_VAR 0 3
66821: RET
// export function PrepareApemanSoldier ( ) ; begin
66822: LD_INT 0
66824: PPUSH
// uc_nation := 0 ;
66825: LD_ADDR_OWVAR 21
66829: PUSH
66830: LD_INT 0
66832: ST_TO_ADDR
// hc_sex := sex_male ;
66833: LD_ADDR_OWVAR 27
66837: PUSH
66838: LD_INT 1
66840: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66841: LD_ADDR_OWVAR 28
66845: PUSH
66846: LD_INT 15
66848: ST_TO_ADDR
// hc_gallery :=  ;
66849: LD_ADDR_OWVAR 33
66853: PUSH
66854: LD_STRING 
66856: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66857: LD_ADDR_OWVAR 31
66861: PUSH
66862: LD_INT 0
66864: PPUSH
66865: LD_INT 3
66867: PPUSH
66868: CALL_OW 12
66872: PUSH
66873: LD_INT 0
66875: PPUSH
66876: LD_INT 3
66878: PPUSH
66879: CALL_OW 12
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: ST_TO_ADDR
// end ;
66896: LD_VAR 0 1
66900: RET
// export function PrepareApemanEngineer ( ) ; begin
66901: LD_INT 0
66903: PPUSH
// uc_nation := 0 ;
66904: LD_ADDR_OWVAR 21
66908: PUSH
66909: LD_INT 0
66911: ST_TO_ADDR
// hc_sex := sex_male ;
66912: LD_ADDR_OWVAR 27
66916: PUSH
66917: LD_INT 1
66919: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66920: LD_ADDR_OWVAR 28
66924: PUSH
66925: LD_INT 16
66927: ST_TO_ADDR
// hc_gallery :=  ;
66928: LD_ADDR_OWVAR 33
66932: PUSH
66933: LD_STRING 
66935: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66936: LD_ADDR_OWVAR 31
66940: PUSH
66941: LD_INT 0
66943: PPUSH
66944: LD_INT 3
66946: PPUSH
66947: CALL_OW 12
66951: PUSH
66952: LD_INT 0
66954: PPUSH
66955: LD_INT 3
66957: PPUSH
66958: CALL_OW 12
66962: PUSH
66963: LD_INT 0
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: ST_TO_ADDR
// end ;
66975: LD_VAR 0 1
66979: RET
// export function PrepareApeman ( agressivity ) ; begin
66980: LD_INT 0
66982: PPUSH
// uc_side := 0 ;
66983: LD_ADDR_OWVAR 20
66987: PUSH
66988: LD_INT 0
66990: ST_TO_ADDR
// uc_nation := 0 ;
66991: LD_ADDR_OWVAR 21
66995: PUSH
66996: LD_INT 0
66998: ST_TO_ADDR
// hc_sex := sex_male ;
66999: LD_ADDR_OWVAR 27
67003: PUSH
67004: LD_INT 1
67006: ST_TO_ADDR
// hc_class := class_apeman ;
67007: LD_ADDR_OWVAR 28
67011: PUSH
67012: LD_INT 12
67014: ST_TO_ADDR
// hc_gallery :=  ;
67015: LD_ADDR_OWVAR 33
67019: PUSH
67020: LD_STRING 
67022: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67023: LD_ADDR_OWVAR 35
67027: PUSH
67028: LD_VAR 0 1
67032: NEG
67033: PPUSH
67034: LD_VAR 0 1
67038: PPUSH
67039: CALL_OW 12
67043: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67044: LD_ADDR_OWVAR 31
67048: PUSH
67049: LD_INT 0
67051: PPUSH
67052: LD_INT 3
67054: PPUSH
67055: CALL_OW 12
67059: PUSH
67060: LD_INT 0
67062: PPUSH
67063: LD_INT 3
67065: PPUSH
67066: CALL_OW 12
67070: PUSH
67071: LD_INT 0
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: ST_TO_ADDR
// end ;
67083: LD_VAR 0 2
67087: RET
// export function PrepareTiger ( agressivity ) ; begin
67088: LD_INT 0
67090: PPUSH
// uc_side := 0 ;
67091: LD_ADDR_OWVAR 20
67095: PUSH
67096: LD_INT 0
67098: ST_TO_ADDR
// uc_nation := 0 ;
67099: LD_ADDR_OWVAR 21
67103: PUSH
67104: LD_INT 0
67106: ST_TO_ADDR
// hc_class := class_tiger ;
67107: LD_ADDR_OWVAR 28
67111: PUSH
67112: LD_INT 14
67114: ST_TO_ADDR
// hc_gallery :=  ;
67115: LD_ADDR_OWVAR 33
67119: PUSH
67120: LD_STRING 
67122: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67123: LD_ADDR_OWVAR 35
67127: PUSH
67128: LD_VAR 0 1
67132: NEG
67133: PPUSH
67134: LD_VAR 0 1
67138: PPUSH
67139: CALL_OW 12
67143: ST_TO_ADDR
// end ;
67144: LD_VAR 0 2
67148: RET
// export function PrepareEnchidna ( ) ; begin
67149: LD_INT 0
67151: PPUSH
// uc_side := 0 ;
67152: LD_ADDR_OWVAR 20
67156: PUSH
67157: LD_INT 0
67159: ST_TO_ADDR
// uc_nation := 0 ;
67160: LD_ADDR_OWVAR 21
67164: PUSH
67165: LD_INT 0
67167: ST_TO_ADDR
// hc_class := class_baggie ;
67168: LD_ADDR_OWVAR 28
67172: PUSH
67173: LD_INT 13
67175: ST_TO_ADDR
// hc_gallery :=  ;
67176: LD_ADDR_OWVAR 33
67180: PUSH
67181: LD_STRING 
67183: ST_TO_ADDR
// end ;
67184: LD_VAR 0 1
67188: RET
// export function PrepareFrog ( ) ; begin
67189: LD_INT 0
67191: PPUSH
// uc_side := 0 ;
67192: LD_ADDR_OWVAR 20
67196: PUSH
67197: LD_INT 0
67199: ST_TO_ADDR
// uc_nation := 0 ;
67200: LD_ADDR_OWVAR 21
67204: PUSH
67205: LD_INT 0
67207: ST_TO_ADDR
// hc_class := class_frog ;
67208: LD_ADDR_OWVAR 28
67212: PUSH
67213: LD_INT 19
67215: ST_TO_ADDR
// hc_gallery :=  ;
67216: LD_ADDR_OWVAR 33
67220: PUSH
67221: LD_STRING 
67223: ST_TO_ADDR
// end ;
67224: LD_VAR 0 1
67228: RET
// export function PrepareFish ( ) ; begin
67229: LD_INT 0
67231: PPUSH
// uc_side := 0 ;
67232: LD_ADDR_OWVAR 20
67236: PUSH
67237: LD_INT 0
67239: ST_TO_ADDR
// uc_nation := 0 ;
67240: LD_ADDR_OWVAR 21
67244: PUSH
67245: LD_INT 0
67247: ST_TO_ADDR
// hc_class := class_fish ;
67248: LD_ADDR_OWVAR 28
67252: PUSH
67253: LD_INT 20
67255: ST_TO_ADDR
// hc_gallery :=  ;
67256: LD_ADDR_OWVAR 33
67260: PUSH
67261: LD_STRING 
67263: ST_TO_ADDR
// end ;
67264: LD_VAR 0 1
67268: RET
// export function PrepareBird ( ) ; begin
67269: LD_INT 0
67271: PPUSH
// uc_side := 0 ;
67272: LD_ADDR_OWVAR 20
67276: PUSH
67277: LD_INT 0
67279: ST_TO_ADDR
// uc_nation := 0 ;
67280: LD_ADDR_OWVAR 21
67284: PUSH
67285: LD_INT 0
67287: ST_TO_ADDR
// hc_class := class_phororhacos ;
67288: LD_ADDR_OWVAR 28
67292: PUSH
67293: LD_INT 18
67295: ST_TO_ADDR
// hc_gallery :=  ;
67296: LD_ADDR_OWVAR 33
67300: PUSH
67301: LD_STRING 
67303: ST_TO_ADDR
// end ;
67304: LD_VAR 0 1
67308: RET
// export function PrepareHorse ( ) ; begin
67309: LD_INT 0
67311: PPUSH
// uc_side := 0 ;
67312: LD_ADDR_OWVAR 20
67316: PUSH
67317: LD_INT 0
67319: ST_TO_ADDR
// uc_nation := 0 ;
67320: LD_ADDR_OWVAR 21
67324: PUSH
67325: LD_INT 0
67327: ST_TO_ADDR
// hc_class := class_horse ;
67328: LD_ADDR_OWVAR 28
67332: PUSH
67333: LD_INT 21
67335: ST_TO_ADDR
// hc_gallery :=  ;
67336: LD_ADDR_OWVAR 33
67340: PUSH
67341: LD_STRING 
67343: ST_TO_ADDR
// end ;
67344: LD_VAR 0 1
67348: RET
// export function PrepareMastodont ( ) ; begin
67349: LD_INT 0
67351: PPUSH
// uc_side := 0 ;
67352: LD_ADDR_OWVAR 20
67356: PUSH
67357: LD_INT 0
67359: ST_TO_ADDR
// uc_nation := 0 ;
67360: LD_ADDR_OWVAR 21
67364: PUSH
67365: LD_INT 0
67367: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67368: LD_ADDR_OWVAR 37
67372: PUSH
67373: LD_INT 31
67375: ST_TO_ADDR
// vc_control := control_rider ;
67376: LD_ADDR_OWVAR 38
67380: PUSH
67381: LD_INT 4
67383: ST_TO_ADDR
// end ;
67384: LD_VAR 0 1
67388: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67389: LD_INT 0
67391: PPUSH
67392: PPUSH
67393: PPUSH
// uc_side = 0 ;
67394: LD_ADDR_OWVAR 20
67398: PUSH
67399: LD_INT 0
67401: ST_TO_ADDR
// uc_nation = 0 ;
67402: LD_ADDR_OWVAR 21
67406: PUSH
67407: LD_INT 0
67409: ST_TO_ADDR
// InitHc_All ( ) ;
67410: CALL_OW 584
// InitVc ;
67414: CALL_OW 20
// if mastodonts then
67418: LD_VAR 0 6
67422: IFFALSE 67489
// for i = 1 to mastodonts do
67424: LD_ADDR_VAR 0 11
67428: PUSH
67429: DOUBLE
67430: LD_INT 1
67432: DEC
67433: ST_TO_ADDR
67434: LD_VAR 0 6
67438: PUSH
67439: FOR_TO
67440: IFFALSE 67487
// begin vc_chassis := 31 ;
67442: LD_ADDR_OWVAR 37
67446: PUSH
67447: LD_INT 31
67449: ST_TO_ADDR
// vc_control := control_rider ;
67450: LD_ADDR_OWVAR 38
67454: PUSH
67455: LD_INT 4
67457: ST_TO_ADDR
// animal := CreateVehicle ;
67458: LD_ADDR_VAR 0 12
67462: PUSH
67463: CALL_OW 45
67467: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67468: LD_VAR 0 12
67472: PPUSH
67473: LD_VAR 0 8
67477: PPUSH
67478: LD_INT 0
67480: PPUSH
67481: CALL 69617 0 3
// end ;
67485: GO 67439
67487: POP
67488: POP
// if horses then
67489: LD_VAR 0 5
67493: IFFALSE 67560
// for i = 1 to horses do
67495: LD_ADDR_VAR 0 11
67499: PUSH
67500: DOUBLE
67501: LD_INT 1
67503: DEC
67504: ST_TO_ADDR
67505: LD_VAR 0 5
67509: PUSH
67510: FOR_TO
67511: IFFALSE 67558
// begin hc_class := 21 ;
67513: LD_ADDR_OWVAR 28
67517: PUSH
67518: LD_INT 21
67520: ST_TO_ADDR
// hc_gallery :=  ;
67521: LD_ADDR_OWVAR 33
67525: PUSH
67526: LD_STRING 
67528: ST_TO_ADDR
// animal := CreateHuman ;
67529: LD_ADDR_VAR 0 12
67533: PUSH
67534: CALL_OW 44
67538: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67539: LD_VAR 0 12
67543: PPUSH
67544: LD_VAR 0 8
67548: PPUSH
67549: LD_INT 0
67551: PPUSH
67552: CALL 69617 0 3
// end ;
67556: GO 67510
67558: POP
67559: POP
// if birds then
67560: LD_VAR 0 1
67564: IFFALSE 67631
// for i = 1 to birds do
67566: LD_ADDR_VAR 0 11
67570: PUSH
67571: DOUBLE
67572: LD_INT 1
67574: DEC
67575: ST_TO_ADDR
67576: LD_VAR 0 1
67580: PUSH
67581: FOR_TO
67582: IFFALSE 67629
// begin hc_class := 18 ;
67584: LD_ADDR_OWVAR 28
67588: PUSH
67589: LD_INT 18
67591: ST_TO_ADDR
// hc_gallery =  ;
67592: LD_ADDR_OWVAR 33
67596: PUSH
67597: LD_STRING 
67599: ST_TO_ADDR
// animal := CreateHuman ;
67600: LD_ADDR_VAR 0 12
67604: PUSH
67605: CALL_OW 44
67609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67610: LD_VAR 0 12
67614: PPUSH
67615: LD_VAR 0 8
67619: PPUSH
67620: LD_INT 0
67622: PPUSH
67623: CALL 69617 0 3
// end ;
67627: GO 67581
67629: POP
67630: POP
// if tigers then
67631: LD_VAR 0 2
67635: IFFALSE 67719
// for i = 1 to tigers do
67637: LD_ADDR_VAR 0 11
67641: PUSH
67642: DOUBLE
67643: LD_INT 1
67645: DEC
67646: ST_TO_ADDR
67647: LD_VAR 0 2
67651: PUSH
67652: FOR_TO
67653: IFFALSE 67717
// begin hc_class = class_tiger ;
67655: LD_ADDR_OWVAR 28
67659: PUSH
67660: LD_INT 14
67662: ST_TO_ADDR
// hc_gallery =  ;
67663: LD_ADDR_OWVAR 33
67667: PUSH
67668: LD_STRING 
67670: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67671: LD_ADDR_OWVAR 35
67675: PUSH
67676: LD_INT 7
67678: NEG
67679: PPUSH
67680: LD_INT 7
67682: PPUSH
67683: CALL_OW 12
67687: ST_TO_ADDR
// animal := CreateHuman ;
67688: LD_ADDR_VAR 0 12
67692: PUSH
67693: CALL_OW 44
67697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67698: LD_VAR 0 12
67702: PPUSH
67703: LD_VAR 0 8
67707: PPUSH
67708: LD_INT 0
67710: PPUSH
67711: CALL 69617 0 3
// end ;
67715: GO 67652
67717: POP
67718: POP
// if apemans then
67719: LD_VAR 0 3
67723: IFFALSE 67846
// for i = 1 to apemans do
67725: LD_ADDR_VAR 0 11
67729: PUSH
67730: DOUBLE
67731: LD_INT 1
67733: DEC
67734: ST_TO_ADDR
67735: LD_VAR 0 3
67739: PUSH
67740: FOR_TO
67741: IFFALSE 67844
// begin hc_class = class_apeman ;
67743: LD_ADDR_OWVAR 28
67747: PUSH
67748: LD_INT 12
67750: ST_TO_ADDR
// hc_gallery =  ;
67751: LD_ADDR_OWVAR 33
67755: PUSH
67756: LD_STRING 
67758: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67759: LD_ADDR_OWVAR 35
67763: PUSH
67764: LD_INT 2
67766: NEG
67767: PPUSH
67768: LD_INT 2
67770: PPUSH
67771: CALL_OW 12
67775: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67776: LD_ADDR_OWVAR 31
67780: PUSH
67781: LD_INT 1
67783: PPUSH
67784: LD_INT 3
67786: PPUSH
67787: CALL_OW 12
67791: PUSH
67792: LD_INT 1
67794: PPUSH
67795: LD_INT 3
67797: PPUSH
67798: CALL_OW 12
67802: PUSH
67803: LD_INT 0
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: ST_TO_ADDR
// animal := CreateHuman ;
67815: LD_ADDR_VAR 0 12
67819: PUSH
67820: CALL_OW 44
67824: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67825: LD_VAR 0 12
67829: PPUSH
67830: LD_VAR 0 8
67834: PPUSH
67835: LD_INT 0
67837: PPUSH
67838: CALL 69617 0 3
// end ;
67842: GO 67740
67844: POP
67845: POP
// if enchidnas then
67846: LD_VAR 0 4
67850: IFFALSE 67917
// for i = 1 to enchidnas do
67852: LD_ADDR_VAR 0 11
67856: PUSH
67857: DOUBLE
67858: LD_INT 1
67860: DEC
67861: ST_TO_ADDR
67862: LD_VAR 0 4
67866: PUSH
67867: FOR_TO
67868: IFFALSE 67915
// begin hc_class = 13 ;
67870: LD_ADDR_OWVAR 28
67874: PUSH
67875: LD_INT 13
67877: ST_TO_ADDR
// hc_gallery =  ;
67878: LD_ADDR_OWVAR 33
67882: PUSH
67883: LD_STRING 
67885: ST_TO_ADDR
// animal := CreateHuman ;
67886: LD_ADDR_VAR 0 12
67890: PUSH
67891: CALL_OW 44
67895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67896: LD_VAR 0 12
67900: PPUSH
67901: LD_VAR 0 8
67905: PPUSH
67906: LD_INT 0
67908: PPUSH
67909: CALL 69617 0 3
// end ;
67913: GO 67867
67915: POP
67916: POP
// if fishes then
67917: LD_VAR 0 7
67921: IFFALSE 67988
// for i = 1 to fishes do
67923: LD_ADDR_VAR 0 11
67927: PUSH
67928: DOUBLE
67929: LD_INT 1
67931: DEC
67932: ST_TO_ADDR
67933: LD_VAR 0 7
67937: PUSH
67938: FOR_TO
67939: IFFALSE 67986
// begin hc_class = 20 ;
67941: LD_ADDR_OWVAR 28
67945: PUSH
67946: LD_INT 20
67948: ST_TO_ADDR
// hc_gallery =  ;
67949: LD_ADDR_OWVAR 33
67953: PUSH
67954: LD_STRING 
67956: ST_TO_ADDR
// animal := CreateHuman ;
67957: LD_ADDR_VAR 0 12
67961: PUSH
67962: CALL_OW 44
67966: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67967: LD_VAR 0 12
67971: PPUSH
67972: LD_VAR 0 9
67976: PPUSH
67977: LD_INT 0
67979: PPUSH
67980: CALL 69617 0 3
// end ;
67984: GO 67938
67986: POP
67987: POP
// end ;
67988: LD_VAR 0 10
67992: RET
// export function WantHeal ( sci , unit ) ; begin
67993: LD_INT 0
67995: PPUSH
// if GetTaskList ( sci ) > 0 then
67996: LD_VAR 0 1
68000: PPUSH
68001: CALL_OW 437
68005: PUSH
68006: LD_INT 0
68008: GREATER
68009: IFFALSE 68079
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68011: LD_VAR 0 1
68015: PPUSH
68016: CALL_OW 437
68020: PUSH
68021: LD_INT 1
68023: ARRAY
68024: PUSH
68025: LD_INT 1
68027: ARRAY
68028: PUSH
68029: LD_STRING l
68031: EQUAL
68032: PUSH
68033: LD_VAR 0 1
68037: PPUSH
68038: CALL_OW 437
68042: PUSH
68043: LD_INT 1
68045: ARRAY
68046: PUSH
68047: LD_INT 4
68049: ARRAY
68050: PUSH
68051: LD_VAR 0 2
68055: EQUAL
68056: AND
68057: IFFALSE 68069
// result := true else
68059: LD_ADDR_VAR 0 3
68063: PUSH
68064: LD_INT 1
68066: ST_TO_ADDR
68067: GO 68077
// result := false ;
68069: LD_ADDR_VAR 0 3
68073: PUSH
68074: LD_INT 0
68076: ST_TO_ADDR
// end else
68077: GO 68087
// result := false ;
68079: LD_ADDR_VAR 0 3
68083: PUSH
68084: LD_INT 0
68086: ST_TO_ADDR
// end ;
68087: LD_VAR 0 3
68091: RET
// export function HealTarget ( sci ) ; begin
68092: LD_INT 0
68094: PPUSH
// if not sci then
68095: LD_VAR 0 1
68099: NOT
68100: IFFALSE 68104
// exit ;
68102: GO 68169
// result := 0 ;
68104: LD_ADDR_VAR 0 2
68108: PUSH
68109: LD_INT 0
68111: ST_TO_ADDR
// if GetTaskList ( sci ) then
68112: LD_VAR 0 1
68116: PPUSH
68117: CALL_OW 437
68121: IFFALSE 68169
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68123: LD_VAR 0 1
68127: PPUSH
68128: CALL_OW 437
68132: PUSH
68133: LD_INT 1
68135: ARRAY
68136: PUSH
68137: LD_INT 1
68139: ARRAY
68140: PUSH
68141: LD_STRING l
68143: EQUAL
68144: IFFALSE 68169
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68146: LD_ADDR_VAR 0 2
68150: PUSH
68151: LD_VAR 0 1
68155: PPUSH
68156: CALL_OW 437
68160: PUSH
68161: LD_INT 1
68163: ARRAY
68164: PUSH
68165: LD_INT 4
68167: ARRAY
68168: ST_TO_ADDR
// end ;
68169: LD_VAR 0 2
68173: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68174: LD_INT 0
68176: PPUSH
68177: PPUSH
68178: PPUSH
68179: PPUSH
// if not base_units then
68180: LD_VAR 0 1
68184: NOT
68185: IFFALSE 68189
// exit ;
68187: GO 68276
// result := false ;
68189: LD_ADDR_VAR 0 2
68193: PUSH
68194: LD_INT 0
68196: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68197: LD_ADDR_VAR 0 5
68201: PUSH
68202: LD_VAR 0 1
68206: PPUSH
68207: LD_INT 21
68209: PUSH
68210: LD_INT 3
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PPUSH
68217: CALL_OW 72
68221: ST_TO_ADDR
// if not tmp then
68222: LD_VAR 0 5
68226: NOT
68227: IFFALSE 68231
// exit ;
68229: GO 68276
// for i in tmp do
68231: LD_ADDR_VAR 0 3
68235: PUSH
68236: LD_VAR 0 5
68240: PUSH
68241: FOR_IN
68242: IFFALSE 68274
// begin result := EnemyInRange ( i , 22 ) ;
68244: LD_ADDR_VAR 0 2
68248: PUSH
68249: LD_VAR 0 3
68253: PPUSH
68254: LD_INT 22
68256: PPUSH
68257: CALL 65874 0 2
68261: ST_TO_ADDR
// if result then
68262: LD_VAR 0 2
68266: IFFALSE 68272
// exit ;
68268: POP
68269: POP
68270: GO 68276
// end ;
68272: GO 68241
68274: POP
68275: POP
// end ;
68276: LD_VAR 0 2
68280: RET
// export function FilterByTag ( units , tag ) ; begin
68281: LD_INT 0
68283: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68284: LD_ADDR_VAR 0 3
68288: PUSH
68289: LD_VAR 0 1
68293: PPUSH
68294: LD_INT 120
68296: PUSH
68297: LD_VAR 0 2
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PPUSH
68306: CALL_OW 72
68310: ST_TO_ADDR
// end ;
68311: LD_VAR 0 3
68315: RET
// export function IsDriver ( un ) ; begin
68316: LD_INT 0
68318: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68319: LD_ADDR_VAR 0 2
68323: PUSH
68324: LD_VAR 0 1
68328: PUSH
68329: LD_INT 55
68331: PUSH
68332: EMPTY
68333: LIST
68334: PPUSH
68335: CALL_OW 69
68339: IN
68340: ST_TO_ADDR
// end ;
68341: LD_VAR 0 2
68345: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68346: LD_INT 0
68348: PPUSH
68349: PPUSH
// list := [ ] ;
68350: LD_ADDR_VAR 0 5
68354: PUSH
68355: EMPTY
68356: ST_TO_ADDR
// case d of 0 :
68357: LD_VAR 0 3
68361: PUSH
68362: LD_INT 0
68364: DOUBLE
68365: EQUAL
68366: IFTRUE 68370
68368: GO 68503
68370: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68371: LD_ADDR_VAR 0 5
68375: PUSH
68376: LD_VAR 0 1
68380: PUSH
68381: LD_INT 4
68383: MINUS
68384: PUSH
68385: LD_VAR 0 2
68389: PUSH
68390: LD_INT 4
68392: MINUS
68393: PUSH
68394: LD_INT 2
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: LIST
68401: PUSH
68402: LD_VAR 0 1
68406: PUSH
68407: LD_INT 3
68409: MINUS
68410: PUSH
68411: LD_VAR 0 2
68415: PUSH
68416: LD_INT 1
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: PUSH
68424: LD_VAR 0 1
68428: PUSH
68429: LD_INT 4
68431: PLUS
68432: PUSH
68433: LD_VAR 0 2
68437: PUSH
68438: LD_INT 4
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: LIST
68445: PUSH
68446: LD_VAR 0 1
68450: PUSH
68451: LD_INT 3
68453: PLUS
68454: PUSH
68455: LD_VAR 0 2
68459: PUSH
68460: LD_INT 3
68462: PLUS
68463: PUSH
68464: LD_INT 5
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: LIST
68471: PUSH
68472: LD_VAR 0 1
68476: PUSH
68477: LD_VAR 0 2
68481: PUSH
68482: LD_INT 4
68484: PLUS
68485: PUSH
68486: LD_INT 0
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: LIST
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: ST_TO_ADDR
// end ; 1 :
68501: GO 69201
68503: LD_INT 1
68505: DOUBLE
68506: EQUAL
68507: IFTRUE 68511
68509: GO 68644
68511: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68512: LD_ADDR_VAR 0 5
68516: PUSH
68517: LD_VAR 0 1
68521: PUSH
68522: LD_VAR 0 2
68526: PUSH
68527: LD_INT 4
68529: MINUS
68530: PUSH
68531: LD_INT 3
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: LIST
68538: PUSH
68539: LD_VAR 0 1
68543: PUSH
68544: LD_INT 3
68546: MINUS
68547: PUSH
68548: LD_VAR 0 2
68552: PUSH
68553: LD_INT 3
68555: MINUS
68556: PUSH
68557: LD_INT 2
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: LIST
68564: PUSH
68565: LD_VAR 0 1
68569: PUSH
68570: LD_INT 4
68572: MINUS
68573: PUSH
68574: LD_VAR 0 2
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: LIST
68586: PUSH
68587: LD_VAR 0 1
68591: PUSH
68592: LD_VAR 0 2
68596: PUSH
68597: LD_INT 3
68599: PLUS
68600: PUSH
68601: LD_INT 0
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: LIST
68608: PUSH
68609: LD_VAR 0 1
68613: PUSH
68614: LD_INT 4
68616: PLUS
68617: PUSH
68618: LD_VAR 0 2
68622: PUSH
68623: LD_INT 4
68625: PLUS
68626: PUSH
68627: LD_INT 5
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: LIST
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: ST_TO_ADDR
// end ; 2 :
68642: GO 69201
68644: LD_INT 2
68646: DOUBLE
68647: EQUAL
68648: IFTRUE 68652
68650: GO 68781
68652: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68653: LD_ADDR_VAR 0 5
68657: PUSH
68658: LD_VAR 0 1
68662: PUSH
68663: LD_VAR 0 2
68667: PUSH
68668: LD_INT 3
68670: MINUS
68671: PUSH
68672: LD_INT 3
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: LIST
68679: PUSH
68680: LD_VAR 0 1
68684: PUSH
68685: LD_INT 4
68687: PLUS
68688: PUSH
68689: LD_VAR 0 2
68693: PUSH
68694: LD_INT 4
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: LIST
68701: PUSH
68702: LD_VAR 0 1
68706: PUSH
68707: LD_VAR 0 2
68711: PUSH
68712: LD_INT 4
68714: PLUS
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: LIST
68723: PUSH
68724: LD_VAR 0 1
68728: PUSH
68729: LD_INT 3
68731: MINUS
68732: PUSH
68733: LD_VAR 0 2
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: LIST
68745: PUSH
68746: LD_VAR 0 1
68750: PUSH
68751: LD_INT 4
68753: MINUS
68754: PUSH
68755: LD_VAR 0 2
68759: PUSH
68760: LD_INT 4
68762: MINUS
68763: PUSH
68764: LD_INT 2
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: LIST
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: ST_TO_ADDR
// end ; 3 :
68779: GO 69201
68781: LD_INT 3
68783: DOUBLE
68784: EQUAL
68785: IFTRUE 68789
68787: GO 68922
68789: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68790: LD_ADDR_VAR 0 5
68794: PUSH
68795: LD_VAR 0 1
68799: PUSH
68800: LD_INT 3
68802: PLUS
68803: PUSH
68804: LD_VAR 0 2
68808: PUSH
68809: LD_INT 4
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: LIST
68816: PUSH
68817: LD_VAR 0 1
68821: PUSH
68822: LD_INT 4
68824: PLUS
68825: PUSH
68826: LD_VAR 0 2
68830: PUSH
68831: LD_INT 4
68833: PLUS
68834: PUSH
68835: LD_INT 5
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: LIST
68842: PUSH
68843: LD_VAR 0 1
68847: PUSH
68848: LD_INT 4
68850: MINUS
68851: PUSH
68852: LD_VAR 0 2
68856: PUSH
68857: LD_INT 1
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: LIST
68864: PUSH
68865: LD_VAR 0 1
68869: PUSH
68870: LD_VAR 0 2
68874: PUSH
68875: LD_INT 4
68877: MINUS
68878: PUSH
68879: LD_INT 3
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: LIST
68886: PUSH
68887: LD_VAR 0 1
68891: PUSH
68892: LD_INT 3
68894: MINUS
68895: PUSH
68896: LD_VAR 0 2
68900: PUSH
68901: LD_INT 3
68903: MINUS
68904: PUSH
68905: LD_INT 2
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: LIST
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: ST_TO_ADDR
// end ; 4 :
68920: GO 69201
68922: LD_INT 4
68924: DOUBLE
68925: EQUAL
68926: IFTRUE 68930
68928: GO 69063
68930: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68931: LD_ADDR_VAR 0 5
68935: PUSH
68936: LD_VAR 0 1
68940: PUSH
68941: LD_VAR 0 2
68945: PUSH
68946: LD_INT 4
68948: PLUS
68949: PUSH
68950: LD_INT 0
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: LIST
68957: PUSH
68958: LD_VAR 0 1
68962: PUSH
68963: LD_INT 3
68965: PLUS
68966: PUSH
68967: LD_VAR 0 2
68971: PUSH
68972: LD_INT 3
68974: PLUS
68975: PUSH
68976: LD_INT 5
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: LIST
68983: PUSH
68984: LD_VAR 0 1
68988: PUSH
68989: LD_INT 4
68991: PLUS
68992: PUSH
68993: LD_VAR 0 2
68997: PUSH
68998: LD_INT 4
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: LIST
69005: PUSH
69006: LD_VAR 0 1
69010: PUSH
69011: LD_VAR 0 2
69015: PUSH
69016: LD_INT 3
69018: MINUS
69019: PUSH
69020: LD_INT 3
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: LIST
69027: PUSH
69028: LD_VAR 0 1
69032: PUSH
69033: LD_INT 4
69035: MINUS
69036: PUSH
69037: LD_VAR 0 2
69041: PUSH
69042: LD_INT 4
69044: MINUS
69045: PUSH
69046: LD_INT 2
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: LIST
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: ST_TO_ADDR
// end ; 5 :
69061: GO 69201
69063: LD_INT 5
69065: DOUBLE
69066: EQUAL
69067: IFTRUE 69071
69069: GO 69200
69071: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69072: LD_ADDR_VAR 0 5
69076: PUSH
69077: LD_VAR 0 1
69081: PUSH
69082: LD_INT 4
69084: MINUS
69085: PUSH
69086: LD_VAR 0 2
69090: PUSH
69091: LD_INT 1
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: LIST
69098: PUSH
69099: LD_VAR 0 1
69103: PUSH
69104: LD_VAR 0 2
69108: PUSH
69109: LD_INT 4
69111: MINUS
69112: PUSH
69113: LD_INT 3
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: LIST
69120: PUSH
69121: LD_VAR 0 1
69125: PUSH
69126: LD_INT 4
69128: PLUS
69129: PUSH
69130: LD_VAR 0 2
69134: PUSH
69135: LD_INT 4
69137: PLUS
69138: PUSH
69139: LD_INT 5
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: LIST
69146: PUSH
69147: LD_VAR 0 1
69151: PUSH
69152: LD_INT 3
69154: PLUS
69155: PUSH
69156: LD_VAR 0 2
69160: PUSH
69161: LD_INT 4
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: LIST
69168: PUSH
69169: LD_VAR 0 1
69173: PUSH
69174: LD_VAR 0 2
69178: PUSH
69179: LD_INT 3
69181: PLUS
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: LIST
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: ST_TO_ADDR
// end ; end ;
69198: GO 69201
69200: POP
// result := list ;
69201: LD_ADDR_VAR 0 4
69205: PUSH
69206: LD_VAR 0 5
69210: ST_TO_ADDR
// end ;
69211: LD_VAR 0 4
69215: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69216: LD_INT 0
69218: PPUSH
69219: PPUSH
69220: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69221: LD_VAR 0 1
69225: NOT
69226: PUSH
69227: LD_VAR 0 2
69231: PUSH
69232: LD_INT 1
69234: PUSH
69235: LD_INT 2
69237: PUSH
69238: LD_INT 3
69240: PUSH
69241: LD_INT 4
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: IN
69250: NOT
69251: OR
69252: IFFALSE 69256
// exit ;
69254: GO 69339
// tmp := [ ] ;
69256: LD_ADDR_VAR 0 5
69260: PUSH
69261: EMPTY
69262: ST_TO_ADDR
// for i in units do
69263: LD_ADDR_VAR 0 4
69267: PUSH
69268: LD_VAR 0 1
69272: PUSH
69273: FOR_IN
69274: IFFALSE 69308
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69276: LD_ADDR_VAR 0 5
69280: PUSH
69281: LD_VAR 0 5
69285: PPUSH
69286: LD_VAR 0 4
69290: PPUSH
69291: LD_VAR 0 2
69295: PPUSH
69296: CALL_OW 259
69300: PPUSH
69301: CALL 70712 0 2
69305: ST_TO_ADDR
69306: GO 69273
69308: POP
69309: POP
// if not tmp then
69310: LD_VAR 0 5
69314: NOT
69315: IFFALSE 69319
// exit ;
69317: GO 69339
// result := SortListByListDesc ( units , tmp ) ;
69319: LD_ADDR_VAR 0 3
69323: PUSH
69324: LD_VAR 0 1
69328: PPUSH
69329: LD_VAR 0 5
69333: PPUSH
69334: CALL_OW 77
69338: ST_TO_ADDR
// end ;
69339: LD_VAR 0 3
69343: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69344: LD_INT 0
69346: PPUSH
69347: PPUSH
69348: PPUSH
// result := false ;
69349: LD_ADDR_VAR 0 3
69353: PUSH
69354: LD_INT 0
69356: ST_TO_ADDR
// if not building then
69357: LD_VAR 0 2
69361: NOT
69362: IFFALSE 69366
// exit ;
69364: GO 69504
// x := GetX ( building ) ;
69366: LD_ADDR_VAR 0 4
69370: PUSH
69371: LD_VAR 0 2
69375: PPUSH
69376: CALL_OW 250
69380: ST_TO_ADDR
// y := GetY ( building ) ;
69381: LD_ADDR_VAR 0 5
69385: PUSH
69386: LD_VAR 0 2
69390: PPUSH
69391: CALL_OW 251
69395: ST_TO_ADDR
// if not x or not y then
69396: LD_VAR 0 4
69400: NOT
69401: PUSH
69402: LD_VAR 0 5
69406: NOT
69407: OR
69408: IFFALSE 69412
// exit ;
69410: GO 69504
// if GetTaskList ( unit ) then
69412: LD_VAR 0 1
69416: PPUSH
69417: CALL_OW 437
69421: IFFALSE 69504
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69423: LD_STRING e
69425: PUSH
69426: LD_VAR 0 1
69430: PPUSH
69431: CALL_OW 437
69435: PUSH
69436: LD_INT 1
69438: ARRAY
69439: PUSH
69440: LD_INT 1
69442: ARRAY
69443: EQUAL
69444: PUSH
69445: LD_VAR 0 4
69449: PUSH
69450: LD_VAR 0 1
69454: PPUSH
69455: CALL_OW 437
69459: PUSH
69460: LD_INT 1
69462: ARRAY
69463: PUSH
69464: LD_INT 2
69466: ARRAY
69467: EQUAL
69468: AND
69469: PUSH
69470: LD_VAR 0 5
69474: PUSH
69475: LD_VAR 0 1
69479: PPUSH
69480: CALL_OW 437
69484: PUSH
69485: LD_INT 1
69487: ARRAY
69488: PUSH
69489: LD_INT 3
69491: ARRAY
69492: EQUAL
69493: AND
69494: IFFALSE 69504
// result := true end ;
69496: LD_ADDR_VAR 0 3
69500: PUSH
69501: LD_INT 1
69503: ST_TO_ADDR
// end ;
69504: LD_VAR 0 3
69508: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69509: LD_INT 0
69511: PPUSH
// result := false ;
69512: LD_ADDR_VAR 0 4
69516: PUSH
69517: LD_INT 0
69519: ST_TO_ADDR
// if GetTaskList ( unit ) then
69520: LD_VAR 0 1
69524: PPUSH
69525: CALL_OW 437
69529: IFFALSE 69612
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69531: LD_STRING M
69533: PUSH
69534: LD_VAR 0 1
69538: PPUSH
69539: CALL_OW 437
69543: PUSH
69544: LD_INT 1
69546: ARRAY
69547: PUSH
69548: LD_INT 1
69550: ARRAY
69551: EQUAL
69552: PUSH
69553: LD_VAR 0 2
69557: PUSH
69558: LD_VAR 0 1
69562: PPUSH
69563: CALL_OW 437
69567: PUSH
69568: LD_INT 1
69570: ARRAY
69571: PUSH
69572: LD_INT 2
69574: ARRAY
69575: EQUAL
69576: AND
69577: PUSH
69578: LD_VAR 0 3
69582: PUSH
69583: LD_VAR 0 1
69587: PPUSH
69588: CALL_OW 437
69592: PUSH
69593: LD_INT 1
69595: ARRAY
69596: PUSH
69597: LD_INT 3
69599: ARRAY
69600: EQUAL
69601: AND
69602: IFFALSE 69612
// result := true ;
69604: LD_ADDR_VAR 0 4
69608: PUSH
69609: LD_INT 1
69611: ST_TO_ADDR
// end ; end ;
69612: LD_VAR 0 4
69616: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69617: LD_INT 0
69619: PPUSH
69620: PPUSH
69621: PPUSH
69622: PPUSH
// if not unit or not area then
69623: LD_VAR 0 1
69627: NOT
69628: PUSH
69629: LD_VAR 0 2
69633: NOT
69634: OR
69635: IFFALSE 69639
// exit ;
69637: GO 69815
// tmp := AreaToList ( area , i ) ;
69639: LD_ADDR_VAR 0 6
69643: PUSH
69644: LD_VAR 0 2
69648: PPUSH
69649: LD_VAR 0 5
69653: PPUSH
69654: CALL_OW 517
69658: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69659: LD_ADDR_VAR 0 5
69663: PUSH
69664: DOUBLE
69665: LD_INT 1
69667: DEC
69668: ST_TO_ADDR
69669: LD_VAR 0 6
69673: PUSH
69674: LD_INT 1
69676: ARRAY
69677: PUSH
69678: FOR_TO
69679: IFFALSE 69813
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69681: LD_ADDR_VAR 0 7
69685: PUSH
69686: LD_VAR 0 6
69690: PUSH
69691: LD_INT 1
69693: ARRAY
69694: PUSH
69695: LD_VAR 0 5
69699: ARRAY
69700: PUSH
69701: LD_VAR 0 6
69705: PUSH
69706: LD_INT 2
69708: ARRAY
69709: PUSH
69710: LD_VAR 0 5
69714: ARRAY
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69720: LD_INT 92
69722: PUSH
69723: LD_VAR 0 7
69727: PUSH
69728: LD_INT 1
69730: ARRAY
69731: PUSH
69732: LD_VAR 0 7
69736: PUSH
69737: LD_INT 2
69739: ARRAY
69740: PUSH
69741: LD_INT 2
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: PPUSH
69750: CALL_OW 69
69754: PUSH
69755: LD_INT 0
69757: EQUAL
69758: IFFALSE 69811
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69760: LD_VAR 0 1
69764: PPUSH
69765: LD_VAR 0 7
69769: PUSH
69770: LD_INT 1
69772: ARRAY
69773: PPUSH
69774: LD_VAR 0 7
69778: PUSH
69779: LD_INT 2
69781: ARRAY
69782: PPUSH
69783: LD_VAR 0 3
69787: PPUSH
69788: CALL_OW 48
// result := IsPlaced ( unit ) ;
69792: LD_ADDR_VAR 0 4
69796: PUSH
69797: LD_VAR 0 1
69801: PPUSH
69802: CALL_OW 305
69806: ST_TO_ADDR
// exit ;
69807: POP
69808: POP
69809: GO 69815
// end ; end ;
69811: GO 69678
69813: POP
69814: POP
// end ;
69815: LD_VAR 0 4
69819: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69820: LD_INT 0
69822: PPUSH
69823: PPUSH
69824: PPUSH
// if not side or side > 8 then
69825: LD_VAR 0 1
69829: NOT
69830: PUSH
69831: LD_VAR 0 1
69835: PUSH
69836: LD_INT 8
69838: GREATER
69839: OR
69840: IFFALSE 69844
// exit ;
69842: GO 70031
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69844: LD_ADDR_VAR 0 4
69848: PUSH
69849: LD_INT 22
69851: PUSH
69852: LD_VAR 0 1
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 21
69863: PUSH
69864: LD_INT 3
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PPUSH
69875: CALL_OW 69
69879: ST_TO_ADDR
// if not tmp then
69880: LD_VAR 0 4
69884: NOT
69885: IFFALSE 69889
// exit ;
69887: GO 70031
// enable_addtolog := true ;
69889: LD_ADDR_OWVAR 81
69893: PUSH
69894: LD_INT 1
69896: ST_TO_ADDR
// AddToLog ( [ ) ;
69897: LD_STRING [
69899: PPUSH
69900: CALL_OW 561
// for i in tmp do
69904: LD_ADDR_VAR 0 3
69908: PUSH
69909: LD_VAR 0 4
69913: PUSH
69914: FOR_IN
69915: IFFALSE 70022
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69917: LD_STRING [
69919: PUSH
69920: LD_VAR 0 3
69924: PPUSH
69925: CALL_OW 266
69929: STR
69930: PUSH
69931: LD_STRING , 
69933: STR
69934: PUSH
69935: LD_VAR 0 3
69939: PPUSH
69940: CALL_OW 250
69944: STR
69945: PUSH
69946: LD_STRING , 
69948: STR
69949: PUSH
69950: LD_VAR 0 3
69954: PPUSH
69955: CALL_OW 251
69959: STR
69960: PUSH
69961: LD_STRING , 
69963: STR
69964: PUSH
69965: LD_VAR 0 3
69969: PPUSH
69970: CALL_OW 254
69974: STR
69975: PUSH
69976: LD_STRING , 
69978: STR
69979: PUSH
69980: LD_VAR 0 3
69984: PPUSH
69985: LD_INT 1
69987: PPUSH
69988: CALL_OW 268
69992: STR
69993: PUSH
69994: LD_STRING , 
69996: STR
69997: PUSH
69998: LD_VAR 0 3
70002: PPUSH
70003: LD_INT 2
70005: PPUSH
70006: CALL_OW 268
70010: STR
70011: PUSH
70012: LD_STRING ],
70014: STR
70015: PPUSH
70016: CALL_OW 561
// end ;
70020: GO 69914
70022: POP
70023: POP
// AddToLog ( ]; ) ;
70024: LD_STRING ];
70026: PPUSH
70027: CALL_OW 561
// end ;
70031: LD_VAR 0 2
70035: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70036: LD_INT 0
70038: PPUSH
70039: PPUSH
70040: PPUSH
70041: PPUSH
70042: PPUSH
// if not area or not rate or not max then
70043: LD_VAR 0 1
70047: NOT
70048: PUSH
70049: LD_VAR 0 2
70053: NOT
70054: OR
70055: PUSH
70056: LD_VAR 0 4
70060: NOT
70061: OR
70062: IFFALSE 70066
// exit ;
70064: GO 70255
// while 1 do
70066: LD_INT 1
70068: IFFALSE 70255
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70070: LD_ADDR_VAR 0 9
70074: PUSH
70075: LD_VAR 0 1
70079: PPUSH
70080: LD_INT 1
70082: PPUSH
70083: CALL_OW 287
70087: PUSH
70088: LD_INT 10
70090: MUL
70091: ST_TO_ADDR
// r := rate / 10 ;
70092: LD_ADDR_VAR 0 7
70096: PUSH
70097: LD_VAR 0 2
70101: PUSH
70102: LD_INT 10
70104: DIVREAL
70105: ST_TO_ADDR
// time := 1 1$00 ;
70106: LD_ADDR_VAR 0 8
70110: PUSH
70111: LD_INT 2100
70113: ST_TO_ADDR
// if amount < min then
70114: LD_VAR 0 9
70118: PUSH
70119: LD_VAR 0 3
70123: LESS
70124: IFFALSE 70142
// r := r * 2 else
70126: LD_ADDR_VAR 0 7
70130: PUSH
70131: LD_VAR 0 7
70135: PUSH
70136: LD_INT 2
70138: MUL
70139: ST_TO_ADDR
70140: GO 70168
// if amount > max then
70142: LD_VAR 0 9
70146: PUSH
70147: LD_VAR 0 4
70151: GREATER
70152: IFFALSE 70168
// r := r / 2 ;
70154: LD_ADDR_VAR 0 7
70158: PUSH
70159: LD_VAR 0 7
70163: PUSH
70164: LD_INT 2
70166: DIVREAL
70167: ST_TO_ADDR
// time := time / r ;
70168: LD_ADDR_VAR 0 8
70172: PUSH
70173: LD_VAR 0 8
70177: PUSH
70178: LD_VAR 0 7
70182: DIVREAL
70183: ST_TO_ADDR
// if time < 0 then
70184: LD_VAR 0 8
70188: PUSH
70189: LD_INT 0
70191: LESS
70192: IFFALSE 70209
// time := time * - 1 ;
70194: LD_ADDR_VAR 0 8
70198: PUSH
70199: LD_VAR 0 8
70203: PUSH
70204: LD_INT 1
70206: NEG
70207: MUL
70208: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70209: LD_VAR 0 8
70213: PUSH
70214: LD_INT 35
70216: PPUSH
70217: LD_INT 875
70219: PPUSH
70220: CALL_OW 12
70224: PLUS
70225: PPUSH
70226: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70230: LD_INT 1
70232: PPUSH
70233: LD_INT 5
70235: PPUSH
70236: CALL_OW 12
70240: PPUSH
70241: LD_VAR 0 1
70245: PPUSH
70246: LD_INT 1
70248: PPUSH
70249: CALL_OW 55
// end ;
70253: GO 70066
// end ;
70255: LD_VAR 0 5
70259: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70260: LD_INT 0
70262: PPUSH
70263: PPUSH
70264: PPUSH
70265: PPUSH
70266: PPUSH
70267: PPUSH
70268: PPUSH
70269: PPUSH
// if not turrets or not factories then
70270: LD_VAR 0 1
70274: NOT
70275: PUSH
70276: LD_VAR 0 2
70280: NOT
70281: OR
70282: IFFALSE 70286
// exit ;
70284: GO 70593
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70286: LD_ADDR_VAR 0 10
70290: PUSH
70291: LD_INT 5
70293: PUSH
70294: LD_INT 6
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 2
70303: PUSH
70304: LD_INT 4
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 3
70313: PUSH
70314: LD_INT 5
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 24
70328: PUSH
70329: LD_INT 25
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 23
70338: PUSH
70339: LD_INT 27
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 42
70352: PUSH
70353: LD_INT 43
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 44
70362: PUSH
70363: LD_INT 46
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 45
70372: PUSH
70373: LD_INT 47
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: LIST
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: LIST
70389: ST_TO_ADDR
// result := [ ] ;
70390: LD_ADDR_VAR 0 3
70394: PUSH
70395: EMPTY
70396: ST_TO_ADDR
// for i in turrets do
70397: LD_ADDR_VAR 0 4
70401: PUSH
70402: LD_VAR 0 1
70406: PUSH
70407: FOR_IN
70408: IFFALSE 70591
// begin nat := GetNation ( i ) ;
70410: LD_ADDR_VAR 0 7
70414: PUSH
70415: LD_VAR 0 4
70419: PPUSH
70420: CALL_OW 248
70424: ST_TO_ADDR
// weapon := 0 ;
70425: LD_ADDR_VAR 0 8
70429: PUSH
70430: LD_INT 0
70432: ST_TO_ADDR
// if not nat then
70433: LD_VAR 0 7
70437: NOT
70438: IFFALSE 70442
// continue ;
70440: GO 70407
// for j in list [ nat ] do
70442: LD_ADDR_VAR 0 5
70446: PUSH
70447: LD_VAR 0 10
70451: PUSH
70452: LD_VAR 0 7
70456: ARRAY
70457: PUSH
70458: FOR_IN
70459: IFFALSE 70500
// if GetBWeapon ( i ) = j [ 1 ] then
70461: LD_VAR 0 4
70465: PPUSH
70466: CALL_OW 269
70470: PUSH
70471: LD_VAR 0 5
70475: PUSH
70476: LD_INT 1
70478: ARRAY
70479: EQUAL
70480: IFFALSE 70498
// begin weapon := j [ 2 ] ;
70482: LD_ADDR_VAR 0 8
70486: PUSH
70487: LD_VAR 0 5
70491: PUSH
70492: LD_INT 2
70494: ARRAY
70495: ST_TO_ADDR
// break ;
70496: GO 70500
// end ;
70498: GO 70458
70500: POP
70501: POP
// if not weapon then
70502: LD_VAR 0 8
70506: NOT
70507: IFFALSE 70511
// continue ;
70509: GO 70407
// for k in factories do
70511: LD_ADDR_VAR 0 6
70515: PUSH
70516: LD_VAR 0 2
70520: PUSH
70521: FOR_IN
70522: IFFALSE 70587
// begin weapons := AvailableWeaponList ( k ) ;
70524: LD_ADDR_VAR 0 9
70528: PUSH
70529: LD_VAR 0 6
70533: PPUSH
70534: CALL_OW 478
70538: ST_TO_ADDR
// if not weapons then
70539: LD_VAR 0 9
70543: NOT
70544: IFFALSE 70548
// continue ;
70546: GO 70521
// if weapon in weapons then
70548: LD_VAR 0 8
70552: PUSH
70553: LD_VAR 0 9
70557: IN
70558: IFFALSE 70585
// begin result := [ i , weapon ] ;
70560: LD_ADDR_VAR 0 3
70564: PUSH
70565: LD_VAR 0 4
70569: PUSH
70570: LD_VAR 0 8
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: ST_TO_ADDR
// exit ;
70579: POP
70580: POP
70581: POP
70582: POP
70583: GO 70593
// end ; end ;
70585: GO 70521
70587: POP
70588: POP
// end ;
70589: GO 70407
70591: POP
70592: POP
// end ;
70593: LD_VAR 0 3
70597: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70598: LD_INT 0
70600: PPUSH
// if not side or side > 8 then
70601: LD_VAR 0 3
70605: NOT
70606: PUSH
70607: LD_VAR 0 3
70611: PUSH
70612: LD_INT 8
70614: GREATER
70615: OR
70616: IFFALSE 70620
// exit ;
70618: GO 70679
// if not range then
70620: LD_VAR 0 4
70624: NOT
70625: IFFALSE 70636
// range := - 12 ;
70627: LD_ADDR_VAR 0 4
70631: PUSH
70632: LD_INT 12
70634: NEG
70635: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70636: LD_VAR 0 1
70640: PPUSH
70641: LD_VAR 0 2
70645: PPUSH
70646: LD_VAR 0 3
70650: PPUSH
70651: LD_VAR 0 4
70655: PPUSH
70656: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70660: LD_VAR 0 1
70664: PPUSH
70665: LD_VAR 0 2
70669: PPUSH
70670: LD_VAR 0 3
70674: PPUSH
70675: CALL_OW 331
// end ;
70679: LD_VAR 0 5
70683: RET
// export function Video ( mode ) ; begin
70684: LD_INT 0
70686: PPUSH
// ingame_video = mode ;
70687: LD_ADDR_OWVAR 52
70691: PUSH
70692: LD_VAR 0 1
70696: ST_TO_ADDR
// interface_hidden = mode ;
70697: LD_ADDR_OWVAR 54
70701: PUSH
70702: LD_VAR 0 1
70706: ST_TO_ADDR
// end ;
70707: LD_VAR 0 2
70711: RET
// export function Join ( array , element ) ; begin
70712: LD_INT 0
70714: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70715: LD_ADDR_VAR 0 3
70719: PUSH
70720: LD_VAR 0 1
70724: PPUSH
70725: LD_VAR 0 1
70729: PUSH
70730: LD_INT 1
70732: PLUS
70733: PPUSH
70734: LD_VAR 0 2
70738: PPUSH
70739: CALL_OW 1
70743: ST_TO_ADDR
// end ;
70744: LD_VAR 0 3
70748: RET
// export function JoinUnion ( array , element ) ; begin
70749: LD_INT 0
70751: PPUSH
// result := array union element ;
70752: LD_ADDR_VAR 0 3
70756: PUSH
70757: LD_VAR 0 1
70761: PUSH
70762: LD_VAR 0 2
70766: UNION
70767: ST_TO_ADDR
// end ;
70768: LD_VAR 0 3
70772: RET
// export function GetBehemoths ( side ) ; begin
70773: LD_INT 0
70775: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70776: LD_ADDR_VAR 0 2
70780: PUSH
70781: LD_INT 22
70783: PUSH
70784: LD_VAR 0 1
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 31
70795: PUSH
70796: LD_INT 25
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PPUSH
70807: CALL_OW 69
70811: ST_TO_ADDR
// end ;
70812: LD_VAR 0 2
70816: RET
// export function Shuffle ( array ) ; var i , index ; begin
70817: LD_INT 0
70819: PPUSH
70820: PPUSH
70821: PPUSH
// result := [ ] ;
70822: LD_ADDR_VAR 0 2
70826: PUSH
70827: EMPTY
70828: ST_TO_ADDR
// if not array then
70829: LD_VAR 0 1
70833: NOT
70834: IFFALSE 70838
// exit ;
70836: GO 70937
// Randomize ;
70838: CALL_OW 10
// for i = array downto 1 do
70842: LD_ADDR_VAR 0 3
70846: PUSH
70847: DOUBLE
70848: LD_VAR 0 1
70852: INC
70853: ST_TO_ADDR
70854: LD_INT 1
70856: PUSH
70857: FOR_DOWNTO
70858: IFFALSE 70935
// begin index := rand ( 1 , array ) ;
70860: LD_ADDR_VAR 0 4
70864: PUSH
70865: LD_INT 1
70867: PPUSH
70868: LD_VAR 0 1
70872: PPUSH
70873: CALL_OW 12
70877: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70878: LD_ADDR_VAR 0 2
70882: PUSH
70883: LD_VAR 0 2
70887: PPUSH
70888: LD_VAR 0 2
70892: PUSH
70893: LD_INT 1
70895: PLUS
70896: PPUSH
70897: LD_VAR 0 1
70901: PUSH
70902: LD_VAR 0 4
70906: ARRAY
70907: PPUSH
70908: CALL_OW 2
70912: ST_TO_ADDR
// array := Delete ( array , index ) ;
70913: LD_ADDR_VAR 0 1
70917: PUSH
70918: LD_VAR 0 1
70922: PPUSH
70923: LD_VAR 0 4
70927: PPUSH
70928: CALL_OW 3
70932: ST_TO_ADDR
// end ;
70933: GO 70857
70935: POP
70936: POP
// end ;
70937: LD_VAR 0 2
70941: RET
// export function GetBaseMaterials ( base ) ; begin
70942: LD_INT 0
70944: PPUSH
// result := [ 0 , 0 , 0 ] ;
70945: LD_ADDR_VAR 0 2
70949: PUSH
70950: LD_INT 0
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: LD_INT 0
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: LIST
70963: ST_TO_ADDR
// if not base then
70964: LD_VAR 0 1
70968: NOT
70969: IFFALSE 70973
// exit ;
70971: GO 71022
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70973: LD_ADDR_VAR 0 2
70977: PUSH
70978: LD_VAR 0 1
70982: PPUSH
70983: LD_INT 1
70985: PPUSH
70986: CALL_OW 275
70990: PUSH
70991: LD_VAR 0 1
70995: PPUSH
70996: LD_INT 2
70998: PPUSH
70999: CALL_OW 275
71003: PUSH
71004: LD_VAR 0 1
71008: PPUSH
71009: LD_INT 3
71011: PPUSH
71012: CALL_OW 275
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: LIST
71021: ST_TO_ADDR
// end ;
71022: LD_VAR 0 2
71026: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71027: LD_INT 0
71029: PPUSH
71030: PPUSH
// result := array ;
71031: LD_ADDR_VAR 0 3
71035: PUSH
71036: LD_VAR 0 1
71040: ST_TO_ADDR
// if size >= result then
71041: LD_VAR 0 2
71045: PUSH
71046: LD_VAR 0 3
71050: GREATEREQUAL
71051: IFFALSE 71055
// exit ;
71053: GO 71105
// if size then
71055: LD_VAR 0 2
71059: IFFALSE 71105
// for i := array downto size do
71061: LD_ADDR_VAR 0 4
71065: PUSH
71066: DOUBLE
71067: LD_VAR 0 1
71071: INC
71072: ST_TO_ADDR
71073: LD_VAR 0 2
71077: PUSH
71078: FOR_DOWNTO
71079: IFFALSE 71103
// result := Delete ( result , result ) ;
71081: LD_ADDR_VAR 0 3
71085: PUSH
71086: LD_VAR 0 3
71090: PPUSH
71091: LD_VAR 0 3
71095: PPUSH
71096: CALL_OW 3
71100: ST_TO_ADDR
71101: GO 71078
71103: POP
71104: POP
// end ;
71105: LD_VAR 0 3
71109: RET
// export function ComExit ( unit ) ; var tmp ; begin
71110: LD_INT 0
71112: PPUSH
71113: PPUSH
// if not IsInUnit ( unit ) then
71114: LD_VAR 0 1
71118: PPUSH
71119: CALL_OW 310
71123: NOT
71124: IFFALSE 71128
// exit ;
71126: GO 71188
// tmp := IsInUnit ( unit ) ;
71128: LD_ADDR_VAR 0 3
71132: PUSH
71133: LD_VAR 0 1
71137: PPUSH
71138: CALL_OW 310
71142: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71143: LD_VAR 0 3
71147: PPUSH
71148: CALL_OW 247
71152: PUSH
71153: LD_INT 2
71155: EQUAL
71156: IFFALSE 71169
// ComExitVehicle ( unit ) else
71158: LD_VAR 0 1
71162: PPUSH
71163: CALL_OW 121
71167: GO 71178
// ComExitBuilding ( unit ) ;
71169: LD_VAR 0 1
71173: PPUSH
71174: CALL_OW 122
// result := tmp ;
71178: LD_ADDR_VAR 0 2
71182: PUSH
71183: LD_VAR 0 3
71187: ST_TO_ADDR
// end ;
71188: LD_VAR 0 2
71192: RET
// export function ComExitAll ( units ) ; var i ; begin
71193: LD_INT 0
71195: PPUSH
71196: PPUSH
// if not units then
71197: LD_VAR 0 1
71201: NOT
71202: IFFALSE 71206
// exit ;
71204: GO 71232
// for i in units do
71206: LD_ADDR_VAR 0 3
71210: PUSH
71211: LD_VAR 0 1
71215: PUSH
71216: FOR_IN
71217: IFFALSE 71230
// ComExit ( i ) ;
71219: LD_VAR 0 3
71223: PPUSH
71224: CALL 71110 0 1
71228: GO 71216
71230: POP
71231: POP
// end ;
71232: LD_VAR 0 2
71236: RET
// export function ResetHc ; begin
71237: LD_INT 0
71239: PPUSH
// InitHc ;
71240: CALL_OW 19
// hc_importance := 0 ;
71244: LD_ADDR_OWVAR 32
71248: PUSH
71249: LD_INT 0
71251: ST_TO_ADDR
// end ;
71252: LD_VAR 0 1
71256: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71257: LD_INT 0
71259: PPUSH
71260: PPUSH
71261: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71262: LD_ADDR_VAR 0 6
71266: PUSH
71267: LD_VAR 0 1
71271: PUSH
71272: LD_VAR 0 3
71276: PLUS
71277: PUSH
71278: LD_INT 2
71280: DIV
71281: ST_TO_ADDR
// if _x < 0 then
71282: LD_VAR 0 6
71286: PUSH
71287: LD_INT 0
71289: LESS
71290: IFFALSE 71307
// _x := _x * - 1 ;
71292: LD_ADDR_VAR 0 6
71296: PUSH
71297: LD_VAR 0 6
71301: PUSH
71302: LD_INT 1
71304: NEG
71305: MUL
71306: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71307: LD_ADDR_VAR 0 7
71311: PUSH
71312: LD_VAR 0 2
71316: PUSH
71317: LD_VAR 0 4
71321: PLUS
71322: PUSH
71323: LD_INT 2
71325: DIV
71326: ST_TO_ADDR
// if _y < 0 then
71327: LD_VAR 0 7
71331: PUSH
71332: LD_INT 0
71334: LESS
71335: IFFALSE 71352
// _y := _y * - 1 ;
71337: LD_ADDR_VAR 0 7
71341: PUSH
71342: LD_VAR 0 7
71346: PUSH
71347: LD_INT 1
71349: NEG
71350: MUL
71351: ST_TO_ADDR
// result := [ _x , _y ] ;
71352: LD_ADDR_VAR 0 5
71356: PUSH
71357: LD_VAR 0 6
71361: PUSH
71362: LD_VAR 0 7
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: ST_TO_ADDR
// end ;
71371: LD_VAR 0 5
71375: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71376: LD_INT 0
71378: PPUSH
71379: PPUSH
71380: PPUSH
71381: PPUSH
// task := GetTaskList ( unit ) ;
71382: LD_ADDR_VAR 0 7
71386: PUSH
71387: LD_VAR 0 1
71391: PPUSH
71392: CALL_OW 437
71396: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71397: LD_VAR 0 7
71401: NOT
71402: PUSH
71403: LD_VAR 0 1
71407: PPUSH
71408: LD_VAR 0 2
71412: PPUSH
71413: CALL_OW 308
71417: NOT
71418: AND
71419: IFFALSE 71423
// exit ;
71421: GO 71541
// if IsInArea ( unit , area ) then
71423: LD_VAR 0 1
71427: PPUSH
71428: LD_VAR 0 2
71432: PPUSH
71433: CALL_OW 308
71437: IFFALSE 71455
// begin ComMoveToArea ( unit , goAway ) ;
71439: LD_VAR 0 1
71443: PPUSH
71444: LD_VAR 0 3
71448: PPUSH
71449: CALL_OW 113
// exit ;
71453: GO 71541
// end ; if task [ 1 ] [ 1 ] <> M then
71455: LD_VAR 0 7
71459: PUSH
71460: LD_INT 1
71462: ARRAY
71463: PUSH
71464: LD_INT 1
71466: ARRAY
71467: PUSH
71468: LD_STRING M
71470: NONEQUAL
71471: IFFALSE 71475
// exit ;
71473: GO 71541
// x := task [ 1 ] [ 2 ] ;
71475: LD_ADDR_VAR 0 5
71479: PUSH
71480: LD_VAR 0 7
71484: PUSH
71485: LD_INT 1
71487: ARRAY
71488: PUSH
71489: LD_INT 2
71491: ARRAY
71492: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71493: LD_ADDR_VAR 0 6
71497: PUSH
71498: LD_VAR 0 7
71502: PUSH
71503: LD_INT 1
71505: ARRAY
71506: PUSH
71507: LD_INT 3
71509: ARRAY
71510: ST_TO_ADDR
// if InArea ( x , y , area ) then
71511: LD_VAR 0 5
71515: PPUSH
71516: LD_VAR 0 6
71520: PPUSH
71521: LD_VAR 0 2
71525: PPUSH
71526: CALL_OW 309
71530: IFFALSE 71541
// ComStop ( unit ) ;
71532: LD_VAR 0 1
71536: PPUSH
71537: CALL_OW 141
// end ;
71541: LD_VAR 0 4
71545: RET
// export function Abs ( value ) ; begin
71546: LD_INT 0
71548: PPUSH
// result := value ;
71549: LD_ADDR_VAR 0 2
71553: PUSH
71554: LD_VAR 0 1
71558: ST_TO_ADDR
// if value < 0 then
71559: LD_VAR 0 1
71563: PUSH
71564: LD_INT 0
71566: LESS
71567: IFFALSE 71584
// result := value * - 1 ;
71569: LD_ADDR_VAR 0 2
71573: PUSH
71574: LD_VAR 0 1
71578: PUSH
71579: LD_INT 1
71581: NEG
71582: MUL
71583: ST_TO_ADDR
// end ;
71584: LD_VAR 0 2
71588: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71589: LD_INT 0
71591: PPUSH
71592: PPUSH
71593: PPUSH
71594: PPUSH
71595: PPUSH
71596: PPUSH
71597: PPUSH
71598: PPUSH
// if not unit or not building then
71599: LD_VAR 0 1
71603: NOT
71604: PUSH
71605: LD_VAR 0 2
71609: NOT
71610: OR
71611: IFFALSE 71615
// exit ;
71613: GO 71841
// x := GetX ( building ) ;
71615: LD_ADDR_VAR 0 4
71619: PUSH
71620: LD_VAR 0 2
71624: PPUSH
71625: CALL_OW 250
71629: ST_TO_ADDR
// y := GetY ( building ) ;
71630: LD_ADDR_VAR 0 6
71634: PUSH
71635: LD_VAR 0 2
71639: PPUSH
71640: CALL_OW 251
71644: ST_TO_ADDR
// d := GetDir ( building ) ;
71645: LD_ADDR_VAR 0 8
71649: PUSH
71650: LD_VAR 0 2
71654: PPUSH
71655: CALL_OW 254
71659: ST_TO_ADDR
// r := 4 ;
71660: LD_ADDR_VAR 0 9
71664: PUSH
71665: LD_INT 4
71667: ST_TO_ADDR
// for i := 1 to 5 do
71668: LD_ADDR_VAR 0 10
71672: PUSH
71673: DOUBLE
71674: LD_INT 1
71676: DEC
71677: ST_TO_ADDR
71678: LD_INT 5
71680: PUSH
71681: FOR_TO
71682: IFFALSE 71839
// begin _x := ShiftX ( x , d , r + i ) ;
71684: LD_ADDR_VAR 0 5
71688: PUSH
71689: LD_VAR 0 4
71693: PPUSH
71694: LD_VAR 0 8
71698: PPUSH
71699: LD_VAR 0 9
71703: PUSH
71704: LD_VAR 0 10
71708: PLUS
71709: PPUSH
71710: CALL_OW 272
71714: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71715: LD_ADDR_VAR 0 7
71719: PUSH
71720: LD_VAR 0 6
71724: PPUSH
71725: LD_VAR 0 8
71729: PPUSH
71730: LD_VAR 0 9
71734: PUSH
71735: LD_VAR 0 10
71739: PLUS
71740: PPUSH
71741: CALL_OW 273
71745: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71746: LD_VAR 0 5
71750: PPUSH
71751: LD_VAR 0 7
71755: PPUSH
71756: CALL_OW 488
71760: PUSH
71761: LD_VAR 0 5
71765: PPUSH
71766: LD_VAR 0 7
71770: PPUSH
71771: CALL_OW 428
71775: PPUSH
71776: CALL_OW 247
71780: PUSH
71781: LD_INT 3
71783: PUSH
71784: LD_INT 2
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: IN
71791: NOT
71792: AND
71793: IFFALSE 71837
// begin ComMoveXY ( unit , _x , _y ) ;
71795: LD_VAR 0 1
71799: PPUSH
71800: LD_VAR 0 5
71804: PPUSH
71805: LD_VAR 0 7
71809: PPUSH
71810: CALL_OW 111
// result := [ _x , _y ] ;
71814: LD_ADDR_VAR 0 3
71818: PUSH
71819: LD_VAR 0 5
71823: PUSH
71824: LD_VAR 0 7
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: ST_TO_ADDR
// exit ;
71833: POP
71834: POP
71835: GO 71841
// end ; end ;
71837: GO 71681
71839: POP
71840: POP
// end ;
71841: LD_VAR 0 3
71845: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71846: LD_INT 0
71848: PPUSH
71849: PPUSH
71850: PPUSH
// result := 0 ;
71851: LD_ADDR_VAR 0 3
71855: PUSH
71856: LD_INT 0
71858: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71859: LD_VAR 0 1
71863: PUSH
71864: LD_INT 0
71866: LESS
71867: PUSH
71868: LD_VAR 0 1
71872: PUSH
71873: LD_INT 8
71875: GREATER
71876: OR
71877: PUSH
71878: LD_VAR 0 2
71882: PUSH
71883: LD_INT 0
71885: LESS
71886: OR
71887: PUSH
71888: LD_VAR 0 2
71892: PUSH
71893: LD_INT 8
71895: GREATER
71896: OR
71897: IFFALSE 71901
// exit ;
71899: GO 71976
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71901: LD_ADDR_VAR 0 4
71905: PUSH
71906: LD_INT 22
71908: PUSH
71909: LD_VAR 0 2
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PPUSH
71918: CALL_OW 69
71922: PUSH
71923: FOR_IN
71924: IFFALSE 71974
// begin un := UnitShoot ( i ) ;
71926: LD_ADDR_VAR 0 5
71930: PUSH
71931: LD_VAR 0 4
71935: PPUSH
71936: CALL_OW 504
71940: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71941: LD_VAR 0 5
71945: PPUSH
71946: CALL_OW 255
71950: PUSH
71951: LD_VAR 0 1
71955: EQUAL
71956: IFFALSE 71972
// begin result := un ;
71958: LD_ADDR_VAR 0 3
71962: PUSH
71963: LD_VAR 0 5
71967: ST_TO_ADDR
// exit ;
71968: POP
71969: POP
71970: GO 71976
// end ; end ;
71972: GO 71923
71974: POP
71975: POP
// end ;
71976: LD_VAR 0 3
71980: RET
// export function GetCargoBay ( units ) ; begin
71981: LD_INT 0
71983: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71984: LD_ADDR_VAR 0 2
71988: PUSH
71989: LD_VAR 0 1
71993: PPUSH
71994: LD_INT 2
71996: PUSH
71997: LD_INT 34
71999: PUSH
72000: LD_INT 12
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 34
72009: PUSH
72010: LD_INT 51
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 34
72019: PUSH
72020: LD_INT 32
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 34
72029: PUSH
72030: LD_INT 89
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: PPUSH
72044: CALL_OW 72
72048: ST_TO_ADDR
// end ;
72049: LD_VAR 0 2
72053: RET
// export function Negate ( value ) ; begin
72054: LD_INT 0
72056: PPUSH
// result := not value ;
72057: LD_ADDR_VAR 0 2
72061: PUSH
72062: LD_VAR 0 1
72066: NOT
72067: ST_TO_ADDR
// end ;
72068: LD_VAR 0 2
72072: RET
// export function Inc ( value ) ; begin
72073: LD_INT 0
72075: PPUSH
// result := value + 1 ;
72076: LD_ADDR_VAR 0 2
72080: PUSH
72081: LD_VAR 0 1
72085: PUSH
72086: LD_INT 1
72088: PLUS
72089: ST_TO_ADDR
// end ;
72090: LD_VAR 0 2
72094: RET
// export function Dec ( value ) ; begin
72095: LD_INT 0
72097: PPUSH
// result := value - 1 ;
72098: LD_ADDR_VAR 0 2
72102: PUSH
72103: LD_VAR 0 1
72107: PUSH
72108: LD_INT 1
72110: MINUS
72111: ST_TO_ADDR
// end ;
72112: LD_VAR 0 2
72116: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72117: LD_INT 0
72119: PPUSH
72120: PPUSH
72121: PPUSH
72122: PPUSH
72123: PPUSH
72124: PPUSH
72125: PPUSH
72126: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72127: LD_VAR 0 1
72131: PPUSH
72132: LD_VAR 0 2
72136: PPUSH
72137: CALL_OW 488
72141: NOT
72142: PUSH
72143: LD_VAR 0 3
72147: PPUSH
72148: LD_VAR 0 4
72152: PPUSH
72153: CALL_OW 488
72157: NOT
72158: OR
72159: IFFALSE 72172
// begin result := - 1 ;
72161: LD_ADDR_VAR 0 5
72165: PUSH
72166: LD_INT 1
72168: NEG
72169: ST_TO_ADDR
// exit ;
72170: GO 72407
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72172: LD_ADDR_VAR 0 12
72176: PUSH
72177: LD_VAR 0 1
72181: PPUSH
72182: LD_VAR 0 2
72186: PPUSH
72187: LD_VAR 0 3
72191: PPUSH
72192: LD_VAR 0 4
72196: PPUSH
72197: CALL 71257 0 4
72201: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72202: LD_ADDR_VAR 0 11
72206: PUSH
72207: LD_VAR 0 1
72211: PPUSH
72212: LD_VAR 0 2
72216: PPUSH
72217: LD_VAR 0 12
72221: PUSH
72222: LD_INT 1
72224: ARRAY
72225: PPUSH
72226: LD_VAR 0 12
72230: PUSH
72231: LD_INT 2
72233: ARRAY
72234: PPUSH
72235: CALL_OW 298
72239: ST_TO_ADDR
// distance := 9999 ;
72240: LD_ADDR_VAR 0 10
72244: PUSH
72245: LD_INT 9999
72247: ST_TO_ADDR
// for i := 0 to 5 do
72248: LD_ADDR_VAR 0 6
72252: PUSH
72253: DOUBLE
72254: LD_INT 0
72256: DEC
72257: ST_TO_ADDR
72258: LD_INT 5
72260: PUSH
72261: FOR_TO
72262: IFFALSE 72405
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72264: LD_ADDR_VAR 0 7
72268: PUSH
72269: LD_VAR 0 1
72273: PPUSH
72274: LD_VAR 0 6
72278: PPUSH
72279: LD_VAR 0 11
72283: PPUSH
72284: CALL_OW 272
72288: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72289: LD_ADDR_VAR 0 8
72293: PUSH
72294: LD_VAR 0 2
72298: PPUSH
72299: LD_VAR 0 6
72303: PPUSH
72304: LD_VAR 0 11
72308: PPUSH
72309: CALL_OW 273
72313: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72314: LD_VAR 0 7
72318: PPUSH
72319: LD_VAR 0 8
72323: PPUSH
72324: CALL_OW 488
72328: NOT
72329: IFFALSE 72333
// continue ;
72331: GO 72261
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72333: LD_ADDR_VAR 0 9
72337: PUSH
72338: LD_VAR 0 12
72342: PUSH
72343: LD_INT 1
72345: ARRAY
72346: PPUSH
72347: LD_VAR 0 12
72351: PUSH
72352: LD_INT 2
72354: ARRAY
72355: PPUSH
72356: LD_VAR 0 7
72360: PPUSH
72361: LD_VAR 0 8
72365: PPUSH
72366: CALL_OW 298
72370: ST_TO_ADDR
// if tmp < distance then
72371: LD_VAR 0 9
72375: PUSH
72376: LD_VAR 0 10
72380: LESS
72381: IFFALSE 72403
// begin result := i ;
72383: LD_ADDR_VAR 0 5
72387: PUSH
72388: LD_VAR 0 6
72392: ST_TO_ADDR
// distance := tmp ;
72393: LD_ADDR_VAR 0 10
72397: PUSH
72398: LD_VAR 0 9
72402: ST_TO_ADDR
// end ; end ;
72403: GO 72261
72405: POP
72406: POP
// end ;
72407: LD_VAR 0 5
72411: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72412: LD_INT 0
72414: PPUSH
72415: PPUSH
// if not driver or not IsInUnit ( driver ) then
72416: LD_VAR 0 1
72420: NOT
72421: PUSH
72422: LD_VAR 0 1
72426: PPUSH
72427: CALL_OW 310
72431: NOT
72432: OR
72433: IFFALSE 72437
// exit ;
72435: GO 72527
// vehicle := IsInUnit ( driver ) ;
72437: LD_ADDR_VAR 0 3
72441: PUSH
72442: LD_VAR 0 1
72446: PPUSH
72447: CALL_OW 310
72451: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72452: LD_VAR 0 1
72456: PPUSH
72457: LD_STRING \
72459: PUSH
72460: LD_INT 0
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: LD_INT 0
72468: PUSH
72469: LD_INT 0
72471: PUSH
72472: LD_INT 0
72474: PUSH
72475: LD_INT 0
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: PUSH
72487: LD_STRING E
72489: PUSH
72490: LD_INT 0
72492: PUSH
72493: LD_INT 0
72495: PUSH
72496: LD_VAR 0 3
72500: PUSH
72501: LD_INT 0
72503: PUSH
72504: LD_INT 0
72506: PUSH
72507: LD_INT 0
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: PPUSH
72523: CALL_OW 446
// end ;
72527: LD_VAR 0 2
72531: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72532: LD_INT 0
72534: PPUSH
72535: PPUSH
// if not driver or not IsInUnit ( driver ) then
72536: LD_VAR 0 1
72540: NOT
72541: PUSH
72542: LD_VAR 0 1
72546: PPUSH
72547: CALL_OW 310
72551: NOT
72552: OR
72553: IFFALSE 72557
// exit ;
72555: GO 72647
// vehicle := IsInUnit ( driver ) ;
72557: LD_ADDR_VAR 0 3
72561: PUSH
72562: LD_VAR 0 1
72566: PPUSH
72567: CALL_OW 310
72571: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72572: LD_VAR 0 1
72576: PPUSH
72577: LD_STRING \
72579: PUSH
72580: LD_INT 0
72582: PUSH
72583: LD_INT 0
72585: PUSH
72586: LD_INT 0
72588: PUSH
72589: LD_INT 0
72591: PUSH
72592: LD_INT 0
72594: PUSH
72595: LD_INT 0
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: PUSH
72607: LD_STRING E
72609: PUSH
72610: LD_INT 0
72612: PUSH
72613: LD_INT 0
72615: PUSH
72616: LD_VAR 0 3
72620: PUSH
72621: LD_INT 0
72623: PUSH
72624: LD_INT 0
72626: PUSH
72627: LD_INT 0
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PPUSH
72643: CALL_OW 447
// end ;
72647: LD_VAR 0 2
72651: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72652: LD_INT 0
72654: PPUSH
72655: PPUSH
72656: PPUSH
// tmp := [ ] ;
72657: LD_ADDR_VAR 0 5
72661: PUSH
72662: EMPTY
72663: ST_TO_ADDR
// for i in units do
72664: LD_ADDR_VAR 0 4
72668: PUSH
72669: LD_VAR 0 1
72673: PUSH
72674: FOR_IN
72675: IFFALSE 72713
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72677: LD_ADDR_VAR 0 5
72681: PUSH
72682: LD_VAR 0 5
72686: PPUSH
72687: LD_VAR 0 5
72691: PUSH
72692: LD_INT 1
72694: PLUS
72695: PPUSH
72696: LD_VAR 0 4
72700: PPUSH
72701: CALL_OW 256
72705: PPUSH
72706: CALL_OW 2
72710: ST_TO_ADDR
72711: GO 72674
72713: POP
72714: POP
// if not tmp then
72715: LD_VAR 0 5
72719: NOT
72720: IFFALSE 72724
// exit ;
72722: GO 72772
// if asc then
72724: LD_VAR 0 2
72728: IFFALSE 72752
// result := SortListByListAsc ( units , tmp ) else
72730: LD_ADDR_VAR 0 3
72734: PUSH
72735: LD_VAR 0 1
72739: PPUSH
72740: LD_VAR 0 5
72744: PPUSH
72745: CALL_OW 76
72749: ST_TO_ADDR
72750: GO 72772
// result := SortListByListDesc ( units , tmp ) ;
72752: LD_ADDR_VAR 0 3
72756: PUSH
72757: LD_VAR 0 1
72761: PPUSH
72762: LD_VAR 0 5
72766: PPUSH
72767: CALL_OW 77
72771: ST_TO_ADDR
// end ;
72772: LD_VAR 0 3
72776: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72777: LD_INT 0
72779: PPUSH
72780: PPUSH
// task := GetTaskList ( mech ) ;
72781: LD_ADDR_VAR 0 4
72785: PUSH
72786: LD_VAR 0 1
72790: PPUSH
72791: CALL_OW 437
72795: ST_TO_ADDR
// if not task then
72796: LD_VAR 0 4
72800: NOT
72801: IFFALSE 72805
// exit ;
72803: GO 72847
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72805: LD_ADDR_VAR 0 3
72809: PUSH
72810: LD_VAR 0 4
72814: PUSH
72815: LD_INT 1
72817: ARRAY
72818: PUSH
72819: LD_INT 1
72821: ARRAY
72822: PUSH
72823: LD_STRING r
72825: EQUAL
72826: PUSH
72827: LD_VAR 0 4
72831: PUSH
72832: LD_INT 1
72834: ARRAY
72835: PUSH
72836: LD_INT 4
72838: ARRAY
72839: PUSH
72840: LD_VAR 0 2
72844: EQUAL
72845: AND
72846: ST_TO_ADDR
// end ;
72847: LD_VAR 0 3
72851: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72852: LD_INT 0
72854: PPUSH
// SetDir ( unit , d ) ;
72855: LD_VAR 0 1
72859: PPUSH
72860: LD_VAR 0 4
72864: PPUSH
72865: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72869: LD_VAR 0 1
72873: PPUSH
72874: LD_VAR 0 2
72878: PPUSH
72879: LD_VAR 0 3
72883: PPUSH
72884: LD_VAR 0 5
72888: PPUSH
72889: CALL_OW 48
// end ;
72893: LD_VAR 0 6
72897: RET
// export function ToNaturalNumber ( number ) ; begin
72898: LD_INT 0
72900: PPUSH
// result := number div 1 ;
72901: LD_ADDR_VAR 0 2
72905: PUSH
72906: LD_VAR 0 1
72910: PUSH
72911: LD_INT 1
72913: DIV
72914: ST_TO_ADDR
// if number < 0 then
72915: LD_VAR 0 1
72919: PUSH
72920: LD_INT 0
72922: LESS
72923: IFFALSE 72933
// result := 0 ;
72925: LD_ADDR_VAR 0 2
72929: PUSH
72930: LD_INT 0
72932: ST_TO_ADDR
// end ;
72933: LD_VAR 0 2
72937: RET
// export function SortByClass ( units , class ) ; var un ; begin
72938: LD_INT 0
72940: PPUSH
72941: PPUSH
// if not units or not class then
72942: LD_VAR 0 1
72946: NOT
72947: PUSH
72948: LD_VAR 0 2
72952: NOT
72953: OR
72954: IFFALSE 72958
// exit ;
72956: GO 73053
// result := [ ] ;
72958: LD_ADDR_VAR 0 3
72962: PUSH
72963: EMPTY
72964: ST_TO_ADDR
// for un in units do
72965: LD_ADDR_VAR 0 4
72969: PUSH
72970: LD_VAR 0 1
72974: PUSH
72975: FOR_IN
72976: IFFALSE 73051
// if GetClass ( un ) = class then
72978: LD_VAR 0 4
72982: PPUSH
72983: CALL_OW 257
72987: PUSH
72988: LD_VAR 0 2
72992: EQUAL
72993: IFFALSE 73020
// result := Insert ( result , 1 , un ) else
72995: LD_ADDR_VAR 0 3
72999: PUSH
73000: LD_VAR 0 3
73004: PPUSH
73005: LD_INT 1
73007: PPUSH
73008: LD_VAR 0 4
73012: PPUSH
73013: CALL_OW 2
73017: ST_TO_ADDR
73018: GO 73049
// result := Replace ( result , result + 1 , un ) ;
73020: LD_ADDR_VAR 0 3
73024: PUSH
73025: LD_VAR 0 3
73029: PPUSH
73030: LD_VAR 0 3
73034: PUSH
73035: LD_INT 1
73037: PLUS
73038: PPUSH
73039: LD_VAR 0 4
73043: PPUSH
73044: CALL_OW 1
73048: ST_TO_ADDR
73049: GO 72975
73051: POP
73052: POP
// end ;
73053: LD_VAR 0 3
73057: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73058: LD_INT 0
73060: PPUSH
73061: PPUSH
73062: PPUSH
73063: PPUSH
73064: PPUSH
73065: PPUSH
73066: PPUSH
// result := [ ] ;
73067: LD_ADDR_VAR 0 4
73071: PUSH
73072: EMPTY
73073: ST_TO_ADDR
// if x - r < 0 then
73074: LD_VAR 0 1
73078: PUSH
73079: LD_VAR 0 3
73083: MINUS
73084: PUSH
73085: LD_INT 0
73087: LESS
73088: IFFALSE 73100
// min_x := 0 else
73090: LD_ADDR_VAR 0 8
73094: PUSH
73095: LD_INT 0
73097: ST_TO_ADDR
73098: GO 73116
// min_x := x - r ;
73100: LD_ADDR_VAR 0 8
73104: PUSH
73105: LD_VAR 0 1
73109: PUSH
73110: LD_VAR 0 3
73114: MINUS
73115: ST_TO_ADDR
// if y - r < 0 then
73116: LD_VAR 0 2
73120: PUSH
73121: LD_VAR 0 3
73125: MINUS
73126: PUSH
73127: LD_INT 0
73129: LESS
73130: IFFALSE 73142
// min_y := 0 else
73132: LD_ADDR_VAR 0 7
73136: PUSH
73137: LD_INT 0
73139: ST_TO_ADDR
73140: GO 73158
// min_y := y - r ;
73142: LD_ADDR_VAR 0 7
73146: PUSH
73147: LD_VAR 0 2
73151: PUSH
73152: LD_VAR 0 3
73156: MINUS
73157: ST_TO_ADDR
// max_x := x + r ;
73158: LD_ADDR_VAR 0 9
73162: PUSH
73163: LD_VAR 0 1
73167: PUSH
73168: LD_VAR 0 3
73172: PLUS
73173: ST_TO_ADDR
// max_y := y + r ;
73174: LD_ADDR_VAR 0 10
73178: PUSH
73179: LD_VAR 0 2
73183: PUSH
73184: LD_VAR 0 3
73188: PLUS
73189: ST_TO_ADDR
// for _x = min_x to max_x do
73190: LD_ADDR_VAR 0 5
73194: PUSH
73195: DOUBLE
73196: LD_VAR 0 8
73200: DEC
73201: ST_TO_ADDR
73202: LD_VAR 0 9
73206: PUSH
73207: FOR_TO
73208: IFFALSE 73309
// for _y = min_y to max_y do
73210: LD_ADDR_VAR 0 6
73214: PUSH
73215: DOUBLE
73216: LD_VAR 0 7
73220: DEC
73221: ST_TO_ADDR
73222: LD_VAR 0 10
73226: PUSH
73227: FOR_TO
73228: IFFALSE 73305
// begin if not ValidHex ( _x , _y ) then
73230: LD_VAR 0 5
73234: PPUSH
73235: LD_VAR 0 6
73239: PPUSH
73240: CALL_OW 488
73244: NOT
73245: IFFALSE 73249
// continue ;
73247: GO 73227
// if GetResourceTypeXY ( _x , _y ) then
73249: LD_VAR 0 5
73253: PPUSH
73254: LD_VAR 0 6
73258: PPUSH
73259: CALL_OW 283
73263: IFFALSE 73303
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73265: LD_ADDR_VAR 0 4
73269: PUSH
73270: LD_VAR 0 4
73274: PPUSH
73275: LD_VAR 0 4
73279: PUSH
73280: LD_INT 1
73282: PLUS
73283: PPUSH
73284: LD_VAR 0 5
73288: PUSH
73289: LD_VAR 0 6
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PPUSH
73298: CALL_OW 1
73302: ST_TO_ADDR
// end ;
73303: GO 73227
73305: POP
73306: POP
73307: GO 73207
73309: POP
73310: POP
// end ;
73311: LD_VAR 0 4
73315: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73316: LD_INT 0
73318: PPUSH
73319: PPUSH
73320: PPUSH
73321: PPUSH
73322: PPUSH
73323: PPUSH
73324: PPUSH
73325: PPUSH
// if not units then
73326: LD_VAR 0 1
73330: NOT
73331: IFFALSE 73335
// exit ;
73333: GO 73859
// result := UnitFilter ( units , [ f_ok ] ) ;
73335: LD_ADDR_VAR 0 3
73339: PUSH
73340: LD_VAR 0 1
73344: PPUSH
73345: LD_INT 50
73347: PUSH
73348: EMPTY
73349: LIST
73350: PPUSH
73351: CALL_OW 72
73355: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73356: LD_ADDR_VAR 0 8
73360: PUSH
73361: LD_VAR 0 1
73365: PUSH
73366: LD_INT 1
73368: ARRAY
73369: PPUSH
73370: CALL_OW 255
73374: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73375: LD_ADDR_VAR 0 10
73379: PUSH
73380: LD_INT 29
73382: PUSH
73383: LD_INT 91
73385: PUSH
73386: LD_INT 49
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: LIST
73393: ST_TO_ADDR
// if not result then
73394: LD_VAR 0 3
73398: NOT
73399: IFFALSE 73403
// exit ;
73401: GO 73859
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73403: LD_ADDR_VAR 0 5
73407: PUSH
73408: LD_INT 81
73410: PUSH
73411: LD_VAR 0 8
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PPUSH
73420: CALL_OW 69
73424: ST_TO_ADDR
// for i in result do
73425: LD_ADDR_VAR 0 4
73429: PUSH
73430: LD_VAR 0 3
73434: PUSH
73435: FOR_IN
73436: IFFALSE 73857
// begin tag := GetTag ( i ) + 1 ;
73438: LD_ADDR_VAR 0 9
73442: PUSH
73443: LD_VAR 0 4
73447: PPUSH
73448: CALL_OW 110
73452: PUSH
73453: LD_INT 1
73455: PLUS
73456: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73457: LD_ADDR_VAR 0 7
73461: PUSH
73462: LD_VAR 0 4
73466: PPUSH
73467: CALL_OW 250
73471: PPUSH
73472: LD_VAR 0 4
73476: PPUSH
73477: CALL_OW 251
73481: PPUSH
73482: LD_INT 6
73484: PPUSH
73485: CALL 73058 0 3
73489: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73490: LD_VAR 0 4
73494: PPUSH
73495: CALL_OW 247
73499: PUSH
73500: LD_INT 2
73502: EQUAL
73503: PUSH
73504: LD_VAR 0 7
73508: AND
73509: PUSH
73510: LD_VAR 0 4
73514: PPUSH
73515: CALL_OW 264
73519: PUSH
73520: LD_VAR 0 10
73524: IN
73525: NOT
73526: AND
73527: IFFALSE 73566
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73529: LD_VAR 0 4
73533: PPUSH
73534: LD_VAR 0 7
73538: PUSH
73539: LD_INT 1
73541: ARRAY
73542: PUSH
73543: LD_INT 1
73545: ARRAY
73546: PPUSH
73547: LD_VAR 0 7
73551: PUSH
73552: LD_INT 1
73554: ARRAY
73555: PUSH
73556: LD_INT 2
73558: ARRAY
73559: PPUSH
73560: CALL_OW 116
73564: GO 73855
// if path > tag then
73566: LD_VAR 0 2
73570: PUSH
73571: LD_VAR 0 9
73575: GREATER
73576: IFFALSE 73784
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73578: LD_ADDR_VAR 0 6
73582: PUSH
73583: LD_VAR 0 5
73587: PPUSH
73588: LD_INT 91
73590: PUSH
73591: LD_VAR 0 4
73595: PUSH
73596: LD_INT 8
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: LIST
73603: PPUSH
73604: CALL_OW 72
73608: ST_TO_ADDR
// if nearEnemy then
73609: LD_VAR 0 6
73613: IFFALSE 73682
// begin if GetWeapon ( i ) = ru_time_lapser then
73615: LD_VAR 0 4
73619: PPUSH
73620: CALL_OW 264
73624: PUSH
73625: LD_INT 49
73627: EQUAL
73628: IFFALSE 73656
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73630: LD_VAR 0 4
73634: PPUSH
73635: LD_VAR 0 6
73639: PPUSH
73640: LD_VAR 0 4
73644: PPUSH
73645: CALL_OW 74
73649: PPUSH
73650: CALL_OW 112
73654: GO 73680
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73656: LD_VAR 0 4
73660: PPUSH
73661: LD_VAR 0 6
73665: PPUSH
73666: LD_VAR 0 4
73670: PPUSH
73671: CALL_OW 74
73675: PPUSH
73676: CALL 74930 0 2
// end else
73680: GO 73782
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73682: LD_VAR 0 4
73686: PPUSH
73687: LD_VAR 0 2
73691: PUSH
73692: LD_VAR 0 9
73696: ARRAY
73697: PUSH
73698: LD_INT 1
73700: ARRAY
73701: PPUSH
73702: LD_VAR 0 2
73706: PUSH
73707: LD_VAR 0 9
73711: ARRAY
73712: PUSH
73713: LD_INT 2
73715: ARRAY
73716: PPUSH
73717: CALL_OW 297
73721: PUSH
73722: LD_INT 6
73724: GREATER
73725: IFFALSE 73768
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73727: LD_VAR 0 4
73731: PPUSH
73732: LD_VAR 0 2
73736: PUSH
73737: LD_VAR 0 9
73741: ARRAY
73742: PUSH
73743: LD_INT 1
73745: ARRAY
73746: PPUSH
73747: LD_VAR 0 2
73751: PUSH
73752: LD_VAR 0 9
73756: ARRAY
73757: PUSH
73758: LD_INT 2
73760: ARRAY
73761: PPUSH
73762: CALL_OW 114
73766: GO 73782
// SetTag ( i , tag ) ;
73768: LD_VAR 0 4
73772: PPUSH
73773: LD_VAR 0 9
73777: PPUSH
73778: CALL_OW 109
// end else
73782: GO 73855
// if enemy then
73784: LD_VAR 0 5
73788: IFFALSE 73855
// begin if GetWeapon ( i ) = ru_time_lapser then
73790: LD_VAR 0 4
73794: PPUSH
73795: CALL_OW 264
73799: PUSH
73800: LD_INT 49
73802: EQUAL
73803: IFFALSE 73831
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73805: LD_VAR 0 4
73809: PPUSH
73810: LD_VAR 0 5
73814: PPUSH
73815: LD_VAR 0 4
73819: PPUSH
73820: CALL_OW 74
73824: PPUSH
73825: CALL_OW 112
73829: GO 73855
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73831: LD_VAR 0 4
73835: PPUSH
73836: LD_VAR 0 5
73840: PPUSH
73841: LD_VAR 0 4
73845: PPUSH
73846: CALL_OW 74
73850: PPUSH
73851: CALL 74930 0 2
// end ; end ;
73855: GO 73435
73857: POP
73858: POP
// end ;
73859: LD_VAR 0 3
73863: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73864: LD_INT 0
73866: PPUSH
73867: PPUSH
73868: PPUSH
// if not unit or IsInUnit ( unit ) then
73869: LD_VAR 0 1
73873: NOT
73874: PUSH
73875: LD_VAR 0 1
73879: PPUSH
73880: CALL_OW 310
73884: OR
73885: IFFALSE 73889
// exit ;
73887: GO 73980
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73889: LD_ADDR_VAR 0 4
73893: PUSH
73894: LD_VAR 0 1
73898: PPUSH
73899: CALL_OW 250
73903: PPUSH
73904: LD_VAR 0 2
73908: PPUSH
73909: LD_INT 1
73911: PPUSH
73912: CALL_OW 272
73916: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73917: LD_ADDR_VAR 0 5
73921: PUSH
73922: LD_VAR 0 1
73926: PPUSH
73927: CALL_OW 251
73931: PPUSH
73932: LD_VAR 0 2
73936: PPUSH
73937: LD_INT 1
73939: PPUSH
73940: CALL_OW 273
73944: ST_TO_ADDR
// if ValidHex ( x , y ) then
73945: LD_VAR 0 4
73949: PPUSH
73950: LD_VAR 0 5
73954: PPUSH
73955: CALL_OW 488
73959: IFFALSE 73980
// ComTurnXY ( unit , x , y ) ;
73961: LD_VAR 0 1
73965: PPUSH
73966: LD_VAR 0 4
73970: PPUSH
73971: LD_VAR 0 5
73975: PPUSH
73976: CALL_OW 118
// end ;
73980: LD_VAR 0 3
73984: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73985: LD_INT 0
73987: PPUSH
73988: PPUSH
// result := false ;
73989: LD_ADDR_VAR 0 3
73993: PUSH
73994: LD_INT 0
73996: ST_TO_ADDR
// if not units then
73997: LD_VAR 0 2
74001: NOT
74002: IFFALSE 74006
// exit ;
74004: GO 74051
// for i in units do
74006: LD_ADDR_VAR 0 4
74010: PUSH
74011: LD_VAR 0 2
74015: PUSH
74016: FOR_IN
74017: IFFALSE 74049
// if See ( side , i ) then
74019: LD_VAR 0 1
74023: PPUSH
74024: LD_VAR 0 4
74028: PPUSH
74029: CALL_OW 292
74033: IFFALSE 74047
// begin result := true ;
74035: LD_ADDR_VAR 0 3
74039: PUSH
74040: LD_INT 1
74042: ST_TO_ADDR
// exit ;
74043: POP
74044: POP
74045: GO 74051
// end ;
74047: GO 74016
74049: POP
74050: POP
// end ;
74051: LD_VAR 0 3
74055: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74056: LD_INT 0
74058: PPUSH
74059: PPUSH
74060: PPUSH
74061: PPUSH
// if not unit or not points then
74062: LD_VAR 0 1
74066: NOT
74067: PUSH
74068: LD_VAR 0 2
74072: NOT
74073: OR
74074: IFFALSE 74078
// exit ;
74076: GO 74168
// dist := 99999 ;
74078: LD_ADDR_VAR 0 5
74082: PUSH
74083: LD_INT 99999
74085: ST_TO_ADDR
// for i in points do
74086: LD_ADDR_VAR 0 4
74090: PUSH
74091: LD_VAR 0 2
74095: PUSH
74096: FOR_IN
74097: IFFALSE 74166
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74099: LD_ADDR_VAR 0 6
74103: PUSH
74104: LD_VAR 0 1
74108: PPUSH
74109: LD_VAR 0 4
74113: PUSH
74114: LD_INT 1
74116: ARRAY
74117: PPUSH
74118: LD_VAR 0 4
74122: PUSH
74123: LD_INT 2
74125: ARRAY
74126: PPUSH
74127: CALL_OW 297
74131: ST_TO_ADDR
// if tmpDist < dist then
74132: LD_VAR 0 6
74136: PUSH
74137: LD_VAR 0 5
74141: LESS
74142: IFFALSE 74164
// begin result := i ;
74144: LD_ADDR_VAR 0 3
74148: PUSH
74149: LD_VAR 0 4
74153: ST_TO_ADDR
// dist := tmpDist ;
74154: LD_ADDR_VAR 0 5
74158: PUSH
74159: LD_VAR 0 6
74163: ST_TO_ADDR
// end ; end ;
74164: GO 74096
74166: POP
74167: POP
// end ;
74168: LD_VAR 0 3
74172: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74173: LD_INT 0
74175: PPUSH
// uc_side := side ;
74176: LD_ADDR_OWVAR 20
74180: PUSH
74181: LD_VAR 0 1
74185: ST_TO_ADDR
// uc_nation := 3 ;
74186: LD_ADDR_OWVAR 21
74190: PUSH
74191: LD_INT 3
74193: ST_TO_ADDR
// vc_chassis := 25 ;
74194: LD_ADDR_OWVAR 37
74198: PUSH
74199: LD_INT 25
74201: ST_TO_ADDR
// vc_engine := engine_siberite ;
74202: LD_ADDR_OWVAR 39
74206: PUSH
74207: LD_INT 3
74209: ST_TO_ADDR
// vc_control := control_computer ;
74210: LD_ADDR_OWVAR 38
74214: PUSH
74215: LD_INT 3
74217: ST_TO_ADDR
// vc_weapon := 59 ;
74218: LD_ADDR_OWVAR 40
74222: PUSH
74223: LD_INT 59
74225: ST_TO_ADDR
// result := CreateVehicle ;
74226: LD_ADDR_VAR 0 5
74230: PUSH
74231: CALL_OW 45
74235: ST_TO_ADDR
// SetDir ( result , d ) ;
74236: LD_VAR 0 5
74240: PPUSH
74241: LD_VAR 0 4
74245: PPUSH
74246: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74250: LD_VAR 0 5
74254: PPUSH
74255: LD_VAR 0 2
74259: PPUSH
74260: LD_VAR 0 3
74264: PPUSH
74265: LD_INT 0
74267: PPUSH
74268: CALL_OW 48
// end ;
74272: LD_VAR 0 5
74276: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74277: LD_INT 0
74279: PPUSH
74280: PPUSH
74281: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74282: LD_ADDR_VAR 0 2
74286: PUSH
74287: LD_INT 0
74289: PUSH
74290: LD_INT 0
74292: PUSH
74293: LD_INT 0
74295: PUSH
74296: LD_INT 0
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74305: LD_VAR 0 1
74309: NOT
74310: PUSH
74311: LD_VAR 0 1
74315: PPUSH
74316: CALL_OW 264
74320: PUSH
74321: LD_INT 12
74323: PUSH
74324: LD_INT 51
74326: PUSH
74327: LD_INT 32
74329: PUSH
74330: LD_INT 89
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: IN
74339: NOT
74340: OR
74341: IFFALSE 74345
// exit ;
74343: GO 74443
// for i := 1 to 3 do
74345: LD_ADDR_VAR 0 3
74349: PUSH
74350: DOUBLE
74351: LD_INT 1
74353: DEC
74354: ST_TO_ADDR
74355: LD_INT 3
74357: PUSH
74358: FOR_TO
74359: IFFALSE 74441
// begin tmp := GetCargo ( cargo , i ) ;
74361: LD_ADDR_VAR 0 4
74365: PUSH
74366: LD_VAR 0 1
74370: PPUSH
74371: LD_VAR 0 3
74375: PPUSH
74376: CALL_OW 289
74380: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74381: LD_ADDR_VAR 0 2
74385: PUSH
74386: LD_VAR 0 2
74390: PPUSH
74391: LD_VAR 0 3
74395: PPUSH
74396: LD_VAR 0 4
74400: PPUSH
74401: CALL_OW 1
74405: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74406: LD_ADDR_VAR 0 2
74410: PUSH
74411: LD_VAR 0 2
74415: PPUSH
74416: LD_INT 4
74418: PPUSH
74419: LD_VAR 0 2
74423: PUSH
74424: LD_INT 4
74426: ARRAY
74427: PUSH
74428: LD_VAR 0 4
74432: PLUS
74433: PPUSH
74434: CALL_OW 1
74438: ST_TO_ADDR
// end ;
74439: GO 74358
74441: POP
74442: POP
// end ;
74443: LD_VAR 0 2
74447: RET
// export function Length ( array ) ; begin
74448: LD_INT 0
74450: PPUSH
// result := array + 0 ;
74451: LD_ADDR_VAR 0 2
74455: PUSH
74456: LD_VAR 0 1
74460: PUSH
74461: LD_INT 0
74463: PLUS
74464: ST_TO_ADDR
// end ;
74465: LD_VAR 0 2
74469: RET
// export function PrepareArray ( array ) ; begin
74470: LD_INT 0
74472: PPUSH
// result := array diff 0 ;
74473: LD_ADDR_VAR 0 2
74477: PUSH
74478: LD_VAR 0 1
74482: PUSH
74483: LD_INT 0
74485: DIFF
74486: ST_TO_ADDR
// if not result [ 1 ] then
74487: LD_VAR 0 2
74491: PUSH
74492: LD_INT 1
74494: ARRAY
74495: NOT
74496: IFFALSE 74516
// result := Delete ( result , 1 ) ;
74498: LD_ADDR_VAR 0 2
74502: PUSH
74503: LD_VAR 0 2
74507: PPUSH
74508: LD_INT 1
74510: PPUSH
74511: CALL_OW 3
74515: ST_TO_ADDR
// end ;
74516: LD_VAR 0 2
74520: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74521: LD_INT 0
74523: PPUSH
74524: PPUSH
74525: PPUSH
74526: PPUSH
// sibRocketRange := 25 ;
74527: LD_ADDR_VAR 0 6
74531: PUSH
74532: LD_INT 25
74534: ST_TO_ADDR
// result := false ;
74535: LD_ADDR_VAR 0 4
74539: PUSH
74540: LD_INT 0
74542: ST_TO_ADDR
// for i := 0 to 5 do
74543: LD_ADDR_VAR 0 5
74547: PUSH
74548: DOUBLE
74549: LD_INT 0
74551: DEC
74552: ST_TO_ADDR
74553: LD_INT 5
74555: PUSH
74556: FOR_TO
74557: IFFALSE 74624
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74559: LD_VAR 0 1
74563: PPUSH
74564: LD_VAR 0 5
74568: PPUSH
74569: LD_VAR 0 6
74573: PPUSH
74574: CALL_OW 272
74578: PPUSH
74579: LD_VAR 0 2
74583: PPUSH
74584: LD_VAR 0 5
74588: PPUSH
74589: LD_VAR 0 6
74593: PPUSH
74594: CALL_OW 273
74598: PPUSH
74599: LD_VAR 0 3
74603: PPUSH
74604: CALL_OW 309
74608: IFFALSE 74622
// begin result := true ;
74610: LD_ADDR_VAR 0 4
74614: PUSH
74615: LD_INT 1
74617: ST_TO_ADDR
// exit ;
74618: POP
74619: POP
74620: GO 74626
// end ;
74622: GO 74556
74624: POP
74625: POP
// end ;
74626: LD_VAR 0 4
74630: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74631: LD_INT 0
74633: PPUSH
74634: PPUSH
74635: PPUSH
// if btype = b_depot then
74636: LD_VAR 0 2
74640: PUSH
74641: LD_INT 0
74643: EQUAL
74644: IFFALSE 74656
// begin result := true ;
74646: LD_ADDR_VAR 0 3
74650: PUSH
74651: LD_INT 1
74653: ST_TO_ADDR
// exit ;
74654: GO 74772
// end ; pom := GetBase ( depot ) ;
74656: LD_ADDR_VAR 0 4
74660: PUSH
74661: LD_VAR 0 1
74665: PPUSH
74666: CALL_OW 274
74670: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74671: LD_ADDR_VAR 0 5
74675: PUSH
74676: LD_VAR 0 2
74680: PPUSH
74681: LD_VAR 0 1
74685: PPUSH
74686: CALL_OW 248
74690: PPUSH
74691: CALL_OW 450
74695: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74696: LD_ADDR_VAR 0 3
74700: PUSH
74701: LD_VAR 0 4
74705: PPUSH
74706: LD_INT 1
74708: PPUSH
74709: CALL_OW 275
74713: PUSH
74714: LD_VAR 0 5
74718: PUSH
74719: LD_INT 1
74721: ARRAY
74722: GREATEREQUAL
74723: PUSH
74724: LD_VAR 0 4
74728: PPUSH
74729: LD_INT 2
74731: PPUSH
74732: CALL_OW 275
74736: PUSH
74737: LD_VAR 0 5
74741: PUSH
74742: LD_INT 2
74744: ARRAY
74745: GREATEREQUAL
74746: AND
74747: PUSH
74748: LD_VAR 0 4
74752: PPUSH
74753: LD_INT 3
74755: PPUSH
74756: CALL_OW 275
74760: PUSH
74761: LD_VAR 0 5
74765: PUSH
74766: LD_INT 3
74768: ARRAY
74769: GREATEREQUAL
74770: AND
74771: ST_TO_ADDR
// end ;
74772: LD_VAR 0 3
74776: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74777: LD_INT 0
74779: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74780: LD_VAR 0 1
74784: PPUSH
74785: LD_VAR 0 2
74789: PPUSH
74790: LD_INT 0
74792: PPUSH
74793: LD_INT 0
74795: PPUSH
74796: LD_INT 1
74798: PPUSH
74799: LD_INT 0
74801: PPUSH
74802: CALL_OW 587
// end ;
74806: LD_VAR 0 3
74810: RET
// export function CenterOnNow ( unit ) ; begin
74811: LD_INT 0
74813: PPUSH
// result := IsInUnit ( unit ) ;
74814: LD_ADDR_VAR 0 2
74818: PUSH
74819: LD_VAR 0 1
74823: PPUSH
74824: CALL_OW 310
74828: ST_TO_ADDR
// if not result then
74829: LD_VAR 0 2
74833: NOT
74834: IFFALSE 74846
// result := unit ;
74836: LD_ADDR_VAR 0 2
74840: PUSH
74841: LD_VAR 0 1
74845: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74846: LD_VAR 0 1
74850: PPUSH
74851: CALL_OW 87
// end ;
74855: LD_VAR 0 2
74859: RET
// export function ComMoveHex ( unit , hex ) ; begin
74860: LD_INT 0
74862: PPUSH
// if not hex then
74863: LD_VAR 0 2
74867: NOT
74868: IFFALSE 74872
// exit ;
74870: GO 74925
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74872: LD_VAR 0 2
74876: PUSH
74877: LD_INT 1
74879: ARRAY
74880: PPUSH
74881: LD_VAR 0 2
74885: PUSH
74886: LD_INT 2
74888: ARRAY
74889: PPUSH
74890: CALL_OW 428
74894: IFFALSE 74898
// exit ;
74896: GO 74925
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74898: LD_VAR 0 1
74902: PPUSH
74903: LD_VAR 0 2
74907: PUSH
74908: LD_INT 1
74910: ARRAY
74911: PPUSH
74912: LD_VAR 0 2
74916: PUSH
74917: LD_INT 2
74919: ARRAY
74920: PPUSH
74921: CALL_OW 111
// end ;
74925: LD_VAR 0 3
74929: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74930: LD_INT 0
74932: PPUSH
74933: PPUSH
74934: PPUSH
// if not unit or not enemy then
74935: LD_VAR 0 1
74939: NOT
74940: PUSH
74941: LD_VAR 0 2
74945: NOT
74946: OR
74947: IFFALSE 74951
// exit ;
74949: GO 75075
// x := GetX ( enemy ) ;
74951: LD_ADDR_VAR 0 4
74955: PUSH
74956: LD_VAR 0 2
74960: PPUSH
74961: CALL_OW 250
74965: ST_TO_ADDR
// y := GetY ( enemy ) ;
74966: LD_ADDR_VAR 0 5
74970: PUSH
74971: LD_VAR 0 2
74975: PPUSH
74976: CALL_OW 251
74980: ST_TO_ADDR
// if ValidHex ( x , y ) then
74981: LD_VAR 0 4
74985: PPUSH
74986: LD_VAR 0 5
74990: PPUSH
74991: CALL_OW 488
74995: IFFALSE 75075
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74997: LD_VAR 0 2
75001: PPUSH
75002: CALL_OW 247
75006: PUSH
75007: LD_INT 3
75009: PUSH
75010: LD_INT 2
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: IN
75017: PUSH
75018: LD_VAR 0 1
75022: PPUSH
75023: CALL_OW 255
75027: PPUSH
75028: LD_VAR 0 2
75032: PPUSH
75033: CALL_OW 292
75037: OR
75038: IFFALSE 75056
// ComAttackUnit ( unit , enemy ) else
75040: LD_VAR 0 1
75044: PPUSH
75045: LD_VAR 0 2
75049: PPUSH
75050: CALL_OW 115
75054: GO 75075
// ComAgressiveMove ( unit , x , y ) ;
75056: LD_VAR 0 1
75060: PPUSH
75061: LD_VAR 0 4
75065: PPUSH
75066: LD_VAR 0 5
75070: PPUSH
75071: CALL_OW 114
// end ;
75075: LD_VAR 0 3
75079: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75080: LD_INT 0
75082: PPUSH
75083: PPUSH
75084: PPUSH
// list := AreaToList ( area , 0 ) ;
75085: LD_ADDR_VAR 0 5
75089: PUSH
75090: LD_VAR 0 1
75094: PPUSH
75095: LD_INT 0
75097: PPUSH
75098: CALL_OW 517
75102: ST_TO_ADDR
// if not list then
75103: LD_VAR 0 5
75107: NOT
75108: IFFALSE 75112
// exit ;
75110: GO 75242
// if all then
75112: LD_VAR 0 2
75116: IFFALSE 75204
// begin for i := 1 to list [ 1 ] do
75118: LD_ADDR_VAR 0 4
75122: PUSH
75123: DOUBLE
75124: LD_INT 1
75126: DEC
75127: ST_TO_ADDR
75128: LD_VAR 0 5
75132: PUSH
75133: LD_INT 1
75135: ARRAY
75136: PUSH
75137: FOR_TO
75138: IFFALSE 75200
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75140: LD_ADDR_VAR 0 3
75144: PUSH
75145: LD_VAR 0 3
75149: PPUSH
75150: LD_VAR 0 3
75154: PUSH
75155: LD_INT 1
75157: PLUS
75158: PPUSH
75159: LD_VAR 0 5
75163: PUSH
75164: LD_INT 1
75166: ARRAY
75167: PUSH
75168: LD_VAR 0 4
75172: ARRAY
75173: PUSH
75174: LD_VAR 0 5
75178: PUSH
75179: LD_INT 2
75181: ARRAY
75182: PUSH
75183: LD_VAR 0 4
75187: ARRAY
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: PPUSH
75193: CALL_OW 1
75197: ST_TO_ADDR
75198: GO 75137
75200: POP
75201: POP
// exit ;
75202: GO 75242
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75204: LD_ADDR_VAR 0 3
75208: PUSH
75209: LD_VAR 0 5
75213: PUSH
75214: LD_INT 1
75216: ARRAY
75217: PUSH
75218: LD_INT 1
75220: ARRAY
75221: PUSH
75222: LD_VAR 0 5
75226: PUSH
75227: LD_INT 2
75229: ARRAY
75230: PUSH
75231: LD_INT 1
75233: ARRAY
75234: PUSH
75235: EMPTY
75236: LIST
75237: LIST
75238: PUSH
75239: EMPTY
75240: LIST
75241: ST_TO_ADDR
// end ;
75242: LD_VAR 0 3
75246: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75247: LD_INT 0
75249: PPUSH
75250: PPUSH
// list := AreaToList ( area , 0 ) ;
75251: LD_ADDR_VAR 0 4
75255: PUSH
75256: LD_VAR 0 1
75260: PPUSH
75261: LD_INT 0
75263: PPUSH
75264: CALL_OW 517
75268: ST_TO_ADDR
// if not list then
75269: LD_VAR 0 4
75273: NOT
75274: IFFALSE 75278
// exit ;
75276: GO 75319
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75278: LD_ADDR_VAR 0 3
75282: PUSH
75283: LD_VAR 0 4
75287: PUSH
75288: LD_INT 1
75290: ARRAY
75291: PUSH
75292: LD_INT 1
75294: ARRAY
75295: PUSH
75296: LD_VAR 0 4
75300: PUSH
75301: LD_INT 2
75303: ARRAY
75304: PUSH
75305: LD_INT 1
75307: ARRAY
75308: PUSH
75309: LD_VAR 0 2
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: LIST
75318: ST_TO_ADDR
// end ;
75319: LD_VAR 0 3
75323: RET
// export function First ( array ) ; begin
75324: LD_INT 0
75326: PPUSH
// if not array then
75327: LD_VAR 0 1
75331: NOT
75332: IFFALSE 75336
// exit ;
75334: GO 75350
// result := array [ 1 ] ;
75336: LD_ADDR_VAR 0 2
75340: PUSH
75341: LD_VAR 0 1
75345: PUSH
75346: LD_INT 1
75348: ARRAY
75349: ST_TO_ADDR
// end ;
75350: LD_VAR 0 2
75354: RET
// export function Last ( array ) ; begin
75355: LD_INT 0
75357: PPUSH
// if not array then
75358: LD_VAR 0 1
75362: NOT
75363: IFFALSE 75367
// exit ;
75365: GO 75383
// result := array [ array ] ;
75367: LD_ADDR_VAR 0 2
75371: PUSH
75372: LD_VAR 0 1
75376: PUSH
75377: LD_VAR 0 1
75381: ARRAY
75382: ST_TO_ADDR
// end ;
75383: LD_VAR 0 2
75387: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75388: LD_INT 0
75390: PPUSH
75391: PPUSH
// result := [ ] ;
75392: LD_ADDR_VAR 0 5
75396: PUSH
75397: EMPTY
75398: ST_TO_ADDR
// if not array then
75399: LD_VAR 0 1
75403: NOT
75404: IFFALSE 75408
// exit ;
75406: GO 75520
// for i := 1 to array do
75408: LD_ADDR_VAR 0 6
75412: PUSH
75413: DOUBLE
75414: LD_INT 1
75416: DEC
75417: ST_TO_ADDR
75418: LD_VAR 0 1
75422: PUSH
75423: FOR_TO
75424: IFFALSE 75518
// if array [ i ] [ index ] = value then
75426: LD_VAR 0 1
75430: PUSH
75431: LD_VAR 0 6
75435: ARRAY
75436: PUSH
75437: LD_VAR 0 2
75441: ARRAY
75442: PUSH
75443: LD_VAR 0 3
75447: EQUAL
75448: IFFALSE 75516
// begin if indexColumn then
75450: LD_VAR 0 4
75454: IFFALSE 75490
// result := Join ( result , array [ i ] [ indexColumn ] ) else
75456: LD_ADDR_VAR 0 5
75460: PUSH
75461: LD_VAR 0 5
75465: PPUSH
75466: LD_VAR 0 1
75470: PUSH
75471: LD_VAR 0 6
75475: ARRAY
75476: PUSH
75477: LD_VAR 0 4
75481: ARRAY
75482: PPUSH
75483: CALL 70712 0 2
75487: ST_TO_ADDR
75488: GO 75516
// result := Join ( result , array [ i ] ) ;
75490: LD_ADDR_VAR 0 5
75494: PUSH
75495: LD_VAR 0 5
75499: PPUSH
75500: LD_VAR 0 1
75504: PUSH
75505: LD_VAR 0 6
75509: ARRAY
75510: PPUSH
75511: CALL 70712 0 2
75515: ST_TO_ADDR
// end ;
75516: GO 75423
75518: POP
75519: POP
// end ;
75520: LD_VAR 0 5
75524: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
75525: LD_INT 0
75527: PPUSH
// if not vehicles or not parkingPoint then
75528: LD_VAR 0 1
75532: NOT
75533: PUSH
75534: LD_VAR 0 2
75538: NOT
75539: OR
75540: IFFALSE 75544
// exit ;
75542: GO 75642
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
75544: LD_ADDR_VAR 0 1
75548: PUSH
75549: LD_VAR 0 1
75553: PPUSH
75554: LD_INT 50
75556: PUSH
75557: EMPTY
75558: LIST
75559: PUSH
75560: LD_INT 3
75562: PUSH
75563: LD_INT 92
75565: PUSH
75566: LD_VAR 0 2
75570: PUSH
75571: LD_INT 1
75573: ARRAY
75574: PUSH
75575: LD_VAR 0 2
75579: PUSH
75580: LD_INT 2
75582: ARRAY
75583: PUSH
75584: LD_INT 8
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: PPUSH
75601: CALL_OW 72
75605: ST_TO_ADDR
// if not vehicles then
75606: LD_VAR 0 1
75610: NOT
75611: IFFALSE 75615
// exit ;
75613: GO 75642
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75615: LD_VAR 0 1
75619: PPUSH
75620: LD_VAR 0 2
75624: PUSH
75625: LD_INT 1
75627: ARRAY
75628: PPUSH
75629: LD_VAR 0 2
75633: PUSH
75634: LD_INT 2
75636: ARRAY
75637: PPUSH
75638: CALL_OW 111
// end ;
75642: LD_VAR 0 3
75646: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75647: LD_INT 0
75649: PPUSH
75650: PPUSH
75651: PPUSH
// if not side or not area then
75652: LD_VAR 0 1
75656: NOT
75657: PUSH
75658: LD_VAR 0 2
75662: NOT
75663: OR
75664: IFFALSE 75668
// exit ;
75666: GO 75787
// tmp := AreaToList ( area , 0 ) ;
75668: LD_ADDR_VAR 0 5
75672: PUSH
75673: LD_VAR 0 2
75677: PPUSH
75678: LD_INT 0
75680: PPUSH
75681: CALL_OW 517
75685: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75686: LD_ADDR_VAR 0 4
75690: PUSH
75691: DOUBLE
75692: LD_INT 1
75694: DEC
75695: ST_TO_ADDR
75696: LD_VAR 0 5
75700: PUSH
75701: LD_INT 1
75703: ARRAY
75704: PUSH
75705: FOR_TO
75706: IFFALSE 75785
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75708: LD_VAR 0 5
75712: PUSH
75713: LD_INT 1
75715: ARRAY
75716: PUSH
75717: LD_VAR 0 4
75721: ARRAY
75722: PPUSH
75723: LD_VAR 0 5
75727: PUSH
75728: LD_INT 2
75730: ARRAY
75731: PUSH
75732: LD_VAR 0 4
75736: ARRAY
75737: PPUSH
75738: CALL_OW 351
75742: IFFALSE 75783
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75744: LD_VAR 0 5
75748: PUSH
75749: LD_INT 1
75751: ARRAY
75752: PUSH
75753: LD_VAR 0 4
75757: ARRAY
75758: PPUSH
75759: LD_VAR 0 5
75763: PUSH
75764: LD_INT 2
75766: ARRAY
75767: PUSH
75768: LD_VAR 0 4
75772: ARRAY
75773: PPUSH
75774: LD_VAR 0 1
75778: PPUSH
75779: CALL_OW 244
// end ;
75783: GO 75705
75785: POP
75786: POP
// end ; end_of_file
75787: LD_VAR 0 3
75791: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75792: LD_VAR 0 1
75796: PUSH
75797: LD_INT 200
75799: DOUBLE
75800: GREATEREQUAL
75801: IFFALSE 75809
75803: LD_INT 299
75805: DOUBLE
75806: LESSEQUAL
75807: IFTRUE 75811
75809: GO 75843
75811: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75812: LD_VAR 0 1
75816: PPUSH
75817: LD_VAR 0 2
75821: PPUSH
75822: LD_VAR 0 3
75826: PPUSH
75827: LD_VAR 0 4
75831: PPUSH
75832: LD_VAR 0 5
75836: PPUSH
75837: CALL 28503 0 5
75841: GO 75920
75843: LD_INT 300
75845: DOUBLE
75846: GREATEREQUAL
75847: IFFALSE 75855
75849: LD_INT 399
75851: DOUBLE
75852: LESSEQUAL
75853: IFTRUE 75857
75855: GO 75919
75857: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75858: LD_VAR 0 1
75862: PPUSH
75863: LD_VAR 0 2
75867: PPUSH
75868: LD_VAR 0 3
75872: PPUSH
75873: LD_VAR 0 4
75877: PPUSH
75878: LD_VAR 0 5
75882: PPUSH
75883: LD_VAR 0 6
75887: PPUSH
75888: LD_VAR 0 7
75892: PPUSH
75893: LD_VAR 0 8
75897: PPUSH
75898: LD_VAR 0 9
75902: PPUSH
75903: LD_VAR 0 10
75907: PPUSH
75908: LD_VAR 0 11
75912: PPUSH
75913: CALL 24828 0 11
75917: GO 75920
75919: POP
// end ;
75920: PPOPN 11
75922: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75923: LD_VAR 0 1
75927: PPUSH
75928: LD_VAR 0 2
75932: PPUSH
75933: LD_VAR 0 3
75937: PPUSH
75938: LD_VAR 0 4
75942: PPUSH
75943: LD_VAR 0 5
75947: PPUSH
75948: CALL 28239 0 5
// end ; end_of_file
75952: PPOPN 5
75954: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75955: LD_VAR 0 1
75959: PPUSH
75960: LD_VAR 0 2
75964: PPUSH
75965: LD_VAR 0 3
75969: PPUSH
75970: LD_VAR 0 4
75974: PPUSH
75975: LD_VAR 0 5
75979: PPUSH
75980: LD_VAR 0 6
75984: PPUSH
75985: CALL 12480 0 6
// end ;
75989: PPOPN 6
75991: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75992: LD_INT 0
75994: PPUSH
// begin if not units then
75995: LD_VAR 0 1
75999: NOT
76000: IFFALSE 76004
// exit ;
76002: GO 76004
// end ;
76004: PPOPN 7
76006: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76007: CALL 12367 0 0
// end ;
76011: PPOPN 1
76013: END
