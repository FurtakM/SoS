// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4559 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8677 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 38957 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 33539 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 33539 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 33539 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 33539 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 33539 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 33539 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 33539 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 33539 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4023
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4021
// begin PrepareHuman ( false , class_mechanic , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 3
3995: PPUSH
3996: LD_INT 4
3998: PPUSH
3999: CALL_OW 380
// team := team ^ CreateHuman ;
4003: LD_ADDR_VAR 0 3
4007: PUSH
4008: LD_VAR 0 3
4012: PUSH
4013: CALL_OW 44
4017: ADD
4018: ST_TO_ADDR
// end ;
4019: GO 3987
4021: POP
4022: POP
// end ; m := 0 ;
4023: LD_ADDR_VAR 0 6
4027: PUSH
4028: LD_INT 0
4030: ST_TO_ADDR
// for i in team do
4031: LD_ADDR_VAR 0 2
4035: PUSH
4036: LD_VAR 0 3
4040: PUSH
4041: FOR_IN
4042: IFFALSE 4249
// if GetClass ( i ) = 3 then
4044: LD_VAR 0 2
4048: PPUSH
4049: CALL_OW 257
4053: PUSH
4054: LD_INT 3
4056: EQUAL
4057: IFFALSE 4205
// begin m := m + 1 ;
4059: LD_ADDR_VAR 0 6
4063: PUSH
4064: LD_VAR 0 6
4068: PUSH
4069: LD_INT 1
4071: PLUS
4072: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4073: LD_ADDR_VAR 0 5
4077: PUSH
4078: LD_INT 1
4080: PPUSH
4081: LD_INT 1
4083: PPUSH
4084: LD_INT 2
4086: PUSH
4087: LD_INT 3
4089: PUSH
4090: LD_INT 2
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: LD_VAR 0 6
4106: PUSH
4107: LD_INT 4
4109: MOD
4110: PUSH
4111: LD_INT 1
4113: PLUS
4114: ARRAY
4115: PPUSH
4116: LD_INT 2
4118: PPUSH
4119: LD_INT 1
4121: PPUSH
4122: LD_INT 4
4124: PUSH
4125: LD_INT 5
4127: PUSH
4128: LD_INT 3
4130: PUSH
4131: LD_INT 11
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_VAR 0 6
4144: PUSH
4145: LD_INT 4
4147: MOD
4148: PUSH
4149: LD_INT 1
4151: PLUS
4152: ARRAY
4153: PPUSH
4154: LD_INT 60
4156: PPUSH
4157: CALL 520 0 7
4161: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4162: LD_VAR 0 5
4166: PPUSH
4167: LD_INT 2
4169: PPUSH
4170: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4174: LD_VAR 0 5
4178: PPUSH
4179: LD_INT 1
4181: PPUSH
4182: LD_INT 0
4184: PPUSH
4185: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4189: LD_VAR 0 2
4193: PPUSH
4194: LD_VAR 0 5
4198: PPUSH
4199: CALL_OW 52
// end else
4203: GO 4247
// begin if GetClass ( i ) = 2 then
4205: LD_VAR 0 2
4209: PPUSH
4210: CALL_OW 257
4214: PUSH
4215: LD_INT 2
4217: EQUAL
4218: IFFALSE 4232
// SetClass ( i , 1 ) ;
4220: LD_VAR 0 2
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4232: LD_VAR 0 2
4236: PPUSH
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: CALL_OW 49
// end ;
4247: GO 4041
4249: POP
4250: POP
// uc_side := 4 ;
4251: LD_ADDR_OWVAR 20
4255: PUSH
4256: LD_INT 4
4258: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4259: LD_ADDR_EXP 19
4263: PUSH
4264: LD_STRING Harisson
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: LD_STRING 
4272: PPUSH
4273: CALL 33539 0 3
4277: ST_TO_ADDR
// PrepareScout ;
4278: CALL 4287 0 0
// end ;
4282: LD_VAR 0 1
4286: RET
// function PrepareScout ; var ape ; begin
4287: LD_INT 0
4289: PPUSH
4290: PPUSH
// uc_side := 4 ;
4291: LD_ADDR_OWVAR 20
4295: PUSH
4296: LD_INT 4
4298: ST_TO_ADDR
// uc_nation := 1 ;
4299: LD_ADDR_OWVAR 21
4303: PUSH
4304: LD_INT 1
4306: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4307: LD_STRING FrankIn06
4309: PPUSH
4310: LD_INT 0
4312: PPUSH
4313: CALL_OW 30
4317: IFFALSE 4334
// Frank := CreateCharacter ( 06c_Frank ) else
4319: LD_ADDR_EXP 15
4323: PUSH
4324: LD_STRING 06c_Frank
4326: PPUSH
4327: CALL_OW 34
4331: ST_TO_ADDR
4332: GO 4374
// if LoadVariable ( FrankInDelta , 0 ) then
4334: LD_STRING FrankInDelta
4336: PPUSH
4337: LD_INT 0
4339: PPUSH
4340: CALL_OW 30
4344: IFFALSE 4361
// Frank := CreateCharacter ( 05_Frank ) else
4346: LD_ADDR_EXP 15
4350: PUSH
4351: LD_STRING 05_Frank
4353: PPUSH
4354: CALL_OW 34
4358: ST_TO_ADDR
4359: GO 4374
// Frank := CreateCharacter ( 04_Frank ) ;
4361: LD_ADDR_EXP 15
4365: PUSH
4366: LD_STRING 04_Frank
4368: PPUSH
4369: CALL_OW 34
4373: ST_TO_ADDR
// if Frank then
4374: LD_EXP 15
4378: IFFALSE 4511
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4380: LD_EXP 15
4384: PPUSH
4385: LD_INT 2
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4395: LD_EXP 15
4399: PPUSH
4400: LD_INT 1
4402: PPUSH
4403: CALL_OW 336
// uc_side := 0 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 0
4414: ST_TO_ADDR
// uc_nation := 0 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 0
4422: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4423: LD_INT 0
4425: PPUSH
4426: LD_INT 12
4428: PPUSH
4429: LD_INT 0
4431: PPUSH
4432: CALL_OW 380
// ape := CreateHuman ;
4436: LD_ADDR_VAR 0 2
4440: PUSH
4441: CALL_OW 44
4445: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4446: LD_VAR 0 2
4450: PPUSH
4451: LD_EXP 15
4455: PPUSH
4456: CALL_OW 250
4460: PPUSH
4461: LD_EXP 15
4465: PPUSH
4466: CALL_OW 251
4470: PPUSH
4471: LD_INT 5
4473: PPUSH
4474: LD_INT 0
4476: PPUSH
4477: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4481: LD_VAR 0 2
4485: PPUSH
4486: LD_EXP 15
4490: PPUSH
4491: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4495: LD_EXP 15
4499: PPUSH
4500: LD_VAR 0 2
4504: PPUSH
4505: CALL_OW 119
// exit ;
4509: GO 4554
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4511: LD_ADDR_EXP 18
4515: PUSH
4516: LD_STRING Yamoko
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: LD_STRING 
4524: PPUSH
4525: CALL 33539 0 3
4529: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4530: LD_EXP 18
4534: PPUSH
4535: LD_INT 2
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: CALL_OW 49
// ComHold ( Kikuchi ) ;
4545: LD_EXP 18
4549: PPUSH
4550: CALL_OW 140
// end ; end_of_file
4554: LD_VAR 0 1
4558: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4559: LD_INT 0
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
4575: PPUSH
4576: PPUSH
// ru_rebuild_list := [ ] ;
4577: LD_ADDR_EXP 20
4581: PUSH
4582: EMPTY
4583: ST_TO_ADDR
// uc_side := 3 ;
4584: LD_ADDR_OWVAR 20
4588: PUSH
4589: LD_INT 3
4591: ST_TO_ADDR
// uc_nation := 3 ;
4592: LD_ADDR_OWVAR 21
4596: PUSH
4597: LD_INT 3
4599: ST_TO_ADDR
// if Difficulty > 1 then
4600: LD_OWVAR 67
4604: PUSH
4605: LD_INT 1
4607: GREATER
4608: IFFALSE 4775
// begin bc_type := b_breastwork ;
4610: LD_ADDR_OWVAR 42
4614: PUSH
4615: LD_INT 31
4617: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4618: LD_INT 78
4620: PPUSH
4621: LD_INT 74
4623: PPUSH
4624: LD_INT 2
4626: PPUSH
4627: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4631: LD_INT 171
4633: PPUSH
4634: LD_INT 193
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: CALL_OW 47
// bc_type := b_turret ;
4644: LD_ADDR_OWVAR 42
4648: PUSH
4649: LD_INT 33
4651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4652: LD_INT 129
4654: PPUSH
4655: LD_INT 96
4657: PPUSH
4658: LD_INT 3
4660: PPUSH
4661: CALL_OW 47
// if Difficulty > 2 then
4665: LD_OWVAR 67
4669: PUSH
4670: LD_INT 2
4672: GREATER
4673: IFFALSE 4744
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4675: LD_INT 83
4677: PPUSH
4678: LD_INT 141
4680: PPUSH
4681: CALL_OW 428
4685: PPUSH
4686: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4690: LD_INT 78
4692: PPUSH
4693: LD_INT 133
4695: PPUSH
4696: CALL_OW 428
4700: PPUSH
4701: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4705: LD_INT 83
4707: PPUSH
4708: LD_INT 141
4710: PPUSH
4711: LD_INT 2
4713: PPUSH
4714: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4718: LD_INT 78
4720: PPUSH
4721: LD_INT 133
4723: PPUSH
4724: LD_INT 2
4726: PPUSH
4727: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4731: LD_INT 145
4733: PPUSH
4734: LD_INT 112
4736: PPUSH
4737: LD_INT 3
4739: PPUSH
4740: CALL_OW 47
// end ; if Difficulty > 3 then
4744: LD_OWVAR 67
4748: PUSH
4749: LD_INT 3
4751: GREATER
4752: IFFALSE 4775
// begin bc_type := b_bunker ;
4754: LD_ADDR_OWVAR 42
4758: PUSH
4759: LD_INT 32
4761: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4762: LD_INT 44
4764: PPUSH
4765: LD_INT 50
4767: PPUSH
4768: LD_INT 4
4770: PPUSH
4771: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4775: LD_ADDR_VAR 0 9
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 3
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 2
4792: PUSH
4793: LD_INT 30
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 30
4805: PUSH
4806: LD_INT 1
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: LIST
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PPUSH
4822: CALL_OW 69
4826: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4827: LD_ADDR_VAR 0 10
4831: PUSH
4832: LD_INT 22
4834: PUSH
4835: LD_INT 3
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 2
4844: PUSH
4845: LD_INT 30
4847: PUSH
4848: LD_INT 6
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 7
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 30
4867: PUSH
4868: LD_INT 8
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4890: LD_ADDR_VAR 0 11
4894: PUSH
4895: LD_INT 22
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 30
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PPUSH
4919: CALL_OW 69
4923: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4924: LD_ADDR_VAR 0 12
4928: PUSH
4929: LD_INT 22
4931: PUSH
4932: LD_INT 3
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 30
4941: PUSH
4942: LD_INT 31
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PPUSH
4953: CALL_OW 69
4957: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4958: LD_ADDR_VAR 0 13
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 3
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: LD_INT 30
4975: PUSH
4976: LD_INT 32
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PPUSH
4987: CALL_OW 69
4991: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4992: LD_ADDR_VAR 0 14
4996: PUSH
4997: LD_INT 22
4999: PUSH
5000: LD_INT 3
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 30
5009: PUSH
5010: LD_INT 33
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5026: LD_ADDR_VAR 0 15
5030: PUSH
5031: LD_INT 42
5033: PUSH
5034: LD_INT 5
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: LD_INT 43
5043: PUSH
5044: LD_INT 50
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: PUSH
5051: LD_INT 44
5053: PUSH
5054: LD_INT 30
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 46
5063: PUSH
5064: LD_INT 15
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5077: LD_ADDR_VAR 0 16
5081: PUSH
5082: LD_INT 0
5084: PUSH
5085: LD_INT 4
5087: PUSH
5088: LD_INT 6
5090: PUSH
5091: LD_INT 3
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5100: LD_ADDR_VAR 0 6
5104: PUSH
5105: LD_INT 4
5107: PUSH
5108: LD_INT 5
5110: PUSH
5111: LD_INT 6
5113: PUSH
5114: LD_INT 7
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: PUSH
5123: LD_OWVAR 67
5127: ARRAY
5128: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5129: LD_INT 16
5131: PPUSH
5132: LD_STRING am_tukh
5134: PPUSH
5135: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5139: LD_ADDR_VAR 0 2
5143: PUSH
5144: LD_INT 21
5146: PUSH
5147: LD_INT 3
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 69
5158: PUSH
5159: FOR_IN
5160: IFFALSE 5197
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5162: LD_VAR 0 2
5166: PPUSH
5167: LD_INT 4
5169: PUSH
5170: LD_INT 5
5172: PUSH
5173: LD_INT 6
5175: PUSH
5176: LD_INT 7
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PUSH
5185: LD_OWVAR 67
5189: ARRAY
5190: PPUSH
5191: CALL_OW 241
5195: GO 5159
5197: POP
5198: POP
// for i in dep_list do
5199: LD_ADDR_VAR 0 2
5203: PUSH
5204: LD_VAR 0 9
5208: PUSH
5209: FOR_IN
5210: IFFALSE 5254
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5212: LD_VAR 0 2
5216: PPUSH
5217: CALL_OW 274
5221: PPUSH
5222: LD_INT 1
5224: PPUSH
5225: LD_INT 1000
5227: PPUSH
5228: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 274
5241: PPUSH
5242: LD_INT 2
5244: PPUSH
5245: LD_INT 1000
5247: PPUSH
5248: CALL_OW 277
// end ;
5252: GO 5209
5254: POP
5255: POP
// InitHc ;
5256: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 70 , 80 ] [ Difficulty ] div 100 ;
5260: LD_ADDR_VAR 0 8
5264: PUSH
5265: LD_VAR 0 13
5269: PUSH
5270: LD_INT 45
5272: PUSH
5273: LD_INT 60
5275: PUSH
5276: LD_INT 70
5278: PUSH
5279: LD_INT 80
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: PUSH
5288: LD_OWVAR 67
5292: ARRAY
5293: MUL
5294: PUSH
5295: LD_INT 100
5297: DIV
5298: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5299: LD_ADDR_VAR 0 16
5303: PUSH
5304: LD_VAR 0 16
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: LD_VAR 0 8
5316: PPUSH
5317: CALL_OW 1
5321: ST_TO_ADDR
// tmp := [ ] ;
5322: LD_ADDR_VAR 0 8
5326: PUSH
5327: EMPTY
5328: ST_TO_ADDR
// for i in bunker_list do
5329: LD_ADDR_VAR 0 2
5333: PUSH
5334: LD_VAR 0 13
5338: PUSH
5339: FOR_IN
5340: IFFALSE 5436
// if i mod 10 + 1 < tmp then
5342: LD_VAR 0 2
5346: PUSH
5347: LD_INT 10
5349: MOD
5350: PUSH
5351: LD_INT 1
5353: PLUS
5354: PUSH
5355: LD_VAR 0 8
5359: LESS
5360: IFFALSE 5405
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5362: LD_ADDR_VAR 0 8
5366: PUSH
5367: LD_VAR 0 8
5371: PPUSH
5372: LD_VAR 0 2
5376: PUSH
5377: LD_INT 3
5379: PPUSH
5380: LD_INT 5
5382: PPUSH
5383: CALL_OW 12
5387: MOD
5388: PUSH
5389: LD_INT 1
5391: PLUS
5392: PPUSH
5393: LD_VAR 0 2
5397: PPUSH
5398: CALL_OW 2
5402: ST_TO_ADDR
5403: GO 5434
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5405: LD_ADDR_VAR 0 8
5409: PUSH
5410: LD_VAR 0 8
5414: PPUSH
5415: LD_VAR 0 8
5419: PUSH
5420: LD_INT 1
5422: PLUS
5423: PPUSH
5424: LD_VAR 0 2
5428: PPUSH
5429: CALL_OW 2
5433: ST_TO_ADDR
5434: GO 5339
5436: POP
5437: POP
// bunker_list := tmp ;
5438: LD_ADDR_VAR 0 13
5442: PUSH
5443: LD_VAR 0 8
5447: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5448: LD_ADDR_VAR 0 2
5452: PUSH
5453: LD_VAR 0 13
5457: PUSH
5458: LD_VAR 0 14
5462: ADD
5463: PUSH
5464: FOR_IN
5465: IFFALSE 5488
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5467: LD_VAR 0 2
5471: PPUSH
5472: LD_VAR 0 2
5476: PPUSH
5477: CALL 2225 0 1
5481: PPUSH
5482: CALL_OW 431
5486: GO 5464
5488: POP
5489: POP
// while ( personel_counter [ 1 ] ) do
5490: LD_VAR 0 16
5494: PUSH
5495: LD_INT 1
5497: ARRAY
5498: IFFALSE 5606
// begin i := rand ( 1 , bunker_list ) ;
5500: LD_ADDR_VAR 0 2
5504: PUSH
5505: LD_INT 1
5507: PPUSH
5508: LD_VAR 0 13
5512: PPUSH
5513: CALL_OW 12
5517: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5518: LD_INT 0
5520: PPUSH
5521: LD_INT 1
5523: PPUSH
5524: LD_VAR 0 6
5528: PPUSH
5529: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5533: CALL_OW 44
5537: PPUSH
5538: LD_VAR 0 13
5542: PUSH
5543: LD_VAR 0 2
5547: ARRAY
5548: PPUSH
5549: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5553: LD_ADDR_VAR 0 13
5557: PUSH
5558: LD_VAR 0 13
5562: PPUSH
5563: LD_VAR 0 2
5567: PPUSH
5568: CALL_OW 3
5572: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5573: LD_ADDR_VAR 0 16
5577: PUSH
5578: LD_VAR 0 16
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_VAR 0 16
5590: PUSH
5591: LD_INT 1
5593: ARRAY
5594: PUSH
5595: LD_INT 1
5597: MINUS
5598: PPUSH
5599: CALL_OW 1
5603: ST_TO_ADDR
// end ;
5604: GO 5490
// for i = 1 to personel_counter [ 2 ] do
5606: LD_ADDR_VAR 0 2
5610: PUSH
5611: DOUBLE
5612: LD_INT 1
5614: DEC
5615: ST_TO_ADDR
5616: LD_VAR 0 16
5620: PUSH
5621: LD_INT 2
5623: ARRAY
5624: PUSH
5625: FOR_TO
5626: IFFALSE 5657
// begin PrepareHuman ( false , 2 , skill ) ;
5628: LD_INT 0
5630: PPUSH
5631: LD_INT 2
5633: PPUSH
5634: LD_VAR 0 6
5638: PPUSH
5639: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5643: CALL_OW 44
5647: PPUSH
5648: LD_INT 16
5650: PPUSH
5651: CALL_OW 52
// end ;
5655: GO 5625
5657: POP
5658: POP
// for i = 1 to personel_counter [ 3 ] do
5659: LD_ADDR_VAR 0 2
5663: PUSH
5664: DOUBLE
5665: LD_INT 1
5667: DEC
5668: ST_TO_ADDR
5669: LD_VAR 0 16
5673: PUSH
5674: LD_INT 3
5676: ARRAY
5677: PUSH
5678: FOR_TO
5679: IFFALSE 5726
// begin PrepareHuman ( false , 3 , skill ) ;
5681: LD_INT 0
5683: PPUSH
5684: LD_INT 3
5686: PPUSH
5687: LD_VAR 0 6
5691: PPUSH
5692: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5696: CALL_OW 44
5700: PPUSH
5701: LD_VAR 0 11
5705: PUSH
5706: LD_VAR 0 2
5710: PUSH
5711: LD_INT 2
5713: MOD
5714: PUSH
5715: LD_INT 1
5717: PLUS
5718: ARRAY
5719: PPUSH
5720: CALL_OW 52
// end ;
5724: GO 5678
5726: POP
5727: POP
// for i = 1 to personel_counter [ 4 ] do
5728: LD_ADDR_VAR 0 2
5732: PUSH
5733: DOUBLE
5734: LD_INT 1
5736: DEC
5737: ST_TO_ADDR
5738: LD_VAR 0 16
5742: PUSH
5743: LD_INT 4
5745: ARRAY
5746: PUSH
5747: FOR_TO
5748: IFFALSE 5785
// begin PrepareHuman ( false , 4 , skill ) ;
5750: LD_INT 0
5752: PPUSH
5753: LD_INT 4
5755: PPUSH
5756: LD_VAR 0 6
5760: PPUSH
5761: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5765: CALL_OW 44
5769: PPUSH
5770: LD_VAR 0 10
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: CALL_OW 52
// end ;
5783: GO 5747
5785: POP
5786: POP
// for i in breastworks_list do
5787: LD_ADDR_VAR 0 2
5791: PUSH
5792: LD_VAR 0 12
5796: PUSH
5797: FOR_IN
5798: IFFALSE 5910
// begin r := GetDir ( i ) ;
5800: LD_ADDR_VAR 0 4
5804: PUSH
5805: LD_VAR 0 2
5809: PPUSH
5810: CALL_OW 254
5814: ST_TO_ADDR
// if r > 3 then
5815: LD_VAR 0 4
5819: PUSH
5820: LD_INT 3
5822: GREATER
5823: IFFALSE 5841
// r := r - 3 else
5825: LD_ADDR_VAR 0 4
5829: PUSH
5830: LD_VAR 0 4
5834: PUSH
5835: LD_INT 3
5837: MINUS
5838: ST_TO_ADDR
5839: GO 5855
// r := r + 3 ;
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: LD_VAR 0 4
5850: PUSH
5851: LD_INT 3
5853: PLUS
5854: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5855: LD_INT 0
5857: PPUSH
5858: LD_INT 1
5860: PPUSH
5861: LD_VAR 0 6
5865: PPUSH
5866: CALL_OW 380
// un := CreateHuman ;
5870: LD_ADDR_VAR 0 5
5874: PUSH
5875: CALL_OW 44
5879: ST_TO_ADDR
// SetDir ( un , r ) ;
5880: LD_VAR 0 5
5884: PPUSH
5885: LD_VAR 0 4
5889: PPUSH
5890: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5894: LD_VAR 0 5
5898: PPUSH
5899: LD_VAR 0 2
5903: PPUSH
5904: CALL_OW 52
// end ;
5908: GO 5797
5910: POP
5911: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5912: LD_ADDR_VAR 0 8
5916: PUSH
5917: LD_INT 22
5919: PUSH
5920: LD_INT 3
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 25
5929: PUSH
5930: LD_INT 3
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 69
5945: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5946: LD_ADDR_VAR 0 4
5950: PUSH
5951: LD_INT 4
5953: PUSH
5954: LD_INT 5
5956: PUSH
5957: LD_INT 6
5959: PUSH
5960: LD_INT 6
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: PUSH
5969: LD_OWVAR 67
5973: ARRAY
5974: ST_TO_ADDR
// for i = 1 to r do
5975: LD_ADDR_VAR 0 2
5979: PUSH
5980: DOUBLE
5981: LD_INT 1
5983: DEC
5984: ST_TO_ADDR
5985: LD_VAR 0 4
5989: PUSH
5990: FOR_TO
5991: IFFALSE 6164
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5993: LD_ADDR_VAR 0 5
5997: PUSH
5998: LD_INT 3
6000: PPUSH
6001: LD_INT 3
6003: PPUSH
6004: LD_INT 22
6006: PUSH
6007: LD_INT 22
6009: PUSH
6010: LD_INT 24
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: PUSH
6018: LD_VAR 0 2
6022: PUSH
6023: LD_INT 3
6025: MOD
6026: PUSH
6027: LD_INT 1
6029: PLUS
6030: ARRAY
6031: PPUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_INT 1
6037: PPUSH
6038: LD_INT 43
6040: PUSH
6041: LD_INT 44
6043: PUSH
6044: LD_INT 42
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: PUSH
6052: LD_VAR 0 2
6056: PUSH
6057: LD_INT 3
6059: MOD
6060: PUSH
6061: LD_INT 1
6063: PLUS
6064: ARRAY
6065: PPUSH
6066: LD_INT 100
6068: PPUSH
6069: CALL 520 0 7
6073: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6074: LD_VAR 0 5
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: LD_INT 5
6084: PPUSH
6085: CALL_OW 12
6089: PPUSH
6090: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6094: LD_VAR 0 5
6098: PPUSH
6099: LD_INT 5
6101: PPUSH
6102: LD_INT 0
6104: PPUSH
6105: CALL_OW 49
// if i > tmp - 2 then
6109: LD_VAR 0 2
6113: PUSH
6114: LD_VAR 0 8
6118: PUSH
6119: LD_INT 2
6121: MINUS
6122: GREATER
6123: IFFALSE 6127
// continue ;
6125: GO 5990
// ComExitBuilding ( tmp [ i ] ) ;
6127: LD_VAR 0 8
6131: PUSH
6132: LD_VAR 0 2
6136: ARRAY
6137: PPUSH
6138: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6142: LD_VAR 0 8
6146: PUSH
6147: LD_VAR 0 2
6151: ARRAY
6152: PPUSH
6153: LD_VAR 0 5
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 5990
6164: POP
6165: POP
// end ;
6166: LD_VAR 0 1
6170: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6171: LD_INT 22
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: IFFALSE 6931
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
6210: PPUSH
// begin enable ;
6211: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_INT 6
6219: PPUSH
6220: LD_INT 3
6222: PUSH
6223: LD_INT 24
6225: PUSH
6226: LD_INT 1000
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 21
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PPUSH
6251: CALL_OW 70
6255: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6256: LD_ADDR_VAR 0 4
6260: PUSH
6261: LD_INT 22
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 25
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 69
6289: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6290: LD_VAR 0 2
6294: NOT
6295: PUSH
6296: LD_EXP 20
6300: NOT
6301: AND
6302: IFFALSE 6372
// begin for i in engs do
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_VAR 0 4
6313: PUSH
6314: FOR_IN
6315: IFFALSE 6370
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6317: LD_VAR 0 1
6321: PPUSH
6322: CALL_OW 256
6326: PUSH
6327: LD_INT 1000
6329: EQUAL
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 314
6340: NOT
6341: AND
6342: PUSH
6343: LD_VAR 0 1
6347: PPUSH
6348: CALL_OW 310
6352: NOT
6353: AND
6354: IFFALSE 6368
// ComEnterUnit ( i , ru_dep_main ) ;
6356: LD_VAR 0 1
6360: PPUSH
6361: LD_INT 16
6363: PPUSH
6364: CALL_OW 120
6368: GO 6314
6370: POP
6371: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6372: LD_VAR 0 4
6376: PPUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 650
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: IFFALSE 6491
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6400: LD_ADDR_VAR 0 3
6404: PUSH
6405: LD_VAR 0 4
6409: PPUSH
6410: LD_INT 3
6412: PUSH
6413: LD_INT 24
6415: PUSH
6416: LD_INT 650
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: PPUSH
6427: CALL_OW 72
6431: ST_TO_ADDR
// for i in tmp do
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_VAR 0 3
6441: PUSH
6442: FOR_IN
6443: IFFALSE 6489
// if not IsInArea ( i , mainBaseArea ) then
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 14
6452: PPUSH
6453: CALL_OW 308
6457: NOT
6458: IFFALSE 6487
// begin ComMoveXY ( i , 129 , 125 ) ;
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_INT 129
6467: PPUSH
6468: LD_INT 125
6470: PPUSH
6471: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6475: LD_VAR 0 1
6479: PPUSH
6480: LD_INT 1050
6482: PPUSH
6483: CALL_OW 202
// end ;
6487: GO 6442
6489: POP
6490: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6491: LD_ADDR_VAR 0 4
6495: PUSH
6496: LD_VAR 0 4
6500: PPUSH
6501: LD_INT 24
6503: PUSH
6504: LD_INT 650
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PPUSH
6511: CALL_OW 72
6515: ST_TO_ADDR
// if not engs then
6516: LD_VAR 0 4
6520: NOT
6521: IFFALSE 6525
// exit ;
6523: GO 6931
// if filter then
6525: LD_VAR 0 2
6529: IFFALSE 6788
// begin for i in engs do
6531: LD_ADDR_VAR 0 1
6535: PUSH
6536: LD_VAR 0 4
6540: PUSH
6541: FOR_IN
6542: IFFALSE 6566
// if IsInUnit ( i ) then
6544: LD_VAR 0 1
6548: PPUSH
6549: CALL_OW 310
6553: IFFALSE 6564
// ComExitBuilding ( i ) ;
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 122
6564: GO 6541
6566: POP
6567: POP
// wait ( 3 ) ;
6568: LD_INT 3
6570: PPUSH
6571: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6575: LD_VAR 0 2
6579: PUSH
6580: LD_INT 2
6582: GREATEREQUAL
6583: PUSH
6584: LD_VAR 0 4
6588: PUSH
6589: LD_INT 2
6591: GREATEREQUAL
6592: AND
6593: IFFALSE 6741
// begin for i = 1 to engs / 2 do
6595: LD_ADDR_VAR 0 1
6599: PUSH
6600: DOUBLE
6601: LD_INT 1
6603: DEC
6604: ST_TO_ADDR
6605: LD_VAR 0 4
6609: PUSH
6610: LD_INT 2
6612: DIVREAL
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6661
// if not HasTask ( engs [ i ] ) then
6617: LD_VAR 0 4
6621: PUSH
6622: LD_VAR 0 1
6626: ARRAY
6627: PPUSH
6628: CALL_OW 314
6632: NOT
6633: IFFALSE 6659
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6635: LD_VAR 0 4
6639: PUSH
6640: LD_VAR 0 1
6644: ARRAY
6645: PPUSH
6646: LD_VAR 0 2
6650: PUSH
6651: LD_INT 1
6653: ARRAY
6654: PPUSH
6655: CALL_OW 130
6659: GO 6614
6661: POP
6662: POP
// for i = engs / 2 + 1 to engs do
6663: LD_ADDR_VAR 0 1
6667: PUSH
6668: DOUBLE
6669: LD_VAR 0 4
6673: PUSH
6674: LD_INT 2
6676: DIVREAL
6677: PUSH
6678: LD_INT 1
6680: PLUS
6681: DEC
6682: ST_TO_ADDR
6683: LD_VAR 0 4
6687: PUSH
6688: FOR_TO
6689: IFFALSE 6737
// if not HasTask ( engs [ i ] ) then
6691: LD_VAR 0 4
6695: PUSH
6696: LD_VAR 0 1
6700: ARRAY
6701: PPUSH
6702: CALL_OW 314
6706: NOT
6707: IFFALSE 6735
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6709: LD_VAR 0 4
6713: PUSH
6714: LD_VAR 0 1
6718: ARRAY
6719: PPUSH
6720: LD_VAR 0 2
6724: PUSH
6725: LD_VAR 0 2
6729: ARRAY
6730: PPUSH
6731: CALL_OW 130
6735: GO 6688
6737: POP
6738: POP
// end else
6739: GO 6788
// for i in engs do
6741: LD_ADDR_VAR 0 1
6745: PUSH
6746: LD_VAR 0 4
6750: PUSH
6751: FOR_IN
6752: IFFALSE 6786
// if not HasTask ( i ) then
6754: LD_VAR 0 1
6758: PPUSH
6759: CALL_OW 314
6763: NOT
6764: IFFALSE 6784
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6766: LD_VAR 0 1
6770: PPUSH
6771: LD_VAR 0 2
6775: PUSH
6776: LD_INT 1
6778: ARRAY
6779: PPUSH
6780: CALL_OW 130
6784: GO 6751
6786: POP
6787: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6788: LD_ADDR_VAR 0 5
6792: PUSH
6793: LD_INT 81
6795: PUSH
6796: LD_INT 3
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PPUSH
6803: CALL_OW 69
6807: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6808: LD_EXP 20
6812: PUSH
6813: LD_VAR 0 2
6817: NOT
6818: AND
6819: IFFALSE 6931
// begin ComExitBuilding ( engs ) ;
6821: LD_VAR 0 4
6825: PPUSH
6826: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6830: LD_VAR 0 5
6834: PPUSH
6835: LD_EXP 20
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: PPUSH
6844: LD_EXP 20
6848: PUSH
6849: LD_INT 3
6851: ARRAY
6852: PPUSH
6853: CALL_OW 73
6857: PPUSH
6858: LD_EXP 20
6862: PUSH
6863: LD_INT 2
6865: ARRAY
6866: PPUSH
6867: LD_EXP 20
6871: PUSH
6872: LD_INT 3
6874: ARRAY
6875: PPUSH
6876: CALL_OW 297
6880: PUSH
6881: LD_INT 10
6883: GREATER
6884: IFFALSE 6931
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6886: LD_VAR 0 4
6890: PPUSH
6891: LD_EXP 20
6895: PUSH
6896: LD_INT 1
6898: ARRAY
6899: PPUSH
6900: LD_EXP 20
6904: PUSH
6905: LD_INT 2
6907: ARRAY
6908: PPUSH
6909: LD_EXP 20
6913: PUSH
6914: LD_INT 3
6916: ARRAY
6917: PPUSH
6918: LD_EXP 20
6922: PUSH
6923: LD_INT 4
6925: ARRAY
6926: PPUSH
6927: CALL_OW 145
// end ; end ;
6931: PPOPN 5
6933: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6934: LD_INT 16
6936: PPUSH
6937: CALL_OW 256
6941: PUSH
6942: LD_INT 250
6944: LESS
6945: IFFALSE 7135
6947: GO 6949
6949: DISABLE
6950: LD_INT 0
6952: PPUSH
6953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6954: LD_ADDR_VAR 0 2
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_INT 3
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 25
6974: PUSH
6975: LD_INT 1
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 25
6984: PUSH
6985: LD_INT 3
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 25
6994: PUSH
6995: LD_INT 4
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 69
7016: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 122
// wait ( 3 ) ;
7026: LD_INT 3
7028: PPUSH
7029: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7033: LD_VAR 0 2
7037: PPUSH
7038: LD_INT 156
7040: PPUSH
7041: LD_INT 211
7043: PPUSH
7044: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7048: LD_INT 35
7050: PPUSH
7051: CALL_OW 67
// for i in tmp do
7055: LD_ADDR_VAR 0 1
7059: PUSH
7060: LD_VAR 0 2
7064: PUSH
7065: FOR_IN
7066: IFFALSE 7126
// if IsInArea ( i , escapeArea ) then
7068: LD_VAR 0 1
7072: PPUSH
7073: LD_INT 15
7075: PPUSH
7076: CALL_OW 308
7080: IFFALSE 7109
// begin RemoveUnit ( i ) ;
7082: LD_VAR 0 1
7086: PPUSH
7087: CALL_OW 64
// tmp := tmp diff i ;
7091: LD_ADDR_VAR 0 2
7095: PUSH
7096: LD_VAR 0 2
7100: PUSH
7101: LD_VAR 0 1
7105: DIFF
7106: ST_TO_ADDR
// end else
7107: GO 7124
// ComMoveXY ( i , 156 , 211 ) ;
7109: LD_VAR 0 1
7113: PPUSH
7114: LD_INT 156
7116: PPUSH
7117: LD_INT 211
7119: PPUSH
7120: CALL_OW 111
7124: GO 7065
7126: POP
7127: POP
// until not tmp ;
7128: LD_VAR 0 2
7132: NOT
7133: IFFALSE 7048
// end ;
7135: PPOPN 2
7137: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7138: LD_INT 22
7140: PUSH
7141: LD_INT 3
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: IFFALSE 7420
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
// begin enable ;
7176: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7177: LD_ADDR_VAR 0 2
7181: PUSH
7182: LD_INT 14
7184: PPUSH
7185: LD_INT 22
7187: PUSH
7188: LD_INT 3
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 21
7197: PUSH
7198: LD_INT 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 3
7207: PUSH
7208: LD_INT 24
7210: PUSH
7211: LD_INT 1000
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 70
7231: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_INT 22
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 4
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: ST_TO_ADDR
// if not doc then
7266: LD_VAR 0 3
7270: NOT
7271: IFFALSE 7275
// exit ;
7273: GO 7420
// if not tmp then
7275: LD_VAR 0 2
7279: NOT
7280: IFFALSE 7371
// begin if not IsInUnit ( doc [ 1 ] ) then
7282: LD_VAR 0 3
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: PPUSH
7291: CALL_OW 310
7295: NOT
7296: IFFALSE 7369
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7298: LD_VAR 0 3
7302: PPUSH
7303: LD_INT 22
7305: PUSH
7306: LD_INT 3
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 30
7318: PUSH
7319: LD_INT 6
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PUSH
7326: LD_INT 30
7328: PUSH
7329: LD_INT 7
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 30
7338: PUSH
7339: LD_INT 8
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 69
7360: PUSH
7361: LD_INT 1
7363: ARRAY
7364: PPUSH
7365: CALL_OW 120
// exit ;
7369: GO 7420
// end ; if IsInUnit ( doc [ 1 ] ) then
7371: LD_VAR 0 3
7375: PUSH
7376: LD_INT 1
7378: ARRAY
7379: PPUSH
7380: CALL_OW 310
7384: IFFALSE 7395
// ComExitBuilding ( doc ) ;
7386: LD_VAR 0 3
7390: PPUSH
7391: CALL_OW 122
// wait ( 3 ) ;
7395: LD_INT 3
7397: PPUSH
7398: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7402: LD_VAR 0 3
7406: PPUSH
7407: LD_VAR 0 2
7411: PUSH
7412: LD_INT 1
7414: ARRAY
7415: PPUSH
7416: CALL_OW 128
// end ;
7420: PPOPN 3
7422: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7423: LD_INT 22
7425: PUSH
7426: LD_INT 3
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 25
7435: PUSH
7436: LD_INT 3
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PPUSH
7447: CALL_OW 69
7451: PUSH
7452: LD_INT 22
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 21
7464: PUSH
7465: LD_INT 2
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PPUSH
7476: CALL_OW 69
7480: AND
7481: IFFALSE 8240
7483: GO 7485
7485: DISABLE
7486: LD_INT 0
7488: PPUSH
7489: PPUSH
7490: PPUSH
7491: PPUSH
7492: PPUSH
7493: PPUSH
// begin enable ;
7494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: LD_INT 22
7502: PUSH
7503: LD_INT 3
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 21
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PUSH
7520: LD_INT 3
7522: PUSH
7523: LD_INT 58
7525: PUSH
7526: EMPTY
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: PPUSH
7538: CALL_OW 69
7542: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7543: LD_ADDR_VAR 0 4
7547: PUSH
7548: LD_INT 10
7550: PUSH
7551: LD_INT 11
7553: PUSH
7554: LD_INT 12
7556: PUSH
7557: LD_INT 14
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: ST_TO_ADDR
// area := 0 ;
7566: LD_ADDR_VAR 0 5
7570: PUSH
7571: LD_INT 0
7573: ST_TO_ADDR
// attacking := false ;
7574: LD_ADDR_VAR 0 3
7578: PUSH
7579: LD_INT 0
7581: ST_TO_ADDR
// for i in tmp do
7582: LD_ADDR_VAR 0 1
7586: PUSH
7587: LD_VAR 0 2
7591: PUSH
7592: FOR_IN
7593: IFFALSE 8021
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7595: LD_VAR 0 1
7599: PPUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 69
7614: PPUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 74
7624: PPUSH
7625: CALL_OW 296
7629: PUSH
7630: LD_INT 10
7632: LESS
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 314
7643: NOT
7644: AND
7645: PUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 110
7655: NOT
7656: AND
7657: PUSH
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 256
7667: PUSH
7668: LD_INT 650
7670: GREATER
7671: AND
7672: IFFALSE 7716
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7674: LD_VAR 0 1
7678: PPUSH
7679: LD_INT 22
7681: PUSH
7682: LD_INT 1
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: PPUSH
7694: LD_VAR 0 1
7698: PPUSH
7699: CALL_OW 74
7703: PPUSH
7704: CALL_OW 115
// attacking := true ;
7708: LD_ADDR_VAR 0 3
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 110
7725: NOT
7726: PUSH
7727: LD_VAR 0 1
7731: PPUSH
7732: CALL_OW 256
7736: PUSH
7737: LD_INT 650
7739: LESS
7740: AND
7741: PUSH
7742: LD_VAR 0 1
7746: PPUSH
7747: CALL_OW 247
7751: PUSH
7752: LD_INT 2
7754: EQUAL
7755: AND
7756: IFFALSE 7785
// begin SetTag ( i , 1 ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_INT 1
7765: PPUSH
7766: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7770: LD_VAR 0 1
7774: PPUSH
7775: LD_INT 130
7777: PPUSH
7778: LD_INT 139
7780: PPUSH
7781: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 110
7794: PUSH
7795: LD_INT 1
7797: EQUAL
7798: PUSH
7799: LD_VAR 0 1
7803: PPUSH
7804: LD_INT 130
7806: PPUSH
7807: LD_INT 139
7809: PPUSH
7810: CALL_OW 297
7814: PUSH
7815: LD_INT 6
7817: LESS
7818: AND
7819: IFFALSE 7833
// SetTag ( i , 2 ) ;
7821: LD_VAR 0 1
7825: PPUSH
7826: LD_INT 2
7828: PPUSH
7829: CALL_OW 109
// if GetTag ( i ) = 2 then
7833: LD_VAR 0 1
7837: PPUSH
7838: CALL_OW 110
7842: PUSH
7843: LD_INT 2
7845: EQUAL
7846: IFFALSE 7981
// begin if GetLives ( i ) = 1000 then
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 256
7857: PUSH
7858: LD_INT 1000
7860: EQUAL
7861: IFFALSE 7877
// SetTag ( i , 3 ) else
7863: LD_VAR 0 1
7867: PPUSH
7868: LD_INT 3
7870: PPUSH
7871: CALL_OW 109
7875: GO 7981
// if IsDrivenBy ( i ) then
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL_OW 311
7886: IFFALSE 7981
// begin mech := IsDrivenBy ( i ) ;
7888: LD_ADDR_VAR 0 6
7892: PUSH
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 311
7902: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7903: LD_INT 1
7905: PPUSH
7906: LD_VAR 0 6
7910: PPUSH
7911: CALL_OW 292
7915: NOT
7916: PUSH
7917: LD_VAR 0 6
7921: PPUSH
7922: CALL_OW 256
7926: PUSH
7927: LD_INT 1000
7929: LESS
7930: AND
7931: IFFALSE 7945
// SetLives ( mech , 1000 ) ;
7933: LD_VAR 0 6
7937: PPUSH
7938: LD_INT 1000
7940: PPUSH
7941: CALL_OW 234
// if not See ( 1 , i ) then
7945: LD_INT 1
7947: PPUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 292
7957: NOT
7958: IFFALSE 7972
// SetFuel ( i , 100 ) ;
7960: LD_VAR 0 1
7964: PPUSH
7965: LD_INT 100
7967: PPUSH
7968: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7972: LD_VAR 0 6
7976: PPUSH
7977: CALL 72971 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 110
7990: PUSH
7991: LD_INT 3
7993: EQUAL
7994: PUSH
7995: LD_VAR 0 1
7999: PPUSH
8000: CALL_OW 311
8004: AND
8005: IFFALSE 8019
// SetTag ( i , 0 ) ;
8007: LD_VAR 0 1
8011: PPUSH
8012: LD_INT 0
8014: PPUSH
8015: CALL_OW 109
// end ;
8019: GO 7592
8021: POP
8022: POP
// if attacking then
8023: LD_VAR 0 3
8027: IFFALSE 8031
// exit ;
8029: GO 8240
// if can_end and tmp then
8031: LD_EXP 6
8035: PUSH
8036: LD_VAR 0 2
8040: AND
8041: IFFALSE 8096
// begin for i in tmp do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: LD_VAR 0 2
8052: PUSH
8053: FOR_IN
8054: IFFALSE 8092
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8056: LD_VAR 0 1
8060: PPUSH
8061: LD_INT 22
8063: PUSH
8064: LD_INT 1
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 69
8075: PPUSH
8076: LD_VAR 0 1
8080: PPUSH
8081: CALL_OW 74
8085: PPUSH
8086: CALL_OW 115
8090: GO 8053
8092: POP
8093: POP
// exit ;
8094: GO 8240
// end ; for i in areas do
8096: LD_ADDR_VAR 0 1
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: FOR_IN
8107: IFFALSE 8144
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8109: LD_VAR 0 1
8113: PPUSH
8114: LD_INT 22
8116: PUSH
8117: LD_INT 1
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PPUSH
8124: CALL_OW 70
8128: IFFALSE 8142
// begin area := i ;
8130: LD_ADDR_VAR 0 5
8134: PUSH
8135: LD_VAR 0 1
8139: ST_TO_ADDR
// break ;
8140: GO 8144
// end ;
8142: GO 8106
8144: POP
8145: POP
// if area then
8146: LD_VAR 0 5
8150: IFFALSE 8240
// begin for i in tmp do
8152: LD_ADDR_VAR 0 1
8156: PUSH
8157: LD_VAR 0 2
8161: PUSH
8162: FOR_IN
8163: IFFALSE 8238
// begin if GetTag ( i ) then
8165: LD_VAR 0 1
8169: PPUSH
8170: CALL_OW 110
8174: IFFALSE 8178
// continue ;
8176: GO 8162
// if GetFuel ( i ) < 33 then
8178: LD_VAR 0 1
8182: PPUSH
8183: CALL_OW 261
8187: PUSH
8188: LD_INT 33
8190: LESS
8191: IFFALSE 8205
// SetFuel ( i , 33 ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_INT 33
8200: PPUSH
8201: CALL_OW 240
// if not IsInArea ( i , area ) then
8205: LD_VAR 0 1
8209: PPUSH
8210: LD_VAR 0 5
8214: PPUSH
8215: CALL_OW 308
8219: NOT
8220: IFFALSE 8236
// ComMoveToArea ( i , area ) ;
8222: LD_VAR 0 1
8226: PPUSH
8227: LD_VAR 0 5
8231: PPUSH
8232: CALL_OW 113
// end ;
8236: GO 8162
8238: POP
8239: POP
// end ; end ;
8240: PPOPN 6
8242: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8243: LD_OWVAR 67
8247: PUSH
8248: LD_INT 1
8250: GREATER
8251: IFFALSE 8540
8253: GO 8255
8255: DISABLE
8256: LD_INT 0
8258: PPUSH
8259: PPUSH
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
// begin uc_side := 3 ;
8264: LD_ADDR_OWVAR 20
8268: PUSH
8269: LD_INT 3
8271: ST_TO_ADDR
// uc_nation := 3 ;
8272: LD_ADDR_OWVAR 21
8276: PUSH
8277: LD_INT 3
8279: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8280: LD_ADDR_VAR 0 5
8284: PUSH
8285: LD_INT 18900
8287: PUSH
8288: LD_INT 14700
8290: PUSH
8291: LD_INT 12600
8293: PUSH
8294: LD_INT 11550
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: PUSH
8303: LD_OWVAR 67
8307: ARRAY
8308: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8309: LD_ADDR_VAR 0 6
8313: PUSH
8314: LD_INT 2
8316: PUSH
8317: LD_INT 2
8319: PUSH
8320: LD_INT 3
8322: PUSH
8323: LD_INT 3
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PUSH
8332: LD_OWVAR 67
8336: ARRAY
8337: ST_TO_ADDR
// for i = 1 to count do
8338: LD_ADDR_VAR 0 1
8342: PUSH
8343: DOUBLE
8344: LD_INT 1
8346: DEC
8347: ST_TO_ADDR
8348: LD_VAR 0 6
8352: PUSH
8353: FOR_TO
8354: IFFALSE 8538
// begin wait ( time ) ;
8356: LD_VAR 0 5
8360: PPUSH
8361: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8365: LD_ADDR_VAR 0 2
8369: PUSH
8370: DOUBLE
8371: LD_INT 1
8373: DEC
8374: ST_TO_ADDR
8375: LD_INT 1
8377: PPUSH
8378: LD_OWVAR 67
8382: PPUSH
8383: CALL_OW 12
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8534
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8391: LD_ADDR_VAR 0 4
8395: PUSH
8396: LD_INT 3
8398: PPUSH
8399: LD_INT 3
8401: PPUSH
8402: LD_INT 22
8404: PPUSH
8405: LD_INT 1
8407: PPUSH
8408: LD_INT 1
8410: PPUSH
8411: LD_INT 43
8413: PUSH
8414: LD_INT 44
8416: PUSH
8417: LD_INT 42
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: LIST
8424: PUSH
8425: LD_VAR 0 1
8429: PUSH
8430: LD_INT 3
8432: MOD
8433: PUSH
8434: LD_INT 1
8436: PLUS
8437: ARRAY
8438: PPUSH
8439: LD_INT 80
8441: PPUSH
8442: CALL 520 0 7
8446: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8447: LD_VAR 0 4
8451: PPUSH
8452: LD_INT 13
8454: PPUSH
8455: LD_INT 0
8457: PPUSH
8458: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8462: LD_INT 0
8464: PPUSH
8465: LD_INT 3
8467: PPUSH
8468: LD_INT 4
8470: PUSH
8471: LD_INT 5
8473: PUSH
8474: LD_INT 5
8476: PUSH
8477: LD_INT 7
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: PUSH
8486: LD_OWVAR 67
8490: ARRAY
8491: PPUSH
8492: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8496: CALL_OW 44
8500: PPUSH
8501: LD_VAR 0 4
8505: PPUSH
8506: CALL_OW 52
// wait ( 0 0$01 ) ;
8510: LD_INT 35
8512: PPUSH
8513: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8517: LD_VAR 0 4
8521: PPUSH
8522: LD_INT 143
8524: PPUSH
8525: LD_INT 143
8527: PPUSH
8528: CALL_OW 111
// end ;
8532: GO 8388
8534: POP
8535: POP
// end ;
8536: GO 8353
8538: POP
8539: POP
// end ;
8540: PPOPN 6
8542: END
// every 8 8$00 do var i , un , time ;
8543: GO 8545
8545: DISABLE
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
8550: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8551: LD_ADDR_VAR 0 3
8555: PUSH
8556: LD_INT 6300
8558: PUSH
8559: LD_INT 2100
8561: PUSH
8562: LD_INT 1050
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: LIST
8569: ST_TO_ADDR
// wait ( time ) ;
8570: LD_VAR 0 3
8574: PPUSH
8575: CALL_OW 67
// uc_side := 3 ;
8579: LD_ADDR_OWVAR 20
8583: PUSH
8584: LD_INT 3
8586: ST_TO_ADDR
// uc_nation := 3 ;
8587: LD_ADDR_OWVAR 21
8591: PUSH
8592: LD_INT 3
8594: ST_TO_ADDR
// for i = 1 to 2 do
8595: LD_ADDR_VAR 0 1
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_INT 2
8607: PUSH
8608: FOR_TO
8609: IFFALSE 8672
// begin PrepareHuman ( false , 1 , 4 ) ;
8611: LD_INT 0
8613: PPUSH
8614: LD_INT 1
8616: PPUSH
8617: LD_INT 4
8619: PPUSH
8620: CALL_OW 380
// un := CreateHuman ;
8624: LD_ADDR_VAR 0 2
8628: PUSH
8629: CALL_OW 44
8633: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8634: LD_VAR 0 2
8638: PPUSH
8639: LD_INT 16
8641: PPUSH
8642: CALL_OW 52
// ComExitBuilding ( un ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8655: LD_VAR 0 2
8659: PPUSH
8660: LD_INT 41
8662: PPUSH
8663: LD_INT 76
8665: PPUSH
8666: CALL_OW 174
// end ;
8670: GO 8608
8672: POP
8673: POP
// end ; end_of_file
8674: PPOPN 3
8676: END
// export function Action ; begin
8677: LD_INT 0
8679: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8680: LD_INT 28
8682: PPUSH
8683: LD_INT 3
8685: PPUSH
8686: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8690: LD_INT 41
8692: PPUSH
8693: LD_INT 76
8695: PPUSH
8696: LD_INT 1
8698: PPUSH
8699: LD_INT 10
8701: PPUSH
8702: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8706: LD_INT 41
8708: PPUSH
8709: LD_INT 76
8711: PPUSH
8712: LD_INT 1
8714: PPUSH
8715: CALL_OW 331
// InGameOn ;
8719: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8723: LD_EXP 19
8727: PPUSH
8728: LD_STRING D2-Har-1
8730: PPUSH
8731: CALL_OW 94
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8739: LD_STRING M1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8751: LD_EXP 4
8755: PUSH
8756: LD_INT 1
8758: GREATER
8759: IFFALSE 8850
8761: GO 8763
8763: DISABLE
8764: LD_INT 0
8766: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8767: LD_ADDR_VAR 0 1
8771: PUSH
8772: LD_INT 1
8774: PPUSH
8775: CALL 608 0 1
8779: PUSH
8780: LD_INT 1
8782: ARRAY
8783: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8784: LD_VAR 0 1
8788: PPUSH
8789: LD_STRING D2a-Sol1-1
8791: PPUSH
8792: CALL_OW 88
// if not un then
8796: LD_VAR 0 1
8800: NOT
8801: IFFALSE 8832
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8803: LD_ADDR_VAR 0 1
8807: PUSH
8808: LD_INT 2
8810: PPUSH
8811: CALL 608 0 1
8815: PUSH
8816: LD_INT 1
8818: ARRAY
8819: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8820: LD_VAR 0 1
8824: PPUSH
8825: LD_STRING D2a-FSol1-1
8827: PPUSH
8828: CALL_OW 88
// end ; if Khatam then
8832: LD_EXP 17
8836: IFFALSE 8850
// Say ( Khatam , D3b-Khat-3 ) ;
8838: LD_EXP 17
8842: PPUSH
8843: LD_STRING D3b-Khat-3
8845: PPUSH
8846: CALL_OW 88
// end ;
8850: PPOPN 1
8852: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8853: LD_EXP 15
8857: PUSH
8858: LD_EXP 18
8862: NOT
8863: AND
8864: PUSH
8865: LD_INT 22
8867: PUSH
8868: LD_INT 1
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 91
8877: PUSH
8878: LD_EXP 15
8882: PUSH
8883: LD_INT 7
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: AND
8900: PUSH
8901: LD_EXP 15
8905: PPUSH
8906: CALL_OW 302
8910: AND
8911: PUSH
8912: LD_INT 1
8914: PPUSH
8915: CALL_OW 463
8919: NOT
8920: AND
8921: PUSH
8922: LD_INT 4
8924: PPUSH
8925: CALL_OW 463
8929: NOT
8930: AND
8931: IFFALSE 9518
8933: GO 8935
8935: DISABLE
8936: LD_INT 0
8938: PPUSH
8939: PPUSH
// begin InGameOn ;
8940: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_INT 0
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 25
8961: PUSH
8962: LD_INT 12
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PPUSH
8973: CALL_OW 69
8977: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: LD_EXP 15
8992: PPUSH
8993: CALL_OW 74
8997: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8998: LD_ADDR_VAR 0 1
9002: PUSH
9003: LD_INT 22
9005: PUSH
9006: LD_INT 1
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 21
9015: PUSH
9016: LD_INT 1
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 91
9025: PUSH
9026: LD_EXP 15
9030: PUSH
9031: LD_INT 20
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: PPUSH
9044: CALL_OW 69
9048: PUSH
9049: FOR_IN
9050: IFFALSE 9068
// ComTurnUnit ( i , Frank ) ;
9052: LD_VAR 0 1
9056: PPUSH
9057: LD_EXP 15
9061: PPUSH
9062: CALL_OW 119
9066: GO 9049
9068: POP
9069: POP
// SetSide ( Frank , 1 ) ;
9070: LD_EXP 15
9074: PPUSH
9075: LD_INT 1
9077: PPUSH
9078: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9082: LD_EXP 9
9086: PPUSH
9087: LD_EXP 15
9091: PPUSH
9092: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9096: LD_EXP 9
9100: PPUSH
9101: LD_EXP 15
9105: PPUSH
9106: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9110: LD_EXP 15
9114: PPUSH
9115: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9119: LD_EXP 15
9123: PPUSH
9124: LD_STRING D3a-Frank-1
9126: PPUSH
9127: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9131: LD_VAR 0 2
9135: PPUSH
9136: LD_INT 42
9138: PPUSH
9139: LD_INT 78
9141: PPUSH
9142: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9146: LD_VAR 0 2
9150: PPUSH
9151: LD_EXP 15
9155: PPUSH
9156: CALL_OW 179
// if Lisa then
9160: LD_EXP 14
9164: IFFALSE 9178
// Say ( Lisa , D3a-Lisa-1 ) ;
9166: LD_EXP 14
9170: PPUSH
9171: LD_STRING D3a-Lisa-1
9173: PPUSH
9174: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9178: LD_EXP 9
9182: PPUSH
9183: LD_STRING D3a-JMM-1
9185: PPUSH
9186: CALL_OW 88
// if Cyrus then
9190: LD_EXP 13
9194: IFFALSE 9208
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9196: LD_EXP 13
9200: PPUSH
9201: LD_STRING D3a-Cyrus-1
9203: PPUSH
9204: CALL_OW 88
// if GetRandom ( sex_male ) then
9208: LD_INT 1
9210: PPUSH
9211: CALL 608 0 1
9215: IFFALSE 9236
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9217: LD_INT 1
9219: PPUSH
9220: CALL 608 0 1
9224: PUSH
9225: LD_INT 1
9227: ARRAY
9228: PPUSH
9229: LD_STRING D3a-Sol1-1
9231: PPUSH
9232: CALL_OW 88
// if GetRandom ( sex_female ) then
9236: LD_INT 2
9238: PPUSH
9239: CALL 608 0 1
9243: IFFALSE 9264
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9245: LD_INT 2
9247: PPUSH
9248: CALL 608 0 1
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PPUSH
9257: LD_STRING D3a-FSol1-1
9259: PPUSH
9260: CALL_OW 88
// if Gladstone then
9264: LD_EXP 16
9268: IFFALSE 9282
// Say ( Gladstone , D3a-Glad-1 ) ;
9270: LD_EXP 16
9274: PPUSH
9275: LD_STRING D3a-Glad-1
9277: PPUSH
9278: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9282: LD_VAR 0 2
9286: PPUSH
9287: LD_INT 60
9289: PPUSH
9290: LD_INT 113
9292: PPUSH
9293: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9297: LD_EXP 15
9301: PPUSH
9302: LD_STRING D3a-Frank-2
9304: PPUSH
9305: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9309: LD_EXP 15
9313: PPUSH
9314: LD_EXP 9
9318: PPUSH
9319: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9323: LD_EXP 9
9327: PPUSH
9328: LD_STRING D3a-JMM-2
9330: PPUSH
9331: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9335: LD_INT 1
9337: PPUSH
9338: LD_INT 4
9340: PPUSH
9341: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9345: LD_INT 85
9347: PPUSH
9348: LD_INT 134
9350: PPUSH
9351: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9355: LD_EXP 15
9359: PPUSH
9360: LD_STRING D3a-Frank-3
9362: PPUSH
9363: CALL_OW 88
// Wait ( 0 0$01 ) ;
9367: LD_INT 35
9369: PPUSH
9370: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9374: LD_INT 166
9376: PPUSH
9377: LD_INT 136
9379: PPUSH
9380: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9384: LD_EXP 9
9388: PPUSH
9389: LD_STRING D3a-JMM-3
9391: PPUSH
9392: CALL_OW 88
// Wait ( 0 0$01 ) ;
9396: LD_INT 35
9398: PPUSH
9399: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9403: LD_EXP 15
9407: PPUSH
9408: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9412: LD_EXP 15
9416: PPUSH
9417: LD_STRING D3a-Frank-4
9419: PPUSH
9420: CALL_OW 88
// if Lisa then
9424: LD_EXP 14
9428: IFFALSE 9442
// Say ( Lisa , D3a-Lisa-4 ) ;
9430: LD_EXP 14
9434: PPUSH
9435: LD_STRING D3a-Lisa-4
9437: PPUSH
9438: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9442: LD_EXP 9
9446: PPUSH
9447: LD_STRING D3a-JMM-4
9449: PPUSH
9450: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9454: LD_EXP 15
9458: PPUSH
9459: LD_STRING D3a-Frank-5
9461: PPUSH
9462: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9466: LD_EXP 9
9470: PPUSH
9471: LD_STRING D3a-JMM-5
9473: PPUSH
9474: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9478: LD_EXP 15
9482: PPUSH
9483: LD_STRING D3a-Frank-6
9485: PPUSH
9486: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9490: LD_EXP 9
9494: PPUSH
9495: LD_STRING D3a-JMM-6
9497: PPUSH
9498: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9502: LD_EXP 15
9506: PPUSH
9507: LD_STRING D3a-Frank-7
9509: PPUSH
9510: CALL_OW 88
// InGameOff ;
9514: CALL_OW 9
// end ;
9518: PPOPN 2
9520: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9521: LD_EXP 18
9525: PUSH
9526: LD_EXP 15
9530: NOT
9531: AND
9532: PUSH
9533: LD_INT 22
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 91
9545: PUSH
9546: LD_EXP 18
9550: PUSH
9551: LD_INT 7
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 69
9567: AND
9568: PUSH
9569: LD_EXP 18
9573: PPUSH
9574: CALL_OW 302
9578: AND
9579: PUSH
9580: LD_INT 1
9582: PPUSH
9583: CALL_OW 463
9587: NOT
9588: AND
9589: PUSH
9590: LD_INT 4
9592: PPUSH
9593: CALL_OW 463
9597: NOT
9598: AND
9599: IFFALSE 9779
9601: GO 9603
9603: DISABLE
// begin InGameOn ;
9604: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9608: LD_EXP 9
9612: PPUSH
9613: LD_EXP 18
9617: PPUSH
9618: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9622: LD_EXP 18
9626: PPUSH
9627: LD_EXP 9
9631: PPUSH
9632: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9636: LD_EXP 18
9640: PPUSH
9641: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9645: LD_EXP 18
9649: PPUSH
9650: LD_STRING D3b-Yam-1
9652: PPUSH
9653: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9657: LD_EXP 9
9661: PPUSH
9662: LD_STRING D3b-JMM-1
9664: PPUSH
9665: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9669: LD_INT 1
9671: PPUSH
9672: LD_INT 4
9674: PPUSH
9675: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9679: LD_INT 85
9681: PPUSH
9682: LD_INT 134
9684: PPUSH
9685: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9689: LD_EXP 18
9693: PPUSH
9694: LD_STRING D3b-Yam-2
9696: PPUSH
9697: CALL_OW 88
// Wait ( 0 0$01 ) ;
9701: LD_INT 35
9703: PPUSH
9704: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9708: LD_EXP 9
9712: PPUSH
9713: LD_STRING D3b-JMM-2
9715: PPUSH
9716: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9720: LD_INT 166
9722: PPUSH
9723: LD_INT 136
9725: PPUSH
9726: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9730: LD_EXP 18
9734: PPUSH
9735: LD_STRING D3b-Yam-3
9737: PPUSH
9738: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9742: LD_EXP 9
9746: PPUSH
9747: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9751: LD_EXP 9
9755: PPUSH
9756: LD_STRING D3b-JMM-3a
9758: PPUSH
9759: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9763: LD_EXP 18
9767: PPUSH
9768: LD_INT 1
9770: PPUSH
9771: CALL_OW 235
// InGameOff ;
9775: CALL_OW 9
// end ;
9779: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9780: LD_INT 7
9782: PPUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 3
9795: PUSH
9796: LD_INT 24
9798: PUSH
9799: LD_INT 1000
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PPUSH
9814: CALL_OW 70
9818: IFFALSE 10274
9820: GO 9822
9822: DISABLE
9823: LD_INT 0
9825: PPUSH
9826: PPUSH
9827: PPUSH
9828: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9829: LD_INT 35
9831: PPUSH
9832: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9836: LD_ADDR_VAR 0 1
9840: PUSH
9841: LD_INT 7
9843: PPUSH
9844: LD_INT 22
9846: PUSH
9847: LD_INT 1
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: LD_INT 24
9859: PUSH
9860: LD_INT 1000
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PPUSH
9875: CALL_OW 70
9879: ST_TO_ADDR
// if not un then
9880: LD_VAR 0 1
9884: NOT
9885: IFFALSE 9889
// continue ;
9887: GO 9829
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9889: LD_ADDR_VAR 0 3
9893: PUSH
9894: LD_VAR 0 1
9898: PUSH
9899: LD_INT 1
9901: ARRAY
9902: PPUSH
9903: CALL 2053 0 1
9907: ST_TO_ADDR
// until tw ;
9908: LD_VAR 0 3
9912: IFFALSE 9829
// DialogueOn ;
9914: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9918: LD_VAR 0 3
9922: PPUSH
9923: CALL_OW 87
// if Lisa then
9927: LD_EXP 14
9931: IFFALSE 9959
// begin Say ( Lisa , D5-Lisa-1 ) ;
9933: LD_EXP 14
9937: PPUSH
9938: LD_STRING D5-Lisa-1
9940: PPUSH
9941: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9945: LD_EXP 9
9949: PPUSH
9950: LD_STRING D5-JMM-1a
9952: PPUSH
9953: CALL_OW 88
// end else
9957: GO 9971
// Say ( JMM , D5-JMM-1 ) ;
9959: LD_EXP 9
9963: PPUSH
9964: LD_STRING D5-JMM-1
9966: PPUSH
9967: CALL_OW 88
// DialogueOff ;
9971: CALL_OW 7
// while ( true ) do
9975: LD_INT 1
9977: IFFALSE 10033
// begin wait ( 0 0$01 ) ;
9979: LD_INT 35
9981: PPUSH
9982: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9986: LD_ADDR_VAR 0 2
9990: PUSH
9991: LD_INT 8
9993: PPUSH
9994: LD_INT 30
9996: PUSH
9997: LD_INT 26
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 101
10006: PUSH
10007: LD_INT 1
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 71
10022: ST_TO_ADDR
// if x then
10023: LD_VAR 0 2
10027: IFFALSE 10031
// break ;
10029: GO 10033
// end ;
10031: GO 9975
// CenterOnUnits ( x [ 1 ] ) ;
10033: LD_VAR 0 2
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10046: LD_EXP 15
10050: PUSH
10051: LD_EXP 15
10055: PPUSH
10056: CALL_OW 255
10060: PUSH
10061: LD_INT 1
10063: EQUAL
10064: AND
10065: IFFALSE 10081
// Say ( Frank , D5a-Frank-1 ) else
10067: LD_EXP 15
10071: PPUSH
10072: LD_STRING D5a-Frank-1
10074: PPUSH
10075: CALL_OW 88
10079: GO 10135
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10081: LD_EXP 18
10085: PUSH
10086: LD_EXP 18
10090: PPUSH
10091: CALL_OW 255
10095: PUSH
10096: LD_INT 1
10098: EQUAL
10099: AND
10100: IFFALSE 10116
// Say ( Kikuchi , D5a-Yam-1 ) else
10102: LD_EXP 18
10106: PPUSH
10107: LD_STRING D5a-Yam-1
10109: PPUSH
10110: CALL_OW 88
10114: GO 10135
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10116: LD_INT 1
10118: PPUSH
10119: CALL 608 0 1
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_STRING D5a-Sol1-1
10130: PPUSH
10131: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10135: LD_EXP 9
10139: PPUSH
10140: LD_STRING D5a-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Cyrus then
10147: LD_EXP 13
10151: IFFALSE 10165
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10153: LD_EXP 13
10157: PPUSH
10158: LD_STRING D5a-Cyrus-1
10160: PPUSH
10161: CALL_OW 88
// x := false ;
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 0
10172: ST_TO_ADDR
// while ( true ) do
10173: LD_INT 1
10175: IFFALSE 10262
// begin wait ( 0 0$01 ) ;
10177: LD_INT 35
10179: PPUSH
10180: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10184: LD_ADDR_VAR 0 4
10188: PUSH
10189: LD_INT 2
10191: PUSH
10192: LD_INT 30
10194: PUSH
10195: LD_INT 0
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 30
10204: PUSH
10205: LD_INT 1
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: PPUSH
10217: CALL_OW 69
10221: PUSH
10222: LD_INT 1
10224: DIFF
10225: PUSH
10226: FOR_IN
10227: IFFALSE 10250
// if BaseNeedEnergy ( i ) then
10229: LD_VAR 0 4
10233: PPUSH
10234: CALL 1178 0 1
10238: IFFALSE 10248
// x := true ;
10240: LD_ADDR_VAR 0 2
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
10248: GO 10226
10250: POP
10251: POP
// if x then
10252: LD_VAR 0 2
10256: IFFALSE 10260
// break ;
10258: GO 10262
// end ;
10260: GO 10173
// Say ( JMM , D5b-JMM-1 ) ;
10262: LD_EXP 9
10266: PPUSH
10267: LD_STRING D5b-JMM-1
10269: PPUSH
10270: CALL_OW 88
// end ;
10274: PPOPN 4
10276: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10277: LD_EXP 5
10281: PUSH
10282: LD_INT 1
10284: ARRAY
10285: PUSH
10286: LD_OWVAR 1
10290: LESS
10291: PUSH
10292: LD_INT 22
10294: PUSH
10295: LD_INT 3
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 3
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 69
10320: PUSH
10321: LD_INT 10
10323: LESS
10324: OR
10325: IFFALSE 10525
10327: GO 10329
10329: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10330: LD_INT 16
10332: PPUSH
10333: CALL_OW 301
10337: NOT
10338: IFFALSE 10361
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10340: LD_EXP 19
10344: PPUSH
10345: LD_STRING D3b-Har-3
10347: PPUSH
10348: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10352: LD_STRING M2a
10354: PPUSH
10355: CALL_OW 337
// end else
10359: GO 10380
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10361: LD_EXP 19
10365: PPUSH
10366: LD_STRING D3b-Har-3a
10368: PPUSH
10369: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10373: LD_STRING M2
10375: PPUSH
10376: CALL_OW 337
// end ; can_end := true ;
10380: LD_ADDR_EXP 6
10384: PUSH
10385: LD_INT 1
10387: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10388: LD_INT 9
10390: PPUSH
10391: LD_INT 1
10393: PPUSH
10394: CALL_OW 424
// Wait ( 0 0$02 ) ;
10398: LD_INT 70
10400: PPUSH
10401: CALL_OW 67
// if Lisa then
10405: LD_EXP 14
10409: IFFALSE 10423
// Say ( Lisa , D3b-Lisa ) ;
10411: LD_EXP 14
10415: PPUSH
10416: LD_STRING D3b-Lisa
10418: PPUSH
10419: CALL_OW 88
// if Bobby then
10423: LD_EXP 12
10427: IFFALSE 10441
// Say ( Bobby , D3b-Bobby-3 ) ;
10429: LD_EXP 12
10433: PPUSH
10434: LD_STRING D3b-Bobby-3
10436: PPUSH
10437: CALL_OW 88
// if Cyrus then
10441: LD_EXP 13
10445: IFFALSE 10459
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10447: LD_EXP 13
10451: PPUSH
10452: LD_STRING D3b-Cyrus-3
10454: PPUSH
10455: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10459: LD_EXP 15
10463: PUSH
10464: LD_EXP 15
10468: PPUSH
10469: CALL_OW 255
10473: PUSH
10474: LD_INT 1
10476: EQUAL
10477: AND
10478: IFFALSE 10492
// Say ( Frank , D3b-Frank-3 ) ;
10480: LD_EXP 15
10484: PPUSH
10485: LD_STRING D3b-Frank-3
10487: PPUSH
10488: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10492: LD_EXP 18
10496: PUSH
10497: LD_EXP 18
10501: PPUSH
10502: CALL_OW 255
10506: PUSH
10507: LD_INT 1
10509: EQUAL
10510: AND
10511: IFFALSE 10525
// Say ( Kikuchi , D3b-Yam-4 ) ;
10513: LD_EXP 18
10517: PPUSH
10518: LD_STRING D3b-Yam-4
10520: PPUSH
10521: CALL_OW 88
// end ;
10525: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10526: LD_EXP 5
10530: PUSH
10531: LD_INT 2
10533: ARRAY
10534: PUSH
10535: LD_OWVAR 1
10539: LESS
10540: IFFALSE 10572
10542: GO 10544
10544: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10545: LD_EXP 19
10549: PPUSH
10550: LD_STRING D4-Har-1
10552: PPUSH
10553: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10557: LD_STRING M3
10559: PPUSH
10560: CALL_OW 337
// must_end := true ;
10564: LD_ADDR_EXP 7
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// end ;
10572: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10573: LD_EXP 5
10577: PUSH
10578: LD_INT 3
10580: ARRAY
10581: PUSH
10582: LD_OWVAR 1
10586: LESS
10587: IFFALSE 10618
10589: GO 10591
10591: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10592: LD_INT 16
10594: PPUSH
10595: CALL_OW 301
10599: NOT
10600: IFFALSE 10611
// YouLost ( TimeOut1 ) else
10602: LD_STRING TimeOut1
10604: PPUSH
10605: CALL_OW 104
10609: GO 10618
// YouLost ( TimeOut2 ) ;
10611: LD_STRING TimeOut2
10613: PPUSH
10614: CALL_OW 104
// end ;
10618: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10619: LD_EXP 9
10623: PPUSH
10624: LD_INT 9
10626: PPUSH
10627: CALL_OW 308
10631: PUSH
10632: LD_EXP 6
10636: AND
10637: IFFALSE 11798
10639: GO 10641
10641: DISABLE
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
10650: LD_INT 22
10652: PUSH
10653: LD_INT 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 23
10672: PUSH
10673: LD_INT 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 50
10682: PUSH
10683: EMPTY
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 69
10696: PPUSH
10697: CALL 35662 0 1
10701: PUSH
10702: LD_INT 5
10704: LESS
10705: IFFALSE 10716
// begin YouLost ( LostVictory ) ;
10707: LD_STRING LostVictory
10709: PPUSH
10710: CALL_OW 104
// exit ;
10714: GO 11798
// end ; wait_on := false ;
10716: LD_ADDR_VAR 0 1
10720: PUSH
10721: LD_INT 0
10723: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10724: LD_INT 1
10726: PPUSH
10727: CALL 1255 0 1
10731: PPUSH
10732: CALL 35662 0 1
10736: PUSH
10737: LD_INT 1
10739: PPUSH
10740: LD_INT 9
10742: PPUSH
10743: CALL 1346 0 2
10747: PUSH
10748: LD_INT 1
10750: PPUSH
10751: LD_INT 9
10753: PPUSH
10754: CALL 1393 0 2
10758: ADD
10759: PPUSH
10760: CALL 35662 0 1
10764: GREATER
10765: IFFALSE 10788
// if Query ( Q1 ) = 1 then
10767: LD_STRING Q1
10769: PPUSH
10770: CALL_OW 97
10774: PUSH
10775: LD_INT 1
10777: EQUAL
10778: IFFALSE 10788
// wait_on := true ;
10780: LD_ADDR_VAR 0 1
10784: PUSH
10785: LD_INT 1
10787: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10788: LD_INT 35
10790: PPUSH
10791: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10795: LD_INT 1
10797: PPUSH
10798: CALL 1255 0 1
10802: PPUSH
10803: CALL 35662 0 1
10807: PUSH
10808: LD_INT 1
10810: PPUSH
10811: LD_INT 9
10813: PPUSH
10814: CALL 1346 0 2
10818: PUSH
10819: LD_INT 1
10821: PPUSH
10822: LD_INT 9
10824: PPUSH
10825: CALL 1393 0 2
10829: UNION
10830: PPUSH
10831: CALL 35662 0 1
10835: EQUAL
10836: IFFALSE 10788
// DialogueOn ;
10838: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10842: LD_EXP 9
10846: PPUSH
10847: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10851: LD_EXP 9
10855: PPUSH
10856: LD_STRING D6-JMM-1
10858: PPUSH
10859: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10863: LD_EXP 19
10867: PPUSH
10868: LD_STRING D6-Har-1
10870: PPUSH
10871: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10875: LD_EXP 9
10879: PPUSH
10880: LD_STRING D6-JMM-2
10882: PPUSH
10883: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10887: LD_EXP 19
10891: PPUSH
10892: LD_STRING D6-Har-2
10894: PPUSH
10895: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10899: LD_EXP 9
10903: PPUSH
10904: LD_STRING D6-JMM-3
10906: PPUSH
10907: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10911: LD_EXP 19
10915: PPUSH
10916: LD_STRING D6-Har-3
10918: PPUSH
10919: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10923: LD_EXP 9
10927: PPUSH
10928: LD_STRING D6-JMM-4
10930: PPUSH
10931: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10935: LD_EXP 19
10939: PPUSH
10940: LD_STRING D6-Har-4
10942: PPUSH
10943: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10947: LD_EXP 9
10951: PPUSH
10952: LD_STRING D6-JMM-5
10954: PPUSH
10955: CALL_OW 88
// DialogueOff ;
10959: CALL_OW 7
// m1 := false ;
10963: LD_ADDR_VAR 0 4
10967: PUSH
10968: LD_INT 0
10970: ST_TO_ADDR
// m2 := false ;
10971: LD_ADDR_VAR 0 5
10975: PUSH
10976: LD_INT 0
10978: ST_TO_ADDR
// m3 := false ;
10979: LD_ADDR_VAR 0 6
10983: PUSH
10984: LD_INT 0
10986: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10987: LD_ADDR_VAR 0 3
10991: PUSH
10992: LD_INT 3
10994: PPUSH
10995: CALL 1524 0 1
10999: ST_TO_ADDR
// if tmp >= 35 then
11000: LD_VAR 0 3
11004: PUSH
11005: LD_INT 35
11007: GREATEREQUAL
11008: IFFALSE 11045
// begin AddMedal ( Destroy1 , - 1 ) ;
11010: LD_STRING Destroy1
11012: PPUSH
11013: LD_INT 1
11015: NEG
11016: PPUSH
11017: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
11021: LD_STRING Destroy2
11023: PPUSH
11024: LD_INT 1
11026: NEG
11027: PPUSH
11028: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11032: LD_STRING Destroy3
11034: PPUSH
11035: LD_INT 1
11037: NEG
11038: PPUSH
11039: CALL_OW 101
// end else
11043: GO 11156
// begin AddMedal ( Destroy1 , 1 ) ;
11045: LD_STRING Destroy1
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: CALL_OW 101
// m1 := true ;
11055: LD_ADDR_VAR 0 4
11059: PUSH
11060: LD_INT 1
11062: ST_TO_ADDR
// if tmp >= 25 then
11063: LD_VAR 0 3
11067: PUSH
11068: LD_INT 25
11070: GREATEREQUAL
11071: IFFALSE 11097
// begin AddMedal ( Destroy2 , - 1 ) ;
11073: LD_STRING Destroy2
11075: PPUSH
11076: LD_INT 1
11078: NEG
11079: PPUSH
11080: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11084: LD_STRING Destroy3
11086: PPUSH
11087: LD_INT 1
11089: NEG
11090: PPUSH
11091: CALL_OW 101
// end else
11095: GO 11156
// begin AddMedal ( Destroy2 , 1 ) ;
11097: LD_STRING Destroy2
11099: PPUSH
11100: LD_INT 1
11102: PPUSH
11103: CALL_OW 101
// m2 := true ;
11107: LD_ADDR_VAR 0 5
11111: PUSH
11112: LD_INT 1
11114: ST_TO_ADDR
// if tmp >= 15 then
11115: LD_VAR 0 3
11119: PUSH
11120: LD_INT 15
11122: GREATEREQUAL
11123: IFFALSE 11138
// AddMedal ( Destroy3 , - 1 ) else
11125: LD_STRING Destroy3
11127: PPUSH
11128: LD_INT 1
11130: NEG
11131: PPUSH
11132: CALL_OW 101
11136: GO 11156
// begin AddMedal ( Destroy3 , 1 ) ;
11138: LD_STRING Destroy3
11140: PPUSH
11141: LD_INT 1
11143: PPUSH
11144: CALL_OW 101
// m3 := true ;
11148: LD_ADDR_VAR 0 6
11152: PUSH
11153: LD_INT 1
11155: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11156: LD_OWVAR 1
11160: PUSH
11161: LD_INT 67200
11163: LESSEQUAL
11164: IFFALSE 11173
// SetAchievement ( ACH_ASPEED_7 ) ;
11166: LD_STRING ACH_ASPEED_7
11168: PPUSH
11169: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11173: LD_VAR 0 4
11177: PUSH
11178: LD_VAR 0 5
11182: AND
11183: PUSH
11184: LD_VAR 0 6
11188: AND
11189: PUSH
11190: LD_OWVAR 67
11194: PUSH
11195: LD_INT 3
11197: GREATEREQUAL
11198: AND
11199: IFFALSE 11211
// SetAchievementEX ( ACH_AMER , 7 ) ;
11201: LD_STRING ACH_AMER
11203: PPUSH
11204: LD_INT 7
11206: PPUSH
11207: CALL_OW 564
// GiveMedals ( MAIN ) ;
11211: LD_STRING MAIN
11213: PPUSH
11214: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11218: LD_ADDR_VAR 0 3
11222: PUSH
11223: LD_INT 22
11225: PUSH
11226: LD_INT 1
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 23
11235: PUSH
11236: LD_INT 1
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PPUSH
11247: CALL_OW 69
11251: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11252: LD_VAR 0 3
11256: PPUSH
11257: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11261: LD_EXP 9
11265: PPUSH
11266: LD_EXP 3
11270: PUSH
11271: LD_STRING JMM
11273: STR
11274: PPUSH
11275: CALL_OW 38
// if Brown in tmp then
11279: LD_EXP 10
11283: PUSH
11284: LD_VAR 0 3
11288: IN
11289: IFFALSE 11309
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11291: LD_EXP 10
11295: PPUSH
11296: LD_EXP 3
11300: PUSH
11301: LD_STRING Brown
11303: STR
11304: PPUSH
11305: CALL_OW 38
// if Donaldson in tmp then
11309: LD_EXP 11
11313: PUSH
11314: LD_VAR 0 3
11318: IN
11319: IFFALSE 11339
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11321: LD_EXP 11
11325: PPUSH
11326: LD_EXP 3
11330: PUSH
11331: LD_STRING Donaldson
11333: STR
11334: PPUSH
11335: CALL_OW 38
// if Bobby in tmp then
11339: LD_EXP 12
11343: PUSH
11344: LD_VAR 0 3
11348: IN
11349: IFFALSE 11369
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11351: LD_EXP 12
11355: PPUSH
11356: LD_EXP 3
11360: PUSH
11361: LD_STRING Bobby
11363: STR
11364: PPUSH
11365: CALL_OW 38
// if Cyrus in tmp then
11369: LD_EXP 13
11373: PUSH
11374: LD_VAR 0 3
11378: IN
11379: IFFALSE 11399
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11381: LD_EXP 13
11385: PPUSH
11386: LD_EXP 3
11390: PUSH
11391: LD_STRING Cyrus
11393: STR
11394: PPUSH
11395: CALL_OW 38
// if Lisa in tmp then
11399: LD_EXP 14
11403: PUSH
11404: LD_VAR 0 3
11408: IN
11409: IFFALSE 11429
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11411: LD_EXP 14
11415: PPUSH
11416: LD_EXP 3
11420: PUSH
11421: LD_STRING Lisa
11423: STR
11424: PPUSH
11425: CALL_OW 38
// if Frank in tmp then
11429: LD_EXP 15
11433: PUSH
11434: LD_VAR 0 3
11438: IN
11439: IFFALSE 11459
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11441: LD_EXP 15
11445: PPUSH
11446: LD_EXP 3
11450: PUSH
11451: LD_STRING Frank
11453: STR
11454: PPUSH
11455: CALL_OW 38
// if Gladstone in tmp then
11459: LD_EXP 16
11463: PUSH
11464: LD_VAR 0 3
11468: IN
11469: IFFALSE 11489
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11471: LD_EXP 16
11475: PPUSH
11476: LD_EXP 3
11480: PUSH
11481: LD_STRING Gladstone
11483: STR
11484: PPUSH
11485: CALL_OW 38
// if Khatam in tmp then
11489: LD_EXP 17
11493: PUSH
11494: LD_VAR 0 3
11498: IN
11499: IFFALSE 11519
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11501: LD_EXP 17
11505: PPUSH
11506: LD_EXP 3
11510: PUSH
11511: LD_STRING Khatam
11513: STR
11514: PPUSH
11515: CALL_OW 38
// if Kikuchi in tmp then
11519: LD_EXP 18
11523: PUSH
11524: LD_VAR 0 3
11528: IN
11529: IFFALSE 11556
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
11531: LD_STRING enableBioCharacter(BIO_YAMO)
11533: PPUSH
11534: CALL_OW 559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11538: LD_EXP 18
11542: PPUSH
11543: LD_EXP 3
11547: PUSH
11548: LD_STRING Kikuchi
11550: STR
11551: PPUSH
11552: CALL_OW 38
// end ; SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11556: LD_VAR 0 3
11560: PUSH
11561: LD_EXP 9
11565: PUSH
11566: LD_EXP 10
11570: PUSH
11571: LD_EXP 11
11575: PUSH
11576: LD_EXP 12
11580: PUSH
11581: LD_EXP 13
11585: PUSH
11586: LD_EXP 14
11590: PUSH
11591: LD_EXP 15
11595: PUSH
11596: LD_EXP 16
11600: PUSH
11601: LD_EXP 18
11605: PUSH
11606: LD_EXP 17
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: DIFF
11623: PPUSH
11624: LD_EXP 3
11628: PUSH
11629: LD_STRING others
11631: STR
11632: PPUSH
11633: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11637: LD_OWVAR 1
11641: PPUSH
11642: LD_STRING 07_time
11644: PPUSH
11645: CALL_OW 39
// tmp := [ ] ;
11649: LD_ADDR_VAR 0 3
11653: PUSH
11654: EMPTY
11655: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ] ) do
11656: LD_ADDR_VAR 0 2
11660: PUSH
11661: LD_INT 9
11663: PPUSH
11664: LD_INT 22
11666: PUSH
11667: LD_INT 1
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 23
11676: PUSH
11677: LD_INT 1
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 21
11686: PUSH
11687: LD_INT 2
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 50
11696: PUSH
11697: EMPTY
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: PPUSH
11709: CALL_OW 70
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11780
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11717: LD_ADDR_VAR 0 3
11721: PUSH
11722: LD_VAR 0 3
11726: PPUSH
11727: LD_VAR 0 2
11731: PPUSH
11732: CALL_OW 265
11736: PUSH
11737: LD_VAR 0 2
11741: PPUSH
11742: CALL_OW 262
11746: PUSH
11747: LD_VAR 0 2
11751: PPUSH
11752: CALL_OW 263
11756: PUSH
11757: LD_VAR 0 2
11761: PPUSH
11762: CALL_OW 264
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL 71271 0 2
11777: ST_TO_ADDR
11778: GO 11714
11780: POP
11781: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11782: LD_VAR 0 3
11786: PPUSH
11787: LD_STRING 07_vehicles
11789: PPUSH
11790: CALL_OW 39
// YouWin ;
11794: CALL_OW 103
// end ; end_of_file
11798: PPOPN 6
11800: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11801: LD_VAR 0 1
11805: PPUSH
11806: CALL 28255 0 1
// if un = JMM then
11810: LD_VAR 0 1
11814: PUSH
11815: LD_EXP 9
11819: EQUAL
11820: IFFALSE 11829
// YouLost ( JMM ) ;
11822: LD_STRING JMM
11824: PPUSH
11825: CALL_OW 104
// if GetType ( un ) = unit_building then
11829: LD_VAR 0 1
11833: PPUSH
11834: CALL_OW 247
11838: PUSH
11839: LD_INT 3
11841: EQUAL
11842: IFFALSE 11858
// buildings_counter := buildings_counter + 1 ;
11844: LD_ADDR_EXP 4
11848: PUSH
11849: LD_EXP 4
11853: PUSH
11854: LD_INT 1
11856: PLUS
11857: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11858: LD_VAR 0 1
11862: PUSH
11863: LD_INT 6
11865: PPUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 30
11871: PUSH
11872: LD_INT 33
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 30
11881: PUSH
11882: LD_INT 32
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 70
11898: IN
11899: IFFALSE 11958
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11901: LD_ADDR_EXP 20
11905: PUSH
11906: LD_EXP 20
11910: PUSH
11911: LD_VAR 0 1
11915: PPUSH
11916: CALL_OW 266
11920: PUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 250
11930: PUSH
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 251
11940: PUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 254
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: ADD
11957: ST_TO_ADDR
// if un = ru_dep_main then
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 16
11965: EQUAL
11966: IFFALSE 11975
// ChangeMissionObjectives ( M1a ) ;
11968: LD_STRING M1a
11970: PPUSH
11971: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11975: LD_VAR 0 1
11979: PPUSH
11980: CALL_OW 247
11984: PUSH
11985: LD_INT 1
11987: EQUAL
11988: PUSH
11989: LD_VAR 0 1
11993: PPUSH
11994: CALL_OW 255
11998: PUSH
11999: LD_INT 3
12001: EQUAL
12002: AND
12003: IFFALSE 12019
// kill_counter := kill_counter + 1 ;
12005: LD_ADDR_EXP 8
12009: PUSH
12010: LD_EXP 8
12014: PUSH
12015: LD_INT 1
12017: PLUS
12018: ST_TO_ADDR
// end ;
12019: PPOPN 1
12021: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
12022: LD_VAR 0 1
12026: PPUSH
12027: LD_VAR 0 2
12031: PPUSH
12032: CALL 28313 0 2
// end ;
12036: PPOPN 2
12038: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
12039: LD_VAR 0 1
12043: PPUSH
12044: CALL_OW 266
12048: PUSH
12049: LD_INT 32
12051: EQUAL
12052: PUSH
12053: LD_VAR 0 1
12057: PPUSH
12058: CALL_OW 110
12062: PUSH
12063: LD_INT 7
12065: EQUAL
12066: AND
12067: IFFALSE 12081
// SetTag ( un , 0 ) ;
12069: LD_VAR 0 1
12073: PPUSH
12074: LD_INT 0
12076: PPUSH
12077: CALL_OW 109
// end ;
12081: PPOPN 1
12083: END
// on BuildingStarted ( b , builder ) do var i ;
12084: LD_INT 0
12086: PPUSH
// begin if GetSide ( b ) = 3 then
12087: LD_VAR 0 1
12091: PPUSH
12092: CALL_OW 255
12096: PUSH
12097: LD_INT 3
12099: EQUAL
12100: IFFALSE 12140
// for i = 1 to 4 do
12102: LD_ADDR_VAR 0 3
12106: PUSH
12107: DOUBLE
12108: LD_INT 1
12110: DEC
12111: ST_TO_ADDR
12112: LD_INT 4
12114: PUSH
12115: FOR_TO
12116: IFFALSE 12138
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12118: LD_ADDR_EXP 20
12122: PUSH
12123: LD_EXP 20
12127: PPUSH
12128: LD_INT 1
12130: PPUSH
12131: CALL_OW 3
12135: ST_TO_ADDR
12136: GO 12115
12138: POP
12139: POP
// end ;
12140: PPOPN 3
12142: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12143: LD_VAR 0 1
12147: PPUSH
12148: CALL_OW 266
12152: PUSH
12153: LD_INT 32
12155: PUSH
12156: LD_INT 33
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: IN
12163: IFFALSE 12177
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12165: LD_VAR 0 1
12169: PPUSH
12170: LD_INT 43
12172: PPUSH
12173: CALL_OW 148
12177: PPOPN 1
12179: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12180: LD_VAR 0 1
12184: PUSH
12185: LD_INT 22
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 2
12197: PUSH
12198: LD_INT 30
12200: PUSH
12201: LD_INT 31
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 30
12210: PUSH
12211: LD_INT 32
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: IN
12232: IFFALSE 12254
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12234: LD_VAR 0 2
12238: PPUSH
12239: LD_VAR 0 1
12243: PPUSH
12244: LD_INT 134
12246: PPUSH
12247: LD_INT 136
12249: PPUSH
12250: CALL 838 0 4
// end ;
12254: PPOPN 2
12256: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12257: LD_VAR 0 1
12261: PUSH
12262: LD_INT 22
12264: PUSH
12265: LD_INT 3
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 30
12274: PUSH
12275: LD_INT 32
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PPUSH
12286: CALL_OW 69
12290: IN
12291: IFFALSE 12305
// SetTag ( b , 0 ) ;
12293: LD_VAR 0 1
12297: PPUSH
12298: LD_INT 0
12300: PPUSH
12301: CALL_OW 109
// end ; end_of_file end_of_file
12305: PPOPN 2
12307: END
// export globalGameSaveCounter ; every 0 0$1 do
12308: GO 12310
12310: DISABLE
// begin enable ;
12311: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12312: LD_STRING updateTimer(
12314: PUSH
12315: LD_OWVAR 1
12319: STR
12320: PUSH
12321: LD_STRING );
12323: STR
12324: PPUSH
12325: CALL_OW 559
// end ;
12329: END
// every 0 0$1 do
12330: GO 12332
12332: DISABLE
// begin globalGameSaveCounter := 0 ;
12333: LD_ADDR_EXP 21
12337: PUSH
12338: LD_INT 0
12340: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12341: LD_STRING setGameSaveCounter(0)
12343: PPUSH
12344: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12348: LD_STRING initStreamRollete();
12350: PPUSH
12351: CALL_OW 559
// InitStreamMode ;
12355: CALL 13698 0 0
// DefineStreamItems ( false ) ;
12359: LD_INT 0
12361: PPUSH
12362: CALL 14162 0 1
// end ;
12366: END
// export function SOS_MapStart ( ) ; begin
12367: LD_INT 0
12369: PPUSH
// if streamModeActive then
12370: LD_EXP 22
12374: IFFALSE 12383
// DefineStreamItems ( true ) ;
12376: LD_INT 1
12378: PPUSH
12379: CALL 14162 0 1
// UpdateLuaVariables ( ) ;
12383: CALL 12400 0 0
// UpdateFactoryWaypoints ( ) ;
12387: CALL 27164 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12391: CALL 27416 0 0
// end ;
12395: LD_VAR 0 1
12399: RET
// function UpdateLuaVariables ( ) ; begin
12400: LD_INT 0
12402: PPUSH
// if globalGameSaveCounter then
12403: LD_EXP 21
12407: IFFALSE 12441
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12409: LD_ADDR_EXP 21
12413: PUSH
12414: LD_EXP 21
12418: PPUSH
12419: CALL 72632 0 1
12423: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12424: LD_STRING setGameSaveCounter(
12426: PUSH
12427: LD_EXP 21
12431: STR
12432: PUSH
12433: LD_STRING )
12435: STR
12436: PPUSH
12437: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12441: LD_STRING setGameDifficulty(
12443: PUSH
12444: LD_OWVAR 67
12448: STR
12449: PUSH
12450: LD_STRING )
12452: STR
12453: PPUSH
12454: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
12458: LD_STRING displayDifficulty(
12460: PUSH
12461: LD_OWVAR 67
12465: STR
12466: PUSH
12467: LD_STRING )
12469: STR
12470: PPUSH
12471: CALL_OW 559
// end ;
12475: LD_VAR 0 1
12479: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12480: LD_INT 0
12482: PPUSH
// if p2 = stream_mode then
12483: LD_VAR 0 2
12487: PUSH
12488: LD_INT 100
12490: EQUAL
12491: IFFALSE 13494
// begin if not StreamModeActive then
12493: LD_EXP 22
12497: NOT
12498: IFFALSE 12508
// StreamModeActive := true ;
12500: LD_ADDR_EXP 22
12504: PUSH
12505: LD_INT 1
12507: ST_TO_ADDR
// if p3 = 0 then
12508: LD_VAR 0 3
12512: PUSH
12513: LD_INT 0
12515: EQUAL
12516: IFFALSE 12522
// InitStreamMode ;
12518: CALL 13698 0 0
// if p3 = 1 then
12522: LD_VAR 0 3
12526: PUSH
12527: LD_INT 1
12529: EQUAL
12530: IFFALSE 12540
// sRocket := true ;
12532: LD_ADDR_EXP 27
12536: PUSH
12537: LD_INT 1
12539: ST_TO_ADDR
// if p3 = 2 then
12540: LD_VAR 0 3
12544: PUSH
12545: LD_INT 2
12547: EQUAL
12548: IFFALSE 12558
// sSpeed := true ;
12550: LD_ADDR_EXP 26
12554: PUSH
12555: LD_INT 1
12557: ST_TO_ADDR
// if p3 = 3 then
12558: LD_VAR 0 3
12562: PUSH
12563: LD_INT 3
12565: EQUAL
12566: IFFALSE 12576
// sEngine := true ;
12568: LD_ADDR_EXP 28
12572: PUSH
12573: LD_INT 1
12575: ST_TO_ADDR
// if p3 = 4 then
12576: LD_VAR 0 3
12580: PUSH
12581: LD_INT 4
12583: EQUAL
12584: IFFALSE 12594
// sSpec := true ;
12586: LD_ADDR_EXP 25
12590: PUSH
12591: LD_INT 1
12593: ST_TO_ADDR
// if p3 = 5 then
12594: LD_VAR 0 3
12598: PUSH
12599: LD_INT 5
12601: EQUAL
12602: IFFALSE 12612
// sLevel := true ;
12604: LD_ADDR_EXP 29
12608: PUSH
12609: LD_INT 1
12611: ST_TO_ADDR
// if p3 = 6 then
12612: LD_VAR 0 3
12616: PUSH
12617: LD_INT 6
12619: EQUAL
12620: IFFALSE 12630
// sArmoury := true ;
12622: LD_ADDR_EXP 30
12626: PUSH
12627: LD_INT 1
12629: ST_TO_ADDR
// if p3 = 7 then
12630: LD_VAR 0 3
12634: PUSH
12635: LD_INT 7
12637: EQUAL
12638: IFFALSE 12648
// sRadar := true ;
12640: LD_ADDR_EXP 31
12644: PUSH
12645: LD_INT 1
12647: ST_TO_ADDR
// if p3 = 8 then
12648: LD_VAR 0 3
12652: PUSH
12653: LD_INT 8
12655: EQUAL
12656: IFFALSE 12666
// sBunker := true ;
12658: LD_ADDR_EXP 32
12662: PUSH
12663: LD_INT 1
12665: ST_TO_ADDR
// if p3 = 9 then
12666: LD_VAR 0 3
12670: PUSH
12671: LD_INT 9
12673: EQUAL
12674: IFFALSE 12684
// sHack := true ;
12676: LD_ADDR_EXP 33
12680: PUSH
12681: LD_INT 1
12683: ST_TO_ADDR
// if p3 = 10 then
12684: LD_VAR 0 3
12688: PUSH
12689: LD_INT 10
12691: EQUAL
12692: IFFALSE 12702
// sFire := true ;
12694: LD_ADDR_EXP 34
12698: PUSH
12699: LD_INT 1
12701: ST_TO_ADDR
// if p3 = 11 then
12702: LD_VAR 0 3
12706: PUSH
12707: LD_INT 11
12709: EQUAL
12710: IFFALSE 12720
// sRefresh := true ;
12712: LD_ADDR_EXP 35
12716: PUSH
12717: LD_INT 1
12719: ST_TO_ADDR
// if p3 = 12 then
12720: LD_VAR 0 3
12724: PUSH
12725: LD_INT 12
12727: EQUAL
12728: IFFALSE 12738
// sExp := true ;
12730: LD_ADDR_EXP 36
12734: PUSH
12735: LD_INT 1
12737: ST_TO_ADDR
// if p3 = 13 then
12738: LD_VAR 0 3
12742: PUSH
12743: LD_INT 13
12745: EQUAL
12746: IFFALSE 12756
// sDepot := true ;
12748: LD_ADDR_EXP 37
12752: PUSH
12753: LD_INT 1
12755: ST_TO_ADDR
// if p3 = 14 then
12756: LD_VAR 0 3
12760: PUSH
12761: LD_INT 14
12763: EQUAL
12764: IFFALSE 12774
// sFlag := true ;
12766: LD_ADDR_EXP 38
12770: PUSH
12771: LD_INT 1
12773: ST_TO_ADDR
// if p3 = 15 then
12774: LD_VAR 0 3
12778: PUSH
12779: LD_INT 15
12781: EQUAL
12782: IFFALSE 12792
// sKamikadze := true ;
12784: LD_ADDR_EXP 46
12788: PUSH
12789: LD_INT 1
12791: ST_TO_ADDR
// if p3 = 16 then
12792: LD_VAR 0 3
12796: PUSH
12797: LD_INT 16
12799: EQUAL
12800: IFFALSE 12810
// sTroll := true ;
12802: LD_ADDR_EXP 47
12806: PUSH
12807: LD_INT 1
12809: ST_TO_ADDR
// if p3 = 17 then
12810: LD_VAR 0 3
12814: PUSH
12815: LD_INT 17
12817: EQUAL
12818: IFFALSE 12828
// sSlow := true ;
12820: LD_ADDR_EXP 48
12824: PUSH
12825: LD_INT 1
12827: ST_TO_ADDR
// if p3 = 18 then
12828: LD_VAR 0 3
12832: PUSH
12833: LD_INT 18
12835: EQUAL
12836: IFFALSE 12846
// sLack := true ;
12838: LD_ADDR_EXP 49
12842: PUSH
12843: LD_INT 1
12845: ST_TO_ADDR
// if p3 = 19 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 19
12853: EQUAL
12854: IFFALSE 12864
// sTank := true ;
12856: LD_ADDR_EXP 51
12860: PUSH
12861: LD_INT 1
12863: ST_TO_ADDR
// if p3 = 20 then
12864: LD_VAR 0 3
12868: PUSH
12869: LD_INT 20
12871: EQUAL
12872: IFFALSE 12882
// sRemote := true ;
12874: LD_ADDR_EXP 52
12878: PUSH
12879: LD_INT 1
12881: ST_TO_ADDR
// if p3 = 21 then
12882: LD_VAR 0 3
12886: PUSH
12887: LD_INT 21
12889: EQUAL
12890: IFFALSE 12900
// sPowell := true ;
12892: LD_ADDR_EXP 53
12896: PUSH
12897: LD_INT 1
12899: ST_TO_ADDR
// if p3 = 22 then
12900: LD_VAR 0 3
12904: PUSH
12905: LD_INT 22
12907: EQUAL
12908: IFFALSE 12918
// sTeleport := true ;
12910: LD_ADDR_EXP 56
12914: PUSH
12915: LD_INT 1
12917: ST_TO_ADDR
// if p3 = 23 then
12918: LD_VAR 0 3
12922: PUSH
12923: LD_INT 23
12925: EQUAL
12926: IFFALSE 12936
// sOilTower := true ;
12928: LD_ADDR_EXP 58
12932: PUSH
12933: LD_INT 1
12935: ST_TO_ADDR
// if p3 = 24 then
12936: LD_VAR 0 3
12940: PUSH
12941: LD_INT 24
12943: EQUAL
12944: IFFALSE 12954
// sShovel := true ;
12946: LD_ADDR_EXP 59
12950: PUSH
12951: LD_INT 1
12953: ST_TO_ADDR
// if p3 = 25 then
12954: LD_VAR 0 3
12958: PUSH
12959: LD_INT 25
12961: EQUAL
12962: IFFALSE 12972
// sSheik := true ;
12964: LD_ADDR_EXP 60
12968: PUSH
12969: LD_INT 1
12971: ST_TO_ADDR
// if p3 = 26 then
12972: LD_VAR 0 3
12976: PUSH
12977: LD_INT 26
12979: EQUAL
12980: IFFALSE 12990
// sEarthquake := true ;
12982: LD_ADDR_EXP 62
12986: PUSH
12987: LD_INT 1
12989: ST_TO_ADDR
// if p3 = 27 then
12990: LD_VAR 0 3
12994: PUSH
12995: LD_INT 27
12997: EQUAL
12998: IFFALSE 13008
// sAI := true ;
13000: LD_ADDR_EXP 63
13004: PUSH
13005: LD_INT 1
13007: ST_TO_ADDR
// if p3 = 28 then
13008: LD_VAR 0 3
13012: PUSH
13013: LD_INT 28
13015: EQUAL
13016: IFFALSE 13026
// sCargo := true ;
13018: LD_ADDR_EXP 66
13022: PUSH
13023: LD_INT 1
13025: ST_TO_ADDR
// if p3 = 29 then
13026: LD_VAR 0 3
13030: PUSH
13031: LD_INT 29
13033: EQUAL
13034: IFFALSE 13044
// sDLaser := true ;
13036: LD_ADDR_EXP 67
13040: PUSH
13041: LD_INT 1
13043: ST_TO_ADDR
// if p3 = 30 then
13044: LD_VAR 0 3
13048: PUSH
13049: LD_INT 30
13051: EQUAL
13052: IFFALSE 13062
// sExchange := true ;
13054: LD_ADDR_EXP 68
13058: PUSH
13059: LD_INT 1
13061: ST_TO_ADDR
// if p3 = 31 then
13062: LD_VAR 0 3
13066: PUSH
13067: LD_INT 31
13069: EQUAL
13070: IFFALSE 13080
// sFac := true ;
13072: LD_ADDR_EXP 69
13076: PUSH
13077: LD_INT 1
13079: ST_TO_ADDR
// if p3 = 32 then
13080: LD_VAR 0 3
13084: PUSH
13085: LD_INT 32
13087: EQUAL
13088: IFFALSE 13098
// sPower := true ;
13090: LD_ADDR_EXP 70
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// if p3 = 33 then
13098: LD_VAR 0 3
13102: PUSH
13103: LD_INT 33
13105: EQUAL
13106: IFFALSE 13116
// sRandom := true ;
13108: LD_ADDR_EXP 71
13112: PUSH
13113: LD_INT 1
13115: ST_TO_ADDR
// if p3 = 34 then
13116: LD_VAR 0 3
13120: PUSH
13121: LD_INT 34
13123: EQUAL
13124: IFFALSE 13134
// sShield := true ;
13126: LD_ADDR_EXP 72
13130: PUSH
13131: LD_INT 1
13133: ST_TO_ADDR
// if p3 = 35 then
13134: LD_VAR 0 3
13138: PUSH
13139: LD_INT 35
13141: EQUAL
13142: IFFALSE 13152
// sTime := true ;
13144: LD_ADDR_EXP 73
13148: PUSH
13149: LD_INT 1
13151: ST_TO_ADDR
// if p3 = 36 then
13152: LD_VAR 0 3
13156: PUSH
13157: LD_INT 36
13159: EQUAL
13160: IFFALSE 13170
// sTools := true ;
13162: LD_ADDR_EXP 74
13166: PUSH
13167: LD_INT 1
13169: ST_TO_ADDR
// if p3 = 101 then
13170: LD_VAR 0 3
13174: PUSH
13175: LD_INT 101
13177: EQUAL
13178: IFFALSE 13188
// sSold := true ;
13180: LD_ADDR_EXP 39
13184: PUSH
13185: LD_INT 1
13187: ST_TO_ADDR
// if p3 = 102 then
13188: LD_VAR 0 3
13192: PUSH
13193: LD_INT 102
13195: EQUAL
13196: IFFALSE 13206
// sDiff := true ;
13198: LD_ADDR_EXP 40
13202: PUSH
13203: LD_INT 1
13205: ST_TO_ADDR
// if p3 = 103 then
13206: LD_VAR 0 3
13210: PUSH
13211: LD_INT 103
13213: EQUAL
13214: IFFALSE 13224
// sFog := true ;
13216: LD_ADDR_EXP 43
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// if p3 = 104 then
13224: LD_VAR 0 3
13228: PUSH
13229: LD_INT 104
13231: EQUAL
13232: IFFALSE 13242
// sReset := true ;
13234: LD_ADDR_EXP 44
13238: PUSH
13239: LD_INT 1
13241: ST_TO_ADDR
// if p3 = 105 then
13242: LD_VAR 0 3
13246: PUSH
13247: LD_INT 105
13249: EQUAL
13250: IFFALSE 13260
// sSun := true ;
13252: LD_ADDR_EXP 45
13256: PUSH
13257: LD_INT 1
13259: ST_TO_ADDR
// if p3 = 106 then
13260: LD_VAR 0 3
13264: PUSH
13265: LD_INT 106
13267: EQUAL
13268: IFFALSE 13278
// sTiger := true ;
13270: LD_ADDR_EXP 41
13274: PUSH
13275: LD_INT 1
13277: ST_TO_ADDR
// if p3 = 107 then
13278: LD_VAR 0 3
13282: PUSH
13283: LD_INT 107
13285: EQUAL
13286: IFFALSE 13296
// sBomb := true ;
13288: LD_ADDR_EXP 42
13292: PUSH
13293: LD_INT 1
13295: ST_TO_ADDR
// if p3 = 108 then
13296: LD_VAR 0 3
13300: PUSH
13301: LD_INT 108
13303: EQUAL
13304: IFFALSE 13314
// sWound := true ;
13306: LD_ADDR_EXP 50
13310: PUSH
13311: LD_INT 1
13313: ST_TO_ADDR
// if p3 = 109 then
13314: LD_VAR 0 3
13318: PUSH
13319: LD_INT 109
13321: EQUAL
13322: IFFALSE 13332
// sBetray := true ;
13324: LD_ADDR_EXP 54
13328: PUSH
13329: LD_INT 1
13331: ST_TO_ADDR
// if p3 = 110 then
13332: LD_VAR 0 3
13336: PUSH
13337: LD_INT 110
13339: EQUAL
13340: IFFALSE 13350
// sContamin := true ;
13342: LD_ADDR_EXP 55
13346: PUSH
13347: LD_INT 1
13349: ST_TO_ADDR
// if p3 = 111 then
13350: LD_VAR 0 3
13354: PUSH
13355: LD_INT 111
13357: EQUAL
13358: IFFALSE 13368
// sOil := true ;
13360: LD_ADDR_EXP 57
13364: PUSH
13365: LD_INT 1
13367: ST_TO_ADDR
// if p3 = 112 then
13368: LD_VAR 0 3
13372: PUSH
13373: LD_INT 112
13375: EQUAL
13376: IFFALSE 13386
// sStu := true ;
13378: LD_ADDR_EXP 61
13382: PUSH
13383: LD_INT 1
13385: ST_TO_ADDR
// if p3 = 113 then
13386: LD_VAR 0 3
13390: PUSH
13391: LD_INT 113
13393: EQUAL
13394: IFFALSE 13404
// sBazooka := true ;
13396: LD_ADDR_EXP 64
13400: PUSH
13401: LD_INT 1
13403: ST_TO_ADDR
// if p3 = 114 then
13404: LD_VAR 0 3
13408: PUSH
13409: LD_INT 114
13411: EQUAL
13412: IFFALSE 13422
// sMortar := true ;
13414: LD_ADDR_EXP 65
13418: PUSH
13419: LD_INT 1
13421: ST_TO_ADDR
// if p3 = 115 then
13422: LD_VAR 0 3
13426: PUSH
13427: LD_INT 115
13429: EQUAL
13430: IFFALSE 13440
// sRanger := true ;
13432: LD_ADDR_EXP 75
13436: PUSH
13437: LD_INT 1
13439: ST_TO_ADDR
// if p3 = 116 then
13440: LD_VAR 0 3
13444: PUSH
13445: LD_INT 116
13447: EQUAL
13448: IFFALSE 13458
// sComputer := true ;
13450: LD_ADDR_EXP 76
13454: PUSH
13455: LD_INT 1
13457: ST_TO_ADDR
// if p3 = 117 then
13458: LD_VAR 0 3
13462: PUSH
13463: LD_INT 117
13465: EQUAL
13466: IFFALSE 13476
// s30 := true ;
13468: LD_ADDR_EXP 77
13472: PUSH
13473: LD_INT 1
13475: ST_TO_ADDR
// if p3 = 118 then
13476: LD_VAR 0 3
13480: PUSH
13481: LD_INT 118
13483: EQUAL
13484: IFFALSE 13494
// s60 := true ;
13486: LD_ADDR_EXP 78
13490: PUSH
13491: LD_INT 1
13493: ST_TO_ADDR
// end ; if p2 = hack_mode then
13494: LD_VAR 0 2
13498: PUSH
13499: LD_INT 101
13501: EQUAL
13502: IFFALSE 13630
// begin case p3 of 1 :
13504: LD_VAR 0 3
13508: PUSH
13509: LD_INT 1
13511: DOUBLE
13512: EQUAL
13513: IFTRUE 13517
13515: GO 13524
13517: POP
// hHackUnlimitedResources ; 2 :
13518: CALL 25777 0 0
13522: GO 13630
13524: LD_INT 2
13526: DOUBLE
13527: EQUAL
13528: IFTRUE 13532
13530: GO 13539
13532: POP
// hHackSetLevel10 ; 3 :
13533: CALL 25910 0 0
13537: GO 13630
13539: LD_INT 3
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 13554
13547: POP
// hHackSetLevel10YourUnits ; 4 :
13548: CALL 25995 0 0
13552: GO 13630
13554: LD_INT 4
13556: DOUBLE
13557: EQUAL
13558: IFTRUE 13562
13560: GO 13569
13562: POP
// hHackInvincible ; 5 :
13563: CALL 26443 0 0
13567: GO 13630
13569: LD_INT 5
13571: DOUBLE
13572: EQUAL
13573: IFTRUE 13577
13575: GO 13584
13577: POP
// hHackInvisible ; 6 :
13578: CALL 26554 0 0
13582: GO 13630
13584: LD_INT 6
13586: DOUBLE
13587: EQUAL
13588: IFTRUE 13592
13590: GO 13599
13592: POP
// hHackChangeYourSide ; 7 :
13593: CALL 26611 0 0
13597: GO 13630
13599: LD_INT 7
13601: DOUBLE
13602: EQUAL
13603: IFTRUE 13607
13605: GO 13614
13607: POP
// hHackChangeUnitSide ; 8 :
13608: CALL 26653 0 0
13612: GO 13630
13614: LD_INT 8
13616: DOUBLE
13617: EQUAL
13618: IFTRUE 13622
13620: GO 13629
13622: POP
// hHackFog ; end ;
13623: CALL 26754 0 0
13627: GO 13630
13629: POP
// end ; if p2 = game_save_mode then
13630: LD_VAR 0 2
13634: PUSH
13635: LD_INT 102
13637: EQUAL
13638: IFFALSE 13693
// begin if p3 = 1 then
13640: LD_VAR 0 3
13644: PUSH
13645: LD_INT 1
13647: EQUAL
13648: IFFALSE 13660
// globalGameSaveCounter := p4 ;
13650: LD_ADDR_EXP 21
13654: PUSH
13655: LD_VAR 0 4
13659: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13660: LD_VAR 0 3
13664: PUSH
13665: LD_INT 2
13667: EQUAL
13668: PUSH
13669: LD_EXP 21
13673: AND
13674: IFFALSE 13693
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13676: LD_STRING setGameSaveCounter(
13678: PUSH
13679: LD_EXP 21
13683: STR
13684: PUSH
13685: LD_STRING )
13687: STR
13688: PPUSH
13689: CALL_OW 559
// end ; end ;
13693: LD_VAR 0 7
13697: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13698: LD_INT 0
13700: PPUSH
// streamModeActive := false ;
13701: LD_ADDR_EXP 22
13705: PUSH
13706: LD_INT 0
13708: ST_TO_ADDR
// normalCounter := 36 ;
13709: LD_ADDR_EXP 23
13713: PUSH
13714: LD_INT 36
13716: ST_TO_ADDR
// hardcoreCounter := 18 ;
13717: LD_ADDR_EXP 24
13721: PUSH
13722: LD_INT 18
13724: ST_TO_ADDR
// sRocket := false ;
13725: LD_ADDR_EXP 27
13729: PUSH
13730: LD_INT 0
13732: ST_TO_ADDR
// sSpeed := false ;
13733: LD_ADDR_EXP 26
13737: PUSH
13738: LD_INT 0
13740: ST_TO_ADDR
// sEngine := false ;
13741: LD_ADDR_EXP 28
13745: PUSH
13746: LD_INT 0
13748: ST_TO_ADDR
// sSpec := false ;
13749: LD_ADDR_EXP 25
13753: PUSH
13754: LD_INT 0
13756: ST_TO_ADDR
// sLevel := false ;
13757: LD_ADDR_EXP 29
13761: PUSH
13762: LD_INT 0
13764: ST_TO_ADDR
// sArmoury := false ;
13765: LD_ADDR_EXP 30
13769: PUSH
13770: LD_INT 0
13772: ST_TO_ADDR
// sRadar := false ;
13773: LD_ADDR_EXP 31
13777: PUSH
13778: LD_INT 0
13780: ST_TO_ADDR
// sBunker := false ;
13781: LD_ADDR_EXP 32
13785: PUSH
13786: LD_INT 0
13788: ST_TO_ADDR
// sHack := false ;
13789: LD_ADDR_EXP 33
13793: PUSH
13794: LD_INT 0
13796: ST_TO_ADDR
// sFire := false ;
13797: LD_ADDR_EXP 34
13801: PUSH
13802: LD_INT 0
13804: ST_TO_ADDR
// sRefresh := false ;
13805: LD_ADDR_EXP 35
13809: PUSH
13810: LD_INT 0
13812: ST_TO_ADDR
// sExp := false ;
13813: LD_ADDR_EXP 36
13817: PUSH
13818: LD_INT 0
13820: ST_TO_ADDR
// sDepot := false ;
13821: LD_ADDR_EXP 37
13825: PUSH
13826: LD_INT 0
13828: ST_TO_ADDR
// sFlag := false ;
13829: LD_ADDR_EXP 38
13833: PUSH
13834: LD_INT 0
13836: ST_TO_ADDR
// sKamikadze := false ;
13837: LD_ADDR_EXP 46
13841: PUSH
13842: LD_INT 0
13844: ST_TO_ADDR
// sTroll := false ;
13845: LD_ADDR_EXP 47
13849: PUSH
13850: LD_INT 0
13852: ST_TO_ADDR
// sSlow := false ;
13853: LD_ADDR_EXP 48
13857: PUSH
13858: LD_INT 0
13860: ST_TO_ADDR
// sLack := false ;
13861: LD_ADDR_EXP 49
13865: PUSH
13866: LD_INT 0
13868: ST_TO_ADDR
// sTank := false ;
13869: LD_ADDR_EXP 51
13873: PUSH
13874: LD_INT 0
13876: ST_TO_ADDR
// sRemote := false ;
13877: LD_ADDR_EXP 52
13881: PUSH
13882: LD_INT 0
13884: ST_TO_ADDR
// sPowell := false ;
13885: LD_ADDR_EXP 53
13889: PUSH
13890: LD_INT 0
13892: ST_TO_ADDR
// sTeleport := false ;
13893: LD_ADDR_EXP 56
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// sOilTower := false ;
13901: LD_ADDR_EXP 58
13905: PUSH
13906: LD_INT 0
13908: ST_TO_ADDR
// sShovel := false ;
13909: LD_ADDR_EXP 59
13913: PUSH
13914: LD_INT 0
13916: ST_TO_ADDR
// sSheik := false ;
13917: LD_ADDR_EXP 60
13921: PUSH
13922: LD_INT 0
13924: ST_TO_ADDR
// sEarthquake := false ;
13925: LD_ADDR_EXP 62
13929: PUSH
13930: LD_INT 0
13932: ST_TO_ADDR
// sAI := false ;
13933: LD_ADDR_EXP 63
13937: PUSH
13938: LD_INT 0
13940: ST_TO_ADDR
// sCargo := false ;
13941: LD_ADDR_EXP 66
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// sDLaser := false ;
13949: LD_ADDR_EXP 67
13953: PUSH
13954: LD_INT 0
13956: ST_TO_ADDR
// sExchange := false ;
13957: LD_ADDR_EXP 68
13961: PUSH
13962: LD_INT 0
13964: ST_TO_ADDR
// sFac := false ;
13965: LD_ADDR_EXP 69
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// sPower := false ;
13973: LD_ADDR_EXP 70
13977: PUSH
13978: LD_INT 0
13980: ST_TO_ADDR
// sRandom := false ;
13981: LD_ADDR_EXP 71
13985: PUSH
13986: LD_INT 0
13988: ST_TO_ADDR
// sShield := false ;
13989: LD_ADDR_EXP 72
13993: PUSH
13994: LD_INT 0
13996: ST_TO_ADDR
// sTime := false ;
13997: LD_ADDR_EXP 73
14001: PUSH
14002: LD_INT 0
14004: ST_TO_ADDR
// sTools := false ;
14005: LD_ADDR_EXP 74
14009: PUSH
14010: LD_INT 0
14012: ST_TO_ADDR
// sSold := false ;
14013: LD_ADDR_EXP 39
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
// sDiff := false ;
14021: LD_ADDR_EXP 40
14025: PUSH
14026: LD_INT 0
14028: ST_TO_ADDR
// sFog := false ;
14029: LD_ADDR_EXP 43
14033: PUSH
14034: LD_INT 0
14036: ST_TO_ADDR
// sReset := false ;
14037: LD_ADDR_EXP 44
14041: PUSH
14042: LD_INT 0
14044: ST_TO_ADDR
// sSun := false ;
14045: LD_ADDR_EXP 45
14049: PUSH
14050: LD_INT 0
14052: ST_TO_ADDR
// sTiger := false ;
14053: LD_ADDR_EXP 41
14057: PUSH
14058: LD_INT 0
14060: ST_TO_ADDR
// sBomb := false ;
14061: LD_ADDR_EXP 42
14065: PUSH
14066: LD_INT 0
14068: ST_TO_ADDR
// sWound := false ;
14069: LD_ADDR_EXP 50
14073: PUSH
14074: LD_INT 0
14076: ST_TO_ADDR
// sBetray := false ;
14077: LD_ADDR_EXP 54
14081: PUSH
14082: LD_INT 0
14084: ST_TO_ADDR
// sContamin := false ;
14085: LD_ADDR_EXP 55
14089: PUSH
14090: LD_INT 0
14092: ST_TO_ADDR
// sOil := false ;
14093: LD_ADDR_EXP 57
14097: PUSH
14098: LD_INT 0
14100: ST_TO_ADDR
// sStu := false ;
14101: LD_ADDR_EXP 61
14105: PUSH
14106: LD_INT 0
14108: ST_TO_ADDR
// sBazooka := false ;
14109: LD_ADDR_EXP 64
14113: PUSH
14114: LD_INT 0
14116: ST_TO_ADDR
// sMortar := false ;
14117: LD_ADDR_EXP 65
14121: PUSH
14122: LD_INT 0
14124: ST_TO_ADDR
// sRanger := false ;
14125: LD_ADDR_EXP 75
14129: PUSH
14130: LD_INT 0
14132: ST_TO_ADDR
// sComputer := false ;
14133: LD_ADDR_EXP 76
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
// s30 := false ;
14141: LD_ADDR_EXP 77
14145: PUSH
14146: LD_INT 0
14148: ST_TO_ADDR
// s60 := false ;
14149: LD_ADDR_EXP 78
14153: PUSH
14154: LD_INT 0
14156: ST_TO_ADDR
// end ;
14157: LD_VAR 0 1
14161: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14162: LD_INT 0
14164: PPUSH
14165: PPUSH
14166: PPUSH
14167: PPUSH
14168: PPUSH
14169: PPUSH
14170: PPUSH
// result := [ ] ;
14171: LD_ADDR_VAR 0 2
14175: PUSH
14176: EMPTY
14177: ST_TO_ADDR
// if campaign_id = 1 then
14178: LD_OWVAR 69
14182: PUSH
14183: LD_INT 1
14185: EQUAL
14186: IFFALSE 17352
// begin case mission_number of 1 :
14188: LD_OWVAR 70
14192: PUSH
14193: LD_INT 1
14195: DOUBLE
14196: EQUAL
14197: IFTRUE 14201
14199: GO 14277
14201: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14202: LD_ADDR_VAR 0 2
14206: PUSH
14207: LD_INT 2
14209: PUSH
14210: LD_INT 4
14212: PUSH
14213: LD_INT 11
14215: PUSH
14216: LD_INT 12
14218: PUSH
14219: LD_INT 15
14221: PUSH
14222: LD_INT 16
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_INT 23
14230: PUSH
14231: LD_INT 26
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 101
14247: PUSH
14248: LD_INT 102
14250: PUSH
14251: LD_INT 106
14253: PUSH
14254: LD_INT 116
14256: PUSH
14257: LD_INT 117
14259: PUSH
14260: LD_INT 118
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: ST_TO_ADDR
14275: GO 17350
14277: LD_INT 2
14279: DOUBLE
14280: EQUAL
14281: IFTRUE 14285
14283: GO 14369
14285: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14286: LD_ADDR_VAR 0 2
14290: PUSH
14291: LD_INT 2
14293: PUSH
14294: LD_INT 4
14296: PUSH
14297: LD_INT 11
14299: PUSH
14300: LD_INT 12
14302: PUSH
14303: LD_INT 15
14305: PUSH
14306: LD_INT 16
14308: PUSH
14309: LD_INT 22
14311: PUSH
14312: LD_INT 23
14314: PUSH
14315: LD_INT 26
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 101
14331: PUSH
14332: LD_INT 102
14334: PUSH
14335: LD_INT 105
14337: PUSH
14338: LD_INT 106
14340: PUSH
14341: LD_INT 108
14343: PUSH
14344: LD_INT 116
14346: PUSH
14347: LD_INT 117
14349: PUSH
14350: LD_INT 118
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: ST_TO_ADDR
14367: GO 17350
14369: LD_INT 3
14371: DOUBLE
14372: EQUAL
14373: IFTRUE 14377
14375: GO 14465
14377: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14378: LD_ADDR_VAR 0 2
14382: PUSH
14383: LD_INT 2
14385: PUSH
14386: LD_INT 4
14388: PUSH
14389: LD_INT 5
14391: PUSH
14392: LD_INT 11
14394: PUSH
14395: LD_INT 12
14397: PUSH
14398: LD_INT 15
14400: PUSH
14401: LD_INT 16
14403: PUSH
14404: LD_INT 22
14406: PUSH
14407: LD_INT 26
14409: PUSH
14410: LD_INT 36
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 101
14427: PUSH
14428: LD_INT 102
14430: PUSH
14431: LD_INT 105
14433: PUSH
14434: LD_INT 106
14436: PUSH
14437: LD_INT 108
14439: PUSH
14440: LD_INT 116
14442: PUSH
14443: LD_INT 117
14445: PUSH
14446: LD_INT 118
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: ST_TO_ADDR
14463: GO 17350
14465: LD_INT 4
14467: DOUBLE
14468: EQUAL
14469: IFTRUE 14473
14471: GO 14569
14473: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14474: LD_ADDR_VAR 0 2
14478: PUSH
14479: LD_INT 2
14481: PUSH
14482: LD_INT 4
14484: PUSH
14485: LD_INT 5
14487: PUSH
14488: LD_INT 8
14490: PUSH
14491: LD_INT 11
14493: PUSH
14494: LD_INT 12
14496: PUSH
14497: LD_INT 15
14499: PUSH
14500: LD_INT 16
14502: PUSH
14503: LD_INT 22
14505: PUSH
14506: LD_INT 23
14508: PUSH
14509: LD_INT 26
14511: PUSH
14512: LD_INT 36
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 101
14531: PUSH
14532: LD_INT 102
14534: PUSH
14535: LD_INT 105
14537: PUSH
14538: LD_INT 106
14540: PUSH
14541: LD_INT 108
14543: PUSH
14544: LD_INT 116
14546: PUSH
14547: LD_INT 117
14549: PUSH
14550: LD_INT 118
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: ST_TO_ADDR
14567: GO 17350
14569: LD_INT 5
14571: DOUBLE
14572: EQUAL
14573: IFTRUE 14577
14575: GO 14689
14577: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14578: LD_ADDR_VAR 0 2
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 4
14588: PUSH
14589: LD_INT 5
14591: PUSH
14592: LD_INT 6
14594: PUSH
14595: LD_INT 8
14597: PUSH
14598: LD_INT 11
14600: PUSH
14601: LD_INT 12
14603: PUSH
14604: LD_INT 15
14606: PUSH
14607: LD_INT 16
14609: PUSH
14610: LD_INT 22
14612: PUSH
14613: LD_INT 23
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 26
14621: PUSH
14622: LD_INT 36
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 101
14643: PUSH
14644: LD_INT 102
14646: PUSH
14647: LD_INT 105
14649: PUSH
14650: LD_INT 106
14652: PUSH
14653: LD_INT 108
14655: PUSH
14656: LD_INT 109
14658: PUSH
14659: LD_INT 112
14661: PUSH
14662: LD_INT 116
14664: PUSH
14665: LD_INT 117
14667: PUSH
14668: LD_INT 118
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: ST_TO_ADDR
14687: GO 17350
14689: LD_INT 6
14691: DOUBLE
14692: EQUAL
14693: IFTRUE 14697
14695: GO 14829
14697: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14698: LD_ADDR_VAR 0 2
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 4
14708: PUSH
14709: LD_INT 5
14711: PUSH
14712: LD_INT 6
14714: PUSH
14715: LD_INT 8
14717: PUSH
14718: LD_INT 11
14720: PUSH
14721: LD_INT 12
14723: PUSH
14724: LD_INT 15
14726: PUSH
14727: LD_INT 16
14729: PUSH
14730: LD_INT 20
14732: PUSH
14733: LD_INT 21
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_INT 23
14741: PUSH
14742: LD_INT 25
14744: PUSH
14745: LD_INT 26
14747: PUSH
14748: LD_INT 30
14750: PUSH
14751: LD_INT 31
14753: PUSH
14754: LD_INT 32
14756: PUSH
14757: LD_INT 36
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 101
14783: PUSH
14784: LD_INT 102
14786: PUSH
14787: LD_INT 105
14789: PUSH
14790: LD_INT 106
14792: PUSH
14793: LD_INT 108
14795: PUSH
14796: LD_INT 109
14798: PUSH
14799: LD_INT 112
14801: PUSH
14802: LD_INT 116
14804: PUSH
14805: LD_INT 117
14807: PUSH
14808: LD_INT 118
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: ST_TO_ADDR
14827: GO 17350
14829: LD_INT 7
14831: DOUBLE
14832: EQUAL
14833: IFTRUE 14837
14835: GO 14949
14837: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14838: LD_ADDR_VAR 0 2
14842: PUSH
14843: LD_INT 2
14845: PUSH
14846: LD_INT 4
14848: PUSH
14849: LD_INT 5
14851: PUSH
14852: LD_INT 7
14854: PUSH
14855: LD_INT 11
14857: PUSH
14858: LD_INT 12
14860: PUSH
14861: LD_INT 15
14863: PUSH
14864: LD_INT 16
14866: PUSH
14867: LD_INT 20
14869: PUSH
14870: LD_INT 21
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_INT 23
14878: PUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 26
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 101
14903: PUSH
14904: LD_INT 102
14906: PUSH
14907: LD_INT 103
14909: PUSH
14910: LD_INT 105
14912: PUSH
14913: LD_INT 106
14915: PUSH
14916: LD_INT 108
14918: PUSH
14919: LD_INT 112
14921: PUSH
14922: LD_INT 116
14924: PUSH
14925: LD_INT 117
14927: PUSH
14928: LD_INT 118
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: ST_TO_ADDR
14947: GO 17350
14949: LD_INT 8
14951: DOUBLE
14952: EQUAL
14953: IFTRUE 14957
14955: GO 15097
14957: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14958: LD_ADDR_VAR 0 2
14962: PUSH
14963: LD_INT 2
14965: PUSH
14966: LD_INT 4
14968: PUSH
14969: LD_INT 5
14971: PUSH
14972: LD_INT 6
14974: PUSH
14975: LD_INT 7
14977: PUSH
14978: LD_INT 8
14980: PUSH
14981: LD_INT 11
14983: PUSH
14984: LD_INT 12
14986: PUSH
14987: LD_INT 15
14989: PUSH
14990: LD_INT 16
14992: PUSH
14993: LD_INT 20
14995: PUSH
14996: LD_INT 21
14998: PUSH
14999: LD_INT 22
15001: PUSH
15002: LD_INT 23
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 26
15010: PUSH
15011: LD_INT 30
15013: PUSH
15014: LD_INT 31
15016: PUSH
15017: LD_INT 32
15019: PUSH
15020: LD_INT 36
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 101
15047: PUSH
15048: LD_INT 102
15050: PUSH
15051: LD_INT 103
15053: PUSH
15054: LD_INT 105
15056: PUSH
15057: LD_INT 106
15059: PUSH
15060: LD_INT 108
15062: PUSH
15063: LD_INT 109
15065: PUSH
15066: LD_INT 112
15068: PUSH
15069: LD_INT 116
15071: PUSH
15072: LD_INT 117
15074: PUSH
15075: LD_INT 118
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: ST_TO_ADDR
15095: GO 17350
15097: LD_INT 9
15099: DOUBLE
15100: EQUAL
15101: IFTRUE 15105
15103: GO 15253
15105: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15106: LD_ADDR_VAR 0 2
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 4
15116: PUSH
15117: LD_INT 5
15119: PUSH
15120: LD_INT 6
15122: PUSH
15123: LD_INT 7
15125: PUSH
15126: LD_INT 8
15128: PUSH
15129: LD_INT 11
15131: PUSH
15132: LD_INT 12
15134: PUSH
15135: LD_INT 15
15137: PUSH
15138: LD_INT 16
15140: PUSH
15141: LD_INT 20
15143: PUSH
15144: LD_INT 21
15146: PUSH
15147: LD_INT 22
15149: PUSH
15150: LD_INT 23
15152: PUSH
15153: LD_INT 25
15155: PUSH
15156: LD_INT 26
15158: PUSH
15159: LD_INT 28
15161: PUSH
15162: LD_INT 30
15164: PUSH
15165: LD_INT 31
15167: PUSH
15168: LD_INT 32
15170: PUSH
15171: LD_INT 36
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 101
15199: PUSH
15200: LD_INT 102
15202: PUSH
15203: LD_INT 103
15205: PUSH
15206: LD_INT 105
15208: PUSH
15209: LD_INT 106
15211: PUSH
15212: LD_INT 108
15214: PUSH
15215: LD_INT 109
15217: PUSH
15218: LD_INT 112
15220: PUSH
15221: LD_INT 114
15223: PUSH
15224: LD_INT 116
15226: PUSH
15227: LD_INT 117
15229: PUSH
15230: LD_INT 118
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: ST_TO_ADDR
15251: GO 17350
15253: LD_INT 10
15255: DOUBLE
15256: EQUAL
15257: IFTRUE 15261
15259: GO 15457
15261: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 4
15272: PUSH
15273: LD_INT 5
15275: PUSH
15276: LD_INT 6
15278: PUSH
15279: LD_INT 7
15281: PUSH
15282: LD_INT 8
15284: PUSH
15285: LD_INT 9
15287: PUSH
15288: LD_INT 10
15290: PUSH
15291: LD_INT 11
15293: PUSH
15294: LD_INT 12
15296: PUSH
15297: LD_INT 13
15299: PUSH
15300: LD_INT 14
15302: PUSH
15303: LD_INT 15
15305: PUSH
15306: LD_INT 16
15308: PUSH
15309: LD_INT 17
15311: PUSH
15312: LD_INT 18
15314: PUSH
15315: LD_INT 19
15317: PUSH
15318: LD_INT 20
15320: PUSH
15321: LD_INT 21
15323: PUSH
15324: LD_INT 22
15326: PUSH
15327: LD_INT 23
15329: PUSH
15330: LD_INT 24
15332: PUSH
15333: LD_INT 25
15335: PUSH
15336: LD_INT 26
15338: PUSH
15339: LD_INT 28
15341: PUSH
15342: LD_INT 30
15344: PUSH
15345: LD_INT 31
15347: PUSH
15348: LD_INT 32
15350: PUSH
15351: LD_INT 36
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 101
15387: PUSH
15388: LD_INT 102
15390: PUSH
15391: LD_INT 103
15393: PUSH
15394: LD_INT 104
15396: PUSH
15397: LD_INT 105
15399: PUSH
15400: LD_INT 106
15402: PUSH
15403: LD_INT 107
15405: PUSH
15406: LD_INT 108
15408: PUSH
15409: LD_INT 109
15411: PUSH
15412: LD_INT 110
15414: PUSH
15415: LD_INT 111
15417: PUSH
15418: LD_INT 112
15420: PUSH
15421: LD_INT 114
15423: PUSH
15424: LD_INT 116
15426: PUSH
15427: LD_INT 117
15429: PUSH
15430: LD_INT 118
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: ST_TO_ADDR
15455: GO 17350
15457: LD_INT 11
15459: DOUBLE
15460: EQUAL
15461: IFTRUE 15465
15463: GO 15669
15465: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15466: LD_ADDR_VAR 0 2
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: LD_INT 4
15479: PUSH
15480: LD_INT 5
15482: PUSH
15483: LD_INT 6
15485: PUSH
15486: LD_INT 7
15488: PUSH
15489: LD_INT 8
15491: PUSH
15492: LD_INT 9
15494: PUSH
15495: LD_INT 10
15497: PUSH
15498: LD_INT 11
15500: PUSH
15501: LD_INT 12
15503: PUSH
15504: LD_INT 13
15506: PUSH
15507: LD_INT 14
15509: PUSH
15510: LD_INT 15
15512: PUSH
15513: LD_INT 16
15515: PUSH
15516: LD_INT 17
15518: PUSH
15519: LD_INT 18
15521: PUSH
15522: LD_INT 19
15524: PUSH
15525: LD_INT 20
15527: PUSH
15528: LD_INT 21
15530: PUSH
15531: LD_INT 22
15533: PUSH
15534: LD_INT 23
15536: PUSH
15537: LD_INT 24
15539: PUSH
15540: LD_INT 25
15542: PUSH
15543: LD_INT 26
15545: PUSH
15546: LD_INT 28
15548: PUSH
15549: LD_INT 30
15551: PUSH
15552: LD_INT 31
15554: PUSH
15555: LD_INT 32
15557: PUSH
15558: LD_INT 34
15560: PUSH
15561: LD_INT 36
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 101
15599: PUSH
15600: LD_INT 102
15602: PUSH
15603: LD_INT 103
15605: PUSH
15606: LD_INT 104
15608: PUSH
15609: LD_INT 105
15611: PUSH
15612: LD_INT 106
15614: PUSH
15615: LD_INT 107
15617: PUSH
15618: LD_INT 108
15620: PUSH
15621: LD_INT 109
15623: PUSH
15624: LD_INT 110
15626: PUSH
15627: LD_INT 111
15629: PUSH
15630: LD_INT 112
15632: PUSH
15633: LD_INT 114
15635: PUSH
15636: LD_INT 116
15638: PUSH
15639: LD_INT 117
15641: PUSH
15642: LD_INT 118
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: ST_TO_ADDR
15667: GO 17350
15669: LD_INT 12
15671: DOUBLE
15672: EQUAL
15673: IFTRUE 15677
15675: GO 15897
15677: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15678: LD_ADDR_VAR 0 2
15682: PUSH
15683: LD_INT 1
15685: PUSH
15686: LD_INT 2
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: LD_INT 4
15694: PUSH
15695: LD_INT 5
15697: PUSH
15698: LD_INT 6
15700: PUSH
15701: LD_INT 7
15703: PUSH
15704: LD_INT 8
15706: PUSH
15707: LD_INT 9
15709: PUSH
15710: LD_INT 10
15712: PUSH
15713: LD_INT 11
15715: PUSH
15716: LD_INT 12
15718: PUSH
15719: LD_INT 13
15721: PUSH
15722: LD_INT 14
15724: PUSH
15725: LD_INT 15
15727: PUSH
15728: LD_INT 16
15730: PUSH
15731: LD_INT 17
15733: PUSH
15734: LD_INT 18
15736: PUSH
15737: LD_INT 19
15739: PUSH
15740: LD_INT 20
15742: PUSH
15743: LD_INT 21
15745: PUSH
15746: LD_INT 22
15748: PUSH
15749: LD_INT 23
15751: PUSH
15752: LD_INT 24
15754: PUSH
15755: LD_INT 25
15757: PUSH
15758: LD_INT 26
15760: PUSH
15761: LD_INT 27
15763: PUSH
15764: LD_INT 28
15766: PUSH
15767: LD_INT 30
15769: PUSH
15770: LD_INT 31
15772: PUSH
15773: LD_INT 32
15775: PUSH
15776: LD_INT 33
15778: PUSH
15779: LD_INT 34
15781: PUSH
15782: LD_INT 36
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 101
15823: PUSH
15824: LD_INT 102
15826: PUSH
15827: LD_INT 103
15829: PUSH
15830: LD_INT 104
15832: PUSH
15833: LD_INT 105
15835: PUSH
15836: LD_INT 106
15838: PUSH
15839: LD_INT 107
15841: PUSH
15842: LD_INT 108
15844: PUSH
15845: LD_INT 109
15847: PUSH
15848: LD_INT 110
15850: PUSH
15851: LD_INT 111
15853: PUSH
15854: LD_INT 112
15856: PUSH
15857: LD_INT 113
15859: PUSH
15860: LD_INT 114
15862: PUSH
15863: LD_INT 116
15865: PUSH
15866: LD_INT 117
15868: PUSH
15869: LD_INT 118
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: ST_TO_ADDR
15895: GO 17350
15897: LD_INT 13
15899: DOUBLE
15900: EQUAL
15901: IFTRUE 15905
15903: GO 16113
15905: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: LD_INT 2
15916: PUSH
15917: LD_INT 3
15919: PUSH
15920: LD_INT 4
15922: PUSH
15923: LD_INT 5
15925: PUSH
15926: LD_INT 8
15928: PUSH
15929: LD_INT 9
15931: PUSH
15932: LD_INT 10
15934: PUSH
15935: LD_INT 11
15937: PUSH
15938: LD_INT 12
15940: PUSH
15941: LD_INT 14
15943: PUSH
15944: LD_INT 15
15946: PUSH
15947: LD_INT 16
15949: PUSH
15950: LD_INT 17
15952: PUSH
15953: LD_INT 18
15955: PUSH
15956: LD_INT 19
15958: PUSH
15959: LD_INT 20
15961: PUSH
15962: LD_INT 21
15964: PUSH
15965: LD_INT 22
15967: PUSH
15968: LD_INT 23
15970: PUSH
15971: LD_INT 24
15973: PUSH
15974: LD_INT 25
15976: PUSH
15977: LD_INT 26
15979: PUSH
15980: LD_INT 27
15982: PUSH
15983: LD_INT 28
15985: PUSH
15986: LD_INT 30
15988: PUSH
15989: LD_INT 31
15991: PUSH
15992: LD_INT 32
15994: PUSH
15995: LD_INT 33
15997: PUSH
15998: LD_INT 34
16000: PUSH
16001: LD_INT 36
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 101
16039: PUSH
16040: LD_INT 102
16042: PUSH
16043: LD_INT 103
16045: PUSH
16046: LD_INT 104
16048: PUSH
16049: LD_INT 105
16051: PUSH
16052: LD_INT 106
16054: PUSH
16055: LD_INT 107
16057: PUSH
16058: LD_INT 108
16060: PUSH
16061: LD_INT 109
16063: PUSH
16064: LD_INT 110
16066: PUSH
16067: LD_INT 111
16069: PUSH
16070: LD_INT 112
16072: PUSH
16073: LD_INT 113
16075: PUSH
16076: LD_INT 114
16078: PUSH
16079: LD_INT 116
16081: PUSH
16082: LD_INT 117
16084: PUSH
16085: LD_INT 118
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: ST_TO_ADDR
16111: GO 17350
16113: LD_INT 14
16115: DOUBLE
16116: EQUAL
16117: IFTRUE 16121
16119: GO 16345
16121: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16122: LD_ADDR_VAR 0 2
16126: PUSH
16127: LD_INT 1
16129: PUSH
16130: LD_INT 2
16132: PUSH
16133: LD_INT 3
16135: PUSH
16136: LD_INT 4
16138: PUSH
16139: LD_INT 5
16141: PUSH
16142: LD_INT 6
16144: PUSH
16145: LD_INT 7
16147: PUSH
16148: LD_INT 8
16150: PUSH
16151: LD_INT 9
16153: PUSH
16154: LD_INT 10
16156: PUSH
16157: LD_INT 11
16159: PUSH
16160: LD_INT 12
16162: PUSH
16163: LD_INT 13
16165: PUSH
16166: LD_INT 14
16168: PUSH
16169: LD_INT 15
16171: PUSH
16172: LD_INT 16
16174: PUSH
16175: LD_INT 17
16177: PUSH
16178: LD_INT 18
16180: PUSH
16181: LD_INT 19
16183: PUSH
16184: LD_INT 20
16186: PUSH
16187: LD_INT 21
16189: PUSH
16190: LD_INT 22
16192: PUSH
16193: LD_INT 23
16195: PUSH
16196: LD_INT 24
16198: PUSH
16199: LD_INT 25
16201: PUSH
16202: LD_INT 26
16204: PUSH
16205: LD_INT 27
16207: PUSH
16208: LD_INT 28
16210: PUSH
16211: LD_INT 29
16213: PUSH
16214: LD_INT 30
16216: PUSH
16217: LD_INT 31
16219: PUSH
16220: LD_INT 32
16222: PUSH
16223: LD_INT 33
16225: PUSH
16226: LD_INT 34
16228: PUSH
16229: LD_INT 36
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 101
16271: PUSH
16272: LD_INT 102
16274: PUSH
16275: LD_INT 103
16277: PUSH
16278: LD_INT 104
16280: PUSH
16281: LD_INT 105
16283: PUSH
16284: LD_INT 106
16286: PUSH
16287: LD_INT 107
16289: PUSH
16290: LD_INT 108
16292: PUSH
16293: LD_INT 109
16295: PUSH
16296: LD_INT 110
16298: PUSH
16299: LD_INT 111
16301: PUSH
16302: LD_INT 112
16304: PUSH
16305: LD_INT 113
16307: PUSH
16308: LD_INT 114
16310: PUSH
16311: LD_INT 116
16313: PUSH
16314: LD_INT 117
16316: PUSH
16317: LD_INT 118
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: ST_TO_ADDR
16343: GO 17350
16345: LD_INT 15
16347: DOUBLE
16348: EQUAL
16349: IFTRUE 16353
16351: GO 16577
16353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16354: LD_ADDR_VAR 0 2
16358: PUSH
16359: LD_INT 1
16361: PUSH
16362: LD_INT 2
16364: PUSH
16365: LD_INT 3
16367: PUSH
16368: LD_INT 4
16370: PUSH
16371: LD_INT 5
16373: PUSH
16374: LD_INT 6
16376: PUSH
16377: LD_INT 7
16379: PUSH
16380: LD_INT 8
16382: PUSH
16383: LD_INT 9
16385: PUSH
16386: LD_INT 10
16388: PUSH
16389: LD_INT 11
16391: PUSH
16392: LD_INT 12
16394: PUSH
16395: LD_INT 13
16397: PUSH
16398: LD_INT 14
16400: PUSH
16401: LD_INT 15
16403: PUSH
16404: LD_INT 16
16406: PUSH
16407: LD_INT 17
16409: PUSH
16410: LD_INT 18
16412: PUSH
16413: LD_INT 19
16415: PUSH
16416: LD_INT 20
16418: PUSH
16419: LD_INT 21
16421: PUSH
16422: LD_INT 22
16424: PUSH
16425: LD_INT 23
16427: PUSH
16428: LD_INT 24
16430: PUSH
16431: LD_INT 25
16433: PUSH
16434: LD_INT 26
16436: PUSH
16437: LD_INT 27
16439: PUSH
16440: LD_INT 28
16442: PUSH
16443: LD_INT 29
16445: PUSH
16446: LD_INT 30
16448: PUSH
16449: LD_INT 31
16451: PUSH
16452: LD_INT 32
16454: PUSH
16455: LD_INT 33
16457: PUSH
16458: LD_INT 34
16460: PUSH
16461: LD_INT 36
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 101
16503: PUSH
16504: LD_INT 102
16506: PUSH
16507: LD_INT 103
16509: PUSH
16510: LD_INT 104
16512: PUSH
16513: LD_INT 105
16515: PUSH
16516: LD_INT 106
16518: PUSH
16519: LD_INT 107
16521: PUSH
16522: LD_INT 108
16524: PUSH
16525: LD_INT 109
16527: PUSH
16528: LD_INT 110
16530: PUSH
16531: LD_INT 111
16533: PUSH
16534: LD_INT 112
16536: PUSH
16537: LD_INT 113
16539: PUSH
16540: LD_INT 114
16542: PUSH
16543: LD_INT 116
16545: PUSH
16546: LD_INT 117
16548: PUSH
16549: LD_INT 118
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: ST_TO_ADDR
16575: GO 17350
16577: LD_INT 16
16579: DOUBLE
16580: EQUAL
16581: IFTRUE 16585
16583: GO 16721
16585: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16586: LD_ADDR_VAR 0 2
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: LD_INT 4
16596: PUSH
16597: LD_INT 5
16599: PUSH
16600: LD_INT 7
16602: PUSH
16603: LD_INT 11
16605: PUSH
16606: LD_INT 12
16608: PUSH
16609: LD_INT 15
16611: PUSH
16612: LD_INT 16
16614: PUSH
16615: LD_INT 20
16617: PUSH
16618: LD_INT 21
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_INT 23
16626: PUSH
16627: LD_INT 25
16629: PUSH
16630: LD_INT 26
16632: PUSH
16633: LD_INT 30
16635: PUSH
16636: LD_INT 31
16638: PUSH
16639: LD_INT 32
16641: PUSH
16642: LD_INT 33
16644: PUSH
16645: LD_INT 34
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 101
16671: PUSH
16672: LD_INT 102
16674: PUSH
16675: LD_INT 103
16677: PUSH
16678: LD_INT 106
16680: PUSH
16681: LD_INT 108
16683: PUSH
16684: LD_INT 112
16686: PUSH
16687: LD_INT 113
16689: PUSH
16690: LD_INT 114
16692: PUSH
16693: LD_INT 116
16695: PUSH
16696: LD_INT 117
16698: PUSH
16699: LD_INT 118
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: ST_TO_ADDR
16719: GO 17350
16721: LD_INT 17
16723: DOUBLE
16724: EQUAL
16725: IFTRUE 16729
16727: GO 16953
16729: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16730: LD_ADDR_VAR 0 2
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: LD_INT 2
16740: PUSH
16741: LD_INT 3
16743: PUSH
16744: LD_INT 4
16746: PUSH
16747: LD_INT 5
16749: PUSH
16750: LD_INT 6
16752: PUSH
16753: LD_INT 7
16755: PUSH
16756: LD_INT 8
16758: PUSH
16759: LD_INT 9
16761: PUSH
16762: LD_INT 10
16764: PUSH
16765: LD_INT 11
16767: PUSH
16768: LD_INT 12
16770: PUSH
16771: LD_INT 13
16773: PUSH
16774: LD_INT 14
16776: PUSH
16777: LD_INT 15
16779: PUSH
16780: LD_INT 16
16782: PUSH
16783: LD_INT 17
16785: PUSH
16786: LD_INT 18
16788: PUSH
16789: LD_INT 19
16791: PUSH
16792: LD_INT 20
16794: PUSH
16795: LD_INT 21
16797: PUSH
16798: LD_INT 22
16800: PUSH
16801: LD_INT 23
16803: PUSH
16804: LD_INT 24
16806: PUSH
16807: LD_INT 25
16809: PUSH
16810: LD_INT 26
16812: PUSH
16813: LD_INT 27
16815: PUSH
16816: LD_INT 28
16818: PUSH
16819: LD_INT 29
16821: PUSH
16822: LD_INT 30
16824: PUSH
16825: LD_INT 31
16827: PUSH
16828: LD_INT 32
16830: PUSH
16831: LD_INT 33
16833: PUSH
16834: LD_INT 34
16836: PUSH
16837: LD_INT 36
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 101
16879: PUSH
16880: LD_INT 102
16882: PUSH
16883: LD_INT 103
16885: PUSH
16886: LD_INT 104
16888: PUSH
16889: LD_INT 105
16891: PUSH
16892: LD_INT 106
16894: PUSH
16895: LD_INT 107
16897: PUSH
16898: LD_INT 108
16900: PUSH
16901: LD_INT 109
16903: PUSH
16904: LD_INT 110
16906: PUSH
16907: LD_INT 111
16909: PUSH
16910: LD_INT 112
16912: PUSH
16913: LD_INT 113
16915: PUSH
16916: LD_INT 114
16918: PUSH
16919: LD_INT 116
16921: PUSH
16922: LD_INT 117
16924: PUSH
16925: LD_INT 118
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: ST_TO_ADDR
16951: GO 17350
16953: LD_INT 18
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 17109
16961: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16962: LD_ADDR_VAR 0 2
16966: PUSH
16967: LD_INT 2
16969: PUSH
16970: LD_INT 4
16972: PUSH
16973: LD_INT 5
16975: PUSH
16976: LD_INT 7
16978: PUSH
16979: LD_INT 11
16981: PUSH
16982: LD_INT 12
16984: PUSH
16985: LD_INT 15
16987: PUSH
16988: LD_INT 16
16990: PUSH
16991: LD_INT 20
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_INT 23
17002: PUSH
17003: LD_INT 25
17005: PUSH
17006: LD_INT 26
17008: PUSH
17009: LD_INT 30
17011: PUSH
17012: LD_INT 31
17014: PUSH
17015: LD_INT 32
17017: PUSH
17018: LD_INT 33
17020: PUSH
17021: LD_INT 34
17023: PUSH
17024: LD_INT 35
17026: PUSH
17027: LD_INT 36
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 101
17055: PUSH
17056: LD_INT 102
17058: PUSH
17059: LD_INT 103
17061: PUSH
17062: LD_INT 106
17064: PUSH
17065: LD_INT 108
17067: PUSH
17068: LD_INT 112
17070: PUSH
17071: LD_INT 113
17073: PUSH
17074: LD_INT 114
17076: PUSH
17077: LD_INT 115
17079: PUSH
17080: LD_INT 116
17082: PUSH
17083: LD_INT 117
17085: PUSH
17086: LD_INT 118
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: ST_TO_ADDR
17107: GO 17350
17109: LD_INT 19
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17349
17117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17118: LD_ADDR_VAR 0 2
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: LD_INT 2
17128: PUSH
17129: LD_INT 3
17131: PUSH
17132: LD_INT 4
17134: PUSH
17135: LD_INT 5
17137: PUSH
17138: LD_INT 6
17140: PUSH
17141: LD_INT 7
17143: PUSH
17144: LD_INT 8
17146: PUSH
17147: LD_INT 9
17149: PUSH
17150: LD_INT 10
17152: PUSH
17153: LD_INT 11
17155: PUSH
17156: LD_INT 12
17158: PUSH
17159: LD_INT 13
17161: PUSH
17162: LD_INT 14
17164: PUSH
17165: LD_INT 15
17167: PUSH
17168: LD_INT 16
17170: PUSH
17171: LD_INT 17
17173: PUSH
17174: LD_INT 18
17176: PUSH
17177: LD_INT 19
17179: PUSH
17180: LD_INT 20
17182: PUSH
17183: LD_INT 21
17185: PUSH
17186: LD_INT 22
17188: PUSH
17189: LD_INT 23
17191: PUSH
17192: LD_INT 24
17194: PUSH
17195: LD_INT 25
17197: PUSH
17198: LD_INT 26
17200: PUSH
17201: LD_INT 27
17203: PUSH
17204: LD_INT 28
17206: PUSH
17207: LD_INT 29
17209: PUSH
17210: LD_INT 30
17212: PUSH
17213: LD_INT 31
17215: PUSH
17216: LD_INT 32
17218: PUSH
17219: LD_INT 33
17221: PUSH
17222: LD_INT 34
17224: PUSH
17225: LD_INT 35
17227: PUSH
17228: LD_INT 36
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 101
17271: PUSH
17272: LD_INT 102
17274: PUSH
17275: LD_INT 103
17277: PUSH
17278: LD_INT 104
17280: PUSH
17281: LD_INT 105
17283: PUSH
17284: LD_INT 106
17286: PUSH
17287: LD_INT 107
17289: PUSH
17290: LD_INT 108
17292: PUSH
17293: LD_INT 109
17295: PUSH
17296: LD_INT 110
17298: PUSH
17299: LD_INT 111
17301: PUSH
17302: LD_INT 112
17304: PUSH
17305: LD_INT 113
17307: PUSH
17308: LD_INT 114
17310: PUSH
17311: LD_INT 115
17313: PUSH
17314: LD_INT 116
17316: PUSH
17317: LD_INT 117
17319: PUSH
17320: LD_INT 118
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: ST_TO_ADDR
17347: GO 17350
17349: POP
// end else
17350: GO 17581
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17352: LD_ADDR_VAR 0 2
17356: PUSH
17357: LD_INT 1
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: LD_INT 3
17365: PUSH
17366: LD_INT 4
17368: PUSH
17369: LD_INT 5
17371: PUSH
17372: LD_INT 6
17374: PUSH
17375: LD_INT 7
17377: PUSH
17378: LD_INT 8
17380: PUSH
17381: LD_INT 9
17383: PUSH
17384: LD_INT 10
17386: PUSH
17387: LD_INT 11
17389: PUSH
17390: LD_INT 12
17392: PUSH
17393: LD_INT 13
17395: PUSH
17396: LD_INT 14
17398: PUSH
17399: LD_INT 15
17401: PUSH
17402: LD_INT 16
17404: PUSH
17405: LD_INT 17
17407: PUSH
17408: LD_INT 18
17410: PUSH
17411: LD_INT 19
17413: PUSH
17414: LD_INT 20
17416: PUSH
17417: LD_INT 21
17419: PUSH
17420: LD_INT 22
17422: PUSH
17423: LD_INT 23
17425: PUSH
17426: LD_INT 24
17428: PUSH
17429: LD_INT 25
17431: PUSH
17432: LD_INT 26
17434: PUSH
17435: LD_INT 27
17437: PUSH
17438: LD_INT 28
17440: PUSH
17441: LD_INT 29
17443: PUSH
17444: LD_INT 30
17446: PUSH
17447: LD_INT 31
17449: PUSH
17450: LD_INT 32
17452: PUSH
17453: LD_INT 33
17455: PUSH
17456: LD_INT 34
17458: PUSH
17459: LD_INT 35
17461: PUSH
17462: LD_INT 36
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 101
17505: PUSH
17506: LD_INT 102
17508: PUSH
17509: LD_INT 103
17511: PUSH
17512: LD_INT 104
17514: PUSH
17515: LD_INT 105
17517: PUSH
17518: LD_INT 106
17520: PUSH
17521: LD_INT 107
17523: PUSH
17524: LD_INT 108
17526: PUSH
17527: LD_INT 109
17529: PUSH
17530: LD_INT 110
17532: PUSH
17533: LD_INT 111
17535: PUSH
17536: LD_INT 112
17538: PUSH
17539: LD_INT 113
17541: PUSH
17542: LD_INT 114
17544: PUSH
17545: LD_INT 115
17547: PUSH
17548: LD_INT 116
17550: PUSH
17551: LD_INT 117
17553: PUSH
17554: LD_INT 118
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: ST_TO_ADDR
// if result then
17581: LD_VAR 0 2
17585: IFFALSE 18371
// begin normal :=  ;
17587: LD_ADDR_VAR 0 5
17591: PUSH
17592: LD_STRING 
17594: ST_TO_ADDR
// hardcore :=  ;
17595: LD_ADDR_VAR 0 6
17599: PUSH
17600: LD_STRING 
17602: ST_TO_ADDR
// active :=  ;
17603: LD_ADDR_VAR 0 7
17607: PUSH
17608: LD_STRING 
17610: ST_TO_ADDR
// for i = 1 to normalCounter do
17611: LD_ADDR_VAR 0 8
17615: PUSH
17616: DOUBLE
17617: LD_INT 1
17619: DEC
17620: ST_TO_ADDR
17621: LD_EXP 23
17625: PUSH
17626: FOR_TO
17627: IFFALSE 17728
// begin tmp := 0 ;
17629: LD_ADDR_VAR 0 3
17633: PUSH
17634: LD_STRING 0
17636: ST_TO_ADDR
// if result [ 1 ] then
17637: LD_VAR 0 2
17641: PUSH
17642: LD_INT 1
17644: ARRAY
17645: IFFALSE 17710
// if result [ 1 ] [ 1 ] = i then
17647: LD_VAR 0 2
17651: PUSH
17652: LD_INT 1
17654: ARRAY
17655: PUSH
17656: LD_INT 1
17658: ARRAY
17659: PUSH
17660: LD_VAR 0 8
17664: EQUAL
17665: IFFALSE 17710
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17667: LD_ADDR_VAR 0 2
17671: PUSH
17672: LD_VAR 0 2
17676: PPUSH
17677: LD_INT 1
17679: PPUSH
17680: LD_VAR 0 2
17684: PUSH
17685: LD_INT 1
17687: ARRAY
17688: PPUSH
17689: LD_INT 1
17691: PPUSH
17692: CALL_OW 3
17696: PPUSH
17697: CALL_OW 1
17701: ST_TO_ADDR
// tmp := 1 ;
17702: LD_ADDR_VAR 0 3
17706: PUSH
17707: LD_STRING 1
17709: ST_TO_ADDR
// end ; normal := normal & tmp ;
17710: LD_ADDR_VAR 0 5
17714: PUSH
17715: LD_VAR 0 5
17719: PUSH
17720: LD_VAR 0 3
17724: STR
17725: ST_TO_ADDR
// end ;
17726: GO 17626
17728: POP
17729: POP
// for i = 1 to hardcoreCounter do
17730: LD_ADDR_VAR 0 8
17734: PUSH
17735: DOUBLE
17736: LD_INT 1
17738: DEC
17739: ST_TO_ADDR
17740: LD_EXP 24
17744: PUSH
17745: FOR_TO
17746: IFFALSE 17851
// begin tmp := 0 ;
17748: LD_ADDR_VAR 0 3
17752: PUSH
17753: LD_STRING 0
17755: ST_TO_ADDR
// if result [ 2 ] then
17756: LD_VAR 0 2
17760: PUSH
17761: LD_INT 2
17763: ARRAY
17764: IFFALSE 17833
// if result [ 2 ] [ 1 ] = 100 + i then
17766: LD_VAR 0 2
17770: PUSH
17771: LD_INT 2
17773: ARRAY
17774: PUSH
17775: LD_INT 1
17777: ARRAY
17778: PUSH
17779: LD_INT 100
17781: PUSH
17782: LD_VAR 0 8
17786: PLUS
17787: EQUAL
17788: IFFALSE 17833
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17790: LD_ADDR_VAR 0 2
17794: PUSH
17795: LD_VAR 0 2
17799: PPUSH
17800: LD_INT 2
17802: PPUSH
17803: LD_VAR 0 2
17807: PUSH
17808: LD_INT 2
17810: ARRAY
17811: PPUSH
17812: LD_INT 1
17814: PPUSH
17815: CALL_OW 3
17819: PPUSH
17820: CALL_OW 1
17824: ST_TO_ADDR
// tmp := 1 ;
17825: LD_ADDR_VAR 0 3
17829: PUSH
17830: LD_STRING 1
17832: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17833: LD_ADDR_VAR 0 6
17837: PUSH
17838: LD_VAR 0 6
17842: PUSH
17843: LD_VAR 0 3
17847: STR
17848: ST_TO_ADDR
// end ;
17849: GO 17745
17851: POP
17852: POP
// if isGameLoad then
17853: LD_VAR 0 1
17857: IFFALSE 18332
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17859: LD_ADDR_VAR 0 4
17863: PUSH
17864: LD_EXP 27
17868: PUSH
17869: LD_EXP 26
17873: PUSH
17874: LD_EXP 28
17878: PUSH
17879: LD_EXP 25
17883: PUSH
17884: LD_EXP 29
17888: PUSH
17889: LD_EXP 30
17893: PUSH
17894: LD_EXP 31
17898: PUSH
17899: LD_EXP 32
17903: PUSH
17904: LD_EXP 33
17908: PUSH
17909: LD_EXP 34
17913: PUSH
17914: LD_EXP 35
17918: PUSH
17919: LD_EXP 36
17923: PUSH
17924: LD_EXP 37
17928: PUSH
17929: LD_EXP 38
17933: PUSH
17934: LD_EXP 46
17938: PUSH
17939: LD_EXP 47
17943: PUSH
17944: LD_EXP 48
17948: PUSH
17949: LD_EXP 49
17953: PUSH
17954: LD_EXP 51
17958: PUSH
17959: LD_EXP 52
17963: PUSH
17964: LD_EXP 53
17968: PUSH
17969: LD_EXP 56
17973: PUSH
17974: LD_EXP 58
17978: PUSH
17979: LD_EXP 59
17983: PUSH
17984: LD_EXP 60
17988: PUSH
17989: LD_EXP 62
17993: PUSH
17994: LD_EXP 63
17998: PUSH
17999: LD_EXP 66
18003: PUSH
18004: LD_EXP 67
18008: PUSH
18009: LD_EXP 68
18013: PUSH
18014: LD_EXP 69
18018: PUSH
18019: LD_EXP 70
18023: PUSH
18024: LD_EXP 71
18028: PUSH
18029: LD_EXP 72
18033: PUSH
18034: LD_EXP 73
18038: PUSH
18039: LD_EXP 74
18043: PUSH
18044: LD_EXP 39
18048: PUSH
18049: LD_EXP 40
18053: PUSH
18054: LD_EXP 43
18058: PUSH
18059: LD_EXP 44
18063: PUSH
18064: LD_EXP 45
18068: PUSH
18069: LD_EXP 41
18073: PUSH
18074: LD_EXP 42
18078: PUSH
18079: LD_EXP 50
18083: PUSH
18084: LD_EXP 54
18088: PUSH
18089: LD_EXP 55
18093: PUSH
18094: LD_EXP 57
18098: PUSH
18099: LD_EXP 61
18103: PUSH
18104: LD_EXP 64
18108: PUSH
18109: LD_EXP 65
18113: PUSH
18114: LD_EXP 75
18118: PUSH
18119: LD_EXP 76
18123: PUSH
18124: LD_EXP 77
18128: PUSH
18129: LD_EXP 78
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: ST_TO_ADDR
// tmp :=  ;
18190: LD_ADDR_VAR 0 3
18194: PUSH
18195: LD_STRING 
18197: ST_TO_ADDR
// for i = 1 to normalCounter do
18198: LD_ADDR_VAR 0 8
18202: PUSH
18203: DOUBLE
18204: LD_INT 1
18206: DEC
18207: ST_TO_ADDR
18208: LD_EXP 23
18212: PUSH
18213: FOR_TO
18214: IFFALSE 18250
// begin if flags [ i ] then
18216: LD_VAR 0 4
18220: PUSH
18221: LD_VAR 0 8
18225: ARRAY
18226: IFFALSE 18248
// tmp := tmp & i & ; ;
18228: LD_ADDR_VAR 0 3
18232: PUSH
18233: LD_VAR 0 3
18237: PUSH
18238: LD_VAR 0 8
18242: STR
18243: PUSH
18244: LD_STRING ;
18246: STR
18247: ST_TO_ADDR
// end ;
18248: GO 18213
18250: POP
18251: POP
// for i = 1 to hardcoreCounter do
18252: LD_ADDR_VAR 0 8
18256: PUSH
18257: DOUBLE
18258: LD_INT 1
18260: DEC
18261: ST_TO_ADDR
18262: LD_EXP 24
18266: PUSH
18267: FOR_TO
18268: IFFALSE 18314
// begin if flags [ normalCounter + i ] then
18270: LD_VAR 0 4
18274: PUSH
18275: LD_EXP 23
18279: PUSH
18280: LD_VAR 0 8
18284: PLUS
18285: ARRAY
18286: IFFALSE 18312
// tmp := tmp & ( 100 + i ) & ; ;
18288: LD_ADDR_VAR 0 3
18292: PUSH
18293: LD_VAR 0 3
18297: PUSH
18298: LD_INT 100
18300: PUSH
18301: LD_VAR 0 8
18305: PLUS
18306: STR
18307: PUSH
18308: LD_STRING ;
18310: STR
18311: ST_TO_ADDR
// end ;
18312: GO 18267
18314: POP
18315: POP
// if tmp then
18316: LD_VAR 0 3
18320: IFFALSE 18332
// active := tmp ;
18322: LD_ADDR_VAR 0 7
18326: PUSH
18327: LD_VAR 0 3
18331: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18332: LD_STRING getStreamItemsFromMission("
18334: PUSH
18335: LD_VAR 0 5
18339: STR
18340: PUSH
18341: LD_STRING ","
18343: STR
18344: PUSH
18345: LD_VAR 0 6
18349: STR
18350: PUSH
18351: LD_STRING ","
18353: STR
18354: PUSH
18355: LD_VAR 0 7
18359: STR
18360: PUSH
18361: LD_STRING ")
18363: STR
18364: PPUSH
18365: CALL_OW 559
// end else
18369: GO 18378
// ToLua ( getStreamItemsFromMission("","","") ) ;
18371: LD_STRING getStreamItemsFromMission("","","")
18373: PPUSH
18374: CALL_OW 559
// end ;
18378: LD_VAR 0 2
18382: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18383: LD_EXP 22
18387: PUSH
18388: LD_EXP 27
18392: AND
18393: IFFALSE 18517
18395: GO 18397
18397: DISABLE
18398: LD_INT 0
18400: PPUSH
18401: PPUSH
// begin enable ;
18402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18403: LD_ADDR_VAR 0 2
18407: PUSH
18408: LD_INT 22
18410: PUSH
18411: LD_OWVAR 2
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 2
18422: PUSH
18423: LD_INT 34
18425: PUSH
18426: LD_INT 7
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 34
18435: PUSH
18436: LD_INT 45
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 34
18445: PUSH
18446: LD_INT 28
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 34
18455: PUSH
18456: LD_INT 47
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: ST_TO_ADDR
// if not tmp then
18479: LD_VAR 0 2
18483: NOT
18484: IFFALSE 18488
// exit ;
18486: GO 18517
// for i in tmp do
18488: LD_ADDR_VAR 0 1
18492: PUSH
18493: LD_VAR 0 2
18497: PUSH
18498: FOR_IN
18499: IFFALSE 18515
// begin SetLives ( i , 0 ) ;
18501: LD_VAR 0 1
18505: PPUSH
18506: LD_INT 0
18508: PPUSH
18509: CALL_OW 234
// end ;
18513: GO 18498
18515: POP
18516: POP
// end ;
18517: PPOPN 2
18519: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18520: LD_EXP 22
18524: PUSH
18525: LD_EXP 28
18529: AND
18530: IFFALSE 18614
18532: GO 18534
18534: DISABLE
18535: LD_INT 0
18537: PPUSH
18538: PPUSH
// begin enable ;
18539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18540: LD_ADDR_VAR 0 2
18544: PUSH
18545: LD_INT 22
18547: PUSH
18548: LD_OWVAR 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 32
18559: PUSH
18560: LD_INT 3
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PPUSH
18571: CALL_OW 69
18575: ST_TO_ADDR
// if not tmp then
18576: LD_VAR 0 2
18580: NOT
18581: IFFALSE 18585
// exit ;
18583: GO 18614
// for i in tmp do
18585: LD_ADDR_VAR 0 1
18589: PUSH
18590: LD_VAR 0 2
18594: PUSH
18595: FOR_IN
18596: IFFALSE 18612
// begin SetLives ( i , 0 ) ;
18598: LD_VAR 0 1
18602: PPUSH
18603: LD_INT 0
18605: PPUSH
18606: CALL_OW 234
// end ;
18610: GO 18595
18612: POP
18613: POP
// end ;
18614: PPOPN 2
18616: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18617: LD_EXP 22
18621: PUSH
18622: LD_EXP 25
18626: AND
18627: IFFALSE 18720
18629: GO 18631
18631: DISABLE
18632: LD_INT 0
18634: PPUSH
// begin enable ;
18635: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18636: LD_ADDR_VAR 0 1
18640: PUSH
18641: LD_INT 22
18643: PUSH
18644: LD_OWVAR 2
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: LD_INT 25
18658: PUSH
18659: LD_INT 5
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 25
18668: PUSH
18669: LD_INT 9
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 25
18678: PUSH
18679: LD_INT 8
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PPUSH
18696: CALL_OW 69
18700: PUSH
18701: FOR_IN
18702: IFFALSE 18718
// begin SetClass ( i , 1 ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_INT 1
18711: PPUSH
18712: CALL_OW 336
// end ;
18716: GO 18701
18718: POP
18719: POP
// end ;
18720: PPOPN 1
18722: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18723: LD_EXP 22
18727: PUSH
18728: LD_EXP 26
18732: AND
18733: PUSH
18734: LD_OWVAR 65
18738: PUSH
18739: LD_INT 7
18741: LESS
18742: AND
18743: IFFALSE 18757
18745: GO 18747
18747: DISABLE
// begin enable ;
18748: ENABLE
// game_speed := 7 ;
18749: LD_ADDR_OWVAR 65
18753: PUSH
18754: LD_INT 7
18756: ST_TO_ADDR
// end ;
18757: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18758: LD_EXP 22
18762: PUSH
18763: LD_EXP 29
18767: AND
18768: IFFALSE 18970
18770: GO 18772
18772: DISABLE
18773: LD_INT 0
18775: PPUSH
18776: PPUSH
18777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18778: LD_ADDR_VAR 0 3
18782: PUSH
18783: LD_INT 81
18785: PUSH
18786: LD_OWVAR 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 21
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 69
18813: ST_TO_ADDR
// if not tmp then
18814: LD_VAR 0 3
18818: NOT
18819: IFFALSE 18823
// exit ;
18821: GO 18970
// if tmp > 5 then
18823: LD_VAR 0 3
18827: PUSH
18828: LD_INT 5
18830: GREATER
18831: IFFALSE 18843
// k := 5 else
18833: LD_ADDR_VAR 0 2
18837: PUSH
18838: LD_INT 5
18840: ST_TO_ADDR
18841: GO 18853
// k := tmp ;
18843: LD_ADDR_VAR 0 2
18847: PUSH
18848: LD_VAR 0 3
18852: ST_TO_ADDR
// for i := 1 to k do
18853: LD_ADDR_VAR 0 1
18857: PUSH
18858: DOUBLE
18859: LD_INT 1
18861: DEC
18862: ST_TO_ADDR
18863: LD_VAR 0 2
18867: PUSH
18868: FOR_TO
18869: IFFALSE 18968
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18871: LD_VAR 0 3
18875: PUSH
18876: LD_VAR 0 1
18880: ARRAY
18881: PPUSH
18882: LD_VAR 0 1
18886: PUSH
18887: LD_INT 4
18889: MOD
18890: PUSH
18891: LD_INT 1
18893: PLUS
18894: PPUSH
18895: CALL_OW 259
18899: PUSH
18900: LD_INT 10
18902: LESS
18903: IFFALSE 18966
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18905: LD_VAR 0 3
18909: PUSH
18910: LD_VAR 0 1
18914: ARRAY
18915: PPUSH
18916: LD_VAR 0 1
18920: PUSH
18921: LD_INT 4
18923: MOD
18924: PUSH
18925: LD_INT 1
18927: PLUS
18928: PPUSH
18929: LD_VAR 0 3
18933: PUSH
18934: LD_VAR 0 1
18938: ARRAY
18939: PPUSH
18940: LD_VAR 0 1
18944: PUSH
18945: LD_INT 4
18947: MOD
18948: PUSH
18949: LD_INT 1
18951: PLUS
18952: PPUSH
18953: CALL_OW 259
18957: PUSH
18958: LD_INT 1
18960: PLUS
18961: PPUSH
18962: CALL_OW 237
18966: GO 18868
18968: POP
18969: POP
// end ;
18970: PPOPN 3
18972: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18973: LD_EXP 22
18977: PUSH
18978: LD_EXP 30
18982: AND
18983: IFFALSE 19003
18985: GO 18987
18987: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18988: LD_INT 4
18990: PPUSH
18991: LD_OWVAR 2
18995: PPUSH
18996: LD_INT 0
18998: PPUSH
18999: CALL_OW 324
19003: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19004: LD_EXP 22
19008: PUSH
19009: LD_EXP 59
19013: AND
19014: IFFALSE 19034
19016: GO 19018
19018: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19019: LD_INT 19
19021: PPUSH
19022: LD_OWVAR 2
19026: PPUSH
19027: LD_INT 0
19029: PPUSH
19030: CALL_OW 324
19034: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19035: LD_EXP 22
19039: PUSH
19040: LD_EXP 31
19044: AND
19045: IFFALSE 19147
19047: GO 19049
19049: DISABLE
19050: LD_INT 0
19052: PPUSH
19053: PPUSH
// begin enable ;
19054: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19055: LD_ADDR_VAR 0 2
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_OWVAR 2
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 34
19077: PUSH
19078: LD_INT 11
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 34
19087: PUSH
19088: LD_INT 30
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: ST_TO_ADDR
// if not tmp then
19109: LD_VAR 0 2
19113: NOT
19114: IFFALSE 19118
// exit ;
19116: GO 19147
// for i in tmp do
19118: LD_ADDR_VAR 0 1
19122: PUSH
19123: LD_VAR 0 2
19127: PUSH
19128: FOR_IN
19129: IFFALSE 19145
// begin SetLives ( i , 0 ) ;
19131: LD_VAR 0 1
19135: PPUSH
19136: LD_INT 0
19138: PPUSH
19139: CALL_OW 234
// end ;
19143: GO 19128
19145: POP
19146: POP
// end ;
19147: PPOPN 2
19149: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19150: LD_EXP 22
19154: PUSH
19155: LD_EXP 32
19159: AND
19160: IFFALSE 19180
19162: GO 19164
19164: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19165: LD_INT 32
19167: PPUSH
19168: LD_OWVAR 2
19172: PPUSH
19173: LD_INT 0
19175: PPUSH
19176: CALL_OW 324
19180: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19181: LD_EXP 22
19185: PUSH
19186: LD_EXP 33
19190: AND
19191: IFFALSE 19372
19193: GO 19195
19195: DISABLE
19196: LD_INT 0
19198: PPUSH
19199: PPUSH
19200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: LD_INT 22
19208: PUSH
19209: LD_OWVAR 2
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 33
19220: PUSH
19221: LD_INT 3
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PPUSH
19232: CALL_OW 69
19236: ST_TO_ADDR
// if not tmp then
19237: LD_VAR 0 2
19241: NOT
19242: IFFALSE 19246
// exit ;
19244: GO 19372
// side := 0 ;
19246: LD_ADDR_VAR 0 3
19250: PUSH
19251: LD_INT 0
19253: ST_TO_ADDR
// for i := 1 to 8 do
19254: LD_ADDR_VAR 0 1
19258: PUSH
19259: DOUBLE
19260: LD_INT 1
19262: DEC
19263: ST_TO_ADDR
19264: LD_INT 8
19266: PUSH
19267: FOR_TO
19268: IFFALSE 19316
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19270: LD_OWVAR 2
19274: PUSH
19275: LD_VAR 0 1
19279: NONEQUAL
19280: PUSH
19281: LD_OWVAR 2
19285: PPUSH
19286: LD_VAR 0 1
19290: PPUSH
19291: CALL_OW 81
19295: PUSH
19296: LD_INT 2
19298: EQUAL
19299: AND
19300: IFFALSE 19314
// begin side := i ;
19302: LD_ADDR_VAR 0 3
19306: PUSH
19307: LD_VAR 0 1
19311: ST_TO_ADDR
// break ;
19312: GO 19316
// end ;
19314: GO 19267
19316: POP
19317: POP
// if not side then
19318: LD_VAR 0 3
19322: NOT
19323: IFFALSE 19327
// exit ;
19325: GO 19372
// for i := 1 to tmp do
19327: LD_ADDR_VAR 0 1
19331: PUSH
19332: DOUBLE
19333: LD_INT 1
19335: DEC
19336: ST_TO_ADDR
19337: LD_VAR 0 2
19341: PUSH
19342: FOR_TO
19343: IFFALSE 19370
// if Prob ( 60 ) then
19345: LD_INT 60
19347: PPUSH
19348: CALL_OW 13
19352: IFFALSE 19368
// SetSide ( i , side ) ;
19354: LD_VAR 0 1
19358: PPUSH
19359: LD_VAR 0 3
19363: PPUSH
19364: CALL_OW 235
19368: GO 19342
19370: POP
19371: POP
// end ;
19372: PPOPN 3
19374: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19375: LD_EXP 22
19379: PUSH
19380: LD_EXP 35
19384: AND
19385: IFFALSE 19504
19387: GO 19389
19389: DISABLE
19390: LD_INT 0
19392: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19393: LD_ADDR_VAR 0 1
19397: PUSH
19398: LD_INT 22
19400: PUSH
19401: LD_OWVAR 2
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 21
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 3
19422: PUSH
19423: LD_INT 23
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: PPUSH
19442: CALL_OW 69
19446: PUSH
19447: FOR_IN
19448: IFFALSE 19502
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19450: LD_VAR 0 1
19454: PPUSH
19455: CALL_OW 257
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 3
19468: PUSH
19469: LD_INT 4
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: IN
19478: IFFALSE 19500
// SetClass ( un , rand ( 1 , 4 ) ) ;
19480: LD_VAR 0 1
19484: PPUSH
19485: LD_INT 1
19487: PPUSH
19488: LD_INT 4
19490: PPUSH
19491: CALL_OW 12
19495: PPUSH
19496: CALL_OW 336
19500: GO 19447
19502: POP
19503: POP
// end ;
19504: PPOPN 1
19506: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19507: LD_EXP 22
19511: PUSH
19512: LD_EXP 34
19516: AND
19517: IFFALSE 19596
19519: GO 19521
19521: DISABLE
19522: LD_INT 0
19524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19525: LD_ADDR_VAR 0 1
19529: PUSH
19530: LD_INT 22
19532: PUSH
19533: LD_OWVAR 2
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 21
19544: PUSH
19545: LD_INT 3
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PPUSH
19556: CALL_OW 69
19560: ST_TO_ADDR
// if not tmp then
19561: LD_VAR 0 1
19565: NOT
19566: IFFALSE 19570
// exit ;
19568: GO 19596
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 1
19577: PPUSH
19578: LD_VAR 0 1
19582: PPUSH
19583: CALL_OW 12
19587: ARRAY
19588: PPUSH
19589: LD_INT 100
19591: PPUSH
19592: CALL_OW 234
// end ;
19596: PPOPN 1
19598: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19599: LD_EXP 22
19603: PUSH
19604: LD_EXP 36
19608: AND
19609: IFFALSE 19707
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19617: LD_ADDR_VAR 0 1
19621: PUSH
19622: LD_INT 22
19624: PUSH
19625: LD_OWVAR 2
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 21
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PPUSH
19648: CALL_OW 69
19652: ST_TO_ADDR
// if not tmp then
19653: LD_VAR 0 1
19657: NOT
19658: IFFALSE 19662
// exit ;
19660: GO 19707
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19662: LD_VAR 0 1
19666: PUSH
19667: LD_INT 1
19669: PPUSH
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 12
19679: ARRAY
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: LD_INT 4
19686: PPUSH
19687: CALL_OW 12
19691: PPUSH
19692: LD_INT 3000
19694: PPUSH
19695: LD_INT 9000
19697: PPUSH
19698: CALL_OW 12
19702: PPUSH
19703: CALL_OW 492
// end ;
19707: PPOPN 1
19709: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19710: LD_EXP 22
19714: PUSH
19715: LD_EXP 37
19719: AND
19720: IFFALSE 19740
19722: GO 19724
19724: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19725: LD_INT 1
19727: PPUSH
19728: LD_OWVAR 2
19732: PPUSH
19733: LD_INT 0
19735: PPUSH
19736: CALL_OW 324
19740: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19741: LD_EXP 22
19745: PUSH
19746: LD_EXP 38
19750: AND
19751: IFFALSE 19834
19753: GO 19755
19755: DISABLE
19756: LD_INT 0
19758: PPUSH
19759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19760: LD_ADDR_VAR 0 2
19764: PUSH
19765: LD_INT 22
19767: PUSH
19768: LD_OWVAR 2
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 3
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PPUSH
19791: CALL_OW 69
19795: ST_TO_ADDR
// if not tmp then
19796: LD_VAR 0 2
19800: NOT
19801: IFFALSE 19805
// exit ;
19803: GO 19834
// for i in tmp do
19805: LD_ADDR_VAR 0 1
19809: PUSH
19810: LD_VAR 0 2
19814: PUSH
19815: FOR_IN
19816: IFFALSE 19832
// SetBLevel ( i , 10 ) ;
19818: LD_VAR 0 1
19822: PPUSH
19823: LD_INT 10
19825: PPUSH
19826: CALL_OW 241
19830: GO 19815
19832: POP
19833: POP
// end ;
19834: PPOPN 2
19836: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19837: LD_EXP 22
19841: PUSH
19842: LD_EXP 39
19846: AND
19847: IFFALSE 19958
19849: GO 19851
19851: DISABLE
19852: LD_INT 0
19854: PPUSH
19855: PPUSH
19856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19857: LD_ADDR_VAR 0 3
19861: PUSH
19862: LD_INT 22
19864: PUSH
19865: LD_OWVAR 2
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 25
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PPUSH
19888: CALL_OW 69
19892: ST_TO_ADDR
// if not tmp then
19893: LD_VAR 0 3
19897: NOT
19898: IFFALSE 19902
// exit ;
19900: GO 19958
// un := tmp [ rand ( 1 , tmp ) ] ;
19902: LD_ADDR_VAR 0 2
19906: PUSH
19907: LD_VAR 0 3
19911: PUSH
19912: LD_INT 1
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL_OW 12
19924: ARRAY
19925: ST_TO_ADDR
// if Crawls ( un ) then
19926: LD_VAR 0 2
19930: PPUSH
19931: CALL_OW 318
19935: IFFALSE 19946
// ComWalk ( un ) ;
19937: LD_VAR 0 2
19941: PPUSH
19942: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_INT 5
19953: PPUSH
19954: CALL_OW 336
// end ;
19958: PPOPN 3
19960: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19961: LD_EXP 22
19965: PUSH
19966: LD_EXP 40
19970: AND
19971: PUSH
19972: LD_OWVAR 67
19976: PUSH
19977: LD_INT 4
19979: LESS
19980: AND
19981: IFFALSE 20000
19983: GO 19985
19985: DISABLE
// begin Difficulty := Difficulty + 1 ;
19986: LD_ADDR_OWVAR 67
19990: PUSH
19991: LD_OWVAR 67
19995: PUSH
19996: LD_INT 1
19998: PLUS
19999: ST_TO_ADDR
// end ;
20000: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20001: LD_EXP 22
20005: PUSH
20006: LD_EXP 41
20010: AND
20011: IFFALSE 20114
20013: GO 20015
20015: DISABLE
20016: LD_INT 0
20018: PPUSH
// begin for i := 1 to 5 do
20019: LD_ADDR_VAR 0 1
20023: PUSH
20024: DOUBLE
20025: LD_INT 1
20027: DEC
20028: ST_TO_ADDR
20029: LD_INT 5
20031: PUSH
20032: FOR_TO
20033: IFFALSE 20112
// begin uc_nation := nation_nature ;
20035: LD_ADDR_OWVAR 21
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// uc_side := 0 ;
20043: LD_ADDR_OWVAR 20
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20051: LD_ADDR_OWVAR 29
20055: PUSH
20056: LD_INT 12
20058: PUSH
20059: LD_INT 12
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: ST_TO_ADDR
// hc_agressivity := 20 ;
20066: LD_ADDR_OWVAR 35
20070: PUSH
20071: LD_INT 20
20073: ST_TO_ADDR
// hc_class := class_tiger ;
20074: LD_ADDR_OWVAR 28
20078: PUSH
20079: LD_INT 14
20081: ST_TO_ADDR
// hc_gallery :=  ;
20082: LD_ADDR_OWVAR 33
20086: PUSH
20087: LD_STRING 
20089: ST_TO_ADDR
// hc_name :=  ;
20090: LD_ADDR_OWVAR 26
20094: PUSH
20095: LD_STRING 
20097: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20098: CALL_OW 44
20102: PPUSH
20103: LD_INT 0
20105: PPUSH
20106: CALL_OW 51
// end ;
20110: GO 20032
20112: POP
20113: POP
// end ;
20114: PPOPN 1
20116: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20117: LD_EXP 22
20121: PUSH
20122: LD_EXP 42
20126: AND
20127: IFFALSE 20136
20129: GO 20131
20131: DISABLE
// StreamSibBomb ;
20132: CALL 20137 0 0
20136: END
// export function StreamSibBomb ; var i , x , y ; begin
20137: LD_INT 0
20139: PPUSH
20140: PPUSH
20141: PPUSH
20142: PPUSH
// result := false ;
20143: LD_ADDR_VAR 0 1
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// for i := 1 to 16 do
20151: LD_ADDR_VAR 0 2
20155: PUSH
20156: DOUBLE
20157: LD_INT 1
20159: DEC
20160: ST_TO_ADDR
20161: LD_INT 16
20163: PUSH
20164: FOR_TO
20165: IFFALSE 20364
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20167: LD_ADDR_VAR 0 3
20171: PUSH
20172: LD_INT 10
20174: PUSH
20175: LD_INT 20
20177: PUSH
20178: LD_INT 30
20180: PUSH
20181: LD_INT 40
20183: PUSH
20184: LD_INT 50
20186: PUSH
20187: LD_INT 60
20189: PUSH
20190: LD_INT 70
20192: PUSH
20193: LD_INT 80
20195: PUSH
20196: LD_INT 90
20198: PUSH
20199: LD_INT 100
20201: PUSH
20202: LD_INT 110
20204: PUSH
20205: LD_INT 120
20207: PUSH
20208: LD_INT 130
20210: PUSH
20211: LD_INT 140
20213: PUSH
20214: LD_INT 150
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 1
20236: PPUSH
20237: LD_INT 15
20239: PPUSH
20240: CALL_OW 12
20244: ARRAY
20245: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20246: LD_ADDR_VAR 0 4
20250: PUSH
20251: LD_INT 10
20253: PUSH
20254: LD_INT 20
20256: PUSH
20257: LD_INT 30
20259: PUSH
20260: LD_INT 40
20262: PUSH
20263: LD_INT 50
20265: PUSH
20266: LD_INT 60
20268: PUSH
20269: LD_INT 70
20271: PUSH
20272: LD_INT 80
20274: PUSH
20275: LD_INT 90
20277: PUSH
20278: LD_INT 100
20280: PUSH
20281: LD_INT 110
20283: PUSH
20284: LD_INT 120
20286: PUSH
20287: LD_INT 130
20289: PUSH
20290: LD_INT 140
20292: PUSH
20293: LD_INT 150
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: PPUSH
20316: LD_INT 15
20318: PPUSH
20319: CALL_OW 12
20323: ARRAY
20324: ST_TO_ADDR
// if ValidHex ( x , y ) then
20325: LD_VAR 0 3
20329: PPUSH
20330: LD_VAR 0 4
20334: PPUSH
20335: CALL_OW 488
20339: IFFALSE 20362
// begin result := [ x , y ] ;
20341: LD_ADDR_VAR 0 1
20345: PUSH
20346: LD_VAR 0 3
20350: PUSH
20351: LD_VAR 0 4
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: ST_TO_ADDR
// break ;
20360: GO 20364
// end ; end ;
20362: GO 20164
20364: POP
20365: POP
// if result then
20366: LD_VAR 0 1
20370: IFFALSE 20430
// begin ToLua ( playSibBomb() ) ;
20372: LD_STRING playSibBomb()
20374: PPUSH
20375: CALL_OW 559
// wait ( 0 0$14 ) ;
20379: LD_INT 490
20381: PPUSH
20382: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20386: LD_VAR 0 1
20390: PUSH
20391: LD_INT 1
20393: ARRAY
20394: PPUSH
20395: LD_VAR 0 1
20399: PUSH
20400: LD_INT 2
20402: ARRAY
20403: PPUSH
20404: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20408: LD_VAR 0 1
20412: PUSH
20413: LD_INT 1
20415: ARRAY
20416: PPUSH
20417: LD_VAR 0 1
20421: PUSH
20422: LD_INT 2
20424: ARRAY
20425: PPUSH
20426: CALL_OW 429
// end ; end ;
20430: LD_VAR 0 1
20434: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20435: LD_EXP 22
20439: PUSH
20440: LD_EXP 44
20444: AND
20445: IFFALSE 20457
20447: GO 20449
20449: DISABLE
// YouLost (  ) ;
20450: LD_STRING 
20452: PPUSH
20453: CALL_OW 104
20457: END
// every 0 0$1 trigger StreamModeActive and sFog do
20458: LD_EXP 22
20462: PUSH
20463: LD_EXP 43
20467: AND
20468: IFFALSE 20482
20470: GO 20472
20472: DISABLE
// FogOff ( your_side ) ;
20473: LD_OWVAR 2
20477: PPUSH
20478: CALL_OW 344
20482: END
// every 0 0$1 trigger StreamModeActive and sSun do
20483: LD_EXP 22
20487: PUSH
20488: LD_EXP 45
20492: AND
20493: IFFALSE 20521
20495: GO 20497
20497: DISABLE
// begin solar_recharge_percent := 0 ;
20498: LD_ADDR_OWVAR 79
20502: PUSH
20503: LD_INT 0
20505: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20506: LD_INT 10500
20508: PPUSH
20509: CALL_OW 67
// solar_recharge_percent := 100 ;
20513: LD_ADDR_OWVAR 79
20517: PUSH
20518: LD_INT 100
20520: ST_TO_ADDR
// end ;
20521: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20522: LD_EXP 22
20526: PUSH
20527: LD_EXP 46
20531: AND
20532: IFFALSE 20771
20534: GO 20536
20536: DISABLE
20537: LD_INT 0
20539: PPUSH
20540: PPUSH
20541: PPUSH
// begin tmp := [ ] ;
20542: LD_ADDR_VAR 0 3
20546: PUSH
20547: EMPTY
20548: ST_TO_ADDR
// for i := 1 to 6 do
20549: LD_ADDR_VAR 0 1
20553: PUSH
20554: DOUBLE
20555: LD_INT 1
20557: DEC
20558: ST_TO_ADDR
20559: LD_INT 6
20561: PUSH
20562: FOR_TO
20563: IFFALSE 20668
// begin uc_nation := nation_nature ;
20565: LD_ADDR_OWVAR 21
20569: PUSH
20570: LD_INT 0
20572: ST_TO_ADDR
// uc_side := 0 ;
20573: LD_ADDR_OWVAR 20
20577: PUSH
20578: LD_INT 0
20580: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20581: LD_ADDR_OWVAR 29
20585: PUSH
20586: LD_INT 12
20588: PUSH
20589: LD_INT 12
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: ST_TO_ADDR
// hc_agressivity := 20 ;
20596: LD_ADDR_OWVAR 35
20600: PUSH
20601: LD_INT 20
20603: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20604: LD_ADDR_OWVAR 28
20608: PUSH
20609: LD_INT 17
20611: ST_TO_ADDR
// hc_gallery :=  ;
20612: LD_ADDR_OWVAR 33
20616: PUSH
20617: LD_STRING 
20619: ST_TO_ADDR
// hc_name :=  ;
20620: LD_ADDR_OWVAR 26
20624: PUSH
20625: LD_STRING 
20627: ST_TO_ADDR
// un := CreateHuman ;
20628: LD_ADDR_VAR 0 2
20632: PUSH
20633: CALL_OW 44
20637: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20638: LD_VAR 0 2
20642: PPUSH
20643: LD_INT 1
20645: PPUSH
20646: CALL_OW 51
// tmp := tmp ^ un ;
20650: LD_ADDR_VAR 0 3
20654: PUSH
20655: LD_VAR 0 3
20659: PUSH
20660: LD_VAR 0 2
20664: ADD
20665: ST_TO_ADDR
// end ;
20666: GO 20562
20668: POP
20669: POP
// repeat wait ( 0 0$1 ) ;
20670: LD_INT 35
20672: PPUSH
20673: CALL_OW 67
// for un in tmp do
20677: LD_ADDR_VAR 0 2
20681: PUSH
20682: LD_VAR 0 3
20686: PUSH
20687: FOR_IN
20688: IFFALSE 20762
// begin if IsDead ( un ) then
20690: LD_VAR 0 2
20694: PPUSH
20695: CALL_OW 301
20699: IFFALSE 20719
// begin tmp := tmp diff un ;
20701: LD_ADDR_VAR 0 3
20705: PUSH
20706: LD_VAR 0 3
20710: PUSH
20711: LD_VAR 0 2
20715: DIFF
20716: ST_TO_ADDR
// continue ;
20717: GO 20687
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20719: LD_VAR 0 2
20723: PPUSH
20724: LD_INT 3
20726: PUSH
20727: LD_INT 22
20729: PUSH
20730: LD_INT 0
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PPUSH
20741: CALL_OW 69
20745: PPUSH
20746: LD_VAR 0 2
20750: PPUSH
20751: CALL_OW 74
20755: PPUSH
20756: CALL_OW 115
// end ;
20760: GO 20687
20762: POP
20763: POP
// until not tmp ;
20764: LD_VAR 0 3
20768: NOT
20769: IFFALSE 20670
// end ;
20771: PPOPN 3
20773: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20774: LD_EXP 22
20778: PUSH
20779: LD_EXP 47
20783: AND
20784: IFFALSE 20838
20786: GO 20788
20788: DISABLE
// begin ToLua ( displayTroll(); ) ;
20789: LD_STRING displayTroll();
20791: PPUSH
20792: CALL_OW 559
// wait ( 3 3$00 ) ;
20796: LD_INT 6300
20798: PPUSH
20799: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20803: LD_STRING hideTroll();
20805: PPUSH
20806: CALL_OW 559
// wait ( 1 1$00 ) ;
20810: LD_INT 2100
20812: PPUSH
20813: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20817: LD_STRING displayTroll();
20819: PPUSH
20820: CALL_OW 559
// wait ( 1 1$00 ) ;
20824: LD_INT 2100
20826: PPUSH
20827: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20831: LD_STRING hideTroll();
20833: PPUSH
20834: CALL_OW 559
// end ;
20838: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20839: LD_EXP 22
20843: PUSH
20844: LD_EXP 48
20848: AND
20849: IFFALSE 20912
20851: GO 20853
20853: DISABLE
20854: LD_INT 0
20856: PPUSH
// begin p := 0 ;
20857: LD_ADDR_VAR 0 1
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// repeat game_speed := 1 ;
20865: LD_ADDR_OWVAR 65
20869: PUSH
20870: LD_INT 1
20872: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20873: LD_INT 35
20875: PPUSH
20876: CALL_OW 67
// p := p + 1 ;
20880: LD_ADDR_VAR 0 1
20884: PUSH
20885: LD_VAR 0 1
20889: PUSH
20890: LD_INT 1
20892: PLUS
20893: ST_TO_ADDR
// until p >= 60 ;
20894: LD_VAR 0 1
20898: PUSH
20899: LD_INT 60
20901: GREATEREQUAL
20902: IFFALSE 20865
// game_speed := 4 ;
20904: LD_ADDR_OWVAR 65
20908: PUSH
20909: LD_INT 4
20911: ST_TO_ADDR
// end ;
20912: PPOPN 1
20914: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20915: LD_EXP 22
20919: PUSH
20920: LD_EXP 49
20924: AND
20925: IFFALSE 21071
20927: GO 20929
20929: DISABLE
20930: LD_INT 0
20932: PPUSH
20933: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20934: LD_ADDR_VAR 0 1
20938: PUSH
20939: LD_INT 22
20941: PUSH
20942: LD_OWVAR 2
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 2
20953: PUSH
20954: LD_INT 30
20956: PUSH
20957: LD_INT 0
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 30
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: LIST
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PPUSH
20983: CALL_OW 69
20987: ST_TO_ADDR
// if not depot then
20988: LD_VAR 0 1
20992: NOT
20993: IFFALSE 20997
// exit ;
20995: GO 21071
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20997: LD_ADDR_VAR 0 2
21001: PUSH
21002: LD_VAR 0 1
21006: PUSH
21007: LD_INT 1
21009: PPUSH
21010: LD_VAR 0 1
21014: PPUSH
21015: CALL_OW 12
21019: ARRAY
21020: PPUSH
21021: CALL_OW 274
21025: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21026: LD_VAR 0 2
21030: PPUSH
21031: LD_INT 1
21033: PPUSH
21034: LD_INT 0
21036: PPUSH
21037: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21041: LD_VAR 0 2
21045: PPUSH
21046: LD_INT 2
21048: PPUSH
21049: LD_INT 0
21051: PPUSH
21052: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21056: LD_VAR 0 2
21060: PPUSH
21061: LD_INT 3
21063: PPUSH
21064: LD_INT 0
21066: PPUSH
21067: CALL_OW 277
// end ;
21071: PPOPN 2
21073: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21074: LD_EXP 22
21078: PUSH
21079: LD_EXP 50
21083: AND
21084: IFFALSE 21181
21086: GO 21088
21088: DISABLE
21089: LD_INT 0
21091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21092: LD_ADDR_VAR 0 1
21096: PUSH
21097: LD_INT 22
21099: PUSH
21100: LD_OWVAR 2
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 21
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 3
21121: PUSH
21122: LD_INT 23
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: PPUSH
21141: CALL_OW 69
21145: ST_TO_ADDR
// if not tmp then
21146: LD_VAR 0 1
21150: NOT
21151: IFFALSE 21155
// exit ;
21153: GO 21181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21155: LD_VAR 0 1
21159: PUSH
21160: LD_INT 1
21162: PPUSH
21163: LD_VAR 0 1
21167: PPUSH
21168: CALL_OW 12
21172: ARRAY
21173: PPUSH
21174: LD_INT 200
21176: PPUSH
21177: CALL_OW 234
// end ;
21181: PPOPN 1
21183: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21184: LD_EXP 22
21188: PUSH
21189: LD_EXP 51
21193: AND
21194: IFFALSE 21273
21196: GO 21198
21198: DISABLE
21199: LD_INT 0
21201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21202: LD_ADDR_VAR 0 1
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_OWVAR 2
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 21
21221: PUSH
21222: LD_INT 2
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PPUSH
21233: CALL_OW 69
21237: ST_TO_ADDR
// if not tmp then
21238: LD_VAR 0 1
21242: NOT
21243: IFFALSE 21247
// exit ;
21245: GO 21273
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21247: LD_VAR 0 1
21251: PUSH
21252: LD_INT 1
21254: PPUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL_OW 12
21264: ARRAY
21265: PPUSH
21266: LD_INT 60
21268: PPUSH
21269: CALL_OW 234
// end ;
21273: PPOPN 1
21275: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21276: LD_EXP 22
21280: PUSH
21281: LD_EXP 52
21285: AND
21286: IFFALSE 21385
21288: GO 21290
21290: DISABLE
21291: LD_INT 0
21293: PPUSH
21294: PPUSH
// begin enable ;
21295: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21296: LD_ADDR_VAR 0 1
21300: PUSH
21301: LD_INT 22
21303: PUSH
21304: LD_OWVAR 2
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 61
21315: PUSH
21316: EMPTY
21317: LIST
21318: PUSH
21319: LD_INT 33
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: PPUSH
21334: CALL_OW 69
21338: ST_TO_ADDR
// if not tmp then
21339: LD_VAR 0 1
21343: NOT
21344: IFFALSE 21348
// exit ;
21346: GO 21385
// for i in tmp do
21348: LD_ADDR_VAR 0 2
21352: PUSH
21353: LD_VAR 0 1
21357: PUSH
21358: FOR_IN
21359: IFFALSE 21383
// if IsControledBy ( i ) then
21361: LD_VAR 0 2
21365: PPUSH
21366: CALL_OW 312
21370: IFFALSE 21381
// ComUnlink ( i ) ;
21372: LD_VAR 0 2
21376: PPUSH
21377: CALL_OW 136
21381: GO 21358
21383: POP
21384: POP
// end ;
21385: PPOPN 2
21387: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21388: LD_EXP 22
21392: PUSH
21393: LD_EXP 53
21397: AND
21398: IFFALSE 21538
21400: GO 21402
21402: DISABLE
21403: LD_INT 0
21405: PPUSH
21406: PPUSH
// begin ToLua ( displayPowell(); ) ;
21407: LD_STRING displayPowell();
21409: PPUSH
21410: CALL_OW 559
// uc_side := 0 ;
21414: LD_ADDR_OWVAR 20
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// uc_nation := 2 ;
21422: LD_ADDR_OWVAR 21
21426: PUSH
21427: LD_INT 2
21429: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21430: LD_ADDR_OWVAR 37
21434: PUSH
21435: LD_INT 14
21437: ST_TO_ADDR
// vc_engine := engine_siberite ;
21438: LD_ADDR_OWVAR 39
21442: PUSH
21443: LD_INT 3
21445: ST_TO_ADDR
// vc_control := control_apeman ;
21446: LD_ADDR_OWVAR 38
21450: PUSH
21451: LD_INT 5
21453: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21454: LD_ADDR_OWVAR 40
21458: PUSH
21459: LD_INT 29
21461: ST_TO_ADDR
// un := CreateVehicle ;
21462: LD_ADDR_VAR 0 2
21466: PUSH
21467: CALL_OW 45
21471: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21472: LD_VAR 0 2
21476: PPUSH
21477: LD_INT 1
21479: PPUSH
21480: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21484: LD_INT 35
21486: PPUSH
21487: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21491: LD_VAR 0 2
21495: PPUSH
21496: LD_INT 22
21498: PUSH
21499: LD_OWVAR 2
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PPUSH
21508: CALL_OW 69
21512: PPUSH
21513: LD_VAR 0 2
21517: PPUSH
21518: CALL_OW 74
21522: PPUSH
21523: CALL_OW 115
// until IsDead ( un ) ;
21527: LD_VAR 0 2
21531: PPUSH
21532: CALL_OW 301
21536: IFFALSE 21484
// end ;
21538: PPOPN 2
21540: END
// every 0 0$1 trigger StreamModeActive and sStu do
21541: LD_EXP 22
21545: PUSH
21546: LD_EXP 61
21550: AND
21551: IFFALSE 21567
21553: GO 21555
21555: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21556: LD_STRING displayStucuk();
21558: PPUSH
21559: CALL_OW 559
// ResetFog ;
21563: CALL_OW 335
// end ;
21567: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21568: LD_EXP 22
21572: PUSH
21573: LD_EXP 54
21577: AND
21578: IFFALSE 21719
21580: GO 21582
21582: DISABLE
21583: LD_INT 0
21585: PPUSH
21586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21587: LD_ADDR_VAR 0 2
21591: PUSH
21592: LD_INT 22
21594: PUSH
21595: LD_OWVAR 2
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 21
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PPUSH
21618: CALL_OW 69
21622: ST_TO_ADDR
// if not tmp then
21623: LD_VAR 0 2
21627: NOT
21628: IFFALSE 21632
// exit ;
21630: GO 21719
// un := tmp [ rand ( 1 , tmp ) ] ;
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_VAR 0 2
21641: PUSH
21642: LD_INT 1
21644: PPUSH
21645: LD_VAR 0 2
21649: PPUSH
21650: CALL_OW 12
21654: ARRAY
21655: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21656: LD_VAR 0 1
21660: PPUSH
21661: LD_INT 0
21663: PPUSH
21664: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21668: LD_VAR 0 1
21672: PPUSH
21673: LD_OWVAR 3
21677: PUSH
21678: LD_VAR 0 1
21682: DIFF
21683: PPUSH
21684: LD_VAR 0 1
21688: PPUSH
21689: CALL_OW 74
21693: PPUSH
21694: CALL_OW 115
// wait ( 0 0$20 ) ;
21698: LD_INT 700
21700: PPUSH
21701: CALL_OW 67
// SetSide ( un , your_side ) ;
21705: LD_VAR 0 1
21709: PPUSH
21710: LD_OWVAR 2
21714: PPUSH
21715: CALL_OW 235
// end ;
21719: PPOPN 2
21721: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21722: LD_EXP 22
21726: PUSH
21727: LD_EXP 55
21731: AND
21732: IFFALSE 21838
21734: GO 21736
21736: DISABLE
21737: LD_INT 0
21739: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21740: LD_ADDR_VAR 0 1
21744: PUSH
21745: LD_INT 22
21747: PUSH
21748: LD_OWVAR 2
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 30
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 30
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PPUSH
21789: CALL_OW 69
21793: ST_TO_ADDR
// if not depot then
21794: LD_VAR 0 1
21798: NOT
21799: IFFALSE 21803
// exit ;
21801: GO 21838
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21803: LD_VAR 0 1
21807: PUSH
21808: LD_INT 1
21810: ARRAY
21811: PPUSH
21812: CALL_OW 250
21816: PPUSH
21817: LD_VAR 0 1
21821: PUSH
21822: LD_INT 1
21824: ARRAY
21825: PPUSH
21826: CALL_OW 251
21830: PPUSH
21831: LD_INT 70
21833: PPUSH
21834: CALL_OW 495
// end ;
21838: PPOPN 1
21840: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21841: LD_EXP 22
21845: PUSH
21846: LD_EXP 56
21850: AND
21851: IFFALSE 22062
21853: GO 21855
21855: DISABLE
21856: LD_INT 0
21858: PPUSH
21859: PPUSH
21860: PPUSH
21861: PPUSH
21862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21863: LD_ADDR_VAR 0 5
21867: PUSH
21868: LD_INT 22
21870: PUSH
21871: LD_OWVAR 2
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 21
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PPUSH
21894: CALL_OW 69
21898: ST_TO_ADDR
// if not tmp then
21899: LD_VAR 0 5
21903: NOT
21904: IFFALSE 21908
// exit ;
21906: GO 22062
// for i in tmp do
21908: LD_ADDR_VAR 0 1
21912: PUSH
21913: LD_VAR 0 5
21917: PUSH
21918: FOR_IN
21919: IFFALSE 22060
// begin d := rand ( 0 , 5 ) ;
21921: LD_ADDR_VAR 0 4
21925: PUSH
21926: LD_INT 0
21928: PPUSH
21929: LD_INT 5
21931: PPUSH
21932: CALL_OW 12
21936: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21937: LD_ADDR_VAR 0 2
21941: PUSH
21942: LD_VAR 0 1
21946: PPUSH
21947: CALL_OW 250
21951: PPUSH
21952: LD_VAR 0 4
21956: PPUSH
21957: LD_INT 3
21959: PPUSH
21960: LD_INT 12
21962: PPUSH
21963: CALL_OW 12
21967: PPUSH
21968: CALL_OW 272
21972: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21973: LD_ADDR_VAR 0 3
21977: PUSH
21978: LD_VAR 0 1
21982: PPUSH
21983: CALL_OW 251
21987: PPUSH
21988: LD_VAR 0 4
21992: PPUSH
21993: LD_INT 3
21995: PPUSH
21996: LD_INT 12
21998: PPUSH
21999: CALL_OW 12
22003: PPUSH
22004: CALL_OW 273
22008: ST_TO_ADDR
// if ValidHex ( x , y ) then
22009: LD_VAR 0 2
22013: PPUSH
22014: LD_VAR 0 3
22018: PPUSH
22019: CALL_OW 488
22023: IFFALSE 22058
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22025: LD_VAR 0 1
22029: PPUSH
22030: LD_VAR 0 2
22034: PPUSH
22035: LD_VAR 0 3
22039: PPUSH
22040: LD_INT 3
22042: PPUSH
22043: LD_INT 6
22045: PPUSH
22046: CALL_OW 12
22050: PPUSH
22051: LD_INT 1
22053: PPUSH
22054: CALL_OW 483
// end ;
22058: GO 21918
22060: POP
22061: POP
// end ;
22062: PPOPN 5
22064: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22065: LD_EXP 22
22069: PUSH
22070: LD_EXP 57
22074: AND
22075: IFFALSE 22169
22077: GO 22079
22079: DISABLE
22080: LD_INT 0
22082: PPUSH
22083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22084: LD_ADDR_VAR 0 2
22088: PUSH
22089: LD_INT 22
22091: PUSH
22092: LD_OWVAR 2
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 32
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 21
22113: PUSH
22114: LD_INT 2
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: PPUSH
22126: CALL_OW 69
22130: ST_TO_ADDR
// if not tmp then
22131: LD_VAR 0 2
22135: NOT
22136: IFFALSE 22140
// exit ;
22138: GO 22169
// for i in tmp do
22140: LD_ADDR_VAR 0 1
22144: PUSH
22145: LD_VAR 0 2
22149: PUSH
22150: FOR_IN
22151: IFFALSE 22167
// SetFuel ( i , 0 ) ;
22153: LD_VAR 0 1
22157: PPUSH
22158: LD_INT 0
22160: PPUSH
22161: CALL_OW 240
22165: GO 22150
22167: POP
22168: POP
// end ;
22169: PPOPN 2
22171: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22172: LD_EXP 22
22176: PUSH
22177: LD_EXP 58
22181: AND
22182: IFFALSE 22248
22184: GO 22186
22186: DISABLE
22187: LD_INT 0
22189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22190: LD_ADDR_VAR 0 1
22194: PUSH
22195: LD_INT 22
22197: PUSH
22198: LD_OWVAR 2
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 30
22209: PUSH
22210: LD_INT 29
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PPUSH
22221: CALL_OW 69
22225: ST_TO_ADDR
// if not tmp then
22226: LD_VAR 0 1
22230: NOT
22231: IFFALSE 22235
// exit ;
22233: GO 22248
// DestroyUnit ( tmp [ 1 ] ) ;
22235: LD_VAR 0 1
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: CALL_OW 65
// end ;
22248: PPOPN 1
22250: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22251: LD_EXP 22
22255: PUSH
22256: LD_EXP 60
22260: AND
22261: IFFALSE 22390
22263: GO 22265
22265: DISABLE
22266: LD_INT 0
22268: PPUSH
// begin uc_side := 0 ;
22269: LD_ADDR_OWVAR 20
22273: PUSH
22274: LD_INT 0
22276: ST_TO_ADDR
// uc_nation := nation_arabian ;
22277: LD_ADDR_OWVAR 21
22281: PUSH
22282: LD_INT 2
22284: ST_TO_ADDR
// hc_gallery :=  ;
22285: LD_ADDR_OWVAR 33
22289: PUSH
22290: LD_STRING 
22292: ST_TO_ADDR
// hc_name :=  ;
22293: LD_ADDR_OWVAR 26
22297: PUSH
22298: LD_STRING 
22300: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22301: LD_INT 1
22303: PPUSH
22304: LD_INT 11
22306: PPUSH
22307: LD_INT 10
22309: PPUSH
22310: CALL_OW 380
// un := CreateHuman ;
22314: LD_ADDR_VAR 0 1
22318: PUSH
22319: CALL_OW 44
22323: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22324: LD_VAR 0 1
22328: PPUSH
22329: LD_INT 1
22331: PPUSH
22332: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22336: LD_INT 35
22338: PPUSH
22339: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22343: LD_VAR 0 1
22347: PPUSH
22348: LD_INT 22
22350: PUSH
22351: LD_OWVAR 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PPUSH
22360: CALL_OW 69
22364: PPUSH
22365: LD_VAR 0 1
22369: PPUSH
22370: CALL_OW 74
22374: PPUSH
22375: CALL_OW 115
// until IsDead ( un ) ;
22379: LD_VAR 0 1
22383: PPUSH
22384: CALL_OW 301
22388: IFFALSE 22336
// end ;
22390: PPOPN 1
22392: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22393: LD_EXP 22
22397: PUSH
22398: LD_EXP 62
22402: AND
22403: IFFALSE 22415
22405: GO 22407
22407: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22408: LD_STRING earthquake(getX(game), 0, 32)
22410: PPUSH
22411: CALL_OW 559
22415: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22416: LD_EXP 22
22420: PUSH
22421: LD_EXP 63
22425: AND
22426: IFFALSE 22517
22428: GO 22430
22430: DISABLE
22431: LD_INT 0
22433: PPUSH
// begin enable ;
22434: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22435: LD_ADDR_VAR 0 1
22439: PUSH
22440: LD_INT 22
22442: PUSH
22443: LD_OWVAR 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 21
22454: PUSH
22455: LD_INT 2
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 33
22464: PUSH
22465: LD_INT 3
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 69
22481: ST_TO_ADDR
// if not tmp then
22482: LD_VAR 0 1
22486: NOT
22487: IFFALSE 22491
// exit ;
22489: GO 22517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22491: LD_VAR 0 1
22495: PUSH
22496: LD_INT 1
22498: PPUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 12
22508: ARRAY
22509: PPUSH
22510: LD_INT 1
22512: PPUSH
22513: CALL_OW 234
// end ;
22517: PPOPN 1
22519: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22520: LD_EXP 22
22524: PUSH
22525: LD_EXP 64
22529: AND
22530: IFFALSE 22671
22532: GO 22534
22534: DISABLE
22535: LD_INT 0
22537: PPUSH
22538: PPUSH
22539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22540: LD_ADDR_VAR 0 3
22544: PUSH
22545: LD_INT 22
22547: PUSH
22548: LD_OWVAR 2
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 25
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PPUSH
22571: CALL_OW 69
22575: ST_TO_ADDR
// if not tmp then
22576: LD_VAR 0 3
22580: NOT
22581: IFFALSE 22585
// exit ;
22583: GO 22671
// un := tmp [ rand ( 1 , tmp ) ] ;
22585: LD_ADDR_VAR 0 2
22589: PUSH
22590: LD_VAR 0 3
22594: PUSH
22595: LD_INT 1
22597: PPUSH
22598: LD_VAR 0 3
22602: PPUSH
22603: CALL_OW 12
22607: ARRAY
22608: ST_TO_ADDR
// if Crawls ( un ) then
22609: LD_VAR 0 2
22613: PPUSH
22614: CALL_OW 318
22618: IFFALSE 22629
// ComWalk ( un ) ;
22620: LD_VAR 0 2
22624: PPUSH
22625: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22629: LD_VAR 0 2
22633: PPUSH
22634: LD_INT 9
22636: PPUSH
22637: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22641: LD_INT 28
22643: PPUSH
22644: LD_OWVAR 2
22648: PPUSH
22649: LD_INT 2
22651: PPUSH
22652: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22656: LD_INT 29
22658: PPUSH
22659: LD_OWVAR 2
22663: PPUSH
22664: LD_INT 2
22666: PPUSH
22667: CALL_OW 322
// end ;
22671: PPOPN 3
22673: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22674: LD_EXP 22
22678: PUSH
22679: LD_EXP 65
22683: AND
22684: IFFALSE 22795
22686: GO 22688
22688: DISABLE
22689: LD_INT 0
22691: PPUSH
22692: PPUSH
22693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22694: LD_ADDR_VAR 0 3
22698: PUSH
22699: LD_INT 22
22701: PUSH
22702: LD_OWVAR 2
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 25
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PPUSH
22725: CALL_OW 69
22729: ST_TO_ADDR
// if not tmp then
22730: LD_VAR 0 3
22734: NOT
22735: IFFALSE 22739
// exit ;
22737: GO 22795
// un := tmp [ rand ( 1 , tmp ) ] ;
22739: LD_ADDR_VAR 0 2
22743: PUSH
22744: LD_VAR 0 3
22748: PUSH
22749: LD_INT 1
22751: PPUSH
22752: LD_VAR 0 3
22756: PPUSH
22757: CALL_OW 12
22761: ARRAY
22762: ST_TO_ADDR
// if Crawls ( un ) then
22763: LD_VAR 0 2
22767: PPUSH
22768: CALL_OW 318
22772: IFFALSE 22783
// ComWalk ( un ) ;
22774: LD_VAR 0 2
22778: PPUSH
22779: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22783: LD_VAR 0 2
22787: PPUSH
22788: LD_INT 8
22790: PPUSH
22791: CALL_OW 336
// end ;
22795: PPOPN 3
22797: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22798: LD_EXP 22
22802: PUSH
22803: LD_EXP 66
22807: AND
22808: IFFALSE 22952
22810: GO 22812
22812: DISABLE
22813: LD_INT 0
22815: PPUSH
22816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22817: LD_ADDR_VAR 0 2
22821: PUSH
22822: LD_INT 22
22824: PUSH
22825: LD_OWVAR 2
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 21
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: LD_INT 34
22849: PUSH
22850: LD_INT 12
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 34
22859: PUSH
22860: LD_INT 51
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 34
22869: PUSH
22870: LD_INT 32
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: PPUSH
22888: CALL_OW 69
22892: ST_TO_ADDR
// if not tmp then
22893: LD_VAR 0 2
22897: NOT
22898: IFFALSE 22902
// exit ;
22900: GO 22952
// for i in tmp do
22902: LD_ADDR_VAR 0 1
22906: PUSH
22907: LD_VAR 0 2
22911: PUSH
22912: FOR_IN
22913: IFFALSE 22950
// if GetCargo ( i , mat_artifact ) = 0 then
22915: LD_VAR 0 1
22919: PPUSH
22920: LD_INT 4
22922: PPUSH
22923: CALL_OW 289
22927: PUSH
22928: LD_INT 0
22930: EQUAL
22931: IFFALSE 22948
// SetCargo ( i , mat_siberit , 100 ) ;
22933: LD_VAR 0 1
22937: PPUSH
22938: LD_INT 3
22940: PPUSH
22941: LD_INT 100
22943: PPUSH
22944: CALL_OW 290
22948: GO 22912
22950: POP
22951: POP
// end ;
22952: PPOPN 2
22954: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22955: LD_EXP 22
22959: PUSH
22960: LD_EXP 67
22964: AND
22965: IFFALSE 23148
22967: GO 22969
22969: DISABLE
22970: LD_INT 0
22972: PPUSH
22973: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22974: LD_ADDR_VAR 0 2
22978: PUSH
22979: LD_INT 22
22981: PUSH
22982: LD_OWVAR 2
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PPUSH
22991: CALL_OW 69
22995: ST_TO_ADDR
// if not tmp then
22996: LD_VAR 0 2
23000: NOT
23001: IFFALSE 23005
// exit ;
23003: GO 23148
// for i := 1 to 2 do
23005: LD_ADDR_VAR 0 1
23009: PUSH
23010: DOUBLE
23011: LD_INT 1
23013: DEC
23014: ST_TO_ADDR
23015: LD_INT 2
23017: PUSH
23018: FOR_TO
23019: IFFALSE 23146
// begin uc_side := your_side ;
23021: LD_ADDR_OWVAR 20
23025: PUSH
23026: LD_OWVAR 2
23030: ST_TO_ADDR
// uc_nation := nation_american ;
23031: LD_ADDR_OWVAR 21
23035: PUSH
23036: LD_INT 1
23038: ST_TO_ADDR
// vc_chassis := us_morphling ;
23039: LD_ADDR_OWVAR 37
23043: PUSH
23044: LD_INT 5
23046: ST_TO_ADDR
// vc_engine := engine_siberite ;
23047: LD_ADDR_OWVAR 39
23051: PUSH
23052: LD_INT 3
23054: ST_TO_ADDR
// vc_control := control_computer ;
23055: LD_ADDR_OWVAR 38
23059: PUSH
23060: LD_INT 3
23062: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23063: LD_ADDR_OWVAR 40
23067: PUSH
23068: LD_INT 10
23070: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23071: LD_VAR 0 2
23075: PUSH
23076: LD_INT 1
23078: ARRAY
23079: PPUSH
23080: CALL_OW 310
23084: NOT
23085: IFFALSE 23132
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23087: CALL_OW 45
23091: PPUSH
23092: LD_VAR 0 2
23096: PUSH
23097: LD_INT 1
23099: ARRAY
23100: PPUSH
23101: CALL_OW 250
23105: PPUSH
23106: LD_VAR 0 2
23110: PUSH
23111: LD_INT 1
23113: ARRAY
23114: PPUSH
23115: CALL_OW 251
23119: PPUSH
23120: LD_INT 12
23122: PPUSH
23123: LD_INT 1
23125: PPUSH
23126: CALL_OW 50
23130: GO 23144
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23132: CALL_OW 45
23136: PPUSH
23137: LD_INT 1
23139: PPUSH
23140: CALL_OW 51
// end ;
23144: GO 23018
23146: POP
23147: POP
// end ;
23148: PPOPN 2
23150: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23151: LD_EXP 22
23155: PUSH
23156: LD_EXP 68
23160: AND
23161: IFFALSE 23383
23163: GO 23165
23165: DISABLE
23166: LD_INT 0
23168: PPUSH
23169: PPUSH
23170: PPUSH
23171: PPUSH
23172: PPUSH
23173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23174: LD_ADDR_VAR 0 6
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_OWVAR 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: LD_INT 23
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: ST_TO_ADDR
// if not tmp then
23228: LD_VAR 0 6
23232: NOT
23233: IFFALSE 23237
// exit ;
23235: GO 23383
// s1 := rand ( 1 , 4 ) ;
23237: LD_ADDR_VAR 0 2
23241: PUSH
23242: LD_INT 1
23244: PPUSH
23245: LD_INT 4
23247: PPUSH
23248: CALL_OW 12
23252: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23253: LD_ADDR_VAR 0 4
23257: PUSH
23258: LD_VAR 0 6
23262: PUSH
23263: LD_INT 1
23265: ARRAY
23266: PPUSH
23267: LD_VAR 0 2
23271: PPUSH
23272: CALL_OW 259
23276: ST_TO_ADDR
// if s1 = 1 then
23277: LD_VAR 0 2
23281: PUSH
23282: LD_INT 1
23284: EQUAL
23285: IFFALSE 23305
// s2 := rand ( 2 , 4 ) else
23287: LD_ADDR_VAR 0 3
23291: PUSH
23292: LD_INT 2
23294: PPUSH
23295: LD_INT 4
23297: PPUSH
23298: CALL_OW 12
23302: ST_TO_ADDR
23303: GO 23313
// s2 := 1 ;
23305: LD_ADDR_VAR 0 3
23309: PUSH
23310: LD_INT 1
23312: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23313: LD_ADDR_VAR 0 5
23317: PUSH
23318: LD_VAR 0 6
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PPUSH
23327: LD_VAR 0 3
23331: PPUSH
23332: CALL_OW 259
23336: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23337: LD_VAR 0 6
23341: PUSH
23342: LD_INT 1
23344: ARRAY
23345: PPUSH
23346: LD_VAR 0 2
23350: PPUSH
23351: LD_VAR 0 5
23355: PPUSH
23356: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23360: LD_VAR 0 6
23364: PUSH
23365: LD_INT 1
23367: ARRAY
23368: PPUSH
23369: LD_VAR 0 3
23373: PPUSH
23374: LD_VAR 0 4
23378: PPUSH
23379: CALL_OW 237
// end ;
23383: PPOPN 6
23385: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23386: LD_EXP 22
23390: PUSH
23391: LD_EXP 69
23395: AND
23396: IFFALSE 23475
23398: GO 23400
23400: DISABLE
23401: LD_INT 0
23403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23404: LD_ADDR_VAR 0 1
23408: PUSH
23409: LD_INT 22
23411: PUSH
23412: LD_OWVAR 2
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 30
23423: PUSH
23424: LD_INT 3
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PPUSH
23435: CALL_OW 69
23439: ST_TO_ADDR
// if not tmp then
23440: LD_VAR 0 1
23444: NOT
23445: IFFALSE 23449
// exit ;
23447: GO 23475
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23449: LD_VAR 0 1
23453: PUSH
23454: LD_INT 1
23456: PPUSH
23457: LD_VAR 0 1
23461: PPUSH
23462: CALL_OW 12
23466: ARRAY
23467: PPUSH
23468: LD_INT 1
23470: PPUSH
23471: CALL_OW 234
// end ;
23475: PPOPN 1
23477: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23478: LD_EXP 22
23482: PUSH
23483: LD_EXP 70
23487: AND
23488: IFFALSE 23600
23490: GO 23492
23492: DISABLE
23493: LD_INT 0
23495: PPUSH
23496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23497: LD_ADDR_VAR 0 2
23501: PUSH
23502: LD_INT 22
23504: PUSH
23505: LD_OWVAR 2
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: LD_INT 30
23519: PUSH
23520: LD_INT 27
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 30
23529: PUSH
23530: LD_INT 26
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 30
23539: PUSH
23540: LD_INT 28
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PPUSH
23557: CALL_OW 69
23561: ST_TO_ADDR
// if not tmp then
23562: LD_VAR 0 2
23566: NOT
23567: IFFALSE 23571
// exit ;
23569: GO 23600
// for i in tmp do
23571: LD_ADDR_VAR 0 1
23575: PUSH
23576: LD_VAR 0 2
23580: PUSH
23581: FOR_IN
23582: IFFALSE 23598
// SetLives ( i , 1 ) ;
23584: LD_VAR 0 1
23588: PPUSH
23589: LD_INT 1
23591: PPUSH
23592: CALL_OW 234
23596: GO 23581
23598: POP
23599: POP
// end ;
23600: PPOPN 2
23602: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23603: LD_EXP 22
23607: PUSH
23608: LD_EXP 71
23612: AND
23613: IFFALSE 23900
23615: GO 23617
23617: DISABLE
23618: LD_INT 0
23620: PPUSH
23621: PPUSH
23622: PPUSH
// begin i := rand ( 1 , 7 ) ;
23623: LD_ADDR_VAR 0 1
23627: PUSH
23628: LD_INT 1
23630: PPUSH
23631: LD_INT 7
23633: PPUSH
23634: CALL_OW 12
23638: ST_TO_ADDR
// case i of 1 :
23639: LD_VAR 0 1
23643: PUSH
23644: LD_INT 1
23646: DOUBLE
23647: EQUAL
23648: IFTRUE 23652
23650: GO 23662
23652: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23653: LD_STRING earthquake(getX(game), 0, 32)
23655: PPUSH
23656: CALL_OW 559
23660: GO 23900
23662: LD_INT 2
23664: DOUBLE
23665: EQUAL
23666: IFTRUE 23670
23668: GO 23684
23670: POP
// begin ToLua ( displayStucuk(); ) ;
23671: LD_STRING displayStucuk();
23673: PPUSH
23674: CALL_OW 559
// ResetFog ;
23678: CALL_OW 335
// end ; 3 :
23682: GO 23900
23684: LD_INT 3
23686: DOUBLE
23687: EQUAL
23688: IFTRUE 23692
23690: GO 23796
23692: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23693: LD_ADDR_VAR 0 2
23697: PUSH
23698: LD_INT 22
23700: PUSH
23701: LD_OWVAR 2
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 25
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PPUSH
23724: CALL_OW 69
23728: ST_TO_ADDR
// if not tmp then
23729: LD_VAR 0 2
23733: NOT
23734: IFFALSE 23738
// exit ;
23736: GO 23900
// un := tmp [ rand ( 1 , tmp ) ] ;
23738: LD_ADDR_VAR 0 3
23742: PUSH
23743: LD_VAR 0 2
23747: PUSH
23748: LD_INT 1
23750: PPUSH
23751: LD_VAR 0 2
23755: PPUSH
23756: CALL_OW 12
23760: ARRAY
23761: ST_TO_ADDR
// if Crawls ( un ) then
23762: LD_VAR 0 3
23766: PPUSH
23767: CALL_OW 318
23771: IFFALSE 23782
// ComWalk ( un ) ;
23773: LD_VAR 0 3
23777: PPUSH
23778: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23782: LD_VAR 0 3
23786: PPUSH
23787: LD_INT 8
23789: PPUSH
23790: CALL_OW 336
// end ; 4 :
23794: GO 23900
23796: LD_INT 4
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23878
23804: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_INT 22
23812: PUSH
23813: LD_OWVAR 2
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 30
23824: PUSH
23825: LD_INT 29
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PPUSH
23836: CALL_OW 69
23840: ST_TO_ADDR
// if not tmp then
23841: LD_VAR 0 2
23845: NOT
23846: IFFALSE 23850
// exit ;
23848: GO 23900
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23850: LD_VAR 0 2
23854: PUSH
23855: LD_INT 1
23857: ARRAY
23858: PPUSH
23859: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23863: LD_VAR 0 2
23867: PUSH
23868: LD_INT 1
23870: ARRAY
23871: PPUSH
23872: CALL_OW 65
// end ; 5 .. 7 :
23876: GO 23900
23878: LD_INT 5
23880: DOUBLE
23881: GREATEREQUAL
23882: IFFALSE 23890
23884: LD_INT 7
23886: DOUBLE
23887: LESSEQUAL
23888: IFTRUE 23892
23890: GO 23899
23892: POP
// StreamSibBomb ; end ;
23893: CALL 20137 0 0
23897: GO 23900
23899: POP
// end ;
23900: PPOPN 3
23902: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23903: LD_EXP 22
23907: PUSH
23908: LD_EXP 72
23912: AND
23913: IFFALSE 24069
23915: GO 23917
23917: DISABLE
23918: LD_INT 0
23920: PPUSH
23921: PPUSH
23922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23923: LD_ADDR_VAR 0 2
23927: PUSH
23928: LD_INT 81
23930: PUSH
23931: LD_OWVAR 2
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 2
23942: PUSH
23943: LD_INT 21
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 21
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PPUSH
23972: CALL_OW 69
23976: ST_TO_ADDR
// if not tmp then
23977: LD_VAR 0 2
23981: NOT
23982: IFFALSE 23986
// exit ;
23984: GO 24069
// p := 0 ;
23986: LD_ADDR_VAR 0 3
23990: PUSH
23991: LD_INT 0
23993: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23994: LD_INT 35
23996: PPUSH
23997: CALL_OW 67
// p := p + 1 ;
24001: LD_ADDR_VAR 0 3
24005: PUSH
24006: LD_VAR 0 3
24010: PUSH
24011: LD_INT 1
24013: PLUS
24014: ST_TO_ADDR
// for i in tmp do
24015: LD_ADDR_VAR 0 1
24019: PUSH
24020: LD_VAR 0 2
24024: PUSH
24025: FOR_IN
24026: IFFALSE 24057
// if GetLives ( i ) < 1000 then
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 256
24037: PUSH
24038: LD_INT 1000
24040: LESS
24041: IFFALSE 24055
// SetLives ( i , 1000 ) ;
24043: LD_VAR 0 1
24047: PPUSH
24048: LD_INT 1000
24050: PPUSH
24051: CALL_OW 234
24055: GO 24025
24057: POP
24058: POP
// until p > 20 ;
24059: LD_VAR 0 3
24063: PUSH
24064: LD_INT 20
24066: GREATER
24067: IFFALSE 23994
// end ;
24069: PPOPN 3
24071: END
// every 0 0$1 trigger StreamModeActive and sTime do
24072: LD_EXP 22
24076: PUSH
24077: LD_EXP 73
24081: AND
24082: IFFALSE 24117
24084: GO 24086
24086: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24087: LD_INT 28
24089: PPUSH
24090: LD_OWVAR 2
24094: PPUSH
24095: LD_INT 2
24097: PPUSH
24098: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24102: LD_INT 30
24104: PPUSH
24105: LD_OWVAR 2
24109: PPUSH
24110: LD_INT 2
24112: PPUSH
24113: CALL_OW 322
// end ;
24117: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24118: LD_EXP 22
24122: PUSH
24123: LD_EXP 74
24127: AND
24128: IFFALSE 24249
24130: GO 24132
24132: DISABLE
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: LD_INT 22
24144: PUSH
24145: LD_OWVAR 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 21
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 3
24166: PUSH
24167: LD_INT 23
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: LIST
24185: PPUSH
24186: CALL_OW 69
24190: ST_TO_ADDR
// if not tmp then
24191: LD_VAR 0 2
24195: NOT
24196: IFFALSE 24200
// exit ;
24198: GO 24249
// for i in tmp do
24200: LD_ADDR_VAR 0 1
24204: PUSH
24205: LD_VAR 0 2
24209: PUSH
24210: FOR_IN
24211: IFFALSE 24247
// begin if Crawls ( i ) then
24213: LD_VAR 0 1
24217: PPUSH
24218: CALL_OW 318
24222: IFFALSE 24233
// ComWalk ( i ) ;
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL_OW 138
// SetClass ( i , 2 ) ;
24233: LD_VAR 0 1
24237: PPUSH
24238: LD_INT 2
24240: PPUSH
24241: CALL_OW 336
// end ;
24245: GO 24210
24247: POP
24248: POP
// end ;
24249: PPOPN 2
24251: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24252: LD_EXP 22
24256: PUSH
24257: LD_EXP 75
24261: AND
24262: IFFALSE 24550
24264: GO 24266
24266: DISABLE
24267: LD_INT 0
24269: PPUSH
24270: PPUSH
24271: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24272: LD_OWVAR 2
24276: PPUSH
24277: LD_INT 9
24279: PPUSH
24280: LD_INT 1
24282: PPUSH
24283: LD_INT 1
24285: PPUSH
24286: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24290: LD_INT 9
24292: PPUSH
24293: LD_OWVAR 2
24297: PPUSH
24298: CALL_OW 343
// uc_side := 9 ;
24302: LD_ADDR_OWVAR 20
24306: PUSH
24307: LD_INT 9
24309: ST_TO_ADDR
// uc_nation := 2 ;
24310: LD_ADDR_OWVAR 21
24314: PUSH
24315: LD_INT 2
24317: ST_TO_ADDR
// hc_name := Dark Warrior ;
24318: LD_ADDR_OWVAR 26
24322: PUSH
24323: LD_STRING Dark Warrior
24325: ST_TO_ADDR
// hc_gallery :=  ;
24326: LD_ADDR_OWVAR 33
24330: PUSH
24331: LD_STRING 
24333: ST_TO_ADDR
// hc_noskilllimit := true ;
24334: LD_ADDR_OWVAR 76
24338: PUSH
24339: LD_INT 1
24341: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24342: LD_ADDR_OWVAR 31
24346: PUSH
24347: LD_INT 30
24349: PUSH
24350: LD_INT 30
24352: PUSH
24353: LD_INT 30
24355: PUSH
24356: LD_INT 30
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: ST_TO_ADDR
// un := CreateHuman ;
24365: LD_ADDR_VAR 0 3
24369: PUSH
24370: CALL_OW 44
24374: ST_TO_ADDR
// hc_noskilllimit := false ;
24375: LD_ADDR_OWVAR 76
24379: PUSH
24380: LD_INT 0
24382: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24383: LD_VAR 0 3
24387: PPUSH
24388: LD_INT 1
24390: PPUSH
24391: CALL_OW 51
// ToLua ( playRanger() ) ;
24395: LD_STRING playRanger()
24397: PPUSH
24398: CALL_OW 559
// p := 0 ;
24402: LD_ADDR_VAR 0 2
24406: PUSH
24407: LD_INT 0
24409: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24410: LD_INT 35
24412: PPUSH
24413: CALL_OW 67
// p := p + 1 ;
24417: LD_ADDR_VAR 0 2
24421: PUSH
24422: LD_VAR 0 2
24426: PUSH
24427: LD_INT 1
24429: PLUS
24430: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24431: LD_VAR 0 3
24435: PPUSH
24436: CALL_OW 256
24440: PUSH
24441: LD_INT 1000
24443: LESS
24444: IFFALSE 24458
// SetLives ( un , 1000 ) ;
24446: LD_VAR 0 3
24450: PPUSH
24451: LD_INT 1000
24453: PPUSH
24454: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24458: LD_VAR 0 3
24462: PPUSH
24463: LD_INT 81
24465: PUSH
24466: LD_OWVAR 2
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 91
24477: PUSH
24478: LD_VAR 0 3
24482: PUSH
24483: LD_INT 30
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 69
24499: PPUSH
24500: LD_VAR 0 3
24504: PPUSH
24505: CALL_OW 74
24509: PPUSH
24510: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24514: LD_VAR 0 2
24518: PUSH
24519: LD_INT 80
24521: GREATER
24522: PUSH
24523: LD_VAR 0 3
24527: PPUSH
24528: CALL_OW 301
24532: OR
24533: IFFALSE 24410
// if un then
24535: LD_VAR 0 3
24539: IFFALSE 24550
// RemoveUnit ( un ) ;
24541: LD_VAR 0 3
24545: PPUSH
24546: CALL_OW 64
// end ;
24550: PPOPN 3
24552: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24553: LD_EXP 76
24557: IFFALSE 24673
24559: GO 24561
24561: DISABLE
24562: LD_INT 0
24564: PPUSH
24565: PPUSH
24566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24567: LD_ADDR_VAR 0 2
24571: PUSH
24572: LD_INT 81
24574: PUSH
24575: LD_OWVAR 2
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 21
24586: PUSH
24587: LD_INT 1
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PPUSH
24598: CALL_OW 69
24602: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24603: LD_STRING playComputer()
24605: PPUSH
24606: CALL_OW 559
// if not tmp then
24610: LD_VAR 0 2
24614: NOT
24615: IFFALSE 24619
// exit ;
24617: GO 24673
// for i in tmp do
24619: LD_ADDR_VAR 0 1
24623: PUSH
24624: LD_VAR 0 2
24628: PUSH
24629: FOR_IN
24630: IFFALSE 24671
// for j := 1 to 4 do
24632: LD_ADDR_VAR 0 3
24636: PUSH
24637: DOUBLE
24638: LD_INT 1
24640: DEC
24641: ST_TO_ADDR
24642: LD_INT 4
24644: PUSH
24645: FOR_TO
24646: IFFALSE 24667
// SetSkill ( i , j , 10 ) ;
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_VAR 0 3
24657: PPUSH
24658: LD_INT 10
24660: PPUSH
24661: CALL_OW 237
24665: GO 24645
24667: POP
24668: POP
24669: GO 24629
24671: POP
24672: POP
// end ;
24673: PPOPN 3
24675: END
// every 0 0$1 trigger s30 do var i , tmp ;
24676: LD_EXP 77
24680: IFFALSE 24749
24682: GO 24684
24684: DISABLE
24685: LD_INT 0
24687: PPUSH
24688: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24689: LD_ADDR_VAR 0 2
24693: PUSH
24694: LD_INT 22
24696: PUSH
24697: LD_OWVAR 2
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PPUSH
24706: CALL_OW 69
24710: ST_TO_ADDR
// if not tmp then
24711: LD_VAR 0 2
24715: NOT
24716: IFFALSE 24720
// exit ;
24718: GO 24749
// for i in tmp do
24720: LD_ADDR_VAR 0 1
24724: PUSH
24725: LD_VAR 0 2
24729: PUSH
24730: FOR_IN
24731: IFFALSE 24747
// SetLives ( i , 300 ) ;
24733: LD_VAR 0 1
24737: PPUSH
24738: LD_INT 300
24740: PPUSH
24741: CALL_OW 234
24745: GO 24730
24747: POP
24748: POP
// end ;
24749: PPOPN 2
24751: END
// every 0 0$1 trigger s60 do var i , tmp ;
24752: LD_EXP 78
24756: IFFALSE 24825
24758: GO 24760
24760: DISABLE
24761: LD_INT 0
24763: PPUSH
24764: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24765: LD_ADDR_VAR 0 2
24769: PUSH
24770: LD_INT 22
24772: PUSH
24773: LD_OWVAR 2
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PPUSH
24782: CALL_OW 69
24786: ST_TO_ADDR
// if not tmp then
24787: LD_VAR 0 2
24791: NOT
24792: IFFALSE 24796
// exit ;
24794: GO 24825
// for i in tmp do
24796: LD_ADDR_VAR 0 1
24800: PUSH
24801: LD_VAR 0 2
24805: PUSH
24806: FOR_IN
24807: IFFALSE 24823
// SetLives ( i , 600 ) ;
24809: LD_VAR 0 1
24813: PPUSH
24814: LD_INT 600
24816: PPUSH
24817: CALL_OW 234
24821: GO 24806
24823: POP
24824: POP
// end ;
24825: PPOPN 2
24827: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24828: LD_INT 0
24830: PPUSH
// case cmd of 301 :
24831: LD_VAR 0 1
24835: PUSH
24836: LD_INT 301
24838: DOUBLE
24839: EQUAL
24840: IFTRUE 24844
24842: GO 24876
24844: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24845: LD_VAR 0 6
24849: PPUSH
24850: LD_VAR 0 7
24854: PPUSH
24855: LD_VAR 0 8
24859: PPUSH
24860: LD_VAR 0 4
24864: PPUSH
24865: LD_VAR 0 5
24869: PPUSH
24870: CALL 26085 0 5
24874: GO 24997
24876: LD_INT 302
24878: DOUBLE
24879: EQUAL
24880: IFTRUE 24884
24882: GO 24921
24884: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24885: LD_VAR 0 6
24889: PPUSH
24890: LD_VAR 0 7
24894: PPUSH
24895: LD_VAR 0 8
24899: PPUSH
24900: LD_VAR 0 9
24904: PPUSH
24905: LD_VAR 0 4
24909: PPUSH
24910: LD_VAR 0 5
24914: PPUSH
24915: CALL 26176 0 6
24919: GO 24997
24921: LD_INT 303
24923: DOUBLE
24924: EQUAL
24925: IFTRUE 24929
24927: GO 24966
24929: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24930: LD_VAR 0 6
24934: PPUSH
24935: LD_VAR 0 7
24939: PPUSH
24940: LD_VAR 0 8
24944: PPUSH
24945: LD_VAR 0 9
24949: PPUSH
24950: LD_VAR 0 4
24954: PPUSH
24955: LD_VAR 0 5
24959: PPUSH
24960: CALL 25002 0 6
24964: GO 24997
24966: LD_INT 304
24968: DOUBLE
24969: EQUAL
24970: IFTRUE 24974
24972: GO 24996
24974: POP
// hHackTeleport ( unit , x , y ) ; end ;
24975: LD_VAR 0 2
24979: PPUSH
24980: LD_VAR 0 4
24984: PPUSH
24985: LD_VAR 0 5
24989: PPUSH
24990: CALL 26769 0 3
24994: GO 24997
24996: POP
// end ;
24997: LD_VAR 0 12
25001: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25002: LD_INT 0
25004: PPUSH
25005: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25006: LD_VAR 0 1
25010: PUSH
25011: LD_INT 1
25013: LESS
25014: PUSH
25015: LD_VAR 0 1
25019: PUSH
25020: LD_INT 3
25022: GREATER
25023: OR
25024: PUSH
25025: LD_VAR 0 5
25029: PPUSH
25030: LD_VAR 0 6
25034: PPUSH
25035: CALL_OW 428
25039: OR
25040: IFFALSE 25044
// exit ;
25042: GO 25772
// uc_side := your_side ;
25044: LD_ADDR_OWVAR 20
25048: PUSH
25049: LD_OWVAR 2
25053: ST_TO_ADDR
// uc_nation := nation ;
25054: LD_ADDR_OWVAR 21
25058: PUSH
25059: LD_VAR 0 1
25063: ST_TO_ADDR
// bc_level = 1 ;
25064: LD_ADDR_OWVAR 43
25068: PUSH
25069: LD_INT 1
25071: ST_TO_ADDR
// case btype of 1 :
25072: LD_VAR 0 2
25076: PUSH
25077: LD_INT 1
25079: DOUBLE
25080: EQUAL
25081: IFTRUE 25085
25083: GO 25096
25085: POP
// bc_type := b_depot ; 2 :
25086: LD_ADDR_OWVAR 42
25090: PUSH
25091: LD_INT 0
25093: ST_TO_ADDR
25094: GO 25716
25096: LD_INT 2
25098: DOUBLE
25099: EQUAL
25100: IFTRUE 25104
25102: GO 25115
25104: POP
// bc_type := b_warehouse ; 3 :
25105: LD_ADDR_OWVAR 42
25109: PUSH
25110: LD_INT 1
25112: ST_TO_ADDR
25113: GO 25716
25115: LD_INT 3
25117: DOUBLE
25118: EQUAL
25119: IFTRUE 25123
25121: GO 25134
25123: POP
// bc_type := b_lab ; 4 .. 9 :
25124: LD_ADDR_OWVAR 42
25128: PUSH
25129: LD_INT 6
25131: ST_TO_ADDR
25132: GO 25716
25134: LD_INT 4
25136: DOUBLE
25137: GREATEREQUAL
25138: IFFALSE 25146
25140: LD_INT 9
25142: DOUBLE
25143: LESSEQUAL
25144: IFTRUE 25148
25146: GO 25208
25148: POP
// begin bc_type := b_lab_half ;
25149: LD_ADDR_OWVAR 42
25153: PUSH
25154: LD_INT 7
25156: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25157: LD_ADDR_OWVAR 44
25161: PUSH
25162: LD_INT 10
25164: PUSH
25165: LD_INT 11
25167: PUSH
25168: LD_INT 12
25170: PUSH
25171: LD_INT 15
25173: PUSH
25174: LD_INT 14
25176: PUSH
25177: LD_INT 13
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: PUSH
25188: LD_VAR 0 2
25192: PUSH
25193: LD_INT 3
25195: MINUS
25196: ARRAY
25197: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25198: LD_ADDR_OWVAR 45
25202: PUSH
25203: LD_INT 9
25205: ST_TO_ADDR
// end ; 10 .. 13 :
25206: GO 25716
25208: LD_INT 10
25210: DOUBLE
25211: GREATEREQUAL
25212: IFFALSE 25220
25214: LD_INT 13
25216: DOUBLE
25217: LESSEQUAL
25218: IFTRUE 25222
25220: GO 25299
25222: POP
// begin bc_type := b_lab_full ;
25223: LD_ADDR_OWVAR 42
25227: PUSH
25228: LD_INT 8
25230: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25231: LD_ADDR_OWVAR 44
25235: PUSH
25236: LD_INT 10
25238: PUSH
25239: LD_INT 12
25241: PUSH
25242: LD_INT 14
25244: PUSH
25245: LD_INT 13
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: PUSH
25254: LD_VAR 0 2
25258: PUSH
25259: LD_INT 9
25261: MINUS
25262: ARRAY
25263: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25264: LD_ADDR_OWVAR 45
25268: PUSH
25269: LD_INT 11
25271: PUSH
25272: LD_INT 15
25274: PUSH
25275: LD_INT 12
25277: PUSH
25278: LD_INT 15
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: PUSH
25287: LD_VAR 0 2
25291: PUSH
25292: LD_INT 9
25294: MINUS
25295: ARRAY
25296: ST_TO_ADDR
// end ; 14 :
25297: GO 25716
25299: LD_INT 14
25301: DOUBLE
25302: EQUAL
25303: IFTRUE 25307
25305: GO 25318
25307: POP
// bc_type := b_workshop ; 15 :
25308: LD_ADDR_OWVAR 42
25312: PUSH
25313: LD_INT 2
25315: ST_TO_ADDR
25316: GO 25716
25318: LD_INT 15
25320: DOUBLE
25321: EQUAL
25322: IFTRUE 25326
25324: GO 25337
25326: POP
// bc_type := b_factory ; 16 :
25327: LD_ADDR_OWVAR 42
25331: PUSH
25332: LD_INT 3
25334: ST_TO_ADDR
25335: GO 25716
25337: LD_INT 16
25339: DOUBLE
25340: EQUAL
25341: IFTRUE 25345
25343: GO 25356
25345: POP
// bc_type := b_ext_gun ; 17 :
25346: LD_ADDR_OWVAR 42
25350: PUSH
25351: LD_INT 17
25353: ST_TO_ADDR
25354: GO 25716
25356: LD_INT 17
25358: DOUBLE
25359: EQUAL
25360: IFTRUE 25364
25362: GO 25392
25364: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25365: LD_ADDR_OWVAR 42
25369: PUSH
25370: LD_INT 19
25372: PUSH
25373: LD_INT 23
25375: PUSH
25376: LD_INT 19
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: PUSH
25384: LD_VAR 0 1
25388: ARRAY
25389: ST_TO_ADDR
25390: GO 25716
25392: LD_INT 18
25394: DOUBLE
25395: EQUAL
25396: IFTRUE 25400
25398: GO 25411
25400: POP
// bc_type := b_ext_radar ; 19 :
25401: LD_ADDR_OWVAR 42
25405: PUSH
25406: LD_INT 20
25408: ST_TO_ADDR
25409: GO 25716
25411: LD_INT 19
25413: DOUBLE
25414: EQUAL
25415: IFTRUE 25419
25417: GO 25430
25419: POP
// bc_type := b_ext_radio ; 20 :
25420: LD_ADDR_OWVAR 42
25424: PUSH
25425: LD_INT 22
25427: ST_TO_ADDR
25428: GO 25716
25430: LD_INT 20
25432: DOUBLE
25433: EQUAL
25434: IFTRUE 25438
25436: GO 25449
25438: POP
// bc_type := b_ext_siberium ; 21 :
25439: LD_ADDR_OWVAR 42
25443: PUSH
25444: LD_INT 21
25446: ST_TO_ADDR
25447: GO 25716
25449: LD_INT 21
25451: DOUBLE
25452: EQUAL
25453: IFTRUE 25457
25455: GO 25468
25457: POP
// bc_type := b_ext_computer ; 22 :
25458: LD_ADDR_OWVAR 42
25462: PUSH
25463: LD_INT 24
25465: ST_TO_ADDR
25466: GO 25716
25468: LD_INT 22
25470: DOUBLE
25471: EQUAL
25472: IFTRUE 25476
25474: GO 25487
25476: POP
// bc_type := b_ext_track ; 23 :
25477: LD_ADDR_OWVAR 42
25481: PUSH
25482: LD_INT 16
25484: ST_TO_ADDR
25485: GO 25716
25487: LD_INT 23
25489: DOUBLE
25490: EQUAL
25491: IFTRUE 25495
25493: GO 25506
25495: POP
// bc_type := b_ext_laser ; 24 :
25496: LD_ADDR_OWVAR 42
25500: PUSH
25501: LD_INT 25
25503: ST_TO_ADDR
25504: GO 25716
25506: LD_INT 24
25508: DOUBLE
25509: EQUAL
25510: IFTRUE 25514
25512: GO 25525
25514: POP
// bc_type := b_control_tower ; 25 :
25515: LD_ADDR_OWVAR 42
25519: PUSH
25520: LD_INT 36
25522: ST_TO_ADDR
25523: GO 25716
25525: LD_INT 25
25527: DOUBLE
25528: EQUAL
25529: IFTRUE 25533
25531: GO 25544
25533: POP
// bc_type := b_breastwork ; 26 :
25534: LD_ADDR_OWVAR 42
25538: PUSH
25539: LD_INT 31
25541: ST_TO_ADDR
25542: GO 25716
25544: LD_INT 26
25546: DOUBLE
25547: EQUAL
25548: IFTRUE 25552
25550: GO 25563
25552: POP
// bc_type := b_bunker ; 27 :
25553: LD_ADDR_OWVAR 42
25557: PUSH
25558: LD_INT 32
25560: ST_TO_ADDR
25561: GO 25716
25563: LD_INT 27
25565: DOUBLE
25566: EQUAL
25567: IFTRUE 25571
25569: GO 25582
25571: POP
// bc_type := b_turret ; 28 :
25572: LD_ADDR_OWVAR 42
25576: PUSH
25577: LD_INT 33
25579: ST_TO_ADDR
25580: GO 25716
25582: LD_INT 28
25584: DOUBLE
25585: EQUAL
25586: IFTRUE 25590
25588: GO 25601
25590: POP
// bc_type := b_armoury ; 29 :
25591: LD_ADDR_OWVAR 42
25595: PUSH
25596: LD_INT 4
25598: ST_TO_ADDR
25599: GO 25716
25601: LD_INT 29
25603: DOUBLE
25604: EQUAL
25605: IFTRUE 25609
25607: GO 25620
25609: POP
// bc_type := b_barracks ; 30 :
25610: LD_ADDR_OWVAR 42
25614: PUSH
25615: LD_INT 5
25617: ST_TO_ADDR
25618: GO 25716
25620: LD_INT 30
25622: DOUBLE
25623: EQUAL
25624: IFTRUE 25628
25626: GO 25639
25628: POP
// bc_type := b_solar_power ; 31 :
25629: LD_ADDR_OWVAR 42
25633: PUSH
25634: LD_INT 27
25636: ST_TO_ADDR
25637: GO 25716
25639: LD_INT 31
25641: DOUBLE
25642: EQUAL
25643: IFTRUE 25647
25645: GO 25658
25647: POP
// bc_type := b_oil_power ; 32 :
25648: LD_ADDR_OWVAR 42
25652: PUSH
25653: LD_INT 26
25655: ST_TO_ADDR
25656: GO 25716
25658: LD_INT 32
25660: DOUBLE
25661: EQUAL
25662: IFTRUE 25666
25664: GO 25677
25666: POP
// bc_type := b_siberite_power ; 33 :
25667: LD_ADDR_OWVAR 42
25671: PUSH
25672: LD_INT 28
25674: ST_TO_ADDR
25675: GO 25716
25677: LD_INT 33
25679: DOUBLE
25680: EQUAL
25681: IFTRUE 25685
25683: GO 25696
25685: POP
// bc_type := b_oil_mine ; 34 :
25686: LD_ADDR_OWVAR 42
25690: PUSH
25691: LD_INT 29
25693: ST_TO_ADDR
25694: GO 25716
25696: LD_INT 34
25698: DOUBLE
25699: EQUAL
25700: IFTRUE 25704
25702: GO 25715
25704: POP
// bc_type := b_siberite_mine ; end ;
25705: LD_ADDR_OWVAR 42
25709: PUSH
25710: LD_INT 30
25712: ST_TO_ADDR
25713: GO 25716
25715: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25716: LD_ADDR_VAR 0 8
25720: PUSH
25721: LD_VAR 0 5
25725: PPUSH
25726: LD_VAR 0 6
25730: PPUSH
25731: LD_VAR 0 3
25735: PPUSH
25736: CALL_OW 47
25740: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25741: LD_OWVAR 42
25745: PUSH
25746: LD_INT 32
25748: PUSH
25749: LD_INT 33
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: IN
25756: IFFALSE 25772
// PlaceWeaponTurret ( b , weapon ) ;
25758: LD_VAR 0 8
25762: PPUSH
25763: LD_VAR 0 4
25767: PPUSH
25768: CALL_OW 431
// end ;
25772: LD_VAR 0 7
25776: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25777: LD_INT 0
25779: PPUSH
25780: PPUSH
25781: PPUSH
25782: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25783: LD_ADDR_VAR 0 4
25787: PUSH
25788: LD_INT 22
25790: PUSH
25791: LD_OWVAR 2
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: LD_INT 30
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 30
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PPUSH
25832: CALL_OW 69
25836: ST_TO_ADDR
// if not tmp then
25837: LD_VAR 0 4
25841: NOT
25842: IFFALSE 25846
// exit ;
25844: GO 25905
// for i in tmp do
25846: LD_ADDR_VAR 0 2
25850: PUSH
25851: LD_VAR 0 4
25855: PUSH
25856: FOR_IN
25857: IFFALSE 25903
// for j = 1 to 3 do
25859: LD_ADDR_VAR 0 3
25863: PUSH
25864: DOUBLE
25865: LD_INT 1
25867: DEC
25868: ST_TO_ADDR
25869: LD_INT 3
25871: PUSH
25872: FOR_TO
25873: IFFALSE 25899
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25875: LD_VAR 0 2
25879: PPUSH
25880: CALL_OW 274
25884: PPUSH
25885: LD_VAR 0 3
25889: PPUSH
25890: LD_INT 99999
25892: PPUSH
25893: CALL_OW 277
25897: GO 25872
25899: POP
25900: POP
25901: GO 25856
25903: POP
25904: POP
// end ;
25905: LD_VAR 0 1
25909: RET
// export function hHackSetLevel10 ; var i , j ; begin
25910: LD_INT 0
25912: PPUSH
25913: PPUSH
25914: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25915: LD_ADDR_VAR 0 2
25919: PUSH
25920: LD_INT 21
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PPUSH
25930: CALL_OW 69
25934: PUSH
25935: FOR_IN
25936: IFFALSE 25988
// if IsSelected ( i ) then
25938: LD_VAR 0 2
25942: PPUSH
25943: CALL_OW 306
25947: IFFALSE 25986
// begin for j := 1 to 4 do
25949: LD_ADDR_VAR 0 3
25953: PUSH
25954: DOUBLE
25955: LD_INT 1
25957: DEC
25958: ST_TO_ADDR
25959: LD_INT 4
25961: PUSH
25962: FOR_TO
25963: IFFALSE 25984
// SetSkill ( i , j , 10 ) ;
25965: LD_VAR 0 2
25969: PPUSH
25970: LD_VAR 0 3
25974: PPUSH
25975: LD_INT 10
25977: PPUSH
25978: CALL_OW 237
25982: GO 25962
25984: POP
25985: POP
// end ;
25986: GO 25935
25988: POP
25989: POP
// end ;
25990: LD_VAR 0 1
25994: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25995: LD_INT 0
25997: PPUSH
25998: PPUSH
25999: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26000: LD_ADDR_VAR 0 2
26004: PUSH
26005: LD_INT 22
26007: PUSH
26008: LD_OWVAR 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 21
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PPUSH
26031: CALL_OW 69
26035: PUSH
26036: FOR_IN
26037: IFFALSE 26078
// begin for j := 1 to 4 do
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: DOUBLE
26045: LD_INT 1
26047: DEC
26048: ST_TO_ADDR
26049: LD_INT 4
26051: PUSH
26052: FOR_TO
26053: IFFALSE 26074
// SetSkill ( i , j , 10 ) ;
26055: LD_VAR 0 2
26059: PPUSH
26060: LD_VAR 0 3
26064: PPUSH
26065: LD_INT 10
26067: PPUSH
26068: CALL_OW 237
26072: GO 26052
26074: POP
26075: POP
// end ;
26076: GO 26036
26078: POP
26079: POP
// end ;
26080: LD_VAR 0 1
26084: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26085: LD_INT 0
26087: PPUSH
// uc_side := your_side ;
26088: LD_ADDR_OWVAR 20
26092: PUSH
26093: LD_OWVAR 2
26097: ST_TO_ADDR
// uc_nation := nation ;
26098: LD_ADDR_OWVAR 21
26102: PUSH
26103: LD_VAR 0 1
26107: ST_TO_ADDR
// InitHc ;
26108: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26112: LD_INT 0
26114: PPUSH
26115: LD_VAR 0 2
26119: PPUSH
26120: LD_VAR 0 3
26124: PPUSH
26125: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26129: LD_VAR 0 4
26133: PPUSH
26134: LD_VAR 0 5
26138: PPUSH
26139: CALL_OW 428
26143: PUSH
26144: LD_INT 0
26146: EQUAL
26147: IFFALSE 26171
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26149: CALL_OW 44
26153: PPUSH
26154: LD_VAR 0 4
26158: PPUSH
26159: LD_VAR 0 5
26163: PPUSH
26164: LD_INT 1
26166: PPUSH
26167: CALL_OW 48
// end ;
26171: LD_VAR 0 6
26175: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26176: LD_INT 0
26178: PPUSH
26179: PPUSH
// uc_side := your_side ;
26180: LD_ADDR_OWVAR 20
26184: PUSH
26185: LD_OWVAR 2
26189: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26190: LD_VAR 0 1
26194: PUSH
26195: LD_INT 1
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: LD_INT 3
26203: PUSH
26204: LD_INT 4
26206: PUSH
26207: LD_INT 5
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: IN
26217: IFFALSE 26229
// uc_nation := nation_american else
26219: LD_ADDR_OWVAR 21
26223: PUSH
26224: LD_INT 1
26226: ST_TO_ADDR
26227: GO 26272
// if chassis in [ 11 , 12 , 13 , 14 ] then
26229: LD_VAR 0 1
26233: PUSH
26234: LD_INT 11
26236: PUSH
26237: LD_INT 12
26239: PUSH
26240: LD_INT 13
26242: PUSH
26243: LD_INT 14
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: IN
26252: IFFALSE 26264
// uc_nation := nation_arabian else
26254: LD_ADDR_OWVAR 21
26258: PUSH
26259: LD_INT 2
26261: ST_TO_ADDR
26262: GO 26272
// uc_nation := nation_russian ;
26264: LD_ADDR_OWVAR 21
26268: PUSH
26269: LD_INT 3
26271: ST_TO_ADDR
// vc_chassis := chassis ;
26272: LD_ADDR_OWVAR 37
26276: PUSH
26277: LD_VAR 0 1
26281: ST_TO_ADDR
// vc_engine := engine ;
26282: LD_ADDR_OWVAR 39
26286: PUSH
26287: LD_VAR 0 2
26291: ST_TO_ADDR
// vc_control := control ;
26292: LD_ADDR_OWVAR 38
26296: PUSH
26297: LD_VAR 0 3
26301: ST_TO_ADDR
// vc_weapon := weapon ;
26302: LD_ADDR_OWVAR 40
26306: PUSH
26307: LD_VAR 0 4
26311: ST_TO_ADDR
// un := CreateVehicle ;
26312: LD_ADDR_VAR 0 8
26316: PUSH
26317: CALL_OW 45
26321: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26322: LD_VAR 0 8
26326: PPUSH
26327: LD_INT 0
26329: PPUSH
26330: LD_INT 5
26332: PPUSH
26333: CALL_OW 12
26337: PPUSH
26338: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26342: LD_VAR 0 8
26346: PPUSH
26347: LD_VAR 0 5
26351: PPUSH
26352: LD_VAR 0 6
26356: PPUSH
26357: LD_INT 1
26359: PPUSH
26360: CALL_OW 48
// end ;
26364: LD_VAR 0 7
26368: RET
// export hInvincible ; every 1 do
26369: GO 26371
26371: DISABLE
// hInvincible := [ ] ;
26372: LD_ADDR_EXP 79
26376: PUSH
26377: EMPTY
26378: ST_TO_ADDR
26379: END
// every 10 do var i ;
26380: GO 26382
26382: DISABLE
26383: LD_INT 0
26385: PPUSH
// begin enable ;
26386: ENABLE
// if not hInvincible then
26387: LD_EXP 79
26391: NOT
26392: IFFALSE 26396
// exit ;
26394: GO 26440
// for i in hInvincible do
26396: LD_ADDR_VAR 0 1
26400: PUSH
26401: LD_EXP 79
26405: PUSH
26406: FOR_IN
26407: IFFALSE 26438
// if GetLives ( i ) < 1000 then
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 256
26418: PUSH
26419: LD_INT 1000
26421: LESS
26422: IFFALSE 26436
// SetLives ( i , 1000 ) ;
26424: LD_VAR 0 1
26428: PPUSH
26429: LD_INT 1000
26431: PPUSH
26432: CALL_OW 234
26436: GO 26406
26438: POP
26439: POP
// end ;
26440: PPOPN 1
26442: END
// export function hHackInvincible ; var i ; begin
26443: LD_INT 0
26445: PPUSH
26446: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26447: LD_ADDR_VAR 0 2
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: LD_INT 21
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 21
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 69
26484: PUSH
26485: FOR_IN
26486: IFFALSE 26547
// if IsSelected ( i ) then
26488: LD_VAR 0 2
26492: PPUSH
26493: CALL_OW 306
26497: IFFALSE 26545
// begin if i in hInvincible then
26499: LD_VAR 0 2
26503: PUSH
26504: LD_EXP 79
26508: IN
26509: IFFALSE 26529
// hInvincible := hInvincible diff i else
26511: LD_ADDR_EXP 79
26515: PUSH
26516: LD_EXP 79
26520: PUSH
26521: LD_VAR 0 2
26525: DIFF
26526: ST_TO_ADDR
26527: GO 26545
// hInvincible := hInvincible union i ;
26529: LD_ADDR_EXP 79
26533: PUSH
26534: LD_EXP 79
26538: PUSH
26539: LD_VAR 0 2
26543: UNION
26544: ST_TO_ADDR
// end ;
26545: GO 26485
26547: POP
26548: POP
// end ;
26549: LD_VAR 0 1
26553: RET
// export function hHackInvisible ; var i , j ; begin
26554: LD_INT 0
26556: PPUSH
26557: PPUSH
26558: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26559: LD_ADDR_VAR 0 2
26563: PUSH
26564: LD_INT 21
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PPUSH
26574: CALL_OW 69
26578: PUSH
26579: FOR_IN
26580: IFFALSE 26604
// if IsSelected ( i ) then
26582: LD_VAR 0 2
26586: PPUSH
26587: CALL_OW 306
26591: IFFALSE 26602
// ComForceInvisible ( i ) ;
26593: LD_VAR 0 2
26597: PPUSH
26598: CALL_OW 496
26602: GO 26579
26604: POP
26605: POP
// end ;
26606: LD_VAR 0 1
26610: RET
// export function hHackChangeYourSide ; begin
26611: LD_INT 0
26613: PPUSH
// if your_side = 8 then
26614: LD_OWVAR 2
26618: PUSH
26619: LD_INT 8
26621: EQUAL
26622: IFFALSE 26634
// your_side := 0 else
26624: LD_ADDR_OWVAR 2
26628: PUSH
26629: LD_INT 0
26631: ST_TO_ADDR
26632: GO 26648
// your_side := your_side + 1 ;
26634: LD_ADDR_OWVAR 2
26638: PUSH
26639: LD_OWVAR 2
26643: PUSH
26644: LD_INT 1
26646: PLUS
26647: ST_TO_ADDR
// end ;
26648: LD_VAR 0 1
26652: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26653: LD_INT 0
26655: PPUSH
26656: PPUSH
26657: PPUSH
// for i in all_units do
26658: LD_ADDR_VAR 0 2
26662: PUSH
26663: LD_OWVAR 3
26667: PUSH
26668: FOR_IN
26669: IFFALSE 26747
// if IsSelected ( i ) then
26671: LD_VAR 0 2
26675: PPUSH
26676: CALL_OW 306
26680: IFFALSE 26745
// begin j := GetSide ( i ) ;
26682: LD_ADDR_VAR 0 3
26686: PUSH
26687: LD_VAR 0 2
26691: PPUSH
26692: CALL_OW 255
26696: ST_TO_ADDR
// if j = 8 then
26697: LD_VAR 0 3
26701: PUSH
26702: LD_INT 8
26704: EQUAL
26705: IFFALSE 26717
// j := 0 else
26707: LD_ADDR_VAR 0 3
26711: PUSH
26712: LD_INT 0
26714: ST_TO_ADDR
26715: GO 26731
// j := j + 1 ;
26717: LD_ADDR_VAR 0 3
26721: PUSH
26722: LD_VAR 0 3
26726: PUSH
26727: LD_INT 1
26729: PLUS
26730: ST_TO_ADDR
// SetSide ( i , j ) ;
26731: LD_VAR 0 2
26735: PPUSH
26736: LD_VAR 0 3
26740: PPUSH
26741: CALL_OW 235
// end ;
26745: GO 26668
26747: POP
26748: POP
// end ;
26749: LD_VAR 0 1
26753: RET
// export function hHackFog ; begin
26754: LD_INT 0
26756: PPUSH
// FogOff ( true ) ;
26757: LD_INT 1
26759: PPUSH
26760: CALL_OW 344
// end ;
26764: LD_VAR 0 1
26768: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26769: LD_INT 0
26771: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26772: LD_VAR 0 1
26776: PPUSH
26777: LD_VAR 0 2
26781: PPUSH
26782: LD_VAR 0 3
26786: PPUSH
26787: LD_INT 1
26789: PPUSH
26790: LD_INT 1
26792: PPUSH
26793: CALL_OW 483
// CenterOnXY ( x , y ) ;
26797: LD_VAR 0 2
26801: PPUSH
26802: LD_VAR 0 3
26806: PPUSH
26807: CALL_OW 84
// end ;
26811: LD_VAR 0 4
26815: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26816: LD_INT 0
26818: PPUSH
26819: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26820: LD_VAR 0 1
26824: NOT
26825: PUSH
26826: LD_VAR 0 2
26830: PPUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: CALL_OW 488
26840: NOT
26841: OR
26842: PUSH
26843: LD_VAR 0 1
26847: PPUSH
26848: CALL_OW 266
26852: PUSH
26853: LD_INT 3
26855: NONEQUAL
26856: PUSH
26857: LD_VAR 0 1
26861: PPUSH
26862: CALL_OW 247
26866: PUSH
26867: LD_INT 1
26869: EQUAL
26870: NOT
26871: AND
26872: OR
26873: IFFALSE 26877
// exit ;
26875: GO 27159
// if GetType ( factory ) = unit_human then
26877: LD_VAR 0 1
26881: PPUSH
26882: CALL_OW 247
26886: PUSH
26887: LD_INT 1
26889: EQUAL
26890: IFFALSE 26907
// factory := IsInUnit ( factory ) ;
26892: LD_ADDR_VAR 0 1
26896: PUSH
26897: LD_VAR 0 1
26901: PPUSH
26902: CALL_OW 310
26906: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 266
26916: PUSH
26917: LD_INT 3
26919: NONEQUAL
26920: IFFALSE 26924
// exit ;
26922: GO 27159
// for i := 1 to Count ( factoryWaypoints ) do
26924: LD_ADDR_VAR 0 5
26928: PUSH
26929: DOUBLE
26930: LD_INT 1
26932: DEC
26933: ST_TO_ADDR
26934: LD_EXP 80
26938: PPUSH
26939: CALL 35662 0 1
26943: PUSH
26944: FOR_TO
26945: IFFALSE 27107
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26947: LD_VAR 0 2
26951: PPUSH
26952: LD_VAR 0 3
26956: PPUSH
26957: CALL_OW 428
26961: PUSH
26962: LD_EXP 80
26966: PUSH
26967: LD_VAR 0 5
26971: ARRAY
26972: PUSH
26973: LD_INT 2
26975: ARRAY
26976: EQUAL
26977: IFFALSE 27009
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26979: LD_ADDR_EXP 80
26983: PUSH
26984: LD_EXP 80
26988: PPUSH
26989: LD_VAR 0 5
26993: PPUSH
26994: CALL_OW 3
26998: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26999: CALL 27164 0 0
// exit ;
27003: POP
27004: POP
27005: GO 27159
// end else
27007: GO 27105
// if factory = factoryWaypoints [ i ] [ 2 ] then
27009: LD_VAR 0 1
27013: PUSH
27014: LD_EXP 80
27018: PUSH
27019: LD_VAR 0 5
27023: ARRAY
27024: PUSH
27025: LD_INT 2
27027: ARRAY
27028: EQUAL
27029: IFFALSE 27105
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
27031: LD_ADDR_EXP 80
27035: PUSH
27036: LD_EXP 80
27040: PPUSH
27041: LD_VAR 0 5
27045: PPUSH
27046: CALL_OW 3
27050: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27051: LD_ADDR_EXP 80
27055: PUSH
27056: LD_EXP 80
27060: PPUSH
27061: LD_VAR 0 1
27065: PPUSH
27066: CALL_OW 255
27070: PUSH
27071: LD_VAR 0 1
27075: PUSH
27076: LD_VAR 0 2
27080: PUSH
27081: LD_VAR 0 3
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: PPUSH
27092: CALL 71271 0 2
27096: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27097: CALL 27164 0 0
// exit ;
27101: POP
27102: POP
27103: GO 27159
// end ; end ;
27105: GO 26944
27107: POP
27108: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27109: LD_ADDR_EXP 80
27113: PUSH
27114: LD_EXP 80
27118: PPUSH
27119: LD_VAR 0 1
27123: PPUSH
27124: CALL_OW 255
27128: PUSH
27129: LD_VAR 0 1
27133: PUSH
27134: LD_VAR 0 2
27138: PUSH
27139: LD_VAR 0 3
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: PPUSH
27150: CALL 71271 0 2
27154: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27155: CALL 27164 0 0
// end ;
27159: LD_VAR 0 4
27163: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27164: LD_INT 0
27166: PPUSH
27167: PPUSH
27168: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27169: LD_STRING resetFactoryWaypoint();
27171: PPUSH
27172: CALL_OW 559
// if factoryWaypoints then
27176: LD_EXP 80
27180: IFFALSE 27301
// begin list := factoryWaypoints ;
27182: LD_ADDR_VAR 0 3
27186: PUSH
27187: LD_EXP 80
27191: ST_TO_ADDR
// for i := 1 to list do
27192: LD_ADDR_VAR 0 2
27196: PUSH
27197: DOUBLE
27198: LD_INT 1
27200: DEC
27201: ST_TO_ADDR
27202: LD_VAR 0 3
27206: PUSH
27207: FOR_TO
27208: IFFALSE 27299
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27210: LD_STRING setFactoryWaypointXY(
27212: PUSH
27213: LD_VAR 0 3
27217: PUSH
27218: LD_VAR 0 2
27222: ARRAY
27223: PUSH
27224: LD_INT 1
27226: ARRAY
27227: STR
27228: PUSH
27229: LD_STRING ,
27231: STR
27232: PUSH
27233: LD_VAR 0 3
27237: PUSH
27238: LD_VAR 0 2
27242: ARRAY
27243: PUSH
27244: LD_INT 2
27246: ARRAY
27247: STR
27248: PUSH
27249: LD_STRING ,
27251: STR
27252: PUSH
27253: LD_VAR 0 3
27257: PUSH
27258: LD_VAR 0 2
27262: ARRAY
27263: PUSH
27264: LD_INT 3
27266: ARRAY
27267: STR
27268: PUSH
27269: LD_STRING ,
27271: STR
27272: PUSH
27273: LD_VAR 0 3
27277: PUSH
27278: LD_VAR 0 2
27282: ARRAY
27283: PUSH
27284: LD_INT 4
27286: ARRAY
27287: STR
27288: PUSH
27289: LD_STRING )
27291: STR
27292: PPUSH
27293: CALL_OW 559
27297: GO 27207
27299: POP
27300: POP
// end ; end ;
27301: LD_VAR 0 1
27305: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27306: LD_INT 0
27308: PPUSH
// if HexInfo ( x , y ) = warehouse then
27309: LD_VAR 0 2
27313: PPUSH
27314: LD_VAR 0 3
27318: PPUSH
27319: CALL_OW 428
27323: PUSH
27324: LD_VAR 0 1
27328: EQUAL
27329: IFFALSE 27356
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27331: LD_ADDR_EXP 81
27335: PUSH
27336: LD_EXP 81
27340: PPUSH
27341: LD_VAR 0 1
27345: PPUSH
27346: LD_INT 0
27348: PPUSH
27349: CALL_OW 1
27353: ST_TO_ADDR
27354: GO 27407
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27356: LD_ADDR_EXP 81
27360: PUSH
27361: LD_EXP 81
27365: PPUSH
27366: LD_VAR 0 1
27370: PPUSH
27371: LD_VAR 0 1
27375: PPUSH
27376: CALL_OW 255
27380: PUSH
27381: LD_VAR 0 1
27385: PUSH
27386: LD_VAR 0 2
27390: PUSH
27391: LD_VAR 0 3
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: PPUSH
27402: CALL_OW 1
27406: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27407: CALL 27416 0 0
// end ;
27411: LD_VAR 0 4
27415: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27416: LD_INT 0
27418: PPUSH
27419: PPUSH
27420: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27421: LD_STRING resetWarehouseGatheringPoints();
27423: PPUSH
27424: CALL_OW 559
// if warehouseGatheringPoints then
27428: LD_EXP 81
27432: IFFALSE 27558
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: LD_EXP 81
27443: PPUSH
27444: CALL 75033 0 1
27448: ST_TO_ADDR
// for i := 1 to list do
27449: LD_ADDR_VAR 0 2
27453: PUSH
27454: DOUBLE
27455: LD_INT 1
27457: DEC
27458: ST_TO_ADDR
27459: LD_VAR 0 3
27463: PUSH
27464: FOR_TO
27465: IFFALSE 27556
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27467: LD_STRING setWarehouseGatheringPointXY(
27469: PUSH
27470: LD_VAR 0 3
27474: PUSH
27475: LD_VAR 0 2
27479: ARRAY
27480: PUSH
27481: LD_INT 1
27483: ARRAY
27484: STR
27485: PUSH
27486: LD_STRING ,
27488: STR
27489: PUSH
27490: LD_VAR 0 3
27494: PUSH
27495: LD_VAR 0 2
27499: ARRAY
27500: PUSH
27501: LD_INT 2
27503: ARRAY
27504: STR
27505: PUSH
27506: LD_STRING ,
27508: STR
27509: PUSH
27510: LD_VAR 0 3
27514: PUSH
27515: LD_VAR 0 2
27519: ARRAY
27520: PUSH
27521: LD_INT 3
27523: ARRAY
27524: STR
27525: PUSH
27526: LD_STRING ,
27528: STR
27529: PUSH
27530: LD_VAR 0 3
27534: PUSH
27535: LD_VAR 0 2
27539: ARRAY
27540: PUSH
27541: LD_INT 4
27543: ARRAY
27544: STR
27545: PUSH
27546: LD_STRING )
27548: STR
27549: PPUSH
27550: CALL_OW 559
27554: GO 27464
27556: POP
27557: POP
// end ; end ;
27558: LD_VAR 0 1
27562: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27563: LD_EXP 81
27567: IFFALSE 28252
27569: GO 27571
27571: DISABLE
27572: LD_INT 0
27574: PPUSH
27575: PPUSH
27576: PPUSH
27577: PPUSH
27578: PPUSH
27579: PPUSH
27580: PPUSH
27581: PPUSH
27582: PPUSH
// begin enable ;
27583: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27584: LD_ADDR_VAR 0 3
27588: PUSH
27589: LD_EXP 81
27593: PPUSH
27594: CALL 75033 0 1
27598: ST_TO_ADDR
// if not list then
27599: LD_VAR 0 3
27603: NOT
27604: IFFALSE 27608
// exit ;
27606: GO 28252
// for i := 1 to list do
27608: LD_ADDR_VAR 0 1
27612: PUSH
27613: DOUBLE
27614: LD_INT 1
27616: DEC
27617: ST_TO_ADDR
27618: LD_VAR 0 3
27622: PUSH
27623: FOR_TO
27624: IFFALSE 28250
// begin depot := list [ i ] [ 2 ] ;
27626: LD_ADDR_VAR 0 8
27630: PUSH
27631: LD_VAR 0 3
27635: PUSH
27636: LD_VAR 0 1
27640: ARRAY
27641: PUSH
27642: LD_INT 2
27644: ARRAY
27645: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27646: LD_ADDR_VAR 0 5
27650: PUSH
27651: LD_VAR 0 3
27655: PUSH
27656: LD_VAR 0 1
27660: ARRAY
27661: PUSH
27662: LD_INT 1
27664: ARRAY
27665: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27666: LD_VAR 0 8
27670: PPUSH
27671: CALL_OW 301
27675: PUSH
27676: LD_VAR 0 5
27680: PUSH
27681: LD_VAR 0 8
27685: PPUSH
27686: CALL_OW 255
27690: NONEQUAL
27691: OR
27692: IFFALSE 27721
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27694: LD_ADDR_EXP 81
27698: PUSH
27699: LD_EXP 81
27703: PPUSH
27704: LD_VAR 0 8
27708: PPUSH
27709: LD_INT 0
27711: PPUSH
27712: CALL_OW 1
27716: ST_TO_ADDR
// exit ;
27717: POP
27718: POP
27719: GO 28252
// end ; x := list [ i ] [ 3 ] ;
27721: LD_ADDR_VAR 0 6
27725: PUSH
27726: LD_VAR 0 3
27730: PUSH
27731: LD_VAR 0 1
27735: ARRAY
27736: PUSH
27737: LD_INT 3
27739: ARRAY
27740: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27741: LD_ADDR_VAR 0 7
27745: PUSH
27746: LD_VAR 0 3
27750: PUSH
27751: LD_VAR 0 1
27755: ARRAY
27756: PUSH
27757: LD_INT 4
27759: ARRAY
27760: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27761: LD_ADDR_VAR 0 9
27765: PUSH
27766: LD_VAR 0 6
27770: PPUSH
27771: LD_VAR 0 7
27775: PPUSH
27776: LD_INT 16
27778: PPUSH
27779: CALL 73617 0 3
27783: ST_TO_ADDR
// if not cratesNearbyPoint then
27784: LD_VAR 0 9
27788: NOT
27789: IFFALSE 27795
// exit ;
27791: POP
27792: POP
27793: GO 28252
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27795: LD_ADDR_VAR 0 4
27799: PUSH
27800: LD_INT 22
27802: PUSH
27803: LD_VAR 0 5
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 3
27814: PUSH
27815: LD_INT 60
27817: PUSH
27818: EMPTY
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 91
27827: PUSH
27828: LD_VAR 0 8
27832: PUSH
27833: LD_INT 6
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 25
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 25
27856: PUSH
27857: LD_INT 16
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: PPUSH
27875: CALL_OW 69
27879: PUSH
27880: LD_VAR 0 8
27884: PPUSH
27885: CALL_OW 313
27889: PPUSH
27890: LD_INT 3
27892: PUSH
27893: LD_INT 60
27895: PUSH
27896: EMPTY
27897: LIST
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 25
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 25
27918: PUSH
27919: LD_INT 16
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: LIST
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PPUSH
27935: CALL_OW 72
27939: UNION
27940: ST_TO_ADDR
// if tmp then
27941: LD_VAR 0 4
27945: IFFALSE 28025
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27947: LD_ADDR_VAR 0 4
27951: PUSH
27952: LD_VAR 0 4
27956: PPUSH
27957: LD_INT 3
27959: PPUSH
27960: CALL 71586 0 2
27964: ST_TO_ADDR
// for j in tmp do
27965: LD_ADDR_VAR 0 2
27969: PUSH
27970: LD_VAR 0 4
27974: PUSH
27975: FOR_IN
27976: IFFALSE 28019
// begin if IsInUnit ( j ) then
27978: LD_VAR 0 2
27982: PPUSH
27983: CALL_OW 310
27987: IFFALSE 27998
// ComExit ( j ) ;
27989: LD_VAR 0 2
27993: PPUSH
27994: CALL 71669 0 1
// AddComCollect ( j , x , y ) ;
27998: LD_VAR 0 2
28002: PPUSH
28003: LD_VAR 0 6
28007: PPUSH
28008: LD_VAR 0 7
28012: PPUSH
28013: CALL_OW 177
// end ;
28017: GO 27975
28019: POP
28020: POP
// exit ;
28021: POP
28022: POP
28023: GO 28252
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28025: LD_ADDR_VAR 0 4
28029: PUSH
28030: LD_INT 22
28032: PUSH
28033: LD_VAR 0 5
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 91
28044: PUSH
28045: LD_VAR 0 8
28049: PUSH
28050: LD_INT 8
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: LD_INT 34
28063: PUSH
28064: LD_INT 12
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 34
28073: PUSH
28074: LD_INT 51
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 34
28083: PUSH
28084: LD_INT 32
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 34
28093: PUSH
28094: LD_INT 89
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: PPUSH
28113: CALL_OW 69
28117: ST_TO_ADDR
// if tmp then
28118: LD_VAR 0 4
28122: IFFALSE 28248
// begin for j in tmp do
28124: LD_ADDR_VAR 0 2
28128: PUSH
28129: LD_VAR 0 4
28133: PUSH
28134: FOR_IN
28135: IFFALSE 28246
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28137: LD_VAR 0 2
28141: PPUSH
28142: CALL_OW 262
28146: PUSH
28147: LD_INT 3
28149: EQUAL
28150: PUSH
28151: LD_VAR 0 2
28155: PPUSH
28156: CALL_OW 261
28160: PUSH
28161: LD_INT 20
28163: GREATER
28164: OR
28165: PUSH
28166: LD_VAR 0 2
28170: PPUSH
28171: CALL_OW 314
28175: NOT
28176: AND
28177: PUSH
28178: LD_VAR 0 2
28182: PPUSH
28183: CALL_OW 263
28187: PUSH
28188: LD_INT 1
28190: NONEQUAL
28191: PUSH
28192: LD_VAR 0 2
28196: PPUSH
28197: CALL_OW 311
28201: OR
28202: AND
28203: IFFALSE 28244
// begin ComCollect ( j , x , y ) ;
28205: LD_VAR 0 2
28209: PPUSH
28210: LD_VAR 0 6
28214: PPUSH
28215: LD_VAR 0 7
28219: PPUSH
28220: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28224: LD_VAR 0 2
28228: PPUSH
28229: LD_VAR 0 8
28233: PPUSH
28234: CALL_OW 172
// exit ;
28238: POP
28239: POP
28240: POP
28241: POP
28242: GO 28252
// end ;
28244: GO 28134
28246: POP
28247: POP
// end ; end ;
28248: GO 27623
28250: POP
28251: POP
// end ; end_of_file
28252: PPOPN 9
28254: END
// export function SOS_UnitDestroyed ( un ) ; begin
28255: LD_INT 0
28257: PPUSH
// ComRadiation ( un ) ;
28258: LD_VAR 0 1
28262: PPUSH
28263: CALL 29244 0 1
// end ;
28267: LD_VAR 0 2
28271: RET
// export function SOS_UnitKamikazed ( un ) ; begin
28272: LD_INT 0
28274: PPUSH
// ComRadiation ( un ) ;
28275: LD_VAR 0 1
28279: PPUSH
28280: CALL 29244 0 1
// end ;
28284: LD_VAR 0 2
28288: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28289: LD_INT 0
28291: PPUSH
// end ;
28292: LD_VAR 0 4
28296: RET
// export function SOS_Command ( cmd ) ; begin
28297: LD_INT 0
28299: PPUSH
// end ;
28300: LD_VAR 0 2
28304: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28305: LD_INT 0
28307: PPUSH
// end ;
28308: LD_VAR 0 6
28312: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
28313: LD_INT 0
28315: PPUSH
28316: PPUSH
28317: PPUSH
28318: PPUSH
28319: PPUSH
// if not vehicle or not factory then
28320: LD_VAR 0 1
28324: NOT
28325: PUSH
28326: LD_VAR 0 2
28330: NOT
28331: OR
28332: IFFALSE 28336
// exit ;
28334: GO 28835
// if not factoryWaypoints then
28336: LD_EXP 80
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28835
// for i := 1 to Count ( factoryWaypoints ) do
28345: LD_ADDR_VAR 0 4
28349: PUSH
28350: DOUBLE
28351: LD_INT 1
28353: DEC
28354: ST_TO_ADDR
28355: LD_EXP 80
28359: PPUSH
28360: CALL 35662 0 1
28364: PUSH
28365: FOR_TO
28366: IFFALSE 28833
// if factoryWaypoints [ i ] [ 2 ] = factory then
28368: LD_EXP 80
28372: PUSH
28373: LD_VAR 0 4
28377: ARRAY
28378: PUSH
28379: LD_INT 2
28381: ARRAY
28382: PUSH
28383: LD_VAR 0 2
28387: EQUAL
28388: IFFALSE 28831
// begin if GetControl ( vehicle ) = control_manual then
28390: LD_VAR 0 1
28394: PPUSH
28395: CALL_OW 263
28399: PUSH
28400: LD_INT 1
28402: EQUAL
28403: IFFALSE 28714
// begin driver := IsDrivenBy ( vehicle ) ;
28405: LD_ADDR_VAR 0 6
28409: PUSH
28410: LD_VAR 0 1
28414: PPUSH
28415: CALL_OW 311
28419: ST_TO_ADDR
// tag := GetTag ( driver ) ;
28420: LD_ADDR_VAR 0 5
28424: PUSH
28425: LD_VAR 0 6
28429: PPUSH
28430: CALL_OW 110
28434: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
28435: LD_VAR 0 5
28439: PUSH
28440: LD_INT 501
28442: EQUAL
28443: PUSH
28444: LD_VAR 0 1
28448: PPUSH
28449: CALL_OW 110
28453: PUSH
28454: LD_INT 501
28456: EQUAL
28457: OR
28458: IFFALSE 28464
// exit ;
28460: POP
28461: POP
28462: GO 28835
// if not HasTask ( driver ) then
28464: LD_VAR 0 6
28468: PPUSH
28469: CALL_OW 314
28473: NOT
28474: IFFALSE 28712
// begin SetTag ( driver , tDriver ) ;
28476: LD_VAR 0 6
28480: PPUSH
28481: LD_INT 501
28483: PPUSH
28484: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
28488: LD_VAR 0 1
28492: PPUSH
28493: LD_INT 501
28495: PPUSH
28496: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28500: LD_ADDR_VAR 0 7
28504: PUSH
28505: LD_EXP 80
28509: PUSH
28510: LD_VAR 0 4
28514: ARRAY
28515: PUSH
28516: LD_INT 3
28518: ARRAY
28519: PPUSH
28520: LD_EXP 80
28524: PUSH
28525: LD_VAR 0 4
28529: ARRAY
28530: PUSH
28531: LD_INT 4
28533: ARRAY
28534: PPUSH
28535: CALL_OW 428
28539: ST_TO_ADDR
// if hex then
28540: LD_VAR 0 7
28544: IFFALSE 28562
// ComMoveUnit ( driver , hex ) else
28546: LD_VAR 0 6
28550: PPUSH
28551: LD_VAR 0 7
28555: PPUSH
28556: CALL_OW 112
28560: GO 28601
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28562: LD_VAR 0 6
28566: PPUSH
28567: LD_EXP 80
28571: PUSH
28572: LD_VAR 0 4
28576: ARRAY
28577: PUSH
28578: LD_INT 3
28580: ARRAY
28581: PPUSH
28582: LD_EXP 80
28586: PUSH
28587: LD_VAR 0 4
28591: ARRAY
28592: PUSH
28593: LD_INT 4
28595: ARRAY
28596: PPUSH
28597: CALL_OW 111
// AddComExitVehicle ( driver ) ;
28601: LD_VAR 0 6
28605: PPUSH
28606: CALL_OW 181
// if Multiplayer then
28610: LD_OWVAR 4
28614: IFFALSE 28663
// begin repeat wait ( 10 ) ;
28616: LD_INT 10
28618: PPUSH
28619: CALL_OW 67
// until not IsInUnit ( driver ) ;
28623: LD_VAR 0 6
28627: PPUSH
28628: CALL_OW 310
28632: NOT
28633: IFFALSE 28616
// if not HasTask ( driver ) then
28635: LD_VAR 0 6
28639: PPUSH
28640: CALL_OW 314
28644: NOT
28645: IFFALSE 28661
// ComEnterUnit ( driver , factory ) ;
28647: LD_VAR 0 6
28651: PPUSH
28652: LD_VAR 0 2
28656: PPUSH
28657: CALL_OW 120
// end else
28661: GO 28677
// AddComEnterUnit ( driver , factory ) ;
28663: LD_VAR 0 6
28667: PPUSH
28668: LD_VAR 0 2
28672: PPUSH
28673: CALL_OW 180
// wait ( 0 0$1 ) ;
28677: LD_INT 35
28679: PPUSH
28680: CALL_OW 67
// SetTag ( driver , tag ) ;
28684: LD_VAR 0 6
28688: PPUSH
28689: LD_VAR 0 5
28693: PPUSH
28694: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
28698: LD_VAR 0 1
28702: PPUSH
28703: LD_INT 0
28705: PPUSH
28706: CALL_OW 109
// break ;
28710: GO 28833
// end ; end else
28712: GO 28831
// if GetControl ( vehicle ) = control_remote then
28714: LD_VAR 0 1
28718: PPUSH
28719: CALL_OW 263
28723: PUSH
28724: LD_INT 2
28726: EQUAL
28727: IFFALSE 28790
// begin wait ( 0 0$2 ) ;
28729: LD_INT 70
28731: PPUSH
28732: CALL_OW 67
// if Connect ( vehicle ) then
28736: LD_VAR 0 1
28740: PPUSH
28741: CALL 41868 0 1
28745: IFFALSE 28786
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28747: LD_VAR 0 1
28751: PPUSH
28752: LD_EXP 80
28756: PUSH
28757: LD_VAR 0 4
28761: ARRAY
28762: PUSH
28763: LD_INT 3
28765: ARRAY
28766: PPUSH
28767: LD_EXP 80
28771: PUSH
28772: LD_VAR 0 4
28776: ARRAY
28777: PUSH
28778: LD_INT 4
28780: ARRAY
28781: PPUSH
28782: CALL_OW 171
// break ;
28786: GO 28833
// end else
28788: GO 28831
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28790: LD_VAR 0 1
28794: PPUSH
28795: LD_EXP 80
28799: PUSH
28800: LD_VAR 0 4
28804: ARRAY
28805: PUSH
28806: LD_INT 3
28808: ARRAY
28809: PPUSH
28810: LD_EXP 80
28814: PUSH
28815: LD_VAR 0 4
28819: ARRAY
28820: PUSH
28821: LD_INT 4
28823: ARRAY
28824: PPUSH
28825: CALL_OW 171
// break ;
28829: GO 28833
// end ; end ;
28831: GO 28365
28833: POP
28834: POP
// end ;
28835: LD_VAR 0 3
28839: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28840: LD_INT 0
28842: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28843: LD_VAR 0 1
28847: PUSH
28848: LD_INT 250
28850: EQUAL
28851: PUSH
28852: LD_VAR 0 2
28856: PPUSH
28857: CALL_OW 264
28861: PUSH
28862: LD_INT 81
28864: EQUAL
28865: AND
28866: IFFALSE 28887
// MinerPlaceMine ( unit , x , y ) ;
28868: LD_VAR 0 2
28872: PPUSH
28873: LD_VAR 0 4
28877: PPUSH
28878: LD_VAR 0 5
28882: PPUSH
28883: CALL 31979 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28887: LD_VAR 0 1
28891: PUSH
28892: LD_INT 251
28894: EQUAL
28895: PUSH
28896: LD_VAR 0 2
28900: PPUSH
28901: CALL_OW 264
28905: PUSH
28906: LD_INT 81
28908: EQUAL
28909: AND
28910: IFFALSE 28931
// MinerDetonateMine ( unit , x , y ) ;
28912: LD_VAR 0 2
28916: PPUSH
28917: LD_VAR 0 4
28921: PPUSH
28922: LD_VAR 0 5
28926: PPUSH
28927: CALL 32254 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28931: LD_VAR 0 1
28935: PUSH
28936: LD_INT 252
28938: EQUAL
28939: PUSH
28940: LD_VAR 0 2
28944: PPUSH
28945: CALL_OW 264
28949: PUSH
28950: LD_INT 81
28952: EQUAL
28953: AND
28954: IFFALSE 28975
// MinerCreateMinefield ( unit , x , y ) ;
28956: LD_VAR 0 2
28960: PPUSH
28961: LD_VAR 0 4
28965: PPUSH
28966: LD_VAR 0 5
28970: PPUSH
28971: CALL 32671 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28975: LD_VAR 0 1
28979: PUSH
28980: LD_INT 253
28982: EQUAL
28983: PUSH
28984: LD_VAR 0 2
28988: PPUSH
28989: CALL_OW 257
28993: PUSH
28994: LD_INT 5
28996: EQUAL
28997: AND
28998: IFFALSE 29019
// ComBinocular ( unit , x , y ) ;
29000: LD_VAR 0 2
29004: PPUSH
29005: LD_VAR 0 4
29009: PPUSH
29010: LD_VAR 0 5
29014: PPUSH
29015: CALL 33040 0 3
// if selectedUnit then
29019: LD_VAR 0 3
29023: IFFALSE 29079
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29025: LD_VAR 0 1
29029: PUSH
29030: LD_INT 254
29032: EQUAL
29033: PUSH
29034: LD_VAR 0 2
29038: PPUSH
29039: CALL_OW 264
29043: PUSH
29044: LD_INT 99
29046: EQUAL
29047: AND
29048: PUSH
29049: LD_VAR 0 3
29053: PPUSH
29054: CALL_OW 263
29058: PUSH
29059: LD_INT 3
29061: EQUAL
29062: AND
29063: IFFALSE 29079
// HackDestroyVehicle ( unit , selectedUnit ) ;
29065: LD_VAR 0 2
29069: PPUSH
29070: LD_VAR 0 3
29074: PPUSH
29075: CALL 31343 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29079: LD_VAR 0 1
29083: PUSH
29084: LD_INT 255
29086: EQUAL
29087: PUSH
29088: LD_VAR 0 2
29092: PPUSH
29093: CALL_OW 264
29097: PUSH
29098: LD_INT 14
29100: PUSH
29101: LD_INT 53
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: IN
29108: AND
29109: PUSH
29110: LD_VAR 0 4
29114: PPUSH
29115: LD_VAR 0 5
29119: PPUSH
29120: CALL_OW 488
29124: AND
29125: IFFALSE 29149
// CutTreeXYR ( unit , x , y , 12 ) ;
29127: LD_VAR 0 2
29131: PPUSH
29132: LD_VAR 0 4
29136: PPUSH
29137: LD_VAR 0 5
29141: PPUSH
29142: LD_INT 12
29144: PPUSH
29145: CALL 29340 0 4
// if cmd = 256 then
29149: LD_VAR 0 1
29153: PUSH
29154: LD_INT 256
29156: EQUAL
29157: IFFALSE 29178
// SetFactoryWaypoint ( unit , x , y ) ;
29159: LD_VAR 0 2
29163: PPUSH
29164: LD_VAR 0 4
29168: PPUSH
29169: LD_VAR 0 5
29173: PPUSH
29174: CALL 26816 0 3
// if cmd = 257 then
29178: LD_VAR 0 1
29182: PUSH
29183: LD_INT 257
29185: EQUAL
29186: IFFALSE 29207
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29188: LD_VAR 0 2
29192: PPUSH
29193: LD_VAR 0 4
29197: PPUSH
29198: LD_VAR 0 5
29202: PPUSH
29203: CALL 27306 0 3
// if cmd = 258 then
29207: LD_VAR 0 1
29211: PUSH
29212: LD_INT 258
29214: EQUAL
29215: IFFALSE 29239
// BurnTreeXYR ( unit , x , y , 8 ) ;
29217: LD_VAR 0 2
29221: PPUSH
29222: LD_VAR 0 4
29226: PPUSH
29227: LD_VAR 0 5
29231: PPUSH
29232: LD_INT 8
29234: PPUSH
29235: CALL 29734 0 4
// end ;
29239: LD_VAR 0 6
29243: RET
// export function ComRadiation ( un ) ; var eff ; begin
29244: LD_INT 0
29246: PPUSH
29247: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
29248: LD_VAR 0 1
29252: PPUSH
29253: CALL_OW 264
29257: PUSH
29258: LD_INT 91
29260: NONEQUAL
29261: IFFALSE 29265
// exit ;
29263: GO 29335
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29265: LD_INT 68
29267: PPUSH
29268: LD_VAR 0 1
29272: PPUSH
29273: CALL_OW 255
29277: PPUSH
29278: CALL_OW 321
29282: PUSH
29283: LD_INT 2
29285: EQUAL
29286: IFFALSE 29298
// eff := 70 else
29288: LD_ADDR_VAR 0 3
29292: PUSH
29293: LD_INT 70
29295: ST_TO_ADDR
29296: GO 29306
// eff := 30 ;
29298: LD_ADDR_VAR 0 3
29302: PUSH
29303: LD_INT 30
29305: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29306: LD_VAR 0 1
29310: PPUSH
29311: CALL_OW 250
29315: PPUSH
29316: LD_VAR 0 1
29320: PPUSH
29321: CALL_OW 251
29325: PPUSH
29326: LD_VAR 0 3
29330: PPUSH
29331: CALL_OW 495
// end ;
29335: LD_VAR 0 2
29339: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29340: LD_INT 0
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
29351: LD_VAR 0 1
29355: PPUSH
29356: CALL_OW 302
29360: NOT
29361: PUSH
29362: LD_VAR 0 2
29366: PPUSH
29367: LD_VAR 0 3
29371: PPUSH
29372: CALL_OW 488
29376: NOT
29377: OR
29378: PUSH
29379: LD_VAR 0 4
29383: NOT
29384: OR
29385: IFFALSE 29389
// exit ;
29387: GO 29729
// list := [ ] ;
29389: LD_ADDR_VAR 0 13
29393: PUSH
29394: EMPTY
29395: ST_TO_ADDR
// if x - r < 0 then
29396: LD_VAR 0 2
29400: PUSH
29401: LD_VAR 0 4
29405: MINUS
29406: PUSH
29407: LD_INT 0
29409: LESS
29410: IFFALSE 29422
// min_x := 0 else
29412: LD_ADDR_VAR 0 7
29416: PUSH
29417: LD_INT 0
29419: ST_TO_ADDR
29420: GO 29438
// min_x := x - r ;
29422: LD_ADDR_VAR 0 7
29426: PUSH
29427: LD_VAR 0 2
29431: PUSH
29432: LD_VAR 0 4
29436: MINUS
29437: ST_TO_ADDR
// if y - r < 0 then
29438: LD_VAR 0 3
29442: PUSH
29443: LD_VAR 0 4
29447: MINUS
29448: PUSH
29449: LD_INT 0
29451: LESS
29452: IFFALSE 29464
// min_y := 0 else
29454: LD_ADDR_VAR 0 8
29458: PUSH
29459: LD_INT 0
29461: ST_TO_ADDR
29462: GO 29480
// min_y := y - r ;
29464: LD_ADDR_VAR 0 8
29468: PUSH
29469: LD_VAR 0 3
29473: PUSH
29474: LD_VAR 0 4
29478: MINUS
29479: ST_TO_ADDR
// max_x := x + r ;
29480: LD_ADDR_VAR 0 9
29484: PUSH
29485: LD_VAR 0 2
29489: PUSH
29490: LD_VAR 0 4
29494: PLUS
29495: ST_TO_ADDR
// max_y := y + r ;
29496: LD_ADDR_VAR 0 10
29500: PUSH
29501: LD_VAR 0 3
29505: PUSH
29506: LD_VAR 0 4
29510: PLUS
29511: ST_TO_ADDR
// for _x = min_x to max_x do
29512: LD_ADDR_VAR 0 11
29516: PUSH
29517: DOUBLE
29518: LD_VAR 0 7
29522: DEC
29523: ST_TO_ADDR
29524: LD_VAR 0 9
29528: PUSH
29529: FOR_TO
29530: IFFALSE 29647
// for _y = min_y to max_y do
29532: LD_ADDR_VAR 0 12
29536: PUSH
29537: DOUBLE
29538: LD_VAR 0 8
29542: DEC
29543: ST_TO_ADDR
29544: LD_VAR 0 10
29548: PUSH
29549: FOR_TO
29550: IFFALSE 29643
// begin if not ValidHex ( _x , _y ) then
29552: LD_VAR 0 11
29556: PPUSH
29557: LD_VAR 0 12
29561: PPUSH
29562: CALL_OW 488
29566: NOT
29567: IFFALSE 29571
// continue ;
29569: GO 29549
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29571: LD_VAR 0 11
29575: PPUSH
29576: LD_VAR 0 12
29580: PPUSH
29581: CALL_OW 351
29585: PUSH
29586: LD_VAR 0 11
29590: PPUSH
29591: LD_VAR 0 12
29595: PPUSH
29596: CALL_OW 554
29600: AND
29601: IFFALSE 29641
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29603: LD_ADDR_VAR 0 13
29607: PUSH
29608: LD_VAR 0 13
29612: PPUSH
29613: LD_VAR 0 13
29617: PUSH
29618: LD_INT 1
29620: PLUS
29621: PPUSH
29622: LD_VAR 0 11
29626: PUSH
29627: LD_VAR 0 12
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PPUSH
29636: CALL_OW 2
29640: ST_TO_ADDR
// end ;
29641: GO 29549
29643: POP
29644: POP
29645: GO 29529
29647: POP
29648: POP
// if not list then
29649: LD_VAR 0 13
29653: NOT
29654: IFFALSE 29658
// exit ;
29656: GO 29729
// for i in list do
29658: LD_ADDR_VAR 0 6
29662: PUSH
29663: LD_VAR 0 13
29667: PUSH
29668: FOR_IN
29669: IFFALSE 29727
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29671: LD_VAR 0 1
29675: PPUSH
29676: LD_STRING M
29678: PUSH
29679: LD_VAR 0 6
29683: PUSH
29684: LD_INT 1
29686: ARRAY
29687: PUSH
29688: LD_VAR 0 6
29692: PUSH
29693: LD_INT 2
29695: ARRAY
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: PUSH
29718: EMPTY
29719: LIST
29720: PPUSH
29721: CALL_OW 447
29725: GO 29668
29727: POP
29728: POP
// end ;
29729: LD_VAR 0 5
29733: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29734: LD_INT 0
29736: PPUSH
29737: PPUSH
29738: PPUSH
29739: PPUSH
29740: PPUSH
29741: PPUSH
29742: PPUSH
29743: PPUSH
29744: PPUSH
29745: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29746: LD_VAR 0 1
29750: PPUSH
29751: CALL_OW 302
29755: NOT
29756: PUSH
29757: LD_VAR 0 2
29761: PPUSH
29762: LD_VAR 0 3
29766: PPUSH
29767: CALL_OW 488
29771: NOT
29772: OR
29773: PUSH
29774: LD_VAR 0 4
29778: NOT
29779: OR
29780: IFFALSE 29784
// exit ;
29782: GO 30297
// list := [ ] ;
29784: LD_ADDR_VAR 0 13
29788: PUSH
29789: EMPTY
29790: ST_TO_ADDR
// if x - r < 0 then
29791: LD_VAR 0 2
29795: PUSH
29796: LD_VAR 0 4
29800: MINUS
29801: PUSH
29802: LD_INT 0
29804: LESS
29805: IFFALSE 29817
// min_x := 0 else
29807: LD_ADDR_VAR 0 7
29811: PUSH
29812: LD_INT 0
29814: ST_TO_ADDR
29815: GO 29833
// min_x := x - r ;
29817: LD_ADDR_VAR 0 7
29821: PUSH
29822: LD_VAR 0 2
29826: PUSH
29827: LD_VAR 0 4
29831: MINUS
29832: ST_TO_ADDR
// if y - r < 0 then
29833: LD_VAR 0 3
29837: PUSH
29838: LD_VAR 0 4
29842: MINUS
29843: PUSH
29844: LD_INT 0
29846: LESS
29847: IFFALSE 29859
// min_y := 0 else
29849: LD_ADDR_VAR 0 8
29853: PUSH
29854: LD_INT 0
29856: ST_TO_ADDR
29857: GO 29875
// min_y := y - r ;
29859: LD_ADDR_VAR 0 8
29863: PUSH
29864: LD_VAR 0 3
29868: PUSH
29869: LD_VAR 0 4
29873: MINUS
29874: ST_TO_ADDR
// max_x := x + r ;
29875: LD_ADDR_VAR 0 9
29879: PUSH
29880: LD_VAR 0 2
29884: PUSH
29885: LD_VAR 0 4
29889: PLUS
29890: ST_TO_ADDR
// max_y := y + r ;
29891: LD_ADDR_VAR 0 10
29895: PUSH
29896: LD_VAR 0 3
29900: PUSH
29901: LD_VAR 0 4
29905: PLUS
29906: ST_TO_ADDR
// for _x = min_x to max_x do
29907: LD_ADDR_VAR 0 11
29911: PUSH
29912: DOUBLE
29913: LD_VAR 0 7
29917: DEC
29918: ST_TO_ADDR
29919: LD_VAR 0 9
29923: PUSH
29924: FOR_TO
29925: IFFALSE 30042
// for _y = min_y to max_y do
29927: LD_ADDR_VAR 0 12
29931: PUSH
29932: DOUBLE
29933: LD_VAR 0 8
29937: DEC
29938: ST_TO_ADDR
29939: LD_VAR 0 10
29943: PUSH
29944: FOR_TO
29945: IFFALSE 30038
// begin if not ValidHex ( _x , _y ) then
29947: LD_VAR 0 11
29951: PPUSH
29952: LD_VAR 0 12
29956: PPUSH
29957: CALL_OW 488
29961: NOT
29962: IFFALSE 29966
// continue ;
29964: GO 29944
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29966: LD_VAR 0 11
29970: PPUSH
29971: LD_VAR 0 12
29975: PPUSH
29976: CALL_OW 351
29980: PUSH
29981: LD_VAR 0 11
29985: PPUSH
29986: LD_VAR 0 12
29990: PPUSH
29991: CALL_OW 554
29995: AND
29996: IFFALSE 30036
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29998: LD_ADDR_VAR 0 13
30002: PUSH
30003: LD_VAR 0 13
30007: PPUSH
30008: LD_VAR 0 13
30012: PUSH
30013: LD_INT 1
30015: PLUS
30016: PPUSH
30017: LD_VAR 0 11
30021: PUSH
30022: LD_VAR 0 12
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PPUSH
30031: CALL_OW 2
30035: ST_TO_ADDR
// end ;
30036: GO 29944
30038: POP
30039: POP
30040: GO 29924
30042: POP
30043: POP
// if not list then
30044: LD_VAR 0 13
30048: NOT
30049: IFFALSE 30053
// exit ;
30051: GO 30297
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
30053: LD_ADDR_VAR 0 13
30057: PUSH
30058: LD_VAR 0 1
30062: PPUSH
30063: LD_VAR 0 13
30067: PPUSH
30068: LD_INT 1
30070: PPUSH
30071: LD_INT 1
30073: PPUSH
30074: CALL 39010 0 4
30078: ST_TO_ADDR
// ComStop ( flame ) ;
30079: LD_VAR 0 1
30083: PPUSH
30084: CALL_OW 141
// for i in list do
30088: LD_ADDR_VAR 0 6
30092: PUSH
30093: LD_VAR 0 13
30097: PUSH
30098: FOR_IN
30099: IFFALSE 30130
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
30101: LD_VAR 0 1
30105: PPUSH
30106: LD_VAR 0 6
30110: PUSH
30111: LD_INT 1
30113: ARRAY
30114: PPUSH
30115: LD_VAR 0 6
30119: PUSH
30120: LD_INT 2
30122: ARRAY
30123: PPUSH
30124: CALL_OW 176
30128: GO 30098
30130: POP
30131: POP
// repeat wait ( 0 0$1 ) ;
30132: LD_INT 35
30134: PPUSH
30135: CALL_OW 67
// task := GetTaskList ( flame ) ;
30139: LD_ADDR_VAR 0 14
30143: PUSH
30144: LD_VAR 0 1
30148: PPUSH
30149: CALL_OW 437
30153: ST_TO_ADDR
// if not task then
30154: LD_VAR 0 14
30158: NOT
30159: IFFALSE 30163
// exit ;
30161: GO 30297
// if task [ 1 ] [ 1 ] <> | then
30163: LD_VAR 0 14
30167: PUSH
30168: LD_INT 1
30170: ARRAY
30171: PUSH
30172: LD_INT 1
30174: ARRAY
30175: PUSH
30176: LD_STRING |
30178: NONEQUAL
30179: IFFALSE 30183
// exit ;
30181: GO 30297
// _x := task [ 1 ] [ 2 ] ;
30183: LD_ADDR_VAR 0 11
30187: PUSH
30188: LD_VAR 0 14
30192: PUSH
30193: LD_INT 1
30195: ARRAY
30196: PUSH
30197: LD_INT 2
30199: ARRAY
30200: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
30201: LD_ADDR_VAR 0 12
30205: PUSH
30206: LD_VAR 0 14
30210: PUSH
30211: LD_INT 1
30213: ARRAY
30214: PUSH
30215: LD_INT 3
30217: ARRAY
30218: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
30219: LD_VAR 0 11
30223: PPUSH
30224: LD_VAR 0 12
30228: PPUSH
30229: CALL_OW 351
30233: NOT
30234: PUSH
30235: LD_VAR 0 11
30239: PPUSH
30240: LD_VAR 0 12
30244: PPUSH
30245: CALL_OW 554
30249: NOT
30250: OR
30251: IFFALSE 30285
// begin task := Delete ( task , 1 ) ;
30253: LD_ADDR_VAR 0 14
30257: PUSH
30258: LD_VAR 0 14
30262: PPUSH
30263: LD_INT 1
30265: PPUSH
30266: CALL_OW 3
30270: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
30271: LD_VAR 0 1
30275: PPUSH
30276: LD_VAR 0 14
30280: PPUSH
30281: CALL_OW 446
// end ; until not HasTask ( flame ) ;
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL_OW 314
30294: NOT
30295: IFFALSE 30132
// end ;
30297: LD_VAR 0 5
30301: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30302: LD_EXP 83
30306: NOT
30307: IFFALSE 30357
30309: GO 30311
30311: DISABLE
// begin initHack := true ;
30312: LD_ADDR_EXP 83
30316: PUSH
30317: LD_INT 1
30319: ST_TO_ADDR
// hackTanks := [ ] ;
30320: LD_ADDR_EXP 84
30324: PUSH
30325: EMPTY
30326: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30327: LD_ADDR_EXP 85
30331: PUSH
30332: EMPTY
30333: ST_TO_ADDR
// hackLimit := 3 ;
30334: LD_ADDR_EXP 86
30338: PUSH
30339: LD_INT 3
30341: ST_TO_ADDR
// hackDist := 12 ;
30342: LD_ADDR_EXP 87
30346: PUSH
30347: LD_INT 12
30349: ST_TO_ADDR
// hackCounter := [ ] ;
30350: LD_ADDR_EXP 88
30354: PUSH
30355: EMPTY
30356: ST_TO_ADDR
// end ;
30357: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30358: LD_EXP 83
30362: PUSH
30363: LD_INT 34
30365: PUSH
30366: LD_INT 99
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PPUSH
30373: CALL_OW 69
30377: AND
30378: IFFALSE 30631
30380: GO 30382
30382: DISABLE
30383: LD_INT 0
30385: PPUSH
30386: PPUSH
// begin enable ;
30387: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30388: LD_ADDR_VAR 0 1
30392: PUSH
30393: LD_INT 34
30395: PUSH
30396: LD_INT 99
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PPUSH
30403: CALL_OW 69
30407: PUSH
30408: FOR_IN
30409: IFFALSE 30629
// begin if not i in hackTanks then
30411: LD_VAR 0 1
30415: PUSH
30416: LD_EXP 84
30420: IN
30421: NOT
30422: IFFALSE 30505
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30424: LD_ADDR_EXP 84
30428: PUSH
30429: LD_EXP 84
30433: PPUSH
30434: LD_EXP 84
30438: PUSH
30439: LD_INT 1
30441: PLUS
30442: PPUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL_OW 1
30452: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30453: LD_ADDR_EXP 85
30457: PUSH
30458: LD_EXP 85
30462: PPUSH
30463: LD_EXP 85
30467: PUSH
30468: LD_INT 1
30470: PLUS
30471: PPUSH
30472: EMPTY
30473: PPUSH
30474: CALL_OW 1
30478: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30479: LD_ADDR_EXP 88
30483: PUSH
30484: LD_EXP 88
30488: PPUSH
30489: LD_EXP 88
30493: PUSH
30494: LD_INT 1
30496: PLUS
30497: PPUSH
30498: EMPTY
30499: PPUSH
30500: CALL_OW 1
30504: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30505: LD_VAR 0 1
30509: PPUSH
30510: CALL_OW 302
30514: NOT
30515: IFFALSE 30528
// begin HackUnlinkAll ( i ) ;
30517: LD_VAR 0 1
30521: PPUSH
30522: CALL 30634 0 1
// continue ;
30526: GO 30408
// end ; HackCheckCapturedStatus ( i ) ;
30528: LD_VAR 0 1
30532: PPUSH
30533: CALL 31077 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30537: LD_ADDR_VAR 0 2
30541: PUSH
30542: LD_INT 81
30544: PUSH
30545: LD_VAR 0 1
30549: PPUSH
30550: CALL_OW 255
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 33
30561: PUSH
30562: LD_INT 3
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 91
30571: PUSH
30572: LD_VAR 0 1
30576: PUSH
30577: LD_EXP 87
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 50
30589: PUSH
30590: EMPTY
30591: LIST
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: PPUSH
30599: CALL_OW 69
30603: ST_TO_ADDR
// if not tmp then
30604: LD_VAR 0 2
30608: NOT
30609: IFFALSE 30613
// continue ;
30611: GO 30408
// HackLink ( i , tmp ) ;
30613: LD_VAR 0 1
30617: PPUSH
30618: LD_VAR 0 2
30622: PPUSH
30623: CALL 30770 0 2
// end ;
30627: GO 30408
30629: POP
30630: POP
// end ;
30631: PPOPN 2
30633: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30634: LD_INT 0
30636: PPUSH
30637: PPUSH
30638: PPUSH
// if not hack in hackTanks then
30639: LD_VAR 0 1
30643: PUSH
30644: LD_EXP 84
30648: IN
30649: NOT
30650: IFFALSE 30654
// exit ;
30652: GO 30765
// index := GetElementIndex ( hackTanks , hack ) ;
30654: LD_ADDR_VAR 0 4
30658: PUSH
30659: LD_EXP 84
30663: PPUSH
30664: LD_VAR 0 1
30668: PPUSH
30669: CALL 38307 0 2
30673: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30674: LD_EXP 85
30678: PUSH
30679: LD_VAR 0 4
30683: ARRAY
30684: IFFALSE 30765
// begin for i in hackTanksCaptured [ index ] do
30686: LD_ADDR_VAR 0 3
30690: PUSH
30691: LD_EXP 85
30695: PUSH
30696: LD_VAR 0 4
30700: ARRAY
30701: PUSH
30702: FOR_IN
30703: IFFALSE 30729
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30705: LD_VAR 0 3
30709: PUSH
30710: LD_INT 1
30712: ARRAY
30713: PPUSH
30714: LD_VAR 0 3
30718: PUSH
30719: LD_INT 2
30721: ARRAY
30722: PPUSH
30723: CALL_OW 235
30727: GO 30702
30729: POP
30730: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30731: LD_ADDR_EXP 85
30735: PUSH
30736: LD_EXP 85
30740: PPUSH
30741: LD_VAR 0 4
30745: PPUSH
30746: EMPTY
30747: PPUSH
30748: CALL_OW 1
30752: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_INT 0
30760: PPUSH
30761: CALL_OW 505
// end ; end ;
30765: LD_VAR 0 2
30769: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30770: LD_INT 0
30772: PPUSH
30773: PPUSH
30774: PPUSH
// if not hack in hackTanks or not vehicles then
30775: LD_VAR 0 1
30779: PUSH
30780: LD_EXP 84
30784: IN
30785: NOT
30786: PUSH
30787: LD_VAR 0 2
30791: NOT
30792: OR
30793: IFFALSE 30797
// exit ;
30795: GO 31072
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30797: LD_ADDR_VAR 0 2
30801: PUSH
30802: LD_VAR 0 1
30806: PPUSH
30807: LD_VAR 0 2
30811: PPUSH
30812: LD_INT 1
30814: PPUSH
30815: LD_INT 1
30817: PPUSH
30818: CALL 38957 0 4
30822: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30823: LD_ADDR_VAR 0 5
30827: PUSH
30828: LD_EXP 84
30832: PPUSH
30833: LD_VAR 0 1
30837: PPUSH
30838: CALL 38307 0 2
30842: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30843: LD_EXP 85
30847: PUSH
30848: LD_VAR 0 5
30852: ARRAY
30853: PUSH
30854: LD_EXP 86
30858: LESS
30859: IFFALSE 31048
// begin for i := 1 to vehicles do
30861: LD_ADDR_VAR 0 4
30865: PUSH
30866: DOUBLE
30867: LD_INT 1
30869: DEC
30870: ST_TO_ADDR
30871: LD_VAR 0 2
30875: PUSH
30876: FOR_TO
30877: IFFALSE 31046
// begin if hackTanksCaptured [ index ] = hackLimit then
30879: LD_EXP 85
30883: PUSH
30884: LD_VAR 0 5
30888: ARRAY
30889: PUSH
30890: LD_EXP 86
30894: EQUAL
30895: IFFALSE 30899
// break ;
30897: GO 31046
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30899: LD_ADDR_EXP 88
30903: PUSH
30904: LD_EXP 88
30908: PPUSH
30909: LD_VAR 0 5
30913: PPUSH
30914: LD_EXP 88
30918: PUSH
30919: LD_VAR 0 5
30923: ARRAY
30924: PUSH
30925: LD_INT 1
30927: PLUS
30928: PPUSH
30929: CALL_OW 1
30933: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30934: LD_ADDR_EXP 85
30938: PUSH
30939: LD_EXP 85
30943: PPUSH
30944: LD_VAR 0 5
30948: PUSH
30949: LD_EXP 85
30953: PUSH
30954: LD_VAR 0 5
30958: ARRAY
30959: PUSH
30960: LD_INT 1
30962: PLUS
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PPUSH
30968: LD_VAR 0 2
30972: PUSH
30973: LD_VAR 0 4
30977: ARRAY
30978: PUSH
30979: LD_VAR 0 2
30983: PUSH
30984: LD_VAR 0 4
30988: ARRAY
30989: PPUSH
30990: CALL_OW 255
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PPUSH
30999: CALL 38522 0 3
31003: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31004: LD_VAR 0 2
31008: PUSH
31009: LD_VAR 0 4
31013: ARRAY
31014: PPUSH
31015: LD_VAR 0 1
31019: PPUSH
31020: CALL_OW 255
31024: PPUSH
31025: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31029: LD_VAR 0 2
31033: PUSH
31034: LD_VAR 0 4
31038: ARRAY
31039: PPUSH
31040: CALL_OW 141
// end ;
31044: GO 30876
31046: POP
31047: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31048: LD_VAR 0 1
31052: PPUSH
31053: LD_EXP 85
31057: PUSH
31058: LD_VAR 0 5
31062: ARRAY
31063: PUSH
31064: LD_INT 0
31066: PLUS
31067: PPUSH
31068: CALL_OW 505
// end ;
31072: LD_VAR 0 3
31076: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31077: LD_INT 0
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
// if not hack in hackTanks then
31083: LD_VAR 0 1
31087: PUSH
31088: LD_EXP 84
31092: IN
31093: NOT
31094: IFFALSE 31098
// exit ;
31096: GO 31338
// index := GetElementIndex ( hackTanks , hack ) ;
31098: LD_ADDR_VAR 0 4
31102: PUSH
31103: LD_EXP 84
31107: PPUSH
31108: LD_VAR 0 1
31112: PPUSH
31113: CALL 38307 0 2
31117: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31118: LD_ADDR_VAR 0 3
31122: PUSH
31123: DOUBLE
31124: LD_EXP 85
31128: PUSH
31129: LD_VAR 0 4
31133: ARRAY
31134: INC
31135: ST_TO_ADDR
31136: LD_INT 1
31138: PUSH
31139: FOR_DOWNTO
31140: IFFALSE 31312
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31142: LD_ADDR_VAR 0 5
31146: PUSH
31147: LD_EXP 85
31151: PUSH
31152: LD_VAR 0 4
31156: ARRAY
31157: PUSH
31158: LD_VAR 0 3
31162: ARRAY
31163: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31164: LD_VAR 0 5
31168: PUSH
31169: LD_INT 1
31171: ARRAY
31172: PPUSH
31173: CALL_OW 302
31177: NOT
31178: PUSH
31179: LD_VAR 0 5
31183: PUSH
31184: LD_INT 1
31186: ARRAY
31187: PPUSH
31188: CALL_OW 255
31192: PUSH
31193: LD_VAR 0 1
31197: PPUSH
31198: CALL_OW 255
31202: NONEQUAL
31203: OR
31204: IFFALSE 31310
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31206: LD_VAR 0 5
31210: PUSH
31211: LD_INT 1
31213: ARRAY
31214: PPUSH
31215: CALL_OW 305
31219: PUSH
31220: LD_VAR 0 5
31224: PUSH
31225: LD_INT 1
31227: ARRAY
31228: PPUSH
31229: CALL_OW 255
31233: PUSH
31234: LD_VAR 0 1
31238: PPUSH
31239: CALL_OW 255
31243: EQUAL
31244: AND
31245: IFFALSE 31269
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31247: LD_VAR 0 5
31251: PUSH
31252: LD_INT 1
31254: ARRAY
31255: PPUSH
31256: LD_VAR 0 5
31260: PUSH
31261: LD_INT 2
31263: ARRAY
31264: PPUSH
31265: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31269: LD_ADDR_EXP 85
31273: PUSH
31274: LD_EXP 85
31278: PPUSH
31279: LD_VAR 0 4
31283: PPUSH
31284: LD_EXP 85
31288: PUSH
31289: LD_VAR 0 4
31293: ARRAY
31294: PPUSH
31295: LD_VAR 0 3
31299: PPUSH
31300: CALL_OW 3
31304: PPUSH
31305: CALL_OW 1
31309: ST_TO_ADDR
// end ; end ;
31310: GO 31139
31312: POP
31313: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31314: LD_VAR 0 1
31318: PPUSH
31319: LD_EXP 85
31323: PUSH
31324: LD_VAR 0 4
31328: ARRAY
31329: PUSH
31330: LD_INT 0
31332: PLUS
31333: PPUSH
31334: CALL_OW 505
// end ;
31338: LD_VAR 0 2
31342: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31343: LD_INT 0
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
// if not hack in hackTanks then
31349: LD_VAR 0 1
31353: PUSH
31354: LD_EXP 84
31358: IN
31359: NOT
31360: IFFALSE 31364
// exit ;
31362: GO 31449
// index := GetElementIndex ( hackTanks , hack ) ;
31364: LD_ADDR_VAR 0 5
31368: PUSH
31369: LD_EXP 84
31373: PPUSH
31374: LD_VAR 0 1
31378: PPUSH
31379: CALL 38307 0 2
31383: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31384: LD_ADDR_VAR 0 4
31388: PUSH
31389: DOUBLE
31390: LD_INT 1
31392: DEC
31393: ST_TO_ADDR
31394: LD_EXP 85
31398: PUSH
31399: LD_VAR 0 5
31403: ARRAY
31404: PUSH
31405: FOR_TO
31406: IFFALSE 31447
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31408: LD_EXP 85
31412: PUSH
31413: LD_VAR 0 5
31417: ARRAY
31418: PUSH
31419: LD_VAR 0 4
31423: ARRAY
31424: PUSH
31425: LD_INT 1
31427: ARRAY
31428: PUSH
31429: LD_VAR 0 2
31433: EQUAL
31434: IFFALSE 31445
// KillUnit ( vehicle ) ;
31436: LD_VAR 0 2
31440: PPUSH
31441: CALL_OW 66
31445: GO 31405
31447: POP
31448: POP
// end ;
31449: LD_VAR 0 3
31453: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31454: LD_EXP 89
31458: NOT
31459: IFFALSE 31494
31461: GO 31463
31463: DISABLE
// begin initMiner := true ;
31464: LD_ADDR_EXP 89
31468: PUSH
31469: LD_INT 1
31471: ST_TO_ADDR
// minersList := [ ] ;
31472: LD_ADDR_EXP 90
31476: PUSH
31477: EMPTY
31478: ST_TO_ADDR
// minerMinesList := [ ] ;
31479: LD_ADDR_EXP 91
31483: PUSH
31484: EMPTY
31485: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31486: LD_ADDR_EXP 92
31490: PUSH
31491: LD_INT 5
31493: ST_TO_ADDR
// end ;
31494: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31495: LD_EXP 89
31499: PUSH
31500: LD_INT 34
31502: PUSH
31503: LD_INT 81
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PPUSH
31510: CALL_OW 69
31514: AND
31515: IFFALSE 31976
31517: GO 31519
31519: DISABLE
31520: LD_INT 0
31522: PPUSH
31523: PPUSH
31524: PPUSH
31525: PPUSH
// begin enable ;
31526: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31527: LD_ADDR_VAR 0 1
31531: PUSH
31532: LD_INT 34
31534: PUSH
31535: LD_INT 81
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PPUSH
31542: CALL_OW 69
31546: PUSH
31547: FOR_IN
31548: IFFALSE 31620
// begin if not i in minersList then
31550: LD_VAR 0 1
31554: PUSH
31555: LD_EXP 90
31559: IN
31560: NOT
31561: IFFALSE 31618
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31563: LD_ADDR_EXP 90
31567: PUSH
31568: LD_EXP 90
31572: PPUSH
31573: LD_EXP 90
31577: PUSH
31578: LD_INT 1
31580: PLUS
31581: PPUSH
31582: LD_VAR 0 1
31586: PPUSH
31587: CALL_OW 1
31591: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31592: LD_ADDR_EXP 91
31596: PUSH
31597: LD_EXP 91
31601: PPUSH
31602: LD_EXP 91
31606: PUSH
31607: LD_INT 1
31609: PLUS
31610: PPUSH
31611: EMPTY
31612: PPUSH
31613: CALL_OW 1
31617: ST_TO_ADDR
// end end ;
31618: GO 31547
31620: POP
31621: POP
// for i := minerMinesList downto 1 do
31622: LD_ADDR_VAR 0 1
31626: PUSH
31627: DOUBLE
31628: LD_EXP 91
31632: INC
31633: ST_TO_ADDR
31634: LD_INT 1
31636: PUSH
31637: FOR_DOWNTO
31638: IFFALSE 31974
// begin if IsLive ( minersList [ i ] ) then
31640: LD_EXP 90
31644: PUSH
31645: LD_VAR 0 1
31649: ARRAY
31650: PPUSH
31651: CALL_OW 300
31655: IFFALSE 31683
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31657: LD_EXP 90
31661: PUSH
31662: LD_VAR 0 1
31666: ARRAY
31667: PPUSH
31668: LD_EXP 91
31672: PUSH
31673: LD_VAR 0 1
31677: ARRAY
31678: PPUSH
31679: CALL_OW 505
// if not minerMinesList [ i ] then
31683: LD_EXP 91
31687: PUSH
31688: LD_VAR 0 1
31692: ARRAY
31693: NOT
31694: IFFALSE 31698
// continue ;
31696: GO 31637
// for j := minerMinesList [ i ] downto 1 do
31698: LD_ADDR_VAR 0 2
31702: PUSH
31703: DOUBLE
31704: LD_EXP 91
31708: PUSH
31709: LD_VAR 0 1
31713: ARRAY
31714: INC
31715: ST_TO_ADDR
31716: LD_INT 1
31718: PUSH
31719: FOR_DOWNTO
31720: IFFALSE 31970
// begin side := GetSide ( minersList [ i ] ) ;
31722: LD_ADDR_VAR 0 3
31726: PUSH
31727: LD_EXP 90
31731: PUSH
31732: LD_VAR 0 1
31736: ARRAY
31737: PPUSH
31738: CALL_OW 255
31742: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31743: LD_ADDR_VAR 0 4
31747: PUSH
31748: LD_EXP 91
31752: PUSH
31753: LD_VAR 0 1
31757: ARRAY
31758: PUSH
31759: LD_VAR 0 2
31763: ARRAY
31764: PUSH
31765: LD_INT 1
31767: ARRAY
31768: PPUSH
31769: LD_EXP 91
31773: PUSH
31774: LD_VAR 0 1
31778: ARRAY
31779: PUSH
31780: LD_VAR 0 2
31784: ARRAY
31785: PUSH
31786: LD_INT 2
31788: ARRAY
31789: PPUSH
31790: CALL_OW 428
31794: ST_TO_ADDR
// if not tmp then
31795: LD_VAR 0 4
31799: NOT
31800: IFFALSE 31804
// continue ;
31802: GO 31719
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31804: LD_VAR 0 4
31808: PUSH
31809: LD_INT 81
31811: PUSH
31812: LD_VAR 0 3
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PPUSH
31821: CALL_OW 69
31825: IN
31826: PUSH
31827: LD_EXP 91
31831: PUSH
31832: LD_VAR 0 1
31836: ARRAY
31837: PUSH
31838: LD_VAR 0 2
31842: ARRAY
31843: PUSH
31844: LD_INT 1
31846: ARRAY
31847: PPUSH
31848: LD_EXP 91
31852: PUSH
31853: LD_VAR 0 1
31857: ARRAY
31858: PUSH
31859: LD_VAR 0 2
31863: ARRAY
31864: PUSH
31865: LD_INT 2
31867: ARRAY
31868: PPUSH
31869: CALL_OW 458
31873: AND
31874: IFFALSE 31968
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31876: LD_EXP 91
31880: PUSH
31881: LD_VAR 0 1
31885: ARRAY
31886: PUSH
31887: LD_VAR 0 2
31891: ARRAY
31892: PUSH
31893: LD_INT 1
31895: ARRAY
31896: PPUSH
31897: LD_EXP 91
31901: PUSH
31902: LD_VAR 0 1
31906: ARRAY
31907: PUSH
31908: LD_VAR 0 2
31912: ARRAY
31913: PUSH
31914: LD_INT 2
31916: ARRAY
31917: PPUSH
31918: LD_VAR 0 3
31922: PPUSH
31923: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31927: LD_ADDR_EXP 91
31931: PUSH
31932: LD_EXP 91
31936: PPUSH
31937: LD_VAR 0 1
31941: PPUSH
31942: LD_EXP 91
31946: PUSH
31947: LD_VAR 0 1
31951: ARRAY
31952: PPUSH
31953: LD_VAR 0 2
31957: PPUSH
31958: CALL_OW 3
31962: PPUSH
31963: CALL_OW 1
31967: ST_TO_ADDR
// end ; end ;
31968: GO 31719
31970: POP
31971: POP
// end ;
31972: GO 31637
31974: POP
31975: POP
// end ;
31976: PPOPN 4
31978: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31979: LD_INT 0
31981: PPUSH
31982: PPUSH
// result := false ;
31983: LD_ADDR_VAR 0 4
31987: PUSH
31988: LD_INT 0
31990: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31991: LD_VAR 0 1
31995: PPUSH
31996: CALL_OW 264
32000: PUSH
32001: LD_INT 81
32003: EQUAL
32004: NOT
32005: IFFALSE 32009
// exit ;
32007: GO 32249
// index := GetElementIndex ( minersList , unit ) ;
32009: LD_ADDR_VAR 0 5
32013: PUSH
32014: LD_EXP 90
32018: PPUSH
32019: LD_VAR 0 1
32023: PPUSH
32024: CALL 38307 0 2
32028: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32029: LD_EXP 91
32033: PUSH
32034: LD_VAR 0 5
32038: ARRAY
32039: PUSH
32040: LD_EXP 92
32044: GREATEREQUAL
32045: IFFALSE 32049
// exit ;
32047: GO 32249
// ComMoveXY ( unit , x , y ) ;
32049: LD_VAR 0 1
32053: PPUSH
32054: LD_VAR 0 2
32058: PPUSH
32059: LD_VAR 0 3
32063: PPUSH
32064: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32068: LD_INT 35
32070: PPUSH
32071: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32075: LD_VAR 0 1
32079: PPUSH
32080: LD_VAR 0 2
32084: PPUSH
32085: LD_VAR 0 3
32089: PPUSH
32090: CALL 70068 0 3
32094: NOT
32095: PUSH
32096: LD_VAR 0 1
32100: PPUSH
32101: CALL_OW 314
32105: AND
32106: IFFALSE 32110
// exit ;
32108: GO 32249
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32110: LD_VAR 0 2
32114: PPUSH
32115: LD_VAR 0 3
32119: PPUSH
32120: CALL_OW 428
32124: PUSH
32125: LD_VAR 0 1
32129: EQUAL
32130: PUSH
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 314
32140: NOT
32141: AND
32142: IFFALSE 32068
// PlaySoundXY ( x , y , PlantMine ) ;
32144: LD_VAR 0 2
32148: PPUSH
32149: LD_VAR 0 3
32153: PPUSH
32154: LD_STRING PlantMine
32156: PPUSH
32157: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32161: LD_VAR 0 2
32165: PPUSH
32166: LD_VAR 0 3
32170: PPUSH
32171: LD_VAR 0 1
32175: PPUSH
32176: CALL_OW 255
32180: PPUSH
32181: LD_INT 0
32183: PPUSH
32184: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32188: LD_ADDR_EXP 91
32192: PUSH
32193: LD_EXP 91
32197: PPUSH
32198: LD_VAR 0 5
32202: PUSH
32203: LD_EXP 91
32207: PUSH
32208: LD_VAR 0 5
32212: ARRAY
32213: PUSH
32214: LD_INT 1
32216: PLUS
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PPUSH
32222: LD_VAR 0 2
32226: PUSH
32227: LD_VAR 0 3
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PPUSH
32236: CALL 38522 0 3
32240: ST_TO_ADDR
// result := true ;
32241: LD_ADDR_VAR 0 4
32245: PUSH
32246: LD_INT 1
32248: ST_TO_ADDR
// end ;
32249: LD_VAR 0 4
32253: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32254: LD_INT 0
32256: PPUSH
32257: PPUSH
32258: PPUSH
// if not unit in minersList then
32259: LD_VAR 0 1
32263: PUSH
32264: LD_EXP 90
32268: IN
32269: NOT
32270: IFFALSE 32274
// exit ;
32272: GO 32666
// index := GetElementIndex ( minersList , unit ) ;
32274: LD_ADDR_VAR 0 6
32278: PUSH
32279: LD_EXP 90
32283: PPUSH
32284: LD_VAR 0 1
32288: PPUSH
32289: CALL 38307 0 2
32293: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32294: LD_ADDR_VAR 0 5
32298: PUSH
32299: DOUBLE
32300: LD_EXP 91
32304: PUSH
32305: LD_VAR 0 6
32309: ARRAY
32310: INC
32311: ST_TO_ADDR
32312: LD_INT 1
32314: PUSH
32315: FOR_DOWNTO
32316: IFFALSE 32477
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32318: LD_EXP 91
32322: PUSH
32323: LD_VAR 0 6
32327: ARRAY
32328: PUSH
32329: LD_VAR 0 5
32333: ARRAY
32334: PUSH
32335: LD_INT 1
32337: ARRAY
32338: PUSH
32339: LD_VAR 0 2
32343: EQUAL
32344: PUSH
32345: LD_EXP 91
32349: PUSH
32350: LD_VAR 0 6
32354: ARRAY
32355: PUSH
32356: LD_VAR 0 5
32360: ARRAY
32361: PUSH
32362: LD_INT 2
32364: ARRAY
32365: PUSH
32366: LD_VAR 0 3
32370: EQUAL
32371: AND
32372: IFFALSE 32475
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32374: LD_EXP 91
32378: PUSH
32379: LD_VAR 0 6
32383: ARRAY
32384: PUSH
32385: LD_VAR 0 5
32389: ARRAY
32390: PUSH
32391: LD_INT 1
32393: ARRAY
32394: PPUSH
32395: LD_EXP 91
32399: PUSH
32400: LD_VAR 0 6
32404: ARRAY
32405: PUSH
32406: LD_VAR 0 5
32410: ARRAY
32411: PUSH
32412: LD_INT 2
32414: ARRAY
32415: PPUSH
32416: LD_VAR 0 1
32420: PPUSH
32421: CALL_OW 255
32425: PPUSH
32426: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32430: LD_ADDR_EXP 91
32434: PUSH
32435: LD_EXP 91
32439: PPUSH
32440: LD_VAR 0 6
32444: PPUSH
32445: LD_EXP 91
32449: PUSH
32450: LD_VAR 0 6
32454: ARRAY
32455: PPUSH
32456: LD_VAR 0 5
32460: PPUSH
32461: CALL_OW 3
32465: PPUSH
32466: CALL_OW 1
32470: ST_TO_ADDR
// exit ;
32471: POP
32472: POP
32473: GO 32666
// end ; end ;
32475: GO 32315
32477: POP
32478: POP
// for i := minerMinesList [ index ] downto 1 do
32479: LD_ADDR_VAR 0 5
32483: PUSH
32484: DOUBLE
32485: LD_EXP 91
32489: PUSH
32490: LD_VAR 0 6
32494: ARRAY
32495: INC
32496: ST_TO_ADDR
32497: LD_INT 1
32499: PUSH
32500: FOR_DOWNTO
32501: IFFALSE 32664
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32503: LD_EXP 91
32507: PUSH
32508: LD_VAR 0 6
32512: ARRAY
32513: PUSH
32514: LD_VAR 0 5
32518: ARRAY
32519: PUSH
32520: LD_INT 1
32522: ARRAY
32523: PPUSH
32524: LD_EXP 91
32528: PUSH
32529: LD_VAR 0 6
32533: ARRAY
32534: PUSH
32535: LD_VAR 0 5
32539: ARRAY
32540: PUSH
32541: LD_INT 2
32543: ARRAY
32544: PPUSH
32545: LD_VAR 0 2
32549: PPUSH
32550: LD_VAR 0 3
32554: PPUSH
32555: CALL_OW 298
32559: PUSH
32560: LD_INT 6
32562: LESS
32563: IFFALSE 32662
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32565: LD_EXP 91
32569: PUSH
32570: LD_VAR 0 6
32574: ARRAY
32575: PUSH
32576: LD_VAR 0 5
32580: ARRAY
32581: PUSH
32582: LD_INT 1
32584: ARRAY
32585: PPUSH
32586: LD_EXP 91
32590: PUSH
32591: LD_VAR 0 6
32595: ARRAY
32596: PUSH
32597: LD_VAR 0 5
32601: ARRAY
32602: PUSH
32603: LD_INT 2
32605: ARRAY
32606: PPUSH
32607: LD_VAR 0 1
32611: PPUSH
32612: CALL_OW 255
32616: PPUSH
32617: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32621: LD_ADDR_EXP 91
32625: PUSH
32626: LD_EXP 91
32630: PPUSH
32631: LD_VAR 0 6
32635: PPUSH
32636: LD_EXP 91
32640: PUSH
32641: LD_VAR 0 6
32645: ARRAY
32646: PPUSH
32647: LD_VAR 0 5
32651: PPUSH
32652: CALL_OW 3
32656: PPUSH
32657: CALL_OW 1
32661: ST_TO_ADDR
// end ; end ;
32662: GO 32500
32664: POP
32665: POP
// end ;
32666: LD_VAR 0 4
32670: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32671: LD_INT 0
32673: PPUSH
32674: PPUSH
32675: PPUSH
32676: PPUSH
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32682: LD_VAR 0 1
32686: PPUSH
32687: CALL_OW 264
32691: PUSH
32692: LD_INT 81
32694: EQUAL
32695: NOT
32696: PUSH
32697: LD_VAR 0 1
32701: PUSH
32702: LD_EXP 90
32706: IN
32707: NOT
32708: OR
32709: IFFALSE 32713
// exit ;
32711: GO 33035
// index := GetElementIndex ( minersList , unit ) ;
32713: LD_ADDR_VAR 0 6
32717: PUSH
32718: LD_EXP 90
32722: PPUSH
32723: LD_VAR 0 1
32727: PPUSH
32728: CALL 38307 0 2
32732: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32733: LD_ADDR_VAR 0 8
32737: PUSH
32738: LD_EXP 92
32742: PUSH
32743: LD_EXP 91
32747: PUSH
32748: LD_VAR 0 6
32752: ARRAY
32753: MINUS
32754: ST_TO_ADDR
// if not minesFreeAmount then
32755: LD_VAR 0 8
32759: NOT
32760: IFFALSE 32764
// exit ;
32762: GO 33035
// tmp := [ ] ;
32764: LD_ADDR_VAR 0 7
32768: PUSH
32769: EMPTY
32770: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32771: LD_ADDR_VAR 0 5
32775: PUSH
32776: DOUBLE
32777: LD_INT 1
32779: DEC
32780: ST_TO_ADDR
32781: LD_VAR 0 8
32785: PUSH
32786: FOR_TO
32787: IFFALSE 32982
// begin _d := rand ( 0 , 5 ) ;
32789: LD_ADDR_VAR 0 11
32793: PUSH
32794: LD_INT 0
32796: PPUSH
32797: LD_INT 5
32799: PPUSH
32800: CALL_OW 12
32804: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32805: LD_ADDR_VAR 0 12
32809: PUSH
32810: LD_INT 2
32812: PPUSH
32813: LD_INT 6
32815: PPUSH
32816: CALL_OW 12
32820: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32821: LD_ADDR_VAR 0 9
32825: PUSH
32826: LD_VAR 0 2
32830: PPUSH
32831: LD_VAR 0 11
32835: PPUSH
32836: LD_VAR 0 12
32840: PPUSH
32841: CALL_OW 272
32845: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32846: LD_ADDR_VAR 0 10
32850: PUSH
32851: LD_VAR 0 3
32855: PPUSH
32856: LD_VAR 0 11
32860: PPUSH
32861: LD_VAR 0 12
32865: PPUSH
32866: CALL_OW 273
32870: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32871: LD_VAR 0 9
32875: PPUSH
32876: LD_VAR 0 10
32880: PPUSH
32881: CALL_OW 488
32885: PUSH
32886: LD_VAR 0 9
32890: PUSH
32891: LD_VAR 0 10
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_VAR 0 7
32904: IN
32905: NOT
32906: AND
32907: PUSH
32908: LD_VAR 0 9
32912: PPUSH
32913: LD_VAR 0 10
32917: PPUSH
32918: CALL_OW 458
32922: NOT
32923: AND
32924: IFFALSE 32966
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32926: LD_ADDR_VAR 0 7
32930: PUSH
32931: LD_VAR 0 7
32935: PPUSH
32936: LD_VAR 0 7
32940: PUSH
32941: LD_INT 1
32943: PLUS
32944: PPUSH
32945: LD_VAR 0 9
32949: PUSH
32950: LD_VAR 0 10
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PPUSH
32959: CALL_OW 1
32963: ST_TO_ADDR
32964: GO 32980
// i := i - 1 ;
32966: LD_ADDR_VAR 0 5
32970: PUSH
32971: LD_VAR 0 5
32975: PUSH
32976: LD_INT 1
32978: MINUS
32979: ST_TO_ADDR
// end ;
32980: GO 32786
32982: POP
32983: POP
// for i in tmp do
32984: LD_ADDR_VAR 0 5
32988: PUSH
32989: LD_VAR 0 7
32993: PUSH
32994: FOR_IN
32995: IFFALSE 33033
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32997: LD_VAR 0 1
33001: PPUSH
33002: LD_VAR 0 5
33006: PUSH
33007: LD_INT 1
33009: ARRAY
33010: PPUSH
33011: LD_VAR 0 5
33015: PUSH
33016: LD_INT 2
33018: ARRAY
33019: PPUSH
33020: CALL 31979 0 3
33024: NOT
33025: IFFALSE 33031
// exit ;
33027: POP
33028: POP
33029: GO 33035
33031: GO 32994
33033: POP
33034: POP
// end ;
33035: LD_VAR 0 4
33039: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
33040: LD_INT 0
33042: PPUSH
33043: PPUSH
33044: PPUSH
33045: PPUSH
33046: PPUSH
33047: PPUSH
33048: PPUSH
33049: PPUSH
33050: PPUSH
// if GetClass ( unit ) <> class_sniper then
33051: LD_VAR 0 1
33055: PPUSH
33056: CALL_OW 257
33060: PUSH
33061: LD_INT 5
33063: NONEQUAL
33064: IFFALSE 33068
// exit ;
33066: GO 33534
// dist := 8 ;
33068: LD_ADDR_VAR 0 5
33072: PUSH
33073: LD_INT 8
33075: ST_TO_ADDR
// viewRange := 12 ;
33076: LD_ADDR_VAR 0 8
33080: PUSH
33081: LD_INT 12
33083: ST_TO_ADDR
// side := GetSide ( unit ) ;
33084: LD_ADDR_VAR 0 6
33088: PUSH
33089: LD_VAR 0 1
33093: PPUSH
33094: CALL_OW 255
33098: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33099: LD_INT 61
33101: PPUSH
33102: LD_VAR 0 6
33106: PPUSH
33107: CALL_OW 321
33111: PUSH
33112: LD_INT 2
33114: EQUAL
33115: IFFALSE 33125
// viewRange := 16 ;
33117: LD_ADDR_VAR 0 8
33121: PUSH
33122: LD_INT 16
33124: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33125: LD_VAR 0 1
33129: PPUSH
33130: LD_VAR 0 2
33134: PPUSH
33135: LD_VAR 0 3
33139: PPUSH
33140: CALL_OW 297
33144: PUSH
33145: LD_VAR 0 5
33149: GREATER
33150: IFFALSE 33229
// begin ComMoveXY ( unit , x , y ) ;
33152: LD_VAR 0 1
33156: PPUSH
33157: LD_VAR 0 2
33161: PPUSH
33162: LD_VAR 0 3
33166: PPUSH
33167: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33171: LD_INT 35
33173: PPUSH
33174: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33178: LD_VAR 0 1
33182: PPUSH
33183: LD_VAR 0 2
33187: PPUSH
33188: LD_VAR 0 3
33192: PPUSH
33193: CALL 70068 0 3
33197: NOT
33198: IFFALSE 33202
// exit ;
33200: GO 33534
// until GetDistUnitXY ( unit , x , y ) < dist ;
33202: LD_VAR 0 1
33206: PPUSH
33207: LD_VAR 0 2
33211: PPUSH
33212: LD_VAR 0 3
33216: PPUSH
33217: CALL_OW 297
33221: PUSH
33222: LD_VAR 0 5
33226: LESS
33227: IFFALSE 33171
// end ; ComTurnXY ( unit , x , y ) ;
33229: LD_VAR 0 1
33233: PPUSH
33234: LD_VAR 0 2
33238: PPUSH
33239: LD_VAR 0 3
33243: PPUSH
33244: CALL_OW 118
// repeat if Multiplayer then
33248: LD_OWVAR 4
33252: IFFALSE 33263
// wait ( 35 ) else
33254: LD_INT 35
33256: PPUSH
33257: CALL_OW 67
33261: GO 33270
// wait ( 5 ) ;
33263: LD_INT 5
33265: PPUSH
33266: CALL_OW 67
// _d := GetDir ( unit ) ;
33270: LD_ADDR_VAR 0 11
33274: PUSH
33275: LD_VAR 0 1
33279: PPUSH
33280: CALL_OW 254
33284: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
33285: LD_ADDR_VAR 0 7
33289: PUSH
33290: LD_VAR 0 1
33294: PPUSH
33295: CALL_OW 250
33299: PPUSH
33300: LD_VAR 0 1
33304: PPUSH
33305: CALL_OW 251
33309: PPUSH
33310: LD_VAR 0 2
33314: PPUSH
33315: LD_VAR 0 3
33319: PPUSH
33320: CALL 72676 0 4
33324: ST_TO_ADDR
// until dir = _d ;
33325: LD_VAR 0 7
33329: PUSH
33330: LD_VAR 0 11
33334: EQUAL
33335: IFFALSE 33248
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
33337: LD_ADDR_VAR 0 9
33341: PUSH
33342: LD_VAR 0 1
33346: PPUSH
33347: CALL_OW 250
33351: PPUSH
33352: LD_VAR 0 7
33356: PPUSH
33357: LD_VAR 0 5
33361: PPUSH
33362: CALL_OW 272
33366: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
33367: LD_ADDR_VAR 0 10
33371: PUSH
33372: LD_VAR 0 1
33376: PPUSH
33377: CALL_OW 251
33381: PPUSH
33382: LD_VAR 0 7
33386: PPUSH
33387: LD_VAR 0 5
33391: PPUSH
33392: CALL_OW 273
33396: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33397: LD_VAR 0 9
33401: PPUSH
33402: LD_VAR 0 10
33406: PPUSH
33407: CALL_OW 488
33411: NOT
33412: IFFALSE 33416
// exit ;
33414: GO 33534
// ComAnimCustom ( unit , 1 ) ;
33416: LD_VAR 0 1
33420: PPUSH
33421: LD_INT 1
33423: PPUSH
33424: CALL_OW 592
// p := 0 ;
33428: LD_ADDR_VAR 0 12
33432: PUSH
33433: LD_INT 0
33435: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33436: LD_VAR 0 9
33440: PPUSH
33441: LD_VAR 0 10
33445: PPUSH
33446: LD_VAR 0 6
33450: PPUSH
33451: LD_VAR 0 8
33455: PPUSH
33456: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
33460: LD_INT 35
33462: PPUSH
33463: CALL_OW 67
// p := Inc ( p ) ;
33467: LD_ADDR_VAR 0 12
33471: PUSH
33472: LD_VAR 0 12
33476: PPUSH
33477: CALL 72632 0 1
33481: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
33482: LD_VAR 0 12
33486: PUSH
33487: LD_INT 3
33489: EQUAL
33490: PUSH
33491: LD_VAR 0 1
33495: PPUSH
33496: CALL_OW 302
33500: NOT
33501: OR
33502: PUSH
33503: LD_VAR 0 1
33507: PPUSH
33508: CALL_OW 301
33512: OR
33513: IFFALSE 33460
// RemoveSeeing ( _x , _y , side ) ;
33515: LD_VAR 0 9
33519: PPUSH
33520: LD_VAR 0 10
33524: PPUSH
33525: LD_VAR 0 6
33529: PPUSH
33530: CALL_OW 331
// end ; end_of_file
33534: LD_VAR 0 4
33538: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33539: LD_INT 0
33541: PPUSH
33542: PPUSH
// if exist_mode then
33543: LD_VAR 0 2
33547: IFFALSE 33593
// begin unit := CreateCharacter ( prefix & ident ) ;
33549: LD_ADDR_VAR 0 5
33553: PUSH
33554: LD_VAR 0 3
33558: PUSH
33559: LD_VAR 0 1
33563: STR
33564: PPUSH
33565: CALL_OW 34
33569: ST_TO_ADDR
// if unit then
33570: LD_VAR 0 5
33574: IFFALSE 33591
// DeleteCharacters ( prefix & ident ) ;
33576: LD_VAR 0 3
33580: PUSH
33581: LD_VAR 0 1
33585: STR
33586: PPUSH
33587: CALL_OW 40
// end else
33591: GO 33608
// unit := NewCharacter ( ident ) ;
33593: LD_ADDR_VAR 0 5
33597: PUSH
33598: LD_VAR 0 1
33602: PPUSH
33603: CALL_OW 25
33607: ST_TO_ADDR
// result := unit ;
33608: LD_ADDR_VAR 0 4
33612: PUSH
33613: LD_VAR 0 5
33617: ST_TO_ADDR
// end ;
33618: LD_VAR 0 4
33622: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33623: LD_INT 0
33625: PPUSH
33626: PPUSH
// if not side or not nation then
33627: LD_VAR 0 1
33631: NOT
33632: PUSH
33633: LD_VAR 0 2
33637: NOT
33638: OR
33639: IFFALSE 33643
// exit ;
33641: GO 34411
// case nation of nation_american :
33643: LD_VAR 0 2
33647: PUSH
33648: LD_INT 1
33650: DOUBLE
33651: EQUAL
33652: IFTRUE 33656
33654: GO 33870
33656: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33657: LD_ADDR_VAR 0 4
33661: PUSH
33662: LD_INT 35
33664: PUSH
33665: LD_INT 45
33667: PUSH
33668: LD_INT 46
33670: PUSH
33671: LD_INT 47
33673: PUSH
33674: LD_INT 82
33676: PUSH
33677: LD_INT 83
33679: PUSH
33680: LD_INT 84
33682: PUSH
33683: LD_INT 85
33685: PUSH
33686: LD_INT 86
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: LD_INT 6
33697: PUSH
33698: LD_INT 15
33700: PUSH
33701: LD_INT 16
33703: PUSH
33704: LD_INT 7
33706: PUSH
33707: LD_INT 12
33709: PUSH
33710: LD_INT 13
33712: PUSH
33713: LD_INT 10
33715: PUSH
33716: LD_INT 14
33718: PUSH
33719: LD_INT 20
33721: PUSH
33722: LD_INT 21
33724: PUSH
33725: LD_INT 22
33727: PUSH
33728: LD_INT 25
33730: PUSH
33731: LD_INT 32
33733: PUSH
33734: LD_INT 27
33736: PUSH
33737: LD_INT 36
33739: PUSH
33740: LD_INT 69
33742: PUSH
33743: LD_INT 39
33745: PUSH
33746: LD_INT 34
33748: PUSH
33749: LD_INT 40
33751: PUSH
33752: LD_INT 48
33754: PUSH
33755: LD_INT 49
33757: PUSH
33758: LD_INT 50
33760: PUSH
33761: LD_INT 51
33763: PUSH
33764: LD_INT 52
33766: PUSH
33767: LD_INT 53
33769: PUSH
33770: LD_INT 54
33772: PUSH
33773: LD_INT 55
33775: PUSH
33776: LD_INT 56
33778: PUSH
33779: LD_INT 57
33781: PUSH
33782: LD_INT 58
33784: PUSH
33785: LD_INT 59
33787: PUSH
33788: LD_INT 60
33790: PUSH
33791: LD_INT 61
33793: PUSH
33794: LD_INT 62
33796: PUSH
33797: LD_INT 80
33799: PUSH
33800: LD_INT 82
33802: PUSH
33803: LD_INT 83
33805: PUSH
33806: LD_INT 84
33808: PUSH
33809: LD_INT 85
33811: PUSH
33812: LD_INT 86
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: ST_TO_ADDR
33868: GO 34335
33870: LD_INT 2
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 34104
33878: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33879: LD_ADDR_VAR 0 4
33883: PUSH
33884: LD_INT 35
33886: PUSH
33887: LD_INT 45
33889: PUSH
33890: LD_INT 46
33892: PUSH
33893: LD_INT 47
33895: PUSH
33896: LD_INT 82
33898: PUSH
33899: LD_INT 83
33901: PUSH
33902: LD_INT 84
33904: PUSH
33905: LD_INT 85
33907: PUSH
33908: LD_INT 87
33910: PUSH
33911: LD_INT 70
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: LD_INT 11
33919: PUSH
33920: LD_INT 3
33922: PUSH
33923: LD_INT 4
33925: PUSH
33926: LD_INT 5
33928: PUSH
33929: LD_INT 6
33931: PUSH
33932: LD_INT 15
33934: PUSH
33935: LD_INT 18
33937: PUSH
33938: LD_INT 7
33940: PUSH
33941: LD_INT 17
33943: PUSH
33944: LD_INT 8
33946: PUSH
33947: LD_INT 20
33949: PUSH
33950: LD_INT 21
33952: PUSH
33953: LD_INT 22
33955: PUSH
33956: LD_INT 72
33958: PUSH
33959: LD_INT 26
33961: PUSH
33962: LD_INT 69
33964: PUSH
33965: LD_INT 39
33967: PUSH
33968: LD_INT 40
33970: PUSH
33971: LD_INT 41
33973: PUSH
33974: LD_INT 42
33976: PUSH
33977: LD_INT 43
33979: PUSH
33980: LD_INT 48
33982: PUSH
33983: LD_INT 49
33985: PUSH
33986: LD_INT 50
33988: PUSH
33989: LD_INT 51
33991: PUSH
33992: LD_INT 52
33994: PUSH
33995: LD_INT 53
33997: PUSH
33998: LD_INT 54
34000: PUSH
34001: LD_INT 55
34003: PUSH
34004: LD_INT 56
34006: PUSH
34007: LD_INT 60
34009: PUSH
34010: LD_INT 61
34012: PUSH
34013: LD_INT 62
34015: PUSH
34016: LD_INT 66
34018: PUSH
34019: LD_INT 67
34021: PUSH
34022: LD_INT 68
34024: PUSH
34025: LD_INT 81
34027: PUSH
34028: LD_INT 82
34030: PUSH
34031: LD_INT 83
34033: PUSH
34034: LD_INT 84
34036: PUSH
34037: LD_INT 85
34039: PUSH
34040: LD_INT 87
34042: PUSH
34043: LD_INT 88
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: ST_TO_ADDR
34102: GO 34335
34104: LD_INT 3
34106: DOUBLE
34107: EQUAL
34108: IFTRUE 34112
34110: GO 34334
34112: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34113: LD_ADDR_VAR 0 4
34117: PUSH
34118: LD_INT 46
34120: PUSH
34121: LD_INT 47
34123: PUSH
34124: LD_INT 1
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: LD_INT 82
34132: PUSH
34133: LD_INT 83
34135: PUSH
34136: LD_INT 84
34138: PUSH
34139: LD_INT 85
34141: PUSH
34142: LD_INT 86
34144: PUSH
34145: LD_INT 11
34147: PUSH
34148: LD_INT 9
34150: PUSH
34151: LD_INT 20
34153: PUSH
34154: LD_INT 19
34156: PUSH
34157: LD_INT 21
34159: PUSH
34160: LD_INT 24
34162: PUSH
34163: LD_INT 22
34165: PUSH
34166: LD_INT 25
34168: PUSH
34169: LD_INT 28
34171: PUSH
34172: LD_INT 29
34174: PUSH
34175: LD_INT 30
34177: PUSH
34178: LD_INT 31
34180: PUSH
34181: LD_INT 37
34183: PUSH
34184: LD_INT 38
34186: PUSH
34187: LD_INT 32
34189: PUSH
34190: LD_INT 27
34192: PUSH
34193: LD_INT 33
34195: PUSH
34196: LD_INT 69
34198: PUSH
34199: LD_INT 39
34201: PUSH
34202: LD_INT 34
34204: PUSH
34205: LD_INT 40
34207: PUSH
34208: LD_INT 71
34210: PUSH
34211: LD_INT 23
34213: PUSH
34214: LD_INT 44
34216: PUSH
34217: LD_INT 48
34219: PUSH
34220: LD_INT 49
34222: PUSH
34223: LD_INT 50
34225: PUSH
34226: LD_INT 51
34228: PUSH
34229: LD_INT 52
34231: PUSH
34232: LD_INT 53
34234: PUSH
34235: LD_INT 54
34237: PUSH
34238: LD_INT 55
34240: PUSH
34241: LD_INT 56
34243: PUSH
34244: LD_INT 57
34246: PUSH
34247: LD_INT 58
34249: PUSH
34250: LD_INT 59
34252: PUSH
34253: LD_INT 63
34255: PUSH
34256: LD_INT 64
34258: PUSH
34259: LD_INT 65
34261: PUSH
34262: LD_INT 82
34264: PUSH
34265: LD_INT 83
34267: PUSH
34268: LD_INT 84
34270: PUSH
34271: LD_INT 85
34273: PUSH
34274: LD_INT 86
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: ST_TO_ADDR
34332: GO 34335
34334: POP
// if state > - 1 and state < 3 then
34335: LD_VAR 0 3
34339: PUSH
34340: LD_INT 1
34342: NEG
34343: GREATER
34344: PUSH
34345: LD_VAR 0 3
34349: PUSH
34350: LD_INT 3
34352: LESS
34353: AND
34354: IFFALSE 34411
// for i in result do
34356: LD_ADDR_VAR 0 5
34360: PUSH
34361: LD_VAR 0 4
34365: PUSH
34366: FOR_IN
34367: IFFALSE 34409
// if GetTech ( i , side ) <> state then
34369: LD_VAR 0 5
34373: PPUSH
34374: LD_VAR 0 1
34378: PPUSH
34379: CALL_OW 321
34383: PUSH
34384: LD_VAR 0 3
34388: NONEQUAL
34389: IFFALSE 34407
// result := result diff i ;
34391: LD_ADDR_VAR 0 4
34395: PUSH
34396: LD_VAR 0 4
34400: PUSH
34401: LD_VAR 0 5
34405: DIFF
34406: ST_TO_ADDR
34407: GO 34366
34409: POP
34410: POP
// end ;
34411: LD_VAR 0 4
34415: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34416: LD_INT 0
34418: PPUSH
34419: PPUSH
34420: PPUSH
// result := true ;
34421: LD_ADDR_VAR 0 3
34425: PUSH
34426: LD_INT 1
34428: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34429: LD_ADDR_VAR 0 5
34433: PUSH
34434: LD_VAR 0 2
34438: PPUSH
34439: CALL_OW 480
34443: ST_TO_ADDR
// if not tmp then
34444: LD_VAR 0 5
34448: NOT
34449: IFFALSE 34453
// exit ;
34451: GO 34502
// for i in tmp do
34453: LD_ADDR_VAR 0 4
34457: PUSH
34458: LD_VAR 0 5
34462: PUSH
34463: FOR_IN
34464: IFFALSE 34500
// if GetTech ( i , side ) <> state_researched then
34466: LD_VAR 0 4
34470: PPUSH
34471: LD_VAR 0 1
34475: PPUSH
34476: CALL_OW 321
34480: PUSH
34481: LD_INT 2
34483: NONEQUAL
34484: IFFALSE 34498
// begin result := false ;
34486: LD_ADDR_VAR 0 3
34490: PUSH
34491: LD_INT 0
34493: ST_TO_ADDR
// exit ;
34494: POP
34495: POP
34496: GO 34502
// end ;
34498: GO 34463
34500: POP
34501: POP
// end ;
34502: LD_VAR 0 3
34506: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34507: LD_INT 0
34509: PPUSH
34510: PPUSH
34511: PPUSH
34512: PPUSH
34513: PPUSH
34514: PPUSH
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34522: LD_VAR 0 1
34526: NOT
34527: PUSH
34528: LD_VAR 0 1
34532: PPUSH
34533: CALL_OW 257
34537: PUSH
34538: LD_INT 9
34540: NONEQUAL
34541: OR
34542: IFFALSE 34546
// exit ;
34544: GO 35119
// side := GetSide ( unit ) ;
34546: LD_ADDR_VAR 0 9
34550: PUSH
34551: LD_VAR 0 1
34555: PPUSH
34556: CALL_OW 255
34560: ST_TO_ADDR
// tech_space := tech_spacanom ;
34561: LD_ADDR_VAR 0 12
34565: PUSH
34566: LD_INT 29
34568: ST_TO_ADDR
// tech_time := tech_taurad ;
34569: LD_ADDR_VAR 0 13
34573: PUSH
34574: LD_INT 28
34576: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34577: LD_ADDR_VAR 0 11
34581: PUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: CALL_OW 310
34591: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34592: LD_VAR 0 11
34596: PPUSH
34597: CALL_OW 247
34601: PUSH
34602: LD_INT 2
34604: EQUAL
34605: IFFALSE 34609
// exit ;
34607: GO 35119
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34609: LD_ADDR_VAR 0 8
34613: PUSH
34614: LD_INT 81
34616: PUSH
34617: LD_VAR 0 9
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 3
34628: PUSH
34629: LD_INT 21
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PPUSH
34647: CALL_OW 69
34651: ST_TO_ADDR
// if not tmp then
34652: LD_VAR 0 8
34656: NOT
34657: IFFALSE 34661
// exit ;
34659: GO 35119
// if in_unit then
34661: LD_VAR 0 11
34665: IFFALSE 34689
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34667: LD_ADDR_VAR 0 10
34671: PUSH
34672: LD_VAR 0 8
34676: PPUSH
34677: LD_VAR 0 11
34681: PPUSH
34682: CALL_OW 74
34686: ST_TO_ADDR
34687: GO 34709
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34689: LD_ADDR_VAR 0 10
34693: PUSH
34694: LD_VAR 0 8
34698: PPUSH
34699: LD_VAR 0 1
34703: PPUSH
34704: CALL_OW 74
34708: ST_TO_ADDR
// if not enemy then
34709: LD_VAR 0 10
34713: NOT
34714: IFFALSE 34718
// exit ;
34716: GO 35119
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34718: LD_VAR 0 11
34722: PUSH
34723: LD_VAR 0 11
34727: PPUSH
34728: LD_VAR 0 10
34732: PPUSH
34733: CALL_OW 296
34737: PUSH
34738: LD_INT 13
34740: GREATER
34741: AND
34742: PUSH
34743: LD_VAR 0 1
34747: PPUSH
34748: LD_VAR 0 10
34752: PPUSH
34753: CALL_OW 296
34757: PUSH
34758: LD_INT 12
34760: GREATER
34761: OR
34762: IFFALSE 34766
// exit ;
34764: GO 35119
// missile := [ 1 ] ;
34766: LD_ADDR_VAR 0 14
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34777: LD_VAR 0 9
34781: PPUSH
34782: LD_VAR 0 12
34786: PPUSH
34787: CALL_OW 325
34791: IFFALSE 34820
// missile := Replace ( missile , missile + 1 , 2 ) ;
34793: LD_ADDR_VAR 0 14
34797: PUSH
34798: LD_VAR 0 14
34802: PPUSH
34803: LD_VAR 0 14
34807: PUSH
34808: LD_INT 1
34810: PLUS
34811: PPUSH
34812: LD_INT 2
34814: PPUSH
34815: CALL_OW 1
34819: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34820: LD_VAR 0 9
34824: PPUSH
34825: LD_VAR 0 13
34829: PPUSH
34830: CALL_OW 325
34834: PUSH
34835: LD_VAR 0 10
34839: PPUSH
34840: CALL_OW 255
34844: PPUSH
34845: LD_VAR 0 13
34849: PPUSH
34850: CALL_OW 325
34854: NOT
34855: AND
34856: IFFALSE 34885
// missile := Replace ( missile , missile + 1 , 3 ) ;
34858: LD_ADDR_VAR 0 14
34862: PUSH
34863: LD_VAR 0 14
34867: PPUSH
34868: LD_VAR 0 14
34872: PUSH
34873: LD_INT 1
34875: PLUS
34876: PPUSH
34877: LD_INT 3
34879: PPUSH
34880: CALL_OW 1
34884: ST_TO_ADDR
// if missile < 2 then
34885: LD_VAR 0 14
34889: PUSH
34890: LD_INT 2
34892: LESS
34893: IFFALSE 34897
// exit ;
34895: GO 35119
// x := GetX ( enemy ) ;
34897: LD_ADDR_VAR 0 4
34901: PUSH
34902: LD_VAR 0 10
34906: PPUSH
34907: CALL_OW 250
34911: ST_TO_ADDR
// y := GetY ( enemy ) ;
34912: LD_ADDR_VAR 0 5
34916: PUSH
34917: LD_VAR 0 10
34921: PPUSH
34922: CALL_OW 251
34926: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34927: LD_ADDR_VAR 0 6
34931: PUSH
34932: LD_VAR 0 4
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PPUSH
34941: LD_INT 1
34943: PPUSH
34944: CALL_OW 12
34948: PLUS
34949: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34950: LD_ADDR_VAR 0 7
34954: PUSH
34955: LD_VAR 0 5
34959: PUSH
34960: LD_INT 1
34962: NEG
34963: PPUSH
34964: LD_INT 1
34966: PPUSH
34967: CALL_OW 12
34971: PLUS
34972: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34973: LD_VAR 0 6
34977: PPUSH
34978: LD_VAR 0 7
34982: PPUSH
34983: CALL_OW 488
34987: NOT
34988: IFFALSE 35010
// begin _x := x ;
34990: LD_ADDR_VAR 0 6
34994: PUSH
34995: LD_VAR 0 4
34999: ST_TO_ADDR
// _y := y ;
35000: LD_ADDR_VAR 0 7
35004: PUSH
35005: LD_VAR 0 5
35009: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35010: LD_ADDR_VAR 0 3
35014: PUSH
35015: LD_INT 1
35017: PPUSH
35018: LD_VAR 0 14
35022: PPUSH
35023: CALL_OW 12
35027: ST_TO_ADDR
// case i of 1 :
35028: LD_VAR 0 3
35032: PUSH
35033: LD_INT 1
35035: DOUBLE
35036: EQUAL
35037: IFTRUE 35041
35039: GO 35058
35041: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35042: LD_VAR 0 1
35046: PPUSH
35047: LD_VAR 0 10
35051: PPUSH
35052: CALL_OW 115
35056: GO 35119
35058: LD_INT 2
35060: DOUBLE
35061: EQUAL
35062: IFTRUE 35066
35064: GO 35088
35066: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35067: LD_VAR 0 1
35071: PPUSH
35072: LD_VAR 0 6
35076: PPUSH
35077: LD_VAR 0 7
35081: PPUSH
35082: CALL_OW 153
35086: GO 35119
35088: LD_INT 3
35090: DOUBLE
35091: EQUAL
35092: IFTRUE 35096
35094: GO 35118
35096: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35097: LD_VAR 0 1
35101: PPUSH
35102: LD_VAR 0 6
35106: PPUSH
35107: LD_VAR 0 7
35111: PPUSH
35112: CALL_OW 154
35116: GO 35119
35118: POP
// end ;
35119: LD_VAR 0 2
35123: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35124: LD_INT 0
35126: PPUSH
35127: PPUSH
35128: PPUSH
35129: PPUSH
35130: PPUSH
35131: PPUSH
// if not unit or not building then
35132: LD_VAR 0 1
35136: NOT
35137: PUSH
35138: LD_VAR 0 2
35142: NOT
35143: OR
35144: IFFALSE 35148
// exit ;
35146: GO 35306
// x := GetX ( building ) ;
35148: LD_ADDR_VAR 0 5
35152: PUSH
35153: LD_VAR 0 2
35157: PPUSH
35158: CALL_OW 250
35162: ST_TO_ADDR
// y := GetY ( building ) ;
35163: LD_ADDR_VAR 0 6
35167: PUSH
35168: LD_VAR 0 2
35172: PPUSH
35173: CALL_OW 251
35177: ST_TO_ADDR
// for i = 0 to 5 do
35178: LD_ADDR_VAR 0 4
35182: PUSH
35183: DOUBLE
35184: LD_INT 0
35186: DEC
35187: ST_TO_ADDR
35188: LD_INT 5
35190: PUSH
35191: FOR_TO
35192: IFFALSE 35304
// begin _x := ShiftX ( x , i , 3 ) ;
35194: LD_ADDR_VAR 0 7
35198: PUSH
35199: LD_VAR 0 5
35203: PPUSH
35204: LD_VAR 0 4
35208: PPUSH
35209: LD_INT 3
35211: PPUSH
35212: CALL_OW 272
35216: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35217: LD_ADDR_VAR 0 8
35221: PUSH
35222: LD_VAR 0 6
35226: PPUSH
35227: LD_VAR 0 4
35231: PPUSH
35232: LD_INT 3
35234: PPUSH
35235: CALL_OW 273
35239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35240: LD_VAR 0 7
35244: PPUSH
35245: LD_VAR 0 8
35249: PPUSH
35250: CALL_OW 488
35254: NOT
35255: IFFALSE 35259
// continue ;
35257: GO 35191
// if HexInfo ( _x , _y ) = 0 then
35259: LD_VAR 0 7
35263: PPUSH
35264: LD_VAR 0 8
35268: PPUSH
35269: CALL_OW 428
35273: PUSH
35274: LD_INT 0
35276: EQUAL
35277: IFFALSE 35302
// begin ComMoveXY ( unit , _x , _y ) ;
35279: LD_VAR 0 1
35283: PPUSH
35284: LD_VAR 0 7
35288: PPUSH
35289: LD_VAR 0 8
35293: PPUSH
35294: CALL_OW 111
// exit ;
35298: POP
35299: POP
35300: GO 35306
// end ; end ;
35302: GO 35191
35304: POP
35305: POP
// end ;
35306: LD_VAR 0 3
35310: RET
// export function ScanBase ( side , base_area ) ; begin
35311: LD_INT 0
35313: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35314: LD_ADDR_VAR 0 3
35318: PUSH
35319: LD_VAR 0 2
35323: PPUSH
35324: LD_INT 81
35326: PUSH
35327: LD_VAR 0 1
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PPUSH
35336: CALL_OW 70
35340: ST_TO_ADDR
// end ;
35341: LD_VAR 0 3
35345: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35346: LD_INT 0
35348: PPUSH
35349: PPUSH
35350: PPUSH
35351: PPUSH
// result := false ;
35352: LD_ADDR_VAR 0 2
35356: PUSH
35357: LD_INT 0
35359: ST_TO_ADDR
// side := GetSide ( unit ) ;
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_VAR 0 1
35369: PPUSH
35370: CALL_OW 255
35374: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35375: LD_ADDR_VAR 0 4
35379: PUSH
35380: LD_VAR 0 1
35384: PPUSH
35385: CALL_OW 248
35389: ST_TO_ADDR
// case nat of 1 :
35390: LD_VAR 0 4
35394: PUSH
35395: LD_INT 1
35397: DOUBLE
35398: EQUAL
35399: IFTRUE 35403
35401: GO 35414
35403: POP
// tech := tech_lassight ; 2 :
35404: LD_ADDR_VAR 0 5
35408: PUSH
35409: LD_INT 12
35411: ST_TO_ADDR
35412: GO 35453
35414: LD_INT 2
35416: DOUBLE
35417: EQUAL
35418: IFTRUE 35422
35420: GO 35433
35422: POP
// tech := tech_mortar ; 3 :
35423: LD_ADDR_VAR 0 5
35427: PUSH
35428: LD_INT 41
35430: ST_TO_ADDR
35431: GO 35453
35433: LD_INT 3
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35441
35439: GO 35452
35441: POP
// tech := tech_bazooka ; end ;
35442: LD_ADDR_VAR 0 5
35446: PUSH
35447: LD_INT 44
35449: ST_TO_ADDR
35450: GO 35453
35452: POP
// if Researched ( side , tech ) then
35453: LD_VAR 0 3
35457: PPUSH
35458: LD_VAR 0 5
35462: PPUSH
35463: CALL_OW 325
35467: IFFALSE 35494
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35469: LD_ADDR_VAR 0 2
35473: PUSH
35474: LD_INT 5
35476: PUSH
35477: LD_INT 8
35479: PUSH
35480: LD_INT 9
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: PUSH
35488: LD_VAR 0 4
35492: ARRAY
35493: ST_TO_ADDR
// end ;
35494: LD_VAR 0 2
35498: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35499: LD_INT 0
35501: PPUSH
35502: PPUSH
35503: PPUSH
// if not mines then
35504: LD_VAR 0 2
35508: NOT
35509: IFFALSE 35513
// exit ;
35511: GO 35657
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35513: LD_ADDR_VAR 0 5
35517: PUSH
35518: LD_INT 81
35520: PUSH
35521: LD_VAR 0 1
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 3
35532: PUSH
35533: LD_INT 21
35535: PUSH
35536: LD_INT 3
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PPUSH
35551: CALL_OW 69
35555: ST_TO_ADDR
// for i in mines do
35556: LD_ADDR_VAR 0 4
35560: PUSH
35561: LD_VAR 0 2
35565: PUSH
35566: FOR_IN
35567: IFFALSE 35655
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35569: LD_VAR 0 4
35573: PUSH
35574: LD_INT 1
35576: ARRAY
35577: PPUSH
35578: LD_VAR 0 4
35582: PUSH
35583: LD_INT 2
35585: ARRAY
35586: PPUSH
35587: CALL_OW 458
35591: NOT
35592: IFFALSE 35596
// continue ;
35594: GO 35566
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35596: LD_VAR 0 4
35600: PUSH
35601: LD_INT 1
35603: ARRAY
35604: PPUSH
35605: LD_VAR 0 4
35609: PUSH
35610: LD_INT 2
35612: ARRAY
35613: PPUSH
35614: CALL_OW 428
35618: PUSH
35619: LD_VAR 0 5
35623: IN
35624: IFFALSE 35653
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35626: LD_VAR 0 4
35630: PUSH
35631: LD_INT 1
35633: ARRAY
35634: PPUSH
35635: LD_VAR 0 4
35639: PUSH
35640: LD_INT 2
35642: ARRAY
35643: PPUSH
35644: LD_VAR 0 1
35648: PPUSH
35649: CALL_OW 456
// end ;
35653: GO 35566
35655: POP
35656: POP
// end ;
35657: LD_VAR 0 3
35661: RET
// export function Count ( array ) ; begin
35662: LD_INT 0
35664: PPUSH
// result := array + 0 ;
35665: LD_ADDR_VAR 0 2
35669: PUSH
35670: LD_VAR 0 1
35674: PUSH
35675: LD_INT 0
35677: PLUS
35678: ST_TO_ADDR
// end ;
35679: LD_VAR 0 2
35683: RET
// export function IsEmpty ( building ) ; begin
35684: LD_INT 0
35686: PPUSH
// if not building then
35687: LD_VAR 0 1
35691: NOT
35692: IFFALSE 35696
// exit ;
35694: GO 35739
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35696: LD_ADDR_VAR 0 2
35700: PUSH
35701: LD_VAR 0 1
35705: PUSH
35706: LD_INT 22
35708: PUSH
35709: LD_VAR 0 1
35713: PPUSH
35714: CALL_OW 255
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 58
35725: PUSH
35726: EMPTY
35727: LIST
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PPUSH
35733: CALL_OW 69
35737: IN
35738: ST_TO_ADDR
// end ;
35739: LD_VAR 0 2
35743: RET
// export function IsNotFull ( building ) ; var places ; begin
35744: LD_INT 0
35746: PPUSH
35747: PPUSH
// if not building then
35748: LD_VAR 0 1
35752: NOT
35753: IFFALSE 35757
// exit ;
35755: GO 35785
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35757: LD_ADDR_VAR 0 2
35761: PUSH
35762: LD_VAR 0 1
35766: PPUSH
35767: LD_INT 3
35769: PUSH
35770: LD_INT 62
35772: PUSH
35773: EMPTY
35774: LIST
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PPUSH
35780: CALL_OW 72
35784: ST_TO_ADDR
// end ;
35785: LD_VAR 0 2
35789: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35790: LD_INT 0
35792: PPUSH
35793: PPUSH
35794: PPUSH
35795: PPUSH
// tmp := [ ] ;
35796: LD_ADDR_VAR 0 3
35800: PUSH
35801: EMPTY
35802: ST_TO_ADDR
// list := [ ] ;
35803: LD_ADDR_VAR 0 5
35807: PUSH
35808: EMPTY
35809: ST_TO_ADDR
// for i = 16 to 25 do
35810: LD_ADDR_VAR 0 4
35814: PUSH
35815: DOUBLE
35816: LD_INT 16
35818: DEC
35819: ST_TO_ADDR
35820: LD_INT 25
35822: PUSH
35823: FOR_TO
35824: IFFALSE 35897
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35826: LD_ADDR_VAR 0 3
35830: PUSH
35831: LD_VAR 0 3
35835: PUSH
35836: LD_INT 22
35838: PUSH
35839: LD_VAR 0 1
35843: PPUSH
35844: CALL_OW 255
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 91
35855: PUSH
35856: LD_VAR 0 1
35860: PUSH
35861: LD_INT 6
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 30
35871: PUSH
35872: LD_VAR 0 4
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: PUSH
35886: EMPTY
35887: LIST
35888: PPUSH
35889: CALL_OW 69
35893: ADD
35894: ST_TO_ADDR
35895: GO 35823
35897: POP
35898: POP
// for i = 1 to tmp do
35899: LD_ADDR_VAR 0 4
35903: PUSH
35904: DOUBLE
35905: LD_INT 1
35907: DEC
35908: ST_TO_ADDR
35909: LD_VAR 0 3
35913: PUSH
35914: FOR_TO
35915: IFFALSE 36003
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35917: LD_ADDR_VAR 0 5
35921: PUSH
35922: LD_VAR 0 5
35926: PUSH
35927: LD_VAR 0 3
35931: PUSH
35932: LD_VAR 0 4
35936: ARRAY
35937: PPUSH
35938: CALL_OW 266
35942: PUSH
35943: LD_VAR 0 3
35947: PUSH
35948: LD_VAR 0 4
35952: ARRAY
35953: PPUSH
35954: CALL_OW 250
35958: PUSH
35959: LD_VAR 0 3
35963: PUSH
35964: LD_VAR 0 4
35968: ARRAY
35969: PPUSH
35970: CALL_OW 251
35974: PUSH
35975: LD_VAR 0 3
35979: PUSH
35980: LD_VAR 0 4
35984: ARRAY
35985: PPUSH
35986: CALL_OW 254
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: PUSH
35997: EMPTY
35998: LIST
35999: ADD
36000: ST_TO_ADDR
36001: GO 35914
36003: POP
36004: POP
// result := list ;
36005: LD_ADDR_VAR 0 2
36009: PUSH
36010: LD_VAR 0 5
36014: ST_TO_ADDR
// end ;
36015: LD_VAR 0 2
36019: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36020: LD_INT 0
36022: PPUSH
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
36028: PPUSH
// if not factory then
36029: LD_VAR 0 1
36033: NOT
36034: IFFALSE 36038
// exit ;
36036: GO 36631
// if control = control_apeman then
36038: LD_VAR 0 4
36042: PUSH
36043: LD_INT 5
36045: EQUAL
36046: IFFALSE 36155
// begin tmp := UnitsInside ( factory ) ;
36048: LD_ADDR_VAR 0 8
36052: PUSH
36053: LD_VAR 0 1
36057: PPUSH
36058: CALL_OW 313
36062: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36063: LD_VAR 0 8
36067: PPUSH
36068: LD_INT 25
36070: PUSH
36071: LD_INT 12
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PPUSH
36078: CALL_OW 72
36082: NOT
36083: IFFALSE 36093
// control := control_manual ;
36085: LD_ADDR_VAR 0 4
36089: PUSH
36090: LD_INT 1
36092: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36093: LD_ADDR_VAR 0 8
36097: PUSH
36098: LD_VAR 0 1
36102: PPUSH
36103: CALL 35790 0 1
36107: ST_TO_ADDR
// if tmp then
36108: LD_VAR 0 8
36112: IFFALSE 36155
// begin for i in tmp do
36114: LD_ADDR_VAR 0 7
36118: PUSH
36119: LD_VAR 0 8
36123: PUSH
36124: FOR_IN
36125: IFFALSE 36153
// if i [ 1 ] = b_ext_radio then
36127: LD_VAR 0 7
36131: PUSH
36132: LD_INT 1
36134: ARRAY
36135: PUSH
36136: LD_INT 22
36138: EQUAL
36139: IFFALSE 36151
// begin control := control_remote ;
36141: LD_ADDR_VAR 0 4
36145: PUSH
36146: LD_INT 2
36148: ST_TO_ADDR
// break ;
36149: GO 36153
// end ;
36151: GO 36124
36153: POP
36154: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36155: LD_VAR 0 1
36159: PPUSH
36160: LD_VAR 0 2
36164: PPUSH
36165: LD_VAR 0 3
36169: PPUSH
36170: LD_VAR 0 4
36174: PPUSH
36175: LD_VAR 0 5
36179: PPUSH
36180: CALL_OW 448
36184: IFFALSE 36219
// begin result := [ chassis , engine , control , weapon ] ;
36186: LD_ADDR_VAR 0 6
36190: PUSH
36191: LD_VAR 0 2
36195: PUSH
36196: LD_VAR 0 3
36200: PUSH
36201: LD_VAR 0 4
36205: PUSH
36206: LD_VAR 0 5
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: ST_TO_ADDR
// exit ;
36217: GO 36631
// end ; _chassis := AvailableChassisList ( factory ) ;
36219: LD_ADDR_VAR 0 9
36223: PUSH
36224: LD_VAR 0 1
36228: PPUSH
36229: CALL_OW 475
36233: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36234: LD_ADDR_VAR 0 11
36238: PUSH
36239: LD_VAR 0 1
36243: PPUSH
36244: CALL_OW 476
36248: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36249: LD_ADDR_VAR 0 12
36253: PUSH
36254: LD_VAR 0 1
36258: PPUSH
36259: CALL_OW 477
36263: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36264: LD_ADDR_VAR 0 10
36268: PUSH
36269: LD_VAR 0 1
36273: PPUSH
36274: CALL_OW 478
36278: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36279: LD_VAR 0 9
36283: NOT
36284: PUSH
36285: LD_VAR 0 11
36289: NOT
36290: OR
36291: PUSH
36292: LD_VAR 0 12
36296: NOT
36297: OR
36298: PUSH
36299: LD_VAR 0 10
36303: NOT
36304: OR
36305: IFFALSE 36340
// begin result := [ chassis , engine , control , weapon ] ;
36307: LD_ADDR_VAR 0 6
36311: PUSH
36312: LD_VAR 0 2
36316: PUSH
36317: LD_VAR 0 3
36321: PUSH
36322: LD_VAR 0 4
36326: PUSH
36327: LD_VAR 0 5
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: ST_TO_ADDR
// exit ;
36338: GO 36631
// end ; if not chassis in _chassis then
36340: LD_VAR 0 2
36344: PUSH
36345: LD_VAR 0 9
36349: IN
36350: NOT
36351: IFFALSE 36377
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36353: LD_ADDR_VAR 0 2
36357: PUSH
36358: LD_VAR 0 9
36362: PUSH
36363: LD_INT 1
36365: PPUSH
36366: LD_VAR 0 9
36370: PPUSH
36371: CALL_OW 12
36375: ARRAY
36376: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36377: LD_VAR 0 2
36381: PPUSH
36382: LD_VAR 0 3
36386: PPUSH
36387: CALL 36636 0 2
36391: NOT
36392: IFFALSE 36451
// repeat engine := _engine [ 1 ] ;
36394: LD_ADDR_VAR 0 3
36398: PUSH
36399: LD_VAR 0 11
36403: PUSH
36404: LD_INT 1
36406: ARRAY
36407: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36408: LD_ADDR_VAR 0 11
36412: PUSH
36413: LD_VAR 0 11
36417: PPUSH
36418: LD_INT 1
36420: PPUSH
36421: CALL_OW 3
36425: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36426: LD_VAR 0 2
36430: PPUSH
36431: LD_VAR 0 3
36435: PPUSH
36436: CALL 36636 0 2
36440: PUSH
36441: LD_VAR 0 11
36445: PUSH
36446: EMPTY
36447: EQUAL
36448: OR
36449: IFFALSE 36394
// if not control in _control then
36451: LD_VAR 0 4
36455: PUSH
36456: LD_VAR 0 12
36460: IN
36461: NOT
36462: IFFALSE 36488
// control := _control [ rand ( 1 , _control ) ] ;
36464: LD_ADDR_VAR 0 4
36468: PUSH
36469: LD_VAR 0 12
36473: PUSH
36474: LD_INT 1
36476: PPUSH
36477: LD_VAR 0 12
36481: PPUSH
36482: CALL_OW 12
36486: ARRAY
36487: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36488: LD_VAR 0 2
36492: PPUSH
36493: LD_VAR 0 5
36497: PPUSH
36498: CALL 36856 0 2
36502: NOT
36503: IFFALSE 36562
// repeat weapon := _weapon [ 1 ] ;
36505: LD_ADDR_VAR 0 5
36509: PUSH
36510: LD_VAR 0 10
36514: PUSH
36515: LD_INT 1
36517: ARRAY
36518: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36519: LD_ADDR_VAR 0 10
36523: PUSH
36524: LD_VAR 0 10
36528: PPUSH
36529: LD_INT 1
36531: PPUSH
36532: CALL_OW 3
36536: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36537: LD_VAR 0 2
36541: PPUSH
36542: LD_VAR 0 5
36546: PPUSH
36547: CALL 36856 0 2
36551: PUSH
36552: LD_VAR 0 10
36556: PUSH
36557: EMPTY
36558: EQUAL
36559: OR
36560: IFFALSE 36505
// result := [ ] ;
36562: LD_ADDR_VAR 0 6
36566: PUSH
36567: EMPTY
36568: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36569: LD_VAR 0 1
36573: PPUSH
36574: LD_VAR 0 2
36578: PPUSH
36579: LD_VAR 0 3
36583: PPUSH
36584: LD_VAR 0 4
36588: PPUSH
36589: LD_VAR 0 5
36593: PPUSH
36594: CALL_OW 448
36598: IFFALSE 36631
// result := [ chassis , engine , control , weapon ] ;
36600: LD_ADDR_VAR 0 6
36604: PUSH
36605: LD_VAR 0 2
36609: PUSH
36610: LD_VAR 0 3
36614: PUSH
36615: LD_VAR 0 4
36619: PUSH
36620: LD_VAR 0 5
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: ST_TO_ADDR
// end ;
36631: LD_VAR 0 6
36635: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36636: LD_INT 0
36638: PPUSH
// if not chassis or not engine then
36639: LD_VAR 0 1
36643: NOT
36644: PUSH
36645: LD_VAR 0 2
36649: NOT
36650: OR
36651: IFFALSE 36655
// exit ;
36653: GO 36851
// case engine of engine_solar :
36655: LD_VAR 0 2
36659: PUSH
36660: LD_INT 2
36662: DOUBLE
36663: EQUAL
36664: IFTRUE 36668
36666: GO 36706
36668: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36669: LD_ADDR_VAR 0 3
36673: PUSH
36674: LD_INT 11
36676: PUSH
36677: LD_INT 12
36679: PUSH
36680: LD_INT 13
36682: PUSH
36683: LD_INT 14
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: LD_INT 3
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: ST_TO_ADDR
36704: GO 36835
36706: LD_INT 1
36708: DOUBLE
36709: EQUAL
36710: IFTRUE 36714
36712: GO 36776
36714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36715: LD_ADDR_VAR 0 3
36719: PUSH
36720: LD_INT 11
36722: PUSH
36723: LD_INT 12
36725: PUSH
36726: LD_INT 13
36728: PUSH
36729: LD_INT 14
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: LD_INT 2
36737: PUSH
36738: LD_INT 3
36740: PUSH
36741: LD_INT 4
36743: PUSH
36744: LD_INT 5
36746: PUSH
36747: LD_INT 21
36749: PUSH
36750: LD_INT 23
36752: PUSH
36753: LD_INT 22
36755: PUSH
36756: LD_INT 24
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: ST_TO_ADDR
36774: GO 36835
36776: LD_INT 3
36778: DOUBLE
36779: EQUAL
36780: IFTRUE 36784
36782: GO 36834
36784: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36785: LD_ADDR_VAR 0 3
36789: PUSH
36790: LD_INT 13
36792: PUSH
36793: LD_INT 14
36795: PUSH
36796: LD_INT 2
36798: PUSH
36799: LD_INT 3
36801: PUSH
36802: LD_INT 4
36804: PUSH
36805: LD_INT 5
36807: PUSH
36808: LD_INT 21
36810: PUSH
36811: LD_INT 22
36813: PUSH
36814: LD_INT 23
36816: PUSH
36817: LD_INT 24
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: ST_TO_ADDR
36832: GO 36835
36834: POP
// result := ( chassis in result ) ;
36835: LD_ADDR_VAR 0 3
36839: PUSH
36840: LD_VAR 0 1
36844: PUSH
36845: LD_VAR 0 3
36849: IN
36850: ST_TO_ADDR
// end ;
36851: LD_VAR 0 3
36855: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36856: LD_INT 0
36858: PPUSH
// if not chassis or not weapon then
36859: LD_VAR 0 1
36863: NOT
36864: PUSH
36865: LD_VAR 0 2
36869: NOT
36870: OR
36871: IFFALSE 36875
// exit ;
36873: GO 37935
// case weapon of us_machine_gun :
36875: LD_VAR 0 2
36879: PUSH
36880: LD_INT 2
36882: DOUBLE
36883: EQUAL
36884: IFTRUE 36888
36886: GO 36918
36888: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36889: LD_ADDR_VAR 0 3
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: LD_INT 3
36902: PUSH
36903: LD_INT 4
36905: PUSH
36906: LD_INT 5
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: ST_TO_ADDR
36916: GO 37919
36918: LD_INT 3
36920: DOUBLE
36921: EQUAL
36922: IFTRUE 36926
36924: GO 36956
36926: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36927: LD_ADDR_VAR 0 3
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 3
36940: PUSH
36941: LD_INT 4
36943: PUSH
36944: LD_INT 5
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: ST_TO_ADDR
36954: GO 37919
36956: LD_INT 11
36958: DOUBLE
36959: EQUAL
36960: IFTRUE 36964
36962: GO 36994
36964: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36965: LD_ADDR_VAR 0 3
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: LD_INT 3
36978: PUSH
36979: LD_INT 4
36981: PUSH
36982: LD_INT 5
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: ST_TO_ADDR
36992: GO 37919
36994: LD_INT 4
36996: DOUBLE
36997: EQUAL
36998: IFTRUE 37002
37000: GO 37028
37002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37003: LD_ADDR_VAR 0 3
37007: PUSH
37008: LD_INT 2
37010: PUSH
37011: LD_INT 3
37013: PUSH
37014: LD_INT 4
37016: PUSH
37017: LD_INT 5
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: ST_TO_ADDR
37026: GO 37919
37028: LD_INT 5
37030: DOUBLE
37031: EQUAL
37032: IFTRUE 37036
37034: GO 37062
37036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37037: LD_ADDR_VAR 0 3
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: LD_INT 3
37047: PUSH
37048: LD_INT 4
37050: PUSH
37051: LD_INT 5
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: ST_TO_ADDR
37060: GO 37919
37062: LD_INT 9
37064: DOUBLE
37065: EQUAL
37066: IFTRUE 37070
37068: GO 37096
37070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37071: LD_ADDR_VAR 0 3
37075: PUSH
37076: LD_INT 2
37078: PUSH
37079: LD_INT 3
37081: PUSH
37082: LD_INT 4
37084: PUSH
37085: LD_INT 5
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: ST_TO_ADDR
37094: GO 37919
37096: LD_INT 7
37098: DOUBLE
37099: EQUAL
37100: IFTRUE 37104
37102: GO 37130
37104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37105: LD_ADDR_VAR 0 3
37109: PUSH
37110: LD_INT 2
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: LD_INT 4
37118: PUSH
37119: LD_INT 5
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: ST_TO_ADDR
37128: GO 37919
37130: LD_INT 12
37132: DOUBLE
37133: EQUAL
37134: IFTRUE 37138
37136: GO 37164
37138: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37139: LD_ADDR_VAR 0 3
37143: PUSH
37144: LD_INT 2
37146: PUSH
37147: LD_INT 3
37149: PUSH
37150: LD_INT 4
37152: PUSH
37153: LD_INT 5
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: ST_TO_ADDR
37162: GO 37919
37164: LD_INT 13
37166: DOUBLE
37167: EQUAL
37168: IFTRUE 37172
37170: GO 37198
37172: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37173: LD_ADDR_VAR 0 3
37177: PUSH
37178: LD_INT 2
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: LD_INT 4
37186: PUSH
37187: LD_INT 5
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: ST_TO_ADDR
37196: GO 37919
37198: LD_INT 14
37200: DOUBLE
37201: EQUAL
37202: IFTRUE 37206
37204: GO 37224
37206: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37207: LD_ADDR_VAR 0 3
37211: PUSH
37212: LD_INT 4
37214: PUSH
37215: LD_INT 5
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: ST_TO_ADDR
37222: GO 37919
37224: LD_INT 6
37226: DOUBLE
37227: EQUAL
37228: IFTRUE 37232
37230: GO 37250
37232: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37233: LD_ADDR_VAR 0 3
37237: PUSH
37238: LD_INT 4
37240: PUSH
37241: LD_INT 5
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: ST_TO_ADDR
37248: GO 37919
37250: LD_INT 10
37252: DOUBLE
37253: EQUAL
37254: IFTRUE 37258
37256: GO 37276
37258: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37259: LD_ADDR_VAR 0 3
37263: PUSH
37264: LD_INT 4
37266: PUSH
37267: LD_INT 5
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: ST_TO_ADDR
37274: GO 37919
37276: LD_INT 22
37278: DOUBLE
37279: EQUAL
37280: IFTRUE 37284
37282: GO 37310
37284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37285: LD_ADDR_VAR 0 3
37289: PUSH
37290: LD_INT 11
37292: PUSH
37293: LD_INT 12
37295: PUSH
37296: LD_INT 13
37298: PUSH
37299: LD_INT 14
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: ST_TO_ADDR
37308: GO 37919
37310: LD_INT 23
37312: DOUBLE
37313: EQUAL
37314: IFTRUE 37318
37316: GO 37344
37318: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37319: LD_ADDR_VAR 0 3
37323: PUSH
37324: LD_INT 11
37326: PUSH
37327: LD_INT 12
37329: PUSH
37330: LD_INT 13
37332: PUSH
37333: LD_INT 14
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: ST_TO_ADDR
37342: GO 37919
37344: LD_INT 24
37346: DOUBLE
37347: EQUAL
37348: IFTRUE 37352
37350: GO 37378
37352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37353: LD_ADDR_VAR 0 3
37357: PUSH
37358: LD_INT 11
37360: PUSH
37361: LD_INT 12
37363: PUSH
37364: LD_INT 13
37366: PUSH
37367: LD_INT 14
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: ST_TO_ADDR
37376: GO 37919
37378: LD_INT 30
37380: DOUBLE
37381: EQUAL
37382: IFTRUE 37386
37384: GO 37412
37386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37387: LD_ADDR_VAR 0 3
37391: PUSH
37392: LD_INT 11
37394: PUSH
37395: LD_INT 12
37397: PUSH
37398: LD_INT 13
37400: PUSH
37401: LD_INT 14
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: ST_TO_ADDR
37410: GO 37919
37412: LD_INT 25
37414: DOUBLE
37415: EQUAL
37416: IFTRUE 37420
37418: GO 37438
37420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: LD_INT 13
37428: PUSH
37429: LD_INT 14
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: ST_TO_ADDR
37436: GO 37919
37438: LD_INT 27
37440: DOUBLE
37441: EQUAL
37442: IFTRUE 37446
37444: GO 37464
37446: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37447: LD_ADDR_VAR 0 3
37451: PUSH
37452: LD_INT 13
37454: PUSH
37455: LD_INT 14
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: ST_TO_ADDR
37462: GO 37919
37464: LD_INT 92
37466: DOUBLE
37467: EQUAL
37468: IFTRUE 37472
37470: GO 37498
37472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37473: LD_ADDR_VAR 0 3
37477: PUSH
37478: LD_INT 11
37480: PUSH
37481: LD_INT 12
37483: PUSH
37484: LD_INT 13
37486: PUSH
37487: LD_INT 14
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: ST_TO_ADDR
37496: GO 37919
37498: LD_INT 28
37500: DOUBLE
37501: EQUAL
37502: IFTRUE 37506
37504: GO 37524
37506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37507: LD_ADDR_VAR 0 3
37511: PUSH
37512: LD_INT 13
37514: PUSH
37515: LD_INT 14
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: ST_TO_ADDR
37522: GO 37919
37524: LD_INT 29
37526: DOUBLE
37527: EQUAL
37528: IFTRUE 37532
37530: GO 37550
37532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37533: LD_ADDR_VAR 0 3
37537: PUSH
37538: LD_INT 13
37540: PUSH
37541: LD_INT 14
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: ST_TO_ADDR
37548: GO 37919
37550: LD_INT 31
37552: DOUBLE
37553: EQUAL
37554: IFTRUE 37558
37556: GO 37576
37558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37559: LD_ADDR_VAR 0 3
37563: PUSH
37564: LD_INT 13
37566: PUSH
37567: LD_INT 14
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: ST_TO_ADDR
37574: GO 37919
37576: LD_INT 26
37578: DOUBLE
37579: EQUAL
37580: IFTRUE 37584
37582: GO 37602
37584: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37585: LD_ADDR_VAR 0 3
37589: PUSH
37590: LD_INT 13
37592: PUSH
37593: LD_INT 14
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: ST_TO_ADDR
37600: GO 37919
37602: LD_INT 42
37604: DOUBLE
37605: EQUAL
37606: IFTRUE 37610
37608: GO 37636
37610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37611: LD_ADDR_VAR 0 3
37615: PUSH
37616: LD_INT 21
37618: PUSH
37619: LD_INT 22
37621: PUSH
37622: LD_INT 23
37624: PUSH
37625: LD_INT 24
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: ST_TO_ADDR
37634: GO 37919
37636: LD_INT 43
37638: DOUBLE
37639: EQUAL
37640: IFTRUE 37644
37642: GO 37670
37644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37645: LD_ADDR_VAR 0 3
37649: PUSH
37650: LD_INT 21
37652: PUSH
37653: LD_INT 22
37655: PUSH
37656: LD_INT 23
37658: PUSH
37659: LD_INT 24
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: ST_TO_ADDR
37668: GO 37919
37670: LD_INT 44
37672: DOUBLE
37673: EQUAL
37674: IFTRUE 37678
37676: GO 37704
37678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37679: LD_ADDR_VAR 0 3
37683: PUSH
37684: LD_INT 21
37686: PUSH
37687: LD_INT 22
37689: PUSH
37690: LD_INT 23
37692: PUSH
37693: LD_INT 24
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: ST_TO_ADDR
37702: GO 37919
37704: LD_INT 45
37706: DOUBLE
37707: EQUAL
37708: IFTRUE 37712
37710: GO 37738
37712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37713: LD_ADDR_VAR 0 3
37717: PUSH
37718: LD_INT 21
37720: PUSH
37721: LD_INT 22
37723: PUSH
37724: LD_INT 23
37726: PUSH
37727: LD_INT 24
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: ST_TO_ADDR
37736: GO 37919
37738: LD_INT 49
37740: DOUBLE
37741: EQUAL
37742: IFTRUE 37746
37744: GO 37772
37746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37747: LD_ADDR_VAR 0 3
37751: PUSH
37752: LD_INT 21
37754: PUSH
37755: LD_INT 22
37757: PUSH
37758: LD_INT 23
37760: PUSH
37761: LD_INT 24
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: ST_TO_ADDR
37770: GO 37919
37772: LD_INT 51
37774: DOUBLE
37775: EQUAL
37776: IFTRUE 37780
37778: GO 37806
37780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37781: LD_ADDR_VAR 0 3
37785: PUSH
37786: LD_INT 21
37788: PUSH
37789: LD_INT 22
37791: PUSH
37792: LD_INT 23
37794: PUSH
37795: LD_INT 24
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: ST_TO_ADDR
37804: GO 37919
37806: LD_INT 52
37808: DOUBLE
37809: EQUAL
37810: IFTRUE 37814
37812: GO 37840
37814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37815: LD_ADDR_VAR 0 3
37819: PUSH
37820: LD_INT 21
37822: PUSH
37823: LD_INT 22
37825: PUSH
37826: LD_INT 23
37828: PUSH
37829: LD_INT 24
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: ST_TO_ADDR
37838: GO 37919
37840: LD_INT 53
37842: DOUBLE
37843: EQUAL
37844: IFTRUE 37848
37846: GO 37866
37848: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37849: LD_ADDR_VAR 0 3
37853: PUSH
37854: LD_INT 23
37856: PUSH
37857: LD_INT 24
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: ST_TO_ADDR
37864: GO 37919
37866: LD_INT 46
37868: DOUBLE
37869: EQUAL
37870: IFTRUE 37874
37872: GO 37892
37874: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37875: LD_ADDR_VAR 0 3
37879: PUSH
37880: LD_INT 23
37882: PUSH
37883: LD_INT 24
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: ST_TO_ADDR
37890: GO 37919
37892: LD_INT 47
37894: DOUBLE
37895: EQUAL
37896: IFTRUE 37900
37898: GO 37918
37900: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37901: LD_ADDR_VAR 0 3
37905: PUSH
37906: LD_INT 23
37908: PUSH
37909: LD_INT 24
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: ST_TO_ADDR
37916: GO 37919
37918: POP
// result := ( chassis in result ) ;
37919: LD_ADDR_VAR 0 3
37923: PUSH
37924: LD_VAR 0 1
37928: PUSH
37929: LD_VAR 0 3
37933: IN
37934: ST_TO_ADDR
// end ;
37935: LD_VAR 0 3
37939: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37940: LD_INT 0
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
37946: PPUSH
37947: PPUSH
37948: PPUSH
// result := array ;
37949: LD_ADDR_VAR 0 5
37953: PUSH
37954: LD_VAR 0 1
37958: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37959: LD_VAR 0 1
37963: NOT
37964: PUSH
37965: LD_VAR 0 2
37969: NOT
37970: OR
37971: PUSH
37972: LD_VAR 0 3
37976: NOT
37977: OR
37978: PUSH
37979: LD_VAR 0 2
37983: PUSH
37984: LD_VAR 0 1
37988: GREATER
37989: OR
37990: PUSH
37991: LD_VAR 0 3
37995: PUSH
37996: LD_VAR 0 1
38000: GREATER
38001: OR
38002: IFFALSE 38006
// exit ;
38004: GO 38302
// if direction then
38006: LD_VAR 0 4
38010: IFFALSE 38074
// begin d := 1 ;
38012: LD_ADDR_VAR 0 9
38016: PUSH
38017: LD_INT 1
38019: ST_TO_ADDR
// if i_from > i_to then
38020: LD_VAR 0 2
38024: PUSH
38025: LD_VAR 0 3
38029: GREATER
38030: IFFALSE 38056
// length := ( array - i_from ) + i_to else
38032: LD_ADDR_VAR 0 11
38036: PUSH
38037: LD_VAR 0 1
38041: PUSH
38042: LD_VAR 0 2
38046: MINUS
38047: PUSH
38048: LD_VAR 0 3
38052: PLUS
38053: ST_TO_ADDR
38054: GO 38072
// length := i_to - i_from ;
38056: LD_ADDR_VAR 0 11
38060: PUSH
38061: LD_VAR 0 3
38065: PUSH
38066: LD_VAR 0 2
38070: MINUS
38071: ST_TO_ADDR
// end else
38072: GO 38135
// begin d := - 1 ;
38074: LD_ADDR_VAR 0 9
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: ST_TO_ADDR
// if i_from > i_to then
38083: LD_VAR 0 2
38087: PUSH
38088: LD_VAR 0 3
38092: GREATER
38093: IFFALSE 38113
// length := i_from - i_to else
38095: LD_ADDR_VAR 0 11
38099: PUSH
38100: LD_VAR 0 2
38104: PUSH
38105: LD_VAR 0 3
38109: MINUS
38110: ST_TO_ADDR
38111: GO 38135
// length := ( array - i_to ) + i_from ;
38113: LD_ADDR_VAR 0 11
38117: PUSH
38118: LD_VAR 0 1
38122: PUSH
38123: LD_VAR 0 3
38127: MINUS
38128: PUSH
38129: LD_VAR 0 2
38133: PLUS
38134: ST_TO_ADDR
// end ; if not length then
38135: LD_VAR 0 11
38139: NOT
38140: IFFALSE 38144
// exit ;
38142: GO 38302
// tmp := array ;
38144: LD_ADDR_VAR 0 10
38148: PUSH
38149: LD_VAR 0 1
38153: ST_TO_ADDR
// for i = 1 to length do
38154: LD_ADDR_VAR 0 6
38158: PUSH
38159: DOUBLE
38160: LD_INT 1
38162: DEC
38163: ST_TO_ADDR
38164: LD_VAR 0 11
38168: PUSH
38169: FOR_TO
38170: IFFALSE 38290
// begin for j = 1 to array do
38172: LD_ADDR_VAR 0 7
38176: PUSH
38177: DOUBLE
38178: LD_INT 1
38180: DEC
38181: ST_TO_ADDR
38182: LD_VAR 0 1
38186: PUSH
38187: FOR_TO
38188: IFFALSE 38276
// begin k := j + d ;
38190: LD_ADDR_VAR 0 8
38194: PUSH
38195: LD_VAR 0 7
38199: PUSH
38200: LD_VAR 0 9
38204: PLUS
38205: ST_TO_ADDR
// if k > array then
38206: LD_VAR 0 8
38210: PUSH
38211: LD_VAR 0 1
38215: GREATER
38216: IFFALSE 38226
// k := 1 ;
38218: LD_ADDR_VAR 0 8
38222: PUSH
38223: LD_INT 1
38225: ST_TO_ADDR
// if not k then
38226: LD_VAR 0 8
38230: NOT
38231: IFFALSE 38243
// k := array ;
38233: LD_ADDR_VAR 0 8
38237: PUSH
38238: LD_VAR 0 1
38242: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38243: LD_ADDR_VAR 0 10
38247: PUSH
38248: LD_VAR 0 10
38252: PPUSH
38253: LD_VAR 0 8
38257: PPUSH
38258: LD_VAR 0 1
38262: PUSH
38263: LD_VAR 0 7
38267: ARRAY
38268: PPUSH
38269: CALL_OW 1
38273: ST_TO_ADDR
// end ;
38274: GO 38187
38276: POP
38277: POP
// array := tmp ;
38278: LD_ADDR_VAR 0 1
38282: PUSH
38283: LD_VAR 0 10
38287: ST_TO_ADDR
// end ;
38288: GO 38169
38290: POP
38291: POP
// result := array ;
38292: LD_ADDR_VAR 0 5
38296: PUSH
38297: LD_VAR 0 1
38301: ST_TO_ADDR
// end ;
38302: LD_VAR 0 5
38306: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38307: LD_INT 0
38309: PPUSH
38310: PPUSH
// result := 0 ;
38311: LD_ADDR_VAR 0 3
38315: PUSH
38316: LD_INT 0
38318: ST_TO_ADDR
// if not array or not value in array then
38319: LD_VAR 0 1
38323: NOT
38324: PUSH
38325: LD_VAR 0 2
38329: PUSH
38330: LD_VAR 0 1
38334: IN
38335: NOT
38336: OR
38337: IFFALSE 38341
// exit ;
38339: GO 38395
// for i = 1 to array do
38341: LD_ADDR_VAR 0 4
38345: PUSH
38346: DOUBLE
38347: LD_INT 1
38349: DEC
38350: ST_TO_ADDR
38351: LD_VAR 0 1
38355: PUSH
38356: FOR_TO
38357: IFFALSE 38393
// if value = array [ i ] then
38359: LD_VAR 0 2
38363: PUSH
38364: LD_VAR 0 1
38368: PUSH
38369: LD_VAR 0 4
38373: ARRAY
38374: EQUAL
38375: IFFALSE 38391
// begin result := i ;
38377: LD_ADDR_VAR 0 3
38381: PUSH
38382: LD_VAR 0 4
38386: ST_TO_ADDR
// exit ;
38387: POP
38388: POP
38389: GO 38395
// end ;
38391: GO 38356
38393: POP
38394: POP
// end ;
38395: LD_VAR 0 3
38399: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38400: LD_INT 0
38402: PPUSH
// vc_chassis := chassis ;
38403: LD_ADDR_OWVAR 37
38407: PUSH
38408: LD_VAR 0 1
38412: ST_TO_ADDR
// vc_engine := engine ;
38413: LD_ADDR_OWVAR 39
38417: PUSH
38418: LD_VAR 0 2
38422: ST_TO_ADDR
// vc_control := control ;
38423: LD_ADDR_OWVAR 38
38427: PUSH
38428: LD_VAR 0 3
38432: ST_TO_ADDR
// vc_weapon := weapon ;
38433: LD_ADDR_OWVAR 40
38437: PUSH
38438: LD_VAR 0 4
38442: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38443: LD_ADDR_OWVAR 41
38447: PUSH
38448: LD_VAR 0 5
38452: ST_TO_ADDR
// end ;
38453: LD_VAR 0 6
38457: RET
// export function WantPlant ( unit ) ; var task ; begin
38458: LD_INT 0
38460: PPUSH
38461: PPUSH
// result := false ;
38462: LD_ADDR_VAR 0 2
38466: PUSH
38467: LD_INT 0
38469: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38470: LD_ADDR_VAR 0 3
38474: PUSH
38475: LD_VAR 0 1
38479: PPUSH
38480: CALL_OW 437
38484: ST_TO_ADDR
// if task then
38485: LD_VAR 0 3
38489: IFFALSE 38517
// if task [ 1 ] [ 1 ] = p then
38491: LD_VAR 0 3
38495: PUSH
38496: LD_INT 1
38498: ARRAY
38499: PUSH
38500: LD_INT 1
38502: ARRAY
38503: PUSH
38504: LD_STRING p
38506: EQUAL
38507: IFFALSE 38517
// result := true ;
38509: LD_ADDR_VAR 0 2
38513: PUSH
38514: LD_INT 1
38516: ST_TO_ADDR
// end ;
38517: LD_VAR 0 2
38521: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38522: LD_INT 0
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
// if pos < 1 then
38528: LD_VAR 0 2
38532: PUSH
38533: LD_INT 1
38535: LESS
38536: IFFALSE 38540
// exit ;
38538: GO 38843
// if pos = 1 then
38540: LD_VAR 0 2
38544: PUSH
38545: LD_INT 1
38547: EQUAL
38548: IFFALSE 38581
// result := Replace ( arr , pos [ 1 ] , value ) else
38550: LD_ADDR_VAR 0 4
38554: PUSH
38555: LD_VAR 0 1
38559: PPUSH
38560: LD_VAR 0 2
38564: PUSH
38565: LD_INT 1
38567: ARRAY
38568: PPUSH
38569: LD_VAR 0 3
38573: PPUSH
38574: CALL_OW 1
38578: ST_TO_ADDR
38579: GO 38843
// begin tmp := arr ;
38581: LD_ADDR_VAR 0 6
38585: PUSH
38586: LD_VAR 0 1
38590: ST_TO_ADDR
// s_arr := [ tmp ] ;
38591: LD_ADDR_VAR 0 7
38595: PUSH
38596: LD_VAR 0 6
38600: PUSH
38601: EMPTY
38602: LIST
38603: ST_TO_ADDR
// for i = 1 to pos - 1 do
38604: LD_ADDR_VAR 0 5
38608: PUSH
38609: DOUBLE
38610: LD_INT 1
38612: DEC
38613: ST_TO_ADDR
38614: LD_VAR 0 2
38618: PUSH
38619: LD_INT 1
38621: MINUS
38622: PUSH
38623: FOR_TO
38624: IFFALSE 38669
// begin tmp := tmp [ pos [ i ] ] ;
38626: LD_ADDR_VAR 0 6
38630: PUSH
38631: LD_VAR 0 6
38635: PUSH
38636: LD_VAR 0 2
38640: PUSH
38641: LD_VAR 0 5
38645: ARRAY
38646: ARRAY
38647: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38648: LD_ADDR_VAR 0 7
38652: PUSH
38653: LD_VAR 0 7
38657: PUSH
38658: LD_VAR 0 6
38662: PUSH
38663: EMPTY
38664: LIST
38665: ADD
38666: ST_TO_ADDR
// end ;
38667: GO 38623
38669: POP
38670: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38671: LD_ADDR_VAR 0 6
38675: PUSH
38676: LD_VAR 0 6
38680: PPUSH
38681: LD_VAR 0 2
38685: PUSH
38686: LD_VAR 0 2
38690: ARRAY
38691: PPUSH
38692: LD_VAR 0 3
38696: PPUSH
38697: CALL_OW 1
38701: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38702: LD_ADDR_VAR 0 7
38706: PUSH
38707: LD_VAR 0 7
38711: PPUSH
38712: LD_VAR 0 7
38716: PPUSH
38717: LD_VAR 0 6
38721: PPUSH
38722: CALL_OW 1
38726: ST_TO_ADDR
// for i = s_arr downto 2 do
38727: LD_ADDR_VAR 0 5
38731: PUSH
38732: DOUBLE
38733: LD_VAR 0 7
38737: INC
38738: ST_TO_ADDR
38739: LD_INT 2
38741: PUSH
38742: FOR_DOWNTO
38743: IFFALSE 38827
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38745: LD_ADDR_VAR 0 6
38749: PUSH
38750: LD_VAR 0 7
38754: PUSH
38755: LD_VAR 0 5
38759: PUSH
38760: LD_INT 1
38762: MINUS
38763: ARRAY
38764: PPUSH
38765: LD_VAR 0 2
38769: PUSH
38770: LD_VAR 0 5
38774: PUSH
38775: LD_INT 1
38777: MINUS
38778: ARRAY
38779: PPUSH
38780: LD_VAR 0 7
38784: PUSH
38785: LD_VAR 0 5
38789: ARRAY
38790: PPUSH
38791: CALL_OW 1
38795: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38796: LD_ADDR_VAR 0 7
38800: PUSH
38801: LD_VAR 0 7
38805: PPUSH
38806: LD_VAR 0 5
38810: PUSH
38811: LD_INT 1
38813: MINUS
38814: PPUSH
38815: LD_VAR 0 6
38819: PPUSH
38820: CALL_OW 1
38824: ST_TO_ADDR
// end ;
38825: GO 38742
38827: POP
38828: POP
// result := s_arr [ 1 ] ;
38829: LD_ADDR_VAR 0 4
38833: PUSH
38834: LD_VAR 0 7
38838: PUSH
38839: LD_INT 1
38841: ARRAY
38842: ST_TO_ADDR
// end ; end ;
38843: LD_VAR 0 4
38847: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38848: LD_INT 0
38850: PPUSH
38851: PPUSH
// if not list then
38852: LD_VAR 0 1
38856: NOT
38857: IFFALSE 38861
// exit ;
38859: GO 38952
// i := list [ pos1 ] ;
38861: LD_ADDR_VAR 0 5
38865: PUSH
38866: LD_VAR 0 1
38870: PUSH
38871: LD_VAR 0 2
38875: ARRAY
38876: ST_TO_ADDR
// if not i then
38877: LD_VAR 0 5
38881: NOT
38882: IFFALSE 38886
// exit ;
38884: GO 38952
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38886: LD_ADDR_VAR 0 1
38890: PUSH
38891: LD_VAR 0 1
38895: PPUSH
38896: LD_VAR 0 2
38900: PPUSH
38901: LD_VAR 0 1
38905: PUSH
38906: LD_VAR 0 3
38910: ARRAY
38911: PPUSH
38912: CALL_OW 1
38916: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38917: LD_ADDR_VAR 0 1
38921: PUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: LD_VAR 0 3
38931: PPUSH
38932: LD_VAR 0 5
38936: PPUSH
38937: CALL_OW 1
38941: ST_TO_ADDR
// result := list ;
38942: LD_ADDR_VAR 0 4
38946: PUSH
38947: LD_VAR 0 1
38951: ST_TO_ADDR
// end ;
38952: LD_VAR 0 4
38956: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38957: LD_INT 0
38959: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38960: LD_ADDR_VAR 0 5
38964: PUSH
38965: LD_VAR 0 1
38969: PPUSH
38970: CALL_OW 250
38974: PPUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 251
38984: PPUSH
38985: LD_VAR 0 2
38989: PPUSH
38990: LD_VAR 0 3
38994: PPUSH
38995: LD_VAR 0 4
38999: PPUSH
39000: CALL 39378 0 5
39004: ST_TO_ADDR
// end ;
39005: LD_VAR 0 5
39009: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39010: LD_INT 0
39012: PPUSH
39013: PPUSH
39014: PPUSH
39015: PPUSH
// if not list or not unit then
39016: LD_VAR 0 2
39020: NOT
39021: PUSH
39022: LD_VAR 0 1
39026: NOT
39027: OR
39028: IFFALSE 39032
// exit ;
39030: GO 39373
// result := [ ] ;
39032: LD_ADDR_VAR 0 5
39036: PUSH
39037: EMPTY
39038: ST_TO_ADDR
// for i in list do
39039: LD_ADDR_VAR 0 6
39043: PUSH
39044: LD_VAR 0 2
39048: PUSH
39049: FOR_IN
39050: IFFALSE 39268
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39052: LD_ADDR_VAR 0 8
39056: PUSH
39057: LD_VAR 0 1
39061: PPUSH
39062: LD_VAR 0 6
39066: PUSH
39067: LD_INT 1
39069: ARRAY
39070: PPUSH
39071: LD_VAR 0 6
39075: PUSH
39076: LD_INT 2
39078: ARRAY
39079: PPUSH
39080: CALL_OW 297
39084: ST_TO_ADDR
// if not Count ( result ) then
39085: LD_VAR 0 5
39089: PPUSH
39090: CALL 35662 0 1
39094: NOT
39095: IFFALSE 39128
// begin result := Join ( result , [ i , tmp ] ) ;
39097: LD_ADDR_VAR 0 5
39101: PUSH
39102: LD_VAR 0 5
39106: PPUSH
39107: LD_VAR 0 6
39111: PUSH
39112: LD_VAR 0 8
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PPUSH
39121: CALL 71271 0 2
39125: ST_TO_ADDR
// continue ;
39126: GO 39049
// end ; if result [ result ] [ 2 ] <= tmp then
39128: LD_VAR 0 5
39132: PUSH
39133: LD_VAR 0 5
39137: ARRAY
39138: PUSH
39139: LD_INT 2
39141: ARRAY
39142: PUSH
39143: LD_VAR 0 8
39147: LESSEQUAL
39148: IFFALSE 39181
// result := Join ( result , [ i , tmp ] ) else
39150: LD_ADDR_VAR 0 5
39154: PUSH
39155: LD_VAR 0 5
39159: PPUSH
39160: LD_VAR 0 6
39164: PUSH
39165: LD_VAR 0 8
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PPUSH
39174: CALL 71271 0 2
39178: ST_TO_ADDR
39179: GO 39266
// begin for j := 1 to Count ( result ) do
39181: LD_ADDR_VAR 0 7
39185: PUSH
39186: DOUBLE
39187: LD_INT 1
39189: DEC
39190: ST_TO_ADDR
39191: LD_VAR 0 5
39195: PPUSH
39196: CALL 35662 0 1
39200: PUSH
39201: FOR_TO
39202: IFFALSE 39264
// begin if tmp < result [ j ] [ 2 ] then
39204: LD_VAR 0 8
39208: PUSH
39209: LD_VAR 0 5
39213: PUSH
39214: LD_VAR 0 7
39218: ARRAY
39219: PUSH
39220: LD_INT 2
39222: ARRAY
39223: LESS
39224: IFFALSE 39262
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39226: LD_ADDR_VAR 0 5
39230: PUSH
39231: LD_VAR 0 5
39235: PPUSH
39236: LD_VAR 0 7
39240: PPUSH
39241: LD_VAR 0 6
39245: PUSH
39246: LD_VAR 0 8
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PPUSH
39255: CALL_OW 2
39259: ST_TO_ADDR
// break ;
39260: GO 39264
// end ; end ;
39262: GO 39201
39264: POP
39265: POP
// end ; end ;
39266: GO 39049
39268: POP
39269: POP
// if result and not asc then
39270: LD_VAR 0 5
39274: PUSH
39275: LD_VAR 0 3
39279: NOT
39280: AND
39281: IFFALSE 39298
// result := ReverseArray ( result ) ;
39283: LD_ADDR_VAR 0 5
39287: PUSH
39288: LD_VAR 0 5
39292: PPUSH
39293: CALL 66538 0 1
39297: ST_TO_ADDR
// tmp := [ ] ;
39298: LD_ADDR_VAR 0 8
39302: PUSH
39303: EMPTY
39304: ST_TO_ADDR
// if mode then
39305: LD_VAR 0 4
39309: IFFALSE 39373
// begin for i := 1 to result do
39311: LD_ADDR_VAR 0 6
39315: PUSH
39316: DOUBLE
39317: LD_INT 1
39319: DEC
39320: ST_TO_ADDR
39321: LD_VAR 0 5
39325: PUSH
39326: FOR_TO
39327: IFFALSE 39361
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39329: LD_ADDR_VAR 0 8
39333: PUSH
39334: LD_VAR 0 8
39338: PPUSH
39339: LD_VAR 0 5
39343: PUSH
39344: LD_VAR 0 6
39348: ARRAY
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PPUSH
39354: CALL 71271 0 2
39358: ST_TO_ADDR
39359: GO 39326
39361: POP
39362: POP
// result := tmp ;
39363: LD_ADDR_VAR 0 5
39367: PUSH
39368: LD_VAR 0 8
39372: ST_TO_ADDR
// end ; end ;
39373: LD_VAR 0 5
39377: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39378: LD_INT 0
39380: PPUSH
39381: PPUSH
39382: PPUSH
39383: PPUSH
// if not list then
39384: LD_VAR 0 3
39388: NOT
39389: IFFALSE 39393
// exit ;
39391: GO 39781
// result := [ ] ;
39393: LD_ADDR_VAR 0 6
39397: PUSH
39398: EMPTY
39399: ST_TO_ADDR
// for i in list do
39400: LD_ADDR_VAR 0 7
39404: PUSH
39405: LD_VAR 0 3
39409: PUSH
39410: FOR_IN
39411: IFFALSE 39613
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39413: LD_ADDR_VAR 0 9
39417: PUSH
39418: LD_VAR 0 7
39422: PPUSH
39423: LD_VAR 0 1
39427: PPUSH
39428: LD_VAR 0 2
39432: PPUSH
39433: CALL_OW 297
39437: ST_TO_ADDR
// if not result then
39438: LD_VAR 0 6
39442: NOT
39443: IFFALSE 39469
// result := [ [ i , tmp ] ] else
39445: LD_ADDR_VAR 0 6
39449: PUSH
39450: LD_VAR 0 7
39454: PUSH
39455: LD_VAR 0 9
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: EMPTY
39465: LIST
39466: ST_TO_ADDR
39467: GO 39611
// begin if result [ result ] [ 2 ] <= tmp then
39469: LD_VAR 0 6
39473: PUSH
39474: LD_VAR 0 6
39478: ARRAY
39479: PUSH
39480: LD_INT 2
39482: ARRAY
39483: PUSH
39484: LD_VAR 0 9
39488: LESSEQUAL
39489: IFFALSE 39531
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39491: LD_ADDR_VAR 0 6
39495: PUSH
39496: LD_VAR 0 6
39500: PPUSH
39501: LD_VAR 0 6
39505: PUSH
39506: LD_INT 1
39508: PLUS
39509: PPUSH
39510: LD_VAR 0 7
39514: PUSH
39515: LD_VAR 0 9
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PPUSH
39524: CALL_OW 2
39528: ST_TO_ADDR
39529: GO 39611
// for j := 1 to result do
39531: LD_ADDR_VAR 0 8
39535: PUSH
39536: DOUBLE
39537: LD_INT 1
39539: DEC
39540: ST_TO_ADDR
39541: LD_VAR 0 6
39545: PUSH
39546: FOR_TO
39547: IFFALSE 39609
// begin if tmp < result [ j ] [ 2 ] then
39549: LD_VAR 0 9
39553: PUSH
39554: LD_VAR 0 6
39558: PUSH
39559: LD_VAR 0 8
39563: ARRAY
39564: PUSH
39565: LD_INT 2
39567: ARRAY
39568: LESS
39569: IFFALSE 39607
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39571: LD_ADDR_VAR 0 6
39575: PUSH
39576: LD_VAR 0 6
39580: PPUSH
39581: LD_VAR 0 8
39585: PPUSH
39586: LD_VAR 0 7
39590: PUSH
39591: LD_VAR 0 9
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PPUSH
39600: CALL_OW 2
39604: ST_TO_ADDR
// break ;
39605: GO 39609
// end ; end ;
39607: GO 39546
39609: POP
39610: POP
// end ; end ;
39611: GO 39410
39613: POP
39614: POP
// if result and not asc then
39615: LD_VAR 0 6
39619: PUSH
39620: LD_VAR 0 4
39624: NOT
39625: AND
39626: IFFALSE 39701
// begin tmp := result ;
39628: LD_ADDR_VAR 0 9
39632: PUSH
39633: LD_VAR 0 6
39637: ST_TO_ADDR
// for i = tmp downto 1 do
39638: LD_ADDR_VAR 0 7
39642: PUSH
39643: DOUBLE
39644: LD_VAR 0 9
39648: INC
39649: ST_TO_ADDR
39650: LD_INT 1
39652: PUSH
39653: FOR_DOWNTO
39654: IFFALSE 39699
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39656: LD_ADDR_VAR 0 6
39660: PUSH
39661: LD_VAR 0 6
39665: PPUSH
39666: LD_VAR 0 9
39670: PUSH
39671: LD_VAR 0 7
39675: MINUS
39676: PUSH
39677: LD_INT 1
39679: PLUS
39680: PPUSH
39681: LD_VAR 0 9
39685: PUSH
39686: LD_VAR 0 7
39690: ARRAY
39691: PPUSH
39692: CALL_OW 1
39696: ST_TO_ADDR
39697: GO 39653
39699: POP
39700: POP
// end ; tmp := [ ] ;
39701: LD_ADDR_VAR 0 9
39705: PUSH
39706: EMPTY
39707: ST_TO_ADDR
// if mode then
39708: LD_VAR 0 5
39712: IFFALSE 39781
// begin for i = 1 to result do
39714: LD_ADDR_VAR 0 7
39718: PUSH
39719: DOUBLE
39720: LD_INT 1
39722: DEC
39723: ST_TO_ADDR
39724: LD_VAR 0 6
39728: PUSH
39729: FOR_TO
39730: IFFALSE 39769
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39732: LD_ADDR_VAR 0 9
39736: PUSH
39737: LD_VAR 0 9
39741: PPUSH
39742: LD_VAR 0 7
39746: PPUSH
39747: LD_VAR 0 6
39751: PUSH
39752: LD_VAR 0 7
39756: ARRAY
39757: PUSH
39758: LD_INT 1
39760: ARRAY
39761: PPUSH
39762: CALL_OW 1
39766: ST_TO_ADDR
39767: GO 39729
39769: POP
39770: POP
// result := tmp ;
39771: LD_ADDR_VAR 0 6
39775: PUSH
39776: LD_VAR 0 9
39780: ST_TO_ADDR
// end ; end ;
39781: LD_VAR 0 6
39785: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39786: LD_INT 0
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39794: LD_ADDR_VAR 0 5
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: EMPTY
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: ST_TO_ADDR
// if not x or not y then
39816: LD_VAR 0 2
39820: NOT
39821: PUSH
39822: LD_VAR 0 3
39826: NOT
39827: OR
39828: IFFALSE 39832
// exit ;
39830: GO 41482
// if not range then
39832: LD_VAR 0 4
39836: NOT
39837: IFFALSE 39847
// range := 10 ;
39839: LD_ADDR_VAR 0 4
39843: PUSH
39844: LD_INT 10
39846: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39847: LD_ADDR_VAR 0 8
39851: PUSH
39852: LD_INT 81
39854: PUSH
39855: LD_VAR 0 1
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 92
39866: PUSH
39867: LD_VAR 0 2
39871: PUSH
39872: LD_VAR 0 3
39876: PUSH
39877: LD_VAR 0 4
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 3
39890: PUSH
39891: LD_INT 21
39893: PUSH
39894: LD_INT 3
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: PPUSH
39910: CALL_OW 69
39914: ST_TO_ADDR
// if not tmp then
39915: LD_VAR 0 8
39919: NOT
39920: IFFALSE 39924
// exit ;
39922: GO 41482
// for i in tmp do
39924: LD_ADDR_VAR 0 6
39928: PUSH
39929: LD_VAR 0 8
39933: PUSH
39934: FOR_IN
39935: IFFALSE 41457
// begin points := [ 0 , 0 , 0 ] ;
39937: LD_ADDR_VAR 0 9
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: LIST
39955: ST_TO_ADDR
// bpoints := 1 ;
39956: LD_ADDR_VAR 0 10
39960: PUSH
39961: LD_INT 1
39963: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39964: LD_VAR 0 6
39968: PPUSH
39969: CALL_OW 247
39973: PUSH
39974: LD_INT 1
39976: DOUBLE
39977: EQUAL
39978: IFTRUE 39982
39980: GO 40560
39982: POP
// begin if GetClass ( i ) = 1 then
39983: LD_VAR 0 6
39987: PPUSH
39988: CALL_OW 257
39992: PUSH
39993: LD_INT 1
39995: EQUAL
39996: IFFALSE 40017
// points := [ 10 , 5 , 3 ] ;
39998: LD_ADDR_VAR 0 9
40002: PUSH
40003: LD_INT 10
40005: PUSH
40006: LD_INT 5
40008: PUSH
40009: LD_INT 3
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40017: LD_VAR 0 6
40021: PPUSH
40022: CALL_OW 257
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: LD_INT 4
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: IN
40041: IFFALSE 40062
// points := [ 3 , 2 , 1 ] ;
40043: LD_ADDR_VAR 0 9
40047: PUSH
40048: LD_INT 3
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40062: LD_VAR 0 6
40066: PPUSH
40067: CALL_OW 257
40071: PUSH
40072: LD_INT 5
40074: EQUAL
40075: IFFALSE 40096
// points := [ 130 , 5 , 2 ] ;
40077: LD_ADDR_VAR 0 9
40081: PUSH
40082: LD_INT 130
40084: PUSH
40085: LD_INT 5
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: LIST
40095: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40096: LD_VAR 0 6
40100: PPUSH
40101: CALL_OW 257
40105: PUSH
40106: LD_INT 8
40108: EQUAL
40109: IFFALSE 40130
// points := [ 35 , 35 , 30 ] ;
40111: LD_ADDR_VAR 0 9
40115: PUSH
40116: LD_INT 35
40118: PUSH
40119: LD_INT 35
40121: PUSH
40122: LD_INT 30
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: LIST
40129: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40130: LD_VAR 0 6
40134: PPUSH
40135: CALL_OW 257
40139: PUSH
40140: LD_INT 9
40142: EQUAL
40143: IFFALSE 40164
// points := [ 20 , 55 , 40 ] ;
40145: LD_ADDR_VAR 0 9
40149: PUSH
40150: LD_INT 20
40152: PUSH
40153: LD_INT 55
40155: PUSH
40156: LD_INT 40
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: LIST
40163: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40164: LD_VAR 0 6
40168: PPUSH
40169: CALL_OW 257
40173: PUSH
40174: LD_INT 12
40176: PUSH
40177: LD_INT 16
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: IN
40184: IFFALSE 40205
// points := [ 5 , 3 , 2 ] ;
40186: LD_ADDR_VAR 0 9
40190: PUSH
40191: LD_INT 5
40193: PUSH
40194: LD_INT 3
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40205: LD_VAR 0 6
40209: PPUSH
40210: CALL_OW 257
40214: PUSH
40215: LD_INT 17
40217: EQUAL
40218: IFFALSE 40239
// points := [ 100 , 50 , 75 ] ;
40220: LD_ADDR_VAR 0 9
40224: PUSH
40225: LD_INT 100
40227: PUSH
40228: LD_INT 50
40230: PUSH
40231: LD_INT 75
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40239: LD_VAR 0 6
40243: PPUSH
40244: CALL_OW 257
40248: PUSH
40249: LD_INT 15
40251: EQUAL
40252: IFFALSE 40273
// points := [ 10 , 5 , 3 ] ;
40254: LD_ADDR_VAR 0 9
40258: PUSH
40259: LD_INT 10
40261: PUSH
40262: LD_INT 5
40264: PUSH
40265: LD_INT 3
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: LIST
40272: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40273: LD_VAR 0 6
40277: PPUSH
40278: CALL_OW 257
40282: PUSH
40283: LD_INT 14
40285: EQUAL
40286: IFFALSE 40307
// points := [ 10 , 0 , 0 ] ;
40288: LD_ADDR_VAR 0 9
40292: PUSH
40293: LD_INT 10
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40307: LD_VAR 0 6
40311: PPUSH
40312: CALL_OW 257
40316: PUSH
40317: LD_INT 11
40319: EQUAL
40320: IFFALSE 40341
// points := [ 30 , 10 , 5 ] ;
40322: LD_ADDR_VAR 0 9
40326: PUSH
40327: LD_INT 30
40329: PUSH
40330: LD_INT 10
40332: PUSH
40333: LD_INT 5
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: LIST
40340: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40341: LD_VAR 0 1
40345: PPUSH
40346: LD_INT 5
40348: PPUSH
40349: CALL_OW 321
40353: PUSH
40354: LD_INT 2
40356: EQUAL
40357: IFFALSE 40374
// bpoints := bpoints * 1.8 ;
40359: LD_ADDR_VAR 0 10
40363: PUSH
40364: LD_VAR 0 10
40368: PUSH
40369: LD_REAL  1.80000000000000E+0000
40372: MUL
40373: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40374: LD_VAR 0 6
40378: PPUSH
40379: CALL_OW 257
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: LD_INT 3
40392: PUSH
40393: LD_INT 4
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: IN
40402: PUSH
40403: LD_VAR 0 1
40407: PPUSH
40408: LD_INT 51
40410: PPUSH
40411: CALL_OW 321
40415: PUSH
40416: LD_INT 2
40418: EQUAL
40419: AND
40420: IFFALSE 40437
// bpoints := bpoints * 1.2 ;
40422: LD_ADDR_VAR 0 10
40426: PUSH
40427: LD_VAR 0 10
40431: PUSH
40432: LD_REAL  1.20000000000000E+0000
40435: MUL
40436: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40437: LD_VAR 0 6
40441: PPUSH
40442: CALL_OW 257
40446: PUSH
40447: LD_INT 5
40449: PUSH
40450: LD_INT 7
40452: PUSH
40453: LD_INT 9
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: LIST
40460: IN
40461: PUSH
40462: LD_VAR 0 1
40466: PPUSH
40467: LD_INT 52
40469: PPUSH
40470: CALL_OW 321
40474: PUSH
40475: LD_INT 2
40477: EQUAL
40478: AND
40479: IFFALSE 40496
// bpoints := bpoints * 1.5 ;
40481: LD_ADDR_VAR 0 10
40485: PUSH
40486: LD_VAR 0 10
40490: PUSH
40491: LD_REAL  1.50000000000000E+0000
40494: MUL
40495: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40496: LD_VAR 0 1
40500: PPUSH
40501: LD_INT 66
40503: PPUSH
40504: CALL_OW 321
40508: PUSH
40509: LD_INT 2
40511: EQUAL
40512: IFFALSE 40529
// bpoints := bpoints * 1.1 ;
40514: LD_ADDR_VAR 0 10
40518: PUSH
40519: LD_VAR 0 10
40523: PUSH
40524: LD_REAL  1.10000000000000E+0000
40527: MUL
40528: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40529: LD_ADDR_VAR 0 10
40533: PUSH
40534: LD_VAR 0 10
40538: PUSH
40539: LD_VAR 0 6
40543: PPUSH
40544: LD_INT 1
40546: PPUSH
40547: CALL_OW 259
40551: PUSH
40552: LD_REAL  1.15000000000000E+0000
40555: MUL
40556: MUL
40557: ST_TO_ADDR
// end ; unit_vehicle :
40558: GO 41386
40560: LD_INT 2
40562: DOUBLE
40563: EQUAL
40564: IFTRUE 40568
40566: GO 41374
40568: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40569: LD_VAR 0 6
40573: PPUSH
40574: CALL_OW 264
40578: PUSH
40579: LD_INT 2
40581: PUSH
40582: LD_INT 42
40584: PUSH
40585: LD_INT 24
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: IN
40593: IFFALSE 40614
// points := [ 25 , 5 , 3 ] ;
40595: LD_ADDR_VAR 0 9
40599: PUSH
40600: LD_INT 25
40602: PUSH
40603: LD_INT 5
40605: PUSH
40606: LD_INT 3
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: LIST
40613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40614: LD_VAR 0 6
40618: PPUSH
40619: CALL_OW 264
40623: PUSH
40624: LD_INT 4
40626: PUSH
40627: LD_INT 43
40629: PUSH
40630: LD_INT 25
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: IN
40638: IFFALSE 40659
// points := [ 40 , 15 , 5 ] ;
40640: LD_ADDR_VAR 0 9
40644: PUSH
40645: LD_INT 40
40647: PUSH
40648: LD_INT 15
40650: PUSH
40651: LD_INT 5
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: LIST
40658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40659: LD_VAR 0 6
40663: PPUSH
40664: CALL_OW 264
40668: PUSH
40669: LD_INT 3
40671: PUSH
40672: LD_INT 23
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: IN
40679: IFFALSE 40700
// points := [ 7 , 25 , 8 ] ;
40681: LD_ADDR_VAR 0 9
40685: PUSH
40686: LD_INT 7
40688: PUSH
40689: LD_INT 25
40691: PUSH
40692: LD_INT 8
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: LIST
40699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40700: LD_VAR 0 6
40704: PPUSH
40705: CALL_OW 264
40709: PUSH
40710: LD_INT 5
40712: PUSH
40713: LD_INT 27
40715: PUSH
40716: LD_INT 44
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: IN
40724: IFFALSE 40745
// points := [ 14 , 50 , 16 ] ;
40726: LD_ADDR_VAR 0 9
40730: PUSH
40731: LD_INT 14
40733: PUSH
40734: LD_INT 50
40736: PUSH
40737: LD_INT 16
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40745: LD_VAR 0 6
40749: PPUSH
40750: CALL_OW 264
40754: PUSH
40755: LD_INT 6
40757: PUSH
40758: LD_INT 46
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: IN
40765: IFFALSE 40786
// points := [ 32 , 120 , 70 ] ;
40767: LD_ADDR_VAR 0 9
40771: PUSH
40772: LD_INT 32
40774: PUSH
40775: LD_INT 120
40777: PUSH
40778: LD_INT 70
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40786: LD_VAR 0 6
40790: PPUSH
40791: CALL_OW 264
40795: PUSH
40796: LD_INT 7
40798: PUSH
40799: LD_INT 28
40801: PUSH
40802: LD_INT 45
40804: PUSH
40805: LD_INT 92
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: IN
40814: IFFALSE 40835
// points := [ 35 , 20 , 45 ] ;
40816: LD_ADDR_VAR 0 9
40820: PUSH
40821: LD_INT 35
40823: PUSH
40824: LD_INT 20
40826: PUSH
40827: LD_INT 45
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: LIST
40834: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40835: LD_VAR 0 6
40839: PPUSH
40840: CALL_OW 264
40844: PUSH
40845: LD_INT 47
40847: PUSH
40848: EMPTY
40849: LIST
40850: IN
40851: IFFALSE 40872
// points := [ 67 , 45 , 75 ] ;
40853: LD_ADDR_VAR 0 9
40857: PUSH
40858: LD_INT 67
40860: PUSH
40861: LD_INT 45
40863: PUSH
40864: LD_INT 75
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: LIST
40871: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40872: LD_VAR 0 6
40876: PPUSH
40877: CALL_OW 264
40881: PUSH
40882: LD_INT 26
40884: PUSH
40885: EMPTY
40886: LIST
40887: IN
40888: IFFALSE 40909
// points := [ 120 , 30 , 80 ] ;
40890: LD_ADDR_VAR 0 9
40894: PUSH
40895: LD_INT 120
40897: PUSH
40898: LD_INT 30
40900: PUSH
40901: LD_INT 80
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40909: LD_VAR 0 6
40913: PPUSH
40914: CALL_OW 264
40918: PUSH
40919: LD_INT 22
40921: PUSH
40922: EMPTY
40923: LIST
40924: IN
40925: IFFALSE 40946
// points := [ 40 , 1 , 1 ] ;
40927: LD_ADDR_VAR 0 9
40931: PUSH
40932: LD_INT 40
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40946: LD_VAR 0 6
40950: PPUSH
40951: CALL_OW 264
40955: PUSH
40956: LD_INT 29
40958: PUSH
40959: EMPTY
40960: LIST
40961: IN
40962: IFFALSE 40983
// points := [ 70 , 200 , 400 ] ;
40964: LD_ADDR_VAR 0 9
40968: PUSH
40969: LD_INT 70
40971: PUSH
40972: LD_INT 200
40974: PUSH
40975: LD_INT 400
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: LIST
40982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40983: LD_VAR 0 6
40987: PPUSH
40988: CALL_OW 264
40992: PUSH
40993: LD_INT 14
40995: PUSH
40996: LD_INT 53
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: IN
41003: IFFALSE 41024
// points := [ 40 , 10 , 20 ] ;
41005: LD_ADDR_VAR 0 9
41009: PUSH
41010: LD_INT 40
41012: PUSH
41013: LD_INT 10
41015: PUSH
41016: LD_INT 20
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: LIST
41023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41024: LD_VAR 0 6
41028: PPUSH
41029: CALL_OW 264
41033: PUSH
41034: LD_INT 9
41036: PUSH
41037: EMPTY
41038: LIST
41039: IN
41040: IFFALSE 41061
// points := [ 5 , 70 , 20 ] ;
41042: LD_ADDR_VAR 0 9
41046: PUSH
41047: LD_INT 5
41049: PUSH
41050: LD_INT 70
41052: PUSH
41053: LD_INT 20
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41061: LD_VAR 0 6
41065: PPUSH
41066: CALL_OW 264
41070: PUSH
41071: LD_INT 10
41073: PUSH
41074: EMPTY
41075: LIST
41076: IN
41077: IFFALSE 41098
// points := [ 35 , 110 , 70 ] ;
41079: LD_ADDR_VAR 0 9
41083: PUSH
41084: LD_INT 35
41086: PUSH
41087: LD_INT 110
41089: PUSH
41090: LD_INT 70
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: LIST
41097: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41098: LD_VAR 0 6
41102: PPUSH
41103: CALL_OW 265
41107: PUSH
41108: LD_INT 25
41110: EQUAL
41111: IFFALSE 41132
// points := [ 80 , 65 , 100 ] ;
41113: LD_ADDR_VAR 0 9
41117: PUSH
41118: LD_INT 80
41120: PUSH
41121: LD_INT 65
41123: PUSH
41124: LD_INT 100
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: LIST
41131: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41132: LD_VAR 0 6
41136: PPUSH
41137: CALL_OW 263
41141: PUSH
41142: LD_INT 1
41144: EQUAL
41145: IFFALSE 41180
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41147: LD_ADDR_VAR 0 10
41151: PUSH
41152: LD_VAR 0 10
41156: PUSH
41157: LD_VAR 0 6
41161: PPUSH
41162: CALL_OW 311
41166: PPUSH
41167: LD_INT 3
41169: PPUSH
41170: CALL_OW 259
41174: PUSH
41175: LD_INT 4
41177: MUL
41178: MUL
41179: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41180: LD_VAR 0 6
41184: PPUSH
41185: CALL_OW 263
41189: PUSH
41190: LD_INT 2
41192: EQUAL
41193: IFFALSE 41244
// begin j := IsControledBy ( i ) ;
41195: LD_ADDR_VAR 0 7
41199: PUSH
41200: LD_VAR 0 6
41204: PPUSH
41205: CALL_OW 312
41209: ST_TO_ADDR
// if j then
41210: LD_VAR 0 7
41214: IFFALSE 41244
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41216: LD_ADDR_VAR 0 10
41220: PUSH
41221: LD_VAR 0 10
41225: PUSH
41226: LD_VAR 0 7
41230: PPUSH
41231: LD_INT 3
41233: PPUSH
41234: CALL_OW 259
41238: PUSH
41239: LD_INT 3
41241: MUL
41242: MUL
41243: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41244: LD_VAR 0 6
41248: PPUSH
41249: CALL_OW 264
41253: PUSH
41254: LD_INT 5
41256: PUSH
41257: LD_INT 6
41259: PUSH
41260: LD_INT 46
41262: PUSH
41263: LD_INT 44
41265: PUSH
41266: LD_INT 47
41268: PUSH
41269: LD_INT 45
41271: PUSH
41272: LD_INT 28
41274: PUSH
41275: LD_INT 7
41277: PUSH
41278: LD_INT 27
41280: PUSH
41281: LD_INT 29
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: IN
41296: PUSH
41297: LD_VAR 0 1
41301: PPUSH
41302: LD_INT 52
41304: PPUSH
41305: CALL_OW 321
41309: PUSH
41310: LD_INT 2
41312: EQUAL
41313: AND
41314: IFFALSE 41331
// bpoints := bpoints * 1.2 ;
41316: LD_ADDR_VAR 0 10
41320: PUSH
41321: LD_VAR 0 10
41325: PUSH
41326: LD_REAL  1.20000000000000E+0000
41329: MUL
41330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41331: LD_VAR 0 6
41335: PPUSH
41336: CALL_OW 264
41340: PUSH
41341: LD_INT 6
41343: PUSH
41344: LD_INT 46
41346: PUSH
41347: LD_INT 47
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: IN
41355: IFFALSE 41372
// bpoints := bpoints * 1.2 ;
41357: LD_ADDR_VAR 0 10
41361: PUSH
41362: LD_VAR 0 10
41366: PUSH
41367: LD_REAL  1.20000000000000E+0000
41370: MUL
41371: ST_TO_ADDR
// end ; unit_building :
41372: GO 41386
41374: LD_INT 3
41376: DOUBLE
41377: EQUAL
41378: IFTRUE 41382
41380: GO 41385
41382: POP
// ; end ;
41383: GO 41386
41385: POP
// for j = 1 to 3 do
41386: LD_ADDR_VAR 0 7
41390: PUSH
41391: DOUBLE
41392: LD_INT 1
41394: DEC
41395: ST_TO_ADDR
41396: LD_INT 3
41398: PUSH
41399: FOR_TO
41400: IFFALSE 41453
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41402: LD_ADDR_VAR 0 5
41406: PUSH
41407: LD_VAR 0 5
41411: PPUSH
41412: LD_VAR 0 7
41416: PPUSH
41417: LD_VAR 0 5
41421: PUSH
41422: LD_VAR 0 7
41426: ARRAY
41427: PUSH
41428: LD_VAR 0 9
41432: PUSH
41433: LD_VAR 0 7
41437: ARRAY
41438: PUSH
41439: LD_VAR 0 10
41443: MUL
41444: PLUS
41445: PPUSH
41446: CALL_OW 1
41450: ST_TO_ADDR
41451: GO 41399
41453: POP
41454: POP
// end ;
41455: GO 39934
41457: POP
41458: POP
// result := Replace ( result , 4 , tmp ) ;
41459: LD_ADDR_VAR 0 5
41463: PUSH
41464: LD_VAR 0 5
41468: PPUSH
41469: LD_INT 4
41471: PPUSH
41472: LD_VAR 0 8
41476: PPUSH
41477: CALL_OW 1
41481: ST_TO_ADDR
// end ;
41482: LD_VAR 0 5
41486: RET
// export function DangerAtRange ( unit , range ) ; begin
41487: LD_INT 0
41489: PPUSH
// if not unit then
41490: LD_VAR 0 1
41494: NOT
41495: IFFALSE 41499
// exit ;
41497: GO 41544
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41499: LD_ADDR_VAR 0 3
41503: PUSH
41504: LD_VAR 0 1
41508: PPUSH
41509: CALL_OW 255
41513: PPUSH
41514: LD_VAR 0 1
41518: PPUSH
41519: CALL_OW 250
41523: PPUSH
41524: LD_VAR 0 1
41528: PPUSH
41529: CALL_OW 251
41533: PPUSH
41534: LD_VAR 0 2
41538: PPUSH
41539: CALL 39786 0 4
41543: ST_TO_ADDR
// end ;
41544: LD_VAR 0 3
41548: RET
// export function DangerInArea ( side , area ) ; begin
41549: LD_INT 0
41551: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41552: LD_ADDR_VAR 0 3
41556: PUSH
41557: LD_VAR 0 2
41561: PPUSH
41562: LD_INT 81
41564: PUSH
41565: LD_VAR 0 1
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PPUSH
41574: CALL_OW 70
41578: ST_TO_ADDR
// end ;
41579: LD_VAR 0 3
41583: RET
// export function IsExtension ( b ) ; begin
41584: LD_INT 0
41586: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41587: LD_ADDR_VAR 0 2
41591: PUSH
41592: LD_VAR 0 1
41596: PUSH
41597: LD_INT 23
41599: PUSH
41600: LD_INT 20
41602: PUSH
41603: LD_INT 22
41605: PUSH
41606: LD_INT 17
41608: PUSH
41609: LD_INT 24
41611: PUSH
41612: LD_INT 21
41614: PUSH
41615: LD_INT 19
41617: PUSH
41618: LD_INT 16
41620: PUSH
41621: LD_INT 25
41623: PUSH
41624: LD_INT 18
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: IN
41639: ST_TO_ADDR
// end ;
41640: LD_VAR 0 2
41644: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41645: LD_INT 0
41647: PPUSH
41648: PPUSH
41649: PPUSH
// result := [ ] ;
41650: LD_ADDR_VAR 0 4
41654: PUSH
41655: EMPTY
41656: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41657: LD_ADDR_VAR 0 5
41661: PUSH
41662: LD_VAR 0 2
41666: PPUSH
41667: LD_INT 21
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PPUSH
41677: CALL_OW 70
41681: ST_TO_ADDR
// if not tmp then
41682: LD_VAR 0 5
41686: NOT
41687: IFFALSE 41691
// exit ;
41689: GO 41755
// if checkLink then
41691: LD_VAR 0 3
41695: IFFALSE 41745
// begin for i in tmp do
41697: LD_ADDR_VAR 0 6
41701: PUSH
41702: LD_VAR 0 5
41706: PUSH
41707: FOR_IN
41708: IFFALSE 41743
// if GetBase ( i ) <> base then
41710: LD_VAR 0 6
41714: PPUSH
41715: CALL_OW 274
41719: PUSH
41720: LD_VAR 0 1
41724: NONEQUAL
41725: IFFALSE 41741
// ComLinkToBase ( base , i ) ;
41727: LD_VAR 0 1
41731: PPUSH
41732: LD_VAR 0 6
41736: PPUSH
41737: CALL_OW 169
41741: GO 41707
41743: POP
41744: POP
// end ; result := tmp ;
41745: LD_ADDR_VAR 0 4
41749: PUSH
41750: LD_VAR 0 5
41754: ST_TO_ADDR
// end ;
41755: LD_VAR 0 4
41759: RET
// export function ComComplete ( units , b ) ; var i ; begin
41760: LD_INT 0
41762: PPUSH
41763: PPUSH
// if not units then
41764: LD_VAR 0 1
41768: NOT
41769: IFFALSE 41773
// exit ;
41771: GO 41863
// for i in units do
41773: LD_ADDR_VAR 0 4
41777: PUSH
41778: LD_VAR 0 1
41782: PUSH
41783: FOR_IN
41784: IFFALSE 41861
// if BuildingStatus ( b ) = bs_build then
41786: LD_VAR 0 2
41790: PPUSH
41791: CALL_OW 461
41795: PUSH
41796: LD_INT 1
41798: EQUAL
41799: IFFALSE 41859
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41801: LD_VAR 0 4
41805: PPUSH
41806: LD_STRING h
41808: PUSH
41809: LD_VAR 0 2
41813: PPUSH
41814: CALL_OW 250
41818: PUSH
41819: LD_VAR 0 2
41823: PPUSH
41824: CALL_OW 251
41828: PUSH
41829: LD_VAR 0 2
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: PUSH
41852: EMPTY
41853: LIST
41854: PPUSH
41855: CALL_OW 446
41859: GO 41783
41861: POP
41862: POP
// end ;
41863: LD_VAR 0 3
41867: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41868: LD_INT 0
41870: PPUSH
41871: PPUSH
41872: PPUSH
41873: PPUSH
41874: PPUSH
41875: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41876: LD_VAR 0 1
41880: NOT
41881: PUSH
41882: LD_VAR 0 1
41886: PPUSH
41887: CALL_OW 263
41891: PUSH
41892: LD_INT 2
41894: NONEQUAL
41895: OR
41896: IFFALSE 41900
// exit ;
41898: GO 42216
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41900: LD_ADDR_VAR 0 6
41904: PUSH
41905: LD_INT 22
41907: PUSH
41908: LD_VAR 0 1
41912: PPUSH
41913: CALL_OW 255
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: LD_INT 30
41927: PUSH
41928: LD_INT 36
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 34
41937: PUSH
41938: LD_INT 31
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: LIST
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PPUSH
41954: CALL_OW 69
41958: ST_TO_ADDR
// if not tmp then
41959: LD_VAR 0 6
41963: NOT
41964: IFFALSE 41968
// exit ;
41966: GO 42216
// result := [ ] ;
41968: LD_ADDR_VAR 0 2
41972: PUSH
41973: EMPTY
41974: ST_TO_ADDR
// for i in tmp do
41975: LD_ADDR_VAR 0 3
41979: PUSH
41980: LD_VAR 0 6
41984: PUSH
41985: FOR_IN
41986: IFFALSE 42057
// begin t := UnitsInside ( i ) ;
41988: LD_ADDR_VAR 0 4
41992: PUSH
41993: LD_VAR 0 3
41997: PPUSH
41998: CALL_OW 313
42002: ST_TO_ADDR
// if t then
42003: LD_VAR 0 4
42007: IFFALSE 42055
// for j in t do
42009: LD_ADDR_VAR 0 7
42013: PUSH
42014: LD_VAR 0 4
42018: PUSH
42019: FOR_IN
42020: IFFALSE 42053
// result := Replace ( result , result + 1 , j ) ;
42022: LD_ADDR_VAR 0 2
42026: PUSH
42027: LD_VAR 0 2
42031: PPUSH
42032: LD_VAR 0 2
42036: PUSH
42037: LD_INT 1
42039: PLUS
42040: PPUSH
42041: LD_VAR 0 7
42045: PPUSH
42046: CALL_OW 1
42050: ST_TO_ADDR
42051: GO 42019
42053: POP
42054: POP
// end ;
42055: GO 41985
42057: POP
42058: POP
// if not result then
42059: LD_VAR 0 2
42063: NOT
42064: IFFALSE 42068
// exit ;
42066: GO 42216
// mech := result [ 1 ] ;
42068: LD_ADDR_VAR 0 5
42072: PUSH
42073: LD_VAR 0 2
42077: PUSH
42078: LD_INT 1
42080: ARRAY
42081: ST_TO_ADDR
// if result > 1 then
42082: LD_VAR 0 2
42086: PUSH
42087: LD_INT 1
42089: GREATER
42090: IFFALSE 42202
// begin for i = 2 to result do
42092: LD_ADDR_VAR 0 3
42096: PUSH
42097: DOUBLE
42098: LD_INT 2
42100: DEC
42101: ST_TO_ADDR
42102: LD_VAR 0 2
42106: PUSH
42107: FOR_TO
42108: IFFALSE 42200
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42110: LD_ADDR_VAR 0 4
42114: PUSH
42115: LD_VAR 0 2
42119: PUSH
42120: LD_VAR 0 3
42124: ARRAY
42125: PPUSH
42126: LD_INT 3
42128: PPUSH
42129: CALL_OW 259
42133: PUSH
42134: LD_VAR 0 2
42138: PUSH
42139: LD_VAR 0 3
42143: ARRAY
42144: PPUSH
42145: CALL_OW 432
42149: MINUS
42150: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42151: LD_VAR 0 4
42155: PUSH
42156: LD_VAR 0 5
42160: PPUSH
42161: LD_INT 3
42163: PPUSH
42164: CALL_OW 259
42168: PUSH
42169: LD_VAR 0 5
42173: PPUSH
42174: CALL_OW 432
42178: MINUS
42179: GREATEREQUAL
42180: IFFALSE 42198
// mech := result [ i ] ;
42182: LD_ADDR_VAR 0 5
42186: PUSH
42187: LD_VAR 0 2
42191: PUSH
42192: LD_VAR 0 3
42196: ARRAY
42197: ST_TO_ADDR
// end ;
42198: GO 42107
42200: POP
42201: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42202: LD_VAR 0 1
42206: PPUSH
42207: LD_VAR 0 5
42211: PPUSH
42212: CALL_OW 135
// end ;
42216: LD_VAR 0 2
42220: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42221: LD_INT 0
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
42227: PPUSH
42228: PPUSH
42229: PPUSH
42230: PPUSH
42231: PPUSH
42232: PPUSH
42233: PPUSH
42234: PPUSH
42235: PPUSH
// result := [ ] ;
42236: LD_ADDR_VAR 0 7
42240: PUSH
42241: EMPTY
42242: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42243: LD_VAR 0 1
42247: PPUSH
42248: CALL_OW 266
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: IN
42263: NOT
42264: IFFALSE 42268
// exit ;
42266: GO 43902
// if name then
42268: LD_VAR 0 3
42272: IFFALSE 42288
// SetBName ( base_dep , name ) ;
42274: LD_VAR 0 1
42278: PPUSH
42279: LD_VAR 0 3
42283: PPUSH
42284: CALL_OW 500
// base := GetBase ( base_dep ) ;
42288: LD_ADDR_VAR 0 15
42292: PUSH
42293: LD_VAR 0 1
42297: PPUSH
42298: CALL_OW 274
42302: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42303: LD_ADDR_VAR 0 16
42307: PUSH
42308: LD_VAR 0 1
42312: PPUSH
42313: CALL_OW 255
42317: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42318: LD_ADDR_VAR 0 17
42322: PUSH
42323: LD_VAR 0 1
42327: PPUSH
42328: CALL_OW 248
42332: ST_TO_ADDR
// if sources then
42333: LD_VAR 0 5
42337: IFFALSE 42384
// for i = 1 to 3 do
42339: LD_ADDR_VAR 0 8
42343: PUSH
42344: DOUBLE
42345: LD_INT 1
42347: DEC
42348: ST_TO_ADDR
42349: LD_INT 3
42351: PUSH
42352: FOR_TO
42353: IFFALSE 42382
// AddResourceType ( base , i , sources [ i ] ) ;
42355: LD_VAR 0 15
42359: PPUSH
42360: LD_VAR 0 8
42364: PPUSH
42365: LD_VAR 0 5
42369: PUSH
42370: LD_VAR 0 8
42374: ARRAY
42375: PPUSH
42376: CALL_OW 276
42380: GO 42352
42382: POP
42383: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42384: LD_ADDR_VAR 0 18
42388: PUSH
42389: LD_VAR 0 15
42393: PPUSH
42394: LD_VAR 0 2
42398: PPUSH
42399: LD_INT 1
42401: PPUSH
42402: CALL 41645 0 3
42406: ST_TO_ADDR
// InitHc ;
42407: CALL_OW 19
// InitUc ;
42411: CALL_OW 18
// uc_side := side ;
42415: LD_ADDR_OWVAR 20
42419: PUSH
42420: LD_VAR 0 16
42424: ST_TO_ADDR
// uc_nation := nation ;
42425: LD_ADDR_OWVAR 21
42429: PUSH
42430: LD_VAR 0 17
42434: ST_TO_ADDR
// if buildings then
42435: LD_VAR 0 18
42439: IFFALSE 43761
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42441: LD_ADDR_VAR 0 19
42445: PUSH
42446: LD_VAR 0 18
42450: PPUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 30
42456: PUSH
42457: LD_INT 29
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 30
42466: PUSH
42467: LD_INT 30
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: PPUSH
42479: CALL_OW 72
42483: ST_TO_ADDR
// if tmp then
42484: LD_VAR 0 19
42488: IFFALSE 42536
// for i in tmp do
42490: LD_ADDR_VAR 0 8
42494: PUSH
42495: LD_VAR 0 19
42499: PUSH
42500: FOR_IN
42501: IFFALSE 42534
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42503: LD_VAR 0 8
42507: PPUSH
42508: CALL_OW 250
42512: PPUSH
42513: LD_VAR 0 8
42517: PPUSH
42518: CALL_OW 251
42522: PPUSH
42523: LD_VAR 0 16
42527: PPUSH
42528: CALL_OW 441
42532: GO 42500
42534: POP
42535: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42536: LD_VAR 0 18
42540: PPUSH
42541: LD_INT 2
42543: PUSH
42544: LD_INT 30
42546: PUSH
42547: LD_INT 32
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 30
42556: PUSH
42557: LD_INT 33
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: PPUSH
42569: CALL_OW 72
42573: IFFALSE 42661
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42575: LD_ADDR_VAR 0 8
42579: PUSH
42580: LD_VAR 0 18
42584: PPUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 30
42590: PUSH
42591: LD_INT 32
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 30
42600: PUSH
42601: LD_INT 33
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: LIST
42612: PPUSH
42613: CALL_OW 72
42617: PUSH
42618: FOR_IN
42619: IFFALSE 42659
// begin if not GetBWeapon ( i ) then
42621: LD_VAR 0 8
42625: PPUSH
42626: CALL_OW 269
42630: NOT
42631: IFFALSE 42657
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42633: LD_VAR 0 8
42637: PPUSH
42638: LD_VAR 0 8
42642: PPUSH
42643: LD_VAR 0 2
42647: PPUSH
42648: CALL 43907 0 2
42652: PPUSH
42653: CALL_OW 431
// end ;
42657: GO 42618
42659: POP
42660: POP
// end ; for i = 1 to personel do
42661: LD_ADDR_VAR 0 8
42665: PUSH
42666: DOUBLE
42667: LD_INT 1
42669: DEC
42670: ST_TO_ADDR
42671: LD_VAR 0 6
42675: PUSH
42676: FOR_TO
42677: IFFALSE 43741
// begin if i > 4 then
42679: LD_VAR 0 8
42683: PUSH
42684: LD_INT 4
42686: GREATER
42687: IFFALSE 42691
// break ;
42689: GO 43741
// case i of 1 :
42691: LD_VAR 0 8
42695: PUSH
42696: LD_INT 1
42698: DOUBLE
42699: EQUAL
42700: IFTRUE 42704
42702: GO 42784
42704: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42705: LD_ADDR_VAR 0 12
42709: PUSH
42710: LD_VAR 0 18
42714: PPUSH
42715: LD_INT 22
42717: PUSH
42718: LD_VAR 0 16
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 58
42729: PUSH
42730: EMPTY
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: LD_INT 30
42738: PUSH
42739: LD_INT 32
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 30
42748: PUSH
42749: LD_INT 4
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 30
42758: PUSH
42759: LD_INT 5
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: LIST
42776: PPUSH
42777: CALL_OW 72
42781: ST_TO_ADDR
42782: GO 43006
42784: LD_INT 2
42786: DOUBLE
42787: EQUAL
42788: IFTRUE 42792
42790: GO 42854
42792: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42793: LD_ADDR_VAR 0 12
42797: PUSH
42798: LD_VAR 0 18
42802: PPUSH
42803: LD_INT 22
42805: PUSH
42806: LD_VAR 0 16
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: LD_INT 30
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 30
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: LIST
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PPUSH
42847: CALL_OW 72
42851: ST_TO_ADDR
42852: GO 43006
42854: LD_INT 3
42856: DOUBLE
42857: EQUAL
42858: IFTRUE 42862
42860: GO 42924
42862: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42863: LD_ADDR_VAR 0 12
42867: PUSH
42868: LD_VAR 0 18
42872: PPUSH
42873: LD_INT 22
42875: PUSH
42876: LD_VAR 0 16
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 2
42887: PUSH
42888: LD_INT 30
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 30
42900: PUSH
42901: LD_INT 3
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PPUSH
42917: CALL_OW 72
42921: ST_TO_ADDR
42922: GO 43006
42924: LD_INT 4
42926: DOUBLE
42927: EQUAL
42928: IFTRUE 42932
42930: GO 43005
42932: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42933: LD_ADDR_VAR 0 12
42937: PUSH
42938: LD_VAR 0 18
42942: PPUSH
42943: LD_INT 22
42945: PUSH
42946: LD_VAR 0 16
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: LD_INT 30
42960: PUSH
42961: LD_INT 6
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 30
42970: PUSH
42971: LD_INT 7
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 30
42980: PUSH
42981: LD_INT 8
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PPUSH
42998: CALL_OW 72
43002: ST_TO_ADDR
43003: GO 43006
43005: POP
// if i = 1 then
43006: LD_VAR 0 8
43010: PUSH
43011: LD_INT 1
43013: EQUAL
43014: IFFALSE 43125
// begin tmp := [ ] ;
43016: LD_ADDR_VAR 0 19
43020: PUSH
43021: EMPTY
43022: ST_TO_ADDR
// for j in f do
43023: LD_ADDR_VAR 0 9
43027: PUSH
43028: LD_VAR 0 12
43032: PUSH
43033: FOR_IN
43034: IFFALSE 43107
// if GetBType ( j ) = b_bunker then
43036: LD_VAR 0 9
43040: PPUSH
43041: CALL_OW 266
43045: PUSH
43046: LD_INT 32
43048: EQUAL
43049: IFFALSE 43076
// tmp := Insert ( tmp , 1 , j ) else
43051: LD_ADDR_VAR 0 19
43055: PUSH
43056: LD_VAR 0 19
43060: PPUSH
43061: LD_INT 1
43063: PPUSH
43064: LD_VAR 0 9
43068: PPUSH
43069: CALL_OW 2
43073: ST_TO_ADDR
43074: GO 43105
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43076: LD_ADDR_VAR 0 19
43080: PUSH
43081: LD_VAR 0 19
43085: PPUSH
43086: LD_VAR 0 19
43090: PUSH
43091: LD_INT 1
43093: PLUS
43094: PPUSH
43095: LD_VAR 0 9
43099: PPUSH
43100: CALL_OW 2
43104: ST_TO_ADDR
43105: GO 43033
43107: POP
43108: POP
// if tmp then
43109: LD_VAR 0 19
43113: IFFALSE 43125
// f := tmp ;
43115: LD_ADDR_VAR 0 12
43119: PUSH
43120: LD_VAR 0 19
43124: ST_TO_ADDR
// end ; x := personel [ i ] ;
43125: LD_ADDR_VAR 0 13
43129: PUSH
43130: LD_VAR 0 6
43134: PUSH
43135: LD_VAR 0 8
43139: ARRAY
43140: ST_TO_ADDR
// if x = - 1 then
43141: LD_VAR 0 13
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: EQUAL
43150: IFFALSE 43359
// begin for j in f do
43152: LD_ADDR_VAR 0 9
43156: PUSH
43157: LD_VAR 0 12
43161: PUSH
43162: FOR_IN
43163: IFFALSE 43355
// repeat InitHc ;
43165: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43169: LD_VAR 0 9
43173: PPUSH
43174: CALL_OW 266
43178: PUSH
43179: LD_INT 5
43181: EQUAL
43182: IFFALSE 43252
// begin if UnitsInside ( j ) < 3 then
43184: LD_VAR 0 9
43188: PPUSH
43189: CALL_OW 313
43193: PUSH
43194: LD_INT 3
43196: LESS
43197: IFFALSE 43233
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43199: LD_INT 0
43201: PPUSH
43202: LD_INT 5
43204: PUSH
43205: LD_INT 8
43207: PUSH
43208: LD_INT 9
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: LIST
43215: PUSH
43216: LD_VAR 0 17
43220: ARRAY
43221: PPUSH
43222: LD_VAR 0 4
43226: PPUSH
43227: CALL_OW 380
43231: GO 43250
// PrepareHuman ( false , i , skill ) ;
43233: LD_INT 0
43235: PPUSH
43236: LD_VAR 0 8
43240: PPUSH
43241: LD_VAR 0 4
43245: PPUSH
43246: CALL_OW 380
// end else
43250: GO 43269
// PrepareHuman ( false , i , skill ) ;
43252: LD_INT 0
43254: PPUSH
43255: LD_VAR 0 8
43259: PPUSH
43260: LD_VAR 0 4
43264: PPUSH
43265: CALL_OW 380
// un := CreateHuman ;
43269: LD_ADDR_VAR 0 14
43273: PUSH
43274: CALL_OW 44
43278: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43279: LD_ADDR_VAR 0 7
43283: PUSH
43284: LD_VAR 0 7
43288: PPUSH
43289: LD_INT 1
43291: PPUSH
43292: LD_VAR 0 14
43296: PPUSH
43297: CALL_OW 2
43301: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43302: LD_VAR 0 14
43306: PPUSH
43307: LD_VAR 0 9
43311: PPUSH
43312: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43316: LD_VAR 0 9
43320: PPUSH
43321: CALL_OW 313
43325: PUSH
43326: LD_INT 6
43328: EQUAL
43329: PUSH
43330: LD_VAR 0 9
43334: PPUSH
43335: CALL_OW 266
43339: PUSH
43340: LD_INT 32
43342: PUSH
43343: LD_INT 31
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: IN
43350: OR
43351: IFFALSE 43165
43353: GO 43162
43355: POP
43356: POP
// end else
43357: GO 43739
// for j = 1 to x do
43359: LD_ADDR_VAR 0 9
43363: PUSH
43364: DOUBLE
43365: LD_INT 1
43367: DEC
43368: ST_TO_ADDR
43369: LD_VAR 0 13
43373: PUSH
43374: FOR_TO
43375: IFFALSE 43737
// begin InitHc ;
43377: CALL_OW 19
// if not f then
43381: LD_VAR 0 12
43385: NOT
43386: IFFALSE 43475
// begin PrepareHuman ( false , i , skill ) ;
43388: LD_INT 0
43390: PPUSH
43391: LD_VAR 0 8
43395: PPUSH
43396: LD_VAR 0 4
43400: PPUSH
43401: CALL_OW 380
// un := CreateHuman ;
43405: LD_ADDR_VAR 0 14
43409: PUSH
43410: CALL_OW 44
43414: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43415: LD_ADDR_VAR 0 7
43419: PUSH
43420: LD_VAR 0 7
43424: PPUSH
43425: LD_INT 1
43427: PPUSH
43428: LD_VAR 0 14
43432: PPUSH
43433: CALL_OW 2
43437: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43438: LD_VAR 0 14
43442: PPUSH
43443: LD_VAR 0 1
43447: PPUSH
43448: CALL_OW 250
43452: PPUSH
43453: LD_VAR 0 1
43457: PPUSH
43458: CALL_OW 251
43462: PPUSH
43463: LD_INT 10
43465: PPUSH
43466: LD_INT 0
43468: PPUSH
43469: CALL_OW 50
// continue ;
43473: GO 43374
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43475: LD_VAR 0 12
43479: PUSH
43480: LD_INT 1
43482: ARRAY
43483: PPUSH
43484: CALL_OW 313
43488: PUSH
43489: LD_VAR 0 12
43493: PUSH
43494: LD_INT 1
43496: ARRAY
43497: PPUSH
43498: CALL_OW 266
43502: PUSH
43503: LD_INT 32
43505: PUSH
43506: LD_INT 31
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: IN
43513: AND
43514: PUSH
43515: LD_VAR 0 12
43519: PUSH
43520: LD_INT 1
43522: ARRAY
43523: PPUSH
43524: CALL_OW 313
43528: PUSH
43529: LD_INT 6
43531: EQUAL
43532: OR
43533: IFFALSE 43553
// f := Delete ( f , 1 ) ;
43535: LD_ADDR_VAR 0 12
43539: PUSH
43540: LD_VAR 0 12
43544: PPUSH
43545: LD_INT 1
43547: PPUSH
43548: CALL_OW 3
43552: ST_TO_ADDR
// if not f then
43553: LD_VAR 0 12
43557: NOT
43558: IFFALSE 43576
// begin x := x + 2 ;
43560: LD_ADDR_VAR 0 13
43564: PUSH
43565: LD_VAR 0 13
43569: PUSH
43570: LD_INT 2
43572: PLUS
43573: ST_TO_ADDR
// continue ;
43574: GO 43374
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43576: LD_VAR 0 12
43580: PUSH
43581: LD_INT 1
43583: ARRAY
43584: PPUSH
43585: CALL_OW 266
43589: PUSH
43590: LD_INT 5
43592: EQUAL
43593: IFFALSE 43667
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43595: LD_VAR 0 12
43599: PUSH
43600: LD_INT 1
43602: ARRAY
43603: PPUSH
43604: CALL_OW 313
43608: PUSH
43609: LD_INT 3
43611: LESS
43612: IFFALSE 43648
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43614: LD_INT 0
43616: PPUSH
43617: LD_INT 5
43619: PUSH
43620: LD_INT 8
43622: PUSH
43623: LD_INT 9
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: PUSH
43631: LD_VAR 0 17
43635: ARRAY
43636: PPUSH
43637: LD_VAR 0 4
43641: PPUSH
43642: CALL_OW 380
43646: GO 43665
// PrepareHuman ( false , i , skill ) ;
43648: LD_INT 0
43650: PPUSH
43651: LD_VAR 0 8
43655: PPUSH
43656: LD_VAR 0 4
43660: PPUSH
43661: CALL_OW 380
// end else
43665: GO 43684
// PrepareHuman ( false , i , skill ) ;
43667: LD_INT 0
43669: PPUSH
43670: LD_VAR 0 8
43674: PPUSH
43675: LD_VAR 0 4
43679: PPUSH
43680: CALL_OW 380
// un := CreateHuman ;
43684: LD_ADDR_VAR 0 14
43688: PUSH
43689: CALL_OW 44
43693: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43694: LD_ADDR_VAR 0 7
43698: PUSH
43699: LD_VAR 0 7
43703: PPUSH
43704: LD_INT 1
43706: PPUSH
43707: LD_VAR 0 14
43711: PPUSH
43712: CALL_OW 2
43716: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43717: LD_VAR 0 14
43721: PPUSH
43722: LD_VAR 0 12
43726: PUSH
43727: LD_INT 1
43729: ARRAY
43730: PPUSH
43731: CALL_OW 52
// end ;
43735: GO 43374
43737: POP
43738: POP
// end ;
43739: GO 42676
43741: POP
43742: POP
// result := result ^ buildings ;
43743: LD_ADDR_VAR 0 7
43747: PUSH
43748: LD_VAR 0 7
43752: PUSH
43753: LD_VAR 0 18
43757: ADD
43758: ST_TO_ADDR
// end else
43759: GO 43902
// begin for i = 1 to personel do
43761: LD_ADDR_VAR 0 8
43765: PUSH
43766: DOUBLE
43767: LD_INT 1
43769: DEC
43770: ST_TO_ADDR
43771: LD_VAR 0 6
43775: PUSH
43776: FOR_TO
43777: IFFALSE 43900
// begin if i > 4 then
43779: LD_VAR 0 8
43783: PUSH
43784: LD_INT 4
43786: GREATER
43787: IFFALSE 43791
// break ;
43789: GO 43900
// x := personel [ i ] ;
43791: LD_ADDR_VAR 0 13
43795: PUSH
43796: LD_VAR 0 6
43800: PUSH
43801: LD_VAR 0 8
43805: ARRAY
43806: ST_TO_ADDR
// if x = - 1 then
43807: LD_VAR 0 13
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: EQUAL
43816: IFFALSE 43820
// continue ;
43818: GO 43776
// PrepareHuman ( false , i , skill ) ;
43820: LD_INT 0
43822: PPUSH
43823: LD_VAR 0 8
43827: PPUSH
43828: LD_VAR 0 4
43832: PPUSH
43833: CALL_OW 380
// un := CreateHuman ;
43837: LD_ADDR_VAR 0 14
43841: PUSH
43842: CALL_OW 44
43846: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43847: LD_VAR 0 14
43851: PPUSH
43852: LD_VAR 0 1
43856: PPUSH
43857: CALL_OW 250
43861: PPUSH
43862: LD_VAR 0 1
43866: PPUSH
43867: CALL_OW 251
43871: PPUSH
43872: LD_INT 10
43874: PPUSH
43875: LD_INT 0
43877: PPUSH
43878: CALL_OW 50
// result := result ^ un ;
43882: LD_ADDR_VAR 0 7
43886: PUSH
43887: LD_VAR 0 7
43891: PUSH
43892: LD_VAR 0 14
43896: ADD
43897: ST_TO_ADDR
// end ;
43898: GO 43776
43900: POP
43901: POP
// end ; end ;
43902: LD_VAR 0 7
43906: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43907: LD_INT 0
43909: PPUSH
43910: PPUSH
43911: PPUSH
43912: PPUSH
43913: PPUSH
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
43921: PPUSH
43922: PPUSH
43923: PPUSH
43924: PPUSH
// result := false ;
43925: LD_ADDR_VAR 0 3
43929: PUSH
43930: LD_INT 0
43932: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43933: LD_VAR 0 1
43937: NOT
43938: PUSH
43939: LD_VAR 0 1
43943: PPUSH
43944: CALL_OW 266
43948: PUSH
43949: LD_INT 32
43951: PUSH
43952: LD_INT 33
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: IN
43959: NOT
43960: OR
43961: IFFALSE 43965
// exit ;
43963: GO 45074
// nat := GetNation ( tower ) ;
43965: LD_ADDR_VAR 0 12
43969: PUSH
43970: LD_VAR 0 1
43974: PPUSH
43975: CALL_OW 248
43979: ST_TO_ADDR
// side := GetSide ( tower ) ;
43980: LD_ADDR_VAR 0 16
43984: PUSH
43985: LD_VAR 0 1
43989: PPUSH
43990: CALL_OW 255
43994: ST_TO_ADDR
// x := GetX ( tower ) ;
43995: LD_ADDR_VAR 0 10
43999: PUSH
44000: LD_VAR 0 1
44004: PPUSH
44005: CALL_OW 250
44009: ST_TO_ADDR
// y := GetY ( tower ) ;
44010: LD_ADDR_VAR 0 11
44014: PUSH
44015: LD_VAR 0 1
44019: PPUSH
44020: CALL_OW 251
44024: ST_TO_ADDR
// if not x or not y then
44025: LD_VAR 0 10
44029: NOT
44030: PUSH
44031: LD_VAR 0 11
44035: NOT
44036: OR
44037: IFFALSE 44041
// exit ;
44039: GO 45074
// weapon := 0 ;
44041: LD_ADDR_VAR 0 18
44045: PUSH
44046: LD_INT 0
44048: ST_TO_ADDR
// fac_list := [ ] ;
44049: LD_ADDR_VAR 0 17
44053: PUSH
44054: EMPTY
44055: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44056: LD_ADDR_VAR 0 6
44060: PUSH
44061: LD_VAR 0 1
44065: PPUSH
44066: CALL_OW 274
44070: PPUSH
44071: LD_VAR 0 2
44075: PPUSH
44076: LD_INT 0
44078: PPUSH
44079: CALL 41645 0 3
44083: PPUSH
44084: LD_INT 30
44086: PUSH
44087: LD_INT 3
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PPUSH
44094: CALL_OW 72
44098: ST_TO_ADDR
// if not factories then
44099: LD_VAR 0 6
44103: NOT
44104: IFFALSE 44108
// exit ;
44106: GO 45074
// for i in factories do
44108: LD_ADDR_VAR 0 8
44112: PUSH
44113: LD_VAR 0 6
44117: PUSH
44118: FOR_IN
44119: IFFALSE 44144
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44121: LD_ADDR_VAR 0 17
44125: PUSH
44126: LD_VAR 0 17
44130: PUSH
44131: LD_VAR 0 8
44135: PPUSH
44136: CALL_OW 478
44140: UNION
44141: ST_TO_ADDR
44142: GO 44118
44144: POP
44145: POP
// if not fac_list then
44146: LD_VAR 0 17
44150: NOT
44151: IFFALSE 44155
// exit ;
44153: GO 45074
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44155: LD_ADDR_VAR 0 5
44159: PUSH
44160: LD_INT 4
44162: PUSH
44163: LD_INT 5
44165: PUSH
44166: LD_INT 9
44168: PUSH
44169: LD_INT 10
44171: PUSH
44172: LD_INT 6
44174: PUSH
44175: LD_INT 7
44177: PUSH
44178: LD_INT 11
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 27
44192: PUSH
44193: LD_INT 28
44195: PUSH
44196: LD_INT 26
44198: PUSH
44199: LD_INT 30
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 43
44210: PUSH
44211: LD_INT 44
44213: PUSH
44214: LD_INT 46
44216: PUSH
44217: LD_INT 45
44219: PUSH
44220: LD_INT 47
44222: PUSH
44223: LD_INT 49
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: LIST
44238: PUSH
44239: LD_VAR 0 12
44243: ARRAY
44244: ST_TO_ADDR
// list := list isect fac_list ;
44245: LD_ADDR_VAR 0 5
44249: PUSH
44250: LD_VAR 0 5
44254: PUSH
44255: LD_VAR 0 17
44259: ISECT
44260: ST_TO_ADDR
// if not list then
44261: LD_VAR 0 5
44265: NOT
44266: IFFALSE 44270
// exit ;
44268: GO 45074
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44270: LD_VAR 0 12
44274: PUSH
44275: LD_INT 3
44277: EQUAL
44278: PUSH
44279: LD_INT 49
44281: PUSH
44282: LD_VAR 0 5
44286: IN
44287: AND
44288: PUSH
44289: LD_INT 31
44291: PPUSH
44292: LD_VAR 0 16
44296: PPUSH
44297: CALL_OW 321
44301: PUSH
44302: LD_INT 2
44304: EQUAL
44305: AND
44306: IFFALSE 44366
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44308: LD_INT 22
44310: PUSH
44311: LD_VAR 0 16
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 35
44322: PUSH
44323: LD_INT 49
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 91
44332: PUSH
44333: LD_VAR 0 1
44337: PUSH
44338: LD_INT 10
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: LIST
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: PPUSH
44351: CALL_OW 69
44355: NOT
44356: IFFALSE 44366
// weapon := ru_time_lapser ;
44358: LD_ADDR_VAR 0 18
44362: PUSH
44363: LD_INT 49
44365: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44366: LD_VAR 0 12
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: IN
44381: PUSH
44382: LD_INT 11
44384: PUSH
44385: LD_VAR 0 5
44389: IN
44390: PUSH
44391: LD_INT 30
44393: PUSH
44394: LD_VAR 0 5
44398: IN
44399: OR
44400: AND
44401: PUSH
44402: LD_INT 6
44404: PPUSH
44405: LD_VAR 0 16
44409: PPUSH
44410: CALL_OW 321
44414: PUSH
44415: LD_INT 2
44417: EQUAL
44418: AND
44419: IFFALSE 44584
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44421: LD_INT 22
44423: PUSH
44424: LD_VAR 0 16
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 35
44438: PUSH
44439: LD_INT 11
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 35
44448: PUSH
44449: LD_INT 30
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 91
44463: PUSH
44464: LD_VAR 0 1
44468: PUSH
44469: LD_INT 18
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: PPUSH
44482: CALL_OW 69
44486: NOT
44487: PUSH
44488: LD_INT 22
44490: PUSH
44491: LD_VAR 0 16
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: LD_INT 30
44505: PUSH
44506: LD_INT 32
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 30
44515: PUSH
44516: LD_INT 33
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 91
44530: PUSH
44531: LD_VAR 0 1
44535: PUSH
44536: LD_INT 12
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: LIST
44548: PUSH
44549: EMPTY
44550: LIST
44551: PPUSH
44552: CALL_OW 69
44556: PUSH
44557: LD_INT 2
44559: GREATER
44560: AND
44561: IFFALSE 44584
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44563: LD_ADDR_VAR 0 18
44567: PUSH
44568: LD_INT 11
44570: PUSH
44571: LD_INT 30
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_VAR 0 12
44582: ARRAY
44583: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44584: LD_VAR 0 18
44588: NOT
44589: PUSH
44590: LD_INT 40
44592: PPUSH
44593: LD_VAR 0 16
44597: PPUSH
44598: CALL_OW 321
44602: PUSH
44603: LD_INT 2
44605: EQUAL
44606: AND
44607: PUSH
44608: LD_INT 7
44610: PUSH
44611: LD_VAR 0 5
44615: IN
44616: PUSH
44617: LD_INT 28
44619: PUSH
44620: LD_VAR 0 5
44624: IN
44625: OR
44626: PUSH
44627: LD_INT 45
44629: PUSH
44630: LD_VAR 0 5
44634: IN
44635: OR
44636: AND
44637: IFFALSE 44891
// begin hex := GetHexInfo ( x , y ) ;
44639: LD_ADDR_VAR 0 4
44643: PUSH
44644: LD_VAR 0 10
44648: PPUSH
44649: LD_VAR 0 11
44653: PPUSH
44654: CALL_OW 546
44658: ST_TO_ADDR
// if hex [ 1 ] then
44659: LD_VAR 0 4
44663: PUSH
44664: LD_INT 1
44666: ARRAY
44667: IFFALSE 44671
// exit ;
44669: GO 45074
// height := hex [ 2 ] ;
44671: LD_ADDR_VAR 0 15
44675: PUSH
44676: LD_VAR 0 4
44680: PUSH
44681: LD_INT 2
44683: ARRAY
44684: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44685: LD_ADDR_VAR 0 14
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: LD_INT 5
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: ST_TO_ADDR
// for i in tmp do
44708: LD_ADDR_VAR 0 8
44712: PUSH
44713: LD_VAR 0 14
44717: PUSH
44718: FOR_IN
44719: IFFALSE 44889
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44721: LD_ADDR_VAR 0 9
44725: PUSH
44726: LD_VAR 0 10
44730: PPUSH
44731: LD_VAR 0 8
44735: PPUSH
44736: LD_INT 5
44738: PPUSH
44739: CALL_OW 272
44743: PUSH
44744: LD_VAR 0 11
44748: PPUSH
44749: LD_VAR 0 8
44753: PPUSH
44754: LD_INT 5
44756: PPUSH
44757: CALL_OW 273
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44766: LD_VAR 0 9
44770: PUSH
44771: LD_INT 1
44773: ARRAY
44774: PPUSH
44775: LD_VAR 0 9
44779: PUSH
44780: LD_INT 2
44782: ARRAY
44783: PPUSH
44784: CALL_OW 488
44788: IFFALSE 44887
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44790: LD_ADDR_VAR 0 4
44794: PUSH
44795: LD_VAR 0 9
44799: PUSH
44800: LD_INT 1
44802: ARRAY
44803: PPUSH
44804: LD_VAR 0 9
44808: PUSH
44809: LD_INT 2
44811: ARRAY
44812: PPUSH
44813: CALL_OW 546
44817: ST_TO_ADDR
// if hex [ 1 ] then
44818: LD_VAR 0 4
44822: PUSH
44823: LD_INT 1
44825: ARRAY
44826: IFFALSE 44830
// continue ;
44828: GO 44718
// h := hex [ 2 ] ;
44830: LD_ADDR_VAR 0 13
44834: PUSH
44835: LD_VAR 0 4
44839: PUSH
44840: LD_INT 2
44842: ARRAY
44843: ST_TO_ADDR
// if h + 7 < height then
44844: LD_VAR 0 13
44848: PUSH
44849: LD_INT 7
44851: PLUS
44852: PUSH
44853: LD_VAR 0 15
44857: LESS
44858: IFFALSE 44887
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44860: LD_ADDR_VAR 0 18
44864: PUSH
44865: LD_INT 7
44867: PUSH
44868: LD_INT 28
44870: PUSH
44871: LD_INT 45
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: LIST
44878: PUSH
44879: LD_VAR 0 12
44883: ARRAY
44884: ST_TO_ADDR
// break ;
44885: GO 44889
// end ; end ; end ;
44887: GO 44718
44889: POP
44890: POP
// end ; if not weapon then
44891: LD_VAR 0 18
44895: NOT
44896: IFFALSE 44956
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44898: LD_ADDR_VAR 0 5
44902: PUSH
44903: LD_VAR 0 5
44907: PUSH
44908: LD_INT 11
44910: PUSH
44911: LD_INT 30
44913: PUSH
44914: LD_INT 49
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: DIFF
44922: ST_TO_ADDR
// if not list then
44923: LD_VAR 0 5
44927: NOT
44928: IFFALSE 44932
// exit ;
44930: GO 45074
// weapon := list [ rand ( 1 , list ) ] ;
44932: LD_ADDR_VAR 0 18
44936: PUSH
44937: LD_VAR 0 5
44941: PUSH
44942: LD_INT 1
44944: PPUSH
44945: LD_VAR 0 5
44949: PPUSH
44950: CALL_OW 12
44954: ARRAY
44955: ST_TO_ADDR
// end ; if weapon then
44956: LD_VAR 0 18
44960: IFFALSE 45074
// begin tmp := CostOfWeapon ( weapon ) ;
44962: LD_ADDR_VAR 0 14
44966: PUSH
44967: LD_VAR 0 18
44971: PPUSH
44972: CALL_OW 451
44976: ST_TO_ADDR
// j := GetBase ( tower ) ;
44977: LD_ADDR_VAR 0 9
44981: PUSH
44982: LD_VAR 0 1
44986: PPUSH
44987: CALL_OW 274
44991: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44992: LD_VAR 0 9
44996: PPUSH
44997: LD_INT 1
44999: PPUSH
45000: CALL_OW 275
45004: PUSH
45005: LD_VAR 0 14
45009: PUSH
45010: LD_INT 1
45012: ARRAY
45013: GREATEREQUAL
45014: PUSH
45015: LD_VAR 0 9
45019: PPUSH
45020: LD_INT 2
45022: PPUSH
45023: CALL_OW 275
45027: PUSH
45028: LD_VAR 0 14
45032: PUSH
45033: LD_INT 2
45035: ARRAY
45036: GREATEREQUAL
45037: AND
45038: PUSH
45039: LD_VAR 0 9
45043: PPUSH
45044: LD_INT 3
45046: PPUSH
45047: CALL_OW 275
45051: PUSH
45052: LD_VAR 0 14
45056: PUSH
45057: LD_INT 3
45059: ARRAY
45060: GREATEREQUAL
45061: AND
45062: IFFALSE 45074
// result := weapon ;
45064: LD_ADDR_VAR 0 3
45068: PUSH
45069: LD_VAR 0 18
45073: ST_TO_ADDR
// end ; end ;
45074: LD_VAR 0 3
45078: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45079: LD_INT 0
45081: PPUSH
45082: PPUSH
// result := true ;
45083: LD_ADDR_VAR 0 3
45087: PUSH
45088: LD_INT 1
45090: ST_TO_ADDR
// if array1 = array2 then
45091: LD_VAR 0 1
45095: PUSH
45096: LD_VAR 0 2
45100: EQUAL
45101: IFFALSE 45161
// begin for i = 1 to array1 do
45103: LD_ADDR_VAR 0 4
45107: PUSH
45108: DOUBLE
45109: LD_INT 1
45111: DEC
45112: ST_TO_ADDR
45113: LD_VAR 0 1
45117: PUSH
45118: FOR_TO
45119: IFFALSE 45157
// if array1 [ i ] <> array2 [ i ] then
45121: LD_VAR 0 1
45125: PUSH
45126: LD_VAR 0 4
45130: ARRAY
45131: PUSH
45132: LD_VAR 0 2
45136: PUSH
45137: LD_VAR 0 4
45141: ARRAY
45142: NONEQUAL
45143: IFFALSE 45155
// begin result := false ;
45145: LD_ADDR_VAR 0 3
45149: PUSH
45150: LD_INT 0
45152: ST_TO_ADDR
// break ;
45153: GO 45157
// end ;
45155: GO 45118
45157: POP
45158: POP
// end else
45159: GO 45169
// result := false ;
45161: LD_ADDR_VAR 0 3
45165: PUSH
45166: LD_INT 0
45168: ST_TO_ADDR
// end ;
45169: LD_VAR 0 3
45173: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45174: LD_INT 0
45176: PPUSH
45177: PPUSH
// if not array1 or not array2 then
45178: LD_VAR 0 1
45182: NOT
45183: PUSH
45184: LD_VAR 0 2
45188: NOT
45189: OR
45190: IFFALSE 45194
// exit ;
45192: GO 45258
// result := true ;
45194: LD_ADDR_VAR 0 3
45198: PUSH
45199: LD_INT 1
45201: ST_TO_ADDR
// for i = 1 to array1 do
45202: LD_ADDR_VAR 0 4
45206: PUSH
45207: DOUBLE
45208: LD_INT 1
45210: DEC
45211: ST_TO_ADDR
45212: LD_VAR 0 1
45216: PUSH
45217: FOR_TO
45218: IFFALSE 45256
// if array1 [ i ] <> array2 [ i ] then
45220: LD_VAR 0 1
45224: PUSH
45225: LD_VAR 0 4
45229: ARRAY
45230: PUSH
45231: LD_VAR 0 2
45235: PUSH
45236: LD_VAR 0 4
45240: ARRAY
45241: NONEQUAL
45242: IFFALSE 45254
// begin result := false ;
45244: LD_ADDR_VAR 0 3
45248: PUSH
45249: LD_INT 0
45251: ST_TO_ADDR
// break ;
45252: GO 45256
// end ;
45254: GO 45217
45256: POP
45257: POP
// end ;
45258: LD_VAR 0 3
45262: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45263: LD_INT 0
45265: PPUSH
45266: PPUSH
45267: PPUSH
// pom := GetBase ( fac ) ;
45268: LD_ADDR_VAR 0 5
45272: PUSH
45273: LD_VAR 0 1
45277: PPUSH
45278: CALL_OW 274
45282: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45283: LD_ADDR_VAR 0 4
45287: PUSH
45288: LD_VAR 0 2
45292: PUSH
45293: LD_INT 1
45295: ARRAY
45296: PPUSH
45297: LD_VAR 0 2
45301: PUSH
45302: LD_INT 2
45304: ARRAY
45305: PPUSH
45306: LD_VAR 0 2
45310: PUSH
45311: LD_INT 3
45313: ARRAY
45314: PPUSH
45315: LD_VAR 0 2
45319: PUSH
45320: LD_INT 4
45322: ARRAY
45323: PPUSH
45324: CALL_OW 449
45328: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45329: LD_ADDR_VAR 0 3
45333: PUSH
45334: LD_VAR 0 5
45338: PPUSH
45339: LD_INT 1
45341: PPUSH
45342: CALL_OW 275
45346: PUSH
45347: LD_VAR 0 4
45351: PUSH
45352: LD_INT 1
45354: ARRAY
45355: GREATEREQUAL
45356: PUSH
45357: LD_VAR 0 5
45361: PPUSH
45362: LD_INT 2
45364: PPUSH
45365: CALL_OW 275
45369: PUSH
45370: LD_VAR 0 4
45374: PUSH
45375: LD_INT 2
45377: ARRAY
45378: GREATEREQUAL
45379: AND
45380: PUSH
45381: LD_VAR 0 5
45385: PPUSH
45386: LD_INT 3
45388: PPUSH
45389: CALL_OW 275
45393: PUSH
45394: LD_VAR 0 4
45398: PUSH
45399: LD_INT 3
45401: ARRAY
45402: GREATEREQUAL
45403: AND
45404: ST_TO_ADDR
// end ;
45405: LD_VAR 0 3
45409: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45410: LD_INT 0
45412: PPUSH
45413: PPUSH
45414: PPUSH
45415: PPUSH
// pom := GetBase ( building ) ;
45416: LD_ADDR_VAR 0 3
45420: PUSH
45421: LD_VAR 0 1
45425: PPUSH
45426: CALL_OW 274
45430: ST_TO_ADDR
// if not pom then
45431: LD_VAR 0 3
45435: NOT
45436: IFFALSE 45440
// exit ;
45438: GO 45610
// btype := GetBType ( building ) ;
45440: LD_ADDR_VAR 0 5
45444: PUSH
45445: LD_VAR 0 1
45449: PPUSH
45450: CALL_OW 266
45454: ST_TO_ADDR
// if btype = b_armoury then
45455: LD_VAR 0 5
45459: PUSH
45460: LD_INT 4
45462: EQUAL
45463: IFFALSE 45473
// btype := b_barracks ;
45465: LD_ADDR_VAR 0 5
45469: PUSH
45470: LD_INT 5
45472: ST_TO_ADDR
// if btype = b_depot then
45473: LD_VAR 0 5
45477: PUSH
45478: LD_INT 0
45480: EQUAL
45481: IFFALSE 45491
// btype := b_warehouse ;
45483: LD_ADDR_VAR 0 5
45487: PUSH
45488: LD_INT 1
45490: ST_TO_ADDR
// if btype = b_workshop then
45491: LD_VAR 0 5
45495: PUSH
45496: LD_INT 2
45498: EQUAL
45499: IFFALSE 45509
// btype := b_factory ;
45501: LD_ADDR_VAR 0 5
45505: PUSH
45506: LD_INT 3
45508: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45509: LD_ADDR_VAR 0 4
45513: PUSH
45514: LD_VAR 0 5
45518: PPUSH
45519: LD_VAR 0 1
45523: PPUSH
45524: CALL_OW 248
45528: PPUSH
45529: CALL_OW 450
45533: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45534: LD_ADDR_VAR 0 2
45538: PUSH
45539: LD_VAR 0 3
45543: PPUSH
45544: LD_INT 1
45546: PPUSH
45547: CALL_OW 275
45551: PUSH
45552: LD_VAR 0 4
45556: PUSH
45557: LD_INT 1
45559: ARRAY
45560: GREATEREQUAL
45561: PUSH
45562: LD_VAR 0 3
45566: PPUSH
45567: LD_INT 2
45569: PPUSH
45570: CALL_OW 275
45574: PUSH
45575: LD_VAR 0 4
45579: PUSH
45580: LD_INT 2
45582: ARRAY
45583: GREATEREQUAL
45584: AND
45585: PUSH
45586: LD_VAR 0 3
45590: PPUSH
45591: LD_INT 3
45593: PPUSH
45594: CALL_OW 275
45598: PUSH
45599: LD_VAR 0 4
45603: PUSH
45604: LD_INT 3
45606: ARRAY
45607: GREATEREQUAL
45608: AND
45609: ST_TO_ADDR
// end ;
45610: LD_VAR 0 2
45614: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45615: LD_INT 0
45617: PPUSH
45618: PPUSH
45619: PPUSH
// pom := GetBase ( building ) ;
45620: LD_ADDR_VAR 0 4
45624: PUSH
45625: LD_VAR 0 1
45629: PPUSH
45630: CALL_OW 274
45634: ST_TO_ADDR
// if not pom then
45635: LD_VAR 0 4
45639: NOT
45640: IFFALSE 45644
// exit ;
45642: GO 45745
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45644: LD_ADDR_VAR 0 5
45648: PUSH
45649: LD_VAR 0 2
45653: PPUSH
45654: LD_VAR 0 1
45658: PPUSH
45659: CALL_OW 248
45663: PPUSH
45664: CALL_OW 450
45668: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45669: LD_ADDR_VAR 0 3
45673: PUSH
45674: LD_VAR 0 4
45678: PPUSH
45679: LD_INT 1
45681: PPUSH
45682: CALL_OW 275
45686: PUSH
45687: LD_VAR 0 5
45691: PUSH
45692: LD_INT 1
45694: ARRAY
45695: GREATEREQUAL
45696: PUSH
45697: LD_VAR 0 4
45701: PPUSH
45702: LD_INT 2
45704: PPUSH
45705: CALL_OW 275
45709: PUSH
45710: LD_VAR 0 5
45714: PUSH
45715: LD_INT 2
45717: ARRAY
45718: GREATEREQUAL
45719: AND
45720: PUSH
45721: LD_VAR 0 4
45725: PPUSH
45726: LD_INT 3
45728: PPUSH
45729: CALL_OW 275
45733: PUSH
45734: LD_VAR 0 5
45738: PUSH
45739: LD_INT 3
45741: ARRAY
45742: GREATEREQUAL
45743: AND
45744: ST_TO_ADDR
// end ;
45745: LD_VAR 0 3
45749: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45750: LD_INT 0
45752: PPUSH
45753: PPUSH
45754: PPUSH
45755: PPUSH
45756: PPUSH
45757: PPUSH
45758: PPUSH
45759: PPUSH
45760: PPUSH
45761: PPUSH
45762: PPUSH
// result := false ;
45763: LD_ADDR_VAR 0 8
45767: PUSH
45768: LD_INT 0
45770: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45771: LD_VAR 0 5
45775: NOT
45776: PUSH
45777: LD_VAR 0 1
45781: NOT
45782: OR
45783: PUSH
45784: LD_VAR 0 2
45788: NOT
45789: OR
45790: PUSH
45791: LD_VAR 0 3
45795: NOT
45796: OR
45797: IFFALSE 45801
// exit ;
45799: GO 46615
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45801: LD_ADDR_VAR 0 14
45805: PUSH
45806: LD_VAR 0 1
45810: PPUSH
45811: LD_VAR 0 2
45815: PPUSH
45816: LD_VAR 0 3
45820: PPUSH
45821: LD_VAR 0 4
45825: PPUSH
45826: LD_VAR 0 5
45830: PUSH
45831: LD_INT 1
45833: ARRAY
45834: PPUSH
45835: CALL_OW 248
45839: PPUSH
45840: LD_INT 0
45842: PPUSH
45843: CALL 47868 0 6
45847: ST_TO_ADDR
// if not hexes then
45848: LD_VAR 0 14
45852: NOT
45853: IFFALSE 45857
// exit ;
45855: GO 46615
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45857: LD_ADDR_VAR 0 17
45861: PUSH
45862: LD_VAR 0 5
45866: PPUSH
45867: LD_INT 22
45869: PUSH
45870: LD_VAR 0 13
45874: PPUSH
45875: CALL_OW 255
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 30
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 30
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PPUSH
45916: CALL_OW 72
45920: ST_TO_ADDR
// for i = 1 to hexes do
45921: LD_ADDR_VAR 0 9
45925: PUSH
45926: DOUBLE
45927: LD_INT 1
45929: DEC
45930: ST_TO_ADDR
45931: LD_VAR 0 14
45935: PUSH
45936: FOR_TO
45937: IFFALSE 46613
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45939: LD_ADDR_VAR 0 13
45943: PUSH
45944: LD_VAR 0 14
45948: PUSH
45949: LD_VAR 0 9
45953: ARRAY
45954: PUSH
45955: LD_INT 1
45957: ARRAY
45958: PPUSH
45959: LD_VAR 0 14
45963: PUSH
45964: LD_VAR 0 9
45968: ARRAY
45969: PUSH
45970: LD_INT 2
45972: ARRAY
45973: PPUSH
45974: CALL_OW 428
45978: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45979: LD_VAR 0 14
45983: PUSH
45984: LD_VAR 0 9
45988: ARRAY
45989: PUSH
45990: LD_INT 1
45992: ARRAY
45993: PPUSH
45994: LD_VAR 0 14
45998: PUSH
45999: LD_VAR 0 9
46003: ARRAY
46004: PUSH
46005: LD_INT 2
46007: ARRAY
46008: PPUSH
46009: CALL_OW 351
46013: PUSH
46014: LD_VAR 0 14
46018: PUSH
46019: LD_VAR 0 9
46023: ARRAY
46024: PUSH
46025: LD_INT 1
46027: ARRAY
46028: PPUSH
46029: LD_VAR 0 14
46033: PUSH
46034: LD_VAR 0 9
46038: ARRAY
46039: PUSH
46040: LD_INT 2
46042: ARRAY
46043: PPUSH
46044: CALL_OW 488
46048: NOT
46049: OR
46050: PUSH
46051: LD_VAR 0 13
46055: PPUSH
46056: CALL_OW 247
46060: PUSH
46061: LD_INT 3
46063: EQUAL
46064: OR
46065: IFFALSE 46071
// exit ;
46067: POP
46068: POP
46069: GO 46615
// if not tmp then
46071: LD_VAR 0 13
46075: NOT
46076: IFFALSE 46080
// continue ;
46078: GO 45936
// result := true ;
46080: LD_ADDR_VAR 0 8
46084: PUSH
46085: LD_INT 1
46087: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46088: LD_VAR 0 6
46092: PUSH
46093: LD_VAR 0 13
46097: PPUSH
46098: CALL_OW 247
46102: PUSH
46103: LD_INT 2
46105: EQUAL
46106: AND
46107: PUSH
46108: LD_VAR 0 13
46112: PPUSH
46113: CALL_OW 263
46117: PUSH
46118: LD_INT 1
46120: EQUAL
46121: AND
46122: IFFALSE 46286
// begin if IsDrivenBy ( tmp ) then
46124: LD_VAR 0 13
46128: PPUSH
46129: CALL_OW 311
46133: IFFALSE 46137
// continue ;
46135: GO 45936
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46137: LD_VAR 0 6
46141: PPUSH
46142: LD_INT 3
46144: PUSH
46145: LD_INT 60
46147: PUSH
46148: EMPTY
46149: LIST
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 3
46157: PUSH
46158: LD_INT 55
46160: PUSH
46161: EMPTY
46162: LIST
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PPUSH
46172: CALL_OW 72
46176: IFFALSE 46284
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46178: LD_ADDR_VAR 0 18
46182: PUSH
46183: LD_VAR 0 6
46187: PPUSH
46188: LD_INT 3
46190: PUSH
46191: LD_INT 60
46193: PUSH
46194: EMPTY
46195: LIST
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: LD_INT 55
46206: PUSH
46207: EMPTY
46208: LIST
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PPUSH
46218: CALL_OW 72
46222: PUSH
46223: LD_INT 1
46225: ARRAY
46226: ST_TO_ADDR
// if IsInUnit ( driver ) then
46227: LD_VAR 0 18
46231: PPUSH
46232: CALL_OW 310
46236: IFFALSE 46247
// ComExit ( driver ) ;
46238: LD_VAR 0 18
46242: PPUSH
46243: CALL 71669 0 1
// AddComEnterUnit ( driver , tmp ) ;
46247: LD_VAR 0 18
46251: PPUSH
46252: LD_VAR 0 13
46256: PPUSH
46257: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46261: LD_VAR 0 18
46265: PPUSH
46266: LD_VAR 0 7
46270: PPUSH
46271: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46275: LD_VAR 0 18
46279: PPUSH
46280: CALL_OW 181
// end ; continue ;
46284: GO 45936
// end ; if not cleaners or not tmp in cleaners then
46286: LD_VAR 0 6
46290: NOT
46291: PUSH
46292: LD_VAR 0 13
46296: PUSH
46297: LD_VAR 0 6
46301: IN
46302: NOT
46303: OR
46304: IFFALSE 46611
// begin if dep then
46306: LD_VAR 0 17
46310: IFFALSE 46446
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46312: LD_ADDR_VAR 0 16
46316: PUSH
46317: LD_VAR 0 17
46321: PUSH
46322: LD_INT 1
46324: ARRAY
46325: PPUSH
46326: CALL_OW 250
46330: PPUSH
46331: LD_VAR 0 17
46335: PUSH
46336: LD_INT 1
46338: ARRAY
46339: PPUSH
46340: CALL_OW 254
46344: PPUSH
46345: LD_INT 5
46347: PPUSH
46348: CALL_OW 272
46352: PUSH
46353: LD_VAR 0 17
46357: PUSH
46358: LD_INT 1
46360: ARRAY
46361: PPUSH
46362: CALL_OW 251
46366: PPUSH
46367: LD_VAR 0 17
46371: PUSH
46372: LD_INT 1
46374: ARRAY
46375: PPUSH
46376: CALL_OW 254
46380: PPUSH
46381: LD_INT 5
46383: PPUSH
46384: CALL_OW 273
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46393: LD_VAR 0 16
46397: PUSH
46398: LD_INT 1
46400: ARRAY
46401: PPUSH
46402: LD_VAR 0 16
46406: PUSH
46407: LD_INT 2
46409: ARRAY
46410: PPUSH
46411: CALL_OW 488
46415: IFFALSE 46446
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46417: LD_VAR 0 13
46421: PPUSH
46422: LD_VAR 0 16
46426: PUSH
46427: LD_INT 1
46429: ARRAY
46430: PPUSH
46431: LD_VAR 0 16
46435: PUSH
46436: LD_INT 2
46438: ARRAY
46439: PPUSH
46440: CALL_OW 111
// continue ;
46444: GO 45936
// end ; end ; r := GetDir ( tmp ) ;
46446: LD_ADDR_VAR 0 15
46450: PUSH
46451: LD_VAR 0 13
46455: PPUSH
46456: CALL_OW 254
46460: ST_TO_ADDR
// if r = 5 then
46461: LD_VAR 0 15
46465: PUSH
46466: LD_INT 5
46468: EQUAL
46469: IFFALSE 46479
// r := 0 ;
46471: LD_ADDR_VAR 0 15
46475: PUSH
46476: LD_INT 0
46478: ST_TO_ADDR
// for j = r to 5 do
46479: LD_ADDR_VAR 0 10
46483: PUSH
46484: DOUBLE
46485: LD_VAR 0 15
46489: DEC
46490: ST_TO_ADDR
46491: LD_INT 5
46493: PUSH
46494: FOR_TO
46495: IFFALSE 46609
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46497: LD_ADDR_VAR 0 11
46501: PUSH
46502: LD_VAR 0 13
46506: PPUSH
46507: CALL_OW 250
46511: PPUSH
46512: LD_VAR 0 10
46516: PPUSH
46517: LD_INT 2
46519: PPUSH
46520: CALL_OW 272
46524: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46525: LD_ADDR_VAR 0 12
46529: PUSH
46530: LD_VAR 0 13
46534: PPUSH
46535: CALL_OW 251
46539: PPUSH
46540: LD_VAR 0 10
46544: PPUSH
46545: LD_INT 2
46547: PPUSH
46548: CALL_OW 273
46552: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46553: LD_VAR 0 11
46557: PPUSH
46558: LD_VAR 0 12
46562: PPUSH
46563: CALL_OW 488
46567: PUSH
46568: LD_VAR 0 11
46572: PPUSH
46573: LD_VAR 0 12
46577: PPUSH
46578: CALL_OW 428
46582: NOT
46583: AND
46584: IFFALSE 46607
// begin ComMoveXY ( tmp , _x , _y ) ;
46586: LD_VAR 0 13
46590: PPUSH
46591: LD_VAR 0 11
46595: PPUSH
46596: LD_VAR 0 12
46600: PPUSH
46601: CALL_OW 111
// break ;
46605: GO 46609
// end ; end ;
46607: GO 46494
46609: POP
46610: POP
// end ; end ;
46611: GO 45936
46613: POP
46614: POP
// end ;
46615: LD_VAR 0 8
46619: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46620: LD_INT 0
46622: PPUSH
// result := true ;
46623: LD_ADDR_VAR 0 3
46627: PUSH
46628: LD_INT 1
46630: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46631: LD_VAR 0 2
46635: PUSH
46636: LD_INT 24
46638: DOUBLE
46639: EQUAL
46640: IFTRUE 46650
46642: LD_INT 33
46644: DOUBLE
46645: EQUAL
46646: IFTRUE 46650
46648: GO 46675
46650: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46651: LD_ADDR_VAR 0 3
46655: PUSH
46656: LD_INT 32
46658: PPUSH
46659: LD_VAR 0 1
46663: PPUSH
46664: CALL_OW 321
46668: PUSH
46669: LD_INT 2
46671: EQUAL
46672: ST_TO_ADDR
46673: GO 46991
46675: LD_INT 20
46677: DOUBLE
46678: EQUAL
46679: IFTRUE 46683
46681: GO 46708
46683: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46684: LD_ADDR_VAR 0 3
46688: PUSH
46689: LD_INT 6
46691: PPUSH
46692: LD_VAR 0 1
46696: PPUSH
46697: CALL_OW 321
46701: PUSH
46702: LD_INT 2
46704: EQUAL
46705: ST_TO_ADDR
46706: GO 46991
46708: LD_INT 22
46710: DOUBLE
46711: EQUAL
46712: IFTRUE 46722
46714: LD_INT 36
46716: DOUBLE
46717: EQUAL
46718: IFTRUE 46722
46720: GO 46747
46722: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46723: LD_ADDR_VAR 0 3
46727: PUSH
46728: LD_INT 15
46730: PPUSH
46731: LD_VAR 0 1
46735: PPUSH
46736: CALL_OW 321
46740: PUSH
46741: LD_INT 2
46743: EQUAL
46744: ST_TO_ADDR
46745: GO 46991
46747: LD_INT 30
46749: DOUBLE
46750: EQUAL
46751: IFTRUE 46755
46753: GO 46780
46755: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46756: LD_ADDR_VAR 0 3
46760: PUSH
46761: LD_INT 20
46763: PPUSH
46764: LD_VAR 0 1
46768: PPUSH
46769: CALL_OW 321
46773: PUSH
46774: LD_INT 2
46776: EQUAL
46777: ST_TO_ADDR
46778: GO 46991
46780: LD_INT 28
46782: DOUBLE
46783: EQUAL
46784: IFTRUE 46794
46786: LD_INT 21
46788: DOUBLE
46789: EQUAL
46790: IFTRUE 46794
46792: GO 46819
46794: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46795: LD_ADDR_VAR 0 3
46799: PUSH
46800: LD_INT 21
46802: PPUSH
46803: LD_VAR 0 1
46807: PPUSH
46808: CALL_OW 321
46812: PUSH
46813: LD_INT 2
46815: EQUAL
46816: ST_TO_ADDR
46817: GO 46991
46819: LD_INT 16
46821: DOUBLE
46822: EQUAL
46823: IFTRUE 46827
46825: GO 46852
46827: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46828: LD_ADDR_VAR 0 3
46832: PUSH
46833: LD_INT 84
46835: PPUSH
46836: LD_VAR 0 1
46840: PPUSH
46841: CALL_OW 321
46845: PUSH
46846: LD_INT 2
46848: EQUAL
46849: ST_TO_ADDR
46850: GO 46991
46852: LD_INT 19
46854: DOUBLE
46855: EQUAL
46856: IFTRUE 46866
46858: LD_INT 23
46860: DOUBLE
46861: EQUAL
46862: IFTRUE 46866
46864: GO 46891
46866: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46867: LD_ADDR_VAR 0 3
46871: PUSH
46872: LD_INT 83
46874: PPUSH
46875: LD_VAR 0 1
46879: PPUSH
46880: CALL_OW 321
46884: PUSH
46885: LD_INT 2
46887: EQUAL
46888: ST_TO_ADDR
46889: GO 46991
46891: LD_INT 17
46893: DOUBLE
46894: EQUAL
46895: IFTRUE 46899
46897: GO 46924
46899: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46900: LD_ADDR_VAR 0 3
46904: PUSH
46905: LD_INT 39
46907: PPUSH
46908: LD_VAR 0 1
46912: PPUSH
46913: CALL_OW 321
46917: PUSH
46918: LD_INT 2
46920: EQUAL
46921: ST_TO_ADDR
46922: GO 46991
46924: LD_INT 18
46926: DOUBLE
46927: EQUAL
46928: IFTRUE 46932
46930: GO 46957
46932: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46933: LD_ADDR_VAR 0 3
46937: PUSH
46938: LD_INT 40
46940: PPUSH
46941: LD_VAR 0 1
46945: PPUSH
46946: CALL_OW 321
46950: PUSH
46951: LD_INT 2
46953: EQUAL
46954: ST_TO_ADDR
46955: GO 46991
46957: LD_INT 27
46959: DOUBLE
46960: EQUAL
46961: IFTRUE 46965
46963: GO 46990
46965: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46966: LD_ADDR_VAR 0 3
46970: PUSH
46971: LD_INT 35
46973: PPUSH
46974: LD_VAR 0 1
46978: PPUSH
46979: CALL_OW 321
46983: PUSH
46984: LD_INT 2
46986: EQUAL
46987: ST_TO_ADDR
46988: GO 46991
46990: POP
// end ;
46991: LD_VAR 0 3
46995: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46996: LD_INT 0
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
47002: PPUSH
47003: PPUSH
47004: PPUSH
47005: PPUSH
47006: PPUSH
47007: PPUSH
47008: PPUSH
// result := false ;
47009: LD_ADDR_VAR 0 6
47013: PUSH
47014: LD_INT 0
47016: ST_TO_ADDR
// if btype = b_depot then
47017: LD_VAR 0 2
47021: PUSH
47022: LD_INT 0
47024: EQUAL
47025: IFFALSE 47037
// begin result := true ;
47027: LD_ADDR_VAR 0 6
47031: PUSH
47032: LD_INT 1
47034: ST_TO_ADDR
// exit ;
47035: GO 47863
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47037: LD_VAR 0 1
47041: NOT
47042: PUSH
47043: LD_VAR 0 1
47047: PPUSH
47048: CALL_OW 266
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: IN
47063: NOT
47064: OR
47065: PUSH
47066: LD_VAR 0 2
47070: NOT
47071: OR
47072: PUSH
47073: LD_VAR 0 5
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: LD_INT 3
47089: PUSH
47090: LD_INT 4
47092: PUSH
47093: LD_INT 5
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: IN
47104: NOT
47105: OR
47106: PUSH
47107: LD_VAR 0 3
47111: PPUSH
47112: LD_VAR 0 4
47116: PPUSH
47117: CALL_OW 488
47121: NOT
47122: OR
47123: IFFALSE 47127
// exit ;
47125: GO 47863
// side := GetSide ( depot ) ;
47127: LD_ADDR_VAR 0 9
47131: PUSH
47132: LD_VAR 0 1
47136: PPUSH
47137: CALL_OW 255
47141: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47142: LD_VAR 0 9
47146: PPUSH
47147: LD_VAR 0 2
47151: PPUSH
47152: CALL 46620 0 2
47156: NOT
47157: IFFALSE 47161
// exit ;
47159: GO 47863
// pom := GetBase ( depot ) ;
47161: LD_ADDR_VAR 0 10
47165: PUSH
47166: LD_VAR 0 1
47170: PPUSH
47171: CALL_OW 274
47175: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47176: LD_ADDR_VAR 0 11
47180: PUSH
47181: LD_VAR 0 2
47185: PPUSH
47186: LD_VAR 0 1
47190: PPUSH
47191: CALL_OW 248
47195: PPUSH
47196: CALL_OW 450
47200: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47201: LD_VAR 0 10
47205: PPUSH
47206: LD_INT 1
47208: PPUSH
47209: CALL_OW 275
47213: PUSH
47214: LD_VAR 0 11
47218: PUSH
47219: LD_INT 1
47221: ARRAY
47222: GREATEREQUAL
47223: PUSH
47224: LD_VAR 0 10
47228: PPUSH
47229: LD_INT 2
47231: PPUSH
47232: CALL_OW 275
47236: PUSH
47237: LD_VAR 0 11
47241: PUSH
47242: LD_INT 2
47244: ARRAY
47245: GREATEREQUAL
47246: AND
47247: PUSH
47248: LD_VAR 0 10
47252: PPUSH
47253: LD_INT 3
47255: PPUSH
47256: CALL_OW 275
47260: PUSH
47261: LD_VAR 0 11
47265: PUSH
47266: LD_INT 3
47268: ARRAY
47269: GREATEREQUAL
47270: AND
47271: NOT
47272: IFFALSE 47276
// exit ;
47274: GO 47863
// if GetBType ( depot ) = b_depot then
47276: LD_VAR 0 1
47280: PPUSH
47281: CALL_OW 266
47285: PUSH
47286: LD_INT 0
47288: EQUAL
47289: IFFALSE 47301
// dist := 28 else
47291: LD_ADDR_VAR 0 14
47295: PUSH
47296: LD_INT 28
47298: ST_TO_ADDR
47299: GO 47309
// dist := 36 ;
47301: LD_ADDR_VAR 0 14
47305: PUSH
47306: LD_INT 36
47308: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47309: LD_VAR 0 1
47313: PPUSH
47314: LD_VAR 0 3
47318: PPUSH
47319: LD_VAR 0 4
47323: PPUSH
47324: CALL_OW 297
47328: PUSH
47329: LD_VAR 0 14
47333: GREATER
47334: IFFALSE 47338
// exit ;
47336: GO 47863
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47338: LD_ADDR_VAR 0 12
47342: PUSH
47343: LD_VAR 0 2
47347: PPUSH
47348: LD_VAR 0 3
47352: PPUSH
47353: LD_VAR 0 4
47357: PPUSH
47358: LD_VAR 0 5
47362: PPUSH
47363: LD_VAR 0 1
47367: PPUSH
47368: CALL_OW 248
47372: PPUSH
47373: LD_INT 0
47375: PPUSH
47376: CALL 47868 0 6
47380: ST_TO_ADDR
// if not hexes then
47381: LD_VAR 0 12
47385: NOT
47386: IFFALSE 47390
// exit ;
47388: GO 47863
// hex := GetHexInfo ( x , y ) ;
47390: LD_ADDR_VAR 0 15
47394: PUSH
47395: LD_VAR 0 3
47399: PPUSH
47400: LD_VAR 0 4
47404: PPUSH
47405: CALL_OW 546
47409: ST_TO_ADDR
// if hex [ 1 ] then
47410: LD_VAR 0 15
47414: PUSH
47415: LD_INT 1
47417: ARRAY
47418: IFFALSE 47422
// exit ;
47420: GO 47863
// height := hex [ 2 ] ;
47422: LD_ADDR_VAR 0 13
47426: PUSH
47427: LD_VAR 0 15
47431: PUSH
47432: LD_INT 2
47434: ARRAY
47435: ST_TO_ADDR
// for i = 1 to hexes do
47436: LD_ADDR_VAR 0 7
47440: PUSH
47441: DOUBLE
47442: LD_INT 1
47444: DEC
47445: ST_TO_ADDR
47446: LD_VAR 0 12
47450: PUSH
47451: FOR_TO
47452: IFFALSE 47782
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47454: LD_VAR 0 12
47458: PUSH
47459: LD_VAR 0 7
47463: ARRAY
47464: PUSH
47465: LD_INT 1
47467: ARRAY
47468: PPUSH
47469: LD_VAR 0 12
47473: PUSH
47474: LD_VAR 0 7
47478: ARRAY
47479: PUSH
47480: LD_INT 2
47482: ARRAY
47483: PPUSH
47484: CALL_OW 488
47488: NOT
47489: PUSH
47490: LD_VAR 0 12
47494: PUSH
47495: LD_VAR 0 7
47499: ARRAY
47500: PUSH
47501: LD_INT 1
47503: ARRAY
47504: PPUSH
47505: LD_VAR 0 12
47509: PUSH
47510: LD_VAR 0 7
47514: ARRAY
47515: PUSH
47516: LD_INT 2
47518: ARRAY
47519: PPUSH
47520: CALL_OW 428
47524: PUSH
47525: LD_INT 0
47527: GREATER
47528: OR
47529: PUSH
47530: LD_VAR 0 12
47534: PUSH
47535: LD_VAR 0 7
47539: ARRAY
47540: PUSH
47541: LD_INT 1
47543: ARRAY
47544: PPUSH
47545: LD_VAR 0 12
47549: PUSH
47550: LD_VAR 0 7
47554: ARRAY
47555: PUSH
47556: LD_INT 2
47558: ARRAY
47559: PPUSH
47560: CALL_OW 351
47564: OR
47565: IFFALSE 47571
// exit ;
47567: POP
47568: POP
47569: GO 47863
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47571: LD_ADDR_VAR 0 8
47575: PUSH
47576: LD_VAR 0 12
47580: PUSH
47581: LD_VAR 0 7
47585: ARRAY
47586: PUSH
47587: LD_INT 1
47589: ARRAY
47590: PPUSH
47591: LD_VAR 0 12
47595: PUSH
47596: LD_VAR 0 7
47600: ARRAY
47601: PUSH
47602: LD_INT 2
47604: ARRAY
47605: PPUSH
47606: CALL_OW 546
47610: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47611: LD_VAR 0 8
47615: PUSH
47616: LD_INT 1
47618: ARRAY
47619: PUSH
47620: LD_VAR 0 8
47624: PUSH
47625: LD_INT 2
47627: ARRAY
47628: PUSH
47629: LD_VAR 0 13
47633: PUSH
47634: LD_INT 2
47636: PLUS
47637: GREATER
47638: OR
47639: PUSH
47640: LD_VAR 0 8
47644: PUSH
47645: LD_INT 2
47647: ARRAY
47648: PUSH
47649: LD_VAR 0 13
47653: PUSH
47654: LD_INT 2
47656: MINUS
47657: LESS
47658: OR
47659: PUSH
47660: LD_VAR 0 8
47664: PUSH
47665: LD_INT 3
47667: ARRAY
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 8
47674: PUSH
47675: LD_INT 9
47677: PUSH
47678: LD_INT 10
47680: PUSH
47681: LD_INT 11
47683: PUSH
47684: LD_INT 12
47686: PUSH
47687: LD_INT 13
47689: PUSH
47690: LD_INT 16
47692: PUSH
47693: LD_INT 17
47695: PUSH
47696: LD_INT 18
47698: PUSH
47699: LD_INT 19
47701: PUSH
47702: LD_INT 20
47704: PUSH
47705: LD_INT 21
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: IN
47723: NOT
47724: OR
47725: PUSH
47726: LD_VAR 0 8
47730: PUSH
47731: LD_INT 5
47733: ARRAY
47734: NOT
47735: OR
47736: PUSH
47737: LD_VAR 0 8
47741: PUSH
47742: LD_INT 6
47744: ARRAY
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 7
47754: PUSH
47755: LD_INT 9
47757: PUSH
47758: LD_INT 10
47760: PUSH
47761: LD_INT 11
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: IN
47772: NOT
47773: OR
47774: IFFALSE 47780
// exit ;
47776: POP
47777: POP
47778: GO 47863
// end ;
47780: GO 47451
47782: POP
47783: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47784: LD_VAR 0 9
47788: PPUSH
47789: LD_VAR 0 3
47793: PPUSH
47794: LD_VAR 0 4
47798: PPUSH
47799: LD_INT 20
47801: PPUSH
47802: CALL 39786 0 4
47806: PUSH
47807: LD_INT 4
47809: ARRAY
47810: IFFALSE 47814
// exit ;
47812: GO 47863
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47814: LD_VAR 0 2
47818: PUSH
47819: LD_INT 29
47821: PUSH
47822: LD_INT 30
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: IN
47829: PUSH
47830: LD_VAR 0 3
47834: PPUSH
47835: LD_VAR 0 4
47839: PPUSH
47840: LD_VAR 0 9
47844: PPUSH
47845: CALL_OW 440
47849: NOT
47850: AND
47851: IFFALSE 47855
// exit ;
47853: GO 47863
// result := true ;
47855: LD_ADDR_VAR 0 6
47859: PUSH
47860: LD_INT 1
47862: ST_TO_ADDR
// end ;
47863: LD_VAR 0 6
47867: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47868: LD_INT 0
47870: PPUSH
47871: PPUSH
47872: PPUSH
47873: PPUSH
47874: PPUSH
47875: PPUSH
47876: PPUSH
47877: PPUSH
47878: PPUSH
47879: PPUSH
47880: PPUSH
47881: PPUSH
47882: PPUSH
47883: PPUSH
47884: PPUSH
47885: PPUSH
47886: PPUSH
47887: PPUSH
47888: PPUSH
47889: PPUSH
47890: PPUSH
47891: PPUSH
47892: PPUSH
47893: PPUSH
47894: PPUSH
47895: PPUSH
47896: PPUSH
47897: PPUSH
47898: PPUSH
47899: PPUSH
47900: PPUSH
47901: PPUSH
47902: PPUSH
47903: PPUSH
47904: PPUSH
47905: PPUSH
47906: PPUSH
47907: PPUSH
47908: PPUSH
47909: PPUSH
47910: PPUSH
47911: PPUSH
47912: PPUSH
47913: PPUSH
47914: PPUSH
47915: PPUSH
47916: PPUSH
47917: PPUSH
47918: PPUSH
47919: PPUSH
47920: PPUSH
47921: PPUSH
47922: PPUSH
47923: PPUSH
47924: PPUSH
47925: PPUSH
47926: PPUSH
47927: PPUSH
// result = [ ] ;
47928: LD_ADDR_VAR 0 7
47932: PUSH
47933: EMPTY
47934: ST_TO_ADDR
// temp_list = [ ] ;
47935: LD_ADDR_VAR 0 9
47939: PUSH
47940: EMPTY
47941: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47942: LD_VAR 0 4
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: LD_INT 3
47958: PUSH
47959: LD_INT 4
47961: PUSH
47962: LD_INT 5
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: IN
47973: NOT
47974: PUSH
47975: LD_VAR 0 1
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: IN
47990: PUSH
47991: LD_VAR 0 5
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 3
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: IN
48010: NOT
48011: AND
48012: OR
48013: IFFALSE 48017
// exit ;
48015: GO 66408
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48017: LD_VAR 0 1
48021: PUSH
48022: LD_INT 6
48024: PUSH
48025: LD_INT 7
48027: PUSH
48028: LD_INT 8
48030: PUSH
48031: LD_INT 13
48033: PUSH
48034: LD_INT 12
48036: PUSH
48037: LD_INT 15
48039: PUSH
48040: LD_INT 11
48042: PUSH
48043: LD_INT 14
48045: PUSH
48046: LD_INT 10
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: IN
48060: IFFALSE 48070
// btype = b_lab ;
48062: LD_ADDR_VAR 0 1
48066: PUSH
48067: LD_INT 6
48069: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48070: LD_VAR 0 6
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: IN
48089: NOT
48090: PUSH
48091: LD_VAR 0 1
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: LD_INT 6
48110: PUSH
48111: LD_INT 36
48113: PUSH
48114: LD_INT 4
48116: PUSH
48117: LD_INT 5
48119: PUSH
48120: LD_INT 31
48122: PUSH
48123: LD_INT 32
48125: PUSH
48126: LD_INT 33
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: IN
48142: NOT
48143: PUSH
48144: LD_VAR 0 6
48148: PUSH
48149: LD_INT 1
48151: EQUAL
48152: AND
48153: OR
48154: PUSH
48155: LD_VAR 0 1
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 3
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: IN
48170: NOT
48171: PUSH
48172: LD_VAR 0 6
48176: PUSH
48177: LD_INT 2
48179: EQUAL
48180: AND
48181: OR
48182: IFFALSE 48192
// mode = 0 ;
48184: LD_ADDR_VAR 0 6
48188: PUSH
48189: LD_INT 0
48191: ST_TO_ADDR
// case mode of 0 :
48192: LD_VAR 0 6
48196: PUSH
48197: LD_INT 0
48199: DOUBLE
48200: EQUAL
48201: IFTRUE 48205
48203: GO 59658
48205: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48206: LD_ADDR_VAR 0 11
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48399: LD_ADDR_VAR 0 12
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 3
48556: NEG
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 3
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48595: LD_ADDR_VAR 0 13
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: LD_INT 3
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 3
48754: NEG
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 3
48766: NEG
48767: PUSH
48768: LD_INT 3
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48794: LD_ADDR_VAR 0 14
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 3
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48990: LD_ADDR_VAR 0 15
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 3
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 3
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49183: LD_ADDR_VAR 0 16
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: LD_INT 3
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49376: LD_ADDR_VAR 0 17
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49606: LD_ADDR_VAR 0 18
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49836: LD_ADDR_VAR 0 19
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50066: LD_ADDR_VAR 0 20
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 2
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50296: LD_ADDR_VAR 0 21
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 2
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50526: LD_ADDR_VAR 0 22
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50756: LD_ADDR_VAR 0 23
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 2
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: LD_INT 3
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 3
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51036: LD_ADDR_VAR 0 24
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 2
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 3
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 3
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51312: LD_ADDR_VAR 0 25
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51586: LD_ADDR_VAR 0 26
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: LD_INT 3
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: LD_INT 3
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51862: LD_ADDR_VAR 0 27
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 3
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: NEG
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52142: LD_ADDR_VAR 0 28
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 3
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52424: LD_ADDR_VAR 0 29
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: LD_INT 3
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 3
52668: NEG
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52703: LD_ADDR_VAR 0 30
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 2
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: LD_INT 3
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 3
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 3
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52981: LD_ADDR_VAR 0 31
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 3
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53259: LD_ADDR_VAR 0 32
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 3
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 3
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53537: LD_ADDR_VAR 0 33
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: LD_INT 2
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 3
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 3
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 3
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 3
53781: NEG
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53816: LD_ADDR_VAR 0 34
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 2
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 3
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: LD_INT 3
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54096: LD_ADDR_VAR 0 35
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54208: LD_ADDR_VAR 0 36
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54320: LD_ADDR_VAR 0 37
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54432: LD_ADDR_VAR 0 38
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54544: LD_ADDR_VAR 0 39
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54656: LD_ADDR_VAR 0 40
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54768: LD_ADDR_VAR 0 41
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 2
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 2
54958: NEG
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 3
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 3
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 3
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: LD_INT 3
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 3
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: NEG
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: NEG
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55118: LD_ADDR_VAR 0 42
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 3
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: LD_INT 3
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 3
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 3
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: LD_INT 3
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 3
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 3
55427: NEG
55428: PUSH
55429: LD_INT 3
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55468: LD_ADDR_VAR 0 43
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 2
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 3
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 3
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 3
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 3
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 3
55764: NEG
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55816: LD_ADDR_VAR 0 44
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: LD_INT 2
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 3
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 3
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: NEG
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 3
56125: NEG
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56166: LD_ADDR_VAR 0 45
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: LD_INT 3
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 3
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 3
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 3
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 3
56463: NEG
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 3
56475: NEG
56476: PUSH
56477: LD_INT 3
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56516: LD_ADDR_VAR 0 46
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 3
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 3
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 3
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56864: LD_ADDR_VAR 0 47
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57015: LD_ADDR_VAR 0 48
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57162: LD_ADDR_VAR 0 49
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57306: LD_ADDR_VAR 0 50
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57450: LD_ADDR_VAR 0 51
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57597: LD_ADDR_VAR 0 52
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 2
57724: NEG
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57748: LD_ADDR_VAR 0 53
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57978: LD_ADDR_VAR 0 54
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58208: LD_ADDR_VAR 0 55
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58438: LD_ADDR_VAR 0 56
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: NEG
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58668: LD_ADDR_VAR 0 57
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: LD_INT 2
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: LD_INT 2
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: LD_INT 2
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: LD_INT 2
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58898: LD_ADDR_VAR 0 58
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59128: LD_ADDR_VAR 0 59
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59216: LD_ADDR_VAR 0 60
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59304: LD_ADDR_VAR 0 61
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59392: LD_ADDR_VAR 0 62
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59480: LD_ADDR_VAR 0 63
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59568: LD_ADDR_VAR 0 64
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: ST_TO_ADDR
// end ; 1 :
59656: GO 65553
59658: LD_INT 1
59660: DOUBLE
59661: EQUAL
59662: IFTRUE 59666
59664: GO 62289
59666: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59667: LD_ADDR_VAR 0 11
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: LD_INT 3
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 3
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: LIST
59710: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59711: LD_ADDR_VAR 0 12
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: LIST
59751: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59752: LD_ADDR_VAR 0 13
59756: PUSH
59757: LD_INT 3
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 3
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 3
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: LIST
59791: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59792: LD_ADDR_VAR 0 14
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: LD_INT 3
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59833: LD_ADDR_VAR 0 15
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 3
59851: NEG
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: LIST
59876: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59877: LD_ADDR_VAR 0 16
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: LD_INT 3
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 3
59896: NEG
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 3
59908: NEG
59909: PUSH
59910: LD_INT 3
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59923: LD_ADDR_VAR 0 17
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: LD_INT 2
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: LIST
59966: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59967: LD_ADDR_VAR 0 18
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: LIST
60007: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60008: LD_ADDR_VAR 0 19
60012: PUSH
60013: LD_INT 3
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: LD_INT 3
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: LD_INT 3
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60048: LD_ADDR_VAR 0 20
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 3
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 3
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: LIST
60088: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60089: LD_ADDR_VAR 0 21
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 3
60107: NEG
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 3
60118: NEG
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: LIST
60132: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60133: LD_ADDR_VAR 0 22
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 3
60152: NEG
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: NEG
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: LIST
60178: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60179: LD_ADDR_VAR 0 23
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 4
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: LIST
60222: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60223: LD_ADDR_VAR 0 24
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 4
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: LIST
60263: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60264: LD_ADDR_VAR 0 25
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: LD_INT 3
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 4
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 3
60291: PUSH
60292: LD_INT 4
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: LIST
60303: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60304: LD_ADDR_VAR 0 26
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 4
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: LD_INT 3
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: LIST
60344: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60345: LD_ADDR_VAR 0 27
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 3
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 4
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60389: LD_ADDR_VAR 0 28
60393: PUSH
60394: LD_INT 3
60396: NEG
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: LD_INT 4
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 4
60420: NEG
60421: PUSH
60422: LD_INT 3
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60435: LD_ADDR_VAR 0 29
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: LD_INT 3
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: LD_INT 3
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: LD_INT 2
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: LD_INT 4
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 4
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: LD_INT 3
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: LD_INT 5
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: LD_INT 5
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: LD_INT 4
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: LD_INT 6
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 6
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: LD_INT 5
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60590: LD_ADDR_VAR 0 30
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 3
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 3
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 3
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 4
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 4
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 4
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 5
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 5
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 5
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 6
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 6
60711: PUSH
60712: LD_INT 1
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60733: LD_ADDR_VAR 0 31
60737: PUSH
60738: LD_INT 3
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 3
60750: PUSH
60751: LD_INT 3
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: LD_INT 3
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 4
60770: PUSH
60771: LD_INT 3
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 4
60780: PUSH
60781: LD_INT 4
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 3
60790: PUSH
60791: LD_INT 4
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 5
60800: PUSH
60801: LD_INT 4
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 5
60810: PUSH
60811: LD_INT 5
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 4
60820: PUSH
60821: LD_INT 5
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 6
60830: PUSH
60831: LD_INT 5
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 6
60840: PUSH
60841: LD_INT 6
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 5
60850: PUSH
60851: LD_INT 6
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60872: LD_ADDR_VAR 0 32
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 3
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: LD_INT 4
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 4
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: LD_INT 3
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 5
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 5
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: LD_INT 4
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 6
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 6
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: LD_INT 5
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61015: LD_ADDR_VAR 0 33
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 3
61044: NEG
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 3
61056: NEG
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 4
61067: NEG
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 4
61078: NEG
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 4
61090: NEG
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 5
61101: NEG
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 5
61112: NEG
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 5
61124: NEG
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 6
61135: NEG
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 6
61146: NEG
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61170: LD_ADDR_VAR 0 34
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PUSH
61179: LD_INT 3
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 3
61189: NEG
61190: PUSH
61191: LD_INT 2
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 3
61201: NEG
61202: PUSH
61203: LD_INT 3
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 3
61213: NEG
61214: PUSH
61215: LD_INT 4
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 4
61225: NEG
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 4
61237: NEG
61238: PUSH
61239: LD_INT 4
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 4
61249: NEG
61250: PUSH
61251: LD_INT 5
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 5
61261: NEG
61262: PUSH
61263: LD_INT 4
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 5
61273: NEG
61274: PUSH
61275: LD_INT 5
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 5
61285: NEG
61286: PUSH
61287: LD_INT 6
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 6
61297: NEG
61298: PUSH
61299: LD_INT 5
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 6
61309: NEG
61310: PUSH
61311: LD_INT 6
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61333: LD_ADDR_VAR 0 41
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: LD_INT 2
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: LD_INT 3
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61377: LD_ADDR_VAR 0 42
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: LIST
61417: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61418: LD_ADDR_VAR 0 43
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: LD_INT 2
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: LD_INT 2
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: LIST
61457: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61458: LD_ADDR_VAR 0 44
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: LD_INT 2
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: LIST
61498: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61499: LD_ADDR_VAR 0 45
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: NEG
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: NEG
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: LIST
61542: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61543: LD_ADDR_VAR 0 46
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 3
61574: NEG
61575: PUSH
61576: LD_INT 2
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61589: LD_ADDR_VAR 0 47
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: LD_INT 3
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61622: LD_ADDR_VAR 0 48
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: LD_INT 2
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61653: LD_ADDR_VAR 0 49
61657: PUSH
61658: LD_INT 3
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 3
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61682: LD_ADDR_VAR 0 50
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: LD_INT 3
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61711: LD_ADDR_VAR 0 51
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: LD_INT 2
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 2
61729: NEG
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61742: LD_ADDR_VAR 0 52
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: LD_INT 2
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61775: LD_ADDR_VAR 0 53
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: LD_INT 3
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 3
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: LD_INT 2
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61819: LD_ADDR_VAR 0 54
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 3
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 3
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61860: LD_ADDR_VAR 0 55
61864: PUSH
61865: LD_INT 3
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 3
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: PUSH
61888: LD_INT 3
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: LIST
61899: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61900: LD_ADDR_VAR 0 56
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: LD_INT 3
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 3
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: LD_INT 2
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: LIST
61940: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61941: LD_ADDR_VAR 0 57
61945: PUSH
61946: LD_INT 2
61948: NEG
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 3
61959: NEG
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 3
61970: NEG
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: LIST
61984: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61985: LD_ADDR_VAR 0 58
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: LD_INT 3
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 3
62004: NEG
62005: PUSH
62006: LD_INT 2
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 3
62016: NEG
62017: PUSH
62018: LD_INT 3
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62031: LD_ADDR_VAR 0 59
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: LD_INT 2
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: LD_INT 2
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: LIST
62074: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62075: LD_ADDR_VAR 0 60
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 2
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62116: LD_ADDR_VAR 0 61
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: LD_INT 2
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: LIST
62155: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62156: LD_ADDR_VAR 0 62
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62197: LD_ADDR_VAR 0 63
62201: PUSH
62202: LD_INT 1
62204: NEG
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: NEG
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: LIST
62240: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62241: LD_ADDR_VAR 0 64
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 2
62260: NEG
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: NEG
62273: PUSH
62274: LD_INT 2
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: ST_TO_ADDR
// end ; 2 :
62287: GO 65553
62289: LD_INT 2
62291: DOUBLE
62292: EQUAL
62293: IFTRUE 62297
62295: GO 65552
62297: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62298: LD_ADDR_VAR 0 29
62302: PUSH
62303: LD_INT 4
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 4
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 5
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 5
62336: PUSH
62337: LD_INT 1
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 4
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 3
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 3
62377: PUSH
62378: LD_INT 2
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 5
62388: PUSH
62389: LD_INT 2
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 3
62398: PUSH
62399: LD_INT 3
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 3
62408: PUSH
62409: LD_INT 2
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 4
62418: PUSH
62419: LD_INT 3
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 4
62428: PUSH
62429: LD_INT 4
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: LD_INT 4
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 2
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 4
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: LD_INT 4
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: LD_INT 4
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: LD_INT 3
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: LD_INT 4
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 5
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: LD_INT 5
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 4
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: LD_INT 3
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 2
62560: PUSH
62561: LD_INT 5
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: LD_INT 3
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 3
62581: NEG
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 3
62592: NEG
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 2
62604: NEG
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 2
62615: NEG
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: NEG
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 4
62637: NEG
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 4
62648: NEG
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 4
62660: NEG
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 4
62683: NEG
62684: PUSH
62685: LD_INT 4
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 4
62695: NEG
62696: PUSH
62697: LD_INT 5
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 3
62707: NEG
62708: PUSH
62709: LD_INT 4
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 3
62719: NEG
62720: PUSH
62721: LD_INT 3
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 4
62731: NEG
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 5
62743: NEG
62744: PUSH
62745: LD_INT 4
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 5
62755: NEG
62756: PUSH
62757: LD_INT 5
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 3
62767: NEG
62768: PUSH
62769: LD_INT 5
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 5
62779: NEG
62780: PUSH
62781: LD_INT 3
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62836: LD_ADDR_VAR 0 30
62840: PUSH
62841: LD_INT 4
62843: PUSH
62844: LD_INT 4
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 4
62853: PUSH
62854: LD_INT 3
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 5
62863: PUSH
62864: LD_INT 4
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 5
62873: PUSH
62874: LD_INT 5
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 4
62883: PUSH
62884: LD_INT 5
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: PUSH
62894: LD_INT 4
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 3
62903: PUSH
62904: LD_INT 3
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 5
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: LD_INT 5
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: LD_INT 3
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: LD_INT 3
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 4
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: LD_INT 4
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: LD_INT 3
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: LD_INT 2
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: LD_INT 4
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: LD_INT 2
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 4
63026: NEG
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 4
63037: NEG
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 3
63049: NEG
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 3
63060: NEG
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 4
63071: NEG
63072: PUSH
63073: LD_INT 1
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 5
63082: NEG
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 5
63093: NEG
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 5
63105: NEG
63106: PUSH
63107: LD_INT 2
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 3
63117: NEG
63118: PUSH
63119: LD_INT 2
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 3
63128: NEG
63129: PUSH
63130: LD_INT 3
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 3
63140: NEG
63141: PUSH
63142: LD_INT 4
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: LD_INT 3
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 2
63164: NEG
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 3
63176: NEG
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 4
63188: NEG
63189: PUSH
63190: LD_INT 3
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 4
63200: NEG
63201: PUSH
63202: LD_INT 4
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 2
63212: NEG
63213: PUSH
63214: LD_INT 4
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 4
63224: NEG
63225: PUSH
63226: LD_INT 2
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: LD_INT 4
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 5
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: LD_INT 4
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 1
63269: PUSH
63270: LD_INT 3
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: LD_INT 3
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: NEG
63292: PUSH
63293: LD_INT 4
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: LD_INT 5
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: LD_INT 3
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 2
63326: NEG
63327: PUSH
63328: LD_INT 5
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63383: LD_ADDR_VAR 0 31
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: LD_INT 4
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: LD_INT 3
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: LD_INT 4
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 5
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: LD_INT 5
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 4
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 1
63451: NEG
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 2
63462: PUSH
63463: LD_INT 5
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 2
63472: NEG
63473: PUSH
63474: LD_INT 3
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 3
63483: NEG
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 3
63494: NEG
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: NEG
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 2
63517: NEG
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 3
63528: NEG
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 4
63539: NEG
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 4
63550: NEG
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 4
63562: NEG
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 4
63585: NEG
63586: PUSH
63587: LD_INT 4
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 4
63597: NEG
63598: PUSH
63599: LD_INT 5
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 3
63609: NEG
63610: PUSH
63611: LD_INT 4
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 3
63621: NEG
63622: PUSH
63623: LD_INT 3
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 4
63633: NEG
63634: PUSH
63635: LD_INT 3
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 5
63645: NEG
63646: PUSH
63647: LD_INT 4
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 5
63657: NEG
63658: PUSH
63659: LD_INT 5
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 3
63669: NEG
63670: PUSH
63671: LD_INT 5
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 5
63681: NEG
63682: PUSH
63683: LD_INT 3
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: LD_INT 3
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 4
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 1
63715: PUSH
63716: LD_INT 3
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 2
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: LD_INT 3
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: LD_INT 4
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: LD_INT 2
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: NEG
63784: PUSH
63785: LD_INT 4
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 4
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 4
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 5
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 5
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 4
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 3
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 3
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 3
63867: PUSH
63868: LD_INT 2
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 5
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63933: LD_ADDR_VAR 0 32
63937: PUSH
63938: LD_INT 4
63940: NEG
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 4
63951: NEG
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 3
63963: NEG
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 3
63974: NEG
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 4
63985: NEG
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 5
63996: NEG
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 5
64007: NEG
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 5
64019: NEG
64020: PUSH
64021: LD_INT 2
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 3
64031: NEG
64032: PUSH
64033: LD_INT 2
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 3
64042: NEG
64043: PUSH
64044: LD_INT 3
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 3
64054: NEG
64055: PUSH
64056: LD_INT 4
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 2
64066: NEG
64067: PUSH
64068: LD_INT 3
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 2
64078: NEG
64079: PUSH
64080: LD_INT 2
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 3
64090: NEG
64091: PUSH
64092: LD_INT 2
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 4
64102: NEG
64103: PUSH
64104: LD_INT 3
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 4
64114: NEG
64115: PUSH
64116: LD_INT 4
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 2
64126: NEG
64127: PUSH
64128: LD_INT 4
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 4
64138: NEG
64139: PUSH
64140: LD_INT 2
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 4
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 5
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: LD_INT 4
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 1
64183: PUSH
64184: LD_INT 3
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: LD_INT 3
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 1
64205: NEG
64206: PUSH
64207: LD_INT 4
64209: NEG
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: LD_INT 5
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 2
64229: PUSH
64230: LD_INT 3
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 2
64240: NEG
64241: PUSH
64242: LD_INT 5
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 3
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 3
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 4
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 4
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 3
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 4
64335: PUSH
64336: LD_INT 2
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 4
64345: PUSH
64346: LD_INT 4
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 4
64355: PUSH
64356: LD_INT 3
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 5
64365: PUSH
64366: LD_INT 4
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 5
64375: PUSH
64376: LD_INT 5
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 4
64385: PUSH
64386: LD_INT 5
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 3
64395: PUSH
64396: LD_INT 4
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 3
64405: PUSH
64406: LD_INT 3
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 5
64415: PUSH
64416: LD_INT 3
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 3
64425: PUSH
64426: LD_INT 5
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64480: LD_ADDR_VAR 0 33
64484: PUSH
64485: LD_INT 4
64487: NEG
64488: PUSH
64489: LD_INT 4
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 4
64499: NEG
64500: PUSH
64501: LD_INT 5
64503: NEG
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 3
64511: NEG
64512: PUSH
64513: LD_INT 4
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 3
64523: NEG
64524: PUSH
64525: LD_INT 3
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 4
64535: NEG
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 5
64547: NEG
64548: PUSH
64549: LD_INT 4
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 5
64559: NEG
64560: PUSH
64561: LD_INT 5
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 3
64571: NEG
64572: PUSH
64573: LD_INT 5
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 5
64583: NEG
64584: PUSH
64585: LD_INT 3
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: LD_INT 3
64598: NEG
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: LD_INT 4
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 1
64617: PUSH
64618: LD_INT 3
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: LD_INT 2
64631: NEG
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: LD_INT 2
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: LD_INT 3
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: LD_INT 4
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 2
64674: PUSH
64675: LD_INT 2
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 2
64685: NEG
64686: PUSH
64687: LD_INT 4
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 4
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 4
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 5
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 5
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 4
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 3
64748: PUSH
64749: LD_INT 0
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 3
64758: PUSH
64759: LD_INT 1
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 3
64769: PUSH
64770: LD_INT 2
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 5
64780: PUSH
64781: LD_INT 2
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: LD_INT 3
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 3
64800: PUSH
64801: LD_INT 2
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 4
64810: PUSH
64811: LD_INT 3
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 4
64820: PUSH
64821: LD_INT 4
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 3
64830: PUSH
64831: LD_INT 4
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 2
64840: PUSH
64841: LD_INT 3
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 2
64850: PUSH
64851: LD_INT 2
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 4
64860: PUSH
64861: LD_INT 2
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 2
64870: PUSH
64871: LD_INT 4
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 4
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: LD_INT 3
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: LD_INT 4
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: LD_INT 5
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 5
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: LD_INT 4
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: LD_INT 3
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 2
64952: PUSH
64953: LD_INT 5
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 2
64962: NEG
64963: PUSH
64964: LD_INT 3
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65018: LD_ADDR_VAR 0 34
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: LD_INT 4
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: LD_INT 5
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: LD_INT 4
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: PUSH
65059: LD_INT 3
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: LD_INT 3
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 1
65080: NEG
65081: PUSH
65082: LD_INT 4
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: LD_INT 5
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 2
65104: PUSH
65105: LD_INT 3
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 2
65115: NEG
65116: PUSH
65117: LD_INT 5
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 3
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 3
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 4
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 4
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 3
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 2
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 2
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 2
65199: PUSH
65200: LD_INT 2
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 4
65210: PUSH
65211: LD_INT 2
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 4
65220: PUSH
65221: LD_INT 4
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 4
65230: PUSH
65231: LD_INT 3
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 5
65240: PUSH
65241: LD_INT 4
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 5
65250: PUSH
65251: LD_INT 5
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 4
65260: PUSH
65261: LD_INT 5
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 3
65270: PUSH
65271: LD_INT 4
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 3
65280: PUSH
65281: LD_INT 3
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 5
65290: PUSH
65291: LD_INT 3
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: LD_INT 5
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: LD_INT 2
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 1
65340: PUSH
65341: LD_INT 4
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 4
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: NEG
65361: PUSH
65362: LD_INT 3
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 2
65382: PUSH
65383: LD_INT 4
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 2
65392: NEG
65393: PUSH
65394: LD_INT 2
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 4
65403: NEG
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 4
65414: NEG
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 3
65426: NEG
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 3
65437: NEG
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 4
65448: NEG
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 5
65459: NEG
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 5
65470: NEG
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 5
65482: NEG
65483: PUSH
65484: LD_INT 2
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 3
65494: NEG
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: ST_TO_ADDR
// end ; end ;
65550: GO 65553
65552: POP
// case btype of b_depot , b_warehouse :
65553: LD_VAR 0 1
65557: PUSH
65558: LD_INT 0
65560: DOUBLE
65561: EQUAL
65562: IFTRUE 65572
65564: LD_INT 1
65566: DOUBLE
65567: EQUAL
65568: IFTRUE 65572
65570: GO 65773
65572: POP
// case nation of nation_american :
65573: LD_VAR 0 5
65577: PUSH
65578: LD_INT 1
65580: DOUBLE
65581: EQUAL
65582: IFTRUE 65586
65584: GO 65642
65586: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65587: LD_ADDR_VAR 0 9
65591: PUSH
65592: LD_VAR 0 11
65596: PUSH
65597: LD_VAR 0 12
65601: PUSH
65602: LD_VAR 0 13
65606: PUSH
65607: LD_VAR 0 14
65611: PUSH
65612: LD_VAR 0 15
65616: PUSH
65617: LD_VAR 0 16
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: PUSH
65630: LD_VAR 0 4
65634: PUSH
65635: LD_INT 1
65637: PLUS
65638: ARRAY
65639: ST_TO_ADDR
65640: GO 65771
65642: LD_INT 2
65644: DOUBLE
65645: EQUAL
65646: IFTRUE 65650
65648: GO 65706
65650: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65651: LD_ADDR_VAR 0 9
65655: PUSH
65656: LD_VAR 0 17
65660: PUSH
65661: LD_VAR 0 18
65665: PUSH
65666: LD_VAR 0 19
65670: PUSH
65671: LD_VAR 0 20
65675: PUSH
65676: LD_VAR 0 21
65680: PUSH
65681: LD_VAR 0 22
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: PUSH
65694: LD_VAR 0 4
65698: PUSH
65699: LD_INT 1
65701: PLUS
65702: ARRAY
65703: ST_TO_ADDR
65704: GO 65771
65706: LD_INT 3
65708: DOUBLE
65709: EQUAL
65710: IFTRUE 65714
65712: GO 65770
65714: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65715: LD_ADDR_VAR 0 9
65719: PUSH
65720: LD_VAR 0 23
65724: PUSH
65725: LD_VAR 0 24
65729: PUSH
65730: LD_VAR 0 25
65734: PUSH
65735: LD_VAR 0 26
65739: PUSH
65740: LD_VAR 0 27
65744: PUSH
65745: LD_VAR 0 28
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: PUSH
65758: LD_VAR 0 4
65762: PUSH
65763: LD_INT 1
65765: PLUS
65766: ARRAY
65767: ST_TO_ADDR
65768: GO 65771
65770: POP
65771: GO 66326
65773: LD_INT 2
65775: DOUBLE
65776: EQUAL
65777: IFTRUE 65787
65779: LD_INT 3
65781: DOUBLE
65782: EQUAL
65783: IFTRUE 65787
65785: GO 65843
65787: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65788: LD_ADDR_VAR 0 9
65792: PUSH
65793: LD_VAR 0 29
65797: PUSH
65798: LD_VAR 0 30
65802: PUSH
65803: LD_VAR 0 31
65807: PUSH
65808: LD_VAR 0 32
65812: PUSH
65813: LD_VAR 0 33
65817: PUSH
65818: LD_VAR 0 34
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: PUSH
65831: LD_VAR 0 4
65835: PUSH
65836: LD_INT 1
65838: PLUS
65839: ARRAY
65840: ST_TO_ADDR
65841: GO 66326
65843: LD_INT 16
65845: DOUBLE
65846: EQUAL
65847: IFTRUE 65905
65849: LD_INT 17
65851: DOUBLE
65852: EQUAL
65853: IFTRUE 65905
65855: LD_INT 18
65857: DOUBLE
65858: EQUAL
65859: IFTRUE 65905
65861: LD_INT 19
65863: DOUBLE
65864: EQUAL
65865: IFTRUE 65905
65867: LD_INT 22
65869: DOUBLE
65870: EQUAL
65871: IFTRUE 65905
65873: LD_INT 20
65875: DOUBLE
65876: EQUAL
65877: IFTRUE 65905
65879: LD_INT 21
65881: DOUBLE
65882: EQUAL
65883: IFTRUE 65905
65885: LD_INT 23
65887: DOUBLE
65888: EQUAL
65889: IFTRUE 65905
65891: LD_INT 24
65893: DOUBLE
65894: EQUAL
65895: IFTRUE 65905
65897: LD_INT 25
65899: DOUBLE
65900: EQUAL
65901: IFTRUE 65905
65903: GO 65961
65905: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65906: LD_ADDR_VAR 0 9
65910: PUSH
65911: LD_VAR 0 35
65915: PUSH
65916: LD_VAR 0 36
65920: PUSH
65921: LD_VAR 0 37
65925: PUSH
65926: LD_VAR 0 38
65930: PUSH
65931: LD_VAR 0 39
65935: PUSH
65936: LD_VAR 0 40
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: PUSH
65949: LD_VAR 0 4
65953: PUSH
65954: LD_INT 1
65956: PLUS
65957: ARRAY
65958: ST_TO_ADDR
65959: GO 66326
65961: LD_INT 6
65963: DOUBLE
65964: EQUAL
65965: IFTRUE 66017
65967: LD_INT 7
65969: DOUBLE
65970: EQUAL
65971: IFTRUE 66017
65973: LD_INT 8
65975: DOUBLE
65976: EQUAL
65977: IFTRUE 66017
65979: LD_INT 13
65981: DOUBLE
65982: EQUAL
65983: IFTRUE 66017
65985: LD_INT 12
65987: DOUBLE
65988: EQUAL
65989: IFTRUE 66017
65991: LD_INT 15
65993: DOUBLE
65994: EQUAL
65995: IFTRUE 66017
65997: LD_INT 11
65999: DOUBLE
66000: EQUAL
66001: IFTRUE 66017
66003: LD_INT 14
66005: DOUBLE
66006: EQUAL
66007: IFTRUE 66017
66009: LD_INT 10
66011: DOUBLE
66012: EQUAL
66013: IFTRUE 66017
66015: GO 66073
66017: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66018: LD_ADDR_VAR 0 9
66022: PUSH
66023: LD_VAR 0 41
66027: PUSH
66028: LD_VAR 0 42
66032: PUSH
66033: LD_VAR 0 43
66037: PUSH
66038: LD_VAR 0 44
66042: PUSH
66043: LD_VAR 0 45
66047: PUSH
66048: LD_VAR 0 46
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: PUSH
66061: LD_VAR 0 4
66065: PUSH
66066: LD_INT 1
66068: PLUS
66069: ARRAY
66070: ST_TO_ADDR
66071: GO 66326
66073: LD_INT 36
66075: DOUBLE
66076: EQUAL
66077: IFTRUE 66081
66079: GO 66137
66081: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66082: LD_ADDR_VAR 0 9
66086: PUSH
66087: LD_VAR 0 47
66091: PUSH
66092: LD_VAR 0 48
66096: PUSH
66097: LD_VAR 0 49
66101: PUSH
66102: LD_VAR 0 50
66106: PUSH
66107: LD_VAR 0 51
66111: PUSH
66112: LD_VAR 0 52
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: PUSH
66125: LD_VAR 0 4
66129: PUSH
66130: LD_INT 1
66132: PLUS
66133: ARRAY
66134: ST_TO_ADDR
66135: GO 66326
66137: LD_INT 4
66139: DOUBLE
66140: EQUAL
66141: IFTRUE 66163
66143: LD_INT 5
66145: DOUBLE
66146: EQUAL
66147: IFTRUE 66163
66149: LD_INT 34
66151: DOUBLE
66152: EQUAL
66153: IFTRUE 66163
66155: LD_INT 37
66157: DOUBLE
66158: EQUAL
66159: IFTRUE 66163
66161: GO 66219
66163: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66164: LD_ADDR_VAR 0 9
66168: PUSH
66169: LD_VAR 0 53
66173: PUSH
66174: LD_VAR 0 54
66178: PUSH
66179: LD_VAR 0 55
66183: PUSH
66184: LD_VAR 0 56
66188: PUSH
66189: LD_VAR 0 57
66193: PUSH
66194: LD_VAR 0 58
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: PUSH
66207: LD_VAR 0 4
66211: PUSH
66212: LD_INT 1
66214: PLUS
66215: ARRAY
66216: ST_TO_ADDR
66217: GO 66326
66219: LD_INT 31
66221: DOUBLE
66222: EQUAL
66223: IFTRUE 66269
66225: LD_INT 32
66227: DOUBLE
66228: EQUAL
66229: IFTRUE 66269
66231: LD_INT 33
66233: DOUBLE
66234: EQUAL
66235: IFTRUE 66269
66237: LD_INT 27
66239: DOUBLE
66240: EQUAL
66241: IFTRUE 66269
66243: LD_INT 26
66245: DOUBLE
66246: EQUAL
66247: IFTRUE 66269
66249: LD_INT 28
66251: DOUBLE
66252: EQUAL
66253: IFTRUE 66269
66255: LD_INT 29
66257: DOUBLE
66258: EQUAL
66259: IFTRUE 66269
66261: LD_INT 30
66263: DOUBLE
66264: EQUAL
66265: IFTRUE 66269
66267: GO 66325
66269: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66270: LD_ADDR_VAR 0 9
66274: PUSH
66275: LD_VAR 0 59
66279: PUSH
66280: LD_VAR 0 60
66284: PUSH
66285: LD_VAR 0 61
66289: PUSH
66290: LD_VAR 0 62
66294: PUSH
66295: LD_VAR 0 63
66299: PUSH
66300: LD_VAR 0 64
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: PUSH
66313: LD_VAR 0 4
66317: PUSH
66318: LD_INT 1
66320: PLUS
66321: ARRAY
66322: ST_TO_ADDR
66323: GO 66326
66325: POP
// temp_list2 = [ ] ;
66326: LD_ADDR_VAR 0 10
66330: PUSH
66331: EMPTY
66332: ST_TO_ADDR
// for i in temp_list do
66333: LD_ADDR_VAR 0 8
66337: PUSH
66338: LD_VAR 0 9
66342: PUSH
66343: FOR_IN
66344: IFFALSE 66396
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66346: LD_ADDR_VAR 0 10
66350: PUSH
66351: LD_VAR 0 10
66355: PUSH
66356: LD_VAR 0 8
66360: PUSH
66361: LD_INT 1
66363: ARRAY
66364: PUSH
66365: LD_VAR 0 2
66369: PLUS
66370: PUSH
66371: LD_VAR 0 8
66375: PUSH
66376: LD_INT 2
66378: ARRAY
66379: PUSH
66380: LD_VAR 0 3
66384: PLUS
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: EMPTY
66391: LIST
66392: ADD
66393: ST_TO_ADDR
66394: GO 66343
66396: POP
66397: POP
// result = temp_list2 ;
66398: LD_ADDR_VAR 0 7
66402: PUSH
66403: LD_VAR 0 10
66407: ST_TO_ADDR
// end ;
66408: LD_VAR 0 7
66412: RET
// export function EnemyInRange ( unit , dist ) ; begin
66413: LD_INT 0
66415: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66416: LD_ADDR_VAR 0 3
66420: PUSH
66421: LD_VAR 0 1
66425: PPUSH
66426: CALL_OW 255
66430: PPUSH
66431: LD_VAR 0 1
66435: PPUSH
66436: CALL_OW 250
66440: PPUSH
66441: LD_VAR 0 1
66445: PPUSH
66446: CALL_OW 251
66450: PPUSH
66451: LD_VAR 0 2
66455: PPUSH
66456: CALL 39786 0 4
66460: PUSH
66461: LD_INT 4
66463: ARRAY
66464: ST_TO_ADDR
// end ;
66465: LD_VAR 0 3
66469: RET
// export function PlayerSeeMe ( unit ) ; begin
66470: LD_INT 0
66472: PPUSH
// result := See ( your_side , unit ) ;
66473: LD_ADDR_VAR 0 2
66477: PUSH
66478: LD_OWVAR 2
66482: PPUSH
66483: LD_VAR 0 1
66487: PPUSH
66488: CALL_OW 292
66492: ST_TO_ADDR
// end ;
66493: LD_VAR 0 2
66497: RET
// export function ReverseDir ( unit ) ; begin
66498: LD_INT 0
66500: PPUSH
// if not unit then
66501: LD_VAR 0 1
66505: NOT
66506: IFFALSE 66510
// exit ;
66508: GO 66533
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66510: LD_ADDR_VAR 0 2
66514: PUSH
66515: LD_VAR 0 1
66519: PPUSH
66520: CALL_OW 254
66524: PUSH
66525: LD_INT 3
66527: PLUS
66528: PUSH
66529: LD_INT 6
66531: MOD
66532: ST_TO_ADDR
// end ;
66533: LD_VAR 0 2
66537: RET
// export function ReverseArray ( array ) ; var i ; begin
66538: LD_INT 0
66540: PPUSH
66541: PPUSH
// if not array then
66542: LD_VAR 0 1
66546: NOT
66547: IFFALSE 66551
// exit ;
66549: GO 66606
// result := [ ] ;
66551: LD_ADDR_VAR 0 2
66555: PUSH
66556: EMPTY
66557: ST_TO_ADDR
// for i := array downto 1 do
66558: LD_ADDR_VAR 0 3
66562: PUSH
66563: DOUBLE
66564: LD_VAR 0 1
66568: INC
66569: ST_TO_ADDR
66570: LD_INT 1
66572: PUSH
66573: FOR_DOWNTO
66574: IFFALSE 66604
// result := Join ( result , array [ i ] ) ;
66576: LD_ADDR_VAR 0 2
66580: PUSH
66581: LD_VAR 0 2
66585: PPUSH
66586: LD_VAR 0 1
66590: PUSH
66591: LD_VAR 0 3
66595: ARRAY
66596: PPUSH
66597: CALL 71271 0 2
66601: ST_TO_ADDR
66602: GO 66573
66604: POP
66605: POP
// end ;
66606: LD_VAR 0 2
66610: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66611: LD_INT 0
66613: PPUSH
66614: PPUSH
66615: PPUSH
66616: PPUSH
66617: PPUSH
66618: PPUSH
// if not unit or not hexes then
66619: LD_VAR 0 1
66623: NOT
66624: PUSH
66625: LD_VAR 0 2
66629: NOT
66630: OR
66631: IFFALSE 66635
// exit ;
66633: GO 66758
// dist := 9999 ;
66635: LD_ADDR_VAR 0 5
66639: PUSH
66640: LD_INT 9999
66642: ST_TO_ADDR
// for i = 1 to hexes do
66643: LD_ADDR_VAR 0 4
66647: PUSH
66648: DOUBLE
66649: LD_INT 1
66651: DEC
66652: ST_TO_ADDR
66653: LD_VAR 0 2
66657: PUSH
66658: FOR_TO
66659: IFFALSE 66746
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66661: LD_ADDR_VAR 0 6
66665: PUSH
66666: LD_VAR 0 1
66670: PPUSH
66671: LD_VAR 0 2
66675: PUSH
66676: LD_VAR 0 4
66680: ARRAY
66681: PUSH
66682: LD_INT 1
66684: ARRAY
66685: PPUSH
66686: LD_VAR 0 2
66690: PUSH
66691: LD_VAR 0 4
66695: ARRAY
66696: PUSH
66697: LD_INT 2
66699: ARRAY
66700: PPUSH
66701: CALL_OW 297
66705: ST_TO_ADDR
// if tdist < dist then
66706: LD_VAR 0 6
66710: PUSH
66711: LD_VAR 0 5
66715: LESS
66716: IFFALSE 66744
// begin hex := hexes [ i ] ;
66718: LD_ADDR_VAR 0 8
66722: PUSH
66723: LD_VAR 0 2
66727: PUSH
66728: LD_VAR 0 4
66732: ARRAY
66733: ST_TO_ADDR
// dist := tdist ;
66734: LD_ADDR_VAR 0 5
66738: PUSH
66739: LD_VAR 0 6
66743: ST_TO_ADDR
// end ; end ;
66744: GO 66658
66746: POP
66747: POP
// result := hex ;
66748: LD_ADDR_VAR 0 3
66752: PUSH
66753: LD_VAR 0 8
66757: ST_TO_ADDR
// end ;
66758: LD_VAR 0 3
66762: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66763: LD_INT 0
66765: PPUSH
66766: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66767: LD_VAR 0 1
66771: NOT
66772: PUSH
66773: LD_VAR 0 1
66777: PUSH
66778: LD_INT 21
66780: PUSH
66781: LD_INT 2
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 23
66790: PUSH
66791: LD_INT 2
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PPUSH
66802: CALL_OW 69
66806: IN
66807: NOT
66808: OR
66809: IFFALSE 66813
// exit ;
66811: GO 66860
// for i = 1 to 3 do
66813: LD_ADDR_VAR 0 3
66817: PUSH
66818: DOUBLE
66819: LD_INT 1
66821: DEC
66822: ST_TO_ADDR
66823: LD_INT 3
66825: PUSH
66826: FOR_TO
66827: IFFALSE 66858
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66829: LD_VAR 0 1
66833: PPUSH
66834: CALL_OW 250
66838: PPUSH
66839: LD_VAR 0 1
66843: PPUSH
66844: CALL_OW 251
66848: PPUSH
66849: LD_INT 1
66851: PPUSH
66852: CALL_OW 453
66856: GO 66826
66858: POP
66859: POP
// end ;
66860: LD_VAR 0 2
66864: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66865: LD_INT 0
66867: PPUSH
66868: PPUSH
66869: PPUSH
66870: PPUSH
66871: PPUSH
66872: PPUSH
// if not unit or not enemy_unit then
66873: LD_VAR 0 1
66877: NOT
66878: PUSH
66879: LD_VAR 0 2
66883: NOT
66884: OR
66885: IFFALSE 66889
// exit ;
66887: GO 67356
// if GetLives ( i ) < 250 then
66889: LD_VAR 0 4
66893: PPUSH
66894: CALL_OW 256
66898: PUSH
66899: LD_INT 250
66901: LESS
66902: IFFALSE 66915
// begin ComAutodestruct ( i ) ;
66904: LD_VAR 0 4
66908: PPUSH
66909: CALL 66763 0 1
// exit ;
66913: GO 67356
// end ; x := GetX ( enemy_unit ) ;
66915: LD_ADDR_VAR 0 7
66919: PUSH
66920: LD_VAR 0 2
66924: PPUSH
66925: CALL_OW 250
66929: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66930: LD_ADDR_VAR 0 8
66934: PUSH
66935: LD_VAR 0 2
66939: PPUSH
66940: CALL_OW 251
66944: ST_TO_ADDR
// if not x or not y then
66945: LD_VAR 0 7
66949: NOT
66950: PUSH
66951: LD_VAR 0 8
66955: NOT
66956: OR
66957: IFFALSE 66961
// exit ;
66959: GO 67356
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66961: LD_ADDR_VAR 0 6
66965: PUSH
66966: LD_VAR 0 7
66970: PPUSH
66971: LD_INT 0
66973: PPUSH
66974: LD_INT 4
66976: PPUSH
66977: CALL_OW 272
66981: PUSH
66982: LD_VAR 0 8
66986: PPUSH
66987: LD_INT 0
66989: PPUSH
66990: LD_INT 4
66992: PPUSH
66993: CALL_OW 273
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_VAR 0 7
67006: PPUSH
67007: LD_INT 1
67009: PPUSH
67010: LD_INT 4
67012: PPUSH
67013: CALL_OW 272
67017: PUSH
67018: LD_VAR 0 8
67022: PPUSH
67023: LD_INT 1
67025: PPUSH
67026: LD_INT 4
67028: PPUSH
67029: CALL_OW 273
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_VAR 0 7
67042: PPUSH
67043: LD_INT 2
67045: PPUSH
67046: LD_INT 4
67048: PPUSH
67049: CALL_OW 272
67053: PUSH
67054: LD_VAR 0 8
67058: PPUSH
67059: LD_INT 2
67061: PPUSH
67062: LD_INT 4
67064: PPUSH
67065: CALL_OW 273
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_VAR 0 7
67078: PPUSH
67079: LD_INT 3
67081: PPUSH
67082: LD_INT 4
67084: PPUSH
67085: CALL_OW 272
67089: PUSH
67090: LD_VAR 0 8
67094: PPUSH
67095: LD_INT 3
67097: PPUSH
67098: LD_INT 4
67100: PPUSH
67101: CALL_OW 273
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_VAR 0 7
67114: PPUSH
67115: LD_INT 4
67117: PPUSH
67118: LD_INT 4
67120: PPUSH
67121: CALL_OW 272
67125: PUSH
67126: LD_VAR 0 8
67130: PPUSH
67131: LD_INT 4
67133: PPUSH
67134: LD_INT 4
67136: PPUSH
67137: CALL_OW 273
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_VAR 0 7
67150: PPUSH
67151: LD_INT 5
67153: PPUSH
67154: LD_INT 4
67156: PPUSH
67157: CALL_OW 272
67161: PUSH
67162: LD_VAR 0 8
67166: PPUSH
67167: LD_INT 5
67169: PPUSH
67170: LD_INT 4
67172: PPUSH
67173: CALL_OW 273
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: ST_TO_ADDR
// for i = tmp downto 1 do
67190: LD_ADDR_VAR 0 4
67194: PUSH
67195: DOUBLE
67196: LD_VAR 0 6
67200: INC
67201: ST_TO_ADDR
67202: LD_INT 1
67204: PUSH
67205: FOR_DOWNTO
67206: IFFALSE 67307
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67208: LD_VAR 0 6
67212: PUSH
67213: LD_VAR 0 4
67217: ARRAY
67218: PUSH
67219: LD_INT 1
67221: ARRAY
67222: PPUSH
67223: LD_VAR 0 6
67227: PUSH
67228: LD_VAR 0 4
67232: ARRAY
67233: PUSH
67234: LD_INT 2
67236: ARRAY
67237: PPUSH
67238: CALL_OW 488
67242: NOT
67243: PUSH
67244: LD_VAR 0 6
67248: PUSH
67249: LD_VAR 0 4
67253: ARRAY
67254: PUSH
67255: LD_INT 1
67257: ARRAY
67258: PPUSH
67259: LD_VAR 0 6
67263: PUSH
67264: LD_VAR 0 4
67268: ARRAY
67269: PUSH
67270: LD_INT 2
67272: ARRAY
67273: PPUSH
67274: CALL_OW 428
67278: PUSH
67279: LD_INT 0
67281: NONEQUAL
67282: OR
67283: IFFALSE 67305
// tmp := Delete ( tmp , i ) ;
67285: LD_ADDR_VAR 0 6
67289: PUSH
67290: LD_VAR 0 6
67294: PPUSH
67295: LD_VAR 0 4
67299: PPUSH
67300: CALL_OW 3
67304: ST_TO_ADDR
67305: GO 67205
67307: POP
67308: POP
// j := GetClosestHex ( unit , tmp ) ;
67309: LD_ADDR_VAR 0 5
67313: PUSH
67314: LD_VAR 0 1
67318: PPUSH
67319: LD_VAR 0 6
67323: PPUSH
67324: CALL 66611 0 2
67328: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67329: LD_VAR 0 1
67333: PPUSH
67334: LD_VAR 0 5
67338: PUSH
67339: LD_INT 1
67341: ARRAY
67342: PPUSH
67343: LD_VAR 0 5
67347: PUSH
67348: LD_INT 2
67350: ARRAY
67351: PPUSH
67352: CALL_OW 111
// end ;
67356: LD_VAR 0 3
67360: RET
// export function PrepareApemanSoldier ( ) ; begin
67361: LD_INT 0
67363: PPUSH
// uc_nation := 0 ;
67364: LD_ADDR_OWVAR 21
67368: PUSH
67369: LD_INT 0
67371: ST_TO_ADDR
// hc_sex := sex_male ;
67372: LD_ADDR_OWVAR 27
67376: PUSH
67377: LD_INT 1
67379: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67380: LD_ADDR_OWVAR 28
67384: PUSH
67385: LD_INT 15
67387: ST_TO_ADDR
// hc_gallery :=  ;
67388: LD_ADDR_OWVAR 33
67392: PUSH
67393: LD_STRING 
67395: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67396: LD_ADDR_OWVAR 31
67400: PUSH
67401: LD_INT 0
67403: PPUSH
67404: LD_INT 3
67406: PPUSH
67407: CALL_OW 12
67411: PUSH
67412: LD_INT 0
67414: PPUSH
67415: LD_INT 3
67417: PPUSH
67418: CALL_OW 12
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: ST_TO_ADDR
// end ;
67435: LD_VAR 0 1
67439: RET
// export function PrepareApemanEngineer ( ) ; begin
67440: LD_INT 0
67442: PPUSH
// uc_nation := 0 ;
67443: LD_ADDR_OWVAR 21
67447: PUSH
67448: LD_INT 0
67450: ST_TO_ADDR
// hc_sex := sex_male ;
67451: LD_ADDR_OWVAR 27
67455: PUSH
67456: LD_INT 1
67458: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67459: LD_ADDR_OWVAR 28
67463: PUSH
67464: LD_INT 16
67466: ST_TO_ADDR
// hc_gallery :=  ;
67467: LD_ADDR_OWVAR 33
67471: PUSH
67472: LD_STRING 
67474: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67475: LD_ADDR_OWVAR 31
67479: PUSH
67480: LD_INT 0
67482: PPUSH
67483: LD_INT 3
67485: PPUSH
67486: CALL_OW 12
67490: PUSH
67491: LD_INT 0
67493: PPUSH
67494: LD_INT 3
67496: PPUSH
67497: CALL_OW 12
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: ST_TO_ADDR
// end ;
67514: LD_VAR 0 1
67518: RET
// export function PrepareApeman ( agressivity ) ; begin
67519: LD_INT 0
67521: PPUSH
// uc_side := 0 ;
67522: LD_ADDR_OWVAR 20
67526: PUSH
67527: LD_INT 0
67529: ST_TO_ADDR
// uc_nation := 0 ;
67530: LD_ADDR_OWVAR 21
67534: PUSH
67535: LD_INT 0
67537: ST_TO_ADDR
// hc_sex := sex_male ;
67538: LD_ADDR_OWVAR 27
67542: PUSH
67543: LD_INT 1
67545: ST_TO_ADDR
// hc_class := class_apeman ;
67546: LD_ADDR_OWVAR 28
67550: PUSH
67551: LD_INT 12
67553: ST_TO_ADDR
// hc_gallery :=  ;
67554: LD_ADDR_OWVAR 33
67558: PUSH
67559: LD_STRING 
67561: ST_TO_ADDR
// if agressivity = 0 then
67562: LD_VAR 0 1
67566: PUSH
67567: LD_INT 0
67569: EQUAL
67570: IFFALSE 67582
// hc_agressivity := 0 else
67572: LD_ADDR_OWVAR 35
67576: PUSH
67577: LD_INT 0
67579: ST_TO_ADDR
67580: GO 67603
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67582: LD_ADDR_OWVAR 35
67586: PUSH
67587: LD_VAR 0 1
67591: NEG
67592: PPUSH
67593: LD_VAR 0 1
67597: PPUSH
67598: CALL_OW 12
67602: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67603: LD_ADDR_OWVAR 31
67607: PUSH
67608: LD_INT 0
67610: PPUSH
67611: LD_INT 3
67613: PPUSH
67614: CALL_OW 12
67618: PUSH
67619: LD_INT 0
67621: PPUSH
67622: LD_INT 3
67624: PPUSH
67625: CALL_OW 12
67629: PUSH
67630: LD_INT 0
67632: PUSH
67633: LD_INT 0
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: ST_TO_ADDR
// end ;
67642: LD_VAR 0 2
67646: RET
// export function PrepareTiger ( agressivity ) ; begin
67647: LD_INT 0
67649: PPUSH
// uc_side := 0 ;
67650: LD_ADDR_OWVAR 20
67654: PUSH
67655: LD_INT 0
67657: ST_TO_ADDR
// uc_nation := 0 ;
67658: LD_ADDR_OWVAR 21
67662: PUSH
67663: LD_INT 0
67665: ST_TO_ADDR
// hc_class := class_tiger ;
67666: LD_ADDR_OWVAR 28
67670: PUSH
67671: LD_INT 14
67673: ST_TO_ADDR
// hc_gallery :=  ;
67674: LD_ADDR_OWVAR 33
67678: PUSH
67679: LD_STRING 
67681: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67682: LD_ADDR_OWVAR 35
67686: PUSH
67687: LD_VAR 0 1
67691: NEG
67692: PPUSH
67693: LD_VAR 0 1
67697: PPUSH
67698: CALL_OW 12
67702: ST_TO_ADDR
// end ;
67703: LD_VAR 0 2
67707: RET
// export function PrepareEnchidna ( ) ; begin
67708: LD_INT 0
67710: PPUSH
// uc_side := 0 ;
67711: LD_ADDR_OWVAR 20
67715: PUSH
67716: LD_INT 0
67718: ST_TO_ADDR
// uc_nation := 0 ;
67719: LD_ADDR_OWVAR 21
67723: PUSH
67724: LD_INT 0
67726: ST_TO_ADDR
// hc_class := class_baggie ;
67727: LD_ADDR_OWVAR 28
67731: PUSH
67732: LD_INT 13
67734: ST_TO_ADDR
// hc_gallery :=  ;
67735: LD_ADDR_OWVAR 33
67739: PUSH
67740: LD_STRING 
67742: ST_TO_ADDR
// end ;
67743: LD_VAR 0 1
67747: RET
// export function PrepareFrog ( ) ; begin
67748: LD_INT 0
67750: PPUSH
// uc_side := 0 ;
67751: LD_ADDR_OWVAR 20
67755: PUSH
67756: LD_INT 0
67758: ST_TO_ADDR
// uc_nation := 0 ;
67759: LD_ADDR_OWVAR 21
67763: PUSH
67764: LD_INT 0
67766: ST_TO_ADDR
// hc_class := class_frog ;
67767: LD_ADDR_OWVAR 28
67771: PUSH
67772: LD_INT 19
67774: ST_TO_ADDR
// hc_gallery :=  ;
67775: LD_ADDR_OWVAR 33
67779: PUSH
67780: LD_STRING 
67782: ST_TO_ADDR
// end ;
67783: LD_VAR 0 1
67787: RET
// export function PrepareFish ( ) ; begin
67788: LD_INT 0
67790: PPUSH
// uc_side := 0 ;
67791: LD_ADDR_OWVAR 20
67795: PUSH
67796: LD_INT 0
67798: ST_TO_ADDR
// uc_nation := 0 ;
67799: LD_ADDR_OWVAR 21
67803: PUSH
67804: LD_INT 0
67806: ST_TO_ADDR
// hc_class := class_fish ;
67807: LD_ADDR_OWVAR 28
67811: PUSH
67812: LD_INT 20
67814: ST_TO_ADDR
// hc_gallery :=  ;
67815: LD_ADDR_OWVAR 33
67819: PUSH
67820: LD_STRING 
67822: ST_TO_ADDR
// end ;
67823: LD_VAR 0 1
67827: RET
// export function PrepareBird ( ) ; begin
67828: LD_INT 0
67830: PPUSH
// uc_side := 0 ;
67831: LD_ADDR_OWVAR 20
67835: PUSH
67836: LD_INT 0
67838: ST_TO_ADDR
// uc_nation := 0 ;
67839: LD_ADDR_OWVAR 21
67843: PUSH
67844: LD_INT 0
67846: ST_TO_ADDR
// hc_class := class_phororhacos ;
67847: LD_ADDR_OWVAR 28
67851: PUSH
67852: LD_INT 18
67854: ST_TO_ADDR
// hc_gallery :=  ;
67855: LD_ADDR_OWVAR 33
67859: PUSH
67860: LD_STRING 
67862: ST_TO_ADDR
// end ;
67863: LD_VAR 0 1
67867: RET
// export function PrepareHorse ( ) ; begin
67868: LD_INT 0
67870: PPUSH
// uc_side := 0 ;
67871: LD_ADDR_OWVAR 20
67875: PUSH
67876: LD_INT 0
67878: ST_TO_ADDR
// uc_nation := 0 ;
67879: LD_ADDR_OWVAR 21
67883: PUSH
67884: LD_INT 0
67886: ST_TO_ADDR
// hc_class := class_horse ;
67887: LD_ADDR_OWVAR 28
67891: PUSH
67892: LD_INT 21
67894: ST_TO_ADDR
// hc_gallery :=  ;
67895: LD_ADDR_OWVAR 33
67899: PUSH
67900: LD_STRING 
67902: ST_TO_ADDR
// end ;
67903: LD_VAR 0 1
67907: RET
// export function PrepareMastodont ( ) ; begin
67908: LD_INT 0
67910: PPUSH
// uc_side := 0 ;
67911: LD_ADDR_OWVAR 20
67915: PUSH
67916: LD_INT 0
67918: ST_TO_ADDR
// uc_nation := 0 ;
67919: LD_ADDR_OWVAR 21
67923: PUSH
67924: LD_INT 0
67926: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67927: LD_ADDR_OWVAR 37
67931: PUSH
67932: LD_INT 31
67934: ST_TO_ADDR
// vc_control := control_rider ;
67935: LD_ADDR_OWVAR 38
67939: PUSH
67940: LD_INT 4
67942: ST_TO_ADDR
// end ;
67943: LD_VAR 0 1
67947: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67948: LD_INT 0
67950: PPUSH
67951: PPUSH
67952: PPUSH
// uc_side = 0 ;
67953: LD_ADDR_OWVAR 20
67957: PUSH
67958: LD_INT 0
67960: ST_TO_ADDR
// uc_nation = 0 ;
67961: LD_ADDR_OWVAR 21
67965: PUSH
67966: LD_INT 0
67968: ST_TO_ADDR
// InitHc_All ( ) ;
67969: CALL_OW 584
// InitVc ;
67973: CALL_OW 20
// if mastodonts then
67977: LD_VAR 0 6
67981: IFFALSE 68048
// for i = 1 to mastodonts do
67983: LD_ADDR_VAR 0 11
67987: PUSH
67988: DOUBLE
67989: LD_INT 1
67991: DEC
67992: ST_TO_ADDR
67993: LD_VAR 0 6
67997: PUSH
67998: FOR_TO
67999: IFFALSE 68046
// begin vc_chassis := 31 ;
68001: LD_ADDR_OWVAR 37
68005: PUSH
68006: LD_INT 31
68008: ST_TO_ADDR
// vc_control := control_rider ;
68009: LD_ADDR_OWVAR 38
68013: PUSH
68014: LD_INT 4
68016: ST_TO_ADDR
// animal := CreateVehicle ;
68017: LD_ADDR_VAR 0 12
68021: PUSH
68022: CALL_OW 45
68026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68027: LD_VAR 0 12
68031: PPUSH
68032: LD_VAR 0 8
68036: PPUSH
68037: LD_INT 0
68039: PPUSH
68040: CALL 70176 0 3
// end ;
68044: GO 67998
68046: POP
68047: POP
// if horses then
68048: LD_VAR 0 5
68052: IFFALSE 68119
// for i = 1 to horses do
68054: LD_ADDR_VAR 0 11
68058: PUSH
68059: DOUBLE
68060: LD_INT 1
68062: DEC
68063: ST_TO_ADDR
68064: LD_VAR 0 5
68068: PUSH
68069: FOR_TO
68070: IFFALSE 68117
// begin hc_class := 21 ;
68072: LD_ADDR_OWVAR 28
68076: PUSH
68077: LD_INT 21
68079: ST_TO_ADDR
// hc_gallery :=  ;
68080: LD_ADDR_OWVAR 33
68084: PUSH
68085: LD_STRING 
68087: ST_TO_ADDR
// animal := CreateHuman ;
68088: LD_ADDR_VAR 0 12
68092: PUSH
68093: CALL_OW 44
68097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68098: LD_VAR 0 12
68102: PPUSH
68103: LD_VAR 0 8
68107: PPUSH
68108: LD_INT 0
68110: PPUSH
68111: CALL 70176 0 3
// end ;
68115: GO 68069
68117: POP
68118: POP
// if birds then
68119: LD_VAR 0 1
68123: IFFALSE 68190
// for i = 1 to birds do
68125: LD_ADDR_VAR 0 11
68129: PUSH
68130: DOUBLE
68131: LD_INT 1
68133: DEC
68134: ST_TO_ADDR
68135: LD_VAR 0 1
68139: PUSH
68140: FOR_TO
68141: IFFALSE 68188
// begin hc_class := 18 ;
68143: LD_ADDR_OWVAR 28
68147: PUSH
68148: LD_INT 18
68150: ST_TO_ADDR
// hc_gallery =  ;
68151: LD_ADDR_OWVAR 33
68155: PUSH
68156: LD_STRING 
68158: ST_TO_ADDR
// animal := CreateHuman ;
68159: LD_ADDR_VAR 0 12
68163: PUSH
68164: CALL_OW 44
68168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68169: LD_VAR 0 12
68173: PPUSH
68174: LD_VAR 0 8
68178: PPUSH
68179: LD_INT 0
68181: PPUSH
68182: CALL 70176 0 3
// end ;
68186: GO 68140
68188: POP
68189: POP
// if tigers then
68190: LD_VAR 0 2
68194: IFFALSE 68278
// for i = 1 to tigers do
68196: LD_ADDR_VAR 0 11
68200: PUSH
68201: DOUBLE
68202: LD_INT 1
68204: DEC
68205: ST_TO_ADDR
68206: LD_VAR 0 2
68210: PUSH
68211: FOR_TO
68212: IFFALSE 68276
// begin hc_class = class_tiger ;
68214: LD_ADDR_OWVAR 28
68218: PUSH
68219: LD_INT 14
68221: ST_TO_ADDR
// hc_gallery =  ;
68222: LD_ADDR_OWVAR 33
68226: PUSH
68227: LD_STRING 
68229: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68230: LD_ADDR_OWVAR 35
68234: PUSH
68235: LD_INT 7
68237: NEG
68238: PPUSH
68239: LD_INT 7
68241: PPUSH
68242: CALL_OW 12
68246: ST_TO_ADDR
// animal := CreateHuman ;
68247: LD_ADDR_VAR 0 12
68251: PUSH
68252: CALL_OW 44
68256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68257: LD_VAR 0 12
68261: PPUSH
68262: LD_VAR 0 8
68266: PPUSH
68267: LD_INT 0
68269: PPUSH
68270: CALL 70176 0 3
// end ;
68274: GO 68211
68276: POP
68277: POP
// if apemans then
68278: LD_VAR 0 3
68282: IFFALSE 68405
// for i = 1 to apemans do
68284: LD_ADDR_VAR 0 11
68288: PUSH
68289: DOUBLE
68290: LD_INT 1
68292: DEC
68293: ST_TO_ADDR
68294: LD_VAR 0 3
68298: PUSH
68299: FOR_TO
68300: IFFALSE 68403
// begin hc_class = class_apeman ;
68302: LD_ADDR_OWVAR 28
68306: PUSH
68307: LD_INT 12
68309: ST_TO_ADDR
// hc_gallery =  ;
68310: LD_ADDR_OWVAR 33
68314: PUSH
68315: LD_STRING 
68317: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68318: LD_ADDR_OWVAR 35
68322: PUSH
68323: LD_INT 2
68325: NEG
68326: PPUSH
68327: LD_INT 2
68329: PPUSH
68330: CALL_OW 12
68334: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68335: LD_ADDR_OWVAR 31
68339: PUSH
68340: LD_INT 1
68342: PPUSH
68343: LD_INT 3
68345: PPUSH
68346: CALL_OW 12
68350: PUSH
68351: LD_INT 1
68353: PPUSH
68354: LD_INT 3
68356: PPUSH
68357: CALL_OW 12
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: LD_INT 0
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: ST_TO_ADDR
// animal := CreateHuman ;
68374: LD_ADDR_VAR 0 12
68378: PUSH
68379: CALL_OW 44
68383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68384: LD_VAR 0 12
68388: PPUSH
68389: LD_VAR 0 8
68393: PPUSH
68394: LD_INT 0
68396: PPUSH
68397: CALL 70176 0 3
// end ;
68401: GO 68299
68403: POP
68404: POP
// if enchidnas then
68405: LD_VAR 0 4
68409: IFFALSE 68476
// for i = 1 to enchidnas do
68411: LD_ADDR_VAR 0 11
68415: PUSH
68416: DOUBLE
68417: LD_INT 1
68419: DEC
68420: ST_TO_ADDR
68421: LD_VAR 0 4
68425: PUSH
68426: FOR_TO
68427: IFFALSE 68474
// begin hc_class = 13 ;
68429: LD_ADDR_OWVAR 28
68433: PUSH
68434: LD_INT 13
68436: ST_TO_ADDR
// hc_gallery =  ;
68437: LD_ADDR_OWVAR 33
68441: PUSH
68442: LD_STRING 
68444: ST_TO_ADDR
// animal := CreateHuman ;
68445: LD_ADDR_VAR 0 12
68449: PUSH
68450: CALL_OW 44
68454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68455: LD_VAR 0 12
68459: PPUSH
68460: LD_VAR 0 8
68464: PPUSH
68465: LD_INT 0
68467: PPUSH
68468: CALL 70176 0 3
// end ;
68472: GO 68426
68474: POP
68475: POP
// if fishes then
68476: LD_VAR 0 7
68480: IFFALSE 68547
// for i = 1 to fishes do
68482: LD_ADDR_VAR 0 11
68486: PUSH
68487: DOUBLE
68488: LD_INT 1
68490: DEC
68491: ST_TO_ADDR
68492: LD_VAR 0 7
68496: PUSH
68497: FOR_TO
68498: IFFALSE 68545
// begin hc_class = 20 ;
68500: LD_ADDR_OWVAR 28
68504: PUSH
68505: LD_INT 20
68507: ST_TO_ADDR
// hc_gallery =  ;
68508: LD_ADDR_OWVAR 33
68512: PUSH
68513: LD_STRING 
68515: ST_TO_ADDR
// animal := CreateHuman ;
68516: LD_ADDR_VAR 0 12
68520: PUSH
68521: CALL_OW 44
68525: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68526: LD_VAR 0 12
68530: PPUSH
68531: LD_VAR 0 9
68535: PPUSH
68536: LD_INT 0
68538: PPUSH
68539: CALL 70176 0 3
// end ;
68543: GO 68497
68545: POP
68546: POP
// end ;
68547: LD_VAR 0 10
68551: RET
// export function WantHeal ( sci , unit ) ; begin
68552: LD_INT 0
68554: PPUSH
// if GetTaskList ( sci ) > 0 then
68555: LD_VAR 0 1
68559: PPUSH
68560: CALL_OW 437
68564: PUSH
68565: LD_INT 0
68567: GREATER
68568: IFFALSE 68638
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68570: LD_VAR 0 1
68574: PPUSH
68575: CALL_OW 437
68579: PUSH
68580: LD_INT 1
68582: ARRAY
68583: PUSH
68584: LD_INT 1
68586: ARRAY
68587: PUSH
68588: LD_STRING l
68590: EQUAL
68591: PUSH
68592: LD_VAR 0 1
68596: PPUSH
68597: CALL_OW 437
68601: PUSH
68602: LD_INT 1
68604: ARRAY
68605: PUSH
68606: LD_INT 4
68608: ARRAY
68609: PUSH
68610: LD_VAR 0 2
68614: EQUAL
68615: AND
68616: IFFALSE 68628
// result := true else
68618: LD_ADDR_VAR 0 3
68622: PUSH
68623: LD_INT 1
68625: ST_TO_ADDR
68626: GO 68636
// result := false ;
68628: LD_ADDR_VAR 0 3
68632: PUSH
68633: LD_INT 0
68635: ST_TO_ADDR
// end else
68636: GO 68646
// result := false ;
68638: LD_ADDR_VAR 0 3
68642: PUSH
68643: LD_INT 0
68645: ST_TO_ADDR
// end ;
68646: LD_VAR 0 3
68650: RET
// export function HealTarget ( sci ) ; begin
68651: LD_INT 0
68653: PPUSH
// if not sci then
68654: LD_VAR 0 1
68658: NOT
68659: IFFALSE 68663
// exit ;
68661: GO 68728
// result := 0 ;
68663: LD_ADDR_VAR 0 2
68667: PUSH
68668: LD_INT 0
68670: ST_TO_ADDR
// if GetTaskList ( sci ) then
68671: LD_VAR 0 1
68675: PPUSH
68676: CALL_OW 437
68680: IFFALSE 68728
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68682: LD_VAR 0 1
68686: PPUSH
68687: CALL_OW 437
68691: PUSH
68692: LD_INT 1
68694: ARRAY
68695: PUSH
68696: LD_INT 1
68698: ARRAY
68699: PUSH
68700: LD_STRING l
68702: EQUAL
68703: IFFALSE 68728
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68705: LD_ADDR_VAR 0 2
68709: PUSH
68710: LD_VAR 0 1
68714: PPUSH
68715: CALL_OW 437
68719: PUSH
68720: LD_INT 1
68722: ARRAY
68723: PUSH
68724: LD_INT 4
68726: ARRAY
68727: ST_TO_ADDR
// end ;
68728: LD_VAR 0 2
68732: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68733: LD_INT 0
68735: PPUSH
68736: PPUSH
68737: PPUSH
68738: PPUSH
// if not base_units then
68739: LD_VAR 0 1
68743: NOT
68744: IFFALSE 68748
// exit ;
68746: GO 68835
// result := false ;
68748: LD_ADDR_VAR 0 2
68752: PUSH
68753: LD_INT 0
68755: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68756: LD_ADDR_VAR 0 5
68760: PUSH
68761: LD_VAR 0 1
68765: PPUSH
68766: LD_INT 21
68768: PUSH
68769: LD_INT 3
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PPUSH
68776: CALL_OW 72
68780: ST_TO_ADDR
// if not tmp then
68781: LD_VAR 0 5
68785: NOT
68786: IFFALSE 68790
// exit ;
68788: GO 68835
// for i in tmp do
68790: LD_ADDR_VAR 0 3
68794: PUSH
68795: LD_VAR 0 5
68799: PUSH
68800: FOR_IN
68801: IFFALSE 68833
// begin result := EnemyInRange ( i , 22 ) ;
68803: LD_ADDR_VAR 0 2
68807: PUSH
68808: LD_VAR 0 3
68812: PPUSH
68813: LD_INT 22
68815: PPUSH
68816: CALL 66413 0 2
68820: ST_TO_ADDR
// if result then
68821: LD_VAR 0 2
68825: IFFALSE 68831
// exit ;
68827: POP
68828: POP
68829: GO 68835
// end ;
68831: GO 68800
68833: POP
68834: POP
// end ;
68835: LD_VAR 0 2
68839: RET
// export function FilterByTag ( units , tag ) ; begin
68840: LD_INT 0
68842: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68843: LD_ADDR_VAR 0 3
68847: PUSH
68848: LD_VAR 0 1
68852: PPUSH
68853: LD_INT 120
68855: PUSH
68856: LD_VAR 0 2
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PPUSH
68865: CALL_OW 72
68869: ST_TO_ADDR
// end ;
68870: LD_VAR 0 3
68874: RET
// export function IsDriver ( un ) ; begin
68875: LD_INT 0
68877: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68878: LD_ADDR_VAR 0 2
68882: PUSH
68883: LD_VAR 0 1
68887: PUSH
68888: LD_INT 55
68890: PUSH
68891: EMPTY
68892: LIST
68893: PPUSH
68894: CALL_OW 69
68898: IN
68899: ST_TO_ADDR
// end ;
68900: LD_VAR 0 2
68904: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68905: LD_INT 0
68907: PPUSH
68908: PPUSH
// list := [ ] ;
68909: LD_ADDR_VAR 0 5
68913: PUSH
68914: EMPTY
68915: ST_TO_ADDR
// case d of 0 :
68916: LD_VAR 0 3
68920: PUSH
68921: LD_INT 0
68923: DOUBLE
68924: EQUAL
68925: IFTRUE 68929
68927: GO 69062
68929: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68930: LD_ADDR_VAR 0 5
68934: PUSH
68935: LD_VAR 0 1
68939: PUSH
68940: LD_INT 4
68942: MINUS
68943: PUSH
68944: LD_VAR 0 2
68948: PUSH
68949: LD_INT 4
68951: MINUS
68952: PUSH
68953: LD_INT 2
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: LIST
68960: PUSH
68961: LD_VAR 0 1
68965: PUSH
68966: LD_INT 3
68968: MINUS
68969: PUSH
68970: LD_VAR 0 2
68974: PUSH
68975: LD_INT 1
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: LIST
68982: PUSH
68983: LD_VAR 0 1
68987: PUSH
68988: LD_INT 4
68990: PLUS
68991: PUSH
68992: LD_VAR 0 2
68996: PUSH
68997: LD_INT 4
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: LIST
69004: PUSH
69005: LD_VAR 0 1
69009: PUSH
69010: LD_INT 3
69012: PLUS
69013: PUSH
69014: LD_VAR 0 2
69018: PUSH
69019: LD_INT 3
69021: PLUS
69022: PUSH
69023: LD_INT 5
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: LIST
69030: PUSH
69031: LD_VAR 0 1
69035: PUSH
69036: LD_VAR 0 2
69040: PUSH
69041: LD_INT 4
69043: PLUS
69044: PUSH
69045: LD_INT 0
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: LIST
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: ST_TO_ADDR
// end ; 1 :
69060: GO 69760
69062: LD_INT 1
69064: DOUBLE
69065: EQUAL
69066: IFTRUE 69070
69068: GO 69203
69070: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69071: LD_ADDR_VAR 0 5
69075: PUSH
69076: LD_VAR 0 1
69080: PUSH
69081: LD_VAR 0 2
69085: PUSH
69086: LD_INT 4
69088: MINUS
69089: PUSH
69090: LD_INT 3
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: LIST
69097: PUSH
69098: LD_VAR 0 1
69102: PUSH
69103: LD_INT 3
69105: MINUS
69106: PUSH
69107: LD_VAR 0 2
69111: PUSH
69112: LD_INT 3
69114: MINUS
69115: PUSH
69116: LD_INT 2
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: LIST
69123: PUSH
69124: LD_VAR 0 1
69128: PUSH
69129: LD_INT 4
69131: MINUS
69132: PUSH
69133: LD_VAR 0 2
69137: PUSH
69138: LD_INT 1
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: LIST
69145: PUSH
69146: LD_VAR 0 1
69150: PUSH
69151: LD_VAR 0 2
69155: PUSH
69156: LD_INT 3
69158: PLUS
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: LIST
69167: PUSH
69168: LD_VAR 0 1
69172: PUSH
69173: LD_INT 4
69175: PLUS
69176: PUSH
69177: LD_VAR 0 2
69181: PUSH
69182: LD_INT 4
69184: PLUS
69185: PUSH
69186: LD_INT 5
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: LIST
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: ST_TO_ADDR
// end ; 2 :
69201: GO 69760
69203: LD_INT 2
69205: DOUBLE
69206: EQUAL
69207: IFTRUE 69211
69209: GO 69340
69211: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69212: LD_ADDR_VAR 0 5
69216: PUSH
69217: LD_VAR 0 1
69221: PUSH
69222: LD_VAR 0 2
69226: PUSH
69227: LD_INT 3
69229: MINUS
69230: PUSH
69231: LD_INT 3
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: LIST
69238: PUSH
69239: LD_VAR 0 1
69243: PUSH
69244: LD_INT 4
69246: PLUS
69247: PUSH
69248: LD_VAR 0 2
69252: PUSH
69253: LD_INT 4
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: LIST
69260: PUSH
69261: LD_VAR 0 1
69265: PUSH
69266: LD_VAR 0 2
69270: PUSH
69271: LD_INT 4
69273: PLUS
69274: PUSH
69275: LD_INT 0
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: LIST
69282: PUSH
69283: LD_VAR 0 1
69287: PUSH
69288: LD_INT 3
69290: MINUS
69291: PUSH
69292: LD_VAR 0 2
69296: PUSH
69297: LD_INT 1
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: LIST
69304: PUSH
69305: LD_VAR 0 1
69309: PUSH
69310: LD_INT 4
69312: MINUS
69313: PUSH
69314: LD_VAR 0 2
69318: PUSH
69319: LD_INT 4
69321: MINUS
69322: PUSH
69323: LD_INT 2
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: LIST
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: ST_TO_ADDR
// end ; 3 :
69338: GO 69760
69340: LD_INT 3
69342: DOUBLE
69343: EQUAL
69344: IFTRUE 69348
69346: GO 69481
69348: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69349: LD_ADDR_VAR 0 5
69353: PUSH
69354: LD_VAR 0 1
69358: PUSH
69359: LD_INT 3
69361: PLUS
69362: PUSH
69363: LD_VAR 0 2
69367: PUSH
69368: LD_INT 4
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: LIST
69375: PUSH
69376: LD_VAR 0 1
69380: PUSH
69381: LD_INT 4
69383: PLUS
69384: PUSH
69385: LD_VAR 0 2
69389: PUSH
69390: LD_INT 4
69392: PLUS
69393: PUSH
69394: LD_INT 5
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: LIST
69401: PUSH
69402: LD_VAR 0 1
69406: PUSH
69407: LD_INT 4
69409: MINUS
69410: PUSH
69411: LD_VAR 0 2
69415: PUSH
69416: LD_INT 1
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: LIST
69423: PUSH
69424: LD_VAR 0 1
69428: PUSH
69429: LD_VAR 0 2
69433: PUSH
69434: LD_INT 4
69436: MINUS
69437: PUSH
69438: LD_INT 3
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: LIST
69445: PUSH
69446: LD_VAR 0 1
69450: PUSH
69451: LD_INT 3
69453: MINUS
69454: PUSH
69455: LD_VAR 0 2
69459: PUSH
69460: LD_INT 3
69462: MINUS
69463: PUSH
69464: LD_INT 2
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: LIST
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: ST_TO_ADDR
// end ; 4 :
69479: GO 69760
69481: LD_INT 4
69483: DOUBLE
69484: EQUAL
69485: IFTRUE 69489
69487: GO 69622
69489: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69490: LD_ADDR_VAR 0 5
69494: PUSH
69495: LD_VAR 0 1
69499: PUSH
69500: LD_VAR 0 2
69504: PUSH
69505: LD_INT 4
69507: PLUS
69508: PUSH
69509: LD_INT 0
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: LIST
69516: PUSH
69517: LD_VAR 0 1
69521: PUSH
69522: LD_INT 3
69524: PLUS
69525: PUSH
69526: LD_VAR 0 2
69530: PUSH
69531: LD_INT 3
69533: PLUS
69534: PUSH
69535: LD_INT 5
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: LIST
69542: PUSH
69543: LD_VAR 0 1
69547: PUSH
69548: LD_INT 4
69550: PLUS
69551: PUSH
69552: LD_VAR 0 2
69556: PUSH
69557: LD_INT 4
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: LIST
69564: PUSH
69565: LD_VAR 0 1
69569: PUSH
69570: LD_VAR 0 2
69574: PUSH
69575: LD_INT 3
69577: MINUS
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: LIST
69586: PUSH
69587: LD_VAR 0 1
69591: PUSH
69592: LD_INT 4
69594: MINUS
69595: PUSH
69596: LD_VAR 0 2
69600: PUSH
69601: LD_INT 4
69603: MINUS
69604: PUSH
69605: LD_INT 2
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: LIST
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: ST_TO_ADDR
// end ; 5 :
69620: GO 69760
69622: LD_INT 5
69624: DOUBLE
69625: EQUAL
69626: IFTRUE 69630
69628: GO 69759
69630: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69631: LD_ADDR_VAR 0 5
69635: PUSH
69636: LD_VAR 0 1
69640: PUSH
69641: LD_INT 4
69643: MINUS
69644: PUSH
69645: LD_VAR 0 2
69649: PUSH
69650: LD_INT 1
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: LIST
69657: PUSH
69658: LD_VAR 0 1
69662: PUSH
69663: LD_VAR 0 2
69667: PUSH
69668: LD_INT 4
69670: MINUS
69671: PUSH
69672: LD_INT 3
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: LIST
69679: PUSH
69680: LD_VAR 0 1
69684: PUSH
69685: LD_INT 4
69687: PLUS
69688: PUSH
69689: LD_VAR 0 2
69693: PUSH
69694: LD_INT 4
69696: PLUS
69697: PUSH
69698: LD_INT 5
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: LIST
69705: PUSH
69706: LD_VAR 0 1
69710: PUSH
69711: LD_INT 3
69713: PLUS
69714: PUSH
69715: LD_VAR 0 2
69719: PUSH
69720: LD_INT 4
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: LIST
69727: PUSH
69728: LD_VAR 0 1
69732: PUSH
69733: LD_VAR 0 2
69737: PUSH
69738: LD_INT 3
69740: PLUS
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: LIST
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: ST_TO_ADDR
// end ; end ;
69757: GO 69760
69759: POP
// result := list ;
69760: LD_ADDR_VAR 0 4
69764: PUSH
69765: LD_VAR 0 5
69769: ST_TO_ADDR
// end ;
69770: LD_VAR 0 4
69774: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69775: LD_INT 0
69777: PPUSH
69778: PPUSH
69779: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69780: LD_VAR 0 1
69784: NOT
69785: PUSH
69786: LD_VAR 0 2
69790: PUSH
69791: LD_INT 1
69793: PUSH
69794: LD_INT 2
69796: PUSH
69797: LD_INT 3
69799: PUSH
69800: LD_INT 4
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: IN
69809: NOT
69810: OR
69811: IFFALSE 69815
// exit ;
69813: GO 69898
// tmp := [ ] ;
69815: LD_ADDR_VAR 0 5
69819: PUSH
69820: EMPTY
69821: ST_TO_ADDR
// for i in units do
69822: LD_ADDR_VAR 0 4
69826: PUSH
69827: LD_VAR 0 1
69831: PUSH
69832: FOR_IN
69833: IFFALSE 69867
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69835: LD_ADDR_VAR 0 5
69839: PUSH
69840: LD_VAR 0 5
69844: PPUSH
69845: LD_VAR 0 4
69849: PPUSH
69850: LD_VAR 0 2
69854: PPUSH
69855: CALL_OW 259
69859: PPUSH
69860: CALL 71271 0 2
69864: ST_TO_ADDR
69865: GO 69832
69867: POP
69868: POP
// if not tmp then
69869: LD_VAR 0 5
69873: NOT
69874: IFFALSE 69878
// exit ;
69876: GO 69898
// result := SortListByListDesc ( units , tmp ) ;
69878: LD_ADDR_VAR 0 3
69882: PUSH
69883: LD_VAR 0 1
69887: PPUSH
69888: LD_VAR 0 5
69892: PPUSH
69893: CALL_OW 77
69897: ST_TO_ADDR
// end ;
69898: LD_VAR 0 3
69902: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69903: LD_INT 0
69905: PPUSH
69906: PPUSH
69907: PPUSH
// result := false ;
69908: LD_ADDR_VAR 0 3
69912: PUSH
69913: LD_INT 0
69915: ST_TO_ADDR
// if not building then
69916: LD_VAR 0 2
69920: NOT
69921: IFFALSE 69925
// exit ;
69923: GO 70063
// x := GetX ( building ) ;
69925: LD_ADDR_VAR 0 4
69929: PUSH
69930: LD_VAR 0 2
69934: PPUSH
69935: CALL_OW 250
69939: ST_TO_ADDR
// y := GetY ( building ) ;
69940: LD_ADDR_VAR 0 5
69944: PUSH
69945: LD_VAR 0 2
69949: PPUSH
69950: CALL_OW 251
69954: ST_TO_ADDR
// if not x or not y then
69955: LD_VAR 0 4
69959: NOT
69960: PUSH
69961: LD_VAR 0 5
69965: NOT
69966: OR
69967: IFFALSE 69971
// exit ;
69969: GO 70063
// if GetTaskList ( unit ) then
69971: LD_VAR 0 1
69975: PPUSH
69976: CALL_OW 437
69980: IFFALSE 70063
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69982: LD_STRING e
69984: PUSH
69985: LD_VAR 0 1
69989: PPUSH
69990: CALL_OW 437
69994: PUSH
69995: LD_INT 1
69997: ARRAY
69998: PUSH
69999: LD_INT 1
70001: ARRAY
70002: EQUAL
70003: PUSH
70004: LD_VAR 0 4
70008: PUSH
70009: LD_VAR 0 1
70013: PPUSH
70014: CALL_OW 437
70018: PUSH
70019: LD_INT 1
70021: ARRAY
70022: PUSH
70023: LD_INT 2
70025: ARRAY
70026: EQUAL
70027: AND
70028: PUSH
70029: LD_VAR 0 5
70033: PUSH
70034: LD_VAR 0 1
70038: PPUSH
70039: CALL_OW 437
70043: PUSH
70044: LD_INT 1
70046: ARRAY
70047: PUSH
70048: LD_INT 3
70050: ARRAY
70051: EQUAL
70052: AND
70053: IFFALSE 70063
// result := true end ;
70055: LD_ADDR_VAR 0 3
70059: PUSH
70060: LD_INT 1
70062: ST_TO_ADDR
// end ;
70063: LD_VAR 0 3
70067: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70068: LD_INT 0
70070: PPUSH
// result := false ;
70071: LD_ADDR_VAR 0 4
70075: PUSH
70076: LD_INT 0
70078: ST_TO_ADDR
// if GetTaskList ( unit ) then
70079: LD_VAR 0 1
70083: PPUSH
70084: CALL_OW 437
70088: IFFALSE 70171
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70090: LD_STRING M
70092: PUSH
70093: LD_VAR 0 1
70097: PPUSH
70098: CALL_OW 437
70102: PUSH
70103: LD_INT 1
70105: ARRAY
70106: PUSH
70107: LD_INT 1
70109: ARRAY
70110: EQUAL
70111: PUSH
70112: LD_VAR 0 2
70116: PUSH
70117: LD_VAR 0 1
70121: PPUSH
70122: CALL_OW 437
70126: PUSH
70127: LD_INT 1
70129: ARRAY
70130: PUSH
70131: LD_INT 2
70133: ARRAY
70134: EQUAL
70135: AND
70136: PUSH
70137: LD_VAR 0 3
70141: PUSH
70142: LD_VAR 0 1
70146: PPUSH
70147: CALL_OW 437
70151: PUSH
70152: LD_INT 1
70154: ARRAY
70155: PUSH
70156: LD_INT 3
70158: ARRAY
70159: EQUAL
70160: AND
70161: IFFALSE 70171
// result := true ;
70163: LD_ADDR_VAR 0 4
70167: PUSH
70168: LD_INT 1
70170: ST_TO_ADDR
// end ; end ;
70171: LD_VAR 0 4
70175: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70176: LD_INT 0
70178: PPUSH
70179: PPUSH
70180: PPUSH
70181: PPUSH
// if not unit or not area then
70182: LD_VAR 0 1
70186: NOT
70187: PUSH
70188: LD_VAR 0 2
70192: NOT
70193: OR
70194: IFFALSE 70198
// exit ;
70196: GO 70374
// tmp := AreaToList ( area , i ) ;
70198: LD_ADDR_VAR 0 6
70202: PUSH
70203: LD_VAR 0 2
70207: PPUSH
70208: LD_VAR 0 5
70212: PPUSH
70213: CALL_OW 517
70217: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70218: LD_ADDR_VAR 0 5
70222: PUSH
70223: DOUBLE
70224: LD_INT 1
70226: DEC
70227: ST_TO_ADDR
70228: LD_VAR 0 6
70232: PUSH
70233: LD_INT 1
70235: ARRAY
70236: PUSH
70237: FOR_TO
70238: IFFALSE 70372
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70240: LD_ADDR_VAR 0 7
70244: PUSH
70245: LD_VAR 0 6
70249: PUSH
70250: LD_INT 1
70252: ARRAY
70253: PUSH
70254: LD_VAR 0 5
70258: ARRAY
70259: PUSH
70260: LD_VAR 0 6
70264: PUSH
70265: LD_INT 2
70267: ARRAY
70268: PUSH
70269: LD_VAR 0 5
70273: ARRAY
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70279: LD_INT 92
70281: PUSH
70282: LD_VAR 0 7
70286: PUSH
70287: LD_INT 1
70289: ARRAY
70290: PUSH
70291: LD_VAR 0 7
70295: PUSH
70296: LD_INT 2
70298: ARRAY
70299: PUSH
70300: LD_INT 2
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: PPUSH
70309: CALL_OW 69
70313: PUSH
70314: LD_INT 0
70316: EQUAL
70317: IFFALSE 70370
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70319: LD_VAR 0 1
70323: PPUSH
70324: LD_VAR 0 7
70328: PUSH
70329: LD_INT 1
70331: ARRAY
70332: PPUSH
70333: LD_VAR 0 7
70337: PUSH
70338: LD_INT 2
70340: ARRAY
70341: PPUSH
70342: LD_VAR 0 3
70346: PPUSH
70347: CALL_OW 48
// result := IsPlaced ( unit ) ;
70351: LD_ADDR_VAR 0 4
70355: PUSH
70356: LD_VAR 0 1
70360: PPUSH
70361: CALL_OW 305
70365: ST_TO_ADDR
// exit ;
70366: POP
70367: POP
70368: GO 70374
// end ; end ;
70370: GO 70237
70372: POP
70373: POP
// end ;
70374: LD_VAR 0 4
70378: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70379: LD_INT 0
70381: PPUSH
70382: PPUSH
70383: PPUSH
// if not side or side > 8 then
70384: LD_VAR 0 1
70388: NOT
70389: PUSH
70390: LD_VAR 0 1
70394: PUSH
70395: LD_INT 8
70397: GREATER
70398: OR
70399: IFFALSE 70403
// exit ;
70401: GO 70590
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70403: LD_ADDR_VAR 0 4
70407: PUSH
70408: LD_INT 22
70410: PUSH
70411: LD_VAR 0 1
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 21
70422: PUSH
70423: LD_INT 3
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PPUSH
70434: CALL_OW 69
70438: ST_TO_ADDR
// if not tmp then
70439: LD_VAR 0 4
70443: NOT
70444: IFFALSE 70448
// exit ;
70446: GO 70590
// enable_addtolog := true ;
70448: LD_ADDR_OWVAR 81
70452: PUSH
70453: LD_INT 1
70455: ST_TO_ADDR
// AddToLog ( [ ) ;
70456: LD_STRING [
70458: PPUSH
70459: CALL_OW 561
// for i in tmp do
70463: LD_ADDR_VAR 0 3
70467: PUSH
70468: LD_VAR 0 4
70472: PUSH
70473: FOR_IN
70474: IFFALSE 70581
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70476: LD_STRING [
70478: PUSH
70479: LD_VAR 0 3
70483: PPUSH
70484: CALL_OW 266
70488: STR
70489: PUSH
70490: LD_STRING , 
70492: STR
70493: PUSH
70494: LD_VAR 0 3
70498: PPUSH
70499: CALL_OW 250
70503: STR
70504: PUSH
70505: LD_STRING , 
70507: STR
70508: PUSH
70509: LD_VAR 0 3
70513: PPUSH
70514: CALL_OW 251
70518: STR
70519: PUSH
70520: LD_STRING , 
70522: STR
70523: PUSH
70524: LD_VAR 0 3
70528: PPUSH
70529: CALL_OW 254
70533: STR
70534: PUSH
70535: LD_STRING , 
70537: STR
70538: PUSH
70539: LD_VAR 0 3
70543: PPUSH
70544: LD_INT 1
70546: PPUSH
70547: CALL_OW 268
70551: STR
70552: PUSH
70553: LD_STRING , 
70555: STR
70556: PUSH
70557: LD_VAR 0 3
70561: PPUSH
70562: LD_INT 2
70564: PPUSH
70565: CALL_OW 268
70569: STR
70570: PUSH
70571: LD_STRING ],
70573: STR
70574: PPUSH
70575: CALL_OW 561
// end ;
70579: GO 70473
70581: POP
70582: POP
// AddToLog ( ]; ) ;
70583: LD_STRING ];
70585: PPUSH
70586: CALL_OW 561
// end ;
70590: LD_VAR 0 2
70594: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70595: LD_INT 0
70597: PPUSH
70598: PPUSH
70599: PPUSH
70600: PPUSH
70601: PPUSH
// if not area or not rate or not max then
70602: LD_VAR 0 1
70606: NOT
70607: PUSH
70608: LD_VAR 0 2
70612: NOT
70613: OR
70614: PUSH
70615: LD_VAR 0 4
70619: NOT
70620: OR
70621: IFFALSE 70625
// exit ;
70623: GO 70814
// while 1 do
70625: LD_INT 1
70627: IFFALSE 70814
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70629: LD_ADDR_VAR 0 9
70633: PUSH
70634: LD_VAR 0 1
70638: PPUSH
70639: LD_INT 1
70641: PPUSH
70642: CALL_OW 287
70646: PUSH
70647: LD_INT 10
70649: MUL
70650: ST_TO_ADDR
// r := rate / 10 ;
70651: LD_ADDR_VAR 0 7
70655: PUSH
70656: LD_VAR 0 2
70660: PUSH
70661: LD_INT 10
70663: DIVREAL
70664: ST_TO_ADDR
// time := 1 1$00 ;
70665: LD_ADDR_VAR 0 8
70669: PUSH
70670: LD_INT 2100
70672: ST_TO_ADDR
// if amount < min then
70673: LD_VAR 0 9
70677: PUSH
70678: LD_VAR 0 3
70682: LESS
70683: IFFALSE 70701
// r := r * 2 else
70685: LD_ADDR_VAR 0 7
70689: PUSH
70690: LD_VAR 0 7
70694: PUSH
70695: LD_INT 2
70697: MUL
70698: ST_TO_ADDR
70699: GO 70727
// if amount > max then
70701: LD_VAR 0 9
70705: PUSH
70706: LD_VAR 0 4
70710: GREATER
70711: IFFALSE 70727
// r := r / 2 ;
70713: LD_ADDR_VAR 0 7
70717: PUSH
70718: LD_VAR 0 7
70722: PUSH
70723: LD_INT 2
70725: DIVREAL
70726: ST_TO_ADDR
// time := time / r ;
70727: LD_ADDR_VAR 0 8
70731: PUSH
70732: LD_VAR 0 8
70736: PUSH
70737: LD_VAR 0 7
70741: DIVREAL
70742: ST_TO_ADDR
// if time < 0 then
70743: LD_VAR 0 8
70747: PUSH
70748: LD_INT 0
70750: LESS
70751: IFFALSE 70768
// time := time * - 1 ;
70753: LD_ADDR_VAR 0 8
70757: PUSH
70758: LD_VAR 0 8
70762: PUSH
70763: LD_INT 1
70765: NEG
70766: MUL
70767: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70768: LD_VAR 0 8
70772: PUSH
70773: LD_INT 35
70775: PPUSH
70776: LD_INT 875
70778: PPUSH
70779: CALL_OW 12
70783: PLUS
70784: PPUSH
70785: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70789: LD_INT 1
70791: PPUSH
70792: LD_INT 5
70794: PPUSH
70795: CALL_OW 12
70799: PPUSH
70800: LD_VAR 0 1
70804: PPUSH
70805: LD_INT 1
70807: PPUSH
70808: CALL_OW 55
// end ;
70812: GO 70625
// end ;
70814: LD_VAR 0 5
70818: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70819: LD_INT 0
70821: PPUSH
70822: PPUSH
70823: PPUSH
70824: PPUSH
70825: PPUSH
70826: PPUSH
70827: PPUSH
70828: PPUSH
// if not turrets or not factories then
70829: LD_VAR 0 1
70833: NOT
70834: PUSH
70835: LD_VAR 0 2
70839: NOT
70840: OR
70841: IFFALSE 70845
// exit ;
70843: GO 71152
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70845: LD_ADDR_VAR 0 10
70849: PUSH
70850: LD_INT 5
70852: PUSH
70853: LD_INT 6
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 2
70862: PUSH
70863: LD_INT 4
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 3
70872: PUSH
70873: LD_INT 5
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 24
70887: PUSH
70888: LD_INT 25
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 23
70897: PUSH
70898: LD_INT 27
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 42
70911: PUSH
70912: LD_INT 43
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 44
70921: PUSH
70922: LD_INT 46
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 45
70931: PUSH
70932: LD_INT 47
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: LIST
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: LIST
70948: ST_TO_ADDR
// result := [ ] ;
70949: LD_ADDR_VAR 0 3
70953: PUSH
70954: EMPTY
70955: ST_TO_ADDR
// for i in turrets do
70956: LD_ADDR_VAR 0 4
70960: PUSH
70961: LD_VAR 0 1
70965: PUSH
70966: FOR_IN
70967: IFFALSE 71150
// begin nat := GetNation ( i ) ;
70969: LD_ADDR_VAR 0 7
70973: PUSH
70974: LD_VAR 0 4
70978: PPUSH
70979: CALL_OW 248
70983: ST_TO_ADDR
// weapon := 0 ;
70984: LD_ADDR_VAR 0 8
70988: PUSH
70989: LD_INT 0
70991: ST_TO_ADDR
// if not nat then
70992: LD_VAR 0 7
70996: NOT
70997: IFFALSE 71001
// continue ;
70999: GO 70966
// for j in list [ nat ] do
71001: LD_ADDR_VAR 0 5
71005: PUSH
71006: LD_VAR 0 10
71010: PUSH
71011: LD_VAR 0 7
71015: ARRAY
71016: PUSH
71017: FOR_IN
71018: IFFALSE 71059
// if GetBWeapon ( i ) = j [ 1 ] then
71020: LD_VAR 0 4
71024: PPUSH
71025: CALL_OW 269
71029: PUSH
71030: LD_VAR 0 5
71034: PUSH
71035: LD_INT 1
71037: ARRAY
71038: EQUAL
71039: IFFALSE 71057
// begin weapon := j [ 2 ] ;
71041: LD_ADDR_VAR 0 8
71045: PUSH
71046: LD_VAR 0 5
71050: PUSH
71051: LD_INT 2
71053: ARRAY
71054: ST_TO_ADDR
// break ;
71055: GO 71059
// end ;
71057: GO 71017
71059: POP
71060: POP
// if not weapon then
71061: LD_VAR 0 8
71065: NOT
71066: IFFALSE 71070
// continue ;
71068: GO 70966
// for k in factories do
71070: LD_ADDR_VAR 0 6
71074: PUSH
71075: LD_VAR 0 2
71079: PUSH
71080: FOR_IN
71081: IFFALSE 71146
// begin weapons := AvailableWeaponList ( k ) ;
71083: LD_ADDR_VAR 0 9
71087: PUSH
71088: LD_VAR 0 6
71092: PPUSH
71093: CALL_OW 478
71097: ST_TO_ADDR
// if not weapons then
71098: LD_VAR 0 9
71102: NOT
71103: IFFALSE 71107
// continue ;
71105: GO 71080
// if weapon in weapons then
71107: LD_VAR 0 8
71111: PUSH
71112: LD_VAR 0 9
71116: IN
71117: IFFALSE 71144
// begin result := [ i , weapon ] ;
71119: LD_ADDR_VAR 0 3
71123: PUSH
71124: LD_VAR 0 4
71128: PUSH
71129: LD_VAR 0 8
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: ST_TO_ADDR
// exit ;
71138: POP
71139: POP
71140: POP
71141: POP
71142: GO 71152
// end ; end ;
71144: GO 71080
71146: POP
71147: POP
// end ;
71148: GO 70966
71150: POP
71151: POP
// end ;
71152: LD_VAR 0 3
71156: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71157: LD_INT 0
71159: PPUSH
// if not side or side > 8 then
71160: LD_VAR 0 3
71164: NOT
71165: PUSH
71166: LD_VAR 0 3
71170: PUSH
71171: LD_INT 8
71173: GREATER
71174: OR
71175: IFFALSE 71179
// exit ;
71177: GO 71238
// if not range then
71179: LD_VAR 0 4
71183: NOT
71184: IFFALSE 71195
// range := - 12 ;
71186: LD_ADDR_VAR 0 4
71190: PUSH
71191: LD_INT 12
71193: NEG
71194: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71195: LD_VAR 0 1
71199: PPUSH
71200: LD_VAR 0 2
71204: PPUSH
71205: LD_VAR 0 3
71209: PPUSH
71210: LD_VAR 0 4
71214: PPUSH
71215: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71219: LD_VAR 0 1
71223: PPUSH
71224: LD_VAR 0 2
71228: PPUSH
71229: LD_VAR 0 3
71233: PPUSH
71234: CALL_OW 331
// end ;
71238: LD_VAR 0 5
71242: RET
// export function Video ( mode ) ; begin
71243: LD_INT 0
71245: PPUSH
// ingame_video = mode ;
71246: LD_ADDR_OWVAR 52
71250: PUSH
71251: LD_VAR 0 1
71255: ST_TO_ADDR
// interface_hidden = mode ;
71256: LD_ADDR_OWVAR 54
71260: PUSH
71261: LD_VAR 0 1
71265: ST_TO_ADDR
// end ;
71266: LD_VAR 0 2
71270: RET
// export function Join ( array , element ) ; begin
71271: LD_INT 0
71273: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71274: LD_ADDR_VAR 0 3
71278: PUSH
71279: LD_VAR 0 1
71283: PPUSH
71284: LD_VAR 0 1
71288: PUSH
71289: LD_INT 1
71291: PLUS
71292: PPUSH
71293: LD_VAR 0 2
71297: PPUSH
71298: CALL_OW 1
71302: ST_TO_ADDR
// end ;
71303: LD_VAR 0 3
71307: RET
// export function JoinUnion ( array , element ) ; begin
71308: LD_INT 0
71310: PPUSH
// result := array union element ;
71311: LD_ADDR_VAR 0 3
71315: PUSH
71316: LD_VAR 0 1
71320: PUSH
71321: LD_VAR 0 2
71325: UNION
71326: ST_TO_ADDR
// end ;
71327: LD_VAR 0 3
71331: RET
// export function GetBehemoths ( side ) ; begin
71332: LD_INT 0
71334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71335: LD_ADDR_VAR 0 2
71339: PUSH
71340: LD_INT 22
71342: PUSH
71343: LD_VAR 0 1
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 31
71354: PUSH
71355: LD_INT 25
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PPUSH
71366: CALL_OW 69
71370: ST_TO_ADDR
// end ;
71371: LD_VAR 0 2
71375: RET
// export function Shuffle ( array ) ; var i , index ; begin
71376: LD_INT 0
71378: PPUSH
71379: PPUSH
71380: PPUSH
// result := [ ] ;
71381: LD_ADDR_VAR 0 2
71385: PUSH
71386: EMPTY
71387: ST_TO_ADDR
// if not array then
71388: LD_VAR 0 1
71392: NOT
71393: IFFALSE 71397
// exit ;
71395: GO 71496
// Randomize ;
71397: CALL_OW 10
// for i = array downto 1 do
71401: LD_ADDR_VAR 0 3
71405: PUSH
71406: DOUBLE
71407: LD_VAR 0 1
71411: INC
71412: ST_TO_ADDR
71413: LD_INT 1
71415: PUSH
71416: FOR_DOWNTO
71417: IFFALSE 71494
// begin index := rand ( 1 , array ) ;
71419: LD_ADDR_VAR 0 4
71423: PUSH
71424: LD_INT 1
71426: PPUSH
71427: LD_VAR 0 1
71431: PPUSH
71432: CALL_OW 12
71436: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71437: LD_ADDR_VAR 0 2
71441: PUSH
71442: LD_VAR 0 2
71446: PPUSH
71447: LD_VAR 0 2
71451: PUSH
71452: LD_INT 1
71454: PLUS
71455: PPUSH
71456: LD_VAR 0 1
71460: PUSH
71461: LD_VAR 0 4
71465: ARRAY
71466: PPUSH
71467: CALL_OW 2
71471: ST_TO_ADDR
// array := Delete ( array , index ) ;
71472: LD_ADDR_VAR 0 1
71476: PUSH
71477: LD_VAR 0 1
71481: PPUSH
71482: LD_VAR 0 4
71486: PPUSH
71487: CALL_OW 3
71491: ST_TO_ADDR
// end ;
71492: GO 71416
71494: POP
71495: POP
// end ;
71496: LD_VAR 0 2
71500: RET
// export function GetBaseMaterials ( base ) ; begin
71501: LD_INT 0
71503: PPUSH
// result := [ 0 , 0 , 0 ] ;
71504: LD_ADDR_VAR 0 2
71508: PUSH
71509: LD_INT 0
71511: PUSH
71512: LD_INT 0
71514: PUSH
71515: LD_INT 0
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: LIST
71522: ST_TO_ADDR
// if not base then
71523: LD_VAR 0 1
71527: NOT
71528: IFFALSE 71532
// exit ;
71530: GO 71581
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71532: LD_ADDR_VAR 0 2
71536: PUSH
71537: LD_VAR 0 1
71541: PPUSH
71542: LD_INT 1
71544: PPUSH
71545: CALL_OW 275
71549: PUSH
71550: LD_VAR 0 1
71554: PPUSH
71555: LD_INT 2
71557: PPUSH
71558: CALL_OW 275
71562: PUSH
71563: LD_VAR 0 1
71567: PPUSH
71568: LD_INT 3
71570: PPUSH
71571: CALL_OW 275
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: LIST
71580: ST_TO_ADDR
// end ;
71581: LD_VAR 0 2
71585: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71586: LD_INT 0
71588: PPUSH
71589: PPUSH
// result := array ;
71590: LD_ADDR_VAR 0 3
71594: PUSH
71595: LD_VAR 0 1
71599: ST_TO_ADDR
// if size >= result then
71600: LD_VAR 0 2
71604: PUSH
71605: LD_VAR 0 3
71609: GREATEREQUAL
71610: IFFALSE 71614
// exit ;
71612: GO 71664
// if size then
71614: LD_VAR 0 2
71618: IFFALSE 71664
// for i := array downto size do
71620: LD_ADDR_VAR 0 4
71624: PUSH
71625: DOUBLE
71626: LD_VAR 0 1
71630: INC
71631: ST_TO_ADDR
71632: LD_VAR 0 2
71636: PUSH
71637: FOR_DOWNTO
71638: IFFALSE 71662
// result := Delete ( result , result ) ;
71640: LD_ADDR_VAR 0 3
71644: PUSH
71645: LD_VAR 0 3
71649: PPUSH
71650: LD_VAR 0 3
71654: PPUSH
71655: CALL_OW 3
71659: ST_TO_ADDR
71660: GO 71637
71662: POP
71663: POP
// end ;
71664: LD_VAR 0 3
71668: RET
// export function ComExit ( unit ) ; var tmp ; begin
71669: LD_INT 0
71671: PPUSH
71672: PPUSH
// if not IsInUnit ( unit ) then
71673: LD_VAR 0 1
71677: PPUSH
71678: CALL_OW 310
71682: NOT
71683: IFFALSE 71687
// exit ;
71685: GO 71747
// tmp := IsInUnit ( unit ) ;
71687: LD_ADDR_VAR 0 3
71691: PUSH
71692: LD_VAR 0 1
71696: PPUSH
71697: CALL_OW 310
71701: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71702: LD_VAR 0 3
71706: PPUSH
71707: CALL_OW 247
71711: PUSH
71712: LD_INT 2
71714: EQUAL
71715: IFFALSE 71728
// ComExitVehicle ( unit ) else
71717: LD_VAR 0 1
71721: PPUSH
71722: CALL_OW 121
71726: GO 71737
// ComExitBuilding ( unit ) ;
71728: LD_VAR 0 1
71732: PPUSH
71733: CALL_OW 122
// result := tmp ;
71737: LD_ADDR_VAR 0 2
71741: PUSH
71742: LD_VAR 0 3
71746: ST_TO_ADDR
// end ;
71747: LD_VAR 0 2
71751: RET
// export function ComExitAll ( units ) ; var i ; begin
71752: LD_INT 0
71754: PPUSH
71755: PPUSH
// if not units then
71756: LD_VAR 0 1
71760: NOT
71761: IFFALSE 71765
// exit ;
71763: GO 71791
// for i in units do
71765: LD_ADDR_VAR 0 3
71769: PUSH
71770: LD_VAR 0 1
71774: PUSH
71775: FOR_IN
71776: IFFALSE 71789
// ComExit ( i ) ;
71778: LD_VAR 0 3
71782: PPUSH
71783: CALL 71669 0 1
71787: GO 71775
71789: POP
71790: POP
// end ;
71791: LD_VAR 0 2
71795: RET
// export function ResetHc ; begin
71796: LD_INT 0
71798: PPUSH
// InitHc ;
71799: CALL_OW 19
// hc_importance := 0 ;
71803: LD_ADDR_OWVAR 32
71807: PUSH
71808: LD_INT 0
71810: ST_TO_ADDR
// end ;
71811: LD_VAR 0 1
71815: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71816: LD_INT 0
71818: PPUSH
71819: PPUSH
71820: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71821: LD_ADDR_VAR 0 6
71825: PUSH
71826: LD_VAR 0 1
71830: PUSH
71831: LD_VAR 0 3
71835: PLUS
71836: PUSH
71837: LD_INT 2
71839: DIV
71840: ST_TO_ADDR
// if _x < 0 then
71841: LD_VAR 0 6
71845: PUSH
71846: LD_INT 0
71848: LESS
71849: IFFALSE 71866
// _x := _x * - 1 ;
71851: LD_ADDR_VAR 0 6
71855: PUSH
71856: LD_VAR 0 6
71860: PUSH
71861: LD_INT 1
71863: NEG
71864: MUL
71865: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71866: LD_ADDR_VAR 0 7
71870: PUSH
71871: LD_VAR 0 2
71875: PUSH
71876: LD_VAR 0 4
71880: PLUS
71881: PUSH
71882: LD_INT 2
71884: DIV
71885: ST_TO_ADDR
// if _y < 0 then
71886: LD_VAR 0 7
71890: PUSH
71891: LD_INT 0
71893: LESS
71894: IFFALSE 71911
// _y := _y * - 1 ;
71896: LD_ADDR_VAR 0 7
71900: PUSH
71901: LD_VAR 0 7
71905: PUSH
71906: LD_INT 1
71908: NEG
71909: MUL
71910: ST_TO_ADDR
// result := [ _x , _y ] ;
71911: LD_ADDR_VAR 0 5
71915: PUSH
71916: LD_VAR 0 6
71920: PUSH
71921: LD_VAR 0 7
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: ST_TO_ADDR
// end ;
71930: LD_VAR 0 5
71934: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71935: LD_INT 0
71937: PPUSH
71938: PPUSH
71939: PPUSH
71940: PPUSH
// task := GetTaskList ( unit ) ;
71941: LD_ADDR_VAR 0 7
71945: PUSH
71946: LD_VAR 0 1
71950: PPUSH
71951: CALL_OW 437
71955: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71956: LD_VAR 0 7
71960: NOT
71961: PUSH
71962: LD_VAR 0 1
71966: PPUSH
71967: LD_VAR 0 2
71971: PPUSH
71972: CALL_OW 308
71976: NOT
71977: AND
71978: IFFALSE 71982
// exit ;
71980: GO 72100
// if IsInArea ( unit , area ) then
71982: LD_VAR 0 1
71986: PPUSH
71987: LD_VAR 0 2
71991: PPUSH
71992: CALL_OW 308
71996: IFFALSE 72014
// begin ComMoveToArea ( unit , goAway ) ;
71998: LD_VAR 0 1
72002: PPUSH
72003: LD_VAR 0 3
72007: PPUSH
72008: CALL_OW 113
// exit ;
72012: GO 72100
// end ; if task [ 1 ] [ 1 ] <> M then
72014: LD_VAR 0 7
72018: PUSH
72019: LD_INT 1
72021: ARRAY
72022: PUSH
72023: LD_INT 1
72025: ARRAY
72026: PUSH
72027: LD_STRING M
72029: NONEQUAL
72030: IFFALSE 72034
// exit ;
72032: GO 72100
// x := task [ 1 ] [ 2 ] ;
72034: LD_ADDR_VAR 0 5
72038: PUSH
72039: LD_VAR 0 7
72043: PUSH
72044: LD_INT 1
72046: ARRAY
72047: PUSH
72048: LD_INT 2
72050: ARRAY
72051: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72052: LD_ADDR_VAR 0 6
72056: PUSH
72057: LD_VAR 0 7
72061: PUSH
72062: LD_INT 1
72064: ARRAY
72065: PUSH
72066: LD_INT 3
72068: ARRAY
72069: ST_TO_ADDR
// if InArea ( x , y , area ) then
72070: LD_VAR 0 5
72074: PPUSH
72075: LD_VAR 0 6
72079: PPUSH
72080: LD_VAR 0 2
72084: PPUSH
72085: CALL_OW 309
72089: IFFALSE 72100
// ComStop ( unit ) ;
72091: LD_VAR 0 1
72095: PPUSH
72096: CALL_OW 141
// end ;
72100: LD_VAR 0 4
72104: RET
// export function Abs ( value ) ; begin
72105: LD_INT 0
72107: PPUSH
// result := value ;
72108: LD_ADDR_VAR 0 2
72112: PUSH
72113: LD_VAR 0 1
72117: ST_TO_ADDR
// if value < 0 then
72118: LD_VAR 0 1
72122: PUSH
72123: LD_INT 0
72125: LESS
72126: IFFALSE 72143
// result := value * - 1 ;
72128: LD_ADDR_VAR 0 2
72132: PUSH
72133: LD_VAR 0 1
72137: PUSH
72138: LD_INT 1
72140: NEG
72141: MUL
72142: ST_TO_ADDR
// end ;
72143: LD_VAR 0 2
72147: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72148: LD_INT 0
72150: PPUSH
72151: PPUSH
72152: PPUSH
72153: PPUSH
72154: PPUSH
72155: PPUSH
72156: PPUSH
72157: PPUSH
// if not unit or not building then
72158: LD_VAR 0 1
72162: NOT
72163: PUSH
72164: LD_VAR 0 2
72168: NOT
72169: OR
72170: IFFALSE 72174
// exit ;
72172: GO 72400
// x := GetX ( building ) ;
72174: LD_ADDR_VAR 0 4
72178: PUSH
72179: LD_VAR 0 2
72183: PPUSH
72184: CALL_OW 250
72188: ST_TO_ADDR
// y := GetY ( building ) ;
72189: LD_ADDR_VAR 0 6
72193: PUSH
72194: LD_VAR 0 2
72198: PPUSH
72199: CALL_OW 251
72203: ST_TO_ADDR
// d := GetDir ( building ) ;
72204: LD_ADDR_VAR 0 8
72208: PUSH
72209: LD_VAR 0 2
72213: PPUSH
72214: CALL_OW 254
72218: ST_TO_ADDR
// r := 4 ;
72219: LD_ADDR_VAR 0 9
72223: PUSH
72224: LD_INT 4
72226: ST_TO_ADDR
// for i := 1 to 5 do
72227: LD_ADDR_VAR 0 10
72231: PUSH
72232: DOUBLE
72233: LD_INT 1
72235: DEC
72236: ST_TO_ADDR
72237: LD_INT 5
72239: PUSH
72240: FOR_TO
72241: IFFALSE 72398
// begin _x := ShiftX ( x , d , r + i ) ;
72243: LD_ADDR_VAR 0 5
72247: PUSH
72248: LD_VAR 0 4
72252: PPUSH
72253: LD_VAR 0 8
72257: PPUSH
72258: LD_VAR 0 9
72262: PUSH
72263: LD_VAR 0 10
72267: PLUS
72268: PPUSH
72269: CALL_OW 272
72273: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72274: LD_ADDR_VAR 0 7
72278: PUSH
72279: LD_VAR 0 6
72283: PPUSH
72284: LD_VAR 0 8
72288: PPUSH
72289: LD_VAR 0 9
72293: PUSH
72294: LD_VAR 0 10
72298: PLUS
72299: PPUSH
72300: CALL_OW 273
72304: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72305: LD_VAR 0 5
72309: PPUSH
72310: LD_VAR 0 7
72314: PPUSH
72315: CALL_OW 488
72319: PUSH
72320: LD_VAR 0 5
72324: PPUSH
72325: LD_VAR 0 7
72329: PPUSH
72330: CALL_OW 428
72334: PPUSH
72335: CALL_OW 247
72339: PUSH
72340: LD_INT 3
72342: PUSH
72343: LD_INT 2
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: IN
72350: NOT
72351: AND
72352: IFFALSE 72396
// begin ComMoveXY ( unit , _x , _y ) ;
72354: LD_VAR 0 1
72358: PPUSH
72359: LD_VAR 0 5
72363: PPUSH
72364: LD_VAR 0 7
72368: PPUSH
72369: CALL_OW 111
// result := [ _x , _y ] ;
72373: LD_ADDR_VAR 0 3
72377: PUSH
72378: LD_VAR 0 5
72382: PUSH
72383: LD_VAR 0 7
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: ST_TO_ADDR
// exit ;
72392: POP
72393: POP
72394: GO 72400
// end ; end ;
72396: GO 72240
72398: POP
72399: POP
// end ;
72400: LD_VAR 0 3
72404: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72405: LD_INT 0
72407: PPUSH
72408: PPUSH
72409: PPUSH
// result := 0 ;
72410: LD_ADDR_VAR 0 3
72414: PUSH
72415: LD_INT 0
72417: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72418: LD_VAR 0 1
72422: PUSH
72423: LD_INT 0
72425: LESS
72426: PUSH
72427: LD_VAR 0 1
72431: PUSH
72432: LD_INT 8
72434: GREATER
72435: OR
72436: PUSH
72437: LD_VAR 0 2
72441: PUSH
72442: LD_INT 0
72444: LESS
72445: OR
72446: PUSH
72447: LD_VAR 0 2
72451: PUSH
72452: LD_INT 8
72454: GREATER
72455: OR
72456: IFFALSE 72460
// exit ;
72458: GO 72535
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72460: LD_ADDR_VAR 0 4
72464: PUSH
72465: LD_INT 22
72467: PUSH
72468: LD_VAR 0 2
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PPUSH
72477: CALL_OW 69
72481: PUSH
72482: FOR_IN
72483: IFFALSE 72533
// begin un := UnitShoot ( i ) ;
72485: LD_ADDR_VAR 0 5
72489: PUSH
72490: LD_VAR 0 4
72494: PPUSH
72495: CALL_OW 504
72499: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72500: LD_VAR 0 5
72504: PPUSH
72505: CALL_OW 255
72509: PUSH
72510: LD_VAR 0 1
72514: EQUAL
72515: IFFALSE 72531
// begin result := un ;
72517: LD_ADDR_VAR 0 3
72521: PUSH
72522: LD_VAR 0 5
72526: ST_TO_ADDR
// exit ;
72527: POP
72528: POP
72529: GO 72535
// end ; end ;
72531: GO 72482
72533: POP
72534: POP
// end ;
72535: LD_VAR 0 3
72539: RET
// export function GetCargoBay ( units ) ; begin
72540: LD_INT 0
72542: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72543: LD_ADDR_VAR 0 2
72547: PUSH
72548: LD_VAR 0 1
72552: PPUSH
72553: LD_INT 2
72555: PUSH
72556: LD_INT 34
72558: PUSH
72559: LD_INT 12
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PUSH
72566: LD_INT 34
72568: PUSH
72569: LD_INT 51
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 34
72578: PUSH
72579: LD_INT 32
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 34
72588: PUSH
72589: LD_INT 89
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: PPUSH
72603: CALL_OW 72
72607: ST_TO_ADDR
// end ;
72608: LD_VAR 0 2
72612: RET
// export function Negate ( value ) ; begin
72613: LD_INT 0
72615: PPUSH
// result := not value ;
72616: LD_ADDR_VAR 0 2
72620: PUSH
72621: LD_VAR 0 1
72625: NOT
72626: ST_TO_ADDR
// end ;
72627: LD_VAR 0 2
72631: RET
// export function Inc ( value ) ; begin
72632: LD_INT 0
72634: PPUSH
// result := value + 1 ;
72635: LD_ADDR_VAR 0 2
72639: PUSH
72640: LD_VAR 0 1
72644: PUSH
72645: LD_INT 1
72647: PLUS
72648: ST_TO_ADDR
// end ;
72649: LD_VAR 0 2
72653: RET
// export function Dec ( value ) ; begin
72654: LD_INT 0
72656: PPUSH
// result := value - 1 ;
72657: LD_ADDR_VAR 0 2
72661: PUSH
72662: LD_VAR 0 1
72666: PUSH
72667: LD_INT 1
72669: MINUS
72670: ST_TO_ADDR
// end ;
72671: LD_VAR 0 2
72675: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72676: LD_INT 0
72678: PPUSH
72679: PPUSH
72680: PPUSH
72681: PPUSH
72682: PPUSH
72683: PPUSH
72684: PPUSH
72685: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72686: LD_VAR 0 1
72690: PPUSH
72691: LD_VAR 0 2
72695: PPUSH
72696: CALL_OW 488
72700: NOT
72701: PUSH
72702: LD_VAR 0 3
72706: PPUSH
72707: LD_VAR 0 4
72711: PPUSH
72712: CALL_OW 488
72716: NOT
72717: OR
72718: IFFALSE 72731
// begin result := - 1 ;
72720: LD_ADDR_VAR 0 5
72724: PUSH
72725: LD_INT 1
72727: NEG
72728: ST_TO_ADDR
// exit ;
72729: GO 72966
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72731: LD_ADDR_VAR 0 12
72735: PUSH
72736: LD_VAR 0 1
72740: PPUSH
72741: LD_VAR 0 2
72745: PPUSH
72746: LD_VAR 0 3
72750: PPUSH
72751: LD_VAR 0 4
72755: PPUSH
72756: CALL 71816 0 4
72760: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72761: LD_ADDR_VAR 0 11
72765: PUSH
72766: LD_VAR 0 1
72770: PPUSH
72771: LD_VAR 0 2
72775: PPUSH
72776: LD_VAR 0 12
72780: PUSH
72781: LD_INT 1
72783: ARRAY
72784: PPUSH
72785: LD_VAR 0 12
72789: PUSH
72790: LD_INT 2
72792: ARRAY
72793: PPUSH
72794: CALL_OW 298
72798: ST_TO_ADDR
// distance := 9999 ;
72799: LD_ADDR_VAR 0 10
72803: PUSH
72804: LD_INT 9999
72806: ST_TO_ADDR
// for i := 0 to 5 do
72807: LD_ADDR_VAR 0 6
72811: PUSH
72812: DOUBLE
72813: LD_INT 0
72815: DEC
72816: ST_TO_ADDR
72817: LD_INT 5
72819: PUSH
72820: FOR_TO
72821: IFFALSE 72964
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72823: LD_ADDR_VAR 0 7
72827: PUSH
72828: LD_VAR 0 1
72832: PPUSH
72833: LD_VAR 0 6
72837: PPUSH
72838: LD_VAR 0 11
72842: PPUSH
72843: CALL_OW 272
72847: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72848: LD_ADDR_VAR 0 8
72852: PUSH
72853: LD_VAR 0 2
72857: PPUSH
72858: LD_VAR 0 6
72862: PPUSH
72863: LD_VAR 0 11
72867: PPUSH
72868: CALL_OW 273
72872: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72873: LD_VAR 0 7
72877: PPUSH
72878: LD_VAR 0 8
72882: PPUSH
72883: CALL_OW 488
72887: NOT
72888: IFFALSE 72892
// continue ;
72890: GO 72820
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72892: LD_ADDR_VAR 0 9
72896: PUSH
72897: LD_VAR 0 12
72901: PUSH
72902: LD_INT 1
72904: ARRAY
72905: PPUSH
72906: LD_VAR 0 12
72910: PUSH
72911: LD_INT 2
72913: ARRAY
72914: PPUSH
72915: LD_VAR 0 7
72919: PPUSH
72920: LD_VAR 0 8
72924: PPUSH
72925: CALL_OW 298
72929: ST_TO_ADDR
// if tmp < distance then
72930: LD_VAR 0 9
72934: PUSH
72935: LD_VAR 0 10
72939: LESS
72940: IFFALSE 72962
// begin result := i ;
72942: LD_ADDR_VAR 0 5
72946: PUSH
72947: LD_VAR 0 6
72951: ST_TO_ADDR
// distance := tmp ;
72952: LD_ADDR_VAR 0 10
72956: PUSH
72957: LD_VAR 0 9
72961: ST_TO_ADDR
// end ; end ;
72962: GO 72820
72964: POP
72965: POP
// end ;
72966: LD_VAR 0 5
72970: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72971: LD_INT 0
72973: PPUSH
72974: PPUSH
// if not driver or not IsInUnit ( driver ) then
72975: LD_VAR 0 1
72979: NOT
72980: PUSH
72981: LD_VAR 0 1
72985: PPUSH
72986: CALL_OW 310
72990: NOT
72991: OR
72992: IFFALSE 72996
// exit ;
72994: GO 73086
// vehicle := IsInUnit ( driver ) ;
72996: LD_ADDR_VAR 0 3
73000: PUSH
73001: LD_VAR 0 1
73005: PPUSH
73006: CALL_OW 310
73010: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73011: LD_VAR 0 1
73015: PPUSH
73016: LD_STRING \
73018: PUSH
73019: LD_INT 0
73021: PUSH
73022: LD_INT 0
73024: PUSH
73025: LD_INT 0
73027: PUSH
73028: LD_INT 0
73030: PUSH
73031: LD_INT 0
73033: PUSH
73034: LD_INT 0
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: PUSH
73046: LD_STRING E
73048: PUSH
73049: LD_INT 0
73051: PUSH
73052: LD_INT 0
73054: PUSH
73055: LD_VAR 0 3
73059: PUSH
73060: LD_INT 0
73062: PUSH
73063: LD_INT 0
73065: PUSH
73066: LD_INT 0
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: PPUSH
73082: CALL_OW 446
// end ;
73086: LD_VAR 0 2
73090: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73091: LD_INT 0
73093: PPUSH
73094: PPUSH
// if not driver or not IsInUnit ( driver ) then
73095: LD_VAR 0 1
73099: NOT
73100: PUSH
73101: LD_VAR 0 1
73105: PPUSH
73106: CALL_OW 310
73110: NOT
73111: OR
73112: IFFALSE 73116
// exit ;
73114: GO 73206
// vehicle := IsInUnit ( driver ) ;
73116: LD_ADDR_VAR 0 3
73120: PUSH
73121: LD_VAR 0 1
73125: PPUSH
73126: CALL_OW 310
73130: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73131: LD_VAR 0 1
73135: PPUSH
73136: LD_STRING \
73138: PUSH
73139: LD_INT 0
73141: PUSH
73142: LD_INT 0
73144: PUSH
73145: LD_INT 0
73147: PUSH
73148: LD_INT 0
73150: PUSH
73151: LD_INT 0
73153: PUSH
73154: LD_INT 0
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: PUSH
73166: LD_STRING E
73168: PUSH
73169: LD_INT 0
73171: PUSH
73172: LD_INT 0
73174: PUSH
73175: LD_VAR 0 3
73179: PUSH
73180: LD_INT 0
73182: PUSH
73183: LD_INT 0
73185: PUSH
73186: LD_INT 0
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PPUSH
73202: CALL_OW 447
// end ;
73206: LD_VAR 0 2
73210: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73211: LD_INT 0
73213: PPUSH
73214: PPUSH
73215: PPUSH
// tmp := [ ] ;
73216: LD_ADDR_VAR 0 5
73220: PUSH
73221: EMPTY
73222: ST_TO_ADDR
// for i in units do
73223: LD_ADDR_VAR 0 4
73227: PUSH
73228: LD_VAR 0 1
73232: PUSH
73233: FOR_IN
73234: IFFALSE 73272
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73236: LD_ADDR_VAR 0 5
73240: PUSH
73241: LD_VAR 0 5
73245: PPUSH
73246: LD_VAR 0 5
73250: PUSH
73251: LD_INT 1
73253: PLUS
73254: PPUSH
73255: LD_VAR 0 4
73259: PPUSH
73260: CALL_OW 256
73264: PPUSH
73265: CALL_OW 2
73269: ST_TO_ADDR
73270: GO 73233
73272: POP
73273: POP
// if not tmp then
73274: LD_VAR 0 5
73278: NOT
73279: IFFALSE 73283
// exit ;
73281: GO 73331
// if asc then
73283: LD_VAR 0 2
73287: IFFALSE 73311
// result := SortListByListAsc ( units , tmp ) else
73289: LD_ADDR_VAR 0 3
73293: PUSH
73294: LD_VAR 0 1
73298: PPUSH
73299: LD_VAR 0 5
73303: PPUSH
73304: CALL_OW 76
73308: ST_TO_ADDR
73309: GO 73331
// result := SortListByListDesc ( units , tmp ) ;
73311: LD_ADDR_VAR 0 3
73315: PUSH
73316: LD_VAR 0 1
73320: PPUSH
73321: LD_VAR 0 5
73325: PPUSH
73326: CALL_OW 77
73330: ST_TO_ADDR
// end ;
73331: LD_VAR 0 3
73335: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73336: LD_INT 0
73338: PPUSH
73339: PPUSH
// task := GetTaskList ( mech ) ;
73340: LD_ADDR_VAR 0 4
73344: PUSH
73345: LD_VAR 0 1
73349: PPUSH
73350: CALL_OW 437
73354: ST_TO_ADDR
// if not task then
73355: LD_VAR 0 4
73359: NOT
73360: IFFALSE 73364
// exit ;
73362: GO 73406
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73364: LD_ADDR_VAR 0 3
73368: PUSH
73369: LD_VAR 0 4
73373: PUSH
73374: LD_INT 1
73376: ARRAY
73377: PUSH
73378: LD_INT 1
73380: ARRAY
73381: PUSH
73382: LD_STRING r
73384: EQUAL
73385: PUSH
73386: LD_VAR 0 4
73390: PUSH
73391: LD_INT 1
73393: ARRAY
73394: PUSH
73395: LD_INT 4
73397: ARRAY
73398: PUSH
73399: LD_VAR 0 2
73403: EQUAL
73404: AND
73405: ST_TO_ADDR
// end ;
73406: LD_VAR 0 3
73410: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73411: LD_INT 0
73413: PPUSH
// SetDir ( unit , d ) ;
73414: LD_VAR 0 1
73418: PPUSH
73419: LD_VAR 0 4
73423: PPUSH
73424: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73428: LD_VAR 0 1
73432: PPUSH
73433: LD_VAR 0 2
73437: PPUSH
73438: LD_VAR 0 3
73442: PPUSH
73443: LD_VAR 0 5
73447: PPUSH
73448: CALL_OW 48
// end ;
73452: LD_VAR 0 6
73456: RET
// export function ToNaturalNumber ( number ) ; begin
73457: LD_INT 0
73459: PPUSH
// result := number div 1 ;
73460: LD_ADDR_VAR 0 2
73464: PUSH
73465: LD_VAR 0 1
73469: PUSH
73470: LD_INT 1
73472: DIV
73473: ST_TO_ADDR
// if number < 0 then
73474: LD_VAR 0 1
73478: PUSH
73479: LD_INT 0
73481: LESS
73482: IFFALSE 73492
// result := 0 ;
73484: LD_ADDR_VAR 0 2
73488: PUSH
73489: LD_INT 0
73491: ST_TO_ADDR
// end ;
73492: LD_VAR 0 2
73496: RET
// export function SortByClass ( units , class ) ; var un ; begin
73497: LD_INT 0
73499: PPUSH
73500: PPUSH
// if not units or not class then
73501: LD_VAR 0 1
73505: NOT
73506: PUSH
73507: LD_VAR 0 2
73511: NOT
73512: OR
73513: IFFALSE 73517
// exit ;
73515: GO 73612
// result := [ ] ;
73517: LD_ADDR_VAR 0 3
73521: PUSH
73522: EMPTY
73523: ST_TO_ADDR
// for un in units do
73524: LD_ADDR_VAR 0 4
73528: PUSH
73529: LD_VAR 0 1
73533: PUSH
73534: FOR_IN
73535: IFFALSE 73610
// if GetClass ( un ) = class then
73537: LD_VAR 0 4
73541: PPUSH
73542: CALL_OW 257
73546: PUSH
73547: LD_VAR 0 2
73551: EQUAL
73552: IFFALSE 73579
// result := Insert ( result , 1 , un ) else
73554: LD_ADDR_VAR 0 3
73558: PUSH
73559: LD_VAR 0 3
73563: PPUSH
73564: LD_INT 1
73566: PPUSH
73567: LD_VAR 0 4
73571: PPUSH
73572: CALL_OW 2
73576: ST_TO_ADDR
73577: GO 73608
// result := Replace ( result , result + 1 , un ) ;
73579: LD_ADDR_VAR 0 3
73583: PUSH
73584: LD_VAR 0 3
73588: PPUSH
73589: LD_VAR 0 3
73593: PUSH
73594: LD_INT 1
73596: PLUS
73597: PPUSH
73598: LD_VAR 0 4
73602: PPUSH
73603: CALL_OW 1
73607: ST_TO_ADDR
73608: GO 73534
73610: POP
73611: POP
// end ;
73612: LD_VAR 0 3
73616: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73617: LD_INT 0
73619: PPUSH
73620: PPUSH
73621: PPUSH
73622: PPUSH
73623: PPUSH
73624: PPUSH
73625: PPUSH
// result := [ ] ;
73626: LD_ADDR_VAR 0 4
73630: PUSH
73631: EMPTY
73632: ST_TO_ADDR
// if x - r < 0 then
73633: LD_VAR 0 1
73637: PUSH
73638: LD_VAR 0 3
73642: MINUS
73643: PUSH
73644: LD_INT 0
73646: LESS
73647: IFFALSE 73659
// min_x := 0 else
73649: LD_ADDR_VAR 0 8
73653: PUSH
73654: LD_INT 0
73656: ST_TO_ADDR
73657: GO 73675
// min_x := x - r ;
73659: LD_ADDR_VAR 0 8
73663: PUSH
73664: LD_VAR 0 1
73668: PUSH
73669: LD_VAR 0 3
73673: MINUS
73674: ST_TO_ADDR
// if y - r < 0 then
73675: LD_VAR 0 2
73679: PUSH
73680: LD_VAR 0 3
73684: MINUS
73685: PUSH
73686: LD_INT 0
73688: LESS
73689: IFFALSE 73701
// min_y := 0 else
73691: LD_ADDR_VAR 0 7
73695: PUSH
73696: LD_INT 0
73698: ST_TO_ADDR
73699: GO 73717
// min_y := y - r ;
73701: LD_ADDR_VAR 0 7
73705: PUSH
73706: LD_VAR 0 2
73710: PUSH
73711: LD_VAR 0 3
73715: MINUS
73716: ST_TO_ADDR
// max_x := x + r ;
73717: LD_ADDR_VAR 0 9
73721: PUSH
73722: LD_VAR 0 1
73726: PUSH
73727: LD_VAR 0 3
73731: PLUS
73732: ST_TO_ADDR
// max_y := y + r ;
73733: LD_ADDR_VAR 0 10
73737: PUSH
73738: LD_VAR 0 2
73742: PUSH
73743: LD_VAR 0 3
73747: PLUS
73748: ST_TO_ADDR
// for _x = min_x to max_x do
73749: LD_ADDR_VAR 0 5
73753: PUSH
73754: DOUBLE
73755: LD_VAR 0 8
73759: DEC
73760: ST_TO_ADDR
73761: LD_VAR 0 9
73765: PUSH
73766: FOR_TO
73767: IFFALSE 73868
// for _y = min_y to max_y do
73769: LD_ADDR_VAR 0 6
73773: PUSH
73774: DOUBLE
73775: LD_VAR 0 7
73779: DEC
73780: ST_TO_ADDR
73781: LD_VAR 0 10
73785: PUSH
73786: FOR_TO
73787: IFFALSE 73864
// begin if not ValidHex ( _x , _y ) then
73789: LD_VAR 0 5
73793: PPUSH
73794: LD_VAR 0 6
73798: PPUSH
73799: CALL_OW 488
73803: NOT
73804: IFFALSE 73808
// continue ;
73806: GO 73786
// if GetResourceTypeXY ( _x , _y ) then
73808: LD_VAR 0 5
73812: PPUSH
73813: LD_VAR 0 6
73817: PPUSH
73818: CALL_OW 283
73822: IFFALSE 73862
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73824: LD_ADDR_VAR 0 4
73828: PUSH
73829: LD_VAR 0 4
73833: PPUSH
73834: LD_VAR 0 4
73838: PUSH
73839: LD_INT 1
73841: PLUS
73842: PPUSH
73843: LD_VAR 0 5
73847: PUSH
73848: LD_VAR 0 6
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PPUSH
73857: CALL_OW 1
73861: ST_TO_ADDR
// end ;
73862: GO 73786
73864: POP
73865: POP
73866: GO 73766
73868: POP
73869: POP
// end ;
73870: LD_VAR 0 4
73874: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73875: LD_INT 0
73877: PPUSH
73878: PPUSH
73879: PPUSH
73880: PPUSH
73881: PPUSH
73882: PPUSH
73883: PPUSH
73884: PPUSH
// if not units then
73885: LD_VAR 0 1
73889: NOT
73890: IFFALSE 73894
// exit ;
73892: GO 74422
// result := UnitFilter ( units , [ f_ok ] ) ;
73894: LD_ADDR_VAR 0 3
73898: PUSH
73899: LD_VAR 0 1
73903: PPUSH
73904: LD_INT 50
73906: PUSH
73907: EMPTY
73908: LIST
73909: PPUSH
73910: CALL_OW 72
73914: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73915: LD_ADDR_VAR 0 8
73919: PUSH
73920: LD_VAR 0 1
73924: PUSH
73925: LD_INT 1
73927: ARRAY
73928: PPUSH
73929: CALL_OW 255
73933: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73934: LD_ADDR_VAR 0 10
73938: PUSH
73939: LD_INT 29
73941: PUSH
73942: LD_INT 91
73944: PUSH
73945: LD_INT 49
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: LIST
73952: ST_TO_ADDR
// if not result then
73953: LD_VAR 0 3
73957: NOT
73958: IFFALSE 73962
// exit ;
73960: GO 74422
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73962: LD_ADDR_VAR 0 5
73966: PUSH
73967: LD_INT 81
73969: PUSH
73970: LD_VAR 0 8
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PPUSH
73979: CALL_OW 69
73983: ST_TO_ADDR
// for i in result do
73984: LD_ADDR_VAR 0 4
73988: PUSH
73989: LD_VAR 0 3
73993: PUSH
73994: FOR_IN
73995: IFFALSE 74420
// begin tag := GetTag ( i ) + 1 ;
73997: LD_ADDR_VAR 0 9
74001: PUSH
74002: LD_VAR 0 4
74006: PPUSH
74007: CALL_OW 110
74011: PUSH
74012: LD_INT 1
74014: PLUS
74015: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74016: LD_ADDR_VAR 0 7
74020: PUSH
74021: LD_VAR 0 4
74025: PPUSH
74026: CALL_OW 250
74030: PPUSH
74031: LD_VAR 0 4
74035: PPUSH
74036: CALL_OW 251
74040: PPUSH
74041: LD_INT 4
74043: PPUSH
74044: CALL 73617 0 3
74048: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74049: LD_VAR 0 4
74053: PPUSH
74054: CALL_OW 247
74058: PUSH
74059: LD_INT 2
74061: EQUAL
74062: PUSH
74063: LD_VAR 0 7
74067: PUSH
74068: LD_INT 2
74070: GREATER
74071: AND
74072: PUSH
74073: LD_VAR 0 4
74077: PPUSH
74078: CALL_OW 264
74082: PUSH
74083: LD_VAR 0 10
74087: IN
74088: NOT
74089: AND
74090: IFFALSE 74129
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74092: LD_VAR 0 4
74096: PPUSH
74097: LD_VAR 0 7
74101: PUSH
74102: LD_INT 1
74104: ARRAY
74105: PUSH
74106: LD_INT 1
74108: ARRAY
74109: PPUSH
74110: LD_VAR 0 7
74114: PUSH
74115: LD_INT 1
74117: ARRAY
74118: PUSH
74119: LD_INT 2
74121: ARRAY
74122: PPUSH
74123: CALL_OW 116
74127: GO 74418
// if path > tag then
74129: LD_VAR 0 2
74133: PUSH
74134: LD_VAR 0 9
74138: GREATER
74139: IFFALSE 74347
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74141: LD_ADDR_VAR 0 6
74145: PUSH
74146: LD_VAR 0 5
74150: PPUSH
74151: LD_INT 91
74153: PUSH
74154: LD_VAR 0 4
74158: PUSH
74159: LD_INT 8
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: LIST
74166: PPUSH
74167: CALL_OW 72
74171: ST_TO_ADDR
// if nearEnemy then
74172: LD_VAR 0 6
74176: IFFALSE 74245
// begin if GetWeapon ( i ) = ru_time_lapser then
74178: LD_VAR 0 4
74182: PPUSH
74183: CALL_OW 264
74187: PUSH
74188: LD_INT 49
74190: EQUAL
74191: IFFALSE 74219
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74193: LD_VAR 0 4
74197: PPUSH
74198: LD_VAR 0 6
74202: PPUSH
74203: LD_VAR 0 4
74207: PPUSH
74208: CALL_OW 74
74212: PPUSH
74213: CALL_OW 112
74217: GO 74243
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74219: LD_VAR 0 4
74223: PPUSH
74224: LD_VAR 0 6
74228: PPUSH
74229: LD_VAR 0 4
74233: PPUSH
74234: CALL_OW 74
74238: PPUSH
74239: CALL 75493 0 2
// end else
74243: GO 74345
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74245: LD_VAR 0 4
74249: PPUSH
74250: LD_VAR 0 2
74254: PUSH
74255: LD_VAR 0 9
74259: ARRAY
74260: PUSH
74261: LD_INT 1
74263: ARRAY
74264: PPUSH
74265: LD_VAR 0 2
74269: PUSH
74270: LD_VAR 0 9
74274: ARRAY
74275: PUSH
74276: LD_INT 2
74278: ARRAY
74279: PPUSH
74280: CALL_OW 297
74284: PUSH
74285: LD_INT 6
74287: GREATER
74288: IFFALSE 74331
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74290: LD_VAR 0 4
74294: PPUSH
74295: LD_VAR 0 2
74299: PUSH
74300: LD_VAR 0 9
74304: ARRAY
74305: PUSH
74306: LD_INT 1
74308: ARRAY
74309: PPUSH
74310: LD_VAR 0 2
74314: PUSH
74315: LD_VAR 0 9
74319: ARRAY
74320: PUSH
74321: LD_INT 2
74323: ARRAY
74324: PPUSH
74325: CALL_OW 114
74329: GO 74345
// SetTag ( i , tag ) ;
74331: LD_VAR 0 4
74335: PPUSH
74336: LD_VAR 0 9
74340: PPUSH
74341: CALL_OW 109
// end else
74345: GO 74418
// if enemy then
74347: LD_VAR 0 5
74351: IFFALSE 74418
// begin if GetWeapon ( i ) = ru_time_lapser then
74353: LD_VAR 0 4
74357: PPUSH
74358: CALL_OW 264
74362: PUSH
74363: LD_INT 49
74365: EQUAL
74366: IFFALSE 74394
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74368: LD_VAR 0 4
74372: PPUSH
74373: LD_VAR 0 5
74377: PPUSH
74378: LD_VAR 0 4
74382: PPUSH
74383: CALL_OW 74
74387: PPUSH
74388: CALL_OW 112
74392: GO 74418
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74394: LD_VAR 0 4
74398: PPUSH
74399: LD_VAR 0 5
74403: PPUSH
74404: LD_VAR 0 4
74408: PPUSH
74409: CALL_OW 74
74413: PPUSH
74414: CALL 75493 0 2
// end ; end ;
74418: GO 73994
74420: POP
74421: POP
// end ;
74422: LD_VAR 0 3
74426: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74427: LD_INT 0
74429: PPUSH
74430: PPUSH
74431: PPUSH
// if not unit or IsInUnit ( unit ) then
74432: LD_VAR 0 1
74436: NOT
74437: PUSH
74438: LD_VAR 0 1
74442: PPUSH
74443: CALL_OW 310
74447: OR
74448: IFFALSE 74452
// exit ;
74450: GO 74543
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74452: LD_ADDR_VAR 0 4
74456: PUSH
74457: LD_VAR 0 1
74461: PPUSH
74462: CALL_OW 250
74466: PPUSH
74467: LD_VAR 0 2
74471: PPUSH
74472: LD_INT 1
74474: PPUSH
74475: CALL_OW 272
74479: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74480: LD_ADDR_VAR 0 5
74484: PUSH
74485: LD_VAR 0 1
74489: PPUSH
74490: CALL_OW 251
74494: PPUSH
74495: LD_VAR 0 2
74499: PPUSH
74500: LD_INT 1
74502: PPUSH
74503: CALL_OW 273
74507: ST_TO_ADDR
// if ValidHex ( x , y ) then
74508: LD_VAR 0 4
74512: PPUSH
74513: LD_VAR 0 5
74517: PPUSH
74518: CALL_OW 488
74522: IFFALSE 74543
// ComTurnXY ( unit , x , y ) ;
74524: LD_VAR 0 1
74528: PPUSH
74529: LD_VAR 0 4
74533: PPUSH
74534: LD_VAR 0 5
74538: PPUSH
74539: CALL_OW 118
// end ;
74543: LD_VAR 0 3
74547: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74548: LD_INT 0
74550: PPUSH
74551: PPUSH
// result := false ;
74552: LD_ADDR_VAR 0 3
74556: PUSH
74557: LD_INT 0
74559: ST_TO_ADDR
// if not units then
74560: LD_VAR 0 2
74564: NOT
74565: IFFALSE 74569
// exit ;
74567: GO 74614
// for i in units do
74569: LD_ADDR_VAR 0 4
74573: PUSH
74574: LD_VAR 0 2
74578: PUSH
74579: FOR_IN
74580: IFFALSE 74612
// if See ( side , i ) then
74582: LD_VAR 0 1
74586: PPUSH
74587: LD_VAR 0 4
74591: PPUSH
74592: CALL_OW 292
74596: IFFALSE 74610
// begin result := true ;
74598: LD_ADDR_VAR 0 3
74602: PUSH
74603: LD_INT 1
74605: ST_TO_ADDR
// exit ;
74606: POP
74607: POP
74608: GO 74614
// end ;
74610: GO 74579
74612: POP
74613: POP
// end ;
74614: LD_VAR 0 3
74618: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74619: LD_INT 0
74621: PPUSH
74622: PPUSH
74623: PPUSH
74624: PPUSH
// if not unit or not points then
74625: LD_VAR 0 1
74629: NOT
74630: PUSH
74631: LD_VAR 0 2
74635: NOT
74636: OR
74637: IFFALSE 74641
// exit ;
74639: GO 74731
// dist := 99999 ;
74641: LD_ADDR_VAR 0 5
74645: PUSH
74646: LD_INT 99999
74648: ST_TO_ADDR
// for i in points do
74649: LD_ADDR_VAR 0 4
74653: PUSH
74654: LD_VAR 0 2
74658: PUSH
74659: FOR_IN
74660: IFFALSE 74729
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74662: LD_ADDR_VAR 0 6
74666: PUSH
74667: LD_VAR 0 1
74671: PPUSH
74672: LD_VAR 0 4
74676: PUSH
74677: LD_INT 1
74679: ARRAY
74680: PPUSH
74681: LD_VAR 0 4
74685: PUSH
74686: LD_INT 2
74688: ARRAY
74689: PPUSH
74690: CALL_OW 297
74694: ST_TO_ADDR
// if tmpDist < dist then
74695: LD_VAR 0 6
74699: PUSH
74700: LD_VAR 0 5
74704: LESS
74705: IFFALSE 74727
// begin result := i ;
74707: LD_ADDR_VAR 0 3
74711: PUSH
74712: LD_VAR 0 4
74716: ST_TO_ADDR
// dist := tmpDist ;
74717: LD_ADDR_VAR 0 5
74721: PUSH
74722: LD_VAR 0 6
74726: ST_TO_ADDR
// end ; end ;
74727: GO 74659
74729: POP
74730: POP
// end ;
74731: LD_VAR 0 3
74735: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74736: LD_INT 0
74738: PPUSH
// uc_side := side ;
74739: LD_ADDR_OWVAR 20
74743: PUSH
74744: LD_VAR 0 1
74748: ST_TO_ADDR
// uc_nation := 3 ;
74749: LD_ADDR_OWVAR 21
74753: PUSH
74754: LD_INT 3
74756: ST_TO_ADDR
// vc_chassis := 25 ;
74757: LD_ADDR_OWVAR 37
74761: PUSH
74762: LD_INT 25
74764: ST_TO_ADDR
// vc_engine := engine_siberite ;
74765: LD_ADDR_OWVAR 39
74769: PUSH
74770: LD_INT 3
74772: ST_TO_ADDR
// vc_control := control_computer ;
74773: LD_ADDR_OWVAR 38
74777: PUSH
74778: LD_INT 3
74780: ST_TO_ADDR
// vc_weapon := 59 ;
74781: LD_ADDR_OWVAR 40
74785: PUSH
74786: LD_INT 59
74788: ST_TO_ADDR
// result := CreateVehicle ;
74789: LD_ADDR_VAR 0 5
74793: PUSH
74794: CALL_OW 45
74798: ST_TO_ADDR
// SetDir ( result , d ) ;
74799: LD_VAR 0 5
74803: PPUSH
74804: LD_VAR 0 4
74808: PPUSH
74809: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74813: LD_VAR 0 5
74817: PPUSH
74818: LD_VAR 0 2
74822: PPUSH
74823: LD_VAR 0 3
74827: PPUSH
74828: LD_INT 0
74830: PPUSH
74831: CALL_OW 48
// end ;
74835: LD_VAR 0 5
74839: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74840: LD_INT 0
74842: PPUSH
74843: PPUSH
74844: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74845: LD_ADDR_VAR 0 2
74849: PUSH
74850: LD_INT 0
74852: PUSH
74853: LD_INT 0
74855: PUSH
74856: LD_INT 0
74858: PUSH
74859: LD_INT 0
74861: PUSH
74862: EMPTY
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74868: LD_VAR 0 1
74872: NOT
74873: PUSH
74874: LD_VAR 0 1
74878: PPUSH
74879: CALL_OW 264
74883: PUSH
74884: LD_INT 12
74886: PUSH
74887: LD_INT 51
74889: PUSH
74890: LD_INT 32
74892: PUSH
74893: LD_INT 89
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: IN
74902: NOT
74903: OR
74904: IFFALSE 74908
// exit ;
74906: GO 75006
// for i := 1 to 3 do
74908: LD_ADDR_VAR 0 3
74912: PUSH
74913: DOUBLE
74914: LD_INT 1
74916: DEC
74917: ST_TO_ADDR
74918: LD_INT 3
74920: PUSH
74921: FOR_TO
74922: IFFALSE 75004
// begin tmp := GetCargo ( cargo , i ) ;
74924: LD_ADDR_VAR 0 4
74928: PUSH
74929: LD_VAR 0 1
74933: PPUSH
74934: LD_VAR 0 3
74938: PPUSH
74939: CALL_OW 289
74943: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74944: LD_ADDR_VAR 0 2
74948: PUSH
74949: LD_VAR 0 2
74953: PPUSH
74954: LD_VAR 0 3
74958: PPUSH
74959: LD_VAR 0 4
74963: PPUSH
74964: CALL_OW 1
74968: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74969: LD_ADDR_VAR 0 2
74973: PUSH
74974: LD_VAR 0 2
74978: PPUSH
74979: LD_INT 4
74981: PPUSH
74982: LD_VAR 0 2
74986: PUSH
74987: LD_INT 4
74989: ARRAY
74990: PUSH
74991: LD_VAR 0 4
74995: PLUS
74996: PPUSH
74997: CALL_OW 1
75001: ST_TO_ADDR
// end ;
75002: GO 74921
75004: POP
75005: POP
// end ;
75006: LD_VAR 0 2
75010: RET
// export function Length ( array ) ; begin
75011: LD_INT 0
75013: PPUSH
// result := array + 0 ;
75014: LD_ADDR_VAR 0 2
75018: PUSH
75019: LD_VAR 0 1
75023: PUSH
75024: LD_INT 0
75026: PLUS
75027: ST_TO_ADDR
// end ;
75028: LD_VAR 0 2
75032: RET
// export function PrepareArray ( array ) ; begin
75033: LD_INT 0
75035: PPUSH
// result := array diff 0 ;
75036: LD_ADDR_VAR 0 2
75040: PUSH
75041: LD_VAR 0 1
75045: PUSH
75046: LD_INT 0
75048: DIFF
75049: ST_TO_ADDR
// if not result [ 1 ] then
75050: LD_VAR 0 2
75054: PUSH
75055: LD_INT 1
75057: ARRAY
75058: NOT
75059: IFFALSE 75079
// result := Delete ( result , 1 ) ;
75061: LD_ADDR_VAR 0 2
75065: PUSH
75066: LD_VAR 0 2
75070: PPUSH
75071: LD_INT 1
75073: PPUSH
75074: CALL_OW 3
75078: ST_TO_ADDR
// end ;
75079: LD_VAR 0 2
75083: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75084: LD_INT 0
75086: PPUSH
75087: PPUSH
75088: PPUSH
75089: PPUSH
// sibRocketRange := 25 ;
75090: LD_ADDR_VAR 0 6
75094: PUSH
75095: LD_INT 25
75097: ST_TO_ADDR
// result := false ;
75098: LD_ADDR_VAR 0 4
75102: PUSH
75103: LD_INT 0
75105: ST_TO_ADDR
// for i := 0 to 5 do
75106: LD_ADDR_VAR 0 5
75110: PUSH
75111: DOUBLE
75112: LD_INT 0
75114: DEC
75115: ST_TO_ADDR
75116: LD_INT 5
75118: PUSH
75119: FOR_TO
75120: IFFALSE 75187
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75122: LD_VAR 0 1
75126: PPUSH
75127: LD_VAR 0 5
75131: PPUSH
75132: LD_VAR 0 6
75136: PPUSH
75137: CALL_OW 272
75141: PPUSH
75142: LD_VAR 0 2
75146: PPUSH
75147: LD_VAR 0 5
75151: PPUSH
75152: LD_VAR 0 6
75156: PPUSH
75157: CALL_OW 273
75161: PPUSH
75162: LD_VAR 0 3
75166: PPUSH
75167: CALL_OW 309
75171: IFFALSE 75185
// begin result := true ;
75173: LD_ADDR_VAR 0 4
75177: PUSH
75178: LD_INT 1
75180: ST_TO_ADDR
// exit ;
75181: POP
75182: POP
75183: GO 75189
// end ;
75185: GO 75119
75187: POP
75188: POP
// end ;
75189: LD_VAR 0 4
75193: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75194: LD_INT 0
75196: PPUSH
75197: PPUSH
75198: PPUSH
// if btype = b_depot then
75199: LD_VAR 0 2
75203: PUSH
75204: LD_INT 0
75206: EQUAL
75207: IFFALSE 75219
// begin result := true ;
75209: LD_ADDR_VAR 0 3
75213: PUSH
75214: LD_INT 1
75216: ST_TO_ADDR
// exit ;
75217: GO 75335
// end ; pom := GetBase ( depot ) ;
75219: LD_ADDR_VAR 0 4
75223: PUSH
75224: LD_VAR 0 1
75228: PPUSH
75229: CALL_OW 274
75233: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75234: LD_ADDR_VAR 0 5
75238: PUSH
75239: LD_VAR 0 2
75243: PPUSH
75244: LD_VAR 0 1
75248: PPUSH
75249: CALL_OW 248
75253: PPUSH
75254: CALL_OW 450
75258: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75259: LD_ADDR_VAR 0 3
75263: PUSH
75264: LD_VAR 0 4
75268: PPUSH
75269: LD_INT 1
75271: PPUSH
75272: CALL_OW 275
75276: PUSH
75277: LD_VAR 0 5
75281: PUSH
75282: LD_INT 1
75284: ARRAY
75285: GREATEREQUAL
75286: PUSH
75287: LD_VAR 0 4
75291: PPUSH
75292: LD_INT 2
75294: PPUSH
75295: CALL_OW 275
75299: PUSH
75300: LD_VAR 0 5
75304: PUSH
75305: LD_INT 2
75307: ARRAY
75308: GREATEREQUAL
75309: AND
75310: PUSH
75311: LD_VAR 0 4
75315: PPUSH
75316: LD_INT 3
75318: PPUSH
75319: CALL_OW 275
75323: PUSH
75324: LD_VAR 0 5
75328: PUSH
75329: LD_INT 3
75331: ARRAY
75332: GREATEREQUAL
75333: AND
75334: ST_TO_ADDR
// end ;
75335: LD_VAR 0 3
75339: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75340: LD_INT 0
75342: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75343: LD_VAR 0 1
75347: PPUSH
75348: LD_VAR 0 2
75352: PPUSH
75353: LD_INT 0
75355: PPUSH
75356: LD_INT 0
75358: PPUSH
75359: LD_INT 1
75361: PPUSH
75362: LD_INT 0
75364: PPUSH
75365: CALL_OW 587
// end ;
75369: LD_VAR 0 3
75373: RET
// export function CenterOnNow ( unit ) ; begin
75374: LD_INT 0
75376: PPUSH
// result := IsInUnit ( unit ) ;
75377: LD_ADDR_VAR 0 2
75381: PUSH
75382: LD_VAR 0 1
75386: PPUSH
75387: CALL_OW 310
75391: ST_TO_ADDR
// if not result then
75392: LD_VAR 0 2
75396: NOT
75397: IFFALSE 75409
// result := unit ;
75399: LD_ADDR_VAR 0 2
75403: PUSH
75404: LD_VAR 0 1
75408: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75409: LD_VAR 0 1
75413: PPUSH
75414: CALL_OW 87
// end ;
75418: LD_VAR 0 2
75422: RET
// export function ComMoveHex ( unit , hex ) ; begin
75423: LD_INT 0
75425: PPUSH
// if not hex then
75426: LD_VAR 0 2
75430: NOT
75431: IFFALSE 75435
// exit ;
75433: GO 75488
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75435: LD_VAR 0 2
75439: PUSH
75440: LD_INT 1
75442: ARRAY
75443: PPUSH
75444: LD_VAR 0 2
75448: PUSH
75449: LD_INT 2
75451: ARRAY
75452: PPUSH
75453: CALL_OW 428
75457: IFFALSE 75461
// exit ;
75459: GO 75488
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75461: LD_VAR 0 1
75465: PPUSH
75466: LD_VAR 0 2
75470: PUSH
75471: LD_INT 1
75473: ARRAY
75474: PPUSH
75475: LD_VAR 0 2
75479: PUSH
75480: LD_INT 2
75482: ARRAY
75483: PPUSH
75484: CALL_OW 111
// end ;
75488: LD_VAR 0 3
75492: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75493: LD_INT 0
75495: PPUSH
75496: PPUSH
75497: PPUSH
// if not unit or not enemy then
75498: LD_VAR 0 1
75502: NOT
75503: PUSH
75504: LD_VAR 0 2
75508: NOT
75509: OR
75510: IFFALSE 75514
// exit ;
75512: GO 75638
// x := GetX ( enemy ) ;
75514: LD_ADDR_VAR 0 4
75518: PUSH
75519: LD_VAR 0 2
75523: PPUSH
75524: CALL_OW 250
75528: ST_TO_ADDR
// y := GetY ( enemy ) ;
75529: LD_ADDR_VAR 0 5
75533: PUSH
75534: LD_VAR 0 2
75538: PPUSH
75539: CALL_OW 251
75543: ST_TO_ADDR
// if ValidHex ( x , y ) then
75544: LD_VAR 0 4
75548: PPUSH
75549: LD_VAR 0 5
75553: PPUSH
75554: CALL_OW 488
75558: IFFALSE 75638
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
75560: LD_VAR 0 2
75564: PPUSH
75565: CALL_OW 247
75569: PUSH
75570: LD_INT 3
75572: PUSH
75573: LD_INT 2
75575: PUSH
75576: EMPTY
75577: LIST
75578: LIST
75579: IN
75580: PUSH
75581: LD_VAR 0 1
75585: PPUSH
75586: CALL_OW 255
75590: PPUSH
75591: LD_VAR 0 2
75595: PPUSH
75596: CALL_OW 292
75600: OR
75601: IFFALSE 75619
// ComAttackUnit ( unit , enemy ) else
75603: LD_VAR 0 1
75607: PPUSH
75608: LD_VAR 0 2
75612: PPUSH
75613: CALL_OW 115
75617: GO 75638
// ComAgressiveMove ( unit , x , y ) ;
75619: LD_VAR 0 1
75623: PPUSH
75624: LD_VAR 0 4
75628: PPUSH
75629: LD_VAR 0 5
75633: PPUSH
75634: CALL_OW 114
// end ;
75638: LD_VAR 0 3
75642: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75643: LD_INT 0
75645: PPUSH
75646: PPUSH
75647: PPUSH
// list := AreaToList ( area , 0 ) ;
75648: LD_ADDR_VAR 0 5
75652: PUSH
75653: LD_VAR 0 1
75657: PPUSH
75658: LD_INT 0
75660: PPUSH
75661: CALL_OW 517
75665: ST_TO_ADDR
// if not list then
75666: LD_VAR 0 5
75670: NOT
75671: IFFALSE 75675
// exit ;
75673: GO 75805
// if all then
75675: LD_VAR 0 2
75679: IFFALSE 75767
// begin for i := 1 to list [ 1 ] do
75681: LD_ADDR_VAR 0 4
75685: PUSH
75686: DOUBLE
75687: LD_INT 1
75689: DEC
75690: ST_TO_ADDR
75691: LD_VAR 0 5
75695: PUSH
75696: LD_INT 1
75698: ARRAY
75699: PUSH
75700: FOR_TO
75701: IFFALSE 75763
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75703: LD_ADDR_VAR 0 3
75707: PUSH
75708: LD_VAR 0 3
75712: PPUSH
75713: LD_VAR 0 3
75717: PUSH
75718: LD_INT 1
75720: PLUS
75721: PPUSH
75722: LD_VAR 0 5
75726: PUSH
75727: LD_INT 1
75729: ARRAY
75730: PUSH
75731: LD_VAR 0 4
75735: ARRAY
75736: PUSH
75737: LD_VAR 0 5
75741: PUSH
75742: LD_INT 2
75744: ARRAY
75745: PUSH
75746: LD_VAR 0 4
75750: ARRAY
75751: PUSH
75752: EMPTY
75753: LIST
75754: LIST
75755: PPUSH
75756: CALL_OW 1
75760: ST_TO_ADDR
75761: GO 75700
75763: POP
75764: POP
// exit ;
75765: GO 75805
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75767: LD_ADDR_VAR 0 3
75771: PUSH
75772: LD_VAR 0 5
75776: PUSH
75777: LD_INT 1
75779: ARRAY
75780: PUSH
75781: LD_INT 1
75783: ARRAY
75784: PUSH
75785: LD_VAR 0 5
75789: PUSH
75790: LD_INT 2
75792: ARRAY
75793: PUSH
75794: LD_INT 1
75796: ARRAY
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: PUSH
75802: EMPTY
75803: LIST
75804: ST_TO_ADDR
// end ;
75805: LD_VAR 0 3
75809: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75810: LD_INT 0
75812: PPUSH
75813: PPUSH
// list := AreaToList ( area , 0 ) ;
75814: LD_ADDR_VAR 0 4
75818: PUSH
75819: LD_VAR 0 1
75823: PPUSH
75824: LD_INT 0
75826: PPUSH
75827: CALL_OW 517
75831: ST_TO_ADDR
// if not list then
75832: LD_VAR 0 4
75836: NOT
75837: IFFALSE 75841
// exit ;
75839: GO 75882
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75841: LD_ADDR_VAR 0 3
75845: PUSH
75846: LD_VAR 0 4
75850: PUSH
75851: LD_INT 1
75853: ARRAY
75854: PUSH
75855: LD_INT 1
75857: ARRAY
75858: PUSH
75859: LD_VAR 0 4
75863: PUSH
75864: LD_INT 2
75866: ARRAY
75867: PUSH
75868: LD_INT 1
75870: ARRAY
75871: PUSH
75872: LD_VAR 0 2
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: LIST
75881: ST_TO_ADDR
// end ;
75882: LD_VAR 0 3
75886: RET
// export function First ( array ) ; begin
75887: LD_INT 0
75889: PPUSH
// if not array then
75890: LD_VAR 0 1
75894: NOT
75895: IFFALSE 75899
// exit ;
75897: GO 75913
// result := array [ 1 ] ;
75899: LD_ADDR_VAR 0 2
75903: PUSH
75904: LD_VAR 0 1
75908: PUSH
75909: LD_INT 1
75911: ARRAY
75912: ST_TO_ADDR
// end ;
75913: LD_VAR 0 2
75917: RET
// export function Last ( array ) ; begin
75918: LD_INT 0
75920: PPUSH
// if not array then
75921: LD_VAR 0 1
75925: NOT
75926: IFFALSE 75930
// exit ;
75928: GO 75946
// result := array [ array ] ;
75930: LD_ADDR_VAR 0 2
75934: PUSH
75935: LD_VAR 0 1
75939: PUSH
75940: LD_VAR 0 1
75944: ARRAY
75945: ST_TO_ADDR
// end ;
75946: LD_VAR 0 2
75950: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75951: LD_INT 0
75953: PPUSH
75954: PPUSH
// result := [ ] ;
75955: LD_ADDR_VAR 0 5
75959: PUSH
75960: EMPTY
75961: ST_TO_ADDR
// if not array then
75962: LD_VAR 0 1
75966: NOT
75967: IFFALSE 75971
// exit ;
75969: GO 76083
// for i := 1 to array do
75971: LD_ADDR_VAR 0 6
75975: PUSH
75976: DOUBLE
75977: LD_INT 1
75979: DEC
75980: ST_TO_ADDR
75981: LD_VAR 0 1
75985: PUSH
75986: FOR_TO
75987: IFFALSE 76081
// if array [ i ] [ index ] = value then
75989: LD_VAR 0 1
75993: PUSH
75994: LD_VAR 0 6
75998: ARRAY
75999: PUSH
76000: LD_VAR 0 2
76004: ARRAY
76005: PUSH
76006: LD_VAR 0 3
76010: EQUAL
76011: IFFALSE 76079
// begin if indexColumn then
76013: LD_VAR 0 4
76017: IFFALSE 76053
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76019: LD_ADDR_VAR 0 5
76023: PUSH
76024: LD_VAR 0 5
76028: PPUSH
76029: LD_VAR 0 1
76033: PUSH
76034: LD_VAR 0 6
76038: ARRAY
76039: PUSH
76040: LD_VAR 0 4
76044: ARRAY
76045: PPUSH
76046: CALL 71271 0 2
76050: ST_TO_ADDR
76051: GO 76079
// result := Join ( result , array [ i ] ) ;
76053: LD_ADDR_VAR 0 5
76057: PUSH
76058: LD_VAR 0 5
76062: PPUSH
76063: LD_VAR 0 1
76067: PUSH
76068: LD_VAR 0 6
76072: ARRAY
76073: PPUSH
76074: CALL 71271 0 2
76078: ST_TO_ADDR
// end ;
76079: GO 75986
76081: POP
76082: POP
// end ;
76083: LD_VAR 0 5
76087: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76088: LD_INT 0
76090: PPUSH
// if not vehicles or not parkingPoint then
76091: LD_VAR 0 1
76095: NOT
76096: PUSH
76097: LD_VAR 0 2
76101: NOT
76102: OR
76103: IFFALSE 76107
// exit ;
76105: GO 76205
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76107: LD_ADDR_VAR 0 1
76111: PUSH
76112: LD_VAR 0 1
76116: PPUSH
76117: LD_INT 50
76119: PUSH
76120: EMPTY
76121: LIST
76122: PUSH
76123: LD_INT 3
76125: PUSH
76126: LD_INT 92
76128: PUSH
76129: LD_VAR 0 2
76133: PUSH
76134: LD_INT 1
76136: ARRAY
76137: PUSH
76138: LD_VAR 0 2
76142: PUSH
76143: LD_INT 2
76145: ARRAY
76146: PUSH
76147: LD_INT 8
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: LIST
76154: LIST
76155: PUSH
76156: EMPTY
76157: LIST
76158: LIST
76159: PUSH
76160: EMPTY
76161: LIST
76162: LIST
76163: PPUSH
76164: CALL_OW 72
76168: ST_TO_ADDR
// if not vehicles then
76169: LD_VAR 0 1
76173: NOT
76174: IFFALSE 76178
// exit ;
76176: GO 76205
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76178: LD_VAR 0 1
76182: PPUSH
76183: LD_VAR 0 2
76187: PUSH
76188: LD_INT 1
76190: ARRAY
76191: PPUSH
76192: LD_VAR 0 2
76196: PUSH
76197: LD_INT 2
76199: ARRAY
76200: PPUSH
76201: CALL_OW 111
// end ;
76205: LD_VAR 0 3
76209: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76210: LD_INT 0
76212: PPUSH
76213: PPUSH
76214: PPUSH
// if not side or not area then
76215: LD_VAR 0 1
76219: NOT
76220: PUSH
76221: LD_VAR 0 2
76225: NOT
76226: OR
76227: IFFALSE 76231
// exit ;
76229: GO 76350
// tmp := AreaToList ( area , 0 ) ;
76231: LD_ADDR_VAR 0 5
76235: PUSH
76236: LD_VAR 0 2
76240: PPUSH
76241: LD_INT 0
76243: PPUSH
76244: CALL_OW 517
76248: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76249: LD_ADDR_VAR 0 4
76253: PUSH
76254: DOUBLE
76255: LD_INT 1
76257: DEC
76258: ST_TO_ADDR
76259: LD_VAR 0 5
76263: PUSH
76264: LD_INT 1
76266: ARRAY
76267: PUSH
76268: FOR_TO
76269: IFFALSE 76348
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76271: LD_VAR 0 5
76275: PUSH
76276: LD_INT 1
76278: ARRAY
76279: PUSH
76280: LD_VAR 0 4
76284: ARRAY
76285: PPUSH
76286: LD_VAR 0 5
76290: PUSH
76291: LD_INT 2
76293: ARRAY
76294: PUSH
76295: LD_VAR 0 4
76299: ARRAY
76300: PPUSH
76301: CALL_OW 351
76305: IFFALSE 76346
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76307: LD_VAR 0 5
76311: PUSH
76312: LD_INT 1
76314: ARRAY
76315: PUSH
76316: LD_VAR 0 4
76320: ARRAY
76321: PPUSH
76322: LD_VAR 0 5
76326: PUSH
76327: LD_INT 2
76329: ARRAY
76330: PUSH
76331: LD_VAR 0 4
76335: ARRAY
76336: PPUSH
76337: LD_VAR 0 1
76341: PPUSH
76342: CALL_OW 244
// end ;
76346: GO 76268
76348: POP
76349: POP
// end ; end_of_file
76350: LD_VAR 0 3
76354: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76355: LD_VAR 0 1
76359: PUSH
76360: LD_INT 200
76362: DOUBLE
76363: GREATEREQUAL
76364: IFFALSE 76372
76366: LD_INT 299
76368: DOUBLE
76369: LESSEQUAL
76370: IFTRUE 76374
76372: GO 76406
76374: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76375: LD_VAR 0 1
76379: PPUSH
76380: LD_VAR 0 2
76384: PPUSH
76385: LD_VAR 0 3
76389: PPUSH
76390: LD_VAR 0 4
76394: PPUSH
76395: LD_VAR 0 5
76399: PPUSH
76400: CALL 28840 0 5
76404: GO 76483
76406: LD_INT 300
76408: DOUBLE
76409: GREATEREQUAL
76410: IFFALSE 76418
76412: LD_INT 399
76414: DOUBLE
76415: LESSEQUAL
76416: IFTRUE 76420
76418: GO 76482
76420: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76421: LD_VAR 0 1
76425: PPUSH
76426: LD_VAR 0 2
76430: PPUSH
76431: LD_VAR 0 3
76435: PPUSH
76436: LD_VAR 0 4
76440: PPUSH
76441: LD_VAR 0 5
76445: PPUSH
76446: LD_VAR 0 6
76450: PPUSH
76451: LD_VAR 0 7
76455: PPUSH
76456: LD_VAR 0 8
76460: PPUSH
76461: LD_VAR 0 9
76465: PPUSH
76466: LD_VAR 0 10
76470: PPUSH
76471: LD_VAR 0 11
76475: PPUSH
76476: CALL 24828 0 11
76480: GO 76483
76482: POP
// end ;
76483: PPOPN 11
76485: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76486: LD_VAR 0 1
76490: PPUSH
76491: LD_VAR 0 2
76495: PPUSH
76496: LD_VAR 0 3
76500: PPUSH
76501: LD_VAR 0 4
76505: PPUSH
76506: LD_VAR 0 5
76510: PPUSH
76511: CALL 28305 0 5
// end ; end_of_file
76515: PPOPN 5
76517: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76518: LD_VAR 0 1
76522: PPUSH
76523: LD_VAR 0 2
76527: PPUSH
76528: LD_VAR 0 3
76532: PPUSH
76533: LD_VAR 0 4
76537: PPUSH
76538: LD_VAR 0 5
76542: PPUSH
76543: LD_VAR 0 6
76547: PPUSH
76548: CALL 12480 0 6
// end ;
76552: PPOPN 6
76554: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76555: LD_INT 0
76557: PPUSH
// begin if not units then
76558: LD_VAR 0 1
76562: NOT
76563: IFFALSE 76567
// exit ;
76565: GO 76567
// end ;
76567: PPOPN 7
76569: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76570: CALL 12367 0 0
// end ;
76574: PPOPN 1
76576: END
