// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 253 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1531 0 0
// PrepareRussians ;
  27: CALL 4541 0 0
// PrepareAmericans ;
  31: CALL 3411 0 0
// Action ;
  35: CALL 8421 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: EMPTY
  94: LIST
  95: LIST
  96: LIST
  97: PUSH
  98: LD_OWVAR 67
 102: ARRAY
 103: PUSH
 104: LD_INT 79800
 106: PUSH
 107: LD_INT 73500
 109: PUSH
 110: LD_INT 67200
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: PUSH
 118: LD_OWVAR 67
 122: ARRAY
 123: PUSH
 124: LD_INT 92400
 126: PUSH
 127: LD_INT 86100
 129: PUSH
 130: LD_INT 79800
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_OWVAR 67
 142: ARRAY
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// can_end := false ;
 149: LD_ADDR_EXP 6
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// must_end := false ;
 157: LD_ADDR_EXP 7
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// kill_counter := 0 ;
 165: LD_ADDR_EXP 8
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end ;
 173: LD_VAR 0 1
 177: RET
// every 0 0$01 trigger not debug do
 178: LD_EXP 1
 182: NOT
 183: IFFALSE 252
 185: GO 187
 187: DISABLE
// begin enable ;
 188: ENABLE
// if not must_end then
 189: LD_EXP 7
 193: NOT
 194: IFFALSE 215
// display_strings := [ #Am07-1 , tick ] else
 196: LD_ADDR_OWVAR 47
 200: PUSH
 201: LD_STRING #Am07-1
 203: PUSH
 204: LD_OWVAR 1
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: ST_TO_ADDR
 213: GO 252
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 215: LD_ADDR_OWVAR 47
 219: PUSH
 220: LD_STRING #Am07-1
 222: PUSH
 223: LD_OWVAR 1
 227: PUSH
 228: LD_STRING #Am07-2
 230: PUSH
 231: LD_EXP 5
 235: PUSH
 236: LD_INT 3
 238: ARRAY
 239: PUSH
 240: LD_OWVAR 1
 244: MINUS
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: ST_TO_ADDR
// end ;
 252: END
// function DebugMode ; var i ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
// if not debug then
 257: LD_EXP 1
 261: NOT
 262: IFFALSE 266
// exit ;
 264: GO 273
// FogOff ( 1 ) ;
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 344
// end ;
 273: LD_VAR 0 1
 277: RET
// every 3 trigger debug do var i , filter ;
 278: LD_EXP 1
 282: IFFALSE 371
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
// begin enable ;
 291: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 292: LD_ADDR_VAR 0 2
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 3
 309: PUSH
 310: LD_INT 24
 312: PUSH
 313: LD_INT 500
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: ST_TO_ADDR
// if not filter then
 333: LD_VAR 0 2
 337: NOT
 338: IFFALSE 342
// exit ;
 340: GO 371
// for i in filter do
 342: LD_ADDR_VAR 0 1
 346: PUSH
 347: LD_VAR 0 2
 351: PUSH
 352: FOR_IN
 353: IFFALSE 369
// SetLives ( i , 1000 ) ;
 355: LD_VAR 0 1
 359: PPUSH
 360: LD_INT 1000
 362: PPUSH
 363: CALL_OW 234
 367: GO 352
 369: POP
 370: POP
// end ;
 371: PPOPN 2
 373: END
// every 0 0$1 trigger kill_counter >= 20 do
 374: LD_EXP 8
 378: PUSH
 379: LD_INT 20
 381: GREATEREQUAL
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 387: LD_STRING ACH_HITMAN
 389: PPUSH
 390: CALL_OW 543
 394: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 395: LD_INT 22
 397: PUSH
 398: LD_INT 1
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: LD_INT 23
 407: PUSH
 408: LD_INT 3
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 2
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PPUSH
 430: CALL_OW 69
 434: PUSH
 435: LD_INT 3
 437: GREATEREQUAL
 438: IFFALSE 450
 440: GO 442
 442: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 443: LD_STRING ACH_TANKACE
 445: PPUSH
 446: CALL_OW 543
 450: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 451: LD_INT 2
 453: PUSH
 454: LD_INT 30
 456: PUSH
 457: LD_INT 0
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: LD_INT 0
 486: EQUAL
 487: IFFALSE 499
 489: GO 491
 491: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 492: LD_STRING ACH_COMMANDO
 494: PPUSH
 495: CALL_OW 543
 499: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 500: LD_INT 0
 502: PPUSH
// uc_side := side ;
 503: LD_ADDR_OWVAR 20
 507: PUSH
 508: LD_VAR 0 1
 512: ST_TO_ADDR
// uc_nation := nation ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_VAR 0 2
 522: ST_TO_ADDR
// vc_chassis := chassis ;
 523: LD_ADDR_OWVAR 37
 527: PUSH
 528: LD_VAR 0 3
 532: ST_TO_ADDR
// vc_engine := engine ;
 533: LD_ADDR_OWVAR 39
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// vc_control := control ;
 543: LD_ADDR_OWVAR 38
 547: PUSH
 548: LD_VAR 0 5
 552: ST_TO_ADDR
// vc_weapon := weapon ;
 553: LD_ADDR_OWVAR 40
 557: PUSH
 558: LD_VAR 0 6
 562: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 563: LD_ADDR_OWVAR 41
 567: PUSH
 568: LD_VAR 0 7
 572: ST_TO_ADDR
// result := CreateVehicle ;
 573: LD_ADDR_VAR 0 8
 577: PUSH
 578: CALL_OW 45
 582: ST_TO_ADDR
// end ;
 583: LD_VAR 0 8
 587: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 588: LD_INT 0
 590: PPUSH
 591: PPUSH
 592: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_INT 22
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: LD_INT 21
 610: PUSH
 611: LD_INT 1
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: PUSH
 618: LD_INT 50
 620: PUSH
 621: EMPTY
 622: LIST
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: LIST
 628: PPUSH
 629: CALL_OW 69
 633: PUSH
 634: LD_EXP 9
 638: PUSH
 639: LD_EXP 10
 643: PUSH
 644: LD_EXP 11
 648: PUSH
 649: LD_EXP 12
 653: PUSH
 654: LD_EXP 13
 658: PUSH
 659: LD_EXP 14
 663: PUSH
 664: LD_EXP 15
 668: PUSH
 669: LD_EXP 16
 673: PUSH
 674: LD_EXP 18
 678: PUSH
 679: LD_EXP 17
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: DIFF
 696: ST_TO_ADDR
// if not filter then
 697: LD_VAR 0 4
 701: NOT
 702: IFFALSE 706
// exit ;
 704: GO 733
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: LD_VAR 0 4
 715: PPUSH
 716: LD_INT 26
 718: PUSH
 719: LD_VAR 0 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PPUSH
 728: CALL_OW 72
 732: ST_TO_ADDR
// end ;
 733: LD_VAR 0 2
 737: RET
// export function SayX ( units , ident ) ; var i ; begin
 738: LD_INT 0
 740: PPUSH
 741: PPUSH
// result := false ;
 742: LD_ADDR_VAR 0 3
 746: PUSH
 747: LD_INT 0
 749: ST_TO_ADDR
// if not units then
 750: LD_VAR 0 1
 754: NOT
 755: IFFALSE 759
// exit ;
 757: GO 813
// for i in units do
 759: LD_ADDR_VAR 0 4
 763: PUSH
 764: LD_VAR 0 1
 768: PUSH
 769: FOR_IN
 770: IFFALSE 811
// if IsOk ( i ) then
 772: LD_VAR 0 4
 776: PPUSH
 777: CALL_OW 302
 781: IFFALSE 809
// begin Say ( i , ident ) ;
 783: LD_VAR 0 4
 787: PPUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: CALL_OW 88
// result := i ;
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_VAR 0 4
 806: ST_TO_ADDR
// break ;
 807: GO 811
// end ;
 809: GO 769
 811: POP
 812: POP
// end ;
 813: LD_VAR 0 3
 817: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 818: LD_INT 0
 820: PPUSH
 821: PPUSH
 822: PPUSH
 823: PPUSH
 824: PPUSH
// if not un or not IsOk ( un ) then
 825: LD_VAR 0 1
 829: NOT
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 302
 840: NOT
 841: OR
 842: IFFALSE 846
// exit ;
 844: GO 1136
// side := GetSide ( un ) ;
 846: LD_ADDR_VAR 0 9
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 255
 860: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 861: LD_ADDR_VAR 0 7
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_VAR 0 9
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: PUSH
 878: LD_INT 30
 880: PUSH
 881: LD_INT 32
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 50
 890: PUSH
 891: EMPTY
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 69
 910: PUSH
 911: LD_VAR 0 2
 915: DIFF
 916: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 917: LD_ADDR_VAR 0 8
 921: PUSH
 922: LD_INT 22
 924: PUSH
 925: LD_VAR 0 9
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 30
 936: PUSH
 937: LD_INT 5
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: CALL_OW 69
 952: ST_TO_ADDR
// if not filter then
 953: LD_VAR 0 7
 957: NOT
 958: IFFALSE 1048
// begin ComMoveXY ( un , x , y ) ;
 960: LD_VAR 0 1
 964: PPUSH
 965: LD_VAR 0 3
 969: PPUSH
 970: LD_VAR 0 4
 974: PPUSH
 975: CALL_OW 111
// if barracks then
 979: LD_VAR 0 8
 983: IFFALSE 1046
// for i in barracks do
 985: LD_ADDR_VAR 0 6
 989: PUSH
 990: LD_VAR 0 8
 994: PUSH
 995: FOR_IN
 996: IFFALSE 1044
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
 998: LD_VAR 0 6
1002: PPUSH
1003: CALL_OW 313
1007: PUSH
1008: LD_INT 6
1010: LESS
1011: PUSH
1012: LD_VAR 0 6
1016: PPUSH
1017: CALL_OW 302
1021: AND
1022: IFFALSE 1042
// begin AddComEnterUnit ( un , i ) ;
1024: LD_VAR 0 1
1028: PPUSH
1029: LD_VAR 0 6
1033: PPUSH
1034: CALL_OW 180
// exit ;
1038: POP
1039: POP
1040: GO 1136
// end ; end ;
1042: GO 995
1044: POP
1045: POP
// end else
1046: GO 1136
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1048: LD_ADDR_VAR 0 7
1052: PUSH
1053: LD_VAR 0 1
1057: PPUSH
1058: LD_VAR 0 7
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL 34622 0 4
1073: ST_TO_ADDR
// for i in filter do
1074: LD_ADDR_VAR 0 6
1078: PUSH
1079: LD_VAR 0 7
1083: PUSH
1084: FOR_IN
1085: IFFALSE 1134
// if GetTag ( i ) <> 7 then
1087: LD_VAR 0 6
1091: PPUSH
1092: CALL_OW 110
1096: PUSH
1097: LD_INT 7
1099: NONEQUAL
1100: IFFALSE 1132
// begin ComEnterUnit ( un , i ) ;
1102: LD_VAR 0 1
1106: PPUSH
1107: LD_VAR 0 6
1111: PPUSH
1112: CALL_OW 120
// SetTag ( i , 7 ) ;
1116: LD_VAR 0 6
1120: PPUSH
1121: LD_INT 7
1123: PPUSH
1124: CALL_OW 109
// exit ;
1128: POP
1129: POP
1130: GO 1136
// end ;
1132: GO 1084
1134: POP
1135: POP
// end ; end ;
1136: LD_VAR 0 5
1140: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1141: LD_INT 0
1143: PPUSH
1144: PPUSH
1145: PPUSH
// if not base then
1146: LD_VAR 0 1
1150: NOT
1151: IFFALSE 1155
// exit ;
1153: GO 1213
// tmp := GetEnergy ( GetBase ( base ) ) ;
1155: LD_ADDR_VAR 0 4
1159: PUSH
1160: LD_VAR 0 1
1164: PPUSH
1165: CALL_OW 274
1169: PPUSH
1170: CALL_OW 278
1174: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1175: LD_VAR 0 4
1179: PUSH
1180: LD_INT 1
1182: ARRAY
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 4
1191: ARRAY
1192: GREATER
1193: IFFALSE 1205
// result := true else
1195: LD_ADDR_VAR 0 2
1199: PUSH
1200: LD_INT 1
1202: ST_TO_ADDR
1203: GO 1213
// result := false ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_INT 0
1212: ST_TO_ADDR
// end ;
1213: LD_VAR 0 2
1217: RET
// export function FilterPeople ( side ) ; begin
1218: LD_INT 0
1220: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_VAR 0 1
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 21
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PPUSH
1252: CALL_OW 69
1256: ST_TO_ADDR
// end ;
1257: LD_VAR 0 2
1261: RET
// export function FilterDrivers ( side ) ; begin
1262: LD_INT 0
1264: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_INT 22
1272: PUSH
1273: LD_VAR 0 1
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 3
1284: PUSH
1285: LD_INT 56
1287: PUSH
1288: EMPTY
1289: LIST
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: ST_TO_ADDR
// end ;
1304: LD_VAR 0 2
1308: RET
// export function FilterPeopleArea ( side , area ) ; begin
1309: LD_INT 0
1311: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1312: LD_ADDR_VAR 0 3
1316: PUSH
1317: LD_VAR 0 2
1321: PPUSH
1322: LD_INT 22
1324: PUSH
1325: LD_INT 1
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: LD_INT 21
1334: PUSH
1335: LD_INT 1
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 70
1350: ST_TO_ADDR
// end ;
1351: LD_VAR 0 3
1355: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1356: LD_INT 0
1358: PPUSH
1359: PPUSH
1360: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1361: LD_ADDR_VAR 0 5
1365: PUSH
1366: LD_VAR 0 2
1370: PPUSH
1371: LD_INT 22
1373: PUSH
1374: LD_INT 1
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 21
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 58
1396: PUSH
1397: EMPTY
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: PPUSH
1409: CALL_OW 70
1413: ST_TO_ADDR
// result := [ ] ;
1414: LD_ADDR_VAR 0 3
1418: PUSH
1419: EMPTY
1420: ST_TO_ADDR
// if not tmp then
1421: LD_VAR 0 5
1425: NOT
1426: IFFALSE 1430
// exit ;
1428: GO 1482
// for i in tmp do
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: FOR_IN
1441: IFFALSE 1466
// result := result union IsDrivenBy ( i ) ;
1443: LD_ADDR_VAR 0 3
1447: PUSH
1448: LD_VAR 0 3
1452: PUSH
1453: LD_VAR 0 4
1457: PPUSH
1458: CALL_OW 311
1462: UNION
1463: ST_TO_ADDR
1464: GO 1440
1466: POP
1467: POP
// result := result diff 0 ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_VAR 0 3
1477: PUSH
1478: LD_INT 0
1480: DIFF
1481: ST_TO_ADDR
// end ;
1482: LD_VAR 0 3
1486: RET
// export function FilterBuildings ( side ) ; begin
1487: LD_INT 0
1489: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: LD_INT 22
1497: PUSH
1498: LD_VAR 0 1
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 3
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PPUSH
1521: CALL_OW 69
1525: ST_TO_ADDR
// end ;
1526: LD_VAR 0 2
1530: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1531: LD_INT 0
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side = 0 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 0
1544: ST_TO_ADDR
// uc_nation = 0 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 0
1552: ST_TO_ADDR
// nat_area := wildArea ;
1553: LD_ADDR_VAR 0 4
1557: PUSH
1558: LD_INT 3
1560: ST_TO_ADDR
// InitHc ;
1561: CALL_OW 19
// for i = 1 to 4 do
1565: LD_ADDR_VAR 0 2
1569: PUSH
1570: DOUBLE
1571: LD_INT 1
1573: DEC
1574: ST_TO_ADDR
1575: LD_INT 4
1577: PUSH
1578: FOR_TO
1579: IFFALSE 1634
// begin hc_class = 18 ;
1581: LD_ADDR_OWVAR 28
1585: PUSH
1586: LD_INT 18
1588: ST_TO_ADDR
// hc_gallery =  ;
1589: LD_ADDR_OWVAR 33
1593: PUSH
1594: LD_STRING 
1596: ST_TO_ADDR
// hc_face_number = 1 ;
1597: LD_ADDR_OWVAR 34
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// animal := CreateHuman ;
1605: LD_ADDR_VAR 0 3
1609: PUSH
1610: CALL_OW 44
1614: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1615: LD_VAR 0 3
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
// end ;
1632: GO 1578
1634: POP
1635: POP
// for i = 1 to 6 do
1636: LD_ADDR_VAR 0 2
1640: PUSH
1641: DOUBLE
1642: LD_INT 1
1644: DEC
1645: ST_TO_ADDR
1646: LD_INT 6
1648: PUSH
1649: FOR_TO
1650: IFFALSE 1721
// begin hc_class = class_tiger ;
1652: LD_ADDR_OWVAR 28
1656: PUSH
1657: LD_INT 14
1659: ST_TO_ADDR
// hc_gallery =  ;
1660: LD_ADDR_OWVAR 33
1664: PUSH
1665: LD_STRING 
1667: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1668: LD_ADDR_OWVAR 35
1672: PUSH
1673: LD_INT 0
1675: PPUSH
1676: LD_INT 10
1678: PPUSH
1679: CALL_OW 12
1683: ST_TO_ADDR
// hc_face_number = 3 ;
1684: LD_ADDR_OWVAR 34
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// animal := CreateHuman ;
1692: LD_ADDR_VAR 0 3
1696: PUSH
1697: CALL_OW 44
1701: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_VAR 0 4
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL_OW 49
// end ;
1719: GO 1649
1721: POP
1722: POP
// for i = 1 to 2 do
1723: LD_ADDR_VAR 0 2
1727: PUSH
1728: DOUBLE
1729: LD_INT 1
1731: DEC
1732: ST_TO_ADDR
1733: LD_INT 2
1735: PUSH
1736: FOR_TO
1737: IFFALSE 1800
// begin hc_class = 21 ;
1739: LD_ADDR_OWVAR 28
1743: PUSH
1744: LD_INT 21
1746: ST_TO_ADDR
// hc_gallery =  ;
1747: LD_ADDR_OWVAR 33
1751: PUSH
1752: LD_STRING 
1754: ST_TO_ADDR
// hc_agressivity = 0 ;
1755: LD_ADDR_OWVAR 35
1759: PUSH
1760: LD_INT 0
1762: ST_TO_ADDR
// hc_face_number = 5 ;
1763: LD_ADDR_OWVAR 34
1767: PUSH
1768: LD_INT 5
1770: ST_TO_ADDR
// animal := CreateHuman ;
1771: LD_ADDR_VAR 0 3
1775: PUSH
1776: CALL_OW 44
1780: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1781: LD_VAR 0 3
1785: PPUSH
1786: LD_VAR 0 4
1790: PPUSH
1791: LD_INT 0
1793: PPUSH
1794: CALL_OW 49
// end ;
1798: GO 1736
1800: POP
1801: POP
// for i = 1 to 6 do
1802: LD_ADDR_VAR 0 2
1806: PUSH
1807: DOUBLE
1808: LD_INT 1
1810: DEC
1811: ST_TO_ADDR
1812: LD_INT 6
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1871
// begin hc_class = 13 ;
1818: LD_ADDR_OWVAR 28
1822: PUSH
1823: LD_INT 13
1825: ST_TO_ADDR
// hc_gallery =  ;
1826: LD_ADDR_OWVAR 33
1830: PUSH
1831: LD_STRING 
1833: ST_TO_ADDR
// hc_face_number = 4 ;
1834: LD_ADDR_OWVAR 34
1838: PUSH
1839: LD_INT 4
1841: ST_TO_ADDR
// animal := CreateHuman ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 44
1851: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_VAR 0 4
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL_OW 49
// end ;
1869: GO 1815
1871: POP
1872: POP
// for i = 1 to 2 do
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PUSH
1886: FOR_TO
1887: IFFALSE 1946
// begin hc_class = 20 ;
1889: LD_ADDR_OWVAR 28
1893: PUSH
1894: LD_INT 20
1896: ST_TO_ADDR
// hc_gallery =  ;
1897: LD_ADDR_OWVAR 33
1901: PUSH
1902: LD_STRING 
1904: ST_TO_ADDR
// hc_face_number = 2 ;
1905: LD_ADDR_OWVAR 34
1909: PUSH
1910: LD_INT 2
1912: ST_TO_ADDR
// animal := CreateHuman ;
1913: LD_ADDR_VAR 0 3
1917: PUSH
1918: CALL_OW 44
1922: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1923: LD_VAR 0 3
1927: PPUSH
1928: LD_INT 101
1930: PPUSH
1931: LD_INT 37
1933: PPUSH
1934: LD_INT 3
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 50
// end ;
1944: GO 1886
1946: POP
1947: POP
// for i = 1 to 1 do
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: DOUBLE
1954: LD_INT 1
1956: DEC
1957: ST_TO_ADDR
1958: LD_INT 1
1960: PUSH
1961: FOR_TO
1962: IFFALSE 2009
// begin vc_chassis := 31 ;
1964: LD_ADDR_OWVAR 37
1968: PUSH
1969: LD_INT 31
1971: ST_TO_ADDR
// vc_control := control_rider ;
1972: LD_ADDR_OWVAR 38
1976: PUSH
1977: LD_INT 4
1979: ST_TO_ADDR
// animal := CreateVehicle ;
1980: LD_ADDR_VAR 0 3
1984: PUSH
1985: CALL_OW 45
1989: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1990: LD_VAR 0 3
1994: PPUSH
1995: LD_VAR 0 4
1999: PPUSH
2000: LD_INT 0
2002: PPUSH
2003: CALL_OW 49
// end ;
2007: GO 1961
2009: POP
2010: POP
// end ;
2011: LD_VAR 0 1
2015: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2016: LD_INT 0
2018: PPUSH
2019: PPUSH
2020: PPUSH
2021: PPUSH
// result := [ ] ;
2022: LD_ADDR_VAR 0 2
2026: PUSH
2027: EMPTY
2028: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2029: LD_ADDR_VAR 0 4
2033: PUSH
2034: LD_INT 81
2036: PUSH
2037: LD_VAR 0 1
2041: PPUSH
2042: CALL_OW 255
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 91
2053: PUSH
2054: LD_VAR 0 1
2058: PUSH
2059: LD_INT 15
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 2
2069: PUSH
2070: LD_INT 30
2072: PUSH
2073: LD_INT 32
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 30
2082: PUSH
2083: LD_INT 33
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL_OW 69
2104: ST_TO_ADDR
// if not tmp then
2105: LD_VAR 0 4
2109: NOT
2110: IFFALSE 2114
// exit ;
2112: GO 2183
// for i in tmp do
2114: LD_ADDR_VAR 0 3
2118: PUSH
2119: LD_VAR 0 4
2123: PUSH
2124: FOR_IN
2125: IFFALSE 2181
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2127: LD_ADDR_VAR 0 5
2131: PUSH
2132: LD_VAR 0 3
2136: PPUSH
2137: CALL_OW 274
2141: PPUSH
2142: CALL_OW 278
2146: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2147: LD_VAR 0 5
2151: PUSH
2152: LD_INT 4
2154: ARRAY
2155: PUSH
2156: LD_VAR 0 5
2160: PUSH
2161: LD_INT 1
2163: ARRAY
2164: GREATER
2165: IFFALSE 2179
// begin result := i ;
2167: LD_ADDR_VAR 0 2
2171: PUSH
2172: LD_VAR 0 3
2176: ST_TO_ADDR
// break ;
2177: GO 2181
// end ; end ;
2179: GO 2124
2181: POP
2182: POP
// end ;
2183: LD_VAR 0 2
2187: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2188: LD_INT 0
2190: PPUSH
2191: PPUSH
2192: PPUSH
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
// result := false ;
2206: LD_ADDR_VAR 0 2
2210: PUSH
2211: LD_INT 0
2213: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2214: LD_VAR 0 1
2218: NOT
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: CALL_OW 266
2229: PUSH
2230: LD_INT 32
2232: PUSH
2233: LD_INT 33
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: IN
2240: NOT
2241: OR
2242: IFFALSE 2246
// exit ;
2244: GO 3406
// nat := GetNation ( tower ) ;
2246: LD_ADDR_VAR 0 11
2250: PUSH
2251: LD_VAR 0 1
2255: PPUSH
2256: CALL_OW 248
2260: ST_TO_ADDR
// side := GetSide ( tower ) ;
2261: LD_ADDR_VAR 0 15
2265: PUSH
2266: LD_VAR 0 1
2270: PPUSH
2271: CALL_OW 255
2275: ST_TO_ADDR
// x := GetX ( tower ) ;
2276: LD_ADDR_VAR 0 9
2280: PUSH
2281: LD_VAR 0 1
2285: PPUSH
2286: CALL_OW 250
2290: ST_TO_ADDR
// y := GetY ( tower ) ;
2291: LD_ADDR_VAR 0 10
2295: PUSH
2296: LD_VAR 0 1
2300: PPUSH
2301: CALL_OW 251
2305: ST_TO_ADDR
// if not x or not y then
2306: LD_VAR 0 9
2310: NOT
2311: PUSH
2312: LD_VAR 0 10
2316: NOT
2317: OR
2318: IFFALSE 2322
// exit ;
2320: GO 3406
// weapon := 0 ;
2322: LD_ADDR_VAR 0 17
2326: PUSH
2327: LD_INT 0
2329: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2330: LD_ADDR_VAR 0 16
2334: PUSH
2335: LD_INT 42
2337: PUSH
2338: LD_INT 43
2340: PUSH
2341: LD_INT 44
2343: PUSH
2344: LD_INT 46
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: ST_TO_ADDR
// if not fac_list then
2353: LD_VAR 0 16
2357: NOT
2358: IFFALSE 2362
// exit ;
2360: GO 3406
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_INT 4
2369: PUSH
2370: LD_INT 5
2372: PUSH
2373: LD_INT 9
2375: PUSH
2376: LD_INT 10
2378: PUSH
2379: LD_INT 6
2381: PUSH
2382: LD_INT 7
2384: PUSH
2385: LD_INT 11
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 27
2399: PUSH
2400: LD_INT 28
2402: PUSH
2403: LD_INT 26
2405: PUSH
2406: LD_INT 30
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 43
2417: PUSH
2418: LD_INT 44
2420: PUSH
2421: LD_INT 46
2423: PUSH
2424: LD_INT 45
2426: PUSH
2427: LD_INT 47
2429: PUSH
2430: LD_INT 49
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: PUSH
2446: LD_VAR 0 11
2450: ARRAY
2451: ST_TO_ADDR
// for i in list do
2452: LD_ADDR_VAR 0 7
2456: PUSH
2457: LD_VAR 0 4
2461: PUSH
2462: FOR_IN
2463: IFFALSE 2496
// if not i in fac_list then
2465: LD_VAR 0 7
2469: PUSH
2470: LD_VAR 0 16
2474: IN
2475: NOT
2476: IFFALSE 2494
// list := list diff i ;
2478: LD_ADDR_VAR 0 4
2482: PUSH
2483: LD_VAR 0 4
2487: PUSH
2488: LD_VAR 0 7
2492: DIFF
2493: ST_TO_ADDR
2494: GO 2462
2496: POP
2497: POP
// if not list then
2498: LD_VAR 0 4
2502: NOT
2503: IFFALSE 2507
// exit ;
2505: GO 3406
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2507: LD_VAR 0 11
2511: PUSH
2512: LD_INT 3
2514: EQUAL
2515: PUSH
2516: LD_INT 49
2518: PUSH
2519: LD_VAR 0 4
2523: IN
2524: AND
2525: PUSH
2526: LD_INT 31
2528: PPUSH
2529: LD_VAR 0 15
2533: PPUSH
2534: CALL_OW 321
2538: PUSH
2539: LD_INT 2
2541: EQUAL
2542: AND
2543: IFFALSE 2603
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2545: LD_INT 22
2547: PUSH
2548: LD_VAR 0 15
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 35
2559: PUSH
2560: LD_INT 49
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 91
2569: PUSH
2570: LD_VAR 0 1
2574: PUSH
2575: LD_INT 10
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 69
2592: NOT
2593: IFFALSE 2603
// weapon := ru_time_lapser ;
2595: LD_ADDR_VAR 0 17
2599: PUSH
2600: LD_INT 49
2602: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2603: LD_VAR 0 11
2607: PUSH
2608: LD_INT 1
2610: PUSH
2611: LD_INT 2
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: IN
2618: PUSH
2619: LD_INT 11
2621: PUSH
2622: LD_VAR 0 4
2626: IN
2627: PUSH
2628: LD_INT 30
2630: PUSH
2631: LD_VAR 0 4
2635: IN
2636: OR
2637: AND
2638: PUSH
2639: LD_INT 6
2641: PPUSH
2642: LD_VAR 0 15
2646: PPUSH
2647: CALL_OW 321
2651: PUSH
2652: LD_INT 2
2654: EQUAL
2655: AND
2656: IFFALSE 2821
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2658: LD_INT 22
2660: PUSH
2661: LD_VAR 0 15
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: LD_INT 2
2672: PUSH
2673: LD_INT 35
2675: PUSH
2676: LD_INT 11
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 35
2685: PUSH
2686: LD_INT 30
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 91
2700: PUSH
2701: LD_VAR 0 1
2705: PUSH
2706: LD_INT 18
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: LIST
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: PPUSH
2719: CALL_OW 69
2723: NOT
2724: PUSH
2725: LD_INT 22
2727: PUSH
2728: LD_VAR 0 15
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 2
2739: PUSH
2740: LD_INT 30
2742: PUSH
2743: LD_INT 32
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 30
2752: PUSH
2753: LD_INT 33
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: LIST
2764: PUSH
2765: LD_INT 91
2767: PUSH
2768: LD_VAR 0 1
2772: PUSH
2773: LD_INT 12
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: EMPTY
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: PUSH
2794: LD_INT 2
2796: GREATER
2797: AND
2798: IFFALSE 2821
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2800: LD_ADDR_VAR 0 17
2804: PUSH
2805: LD_INT 11
2807: PUSH
2808: LD_INT 30
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_VAR 0 11
2819: ARRAY
2820: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2821: LD_VAR 0 17
2825: NOT
2826: PUSH
2827: LD_INT 40
2829: PPUSH
2830: LD_VAR 0 15
2834: PPUSH
2835: CALL_OW 321
2839: PUSH
2840: LD_INT 2
2842: EQUAL
2843: AND
2844: PUSH
2845: LD_INT 7
2847: PUSH
2848: LD_VAR 0 4
2852: IN
2853: PUSH
2854: LD_INT 28
2856: PUSH
2857: LD_VAR 0 4
2861: IN
2862: OR
2863: PUSH
2864: LD_INT 45
2866: PUSH
2867: LD_VAR 0 4
2871: IN
2872: OR
2873: AND
2874: IFFALSE 3128
// begin hex := GetHexInfo ( x , y ) ;
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: LD_VAR 0 9
2885: PPUSH
2886: LD_VAR 0 10
2890: PPUSH
2891: CALL_OW 546
2895: ST_TO_ADDR
// if hex [ 1 ] then
2896: LD_VAR 0 3
2900: PUSH
2901: LD_INT 1
2903: ARRAY
2904: IFFALSE 2908
// exit ;
2906: GO 3406
// height := hex [ 2 ] ;
2908: LD_ADDR_VAR 0 14
2912: PUSH
2913: LD_VAR 0 3
2917: PUSH
2918: LD_INT 2
2920: ARRAY
2921: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2922: LD_ADDR_VAR 0 13
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: LD_INT 2
2932: PUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 5
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: ST_TO_ADDR
// for i in tmp do
2945: LD_ADDR_VAR 0 7
2949: PUSH
2950: LD_VAR 0 13
2954: PUSH
2955: FOR_IN
2956: IFFALSE 3126
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2958: LD_ADDR_VAR 0 8
2962: PUSH
2963: LD_VAR 0 9
2967: PPUSH
2968: LD_VAR 0 7
2972: PPUSH
2973: LD_INT 5
2975: PPUSH
2976: CALL_OW 272
2980: PUSH
2981: LD_VAR 0 10
2985: PPUSH
2986: LD_VAR 0 7
2990: PPUSH
2991: LD_INT 5
2993: PPUSH
2994: CALL_OW 273
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3003: LD_VAR 0 8
3007: PUSH
3008: LD_INT 1
3010: ARRAY
3011: PPUSH
3012: LD_VAR 0 8
3016: PUSH
3017: LD_INT 2
3019: ARRAY
3020: PPUSH
3021: CALL_OW 488
3025: IFFALSE 3124
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3027: LD_ADDR_VAR 0 3
3031: PUSH
3032: LD_VAR 0 8
3036: PUSH
3037: LD_INT 1
3039: ARRAY
3040: PPUSH
3041: LD_VAR 0 8
3045: PUSH
3046: LD_INT 2
3048: ARRAY
3049: PPUSH
3050: CALL_OW 546
3054: ST_TO_ADDR
// if hex [ 1 ] then
3055: LD_VAR 0 3
3059: PUSH
3060: LD_INT 1
3062: ARRAY
3063: IFFALSE 3067
// continue ;
3065: GO 2955
// h := hex [ 2 ] ;
3067: LD_ADDR_VAR 0 12
3071: PUSH
3072: LD_VAR 0 3
3076: PUSH
3077: LD_INT 2
3079: ARRAY
3080: ST_TO_ADDR
// if h + 7 < height then
3081: LD_VAR 0 12
3085: PUSH
3086: LD_INT 7
3088: PLUS
3089: PUSH
3090: LD_VAR 0 14
3094: LESS
3095: IFFALSE 3124
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3097: LD_ADDR_VAR 0 17
3101: PUSH
3102: LD_INT 7
3104: PUSH
3105: LD_INT 28
3107: PUSH
3108: LD_INT 45
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: PUSH
3116: LD_VAR 0 11
3120: ARRAY
3121: ST_TO_ADDR
// break ;
3122: GO 3126
// end ; end ; end ;
3124: GO 2955
3126: POP
3127: POP
// end ; if not weapon then
3128: LD_VAR 0 17
3132: NOT
3133: IFFALSE 3288
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3135: LD_ADDR_VAR 0 4
3139: PUSH
3140: LD_VAR 0 4
3144: PUSH
3145: LD_INT 11
3147: PUSH
3148: LD_INT 30
3150: PUSH
3151: LD_INT 49
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: LIST
3158: DIFF
3159: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3160: LD_ADDR_VAR 0 13
3164: PUSH
3165: LD_INT 22
3167: PUSH
3168: LD_VAR 0 15
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 91
3179: PUSH
3180: LD_VAR 0 1
3184: PUSH
3185: LD_INT 6
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 3
3195: PUSH
3196: LD_INT 35
3198: PUSH
3199: LD_INT 0
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: PPUSH
3215: CALL_OW 69
3219: ST_TO_ADDR
// for i in tmp do
3220: LD_ADDR_VAR 0 7
3224: PUSH
3225: LD_VAR 0 13
3229: PUSH
3230: FOR_IN
3231: IFFALSE 3256
// list := list diff GetBWeapon ( i ) ;
3233: LD_ADDR_VAR 0 4
3237: PUSH
3238: LD_VAR 0 4
3242: PUSH
3243: LD_VAR 0 7
3247: PPUSH
3248: CALL_OW 269
3252: DIFF
3253: ST_TO_ADDR
3254: GO 3230
3256: POP
3257: POP
// if list then
3258: LD_VAR 0 4
3262: IFFALSE 3288
// weapon := list [ rand ( 1 , list ) ] ;
3264: LD_ADDR_VAR 0 17
3268: PUSH
3269: LD_VAR 0 4
3273: PUSH
3274: LD_INT 1
3276: PPUSH
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL_OW 12
3286: ARRAY
3287: ST_TO_ADDR
// end ; if weapon then
3288: LD_VAR 0 17
3292: IFFALSE 3406
// begin tmp := CostOfWeapon ( weapon ) ;
3294: LD_ADDR_VAR 0 13
3298: PUSH
3299: LD_VAR 0 17
3303: PPUSH
3304: CALL_OW 451
3308: ST_TO_ADDR
// j := GetBase ( tower ) ;
3309: LD_ADDR_VAR 0 8
3313: PUSH
3314: LD_VAR 0 1
3318: PPUSH
3319: CALL_OW 274
3323: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3324: LD_VAR 0 8
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: CALL_OW 275
3336: PUSH
3337: LD_VAR 0 13
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: GREATEREQUAL
3346: PUSH
3347: LD_VAR 0 8
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 275
3359: PUSH
3360: LD_VAR 0 13
3364: PUSH
3365: LD_INT 2
3367: ARRAY
3368: GREATEREQUAL
3369: AND
3370: PUSH
3371: LD_VAR 0 8
3375: PPUSH
3376: LD_INT 3
3378: PPUSH
3379: CALL_OW 275
3383: PUSH
3384: LD_VAR 0 13
3388: PUSH
3389: LD_INT 3
3391: ARRAY
3392: GREATEREQUAL
3393: AND
3394: IFFALSE 3406
// result := weapon ;
3396: LD_ADDR_VAR 0 2
3400: PUSH
3401: LD_VAR 0 17
3405: ST_TO_ADDR
// end ; end ; end_of_file
3406: LD_VAR 0 2
3410: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3411: LD_INT 0
3413: PPUSH
3414: PPUSH
3415: PPUSH
3416: PPUSH
3417: PPUSH
3418: PPUSH
// uc_side := 1 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 1
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3435: LD_ADDR_EXP 9
3439: PUSH
3440: LD_STRING JMM
3442: PPUSH
3443: LD_EXP 1
3447: NOT
3448: PPUSH
3449: LD_EXP 2
3453: PPUSH
3454: CALL 29241 0 3
3458: ST_TO_ADDR
// team := [ JMM ] ;
3459: LD_ADDR_VAR 0 3
3463: PUSH
3464: LD_EXP 9
3468: PUSH
3469: EMPTY
3470: LIST
3471: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3472: LD_STRING BrownIn07
3474: PPUSH
3475: LD_EXP 1
3479: PPUSH
3480: CALL_OW 30
3484: IFFALSE 3510
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3486: LD_ADDR_EXP 10
3490: PUSH
3491: LD_STRING Brown
3493: PPUSH
3494: LD_EXP 1
3498: NOT
3499: PPUSH
3500: LD_EXP 2
3504: PPUSH
3505: CALL 29241 0 3
3509: ST_TO_ADDR
// if Brown then
3510: LD_EXP 10
3514: IFFALSE 3532
// team := team ^ Brown ;
3516: LD_ADDR_VAR 0 3
3520: PUSH
3521: LD_VAR 0 3
3525: PUSH
3526: LD_EXP 10
3530: ADD
3531: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3532: LD_STRING DonaldsonIn07
3534: PPUSH
3535: LD_EXP 1
3539: PPUSH
3540: CALL_OW 30
3544: IFFALSE 3570
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3546: LD_ADDR_EXP 11
3550: PUSH
3551: LD_STRING Donaldson
3553: PPUSH
3554: LD_EXP 1
3558: NOT
3559: PPUSH
3560: LD_EXP 2
3564: PPUSH
3565: CALL 29241 0 3
3569: ST_TO_ADDR
// if Donaldson then
3570: LD_EXP 11
3574: IFFALSE 3592
// team := team ^ Donaldson ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: LD_VAR 0 3
3585: PUSH
3586: LD_EXP 11
3590: ADD
3591: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3592: LD_STRING BobbyIn07
3594: PPUSH
3595: LD_EXP 1
3599: PPUSH
3600: CALL_OW 30
3604: IFFALSE 3630
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3606: LD_ADDR_EXP 12
3610: PUSH
3611: LD_STRING Bobby
3613: PPUSH
3614: LD_EXP 1
3618: NOT
3619: PPUSH
3620: LD_EXP 2
3624: PPUSH
3625: CALL 29241 0 3
3629: ST_TO_ADDR
// if Bobby then
3630: LD_EXP 12
3634: IFFALSE 3652
// team := team ^ Bobby ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_VAR 0 3
3645: PUSH
3646: LD_EXP 12
3650: ADD
3651: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3652: LD_STRING CyrusIn07
3654: PPUSH
3655: LD_EXP 1
3659: PPUSH
3660: CALL_OW 30
3664: IFFALSE 3690
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3666: LD_ADDR_EXP 13
3670: PUSH
3671: LD_STRING Cyrus
3673: PPUSH
3674: LD_EXP 1
3678: NOT
3679: PPUSH
3680: LD_EXP 2
3684: PPUSH
3685: CALL 29241 0 3
3689: ST_TO_ADDR
// if Cyrus then
3690: LD_EXP 13
3694: IFFALSE 3712
// team := team ^ Cyrus ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_VAR 0 3
3705: PUSH
3706: LD_EXP 13
3710: ADD
3711: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3712: LD_STRING LisaIn07
3714: PPUSH
3715: LD_EXP 1
3719: PPUSH
3720: CALL_OW 30
3724: IFFALSE 3750
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3726: LD_ADDR_EXP 14
3730: PUSH
3731: LD_STRING Lisa
3733: PPUSH
3734: LD_EXP 1
3738: NOT
3739: PPUSH
3740: LD_EXP 2
3744: PPUSH
3745: CALL 29241 0 3
3749: ST_TO_ADDR
// if Lisa then
3750: LD_EXP 14
3754: IFFALSE 3772
// team := team ^ Lisa ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PUSH
3766: LD_EXP 14
3770: ADD
3771: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3772: LD_STRING GladstoneIn07
3774: PPUSH
3775: LD_EXP 1
3779: PPUSH
3780: CALL_OW 30
3784: IFFALSE 3810
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3786: LD_ADDR_EXP 16
3790: PUSH
3791: LD_STRING Gladstone
3793: PPUSH
3794: LD_EXP 1
3798: NOT
3799: PPUSH
3800: LD_EXP 2
3804: PPUSH
3805: CALL 29241 0 3
3809: ST_TO_ADDR
// if Gladstone then
3810: LD_EXP 16
3814: IFFALSE 3832
// team := team ^ Gladstone ;
3816: LD_ADDR_VAR 0 3
3820: PUSH
3821: LD_VAR 0 3
3825: PUSH
3826: LD_EXP 16
3830: ADD
3831: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3832: LD_STRING KhatamIn07
3834: PPUSH
3835: LD_EXP 1
3839: PPUSH
3840: CALL_OW 30
3844: IFFALSE 3870
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3846: LD_ADDR_EXP 17
3850: PUSH
3851: LD_STRING Khatam
3853: PPUSH
3854: LD_EXP 1
3858: NOT
3859: PPUSH
3860: LD_EXP 2
3864: PPUSH
3865: CALL 29241 0 3
3869: ST_TO_ADDR
// if Khatam then
3870: LD_EXP 17
3874: IFFALSE 3892
// team := team ^ Khatam ;
3876: LD_ADDR_VAR 0 3
3880: PUSH
3881: LD_VAR 0 3
3885: PUSH
3886: LD_EXP 17
3890: ADD
3891: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3892: LD_ADDR_VAR 0 4
3896: PUSH
3897: LD_STRING 07_others
3899: PPUSH
3900: CALL_OW 31
3904: ST_TO_ADDR
// if others then
3905: LD_VAR 0 4
3909: IFFALSE 3927
// team := team ^ others ;
3911: LD_ADDR_VAR 0 3
3915: PUSH
3916: LD_VAR 0 3
3920: PUSH
3921: LD_VAR 0 4
3925: ADD
3926: ST_TO_ADDR
// if debug then
3927: LD_EXP 1
3931: IFFALSE 4005
// begin InitHc ;
3933: CALL_OW 19
// for i = 1 to 4 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 4
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4003
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 4
3980: PPUSH
3981: CALL_OW 380
// team := team ^ CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: LD_VAR 0 3
3994: PUSH
3995: CALL_OW 44
3999: ADD
4000: ST_TO_ADDR
// end ;
4001: GO 3950
4003: POP
4004: POP
// end ; m := 0 ;
4005: LD_ADDR_VAR 0 6
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// for i in team do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: LD_VAR 0 3
4022: PUSH
4023: FOR_IN
4024: IFFALSE 4231
// if GetClass ( i ) = 3 then
4026: LD_VAR 0 2
4030: PPUSH
4031: CALL_OW 257
4035: PUSH
4036: LD_INT 3
4038: EQUAL
4039: IFFALSE 4187
// begin m := m + 1 ;
4041: LD_ADDR_VAR 0 6
4045: PUSH
4046: LD_VAR 0 6
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_INT 1
4062: PPUSH
4063: LD_INT 1
4065: PPUSH
4066: LD_INT 2
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: LD_INT 1
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_VAR 0 6
4088: PUSH
4089: LD_INT 4
4091: MOD
4092: PUSH
4093: LD_INT 1
4095: PLUS
4096: ARRAY
4097: PPUSH
4098: LD_INT 2
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: LD_INT 4
4106: PUSH
4107: LD_INT 5
4109: PUSH
4110: LD_INT 3
4112: PUSH
4113: LD_INT 11
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: PUSH
4122: LD_VAR 0 6
4126: PUSH
4127: LD_INT 4
4129: MOD
4130: PUSH
4131: LD_INT 1
4133: PLUS
4134: ARRAY
4135: PPUSH
4136: LD_INT 60
4138: PPUSH
4139: CALL 500 0 7
4143: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4144: LD_VAR 0 5
4148: PPUSH
4149: LD_INT 2
4151: PPUSH
4152: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4156: LD_VAR 0 5
4160: PPUSH
4161: LD_INT 1
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4171: LD_VAR 0 2
4175: PPUSH
4176: LD_VAR 0 5
4180: PPUSH
4181: CALL_OW 52
// end else
4185: GO 4229
// begin if GetClass ( i ) = 2 then
4187: LD_VAR 0 2
4191: PPUSH
4192: CALL_OW 257
4196: PUSH
4197: LD_INT 2
4199: EQUAL
4200: IFFALSE 4214
// SetClass ( i , 1 ) ;
4202: LD_VAR 0 2
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// end ;
4229: GO 4023
4231: POP
4232: POP
// uc_side := 4 ;
4233: LD_ADDR_OWVAR 20
4237: PUSH
4238: LD_INT 4
4240: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4241: LD_ADDR_EXP 19
4245: PUSH
4246: LD_STRING Harisson
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: LD_STRING 
4254: PPUSH
4255: CALL 29241 0 3
4259: ST_TO_ADDR
// PrepareScout ;
4260: CALL 4269 0 0
// end ;
4264: LD_VAR 0 1
4268: RET
// function PrepareScout ; var ape ; begin
4269: LD_INT 0
4271: PPUSH
4272: PPUSH
// uc_side := 4 ;
4273: LD_ADDR_OWVAR 20
4277: PUSH
4278: LD_INT 4
4280: ST_TO_ADDR
// uc_nation := 1 ;
4281: LD_ADDR_OWVAR 21
4285: PUSH
4286: LD_INT 1
4288: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4289: LD_STRING FrankIn06
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL_OW 30
4299: IFFALSE 4316
// Frank := CreateCharacter ( 06c_Frank ) else
4301: LD_ADDR_EXP 15
4305: PUSH
4306: LD_STRING 06c_Frank
4308: PPUSH
4309: CALL_OW 34
4313: ST_TO_ADDR
4314: GO 4356
// if LoadVariable ( FrankInDelta , 0 ) then
4316: LD_STRING FrankInDelta
4318: PPUSH
4319: LD_INT 0
4321: PPUSH
4322: CALL_OW 30
4326: IFFALSE 4343
// Frank := CreateCharacter ( 05_Frank ) else
4328: LD_ADDR_EXP 15
4332: PUSH
4333: LD_STRING 05_Frank
4335: PPUSH
4336: CALL_OW 34
4340: ST_TO_ADDR
4341: GO 4356
// Frank := CreateCharacter ( 04_Frank ) ;
4343: LD_ADDR_EXP 15
4347: PUSH
4348: LD_STRING 04_Frank
4350: PPUSH
4351: CALL_OW 34
4355: ST_TO_ADDR
// if Frank then
4356: LD_EXP 15
4360: IFFALSE 4493
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4362: LD_EXP 15
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4377: LD_EXP 15
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: CALL_OW 336
// uc_side := 0 ;
4389: LD_ADDR_OWVAR 20
4393: PUSH
4394: LD_INT 0
4396: ST_TO_ADDR
// uc_nation := 0 ;
4397: LD_ADDR_OWVAR 21
4401: PUSH
4402: LD_INT 0
4404: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4405: LD_INT 0
4407: PPUSH
4408: LD_INT 12
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 380
// ape := CreateHuman ;
4418: LD_ADDR_VAR 0 2
4422: PUSH
4423: CALL_OW 44
4427: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4428: LD_VAR 0 2
4432: PPUSH
4433: LD_EXP 15
4437: PPUSH
4438: CALL_OW 250
4442: PPUSH
4443: LD_EXP 15
4447: PPUSH
4448: CALL_OW 251
4452: PPUSH
4453: LD_INT 5
4455: PPUSH
4456: LD_INT 0
4458: PPUSH
4459: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4463: LD_VAR 0 2
4467: PPUSH
4468: LD_EXP 15
4472: PPUSH
4473: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4477: LD_EXP 15
4481: PPUSH
4482: LD_VAR 0 2
4486: PPUSH
4487: CALL_OW 119
// exit ;
4491: GO 4536
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4493: LD_ADDR_EXP 18
4497: PUSH
4498: LD_STRING Yamoko
4500: PPUSH
4501: LD_INT 0
4503: PPUSH
4504: LD_STRING 
4506: PPUSH
4507: CALL 29241 0 3
4511: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4512: LD_EXP 18
4516: PPUSH
4517: LD_INT 2
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL_OW 49
// ComHold ( Kikuchi ) ;
4527: LD_EXP 18
4531: PPUSH
4532: CALL_OW 140
// end ; end_of_file
4536: LD_VAR 0 1
4540: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
// ru_rebuild_list := [ ] ;
4559: LD_ADDR_EXP 20
4563: PUSH
4564: EMPTY
4565: ST_TO_ADDR
// uc_side := 3 ;
4566: LD_ADDR_OWVAR 20
4570: PUSH
4571: LD_INT 3
4573: ST_TO_ADDR
// uc_nation := 3 ;
4574: LD_ADDR_OWVAR 21
4578: PUSH
4579: LD_INT 3
4581: ST_TO_ADDR
// if Difficulty > 1 then
4582: LD_OWVAR 67
4586: PUSH
4587: LD_INT 1
4589: GREATER
4590: IFFALSE 4726
// begin bc_type := b_breastwork ;
4592: LD_ADDR_OWVAR 42
4596: PUSH
4597: LD_INT 31
4599: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4600: LD_INT 78
4602: PPUSH
4603: LD_INT 74
4605: PPUSH
4606: LD_INT 2
4608: PPUSH
4609: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4613: LD_INT 171
4615: PPUSH
4616: LD_INT 193
4618: PPUSH
4619: LD_INT 4
4621: PPUSH
4622: CALL_OW 47
// bc_type := b_turret ;
4626: LD_ADDR_OWVAR 42
4630: PUSH
4631: LD_INT 33
4633: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4634: LD_INT 129
4636: PPUSH
4637: LD_INT 96
4639: PPUSH
4640: LD_INT 3
4642: PPUSH
4643: CALL_OW 47
// if Difficulty > 2 then
4647: LD_OWVAR 67
4651: PUSH
4652: LD_INT 2
4654: GREATER
4655: IFFALSE 4726
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4657: LD_INT 83
4659: PPUSH
4660: LD_INT 141
4662: PPUSH
4663: CALL_OW 428
4667: PPUSH
4668: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4672: LD_INT 78
4674: PPUSH
4675: LD_INT 133
4677: PPUSH
4678: CALL_OW 428
4682: PPUSH
4683: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4687: LD_INT 83
4689: PPUSH
4690: LD_INT 141
4692: PPUSH
4693: LD_INT 2
4695: PPUSH
4696: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4700: LD_INT 78
4702: PPUSH
4703: LD_INT 133
4705: PPUSH
4706: LD_INT 2
4708: PPUSH
4709: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4713: LD_INT 145
4715: PPUSH
4716: LD_INT 112
4718: PPUSH
4719: LD_INT 3
4721: PPUSH
4722: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4726: LD_ADDR_VAR 0 9
4730: PUSH
4731: LD_INT 22
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 2
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: LD_INT 30
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PPUSH
4773: CALL_OW 69
4777: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4778: LD_ADDR_VAR 0 10
4782: PUSH
4783: LD_INT 22
4785: PUSH
4786: LD_INT 3
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 2
4795: PUSH
4796: LD_INT 30
4798: PUSH
4799: LD_INT 6
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 30
4808: PUSH
4809: LD_INT 7
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 30
4818: PUSH
4819: LD_INT 8
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 69
4840: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4841: LD_ADDR_VAR 0 11
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 30
4858: PUSH
4859: LD_INT 3
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 69
4874: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4875: LD_ADDR_VAR 0 12
4879: PUSH
4880: LD_INT 22
4882: PUSH
4883: LD_INT 3
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 30
4892: PUSH
4893: LD_INT 31
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4909: LD_ADDR_VAR 0 13
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 32
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4943: LD_ADDR_VAR 0 14
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 33
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
4977: LD_ADDR_VAR 0 15
4981: PUSH
4982: LD_INT 42
4984: PUSH
4985: LD_INT 5
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 43
4994: PUSH
4995: LD_INT 50
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 44
5004: PUSH
5005: LD_INT 30
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 46
5014: PUSH
5015: LD_INT 15
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5028: LD_ADDR_VAR 0 16
5032: PUSH
5033: LD_INT 0
5035: PUSH
5036: LD_INT 4
5038: PUSH
5039: LD_INT 6
5041: PUSH
5042: LD_INT 3
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
5051: LD_ADDR_VAR 0 6
5055: PUSH
5056: LD_INT 4
5058: PUSH
5059: LD_INT 5
5061: PUSH
5062: LD_INT 6
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: LIST
5069: PUSH
5070: LD_OWVAR 67
5074: ARRAY
5075: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5076: LD_INT 16
5078: PPUSH
5079: LD_STRING am_tukh
5081: PPUSH
5082: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5086: LD_ADDR_VAR 0 2
5090: PUSH
5091: LD_INT 21
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 69
5105: PUSH
5106: FOR_IN
5107: IFFALSE 5140
// SetBLevel ( i , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5109: LD_VAR 0 2
5113: PPUSH
5114: LD_INT 4
5116: PUSH
5117: LD_INT 5
5119: PUSH
5120: LD_INT 6
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: PUSH
5128: LD_OWVAR 67
5132: ARRAY
5133: PPUSH
5134: CALL_OW 241
5138: GO 5106
5140: POP
5141: POP
// for i in dep_list do
5142: LD_ADDR_VAR 0 2
5146: PUSH
5147: LD_VAR 0 9
5151: PUSH
5152: FOR_IN
5153: IFFALSE 5197
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5155: LD_VAR 0 2
5159: PPUSH
5160: CALL_OW 274
5164: PPUSH
5165: LD_INT 1
5167: PPUSH
5168: LD_INT 1000
5170: PPUSH
5171: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL_OW 274
5184: PPUSH
5185: LD_INT 2
5187: PPUSH
5188: LD_INT 1000
5190: PPUSH
5191: CALL_OW 277
// end ;
5195: GO 5152
5197: POP
5198: POP
// InitHc ;
5199: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 ] [ Difficulty ] div 100 ;
5203: LD_ADDR_VAR 0 8
5207: PUSH
5208: LD_VAR 0 13
5212: PUSH
5213: LD_INT 45
5215: PUSH
5216: LD_INT 60
5218: PUSH
5219: LD_INT 75
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_OWVAR 67
5231: ARRAY
5232: MUL
5233: PUSH
5234: LD_INT 100
5236: DIV
5237: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5238: LD_ADDR_VAR 0 16
5242: PUSH
5243: LD_VAR 0 16
5247: PPUSH
5248: LD_INT 1
5250: PPUSH
5251: LD_VAR 0 8
5255: PPUSH
5256: CALL_OW 1
5260: ST_TO_ADDR
// tmp := [ ] ;
5261: LD_ADDR_VAR 0 8
5265: PUSH
5266: EMPTY
5267: ST_TO_ADDR
// for i in bunker_list do
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 13
5277: PUSH
5278: FOR_IN
5279: IFFALSE 5375
// if i mod 10 + 1 < tmp then
5281: LD_VAR 0 2
5285: PUSH
5286: LD_INT 10
5288: MOD
5289: PUSH
5290: LD_INT 1
5292: PLUS
5293: PUSH
5294: LD_VAR 0 8
5298: LESS
5299: IFFALSE 5344
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5301: LD_ADDR_VAR 0 8
5305: PUSH
5306: LD_VAR 0 8
5310: PPUSH
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 3
5318: PPUSH
5319: LD_INT 5
5321: PPUSH
5322: CALL_OW 12
5326: MOD
5327: PUSH
5328: LD_INT 1
5330: PLUS
5331: PPUSH
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 2
5341: ST_TO_ADDR
5342: GO 5373
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5344: LD_ADDR_VAR 0 8
5348: PUSH
5349: LD_VAR 0 8
5353: PPUSH
5354: LD_VAR 0 8
5358: PUSH
5359: LD_INT 1
5361: PLUS
5362: PPUSH
5363: LD_VAR 0 2
5367: PPUSH
5368: CALL_OW 2
5372: ST_TO_ADDR
5373: GO 5278
5375: POP
5376: POP
// bunker_list := tmp ;
5377: LD_ADDR_VAR 0 13
5381: PUSH
5382: LD_VAR 0 8
5386: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_VAR 0 13
5396: PUSH
5397: LD_VAR 0 14
5401: ADD
5402: PUSH
5403: FOR_IN
5404: IFFALSE 5427
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5406: LD_VAR 0 2
5410: PPUSH
5411: LD_VAR 0 2
5415: PPUSH
5416: CALL 2188 0 1
5420: PPUSH
5421: CALL_OW 431
5425: GO 5403
5427: POP
5428: POP
// while ( personel_counter [ 1 ] ) do
5429: LD_VAR 0 16
5433: PUSH
5434: LD_INT 1
5436: ARRAY
5437: IFFALSE 5545
// begin i := rand ( 1 , bunker_list ) ;
5439: LD_ADDR_VAR 0 2
5443: PUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_VAR 0 13
5451: PPUSH
5452: CALL_OW 12
5456: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5457: LD_INT 0
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: LD_VAR 0 6
5467: PPUSH
5468: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5472: CALL_OW 44
5476: PPUSH
5477: LD_VAR 0 13
5481: PUSH
5482: LD_VAR 0 2
5486: ARRAY
5487: PPUSH
5488: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5492: LD_ADDR_VAR 0 13
5496: PUSH
5497: LD_VAR 0 13
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: CALL_OW 3
5511: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5512: LD_ADDR_VAR 0 16
5516: PUSH
5517: LD_VAR 0 16
5521: PPUSH
5522: LD_INT 1
5524: PPUSH
5525: LD_VAR 0 16
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PUSH
5534: LD_INT 1
5536: MINUS
5537: PPUSH
5538: CALL_OW 1
5542: ST_TO_ADDR
// end ;
5543: GO 5429
// for i = 1 to personel_counter [ 2 ] do
5545: LD_ADDR_VAR 0 2
5549: PUSH
5550: DOUBLE
5551: LD_INT 1
5553: DEC
5554: ST_TO_ADDR
5555: LD_VAR 0 16
5559: PUSH
5560: LD_INT 2
5562: ARRAY
5563: PUSH
5564: FOR_TO
5565: IFFALSE 5596
// begin PrepareHuman ( false , 2 , skill ) ;
5567: LD_INT 0
5569: PPUSH
5570: LD_INT 2
5572: PPUSH
5573: LD_VAR 0 6
5577: PPUSH
5578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5582: CALL_OW 44
5586: PPUSH
5587: LD_INT 16
5589: PPUSH
5590: CALL_OW 52
// end ;
5594: GO 5564
5596: POP
5597: POP
// for i = 1 to personel_counter [ 3 ] do
5598: LD_ADDR_VAR 0 2
5602: PUSH
5603: DOUBLE
5604: LD_INT 1
5606: DEC
5607: ST_TO_ADDR
5608: LD_VAR 0 16
5612: PUSH
5613: LD_INT 3
5615: ARRAY
5616: PUSH
5617: FOR_TO
5618: IFFALSE 5665
// begin PrepareHuman ( false , 3 , skill ) ;
5620: LD_INT 0
5622: PPUSH
5623: LD_INT 3
5625: PPUSH
5626: LD_VAR 0 6
5630: PPUSH
5631: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5635: CALL_OW 44
5639: PPUSH
5640: LD_VAR 0 11
5644: PUSH
5645: LD_VAR 0 2
5649: PUSH
5650: LD_INT 2
5652: MOD
5653: PUSH
5654: LD_INT 1
5656: PLUS
5657: ARRAY
5658: PPUSH
5659: CALL_OW 52
// end ;
5663: GO 5617
5665: POP
5666: POP
// for i = 1 to personel_counter [ 4 ] do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_VAR 0 16
5681: PUSH
5682: LD_INT 4
5684: ARRAY
5685: PUSH
5686: FOR_TO
5687: IFFALSE 5724
// begin PrepareHuman ( false , 4 , skill ) ;
5689: LD_INT 0
5691: PPUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_VAR 0 6
5699: PPUSH
5700: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5704: CALL_OW 44
5708: PPUSH
5709: LD_VAR 0 10
5713: PUSH
5714: LD_INT 1
5716: ARRAY
5717: PPUSH
5718: CALL_OW 52
// end ;
5722: GO 5686
5724: POP
5725: POP
// for i in breastworks_list do
5726: LD_ADDR_VAR 0 2
5730: PUSH
5731: LD_VAR 0 12
5735: PUSH
5736: FOR_IN
5737: IFFALSE 5849
// begin r := GetDir ( i ) ;
5739: LD_ADDR_VAR 0 4
5743: PUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 254
5753: ST_TO_ADDR
// if r > 3 then
5754: LD_VAR 0 4
5758: PUSH
5759: LD_INT 3
5761: GREATER
5762: IFFALSE 5780
// r := r - 3 else
5764: LD_ADDR_VAR 0 4
5768: PUSH
5769: LD_VAR 0 4
5773: PUSH
5774: LD_INT 3
5776: MINUS
5777: ST_TO_ADDR
5778: GO 5794
// r := r + 3 ;
5780: LD_ADDR_VAR 0 4
5784: PUSH
5785: LD_VAR 0 4
5789: PUSH
5790: LD_INT 3
5792: PLUS
5793: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5794: LD_INT 0
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_VAR 0 6
5804: PPUSH
5805: CALL_OW 380
// un := CreateHuman ;
5809: LD_ADDR_VAR 0 5
5813: PUSH
5814: CALL_OW 44
5818: ST_TO_ADDR
// SetDir ( un , r ) ;
5819: LD_VAR 0 5
5823: PPUSH
5824: LD_VAR 0 4
5828: PPUSH
5829: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5833: LD_VAR 0 5
5837: PPUSH
5838: LD_VAR 0 2
5842: PPUSH
5843: CALL_OW 52
// end ;
5847: GO 5736
5849: POP
5850: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_INT 22
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 25
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PPUSH
5880: CALL_OW 69
5884: ST_TO_ADDR
// r := [ 4 , 5 , 6 ] [ Difficulty ] ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_INT 4
5892: PUSH
5893: LD_INT 5
5895: PUSH
5896: LD_INT 6
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: PUSH
5904: LD_OWVAR 67
5908: ARRAY
5909: ST_TO_ADDR
// for i = 1 to r do
5910: LD_ADDR_VAR 0 2
5914: PUSH
5915: DOUBLE
5916: LD_INT 1
5918: DEC
5919: ST_TO_ADDR
5920: LD_VAR 0 4
5924: PUSH
5925: FOR_TO
5926: IFFALSE 6099
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5928: LD_ADDR_VAR 0 5
5932: PUSH
5933: LD_INT 3
5935: PPUSH
5936: LD_INT 3
5938: PPUSH
5939: LD_INT 22
5941: PUSH
5942: LD_INT 22
5944: PUSH
5945: LD_INT 24
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: PUSH
5953: LD_VAR 0 2
5957: PUSH
5958: LD_INT 3
5960: MOD
5961: PUSH
5962: LD_INT 1
5964: PLUS
5965: ARRAY
5966: PPUSH
5967: LD_INT 1
5969: PPUSH
5970: LD_INT 1
5972: PPUSH
5973: LD_INT 43
5975: PUSH
5976: LD_INT 44
5978: PUSH
5979: LD_INT 42
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: PUSH
5987: LD_VAR 0 2
5991: PUSH
5992: LD_INT 3
5994: MOD
5995: PUSH
5996: LD_INT 1
5998: PLUS
5999: ARRAY
6000: PPUSH
6001: LD_INT 100
6003: PPUSH
6004: CALL 500 0 7
6008: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6009: LD_VAR 0 5
6013: PPUSH
6014: LD_INT 0
6016: PPUSH
6017: LD_INT 5
6019: PPUSH
6020: CALL_OW 12
6024: PPUSH
6025: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6029: LD_VAR 0 5
6033: PPUSH
6034: LD_INT 5
6036: PPUSH
6037: LD_INT 0
6039: PPUSH
6040: CALL_OW 49
// if i > tmp - 2 then
6044: LD_VAR 0 2
6048: PUSH
6049: LD_VAR 0 8
6053: PUSH
6054: LD_INT 2
6056: MINUS
6057: GREATER
6058: IFFALSE 6062
// continue ;
6060: GO 5925
// ComExitBuilding ( tmp [ i ] ) ;
6062: LD_VAR 0 8
6066: PUSH
6067: LD_VAR 0 2
6071: ARRAY
6072: PPUSH
6073: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6077: LD_VAR 0 8
6081: PUSH
6082: LD_VAR 0 2
6086: ARRAY
6087: PPUSH
6088: LD_VAR 0 5
6092: PPUSH
6093: CALL_OW 180
// end ;
6097: GO 5925
6099: POP
6100: POP
// end ;
6101: LD_VAR 0 1
6105: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6106: LD_INT 22
6108: PUSH
6109: LD_INT 3
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 25
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 69
6134: IFFALSE 6866
6136: GO 6138
6138: DISABLE
6139: LD_INT 0
6141: PPUSH
6142: PPUSH
6143: PPUSH
6144: PPUSH
6145: PPUSH
// begin enable ;
6146: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6147: LD_ADDR_VAR 0 2
6151: PUSH
6152: LD_INT 6
6154: PPUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 24
6160: PUSH
6161: LD_INT 1000
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 21
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PPUSH
6186: CALL_OW 70
6190: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6191: LD_ADDR_VAR 0 4
6195: PUSH
6196: LD_INT 22
6198: PUSH
6199: LD_INT 3
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 25
6208: PUSH
6209: LD_INT 2
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PPUSH
6220: CALL_OW 69
6224: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6225: LD_VAR 0 2
6229: NOT
6230: PUSH
6231: LD_EXP 20
6235: NOT
6236: AND
6237: IFFALSE 6307
// begin for i in engs do
6239: LD_ADDR_VAR 0 1
6243: PUSH
6244: LD_VAR 0 4
6248: PUSH
6249: FOR_IN
6250: IFFALSE 6305
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6252: LD_VAR 0 1
6256: PPUSH
6257: CALL_OW 256
6261: PUSH
6262: LD_INT 1000
6264: EQUAL
6265: PUSH
6266: LD_VAR 0 1
6270: PPUSH
6271: CALL_OW 314
6275: NOT
6276: AND
6277: PUSH
6278: LD_VAR 0 1
6282: PPUSH
6283: CALL_OW 310
6287: NOT
6288: AND
6289: IFFALSE 6303
// ComEnterUnit ( i , ru_dep_main ) ;
6291: LD_VAR 0 1
6295: PPUSH
6296: LD_INT 16
6298: PPUSH
6299: CALL_OW 120
6303: GO 6249
6305: POP
6306: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6307: LD_VAR 0 4
6311: PPUSH
6312: LD_INT 3
6314: PUSH
6315: LD_INT 24
6317: PUSH
6318: LD_INT 650
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 72
6333: IFFALSE 6426
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6335: LD_ADDR_VAR 0 3
6339: PUSH
6340: LD_VAR 0 4
6344: PPUSH
6345: LD_INT 3
6347: PUSH
6348: LD_INT 24
6350: PUSH
6351: LD_INT 650
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PPUSH
6362: CALL_OW 72
6366: ST_TO_ADDR
// for i in tmp do
6367: LD_ADDR_VAR 0 1
6371: PUSH
6372: LD_VAR 0 3
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6424
// if not IsInArea ( i , mainBaseArea ) then
6380: LD_VAR 0 1
6384: PPUSH
6385: LD_INT 14
6387: PPUSH
6388: CALL_OW 308
6392: NOT
6393: IFFALSE 6422
// begin ComMoveXY ( i , 129 , 125 ) ;
6395: LD_VAR 0 1
6399: PPUSH
6400: LD_INT 129
6402: PPUSH
6403: LD_INT 125
6405: PPUSH
6406: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6410: LD_VAR 0 1
6414: PPUSH
6415: LD_INT 1050
6417: PPUSH
6418: CALL_OW 202
// end ;
6422: GO 6377
6424: POP
6425: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6426: LD_ADDR_VAR 0 4
6430: PUSH
6431: LD_VAR 0 4
6435: PPUSH
6436: LD_INT 24
6438: PUSH
6439: LD_INT 650
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// if not engs then
6451: LD_VAR 0 4
6455: NOT
6456: IFFALSE 6460
// exit ;
6458: GO 6866
// if filter then
6460: LD_VAR 0 2
6464: IFFALSE 6723
// begin for i in engs do
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_VAR 0 4
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6501
// if IsInUnit ( i ) then
6479: LD_VAR 0 1
6483: PPUSH
6484: CALL_OW 310
6488: IFFALSE 6499
// ComExitBuilding ( i ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL_OW 122
6499: GO 6476
6501: POP
6502: POP
// wait ( 3 ) ;
6503: LD_INT 3
6505: PPUSH
6506: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6510: LD_VAR 0 2
6514: PUSH
6515: LD_INT 2
6517: GREATEREQUAL
6518: PUSH
6519: LD_VAR 0 4
6523: PUSH
6524: LD_INT 2
6526: GREATEREQUAL
6527: AND
6528: IFFALSE 6676
// begin for i = 1 to engs / 2 do
6530: LD_ADDR_VAR 0 1
6534: PUSH
6535: DOUBLE
6536: LD_INT 1
6538: DEC
6539: ST_TO_ADDR
6540: LD_VAR 0 4
6544: PUSH
6545: LD_INT 2
6547: DIVREAL
6548: PUSH
6549: FOR_TO
6550: IFFALSE 6596
// if not HasTask ( engs [ i ] ) then
6552: LD_VAR 0 4
6556: PUSH
6557: LD_VAR 0 1
6561: ARRAY
6562: PPUSH
6563: CALL_OW 314
6567: NOT
6568: IFFALSE 6594
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6570: LD_VAR 0 4
6574: PUSH
6575: LD_VAR 0 1
6579: ARRAY
6580: PPUSH
6581: LD_VAR 0 2
6585: PUSH
6586: LD_INT 1
6588: ARRAY
6589: PPUSH
6590: CALL_OW 130
6594: GO 6549
6596: POP
6597: POP
// for i = engs / 2 + 1 to engs do
6598: LD_ADDR_VAR 0 1
6602: PUSH
6603: DOUBLE
6604: LD_VAR 0 4
6608: PUSH
6609: LD_INT 2
6611: DIVREAL
6612: PUSH
6613: LD_INT 1
6615: PLUS
6616: DEC
6617: ST_TO_ADDR
6618: LD_VAR 0 4
6622: PUSH
6623: FOR_TO
6624: IFFALSE 6672
// if not HasTask ( engs [ i ] ) then
6626: LD_VAR 0 4
6630: PUSH
6631: LD_VAR 0 1
6635: ARRAY
6636: PPUSH
6637: CALL_OW 314
6641: NOT
6642: IFFALSE 6670
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6644: LD_VAR 0 4
6648: PUSH
6649: LD_VAR 0 1
6653: ARRAY
6654: PPUSH
6655: LD_VAR 0 2
6659: PUSH
6660: LD_VAR 0 2
6664: ARRAY
6665: PPUSH
6666: CALL_OW 130
6670: GO 6623
6672: POP
6673: POP
// end else
6674: GO 6723
// for i in engs do
6676: LD_ADDR_VAR 0 1
6680: PUSH
6681: LD_VAR 0 4
6685: PUSH
6686: FOR_IN
6687: IFFALSE 6721
// if not HasTask ( i ) then
6689: LD_VAR 0 1
6693: PPUSH
6694: CALL_OW 314
6698: NOT
6699: IFFALSE 6719
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6701: LD_VAR 0 1
6705: PPUSH
6706: LD_VAR 0 2
6710: PUSH
6711: LD_INT 1
6713: ARRAY
6714: PPUSH
6715: CALL_OW 130
6719: GO 6686
6721: POP
6722: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: LD_INT 81
6730: PUSH
6731: LD_INT 3
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PPUSH
6738: CALL_OW 69
6742: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6743: LD_EXP 20
6747: PUSH
6748: LD_VAR 0 2
6752: NOT
6753: AND
6754: IFFALSE 6866
// begin ComExitBuilding ( engs ) ;
6756: LD_VAR 0 4
6760: PPUSH
6761: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6765: LD_VAR 0 5
6769: PPUSH
6770: LD_EXP 20
6774: PUSH
6775: LD_INT 2
6777: ARRAY
6778: PPUSH
6779: LD_EXP 20
6783: PUSH
6784: LD_INT 3
6786: ARRAY
6787: PPUSH
6788: CALL_OW 73
6792: PPUSH
6793: LD_EXP 20
6797: PUSH
6798: LD_INT 2
6800: ARRAY
6801: PPUSH
6802: LD_EXP 20
6806: PUSH
6807: LD_INT 3
6809: ARRAY
6810: PPUSH
6811: CALL_OW 297
6815: PUSH
6816: LD_INT 10
6818: GREATER
6819: IFFALSE 6866
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6821: LD_VAR 0 4
6825: PPUSH
6826: LD_EXP 20
6830: PUSH
6831: LD_INT 1
6833: ARRAY
6834: PPUSH
6835: LD_EXP 20
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: PPUSH
6844: LD_EXP 20
6848: PUSH
6849: LD_INT 3
6851: ARRAY
6852: PPUSH
6853: LD_EXP 20
6857: PUSH
6858: LD_INT 4
6860: ARRAY
6861: PPUSH
6862: CALL_OW 145
// end ; end ;
6866: PPOPN 5
6868: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6869: LD_INT 16
6871: PPUSH
6872: CALL_OW 256
6876: PUSH
6877: LD_INT 250
6879: LESS
6880: IFFALSE 7070
6882: GO 6884
6884: DISABLE
6885: LD_INT 0
6887: PPUSH
6888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6889: LD_ADDR_VAR 0 2
6893: PUSH
6894: LD_INT 22
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 2
6906: PUSH
6907: LD_INT 25
6909: PUSH
6910: LD_INT 1
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 25
6919: PUSH
6920: LD_INT 3
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 25
6929: PUSH
6930: LD_INT 4
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
6952: LD_VAR 0 2
6956: PPUSH
6957: CALL_OW 122
// wait ( 3 ) ;
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
6968: LD_VAR 0 2
6972: PPUSH
6973: LD_INT 156
6975: PPUSH
6976: LD_INT 211
6978: PPUSH
6979: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// for i in tmp do
6990: LD_ADDR_VAR 0 1
6994: PUSH
6995: LD_VAR 0 2
6999: PUSH
7000: FOR_IN
7001: IFFALSE 7061
// if IsInArea ( i , escapeArea ) then
7003: LD_VAR 0 1
7007: PPUSH
7008: LD_INT 15
7010: PPUSH
7011: CALL_OW 308
7015: IFFALSE 7044
// begin RemoveUnit ( i ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL_OW 64
// tmp := tmp diff i ;
7026: LD_ADDR_VAR 0 2
7030: PUSH
7031: LD_VAR 0 2
7035: PUSH
7036: LD_VAR 0 1
7040: DIFF
7041: ST_TO_ADDR
// end else
7042: GO 7059
// ComMoveXY ( i , 156 , 211 ) ;
7044: LD_VAR 0 1
7048: PPUSH
7049: LD_INT 156
7051: PPUSH
7052: LD_INT 211
7054: PPUSH
7055: CALL_OW 111
7059: GO 7000
7061: POP
7062: POP
// until not tmp ;
7063: LD_VAR 0 2
7067: NOT
7068: IFFALSE 6983
// end ;
7070: PPOPN 2
7072: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7073: LD_INT 16
7075: PPUSH
7076: CALL_OW 256
7080: PUSH
7081: LD_INT 250
7083: GREATER
7084: PUSH
7085: LD_INT 22
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 25
7097: PUSH
7098: LD_INT 1
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 56
7107: PUSH
7108: EMPTY
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: PPUSH
7119: CALL_OW 69
7123: AND
7124: IFFALSE 7236
7126: GO 7128
7128: DISABLE
7129: LD_INT 0
7131: PPUSH
7132: PPUSH
// begin enable ;
7133: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_INT 3
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 1
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 56
7161: PUSH
7162: EMPTY
7163: LIST
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: LD_INT 60
7170: PUSH
7171: EMPTY
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: PPUSH
7187: CALL_OW 69
7191: ST_TO_ADDR
// if not tmp then
7192: LD_VAR 0 2
7196: NOT
7197: IFFALSE 7201
// exit ;
7199: GO 7236
// for i in tmp do
7201: LD_ADDR_VAR 0 1
7205: PUSH
7206: LD_VAR 0 2
7210: PUSH
7211: FOR_IN
7212: IFFALSE 7234
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7214: LD_VAR 0 1
7218: PPUSH
7219: LD_INT 0
7221: PPUSH
7222: LD_INT 143
7224: PPUSH
7225: LD_INT 143
7227: PPUSH
7228: CALL 818 0 4
7232: GO 7211
7234: POP
7235: POP
// end ;
7236: PPOPN 2
7238: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7239: LD_INT 22
7241: PUSH
7242: LD_INT 3
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 25
7251: PUSH
7252: LD_INT 4
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PPUSH
7263: CALL_OW 69
7267: IFFALSE 7521
7269: GO 7271
7271: DISABLE
7272: LD_INT 0
7274: PPUSH
7275: PPUSH
7276: PPUSH
// begin enable ;
7277: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7278: LD_ADDR_VAR 0 2
7282: PUSH
7283: LD_INT 14
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 3
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 21
7298: PUSH
7299: LD_INT 1
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: LD_INT 3
7308: PUSH
7309: LD_INT 24
7311: PUSH
7312: LD_INT 1000
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: PPUSH
7328: CALL_OW 70
7332: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7333: LD_ADDR_VAR 0 3
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 3
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 25
7350: PUSH
7351: LD_INT 4
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 69
7366: ST_TO_ADDR
// if not doc then
7367: LD_VAR 0 3
7371: NOT
7372: IFFALSE 7376
// exit ;
7374: GO 7521
// if not tmp then
7376: LD_VAR 0 2
7380: NOT
7381: IFFALSE 7472
// begin if not IsInUnit ( doc [ 1 ] ) then
7383: LD_VAR 0 3
7387: PUSH
7388: LD_INT 1
7390: ARRAY
7391: PPUSH
7392: CALL_OW 310
7396: NOT
7397: IFFALSE 7470
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 22
7406: PUSH
7407: LD_INT 3
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 30
7419: PUSH
7420: LD_INT 6
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 30
7429: PUSH
7430: LD_INT 7
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 30
7439: PUSH
7440: LD_INT 8
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PPUSH
7457: CALL_OW 69
7461: PUSH
7462: LD_INT 1
7464: ARRAY
7465: PPUSH
7466: CALL_OW 120
// exit ;
7470: GO 7521
// end ; if IsInUnit ( doc [ 1 ] ) then
7472: LD_VAR 0 3
7476: PUSH
7477: LD_INT 1
7479: ARRAY
7480: PPUSH
7481: CALL_OW 310
7485: IFFALSE 7496
// ComExitBuilding ( doc ) ;
7487: LD_VAR 0 3
7491: PPUSH
7492: CALL_OW 122
// wait ( 3 ) ;
7496: LD_INT 3
7498: PPUSH
7499: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_VAR 0 2
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: CALL_OW 128
// end ;
7521: PPOPN 3
7523: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7524: LD_INT 22
7526: PUSH
7527: LD_INT 3
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 25
7536: PUSH
7537: LD_INT 3
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 22
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 21
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: AND
7582: IFFALSE 7996
7584: GO 7586
7586: DISABLE
7587: LD_INT 0
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
// begin enable ;
7594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7595: LD_ADDR_VAR 0 2
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 21
7612: PUSH
7613: LD_INT 2
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: LD_INT 58
7625: PUSH
7626: EMPTY
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 69
7642: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7643: LD_ADDR_VAR 0 4
7647: PUSH
7648: LD_INT 10
7650: PUSH
7651: LD_INT 11
7653: PUSH
7654: LD_INT 12
7656: PUSH
7657: LD_INT 14
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: ST_TO_ADDR
// area := 0 ;
7666: LD_ADDR_VAR 0 5
7670: PUSH
7671: LD_INT 0
7673: ST_TO_ADDR
// attacking := false ;
7674: LD_ADDR_VAR 0 3
7678: PUSH
7679: LD_INT 0
7681: ST_TO_ADDR
// for i in tmp do
7682: LD_ADDR_VAR 0 1
7686: PUSH
7687: LD_VAR 0 2
7691: PUSH
7692: FOR_IN
7693: IFFALSE 7779
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_INT 22
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PPUSH
7710: CALL_OW 69
7714: PPUSH
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 74
7724: PPUSH
7725: CALL_OW 296
7729: PUSH
7730: LD_INT 10
7732: LESS
7733: IFFALSE 7777
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7735: LD_VAR 0 1
7739: PPUSH
7740: LD_INT 22
7742: PUSH
7743: LD_INT 1
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PPUSH
7750: CALL_OW 69
7754: PPUSH
7755: LD_VAR 0 1
7759: PPUSH
7760: CALL_OW 74
7764: PPUSH
7765: CALL_OW 115
// attacking := true ;
7769: LD_ADDR_VAR 0 3
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// end ;
7777: GO 7692
7779: POP
7780: POP
// if attacking then
7781: LD_VAR 0 3
7785: IFFALSE 7789
// exit ;
7787: GO 7996
// for i in areas do
7789: LD_ADDR_VAR 0 1
7793: PUSH
7794: LD_VAR 0 4
7798: PUSH
7799: FOR_IN
7800: IFFALSE 7837
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_INT 1
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 70
7821: IFFALSE 7835
// begin area := i ;
7823: LD_ADDR_VAR 0 5
7827: PUSH
7828: LD_VAR 0 1
7832: ST_TO_ADDR
// break ;
7833: GO 7837
// end ;
7835: GO 7799
7837: POP
7838: POP
// if area then
7839: LD_VAR 0 5
7843: IFFALSE 7996
// begin for i in tmp do
7845: LD_ADDR_VAR 0 1
7849: PUSH
7850: LD_VAR 0 2
7854: PUSH
7855: FOR_IN
7856: IFFALSE 7994
// begin if GetFuel ( i ) < 33 then
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 261
7867: PUSH
7868: LD_INT 33
7870: LESS
7871: IFFALSE 7885
// SetFuel ( i , 33 ) ;
7873: LD_VAR 0 1
7877: PPUSH
7878: LD_INT 33
7880: PPUSH
7881: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7885: LD_VAR 0 1
7889: PPUSH
7890: LD_INT 22
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PPUSH
7900: CALL_OW 69
7904: PPUSH
7905: LD_VAR 0 1
7909: PPUSH
7910: CALL_OW 74
7914: PPUSH
7915: CALL_OW 296
7919: PUSH
7920: LD_INT 10
7922: LESS
7923: IFFALSE 7961
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_INT 22
7932: PUSH
7933: LD_INT 1
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PPUSH
7940: CALL_OW 69
7944: PPUSH
7945: LD_VAR 0 1
7949: PPUSH
7950: CALL_OW 74
7954: PPUSH
7955: CALL_OW 115
7959: GO 7992
// if not IsInArea ( i , area ) then
7961: LD_VAR 0 1
7965: PPUSH
7966: LD_VAR 0 5
7970: PPUSH
7971: CALL_OW 308
7975: NOT
7976: IFFALSE 7992
// ComMoveToArea ( i , area ) ;
7978: LD_VAR 0 1
7982: PPUSH
7983: LD_VAR 0 5
7987: PPUSH
7988: CALL_OW 113
// end ;
7992: GO 7855
7994: POP
7995: POP
// end ; end ;
7996: PPOPN 5
7998: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
7999: LD_OWVAR 67
8003: PUSH
8004: LD_INT 1
8006: GREATER
8007: IFFALSE 8284
8009: GO 8011
8011: DISABLE
8012: LD_INT 0
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// begin uc_side := 3 ;
8020: LD_ADDR_OWVAR 20
8024: PUSH
8025: LD_INT 3
8027: ST_TO_ADDR
// uc_nation := 3 ;
8028: LD_ADDR_OWVAR 21
8032: PUSH
8033: LD_INT 3
8035: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
8036: LD_ADDR_VAR 0 5
8040: PUSH
8041: LD_INT 18900
8043: PUSH
8044: LD_INT 14700
8046: PUSH
8047: LD_INT 12600
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_OWVAR 67
8059: ARRAY
8060: ST_TO_ADDR
// count := [ 2 , 2 , 3 ] [ Difficulty ] ;
8061: LD_ADDR_VAR 0 6
8065: PUSH
8066: LD_INT 2
8068: PUSH
8069: LD_INT 2
8071: PUSH
8072: LD_INT 3
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: LD_OWVAR 67
8084: ARRAY
8085: ST_TO_ADDR
// for i = 1 to count do
8086: LD_ADDR_VAR 0 1
8090: PUSH
8091: DOUBLE
8092: LD_INT 1
8094: DEC
8095: ST_TO_ADDR
8096: LD_VAR 0 6
8100: PUSH
8101: FOR_TO
8102: IFFALSE 8282
// begin wait ( time ) ;
8104: LD_VAR 0 5
8108: PPUSH
8109: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8113: LD_ADDR_VAR 0 2
8117: PUSH
8118: DOUBLE
8119: LD_INT 1
8121: DEC
8122: ST_TO_ADDR
8123: LD_INT 1
8125: PPUSH
8126: LD_OWVAR 67
8130: PPUSH
8131: CALL_OW 12
8135: PUSH
8136: FOR_TO
8137: IFFALSE 8278
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8139: LD_ADDR_VAR 0 4
8143: PUSH
8144: LD_INT 3
8146: PPUSH
8147: LD_INT 3
8149: PPUSH
8150: LD_INT 22
8152: PPUSH
8153: LD_INT 1
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 43
8161: PUSH
8162: LD_INT 44
8164: PUSH
8165: LD_INT 42
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_VAR 0 1
8177: PUSH
8178: LD_INT 3
8180: MOD
8181: PUSH
8182: LD_INT 1
8184: PLUS
8185: ARRAY
8186: PPUSH
8187: LD_INT 80
8189: PPUSH
8190: CALL 500 0 7
8194: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8195: LD_VAR 0 4
8199: PPUSH
8200: LD_INT 13
8202: PPUSH
8203: LD_INT 0
8205: PPUSH
8206: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8210: LD_INT 0
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: LD_INT 4
8218: PUSH
8219: LD_INT 5
8221: PUSH
8222: LD_INT 5
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_OWVAR 67
8234: ARRAY
8235: PPUSH
8236: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8240: CALL_OW 44
8244: PPUSH
8245: LD_VAR 0 4
8249: PPUSH
8250: CALL_OW 52
// wait ( 0 0$01 ) ;
8254: LD_INT 35
8256: PPUSH
8257: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8261: LD_VAR 0 4
8265: PPUSH
8266: LD_INT 143
8268: PPUSH
8269: LD_INT 143
8271: PPUSH
8272: CALL_OW 111
// end ;
8276: GO 8136
8278: POP
8279: POP
// end ;
8280: GO 8101
8282: POP
8283: POP
// end ;
8284: PPOPN 6
8286: END
// every 8 8$00 do var i , un , time ;
8287: GO 8289
8289: DISABLE
8290: LD_INT 0
8292: PPUSH
8293: PPUSH
8294: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8295: LD_ADDR_VAR 0 3
8299: PUSH
8300: LD_INT 6300
8302: PUSH
8303: LD_INT 2100
8305: PUSH
8306: LD_INT 1050
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: ST_TO_ADDR
// wait ( time ) ;
8314: LD_VAR 0 3
8318: PPUSH
8319: CALL_OW 67
// uc_side := 3 ;
8323: LD_ADDR_OWVAR 20
8327: PUSH
8328: LD_INT 3
8330: ST_TO_ADDR
// uc_nation := 3 ;
8331: LD_ADDR_OWVAR 21
8335: PUSH
8336: LD_INT 3
8338: ST_TO_ADDR
// for i = 1 to 2 do
8339: LD_ADDR_VAR 0 1
8343: PUSH
8344: DOUBLE
8345: LD_INT 1
8347: DEC
8348: ST_TO_ADDR
8349: LD_INT 2
8351: PUSH
8352: FOR_TO
8353: IFFALSE 8416
// begin PrepareHuman ( false , 1 , 4 ) ;
8355: LD_INT 0
8357: PPUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_INT 4
8363: PPUSH
8364: CALL_OW 380
// un := CreateHuman ;
8368: LD_ADDR_VAR 0 2
8372: PUSH
8373: CALL_OW 44
8377: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8378: LD_VAR 0 2
8382: PPUSH
8383: LD_INT 16
8385: PPUSH
8386: CALL_OW 52
// ComExitBuilding ( un ) ;
8390: LD_VAR 0 2
8394: PPUSH
8395: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8399: LD_VAR 0 2
8403: PPUSH
8404: LD_INT 41
8406: PPUSH
8407: LD_INT 76
8409: PPUSH
8410: CALL_OW 174
// end ;
8414: GO 8352
8416: POP
8417: POP
// end ; end_of_file
8418: PPOPN 3
8420: END
// export function Action ; begin
8421: LD_INT 0
8423: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8424: LD_INT 28
8426: PPUSH
8427: LD_INT 3
8429: PPUSH
8430: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8434: LD_INT 41
8436: PPUSH
8437: LD_INT 76
8439: PPUSH
8440: LD_INT 1
8442: PPUSH
8443: LD_INT 10
8445: PPUSH
8446: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8450: LD_INT 41
8452: PPUSH
8453: LD_INT 76
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 331
// InGameOn ;
8463: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8467: LD_EXP 19
8471: PPUSH
8472: LD_STRING D2-Har-1
8474: PPUSH
8475: CALL_OW 94
// InGameOff ;
8479: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8483: LD_STRING M1
8485: PPUSH
8486: CALL_OW 337
// end ;
8490: LD_VAR 0 1
8494: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8495: LD_EXP 4
8499: PUSH
8500: LD_INT 1
8502: GREATER
8503: IFFALSE 8594
8505: GO 8507
8507: DISABLE
8508: LD_INT 0
8510: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8511: LD_ADDR_VAR 0 1
8515: PUSH
8516: LD_INT 1
8518: PPUSH
8519: CALL 588 0 1
8523: PUSH
8524: LD_INT 1
8526: ARRAY
8527: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8528: LD_VAR 0 1
8532: PPUSH
8533: LD_STRING D2a-Sol1-1
8535: PPUSH
8536: CALL_OW 88
// if not un then
8540: LD_VAR 0 1
8544: NOT
8545: IFFALSE 8576
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 2
8554: PPUSH
8555: CALL 588 0 1
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8564: LD_VAR 0 1
8568: PPUSH
8569: LD_STRING D2a-FSol1-1
8571: PPUSH
8572: CALL_OW 88
// end ; if Khatam then
8576: LD_EXP 17
8580: IFFALSE 8594
// Say ( Khatam , D3b-Khat-3 ) ;
8582: LD_EXP 17
8586: PPUSH
8587: LD_STRING D3b-Khat-3
8589: PPUSH
8590: CALL_OW 88
// end ;
8594: PPOPN 1
8596: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8597: LD_EXP 15
8601: PUSH
8602: LD_EXP 18
8606: NOT
8607: AND
8608: PUSH
8609: LD_INT 22
8611: PUSH
8612: LD_INT 1
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 92
8621: PUSH
8622: LD_EXP 15
8626: PPUSH
8627: CALL_OW 250
8631: PUSH
8632: LD_EXP 15
8636: PPUSH
8637: CALL_OW 251
8641: PUSH
8642: LD_INT 7
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 69
8659: AND
8660: PUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 463
8668: NOT
8669: AND
8670: PUSH
8671: LD_INT 4
8673: PPUSH
8674: CALL_OW 463
8678: NOT
8679: AND
8680: IFFALSE 9267
8682: GO 8684
8684: DISABLE
8685: LD_INT 0
8687: PPUSH
8688: PPUSH
// begin InGameOn ;
8689: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8693: LD_ADDR_VAR 0 2
8697: PUSH
8698: LD_INT 22
8700: PUSH
8701: LD_INT 0
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 25
8710: PUSH
8711: LD_INT 12
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PPUSH
8722: CALL_OW 69
8726: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8727: LD_ADDR_VAR 0 2
8731: PUSH
8732: LD_VAR 0 2
8736: PPUSH
8737: LD_EXP 15
8741: PPUSH
8742: CALL_OW 74
8746: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8747: LD_ADDR_VAR 0 1
8751: PUSH
8752: LD_INT 22
8754: PUSH
8755: LD_INT 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 21
8764: PUSH
8765: LD_INT 1
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: LD_INT 91
8774: PUSH
8775: LD_EXP 15
8779: PUSH
8780: LD_INT 20
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 69
8797: PUSH
8798: FOR_IN
8799: IFFALSE 8817
// ComTurnUnit ( i , Frank ) ;
8801: LD_VAR 0 1
8805: PPUSH
8806: LD_EXP 15
8810: PPUSH
8811: CALL_OW 119
8815: GO 8798
8817: POP
8818: POP
// SetSide ( Frank , 1 ) ;
8819: LD_EXP 15
8823: PPUSH
8824: LD_INT 1
8826: PPUSH
8827: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
8831: LD_EXP 9
8835: PPUSH
8836: LD_EXP 15
8840: PPUSH
8841: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
8845: LD_EXP 9
8849: PPUSH
8850: LD_EXP 15
8854: PPUSH
8855: CALL_OW 179
// CenterOnUnits ( Frank ) ;
8859: LD_EXP 15
8863: PPUSH
8864: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
8868: LD_EXP 15
8872: PPUSH
8873: LD_STRING D3a-Frank-1
8875: PPUSH
8876: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
8880: LD_VAR 0 2
8884: PPUSH
8885: LD_INT 42
8887: PPUSH
8888: LD_INT 78
8890: PPUSH
8891: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
8895: LD_VAR 0 2
8899: PPUSH
8900: LD_EXP 15
8904: PPUSH
8905: CALL_OW 179
// if Lisa then
8909: LD_EXP 14
8913: IFFALSE 8927
// Say ( Lisa , D3a-Lisa-1 ) ;
8915: LD_EXP 14
8919: PPUSH
8920: LD_STRING D3a-Lisa-1
8922: PPUSH
8923: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
8927: LD_EXP 9
8931: PPUSH
8932: LD_STRING D3a-JMM-1
8934: PPUSH
8935: CALL_OW 88
// if Cyrus then
8939: LD_EXP 13
8943: IFFALSE 8957
// Say ( Cyrus , D3a-Cyrus-1 ) ;
8945: LD_EXP 13
8949: PPUSH
8950: LD_STRING D3a-Cyrus-1
8952: PPUSH
8953: CALL_OW 88
// if GetRandom ( sex_male ) then
8957: LD_INT 1
8959: PPUSH
8960: CALL 588 0 1
8964: IFFALSE 8985
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
8966: LD_INT 1
8968: PPUSH
8969: CALL 588 0 1
8973: PUSH
8974: LD_INT 1
8976: ARRAY
8977: PPUSH
8978: LD_STRING D3a-Sol1-1
8980: PPUSH
8981: CALL_OW 88
// if GetRandom ( sex_female ) then
8985: LD_INT 2
8987: PPUSH
8988: CALL 588 0 1
8992: IFFALSE 9013
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
8994: LD_INT 2
8996: PPUSH
8997: CALL 588 0 1
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_STRING D3a-FSol1-1
9008: PPUSH
9009: CALL_OW 88
// if Gladstone then
9013: LD_EXP 16
9017: IFFALSE 9031
// Say ( Gladstone , D3a-Glad-1 ) ;
9019: LD_EXP 16
9023: PPUSH
9024: LD_STRING D3a-Glad-1
9026: PPUSH
9027: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9031: LD_VAR 0 2
9035: PPUSH
9036: LD_INT 60
9038: PPUSH
9039: LD_INT 113
9041: PPUSH
9042: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9046: LD_EXP 15
9050: PPUSH
9051: LD_STRING D3a-Frank-2
9053: PPUSH
9054: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9058: LD_EXP 15
9062: PPUSH
9063: LD_EXP 9
9067: PPUSH
9068: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9072: LD_EXP 9
9076: PPUSH
9077: LD_STRING D3a-JMM-2
9079: PPUSH
9080: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9084: LD_INT 1
9086: PPUSH
9087: LD_INT 4
9089: PPUSH
9090: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9094: LD_INT 85
9096: PPUSH
9097: LD_INT 134
9099: PPUSH
9100: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9104: LD_EXP 15
9108: PPUSH
9109: LD_STRING D3a-Frank-3
9111: PPUSH
9112: CALL_OW 88
// Wait ( 0 0$01 ) ;
9116: LD_INT 35
9118: PPUSH
9119: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9123: LD_INT 166
9125: PPUSH
9126: LD_INT 136
9128: PPUSH
9129: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9133: LD_EXP 9
9137: PPUSH
9138: LD_STRING D3a-JMM-3
9140: PPUSH
9141: CALL_OW 88
// Wait ( 0 0$01 ) ;
9145: LD_INT 35
9147: PPUSH
9148: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9152: LD_EXP 15
9156: PPUSH
9157: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9161: LD_EXP 15
9165: PPUSH
9166: LD_STRING D3a-Frank-4
9168: PPUSH
9169: CALL_OW 88
// if Lisa then
9173: LD_EXP 14
9177: IFFALSE 9191
// Say ( Lisa , D3a-Lisa-4 ) ;
9179: LD_EXP 14
9183: PPUSH
9184: LD_STRING D3a-Lisa-4
9186: PPUSH
9187: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9191: LD_EXP 9
9195: PPUSH
9196: LD_STRING D3a-JMM-4
9198: PPUSH
9199: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9203: LD_EXP 15
9207: PPUSH
9208: LD_STRING D3a-Frank-5
9210: PPUSH
9211: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9215: LD_EXP 9
9219: PPUSH
9220: LD_STRING D3a-JMM-5
9222: PPUSH
9223: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9227: LD_EXP 15
9231: PPUSH
9232: LD_STRING D3a-Frank-6
9234: PPUSH
9235: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9239: LD_EXP 9
9243: PPUSH
9244: LD_STRING D3a-JMM-6
9246: PPUSH
9247: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9251: LD_EXP 15
9255: PPUSH
9256: LD_STRING D3a-Frank-7
9258: PPUSH
9259: CALL_OW 88
// InGameOff ;
9263: CALL_OW 9
// end ;
9267: PPOPN 2
9269: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9270: LD_EXP 18
9274: PUSH
9275: LD_EXP 15
9279: NOT
9280: AND
9281: PUSH
9282: LD_INT 22
9284: PUSH
9285: LD_INT 1
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 92
9294: PUSH
9295: LD_EXP 18
9299: PPUSH
9300: CALL_OW 250
9304: PUSH
9305: LD_EXP 18
9309: PPUSH
9310: CALL_OW 251
9314: PUSH
9315: LD_INT 7
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PPUSH
9328: CALL_OW 69
9332: AND
9333: PUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 463
9341: NOT
9342: AND
9343: PUSH
9344: LD_INT 4
9346: PPUSH
9347: CALL_OW 463
9351: NOT
9352: AND
9353: IFFALSE 9533
9355: GO 9357
9357: DISABLE
// begin InGameOn ;
9358: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9362: LD_EXP 9
9366: PPUSH
9367: LD_EXP 18
9371: PPUSH
9372: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9376: LD_EXP 18
9380: PPUSH
9381: LD_EXP 9
9385: PPUSH
9386: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9390: LD_EXP 18
9394: PPUSH
9395: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9399: LD_EXP 18
9403: PPUSH
9404: LD_STRING D3b-Yam-1
9406: PPUSH
9407: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9411: LD_EXP 9
9415: PPUSH
9416: LD_STRING D3b-JMM-1
9418: PPUSH
9419: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9423: LD_INT 1
9425: PPUSH
9426: LD_INT 4
9428: PPUSH
9429: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9433: LD_INT 85
9435: PPUSH
9436: LD_INT 134
9438: PPUSH
9439: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9443: LD_EXP 18
9447: PPUSH
9448: LD_STRING D3b-Yam-2
9450: PPUSH
9451: CALL_OW 88
// Wait ( 0 0$01 ) ;
9455: LD_INT 35
9457: PPUSH
9458: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9462: LD_EXP 9
9466: PPUSH
9467: LD_STRING D3b-JMM-2
9469: PPUSH
9470: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9474: LD_INT 166
9476: PPUSH
9477: LD_INT 136
9479: PPUSH
9480: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9484: LD_EXP 18
9488: PPUSH
9489: LD_STRING D3b-Yam-3
9491: PPUSH
9492: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9496: LD_EXP 9
9500: PPUSH
9501: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9505: LD_EXP 9
9509: PPUSH
9510: LD_STRING D3b-JMM-3a
9512: PPUSH
9513: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9517: LD_EXP 18
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL_OW 235
// InGameOff ;
9529: CALL_OW 9
// end ;
9533: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9534: LD_INT 7
9536: PPUSH
9537: LD_INT 22
9539: PUSH
9540: LD_INT 1
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 3
9549: PUSH
9550: LD_INT 24
9552: PUSH
9553: LD_INT 1000
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 70
9572: IFFALSE 10028
9574: GO 9576
9576: DISABLE
9577: LD_INT 0
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9583: LD_INT 35
9585: PPUSH
9586: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9590: LD_ADDR_VAR 0 1
9594: PUSH
9595: LD_INT 7
9597: PPUSH
9598: LD_INT 22
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 3
9610: PUSH
9611: LD_INT 24
9613: PUSH
9614: LD_INT 1000
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL_OW 70
9633: ST_TO_ADDR
// if not un then
9634: LD_VAR 0 1
9638: NOT
9639: IFFALSE 9643
// continue ;
9641: GO 9583
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9643: LD_ADDR_VAR 0 3
9647: PUSH
9648: LD_VAR 0 1
9652: PUSH
9653: LD_INT 1
9655: ARRAY
9656: PPUSH
9657: CALL 2016 0 1
9661: ST_TO_ADDR
// until tw ;
9662: LD_VAR 0 3
9666: IFFALSE 9583
// DialogueOn ;
9668: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9672: LD_VAR 0 3
9676: PPUSH
9677: CALL_OW 87
// if Lisa then
9681: LD_EXP 14
9685: IFFALSE 9713
// begin Say ( Lisa , D5-Lisa-1 ) ;
9687: LD_EXP 14
9691: PPUSH
9692: LD_STRING D5-Lisa-1
9694: PPUSH
9695: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9699: LD_EXP 9
9703: PPUSH
9704: LD_STRING D5-JMM-1a
9706: PPUSH
9707: CALL_OW 88
// end else
9711: GO 9725
// Say ( JMM , D5-JMM-1 ) ;
9713: LD_EXP 9
9717: PPUSH
9718: LD_STRING D5-JMM-1
9720: PPUSH
9721: CALL_OW 88
// DialogueOff ;
9725: CALL_OW 7
// while ( true ) do
9729: LD_INT 1
9731: IFFALSE 9787
// begin wait ( 0 0$01 ) ;
9733: LD_INT 35
9735: PPUSH
9736: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9740: LD_ADDR_VAR 0 2
9744: PUSH
9745: LD_INT 8
9747: PPUSH
9748: LD_INT 30
9750: PUSH
9751: LD_INT 26
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 101
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 71
9776: ST_TO_ADDR
// if x then
9777: LD_VAR 0 2
9781: IFFALSE 9785
// break ;
9783: GO 9787
// end ;
9785: GO 9729
// CenterOnUnits ( x [ 1 ] ) ;
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 1
9794: ARRAY
9795: PPUSH
9796: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9800: LD_EXP 15
9804: PUSH
9805: LD_EXP 15
9809: PPUSH
9810: CALL_OW 255
9814: PUSH
9815: LD_INT 1
9817: EQUAL
9818: AND
9819: IFFALSE 9835
// Say ( Frank , D5a-Frank-1 ) else
9821: LD_EXP 15
9825: PPUSH
9826: LD_STRING D5a-Frank-1
9828: PPUSH
9829: CALL_OW 88
9833: GO 9889
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
9835: LD_EXP 18
9839: PUSH
9840: LD_EXP 18
9844: PPUSH
9845: CALL_OW 255
9849: PUSH
9850: LD_INT 1
9852: EQUAL
9853: AND
9854: IFFALSE 9870
// Say ( Kikuchi , D5a-Yam-1 ) else
9856: LD_EXP 18
9860: PPUSH
9861: LD_STRING D5a-Yam-1
9863: PPUSH
9864: CALL_OW 88
9868: GO 9889
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
9870: LD_INT 1
9872: PPUSH
9873: CALL 588 0 1
9877: PUSH
9878: LD_INT 1
9880: ARRAY
9881: PPUSH
9882: LD_STRING D5a-Sol1-1
9884: PPUSH
9885: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
9889: LD_EXP 9
9893: PPUSH
9894: LD_STRING D5a-JMM-1
9896: PPUSH
9897: CALL_OW 88
// if Cyrus then
9901: LD_EXP 13
9905: IFFALSE 9919
// Say ( Cyrus , D5a-Cyrus-1 ) ;
9907: LD_EXP 13
9911: PPUSH
9912: LD_STRING D5a-Cyrus-1
9914: PPUSH
9915: CALL_OW 88
// x := false ;
9919: LD_ADDR_VAR 0 2
9923: PUSH
9924: LD_INT 0
9926: ST_TO_ADDR
// while ( true ) do
9927: LD_INT 1
9929: IFFALSE 10016
// begin wait ( 0 0$01 ) ;
9931: LD_INT 35
9933: PPUSH
9934: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
9938: LD_ADDR_VAR 0 4
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: LD_INT 30
9948: PUSH
9949: LD_INT 0
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 30
9958: PUSH
9959: LD_INT 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: PUSH
9976: LD_INT 1
9978: DIFF
9979: PUSH
9980: FOR_IN
9981: IFFALSE 10004
// if BaseNeedEnergy ( i ) then
9983: LD_VAR 0 4
9987: PPUSH
9988: CALL 1141 0 1
9992: IFFALSE 10002
// x := true ;
9994: LD_ADDR_VAR 0 2
9998: PUSH
9999: LD_INT 1
10001: ST_TO_ADDR
10002: GO 9980
10004: POP
10005: POP
// if x then
10006: LD_VAR 0 2
10010: IFFALSE 10014
// break ;
10012: GO 10016
// end ;
10014: GO 9927
// Say ( JMM , D5b-JMM-1 ) ;
10016: LD_EXP 9
10020: PPUSH
10021: LD_STRING D5b-JMM-1
10023: PPUSH
10024: CALL_OW 88
// end ;
10028: PPOPN 4
10030: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10031: LD_EXP 5
10035: PUSH
10036: LD_INT 1
10038: ARRAY
10039: PUSH
10040: LD_OWVAR 1
10044: LESS
10045: IFFALSE 10245
10047: GO 10049
10049: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10050: LD_INT 16
10052: PPUSH
10053: CALL_OW 301
10057: NOT
10058: IFFALSE 10081
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10060: LD_EXP 19
10064: PPUSH
10065: LD_STRING D3b-Har-3
10067: PPUSH
10068: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10072: LD_STRING M2a
10074: PPUSH
10075: CALL_OW 337
// end else
10079: GO 10100
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10081: LD_EXP 19
10085: PPUSH
10086: LD_STRING D3b-Har-3a
10088: PPUSH
10089: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10093: LD_STRING M2
10095: PPUSH
10096: CALL_OW 337
// end ; can_end := true ;
10100: LD_ADDR_EXP 6
10104: PUSH
10105: LD_INT 1
10107: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10108: LD_INT 9
10110: PPUSH
10111: LD_INT 1
10113: PPUSH
10114: CALL_OW 424
// Wait ( 0 0$02 ) ;
10118: LD_INT 70
10120: PPUSH
10121: CALL_OW 67
// if Lisa then
10125: LD_EXP 14
10129: IFFALSE 10143
// Say ( Lisa , D3b-Lisa ) ;
10131: LD_EXP 14
10135: PPUSH
10136: LD_STRING D3b-Lisa
10138: PPUSH
10139: CALL_OW 88
// if Bobby then
10143: LD_EXP 12
10147: IFFALSE 10161
// Say ( Bobby , D3b-Bobby-3 ) ;
10149: LD_EXP 12
10153: PPUSH
10154: LD_STRING D3b-Bobby-3
10156: PPUSH
10157: CALL_OW 88
// if Cyrus then
10161: LD_EXP 13
10165: IFFALSE 10179
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10167: LD_EXP 13
10171: PPUSH
10172: LD_STRING D3b-Cyrus-3
10174: PPUSH
10175: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10179: LD_EXP 15
10183: PUSH
10184: LD_EXP 15
10188: PPUSH
10189: CALL_OW 255
10193: PUSH
10194: LD_INT 1
10196: EQUAL
10197: AND
10198: IFFALSE 10212
// Say ( Frank , D3b-Frank-3 ) ;
10200: LD_EXP 15
10204: PPUSH
10205: LD_STRING D3b-Frank-3
10207: PPUSH
10208: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10212: LD_EXP 18
10216: PUSH
10217: LD_EXP 18
10221: PPUSH
10222: CALL_OW 255
10226: PUSH
10227: LD_INT 1
10229: EQUAL
10230: AND
10231: IFFALSE 10245
// Say ( Kikuchi , D3b-Yam-4 ) ;
10233: LD_EXP 18
10237: PPUSH
10238: LD_STRING D3b-Yam-4
10240: PPUSH
10241: CALL_OW 88
// end ;
10245: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10246: LD_EXP 5
10250: PUSH
10251: LD_INT 2
10253: ARRAY
10254: PUSH
10255: LD_OWVAR 1
10259: LESS
10260: IFFALSE 10292
10262: GO 10264
10264: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10265: LD_EXP 19
10269: PPUSH
10270: LD_STRING D4-Har-1
10272: PPUSH
10273: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10277: LD_STRING M3
10279: PPUSH
10280: CALL_OW 337
// must_end := true ;
10284: LD_ADDR_EXP 7
10288: PUSH
10289: LD_INT 1
10291: ST_TO_ADDR
// end ;
10292: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10293: LD_EXP 5
10297: PUSH
10298: LD_INT 3
10300: ARRAY
10301: PUSH
10302: LD_OWVAR 1
10306: LESS
10307: IFFALSE 10338
10309: GO 10311
10311: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10312: LD_INT 16
10314: PPUSH
10315: CALL_OW 301
10319: NOT
10320: IFFALSE 10331
// YouLost ( TimeOut1 ) else
10322: LD_STRING TimeOut1
10324: PPUSH
10325: CALL_OW 104
10329: GO 10338
// YouLost ( TimeOut2 ) ;
10331: LD_STRING TimeOut2
10333: PPUSH
10334: CALL_OW 104
// end ;
10338: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10339: LD_EXP 9
10343: PPUSH
10344: LD_INT 9
10346: PPUSH
10347: CALL_OW 308
10351: PUSH
10352: LD_EXP 6
10356: AND
10357: IFFALSE 11457
10359: GO 10361
10361: DISABLE
10362: LD_INT 0
10364: PPUSH
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
// begin wait_on := false ;
10370: LD_ADDR_VAR 0 1
10374: PUSH
10375: LD_INT 0
10377: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10378: LD_INT 1
10380: PPUSH
10381: CALL 1218 0 1
10385: PUSH
10386: LD_INT 0
10388: PLUS
10389: PUSH
10390: LD_INT 1
10392: PPUSH
10393: LD_INT 9
10395: PPUSH
10396: CALL 1309 0 2
10400: PUSH
10401: LD_INT 1
10403: PPUSH
10404: LD_INT 9
10406: PPUSH
10407: CALL 1356 0 2
10411: ADD
10412: PUSH
10413: LD_INT 0
10415: PLUS
10416: GREATER
10417: IFFALSE 10466
// case Query ( Q1 ) of 1 :
10419: LD_STRING Q1
10421: PPUSH
10422: CALL_OW 97
10426: PUSH
10427: LD_INT 1
10429: DOUBLE
10430: EQUAL
10431: IFTRUE 10435
10433: GO 10446
10435: POP
// wait_on := true ; 2 :
10436: LD_ADDR_VAR 0 1
10440: PUSH
10441: LD_INT 1
10443: ST_TO_ADDR
10444: GO 10466
10446: LD_INT 2
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10465
10454: POP
// wait_on := false ; end ;
10455: LD_ADDR_VAR 0 1
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
10463: GO 10466
10465: POP
// repeat wait ( 0 0$01 ) ;
10466: LD_INT 35
10468: PPUSH
10469: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10473: LD_VAR 0 1
10477: NOT
10478: PUSH
10479: LD_INT 1
10481: PPUSH
10482: CALL 1218 0 1
10486: PUSH
10487: LD_INT 0
10489: PLUS
10490: PUSH
10491: LD_INT 1
10493: PPUSH
10494: LD_INT 9
10496: PPUSH
10497: CALL 1309 0 2
10501: PUSH
10502: LD_INT 1
10504: PPUSH
10505: LD_INT 9
10507: PPUSH
10508: CALL 1356 0 2
10512: ADD
10513: PUSH
10514: LD_INT 0
10516: PLUS
10517: EQUAL
10518: OR
10519: IFFALSE 10466
// DialogueOn ;
10521: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10525: LD_EXP 9
10529: PPUSH
10530: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10534: LD_EXP 9
10538: PPUSH
10539: LD_STRING D6-JMM-1
10541: PPUSH
10542: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10546: LD_EXP 19
10550: PPUSH
10551: LD_STRING D6-Har-1
10553: PPUSH
10554: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10558: LD_EXP 9
10562: PPUSH
10563: LD_STRING D6-JMM-2
10565: PPUSH
10566: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10570: LD_EXP 19
10574: PPUSH
10575: LD_STRING D6-Har-2
10577: PPUSH
10578: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10582: LD_EXP 9
10586: PPUSH
10587: LD_STRING D6-JMM-3
10589: PPUSH
10590: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10594: LD_EXP 19
10598: PPUSH
10599: LD_STRING D6-Har-3
10601: PPUSH
10602: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10606: LD_EXP 9
10610: PPUSH
10611: LD_STRING D6-JMM-4
10613: PPUSH
10614: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10618: LD_EXP 19
10622: PPUSH
10623: LD_STRING D6-Har-4
10625: PPUSH
10626: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10630: LD_EXP 9
10634: PPUSH
10635: LD_STRING D6-JMM-5
10637: PPUSH
10638: CALL_OW 88
// DialogueOff ;
10642: CALL_OW 7
// m1 := false ;
10646: LD_ADDR_VAR 0 4
10650: PUSH
10651: LD_INT 0
10653: ST_TO_ADDR
// m2 := false ;
10654: LD_ADDR_VAR 0 5
10658: PUSH
10659: LD_INT 0
10661: ST_TO_ADDR
// m3 := false ;
10662: LD_ADDR_VAR 0 6
10666: PUSH
10667: LD_INT 0
10669: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10670: LD_ADDR_VAR 0 3
10674: PUSH
10675: LD_INT 3
10677: PPUSH
10678: CALL 1487 0 1
10682: ST_TO_ADDR
// if tmp >= 35 then
10683: LD_VAR 0 3
10687: PUSH
10688: LD_INT 35
10690: GREATEREQUAL
10691: IFFALSE 10728
// begin AddMedal ( Destroy1 , - 1 ) ;
10693: LD_STRING Destroy1
10695: PPUSH
10696: LD_INT 1
10698: NEG
10699: PPUSH
10700: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10704: LD_STRING Destroy2
10706: PPUSH
10707: LD_INT 1
10709: NEG
10710: PPUSH
10711: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10715: LD_STRING Destroy3
10717: PPUSH
10718: LD_INT 1
10720: NEG
10721: PPUSH
10722: CALL_OW 101
// end else
10726: GO 10839
// begin AddMedal ( Destroy1 , 1 ) ;
10728: LD_STRING Destroy1
10730: PPUSH
10731: LD_INT 1
10733: PPUSH
10734: CALL_OW 101
// m1 := true ;
10738: LD_ADDR_VAR 0 4
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// if tmp >= 25 then
10746: LD_VAR 0 3
10750: PUSH
10751: LD_INT 25
10753: GREATEREQUAL
10754: IFFALSE 10780
// begin AddMedal ( Destroy2 , - 1 ) ;
10756: LD_STRING Destroy2
10758: PPUSH
10759: LD_INT 1
10761: NEG
10762: PPUSH
10763: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10767: LD_STRING Destroy3
10769: PPUSH
10770: LD_INT 1
10772: NEG
10773: PPUSH
10774: CALL_OW 101
// end else
10778: GO 10839
// begin AddMedal ( Destroy2 , 1 ) ;
10780: LD_STRING Destroy2
10782: PPUSH
10783: LD_INT 1
10785: PPUSH
10786: CALL_OW 101
// m2 := true ;
10790: LD_ADDR_VAR 0 5
10794: PUSH
10795: LD_INT 1
10797: ST_TO_ADDR
// if tmp >= 15 then
10798: LD_VAR 0 3
10802: PUSH
10803: LD_INT 15
10805: GREATEREQUAL
10806: IFFALSE 10821
// AddMedal ( Destroy3 , - 1 ) else
10808: LD_STRING Destroy3
10810: PPUSH
10811: LD_INT 1
10813: NEG
10814: PPUSH
10815: CALL_OW 101
10819: GO 10839
// begin AddMedal ( Destroy3 , 1 ) ;
10821: LD_STRING Destroy3
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 101
// m3 := true ;
10831: LD_ADDR_VAR 0 6
10835: PUSH
10836: LD_INT 1
10838: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
10839: LD_OWVAR 1
10843: PUSH
10844: LD_INT 67200
10846: LESSEQUAL
10847: IFFALSE 10856
// SetAchievement ( ACH_ASPEED_7 ) ;
10849: LD_STRING ACH_ASPEED_7
10851: PPUSH
10852: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
10856: LD_VAR 0 4
10860: PUSH
10861: LD_VAR 0 5
10865: AND
10866: PUSH
10867: LD_VAR 0 6
10871: AND
10872: PUSH
10873: LD_OWVAR 67
10877: PUSH
10878: LD_INT 3
10880: EQUAL
10881: AND
10882: IFFALSE 10894
// SetAchievementEX ( ACH_AMER , 7 ) ;
10884: LD_STRING ACH_AMER
10886: PPUSH
10887: LD_INT 7
10889: PPUSH
10890: CALL_OW 564
// GiveMedals ( MAIN ) ;
10894: LD_STRING MAIN
10896: PPUSH
10897: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
10901: LD_ADDR_VAR 0 3
10905: PUSH
10906: LD_INT 1
10908: PPUSH
10909: LD_INT 9
10911: PPUSH
10912: CALL 1309 0 2
10916: PUSH
10917: LD_INT 1
10919: PPUSH
10920: LD_INT 9
10922: PPUSH
10923: CALL 1356 0 2
10927: UNION
10928: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10929: LD_VAR 0 3
10933: PPUSH
10934: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10938: LD_EXP 9
10942: PPUSH
10943: LD_EXP 3
10947: PUSH
10948: LD_STRING JMM
10950: STR
10951: PPUSH
10952: CALL_OW 38
// if Brown in tmp then
10956: LD_EXP 10
10960: PUSH
10961: LD_VAR 0 3
10965: IN
10966: IFFALSE 10986
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
10968: LD_EXP 10
10972: PPUSH
10973: LD_EXP 3
10977: PUSH
10978: LD_STRING Brown
10980: STR
10981: PPUSH
10982: CALL_OW 38
// if Donaldson in tmp then
10986: LD_EXP 11
10990: PUSH
10991: LD_VAR 0 3
10995: IN
10996: IFFALSE 11016
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10998: LD_EXP 11
11002: PPUSH
11003: LD_EXP 3
11007: PUSH
11008: LD_STRING Donaldson
11010: STR
11011: PPUSH
11012: CALL_OW 38
// if Bobby in tmp then
11016: LD_EXP 12
11020: PUSH
11021: LD_VAR 0 3
11025: IN
11026: IFFALSE 11046
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11028: LD_EXP 12
11032: PPUSH
11033: LD_EXP 3
11037: PUSH
11038: LD_STRING Bobby
11040: STR
11041: PPUSH
11042: CALL_OW 38
// if Cyrus in tmp then
11046: LD_EXP 13
11050: PUSH
11051: LD_VAR 0 3
11055: IN
11056: IFFALSE 11076
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11058: LD_EXP 13
11062: PPUSH
11063: LD_EXP 3
11067: PUSH
11068: LD_STRING Cyrus
11070: STR
11071: PPUSH
11072: CALL_OW 38
// if Lisa in tmp then
11076: LD_EXP 14
11080: PUSH
11081: LD_VAR 0 3
11085: IN
11086: IFFALSE 11106
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11088: LD_EXP 14
11092: PPUSH
11093: LD_EXP 3
11097: PUSH
11098: LD_STRING Lisa
11100: STR
11101: PPUSH
11102: CALL_OW 38
// if Frank in tmp then
11106: LD_EXP 15
11110: PUSH
11111: LD_VAR 0 3
11115: IN
11116: IFFALSE 11136
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11118: LD_EXP 15
11122: PPUSH
11123: LD_EXP 3
11127: PUSH
11128: LD_STRING Frank
11130: STR
11131: PPUSH
11132: CALL_OW 38
// if Gladstone in tmp then
11136: LD_EXP 16
11140: PUSH
11141: LD_VAR 0 3
11145: IN
11146: IFFALSE 11166
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11148: LD_EXP 16
11152: PPUSH
11153: LD_EXP 3
11157: PUSH
11158: LD_STRING Gladstone
11160: STR
11161: PPUSH
11162: CALL_OW 38
// if Khatam in tmp then
11166: LD_EXP 17
11170: PUSH
11171: LD_VAR 0 3
11175: IN
11176: IFFALSE 11196
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11178: LD_EXP 17
11182: PPUSH
11183: LD_EXP 3
11187: PUSH
11188: LD_STRING Khatam
11190: STR
11191: PPUSH
11192: CALL_OW 38
// if Kikuchi in tmp then
11196: LD_EXP 18
11200: PUSH
11201: LD_VAR 0 3
11205: IN
11206: IFFALSE 11226
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11208: LD_EXP 18
11212: PPUSH
11213: LD_EXP 3
11217: PUSH
11218: LD_STRING Kikuchi
11220: STR
11221: PPUSH
11222: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11226: LD_VAR 0 3
11230: PUSH
11231: LD_EXP 9
11235: PUSH
11236: LD_EXP 10
11240: PUSH
11241: LD_EXP 11
11245: PUSH
11246: LD_EXP 12
11250: PUSH
11251: LD_EXP 13
11255: PUSH
11256: LD_EXP 14
11260: PUSH
11261: LD_EXP 15
11265: PUSH
11266: LD_EXP 16
11270: PUSH
11271: LD_EXP 18
11275: PUSH
11276: LD_EXP 17
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: DIFF
11293: PPUSH
11294: LD_EXP 3
11298: PUSH
11299: LD_STRING others
11301: STR
11302: PPUSH
11303: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11307: LD_OWVAR 1
11311: PPUSH
11312: LD_STRING 07_time
11314: PPUSH
11315: CALL_OW 39
// tmp := [ ] ;
11319: LD_ADDR_VAR 0 3
11323: PUSH
11324: EMPTY
11325: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_INT 9
11333: PPUSH
11334: LD_INT 22
11336: PUSH
11337: LD_INT 1
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 23
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 21
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: PPUSH
11372: CALL_OW 70
11376: PUSH
11377: FOR_IN
11378: IFFALSE 11439
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11380: LD_ADDR_VAR 0 3
11384: PUSH
11385: LD_VAR 0 3
11389: PUSH
11390: LD_VAR 0 2
11394: PPUSH
11395: CALL_OW 265
11399: PUSH
11400: LD_VAR 0 2
11404: PPUSH
11405: CALL_OW 262
11409: PUSH
11410: LD_VAR 0 2
11414: PPUSH
11415: CALL_OW 263
11419: PUSH
11420: LD_VAR 0 2
11424: PPUSH
11425: CALL_OW 264
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: ADD
11436: ST_TO_ADDR
11437: GO 11377
11439: POP
11440: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11441: LD_VAR 0 3
11445: PPUSH
11446: LD_STRING 07_vehicles
11448: PPUSH
11449: CALL_OW 39
// YouWin ;
11453: CALL_OW 103
// end ; end_of_file
11457: PPOPN 6
11459: END
// on UnitDestroyed ( un ) do begin if un = JMM then
11460: LD_VAR 0 1
11464: PUSH
11465: LD_EXP 9
11469: EQUAL
11470: IFFALSE 11479
// YouLost ( JMM ) ;
11472: LD_STRING JMM
11474: PPUSH
11475: CALL_OW 104
// if GetType ( un ) = unit_building then
11479: LD_VAR 0 1
11483: PPUSH
11484: CALL_OW 247
11488: PUSH
11489: LD_INT 3
11491: EQUAL
11492: IFFALSE 11508
// buildings_counter := buildings_counter + 1 ;
11494: LD_ADDR_EXP 4
11498: PUSH
11499: LD_EXP 4
11503: PUSH
11504: LD_INT 1
11506: PLUS
11507: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11508: LD_VAR 0 1
11512: PUSH
11513: LD_INT 6
11515: PPUSH
11516: LD_INT 2
11518: PUSH
11519: LD_INT 30
11521: PUSH
11522: LD_INT 33
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 30
11531: PUSH
11532: LD_INT 32
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: PPUSH
11544: CALL_OW 70
11548: IN
11549: IFFALSE 11608
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11551: LD_ADDR_EXP 20
11555: PUSH
11556: LD_EXP 20
11560: PUSH
11561: LD_VAR 0 1
11565: PPUSH
11566: CALL_OW 266
11570: PUSH
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 250
11580: PUSH
11581: LD_VAR 0 1
11585: PPUSH
11586: CALL_OW 251
11590: PUSH
11591: LD_VAR 0 1
11595: PPUSH
11596: CALL_OW 254
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: ADD
11607: ST_TO_ADDR
// if un = ru_dep_main then
11608: LD_VAR 0 1
11612: PUSH
11613: LD_INT 16
11615: EQUAL
11616: IFFALSE 11625
// ChangeMissionObjectives ( M1a ) ;
11618: LD_STRING M1a
11620: PPUSH
11621: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 247
11634: PUSH
11635: LD_INT 1
11637: EQUAL
11638: PUSH
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 255
11648: PUSH
11649: LD_INT 3
11651: EQUAL
11652: AND
11653: IFFALSE 11669
// kill_counter := kill_counter + 1 ;
11655: LD_ADDR_EXP 8
11659: PUSH
11660: LD_EXP 8
11664: PUSH
11665: LD_INT 1
11667: PLUS
11668: ST_TO_ADDR
// end ;
11669: PPOPN 1
11671: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11672: LD_VAR 0 1
11676: PPUSH
11677: CALL_OW 266
11681: PUSH
11682: LD_INT 32
11684: EQUAL
11685: PUSH
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 110
11695: PUSH
11696: LD_INT 7
11698: EQUAL
11699: AND
11700: IFFALSE 11714
// SetTag ( un , 0 ) ;
11702: LD_VAR 0 1
11706: PPUSH
11707: LD_INT 0
11709: PPUSH
11710: CALL_OW 109
// end ;
11714: PPOPN 1
11716: END
// on BuildingStarted ( b , builder ) do var i ;
11717: LD_INT 0
11719: PPUSH
// begin if GetSide ( b ) = 3 then
11720: LD_VAR 0 1
11724: PPUSH
11725: CALL_OW 255
11729: PUSH
11730: LD_INT 3
11732: EQUAL
11733: IFFALSE 11773
// for i = 1 to 4 do
11735: LD_ADDR_VAR 0 3
11739: PUSH
11740: DOUBLE
11741: LD_INT 1
11743: DEC
11744: ST_TO_ADDR
11745: LD_INT 4
11747: PUSH
11748: FOR_TO
11749: IFFALSE 11771
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11751: LD_ADDR_EXP 20
11755: PUSH
11756: LD_EXP 20
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: CALL_OW 3
11768: ST_TO_ADDR
11769: GO 11748
11771: POP
11772: POP
// end ;
11773: PPOPN 3
11775: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11776: LD_VAR 0 1
11780: PPUSH
11781: CALL_OW 266
11785: PUSH
11786: LD_INT 32
11788: PUSH
11789: LD_INT 33
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: IN
11796: IFFALSE 11810
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11798: LD_VAR 0 1
11802: PPUSH
11803: LD_INT 43
11805: PPUSH
11806: CALL_OW 148
11810: PPOPN 1
11812: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
11813: LD_VAR 0 1
11817: PUSH
11818: LD_INT 22
11820: PUSH
11821: LD_INT 3
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 2
11830: PUSH
11831: LD_INT 30
11833: PUSH
11834: LD_INT 31
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 30
11843: PUSH
11844: LD_INT 32
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PPUSH
11860: CALL_OW 69
11864: IN
11865: IFFALSE 11887
// GoToAnotherTower ( un , b , 143 , 143 ) ;
11867: LD_VAR 0 2
11871: PPUSH
11872: LD_VAR 0 1
11876: PPUSH
11877: LD_INT 143
11879: PPUSH
11880: LD_INT 143
11882: PPUSH
11883: CALL 818 0 4
// end ;
11887: PPOPN 2
11889: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
11890: LD_VAR 0 1
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 3
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 30
11907: PUSH
11908: LD_INT 32
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PPUSH
11919: CALL_OW 69
11923: IN
11924: IFFALSE 11938
// SetTag ( b , 0 ) ;
11926: LD_VAR 0 1
11930: PPUSH
11931: LD_INT 0
11933: PPUSH
11934: CALL_OW 109
// end ; end_of_file
11938: PPOPN 2
11940: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
11941: LD_INT 0
11943: PPUSH
// ar_miner := 81 ;
11944: LD_ADDR_EXP 28
11948: PUSH
11949: LD_INT 81
11951: ST_TO_ADDR
// ar_crane := 88 ;
11952: LD_ADDR_EXP 27
11956: PUSH
11957: LD_INT 88
11959: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11960: LD_ADDR_EXP 22
11964: PUSH
11965: LD_INT 89
11967: ST_TO_ADDR
// us_hack := 99 ;
11968: LD_ADDR_EXP 23
11972: PUSH
11973: LD_INT 99
11975: ST_TO_ADDR
// us_artillery := 97 ;
11976: LD_ADDR_EXP 24
11980: PUSH
11981: LD_INT 97
11983: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11984: LD_ADDR_EXP 25
11988: PUSH
11989: LD_INT 91
11991: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11992: LD_ADDR_EXP 26
11996: PUSH
11997: LD_INT 92
11999: ST_TO_ADDR
// ru_radar := 98 ;
12000: LD_ADDR_EXP 21
12004: PUSH
12005: LD_INT 98
12007: ST_TO_ADDR
// tech_Artillery := 80 ;
12008: LD_ADDR_EXP 29
12012: PUSH
12013: LD_INT 80
12015: ST_TO_ADDR
// tech_RadMat := 81 ;
12016: LD_ADDR_EXP 30
12020: PUSH
12021: LD_INT 81
12023: ST_TO_ADDR
// tech_BasicTools := 82 ;
12024: LD_ADDR_EXP 31
12028: PUSH
12029: LD_INT 82
12031: ST_TO_ADDR
// tech_Cargo := 83 ;
12032: LD_ADDR_EXP 32
12036: PUSH
12037: LD_INT 83
12039: ST_TO_ADDR
// tech_Track := 84 ;
12040: LD_ADDR_EXP 33
12044: PUSH
12045: LD_INT 84
12047: ST_TO_ADDR
// tech_Crane := 85 ;
12048: LD_ADDR_EXP 34
12052: PUSH
12053: LD_INT 85
12055: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12056: LD_ADDR_EXP 35
12060: PUSH
12061: LD_INT 86
12063: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12064: LD_ADDR_EXP 36
12068: PUSH
12069: LD_INT 87
12071: ST_TO_ADDR
// end ;
12072: LD_VAR 0 1
12076: RET
// every 1 do
12077: GO 12079
12079: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12080: CALL 11941 0 0
12084: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12085: LD_VAR 0 2
12089: PUSH
12090: LD_INT 100
12092: EQUAL
12093: IFFALSE 13042
// begin if not StreamModeActive then
12095: LD_EXP 37
12099: NOT
12100: IFFALSE 12110
// StreamModeActive := true ;
12102: LD_ADDR_EXP 37
12106: PUSH
12107: LD_INT 1
12109: ST_TO_ADDR
// if p3 = 0 then
12110: LD_VAR 0 3
12114: PUSH
12115: LD_INT 0
12117: EQUAL
12118: IFFALSE 12124
// InitStreamMode ;
12120: CALL 13200 0 0
// if p3 = 1 then
12124: LD_VAR 0 3
12128: PUSH
12129: LD_INT 1
12131: EQUAL
12132: IFFALSE 12142
// sRocket := true ;
12134: LD_ADDR_EXP 42
12138: PUSH
12139: LD_INT 1
12141: ST_TO_ADDR
// if p3 = 2 then
12142: LD_VAR 0 3
12146: PUSH
12147: LD_INT 2
12149: EQUAL
12150: IFFALSE 12160
// sSpeed := true ;
12152: LD_ADDR_EXP 41
12156: PUSH
12157: LD_INT 1
12159: ST_TO_ADDR
// if p3 = 3 then
12160: LD_VAR 0 3
12164: PUSH
12165: LD_INT 3
12167: EQUAL
12168: IFFALSE 12178
// sEngine := true ;
12170: LD_ADDR_EXP 43
12174: PUSH
12175: LD_INT 1
12177: ST_TO_ADDR
// if p3 = 4 then
12178: LD_VAR 0 3
12182: PUSH
12183: LD_INT 4
12185: EQUAL
12186: IFFALSE 12196
// sSpec := true ;
12188: LD_ADDR_EXP 40
12192: PUSH
12193: LD_INT 1
12195: ST_TO_ADDR
// if p3 = 5 then
12196: LD_VAR 0 3
12200: PUSH
12201: LD_INT 5
12203: EQUAL
12204: IFFALSE 12214
// sLevel := true ;
12206: LD_ADDR_EXP 44
12210: PUSH
12211: LD_INT 1
12213: ST_TO_ADDR
// if p3 = 6 then
12214: LD_VAR 0 3
12218: PUSH
12219: LD_INT 6
12221: EQUAL
12222: IFFALSE 12232
// sArmoury := true ;
12224: LD_ADDR_EXP 45
12228: PUSH
12229: LD_INT 1
12231: ST_TO_ADDR
// if p3 = 7 then
12232: LD_VAR 0 3
12236: PUSH
12237: LD_INT 7
12239: EQUAL
12240: IFFALSE 12250
// sRadar := true ;
12242: LD_ADDR_EXP 46
12246: PUSH
12247: LD_INT 1
12249: ST_TO_ADDR
// if p3 = 8 then
12250: LD_VAR 0 3
12254: PUSH
12255: LD_INT 8
12257: EQUAL
12258: IFFALSE 12268
// sBunker := true ;
12260: LD_ADDR_EXP 47
12264: PUSH
12265: LD_INT 1
12267: ST_TO_ADDR
// if p3 = 9 then
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 9
12275: EQUAL
12276: IFFALSE 12286
// sHack := true ;
12278: LD_ADDR_EXP 48
12282: PUSH
12283: LD_INT 1
12285: ST_TO_ADDR
// if p3 = 10 then
12286: LD_VAR 0 3
12290: PUSH
12291: LD_INT 10
12293: EQUAL
12294: IFFALSE 12304
// sFire := true ;
12296: LD_ADDR_EXP 49
12300: PUSH
12301: LD_INT 1
12303: ST_TO_ADDR
// if p3 = 11 then
12304: LD_VAR 0 3
12308: PUSH
12309: LD_INT 11
12311: EQUAL
12312: IFFALSE 12322
// sRefresh := true ;
12314: LD_ADDR_EXP 50
12318: PUSH
12319: LD_INT 1
12321: ST_TO_ADDR
// if p3 = 12 then
12322: LD_VAR 0 3
12326: PUSH
12327: LD_INT 12
12329: EQUAL
12330: IFFALSE 12340
// sExp := true ;
12332: LD_ADDR_EXP 51
12336: PUSH
12337: LD_INT 1
12339: ST_TO_ADDR
// if p3 = 13 then
12340: LD_VAR 0 3
12344: PUSH
12345: LD_INT 13
12347: EQUAL
12348: IFFALSE 12358
// sDepot := true ;
12350: LD_ADDR_EXP 52
12354: PUSH
12355: LD_INT 1
12357: ST_TO_ADDR
// if p3 = 14 then
12358: LD_VAR 0 3
12362: PUSH
12363: LD_INT 14
12365: EQUAL
12366: IFFALSE 12376
// sFlag := true ;
12368: LD_ADDR_EXP 53
12372: PUSH
12373: LD_INT 1
12375: ST_TO_ADDR
// if p3 = 15 then
12376: LD_VAR 0 3
12380: PUSH
12381: LD_INT 15
12383: EQUAL
12384: IFFALSE 12394
// sKamikadze := true ;
12386: LD_ADDR_EXP 61
12390: PUSH
12391: LD_INT 1
12393: ST_TO_ADDR
// if p3 = 16 then
12394: LD_VAR 0 3
12398: PUSH
12399: LD_INT 16
12401: EQUAL
12402: IFFALSE 12412
// sTroll := true ;
12404: LD_ADDR_EXP 62
12408: PUSH
12409: LD_INT 1
12411: ST_TO_ADDR
// if p3 = 17 then
12412: LD_VAR 0 3
12416: PUSH
12417: LD_INT 17
12419: EQUAL
12420: IFFALSE 12430
// sSlow := true ;
12422: LD_ADDR_EXP 63
12426: PUSH
12427: LD_INT 1
12429: ST_TO_ADDR
// if p3 = 18 then
12430: LD_VAR 0 3
12434: PUSH
12435: LD_INT 18
12437: EQUAL
12438: IFFALSE 12448
// sLack := true ;
12440: LD_ADDR_EXP 64
12444: PUSH
12445: LD_INT 1
12447: ST_TO_ADDR
// if p3 = 19 then
12448: LD_VAR 0 3
12452: PUSH
12453: LD_INT 19
12455: EQUAL
12456: IFFALSE 12466
// sTank := true ;
12458: LD_ADDR_EXP 66
12462: PUSH
12463: LD_INT 1
12465: ST_TO_ADDR
// if p3 = 20 then
12466: LD_VAR 0 3
12470: PUSH
12471: LD_INT 20
12473: EQUAL
12474: IFFALSE 12484
// sRemote := true ;
12476: LD_ADDR_EXP 67
12480: PUSH
12481: LD_INT 1
12483: ST_TO_ADDR
// if p3 = 21 then
12484: LD_VAR 0 3
12488: PUSH
12489: LD_INT 21
12491: EQUAL
12492: IFFALSE 12502
// sPowell := true ;
12494: LD_ADDR_EXP 68
12498: PUSH
12499: LD_INT 1
12501: ST_TO_ADDR
// if p3 = 22 then
12502: LD_VAR 0 3
12506: PUSH
12507: LD_INT 22
12509: EQUAL
12510: IFFALSE 12520
// sTeleport := true ;
12512: LD_ADDR_EXP 71
12516: PUSH
12517: LD_INT 1
12519: ST_TO_ADDR
// if p3 = 23 then
12520: LD_VAR 0 3
12524: PUSH
12525: LD_INT 23
12527: EQUAL
12528: IFFALSE 12538
// sOilTower := true ;
12530: LD_ADDR_EXP 73
12534: PUSH
12535: LD_INT 1
12537: ST_TO_ADDR
// if p3 = 24 then
12538: LD_VAR 0 3
12542: PUSH
12543: LD_INT 24
12545: EQUAL
12546: IFFALSE 12556
// sShovel := true ;
12548: LD_ADDR_EXP 74
12552: PUSH
12553: LD_INT 1
12555: ST_TO_ADDR
// if p3 = 25 then
12556: LD_VAR 0 3
12560: PUSH
12561: LD_INT 25
12563: EQUAL
12564: IFFALSE 12574
// sSheik := true ;
12566: LD_ADDR_EXP 75
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
// if p3 = 26 then
12574: LD_VAR 0 3
12578: PUSH
12579: LD_INT 26
12581: EQUAL
12582: IFFALSE 12592
// sEarthquake := true ;
12584: LD_ADDR_EXP 77
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// if p3 = 27 then
12592: LD_VAR 0 3
12596: PUSH
12597: LD_INT 27
12599: EQUAL
12600: IFFALSE 12610
// sAI := true ;
12602: LD_ADDR_EXP 78
12606: PUSH
12607: LD_INT 1
12609: ST_TO_ADDR
// if p3 = 28 then
12610: LD_VAR 0 3
12614: PUSH
12615: LD_INT 28
12617: EQUAL
12618: IFFALSE 12628
// sCargo := true ;
12620: LD_ADDR_EXP 81
12624: PUSH
12625: LD_INT 1
12627: ST_TO_ADDR
// if p3 = 29 then
12628: LD_VAR 0 3
12632: PUSH
12633: LD_INT 29
12635: EQUAL
12636: IFFALSE 12646
// sDLaser := true ;
12638: LD_ADDR_EXP 82
12642: PUSH
12643: LD_INT 1
12645: ST_TO_ADDR
// if p3 = 30 then
12646: LD_VAR 0 3
12650: PUSH
12651: LD_INT 30
12653: EQUAL
12654: IFFALSE 12664
// sExchange := true ;
12656: LD_ADDR_EXP 83
12660: PUSH
12661: LD_INT 1
12663: ST_TO_ADDR
// if p3 = 31 then
12664: LD_VAR 0 3
12668: PUSH
12669: LD_INT 31
12671: EQUAL
12672: IFFALSE 12682
// sFac := true ;
12674: LD_ADDR_EXP 84
12678: PUSH
12679: LD_INT 1
12681: ST_TO_ADDR
// if p3 = 32 then
12682: LD_VAR 0 3
12686: PUSH
12687: LD_INT 32
12689: EQUAL
12690: IFFALSE 12700
// sPower := true ;
12692: LD_ADDR_EXP 85
12696: PUSH
12697: LD_INT 1
12699: ST_TO_ADDR
// if p3 = 33 then
12700: LD_VAR 0 3
12704: PUSH
12705: LD_INT 33
12707: EQUAL
12708: IFFALSE 12718
// sRandom := true ;
12710: LD_ADDR_EXP 86
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// if p3 = 34 then
12718: LD_VAR 0 3
12722: PUSH
12723: LD_INT 34
12725: EQUAL
12726: IFFALSE 12736
// sShield := true ;
12728: LD_ADDR_EXP 87
12732: PUSH
12733: LD_INT 1
12735: ST_TO_ADDR
// if p3 = 35 then
12736: LD_VAR 0 3
12740: PUSH
12741: LD_INT 35
12743: EQUAL
12744: IFFALSE 12754
// sTime := true ;
12746: LD_ADDR_EXP 88
12750: PUSH
12751: LD_INT 1
12753: ST_TO_ADDR
// if p3 = 36 then
12754: LD_VAR 0 3
12758: PUSH
12759: LD_INT 36
12761: EQUAL
12762: IFFALSE 12772
// sTools := true ;
12764: LD_ADDR_EXP 89
12768: PUSH
12769: LD_INT 1
12771: ST_TO_ADDR
// if p3 = 101 then
12772: LD_VAR 0 3
12776: PUSH
12777: LD_INT 101
12779: EQUAL
12780: IFFALSE 12790
// sSold := true ;
12782: LD_ADDR_EXP 54
12786: PUSH
12787: LD_INT 1
12789: ST_TO_ADDR
// if p3 = 102 then
12790: LD_VAR 0 3
12794: PUSH
12795: LD_INT 102
12797: EQUAL
12798: IFFALSE 12808
// sDiff := true ;
12800: LD_ADDR_EXP 55
12804: PUSH
12805: LD_INT 1
12807: ST_TO_ADDR
// if p3 = 103 then
12808: LD_VAR 0 3
12812: PUSH
12813: LD_INT 103
12815: EQUAL
12816: IFFALSE 12826
// sFog := true ;
12818: LD_ADDR_EXP 58
12822: PUSH
12823: LD_INT 1
12825: ST_TO_ADDR
// if p3 = 104 then
12826: LD_VAR 0 3
12830: PUSH
12831: LD_INT 104
12833: EQUAL
12834: IFFALSE 12844
// sReset := true ;
12836: LD_ADDR_EXP 59
12840: PUSH
12841: LD_INT 1
12843: ST_TO_ADDR
// if p3 = 105 then
12844: LD_VAR 0 3
12848: PUSH
12849: LD_INT 105
12851: EQUAL
12852: IFFALSE 12862
// sSun := true ;
12854: LD_ADDR_EXP 60
12858: PUSH
12859: LD_INT 1
12861: ST_TO_ADDR
// if p3 = 106 then
12862: LD_VAR 0 3
12866: PUSH
12867: LD_INT 106
12869: EQUAL
12870: IFFALSE 12880
// sTiger := true ;
12872: LD_ADDR_EXP 56
12876: PUSH
12877: LD_INT 1
12879: ST_TO_ADDR
// if p3 = 107 then
12880: LD_VAR 0 3
12884: PUSH
12885: LD_INT 107
12887: EQUAL
12888: IFFALSE 12898
// sBomb := true ;
12890: LD_ADDR_EXP 57
12894: PUSH
12895: LD_INT 1
12897: ST_TO_ADDR
// if p3 = 108 then
12898: LD_VAR 0 3
12902: PUSH
12903: LD_INT 108
12905: EQUAL
12906: IFFALSE 12916
// sWound := true ;
12908: LD_ADDR_EXP 65
12912: PUSH
12913: LD_INT 1
12915: ST_TO_ADDR
// if p3 = 109 then
12916: LD_VAR 0 3
12920: PUSH
12921: LD_INT 109
12923: EQUAL
12924: IFFALSE 12934
// sBetray := true ;
12926: LD_ADDR_EXP 69
12930: PUSH
12931: LD_INT 1
12933: ST_TO_ADDR
// if p3 = 110 then
12934: LD_VAR 0 3
12938: PUSH
12939: LD_INT 110
12941: EQUAL
12942: IFFALSE 12952
// sContamin := true ;
12944: LD_ADDR_EXP 70
12948: PUSH
12949: LD_INT 1
12951: ST_TO_ADDR
// if p3 = 111 then
12952: LD_VAR 0 3
12956: PUSH
12957: LD_INT 111
12959: EQUAL
12960: IFFALSE 12970
// sOil := true ;
12962: LD_ADDR_EXP 72
12966: PUSH
12967: LD_INT 1
12969: ST_TO_ADDR
// if p3 = 112 then
12970: LD_VAR 0 3
12974: PUSH
12975: LD_INT 112
12977: EQUAL
12978: IFFALSE 12988
// sStu := true ;
12980: LD_ADDR_EXP 76
12984: PUSH
12985: LD_INT 1
12987: ST_TO_ADDR
// if p3 = 113 then
12988: LD_VAR 0 3
12992: PUSH
12993: LD_INT 113
12995: EQUAL
12996: IFFALSE 13006
// sBazooka := true ;
12998: LD_ADDR_EXP 79
13002: PUSH
13003: LD_INT 1
13005: ST_TO_ADDR
// if p3 = 114 then
13006: LD_VAR 0 3
13010: PUSH
13011: LD_INT 114
13013: EQUAL
13014: IFFALSE 13024
// sMortar := true ;
13016: LD_ADDR_EXP 80
13020: PUSH
13021: LD_INT 1
13023: ST_TO_ADDR
// if p3 = 115 then
13024: LD_VAR 0 3
13028: PUSH
13029: LD_INT 115
13031: EQUAL
13032: IFFALSE 13042
// sRanger := true ;
13034: LD_ADDR_EXP 90
13038: PUSH
13039: LD_INT 1
13041: ST_TO_ADDR
// end ; if p2 = 101 then
13042: LD_VAR 0 2
13046: PUSH
13047: LD_INT 101
13049: EQUAL
13050: IFFALSE 13178
// begin case p3 of 1 :
13052: LD_VAR 0 3
13056: PUSH
13057: LD_INT 1
13059: DOUBLE
13060: EQUAL
13061: IFTRUE 13065
13063: GO 13072
13065: POP
// hHackUnlimitedResources ; 2 :
13066: CALL 24213 0 0
13070: GO 13178
13072: LD_INT 2
13074: DOUBLE
13075: EQUAL
13076: IFTRUE 13080
13078: GO 13087
13080: POP
// hHackSetLevel10 ; 3 :
13081: CALL 24346 0 0
13085: GO 13178
13087: LD_INT 3
13089: DOUBLE
13090: EQUAL
13091: IFTRUE 13095
13093: GO 13102
13095: POP
// hHackSetLevel10YourUnits ; 4 :
13096: CALL 24431 0 0
13100: GO 13178
13102: LD_INT 4
13104: DOUBLE
13105: EQUAL
13106: IFTRUE 13110
13108: GO 13117
13110: POP
// hHackInvincible ; 5 :
13111: CALL 24879 0 0
13115: GO 13178
13117: LD_INT 5
13119: DOUBLE
13120: EQUAL
13121: IFTRUE 13125
13123: GO 13132
13125: POP
// hHackInvisible ; 6 :
13126: CALL 24990 0 0
13130: GO 13178
13132: LD_INT 6
13134: DOUBLE
13135: EQUAL
13136: IFTRUE 13140
13138: GO 13147
13140: POP
// hHackChangeYourSide ; 7 :
13141: CALL 25047 0 0
13145: GO 13178
13147: LD_INT 7
13149: DOUBLE
13150: EQUAL
13151: IFTRUE 13155
13153: GO 13162
13155: POP
// hHackChangeUnitSide ; 8 :
13156: CALL 25089 0 0
13160: GO 13178
13162: LD_INT 8
13164: DOUBLE
13165: EQUAL
13166: IFTRUE 13170
13168: GO 13177
13170: POP
// hHackFog ; end ;
13171: CALL 25190 0 0
13175: GO 13178
13177: POP
// end ; end ;
13178: PPOPN 6
13180: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13181: GO 13183
13183: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13184: LD_STRING initStreamRollete();
13186: PPUSH
13187: CALL_OW 559
// InitStreamMode ;
13191: CALL 13200 0 0
// DefineStreamItems ( ) ;
13195: CALL 13640 0 0
// end ;
13199: END
// function InitStreamMode ; begin
13200: LD_INT 0
13202: PPUSH
// streamModeActive := false ;
13203: LD_ADDR_EXP 37
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// normalCounter := 36 ;
13211: LD_ADDR_EXP 38
13215: PUSH
13216: LD_INT 36
13218: ST_TO_ADDR
// hardcoreCounter := 16 ;
13219: LD_ADDR_EXP 39
13223: PUSH
13224: LD_INT 16
13226: ST_TO_ADDR
// sRocket := false ;
13227: LD_ADDR_EXP 42
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// sSpeed := false ;
13235: LD_ADDR_EXP 41
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// sEngine := false ;
13243: LD_ADDR_EXP 43
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// sSpec := false ;
13251: LD_ADDR_EXP 40
13255: PUSH
13256: LD_INT 0
13258: ST_TO_ADDR
// sLevel := false ;
13259: LD_ADDR_EXP 44
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// sArmoury := false ;
13267: LD_ADDR_EXP 45
13271: PUSH
13272: LD_INT 0
13274: ST_TO_ADDR
// sRadar := false ;
13275: LD_ADDR_EXP 46
13279: PUSH
13280: LD_INT 0
13282: ST_TO_ADDR
// sBunker := false ;
13283: LD_ADDR_EXP 47
13287: PUSH
13288: LD_INT 0
13290: ST_TO_ADDR
// sHack := false ;
13291: LD_ADDR_EXP 48
13295: PUSH
13296: LD_INT 0
13298: ST_TO_ADDR
// sFire := false ;
13299: LD_ADDR_EXP 49
13303: PUSH
13304: LD_INT 0
13306: ST_TO_ADDR
// sRefresh := false ;
13307: LD_ADDR_EXP 50
13311: PUSH
13312: LD_INT 0
13314: ST_TO_ADDR
// sExp := false ;
13315: LD_ADDR_EXP 51
13319: PUSH
13320: LD_INT 0
13322: ST_TO_ADDR
// sDepot := false ;
13323: LD_ADDR_EXP 52
13327: PUSH
13328: LD_INT 0
13330: ST_TO_ADDR
// sFlag := false ;
13331: LD_ADDR_EXP 53
13335: PUSH
13336: LD_INT 0
13338: ST_TO_ADDR
// sKamikadze := false ;
13339: LD_ADDR_EXP 61
13343: PUSH
13344: LD_INT 0
13346: ST_TO_ADDR
// sTroll := false ;
13347: LD_ADDR_EXP 62
13351: PUSH
13352: LD_INT 0
13354: ST_TO_ADDR
// sSlow := false ;
13355: LD_ADDR_EXP 63
13359: PUSH
13360: LD_INT 0
13362: ST_TO_ADDR
// sLack := false ;
13363: LD_ADDR_EXP 64
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// sTank := false ;
13371: LD_ADDR_EXP 66
13375: PUSH
13376: LD_INT 0
13378: ST_TO_ADDR
// sRemote := false ;
13379: LD_ADDR_EXP 67
13383: PUSH
13384: LD_INT 0
13386: ST_TO_ADDR
// sPowell := false ;
13387: LD_ADDR_EXP 68
13391: PUSH
13392: LD_INT 0
13394: ST_TO_ADDR
// sTeleport := false ;
13395: LD_ADDR_EXP 71
13399: PUSH
13400: LD_INT 0
13402: ST_TO_ADDR
// sOilTower := false ;
13403: LD_ADDR_EXP 73
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// sShovel := false ;
13411: LD_ADDR_EXP 74
13415: PUSH
13416: LD_INT 0
13418: ST_TO_ADDR
// sSheik := false ;
13419: LD_ADDR_EXP 75
13423: PUSH
13424: LD_INT 0
13426: ST_TO_ADDR
// sEarthquake := false ;
13427: LD_ADDR_EXP 77
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// sAI := false ;
13435: LD_ADDR_EXP 78
13439: PUSH
13440: LD_INT 0
13442: ST_TO_ADDR
// sCargo := false ;
13443: LD_ADDR_EXP 81
13447: PUSH
13448: LD_INT 0
13450: ST_TO_ADDR
// sDLaser := false ;
13451: LD_ADDR_EXP 82
13455: PUSH
13456: LD_INT 0
13458: ST_TO_ADDR
// sExchange := false ;
13459: LD_ADDR_EXP 83
13463: PUSH
13464: LD_INT 0
13466: ST_TO_ADDR
// sFac := false ;
13467: LD_ADDR_EXP 84
13471: PUSH
13472: LD_INT 0
13474: ST_TO_ADDR
// sPower := false ;
13475: LD_ADDR_EXP 85
13479: PUSH
13480: LD_INT 0
13482: ST_TO_ADDR
// sRandom := false ;
13483: LD_ADDR_EXP 86
13487: PUSH
13488: LD_INT 0
13490: ST_TO_ADDR
// sShield := false ;
13491: LD_ADDR_EXP 87
13495: PUSH
13496: LD_INT 0
13498: ST_TO_ADDR
// sTime := false ;
13499: LD_ADDR_EXP 88
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// sTools := false ;
13507: LD_ADDR_EXP 89
13511: PUSH
13512: LD_INT 0
13514: ST_TO_ADDR
// sSold := false ;
13515: LD_ADDR_EXP 54
13519: PUSH
13520: LD_INT 0
13522: ST_TO_ADDR
// sDiff := false ;
13523: LD_ADDR_EXP 55
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// sFog := false ;
13531: LD_ADDR_EXP 58
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// sReset := false ;
13539: LD_ADDR_EXP 59
13543: PUSH
13544: LD_INT 0
13546: ST_TO_ADDR
// sSun := false ;
13547: LD_ADDR_EXP 60
13551: PUSH
13552: LD_INT 0
13554: ST_TO_ADDR
// sTiger := false ;
13555: LD_ADDR_EXP 56
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// sBomb := false ;
13563: LD_ADDR_EXP 57
13567: PUSH
13568: LD_INT 0
13570: ST_TO_ADDR
// sWound := false ;
13571: LD_ADDR_EXP 65
13575: PUSH
13576: LD_INT 0
13578: ST_TO_ADDR
// sBetray := false ;
13579: LD_ADDR_EXP 69
13583: PUSH
13584: LD_INT 0
13586: ST_TO_ADDR
// sContamin := false ;
13587: LD_ADDR_EXP 70
13591: PUSH
13592: LD_INT 0
13594: ST_TO_ADDR
// sOil := false ;
13595: LD_ADDR_EXP 72
13599: PUSH
13600: LD_INT 0
13602: ST_TO_ADDR
// sStu := false ;
13603: LD_ADDR_EXP 76
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// sBazooka := false ;
13611: LD_ADDR_EXP 79
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// sMortar := false ;
13619: LD_ADDR_EXP 80
13623: PUSH
13624: LD_INT 0
13626: ST_TO_ADDR
// sRanger := false ;
13627: LD_ADDR_EXP 90
13631: PUSH
13632: LD_INT 0
13634: ST_TO_ADDR
// end ;
13635: LD_VAR 0 1
13639: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13640: LD_INT 0
13642: PPUSH
13643: PPUSH
13644: PPUSH
13645: PPUSH
13646: PPUSH
// result := [ ] ;
13647: LD_ADDR_VAR 0 1
13651: PUSH
13652: EMPTY
13653: ST_TO_ADDR
// if campaign_id = 1 then
13654: LD_OWVAR 69
13658: PUSH
13659: LD_INT 1
13661: EQUAL
13662: IFFALSE 16600
// begin case mission_number of 1 :
13664: LD_OWVAR 70
13668: PUSH
13669: LD_INT 1
13671: DOUBLE
13672: EQUAL
13673: IFTRUE 13677
13675: GO 13741
13677: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_INT 2
13685: PUSH
13686: LD_INT 4
13688: PUSH
13689: LD_INT 11
13691: PUSH
13692: LD_INT 12
13694: PUSH
13695: LD_INT 15
13697: PUSH
13698: LD_INT 16
13700: PUSH
13701: LD_INT 22
13703: PUSH
13704: LD_INT 23
13706: PUSH
13707: LD_INT 26
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 101
13723: PUSH
13724: LD_INT 102
13726: PUSH
13727: LD_INT 106
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: ST_TO_ADDR
13739: GO 16598
13741: LD_INT 2
13743: DOUBLE
13744: EQUAL
13745: IFTRUE 13749
13747: GO 13821
13749: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13750: LD_ADDR_VAR 0 1
13754: PUSH
13755: LD_INT 2
13757: PUSH
13758: LD_INT 4
13760: PUSH
13761: LD_INT 11
13763: PUSH
13764: LD_INT 12
13766: PUSH
13767: LD_INT 15
13769: PUSH
13770: LD_INT 16
13772: PUSH
13773: LD_INT 22
13775: PUSH
13776: LD_INT 23
13778: PUSH
13779: LD_INT 26
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 101
13795: PUSH
13796: LD_INT 102
13798: PUSH
13799: LD_INT 105
13801: PUSH
13802: LD_INT 106
13804: PUSH
13805: LD_INT 108
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: ST_TO_ADDR
13819: GO 16598
13821: LD_INT 3
13823: DOUBLE
13824: EQUAL
13825: IFTRUE 13829
13827: GO 13905
13829: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13830: LD_ADDR_VAR 0 1
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: LD_INT 4
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: LD_INT 11
13846: PUSH
13847: LD_INT 12
13849: PUSH
13850: LD_INT 15
13852: PUSH
13853: LD_INT 16
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_INT 26
13861: PUSH
13862: LD_INT 36
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 101
13879: PUSH
13880: LD_INT 102
13882: PUSH
13883: LD_INT 105
13885: PUSH
13886: LD_INT 106
13888: PUSH
13889: LD_INT 108
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: ST_TO_ADDR
13903: GO 16598
13905: LD_INT 4
13907: DOUBLE
13908: EQUAL
13909: IFTRUE 13913
13911: GO 13997
13913: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13914: LD_ADDR_VAR 0 1
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: LD_INT 4
13924: PUSH
13925: LD_INT 5
13927: PUSH
13928: LD_INT 8
13930: PUSH
13931: LD_INT 11
13933: PUSH
13934: LD_INT 12
13936: PUSH
13937: LD_INT 15
13939: PUSH
13940: LD_INT 16
13942: PUSH
13943: LD_INT 22
13945: PUSH
13946: LD_INT 23
13948: PUSH
13949: LD_INT 26
13951: PUSH
13952: LD_INT 36
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 101
13971: PUSH
13972: LD_INT 102
13974: PUSH
13975: LD_INT 105
13977: PUSH
13978: LD_INT 106
13980: PUSH
13981: LD_INT 108
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: ST_TO_ADDR
13995: GO 16598
13997: LD_INT 5
13999: DOUBLE
14000: EQUAL
14001: IFTRUE 14005
14003: GO 14105
14005: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14006: LD_ADDR_VAR 0 1
14010: PUSH
14011: LD_INT 2
14013: PUSH
14014: LD_INT 4
14016: PUSH
14017: LD_INT 5
14019: PUSH
14020: LD_INT 6
14022: PUSH
14023: LD_INT 8
14025: PUSH
14026: LD_INT 11
14028: PUSH
14029: LD_INT 12
14031: PUSH
14032: LD_INT 15
14034: PUSH
14035: LD_INT 16
14037: PUSH
14038: LD_INT 22
14040: PUSH
14041: LD_INT 23
14043: PUSH
14044: LD_INT 25
14046: PUSH
14047: LD_INT 26
14049: PUSH
14050: LD_INT 36
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 101
14071: PUSH
14072: LD_INT 102
14074: PUSH
14075: LD_INT 105
14077: PUSH
14078: LD_INT 106
14080: PUSH
14081: LD_INT 108
14083: PUSH
14084: LD_INT 109
14086: PUSH
14087: LD_INT 112
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: ST_TO_ADDR
14103: GO 16598
14105: LD_INT 6
14107: DOUBLE
14108: EQUAL
14109: IFTRUE 14113
14111: GO 14233
14113: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14114: LD_ADDR_VAR 0 1
14118: PUSH
14119: LD_INT 2
14121: PUSH
14122: LD_INT 4
14124: PUSH
14125: LD_INT 5
14127: PUSH
14128: LD_INT 6
14130: PUSH
14131: LD_INT 8
14133: PUSH
14134: LD_INT 11
14136: PUSH
14137: LD_INT 12
14139: PUSH
14140: LD_INT 15
14142: PUSH
14143: LD_INT 16
14145: PUSH
14146: LD_INT 20
14148: PUSH
14149: LD_INT 21
14151: PUSH
14152: LD_INT 22
14154: PUSH
14155: LD_INT 23
14157: PUSH
14158: LD_INT 25
14160: PUSH
14161: LD_INT 26
14163: PUSH
14164: LD_INT 30
14166: PUSH
14167: LD_INT 31
14169: PUSH
14170: LD_INT 32
14172: PUSH
14173: LD_INT 36
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 101
14199: PUSH
14200: LD_INT 102
14202: PUSH
14203: LD_INT 105
14205: PUSH
14206: LD_INT 106
14208: PUSH
14209: LD_INT 108
14211: PUSH
14212: LD_INT 109
14214: PUSH
14215: LD_INT 112
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: ST_TO_ADDR
14231: GO 16598
14233: LD_INT 7
14235: DOUBLE
14236: EQUAL
14237: IFTRUE 14241
14239: GO 14341
14241: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14242: LD_ADDR_VAR 0 1
14246: PUSH
14247: LD_INT 2
14249: PUSH
14250: LD_INT 4
14252: PUSH
14253: LD_INT 5
14255: PUSH
14256: LD_INT 7
14258: PUSH
14259: LD_INT 11
14261: PUSH
14262: LD_INT 12
14264: PUSH
14265: LD_INT 15
14267: PUSH
14268: LD_INT 16
14270: PUSH
14271: LD_INT 20
14273: PUSH
14274: LD_INT 21
14276: PUSH
14277: LD_INT 22
14279: PUSH
14280: LD_INT 23
14282: PUSH
14283: LD_INT 25
14285: PUSH
14286: LD_INT 26
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 101
14307: PUSH
14308: LD_INT 102
14310: PUSH
14311: LD_INT 103
14313: PUSH
14314: LD_INT 105
14316: PUSH
14317: LD_INT 106
14319: PUSH
14320: LD_INT 108
14322: PUSH
14323: LD_INT 112
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: ST_TO_ADDR
14339: GO 16598
14341: LD_INT 8
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14477
14349: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14350: LD_ADDR_VAR 0 1
14354: PUSH
14355: LD_INT 2
14357: PUSH
14358: LD_INT 4
14360: PUSH
14361: LD_INT 5
14363: PUSH
14364: LD_INT 6
14366: PUSH
14367: LD_INT 7
14369: PUSH
14370: LD_INT 8
14372: PUSH
14373: LD_INT 11
14375: PUSH
14376: LD_INT 12
14378: PUSH
14379: LD_INT 15
14381: PUSH
14382: LD_INT 16
14384: PUSH
14385: LD_INT 20
14387: PUSH
14388: LD_INT 21
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_INT 23
14396: PUSH
14397: LD_INT 25
14399: PUSH
14400: LD_INT 26
14402: PUSH
14403: LD_INT 30
14405: PUSH
14406: LD_INT 31
14408: PUSH
14409: LD_INT 32
14411: PUSH
14412: LD_INT 36
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 101
14439: PUSH
14440: LD_INT 102
14442: PUSH
14443: LD_INT 103
14445: PUSH
14446: LD_INT 105
14448: PUSH
14449: LD_INT 106
14451: PUSH
14452: LD_INT 108
14454: PUSH
14455: LD_INT 109
14457: PUSH
14458: LD_INT 112
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: ST_TO_ADDR
14475: GO 16598
14477: LD_INT 9
14479: DOUBLE
14480: EQUAL
14481: IFTRUE 14485
14483: GO 14621
14485: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14486: LD_ADDR_VAR 0 1
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: LD_INT 4
14496: PUSH
14497: LD_INT 5
14499: PUSH
14500: LD_INT 6
14502: PUSH
14503: LD_INT 7
14505: PUSH
14506: LD_INT 8
14508: PUSH
14509: LD_INT 11
14511: PUSH
14512: LD_INT 12
14514: PUSH
14515: LD_INT 15
14517: PUSH
14518: LD_INT 16
14520: PUSH
14521: LD_INT 20
14523: PUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 22
14529: PUSH
14530: LD_INT 23
14532: PUSH
14533: LD_INT 25
14535: PUSH
14536: LD_INT 26
14538: PUSH
14539: LD_INT 28
14541: PUSH
14542: LD_INT 30
14544: PUSH
14545: LD_INT 31
14547: PUSH
14548: LD_INT 32
14550: PUSH
14551: LD_INT 36
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 101
14579: PUSH
14580: LD_INT 102
14582: PUSH
14583: LD_INT 103
14585: PUSH
14586: LD_INT 105
14588: PUSH
14589: LD_INT 106
14591: PUSH
14592: LD_INT 108
14594: PUSH
14595: LD_INT 109
14597: PUSH
14598: LD_INT 112
14600: PUSH
14601: LD_INT 114
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: ST_TO_ADDR
14619: GO 16598
14621: LD_INT 10
14623: DOUBLE
14624: EQUAL
14625: IFTRUE 14629
14627: GO 14813
14629: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14630: LD_ADDR_VAR 0 1
14634: PUSH
14635: LD_INT 2
14637: PUSH
14638: LD_INT 4
14640: PUSH
14641: LD_INT 5
14643: PUSH
14644: LD_INT 6
14646: PUSH
14647: LD_INT 7
14649: PUSH
14650: LD_INT 8
14652: PUSH
14653: LD_INT 9
14655: PUSH
14656: LD_INT 10
14658: PUSH
14659: LD_INT 11
14661: PUSH
14662: LD_INT 12
14664: PUSH
14665: LD_INT 13
14667: PUSH
14668: LD_INT 14
14670: PUSH
14671: LD_INT 15
14673: PUSH
14674: LD_INT 16
14676: PUSH
14677: LD_INT 17
14679: PUSH
14680: LD_INT 18
14682: PUSH
14683: LD_INT 19
14685: PUSH
14686: LD_INT 20
14688: PUSH
14689: LD_INT 21
14691: PUSH
14692: LD_INT 22
14694: PUSH
14695: LD_INT 23
14697: PUSH
14698: LD_INT 24
14700: PUSH
14701: LD_INT 25
14703: PUSH
14704: LD_INT 26
14706: PUSH
14707: LD_INT 28
14709: PUSH
14710: LD_INT 30
14712: PUSH
14713: LD_INT 31
14715: PUSH
14716: LD_INT 32
14718: PUSH
14719: LD_INT 36
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 101
14755: PUSH
14756: LD_INT 102
14758: PUSH
14759: LD_INT 103
14761: PUSH
14762: LD_INT 104
14764: PUSH
14765: LD_INT 105
14767: PUSH
14768: LD_INT 106
14770: PUSH
14771: LD_INT 107
14773: PUSH
14774: LD_INT 108
14776: PUSH
14777: LD_INT 109
14779: PUSH
14780: LD_INT 110
14782: PUSH
14783: LD_INT 111
14785: PUSH
14786: LD_INT 112
14788: PUSH
14789: LD_INT 114
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: ST_TO_ADDR
14811: GO 16598
14813: LD_INT 11
14815: DOUBLE
14816: EQUAL
14817: IFTRUE 14821
14819: GO 15013
14821: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14822: LD_ADDR_VAR 0 1
14826: PUSH
14827: LD_INT 2
14829: PUSH
14830: LD_INT 3
14832: PUSH
14833: LD_INT 4
14835: PUSH
14836: LD_INT 5
14838: PUSH
14839: LD_INT 6
14841: PUSH
14842: LD_INT 7
14844: PUSH
14845: LD_INT 8
14847: PUSH
14848: LD_INT 9
14850: PUSH
14851: LD_INT 10
14853: PUSH
14854: LD_INT 11
14856: PUSH
14857: LD_INT 12
14859: PUSH
14860: LD_INT 13
14862: PUSH
14863: LD_INT 14
14865: PUSH
14866: LD_INT 15
14868: PUSH
14869: LD_INT 16
14871: PUSH
14872: LD_INT 17
14874: PUSH
14875: LD_INT 18
14877: PUSH
14878: LD_INT 19
14880: PUSH
14881: LD_INT 20
14883: PUSH
14884: LD_INT 21
14886: PUSH
14887: LD_INT 22
14889: PUSH
14890: LD_INT 23
14892: PUSH
14893: LD_INT 24
14895: PUSH
14896: LD_INT 25
14898: PUSH
14899: LD_INT 26
14901: PUSH
14902: LD_INT 28
14904: PUSH
14905: LD_INT 30
14907: PUSH
14908: LD_INT 31
14910: PUSH
14911: LD_INT 32
14913: PUSH
14914: LD_INT 34
14916: PUSH
14917: LD_INT 36
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 101
14955: PUSH
14956: LD_INT 102
14958: PUSH
14959: LD_INT 103
14961: PUSH
14962: LD_INT 104
14964: PUSH
14965: LD_INT 105
14967: PUSH
14968: LD_INT 106
14970: PUSH
14971: LD_INT 107
14973: PUSH
14974: LD_INT 108
14976: PUSH
14977: LD_INT 109
14979: PUSH
14980: LD_INT 110
14982: PUSH
14983: LD_INT 111
14985: PUSH
14986: LD_INT 112
14988: PUSH
14989: LD_INT 114
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: ST_TO_ADDR
15011: GO 16598
15013: LD_INT 12
15015: DOUBLE
15016: EQUAL
15017: IFTRUE 15021
15019: GO 15229
15021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15022: LD_ADDR_VAR 0 1
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: LD_INT 2
15032: PUSH
15033: LD_INT 3
15035: PUSH
15036: LD_INT 4
15038: PUSH
15039: LD_INT 5
15041: PUSH
15042: LD_INT 6
15044: PUSH
15045: LD_INT 7
15047: PUSH
15048: LD_INT 8
15050: PUSH
15051: LD_INT 9
15053: PUSH
15054: LD_INT 10
15056: PUSH
15057: LD_INT 11
15059: PUSH
15060: LD_INT 12
15062: PUSH
15063: LD_INT 13
15065: PUSH
15066: LD_INT 14
15068: PUSH
15069: LD_INT 15
15071: PUSH
15072: LD_INT 16
15074: PUSH
15075: LD_INT 17
15077: PUSH
15078: LD_INT 18
15080: PUSH
15081: LD_INT 19
15083: PUSH
15084: LD_INT 20
15086: PUSH
15087: LD_INT 21
15089: PUSH
15090: LD_INT 22
15092: PUSH
15093: LD_INT 23
15095: PUSH
15096: LD_INT 24
15098: PUSH
15099: LD_INT 25
15101: PUSH
15102: LD_INT 26
15104: PUSH
15105: LD_INT 27
15107: PUSH
15108: LD_INT 28
15110: PUSH
15111: LD_INT 30
15113: PUSH
15114: LD_INT 31
15116: PUSH
15117: LD_INT 32
15119: PUSH
15120: LD_INT 33
15122: PUSH
15123: LD_INT 34
15125: PUSH
15126: LD_INT 36
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 101
15167: PUSH
15168: LD_INT 102
15170: PUSH
15171: LD_INT 103
15173: PUSH
15174: LD_INT 104
15176: PUSH
15177: LD_INT 105
15179: PUSH
15180: LD_INT 106
15182: PUSH
15183: LD_INT 107
15185: PUSH
15186: LD_INT 108
15188: PUSH
15189: LD_INT 109
15191: PUSH
15192: LD_INT 110
15194: PUSH
15195: LD_INT 111
15197: PUSH
15198: LD_INT 112
15200: PUSH
15201: LD_INT 113
15203: PUSH
15204: LD_INT 114
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: ST_TO_ADDR
15227: GO 16598
15229: LD_INT 13
15231: DOUBLE
15232: EQUAL
15233: IFTRUE 15237
15235: GO 15433
15237: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15238: LD_ADDR_VAR 0 1
15242: PUSH
15243: LD_INT 1
15245: PUSH
15246: LD_INT 2
15248: PUSH
15249: LD_INT 3
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: LD_INT 5
15257: PUSH
15258: LD_INT 8
15260: PUSH
15261: LD_INT 9
15263: PUSH
15264: LD_INT 10
15266: PUSH
15267: LD_INT 11
15269: PUSH
15270: LD_INT 12
15272: PUSH
15273: LD_INT 14
15275: PUSH
15276: LD_INT 15
15278: PUSH
15279: LD_INT 16
15281: PUSH
15282: LD_INT 17
15284: PUSH
15285: LD_INT 18
15287: PUSH
15288: LD_INT 19
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 24
15305: PUSH
15306: LD_INT 25
15308: PUSH
15309: LD_INT 26
15311: PUSH
15312: LD_INT 27
15314: PUSH
15315: LD_INT 28
15317: PUSH
15318: LD_INT 30
15320: PUSH
15321: LD_INT 31
15323: PUSH
15324: LD_INT 32
15326: PUSH
15327: LD_INT 33
15329: PUSH
15330: LD_INT 34
15332: PUSH
15333: LD_INT 36
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 101
15371: PUSH
15372: LD_INT 102
15374: PUSH
15375: LD_INT 103
15377: PUSH
15378: LD_INT 104
15380: PUSH
15381: LD_INT 105
15383: PUSH
15384: LD_INT 106
15386: PUSH
15387: LD_INT 107
15389: PUSH
15390: LD_INT 108
15392: PUSH
15393: LD_INT 109
15395: PUSH
15396: LD_INT 110
15398: PUSH
15399: LD_INT 111
15401: PUSH
15402: LD_INT 112
15404: PUSH
15405: LD_INT 113
15407: PUSH
15408: LD_INT 114
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: ST_TO_ADDR
15431: GO 16598
15433: LD_INT 14
15435: DOUBLE
15436: EQUAL
15437: IFTRUE 15441
15439: GO 15653
15441: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15442: LD_ADDR_VAR 0 1
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: LD_INT 2
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 4
15458: PUSH
15459: LD_INT 5
15461: PUSH
15462: LD_INT 6
15464: PUSH
15465: LD_INT 7
15467: PUSH
15468: LD_INT 8
15470: PUSH
15471: LD_INT 9
15473: PUSH
15474: LD_INT 10
15476: PUSH
15477: LD_INT 11
15479: PUSH
15480: LD_INT 12
15482: PUSH
15483: LD_INT 13
15485: PUSH
15486: LD_INT 14
15488: PUSH
15489: LD_INT 15
15491: PUSH
15492: LD_INT 16
15494: PUSH
15495: LD_INT 17
15497: PUSH
15498: LD_INT 18
15500: PUSH
15501: LD_INT 19
15503: PUSH
15504: LD_INT 20
15506: PUSH
15507: LD_INT 21
15509: PUSH
15510: LD_INT 22
15512: PUSH
15513: LD_INT 23
15515: PUSH
15516: LD_INT 24
15518: PUSH
15519: LD_INT 25
15521: PUSH
15522: LD_INT 26
15524: PUSH
15525: LD_INT 27
15527: PUSH
15528: LD_INT 28
15530: PUSH
15531: LD_INT 29
15533: PUSH
15534: LD_INT 30
15536: PUSH
15537: LD_INT 31
15539: PUSH
15540: LD_INT 32
15542: PUSH
15543: LD_INT 33
15545: PUSH
15546: LD_INT 34
15548: PUSH
15549: LD_INT 36
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 101
15591: PUSH
15592: LD_INT 102
15594: PUSH
15595: LD_INT 103
15597: PUSH
15598: LD_INT 104
15600: PUSH
15601: LD_INT 105
15603: PUSH
15604: LD_INT 106
15606: PUSH
15607: LD_INT 107
15609: PUSH
15610: LD_INT 108
15612: PUSH
15613: LD_INT 109
15615: PUSH
15616: LD_INT 110
15618: PUSH
15619: LD_INT 111
15621: PUSH
15622: LD_INT 112
15624: PUSH
15625: LD_INT 113
15627: PUSH
15628: LD_INT 114
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: ST_TO_ADDR
15651: GO 16598
15653: LD_INT 15
15655: DOUBLE
15656: EQUAL
15657: IFTRUE 15661
15659: GO 15873
15661: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15662: LD_ADDR_VAR 0 1
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: LD_INT 2
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: LD_INT 4
15678: PUSH
15679: LD_INT 5
15681: PUSH
15682: LD_INT 6
15684: PUSH
15685: LD_INT 7
15687: PUSH
15688: LD_INT 8
15690: PUSH
15691: LD_INT 9
15693: PUSH
15694: LD_INT 10
15696: PUSH
15697: LD_INT 11
15699: PUSH
15700: LD_INT 12
15702: PUSH
15703: LD_INT 13
15705: PUSH
15706: LD_INT 14
15708: PUSH
15709: LD_INT 15
15711: PUSH
15712: LD_INT 16
15714: PUSH
15715: LD_INT 17
15717: PUSH
15718: LD_INT 18
15720: PUSH
15721: LD_INT 19
15723: PUSH
15724: LD_INT 20
15726: PUSH
15727: LD_INT 21
15729: PUSH
15730: LD_INT 22
15732: PUSH
15733: LD_INT 23
15735: PUSH
15736: LD_INT 24
15738: PUSH
15739: LD_INT 25
15741: PUSH
15742: LD_INT 26
15744: PUSH
15745: LD_INT 27
15747: PUSH
15748: LD_INT 28
15750: PUSH
15751: LD_INT 29
15753: PUSH
15754: LD_INT 30
15756: PUSH
15757: LD_INT 31
15759: PUSH
15760: LD_INT 32
15762: PUSH
15763: LD_INT 33
15765: PUSH
15766: LD_INT 34
15768: PUSH
15769: LD_INT 36
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 101
15811: PUSH
15812: LD_INT 102
15814: PUSH
15815: LD_INT 103
15817: PUSH
15818: LD_INT 104
15820: PUSH
15821: LD_INT 105
15823: PUSH
15824: LD_INT 106
15826: PUSH
15827: LD_INT 107
15829: PUSH
15830: LD_INT 108
15832: PUSH
15833: LD_INT 109
15835: PUSH
15836: LD_INT 110
15838: PUSH
15839: LD_INT 111
15841: PUSH
15842: LD_INT 112
15844: PUSH
15845: LD_INT 113
15847: PUSH
15848: LD_INT 114
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: ST_TO_ADDR
15871: GO 16598
15873: LD_INT 16
15875: DOUBLE
15876: EQUAL
15877: IFTRUE 15881
15879: GO 16005
15881: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15882: LD_ADDR_VAR 0 1
15886: PUSH
15887: LD_INT 2
15889: PUSH
15890: LD_INT 4
15892: PUSH
15893: LD_INT 5
15895: PUSH
15896: LD_INT 7
15898: PUSH
15899: LD_INT 11
15901: PUSH
15902: LD_INT 12
15904: PUSH
15905: LD_INT 15
15907: PUSH
15908: LD_INT 16
15910: PUSH
15911: LD_INT 20
15913: PUSH
15914: LD_INT 21
15916: PUSH
15917: LD_INT 22
15919: PUSH
15920: LD_INT 23
15922: PUSH
15923: LD_INT 25
15925: PUSH
15926: LD_INT 26
15928: PUSH
15929: LD_INT 30
15931: PUSH
15932: LD_INT 31
15934: PUSH
15935: LD_INT 32
15937: PUSH
15938: LD_INT 33
15940: PUSH
15941: LD_INT 34
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 101
15967: PUSH
15968: LD_INT 102
15970: PUSH
15971: LD_INT 103
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 108
15979: PUSH
15980: LD_INT 112
15982: PUSH
15983: LD_INT 113
15985: PUSH
15986: LD_INT 114
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: ST_TO_ADDR
16003: GO 16598
16005: LD_INT 17
16007: DOUBLE
16008: EQUAL
16009: IFTRUE 16013
16011: GO 16225
16013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16014: LD_ADDR_VAR 0 1
16018: PUSH
16019: LD_INT 1
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: LD_INT 3
16027: PUSH
16028: LD_INT 4
16030: PUSH
16031: LD_INT 5
16033: PUSH
16034: LD_INT 6
16036: PUSH
16037: LD_INT 7
16039: PUSH
16040: LD_INT 8
16042: PUSH
16043: LD_INT 9
16045: PUSH
16046: LD_INT 10
16048: PUSH
16049: LD_INT 11
16051: PUSH
16052: LD_INT 12
16054: PUSH
16055: LD_INT 13
16057: PUSH
16058: LD_INT 14
16060: PUSH
16061: LD_INT 15
16063: PUSH
16064: LD_INT 16
16066: PUSH
16067: LD_INT 17
16069: PUSH
16070: LD_INT 18
16072: PUSH
16073: LD_INT 19
16075: PUSH
16076: LD_INT 20
16078: PUSH
16079: LD_INT 21
16081: PUSH
16082: LD_INT 22
16084: PUSH
16085: LD_INT 23
16087: PUSH
16088: LD_INT 24
16090: PUSH
16091: LD_INT 25
16093: PUSH
16094: LD_INT 26
16096: PUSH
16097: LD_INT 27
16099: PUSH
16100: LD_INT 28
16102: PUSH
16103: LD_INT 29
16105: PUSH
16106: LD_INT 30
16108: PUSH
16109: LD_INT 31
16111: PUSH
16112: LD_INT 32
16114: PUSH
16115: LD_INT 33
16117: PUSH
16118: LD_INT 34
16120: PUSH
16121: LD_INT 36
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 101
16163: PUSH
16164: LD_INT 102
16166: PUSH
16167: LD_INT 103
16169: PUSH
16170: LD_INT 104
16172: PUSH
16173: LD_INT 105
16175: PUSH
16176: LD_INT 106
16178: PUSH
16179: LD_INT 107
16181: PUSH
16182: LD_INT 108
16184: PUSH
16185: LD_INT 109
16187: PUSH
16188: LD_INT 110
16190: PUSH
16191: LD_INT 111
16193: PUSH
16194: LD_INT 112
16196: PUSH
16197: LD_INT 113
16199: PUSH
16200: LD_INT 114
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: ST_TO_ADDR
16223: GO 16598
16225: LD_INT 18
16227: DOUBLE
16228: EQUAL
16229: IFTRUE 16233
16231: GO 16369
16233: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16234: LD_ADDR_VAR 0 1
16238: PUSH
16239: LD_INT 2
16241: PUSH
16242: LD_INT 4
16244: PUSH
16245: LD_INT 5
16247: PUSH
16248: LD_INT 7
16250: PUSH
16251: LD_INT 11
16253: PUSH
16254: LD_INT 12
16256: PUSH
16257: LD_INT 15
16259: PUSH
16260: LD_INT 16
16262: PUSH
16263: LD_INT 20
16265: PUSH
16266: LD_INT 21
16268: PUSH
16269: LD_INT 22
16271: PUSH
16272: LD_INT 23
16274: PUSH
16275: LD_INT 25
16277: PUSH
16278: LD_INT 26
16280: PUSH
16281: LD_INT 30
16283: PUSH
16284: LD_INT 31
16286: PUSH
16287: LD_INT 32
16289: PUSH
16290: LD_INT 33
16292: PUSH
16293: LD_INT 34
16295: PUSH
16296: LD_INT 35
16298: PUSH
16299: LD_INT 36
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 101
16327: PUSH
16328: LD_INT 102
16330: PUSH
16331: LD_INT 103
16333: PUSH
16334: LD_INT 106
16336: PUSH
16337: LD_INT 108
16339: PUSH
16340: LD_INT 112
16342: PUSH
16343: LD_INT 113
16345: PUSH
16346: LD_INT 114
16348: PUSH
16349: LD_INT 115
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: ST_TO_ADDR
16367: GO 16598
16369: LD_INT 19
16371: DOUBLE
16372: EQUAL
16373: IFTRUE 16377
16375: GO 16597
16377: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16378: LD_ADDR_VAR 0 1
16382: PUSH
16383: LD_INT 1
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: LD_INT 3
16391: PUSH
16392: LD_INT 4
16394: PUSH
16395: LD_INT 5
16397: PUSH
16398: LD_INT 6
16400: PUSH
16401: LD_INT 7
16403: PUSH
16404: LD_INT 8
16406: PUSH
16407: LD_INT 9
16409: PUSH
16410: LD_INT 10
16412: PUSH
16413: LD_INT 11
16415: PUSH
16416: LD_INT 12
16418: PUSH
16419: LD_INT 13
16421: PUSH
16422: LD_INT 14
16424: PUSH
16425: LD_INT 15
16427: PUSH
16428: LD_INT 16
16430: PUSH
16431: LD_INT 17
16433: PUSH
16434: LD_INT 18
16436: PUSH
16437: LD_INT 19
16439: PUSH
16440: LD_INT 20
16442: PUSH
16443: LD_INT 21
16445: PUSH
16446: LD_INT 22
16448: PUSH
16449: LD_INT 23
16451: PUSH
16452: LD_INT 24
16454: PUSH
16455: LD_INT 25
16457: PUSH
16458: LD_INT 26
16460: PUSH
16461: LD_INT 27
16463: PUSH
16464: LD_INT 28
16466: PUSH
16467: LD_INT 29
16469: PUSH
16470: LD_INT 30
16472: PUSH
16473: LD_INT 31
16475: PUSH
16476: LD_INT 32
16478: PUSH
16479: LD_INT 33
16481: PUSH
16482: LD_INT 34
16484: PUSH
16485: LD_INT 35
16487: PUSH
16488: LD_INT 36
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 101
16531: PUSH
16532: LD_INT 102
16534: PUSH
16535: LD_INT 103
16537: PUSH
16538: LD_INT 104
16540: PUSH
16541: LD_INT 105
16543: PUSH
16544: LD_INT 106
16546: PUSH
16547: LD_INT 107
16549: PUSH
16550: LD_INT 108
16552: PUSH
16553: LD_INT 109
16555: PUSH
16556: LD_INT 110
16558: PUSH
16559: LD_INT 111
16561: PUSH
16562: LD_INT 112
16564: PUSH
16565: LD_INT 113
16567: PUSH
16568: LD_INT 114
16570: PUSH
16571: LD_INT 115
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: ST_TO_ADDR
16595: GO 16598
16597: POP
// end else
16598: GO 16817
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16600: LD_ADDR_VAR 0 1
16604: PUSH
16605: LD_INT 1
16607: PUSH
16608: LD_INT 2
16610: PUSH
16611: LD_INT 3
16613: PUSH
16614: LD_INT 4
16616: PUSH
16617: LD_INT 5
16619: PUSH
16620: LD_INT 6
16622: PUSH
16623: LD_INT 7
16625: PUSH
16626: LD_INT 8
16628: PUSH
16629: LD_INT 9
16631: PUSH
16632: LD_INT 10
16634: PUSH
16635: LD_INT 11
16637: PUSH
16638: LD_INT 12
16640: PUSH
16641: LD_INT 13
16643: PUSH
16644: LD_INT 14
16646: PUSH
16647: LD_INT 15
16649: PUSH
16650: LD_INT 16
16652: PUSH
16653: LD_INT 17
16655: PUSH
16656: LD_INT 18
16658: PUSH
16659: LD_INT 19
16661: PUSH
16662: LD_INT 20
16664: PUSH
16665: LD_INT 21
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_INT 23
16673: PUSH
16674: LD_INT 24
16676: PUSH
16677: LD_INT 25
16679: PUSH
16680: LD_INT 26
16682: PUSH
16683: LD_INT 27
16685: PUSH
16686: LD_INT 28
16688: PUSH
16689: LD_INT 29
16691: PUSH
16692: LD_INT 30
16694: PUSH
16695: LD_INT 31
16697: PUSH
16698: LD_INT 32
16700: PUSH
16701: LD_INT 33
16703: PUSH
16704: LD_INT 34
16706: PUSH
16707: LD_INT 35
16709: PUSH
16710: LD_INT 36
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 101
16753: PUSH
16754: LD_INT 102
16756: PUSH
16757: LD_INT 103
16759: PUSH
16760: LD_INT 104
16762: PUSH
16763: LD_INT 105
16765: PUSH
16766: LD_INT 106
16768: PUSH
16769: LD_INT 107
16771: PUSH
16772: LD_INT 108
16774: PUSH
16775: LD_INT 109
16777: PUSH
16778: LD_INT 110
16780: PUSH
16781: LD_INT 111
16783: PUSH
16784: LD_INT 112
16786: PUSH
16787: LD_INT 113
16789: PUSH
16790: LD_INT 114
16792: PUSH
16793: LD_INT 115
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: ST_TO_ADDR
// if result then
16817: LD_VAR 0 1
16821: IFFALSE 17110
// begin normal :=  ;
16823: LD_ADDR_VAR 0 3
16827: PUSH
16828: LD_STRING 
16830: ST_TO_ADDR
// hardcore :=  ;
16831: LD_ADDR_VAR 0 4
16835: PUSH
16836: LD_STRING 
16838: ST_TO_ADDR
// for i = 1 to normalCounter do
16839: LD_ADDR_VAR 0 5
16843: PUSH
16844: DOUBLE
16845: LD_INT 1
16847: DEC
16848: ST_TO_ADDR
16849: LD_EXP 38
16853: PUSH
16854: FOR_TO
16855: IFFALSE 16956
// begin tmp := 0 ;
16857: LD_ADDR_VAR 0 2
16861: PUSH
16862: LD_STRING 0
16864: ST_TO_ADDR
// if result [ 1 ] then
16865: LD_VAR 0 1
16869: PUSH
16870: LD_INT 1
16872: ARRAY
16873: IFFALSE 16938
// if result [ 1 ] [ 1 ] = i then
16875: LD_VAR 0 1
16879: PUSH
16880: LD_INT 1
16882: ARRAY
16883: PUSH
16884: LD_INT 1
16886: ARRAY
16887: PUSH
16888: LD_VAR 0 5
16892: EQUAL
16893: IFFALSE 16938
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16895: LD_ADDR_VAR 0 1
16899: PUSH
16900: LD_VAR 0 1
16904: PPUSH
16905: LD_INT 1
16907: PPUSH
16908: LD_VAR 0 1
16912: PUSH
16913: LD_INT 1
16915: ARRAY
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: CALL_OW 3
16924: PPUSH
16925: CALL_OW 1
16929: ST_TO_ADDR
// tmp := 1 ;
16930: LD_ADDR_VAR 0 2
16934: PUSH
16935: LD_STRING 1
16937: ST_TO_ADDR
// end ; normal := normal & tmp ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: LD_VAR 0 3
16947: PUSH
16948: LD_VAR 0 2
16952: STR
16953: ST_TO_ADDR
// end ;
16954: GO 16854
16956: POP
16957: POP
// for i = 1 to hardcoreCounter do
16958: LD_ADDR_VAR 0 5
16962: PUSH
16963: DOUBLE
16964: LD_INT 1
16966: DEC
16967: ST_TO_ADDR
16968: LD_EXP 39
16972: PUSH
16973: FOR_TO
16974: IFFALSE 17079
// begin tmp := 0 ;
16976: LD_ADDR_VAR 0 2
16980: PUSH
16981: LD_STRING 0
16983: ST_TO_ADDR
// if result [ 2 ] then
16984: LD_VAR 0 1
16988: PUSH
16989: LD_INT 2
16991: ARRAY
16992: IFFALSE 17061
// if result [ 2 ] [ 1 ] = 100 + i then
16994: LD_VAR 0 1
16998: PUSH
16999: LD_INT 2
17001: ARRAY
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PUSH
17007: LD_INT 100
17009: PUSH
17010: LD_VAR 0 5
17014: PLUS
17015: EQUAL
17016: IFFALSE 17061
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17018: LD_ADDR_VAR 0 1
17022: PUSH
17023: LD_VAR 0 1
17027: PPUSH
17028: LD_INT 2
17030: PPUSH
17031: LD_VAR 0 1
17035: PUSH
17036: LD_INT 2
17038: ARRAY
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: CALL_OW 3
17047: PPUSH
17048: CALL_OW 1
17052: ST_TO_ADDR
// tmp := 1 ;
17053: LD_ADDR_VAR 0 2
17057: PUSH
17058: LD_STRING 1
17060: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17061: LD_ADDR_VAR 0 4
17065: PUSH
17066: LD_VAR 0 4
17070: PUSH
17071: LD_VAR 0 2
17075: STR
17076: ST_TO_ADDR
// end ;
17077: GO 16973
17079: POP
17080: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17081: LD_STRING getStreamItemsFromMission("
17083: PUSH
17084: LD_VAR 0 3
17088: STR
17089: PUSH
17090: LD_STRING ","
17092: STR
17093: PUSH
17094: LD_VAR 0 4
17098: STR
17099: PUSH
17100: LD_STRING ")
17102: STR
17103: PPUSH
17104: CALL_OW 559
// end else
17108: GO 17117
// ToLua ( getStreamItemsFromMission("","") ) ;
17110: LD_STRING getStreamItemsFromMission("","")
17112: PPUSH
17113: CALL_OW 559
// end ;
17117: LD_VAR 0 1
17121: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17122: LD_EXP 37
17126: PUSH
17127: LD_EXP 42
17131: AND
17132: IFFALSE 17256
17134: GO 17136
17136: DISABLE
17137: LD_INT 0
17139: PPUSH
17140: PPUSH
// begin enable ;
17141: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17142: LD_ADDR_VAR 0 2
17146: PUSH
17147: LD_INT 22
17149: PUSH
17150: LD_OWVAR 2
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 2
17161: PUSH
17162: LD_INT 34
17164: PUSH
17165: LD_INT 7
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 34
17174: PUSH
17175: LD_INT 45
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 34
17184: PUSH
17185: LD_INT 28
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 34
17194: PUSH
17195: LD_INT 47
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PPUSH
17213: CALL_OW 69
17217: ST_TO_ADDR
// if not tmp then
17218: LD_VAR 0 2
17222: NOT
17223: IFFALSE 17227
// exit ;
17225: GO 17256
// for i in tmp do
17227: LD_ADDR_VAR 0 1
17231: PUSH
17232: LD_VAR 0 2
17236: PUSH
17237: FOR_IN
17238: IFFALSE 17254
// begin SetLives ( i , 0 ) ;
17240: LD_VAR 0 1
17244: PPUSH
17245: LD_INT 0
17247: PPUSH
17248: CALL_OW 234
// end ;
17252: GO 17237
17254: POP
17255: POP
// end ;
17256: PPOPN 2
17258: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17259: LD_EXP 37
17263: PUSH
17264: LD_EXP 43
17268: AND
17269: IFFALSE 17353
17271: GO 17273
17273: DISABLE
17274: LD_INT 0
17276: PPUSH
17277: PPUSH
// begin enable ;
17278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17279: LD_ADDR_VAR 0 2
17283: PUSH
17284: LD_INT 22
17286: PUSH
17287: LD_OWVAR 2
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 32
17298: PUSH
17299: LD_INT 3
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PPUSH
17310: CALL_OW 69
17314: ST_TO_ADDR
// if not tmp then
17315: LD_VAR 0 2
17319: NOT
17320: IFFALSE 17324
// exit ;
17322: GO 17353
// for i in tmp do
17324: LD_ADDR_VAR 0 1
17328: PUSH
17329: LD_VAR 0 2
17333: PUSH
17334: FOR_IN
17335: IFFALSE 17351
// begin SetLives ( i , 0 ) ;
17337: LD_VAR 0 1
17341: PPUSH
17342: LD_INT 0
17344: PPUSH
17345: CALL_OW 234
// end ;
17349: GO 17334
17351: POP
17352: POP
// end ;
17353: PPOPN 2
17355: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17356: LD_EXP 37
17360: PUSH
17361: LD_EXP 40
17365: AND
17366: IFFALSE 17459
17368: GO 17370
17370: DISABLE
17371: LD_INT 0
17373: PPUSH
// begin enable ;
17374: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17375: LD_ADDR_VAR 0 1
17379: PUSH
17380: LD_INT 22
17382: PUSH
17383: LD_OWVAR 2
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 2
17394: PUSH
17395: LD_INT 25
17397: PUSH
17398: LD_INT 5
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 25
17407: PUSH
17408: LD_INT 9
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 25
17417: PUSH
17418: LD_INT 8
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PPUSH
17435: CALL_OW 69
17439: PUSH
17440: FOR_IN
17441: IFFALSE 17457
// begin SetClass ( i , 1 ) ;
17443: LD_VAR 0 1
17447: PPUSH
17448: LD_INT 1
17450: PPUSH
17451: CALL_OW 336
// end ;
17455: GO 17440
17457: POP
17458: POP
// end ;
17459: PPOPN 1
17461: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17462: LD_EXP 37
17466: PUSH
17467: LD_EXP 41
17471: AND
17472: PUSH
17473: LD_OWVAR 65
17477: PUSH
17478: LD_INT 7
17480: LESS
17481: AND
17482: IFFALSE 17496
17484: GO 17486
17486: DISABLE
// begin enable ;
17487: ENABLE
// game_speed := 7 ;
17488: LD_ADDR_OWVAR 65
17492: PUSH
17493: LD_INT 7
17495: ST_TO_ADDR
// end ;
17496: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17497: LD_EXP 37
17501: PUSH
17502: LD_EXP 44
17506: AND
17507: IFFALSE 17709
17509: GO 17511
17511: DISABLE
17512: LD_INT 0
17514: PPUSH
17515: PPUSH
17516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17517: LD_ADDR_VAR 0 3
17521: PUSH
17522: LD_INT 81
17524: PUSH
17525: LD_OWVAR 2
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 21
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PPUSH
17548: CALL_OW 69
17552: ST_TO_ADDR
// if not tmp then
17553: LD_VAR 0 3
17557: NOT
17558: IFFALSE 17562
// exit ;
17560: GO 17709
// if tmp > 5 then
17562: LD_VAR 0 3
17566: PUSH
17567: LD_INT 5
17569: GREATER
17570: IFFALSE 17582
// k := 5 else
17572: LD_ADDR_VAR 0 2
17576: PUSH
17577: LD_INT 5
17579: ST_TO_ADDR
17580: GO 17592
// k := tmp ;
17582: LD_ADDR_VAR 0 2
17586: PUSH
17587: LD_VAR 0 3
17591: ST_TO_ADDR
// for i := 1 to k do
17592: LD_ADDR_VAR 0 1
17596: PUSH
17597: DOUBLE
17598: LD_INT 1
17600: DEC
17601: ST_TO_ADDR
17602: LD_VAR 0 2
17606: PUSH
17607: FOR_TO
17608: IFFALSE 17707
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17610: LD_VAR 0 3
17614: PUSH
17615: LD_VAR 0 1
17619: ARRAY
17620: PPUSH
17621: LD_VAR 0 1
17625: PUSH
17626: LD_INT 4
17628: MOD
17629: PUSH
17630: LD_INT 1
17632: PLUS
17633: PPUSH
17634: CALL_OW 259
17638: PUSH
17639: LD_INT 10
17641: LESS
17642: IFFALSE 17705
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17644: LD_VAR 0 3
17648: PUSH
17649: LD_VAR 0 1
17653: ARRAY
17654: PPUSH
17655: LD_VAR 0 1
17659: PUSH
17660: LD_INT 4
17662: MOD
17663: PUSH
17664: LD_INT 1
17666: PLUS
17667: PPUSH
17668: LD_VAR 0 3
17672: PUSH
17673: LD_VAR 0 1
17677: ARRAY
17678: PPUSH
17679: LD_VAR 0 1
17683: PUSH
17684: LD_INT 4
17686: MOD
17687: PUSH
17688: LD_INT 1
17690: PLUS
17691: PPUSH
17692: CALL_OW 259
17696: PUSH
17697: LD_INT 1
17699: PLUS
17700: PPUSH
17701: CALL_OW 237
17705: GO 17607
17707: POP
17708: POP
// end ;
17709: PPOPN 3
17711: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17712: LD_EXP 37
17716: PUSH
17717: LD_EXP 45
17721: AND
17722: IFFALSE 17742
17724: GO 17726
17726: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17727: LD_INT 4
17729: PPUSH
17730: LD_OWVAR 2
17734: PPUSH
17735: LD_INT 0
17737: PPUSH
17738: CALL_OW 324
17742: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17743: LD_EXP 37
17747: PUSH
17748: LD_EXP 74
17752: AND
17753: IFFALSE 17773
17755: GO 17757
17757: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17758: LD_INT 19
17760: PPUSH
17761: LD_OWVAR 2
17765: PPUSH
17766: LD_INT 0
17768: PPUSH
17769: CALL_OW 324
17773: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17774: LD_EXP 37
17778: PUSH
17779: LD_EXP 46
17783: AND
17784: IFFALSE 17886
17786: GO 17788
17788: DISABLE
17789: LD_INT 0
17791: PPUSH
17792: PPUSH
// begin enable ;
17793: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17794: LD_ADDR_VAR 0 2
17798: PUSH
17799: LD_INT 22
17801: PUSH
17802: LD_OWVAR 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 2
17813: PUSH
17814: LD_INT 34
17816: PUSH
17817: LD_INT 11
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 34
17826: PUSH
17827: LD_INT 30
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PPUSH
17843: CALL_OW 69
17847: ST_TO_ADDR
// if not tmp then
17848: LD_VAR 0 2
17852: NOT
17853: IFFALSE 17857
// exit ;
17855: GO 17886
// for i in tmp do
17857: LD_ADDR_VAR 0 1
17861: PUSH
17862: LD_VAR 0 2
17866: PUSH
17867: FOR_IN
17868: IFFALSE 17884
// begin SetLives ( i , 0 ) ;
17870: LD_VAR 0 1
17874: PPUSH
17875: LD_INT 0
17877: PPUSH
17878: CALL_OW 234
// end ;
17882: GO 17867
17884: POP
17885: POP
// end ;
17886: PPOPN 2
17888: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17889: LD_EXP 37
17893: PUSH
17894: LD_EXP 47
17898: AND
17899: IFFALSE 17919
17901: GO 17903
17903: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17904: LD_INT 32
17906: PPUSH
17907: LD_OWVAR 2
17911: PPUSH
17912: LD_INT 0
17914: PPUSH
17915: CALL_OW 324
17919: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17920: LD_EXP 37
17924: PUSH
17925: LD_EXP 48
17929: AND
17930: IFFALSE 18111
17932: GO 17934
17934: DISABLE
17935: LD_INT 0
17937: PPUSH
17938: PPUSH
17939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17940: LD_ADDR_VAR 0 2
17944: PUSH
17945: LD_INT 22
17947: PUSH
17948: LD_OWVAR 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 33
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PPUSH
17971: CALL_OW 69
17975: ST_TO_ADDR
// if not tmp then
17976: LD_VAR 0 2
17980: NOT
17981: IFFALSE 17985
// exit ;
17983: GO 18111
// side := 0 ;
17985: LD_ADDR_VAR 0 3
17989: PUSH
17990: LD_INT 0
17992: ST_TO_ADDR
// for i := 1 to 8 do
17993: LD_ADDR_VAR 0 1
17997: PUSH
17998: DOUBLE
17999: LD_INT 1
18001: DEC
18002: ST_TO_ADDR
18003: LD_INT 8
18005: PUSH
18006: FOR_TO
18007: IFFALSE 18055
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18009: LD_OWVAR 2
18013: PUSH
18014: LD_VAR 0 1
18018: NONEQUAL
18019: PUSH
18020: LD_OWVAR 2
18024: PPUSH
18025: LD_VAR 0 1
18029: PPUSH
18030: CALL_OW 81
18034: PUSH
18035: LD_INT 2
18037: EQUAL
18038: AND
18039: IFFALSE 18053
// begin side := i ;
18041: LD_ADDR_VAR 0 3
18045: PUSH
18046: LD_VAR 0 1
18050: ST_TO_ADDR
// break ;
18051: GO 18055
// end ;
18053: GO 18006
18055: POP
18056: POP
// if not side then
18057: LD_VAR 0 3
18061: NOT
18062: IFFALSE 18066
// exit ;
18064: GO 18111
// for i := 1 to tmp do
18066: LD_ADDR_VAR 0 1
18070: PUSH
18071: DOUBLE
18072: LD_INT 1
18074: DEC
18075: ST_TO_ADDR
18076: LD_VAR 0 2
18080: PUSH
18081: FOR_TO
18082: IFFALSE 18109
// if Prob ( 60 ) then
18084: LD_INT 60
18086: PPUSH
18087: CALL_OW 13
18091: IFFALSE 18107
// SetSide ( i , side ) ;
18093: LD_VAR 0 1
18097: PPUSH
18098: LD_VAR 0 3
18102: PPUSH
18103: CALL_OW 235
18107: GO 18081
18109: POP
18110: POP
// end ;
18111: PPOPN 3
18113: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18114: LD_EXP 37
18118: PUSH
18119: LD_EXP 50
18123: AND
18124: IFFALSE 18243
18126: GO 18128
18128: DISABLE
18129: LD_INT 0
18131: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18132: LD_ADDR_VAR 0 1
18136: PUSH
18137: LD_INT 22
18139: PUSH
18140: LD_OWVAR 2
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 21
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 3
18161: PUSH
18162: LD_INT 23
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: PPUSH
18181: CALL_OW 69
18185: PUSH
18186: FOR_IN
18187: IFFALSE 18241
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18189: LD_VAR 0 1
18193: PPUSH
18194: CALL_OW 257
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: LD_INT 2
18204: PUSH
18205: LD_INT 3
18207: PUSH
18208: LD_INT 4
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: IN
18217: IFFALSE 18239
// SetClass ( un , rand ( 1 , 4 ) ) ;
18219: LD_VAR 0 1
18223: PPUSH
18224: LD_INT 1
18226: PPUSH
18227: LD_INT 4
18229: PPUSH
18230: CALL_OW 12
18234: PPUSH
18235: CALL_OW 336
18239: GO 18186
18241: POP
18242: POP
// end ;
18243: PPOPN 1
18245: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18246: LD_EXP 37
18250: PUSH
18251: LD_EXP 49
18255: AND
18256: IFFALSE 18335
18258: GO 18260
18260: DISABLE
18261: LD_INT 0
18263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18264: LD_ADDR_VAR 0 1
18268: PUSH
18269: LD_INT 22
18271: PUSH
18272: LD_OWVAR 2
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 21
18283: PUSH
18284: LD_INT 3
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PPUSH
18295: CALL_OW 69
18299: ST_TO_ADDR
// if not tmp then
18300: LD_VAR 0 1
18304: NOT
18305: IFFALSE 18309
// exit ;
18307: GO 18335
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18309: LD_VAR 0 1
18313: PUSH
18314: LD_INT 1
18316: PPUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 12
18326: ARRAY
18327: PPUSH
18328: LD_INT 100
18330: PPUSH
18331: CALL_OW 234
// end ;
18335: PPOPN 1
18337: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18338: LD_EXP 37
18342: PUSH
18343: LD_EXP 51
18347: AND
18348: IFFALSE 18446
18350: GO 18352
18352: DISABLE
18353: LD_INT 0
18355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18356: LD_ADDR_VAR 0 1
18360: PUSH
18361: LD_INT 22
18363: PUSH
18364: LD_OWVAR 2
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 21
18375: PUSH
18376: LD_INT 1
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PPUSH
18387: CALL_OW 69
18391: ST_TO_ADDR
// if not tmp then
18392: LD_VAR 0 1
18396: NOT
18397: IFFALSE 18401
// exit ;
18399: GO 18446
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18401: LD_VAR 0 1
18405: PUSH
18406: LD_INT 1
18408: PPUSH
18409: LD_VAR 0 1
18413: PPUSH
18414: CALL_OW 12
18418: ARRAY
18419: PPUSH
18420: LD_INT 1
18422: PPUSH
18423: LD_INT 4
18425: PPUSH
18426: CALL_OW 12
18430: PPUSH
18431: LD_INT 3000
18433: PPUSH
18434: LD_INT 9000
18436: PPUSH
18437: CALL_OW 12
18441: PPUSH
18442: CALL_OW 492
// end ;
18446: PPOPN 1
18448: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18449: LD_EXP 37
18453: PUSH
18454: LD_EXP 52
18458: AND
18459: IFFALSE 18479
18461: GO 18463
18463: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18464: LD_INT 1
18466: PPUSH
18467: LD_OWVAR 2
18471: PPUSH
18472: LD_INT 0
18474: PPUSH
18475: CALL_OW 324
18479: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18480: LD_EXP 37
18484: PUSH
18485: LD_EXP 53
18489: AND
18490: IFFALSE 18573
18492: GO 18494
18494: DISABLE
18495: LD_INT 0
18497: PPUSH
18498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18499: LD_ADDR_VAR 0 2
18503: PUSH
18504: LD_INT 22
18506: PUSH
18507: LD_OWVAR 2
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 21
18518: PUSH
18519: LD_INT 3
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PPUSH
18530: CALL_OW 69
18534: ST_TO_ADDR
// if not tmp then
18535: LD_VAR 0 2
18539: NOT
18540: IFFALSE 18544
// exit ;
18542: GO 18573
// for i in tmp do
18544: LD_ADDR_VAR 0 1
18548: PUSH
18549: LD_VAR 0 2
18553: PUSH
18554: FOR_IN
18555: IFFALSE 18571
// SetBLevel ( i , 10 ) ;
18557: LD_VAR 0 1
18561: PPUSH
18562: LD_INT 10
18564: PPUSH
18565: CALL_OW 241
18569: GO 18554
18571: POP
18572: POP
// end ;
18573: PPOPN 2
18575: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18576: LD_EXP 37
18580: PUSH
18581: LD_EXP 54
18585: AND
18586: IFFALSE 18697
18588: GO 18590
18590: DISABLE
18591: LD_INT 0
18593: PPUSH
18594: PPUSH
18595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18596: LD_ADDR_VAR 0 3
18600: PUSH
18601: LD_INT 22
18603: PUSH
18604: LD_OWVAR 2
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 25
18615: PUSH
18616: LD_INT 1
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PPUSH
18627: CALL_OW 69
18631: ST_TO_ADDR
// if not tmp then
18632: LD_VAR 0 3
18636: NOT
18637: IFFALSE 18641
// exit ;
18639: GO 18697
// un := tmp [ rand ( 1 , tmp ) ] ;
18641: LD_ADDR_VAR 0 2
18645: PUSH
18646: LD_VAR 0 3
18650: PUSH
18651: LD_INT 1
18653: PPUSH
18654: LD_VAR 0 3
18658: PPUSH
18659: CALL_OW 12
18663: ARRAY
18664: ST_TO_ADDR
// if Crawls ( un ) then
18665: LD_VAR 0 2
18669: PPUSH
18670: CALL_OW 318
18674: IFFALSE 18685
// ComWalk ( un ) ;
18676: LD_VAR 0 2
18680: PPUSH
18681: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18685: LD_VAR 0 2
18689: PPUSH
18690: LD_INT 5
18692: PPUSH
18693: CALL_OW 336
// end ;
18697: PPOPN 3
18699: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18700: LD_EXP 37
18704: PUSH
18705: LD_EXP 55
18709: AND
18710: PUSH
18711: LD_OWVAR 67
18715: PUSH
18716: LD_INT 3
18718: LESS
18719: AND
18720: IFFALSE 18739
18722: GO 18724
18724: DISABLE
// Difficulty := Difficulty + 1 ;
18725: LD_ADDR_OWVAR 67
18729: PUSH
18730: LD_OWVAR 67
18734: PUSH
18735: LD_INT 1
18737: PLUS
18738: ST_TO_ADDR
18739: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18740: LD_EXP 37
18744: PUSH
18745: LD_EXP 56
18749: AND
18750: IFFALSE 18853
18752: GO 18754
18754: DISABLE
18755: LD_INT 0
18757: PPUSH
// begin for i := 1 to 5 do
18758: LD_ADDR_VAR 0 1
18762: PUSH
18763: DOUBLE
18764: LD_INT 1
18766: DEC
18767: ST_TO_ADDR
18768: LD_INT 5
18770: PUSH
18771: FOR_TO
18772: IFFALSE 18851
// begin uc_nation := nation_nature ;
18774: LD_ADDR_OWVAR 21
18778: PUSH
18779: LD_INT 0
18781: ST_TO_ADDR
// uc_side := 0 ;
18782: LD_ADDR_OWVAR 20
18786: PUSH
18787: LD_INT 0
18789: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18790: LD_ADDR_OWVAR 29
18794: PUSH
18795: LD_INT 12
18797: PUSH
18798: LD_INT 12
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: ST_TO_ADDR
// hc_agressivity := 20 ;
18805: LD_ADDR_OWVAR 35
18809: PUSH
18810: LD_INT 20
18812: ST_TO_ADDR
// hc_class := class_tiger ;
18813: LD_ADDR_OWVAR 28
18817: PUSH
18818: LD_INT 14
18820: ST_TO_ADDR
// hc_gallery :=  ;
18821: LD_ADDR_OWVAR 33
18825: PUSH
18826: LD_STRING 
18828: ST_TO_ADDR
// hc_name :=  ;
18829: LD_ADDR_OWVAR 26
18833: PUSH
18834: LD_STRING 
18836: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18837: CALL_OW 44
18841: PPUSH
18842: LD_INT 0
18844: PPUSH
18845: CALL_OW 51
// end ;
18849: GO 18771
18851: POP
18852: POP
// end ;
18853: PPOPN 1
18855: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18856: LD_EXP 37
18860: PUSH
18861: LD_EXP 57
18865: AND
18866: IFFALSE 18875
18868: GO 18870
18870: DISABLE
// StreamSibBomb ;
18871: CALL 18876 0 0
18875: END
// export function StreamSibBomb ; var i , x , y ; begin
18876: LD_INT 0
18878: PPUSH
18879: PPUSH
18880: PPUSH
18881: PPUSH
// result := false ;
18882: LD_ADDR_VAR 0 1
18886: PUSH
18887: LD_INT 0
18889: ST_TO_ADDR
// for i := 1 to 16 do
18890: LD_ADDR_VAR 0 2
18894: PUSH
18895: DOUBLE
18896: LD_INT 1
18898: DEC
18899: ST_TO_ADDR
18900: LD_INT 16
18902: PUSH
18903: FOR_TO
18904: IFFALSE 19103
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18906: LD_ADDR_VAR 0 3
18910: PUSH
18911: LD_INT 10
18913: PUSH
18914: LD_INT 20
18916: PUSH
18917: LD_INT 30
18919: PUSH
18920: LD_INT 40
18922: PUSH
18923: LD_INT 50
18925: PUSH
18926: LD_INT 60
18928: PUSH
18929: LD_INT 70
18931: PUSH
18932: LD_INT 80
18934: PUSH
18935: LD_INT 90
18937: PUSH
18938: LD_INT 100
18940: PUSH
18941: LD_INT 110
18943: PUSH
18944: LD_INT 120
18946: PUSH
18947: LD_INT 130
18949: PUSH
18950: LD_INT 140
18952: PUSH
18953: LD_INT 150
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 1
18975: PPUSH
18976: LD_INT 15
18978: PPUSH
18979: CALL_OW 12
18983: ARRAY
18984: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18985: LD_ADDR_VAR 0 4
18989: PUSH
18990: LD_INT 10
18992: PUSH
18993: LD_INT 20
18995: PUSH
18996: LD_INT 30
18998: PUSH
18999: LD_INT 40
19001: PUSH
19002: LD_INT 50
19004: PUSH
19005: LD_INT 60
19007: PUSH
19008: LD_INT 70
19010: PUSH
19011: LD_INT 80
19013: PUSH
19014: LD_INT 90
19016: PUSH
19017: LD_INT 100
19019: PUSH
19020: LD_INT 110
19022: PUSH
19023: LD_INT 120
19025: PUSH
19026: LD_INT 130
19028: PUSH
19029: LD_INT 140
19031: PUSH
19032: LD_INT 150
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 1
19054: PPUSH
19055: LD_INT 15
19057: PPUSH
19058: CALL_OW 12
19062: ARRAY
19063: ST_TO_ADDR
// if ValidHex ( x , y ) then
19064: LD_VAR 0 3
19068: PPUSH
19069: LD_VAR 0 4
19073: PPUSH
19074: CALL_OW 488
19078: IFFALSE 19101
// begin result := [ x , y ] ;
19080: LD_ADDR_VAR 0 1
19084: PUSH
19085: LD_VAR 0 3
19089: PUSH
19090: LD_VAR 0 4
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: ST_TO_ADDR
// break ;
19099: GO 19103
// end ; end ;
19101: GO 18903
19103: POP
19104: POP
// if result then
19105: LD_VAR 0 1
19109: IFFALSE 19169
// begin ToLua ( playSibBomb() ) ;
19111: LD_STRING playSibBomb()
19113: PPUSH
19114: CALL_OW 559
// wait ( 0 0$14 ) ;
19118: LD_INT 490
19120: PPUSH
19121: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19125: LD_VAR 0 1
19129: PUSH
19130: LD_INT 1
19132: ARRAY
19133: PPUSH
19134: LD_VAR 0 1
19138: PUSH
19139: LD_INT 2
19141: ARRAY
19142: PPUSH
19143: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19147: LD_VAR 0 1
19151: PUSH
19152: LD_INT 1
19154: ARRAY
19155: PPUSH
19156: LD_VAR 0 1
19160: PUSH
19161: LD_INT 2
19163: ARRAY
19164: PPUSH
19165: CALL_OW 429
// end ; end ;
19169: LD_VAR 0 1
19173: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19174: LD_EXP 37
19178: PUSH
19179: LD_EXP 59
19183: AND
19184: IFFALSE 19196
19186: GO 19188
19188: DISABLE
// YouLost (  ) ;
19189: LD_STRING 
19191: PPUSH
19192: CALL_OW 104
19196: END
// every 0 0$1 trigger StreamModeActive and sFog do
19197: LD_EXP 37
19201: PUSH
19202: LD_EXP 58
19206: AND
19207: IFFALSE 19221
19209: GO 19211
19211: DISABLE
// FogOff ( your_side ) ;
19212: LD_OWVAR 2
19216: PPUSH
19217: CALL_OW 344
19221: END
// every 0 0$1 trigger StreamModeActive and sSun do
19222: LD_EXP 37
19226: PUSH
19227: LD_EXP 60
19231: AND
19232: IFFALSE 19260
19234: GO 19236
19236: DISABLE
// begin solar_recharge_percent := 0 ;
19237: LD_ADDR_OWVAR 79
19241: PUSH
19242: LD_INT 0
19244: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19245: LD_INT 10500
19247: PPUSH
19248: CALL_OW 67
// solar_recharge_percent := 100 ;
19252: LD_ADDR_OWVAR 79
19256: PUSH
19257: LD_INT 100
19259: ST_TO_ADDR
// end ;
19260: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19261: LD_EXP 37
19265: PUSH
19266: LD_EXP 61
19270: AND
19271: IFFALSE 19510
19273: GO 19275
19275: DISABLE
19276: LD_INT 0
19278: PPUSH
19279: PPUSH
19280: PPUSH
// begin tmp := [ ] ;
19281: LD_ADDR_VAR 0 3
19285: PUSH
19286: EMPTY
19287: ST_TO_ADDR
// for i := 1 to 6 do
19288: LD_ADDR_VAR 0 1
19292: PUSH
19293: DOUBLE
19294: LD_INT 1
19296: DEC
19297: ST_TO_ADDR
19298: LD_INT 6
19300: PUSH
19301: FOR_TO
19302: IFFALSE 19407
// begin uc_nation := nation_nature ;
19304: LD_ADDR_OWVAR 21
19308: PUSH
19309: LD_INT 0
19311: ST_TO_ADDR
// uc_side := 0 ;
19312: LD_ADDR_OWVAR 20
19316: PUSH
19317: LD_INT 0
19319: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19320: LD_ADDR_OWVAR 29
19324: PUSH
19325: LD_INT 12
19327: PUSH
19328: LD_INT 12
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: ST_TO_ADDR
// hc_agressivity := 20 ;
19335: LD_ADDR_OWVAR 35
19339: PUSH
19340: LD_INT 20
19342: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19343: LD_ADDR_OWVAR 28
19347: PUSH
19348: LD_INT 17
19350: ST_TO_ADDR
// hc_gallery :=  ;
19351: LD_ADDR_OWVAR 33
19355: PUSH
19356: LD_STRING 
19358: ST_TO_ADDR
// hc_name :=  ;
19359: LD_ADDR_OWVAR 26
19363: PUSH
19364: LD_STRING 
19366: ST_TO_ADDR
// un := CreateHuman ;
19367: LD_ADDR_VAR 0 2
19371: PUSH
19372: CALL_OW 44
19376: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19377: LD_VAR 0 2
19381: PPUSH
19382: LD_INT 1
19384: PPUSH
19385: CALL_OW 51
// tmp := tmp ^ un ;
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: LD_VAR 0 3
19398: PUSH
19399: LD_VAR 0 2
19403: ADD
19404: ST_TO_ADDR
// end ;
19405: GO 19301
19407: POP
19408: POP
// repeat wait ( 0 0$1 ) ;
19409: LD_INT 35
19411: PPUSH
19412: CALL_OW 67
// for un in tmp do
19416: LD_ADDR_VAR 0 2
19420: PUSH
19421: LD_VAR 0 3
19425: PUSH
19426: FOR_IN
19427: IFFALSE 19501
// begin if IsDead ( un ) then
19429: LD_VAR 0 2
19433: PPUSH
19434: CALL_OW 301
19438: IFFALSE 19458
// begin tmp := tmp diff un ;
19440: LD_ADDR_VAR 0 3
19444: PUSH
19445: LD_VAR 0 3
19449: PUSH
19450: LD_VAR 0 2
19454: DIFF
19455: ST_TO_ADDR
// continue ;
19456: GO 19426
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19458: LD_VAR 0 2
19462: PPUSH
19463: LD_INT 3
19465: PUSH
19466: LD_INT 22
19468: PUSH
19469: LD_INT 0
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PPUSH
19480: CALL_OW 69
19484: PPUSH
19485: LD_VAR 0 2
19489: PPUSH
19490: CALL_OW 74
19494: PPUSH
19495: CALL_OW 115
// end ;
19499: GO 19426
19501: POP
19502: POP
// until not tmp ;
19503: LD_VAR 0 3
19507: NOT
19508: IFFALSE 19409
// end ;
19510: PPOPN 3
19512: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19513: LD_EXP 37
19517: PUSH
19518: LD_EXP 62
19522: AND
19523: IFFALSE 19577
19525: GO 19527
19527: DISABLE
// begin ToLua ( displayTroll(); ) ;
19528: LD_STRING displayTroll();
19530: PPUSH
19531: CALL_OW 559
// wait ( 3 3$00 ) ;
19535: LD_INT 6300
19537: PPUSH
19538: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19542: LD_STRING hideTroll();
19544: PPUSH
19545: CALL_OW 559
// wait ( 1 1$00 ) ;
19549: LD_INT 2100
19551: PPUSH
19552: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19556: LD_STRING displayTroll();
19558: PPUSH
19559: CALL_OW 559
// wait ( 1 1$00 ) ;
19563: LD_INT 2100
19565: PPUSH
19566: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19570: LD_STRING hideTroll();
19572: PPUSH
19573: CALL_OW 559
// end ;
19577: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19578: LD_EXP 37
19582: PUSH
19583: LD_EXP 63
19587: AND
19588: IFFALSE 19651
19590: GO 19592
19592: DISABLE
19593: LD_INT 0
19595: PPUSH
// begin p := 0 ;
19596: LD_ADDR_VAR 0 1
19600: PUSH
19601: LD_INT 0
19603: ST_TO_ADDR
// repeat game_speed := 1 ;
19604: LD_ADDR_OWVAR 65
19608: PUSH
19609: LD_INT 1
19611: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19612: LD_INT 35
19614: PPUSH
19615: CALL_OW 67
// p := p + 1 ;
19619: LD_ADDR_VAR 0 1
19623: PUSH
19624: LD_VAR 0 1
19628: PUSH
19629: LD_INT 1
19631: PLUS
19632: ST_TO_ADDR
// until p >= 60 ;
19633: LD_VAR 0 1
19637: PUSH
19638: LD_INT 60
19640: GREATEREQUAL
19641: IFFALSE 19604
// game_speed := 4 ;
19643: LD_ADDR_OWVAR 65
19647: PUSH
19648: LD_INT 4
19650: ST_TO_ADDR
// end ;
19651: PPOPN 1
19653: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19654: LD_EXP 37
19658: PUSH
19659: LD_EXP 64
19663: AND
19664: IFFALSE 19810
19666: GO 19668
19668: DISABLE
19669: LD_INT 0
19671: PPUSH
19672: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19673: LD_ADDR_VAR 0 1
19677: PUSH
19678: LD_INT 22
19680: PUSH
19681: LD_OWVAR 2
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 2
19692: PUSH
19693: LD_INT 30
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 30
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PPUSH
19722: CALL_OW 69
19726: ST_TO_ADDR
// if not depot then
19727: LD_VAR 0 1
19731: NOT
19732: IFFALSE 19736
// exit ;
19734: GO 19810
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19736: LD_ADDR_VAR 0 2
19740: PUSH
19741: LD_VAR 0 1
19745: PUSH
19746: LD_INT 1
19748: PPUSH
19749: LD_VAR 0 1
19753: PPUSH
19754: CALL_OW 12
19758: ARRAY
19759: PPUSH
19760: CALL_OW 274
19764: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19765: LD_VAR 0 2
19769: PPUSH
19770: LD_INT 1
19772: PPUSH
19773: LD_INT 0
19775: PPUSH
19776: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19780: LD_VAR 0 2
19784: PPUSH
19785: LD_INT 2
19787: PPUSH
19788: LD_INT 0
19790: PPUSH
19791: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19795: LD_VAR 0 2
19799: PPUSH
19800: LD_INT 3
19802: PPUSH
19803: LD_INT 0
19805: PPUSH
19806: CALL_OW 277
// end ;
19810: PPOPN 2
19812: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19813: LD_EXP 37
19817: PUSH
19818: LD_EXP 65
19822: AND
19823: IFFALSE 19920
19825: GO 19827
19827: DISABLE
19828: LD_INT 0
19830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19831: LD_ADDR_VAR 0 1
19835: PUSH
19836: LD_INT 22
19838: PUSH
19839: LD_OWVAR 2
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 21
19850: PUSH
19851: LD_INT 1
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 3
19860: PUSH
19861: LD_INT 23
19863: PUSH
19864: LD_INT 0
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: PPUSH
19880: CALL_OW 69
19884: ST_TO_ADDR
// if not tmp then
19885: LD_VAR 0 1
19889: NOT
19890: IFFALSE 19894
// exit ;
19892: GO 19920
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19894: LD_VAR 0 1
19898: PUSH
19899: LD_INT 1
19901: PPUSH
19902: LD_VAR 0 1
19906: PPUSH
19907: CALL_OW 12
19911: ARRAY
19912: PPUSH
19913: LD_INT 200
19915: PPUSH
19916: CALL_OW 234
// end ;
19920: PPOPN 1
19922: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19923: LD_EXP 37
19927: PUSH
19928: LD_EXP 66
19932: AND
19933: IFFALSE 20012
19935: GO 19937
19937: DISABLE
19938: LD_INT 0
19940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19941: LD_ADDR_VAR 0 1
19945: PUSH
19946: LD_INT 22
19948: PUSH
19949: LD_OWVAR 2
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 21
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PPUSH
19972: CALL_OW 69
19976: ST_TO_ADDR
// if not tmp then
19977: LD_VAR 0 1
19981: NOT
19982: IFFALSE 19986
// exit ;
19984: GO 20012
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19986: LD_VAR 0 1
19990: PUSH
19991: LD_INT 1
19993: PPUSH
19994: LD_VAR 0 1
19998: PPUSH
19999: CALL_OW 12
20003: ARRAY
20004: PPUSH
20005: LD_INT 60
20007: PPUSH
20008: CALL_OW 234
// end ;
20012: PPOPN 1
20014: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20015: LD_EXP 37
20019: PUSH
20020: LD_EXP 67
20024: AND
20025: IFFALSE 20124
20027: GO 20029
20029: DISABLE
20030: LD_INT 0
20032: PPUSH
20033: PPUSH
// begin enable ;
20034: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20035: LD_ADDR_VAR 0 1
20039: PUSH
20040: LD_INT 22
20042: PUSH
20043: LD_OWVAR 2
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 61
20054: PUSH
20055: EMPTY
20056: LIST
20057: PUSH
20058: LD_INT 33
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: PPUSH
20073: CALL_OW 69
20077: ST_TO_ADDR
// if not tmp then
20078: LD_VAR 0 1
20082: NOT
20083: IFFALSE 20087
// exit ;
20085: GO 20124
// for i in tmp do
20087: LD_ADDR_VAR 0 2
20091: PUSH
20092: LD_VAR 0 1
20096: PUSH
20097: FOR_IN
20098: IFFALSE 20122
// if IsControledBy ( i ) then
20100: LD_VAR 0 2
20104: PPUSH
20105: CALL_OW 312
20109: IFFALSE 20120
// ComUnlink ( i ) ;
20111: LD_VAR 0 2
20115: PPUSH
20116: CALL_OW 136
20120: GO 20097
20122: POP
20123: POP
// end ;
20124: PPOPN 2
20126: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20127: LD_EXP 37
20131: PUSH
20132: LD_EXP 68
20136: AND
20137: IFFALSE 20277
20139: GO 20141
20141: DISABLE
20142: LD_INT 0
20144: PPUSH
20145: PPUSH
// begin ToLua ( displayPowell(); ) ;
20146: LD_STRING displayPowell();
20148: PPUSH
20149: CALL_OW 559
// uc_side := 0 ;
20153: LD_ADDR_OWVAR 20
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// uc_nation := 2 ;
20161: LD_ADDR_OWVAR 21
20165: PUSH
20166: LD_INT 2
20168: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20169: LD_ADDR_OWVAR 37
20173: PUSH
20174: LD_INT 14
20176: ST_TO_ADDR
// vc_engine := engine_siberite ;
20177: LD_ADDR_OWVAR 39
20181: PUSH
20182: LD_INT 3
20184: ST_TO_ADDR
// vc_control := control_apeman ;
20185: LD_ADDR_OWVAR 38
20189: PUSH
20190: LD_INT 5
20192: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20193: LD_ADDR_OWVAR 40
20197: PUSH
20198: LD_INT 29
20200: ST_TO_ADDR
// un := CreateVehicle ;
20201: LD_ADDR_VAR 0 2
20205: PUSH
20206: CALL_OW 45
20210: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20211: LD_VAR 0 2
20215: PPUSH
20216: LD_INT 1
20218: PPUSH
20219: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20223: LD_INT 35
20225: PPUSH
20226: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20230: LD_VAR 0 2
20234: PPUSH
20235: LD_INT 22
20237: PUSH
20238: LD_OWVAR 2
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PPUSH
20247: CALL_OW 69
20251: PPUSH
20252: LD_VAR 0 2
20256: PPUSH
20257: CALL_OW 74
20261: PPUSH
20262: CALL_OW 115
// until IsDead ( un ) ;
20266: LD_VAR 0 2
20270: PPUSH
20271: CALL_OW 301
20275: IFFALSE 20223
// end ;
20277: PPOPN 2
20279: END
// every 0 0$1 trigger StreamModeActive and sStu do
20280: LD_EXP 37
20284: PUSH
20285: LD_EXP 76
20289: AND
20290: IFFALSE 20306
20292: GO 20294
20294: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20295: LD_STRING displayStucuk();
20297: PPUSH
20298: CALL_OW 559
// ResetFog ;
20302: CALL_OW 335
// end ;
20306: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20307: LD_EXP 37
20311: PUSH
20312: LD_EXP 69
20316: AND
20317: IFFALSE 20458
20319: GO 20321
20321: DISABLE
20322: LD_INT 0
20324: PPUSH
20325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20326: LD_ADDR_VAR 0 2
20330: PUSH
20331: LD_INT 22
20333: PUSH
20334: LD_OWVAR 2
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 21
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PPUSH
20357: CALL_OW 69
20361: ST_TO_ADDR
// if not tmp then
20362: LD_VAR 0 2
20366: NOT
20367: IFFALSE 20371
// exit ;
20369: GO 20458
// un := tmp [ rand ( 1 , tmp ) ] ;
20371: LD_ADDR_VAR 0 1
20375: PUSH
20376: LD_VAR 0 2
20380: PUSH
20381: LD_INT 1
20383: PPUSH
20384: LD_VAR 0 2
20388: PPUSH
20389: CALL_OW 12
20393: ARRAY
20394: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20395: LD_VAR 0 1
20399: PPUSH
20400: LD_INT 0
20402: PPUSH
20403: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20407: LD_VAR 0 1
20411: PPUSH
20412: LD_OWVAR 3
20416: PUSH
20417: LD_VAR 0 1
20421: DIFF
20422: PPUSH
20423: LD_VAR 0 1
20427: PPUSH
20428: CALL_OW 74
20432: PPUSH
20433: CALL_OW 115
// wait ( 0 0$20 ) ;
20437: LD_INT 700
20439: PPUSH
20440: CALL_OW 67
// SetSide ( un , your_side ) ;
20444: LD_VAR 0 1
20448: PPUSH
20449: LD_OWVAR 2
20453: PPUSH
20454: CALL_OW 235
// end ;
20458: PPOPN 2
20460: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20461: LD_EXP 37
20465: PUSH
20466: LD_EXP 70
20470: AND
20471: IFFALSE 20577
20473: GO 20475
20475: DISABLE
20476: LD_INT 0
20478: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20479: LD_ADDR_VAR 0 1
20483: PUSH
20484: LD_INT 22
20486: PUSH
20487: LD_OWVAR 2
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: LD_INT 30
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 30
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: LIST
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PPUSH
20528: CALL_OW 69
20532: ST_TO_ADDR
// if not depot then
20533: LD_VAR 0 1
20537: NOT
20538: IFFALSE 20542
// exit ;
20540: GO 20577
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20542: LD_VAR 0 1
20546: PUSH
20547: LD_INT 1
20549: ARRAY
20550: PPUSH
20551: CALL_OW 250
20555: PPUSH
20556: LD_VAR 0 1
20560: PUSH
20561: LD_INT 1
20563: ARRAY
20564: PPUSH
20565: CALL_OW 251
20569: PPUSH
20570: LD_INT 70
20572: PPUSH
20573: CALL_OW 495
// end ;
20577: PPOPN 1
20579: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20580: LD_EXP 37
20584: PUSH
20585: LD_EXP 71
20589: AND
20590: IFFALSE 20801
20592: GO 20594
20594: DISABLE
20595: LD_INT 0
20597: PPUSH
20598: PPUSH
20599: PPUSH
20600: PPUSH
20601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20602: LD_ADDR_VAR 0 5
20606: PUSH
20607: LD_INT 22
20609: PUSH
20610: LD_OWVAR 2
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 21
20621: PUSH
20622: LD_INT 1
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PPUSH
20633: CALL_OW 69
20637: ST_TO_ADDR
// if not tmp then
20638: LD_VAR 0 5
20642: NOT
20643: IFFALSE 20647
// exit ;
20645: GO 20801
// for i in tmp do
20647: LD_ADDR_VAR 0 1
20651: PUSH
20652: LD_VAR 0 5
20656: PUSH
20657: FOR_IN
20658: IFFALSE 20799
// begin d := rand ( 0 , 5 ) ;
20660: LD_ADDR_VAR 0 4
20664: PUSH
20665: LD_INT 0
20667: PPUSH
20668: LD_INT 5
20670: PPUSH
20671: CALL_OW 12
20675: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20676: LD_ADDR_VAR 0 2
20680: PUSH
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL_OW 250
20690: PPUSH
20691: LD_VAR 0 4
20695: PPUSH
20696: LD_INT 3
20698: PPUSH
20699: LD_INT 12
20701: PPUSH
20702: CALL_OW 12
20706: PPUSH
20707: CALL_OW 272
20711: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20712: LD_ADDR_VAR 0 3
20716: PUSH
20717: LD_VAR 0 1
20721: PPUSH
20722: CALL_OW 251
20726: PPUSH
20727: LD_VAR 0 4
20731: PPUSH
20732: LD_INT 3
20734: PPUSH
20735: LD_INT 12
20737: PPUSH
20738: CALL_OW 12
20742: PPUSH
20743: CALL_OW 273
20747: ST_TO_ADDR
// if ValidHex ( x , y ) then
20748: LD_VAR 0 2
20752: PPUSH
20753: LD_VAR 0 3
20757: PPUSH
20758: CALL_OW 488
20762: IFFALSE 20797
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20764: LD_VAR 0 1
20768: PPUSH
20769: LD_VAR 0 2
20773: PPUSH
20774: LD_VAR 0 3
20778: PPUSH
20779: LD_INT 3
20781: PPUSH
20782: LD_INT 6
20784: PPUSH
20785: CALL_OW 12
20789: PPUSH
20790: LD_INT 1
20792: PPUSH
20793: CALL_OW 483
// end ;
20797: GO 20657
20799: POP
20800: POP
// end ;
20801: PPOPN 5
20803: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20804: LD_EXP 37
20808: PUSH
20809: LD_EXP 72
20813: AND
20814: IFFALSE 20908
20816: GO 20818
20818: DISABLE
20819: LD_INT 0
20821: PPUSH
20822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20823: LD_ADDR_VAR 0 2
20827: PUSH
20828: LD_INT 22
20830: PUSH
20831: LD_OWVAR 2
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 32
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 21
20852: PUSH
20853: LD_INT 2
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 69
20869: ST_TO_ADDR
// if not tmp then
20870: LD_VAR 0 2
20874: NOT
20875: IFFALSE 20879
// exit ;
20877: GO 20908
// for i in tmp do
20879: LD_ADDR_VAR 0 1
20883: PUSH
20884: LD_VAR 0 2
20888: PUSH
20889: FOR_IN
20890: IFFALSE 20906
// SetFuel ( i , 0 ) ;
20892: LD_VAR 0 1
20896: PPUSH
20897: LD_INT 0
20899: PPUSH
20900: CALL_OW 240
20904: GO 20889
20906: POP
20907: POP
// end ;
20908: PPOPN 2
20910: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20911: LD_EXP 37
20915: PUSH
20916: LD_EXP 73
20920: AND
20921: IFFALSE 20987
20923: GO 20925
20925: DISABLE
20926: LD_INT 0
20928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20929: LD_ADDR_VAR 0 1
20933: PUSH
20934: LD_INT 22
20936: PUSH
20937: LD_OWVAR 2
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 30
20948: PUSH
20949: LD_INT 29
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PPUSH
20960: CALL_OW 69
20964: ST_TO_ADDR
// if not tmp then
20965: LD_VAR 0 1
20969: NOT
20970: IFFALSE 20974
// exit ;
20972: GO 20987
// DestroyUnit ( tmp [ 1 ] ) ;
20974: LD_VAR 0 1
20978: PUSH
20979: LD_INT 1
20981: ARRAY
20982: PPUSH
20983: CALL_OW 65
// end ;
20987: PPOPN 1
20989: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20990: LD_EXP 37
20994: PUSH
20995: LD_EXP 75
20999: AND
21000: IFFALSE 21129
21002: GO 21004
21004: DISABLE
21005: LD_INT 0
21007: PPUSH
// begin uc_side := 0 ;
21008: LD_ADDR_OWVAR 20
21012: PUSH
21013: LD_INT 0
21015: ST_TO_ADDR
// uc_nation := nation_arabian ;
21016: LD_ADDR_OWVAR 21
21020: PUSH
21021: LD_INT 2
21023: ST_TO_ADDR
// hc_gallery :=  ;
21024: LD_ADDR_OWVAR 33
21028: PUSH
21029: LD_STRING 
21031: ST_TO_ADDR
// hc_name :=  ;
21032: LD_ADDR_OWVAR 26
21036: PUSH
21037: LD_STRING 
21039: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21040: LD_INT 1
21042: PPUSH
21043: LD_INT 11
21045: PPUSH
21046: LD_INT 10
21048: PPUSH
21049: CALL_OW 380
// un := CreateHuman ;
21053: LD_ADDR_VAR 0 1
21057: PUSH
21058: CALL_OW 44
21062: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21063: LD_VAR 0 1
21067: PPUSH
21068: LD_INT 1
21070: PPUSH
21071: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21075: LD_INT 35
21077: PPUSH
21078: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21082: LD_VAR 0 1
21086: PPUSH
21087: LD_INT 22
21089: PUSH
21090: LD_OWVAR 2
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PPUSH
21099: CALL_OW 69
21103: PPUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 74
21113: PPUSH
21114: CALL_OW 115
// until IsDead ( un ) ;
21118: LD_VAR 0 1
21122: PPUSH
21123: CALL_OW 301
21127: IFFALSE 21075
// end ;
21129: PPOPN 1
21131: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21132: LD_EXP 37
21136: PUSH
21137: LD_EXP 77
21141: AND
21142: IFFALSE 21154
21144: GO 21146
21146: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21147: LD_STRING earthquake(getX(game), 0, 32)
21149: PPUSH
21150: CALL_OW 559
21154: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21155: LD_EXP 37
21159: PUSH
21160: LD_EXP 78
21164: AND
21165: IFFALSE 21256
21167: GO 21169
21169: DISABLE
21170: LD_INT 0
21172: PPUSH
// begin enable ;
21173: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21174: LD_ADDR_VAR 0 1
21178: PUSH
21179: LD_INT 22
21181: PUSH
21182: LD_OWVAR 2
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 21
21193: PUSH
21194: LD_INT 2
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 33
21203: PUSH
21204: LD_INT 3
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 69
21220: ST_TO_ADDR
// if not tmp then
21221: LD_VAR 0 1
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21256
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21230: LD_VAR 0 1
21234: PUSH
21235: LD_INT 1
21237: PPUSH
21238: LD_VAR 0 1
21242: PPUSH
21243: CALL_OW 12
21247: ARRAY
21248: PPUSH
21249: LD_INT 1
21251: PPUSH
21252: CALL_OW 234
// end ;
21256: PPOPN 1
21258: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21259: LD_EXP 37
21263: PUSH
21264: LD_EXP 79
21268: AND
21269: IFFALSE 21410
21271: GO 21273
21273: DISABLE
21274: LD_INT 0
21276: PPUSH
21277: PPUSH
21278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21279: LD_ADDR_VAR 0 3
21283: PUSH
21284: LD_INT 22
21286: PUSH
21287: LD_OWVAR 2
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 25
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PPUSH
21310: CALL_OW 69
21314: ST_TO_ADDR
// if not tmp then
21315: LD_VAR 0 3
21319: NOT
21320: IFFALSE 21324
// exit ;
21322: GO 21410
// un := tmp [ rand ( 1 , tmp ) ] ;
21324: LD_ADDR_VAR 0 2
21328: PUSH
21329: LD_VAR 0 3
21333: PUSH
21334: LD_INT 1
21336: PPUSH
21337: LD_VAR 0 3
21341: PPUSH
21342: CALL_OW 12
21346: ARRAY
21347: ST_TO_ADDR
// if Crawls ( un ) then
21348: LD_VAR 0 2
21352: PPUSH
21353: CALL_OW 318
21357: IFFALSE 21368
// ComWalk ( un ) ;
21359: LD_VAR 0 2
21363: PPUSH
21364: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21368: LD_VAR 0 2
21372: PPUSH
21373: LD_INT 9
21375: PPUSH
21376: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21380: LD_INT 28
21382: PPUSH
21383: LD_OWVAR 2
21387: PPUSH
21388: LD_INT 2
21390: PPUSH
21391: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21395: LD_INT 29
21397: PPUSH
21398: LD_OWVAR 2
21402: PPUSH
21403: LD_INT 2
21405: PPUSH
21406: CALL_OW 322
// end ;
21410: PPOPN 3
21412: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21413: LD_EXP 37
21417: PUSH
21418: LD_EXP 80
21422: AND
21423: IFFALSE 21534
21425: GO 21427
21427: DISABLE
21428: LD_INT 0
21430: PPUSH
21431: PPUSH
21432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21433: LD_ADDR_VAR 0 3
21437: PUSH
21438: LD_INT 22
21440: PUSH
21441: LD_OWVAR 2
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 25
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PPUSH
21464: CALL_OW 69
21468: ST_TO_ADDR
// if not tmp then
21469: LD_VAR 0 3
21473: NOT
21474: IFFALSE 21478
// exit ;
21476: GO 21534
// un := tmp [ rand ( 1 , tmp ) ] ;
21478: LD_ADDR_VAR 0 2
21482: PUSH
21483: LD_VAR 0 3
21487: PUSH
21488: LD_INT 1
21490: PPUSH
21491: LD_VAR 0 3
21495: PPUSH
21496: CALL_OW 12
21500: ARRAY
21501: ST_TO_ADDR
// if Crawls ( un ) then
21502: LD_VAR 0 2
21506: PPUSH
21507: CALL_OW 318
21511: IFFALSE 21522
// ComWalk ( un ) ;
21513: LD_VAR 0 2
21517: PPUSH
21518: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21522: LD_VAR 0 2
21526: PPUSH
21527: LD_INT 8
21529: PPUSH
21530: CALL_OW 336
// end ;
21534: PPOPN 3
21536: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21537: LD_EXP 37
21541: PUSH
21542: LD_EXP 81
21546: AND
21547: IFFALSE 21691
21549: GO 21551
21551: DISABLE
21552: LD_INT 0
21554: PPUSH
21555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21556: LD_ADDR_VAR 0 2
21560: PUSH
21561: LD_INT 22
21563: PUSH
21564: LD_OWVAR 2
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 21
21575: PUSH
21576: LD_INT 2
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 2
21585: PUSH
21586: LD_INT 34
21588: PUSH
21589: LD_INT 12
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 34
21598: PUSH
21599: LD_INT 51
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 34
21608: PUSH
21609: LD_INT 32
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: PPUSH
21627: CALL_OW 69
21631: ST_TO_ADDR
// if not tmp then
21632: LD_VAR 0 2
21636: NOT
21637: IFFALSE 21641
// exit ;
21639: GO 21691
// for i in tmp do
21641: LD_ADDR_VAR 0 1
21645: PUSH
21646: LD_VAR 0 2
21650: PUSH
21651: FOR_IN
21652: IFFALSE 21689
// if GetCargo ( i , mat_artifact ) = 0 then
21654: LD_VAR 0 1
21658: PPUSH
21659: LD_INT 4
21661: PPUSH
21662: CALL_OW 289
21666: PUSH
21667: LD_INT 0
21669: EQUAL
21670: IFFALSE 21687
// SetCargo ( i , mat_siberit , 100 ) ;
21672: LD_VAR 0 1
21676: PPUSH
21677: LD_INT 3
21679: PPUSH
21680: LD_INT 100
21682: PPUSH
21683: CALL_OW 290
21687: GO 21651
21689: POP
21690: POP
// end ;
21691: PPOPN 2
21693: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21694: LD_EXP 37
21698: PUSH
21699: LD_EXP 82
21703: AND
21704: IFFALSE 21887
21706: GO 21708
21708: DISABLE
21709: LD_INT 0
21711: PPUSH
21712: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21713: LD_ADDR_VAR 0 2
21717: PUSH
21718: LD_INT 22
21720: PUSH
21721: LD_OWVAR 2
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PPUSH
21730: CALL_OW 69
21734: ST_TO_ADDR
// if not tmp then
21735: LD_VAR 0 2
21739: NOT
21740: IFFALSE 21744
// exit ;
21742: GO 21887
// for i := 1 to 2 do
21744: LD_ADDR_VAR 0 1
21748: PUSH
21749: DOUBLE
21750: LD_INT 1
21752: DEC
21753: ST_TO_ADDR
21754: LD_INT 2
21756: PUSH
21757: FOR_TO
21758: IFFALSE 21885
// begin uc_side := your_side ;
21760: LD_ADDR_OWVAR 20
21764: PUSH
21765: LD_OWVAR 2
21769: ST_TO_ADDR
// uc_nation := nation_american ;
21770: LD_ADDR_OWVAR 21
21774: PUSH
21775: LD_INT 1
21777: ST_TO_ADDR
// vc_chassis := us_morphling ;
21778: LD_ADDR_OWVAR 37
21782: PUSH
21783: LD_INT 5
21785: ST_TO_ADDR
// vc_engine := engine_siberite ;
21786: LD_ADDR_OWVAR 39
21790: PUSH
21791: LD_INT 3
21793: ST_TO_ADDR
// vc_control := control_computer ;
21794: LD_ADDR_OWVAR 38
21798: PUSH
21799: LD_INT 3
21801: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21802: LD_ADDR_OWVAR 40
21806: PUSH
21807: LD_INT 10
21809: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21810: LD_VAR 0 2
21814: PUSH
21815: LD_INT 1
21817: ARRAY
21818: PPUSH
21819: CALL_OW 310
21823: NOT
21824: IFFALSE 21871
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21826: CALL_OW 45
21830: PPUSH
21831: LD_VAR 0 2
21835: PUSH
21836: LD_INT 1
21838: ARRAY
21839: PPUSH
21840: CALL_OW 250
21844: PPUSH
21845: LD_VAR 0 2
21849: PUSH
21850: LD_INT 1
21852: ARRAY
21853: PPUSH
21854: CALL_OW 251
21858: PPUSH
21859: LD_INT 12
21861: PPUSH
21862: LD_INT 1
21864: PPUSH
21865: CALL_OW 50
21869: GO 21883
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21871: CALL_OW 45
21875: PPUSH
21876: LD_INT 1
21878: PPUSH
21879: CALL_OW 51
// end ;
21883: GO 21757
21885: POP
21886: POP
// end ;
21887: PPOPN 2
21889: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21890: LD_EXP 37
21894: PUSH
21895: LD_EXP 83
21899: AND
21900: IFFALSE 22122
21902: GO 21904
21904: DISABLE
21905: LD_INT 0
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21913: LD_ADDR_VAR 0 6
21917: PUSH
21918: LD_INT 22
21920: PUSH
21921: LD_OWVAR 2
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 21
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: LD_INT 23
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: LIST
21961: PPUSH
21962: CALL_OW 69
21966: ST_TO_ADDR
// if not tmp then
21967: LD_VAR 0 6
21971: NOT
21972: IFFALSE 21976
// exit ;
21974: GO 22122
// s1 := rand ( 1 , 4 ) ;
21976: LD_ADDR_VAR 0 2
21980: PUSH
21981: LD_INT 1
21983: PPUSH
21984: LD_INT 4
21986: PPUSH
21987: CALL_OW 12
21991: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21992: LD_ADDR_VAR 0 4
21996: PUSH
21997: LD_VAR 0 6
22001: PUSH
22002: LD_INT 1
22004: ARRAY
22005: PPUSH
22006: LD_VAR 0 2
22010: PPUSH
22011: CALL_OW 259
22015: ST_TO_ADDR
// if s1 = 1 then
22016: LD_VAR 0 2
22020: PUSH
22021: LD_INT 1
22023: EQUAL
22024: IFFALSE 22044
// s2 := rand ( 2 , 4 ) else
22026: LD_ADDR_VAR 0 3
22030: PUSH
22031: LD_INT 2
22033: PPUSH
22034: LD_INT 4
22036: PPUSH
22037: CALL_OW 12
22041: ST_TO_ADDR
22042: GO 22052
// s2 := 1 ;
22044: LD_ADDR_VAR 0 3
22048: PUSH
22049: LD_INT 1
22051: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22052: LD_ADDR_VAR 0 5
22056: PUSH
22057: LD_VAR 0 6
22061: PUSH
22062: LD_INT 1
22064: ARRAY
22065: PPUSH
22066: LD_VAR 0 3
22070: PPUSH
22071: CALL_OW 259
22075: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22076: LD_VAR 0 6
22080: PUSH
22081: LD_INT 1
22083: ARRAY
22084: PPUSH
22085: LD_VAR 0 2
22089: PPUSH
22090: LD_VAR 0 5
22094: PPUSH
22095: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22099: LD_VAR 0 6
22103: PUSH
22104: LD_INT 1
22106: ARRAY
22107: PPUSH
22108: LD_VAR 0 3
22112: PPUSH
22113: LD_VAR 0 4
22117: PPUSH
22118: CALL_OW 237
// end ;
22122: PPOPN 6
22124: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22125: LD_EXP 37
22129: PUSH
22130: LD_EXP 84
22134: AND
22135: IFFALSE 22214
22137: GO 22139
22139: DISABLE
22140: LD_INT 0
22142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22143: LD_ADDR_VAR 0 1
22147: PUSH
22148: LD_INT 22
22150: PUSH
22151: LD_OWVAR 2
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 30
22162: PUSH
22163: LD_INT 3
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PPUSH
22174: CALL_OW 69
22178: ST_TO_ADDR
// if not tmp then
22179: LD_VAR 0 1
22183: NOT
22184: IFFALSE 22188
// exit ;
22186: GO 22214
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22188: LD_VAR 0 1
22192: PUSH
22193: LD_INT 1
22195: PPUSH
22196: LD_VAR 0 1
22200: PPUSH
22201: CALL_OW 12
22205: ARRAY
22206: PPUSH
22207: LD_INT 1
22209: PPUSH
22210: CALL_OW 234
// end ;
22214: PPOPN 1
22216: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22217: LD_EXP 37
22221: PUSH
22222: LD_EXP 85
22226: AND
22227: IFFALSE 22339
22229: GO 22231
22231: DISABLE
22232: LD_INT 0
22234: PPUSH
22235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22236: LD_ADDR_VAR 0 2
22240: PUSH
22241: LD_INT 22
22243: PUSH
22244: LD_OWVAR 2
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: LD_INT 30
22258: PUSH
22259: LD_INT 27
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 30
22268: PUSH
22269: LD_INT 26
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 30
22278: PUSH
22279: LD_INT 28
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PPUSH
22296: CALL_OW 69
22300: ST_TO_ADDR
// if not tmp then
22301: LD_VAR 0 2
22305: NOT
22306: IFFALSE 22310
// exit ;
22308: GO 22339
// for i in tmp do
22310: LD_ADDR_VAR 0 1
22314: PUSH
22315: LD_VAR 0 2
22319: PUSH
22320: FOR_IN
22321: IFFALSE 22337
// SetLives ( i , 1 ) ;
22323: LD_VAR 0 1
22327: PPUSH
22328: LD_INT 1
22330: PPUSH
22331: CALL_OW 234
22335: GO 22320
22337: POP
22338: POP
// end ;
22339: PPOPN 2
22341: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22342: LD_EXP 37
22346: PUSH
22347: LD_EXP 86
22351: AND
22352: IFFALSE 22626
22354: GO 22356
22356: DISABLE
22357: LD_INT 0
22359: PPUSH
22360: PPUSH
22361: PPUSH
// begin i := rand ( 1 , 7 ) ;
22362: LD_ADDR_VAR 0 1
22366: PUSH
22367: LD_INT 1
22369: PPUSH
22370: LD_INT 7
22372: PPUSH
22373: CALL_OW 12
22377: ST_TO_ADDR
// case i of 1 :
22378: LD_VAR 0 1
22382: PUSH
22383: LD_INT 1
22385: DOUBLE
22386: EQUAL
22387: IFTRUE 22391
22389: GO 22401
22391: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22392: LD_STRING earthquake(getX(game), 0, 32)
22394: PPUSH
22395: CALL_OW 559
22399: GO 22626
22401: LD_INT 2
22403: DOUBLE
22404: EQUAL
22405: IFTRUE 22409
22407: GO 22423
22409: POP
// begin ToLua ( displayStucuk(); ) ;
22410: LD_STRING displayStucuk();
22412: PPUSH
22413: CALL_OW 559
// ResetFog ;
22417: CALL_OW 335
// end ; 3 :
22421: GO 22626
22423: LD_INT 3
22425: DOUBLE
22426: EQUAL
22427: IFTRUE 22431
22429: GO 22535
22431: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22432: LD_ADDR_VAR 0 2
22436: PUSH
22437: LD_INT 22
22439: PUSH
22440: LD_OWVAR 2
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 25
22451: PUSH
22452: LD_INT 1
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PPUSH
22463: CALL_OW 69
22467: ST_TO_ADDR
// if not tmp then
22468: LD_VAR 0 2
22472: NOT
22473: IFFALSE 22477
// exit ;
22475: GO 22626
// un := tmp [ rand ( 1 , tmp ) ] ;
22477: LD_ADDR_VAR 0 3
22481: PUSH
22482: LD_VAR 0 2
22486: PUSH
22487: LD_INT 1
22489: PPUSH
22490: LD_VAR 0 2
22494: PPUSH
22495: CALL_OW 12
22499: ARRAY
22500: ST_TO_ADDR
// if Crawls ( un ) then
22501: LD_VAR 0 3
22505: PPUSH
22506: CALL_OW 318
22510: IFFALSE 22521
// ComWalk ( un ) ;
22512: LD_VAR 0 3
22516: PPUSH
22517: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22521: LD_VAR 0 3
22525: PPUSH
22526: LD_INT 8
22528: PPUSH
22529: CALL_OW 336
// end ; 4 :
22533: GO 22626
22535: LD_INT 4
22537: DOUBLE
22538: EQUAL
22539: IFTRUE 22543
22541: GO 22604
22543: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22544: LD_ADDR_VAR 0 2
22548: PUSH
22549: LD_INT 22
22551: PUSH
22552: LD_OWVAR 2
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 30
22563: PUSH
22564: LD_INT 29
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PPUSH
22575: CALL_OW 69
22579: ST_TO_ADDR
// if not tmp then
22580: LD_VAR 0 2
22584: NOT
22585: IFFALSE 22589
// exit ;
22587: GO 22626
// DestroyUnit ( tmp [ 1 ] ) ;
22589: LD_VAR 0 2
22593: PUSH
22594: LD_INT 1
22596: ARRAY
22597: PPUSH
22598: CALL_OW 65
// end ; 5 .. 7 :
22602: GO 22626
22604: LD_INT 5
22606: DOUBLE
22607: GREATEREQUAL
22608: IFFALSE 22616
22610: LD_INT 7
22612: DOUBLE
22613: LESSEQUAL
22614: IFTRUE 22618
22616: GO 22625
22618: POP
// StreamSibBomb ; end ;
22619: CALL 18876 0 0
22623: GO 22626
22625: POP
// end ;
22626: PPOPN 3
22628: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22629: LD_EXP 37
22633: PUSH
22634: LD_EXP 87
22638: AND
22639: IFFALSE 22795
22641: GO 22643
22643: DISABLE
22644: LD_INT 0
22646: PPUSH
22647: PPUSH
22648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22649: LD_ADDR_VAR 0 2
22653: PUSH
22654: LD_INT 81
22656: PUSH
22657: LD_OWVAR 2
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 21
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 21
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PPUSH
22698: CALL_OW 69
22702: ST_TO_ADDR
// if not tmp then
22703: LD_VAR 0 2
22707: NOT
22708: IFFALSE 22712
// exit ;
22710: GO 22795
// p := 0 ;
22712: LD_ADDR_VAR 0 3
22716: PUSH
22717: LD_INT 0
22719: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22720: LD_INT 35
22722: PPUSH
22723: CALL_OW 67
// p := p + 1 ;
22727: LD_ADDR_VAR 0 3
22731: PUSH
22732: LD_VAR 0 3
22736: PUSH
22737: LD_INT 1
22739: PLUS
22740: ST_TO_ADDR
// for i in tmp do
22741: LD_ADDR_VAR 0 1
22745: PUSH
22746: LD_VAR 0 2
22750: PUSH
22751: FOR_IN
22752: IFFALSE 22783
// if GetLives ( i ) < 1000 then
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 256
22763: PUSH
22764: LD_INT 1000
22766: LESS
22767: IFFALSE 22781
// SetLives ( i , 1000 ) ;
22769: LD_VAR 0 1
22773: PPUSH
22774: LD_INT 1000
22776: PPUSH
22777: CALL_OW 234
22781: GO 22751
22783: POP
22784: POP
// until p > 20 ;
22785: LD_VAR 0 3
22789: PUSH
22790: LD_INT 20
22792: GREATER
22793: IFFALSE 22720
// end ;
22795: PPOPN 3
22797: END
// every 0 0$1 trigger StreamModeActive and sTime do
22798: LD_EXP 37
22802: PUSH
22803: LD_EXP 88
22807: AND
22808: IFFALSE 22843
22810: GO 22812
22812: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22813: LD_INT 28
22815: PPUSH
22816: LD_OWVAR 2
22820: PPUSH
22821: LD_INT 2
22823: PPUSH
22824: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22828: LD_INT 30
22830: PPUSH
22831: LD_OWVAR 2
22835: PPUSH
22836: LD_INT 2
22838: PPUSH
22839: CALL_OW 322
// end ;
22843: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22844: LD_EXP 37
22848: PUSH
22849: LD_EXP 89
22853: AND
22854: IFFALSE 22975
22856: GO 22858
22858: DISABLE
22859: LD_INT 0
22861: PPUSH
22862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22863: LD_ADDR_VAR 0 2
22867: PUSH
22868: LD_INT 22
22870: PUSH
22871: LD_OWVAR 2
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 21
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 3
22892: PUSH
22893: LD_INT 23
22895: PUSH
22896: LD_INT 0
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: LIST
22911: PPUSH
22912: CALL_OW 69
22916: ST_TO_ADDR
// if not tmp then
22917: LD_VAR 0 2
22921: NOT
22922: IFFALSE 22926
// exit ;
22924: GO 22975
// for i in tmp do
22926: LD_ADDR_VAR 0 1
22930: PUSH
22931: LD_VAR 0 2
22935: PUSH
22936: FOR_IN
22937: IFFALSE 22973
// begin if Crawls ( i ) then
22939: LD_VAR 0 1
22943: PPUSH
22944: CALL_OW 318
22948: IFFALSE 22959
// ComWalk ( i ) ;
22950: LD_VAR 0 1
22954: PPUSH
22955: CALL_OW 138
// SetClass ( i , 2 ) ;
22959: LD_VAR 0 1
22963: PPUSH
22964: LD_INT 2
22966: PPUSH
22967: CALL_OW 336
// end ;
22971: GO 22936
22973: POP
22974: POP
// end ;
22975: PPOPN 2
22977: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22978: LD_EXP 37
22982: PUSH
22983: LD_EXP 90
22987: AND
22988: IFFALSE 23269
22990: GO 22992
22992: DISABLE
22993: LD_INT 0
22995: PPUSH
22996: PPUSH
22997: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22998: LD_OWVAR 2
23002: PPUSH
23003: LD_INT 9
23005: PPUSH
23006: LD_INT 1
23008: PPUSH
23009: LD_INT 1
23011: PPUSH
23012: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23016: LD_INT 9
23018: PPUSH
23019: LD_OWVAR 2
23023: PPUSH
23024: CALL_OW 343
// uc_side := 9 ;
23028: LD_ADDR_OWVAR 20
23032: PUSH
23033: LD_INT 9
23035: ST_TO_ADDR
// uc_nation := 2 ;
23036: LD_ADDR_OWVAR 21
23040: PUSH
23041: LD_INT 2
23043: ST_TO_ADDR
// hc_name := Dark Warrior ;
23044: LD_ADDR_OWVAR 26
23048: PUSH
23049: LD_STRING Dark Warrior
23051: ST_TO_ADDR
// hc_gallery :=  ;
23052: LD_ADDR_OWVAR 33
23056: PUSH
23057: LD_STRING 
23059: ST_TO_ADDR
// hc_noskilllimit := true ;
23060: LD_ADDR_OWVAR 76
23064: PUSH
23065: LD_INT 1
23067: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23068: LD_ADDR_OWVAR 31
23072: PUSH
23073: LD_INT 30
23075: PUSH
23076: LD_INT 30
23078: PUSH
23079: LD_INT 30
23081: PUSH
23082: LD_INT 30
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: ST_TO_ADDR
// un := CreateHuman ;
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: CALL_OW 44
23100: ST_TO_ADDR
// hc_noskilllimit := false ;
23101: LD_ADDR_OWVAR 76
23105: PUSH
23106: LD_INT 0
23108: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23109: LD_VAR 0 3
23113: PPUSH
23114: LD_INT 1
23116: PPUSH
23117: CALL_OW 51
// p := 0 ;
23121: LD_ADDR_VAR 0 2
23125: PUSH
23126: LD_INT 0
23128: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23129: LD_INT 35
23131: PPUSH
23132: CALL_OW 67
// p := p + 1 ;
23136: LD_ADDR_VAR 0 2
23140: PUSH
23141: LD_VAR 0 2
23145: PUSH
23146: LD_INT 1
23148: PLUS
23149: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23150: LD_VAR 0 3
23154: PPUSH
23155: CALL_OW 256
23159: PUSH
23160: LD_INT 1000
23162: LESS
23163: IFFALSE 23177
// SetLives ( un , 1000 ) ;
23165: LD_VAR 0 3
23169: PPUSH
23170: LD_INT 1000
23172: PPUSH
23173: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23177: LD_VAR 0 3
23181: PPUSH
23182: LD_INT 81
23184: PUSH
23185: LD_OWVAR 2
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 91
23196: PUSH
23197: LD_VAR 0 3
23201: PUSH
23202: LD_INT 30
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: LIST
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PPUSH
23214: CALL_OW 69
23218: PPUSH
23219: LD_VAR 0 3
23223: PPUSH
23224: CALL_OW 74
23228: PPUSH
23229: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23233: LD_VAR 0 2
23237: PUSH
23238: LD_INT 60
23240: GREATER
23241: PUSH
23242: LD_VAR 0 3
23246: PPUSH
23247: CALL_OW 301
23251: OR
23252: IFFALSE 23129
// if un then
23254: LD_VAR 0 3
23258: IFFALSE 23269
// RemoveUnit ( un ) ;
23260: LD_VAR 0 3
23264: PPUSH
23265: CALL_OW 64
// end ;
23269: PPOPN 3
23271: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23272: LD_INT 0
23274: PPUSH
// case cmd of 301 :
23275: LD_VAR 0 1
23279: PUSH
23280: LD_INT 301
23282: DOUBLE
23283: EQUAL
23284: IFTRUE 23288
23286: GO 23320
23288: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23289: LD_VAR 0 6
23293: PPUSH
23294: LD_VAR 0 7
23298: PPUSH
23299: LD_VAR 0 8
23303: PPUSH
23304: LD_VAR 0 4
23308: PPUSH
23309: LD_VAR 0 5
23313: PPUSH
23314: CALL 24521 0 5
23318: GO 23441
23320: LD_INT 302
23322: DOUBLE
23323: EQUAL
23324: IFTRUE 23328
23326: GO 23365
23328: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23329: LD_VAR 0 6
23333: PPUSH
23334: LD_VAR 0 7
23338: PPUSH
23339: LD_VAR 0 8
23343: PPUSH
23344: LD_VAR 0 9
23348: PPUSH
23349: LD_VAR 0 4
23353: PPUSH
23354: LD_VAR 0 5
23358: PPUSH
23359: CALL 24612 0 6
23363: GO 23441
23365: LD_INT 303
23367: DOUBLE
23368: EQUAL
23369: IFTRUE 23373
23371: GO 23410
23373: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23374: LD_VAR 0 6
23378: PPUSH
23379: LD_VAR 0 7
23383: PPUSH
23384: LD_VAR 0 8
23388: PPUSH
23389: LD_VAR 0 9
23393: PPUSH
23394: LD_VAR 0 4
23398: PPUSH
23399: LD_VAR 0 5
23403: PPUSH
23404: CALL 23446 0 6
23408: GO 23441
23410: LD_INT 304
23412: DOUBLE
23413: EQUAL
23414: IFTRUE 23418
23416: GO 23440
23418: POP
// hHackTeleport ( unit , x , y ) ; end ;
23419: LD_VAR 0 2
23423: PPUSH
23424: LD_VAR 0 4
23428: PPUSH
23429: LD_VAR 0 5
23433: PPUSH
23434: CALL 25205 0 3
23438: GO 23441
23440: POP
// end ;
23441: LD_VAR 0 12
23445: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23446: LD_INT 0
23448: PPUSH
23449: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23450: LD_VAR 0 1
23454: PUSH
23455: LD_INT 1
23457: LESS
23458: PUSH
23459: LD_VAR 0 1
23463: PUSH
23464: LD_INT 3
23466: GREATER
23467: OR
23468: PUSH
23469: LD_VAR 0 5
23473: PPUSH
23474: LD_VAR 0 6
23478: PPUSH
23479: CALL_OW 428
23483: OR
23484: IFFALSE 23488
// exit ;
23486: GO 24208
// uc_side := your_side ;
23488: LD_ADDR_OWVAR 20
23492: PUSH
23493: LD_OWVAR 2
23497: ST_TO_ADDR
// uc_nation := nation ;
23498: LD_ADDR_OWVAR 21
23502: PUSH
23503: LD_VAR 0 1
23507: ST_TO_ADDR
// bc_level = 1 ;
23508: LD_ADDR_OWVAR 43
23512: PUSH
23513: LD_INT 1
23515: ST_TO_ADDR
// case btype of 1 :
23516: LD_VAR 0 2
23520: PUSH
23521: LD_INT 1
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23540
23529: POP
// bc_type := b_depot ; 2 :
23530: LD_ADDR_OWVAR 42
23534: PUSH
23535: LD_INT 0
23537: ST_TO_ADDR
23538: GO 24152
23540: LD_INT 2
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23559
23548: POP
// bc_type := b_warehouse ; 3 :
23549: LD_ADDR_OWVAR 42
23553: PUSH
23554: LD_INT 1
23556: ST_TO_ADDR
23557: GO 24152
23559: LD_INT 3
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23578
23567: POP
// bc_type := b_lab ; 4 .. 9 :
23568: LD_ADDR_OWVAR 42
23572: PUSH
23573: LD_INT 6
23575: ST_TO_ADDR
23576: GO 24152
23578: LD_INT 4
23580: DOUBLE
23581: GREATEREQUAL
23582: IFFALSE 23590
23584: LD_INT 9
23586: DOUBLE
23587: LESSEQUAL
23588: IFTRUE 23592
23590: GO 23644
23592: POP
// begin bc_type := b_lab_half ;
23593: LD_ADDR_OWVAR 42
23597: PUSH
23598: LD_INT 7
23600: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23601: LD_ADDR_OWVAR 44
23605: PUSH
23606: LD_INT 10
23608: PUSH
23609: LD_INT 11
23611: PUSH
23612: LD_INT 12
23614: PUSH
23615: LD_INT 15
23617: PUSH
23618: LD_INT 14
23620: PUSH
23621: LD_INT 13
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: PUSH
23632: LD_VAR 0 2
23636: PUSH
23637: LD_INT 3
23639: MINUS
23640: ARRAY
23641: ST_TO_ADDR
// end ; 10 .. 13 :
23642: GO 24152
23644: LD_INT 10
23646: DOUBLE
23647: GREATEREQUAL
23648: IFFALSE 23656
23650: LD_INT 13
23652: DOUBLE
23653: LESSEQUAL
23654: IFTRUE 23658
23656: GO 23735
23658: POP
// begin bc_type := b_lab_full ;
23659: LD_ADDR_OWVAR 42
23663: PUSH
23664: LD_INT 8
23666: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23667: LD_ADDR_OWVAR 44
23671: PUSH
23672: LD_INT 10
23674: PUSH
23675: LD_INT 12
23677: PUSH
23678: LD_INT 14
23680: PUSH
23681: LD_INT 13
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: PUSH
23690: LD_VAR 0 2
23694: PUSH
23695: LD_INT 9
23697: MINUS
23698: ARRAY
23699: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23700: LD_ADDR_OWVAR 45
23704: PUSH
23705: LD_INT 11
23707: PUSH
23708: LD_INT 15
23710: PUSH
23711: LD_INT 12
23713: PUSH
23714: LD_INT 15
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: PUSH
23723: LD_VAR 0 2
23727: PUSH
23728: LD_INT 9
23730: MINUS
23731: ARRAY
23732: ST_TO_ADDR
// end ; 14 :
23733: GO 24152
23735: LD_INT 14
23737: DOUBLE
23738: EQUAL
23739: IFTRUE 23743
23741: GO 23754
23743: POP
// bc_type := b_workshop ; 15 :
23744: LD_ADDR_OWVAR 42
23748: PUSH
23749: LD_INT 2
23751: ST_TO_ADDR
23752: GO 24152
23754: LD_INT 15
23756: DOUBLE
23757: EQUAL
23758: IFTRUE 23762
23760: GO 23773
23762: POP
// bc_type := b_factory ; 16 :
23763: LD_ADDR_OWVAR 42
23767: PUSH
23768: LD_INT 3
23770: ST_TO_ADDR
23771: GO 24152
23773: LD_INT 16
23775: DOUBLE
23776: EQUAL
23777: IFTRUE 23781
23779: GO 23792
23781: POP
// bc_type := b_ext_gun ; 17 :
23782: LD_ADDR_OWVAR 42
23786: PUSH
23787: LD_INT 17
23789: ST_TO_ADDR
23790: GO 24152
23792: LD_INT 17
23794: DOUBLE
23795: EQUAL
23796: IFTRUE 23800
23798: GO 23828
23800: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23801: LD_ADDR_OWVAR 42
23805: PUSH
23806: LD_INT 19
23808: PUSH
23809: LD_INT 23
23811: PUSH
23812: LD_INT 19
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: LIST
23819: PUSH
23820: LD_VAR 0 1
23824: ARRAY
23825: ST_TO_ADDR
23826: GO 24152
23828: LD_INT 18
23830: DOUBLE
23831: EQUAL
23832: IFTRUE 23836
23834: GO 23847
23836: POP
// bc_type := b_ext_radar ; 19 :
23837: LD_ADDR_OWVAR 42
23841: PUSH
23842: LD_INT 20
23844: ST_TO_ADDR
23845: GO 24152
23847: LD_INT 19
23849: DOUBLE
23850: EQUAL
23851: IFTRUE 23855
23853: GO 23866
23855: POP
// bc_type := b_ext_radio ; 20 :
23856: LD_ADDR_OWVAR 42
23860: PUSH
23861: LD_INT 22
23863: ST_TO_ADDR
23864: GO 24152
23866: LD_INT 20
23868: DOUBLE
23869: EQUAL
23870: IFTRUE 23874
23872: GO 23885
23874: POP
// bc_type := b_ext_siberium ; 21 :
23875: LD_ADDR_OWVAR 42
23879: PUSH
23880: LD_INT 21
23882: ST_TO_ADDR
23883: GO 24152
23885: LD_INT 21
23887: DOUBLE
23888: EQUAL
23889: IFTRUE 23893
23891: GO 23904
23893: POP
// bc_type := b_ext_computer ; 22 :
23894: LD_ADDR_OWVAR 42
23898: PUSH
23899: LD_INT 24
23901: ST_TO_ADDR
23902: GO 24152
23904: LD_INT 22
23906: DOUBLE
23907: EQUAL
23908: IFTRUE 23912
23910: GO 23923
23912: POP
// bc_type := b_ext_track ; 23 :
23913: LD_ADDR_OWVAR 42
23917: PUSH
23918: LD_INT 16
23920: ST_TO_ADDR
23921: GO 24152
23923: LD_INT 23
23925: DOUBLE
23926: EQUAL
23927: IFTRUE 23931
23929: GO 23942
23931: POP
// bc_type := b_ext_laser ; 24 :
23932: LD_ADDR_OWVAR 42
23936: PUSH
23937: LD_INT 25
23939: ST_TO_ADDR
23940: GO 24152
23942: LD_INT 24
23944: DOUBLE
23945: EQUAL
23946: IFTRUE 23950
23948: GO 23961
23950: POP
// bc_type := b_control_tower ; 25 :
23951: LD_ADDR_OWVAR 42
23955: PUSH
23956: LD_INT 36
23958: ST_TO_ADDR
23959: GO 24152
23961: LD_INT 25
23963: DOUBLE
23964: EQUAL
23965: IFTRUE 23969
23967: GO 23980
23969: POP
// bc_type := b_breastwork ; 26 :
23970: LD_ADDR_OWVAR 42
23974: PUSH
23975: LD_INT 31
23977: ST_TO_ADDR
23978: GO 24152
23980: LD_INT 26
23982: DOUBLE
23983: EQUAL
23984: IFTRUE 23988
23986: GO 23999
23988: POP
// bc_type := b_bunker ; 27 :
23989: LD_ADDR_OWVAR 42
23993: PUSH
23994: LD_INT 32
23996: ST_TO_ADDR
23997: GO 24152
23999: LD_INT 27
24001: DOUBLE
24002: EQUAL
24003: IFTRUE 24007
24005: GO 24018
24007: POP
// bc_type := b_turret ; 28 :
24008: LD_ADDR_OWVAR 42
24012: PUSH
24013: LD_INT 33
24015: ST_TO_ADDR
24016: GO 24152
24018: LD_INT 28
24020: DOUBLE
24021: EQUAL
24022: IFTRUE 24026
24024: GO 24037
24026: POP
// bc_type := b_armoury ; 29 :
24027: LD_ADDR_OWVAR 42
24031: PUSH
24032: LD_INT 4
24034: ST_TO_ADDR
24035: GO 24152
24037: LD_INT 29
24039: DOUBLE
24040: EQUAL
24041: IFTRUE 24045
24043: GO 24056
24045: POP
// bc_type := b_barracks ; 30 :
24046: LD_ADDR_OWVAR 42
24050: PUSH
24051: LD_INT 5
24053: ST_TO_ADDR
24054: GO 24152
24056: LD_INT 30
24058: DOUBLE
24059: EQUAL
24060: IFTRUE 24064
24062: GO 24075
24064: POP
// bc_type := b_solar_power ; 31 :
24065: LD_ADDR_OWVAR 42
24069: PUSH
24070: LD_INT 27
24072: ST_TO_ADDR
24073: GO 24152
24075: LD_INT 31
24077: DOUBLE
24078: EQUAL
24079: IFTRUE 24083
24081: GO 24094
24083: POP
// bc_type := b_oil_power ; 32 :
24084: LD_ADDR_OWVAR 42
24088: PUSH
24089: LD_INT 26
24091: ST_TO_ADDR
24092: GO 24152
24094: LD_INT 32
24096: DOUBLE
24097: EQUAL
24098: IFTRUE 24102
24100: GO 24113
24102: POP
// bc_type := b_siberite_power ; 33 :
24103: LD_ADDR_OWVAR 42
24107: PUSH
24108: LD_INT 28
24110: ST_TO_ADDR
24111: GO 24152
24113: LD_INT 33
24115: DOUBLE
24116: EQUAL
24117: IFTRUE 24121
24119: GO 24132
24121: POP
// bc_type := b_oil_mine ; 34 :
24122: LD_ADDR_OWVAR 42
24126: PUSH
24127: LD_INT 29
24129: ST_TO_ADDR
24130: GO 24152
24132: LD_INT 34
24134: DOUBLE
24135: EQUAL
24136: IFTRUE 24140
24138: GO 24151
24140: POP
// bc_type := b_siberite_mine ; end ;
24141: LD_ADDR_OWVAR 42
24145: PUSH
24146: LD_INT 30
24148: ST_TO_ADDR
24149: GO 24152
24151: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24152: LD_ADDR_VAR 0 8
24156: PUSH
24157: LD_VAR 0 5
24161: PPUSH
24162: LD_VAR 0 6
24166: PPUSH
24167: LD_VAR 0 3
24171: PPUSH
24172: CALL_OW 47
24176: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24177: LD_OWVAR 42
24181: PUSH
24182: LD_INT 32
24184: PUSH
24185: LD_INT 33
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: IN
24192: IFFALSE 24208
// PlaceWeaponTurret ( b , weapon ) ;
24194: LD_VAR 0 8
24198: PPUSH
24199: LD_VAR 0 4
24203: PPUSH
24204: CALL_OW 431
// end ;
24208: LD_VAR 0 7
24212: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24213: LD_INT 0
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24219: LD_ADDR_VAR 0 4
24223: PUSH
24224: LD_INT 22
24226: PUSH
24227: LD_OWVAR 2
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: LD_INT 30
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 30
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PPUSH
24268: CALL_OW 69
24272: ST_TO_ADDR
// if not tmp then
24273: LD_VAR 0 4
24277: NOT
24278: IFFALSE 24282
// exit ;
24280: GO 24341
// for i in tmp do
24282: LD_ADDR_VAR 0 2
24286: PUSH
24287: LD_VAR 0 4
24291: PUSH
24292: FOR_IN
24293: IFFALSE 24339
// for j = 1 to 3 do
24295: LD_ADDR_VAR 0 3
24299: PUSH
24300: DOUBLE
24301: LD_INT 1
24303: DEC
24304: ST_TO_ADDR
24305: LD_INT 3
24307: PUSH
24308: FOR_TO
24309: IFFALSE 24335
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24311: LD_VAR 0 2
24315: PPUSH
24316: CALL_OW 274
24320: PPUSH
24321: LD_VAR 0 3
24325: PPUSH
24326: LD_INT 99999
24328: PPUSH
24329: CALL_OW 277
24333: GO 24308
24335: POP
24336: POP
24337: GO 24292
24339: POP
24340: POP
// end ;
24341: LD_VAR 0 1
24345: RET
// export function hHackSetLevel10 ; var i , j ; begin
24346: LD_INT 0
24348: PPUSH
24349: PPUSH
24350: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24351: LD_ADDR_VAR 0 2
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PPUSH
24366: CALL_OW 69
24370: PUSH
24371: FOR_IN
24372: IFFALSE 24424
// if IsSelected ( i ) then
24374: LD_VAR 0 2
24378: PPUSH
24379: CALL_OW 306
24383: IFFALSE 24422
// begin for j := 1 to 4 do
24385: LD_ADDR_VAR 0 3
24389: PUSH
24390: DOUBLE
24391: LD_INT 1
24393: DEC
24394: ST_TO_ADDR
24395: LD_INT 4
24397: PUSH
24398: FOR_TO
24399: IFFALSE 24420
// SetSkill ( i , j , 10 ) ;
24401: LD_VAR 0 2
24405: PPUSH
24406: LD_VAR 0 3
24410: PPUSH
24411: LD_INT 10
24413: PPUSH
24414: CALL_OW 237
24418: GO 24398
24420: POP
24421: POP
// end ;
24422: GO 24371
24424: POP
24425: POP
// end ;
24426: LD_VAR 0 1
24430: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24431: LD_INT 0
24433: PPUSH
24434: PPUSH
24435: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24436: LD_ADDR_VAR 0 2
24440: PUSH
24441: LD_INT 22
24443: PUSH
24444: LD_OWVAR 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 21
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PPUSH
24467: CALL_OW 69
24471: PUSH
24472: FOR_IN
24473: IFFALSE 24514
// begin for j := 1 to 4 do
24475: LD_ADDR_VAR 0 3
24479: PUSH
24480: DOUBLE
24481: LD_INT 1
24483: DEC
24484: ST_TO_ADDR
24485: LD_INT 4
24487: PUSH
24488: FOR_TO
24489: IFFALSE 24510
// SetSkill ( i , j , 10 ) ;
24491: LD_VAR 0 2
24495: PPUSH
24496: LD_VAR 0 3
24500: PPUSH
24501: LD_INT 10
24503: PPUSH
24504: CALL_OW 237
24508: GO 24488
24510: POP
24511: POP
// end ;
24512: GO 24472
24514: POP
24515: POP
// end ;
24516: LD_VAR 0 1
24520: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24521: LD_INT 0
24523: PPUSH
// uc_side := your_side ;
24524: LD_ADDR_OWVAR 20
24528: PUSH
24529: LD_OWVAR 2
24533: ST_TO_ADDR
// uc_nation := nation ;
24534: LD_ADDR_OWVAR 21
24538: PUSH
24539: LD_VAR 0 1
24543: ST_TO_ADDR
// InitHc ;
24544: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24548: LD_INT 0
24550: PPUSH
24551: LD_VAR 0 2
24555: PPUSH
24556: LD_VAR 0 3
24560: PPUSH
24561: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24565: LD_VAR 0 4
24569: PPUSH
24570: LD_VAR 0 5
24574: PPUSH
24575: CALL_OW 428
24579: PUSH
24580: LD_INT 0
24582: EQUAL
24583: IFFALSE 24607
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24585: CALL_OW 44
24589: PPUSH
24590: LD_VAR 0 4
24594: PPUSH
24595: LD_VAR 0 5
24599: PPUSH
24600: LD_INT 1
24602: PPUSH
24603: CALL_OW 48
// end ;
24607: LD_VAR 0 6
24611: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24612: LD_INT 0
24614: PPUSH
24615: PPUSH
// uc_side := your_side ;
24616: LD_ADDR_OWVAR 20
24620: PUSH
24621: LD_OWVAR 2
24625: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24626: LD_VAR 0 1
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 3
24639: PUSH
24640: LD_INT 4
24642: PUSH
24643: LD_INT 5
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: IN
24653: IFFALSE 24665
// uc_nation := nation_american else
24655: LD_ADDR_OWVAR 21
24659: PUSH
24660: LD_INT 1
24662: ST_TO_ADDR
24663: GO 24708
// if chassis in [ 11 , 12 , 13 , 14 ] then
24665: LD_VAR 0 1
24669: PUSH
24670: LD_INT 11
24672: PUSH
24673: LD_INT 12
24675: PUSH
24676: LD_INT 13
24678: PUSH
24679: LD_INT 14
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: IN
24688: IFFALSE 24700
// uc_nation := nation_arabian else
24690: LD_ADDR_OWVAR 21
24694: PUSH
24695: LD_INT 2
24697: ST_TO_ADDR
24698: GO 24708
// uc_nation := nation_russian ;
24700: LD_ADDR_OWVAR 21
24704: PUSH
24705: LD_INT 3
24707: ST_TO_ADDR
// vc_chassis := chassis ;
24708: LD_ADDR_OWVAR 37
24712: PUSH
24713: LD_VAR 0 1
24717: ST_TO_ADDR
// vc_engine := engine ;
24718: LD_ADDR_OWVAR 39
24722: PUSH
24723: LD_VAR 0 2
24727: ST_TO_ADDR
// vc_control := control ;
24728: LD_ADDR_OWVAR 38
24732: PUSH
24733: LD_VAR 0 3
24737: ST_TO_ADDR
// vc_weapon := weapon ;
24738: LD_ADDR_OWVAR 40
24742: PUSH
24743: LD_VAR 0 4
24747: ST_TO_ADDR
// un := CreateVehicle ;
24748: LD_ADDR_VAR 0 8
24752: PUSH
24753: CALL_OW 45
24757: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24758: LD_VAR 0 8
24762: PPUSH
24763: LD_INT 0
24765: PPUSH
24766: LD_INT 5
24768: PPUSH
24769: CALL_OW 12
24773: PPUSH
24774: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24778: LD_VAR 0 8
24782: PPUSH
24783: LD_VAR 0 5
24787: PPUSH
24788: LD_VAR 0 6
24792: PPUSH
24793: LD_INT 1
24795: PPUSH
24796: CALL_OW 48
// end ;
24800: LD_VAR 0 7
24804: RET
// export hInvincible ; every 1 do
24805: GO 24807
24807: DISABLE
// hInvincible := [ ] ;
24808: LD_ADDR_EXP 91
24812: PUSH
24813: EMPTY
24814: ST_TO_ADDR
24815: END
// every 10 do var i ;
24816: GO 24818
24818: DISABLE
24819: LD_INT 0
24821: PPUSH
// begin enable ;
24822: ENABLE
// if not hInvincible then
24823: LD_EXP 91
24827: NOT
24828: IFFALSE 24832
// exit ;
24830: GO 24876
// for i in hInvincible do
24832: LD_ADDR_VAR 0 1
24836: PUSH
24837: LD_EXP 91
24841: PUSH
24842: FOR_IN
24843: IFFALSE 24874
// if GetLives ( i ) < 1000 then
24845: LD_VAR 0 1
24849: PPUSH
24850: CALL_OW 256
24854: PUSH
24855: LD_INT 1000
24857: LESS
24858: IFFALSE 24872
// SetLives ( i , 1000 ) ;
24860: LD_VAR 0 1
24864: PPUSH
24865: LD_INT 1000
24867: PPUSH
24868: CALL_OW 234
24872: GO 24842
24874: POP
24875: POP
// end ;
24876: PPOPN 1
24878: END
// export function hHackInvincible ; var i ; begin
24879: LD_INT 0
24881: PPUSH
24882: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24883: LD_ADDR_VAR 0 2
24887: PUSH
24888: LD_INT 2
24890: PUSH
24891: LD_INT 21
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 21
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: LIST
24915: PPUSH
24916: CALL_OW 69
24920: PUSH
24921: FOR_IN
24922: IFFALSE 24983
// if IsSelected ( i ) then
24924: LD_VAR 0 2
24928: PPUSH
24929: CALL_OW 306
24933: IFFALSE 24981
// begin if i in hInvincible then
24935: LD_VAR 0 2
24939: PUSH
24940: LD_EXP 91
24944: IN
24945: IFFALSE 24965
// hInvincible := hInvincible diff i else
24947: LD_ADDR_EXP 91
24951: PUSH
24952: LD_EXP 91
24956: PUSH
24957: LD_VAR 0 2
24961: DIFF
24962: ST_TO_ADDR
24963: GO 24981
// hInvincible := hInvincible union i ;
24965: LD_ADDR_EXP 91
24969: PUSH
24970: LD_EXP 91
24974: PUSH
24975: LD_VAR 0 2
24979: UNION
24980: ST_TO_ADDR
// end ;
24981: GO 24921
24983: POP
24984: POP
// end ;
24985: LD_VAR 0 1
24989: RET
// export function hHackInvisible ; var i , j ; begin
24990: LD_INT 0
24992: PPUSH
24993: PPUSH
24994: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24995: LD_ADDR_VAR 0 2
24999: PUSH
25000: LD_INT 21
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PPUSH
25010: CALL_OW 69
25014: PUSH
25015: FOR_IN
25016: IFFALSE 25040
// if IsSelected ( i ) then
25018: LD_VAR 0 2
25022: PPUSH
25023: CALL_OW 306
25027: IFFALSE 25038
// ComForceInvisible ( i ) ;
25029: LD_VAR 0 2
25033: PPUSH
25034: CALL_OW 496
25038: GO 25015
25040: POP
25041: POP
// end ;
25042: LD_VAR 0 1
25046: RET
// export function hHackChangeYourSide ; begin
25047: LD_INT 0
25049: PPUSH
// if your_side = 8 then
25050: LD_OWVAR 2
25054: PUSH
25055: LD_INT 8
25057: EQUAL
25058: IFFALSE 25070
// your_side := 0 else
25060: LD_ADDR_OWVAR 2
25064: PUSH
25065: LD_INT 0
25067: ST_TO_ADDR
25068: GO 25084
// your_side := your_side + 1 ;
25070: LD_ADDR_OWVAR 2
25074: PUSH
25075: LD_OWVAR 2
25079: PUSH
25080: LD_INT 1
25082: PLUS
25083: ST_TO_ADDR
// end ;
25084: LD_VAR 0 1
25088: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25089: LD_INT 0
25091: PPUSH
25092: PPUSH
25093: PPUSH
// for i in all_units do
25094: LD_ADDR_VAR 0 2
25098: PUSH
25099: LD_OWVAR 3
25103: PUSH
25104: FOR_IN
25105: IFFALSE 25183
// if IsSelected ( i ) then
25107: LD_VAR 0 2
25111: PPUSH
25112: CALL_OW 306
25116: IFFALSE 25181
// begin j := GetSide ( i ) ;
25118: LD_ADDR_VAR 0 3
25122: PUSH
25123: LD_VAR 0 2
25127: PPUSH
25128: CALL_OW 255
25132: ST_TO_ADDR
// if j = 8 then
25133: LD_VAR 0 3
25137: PUSH
25138: LD_INT 8
25140: EQUAL
25141: IFFALSE 25153
// j := 0 else
25143: LD_ADDR_VAR 0 3
25147: PUSH
25148: LD_INT 0
25150: ST_TO_ADDR
25151: GO 25167
// j := j + 1 ;
25153: LD_ADDR_VAR 0 3
25157: PUSH
25158: LD_VAR 0 3
25162: PUSH
25163: LD_INT 1
25165: PLUS
25166: ST_TO_ADDR
// SetSide ( i , j ) ;
25167: LD_VAR 0 2
25171: PPUSH
25172: LD_VAR 0 3
25176: PPUSH
25177: CALL_OW 235
// end ;
25181: GO 25104
25183: POP
25184: POP
// end ;
25185: LD_VAR 0 1
25189: RET
// export function hHackFog ; begin
25190: LD_INT 0
25192: PPUSH
// FogOff ( true ) ;
25193: LD_INT 1
25195: PPUSH
25196: CALL_OW 344
// end ;
25200: LD_VAR 0 1
25204: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25205: LD_INT 0
25207: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25208: LD_VAR 0 1
25212: PPUSH
25213: LD_VAR 0 2
25217: PPUSH
25218: LD_VAR 0 3
25222: PPUSH
25223: LD_INT 1
25225: PPUSH
25226: LD_INT 1
25228: PPUSH
25229: CALL_OW 483
// CenterOnXY ( x , y ) ;
25233: LD_VAR 0 2
25237: PPUSH
25238: LD_VAR 0 3
25242: PPUSH
25243: CALL_OW 84
// end ; end_of_file
25247: LD_VAR 0 4
25251: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25252: LD_INT 0
25254: PPUSH
25255: PPUSH
25256: PPUSH
25257: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25258: LD_VAR 0 1
25262: PPUSH
25263: CALL_OW 264
25267: PUSH
25268: LD_EXP 25
25272: EQUAL
25273: IFFALSE 25345
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25275: LD_INT 68
25277: PPUSH
25278: LD_VAR 0 1
25282: PPUSH
25283: CALL_OW 255
25287: PPUSH
25288: CALL_OW 321
25292: PUSH
25293: LD_INT 2
25295: EQUAL
25296: IFFALSE 25308
// eff := 70 else
25298: LD_ADDR_VAR 0 4
25302: PUSH
25303: LD_INT 70
25305: ST_TO_ADDR
25306: GO 25316
// eff := 30 ;
25308: LD_ADDR_VAR 0 4
25312: PUSH
25313: LD_INT 30
25315: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25316: LD_VAR 0 1
25320: PPUSH
25321: CALL_OW 250
25325: PPUSH
25326: LD_VAR 0 1
25330: PPUSH
25331: CALL_OW 251
25335: PPUSH
25336: LD_VAR 0 4
25340: PPUSH
25341: CALL_OW 495
// end ; end ;
25345: LD_VAR 0 2
25349: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25350: LD_INT 0
25352: PPUSH
// end ;
25353: LD_VAR 0 4
25357: RET
// export function SOS_Command ( cmd ) ; begin
25358: LD_INT 0
25360: PPUSH
// end ;
25361: LD_VAR 0 2
25365: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25366: LD_INT 0
25368: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25369: LD_VAR 0 1
25373: PUSH
25374: LD_INT 250
25376: EQUAL
25377: PUSH
25378: LD_VAR 0 2
25382: PPUSH
25383: CALL_OW 264
25387: PUSH
25388: LD_EXP 28
25392: EQUAL
25393: AND
25394: IFFALSE 25415
// MinerPlaceMine ( unit , x , y ) ;
25396: LD_VAR 0 2
25400: PPUSH
25401: LD_VAR 0 4
25405: PPUSH
25406: LD_VAR 0 5
25410: PPUSH
25411: CALL 27756 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25415: LD_VAR 0 1
25419: PUSH
25420: LD_INT 251
25422: EQUAL
25423: PUSH
25424: LD_VAR 0 2
25428: PPUSH
25429: CALL_OW 264
25433: PUSH
25434: LD_EXP 28
25438: EQUAL
25439: AND
25440: IFFALSE 25461
// MinerDetonateMine ( unit , x , y ) ;
25442: LD_VAR 0 2
25446: PPUSH
25447: LD_VAR 0 4
25451: PPUSH
25452: LD_VAR 0 5
25456: PPUSH
25457: CALL 28033 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25461: LD_VAR 0 1
25465: PUSH
25466: LD_INT 252
25468: EQUAL
25469: PUSH
25470: LD_VAR 0 2
25474: PPUSH
25475: CALL_OW 264
25479: PUSH
25480: LD_EXP 28
25484: EQUAL
25485: AND
25486: IFFALSE 25507
// MinerCreateMinefield ( unit , x , y ) ;
25488: LD_VAR 0 2
25492: PPUSH
25493: LD_VAR 0 4
25497: PPUSH
25498: LD_VAR 0 5
25502: PPUSH
25503: CALL 28450 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25507: LD_VAR 0 1
25511: PUSH
25512: LD_INT 253
25514: EQUAL
25515: PUSH
25516: LD_VAR 0 2
25520: PPUSH
25521: CALL_OW 257
25525: PUSH
25526: LD_INT 5
25528: EQUAL
25529: AND
25530: IFFALSE 25551
// ComBinocular ( unit , x , y ) ;
25532: LD_VAR 0 2
25536: PPUSH
25537: LD_VAR 0 4
25541: PPUSH
25542: LD_VAR 0 5
25546: PPUSH
25547: CALL 28821 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25551: LD_VAR 0 1
25555: PUSH
25556: LD_INT 254
25558: EQUAL
25559: PUSH
25560: LD_VAR 0 2
25564: PPUSH
25565: CALL_OW 264
25569: PUSH
25570: LD_EXP 23
25574: EQUAL
25575: AND
25576: PUSH
25577: LD_VAR 0 3
25581: PPUSH
25582: CALL_OW 263
25586: PUSH
25587: LD_INT 3
25589: EQUAL
25590: AND
25591: IFFALSE 25607
// HackDestroyVehicle ( unit , selectedUnit ) ;
25593: LD_VAR 0 2
25597: PPUSH
25598: LD_VAR 0 3
25602: PPUSH
25603: CALL 27116 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25607: LD_VAR 0 1
25611: PUSH
25612: LD_INT 255
25614: EQUAL
25615: PUSH
25616: LD_VAR 0 2
25620: PPUSH
25621: CALL_OW 264
25625: PUSH
25626: LD_INT 14
25628: PUSH
25629: LD_INT 53
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: IN
25636: AND
25637: PUSH
25638: LD_VAR 0 4
25642: PPUSH
25643: LD_VAR 0 5
25647: PPUSH
25648: CALL_OW 488
25652: AND
25653: IFFALSE 25677
// CutTreeXYR ( unit , x , y , 12 ) ;
25655: LD_VAR 0 2
25659: PPUSH
25660: LD_VAR 0 4
25664: PPUSH
25665: LD_VAR 0 5
25669: PPUSH
25670: LD_INT 12
25672: PPUSH
25673: CALL 25682 0 4
// end ;
25677: LD_VAR 0 6
25681: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25682: LD_INT 0
25684: PPUSH
25685: PPUSH
25686: PPUSH
25687: PPUSH
25688: PPUSH
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25693: LD_VAR 0 1
25697: NOT
25698: PUSH
25699: LD_VAR 0 2
25703: PPUSH
25704: LD_VAR 0 3
25708: PPUSH
25709: CALL_OW 488
25713: NOT
25714: OR
25715: PUSH
25716: LD_VAR 0 4
25720: NOT
25721: OR
25722: IFFALSE 25726
// exit ;
25724: GO 26066
// list := [ ] ;
25726: LD_ADDR_VAR 0 13
25730: PUSH
25731: EMPTY
25732: ST_TO_ADDR
// if x - r < 0 then
25733: LD_VAR 0 2
25737: PUSH
25738: LD_VAR 0 4
25742: MINUS
25743: PUSH
25744: LD_INT 0
25746: LESS
25747: IFFALSE 25759
// min_x := 0 else
25749: LD_ADDR_VAR 0 7
25753: PUSH
25754: LD_INT 0
25756: ST_TO_ADDR
25757: GO 25775
// min_x := x - r ;
25759: LD_ADDR_VAR 0 7
25763: PUSH
25764: LD_VAR 0 2
25768: PUSH
25769: LD_VAR 0 4
25773: MINUS
25774: ST_TO_ADDR
// if y - r < 0 then
25775: LD_VAR 0 3
25779: PUSH
25780: LD_VAR 0 4
25784: MINUS
25785: PUSH
25786: LD_INT 0
25788: LESS
25789: IFFALSE 25801
// min_y := 0 else
25791: LD_ADDR_VAR 0 8
25795: PUSH
25796: LD_INT 0
25798: ST_TO_ADDR
25799: GO 25817
// min_y := y - r ;
25801: LD_ADDR_VAR 0 8
25805: PUSH
25806: LD_VAR 0 3
25810: PUSH
25811: LD_VAR 0 4
25815: MINUS
25816: ST_TO_ADDR
// max_x := x + r ;
25817: LD_ADDR_VAR 0 9
25821: PUSH
25822: LD_VAR 0 2
25826: PUSH
25827: LD_VAR 0 4
25831: PLUS
25832: ST_TO_ADDR
// max_y := y + r ;
25833: LD_ADDR_VAR 0 10
25837: PUSH
25838: LD_VAR 0 3
25842: PUSH
25843: LD_VAR 0 4
25847: PLUS
25848: ST_TO_ADDR
// for _x = min_x to max_x do
25849: LD_ADDR_VAR 0 11
25853: PUSH
25854: DOUBLE
25855: LD_VAR 0 7
25859: DEC
25860: ST_TO_ADDR
25861: LD_VAR 0 9
25865: PUSH
25866: FOR_TO
25867: IFFALSE 25984
// for _y = min_y to max_y do
25869: LD_ADDR_VAR 0 12
25873: PUSH
25874: DOUBLE
25875: LD_VAR 0 8
25879: DEC
25880: ST_TO_ADDR
25881: LD_VAR 0 10
25885: PUSH
25886: FOR_TO
25887: IFFALSE 25980
// begin if not ValidHex ( _x , _y ) then
25889: LD_VAR 0 11
25893: PPUSH
25894: LD_VAR 0 12
25898: PPUSH
25899: CALL_OW 488
25903: NOT
25904: IFFALSE 25908
// continue ;
25906: GO 25886
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25908: LD_VAR 0 11
25912: PPUSH
25913: LD_VAR 0 12
25917: PPUSH
25918: CALL_OW 351
25922: PUSH
25923: LD_VAR 0 11
25927: PPUSH
25928: LD_VAR 0 12
25932: PPUSH
25933: CALL_OW 554
25937: AND
25938: IFFALSE 25978
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25940: LD_ADDR_VAR 0 13
25944: PUSH
25945: LD_VAR 0 13
25949: PPUSH
25950: LD_VAR 0 13
25954: PUSH
25955: LD_INT 1
25957: PLUS
25958: PPUSH
25959: LD_VAR 0 11
25963: PUSH
25964: LD_VAR 0 12
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PPUSH
25973: CALL_OW 2
25977: ST_TO_ADDR
// end ;
25978: GO 25886
25980: POP
25981: POP
25982: GO 25866
25984: POP
25985: POP
// if not list then
25986: LD_VAR 0 13
25990: NOT
25991: IFFALSE 25995
// exit ;
25993: GO 26066
// for i in list do
25995: LD_ADDR_VAR 0 6
25999: PUSH
26000: LD_VAR 0 13
26004: PUSH
26005: FOR_IN
26006: IFFALSE 26064
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26008: LD_VAR 0 1
26012: PPUSH
26013: LD_STRING M
26015: PUSH
26016: LD_VAR 0 6
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: PUSH
26025: LD_VAR 0 6
26029: PUSH
26030: LD_INT 2
26032: ARRAY
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: PPUSH
26058: CALL_OW 447
26062: GO 26005
26064: POP
26065: POP
// end ;
26066: LD_VAR 0 5
26070: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26071: LD_EXP 92
26075: NOT
26076: IFFALSE 26126
26078: GO 26080
26080: DISABLE
// begin initHack := true ;
26081: LD_ADDR_EXP 92
26085: PUSH
26086: LD_INT 1
26088: ST_TO_ADDR
// hackTanks := [ ] ;
26089: LD_ADDR_EXP 93
26093: PUSH
26094: EMPTY
26095: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26096: LD_ADDR_EXP 94
26100: PUSH
26101: EMPTY
26102: ST_TO_ADDR
// hackLimit := 3 ;
26103: LD_ADDR_EXP 95
26107: PUSH
26108: LD_INT 3
26110: ST_TO_ADDR
// hackDist := 12 ;
26111: LD_ADDR_EXP 96
26115: PUSH
26116: LD_INT 12
26118: ST_TO_ADDR
// hackCounter := [ ] ;
26119: LD_ADDR_EXP 97
26123: PUSH
26124: EMPTY
26125: ST_TO_ADDR
// end ;
26126: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26127: LD_EXP 92
26131: PUSH
26132: LD_INT 34
26134: PUSH
26135: LD_EXP 23
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PPUSH
26144: CALL_OW 69
26148: AND
26149: IFFALSE 26404
26151: GO 26153
26153: DISABLE
26154: LD_INT 0
26156: PPUSH
26157: PPUSH
// begin enable ;
26158: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26159: LD_ADDR_VAR 0 1
26163: PUSH
26164: LD_INT 34
26166: PUSH
26167: LD_EXP 23
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PPUSH
26176: CALL_OW 69
26180: PUSH
26181: FOR_IN
26182: IFFALSE 26402
// begin if not i in hackTanks then
26184: LD_VAR 0 1
26188: PUSH
26189: LD_EXP 93
26193: IN
26194: NOT
26195: IFFALSE 26278
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26197: LD_ADDR_EXP 93
26201: PUSH
26202: LD_EXP 93
26206: PPUSH
26207: LD_EXP 93
26211: PUSH
26212: LD_INT 1
26214: PLUS
26215: PPUSH
26216: LD_VAR 0 1
26220: PPUSH
26221: CALL_OW 1
26225: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26226: LD_ADDR_EXP 94
26230: PUSH
26231: LD_EXP 94
26235: PPUSH
26236: LD_EXP 94
26240: PUSH
26241: LD_INT 1
26243: PLUS
26244: PPUSH
26245: EMPTY
26246: PPUSH
26247: CALL_OW 1
26251: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26252: LD_ADDR_EXP 97
26256: PUSH
26257: LD_EXP 97
26261: PPUSH
26262: LD_EXP 97
26266: PUSH
26267: LD_INT 1
26269: PLUS
26270: PPUSH
26271: EMPTY
26272: PPUSH
26273: CALL_OW 1
26277: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26278: LD_VAR 0 1
26282: PPUSH
26283: CALL_OW 302
26287: NOT
26288: IFFALSE 26301
// begin HackUnlinkAll ( i ) ;
26290: LD_VAR 0 1
26294: PPUSH
26295: CALL 26407 0 1
// continue ;
26299: GO 26181
// end ; HackCheckCapturedStatus ( i ) ;
26301: LD_VAR 0 1
26305: PPUSH
26306: CALL 26850 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26310: LD_ADDR_VAR 0 2
26314: PUSH
26315: LD_INT 81
26317: PUSH
26318: LD_VAR 0 1
26322: PPUSH
26323: CALL_OW 255
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 33
26334: PUSH
26335: LD_INT 3
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 91
26344: PUSH
26345: LD_VAR 0 1
26349: PUSH
26350: LD_EXP 96
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 50
26362: PUSH
26363: EMPTY
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: PPUSH
26372: CALL_OW 69
26376: ST_TO_ADDR
// if not tmp then
26377: LD_VAR 0 2
26381: NOT
26382: IFFALSE 26386
// continue ;
26384: GO 26181
// HackLink ( i , tmp ) ;
26386: LD_VAR 0 1
26390: PPUSH
26391: LD_VAR 0 2
26395: PPUSH
26396: CALL 26543 0 2
// end ;
26400: GO 26181
26402: POP
26403: POP
// end ;
26404: PPOPN 2
26406: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26407: LD_INT 0
26409: PPUSH
26410: PPUSH
26411: PPUSH
// if not hack in hackTanks then
26412: LD_VAR 0 1
26416: PUSH
26417: LD_EXP 93
26421: IN
26422: NOT
26423: IFFALSE 26427
// exit ;
26425: GO 26538
// index := GetElementIndex ( hackTanks , hack ) ;
26427: LD_ADDR_VAR 0 4
26431: PUSH
26432: LD_EXP 93
26436: PPUSH
26437: LD_VAR 0 1
26441: PPUSH
26442: CALL 33972 0 2
26446: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26447: LD_EXP 94
26451: PUSH
26452: LD_VAR 0 4
26456: ARRAY
26457: IFFALSE 26538
// begin for i in hackTanksCaptured [ index ] do
26459: LD_ADDR_VAR 0 3
26463: PUSH
26464: LD_EXP 94
26468: PUSH
26469: LD_VAR 0 4
26473: ARRAY
26474: PUSH
26475: FOR_IN
26476: IFFALSE 26502
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26478: LD_VAR 0 3
26482: PUSH
26483: LD_INT 1
26485: ARRAY
26486: PPUSH
26487: LD_VAR 0 3
26491: PUSH
26492: LD_INT 2
26494: ARRAY
26495: PPUSH
26496: CALL_OW 235
26500: GO 26475
26502: POP
26503: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26504: LD_ADDR_EXP 94
26508: PUSH
26509: LD_EXP 94
26513: PPUSH
26514: LD_VAR 0 4
26518: PPUSH
26519: EMPTY
26520: PPUSH
26521: CALL_OW 1
26525: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26526: LD_VAR 0 1
26530: PPUSH
26531: LD_INT 0
26533: PPUSH
26534: CALL_OW 505
// end ; end ;
26538: LD_VAR 0 2
26542: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26543: LD_INT 0
26545: PPUSH
26546: PPUSH
26547: PPUSH
// if not hack in hackTanks or not vehicles then
26548: LD_VAR 0 1
26552: PUSH
26553: LD_EXP 93
26557: IN
26558: NOT
26559: PUSH
26560: LD_VAR 0 2
26564: NOT
26565: OR
26566: IFFALSE 26570
// exit ;
26568: GO 26845
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26570: LD_ADDR_VAR 0 2
26574: PUSH
26575: LD_VAR 0 1
26579: PPUSH
26580: LD_VAR 0 2
26584: PPUSH
26585: LD_INT 1
26587: PPUSH
26588: LD_INT 1
26590: PPUSH
26591: CALL 34622 0 4
26595: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26596: LD_ADDR_VAR 0 5
26600: PUSH
26601: LD_EXP 93
26605: PPUSH
26606: LD_VAR 0 1
26610: PPUSH
26611: CALL 33972 0 2
26615: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26616: LD_EXP 94
26620: PUSH
26621: LD_VAR 0 5
26625: ARRAY
26626: PUSH
26627: LD_EXP 95
26631: LESS
26632: IFFALSE 26821
// begin for i := 1 to vehicles do
26634: LD_ADDR_VAR 0 4
26638: PUSH
26639: DOUBLE
26640: LD_INT 1
26642: DEC
26643: ST_TO_ADDR
26644: LD_VAR 0 2
26648: PUSH
26649: FOR_TO
26650: IFFALSE 26819
// begin if hackTanksCaptured [ index ] = hackLimit then
26652: LD_EXP 94
26656: PUSH
26657: LD_VAR 0 5
26661: ARRAY
26662: PUSH
26663: LD_EXP 95
26667: EQUAL
26668: IFFALSE 26672
// break ;
26670: GO 26819
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26672: LD_ADDR_EXP 97
26676: PUSH
26677: LD_EXP 97
26681: PPUSH
26682: LD_VAR 0 5
26686: PPUSH
26687: LD_EXP 97
26691: PUSH
26692: LD_VAR 0 5
26696: ARRAY
26697: PUSH
26698: LD_INT 1
26700: PLUS
26701: PPUSH
26702: CALL_OW 1
26706: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26707: LD_ADDR_EXP 94
26711: PUSH
26712: LD_EXP 94
26716: PPUSH
26717: LD_VAR 0 5
26721: PUSH
26722: LD_EXP 94
26726: PUSH
26727: LD_VAR 0 5
26731: ARRAY
26732: PUSH
26733: LD_INT 1
26735: PLUS
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PPUSH
26741: LD_VAR 0 2
26745: PUSH
26746: LD_VAR 0 4
26750: ARRAY
26751: PUSH
26752: LD_VAR 0 2
26756: PUSH
26757: LD_VAR 0 4
26761: ARRAY
26762: PPUSH
26763: CALL_OW 255
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PPUSH
26772: CALL 34187 0 3
26776: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26777: LD_VAR 0 2
26781: PUSH
26782: LD_VAR 0 4
26786: ARRAY
26787: PPUSH
26788: LD_VAR 0 1
26792: PPUSH
26793: CALL_OW 255
26797: PPUSH
26798: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26802: LD_VAR 0 2
26806: PUSH
26807: LD_VAR 0 4
26811: ARRAY
26812: PPUSH
26813: CALL_OW 141
// end ;
26817: GO 26649
26819: POP
26820: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26821: LD_VAR 0 1
26825: PPUSH
26826: LD_EXP 94
26830: PUSH
26831: LD_VAR 0 5
26835: ARRAY
26836: PUSH
26837: LD_INT 0
26839: PLUS
26840: PPUSH
26841: CALL_OW 505
// end ;
26845: LD_VAR 0 3
26849: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26850: LD_INT 0
26852: PPUSH
26853: PPUSH
26854: PPUSH
26855: PPUSH
// if not hack in hackTanks then
26856: LD_VAR 0 1
26860: PUSH
26861: LD_EXP 93
26865: IN
26866: NOT
26867: IFFALSE 26871
// exit ;
26869: GO 27111
// index := GetElementIndex ( hackTanks , hack ) ;
26871: LD_ADDR_VAR 0 4
26875: PUSH
26876: LD_EXP 93
26880: PPUSH
26881: LD_VAR 0 1
26885: PPUSH
26886: CALL 33972 0 2
26890: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26891: LD_ADDR_VAR 0 3
26895: PUSH
26896: DOUBLE
26897: LD_EXP 94
26901: PUSH
26902: LD_VAR 0 4
26906: ARRAY
26907: INC
26908: ST_TO_ADDR
26909: LD_INT 1
26911: PUSH
26912: FOR_DOWNTO
26913: IFFALSE 27085
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26915: LD_ADDR_VAR 0 5
26919: PUSH
26920: LD_EXP 94
26924: PUSH
26925: LD_VAR 0 4
26929: ARRAY
26930: PUSH
26931: LD_VAR 0 3
26935: ARRAY
26936: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26937: LD_VAR 0 5
26941: PUSH
26942: LD_INT 1
26944: ARRAY
26945: PPUSH
26946: CALL_OW 302
26950: NOT
26951: PUSH
26952: LD_VAR 0 5
26956: PUSH
26957: LD_INT 1
26959: ARRAY
26960: PPUSH
26961: CALL_OW 255
26965: PUSH
26966: LD_VAR 0 1
26970: PPUSH
26971: CALL_OW 255
26975: NONEQUAL
26976: OR
26977: IFFALSE 27083
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26979: LD_VAR 0 5
26983: PUSH
26984: LD_INT 1
26986: ARRAY
26987: PPUSH
26988: CALL_OW 305
26992: PUSH
26993: LD_VAR 0 5
26997: PUSH
26998: LD_INT 1
27000: ARRAY
27001: PPUSH
27002: CALL_OW 255
27006: PUSH
27007: LD_VAR 0 1
27011: PPUSH
27012: CALL_OW 255
27016: EQUAL
27017: AND
27018: IFFALSE 27042
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27020: LD_VAR 0 5
27024: PUSH
27025: LD_INT 1
27027: ARRAY
27028: PPUSH
27029: LD_VAR 0 5
27033: PUSH
27034: LD_INT 2
27036: ARRAY
27037: PPUSH
27038: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27042: LD_ADDR_EXP 94
27046: PUSH
27047: LD_EXP 94
27051: PPUSH
27052: LD_VAR 0 4
27056: PPUSH
27057: LD_EXP 94
27061: PUSH
27062: LD_VAR 0 4
27066: ARRAY
27067: PPUSH
27068: LD_VAR 0 3
27072: PPUSH
27073: CALL_OW 3
27077: PPUSH
27078: CALL_OW 1
27082: ST_TO_ADDR
// end ; end ;
27083: GO 26912
27085: POP
27086: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27087: LD_VAR 0 1
27091: PPUSH
27092: LD_EXP 94
27096: PUSH
27097: LD_VAR 0 4
27101: ARRAY
27102: PUSH
27103: LD_INT 0
27105: PLUS
27106: PPUSH
27107: CALL_OW 505
// end ;
27111: LD_VAR 0 2
27115: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27116: LD_INT 0
27118: PPUSH
27119: PPUSH
27120: PPUSH
27121: PPUSH
// if not hack in hackTanks then
27122: LD_VAR 0 1
27126: PUSH
27127: LD_EXP 93
27131: IN
27132: NOT
27133: IFFALSE 27137
// exit ;
27135: GO 27222
// index := GetElementIndex ( hackTanks , hack ) ;
27137: LD_ADDR_VAR 0 5
27141: PUSH
27142: LD_EXP 93
27146: PPUSH
27147: LD_VAR 0 1
27151: PPUSH
27152: CALL 33972 0 2
27156: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27157: LD_ADDR_VAR 0 4
27161: PUSH
27162: DOUBLE
27163: LD_INT 1
27165: DEC
27166: ST_TO_ADDR
27167: LD_EXP 94
27171: PUSH
27172: LD_VAR 0 5
27176: ARRAY
27177: PUSH
27178: FOR_TO
27179: IFFALSE 27220
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27181: LD_EXP 94
27185: PUSH
27186: LD_VAR 0 5
27190: ARRAY
27191: PUSH
27192: LD_VAR 0 4
27196: ARRAY
27197: PUSH
27198: LD_INT 1
27200: ARRAY
27201: PUSH
27202: LD_VAR 0 2
27206: EQUAL
27207: IFFALSE 27218
// KillUnit ( vehicle ) ;
27209: LD_VAR 0 2
27213: PPUSH
27214: CALL_OW 66
27218: GO 27178
27220: POP
27221: POP
// end ;
27222: LD_VAR 0 3
27226: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27227: LD_EXP 98
27231: NOT
27232: IFFALSE 27267
27234: GO 27236
27236: DISABLE
// begin initMiner := true ;
27237: LD_ADDR_EXP 98
27241: PUSH
27242: LD_INT 1
27244: ST_TO_ADDR
// minersList := [ ] ;
27245: LD_ADDR_EXP 99
27249: PUSH
27250: EMPTY
27251: ST_TO_ADDR
// minerMinesList := [ ] ;
27252: LD_ADDR_EXP 100
27256: PUSH
27257: EMPTY
27258: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27259: LD_ADDR_EXP 101
27263: PUSH
27264: LD_INT 5
27266: ST_TO_ADDR
// end ;
27267: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27268: LD_EXP 98
27272: PUSH
27273: LD_INT 34
27275: PUSH
27276: LD_EXP 28
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PPUSH
27285: CALL_OW 69
27289: AND
27290: IFFALSE 27753
27292: GO 27294
27294: DISABLE
27295: LD_INT 0
27297: PPUSH
27298: PPUSH
27299: PPUSH
27300: PPUSH
// begin enable ;
27301: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27302: LD_ADDR_VAR 0 1
27306: PUSH
27307: LD_INT 34
27309: PUSH
27310: LD_EXP 28
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PPUSH
27319: CALL_OW 69
27323: PUSH
27324: FOR_IN
27325: IFFALSE 27397
// begin if not i in minersList then
27327: LD_VAR 0 1
27331: PUSH
27332: LD_EXP 99
27336: IN
27337: NOT
27338: IFFALSE 27395
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27340: LD_ADDR_EXP 99
27344: PUSH
27345: LD_EXP 99
27349: PPUSH
27350: LD_EXP 99
27354: PUSH
27355: LD_INT 1
27357: PLUS
27358: PPUSH
27359: LD_VAR 0 1
27363: PPUSH
27364: CALL_OW 1
27368: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27369: LD_ADDR_EXP 100
27373: PUSH
27374: LD_EXP 100
27378: PPUSH
27379: LD_EXP 100
27383: PUSH
27384: LD_INT 1
27386: PLUS
27387: PPUSH
27388: EMPTY
27389: PPUSH
27390: CALL_OW 1
27394: ST_TO_ADDR
// end end ;
27395: GO 27324
27397: POP
27398: POP
// for i := minerMinesList downto 1 do
27399: LD_ADDR_VAR 0 1
27403: PUSH
27404: DOUBLE
27405: LD_EXP 100
27409: INC
27410: ST_TO_ADDR
27411: LD_INT 1
27413: PUSH
27414: FOR_DOWNTO
27415: IFFALSE 27751
// begin if IsLive ( minersList [ i ] ) then
27417: LD_EXP 99
27421: PUSH
27422: LD_VAR 0 1
27426: ARRAY
27427: PPUSH
27428: CALL_OW 300
27432: IFFALSE 27460
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27434: LD_EXP 99
27438: PUSH
27439: LD_VAR 0 1
27443: ARRAY
27444: PPUSH
27445: LD_EXP 100
27449: PUSH
27450: LD_VAR 0 1
27454: ARRAY
27455: PPUSH
27456: CALL_OW 505
// if not minerMinesList [ i ] then
27460: LD_EXP 100
27464: PUSH
27465: LD_VAR 0 1
27469: ARRAY
27470: NOT
27471: IFFALSE 27475
// continue ;
27473: GO 27414
// for j := minerMinesList [ i ] downto 1 do
27475: LD_ADDR_VAR 0 2
27479: PUSH
27480: DOUBLE
27481: LD_EXP 100
27485: PUSH
27486: LD_VAR 0 1
27490: ARRAY
27491: INC
27492: ST_TO_ADDR
27493: LD_INT 1
27495: PUSH
27496: FOR_DOWNTO
27497: IFFALSE 27747
// begin side := GetSide ( minersList [ i ] ) ;
27499: LD_ADDR_VAR 0 3
27503: PUSH
27504: LD_EXP 99
27508: PUSH
27509: LD_VAR 0 1
27513: ARRAY
27514: PPUSH
27515: CALL_OW 255
27519: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27520: LD_ADDR_VAR 0 4
27524: PUSH
27525: LD_EXP 100
27529: PUSH
27530: LD_VAR 0 1
27534: ARRAY
27535: PUSH
27536: LD_VAR 0 2
27540: ARRAY
27541: PUSH
27542: LD_INT 1
27544: ARRAY
27545: PPUSH
27546: LD_EXP 100
27550: PUSH
27551: LD_VAR 0 1
27555: ARRAY
27556: PUSH
27557: LD_VAR 0 2
27561: ARRAY
27562: PUSH
27563: LD_INT 2
27565: ARRAY
27566: PPUSH
27567: CALL_OW 428
27571: ST_TO_ADDR
// if not tmp then
27572: LD_VAR 0 4
27576: NOT
27577: IFFALSE 27581
// continue ;
27579: GO 27496
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27581: LD_VAR 0 4
27585: PUSH
27586: LD_INT 81
27588: PUSH
27589: LD_VAR 0 3
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PPUSH
27598: CALL_OW 69
27602: IN
27603: PUSH
27604: LD_EXP 100
27608: PUSH
27609: LD_VAR 0 1
27613: ARRAY
27614: PUSH
27615: LD_VAR 0 2
27619: ARRAY
27620: PUSH
27621: LD_INT 1
27623: ARRAY
27624: PPUSH
27625: LD_EXP 100
27629: PUSH
27630: LD_VAR 0 1
27634: ARRAY
27635: PUSH
27636: LD_VAR 0 2
27640: ARRAY
27641: PUSH
27642: LD_INT 2
27644: ARRAY
27645: PPUSH
27646: CALL_OW 458
27650: AND
27651: IFFALSE 27745
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27653: LD_EXP 100
27657: PUSH
27658: LD_VAR 0 1
27662: ARRAY
27663: PUSH
27664: LD_VAR 0 2
27668: ARRAY
27669: PUSH
27670: LD_INT 1
27672: ARRAY
27673: PPUSH
27674: LD_EXP 100
27678: PUSH
27679: LD_VAR 0 1
27683: ARRAY
27684: PUSH
27685: LD_VAR 0 2
27689: ARRAY
27690: PUSH
27691: LD_INT 2
27693: ARRAY
27694: PPUSH
27695: LD_VAR 0 3
27699: PPUSH
27700: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27704: LD_ADDR_EXP 100
27708: PUSH
27709: LD_EXP 100
27713: PPUSH
27714: LD_VAR 0 1
27718: PPUSH
27719: LD_EXP 100
27723: PUSH
27724: LD_VAR 0 1
27728: ARRAY
27729: PPUSH
27730: LD_VAR 0 2
27734: PPUSH
27735: CALL_OW 3
27739: PPUSH
27740: CALL_OW 1
27744: ST_TO_ADDR
// end ; end ;
27745: GO 27496
27747: POP
27748: POP
// end ;
27749: GO 27414
27751: POP
27752: POP
// end ;
27753: PPOPN 4
27755: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27756: LD_INT 0
27758: PPUSH
27759: PPUSH
// result := false ;
27760: LD_ADDR_VAR 0 4
27764: PUSH
27765: LD_INT 0
27767: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27768: LD_VAR 0 1
27772: PPUSH
27773: CALL_OW 264
27777: PUSH
27778: LD_EXP 28
27782: EQUAL
27783: NOT
27784: IFFALSE 27788
// exit ;
27786: GO 28028
// index := GetElementIndex ( minersList , unit ) ;
27788: LD_ADDR_VAR 0 5
27792: PUSH
27793: LD_EXP 99
27797: PPUSH
27798: LD_VAR 0 1
27802: PPUSH
27803: CALL 33972 0 2
27807: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27808: LD_EXP 100
27812: PUSH
27813: LD_VAR 0 5
27817: ARRAY
27818: PUSH
27819: LD_EXP 101
27823: GREATEREQUAL
27824: IFFALSE 27828
// exit ;
27826: GO 28028
// ComMoveXY ( unit , x , y ) ;
27828: LD_VAR 0 1
27832: PPUSH
27833: LD_VAR 0 2
27837: PPUSH
27838: LD_VAR 0 3
27842: PPUSH
27843: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27847: LD_INT 35
27849: PPUSH
27850: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27854: LD_VAR 0 1
27858: PPUSH
27859: LD_VAR 0 2
27863: PPUSH
27864: LD_VAR 0 3
27868: PPUSH
27869: CALL 64036 0 3
27873: NOT
27874: PUSH
27875: LD_VAR 0 1
27879: PPUSH
27880: CALL_OW 314
27884: AND
27885: IFFALSE 27889
// exit ;
27887: GO 28028
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27889: LD_VAR 0 2
27893: PPUSH
27894: LD_VAR 0 3
27898: PPUSH
27899: CALL_OW 428
27903: PUSH
27904: LD_VAR 0 1
27908: EQUAL
27909: PUSH
27910: LD_VAR 0 1
27914: PPUSH
27915: CALL_OW 314
27919: NOT
27920: AND
27921: IFFALSE 27847
// PlaySoundXY ( x , y , PlantMine ) ;
27923: LD_VAR 0 2
27927: PPUSH
27928: LD_VAR 0 3
27932: PPUSH
27933: LD_STRING PlantMine
27935: PPUSH
27936: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27940: LD_VAR 0 2
27944: PPUSH
27945: LD_VAR 0 3
27949: PPUSH
27950: LD_VAR 0 1
27954: PPUSH
27955: CALL_OW 255
27959: PPUSH
27960: LD_INT 0
27962: PPUSH
27963: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27967: LD_ADDR_EXP 100
27971: PUSH
27972: LD_EXP 100
27976: PPUSH
27977: LD_VAR 0 5
27981: PUSH
27982: LD_EXP 100
27986: PUSH
27987: LD_VAR 0 5
27991: ARRAY
27992: PUSH
27993: LD_INT 1
27995: PLUS
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PPUSH
28001: LD_VAR 0 2
28005: PUSH
28006: LD_VAR 0 3
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PPUSH
28015: CALL 34187 0 3
28019: ST_TO_ADDR
// result := true ;
28020: LD_ADDR_VAR 0 4
28024: PUSH
28025: LD_INT 1
28027: ST_TO_ADDR
// end ;
28028: LD_VAR 0 4
28032: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28033: LD_INT 0
28035: PPUSH
28036: PPUSH
28037: PPUSH
// if not unit in minersList then
28038: LD_VAR 0 1
28042: PUSH
28043: LD_EXP 99
28047: IN
28048: NOT
28049: IFFALSE 28053
// exit ;
28051: GO 28445
// index := GetElementIndex ( minersList , unit ) ;
28053: LD_ADDR_VAR 0 6
28057: PUSH
28058: LD_EXP 99
28062: PPUSH
28063: LD_VAR 0 1
28067: PPUSH
28068: CALL 33972 0 2
28072: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28073: LD_ADDR_VAR 0 5
28077: PUSH
28078: DOUBLE
28079: LD_EXP 100
28083: PUSH
28084: LD_VAR 0 6
28088: ARRAY
28089: INC
28090: ST_TO_ADDR
28091: LD_INT 1
28093: PUSH
28094: FOR_DOWNTO
28095: IFFALSE 28256
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28097: LD_EXP 100
28101: PUSH
28102: LD_VAR 0 6
28106: ARRAY
28107: PUSH
28108: LD_VAR 0 5
28112: ARRAY
28113: PUSH
28114: LD_INT 1
28116: ARRAY
28117: PUSH
28118: LD_VAR 0 2
28122: EQUAL
28123: PUSH
28124: LD_EXP 100
28128: PUSH
28129: LD_VAR 0 6
28133: ARRAY
28134: PUSH
28135: LD_VAR 0 5
28139: ARRAY
28140: PUSH
28141: LD_INT 2
28143: ARRAY
28144: PUSH
28145: LD_VAR 0 3
28149: EQUAL
28150: AND
28151: IFFALSE 28254
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28153: LD_EXP 100
28157: PUSH
28158: LD_VAR 0 6
28162: ARRAY
28163: PUSH
28164: LD_VAR 0 5
28168: ARRAY
28169: PUSH
28170: LD_INT 1
28172: ARRAY
28173: PPUSH
28174: LD_EXP 100
28178: PUSH
28179: LD_VAR 0 6
28183: ARRAY
28184: PUSH
28185: LD_VAR 0 5
28189: ARRAY
28190: PUSH
28191: LD_INT 2
28193: ARRAY
28194: PPUSH
28195: LD_VAR 0 1
28199: PPUSH
28200: CALL_OW 255
28204: PPUSH
28205: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28209: LD_ADDR_EXP 100
28213: PUSH
28214: LD_EXP 100
28218: PPUSH
28219: LD_VAR 0 6
28223: PPUSH
28224: LD_EXP 100
28228: PUSH
28229: LD_VAR 0 6
28233: ARRAY
28234: PPUSH
28235: LD_VAR 0 5
28239: PPUSH
28240: CALL_OW 3
28244: PPUSH
28245: CALL_OW 1
28249: ST_TO_ADDR
// exit ;
28250: POP
28251: POP
28252: GO 28445
// end ; end ;
28254: GO 28094
28256: POP
28257: POP
// for i := minerMinesList [ index ] downto 1 do
28258: LD_ADDR_VAR 0 5
28262: PUSH
28263: DOUBLE
28264: LD_EXP 100
28268: PUSH
28269: LD_VAR 0 6
28273: ARRAY
28274: INC
28275: ST_TO_ADDR
28276: LD_INT 1
28278: PUSH
28279: FOR_DOWNTO
28280: IFFALSE 28443
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28282: LD_EXP 100
28286: PUSH
28287: LD_VAR 0 6
28291: ARRAY
28292: PUSH
28293: LD_VAR 0 5
28297: ARRAY
28298: PUSH
28299: LD_INT 1
28301: ARRAY
28302: PPUSH
28303: LD_EXP 100
28307: PUSH
28308: LD_VAR 0 6
28312: ARRAY
28313: PUSH
28314: LD_VAR 0 5
28318: ARRAY
28319: PUSH
28320: LD_INT 2
28322: ARRAY
28323: PPUSH
28324: LD_VAR 0 2
28328: PPUSH
28329: LD_VAR 0 3
28333: PPUSH
28334: CALL_OW 298
28338: PUSH
28339: LD_INT 6
28341: LESS
28342: IFFALSE 28441
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28344: LD_EXP 100
28348: PUSH
28349: LD_VAR 0 6
28353: ARRAY
28354: PUSH
28355: LD_VAR 0 5
28359: ARRAY
28360: PUSH
28361: LD_INT 1
28363: ARRAY
28364: PPUSH
28365: LD_EXP 100
28369: PUSH
28370: LD_VAR 0 6
28374: ARRAY
28375: PUSH
28376: LD_VAR 0 5
28380: ARRAY
28381: PUSH
28382: LD_INT 2
28384: ARRAY
28385: PPUSH
28386: LD_VAR 0 1
28390: PPUSH
28391: CALL_OW 255
28395: PPUSH
28396: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28400: LD_ADDR_EXP 100
28404: PUSH
28405: LD_EXP 100
28409: PPUSH
28410: LD_VAR 0 6
28414: PPUSH
28415: LD_EXP 100
28419: PUSH
28420: LD_VAR 0 6
28424: ARRAY
28425: PPUSH
28426: LD_VAR 0 5
28430: PPUSH
28431: CALL_OW 3
28435: PPUSH
28436: CALL_OW 1
28440: ST_TO_ADDR
// end ; end ;
28441: GO 28279
28443: POP
28444: POP
// end ;
28445: LD_VAR 0 4
28449: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28450: LD_INT 0
28452: PPUSH
28453: PPUSH
28454: PPUSH
28455: PPUSH
28456: PPUSH
28457: PPUSH
28458: PPUSH
28459: PPUSH
28460: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28461: LD_VAR 0 1
28465: PPUSH
28466: CALL_OW 264
28470: PUSH
28471: LD_EXP 28
28475: EQUAL
28476: NOT
28477: PUSH
28478: LD_VAR 0 1
28482: PUSH
28483: LD_EXP 99
28487: IN
28488: NOT
28489: OR
28490: IFFALSE 28494
// exit ;
28492: GO 28816
// index := GetElementIndex ( minersList , unit ) ;
28494: LD_ADDR_VAR 0 6
28498: PUSH
28499: LD_EXP 99
28503: PPUSH
28504: LD_VAR 0 1
28508: PPUSH
28509: CALL 33972 0 2
28513: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28514: LD_ADDR_VAR 0 8
28518: PUSH
28519: LD_EXP 101
28523: PUSH
28524: LD_EXP 100
28528: PUSH
28529: LD_VAR 0 6
28533: ARRAY
28534: MINUS
28535: ST_TO_ADDR
// if not minesFreeAmount then
28536: LD_VAR 0 8
28540: NOT
28541: IFFALSE 28545
// exit ;
28543: GO 28816
// tmp := [ ] ;
28545: LD_ADDR_VAR 0 7
28549: PUSH
28550: EMPTY
28551: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28552: LD_ADDR_VAR 0 5
28556: PUSH
28557: DOUBLE
28558: LD_INT 1
28560: DEC
28561: ST_TO_ADDR
28562: LD_VAR 0 8
28566: PUSH
28567: FOR_TO
28568: IFFALSE 28763
// begin _d := rand ( 0 , 5 ) ;
28570: LD_ADDR_VAR 0 11
28574: PUSH
28575: LD_INT 0
28577: PPUSH
28578: LD_INT 5
28580: PPUSH
28581: CALL_OW 12
28585: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28586: LD_ADDR_VAR 0 12
28590: PUSH
28591: LD_INT 2
28593: PPUSH
28594: LD_INT 6
28596: PPUSH
28597: CALL_OW 12
28601: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28602: LD_ADDR_VAR 0 9
28606: PUSH
28607: LD_VAR 0 2
28611: PPUSH
28612: LD_VAR 0 11
28616: PPUSH
28617: LD_VAR 0 12
28621: PPUSH
28622: CALL_OW 272
28626: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28627: LD_ADDR_VAR 0 10
28631: PUSH
28632: LD_VAR 0 3
28636: PPUSH
28637: LD_VAR 0 11
28641: PPUSH
28642: LD_VAR 0 12
28646: PPUSH
28647: CALL_OW 273
28651: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28652: LD_VAR 0 9
28656: PPUSH
28657: LD_VAR 0 10
28661: PPUSH
28662: CALL_OW 488
28666: PUSH
28667: LD_VAR 0 9
28671: PUSH
28672: LD_VAR 0 10
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_VAR 0 7
28685: IN
28686: NOT
28687: AND
28688: PUSH
28689: LD_VAR 0 9
28693: PPUSH
28694: LD_VAR 0 10
28698: PPUSH
28699: CALL_OW 458
28703: NOT
28704: AND
28705: IFFALSE 28747
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28707: LD_ADDR_VAR 0 7
28711: PUSH
28712: LD_VAR 0 7
28716: PPUSH
28717: LD_VAR 0 7
28721: PUSH
28722: LD_INT 1
28724: PLUS
28725: PPUSH
28726: LD_VAR 0 9
28730: PUSH
28731: LD_VAR 0 10
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PPUSH
28740: CALL_OW 1
28744: ST_TO_ADDR
28745: GO 28761
// i := i - 1 ;
28747: LD_ADDR_VAR 0 5
28751: PUSH
28752: LD_VAR 0 5
28756: PUSH
28757: LD_INT 1
28759: MINUS
28760: ST_TO_ADDR
// end ;
28761: GO 28567
28763: POP
28764: POP
// for i in tmp do
28765: LD_ADDR_VAR 0 5
28769: PUSH
28770: LD_VAR 0 7
28774: PUSH
28775: FOR_IN
28776: IFFALSE 28814
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28778: LD_VAR 0 1
28782: PPUSH
28783: LD_VAR 0 5
28787: PUSH
28788: LD_INT 1
28790: ARRAY
28791: PPUSH
28792: LD_VAR 0 5
28796: PUSH
28797: LD_INT 2
28799: ARRAY
28800: PPUSH
28801: CALL 27756 0 3
28805: NOT
28806: IFFALSE 28812
// exit ;
28808: POP
28809: POP
28810: GO 28816
28812: GO 28775
28814: POP
28815: POP
// end ;
28816: LD_VAR 0 4
28820: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28821: LD_INT 0
28823: PPUSH
28824: PPUSH
28825: PPUSH
28826: PPUSH
28827: PPUSH
28828: PPUSH
28829: PPUSH
// if not GetClass ( unit ) = class_sniper then
28830: LD_VAR 0 1
28834: PPUSH
28835: CALL_OW 257
28839: PUSH
28840: LD_INT 5
28842: EQUAL
28843: NOT
28844: IFFALSE 28848
// exit ;
28846: GO 29236
// dist := 8 ;
28848: LD_ADDR_VAR 0 5
28852: PUSH
28853: LD_INT 8
28855: ST_TO_ADDR
// viewRange := 12 ;
28856: LD_ADDR_VAR 0 7
28860: PUSH
28861: LD_INT 12
28863: ST_TO_ADDR
// side := GetSide ( unit ) ;
28864: LD_ADDR_VAR 0 6
28868: PUSH
28869: LD_VAR 0 1
28873: PPUSH
28874: CALL_OW 255
28878: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28879: LD_INT 61
28881: PPUSH
28882: LD_VAR 0 6
28886: PPUSH
28887: CALL_OW 321
28891: PUSH
28892: LD_INT 2
28894: EQUAL
28895: IFFALSE 28905
// viewRange := 16 ;
28897: LD_ADDR_VAR 0 7
28901: PUSH
28902: LD_INT 16
28904: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28905: LD_VAR 0 1
28909: PPUSH
28910: LD_VAR 0 2
28914: PPUSH
28915: LD_VAR 0 3
28919: PPUSH
28920: CALL_OW 297
28924: PUSH
28925: LD_VAR 0 5
28929: GREATER
28930: IFFALSE 29009
// begin ComMoveXY ( unit , x , y ) ;
28932: LD_VAR 0 1
28936: PPUSH
28937: LD_VAR 0 2
28941: PPUSH
28942: LD_VAR 0 3
28946: PPUSH
28947: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28951: LD_INT 35
28953: PPUSH
28954: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28958: LD_VAR 0 1
28962: PPUSH
28963: LD_VAR 0 2
28967: PPUSH
28968: LD_VAR 0 3
28972: PPUSH
28973: CALL 64036 0 3
28977: NOT
28978: IFFALSE 28982
// exit ;
28980: GO 29236
// until GetDistUnitXY ( unit , x , y ) < dist ;
28982: LD_VAR 0 1
28986: PPUSH
28987: LD_VAR 0 2
28991: PPUSH
28992: LD_VAR 0 3
28996: PPUSH
28997: CALL_OW 297
29001: PUSH
29002: LD_VAR 0 5
29006: LESS
29007: IFFALSE 28951
// end ; ComTurnXY ( unit , x , y ) ;
29009: LD_VAR 0 1
29013: PPUSH
29014: LD_VAR 0 2
29018: PPUSH
29019: LD_VAR 0 3
29023: PPUSH
29024: CALL_OW 118
// wait ( 5 ) ;
29028: LD_INT 5
29030: PPUSH
29031: CALL_OW 67
// _d := GetDir ( unit ) ;
29035: LD_ADDR_VAR 0 10
29039: PUSH
29040: LD_VAR 0 1
29044: PPUSH
29045: CALL_OW 254
29049: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29050: LD_ADDR_VAR 0 8
29054: PUSH
29055: LD_VAR 0 1
29059: PPUSH
29060: CALL_OW 250
29064: PPUSH
29065: LD_VAR 0 10
29069: PPUSH
29070: LD_VAR 0 5
29074: PPUSH
29075: CALL_OW 272
29079: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29080: LD_ADDR_VAR 0 9
29084: PUSH
29085: LD_VAR 0 1
29089: PPUSH
29090: CALL_OW 251
29094: PPUSH
29095: LD_VAR 0 10
29099: PPUSH
29100: LD_VAR 0 5
29104: PPUSH
29105: CALL_OW 273
29109: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29110: LD_VAR 0 8
29114: PPUSH
29115: LD_VAR 0 9
29119: PPUSH
29120: CALL_OW 488
29124: NOT
29125: IFFALSE 29129
// exit ;
29127: GO 29236
// ComAnimCustom ( unit , 1 ) ;
29129: LD_VAR 0 1
29133: PPUSH
29134: LD_INT 1
29136: PPUSH
29137: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29141: LD_VAR 0 8
29145: PPUSH
29146: LD_VAR 0 9
29150: PPUSH
29151: LD_VAR 0 6
29155: PPUSH
29156: LD_VAR 0 7
29160: PPUSH
29161: CALL_OW 330
// repeat wait ( 1 ) ;
29165: LD_INT 1
29167: PPUSH
29168: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29172: LD_VAR 0 1
29176: PPUSH
29177: CALL_OW 316
29181: PUSH
29182: LD_VAR 0 1
29186: PPUSH
29187: CALL_OW 314
29191: OR
29192: PUSH
29193: LD_VAR 0 1
29197: PPUSH
29198: CALL_OW 302
29202: NOT
29203: OR
29204: PUSH
29205: LD_VAR 0 1
29209: PPUSH
29210: CALL_OW 301
29214: OR
29215: IFFALSE 29165
// RemoveSeeing ( _x , _y , side ) ;
29217: LD_VAR 0 8
29221: PPUSH
29222: LD_VAR 0 9
29226: PPUSH
29227: LD_VAR 0 6
29231: PPUSH
29232: CALL_OW 331
// end ; end_of_file
29236: LD_VAR 0 4
29240: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29241: LD_INT 0
29243: PPUSH
29244: PPUSH
// if exist_mode then
29245: LD_VAR 0 2
29249: IFFALSE 29274
// unit := CreateCharacter ( prefix & ident ) else
29251: LD_ADDR_VAR 0 5
29255: PUSH
29256: LD_VAR 0 3
29260: PUSH
29261: LD_VAR 0 1
29265: STR
29266: PPUSH
29267: CALL_OW 34
29271: ST_TO_ADDR
29272: GO 29289
// unit := NewCharacter ( ident ) ;
29274: LD_ADDR_VAR 0 5
29278: PUSH
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 25
29288: ST_TO_ADDR
// result := unit ;
29289: LD_ADDR_VAR 0 4
29293: PUSH
29294: LD_VAR 0 5
29298: ST_TO_ADDR
// end ;
29299: LD_VAR 0 4
29303: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29304: LD_INT 0
29306: PPUSH
29307: PPUSH
// if not side or not nation then
29308: LD_VAR 0 1
29312: NOT
29313: PUSH
29314: LD_VAR 0 2
29318: NOT
29319: OR
29320: IFFALSE 29324
// exit ;
29322: GO 30088
// case nation of nation_american :
29324: LD_VAR 0 2
29328: PUSH
29329: LD_INT 1
29331: DOUBLE
29332: EQUAL
29333: IFTRUE 29337
29335: GO 29551
29337: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29338: LD_ADDR_VAR 0 4
29342: PUSH
29343: LD_INT 35
29345: PUSH
29346: LD_INT 45
29348: PUSH
29349: LD_INT 46
29351: PUSH
29352: LD_INT 47
29354: PUSH
29355: LD_INT 82
29357: PUSH
29358: LD_INT 83
29360: PUSH
29361: LD_INT 84
29363: PUSH
29364: LD_INT 85
29366: PUSH
29367: LD_INT 86
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: LD_INT 2
29375: PUSH
29376: LD_INT 6
29378: PUSH
29379: LD_INT 15
29381: PUSH
29382: LD_INT 16
29384: PUSH
29385: LD_INT 7
29387: PUSH
29388: LD_INT 12
29390: PUSH
29391: LD_INT 13
29393: PUSH
29394: LD_INT 10
29396: PUSH
29397: LD_INT 14
29399: PUSH
29400: LD_INT 20
29402: PUSH
29403: LD_INT 21
29405: PUSH
29406: LD_INT 22
29408: PUSH
29409: LD_INT 25
29411: PUSH
29412: LD_INT 32
29414: PUSH
29415: LD_INT 27
29417: PUSH
29418: LD_INT 36
29420: PUSH
29421: LD_INT 69
29423: PUSH
29424: LD_INT 39
29426: PUSH
29427: LD_INT 34
29429: PUSH
29430: LD_INT 40
29432: PUSH
29433: LD_INT 48
29435: PUSH
29436: LD_INT 49
29438: PUSH
29439: LD_INT 50
29441: PUSH
29442: LD_INT 51
29444: PUSH
29445: LD_INT 52
29447: PUSH
29448: LD_INT 53
29450: PUSH
29451: LD_INT 54
29453: PUSH
29454: LD_INT 55
29456: PUSH
29457: LD_INT 56
29459: PUSH
29460: LD_INT 57
29462: PUSH
29463: LD_INT 58
29465: PUSH
29466: LD_INT 59
29468: PUSH
29469: LD_INT 60
29471: PUSH
29472: LD_INT 61
29474: PUSH
29475: LD_INT 62
29477: PUSH
29478: LD_INT 80
29480: PUSH
29481: LD_INT 82
29483: PUSH
29484: LD_INT 83
29486: PUSH
29487: LD_INT 84
29489: PUSH
29490: LD_INT 85
29492: PUSH
29493: LD_INT 86
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: ST_TO_ADDR
29549: GO 30012
29551: LD_INT 2
29553: DOUBLE
29554: EQUAL
29555: IFTRUE 29559
29557: GO 29781
29559: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29560: LD_ADDR_VAR 0 4
29564: PUSH
29565: LD_INT 35
29567: PUSH
29568: LD_INT 45
29570: PUSH
29571: LD_INT 46
29573: PUSH
29574: LD_INT 47
29576: PUSH
29577: LD_INT 82
29579: PUSH
29580: LD_INT 83
29582: PUSH
29583: LD_INT 84
29585: PUSH
29586: LD_INT 85
29588: PUSH
29589: LD_INT 87
29591: PUSH
29592: LD_INT 70
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: LD_INT 11
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: LD_INT 4
29606: PUSH
29607: LD_INT 5
29609: PUSH
29610: LD_INT 6
29612: PUSH
29613: LD_INT 15
29615: PUSH
29616: LD_INT 18
29618: PUSH
29619: LD_INT 7
29621: PUSH
29622: LD_INT 17
29624: PUSH
29625: LD_INT 8
29627: PUSH
29628: LD_INT 20
29630: PUSH
29631: LD_INT 21
29633: PUSH
29634: LD_INT 22
29636: PUSH
29637: LD_INT 72
29639: PUSH
29640: LD_INT 26
29642: PUSH
29643: LD_INT 69
29645: PUSH
29646: LD_INT 39
29648: PUSH
29649: LD_INT 40
29651: PUSH
29652: LD_INT 41
29654: PUSH
29655: LD_INT 42
29657: PUSH
29658: LD_INT 43
29660: PUSH
29661: LD_INT 48
29663: PUSH
29664: LD_INT 49
29666: PUSH
29667: LD_INT 50
29669: PUSH
29670: LD_INT 51
29672: PUSH
29673: LD_INT 52
29675: PUSH
29676: LD_INT 53
29678: PUSH
29679: LD_INT 54
29681: PUSH
29682: LD_INT 55
29684: PUSH
29685: LD_INT 56
29687: PUSH
29688: LD_INT 60
29690: PUSH
29691: LD_INT 61
29693: PUSH
29694: LD_INT 62
29696: PUSH
29697: LD_INT 66
29699: PUSH
29700: LD_INT 67
29702: PUSH
29703: LD_INT 68
29705: PUSH
29706: LD_INT 81
29708: PUSH
29709: LD_INT 82
29711: PUSH
29712: LD_INT 83
29714: PUSH
29715: LD_INT 84
29717: PUSH
29718: LD_INT 85
29720: PUSH
29721: LD_INT 87
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: ST_TO_ADDR
29779: GO 30012
29781: LD_INT 3
29783: DOUBLE
29784: EQUAL
29785: IFTRUE 29789
29787: GO 30011
29789: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29790: LD_ADDR_VAR 0 4
29794: PUSH
29795: LD_INT 46
29797: PUSH
29798: LD_INT 47
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: LD_INT 82
29809: PUSH
29810: LD_INT 83
29812: PUSH
29813: LD_INT 84
29815: PUSH
29816: LD_INT 85
29818: PUSH
29819: LD_INT 86
29821: PUSH
29822: LD_INT 11
29824: PUSH
29825: LD_INT 9
29827: PUSH
29828: LD_INT 20
29830: PUSH
29831: LD_INT 19
29833: PUSH
29834: LD_INT 21
29836: PUSH
29837: LD_INT 24
29839: PUSH
29840: LD_INT 22
29842: PUSH
29843: LD_INT 25
29845: PUSH
29846: LD_INT 28
29848: PUSH
29849: LD_INT 29
29851: PUSH
29852: LD_INT 30
29854: PUSH
29855: LD_INT 31
29857: PUSH
29858: LD_INT 37
29860: PUSH
29861: LD_INT 38
29863: PUSH
29864: LD_INT 32
29866: PUSH
29867: LD_INT 27
29869: PUSH
29870: LD_INT 33
29872: PUSH
29873: LD_INT 69
29875: PUSH
29876: LD_INT 39
29878: PUSH
29879: LD_INT 34
29881: PUSH
29882: LD_INT 40
29884: PUSH
29885: LD_INT 71
29887: PUSH
29888: LD_INT 23
29890: PUSH
29891: LD_INT 44
29893: PUSH
29894: LD_INT 48
29896: PUSH
29897: LD_INT 49
29899: PUSH
29900: LD_INT 50
29902: PUSH
29903: LD_INT 51
29905: PUSH
29906: LD_INT 52
29908: PUSH
29909: LD_INT 53
29911: PUSH
29912: LD_INT 54
29914: PUSH
29915: LD_INT 55
29917: PUSH
29918: LD_INT 56
29920: PUSH
29921: LD_INT 57
29923: PUSH
29924: LD_INT 58
29926: PUSH
29927: LD_INT 59
29929: PUSH
29930: LD_INT 63
29932: PUSH
29933: LD_INT 64
29935: PUSH
29936: LD_INT 65
29938: PUSH
29939: LD_INT 82
29941: PUSH
29942: LD_INT 83
29944: PUSH
29945: LD_INT 84
29947: PUSH
29948: LD_INT 85
29950: PUSH
29951: LD_INT 86
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: ST_TO_ADDR
30009: GO 30012
30011: POP
// if state > - 1 and state < 3 then
30012: LD_VAR 0 3
30016: PUSH
30017: LD_INT 1
30019: NEG
30020: GREATER
30021: PUSH
30022: LD_VAR 0 3
30026: PUSH
30027: LD_INT 3
30029: LESS
30030: AND
30031: IFFALSE 30088
// for i in result do
30033: LD_ADDR_VAR 0 5
30037: PUSH
30038: LD_VAR 0 4
30042: PUSH
30043: FOR_IN
30044: IFFALSE 30086
// if GetTech ( i , side ) <> state then
30046: LD_VAR 0 5
30050: PPUSH
30051: LD_VAR 0 1
30055: PPUSH
30056: CALL_OW 321
30060: PUSH
30061: LD_VAR 0 3
30065: NONEQUAL
30066: IFFALSE 30084
// result := result diff i ;
30068: LD_ADDR_VAR 0 4
30072: PUSH
30073: LD_VAR 0 4
30077: PUSH
30078: LD_VAR 0 5
30082: DIFF
30083: ST_TO_ADDR
30084: GO 30043
30086: POP
30087: POP
// end ;
30088: LD_VAR 0 4
30092: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30093: LD_INT 0
30095: PPUSH
30096: PPUSH
30097: PPUSH
// result := true ;
30098: LD_ADDR_VAR 0 3
30102: PUSH
30103: LD_INT 1
30105: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30106: LD_ADDR_VAR 0 5
30110: PUSH
30111: LD_VAR 0 2
30115: PPUSH
30116: CALL_OW 480
30120: ST_TO_ADDR
// if not tmp then
30121: LD_VAR 0 5
30125: NOT
30126: IFFALSE 30130
// exit ;
30128: GO 30179
// for i in tmp do
30130: LD_ADDR_VAR 0 4
30134: PUSH
30135: LD_VAR 0 5
30139: PUSH
30140: FOR_IN
30141: IFFALSE 30177
// if GetTech ( i , side ) <> state_researched then
30143: LD_VAR 0 4
30147: PPUSH
30148: LD_VAR 0 1
30152: PPUSH
30153: CALL_OW 321
30157: PUSH
30158: LD_INT 2
30160: NONEQUAL
30161: IFFALSE 30175
// begin result := false ;
30163: LD_ADDR_VAR 0 3
30167: PUSH
30168: LD_INT 0
30170: ST_TO_ADDR
// exit ;
30171: POP
30172: POP
30173: GO 30179
// end ;
30175: GO 30140
30177: POP
30178: POP
// end ;
30179: LD_VAR 0 3
30183: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30184: LD_INT 0
30186: PPUSH
30187: PPUSH
30188: PPUSH
30189: PPUSH
30190: PPUSH
30191: PPUSH
30192: PPUSH
30193: PPUSH
30194: PPUSH
30195: PPUSH
30196: PPUSH
30197: PPUSH
30198: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30199: LD_VAR 0 1
30203: NOT
30204: PUSH
30205: LD_VAR 0 1
30209: PPUSH
30210: CALL_OW 257
30214: PUSH
30215: LD_INT 9
30217: NONEQUAL
30218: OR
30219: IFFALSE 30223
// exit ;
30221: GO 30796
// side := GetSide ( unit ) ;
30223: LD_ADDR_VAR 0 9
30227: PUSH
30228: LD_VAR 0 1
30232: PPUSH
30233: CALL_OW 255
30237: ST_TO_ADDR
// tech_space := tech_spacanom ;
30238: LD_ADDR_VAR 0 12
30242: PUSH
30243: LD_INT 29
30245: ST_TO_ADDR
// tech_time := tech_taurad ;
30246: LD_ADDR_VAR 0 13
30250: PUSH
30251: LD_INT 28
30253: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30254: LD_ADDR_VAR 0 11
30258: PUSH
30259: LD_VAR 0 1
30263: PPUSH
30264: CALL_OW 310
30268: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30269: LD_VAR 0 11
30273: PPUSH
30274: CALL_OW 247
30278: PUSH
30279: LD_INT 2
30281: EQUAL
30282: IFFALSE 30286
// exit ;
30284: GO 30796
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30286: LD_ADDR_VAR 0 8
30290: PUSH
30291: LD_INT 81
30293: PUSH
30294: LD_VAR 0 9
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 3
30305: PUSH
30306: LD_INT 21
30308: PUSH
30309: LD_INT 3
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PPUSH
30324: CALL_OW 69
30328: ST_TO_ADDR
// if not tmp then
30329: LD_VAR 0 8
30333: NOT
30334: IFFALSE 30338
// exit ;
30336: GO 30796
// if in_unit then
30338: LD_VAR 0 11
30342: IFFALSE 30366
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30344: LD_ADDR_VAR 0 10
30348: PUSH
30349: LD_VAR 0 8
30353: PPUSH
30354: LD_VAR 0 11
30358: PPUSH
30359: CALL_OW 74
30363: ST_TO_ADDR
30364: GO 30386
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30366: LD_ADDR_VAR 0 10
30370: PUSH
30371: LD_VAR 0 8
30375: PPUSH
30376: LD_VAR 0 1
30380: PPUSH
30381: CALL_OW 74
30385: ST_TO_ADDR
// if not enemy then
30386: LD_VAR 0 10
30390: NOT
30391: IFFALSE 30395
// exit ;
30393: GO 30796
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30395: LD_VAR 0 11
30399: PUSH
30400: LD_VAR 0 11
30404: PPUSH
30405: LD_VAR 0 10
30409: PPUSH
30410: CALL_OW 296
30414: PUSH
30415: LD_INT 13
30417: GREATER
30418: AND
30419: PUSH
30420: LD_VAR 0 1
30424: PPUSH
30425: LD_VAR 0 10
30429: PPUSH
30430: CALL_OW 296
30434: PUSH
30435: LD_INT 12
30437: GREATER
30438: OR
30439: IFFALSE 30443
// exit ;
30441: GO 30796
// missile := [ 1 ] ;
30443: LD_ADDR_VAR 0 14
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: EMPTY
30452: LIST
30453: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30454: LD_VAR 0 9
30458: PPUSH
30459: LD_VAR 0 12
30463: PPUSH
30464: CALL_OW 325
30468: IFFALSE 30497
// missile := Insert ( missile , missile + 1 , 2 ) ;
30470: LD_ADDR_VAR 0 14
30474: PUSH
30475: LD_VAR 0 14
30479: PPUSH
30480: LD_VAR 0 14
30484: PUSH
30485: LD_INT 1
30487: PLUS
30488: PPUSH
30489: LD_INT 2
30491: PPUSH
30492: CALL_OW 2
30496: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30497: LD_VAR 0 9
30501: PPUSH
30502: LD_VAR 0 13
30506: PPUSH
30507: CALL_OW 325
30511: PUSH
30512: LD_VAR 0 10
30516: PPUSH
30517: CALL_OW 255
30521: PPUSH
30522: LD_VAR 0 13
30526: PPUSH
30527: CALL_OW 325
30531: NOT
30532: AND
30533: IFFALSE 30562
// missile := Insert ( missile , missile + 1 , 3 ) ;
30535: LD_ADDR_VAR 0 14
30539: PUSH
30540: LD_VAR 0 14
30544: PPUSH
30545: LD_VAR 0 14
30549: PUSH
30550: LD_INT 1
30552: PLUS
30553: PPUSH
30554: LD_INT 3
30556: PPUSH
30557: CALL_OW 2
30561: ST_TO_ADDR
// if missile < 2 then
30562: LD_VAR 0 14
30566: PUSH
30567: LD_INT 2
30569: LESS
30570: IFFALSE 30574
// exit ;
30572: GO 30796
// x := GetX ( enemy ) ;
30574: LD_ADDR_VAR 0 4
30578: PUSH
30579: LD_VAR 0 10
30583: PPUSH
30584: CALL_OW 250
30588: ST_TO_ADDR
// y := GetY ( enemy ) ;
30589: LD_ADDR_VAR 0 5
30593: PUSH
30594: LD_VAR 0 10
30598: PPUSH
30599: CALL_OW 251
30603: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30604: LD_ADDR_VAR 0 6
30608: PUSH
30609: LD_VAR 0 4
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PPUSH
30618: LD_INT 1
30620: PPUSH
30621: CALL_OW 12
30625: PLUS
30626: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30627: LD_ADDR_VAR 0 7
30631: PUSH
30632: LD_VAR 0 5
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PPUSH
30641: LD_INT 1
30643: PPUSH
30644: CALL_OW 12
30648: PLUS
30649: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30650: LD_VAR 0 6
30654: PPUSH
30655: LD_VAR 0 7
30659: PPUSH
30660: CALL_OW 488
30664: NOT
30665: IFFALSE 30687
// begin _x := x ;
30667: LD_ADDR_VAR 0 6
30671: PUSH
30672: LD_VAR 0 4
30676: ST_TO_ADDR
// _y := y ;
30677: LD_ADDR_VAR 0 7
30681: PUSH
30682: LD_VAR 0 5
30686: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: LD_INT 1
30694: PPUSH
30695: LD_VAR 0 14
30699: PPUSH
30700: CALL_OW 12
30704: ST_TO_ADDR
// case i of 1 :
30705: LD_VAR 0 3
30709: PUSH
30710: LD_INT 1
30712: DOUBLE
30713: EQUAL
30714: IFTRUE 30718
30716: GO 30735
30718: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30719: LD_VAR 0 1
30723: PPUSH
30724: LD_VAR 0 10
30728: PPUSH
30729: CALL_OW 115
30733: GO 30796
30735: LD_INT 2
30737: DOUBLE
30738: EQUAL
30739: IFTRUE 30743
30741: GO 30765
30743: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30744: LD_VAR 0 1
30748: PPUSH
30749: LD_VAR 0 6
30753: PPUSH
30754: LD_VAR 0 7
30758: PPUSH
30759: CALL_OW 153
30763: GO 30796
30765: LD_INT 3
30767: DOUBLE
30768: EQUAL
30769: IFTRUE 30773
30771: GO 30795
30773: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30774: LD_VAR 0 1
30778: PPUSH
30779: LD_VAR 0 6
30783: PPUSH
30784: LD_VAR 0 7
30788: PPUSH
30789: CALL_OW 154
30793: GO 30796
30795: POP
// end ;
30796: LD_VAR 0 2
30800: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30801: LD_INT 0
30803: PPUSH
30804: PPUSH
30805: PPUSH
30806: PPUSH
30807: PPUSH
30808: PPUSH
// if not unit or not building then
30809: LD_VAR 0 1
30813: NOT
30814: PUSH
30815: LD_VAR 0 2
30819: NOT
30820: OR
30821: IFFALSE 30825
// exit ;
30823: GO 30983
// x := GetX ( building ) ;
30825: LD_ADDR_VAR 0 5
30829: PUSH
30830: LD_VAR 0 2
30834: PPUSH
30835: CALL_OW 250
30839: ST_TO_ADDR
// y := GetY ( building ) ;
30840: LD_ADDR_VAR 0 6
30844: PUSH
30845: LD_VAR 0 2
30849: PPUSH
30850: CALL_OW 251
30854: ST_TO_ADDR
// for i = 0 to 5 do
30855: LD_ADDR_VAR 0 4
30859: PUSH
30860: DOUBLE
30861: LD_INT 0
30863: DEC
30864: ST_TO_ADDR
30865: LD_INT 5
30867: PUSH
30868: FOR_TO
30869: IFFALSE 30981
// begin _x := ShiftX ( x , i , 3 ) ;
30871: LD_ADDR_VAR 0 7
30875: PUSH
30876: LD_VAR 0 5
30880: PPUSH
30881: LD_VAR 0 4
30885: PPUSH
30886: LD_INT 3
30888: PPUSH
30889: CALL_OW 272
30893: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30894: LD_ADDR_VAR 0 8
30898: PUSH
30899: LD_VAR 0 6
30903: PPUSH
30904: LD_VAR 0 4
30908: PPUSH
30909: LD_INT 3
30911: PPUSH
30912: CALL_OW 273
30916: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30917: LD_VAR 0 7
30921: PPUSH
30922: LD_VAR 0 8
30926: PPUSH
30927: CALL_OW 488
30931: NOT
30932: IFFALSE 30936
// continue ;
30934: GO 30868
// if HexInfo ( _x , _y ) = 0 then
30936: LD_VAR 0 7
30940: PPUSH
30941: LD_VAR 0 8
30945: PPUSH
30946: CALL_OW 428
30950: PUSH
30951: LD_INT 0
30953: EQUAL
30954: IFFALSE 30979
// begin ComMoveXY ( unit , _x , _y ) ;
30956: LD_VAR 0 1
30960: PPUSH
30961: LD_VAR 0 7
30965: PPUSH
30966: LD_VAR 0 8
30970: PPUSH
30971: CALL_OW 111
// exit ;
30975: POP
30976: POP
30977: GO 30983
// end ; end ;
30979: GO 30868
30981: POP
30982: POP
// end ;
30983: LD_VAR 0 3
30987: RET
// export function ScanBase ( side , base_area ) ; begin
30988: LD_INT 0
30990: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30991: LD_ADDR_VAR 0 3
30995: PUSH
30996: LD_VAR 0 2
31000: PPUSH
31001: LD_INT 81
31003: PUSH
31004: LD_VAR 0 1
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PPUSH
31013: CALL_OW 70
31017: ST_TO_ADDR
// end ;
31018: LD_VAR 0 3
31022: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31023: LD_INT 0
31025: PPUSH
31026: PPUSH
31027: PPUSH
31028: PPUSH
// result := false ;
31029: LD_ADDR_VAR 0 2
31033: PUSH
31034: LD_INT 0
31036: ST_TO_ADDR
// side := GetSide ( unit ) ;
31037: LD_ADDR_VAR 0 3
31041: PUSH
31042: LD_VAR 0 1
31046: PPUSH
31047: CALL_OW 255
31051: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31052: LD_ADDR_VAR 0 4
31056: PUSH
31057: LD_VAR 0 1
31061: PPUSH
31062: CALL_OW 248
31066: ST_TO_ADDR
// case nat of 1 :
31067: LD_VAR 0 4
31071: PUSH
31072: LD_INT 1
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31091
31080: POP
// tech := tech_lassight ; 2 :
31081: LD_ADDR_VAR 0 5
31085: PUSH
31086: LD_INT 12
31088: ST_TO_ADDR
31089: GO 31130
31091: LD_INT 2
31093: DOUBLE
31094: EQUAL
31095: IFTRUE 31099
31097: GO 31110
31099: POP
// tech := tech_mortar ; 3 :
31100: LD_ADDR_VAR 0 5
31104: PUSH
31105: LD_INT 41
31107: ST_TO_ADDR
31108: GO 31130
31110: LD_INT 3
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31129
31118: POP
// tech := tech_bazooka ; end ;
31119: LD_ADDR_VAR 0 5
31123: PUSH
31124: LD_INT 44
31126: ST_TO_ADDR
31127: GO 31130
31129: POP
// if Researched ( side , tech ) then
31130: LD_VAR 0 3
31134: PPUSH
31135: LD_VAR 0 5
31139: PPUSH
31140: CALL_OW 325
31144: IFFALSE 31171
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31146: LD_ADDR_VAR 0 2
31150: PUSH
31151: LD_INT 5
31153: PUSH
31154: LD_INT 8
31156: PUSH
31157: LD_INT 9
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: LIST
31164: PUSH
31165: LD_VAR 0 4
31169: ARRAY
31170: ST_TO_ADDR
// end ;
31171: LD_VAR 0 2
31175: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31176: LD_INT 0
31178: PPUSH
31179: PPUSH
31180: PPUSH
// if not mines then
31181: LD_VAR 0 2
31185: NOT
31186: IFFALSE 31190
// exit ;
31188: GO 31334
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31190: LD_ADDR_VAR 0 5
31194: PUSH
31195: LD_INT 81
31197: PUSH
31198: LD_VAR 0 1
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: LD_INT 21
31212: PUSH
31213: LD_INT 3
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PPUSH
31228: CALL_OW 69
31232: ST_TO_ADDR
// for i in mines do
31233: LD_ADDR_VAR 0 4
31237: PUSH
31238: LD_VAR 0 2
31242: PUSH
31243: FOR_IN
31244: IFFALSE 31332
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31246: LD_VAR 0 4
31250: PUSH
31251: LD_INT 1
31253: ARRAY
31254: PPUSH
31255: LD_VAR 0 4
31259: PUSH
31260: LD_INT 2
31262: ARRAY
31263: PPUSH
31264: CALL_OW 458
31268: NOT
31269: IFFALSE 31273
// continue ;
31271: GO 31243
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31273: LD_VAR 0 4
31277: PUSH
31278: LD_INT 1
31280: ARRAY
31281: PPUSH
31282: LD_VAR 0 4
31286: PUSH
31287: LD_INT 2
31289: ARRAY
31290: PPUSH
31291: CALL_OW 428
31295: PUSH
31296: LD_VAR 0 5
31300: IN
31301: IFFALSE 31330
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31303: LD_VAR 0 4
31307: PUSH
31308: LD_INT 1
31310: ARRAY
31311: PPUSH
31312: LD_VAR 0 4
31316: PUSH
31317: LD_INT 2
31319: ARRAY
31320: PPUSH
31321: LD_VAR 0 1
31325: PPUSH
31326: CALL_OW 456
// end ;
31330: GO 31243
31332: POP
31333: POP
// end ;
31334: LD_VAR 0 3
31338: RET
// export function Count ( array ) ; var i ; begin
31339: LD_INT 0
31341: PPUSH
31342: PPUSH
// result := 0 ;
31343: LD_ADDR_VAR 0 2
31347: PUSH
31348: LD_INT 0
31350: ST_TO_ADDR
// for i in array do
31351: LD_ADDR_VAR 0 3
31355: PUSH
31356: LD_VAR 0 1
31360: PUSH
31361: FOR_IN
31362: IFFALSE 31386
// if i then
31364: LD_VAR 0 3
31368: IFFALSE 31384
// result := result + 1 ;
31370: LD_ADDR_VAR 0 2
31374: PUSH
31375: LD_VAR 0 2
31379: PUSH
31380: LD_INT 1
31382: PLUS
31383: ST_TO_ADDR
31384: GO 31361
31386: POP
31387: POP
// end ;
31388: LD_VAR 0 2
31392: RET
// export function IsEmpty ( building ) ; begin
31393: LD_INT 0
31395: PPUSH
// if not building then
31396: LD_VAR 0 1
31400: NOT
31401: IFFALSE 31405
// exit ;
31403: GO 31448
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31405: LD_ADDR_VAR 0 2
31409: PUSH
31410: LD_VAR 0 1
31414: PUSH
31415: LD_INT 22
31417: PUSH
31418: LD_VAR 0 1
31422: PPUSH
31423: CALL_OW 255
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 58
31434: PUSH
31435: EMPTY
31436: LIST
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PPUSH
31442: CALL_OW 69
31446: IN
31447: ST_TO_ADDR
// end ;
31448: LD_VAR 0 2
31452: RET
// export function IsNotFull ( building ) ; begin
31453: LD_INT 0
31455: PPUSH
// if not building then
31456: LD_VAR 0 1
31460: NOT
31461: IFFALSE 31465
// exit ;
31463: GO 31484
// result := UnitsInside ( building ) < 6 ;
31465: LD_ADDR_VAR 0 2
31469: PUSH
31470: LD_VAR 0 1
31474: PPUSH
31475: CALL_OW 313
31479: PUSH
31480: LD_INT 6
31482: LESS
31483: ST_TO_ADDR
// end ;
31484: LD_VAR 0 2
31488: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31489: LD_INT 0
31491: PPUSH
31492: PPUSH
31493: PPUSH
31494: PPUSH
// tmp := [ ] ;
31495: LD_ADDR_VAR 0 3
31499: PUSH
31500: EMPTY
31501: ST_TO_ADDR
// list := [ ] ;
31502: LD_ADDR_VAR 0 5
31506: PUSH
31507: EMPTY
31508: ST_TO_ADDR
// for i = 16 to 25 do
31509: LD_ADDR_VAR 0 4
31513: PUSH
31514: DOUBLE
31515: LD_INT 16
31517: DEC
31518: ST_TO_ADDR
31519: LD_INT 25
31521: PUSH
31522: FOR_TO
31523: IFFALSE 31596
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31525: LD_ADDR_VAR 0 3
31529: PUSH
31530: LD_VAR 0 3
31534: PUSH
31535: LD_INT 22
31537: PUSH
31538: LD_VAR 0 1
31542: PPUSH
31543: CALL_OW 255
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 91
31554: PUSH
31555: LD_VAR 0 1
31559: PUSH
31560: LD_INT 6
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 30
31570: PUSH
31571: LD_VAR 0 4
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: LIST
31584: PUSH
31585: EMPTY
31586: LIST
31587: PPUSH
31588: CALL_OW 69
31592: ADD
31593: ST_TO_ADDR
31594: GO 31522
31596: POP
31597: POP
// for i = 1 to tmp do
31598: LD_ADDR_VAR 0 4
31602: PUSH
31603: DOUBLE
31604: LD_INT 1
31606: DEC
31607: ST_TO_ADDR
31608: LD_VAR 0 3
31612: PUSH
31613: FOR_TO
31614: IFFALSE 31702
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31616: LD_ADDR_VAR 0 5
31620: PUSH
31621: LD_VAR 0 5
31625: PUSH
31626: LD_VAR 0 3
31630: PUSH
31631: LD_VAR 0 4
31635: ARRAY
31636: PPUSH
31637: CALL_OW 266
31641: PUSH
31642: LD_VAR 0 3
31646: PUSH
31647: LD_VAR 0 4
31651: ARRAY
31652: PPUSH
31653: CALL_OW 250
31657: PUSH
31658: LD_VAR 0 3
31662: PUSH
31663: LD_VAR 0 4
31667: ARRAY
31668: PPUSH
31669: CALL_OW 251
31673: PUSH
31674: LD_VAR 0 3
31678: PUSH
31679: LD_VAR 0 4
31683: ARRAY
31684: PPUSH
31685: CALL_OW 254
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: PUSH
31696: EMPTY
31697: LIST
31698: ADD
31699: ST_TO_ADDR
31700: GO 31613
31702: POP
31703: POP
// result := list ;
31704: LD_ADDR_VAR 0 2
31708: PUSH
31709: LD_VAR 0 5
31713: ST_TO_ADDR
// end ;
31714: LD_VAR 0 2
31718: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31719: LD_INT 0
31721: PPUSH
31722: PPUSH
31723: PPUSH
31724: PPUSH
31725: PPUSH
31726: PPUSH
31727: PPUSH
// if not factory then
31728: LD_VAR 0 1
31732: NOT
31733: IFFALSE 31737
// exit ;
31735: GO 32330
// if control = control_apeman then
31737: LD_VAR 0 4
31741: PUSH
31742: LD_INT 5
31744: EQUAL
31745: IFFALSE 31854
// begin tmp := UnitsInside ( factory ) ;
31747: LD_ADDR_VAR 0 8
31751: PUSH
31752: LD_VAR 0 1
31756: PPUSH
31757: CALL_OW 313
31761: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31762: LD_VAR 0 8
31766: PPUSH
31767: LD_INT 25
31769: PUSH
31770: LD_INT 12
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PPUSH
31777: CALL_OW 72
31781: NOT
31782: IFFALSE 31792
// control := control_manual ;
31784: LD_ADDR_VAR 0 4
31788: PUSH
31789: LD_INT 1
31791: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31792: LD_ADDR_VAR 0 8
31796: PUSH
31797: LD_VAR 0 1
31801: PPUSH
31802: CALL 31489 0 1
31806: ST_TO_ADDR
// if tmp then
31807: LD_VAR 0 8
31811: IFFALSE 31854
// begin for i in tmp do
31813: LD_ADDR_VAR 0 7
31817: PUSH
31818: LD_VAR 0 8
31822: PUSH
31823: FOR_IN
31824: IFFALSE 31852
// if i [ 1 ] = b_ext_radio then
31826: LD_VAR 0 7
31830: PUSH
31831: LD_INT 1
31833: ARRAY
31834: PUSH
31835: LD_INT 22
31837: EQUAL
31838: IFFALSE 31850
// begin control := control_remote ;
31840: LD_ADDR_VAR 0 4
31844: PUSH
31845: LD_INT 2
31847: ST_TO_ADDR
// break ;
31848: GO 31852
// end ;
31850: GO 31823
31852: POP
31853: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31854: LD_VAR 0 1
31858: PPUSH
31859: LD_VAR 0 2
31863: PPUSH
31864: LD_VAR 0 3
31868: PPUSH
31869: LD_VAR 0 4
31873: PPUSH
31874: LD_VAR 0 5
31878: PPUSH
31879: CALL_OW 448
31883: IFFALSE 31918
// begin result := [ chassis , engine , control , weapon ] ;
31885: LD_ADDR_VAR 0 6
31889: PUSH
31890: LD_VAR 0 2
31894: PUSH
31895: LD_VAR 0 3
31899: PUSH
31900: LD_VAR 0 4
31904: PUSH
31905: LD_VAR 0 5
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: ST_TO_ADDR
// exit ;
31916: GO 32330
// end ; _chassis := AvailableChassisList ( factory ) ;
31918: LD_ADDR_VAR 0 9
31922: PUSH
31923: LD_VAR 0 1
31927: PPUSH
31928: CALL_OW 475
31932: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31933: LD_ADDR_VAR 0 11
31937: PUSH
31938: LD_VAR 0 1
31942: PPUSH
31943: CALL_OW 476
31947: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31948: LD_ADDR_VAR 0 12
31952: PUSH
31953: LD_VAR 0 1
31957: PPUSH
31958: CALL_OW 477
31962: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31963: LD_ADDR_VAR 0 10
31967: PUSH
31968: LD_VAR 0 1
31972: PPUSH
31973: CALL_OW 478
31977: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31978: LD_VAR 0 9
31982: NOT
31983: PUSH
31984: LD_VAR 0 11
31988: NOT
31989: OR
31990: PUSH
31991: LD_VAR 0 12
31995: NOT
31996: OR
31997: PUSH
31998: LD_VAR 0 10
32002: NOT
32003: OR
32004: IFFALSE 32039
// begin result := [ chassis , engine , control , weapon ] ;
32006: LD_ADDR_VAR 0 6
32010: PUSH
32011: LD_VAR 0 2
32015: PUSH
32016: LD_VAR 0 3
32020: PUSH
32021: LD_VAR 0 4
32025: PUSH
32026: LD_VAR 0 5
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: ST_TO_ADDR
// exit ;
32037: GO 32330
// end ; if not chassis in _chassis then
32039: LD_VAR 0 2
32043: PUSH
32044: LD_VAR 0 9
32048: IN
32049: NOT
32050: IFFALSE 32076
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32052: LD_ADDR_VAR 0 2
32056: PUSH
32057: LD_VAR 0 9
32061: PUSH
32062: LD_INT 1
32064: PPUSH
32065: LD_VAR 0 9
32069: PPUSH
32070: CALL_OW 12
32074: ARRAY
32075: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32076: LD_VAR 0 2
32080: PPUSH
32081: LD_VAR 0 3
32085: PPUSH
32086: CALL 32335 0 2
32090: NOT
32091: IFFALSE 32150
// repeat engine := _engine [ 1 ] ;
32093: LD_ADDR_VAR 0 3
32097: PUSH
32098: LD_VAR 0 11
32102: PUSH
32103: LD_INT 1
32105: ARRAY
32106: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32107: LD_ADDR_VAR 0 11
32111: PUSH
32112: LD_VAR 0 11
32116: PPUSH
32117: LD_INT 1
32119: PPUSH
32120: CALL_OW 3
32124: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32125: LD_VAR 0 2
32129: PPUSH
32130: LD_VAR 0 3
32134: PPUSH
32135: CALL 32335 0 2
32139: PUSH
32140: LD_VAR 0 11
32144: PUSH
32145: EMPTY
32146: EQUAL
32147: OR
32148: IFFALSE 32093
// if not control in _control then
32150: LD_VAR 0 4
32154: PUSH
32155: LD_VAR 0 12
32159: IN
32160: NOT
32161: IFFALSE 32187
// control := _control [ rand ( 1 , _control ) ] ;
32163: LD_ADDR_VAR 0 4
32167: PUSH
32168: LD_VAR 0 12
32172: PUSH
32173: LD_INT 1
32175: PPUSH
32176: LD_VAR 0 12
32180: PPUSH
32181: CALL_OW 12
32185: ARRAY
32186: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32187: LD_VAR 0 2
32191: PPUSH
32192: LD_VAR 0 5
32196: PPUSH
32197: CALL 32555 0 2
32201: NOT
32202: IFFALSE 32261
// repeat weapon := _weapon [ 1 ] ;
32204: LD_ADDR_VAR 0 5
32208: PUSH
32209: LD_VAR 0 10
32213: PUSH
32214: LD_INT 1
32216: ARRAY
32217: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32218: LD_ADDR_VAR 0 10
32222: PUSH
32223: LD_VAR 0 10
32227: PPUSH
32228: LD_INT 1
32230: PPUSH
32231: CALL_OW 3
32235: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32236: LD_VAR 0 2
32240: PPUSH
32241: LD_VAR 0 5
32245: PPUSH
32246: CALL 32555 0 2
32250: PUSH
32251: LD_VAR 0 10
32255: PUSH
32256: EMPTY
32257: EQUAL
32258: OR
32259: IFFALSE 32204
// result := [ ] ;
32261: LD_ADDR_VAR 0 6
32265: PUSH
32266: EMPTY
32267: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32268: LD_VAR 0 1
32272: PPUSH
32273: LD_VAR 0 2
32277: PPUSH
32278: LD_VAR 0 3
32282: PPUSH
32283: LD_VAR 0 4
32287: PPUSH
32288: LD_VAR 0 5
32292: PPUSH
32293: CALL_OW 448
32297: IFFALSE 32330
// result := [ chassis , engine , control , weapon ] ;
32299: LD_ADDR_VAR 0 6
32303: PUSH
32304: LD_VAR 0 2
32308: PUSH
32309: LD_VAR 0 3
32313: PUSH
32314: LD_VAR 0 4
32318: PUSH
32319: LD_VAR 0 5
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: ST_TO_ADDR
// end ;
32330: LD_VAR 0 6
32334: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32335: LD_INT 0
32337: PPUSH
// if not chassis or not engine then
32338: LD_VAR 0 1
32342: NOT
32343: PUSH
32344: LD_VAR 0 2
32348: NOT
32349: OR
32350: IFFALSE 32354
// exit ;
32352: GO 32550
// case engine of engine_solar :
32354: LD_VAR 0 2
32358: PUSH
32359: LD_INT 2
32361: DOUBLE
32362: EQUAL
32363: IFTRUE 32367
32365: GO 32405
32367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32368: LD_ADDR_VAR 0 3
32372: PUSH
32373: LD_INT 11
32375: PUSH
32376: LD_INT 12
32378: PUSH
32379: LD_INT 13
32381: PUSH
32382: LD_INT 14
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: LD_INT 3
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: ST_TO_ADDR
32403: GO 32534
32405: LD_INT 1
32407: DOUBLE
32408: EQUAL
32409: IFTRUE 32413
32411: GO 32475
32413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32414: LD_ADDR_VAR 0 3
32418: PUSH
32419: LD_INT 11
32421: PUSH
32422: LD_INT 12
32424: PUSH
32425: LD_INT 13
32427: PUSH
32428: LD_INT 14
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: LD_INT 3
32439: PUSH
32440: LD_INT 4
32442: PUSH
32443: LD_INT 5
32445: PUSH
32446: LD_INT 21
32448: PUSH
32449: LD_INT 23
32451: PUSH
32452: LD_INT 22
32454: PUSH
32455: LD_INT 24
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: ST_TO_ADDR
32473: GO 32534
32475: LD_INT 3
32477: DOUBLE
32478: EQUAL
32479: IFTRUE 32483
32481: GO 32533
32483: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32484: LD_ADDR_VAR 0 3
32488: PUSH
32489: LD_INT 13
32491: PUSH
32492: LD_INT 14
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: LD_INT 4
32503: PUSH
32504: LD_INT 5
32506: PUSH
32507: LD_INT 21
32509: PUSH
32510: LD_INT 22
32512: PUSH
32513: LD_INT 23
32515: PUSH
32516: LD_INT 24
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: ST_TO_ADDR
32531: GO 32534
32533: POP
// result := ( chassis in result ) ;
32534: LD_ADDR_VAR 0 3
32538: PUSH
32539: LD_VAR 0 1
32543: PUSH
32544: LD_VAR 0 3
32548: IN
32549: ST_TO_ADDR
// end ;
32550: LD_VAR 0 3
32554: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32555: LD_INT 0
32557: PPUSH
// if not chassis or not weapon then
32558: LD_VAR 0 1
32562: NOT
32563: PUSH
32564: LD_VAR 0 2
32568: NOT
32569: OR
32570: IFFALSE 32574
// exit ;
32572: GO 33600
// case weapon of us_machine_gun :
32574: LD_VAR 0 2
32578: PUSH
32579: LD_INT 2
32581: DOUBLE
32582: EQUAL
32583: IFTRUE 32587
32585: GO 32617
32587: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32588: LD_ADDR_VAR 0 3
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: LD_INT 2
32598: PUSH
32599: LD_INT 3
32601: PUSH
32602: LD_INT 4
32604: PUSH
32605: LD_INT 5
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: ST_TO_ADDR
32615: GO 33584
32617: LD_INT 3
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32625
32623: GO 32655
32625: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32626: LD_ADDR_VAR 0 3
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 3
32639: PUSH
32640: LD_INT 4
32642: PUSH
32643: LD_INT 5
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
32653: GO 33584
32655: LD_INT 11
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32693
32663: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32664: LD_ADDR_VAR 0 3
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 3
32677: PUSH
32678: LD_INT 4
32680: PUSH
32681: LD_INT 5
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: ST_TO_ADDR
32691: GO 33584
32693: LD_INT 4
32695: DOUBLE
32696: EQUAL
32697: IFTRUE 32701
32699: GO 32727
32701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32702: LD_ADDR_VAR 0 3
32706: PUSH
32707: LD_INT 2
32709: PUSH
32710: LD_INT 3
32712: PUSH
32713: LD_INT 4
32715: PUSH
32716: LD_INT 5
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: ST_TO_ADDR
32725: GO 33584
32727: LD_INT 5
32729: DOUBLE
32730: EQUAL
32731: IFTRUE 32735
32733: GO 32761
32735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32736: LD_ADDR_VAR 0 3
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: LD_INT 3
32746: PUSH
32747: LD_INT 4
32749: PUSH
32750: LD_INT 5
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: ST_TO_ADDR
32759: GO 33584
32761: LD_INT 9
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32769
32767: GO 32795
32769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32770: LD_ADDR_VAR 0 3
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: LD_INT 4
32783: PUSH
32784: LD_INT 5
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: ST_TO_ADDR
32793: GO 33584
32795: LD_INT 7
32797: DOUBLE
32798: EQUAL
32799: IFTRUE 32803
32801: GO 32829
32803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32804: LD_ADDR_VAR 0 3
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: LD_INT 3
32814: PUSH
32815: LD_INT 4
32817: PUSH
32818: LD_INT 5
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: ST_TO_ADDR
32827: GO 33584
32829: LD_INT 12
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32837
32835: GO 32863
32837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32838: LD_ADDR_VAR 0 3
32842: PUSH
32843: LD_INT 2
32845: PUSH
32846: LD_INT 3
32848: PUSH
32849: LD_INT 4
32851: PUSH
32852: LD_INT 5
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: ST_TO_ADDR
32861: GO 33584
32863: LD_INT 13
32865: DOUBLE
32866: EQUAL
32867: IFTRUE 32871
32869: GO 32897
32871: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32872: LD_ADDR_VAR 0 3
32876: PUSH
32877: LD_INT 2
32879: PUSH
32880: LD_INT 3
32882: PUSH
32883: LD_INT 4
32885: PUSH
32886: LD_INT 5
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: ST_TO_ADDR
32895: GO 33584
32897: LD_INT 14
32899: DOUBLE
32900: EQUAL
32901: IFTRUE 32905
32903: GO 32923
32905: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32906: LD_ADDR_VAR 0 3
32910: PUSH
32911: LD_INT 4
32913: PUSH
32914: LD_INT 5
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: ST_TO_ADDR
32921: GO 33584
32923: LD_INT 6
32925: DOUBLE
32926: EQUAL
32927: IFTRUE 32931
32929: GO 32949
32931: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32932: LD_ADDR_VAR 0 3
32936: PUSH
32937: LD_INT 4
32939: PUSH
32940: LD_INT 5
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: ST_TO_ADDR
32947: GO 33584
32949: LD_INT 10
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 32975
32957: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32958: LD_ADDR_VAR 0 3
32962: PUSH
32963: LD_INT 4
32965: PUSH
32966: LD_INT 5
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: ST_TO_ADDR
32973: GO 33584
32975: LD_INT 22
32977: DOUBLE
32978: EQUAL
32979: IFTRUE 32983
32981: GO 33009
32983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32984: LD_ADDR_VAR 0 3
32988: PUSH
32989: LD_INT 11
32991: PUSH
32992: LD_INT 12
32994: PUSH
32995: LD_INT 13
32997: PUSH
32998: LD_INT 14
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: ST_TO_ADDR
33007: GO 33584
33009: LD_INT 23
33011: DOUBLE
33012: EQUAL
33013: IFTRUE 33017
33015: GO 33043
33017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33018: LD_ADDR_VAR 0 3
33022: PUSH
33023: LD_INT 11
33025: PUSH
33026: LD_INT 12
33028: PUSH
33029: LD_INT 13
33031: PUSH
33032: LD_INT 14
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: ST_TO_ADDR
33041: GO 33584
33043: LD_INT 24
33045: DOUBLE
33046: EQUAL
33047: IFTRUE 33051
33049: GO 33077
33051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33052: LD_ADDR_VAR 0 3
33056: PUSH
33057: LD_INT 11
33059: PUSH
33060: LD_INT 12
33062: PUSH
33063: LD_INT 13
33065: PUSH
33066: LD_INT 14
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: ST_TO_ADDR
33075: GO 33584
33077: LD_INT 30
33079: DOUBLE
33080: EQUAL
33081: IFTRUE 33085
33083: GO 33111
33085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33086: LD_ADDR_VAR 0 3
33090: PUSH
33091: LD_INT 11
33093: PUSH
33094: LD_INT 12
33096: PUSH
33097: LD_INT 13
33099: PUSH
33100: LD_INT 14
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: ST_TO_ADDR
33109: GO 33584
33111: LD_INT 25
33113: DOUBLE
33114: EQUAL
33115: IFTRUE 33119
33117: GO 33137
33119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33120: LD_ADDR_VAR 0 3
33124: PUSH
33125: LD_INT 13
33127: PUSH
33128: LD_INT 14
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: ST_TO_ADDR
33135: GO 33584
33137: LD_INT 27
33139: DOUBLE
33140: EQUAL
33141: IFTRUE 33145
33143: GO 33163
33145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33146: LD_ADDR_VAR 0 3
33150: PUSH
33151: LD_INT 13
33153: PUSH
33154: LD_INT 14
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: ST_TO_ADDR
33161: GO 33584
33163: LD_INT 28
33165: DOUBLE
33166: EQUAL
33167: IFTRUE 33171
33169: GO 33189
33171: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33172: LD_ADDR_VAR 0 3
33176: PUSH
33177: LD_INT 13
33179: PUSH
33180: LD_INT 14
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: ST_TO_ADDR
33187: GO 33584
33189: LD_INT 29
33191: DOUBLE
33192: EQUAL
33193: IFTRUE 33197
33195: GO 33215
33197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33198: LD_ADDR_VAR 0 3
33202: PUSH
33203: LD_INT 13
33205: PUSH
33206: LD_INT 14
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: ST_TO_ADDR
33213: GO 33584
33215: LD_INT 31
33217: DOUBLE
33218: EQUAL
33219: IFTRUE 33223
33221: GO 33241
33223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_INT 13
33231: PUSH
33232: LD_INT 14
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: ST_TO_ADDR
33239: GO 33584
33241: LD_INT 26
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 33267
33249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33250: LD_ADDR_VAR 0 3
33254: PUSH
33255: LD_INT 13
33257: PUSH
33258: LD_INT 14
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: ST_TO_ADDR
33265: GO 33584
33267: LD_INT 42
33269: DOUBLE
33270: EQUAL
33271: IFTRUE 33275
33273: GO 33301
33275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33276: LD_ADDR_VAR 0 3
33280: PUSH
33281: LD_INT 21
33283: PUSH
33284: LD_INT 22
33286: PUSH
33287: LD_INT 23
33289: PUSH
33290: LD_INT 24
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: ST_TO_ADDR
33299: GO 33584
33301: LD_INT 43
33303: DOUBLE
33304: EQUAL
33305: IFTRUE 33309
33307: GO 33335
33309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33310: LD_ADDR_VAR 0 3
33314: PUSH
33315: LD_INT 21
33317: PUSH
33318: LD_INT 22
33320: PUSH
33321: LD_INT 23
33323: PUSH
33324: LD_INT 24
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: ST_TO_ADDR
33333: GO 33584
33335: LD_INT 44
33337: DOUBLE
33338: EQUAL
33339: IFTRUE 33343
33341: GO 33369
33343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33344: LD_ADDR_VAR 0 3
33348: PUSH
33349: LD_INT 21
33351: PUSH
33352: LD_INT 22
33354: PUSH
33355: LD_INT 23
33357: PUSH
33358: LD_INT 24
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: ST_TO_ADDR
33367: GO 33584
33369: LD_INT 45
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33377
33375: GO 33403
33377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33378: LD_ADDR_VAR 0 3
33382: PUSH
33383: LD_INT 21
33385: PUSH
33386: LD_INT 22
33388: PUSH
33389: LD_INT 23
33391: PUSH
33392: LD_INT 24
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: ST_TO_ADDR
33401: GO 33584
33403: LD_INT 49
33405: DOUBLE
33406: EQUAL
33407: IFTRUE 33411
33409: GO 33437
33411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33412: LD_ADDR_VAR 0 3
33416: PUSH
33417: LD_INT 21
33419: PUSH
33420: LD_INT 22
33422: PUSH
33423: LD_INT 23
33425: PUSH
33426: LD_INT 24
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: ST_TO_ADDR
33435: GO 33584
33437: LD_INT 51
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33471
33445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33446: LD_ADDR_VAR 0 3
33450: PUSH
33451: LD_INT 21
33453: PUSH
33454: LD_INT 22
33456: PUSH
33457: LD_INT 23
33459: PUSH
33460: LD_INT 24
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: ST_TO_ADDR
33469: GO 33584
33471: LD_INT 52
33473: DOUBLE
33474: EQUAL
33475: IFTRUE 33479
33477: GO 33505
33479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33480: LD_ADDR_VAR 0 3
33484: PUSH
33485: LD_INT 21
33487: PUSH
33488: LD_INT 22
33490: PUSH
33491: LD_INT 23
33493: PUSH
33494: LD_INT 24
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: ST_TO_ADDR
33503: GO 33584
33505: LD_INT 53
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 33531
33513: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33514: LD_ADDR_VAR 0 3
33518: PUSH
33519: LD_INT 23
33521: PUSH
33522: LD_INT 24
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: ST_TO_ADDR
33529: GO 33584
33531: LD_INT 46
33533: DOUBLE
33534: EQUAL
33535: IFTRUE 33539
33537: GO 33557
33539: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33540: LD_ADDR_VAR 0 3
33544: PUSH
33545: LD_INT 23
33547: PUSH
33548: LD_INT 24
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: ST_TO_ADDR
33555: GO 33584
33557: LD_INT 47
33559: DOUBLE
33560: EQUAL
33561: IFTRUE 33565
33563: GO 33583
33565: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33566: LD_ADDR_VAR 0 3
33570: PUSH
33571: LD_INT 23
33573: PUSH
33574: LD_INT 24
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: ST_TO_ADDR
33581: GO 33584
33583: POP
// result := ( chassis in result ) ;
33584: LD_ADDR_VAR 0 3
33588: PUSH
33589: LD_VAR 0 1
33593: PUSH
33594: LD_VAR 0 3
33598: IN
33599: ST_TO_ADDR
// end ;
33600: LD_VAR 0 3
33604: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33605: LD_INT 0
33607: PPUSH
33608: PPUSH
33609: PPUSH
33610: PPUSH
33611: PPUSH
33612: PPUSH
33613: PPUSH
// result := array ;
33614: LD_ADDR_VAR 0 5
33618: PUSH
33619: LD_VAR 0 1
33623: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33624: LD_VAR 0 1
33628: NOT
33629: PUSH
33630: LD_VAR 0 2
33634: NOT
33635: OR
33636: PUSH
33637: LD_VAR 0 3
33641: NOT
33642: OR
33643: PUSH
33644: LD_VAR 0 2
33648: PUSH
33649: LD_VAR 0 1
33653: GREATER
33654: OR
33655: PUSH
33656: LD_VAR 0 3
33660: PUSH
33661: LD_VAR 0 1
33665: GREATER
33666: OR
33667: IFFALSE 33671
// exit ;
33669: GO 33967
// if direction then
33671: LD_VAR 0 4
33675: IFFALSE 33739
// begin d := 1 ;
33677: LD_ADDR_VAR 0 9
33681: PUSH
33682: LD_INT 1
33684: ST_TO_ADDR
// if i_from > i_to then
33685: LD_VAR 0 2
33689: PUSH
33690: LD_VAR 0 3
33694: GREATER
33695: IFFALSE 33721
// length := ( array - i_from ) + i_to else
33697: LD_ADDR_VAR 0 11
33701: PUSH
33702: LD_VAR 0 1
33706: PUSH
33707: LD_VAR 0 2
33711: MINUS
33712: PUSH
33713: LD_VAR 0 3
33717: PLUS
33718: ST_TO_ADDR
33719: GO 33737
// length := i_to - i_from ;
33721: LD_ADDR_VAR 0 11
33725: PUSH
33726: LD_VAR 0 3
33730: PUSH
33731: LD_VAR 0 2
33735: MINUS
33736: ST_TO_ADDR
// end else
33737: GO 33800
// begin d := - 1 ;
33739: LD_ADDR_VAR 0 9
33743: PUSH
33744: LD_INT 1
33746: NEG
33747: ST_TO_ADDR
// if i_from > i_to then
33748: LD_VAR 0 2
33752: PUSH
33753: LD_VAR 0 3
33757: GREATER
33758: IFFALSE 33778
// length := i_from - i_to else
33760: LD_ADDR_VAR 0 11
33764: PUSH
33765: LD_VAR 0 2
33769: PUSH
33770: LD_VAR 0 3
33774: MINUS
33775: ST_TO_ADDR
33776: GO 33800
// length := ( array - i_to ) + i_from ;
33778: LD_ADDR_VAR 0 11
33782: PUSH
33783: LD_VAR 0 1
33787: PUSH
33788: LD_VAR 0 3
33792: MINUS
33793: PUSH
33794: LD_VAR 0 2
33798: PLUS
33799: ST_TO_ADDR
// end ; if not length then
33800: LD_VAR 0 11
33804: NOT
33805: IFFALSE 33809
// exit ;
33807: GO 33967
// tmp := array ;
33809: LD_ADDR_VAR 0 10
33813: PUSH
33814: LD_VAR 0 1
33818: ST_TO_ADDR
// for i = 1 to length do
33819: LD_ADDR_VAR 0 6
33823: PUSH
33824: DOUBLE
33825: LD_INT 1
33827: DEC
33828: ST_TO_ADDR
33829: LD_VAR 0 11
33833: PUSH
33834: FOR_TO
33835: IFFALSE 33955
// begin for j = 1 to array do
33837: LD_ADDR_VAR 0 7
33841: PUSH
33842: DOUBLE
33843: LD_INT 1
33845: DEC
33846: ST_TO_ADDR
33847: LD_VAR 0 1
33851: PUSH
33852: FOR_TO
33853: IFFALSE 33941
// begin k := j + d ;
33855: LD_ADDR_VAR 0 8
33859: PUSH
33860: LD_VAR 0 7
33864: PUSH
33865: LD_VAR 0 9
33869: PLUS
33870: ST_TO_ADDR
// if k > array then
33871: LD_VAR 0 8
33875: PUSH
33876: LD_VAR 0 1
33880: GREATER
33881: IFFALSE 33891
// k := 1 ;
33883: LD_ADDR_VAR 0 8
33887: PUSH
33888: LD_INT 1
33890: ST_TO_ADDR
// if not k then
33891: LD_VAR 0 8
33895: NOT
33896: IFFALSE 33908
// k := array ;
33898: LD_ADDR_VAR 0 8
33902: PUSH
33903: LD_VAR 0 1
33907: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33908: LD_ADDR_VAR 0 10
33912: PUSH
33913: LD_VAR 0 10
33917: PPUSH
33918: LD_VAR 0 8
33922: PPUSH
33923: LD_VAR 0 1
33927: PUSH
33928: LD_VAR 0 7
33932: ARRAY
33933: PPUSH
33934: CALL_OW 1
33938: ST_TO_ADDR
// end ;
33939: GO 33852
33941: POP
33942: POP
// array := tmp ;
33943: LD_ADDR_VAR 0 1
33947: PUSH
33948: LD_VAR 0 10
33952: ST_TO_ADDR
// end ;
33953: GO 33834
33955: POP
33956: POP
// result := array ;
33957: LD_ADDR_VAR 0 5
33961: PUSH
33962: LD_VAR 0 1
33966: ST_TO_ADDR
// end ;
33967: LD_VAR 0 5
33971: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33972: LD_INT 0
33974: PPUSH
33975: PPUSH
// result := 0 ;
33976: LD_ADDR_VAR 0 3
33980: PUSH
33981: LD_INT 0
33983: ST_TO_ADDR
// if not array or not value in array then
33984: LD_VAR 0 1
33988: NOT
33989: PUSH
33990: LD_VAR 0 2
33994: PUSH
33995: LD_VAR 0 1
33999: IN
34000: NOT
34001: OR
34002: IFFALSE 34006
// exit ;
34004: GO 34060
// for i = 1 to array do
34006: LD_ADDR_VAR 0 4
34010: PUSH
34011: DOUBLE
34012: LD_INT 1
34014: DEC
34015: ST_TO_ADDR
34016: LD_VAR 0 1
34020: PUSH
34021: FOR_TO
34022: IFFALSE 34058
// if value = array [ i ] then
34024: LD_VAR 0 2
34028: PUSH
34029: LD_VAR 0 1
34033: PUSH
34034: LD_VAR 0 4
34038: ARRAY
34039: EQUAL
34040: IFFALSE 34056
// begin result := i ;
34042: LD_ADDR_VAR 0 3
34046: PUSH
34047: LD_VAR 0 4
34051: ST_TO_ADDR
// exit ;
34052: POP
34053: POP
34054: GO 34060
// end ;
34056: GO 34021
34058: POP
34059: POP
// end ;
34060: LD_VAR 0 3
34064: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34065: LD_INT 0
34067: PPUSH
// vc_chassis := chassis ;
34068: LD_ADDR_OWVAR 37
34072: PUSH
34073: LD_VAR 0 1
34077: ST_TO_ADDR
// vc_engine := engine ;
34078: LD_ADDR_OWVAR 39
34082: PUSH
34083: LD_VAR 0 2
34087: ST_TO_ADDR
// vc_control := control ;
34088: LD_ADDR_OWVAR 38
34092: PUSH
34093: LD_VAR 0 3
34097: ST_TO_ADDR
// vc_weapon := weapon ;
34098: LD_ADDR_OWVAR 40
34102: PUSH
34103: LD_VAR 0 4
34107: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34108: LD_ADDR_OWVAR 41
34112: PUSH
34113: LD_VAR 0 5
34117: ST_TO_ADDR
// end ;
34118: LD_VAR 0 6
34122: RET
// export function WantPlant ( unit ) ; var task ; begin
34123: LD_INT 0
34125: PPUSH
34126: PPUSH
// result := false ;
34127: LD_ADDR_VAR 0 2
34131: PUSH
34132: LD_INT 0
34134: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34135: LD_ADDR_VAR 0 3
34139: PUSH
34140: LD_VAR 0 1
34144: PPUSH
34145: CALL_OW 437
34149: ST_TO_ADDR
// if task then
34150: LD_VAR 0 3
34154: IFFALSE 34182
// if task [ 1 ] [ 1 ] = p then
34156: LD_VAR 0 3
34160: PUSH
34161: LD_INT 1
34163: ARRAY
34164: PUSH
34165: LD_INT 1
34167: ARRAY
34168: PUSH
34169: LD_STRING p
34171: EQUAL
34172: IFFALSE 34182
// result := true ;
34174: LD_ADDR_VAR 0 2
34178: PUSH
34179: LD_INT 1
34181: ST_TO_ADDR
// end ;
34182: LD_VAR 0 2
34186: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34187: LD_INT 0
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
// if pos < 1 then
34193: LD_VAR 0 2
34197: PUSH
34198: LD_INT 1
34200: LESS
34201: IFFALSE 34205
// exit ;
34203: GO 34508
// if pos = 1 then
34205: LD_VAR 0 2
34209: PUSH
34210: LD_INT 1
34212: EQUAL
34213: IFFALSE 34246
// result := Replace ( arr , pos [ 1 ] , value ) else
34215: LD_ADDR_VAR 0 4
34219: PUSH
34220: LD_VAR 0 1
34224: PPUSH
34225: LD_VAR 0 2
34229: PUSH
34230: LD_INT 1
34232: ARRAY
34233: PPUSH
34234: LD_VAR 0 3
34238: PPUSH
34239: CALL_OW 1
34243: ST_TO_ADDR
34244: GO 34508
// begin tmp := arr ;
34246: LD_ADDR_VAR 0 6
34250: PUSH
34251: LD_VAR 0 1
34255: ST_TO_ADDR
// s_arr := [ tmp ] ;
34256: LD_ADDR_VAR 0 7
34260: PUSH
34261: LD_VAR 0 6
34265: PUSH
34266: EMPTY
34267: LIST
34268: ST_TO_ADDR
// for i = 1 to pos - 1 do
34269: LD_ADDR_VAR 0 5
34273: PUSH
34274: DOUBLE
34275: LD_INT 1
34277: DEC
34278: ST_TO_ADDR
34279: LD_VAR 0 2
34283: PUSH
34284: LD_INT 1
34286: MINUS
34287: PUSH
34288: FOR_TO
34289: IFFALSE 34334
// begin tmp := tmp [ pos [ i ] ] ;
34291: LD_ADDR_VAR 0 6
34295: PUSH
34296: LD_VAR 0 6
34300: PUSH
34301: LD_VAR 0 2
34305: PUSH
34306: LD_VAR 0 5
34310: ARRAY
34311: ARRAY
34312: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34313: LD_ADDR_VAR 0 7
34317: PUSH
34318: LD_VAR 0 7
34322: PUSH
34323: LD_VAR 0 6
34327: PUSH
34328: EMPTY
34329: LIST
34330: ADD
34331: ST_TO_ADDR
// end ;
34332: GO 34288
34334: POP
34335: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34336: LD_ADDR_VAR 0 6
34340: PUSH
34341: LD_VAR 0 6
34345: PPUSH
34346: LD_VAR 0 2
34350: PUSH
34351: LD_VAR 0 2
34355: ARRAY
34356: PPUSH
34357: LD_VAR 0 3
34361: PPUSH
34362: CALL_OW 1
34366: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34367: LD_ADDR_VAR 0 7
34371: PUSH
34372: LD_VAR 0 7
34376: PPUSH
34377: LD_VAR 0 7
34381: PPUSH
34382: LD_VAR 0 6
34386: PPUSH
34387: CALL_OW 1
34391: ST_TO_ADDR
// for i = s_arr downto 2 do
34392: LD_ADDR_VAR 0 5
34396: PUSH
34397: DOUBLE
34398: LD_VAR 0 7
34402: INC
34403: ST_TO_ADDR
34404: LD_INT 2
34406: PUSH
34407: FOR_DOWNTO
34408: IFFALSE 34492
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34410: LD_ADDR_VAR 0 6
34414: PUSH
34415: LD_VAR 0 7
34419: PUSH
34420: LD_VAR 0 5
34424: PUSH
34425: LD_INT 1
34427: MINUS
34428: ARRAY
34429: PPUSH
34430: LD_VAR 0 2
34434: PUSH
34435: LD_VAR 0 5
34439: PUSH
34440: LD_INT 1
34442: MINUS
34443: ARRAY
34444: PPUSH
34445: LD_VAR 0 7
34449: PUSH
34450: LD_VAR 0 5
34454: ARRAY
34455: PPUSH
34456: CALL_OW 1
34460: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34461: LD_ADDR_VAR 0 7
34465: PUSH
34466: LD_VAR 0 7
34470: PPUSH
34471: LD_VAR 0 5
34475: PUSH
34476: LD_INT 1
34478: MINUS
34479: PPUSH
34480: LD_VAR 0 6
34484: PPUSH
34485: CALL_OW 1
34489: ST_TO_ADDR
// end ;
34490: GO 34407
34492: POP
34493: POP
// result := s_arr [ 1 ] ;
34494: LD_ADDR_VAR 0 4
34498: PUSH
34499: LD_VAR 0 7
34503: PUSH
34504: LD_INT 1
34506: ARRAY
34507: ST_TO_ADDR
// end ; end ;
34508: LD_VAR 0 4
34512: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34513: LD_INT 0
34515: PPUSH
34516: PPUSH
// if not list then
34517: LD_VAR 0 1
34521: NOT
34522: IFFALSE 34526
// exit ;
34524: GO 34617
// i := list [ pos1 ] ;
34526: LD_ADDR_VAR 0 5
34530: PUSH
34531: LD_VAR 0 1
34535: PUSH
34536: LD_VAR 0 2
34540: ARRAY
34541: ST_TO_ADDR
// if not i then
34542: LD_VAR 0 5
34546: NOT
34547: IFFALSE 34551
// exit ;
34549: GO 34617
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34551: LD_ADDR_VAR 0 1
34555: PUSH
34556: LD_VAR 0 1
34560: PPUSH
34561: LD_VAR 0 2
34565: PPUSH
34566: LD_VAR 0 1
34570: PUSH
34571: LD_VAR 0 3
34575: ARRAY
34576: PPUSH
34577: CALL_OW 1
34581: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34582: LD_ADDR_VAR 0 1
34586: PUSH
34587: LD_VAR 0 1
34591: PPUSH
34592: LD_VAR 0 3
34596: PPUSH
34597: LD_VAR 0 5
34601: PPUSH
34602: CALL_OW 1
34606: ST_TO_ADDR
// result := list ;
34607: LD_ADDR_VAR 0 4
34611: PUSH
34612: LD_VAR 0 1
34616: ST_TO_ADDR
// end ;
34617: LD_VAR 0 4
34621: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34622: LD_INT 0
34624: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34625: LD_ADDR_VAR 0 5
34629: PUSH
34630: LD_VAR 0 1
34634: PPUSH
34635: CALL_OW 250
34639: PPUSH
34640: LD_VAR 0 1
34644: PPUSH
34645: CALL_OW 251
34649: PPUSH
34650: LD_VAR 0 2
34654: PPUSH
34655: LD_VAR 0 3
34659: PPUSH
34660: LD_VAR 0 4
34664: PPUSH
34665: CALL 34675 0 5
34669: ST_TO_ADDR
// end ;
34670: LD_VAR 0 5
34674: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34675: LD_INT 0
34677: PPUSH
34678: PPUSH
34679: PPUSH
34680: PPUSH
// if not list then
34681: LD_VAR 0 3
34685: NOT
34686: IFFALSE 34690
// exit ;
34688: GO 35078
// result := [ ] ;
34690: LD_ADDR_VAR 0 6
34694: PUSH
34695: EMPTY
34696: ST_TO_ADDR
// for i in list do
34697: LD_ADDR_VAR 0 7
34701: PUSH
34702: LD_VAR 0 3
34706: PUSH
34707: FOR_IN
34708: IFFALSE 34910
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34710: LD_ADDR_VAR 0 9
34714: PUSH
34715: LD_VAR 0 7
34719: PPUSH
34720: LD_VAR 0 1
34724: PPUSH
34725: LD_VAR 0 2
34729: PPUSH
34730: CALL_OW 297
34734: ST_TO_ADDR
// if not result then
34735: LD_VAR 0 6
34739: NOT
34740: IFFALSE 34766
// result := [ [ i , tmp ] ] else
34742: LD_ADDR_VAR 0 6
34746: PUSH
34747: LD_VAR 0 7
34751: PUSH
34752: LD_VAR 0 9
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: EMPTY
34762: LIST
34763: ST_TO_ADDR
34764: GO 34908
// begin if result [ result ] [ 2 ] < tmp then
34766: LD_VAR 0 6
34770: PUSH
34771: LD_VAR 0 6
34775: ARRAY
34776: PUSH
34777: LD_INT 2
34779: ARRAY
34780: PUSH
34781: LD_VAR 0 9
34785: LESS
34786: IFFALSE 34828
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34788: LD_ADDR_VAR 0 6
34792: PUSH
34793: LD_VAR 0 6
34797: PPUSH
34798: LD_VAR 0 6
34802: PUSH
34803: LD_INT 1
34805: PLUS
34806: PPUSH
34807: LD_VAR 0 7
34811: PUSH
34812: LD_VAR 0 9
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PPUSH
34821: CALL_OW 2
34825: ST_TO_ADDR
34826: GO 34908
// for j = 1 to result do
34828: LD_ADDR_VAR 0 8
34832: PUSH
34833: DOUBLE
34834: LD_INT 1
34836: DEC
34837: ST_TO_ADDR
34838: LD_VAR 0 6
34842: PUSH
34843: FOR_TO
34844: IFFALSE 34906
// begin if tmp < result [ j ] [ 2 ] then
34846: LD_VAR 0 9
34850: PUSH
34851: LD_VAR 0 6
34855: PUSH
34856: LD_VAR 0 8
34860: ARRAY
34861: PUSH
34862: LD_INT 2
34864: ARRAY
34865: LESS
34866: IFFALSE 34904
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34868: LD_ADDR_VAR 0 6
34872: PUSH
34873: LD_VAR 0 6
34877: PPUSH
34878: LD_VAR 0 8
34882: PPUSH
34883: LD_VAR 0 7
34887: PUSH
34888: LD_VAR 0 9
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PPUSH
34897: CALL_OW 2
34901: ST_TO_ADDR
// break ;
34902: GO 34906
// end ; end ;
34904: GO 34843
34906: POP
34907: POP
// end ; end ;
34908: GO 34707
34910: POP
34911: POP
// if result and not asc then
34912: LD_VAR 0 6
34916: PUSH
34917: LD_VAR 0 4
34921: NOT
34922: AND
34923: IFFALSE 34998
// begin tmp := result ;
34925: LD_ADDR_VAR 0 9
34929: PUSH
34930: LD_VAR 0 6
34934: ST_TO_ADDR
// for i = tmp downto 1 do
34935: LD_ADDR_VAR 0 7
34939: PUSH
34940: DOUBLE
34941: LD_VAR 0 9
34945: INC
34946: ST_TO_ADDR
34947: LD_INT 1
34949: PUSH
34950: FOR_DOWNTO
34951: IFFALSE 34996
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34953: LD_ADDR_VAR 0 6
34957: PUSH
34958: LD_VAR 0 6
34962: PPUSH
34963: LD_VAR 0 9
34967: PUSH
34968: LD_VAR 0 7
34972: MINUS
34973: PUSH
34974: LD_INT 1
34976: PLUS
34977: PPUSH
34978: LD_VAR 0 9
34982: PUSH
34983: LD_VAR 0 7
34987: ARRAY
34988: PPUSH
34989: CALL_OW 1
34993: ST_TO_ADDR
34994: GO 34950
34996: POP
34997: POP
// end ; tmp := [ ] ;
34998: LD_ADDR_VAR 0 9
35002: PUSH
35003: EMPTY
35004: ST_TO_ADDR
// if mode then
35005: LD_VAR 0 5
35009: IFFALSE 35078
// begin for i = 1 to result do
35011: LD_ADDR_VAR 0 7
35015: PUSH
35016: DOUBLE
35017: LD_INT 1
35019: DEC
35020: ST_TO_ADDR
35021: LD_VAR 0 6
35025: PUSH
35026: FOR_TO
35027: IFFALSE 35066
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35029: LD_ADDR_VAR 0 9
35033: PUSH
35034: LD_VAR 0 9
35038: PPUSH
35039: LD_VAR 0 7
35043: PPUSH
35044: LD_VAR 0 6
35048: PUSH
35049: LD_VAR 0 7
35053: ARRAY
35054: PUSH
35055: LD_INT 1
35057: ARRAY
35058: PPUSH
35059: CALL_OW 1
35063: ST_TO_ADDR
35064: GO 35026
35066: POP
35067: POP
// result := tmp ;
35068: LD_ADDR_VAR 0 6
35072: PUSH
35073: LD_VAR 0 9
35077: ST_TO_ADDR
// end ; end ;
35078: LD_VAR 0 6
35082: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35083: LD_INT 0
35085: PPUSH
35086: PPUSH
35087: PPUSH
35088: PPUSH
35089: PPUSH
35090: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35091: LD_ADDR_VAR 0 5
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: EMPTY
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: ST_TO_ADDR
// if not x or not y then
35113: LD_VAR 0 2
35117: NOT
35118: PUSH
35119: LD_VAR 0 3
35123: NOT
35124: OR
35125: IFFALSE 35129
// exit ;
35127: GO 36775
// if not range then
35129: LD_VAR 0 4
35133: NOT
35134: IFFALSE 35144
// range := 10 ;
35136: LD_ADDR_VAR 0 4
35140: PUSH
35141: LD_INT 10
35143: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35144: LD_ADDR_VAR 0 8
35148: PUSH
35149: LD_INT 81
35151: PUSH
35152: LD_VAR 0 1
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 92
35163: PUSH
35164: LD_VAR 0 2
35168: PUSH
35169: LD_VAR 0 3
35173: PUSH
35174: LD_VAR 0 4
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 3
35187: PUSH
35188: LD_INT 21
35190: PUSH
35191: LD_INT 3
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: LIST
35206: PPUSH
35207: CALL_OW 69
35211: ST_TO_ADDR
// if not tmp then
35212: LD_VAR 0 8
35216: NOT
35217: IFFALSE 35221
// exit ;
35219: GO 36775
// for i in tmp do
35221: LD_ADDR_VAR 0 6
35225: PUSH
35226: LD_VAR 0 8
35230: PUSH
35231: FOR_IN
35232: IFFALSE 36750
// begin points := [ 0 , 0 , 0 ] ;
35234: LD_ADDR_VAR 0 9
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: ST_TO_ADDR
// bpoints := 1 ;
35253: LD_ADDR_VAR 0 10
35257: PUSH
35258: LD_INT 1
35260: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35261: LD_VAR 0 6
35265: PPUSH
35266: CALL_OW 247
35270: PUSH
35271: LD_INT 1
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 35857
35279: POP
// begin if GetClass ( i ) = 1 then
35280: LD_VAR 0 6
35284: PPUSH
35285: CALL_OW 257
35289: PUSH
35290: LD_INT 1
35292: EQUAL
35293: IFFALSE 35314
// points := [ 10 , 5 , 3 ] ;
35295: LD_ADDR_VAR 0 9
35299: PUSH
35300: LD_INT 10
35302: PUSH
35303: LD_INT 5
35305: PUSH
35306: LD_INT 3
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: LIST
35313: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35314: LD_VAR 0 6
35318: PPUSH
35319: CALL_OW 257
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: LD_INT 3
35329: PUSH
35330: LD_INT 4
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: IN
35338: IFFALSE 35359
// points := [ 3 , 2 , 1 ] ;
35340: LD_ADDR_VAR 0 9
35344: PUSH
35345: LD_INT 3
35347: PUSH
35348: LD_INT 2
35350: PUSH
35351: LD_INT 1
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35359: LD_VAR 0 6
35363: PPUSH
35364: CALL_OW 257
35368: PUSH
35369: LD_INT 5
35371: EQUAL
35372: IFFALSE 35393
// points := [ 130 , 5 , 2 ] ;
35374: LD_ADDR_VAR 0 9
35378: PUSH
35379: LD_INT 130
35381: PUSH
35382: LD_INT 5
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35393: LD_VAR 0 6
35397: PPUSH
35398: CALL_OW 257
35402: PUSH
35403: LD_INT 8
35405: EQUAL
35406: IFFALSE 35427
// points := [ 35 , 35 , 30 ] ;
35408: LD_ADDR_VAR 0 9
35412: PUSH
35413: LD_INT 35
35415: PUSH
35416: LD_INT 35
35418: PUSH
35419: LD_INT 30
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: LIST
35426: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35427: LD_VAR 0 6
35431: PPUSH
35432: CALL_OW 257
35436: PUSH
35437: LD_INT 9
35439: EQUAL
35440: IFFALSE 35461
// points := [ 20 , 55 , 40 ] ;
35442: LD_ADDR_VAR 0 9
35446: PUSH
35447: LD_INT 20
35449: PUSH
35450: LD_INT 55
35452: PUSH
35453: LD_INT 40
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: LIST
35460: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35461: LD_VAR 0 6
35465: PPUSH
35466: CALL_OW 257
35470: PUSH
35471: LD_INT 12
35473: PUSH
35474: LD_INT 16
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: IN
35481: IFFALSE 35502
// points := [ 5 , 3 , 2 ] ;
35483: LD_ADDR_VAR 0 9
35487: PUSH
35488: LD_INT 5
35490: PUSH
35491: LD_INT 3
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35502: LD_VAR 0 6
35506: PPUSH
35507: CALL_OW 257
35511: PUSH
35512: LD_INT 17
35514: EQUAL
35515: IFFALSE 35536
// points := [ 100 , 50 , 75 ] ;
35517: LD_ADDR_VAR 0 9
35521: PUSH
35522: LD_INT 100
35524: PUSH
35525: LD_INT 50
35527: PUSH
35528: LD_INT 75
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35536: LD_VAR 0 6
35540: PPUSH
35541: CALL_OW 257
35545: PUSH
35546: LD_INT 15
35548: EQUAL
35549: IFFALSE 35570
// points := [ 10 , 5 , 3 ] ;
35551: LD_ADDR_VAR 0 9
35555: PUSH
35556: LD_INT 10
35558: PUSH
35559: LD_INT 5
35561: PUSH
35562: LD_INT 3
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: LIST
35569: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35570: LD_VAR 0 6
35574: PPUSH
35575: CALL_OW 257
35579: PUSH
35580: LD_INT 14
35582: EQUAL
35583: IFFALSE 35604
// points := [ 10 , 0 , 0 ] ;
35585: LD_ADDR_VAR 0 9
35589: PUSH
35590: LD_INT 10
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35604: LD_VAR 0 6
35608: PPUSH
35609: CALL_OW 257
35613: PUSH
35614: LD_INT 11
35616: EQUAL
35617: IFFALSE 35638
// points := [ 30 , 10 , 5 ] ;
35619: LD_ADDR_VAR 0 9
35623: PUSH
35624: LD_INT 30
35626: PUSH
35627: LD_INT 10
35629: PUSH
35630: LD_INT 5
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35638: LD_VAR 0 1
35642: PPUSH
35643: LD_INT 5
35645: PPUSH
35646: CALL_OW 321
35650: PUSH
35651: LD_INT 2
35653: EQUAL
35654: IFFALSE 35671
// bpoints := bpoints * 1.8 ;
35656: LD_ADDR_VAR 0 10
35660: PUSH
35661: LD_VAR 0 10
35665: PUSH
35666: LD_REAL  1.80000000000000E+0000
35669: MUL
35670: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35671: LD_VAR 0 6
35675: PPUSH
35676: CALL_OW 257
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: LD_INT 3
35689: PUSH
35690: LD_INT 4
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: IN
35699: PUSH
35700: LD_VAR 0 1
35704: PPUSH
35705: LD_INT 51
35707: PPUSH
35708: CALL_OW 321
35712: PUSH
35713: LD_INT 2
35715: EQUAL
35716: AND
35717: IFFALSE 35734
// bpoints := bpoints * 1.2 ;
35719: LD_ADDR_VAR 0 10
35723: PUSH
35724: LD_VAR 0 10
35728: PUSH
35729: LD_REAL  1.20000000000000E+0000
35732: MUL
35733: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35734: LD_VAR 0 6
35738: PPUSH
35739: CALL_OW 257
35743: PUSH
35744: LD_INT 5
35746: PUSH
35747: LD_INT 7
35749: PUSH
35750: LD_INT 9
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: IN
35758: PUSH
35759: LD_VAR 0 1
35763: PPUSH
35764: LD_INT 52
35766: PPUSH
35767: CALL_OW 321
35771: PUSH
35772: LD_INT 2
35774: EQUAL
35775: AND
35776: IFFALSE 35793
// bpoints := bpoints * 1.5 ;
35778: LD_ADDR_VAR 0 10
35782: PUSH
35783: LD_VAR 0 10
35787: PUSH
35788: LD_REAL  1.50000000000000E+0000
35791: MUL
35792: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35793: LD_VAR 0 1
35797: PPUSH
35798: LD_INT 66
35800: PPUSH
35801: CALL_OW 321
35805: PUSH
35806: LD_INT 2
35808: EQUAL
35809: IFFALSE 35826
// bpoints := bpoints * 1.1 ;
35811: LD_ADDR_VAR 0 10
35815: PUSH
35816: LD_VAR 0 10
35820: PUSH
35821: LD_REAL  1.10000000000000E+0000
35824: MUL
35825: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35826: LD_ADDR_VAR 0 10
35830: PUSH
35831: LD_VAR 0 10
35835: PUSH
35836: LD_VAR 0 6
35840: PPUSH
35841: LD_INT 1
35843: PPUSH
35844: CALL_OW 259
35848: PUSH
35849: LD_REAL  1.15000000000000E+0000
35852: MUL
35853: MUL
35854: ST_TO_ADDR
// end ; unit_vehicle :
35855: GO 36679
35857: LD_INT 2
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35865
35863: GO 36667
35865: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35866: LD_VAR 0 6
35870: PPUSH
35871: CALL_OW 264
35875: PUSH
35876: LD_INT 2
35878: PUSH
35879: LD_INT 42
35881: PUSH
35882: LD_INT 24
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: IN
35890: IFFALSE 35911
// points := [ 25 , 5 , 3 ] ;
35892: LD_ADDR_VAR 0 9
35896: PUSH
35897: LD_INT 25
35899: PUSH
35900: LD_INT 5
35902: PUSH
35903: LD_INT 3
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35911: LD_VAR 0 6
35915: PPUSH
35916: CALL_OW 264
35920: PUSH
35921: LD_INT 4
35923: PUSH
35924: LD_INT 43
35926: PUSH
35927: LD_INT 25
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: IN
35935: IFFALSE 35956
// points := [ 40 , 15 , 5 ] ;
35937: LD_ADDR_VAR 0 9
35941: PUSH
35942: LD_INT 40
35944: PUSH
35945: LD_INT 15
35947: PUSH
35948: LD_INT 5
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35956: LD_VAR 0 6
35960: PPUSH
35961: CALL_OW 264
35965: PUSH
35966: LD_INT 3
35968: PUSH
35969: LD_INT 23
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: IN
35976: IFFALSE 35997
// points := [ 7 , 25 , 8 ] ;
35978: LD_ADDR_VAR 0 9
35982: PUSH
35983: LD_INT 7
35985: PUSH
35986: LD_INT 25
35988: PUSH
35989: LD_INT 8
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35997: LD_VAR 0 6
36001: PPUSH
36002: CALL_OW 264
36006: PUSH
36007: LD_INT 5
36009: PUSH
36010: LD_INT 27
36012: PUSH
36013: LD_INT 44
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: IN
36021: IFFALSE 36042
// points := [ 14 , 50 , 16 ] ;
36023: LD_ADDR_VAR 0 9
36027: PUSH
36028: LD_INT 14
36030: PUSH
36031: LD_INT 50
36033: PUSH
36034: LD_INT 16
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36042: LD_VAR 0 6
36046: PPUSH
36047: CALL_OW 264
36051: PUSH
36052: LD_INT 6
36054: PUSH
36055: LD_INT 46
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: IN
36062: IFFALSE 36083
// points := [ 32 , 120 , 70 ] ;
36064: LD_ADDR_VAR 0 9
36068: PUSH
36069: LD_INT 32
36071: PUSH
36072: LD_INT 120
36074: PUSH
36075: LD_INT 70
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: LIST
36082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36083: LD_VAR 0 6
36087: PPUSH
36088: CALL_OW 264
36092: PUSH
36093: LD_INT 7
36095: PUSH
36096: LD_INT 28
36098: PUSH
36099: LD_INT 45
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: LIST
36106: IN
36107: IFFALSE 36128
// points := [ 35 , 20 , 45 ] ;
36109: LD_ADDR_VAR 0 9
36113: PUSH
36114: LD_INT 35
36116: PUSH
36117: LD_INT 20
36119: PUSH
36120: LD_INT 45
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36128: LD_VAR 0 6
36132: PPUSH
36133: CALL_OW 264
36137: PUSH
36138: LD_INT 47
36140: PUSH
36141: EMPTY
36142: LIST
36143: IN
36144: IFFALSE 36165
// points := [ 67 , 45 , 75 ] ;
36146: LD_ADDR_VAR 0 9
36150: PUSH
36151: LD_INT 67
36153: PUSH
36154: LD_INT 45
36156: PUSH
36157: LD_INT 75
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36165: LD_VAR 0 6
36169: PPUSH
36170: CALL_OW 264
36174: PUSH
36175: LD_INT 26
36177: PUSH
36178: EMPTY
36179: LIST
36180: IN
36181: IFFALSE 36202
// points := [ 120 , 30 , 80 ] ;
36183: LD_ADDR_VAR 0 9
36187: PUSH
36188: LD_INT 120
36190: PUSH
36191: LD_INT 30
36193: PUSH
36194: LD_INT 80
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: LIST
36201: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36202: LD_VAR 0 6
36206: PPUSH
36207: CALL_OW 264
36211: PUSH
36212: LD_INT 22
36214: PUSH
36215: EMPTY
36216: LIST
36217: IN
36218: IFFALSE 36239
// points := [ 40 , 1 , 1 ] ;
36220: LD_ADDR_VAR 0 9
36224: PUSH
36225: LD_INT 40
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36239: LD_VAR 0 6
36243: PPUSH
36244: CALL_OW 264
36248: PUSH
36249: LD_INT 29
36251: PUSH
36252: EMPTY
36253: LIST
36254: IN
36255: IFFALSE 36276
// points := [ 70 , 200 , 400 ] ;
36257: LD_ADDR_VAR 0 9
36261: PUSH
36262: LD_INT 70
36264: PUSH
36265: LD_INT 200
36267: PUSH
36268: LD_INT 400
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36276: LD_VAR 0 6
36280: PPUSH
36281: CALL_OW 264
36285: PUSH
36286: LD_INT 14
36288: PUSH
36289: LD_INT 53
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: IN
36296: IFFALSE 36317
// points := [ 40 , 10 , 20 ] ;
36298: LD_ADDR_VAR 0 9
36302: PUSH
36303: LD_INT 40
36305: PUSH
36306: LD_INT 10
36308: PUSH
36309: LD_INT 20
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: LIST
36316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36317: LD_VAR 0 6
36321: PPUSH
36322: CALL_OW 264
36326: PUSH
36327: LD_INT 9
36329: PUSH
36330: EMPTY
36331: LIST
36332: IN
36333: IFFALSE 36354
// points := [ 5 , 70 , 20 ] ;
36335: LD_ADDR_VAR 0 9
36339: PUSH
36340: LD_INT 5
36342: PUSH
36343: LD_INT 70
36345: PUSH
36346: LD_INT 20
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36354: LD_VAR 0 6
36358: PPUSH
36359: CALL_OW 264
36363: PUSH
36364: LD_INT 10
36366: PUSH
36367: EMPTY
36368: LIST
36369: IN
36370: IFFALSE 36391
// points := [ 35 , 110 , 70 ] ;
36372: LD_ADDR_VAR 0 9
36376: PUSH
36377: LD_INT 35
36379: PUSH
36380: LD_INT 110
36382: PUSH
36383: LD_INT 70
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36391: LD_VAR 0 6
36395: PPUSH
36396: CALL_OW 265
36400: PUSH
36401: LD_INT 25
36403: EQUAL
36404: IFFALSE 36425
// points := [ 80 , 65 , 100 ] ;
36406: LD_ADDR_VAR 0 9
36410: PUSH
36411: LD_INT 80
36413: PUSH
36414: LD_INT 65
36416: PUSH
36417: LD_INT 100
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: LIST
36424: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36425: LD_VAR 0 6
36429: PPUSH
36430: CALL_OW 263
36434: PUSH
36435: LD_INT 1
36437: EQUAL
36438: IFFALSE 36473
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36440: LD_ADDR_VAR 0 10
36444: PUSH
36445: LD_VAR 0 10
36449: PUSH
36450: LD_VAR 0 6
36454: PPUSH
36455: CALL_OW 311
36459: PPUSH
36460: LD_INT 3
36462: PPUSH
36463: CALL_OW 259
36467: PUSH
36468: LD_INT 4
36470: MUL
36471: MUL
36472: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36473: LD_VAR 0 6
36477: PPUSH
36478: CALL_OW 263
36482: PUSH
36483: LD_INT 2
36485: EQUAL
36486: IFFALSE 36537
// begin j := IsControledBy ( i ) ;
36488: LD_ADDR_VAR 0 7
36492: PUSH
36493: LD_VAR 0 6
36497: PPUSH
36498: CALL_OW 312
36502: ST_TO_ADDR
// if j then
36503: LD_VAR 0 7
36507: IFFALSE 36537
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36509: LD_ADDR_VAR 0 10
36513: PUSH
36514: LD_VAR 0 10
36518: PUSH
36519: LD_VAR 0 7
36523: PPUSH
36524: LD_INT 3
36526: PPUSH
36527: CALL_OW 259
36531: PUSH
36532: LD_INT 3
36534: MUL
36535: MUL
36536: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36537: LD_VAR 0 6
36541: PPUSH
36542: CALL_OW 264
36546: PUSH
36547: LD_INT 5
36549: PUSH
36550: LD_INT 6
36552: PUSH
36553: LD_INT 46
36555: PUSH
36556: LD_INT 44
36558: PUSH
36559: LD_INT 47
36561: PUSH
36562: LD_INT 45
36564: PUSH
36565: LD_INT 28
36567: PUSH
36568: LD_INT 7
36570: PUSH
36571: LD_INT 27
36573: PUSH
36574: LD_INT 29
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: IN
36589: PUSH
36590: LD_VAR 0 1
36594: PPUSH
36595: LD_INT 52
36597: PPUSH
36598: CALL_OW 321
36602: PUSH
36603: LD_INT 2
36605: EQUAL
36606: AND
36607: IFFALSE 36624
// bpoints := bpoints * 1.2 ;
36609: LD_ADDR_VAR 0 10
36613: PUSH
36614: LD_VAR 0 10
36618: PUSH
36619: LD_REAL  1.20000000000000E+0000
36622: MUL
36623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36624: LD_VAR 0 6
36628: PPUSH
36629: CALL_OW 264
36633: PUSH
36634: LD_INT 6
36636: PUSH
36637: LD_INT 46
36639: PUSH
36640: LD_INT 47
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: IN
36648: IFFALSE 36665
// bpoints := bpoints * 1.2 ;
36650: LD_ADDR_VAR 0 10
36654: PUSH
36655: LD_VAR 0 10
36659: PUSH
36660: LD_REAL  1.20000000000000E+0000
36663: MUL
36664: ST_TO_ADDR
// end ; unit_building :
36665: GO 36679
36667: LD_INT 3
36669: DOUBLE
36670: EQUAL
36671: IFTRUE 36675
36673: GO 36678
36675: POP
// ; end ;
36676: GO 36679
36678: POP
// for j = 1 to 3 do
36679: LD_ADDR_VAR 0 7
36683: PUSH
36684: DOUBLE
36685: LD_INT 1
36687: DEC
36688: ST_TO_ADDR
36689: LD_INT 3
36691: PUSH
36692: FOR_TO
36693: IFFALSE 36746
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36695: LD_ADDR_VAR 0 5
36699: PUSH
36700: LD_VAR 0 5
36704: PPUSH
36705: LD_VAR 0 7
36709: PPUSH
36710: LD_VAR 0 5
36714: PUSH
36715: LD_VAR 0 7
36719: ARRAY
36720: PUSH
36721: LD_VAR 0 9
36725: PUSH
36726: LD_VAR 0 7
36730: ARRAY
36731: PUSH
36732: LD_VAR 0 10
36736: MUL
36737: PLUS
36738: PPUSH
36739: CALL_OW 1
36743: ST_TO_ADDR
36744: GO 36692
36746: POP
36747: POP
// end ;
36748: GO 35231
36750: POP
36751: POP
// result := Replace ( result , 4 , tmp ) ;
36752: LD_ADDR_VAR 0 5
36756: PUSH
36757: LD_VAR 0 5
36761: PPUSH
36762: LD_INT 4
36764: PPUSH
36765: LD_VAR 0 8
36769: PPUSH
36770: CALL_OW 1
36774: ST_TO_ADDR
// end ;
36775: LD_VAR 0 5
36779: RET
// export function DangerAtRange ( unit , range ) ; begin
36780: LD_INT 0
36782: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36783: LD_ADDR_VAR 0 3
36787: PUSH
36788: LD_VAR 0 1
36792: PPUSH
36793: CALL_OW 255
36797: PPUSH
36798: LD_VAR 0 1
36802: PPUSH
36803: CALL_OW 250
36807: PPUSH
36808: LD_VAR 0 1
36812: PPUSH
36813: CALL_OW 251
36817: PPUSH
36818: LD_VAR 0 2
36822: PPUSH
36823: CALL 35083 0 4
36827: ST_TO_ADDR
// end ;
36828: LD_VAR 0 3
36832: RET
// export function DangerInArea ( side , area ) ; begin
36833: LD_INT 0
36835: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36836: LD_ADDR_VAR 0 3
36840: PUSH
36841: LD_VAR 0 2
36845: PPUSH
36846: LD_INT 81
36848: PUSH
36849: LD_VAR 0 1
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PPUSH
36858: CALL_OW 70
36862: ST_TO_ADDR
// end ;
36863: LD_VAR 0 3
36867: RET
// export function IsExtension ( b ) ; begin
36868: LD_INT 0
36870: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36871: LD_ADDR_VAR 0 2
36875: PUSH
36876: LD_VAR 0 1
36880: PUSH
36881: LD_INT 23
36883: PUSH
36884: LD_INT 20
36886: PUSH
36887: LD_INT 22
36889: PUSH
36890: LD_INT 17
36892: PUSH
36893: LD_INT 24
36895: PUSH
36896: LD_INT 21
36898: PUSH
36899: LD_INT 19
36901: PUSH
36902: LD_INT 16
36904: PUSH
36905: LD_INT 25
36907: PUSH
36908: LD_INT 18
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: IN
36923: ST_TO_ADDR
// end ;
36924: LD_VAR 0 2
36928: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
36929: LD_INT 0
36931: PPUSH
36932: PPUSH
36933: PPUSH
// result := [ ] ;
36934: LD_ADDR_VAR 0 3
36938: PUSH
36939: EMPTY
36940: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36941: LD_ADDR_VAR 0 4
36945: PUSH
36946: LD_VAR 0 2
36950: PPUSH
36951: LD_INT 21
36953: PUSH
36954: LD_INT 3
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PPUSH
36961: CALL_OW 70
36965: ST_TO_ADDR
// if not tmp then
36966: LD_VAR 0 4
36970: NOT
36971: IFFALSE 36975
// exit ;
36973: GO 37033
// for i in tmp do
36975: LD_ADDR_VAR 0 5
36979: PUSH
36980: LD_VAR 0 4
36984: PUSH
36985: FOR_IN
36986: IFFALSE 37021
// if GetBase ( i ) <> base then
36988: LD_VAR 0 5
36992: PPUSH
36993: CALL_OW 274
36997: PUSH
36998: LD_VAR 0 1
37002: NONEQUAL
37003: IFFALSE 37019
// ComLinkToBase ( base , i ) ;
37005: LD_VAR 0 1
37009: PPUSH
37010: LD_VAR 0 5
37014: PPUSH
37015: CALL_OW 169
37019: GO 36985
37021: POP
37022: POP
// result := tmp ;
37023: LD_ADDR_VAR 0 3
37027: PUSH
37028: LD_VAR 0 4
37032: ST_TO_ADDR
// end ;
37033: LD_VAR 0 3
37037: RET
// export function ComComplete ( unit , b ) ; var i ; begin
37038: LD_INT 0
37040: PPUSH
37041: PPUSH
// if BuildingStatus ( b ) = bs_build then
37042: LD_VAR 0 2
37046: PPUSH
37047: CALL_OW 461
37051: PUSH
37052: LD_INT 1
37054: EQUAL
37055: IFFALSE 37115
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37057: LD_VAR 0 1
37061: PPUSH
37062: LD_STRING h
37064: PUSH
37065: LD_VAR 0 2
37069: PPUSH
37070: CALL_OW 250
37074: PUSH
37075: LD_VAR 0 2
37079: PPUSH
37080: CALL_OW 251
37084: PUSH
37085: LD_VAR 0 2
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: PUSH
37108: EMPTY
37109: LIST
37110: PPUSH
37111: CALL_OW 446
// end ;
37115: LD_VAR 0 3
37119: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37120: LD_INT 0
37122: PPUSH
37123: PPUSH
37124: PPUSH
37125: PPUSH
37126: PPUSH
37127: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37128: LD_VAR 0 1
37132: NOT
37133: PUSH
37134: LD_VAR 0 1
37138: PPUSH
37139: CALL_OW 263
37143: PUSH
37144: LD_INT 2
37146: EQUAL
37147: NOT
37148: OR
37149: IFFALSE 37153
// exit ;
37151: GO 37469
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37153: LD_ADDR_VAR 0 6
37157: PUSH
37158: LD_INT 22
37160: PUSH
37161: LD_VAR 0 1
37165: PPUSH
37166: CALL_OW 255
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 2
37177: PUSH
37178: LD_INT 30
37180: PUSH
37181: LD_INT 36
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 34
37190: PUSH
37191: LD_INT 31
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PPUSH
37207: CALL_OW 69
37211: ST_TO_ADDR
// if not tmp then
37212: LD_VAR 0 6
37216: NOT
37217: IFFALSE 37221
// exit ;
37219: GO 37469
// result := [ ] ;
37221: LD_ADDR_VAR 0 2
37225: PUSH
37226: EMPTY
37227: ST_TO_ADDR
// for i in tmp do
37228: LD_ADDR_VAR 0 3
37232: PUSH
37233: LD_VAR 0 6
37237: PUSH
37238: FOR_IN
37239: IFFALSE 37310
// begin t := UnitsInside ( i ) ;
37241: LD_ADDR_VAR 0 4
37245: PUSH
37246: LD_VAR 0 3
37250: PPUSH
37251: CALL_OW 313
37255: ST_TO_ADDR
// if t then
37256: LD_VAR 0 4
37260: IFFALSE 37308
// for j in t do
37262: LD_ADDR_VAR 0 7
37266: PUSH
37267: LD_VAR 0 4
37271: PUSH
37272: FOR_IN
37273: IFFALSE 37306
// result := Insert ( result , result + 1 , j ) ;
37275: LD_ADDR_VAR 0 2
37279: PUSH
37280: LD_VAR 0 2
37284: PPUSH
37285: LD_VAR 0 2
37289: PUSH
37290: LD_INT 1
37292: PLUS
37293: PPUSH
37294: LD_VAR 0 7
37298: PPUSH
37299: CALL_OW 2
37303: ST_TO_ADDR
37304: GO 37272
37306: POP
37307: POP
// end ;
37308: GO 37238
37310: POP
37311: POP
// if not result then
37312: LD_VAR 0 2
37316: NOT
37317: IFFALSE 37321
// exit ;
37319: GO 37469
// mech := result [ 1 ] ;
37321: LD_ADDR_VAR 0 5
37325: PUSH
37326: LD_VAR 0 2
37330: PUSH
37331: LD_INT 1
37333: ARRAY
37334: ST_TO_ADDR
// if result > 1 then
37335: LD_VAR 0 2
37339: PUSH
37340: LD_INT 1
37342: GREATER
37343: IFFALSE 37455
// for i = 2 to result do
37345: LD_ADDR_VAR 0 3
37349: PUSH
37350: DOUBLE
37351: LD_INT 2
37353: DEC
37354: ST_TO_ADDR
37355: LD_VAR 0 2
37359: PUSH
37360: FOR_TO
37361: IFFALSE 37453
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37363: LD_ADDR_VAR 0 4
37367: PUSH
37368: LD_VAR 0 2
37372: PUSH
37373: LD_VAR 0 3
37377: ARRAY
37378: PPUSH
37379: LD_INT 3
37381: PPUSH
37382: CALL_OW 259
37386: PUSH
37387: LD_VAR 0 2
37391: PUSH
37392: LD_VAR 0 3
37396: ARRAY
37397: PPUSH
37398: CALL_OW 432
37402: MINUS
37403: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37404: LD_VAR 0 4
37408: PUSH
37409: LD_VAR 0 5
37413: PPUSH
37414: LD_INT 3
37416: PPUSH
37417: CALL_OW 259
37421: PUSH
37422: LD_VAR 0 5
37426: PPUSH
37427: CALL_OW 432
37431: MINUS
37432: GREATEREQUAL
37433: IFFALSE 37451
// mech := result [ i ] ;
37435: LD_ADDR_VAR 0 5
37439: PUSH
37440: LD_VAR 0 2
37444: PUSH
37445: LD_VAR 0 3
37449: ARRAY
37450: ST_TO_ADDR
// end ;
37451: GO 37360
37453: POP
37454: POP
// ComLinkTo ( vehicle , mech ) ;
37455: LD_VAR 0 1
37459: PPUSH
37460: LD_VAR 0 5
37464: PPUSH
37465: CALL_OW 135
// end ;
37469: LD_VAR 0 2
37473: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37474: LD_INT 0
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
37484: PPUSH
37485: PPUSH
37486: PPUSH
37487: PPUSH
37488: PPUSH
// result := [ ] ;
37489: LD_ADDR_VAR 0 7
37493: PUSH
37494: EMPTY
37495: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37496: LD_VAR 0 1
37500: PPUSH
37501: CALL_OW 266
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: IN
37516: NOT
37517: IFFALSE 37521
// exit ;
37519: GO 39152
// if name then
37521: LD_VAR 0 3
37525: IFFALSE 37541
// SetBName ( base_dep , name ) ;
37527: LD_VAR 0 1
37531: PPUSH
37532: LD_VAR 0 3
37536: PPUSH
37537: CALL_OW 500
// base := GetBase ( base_dep ) ;
37541: LD_ADDR_VAR 0 15
37545: PUSH
37546: LD_VAR 0 1
37550: PPUSH
37551: CALL_OW 274
37555: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37556: LD_ADDR_VAR 0 16
37560: PUSH
37561: LD_VAR 0 1
37565: PPUSH
37566: CALL_OW 255
37570: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37571: LD_ADDR_VAR 0 17
37575: PUSH
37576: LD_VAR 0 1
37580: PPUSH
37581: CALL_OW 248
37585: ST_TO_ADDR
// if sources then
37586: LD_VAR 0 5
37590: IFFALSE 37637
// for i = 1 to 3 do
37592: LD_ADDR_VAR 0 8
37596: PUSH
37597: DOUBLE
37598: LD_INT 1
37600: DEC
37601: ST_TO_ADDR
37602: LD_INT 3
37604: PUSH
37605: FOR_TO
37606: IFFALSE 37635
// AddResourceType ( base , i , sources [ i ] ) ;
37608: LD_VAR 0 15
37612: PPUSH
37613: LD_VAR 0 8
37617: PPUSH
37618: LD_VAR 0 5
37622: PUSH
37623: LD_VAR 0 8
37627: ARRAY
37628: PPUSH
37629: CALL_OW 276
37633: GO 37605
37635: POP
37636: POP
// buildings := GetBaseBuildings ( base , area ) ;
37637: LD_ADDR_VAR 0 18
37641: PUSH
37642: LD_VAR 0 15
37646: PPUSH
37647: LD_VAR 0 2
37651: PPUSH
37652: CALL 36929 0 2
37656: ST_TO_ADDR
// InitHc ;
37657: CALL_OW 19
// InitUc ;
37661: CALL_OW 18
// uc_side := side ;
37665: LD_ADDR_OWVAR 20
37669: PUSH
37670: LD_VAR 0 16
37674: ST_TO_ADDR
// uc_nation := nation ;
37675: LD_ADDR_OWVAR 21
37679: PUSH
37680: LD_VAR 0 17
37684: ST_TO_ADDR
// if buildings then
37685: LD_VAR 0 18
37689: IFFALSE 39011
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37691: LD_ADDR_VAR 0 19
37695: PUSH
37696: LD_VAR 0 18
37700: PPUSH
37701: LD_INT 2
37703: PUSH
37704: LD_INT 30
37706: PUSH
37707: LD_INT 29
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 30
37716: PUSH
37717: LD_INT 30
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: PPUSH
37729: CALL_OW 72
37733: ST_TO_ADDR
// if tmp then
37734: LD_VAR 0 19
37738: IFFALSE 37786
// for i in tmp do
37740: LD_ADDR_VAR 0 8
37744: PUSH
37745: LD_VAR 0 19
37749: PUSH
37750: FOR_IN
37751: IFFALSE 37784
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37753: LD_VAR 0 8
37757: PPUSH
37758: CALL_OW 250
37762: PPUSH
37763: LD_VAR 0 8
37767: PPUSH
37768: CALL_OW 251
37772: PPUSH
37773: LD_VAR 0 16
37777: PPUSH
37778: CALL_OW 441
37782: GO 37750
37784: POP
37785: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37786: LD_VAR 0 18
37790: PPUSH
37791: LD_INT 2
37793: PUSH
37794: LD_INT 30
37796: PUSH
37797: LD_INT 32
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 30
37806: PUSH
37807: LD_INT 33
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: LIST
37818: PPUSH
37819: CALL_OW 72
37823: IFFALSE 37911
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37825: LD_ADDR_VAR 0 8
37829: PUSH
37830: LD_VAR 0 18
37834: PPUSH
37835: LD_INT 2
37837: PUSH
37838: LD_INT 30
37840: PUSH
37841: LD_INT 32
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 30
37850: PUSH
37851: LD_INT 33
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: PPUSH
37863: CALL_OW 72
37867: PUSH
37868: FOR_IN
37869: IFFALSE 37909
// begin if not GetBWeapon ( i ) then
37871: LD_VAR 0 8
37875: PPUSH
37876: CALL_OW 269
37880: NOT
37881: IFFALSE 37907
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37883: LD_VAR 0 8
37887: PPUSH
37888: LD_VAR 0 8
37892: PPUSH
37893: LD_VAR 0 2
37897: PPUSH
37898: CALL 39157 0 2
37902: PPUSH
37903: CALL_OW 431
// end ;
37907: GO 37868
37909: POP
37910: POP
// end ; for i = 1 to personel do
37911: LD_ADDR_VAR 0 8
37915: PUSH
37916: DOUBLE
37917: LD_INT 1
37919: DEC
37920: ST_TO_ADDR
37921: LD_VAR 0 6
37925: PUSH
37926: FOR_TO
37927: IFFALSE 38991
// begin if i > 4 then
37929: LD_VAR 0 8
37933: PUSH
37934: LD_INT 4
37936: GREATER
37937: IFFALSE 37941
// break ;
37939: GO 38991
// case i of 1 :
37941: LD_VAR 0 8
37945: PUSH
37946: LD_INT 1
37948: DOUBLE
37949: EQUAL
37950: IFTRUE 37954
37952: GO 38034
37954: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37955: LD_ADDR_VAR 0 12
37959: PUSH
37960: LD_VAR 0 18
37964: PPUSH
37965: LD_INT 22
37967: PUSH
37968: LD_VAR 0 16
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 58
37979: PUSH
37980: EMPTY
37981: LIST
37982: PUSH
37983: LD_INT 2
37985: PUSH
37986: LD_INT 30
37988: PUSH
37989: LD_INT 32
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 30
37998: PUSH
37999: LD_INT 4
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 30
38008: PUSH
38009: LD_INT 5
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: PPUSH
38027: CALL_OW 72
38031: ST_TO_ADDR
38032: GO 38256
38034: LD_INT 2
38036: DOUBLE
38037: EQUAL
38038: IFTRUE 38042
38040: GO 38104
38042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38043: LD_ADDR_VAR 0 12
38047: PUSH
38048: LD_VAR 0 18
38052: PPUSH
38053: LD_INT 22
38055: PUSH
38056: LD_VAR 0 16
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: LD_INT 30
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 30
38080: PUSH
38081: LD_INT 1
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PPUSH
38097: CALL_OW 72
38101: ST_TO_ADDR
38102: GO 38256
38104: LD_INT 3
38106: DOUBLE
38107: EQUAL
38108: IFTRUE 38112
38110: GO 38174
38112: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38113: LD_ADDR_VAR 0 12
38117: PUSH
38118: LD_VAR 0 18
38122: PPUSH
38123: LD_INT 22
38125: PUSH
38126: LD_VAR 0 16
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 2
38137: PUSH
38138: LD_INT 30
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 30
38150: PUSH
38151: LD_INT 3
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: LIST
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PPUSH
38167: CALL_OW 72
38171: ST_TO_ADDR
38172: GO 38256
38174: LD_INT 4
38176: DOUBLE
38177: EQUAL
38178: IFTRUE 38182
38180: GO 38255
38182: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38183: LD_ADDR_VAR 0 12
38187: PUSH
38188: LD_VAR 0 18
38192: PPUSH
38193: LD_INT 22
38195: PUSH
38196: LD_VAR 0 16
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 2
38207: PUSH
38208: LD_INT 30
38210: PUSH
38211: LD_INT 6
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 30
38220: PUSH
38221: LD_INT 7
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 30
38230: PUSH
38231: LD_INT 8
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PPUSH
38248: CALL_OW 72
38252: ST_TO_ADDR
38253: GO 38256
38255: POP
// if i = 1 then
38256: LD_VAR 0 8
38260: PUSH
38261: LD_INT 1
38263: EQUAL
38264: IFFALSE 38375
// begin tmp := [ ] ;
38266: LD_ADDR_VAR 0 19
38270: PUSH
38271: EMPTY
38272: ST_TO_ADDR
// for j in f do
38273: LD_ADDR_VAR 0 9
38277: PUSH
38278: LD_VAR 0 12
38282: PUSH
38283: FOR_IN
38284: IFFALSE 38357
// if GetBType ( j ) = b_bunker then
38286: LD_VAR 0 9
38290: PPUSH
38291: CALL_OW 266
38295: PUSH
38296: LD_INT 32
38298: EQUAL
38299: IFFALSE 38326
// tmp := Insert ( tmp , 1 , j ) else
38301: LD_ADDR_VAR 0 19
38305: PUSH
38306: LD_VAR 0 19
38310: PPUSH
38311: LD_INT 1
38313: PPUSH
38314: LD_VAR 0 9
38318: PPUSH
38319: CALL_OW 2
38323: ST_TO_ADDR
38324: GO 38355
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38326: LD_ADDR_VAR 0 19
38330: PUSH
38331: LD_VAR 0 19
38335: PPUSH
38336: LD_VAR 0 19
38340: PUSH
38341: LD_INT 1
38343: PLUS
38344: PPUSH
38345: LD_VAR 0 9
38349: PPUSH
38350: CALL_OW 2
38354: ST_TO_ADDR
38355: GO 38283
38357: POP
38358: POP
// if tmp then
38359: LD_VAR 0 19
38363: IFFALSE 38375
// f := tmp ;
38365: LD_ADDR_VAR 0 12
38369: PUSH
38370: LD_VAR 0 19
38374: ST_TO_ADDR
// end ; x := personel [ i ] ;
38375: LD_ADDR_VAR 0 13
38379: PUSH
38380: LD_VAR 0 6
38384: PUSH
38385: LD_VAR 0 8
38389: ARRAY
38390: ST_TO_ADDR
// if x = - 1 then
38391: LD_VAR 0 13
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: EQUAL
38400: IFFALSE 38609
// begin for j in f do
38402: LD_ADDR_VAR 0 9
38406: PUSH
38407: LD_VAR 0 12
38411: PUSH
38412: FOR_IN
38413: IFFALSE 38605
// repeat InitHc ;
38415: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38419: LD_VAR 0 9
38423: PPUSH
38424: CALL_OW 266
38428: PUSH
38429: LD_INT 5
38431: EQUAL
38432: IFFALSE 38502
// begin if UnitsInside ( j ) < 3 then
38434: LD_VAR 0 9
38438: PPUSH
38439: CALL_OW 313
38443: PUSH
38444: LD_INT 3
38446: LESS
38447: IFFALSE 38483
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38449: LD_INT 0
38451: PPUSH
38452: LD_INT 5
38454: PUSH
38455: LD_INT 8
38457: PUSH
38458: LD_INT 9
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: LIST
38465: PUSH
38466: LD_VAR 0 17
38470: ARRAY
38471: PPUSH
38472: LD_VAR 0 4
38476: PPUSH
38477: CALL_OW 380
38481: GO 38500
// PrepareHuman ( false , i , skill ) ;
38483: LD_INT 0
38485: PPUSH
38486: LD_VAR 0 8
38490: PPUSH
38491: LD_VAR 0 4
38495: PPUSH
38496: CALL_OW 380
// end else
38500: GO 38519
// PrepareHuman ( false , i , skill ) ;
38502: LD_INT 0
38504: PPUSH
38505: LD_VAR 0 8
38509: PPUSH
38510: LD_VAR 0 4
38514: PPUSH
38515: CALL_OW 380
// un := CreateHuman ;
38519: LD_ADDR_VAR 0 14
38523: PUSH
38524: CALL_OW 44
38528: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38529: LD_ADDR_VAR 0 7
38533: PUSH
38534: LD_VAR 0 7
38538: PPUSH
38539: LD_INT 1
38541: PPUSH
38542: LD_VAR 0 14
38546: PPUSH
38547: CALL_OW 2
38551: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38552: LD_VAR 0 14
38556: PPUSH
38557: LD_VAR 0 9
38561: PPUSH
38562: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38566: LD_VAR 0 9
38570: PPUSH
38571: CALL_OW 313
38575: PUSH
38576: LD_INT 6
38578: EQUAL
38579: PUSH
38580: LD_VAR 0 9
38584: PPUSH
38585: CALL_OW 266
38589: PUSH
38590: LD_INT 32
38592: PUSH
38593: LD_INT 31
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: IN
38600: OR
38601: IFFALSE 38415
38603: GO 38412
38605: POP
38606: POP
// end else
38607: GO 38989
// for j = 1 to x do
38609: LD_ADDR_VAR 0 9
38613: PUSH
38614: DOUBLE
38615: LD_INT 1
38617: DEC
38618: ST_TO_ADDR
38619: LD_VAR 0 13
38623: PUSH
38624: FOR_TO
38625: IFFALSE 38987
// begin InitHc ;
38627: CALL_OW 19
// if not f then
38631: LD_VAR 0 12
38635: NOT
38636: IFFALSE 38725
// begin PrepareHuman ( false , i , skill ) ;
38638: LD_INT 0
38640: PPUSH
38641: LD_VAR 0 8
38645: PPUSH
38646: LD_VAR 0 4
38650: PPUSH
38651: CALL_OW 380
// un := CreateHuman ;
38655: LD_ADDR_VAR 0 14
38659: PUSH
38660: CALL_OW 44
38664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38665: LD_ADDR_VAR 0 7
38669: PUSH
38670: LD_VAR 0 7
38674: PPUSH
38675: LD_INT 1
38677: PPUSH
38678: LD_VAR 0 14
38682: PPUSH
38683: CALL_OW 2
38687: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38688: LD_VAR 0 14
38692: PPUSH
38693: LD_VAR 0 1
38697: PPUSH
38698: CALL_OW 250
38702: PPUSH
38703: LD_VAR 0 1
38707: PPUSH
38708: CALL_OW 251
38712: PPUSH
38713: LD_INT 10
38715: PPUSH
38716: LD_INT 0
38718: PPUSH
38719: CALL_OW 50
// continue ;
38723: GO 38624
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38725: LD_VAR 0 12
38729: PUSH
38730: LD_INT 1
38732: ARRAY
38733: PPUSH
38734: CALL_OW 313
38738: PUSH
38739: LD_VAR 0 12
38743: PUSH
38744: LD_INT 1
38746: ARRAY
38747: PPUSH
38748: CALL_OW 266
38752: PUSH
38753: LD_INT 32
38755: PUSH
38756: LD_INT 31
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: IN
38763: AND
38764: PUSH
38765: LD_VAR 0 12
38769: PUSH
38770: LD_INT 1
38772: ARRAY
38773: PPUSH
38774: CALL_OW 313
38778: PUSH
38779: LD_INT 6
38781: EQUAL
38782: OR
38783: IFFALSE 38803
// f := Delete ( f , 1 ) ;
38785: LD_ADDR_VAR 0 12
38789: PUSH
38790: LD_VAR 0 12
38794: PPUSH
38795: LD_INT 1
38797: PPUSH
38798: CALL_OW 3
38802: ST_TO_ADDR
// if not f then
38803: LD_VAR 0 12
38807: NOT
38808: IFFALSE 38826
// begin x := x + 2 ;
38810: LD_ADDR_VAR 0 13
38814: PUSH
38815: LD_VAR 0 13
38819: PUSH
38820: LD_INT 2
38822: PLUS
38823: ST_TO_ADDR
// continue ;
38824: GO 38624
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38826: LD_VAR 0 12
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PPUSH
38835: CALL_OW 266
38839: PUSH
38840: LD_INT 5
38842: EQUAL
38843: IFFALSE 38917
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38845: LD_VAR 0 12
38849: PUSH
38850: LD_INT 1
38852: ARRAY
38853: PPUSH
38854: CALL_OW 313
38858: PUSH
38859: LD_INT 3
38861: LESS
38862: IFFALSE 38898
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38864: LD_INT 0
38866: PPUSH
38867: LD_INT 5
38869: PUSH
38870: LD_INT 8
38872: PUSH
38873: LD_INT 9
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: PUSH
38881: LD_VAR 0 17
38885: ARRAY
38886: PPUSH
38887: LD_VAR 0 4
38891: PPUSH
38892: CALL_OW 380
38896: GO 38915
// PrepareHuman ( false , i , skill ) ;
38898: LD_INT 0
38900: PPUSH
38901: LD_VAR 0 8
38905: PPUSH
38906: LD_VAR 0 4
38910: PPUSH
38911: CALL_OW 380
// end else
38915: GO 38934
// PrepareHuman ( false , i , skill ) ;
38917: LD_INT 0
38919: PPUSH
38920: LD_VAR 0 8
38924: PPUSH
38925: LD_VAR 0 4
38929: PPUSH
38930: CALL_OW 380
// un := CreateHuman ;
38934: LD_ADDR_VAR 0 14
38938: PUSH
38939: CALL_OW 44
38943: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38944: LD_ADDR_VAR 0 7
38948: PUSH
38949: LD_VAR 0 7
38953: PPUSH
38954: LD_INT 1
38956: PPUSH
38957: LD_VAR 0 14
38961: PPUSH
38962: CALL_OW 2
38966: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38967: LD_VAR 0 14
38971: PPUSH
38972: LD_VAR 0 12
38976: PUSH
38977: LD_INT 1
38979: ARRAY
38980: PPUSH
38981: CALL_OW 52
// end ;
38985: GO 38624
38987: POP
38988: POP
// end ;
38989: GO 37926
38991: POP
38992: POP
// result := result ^ buildings ;
38993: LD_ADDR_VAR 0 7
38997: PUSH
38998: LD_VAR 0 7
39002: PUSH
39003: LD_VAR 0 18
39007: ADD
39008: ST_TO_ADDR
// end else
39009: GO 39152
// begin for i = 1 to personel do
39011: LD_ADDR_VAR 0 8
39015: PUSH
39016: DOUBLE
39017: LD_INT 1
39019: DEC
39020: ST_TO_ADDR
39021: LD_VAR 0 6
39025: PUSH
39026: FOR_TO
39027: IFFALSE 39150
// begin if i > 4 then
39029: LD_VAR 0 8
39033: PUSH
39034: LD_INT 4
39036: GREATER
39037: IFFALSE 39041
// break ;
39039: GO 39150
// x := personel [ i ] ;
39041: LD_ADDR_VAR 0 13
39045: PUSH
39046: LD_VAR 0 6
39050: PUSH
39051: LD_VAR 0 8
39055: ARRAY
39056: ST_TO_ADDR
// if x = - 1 then
39057: LD_VAR 0 13
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: EQUAL
39066: IFFALSE 39070
// continue ;
39068: GO 39026
// PrepareHuman ( false , i , skill ) ;
39070: LD_INT 0
39072: PPUSH
39073: LD_VAR 0 8
39077: PPUSH
39078: LD_VAR 0 4
39082: PPUSH
39083: CALL_OW 380
// un := CreateHuman ;
39087: LD_ADDR_VAR 0 14
39091: PUSH
39092: CALL_OW 44
39096: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39097: LD_VAR 0 14
39101: PPUSH
39102: LD_VAR 0 1
39106: PPUSH
39107: CALL_OW 250
39111: PPUSH
39112: LD_VAR 0 1
39116: PPUSH
39117: CALL_OW 251
39121: PPUSH
39122: LD_INT 10
39124: PPUSH
39125: LD_INT 0
39127: PPUSH
39128: CALL_OW 50
// result := result ^ un ;
39132: LD_ADDR_VAR 0 7
39136: PUSH
39137: LD_VAR 0 7
39141: PUSH
39142: LD_VAR 0 14
39146: ADD
39147: ST_TO_ADDR
// end ;
39148: GO 39026
39150: POP
39151: POP
// end ; end ;
39152: LD_VAR 0 7
39156: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39157: LD_INT 0
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
39168: PPUSH
39169: PPUSH
39170: PPUSH
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
// result := false ;
39175: LD_ADDR_VAR 0 3
39179: PUSH
39180: LD_INT 0
39182: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39183: LD_VAR 0 1
39187: NOT
39188: PUSH
39189: LD_VAR 0 1
39193: PPUSH
39194: CALL_OW 266
39198: PUSH
39199: LD_INT 32
39201: PUSH
39202: LD_INT 33
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: IN
39209: NOT
39210: OR
39211: IFFALSE 39215
// exit ;
39213: GO 40351
// nat := GetNation ( tower ) ;
39215: LD_ADDR_VAR 0 12
39219: PUSH
39220: LD_VAR 0 1
39224: PPUSH
39225: CALL_OW 248
39229: ST_TO_ADDR
// side := GetSide ( tower ) ;
39230: LD_ADDR_VAR 0 16
39234: PUSH
39235: LD_VAR 0 1
39239: PPUSH
39240: CALL_OW 255
39244: ST_TO_ADDR
// x := GetX ( tower ) ;
39245: LD_ADDR_VAR 0 10
39249: PUSH
39250: LD_VAR 0 1
39254: PPUSH
39255: CALL_OW 250
39259: ST_TO_ADDR
// y := GetY ( tower ) ;
39260: LD_ADDR_VAR 0 11
39264: PUSH
39265: LD_VAR 0 1
39269: PPUSH
39270: CALL_OW 251
39274: ST_TO_ADDR
// if not x or not y then
39275: LD_VAR 0 10
39279: NOT
39280: PUSH
39281: LD_VAR 0 11
39285: NOT
39286: OR
39287: IFFALSE 39291
// exit ;
39289: GO 40351
// weapon := 0 ;
39291: LD_ADDR_VAR 0 18
39295: PUSH
39296: LD_INT 0
39298: ST_TO_ADDR
// fac_list := [ ] ;
39299: LD_ADDR_VAR 0 17
39303: PUSH
39304: EMPTY
39305: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
39306: LD_ADDR_VAR 0 6
39310: PUSH
39311: LD_VAR 0 1
39315: PPUSH
39316: CALL_OW 274
39320: PPUSH
39321: LD_VAR 0 2
39325: PPUSH
39326: CALL 36929 0 2
39330: PPUSH
39331: LD_INT 30
39333: PUSH
39334: LD_INT 3
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PPUSH
39341: CALL_OW 72
39345: ST_TO_ADDR
// if not factories then
39346: LD_VAR 0 6
39350: NOT
39351: IFFALSE 39355
// exit ;
39353: GO 40351
// for i in factories do
39355: LD_ADDR_VAR 0 8
39359: PUSH
39360: LD_VAR 0 6
39364: PUSH
39365: FOR_IN
39366: IFFALSE 39391
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39368: LD_ADDR_VAR 0 17
39372: PUSH
39373: LD_VAR 0 17
39377: PUSH
39378: LD_VAR 0 8
39382: PPUSH
39383: CALL_OW 478
39387: UNION
39388: ST_TO_ADDR
39389: GO 39365
39391: POP
39392: POP
// if not fac_list then
39393: LD_VAR 0 17
39397: NOT
39398: IFFALSE 39402
// exit ;
39400: GO 40351
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39402: LD_ADDR_VAR 0 5
39406: PUSH
39407: LD_INT 4
39409: PUSH
39410: LD_INT 5
39412: PUSH
39413: LD_INT 9
39415: PUSH
39416: LD_INT 10
39418: PUSH
39419: LD_INT 6
39421: PUSH
39422: LD_INT 7
39424: PUSH
39425: LD_INT 11
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 27
39439: PUSH
39440: LD_INT 28
39442: PUSH
39443: LD_INT 26
39445: PUSH
39446: LD_INT 30
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 43
39457: PUSH
39458: LD_INT 44
39460: PUSH
39461: LD_INT 46
39463: PUSH
39464: LD_INT 45
39466: PUSH
39467: LD_INT 47
39469: PUSH
39470: LD_INT 49
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: PUSH
39486: LD_VAR 0 12
39490: ARRAY
39491: ST_TO_ADDR
// for i in list do
39492: LD_ADDR_VAR 0 8
39496: PUSH
39497: LD_VAR 0 5
39501: PUSH
39502: FOR_IN
39503: IFFALSE 39536
// if not i in fac_list then
39505: LD_VAR 0 8
39509: PUSH
39510: LD_VAR 0 17
39514: IN
39515: NOT
39516: IFFALSE 39534
// list := list diff i ;
39518: LD_ADDR_VAR 0 5
39522: PUSH
39523: LD_VAR 0 5
39527: PUSH
39528: LD_VAR 0 8
39532: DIFF
39533: ST_TO_ADDR
39534: GO 39502
39536: POP
39537: POP
// if not list then
39538: LD_VAR 0 5
39542: NOT
39543: IFFALSE 39547
// exit ;
39545: GO 40351
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39547: LD_VAR 0 12
39551: PUSH
39552: LD_INT 3
39554: EQUAL
39555: PUSH
39556: LD_INT 49
39558: PUSH
39559: LD_VAR 0 5
39563: IN
39564: AND
39565: PUSH
39566: LD_INT 31
39568: PPUSH
39569: LD_VAR 0 16
39573: PPUSH
39574: CALL_OW 321
39578: PUSH
39579: LD_INT 2
39581: EQUAL
39582: AND
39583: IFFALSE 39643
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39585: LD_INT 22
39587: PUSH
39588: LD_VAR 0 16
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 35
39599: PUSH
39600: LD_INT 49
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 91
39609: PUSH
39610: LD_VAR 0 1
39614: PUSH
39615: LD_INT 10
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: LIST
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: PPUSH
39628: CALL_OW 69
39632: NOT
39633: IFFALSE 39643
// weapon := ru_time_lapser ;
39635: LD_ADDR_VAR 0 18
39639: PUSH
39640: LD_INT 49
39642: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39643: LD_VAR 0 12
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: IN
39658: PUSH
39659: LD_INT 11
39661: PUSH
39662: LD_VAR 0 5
39666: IN
39667: PUSH
39668: LD_INT 30
39670: PUSH
39671: LD_VAR 0 5
39675: IN
39676: OR
39677: AND
39678: PUSH
39679: LD_INT 6
39681: PPUSH
39682: LD_VAR 0 16
39686: PPUSH
39687: CALL_OW 321
39691: PUSH
39692: LD_INT 2
39694: EQUAL
39695: AND
39696: IFFALSE 39861
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39698: LD_INT 22
39700: PUSH
39701: LD_VAR 0 16
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 35
39715: PUSH
39716: LD_INT 11
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 35
39725: PUSH
39726: LD_INT 30
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 91
39740: PUSH
39741: LD_VAR 0 1
39745: PUSH
39746: LD_INT 18
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: LIST
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: LIST
39758: PPUSH
39759: CALL_OW 69
39763: NOT
39764: PUSH
39765: LD_INT 22
39767: PUSH
39768: LD_VAR 0 16
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: LD_INT 30
39782: PUSH
39783: LD_INT 32
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 30
39792: PUSH
39793: LD_INT 33
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 91
39807: PUSH
39808: LD_VAR 0 1
39812: PUSH
39813: LD_INT 12
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: LIST
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: LIST
39825: PUSH
39826: EMPTY
39827: LIST
39828: PPUSH
39829: CALL_OW 69
39833: PUSH
39834: LD_INT 2
39836: GREATER
39837: AND
39838: IFFALSE 39861
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39840: LD_ADDR_VAR 0 18
39844: PUSH
39845: LD_INT 11
39847: PUSH
39848: LD_INT 30
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_VAR 0 12
39859: ARRAY
39860: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39861: LD_VAR 0 18
39865: NOT
39866: PUSH
39867: LD_INT 40
39869: PPUSH
39870: LD_VAR 0 16
39874: PPUSH
39875: CALL_OW 321
39879: PUSH
39880: LD_INT 2
39882: EQUAL
39883: AND
39884: PUSH
39885: LD_INT 7
39887: PUSH
39888: LD_VAR 0 5
39892: IN
39893: PUSH
39894: LD_INT 28
39896: PUSH
39897: LD_VAR 0 5
39901: IN
39902: OR
39903: PUSH
39904: LD_INT 45
39906: PUSH
39907: LD_VAR 0 5
39911: IN
39912: OR
39913: AND
39914: IFFALSE 40168
// begin hex := GetHexInfo ( x , y ) ;
39916: LD_ADDR_VAR 0 4
39920: PUSH
39921: LD_VAR 0 10
39925: PPUSH
39926: LD_VAR 0 11
39930: PPUSH
39931: CALL_OW 546
39935: ST_TO_ADDR
// if hex [ 1 ] then
39936: LD_VAR 0 4
39940: PUSH
39941: LD_INT 1
39943: ARRAY
39944: IFFALSE 39948
// exit ;
39946: GO 40351
// height := hex [ 2 ] ;
39948: LD_ADDR_VAR 0 15
39952: PUSH
39953: LD_VAR 0 4
39957: PUSH
39958: LD_INT 2
39960: ARRAY
39961: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39962: LD_ADDR_VAR 0 14
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: LD_INT 3
39975: PUSH
39976: LD_INT 5
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: ST_TO_ADDR
// for i in tmp do
39985: LD_ADDR_VAR 0 8
39989: PUSH
39990: LD_VAR 0 14
39994: PUSH
39995: FOR_IN
39996: IFFALSE 40166
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39998: LD_ADDR_VAR 0 9
40002: PUSH
40003: LD_VAR 0 10
40007: PPUSH
40008: LD_VAR 0 8
40012: PPUSH
40013: LD_INT 5
40015: PPUSH
40016: CALL_OW 272
40020: PUSH
40021: LD_VAR 0 11
40025: PPUSH
40026: LD_VAR 0 8
40030: PPUSH
40031: LD_INT 5
40033: PPUSH
40034: CALL_OW 273
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40043: LD_VAR 0 9
40047: PUSH
40048: LD_INT 1
40050: ARRAY
40051: PPUSH
40052: LD_VAR 0 9
40056: PUSH
40057: LD_INT 2
40059: ARRAY
40060: PPUSH
40061: CALL_OW 488
40065: IFFALSE 40164
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40067: LD_ADDR_VAR 0 4
40071: PUSH
40072: LD_VAR 0 9
40076: PUSH
40077: LD_INT 1
40079: ARRAY
40080: PPUSH
40081: LD_VAR 0 9
40085: PUSH
40086: LD_INT 2
40088: ARRAY
40089: PPUSH
40090: CALL_OW 546
40094: ST_TO_ADDR
// if hex [ 1 ] then
40095: LD_VAR 0 4
40099: PUSH
40100: LD_INT 1
40102: ARRAY
40103: IFFALSE 40107
// continue ;
40105: GO 39995
// h := hex [ 2 ] ;
40107: LD_ADDR_VAR 0 13
40111: PUSH
40112: LD_VAR 0 4
40116: PUSH
40117: LD_INT 2
40119: ARRAY
40120: ST_TO_ADDR
// if h + 7 < height then
40121: LD_VAR 0 13
40125: PUSH
40126: LD_INT 7
40128: PLUS
40129: PUSH
40130: LD_VAR 0 15
40134: LESS
40135: IFFALSE 40164
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40137: LD_ADDR_VAR 0 18
40141: PUSH
40142: LD_INT 7
40144: PUSH
40145: LD_INT 28
40147: PUSH
40148: LD_INT 45
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: LIST
40155: PUSH
40156: LD_VAR 0 12
40160: ARRAY
40161: ST_TO_ADDR
// break ;
40162: GO 40166
// end ; end ; end ;
40164: GO 39995
40166: POP
40167: POP
// end ; if not weapon then
40168: LD_VAR 0 18
40172: NOT
40173: IFFALSE 40233
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40175: LD_ADDR_VAR 0 5
40179: PUSH
40180: LD_VAR 0 5
40184: PUSH
40185: LD_INT 11
40187: PUSH
40188: LD_INT 30
40190: PUSH
40191: LD_INT 49
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: DIFF
40199: ST_TO_ADDR
// if not list then
40200: LD_VAR 0 5
40204: NOT
40205: IFFALSE 40209
// exit ;
40207: GO 40351
// weapon := list [ rand ( 1 , list ) ] ;
40209: LD_ADDR_VAR 0 18
40213: PUSH
40214: LD_VAR 0 5
40218: PUSH
40219: LD_INT 1
40221: PPUSH
40222: LD_VAR 0 5
40226: PPUSH
40227: CALL_OW 12
40231: ARRAY
40232: ST_TO_ADDR
// end ; if weapon then
40233: LD_VAR 0 18
40237: IFFALSE 40351
// begin tmp := CostOfWeapon ( weapon ) ;
40239: LD_ADDR_VAR 0 14
40243: PUSH
40244: LD_VAR 0 18
40248: PPUSH
40249: CALL_OW 451
40253: ST_TO_ADDR
// j := GetBase ( tower ) ;
40254: LD_ADDR_VAR 0 9
40258: PUSH
40259: LD_VAR 0 1
40263: PPUSH
40264: CALL_OW 274
40268: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40269: LD_VAR 0 9
40273: PPUSH
40274: LD_INT 1
40276: PPUSH
40277: CALL_OW 275
40281: PUSH
40282: LD_VAR 0 14
40286: PUSH
40287: LD_INT 1
40289: ARRAY
40290: GREATEREQUAL
40291: PUSH
40292: LD_VAR 0 9
40296: PPUSH
40297: LD_INT 2
40299: PPUSH
40300: CALL_OW 275
40304: PUSH
40305: LD_VAR 0 14
40309: PUSH
40310: LD_INT 2
40312: ARRAY
40313: GREATEREQUAL
40314: AND
40315: PUSH
40316: LD_VAR 0 9
40320: PPUSH
40321: LD_INT 3
40323: PPUSH
40324: CALL_OW 275
40328: PUSH
40329: LD_VAR 0 14
40333: PUSH
40334: LD_INT 3
40336: ARRAY
40337: GREATEREQUAL
40338: AND
40339: IFFALSE 40351
// result := weapon ;
40341: LD_ADDR_VAR 0 3
40345: PUSH
40346: LD_VAR 0 18
40350: ST_TO_ADDR
// end ; end ;
40351: LD_VAR 0 3
40355: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40356: LD_INT 0
40358: PPUSH
40359: PPUSH
// result := true ;
40360: LD_ADDR_VAR 0 3
40364: PUSH
40365: LD_INT 1
40367: ST_TO_ADDR
// if array1 = array2 then
40368: LD_VAR 0 1
40372: PUSH
40373: LD_VAR 0 2
40377: EQUAL
40378: IFFALSE 40438
// begin for i = 1 to array1 do
40380: LD_ADDR_VAR 0 4
40384: PUSH
40385: DOUBLE
40386: LD_INT 1
40388: DEC
40389: ST_TO_ADDR
40390: LD_VAR 0 1
40394: PUSH
40395: FOR_TO
40396: IFFALSE 40434
// if array1 [ i ] <> array2 [ i ] then
40398: LD_VAR 0 1
40402: PUSH
40403: LD_VAR 0 4
40407: ARRAY
40408: PUSH
40409: LD_VAR 0 2
40413: PUSH
40414: LD_VAR 0 4
40418: ARRAY
40419: NONEQUAL
40420: IFFALSE 40432
// begin result := false ;
40422: LD_ADDR_VAR 0 3
40426: PUSH
40427: LD_INT 0
40429: ST_TO_ADDR
// break ;
40430: GO 40434
// end ;
40432: GO 40395
40434: POP
40435: POP
// end else
40436: GO 40446
// result := false ;
40438: LD_ADDR_VAR 0 3
40442: PUSH
40443: LD_INT 0
40445: ST_TO_ADDR
// end ;
40446: LD_VAR 0 3
40450: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40451: LD_INT 0
40453: PPUSH
40454: PPUSH
40455: PPUSH
// pom := GetBase ( fac ) ;
40456: LD_ADDR_VAR 0 5
40460: PUSH
40461: LD_VAR 0 1
40465: PPUSH
40466: CALL_OW 274
40470: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40471: LD_ADDR_VAR 0 4
40475: PUSH
40476: LD_VAR 0 2
40480: PUSH
40481: LD_INT 1
40483: ARRAY
40484: PPUSH
40485: LD_VAR 0 2
40489: PUSH
40490: LD_INT 2
40492: ARRAY
40493: PPUSH
40494: LD_VAR 0 2
40498: PUSH
40499: LD_INT 3
40501: ARRAY
40502: PPUSH
40503: LD_VAR 0 2
40507: PUSH
40508: LD_INT 4
40510: ARRAY
40511: PPUSH
40512: CALL_OW 449
40516: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40517: LD_ADDR_VAR 0 3
40521: PUSH
40522: LD_VAR 0 5
40526: PPUSH
40527: LD_INT 1
40529: PPUSH
40530: CALL_OW 275
40534: PUSH
40535: LD_VAR 0 4
40539: PUSH
40540: LD_INT 1
40542: ARRAY
40543: GREATEREQUAL
40544: PUSH
40545: LD_VAR 0 5
40549: PPUSH
40550: LD_INT 2
40552: PPUSH
40553: CALL_OW 275
40557: PUSH
40558: LD_VAR 0 4
40562: PUSH
40563: LD_INT 2
40565: ARRAY
40566: GREATEREQUAL
40567: AND
40568: PUSH
40569: LD_VAR 0 5
40573: PPUSH
40574: LD_INT 3
40576: PPUSH
40577: CALL_OW 275
40581: PUSH
40582: LD_VAR 0 4
40586: PUSH
40587: LD_INT 3
40589: ARRAY
40590: GREATEREQUAL
40591: AND
40592: ST_TO_ADDR
// end ;
40593: LD_VAR 0 3
40597: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40598: LD_INT 0
40600: PPUSH
40601: PPUSH
40602: PPUSH
40603: PPUSH
// pom := GetBase ( building ) ;
40604: LD_ADDR_VAR 0 3
40608: PUSH
40609: LD_VAR 0 1
40613: PPUSH
40614: CALL_OW 274
40618: ST_TO_ADDR
// if not pom then
40619: LD_VAR 0 3
40623: NOT
40624: IFFALSE 40628
// exit ;
40626: GO 40798
// btype := GetBType ( building ) ;
40628: LD_ADDR_VAR 0 5
40632: PUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 266
40642: ST_TO_ADDR
// if btype = b_armoury then
40643: LD_VAR 0 5
40647: PUSH
40648: LD_INT 4
40650: EQUAL
40651: IFFALSE 40661
// btype := b_barracks ;
40653: LD_ADDR_VAR 0 5
40657: PUSH
40658: LD_INT 5
40660: ST_TO_ADDR
// if btype = b_depot then
40661: LD_VAR 0 5
40665: PUSH
40666: LD_INT 0
40668: EQUAL
40669: IFFALSE 40679
// btype := b_warehouse ;
40671: LD_ADDR_VAR 0 5
40675: PUSH
40676: LD_INT 1
40678: ST_TO_ADDR
// if btype = b_workshop then
40679: LD_VAR 0 5
40683: PUSH
40684: LD_INT 2
40686: EQUAL
40687: IFFALSE 40697
// btype := b_factory ;
40689: LD_ADDR_VAR 0 5
40693: PUSH
40694: LD_INT 3
40696: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40697: LD_ADDR_VAR 0 4
40701: PUSH
40702: LD_VAR 0 5
40706: PPUSH
40707: LD_VAR 0 1
40711: PPUSH
40712: CALL_OW 248
40716: PPUSH
40717: CALL_OW 450
40721: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40722: LD_ADDR_VAR 0 2
40726: PUSH
40727: LD_VAR 0 3
40731: PPUSH
40732: LD_INT 1
40734: PPUSH
40735: CALL_OW 275
40739: PUSH
40740: LD_VAR 0 4
40744: PUSH
40745: LD_INT 1
40747: ARRAY
40748: GREATEREQUAL
40749: PUSH
40750: LD_VAR 0 3
40754: PPUSH
40755: LD_INT 2
40757: PPUSH
40758: CALL_OW 275
40762: PUSH
40763: LD_VAR 0 4
40767: PUSH
40768: LD_INT 2
40770: ARRAY
40771: GREATEREQUAL
40772: AND
40773: PUSH
40774: LD_VAR 0 3
40778: PPUSH
40779: LD_INT 3
40781: PPUSH
40782: CALL_OW 275
40786: PUSH
40787: LD_VAR 0 4
40791: PUSH
40792: LD_INT 3
40794: ARRAY
40795: GREATEREQUAL
40796: AND
40797: ST_TO_ADDR
// end ;
40798: LD_VAR 0 2
40802: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40803: LD_INT 0
40805: PPUSH
40806: PPUSH
40807: PPUSH
// pom := GetBase ( building ) ;
40808: LD_ADDR_VAR 0 4
40812: PUSH
40813: LD_VAR 0 1
40817: PPUSH
40818: CALL_OW 274
40822: ST_TO_ADDR
// if not pom then
40823: LD_VAR 0 4
40827: NOT
40828: IFFALSE 40832
// exit ;
40830: GO 40933
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40832: LD_ADDR_VAR 0 5
40836: PUSH
40837: LD_VAR 0 2
40841: PPUSH
40842: LD_VAR 0 1
40846: PPUSH
40847: CALL_OW 248
40851: PPUSH
40852: CALL_OW 450
40856: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40857: LD_ADDR_VAR 0 3
40861: PUSH
40862: LD_VAR 0 4
40866: PPUSH
40867: LD_INT 1
40869: PPUSH
40870: CALL_OW 275
40874: PUSH
40875: LD_VAR 0 5
40879: PUSH
40880: LD_INT 1
40882: ARRAY
40883: GREATEREQUAL
40884: PUSH
40885: LD_VAR 0 4
40889: PPUSH
40890: LD_INT 2
40892: PPUSH
40893: CALL_OW 275
40897: PUSH
40898: LD_VAR 0 5
40902: PUSH
40903: LD_INT 2
40905: ARRAY
40906: GREATEREQUAL
40907: AND
40908: PUSH
40909: LD_VAR 0 4
40913: PPUSH
40914: LD_INT 3
40916: PPUSH
40917: CALL_OW 275
40921: PUSH
40922: LD_VAR 0 5
40926: PUSH
40927: LD_INT 3
40929: ARRAY
40930: GREATEREQUAL
40931: AND
40932: ST_TO_ADDR
// end ;
40933: LD_VAR 0 3
40937: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
40938: LD_INT 0
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
40949: PPUSH
// result := false ;
40950: LD_ADDR_VAR 0 6
40954: PUSH
40955: LD_INT 0
40957: ST_TO_ADDR
// if not base or not btype or not x or not y then
40958: LD_VAR 0 1
40962: NOT
40963: PUSH
40964: LD_VAR 0 2
40968: NOT
40969: OR
40970: PUSH
40971: LD_VAR 0 3
40975: NOT
40976: OR
40977: PUSH
40978: LD_VAR 0 4
40982: NOT
40983: OR
40984: IFFALSE 40988
// exit ;
40986: GO 41597
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
40988: LD_ADDR_VAR 0 12
40992: PUSH
40993: LD_VAR 0 2
40997: PPUSH
40998: LD_VAR 0 3
41002: PPUSH
41003: LD_VAR 0 4
41007: PPUSH
41008: LD_VAR 0 5
41012: PPUSH
41013: LD_VAR 0 1
41017: PUSH
41018: LD_INT 1
41020: ARRAY
41021: PPUSH
41022: CALL_OW 248
41026: PPUSH
41027: LD_INT 0
41029: PPUSH
41030: CALL 42434 0 6
41034: ST_TO_ADDR
// if not hexes then
41035: LD_VAR 0 12
41039: NOT
41040: IFFALSE 41044
// exit ;
41042: GO 41597
// for i = 1 to hexes do
41044: LD_ADDR_VAR 0 7
41048: PUSH
41049: DOUBLE
41050: LD_INT 1
41052: DEC
41053: ST_TO_ADDR
41054: LD_VAR 0 12
41058: PUSH
41059: FOR_TO
41060: IFFALSE 41595
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41062: LD_ADDR_VAR 0 11
41066: PUSH
41067: LD_VAR 0 12
41071: PUSH
41072: LD_VAR 0 7
41076: ARRAY
41077: PUSH
41078: LD_INT 1
41080: ARRAY
41081: PPUSH
41082: LD_VAR 0 12
41086: PUSH
41087: LD_VAR 0 7
41091: ARRAY
41092: PUSH
41093: LD_INT 2
41095: ARRAY
41096: PPUSH
41097: CALL_OW 428
41101: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41102: LD_VAR 0 12
41106: PUSH
41107: LD_VAR 0 7
41111: ARRAY
41112: PUSH
41113: LD_INT 1
41115: ARRAY
41116: PPUSH
41117: LD_VAR 0 12
41121: PUSH
41122: LD_VAR 0 7
41126: ARRAY
41127: PUSH
41128: LD_INT 2
41130: ARRAY
41131: PPUSH
41132: CALL_OW 351
41136: PUSH
41137: LD_VAR 0 12
41141: PUSH
41142: LD_VAR 0 7
41146: ARRAY
41147: PUSH
41148: LD_INT 1
41150: ARRAY
41151: PPUSH
41152: LD_VAR 0 12
41156: PUSH
41157: LD_VAR 0 7
41161: ARRAY
41162: PUSH
41163: LD_INT 2
41165: ARRAY
41166: PPUSH
41167: CALL_OW 488
41171: NOT
41172: OR
41173: PUSH
41174: LD_VAR 0 11
41178: PPUSH
41179: CALL_OW 247
41183: PUSH
41184: LD_INT 3
41186: EQUAL
41187: OR
41188: IFFALSE 41194
// exit ;
41190: POP
41191: POP
41192: GO 41597
// if not tmp or not tmp in base then
41194: LD_VAR 0 11
41198: NOT
41199: PUSH
41200: LD_VAR 0 11
41204: PUSH
41205: LD_VAR 0 1
41209: IN
41210: NOT
41211: OR
41212: IFFALSE 41216
// continue ;
41214: GO 41059
// result := true ;
41216: LD_ADDR_VAR 0 6
41220: PUSH
41221: LD_INT 1
41223: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41224: LD_ADDR_VAR 0 15
41228: PUSH
41229: LD_VAR 0 1
41233: PPUSH
41234: LD_INT 22
41236: PUSH
41237: LD_VAR 0 11
41241: PPUSH
41242: CALL_OW 255
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: LD_INT 30
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 30
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: LIST
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PPUSH
41283: CALL_OW 72
41287: ST_TO_ADDR
// if dep then
41288: LD_VAR 0 15
41292: IFFALSE 41428
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41294: LD_ADDR_VAR 0 14
41298: PUSH
41299: LD_VAR 0 15
41303: PUSH
41304: LD_INT 1
41306: ARRAY
41307: PPUSH
41308: CALL_OW 250
41312: PPUSH
41313: LD_VAR 0 15
41317: PUSH
41318: LD_INT 1
41320: ARRAY
41321: PPUSH
41322: CALL_OW 254
41326: PPUSH
41327: LD_INT 5
41329: PPUSH
41330: CALL_OW 272
41334: PUSH
41335: LD_VAR 0 15
41339: PUSH
41340: LD_INT 1
41342: ARRAY
41343: PPUSH
41344: CALL_OW 251
41348: PPUSH
41349: LD_VAR 0 15
41353: PUSH
41354: LD_INT 1
41356: ARRAY
41357: PPUSH
41358: CALL_OW 254
41362: PPUSH
41363: LD_INT 5
41365: PPUSH
41366: CALL_OW 273
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41375: LD_VAR 0 14
41379: PUSH
41380: LD_INT 1
41382: ARRAY
41383: PPUSH
41384: LD_VAR 0 14
41388: PUSH
41389: LD_INT 2
41391: ARRAY
41392: PPUSH
41393: CALL_OW 488
41397: IFFALSE 41428
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41399: LD_VAR 0 11
41403: PPUSH
41404: LD_VAR 0 14
41408: PUSH
41409: LD_INT 1
41411: ARRAY
41412: PPUSH
41413: LD_VAR 0 14
41417: PUSH
41418: LD_INT 2
41420: ARRAY
41421: PPUSH
41422: CALL_OW 111
// continue ;
41426: GO 41059
// end ; end ; r := GetDir ( tmp ) ;
41428: LD_ADDR_VAR 0 13
41432: PUSH
41433: LD_VAR 0 11
41437: PPUSH
41438: CALL_OW 254
41442: ST_TO_ADDR
// if r = 5 then
41443: LD_VAR 0 13
41447: PUSH
41448: LD_INT 5
41450: EQUAL
41451: IFFALSE 41461
// r := 0 ;
41453: LD_ADDR_VAR 0 13
41457: PUSH
41458: LD_INT 0
41460: ST_TO_ADDR
// for j = r to 5 do
41461: LD_ADDR_VAR 0 8
41465: PUSH
41466: DOUBLE
41467: LD_VAR 0 13
41471: DEC
41472: ST_TO_ADDR
41473: LD_INT 5
41475: PUSH
41476: FOR_TO
41477: IFFALSE 41591
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41479: LD_ADDR_VAR 0 9
41483: PUSH
41484: LD_VAR 0 11
41488: PPUSH
41489: CALL_OW 250
41493: PPUSH
41494: LD_VAR 0 8
41498: PPUSH
41499: LD_INT 2
41501: PPUSH
41502: CALL_OW 272
41506: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41507: LD_ADDR_VAR 0 10
41511: PUSH
41512: LD_VAR 0 11
41516: PPUSH
41517: CALL_OW 251
41521: PPUSH
41522: LD_VAR 0 8
41526: PPUSH
41527: LD_INT 2
41529: PPUSH
41530: CALL_OW 273
41534: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41535: LD_VAR 0 9
41539: PPUSH
41540: LD_VAR 0 10
41544: PPUSH
41545: CALL_OW 488
41549: PUSH
41550: LD_VAR 0 9
41554: PPUSH
41555: LD_VAR 0 10
41559: PPUSH
41560: CALL_OW 428
41564: NOT
41565: AND
41566: IFFALSE 41589
// begin ComMoveXY ( tmp , _x , _y ) ;
41568: LD_VAR 0 11
41572: PPUSH
41573: LD_VAR 0 9
41577: PPUSH
41578: LD_VAR 0 10
41582: PPUSH
41583: CALL_OW 111
// break ;
41587: GO 41591
// end ; end ;
41589: GO 41476
41591: POP
41592: POP
// end ;
41593: GO 41059
41595: POP
41596: POP
// end ;
41597: LD_VAR 0 6
41601: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41602: LD_INT 0
41604: PPUSH
41605: PPUSH
41606: PPUSH
41607: PPUSH
41608: PPUSH
41609: PPUSH
41610: PPUSH
41611: PPUSH
41612: PPUSH
41613: PPUSH
// result := false ;
41614: LD_ADDR_VAR 0 6
41618: PUSH
41619: LD_INT 0
41621: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41622: LD_VAR 0 1
41626: NOT
41627: PUSH
41628: LD_VAR 0 1
41632: PPUSH
41633: CALL_OW 266
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: IN
41648: NOT
41649: OR
41650: PUSH
41651: LD_VAR 0 2
41655: NOT
41656: OR
41657: PUSH
41658: LD_VAR 0 5
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: LD_INT 4
41677: PUSH
41678: LD_INT 5
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: IN
41689: NOT
41690: OR
41691: PUSH
41692: LD_VAR 0 3
41696: PPUSH
41697: LD_VAR 0 4
41701: PPUSH
41702: CALL_OW 488
41706: NOT
41707: OR
41708: IFFALSE 41712
// exit ;
41710: GO 42429
// pom := GetBase ( depot ) ;
41712: LD_ADDR_VAR 0 10
41716: PUSH
41717: LD_VAR 0 1
41721: PPUSH
41722: CALL_OW 274
41726: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41727: LD_ADDR_VAR 0 11
41731: PUSH
41732: LD_VAR 0 2
41736: PPUSH
41737: LD_VAR 0 1
41741: PPUSH
41742: CALL_OW 248
41746: PPUSH
41747: CALL_OW 450
41751: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41752: LD_VAR 0 10
41756: PPUSH
41757: LD_INT 1
41759: PPUSH
41760: CALL_OW 275
41764: PUSH
41765: LD_VAR 0 11
41769: PUSH
41770: LD_INT 1
41772: ARRAY
41773: GREATEREQUAL
41774: PUSH
41775: LD_VAR 0 10
41779: PPUSH
41780: LD_INT 2
41782: PPUSH
41783: CALL_OW 275
41787: PUSH
41788: LD_VAR 0 11
41792: PUSH
41793: LD_INT 2
41795: ARRAY
41796: GREATEREQUAL
41797: AND
41798: PUSH
41799: LD_VAR 0 10
41803: PPUSH
41804: LD_INT 3
41806: PPUSH
41807: CALL_OW 275
41811: PUSH
41812: LD_VAR 0 11
41816: PUSH
41817: LD_INT 3
41819: ARRAY
41820: GREATEREQUAL
41821: AND
41822: NOT
41823: IFFALSE 41827
// exit ;
41825: GO 42429
// if GetBType ( depot ) = b_depot then
41827: LD_VAR 0 1
41831: PPUSH
41832: CALL_OW 266
41836: PUSH
41837: LD_INT 0
41839: EQUAL
41840: IFFALSE 41852
// dist := 28 else
41842: LD_ADDR_VAR 0 14
41846: PUSH
41847: LD_INT 28
41849: ST_TO_ADDR
41850: GO 41860
// dist := 36 ;
41852: LD_ADDR_VAR 0 14
41856: PUSH
41857: LD_INT 36
41859: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41860: LD_VAR 0 1
41864: PPUSH
41865: LD_VAR 0 3
41869: PPUSH
41870: LD_VAR 0 4
41874: PPUSH
41875: CALL_OW 297
41879: PUSH
41880: LD_VAR 0 14
41884: GREATER
41885: IFFALSE 41889
// exit ;
41887: GO 42429
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41889: LD_ADDR_VAR 0 12
41893: PUSH
41894: LD_VAR 0 2
41898: PPUSH
41899: LD_VAR 0 3
41903: PPUSH
41904: LD_VAR 0 4
41908: PPUSH
41909: LD_VAR 0 5
41913: PPUSH
41914: LD_VAR 0 1
41918: PPUSH
41919: CALL_OW 248
41923: PPUSH
41924: LD_INT 0
41926: PPUSH
41927: CALL 42434 0 6
41931: ST_TO_ADDR
// if not hexes then
41932: LD_VAR 0 12
41936: NOT
41937: IFFALSE 41941
// exit ;
41939: GO 42429
// hex := GetHexInfo ( x , y ) ;
41941: LD_ADDR_VAR 0 15
41945: PUSH
41946: LD_VAR 0 3
41950: PPUSH
41951: LD_VAR 0 4
41955: PPUSH
41956: CALL_OW 546
41960: ST_TO_ADDR
// if hex [ 1 ] then
41961: LD_VAR 0 15
41965: PUSH
41966: LD_INT 1
41968: ARRAY
41969: IFFALSE 41973
// exit ;
41971: GO 42429
// height := hex [ 2 ] ;
41973: LD_ADDR_VAR 0 13
41977: PUSH
41978: LD_VAR 0 15
41982: PUSH
41983: LD_INT 2
41985: ARRAY
41986: ST_TO_ADDR
// for i = 1 to hexes do
41987: LD_ADDR_VAR 0 7
41991: PUSH
41992: DOUBLE
41993: LD_INT 1
41995: DEC
41996: ST_TO_ADDR
41997: LD_VAR 0 12
42001: PUSH
42002: FOR_TO
42003: IFFALSE 42333
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42005: LD_VAR 0 12
42009: PUSH
42010: LD_VAR 0 7
42014: ARRAY
42015: PUSH
42016: LD_INT 1
42018: ARRAY
42019: PPUSH
42020: LD_VAR 0 12
42024: PUSH
42025: LD_VAR 0 7
42029: ARRAY
42030: PUSH
42031: LD_INT 2
42033: ARRAY
42034: PPUSH
42035: CALL_OW 488
42039: NOT
42040: PUSH
42041: LD_VAR 0 12
42045: PUSH
42046: LD_VAR 0 7
42050: ARRAY
42051: PUSH
42052: LD_INT 1
42054: ARRAY
42055: PPUSH
42056: LD_VAR 0 12
42060: PUSH
42061: LD_VAR 0 7
42065: ARRAY
42066: PUSH
42067: LD_INT 2
42069: ARRAY
42070: PPUSH
42071: CALL_OW 428
42075: PUSH
42076: LD_INT 0
42078: GREATER
42079: OR
42080: PUSH
42081: LD_VAR 0 12
42085: PUSH
42086: LD_VAR 0 7
42090: ARRAY
42091: PUSH
42092: LD_INT 1
42094: ARRAY
42095: PPUSH
42096: LD_VAR 0 12
42100: PUSH
42101: LD_VAR 0 7
42105: ARRAY
42106: PUSH
42107: LD_INT 2
42109: ARRAY
42110: PPUSH
42111: CALL_OW 351
42115: OR
42116: IFFALSE 42122
// exit ;
42118: POP
42119: POP
42120: GO 42429
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42122: LD_ADDR_VAR 0 8
42126: PUSH
42127: LD_VAR 0 12
42131: PUSH
42132: LD_VAR 0 7
42136: ARRAY
42137: PUSH
42138: LD_INT 1
42140: ARRAY
42141: PPUSH
42142: LD_VAR 0 12
42146: PUSH
42147: LD_VAR 0 7
42151: ARRAY
42152: PUSH
42153: LD_INT 2
42155: ARRAY
42156: PPUSH
42157: CALL_OW 546
42161: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42162: LD_VAR 0 8
42166: PUSH
42167: LD_INT 1
42169: ARRAY
42170: PUSH
42171: LD_VAR 0 8
42175: PUSH
42176: LD_INT 2
42178: ARRAY
42179: PUSH
42180: LD_VAR 0 13
42184: PUSH
42185: LD_INT 2
42187: PLUS
42188: GREATER
42189: OR
42190: PUSH
42191: LD_VAR 0 8
42195: PUSH
42196: LD_INT 2
42198: ARRAY
42199: PUSH
42200: LD_VAR 0 13
42204: PUSH
42205: LD_INT 2
42207: MINUS
42208: LESS
42209: OR
42210: PUSH
42211: LD_VAR 0 8
42215: PUSH
42216: LD_INT 3
42218: ARRAY
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 8
42225: PUSH
42226: LD_INT 9
42228: PUSH
42229: LD_INT 10
42231: PUSH
42232: LD_INT 11
42234: PUSH
42235: LD_INT 12
42237: PUSH
42238: LD_INT 13
42240: PUSH
42241: LD_INT 16
42243: PUSH
42244: LD_INT 17
42246: PUSH
42247: LD_INT 18
42249: PUSH
42250: LD_INT 19
42252: PUSH
42253: LD_INT 20
42255: PUSH
42256: LD_INT 21
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: IN
42274: NOT
42275: OR
42276: PUSH
42277: LD_VAR 0 8
42281: PUSH
42282: LD_INT 5
42284: ARRAY
42285: NOT
42286: OR
42287: PUSH
42288: LD_VAR 0 8
42292: PUSH
42293: LD_INT 6
42295: ARRAY
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: LD_INT 7
42305: PUSH
42306: LD_INT 9
42308: PUSH
42309: LD_INT 10
42311: PUSH
42312: LD_INT 11
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: IN
42323: NOT
42324: OR
42325: IFFALSE 42331
// exit ;
42327: POP
42328: POP
42329: GO 42429
// end ;
42331: GO 42002
42333: POP
42334: POP
// side := GetSide ( depot ) ;
42335: LD_ADDR_VAR 0 9
42339: PUSH
42340: LD_VAR 0 1
42344: PPUSH
42345: CALL_OW 255
42349: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42350: LD_VAR 0 9
42354: PPUSH
42355: LD_VAR 0 3
42359: PPUSH
42360: LD_VAR 0 4
42364: PPUSH
42365: LD_INT 20
42367: PPUSH
42368: CALL 35083 0 4
42372: PUSH
42373: LD_INT 4
42375: ARRAY
42376: IFFALSE 42380
// exit ;
42378: GO 42429
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42380: LD_VAR 0 2
42384: PUSH
42385: LD_INT 29
42387: PUSH
42388: LD_INT 30
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: IN
42395: PUSH
42396: LD_VAR 0 3
42400: PPUSH
42401: LD_VAR 0 4
42405: PPUSH
42406: LD_VAR 0 9
42410: PPUSH
42411: CALL_OW 440
42415: NOT
42416: AND
42417: IFFALSE 42421
// exit ;
42419: GO 42429
// result := true ;
42421: LD_ADDR_VAR 0 6
42425: PUSH
42426: LD_INT 1
42428: ST_TO_ADDR
// end ;
42429: LD_VAR 0 6
42433: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42434: LD_INT 0
42436: PPUSH
42437: PPUSH
42438: PPUSH
42439: PPUSH
42440: PPUSH
42441: PPUSH
42442: PPUSH
42443: PPUSH
42444: PPUSH
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
42449: PPUSH
42450: PPUSH
42451: PPUSH
42452: PPUSH
42453: PPUSH
42454: PPUSH
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
42463: PPUSH
42464: PPUSH
42465: PPUSH
42466: PPUSH
42467: PPUSH
42468: PPUSH
42469: PPUSH
42470: PPUSH
42471: PPUSH
42472: PPUSH
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
42491: PPUSH
42492: PPUSH
42493: PPUSH
// result = [ ] ;
42494: LD_ADDR_VAR 0 7
42498: PUSH
42499: EMPTY
42500: ST_TO_ADDR
// temp_list = [ ] ;
42501: LD_ADDR_VAR 0 9
42505: PUSH
42506: EMPTY
42507: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42508: LD_VAR 0 4
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: LD_INT 3
42524: PUSH
42525: LD_INT 4
42527: PUSH
42528: LD_INT 5
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: IN
42539: NOT
42540: PUSH
42541: LD_VAR 0 1
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: IN
42556: PUSH
42557: LD_VAR 0 5
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: LD_INT 2
42567: PUSH
42568: LD_INT 3
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: IN
42576: NOT
42577: AND
42578: OR
42579: IFFALSE 42583
// exit ;
42581: GO 60974
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42583: LD_VAR 0 1
42587: PUSH
42588: LD_INT 6
42590: PUSH
42591: LD_INT 7
42593: PUSH
42594: LD_INT 8
42596: PUSH
42597: LD_INT 13
42599: PUSH
42600: LD_INT 12
42602: PUSH
42603: LD_INT 15
42605: PUSH
42606: LD_INT 11
42608: PUSH
42609: LD_INT 14
42611: PUSH
42612: LD_INT 10
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: IN
42626: IFFALSE 42636
// btype = b_lab ;
42628: LD_ADDR_VAR 0 1
42632: PUSH
42633: LD_INT 6
42635: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42636: LD_VAR 0 6
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: LIST
42654: IN
42655: NOT
42656: PUSH
42657: LD_VAR 0 1
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: LD_INT 3
42673: PUSH
42674: LD_INT 6
42676: PUSH
42677: LD_INT 36
42679: PUSH
42680: LD_INT 4
42682: PUSH
42683: LD_INT 5
42685: PUSH
42686: LD_INT 31
42688: PUSH
42689: LD_INT 32
42691: PUSH
42692: LD_INT 33
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: IN
42708: NOT
42709: PUSH
42710: LD_VAR 0 6
42714: PUSH
42715: LD_INT 1
42717: EQUAL
42718: AND
42719: OR
42720: PUSH
42721: LD_VAR 0 1
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: LD_INT 3
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: IN
42736: NOT
42737: PUSH
42738: LD_VAR 0 6
42742: PUSH
42743: LD_INT 2
42745: EQUAL
42746: AND
42747: OR
42748: IFFALSE 42758
// mode = 0 ;
42750: LD_ADDR_VAR 0 6
42754: PUSH
42755: LD_INT 0
42757: ST_TO_ADDR
// case mode of 0 :
42758: LD_VAR 0 6
42762: PUSH
42763: LD_INT 0
42765: DOUBLE
42766: EQUAL
42767: IFTRUE 42771
42769: GO 54224
42771: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42772: LD_ADDR_VAR 0 11
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 3
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 3
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42965: LD_ADDR_VAR 0 12
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: NEG
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 3
43122: NEG
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 3
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43161: LD_ADDR_VAR 0 13
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 2
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: NEG
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: LD_INT 3
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 3
43320: NEG
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 3
43332: NEG
43333: PUSH
43334: LD_INT 3
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43360: LD_ADDR_VAR 0 14
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 3
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 3
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43556: LD_ADDR_VAR 0 15
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 3
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43749: LD_ADDR_VAR 0 16
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 3
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: LD_INT 3
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43942: LD_ADDR_VAR 0 17
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: PUSH
44078: LD_INT 2
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 2
44118: NEG
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 2
44141: NEG
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44172: LD_ADDR_VAR 0 18
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 2
44307: PUSH
44308: LD_INT 2
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: LD_INT 2
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44402: LD_ADDR_VAR 0 19
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44632: LD_ADDR_VAR 0 20
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44862: LD_ADDR_VAR 0 21
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45092: LD_ADDR_VAR 0 22
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45322: LD_ADDR_VAR 0 23
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 3
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45602: LD_ADDR_VAR 0 24
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45878: LD_ADDR_VAR 0 25
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 2
46065: NEG
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 3
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 3
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46152: LD_ADDR_VAR 0 26
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 3
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46428: LD_ADDR_VAR 0 27
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 3
46661: NEG
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46708: LD_ADDR_VAR 0 28
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 2
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 3
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 3
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 3
46943: NEG
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 3
46955: NEG
46956: PUSH
46957: LD_INT 2
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46990: LD_ADDR_VAR 0 29
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: LD_INT 3
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 3
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 3
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 3
47234: NEG
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47269: LD_ADDR_VAR 0 30
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 2
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 3
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 3
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: LD_INT 3
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47547: LD_ADDR_VAR 0 31
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 2
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 3
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 3
47790: NEG
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47825: LD_ADDR_VAR 0 32
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 2
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 3
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 3
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 3
48068: NEG
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48103: LD_ADDR_VAR 0 33
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: LD_INT 3
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 3
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 3
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 3
48347: NEG
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48382: LD_ADDR_VAR 0 34
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: LD_INT 2
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 3
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 3
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: LD_INT 3
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48662: LD_ADDR_VAR 0 35
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48774: LD_ADDR_VAR 0 36
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48886: LD_ADDR_VAR 0 37
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48998: LD_ADDR_VAR 0 38
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49110: LD_ADDR_VAR 0 39
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49222: LD_ADDR_VAR 0 40
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49334: LD_ADDR_VAR 0 41
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 3
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 3
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 3
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 3
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 3
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 3
49608: NEG
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 3
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 3
49631: NEG
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49684: LD_ADDR_VAR 0 42
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: LD_INT 3
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 3
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 3
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 3
49981: NEG
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 3
49993: NEG
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50034: LD_ADDR_VAR 0 43
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: LD_INT 3
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 3
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 2
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 3
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 3
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 3
50330: NEG
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 3
50341: NEG
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50382: LD_ADDR_VAR 0 44
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: LD_INT 3
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 3
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 3
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 3
50625: PUSH
50626: LD_INT 3
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: LD_INT 2
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 3
50691: NEG
50692: PUSH
50693: LD_INT 3
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50732: LD_ADDR_VAR 0 45
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 2
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: LD_INT 3
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 3
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: LD_INT 2
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 3
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: LD_INT 3
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 3
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 3
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 3
51041: NEG
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51082: LD_ADDR_VAR 0 46
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 3
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 3
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 3
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 2
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 3
51378: NEG
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51430: LD_ADDR_VAR 0 47
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51581: LD_ADDR_VAR 0 48
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 2
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51728: LD_ADDR_VAR 0 49
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51872: LD_ADDR_VAR 0 50
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52016: LD_ADDR_VAR 0 51
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52163: LD_ADDR_VAR 0 52
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52314: LD_ADDR_VAR 0 53
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52544: LD_ADDR_VAR 0 54
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52774: LD_ADDR_VAR 0 55
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53004: LD_ADDR_VAR 0 56
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53234: LD_ADDR_VAR 0 57
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53464: LD_ADDR_VAR 0 58
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53694: LD_ADDR_VAR 0 59
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53782: LD_ADDR_VAR 0 60
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53870: LD_ADDR_VAR 0 61
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53958: LD_ADDR_VAR 0 62
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54046: LD_ADDR_VAR 0 63
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54134: LD_ADDR_VAR 0 64
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: ST_TO_ADDR
// end ; 1 :
54222: GO 60119
54224: LD_INT 1
54226: DOUBLE
54227: EQUAL
54228: IFTRUE 54232
54230: GO 56855
54232: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54233: LD_ADDR_VAR 0 11
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 3
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54277: LD_ADDR_VAR 0 12
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 3
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54318: LD_ADDR_VAR 0 13
54322: PUSH
54323: LD_INT 3
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54358: LD_ADDR_VAR 0 14
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 3
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: LIST
54398: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54399: LD_ADDR_VAR 0 15
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 3
54428: NEG
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: LIST
54442: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54443: LD_ADDR_VAR 0 16
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 3
54462: NEG
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 3
54474: NEG
54475: PUSH
54476: LD_INT 3
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: LIST
54488: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54489: LD_ADDR_VAR 0 17
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 3
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 3
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: LIST
54532: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54533: LD_ADDR_VAR 0 18
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54574: LD_ADDR_VAR 0 19
54578: PUSH
54579: LD_INT 3
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 3
54591: PUSH
54592: LD_INT 3
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: LD_INT 3
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: LIST
54613: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54614: LD_ADDR_VAR 0 20
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: LD_INT 3
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 3
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: LIST
54654: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54655: LD_ADDR_VAR 0 21
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: NEG
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 3
54684: NEG
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54699: LD_ADDR_VAR 0 22
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: NEG
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54745: LD_ADDR_VAR 0 23
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 4
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: LIST
54788: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54789: LD_ADDR_VAR 0 24
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 3
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 4
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: LIST
54829: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54830: LD_ADDR_VAR 0 25
54834: PUSH
54835: LD_INT 3
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 4
54847: PUSH
54848: LD_INT 3
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 3
54857: PUSH
54858: LD_INT 4
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54870: LD_ADDR_VAR 0 26
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: LD_INT 4
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 3
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54911: LD_ADDR_VAR 0 27
54915: PUSH
54916: LD_INT 3
54918: NEG
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 3
54929: NEG
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 4
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: LIST
54954: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54955: LD_ADDR_VAR 0 28
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: LD_INT 3
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: LD_INT 4
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 4
54986: NEG
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55001: LD_ADDR_VAR 0 29
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 3
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 3
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 4
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 4
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 3
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 5
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 5
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 4
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 6
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 6
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 5
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55156: LD_ADDR_VAR 0 30
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 3
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 4
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 4
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 4
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 5
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 5
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 5
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 6
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 6
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55299: LD_ADDR_VAR 0 31
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 4
55336: PUSH
55337: LD_INT 3
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 4
55346: PUSH
55347: LD_INT 4
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 3
55356: PUSH
55357: LD_INT 4
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 5
55366: PUSH
55367: LD_INT 4
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 5
55376: PUSH
55377: LD_INT 5
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 4
55386: PUSH
55387: LD_INT 5
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 6
55396: PUSH
55397: LD_INT 5
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 6
55406: PUSH
55407: LD_INT 6
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 5
55416: PUSH
55417: LD_INT 6
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55438: LD_ADDR_VAR 0 32
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: LD_INT 3
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 3
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 4
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 4
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 5
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 5
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 4
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 6
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 6
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 5
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55581: LD_ADDR_VAR 0 33
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 3
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 3
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 4
55633: NEG
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 4
55644: NEG
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 4
55656: NEG
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 5
55667: NEG
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 5
55678: NEG
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 5
55690: NEG
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 6
55701: NEG
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 6
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55736: LD_ADDR_VAR 0 34
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 3
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 3
55755: NEG
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 3
55767: NEG
55768: PUSH
55769: LD_INT 3
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 3
55779: NEG
55780: PUSH
55781: LD_INT 4
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 4
55791: NEG
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 4
55803: NEG
55804: PUSH
55805: LD_INT 4
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 4
55815: NEG
55816: PUSH
55817: LD_INT 5
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 5
55827: NEG
55828: PUSH
55829: LD_INT 4
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 5
55839: NEG
55840: PUSH
55841: LD_INT 5
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 5
55851: NEG
55852: PUSH
55853: LD_INT 6
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 6
55863: NEG
55864: PUSH
55865: LD_INT 5
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 6
55875: NEG
55876: PUSH
55877: LD_INT 6
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55899: LD_ADDR_VAR 0 41
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 2
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55943: LD_ADDR_VAR 0 42
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 3
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: LIST
55983: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55984: LD_ADDR_VAR 0 43
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 3
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: LD_INT 3
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56024: LD_ADDR_VAR 0 44
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 3
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: LIST
56064: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56065: LD_ADDR_VAR 0 45
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56109: LD_ADDR_VAR 0 46
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: LD_INT 3
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 3
56140: NEG
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56155: LD_ADDR_VAR 0 47
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 3
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56188: LD_ADDR_VAR 0 48
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56219: LD_ADDR_VAR 0 49
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 3
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56248: LD_ADDR_VAR 0 50
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56277: LD_ADDR_VAR 0 51
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56308: LD_ADDR_VAR 0 52
56312: PUSH
56313: LD_INT 3
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 3
56327: NEG
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56341: LD_ADDR_VAR 0 53
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: LD_INT 3
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: LIST
56384: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56385: LD_ADDR_VAR 0 54
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: LIST
56425: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56426: LD_ADDR_VAR 0 55
56430: PUSH
56431: LD_INT 3
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: LD_INT 3
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 3
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56466: LD_ADDR_VAR 0 56
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: LD_INT 3
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: LIST
56506: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56507: LD_ADDR_VAR 0 57
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 3
56525: NEG
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 3
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: LIST
56550: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56551: LD_ADDR_VAR 0 58
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 3
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 3
56582: NEG
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: LIST
56596: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56597: LD_ADDR_VAR 0 59
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56641: LD_ADDR_VAR 0 60
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: LIST
56681: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56682: LD_ADDR_VAR 0 61
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: LD_INT 2
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: LIST
56721: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56722: LD_ADDR_VAR 0 62
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: LIST
56762: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56763: LD_ADDR_VAR 0 63
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: LIST
56806: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56807: LD_ADDR_VAR 0 64
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: ST_TO_ADDR
// end ; 2 :
56853: GO 60119
56855: LD_INT 2
56857: DOUBLE
56858: EQUAL
56859: IFTRUE 56863
56861: GO 60118
56863: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56864: LD_ADDR_VAR 0 29
56868: PUSH
56869: LD_INT 4
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 4
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 5
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 5
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 4
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 3
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 5
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 3
56964: PUSH
56965: LD_INT 3
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 4
56984: PUSH
56985: LD_INT 3
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 4
56994: PUSH
56995: LD_INT 4
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 3
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 4
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: LD_INT 4
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 4
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 4
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 5
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 5
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: LD_INT 4
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 3
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 5
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: LD_INT 3
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 3
57158: NEG
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 3
57192: NEG
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 4
57203: NEG
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 4
57214: NEG
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 4
57226: NEG
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 4
57249: NEG
57250: PUSH
57251: LD_INT 4
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 4
57261: NEG
57262: PUSH
57263: LD_INT 5
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: NEG
57274: PUSH
57275: LD_INT 4
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: LD_INT 3
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 4
57297: NEG
57298: PUSH
57299: LD_INT 3
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 5
57309: NEG
57310: PUSH
57311: LD_INT 4
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 5
57321: NEG
57322: PUSH
57323: LD_INT 5
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: NEG
57334: PUSH
57335: LD_INT 5
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 5
57345: NEG
57346: PUSH
57347: LD_INT 3
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57402: LD_ADDR_VAR 0 30
57406: PUSH
57407: LD_INT 4
57409: PUSH
57410: LD_INT 4
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 4
57419: PUSH
57420: LD_INT 3
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 5
57429: PUSH
57430: LD_INT 4
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 5
57439: PUSH
57440: LD_INT 5
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 4
57449: PUSH
57450: LD_INT 5
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 3
57459: PUSH
57460: LD_INT 4
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 3
57469: PUSH
57470: LD_INT 3
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 5
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 3
57489: PUSH
57490: LD_INT 5
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 3
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: LD_INT 4
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 4
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 3
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: LD_INT 4
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 4
57592: NEG
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 4
57603: NEG
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 3
57615: NEG
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 4
57637: NEG
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 5
57648: NEG
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 5
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 5
57671: NEG
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 3
57706: NEG
57707: PUSH
57708: LD_INT 4
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 3
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: NEG
57743: PUSH
57744: LD_INT 2
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 4
57754: NEG
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 4
57766: NEG
57767: PUSH
57768: LD_INT 4
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: LD_INT 4
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 4
57790: NEG
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 4
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 5
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 4
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: LD_INT 3
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: LD_INT 4
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 5
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: LD_INT 5
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57949: LD_ADDR_VAR 0 31
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 4
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 4
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 5
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 5
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 4
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 3
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 5
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 3
58094: NEG
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 4
58105: NEG
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 4
58116: NEG
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 4
58128: NEG
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 4
58151: NEG
58152: PUSH
58153: LD_INT 4
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 4
58163: NEG
58164: PUSH
58165: LD_INT 5
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 3
58175: NEG
58176: PUSH
58177: LD_INT 4
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 3
58187: NEG
58188: PUSH
58189: LD_INT 3
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 4
58199: NEG
58200: PUSH
58201: LD_INT 3
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 5
58211: NEG
58212: PUSH
58213: LD_INT 4
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 5
58223: NEG
58224: PUSH
58225: LD_INT 5
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 3
58235: NEG
58236: PUSH
58237: LD_INT 5
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 5
58247: NEG
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 3
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 4
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: LD_INT 3
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 3
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 4
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: LD_INT 4
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 4
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 4
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 5
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 5
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 4
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 3
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 5
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58499: LD_ADDR_VAR 0 32
58503: PUSH
58504: LD_INT 4
58506: NEG
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 4
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: NEG
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 4
58551: NEG
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 5
58562: NEG
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 5
58573: NEG
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 5
58585: NEG
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: LD_INT 3
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 3
58620: NEG
58621: PUSH
58622: LD_INT 4
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: LD_INT 3
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: LD_INT 2
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 3
58656: NEG
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 4
58668: NEG
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 4
58680: NEG
58681: PUSH
58682: LD_INT 4
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 4
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 4
58704: NEG
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: LD_INT 4
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: LD_INT 5
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 4
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 3
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 4
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 5
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 5
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 4
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 4
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 4
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 4
58911: PUSH
58912: LD_INT 4
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 4
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 5
58931: PUSH
58932: LD_INT 4
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 5
58941: PUSH
58942: LD_INT 5
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 4
58951: PUSH
58952: LD_INT 5
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: LD_INT 4
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: PUSH
58972: LD_INT 3
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 5
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 3
58991: PUSH
58992: LD_INT 5
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59046: LD_ADDR_VAR 0 33
59050: PUSH
59051: LD_INT 4
59053: NEG
59054: PUSH
59055: LD_INT 4
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 4
59065: NEG
59066: PUSH
59067: LD_INT 5
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: LD_INT 4
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 3
59089: NEG
59090: PUSH
59091: LD_INT 3
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 4
59101: NEG
59102: PUSH
59103: LD_INT 3
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 5
59113: NEG
59114: PUSH
59115: LD_INT 4
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 5
59125: NEG
59126: PUSH
59127: LD_INT 5
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 3
59137: NEG
59138: PUSH
59139: LD_INT 5
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 5
59149: NEG
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: LD_INT 3
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: LD_INT 4
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 3
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: LD_INT 4
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: LD_INT 4
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 4
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 5
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 5
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 4
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 5
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 3
59356: PUSH
59357: LD_INT 3
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 4
59376: PUSH
59377: LD_INT 3
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 4
59386: PUSH
59387: LD_INT 4
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 3
59396: PUSH
59397: LD_INT 4
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: LD_INT 3
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: LD_INT 2
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 4
59426: PUSH
59427: LD_INT 2
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 2
59436: PUSH
59437: LD_INT 4
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 4
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 3
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: LD_INT 4
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 5
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 5
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 4
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 3
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: LD_INT 5
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 3
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59584: LD_ADDR_VAR 0 34
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: LD_INT 4
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 5
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 4
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 3
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: LD_INT 3
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 4
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 5
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: LD_INT 3
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: LD_INT 5
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 3
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 4
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 4
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 3
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 4
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 4
59786: PUSH
59787: LD_INT 4
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 4
59796: PUSH
59797: LD_INT 3
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 5
59806: PUSH
59807: LD_INT 4
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 5
59816: PUSH
59817: LD_INT 5
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 4
59826: PUSH
59827: LD_INT 5
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 3
59836: PUSH
59837: LD_INT 4
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 3
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 5
59856: PUSH
59857: LD_INT 3
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 3
59866: PUSH
59867: LD_INT 5
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 3
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: LD_INT 4
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 4
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: LD_INT 4
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 4
59969: NEG
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 4
59980: NEG
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 3
59992: NEG
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 4
60014: NEG
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 5
60025: NEG
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 5
60036: NEG
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 5
60048: NEG
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 3
60060: NEG
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: ST_TO_ADDR
// end ; end ;
60116: GO 60119
60118: POP
// case btype of b_depot , b_warehouse :
60119: LD_VAR 0 1
60123: PUSH
60124: LD_INT 0
60126: DOUBLE
60127: EQUAL
60128: IFTRUE 60138
60130: LD_INT 1
60132: DOUBLE
60133: EQUAL
60134: IFTRUE 60138
60136: GO 60339
60138: POP
// case nation of nation_american :
60139: LD_VAR 0 5
60143: PUSH
60144: LD_INT 1
60146: DOUBLE
60147: EQUAL
60148: IFTRUE 60152
60150: GO 60208
60152: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60153: LD_ADDR_VAR 0 9
60157: PUSH
60158: LD_VAR 0 11
60162: PUSH
60163: LD_VAR 0 12
60167: PUSH
60168: LD_VAR 0 13
60172: PUSH
60173: LD_VAR 0 14
60177: PUSH
60178: LD_VAR 0 15
60182: PUSH
60183: LD_VAR 0 16
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: PUSH
60196: LD_VAR 0 4
60200: PUSH
60201: LD_INT 1
60203: PLUS
60204: ARRAY
60205: ST_TO_ADDR
60206: GO 60337
60208: LD_INT 2
60210: DOUBLE
60211: EQUAL
60212: IFTRUE 60216
60214: GO 60272
60216: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60217: LD_ADDR_VAR 0 9
60221: PUSH
60222: LD_VAR 0 17
60226: PUSH
60227: LD_VAR 0 18
60231: PUSH
60232: LD_VAR 0 19
60236: PUSH
60237: LD_VAR 0 20
60241: PUSH
60242: LD_VAR 0 21
60246: PUSH
60247: LD_VAR 0 22
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: PUSH
60260: LD_VAR 0 4
60264: PUSH
60265: LD_INT 1
60267: PLUS
60268: ARRAY
60269: ST_TO_ADDR
60270: GO 60337
60272: LD_INT 3
60274: DOUBLE
60275: EQUAL
60276: IFTRUE 60280
60278: GO 60336
60280: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60281: LD_ADDR_VAR 0 9
60285: PUSH
60286: LD_VAR 0 23
60290: PUSH
60291: LD_VAR 0 24
60295: PUSH
60296: LD_VAR 0 25
60300: PUSH
60301: LD_VAR 0 26
60305: PUSH
60306: LD_VAR 0 27
60310: PUSH
60311: LD_VAR 0 28
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: PUSH
60324: LD_VAR 0 4
60328: PUSH
60329: LD_INT 1
60331: PLUS
60332: ARRAY
60333: ST_TO_ADDR
60334: GO 60337
60336: POP
60337: GO 60892
60339: LD_INT 2
60341: DOUBLE
60342: EQUAL
60343: IFTRUE 60353
60345: LD_INT 3
60347: DOUBLE
60348: EQUAL
60349: IFTRUE 60353
60351: GO 60409
60353: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60354: LD_ADDR_VAR 0 9
60358: PUSH
60359: LD_VAR 0 29
60363: PUSH
60364: LD_VAR 0 30
60368: PUSH
60369: LD_VAR 0 31
60373: PUSH
60374: LD_VAR 0 32
60378: PUSH
60379: LD_VAR 0 33
60383: PUSH
60384: LD_VAR 0 34
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: PUSH
60397: LD_VAR 0 4
60401: PUSH
60402: LD_INT 1
60404: PLUS
60405: ARRAY
60406: ST_TO_ADDR
60407: GO 60892
60409: LD_INT 16
60411: DOUBLE
60412: EQUAL
60413: IFTRUE 60471
60415: LD_INT 17
60417: DOUBLE
60418: EQUAL
60419: IFTRUE 60471
60421: LD_INT 18
60423: DOUBLE
60424: EQUAL
60425: IFTRUE 60471
60427: LD_INT 19
60429: DOUBLE
60430: EQUAL
60431: IFTRUE 60471
60433: LD_INT 22
60435: DOUBLE
60436: EQUAL
60437: IFTRUE 60471
60439: LD_INT 20
60441: DOUBLE
60442: EQUAL
60443: IFTRUE 60471
60445: LD_INT 21
60447: DOUBLE
60448: EQUAL
60449: IFTRUE 60471
60451: LD_INT 23
60453: DOUBLE
60454: EQUAL
60455: IFTRUE 60471
60457: LD_INT 24
60459: DOUBLE
60460: EQUAL
60461: IFTRUE 60471
60463: LD_INT 25
60465: DOUBLE
60466: EQUAL
60467: IFTRUE 60471
60469: GO 60527
60471: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60472: LD_ADDR_VAR 0 9
60476: PUSH
60477: LD_VAR 0 35
60481: PUSH
60482: LD_VAR 0 36
60486: PUSH
60487: LD_VAR 0 37
60491: PUSH
60492: LD_VAR 0 38
60496: PUSH
60497: LD_VAR 0 39
60501: PUSH
60502: LD_VAR 0 40
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: PUSH
60515: LD_VAR 0 4
60519: PUSH
60520: LD_INT 1
60522: PLUS
60523: ARRAY
60524: ST_TO_ADDR
60525: GO 60892
60527: LD_INT 6
60529: DOUBLE
60530: EQUAL
60531: IFTRUE 60583
60533: LD_INT 7
60535: DOUBLE
60536: EQUAL
60537: IFTRUE 60583
60539: LD_INT 8
60541: DOUBLE
60542: EQUAL
60543: IFTRUE 60583
60545: LD_INT 13
60547: DOUBLE
60548: EQUAL
60549: IFTRUE 60583
60551: LD_INT 12
60553: DOUBLE
60554: EQUAL
60555: IFTRUE 60583
60557: LD_INT 15
60559: DOUBLE
60560: EQUAL
60561: IFTRUE 60583
60563: LD_INT 11
60565: DOUBLE
60566: EQUAL
60567: IFTRUE 60583
60569: LD_INT 14
60571: DOUBLE
60572: EQUAL
60573: IFTRUE 60583
60575: LD_INT 10
60577: DOUBLE
60578: EQUAL
60579: IFTRUE 60583
60581: GO 60639
60583: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60584: LD_ADDR_VAR 0 9
60588: PUSH
60589: LD_VAR 0 41
60593: PUSH
60594: LD_VAR 0 42
60598: PUSH
60599: LD_VAR 0 43
60603: PUSH
60604: LD_VAR 0 44
60608: PUSH
60609: LD_VAR 0 45
60613: PUSH
60614: LD_VAR 0 46
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: PUSH
60627: LD_VAR 0 4
60631: PUSH
60632: LD_INT 1
60634: PLUS
60635: ARRAY
60636: ST_TO_ADDR
60637: GO 60892
60639: LD_INT 36
60641: DOUBLE
60642: EQUAL
60643: IFTRUE 60647
60645: GO 60703
60647: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60648: LD_ADDR_VAR 0 9
60652: PUSH
60653: LD_VAR 0 47
60657: PUSH
60658: LD_VAR 0 48
60662: PUSH
60663: LD_VAR 0 49
60667: PUSH
60668: LD_VAR 0 50
60672: PUSH
60673: LD_VAR 0 51
60677: PUSH
60678: LD_VAR 0 52
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: PUSH
60691: LD_VAR 0 4
60695: PUSH
60696: LD_INT 1
60698: PLUS
60699: ARRAY
60700: ST_TO_ADDR
60701: GO 60892
60703: LD_INT 4
60705: DOUBLE
60706: EQUAL
60707: IFTRUE 60729
60709: LD_INT 5
60711: DOUBLE
60712: EQUAL
60713: IFTRUE 60729
60715: LD_INT 34
60717: DOUBLE
60718: EQUAL
60719: IFTRUE 60729
60721: LD_INT 37
60723: DOUBLE
60724: EQUAL
60725: IFTRUE 60729
60727: GO 60785
60729: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60730: LD_ADDR_VAR 0 9
60734: PUSH
60735: LD_VAR 0 53
60739: PUSH
60740: LD_VAR 0 54
60744: PUSH
60745: LD_VAR 0 55
60749: PUSH
60750: LD_VAR 0 56
60754: PUSH
60755: LD_VAR 0 57
60759: PUSH
60760: LD_VAR 0 58
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: PUSH
60773: LD_VAR 0 4
60777: PUSH
60778: LD_INT 1
60780: PLUS
60781: ARRAY
60782: ST_TO_ADDR
60783: GO 60892
60785: LD_INT 31
60787: DOUBLE
60788: EQUAL
60789: IFTRUE 60835
60791: LD_INT 32
60793: DOUBLE
60794: EQUAL
60795: IFTRUE 60835
60797: LD_INT 33
60799: DOUBLE
60800: EQUAL
60801: IFTRUE 60835
60803: LD_INT 27
60805: DOUBLE
60806: EQUAL
60807: IFTRUE 60835
60809: LD_INT 26
60811: DOUBLE
60812: EQUAL
60813: IFTRUE 60835
60815: LD_INT 28
60817: DOUBLE
60818: EQUAL
60819: IFTRUE 60835
60821: LD_INT 29
60823: DOUBLE
60824: EQUAL
60825: IFTRUE 60835
60827: LD_INT 30
60829: DOUBLE
60830: EQUAL
60831: IFTRUE 60835
60833: GO 60891
60835: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60836: LD_ADDR_VAR 0 9
60840: PUSH
60841: LD_VAR 0 59
60845: PUSH
60846: LD_VAR 0 60
60850: PUSH
60851: LD_VAR 0 61
60855: PUSH
60856: LD_VAR 0 62
60860: PUSH
60861: LD_VAR 0 63
60865: PUSH
60866: LD_VAR 0 64
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: PUSH
60879: LD_VAR 0 4
60883: PUSH
60884: LD_INT 1
60886: PLUS
60887: ARRAY
60888: ST_TO_ADDR
60889: GO 60892
60891: POP
// temp_list2 = [ ] ;
60892: LD_ADDR_VAR 0 10
60896: PUSH
60897: EMPTY
60898: ST_TO_ADDR
// for i in temp_list do
60899: LD_ADDR_VAR 0 8
60903: PUSH
60904: LD_VAR 0 9
60908: PUSH
60909: FOR_IN
60910: IFFALSE 60962
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60912: LD_ADDR_VAR 0 10
60916: PUSH
60917: LD_VAR 0 10
60921: PUSH
60922: LD_VAR 0 8
60926: PUSH
60927: LD_INT 1
60929: ARRAY
60930: PUSH
60931: LD_VAR 0 2
60935: PLUS
60936: PUSH
60937: LD_VAR 0 8
60941: PUSH
60942: LD_INT 2
60944: ARRAY
60945: PUSH
60946: LD_VAR 0 3
60950: PLUS
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: EMPTY
60957: LIST
60958: ADD
60959: ST_TO_ADDR
60960: GO 60909
60962: POP
60963: POP
// result = temp_list2 ;
60964: LD_ADDR_VAR 0 7
60968: PUSH
60969: LD_VAR 0 10
60973: ST_TO_ADDR
// end ;
60974: LD_VAR 0 7
60978: RET
// export function EnemyInRange ( unit , dist ) ; begin
60979: LD_INT 0
60981: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60982: LD_ADDR_VAR 0 3
60986: PUSH
60987: LD_VAR 0 1
60991: PPUSH
60992: CALL_OW 255
60996: PPUSH
60997: LD_VAR 0 1
61001: PPUSH
61002: CALL_OW 250
61006: PPUSH
61007: LD_VAR 0 1
61011: PPUSH
61012: CALL_OW 251
61016: PPUSH
61017: LD_VAR 0 2
61021: PPUSH
61022: CALL 35083 0 4
61026: PUSH
61027: LD_INT 4
61029: ARRAY
61030: ST_TO_ADDR
// end ;
61031: LD_VAR 0 3
61035: RET
// export function PlayerSeeMe ( unit ) ; begin
61036: LD_INT 0
61038: PPUSH
// result := See ( your_side , unit ) ;
61039: LD_ADDR_VAR 0 2
61043: PUSH
61044: LD_OWVAR 2
61048: PPUSH
61049: LD_VAR 0 1
61053: PPUSH
61054: CALL_OW 292
61058: ST_TO_ADDR
// end ;
61059: LD_VAR 0 2
61063: RET
// export function ReverseDir ( unit ) ; begin
61064: LD_INT 0
61066: PPUSH
// if not unit then
61067: LD_VAR 0 1
61071: NOT
61072: IFFALSE 61076
// exit ;
61074: GO 61099
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61076: LD_ADDR_VAR 0 2
61080: PUSH
61081: LD_VAR 0 1
61085: PPUSH
61086: CALL_OW 254
61090: PUSH
61091: LD_INT 3
61093: PLUS
61094: PUSH
61095: LD_INT 6
61097: MOD
61098: ST_TO_ADDR
// end ;
61099: LD_VAR 0 2
61103: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61104: LD_INT 0
61106: PPUSH
61107: PPUSH
61108: PPUSH
61109: PPUSH
61110: PPUSH
// if not hexes then
61111: LD_VAR 0 2
61115: NOT
61116: IFFALSE 61120
// exit ;
61118: GO 61268
// dist := 9999 ;
61120: LD_ADDR_VAR 0 5
61124: PUSH
61125: LD_INT 9999
61127: ST_TO_ADDR
// for i = 1 to hexes do
61128: LD_ADDR_VAR 0 4
61132: PUSH
61133: DOUBLE
61134: LD_INT 1
61136: DEC
61137: ST_TO_ADDR
61138: LD_VAR 0 2
61142: PUSH
61143: FOR_TO
61144: IFFALSE 61256
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61146: LD_VAR 0 1
61150: PPUSH
61151: LD_VAR 0 2
61155: PUSH
61156: LD_VAR 0 4
61160: ARRAY
61161: PUSH
61162: LD_INT 1
61164: ARRAY
61165: PPUSH
61166: LD_VAR 0 2
61170: PUSH
61171: LD_VAR 0 4
61175: ARRAY
61176: PUSH
61177: LD_INT 2
61179: ARRAY
61180: PPUSH
61181: CALL_OW 297
61185: PUSH
61186: LD_VAR 0 5
61190: LESS
61191: IFFALSE 61254
// begin hex := hexes [ i ] ;
61193: LD_ADDR_VAR 0 7
61197: PUSH
61198: LD_VAR 0 2
61202: PUSH
61203: LD_VAR 0 4
61207: ARRAY
61208: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61209: LD_ADDR_VAR 0 5
61213: PUSH
61214: LD_VAR 0 1
61218: PPUSH
61219: LD_VAR 0 2
61223: PUSH
61224: LD_VAR 0 4
61228: ARRAY
61229: PUSH
61230: LD_INT 1
61232: ARRAY
61233: PPUSH
61234: LD_VAR 0 2
61238: PUSH
61239: LD_VAR 0 4
61243: ARRAY
61244: PUSH
61245: LD_INT 2
61247: ARRAY
61248: PPUSH
61249: CALL_OW 297
61253: ST_TO_ADDR
// end ; end ;
61254: GO 61143
61256: POP
61257: POP
// result := hex ;
61258: LD_ADDR_VAR 0 3
61262: PUSH
61263: LD_VAR 0 7
61267: ST_TO_ADDR
// end ;
61268: LD_VAR 0 3
61272: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61273: LD_INT 0
61275: PPUSH
61276: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61277: LD_VAR 0 1
61281: NOT
61282: PUSH
61283: LD_VAR 0 1
61287: PUSH
61288: LD_INT 21
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 23
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PPUSH
61312: CALL_OW 69
61316: IN
61317: NOT
61318: OR
61319: IFFALSE 61323
// exit ;
61321: GO 61370
// for i = 1 to 3 do
61323: LD_ADDR_VAR 0 3
61327: PUSH
61328: DOUBLE
61329: LD_INT 1
61331: DEC
61332: ST_TO_ADDR
61333: LD_INT 3
61335: PUSH
61336: FOR_TO
61337: IFFALSE 61368
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61339: LD_VAR 0 1
61343: PPUSH
61344: CALL_OW 250
61348: PPUSH
61349: LD_VAR 0 1
61353: PPUSH
61354: CALL_OW 251
61358: PPUSH
61359: LD_INT 1
61361: PPUSH
61362: CALL_OW 453
61366: GO 61336
61368: POP
61369: POP
// end ;
61370: LD_VAR 0 2
61374: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61375: LD_INT 0
61377: PPUSH
61378: PPUSH
61379: PPUSH
61380: PPUSH
61381: PPUSH
61382: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61383: LD_VAR 0 1
61387: NOT
61388: PUSH
61389: LD_VAR 0 2
61393: NOT
61394: OR
61395: PUSH
61396: LD_VAR 0 1
61400: PPUSH
61401: CALL_OW 314
61405: OR
61406: IFFALSE 61410
// exit ;
61408: GO 61851
// x := GetX ( enemy_unit ) ;
61410: LD_ADDR_VAR 0 7
61414: PUSH
61415: LD_VAR 0 2
61419: PPUSH
61420: CALL_OW 250
61424: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61425: LD_ADDR_VAR 0 8
61429: PUSH
61430: LD_VAR 0 2
61434: PPUSH
61435: CALL_OW 251
61439: ST_TO_ADDR
// if not x or not y then
61440: LD_VAR 0 7
61444: NOT
61445: PUSH
61446: LD_VAR 0 8
61450: NOT
61451: OR
61452: IFFALSE 61456
// exit ;
61454: GO 61851
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61456: LD_ADDR_VAR 0 6
61460: PUSH
61461: LD_VAR 0 7
61465: PPUSH
61466: LD_INT 0
61468: PPUSH
61469: LD_INT 4
61471: PPUSH
61472: CALL_OW 272
61476: PUSH
61477: LD_VAR 0 8
61481: PPUSH
61482: LD_INT 0
61484: PPUSH
61485: LD_INT 4
61487: PPUSH
61488: CALL_OW 273
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_VAR 0 7
61501: PPUSH
61502: LD_INT 1
61504: PPUSH
61505: LD_INT 4
61507: PPUSH
61508: CALL_OW 272
61512: PUSH
61513: LD_VAR 0 8
61517: PPUSH
61518: LD_INT 1
61520: PPUSH
61521: LD_INT 4
61523: PPUSH
61524: CALL_OW 273
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_VAR 0 7
61537: PPUSH
61538: LD_INT 2
61540: PPUSH
61541: LD_INT 4
61543: PPUSH
61544: CALL_OW 272
61548: PUSH
61549: LD_VAR 0 8
61553: PPUSH
61554: LD_INT 2
61556: PPUSH
61557: LD_INT 4
61559: PPUSH
61560: CALL_OW 273
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_VAR 0 7
61573: PPUSH
61574: LD_INT 3
61576: PPUSH
61577: LD_INT 4
61579: PPUSH
61580: CALL_OW 272
61584: PUSH
61585: LD_VAR 0 8
61589: PPUSH
61590: LD_INT 3
61592: PPUSH
61593: LD_INT 4
61595: PPUSH
61596: CALL_OW 273
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_VAR 0 7
61609: PPUSH
61610: LD_INT 4
61612: PPUSH
61613: LD_INT 4
61615: PPUSH
61616: CALL_OW 272
61620: PUSH
61621: LD_VAR 0 8
61625: PPUSH
61626: LD_INT 4
61628: PPUSH
61629: LD_INT 4
61631: PPUSH
61632: CALL_OW 273
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_VAR 0 7
61645: PPUSH
61646: LD_INT 5
61648: PPUSH
61649: LD_INT 4
61651: PPUSH
61652: CALL_OW 272
61656: PUSH
61657: LD_VAR 0 8
61661: PPUSH
61662: LD_INT 5
61664: PPUSH
61665: LD_INT 4
61667: PPUSH
61668: CALL_OW 273
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: ST_TO_ADDR
// for i = tmp downto 1 do
61685: LD_ADDR_VAR 0 4
61689: PUSH
61690: DOUBLE
61691: LD_VAR 0 6
61695: INC
61696: ST_TO_ADDR
61697: LD_INT 1
61699: PUSH
61700: FOR_DOWNTO
61701: IFFALSE 61802
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61703: LD_VAR 0 6
61707: PUSH
61708: LD_VAR 0 4
61712: ARRAY
61713: PUSH
61714: LD_INT 1
61716: ARRAY
61717: PPUSH
61718: LD_VAR 0 6
61722: PUSH
61723: LD_VAR 0 4
61727: ARRAY
61728: PUSH
61729: LD_INT 2
61731: ARRAY
61732: PPUSH
61733: CALL_OW 488
61737: NOT
61738: PUSH
61739: LD_VAR 0 6
61743: PUSH
61744: LD_VAR 0 4
61748: ARRAY
61749: PUSH
61750: LD_INT 1
61752: ARRAY
61753: PPUSH
61754: LD_VAR 0 6
61758: PUSH
61759: LD_VAR 0 4
61763: ARRAY
61764: PUSH
61765: LD_INT 2
61767: ARRAY
61768: PPUSH
61769: CALL_OW 428
61773: PUSH
61774: LD_INT 0
61776: NONEQUAL
61777: OR
61778: IFFALSE 61800
// tmp := Delete ( tmp , i ) ;
61780: LD_ADDR_VAR 0 6
61784: PUSH
61785: LD_VAR 0 6
61789: PPUSH
61790: LD_VAR 0 4
61794: PPUSH
61795: CALL_OW 3
61799: ST_TO_ADDR
61800: GO 61700
61802: POP
61803: POP
// j := GetClosestHex ( unit , tmp ) ;
61804: LD_ADDR_VAR 0 5
61808: PUSH
61809: LD_VAR 0 1
61813: PPUSH
61814: LD_VAR 0 6
61818: PPUSH
61819: CALL 61104 0 2
61823: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61824: LD_VAR 0 1
61828: PPUSH
61829: LD_VAR 0 5
61833: PUSH
61834: LD_INT 1
61836: ARRAY
61837: PPUSH
61838: LD_VAR 0 5
61842: PUSH
61843: LD_INT 2
61845: ARRAY
61846: PPUSH
61847: CALL_OW 111
// end ;
61851: LD_VAR 0 3
61855: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61856: LD_INT 0
61858: PPUSH
61859: PPUSH
61860: PPUSH
// uc_side = 0 ;
61861: LD_ADDR_OWVAR 20
61865: PUSH
61866: LD_INT 0
61868: ST_TO_ADDR
// uc_nation = 0 ;
61869: LD_ADDR_OWVAR 21
61873: PUSH
61874: LD_INT 0
61876: ST_TO_ADDR
// InitHc_All ( ) ;
61877: CALL_OW 584
// InitVc ;
61881: CALL_OW 20
// if mastodonts then
61885: LD_VAR 0 6
61889: IFFALSE 61956
// for i = 1 to mastodonts do
61891: LD_ADDR_VAR 0 11
61895: PUSH
61896: DOUBLE
61897: LD_INT 1
61899: DEC
61900: ST_TO_ADDR
61901: LD_VAR 0 6
61905: PUSH
61906: FOR_TO
61907: IFFALSE 61954
// begin vc_chassis := 31 ;
61909: LD_ADDR_OWVAR 37
61913: PUSH
61914: LD_INT 31
61916: ST_TO_ADDR
// vc_control := control_rider ;
61917: LD_ADDR_OWVAR 38
61921: PUSH
61922: LD_INT 4
61924: ST_TO_ADDR
// animal := CreateVehicle ;
61925: LD_ADDR_VAR 0 12
61929: PUSH
61930: CALL_OW 45
61934: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61935: LD_VAR 0 12
61939: PPUSH
61940: LD_VAR 0 8
61944: PPUSH
61945: LD_INT 0
61947: PPUSH
61948: CALL 64144 0 3
// end ;
61952: GO 61906
61954: POP
61955: POP
// if horses then
61956: LD_VAR 0 5
61960: IFFALSE 62027
// for i = 1 to horses do
61962: LD_ADDR_VAR 0 11
61966: PUSH
61967: DOUBLE
61968: LD_INT 1
61970: DEC
61971: ST_TO_ADDR
61972: LD_VAR 0 5
61976: PUSH
61977: FOR_TO
61978: IFFALSE 62025
// begin hc_class := 21 ;
61980: LD_ADDR_OWVAR 28
61984: PUSH
61985: LD_INT 21
61987: ST_TO_ADDR
// hc_gallery :=  ;
61988: LD_ADDR_OWVAR 33
61992: PUSH
61993: LD_STRING 
61995: ST_TO_ADDR
// animal := CreateHuman ;
61996: LD_ADDR_VAR 0 12
62000: PUSH
62001: CALL_OW 44
62005: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62006: LD_VAR 0 12
62010: PPUSH
62011: LD_VAR 0 8
62015: PPUSH
62016: LD_INT 0
62018: PPUSH
62019: CALL 64144 0 3
// end ;
62023: GO 61977
62025: POP
62026: POP
// if birds then
62027: LD_VAR 0 1
62031: IFFALSE 62098
// for i = 1 to birds do
62033: LD_ADDR_VAR 0 11
62037: PUSH
62038: DOUBLE
62039: LD_INT 1
62041: DEC
62042: ST_TO_ADDR
62043: LD_VAR 0 1
62047: PUSH
62048: FOR_TO
62049: IFFALSE 62096
// begin hc_class = 18 ;
62051: LD_ADDR_OWVAR 28
62055: PUSH
62056: LD_INT 18
62058: ST_TO_ADDR
// hc_gallery =  ;
62059: LD_ADDR_OWVAR 33
62063: PUSH
62064: LD_STRING 
62066: ST_TO_ADDR
// animal := CreateHuman ;
62067: LD_ADDR_VAR 0 12
62071: PUSH
62072: CALL_OW 44
62076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62077: LD_VAR 0 12
62081: PPUSH
62082: LD_VAR 0 8
62086: PPUSH
62087: LD_INT 0
62089: PPUSH
62090: CALL 64144 0 3
// end ;
62094: GO 62048
62096: POP
62097: POP
// if tigers then
62098: LD_VAR 0 2
62102: IFFALSE 62186
// for i = 1 to tigers do
62104: LD_ADDR_VAR 0 11
62108: PUSH
62109: DOUBLE
62110: LD_INT 1
62112: DEC
62113: ST_TO_ADDR
62114: LD_VAR 0 2
62118: PUSH
62119: FOR_TO
62120: IFFALSE 62184
// begin hc_class = class_tiger ;
62122: LD_ADDR_OWVAR 28
62126: PUSH
62127: LD_INT 14
62129: ST_TO_ADDR
// hc_gallery =  ;
62130: LD_ADDR_OWVAR 33
62134: PUSH
62135: LD_STRING 
62137: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62138: LD_ADDR_OWVAR 35
62142: PUSH
62143: LD_INT 7
62145: NEG
62146: PPUSH
62147: LD_INT 7
62149: PPUSH
62150: CALL_OW 12
62154: ST_TO_ADDR
// animal := CreateHuman ;
62155: LD_ADDR_VAR 0 12
62159: PUSH
62160: CALL_OW 44
62164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62165: LD_VAR 0 12
62169: PPUSH
62170: LD_VAR 0 8
62174: PPUSH
62175: LD_INT 0
62177: PPUSH
62178: CALL 64144 0 3
// end ;
62182: GO 62119
62184: POP
62185: POP
// if apemans then
62186: LD_VAR 0 3
62190: IFFALSE 62313
// for i = 1 to apemans do
62192: LD_ADDR_VAR 0 11
62196: PUSH
62197: DOUBLE
62198: LD_INT 1
62200: DEC
62201: ST_TO_ADDR
62202: LD_VAR 0 3
62206: PUSH
62207: FOR_TO
62208: IFFALSE 62311
// begin hc_class = class_apeman ;
62210: LD_ADDR_OWVAR 28
62214: PUSH
62215: LD_INT 12
62217: ST_TO_ADDR
// hc_gallery =  ;
62218: LD_ADDR_OWVAR 33
62222: PUSH
62223: LD_STRING 
62225: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62226: LD_ADDR_OWVAR 35
62230: PUSH
62231: LD_INT 5
62233: NEG
62234: PPUSH
62235: LD_INT 5
62237: PPUSH
62238: CALL_OW 12
62242: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62243: LD_ADDR_OWVAR 31
62247: PUSH
62248: LD_INT 1
62250: PPUSH
62251: LD_INT 3
62253: PPUSH
62254: CALL_OW 12
62258: PUSH
62259: LD_INT 1
62261: PPUSH
62262: LD_INT 3
62264: PPUSH
62265: CALL_OW 12
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: ST_TO_ADDR
// animal := CreateHuman ;
62282: LD_ADDR_VAR 0 12
62286: PUSH
62287: CALL_OW 44
62291: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62292: LD_VAR 0 12
62296: PPUSH
62297: LD_VAR 0 8
62301: PPUSH
62302: LD_INT 0
62304: PPUSH
62305: CALL 64144 0 3
// end ;
62309: GO 62207
62311: POP
62312: POP
// if enchidnas then
62313: LD_VAR 0 4
62317: IFFALSE 62384
// for i = 1 to enchidnas do
62319: LD_ADDR_VAR 0 11
62323: PUSH
62324: DOUBLE
62325: LD_INT 1
62327: DEC
62328: ST_TO_ADDR
62329: LD_VAR 0 4
62333: PUSH
62334: FOR_TO
62335: IFFALSE 62382
// begin hc_class = 13 ;
62337: LD_ADDR_OWVAR 28
62341: PUSH
62342: LD_INT 13
62344: ST_TO_ADDR
// hc_gallery =  ;
62345: LD_ADDR_OWVAR 33
62349: PUSH
62350: LD_STRING 
62352: ST_TO_ADDR
// animal := CreateHuman ;
62353: LD_ADDR_VAR 0 12
62357: PUSH
62358: CALL_OW 44
62362: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62363: LD_VAR 0 12
62367: PPUSH
62368: LD_VAR 0 8
62372: PPUSH
62373: LD_INT 0
62375: PPUSH
62376: CALL 64144 0 3
// end ;
62380: GO 62334
62382: POP
62383: POP
// if fishes then
62384: LD_VAR 0 7
62388: IFFALSE 62455
// for i = 1 to fishes do
62390: LD_ADDR_VAR 0 11
62394: PUSH
62395: DOUBLE
62396: LD_INT 1
62398: DEC
62399: ST_TO_ADDR
62400: LD_VAR 0 7
62404: PUSH
62405: FOR_TO
62406: IFFALSE 62453
// begin hc_class = 20 ;
62408: LD_ADDR_OWVAR 28
62412: PUSH
62413: LD_INT 20
62415: ST_TO_ADDR
// hc_gallery =  ;
62416: LD_ADDR_OWVAR 33
62420: PUSH
62421: LD_STRING 
62423: ST_TO_ADDR
// animal := CreateHuman ;
62424: LD_ADDR_VAR 0 12
62428: PUSH
62429: CALL_OW 44
62433: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62434: LD_VAR 0 12
62438: PPUSH
62439: LD_VAR 0 9
62443: PPUSH
62444: LD_INT 0
62446: PPUSH
62447: CALL 64144 0 3
// end ;
62451: GO 62405
62453: POP
62454: POP
// end ;
62455: LD_VAR 0 10
62459: RET
// export function WantHeal ( sci , unit ) ; begin
62460: LD_INT 0
62462: PPUSH
// if GetTaskList ( sci ) > 0 then
62463: LD_VAR 0 1
62467: PPUSH
62468: CALL_OW 437
62472: PUSH
62473: LD_INT 0
62475: GREATER
62476: IFFALSE 62546
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62478: LD_VAR 0 1
62482: PPUSH
62483: CALL_OW 437
62487: PUSH
62488: LD_INT 1
62490: ARRAY
62491: PUSH
62492: LD_INT 1
62494: ARRAY
62495: PUSH
62496: LD_STRING l
62498: EQUAL
62499: PUSH
62500: LD_VAR 0 1
62504: PPUSH
62505: CALL_OW 437
62509: PUSH
62510: LD_INT 1
62512: ARRAY
62513: PUSH
62514: LD_INT 4
62516: ARRAY
62517: PUSH
62518: LD_VAR 0 2
62522: EQUAL
62523: AND
62524: IFFALSE 62536
// result := true else
62526: LD_ADDR_VAR 0 3
62530: PUSH
62531: LD_INT 1
62533: ST_TO_ADDR
62534: GO 62544
// result := false ;
62536: LD_ADDR_VAR 0 3
62540: PUSH
62541: LD_INT 0
62543: ST_TO_ADDR
// end else
62544: GO 62554
// result := false ;
62546: LD_ADDR_VAR 0 3
62550: PUSH
62551: LD_INT 0
62553: ST_TO_ADDR
// end ;
62554: LD_VAR 0 3
62558: RET
// export function HealTarget ( sci ) ; begin
62559: LD_INT 0
62561: PPUSH
// if not sci then
62562: LD_VAR 0 1
62566: NOT
62567: IFFALSE 62571
// exit ;
62569: GO 62636
// result := 0 ;
62571: LD_ADDR_VAR 0 2
62575: PUSH
62576: LD_INT 0
62578: ST_TO_ADDR
// if GetTaskList ( sci ) then
62579: LD_VAR 0 1
62583: PPUSH
62584: CALL_OW 437
62588: IFFALSE 62636
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62590: LD_VAR 0 1
62594: PPUSH
62595: CALL_OW 437
62599: PUSH
62600: LD_INT 1
62602: ARRAY
62603: PUSH
62604: LD_INT 1
62606: ARRAY
62607: PUSH
62608: LD_STRING l
62610: EQUAL
62611: IFFALSE 62636
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62613: LD_ADDR_VAR 0 2
62617: PUSH
62618: LD_VAR 0 1
62622: PPUSH
62623: CALL_OW 437
62627: PUSH
62628: LD_INT 1
62630: ARRAY
62631: PUSH
62632: LD_INT 4
62634: ARRAY
62635: ST_TO_ADDR
// end ;
62636: LD_VAR 0 2
62640: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62641: LD_INT 0
62643: PPUSH
62644: PPUSH
62645: PPUSH
62646: PPUSH
// if not base_units then
62647: LD_VAR 0 1
62651: NOT
62652: IFFALSE 62656
// exit ;
62654: GO 62743
// result := false ;
62656: LD_ADDR_VAR 0 2
62660: PUSH
62661: LD_INT 0
62663: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62664: LD_ADDR_VAR 0 5
62668: PUSH
62669: LD_VAR 0 1
62673: PPUSH
62674: LD_INT 21
62676: PUSH
62677: LD_INT 3
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PPUSH
62684: CALL_OW 72
62688: ST_TO_ADDR
// if not tmp then
62689: LD_VAR 0 5
62693: NOT
62694: IFFALSE 62698
// exit ;
62696: GO 62743
// for i in tmp do
62698: LD_ADDR_VAR 0 3
62702: PUSH
62703: LD_VAR 0 5
62707: PUSH
62708: FOR_IN
62709: IFFALSE 62741
// begin result := EnemyInRange ( i , 22 ) ;
62711: LD_ADDR_VAR 0 2
62715: PUSH
62716: LD_VAR 0 3
62720: PPUSH
62721: LD_INT 22
62723: PPUSH
62724: CALL 60979 0 2
62728: ST_TO_ADDR
// if result then
62729: LD_VAR 0 2
62733: IFFALSE 62739
// exit ;
62735: POP
62736: POP
62737: GO 62743
// end ;
62739: GO 62708
62741: POP
62742: POP
// end ;
62743: LD_VAR 0 2
62747: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62748: LD_INT 0
62750: PPUSH
62751: PPUSH
// if not units then
62752: LD_VAR 0 1
62756: NOT
62757: IFFALSE 62761
// exit ;
62759: GO 62831
// result := [ ] ;
62761: LD_ADDR_VAR 0 3
62765: PUSH
62766: EMPTY
62767: ST_TO_ADDR
// for i in units do
62768: LD_ADDR_VAR 0 4
62772: PUSH
62773: LD_VAR 0 1
62777: PUSH
62778: FOR_IN
62779: IFFALSE 62829
// if GetTag ( i ) = tag then
62781: LD_VAR 0 4
62785: PPUSH
62786: CALL_OW 110
62790: PUSH
62791: LD_VAR 0 2
62795: EQUAL
62796: IFFALSE 62827
// result := Insert ( result , result + 1 , i ) ;
62798: LD_ADDR_VAR 0 3
62802: PUSH
62803: LD_VAR 0 3
62807: PPUSH
62808: LD_VAR 0 3
62812: PUSH
62813: LD_INT 1
62815: PLUS
62816: PPUSH
62817: LD_VAR 0 4
62821: PPUSH
62822: CALL_OW 2
62826: ST_TO_ADDR
62827: GO 62778
62829: POP
62830: POP
// end ;
62831: LD_VAR 0 3
62835: RET
// export function IsDriver ( un ) ; begin
62836: LD_INT 0
62838: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62839: LD_ADDR_VAR 0 2
62843: PUSH
62844: LD_VAR 0 1
62848: PUSH
62849: LD_INT 55
62851: PUSH
62852: EMPTY
62853: LIST
62854: PPUSH
62855: CALL_OW 69
62859: IN
62860: ST_TO_ADDR
// end ;
62861: LD_VAR 0 2
62865: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62866: LD_INT 0
62868: PPUSH
62869: PPUSH
// list := [ ] ;
62870: LD_ADDR_VAR 0 5
62874: PUSH
62875: EMPTY
62876: ST_TO_ADDR
// case d of 0 :
62877: LD_VAR 0 3
62881: PUSH
62882: LD_INT 0
62884: DOUBLE
62885: EQUAL
62886: IFTRUE 62890
62888: GO 63023
62890: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62891: LD_ADDR_VAR 0 5
62895: PUSH
62896: LD_VAR 0 1
62900: PUSH
62901: LD_INT 4
62903: MINUS
62904: PUSH
62905: LD_VAR 0 2
62909: PUSH
62910: LD_INT 4
62912: MINUS
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: LIST
62921: PUSH
62922: LD_VAR 0 1
62926: PUSH
62927: LD_INT 3
62929: MINUS
62930: PUSH
62931: LD_VAR 0 2
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: LIST
62943: PUSH
62944: LD_VAR 0 1
62948: PUSH
62949: LD_INT 4
62951: PLUS
62952: PUSH
62953: LD_VAR 0 2
62957: PUSH
62958: LD_INT 4
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: LIST
62965: PUSH
62966: LD_VAR 0 1
62970: PUSH
62971: LD_INT 3
62973: PLUS
62974: PUSH
62975: LD_VAR 0 2
62979: PUSH
62980: LD_INT 3
62982: PLUS
62983: PUSH
62984: LD_INT 5
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: PUSH
62992: LD_VAR 0 1
62996: PUSH
62997: LD_VAR 0 2
63001: PUSH
63002: LD_INT 4
63004: PLUS
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: LIST
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: ST_TO_ADDR
// end ; 1 :
63021: GO 63721
63023: LD_INT 1
63025: DOUBLE
63026: EQUAL
63027: IFTRUE 63031
63029: GO 63164
63031: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63032: LD_ADDR_VAR 0 5
63036: PUSH
63037: LD_VAR 0 1
63041: PUSH
63042: LD_VAR 0 2
63046: PUSH
63047: LD_INT 4
63049: MINUS
63050: PUSH
63051: LD_INT 3
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: LIST
63058: PUSH
63059: LD_VAR 0 1
63063: PUSH
63064: LD_INT 3
63066: MINUS
63067: PUSH
63068: LD_VAR 0 2
63072: PUSH
63073: LD_INT 3
63075: MINUS
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: LIST
63084: PUSH
63085: LD_VAR 0 1
63089: PUSH
63090: LD_INT 4
63092: MINUS
63093: PUSH
63094: LD_VAR 0 2
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: PUSH
63107: LD_VAR 0 1
63111: PUSH
63112: LD_VAR 0 2
63116: PUSH
63117: LD_INT 3
63119: PLUS
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: LIST
63128: PUSH
63129: LD_VAR 0 1
63133: PUSH
63134: LD_INT 4
63136: PLUS
63137: PUSH
63138: LD_VAR 0 2
63142: PUSH
63143: LD_INT 4
63145: PLUS
63146: PUSH
63147: LD_INT 5
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: LIST
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: ST_TO_ADDR
// end ; 2 :
63162: GO 63721
63164: LD_INT 2
63166: DOUBLE
63167: EQUAL
63168: IFTRUE 63172
63170: GO 63301
63172: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63173: LD_ADDR_VAR 0 5
63177: PUSH
63178: LD_VAR 0 1
63182: PUSH
63183: LD_VAR 0 2
63187: PUSH
63188: LD_INT 3
63190: MINUS
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: LIST
63199: PUSH
63200: LD_VAR 0 1
63204: PUSH
63205: LD_INT 4
63207: PLUS
63208: PUSH
63209: LD_VAR 0 2
63213: PUSH
63214: LD_INT 4
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: LIST
63221: PUSH
63222: LD_VAR 0 1
63226: PUSH
63227: LD_VAR 0 2
63231: PUSH
63232: LD_INT 4
63234: PLUS
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: LIST
63243: PUSH
63244: LD_VAR 0 1
63248: PUSH
63249: LD_INT 3
63251: MINUS
63252: PUSH
63253: LD_VAR 0 2
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: LIST
63265: PUSH
63266: LD_VAR 0 1
63270: PUSH
63271: LD_INT 4
63273: MINUS
63274: PUSH
63275: LD_VAR 0 2
63279: PUSH
63280: LD_INT 4
63282: MINUS
63283: PUSH
63284: LD_INT 2
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: LIST
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: ST_TO_ADDR
// end ; 3 :
63299: GO 63721
63301: LD_INT 3
63303: DOUBLE
63304: EQUAL
63305: IFTRUE 63309
63307: GO 63442
63309: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63310: LD_ADDR_VAR 0 5
63314: PUSH
63315: LD_VAR 0 1
63319: PUSH
63320: LD_INT 3
63322: PLUS
63323: PUSH
63324: LD_VAR 0 2
63328: PUSH
63329: LD_INT 4
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: LIST
63336: PUSH
63337: LD_VAR 0 1
63341: PUSH
63342: LD_INT 4
63344: PLUS
63345: PUSH
63346: LD_VAR 0 2
63350: PUSH
63351: LD_INT 4
63353: PLUS
63354: PUSH
63355: LD_INT 5
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: LIST
63362: PUSH
63363: LD_VAR 0 1
63367: PUSH
63368: LD_INT 4
63370: MINUS
63371: PUSH
63372: LD_VAR 0 2
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: LIST
63384: PUSH
63385: LD_VAR 0 1
63389: PUSH
63390: LD_VAR 0 2
63394: PUSH
63395: LD_INT 4
63397: MINUS
63398: PUSH
63399: LD_INT 3
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: LIST
63406: PUSH
63407: LD_VAR 0 1
63411: PUSH
63412: LD_INT 3
63414: MINUS
63415: PUSH
63416: LD_VAR 0 2
63420: PUSH
63421: LD_INT 3
63423: MINUS
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: LIST
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: ST_TO_ADDR
// end ; 4 :
63440: GO 63721
63442: LD_INT 4
63444: DOUBLE
63445: EQUAL
63446: IFTRUE 63450
63448: GO 63583
63450: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63451: LD_ADDR_VAR 0 5
63455: PUSH
63456: LD_VAR 0 1
63460: PUSH
63461: LD_VAR 0 2
63465: PUSH
63466: LD_INT 4
63468: PLUS
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: LIST
63477: PUSH
63478: LD_VAR 0 1
63482: PUSH
63483: LD_INT 3
63485: PLUS
63486: PUSH
63487: LD_VAR 0 2
63491: PUSH
63492: LD_INT 3
63494: PLUS
63495: PUSH
63496: LD_INT 5
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: LIST
63503: PUSH
63504: LD_VAR 0 1
63508: PUSH
63509: LD_INT 4
63511: PLUS
63512: PUSH
63513: LD_VAR 0 2
63517: PUSH
63518: LD_INT 4
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: LIST
63525: PUSH
63526: LD_VAR 0 1
63530: PUSH
63531: LD_VAR 0 2
63535: PUSH
63536: LD_INT 3
63538: MINUS
63539: PUSH
63540: LD_INT 3
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: LIST
63547: PUSH
63548: LD_VAR 0 1
63552: PUSH
63553: LD_INT 4
63555: MINUS
63556: PUSH
63557: LD_VAR 0 2
63561: PUSH
63562: LD_INT 4
63564: MINUS
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: ST_TO_ADDR
// end ; 5 :
63581: GO 63721
63583: LD_INT 5
63585: DOUBLE
63586: EQUAL
63587: IFTRUE 63591
63589: GO 63720
63591: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63592: LD_ADDR_VAR 0 5
63596: PUSH
63597: LD_VAR 0 1
63601: PUSH
63602: LD_INT 4
63604: MINUS
63605: PUSH
63606: LD_VAR 0 2
63610: PUSH
63611: LD_INT 1
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: LIST
63618: PUSH
63619: LD_VAR 0 1
63623: PUSH
63624: LD_VAR 0 2
63628: PUSH
63629: LD_INT 4
63631: MINUS
63632: PUSH
63633: LD_INT 3
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: LIST
63640: PUSH
63641: LD_VAR 0 1
63645: PUSH
63646: LD_INT 4
63648: PLUS
63649: PUSH
63650: LD_VAR 0 2
63654: PUSH
63655: LD_INT 4
63657: PLUS
63658: PUSH
63659: LD_INT 5
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: PUSH
63667: LD_VAR 0 1
63671: PUSH
63672: LD_INT 3
63674: PLUS
63675: PUSH
63676: LD_VAR 0 2
63680: PUSH
63681: LD_INT 4
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: LIST
63688: PUSH
63689: LD_VAR 0 1
63693: PUSH
63694: LD_VAR 0 2
63698: PUSH
63699: LD_INT 3
63701: PLUS
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: LIST
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: ST_TO_ADDR
// end ; end ;
63718: GO 63721
63720: POP
// result := list ;
63721: LD_ADDR_VAR 0 4
63725: PUSH
63726: LD_VAR 0 5
63730: ST_TO_ADDR
// end ;
63731: LD_VAR 0 4
63735: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63736: LD_INT 0
63738: PPUSH
63739: PPUSH
63740: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63741: LD_VAR 0 1
63745: NOT
63746: PUSH
63747: LD_VAR 0 2
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: LD_INT 2
63757: PUSH
63758: LD_INT 3
63760: PUSH
63761: LD_INT 4
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: IN
63770: NOT
63771: OR
63772: IFFALSE 63776
// exit ;
63774: GO 63868
// tmp := [ ] ;
63776: LD_ADDR_VAR 0 5
63780: PUSH
63781: EMPTY
63782: ST_TO_ADDR
// for i in units do
63783: LD_ADDR_VAR 0 4
63787: PUSH
63788: LD_VAR 0 1
63792: PUSH
63793: FOR_IN
63794: IFFALSE 63837
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63796: LD_ADDR_VAR 0 5
63800: PUSH
63801: LD_VAR 0 5
63805: PPUSH
63806: LD_VAR 0 5
63810: PUSH
63811: LD_INT 1
63813: PLUS
63814: PPUSH
63815: LD_VAR 0 4
63819: PPUSH
63820: LD_VAR 0 2
63824: PPUSH
63825: CALL_OW 259
63829: PPUSH
63830: CALL_OW 2
63834: ST_TO_ADDR
63835: GO 63793
63837: POP
63838: POP
// if not tmp then
63839: LD_VAR 0 5
63843: NOT
63844: IFFALSE 63848
// exit ;
63846: GO 63868
// result := SortListByListDesc ( units , tmp ) ;
63848: LD_ADDR_VAR 0 3
63852: PUSH
63853: LD_VAR 0 1
63857: PPUSH
63858: LD_VAR 0 5
63862: PPUSH
63863: CALL_OW 77
63867: ST_TO_ADDR
// end ;
63868: LD_VAR 0 3
63872: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63873: LD_INT 0
63875: PPUSH
63876: PPUSH
63877: PPUSH
// result := false ;
63878: LD_ADDR_VAR 0 3
63882: PUSH
63883: LD_INT 0
63885: ST_TO_ADDR
// x := GetX ( building ) ;
63886: LD_ADDR_VAR 0 4
63890: PUSH
63891: LD_VAR 0 2
63895: PPUSH
63896: CALL_OW 250
63900: ST_TO_ADDR
// y := GetY ( building ) ;
63901: LD_ADDR_VAR 0 5
63905: PUSH
63906: LD_VAR 0 2
63910: PPUSH
63911: CALL_OW 251
63915: ST_TO_ADDR
// if not building or not x or not y then
63916: LD_VAR 0 2
63920: NOT
63921: PUSH
63922: LD_VAR 0 4
63926: NOT
63927: OR
63928: PUSH
63929: LD_VAR 0 5
63933: NOT
63934: OR
63935: IFFALSE 63939
// exit ;
63937: GO 64031
// if GetTaskList ( unit ) then
63939: LD_VAR 0 1
63943: PPUSH
63944: CALL_OW 437
63948: IFFALSE 64031
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63950: LD_STRING e
63952: PUSH
63953: LD_VAR 0 1
63957: PPUSH
63958: CALL_OW 437
63962: PUSH
63963: LD_INT 1
63965: ARRAY
63966: PUSH
63967: LD_INT 1
63969: ARRAY
63970: EQUAL
63971: PUSH
63972: LD_VAR 0 4
63976: PUSH
63977: LD_VAR 0 1
63981: PPUSH
63982: CALL_OW 437
63986: PUSH
63987: LD_INT 1
63989: ARRAY
63990: PUSH
63991: LD_INT 2
63993: ARRAY
63994: EQUAL
63995: AND
63996: PUSH
63997: LD_VAR 0 5
64001: PUSH
64002: LD_VAR 0 1
64006: PPUSH
64007: CALL_OW 437
64011: PUSH
64012: LD_INT 1
64014: ARRAY
64015: PUSH
64016: LD_INT 3
64018: ARRAY
64019: EQUAL
64020: AND
64021: IFFALSE 64031
// result := true end ;
64023: LD_ADDR_VAR 0 3
64027: PUSH
64028: LD_INT 1
64030: ST_TO_ADDR
// end ;
64031: LD_VAR 0 3
64035: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64036: LD_INT 0
64038: PPUSH
// result := false ;
64039: LD_ADDR_VAR 0 4
64043: PUSH
64044: LD_INT 0
64046: ST_TO_ADDR
// if GetTaskList ( unit ) then
64047: LD_VAR 0 1
64051: PPUSH
64052: CALL_OW 437
64056: IFFALSE 64139
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64058: LD_STRING M
64060: PUSH
64061: LD_VAR 0 1
64065: PPUSH
64066: CALL_OW 437
64070: PUSH
64071: LD_INT 1
64073: ARRAY
64074: PUSH
64075: LD_INT 1
64077: ARRAY
64078: EQUAL
64079: PUSH
64080: LD_VAR 0 2
64084: PUSH
64085: LD_VAR 0 1
64089: PPUSH
64090: CALL_OW 437
64094: PUSH
64095: LD_INT 1
64097: ARRAY
64098: PUSH
64099: LD_INT 2
64101: ARRAY
64102: EQUAL
64103: AND
64104: PUSH
64105: LD_VAR 0 3
64109: PUSH
64110: LD_VAR 0 1
64114: PPUSH
64115: CALL_OW 437
64119: PUSH
64120: LD_INT 1
64122: ARRAY
64123: PUSH
64124: LD_INT 3
64126: ARRAY
64127: EQUAL
64128: AND
64129: IFFALSE 64139
// result := true ;
64131: LD_ADDR_VAR 0 4
64135: PUSH
64136: LD_INT 1
64138: ST_TO_ADDR
// end ; end ;
64139: LD_VAR 0 4
64143: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64144: LD_INT 0
64146: PPUSH
64147: PPUSH
64148: PPUSH
64149: PPUSH
// if not unit or not area then
64150: LD_VAR 0 1
64154: NOT
64155: PUSH
64156: LD_VAR 0 2
64160: NOT
64161: OR
64162: IFFALSE 64166
// exit ;
64164: GO 64330
// tmp := AreaToList ( area , i ) ;
64166: LD_ADDR_VAR 0 6
64170: PUSH
64171: LD_VAR 0 2
64175: PPUSH
64176: LD_VAR 0 5
64180: PPUSH
64181: CALL_OW 517
64185: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64186: LD_ADDR_VAR 0 5
64190: PUSH
64191: DOUBLE
64192: LD_INT 1
64194: DEC
64195: ST_TO_ADDR
64196: LD_VAR 0 6
64200: PUSH
64201: LD_INT 1
64203: ARRAY
64204: PUSH
64205: FOR_TO
64206: IFFALSE 64328
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64208: LD_ADDR_VAR 0 7
64212: PUSH
64213: LD_VAR 0 6
64217: PUSH
64218: LD_INT 1
64220: ARRAY
64221: PUSH
64222: LD_VAR 0 5
64226: ARRAY
64227: PUSH
64228: LD_VAR 0 6
64232: PUSH
64233: LD_INT 2
64235: ARRAY
64236: PUSH
64237: LD_VAR 0 5
64241: ARRAY
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64247: LD_VAR 0 7
64251: PUSH
64252: LD_INT 1
64254: ARRAY
64255: PPUSH
64256: LD_VAR 0 7
64260: PUSH
64261: LD_INT 2
64263: ARRAY
64264: PPUSH
64265: CALL_OW 428
64269: PUSH
64270: LD_INT 0
64272: EQUAL
64273: IFFALSE 64326
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64275: LD_VAR 0 1
64279: PPUSH
64280: LD_VAR 0 7
64284: PUSH
64285: LD_INT 1
64287: ARRAY
64288: PPUSH
64289: LD_VAR 0 7
64293: PUSH
64294: LD_INT 2
64296: ARRAY
64297: PPUSH
64298: LD_VAR 0 3
64302: PPUSH
64303: CALL_OW 48
// result := IsPlaced ( unit ) ;
64307: LD_ADDR_VAR 0 4
64311: PUSH
64312: LD_VAR 0 1
64316: PPUSH
64317: CALL_OW 305
64321: ST_TO_ADDR
// exit ;
64322: POP
64323: POP
64324: GO 64330
// end ; end ;
64326: GO 64205
64328: POP
64329: POP
// end ;
64330: LD_VAR 0 4
64334: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64335: LD_INT 0
64337: PPUSH
64338: PPUSH
64339: PPUSH
// if not side or side > 8 then
64340: LD_VAR 0 1
64344: NOT
64345: PUSH
64346: LD_VAR 0 1
64350: PUSH
64351: LD_INT 8
64353: GREATER
64354: OR
64355: IFFALSE 64359
// exit ;
64357: GO 64546
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64359: LD_ADDR_VAR 0 4
64363: PUSH
64364: LD_INT 22
64366: PUSH
64367: LD_VAR 0 1
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 21
64378: PUSH
64379: LD_INT 3
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PPUSH
64390: CALL_OW 69
64394: ST_TO_ADDR
// if not tmp then
64395: LD_VAR 0 4
64399: NOT
64400: IFFALSE 64404
// exit ;
64402: GO 64546
// enable_addtolog := true ;
64404: LD_ADDR_OWVAR 81
64408: PUSH
64409: LD_INT 1
64411: ST_TO_ADDR
// AddToLog ( [ ) ;
64412: LD_STRING [
64414: PPUSH
64415: CALL_OW 561
// for i in tmp do
64419: LD_ADDR_VAR 0 3
64423: PUSH
64424: LD_VAR 0 4
64428: PUSH
64429: FOR_IN
64430: IFFALSE 64537
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64432: LD_STRING [
64434: PUSH
64435: LD_VAR 0 3
64439: PPUSH
64440: CALL_OW 266
64444: STR
64445: PUSH
64446: LD_STRING , 
64448: STR
64449: PUSH
64450: LD_VAR 0 3
64454: PPUSH
64455: CALL_OW 250
64459: STR
64460: PUSH
64461: LD_STRING , 
64463: STR
64464: PUSH
64465: LD_VAR 0 3
64469: PPUSH
64470: CALL_OW 251
64474: STR
64475: PUSH
64476: LD_STRING , 
64478: STR
64479: PUSH
64480: LD_VAR 0 3
64484: PPUSH
64485: CALL_OW 254
64489: STR
64490: PUSH
64491: LD_STRING , 
64493: STR
64494: PUSH
64495: LD_VAR 0 3
64499: PPUSH
64500: LD_INT 1
64502: PPUSH
64503: CALL_OW 268
64507: STR
64508: PUSH
64509: LD_STRING , 
64511: STR
64512: PUSH
64513: LD_VAR 0 3
64517: PPUSH
64518: LD_INT 2
64520: PPUSH
64521: CALL_OW 268
64525: STR
64526: PUSH
64527: LD_STRING ],
64529: STR
64530: PPUSH
64531: CALL_OW 561
// end ;
64535: GO 64429
64537: POP
64538: POP
// AddToLog ( ]; ) ;
64539: LD_STRING ];
64541: PPUSH
64542: CALL_OW 561
// end ;
64546: LD_VAR 0 2
64550: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64551: LD_INT 0
64553: PPUSH
64554: PPUSH
64555: PPUSH
64556: PPUSH
64557: PPUSH
// if not area or not rate or not max then
64558: LD_VAR 0 1
64562: NOT
64563: PUSH
64564: LD_VAR 0 2
64568: NOT
64569: OR
64570: PUSH
64571: LD_VAR 0 4
64575: NOT
64576: OR
64577: IFFALSE 64581
// exit ;
64579: GO 64773
// while 1 do
64581: LD_INT 1
64583: IFFALSE 64773
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64585: LD_ADDR_VAR 0 9
64589: PUSH
64590: LD_VAR 0 1
64594: PPUSH
64595: LD_INT 1
64597: PPUSH
64598: CALL_OW 287
64602: PUSH
64603: LD_INT 10
64605: MUL
64606: ST_TO_ADDR
// r := rate / 10 ;
64607: LD_ADDR_VAR 0 7
64611: PUSH
64612: LD_VAR 0 2
64616: PUSH
64617: LD_INT 10
64619: DIVREAL
64620: ST_TO_ADDR
// time := 1 1$00 ;
64621: LD_ADDR_VAR 0 8
64625: PUSH
64626: LD_INT 2100
64628: ST_TO_ADDR
// if amount < min then
64629: LD_VAR 0 9
64633: PUSH
64634: LD_VAR 0 3
64638: LESS
64639: IFFALSE 64657
// r := r * 2 else
64641: LD_ADDR_VAR 0 7
64645: PUSH
64646: LD_VAR 0 7
64650: PUSH
64651: LD_INT 2
64653: MUL
64654: ST_TO_ADDR
64655: GO 64683
// if amount > max then
64657: LD_VAR 0 9
64661: PUSH
64662: LD_VAR 0 4
64666: GREATER
64667: IFFALSE 64683
// r := r / 2 ;
64669: LD_ADDR_VAR 0 7
64673: PUSH
64674: LD_VAR 0 7
64678: PUSH
64679: LD_INT 2
64681: DIVREAL
64682: ST_TO_ADDR
// time := time / r ;
64683: LD_ADDR_VAR 0 8
64687: PUSH
64688: LD_VAR 0 8
64692: PUSH
64693: LD_VAR 0 7
64697: DIVREAL
64698: ST_TO_ADDR
// if time < 0 then
64699: LD_VAR 0 8
64703: PUSH
64704: LD_INT 0
64706: LESS
64707: IFFALSE 64724
// time := time * - 1 ;
64709: LD_ADDR_VAR 0 8
64713: PUSH
64714: LD_VAR 0 8
64718: PUSH
64719: LD_INT 1
64721: NEG
64722: MUL
64723: ST_TO_ADDR
// wait ( time ) ;
64724: LD_VAR 0 8
64728: PPUSH
64729: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64733: LD_INT 35
64735: PPUSH
64736: LD_INT 875
64738: PPUSH
64739: CALL_OW 12
64743: PPUSH
64744: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64748: LD_INT 1
64750: PPUSH
64751: LD_INT 5
64753: PPUSH
64754: CALL_OW 12
64758: PPUSH
64759: LD_VAR 0 1
64763: PPUSH
64764: LD_INT 1
64766: PPUSH
64767: CALL_OW 55
// end ;
64771: GO 64581
// end ;
64773: LD_VAR 0 5
64777: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64778: LD_INT 0
64780: PPUSH
64781: PPUSH
64782: PPUSH
64783: PPUSH
64784: PPUSH
64785: PPUSH
64786: PPUSH
64787: PPUSH
// if not turrets or not factories then
64788: LD_VAR 0 1
64792: NOT
64793: PUSH
64794: LD_VAR 0 2
64798: NOT
64799: OR
64800: IFFALSE 64804
// exit ;
64802: GO 65111
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64804: LD_ADDR_VAR 0 10
64808: PUSH
64809: LD_INT 5
64811: PUSH
64812: LD_INT 6
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: LD_INT 4
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 3
64831: PUSH
64832: LD_INT 5
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 24
64846: PUSH
64847: LD_INT 25
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 23
64856: PUSH
64857: LD_INT 27
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 42
64870: PUSH
64871: LD_INT 43
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 44
64880: PUSH
64881: LD_INT 46
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 45
64890: PUSH
64891: LD_INT 47
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: LIST
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: LIST
64907: ST_TO_ADDR
// result := [ ] ;
64908: LD_ADDR_VAR 0 3
64912: PUSH
64913: EMPTY
64914: ST_TO_ADDR
// for i in turrets do
64915: LD_ADDR_VAR 0 4
64919: PUSH
64920: LD_VAR 0 1
64924: PUSH
64925: FOR_IN
64926: IFFALSE 65109
// begin nat := GetNation ( i ) ;
64928: LD_ADDR_VAR 0 7
64932: PUSH
64933: LD_VAR 0 4
64937: PPUSH
64938: CALL_OW 248
64942: ST_TO_ADDR
// weapon := 0 ;
64943: LD_ADDR_VAR 0 8
64947: PUSH
64948: LD_INT 0
64950: ST_TO_ADDR
// if not nat then
64951: LD_VAR 0 7
64955: NOT
64956: IFFALSE 64960
// continue ;
64958: GO 64925
// for j in list [ nat ] do
64960: LD_ADDR_VAR 0 5
64964: PUSH
64965: LD_VAR 0 10
64969: PUSH
64970: LD_VAR 0 7
64974: ARRAY
64975: PUSH
64976: FOR_IN
64977: IFFALSE 65018
// if GetBWeapon ( i ) = j [ 1 ] then
64979: LD_VAR 0 4
64983: PPUSH
64984: CALL_OW 269
64988: PUSH
64989: LD_VAR 0 5
64993: PUSH
64994: LD_INT 1
64996: ARRAY
64997: EQUAL
64998: IFFALSE 65016
// begin weapon := j [ 2 ] ;
65000: LD_ADDR_VAR 0 8
65004: PUSH
65005: LD_VAR 0 5
65009: PUSH
65010: LD_INT 2
65012: ARRAY
65013: ST_TO_ADDR
// break ;
65014: GO 65018
// end ;
65016: GO 64976
65018: POP
65019: POP
// if not weapon then
65020: LD_VAR 0 8
65024: NOT
65025: IFFALSE 65029
// continue ;
65027: GO 64925
// for k in factories do
65029: LD_ADDR_VAR 0 6
65033: PUSH
65034: LD_VAR 0 2
65038: PUSH
65039: FOR_IN
65040: IFFALSE 65105
// begin weapons := AvailableWeaponList ( k ) ;
65042: LD_ADDR_VAR 0 9
65046: PUSH
65047: LD_VAR 0 6
65051: PPUSH
65052: CALL_OW 478
65056: ST_TO_ADDR
// if not weapons then
65057: LD_VAR 0 9
65061: NOT
65062: IFFALSE 65066
// continue ;
65064: GO 65039
// if weapon in weapons then
65066: LD_VAR 0 8
65070: PUSH
65071: LD_VAR 0 9
65075: IN
65076: IFFALSE 65103
// begin result := [ i , weapon ] ;
65078: LD_ADDR_VAR 0 3
65082: PUSH
65083: LD_VAR 0 4
65087: PUSH
65088: LD_VAR 0 8
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: ST_TO_ADDR
// exit ;
65097: POP
65098: POP
65099: POP
65100: POP
65101: GO 65111
// end ; end ;
65103: GO 65039
65105: POP
65106: POP
// end ;
65107: GO 64925
65109: POP
65110: POP
// end ;
65111: LD_VAR 0 3
65115: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65116: LD_INT 0
65118: PPUSH
// if not side or side > 8 then
65119: LD_VAR 0 3
65123: NOT
65124: PUSH
65125: LD_VAR 0 3
65129: PUSH
65130: LD_INT 8
65132: GREATER
65133: OR
65134: IFFALSE 65138
// exit ;
65136: GO 65197
// if not range then
65138: LD_VAR 0 4
65142: NOT
65143: IFFALSE 65154
// range := - 12 ;
65145: LD_ADDR_VAR 0 4
65149: PUSH
65150: LD_INT 12
65152: NEG
65153: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65154: LD_VAR 0 1
65158: PPUSH
65159: LD_VAR 0 2
65163: PPUSH
65164: LD_VAR 0 3
65168: PPUSH
65169: LD_VAR 0 4
65173: PPUSH
65174: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65178: LD_VAR 0 1
65182: PPUSH
65183: LD_VAR 0 2
65187: PPUSH
65188: LD_VAR 0 3
65192: PPUSH
65193: CALL_OW 331
// end ;
65197: LD_VAR 0 5
65201: RET
// export function Video ( mode ) ; begin
65202: LD_INT 0
65204: PPUSH
// ingame_video = mode ;
65205: LD_ADDR_OWVAR 52
65209: PUSH
65210: LD_VAR 0 1
65214: ST_TO_ADDR
// interface_hidden = mode ;
65215: LD_ADDR_OWVAR 54
65219: PUSH
65220: LD_VAR 0 1
65224: ST_TO_ADDR
// end ;
65225: LD_VAR 0 2
65229: RET
// export function Join ( array , element ) ; begin
65230: LD_INT 0
65232: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65233: LD_ADDR_VAR 0 3
65237: PUSH
65238: LD_VAR 0 1
65242: PPUSH
65243: LD_VAR 0 1
65247: PUSH
65248: LD_INT 1
65250: PLUS
65251: PPUSH
65252: LD_VAR 0 2
65256: PPUSH
65257: CALL_OW 1
65261: ST_TO_ADDR
// end ;
65262: LD_VAR 0 3
65266: RET
// export function JoinUnion ( array , element ) ; begin
65267: LD_INT 0
65269: PPUSH
// result := array union element ;
65270: LD_ADDR_VAR 0 3
65274: PUSH
65275: LD_VAR 0 1
65279: PUSH
65280: LD_VAR 0 2
65284: UNION
65285: ST_TO_ADDR
// end ;
65286: LD_VAR 0 3
65290: RET
// export function GetBehemoths ( side ) ; begin
65291: LD_INT 0
65293: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65294: LD_ADDR_VAR 0 2
65298: PUSH
65299: LD_INT 22
65301: PUSH
65302: LD_VAR 0 1
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 31
65313: PUSH
65314: LD_INT 25
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PPUSH
65325: CALL_OW 69
65329: ST_TO_ADDR
// end ;
65330: LD_VAR 0 2
65334: RET
// export function Shuffle ( array ) ; var i , index ; begin
65335: LD_INT 0
65337: PPUSH
65338: PPUSH
65339: PPUSH
// result := [ ] ;
65340: LD_ADDR_VAR 0 2
65344: PUSH
65345: EMPTY
65346: ST_TO_ADDR
// if not array then
65347: LD_VAR 0 1
65351: NOT
65352: IFFALSE 65356
// exit ;
65354: GO 65455
// Randomize ;
65356: CALL_OW 10
// for i = array downto 1 do
65360: LD_ADDR_VAR 0 3
65364: PUSH
65365: DOUBLE
65366: LD_VAR 0 1
65370: INC
65371: ST_TO_ADDR
65372: LD_INT 1
65374: PUSH
65375: FOR_DOWNTO
65376: IFFALSE 65453
// begin index := rand ( 1 , array ) ;
65378: LD_ADDR_VAR 0 4
65382: PUSH
65383: LD_INT 1
65385: PPUSH
65386: LD_VAR 0 1
65390: PPUSH
65391: CALL_OW 12
65395: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65396: LD_ADDR_VAR 0 2
65400: PUSH
65401: LD_VAR 0 2
65405: PPUSH
65406: LD_VAR 0 2
65410: PUSH
65411: LD_INT 1
65413: PLUS
65414: PPUSH
65415: LD_VAR 0 1
65419: PUSH
65420: LD_VAR 0 4
65424: ARRAY
65425: PPUSH
65426: CALL_OW 2
65430: ST_TO_ADDR
// array := Delete ( array , index ) ;
65431: LD_ADDR_VAR 0 1
65435: PUSH
65436: LD_VAR 0 1
65440: PPUSH
65441: LD_VAR 0 4
65445: PPUSH
65446: CALL_OW 3
65450: ST_TO_ADDR
// end ;
65451: GO 65375
65453: POP
65454: POP
// end ;
65455: LD_VAR 0 2
65459: RET
// export function GetBaseMaterials ( base ) ; begin
65460: LD_INT 0
65462: PPUSH
// result := [ 0 , 0 , 0 ] ;
65463: LD_ADDR_VAR 0 2
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: LIST
65481: ST_TO_ADDR
// if not base then
65482: LD_VAR 0 1
65486: NOT
65487: IFFALSE 65491
// exit ;
65489: GO 65540
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65491: LD_ADDR_VAR 0 2
65495: PUSH
65496: LD_VAR 0 1
65500: PPUSH
65501: LD_INT 1
65503: PPUSH
65504: CALL_OW 275
65508: PUSH
65509: LD_VAR 0 1
65513: PPUSH
65514: LD_INT 2
65516: PPUSH
65517: CALL_OW 275
65521: PUSH
65522: LD_VAR 0 1
65526: PPUSH
65527: LD_INT 3
65529: PPUSH
65530: CALL_OW 275
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: LIST
65539: ST_TO_ADDR
// end ;
65540: LD_VAR 0 2
65544: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65545: LD_INT 0
65547: PPUSH
65548: PPUSH
// result := array ;
65549: LD_ADDR_VAR 0 3
65553: PUSH
65554: LD_VAR 0 1
65558: ST_TO_ADDR
// if size > 0 then
65559: LD_VAR 0 2
65563: PUSH
65564: LD_INT 0
65566: GREATER
65567: IFFALSE 65613
// for i := array downto size do
65569: LD_ADDR_VAR 0 4
65573: PUSH
65574: DOUBLE
65575: LD_VAR 0 1
65579: INC
65580: ST_TO_ADDR
65581: LD_VAR 0 2
65585: PUSH
65586: FOR_DOWNTO
65587: IFFALSE 65611
// result := Delete ( result , result ) ;
65589: LD_ADDR_VAR 0 3
65593: PUSH
65594: LD_VAR 0 3
65598: PPUSH
65599: LD_VAR 0 3
65603: PPUSH
65604: CALL_OW 3
65608: ST_TO_ADDR
65609: GO 65586
65611: POP
65612: POP
// end ;
65613: LD_VAR 0 3
65617: RET
// export function ComExit ( unit ) ; var tmp ; begin
65618: LD_INT 0
65620: PPUSH
65621: PPUSH
// if not IsInUnit ( unit ) then
65622: LD_VAR 0 1
65626: PPUSH
65627: CALL_OW 310
65631: NOT
65632: IFFALSE 65636
// exit ;
65634: GO 65696
// tmp := IsInUnit ( unit ) ;
65636: LD_ADDR_VAR 0 3
65640: PUSH
65641: LD_VAR 0 1
65645: PPUSH
65646: CALL_OW 310
65650: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65651: LD_VAR 0 3
65655: PPUSH
65656: CALL_OW 247
65660: PUSH
65661: LD_INT 2
65663: EQUAL
65664: IFFALSE 65677
// ComExitVehicle ( unit ) else
65666: LD_VAR 0 1
65670: PPUSH
65671: CALL_OW 121
65675: GO 65686
// ComExitBuilding ( unit ) ;
65677: LD_VAR 0 1
65681: PPUSH
65682: CALL_OW 122
// result := tmp ;
65686: LD_ADDR_VAR 0 2
65690: PUSH
65691: LD_VAR 0 3
65695: ST_TO_ADDR
// end ;
65696: LD_VAR 0 2
65700: RET
// export function ResetHc ; begin
65701: LD_INT 0
65703: PPUSH
// InitHc ;
65704: CALL_OW 19
// hc_importance := 0 ;
65708: LD_ADDR_OWVAR 32
65712: PUSH
65713: LD_INT 0
65715: ST_TO_ADDR
// end ;
65716: LD_VAR 0 1
65720: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65721: LD_INT 0
65723: PPUSH
65724: PPUSH
65725: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65726: LD_ADDR_VAR 0 6
65730: PUSH
65731: LD_VAR 0 1
65735: PUSH
65736: LD_VAR 0 3
65740: PLUS
65741: PUSH
65742: LD_INT 2
65744: DIV
65745: ST_TO_ADDR
// if _x < 0 then
65746: LD_VAR 0 6
65750: PUSH
65751: LD_INT 0
65753: LESS
65754: IFFALSE 65771
// _x := _x * - 1 ;
65756: LD_ADDR_VAR 0 6
65760: PUSH
65761: LD_VAR 0 6
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: MUL
65770: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65771: LD_ADDR_VAR 0 7
65775: PUSH
65776: LD_VAR 0 2
65780: PUSH
65781: LD_VAR 0 4
65785: PLUS
65786: PUSH
65787: LD_INT 2
65789: DIV
65790: ST_TO_ADDR
// if _y < 0 then
65791: LD_VAR 0 7
65795: PUSH
65796: LD_INT 0
65798: LESS
65799: IFFALSE 65816
// _y := _y * - 1 ;
65801: LD_ADDR_VAR 0 7
65805: PUSH
65806: LD_VAR 0 7
65810: PUSH
65811: LD_INT 1
65813: NEG
65814: MUL
65815: ST_TO_ADDR
// result := [ _x , _y ] ;
65816: LD_ADDR_VAR 0 5
65820: PUSH
65821: LD_VAR 0 6
65825: PUSH
65826: LD_VAR 0 7
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: ST_TO_ADDR
// end ;
65835: LD_VAR 0 5
65839: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65840: LD_INT 0
65842: PPUSH
65843: PPUSH
65844: PPUSH
65845: PPUSH
// task := GetTaskList ( unit ) ;
65846: LD_ADDR_VAR 0 7
65850: PUSH
65851: LD_VAR 0 1
65855: PPUSH
65856: CALL_OW 437
65860: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65861: LD_VAR 0 7
65865: NOT
65866: PUSH
65867: LD_VAR 0 1
65871: PPUSH
65872: LD_VAR 0 2
65876: PPUSH
65877: CALL_OW 308
65881: NOT
65882: AND
65883: IFFALSE 65887
// exit ;
65885: GO 66005
// if IsInArea ( unit , area ) then
65887: LD_VAR 0 1
65891: PPUSH
65892: LD_VAR 0 2
65896: PPUSH
65897: CALL_OW 308
65901: IFFALSE 65919
// begin ComMoveToArea ( unit , goAway ) ;
65903: LD_VAR 0 1
65907: PPUSH
65908: LD_VAR 0 3
65912: PPUSH
65913: CALL_OW 113
// exit ;
65917: GO 66005
// end ; if task [ 1 ] [ 1 ] <> M then
65919: LD_VAR 0 7
65923: PUSH
65924: LD_INT 1
65926: ARRAY
65927: PUSH
65928: LD_INT 1
65930: ARRAY
65931: PUSH
65932: LD_STRING M
65934: NONEQUAL
65935: IFFALSE 65939
// exit ;
65937: GO 66005
// x := task [ 1 ] [ 2 ] ;
65939: LD_ADDR_VAR 0 5
65943: PUSH
65944: LD_VAR 0 7
65948: PUSH
65949: LD_INT 1
65951: ARRAY
65952: PUSH
65953: LD_INT 2
65955: ARRAY
65956: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65957: LD_ADDR_VAR 0 6
65961: PUSH
65962: LD_VAR 0 7
65966: PUSH
65967: LD_INT 1
65969: ARRAY
65970: PUSH
65971: LD_INT 3
65973: ARRAY
65974: ST_TO_ADDR
// if InArea ( x , y , area ) then
65975: LD_VAR 0 5
65979: PPUSH
65980: LD_VAR 0 6
65984: PPUSH
65985: LD_VAR 0 2
65989: PPUSH
65990: CALL_OW 309
65994: IFFALSE 66005
// ComStop ( unit ) ;
65996: LD_VAR 0 1
66000: PPUSH
66001: CALL_OW 141
// end ;
66005: LD_VAR 0 4
66009: RET
// export function Abs ( value ) ; begin
66010: LD_INT 0
66012: PPUSH
// result := value ;
66013: LD_ADDR_VAR 0 2
66017: PUSH
66018: LD_VAR 0 1
66022: ST_TO_ADDR
// if value < 0 then
66023: LD_VAR 0 1
66027: PUSH
66028: LD_INT 0
66030: LESS
66031: IFFALSE 66048
// result := value * - 1 ;
66033: LD_ADDR_VAR 0 2
66037: PUSH
66038: LD_VAR 0 1
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: MUL
66047: ST_TO_ADDR
// end ; end_of_file
66048: LD_VAR 0 2
66052: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66053: LD_VAR 0 1
66057: PUSH
66058: LD_INT 200
66060: DOUBLE
66061: GREATEREQUAL
66062: IFFALSE 66070
66064: LD_INT 299
66066: DOUBLE
66067: LESSEQUAL
66068: IFTRUE 66072
66070: GO 66104
66072: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66073: LD_VAR 0 1
66077: PPUSH
66078: LD_VAR 0 2
66082: PPUSH
66083: LD_VAR 0 3
66087: PPUSH
66088: LD_VAR 0 4
66092: PPUSH
66093: LD_VAR 0 5
66097: PPUSH
66098: CALL 25366 0 5
66102: GO 66181
66104: LD_INT 300
66106: DOUBLE
66107: GREATEREQUAL
66108: IFFALSE 66116
66110: LD_INT 399
66112: DOUBLE
66113: LESSEQUAL
66114: IFTRUE 66118
66116: GO 66180
66118: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66119: LD_VAR 0 1
66123: PPUSH
66124: LD_VAR 0 2
66128: PPUSH
66129: LD_VAR 0 3
66133: PPUSH
66134: LD_VAR 0 4
66138: PPUSH
66139: LD_VAR 0 5
66143: PPUSH
66144: LD_VAR 0 6
66148: PPUSH
66149: LD_VAR 0 7
66153: PPUSH
66154: LD_VAR 0 8
66158: PPUSH
66159: LD_VAR 0 9
66163: PPUSH
66164: LD_VAR 0 10
66168: PPUSH
66169: LD_VAR 0 11
66173: PPUSH
66174: CALL 23272 0 11
66178: GO 66181
66180: POP
// end ;
66181: PPOPN 11
66183: END
