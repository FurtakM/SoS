// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1543 0 0
// PrepareRussians ;
  27: CALL 4553 0 0
// PrepareAmericans ;
  31: CALL 3423 0 0
// Action ;
  35: CALL 8457 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 , 31 31$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 52500
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 73500
 113: PUSH
 114: LD_INT 67200
 116: PUSH
 117: LD_INT 65100
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 92400
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 79800
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 285
// FogOff ( 1 ) ;
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 344
// end ;
 285: LD_VAR 0 1
 289: RET
// every 3 trigger debug do var i , filter ;
 290: LD_EXP 1
 294: IFFALSE 383
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
// begin enable ;
 303: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 304: LD_ADDR_VAR 0 2
 308: PUSH
 309: LD_INT 22
 311: PUSH
 312: LD_INT 1
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 3
 321: PUSH
 322: LD_INT 24
 324: PUSH
 325: LD_INT 500
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PPUSH
 340: CALL_OW 69
 344: ST_TO_ADDR
// if not filter then
 345: LD_VAR 0 2
 349: NOT
 350: IFFALSE 354
// exit ;
 352: GO 383
// for i in filter do
 354: LD_ADDR_VAR 0 1
 358: PUSH
 359: LD_VAR 0 2
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ;
 383: PPOPN 2
 385: END
// every 0 0$1 trigger kill_counter >= 20 do
 386: LD_EXP 8
 390: PUSH
 391: LD_INT 20
 393: GREATEREQUAL
 394: IFFALSE 406
 396: GO 398
 398: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 399: LD_STRING ACH_HITMAN
 401: PPUSH
 402: CALL_OW 543
 406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 407: LD_INT 22
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: LD_INT 23
 419: PUSH
 420: LD_INT 3
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 21
 429: PUSH
 430: LD_INT 2
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: LD_INT 3
 449: GREATEREQUAL
 450: IFFALSE 462
 452: GO 454
 454: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 455: LD_STRING ACH_TANKACE
 457: PPUSH
 458: CALL_OW 543
 462: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PPUSH
 491: CALL_OW 69
 495: PUSH
 496: LD_INT 0
 498: EQUAL
 499: IFFALSE 511
 501: GO 503
 503: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 504: LD_STRING ACH_COMMANDO
 506: PPUSH
 507: CALL_OW 543
 511: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 512: LD_INT 0
 514: PPUSH
// uc_side := side ;
 515: LD_ADDR_OWVAR 20
 519: PUSH
 520: LD_VAR 0 1
 524: ST_TO_ADDR
// uc_nation := nation ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_VAR 0 2
 534: ST_TO_ADDR
// vc_chassis := chassis ;
 535: LD_ADDR_OWVAR 37
 539: PUSH
 540: LD_VAR 0 3
 544: ST_TO_ADDR
// vc_engine := engine ;
 545: LD_ADDR_OWVAR 39
 549: PUSH
 550: LD_VAR 0 4
 554: ST_TO_ADDR
// vc_control := control ;
 555: LD_ADDR_OWVAR 38
 559: PUSH
 560: LD_VAR 0 5
 564: ST_TO_ADDR
// vc_weapon := weapon ;
 565: LD_ADDR_OWVAR 40
 569: PUSH
 570: LD_VAR 0 6
 574: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 575: LD_ADDR_OWVAR 41
 579: PUSH
 580: LD_VAR 0 7
 584: ST_TO_ADDR
// result := CreateVehicle ;
 585: LD_ADDR_VAR 0 8
 589: PUSH
 590: CALL_OW 45
 594: ST_TO_ADDR
// end ;
 595: LD_VAR 0 8
 599: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 600: LD_INT 0
 602: PPUSH
 603: PPUSH
 604: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 605: LD_ADDR_VAR 0 4
 609: PUSH
 610: LD_INT 22
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 21
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 50
 632: PUSH
 633: EMPTY
 634: LIST
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PPUSH
 641: CALL_OW 69
 645: PUSH
 646: LD_EXP 9
 650: PUSH
 651: LD_EXP 10
 655: PUSH
 656: LD_EXP 11
 660: PUSH
 661: LD_EXP 12
 665: PUSH
 666: LD_EXP 13
 670: PUSH
 671: LD_EXP 14
 675: PUSH
 676: LD_EXP 15
 680: PUSH
 681: LD_EXP 16
 685: PUSH
 686: LD_EXP 18
 690: PUSH
 691: LD_EXP 17
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: DIFF
 708: ST_TO_ADDR
// if not filter then
 709: LD_VAR 0 4
 713: NOT
 714: IFFALSE 718
// exit ;
 716: GO 745
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 718: LD_ADDR_VAR 0 2
 722: PUSH
 723: LD_VAR 0 4
 727: PPUSH
 728: LD_INT 26
 730: PUSH
 731: LD_VAR 0 1
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PPUSH
 740: CALL_OW 72
 744: ST_TO_ADDR
// end ;
 745: LD_VAR 0 2
 749: RET
// export function SayX ( units , ident ) ; var i ; begin
 750: LD_INT 0
 752: PPUSH
 753: PPUSH
// result := false ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: LD_INT 0
 761: ST_TO_ADDR
// if not units then
 762: LD_VAR 0 1
 766: NOT
 767: IFFALSE 771
// exit ;
 769: GO 825
// for i in units do
 771: LD_ADDR_VAR 0 4
 775: PUSH
 776: LD_VAR 0 1
 780: PUSH
 781: FOR_IN
 782: IFFALSE 823
// if IsOk ( i ) then
 784: LD_VAR 0 4
 788: PPUSH
 789: CALL_OW 302
 793: IFFALSE 821
// begin Say ( i , ident ) ;
 795: LD_VAR 0 4
 799: PPUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 88
// result := i ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_VAR 0 4
 818: ST_TO_ADDR
// break ;
 819: GO 823
// end ;
 821: GO 781
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 3
 829: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
// if not un or not IsOk ( un ) then
 837: LD_VAR 0 1
 841: NOT
 842: PUSH
 843: LD_VAR 0 1
 847: PPUSH
 848: CALL_OW 302
 852: NOT
 853: OR
 854: IFFALSE 858
// exit ;
 856: GO 1148
// side := GetSide ( un ) ;
 858: LD_ADDR_VAR 0 9
 862: PUSH
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 873: LD_ADDR_VAR 0 7
 877: PUSH
 878: LD_INT 22
 880: PUSH
 881: LD_VAR 0 9
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 30
 892: PUSH
 893: LD_INT 32
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 50
 902: PUSH
 903: EMPTY
 904: LIST
 905: PUSH
 906: LD_INT 58
 908: PUSH
 909: EMPTY
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PUSH
 923: LD_VAR 0 2
 927: DIFF
 928: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 929: LD_ADDR_VAR 0 8
 933: PUSH
 934: LD_INT 22
 936: PUSH
 937: LD_VAR 0 9
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PUSH
 946: LD_INT 30
 948: PUSH
 949: LD_INT 5
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PPUSH
 960: CALL_OW 69
 964: ST_TO_ADDR
// if not filter then
 965: LD_VAR 0 7
 969: NOT
 970: IFFALSE 1060
// begin ComMoveXY ( un , x , y ) ;
 972: LD_VAR 0 1
 976: PPUSH
 977: LD_VAR 0 3
 981: PPUSH
 982: LD_VAR 0 4
 986: PPUSH
 987: CALL_OW 111
// if barracks then
 991: LD_VAR 0 8
 995: IFFALSE 1058
// for i in barracks do
 997: LD_ADDR_VAR 0 6
1001: PUSH
1002: LD_VAR 0 8
1006: PUSH
1007: FOR_IN
1008: IFFALSE 1056
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1010: LD_VAR 0 6
1014: PPUSH
1015: CALL_OW 313
1019: PUSH
1020: LD_INT 6
1022: LESS
1023: PUSH
1024: LD_VAR 0 6
1028: PPUSH
1029: CALL_OW 302
1033: AND
1034: IFFALSE 1054
// begin AddComEnterUnit ( un , i ) ;
1036: LD_VAR 0 1
1040: PPUSH
1041: LD_VAR 0 6
1045: PPUSH
1046: CALL_OW 180
// exit ;
1050: POP
1051: POP
1052: GO 1148
// end ; end ;
1054: GO 1007
1056: POP
1057: POP
// end else
1058: GO 1148
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1060: LD_ADDR_VAR 0 7
1064: PUSH
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 7
1074: PPUSH
1075: LD_INT 1
1077: PPUSH
1078: LD_INT 1
1080: PPUSH
1081: CALL 34753 0 4
1085: ST_TO_ADDR
// for i in filter do
1086: LD_ADDR_VAR 0 6
1090: PUSH
1091: LD_VAR 0 7
1095: PUSH
1096: FOR_IN
1097: IFFALSE 1146
// if GetTag ( i ) <> 7 then
1099: LD_VAR 0 6
1103: PPUSH
1104: CALL_OW 110
1108: PUSH
1109: LD_INT 7
1111: NONEQUAL
1112: IFFALSE 1144
// begin ComEnterUnit ( un , i ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_VAR 0 6
1123: PPUSH
1124: CALL_OW 120
// SetTag ( i , 7 ) ;
1128: LD_VAR 0 6
1132: PPUSH
1133: LD_INT 7
1135: PPUSH
1136: CALL_OW 109
// exit ;
1140: POP
1141: POP
1142: GO 1148
// end ;
1144: GO 1096
1146: POP
1147: POP
// end ; end ;
1148: LD_VAR 0 5
1152: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1153: LD_INT 0
1155: PPUSH
1156: PPUSH
1157: PPUSH
// if not base then
1158: LD_VAR 0 1
1162: NOT
1163: IFFALSE 1167
// exit ;
1165: GO 1225
// tmp := GetEnergy ( GetBase ( base ) ) ;
1167: LD_ADDR_VAR 0 4
1171: PUSH
1172: LD_VAR 0 1
1176: PPUSH
1177: CALL_OW 274
1181: PPUSH
1182: CALL_OW 278
1186: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1187: LD_VAR 0 4
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PUSH
1196: LD_VAR 0 4
1200: PUSH
1201: LD_INT 4
1203: ARRAY
1204: GREATER
1205: IFFALSE 1217
// result := true else
1207: LD_ADDR_VAR 0 2
1211: PUSH
1212: LD_INT 1
1214: ST_TO_ADDR
1215: GO 1225
// result := false ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// end ;
1225: LD_VAR 0 2
1229: RET
// export function FilterPeople ( side ) ; begin
1230: LD_INT 0
1232: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_VAR 0 1
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 21
1252: PUSH
1253: LD_INT 1
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PPUSH
1264: CALL_OW 69
1268: ST_TO_ADDR
// end ;
1269: LD_VAR 0 2
1273: RET
// export function FilterDrivers ( side ) ; begin
1274: LD_INT 0
1276: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1277: LD_ADDR_VAR 0 2
1281: PUSH
1282: LD_INT 22
1284: PUSH
1285: LD_VAR 0 1
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 56
1299: PUSH
1300: EMPTY
1301: LIST
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PPUSH
1311: CALL_OW 69
1315: ST_TO_ADDR
// end ;
1316: LD_VAR 0 2
1320: RET
// export function FilterPeopleArea ( side , area ) ; begin
1321: LD_INT 0
1323: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1324: LD_ADDR_VAR 0 3
1328: PUSH
1329: LD_VAR 0 2
1333: PPUSH
1334: LD_INT 22
1336: PUSH
1337: LD_INT 1
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: LD_INT 21
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PPUSH
1358: CALL_OW 70
1362: ST_TO_ADDR
// end ;
1363: LD_VAR 0 3
1367: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1368: LD_INT 0
1370: PPUSH
1371: PPUSH
1372: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1373: LD_ADDR_VAR 0 5
1377: PUSH
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 1
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 21
1395: PUSH
1396: LD_INT 2
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 3
1405: PUSH
1406: LD_INT 58
1408: PUSH
1409: EMPTY
1410: LIST
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PPUSH
1421: CALL_OW 70
1425: ST_TO_ADDR
// result := [ ] ;
1426: LD_ADDR_VAR 0 3
1430: PUSH
1431: EMPTY
1432: ST_TO_ADDR
// if not tmp then
1433: LD_VAR 0 5
1437: NOT
1438: IFFALSE 1442
// exit ;
1440: GO 1494
// for i in tmp do
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_VAR 0 5
1451: PUSH
1452: FOR_IN
1453: IFFALSE 1478
// result := result union IsDrivenBy ( i ) ;
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: LD_VAR 0 3
1464: PUSH
1465: LD_VAR 0 4
1469: PPUSH
1470: CALL_OW 311
1474: UNION
1475: ST_TO_ADDR
1476: GO 1452
1478: POP
1479: POP
// result := result diff 0 ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_INT 0
1492: DIFF
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 3
1498: RET
// export function FilterBuildings ( side ) ; begin
1499: LD_INT 0
1501: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: LD_INT 22
1509: PUSH
1510: LD_VAR 0 1
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 21
1521: PUSH
1522: LD_INT 3
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PPUSH
1533: CALL_OW 69
1537: ST_TO_ADDR
// end ;
1538: LD_VAR 0 2
1542: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1543: LD_INT 0
1545: PPUSH
1546: PPUSH
1547: PPUSH
1548: PPUSH
// uc_side = 0 ;
1549: LD_ADDR_OWVAR 20
1553: PUSH
1554: LD_INT 0
1556: ST_TO_ADDR
// uc_nation = 0 ;
1557: LD_ADDR_OWVAR 21
1561: PUSH
1562: LD_INT 0
1564: ST_TO_ADDR
// nat_area := wildArea ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_INT 3
1572: ST_TO_ADDR
// InitHc ;
1573: CALL_OW 19
// for i = 1 to 4 do
1577: LD_ADDR_VAR 0 2
1581: PUSH
1582: DOUBLE
1583: LD_INT 1
1585: DEC
1586: ST_TO_ADDR
1587: LD_INT 4
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1646
// begin hc_class = 18 ;
1593: LD_ADDR_OWVAR 28
1597: PUSH
1598: LD_INT 18
1600: ST_TO_ADDR
// hc_gallery =  ;
1601: LD_ADDR_OWVAR 33
1605: PUSH
1606: LD_STRING 
1608: ST_TO_ADDR
// hc_face_number = 1 ;
1609: LD_ADDR_OWVAR 34
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// animal := CreateHuman ;
1617: LD_ADDR_VAR 0 3
1621: PUSH
1622: CALL_OW 44
1626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 4
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL_OW 49
// end ;
1644: GO 1590
1646: POP
1647: POP
// for i = 1 to 6 do
1648: LD_ADDR_VAR 0 2
1652: PUSH
1653: DOUBLE
1654: LD_INT 1
1656: DEC
1657: ST_TO_ADDR
1658: LD_INT 6
1660: PUSH
1661: FOR_TO
1662: IFFALSE 1733
// begin hc_class = class_tiger ;
1664: LD_ADDR_OWVAR 28
1668: PUSH
1669: LD_INT 14
1671: ST_TO_ADDR
// hc_gallery =  ;
1672: LD_ADDR_OWVAR 33
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1680: LD_ADDR_OWVAR 35
1684: PUSH
1685: LD_INT 0
1687: PPUSH
1688: LD_INT 10
1690: PPUSH
1691: CALL_OW 12
1695: ST_TO_ADDR
// hc_face_number = 3 ;
1696: LD_ADDR_OWVAR 34
1700: PUSH
1701: LD_INT 3
1703: ST_TO_ADDR
// animal := CreateHuman ;
1704: LD_ADDR_VAR 0 3
1708: PUSH
1709: CALL_OW 44
1713: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1714: LD_VAR 0 3
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// end ;
1731: GO 1661
1733: POP
1734: POP
// for i = 1 to 2 do
1735: LD_ADDR_VAR 0 2
1739: PUSH
1740: DOUBLE
1741: LD_INT 1
1743: DEC
1744: ST_TO_ADDR
1745: LD_INT 2
1747: PUSH
1748: FOR_TO
1749: IFFALSE 1812
// begin hc_class = 21 ;
1751: LD_ADDR_OWVAR 28
1755: PUSH
1756: LD_INT 21
1758: ST_TO_ADDR
// hc_gallery =  ;
1759: LD_ADDR_OWVAR 33
1763: PUSH
1764: LD_STRING 
1766: ST_TO_ADDR
// hc_agressivity = 0 ;
1767: LD_ADDR_OWVAR 35
1771: PUSH
1772: LD_INT 0
1774: ST_TO_ADDR
// hc_face_number = 5 ;
1775: LD_ADDR_OWVAR 34
1779: PUSH
1780: LD_INT 5
1782: ST_TO_ADDR
// animal := CreateHuman ;
1783: LD_ADDR_VAR 0 3
1787: PUSH
1788: CALL_OW 44
1792: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1793: LD_VAR 0 3
1797: PPUSH
1798: LD_VAR 0 4
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL_OW 49
// end ;
1810: GO 1748
1812: POP
1813: POP
// for i = 1 to 6 do
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: DOUBLE
1820: LD_INT 1
1822: DEC
1823: ST_TO_ADDR
1824: LD_INT 6
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1883
// begin hc_class = 13 ;
1830: LD_ADDR_OWVAR 28
1834: PUSH
1835: LD_INT 13
1837: ST_TO_ADDR
// hc_gallery =  ;
1838: LD_ADDR_OWVAR 33
1842: PUSH
1843: LD_STRING 
1845: ST_TO_ADDR
// hc_face_number = 4 ;
1846: LD_ADDR_OWVAR 34
1850: PUSH
1851: LD_INT 4
1853: ST_TO_ADDR
// animal := CreateHuman ;
1854: LD_ADDR_VAR 0 3
1858: PUSH
1859: CALL_OW 44
1863: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// end ;
1881: GO 1827
1883: POP
1884: POP
// for i = 1 to 2 do
1885: LD_ADDR_VAR 0 2
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 2
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1958
// begin hc_class = 20 ;
1901: LD_ADDR_OWVAR 28
1905: PUSH
1906: LD_INT 20
1908: ST_TO_ADDR
// hc_gallery =  ;
1909: LD_ADDR_OWVAR 33
1913: PUSH
1914: LD_STRING 
1916: ST_TO_ADDR
// hc_face_number = 2 ;
1917: LD_ADDR_OWVAR 34
1921: PUSH
1922: LD_INT 2
1924: ST_TO_ADDR
// animal := CreateHuman ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: CALL_OW 44
1934: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1935: LD_VAR 0 3
1939: PPUSH
1940: LD_INT 101
1942: PPUSH
1943: LD_INT 37
1945: PPUSH
1946: LD_INT 3
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 50
// end ;
1956: GO 1898
1958: POP
1959: POP
// for i = 1 to 1 do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 1
1972: PUSH
1973: FOR_TO
1974: IFFALSE 2021
// begin vc_chassis := 31 ;
1976: LD_ADDR_OWVAR 37
1980: PUSH
1981: LD_INT 31
1983: ST_TO_ADDR
// vc_control := control_rider ;
1984: LD_ADDR_OWVAR 38
1988: PUSH
1989: LD_INT 4
1991: ST_TO_ADDR
// animal := CreateVehicle ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: CALL_OW 45
2001: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 0
2014: PPUSH
2015: CALL_OW 49
// end ;
2019: GO 1973
2021: POP
2022: POP
// end ;
2023: LD_VAR 0 1
2027: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2028: LD_INT 0
2030: PPUSH
2031: PPUSH
2032: PPUSH
2033: PPUSH
// result := [ ] ;
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: EMPTY
2040: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2041: LD_ADDR_VAR 0 4
2045: PUSH
2046: LD_INT 81
2048: PUSH
2049: LD_VAR 0 1
2053: PPUSH
2054: CALL_OW 255
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 91
2065: PUSH
2066: LD_VAR 0 1
2070: PUSH
2071: LD_INT 15
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 2
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 32
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 30
2094: PUSH
2095: LD_INT 33
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PPUSH
2112: CALL_OW 69
2116: ST_TO_ADDR
// if not tmp then
2117: LD_VAR 0 4
2121: NOT
2122: IFFALSE 2126
// exit ;
2124: GO 2195
// for i in tmp do
2126: LD_ADDR_VAR 0 3
2130: PUSH
2131: LD_VAR 0 4
2135: PUSH
2136: FOR_IN
2137: IFFALSE 2193
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2139: LD_ADDR_VAR 0 5
2143: PUSH
2144: LD_VAR 0 3
2148: PPUSH
2149: CALL_OW 274
2153: PPUSH
2154: CALL_OW 278
2158: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2159: LD_VAR 0 5
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PUSH
2168: LD_VAR 0 5
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: GREATER
2177: IFFALSE 2191
// begin result := i ;
2179: LD_ADDR_VAR 0 2
2183: PUSH
2184: LD_VAR 0 3
2188: ST_TO_ADDR
// break ;
2189: GO 2193
// end ; end ;
2191: GO 2136
2193: POP
2194: POP
// end ;
2195: LD_VAR 0 2
2199: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
2208: PPUSH
2209: PPUSH
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
2215: PPUSH
2216: PPUSH
2217: PPUSH
// result := false ;
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: LD_INT 0
2225: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2226: LD_VAR 0 1
2230: NOT
2231: PUSH
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 266
2241: PUSH
2242: LD_INT 32
2244: PUSH
2245: LD_INT 33
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: IN
2252: NOT
2253: OR
2254: IFFALSE 2258
// exit ;
2256: GO 3418
// nat := GetNation ( tower ) ;
2258: LD_ADDR_VAR 0 11
2262: PUSH
2263: LD_VAR 0 1
2267: PPUSH
2268: CALL_OW 248
2272: ST_TO_ADDR
// side := GetSide ( tower ) ;
2273: LD_ADDR_VAR 0 15
2277: PUSH
2278: LD_VAR 0 1
2282: PPUSH
2283: CALL_OW 255
2287: ST_TO_ADDR
// x := GetX ( tower ) ;
2288: LD_ADDR_VAR 0 9
2292: PUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 250
2302: ST_TO_ADDR
// y := GetY ( tower ) ;
2303: LD_ADDR_VAR 0 10
2307: PUSH
2308: LD_VAR 0 1
2312: PPUSH
2313: CALL_OW 251
2317: ST_TO_ADDR
// if not x or not y then
2318: LD_VAR 0 9
2322: NOT
2323: PUSH
2324: LD_VAR 0 10
2328: NOT
2329: OR
2330: IFFALSE 2334
// exit ;
2332: GO 3418
// weapon := 0 ;
2334: LD_ADDR_VAR 0 17
2338: PUSH
2339: LD_INT 0
2341: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2342: LD_ADDR_VAR 0 16
2346: PUSH
2347: LD_INT 42
2349: PUSH
2350: LD_INT 43
2352: PUSH
2353: LD_INT 44
2355: PUSH
2356: LD_INT 46
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// if not fac_list then
2365: LD_VAR 0 16
2369: NOT
2370: IFFALSE 2374
// exit ;
2372: GO 3418
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2374: LD_ADDR_VAR 0 4
2378: PUSH
2379: LD_INT 4
2381: PUSH
2382: LD_INT 5
2384: PUSH
2385: LD_INT 9
2387: PUSH
2388: LD_INT 10
2390: PUSH
2391: LD_INT 6
2393: PUSH
2394: LD_INT 7
2396: PUSH
2397: LD_INT 11
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 27
2411: PUSH
2412: LD_INT 28
2414: PUSH
2415: LD_INT 26
2417: PUSH
2418: LD_INT 30
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 43
2429: PUSH
2430: LD_INT 44
2432: PUSH
2433: LD_INT 46
2435: PUSH
2436: LD_INT 45
2438: PUSH
2439: LD_INT 47
2441: PUSH
2442: LD_INT 49
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_VAR 0 11
2462: ARRAY
2463: ST_TO_ADDR
// for i in list do
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_VAR 0 4
2473: PUSH
2474: FOR_IN
2475: IFFALSE 2508
// if not i in fac_list then
2477: LD_VAR 0 7
2481: PUSH
2482: LD_VAR 0 16
2486: IN
2487: NOT
2488: IFFALSE 2506
// list := list diff i ;
2490: LD_ADDR_VAR 0 4
2494: PUSH
2495: LD_VAR 0 4
2499: PUSH
2500: LD_VAR 0 7
2504: DIFF
2505: ST_TO_ADDR
2506: GO 2474
2508: POP
2509: POP
// if not list then
2510: LD_VAR 0 4
2514: NOT
2515: IFFALSE 2519
// exit ;
2517: GO 3418
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2519: LD_VAR 0 11
2523: PUSH
2524: LD_INT 3
2526: EQUAL
2527: PUSH
2528: LD_INT 49
2530: PUSH
2531: LD_VAR 0 4
2535: IN
2536: AND
2537: PUSH
2538: LD_INT 31
2540: PPUSH
2541: LD_VAR 0 15
2545: PPUSH
2546: CALL_OW 321
2550: PUSH
2551: LD_INT 2
2553: EQUAL
2554: AND
2555: IFFALSE 2615
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2557: LD_INT 22
2559: PUSH
2560: LD_VAR 0 15
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 35
2571: PUSH
2572: LD_INT 49
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 91
2581: PUSH
2582: LD_VAR 0 1
2586: PUSH
2587: LD_INT 10
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL_OW 69
2604: NOT
2605: IFFALSE 2615
// weapon := ru_time_lapser ;
2607: LD_ADDR_VAR 0 17
2611: PUSH
2612: LD_INT 49
2614: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2615: LD_VAR 0 11
2619: PUSH
2620: LD_INT 1
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: IN
2630: PUSH
2631: LD_INT 11
2633: PUSH
2634: LD_VAR 0 4
2638: IN
2639: PUSH
2640: LD_INT 30
2642: PUSH
2643: LD_VAR 0 4
2647: IN
2648: OR
2649: AND
2650: PUSH
2651: LD_INT 6
2653: PPUSH
2654: LD_VAR 0 15
2658: PPUSH
2659: CALL_OW 321
2663: PUSH
2664: LD_INT 2
2666: EQUAL
2667: AND
2668: IFFALSE 2833
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2670: LD_INT 22
2672: PUSH
2673: LD_VAR 0 15
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 2
2684: PUSH
2685: LD_INT 35
2687: PUSH
2688: LD_INT 11
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 35
2697: PUSH
2698: LD_INT 30
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 91
2712: PUSH
2713: LD_VAR 0 1
2717: PUSH
2718: LD_INT 18
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: NOT
2736: PUSH
2737: LD_INT 22
2739: PUSH
2740: LD_VAR 0 15
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 2
2751: PUSH
2752: LD_INT 30
2754: PUSH
2755: LD_INT 32
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 30
2764: PUSH
2765: LD_INT 33
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 91
2779: PUSH
2780: LD_VAR 0 1
2784: PUSH
2785: LD_INT 12
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: EMPTY
2799: LIST
2800: PPUSH
2801: CALL_OW 69
2805: PUSH
2806: LD_INT 2
2808: GREATER
2809: AND
2810: IFFALSE 2833
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2812: LD_ADDR_VAR 0 17
2816: PUSH
2817: LD_INT 11
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_VAR 0 11
2831: ARRAY
2832: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2833: LD_VAR 0 17
2837: NOT
2838: PUSH
2839: LD_INT 40
2841: PPUSH
2842: LD_VAR 0 15
2846: PPUSH
2847: CALL_OW 321
2851: PUSH
2852: LD_INT 2
2854: EQUAL
2855: AND
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: LD_VAR 0 4
2864: IN
2865: PUSH
2866: LD_INT 28
2868: PUSH
2869: LD_VAR 0 4
2873: IN
2874: OR
2875: PUSH
2876: LD_INT 45
2878: PUSH
2879: LD_VAR 0 4
2883: IN
2884: OR
2885: AND
2886: IFFALSE 3140
// begin hex := GetHexInfo ( x , y ) ;
2888: LD_ADDR_VAR 0 3
2892: PUSH
2893: LD_VAR 0 9
2897: PPUSH
2898: LD_VAR 0 10
2902: PPUSH
2903: CALL_OW 546
2907: ST_TO_ADDR
// if hex [ 1 ] then
2908: LD_VAR 0 3
2912: PUSH
2913: LD_INT 1
2915: ARRAY
2916: IFFALSE 2920
// exit ;
2918: GO 3418
// height := hex [ 2 ] ;
2920: LD_ADDR_VAR 0 14
2924: PUSH
2925: LD_VAR 0 3
2929: PUSH
2930: LD_INT 2
2932: ARRAY
2933: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2934: LD_ADDR_VAR 0 13
2938: PUSH
2939: LD_INT 0
2941: PUSH
2942: LD_INT 2
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: LD_INT 5
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: ST_TO_ADDR
// for i in tmp do
2957: LD_ADDR_VAR 0 7
2961: PUSH
2962: LD_VAR 0 13
2966: PUSH
2967: FOR_IN
2968: IFFALSE 3138
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2970: LD_ADDR_VAR 0 8
2974: PUSH
2975: LD_VAR 0 9
2979: PPUSH
2980: LD_VAR 0 7
2984: PPUSH
2985: LD_INT 5
2987: PPUSH
2988: CALL_OW 272
2992: PUSH
2993: LD_VAR 0 10
2997: PPUSH
2998: LD_VAR 0 7
3002: PPUSH
3003: LD_INT 5
3005: PPUSH
3006: CALL_OW 273
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3015: LD_VAR 0 8
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_VAR 0 8
3028: PUSH
3029: LD_INT 2
3031: ARRAY
3032: PPUSH
3033: CALL_OW 488
3037: IFFALSE 3136
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3039: LD_ADDR_VAR 0 3
3043: PUSH
3044: LD_VAR 0 8
3048: PUSH
3049: LD_INT 1
3051: ARRAY
3052: PPUSH
3053: LD_VAR 0 8
3057: PUSH
3058: LD_INT 2
3060: ARRAY
3061: PPUSH
3062: CALL_OW 546
3066: ST_TO_ADDR
// if hex [ 1 ] then
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 1
3074: ARRAY
3075: IFFALSE 3079
// continue ;
3077: GO 2967
// h := hex [ 2 ] ;
3079: LD_ADDR_VAR 0 12
3083: PUSH
3084: LD_VAR 0 3
3088: PUSH
3089: LD_INT 2
3091: ARRAY
3092: ST_TO_ADDR
// if h + 7 < height then
3093: LD_VAR 0 12
3097: PUSH
3098: LD_INT 7
3100: PLUS
3101: PUSH
3102: LD_VAR 0 14
3106: LESS
3107: IFFALSE 3136
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3109: LD_ADDR_VAR 0 17
3113: PUSH
3114: LD_INT 7
3116: PUSH
3117: LD_INT 28
3119: PUSH
3120: LD_INT 45
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_VAR 0 11
3132: ARRAY
3133: ST_TO_ADDR
// break ;
3134: GO 3138
// end ; end ; end ;
3136: GO 2967
3138: POP
3139: POP
// end ; if not weapon then
3140: LD_VAR 0 17
3144: NOT
3145: IFFALSE 3300
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3147: LD_ADDR_VAR 0 4
3151: PUSH
3152: LD_VAR 0 4
3156: PUSH
3157: LD_INT 11
3159: PUSH
3160: LD_INT 30
3162: PUSH
3163: LD_INT 49
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: LIST
3170: DIFF
3171: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3172: LD_ADDR_VAR 0 13
3176: PUSH
3177: LD_INT 22
3179: PUSH
3180: LD_VAR 0 15
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 91
3191: PUSH
3192: LD_VAR 0 1
3196: PUSH
3197: LD_INT 6
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 35
3210: PUSH
3211: LD_INT 0
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 69
3231: ST_TO_ADDR
// for i in tmp do
3232: LD_ADDR_VAR 0 7
3236: PUSH
3237: LD_VAR 0 13
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3268
// list := list diff GetBWeapon ( i ) ;
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: LD_VAR 0 4
3254: PUSH
3255: LD_VAR 0 7
3259: PPUSH
3260: CALL_OW 269
3264: DIFF
3265: ST_TO_ADDR
3266: GO 3242
3268: POP
3269: POP
// if list then
3270: LD_VAR 0 4
3274: IFFALSE 3300
// weapon := list [ rand ( 1 , list ) ] ;
3276: LD_ADDR_VAR 0 17
3280: PUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PPUSH
3294: CALL_OW 12
3298: ARRAY
3299: ST_TO_ADDR
// end ; if weapon then
3300: LD_VAR 0 17
3304: IFFALSE 3418
// begin tmp := CostOfWeapon ( weapon ) ;
3306: LD_ADDR_VAR 0 13
3310: PUSH
3311: LD_VAR 0 17
3315: PPUSH
3316: CALL_OW 451
3320: ST_TO_ADDR
// j := GetBase ( tower ) ;
3321: LD_ADDR_VAR 0 8
3325: PUSH
3326: LD_VAR 0 1
3330: PPUSH
3331: CALL_OW 274
3335: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3336: LD_VAR 0 8
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: CALL_OW 275
3348: PUSH
3349: LD_VAR 0 13
3353: PUSH
3354: LD_INT 1
3356: ARRAY
3357: GREATEREQUAL
3358: PUSH
3359: LD_VAR 0 8
3363: PPUSH
3364: LD_INT 2
3366: PPUSH
3367: CALL_OW 275
3371: PUSH
3372: LD_VAR 0 13
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: GREATEREQUAL
3381: AND
3382: PUSH
3383: LD_VAR 0 8
3387: PPUSH
3388: LD_INT 3
3390: PPUSH
3391: CALL_OW 275
3395: PUSH
3396: LD_VAR 0 13
3400: PUSH
3401: LD_INT 3
3403: ARRAY
3404: GREATEREQUAL
3405: AND
3406: IFFALSE 3418
// result := weapon ;
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: LD_VAR 0 17
3417: ST_TO_ADDR
// end ; end ; end_of_file
3418: LD_VAR 0 2
3422: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3423: LD_INT 0
3425: PPUSH
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
// uc_side := 1 ;
3431: LD_ADDR_OWVAR 20
3435: PUSH
3436: LD_INT 1
3438: ST_TO_ADDR
// uc_nation := 1 ;
3439: LD_ADDR_OWVAR 21
3443: PUSH
3444: LD_INT 1
3446: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3447: LD_ADDR_EXP 9
3451: PUSH
3452: LD_STRING JMM
3454: PPUSH
3455: LD_EXP 1
3459: NOT
3460: PPUSH
3461: LD_EXP 2
3465: PPUSH
3466: CALL 29332 0 3
3470: ST_TO_ADDR
// team := [ JMM ] ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: LD_EXP 9
3480: PUSH
3481: EMPTY
3482: LIST
3483: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3484: LD_STRING BrownIn07
3486: PPUSH
3487: LD_EXP 1
3491: PPUSH
3492: CALL_OW 30
3496: IFFALSE 3522
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3498: LD_ADDR_EXP 10
3502: PUSH
3503: LD_STRING Brown
3505: PPUSH
3506: LD_EXP 1
3510: NOT
3511: PPUSH
3512: LD_EXP 2
3516: PPUSH
3517: CALL 29332 0 3
3521: ST_TO_ADDR
// if Brown then
3522: LD_EXP 10
3526: IFFALSE 3544
// team := team ^ Brown ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: LD_VAR 0 3
3537: PUSH
3538: LD_EXP 10
3542: ADD
3543: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3544: LD_STRING DonaldsonIn07
3546: PPUSH
3547: LD_EXP 1
3551: PPUSH
3552: CALL_OW 30
3556: IFFALSE 3582
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3558: LD_ADDR_EXP 11
3562: PUSH
3563: LD_STRING Donaldson
3565: PPUSH
3566: LD_EXP 1
3570: NOT
3571: PPUSH
3572: LD_EXP 2
3576: PPUSH
3577: CALL 29332 0 3
3581: ST_TO_ADDR
// if Donaldson then
3582: LD_EXP 11
3586: IFFALSE 3604
// team := team ^ Donaldson ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_VAR 0 3
3597: PUSH
3598: LD_EXP 11
3602: ADD
3603: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3604: LD_STRING BobbyIn07
3606: PPUSH
3607: LD_EXP 1
3611: PPUSH
3612: CALL_OW 30
3616: IFFALSE 3642
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3618: LD_ADDR_EXP 12
3622: PUSH
3623: LD_STRING Bobby
3625: PPUSH
3626: LD_EXP 1
3630: NOT
3631: PPUSH
3632: LD_EXP 2
3636: PPUSH
3637: CALL 29332 0 3
3641: ST_TO_ADDR
// if Bobby then
3642: LD_EXP 12
3646: IFFALSE 3664
// team := team ^ Bobby ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_VAR 0 3
3657: PUSH
3658: LD_EXP 12
3662: ADD
3663: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3664: LD_STRING CyrusIn07
3666: PPUSH
3667: LD_EXP 1
3671: PPUSH
3672: CALL_OW 30
3676: IFFALSE 3702
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3678: LD_ADDR_EXP 13
3682: PUSH
3683: LD_STRING Cyrus
3685: PPUSH
3686: LD_EXP 1
3690: NOT
3691: PPUSH
3692: LD_EXP 2
3696: PPUSH
3697: CALL 29332 0 3
3701: ST_TO_ADDR
// if Cyrus then
3702: LD_EXP 13
3706: IFFALSE 3724
// team := team ^ Cyrus ;
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: LD_VAR 0 3
3717: PUSH
3718: LD_EXP 13
3722: ADD
3723: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3724: LD_STRING LisaIn07
3726: PPUSH
3727: LD_EXP 1
3731: PPUSH
3732: CALL_OW 30
3736: IFFALSE 3762
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3738: LD_ADDR_EXP 14
3742: PUSH
3743: LD_STRING Lisa
3745: PPUSH
3746: LD_EXP 1
3750: NOT
3751: PPUSH
3752: LD_EXP 2
3756: PPUSH
3757: CALL 29332 0 3
3761: ST_TO_ADDR
// if Lisa then
3762: LD_EXP 14
3766: IFFALSE 3784
// team := team ^ Lisa ;
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: LD_VAR 0 3
3777: PUSH
3778: LD_EXP 14
3782: ADD
3783: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3784: LD_STRING GladstoneIn07
3786: PPUSH
3787: LD_EXP 1
3791: PPUSH
3792: CALL_OW 30
3796: IFFALSE 3822
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3798: LD_ADDR_EXP 16
3802: PUSH
3803: LD_STRING Gladstone
3805: PPUSH
3806: LD_EXP 1
3810: NOT
3811: PPUSH
3812: LD_EXP 2
3816: PPUSH
3817: CALL 29332 0 3
3821: ST_TO_ADDR
// if Gladstone then
3822: LD_EXP 16
3826: IFFALSE 3844
// team := team ^ Gladstone ;
3828: LD_ADDR_VAR 0 3
3832: PUSH
3833: LD_VAR 0 3
3837: PUSH
3838: LD_EXP 16
3842: ADD
3843: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3844: LD_STRING KhatamIn07
3846: PPUSH
3847: LD_EXP 1
3851: PPUSH
3852: CALL_OW 30
3856: IFFALSE 3882
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3858: LD_ADDR_EXP 17
3862: PUSH
3863: LD_STRING Khatam
3865: PPUSH
3866: LD_EXP 1
3870: NOT
3871: PPUSH
3872: LD_EXP 2
3876: PPUSH
3877: CALL 29332 0 3
3881: ST_TO_ADDR
// if Khatam then
3882: LD_EXP 17
3886: IFFALSE 3904
// team := team ^ Khatam ;
3888: LD_ADDR_VAR 0 3
3892: PUSH
3893: LD_VAR 0 3
3897: PUSH
3898: LD_EXP 17
3902: ADD
3903: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_STRING 07_others
3911: PPUSH
3912: CALL_OW 31
3916: ST_TO_ADDR
// if others then
3917: LD_VAR 0 4
3921: IFFALSE 3939
// team := team ^ others ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: LD_VAR 0 3
3932: PUSH
3933: LD_VAR 0 4
3937: ADD
3938: ST_TO_ADDR
// if debug then
3939: LD_EXP 1
3943: IFFALSE 4017
// begin InitHc ;
3945: CALL_OW 19
// for i = 1 to 4 do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_INT 4
3961: PUSH
3962: FOR_TO
3963: IFFALSE 4015
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 1
3970: PUSH
3971: LD_INT 3
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 2
3983: PPUSH
3984: CALL_OW 12
3988: ARRAY
3989: PPUSH
3990: LD_INT 4
3992: PPUSH
3993: CALL_OW 380
// team := team ^ CreateHuman ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_VAR 0 3
4006: PUSH
4007: CALL_OW 44
4011: ADD
4012: ST_TO_ADDR
// end ;
4013: GO 3962
4015: POP
4016: POP
// end ; m := 0 ;
4017: LD_ADDR_VAR 0 6
4021: PUSH
4022: LD_INT 0
4024: ST_TO_ADDR
// for i in team do
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: LD_VAR 0 3
4034: PUSH
4035: FOR_IN
4036: IFFALSE 4243
// if GetClass ( i ) = 3 then
4038: LD_VAR 0 2
4042: PPUSH
4043: CALL_OW 257
4047: PUSH
4048: LD_INT 3
4050: EQUAL
4051: IFFALSE 4199
// begin m := m + 1 ;
4053: LD_ADDR_VAR 0 6
4057: PUSH
4058: LD_VAR 0 6
4062: PUSH
4063: LD_INT 1
4065: PLUS
4066: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4067: LD_ADDR_VAR 0 5
4071: PUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 2
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_VAR 0 6
4100: PUSH
4101: LD_INT 4
4103: MOD
4104: PUSH
4105: LD_INT 1
4107: PLUS
4108: ARRAY
4109: PPUSH
4110: LD_INT 2
4112: PPUSH
4113: LD_INT 1
4115: PPUSH
4116: LD_INT 4
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 3
4124: PUSH
4125: LD_INT 11
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_VAR 0 6
4138: PUSH
4139: LD_INT 4
4141: MOD
4142: PUSH
4143: LD_INT 1
4145: PLUS
4146: ARRAY
4147: PPUSH
4148: LD_INT 60
4150: PPUSH
4151: CALL 512 0 7
4155: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4156: LD_VAR 0 5
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4168: LD_VAR 0 5
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 5
4192: PPUSH
4193: CALL_OW 52
// end else
4197: GO 4241
// begin if GetClass ( i ) = 2 then
4199: LD_VAR 0 2
4203: PPUSH
4204: CALL_OW 257
4208: PUSH
4209: LD_INT 2
4211: EQUAL
4212: IFFALSE 4226
// SetClass ( i , 1 ) ;
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4226: LD_VAR 0 2
4230: PPUSH
4231: LD_INT 1
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// end ;
4241: GO 4035
4243: POP
4244: POP
// uc_side := 4 ;
4245: LD_ADDR_OWVAR 20
4249: PUSH
4250: LD_INT 4
4252: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4253: LD_ADDR_EXP 19
4257: PUSH
4258: LD_STRING Harisson
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: LD_STRING 
4266: PPUSH
4267: CALL 29332 0 3
4271: ST_TO_ADDR
// PrepareScout ;
4272: CALL 4281 0 0
// end ;
4276: LD_VAR 0 1
4280: RET
// function PrepareScout ; var ape ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
// uc_side := 4 ;
4285: LD_ADDR_OWVAR 20
4289: PUSH
4290: LD_INT 4
4292: ST_TO_ADDR
// uc_nation := 1 ;
4293: LD_ADDR_OWVAR 21
4297: PUSH
4298: LD_INT 1
4300: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4301: LD_STRING FrankIn06
4303: PPUSH
4304: LD_INT 0
4306: PPUSH
4307: CALL_OW 30
4311: IFFALSE 4328
// Frank := CreateCharacter ( 06c_Frank ) else
4313: LD_ADDR_EXP 15
4317: PUSH
4318: LD_STRING 06c_Frank
4320: PPUSH
4321: CALL_OW 34
4325: ST_TO_ADDR
4326: GO 4368
// if LoadVariable ( FrankInDelta , 0 ) then
4328: LD_STRING FrankInDelta
4330: PPUSH
4331: LD_INT 0
4333: PPUSH
4334: CALL_OW 30
4338: IFFALSE 4355
// Frank := CreateCharacter ( 05_Frank ) else
4340: LD_ADDR_EXP 15
4344: PUSH
4345: LD_STRING 05_Frank
4347: PPUSH
4348: CALL_OW 34
4352: ST_TO_ADDR
4353: GO 4368
// Frank := CreateCharacter ( 04_Frank ) ;
4355: LD_ADDR_EXP 15
4359: PUSH
4360: LD_STRING 04_Frank
4362: PPUSH
4363: CALL_OW 34
4367: ST_TO_ADDR
// if Frank then
4368: LD_EXP 15
4372: IFFALSE 4505
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4374: LD_EXP 15
4378: PPUSH
4379: LD_INT 2
4381: PPUSH
4382: LD_INT 0
4384: PPUSH
4385: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4389: LD_EXP 15
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: CALL_OW 336
// uc_side := 0 ;
4401: LD_ADDR_OWVAR 20
4405: PUSH
4406: LD_INT 0
4408: ST_TO_ADDR
// uc_nation := 0 ;
4409: LD_ADDR_OWVAR 21
4413: PUSH
4414: LD_INT 0
4416: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4417: LD_INT 0
4419: PPUSH
4420: LD_INT 12
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: CALL_OW 380
// ape := CreateHuman ;
4430: LD_ADDR_VAR 0 2
4434: PUSH
4435: CALL_OW 44
4439: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4440: LD_VAR 0 2
4444: PPUSH
4445: LD_EXP 15
4449: PPUSH
4450: CALL_OW 250
4454: PPUSH
4455: LD_EXP 15
4459: PPUSH
4460: CALL_OW 251
4464: PPUSH
4465: LD_INT 5
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4475: LD_VAR 0 2
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4489: LD_EXP 15
4493: PPUSH
4494: LD_VAR 0 2
4498: PPUSH
4499: CALL_OW 119
// exit ;
4503: GO 4548
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4505: LD_ADDR_EXP 18
4509: PUSH
4510: LD_STRING Yamoko
4512: PPUSH
4513: LD_INT 0
4515: PPUSH
4516: LD_STRING 
4518: PPUSH
4519: CALL 29332 0 3
4523: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4524: LD_EXP 18
4528: PPUSH
4529: LD_INT 2
4531: PPUSH
4532: LD_INT 0
4534: PPUSH
4535: CALL_OW 49
// ComHold ( Kikuchi ) ;
4539: LD_EXP 18
4543: PPUSH
4544: CALL_OW 140
// end ; end_of_file
4548: LD_VAR 0 1
4552: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
// ru_rebuild_list := [ ] ;
4571: LD_ADDR_EXP 20
4575: PUSH
4576: EMPTY
4577: ST_TO_ADDR
// uc_side := 3 ;
4578: LD_ADDR_OWVAR 20
4582: PUSH
4583: LD_INT 3
4585: ST_TO_ADDR
// uc_nation := 3 ;
4586: LD_ADDR_OWVAR 21
4590: PUSH
4591: LD_INT 3
4593: ST_TO_ADDR
// if Difficulty > 1 then
4594: LD_OWVAR 67
4598: PUSH
4599: LD_INT 1
4601: GREATER
4602: IFFALSE 4738
// begin bc_type := b_breastwork ;
4604: LD_ADDR_OWVAR 42
4608: PUSH
4609: LD_INT 31
4611: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4612: LD_INT 78
4614: PPUSH
4615: LD_INT 74
4617: PPUSH
4618: LD_INT 2
4620: PPUSH
4621: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4625: LD_INT 171
4627: PPUSH
4628: LD_INT 193
4630: PPUSH
4631: LD_INT 4
4633: PPUSH
4634: CALL_OW 47
// bc_type := b_turret ;
4638: LD_ADDR_OWVAR 42
4642: PUSH
4643: LD_INT 33
4645: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4646: LD_INT 129
4648: PPUSH
4649: LD_INT 96
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: CALL_OW 47
// if Difficulty > 2 then
4659: LD_OWVAR 67
4663: PUSH
4664: LD_INT 2
4666: GREATER
4667: IFFALSE 4738
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4669: LD_INT 83
4671: PPUSH
4672: LD_INT 141
4674: PPUSH
4675: CALL_OW 428
4679: PPUSH
4680: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4684: LD_INT 78
4686: PPUSH
4687: LD_INT 133
4689: PPUSH
4690: CALL_OW 428
4694: PPUSH
4695: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4699: LD_INT 83
4701: PPUSH
4702: LD_INT 141
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4712: LD_INT 78
4714: PPUSH
4715: LD_INT 133
4717: PPUSH
4718: LD_INT 2
4720: PPUSH
4721: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4725: LD_INT 145
4727: PPUSH
4728: LD_INT 112
4730: PPUSH
4731: LD_INT 3
4733: PPUSH
4734: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4738: LD_ADDR_VAR 0 9
4742: PUSH
4743: LD_INT 22
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 2
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 0
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 30
4768: PUSH
4769: LD_INT 1
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PPUSH
4785: CALL_OW 69
4789: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4790: LD_ADDR_VAR 0 10
4794: PUSH
4795: LD_INT 22
4797: PUSH
4798: LD_INT 3
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 2
4807: PUSH
4808: LD_INT 30
4810: PUSH
4811: LD_INT 6
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 30
4820: PUSH
4821: LD_INT 7
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 8
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PPUSH
4848: CALL_OW 69
4852: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4853: LD_ADDR_VAR 0 11
4857: PUSH
4858: LD_INT 22
4860: PUSH
4861: LD_INT 3
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 30
4870: PUSH
4871: LD_INT 3
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 69
4886: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4887: LD_ADDR_VAR 0 12
4891: PUSH
4892: LD_INT 22
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: LD_INT 30
4904: PUSH
4905: LD_INT 31
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PPUSH
4916: CALL_OW 69
4920: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4921: LD_ADDR_VAR 0 13
4925: PUSH
4926: LD_INT 22
4928: PUSH
4929: LD_INT 3
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 30
4938: PUSH
4939: LD_INT 32
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PPUSH
4950: CALL_OW 69
4954: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4955: LD_ADDR_VAR 0 14
4959: PUSH
4960: LD_INT 22
4962: PUSH
4963: LD_INT 3
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 30
4972: PUSH
4973: LD_INT 33
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PPUSH
4984: CALL_OW 69
4988: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
4989: LD_ADDR_VAR 0 15
4993: PUSH
4994: LD_INT 42
4996: PUSH
4997: LD_INT 5
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: LD_INT 43
5006: PUSH
5007: LD_INT 50
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 44
5016: PUSH
5017: LD_INT 30
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 46
5026: PUSH
5027: LD_INT 15
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5040: LD_ADDR_VAR 0 16
5044: PUSH
5045: LD_INT 0
5047: PUSH
5048: LD_INT 4
5050: PUSH
5051: LD_INT 6
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5063: LD_ADDR_VAR 0 6
5067: PUSH
5068: LD_INT 4
5070: PUSH
5071: LD_INT 5
5073: PUSH
5074: LD_INT 6
5076: PUSH
5077: LD_INT 6
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: LD_OWVAR 67
5090: ARRAY
5091: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5092: LD_INT 16
5094: PPUSH
5095: LD_STRING am_tukh
5097: PPUSH
5098: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_INT 21
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 69
5121: PUSH
5122: FOR_IN
5123: IFFALSE 5160
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5125: LD_VAR 0 2
5129: PPUSH
5130: LD_INT 4
5132: PUSH
5133: LD_INT 5
5135: PUSH
5136: LD_INT 6
5138: PUSH
5139: LD_INT 7
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: PUSH
5148: LD_OWVAR 67
5152: ARRAY
5153: PPUSH
5154: CALL_OW 241
5158: GO 5122
5160: POP
5161: POP
// for i in dep_list do
5162: LD_ADDR_VAR 0 2
5166: PUSH
5167: LD_VAR 0 9
5171: PUSH
5172: FOR_IN
5173: IFFALSE 5217
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL_OW 274
5184: PPUSH
5185: LD_INT 1
5187: PPUSH
5188: LD_INT 1000
5190: PPUSH
5191: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5195: LD_VAR 0 2
5199: PPUSH
5200: CALL_OW 274
5204: PPUSH
5205: LD_INT 2
5207: PPUSH
5208: LD_INT 1000
5210: PPUSH
5211: CALL_OW 277
// end ;
5215: GO 5172
5217: POP
5218: POP
// InitHc ;
5219: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5223: LD_ADDR_VAR 0 8
5227: PUSH
5228: LD_VAR 0 13
5232: PUSH
5233: LD_INT 45
5235: PUSH
5236: LD_INT 60
5238: PUSH
5239: LD_INT 75
5241: PUSH
5242: LD_INT 80
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_OWVAR 67
5255: ARRAY
5256: MUL
5257: PUSH
5258: LD_INT 100
5260: DIV
5261: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5262: LD_ADDR_VAR 0 16
5266: PUSH
5267: LD_VAR 0 16
5271: PPUSH
5272: LD_INT 1
5274: PPUSH
5275: LD_VAR 0 8
5279: PPUSH
5280: CALL_OW 1
5284: ST_TO_ADDR
// tmp := [ ] ;
5285: LD_ADDR_VAR 0 8
5289: PUSH
5290: EMPTY
5291: ST_TO_ADDR
// for i in bunker_list do
5292: LD_ADDR_VAR 0 2
5296: PUSH
5297: LD_VAR 0 13
5301: PUSH
5302: FOR_IN
5303: IFFALSE 5399
// if i mod 10 + 1 < tmp then
5305: LD_VAR 0 2
5309: PUSH
5310: LD_INT 10
5312: MOD
5313: PUSH
5314: LD_INT 1
5316: PLUS
5317: PUSH
5318: LD_VAR 0 8
5322: LESS
5323: IFFALSE 5368
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5325: LD_ADDR_VAR 0 8
5329: PUSH
5330: LD_VAR 0 8
5334: PPUSH
5335: LD_VAR 0 2
5339: PUSH
5340: LD_INT 3
5342: PPUSH
5343: LD_INT 5
5345: PPUSH
5346: CALL_OW 12
5350: MOD
5351: PUSH
5352: LD_INT 1
5354: PLUS
5355: PPUSH
5356: LD_VAR 0 2
5360: PPUSH
5361: CALL_OW 2
5365: ST_TO_ADDR
5366: GO 5397
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5368: LD_ADDR_VAR 0 8
5372: PUSH
5373: LD_VAR 0 8
5377: PPUSH
5378: LD_VAR 0 8
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: PPUSH
5387: LD_VAR 0 2
5391: PPUSH
5392: CALL_OW 2
5396: ST_TO_ADDR
5397: GO 5302
5399: POP
5400: POP
// bunker_list := tmp ;
5401: LD_ADDR_VAR 0 13
5405: PUSH
5406: LD_VAR 0 8
5410: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_VAR 0 13
5420: PUSH
5421: LD_VAR 0 14
5425: ADD
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5451
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5430: LD_VAR 0 2
5434: PPUSH
5435: LD_VAR 0 2
5439: PPUSH
5440: CALL 2200 0 1
5444: PPUSH
5445: CALL_OW 431
5449: GO 5427
5451: POP
5452: POP
// while ( personel_counter [ 1 ] ) do
5453: LD_VAR 0 16
5457: PUSH
5458: LD_INT 1
5460: ARRAY
5461: IFFALSE 5569
// begin i := rand ( 1 , bunker_list ) ;
5463: LD_ADDR_VAR 0 2
5467: PUSH
5468: LD_INT 1
5470: PPUSH
5471: LD_VAR 0 13
5475: PPUSH
5476: CALL_OW 12
5480: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5481: LD_INT 0
5483: PPUSH
5484: LD_INT 1
5486: PPUSH
5487: LD_VAR 0 6
5491: PPUSH
5492: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5496: CALL_OW 44
5500: PPUSH
5501: LD_VAR 0 13
5505: PUSH
5506: LD_VAR 0 2
5510: ARRAY
5511: PPUSH
5512: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5516: LD_ADDR_VAR 0 13
5520: PUSH
5521: LD_VAR 0 13
5525: PPUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL_OW 3
5535: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5536: LD_ADDR_VAR 0 16
5540: PUSH
5541: LD_VAR 0 16
5545: PPUSH
5546: LD_INT 1
5548: PPUSH
5549: LD_VAR 0 16
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PUSH
5558: LD_INT 1
5560: MINUS
5561: PPUSH
5562: CALL_OW 1
5566: ST_TO_ADDR
// end ;
5567: GO 5453
// for i = 1 to personel_counter [ 2 ] do
5569: LD_ADDR_VAR 0 2
5573: PUSH
5574: DOUBLE
5575: LD_INT 1
5577: DEC
5578: ST_TO_ADDR
5579: LD_VAR 0 16
5583: PUSH
5584: LD_INT 2
5586: ARRAY
5587: PUSH
5588: FOR_TO
5589: IFFALSE 5620
// begin PrepareHuman ( false , 2 , skill ) ;
5591: LD_INT 0
5593: PPUSH
5594: LD_INT 2
5596: PPUSH
5597: LD_VAR 0 6
5601: PPUSH
5602: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5606: CALL_OW 44
5610: PPUSH
5611: LD_INT 16
5613: PPUSH
5614: CALL_OW 52
// end ;
5618: GO 5588
5620: POP
5621: POP
// for i = 1 to personel_counter [ 3 ] do
5622: LD_ADDR_VAR 0 2
5626: PUSH
5627: DOUBLE
5628: LD_INT 1
5630: DEC
5631: ST_TO_ADDR
5632: LD_VAR 0 16
5636: PUSH
5637: LD_INT 3
5639: ARRAY
5640: PUSH
5641: FOR_TO
5642: IFFALSE 5689
// begin PrepareHuman ( false , 3 , skill ) ;
5644: LD_INT 0
5646: PPUSH
5647: LD_INT 3
5649: PPUSH
5650: LD_VAR 0 6
5654: PPUSH
5655: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5659: CALL_OW 44
5663: PPUSH
5664: LD_VAR 0 11
5668: PUSH
5669: LD_VAR 0 2
5673: PUSH
5674: LD_INT 2
5676: MOD
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: ARRAY
5682: PPUSH
5683: CALL_OW 52
// end ;
5687: GO 5641
5689: POP
5690: POP
// for i = 1 to personel_counter [ 4 ] do
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: DOUBLE
5697: LD_INT 1
5699: DEC
5700: ST_TO_ADDR
5701: LD_VAR 0 16
5705: PUSH
5706: LD_INT 4
5708: ARRAY
5709: PUSH
5710: FOR_TO
5711: IFFALSE 5748
// begin PrepareHuman ( false , 4 , skill ) ;
5713: LD_INT 0
5715: PPUSH
5716: LD_INT 4
5718: PPUSH
5719: LD_VAR 0 6
5723: PPUSH
5724: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5728: CALL_OW 44
5732: PPUSH
5733: LD_VAR 0 10
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// end ;
5746: GO 5710
5748: POP
5749: POP
// for i in breastworks_list do
5750: LD_ADDR_VAR 0 2
5754: PUSH
5755: LD_VAR 0 12
5759: PUSH
5760: FOR_IN
5761: IFFALSE 5873
// begin r := GetDir ( i ) ;
5763: LD_ADDR_VAR 0 4
5767: PUSH
5768: LD_VAR 0 2
5772: PPUSH
5773: CALL_OW 254
5777: ST_TO_ADDR
// if r > 3 then
5778: LD_VAR 0 4
5782: PUSH
5783: LD_INT 3
5785: GREATER
5786: IFFALSE 5804
// r := r - 3 else
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_VAR 0 4
5797: PUSH
5798: LD_INT 3
5800: MINUS
5801: ST_TO_ADDR
5802: GO 5818
// r := r + 3 ;
5804: LD_ADDR_VAR 0 4
5808: PUSH
5809: LD_VAR 0 4
5813: PUSH
5814: LD_INT 3
5816: PLUS
5817: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5818: LD_INT 0
5820: PPUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 380
// un := CreateHuman ;
5833: LD_ADDR_VAR 0 5
5837: PUSH
5838: CALL_OW 44
5842: ST_TO_ADDR
// SetDir ( un , r ) ;
5843: LD_VAR 0 5
5847: PPUSH
5848: LD_VAR 0 4
5852: PPUSH
5853: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5857: LD_VAR 0 5
5861: PPUSH
5862: LD_VAR 0 2
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5760
5873: POP
5874: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_INT 22
5882: PUSH
5883: LD_INT 3
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 25
5892: PUSH
5893: LD_INT 3
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PPUSH
5904: CALL_OW 69
5908: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5909: LD_ADDR_VAR 0 4
5913: PUSH
5914: LD_INT 4
5916: PUSH
5917: LD_INT 5
5919: PUSH
5920: LD_INT 6
5922: PUSH
5923: LD_INT 6
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: PUSH
5932: LD_OWVAR 67
5936: ARRAY
5937: ST_TO_ADDR
// for i = 1 to r do
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_VAR 0 4
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6127
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5956: LD_ADDR_VAR 0 5
5960: PUSH
5961: LD_INT 3
5963: PPUSH
5964: LD_INT 3
5966: PPUSH
5967: LD_INT 22
5969: PUSH
5970: LD_INT 22
5972: PUSH
5973: LD_INT 24
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: LIST
5980: PUSH
5981: LD_VAR 0 2
5985: PUSH
5986: LD_INT 3
5988: MOD
5989: PUSH
5990: LD_INT 1
5992: PLUS
5993: ARRAY
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_INT 1
6000: PPUSH
6001: LD_INT 43
6003: PUSH
6004: LD_INT 44
6006: PUSH
6007: LD_INT 42
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_VAR 0 2
6019: PUSH
6020: LD_INT 3
6022: MOD
6023: PUSH
6024: LD_INT 1
6026: PLUS
6027: ARRAY
6028: PPUSH
6029: LD_INT 100
6031: PPUSH
6032: CALL 512 0 7
6036: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6037: LD_VAR 0 5
6041: PPUSH
6042: LD_INT 0
6044: PPUSH
6045: LD_INT 5
6047: PPUSH
6048: CALL_OW 12
6052: PPUSH
6053: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6057: LD_VAR 0 5
6061: PPUSH
6062: LD_INT 5
6064: PPUSH
6065: LD_INT 0
6067: PPUSH
6068: CALL_OW 49
// if i > tmp - 2 then
6072: LD_VAR 0 2
6076: PUSH
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: MINUS
6085: GREATER
6086: IFFALSE 6090
// continue ;
6088: GO 5953
// ComExitBuilding ( tmp [ i ] ) ;
6090: LD_VAR 0 8
6094: PUSH
6095: LD_VAR 0 2
6099: ARRAY
6100: PPUSH
6101: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6105: LD_VAR 0 8
6109: PUSH
6110: LD_VAR 0 2
6114: ARRAY
6115: PPUSH
6116: LD_VAR 0 5
6120: PPUSH
6121: CALL_OW 180
// end ;
6125: GO 5953
6127: POP
6128: POP
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 25
6146: PUSH
6147: LD_INT 2
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6894
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
6170: PPUSH
6171: PPUSH
6172: PPUSH
6173: PPUSH
// begin enable ;
6174: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6175: LD_ADDR_VAR 0 2
6179: PUSH
6180: LD_INT 6
6182: PPUSH
6183: LD_INT 3
6185: PUSH
6186: LD_INT 24
6188: PUSH
6189: LD_INT 1000
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 21
6202: PUSH
6203: LD_INT 3
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6219: LD_ADDR_VAR 0 4
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 3
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 2
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6253: LD_VAR 0 2
6257: NOT
6258: PUSH
6259: LD_EXP 20
6263: NOT
6264: AND
6265: IFFALSE 6335
// begin for i in engs do
6267: LD_ADDR_VAR 0 1
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: FOR_IN
6278: IFFALSE 6333
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6280: LD_VAR 0 1
6284: PPUSH
6285: CALL_OW 256
6289: PUSH
6290: LD_INT 1000
6292: EQUAL
6293: PUSH
6294: LD_VAR 0 1
6298: PPUSH
6299: CALL_OW 314
6303: NOT
6304: AND
6305: PUSH
6306: LD_VAR 0 1
6310: PPUSH
6311: CALL_OW 310
6315: NOT
6316: AND
6317: IFFALSE 6331
// ComEnterUnit ( i , ru_dep_main ) ;
6319: LD_VAR 0 1
6323: PPUSH
6324: LD_INT 16
6326: PPUSH
6327: CALL_OW 120
6331: GO 6277
6333: POP
6334: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6335: LD_VAR 0 4
6339: PPUSH
6340: LD_INT 3
6342: PUSH
6343: LD_INT 24
6345: PUSH
6346: LD_INT 650
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL_OW 72
6361: IFFALSE 6454
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: LD_VAR 0 4
6372: PPUSH
6373: LD_INT 3
6375: PUSH
6376: LD_INT 24
6378: PUSH
6379: LD_INT 650
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PPUSH
6390: CALL_OW 72
6394: ST_TO_ADDR
// for i in tmp do
6395: LD_ADDR_VAR 0 1
6399: PUSH
6400: LD_VAR 0 3
6404: PUSH
6405: FOR_IN
6406: IFFALSE 6452
// if not IsInArea ( i , mainBaseArea ) then
6408: LD_VAR 0 1
6412: PPUSH
6413: LD_INT 14
6415: PPUSH
6416: CALL_OW 308
6420: NOT
6421: IFFALSE 6450
// begin ComMoveXY ( i , 129 , 125 ) ;
6423: LD_VAR 0 1
6427: PPUSH
6428: LD_INT 129
6430: PPUSH
6431: LD_INT 125
6433: PPUSH
6434: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6438: LD_VAR 0 1
6442: PPUSH
6443: LD_INT 1050
6445: PPUSH
6446: CALL_OW 202
// end ;
6450: GO 6405
6452: POP
6453: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6454: LD_ADDR_VAR 0 4
6458: PUSH
6459: LD_VAR 0 4
6463: PPUSH
6464: LD_INT 24
6466: PUSH
6467: LD_INT 650
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PPUSH
6474: CALL_OW 72
6478: ST_TO_ADDR
// if not engs then
6479: LD_VAR 0 4
6483: NOT
6484: IFFALSE 6488
// exit ;
6486: GO 6894
// if filter then
6488: LD_VAR 0 2
6492: IFFALSE 6751
// begin for i in engs do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: LD_VAR 0 4
6503: PUSH
6504: FOR_IN
6505: IFFALSE 6529
// if IsInUnit ( i ) then
6507: LD_VAR 0 1
6511: PPUSH
6512: CALL_OW 310
6516: IFFALSE 6527
// ComExitBuilding ( i ) ;
6518: LD_VAR 0 1
6522: PPUSH
6523: CALL_OW 122
6527: GO 6504
6529: POP
6530: POP
// wait ( 3 ) ;
6531: LD_INT 3
6533: PPUSH
6534: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6538: LD_VAR 0 2
6542: PUSH
6543: LD_INT 2
6545: GREATEREQUAL
6546: PUSH
6547: LD_VAR 0 4
6551: PUSH
6552: LD_INT 2
6554: GREATEREQUAL
6555: AND
6556: IFFALSE 6704
// begin for i = 1 to engs / 2 do
6558: LD_ADDR_VAR 0 1
6562: PUSH
6563: DOUBLE
6564: LD_INT 1
6566: DEC
6567: ST_TO_ADDR
6568: LD_VAR 0 4
6572: PUSH
6573: LD_INT 2
6575: DIVREAL
6576: PUSH
6577: FOR_TO
6578: IFFALSE 6624
// if not HasTask ( engs [ i ] ) then
6580: LD_VAR 0 4
6584: PUSH
6585: LD_VAR 0 1
6589: ARRAY
6590: PPUSH
6591: CALL_OW 314
6595: NOT
6596: IFFALSE 6622
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6598: LD_VAR 0 4
6602: PUSH
6603: LD_VAR 0 1
6607: ARRAY
6608: PPUSH
6609: LD_VAR 0 2
6613: PUSH
6614: LD_INT 1
6616: ARRAY
6617: PPUSH
6618: CALL_OW 130
6622: GO 6577
6624: POP
6625: POP
// for i = engs / 2 + 1 to engs do
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: DOUBLE
6632: LD_VAR 0 4
6636: PUSH
6637: LD_INT 2
6639: DIVREAL
6640: PUSH
6641: LD_INT 1
6643: PLUS
6644: DEC
6645: ST_TO_ADDR
6646: LD_VAR 0 4
6650: PUSH
6651: FOR_TO
6652: IFFALSE 6700
// if not HasTask ( engs [ i ] ) then
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: CALL_OW 314
6669: NOT
6670: IFFALSE 6698
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6672: LD_VAR 0 4
6676: PUSH
6677: LD_VAR 0 1
6681: ARRAY
6682: PPUSH
6683: LD_VAR 0 2
6687: PUSH
6688: LD_VAR 0 2
6692: ARRAY
6693: PPUSH
6694: CALL_OW 130
6698: GO 6651
6700: POP
6701: POP
// end else
6702: GO 6751
// for i in engs do
6704: LD_ADDR_VAR 0 1
6708: PUSH
6709: LD_VAR 0 4
6713: PUSH
6714: FOR_IN
6715: IFFALSE 6749
// if not HasTask ( i ) then
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL_OW 314
6726: NOT
6727: IFFALSE 6747
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6729: LD_VAR 0 1
6733: PPUSH
6734: LD_VAR 0 2
6738: PUSH
6739: LD_INT 1
6741: ARRAY
6742: PPUSH
6743: CALL_OW 130
6747: GO 6714
6749: POP
6750: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6751: LD_ADDR_VAR 0 5
6755: PUSH
6756: LD_INT 81
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 69
6770: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6771: LD_EXP 20
6775: PUSH
6776: LD_VAR 0 2
6780: NOT
6781: AND
6782: IFFALSE 6894
// begin ComExitBuilding ( engs ) ;
6784: LD_VAR 0 4
6788: PPUSH
6789: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_EXP 20
6802: PUSH
6803: LD_INT 2
6805: ARRAY
6806: PPUSH
6807: LD_EXP 20
6811: PUSH
6812: LD_INT 3
6814: ARRAY
6815: PPUSH
6816: CALL_OW 73
6820: PPUSH
6821: LD_EXP 20
6825: PUSH
6826: LD_INT 2
6828: ARRAY
6829: PPUSH
6830: LD_EXP 20
6834: PUSH
6835: LD_INT 3
6837: ARRAY
6838: PPUSH
6839: CALL_OW 297
6843: PUSH
6844: LD_INT 10
6846: GREATER
6847: IFFALSE 6894
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6849: LD_VAR 0 4
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 1
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 2
6870: ARRAY
6871: PPUSH
6872: LD_EXP 20
6876: PUSH
6877: LD_INT 3
6879: ARRAY
6880: PPUSH
6881: LD_EXP 20
6885: PUSH
6886: LD_INT 4
6888: ARRAY
6889: PPUSH
6890: CALL_OW 145
// end ; end ;
6894: PPOPN 5
6896: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6897: LD_INT 16
6899: PPUSH
6900: CALL_OW 256
6904: PUSH
6905: LD_INT 250
6907: LESS
6908: IFFALSE 7098
6910: GO 6912
6912: DISABLE
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6917: LD_ADDR_VAR 0 2
6921: PUSH
6922: LD_INT 22
6924: PUSH
6925: LD_INT 3
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 2
6934: PUSH
6935: LD_INT 25
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 25
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 25
6957: PUSH
6958: LD_INT 4
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
6980: LD_VAR 0 2
6984: PPUSH
6985: CALL_OW 122
// wait ( 3 ) ;
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
6996: LD_VAR 0 2
7000: PPUSH
7001: LD_INT 156
7003: PPUSH
7004: LD_INT 211
7006: PPUSH
7007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7011: LD_INT 35
7013: PPUSH
7014: CALL_OW 67
// for i in tmp do
7018: LD_ADDR_VAR 0 1
7022: PUSH
7023: LD_VAR 0 2
7027: PUSH
7028: FOR_IN
7029: IFFALSE 7089
// if IsInArea ( i , escapeArea ) then
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 15
7038: PPUSH
7039: CALL_OW 308
7043: IFFALSE 7072
// begin RemoveUnit ( i ) ;
7045: LD_VAR 0 1
7049: PPUSH
7050: CALL_OW 64
// tmp := tmp diff i ;
7054: LD_ADDR_VAR 0 2
7058: PUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_VAR 0 1
7068: DIFF
7069: ST_TO_ADDR
// end else
7070: GO 7087
// ComMoveXY ( i , 156 , 211 ) ;
7072: LD_VAR 0 1
7076: PPUSH
7077: LD_INT 156
7079: PPUSH
7080: LD_INT 211
7082: PPUSH
7083: CALL_OW 111
7087: GO 7028
7089: POP
7090: POP
// until not tmp ;
7091: LD_VAR 0 2
7095: NOT
7096: IFFALSE 7011
// end ;
7098: PPOPN 2
7100: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7101: LD_INT 16
7103: PPUSH
7104: CALL_OW 256
7108: PUSH
7109: LD_INT 250
7111: GREATER
7112: PUSH
7113: LD_INT 22
7115: PUSH
7116: LD_INT 3
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 25
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 56
7135: PUSH
7136: EMPTY
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: AND
7152: IFFALSE 7264
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
7160: PPUSH
// begin enable ;
7161: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7162: LD_ADDR_VAR 0 2
7166: PUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 56
7189: PUSH
7190: EMPTY
7191: LIST
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 60
7198: PUSH
7199: EMPTY
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: PPUSH
7215: CALL_OW 69
7219: ST_TO_ADDR
// if not tmp then
7220: LD_VAR 0 2
7224: NOT
7225: IFFALSE 7229
// exit ;
7227: GO 7264
// for i in tmp do
7229: LD_ADDR_VAR 0 1
7233: PUSH
7234: LD_VAR 0 2
7238: PUSH
7239: FOR_IN
7240: IFFALSE 7262
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 0
7249: PPUSH
7250: LD_INT 143
7252: PPUSH
7253: LD_INT 143
7255: PPUSH
7256: CALL 830 0 4
7260: GO 7239
7262: POP
7263: POP
// end ;
7264: PPOPN 2
7266: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7267: LD_INT 22
7269: PUSH
7270: LD_INT 3
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 4
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PPUSH
7291: CALL_OW 69
7295: IFFALSE 7549
7297: GO 7299
7299: DISABLE
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
// begin enable ;
7305: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7306: LD_ADDR_VAR 0 2
7310: PUSH
7311: LD_INT 14
7313: PPUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 3
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 21
7326: PUSH
7327: LD_INT 1
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 3
7336: PUSH
7337: LD_INT 24
7339: PUSH
7340: LD_INT 1000
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 70
7360: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_INT 3
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: ST_TO_ADDR
// if not doc then
7395: LD_VAR 0 3
7399: NOT
7400: IFFALSE 7404
// exit ;
7402: GO 7549
// if not tmp then
7404: LD_VAR 0 2
7408: NOT
7409: IFFALSE 7500
// begin if not IsInUnit ( doc [ 1 ] ) then
7411: LD_VAR 0 3
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PPUSH
7420: CALL_OW 310
7424: NOT
7425: IFFALSE 7498
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7427: LD_VAR 0 3
7431: PPUSH
7432: LD_INT 22
7434: PUSH
7435: LD_INT 3
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 2
7444: PUSH
7445: LD_INT 30
7447: PUSH
7448: LD_INT 6
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 30
7457: PUSH
7458: LD_INT 7
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 30
7467: PUSH
7468: LD_INT 8
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 69
7489: PUSH
7490: LD_INT 1
7492: ARRAY
7493: PPUSH
7494: CALL_OW 120
// exit ;
7498: GO 7549
// end ; if IsInUnit ( doc [ 1 ] ) then
7500: LD_VAR 0 3
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: CALL_OW 310
7513: IFFALSE 7524
// ComExitBuilding ( doc ) ;
7515: LD_VAR 0 3
7519: PPUSH
7520: CALL_OW 122
// wait ( 3 ) ;
7524: LD_INT 3
7526: PPUSH
7527: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7531: LD_VAR 0 3
7535: PPUSH
7536: LD_VAR 0 2
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: PPUSH
7545: CALL_OW 128
// end ;
7549: PPOPN 3
7551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7552: LD_INT 22
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 25
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PPUSH
7576: CALL_OW 69
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 21
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 69
7609: AND
7610: IFFALSE 8024
7612: GO 7614
7614: DISABLE
7615: LD_INT 0
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
// begin enable ;
7622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7623: LD_ADDR_VAR 0 2
7627: PUSH
7628: LD_INT 22
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 21
7640: PUSH
7641: LD_INT 2
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: LD_INT 58
7653: PUSH
7654: EMPTY
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 69
7670: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7671: LD_ADDR_VAR 0 4
7675: PUSH
7676: LD_INT 10
7678: PUSH
7679: LD_INT 11
7681: PUSH
7682: LD_INT 12
7684: PUSH
7685: LD_INT 14
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: ST_TO_ADDR
// area := 0 ;
7694: LD_ADDR_VAR 0 5
7698: PUSH
7699: LD_INT 0
7701: ST_TO_ADDR
// attacking := false ;
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_INT 0
7709: ST_TO_ADDR
// for i in tmp do
7710: LD_ADDR_VAR 0 1
7714: PUSH
7715: LD_VAR 0 2
7719: PUSH
7720: FOR_IN
7721: IFFALSE 7807
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7723: LD_VAR 0 1
7727: PPUSH
7728: LD_INT 22
7730: PUSH
7731: LD_INT 1
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: PPUSH
7743: LD_VAR 0 1
7747: PPUSH
7748: CALL_OW 74
7752: PPUSH
7753: CALL_OW 296
7757: PUSH
7758: LD_INT 10
7760: LESS
7761: IFFALSE 7805
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7763: LD_VAR 0 1
7767: PPUSH
7768: LD_INT 22
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PPUSH
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 74
7792: PPUSH
7793: CALL_OW 115
// attacking := true ;
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// end ;
7805: GO 7720
7807: POP
7808: POP
// if attacking then
7809: LD_VAR 0 3
7813: IFFALSE 7817
// exit ;
7815: GO 8024
// for i in areas do
7817: LD_ADDR_VAR 0 1
7821: PUSH
7822: LD_VAR 0 4
7826: PUSH
7827: FOR_IN
7828: IFFALSE 7865
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
7830: LD_VAR 0 1
7834: PPUSH
7835: LD_INT 22
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PPUSH
7845: CALL_OW 70
7849: IFFALSE 7863
// begin area := i ;
7851: LD_ADDR_VAR 0 5
7855: PUSH
7856: LD_VAR 0 1
7860: ST_TO_ADDR
// break ;
7861: GO 7865
// end ;
7863: GO 7827
7865: POP
7866: POP
// if area then
7867: LD_VAR 0 5
7871: IFFALSE 8024
// begin for i in tmp do
7873: LD_ADDR_VAR 0 1
7877: PUSH
7878: LD_VAR 0 2
7882: PUSH
7883: FOR_IN
7884: IFFALSE 8022
// begin if GetFuel ( i ) < 33 then
7886: LD_VAR 0 1
7890: PPUSH
7891: CALL_OW 261
7895: PUSH
7896: LD_INT 33
7898: LESS
7899: IFFALSE 7913
// SetFuel ( i , 33 ) ;
7901: LD_VAR 0 1
7905: PPUSH
7906: LD_INT 33
7908: PPUSH
7909: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7913: LD_VAR 0 1
7917: PPUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 69
7932: PPUSH
7933: LD_VAR 0 1
7937: PPUSH
7938: CALL_OW 74
7942: PPUSH
7943: CALL_OW 296
7947: PUSH
7948: LD_INT 10
7950: LESS
7951: IFFALSE 7989
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7953: LD_VAR 0 1
7957: PPUSH
7958: LD_INT 22
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PPUSH
7968: CALL_OW 69
7972: PPUSH
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 74
7982: PPUSH
7983: CALL_OW 115
7987: GO 8020
// if not IsInArea ( i , area ) then
7989: LD_VAR 0 1
7993: PPUSH
7994: LD_VAR 0 5
7998: PPUSH
7999: CALL_OW 308
8003: NOT
8004: IFFALSE 8020
// ComMoveToArea ( i , area ) ;
8006: LD_VAR 0 1
8010: PPUSH
8011: LD_VAR 0 5
8015: PPUSH
8016: CALL_OW 113
// end ;
8020: GO 7883
8022: POP
8023: POP
// end ; end ;
8024: PPOPN 5
8026: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8027: LD_OWVAR 67
8031: PUSH
8032: LD_INT 1
8034: GREATER
8035: IFFALSE 8320
8037: GO 8039
8039: DISABLE
8040: LD_INT 0
8042: PPUSH
8043: PPUSH
8044: PPUSH
8045: PPUSH
8046: PPUSH
8047: PPUSH
// begin uc_side := 3 ;
8048: LD_ADDR_OWVAR 20
8052: PUSH
8053: LD_INT 3
8055: ST_TO_ADDR
// uc_nation := 3 ;
8056: LD_ADDR_OWVAR 21
8060: PUSH
8061: LD_INT 3
8063: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8064: LD_ADDR_VAR 0 5
8068: PUSH
8069: LD_INT 18900
8071: PUSH
8072: LD_INT 14700
8074: PUSH
8075: LD_INT 12600
8077: PUSH
8078: LD_INT 11550
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_OWVAR 67
8091: ARRAY
8092: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8093: LD_ADDR_VAR 0 6
8097: PUSH
8098: LD_INT 2
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: LD_INT 3
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: PUSH
8116: LD_OWVAR 67
8120: ARRAY
8121: ST_TO_ADDR
// for i = 1 to count do
8122: LD_ADDR_VAR 0 1
8126: PUSH
8127: DOUBLE
8128: LD_INT 1
8130: DEC
8131: ST_TO_ADDR
8132: LD_VAR 0 6
8136: PUSH
8137: FOR_TO
8138: IFFALSE 8318
// begin wait ( time ) ;
8140: LD_VAR 0 5
8144: PPUSH
8145: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8149: LD_ADDR_VAR 0 2
8153: PUSH
8154: DOUBLE
8155: LD_INT 1
8157: DEC
8158: ST_TO_ADDR
8159: LD_INT 1
8161: PPUSH
8162: LD_OWVAR 67
8166: PPUSH
8167: CALL_OW 12
8171: PUSH
8172: FOR_TO
8173: IFFALSE 8314
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8175: LD_ADDR_VAR 0 4
8179: PUSH
8180: LD_INT 3
8182: PPUSH
8183: LD_INT 3
8185: PPUSH
8186: LD_INT 22
8188: PPUSH
8189: LD_INT 1
8191: PPUSH
8192: LD_INT 1
8194: PPUSH
8195: LD_INT 43
8197: PUSH
8198: LD_INT 44
8200: PUSH
8201: LD_INT 42
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_VAR 0 1
8213: PUSH
8214: LD_INT 3
8216: MOD
8217: PUSH
8218: LD_INT 1
8220: PLUS
8221: ARRAY
8222: PPUSH
8223: LD_INT 80
8225: PPUSH
8226: CALL 512 0 7
8230: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8231: LD_VAR 0 4
8235: PPUSH
8236: LD_INT 13
8238: PPUSH
8239: LD_INT 0
8241: PPUSH
8242: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8246: LD_INT 0
8248: PPUSH
8249: LD_INT 3
8251: PPUSH
8252: LD_INT 4
8254: PUSH
8255: LD_INT 5
8257: PUSH
8258: LD_INT 5
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_OWVAR 67
8270: ARRAY
8271: PPUSH
8272: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8276: CALL_OW 44
8280: PPUSH
8281: LD_VAR 0 4
8285: PPUSH
8286: CALL_OW 52
// wait ( 0 0$01 ) ;
8290: LD_INT 35
8292: PPUSH
8293: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8297: LD_VAR 0 4
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 143
8307: PPUSH
8308: CALL_OW 111
// end ;
8312: GO 8172
8314: POP
8315: POP
// end ;
8316: GO 8137
8318: POP
8319: POP
// end ;
8320: PPOPN 6
8322: END
// every 8 8$00 do var i , un , time ;
8323: GO 8325
8325: DISABLE
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
8330: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8331: LD_ADDR_VAR 0 3
8335: PUSH
8336: LD_INT 6300
8338: PUSH
8339: LD_INT 2100
8341: PUSH
8342: LD_INT 1050
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: ST_TO_ADDR
// wait ( time ) ;
8350: LD_VAR 0 3
8354: PPUSH
8355: CALL_OW 67
// uc_side := 3 ;
8359: LD_ADDR_OWVAR 20
8363: PUSH
8364: LD_INT 3
8366: ST_TO_ADDR
// uc_nation := 3 ;
8367: LD_ADDR_OWVAR 21
8371: PUSH
8372: LD_INT 3
8374: ST_TO_ADDR
// for i = 1 to 2 do
8375: LD_ADDR_VAR 0 1
8379: PUSH
8380: DOUBLE
8381: LD_INT 1
8383: DEC
8384: ST_TO_ADDR
8385: LD_INT 2
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8452
// begin PrepareHuman ( false , 1 , 4 ) ;
8391: LD_INT 0
8393: PPUSH
8394: LD_INT 1
8396: PPUSH
8397: LD_INT 4
8399: PPUSH
8400: CALL_OW 380
// un := CreateHuman ;
8404: LD_ADDR_VAR 0 2
8408: PUSH
8409: CALL_OW 44
8413: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8414: LD_VAR 0 2
8418: PPUSH
8419: LD_INT 16
8421: PPUSH
8422: CALL_OW 52
// ComExitBuilding ( un ) ;
8426: LD_VAR 0 2
8430: PPUSH
8431: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8435: LD_VAR 0 2
8439: PPUSH
8440: LD_INT 41
8442: PPUSH
8443: LD_INT 76
8445: PPUSH
8446: CALL_OW 174
// end ;
8450: GO 8388
8452: POP
8453: POP
// end ; end_of_file
8454: PPOPN 3
8456: END
// export function Action ; begin
8457: LD_INT 0
8459: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8460: LD_INT 28
8462: PPUSH
8463: LD_INT 3
8465: PPUSH
8466: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8470: LD_INT 41
8472: PPUSH
8473: LD_INT 76
8475: PPUSH
8476: LD_INT 1
8478: PPUSH
8479: LD_INT 10
8481: PPUSH
8482: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8486: LD_INT 41
8488: PPUSH
8489: LD_INT 76
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 331
// InGameOn ;
8499: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8503: LD_EXP 19
8507: PPUSH
8508: LD_STRING D2-Har-1
8510: PPUSH
8511: CALL_OW 94
// InGameOff ;
8515: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8519: LD_STRING M1
8521: PPUSH
8522: CALL_OW 337
// end ;
8526: LD_VAR 0 1
8530: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8531: LD_EXP 4
8535: PUSH
8536: LD_INT 1
8538: GREATER
8539: IFFALSE 8630
8541: GO 8543
8543: DISABLE
8544: LD_INT 0
8546: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 1
8554: PPUSH
8555: CALL 600 0 1
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8564: LD_VAR 0 1
8568: PPUSH
8569: LD_STRING D2a-Sol1-1
8571: PPUSH
8572: CALL_OW 88
// if not un then
8576: LD_VAR 0 1
8580: NOT
8581: IFFALSE 8612
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8583: LD_ADDR_VAR 0 1
8587: PUSH
8588: LD_INT 2
8590: PPUSH
8591: CALL 600 0 1
8595: PUSH
8596: LD_INT 1
8598: ARRAY
8599: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8600: LD_VAR 0 1
8604: PPUSH
8605: LD_STRING D2a-FSol1-1
8607: PPUSH
8608: CALL_OW 88
// end ; if Khatam then
8612: LD_EXP 17
8616: IFFALSE 8630
// Say ( Khatam , D3b-Khat-3 ) ;
8618: LD_EXP 17
8622: PPUSH
8623: LD_STRING D3b-Khat-3
8625: PPUSH
8626: CALL_OW 88
// end ;
8630: PPOPN 1
8632: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8633: LD_EXP 15
8637: PUSH
8638: LD_EXP 18
8642: NOT
8643: AND
8644: PUSH
8645: LD_INT 22
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 92
8657: PUSH
8658: LD_EXP 15
8662: PPUSH
8663: CALL_OW 250
8667: PUSH
8668: LD_EXP 15
8672: PPUSH
8673: CALL_OW 251
8677: PUSH
8678: LD_INT 7
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 69
8695: AND
8696: PUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 463
8704: NOT
8705: AND
8706: PUSH
8707: LD_INT 4
8709: PPUSH
8710: CALL_OW 463
8714: NOT
8715: AND
8716: IFFALSE 9303
8718: GO 8720
8720: DISABLE
8721: LD_INT 0
8723: PPUSH
8724: PPUSH
// begin InGameOn ;
8725: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: LD_INT 22
8736: PUSH
8737: LD_INT 0
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 25
8746: PUSH
8747: LD_INT 12
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 69
8762: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8763: LD_ADDR_VAR 0 2
8767: PUSH
8768: LD_VAR 0 2
8772: PPUSH
8773: LD_EXP 15
8777: PPUSH
8778: CALL_OW 74
8782: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8783: LD_ADDR_VAR 0 1
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 1
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 21
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 91
8810: PUSH
8811: LD_EXP 15
8815: PUSH
8816: LD_INT 20
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: PPUSH
8829: CALL_OW 69
8833: PUSH
8834: FOR_IN
8835: IFFALSE 8853
// ComTurnUnit ( i , Frank ) ;
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_EXP 15
8846: PPUSH
8847: CALL_OW 119
8851: GO 8834
8853: POP
8854: POP
// SetSide ( Frank , 1 ) ;
8855: LD_EXP 15
8859: PPUSH
8860: LD_INT 1
8862: PPUSH
8863: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
8867: LD_EXP 9
8871: PPUSH
8872: LD_EXP 15
8876: PPUSH
8877: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
8881: LD_EXP 9
8885: PPUSH
8886: LD_EXP 15
8890: PPUSH
8891: CALL_OW 179
// CenterOnUnits ( Frank ) ;
8895: LD_EXP 15
8899: PPUSH
8900: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
8904: LD_EXP 15
8908: PPUSH
8909: LD_STRING D3a-Frank-1
8911: PPUSH
8912: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
8916: LD_VAR 0 2
8920: PPUSH
8921: LD_INT 42
8923: PPUSH
8924: LD_INT 78
8926: PPUSH
8927: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
8931: LD_VAR 0 2
8935: PPUSH
8936: LD_EXP 15
8940: PPUSH
8941: CALL_OW 179
// if Lisa then
8945: LD_EXP 14
8949: IFFALSE 8963
// Say ( Lisa , D3a-Lisa-1 ) ;
8951: LD_EXP 14
8955: PPUSH
8956: LD_STRING D3a-Lisa-1
8958: PPUSH
8959: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
8963: LD_EXP 9
8967: PPUSH
8968: LD_STRING D3a-JMM-1
8970: PPUSH
8971: CALL_OW 88
// if Cyrus then
8975: LD_EXP 13
8979: IFFALSE 8993
// Say ( Cyrus , D3a-Cyrus-1 ) ;
8981: LD_EXP 13
8985: PPUSH
8986: LD_STRING D3a-Cyrus-1
8988: PPUSH
8989: CALL_OW 88
// if GetRandom ( sex_male ) then
8993: LD_INT 1
8995: PPUSH
8996: CALL 600 0 1
9000: IFFALSE 9021
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9002: LD_INT 1
9004: PPUSH
9005: CALL 600 0 1
9009: PUSH
9010: LD_INT 1
9012: ARRAY
9013: PPUSH
9014: LD_STRING D3a-Sol1-1
9016: PPUSH
9017: CALL_OW 88
// if GetRandom ( sex_female ) then
9021: LD_INT 2
9023: PPUSH
9024: CALL 600 0 1
9028: IFFALSE 9049
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9030: LD_INT 2
9032: PPUSH
9033: CALL 600 0 1
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING D3a-FSol1-1
9044: PPUSH
9045: CALL_OW 88
// if Gladstone then
9049: LD_EXP 16
9053: IFFALSE 9067
// Say ( Gladstone , D3a-Glad-1 ) ;
9055: LD_EXP 16
9059: PPUSH
9060: LD_STRING D3a-Glad-1
9062: PPUSH
9063: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9067: LD_VAR 0 2
9071: PPUSH
9072: LD_INT 60
9074: PPUSH
9075: LD_INT 113
9077: PPUSH
9078: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9082: LD_EXP 15
9086: PPUSH
9087: LD_STRING D3a-Frank-2
9089: PPUSH
9090: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9094: LD_EXP 15
9098: PPUSH
9099: LD_EXP 9
9103: PPUSH
9104: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9108: LD_EXP 9
9112: PPUSH
9113: LD_STRING D3a-JMM-2
9115: PPUSH
9116: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9120: LD_INT 1
9122: PPUSH
9123: LD_INT 4
9125: PPUSH
9126: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9130: LD_INT 85
9132: PPUSH
9133: LD_INT 134
9135: PPUSH
9136: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9140: LD_EXP 15
9144: PPUSH
9145: LD_STRING D3a-Frank-3
9147: PPUSH
9148: CALL_OW 88
// Wait ( 0 0$01 ) ;
9152: LD_INT 35
9154: PPUSH
9155: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9159: LD_INT 166
9161: PPUSH
9162: LD_INT 136
9164: PPUSH
9165: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9169: LD_EXP 9
9173: PPUSH
9174: LD_STRING D3a-JMM-3
9176: PPUSH
9177: CALL_OW 88
// Wait ( 0 0$01 ) ;
9181: LD_INT 35
9183: PPUSH
9184: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9188: LD_EXP 15
9192: PPUSH
9193: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9197: LD_EXP 15
9201: PPUSH
9202: LD_STRING D3a-Frank-4
9204: PPUSH
9205: CALL_OW 88
// if Lisa then
9209: LD_EXP 14
9213: IFFALSE 9227
// Say ( Lisa , D3a-Lisa-4 ) ;
9215: LD_EXP 14
9219: PPUSH
9220: LD_STRING D3a-Lisa-4
9222: PPUSH
9223: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9227: LD_EXP 9
9231: PPUSH
9232: LD_STRING D3a-JMM-4
9234: PPUSH
9235: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9239: LD_EXP 15
9243: PPUSH
9244: LD_STRING D3a-Frank-5
9246: PPUSH
9247: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9251: LD_EXP 9
9255: PPUSH
9256: LD_STRING D3a-JMM-5
9258: PPUSH
9259: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9263: LD_EXP 15
9267: PPUSH
9268: LD_STRING D3a-Frank-6
9270: PPUSH
9271: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9275: LD_EXP 9
9279: PPUSH
9280: LD_STRING D3a-JMM-6
9282: PPUSH
9283: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9287: LD_EXP 15
9291: PPUSH
9292: LD_STRING D3a-Frank-7
9294: PPUSH
9295: CALL_OW 88
// InGameOff ;
9299: CALL_OW 9
// end ;
9303: PPOPN 2
9305: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9306: LD_EXP 18
9310: PUSH
9311: LD_EXP 15
9315: NOT
9316: AND
9317: PUSH
9318: LD_INT 22
9320: PUSH
9321: LD_INT 1
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 92
9330: PUSH
9331: LD_EXP 18
9335: PPUSH
9336: CALL_OW 250
9340: PUSH
9341: LD_EXP 18
9345: PPUSH
9346: CALL_OW 251
9350: PUSH
9351: LD_INT 7
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 69
9368: AND
9369: PUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 463
9377: NOT
9378: AND
9379: PUSH
9380: LD_INT 4
9382: PPUSH
9383: CALL_OW 463
9387: NOT
9388: AND
9389: IFFALSE 9569
9391: GO 9393
9393: DISABLE
// begin InGameOn ;
9394: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9398: LD_EXP 9
9402: PPUSH
9403: LD_EXP 18
9407: PPUSH
9408: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9412: LD_EXP 18
9416: PPUSH
9417: LD_EXP 9
9421: PPUSH
9422: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9426: LD_EXP 18
9430: PPUSH
9431: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9435: LD_EXP 18
9439: PPUSH
9440: LD_STRING D3b-Yam-1
9442: PPUSH
9443: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9447: LD_EXP 9
9451: PPUSH
9452: LD_STRING D3b-JMM-1
9454: PPUSH
9455: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9459: LD_INT 1
9461: PPUSH
9462: LD_INT 4
9464: PPUSH
9465: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9469: LD_INT 85
9471: PPUSH
9472: LD_INT 134
9474: PPUSH
9475: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9479: LD_EXP 18
9483: PPUSH
9484: LD_STRING D3b-Yam-2
9486: PPUSH
9487: CALL_OW 88
// Wait ( 0 0$01 ) ;
9491: LD_INT 35
9493: PPUSH
9494: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9498: LD_EXP 9
9502: PPUSH
9503: LD_STRING D3b-JMM-2
9505: PPUSH
9506: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9510: LD_INT 166
9512: PPUSH
9513: LD_INT 136
9515: PPUSH
9516: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9520: LD_EXP 18
9524: PPUSH
9525: LD_STRING D3b-Yam-3
9527: PPUSH
9528: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9532: LD_EXP 9
9536: PPUSH
9537: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9541: LD_EXP 9
9545: PPUSH
9546: LD_STRING D3b-JMM-3a
9548: PPUSH
9549: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9553: LD_EXP 18
9557: PPUSH
9558: LD_INT 1
9560: PPUSH
9561: CALL_OW 235
// InGameOff ;
9565: CALL_OW 9
// end ;
9569: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9570: LD_INT 7
9572: PPUSH
9573: LD_INT 22
9575: PUSH
9576: LD_INT 1
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: LD_INT 24
9588: PUSH
9589: LD_INT 1000
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 70
9608: IFFALSE 10064
9610: GO 9612
9612: DISABLE
9613: LD_INT 0
9615: PPUSH
9616: PPUSH
9617: PPUSH
9618: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9619: LD_INT 35
9621: PPUSH
9622: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9626: LD_ADDR_VAR 0 1
9630: PUSH
9631: LD_INT 7
9633: PPUSH
9634: LD_INT 22
9636: PUSH
9637: LD_INT 1
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 3
9646: PUSH
9647: LD_INT 24
9649: PUSH
9650: LD_INT 1000
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PPUSH
9665: CALL_OW 70
9669: ST_TO_ADDR
// if not un then
9670: LD_VAR 0 1
9674: NOT
9675: IFFALSE 9679
// continue ;
9677: GO 9619
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: CALL 2028 0 1
9697: ST_TO_ADDR
// until tw ;
9698: LD_VAR 0 3
9702: IFFALSE 9619
// DialogueOn ;
9704: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9708: LD_VAR 0 3
9712: PPUSH
9713: CALL_OW 87
// if Lisa then
9717: LD_EXP 14
9721: IFFALSE 9749
// begin Say ( Lisa , D5-Lisa-1 ) ;
9723: LD_EXP 14
9727: PPUSH
9728: LD_STRING D5-Lisa-1
9730: PPUSH
9731: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9735: LD_EXP 9
9739: PPUSH
9740: LD_STRING D5-JMM-1a
9742: PPUSH
9743: CALL_OW 88
// end else
9747: GO 9761
// Say ( JMM , D5-JMM-1 ) ;
9749: LD_EXP 9
9753: PPUSH
9754: LD_STRING D5-JMM-1
9756: PPUSH
9757: CALL_OW 88
// DialogueOff ;
9761: CALL_OW 7
// while ( true ) do
9765: LD_INT 1
9767: IFFALSE 9823
// begin wait ( 0 0$01 ) ;
9769: LD_INT 35
9771: PPUSH
9772: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: LD_INT 8
9783: PPUSH
9784: LD_INT 30
9786: PUSH
9787: LD_INT 26
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 101
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 71
9812: ST_TO_ADDR
// if x then
9813: LD_VAR 0 2
9817: IFFALSE 9821
// break ;
9819: GO 9823
// end ;
9821: GO 9765
// CenterOnUnits ( x [ 1 ] ) ;
9823: LD_VAR 0 2
9827: PUSH
9828: LD_INT 1
9830: ARRAY
9831: PPUSH
9832: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9836: LD_EXP 15
9840: PUSH
9841: LD_EXP 15
9845: PPUSH
9846: CALL_OW 255
9850: PUSH
9851: LD_INT 1
9853: EQUAL
9854: AND
9855: IFFALSE 9871
// Say ( Frank , D5a-Frank-1 ) else
9857: LD_EXP 15
9861: PPUSH
9862: LD_STRING D5a-Frank-1
9864: PPUSH
9865: CALL_OW 88
9869: GO 9925
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
9871: LD_EXP 18
9875: PUSH
9876: LD_EXP 18
9880: PPUSH
9881: CALL_OW 255
9885: PUSH
9886: LD_INT 1
9888: EQUAL
9889: AND
9890: IFFALSE 9906
// Say ( Kikuchi , D5a-Yam-1 ) else
9892: LD_EXP 18
9896: PPUSH
9897: LD_STRING D5a-Yam-1
9899: PPUSH
9900: CALL_OW 88
9904: GO 9925
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
9906: LD_INT 1
9908: PPUSH
9909: CALL 600 0 1
9913: PUSH
9914: LD_INT 1
9916: ARRAY
9917: PPUSH
9918: LD_STRING D5a-Sol1-1
9920: PPUSH
9921: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
9925: LD_EXP 9
9929: PPUSH
9930: LD_STRING D5a-JMM-1
9932: PPUSH
9933: CALL_OW 88
// if Cyrus then
9937: LD_EXP 13
9941: IFFALSE 9955
// Say ( Cyrus , D5a-Cyrus-1 ) ;
9943: LD_EXP 13
9947: PPUSH
9948: LD_STRING D5a-Cyrus-1
9950: PPUSH
9951: CALL_OW 88
// x := false ;
9955: LD_ADDR_VAR 0 2
9959: PUSH
9960: LD_INT 0
9962: ST_TO_ADDR
// while ( true ) do
9963: LD_INT 1
9965: IFFALSE 10052
// begin wait ( 0 0$01 ) ;
9967: LD_INT 35
9969: PPUSH
9970: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: LD_INT 30
9984: PUSH
9985: LD_INT 0
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 30
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PUSH
10012: LD_INT 1
10014: DIFF
10015: PUSH
10016: FOR_IN
10017: IFFALSE 10040
// if BaseNeedEnergy ( i ) then
10019: LD_VAR 0 4
10023: PPUSH
10024: CALL 1153 0 1
10028: IFFALSE 10038
// x := true ;
10030: LD_ADDR_VAR 0 2
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
10038: GO 10016
10040: POP
10041: POP
// if x then
10042: LD_VAR 0 2
10046: IFFALSE 10050
// break ;
10048: GO 10052
// end ;
10050: GO 9963
// Say ( JMM , D5b-JMM-1 ) ;
10052: LD_EXP 9
10056: PPUSH
10057: LD_STRING D5b-JMM-1
10059: PPUSH
10060: CALL_OW 88
// end ;
10064: PPOPN 4
10066: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10067: LD_EXP 5
10071: PUSH
10072: LD_INT 1
10074: ARRAY
10075: PUSH
10076: LD_OWVAR 1
10080: LESS
10081: IFFALSE 10281
10083: GO 10085
10085: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10086: LD_INT 16
10088: PPUSH
10089: CALL_OW 301
10093: NOT
10094: IFFALSE 10117
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10096: LD_EXP 19
10100: PPUSH
10101: LD_STRING D3b-Har-3
10103: PPUSH
10104: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10108: LD_STRING M2a
10110: PPUSH
10111: CALL_OW 337
// end else
10115: GO 10136
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10117: LD_EXP 19
10121: PPUSH
10122: LD_STRING D3b-Har-3a
10124: PPUSH
10125: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10129: LD_STRING M2
10131: PPUSH
10132: CALL_OW 337
// end ; can_end := true ;
10136: LD_ADDR_EXP 6
10140: PUSH
10141: LD_INT 1
10143: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10144: LD_INT 9
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL_OW 424
// Wait ( 0 0$02 ) ;
10154: LD_INT 70
10156: PPUSH
10157: CALL_OW 67
// if Lisa then
10161: LD_EXP 14
10165: IFFALSE 10179
// Say ( Lisa , D3b-Lisa ) ;
10167: LD_EXP 14
10171: PPUSH
10172: LD_STRING D3b-Lisa
10174: PPUSH
10175: CALL_OW 88
// if Bobby then
10179: LD_EXP 12
10183: IFFALSE 10197
// Say ( Bobby , D3b-Bobby-3 ) ;
10185: LD_EXP 12
10189: PPUSH
10190: LD_STRING D3b-Bobby-3
10192: PPUSH
10193: CALL_OW 88
// if Cyrus then
10197: LD_EXP 13
10201: IFFALSE 10215
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10203: LD_EXP 13
10207: PPUSH
10208: LD_STRING D3b-Cyrus-3
10210: PPUSH
10211: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10215: LD_EXP 15
10219: PUSH
10220: LD_EXP 15
10224: PPUSH
10225: CALL_OW 255
10229: PUSH
10230: LD_INT 1
10232: EQUAL
10233: AND
10234: IFFALSE 10248
// Say ( Frank , D3b-Frank-3 ) ;
10236: LD_EXP 15
10240: PPUSH
10241: LD_STRING D3b-Frank-3
10243: PPUSH
10244: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10248: LD_EXP 18
10252: PUSH
10253: LD_EXP 18
10257: PPUSH
10258: CALL_OW 255
10262: PUSH
10263: LD_INT 1
10265: EQUAL
10266: AND
10267: IFFALSE 10281
// Say ( Kikuchi , D3b-Yam-4 ) ;
10269: LD_EXP 18
10273: PPUSH
10274: LD_STRING D3b-Yam-4
10276: PPUSH
10277: CALL_OW 88
// end ;
10281: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10282: LD_EXP 5
10286: PUSH
10287: LD_INT 2
10289: ARRAY
10290: PUSH
10291: LD_OWVAR 1
10295: LESS
10296: IFFALSE 10328
10298: GO 10300
10300: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10301: LD_EXP 19
10305: PPUSH
10306: LD_STRING D4-Har-1
10308: PPUSH
10309: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10313: LD_STRING M3
10315: PPUSH
10316: CALL_OW 337
// must_end := true ;
10320: LD_ADDR_EXP 7
10324: PUSH
10325: LD_INT 1
10327: ST_TO_ADDR
// end ;
10328: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10329: LD_EXP 5
10333: PUSH
10334: LD_INT 3
10336: ARRAY
10337: PUSH
10338: LD_OWVAR 1
10342: LESS
10343: IFFALSE 10374
10345: GO 10347
10347: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10348: LD_INT 16
10350: PPUSH
10351: CALL_OW 301
10355: NOT
10356: IFFALSE 10367
// YouLost ( TimeOut1 ) else
10358: LD_STRING TimeOut1
10360: PPUSH
10361: CALL_OW 104
10365: GO 10374
// YouLost ( TimeOut2 ) ;
10367: LD_STRING TimeOut2
10369: PPUSH
10370: CALL_OW 104
// end ;
10374: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10375: LD_EXP 9
10379: PPUSH
10380: LD_INT 9
10382: PPUSH
10383: CALL_OW 308
10387: PUSH
10388: LD_EXP 6
10392: AND
10393: IFFALSE 11493
10395: GO 10397
10397: DISABLE
10398: LD_INT 0
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
// begin wait_on := false ;
10406: LD_ADDR_VAR 0 1
10410: PUSH
10411: LD_INT 0
10413: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10414: LD_INT 1
10416: PPUSH
10417: CALL 1230 0 1
10421: PUSH
10422: LD_INT 0
10424: PLUS
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 9
10431: PPUSH
10432: CALL 1321 0 2
10436: PUSH
10437: LD_INT 1
10439: PPUSH
10440: LD_INT 9
10442: PPUSH
10443: CALL 1368 0 2
10447: ADD
10448: PUSH
10449: LD_INT 0
10451: PLUS
10452: GREATER
10453: IFFALSE 10502
// case Query ( Q1 ) of 1 :
10455: LD_STRING Q1
10457: PPUSH
10458: CALL_OW 97
10462: PUSH
10463: LD_INT 1
10465: DOUBLE
10466: EQUAL
10467: IFTRUE 10471
10469: GO 10482
10471: POP
// wait_on := true ; 2 :
10472: LD_ADDR_VAR 0 1
10476: PUSH
10477: LD_INT 1
10479: ST_TO_ADDR
10480: GO 10502
10482: LD_INT 2
10484: DOUBLE
10485: EQUAL
10486: IFTRUE 10490
10488: GO 10501
10490: POP
// wait_on := false ; end ;
10491: LD_ADDR_VAR 0 1
10495: PUSH
10496: LD_INT 0
10498: ST_TO_ADDR
10499: GO 10502
10501: POP
// repeat wait ( 0 0$01 ) ;
10502: LD_INT 35
10504: PPUSH
10505: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10509: LD_VAR 0 1
10513: NOT
10514: PUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL 1230 0 1
10522: PUSH
10523: LD_INT 0
10525: PLUS
10526: PUSH
10527: LD_INT 1
10529: PPUSH
10530: LD_INT 9
10532: PPUSH
10533: CALL 1321 0 2
10537: PUSH
10538: LD_INT 1
10540: PPUSH
10541: LD_INT 9
10543: PPUSH
10544: CALL 1368 0 2
10548: ADD
10549: PUSH
10550: LD_INT 0
10552: PLUS
10553: EQUAL
10554: OR
10555: IFFALSE 10502
// DialogueOn ;
10557: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10561: LD_EXP 9
10565: PPUSH
10566: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10570: LD_EXP 9
10574: PPUSH
10575: LD_STRING D6-JMM-1
10577: PPUSH
10578: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10582: LD_EXP 19
10586: PPUSH
10587: LD_STRING D6-Har-1
10589: PPUSH
10590: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10594: LD_EXP 9
10598: PPUSH
10599: LD_STRING D6-JMM-2
10601: PPUSH
10602: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10606: LD_EXP 19
10610: PPUSH
10611: LD_STRING D6-Har-2
10613: PPUSH
10614: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10618: LD_EXP 9
10622: PPUSH
10623: LD_STRING D6-JMM-3
10625: PPUSH
10626: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10630: LD_EXP 19
10634: PPUSH
10635: LD_STRING D6-Har-3
10637: PPUSH
10638: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10642: LD_EXP 9
10646: PPUSH
10647: LD_STRING D6-JMM-4
10649: PPUSH
10650: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10654: LD_EXP 19
10658: PPUSH
10659: LD_STRING D6-Har-4
10661: PPUSH
10662: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10666: LD_EXP 9
10670: PPUSH
10671: LD_STRING D6-JMM-5
10673: PPUSH
10674: CALL_OW 88
// DialogueOff ;
10678: CALL_OW 7
// m1 := false ;
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_INT 0
10689: ST_TO_ADDR
// m2 := false ;
10690: LD_ADDR_VAR 0 5
10694: PUSH
10695: LD_INT 0
10697: ST_TO_ADDR
// m3 := false ;
10698: LD_ADDR_VAR 0 6
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10706: LD_ADDR_VAR 0 3
10710: PUSH
10711: LD_INT 3
10713: PPUSH
10714: CALL 1499 0 1
10718: ST_TO_ADDR
// if tmp >= 35 then
10719: LD_VAR 0 3
10723: PUSH
10724: LD_INT 35
10726: GREATEREQUAL
10727: IFFALSE 10764
// begin AddMedal ( Destroy1 , - 1 ) ;
10729: LD_STRING Destroy1
10731: PPUSH
10732: LD_INT 1
10734: NEG
10735: PPUSH
10736: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10740: LD_STRING Destroy2
10742: PPUSH
10743: LD_INT 1
10745: NEG
10746: PPUSH
10747: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10751: LD_STRING Destroy3
10753: PPUSH
10754: LD_INT 1
10756: NEG
10757: PPUSH
10758: CALL_OW 101
// end else
10762: GO 10875
// begin AddMedal ( Destroy1 , 1 ) ;
10764: LD_STRING Destroy1
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 101
// m1 := true ;
10774: LD_ADDR_VAR 0 4
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if tmp >= 25 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 25
10789: GREATEREQUAL
10790: IFFALSE 10816
// begin AddMedal ( Destroy2 , - 1 ) ;
10792: LD_STRING Destroy2
10794: PPUSH
10795: LD_INT 1
10797: NEG
10798: PPUSH
10799: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10803: LD_STRING Destroy3
10805: PPUSH
10806: LD_INT 1
10808: NEG
10809: PPUSH
10810: CALL_OW 101
// end else
10814: GO 10875
// begin AddMedal ( Destroy2 , 1 ) ;
10816: LD_STRING Destroy2
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 101
// m2 := true ;
10826: LD_ADDR_VAR 0 5
10830: PUSH
10831: LD_INT 1
10833: ST_TO_ADDR
// if tmp >= 15 then
10834: LD_VAR 0 3
10838: PUSH
10839: LD_INT 15
10841: GREATEREQUAL
10842: IFFALSE 10857
// AddMedal ( Destroy3 , - 1 ) else
10844: LD_STRING Destroy3
10846: PPUSH
10847: LD_INT 1
10849: NEG
10850: PPUSH
10851: CALL_OW 101
10855: GO 10875
// begin AddMedal ( Destroy3 , 1 ) ;
10857: LD_STRING Destroy3
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 101
// m3 := true ;
10867: LD_ADDR_VAR 0 6
10871: PUSH
10872: LD_INT 1
10874: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
10875: LD_OWVAR 1
10879: PUSH
10880: LD_INT 67200
10882: LESSEQUAL
10883: IFFALSE 10892
// SetAchievement ( ACH_ASPEED_7 ) ;
10885: LD_STRING ACH_ASPEED_7
10887: PPUSH
10888: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
10892: LD_VAR 0 4
10896: PUSH
10897: LD_VAR 0 5
10901: AND
10902: PUSH
10903: LD_VAR 0 6
10907: AND
10908: PUSH
10909: LD_OWVAR 67
10913: PUSH
10914: LD_INT 3
10916: GREATEREQUAL
10917: AND
10918: IFFALSE 10930
// SetAchievementEX ( ACH_AMER , 7 ) ;
10920: LD_STRING ACH_AMER
10922: PPUSH
10923: LD_INT 7
10925: PPUSH
10926: CALL_OW 564
// GiveMedals ( MAIN ) ;
10930: LD_STRING MAIN
10932: PPUSH
10933: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
10937: LD_ADDR_VAR 0 3
10941: PUSH
10942: LD_INT 1
10944: PPUSH
10945: LD_INT 9
10947: PPUSH
10948: CALL 1321 0 2
10952: PUSH
10953: LD_INT 1
10955: PPUSH
10956: LD_INT 9
10958: PPUSH
10959: CALL 1368 0 2
10963: UNION
10964: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10965: LD_VAR 0 3
10969: PPUSH
10970: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10974: LD_EXP 9
10978: PPUSH
10979: LD_EXP 3
10983: PUSH
10984: LD_STRING JMM
10986: STR
10987: PPUSH
10988: CALL_OW 38
// if Brown in tmp then
10992: LD_EXP 10
10996: PUSH
10997: LD_VAR 0 3
11001: IN
11002: IFFALSE 11022
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11004: LD_EXP 10
11008: PPUSH
11009: LD_EXP 3
11013: PUSH
11014: LD_STRING Brown
11016: STR
11017: PPUSH
11018: CALL_OW 38
// if Donaldson in tmp then
11022: LD_EXP 11
11026: PUSH
11027: LD_VAR 0 3
11031: IN
11032: IFFALSE 11052
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11034: LD_EXP 11
11038: PPUSH
11039: LD_EXP 3
11043: PUSH
11044: LD_STRING Donaldson
11046: STR
11047: PPUSH
11048: CALL_OW 38
// if Bobby in tmp then
11052: LD_EXP 12
11056: PUSH
11057: LD_VAR 0 3
11061: IN
11062: IFFALSE 11082
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11064: LD_EXP 12
11068: PPUSH
11069: LD_EXP 3
11073: PUSH
11074: LD_STRING Bobby
11076: STR
11077: PPUSH
11078: CALL_OW 38
// if Cyrus in tmp then
11082: LD_EXP 13
11086: PUSH
11087: LD_VAR 0 3
11091: IN
11092: IFFALSE 11112
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11094: LD_EXP 13
11098: PPUSH
11099: LD_EXP 3
11103: PUSH
11104: LD_STRING Cyrus
11106: STR
11107: PPUSH
11108: CALL_OW 38
// if Lisa in tmp then
11112: LD_EXP 14
11116: PUSH
11117: LD_VAR 0 3
11121: IN
11122: IFFALSE 11142
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11124: LD_EXP 14
11128: PPUSH
11129: LD_EXP 3
11133: PUSH
11134: LD_STRING Lisa
11136: STR
11137: PPUSH
11138: CALL_OW 38
// if Frank in tmp then
11142: LD_EXP 15
11146: PUSH
11147: LD_VAR 0 3
11151: IN
11152: IFFALSE 11172
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11154: LD_EXP 15
11158: PPUSH
11159: LD_EXP 3
11163: PUSH
11164: LD_STRING Frank
11166: STR
11167: PPUSH
11168: CALL_OW 38
// if Gladstone in tmp then
11172: LD_EXP 16
11176: PUSH
11177: LD_VAR 0 3
11181: IN
11182: IFFALSE 11202
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11184: LD_EXP 16
11188: PPUSH
11189: LD_EXP 3
11193: PUSH
11194: LD_STRING Gladstone
11196: STR
11197: PPUSH
11198: CALL_OW 38
// if Khatam in tmp then
11202: LD_EXP 17
11206: PUSH
11207: LD_VAR 0 3
11211: IN
11212: IFFALSE 11232
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11214: LD_EXP 17
11218: PPUSH
11219: LD_EXP 3
11223: PUSH
11224: LD_STRING Khatam
11226: STR
11227: PPUSH
11228: CALL_OW 38
// if Kikuchi in tmp then
11232: LD_EXP 18
11236: PUSH
11237: LD_VAR 0 3
11241: IN
11242: IFFALSE 11262
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11244: LD_EXP 18
11248: PPUSH
11249: LD_EXP 3
11253: PUSH
11254: LD_STRING Kikuchi
11256: STR
11257: PPUSH
11258: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11262: LD_VAR 0 3
11266: PUSH
11267: LD_EXP 9
11271: PUSH
11272: LD_EXP 10
11276: PUSH
11277: LD_EXP 11
11281: PUSH
11282: LD_EXP 12
11286: PUSH
11287: LD_EXP 13
11291: PUSH
11292: LD_EXP 14
11296: PUSH
11297: LD_EXP 15
11301: PUSH
11302: LD_EXP 16
11306: PUSH
11307: LD_EXP 18
11311: PUSH
11312: LD_EXP 17
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: DIFF
11329: PPUSH
11330: LD_EXP 3
11334: PUSH
11335: LD_STRING others
11337: STR
11338: PPUSH
11339: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11343: LD_OWVAR 1
11347: PPUSH
11348: LD_STRING 07_time
11350: PPUSH
11351: CALL_OW 39
// tmp := [ ] ;
11355: LD_ADDR_VAR 0 3
11359: PUSH
11360: EMPTY
11361: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11362: LD_ADDR_VAR 0 2
11366: PUSH
11367: LD_INT 9
11369: PPUSH
11370: LD_INT 22
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 23
11382: PUSH
11383: LD_INT 1
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 21
11392: PUSH
11393: LD_INT 2
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: PPUSH
11408: CALL_OW 70
11412: PUSH
11413: FOR_IN
11414: IFFALSE 11475
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11416: LD_ADDR_VAR 0 3
11420: PUSH
11421: LD_VAR 0 3
11425: PUSH
11426: LD_VAR 0 2
11430: PPUSH
11431: CALL_OW 265
11435: PUSH
11436: LD_VAR 0 2
11440: PPUSH
11441: CALL_OW 262
11445: PUSH
11446: LD_VAR 0 2
11450: PPUSH
11451: CALL_OW 263
11455: PUSH
11456: LD_VAR 0 2
11460: PPUSH
11461: CALL_OW 264
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: ADD
11472: ST_TO_ADDR
11473: GO 11413
11475: POP
11476: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_STRING 07_vehicles
11484: PPUSH
11485: CALL_OW 39
// YouWin ;
11489: CALL_OW 103
// end ; end_of_file
11493: PPOPN 6
11495: END
// on UnitDestroyed ( un ) do begin if un = JMM then
11496: LD_VAR 0 1
11500: PUSH
11501: LD_EXP 9
11505: EQUAL
11506: IFFALSE 11515
// YouLost ( JMM ) ;
11508: LD_STRING JMM
11510: PPUSH
11511: CALL_OW 104
// if GetType ( un ) = unit_building then
11515: LD_VAR 0 1
11519: PPUSH
11520: CALL_OW 247
11524: PUSH
11525: LD_INT 3
11527: EQUAL
11528: IFFALSE 11544
// buildings_counter := buildings_counter + 1 ;
11530: LD_ADDR_EXP 4
11534: PUSH
11535: LD_EXP 4
11539: PUSH
11540: LD_INT 1
11542: PLUS
11543: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11544: LD_VAR 0 1
11548: PUSH
11549: LD_INT 6
11551: PPUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 30
11557: PUSH
11558: LD_INT 33
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 30
11567: PUSH
11568: LD_INT 32
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: PPUSH
11580: CALL_OW 70
11584: IN
11585: IFFALSE 11644
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11587: LD_ADDR_EXP 20
11591: PUSH
11592: LD_EXP 20
11596: PUSH
11597: LD_VAR 0 1
11601: PPUSH
11602: CALL_OW 266
11606: PUSH
11607: LD_VAR 0 1
11611: PPUSH
11612: CALL_OW 250
11616: PUSH
11617: LD_VAR 0 1
11621: PPUSH
11622: CALL_OW 251
11626: PUSH
11627: LD_VAR 0 1
11631: PPUSH
11632: CALL_OW 254
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: ADD
11643: ST_TO_ADDR
// if un = ru_dep_main then
11644: LD_VAR 0 1
11648: PUSH
11649: LD_INT 16
11651: EQUAL
11652: IFFALSE 11661
// ChangeMissionObjectives ( M1a ) ;
11654: LD_STRING M1a
11656: PPUSH
11657: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11661: LD_VAR 0 1
11665: PPUSH
11666: CALL_OW 247
11670: PUSH
11671: LD_INT 1
11673: EQUAL
11674: PUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 255
11684: PUSH
11685: LD_INT 3
11687: EQUAL
11688: AND
11689: IFFALSE 11705
// kill_counter := kill_counter + 1 ;
11691: LD_ADDR_EXP 8
11695: PUSH
11696: LD_EXP 8
11700: PUSH
11701: LD_INT 1
11703: PLUS
11704: ST_TO_ADDR
// end ;
11705: PPOPN 1
11707: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11708: LD_VAR 0 1
11712: PPUSH
11713: CALL_OW 266
11717: PUSH
11718: LD_INT 32
11720: EQUAL
11721: PUSH
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 110
11731: PUSH
11732: LD_INT 7
11734: EQUAL
11735: AND
11736: IFFALSE 11750
// SetTag ( un , 0 ) ;
11738: LD_VAR 0 1
11742: PPUSH
11743: LD_INT 0
11745: PPUSH
11746: CALL_OW 109
// end ;
11750: PPOPN 1
11752: END
// on BuildingStarted ( b , builder ) do var i ;
11753: LD_INT 0
11755: PPUSH
// begin if GetSide ( b ) = 3 then
11756: LD_VAR 0 1
11760: PPUSH
11761: CALL_OW 255
11765: PUSH
11766: LD_INT 3
11768: EQUAL
11769: IFFALSE 11809
// for i = 1 to 4 do
11771: LD_ADDR_VAR 0 3
11775: PUSH
11776: DOUBLE
11777: LD_INT 1
11779: DEC
11780: ST_TO_ADDR
11781: LD_INT 4
11783: PUSH
11784: FOR_TO
11785: IFFALSE 11807
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11787: LD_ADDR_EXP 20
11791: PUSH
11792: LD_EXP 20
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL_OW 3
11804: ST_TO_ADDR
11805: GO 11784
11807: POP
11808: POP
// end ;
11809: PPOPN 3
11811: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11812: LD_VAR 0 1
11816: PPUSH
11817: CALL_OW 266
11821: PUSH
11822: LD_INT 32
11824: PUSH
11825: LD_INT 33
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: IN
11832: IFFALSE 11846
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11834: LD_VAR 0 1
11838: PPUSH
11839: LD_INT 43
11841: PPUSH
11842: CALL_OW 148
11846: PPOPN 1
11848: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
11849: LD_VAR 0 1
11853: PUSH
11854: LD_INT 22
11856: PUSH
11857: LD_INT 3
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: LD_INT 30
11869: PUSH
11870: LD_INT 31
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 30
11879: PUSH
11880: LD_INT 32
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 69
11900: IN
11901: IFFALSE 11923
// GoToAnotherTower ( un , b , 143 , 143 ) ;
11903: LD_VAR 0 2
11907: PPUSH
11908: LD_VAR 0 1
11912: PPUSH
11913: LD_INT 143
11915: PPUSH
11916: LD_INT 143
11918: PPUSH
11919: CALL 830 0 4
// end ;
11923: PPOPN 2
11925: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
11926: LD_VAR 0 1
11930: PUSH
11931: LD_INT 22
11933: PUSH
11934: LD_INT 3
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 30
11943: PUSH
11944: LD_INT 32
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: IN
11960: IFFALSE 11974
// SetTag ( b , 0 ) ;
11962: LD_VAR 0 1
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL_OW 109
// end ; end_of_file
11974: PPOPN 2
11976: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11977: LD_INT 0
11979: PPUSH
// ar_miner := 81 ;
11980: LD_ADDR_EXP 28
11984: PUSH
11985: LD_INT 81
11987: ST_TO_ADDR
// ar_crane := 88 ;
11988: LD_ADDR_EXP 27
11992: PUSH
11993: LD_INT 88
11995: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11996: LD_ADDR_EXP 22
12000: PUSH
12001: LD_INT 89
12003: ST_TO_ADDR
// us_hack := 99 ;
12004: LD_ADDR_EXP 23
12008: PUSH
12009: LD_INT 99
12011: ST_TO_ADDR
// us_artillery := 97 ;
12012: LD_ADDR_EXP 24
12016: PUSH
12017: LD_INT 97
12019: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12020: LD_ADDR_EXP 25
12024: PUSH
12025: LD_INT 91
12027: ST_TO_ADDR
// ar_mortar := 92 ;
12028: LD_ADDR_EXP 26
12032: PUSH
12033: LD_INT 92
12035: ST_TO_ADDR
// ru_radar := 98 ;
12036: LD_ADDR_EXP 21
12040: PUSH
12041: LD_INT 98
12043: ST_TO_ADDR
// tech_Artillery := 80 ;
12044: LD_ADDR_EXP 29
12048: PUSH
12049: LD_INT 80
12051: ST_TO_ADDR
// tech_RadMat := 81 ;
12052: LD_ADDR_EXP 30
12056: PUSH
12057: LD_INT 81
12059: ST_TO_ADDR
// tech_BasicTools := 82 ;
12060: LD_ADDR_EXP 31
12064: PUSH
12065: LD_INT 82
12067: ST_TO_ADDR
// tech_Cargo := 83 ;
12068: LD_ADDR_EXP 32
12072: PUSH
12073: LD_INT 83
12075: ST_TO_ADDR
// tech_Track := 84 ;
12076: LD_ADDR_EXP 33
12080: PUSH
12081: LD_INT 84
12083: ST_TO_ADDR
// tech_Crane := 85 ;
12084: LD_ADDR_EXP 34
12088: PUSH
12089: LD_INT 85
12091: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12092: LD_ADDR_EXP 35
12096: PUSH
12097: LD_INT 86
12099: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12100: LD_ADDR_EXP 36
12104: PUSH
12105: LD_INT 87
12107: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12108: LD_ADDR_EXP 37
12112: PUSH
12113: LD_INT 88
12115: ST_TO_ADDR
// class_mastodont := 31 ;
12116: LD_ADDR_EXP 38
12120: PUSH
12121: LD_INT 31
12123: ST_TO_ADDR
// class_horse := 21 ;
12124: LD_ADDR_EXP 39
12128: PUSH
12129: LD_INT 21
12131: ST_TO_ADDR
// end ;
12132: LD_VAR 0 1
12136: RET
// every 1 do
12137: GO 12139
12139: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12140: CALL 11977 0 0
12144: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12145: LD_INT 0
12147: PPUSH
// if p2 = 100 then
12148: LD_VAR 0 2
12152: PUSH
12153: LD_INT 100
12155: EQUAL
12156: IFFALSE 13105
// begin if not StreamModeActive then
12158: LD_EXP 40
12162: NOT
12163: IFFALSE 12173
// StreamModeActive := true ;
12165: LD_ADDR_EXP 40
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// if p3 = 0 then
12173: LD_VAR 0 3
12177: PUSH
12178: LD_INT 0
12180: EQUAL
12181: IFFALSE 12187
// InitStreamMode ;
12183: CALL 13265 0 0
// if p3 = 1 then
12187: LD_VAR 0 3
12191: PUSH
12192: LD_INT 1
12194: EQUAL
12195: IFFALSE 12205
// sRocket := true ;
12197: LD_ADDR_EXP 45
12201: PUSH
12202: LD_INT 1
12204: ST_TO_ADDR
// if p3 = 2 then
12205: LD_VAR 0 3
12209: PUSH
12210: LD_INT 2
12212: EQUAL
12213: IFFALSE 12223
// sSpeed := true ;
12215: LD_ADDR_EXP 44
12219: PUSH
12220: LD_INT 1
12222: ST_TO_ADDR
// if p3 = 3 then
12223: LD_VAR 0 3
12227: PUSH
12228: LD_INT 3
12230: EQUAL
12231: IFFALSE 12241
// sEngine := true ;
12233: LD_ADDR_EXP 46
12237: PUSH
12238: LD_INT 1
12240: ST_TO_ADDR
// if p3 = 4 then
12241: LD_VAR 0 3
12245: PUSH
12246: LD_INT 4
12248: EQUAL
12249: IFFALSE 12259
// sSpec := true ;
12251: LD_ADDR_EXP 43
12255: PUSH
12256: LD_INT 1
12258: ST_TO_ADDR
// if p3 = 5 then
12259: LD_VAR 0 3
12263: PUSH
12264: LD_INT 5
12266: EQUAL
12267: IFFALSE 12277
// sLevel := true ;
12269: LD_ADDR_EXP 47
12273: PUSH
12274: LD_INT 1
12276: ST_TO_ADDR
// if p3 = 6 then
12277: LD_VAR 0 3
12281: PUSH
12282: LD_INT 6
12284: EQUAL
12285: IFFALSE 12295
// sArmoury := true ;
12287: LD_ADDR_EXP 48
12291: PUSH
12292: LD_INT 1
12294: ST_TO_ADDR
// if p3 = 7 then
12295: LD_VAR 0 3
12299: PUSH
12300: LD_INT 7
12302: EQUAL
12303: IFFALSE 12313
// sRadar := true ;
12305: LD_ADDR_EXP 49
12309: PUSH
12310: LD_INT 1
12312: ST_TO_ADDR
// if p3 = 8 then
12313: LD_VAR 0 3
12317: PUSH
12318: LD_INT 8
12320: EQUAL
12321: IFFALSE 12331
// sBunker := true ;
12323: LD_ADDR_EXP 50
12327: PUSH
12328: LD_INT 1
12330: ST_TO_ADDR
// if p3 = 9 then
12331: LD_VAR 0 3
12335: PUSH
12336: LD_INT 9
12338: EQUAL
12339: IFFALSE 12349
// sHack := true ;
12341: LD_ADDR_EXP 51
12345: PUSH
12346: LD_INT 1
12348: ST_TO_ADDR
// if p3 = 10 then
12349: LD_VAR 0 3
12353: PUSH
12354: LD_INT 10
12356: EQUAL
12357: IFFALSE 12367
// sFire := true ;
12359: LD_ADDR_EXP 52
12363: PUSH
12364: LD_INT 1
12366: ST_TO_ADDR
// if p3 = 11 then
12367: LD_VAR 0 3
12371: PUSH
12372: LD_INT 11
12374: EQUAL
12375: IFFALSE 12385
// sRefresh := true ;
12377: LD_ADDR_EXP 53
12381: PUSH
12382: LD_INT 1
12384: ST_TO_ADDR
// if p3 = 12 then
12385: LD_VAR 0 3
12389: PUSH
12390: LD_INT 12
12392: EQUAL
12393: IFFALSE 12403
// sExp := true ;
12395: LD_ADDR_EXP 54
12399: PUSH
12400: LD_INT 1
12402: ST_TO_ADDR
// if p3 = 13 then
12403: LD_VAR 0 3
12407: PUSH
12408: LD_INT 13
12410: EQUAL
12411: IFFALSE 12421
// sDepot := true ;
12413: LD_ADDR_EXP 55
12417: PUSH
12418: LD_INT 1
12420: ST_TO_ADDR
// if p3 = 14 then
12421: LD_VAR 0 3
12425: PUSH
12426: LD_INT 14
12428: EQUAL
12429: IFFALSE 12439
// sFlag := true ;
12431: LD_ADDR_EXP 56
12435: PUSH
12436: LD_INT 1
12438: ST_TO_ADDR
// if p3 = 15 then
12439: LD_VAR 0 3
12443: PUSH
12444: LD_INT 15
12446: EQUAL
12447: IFFALSE 12457
// sKamikadze := true ;
12449: LD_ADDR_EXP 64
12453: PUSH
12454: LD_INT 1
12456: ST_TO_ADDR
// if p3 = 16 then
12457: LD_VAR 0 3
12461: PUSH
12462: LD_INT 16
12464: EQUAL
12465: IFFALSE 12475
// sTroll := true ;
12467: LD_ADDR_EXP 65
12471: PUSH
12472: LD_INT 1
12474: ST_TO_ADDR
// if p3 = 17 then
12475: LD_VAR 0 3
12479: PUSH
12480: LD_INT 17
12482: EQUAL
12483: IFFALSE 12493
// sSlow := true ;
12485: LD_ADDR_EXP 66
12489: PUSH
12490: LD_INT 1
12492: ST_TO_ADDR
// if p3 = 18 then
12493: LD_VAR 0 3
12497: PUSH
12498: LD_INT 18
12500: EQUAL
12501: IFFALSE 12511
// sLack := true ;
12503: LD_ADDR_EXP 67
12507: PUSH
12508: LD_INT 1
12510: ST_TO_ADDR
// if p3 = 19 then
12511: LD_VAR 0 3
12515: PUSH
12516: LD_INT 19
12518: EQUAL
12519: IFFALSE 12529
// sTank := true ;
12521: LD_ADDR_EXP 69
12525: PUSH
12526: LD_INT 1
12528: ST_TO_ADDR
// if p3 = 20 then
12529: LD_VAR 0 3
12533: PUSH
12534: LD_INT 20
12536: EQUAL
12537: IFFALSE 12547
// sRemote := true ;
12539: LD_ADDR_EXP 70
12543: PUSH
12544: LD_INT 1
12546: ST_TO_ADDR
// if p3 = 21 then
12547: LD_VAR 0 3
12551: PUSH
12552: LD_INT 21
12554: EQUAL
12555: IFFALSE 12565
// sPowell := true ;
12557: LD_ADDR_EXP 71
12561: PUSH
12562: LD_INT 1
12564: ST_TO_ADDR
// if p3 = 22 then
12565: LD_VAR 0 3
12569: PUSH
12570: LD_INT 22
12572: EQUAL
12573: IFFALSE 12583
// sTeleport := true ;
12575: LD_ADDR_EXP 74
12579: PUSH
12580: LD_INT 1
12582: ST_TO_ADDR
// if p3 = 23 then
12583: LD_VAR 0 3
12587: PUSH
12588: LD_INT 23
12590: EQUAL
12591: IFFALSE 12601
// sOilTower := true ;
12593: LD_ADDR_EXP 76
12597: PUSH
12598: LD_INT 1
12600: ST_TO_ADDR
// if p3 = 24 then
12601: LD_VAR 0 3
12605: PUSH
12606: LD_INT 24
12608: EQUAL
12609: IFFALSE 12619
// sShovel := true ;
12611: LD_ADDR_EXP 77
12615: PUSH
12616: LD_INT 1
12618: ST_TO_ADDR
// if p3 = 25 then
12619: LD_VAR 0 3
12623: PUSH
12624: LD_INT 25
12626: EQUAL
12627: IFFALSE 12637
// sSheik := true ;
12629: LD_ADDR_EXP 78
12633: PUSH
12634: LD_INT 1
12636: ST_TO_ADDR
// if p3 = 26 then
12637: LD_VAR 0 3
12641: PUSH
12642: LD_INT 26
12644: EQUAL
12645: IFFALSE 12655
// sEarthquake := true ;
12647: LD_ADDR_EXP 80
12651: PUSH
12652: LD_INT 1
12654: ST_TO_ADDR
// if p3 = 27 then
12655: LD_VAR 0 3
12659: PUSH
12660: LD_INT 27
12662: EQUAL
12663: IFFALSE 12673
// sAI := true ;
12665: LD_ADDR_EXP 81
12669: PUSH
12670: LD_INT 1
12672: ST_TO_ADDR
// if p3 = 28 then
12673: LD_VAR 0 3
12677: PUSH
12678: LD_INT 28
12680: EQUAL
12681: IFFALSE 12691
// sCargo := true ;
12683: LD_ADDR_EXP 84
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// if p3 = 29 then
12691: LD_VAR 0 3
12695: PUSH
12696: LD_INT 29
12698: EQUAL
12699: IFFALSE 12709
// sDLaser := true ;
12701: LD_ADDR_EXP 85
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// if p3 = 30 then
12709: LD_VAR 0 3
12713: PUSH
12714: LD_INT 30
12716: EQUAL
12717: IFFALSE 12727
// sExchange := true ;
12719: LD_ADDR_EXP 86
12723: PUSH
12724: LD_INT 1
12726: ST_TO_ADDR
// if p3 = 31 then
12727: LD_VAR 0 3
12731: PUSH
12732: LD_INT 31
12734: EQUAL
12735: IFFALSE 12745
// sFac := true ;
12737: LD_ADDR_EXP 87
12741: PUSH
12742: LD_INT 1
12744: ST_TO_ADDR
// if p3 = 32 then
12745: LD_VAR 0 3
12749: PUSH
12750: LD_INT 32
12752: EQUAL
12753: IFFALSE 12763
// sPower := true ;
12755: LD_ADDR_EXP 88
12759: PUSH
12760: LD_INT 1
12762: ST_TO_ADDR
// if p3 = 33 then
12763: LD_VAR 0 3
12767: PUSH
12768: LD_INT 33
12770: EQUAL
12771: IFFALSE 12781
// sRandom := true ;
12773: LD_ADDR_EXP 89
12777: PUSH
12778: LD_INT 1
12780: ST_TO_ADDR
// if p3 = 34 then
12781: LD_VAR 0 3
12785: PUSH
12786: LD_INT 34
12788: EQUAL
12789: IFFALSE 12799
// sShield := true ;
12791: LD_ADDR_EXP 90
12795: PUSH
12796: LD_INT 1
12798: ST_TO_ADDR
// if p3 = 35 then
12799: LD_VAR 0 3
12803: PUSH
12804: LD_INT 35
12806: EQUAL
12807: IFFALSE 12817
// sTime := true ;
12809: LD_ADDR_EXP 91
12813: PUSH
12814: LD_INT 1
12816: ST_TO_ADDR
// if p3 = 36 then
12817: LD_VAR 0 3
12821: PUSH
12822: LD_INT 36
12824: EQUAL
12825: IFFALSE 12835
// sTools := true ;
12827: LD_ADDR_EXP 92
12831: PUSH
12832: LD_INT 1
12834: ST_TO_ADDR
// if p3 = 101 then
12835: LD_VAR 0 3
12839: PUSH
12840: LD_INT 101
12842: EQUAL
12843: IFFALSE 12853
// sSold := true ;
12845: LD_ADDR_EXP 57
12849: PUSH
12850: LD_INT 1
12852: ST_TO_ADDR
// if p3 = 102 then
12853: LD_VAR 0 3
12857: PUSH
12858: LD_INT 102
12860: EQUAL
12861: IFFALSE 12871
// sDiff := true ;
12863: LD_ADDR_EXP 58
12867: PUSH
12868: LD_INT 1
12870: ST_TO_ADDR
// if p3 = 103 then
12871: LD_VAR 0 3
12875: PUSH
12876: LD_INT 103
12878: EQUAL
12879: IFFALSE 12889
// sFog := true ;
12881: LD_ADDR_EXP 61
12885: PUSH
12886: LD_INT 1
12888: ST_TO_ADDR
// if p3 = 104 then
12889: LD_VAR 0 3
12893: PUSH
12894: LD_INT 104
12896: EQUAL
12897: IFFALSE 12907
// sReset := true ;
12899: LD_ADDR_EXP 62
12903: PUSH
12904: LD_INT 1
12906: ST_TO_ADDR
// if p3 = 105 then
12907: LD_VAR 0 3
12911: PUSH
12912: LD_INT 105
12914: EQUAL
12915: IFFALSE 12925
// sSun := true ;
12917: LD_ADDR_EXP 63
12921: PUSH
12922: LD_INT 1
12924: ST_TO_ADDR
// if p3 = 106 then
12925: LD_VAR 0 3
12929: PUSH
12930: LD_INT 106
12932: EQUAL
12933: IFFALSE 12943
// sTiger := true ;
12935: LD_ADDR_EXP 59
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
// if p3 = 107 then
12943: LD_VAR 0 3
12947: PUSH
12948: LD_INT 107
12950: EQUAL
12951: IFFALSE 12961
// sBomb := true ;
12953: LD_ADDR_EXP 60
12957: PUSH
12958: LD_INT 1
12960: ST_TO_ADDR
// if p3 = 108 then
12961: LD_VAR 0 3
12965: PUSH
12966: LD_INT 108
12968: EQUAL
12969: IFFALSE 12979
// sWound := true ;
12971: LD_ADDR_EXP 68
12975: PUSH
12976: LD_INT 1
12978: ST_TO_ADDR
// if p3 = 109 then
12979: LD_VAR 0 3
12983: PUSH
12984: LD_INT 109
12986: EQUAL
12987: IFFALSE 12997
// sBetray := true ;
12989: LD_ADDR_EXP 72
12993: PUSH
12994: LD_INT 1
12996: ST_TO_ADDR
// if p3 = 110 then
12997: LD_VAR 0 3
13001: PUSH
13002: LD_INT 110
13004: EQUAL
13005: IFFALSE 13015
// sContamin := true ;
13007: LD_ADDR_EXP 73
13011: PUSH
13012: LD_INT 1
13014: ST_TO_ADDR
// if p3 = 111 then
13015: LD_VAR 0 3
13019: PUSH
13020: LD_INT 111
13022: EQUAL
13023: IFFALSE 13033
// sOil := true ;
13025: LD_ADDR_EXP 75
13029: PUSH
13030: LD_INT 1
13032: ST_TO_ADDR
// if p3 = 112 then
13033: LD_VAR 0 3
13037: PUSH
13038: LD_INT 112
13040: EQUAL
13041: IFFALSE 13051
// sStu := true ;
13043: LD_ADDR_EXP 79
13047: PUSH
13048: LD_INT 1
13050: ST_TO_ADDR
// if p3 = 113 then
13051: LD_VAR 0 3
13055: PUSH
13056: LD_INT 113
13058: EQUAL
13059: IFFALSE 13069
// sBazooka := true ;
13061: LD_ADDR_EXP 82
13065: PUSH
13066: LD_INT 1
13068: ST_TO_ADDR
// if p3 = 114 then
13069: LD_VAR 0 3
13073: PUSH
13074: LD_INT 114
13076: EQUAL
13077: IFFALSE 13087
// sMortar := true ;
13079: LD_ADDR_EXP 83
13083: PUSH
13084: LD_INT 1
13086: ST_TO_ADDR
// if p3 = 115 then
13087: LD_VAR 0 3
13091: PUSH
13092: LD_INT 115
13094: EQUAL
13095: IFFALSE 13105
// sRanger := true ;
13097: LD_ADDR_EXP 93
13101: PUSH
13102: LD_INT 1
13104: ST_TO_ADDR
// end ; if p2 = 101 then
13105: LD_VAR 0 2
13109: PUSH
13110: LD_INT 101
13112: EQUAL
13113: IFFALSE 13241
// begin case p3 of 1 :
13115: LD_VAR 0 3
13119: PUSH
13120: LD_INT 1
13122: DOUBLE
13123: EQUAL
13124: IFTRUE 13128
13126: GO 13135
13128: POP
// hHackUnlimitedResources ; 2 :
13129: CALL 24278 0 0
13133: GO 13241
13135: LD_INT 2
13137: DOUBLE
13138: EQUAL
13139: IFTRUE 13143
13141: GO 13150
13143: POP
// hHackSetLevel10 ; 3 :
13144: CALL 24411 0 0
13148: GO 13241
13150: LD_INT 3
13152: DOUBLE
13153: EQUAL
13154: IFTRUE 13158
13156: GO 13165
13158: POP
// hHackSetLevel10YourUnits ; 4 :
13159: CALL 24496 0 0
13163: GO 13241
13165: LD_INT 4
13167: DOUBLE
13168: EQUAL
13169: IFTRUE 13173
13171: GO 13180
13173: POP
// hHackInvincible ; 5 :
13174: CALL 24944 0 0
13178: GO 13241
13180: LD_INT 5
13182: DOUBLE
13183: EQUAL
13184: IFTRUE 13188
13186: GO 13195
13188: POP
// hHackInvisible ; 6 :
13189: CALL 25055 0 0
13193: GO 13241
13195: LD_INT 6
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13210
13203: POP
// hHackChangeYourSide ; 7 :
13204: CALL 25112 0 0
13208: GO 13241
13210: LD_INT 7
13212: DOUBLE
13213: EQUAL
13214: IFTRUE 13218
13216: GO 13225
13218: POP
// hHackChangeUnitSide ; 8 :
13219: CALL 25154 0 0
13223: GO 13241
13225: LD_INT 8
13227: DOUBLE
13228: EQUAL
13229: IFTRUE 13233
13231: GO 13240
13233: POP
// hHackFog ; end ;
13234: CALL 25255 0 0
13238: GO 13241
13240: POP
// end ; end ;
13241: LD_VAR 0 7
13245: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13246: GO 13248
13248: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13249: LD_STRING initStreamRollete();
13251: PPUSH
13252: CALL_OW 559
// InitStreamMode ;
13256: CALL 13265 0 0
// DefineStreamItems ( ) ;
13260: CALL 13705 0 0
// end ;
13264: END
// function InitStreamMode ; begin
13265: LD_INT 0
13267: PPUSH
// streamModeActive := false ;
13268: LD_ADDR_EXP 40
13272: PUSH
13273: LD_INT 0
13275: ST_TO_ADDR
// normalCounter := 36 ;
13276: LD_ADDR_EXP 41
13280: PUSH
13281: LD_INT 36
13283: ST_TO_ADDR
// hardcoreCounter := 16 ;
13284: LD_ADDR_EXP 42
13288: PUSH
13289: LD_INT 16
13291: ST_TO_ADDR
// sRocket := false ;
13292: LD_ADDR_EXP 45
13296: PUSH
13297: LD_INT 0
13299: ST_TO_ADDR
// sSpeed := false ;
13300: LD_ADDR_EXP 44
13304: PUSH
13305: LD_INT 0
13307: ST_TO_ADDR
// sEngine := false ;
13308: LD_ADDR_EXP 46
13312: PUSH
13313: LD_INT 0
13315: ST_TO_ADDR
// sSpec := false ;
13316: LD_ADDR_EXP 43
13320: PUSH
13321: LD_INT 0
13323: ST_TO_ADDR
// sLevel := false ;
13324: LD_ADDR_EXP 47
13328: PUSH
13329: LD_INT 0
13331: ST_TO_ADDR
// sArmoury := false ;
13332: LD_ADDR_EXP 48
13336: PUSH
13337: LD_INT 0
13339: ST_TO_ADDR
// sRadar := false ;
13340: LD_ADDR_EXP 49
13344: PUSH
13345: LD_INT 0
13347: ST_TO_ADDR
// sBunker := false ;
13348: LD_ADDR_EXP 50
13352: PUSH
13353: LD_INT 0
13355: ST_TO_ADDR
// sHack := false ;
13356: LD_ADDR_EXP 51
13360: PUSH
13361: LD_INT 0
13363: ST_TO_ADDR
// sFire := false ;
13364: LD_ADDR_EXP 52
13368: PUSH
13369: LD_INT 0
13371: ST_TO_ADDR
// sRefresh := false ;
13372: LD_ADDR_EXP 53
13376: PUSH
13377: LD_INT 0
13379: ST_TO_ADDR
// sExp := false ;
13380: LD_ADDR_EXP 54
13384: PUSH
13385: LD_INT 0
13387: ST_TO_ADDR
// sDepot := false ;
13388: LD_ADDR_EXP 55
13392: PUSH
13393: LD_INT 0
13395: ST_TO_ADDR
// sFlag := false ;
13396: LD_ADDR_EXP 56
13400: PUSH
13401: LD_INT 0
13403: ST_TO_ADDR
// sKamikadze := false ;
13404: LD_ADDR_EXP 64
13408: PUSH
13409: LD_INT 0
13411: ST_TO_ADDR
// sTroll := false ;
13412: LD_ADDR_EXP 65
13416: PUSH
13417: LD_INT 0
13419: ST_TO_ADDR
// sSlow := false ;
13420: LD_ADDR_EXP 66
13424: PUSH
13425: LD_INT 0
13427: ST_TO_ADDR
// sLack := false ;
13428: LD_ADDR_EXP 67
13432: PUSH
13433: LD_INT 0
13435: ST_TO_ADDR
// sTank := false ;
13436: LD_ADDR_EXP 69
13440: PUSH
13441: LD_INT 0
13443: ST_TO_ADDR
// sRemote := false ;
13444: LD_ADDR_EXP 70
13448: PUSH
13449: LD_INT 0
13451: ST_TO_ADDR
// sPowell := false ;
13452: LD_ADDR_EXP 71
13456: PUSH
13457: LD_INT 0
13459: ST_TO_ADDR
// sTeleport := false ;
13460: LD_ADDR_EXP 74
13464: PUSH
13465: LD_INT 0
13467: ST_TO_ADDR
// sOilTower := false ;
13468: LD_ADDR_EXP 76
13472: PUSH
13473: LD_INT 0
13475: ST_TO_ADDR
// sShovel := false ;
13476: LD_ADDR_EXP 77
13480: PUSH
13481: LD_INT 0
13483: ST_TO_ADDR
// sSheik := false ;
13484: LD_ADDR_EXP 78
13488: PUSH
13489: LD_INT 0
13491: ST_TO_ADDR
// sEarthquake := false ;
13492: LD_ADDR_EXP 80
13496: PUSH
13497: LD_INT 0
13499: ST_TO_ADDR
// sAI := false ;
13500: LD_ADDR_EXP 81
13504: PUSH
13505: LD_INT 0
13507: ST_TO_ADDR
// sCargo := false ;
13508: LD_ADDR_EXP 84
13512: PUSH
13513: LD_INT 0
13515: ST_TO_ADDR
// sDLaser := false ;
13516: LD_ADDR_EXP 85
13520: PUSH
13521: LD_INT 0
13523: ST_TO_ADDR
// sExchange := false ;
13524: LD_ADDR_EXP 86
13528: PUSH
13529: LD_INT 0
13531: ST_TO_ADDR
// sFac := false ;
13532: LD_ADDR_EXP 87
13536: PUSH
13537: LD_INT 0
13539: ST_TO_ADDR
// sPower := false ;
13540: LD_ADDR_EXP 88
13544: PUSH
13545: LD_INT 0
13547: ST_TO_ADDR
// sRandom := false ;
13548: LD_ADDR_EXP 89
13552: PUSH
13553: LD_INT 0
13555: ST_TO_ADDR
// sShield := false ;
13556: LD_ADDR_EXP 90
13560: PUSH
13561: LD_INT 0
13563: ST_TO_ADDR
// sTime := false ;
13564: LD_ADDR_EXP 91
13568: PUSH
13569: LD_INT 0
13571: ST_TO_ADDR
// sTools := false ;
13572: LD_ADDR_EXP 92
13576: PUSH
13577: LD_INT 0
13579: ST_TO_ADDR
// sSold := false ;
13580: LD_ADDR_EXP 57
13584: PUSH
13585: LD_INT 0
13587: ST_TO_ADDR
// sDiff := false ;
13588: LD_ADDR_EXP 58
13592: PUSH
13593: LD_INT 0
13595: ST_TO_ADDR
// sFog := false ;
13596: LD_ADDR_EXP 61
13600: PUSH
13601: LD_INT 0
13603: ST_TO_ADDR
// sReset := false ;
13604: LD_ADDR_EXP 62
13608: PUSH
13609: LD_INT 0
13611: ST_TO_ADDR
// sSun := false ;
13612: LD_ADDR_EXP 63
13616: PUSH
13617: LD_INT 0
13619: ST_TO_ADDR
// sTiger := false ;
13620: LD_ADDR_EXP 59
13624: PUSH
13625: LD_INT 0
13627: ST_TO_ADDR
// sBomb := false ;
13628: LD_ADDR_EXP 60
13632: PUSH
13633: LD_INT 0
13635: ST_TO_ADDR
// sWound := false ;
13636: LD_ADDR_EXP 68
13640: PUSH
13641: LD_INT 0
13643: ST_TO_ADDR
// sBetray := false ;
13644: LD_ADDR_EXP 72
13648: PUSH
13649: LD_INT 0
13651: ST_TO_ADDR
// sContamin := false ;
13652: LD_ADDR_EXP 73
13656: PUSH
13657: LD_INT 0
13659: ST_TO_ADDR
// sOil := false ;
13660: LD_ADDR_EXP 75
13664: PUSH
13665: LD_INT 0
13667: ST_TO_ADDR
// sStu := false ;
13668: LD_ADDR_EXP 79
13672: PUSH
13673: LD_INT 0
13675: ST_TO_ADDR
// sBazooka := false ;
13676: LD_ADDR_EXP 82
13680: PUSH
13681: LD_INT 0
13683: ST_TO_ADDR
// sMortar := false ;
13684: LD_ADDR_EXP 83
13688: PUSH
13689: LD_INT 0
13691: ST_TO_ADDR
// sRanger := false ;
13692: LD_ADDR_EXP 93
13696: PUSH
13697: LD_INT 0
13699: ST_TO_ADDR
// end ;
13700: LD_VAR 0 1
13704: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13705: LD_INT 0
13707: PPUSH
13708: PPUSH
13709: PPUSH
13710: PPUSH
13711: PPUSH
// result := [ ] ;
13712: LD_ADDR_VAR 0 1
13716: PUSH
13717: EMPTY
13718: ST_TO_ADDR
// if campaign_id = 1 then
13719: LD_OWVAR 69
13723: PUSH
13724: LD_INT 1
13726: EQUAL
13727: IFFALSE 16665
// begin case mission_number of 1 :
13729: LD_OWVAR 70
13733: PUSH
13734: LD_INT 1
13736: DOUBLE
13737: EQUAL
13738: IFTRUE 13742
13740: GO 13806
13742: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13743: LD_ADDR_VAR 0 1
13747: PUSH
13748: LD_INT 2
13750: PUSH
13751: LD_INT 4
13753: PUSH
13754: LD_INT 11
13756: PUSH
13757: LD_INT 12
13759: PUSH
13760: LD_INT 15
13762: PUSH
13763: LD_INT 16
13765: PUSH
13766: LD_INT 22
13768: PUSH
13769: LD_INT 23
13771: PUSH
13772: LD_INT 26
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 101
13788: PUSH
13789: LD_INT 102
13791: PUSH
13792: LD_INT 106
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: ST_TO_ADDR
13804: GO 16663
13806: LD_INT 2
13808: DOUBLE
13809: EQUAL
13810: IFTRUE 13814
13812: GO 13886
13814: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13815: LD_ADDR_VAR 0 1
13819: PUSH
13820: LD_INT 2
13822: PUSH
13823: LD_INT 4
13825: PUSH
13826: LD_INT 11
13828: PUSH
13829: LD_INT 12
13831: PUSH
13832: LD_INT 15
13834: PUSH
13835: LD_INT 16
13837: PUSH
13838: LD_INT 22
13840: PUSH
13841: LD_INT 23
13843: PUSH
13844: LD_INT 26
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 101
13860: PUSH
13861: LD_INT 102
13863: PUSH
13864: LD_INT 105
13866: PUSH
13867: LD_INT 106
13869: PUSH
13870: LD_INT 108
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: ST_TO_ADDR
13884: GO 16663
13886: LD_INT 3
13888: DOUBLE
13889: EQUAL
13890: IFTRUE 13894
13892: GO 13970
13894: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13895: LD_ADDR_VAR 0 1
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 4
13905: PUSH
13906: LD_INT 5
13908: PUSH
13909: LD_INT 11
13911: PUSH
13912: LD_INT 12
13914: PUSH
13915: LD_INT 15
13917: PUSH
13918: LD_INT 16
13920: PUSH
13921: LD_INT 22
13923: PUSH
13924: LD_INT 26
13926: PUSH
13927: LD_INT 36
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: PUSH
13942: LD_INT 101
13944: PUSH
13945: LD_INT 102
13947: PUSH
13948: LD_INT 105
13950: PUSH
13951: LD_INT 106
13953: PUSH
13954: LD_INT 108
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: ST_TO_ADDR
13968: GO 16663
13970: LD_INT 4
13972: DOUBLE
13973: EQUAL
13974: IFTRUE 13978
13976: GO 14062
13978: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13979: LD_ADDR_VAR 0 1
13983: PUSH
13984: LD_INT 2
13986: PUSH
13987: LD_INT 4
13989: PUSH
13990: LD_INT 5
13992: PUSH
13993: LD_INT 8
13995: PUSH
13996: LD_INT 11
13998: PUSH
13999: LD_INT 12
14001: PUSH
14002: LD_INT 15
14004: PUSH
14005: LD_INT 16
14007: PUSH
14008: LD_INT 22
14010: PUSH
14011: LD_INT 23
14013: PUSH
14014: LD_INT 26
14016: PUSH
14017: LD_INT 36
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 101
14036: PUSH
14037: LD_INT 102
14039: PUSH
14040: LD_INT 105
14042: PUSH
14043: LD_INT 106
14045: PUSH
14046: LD_INT 108
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: ST_TO_ADDR
14060: GO 16663
14062: LD_INT 5
14064: DOUBLE
14065: EQUAL
14066: IFTRUE 14070
14068: GO 14170
14070: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14071: LD_ADDR_VAR 0 1
14075: PUSH
14076: LD_INT 2
14078: PUSH
14079: LD_INT 4
14081: PUSH
14082: LD_INT 5
14084: PUSH
14085: LD_INT 6
14087: PUSH
14088: LD_INT 8
14090: PUSH
14091: LD_INT 11
14093: PUSH
14094: LD_INT 12
14096: PUSH
14097: LD_INT 15
14099: PUSH
14100: LD_INT 16
14102: PUSH
14103: LD_INT 22
14105: PUSH
14106: LD_INT 23
14108: PUSH
14109: LD_INT 25
14111: PUSH
14112: LD_INT 26
14114: PUSH
14115: LD_INT 36
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 101
14136: PUSH
14137: LD_INT 102
14139: PUSH
14140: LD_INT 105
14142: PUSH
14143: LD_INT 106
14145: PUSH
14146: LD_INT 108
14148: PUSH
14149: LD_INT 109
14151: PUSH
14152: LD_INT 112
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: ST_TO_ADDR
14168: GO 16663
14170: LD_INT 6
14172: DOUBLE
14173: EQUAL
14174: IFTRUE 14178
14176: GO 14298
14178: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14179: LD_ADDR_VAR 0 1
14183: PUSH
14184: LD_INT 2
14186: PUSH
14187: LD_INT 4
14189: PUSH
14190: LD_INT 5
14192: PUSH
14193: LD_INT 6
14195: PUSH
14196: LD_INT 8
14198: PUSH
14199: LD_INT 11
14201: PUSH
14202: LD_INT 12
14204: PUSH
14205: LD_INT 15
14207: PUSH
14208: LD_INT 16
14210: PUSH
14211: LD_INT 20
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 22
14219: PUSH
14220: LD_INT 23
14222: PUSH
14223: LD_INT 25
14225: PUSH
14226: LD_INT 26
14228: PUSH
14229: LD_INT 30
14231: PUSH
14232: LD_INT 31
14234: PUSH
14235: LD_INT 32
14237: PUSH
14238: LD_INT 36
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 101
14264: PUSH
14265: LD_INT 102
14267: PUSH
14268: LD_INT 105
14270: PUSH
14271: LD_INT 106
14273: PUSH
14274: LD_INT 108
14276: PUSH
14277: LD_INT 109
14279: PUSH
14280: LD_INT 112
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: ST_TO_ADDR
14296: GO 16663
14298: LD_INT 7
14300: DOUBLE
14301: EQUAL
14302: IFTRUE 14306
14304: GO 14406
14306: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14307: LD_ADDR_VAR 0 1
14311: PUSH
14312: LD_INT 2
14314: PUSH
14315: LD_INT 4
14317: PUSH
14318: LD_INT 5
14320: PUSH
14321: LD_INT 7
14323: PUSH
14324: LD_INT 11
14326: PUSH
14327: LD_INT 12
14329: PUSH
14330: LD_INT 15
14332: PUSH
14333: LD_INT 16
14335: PUSH
14336: LD_INT 20
14338: PUSH
14339: LD_INT 21
14341: PUSH
14342: LD_INT 22
14344: PUSH
14345: LD_INT 23
14347: PUSH
14348: LD_INT 25
14350: PUSH
14351: LD_INT 26
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 101
14372: PUSH
14373: LD_INT 102
14375: PUSH
14376: LD_INT 103
14378: PUSH
14379: LD_INT 105
14381: PUSH
14382: LD_INT 106
14384: PUSH
14385: LD_INT 108
14387: PUSH
14388: LD_INT 112
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: ST_TO_ADDR
14404: GO 16663
14406: LD_INT 8
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14542
14414: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14415: LD_ADDR_VAR 0 1
14419: PUSH
14420: LD_INT 2
14422: PUSH
14423: LD_INT 4
14425: PUSH
14426: LD_INT 5
14428: PUSH
14429: LD_INT 6
14431: PUSH
14432: LD_INT 7
14434: PUSH
14435: LD_INT 8
14437: PUSH
14438: LD_INT 11
14440: PUSH
14441: LD_INT 12
14443: PUSH
14444: LD_INT 15
14446: PUSH
14447: LD_INT 16
14449: PUSH
14450: LD_INT 20
14452: PUSH
14453: LD_INT 21
14455: PUSH
14456: LD_INT 22
14458: PUSH
14459: LD_INT 23
14461: PUSH
14462: LD_INT 25
14464: PUSH
14465: LD_INT 26
14467: PUSH
14468: LD_INT 30
14470: PUSH
14471: LD_INT 31
14473: PUSH
14474: LD_INT 32
14476: PUSH
14477: LD_INT 36
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 101
14504: PUSH
14505: LD_INT 102
14507: PUSH
14508: LD_INT 103
14510: PUSH
14511: LD_INT 105
14513: PUSH
14514: LD_INT 106
14516: PUSH
14517: LD_INT 108
14519: PUSH
14520: LD_INT 109
14522: PUSH
14523: LD_INT 112
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: ST_TO_ADDR
14540: GO 16663
14542: LD_INT 9
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14686
14550: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14551: LD_ADDR_VAR 0 1
14555: PUSH
14556: LD_INT 2
14558: PUSH
14559: LD_INT 4
14561: PUSH
14562: LD_INT 5
14564: PUSH
14565: LD_INT 6
14567: PUSH
14568: LD_INT 7
14570: PUSH
14571: LD_INT 8
14573: PUSH
14574: LD_INT 11
14576: PUSH
14577: LD_INT 12
14579: PUSH
14580: LD_INT 15
14582: PUSH
14583: LD_INT 16
14585: PUSH
14586: LD_INT 20
14588: PUSH
14589: LD_INT 21
14591: PUSH
14592: LD_INT 22
14594: PUSH
14595: LD_INT 23
14597: PUSH
14598: LD_INT 25
14600: PUSH
14601: LD_INT 26
14603: PUSH
14604: LD_INT 28
14606: PUSH
14607: LD_INT 30
14609: PUSH
14610: LD_INT 31
14612: PUSH
14613: LD_INT 32
14615: PUSH
14616: LD_INT 36
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 101
14644: PUSH
14645: LD_INT 102
14647: PUSH
14648: LD_INT 103
14650: PUSH
14651: LD_INT 105
14653: PUSH
14654: LD_INT 106
14656: PUSH
14657: LD_INT 108
14659: PUSH
14660: LD_INT 109
14662: PUSH
14663: LD_INT 112
14665: PUSH
14666: LD_INT 114
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: ST_TO_ADDR
14684: GO 16663
14686: LD_INT 10
14688: DOUBLE
14689: EQUAL
14690: IFTRUE 14694
14692: GO 14878
14694: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14695: LD_ADDR_VAR 0 1
14699: PUSH
14700: LD_INT 2
14702: PUSH
14703: LD_INT 4
14705: PUSH
14706: LD_INT 5
14708: PUSH
14709: LD_INT 6
14711: PUSH
14712: LD_INT 7
14714: PUSH
14715: LD_INT 8
14717: PUSH
14718: LD_INT 9
14720: PUSH
14721: LD_INT 10
14723: PUSH
14724: LD_INT 11
14726: PUSH
14727: LD_INT 12
14729: PUSH
14730: LD_INT 13
14732: PUSH
14733: LD_INT 14
14735: PUSH
14736: LD_INT 15
14738: PUSH
14739: LD_INT 16
14741: PUSH
14742: LD_INT 17
14744: PUSH
14745: LD_INT 18
14747: PUSH
14748: LD_INT 19
14750: PUSH
14751: LD_INT 20
14753: PUSH
14754: LD_INT 21
14756: PUSH
14757: LD_INT 22
14759: PUSH
14760: LD_INT 23
14762: PUSH
14763: LD_INT 24
14765: PUSH
14766: LD_INT 25
14768: PUSH
14769: LD_INT 26
14771: PUSH
14772: LD_INT 28
14774: PUSH
14775: LD_INT 30
14777: PUSH
14778: LD_INT 31
14780: PUSH
14781: LD_INT 32
14783: PUSH
14784: LD_INT 36
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 101
14820: PUSH
14821: LD_INT 102
14823: PUSH
14824: LD_INT 103
14826: PUSH
14827: LD_INT 104
14829: PUSH
14830: LD_INT 105
14832: PUSH
14833: LD_INT 106
14835: PUSH
14836: LD_INT 107
14838: PUSH
14839: LD_INT 108
14841: PUSH
14842: LD_INT 109
14844: PUSH
14845: LD_INT 110
14847: PUSH
14848: LD_INT 111
14850: PUSH
14851: LD_INT 112
14853: PUSH
14854: LD_INT 114
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: ST_TO_ADDR
14876: GO 16663
14878: LD_INT 11
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 15078
14886: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14887: LD_ADDR_VAR 0 1
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: LD_INT 3
14897: PUSH
14898: LD_INT 4
14900: PUSH
14901: LD_INT 5
14903: PUSH
14904: LD_INT 6
14906: PUSH
14907: LD_INT 7
14909: PUSH
14910: LD_INT 8
14912: PUSH
14913: LD_INT 9
14915: PUSH
14916: LD_INT 10
14918: PUSH
14919: LD_INT 11
14921: PUSH
14922: LD_INT 12
14924: PUSH
14925: LD_INT 13
14927: PUSH
14928: LD_INT 14
14930: PUSH
14931: LD_INT 15
14933: PUSH
14934: LD_INT 16
14936: PUSH
14937: LD_INT 17
14939: PUSH
14940: LD_INT 18
14942: PUSH
14943: LD_INT 19
14945: PUSH
14946: LD_INT 20
14948: PUSH
14949: LD_INT 21
14951: PUSH
14952: LD_INT 22
14954: PUSH
14955: LD_INT 23
14957: PUSH
14958: LD_INT 24
14960: PUSH
14961: LD_INT 25
14963: PUSH
14964: LD_INT 26
14966: PUSH
14967: LD_INT 28
14969: PUSH
14970: LD_INT 30
14972: PUSH
14973: LD_INT 31
14975: PUSH
14976: LD_INT 32
14978: PUSH
14979: LD_INT 34
14981: PUSH
14982: LD_INT 36
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 101
15020: PUSH
15021: LD_INT 102
15023: PUSH
15024: LD_INT 103
15026: PUSH
15027: LD_INT 104
15029: PUSH
15030: LD_INT 105
15032: PUSH
15033: LD_INT 106
15035: PUSH
15036: LD_INT 107
15038: PUSH
15039: LD_INT 108
15041: PUSH
15042: LD_INT 109
15044: PUSH
15045: LD_INT 110
15047: PUSH
15048: LD_INT 111
15050: PUSH
15051: LD_INT 112
15053: PUSH
15054: LD_INT 114
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: ST_TO_ADDR
15076: GO 16663
15078: LD_INT 12
15080: DOUBLE
15081: EQUAL
15082: IFTRUE 15086
15084: GO 15294
15086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15087: LD_ADDR_VAR 0 1
15091: PUSH
15092: LD_INT 1
15094: PUSH
15095: LD_INT 2
15097: PUSH
15098: LD_INT 3
15100: PUSH
15101: LD_INT 4
15103: PUSH
15104: LD_INT 5
15106: PUSH
15107: LD_INT 6
15109: PUSH
15110: LD_INT 7
15112: PUSH
15113: LD_INT 8
15115: PUSH
15116: LD_INT 9
15118: PUSH
15119: LD_INT 10
15121: PUSH
15122: LD_INT 11
15124: PUSH
15125: LD_INT 12
15127: PUSH
15128: LD_INT 13
15130: PUSH
15131: LD_INT 14
15133: PUSH
15134: LD_INT 15
15136: PUSH
15137: LD_INT 16
15139: PUSH
15140: LD_INT 17
15142: PUSH
15143: LD_INT 18
15145: PUSH
15146: LD_INT 19
15148: PUSH
15149: LD_INT 20
15151: PUSH
15152: LD_INT 21
15154: PUSH
15155: LD_INT 22
15157: PUSH
15158: LD_INT 23
15160: PUSH
15161: LD_INT 24
15163: PUSH
15164: LD_INT 25
15166: PUSH
15167: LD_INT 26
15169: PUSH
15170: LD_INT 27
15172: PUSH
15173: LD_INT 28
15175: PUSH
15176: LD_INT 30
15178: PUSH
15179: LD_INT 31
15181: PUSH
15182: LD_INT 32
15184: PUSH
15185: LD_INT 33
15187: PUSH
15188: LD_INT 34
15190: PUSH
15191: LD_INT 36
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 101
15232: PUSH
15233: LD_INT 102
15235: PUSH
15236: LD_INT 103
15238: PUSH
15239: LD_INT 104
15241: PUSH
15242: LD_INT 105
15244: PUSH
15245: LD_INT 106
15247: PUSH
15248: LD_INT 107
15250: PUSH
15251: LD_INT 108
15253: PUSH
15254: LD_INT 109
15256: PUSH
15257: LD_INT 110
15259: PUSH
15260: LD_INT 111
15262: PUSH
15263: LD_INT 112
15265: PUSH
15266: LD_INT 113
15268: PUSH
15269: LD_INT 114
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: ST_TO_ADDR
15292: GO 16663
15294: LD_INT 13
15296: DOUBLE
15297: EQUAL
15298: IFTRUE 15302
15300: GO 15498
15302: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15303: LD_ADDR_VAR 0 1
15307: PUSH
15308: LD_INT 1
15310: PUSH
15311: LD_INT 2
15313: PUSH
15314: LD_INT 3
15316: PUSH
15317: LD_INT 4
15319: PUSH
15320: LD_INT 5
15322: PUSH
15323: LD_INT 8
15325: PUSH
15326: LD_INT 9
15328: PUSH
15329: LD_INT 10
15331: PUSH
15332: LD_INT 11
15334: PUSH
15335: LD_INT 12
15337: PUSH
15338: LD_INT 14
15340: PUSH
15341: LD_INT 15
15343: PUSH
15344: LD_INT 16
15346: PUSH
15347: LD_INT 17
15349: PUSH
15350: LD_INT 18
15352: PUSH
15353: LD_INT 19
15355: PUSH
15356: LD_INT 20
15358: PUSH
15359: LD_INT 21
15361: PUSH
15362: LD_INT 22
15364: PUSH
15365: LD_INT 23
15367: PUSH
15368: LD_INT 24
15370: PUSH
15371: LD_INT 25
15373: PUSH
15374: LD_INT 26
15376: PUSH
15377: LD_INT 27
15379: PUSH
15380: LD_INT 28
15382: PUSH
15383: LD_INT 30
15385: PUSH
15386: LD_INT 31
15388: PUSH
15389: LD_INT 32
15391: PUSH
15392: LD_INT 33
15394: PUSH
15395: LD_INT 34
15397: PUSH
15398: LD_INT 36
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 101
15436: PUSH
15437: LD_INT 102
15439: PUSH
15440: LD_INT 103
15442: PUSH
15443: LD_INT 104
15445: PUSH
15446: LD_INT 105
15448: PUSH
15449: LD_INT 106
15451: PUSH
15452: LD_INT 107
15454: PUSH
15455: LD_INT 108
15457: PUSH
15458: LD_INT 109
15460: PUSH
15461: LD_INT 110
15463: PUSH
15464: LD_INT 111
15466: PUSH
15467: LD_INT 112
15469: PUSH
15470: LD_INT 113
15472: PUSH
15473: LD_INT 114
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: ST_TO_ADDR
15496: GO 16663
15498: LD_INT 14
15500: DOUBLE
15501: EQUAL
15502: IFTRUE 15506
15504: GO 15718
15506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15507: LD_ADDR_VAR 0 1
15511: PUSH
15512: LD_INT 1
15514: PUSH
15515: LD_INT 2
15517: PUSH
15518: LD_INT 3
15520: PUSH
15521: LD_INT 4
15523: PUSH
15524: LD_INT 5
15526: PUSH
15527: LD_INT 6
15529: PUSH
15530: LD_INT 7
15532: PUSH
15533: LD_INT 8
15535: PUSH
15536: LD_INT 9
15538: PUSH
15539: LD_INT 10
15541: PUSH
15542: LD_INT 11
15544: PUSH
15545: LD_INT 12
15547: PUSH
15548: LD_INT 13
15550: PUSH
15551: LD_INT 14
15553: PUSH
15554: LD_INT 15
15556: PUSH
15557: LD_INT 16
15559: PUSH
15560: LD_INT 17
15562: PUSH
15563: LD_INT 18
15565: PUSH
15566: LD_INT 19
15568: PUSH
15569: LD_INT 20
15571: PUSH
15572: LD_INT 21
15574: PUSH
15575: LD_INT 22
15577: PUSH
15578: LD_INT 23
15580: PUSH
15581: LD_INT 24
15583: PUSH
15584: LD_INT 25
15586: PUSH
15587: LD_INT 26
15589: PUSH
15590: LD_INT 27
15592: PUSH
15593: LD_INT 28
15595: PUSH
15596: LD_INT 29
15598: PUSH
15599: LD_INT 30
15601: PUSH
15602: LD_INT 31
15604: PUSH
15605: LD_INT 32
15607: PUSH
15608: LD_INT 33
15610: PUSH
15611: LD_INT 34
15613: PUSH
15614: LD_INT 36
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 101
15656: PUSH
15657: LD_INT 102
15659: PUSH
15660: LD_INT 103
15662: PUSH
15663: LD_INT 104
15665: PUSH
15666: LD_INT 105
15668: PUSH
15669: LD_INT 106
15671: PUSH
15672: LD_INT 107
15674: PUSH
15675: LD_INT 108
15677: PUSH
15678: LD_INT 109
15680: PUSH
15681: LD_INT 110
15683: PUSH
15684: LD_INT 111
15686: PUSH
15687: LD_INT 112
15689: PUSH
15690: LD_INT 113
15692: PUSH
15693: LD_INT 114
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: ST_TO_ADDR
15716: GO 16663
15718: LD_INT 15
15720: DOUBLE
15721: EQUAL
15722: IFTRUE 15726
15724: GO 15938
15726: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15727: LD_ADDR_VAR 0 1
15731: PUSH
15732: LD_INT 1
15734: PUSH
15735: LD_INT 2
15737: PUSH
15738: LD_INT 3
15740: PUSH
15741: LD_INT 4
15743: PUSH
15744: LD_INT 5
15746: PUSH
15747: LD_INT 6
15749: PUSH
15750: LD_INT 7
15752: PUSH
15753: LD_INT 8
15755: PUSH
15756: LD_INT 9
15758: PUSH
15759: LD_INT 10
15761: PUSH
15762: LD_INT 11
15764: PUSH
15765: LD_INT 12
15767: PUSH
15768: LD_INT 13
15770: PUSH
15771: LD_INT 14
15773: PUSH
15774: LD_INT 15
15776: PUSH
15777: LD_INT 16
15779: PUSH
15780: LD_INT 17
15782: PUSH
15783: LD_INT 18
15785: PUSH
15786: LD_INT 19
15788: PUSH
15789: LD_INT 20
15791: PUSH
15792: LD_INT 21
15794: PUSH
15795: LD_INT 22
15797: PUSH
15798: LD_INT 23
15800: PUSH
15801: LD_INT 24
15803: PUSH
15804: LD_INT 25
15806: PUSH
15807: LD_INT 26
15809: PUSH
15810: LD_INT 27
15812: PUSH
15813: LD_INT 28
15815: PUSH
15816: LD_INT 29
15818: PUSH
15819: LD_INT 30
15821: PUSH
15822: LD_INT 31
15824: PUSH
15825: LD_INT 32
15827: PUSH
15828: LD_INT 33
15830: PUSH
15831: LD_INT 34
15833: PUSH
15834: LD_INT 36
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 101
15876: PUSH
15877: LD_INT 102
15879: PUSH
15880: LD_INT 103
15882: PUSH
15883: LD_INT 104
15885: PUSH
15886: LD_INT 105
15888: PUSH
15889: LD_INT 106
15891: PUSH
15892: LD_INT 107
15894: PUSH
15895: LD_INT 108
15897: PUSH
15898: LD_INT 109
15900: PUSH
15901: LD_INT 110
15903: PUSH
15904: LD_INT 111
15906: PUSH
15907: LD_INT 112
15909: PUSH
15910: LD_INT 113
15912: PUSH
15913: LD_INT 114
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: ST_TO_ADDR
15936: GO 16663
15938: LD_INT 16
15940: DOUBLE
15941: EQUAL
15942: IFTRUE 15946
15944: GO 16070
15946: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15947: LD_ADDR_VAR 0 1
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: LD_INT 4
15957: PUSH
15958: LD_INT 5
15960: PUSH
15961: LD_INT 7
15963: PUSH
15964: LD_INT 11
15966: PUSH
15967: LD_INT 12
15969: PUSH
15970: LD_INT 15
15972: PUSH
15973: LD_INT 16
15975: PUSH
15976: LD_INT 20
15978: PUSH
15979: LD_INT 21
15981: PUSH
15982: LD_INT 22
15984: PUSH
15985: LD_INT 23
15987: PUSH
15988: LD_INT 25
15990: PUSH
15991: LD_INT 26
15993: PUSH
15994: LD_INT 30
15996: PUSH
15997: LD_INT 31
15999: PUSH
16000: LD_INT 32
16002: PUSH
16003: LD_INT 33
16005: PUSH
16006: LD_INT 34
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 101
16032: PUSH
16033: LD_INT 102
16035: PUSH
16036: LD_INT 103
16038: PUSH
16039: LD_INT 106
16041: PUSH
16042: LD_INT 108
16044: PUSH
16045: LD_INT 112
16047: PUSH
16048: LD_INT 113
16050: PUSH
16051: LD_INT 114
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: ST_TO_ADDR
16068: GO 16663
16070: LD_INT 17
16072: DOUBLE
16073: EQUAL
16074: IFTRUE 16078
16076: GO 16290
16078: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16079: LD_ADDR_VAR 0 1
16083: PUSH
16084: LD_INT 1
16086: PUSH
16087: LD_INT 2
16089: PUSH
16090: LD_INT 3
16092: PUSH
16093: LD_INT 4
16095: PUSH
16096: LD_INT 5
16098: PUSH
16099: LD_INT 6
16101: PUSH
16102: LD_INT 7
16104: PUSH
16105: LD_INT 8
16107: PUSH
16108: LD_INT 9
16110: PUSH
16111: LD_INT 10
16113: PUSH
16114: LD_INT 11
16116: PUSH
16117: LD_INT 12
16119: PUSH
16120: LD_INT 13
16122: PUSH
16123: LD_INT 14
16125: PUSH
16126: LD_INT 15
16128: PUSH
16129: LD_INT 16
16131: PUSH
16132: LD_INT 17
16134: PUSH
16135: LD_INT 18
16137: PUSH
16138: LD_INT 19
16140: PUSH
16141: LD_INT 20
16143: PUSH
16144: LD_INT 21
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_INT 23
16152: PUSH
16153: LD_INT 24
16155: PUSH
16156: LD_INT 25
16158: PUSH
16159: LD_INT 26
16161: PUSH
16162: LD_INT 27
16164: PUSH
16165: LD_INT 28
16167: PUSH
16168: LD_INT 29
16170: PUSH
16171: LD_INT 30
16173: PUSH
16174: LD_INT 31
16176: PUSH
16177: LD_INT 32
16179: PUSH
16180: LD_INT 33
16182: PUSH
16183: LD_INT 34
16185: PUSH
16186: LD_INT 36
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 101
16228: PUSH
16229: LD_INT 102
16231: PUSH
16232: LD_INT 103
16234: PUSH
16235: LD_INT 104
16237: PUSH
16238: LD_INT 105
16240: PUSH
16241: LD_INT 106
16243: PUSH
16244: LD_INT 107
16246: PUSH
16247: LD_INT 108
16249: PUSH
16250: LD_INT 109
16252: PUSH
16253: LD_INT 110
16255: PUSH
16256: LD_INT 111
16258: PUSH
16259: LD_INT 112
16261: PUSH
16262: LD_INT 113
16264: PUSH
16265: LD_INT 114
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: ST_TO_ADDR
16288: GO 16663
16290: LD_INT 18
16292: DOUBLE
16293: EQUAL
16294: IFTRUE 16298
16296: GO 16434
16298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16299: LD_ADDR_VAR 0 1
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: LD_INT 4
16309: PUSH
16310: LD_INT 5
16312: PUSH
16313: LD_INT 7
16315: PUSH
16316: LD_INT 11
16318: PUSH
16319: LD_INT 12
16321: PUSH
16322: LD_INT 15
16324: PUSH
16325: LD_INT 16
16327: PUSH
16328: LD_INT 20
16330: PUSH
16331: LD_INT 21
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_INT 23
16339: PUSH
16340: LD_INT 25
16342: PUSH
16343: LD_INT 26
16345: PUSH
16346: LD_INT 30
16348: PUSH
16349: LD_INT 31
16351: PUSH
16352: LD_INT 32
16354: PUSH
16355: LD_INT 33
16357: PUSH
16358: LD_INT 34
16360: PUSH
16361: LD_INT 35
16363: PUSH
16364: LD_INT 36
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 101
16392: PUSH
16393: LD_INT 102
16395: PUSH
16396: LD_INT 103
16398: PUSH
16399: LD_INT 106
16401: PUSH
16402: LD_INT 108
16404: PUSH
16405: LD_INT 112
16407: PUSH
16408: LD_INT 113
16410: PUSH
16411: LD_INT 114
16413: PUSH
16414: LD_INT 115
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: ST_TO_ADDR
16432: GO 16663
16434: LD_INT 19
16436: DOUBLE
16437: EQUAL
16438: IFTRUE 16442
16440: GO 16662
16442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16443: LD_ADDR_VAR 0 1
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: LD_INT 2
16453: PUSH
16454: LD_INT 3
16456: PUSH
16457: LD_INT 4
16459: PUSH
16460: LD_INT 5
16462: PUSH
16463: LD_INT 6
16465: PUSH
16466: LD_INT 7
16468: PUSH
16469: LD_INT 8
16471: PUSH
16472: LD_INT 9
16474: PUSH
16475: LD_INT 10
16477: PUSH
16478: LD_INT 11
16480: PUSH
16481: LD_INT 12
16483: PUSH
16484: LD_INT 13
16486: PUSH
16487: LD_INT 14
16489: PUSH
16490: LD_INT 15
16492: PUSH
16493: LD_INT 16
16495: PUSH
16496: LD_INT 17
16498: PUSH
16499: LD_INT 18
16501: PUSH
16502: LD_INT 19
16504: PUSH
16505: LD_INT 20
16507: PUSH
16508: LD_INT 21
16510: PUSH
16511: LD_INT 22
16513: PUSH
16514: LD_INT 23
16516: PUSH
16517: LD_INT 24
16519: PUSH
16520: LD_INT 25
16522: PUSH
16523: LD_INT 26
16525: PUSH
16526: LD_INT 27
16528: PUSH
16529: LD_INT 28
16531: PUSH
16532: LD_INT 29
16534: PUSH
16535: LD_INT 30
16537: PUSH
16538: LD_INT 31
16540: PUSH
16541: LD_INT 32
16543: PUSH
16544: LD_INT 33
16546: PUSH
16547: LD_INT 34
16549: PUSH
16550: LD_INT 35
16552: PUSH
16553: LD_INT 36
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 101
16596: PUSH
16597: LD_INT 102
16599: PUSH
16600: LD_INT 103
16602: PUSH
16603: LD_INT 104
16605: PUSH
16606: LD_INT 105
16608: PUSH
16609: LD_INT 106
16611: PUSH
16612: LD_INT 107
16614: PUSH
16615: LD_INT 108
16617: PUSH
16618: LD_INT 109
16620: PUSH
16621: LD_INT 110
16623: PUSH
16624: LD_INT 111
16626: PUSH
16627: LD_INT 112
16629: PUSH
16630: LD_INT 113
16632: PUSH
16633: LD_INT 114
16635: PUSH
16636: LD_INT 115
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: ST_TO_ADDR
16660: GO 16663
16662: POP
// end else
16663: GO 16882
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16665: LD_ADDR_VAR 0 1
16669: PUSH
16670: LD_INT 1
16672: PUSH
16673: LD_INT 2
16675: PUSH
16676: LD_INT 3
16678: PUSH
16679: LD_INT 4
16681: PUSH
16682: LD_INT 5
16684: PUSH
16685: LD_INT 6
16687: PUSH
16688: LD_INT 7
16690: PUSH
16691: LD_INT 8
16693: PUSH
16694: LD_INT 9
16696: PUSH
16697: LD_INT 10
16699: PUSH
16700: LD_INT 11
16702: PUSH
16703: LD_INT 12
16705: PUSH
16706: LD_INT 13
16708: PUSH
16709: LD_INT 14
16711: PUSH
16712: LD_INT 15
16714: PUSH
16715: LD_INT 16
16717: PUSH
16718: LD_INT 17
16720: PUSH
16721: LD_INT 18
16723: PUSH
16724: LD_INT 19
16726: PUSH
16727: LD_INT 20
16729: PUSH
16730: LD_INT 21
16732: PUSH
16733: LD_INT 22
16735: PUSH
16736: LD_INT 23
16738: PUSH
16739: LD_INT 24
16741: PUSH
16742: LD_INT 25
16744: PUSH
16745: LD_INT 26
16747: PUSH
16748: LD_INT 27
16750: PUSH
16751: LD_INT 28
16753: PUSH
16754: LD_INT 29
16756: PUSH
16757: LD_INT 30
16759: PUSH
16760: LD_INT 31
16762: PUSH
16763: LD_INT 32
16765: PUSH
16766: LD_INT 33
16768: PUSH
16769: LD_INT 34
16771: PUSH
16772: LD_INT 35
16774: PUSH
16775: LD_INT 36
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 101
16818: PUSH
16819: LD_INT 102
16821: PUSH
16822: LD_INT 103
16824: PUSH
16825: LD_INT 104
16827: PUSH
16828: LD_INT 105
16830: PUSH
16831: LD_INT 106
16833: PUSH
16834: LD_INT 107
16836: PUSH
16837: LD_INT 108
16839: PUSH
16840: LD_INT 109
16842: PUSH
16843: LD_INT 110
16845: PUSH
16846: LD_INT 111
16848: PUSH
16849: LD_INT 112
16851: PUSH
16852: LD_INT 113
16854: PUSH
16855: LD_INT 114
16857: PUSH
16858: LD_INT 115
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: ST_TO_ADDR
// if result then
16882: LD_VAR 0 1
16886: IFFALSE 17175
// begin normal :=  ;
16888: LD_ADDR_VAR 0 3
16892: PUSH
16893: LD_STRING 
16895: ST_TO_ADDR
// hardcore :=  ;
16896: LD_ADDR_VAR 0 4
16900: PUSH
16901: LD_STRING 
16903: ST_TO_ADDR
// for i = 1 to normalCounter do
16904: LD_ADDR_VAR 0 5
16908: PUSH
16909: DOUBLE
16910: LD_INT 1
16912: DEC
16913: ST_TO_ADDR
16914: LD_EXP 41
16918: PUSH
16919: FOR_TO
16920: IFFALSE 17021
// begin tmp := 0 ;
16922: LD_ADDR_VAR 0 2
16926: PUSH
16927: LD_STRING 0
16929: ST_TO_ADDR
// if result [ 1 ] then
16930: LD_VAR 0 1
16934: PUSH
16935: LD_INT 1
16937: ARRAY
16938: IFFALSE 17003
// if result [ 1 ] [ 1 ] = i then
16940: LD_VAR 0 1
16944: PUSH
16945: LD_INT 1
16947: ARRAY
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PUSH
16953: LD_VAR 0 5
16957: EQUAL
16958: IFFALSE 17003
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16960: LD_ADDR_VAR 0 1
16964: PUSH
16965: LD_VAR 0 1
16969: PPUSH
16970: LD_INT 1
16972: PPUSH
16973: LD_VAR 0 1
16977: PUSH
16978: LD_INT 1
16980: ARRAY
16981: PPUSH
16982: LD_INT 1
16984: PPUSH
16985: CALL_OW 3
16989: PPUSH
16990: CALL_OW 1
16994: ST_TO_ADDR
// tmp := 1 ;
16995: LD_ADDR_VAR 0 2
16999: PUSH
17000: LD_STRING 1
17002: ST_TO_ADDR
// end ; normal := normal & tmp ;
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: LD_VAR 0 3
17012: PUSH
17013: LD_VAR 0 2
17017: STR
17018: ST_TO_ADDR
// end ;
17019: GO 16919
17021: POP
17022: POP
// for i = 1 to hardcoreCounter do
17023: LD_ADDR_VAR 0 5
17027: PUSH
17028: DOUBLE
17029: LD_INT 1
17031: DEC
17032: ST_TO_ADDR
17033: LD_EXP 42
17037: PUSH
17038: FOR_TO
17039: IFFALSE 17144
// begin tmp := 0 ;
17041: LD_ADDR_VAR 0 2
17045: PUSH
17046: LD_STRING 0
17048: ST_TO_ADDR
// if result [ 2 ] then
17049: LD_VAR 0 1
17053: PUSH
17054: LD_INT 2
17056: ARRAY
17057: IFFALSE 17126
// if result [ 2 ] [ 1 ] = 100 + i then
17059: LD_VAR 0 1
17063: PUSH
17064: LD_INT 2
17066: ARRAY
17067: PUSH
17068: LD_INT 1
17070: ARRAY
17071: PUSH
17072: LD_INT 100
17074: PUSH
17075: LD_VAR 0 5
17079: PLUS
17080: EQUAL
17081: IFFALSE 17126
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17083: LD_ADDR_VAR 0 1
17087: PUSH
17088: LD_VAR 0 1
17092: PPUSH
17093: LD_INT 2
17095: PPUSH
17096: LD_VAR 0 1
17100: PUSH
17101: LD_INT 2
17103: ARRAY
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 3
17112: PPUSH
17113: CALL_OW 1
17117: ST_TO_ADDR
// tmp := 1 ;
17118: LD_ADDR_VAR 0 2
17122: PUSH
17123: LD_STRING 1
17125: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17126: LD_ADDR_VAR 0 4
17130: PUSH
17131: LD_VAR 0 4
17135: PUSH
17136: LD_VAR 0 2
17140: STR
17141: ST_TO_ADDR
// end ;
17142: GO 17038
17144: POP
17145: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17146: LD_STRING getStreamItemsFromMission("
17148: PUSH
17149: LD_VAR 0 3
17153: STR
17154: PUSH
17155: LD_STRING ","
17157: STR
17158: PUSH
17159: LD_VAR 0 4
17163: STR
17164: PUSH
17165: LD_STRING ")
17167: STR
17168: PPUSH
17169: CALL_OW 559
// end else
17173: GO 17182
// ToLua ( getStreamItemsFromMission("","") ) ;
17175: LD_STRING getStreamItemsFromMission("","")
17177: PPUSH
17178: CALL_OW 559
// end ;
17182: LD_VAR 0 1
17186: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17187: LD_EXP 40
17191: PUSH
17192: LD_EXP 45
17196: AND
17197: IFFALSE 17321
17199: GO 17201
17201: DISABLE
17202: LD_INT 0
17204: PPUSH
17205: PPUSH
// begin enable ;
17206: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17207: LD_ADDR_VAR 0 2
17211: PUSH
17212: LD_INT 22
17214: PUSH
17215: LD_OWVAR 2
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 2
17226: PUSH
17227: LD_INT 34
17229: PUSH
17230: LD_INT 7
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 34
17239: PUSH
17240: LD_INT 45
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 34
17249: PUSH
17250: LD_INT 28
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 34
17259: PUSH
17260: LD_INT 47
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PPUSH
17278: CALL_OW 69
17282: ST_TO_ADDR
// if not tmp then
17283: LD_VAR 0 2
17287: NOT
17288: IFFALSE 17292
// exit ;
17290: GO 17321
// for i in tmp do
17292: LD_ADDR_VAR 0 1
17296: PUSH
17297: LD_VAR 0 2
17301: PUSH
17302: FOR_IN
17303: IFFALSE 17319
// begin SetLives ( i , 0 ) ;
17305: LD_VAR 0 1
17309: PPUSH
17310: LD_INT 0
17312: PPUSH
17313: CALL_OW 234
// end ;
17317: GO 17302
17319: POP
17320: POP
// end ;
17321: PPOPN 2
17323: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17324: LD_EXP 40
17328: PUSH
17329: LD_EXP 46
17333: AND
17334: IFFALSE 17418
17336: GO 17338
17338: DISABLE
17339: LD_INT 0
17341: PPUSH
17342: PPUSH
// begin enable ;
17343: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17344: LD_ADDR_VAR 0 2
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_OWVAR 2
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 32
17363: PUSH
17364: LD_INT 3
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PPUSH
17375: CALL_OW 69
17379: ST_TO_ADDR
// if not tmp then
17380: LD_VAR 0 2
17384: NOT
17385: IFFALSE 17389
// exit ;
17387: GO 17418
// for i in tmp do
17389: LD_ADDR_VAR 0 1
17393: PUSH
17394: LD_VAR 0 2
17398: PUSH
17399: FOR_IN
17400: IFFALSE 17416
// begin SetLives ( i , 0 ) ;
17402: LD_VAR 0 1
17406: PPUSH
17407: LD_INT 0
17409: PPUSH
17410: CALL_OW 234
// end ;
17414: GO 17399
17416: POP
17417: POP
// end ;
17418: PPOPN 2
17420: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17421: LD_EXP 40
17425: PUSH
17426: LD_EXP 43
17430: AND
17431: IFFALSE 17524
17433: GO 17435
17435: DISABLE
17436: LD_INT 0
17438: PPUSH
// begin enable ;
17439: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17440: LD_ADDR_VAR 0 1
17444: PUSH
17445: LD_INT 22
17447: PUSH
17448: LD_OWVAR 2
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: LD_INT 25
17462: PUSH
17463: LD_INT 5
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 25
17472: PUSH
17473: LD_INT 9
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 25
17482: PUSH
17483: LD_INT 8
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PPUSH
17500: CALL_OW 69
17504: PUSH
17505: FOR_IN
17506: IFFALSE 17522
// begin SetClass ( i , 1 ) ;
17508: LD_VAR 0 1
17512: PPUSH
17513: LD_INT 1
17515: PPUSH
17516: CALL_OW 336
// end ;
17520: GO 17505
17522: POP
17523: POP
// end ;
17524: PPOPN 1
17526: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17527: LD_EXP 40
17531: PUSH
17532: LD_EXP 44
17536: AND
17537: PUSH
17538: LD_OWVAR 65
17542: PUSH
17543: LD_INT 7
17545: LESS
17546: AND
17547: IFFALSE 17561
17549: GO 17551
17551: DISABLE
// begin enable ;
17552: ENABLE
// game_speed := 7 ;
17553: LD_ADDR_OWVAR 65
17557: PUSH
17558: LD_INT 7
17560: ST_TO_ADDR
// end ;
17561: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17562: LD_EXP 40
17566: PUSH
17567: LD_EXP 47
17571: AND
17572: IFFALSE 17774
17574: GO 17576
17576: DISABLE
17577: LD_INT 0
17579: PPUSH
17580: PPUSH
17581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17582: LD_ADDR_VAR 0 3
17586: PUSH
17587: LD_INT 81
17589: PUSH
17590: LD_OWVAR 2
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 21
17601: PUSH
17602: LD_INT 1
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 69
17617: ST_TO_ADDR
// if not tmp then
17618: LD_VAR 0 3
17622: NOT
17623: IFFALSE 17627
// exit ;
17625: GO 17774
// if tmp > 5 then
17627: LD_VAR 0 3
17631: PUSH
17632: LD_INT 5
17634: GREATER
17635: IFFALSE 17647
// k := 5 else
17637: LD_ADDR_VAR 0 2
17641: PUSH
17642: LD_INT 5
17644: ST_TO_ADDR
17645: GO 17657
// k := tmp ;
17647: LD_ADDR_VAR 0 2
17651: PUSH
17652: LD_VAR 0 3
17656: ST_TO_ADDR
// for i := 1 to k do
17657: LD_ADDR_VAR 0 1
17661: PUSH
17662: DOUBLE
17663: LD_INT 1
17665: DEC
17666: ST_TO_ADDR
17667: LD_VAR 0 2
17671: PUSH
17672: FOR_TO
17673: IFFALSE 17772
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17675: LD_VAR 0 3
17679: PUSH
17680: LD_VAR 0 1
17684: ARRAY
17685: PPUSH
17686: LD_VAR 0 1
17690: PUSH
17691: LD_INT 4
17693: MOD
17694: PUSH
17695: LD_INT 1
17697: PLUS
17698: PPUSH
17699: CALL_OW 259
17703: PUSH
17704: LD_INT 10
17706: LESS
17707: IFFALSE 17770
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17709: LD_VAR 0 3
17713: PUSH
17714: LD_VAR 0 1
17718: ARRAY
17719: PPUSH
17720: LD_VAR 0 1
17724: PUSH
17725: LD_INT 4
17727: MOD
17728: PUSH
17729: LD_INT 1
17731: PLUS
17732: PPUSH
17733: LD_VAR 0 3
17737: PUSH
17738: LD_VAR 0 1
17742: ARRAY
17743: PPUSH
17744: LD_VAR 0 1
17748: PUSH
17749: LD_INT 4
17751: MOD
17752: PUSH
17753: LD_INT 1
17755: PLUS
17756: PPUSH
17757: CALL_OW 259
17761: PUSH
17762: LD_INT 1
17764: PLUS
17765: PPUSH
17766: CALL_OW 237
17770: GO 17672
17772: POP
17773: POP
// end ;
17774: PPOPN 3
17776: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17777: LD_EXP 40
17781: PUSH
17782: LD_EXP 48
17786: AND
17787: IFFALSE 17807
17789: GO 17791
17791: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17792: LD_INT 4
17794: PPUSH
17795: LD_OWVAR 2
17799: PPUSH
17800: LD_INT 0
17802: PPUSH
17803: CALL_OW 324
17807: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17808: LD_EXP 40
17812: PUSH
17813: LD_EXP 77
17817: AND
17818: IFFALSE 17838
17820: GO 17822
17822: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17823: LD_INT 19
17825: PPUSH
17826: LD_OWVAR 2
17830: PPUSH
17831: LD_INT 0
17833: PPUSH
17834: CALL_OW 324
17838: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17839: LD_EXP 40
17843: PUSH
17844: LD_EXP 49
17848: AND
17849: IFFALSE 17951
17851: GO 17853
17853: DISABLE
17854: LD_INT 0
17856: PPUSH
17857: PPUSH
// begin enable ;
17858: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17859: LD_ADDR_VAR 0 2
17863: PUSH
17864: LD_INT 22
17866: PUSH
17867: LD_OWVAR 2
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 2
17878: PUSH
17879: LD_INT 34
17881: PUSH
17882: LD_INT 11
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 34
17891: PUSH
17892: LD_INT 30
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 69
17912: ST_TO_ADDR
// if not tmp then
17913: LD_VAR 0 2
17917: NOT
17918: IFFALSE 17922
// exit ;
17920: GO 17951
// for i in tmp do
17922: LD_ADDR_VAR 0 1
17926: PUSH
17927: LD_VAR 0 2
17931: PUSH
17932: FOR_IN
17933: IFFALSE 17949
// begin SetLives ( i , 0 ) ;
17935: LD_VAR 0 1
17939: PPUSH
17940: LD_INT 0
17942: PPUSH
17943: CALL_OW 234
// end ;
17947: GO 17932
17949: POP
17950: POP
// end ;
17951: PPOPN 2
17953: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17954: LD_EXP 40
17958: PUSH
17959: LD_EXP 50
17963: AND
17964: IFFALSE 17984
17966: GO 17968
17968: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17969: LD_INT 32
17971: PPUSH
17972: LD_OWVAR 2
17976: PPUSH
17977: LD_INT 0
17979: PPUSH
17980: CALL_OW 324
17984: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17985: LD_EXP 40
17989: PUSH
17990: LD_EXP 51
17994: AND
17995: IFFALSE 18176
17997: GO 17999
17999: DISABLE
18000: LD_INT 0
18002: PPUSH
18003: PPUSH
18004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18005: LD_ADDR_VAR 0 2
18009: PUSH
18010: LD_INT 22
18012: PUSH
18013: LD_OWVAR 2
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 33
18024: PUSH
18025: LD_INT 3
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PPUSH
18036: CALL_OW 69
18040: ST_TO_ADDR
// if not tmp then
18041: LD_VAR 0 2
18045: NOT
18046: IFFALSE 18050
// exit ;
18048: GO 18176
// side := 0 ;
18050: LD_ADDR_VAR 0 3
18054: PUSH
18055: LD_INT 0
18057: ST_TO_ADDR
// for i := 1 to 8 do
18058: LD_ADDR_VAR 0 1
18062: PUSH
18063: DOUBLE
18064: LD_INT 1
18066: DEC
18067: ST_TO_ADDR
18068: LD_INT 8
18070: PUSH
18071: FOR_TO
18072: IFFALSE 18120
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18074: LD_OWVAR 2
18078: PUSH
18079: LD_VAR 0 1
18083: NONEQUAL
18084: PUSH
18085: LD_OWVAR 2
18089: PPUSH
18090: LD_VAR 0 1
18094: PPUSH
18095: CALL_OW 81
18099: PUSH
18100: LD_INT 2
18102: EQUAL
18103: AND
18104: IFFALSE 18118
// begin side := i ;
18106: LD_ADDR_VAR 0 3
18110: PUSH
18111: LD_VAR 0 1
18115: ST_TO_ADDR
// break ;
18116: GO 18120
// end ;
18118: GO 18071
18120: POP
18121: POP
// if not side then
18122: LD_VAR 0 3
18126: NOT
18127: IFFALSE 18131
// exit ;
18129: GO 18176
// for i := 1 to tmp do
18131: LD_ADDR_VAR 0 1
18135: PUSH
18136: DOUBLE
18137: LD_INT 1
18139: DEC
18140: ST_TO_ADDR
18141: LD_VAR 0 2
18145: PUSH
18146: FOR_TO
18147: IFFALSE 18174
// if Prob ( 60 ) then
18149: LD_INT 60
18151: PPUSH
18152: CALL_OW 13
18156: IFFALSE 18172
// SetSide ( i , side ) ;
18158: LD_VAR 0 1
18162: PPUSH
18163: LD_VAR 0 3
18167: PPUSH
18168: CALL_OW 235
18172: GO 18146
18174: POP
18175: POP
// end ;
18176: PPOPN 3
18178: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18179: LD_EXP 40
18183: PUSH
18184: LD_EXP 53
18188: AND
18189: IFFALSE 18308
18191: GO 18193
18193: DISABLE
18194: LD_INT 0
18196: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18197: LD_ADDR_VAR 0 1
18201: PUSH
18202: LD_INT 22
18204: PUSH
18205: LD_OWVAR 2
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 3
18226: PUSH
18227: LD_INT 23
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: LIST
18245: PPUSH
18246: CALL_OW 69
18250: PUSH
18251: FOR_IN
18252: IFFALSE 18306
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 257
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: LD_INT 2
18269: PUSH
18270: LD_INT 3
18272: PUSH
18273: LD_INT 4
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: IN
18282: IFFALSE 18304
// SetClass ( un , rand ( 1 , 4 ) ) ;
18284: LD_VAR 0 1
18288: PPUSH
18289: LD_INT 1
18291: PPUSH
18292: LD_INT 4
18294: PPUSH
18295: CALL_OW 12
18299: PPUSH
18300: CALL_OW 336
18304: GO 18251
18306: POP
18307: POP
// end ;
18308: PPOPN 1
18310: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18311: LD_EXP 40
18315: PUSH
18316: LD_EXP 52
18320: AND
18321: IFFALSE 18400
18323: GO 18325
18325: DISABLE
18326: LD_INT 0
18328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18329: LD_ADDR_VAR 0 1
18333: PUSH
18334: LD_INT 22
18336: PUSH
18337: LD_OWVAR 2
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 21
18348: PUSH
18349: LD_INT 3
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PPUSH
18360: CALL_OW 69
18364: ST_TO_ADDR
// if not tmp then
18365: LD_VAR 0 1
18369: NOT
18370: IFFALSE 18374
// exit ;
18372: GO 18400
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18374: LD_VAR 0 1
18378: PUSH
18379: LD_INT 1
18381: PPUSH
18382: LD_VAR 0 1
18386: PPUSH
18387: CALL_OW 12
18391: ARRAY
18392: PPUSH
18393: LD_INT 100
18395: PPUSH
18396: CALL_OW 234
// end ;
18400: PPOPN 1
18402: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18403: LD_EXP 40
18407: PUSH
18408: LD_EXP 54
18412: AND
18413: IFFALSE 18511
18415: GO 18417
18417: DISABLE
18418: LD_INT 0
18420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18421: LD_ADDR_VAR 0 1
18425: PUSH
18426: LD_INT 22
18428: PUSH
18429: LD_OWVAR 2
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 21
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PPUSH
18452: CALL_OW 69
18456: ST_TO_ADDR
// if not tmp then
18457: LD_VAR 0 1
18461: NOT
18462: IFFALSE 18466
// exit ;
18464: GO 18511
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18466: LD_VAR 0 1
18470: PUSH
18471: LD_INT 1
18473: PPUSH
18474: LD_VAR 0 1
18478: PPUSH
18479: CALL_OW 12
18483: ARRAY
18484: PPUSH
18485: LD_INT 1
18487: PPUSH
18488: LD_INT 4
18490: PPUSH
18491: CALL_OW 12
18495: PPUSH
18496: LD_INT 3000
18498: PPUSH
18499: LD_INT 9000
18501: PPUSH
18502: CALL_OW 12
18506: PPUSH
18507: CALL_OW 492
// end ;
18511: PPOPN 1
18513: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18514: LD_EXP 40
18518: PUSH
18519: LD_EXP 55
18523: AND
18524: IFFALSE 18544
18526: GO 18528
18528: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18529: LD_INT 1
18531: PPUSH
18532: LD_OWVAR 2
18536: PPUSH
18537: LD_INT 0
18539: PPUSH
18540: CALL_OW 324
18544: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18545: LD_EXP 40
18549: PUSH
18550: LD_EXP 56
18554: AND
18555: IFFALSE 18638
18557: GO 18559
18559: DISABLE
18560: LD_INT 0
18562: PPUSH
18563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18564: LD_ADDR_VAR 0 2
18568: PUSH
18569: LD_INT 22
18571: PUSH
18572: LD_OWVAR 2
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 21
18583: PUSH
18584: LD_INT 3
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: ST_TO_ADDR
// if not tmp then
18600: LD_VAR 0 2
18604: NOT
18605: IFFALSE 18609
// exit ;
18607: GO 18638
// for i in tmp do
18609: LD_ADDR_VAR 0 1
18613: PUSH
18614: LD_VAR 0 2
18618: PUSH
18619: FOR_IN
18620: IFFALSE 18636
// SetBLevel ( i , 10 ) ;
18622: LD_VAR 0 1
18626: PPUSH
18627: LD_INT 10
18629: PPUSH
18630: CALL_OW 241
18634: GO 18619
18636: POP
18637: POP
// end ;
18638: PPOPN 2
18640: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18641: LD_EXP 40
18645: PUSH
18646: LD_EXP 57
18650: AND
18651: IFFALSE 18762
18653: GO 18655
18655: DISABLE
18656: LD_INT 0
18658: PPUSH
18659: PPUSH
18660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18661: LD_ADDR_VAR 0 3
18665: PUSH
18666: LD_INT 22
18668: PUSH
18669: LD_OWVAR 2
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 25
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PPUSH
18692: CALL_OW 69
18696: ST_TO_ADDR
// if not tmp then
18697: LD_VAR 0 3
18701: NOT
18702: IFFALSE 18706
// exit ;
18704: GO 18762
// un := tmp [ rand ( 1 , tmp ) ] ;
18706: LD_ADDR_VAR 0 2
18710: PUSH
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 1
18718: PPUSH
18719: LD_VAR 0 3
18723: PPUSH
18724: CALL_OW 12
18728: ARRAY
18729: ST_TO_ADDR
// if Crawls ( un ) then
18730: LD_VAR 0 2
18734: PPUSH
18735: CALL_OW 318
18739: IFFALSE 18750
// ComWalk ( un ) ;
18741: LD_VAR 0 2
18745: PPUSH
18746: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18750: LD_VAR 0 2
18754: PPUSH
18755: LD_INT 5
18757: PPUSH
18758: CALL_OW 336
// end ;
18762: PPOPN 3
18764: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18765: LD_EXP 40
18769: PUSH
18770: LD_EXP 58
18774: AND
18775: PUSH
18776: LD_OWVAR 67
18780: PUSH
18781: LD_INT 3
18783: LESS
18784: AND
18785: IFFALSE 18804
18787: GO 18789
18789: DISABLE
// Difficulty := Difficulty + 1 ;
18790: LD_ADDR_OWVAR 67
18794: PUSH
18795: LD_OWVAR 67
18799: PUSH
18800: LD_INT 1
18802: PLUS
18803: ST_TO_ADDR
18804: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18805: LD_EXP 40
18809: PUSH
18810: LD_EXP 59
18814: AND
18815: IFFALSE 18918
18817: GO 18819
18819: DISABLE
18820: LD_INT 0
18822: PPUSH
// begin for i := 1 to 5 do
18823: LD_ADDR_VAR 0 1
18827: PUSH
18828: DOUBLE
18829: LD_INT 1
18831: DEC
18832: ST_TO_ADDR
18833: LD_INT 5
18835: PUSH
18836: FOR_TO
18837: IFFALSE 18916
// begin uc_nation := nation_nature ;
18839: LD_ADDR_OWVAR 21
18843: PUSH
18844: LD_INT 0
18846: ST_TO_ADDR
// uc_side := 0 ;
18847: LD_ADDR_OWVAR 20
18851: PUSH
18852: LD_INT 0
18854: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18855: LD_ADDR_OWVAR 29
18859: PUSH
18860: LD_INT 12
18862: PUSH
18863: LD_INT 12
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: ST_TO_ADDR
// hc_agressivity := 20 ;
18870: LD_ADDR_OWVAR 35
18874: PUSH
18875: LD_INT 20
18877: ST_TO_ADDR
// hc_class := class_tiger ;
18878: LD_ADDR_OWVAR 28
18882: PUSH
18883: LD_INT 14
18885: ST_TO_ADDR
// hc_gallery :=  ;
18886: LD_ADDR_OWVAR 33
18890: PUSH
18891: LD_STRING 
18893: ST_TO_ADDR
// hc_name :=  ;
18894: LD_ADDR_OWVAR 26
18898: PUSH
18899: LD_STRING 
18901: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18902: CALL_OW 44
18906: PPUSH
18907: LD_INT 0
18909: PPUSH
18910: CALL_OW 51
// end ;
18914: GO 18836
18916: POP
18917: POP
// end ;
18918: PPOPN 1
18920: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18921: LD_EXP 40
18925: PUSH
18926: LD_EXP 60
18930: AND
18931: IFFALSE 18940
18933: GO 18935
18935: DISABLE
// StreamSibBomb ;
18936: CALL 18941 0 0
18940: END
// export function StreamSibBomb ; var i , x , y ; begin
18941: LD_INT 0
18943: PPUSH
18944: PPUSH
18945: PPUSH
18946: PPUSH
// result := false ;
18947: LD_ADDR_VAR 0 1
18951: PUSH
18952: LD_INT 0
18954: ST_TO_ADDR
// for i := 1 to 16 do
18955: LD_ADDR_VAR 0 2
18959: PUSH
18960: DOUBLE
18961: LD_INT 1
18963: DEC
18964: ST_TO_ADDR
18965: LD_INT 16
18967: PUSH
18968: FOR_TO
18969: IFFALSE 19168
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18971: LD_ADDR_VAR 0 3
18975: PUSH
18976: LD_INT 10
18978: PUSH
18979: LD_INT 20
18981: PUSH
18982: LD_INT 30
18984: PUSH
18985: LD_INT 40
18987: PUSH
18988: LD_INT 50
18990: PUSH
18991: LD_INT 60
18993: PUSH
18994: LD_INT 70
18996: PUSH
18997: LD_INT 80
18999: PUSH
19000: LD_INT 90
19002: PUSH
19003: LD_INT 100
19005: PUSH
19006: LD_INT 110
19008: PUSH
19009: LD_INT 120
19011: PUSH
19012: LD_INT 130
19014: PUSH
19015: LD_INT 140
19017: PUSH
19018: LD_INT 150
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PPUSH
19041: LD_INT 15
19043: PPUSH
19044: CALL_OW 12
19048: ARRAY
19049: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19050: LD_ADDR_VAR 0 4
19054: PUSH
19055: LD_INT 10
19057: PUSH
19058: LD_INT 20
19060: PUSH
19061: LD_INT 30
19063: PUSH
19064: LD_INT 40
19066: PUSH
19067: LD_INT 50
19069: PUSH
19070: LD_INT 60
19072: PUSH
19073: LD_INT 70
19075: PUSH
19076: LD_INT 80
19078: PUSH
19079: LD_INT 90
19081: PUSH
19082: LD_INT 100
19084: PUSH
19085: LD_INT 110
19087: PUSH
19088: LD_INT 120
19090: PUSH
19091: LD_INT 130
19093: PUSH
19094: LD_INT 140
19096: PUSH
19097: LD_INT 150
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: PPUSH
19120: LD_INT 15
19122: PPUSH
19123: CALL_OW 12
19127: ARRAY
19128: ST_TO_ADDR
// if ValidHex ( x , y ) then
19129: LD_VAR 0 3
19133: PPUSH
19134: LD_VAR 0 4
19138: PPUSH
19139: CALL_OW 488
19143: IFFALSE 19166
// begin result := [ x , y ] ;
19145: LD_ADDR_VAR 0 1
19149: PUSH
19150: LD_VAR 0 3
19154: PUSH
19155: LD_VAR 0 4
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: ST_TO_ADDR
// break ;
19164: GO 19168
// end ; end ;
19166: GO 18968
19168: POP
19169: POP
// if result then
19170: LD_VAR 0 1
19174: IFFALSE 19234
// begin ToLua ( playSibBomb() ) ;
19176: LD_STRING playSibBomb()
19178: PPUSH
19179: CALL_OW 559
// wait ( 0 0$14 ) ;
19183: LD_INT 490
19185: PPUSH
19186: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19190: LD_VAR 0 1
19194: PUSH
19195: LD_INT 1
19197: ARRAY
19198: PPUSH
19199: LD_VAR 0 1
19203: PUSH
19204: LD_INT 2
19206: ARRAY
19207: PPUSH
19208: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19212: LD_VAR 0 1
19216: PUSH
19217: LD_INT 1
19219: ARRAY
19220: PPUSH
19221: LD_VAR 0 1
19225: PUSH
19226: LD_INT 2
19228: ARRAY
19229: PPUSH
19230: CALL_OW 429
// end ; end ;
19234: LD_VAR 0 1
19238: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19239: LD_EXP 40
19243: PUSH
19244: LD_EXP 62
19248: AND
19249: IFFALSE 19261
19251: GO 19253
19253: DISABLE
// YouLost (  ) ;
19254: LD_STRING 
19256: PPUSH
19257: CALL_OW 104
19261: END
// every 0 0$1 trigger StreamModeActive and sFog do
19262: LD_EXP 40
19266: PUSH
19267: LD_EXP 61
19271: AND
19272: IFFALSE 19286
19274: GO 19276
19276: DISABLE
// FogOff ( your_side ) ;
19277: LD_OWVAR 2
19281: PPUSH
19282: CALL_OW 344
19286: END
// every 0 0$1 trigger StreamModeActive and sSun do
19287: LD_EXP 40
19291: PUSH
19292: LD_EXP 63
19296: AND
19297: IFFALSE 19325
19299: GO 19301
19301: DISABLE
// begin solar_recharge_percent := 0 ;
19302: LD_ADDR_OWVAR 79
19306: PUSH
19307: LD_INT 0
19309: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19310: LD_INT 10500
19312: PPUSH
19313: CALL_OW 67
// solar_recharge_percent := 100 ;
19317: LD_ADDR_OWVAR 79
19321: PUSH
19322: LD_INT 100
19324: ST_TO_ADDR
// end ;
19325: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19326: LD_EXP 40
19330: PUSH
19331: LD_EXP 64
19335: AND
19336: IFFALSE 19575
19338: GO 19340
19340: DISABLE
19341: LD_INT 0
19343: PPUSH
19344: PPUSH
19345: PPUSH
// begin tmp := [ ] ;
19346: LD_ADDR_VAR 0 3
19350: PUSH
19351: EMPTY
19352: ST_TO_ADDR
// for i := 1 to 6 do
19353: LD_ADDR_VAR 0 1
19357: PUSH
19358: DOUBLE
19359: LD_INT 1
19361: DEC
19362: ST_TO_ADDR
19363: LD_INT 6
19365: PUSH
19366: FOR_TO
19367: IFFALSE 19472
// begin uc_nation := nation_nature ;
19369: LD_ADDR_OWVAR 21
19373: PUSH
19374: LD_INT 0
19376: ST_TO_ADDR
// uc_side := 0 ;
19377: LD_ADDR_OWVAR 20
19381: PUSH
19382: LD_INT 0
19384: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19385: LD_ADDR_OWVAR 29
19389: PUSH
19390: LD_INT 12
19392: PUSH
19393: LD_INT 12
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: ST_TO_ADDR
// hc_agressivity := 20 ;
19400: LD_ADDR_OWVAR 35
19404: PUSH
19405: LD_INT 20
19407: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19408: LD_ADDR_OWVAR 28
19412: PUSH
19413: LD_INT 17
19415: ST_TO_ADDR
// hc_gallery :=  ;
19416: LD_ADDR_OWVAR 33
19420: PUSH
19421: LD_STRING 
19423: ST_TO_ADDR
// hc_name :=  ;
19424: LD_ADDR_OWVAR 26
19428: PUSH
19429: LD_STRING 
19431: ST_TO_ADDR
// un := CreateHuman ;
19432: LD_ADDR_VAR 0 2
19436: PUSH
19437: CALL_OW 44
19441: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19442: LD_VAR 0 2
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 51
// tmp := tmp ^ un ;
19454: LD_ADDR_VAR 0 3
19458: PUSH
19459: LD_VAR 0 3
19463: PUSH
19464: LD_VAR 0 2
19468: ADD
19469: ST_TO_ADDR
// end ;
19470: GO 19366
19472: POP
19473: POP
// repeat wait ( 0 0$1 ) ;
19474: LD_INT 35
19476: PPUSH
19477: CALL_OW 67
// for un in tmp do
19481: LD_ADDR_VAR 0 2
19485: PUSH
19486: LD_VAR 0 3
19490: PUSH
19491: FOR_IN
19492: IFFALSE 19566
// begin if IsDead ( un ) then
19494: LD_VAR 0 2
19498: PPUSH
19499: CALL_OW 301
19503: IFFALSE 19523
// begin tmp := tmp diff un ;
19505: LD_ADDR_VAR 0 3
19509: PUSH
19510: LD_VAR 0 3
19514: PUSH
19515: LD_VAR 0 2
19519: DIFF
19520: ST_TO_ADDR
// continue ;
19521: GO 19491
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19523: LD_VAR 0 2
19527: PPUSH
19528: LD_INT 3
19530: PUSH
19531: LD_INT 22
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PPUSH
19545: CALL_OW 69
19549: PPUSH
19550: LD_VAR 0 2
19554: PPUSH
19555: CALL_OW 74
19559: PPUSH
19560: CALL_OW 115
// end ;
19564: GO 19491
19566: POP
19567: POP
// until not tmp ;
19568: LD_VAR 0 3
19572: NOT
19573: IFFALSE 19474
// end ;
19575: PPOPN 3
19577: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19578: LD_EXP 40
19582: PUSH
19583: LD_EXP 65
19587: AND
19588: IFFALSE 19642
19590: GO 19592
19592: DISABLE
// begin ToLua ( displayTroll(); ) ;
19593: LD_STRING displayTroll();
19595: PPUSH
19596: CALL_OW 559
// wait ( 3 3$00 ) ;
19600: LD_INT 6300
19602: PPUSH
19603: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19607: LD_STRING hideTroll();
19609: PPUSH
19610: CALL_OW 559
// wait ( 1 1$00 ) ;
19614: LD_INT 2100
19616: PPUSH
19617: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19621: LD_STRING displayTroll();
19623: PPUSH
19624: CALL_OW 559
// wait ( 1 1$00 ) ;
19628: LD_INT 2100
19630: PPUSH
19631: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19635: LD_STRING hideTroll();
19637: PPUSH
19638: CALL_OW 559
// end ;
19642: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19643: LD_EXP 40
19647: PUSH
19648: LD_EXP 66
19652: AND
19653: IFFALSE 19716
19655: GO 19657
19657: DISABLE
19658: LD_INT 0
19660: PPUSH
// begin p := 0 ;
19661: LD_ADDR_VAR 0 1
19665: PUSH
19666: LD_INT 0
19668: ST_TO_ADDR
// repeat game_speed := 1 ;
19669: LD_ADDR_OWVAR 65
19673: PUSH
19674: LD_INT 1
19676: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19677: LD_INT 35
19679: PPUSH
19680: CALL_OW 67
// p := p + 1 ;
19684: LD_ADDR_VAR 0 1
19688: PUSH
19689: LD_VAR 0 1
19693: PUSH
19694: LD_INT 1
19696: PLUS
19697: ST_TO_ADDR
// until p >= 60 ;
19698: LD_VAR 0 1
19702: PUSH
19703: LD_INT 60
19705: GREATEREQUAL
19706: IFFALSE 19669
// game_speed := 4 ;
19708: LD_ADDR_OWVAR 65
19712: PUSH
19713: LD_INT 4
19715: ST_TO_ADDR
// end ;
19716: PPOPN 1
19718: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19719: LD_EXP 40
19723: PUSH
19724: LD_EXP 67
19728: AND
19729: IFFALSE 19875
19731: GO 19733
19733: DISABLE
19734: LD_INT 0
19736: PPUSH
19737: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19738: LD_ADDR_VAR 0 1
19742: PUSH
19743: LD_INT 22
19745: PUSH
19746: LD_OWVAR 2
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: LD_INT 30
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 30
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: LIST
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PPUSH
19787: CALL_OW 69
19791: ST_TO_ADDR
// if not depot then
19792: LD_VAR 0 1
19796: NOT
19797: IFFALSE 19801
// exit ;
19799: GO 19875
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19801: LD_ADDR_VAR 0 2
19805: PUSH
19806: LD_VAR 0 1
19810: PUSH
19811: LD_INT 1
19813: PPUSH
19814: LD_VAR 0 1
19818: PPUSH
19819: CALL_OW 12
19823: ARRAY
19824: PPUSH
19825: CALL_OW 274
19829: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19830: LD_VAR 0 2
19834: PPUSH
19835: LD_INT 1
19837: PPUSH
19838: LD_INT 0
19840: PPUSH
19841: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19845: LD_VAR 0 2
19849: PPUSH
19850: LD_INT 2
19852: PPUSH
19853: LD_INT 0
19855: PPUSH
19856: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19860: LD_VAR 0 2
19864: PPUSH
19865: LD_INT 3
19867: PPUSH
19868: LD_INT 0
19870: PPUSH
19871: CALL_OW 277
// end ;
19875: PPOPN 2
19877: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19878: LD_EXP 40
19882: PUSH
19883: LD_EXP 68
19887: AND
19888: IFFALSE 19985
19890: GO 19892
19892: DISABLE
19893: LD_INT 0
19895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19896: LD_ADDR_VAR 0 1
19900: PUSH
19901: LD_INT 22
19903: PUSH
19904: LD_OWVAR 2
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 21
19915: PUSH
19916: LD_INT 1
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 3
19925: PUSH
19926: LD_INT 23
19928: PUSH
19929: LD_INT 0
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: LIST
19944: PPUSH
19945: CALL_OW 69
19949: ST_TO_ADDR
// if not tmp then
19950: LD_VAR 0 1
19954: NOT
19955: IFFALSE 19959
// exit ;
19957: GO 19985
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19959: LD_VAR 0 1
19963: PUSH
19964: LD_INT 1
19966: PPUSH
19967: LD_VAR 0 1
19971: PPUSH
19972: CALL_OW 12
19976: ARRAY
19977: PPUSH
19978: LD_INT 200
19980: PPUSH
19981: CALL_OW 234
// end ;
19985: PPOPN 1
19987: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19988: LD_EXP 40
19992: PUSH
19993: LD_EXP 69
19997: AND
19998: IFFALSE 20077
20000: GO 20002
20002: DISABLE
20003: LD_INT 0
20005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20006: LD_ADDR_VAR 0 1
20010: PUSH
20011: LD_INT 22
20013: PUSH
20014: LD_OWVAR 2
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 21
20025: PUSH
20026: LD_INT 2
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PPUSH
20037: CALL_OW 69
20041: ST_TO_ADDR
// if not tmp then
20042: LD_VAR 0 1
20046: NOT
20047: IFFALSE 20051
// exit ;
20049: GO 20077
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20051: LD_VAR 0 1
20055: PUSH
20056: LD_INT 1
20058: PPUSH
20059: LD_VAR 0 1
20063: PPUSH
20064: CALL_OW 12
20068: ARRAY
20069: PPUSH
20070: LD_INT 60
20072: PPUSH
20073: CALL_OW 234
// end ;
20077: PPOPN 1
20079: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20080: LD_EXP 40
20084: PUSH
20085: LD_EXP 70
20089: AND
20090: IFFALSE 20189
20092: GO 20094
20094: DISABLE
20095: LD_INT 0
20097: PPUSH
20098: PPUSH
// begin enable ;
20099: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20100: LD_ADDR_VAR 0 1
20104: PUSH
20105: LD_INT 22
20107: PUSH
20108: LD_OWVAR 2
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 61
20119: PUSH
20120: EMPTY
20121: LIST
20122: PUSH
20123: LD_INT 33
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: LIST
20137: PPUSH
20138: CALL_OW 69
20142: ST_TO_ADDR
// if not tmp then
20143: LD_VAR 0 1
20147: NOT
20148: IFFALSE 20152
// exit ;
20150: GO 20189
// for i in tmp do
20152: LD_ADDR_VAR 0 2
20156: PUSH
20157: LD_VAR 0 1
20161: PUSH
20162: FOR_IN
20163: IFFALSE 20187
// if IsControledBy ( i ) then
20165: LD_VAR 0 2
20169: PPUSH
20170: CALL_OW 312
20174: IFFALSE 20185
// ComUnlink ( i ) ;
20176: LD_VAR 0 2
20180: PPUSH
20181: CALL_OW 136
20185: GO 20162
20187: POP
20188: POP
// end ;
20189: PPOPN 2
20191: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20192: LD_EXP 40
20196: PUSH
20197: LD_EXP 71
20201: AND
20202: IFFALSE 20342
20204: GO 20206
20206: DISABLE
20207: LD_INT 0
20209: PPUSH
20210: PPUSH
// begin ToLua ( displayPowell(); ) ;
20211: LD_STRING displayPowell();
20213: PPUSH
20214: CALL_OW 559
// uc_side := 0 ;
20218: LD_ADDR_OWVAR 20
20222: PUSH
20223: LD_INT 0
20225: ST_TO_ADDR
// uc_nation := 2 ;
20226: LD_ADDR_OWVAR 21
20230: PUSH
20231: LD_INT 2
20233: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20234: LD_ADDR_OWVAR 37
20238: PUSH
20239: LD_INT 14
20241: ST_TO_ADDR
// vc_engine := engine_siberite ;
20242: LD_ADDR_OWVAR 39
20246: PUSH
20247: LD_INT 3
20249: ST_TO_ADDR
// vc_control := control_apeman ;
20250: LD_ADDR_OWVAR 38
20254: PUSH
20255: LD_INT 5
20257: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20258: LD_ADDR_OWVAR 40
20262: PUSH
20263: LD_INT 29
20265: ST_TO_ADDR
// un := CreateVehicle ;
20266: LD_ADDR_VAR 0 2
20270: PUSH
20271: CALL_OW 45
20275: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20276: LD_VAR 0 2
20280: PPUSH
20281: LD_INT 1
20283: PPUSH
20284: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20288: LD_INT 35
20290: PPUSH
20291: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20295: LD_VAR 0 2
20299: PPUSH
20300: LD_INT 22
20302: PUSH
20303: LD_OWVAR 2
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PPUSH
20312: CALL_OW 69
20316: PPUSH
20317: LD_VAR 0 2
20321: PPUSH
20322: CALL_OW 74
20326: PPUSH
20327: CALL_OW 115
// until IsDead ( un ) ;
20331: LD_VAR 0 2
20335: PPUSH
20336: CALL_OW 301
20340: IFFALSE 20288
// end ;
20342: PPOPN 2
20344: END
// every 0 0$1 trigger StreamModeActive and sStu do
20345: LD_EXP 40
20349: PUSH
20350: LD_EXP 79
20354: AND
20355: IFFALSE 20371
20357: GO 20359
20359: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20360: LD_STRING displayStucuk();
20362: PPUSH
20363: CALL_OW 559
// ResetFog ;
20367: CALL_OW 335
// end ;
20371: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20372: LD_EXP 40
20376: PUSH
20377: LD_EXP 72
20381: AND
20382: IFFALSE 20523
20384: GO 20386
20386: DISABLE
20387: LD_INT 0
20389: PPUSH
20390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20391: LD_ADDR_VAR 0 2
20395: PUSH
20396: LD_INT 22
20398: PUSH
20399: LD_OWVAR 2
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 21
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PPUSH
20422: CALL_OW 69
20426: ST_TO_ADDR
// if not tmp then
20427: LD_VAR 0 2
20431: NOT
20432: IFFALSE 20436
// exit ;
20434: GO 20523
// un := tmp [ rand ( 1 , tmp ) ] ;
20436: LD_ADDR_VAR 0 1
20440: PUSH
20441: LD_VAR 0 2
20445: PUSH
20446: LD_INT 1
20448: PPUSH
20449: LD_VAR 0 2
20453: PPUSH
20454: CALL_OW 12
20458: ARRAY
20459: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20460: LD_VAR 0 1
20464: PPUSH
20465: LD_INT 0
20467: PPUSH
20468: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20472: LD_VAR 0 1
20476: PPUSH
20477: LD_OWVAR 3
20481: PUSH
20482: LD_VAR 0 1
20486: DIFF
20487: PPUSH
20488: LD_VAR 0 1
20492: PPUSH
20493: CALL_OW 74
20497: PPUSH
20498: CALL_OW 115
// wait ( 0 0$20 ) ;
20502: LD_INT 700
20504: PPUSH
20505: CALL_OW 67
// SetSide ( un , your_side ) ;
20509: LD_VAR 0 1
20513: PPUSH
20514: LD_OWVAR 2
20518: PPUSH
20519: CALL_OW 235
// end ;
20523: PPOPN 2
20525: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20526: LD_EXP 40
20530: PUSH
20531: LD_EXP 73
20535: AND
20536: IFFALSE 20642
20538: GO 20540
20540: DISABLE
20541: LD_INT 0
20543: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20544: LD_ADDR_VAR 0 1
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_OWVAR 2
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: LD_INT 30
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 30
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: LIST
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PPUSH
20593: CALL_OW 69
20597: ST_TO_ADDR
// if not depot then
20598: LD_VAR 0 1
20602: NOT
20603: IFFALSE 20607
// exit ;
20605: GO 20642
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20607: LD_VAR 0 1
20611: PUSH
20612: LD_INT 1
20614: ARRAY
20615: PPUSH
20616: CALL_OW 250
20620: PPUSH
20621: LD_VAR 0 1
20625: PUSH
20626: LD_INT 1
20628: ARRAY
20629: PPUSH
20630: CALL_OW 251
20634: PPUSH
20635: LD_INT 70
20637: PPUSH
20638: CALL_OW 495
// end ;
20642: PPOPN 1
20644: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20645: LD_EXP 40
20649: PUSH
20650: LD_EXP 74
20654: AND
20655: IFFALSE 20866
20657: GO 20659
20659: DISABLE
20660: LD_INT 0
20662: PPUSH
20663: PPUSH
20664: PPUSH
20665: PPUSH
20666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20667: LD_ADDR_VAR 0 5
20671: PUSH
20672: LD_INT 22
20674: PUSH
20675: LD_OWVAR 2
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 21
20686: PUSH
20687: LD_INT 1
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PPUSH
20698: CALL_OW 69
20702: ST_TO_ADDR
// if not tmp then
20703: LD_VAR 0 5
20707: NOT
20708: IFFALSE 20712
// exit ;
20710: GO 20866
// for i in tmp do
20712: LD_ADDR_VAR 0 1
20716: PUSH
20717: LD_VAR 0 5
20721: PUSH
20722: FOR_IN
20723: IFFALSE 20864
// begin d := rand ( 0 , 5 ) ;
20725: LD_ADDR_VAR 0 4
20729: PUSH
20730: LD_INT 0
20732: PPUSH
20733: LD_INT 5
20735: PPUSH
20736: CALL_OW 12
20740: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20741: LD_ADDR_VAR 0 2
20745: PUSH
20746: LD_VAR 0 1
20750: PPUSH
20751: CALL_OW 250
20755: PPUSH
20756: LD_VAR 0 4
20760: PPUSH
20761: LD_INT 3
20763: PPUSH
20764: LD_INT 12
20766: PPUSH
20767: CALL_OW 12
20771: PPUSH
20772: CALL_OW 272
20776: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20777: LD_ADDR_VAR 0 3
20781: PUSH
20782: LD_VAR 0 1
20786: PPUSH
20787: CALL_OW 251
20791: PPUSH
20792: LD_VAR 0 4
20796: PPUSH
20797: LD_INT 3
20799: PPUSH
20800: LD_INT 12
20802: PPUSH
20803: CALL_OW 12
20807: PPUSH
20808: CALL_OW 273
20812: ST_TO_ADDR
// if ValidHex ( x , y ) then
20813: LD_VAR 0 2
20817: PPUSH
20818: LD_VAR 0 3
20822: PPUSH
20823: CALL_OW 488
20827: IFFALSE 20862
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20829: LD_VAR 0 1
20833: PPUSH
20834: LD_VAR 0 2
20838: PPUSH
20839: LD_VAR 0 3
20843: PPUSH
20844: LD_INT 3
20846: PPUSH
20847: LD_INT 6
20849: PPUSH
20850: CALL_OW 12
20854: PPUSH
20855: LD_INT 1
20857: PPUSH
20858: CALL_OW 483
// end ;
20862: GO 20722
20864: POP
20865: POP
// end ;
20866: PPOPN 5
20868: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20869: LD_EXP 40
20873: PUSH
20874: LD_EXP 75
20878: AND
20879: IFFALSE 20973
20881: GO 20883
20883: DISABLE
20884: LD_INT 0
20886: PPUSH
20887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20888: LD_ADDR_VAR 0 2
20892: PUSH
20893: LD_INT 22
20895: PUSH
20896: LD_OWVAR 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 32
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 21
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: LIST
20929: PPUSH
20930: CALL_OW 69
20934: ST_TO_ADDR
// if not tmp then
20935: LD_VAR 0 2
20939: NOT
20940: IFFALSE 20944
// exit ;
20942: GO 20973
// for i in tmp do
20944: LD_ADDR_VAR 0 1
20948: PUSH
20949: LD_VAR 0 2
20953: PUSH
20954: FOR_IN
20955: IFFALSE 20971
// SetFuel ( i , 0 ) ;
20957: LD_VAR 0 1
20961: PPUSH
20962: LD_INT 0
20964: PPUSH
20965: CALL_OW 240
20969: GO 20954
20971: POP
20972: POP
// end ;
20973: PPOPN 2
20975: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20976: LD_EXP 40
20980: PUSH
20981: LD_EXP 76
20985: AND
20986: IFFALSE 21052
20988: GO 20990
20990: DISABLE
20991: LD_INT 0
20993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20994: LD_ADDR_VAR 0 1
20998: PUSH
20999: LD_INT 22
21001: PUSH
21002: LD_OWVAR 2
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 30
21013: PUSH
21014: LD_INT 29
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PPUSH
21025: CALL_OW 69
21029: ST_TO_ADDR
// if not tmp then
21030: LD_VAR 0 1
21034: NOT
21035: IFFALSE 21039
// exit ;
21037: GO 21052
// DestroyUnit ( tmp [ 1 ] ) ;
21039: LD_VAR 0 1
21043: PUSH
21044: LD_INT 1
21046: ARRAY
21047: PPUSH
21048: CALL_OW 65
// end ;
21052: PPOPN 1
21054: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21055: LD_EXP 40
21059: PUSH
21060: LD_EXP 78
21064: AND
21065: IFFALSE 21194
21067: GO 21069
21069: DISABLE
21070: LD_INT 0
21072: PPUSH
// begin uc_side := 0 ;
21073: LD_ADDR_OWVAR 20
21077: PUSH
21078: LD_INT 0
21080: ST_TO_ADDR
// uc_nation := nation_arabian ;
21081: LD_ADDR_OWVAR 21
21085: PUSH
21086: LD_INT 2
21088: ST_TO_ADDR
// hc_gallery :=  ;
21089: LD_ADDR_OWVAR 33
21093: PUSH
21094: LD_STRING 
21096: ST_TO_ADDR
// hc_name :=  ;
21097: LD_ADDR_OWVAR 26
21101: PUSH
21102: LD_STRING 
21104: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21105: LD_INT 1
21107: PPUSH
21108: LD_INT 11
21110: PPUSH
21111: LD_INT 10
21113: PPUSH
21114: CALL_OW 380
// un := CreateHuman ;
21118: LD_ADDR_VAR 0 1
21122: PUSH
21123: CALL_OW 44
21127: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21128: LD_VAR 0 1
21132: PPUSH
21133: LD_INT 1
21135: PPUSH
21136: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21140: LD_INT 35
21142: PPUSH
21143: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21147: LD_VAR 0 1
21151: PPUSH
21152: LD_INT 22
21154: PUSH
21155: LD_OWVAR 2
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PPUSH
21164: CALL_OW 69
21168: PPUSH
21169: LD_VAR 0 1
21173: PPUSH
21174: CALL_OW 74
21178: PPUSH
21179: CALL_OW 115
// until IsDead ( un ) ;
21183: LD_VAR 0 1
21187: PPUSH
21188: CALL_OW 301
21192: IFFALSE 21140
// end ;
21194: PPOPN 1
21196: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21197: LD_EXP 40
21201: PUSH
21202: LD_EXP 80
21206: AND
21207: IFFALSE 21219
21209: GO 21211
21211: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21212: LD_STRING earthquake(getX(game), 0, 32)
21214: PPUSH
21215: CALL_OW 559
21219: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21220: LD_EXP 40
21224: PUSH
21225: LD_EXP 81
21229: AND
21230: IFFALSE 21321
21232: GO 21234
21234: DISABLE
21235: LD_INT 0
21237: PPUSH
// begin enable ;
21238: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21239: LD_ADDR_VAR 0 1
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_OWVAR 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 21
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 33
21268: PUSH
21269: LD_INT 3
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: LIST
21280: PPUSH
21281: CALL_OW 69
21285: ST_TO_ADDR
// if not tmp then
21286: LD_VAR 0 1
21290: NOT
21291: IFFALSE 21295
// exit ;
21293: GO 21321
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21295: LD_VAR 0 1
21299: PUSH
21300: LD_INT 1
21302: PPUSH
21303: LD_VAR 0 1
21307: PPUSH
21308: CALL_OW 12
21312: ARRAY
21313: PPUSH
21314: LD_INT 1
21316: PPUSH
21317: CALL_OW 234
// end ;
21321: PPOPN 1
21323: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21324: LD_EXP 40
21328: PUSH
21329: LD_EXP 82
21333: AND
21334: IFFALSE 21475
21336: GO 21338
21338: DISABLE
21339: LD_INT 0
21341: PPUSH
21342: PPUSH
21343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21344: LD_ADDR_VAR 0 3
21348: PUSH
21349: LD_INT 22
21351: PUSH
21352: LD_OWVAR 2
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 25
21363: PUSH
21364: LD_INT 1
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PPUSH
21375: CALL_OW 69
21379: ST_TO_ADDR
// if not tmp then
21380: LD_VAR 0 3
21384: NOT
21385: IFFALSE 21389
// exit ;
21387: GO 21475
// un := tmp [ rand ( 1 , tmp ) ] ;
21389: LD_ADDR_VAR 0 2
21393: PUSH
21394: LD_VAR 0 3
21398: PUSH
21399: LD_INT 1
21401: PPUSH
21402: LD_VAR 0 3
21406: PPUSH
21407: CALL_OW 12
21411: ARRAY
21412: ST_TO_ADDR
// if Crawls ( un ) then
21413: LD_VAR 0 2
21417: PPUSH
21418: CALL_OW 318
21422: IFFALSE 21433
// ComWalk ( un ) ;
21424: LD_VAR 0 2
21428: PPUSH
21429: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21433: LD_VAR 0 2
21437: PPUSH
21438: LD_INT 9
21440: PPUSH
21441: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21445: LD_INT 28
21447: PPUSH
21448: LD_OWVAR 2
21452: PPUSH
21453: LD_INT 2
21455: PPUSH
21456: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21460: LD_INT 29
21462: PPUSH
21463: LD_OWVAR 2
21467: PPUSH
21468: LD_INT 2
21470: PPUSH
21471: CALL_OW 322
// end ;
21475: PPOPN 3
21477: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21478: LD_EXP 40
21482: PUSH
21483: LD_EXP 83
21487: AND
21488: IFFALSE 21599
21490: GO 21492
21492: DISABLE
21493: LD_INT 0
21495: PPUSH
21496: PPUSH
21497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21498: LD_ADDR_VAR 0 3
21502: PUSH
21503: LD_INT 22
21505: PUSH
21506: LD_OWVAR 2
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 25
21517: PUSH
21518: LD_INT 1
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PPUSH
21529: CALL_OW 69
21533: ST_TO_ADDR
// if not tmp then
21534: LD_VAR 0 3
21538: NOT
21539: IFFALSE 21543
// exit ;
21541: GO 21599
// un := tmp [ rand ( 1 , tmp ) ] ;
21543: LD_ADDR_VAR 0 2
21547: PUSH
21548: LD_VAR 0 3
21552: PUSH
21553: LD_INT 1
21555: PPUSH
21556: LD_VAR 0 3
21560: PPUSH
21561: CALL_OW 12
21565: ARRAY
21566: ST_TO_ADDR
// if Crawls ( un ) then
21567: LD_VAR 0 2
21571: PPUSH
21572: CALL_OW 318
21576: IFFALSE 21587
// ComWalk ( un ) ;
21578: LD_VAR 0 2
21582: PPUSH
21583: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21587: LD_VAR 0 2
21591: PPUSH
21592: LD_INT 8
21594: PPUSH
21595: CALL_OW 336
// end ;
21599: PPOPN 3
21601: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21602: LD_EXP 40
21606: PUSH
21607: LD_EXP 84
21611: AND
21612: IFFALSE 21756
21614: GO 21616
21616: DISABLE
21617: LD_INT 0
21619: PPUSH
21620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21621: LD_ADDR_VAR 0 2
21625: PUSH
21626: LD_INT 22
21628: PUSH
21629: LD_OWVAR 2
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 21
21640: PUSH
21641: LD_INT 2
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 2
21650: PUSH
21651: LD_INT 34
21653: PUSH
21654: LD_INT 12
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 34
21663: PUSH
21664: LD_INT 51
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 34
21673: PUSH
21674: LD_INT 32
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: PPUSH
21692: CALL_OW 69
21696: ST_TO_ADDR
// if not tmp then
21697: LD_VAR 0 2
21701: NOT
21702: IFFALSE 21706
// exit ;
21704: GO 21756
// for i in tmp do
21706: LD_ADDR_VAR 0 1
21710: PUSH
21711: LD_VAR 0 2
21715: PUSH
21716: FOR_IN
21717: IFFALSE 21754
// if GetCargo ( i , mat_artifact ) = 0 then
21719: LD_VAR 0 1
21723: PPUSH
21724: LD_INT 4
21726: PPUSH
21727: CALL_OW 289
21731: PUSH
21732: LD_INT 0
21734: EQUAL
21735: IFFALSE 21752
// SetCargo ( i , mat_siberit , 100 ) ;
21737: LD_VAR 0 1
21741: PPUSH
21742: LD_INT 3
21744: PPUSH
21745: LD_INT 100
21747: PPUSH
21748: CALL_OW 290
21752: GO 21716
21754: POP
21755: POP
// end ;
21756: PPOPN 2
21758: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21759: LD_EXP 40
21763: PUSH
21764: LD_EXP 85
21768: AND
21769: IFFALSE 21952
21771: GO 21773
21773: DISABLE
21774: LD_INT 0
21776: PPUSH
21777: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21778: LD_ADDR_VAR 0 2
21782: PUSH
21783: LD_INT 22
21785: PUSH
21786: LD_OWVAR 2
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PPUSH
21795: CALL_OW 69
21799: ST_TO_ADDR
// if not tmp then
21800: LD_VAR 0 2
21804: NOT
21805: IFFALSE 21809
// exit ;
21807: GO 21952
// for i := 1 to 2 do
21809: LD_ADDR_VAR 0 1
21813: PUSH
21814: DOUBLE
21815: LD_INT 1
21817: DEC
21818: ST_TO_ADDR
21819: LD_INT 2
21821: PUSH
21822: FOR_TO
21823: IFFALSE 21950
// begin uc_side := your_side ;
21825: LD_ADDR_OWVAR 20
21829: PUSH
21830: LD_OWVAR 2
21834: ST_TO_ADDR
// uc_nation := nation_american ;
21835: LD_ADDR_OWVAR 21
21839: PUSH
21840: LD_INT 1
21842: ST_TO_ADDR
// vc_chassis := us_morphling ;
21843: LD_ADDR_OWVAR 37
21847: PUSH
21848: LD_INT 5
21850: ST_TO_ADDR
// vc_engine := engine_siberite ;
21851: LD_ADDR_OWVAR 39
21855: PUSH
21856: LD_INT 3
21858: ST_TO_ADDR
// vc_control := control_computer ;
21859: LD_ADDR_OWVAR 38
21863: PUSH
21864: LD_INT 3
21866: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21867: LD_ADDR_OWVAR 40
21871: PUSH
21872: LD_INT 10
21874: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21875: LD_VAR 0 2
21879: PUSH
21880: LD_INT 1
21882: ARRAY
21883: PPUSH
21884: CALL_OW 310
21888: NOT
21889: IFFALSE 21936
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21891: CALL_OW 45
21895: PPUSH
21896: LD_VAR 0 2
21900: PUSH
21901: LD_INT 1
21903: ARRAY
21904: PPUSH
21905: CALL_OW 250
21909: PPUSH
21910: LD_VAR 0 2
21914: PUSH
21915: LD_INT 1
21917: ARRAY
21918: PPUSH
21919: CALL_OW 251
21923: PPUSH
21924: LD_INT 12
21926: PPUSH
21927: LD_INT 1
21929: PPUSH
21930: CALL_OW 50
21934: GO 21948
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21936: CALL_OW 45
21940: PPUSH
21941: LD_INT 1
21943: PPUSH
21944: CALL_OW 51
// end ;
21948: GO 21822
21950: POP
21951: POP
// end ;
21952: PPOPN 2
21954: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21955: LD_EXP 40
21959: PUSH
21960: LD_EXP 86
21964: AND
21965: IFFALSE 22187
21967: GO 21969
21969: DISABLE
21970: LD_INT 0
21972: PPUSH
21973: PPUSH
21974: PPUSH
21975: PPUSH
21976: PPUSH
21977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21978: LD_ADDR_VAR 0 6
21982: PUSH
21983: LD_INT 22
21985: PUSH
21986: LD_OWVAR 2
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 21
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 3
22007: PUSH
22008: LD_INT 23
22010: PUSH
22011: LD_INT 0
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: LIST
22026: PPUSH
22027: CALL_OW 69
22031: ST_TO_ADDR
// if not tmp then
22032: LD_VAR 0 6
22036: NOT
22037: IFFALSE 22041
// exit ;
22039: GO 22187
// s1 := rand ( 1 , 4 ) ;
22041: LD_ADDR_VAR 0 2
22045: PUSH
22046: LD_INT 1
22048: PPUSH
22049: LD_INT 4
22051: PPUSH
22052: CALL_OW 12
22056: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22057: LD_ADDR_VAR 0 4
22061: PUSH
22062: LD_VAR 0 6
22066: PUSH
22067: LD_INT 1
22069: ARRAY
22070: PPUSH
22071: LD_VAR 0 2
22075: PPUSH
22076: CALL_OW 259
22080: ST_TO_ADDR
// if s1 = 1 then
22081: LD_VAR 0 2
22085: PUSH
22086: LD_INT 1
22088: EQUAL
22089: IFFALSE 22109
// s2 := rand ( 2 , 4 ) else
22091: LD_ADDR_VAR 0 3
22095: PUSH
22096: LD_INT 2
22098: PPUSH
22099: LD_INT 4
22101: PPUSH
22102: CALL_OW 12
22106: ST_TO_ADDR
22107: GO 22117
// s2 := 1 ;
22109: LD_ADDR_VAR 0 3
22113: PUSH
22114: LD_INT 1
22116: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22117: LD_ADDR_VAR 0 5
22121: PUSH
22122: LD_VAR 0 6
22126: PUSH
22127: LD_INT 1
22129: ARRAY
22130: PPUSH
22131: LD_VAR 0 3
22135: PPUSH
22136: CALL_OW 259
22140: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22141: LD_VAR 0 6
22145: PUSH
22146: LD_INT 1
22148: ARRAY
22149: PPUSH
22150: LD_VAR 0 2
22154: PPUSH
22155: LD_VAR 0 5
22159: PPUSH
22160: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22164: LD_VAR 0 6
22168: PUSH
22169: LD_INT 1
22171: ARRAY
22172: PPUSH
22173: LD_VAR 0 3
22177: PPUSH
22178: LD_VAR 0 4
22182: PPUSH
22183: CALL_OW 237
// end ;
22187: PPOPN 6
22189: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22190: LD_EXP 40
22194: PUSH
22195: LD_EXP 87
22199: AND
22200: IFFALSE 22279
22202: GO 22204
22204: DISABLE
22205: LD_INT 0
22207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22208: LD_ADDR_VAR 0 1
22212: PUSH
22213: LD_INT 22
22215: PUSH
22216: LD_OWVAR 2
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 30
22227: PUSH
22228: LD_INT 3
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PPUSH
22239: CALL_OW 69
22243: ST_TO_ADDR
// if not tmp then
22244: LD_VAR 0 1
22248: NOT
22249: IFFALSE 22253
// exit ;
22251: GO 22279
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22253: LD_VAR 0 1
22257: PUSH
22258: LD_INT 1
22260: PPUSH
22261: LD_VAR 0 1
22265: PPUSH
22266: CALL_OW 12
22270: ARRAY
22271: PPUSH
22272: LD_INT 1
22274: PPUSH
22275: CALL_OW 234
// end ;
22279: PPOPN 1
22281: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22282: LD_EXP 40
22286: PUSH
22287: LD_EXP 88
22291: AND
22292: IFFALSE 22404
22294: GO 22296
22296: DISABLE
22297: LD_INT 0
22299: PPUSH
22300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22301: LD_ADDR_VAR 0 2
22305: PUSH
22306: LD_INT 22
22308: PUSH
22309: LD_OWVAR 2
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 2
22320: PUSH
22321: LD_INT 30
22323: PUSH
22324: LD_INT 27
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 30
22333: PUSH
22334: LD_INT 26
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 30
22343: PUSH
22344: LD_INT 28
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PPUSH
22361: CALL_OW 69
22365: ST_TO_ADDR
// if not tmp then
22366: LD_VAR 0 2
22370: NOT
22371: IFFALSE 22375
// exit ;
22373: GO 22404
// for i in tmp do
22375: LD_ADDR_VAR 0 1
22379: PUSH
22380: LD_VAR 0 2
22384: PUSH
22385: FOR_IN
22386: IFFALSE 22402
// SetLives ( i , 1 ) ;
22388: LD_VAR 0 1
22392: PPUSH
22393: LD_INT 1
22395: PPUSH
22396: CALL_OW 234
22400: GO 22385
22402: POP
22403: POP
// end ;
22404: PPOPN 2
22406: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22407: LD_EXP 40
22411: PUSH
22412: LD_EXP 89
22416: AND
22417: IFFALSE 22691
22419: GO 22421
22421: DISABLE
22422: LD_INT 0
22424: PPUSH
22425: PPUSH
22426: PPUSH
// begin i := rand ( 1 , 7 ) ;
22427: LD_ADDR_VAR 0 1
22431: PUSH
22432: LD_INT 1
22434: PPUSH
22435: LD_INT 7
22437: PPUSH
22438: CALL_OW 12
22442: ST_TO_ADDR
// case i of 1 :
22443: LD_VAR 0 1
22447: PUSH
22448: LD_INT 1
22450: DOUBLE
22451: EQUAL
22452: IFTRUE 22456
22454: GO 22466
22456: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22457: LD_STRING earthquake(getX(game), 0, 32)
22459: PPUSH
22460: CALL_OW 559
22464: GO 22691
22466: LD_INT 2
22468: DOUBLE
22469: EQUAL
22470: IFTRUE 22474
22472: GO 22488
22474: POP
// begin ToLua ( displayStucuk(); ) ;
22475: LD_STRING displayStucuk();
22477: PPUSH
22478: CALL_OW 559
// ResetFog ;
22482: CALL_OW 335
// end ; 3 :
22486: GO 22691
22488: LD_INT 3
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22600
22496: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22497: LD_ADDR_VAR 0 2
22501: PUSH
22502: LD_INT 22
22504: PUSH
22505: LD_OWVAR 2
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 25
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PPUSH
22528: CALL_OW 69
22532: ST_TO_ADDR
// if not tmp then
22533: LD_VAR 0 2
22537: NOT
22538: IFFALSE 22542
// exit ;
22540: GO 22691
// un := tmp [ rand ( 1 , tmp ) ] ;
22542: LD_ADDR_VAR 0 3
22546: PUSH
22547: LD_VAR 0 2
22551: PUSH
22552: LD_INT 1
22554: PPUSH
22555: LD_VAR 0 2
22559: PPUSH
22560: CALL_OW 12
22564: ARRAY
22565: ST_TO_ADDR
// if Crawls ( un ) then
22566: LD_VAR 0 3
22570: PPUSH
22571: CALL_OW 318
22575: IFFALSE 22586
// ComWalk ( un ) ;
22577: LD_VAR 0 3
22581: PPUSH
22582: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22586: LD_VAR 0 3
22590: PPUSH
22591: LD_INT 8
22593: PPUSH
22594: CALL_OW 336
// end ; 4 :
22598: GO 22691
22600: LD_INT 4
22602: DOUBLE
22603: EQUAL
22604: IFTRUE 22608
22606: GO 22669
22608: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22609: LD_ADDR_VAR 0 2
22613: PUSH
22614: LD_INT 22
22616: PUSH
22617: LD_OWVAR 2
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 30
22628: PUSH
22629: LD_INT 29
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PPUSH
22640: CALL_OW 69
22644: ST_TO_ADDR
// if not tmp then
22645: LD_VAR 0 2
22649: NOT
22650: IFFALSE 22654
// exit ;
22652: GO 22691
// DestroyUnit ( tmp [ 1 ] ) ;
22654: LD_VAR 0 2
22658: PUSH
22659: LD_INT 1
22661: ARRAY
22662: PPUSH
22663: CALL_OW 65
// end ; 5 .. 7 :
22667: GO 22691
22669: LD_INT 5
22671: DOUBLE
22672: GREATEREQUAL
22673: IFFALSE 22681
22675: LD_INT 7
22677: DOUBLE
22678: LESSEQUAL
22679: IFTRUE 22683
22681: GO 22690
22683: POP
// StreamSibBomb ; end ;
22684: CALL 18941 0 0
22688: GO 22691
22690: POP
// end ;
22691: PPOPN 3
22693: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22694: LD_EXP 40
22698: PUSH
22699: LD_EXP 90
22703: AND
22704: IFFALSE 22860
22706: GO 22708
22708: DISABLE
22709: LD_INT 0
22711: PPUSH
22712: PPUSH
22713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22714: LD_ADDR_VAR 0 2
22718: PUSH
22719: LD_INT 81
22721: PUSH
22722: LD_OWVAR 2
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 21
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 21
22746: PUSH
22747: LD_INT 2
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PPUSH
22763: CALL_OW 69
22767: ST_TO_ADDR
// if not tmp then
22768: LD_VAR 0 2
22772: NOT
22773: IFFALSE 22777
// exit ;
22775: GO 22860
// p := 0 ;
22777: LD_ADDR_VAR 0 3
22781: PUSH
22782: LD_INT 0
22784: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22785: LD_INT 35
22787: PPUSH
22788: CALL_OW 67
// p := p + 1 ;
22792: LD_ADDR_VAR 0 3
22796: PUSH
22797: LD_VAR 0 3
22801: PUSH
22802: LD_INT 1
22804: PLUS
22805: ST_TO_ADDR
// for i in tmp do
22806: LD_ADDR_VAR 0 1
22810: PUSH
22811: LD_VAR 0 2
22815: PUSH
22816: FOR_IN
22817: IFFALSE 22848
// if GetLives ( i ) < 1000 then
22819: LD_VAR 0 1
22823: PPUSH
22824: CALL_OW 256
22828: PUSH
22829: LD_INT 1000
22831: LESS
22832: IFFALSE 22846
// SetLives ( i , 1000 ) ;
22834: LD_VAR 0 1
22838: PPUSH
22839: LD_INT 1000
22841: PPUSH
22842: CALL_OW 234
22846: GO 22816
22848: POP
22849: POP
// until p > 20 ;
22850: LD_VAR 0 3
22854: PUSH
22855: LD_INT 20
22857: GREATER
22858: IFFALSE 22785
// end ;
22860: PPOPN 3
22862: END
// every 0 0$1 trigger StreamModeActive and sTime do
22863: LD_EXP 40
22867: PUSH
22868: LD_EXP 91
22872: AND
22873: IFFALSE 22908
22875: GO 22877
22877: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22878: LD_INT 28
22880: PPUSH
22881: LD_OWVAR 2
22885: PPUSH
22886: LD_INT 2
22888: PPUSH
22889: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22893: LD_INT 30
22895: PPUSH
22896: LD_OWVAR 2
22900: PPUSH
22901: LD_INT 2
22903: PPUSH
22904: CALL_OW 322
// end ;
22908: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22909: LD_EXP 40
22913: PUSH
22914: LD_EXP 92
22918: AND
22919: IFFALSE 23040
22921: GO 22923
22923: DISABLE
22924: LD_INT 0
22926: PPUSH
22927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22928: LD_ADDR_VAR 0 2
22932: PUSH
22933: LD_INT 22
22935: PUSH
22936: LD_OWVAR 2
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 21
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 3
22957: PUSH
22958: LD_INT 23
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: PPUSH
22977: CALL_OW 69
22981: ST_TO_ADDR
// if not tmp then
22982: LD_VAR 0 2
22986: NOT
22987: IFFALSE 22991
// exit ;
22989: GO 23040
// for i in tmp do
22991: LD_ADDR_VAR 0 1
22995: PUSH
22996: LD_VAR 0 2
23000: PUSH
23001: FOR_IN
23002: IFFALSE 23038
// begin if Crawls ( i ) then
23004: LD_VAR 0 1
23008: PPUSH
23009: CALL_OW 318
23013: IFFALSE 23024
// ComWalk ( i ) ;
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL_OW 138
// SetClass ( i , 2 ) ;
23024: LD_VAR 0 1
23028: PPUSH
23029: LD_INT 2
23031: PPUSH
23032: CALL_OW 336
// end ;
23036: GO 23001
23038: POP
23039: POP
// end ;
23040: PPOPN 2
23042: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23043: LD_EXP 40
23047: PUSH
23048: LD_EXP 93
23052: AND
23053: IFFALSE 23334
23055: GO 23057
23057: DISABLE
23058: LD_INT 0
23060: PPUSH
23061: PPUSH
23062: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23063: LD_OWVAR 2
23067: PPUSH
23068: LD_INT 9
23070: PPUSH
23071: LD_INT 1
23073: PPUSH
23074: LD_INT 1
23076: PPUSH
23077: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23081: LD_INT 9
23083: PPUSH
23084: LD_OWVAR 2
23088: PPUSH
23089: CALL_OW 343
// uc_side := 9 ;
23093: LD_ADDR_OWVAR 20
23097: PUSH
23098: LD_INT 9
23100: ST_TO_ADDR
// uc_nation := 2 ;
23101: LD_ADDR_OWVAR 21
23105: PUSH
23106: LD_INT 2
23108: ST_TO_ADDR
// hc_name := Dark Warrior ;
23109: LD_ADDR_OWVAR 26
23113: PUSH
23114: LD_STRING Dark Warrior
23116: ST_TO_ADDR
// hc_gallery :=  ;
23117: LD_ADDR_OWVAR 33
23121: PUSH
23122: LD_STRING 
23124: ST_TO_ADDR
// hc_noskilllimit := true ;
23125: LD_ADDR_OWVAR 76
23129: PUSH
23130: LD_INT 1
23132: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23133: LD_ADDR_OWVAR 31
23137: PUSH
23138: LD_INT 30
23140: PUSH
23141: LD_INT 30
23143: PUSH
23144: LD_INT 30
23146: PUSH
23147: LD_INT 30
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: ST_TO_ADDR
// un := CreateHuman ;
23156: LD_ADDR_VAR 0 3
23160: PUSH
23161: CALL_OW 44
23165: ST_TO_ADDR
// hc_noskilllimit := false ;
23166: LD_ADDR_OWVAR 76
23170: PUSH
23171: LD_INT 0
23173: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23174: LD_VAR 0 3
23178: PPUSH
23179: LD_INT 1
23181: PPUSH
23182: CALL_OW 51
// p := 0 ;
23186: LD_ADDR_VAR 0 2
23190: PUSH
23191: LD_INT 0
23193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23194: LD_INT 35
23196: PPUSH
23197: CALL_OW 67
// p := p + 1 ;
23201: LD_ADDR_VAR 0 2
23205: PUSH
23206: LD_VAR 0 2
23210: PUSH
23211: LD_INT 1
23213: PLUS
23214: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23215: LD_VAR 0 3
23219: PPUSH
23220: CALL_OW 256
23224: PUSH
23225: LD_INT 1000
23227: LESS
23228: IFFALSE 23242
// SetLives ( un , 1000 ) ;
23230: LD_VAR 0 3
23234: PPUSH
23235: LD_INT 1000
23237: PPUSH
23238: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23242: LD_VAR 0 3
23246: PPUSH
23247: LD_INT 81
23249: PUSH
23250: LD_OWVAR 2
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 91
23261: PUSH
23262: LD_VAR 0 3
23266: PUSH
23267: LD_INT 30
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PPUSH
23279: CALL_OW 69
23283: PPUSH
23284: LD_VAR 0 3
23288: PPUSH
23289: CALL_OW 74
23293: PPUSH
23294: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23298: LD_VAR 0 2
23302: PUSH
23303: LD_INT 60
23305: GREATER
23306: PUSH
23307: LD_VAR 0 3
23311: PPUSH
23312: CALL_OW 301
23316: OR
23317: IFFALSE 23194
// if un then
23319: LD_VAR 0 3
23323: IFFALSE 23334
// RemoveUnit ( un ) ;
23325: LD_VAR 0 3
23329: PPUSH
23330: CALL_OW 64
// end ;
23334: PPOPN 3
23336: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23337: LD_INT 0
23339: PPUSH
// case cmd of 301 :
23340: LD_VAR 0 1
23344: PUSH
23345: LD_INT 301
23347: DOUBLE
23348: EQUAL
23349: IFTRUE 23353
23351: GO 23385
23353: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23354: LD_VAR 0 6
23358: PPUSH
23359: LD_VAR 0 7
23363: PPUSH
23364: LD_VAR 0 8
23368: PPUSH
23369: LD_VAR 0 4
23373: PPUSH
23374: LD_VAR 0 5
23378: PPUSH
23379: CALL 24586 0 5
23383: GO 23506
23385: LD_INT 302
23387: DOUBLE
23388: EQUAL
23389: IFTRUE 23393
23391: GO 23430
23393: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23394: LD_VAR 0 6
23398: PPUSH
23399: LD_VAR 0 7
23403: PPUSH
23404: LD_VAR 0 8
23408: PPUSH
23409: LD_VAR 0 9
23413: PPUSH
23414: LD_VAR 0 4
23418: PPUSH
23419: LD_VAR 0 5
23423: PPUSH
23424: CALL 24677 0 6
23428: GO 23506
23430: LD_INT 303
23432: DOUBLE
23433: EQUAL
23434: IFTRUE 23438
23436: GO 23475
23438: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23439: LD_VAR 0 6
23443: PPUSH
23444: LD_VAR 0 7
23448: PPUSH
23449: LD_VAR 0 8
23453: PPUSH
23454: LD_VAR 0 9
23458: PPUSH
23459: LD_VAR 0 4
23463: PPUSH
23464: LD_VAR 0 5
23468: PPUSH
23469: CALL 23511 0 6
23473: GO 23506
23475: LD_INT 304
23477: DOUBLE
23478: EQUAL
23479: IFTRUE 23483
23481: GO 23505
23483: POP
// hHackTeleport ( unit , x , y ) ; end ;
23484: LD_VAR 0 2
23488: PPUSH
23489: LD_VAR 0 4
23493: PPUSH
23494: LD_VAR 0 5
23498: PPUSH
23499: CALL 25270 0 3
23503: GO 23506
23505: POP
// end ;
23506: LD_VAR 0 12
23510: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23511: LD_INT 0
23513: PPUSH
23514: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23515: LD_VAR 0 1
23519: PUSH
23520: LD_INT 1
23522: LESS
23523: PUSH
23524: LD_VAR 0 1
23528: PUSH
23529: LD_INT 3
23531: GREATER
23532: OR
23533: PUSH
23534: LD_VAR 0 5
23538: PPUSH
23539: LD_VAR 0 6
23543: PPUSH
23544: CALL_OW 428
23548: OR
23549: IFFALSE 23553
// exit ;
23551: GO 24273
// uc_side := your_side ;
23553: LD_ADDR_OWVAR 20
23557: PUSH
23558: LD_OWVAR 2
23562: ST_TO_ADDR
// uc_nation := nation ;
23563: LD_ADDR_OWVAR 21
23567: PUSH
23568: LD_VAR 0 1
23572: ST_TO_ADDR
// bc_level = 1 ;
23573: LD_ADDR_OWVAR 43
23577: PUSH
23578: LD_INT 1
23580: ST_TO_ADDR
// case btype of 1 :
23581: LD_VAR 0 2
23585: PUSH
23586: LD_INT 1
23588: DOUBLE
23589: EQUAL
23590: IFTRUE 23594
23592: GO 23605
23594: POP
// bc_type := b_depot ; 2 :
23595: LD_ADDR_OWVAR 42
23599: PUSH
23600: LD_INT 0
23602: ST_TO_ADDR
23603: GO 24217
23605: LD_INT 2
23607: DOUBLE
23608: EQUAL
23609: IFTRUE 23613
23611: GO 23624
23613: POP
// bc_type := b_warehouse ; 3 :
23614: LD_ADDR_OWVAR 42
23618: PUSH
23619: LD_INT 1
23621: ST_TO_ADDR
23622: GO 24217
23624: LD_INT 3
23626: DOUBLE
23627: EQUAL
23628: IFTRUE 23632
23630: GO 23643
23632: POP
// bc_type := b_lab ; 4 .. 9 :
23633: LD_ADDR_OWVAR 42
23637: PUSH
23638: LD_INT 6
23640: ST_TO_ADDR
23641: GO 24217
23643: LD_INT 4
23645: DOUBLE
23646: GREATEREQUAL
23647: IFFALSE 23655
23649: LD_INT 9
23651: DOUBLE
23652: LESSEQUAL
23653: IFTRUE 23657
23655: GO 23709
23657: POP
// begin bc_type := b_lab_half ;
23658: LD_ADDR_OWVAR 42
23662: PUSH
23663: LD_INT 7
23665: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23666: LD_ADDR_OWVAR 44
23670: PUSH
23671: LD_INT 10
23673: PUSH
23674: LD_INT 11
23676: PUSH
23677: LD_INT 12
23679: PUSH
23680: LD_INT 15
23682: PUSH
23683: LD_INT 14
23685: PUSH
23686: LD_INT 13
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: PUSH
23697: LD_VAR 0 2
23701: PUSH
23702: LD_INT 3
23704: MINUS
23705: ARRAY
23706: ST_TO_ADDR
// end ; 10 .. 13 :
23707: GO 24217
23709: LD_INT 10
23711: DOUBLE
23712: GREATEREQUAL
23713: IFFALSE 23721
23715: LD_INT 13
23717: DOUBLE
23718: LESSEQUAL
23719: IFTRUE 23723
23721: GO 23800
23723: POP
// begin bc_type := b_lab_full ;
23724: LD_ADDR_OWVAR 42
23728: PUSH
23729: LD_INT 8
23731: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23732: LD_ADDR_OWVAR 44
23736: PUSH
23737: LD_INT 10
23739: PUSH
23740: LD_INT 12
23742: PUSH
23743: LD_INT 14
23745: PUSH
23746: LD_INT 13
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: PUSH
23755: LD_VAR 0 2
23759: PUSH
23760: LD_INT 9
23762: MINUS
23763: ARRAY
23764: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23765: LD_ADDR_OWVAR 45
23769: PUSH
23770: LD_INT 11
23772: PUSH
23773: LD_INT 15
23775: PUSH
23776: LD_INT 12
23778: PUSH
23779: LD_INT 15
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: PUSH
23788: LD_VAR 0 2
23792: PUSH
23793: LD_INT 9
23795: MINUS
23796: ARRAY
23797: ST_TO_ADDR
// end ; 14 :
23798: GO 24217
23800: LD_INT 14
23802: DOUBLE
23803: EQUAL
23804: IFTRUE 23808
23806: GO 23819
23808: POP
// bc_type := b_workshop ; 15 :
23809: LD_ADDR_OWVAR 42
23813: PUSH
23814: LD_INT 2
23816: ST_TO_ADDR
23817: GO 24217
23819: LD_INT 15
23821: DOUBLE
23822: EQUAL
23823: IFTRUE 23827
23825: GO 23838
23827: POP
// bc_type := b_factory ; 16 :
23828: LD_ADDR_OWVAR 42
23832: PUSH
23833: LD_INT 3
23835: ST_TO_ADDR
23836: GO 24217
23838: LD_INT 16
23840: DOUBLE
23841: EQUAL
23842: IFTRUE 23846
23844: GO 23857
23846: POP
// bc_type := b_ext_gun ; 17 :
23847: LD_ADDR_OWVAR 42
23851: PUSH
23852: LD_INT 17
23854: ST_TO_ADDR
23855: GO 24217
23857: LD_INT 17
23859: DOUBLE
23860: EQUAL
23861: IFTRUE 23865
23863: GO 23893
23865: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23866: LD_ADDR_OWVAR 42
23870: PUSH
23871: LD_INT 19
23873: PUSH
23874: LD_INT 23
23876: PUSH
23877: LD_INT 19
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: PUSH
23885: LD_VAR 0 1
23889: ARRAY
23890: ST_TO_ADDR
23891: GO 24217
23893: LD_INT 18
23895: DOUBLE
23896: EQUAL
23897: IFTRUE 23901
23899: GO 23912
23901: POP
// bc_type := b_ext_radar ; 19 :
23902: LD_ADDR_OWVAR 42
23906: PUSH
23907: LD_INT 20
23909: ST_TO_ADDR
23910: GO 24217
23912: LD_INT 19
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 23931
23920: POP
// bc_type := b_ext_radio ; 20 :
23921: LD_ADDR_OWVAR 42
23925: PUSH
23926: LD_INT 22
23928: ST_TO_ADDR
23929: GO 24217
23931: LD_INT 20
23933: DOUBLE
23934: EQUAL
23935: IFTRUE 23939
23937: GO 23950
23939: POP
// bc_type := b_ext_siberium ; 21 :
23940: LD_ADDR_OWVAR 42
23944: PUSH
23945: LD_INT 21
23947: ST_TO_ADDR
23948: GO 24217
23950: LD_INT 21
23952: DOUBLE
23953: EQUAL
23954: IFTRUE 23958
23956: GO 23969
23958: POP
// bc_type := b_ext_computer ; 22 :
23959: LD_ADDR_OWVAR 42
23963: PUSH
23964: LD_INT 24
23966: ST_TO_ADDR
23967: GO 24217
23969: LD_INT 22
23971: DOUBLE
23972: EQUAL
23973: IFTRUE 23977
23975: GO 23988
23977: POP
// bc_type := b_ext_track ; 23 :
23978: LD_ADDR_OWVAR 42
23982: PUSH
23983: LD_INT 16
23985: ST_TO_ADDR
23986: GO 24217
23988: LD_INT 23
23990: DOUBLE
23991: EQUAL
23992: IFTRUE 23996
23994: GO 24007
23996: POP
// bc_type := b_ext_laser ; 24 :
23997: LD_ADDR_OWVAR 42
24001: PUSH
24002: LD_INT 25
24004: ST_TO_ADDR
24005: GO 24217
24007: LD_INT 24
24009: DOUBLE
24010: EQUAL
24011: IFTRUE 24015
24013: GO 24026
24015: POP
// bc_type := b_control_tower ; 25 :
24016: LD_ADDR_OWVAR 42
24020: PUSH
24021: LD_INT 36
24023: ST_TO_ADDR
24024: GO 24217
24026: LD_INT 25
24028: DOUBLE
24029: EQUAL
24030: IFTRUE 24034
24032: GO 24045
24034: POP
// bc_type := b_breastwork ; 26 :
24035: LD_ADDR_OWVAR 42
24039: PUSH
24040: LD_INT 31
24042: ST_TO_ADDR
24043: GO 24217
24045: LD_INT 26
24047: DOUBLE
24048: EQUAL
24049: IFTRUE 24053
24051: GO 24064
24053: POP
// bc_type := b_bunker ; 27 :
24054: LD_ADDR_OWVAR 42
24058: PUSH
24059: LD_INT 32
24061: ST_TO_ADDR
24062: GO 24217
24064: LD_INT 27
24066: DOUBLE
24067: EQUAL
24068: IFTRUE 24072
24070: GO 24083
24072: POP
// bc_type := b_turret ; 28 :
24073: LD_ADDR_OWVAR 42
24077: PUSH
24078: LD_INT 33
24080: ST_TO_ADDR
24081: GO 24217
24083: LD_INT 28
24085: DOUBLE
24086: EQUAL
24087: IFTRUE 24091
24089: GO 24102
24091: POP
// bc_type := b_armoury ; 29 :
24092: LD_ADDR_OWVAR 42
24096: PUSH
24097: LD_INT 4
24099: ST_TO_ADDR
24100: GO 24217
24102: LD_INT 29
24104: DOUBLE
24105: EQUAL
24106: IFTRUE 24110
24108: GO 24121
24110: POP
// bc_type := b_barracks ; 30 :
24111: LD_ADDR_OWVAR 42
24115: PUSH
24116: LD_INT 5
24118: ST_TO_ADDR
24119: GO 24217
24121: LD_INT 30
24123: DOUBLE
24124: EQUAL
24125: IFTRUE 24129
24127: GO 24140
24129: POP
// bc_type := b_solar_power ; 31 :
24130: LD_ADDR_OWVAR 42
24134: PUSH
24135: LD_INT 27
24137: ST_TO_ADDR
24138: GO 24217
24140: LD_INT 31
24142: DOUBLE
24143: EQUAL
24144: IFTRUE 24148
24146: GO 24159
24148: POP
// bc_type := b_oil_power ; 32 :
24149: LD_ADDR_OWVAR 42
24153: PUSH
24154: LD_INT 26
24156: ST_TO_ADDR
24157: GO 24217
24159: LD_INT 32
24161: DOUBLE
24162: EQUAL
24163: IFTRUE 24167
24165: GO 24178
24167: POP
// bc_type := b_siberite_power ; 33 :
24168: LD_ADDR_OWVAR 42
24172: PUSH
24173: LD_INT 28
24175: ST_TO_ADDR
24176: GO 24217
24178: LD_INT 33
24180: DOUBLE
24181: EQUAL
24182: IFTRUE 24186
24184: GO 24197
24186: POP
// bc_type := b_oil_mine ; 34 :
24187: LD_ADDR_OWVAR 42
24191: PUSH
24192: LD_INT 29
24194: ST_TO_ADDR
24195: GO 24217
24197: LD_INT 34
24199: DOUBLE
24200: EQUAL
24201: IFTRUE 24205
24203: GO 24216
24205: POP
// bc_type := b_siberite_mine ; end ;
24206: LD_ADDR_OWVAR 42
24210: PUSH
24211: LD_INT 30
24213: ST_TO_ADDR
24214: GO 24217
24216: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24217: LD_ADDR_VAR 0 8
24221: PUSH
24222: LD_VAR 0 5
24226: PPUSH
24227: LD_VAR 0 6
24231: PPUSH
24232: LD_VAR 0 3
24236: PPUSH
24237: CALL_OW 47
24241: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24242: LD_OWVAR 42
24246: PUSH
24247: LD_INT 32
24249: PUSH
24250: LD_INT 33
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: IN
24257: IFFALSE 24273
// PlaceWeaponTurret ( b , weapon ) ;
24259: LD_VAR 0 8
24263: PPUSH
24264: LD_VAR 0 4
24268: PPUSH
24269: CALL_OW 431
// end ;
24273: LD_VAR 0 7
24277: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24278: LD_INT 0
24280: PPUSH
24281: PPUSH
24282: PPUSH
24283: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24284: LD_ADDR_VAR 0 4
24288: PUSH
24289: LD_INT 22
24291: PUSH
24292: LD_OWVAR 2
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 2
24303: PUSH
24304: LD_INT 30
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 30
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PPUSH
24333: CALL_OW 69
24337: ST_TO_ADDR
// if not tmp then
24338: LD_VAR 0 4
24342: NOT
24343: IFFALSE 24347
// exit ;
24345: GO 24406
// for i in tmp do
24347: LD_ADDR_VAR 0 2
24351: PUSH
24352: LD_VAR 0 4
24356: PUSH
24357: FOR_IN
24358: IFFALSE 24404
// for j = 1 to 3 do
24360: LD_ADDR_VAR 0 3
24364: PUSH
24365: DOUBLE
24366: LD_INT 1
24368: DEC
24369: ST_TO_ADDR
24370: LD_INT 3
24372: PUSH
24373: FOR_TO
24374: IFFALSE 24400
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24376: LD_VAR 0 2
24380: PPUSH
24381: CALL_OW 274
24385: PPUSH
24386: LD_VAR 0 3
24390: PPUSH
24391: LD_INT 99999
24393: PPUSH
24394: CALL_OW 277
24398: GO 24373
24400: POP
24401: POP
24402: GO 24357
24404: POP
24405: POP
// end ;
24406: LD_VAR 0 1
24410: RET
// export function hHackSetLevel10 ; var i , j ; begin
24411: LD_INT 0
24413: PPUSH
24414: PPUSH
24415: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24416: LD_ADDR_VAR 0 2
24420: PUSH
24421: LD_INT 21
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PPUSH
24431: CALL_OW 69
24435: PUSH
24436: FOR_IN
24437: IFFALSE 24489
// if IsSelected ( i ) then
24439: LD_VAR 0 2
24443: PPUSH
24444: CALL_OW 306
24448: IFFALSE 24487
// begin for j := 1 to 4 do
24450: LD_ADDR_VAR 0 3
24454: PUSH
24455: DOUBLE
24456: LD_INT 1
24458: DEC
24459: ST_TO_ADDR
24460: LD_INT 4
24462: PUSH
24463: FOR_TO
24464: IFFALSE 24485
// SetSkill ( i , j , 10 ) ;
24466: LD_VAR 0 2
24470: PPUSH
24471: LD_VAR 0 3
24475: PPUSH
24476: LD_INT 10
24478: PPUSH
24479: CALL_OW 237
24483: GO 24463
24485: POP
24486: POP
// end ;
24487: GO 24436
24489: POP
24490: POP
// end ;
24491: LD_VAR 0 1
24495: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24496: LD_INT 0
24498: PPUSH
24499: PPUSH
24500: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24501: LD_ADDR_VAR 0 2
24505: PUSH
24506: LD_INT 22
24508: PUSH
24509: LD_OWVAR 2
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 21
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PPUSH
24532: CALL_OW 69
24536: PUSH
24537: FOR_IN
24538: IFFALSE 24579
// begin for j := 1 to 4 do
24540: LD_ADDR_VAR 0 3
24544: PUSH
24545: DOUBLE
24546: LD_INT 1
24548: DEC
24549: ST_TO_ADDR
24550: LD_INT 4
24552: PUSH
24553: FOR_TO
24554: IFFALSE 24575
// SetSkill ( i , j , 10 ) ;
24556: LD_VAR 0 2
24560: PPUSH
24561: LD_VAR 0 3
24565: PPUSH
24566: LD_INT 10
24568: PPUSH
24569: CALL_OW 237
24573: GO 24553
24575: POP
24576: POP
// end ;
24577: GO 24537
24579: POP
24580: POP
// end ;
24581: LD_VAR 0 1
24585: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24586: LD_INT 0
24588: PPUSH
// uc_side := your_side ;
24589: LD_ADDR_OWVAR 20
24593: PUSH
24594: LD_OWVAR 2
24598: ST_TO_ADDR
// uc_nation := nation ;
24599: LD_ADDR_OWVAR 21
24603: PUSH
24604: LD_VAR 0 1
24608: ST_TO_ADDR
// InitHc ;
24609: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24613: LD_INT 0
24615: PPUSH
24616: LD_VAR 0 2
24620: PPUSH
24621: LD_VAR 0 3
24625: PPUSH
24626: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24630: LD_VAR 0 4
24634: PPUSH
24635: LD_VAR 0 5
24639: PPUSH
24640: CALL_OW 428
24644: PUSH
24645: LD_INT 0
24647: EQUAL
24648: IFFALSE 24672
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24650: CALL_OW 44
24654: PPUSH
24655: LD_VAR 0 4
24659: PPUSH
24660: LD_VAR 0 5
24664: PPUSH
24665: LD_INT 1
24667: PPUSH
24668: CALL_OW 48
// end ;
24672: LD_VAR 0 6
24676: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24677: LD_INT 0
24679: PPUSH
24680: PPUSH
// uc_side := your_side ;
24681: LD_ADDR_OWVAR 20
24685: PUSH
24686: LD_OWVAR 2
24690: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24691: LD_VAR 0 1
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 2
24701: PUSH
24702: LD_INT 3
24704: PUSH
24705: LD_INT 4
24707: PUSH
24708: LD_INT 5
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: IN
24718: IFFALSE 24730
// uc_nation := nation_american else
24720: LD_ADDR_OWVAR 21
24724: PUSH
24725: LD_INT 1
24727: ST_TO_ADDR
24728: GO 24773
// if chassis in [ 11 , 12 , 13 , 14 ] then
24730: LD_VAR 0 1
24734: PUSH
24735: LD_INT 11
24737: PUSH
24738: LD_INT 12
24740: PUSH
24741: LD_INT 13
24743: PUSH
24744: LD_INT 14
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: IN
24753: IFFALSE 24765
// uc_nation := nation_arabian else
24755: LD_ADDR_OWVAR 21
24759: PUSH
24760: LD_INT 2
24762: ST_TO_ADDR
24763: GO 24773
// uc_nation := nation_russian ;
24765: LD_ADDR_OWVAR 21
24769: PUSH
24770: LD_INT 3
24772: ST_TO_ADDR
// vc_chassis := chassis ;
24773: LD_ADDR_OWVAR 37
24777: PUSH
24778: LD_VAR 0 1
24782: ST_TO_ADDR
// vc_engine := engine ;
24783: LD_ADDR_OWVAR 39
24787: PUSH
24788: LD_VAR 0 2
24792: ST_TO_ADDR
// vc_control := control ;
24793: LD_ADDR_OWVAR 38
24797: PUSH
24798: LD_VAR 0 3
24802: ST_TO_ADDR
// vc_weapon := weapon ;
24803: LD_ADDR_OWVAR 40
24807: PUSH
24808: LD_VAR 0 4
24812: ST_TO_ADDR
// un := CreateVehicle ;
24813: LD_ADDR_VAR 0 8
24817: PUSH
24818: CALL_OW 45
24822: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24823: LD_VAR 0 8
24827: PPUSH
24828: LD_INT 0
24830: PPUSH
24831: LD_INT 5
24833: PPUSH
24834: CALL_OW 12
24838: PPUSH
24839: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24843: LD_VAR 0 8
24847: PPUSH
24848: LD_VAR 0 5
24852: PPUSH
24853: LD_VAR 0 6
24857: PPUSH
24858: LD_INT 1
24860: PPUSH
24861: CALL_OW 48
// end ;
24865: LD_VAR 0 7
24869: RET
// export hInvincible ; every 1 do
24870: GO 24872
24872: DISABLE
// hInvincible := [ ] ;
24873: LD_ADDR_EXP 94
24877: PUSH
24878: EMPTY
24879: ST_TO_ADDR
24880: END
// every 10 do var i ;
24881: GO 24883
24883: DISABLE
24884: LD_INT 0
24886: PPUSH
// begin enable ;
24887: ENABLE
// if not hInvincible then
24888: LD_EXP 94
24892: NOT
24893: IFFALSE 24897
// exit ;
24895: GO 24941
// for i in hInvincible do
24897: LD_ADDR_VAR 0 1
24901: PUSH
24902: LD_EXP 94
24906: PUSH
24907: FOR_IN
24908: IFFALSE 24939
// if GetLives ( i ) < 1000 then
24910: LD_VAR 0 1
24914: PPUSH
24915: CALL_OW 256
24919: PUSH
24920: LD_INT 1000
24922: LESS
24923: IFFALSE 24937
// SetLives ( i , 1000 ) ;
24925: LD_VAR 0 1
24929: PPUSH
24930: LD_INT 1000
24932: PPUSH
24933: CALL_OW 234
24937: GO 24907
24939: POP
24940: POP
// end ;
24941: PPOPN 1
24943: END
// export function hHackInvincible ; var i ; begin
24944: LD_INT 0
24946: PPUSH
24947: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24948: LD_ADDR_VAR 0 2
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: LD_INT 21
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 21
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: LIST
24980: PPUSH
24981: CALL_OW 69
24985: PUSH
24986: FOR_IN
24987: IFFALSE 25048
// if IsSelected ( i ) then
24989: LD_VAR 0 2
24993: PPUSH
24994: CALL_OW 306
24998: IFFALSE 25046
// begin if i in hInvincible then
25000: LD_VAR 0 2
25004: PUSH
25005: LD_EXP 94
25009: IN
25010: IFFALSE 25030
// hInvincible := hInvincible diff i else
25012: LD_ADDR_EXP 94
25016: PUSH
25017: LD_EXP 94
25021: PUSH
25022: LD_VAR 0 2
25026: DIFF
25027: ST_TO_ADDR
25028: GO 25046
// hInvincible := hInvincible union i ;
25030: LD_ADDR_EXP 94
25034: PUSH
25035: LD_EXP 94
25039: PUSH
25040: LD_VAR 0 2
25044: UNION
25045: ST_TO_ADDR
// end ;
25046: GO 24986
25048: POP
25049: POP
// end ;
25050: LD_VAR 0 1
25054: RET
// export function hHackInvisible ; var i , j ; begin
25055: LD_INT 0
25057: PPUSH
25058: PPUSH
25059: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25060: LD_ADDR_VAR 0 2
25064: PUSH
25065: LD_INT 21
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PPUSH
25075: CALL_OW 69
25079: PUSH
25080: FOR_IN
25081: IFFALSE 25105
// if IsSelected ( i ) then
25083: LD_VAR 0 2
25087: PPUSH
25088: CALL_OW 306
25092: IFFALSE 25103
// ComForceInvisible ( i ) ;
25094: LD_VAR 0 2
25098: PPUSH
25099: CALL_OW 496
25103: GO 25080
25105: POP
25106: POP
// end ;
25107: LD_VAR 0 1
25111: RET
// export function hHackChangeYourSide ; begin
25112: LD_INT 0
25114: PPUSH
// if your_side = 8 then
25115: LD_OWVAR 2
25119: PUSH
25120: LD_INT 8
25122: EQUAL
25123: IFFALSE 25135
// your_side := 0 else
25125: LD_ADDR_OWVAR 2
25129: PUSH
25130: LD_INT 0
25132: ST_TO_ADDR
25133: GO 25149
// your_side := your_side + 1 ;
25135: LD_ADDR_OWVAR 2
25139: PUSH
25140: LD_OWVAR 2
25144: PUSH
25145: LD_INT 1
25147: PLUS
25148: ST_TO_ADDR
// end ;
25149: LD_VAR 0 1
25153: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25154: LD_INT 0
25156: PPUSH
25157: PPUSH
25158: PPUSH
// for i in all_units do
25159: LD_ADDR_VAR 0 2
25163: PUSH
25164: LD_OWVAR 3
25168: PUSH
25169: FOR_IN
25170: IFFALSE 25248
// if IsSelected ( i ) then
25172: LD_VAR 0 2
25176: PPUSH
25177: CALL_OW 306
25181: IFFALSE 25246
// begin j := GetSide ( i ) ;
25183: LD_ADDR_VAR 0 3
25187: PUSH
25188: LD_VAR 0 2
25192: PPUSH
25193: CALL_OW 255
25197: ST_TO_ADDR
// if j = 8 then
25198: LD_VAR 0 3
25202: PUSH
25203: LD_INT 8
25205: EQUAL
25206: IFFALSE 25218
// j := 0 else
25208: LD_ADDR_VAR 0 3
25212: PUSH
25213: LD_INT 0
25215: ST_TO_ADDR
25216: GO 25232
// j := j + 1 ;
25218: LD_ADDR_VAR 0 3
25222: PUSH
25223: LD_VAR 0 3
25227: PUSH
25228: LD_INT 1
25230: PLUS
25231: ST_TO_ADDR
// SetSide ( i , j ) ;
25232: LD_VAR 0 2
25236: PPUSH
25237: LD_VAR 0 3
25241: PPUSH
25242: CALL_OW 235
// end ;
25246: GO 25169
25248: POP
25249: POP
// end ;
25250: LD_VAR 0 1
25254: RET
// export function hHackFog ; begin
25255: LD_INT 0
25257: PPUSH
// FogOff ( true ) ;
25258: LD_INT 1
25260: PPUSH
25261: CALL_OW 344
// end ;
25265: LD_VAR 0 1
25269: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25270: LD_INT 0
25272: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25273: LD_VAR 0 1
25277: PPUSH
25278: LD_VAR 0 2
25282: PPUSH
25283: LD_VAR 0 3
25287: PPUSH
25288: LD_INT 1
25290: PPUSH
25291: LD_INT 1
25293: PPUSH
25294: CALL_OW 483
// CenterOnXY ( x , y ) ;
25298: LD_VAR 0 2
25302: PPUSH
25303: LD_VAR 0 3
25307: PPUSH
25308: CALL_OW 84
// end ; end_of_file
25312: LD_VAR 0 4
25316: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25317: LD_INT 0
25319: PPUSH
25320: PPUSH
25321: PPUSH
25322: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25323: LD_VAR 0 1
25327: PPUSH
25328: CALL_OW 264
25332: PUSH
25333: LD_EXP 25
25337: EQUAL
25338: IFFALSE 25410
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25340: LD_INT 68
25342: PPUSH
25343: LD_VAR 0 1
25347: PPUSH
25348: CALL_OW 255
25352: PPUSH
25353: CALL_OW 321
25357: PUSH
25358: LD_INT 2
25360: EQUAL
25361: IFFALSE 25373
// eff := 70 else
25363: LD_ADDR_VAR 0 4
25367: PUSH
25368: LD_INT 70
25370: ST_TO_ADDR
25371: GO 25381
// eff := 30 ;
25373: LD_ADDR_VAR 0 4
25377: PUSH
25378: LD_INT 30
25380: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25381: LD_VAR 0 1
25385: PPUSH
25386: CALL_OW 250
25390: PPUSH
25391: LD_VAR 0 1
25395: PPUSH
25396: CALL_OW 251
25400: PPUSH
25401: LD_VAR 0 4
25405: PPUSH
25406: CALL_OW 495
// end ; end ;
25410: LD_VAR 0 2
25414: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25415: LD_INT 0
25417: PPUSH
// end ;
25418: LD_VAR 0 4
25422: RET
// export function SOS_Command ( cmd ) ; begin
25423: LD_INT 0
25425: PPUSH
// end ;
25426: LD_VAR 0 2
25430: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25431: LD_INT 0
25433: PPUSH
// if cmd = 121 then
25434: LD_VAR 0 1
25438: PUSH
25439: LD_INT 121
25441: EQUAL
25442: IFFALSE 25444
// end ;
25444: LD_VAR 0 6
25448: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25449: LD_INT 0
25451: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25452: LD_VAR 0 1
25456: PUSH
25457: LD_INT 250
25459: EQUAL
25460: PUSH
25461: LD_VAR 0 2
25465: PPUSH
25466: CALL_OW 264
25470: PUSH
25471: LD_EXP 28
25475: EQUAL
25476: AND
25477: IFFALSE 25498
// MinerPlaceMine ( unit , x , y ) ;
25479: LD_VAR 0 2
25483: PPUSH
25484: LD_VAR 0 4
25488: PPUSH
25489: LD_VAR 0 5
25493: PPUSH
25494: CALL 27847 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25498: LD_VAR 0 1
25502: PUSH
25503: LD_INT 251
25505: EQUAL
25506: PUSH
25507: LD_VAR 0 2
25511: PPUSH
25512: CALL_OW 264
25516: PUSH
25517: LD_EXP 28
25521: EQUAL
25522: AND
25523: IFFALSE 25544
// MinerDetonateMine ( unit , x , y ) ;
25525: LD_VAR 0 2
25529: PPUSH
25530: LD_VAR 0 4
25534: PPUSH
25535: LD_VAR 0 5
25539: PPUSH
25540: CALL 28124 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25544: LD_VAR 0 1
25548: PUSH
25549: LD_INT 252
25551: EQUAL
25552: PUSH
25553: LD_VAR 0 2
25557: PPUSH
25558: CALL_OW 264
25562: PUSH
25563: LD_EXP 28
25567: EQUAL
25568: AND
25569: IFFALSE 25590
// MinerCreateMinefield ( unit , x , y ) ;
25571: LD_VAR 0 2
25575: PPUSH
25576: LD_VAR 0 4
25580: PPUSH
25581: LD_VAR 0 5
25585: PPUSH
25586: CALL 28541 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25590: LD_VAR 0 1
25594: PUSH
25595: LD_INT 253
25597: EQUAL
25598: PUSH
25599: LD_VAR 0 2
25603: PPUSH
25604: CALL_OW 257
25608: PUSH
25609: LD_INT 5
25611: EQUAL
25612: AND
25613: IFFALSE 25634
// ComBinocular ( unit , x , y ) ;
25615: LD_VAR 0 2
25619: PPUSH
25620: LD_VAR 0 4
25624: PPUSH
25625: LD_VAR 0 5
25629: PPUSH
25630: CALL 28912 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25634: LD_VAR 0 1
25638: PUSH
25639: LD_INT 254
25641: EQUAL
25642: PUSH
25643: LD_VAR 0 2
25647: PPUSH
25648: CALL_OW 264
25652: PUSH
25653: LD_EXP 23
25657: EQUAL
25658: AND
25659: PUSH
25660: LD_VAR 0 3
25664: PPUSH
25665: CALL_OW 263
25669: PUSH
25670: LD_INT 3
25672: EQUAL
25673: AND
25674: IFFALSE 25690
// HackDestroyVehicle ( unit , selectedUnit ) ;
25676: LD_VAR 0 2
25680: PPUSH
25681: LD_VAR 0 3
25685: PPUSH
25686: CALL 27207 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25690: LD_VAR 0 1
25694: PUSH
25695: LD_INT 255
25697: EQUAL
25698: PUSH
25699: LD_VAR 0 2
25703: PPUSH
25704: CALL_OW 264
25708: PUSH
25709: LD_INT 14
25711: PUSH
25712: LD_INT 53
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: IN
25719: AND
25720: PUSH
25721: LD_VAR 0 4
25725: PPUSH
25726: LD_VAR 0 5
25730: PPUSH
25731: CALL_OW 488
25735: AND
25736: IFFALSE 25760
// CutTreeXYR ( unit , x , y , 12 ) ;
25738: LD_VAR 0 2
25742: PPUSH
25743: LD_VAR 0 4
25747: PPUSH
25748: LD_VAR 0 5
25752: PPUSH
25753: LD_INT 12
25755: PPUSH
25756: CALL 25773 0 4
// end ;
25760: LD_VAR 0 6
25764: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25765: LD_INT 0
25767: PPUSH
// end ;
25768: LD_VAR 0 4
25772: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25773: LD_INT 0
25775: PPUSH
25776: PPUSH
25777: PPUSH
25778: PPUSH
25779: PPUSH
25780: PPUSH
25781: PPUSH
25782: PPUSH
25783: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25784: LD_VAR 0 1
25788: NOT
25789: PUSH
25790: LD_VAR 0 2
25794: PPUSH
25795: LD_VAR 0 3
25799: PPUSH
25800: CALL_OW 488
25804: NOT
25805: OR
25806: PUSH
25807: LD_VAR 0 4
25811: NOT
25812: OR
25813: IFFALSE 25817
// exit ;
25815: GO 26157
// list := [ ] ;
25817: LD_ADDR_VAR 0 13
25821: PUSH
25822: EMPTY
25823: ST_TO_ADDR
// if x - r < 0 then
25824: LD_VAR 0 2
25828: PUSH
25829: LD_VAR 0 4
25833: MINUS
25834: PUSH
25835: LD_INT 0
25837: LESS
25838: IFFALSE 25850
// min_x := 0 else
25840: LD_ADDR_VAR 0 7
25844: PUSH
25845: LD_INT 0
25847: ST_TO_ADDR
25848: GO 25866
// min_x := x - r ;
25850: LD_ADDR_VAR 0 7
25854: PUSH
25855: LD_VAR 0 2
25859: PUSH
25860: LD_VAR 0 4
25864: MINUS
25865: ST_TO_ADDR
// if y - r < 0 then
25866: LD_VAR 0 3
25870: PUSH
25871: LD_VAR 0 4
25875: MINUS
25876: PUSH
25877: LD_INT 0
25879: LESS
25880: IFFALSE 25892
// min_y := 0 else
25882: LD_ADDR_VAR 0 8
25886: PUSH
25887: LD_INT 0
25889: ST_TO_ADDR
25890: GO 25908
// min_y := y - r ;
25892: LD_ADDR_VAR 0 8
25896: PUSH
25897: LD_VAR 0 3
25901: PUSH
25902: LD_VAR 0 4
25906: MINUS
25907: ST_TO_ADDR
// max_x := x + r ;
25908: LD_ADDR_VAR 0 9
25912: PUSH
25913: LD_VAR 0 2
25917: PUSH
25918: LD_VAR 0 4
25922: PLUS
25923: ST_TO_ADDR
// max_y := y + r ;
25924: LD_ADDR_VAR 0 10
25928: PUSH
25929: LD_VAR 0 3
25933: PUSH
25934: LD_VAR 0 4
25938: PLUS
25939: ST_TO_ADDR
// for _x = min_x to max_x do
25940: LD_ADDR_VAR 0 11
25944: PUSH
25945: DOUBLE
25946: LD_VAR 0 7
25950: DEC
25951: ST_TO_ADDR
25952: LD_VAR 0 9
25956: PUSH
25957: FOR_TO
25958: IFFALSE 26075
// for _y = min_y to max_y do
25960: LD_ADDR_VAR 0 12
25964: PUSH
25965: DOUBLE
25966: LD_VAR 0 8
25970: DEC
25971: ST_TO_ADDR
25972: LD_VAR 0 10
25976: PUSH
25977: FOR_TO
25978: IFFALSE 26071
// begin if not ValidHex ( _x , _y ) then
25980: LD_VAR 0 11
25984: PPUSH
25985: LD_VAR 0 12
25989: PPUSH
25990: CALL_OW 488
25994: NOT
25995: IFFALSE 25999
// continue ;
25997: GO 25977
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25999: LD_VAR 0 11
26003: PPUSH
26004: LD_VAR 0 12
26008: PPUSH
26009: CALL_OW 351
26013: PUSH
26014: LD_VAR 0 11
26018: PPUSH
26019: LD_VAR 0 12
26023: PPUSH
26024: CALL_OW 554
26028: AND
26029: IFFALSE 26069
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26031: LD_ADDR_VAR 0 13
26035: PUSH
26036: LD_VAR 0 13
26040: PPUSH
26041: LD_VAR 0 13
26045: PUSH
26046: LD_INT 1
26048: PLUS
26049: PPUSH
26050: LD_VAR 0 11
26054: PUSH
26055: LD_VAR 0 12
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PPUSH
26064: CALL_OW 2
26068: ST_TO_ADDR
// end ;
26069: GO 25977
26071: POP
26072: POP
26073: GO 25957
26075: POP
26076: POP
// if not list then
26077: LD_VAR 0 13
26081: NOT
26082: IFFALSE 26086
// exit ;
26084: GO 26157
// for i in list do
26086: LD_ADDR_VAR 0 6
26090: PUSH
26091: LD_VAR 0 13
26095: PUSH
26096: FOR_IN
26097: IFFALSE 26155
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26099: LD_VAR 0 1
26103: PPUSH
26104: LD_STRING M
26106: PUSH
26107: LD_VAR 0 6
26111: PUSH
26112: LD_INT 1
26114: ARRAY
26115: PUSH
26116: LD_VAR 0 6
26120: PUSH
26121: LD_INT 2
26123: ARRAY
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: PUSH
26146: EMPTY
26147: LIST
26148: PPUSH
26149: CALL_OW 447
26153: GO 26096
26155: POP
26156: POP
// end ;
26157: LD_VAR 0 5
26161: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26162: LD_EXP 97
26166: NOT
26167: IFFALSE 26217
26169: GO 26171
26171: DISABLE
// begin initHack := true ;
26172: LD_ADDR_EXP 97
26176: PUSH
26177: LD_INT 1
26179: ST_TO_ADDR
// hackTanks := [ ] ;
26180: LD_ADDR_EXP 98
26184: PUSH
26185: EMPTY
26186: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26187: LD_ADDR_EXP 99
26191: PUSH
26192: EMPTY
26193: ST_TO_ADDR
// hackLimit := 3 ;
26194: LD_ADDR_EXP 100
26198: PUSH
26199: LD_INT 3
26201: ST_TO_ADDR
// hackDist := 12 ;
26202: LD_ADDR_EXP 101
26206: PUSH
26207: LD_INT 12
26209: ST_TO_ADDR
// hackCounter := [ ] ;
26210: LD_ADDR_EXP 102
26214: PUSH
26215: EMPTY
26216: ST_TO_ADDR
// end ;
26217: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26218: LD_EXP 97
26222: PUSH
26223: LD_INT 34
26225: PUSH
26226: LD_EXP 23
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PPUSH
26235: CALL_OW 69
26239: AND
26240: IFFALSE 26495
26242: GO 26244
26244: DISABLE
26245: LD_INT 0
26247: PPUSH
26248: PPUSH
// begin enable ;
26249: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26250: LD_ADDR_VAR 0 1
26254: PUSH
26255: LD_INT 34
26257: PUSH
26258: LD_EXP 23
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PPUSH
26267: CALL_OW 69
26271: PUSH
26272: FOR_IN
26273: IFFALSE 26493
// begin if not i in hackTanks then
26275: LD_VAR 0 1
26279: PUSH
26280: LD_EXP 98
26284: IN
26285: NOT
26286: IFFALSE 26369
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26288: LD_ADDR_EXP 98
26292: PUSH
26293: LD_EXP 98
26297: PPUSH
26298: LD_EXP 98
26302: PUSH
26303: LD_INT 1
26305: PLUS
26306: PPUSH
26307: LD_VAR 0 1
26311: PPUSH
26312: CALL_OW 1
26316: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26317: LD_ADDR_EXP 99
26321: PUSH
26322: LD_EXP 99
26326: PPUSH
26327: LD_EXP 99
26331: PUSH
26332: LD_INT 1
26334: PLUS
26335: PPUSH
26336: EMPTY
26337: PPUSH
26338: CALL_OW 1
26342: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26343: LD_ADDR_EXP 102
26347: PUSH
26348: LD_EXP 102
26352: PPUSH
26353: LD_EXP 102
26357: PUSH
26358: LD_INT 1
26360: PLUS
26361: PPUSH
26362: EMPTY
26363: PPUSH
26364: CALL_OW 1
26368: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26369: LD_VAR 0 1
26373: PPUSH
26374: CALL_OW 302
26378: NOT
26379: IFFALSE 26392
// begin HackUnlinkAll ( i ) ;
26381: LD_VAR 0 1
26385: PPUSH
26386: CALL 26498 0 1
// continue ;
26390: GO 26272
// end ; HackCheckCapturedStatus ( i ) ;
26392: LD_VAR 0 1
26396: PPUSH
26397: CALL 26941 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26401: LD_ADDR_VAR 0 2
26405: PUSH
26406: LD_INT 81
26408: PUSH
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 255
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 33
26425: PUSH
26426: LD_INT 3
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 91
26435: PUSH
26436: LD_VAR 0 1
26440: PUSH
26441: LD_EXP 101
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 50
26453: PUSH
26454: EMPTY
26455: LIST
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 69
26467: ST_TO_ADDR
// if not tmp then
26468: LD_VAR 0 2
26472: NOT
26473: IFFALSE 26477
// continue ;
26475: GO 26272
// HackLink ( i , tmp ) ;
26477: LD_VAR 0 1
26481: PPUSH
26482: LD_VAR 0 2
26486: PPUSH
26487: CALL 26634 0 2
// end ;
26491: GO 26272
26493: POP
26494: POP
// end ;
26495: PPOPN 2
26497: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26498: LD_INT 0
26500: PPUSH
26501: PPUSH
26502: PPUSH
// if not hack in hackTanks then
26503: LD_VAR 0 1
26507: PUSH
26508: LD_EXP 98
26512: IN
26513: NOT
26514: IFFALSE 26518
// exit ;
26516: GO 26629
// index := GetElementIndex ( hackTanks , hack ) ;
26518: LD_ADDR_VAR 0 4
26522: PUSH
26523: LD_EXP 98
26527: PPUSH
26528: LD_VAR 0 1
26532: PPUSH
26533: CALL 34103 0 2
26537: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26538: LD_EXP 99
26542: PUSH
26543: LD_VAR 0 4
26547: ARRAY
26548: IFFALSE 26629
// begin for i in hackTanksCaptured [ index ] do
26550: LD_ADDR_VAR 0 3
26554: PUSH
26555: LD_EXP 99
26559: PUSH
26560: LD_VAR 0 4
26564: ARRAY
26565: PUSH
26566: FOR_IN
26567: IFFALSE 26593
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26569: LD_VAR 0 3
26573: PUSH
26574: LD_INT 1
26576: ARRAY
26577: PPUSH
26578: LD_VAR 0 3
26582: PUSH
26583: LD_INT 2
26585: ARRAY
26586: PPUSH
26587: CALL_OW 235
26591: GO 26566
26593: POP
26594: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26595: LD_ADDR_EXP 99
26599: PUSH
26600: LD_EXP 99
26604: PPUSH
26605: LD_VAR 0 4
26609: PPUSH
26610: EMPTY
26611: PPUSH
26612: CALL_OW 1
26616: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26617: LD_VAR 0 1
26621: PPUSH
26622: LD_INT 0
26624: PPUSH
26625: CALL_OW 505
// end ; end ;
26629: LD_VAR 0 2
26633: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26634: LD_INT 0
26636: PPUSH
26637: PPUSH
26638: PPUSH
// if not hack in hackTanks or not vehicles then
26639: LD_VAR 0 1
26643: PUSH
26644: LD_EXP 98
26648: IN
26649: NOT
26650: PUSH
26651: LD_VAR 0 2
26655: NOT
26656: OR
26657: IFFALSE 26661
// exit ;
26659: GO 26936
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26661: LD_ADDR_VAR 0 2
26665: PUSH
26666: LD_VAR 0 1
26670: PPUSH
26671: LD_VAR 0 2
26675: PPUSH
26676: LD_INT 1
26678: PPUSH
26679: LD_INT 1
26681: PPUSH
26682: CALL 34753 0 4
26686: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26687: LD_ADDR_VAR 0 5
26691: PUSH
26692: LD_EXP 98
26696: PPUSH
26697: LD_VAR 0 1
26701: PPUSH
26702: CALL 34103 0 2
26706: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26707: LD_EXP 99
26711: PUSH
26712: LD_VAR 0 5
26716: ARRAY
26717: PUSH
26718: LD_EXP 100
26722: LESS
26723: IFFALSE 26912
// begin for i := 1 to vehicles do
26725: LD_ADDR_VAR 0 4
26729: PUSH
26730: DOUBLE
26731: LD_INT 1
26733: DEC
26734: ST_TO_ADDR
26735: LD_VAR 0 2
26739: PUSH
26740: FOR_TO
26741: IFFALSE 26910
// begin if hackTanksCaptured [ index ] = hackLimit then
26743: LD_EXP 99
26747: PUSH
26748: LD_VAR 0 5
26752: ARRAY
26753: PUSH
26754: LD_EXP 100
26758: EQUAL
26759: IFFALSE 26763
// break ;
26761: GO 26910
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26763: LD_ADDR_EXP 102
26767: PUSH
26768: LD_EXP 102
26772: PPUSH
26773: LD_VAR 0 5
26777: PPUSH
26778: LD_EXP 102
26782: PUSH
26783: LD_VAR 0 5
26787: ARRAY
26788: PUSH
26789: LD_INT 1
26791: PLUS
26792: PPUSH
26793: CALL_OW 1
26797: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26798: LD_ADDR_EXP 99
26802: PUSH
26803: LD_EXP 99
26807: PPUSH
26808: LD_VAR 0 5
26812: PUSH
26813: LD_EXP 99
26817: PUSH
26818: LD_VAR 0 5
26822: ARRAY
26823: PUSH
26824: LD_INT 1
26826: PLUS
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PPUSH
26832: LD_VAR 0 2
26836: PUSH
26837: LD_VAR 0 4
26841: ARRAY
26842: PUSH
26843: LD_VAR 0 2
26847: PUSH
26848: LD_VAR 0 4
26852: ARRAY
26853: PPUSH
26854: CALL_OW 255
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PPUSH
26863: CALL 34318 0 3
26867: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26868: LD_VAR 0 2
26872: PUSH
26873: LD_VAR 0 4
26877: ARRAY
26878: PPUSH
26879: LD_VAR 0 1
26883: PPUSH
26884: CALL_OW 255
26888: PPUSH
26889: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26893: LD_VAR 0 2
26897: PUSH
26898: LD_VAR 0 4
26902: ARRAY
26903: PPUSH
26904: CALL_OW 141
// end ;
26908: GO 26740
26910: POP
26911: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26912: LD_VAR 0 1
26916: PPUSH
26917: LD_EXP 99
26921: PUSH
26922: LD_VAR 0 5
26926: ARRAY
26927: PUSH
26928: LD_INT 0
26930: PLUS
26931: PPUSH
26932: CALL_OW 505
// end ;
26936: LD_VAR 0 3
26940: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26941: LD_INT 0
26943: PPUSH
26944: PPUSH
26945: PPUSH
26946: PPUSH
// if not hack in hackTanks then
26947: LD_VAR 0 1
26951: PUSH
26952: LD_EXP 98
26956: IN
26957: NOT
26958: IFFALSE 26962
// exit ;
26960: GO 27202
// index := GetElementIndex ( hackTanks , hack ) ;
26962: LD_ADDR_VAR 0 4
26966: PUSH
26967: LD_EXP 98
26971: PPUSH
26972: LD_VAR 0 1
26976: PPUSH
26977: CALL 34103 0 2
26981: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26982: LD_ADDR_VAR 0 3
26986: PUSH
26987: DOUBLE
26988: LD_EXP 99
26992: PUSH
26993: LD_VAR 0 4
26997: ARRAY
26998: INC
26999: ST_TO_ADDR
27000: LD_INT 1
27002: PUSH
27003: FOR_DOWNTO
27004: IFFALSE 27176
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27006: LD_ADDR_VAR 0 5
27010: PUSH
27011: LD_EXP 99
27015: PUSH
27016: LD_VAR 0 4
27020: ARRAY
27021: PUSH
27022: LD_VAR 0 3
27026: ARRAY
27027: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27028: LD_VAR 0 5
27032: PUSH
27033: LD_INT 1
27035: ARRAY
27036: PPUSH
27037: CALL_OW 302
27041: NOT
27042: PUSH
27043: LD_VAR 0 5
27047: PUSH
27048: LD_INT 1
27050: ARRAY
27051: PPUSH
27052: CALL_OW 255
27056: PUSH
27057: LD_VAR 0 1
27061: PPUSH
27062: CALL_OW 255
27066: NONEQUAL
27067: OR
27068: IFFALSE 27174
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27070: LD_VAR 0 5
27074: PUSH
27075: LD_INT 1
27077: ARRAY
27078: PPUSH
27079: CALL_OW 305
27083: PUSH
27084: LD_VAR 0 5
27088: PUSH
27089: LD_INT 1
27091: ARRAY
27092: PPUSH
27093: CALL_OW 255
27097: PUSH
27098: LD_VAR 0 1
27102: PPUSH
27103: CALL_OW 255
27107: EQUAL
27108: AND
27109: IFFALSE 27133
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27111: LD_VAR 0 5
27115: PUSH
27116: LD_INT 1
27118: ARRAY
27119: PPUSH
27120: LD_VAR 0 5
27124: PUSH
27125: LD_INT 2
27127: ARRAY
27128: PPUSH
27129: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27133: LD_ADDR_EXP 99
27137: PUSH
27138: LD_EXP 99
27142: PPUSH
27143: LD_VAR 0 4
27147: PPUSH
27148: LD_EXP 99
27152: PUSH
27153: LD_VAR 0 4
27157: ARRAY
27158: PPUSH
27159: LD_VAR 0 3
27163: PPUSH
27164: CALL_OW 3
27168: PPUSH
27169: CALL_OW 1
27173: ST_TO_ADDR
// end ; end ;
27174: GO 27003
27176: POP
27177: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27178: LD_VAR 0 1
27182: PPUSH
27183: LD_EXP 99
27187: PUSH
27188: LD_VAR 0 4
27192: ARRAY
27193: PUSH
27194: LD_INT 0
27196: PLUS
27197: PPUSH
27198: CALL_OW 505
// end ;
27202: LD_VAR 0 2
27206: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27207: LD_INT 0
27209: PPUSH
27210: PPUSH
27211: PPUSH
27212: PPUSH
// if not hack in hackTanks then
27213: LD_VAR 0 1
27217: PUSH
27218: LD_EXP 98
27222: IN
27223: NOT
27224: IFFALSE 27228
// exit ;
27226: GO 27313
// index := GetElementIndex ( hackTanks , hack ) ;
27228: LD_ADDR_VAR 0 5
27232: PUSH
27233: LD_EXP 98
27237: PPUSH
27238: LD_VAR 0 1
27242: PPUSH
27243: CALL 34103 0 2
27247: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27248: LD_ADDR_VAR 0 4
27252: PUSH
27253: DOUBLE
27254: LD_INT 1
27256: DEC
27257: ST_TO_ADDR
27258: LD_EXP 99
27262: PUSH
27263: LD_VAR 0 5
27267: ARRAY
27268: PUSH
27269: FOR_TO
27270: IFFALSE 27311
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27272: LD_EXP 99
27276: PUSH
27277: LD_VAR 0 5
27281: ARRAY
27282: PUSH
27283: LD_VAR 0 4
27287: ARRAY
27288: PUSH
27289: LD_INT 1
27291: ARRAY
27292: PUSH
27293: LD_VAR 0 2
27297: EQUAL
27298: IFFALSE 27309
// KillUnit ( vehicle ) ;
27300: LD_VAR 0 2
27304: PPUSH
27305: CALL_OW 66
27309: GO 27269
27311: POP
27312: POP
// end ;
27313: LD_VAR 0 3
27317: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27318: LD_EXP 103
27322: NOT
27323: IFFALSE 27358
27325: GO 27327
27327: DISABLE
// begin initMiner := true ;
27328: LD_ADDR_EXP 103
27332: PUSH
27333: LD_INT 1
27335: ST_TO_ADDR
// minersList := [ ] ;
27336: LD_ADDR_EXP 104
27340: PUSH
27341: EMPTY
27342: ST_TO_ADDR
// minerMinesList := [ ] ;
27343: LD_ADDR_EXP 105
27347: PUSH
27348: EMPTY
27349: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27350: LD_ADDR_EXP 106
27354: PUSH
27355: LD_INT 5
27357: ST_TO_ADDR
// end ;
27358: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27359: LD_EXP 103
27363: PUSH
27364: LD_INT 34
27366: PUSH
27367: LD_EXP 28
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PPUSH
27376: CALL_OW 69
27380: AND
27381: IFFALSE 27844
27383: GO 27385
27385: DISABLE
27386: LD_INT 0
27388: PPUSH
27389: PPUSH
27390: PPUSH
27391: PPUSH
// begin enable ;
27392: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27393: LD_ADDR_VAR 0 1
27397: PUSH
27398: LD_INT 34
27400: PUSH
27401: LD_EXP 28
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PPUSH
27410: CALL_OW 69
27414: PUSH
27415: FOR_IN
27416: IFFALSE 27488
// begin if not i in minersList then
27418: LD_VAR 0 1
27422: PUSH
27423: LD_EXP 104
27427: IN
27428: NOT
27429: IFFALSE 27486
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27431: LD_ADDR_EXP 104
27435: PUSH
27436: LD_EXP 104
27440: PPUSH
27441: LD_EXP 104
27445: PUSH
27446: LD_INT 1
27448: PLUS
27449: PPUSH
27450: LD_VAR 0 1
27454: PPUSH
27455: CALL_OW 1
27459: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27460: LD_ADDR_EXP 105
27464: PUSH
27465: LD_EXP 105
27469: PPUSH
27470: LD_EXP 105
27474: PUSH
27475: LD_INT 1
27477: PLUS
27478: PPUSH
27479: EMPTY
27480: PPUSH
27481: CALL_OW 1
27485: ST_TO_ADDR
// end end ;
27486: GO 27415
27488: POP
27489: POP
// for i := minerMinesList downto 1 do
27490: LD_ADDR_VAR 0 1
27494: PUSH
27495: DOUBLE
27496: LD_EXP 105
27500: INC
27501: ST_TO_ADDR
27502: LD_INT 1
27504: PUSH
27505: FOR_DOWNTO
27506: IFFALSE 27842
// begin if IsLive ( minersList [ i ] ) then
27508: LD_EXP 104
27512: PUSH
27513: LD_VAR 0 1
27517: ARRAY
27518: PPUSH
27519: CALL_OW 300
27523: IFFALSE 27551
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27525: LD_EXP 104
27529: PUSH
27530: LD_VAR 0 1
27534: ARRAY
27535: PPUSH
27536: LD_EXP 105
27540: PUSH
27541: LD_VAR 0 1
27545: ARRAY
27546: PPUSH
27547: CALL_OW 505
// if not minerMinesList [ i ] then
27551: LD_EXP 105
27555: PUSH
27556: LD_VAR 0 1
27560: ARRAY
27561: NOT
27562: IFFALSE 27566
// continue ;
27564: GO 27505
// for j := minerMinesList [ i ] downto 1 do
27566: LD_ADDR_VAR 0 2
27570: PUSH
27571: DOUBLE
27572: LD_EXP 105
27576: PUSH
27577: LD_VAR 0 1
27581: ARRAY
27582: INC
27583: ST_TO_ADDR
27584: LD_INT 1
27586: PUSH
27587: FOR_DOWNTO
27588: IFFALSE 27838
// begin side := GetSide ( minersList [ i ] ) ;
27590: LD_ADDR_VAR 0 3
27594: PUSH
27595: LD_EXP 104
27599: PUSH
27600: LD_VAR 0 1
27604: ARRAY
27605: PPUSH
27606: CALL_OW 255
27610: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27611: LD_ADDR_VAR 0 4
27615: PUSH
27616: LD_EXP 105
27620: PUSH
27621: LD_VAR 0 1
27625: ARRAY
27626: PUSH
27627: LD_VAR 0 2
27631: ARRAY
27632: PUSH
27633: LD_INT 1
27635: ARRAY
27636: PPUSH
27637: LD_EXP 105
27641: PUSH
27642: LD_VAR 0 1
27646: ARRAY
27647: PUSH
27648: LD_VAR 0 2
27652: ARRAY
27653: PUSH
27654: LD_INT 2
27656: ARRAY
27657: PPUSH
27658: CALL_OW 428
27662: ST_TO_ADDR
// if not tmp then
27663: LD_VAR 0 4
27667: NOT
27668: IFFALSE 27672
// continue ;
27670: GO 27587
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27672: LD_VAR 0 4
27676: PUSH
27677: LD_INT 81
27679: PUSH
27680: LD_VAR 0 3
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PPUSH
27689: CALL_OW 69
27693: IN
27694: PUSH
27695: LD_EXP 105
27699: PUSH
27700: LD_VAR 0 1
27704: ARRAY
27705: PUSH
27706: LD_VAR 0 2
27710: ARRAY
27711: PUSH
27712: LD_INT 1
27714: ARRAY
27715: PPUSH
27716: LD_EXP 105
27720: PUSH
27721: LD_VAR 0 1
27725: ARRAY
27726: PUSH
27727: LD_VAR 0 2
27731: ARRAY
27732: PUSH
27733: LD_INT 2
27735: ARRAY
27736: PPUSH
27737: CALL_OW 458
27741: AND
27742: IFFALSE 27836
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27744: LD_EXP 105
27748: PUSH
27749: LD_VAR 0 1
27753: ARRAY
27754: PUSH
27755: LD_VAR 0 2
27759: ARRAY
27760: PUSH
27761: LD_INT 1
27763: ARRAY
27764: PPUSH
27765: LD_EXP 105
27769: PUSH
27770: LD_VAR 0 1
27774: ARRAY
27775: PUSH
27776: LD_VAR 0 2
27780: ARRAY
27781: PUSH
27782: LD_INT 2
27784: ARRAY
27785: PPUSH
27786: LD_VAR 0 3
27790: PPUSH
27791: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27795: LD_ADDR_EXP 105
27799: PUSH
27800: LD_EXP 105
27804: PPUSH
27805: LD_VAR 0 1
27809: PPUSH
27810: LD_EXP 105
27814: PUSH
27815: LD_VAR 0 1
27819: ARRAY
27820: PPUSH
27821: LD_VAR 0 2
27825: PPUSH
27826: CALL_OW 3
27830: PPUSH
27831: CALL_OW 1
27835: ST_TO_ADDR
// end ; end ;
27836: GO 27587
27838: POP
27839: POP
// end ;
27840: GO 27505
27842: POP
27843: POP
// end ;
27844: PPOPN 4
27846: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27847: LD_INT 0
27849: PPUSH
27850: PPUSH
// result := false ;
27851: LD_ADDR_VAR 0 4
27855: PUSH
27856: LD_INT 0
27858: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27859: LD_VAR 0 1
27863: PPUSH
27864: CALL_OW 264
27868: PUSH
27869: LD_EXP 28
27873: EQUAL
27874: NOT
27875: IFFALSE 27879
// exit ;
27877: GO 28119
// index := GetElementIndex ( minersList , unit ) ;
27879: LD_ADDR_VAR 0 5
27883: PUSH
27884: LD_EXP 104
27888: PPUSH
27889: LD_VAR 0 1
27893: PPUSH
27894: CALL 34103 0 2
27898: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27899: LD_EXP 105
27903: PUSH
27904: LD_VAR 0 5
27908: ARRAY
27909: PUSH
27910: LD_EXP 106
27914: GREATEREQUAL
27915: IFFALSE 27919
// exit ;
27917: GO 28119
// ComMoveXY ( unit , x , y ) ;
27919: LD_VAR 0 1
27923: PPUSH
27924: LD_VAR 0 2
27928: PPUSH
27929: LD_VAR 0 3
27933: PPUSH
27934: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27938: LD_INT 35
27940: PPUSH
27941: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27945: LD_VAR 0 1
27949: PPUSH
27950: LD_VAR 0 2
27954: PPUSH
27955: LD_VAR 0 3
27959: PPUSH
27960: CALL 64875 0 3
27964: NOT
27965: PUSH
27966: LD_VAR 0 1
27970: PPUSH
27971: CALL_OW 314
27975: AND
27976: IFFALSE 27980
// exit ;
27978: GO 28119
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27980: LD_VAR 0 2
27984: PPUSH
27985: LD_VAR 0 3
27989: PPUSH
27990: CALL_OW 428
27994: PUSH
27995: LD_VAR 0 1
27999: EQUAL
28000: PUSH
28001: LD_VAR 0 1
28005: PPUSH
28006: CALL_OW 314
28010: NOT
28011: AND
28012: IFFALSE 27938
// PlaySoundXY ( x , y , PlantMine ) ;
28014: LD_VAR 0 2
28018: PPUSH
28019: LD_VAR 0 3
28023: PPUSH
28024: LD_STRING PlantMine
28026: PPUSH
28027: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28031: LD_VAR 0 2
28035: PPUSH
28036: LD_VAR 0 3
28040: PPUSH
28041: LD_VAR 0 1
28045: PPUSH
28046: CALL_OW 255
28050: PPUSH
28051: LD_INT 0
28053: PPUSH
28054: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28058: LD_ADDR_EXP 105
28062: PUSH
28063: LD_EXP 105
28067: PPUSH
28068: LD_VAR 0 5
28072: PUSH
28073: LD_EXP 105
28077: PUSH
28078: LD_VAR 0 5
28082: ARRAY
28083: PUSH
28084: LD_INT 1
28086: PLUS
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PPUSH
28092: LD_VAR 0 2
28096: PUSH
28097: LD_VAR 0 3
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PPUSH
28106: CALL 34318 0 3
28110: ST_TO_ADDR
// result := true ;
28111: LD_ADDR_VAR 0 4
28115: PUSH
28116: LD_INT 1
28118: ST_TO_ADDR
// end ;
28119: LD_VAR 0 4
28123: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28124: LD_INT 0
28126: PPUSH
28127: PPUSH
28128: PPUSH
// if not unit in minersList then
28129: LD_VAR 0 1
28133: PUSH
28134: LD_EXP 104
28138: IN
28139: NOT
28140: IFFALSE 28144
// exit ;
28142: GO 28536
// index := GetElementIndex ( minersList , unit ) ;
28144: LD_ADDR_VAR 0 6
28148: PUSH
28149: LD_EXP 104
28153: PPUSH
28154: LD_VAR 0 1
28158: PPUSH
28159: CALL 34103 0 2
28163: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28164: LD_ADDR_VAR 0 5
28168: PUSH
28169: DOUBLE
28170: LD_EXP 105
28174: PUSH
28175: LD_VAR 0 6
28179: ARRAY
28180: INC
28181: ST_TO_ADDR
28182: LD_INT 1
28184: PUSH
28185: FOR_DOWNTO
28186: IFFALSE 28347
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28188: LD_EXP 105
28192: PUSH
28193: LD_VAR 0 6
28197: ARRAY
28198: PUSH
28199: LD_VAR 0 5
28203: ARRAY
28204: PUSH
28205: LD_INT 1
28207: ARRAY
28208: PUSH
28209: LD_VAR 0 2
28213: EQUAL
28214: PUSH
28215: LD_EXP 105
28219: PUSH
28220: LD_VAR 0 6
28224: ARRAY
28225: PUSH
28226: LD_VAR 0 5
28230: ARRAY
28231: PUSH
28232: LD_INT 2
28234: ARRAY
28235: PUSH
28236: LD_VAR 0 3
28240: EQUAL
28241: AND
28242: IFFALSE 28345
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28244: LD_EXP 105
28248: PUSH
28249: LD_VAR 0 6
28253: ARRAY
28254: PUSH
28255: LD_VAR 0 5
28259: ARRAY
28260: PUSH
28261: LD_INT 1
28263: ARRAY
28264: PPUSH
28265: LD_EXP 105
28269: PUSH
28270: LD_VAR 0 6
28274: ARRAY
28275: PUSH
28276: LD_VAR 0 5
28280: ARRAY
28281: PUSH
28282: LD_INT 2
28284: ARRAY
28285: PPUSH
28286: LD_VAR 0 1
28290: PPUSH
28291: CALL_OW 255
28295: PPUSH
28296: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28300: LD_ADDR_EXP 105
28304: PUSH
28305: LD_EXP 105
28309: PPUSH
28310: LD_VAR 0 6
28314: PPUSH
28315: LD_EXP 105
28319: PUSH
28320: LD_VAR 0 6
28324: ARRAY
28325: PPUSH
28326: LD_VAR 0 5
28330: PPUSH
28331: CALL_OW 3
28335: PPUSH
28336: CALL_OW 1
28340: ST_TO_ADDR
// exit ;
28341: POP
28342: POP
28343: GO 28536
// end ; end ;
28345: GO 28185
28347: POP
28348: POP
// for i := minerMinesList [ index ] downto 1 do
28349: LD_ADDR_VAR 0 5
28353: PUSH
28354: DOUBLE
28355: LD_EXP 105
28359: PUSH
28360: LD_VAR 0 6
28364: ARRAY
28365: INC
28366: ST_TO_ADDR
28367: LD_INT 1
28369: PUSH
28370: FOR_DOWNTO
28371: IFFALSE 28534
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28373: LD_EXP 105
28377: PUSH
28378: LD_VAR 0 6
28382: ARRAY
28383: PUSH
28384: LD_VAR 0 5
28388: ARRAY
28389: PUSH
28390: LD_INT 1
28392: ARRAY
28393: PPUSH
28394: LD_EXP 105
28398: PUSH
28399: LD_VAR 0 6
28403: ARRAY
28404: PUSH
28405: LD_VAR 0 5
28409: ARRAY
28410: PUSH
28411: LD_INT 2
28413: ARRAY
28414: PPUSH
28415: LD_VAR 0 2
28419: PPUSH
28420: LD_VAR 0 3
28424: PPUSH
28425: CALL_OW 298
28429: PUSH
28430: LD_INT 6
28432: LESS
28433: IFFALSE 28532
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28435: LD_EXP 105
28439: PUSH
28440: LD_VAR 0 6
28444: ARRAY
28445: PUSH
28446: LD_VAR 0 5
28450: ARRAY
28451: PUSH
28452: LD_INT 1
28454: ARRAY
28455: PPUSH
28456: LD_EXP 105
28460: PUSH
28461: LD_VAR 0 6
28465: ARRAY
28466: PUSH
28467: LD_VAR 0 5
28471: ARRAY
28472: PUSH
28473: LD_INT 2
28475: ARRAY
28476: PPUSH
28477: LD_VAR 0 1
28481: PPUSH
28482: CALL_OW 255
28486: PPUSH
28487: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28491: LD_ADDR_EXP 105
28495: PUSH
28496: LD_EXP 105
28500: PPUSH
28501: LD_VAR 0 6
28505: PPUSH
28506: LD_EXP 105
28510: PUSH
28511: LD_VAR 0 6
28515: ARRAY
28516: PPUSH
28517: LD_VAR 0 5
28521: PPUSH
28522: CALL_OW 3
28526: PPUSH
28527: CALL_OW 1
28531: ST_TO_ADDR
// end ; end ;
28532: GO 28370
28534: POP
28535: POP
// end ;
28536: LD_VAR 0 4
28540: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28541: LD_INT 0
28543: PPUSH
28544: PPUSH
28545: PPUSH
28546: PPUSH
28547: PPUSH
28548: PPUSH
28549: PPUSH
28550: PPUSH
28551: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28552: LD_VAR 0 1
28556: PPUSH
28557: CALL_OW 264
28561: PUSH
28562: LD_EXP 28
28566: EQUAL
28567: NOT
28568: PUSH
28569: LD_VAR 0 1
28573: PUSH
28574: LD_EXP 104
28578: IN
28579: NOT
28580: OR
28581: IFFALSE 28585
// exit ;
28583: GO 28907
// index := GetElementIndex ( minersList , unit ) ;
28585: LD_ADDR_VAR 0 6
28589: PUSH
28590: LD_EXP 104
28594: PPUSH
28595: LD_VAR 0 1
28599: PPUSH
28600: CALL 34103 0 2
28604: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28605: LD_ADDR_VAR 0 8
28609: PUSH
28610: LD_EXP 106
28614: PUSH
28615: LD_EXP 105
28619: PUSH
28620: LD_VAR 0 6
28624: ARRAY
28625: MINUS
28626: ST_TO_ADDR
// if not minesFreeAmount then
28627: LD_VAR 0 8
28631: NOT
28632: IFFALSE 28636
// exit ;
28634: GO 28907
// tmp := [ ] ;
28636: LD_ADDR_VAR 0 7
28640: PUSH
28641: EMPTY
28642: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28643: LD_ADDR_VAR 0 5
28647: PUSH
28648: DOUBLE
28649: LD_INT 1
28651: DEC
28652: ST_TO_ADDR
28653: LD_VAR 0 8
28657: PUSH
28658: FOR_TO
28659: IFFALSE 28854
// begin _d := rand ( 0 , 5 ) ;
28661: LD_ADDR_VAR 0 11
28665: PUSH
28666: LD_INT 0
28668: PPUSH
28669: LD_INT 5
28671: PPUSH
28672: CALL_OW 12
28676: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28677: LD_ADDR_VAR 0 12
28681: PUSH
28682: LD_INT 2
28684: PPUSH
28685: LD_INT 6
28687: PPUSH
28688: CALL_OW 12
28692: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28693: LD_ADDR_VAR 0 9
28697: PUSH
28698: LD_VAR 0 2
28702: PPUSH
28703: LD_VAR 0 11
28707: PPUSH
28708: LD_VAR 0 12
28712: PPUSH
28713: CALL_OW 272
28717: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28718: LD_ADDR_VAR 0 10
28722: PUSH
28723: LD_VAR 0 3
28727: PPUSH
28728: LD_VAR 0 11
28732: PPUSH
28733: LD_VAR 0 12
28737: PPUSH
28738: CALL_OW 273
28742: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28743: LD_VAR 0 9
28747: PPUSH
28748: LD_VAR 0 10
28752: PPUSH
28753: CALL_OW 488
28757: PUSH
28758: LD_VAR 0 9
28762: PUSH
28763: LD_VAR 0 10
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_VAR 0 7
28776: IN
28777: NOT
28778: AND
28779: PUSH
28780: LD_VAR 0 9
28784: PPUSH
28785: LD_VAR 0 10
28789: PPUSH
28790: CALL_OW 458
28794: NOT
28795: AND
28796: IFFALSE 28838
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28798: LD_ADDR_VAR 0 7
28802: PUSH
28803: LD_VAR 0 7
28807: PPUSH
28808: LD_VAR 0 7
28812: PUSH
28813: LD_INT 1
28815: PLUS
28816: PPUSH
28817: LD_VAR 0 9
28821: PUSH
28822: LD_VAR 0 10
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PPUSH
28831: CALL_OW 1
28835: ST_TO_ADDR
28836: GO 28852
// i := i - 1 ;
28838: LD_ADDR_VAR 0 5
28842: PUSH
28843: LD_VAR 0 5
28847: PUSH
28848: LD_INT 1
28850: MINUS
28851: ST_TO_ADDR
// end ;
28852: GO 28658
28854: POP
28855: POP
// for i in tmp do
28856: LD_ADDR_VAR 0 5
28860: PUSH
28861: LD_VAR 0 7
28865: PUSH
28866: FOR_IN
28867: IFFALSE 28905
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28869: LD_VAR 0 1
28873: PPUSH
28874: LD_VAR 0 5
28878: PUSH
28879: LD_INT 1
28881: ARRAY
28882: PPUSH
28883: LD_VAR 0 5
28887: PUSH
28888: LD_INT 2
28890: ARRAY
28891: PPUSH
28892: CALL 27847 0 3
28896: NOT
28897: IFFALSE 28903
// exit ;
28899: POP
28900: POP
28901: GO 28907
28903: GO 28866
28905: POP
28906: POP
// end ;
28907: LD_VAR 0 4
28911: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28912: LD_INT 0
28914: PPUSH
28915: PPUSH
28916: PPUSH
28917: PPUSH
28918: PPUSH
28919: PPUSH
28920: PPUSH
// if not GetClass ( unit ) = class_sniper then
28921: LD_VAR 0 1
28925: PPUSH
28926: CALL_OW 257
28930: PUSH
28931: LD_INT 5
28933: EQUAL
28934: NOT
28935: IFFALSE 28939
// exit ;
28937: GO 29327
// dist := 8 ;
28939: LD_ADDR_VAR 0 5
28943: PUSH
28944: LD_INT 8
28946: ST_TO_ADDR
// viewRange := 12 ;
28947: LD_ADDR_VAR 0 7
28951: PUSH
28952: LD_INT 12
28954: ST_TO_ADDR
// side := GetSide ( unit ) ;
28955: LD_ADDR_VAR 0 6
28959: PUSH
28960: LD_VAR 0 1
28964: PPUSH
28965: CALL_OW 255
28969: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28970: LD_INT 61
28972: PPUSH
28973: LD_VAR 0 6
28977: PPUSH
28978: CALL_OW 321
28982: PUSH
28983: LD_INT 2
28985: EQUAL
28986: IFFALSE 28996
// viewRange := 16 ;
28988: LD_ADDR_VAR 0 7
28992: PUSH
28993: LD_INT 16
28995: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28996: LD_VAR 0 1
29000: PPUSH
29001: LD_VAR 0 2
29005: PPUSH
29006: LD_VAR 0 3
29010: PPUSH
29011: CALL_OW 297
29015: PUSH
29016: LD_VAR 0 5
29020: GREATER
29021: IFFALSE 29100
// begin ComMoveXY ( unit , x , y ) ;
29023: LD_VAR 0 1
29027: PPUSH
29028: LD_VAR 0 2
29032: PPUSH
29033: LD_VAR 0 3
29037: PPUSH
29038: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29042: LD_INT 35
29044: PPUSH
29045: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29049: LD_VAR 0 1
29053: PPUSH
29054: LD_VAR 0 2
29058: PPUSH
29059: LD_VAR 0 3
29063: PPUSH
29064: CALL 64875 0 3
29068: NOT
29069: IFFALSE 29073
// exit ;
29071: GO 29327
// until GetDistUnitXY ( unit , x , y ) < dist ;
29073: LD_VAR 0 1
29077: PPUSH
29078: LD_VAR 0 2
29082: PPUSH
29083: LD_VAR 0 3
29087: PPUSH
29088: CALL_OW 297
29092: PUSH
29093: LD_VAR 0 5
29097: LESS
29098: IFFALSE 29042
// end ; ComTurnXY ( unit , x , y ) ;
29100: LD_VAR 0 1
29104: PPUSH
29105: LD_VAR 0 2
29109: PPUSH
29110: LD_VAR 0 3
29114: PPUSH
29115: CALL_OW 118
// wait ( 5 ) ;
29119: LD_INT 5
29121: PPUSH
29122: CALL_OW 67
// _d := GetDir ( unit ) ;
29126: LD_ADDR_VAR 0 10
29130: PUSH
29131: LD_VAR 0 1
29135: PPUSH
29136: CALL_OW 254
29140: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29141: LD_ADDR_VAR 0 8
29145: PUSH
29146: LD_VAR 0 1
29150: PPUSH
29151: CALL_OW 250
29155: PPUSH
29156: LD_VAR 0 10
29160: PPUSH
29161: LD_VAR 0 5
29165: PPUSH
29166: CALL_OW 272
29170: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29171: LD_ADDR_VAR 0 9
29175: PUSH
29176: LD_VAR 0 1
29180: PPUSH
29181: CALL_OW 251
29185: PPUSH
29186: LD_VAR 0 10
29190: PPUSH
29191: LD_VAR 0 5
29195: PPUSH
29196: CALL_OW 273
29200: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29201: LD_VAR 0 8
29205: PPUSH
29206: LD_VAR 0 9
29210: PPUSH
29211: CALL_OW 488
29215: NOT
29216: IFFALSE 29220
// exit ;
29218: GO 29327
// ComAnimCustom ( unit , 1 ) ;
29220: LD_VAR 0 1
29224: PPUSH
29225: LD_INT 1
29227: PPUSH
29228: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29232: LD_VAR 0 8
29236: PPUSH
29237: LD_VAR 0 9
29241: PPUSH
29242: LD_VAR 0 6
29246: PPUSH
29247: LD_VAR 0 7
29251: PPUSH
29252: CALL_OW 330
// repeat wait ( 1 ) ;
29256: LD_INT 1
29258: PPUSH
29259: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29263: LD_VAR 0 1
29267: PPUSH
29268: CALL_OW 316
29272: PUSH
29273: LD_VAR 0 1
29277: PPUSH
29278: CALL_OW 314
29282: OR
29283: PUSH
29284: LD_VAR 0 1
29288: PPUSH
29289: CALL_OW 302
29293: NOT
29294: OR
29295: PUSH
29296: LD_VAR 0 1
29300: PPUSH
29301: CALL_OW 301
29305: OR
29306: IFFALSE 29256
// RemoveSeeing ( _x , _y , side ) ;
29308: LD_VAR 0 8
29312: PPUSH
29313: LD_VAR 0 9
29317: PPUSH
29318: LD_VAR 0 6
29322: PPUSH
29323: CALL_OW 331
// end ; end_of_file
29327: LD_VAR 0 4
29331: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29332: LD_INT 0
29334: PPUSH
29335: PPUSH
// if exist_mode then
29336: LD_VAR 0 2
29340: IFFALSE 29365
// unit := CreateCharacter ( prefix & ident ) else
29342: LD_ADDR_VAR 0 5
29346: PUSH
29347: LD_VAR 0 3
29351: PUSH
29352: LD_VAR 0 1
29356: STR
29357: PPUSH
29358: CALL_OW 34
29362: ST_TO_ADDR
29363: GO 29380
// unit := NewCharacter ( ident ) ;
29365: LD_ADDR_VAR 0 5
29369: PUSH
29370: LD_VAR 0 1
29374: PPUSH
29375: CALL_OW 25
29379: ST_TO_ADDR
// result := unit ;
29380: LD_ADDR_VAR 0 4
29384: PUSH
29385: LD_VAR 0 5
29389: ST_TO_ADDR
// end ;
29390: LD_VAR 0 4
29394: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29395: LD_INT 0
29397: PPUSH
29398: PPUSH
// if not side or not nation then
29399: LD_VAR 0 1
29403: NOT
29404: PUSH
29405: LD_VAR 0 2
29409: NOT
29410: OR
29411: IFFALSE 29415
// exit ;
29413: GO 30183
// case nation of nation_american :
29415: LD_VAR 0 2
29419: PUSH
29420: LD_INT 1
29422: DOUBLE
29423: EQUAL
29424: IFTRUE 29428
29426: GO 29642
29428: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29429: LD_ADDR_VAR 0 4
29433: PUSH
29434: LD_INT 35
29436: PUSH
29437: LD_INT 45
29439: PUSH
29440: LD_INT 46
29442: PUSH
29443: LD_INT 47
29445: PUSH
29446: LD_INT 82
29448: PUSH
29449: LD_INT 83
29451: PUSH
29452: LD_INT 84
29454: PUSH
29455: LD_INT 85
29457: PUSH
29458: LD_INT 86
29460: PUSH
29461: LD_INT 1
29463: PUSH
29464: LD_INT 2
29466: PUSH
29467: LD_INT 6
29469: PUSH
29470: LD_INT 15
29472: PUSH
29473: LD_INT 16
29475: PUSH
29476: LD_INT 7
29478: PUSH
29479: LD_INT 12
29481: PUSH
29482: LD_INT 13
29484: PUSH
29485: LD_INT 10
29487: PUSH
29488: LD_INT 14
29490: PUSH
29491: LD_INT 20
29493: PUSH
29494: LD_INT 21
29496: PUSH
29497: LD_INT 22
29499: PUSH
29500: LD_INT 25
29502: PUSH
29503: LD_INT 32
29505: PUSH
29506: LD_INT 27
29508: PUSH
29509: LD_INT 36
29511: PUSH
29512: LD_INT 69
29514: PUSH
29515: LD_INT 39
29517: PUSH
29518: LD_INT 34
29520: PUSH
29521: LD_INT 40
29523: PUSH
29524: LD_INT 48
29526: PUSH
29527: LD_INT 49
29529: PUSH
29530: LD_INT 50
29532: PUSH
29533: LD_INT 51
29535: PUSH
29536: LD_INT 52
29538: PUSH
29539: LD_INT 53
29541: PUSH
29542: LD_INT 54
29544: PUSH
29545: LD_INT 55
29547: PUSH
29548: LD_INT 56
29550: PUSH
29551: LD_INT 57
29553: PUSH
29554: LD_INT 58
29556: PUSH
29557: LD_INT 59
29559: PUSH
29560: LD_INT 60
29562: PUSH
29563: LD_INT 61
29565: PUSH
29566: LD_INT 62
29568: PUSH
29569: LD_INT 80
29571: PUSH
29572: LD_INT 82
29574: PUSH
29575: LD_INT 83
29577: PUSH
29578: LD_INT 84
29580: PUSH
29581: LD_INT 85
29583: PUSH
29584: LD_INT 86
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: ST_TO_ADDR
29640: GO 30107
29642: LD_INT 2
29644: DOUBLE
29645: EQUAL
29646: IFTRUE 29650
29648: GO 29876
29650: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29651: LD_ADDR_VAR 0 4
29655: PUSH
29656: LD_INT 35
29658: PUSH
29659: LD_INT 45
29661: PUSH
29662: LD_INT 46
29664: PUSH
29665: LD_INT 47
29667: PUSH
29668: LD_INT 82
29670: PUSH
29671: LD_INT 83
29673: PUSH
29674: LD_INT 84
29676: PUSH
29677: LD_INT 85
29679: PUSH
29680: LD_INT 87
29682: PUSH
29683: LD_INT 70
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: LD_INT 11
29691: PUSH
29692: LD_INT 3
29694: PUSH
29695: LD_INT 4
29697: PUSH
29698: LD_INT 5
29700: PUSH
29701: LD_INT 6
29703: PUSH
29704: LD_INT 15
29706: PUSH
29707: LD_INT 18
29709: PUSH
29710: LD_INT 7
29712: PUSH
29713: LD_INT 17
29715: PUSH
29716: LD_INT 8
29718: PUSH
29719: LD_INT 20
29721: PUSH
29722: LD_INT 21
29724: PUSH
29725: LD_INT 22
29727: PUSH
29728: LD_INT 72
29730: PUSH
29731: LD_INT 26
29733: PUSH
29734: LD_INT 69
29736: PUSH
29737: LD_INT 39
29739: PUSH
29740: LD_INT 40
29742: PUSH
29743: LD_INT 41
29745: PUSH
29746: LD_INT 42
29748: PUSH
29749: LD_INT 43
29751: PUSH
29752: LD_INT 48
29754: PUSH
29755: LD_INT 49
29757: PUSH
29758: LD_INT 50
29760: PUSH
29761: LD_INT 51
29763: PUSH
29764: LD_INT 52
29766: PUSH
29767: LD_INT 53
29769: PUSH
29770: LD_INT 54
29772: PUSH
29773: LD_INT 55
29775: PUSH
29776: LD_INT 56
29778: PUSH
29779: LD_INT 60
29781: PUSH
29782: LD_INT 61
29784: PUSH
29785: LD_INT 62
29787: PUSH
29788: LD_INT 66
29790: PUSH
29791: LD_INT 67
29793: PUSH
29794: LD_INT 68
29796: PUSH
29797: LD_INT 81
29799: PUSH
29800: LD_INT 82
29802: PUSH
29803: LD_INT 83
29805: PUSH
29806: LD_INT 84
29808: PUSH
29809: LD_INT 85
29811: PUSH
29812: LD_INT 87
29814: PUSH
29815: LD_INT 88
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
29874: GO 30107
29876: LD_INT 3
29878: DOUBLE
29879: EQUAL
29880: IFTRUE 29884
29882: GO 30106
29884: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29885: LD_ADDR_VAR 0 4
29889: PUSH
29890: LD_INT 46
29892: PUSH
29893: LD_INT 47
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: LD_INT 2
29901: PUSH
29902: LD_INT 82
29904: PUSH
29905: LD_INT 83
29907: PUSH
29908: LD_INT 84
29910: PUSH
29911: LD_INT 85
29913: PUSH
29914: LD_INT 86
29916: PUSH
29917: LD_INT 11
29919: PUSH
29920: LD_INT 9
29922: PUSH
29923: LD_INT 20
29925: PUSH
29926: LD_INT 19
29928: PUSH
29929: LD_INT 21
29931: PUSH
29932: LD_INT 24
29934: PUSH
29935: LD_INT 22
29937: PUSH
29938: LD_INT 25
29940: PUSH
29941: LD_INT 28
29943: PUSH
29944: LD_INT 29
29946: PUSH
29947: LD_INT 30
29949: PUSH
29950: LD_INT 31
29952: PUSH
29953: LD_INT 37
29955: PUSH
29956: LD_INT 38
29958: PUSH
29959: LD_INT 32
29961: PUSH
29962: LD_INT 27
29964: PUSH
29965: LD_INT 33
29967: PUSH
29968: LD_INT 69
29970: PUSH
29971: LD_INT 39
29973: PUSH
29974: LD_INT 34
29976: PUSH
29977: LD_INT 40
29979: PUSH
29980: LD_INT 71
29982: PUSH
29983: LD_INT 23
29985: PUSH
29986: LD_INT 44
29988: PUSH
29989: LD_INT 48
29991: PUSH
29992: LD_INT 49
29994: PUSH
29995: LD_INT 50
29997: PUSH
29998: LD_INT 51
30000: PUSH
30001: LD_INT 52
30003: PUSH
30004: LD_INT 53
30006: PUSH
30007: LD_INT 54
30009: PUSH
30010: LD_INT 55
30012: PUSH
30013: LD_INT 56
30015: PUSH
30016: LD_INT 57
30018: PUSH
30019: LD_INT 58
30021: PUSH
30022: LD_INT 59
30024: PUSH
30025: LD_INT 63
30027: PUSH
30028: LD_INT 64
30030: PUSH
30031: LD_INT 65
30033: PUSH
30034: LD_INT 82
30036: PUSH
30037: LD_INT 83
30039: PUSH
30040: LD_INT 84
30042: PUSH
30043: LD_INT 85
30045: PUSH
30046: LD_INT 86
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: ST_TO_ADDR
30104: GO 30107
30106: POP
// if state > - 1 and state < 3 then
30107: LD_VAR 0 3
30111: PUSH
30112: LD_INT 1
30114: NEG
30115: GREATER
30116: PUSH
30117: LD_VAR 0 3
30121: PUSH
30122: LD_INT 3
30124: LESS
30125: AND
30126: IFFALSE 30183
// for i in result do
30128: LD_ADDR_VAR 0 5
30132: PUSH
30133: LD_VAR 0 4
30137: PUSH
30138: FOR_IN
30139: IFFALSE 30181
// if GetTech ( i , side ) <> state then
30141: LD_VAR 0 5
30145: PPUSH
30146: LD_VAR 0 1
30150: PPUSH
30151: CALL_OW 321
30155: PUSH
30156: LD_VAR 0 3
30160: NONEQUAL
30161: IFFALSE 30179
// result := result diff i ;
30163: LD_ADDR_VAR 0 4
30167: PUSH
30168: LD_VAR 0 4
30172: PUSH
30173: LD_VAR 0 5
30177: DIFF
30178: ST_TO_ADDR
30179: GO 30138
30181: POP
30182: POP
// end ;
30183: LD_VAR 0 4
30187: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30188: LD_INT 0
30190: PPUSH
30191: PPUSH
30192: PPUSH
// result := true ;
30193: LD_ADDR_VAR 0 3
30197: PUSH
30198: LD_INT 1
30200: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30201: LD_ADDR_VAR 0 5
30205: PUSH
30206: LD_VAR 0 2
30210: PPUSH
30211: CALL_OW 480
30215: ST_TO_ADDR
// if not tmp then
30216: LD_VAR 0 5
30220: NOT
30221: IFFALSE 30225
// exit ;
30223: GO 30274
// for i in tmp do
30225: LD_ADDR_VAR 0 4
30229: PUSH
30230: LD_VAR 0 5
30234: PUSH
30235: FOR_IN
30236: IFFALSE 30272
// if GetTech ( i , side ) <> state_researched then
30238: LD_VAR 0 4
30242: PPUSH
30243: LD_VAR 0 1
30247: PPUSH
30248: CALL_OW 321
30252: PUSH
30253: LD_INT 2
30255: NONEQUAL
30256: IFFALSE 30270
// begin result := false ;
30258: LD_ADDR_VAR 0 3
30262: PUSH
30263: LD_INT 0
30265: ST_TO_ADDR
// exit ;
30266: POP
30267: POP
30268: GO 30274
// end ;
30270: GO 30235
30272: POP
30273: POP
// end ;
30274: LD_VAR 0 3
30278: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30279: LD_INT 0
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30294: LD_VAR 0 1
30298: NOT
30299: PUSH
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL_OW 257
30309: PUSH
30310: LD_INT 9
30312: NONEQUAL
30313: OR
30314: IFFALSE 30318
// exit ;
30316: GO 30891
// side := GetSide ( unit ) ;
30318: LD_ADDR_VAR 0 9
30322: PUSH
30323: LD_VAR 0 1
30327: PPUSH
30328: CALL_OW 255
30332: ST_TO_ADDR
// tech_space := tech_spacanom ;
30333: LD_ADDR_VAR 0 12
30337: PUSH
30338: LD_INT 29
30340: ST_TO_ADDR
// tech_time := tech_taurad ;
30341: LD_ADDR_VAR 0 13
30345: PUSH
30346: LD_INT 28
30348: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30349: LD_ADDR_VAR 0 11
30353: PUSH
30354: LD_VAR 0 1
30358: PPUSH
30359: CALL_OW 310
30363: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30364: LD_VAR 0 11
30368: PPUSH
30369: CALL_OW 247
30373: PUSH
30374: LD_INT 2
30376: EQUAL
30377: IFFALSE 30381
// exit ;
30379: GO 30891
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30381: LD_ADDR_VAR 0 8
30385: PUSH
30386: LD_INT 81
30388: PUSH
30389: LD_VAR 0 9
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 3
30400: PUSH
30401: LD_INT 21
30403: PUSH
30404: LD_INT 3
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PPUSH
30419: CALL_OW 69
30423: ST_TO_ADDR
// if not tmp then
30424: LD_VAR 0 8
30428: NOT
30429: IFFALSE 30433
// exit ;
30431: GO 30891
// if in_unit then
30433: LD_VAR 0 11
30437: IFFALSE 30461
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30439: LD_ADDR_VAR 0 10
30443: PUSH
30444: LD_VAR 0 8
30448: PPUSH
30449: LD_VAR 0 11
30453: PPUSH
30454: CALL_OW 74
30458: ST_TO_ADDR
30459: GO 30481
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30461: LD_ADDR_VAR 0 10
30465: PUSH
30466: LD_VAR 0 8
30470: PPUSH
30471: LD_VAR 0 1
30475: PPUSH
30476: CALL_OW 74
30480: ST_TO_ADDR
// if not enemy then
30481: LD_VAR 0 10
30485: NOT
30486: IFFALSE 30490
// exit ;
30488: GO 30891
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30490: LD_VAR 0 11
30494: PUSH
30495: LD_VAR 0 11
30499: PPUSH
30500: LD_VAR 0 10
30504: PPUSH
30505: CALL_OW 296
30509: PUSH
30510: LD_INT 13
30512: GREATER
30513: AND
30514: PUSH
30515: LD_VAR 0 1
30519: PPUSH
30520: LD_VAR 0 10
30524: PPUSH
30525: CALL_OW 296
30529: PUSH
30530: LD_INT 12
30532: GREATER
30533: OR
30534: IFFALSE 30538
// exit ;
30536: GO 30891
// missile := [ 1 ] ;
30538: LD_ADDR_VAR 0 14
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: EMPTY
30547: LIST
30548: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30549: LD_VAR 0 9
30553: PPUSH
30554: LD_VAR 0 12
30558: PPUSH
30559: CALL_OW 325
30563: IFFALSE 30592
// missile := Insert ( missile , missile + 1 , 2 ) ;
30565: LD_ADDR_VAR 0 14
30569: PUSH
30570: LD_VAR 0 14
30574: PPUSH
30575: LD_VAR 0 14
30579: PUSH
30580: LD_INT 1
30582: PLUS
30583: PPUSH
30584: LD_INT 2
30586: PPUSH
30587: CALL_OW 2
30591: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30592: LD_VAR 0 9
30596: PPUSH
30597: LD_VAR 0 13
30601: PPUSH
30602: CALL_OW 325
30606: PUSH
30607: LD_VAR 0 10
30611: PPUSH
30612: CALL_OW 255
30616: PPUSH
30617: LD_VAR 0 13
30621: PPUSH
30622: CALL_OW 325
30626: NOT
30627: AND
30628: IFFALSE 30657
// missile := Insert ( missile , missile + 1 , 3 ) ;
30630: LD_ADDR_VAR 0 14
30634: PUSH
30635: LD_VAR 0 14
30639: PPUSH
30640: LD_VAR 0 14
30644: PUSH
30645: LD_INT 1
30647: PLUS
30648: PPUSH
30649: LD_INT 3
30651: PPUSH
30652: CALL_OW 2
30656: ST_TO_ADDR
// if missile < 2 then
30657: LD_VAR 0 14
30661: PUSH
30662: LD_INT 2
30664: LESS
30665: IFFALSE 30669
// exit ;
30667: GO 30891
// x := GetX ( enemy ) ;
30669: LD_ADDR_VAR 0 4
30673: PUSH
30674: LD_VAR 0 10
30678: PPUSH
30679: CALL_OW 250
30683: ST_TO_ADDR
// y := GetY ( enemy ) ;
30684: LD_ADDR_VAR 0 5
30688: PUSH
30689: LD_VAR 0 10
30693: PPUSH
30694: CALL_OW 251
30698: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30699: LD_ADDR_VAR 0 6
30703: PUSH
30704: LD_VAR 0 4
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PPUSH
30713: LD_INT 1
30715: PPUSH
30716: CALL_OW 12
30720: PLUS
30721: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30722: LD_ADDR_VAR 0 7
30726: PUSH
30727: LD_VAR 0 5
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PPUSH
30736: LD_INT 1
30738: PPUSH
30739: CALL_OW 12
30743: PLUS
30744: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30745: LD_VAR 0 6
30749: PPUSH
30750: LD_VAR 0 7
30754: PPUSH
30755: CALL_OW 488
30759: NOT
30760: IFFALSE 30782
// begin _x := x ;
30762: LD_ADDR_VAR 0 6
30766: PUSH
30767: LD_VAR 0 4
30771: ST_TO_ADDR
// _y := y ;
30772: LD_ADDR_VAR 0 7
30776: PUSH
30777: LD_VAR 0 5
30781: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30782: LD_ADDR_VAR 0 3
30786: PUSH
30787: LD_INT 1
30789: PPUSH
30790: LD_VAR 0 14
30794: PPUSH
30795: CALL_OW 12
30799: ST_TO_ADDR
// case i of 1 :
30800: LD_VAR 0 3
30804: PUSH
30805: LD_INT 1
30807: DOUBLE
30808: EQUAL
30809: IFTRUE 30813
30811: GO 30830
30813: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30814: LD_VAR 0 1
30818: PPUSH
30819: LD_VAR 0 10
30823: PPUSH
30824: CALL_OW 115
30828: GO 30891
30830: LD_INT 2
30832: DOUBLE
30833: EQUAL
30834: IFTRUE 30838
30836: GO 30860
30838: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30839: LD_VAR 0 1
30843: PPUSH
30844: LD_VAR 0 6
30848: PPUSH
30849: LD_VAR 0 7
30853: PPUSH
30854: CALL_OW 153
30858: GO 30891
30860: LD_INT 3
30862: DOUBLE
30863: EQUAL
30864: IFTRUE 30868
30866: GO 30890
30868: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30869: LD_VAR 0 1
30873: PPUSH
30874: LD_VAR 0 6
30878: PPUSH
30879: LD_VAR 0 7
30883: PPUSH
30884: CALL_OW 154
30888: GO 30891
30890: POP
// end ;
30891: LD_VAR 0 2
30895: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30896: LD_INT 0
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
// if not unit or not building then
30904: LD_VAR 0 1
30908: NOT
30909: PUSH
30910: LD_VAR 0 2
30914: NOT
30915: OR
30916: IFFALSE 30920
// exit ;
30918: GO 31078
// x := GetX ( building ) ;
30920: LD_ADDR_VAR 0 5
30924: PUSH
30925: LD_VAR 0 2
30929: PPUSH
30930: CALL_OW 250
30934: ST_TO_ADDR
// y := GetY ( building ) ;
30935: LD_ADDR_VAR 0 6
30939: PUSH
30940: LD_VAR 0 2
30944: PPUSH
30945: CALL_OW 251
30949: ST_TO_ADDR
// for i = 0 to 5 do
30950: LD_ADDR_VAR 0 4
30954: PUSH
30955: DOUBLE
30956: LD_INT 0
30958: DEC
30959: ST_TO_ADDR
30960: LD_INT 5
30962: PUSH
30963: FOR_TO
30964: IFFALSE 31076
// begin _x := ShiftX ( x , i , 3 ) ;
30966: LD_ADDR_VAR 0 7
30970: PUSH
30971: LD_VAR 0 5
30975: PPUSH
30976: LD_VAR 0 4
30980: PPUSH
30981: LD_INT 3
30983: PPUSH
30984: CALL_OW 272
30988: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30989: LD_ADDR_VAR 0 8
30993: PUSH
30994: LD_VAR 0 6
30998: PPUSH
30999: LD_VAR 0 4
31003: PPUSH
31004: LD_INT 3
31006: PPUSH
31007: CALL_OW 273
31011: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31012: LD_VAR 0 7
31016: PPUSH
31017: LD_VAR 0 8
31021: PPUSH
31022: CALL_OW 488
31026: NOT
31027: IFFALSE 31031
// continue ;
31029: GO 30963
// if HexInfo ( _x , _y ) = 0 then
31031: LD_VAR 0 7
31035: PPUSH
31036: LD_VAR 0 8
31040: PPUSH
31041: CALL_OW 428
31045: PUSH
31046: LD_INT 0
31048: EQUAL
31049: IFFALSE 31074
// begin ComMoveXY ( unit , _x , _y ) ;
31051: LD_VAR 0 1
31055: PPUSH
31056: LD_VAR 0 7
31060: PPUSH
31061: LD_VAR 0 8
31065: PPUSH
31066: CALL_OW 111
// exit ;
31070: POP
31071: POP
31072: GO 31078
// end ; end ;
31074: GO 30963
31076: POP
31077: POP
// end ;
31078: LD_VAR 0 3
31082: RET
// export function ScanBase ( side , base_area ) ; begin
31083: LD_INT 0
31085: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31086: LD_ADDR_VAR 0 3
31090: PUSH
31091: LD_VAR 0 2
31095: PPUSH
31096: LD_INT 81
31098: PUSH
31099: LD_VAR 0 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PPUSH
31108: CALL_OW 70
31112: ST_TO_ADDR
// end ;
31113: LD_VAR 0 3
31117: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31118: LD_INT 0
31120: PPUSH
31121: PPUSH
31122: PPUSH
31123: PPUSH
// result := false ;
31124: LD_ADDR_VAR 0 2
31128: PUSH
31129: LD_INT 0
31131: ST_TO_ADDR
// side := GetSide ( unit ) ;
31132: LD_ADDR_VAR 0 3
31136: PUSH
31137: LD_VAR 0 1
31141: PPUSH
31142: CALL_OW 255
31146: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31147: LD_ADDR_VAR 0 4
31151: PUSH
31152: LD_VAR 0 1
31156: PPUSH
31157: CALL_OW 248
31161: ST_TO_ADDR
// case nat of 1 :
31162: LD_VAR 0 4
31166: PUSH
31167: LD_INT 1
31169: DOUBLE
31170: EQUAL
31171: IFTRUE 31175
31173: GO 31186
31175: POP
// tech := tech_lassight ; 2 :
31176: LD_ADDR_VAR 0 5
31180: PUSH
31181: LD_INT 12
31183: ST_TO_ADDR
31184: GO 31225
31186: LD_INT 2
31188: DOUBLE
31189: EQUAL
31190: IFTRUE 31194
31192: GO 31205
31194: POP
// tech := tech_mortar ; 3 :
31195: LD_ADDR_VAR 0 5
31199: PUSH
31200: LD_INT 41
31202: ST_TO_ADDR
31203: GO 31225
31205: LD_INT 3
31207: DOUBLE
31208: EQUAL
31209: IFTRUE 31213
31211: GO 31224
31213: POP
// tech := tech_bazooka ; end ;
31214: LD_ADDR_VAR 0 5
31218: PUSH
31219: LD_INT 44
31221: ST_TO_ADDR
31222: GO 31225
31224: POP
// if Researched ( side , tech ) then
31225: LD_VAR 0 3
31229: PPUSH
31230: LD_VAR 0 5
31234: PPUSH
31235: CALL_OW 325
31239: IFFALSE 31266
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31241: LD_ADDR_VAR 0 2
31245: PUSH
31246: LD_INT 5
31248: PUSH
31249: LD_INT 8
31251: PUSH
31252: LD_INT 9
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: LIST
31259: PUSH
31260: LD_VAR 0 4
31264: ARRAY
31265: ST_TO_ADDR
// end ;
31266: LD_VAR 0 2
31270: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31271: LD_INT 0
31273: PPUSH
31274: PPUSH
31275: PPUSH
// if not mines then
31276: LD_VAR 0 2
31280: NOT
31281: IFFALSE 31285
// exit ;
31283: GO 31429
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31285: LD_ADDR_VAR 0 5
31289: PUSH
31290: LD_INT 81
31292: PUSH
31293: LD_VAR 0 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 3
31304: PUSH
31305: LD_INT 21
31307: PUSH
31308: LD_INT 3
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PPUSH
31323: CALL_OW 69
31327: ST_TO_ADDR
// for i in mines do
31328: LD_ADDR_VAR 0 4
31332: PUSH
31333: LD_VAR 0 2
31337: PUSH
31338: FOR_IN
31339: IFFALSE 31427
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31341: LD_VAR 0 4
31345: PUSH
31346: LD_INT 1
31348: ARRAY
31349: PPUSH
31350: LD_VAR 0 4
31354: PUSH
31355: LD_INT 2
31357: ARRAY
31358: PPUSH
31359: CALL_OW 458
31363: NOT
31364: IFFALSE 31368
// continue ;
31366: GO 31338
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31368: LD_VAR 0 4
31372: PUSH
31373: LD_INT 1
31375: ARRAY
31376: PPUSH
31377: LD_VAR 0 4
31381: PUSH
31382: LD_INT 2
31384: ARRAY
31385: PPUSH
31386: CALL_OW 428
31390: PUSH
31391: LD_VAR 0 5
31395: IN
31396: IFFALSE 31425
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31398: LD_VAR 0 4
31402: PUSH
31403: LD_INT 1
31405: ARRAY
31406: PPUSH
31407: LD_VAR 0 4
31411: PUSH
31412: LD_INT 2
31414: ARRAY
31415: PPUSH
31416: LD_VAR 0 1
31420: PPUSH
31421: CALL_OW 456
// end ;
31425: GO 31338
31427: POP
31428: POP
// end ;
31429: LD_VAR 0 3
31433: RET
// export function Count ( array ) ; var i ; begin
31434: LD_INT 0
31436: PPUSH
31437: PPUSH
// result := 0 ;
31438: LD_ADDR_VAR 0 2
31442: PUSH
31443: LD_INT 0
31445: ST_TO_ADDR
// for i in array do
31446: LD_ADDR_VAR 0 3
31450: PUSH
31451: LD_VAR 0 1
31455: PUSH
31456: FOR_IN
31457: IFFALSE 31481
// if i then
31459: LD_VAR 0 3
31463: IFFALSE 31479
// result := result + 1 ;
31465: LD_ADDR_VAR 0 2
31469: PUSH
31470: LD_VAR 0 2
31474: PUSH
31475: LD_INT 1
31477: PLUS
31478: ST_TO_ADDR
31479: GO 31456
31481: POP
31482: POP
// end ;
31483: LD_VAR 0 2
31487: RET
// export function IsEmpty ( building ) ; begin
31488: LD_INT 0
31490: PPUSH
// if not building then
31491: LD_VAR 0 1
31495: NOT
31496: IFFALSE 31500
// exit ;
31498: GO 31543
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31500: LD_ADDR_VAR 0 2
31504: PUSH
31505: LD_VAR 0 1
31509: PUSH
31510: LD_INT 22
31512: PUSH
31513: LD_VAR 0 1
31517: PPUSH
31518: CALL_OW 255
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 58
31529: PUSH
31530: EMPTY
31531: LIST
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PPUSH
31537: CALL_OW 69
31541: IN
31542: ST_TO_ADDR
// end ;
31543: LD_VAR 0 2
31547: RET
// export function IsNotFull ( building ) ; begin
31548: LD_INT 0
31550: PPUSH
// if not building then
31551: LD_VAR 0 1
31555: NOT
31556: IFFALSE 31560
// exit ;
31558: GO 31579
// result := UnitsInside ( building ) < 6 ;
31560: LD_ADDR_VAR 0 2
31564: PUSH
31565: LD_VAR 0 1
31569: PPUSH
31570: CALL_OW 313
31574: PUSH
31575: LD_INT 6
31577: LESS
31578: ST_TO_ADDR
// end ;
31579: LD_VAR 0 2
31583: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31584: LD_INT 0
31586: PPUSH
31587: PPUSH
31588: PPUSH
31589: PPUSH
// tmp := [ ] ;
31590: LD_ADDR_VAR 0 3
31594: PUSH
31595: EMPTY
31596: ST_TO_ADDR
// list := [ ] ;
31597: LD_ADDR_VAR 0 5
31601: PUSH
31602: EMPTY
31603: ST_TO_ADDR
// for i = 16 to 25 do
31604: LD_ADDR_VAR 0 4
31608: PUSH
31609: DOUBLE
31610: LD_INT 16
31612: DEC
31613: ST_TO_ADDR
31614: LD_INT 25
31616: PUSH
31617: FOR_TO
31618: IFFALSE 31691
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31620: LD_ADDR_VAR 0 3
31624: PUSH
31625: LD_VAR 0 3
31629: PUSH
31630: LD_INT 22
31632: PUSH
31633: LD_VAR 0 1
31637: PPUSH
31638: CALL_OW 255
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 91
31649: PUSH
31650: LD_VAR 0 1
31654: PUSH
31655: LD_INT 6
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 30
31665: PUSH
31666: LD_VAR 0 4
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: PPUSH
31683: CALL_OW 69
31687: ADD
31688: ST_TO_ADDR
31689: GO 31617
31691: POP
31692: POP
// for i = 1 to tmp do
31693: LD_ADDR_VAR 0 4
31697: PUSH
31698: DOUBLE
31699: LD_INT 1
31701: DEC
31702: ST_TO_ADDR
31703: LD_VAR 0 3
31707: PUSH
31708: FOR_TO
31709: IFFALSE 31797
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31711: LD_ADDR_VAR 0 5
31715: PUSH
31716: LD_VAR 0 5
31720: PUSH
31721: LD_VAR 0 3
31725: PUSH
31726: LD_VAR 0 4
31730: ARRAY
31731: PPUSH
31732: CALL_OW 266
31736: PUSH
31737: LD_VAR 0 3
31741: PUSH
31742: LD_VAR 0 4
31746: ARRAY
31747: PPUSH
31748: CALL_OW 250
31752: PUSH
31753: LD_VAR 0 3
31757: PUSH
31758: LD_VAR 0 4
31762: ARRAY
31763: PPUSH
31764: CALL_OW 251
31768: PUSH
31769: LD_VAR 0 3
31773: PUSH
31774: LD_VAR 0 4
31778: ARRAY
31779: PPUSH
31780: CALL_OW 254
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: ADD
31794: ST_TO_ADDR
31795: GO 31708
31797: POP
31798: POP
// result := list ;
31799: LD_ADDR_VAR 0 2
31803: PUSH
31804: LD_VAR 0 5
31808: ST_TO_ADDR
// end ;
31809: LD_VAR 0 2
31813: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31814: LD_INT 0
31816: PPUSH
31817: PPUSH
31818: PPUSH
31819: PPUSH
31820: PPUSH
31821: PPUSH
31822: PPUSH
// if not factory then
31823: LD_VAR 0 1
31827: NOT
31828: IFFALSE 31832
// exit ;
31830: GO 32425
// if control = control_apeman then
31832: LD_VAR 0 4
31836: PUSH
31837: LD_INT 5
31839: EQUAL
31840: IFFALSE 31949
// begin tmp := UnitsInside ( factory ) ;
31842: LD_ADDR_VAR 0 8
31846: PUSH
31847: LD_VAR 0 1
31851: PPUSH
31852: CALL_OW 313
31856: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31857: LD_VAR 0 8
31861: PPUSH
31862: LD_INT 25
31864: PUSH
31865: LD_INT 12
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PPUSH
31872: CALL_OW 72
31876: NOT
31877: IFFALSE 31887
// control := control_manual ;
31879: LD_ADDR_VAR 0 4
31883: PUSH
31884: LD_INT 1
31886: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31887: LD_ADDR_VAR 0 8
31891: PUSH
31892: LD_VAR 0 1
31896: PPUSH
31897: CALL 31584 0 1
31901: ST_TO_ADDR
// if tmp then
31902: LD_VAR 0 8
31906: IFFALSE 31949
// begin for i in tmp do
31908: LD_ADDR_VAR 0 7
31912: PUSH
31913: LD_VAR 0 8
31917: PUSH
31918: FOR_IN
31919: IFFALSE 31947
// if i [ 1 ] = b_ext_radio then
31921: LD_VAR 0 7
31925: PUSH
31926: LD_INT 1
31928: ARRAY
31929: PUSH
31930: LD_INT 22
31932: EQUAL
31933: IFFALSE 31945
// begin control := control_remote ;
31935: LD_ADDR_VAR 0 4
31939: PUSH
31940: LD_INT 2
31942: ST_TO_ADDR
// break ;
31943: GO 31947
// end ;
31945: GO 31918
31947: POP
31948: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31949: LD_VAR 0 1
31953: PPUSH
31954: LD_VAR 0 2
31958: PPUSH
31959: LD_VAR 0 3
31963: PPUSH
31964: LD_VAR 0 4
31968: PPUSH
31969: LD_VAR 0 5
31973: PPUSH
31974: CALL_OW 448
31978: IFFALSE 32013
// begin result := [ chassis , engine , control , weapon ] ;
31980: LD_ADDR_VAR 0 6
31984: PUSH
31985: LD_VAR 0 2
31989: PUSH
31990: LD_VAR 0 3
31994: PUSH
31995: LD_VAR 0 4
31999: PUSH
32000: LD_VAR 0 5
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: ST_TO_ADDR
// exit ;
32011: GO 32425
// end ; _chassis := AvailableChassisList ( factory ) ;
32013: LD_ADDR_VAR 0 9
32017: PUSH
32018: LD_VAR 0 1
32022: PPUSH
32023: CALL_OW 475
32027: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32028: LD_ADDR_VAR 0 11
32032: PUSH
32033: LD_VAR 0 1
32037: PPUSH
32038: CALL_OW 476
32042: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32043: LD_ADDR_VAR 0 12
32047: PUSH
32048: LD_VAR 0 1
32052: PPUSH
32053: CALL_OW 477
32057: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32058: LD_ADDR_VAR 0 10
32062: PUSH
32063: LD_VAR 0 1
32067: PPUSH
32068: CALL_OW 478
32072: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32073: LD_VAR 0 9
32077: NOT
32078: PUSH
32079: LD_VAR 0 11
32083: NOT
32084: OR
32085: PUSH
32086: LD_VAR 0 12
32090: NOT
32091: OR
32092: PUSH
32093: LD_VAR 0 10
32097: NOT
32098: OR
32099: IFFALSE 32134
// begin result := [ chassis , engine , control , weapon ] ;
32101: LD_ADDR_VAR 0 6
32105: PUSH
32106: LD_VAR 0 2
32110: PUSH
32111: LD_VAR 0 3
32115: PUSH
32116: LD_VAR 0 4
32120: PUSH
32121: LD_VAR 0 5
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: ST_TO_ADDR
// exit ;
32132: GO 32425
// end ; if not chassis in _chassis then
32134: LD_VAR 0 2
32138: PUSH
32139: LD_VAR 0 9
32143: IN
32144: NOT
32145: IFFALSE 32171
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32147: LD_ADDR_VAR 0 2
32151: PUSH
32152: LD_VAR 0 9
32156: PUSH
32157: LD_INT 1
32159: PPUSH
32160: LD_VAR 0 9
32164: PPUSH
32165: CALL_OW 12
32169: ARRAY
32170: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32171: LD_VAR 0 2
32175: PPUSH
32176: LD_VAR 0 3
32180: PPUSH
32181: CALL 32430 0 2
32185: NOT
32186: IFFALSE 32245
// repeat engine := _engine [ 1 ] ;
32188: LD_ADDR_VAR 0 3
32192: PUSH
32193: LD_VAR 0 11
32197: PUSH
32198: LD_INT 1
32200: ARRAY
32201: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32202: LD_ADDR_VAR 0 11
32206: PUSH
32207: LD_VAR 0 11
32211: PPUSH
32212: LD_INT 1
32214: PPUSH
32215: CALL_OW 3
32219: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32220: LD_VAR 0 2
32224: PPUSH
32225: LD_VAR 0 3
32229: PPUSH
32230: CALL 32430 0 2
32234: PUSH
32235: LD_VAR 0 11
32239: PUSH
32240: EMPTY
32241: EQUAL
32242: OR
32243: IFFALSE 32188
// if not control in _control then
32245: LD_VAR 0 4
32249: PUSH
32250: LD_VAR 0 12
32254: IN
32255: NOT
32256: IFFALSE 32282
// control := _control [ rand ( 1 , _control ) ] ;
32258: LD_ADDR_VAR 0 4
32262: PUSH
32263: LD_VAR 0 12
32267: PUSH
32268: LD_INT 1
32270: PPUSH
32271: LD_VAR 0 12
32275: PPUSH
32276: CALL_OW 12
32280: ARRAY
32281: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32282: LD_VAR 0 2
32286: PPUSH
32287: LD_VAR 0 5
32291: PPUSH
32292: CALL 32650 0 2
32296: NOT
32297: IFFALSE 32356
// repeat weapon := _weapon [ 1 ] ;
32299: LD_ADDR_VAR 0 5
32303: PUSH
32304: LD_VAR 0 10
32308: PUSH
32309: LD_INT 1
32311: ARRAY
32312: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32313: LD_ADDR_VAR 0 10
32317: PUSH
32318: LD_VAR 0 10
32322: PPUSH
32323: LD_INT 1
32325: PPUSH
32326: CALL_OW 3
32330: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32331: LD_VAR 0 2
32335: PPUSH
32336: LD_VAR 0 5
32340: PPUSH
32341: CALL 32650 0 2
32345: PUSH
32346: LD_VAR 0 10
32350: PUSH
32351: EMPTY
32352: EQUAL
32353: OR
32354: IFFALSE 32299
// result := [ ] ;
32356: LD_ADDR_VAR 0 6
32360: PUSH
32361: EMPTY
32362: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32363: LD_VAR 0 1
32367: PPUSH
32368: LD_VAR 0 2
32372: PPUSH
32373: LD_VAR 0 3
32377: PPUSH
32378: LD_VAR 0 4
32382: PPUSH
32383: LD_VAR 0 5
32387: PPUSH
32388: CALL_OW 448
32392: IFFALSE 32425
// result := [ chassis , engine , control , weapon ] ;
32394: LD_ADDR_VAR 0 6
32398: PUSH
32399: LD_VAR 0 2
32403: PUSH
32404: LD_VAR 0 3
32408: PUSH
32409: LD_VAR 0 4
32413: PUSH
32414: LD_VAR 0 5
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: ST_TO_ADDR
// end ;
32425: LD_VAR 0 6
32429: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32430: LD_INT 0
32432: PPUSH
// if not chassis or not engine then
32433: LD_VAR 0 1
32437: NOT
32438: PUSH
32439: LD_VAR 0 2
32443: NOT
32444: OR
32445: IFFALSE 32449
// exit ;
32447: GO 32645
// case engine of engine_solar :
32449: LD_VAR 0 2
32453: PUSH
32454: LD_INT 2
32456: DOUBLE
32457: EQUAL
32458: IFTRUE 32462
32460: GO 32500
32462: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32463: LD_ADDR_VAR 0 3
32467: PUSH
32468: LD_INT 11
32470: PUSH
32471: LD_INT 12
32473: PUSH
32474: LD_INT 13
32476: PUSH
32477: LD_INT 14
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
32498: GO 32629
32500: LD_INT 1
32502: DOUBLE
32503: EQUAL
32504: IFTRUE 32508
32506: GO 32570
32508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32509: LD_ADDR_VAR 0 3
32513: PUSH
32514: LD_INT 11
32516: PUSH
32517: LD_INT 12
32519: PUSH
32520: LD_INT 13
32522: PUSH
32523: LD_INT 14
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: LD_INT 2
32531: PUSH
32532: LD_INT 3
32534: PUSH
32535: LD_INT 4
32537: PUSH
32538: LD_INT 5
32540: PUSH
32541: LD_INT 21
32543: PUSH
32544: LD_INT 23
32546: PUSH
32547: LD_INT 22
32549: PUSH
32550: LD_INT 24
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: ST_TO_ADDR
32568: GO 32629
32570: LD_INT 3
32572: DOUBLE
32573: EQUAL
32574: IFTRUE 32578
32576: GO 32628
32578: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32579: LD_ADDR_VAR 0 3
32583: PUSH
32584: LD_INT 13
32586: PUSH
32587: LD_INT 14
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: LD_INT 4
32598: PUSH
32599: LD_INT 5
32601: PUSH
32602: LD_INT 21
32604: PUSH
32605: LD_INT 22
32607: PUSH
32608: LD_INT 23
32610: PUSH
32611: LD_INT 24
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: ST_TO_ADDR
32626: GO 32629
32628: POP
// result := ( chassis in result ) ;
32629: LD_ADDR_VAR 0 3
32633: PUSH
32634: LD_VAR 0 1
32638: PUSH
32639: LD_VAR 0 3
32643: IN
32644: ST_TO_ADDR
// end ;
32645: LD_VAR 0 3
32649: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32650: LD_INT 0
32652: PPUSH
// if not chassis or not weapon then
32653: LD_VAR 0 1
32657: NOT
32658: PUSH
32659: LD_VAR 0 2
32663: NOT
32664: OR
32665: IFFALSE 32669
// exit ;
32667: GO 33731
// case weapon of us_machine_gun :
32669: LD_VAR 0 2
32673: PUSH
32674: LD_INT 2
32676: DOUBLE
32677: EQUAL
32678: IFTRUE 32682
32680: GO 32712
32682: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32683: LD_ADDR_VAR 0 3
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: LD_INT 2
32693: PUSH
32694: LD_INT 3
32696: PUSH
32697: LD_INT 4
32699: PUSH
32700: LD_INT 5
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: ST_TO_ADDR
32710: GO 33715
32712: LD_INT 3
32714: DOUBLE
32715: EQUAL
32716: IFTRUE 32720
32718: GO 32750
32720: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32721: LD_ADDR_VAR 0 3
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 3
32734: PUSH
32735: LD_INT 4
32737: PUSH
32738: LD_INT 5
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
32748: GO 33715
32750: LD_INT 11
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32758
32756: GO 32788
32758: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32759: LD_ADDR_VAR 0 3
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: LD_INT 4
32775: PUSH
32776: LD_INT 5
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: ST_TO_ADDR
32786: GO 33715
32788: LD_INT 4
32790: DOUBLE
32791: EQUAL
32792: IFTRUE 32796
32794: GO 32822
32796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32797: LD_ADDR_VAR 0 3
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: LD_INT 3
32807: PUSH
32808: LD_INT 4
32810: PUSH
32811: LD_INT 5
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: ST_TO_ADDR
32820: GO 33715
32822: LD_INT 5
32824: DOUBLE
32825: EQUAL
32826: IFTRUE 32830
32828: GO 32856
32830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32831: LD_ADDR_VAR 0 3
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: LD_INT 4
32844: PUSH
32845: LD_INT 5
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: ST_TO_ADDR
32854: GO 33715
32856: LD_INT 9
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32890
32864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32865: LD_ADDR_VAR 0 3
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: LD_INT 3
32875: PUSH
32876: LD_INT 4
32878: PUSH
32879: LD_INT 5
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: ST_TO_ADDR
32888: GO 33715
32890: LD_INT 7
32892: DOUBLE
32893: EQUAL
32894: IFTRUE 32898
32896: GO 32924
32898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32899: LD_ADDR_VAR 0 3
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: LD_INT 3
32909: PUSH
32910: LD_INT 4
32912: PUSH
32913: LD_INT 5
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: ST_TO_ADDR
32922: GO 33715
32924: LD_INT 12
32926: DOUBLE
32927: EQUAL
32928: IFTRUE 32932
32930: GO 32958
32932: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32933: LD_ADDR_VAR 0 3
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: LD_INT 3
32943: PUSH
32944: LD_INT 4
32946: PUSH
32947: LD_INT 5
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: ST_TO_ADDR
32956: GO 33715
32958: LD_INT 13
32960: DOUBLE
32961: EQUAL
32962: IFTRUE 32966
32964: GO 32992
32966: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32967: LD_ADDR_VAR 0 3
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: LD_INT 3
32977: PUSH
32978: LD_INT 4
32980: PUSH
32981: LD_INT 5
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: ST_TO_ADDR
32990: GO 33715
32992: LD_INT 14
32994: DOUBLE
32995: EQUAL
32996: IFTRUE 33000
32998: GO 33018
33000: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33001: LD_ADDR_VAR 0 3
33005: PUSH
33006: LD_INT 4
33008: PUSH
33009: LD_INT 5
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: ST_TO_ADDR
33016: GO 33715
33018: LD_INT 6
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33044
33026: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33027: LD_ADDR_VAR 0 3
33031: PUSH
33032: LD_INT 4
33034: PUSH
33035: LD_INT 5
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: ST_TO_ADDR
33042: GO 33715
33044: LD_INT 10
33046: DOUBLE
33047: EQUAL
33048: IFTRUE 33052
33050: GO 33070
33052: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33053: LD_ADDR_VAR 0 3
33057: PUSH
33058: LD_INT 4
33060: PUSH
33061: LD_INT 5
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: ST_TO_ADDR
33068: GO 33715
33070: LD_INT 22
33072: DOUBLE
33073: EQUAL
33074: IFTRUE 33078
33076: GO 33104
33078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33079: LD_ADDR_VAR 0 3
33083: PUSH
33084: LD_INT 11
33086: PUSH
33087: LD_INT 12
33089: PUSH
33090: LD_INT 13
33092: PUSH
33093: LD_INT 14
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: ST_TO_ADDR
33102: GO 33715
33104: LD_INT 23
33106: DOUBLE
33107: EQUAL
33108: IFTRUE 33112
33110: GO 33138
33112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33113: LD_ADDR_VAR 0 3
33117: PUSH
33118: LD_INT 11
33120: PUSH
33121: LD_INT 12
33123: PUSH
33124: LD_INT 13
33126: PUSH
33127: LD_INT 14
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: ST_TO_ADDR
33136: GO 33715
33138: LD_INT 24
33140: DOUBLE
33141: EQUAL
33142: IFTRUE 33146
33144: GO 33172
33146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33147: LD_ADDR_VAR 0 3
33151: PUSH
33152: LD_INT 11
33154: PUSH
33155: LD_INT 12
33157: PUSH
33158: LD_INT 13
33160: PUSH
33161: LD_INT 14
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: ST_TO_ADDR
33170: GO 33715
33172: LD_INT 30
33174: DOUBLE
33175: EQUAL
33176: IFTRUE 33180
33178: GO 33206
33180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33181: LD_ADDR_VAR 0 3
33185: PUSH
33186: LD_INT 11
33188: PUSH
33189: LD_INT 12
33191: PUSH
33192: LD_INT 13
33194: PUSH
33195: LD_INT 14
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: ST_TO_ADDR
33204: GO 33715
33206: LD_INT 25
33208: DOUBLE
33209: EQUAL
33210: IFTRUE 33214
33212: GO 33232
33214: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33215: LD_ADDR_VAR 0 3
33219: PUSH
33220: LD_INT 13
33222: PUSH
33223: LD_INT 14
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: ST_TO_ADDR
33230: GO 33715
33232: LD_INT 27
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33240
33238: GO 33258
33240: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33241: LD_ADDR_VAR 0 3
33245: PUSH
33246: LD_INT 13
33248: PUSH
33249: LD_INT 14
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: ST_TO_ADDR
33256: GO 33715
33258: LD_EXP 26
33262: DOUBLE
33263: EQUAL
33264: IFTRUE 33268
33266: GO 33294
33268: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33269: LD_ADDR_VAR 0 3
33273: PUSH
33274: LD_INT 11
33276: PUSH
33277: LD_INT 12
33279: PUSH
33280: LD_INT 13
33282: PUSH
33283: LD_INT 14
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: ST_TO_ADDR
33292: GO 33715
33294: LD_INT 28
33296: DOUBLE
33297: EQUAL
33298: IFTRUE 33302
33300: GO 33320
33302: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33303: LD_ADDR_VAR 0 3
33307: PUSH
33308: LD_INT 13
33310: PUSH
33311: LD_INT 14
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: ST_TO_ADDR
33318: GO 33715
33320: LD_INT 29
33322: DOUBLE
33323: EQUAL
33324: IFTRUE 33328
33326: GO 33346
33328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33329: LD_ADDR_VAR 0 3
33333: PUSH
33334: LD_INT 13
33336: PUSH
33337: LD_INT 14
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: ST_TO_ADDR
33344: GO 33715
33346: LD_INT 31
33348: DOUBLE
33349: EQUAL
33350: IFTRUE 33354
33352: GO 33372
33354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33355: LD_ADDR_VAR 0 3
33359: PUSH
33360: LD_INT 13
33362: PUSH
33363: LD_INT 14
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: ST_TO_ADDR
33370: GO 33715
33372: LD_INT 26
33374: DOUBLE
33375: EQUAL
33376: IFTRUE 33380
33378: GO 33398
33380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33381: LD_ADDR_VAR 0 3
33385: PUSH
33386: LD_INT 13
33388: PUSH
33389: LD_INT 14
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: ST_TO_ADDR
33396: GO 33715
33398: LD_INT 42
33400: DOUBLE
33401: EQUAL
33402: IFTRUE 33406
33404: GO 33432
33406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33407: LD_ADDR_VAR 0 3
33411: PUSH
33412: LD_INT 21
33414: PUSH
33415: LD_INT 22
33417: PUSH
33418: LD_INT 23
33420: PUSH
33421: LD_INT 24
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: ST_TO_ADDR
33430: GO 33715
33432: LD_INT 43
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33440
33438: GO 33466
33440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33441: LD_ADDR_VAR 0 3
33445: PUSH
33446: LD_INT 21
33448: PUSH
33449: LD_INT 22
33451: PUSH
33452: LD_INT 23
33454: PUSH
33455: LD_INT 24
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: ST_TO_ADDR
33464: GO 33715
33466: LD_INT 44
33468: DOUBLE
33469: EQUAL
33470: IFTRUE 33474
33472: GO 33500
33474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33475: LD_ADDR_VAR 0 3
33479: PUSH
33480: LD_INT 21
33482: PUSH
33483: LD_INT 22
33485: PUSH
33486: LD_INT 23
33488: PUSH
33489: LD_INT 24
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: ST_TO_ADDR
33498: GO 33715
33500: LD_INT 45
33502: DOUBLE
33503: EQUAL
33504: IFTRUE 33508
33506: GO 33534
33508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33509: LD_ADDR_VAR 0 3
33513: PUSH
33514: LD_INT 21
33516: PUSH
33517: LD_INT 22
33519: PUSH
33520: LD_INT 23
33522: PUSH
33523: LD_INT 24
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: ST_TO_ADDR
33532: GO 33715
33534: LD_INT 49
33536: DOUBLE
33537: EQUAL
33538: IFTRUE 33542
33540: GO 33568
33542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33543: LD_ADDR_VAR 0 3
33547: PUSH
33548: LD_INT 21
33550: PUSH
33551: LD_INT 22
33553: PUSH
33554: LD_INT 23
33556: PUSH
33557: LD_INT 24
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: ST_TO_ADDR
33566: GO 33715
33568: LD_INT 51
33570: DOUBLE
33571: EQUAL
33572: IFTRUE 33576
33574: GO 33602
33576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33577: LD_ADDR_VAR 0 3
33581: PUSH
33582: LD_INT 21
33584: PUSH
33585: LD_INT 22
33587: PUSH
33588: LD_INT 23
33590: PUSH
33591: LD_INT 24
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: ST_TO_ADDR
33600: GO 33715
33602: LD_INT 52
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33610
33608: GO 33636
33610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33611: LD_ADDR_VAR 0 3
33615: PUSH
33616: LD_INT 21
33618: PUSH
33619: LD_INT 22
33621: PUSH
33622: LD_INT 23
33624: PUSH
33625: LD_INT 24
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: ST_TO_ADDR
33634: GO 33715
33636: LD_INT 53
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33644
33642: GO 33662
33644: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_INT 23
33652: PUSH
33653: LD_INT 24
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: ST_TO_ADDR
33660: GO 33715
33662: LD_INT 46
33664: DOUBLE
33665: EQUAL
33666: IFTRUE 33670
33668: GO 33688
33670: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33671: LD_ADDR_VAR 0 3
33675: PUSH
33676: LD_INT 23
33678: PUSH
33679: LD_INT 24
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: ST_TO_ADDR
33686: GO 33715
33688: LD_INT 47
33690: DOUBLE
33691: EQUAL
33692: IFTRUE 33696
33694: GO 33714
33696: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33697: LD_ADDR_VAR 0 3
33701: PUSH
33702: LD_INT 23
33704: PUSH
33705: LD_INT 24
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: ST_TO_ADDR
33712: GO 33715
33714: POP
// result := ( chassis in result ) ;
33715: LD_ADDR_VAR 0 3
33719: PUSH
33720: LD_VAR 0 1
33724: PUSH
33725: LD_VAR 0 3
33729: IN
33730: ST_TO_ADDR
// end ;
33731: LD_VAR 0 3
33735: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33736: LD_INT 0
33738: PPUSH
33739: PPUSH
33740: PPUSH
33741: PPUSH
33742: PPUSH
33743: PPUSH
33744: PPUSH
// result := array ;
33745: LD_ADDR_VAR 0 5
33749: PUSH
33750: LD_VAR 0 1
33754: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33755: LD_VAR 0 1
33759: NOT
33760: PUSH
33761: LD_VAR 0 2
33765: NOT
33766: OR
33767: PUSH
33768: LD_VAR 0 3
33772: NOT
33773: OR
33774: PUSH
33775: LD_VAR 0 2
33779: PUSH
33780: LD_VAR 0 1
33784: GREATER
33785: OR
33786: PUSH
33787: LD_VAR 0 3
33791: PUSH
33792: LD_VAR 0 1
33796: GREATER
33797: OR
33798: IFFALSE 33802
// exit ;
33800: GO 34098
// if direction then
33802: LD_VAR 0 4
33806: IFFALSE 33870
// begin d := 1 ;
33808: LD_ADDR_VAR 0 9
33812: PUSH
33813: LD_INT 1
33815: ST_TO_ADDR
// if i_from > i_to then
33816: LD_VAR 0 2
33820: PUSH
33821: LD_VAR 0 3
33825: GREATER
33826: IFFALSE 33852
// length := ( array - i_from ) + i_to else
33828: LD_ADDR_VAR 0 11
33832: PUSH
33833: LD_VAR 0 1
33837: PUSH
33838: LD_VAR 0 2
33842: MINUS
33843: PUSH
33844: LD_VAR 0 3
33848: PLUS
33849: ST_TO_ADDR
33850: GO 33868
// length := i_to - i_from ;
33852: LD_ADDR_VAR 0 11
33856: PUSH
33857: LD_VAR 0 3
33861: PUSH
33862: LD_VAR 0 2
33866: MINUS
33867: ST_TO_ADDR
// end else
33868: GO 33931
// begin d := - 1 ;
33870: LD_ADDR_VAR 0 9
33874: PUSH
33875: LD_INT 1
33877: NEG
33878: ST_TO_ADDR
// if i_from > i_to then
33879: LD_VAR 0 2
33883: PUSH
33884: LD_VAR 0 3
33888: GREATER
33889: IFFALSE 33909
// length := i_from - i_to else
33891: LD_ADDR_VAR 0 11
33895: PUSH
33896: LD_VAR 0 2
33900: PUSH
33901: LD_VAR 0 3
33905: MINUS
33906: ST_TO_ADDR
33907: GO 33931
// length := ( array - i_to ) + i_from ;
33909: LD_ADDR_VAR 0 11
33913: PUSH
33914: LD_VAR 0 1
33918: PUSH
33919: LD_VAR 0 3
33923: MINUS
33924: PUSH
33925: LD_VAR 0 2
33929: PLUS
33930: ST_TO_ADDR
// end ; if not length then
33931: LD_VAR 0 11
33935: NOT
33936: IFFALSE 33940
// exit ;
33938: GO 34098
// tmp := array ;
33940: LD_ADDR_VAR 0 10
33944: PUSH
33945: LD_VAR 0 1
33949: ST_TO_ADDR
// for i = 1 to length do
33950: LD_ADDR_VAR 0 6
33954: PUSH
33955: DOUBLE
33956: LD_INT 1
33958: DEC
33959: ST_TO_ADDR
33960: LD_VAR 0 11
33964: PUSH
33965: FOR_TO
33966: IFFALSE 34086
// begin for j = 1 to array do
33968: LD_ADDR_VAR 0 7
33972: PUSH
33973: DOUBLE
33974: LD_INT 1
33976: DEC
33977: ST_TO_ADDR
33978: LD_VAR 0 1
33982: PUSH
33983: FOR_TO
33984: IFFALSE 34072
// begin k := j + d ;
33986: LD_ADDR_VAR 0 8
33990: PUSH
33991: LD_VAR 0 7
33995: PUSH
33996: LD_VAR 0 9
34000: PLUS
34001: ST_TO_ADDR
// if k > array then
34002: LD_VAR 0 8
34006: PUSH
34007: LD_VAR 0 1
34011: GREATER
34012: IFFALSE 34022
// k := 1 ;
34014: LD_ADDR_VAR 0 8
34018: PUSH
34019: LD_INT 1
34021: ST_TO_ADDR
// if not k then
34022: LD_VAR 0 8
34026: NOT
34027: IFFALSE 34039
// k := array ;
34029: LD_ADDR_VAR 0 8
34033: PUSH
34034: LD_VAR 0 1
34038: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34039: LD_ADDR_VAR 0 10
34043: PUSH
34044: LD_VAR 0 10
34048: PPUSH
34049: LD_VAR 0 8
34053: PPUSH
34054: LD_VAR 0 1
34058: PUSH
34059: LD_VAR 0 7
34063: ARRAY
34064: PPUSH
34065: CALL_OW 1
34069: ST_TO_ADDR
// end ;
34070: GO 33983
34072: POP
34073: POP
// array := tmp ;
34074: LD_ADDR_VAR 0 1
34078: PUSH
34079: LD_VAR 0 10
34083: ST_TO_ADDR
// end ;
34084: GO 33965
34086: POP
34087: POP
// result := array ;
34088: LD_ADDR_VAR 0 5
34092: PUSH
34093: LD_VAR 0 1
34097: ST_TO_ADDR
// end ;
34098: LD_VAR 0 5
34102: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34103: LD_INT 0
34105: PPUSH
34106: PPUSH
// result := 0 ;
34107: LD_ADDR_VAR 0 3
34111: PUSH
34112: LD_INT 0
34114: ST_TO_ADDR
// if not array or not value in array then
34115: LD_VAR 0 1
34119: NOT
34120: PUSH
34121: LD_VAR 0 2
34125: PUSH
34126: LD_VAR 0 1
34130: IN
34131: NOT
34132: OR
34133: IFFALSE 34137
// exit ;
34135: GO 34191
// for i = 1 to array do
34137: LD_ADDR_VAR 0 4
34141: PUSH
34142: DOUBLE
34143: LD_INT 1
34145: DEC
34146: ST_TO_ADDR
34147: LD_VAR 0 1
34151: PUSH
34152: FOR_TO
34153: IFFALSE 34189
// if value = array [ i ] then
34155: LD_VAR 0 2
34159: PUSH
34160: LD_VAR 0 1
34164: PUSH
34165: LD_VAR 0 4
34169: ARRAY
34170: EQUAL
34171: IFFALSE 34187
// begin result := i ;
34173: LD_ADDR_VAR 0 3
34177: PUSH
34178: LD_VAR 0 4
34182: ST_TO_ADDR
// exit ;
34183: POP
34184: POP
34185: GO 34191
// end ;
34187: GO 34152
34189: POP
34190: POP
// end ;
34191: LD_VAR 0 3
34195: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34196: LD_INT 0
34198: PPUSH
// vc_chassis := chassis ;
34199: LD_ADDR_OWVAR 37
34203: PUSH
34204: LD_VAR 0 1
34208: ST_TO_ADDR
// vc_engine := engine ;
34209: LD_ADDR_OWVAR 39
34213: PUSH
34214: LD_VAR 0 2
34218: ST_TO_ADDR
// vc_control := control ;
34219: LD_ADDR_OWVAR 38
34223: PUSH
34224: LD_VAR 0 3
34228: ST_TO_ADDR
// vc_weapon := weapon ;
34229: LD_ADDR_OWVAR 40
34233: PUSH
34234: LD_VAR 0 4
34238: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34239: LD_ADDR_OWVAR 41
34243: PUSH
34244: LD_VAR 0 5
34248: ST_TO_ADDR
// end ;
34249: LD_VAR 0 6
34253: RET
// export function WantPlant ( unit ) ; var task ; begin
34254: LD_INT 0
34256: PPUSH
34257: PPUSH
// result := false ;
34258: LD_ADDR_VAR 0 2
34262: PUSH
34263: LD_INT 0
34265: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34266: LD_ADDR_VAR 0 3
34270: PUSH
34271: LD_VAR 0 1
34275: PPUSH
34276: CALL_OW 437
34280: ST_TO_ADDR
// if task then
34281: LD_VAR 0 3
34285: IFFALSE 34313
// if task [ 1 ] [ 1 ] = p then
34287: LD_VAR 0 3
34291: PUSH
34292: LD_INT 1
34294: ARRAY
34295: PUSH
34296: LD_INT 1
34298: ARRAY
34299: PUSH
34300: LD_STRING p
34302: EQUAL
34303: IFFALSE 34313
// result := true ;
34305: LD_ADDR_VAR 0 2
34309: PUSH
34310: LD_INT 1
34312: ST_TO_ADDR
// end ;
34313: LD_VAR 0 2
34317: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34318: LD_INT 0
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
// if pos < 1 then
34324: LD_VAR 0 2
34328: PUSH
34329: LD_INT 1
34331: LESS
34332: IFFALSE 34336
// exit ;
34334: GO 34639
// if pos = 1 then
34336: LD_VAR 0 2
34340: PUSH
34341: LD_INT 1
34343: EQUAL
34344: IFFALSE 34377
// result := Replace ( arr , pos [ 1 ] , value ) else
34346: LD_ADDR_VAR 0 4
34350: PUSH
34351: LD_VAR 0 1
34355: PPUSH
34356: LD_VAR 0 2
34360: PUSH
34361: LD_INT 1
34363: ARRAY
34364: PPUSH
34365: LD_VAR 0 3
34369: PPUSH
34370: CALL_OW 1
34374: ST_TO_ADDR
34375: GO 34639
// begin tmp := arr ;
34377: LD_ADDR_VAR 0 6
34381: PUSH
34382: LD_VAR 0 1
34386: ST_TO_ADDR
// s_arr := [ tmp ] ;
34387: LD_ADDR_VAR 0 7
34391: PUSH
34392: LD_VAR 0 6
34396: PUSH
34397: EMPTY
34398: LIST
34399: ST_TO_ADDR
// for i = 1 to pos - 1 do
34400: LD_ADDR_VAR 0 5
34404: PUSH
34405: DOUBLE
34406: LD_INT 1
34408: DEC
34409: ST_TO_ADDR
34410: LD_VAR 0 2
34414: PUSH
34415: LD_INT 1
34417: MINUS
34418: PUSH
34419: FOR_TO
34420: IFFALSE 34465
// begin tmp := tmp [ pos [ i ] ] ;
34422: LD_ADDR_VAR 0 6
34426: PUSH
34427: LD_VAR 0 6
34431: PUSH
34432: LD_VAR 0 2
34436: PUSH
34437: LD_VAR 0 5
34441: ARRAY
34442: ARRAY
34443: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34444: LD_ADDR_VAR 0 7
34448: PUSH
34449: LD_VAR 0 7
34453: PUSH
34454: LD_VAR 0 6
34458: PUSH
34459: EMPTY
34460: LIST
34461: ADD
34462: ST_TO_ADDR
// end ;
34463: GO 34419
34465: POP
34466: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34467: LD_ADDR_VAR 0 6
34471: PUSH
34472: LD_VAR 0 6
34476: PPUSH
34477: LD_VAR 0 2
34481: PUSH
34482: LD_VAR 0 2
34486: ARRAY
34487: PPUSH
34488: LD_VAR 0 3
34492: PPUSH
34493: CALL_OW 1
34497: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34498: LD_ADDR_VAR 0 7
34502: PUSH
34503: LD_VAR 0 7
34507: PPUSH
34508: LD_VAR 0 7
34512: PPUSH
34513: LD_VAR 0 6
34517: PPUSH
34518: CALL_OW 1
34522: ST_TO_ADDR
// for i = s_arr downto 2 do
34523: LD_ADDR_VAR 0 5
34527: PUSH
34528: DOUBLE
34529: LD_VAR 0 7
34533: INC
34534: ST_TO_ADDR
34535: LD_INT 2
34537: PUSH
34538: FOR_DOWNTO
34539: IFFALSE 34623
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34541: LD_ADDR_VAR 0 6
34545: PUSH
34546: LD_VAR 0 7
34550: PUSH
34551: LD_VAR 0 5
34555: PUSH
34556: LD_INT 1
34558: MINUS
34559: ARRAY
34560: PPUSH
34561: LD_VAR 0 2
34565: PUSH
34566: LD_VAR 0 5
34570: PUSH
34571: LD_INT 1
34573: MINUS
34574: ARRAY
34575: PPUSH
34576: LD_VAR 0 7
34580: PUSH
34581: LD_VAR 0 5
34585: ARRAY
34586: PPUSH
34587: CALL_OW 1
34591: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34592: LD_ADDR_VAR 0 7
34596: PUSH
34597: LD_VAR 0 7
34601: PPUSH
34602: LD_VAR 0 5
34606: PUSH
34607: LD_INT 1
34609: MINUS
34610: PPUSH
34611: LD_VAR 0 6
34615: PPUSH
34616: CALL_OW 1
34620: ST_TO_ADDR
// end ;
34621: GO 34538
34623: POP
34624: POP
// result := s_arr [ 1 ] ;
34625: LD_ADDR_VAR 0 4
34629: PUSH
34630: LD_VAR 0 7
34634: PUSH
34635: LD_INT 1
34637: ARRAY
34638: ST_TO_ADDR
// end ; end ;
34639: LD_VAR 0 4
34643: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34644: LD_INT 0
34646: PPUSH
34647: PPUSH
// if not list then
34648: LD_VAR 0 1
34652: NOT
34653: IFFALSE 34657
// exit ;
34655: GO 34748
// i := list [ pos1 ] ;
34657: LD_ADDR_VAR 0 5
34661: PUSH
34662: LD_VAR 0 1
34666: PUSH
34667: LD_VAR 0 2
34671: ARRAY
34672: ST_TO_ADDR
// if not i then
34673: LD_VAR 0 5
34677: NOT
34678: IFFALSE 34682
// exit ;
34680: GO 34748
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34682: LD_ADDR_VAR 0 1
34686: PUSH
34687: LD_VAR 0 1
34691: PPUSH
34692: LD_VAR 0 2
34696: PPUSH
34697: LD_VAR 0 1
34701: PUSH
34702: LD_VAR 0 3
34706: ARRAY
34707: PPUSH
34708: CALL_OW 1
34712: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34713: LD_ADDR_VAR 0 1
34717: PUSH
34718: LD_VAR 0 1
34722: PPUSH
34723: LD_VAR 0 3
34727: PPUSH
34728: LD_VAR 0 5
34732: PPUSH
34733: CALL_OW 1
34737: ST_TO_ADDR
// result := list ;
34738: LD_ADDR_VAR 0 4
34742: PUSH
34743: LD_VAR 0 1
34747: ST_TO_ADDR
// end ;
34748: LD_VAR 0 4
34752: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34753: LD_INT 0
34755: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34756: LD_ADDR_VAR 0 5
34760: PUSH
34761: LD_VAR 0 1
34765: PPUSH
34766: CALL_OW 250
34770: PPUSH
34771: LD_VAR 0 1
34775: PPUSH
34776: CALL_OW 251
34780: PPUSH
34781: LD_VAR 0 2
34785: PPUSH
34786: LD_VAR 0 3
34790: PPUSH
34791: LD_VAR 0 4
34795: PPUSH
34796: CALL 34806 0 5
34800: ST_TO_ADDR
// end ;
34801: LD_VAR 0 5
34805: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34806: LD_INT 0
34808: PPUSH
34809: PPUSH
34810: PPUSH
34811: PPUSH
// if not list then
34812: LD_VAR 0 3
34816: NOT
34817: IFFALSE 34821
// exit ;
34819: GO 35209
// result := [ ] ;
34821: LD_ADDR_VAR 0 6
34825: PUSH
34826: EMPTY
34827: ST_TO_ADDR
// for i in list do
34828: LD_ADDR_VAR 0 7
34832: PUSH
34833: LD_VAR 0 3
34837: PUSH
34838: FOR_IN
34839: IFFALSE 35041
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34841: LD_ADDR_VAR 0 9
34845: PUSH
34846: LD_VAR 0 7
34850: PPUSH
34851: LD_VAR 0 1
34855: PPUSH
34856: LD_VAR 0 2
34860: PPUSH
34861: CALL_OW 297
34865: ST_TO_ADDR
// if not result then
34866: LD_VAR 0 6
34870: NOT
34871: IFFALSE 34897
// result := [ [ i , tmp ] ] else
34873: LD_ADDR_VAR 0 6
34877: PUSH
34878: LD_VAR 0 7
34882: PUSH
34883: LD_VAR 0 9
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: EMPTY
34893: LIST
34894: ST_TO_ADDR
34895: GO 35039
// begin if result [ result ] [ 2 ] < tmp then
34897: LD_VAR 0 6
34901: PUSH
34902: LD_VAR 0 6
34906: ARRAY
34907: PUSH
34908: LD_INT 2
34910: ARRAY
34911: PUSH
34912: LD_VAR 0 9
34916: LESS
34917: IFFALSE 34959
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34919: LD_ADDR_VAR 0 6
34923: PUSH
34924: LD_VAR 0 6
34928: PPUSH
34929: LD_VAR 0 6
34933: PUSH
34934: LD_INT 1
34936: PLUS
34937: PPUSH
34938: LD_VAR 0 7
34942: PUSH
34943: LD_VAR 0 9
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PPUSH
34952: CALL_OW 2
34956: ST_TO_ADDR
34957: GO 35039
// for j = 1 to result do
34959: LD_ADDR_VAR 0 8
34963: PUSH
34964: DOUBLE
34965: LD_INT 1
34967: DEC
34968: ST_TO_ADDR
34969: LD_VAR 0 6
34973: PUSH
34974: FOR_TO
34975: IFFALSE 35037
// begin if tmp < result [ j ] [ 2 ] then
34977: LD_VAR 0 9
34981: PUSH
34982: LD_VAR 0 6
34986: PUSH
34987: LD_VAR 0 8
34991: ARRAY
34992: PUSH
34993: LD_INT 2
34995: ARRAY
34996: LESS
34997: IFFALSE 35035
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34999: LD_ADDR_VAR 0 6
35003: PUSH
35004: LD_VAR 0 6
35008: PPUSH
35009: LD_VAR 0 8
35013: PPUSH
35014: LD_VAR 0 7
35018: PUSH
35019: LD_VAR 0 9
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PPUSH
35028: CALL_OW 2
35032: ST_TO_ADDR
// break ;
35033: GO 35037
// end ; end ;
35035: GO 34974
35037: POP
35038: POP
// end ; end ;
35039: GO 34838
35041: POP
35042: POP
// if result and not asc then
35043: LD_VAR 0 6
35047: PUSH
35048: LD_VAR 0 4
35052: NOT
35053: AND
35054: IFFALSE 35129
// begin tmp := result ;
35056: LD_ADDR_VAR 0 9
35060: PUSH
35061: LD_VAR 0 6
35065: ST_TO_ADDR
// for i = tmp downto 1 do
35066: LD_ADDR_VAR 0 7
35070: PUSH
35071: DOUBLE
35072: LD_VAR 0 9
35076: INC
35077: ST_TO_ADDR
35078: LD_INT 1
35080: PUSH
35081: FOR_DOWNTO
35082: IFFALSE 35127
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35084: LD_ADDR_VAR 0 6
35088: PUSH
35089: LD_VAR 0 6
35093: PPUSH
35094: LD_VAR 0 9
35098: PUSH
35099: LD_VAR 0 7
35103: MINUS
35104: PUSH
35105: LD_INT 1
35107: PLUS
35108: PPUSH
35109: LD_VAR 0 9
35113: PUSH
35114: LD_VAR 0 7
35118: ARRAY
35119: PPUSH
35120: CALL_OW 1
35124: ST_TO_ADDR
35125: GO 35081
35127: POP
35128: POP
// end ; tmp := [ ] ;
35129: LD_ADDR_VAR 0 9
35133: PUSH
35134: EMPTY
35135: ST_TO_ADDR
// if mode then
35136: LD_VAR 0 5
35140: IFFALSE 35209
// begin for i = 1 to result do
35142: LD_ADDR_VAR 0 7
35146: PUSH
35147: DOUBLE
35148: LD_INT 1
35150: DEC
35151: ST_TO_ADDR
35152: LD_VAR 0 6
35156: PUSH
35157: FOR_TO
35158: IFFALSE 35197
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35160: LD_ADDR_VAR 0 9
35164: PUSH
35165: LD_VAR 0 9
35169: PPUSH
35170: LD_VAR 0 7
35174: PPUSH
35175: LD_VAR 0 6
35179: PUSH
35180: LD_VAR 0 7
35184: ARRAY
35185: PUSH
35186: LD_INT 1
35188: ARRAY
35189: PPUSH
35190: CALL_OW 1
35194: ST_TO_ADDR
35195: GO 35157
35197: POP
35198: POP
// result := tmp ;
35199: LD_ADDR_VAR 0 6
35203: PUSH
35204: LD_VAR 0 9
35208: ST_TO_ADDR
// end ; end ;
35209: LD_VAR 0 6
35213: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35214: LD_INT 0
35216: PPUSH
35217: PPUSH
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35222: LD_ADDR_VAR 0 5
35226: PUSH
35227: LD_INT 0
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: ST_TO_ADDR
// if not x or not y then
35244: LD_VAR 0 2
35248: NOT
35249: PUSH
35250: LD_VAR 0 3
35254: NOT
35255: OR
35256: IFFALSE 35260
// exit ;
35258: GO 36912
// if not range then
35260: LD_VAR 0 4
35264: NOT
35265: IFFALSE 35275
// range := 10 ;
35267: LD_ADDR_VAR 0 4
35271: PUSH
35272: LD_INT 10
35274: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35275: LD_ADDR_VAR 0 8
35279: PUSH
35280: LD_INT 81
35282: PUSH
35283: LD_VAR 0 1
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 92
35294: PUSH
35295: LD_VAR 0 2
35299: PUSH
35300: LD_VAR 0 3
35304: PUSH
35305: LD_VAR 0 4
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 3
35318: PUSH
35319: LD_INT 21
35321: PUSH
35322: LD_INT 3
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: PPUSH
35338: CALL_OW 69
35342: ST_TO_ADDR
// if not tmp then
35343: LD_VAR 0 8
35347: NOT
35348: IFFALSE 35352
// exit ;
35350: GO 36912
// for i in tmp do
35352: LD_ADDR_VAR 0 6
35356: PUSH
35357: LD_VAR 0 8
35361: PUSH
35362: FOR_IN
35363: IFFALSE 36887
// begin points := [ 0 , 0 , 0 ] ;
35365: LD_ADDR_VAR 0 9
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: ST_TO_ADDR
// bpoints := 1 ;
35384: LD_ADDR_VAR 0 10
35388: PUSH
35389: LD_INT 1
35391: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35392: LD_VAR 0 6
35396: PPUSH
35397: CALL_OW 247
35401: PUSH
35402: LD_INT 1
35404: DOUBLE
35405: EQUAL
35406: IFTRUE 35410
35408: GO 35988
35410: POP
// begin if GetClass ( i ) = 1 then
35411: LD_VAR 0 6
35415: PPUSH
35416: CALL_OW 257
35420: PUSH
35421: LD_INT 1
35423: EQUAL
35424: IFFALSE 35445
// points := [ 10 , 5 , 3 ] ;
35426: LD_ADDR_VAR 0 9
35430: PUSH
35431: LD_INT 10
35433: PUSH
35434: LD_INT 5
35436: PUSH
35437: LD_INT 3
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35445: LD_VAR 0 6
35449: PPUSH
35450: CALL_OW 257
35454: PUSH
35455: LD_INT 2
35457: PUSH
35458: LD_INT 3
35460: PUSH
35461: LD_INT 4
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: LIST
35468: IN
35469: IFFALSE 35490
// points := [ 3 , 2 , 1 ] ;
35471: LD_ADDR_VAR 0 9
35475: PUSH
35476: LD_INT 3
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: LIST
35489: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35490: LD_VAR 0 6
35494: PPUSH
35495: CALL_OW 257
35499: PUSH
35500: LD_INT 5
35502: EQUAL
35503: IFFALSE 35524
// points := [ 130 , 5 , 2 ] ;
35505: LD_ADDR_VAR 0 9
35509: PUSH
35510: LD_INT 130
35512: PUSH
35513: LD_INT 5
35515: PUSH
35516: LD_INT 2
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35524: LD_VAR 0 6
35528: PPUSH
35529: CALL_OW 257
35533: PUSH
35534: LD_INT 8
35536: EQUAL
35537: IFFALSE 35558
// points := [ 35 , 35 , 30 ] ;
35539: LD_ADDR_VAR 0 9
35543: PUSH
35544: LD_INT 35
35546: PUSH
35547: LD_INT 35
35549: PUSH
35550: LD_INT 30
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35558: LD_VAR 0 6
35562: PPUSH
35563: CALL_OW 257
35567: PUSH
35568: LD_INT 9
35570: EQUAL
35571: IFFALSE 35592
// points := [ 20 , 55 , 40 ] ;
35573: LD_ADDR_VAR 0 9
35577: PUSH
35578: LD_INT 20
35580: PUSH
35581: LD_INT 55
35583: PUSH
35584: LD_INT 40
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: LIST
35591: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35592: LD_VAR 0 6
35596: PPUSH
35597: CALL_OW 257
35601: PUSH
35602: LD_INT 12
35604: PUSH
35605: LD_INT 16
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: IN
35612: IFFALSE 35633
// points := [ 5 , 3 , 2 ] ;
35614: LD_ADDR_VAR 0 9
35618: PUSH
35619: LD_INT 5
35621: PUSH
35622: LD_INT 3
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: LIST
35632: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35633: LD_VAR 0 6
35637: PPUSH
35638: CALL_OW 257
35642: PUSH
35643: LD_INT 17
35645: EQUAL
35646: IFFALSE 35667
// points := [ 100 , 50 , 75 ] ;
35648: LD_ADDR_VAR 0 9
35652: PUSH
35653: LD_INT 100
35655: PUSH
35656: LD_INT 50
35658: PUSH
35659: LD_INT 75
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35667: LD_VAR 0 6
35671: PPUSH
35672: CALL_OW 257
35676: PUSH
35677: LD_INT 15
35679: EQUAL
35680: IFFALSE 35701
// points := [ 10 , 5 , 3 ] ;
35682: LD_ADDR_VAR 0 9
35686: PUSH
35687: LD_INT 10
35689: PUSH
35690: LD_INT 5
35692: PUSH
35693: LD_INT 3
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35701: LD_VAR 0 6
35705: PPUSH
35706: CALL_OW 257
35710: PUSH
35711: LD_INT 14
35713: EQUAL
35714: IFFALSE 35735
// points := [ 10 , 0 , 0 ] ;
35716: LD_ADDR_VAR 0 9
35720: PUSH
35721: LD_INT 10
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35735: LD_VAR 0 6
35739: PPUSH
35740: CALL_OW 257
35744: PUSH
35745: LD_INT 11
35747: EQUAL
35748: IFFALSE 35769
// points := [ 30 , 10 , 5 ] ;
35750: LD_ADDR_VAR 0 9
35754: PUSH
35755: LD_INT 30
35757: PUSH
35758: LD_INT 10
35760: PUSH
35761: LD_INT 5
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35769: LD_VAR 0 1
35773: PPUSH
35774: LD_INT 5
35776: PPUSH
35777: CALL_OW 321
35781: PUSH
35782: LD_INT 2
35784: EQUAL
35785: IFFALSE 35802
// bpoints := bpoints * 1.8 ;
35787: LD_ADDR_VAR 0 10
35791: PUSH
35792: LD_VAR 0 10
35796: PUSH
35797: LD_REAL  1.80000000000000E+0000
35800: MUL
35801: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35802: LD_VAR 0 6
35806: PPUSH
35807: CALL_OW 257
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: LD_INT 3
35820: PUSH
35821: LD_INT 4
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: IN
35830: PUSH
35831: LD_VAR 0 1
35835: PPUSH
35836: LD_INT 51
35838: PPUSH
35839: CALL_OW 321
35843: PUSH
35844: LD_INT 2
35846: EQUAL
35847: AND
35848: IFFALSE 35865
// bpoints := bpoints * 1.2 ;
35850: LD_ADDR_VAR 0 10
35854: PUSH
35855: LD_VAR 0 10
35859: PUSH
35860: LD_REAL  1.20000000000000E+0000
35863: MUL
35864: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35865: LD_VAR 0 6
35869: PPUSH
35870: CALL_OW 257
35874: PUSH
35875: LD_INT 5
35877: PUSH
35878: LD_INT 7
35880: PUSH
35881: LD_INT 9
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: LIST
35888: IN
35889: PUSH
35890: LD_VAR 0 1
35894: PPUSH
35895: LD_INT 52
35897: PPUSH
35898: CALL_OW 321
35902: PUSH
35903: LD_INT 2
35905: EQUAL
35906: AND
35907: IFFALSE 35924
// bpoints := bpoints * 1.5 ;
35909: LD_ADDR_VAR 0 10
35913: PUSH
35914: LD_VAR 0 10
35918: PUSH
35919: LD_REAL  1.50000000000000E+0000
35922: MUL
35923: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35924: LD_VAR 0 1
35928: PPUSH
35929: LD_INT 66
35931: PPUSH
35932: CALL_OW 321
35936: PUSH
35937: LD_INT 2
35939: EQUAL
35940: IFFALSE 35957
// bpoints := bpoints * 1.1 ;
35942: LD_ADDR_VAR 0 10
35946: PUSH
35947: LD_VAR 0 10
35951: PUSH
35952: LD_REAL  1.10000000000000E+0000
35955: MUL
35956: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35957: LD_ADDR_VAR 0 10
35961: PUSH
35962: LD_VAR 0 10
35966: PUSH
35967: LD_VAR 0 6
35971: PPUSH
35972: LD_INT 1
35974: PPUSH
35975: CALL_OW 259
35979: PUSH
35980: LD_REAL  1.15000000000000E+0000
35983: MUL
35984: MUL
35985: ST_TO_ADDR
// end ; unit_vehicle :
35986: GO 36816
35988: LD_INT 2
35990: DOUBLE
35991: EQUAL
35992: IFTRUE 35996
35994: GO 36804
35996: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35997: LD_VAR 0 6
36001: PPUSH
36002: CALL_OW 264
36006: PUSH
36007: LD_INT 2
36009: PUSH
36010: LD_INT 42
36012: PUSH
36013: LD_INT 24
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: IN
36021: IFFALSE 36042
// points := [ 25 , 5 , 3 ] ;
36023: LD_ADDR_VAR 0 9
36027: PUSH
36028: LD_INT 25
36030: PUSH
36031: LD_INT 5
36033: PUSH
36034: LD_INT 3
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36042: LD_VAR 0 6
36046: PPUSH
36047: CALL_OW 264
36051: PUSH
36052: LD_INT 4
36054: PUSH
36055: LD_INT 43
36057: PUSH
36058: LD_INT 25
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: LIST
36065: IN
36066: IFFALSE 36087
// points := [ 40 , 15 , 5 ] ;
36068: LD_ADDR_VAR 0 9
36072: PUSH
36073: LD_INT 40
36075: PUSH
36076: LD_INT 15
36078: PUSH
36079: LD_INT 5
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: LIST
36086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36087: LD_VAR 0 6
36091: PPUSH
36092: CALL_OW 264
36096: PUSH
36097: LD_INT 3
36099: PUSH
36100: LD_INT 23
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: IN
36107: IFFALSE 36128
// points := [ 7 , 25 , 8 ] ;
36109: LD_ADDR_VAR 0 9
36113: PUSH
36114: LD_INT 7
36116: PUSH
36117: LD_INT 25
36119: PUSH
36120: LD_INT 8
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36128: LD_VAR 0 6
36132: PPUSH
36133: CALL_OW 264
36137: PUSH
36138: LD_INT 5
36140: PUSH
36141: LD_INT 27
36143: PUSH
36144: LD_INT 44
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: IN
36152: IFFALSE 36173
// points := [ 14 , 50 , 16 ] ;
36154: LD_ADDR_VAR 0 9
36158: PUSH
36159: LD_INT 14
36161: PUSH
36162: LD_INT 50
36164: PUSH
36165: LD_INT 16
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: LIST
36172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36173: LD_VAR 0 6
36177: PPUSH
36178: CALL_OW 264
36182: PUSH
36183: LD_INT 6
36185: PUSH
36186: LD_INT 46
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: IN
36193: IFFALSE 36214
// points := [ 32 , 120 , 70 ] ;
36195: LD_ADDR_VAR 0 9
36199: PUSH
36200: LD_INT 32
36202: PUSH
36203: LD_INT 120
36205: PUSH
36206: LD_INT 70
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36214: LD_VAR 0 6
36218: PPUSH
36219: CALL_OW 264
36223: PUSH
36224: LD_INT 7
36226: PUSH
36227: LD_INT 28
36229: PUSH
36230: LD_INT 45
36232: PUSH
36233: LD_EXP 26
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: IN
36244: IFFALSE 36265
// points := [ 35 , 20 , 45 ] ;
36246: LD_ADDR_VAR 0 9
36250: PUSH
36251: LD_INT 35
36253: PUSH
36254: LD_INT 20
36256: PUSH
36257: LD_INT 45
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36265: LD_VAR 0 6
36269: PPUSH
36270: CALL_OW 264
36274: PUSH
36275: LD_INT 47
36277: PUSH
36278: EMPTY
36279: LIST
36280: IN
36281: IFFALSE 36302
// points := [ 67 , 45 , 75 ] ;
36283: LD_ADDR_VAR 0 9
36287: PUSH
36288: LD_INT 67
36290: PUSH
36291: LD_INT 45
36293: PUSH
36294: LD_INT 75
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36302: LD_VAR 0 6
36306: PPUSH
36307: CALL_OW 264
36311: PUSH
36312: LD_INT 26
36314: PUSH
36315: EMPTY
36316: LIST
36317: IN
36318: IFFALSE 36339
// points := [ 120 , 30 , 80 ] ;
36320: LD_ADDR_VAR 0 9
36324: PUSH
36325: LD_INT 120
36327: PUSH
36328: LD_INT 30
36330: PUSH
36331: LD_INT 80
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: LIST
36338: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36339: LD_VAR 0 6
36343: PPUSH
36344: CALL_OW 264
36348: PUSH
36349: LD_INT 22
36351: PUSH
36352: EMPTY
36353: LIST
36354: IN
36355: IFFALSE 36376
// points := [ 40 , 1 , 1 ] ;
36357: LD_ADDR_VAR 0 9
36361: PUSH
36362: LD_INT 40
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36376: LD_VAR 0 6
36380: PPUSH
36381: CALL_OW 264
36385: PUSH
36386: LD_INT 29
36388: PUSH
36389: EMPTY
36390: LIST
36391: IN
36392: IFFALSE 36413
// points := [ 70 , 200 , 400 ] ;
36394: LD_ADDR_VAR 0 9
36398: PUSH
36399: LD_INT 70
36401: PUSH
36402: LD_INT 200
36404: PUSH
36405: LD_INT 400
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36413: LD_VAR 0 6
36417: PPUSH
36418: CALL_OW 264
36422: PUSH
36423: LD_INT 14
36425: PUSH
36426: LD_INT 53
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: IN
36433: IFFALSE 36454
// points := [ 40 , 10 , 20 ] ;
36435: LD_ADDR_VAR 0 9
36439: PUSH
36440: LD_INT 40
36442: PUSH
36443: LD_INT 10
36445: PUSH
36446: LD_INT 20
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36454: LD_VAR 0 6
36458: PPUSH
36459: CALL_OW 264
36463: PUSH
36464: LD_INT 9
36466: PUSH
36467: EMPTY
36468: LIST
36469: IN
36470: IFFALSE 36491
// points := [ 5 , 70 , 20 ] ;
36472: LD_ADDR_VAR 0 9
36476: PUSH
36477: LD_INT 5
36479: PUSH
36480: LD_INT 70
36482: PUSH
36483: LD_INT 20
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: LIST
36490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36491: LD_VAR 0 6
36495: PPUSH
36496: CALL_OW 264
36500: PUSH
36501: LD_INT 10
36503: PUSH
36504: EMPTY
36505: LIST
36506: IN
36507: IFFALSE 36528
// points := [ 35 , 110 , 70 ] ;
36509: LD_ADDR_VAR 0 9
36513: PUSH
36514: LD_INT 35
36516: PUSH
36517: LD_INT 110
36519: PUSH
36520: LD_INT 70
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: LIST
36527: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36528: LD_VAR 0 6
36532: PPUSH
36533: CALL_OW 265
36537: PUSH
36538: LD_INT 25
36540: EQUAL
36541: IFFALSE 36562
// points := [ 80 , 65 , 100 ] ;
36543: LD_ADDR_VAR 0 9
36547: PUSH
36548: LD_INT 80
36550: PUSH
36551: LD_INT 65
36553: PUSH
36554: LD_INT 100
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: LIST
36561: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36562: LD_VAR 0 6
36566: PPUSH
36567: CALL_OW 263
36571: PUSH
36572: LD_INT 1
36574: EQUAL
36575: IFFALSE 36610
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36577: LD_ADDR_VAR 0 10
36581: PUSH
36582: LD_VAR 0 10
36586: PUSH
36587: LD_VAR 0 6
36591: PPUSH
36592: CALL_OW 311
36596: PPUSH
36597: LD_INT 3
36599: PPUSH
36600: CALL_OW 259
36604: PUSH
36605: LD_INT 4
36607: MUL
36608: MUL
36609: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36610: LD_VAR 0 6
36614: PPUSH
36615: CALL_OW 263
36619: PUSH
36620: LD_INT 2
36622: EQUAL
36623: IFFALSE 36674
// begin j := IsControledBy ( i ) ;
36625: LD_ADDR_VAR 0 7
36629: PUSH
36630: LD_VAR 0 6
36634: PPUSH
36635: CALL_OW 312
36639: ST_TO_ADDR
// if j then
36640: LD_VAR 0 7
36644: IFFALSE 36674
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36646: LD_ADDR_VAR 0 10
36650: PUSH
36651: LD_VAR 0 10
36655: PUSH
36656: LD_VAR 0 7
36660: PPUSH
36661: LD_INT 3
36663: PPUSH
36664: CALL_OW 259
36668: PUSH
36669: LD_INT 3
36671: MUL
36672: MUL
36673: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36674: LD_VAR 0 6
36678: PPUSH
36679: CALL_OW 264
36683: PUSH
36684: LD_INT 5
36686: PUSH
36687: LD_INT 6
36689: PUSH
36690: LD_INT 46
36692: PUSH
36693: LD_INT 44
36695: PUSH
36696: LD_INT 47
36698: PUSH
36699: LD_INT 45
36701: PUSH
36702: LD_INT 28
36704: PUSH
36705: LD_INT 7
36707: PUSH
36708: LD_INT 27
36710: PUSH
36711: LD_INT 29
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: IN
36726: PUSH
36727: LD_VAR 0 1
36731: PPUSH
36732: LD_INT 52
36734: PPUSH
36735: CALL_OW 321
36739: PUSH
36740: LD_INT 2
36742: EQUAL
36743: AND
36744: IFFALSE 36761
// bpoints := bpoints * 1.2 ;
36746: LD_ADDR_VAR 0 10
36750: PUSH
36751: LD_VAR 0 10
36755: PUSH
36756: LD_REAL  1.20000000000000E+0000
36759: MUL
36760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36761: LD_VAR 0 6
36765: PPUSH
36766: CALL_OW 264
36770: PUSH
36771: LD_INT 6
36773: PUSH
36774: LD_INT 46
36776: PUSH
36777: LD_INT 47
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: IN
36785: IFFALSE 36802
// bpoints := bpoints * 1.2 ;
36787: LD_ADDR_VAR 0 10
36791: PUSH
36792: LD_VAR 0 10
36796: PUSH
36797: LD_REAL  1.20000000000000E+0000
36800: MUL
36801: ST_TO_ADDR
// end ; unit_building :
36802: GO 36816
36804: LD_INT 3
36806: DOUBLE
36807: EQUAL
36808: IFTRUE 36812
36810: GO 36815
36812: POP
// ; end ;
36813: GO 36816
36815: POP
// for j = 1 to 3 do
36816: LD_ADDR_VAR 0 7
36820: PUSH
36821: DOUBLE
36822: LD_INT 1
36824: DEC
36825: ST_TO_ADDR
36826: LD_INT 3
36828: PUSH
36829: FOR_TO
36830: IFFALSE 36883
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36832: LD_ADDR_VAR 0 5
36836: PUSH
36837: LD_VAR 0 5
36841: PPUSH
36842: LD_VAR 0 7
36846: PPUSH
36847: LD_VAR 0 5
36851: PUSH
36852: LD_VAR 0 7
36856: ARRAY
36857: PUSH
36858: LD_VAR 0 9
36862: PUSH
36863: LD_VAR 0 7
36867: ARRAY
36868: PUSH
36869: LD_VAR 0 10
36873: MUL
36874: PLUS
36875: PPUSH
36876: CALL_OW 1
36880: ST_TO_ADDR
36881: GO 36829
36883: POP
36884: POP
// end ;
36885: GO 35362
36887: POP
36888: POP
// result := Replace ( result , 4 , tmp ) ;
36889: LD_ADDR_VAR 0 5
36893: PUSH
36894: LD_VAR 0 5
36898: PPUSH
36899: LD_INT 4
36901: PPUSH
36902: LD_VAR 0 8
36906: PPUSH
36907: CALL_OW 1
36911: ST_TO_ADDR
// end ;
36912: LD_VAR 0 5
36916: RET
// export function DangerAtRange ( unit , range ) ; begin
36917: LD_INT 0
36919: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36920: LD_ADDR_VAR 0 3
36924: PUSH
36925: LD_VAR 0 1
36929: PPUSH
36930: CALL_OW 255
36934: PPUSH
36935: LD_VAR 0 1
36939: PPUSH
36940: CALL_OW 250
36944: PPUSH
36945: LD_VAR 0 1
36949: PPUSH
36950: CALL_OW 251
36954: PPUSH
36955: LD_VAR 0 2
36959: PPUSH
36960: CALL 35214 0 4
36964: ST_TO_ADDR
// end ;
36965: LD_VAR 0 3
36969: RET
// export function DangerInArea ( side , area ) ; begin
36970: LD_INT 0
36972: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36973: LD_ADDR_VAR 0 3
36977: PUSH
36978: LD_VAR 0 2
36982: PPUSH
36983: LD_INT 81
36985: PUSH
36986: LD_VAR 0 1
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PPUSH
36995: CALL_OW 70
36999: ST_TO_ADDR
// end ;
37000: LD_VAR 0 3
37004: RET
// export function IsExtension ( b ) ; begin
37005: LD_INT 0
37007: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37008: LD_ADDR_VAR 0 2
37012: PUSH
37013: LD_VAR 0 1
37017: PUSH
37018: LD_INT 23
37020: PUSH
37021: LD_INT 20
37023: PUSH
37024: LD_INT 22
37026: PUSH
37027: LD_INT 17
37029: PUSH
37030: LD_INT 24
37032: PUSH
37033: LD_INT 21
37035: PUSH
37036: LD_INT 19
37038: PUSH
37039: LD_INT 16
37041: PUSH
37042: LD_INT 25
37044: PUSH
37045: LD_INT 18
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: IN
37060: ST_TO_ADDR
// end ;
37061: LD_VAR 0 2
37065: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37066: LD_INT 0
37068: PPUSH
37069: PPUSH
37070: PPUSH
// result := [ ] ;
37071: LD_ADDR_VAR 0 4
37075: PUSH
37076: EMPTY
37077: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37078: LD_ADDR_VAR 0 5
37082: PUSH
37083: LD_VAR 0 2
37087: PPUSH
37088: LD_INT 21
37090: PUSH
37091: LD_INT 3
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PPUSH
37098: CALL_OW 70
37102: ST_TO_ADDR
// if not tmp then
37103: LD_VAR 0 5
37107: NOT
37108: IFFALSE 37112
// exit ;
37110: GO 37176
// if checkLink then
37112: LD_VAR 0 3
37116: IFFALSE 37166
// begin for i in tmp do
37118: LD_ADDR_VAR 0 6
37122: PUSH
37123: LD_VAR 0 5
37127: PUSH
37128: FOR_IN
37129: IFFALSE 37164
// if GetBase ( i ) <> base then
37131: LD_VAR 0 6
37135: PPUSH
37136: CALL_OW 274
37140: PUSH
37141: LD_VAR 0 1
37145: NONEQUAL
37146: IFFALSE 37162
// ComLinkToBase ( base , i ) ;
37148: LD_VAR 0 1
37152: PPUSH
37153: LD_VAR 0 6
37157: PPUSH
37158: CALL_OW 169
37162: GO 37128
37164: POP
37165: POP
// end ; result := tmp ;
37166: LD_ADDR_VAR 0 4
37170: PUSH
37171: LD_VAR 0 5
37175: ST_TO_ADDR
// end ;
37176: LD_VAR 0 4
37180: RET
// export function ComComplete ( units , b ) ; var i ; begin
37181: LD_INT 0
37183: PPUSH
37184: PPUSH
// if not units then
37185: LD_VAR 0 1
37189: NOT
37190: IFFALSE 37194
// exit ;
37192: GO 37284
// for i in units do
37194: LD_ADDR_VAR 0 4
37198: PUSH
37199: LD_VAR 0 1
37203: PUSH
37204: FOR_IN
37205: IFFALSE 37282
// if BuildingStatus ( b ) = bs_build then
37207: LD_VAR 0 2
37211: PPUSH
37212: CALL_OW 461
37216: PUSH
37217: LD_INT 1
37219: EQUAL
37220: IFFALSE 37280
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37222: LD_VAR 0 4
37226: PPUSH
37227: LD_STRING h
37229: PUSH
37230: LD_VAR 0 2
37234: PPUSH
37235: CALL_OW 250
37239: PUSH
37240: LD_VAR 0 2
37244: PPUSH
37245: CALL_OW 251
37249: PUSH
37250: LD_VAR 0 2
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: PUSH
37273: EMPTY
37274: LIST
37275: PPUSH
37276: CALL_OW 446
37280: GO 37204
37282: POP
37283: POP
// end ;
37284: LD_VAR 0 3
37288: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37289: LD_INT 0
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37297: LD_VAR 0 1
37301: NOT
37302: PUSH
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 263
37312: PUSH
37313: LD_INT 2
37315: NONEQUAL
37316: OR
37317: IFFALSE 37321
// exit ;
37319: GO 37637
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37321: LD_ADDR_VAR 0 6
37325: PUSH
37326: LD_INT 22
37328: PUSH
37329: LD_VAR 0 1
37333: PPUSH
37334: CALL_OW 255
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: LD_INT 30
37348: PUSH
37349: LD_INT 36
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 34
37358: PUSH
37359: LD_INT 31
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PPUSH
37375: CALL_OW 69
37379: ST_TO_ADDR
// if not tmp then
37380: LD_VAR 0 6
37384: NOT
37385: IFFALSE 37389
// exit ;
37387: GO 37637
// result := [ ] ;
37389: LD_ADDR_VAR 0 2
37393: PUSH
37394: EMPTY
37395: ST_TO_ADDR
// for i in tmp do
37396: LD_ADDR_VAR 0 3
37400: PUSH
37401: LD_VAR 0 6
37405: PUSH
37406: FOR_IN
37407: IFFALSE 37478
// begin t := UnitsInside ( i ) ;
37409: LD_ADDR_VAR 0 4
37413: PUSH
37414: LD_VAR 0 3
37418: PPUSH
37419: CALL_OW 313
37423: ST_TO_ADDR
// if t then
37424: LD_VAR 0 4
37428: IFFALSE 37476
// for j in t do
37430: LD_ADDR_VAR 0 7
37434: PUSH
37435: LD_VAR 0 4
37439: PUSH
37440: FOR_IN
37441: IFFALSE 37474
// result := Replace ( result , result + 1 , j ) ;
37443: LD_ADDR_VAR 0 2
37447: PUSH
37448: LD_VAR 0 2
37452: PPUSH
37453: LD_VAR 0 2
37457: PUSH
37458: LD_INT 1
37460: PLUS
37461: PPUSH
37462: LD_VAR 0 7
37466: PPUSH
37467: CALL_OW 1
37471: ST_TO_ADDR
37472: GO 37440
37474: POP
37475: POP
// end ;
37476: GO 37406
37478: POP
37479: POP
// if not result then
37480: LD_VAR 0 2
37484: NOT
37485: IFFALSE 37489
// exit ;
37487: GO 37637
// mech := result [ 1 ] ;
37489: LD_ADDR_VAR 0 5
37493: PUSH
37494: LD_VAR 0 2
37498: PUSH
37499: LD_INT 1
37501: ARRAY
37502: ST_TO_ADDR
// if result > 1 then
37503: LD_VAR 0 2
37507: PUSH
37508: LD_INT 1
37510: GREATER
37511: IFFALSE 37623
// begin for i = 2 to result do
37513: LD_ADDR_VAR 0 3
37517: PUSH
37518: DOUBLE
37519: LD_INT 2
37521: DEC
37522: ST_TO_ADDR
37523: LD_VAR 0 2
37527: PUSH
37528: FOR_TO
37529: IFFALSE 37621
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37531: LD_ADDR_VAR 0 4
37535: PUSH
37536: LD_VAR 0 2
37540: PUSH
37541: LD_VAR 0 3
37545: ARRAY
37546: PPUSH
37547: LD_INT 3
37549: PPUSH
37550: CALL_OW 259
37554: PUSH
37555: LD_VAR 0 2
37559: PUSH
37560: LD_VAR 0 3
37564: ARRAY
37565: PPUSH
37566: CALL_OW 432
37570: MINUS
37571: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37572: LD_VAR 0 4
37576: PUSH
37577: LD_VAR 0 5
37581: PPUSH
37582: LD_INT 3
37584: PPUSH
37585: CALL_OW 259
37589: PUSH
37590: LD_VAR 0 5
37594: PPUSH
37595: CALL_OW 432
37599: MINUS
37600: GREATEREQUAL
37601: IFFALSE 37619
// mech := result [ i ] ;
37603: LD_ADDR_VAR 0 5
37607: PUSH
37608: LD_VAR 0 2
37612: PUSH
37613: LD_VAR 0 3
37617: ARRAY
37618: ST_TO_ADDR
// end ;
37619: GO 37528
37621: POP
37622: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37623: LD_VAR 0 1
37627: PPUSH
37628: LD_VAR 0 5
37632: PPUSH
37633: CALL_OW 135
// end ;
37637: LD_VAR 0 2
37641: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37642: LD_INT 0
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
37650: PPUSH
37651: PPUSH
37652: PPUSH
37653: PPUSH
37654: PPUSH
37655: PPUSH
37656: PPUSH
// result := [ ] ;
37657: LD_ADDR_VAR 0 7
37661: PUSH
37662: EMPTY
37663: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37664: LD_VAR 0 1
37668: PPUSH
37669: CALL_OW 266
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: IN
37684: NOT
37685: IFFALSE 37689
// exit ;
37687: GO 39323
// if name then
37689: LD_VAR 0 3
37693: IFFALSE 37709
// SetBName ( base_dep , name ) ;
37695: LD_VAR 0 1
37699: PPUSH
37700: LD_VAR 0 3
37704: PPUSH
37705: CALL_OW 500
// base := GetBase ( base_dep ) ;
37709: LD_ADDR_VAR 0 15
37713: PUSH
37714: LD_VAR 0 1
37718: PPUSH
37719: CALL_OW 274
37723: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37724: LD_ADDR_VAR 0 16
37728: PUSH
37729: LD_VAR 0 1
37733: PPUSH
37734: CALL_OW 255
37738: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37739: LD_ADDR_VAR 0 17
37743: PUSH
37744: LD_VAR 0 1
37748: PPUSH
37749: CALL_OW 248
37753: ST_TO_ADDR
// if sources then
37754: LD_VAR 0 5
37758: IFFALSE 37805
// for i = 1 to 3 do
37760: LD_ADDR_VAR 0 8
37764: PUSH
37765: DOUBLE
37766: LD_INT 1
37768: DEC
37769: ST_TO_ADDR
37770: LD_INT 3
37772: PUSH
37773: FOR_TO
37774: IFFALSE 37803
// AddResourceType ( base , i , sources [ i ] ) ;
37776: LD_VAR 0 15
37780: PPUSH
37781: LD_VAR 0 8
37785: PPUSH
37786: LD_VAR 0 5
37790: PUSH
37791: LD_VAR 0 8
37795: ARRAY
37796: PPUSH
37797: CALL_OW 276
37801: GO 37773
37803: POP
37804: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37805: LD_ADDR_VAR 0 18
37809: PUSH
37810: LD_VAR 0 15
37814: PPUSH
37815: LD_VAR 0 2
37819: PPUSH
37820: LD_INT 1
37822: PPUSH
37823: CALL 37066 0 3
37827: ST_TO_ADDR
// InitHc ;
37828: CALL_OW 19
// InitUc ;
37832: CALL_OW 18
// uc_side := side ;
37836: LD_ADDR_OWVAR 20
37840: PUSH
37841: LD_VAR 0 16
37845: ST_TO_ADDR
// uc_nation := nation ;
37846: LD_ADDR_OWVAR 21
37850: PUSH
37851: LD_VAR 0 17
37855: ST_TO_ADDR
// if buildings then
37856: LD_VAR 0 18
37860: IFFALSE 39182
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37862: LD_ADDR_VAR 0 19
37866: PUSH
37867: LD_VAR 0 18
37871: PPUSH
37872: LD_INT 2
37874: PUSH
37875: LD_INT 30
37877: PUSH
37878: LD_INT 29
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 30
37887: PUSH
37888: LD_INT 30
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: PPUSH
37900: CALL_OW 72
37904: ST_TO_ADDR
// if tmp then
37905: LD_VAR 0 19
37909: IFFALSE 37957
// for i in tmp do
37911: LD_ADDR_VAR 0 8
37915: PUSH
37916: LD_VAR 0 19
37920: PUSH
37921: FOR_IN
37922: IFFALSE 37955
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37924: LD_VAR 0 8
37928: PPUSH
37929: CALL_OW 250
37933: PPUSH
37934: LD_VAR 0 8
37938: PPUSH
37939: CALL_OW 251
37943: PPUSH
37944: LD_VAR 0 16
37948: PPUSH
37949: CALL_OW 441
37953: GO 37921
37955: POP
37956: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37957: LD_VAR 0 18
37961: PPUSH
37962: LD_INT 2
37964: PUSH
37965: LD_INT 30
37967: PUSH
37968: LD_INT 32
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 30
37977: PUSH
37978: LD_INT 33
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: PPUSH
37990: CALL_OW 72
37994: IFFALSE 38082
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37996: LD_ADDR_VAR 0 8
38000: PUSH
38001: LD_VAR 0 18
38005: PPUSH
38006: LD_INT 2
38008: PUSH
38009: LD_INT 30
38011: PUSH
38012: LD_INT 32
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 30
38021: PUSH
38022: LD_INT 33
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: PPUSH
38034: CALL_OW 72
38038: PUSH
38039: FOR_IN
38040: IFFALSE 38080
// begin if not GetBWeapon ( i ) then
38042: LD_VAR 0 8
38046: PPUSH
38047: CALL_OW 269
38051: NOT
38052: IFFALSE 38078
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38054: LD_VAR 0 8
38058: PPUSH
38059: LD_VAR 0 8
38063: PPUSH
38064: LD_VAR 0 2
38068: PPUSH
38069: CALL 39328 0 2
38073: PPUSH
38074: CALL_OW 431
// end ;
38078: GO 38039
38080: POP
38081: POP
// end ; for i = 1 to personel do
38082: LD_ADDR_VAR 0 8
38086: PUSH
38087: DOUBLE
38088: LD_INT 1
38090: DEC
38091: ST_TO_ADDR
38092: LD_VAR 0 6
38096: PUSH
38097: FOR_TO
38098: IFFALSE 39162
// begin if i > 4 then
38100: LD_VAR 0 8
38104: PUSH
38105: LD_INT 4
38107: GREATER
38108: IFFALSE 38112
// break ;
38110: GO 39162
// case i of 1 :
38112: LD_VAR 0 8
38116: PUSH
38117: LD_INT 1
38119: DOUBLE
38120: EQUAL
38121: IFTRUE 38125
38123: GO 38205
38125: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38126: LD_ADDR_VAR 0 12
38130: PUSH
38131: LD_VAR 0 18
38135: PPUSH
38136: LD_INT 22
38138: PUSH
38139: LD_VAR 0 16
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 58
38150: PUSH
38151: EMPTY
38152: LIST
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: LD_INT 30
38159: PUSH
38160: LD_INT 32
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 30
38169: PUSH
38170: LD_INT 4
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 30
38179: PUSH
38180: LD_INT 5
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: LIST
38197: PPUSH
38198: CALL_OW 72
38202: ST_TO_ADDR
38203: GO 38427
38205: LD_INT 2
38207: DOUBLE
38208: EQUAL
38209: IFTRUE 38213
38211: GO 38275
38213: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38214: LD_ADDR_VAR 0 12
38218: PUSH
38219: LD_VAR 0 18
38223: PPUSH
38224: LD_INT 22
38226: PUSH
38227: LD_VAR 0 16
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 2
38238: PUSH
38239: LD_INT 30
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 30
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PPUSH
38268: CALL_OW 72
38272: ST_TO_ADDR
38273: GO 38427
38275: LD_INT 3
38277: DOUBLE
38278: EQUAL
38279: IFTRUE 38283
38281: GO 38345
38283: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38284: LD_ADDR_VAR 0 12
38288: PUSH
38289: LD_VAR 0 18
38293: PPUSH
38294: LD_INT 22
38296: PUSH
38297: LD_VAR 0 16
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 30
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 30
38321: PUSH
38322: LD_INT 3
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: LIST
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PPUSH
38338: CALL_OW 72
38342: ST_TO_ADDR
38343: GO 38427
38345: LD_INT 4
38347: DOUBLE
38348: EQUAL
38349: IFTRUE 38353
38351: GO 38426
38353: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38354: LD_ADDR_VAR 0 12
38358: PUSH
38359: LD_VAR 0 18
38363: PPUSH
38364: LD_INT 22
38366: PUSH
38367: LD_VAR 0 16
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 30
38381: PUSH
38382: LD_INT 6
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 30
38391: PUSH
38392: LD_INT 7
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 30
38401: PUSH
38402: LD_INT 8
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PPUSH
38419: CALL_OW 72
38423: ST_TO_ADDR
38424: GO 38427
38426: POP
// if i = 1 then
38427: LD_VAR 0 8
38431: PUSH
38432: LD_INT 1
38434: EQUAL
38435: IFFALSE 38546
// begin tmp := [ ] ;
38437: LD_ADDR_VAR 0 19
38441: PUSH
38442: EMPTY
38443: ST_TO_ADDR
// for j in f do
38444: LD_ADDR_VAR 0 9
38448: PUSH
38449: LD_VAR 0 12
38453: PUSH
38454: FOR_IN
38455: IFFALSE 38528
// if GetBType ( j ) = b_bunker then
38457: LD_VAR 0 9
38461: PPUSH
38462: CALL_OW 266
38466: PUSH
38467: LD_INT 32
38469: EQUAL
38470: IFFALSE 38497
// tmp := Insert ( tmp , 1 , j ) else
38472: LD_ADDR_VAR 0 19
38476: PUSH
38477: LD_VAR 0 19
38481: PPUSH
38482: LD_INT 1
38484: PPUSH
38485: LD_VAR 0 9
38489: PPUSH
38490: CALL_OW 2
38494: ST_TO_ADDR
38495: GO 38526
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38497: LD_ADDR_VAR 0 19
38501: PUSH
38502: LD_VAR 0 19
38506: PPUSH
38507: LD_VAR 0 19
38511: PUSH
38512: LD_INT 1
38514: PLUS
38515: PPUSH
38516: LD_VAR 0 9
38520: PPUSH
38521: CALL_OW 2
38525: ST_TO_ADDR
38526: GO 38454
38528: POP
38529: POP
// if tmp then
38530: LD_VAR 0 19
38534: IFFALSE 38546
// f := tmp ;
38536: LD_ADDR_VAR 0 12
38540: PUSH
38541: LD_VAR 0 19
38545: ST_TO_ADDR
// end ; x := personel [ i ] ;
38546: LD_ADDR_VAR 0 13
38550: PUSH
38551: LD_VAR 0 6
38555: PUSH
38556: LD_VAR 0 8
38560: ARRAY
38561: ST_TO_ADDR
// if x = - 1 then
38562: LD_VAR 0 13
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: EQUAL
38571: IFFALSE 38780
// begin for j in f do
38573: LD_ADDR_VAR 0 9
38577: PUSH
38578: LD_VAR 0 12
38582: PUSH
38583: FOR_IN
38584: IFFALSE 38776
// repeat InitHc ;
38586: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38590: LD_VAR 0 9
38594: PPUSH
38595: CALL_OW 266
38599: PUSH
38600: LD_INT 5
38602: EQUAL
38603: IFFALSE 38673
// begin if UnitsInside ( j ) < 3 then
38605: LD_VAR 0 9
38609: PPUSH
38610: CALL_OW 313
38614: PUSH
38615: LD_INT 3
38617: LESS
38618: IFFALSE 38654
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38620: LD_INT 0
38622: PPUSH
38623: LD_INT 5
38625: PUSH
38626: LD_INT 8
38628: PUSH
38629: LD_INT 9
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: PUSH
38637: LD_VAR 0 17
38641: ARRAY
38642: PPUSH
38643: LD_VAR 0 4
38647: PPUSH
38648: CALL_OW 380
38652: GO 38671
// PrepareHuman ( false , i , skill ) ;
38654: LD_INT 0
38656: PPUSH
38657: LD_VAR 0 8
38661: PPUSH
38662: LD_VAR 0 4
38666: PPUSH
38667: CALL_OW 380
// end else
38671: GO 38690
// PrepareHuman ( false , i , skill ) ;
38673: LD_INT 0
38675: PPUSH
38676: LD_VAR 0 8
38680: PPUSH
38681: LD_VAR 0 4
38685: PPUSH
38686: CALL_OW 380
// un := CreateHuman ;
38690: LD_ADDR_VAR 0 14
38694: PUSH
38695: CALL_OW 44
38699: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38700: LD_ADDR_VAR 0 7
38704: PUSH
38705: LD_VAR 0 7
38709: PPUSH
38710: LD_INT 1
38712: PPUSH
38713: LD_VAR 0 14
38717: PPUSH
38718: CALL_OW 2
38722: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38723: LD_VAR 0 14
38727: PPUSH
38728: LD_VAR 0 9
38732: PPUSH
38733: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38737: LD_VAR 0 9
38741: PPUSH
38742: CALL_OW 313
38746: PUSH
38747: LD_INT 6
38749: EQUAL
38750: PUSH
38751: LD_VAR 0 9
38755: PPUSH
38756: CALL_OW 266
38760: PUSH
38761: LD_INT 32
38763: PUSH
38764: LD_INT 31
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: IN
38771: OR
38772: IFFALSE 38586
38774: GO 38583
38776: POP
38777: POP
// end else
38778: GO 39160
// for j = 1 to x do
38780: LD_ADDR_VAR 0 9
38784: PUSH
38785: DOUBLE
38786: LD_INT 1
38788: DEC
38789: ST_TO_ADDR
38790: LD_VAR 0 13
38794: PUSH
38795: FOR_TO
38796: IFFALSE 39158
// begin InitHc ;
38798: CALL_OW 19
// if not f then
38802: LD_VAR 0 12
38806: NOT
38807: IFFALSE 38896
// begin PrepareHuman ( false , i , skill ) ;
38809: LD_INT 0
38811: PPUSH
38812: LD_VAR 0 8
38816: PPUSH
38817: LD_VAR 0 4
38821: PPUSH
38822: CALL_OW 380
// un := CreateHuman ;
38826: LD_ADDR_VAR 0 14
38830: PUSH
38831: CALL_OW 44
38835: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38836: LD_ADDR_VAR 0 7
38840: PUSH
38841: LD_VAR 0 7
38845: PPUSH
38846: LD_INT 1
38848: PPUSH
38849: LD_VAR 0 14
38853: PPUSH
38854: CALL_OW 2
38858: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38859: LD_VAR 0 14
38863: PPUSH
38864: LD_VAR 0 1
38868: PPUSH
38869: CALL_OW 250
38873: PPUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: CALL_OW 251
38883: PPUSH
38884: LD_INT 10
38886: PPUSH
38887: LD_INT 0
38889: PPUSH
38890: CALL_OW 50
// continue ;
38894: GO 38795
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38896: LD_VAR 0 12
38900: PUSH
38901: LD_INT 1
38903: ARRAY
38904: PPUSH
38905: CALL_OW 313
38909: PUSH
38910: LD_VAR 0 12
38914: PUSH
38915: LD_INT 1
38917: ARRAY
38918: PPUSH
38919: CALL_OW 266
38923: PUSH
38924: LD_INT 32
38926: PUSH
38927: LD_INT 31
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: IN
38934: AND
38935: PUSH
38936: LD_VAR 0 12
38940: PUSH
38941: LD_INT 1
38943: ARRAY
38944: PPUSH
38945: CALL_OW 313
38949: PUSH
38950: LD_INT 6
38952: EQUAL
38953: OR
38954: IFFALSE 38974
// f := Delete ( f , 1 ) ;
38956: LD_ADDR_VAR 0 12
38960: PUSH
38961: LD_VAR 0 12
38965: PPUSH
38966: LD_INT 1
38968: PPUSH
38969: CALL_OW 3
38973: ST_TO_ADDR
// if not f then
38974: LD_VAR 0 12
38978: NOT
38979: IFFALSE 38997
// begin x := x + 2 ;
38981: LD_ADDR_VAR 0 13
38985: PUSH
38986: LD_VAR 0 13
38990: PUSH
38991: LD_INT 2
38993: PLUS
38994: ST_TO_ADDR
// continue ;
38995: GO 38795
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38997: LD_VAR 0 12
39001: PUSH
39002: LD_INT 1
39004: ARRAY
39005: PPUSH
39006: CALL_OW 266
39010: PUSH
39011: LD_INT 5
39013: EQUAL
39014: IFFALSE 39088
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39016: LD_VAR 0 12
39020: PUSH
39021: LD_INT 1
39023: ARRAY
39024: PPUSH
39025: CALL_OW 313
39029: PUSH
39030: LD_INT 3
39032: LESS
39033: IFFALSE 39069
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39035: LD_INT 0
39037: PPUSH
39038: LD_INT 5
39040: PUSH
39041: LD_INT 8
39043: PUSH
39044: LD_INT 9
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: PUSH
39052: LD_VAR 0 17
39056: ARRAY
39057: PPUSH
39058: LD_VAR 0 4
39062: PPUSH
39063: CALL_OW 380
39067: GO 39086
// PrepareHuman ( false , i , skill ) ;
39069: LD_INT 0
39071: PPUSH
39072: LD_VAR 0 8
39076: PPUSH
39077: LD_VAR 0 4
39081: PPUSH
39082: CALL_OW 380
// end else
39086: GO 39105
// PrepareHuman ( false , i , skill ) ;
39088: LD_INT 0
39090: PPUSH
39091: LD_VAR 0 8
39095: PPUSH
39096: LD_VAR 0 4
39100: PPUSH
39101: CALL_OW 380
// un := CreateHuman ;
39105: LD_ADDR_VAR 0 14
39109: PUSH
39110: CALL_OW 44
39114: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39115: LD_ADDR_VAR 0 7
39119: PUSH
39120: LD_VAR 0 7
39124: PPUSH
39125: LD_INT 1
39127: PPUSH
39128: LD_VAR 0 14
39132: PPUSH
39133: CALL_OW 2
39137: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39138: LD_VAR 0 14
39142: PPUSH
39143: LD_VAR 0 12
39147: PUSH
39148: LD_INT 1
39150: ARRAY
39151: PPUSH
39152: CALL_OW 52
// end ;
39156: GO 38795
39158: POP
39159: POP
// end ;
39160: GO 38097
39162: POP
39163: POP
// result := result ^ buildings ;
39164: LD_ADDR_VAR 0 7
39168: PUSH
39169: LD_VAR 0 7
39173: PUSH
39174: LD_VAR 0 18
39178: ADD
39179: ST_TO_ADDR
// end else
39180: GO 39323
// begin for i = 1 to personel do
39182: LD_ADDR_VAR 0 8
39186: PUSH
39187: DOUBLE
39188: LD_INT 1
39190: DEC
39191: ST_TO_ADDR
39192: LD_VAR 0 6
39196: PUSH
39197: FOR_TO
39198: IFFALSE 39321
// begin if i > 4 then
39200: LD_VAR 0 8
39204: PUSH
39205: LD_INT 4
39207: GREATER
39208: IFFALSE 39212
// break ;
39210: GO 39321
// x := personel [ i ] ;
39212: LD_ADDR_VAR 0 13
39216: PUSH
39217: LD_VAR 0 6
39221: PUSH
39222: LD_VAR 0 8
39226: ARRAY
39227: ST_TO_ADDR
// if x = - 1 then
39228: LD_VAR 0 13
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: EQUAL
39237: IFFALSE 39241
// continue ;
39239: GO 39197
// PrepareHuman ( false , i , skill ) ;
39241: LD_INT 0
39243: PPUSH
39244: LD_VAR 0 8
39248: PPUSH
39249: LD_VAR 0 4
39253: PPUSH
39254: CALL_OW 380
// un := CreateHuman ;
39258: LD_ADDR_VAR 0 14
39262: PUSH
39263: CALL_OW 44
39267: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39268: LD_VAR 0 14
39272: PPUSH
39273: LD_VAR 0 1
39277: PPUSH
39278: CALL_OW 250
39282: PPUSH
39283: LD_VAR 0 1
39287: PPUSH
39288: CALL_OW 251
39292: PPUSH
39293: LD_INT 10
39295: PPUSH
39296: LD_INT 0
39298: PPUSH
39299: CALL_OW 50
// result := result ^ un ;
39303: LD_ADDR_VAR 0 7
39307: PUSH
39308: LD_VAR 0 7
39312: PUSH
39313: LD_VAR 0 14
39317: ADD
39318: ST_TO_ADDR
// end ;
39319: GO 39197
39321: POP
39322: POP
// end ; end ;
39323: LD_VAR 0 7
39327: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39328: LD_INT 0
39330: PPUSH
39331: PPUSH
39332: PPUSH
39333: PPUSH
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
39339: PPUSH
39340: PPUSH
39341: PPUSH
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
// result := false ;
39346: LD_ADDR_VAR 0 3
39350: PUSH
39351: LD_INT 0
39353: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39354: LD_VAR 0 1
39358: NOT
39359: PUSH
39360: LD_VAR 0 1
39364: PPUSH
39365: CALL_OW 266
39369: PUSH
39370: LD_INT 32
39372: PUSH
39373: LD_INT 33
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: IN
39380: NOT
39381: OR
39382: IFFALSE 39386
// exit ;
39384: GO 40495
// nat := GetNation ( tower ) ;
39386: LD_ADDR_VAR 0 12
39390: PUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: CALL_OW 248
39400: ST_TO_ADDR
// side := GetSide ( tower ) ;
39401: LD_ADDR_VAR 0 16
39405: PUSH
39406: LD_VAR 0 1
39410: PPUSH
39411: CALL_OW 255
39415: ST_TO_ADDR
// x := GetX ( tower ) ;
39416: LD_ADDR_VAR 0 10
39420: PUSH
39421: LD_VAR 0 1
39425: PPUSH
39426: CALL_OW 250
39430: ST_TO_ADDR
// y := GetY ( tower ) ;
39431: LD_ADDR_VAR 0 11
39435: PUSH
39436: LD_VAR 0 1
39440: PPUSH
39441: CALL_OW 251
39445: ST_TO_ADDR
// if not x or not y then
39446: LD_VAR 0 10
39450: NOT
39451: PUSH
39452: LD_VAR 0 11
39456: NOT
39457: OR
39458: IFFALSE 39462
// exit ;
39460: GO 40495
// weapon := 0 ;
39462: LD_ADDR_VAR 0 18
39466: PUSH
39467: LD_INT 0
39469: ST_TO_ADDR
// fac_list := [ ] ;
39470: LD_ADDR_VAR 0 17
39474: PUSH
39475: EMPTY
39476: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39477: LD_ADDR_VAR 0 6
39481: PUSH
39482: LD_VAR 0 1
39486: PPUSH
39487: CALL_OW 274
39491: PPUSH
39492: LD_VAR 0 2
39496: PPUSH
39497: LD_INT 0
39499: PPUSH
39500: CALL 37066 0 3
39504: PPUSH
39505: LD_INT 30
39507: PUSH
39508: LD_INT 3
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PPUSH
39515: CALL_OW 72
39519: ST_TO_ADDR
// if not factories then
39520: LD_VAR 0 6
39524: NOT
39525: IFFALSE 39529
// exit ;
39527: GO 40495
// for i in factories do
39529: LD_ADDR_VAR 0 8
39533: PUSH
39534: LD_VAR 0 6
39538: PUSH
39539: FOR_IN
39540: IFFALSE 39565
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39542: LD_ADDR_VAR 0 17
39546: PUSH
39547: LD_VAR 0 17
39551: PUSH
39552: LD_VAR 0 8
39556: PPUSH
39557: CALL_OW 478
39561: UNION
39562: ST_TO_ADDR
39563: GO 39539
39565: POP
39566: POP
// if not fac_list then
39567: LD_VAR 0 17
39571: NOT
39572: IFFALSE 39576
// exit ;
39574: GO 40495
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39576: LD_ADDR_VAR 0 5
39580: PUSH
39581: LD_INT 4
39583: PUSH
39584: LD_INT 5
39586: PUSH
39587: LD_INT 9
39589: PUSH
39590: LD_INT 10
39592: PUSH
39593: LD_INT 6
39595: PUSH
39596: LD_INT 7
39598: PUSH
39599: LD_INT 11
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 27
39613: PUSH
39614: LD_INT 28
39616: PUSH
39617: LD_INT 26
39619: PUSH
39620: LD_INT 30
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 43
39631: PUSH
39632: LD_INT 44
39634: PUSH
39635: LD_INT 46
39637: PUSH
39638: LD_INT 45
39640: PUSH
39641: LD_INT 47
39643: PUSH
39644: LD_INT 49
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: LIST
39659: PUSH
39660: LD_VAR 0 12
39664: ARRAY
39665: ST_TO_ADDR
// list := list isect fac_list ;
39666: LD_ADDR_VAR 0 5
39670: PUSH
39671: LD_VAR 0 5
39675: PUSH
39676: LD_VAR 0 17
39680: ISECT
39681: ST_TO_ADDR
// if not list then
39682: LD_VAR 0 5
39686: NOT
39687: IFFALSE 39691
// exit ;
39689: GO 40495
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39691: LD_VAR 0 12
39695: PUSH
39696: LD_INT 3
39698: EQUAL
39699: PUSH
39700: LD_INT 49
39702: PUSH
39703: LD_VAR 0 5
39707: IN
39708: AND
39709: PUSH
39710: LD_INT 31
39712: PPUSH
39713: LD_VAR 0 16
39717: PPUSH
39718: CALL_OW 321
39722: PUSH
39723: LD_INT 2
39725: EQUAL
39726: AND
39727: IFFALSE 39787
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39729: LD_INT 22
39731: PUSH
39732: LD_VAR 0 16
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 35
39743: PUSH
39744: LD_INT 49
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 91
39753: PUSH
39754: LD_VAR 0 1
39758: PUSH
39759: LD_INT 10
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: LIST
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: PPUSH
39772: CALL_OW 69
39776: NOT
39777: IFFALSE 39787
// weapon := ru_time_lapser ;
39779: LD_ADDR_VAR 0 18
39783: PUSH
39784: LD_INT 49
39786: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39787: LD_VAR 0 12
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: IN
39802: PUSH
39803: LD_INT 11
39805: PUSH
39806: LD_VAR 0 5
39810: IN
39811: PUSH
39812: LD_INT 30
39814: PUSH
39815: LD_VAR 0 5
39819: IN
39820: OR
39821: AND
39822: PUSH
39823: LD_INT 6
39825: PPUSH
39826: LD_VAR 0 16
39830: PPUSH
39831: CALL_OW 321
39835: PUSH
39836: LD_INT 2
39838: EQUAL
39839: AND
39840: IFFALSE 40005
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39842: LD_INT 22
39844: PUSH
39845: LD_VAR 0 16
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: LD_INT 35
39859: PUSH
39860: LD_INT 11
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 35
39869: PUSH
39870: LD_INT 30
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 91
39884: PUSH
39885: LD_VAR 0 1
39889: PUSH
39890: LD_INT 18
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: LIST
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: LIST
39902: PPUSH
39903: CALL_OW 69
39907: NOT
39908: PUSH
39909: LD_INT 22
39911: PUSH
39912: LD_VAR 0 16
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 30
39926: PUSH
39927: LD_INT 32
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 30
39936: PUSH
39937: LD_INT 33
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 91
39951: PUSH
39952: LD_VAR 0 1
39956: PUSH
39957: LD_INT 12
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: LIST
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: PUSH
39970: EMPTY
39971: LIST
39972: PPUSH
39973: CALL_OW 69
39977: PUSH
39978: LD_INT 2
39980: GREATER
39981: AND
39982: IFFALSE 40005
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39984: LD_ADDR_VAR 0 18
39988: PUSH
39989: LD_INT 11
39991: PUSH
39992: LD_INT 30
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_VAR 0 12
40003: ARRAY
40004: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40005: LD_VAR 0 18
40009: NOT
40010: PUSH
40011: LD_INT 40
40013: PPUSH
40014: LD_VAR 0 16
40018: PPUSH
40019: CALL_OW 321
40023: PUSH
40024: LD_INT 2
40026: EQUAL
40027: AND
40028: PUSH
40029: LD_INT 7
40031: PUSH
40032: LD_VAR 0 5
40036: IN
40037: PUSH
40038: LD_INT 28
40040: PUSH
40041: LD_VAR 0 5
40045: IN
40046: OR
40047: PUSH
40048: LD_INT 45
40050: PUSH
40051: LD_VAR 0 5
40055: IN
40056: OR
40057: AND
40058: IFFALSE 40312
// begin hex := GetHexInfo ( x , y ) ;
40060: LD_ADDR_VAR 0 4
40064: PUSH
40065: LD_VAR 0 10
40069: PPUSH
40070: LD_VAR 0 11
40074: PPUSH
40075: CALL_OW 546
40079: ST_TO_ADDR
// if hex [ 1 ] then
40080: LD_VAR 0 4
40084: PUSH
40085: LD_INT 1
40087: ARRAY
40088: IFFALSE 40092
// exit ;
40090: GO 40495
// height := hex [ 2 ] ;
40092: LD_ADDR_VAR 0 15
40096: PUSH
40097: LD_VAR 0 4
40101: PUSH
40102: LD_INT 2
40104: ARRAY
40105: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40106: LD_ADDR_VAR 0 14
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: LD_INT 3
40119: PUSH
40120: LD_INT 5
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: ST_TO_ADDR
// for i in tmp do
40129: LD_ADDR_VAR 0 8
40133: PUSH
40134: LD_VAR 0 14
40138: PUSH
40139: FOR_IN
40140: IFFALSE 40310
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40142: LD_ADDR_VAR 0 9
40146: PUSH
40147: LD_VAR 0 10
40151: PPUSH
40152: LD_VAR 0 8
40156: PPUSH
40157: LD_INT 5
40159: PPUSH
40160: CALL_OW 272
40164: PUSH
40165: LD_VAR 0 11
40169: PPUSH
40170: LD_VAR 0 8
40174: PPUSH
40175: LD_INT 5
40177: PPUSH
40178: CALL_OW 273
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40187: LD_VAR 0 9
40191: PUSH
40192: LD_INT 1
40194: ARRAY
40195: PPUSH
40196: LD_VAR 0 9
40200: PUSH
40201: LD_INT 2
40203: ARRAY
40204: PPUSH
40205: CALL_OW 488
40209: IFFALSE 40308
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40211: LD_ADDR_VAR 0 4
40215: PUSH
40216: LD_VAR 0 9
40220: PUSH
40221: LD_INT 1
40223: ARRAY
40224: PPUSH
40225: LD_VAR 0 9
40229: PUSH
40230: LD_INT 2
40232: ARRAY
40233: PPUSH
40234: CALL_OW 546
40238: ST_TO_ADDR
// if hex [ 1 ] then
40239: LD_VAR 0 4
40243: PUSH
40244: LD_INT 1
40246: ARRAY
40247: IFFALSE 40251
// continue ;
40249: GO 40139
// h := hex [ 2 ] ;
40251: LD_ADDR_VAR 0 13
40255: PUSH
40256: LD_VAR 0 4
40260: PUSH
40261: LD_INT 2
40263: ARRAY
40264: ST_TO_ADDR
// if h + 7 < height then
40265: LD_VAR 0 13
40269: PUSH
40270: LD_INT 7
40272: PLUS
40273: PUSH
40274: LD_VAR 0 15
40278: LESS
40279: IFFALSE 40308
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40281: LD_ADDR_VAR 0 18
40285: PUSH
40286: LD_INT 7
40288: PUSH
40289: LD_INT 28
40291: PUSH
40292: LD_INT 45
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: PUSH
40300: LD_VAR 0 12
40304: ARRAY
40305: ST_TO_ADDR
// break ;
40306: GO 40310
// end ; end ; end ;
40308: GO 40139
40310: POP
40311: POP
// end ; if not weapon then
40312: LD_VAR 0 18
40316: NOT
40317: IFFALSE 40377
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40319: LD_ADDR_VAR 0 5
40323: PUSH
40324: LD_VAR 0 5
40328: PUSH
40329: LD_INT 11
40331: PUSH
40332: LD_INT 30
40334: PUSH
40335: LD_INT 49
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: DIFF
40343: ST_TO_ADDR
// if not list then
40344: LD_VAR 0 5
40348: NOT
40349: IFFALSE 40353
// exit ;
40351: GO 40495
// weapon := list [ rand ( 1 , list ) ] ;
40353: LD_ADDR_VAR 0 18
40357: PUSH
40358: LD_VAR 0 5
40362: PUSH
40363: LD_INT 1
40365: PPUSH
40366: LD_VAR 0 5
40370: PPUSH
40371: CALL_OW 12
40375: ARRAY
40376: ST_TO_ADDR
// end ; if weapon then
40377: LD_VAR 0 18
40381: IFFALSE 40495
// begin tmp := CostOfWeapon ( weapon ) ;
40383: LD_ADDR_VAR 0 14
40387: PUSH
40388: LD_VAR 0 18
40392: PPUSH
40393: CALL_OW 451
40397: ST_TO_ADDR
// j := GetBase ( tower ) ;
40398: LD_ADDR_VAR 0 9
40402: PUSH
40403: LD_VAR 0 1
40407: PPUSH
40408: CALL_OW 274
40412: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40413: LD_VAR 0 9
40417: PPUSH
40418: LD_INT 1
40420: PPUSH
40421: CALL_OW 275
40425: PUSH
40426: LD_VAR 0 14
40430: PUSH
40431: LD_INT 1
40433: ARRAY
40434: GREATEREQUAL
40435: PUSH
40436: LD_VAR 0 9
40440: PPUSH
40441: LD_INT 2
40443: PPUSH
40444: CALL_OW 275
40448: PUSH
40449: LD_VAR 0 14
40453: PUSH
40454: LD_INT 2
40456: ARRAY
40457: GREATEREQUAL
40458: AND
40459: PUSH
40460: LD_VAR 0 9
40464: PPUSH
40465: LD_INT 3
40467: PPUSH
40468: CALL_OW 275
40472: PUSH
40473: LD_VAR 0 14
40477: PUSH
40478: LD_INT 3
40480: ARRAY
40481: GREATEREQUAL
40482: AND
40483: IFFALSE 40495
// result := weapon ;
40485: LD_ADDR_VAR 0 3
40489: PUSH
40490: LD_VAR 0 18
40494: ST_TO_ADDR
// end ; end ;
40495: LD_VAR 0 3
40499: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40500: LD_INT 0
40502: PPUSH
40503: PPUSH
// result := true ;
40504: LD_ADDR_VAR 0 3
40508: PUSH
40509: LD_INT 1
40511: ST_TO_ADDR
// if array1 = array2 then
40512: LD_VAR 0 1
40516: PUSH
40517: LD_VAR 0 2
40521: EQUAL
40522: IFFALSE 40582
// begin for i = 1 to array1 do
40524: LD_ADDR_VAR 0 4
40528: PUSH
40529: DOUBLE
40530: LD_INT 1
40532: DEC
40533: ST_TO_ADDR
40534: LD_VAR 0 1
40538: PUSH
40539: FOR_TO
40540: IFFALSE 40578
// if array1 [ i ] <> array2 [ i ] then
40542: LD_VAR 0 1
40546: PUSH
40547: LD_VAR 0 4
40551: ARRAY
40552: PUSH
40553: LD_VAR 0 2
40557: PUSH
40558: LD_VAR 0 4
40562: ARRAY
40563: NONEQUAL
40564: IFFALSE 40576
// begin result := false ;
40566: LD_ADDR_VAR 0 3
40570: PUSH
40571: LD_INT 0
40573: ST_TO_ADDR
// break ;
40574: GO 40578
// end ;
40576: GO 40539
40578: POP
40579: POP
// end else
40580: GO 40590
// result := false ;
40582: LD_ADDR_VAR 0 3
40586: PUSH
40587: LD_INT 0
40589: ST_TO_ADDR
// end ;
40590: LD_VAR 0 3
40594: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40595: LD_INT 0
40597: PPUSH
40598: PPUSH
// if not array1 or not array2 then
40599: LD_VAR 0 1
40603: NOT
40604: PUSH
40605: LD_VAR 0 2
40609: NOT
40610: OR
40611: IFFALSE 40615
// exit ;
40613: GO 40679
// result := true ;
40615: LD_ADDR_VAR 0 3
40619: PUSH
40620: LD_INT 1
40622: ST_TO_ADDR
// for i = 1 to array1 do
40623: LD_ADDR_VAR 0 4
40627: PUSH
40628: DOUBLE
40629: LD_INT 1
40631: DEC
40632: ST_TO_ADDR
40633: LD_VAR 0 1
40637: PUSH
40638: FOR_TO
40639: IFFALSE 40677
// if array1 [ i ] <> array2 [ i ] then
40641: LD_VAR 0 1
40645: PUSH
40646: LD_VAR 0 4
40650: ARRAY
40651: PUSH
40652: LD_VAR 0 2
40656: PUSH
40657: LD_VAR 0 4
40661: ARRAY
40662: NONEQUAL
40663: IFFALSE 40675
// begin result := false ;
40665: LD_ADDR_VAR 0 3
40669: PUSH
40670: LD_INT 0
40672: ST_TO_ADDR
// break ;
40673: GO 40677
// end ;
40675: GO 40638
40677: POP
40678: POP
// end ;
40679: LD_VAR 0 3
40683: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40684: LD_INT 0
40686: PPUSH
40687: PPUSH
40688: PPUSH
// pom := GetBase ( fac ) ;
40689: LD_ADDR_VAR 0 5
40693: PUSH
40694: LD_VAR 0 1
40698: PPUSH
40699: CALL_OW 274
40703: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40704: LD_ADDR_VAR 0 4
40708: PUSH
40709: LD_VAR 0 2
40713: PUSH
40714: LD_INT 1
40716: ARRAY
40717: PPUSH
40718: LD_VAR 0 2
40722: PUSH
40723: LD_INT 2
40725: ARRAY
40726: PPUSH
40727: LD_VAR 0 2
40731: PUSH
40732: LD_INT 3
40734: ARRAY
40735: PPUSH
40736: LD_VAR 0 2
40740: PUSH
40741: LD_INT 4
40743: ARRAY
40744: PPUSH
40745: CALL_OW 449
40749: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40750: LD_ADDR_VAR 0 3
40754: PUSH
40755: LD_VAR 0 5
40759: PPUSH
40760: LD_INT 1
40762: PPUSH
40763: CALL_OW 275
40767: PUSH
40768: LD_VAR 0 4
40772: PUSH
40773: LD_INT 1
40775: ARRAY
40776: GREATEREQUAL
40777: PUSH
40778: LD_VAR 0 5
40782: PPUSH
40783: LD_INT 2
40785: PPUSH
40786: CALL_OW 275
40790: PUSH
40791: LD_VAR 0 4
40795: PUSH
40796: LD_INT 2
40798: ARRAY
40799: GREATEREQUAL
40800: AND
40801: PUSH
40802: LD_VAR 0 5
40806: PPUSH
40807: LD_INT 3
40809: PPUSH
40810: CALL_OW 275
40814: PUSH
40815: LD_VAR 0 4
40819: PUSH
40820: LD_INT 3
40822: ARRAY
40823: GREATEREQUAL
40824: AND
40825: ST_TO_ADDR
// end ;
40826: LD_VAR 0 3
40830: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40831: LD_INT 0
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
// pom := GetBase ( building ) ;
40837: LD_ADDR_VAR 0 3
40841: PUSH
40842: LD_VAR 0 1
40846: PPUSH
40847: CALL_OW 274
40851: ST_TO_ADDR
// if not pom then
40852: LD_VAR 0 3
40856: NOT
40857: IFFALSE 40861
// exit ;
40859: GO 41031
// btype := GetBType ( building ) ;
40861: LD_ADDR_VAR 0 5
40865: PUSH
40866: LD_VAR 0 1
40870: PPUSH
40871: CALL_OW 266
40875: ST_TO_ADDR
// if btype = b_armoury then
40876: LD_VAR 0 5
40880: PUSH
40881: LD_INT 4
40883: EQUAL
40884: IFFALSE 40894
// btype := b_barracks ;
40886: LD_ADDR_VAR 0 5
40890: PUSH
40891: LD_INT 5
40893: ST_TO_ADDR
// if btype = b_depot then
40894: LD_VAR 0 5
40898: PUSH
40899: LD_INT 0
40901: EQUAL
40902: IFFALSE 40912
// btype := b_warehouse ;
40904: LD_ADDR_VAR 0 5
40908: PUSH
40909: LD_INT 1
40911: ST_TO_ADDR
// if btype = b_workshop then
40912: LD_VAR 0 5
40916: PUSH
40917: LD_INT 2
40919: EQUAL
40920: IFFALSE 40930
// btype := b_factory ;
40922: LD_ADDR_VAR 0 5
40926: PUSH
40927: LD_INT 3
40929: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40930: LD_ADDR_VAR 0 4
40934: PUSH
40935: LD_VAR 0 5
40939: PPUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 248
40949: PPUSH
40950: CALL_OW 450
40954: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40955: LD_ADDR_VAR 0 2
40959: PUSH
40960: LD_VAR 0 3
40964: PPUSH
40965: LD_INT 1
40967: PPUSH
40968: CALL_OW 275
40972: PUSH
40973: LD_VAR 0 4
40977: PUSH
40978: LD_INT 1
40980: ARRAY
40981: GREATEREQUAL
40982: PUSH
40983: LD_VAR 0 3
40987: PPUSH
40988: LD_INT 2
40990: PPUSH
40991: CALL_OW 275
40995: PUSH
40996: LD_VAR 0 4
41000: PUSH
41001: LD_INT 2
41003: ARRAY
41004: GREATEREQUAL
41005: AND
41006: PUSH
41007: LD_VAR 0 3
41011: PPUSH
41012: LD_INT 3
41014: PPUSH
41015: CALL_OW 275
41019: PUSH
41020: LD_VAR 0 4
41024: PUSH
41025: LD_INT 3
41027: ARRAY
41028: GREATEREQUAL
41029: AND
41030: ST_TO_ADDR
// end ;
41031: LD_VAR 0 2
41035: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41036: LD_INT 0
41038: PPUSH
41039: PPUSH
41040: PPUSH
// pom := GetBase ( building ) ;
41041: LD_ADDR_VAR 0 4
41045: PUSH
41046: LD_VAR 0 1
41050: PPUSH
41051: CALL_OW 274
41055: ST_TO_ADDR
// if not pom then
41056: LD_VAR 0 4
41060: NOT
41061: IFFALSE 41065
// exit ;
41063: GO 41166
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41065: LD_ADDR_VAR 0 5
41069: PUSH
41070: LD_VAR 0 2
41074: PPUSH
41075: LD_VAR 0 1
41079: PPUSH
41080: CALL_OW 248
41084: PPUSH
41085: CALL_OW 450
41089: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41090: LD_ADDR_VAR 0 3
41094: PUSH
41095: LD_VAR 0 4
41099: PPUSH
41100: LD_INT 1
41102: PPUSH
41103: CALL_OW 275
41107: PUSH
41108: LD_VAR 0 5
41112: PUSH
41113: LD_INT 1
41115: ARRAY
41116: GREATEREQUAL
41117: PUSH
41118: LD_VAR 0 4
41122: PPUSH
41123: LD_INT 2
41125: PPUSH
41126: CALL_OW 275
41130: PUSH
41131: LD_VAR 0 5
41135: PUSH
41136: LD_INT 2
41138: ARRAY
41139: GREATEREQUAL
41140: AND
41141: PUSH
41142: LD_VAR 0 4
41146: PPUSH
41147: LD_INT 3
41149: PPUSH
41150: CALL_OW 275
41154: PUSH
41155: LD_VAR 0 5
41159: PUSH
41160: LD_INT 3
41162: ARRAY
41163: GREATEREQUAL
41164: AND
41165: ST_TO_ADDR
// end ;
41166: LD_VAR 0 3
41170: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41171: LD_INT 0
41173: PPUSH
41174: PPUSH
41175: PPUSH
41176: PPUSH
41177: PPUSH
41178: PPUSH
41179: PPUSH
41180: PPUSH
41181: PPUSH
41182: PPUSH
41183: PPUSH
// result := false ;
41184: LD_ADDR_VAR 0 8
41188: PUSH
41189: LD_INT 0
41191: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41192: LD_VAR 0 5
41196: NOT
41197: PUSH
41198: LD_VAR 0 1
41202: NOT
41203: OR
41204: PUSH
41205: LD_VAR 0 2
41209: NOT
41210: OR
41211: PUSH
41212: LD_VAR 0 3
41216: NOT
41217: OR
41218: IFFALSE 41222
// exit ;
41220: GO 42036
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41222: LD_ADDR_VAR 0 14
41226: PUSH
41227: LD_VAR 0 1
41231: PPUSH
41232: LD_VAR 0 2
41236: PPUSH
41237: LD_VAR 0 3
41241: PPUSH
41242: LD_VAR 0 4
41246: PPUSH
41247: LD_VAR 0 5
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: PPUSH
41256: CALL_OW 248
41260: PPUSH
41261: LD_INT 0
41263: PPUSH
41264: CALL 43273 0 6
41268: ST_TO_ADDR
// if not hexes then
41269: LD_VAR 0 14
41273: NOT
41274: IFFALSE 41278
// exit ;
41276: GO 42036
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41278: LD_ADDR_VAR 0 17
41282: PUSH
41283: LD_VAR 0 5
41287: PPUSH
41288: LD_INT 22
41290: PUSH
41291: LD_VAR 0 13
41295: PPUSH
41296: CALL_OW 255
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: LD_INT 30
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 30
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: LIST
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PPUSH
41337: CALL_OW 72
41341: ST_TO_ADDR
// for i = 1 to hexes do
41342: LD_ADDR_VAR 0 9
41346: PUSH
41347: DOUBLE
41348: LD_INT 1
41350: DEC
41351: ST_TO_ADDR
41352: LD_VAR 0 14
41356: PUSH
41357: FOR_TO
41358: IFFALSE 42034
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41360: LD_ADDR_VAR 0 13
41364: PUSH
41365: LD_VAR 0 14
41369: PUSH
41370: LD_VAR 0 9
41374: ARRAY
41375: PUSH
41376: LD_INT 1
41378: ARRAY
41379: PPUSH
41380: LD_VAR 0 14
41384: PUSH
41385: LD_VAR 0 9
41389: ARRAY
41390: PUSH
41391: LD_INT 2
41393: ARRAY
41394: PPUSH
41395: CALL_OW 428
41399: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41400: LD_VAR 0 14
41404: PUSH
41405: LD_VAR 0 9
41409: ARRAY
41410: PUSH
41411: LD_INT 1
41413: ARRAY
41414: PPUSH
41415: LD_VAR 0 14
41419: PUSH
41420: LD_VAR 0 9
41424: ARRAY
41425: PUSH
41426: LD_INT 2
41428: ARRAY
41429: PPUSH
41430: CALL_OW 351
41434: PUSH
41435: LD_VAR 0 14
41439: PUSH
41440: LD_VAR 0 9
41444: ARRAY
41445: PUSH
41446: LD_INT 1
41448: ARRAY
41449: PPUSH
41450: LD_VAR 0 14
41454: PUSH
41455: LD_VAR 0 9
41459: ARRAY
41460: PUSH
41461: LD_INT 2
41463: ARRAY
41464: PPUSH
41465: CALL_OW 488
41469: NOT
41470: OR
41471: PUSH
41472: LD_VAR 0 13
41476: PPUSH
41477: CALL_OW 247
41481: PUSH
41482: LD_INT 3
41484: EQUAL
41485: OR
41486: IFFALSE 41492
// exit ;
41488: POP
41489: POP
41490: GO 42036
// if not tmp then
41492: LD_VAR 0 13
41496: NOT
41497: IFFALSE 41501
// continue ;
41499: GO 41357
// result := true ;
41501: LD_ADDR_VAR 0 8
41505: PUSH
41506: LD_INT 1
41508: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41509: LD_VAR 0 6
41513: PUSH
41514: LD_VAR 0 13
41518: PPUSH
41519: CALL_OW 247
41523: PUSH
41524: LD_INT 2
41526: EQUAL
41527: AND
41528: PUSH
41529: LD_VAR 0 13
41533: PPUSH
41534: CALL_OW 263
41538: PUSH
41539: LD_INT 1
41541: EQUAL
41542: AND
41543: IFFALSE 41707
// begin if IsDrivenBy ( tmp ) then
41545: LD_VAR 0 13
41549: PPUSH
41550: CALL_OW 311
41554: IFFALSE 41558
// continue ;
41556: GO 41357
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41558: LD_VAR 0 6
41562: PPUSH
41563: LD_INT 3
41565: PUSH
41566: LD_INT 60
41568: PUSH
41569: EMPTY
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 3
41578: PUSH
41579: LD_INT 55
41581: PUSH
41582: EMPTY
41583: LIST
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PPUSH
41593: CALL_OW 72
41597: IFFALSE 41705
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41599: LD_ADDR_VAR 0 18
41603: PUSH
41604: LD_VAR 0 6
41608: PPUSH
41609: LD_INT 3
41611: PUSH
41612: LD_INT 60
41614: PUSH
41615: EMPTY
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 3
41624: PUSH
41625: LD_INT 55
41627: PUSH
41628: EMPTY
41629: LIST
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PPUSH
41639: CALL_OW 72
41643: PUSH
41644: LD_INT 1
41646: ARRAY
41647: ST_TO_ADDR
// if IsInUnit ( driver ) then
41648: LD_VAR 0 18
41652: PPUSH
41653: CALL_OW 310
41657: IFFALSE 41668
// ComExit ( driver ) ;
41659: LD_VAR 0 18
41663: PPUSH
41664: CALL 66457 0 1
// AddComEnterUnit ( driver , tmp ) ;
41668: LD_VAR 0 18
41672: PPUSH
41673: LD_VAR 0 13
41677: PPUSH
41678: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41682: LD_VAR 0 18
41686: PPUSH
41687: LD_VAR 0 7
41691: PPUSH
41692: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41696: LD_VAR 0 18
41700: PPUSH
41701: CALL_OW 181
// end ; continue ;
41705: GO 41357
// end ; if not cleaners or not tmp in cleaners then
41707: LD_VAR 0 6
41711: NOT
41712: PUSH
41713: LD_VAR 0 13
41717: PUSH
41718: LD_VAR 0 6
41722: IN
41723: NOT
41724: OR
41725: IFFALSE 42032
// begin if dep then
41727: LD_VAR 0 17
41731: IFFALSE 41867
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41733: LD_ADDR_VAR 0 16
41737: PUSH
41738: LD_VAR 0 17
41742: PUSH
41743: LD_INT 1
41745: ARRAY
41746: PPUSH
41747: CALL_OW 250
41751: PPUSH
41752: LD_VAR 0 17
41756: PUSH
41757: LD_INT 1
41759: ARRAY
41760: PPUSH
41761: CALL_OW 254
41765: PPUSH
41766: LD_INT 5
41768: PPUSH
41769: CALL_OW 272
41773: PUSH
41774: LD_VAR 0 17
41778: PUSH
41779: LD_INT 1
41781: ARRAY
41782: PPUSH
41783: CALL_OW 251
41787: PPUSH
41788: LD_VAR 0 17
41792: PUSH
41793: LD_INT 1
41795: ARRAY
41796: PPUSH
41797: CALL_OW 254
41801: PPUSH
41802: LD_INT 5
41804: PPUSH
41805: CALL_OW 273
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41814: LD_VAR 0 16
41818: PUSH
41819: LD_INT 1
41821: ARRAY
41822: PPUSH
41823: LD_VAR 0 16
41827: PUSH
41828: LD_INT 2
41830: ARRAY
41831: PPUSH
41832: CALL_OW 488
41836: IFFALSE 41867
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41838: LD_VAR 0 13
41842: PPUSH
41843: LD_VAR 0 16
41847: PUSH
41848: LD_INT 1
41850: ARRAY
41851: PPUSH
41852: LD_VAR 0 16
41856: PUSH
41857: LD_INT 2
41859: ARRAY
41860: PPUSH
41861: CALL_OW 111
// continue ;
41865: GO 41357
// end ; end ; r := GetDir ( tmp ) ;
41867: LD_ADDR_VAR 0 15
41871: PUSH
41872: LD_VAR 0 13
41876: PPUSH
41877: CALL_OW 254
41881: ST_TO_ADDR
// if r = 5 then
41882: LD_VAR 0 15
41886: PUSH
41887: LD_INT 5
41889: EQUAL
41890: IFFALSE 41900
// r := 0 ;
41892: LD_ADDR_VAR 0 15
41896: PUSH
41897: LD_INT 0
41899: ST_TO_ADDR
// for j = r to 5 do
41900: LD_ADDR_VAR 0 10
41904: PUSH
41905: DOUBLE
41906: LD_VAR 0 15
41910: DEC
41911: ST_TO_ADDR
41912: LD_INT 5
41914: PUSH
41915: FOR_TO
41916: IFFALSE 42030
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41918: LD_ADDR_VAR 0 11
41922: PUSH
41923: LD_VAR 0 13
41927: PPUSH
41928: CALL_OW 250
41932: PPUSH
41933: LD_VAR 0 10
41937: PPUSH
41938: LD_INT 2
41940: PPUSH
41941: CALL_OW 272
41945: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41946: LD_ADDR_VAR 0 12
41950: PUSH
41951: LD_VAR 0 13
41955: PPUSH
41956: CALL_OW 251
41960: PPUSH
41961: LD_VAR 0 10
41965: PPUSH
41966: LD_INT 2
41968: PPUSH
41969: CALL_OW 273
41973: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41974: LD_VAR 0 11
41978: PPUSH
41979: LD_VAR 0 12
41983: PPUSH
41984: CALL_OW 488
41988: PUSH
41989: LD_VAR 0 11
41993: PPUSH
41994: LD_VAR 0 12
41998: PPUSH
41999: CALL_OW 428
42003: NOT
42004: AND
42005: IFFALSE 42028
// begin ComMoveXY ( tmp , _x , _y ) ;
42007: LD_VAR 0 13
42011: PPUSH
42012: LD_VAR 0 11
42016: PPUSH
42017: LD_VAR 0 12
42021: PPUSH
42022: CALL_OW 111
// break ;
42026: GO 42030
// end ; end ;
42028: GO 41915
42030: POP
42031: POP
// end ; end ;
42032: GO 41357
42034: POP
42035: POP
// end ;
42036: LD_VAR 0 8
42040: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42041: LD_INT 0
42043: PPUSH
// result := true ;
42044: LD_ADDR_VAR 0 3
42048: PUSH
42049: LD_INT 1
42051: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42052: LD_VAR 0 2
42056: PUSH
42057: LD_INT 24
42059: DOUBLE
42060: EQUAL
42061: IFTRUE 42071
42063: LD_INT 33
42065: DOUBLE
42066: EQUAL
42067: IFTRUE 42071
42069: GO 42096
42071: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42072: LD_ADDR_VAR 0 3
42076: PUSH
42077: LD_INT 32
42079: PPUSH
42080: LD_VAR 0 1
42084: PPUSH
42085: CALL_OW 321
42089: PUSH
42090: LD_INT 2
42092: EQUAL
42093: ST_TO_ADDR
42094: GO 42416
42096: LD_INT 20
42098: DOUBLE
42099: EQUAL
42100: IFTRUE 42104
42102: GO 42129
42104: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42105: LD_ADDR_VAR 0 3
42109: PUSH
42110: LD_INT 6
42112: PPUSH
42113: LD_VAR 0 1
42117: PPUSH
42118: CALL_OW 321
42122: PUSH
42123: LD_INT 2
42125: EQUAL
42126: ST_TO_ADDR
42127: GO 42416
42129: LD_INT 22
42131: DOUBLE
42132: EQUAL
42133: IFTRUE 42143
42135: LD_INT 36
42137: DOUBLE
42138: EQUAL
42139: IFTRUE 42143
42141: GO 42168
42143: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42144: LD_ADDR_VAR 0 3
42148: PUSH
42149: LD_INT 15
42151: PPUSH
42152: LD_VAR 0 1
42156: PPUSH
42157: CALL_OW 321
42161: PUSH
42162: LD_INT 2
42164: EQUAL
42165: ST_TO_ADDR
42166: GO 42416
42168: LD_INT 30
42170: DOUBLE
42171: EQUAL
42172: IFTRUE 42176
42174: GO 42201
42176: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_INT 20
42184: PPUSH
42185: LD_VAR 0 1
42189: PPUSH
42190: CALL_OW 321
42194: PUSH
42195: LD_INT 2
42197: EQUAL
42198: ST_TO_ADDR
42199: GO 42416
42201: LD_INT 28
42203: DOUBLE
42204: EQUAL
42205: IFTRUE 42215
42207: LD_INT 21
42209: DOUBLE
42210: EQUAL
42211: IFTRUE 42215
42213: GO 42240
42215: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42216: LD_ADDR_VAR 0 3
42220: PUSH
42221: LD_INT 21
42223: PPUSH
42224: LD_VAR 0 1
42228: PPUSH
42229: CALL_OW 321
42233: PUSH
42234: LD_INT 2
42236: EQUAL
42237: ST_TO_ADDR
42238: GO 42416
42240: LD_INT 16
42242: DOUBLE
42243: EQUAL
42244: IFTRUE 42248
42246: GO 42275
42248: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42249: LD_ADDR_VAR 0 3
42253: PUSH
42254: LD_EXP 33
42258: PPUSH
42259: LD_VAR 0 1
42263: PPUSH
42264: CALL_OW 321
42268: PUSH
42269: LD_INT 2
42271: EQUAL
42272: ST_TO_ADDR
42273: GO 42416
42275: LD_INT 19
42277: DOUBLE
42278: EQUAL
42279: IFTRUE 42289
42281: LD_INT 23
42283: DOUBLE
42284: EQUAL
42285: IFTRUE 42289
42287: GO 42316
42289: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42290: LD_ADDR_VAR 0 3
42294: PUSH
42295: LD_EXP 32
42299: PPUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 321
42309: PUSH
42310: LD_INT 2
42312: EQUAL
42313: ST_TO_ADDR
42314: GO 42416
42316: LD_INT 17
42318: DOUBLE
42319: EQUAL
42320: IFTRUE 42324
42322: GO 42349
42324: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42325: LD_ADDR_VAR 0 3
42329: PUSH
42330: LD_INT 39
42332: PPUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: CALL_OW 321
42342: PUSH
42343: LD_INT 2
42345: EQUAL
42346: ST_TO_ADDR
42347: GO 42416
42349: LD_INT 18
42351: DOUBLE
42352: EQUAL
42353: IFTRUE 42357
42355: GO 42382
42357: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42358: LD_ADDR_VAR 0 3
42362: PUSH
42363: LD_INT 40
42365: PPUSH
42366: LD_VAR 0 1
42370: PPUSH
42371: CALL_OW 321
42375: PUSH
42376: LD_INT 2
42378: EQUAL
42379: ST_TO_ADDR
42380: GO 42416
42382: LD_INT 27
42384: DOUBLE
42385: EQUAL
42386: IFTRUE 42390
42388: GO 42415
42390: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42391: LD_ADDR_VAR 0 3
42395: PUSH
42396: LD_INT 35
42398: PPUSH
42399: LD_VAR 0 1
42403: PPUSH
42404: CALL_OW 321
42408: PUSH
42409: LD_INT 2
42411: EQUAL
42412: ST_TO_ADDR
42413: GO 42416
42415: POP
// end ;
42416: LD_VAR 0 3
42420: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42421: LD_INT 0
42423: PPUSH
42424: PPUSH
42425: PPUSH
42426: PPUSH
42427: PPUSH
42428: PPUSH
42429: PPUSH
42430: PPUSH
42431: PPUSH
42432: PPUSH
42433: PPUSH
// result := false ;
42434: LD_ADDR_VAR 0 6
42438: PUSH
42439: LD_INT 0
42441: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42442: LD_VAR 0 1
42446: NOT
42447: PUSH
42448: LD_VAR 0 1
42452: PPUSH
42453: CALL_OW 266
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: IN
42468: NOT
42469: OR
42470: PUSH
42471: LD_VAR 0 2
42475: NOT
42476: OR
42477: PUSH
42478: LD_VAR 0 5
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: LD_INT 2
42491: PUSH
42492: LD_INT 3
42494: PUSH
42495: LD_INT 4
42497: PUSH
42498: LD_INT 5
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: IN
42509: NOT
42510: OR
42511: PUSH
42512: LD_VAR 0 3
42516: PPUSH
42517: LD_VAR 0 4
42521: PPUSH
42522: CALL_OW 488
42526: NOT
42527: OR
42528: IFFALSE 42532
// exit ;
42530: GO 43268
// side := GetSide ( depot ) ;
42532: LD_ADDR_VAR 0 9
42536: PUSH
42537: LD_VAR 0 1
42541: PPUSH
42542: CALL_OW 255
42546: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42547: LD_VAR 0 9
42551: PPUSH
42552: LD_VAR 0 2
42556: PPUSH
42557: CALL 42041 0 2
42561: NOT
42562: IFFALSE 42566
// exit ;
42564: GO 43268
// pom := GetBase ( depot ) ;
42566: LD_ADDR_VAR 0 10
42570: PUSH
42571: LD_VAR 0 1
42575: PPUSH
42576: CALL_OW 274
42580: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42581: LD_ADDR_VAR 0 11
42585: PUSH
42586: LD_VAR 0 2
42590: PPUSH
42591: LD_VAR 0 1
42595: PPUSH
42596: CALL_OW 248
42600: PPUSH
42601: CALL_OW 450
42605: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42606: LD_VAR 0 10
42610: PPUSH
42611: LD_INT 1
42613: PPUSH
42614: CALL_OW 275
42618: PUSH
42619: LD_VAR 0 11
42623: PUSH
42624: LD_INT 1
42626: ARRAY
42627: GREATEREQUAL
42628: PUSH
42629: LD_VAR 0 10
42633: PPUSH
42634: LD_INT 2
42636: PPUSH
42637: CALL_OW 275
42641: PUSH
42642: LD_VAR 0 11
42646: PUSH
42647: LD_INT 2
42649: ARRAY
42650: GREATEREQUAL
42651: AND
42652: PUSH
42653: LD_VAR 0 10
42657: PPUSH
42658: LD_INT 3
42660: PPUSH
42661: CALL_OW 275
42665: PUSH
42666: LD_VAR 0 11
42670: PUSH
42671: LD_INT 3
42673: ARRAY
42674: GREATEREQUAL
42675: AND
42676: NOT
42677: IFFALSE 42681
// exit ;
42679: GO 43268
// if GetBType ( depot ) = b_depot then
42681: LD_VAR 0 1
42685: PPUSH
42686: CALL_OW 266
42690: PUSH
42691: LD_INT 0
42693: EQUAL
42694: IFFALSE 42706
// dist := 28 else
42696: LD_ADDR_VAR 0 14
42700: PUSH
42701: LD_INT 28
42703: ST_TO_ADDR
42704: GO 42714
// dist := 36 ;
42706: LD_ADDR_VAR 0 14
42710: PUSH
42711: LD_INT 36
42713: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42714: LD_VAR 0 1
42718: PPUSH
42719: LD_VAR 0 3
42723: PPUSH
42724: LD_VAR 0 4
42728: PPUSH
42729: CALL_OW 297
42733: PUSH
42734: LD_VAR 0 14
42738: GREATER
42739: IFFALSE 42743
// exit ;
42741: GO 43268
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42743: LD_ADDR_VAR 0 12
42747: PUSH
42748: LD_VAR 0 2
42752: PPUSH
42753: LD_VAR 0 3
42757: PPUSH
42758: LD_VAR 0 4
42762: PPUSH
42763: LD_VAR 0 5
42767: PPUSH
42768: LD_VAR 0 1
42772: PPUSH
42773: CALL_OW 248
42777: PPUSH
42778: LD_INT 0
42780: PPUSH
42781: CALL 43273 0 6
42785: ST_TO_ADDR
// if not hexes then
42786: LD_VAR 0 12
42790: NOT
42791: IFFALSE 42795
// exit ;
42793: GO 43268
// hex := GetHexInfo ( x , y ) ;
42795: LD_ADDR_VAR 0 15
42799: PUSH
42800: LD_VAR 0 3
42804: PPUSH
42805: LD_VAR 0 4
42809: PPUSH
42810: CALL_OW 546
42814: ST_TO_ADDR
// if hex [ 1 ] then
42815: LD_VAR 0 15
42819: PUSH
42820: LD_INT 1
42822: ARRAY
42823: IFFALSE 42827
// exit ;
42825: GO 43268
// height := hex [ 2 ] ;
42827: LD_ADDR_VAR 0 13
42831: PUSH
42832: LD_VAR 0 15
42836: PUSH
42837: LD_INT 2
42839: ARRAY
42840: ST_TO_ADDR
// for i = 1 to hexes do
42841: LD_ADDR_VAR 0 7
42845: PUSH
42846: DOUBLE
42847: LD_INT 1
42849: DEC
42850: ST_TO_ADDR
42851: LD_VAR 0 12
42855: PUSH
42856: FOR_TO
42857: IFFALSE 43187
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42859: LD_VAR 0 12
42863: PUSH
42864: LD_VAR 0 7
42868: ARRAY
42869: PUSH
42870: LD_INT 1
42872: ARRAY
42873: PPUSH
42874: LD_VAR 0 12
42878: PUSH
42879: LD_VAR 0 7
42883: ARRAY
42884: PUSH
42885: LD_INT 2
42887: ARRAY
42888: PPUSH
42889: CALL_OW 488
42893: NOT
42894: PUSH
42895: LD_VAR 0 12
42899: PUSH
42900: LD_VAR 0 7
42904: ARRAY
42905: PUSH
42906: LD_INT 1
42908: ARRAY
42909: PPUSH
42910: LD_VAR 0 12
42914: PUSH
42915: LD_VAR 0 7
42919: ARRAY
42920: PUSH
42921: LD_INT 2
42923: ARRAY
42924: PPUSH
42925: CALL_OW 428
42929: PUSH
42930: LD_INT 0
42932: GREATER
42933: OR
42934: PUSH
42935: LD_VAR 0 12
42939: PUSH
42940: LD_VAR 0 7
42944: ARRAY
42945: PUSH
42946: LD_INT 1
42948: ARRAY
42949: PPUSH
42950: LD_VAR 0 12
42954: PUSH
42955: LD_VAR 0 7
42959: ARRAY
42960: PUSH
42961: LD_INT 2
42963: ARRAY
42964: PPUSH
42965: CALL_OW 351
42969: OR
42970: IFFALSE 42976
// exit ;
42972: POP
42973: POP
42974: GO 43268
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42976: LD_ADDR_VAR 0 8
42980: PUSH
42981: LD_VAR 0 12
42985: PUSH
42986: LD_VAR 0 7
42990: ARRAY
42991: PUSH
42992: LD_INT 1
42994: ARRAY
42995: PPUSH
42996: LD_VAR 0 12
43000: PUSH
43001: LD_VAR 0 7
43005: ARRAY
43006: PUSH
43007: LD_INT 2
43009: ARRAY
43010: PPUSH
43011: CALL_OW 546
43015: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43016: LD_VAR 0 8
43020: PUSH
43021: LD_INT 1
43023: ARRAY
43024: PUSH
43025: LD_VAR 0 8
43029: PUSH
43030: LD_INT 2
43032: ARRAY
43033: PUSH
43034: LD_VAR 0 13
43038: PUSH
43039: LD_INT 2
43041: PLUS
43042: GREATER
43043: OR
43044: PUSH
43045: LD_VAR 0 8
43049: PUSH
43050: LD_INT 2
43052: ARRAY
43053: PUSH
43054: LD_VAR 0 13
43058: PUSH
43059: LD_INT 2
43061: MINUS
43062: LESS
43063: OR
43064: PUSH
43065: LD_VAR 0 8
43069: PUSH
43070: LD_INT 3
43072: ARRAY
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 8
43079: PUSH
43080: LD_INT 9
43082: PUSH
43083: LD_INT 10
43085: PUSH
43086: LD_INT 11
43088: PUSH
43089: LD_INT 12
43091: PUSH
43092: LD_INT 13
43094: PUSH
43095: LD_INT 16
43097: PUSH
43098: LD_INT 17
43100: PUSH
43101: LD_INT 18
43103: PUSH
43104: LD_INT 19
43106: PUSH
43107: LD_INT 20
43109: PUSH
43110: LD_INT 21
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: IN
43128: NOT
43129: OR
43130: PUSH
43131: LD_VAR 0 8
43135: PUSH
43136: LD_INT 5
43138: ARRAY
43139: NOT
43140: OR
43141: PUSH
43142: LD_VAR 0 8
43146: PUSH
43147: LD_INT 6
43149: ARRAY
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 7
43159: PUSH
43160: LD_INT 9
43162: PUSH
43163: LD_INT 10
43165: PUSH
43166: LD_INT 11
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: IN
43177: NOT
43178: OR
43179: IFFALSE 43185
// exit ;
43181: POP
43182: POP
43183: GO 43268
// end ;
43185: GO 42856
43187: POP
43188: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43189: LD_VAR 0 9
43193: PPUSH
43194: LD_VAR 0 3
43198: PPUSH
43199: LD_VAR 0 4
43203: PPUSH
43204: LD_INT 20
43206: PPUSH
43207: CALL 35214 0 4
43211: PUSH
43212: LD_INT 4
43214: ARRAY
43215: IFFALSE 43219
// exit ;
43217: GO 43268
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43219: LD_VAR 0 2
43223: PUSH
43224: LD_INT 29
43226: PUSH
43227: LD_INT 30
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: IN
43234: PUSH
43235: LD_VAR 0 3
43239: PPUSH
43240: LD_VAR 0 4
43244: PPUSH
43245: LD_VAR 0 9
43249: PPUSH
43250: CALL_OW 440
43254: NOT
43255: AND
43256: IFFALSE 43260
// exit ;
43258: GO 43268
// result := true ;
43260: LD_ADDR_VAR 0 6
43264: PUSH
43265: LD_INT 1
43267: ST_TO_ADDR
// end ;
43268: LD_VAR 0 6
43272: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43273: LD_INT 0
43275: PPUSH
43276: PPUSH
43277: PPUSH
43278: PPUSH
43279: PPUSH
43280: PPUSH
43281: PPUSH
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
43287: PPUSH
43288: PPUSH
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
43293: PPUSH
43294: PPUSH
43295: PPUSH
43296: PPUSH
43297: PPUSH
43298: PPUSH
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
43303: PPUSH
43304: PPUSH
43305: PPUSH
43306: PPUSH
43307: PPUSH
43308: PPUSH
43309: PPUSH
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
43315: PPUSH
43316: PPUSH
43317: PPUSH
43318: PPUSH
43319: PPUSH
43320: PPUSH
43321: PPUSH
43322: PPUSH
43323: PPUSH
43324: PPUSH
43325: PPUSH
43326: PPUSH
43327: PPUSH
43328: PPUSH
43329: PPUSH
43330: PPUSH
43331: PPUSH
43332: PPUSH
// result = [ ] ;
43333: LD_ADDR_VAR 0 7
43337: PUSH
43338: EMPTY
43339: ST_TO_ADDR
// temp_list = [ ] ;
43340: LD_ADDR_VAR 0 9
43344: PUSH
43345: EMPTY
43346: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43347: LD_VAR 0 4
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: LD_INT 4
43366: PUSH
43367: LD_INT 5
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: IN
43378: NOT
43379: PUSH
43380: LD_VAR 0 1
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: IN
43395: PUSH
43396: LD_VAR 0 5
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: LD_INT 3
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: LIST
43414: IN
43415: NOT
43416: AND
43417: OR
43418: IFFALSE 43422
// exit ;
43420: GO 61813
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43422: LD_VAR 0 1
43426: PUSH
43427: LD_INT 6
43429: PUSH
43430: LD_INT 7
43432: PUSH
43433: LD_INT 8
43435: PUSH
43436: LD_INT 13
43438: PUSH
43439: LD_INT 12
43441: PUSH
43442: LD_INT 15
43444: PUSH
43445: LD_INT 11
43447: PUSH
43448: LD_INT 14
43450: PUSH
43451: LD_INT 10
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: IN
43465: IFFALSE 43475
// btype = b_lab ;
43467: LD_ADDR_VAR 0 1
43471: PUSH
43472: LD_INT 6
43474: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43475: LD_VAR 0 6
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: IN
43494: NOT
43495: PUSH
43496: LD_VAR 0 1
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: LD_INT 6
43515: PUSH
43516: LD_INT 36
43518: PUSH
43519: LD_INT 4
43521: PUSH
43522: LD_INT 5
43524: PUSH
43525: LD_INT 31
43527: PUSH
43528: LD_INT 32
43530: PUSH
43531: LD_INT 33
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: IN
43547: NOT
43548: PUSH
43549: LD_VAR 0 6
43553: PUSH
43554: LD_INT 1
43556: EQUAL
43557: AND
43558: OR
43559: PUSH
43560: LD_VAR 0 1
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: IN
43575: NOT
43576: PUSH
43577: LD_VAR 0 6
43581: PUSH
43582: LD_INT 2
43584: EQUAL
43585: AND
43586: OR
43587: IFFALSE 43597
// mode = 0 ;
43589: LD_ADDR_VAR 0 6
43593: PUSH
43594: LD_INT 0
43596: ST_TO_ADDR
// case mode of 0 :
43597: LD_VAR 0 6
43601: PUSH
43602: LD_INT 0
43604: DOUBLE
43605: EQUAL
43606: IFTRUE 43610
43608: GO 55063
43610: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43611: LD_ADDR_VAR 0 11
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: LD_INT 3
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: LD_INT 3
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43804: LD_ADDR_VAR 0 12
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 2
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 3
43961: NEG
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 3
43972: NEG
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44000: LD_ADDR_VAR 0 13
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: LD_INT 2
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 3
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 3
44159: NEG
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 3
44171: NEG
44172: PUSH
44173: LD_INT 3
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44199: LD_ADDR_VAR 0 14
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 2
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 2
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 3
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: LD_INT 3
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44395: LD_ADDR_VAR 0 15
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 3
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 3
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44588: LD_ADDR_VAR 0 16
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 3
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 3
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: LD_INT 3
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44781: LD_ADDR_VAR 0 17
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45011: LD_ADDR_VAR 0 18
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45241: LD_ADDR_VAR 0 19
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45471: LD_ADDR_VAR 0 20
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: NEG
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45701: LD_ADDR_VAR 0 21
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: LD_INT 2
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 2
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45931: LD_ADDR_VAR 0 22
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46161: LD_ADDR_VAR 0 23
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: LD_INT 3
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: LD_INT 3
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46441: LD_ADDR_VAR 0 24
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 3
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46717: LD_ADDR_VAR 0 25
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 3
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 3
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: LD_INT 3
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 3
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46991: LD_ADDR_VAR 0 26
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 3
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47267: LD_ADDR_VAR 0 27
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 3
47500: NEG
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: NEG
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47547: LD_ADDR_VAR 0 28
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 2
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: LD_INT 3
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: LD_INT 3
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47829: LD_ADDR_VAR 0 29
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: LD_INT 3
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 3
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 3
48073: NEG
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48108: LD_ADDR_VAR 0 30
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 3
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 3
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 3
48351: NEG
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48386: LD_ADDR_VAR 0 31
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 3
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 3
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 3
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 3
48629: NEG
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48664: LD_ADDR_VAR 0 32
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 3
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 3
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 3
48907: NEG
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48942: LD_ADDR_VAR 0 33
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: LD_INT 3
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 3
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 3
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 3
49186: NEG
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49221: LD_ADDR_VAR 0 34
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 2
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 3
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 2
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 3
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 3
49466: NEG
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49501: LD_ADDR_VAR 0 35
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49613: LD_ADDR_VAR 0 36
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49725: LD_ADDR_VAR 0 37
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49837: LD_ADDR_VAR 0 38
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49949: LD_ADDR_VAR 0 39
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50061: LD_ADDR_VAR 0 40
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50173: LD_ADDR_VAR 0 41
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 3
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 3
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 3
50416: PUSH
50417: LD_INT 3
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: LD_INT 3
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: NEG
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: NEG
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 3
50470: NEG
50471: PUSH
50472: LD_INT 2
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50523: LD_ADDR_VAR 0 42
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: LD_INT 3
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 3
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: LD_INT 3
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: LD_INT 2
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: LD_INT 3
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 3
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 3
50820: NEG
50821: PUSH
50822: LD_INT 2
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 3
50832: NEG
50833: PUSH
50834: LD_INT 3
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50873: LD_ADDR_VAR 0 43
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 3
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 3
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 3
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 3
51169: NEG
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51221: LD_ADDR_VAR 0 44
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: LD_INT 3
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 3
51464: PUSH
51465: LD_INT 3
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: LD_INT 3
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 3
51495: NEG
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 3
51506: NEG
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 3
51518: NEG
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 3
51530: NEG
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51571: LD_ADDR_VAR 0 45
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 3
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 3
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 3
51817: PUSH
51818: LD_INT 3
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: LD_INT 3
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 3
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 3
51868: NEG
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 3
51880: NEG
51881: PUSH
51882: LD_INT 3
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51921: LD_ADDR_VAR 0 46
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52269: LD_ADDR_VAR 0 47
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52420: LD_ADDR_VAR 0 48
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52567: LD_ADDR_VAR 0 49
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52711: LD_ADDR_VAR 0 50
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52855: LD_ADDR_VAR 0 51
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53002: LD_ADDR_VAR 0 52
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53153: LD_ADDR_VAR 0 53
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: NEG
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: NEG
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53383: LD_ADDR_VAR 0 54
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 2
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53613: LD_ADDR_VAR 0 55
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: LD_INT 2
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53843: LD_ADDR_VAR 0 56
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54073: LD_ADDR_VAR 0 57
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 2
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54303: LD_ADDR_VAR 0 58
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54533: LD_ADDR_VAR 0 59
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54621: LD_ADDR_VAR 0 60
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54709: LD_ADDR_VAR 0 61
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54797: LD_ADDR_VAR 0 62
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54885: LD_ADDR_VAR 0 63
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54973: LD_ADDR_VAR 0 64
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: ST_TO_ADDR
// end ; 1 :
55061: GO 60958
55063: LD_INT 1
55065: DOUBLE
55066: EQUAL
55067: IFTRUE 55071
55069: GO 57694
55071: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55072: LD_ADDR_VAR 0 11
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55116: LD_ADDR_VAR 0 12
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55157: LD_ADDR_VAR 0 13
55161: PUSH
55162: LD_INT 3
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55197: LD_ADDR_VAR 0 14
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 3
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 3
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55238: LD_ADDR_VAR 0 15
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 3
55256: NEG
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 3
55267: NEG
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: LIST
55281: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55282: LD_ADDR_VAR 0 16
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 3
55301: NEG
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 3
55313: NEG
55314: PUSH
55315: LD_INT 3
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: LIST
55327: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55328: LD_ADDR_VAR 0 17
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 3
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 3
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55372: LD_ADDR_VAR 0 18
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: LIST
55412: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55413: LD_ADDR_VAR 0 19
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 3
55430: PUSH
55431: LD_INT 3
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 3
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: LIST
55452: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55453: LD_ADDR_VAR 0 20
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55494: LD_ADDR_VAR 0 21
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: NEG
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 3
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: LIST
55537: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55538: LD_ADDR_VAR 0 22
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: LD_INT 3
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 3
55557: NEG
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 3
55569: NEG
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: LIST
55583: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55584: LD_ADDR_VAR 0 23
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: LD_INT 3
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 4
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: LIST
55627: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55628: LD_ADDR_VAR 0 24
55632: PUSH
55633: LD_INT 3
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 3
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 4
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55669: LD_ADDR_VAR 0 25
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 4
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 3
55696: PUSH
55697: LD_INT 4
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55709: LD_ADDR_VAR 0 26
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 3
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: LD_INT 4
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 3
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55750: LD_ADDR_VAR 0 27
55754: PUSH
55755: LD_INT 3
55757: NEG
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 3
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 4
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55794: LD_ADDR_VAR 0 28
55798: PUSH
55799: LD_INT 3
55801: NEG
55802: PUSH
55803: LD_INT 3
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 3
55813: NEG
55814: PUSH
55815: LD_INT 4
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 4
55825: NEG
55826: PUSH
55827: LD_INT 3
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: LIST
55839: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55840: LD_ADDR_VAR 0 29
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: LD_INT 3
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: LD_INT 3
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: LD_INT 4
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 4
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: LD_INT 3
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: LD_INT 5
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 5
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 4
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: LD_INT 6
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 6
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 5
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55995: LD_ADDR_VAR 0 30
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 3
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 4
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 4
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 5
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 5
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 5
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 6
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 6
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56138: LD_ADDR_VAR 0 31
56142: PUSH
56143: LD_INT 3
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 3
56155: PUSH
56156: LD_INT 3
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: LD_INT 3
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 4
56175: PUSH
56176: LD_INT 3
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 4
56185: PUSH
56186: LD_INT 4
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 3
56195: PUSH
56196: LD_INT 4
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 5
56205: PUSH
56206: LD_INT 4
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 5
56215: PUSH
56216: LD_INT 5
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 4
56225: PUSH
56226: LD_INT 5
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 6
56235: PUSH
56236: LD_INT 5
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 6
56245: PUSH
56246: LD_INT 6
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 5
56255: PUSH
56256: LD_INT 6
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56277: LD_ADDR_VAR 0 32
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 4
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 4
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 5
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 5
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 4
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: LD_INT 6
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 6
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: LD_INT 5
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56420: LD_ADDR_VAR 0 33
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 3
56438: NEG
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 3
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: NEG
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 4
56472: NEG
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 4
56483: NEG
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 4
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 5
56506: NEG
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 5
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 5
56529: NEG
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 6
56540: NEG
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 6
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56575: LD_ADDR_VAR 0 34
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: LD_INT 3
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: LD_INT 4
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 4
56630: NEG
56631: PUSH
56632: LD_INT 3
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 4
56642: NEG
56643: PUSH
56644: LD_INT 4
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 4
56654: NEG
56655: PUSH
56656: LD_INT 5
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 5
56666: NEG
56667: PUSH
56668: LD_INT 4
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 5
56678: NEG
56679: PUSH
56680: LD_INT 5
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 5
56690: NEG
56691: PUSH
56692: LD_INT 6
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 6
56702: NEG
56703: PUSH
56704: LD_INT 5
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 6
56714: NEG
56715: PUSH
56716: LD_INT 6
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56738: LD_ADDR_VAR 0 41
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56782: LD_ADDR_VAR 0 42
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: LIST
56822: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56823: LD_ADDR_VAR 0 43
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 3
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: LIST
56862: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56863: LD_ADDR_VAR 0 44
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: LD_INT 3
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56904: LD_ADDR_VAR 0 45
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: LIST
56947: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56948: LD_ADDR_VAR 0 46
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 3
56979: NEG
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: LIST
56993: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56994: LD_ADDR_VAR 0 47
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: LD_INT 3
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57027: LD_ADDR_VAR 0 48
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57058: LD_ADDR_VAR 0 49
57062: PUSH
57063: LD_INT 3
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 3
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57087: LD_ADDR_VAR 0 50
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57116: LD_ADDR_VAR 0 51
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57147: LD_ADDR_VAR 0 52
57151: PUSH
57152: LD_INT 3
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 3
57166: NEG
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57180: LD_ADDR_VAR 0 53
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: LD_INT 3
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: LD_INT 2
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57224: LD_ADDR_VAR 0 54
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 3
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: LIST
57264: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57265: LD_ADDR_VAR 0 55
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57305: LD_ADDR_VAR 0 56
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: LIST
57345: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57346: LD_ADDR_VAR 0 57
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57390: LD_ADDR_VAR 0 58
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: LD_INT 3
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: NEG
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: NEG
57422: PUSH
57423: LD_INT 3
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57436: LD_ADDR_VAR 0 59
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57480: LD_ADDR_VAR 0 60
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57521: LD_ADDR_VAR 0 61
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 2
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: LIST
57560: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57561: LD_ADDR_VAR 0 62
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: LIST
57601: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57602: LD_ADDR_VAR 0 63
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57646: LD_ADDR_VAR 0 64
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: LD_INT 2
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: LIST
57691: ST_TO_ADDR
// end ; 2 :
57692: GO 60958
57694: LD_INT 2
57696: DOUBLE
57697: EQUAL
57698: IFTRUE 57702
57700: GO 60957
57702: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57703: LD_ADDR_VAR 0 29
57707: PUSH
57708: LD_INT 4
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 4
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 5
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 5
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 4
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 3
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 5
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 3
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 3
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 4
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 4
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: LD_INT 4
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 4
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 4
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 4
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 3
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 4
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 5
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 5
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 4
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: LD_INT 5
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: LD_INT 3
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: NEG
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 4
58042: NEG
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 4
58053: NEG
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 4
58065: NEG
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 4
58088: NEG
58089: PUSH
58090: LD_INT 4
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 4
58100: NEG
58101: PUSH
58102: LD_INT 5
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 3
58112: NEG
58113: PUSH
58114: LD_INT 4
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: LD_INT 3
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 4
58136: NEG
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 5
58148: NEG
58149: PUSH
58150: LD_INT 4
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 5
58160: NEG
58161: PUSH
58162: LD_INT 5
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: LD_INT 5
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 5
58184: NEG
58185: PUSH
58186: LD_INT 3
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58241: LD_ADDR_VAR 0 30
58245: PUSH
58246: LD_INT 4
58248: PUSH
58249: LD_INT 4
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 4
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 5
58268: PUSH
58269: LD_INT 4
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 5
58278: PUSH
58279: LD_INT 5
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 4
58288: PUSH
58289: LD_INT 5
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: PUSH
58299: LD_INT 4
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 5
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 3
58328: PUSH
58329: LD_INT 5
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 2
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 3
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 4
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: LD_INT 4
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: LD_INT 3
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: LD_INT 4
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 4
58431: NEG
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 4
58442: NEG
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 3
58454: NEG
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 4
58476: NEG
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 5
58487: NEG
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 5
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 5
58510: NEG
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: LD_INT 4
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: LD_INT 2
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 4
58593: NEG
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 4
58605: NEG
58606: PUSH
58607: LD_INT 4
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 4
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 4
58629: NEG
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 4
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: LD_INT 5
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: LD_INT 4
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 3
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: LD_INT 3
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 4
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 5
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: LD_INT 3
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: LD_INT 5
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58788: LD_ADDR_VAR 0 31
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 4
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: LD_INT 3
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: LD_INT 4
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 5
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_INT 5
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: LD_INT 4
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: LD_INT 3
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: LD_INT 5
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: LD_INT 3
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 3
58888: NEG
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 3
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 4
58944: NEG
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 4
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 4
58967: NEG
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 4
58990: NEG
58991: PUSH
58992: LD_INT 4
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 4
59002: NEG
59003: PUSH
59004: LD_INT 5
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 3
59014: NEG
59015: PUSH
59016: LD_INT 4
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 3
59026: NEG
59027: PUSH
59028: LD_INT 3
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 4
59038: NEG
59039: PUSH
59040: LD_INT 3
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 5
59050: NEG
59051: PUSH
59052: LD_INT 4
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 5
59062: NEG
59063: PUSH
59064: LD_INT 5
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 3
59074: NEG
59075: PUSH
59076: LD_INT 5
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 5
59086: NEG
59087: PUSH
59088: LD_INT 3
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 4
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: LD_INT 3
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: LD_INT 3
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: LD_INT 4
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: LD_INT 4
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 5
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 5
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 4
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 3
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 5
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59338: LD_ADDR_VAR 0 32
59342: PUSH
59343: LD_INT 4
59345: NEG
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 4
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 3
59368: NEG
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 3
59379: NEG
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 4
59390: NEG
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 5
59401: NEG
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 5
59412: NEG
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 5
59424: NEG
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 3
59436: NEG
59437: PUSH
59438: LD_INT 2
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 3
59447: NEG
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 3
59459: NEG
59460: PUSH
59461: LD_INT 4
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: LD_INT 3
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: LD_INT 2
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 3
59495: NEG
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 4
59507: NEG
59508: PUSH
59509: LD_INT 3
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 4
59519: NEG
59520: PUSH
59521: LD_INT 4
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: LD_INT 4
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 4
59543: NEG
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 4
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: LD_INT 5
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 4
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 3
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 3
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: LD_INT 4
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 5
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 2
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 2
59645: NEG
59646: PUSH
59647: LD_INT 5
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 3
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 4
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 3
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: LD_INT 4
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 5
59770: PUSH
59771: LD_INT 4
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 5
59780: PUSH
59781: LD_INT 5
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: LD_INT 5
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: LD_INT 4
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 5
59820: PUSH
59821: LD_INT 3
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: LD_INT 5
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59885: LD_ADDR_VAR 0 33
59889: PUSH
59890: LD_INT 4
59892: NEG
59893: PUSH
59894: LD_INT 4
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 4
59904: NEG
59905: PUSH
59906: LD_INT 5
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: LD_INT 4
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: NEG
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 4
59940: NEG
59941: PUSH
59942: LD_INT 3
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 5
59952: NEG
59953: PUSH
59954: LD_INT 4
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 5
59964: NEG
59965: PUSH
59966: LD_INT 5
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 3
59976: NEG
59977: PUSH
59978: LD_INT 5
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 5
59988: NEG
59989: PUSH
59990: LD_INT 3
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: LD_INT 4
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 3
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 3
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: LD_INT 4
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 2
60090: NEG
60091: PUSH
60092: LD_INT 4
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 4
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 4
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 5
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 5
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 4
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 5
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: LD_INT 3
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 4
60215: PUSH
60216: LD_INT 3
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 4
60225: PUSH
60226: LD_INT 4
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: LD_INT 4
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: LD_INT 3
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 2
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 4
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: LD_INT 4
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 4
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 3
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: LD_INT 4
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: LD_INT 5
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 5
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 4
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: LD_INT 3
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: LD_INT 5
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 2
60367: NEG
60368: PUSH
60369: LD_INT 3
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60423: LD_ADDR_VAR 0 34
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 4
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: LD_INT 5
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 4
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: LD_INT 3
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: LD_INT 4
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: LD_INT 5
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: LD_INT 3
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: LD_INT 5
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 3
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 4
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 4
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 2
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: LD_INT 2
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 4
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 4
60625: PUSH
60626: LD_INT 4
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 4
60635: PUSH
60636: LD_INT 3
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 5
60645: PUSH
60646: LD_INT 4
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 5
60655: PUSH
60656: LD_INT 5
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 4
60665: PUSH
60666: LD_INT 5
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: LD_INT 4
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 3
60685: PUSH
60686: LD_INT 3
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 5
60695: PUSH
60696: LD_INT 3
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 3
60705: PUSH
60706: LD_INT 5
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 3
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 2
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 4
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: LD_INT 3
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: LD_INT 4
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 4
60808: NEG
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 4
60819: NEG
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: NEG
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 3
60842: NEG
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 4
60853: NEG
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 5
60864: NEG
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 5
60875: NEG
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 5
60887: NEG
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 3
60899: NEG
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: ST_TO_ADDR
// end ; end ;
60955: GO 60958
60957: POP
// case btype of b_depot , b_warehouse :
60958: LD_VAR 0 1
60962: PUSH
60963: LD_INT 0
60965: DOUBLE
60966: EQUAL
60967: IFTRUE 60977
60969: LD_INT 1
60971: DOUBLE
60972: EQUAL
60973: IFTRUE 60977
60975: GO 61178
60977: POP
// case nation of nation_american :
60978: LD_VAR 0 5
60982: PUSH
60983: LD_INT 1
60985: DOUBLE
60986: EQUAL
60987: IFTRUE 60991
60989: GO 61047
60991: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60992: LD_ADDR_VAR 0 9
60996: PUSH
60997: LD_VAR 0 11
61001: PUSH
61002: LD_VAR 0 12
61006: PUSH
61007: LD_VAR 0 13
61011: PUSH
61012: LD_VAR 0 14
61016: PUSH
61017: LD_VAR 0 15
61021: PUSH
61022: LD_VAR 0 16
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: PUSH
61035: LD_VAR 0 4
61039: PUSH
61040: LD_INT 1
61042: PLUS
61043: ARRAY
61044: ST_TO_ADDR
61045: GO 61176
61047: LD_INT 2
61049: DOUBLE
61050: EQUAL
61051: IFTRUE 61055
61053: GO 61111
61055: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61056: LD_ADDR_VAR 0 9
61060: PUSH
61061: LD_VAR 0 17
61065: PUSH
61066: LD_VAR 0 18
61070: PUSH
61071: LD_VAR 0 19
61075: PUSH
61076: LD_VAR 0 20
61080: PUSH
61081: LD_VAR 0 21
61085: PUSH
61086: LD_VAR 0 22
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: PUSH
61099: LD_VAR 0 4
61103: PUSH
61104: LD_INT 1
61106: PLUS
61107: ARRAY
61108: ST_TO_ADDR
61109: GO 61176
61111: LD_INT 3
61113: DOUBLE
61114: EQUAL
61115: IFTRUE 61119
61117: GO 61175
61119: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61120: LD_ADDR_VAR 0 9
61124: PUSH
61125: LD_VAR 0 23
61129: PUSH
61130: LD_VAR 0 24
61134: PUSH
61135: LD_VAR 0 25
61139: PUSH
61140: LD_VAR 0 26
61144: PUSH
61145: LD_VAR 0 27
61149: PUSH
61150: LD_VAR 0 28
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: PUSH
61163: LD_VAR 0 4
61167: PUSH
61168: LD_INT 1
61170: PLUS
61171: ARRAY
61172: ST_TO_ADDR
61173: GO 61176
61175: POP
61176: GO 61731
61178: LD_INT 2
61180: DOUBLE
61181: EQUAL
61182: IFTRUE 61192
61184: LD_INT 3
61186: DOUBLE
61187: EQUAL
61188: IFTRUE 61192
61190: GO 61248
61192: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61193: LD_ADDR_VAR 0 9
61197: PUSH
61198: LD_VAR 0 29
61202: PUSH
61203: LD_VAR 0 30
61207: PUSH
61208: LD_VAR 0 31
61212: PUSH
61213: LD_VAR 0 32
61217: PUSH
61218: LD_VAR 0 33
61222: PUSH
61223: LD_VAR 0 34
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: PUSH
61236: LD_VAR 0 4
61240: PUSH
61241: LD_INT 1
61243: PLUS
61244: ARRAY
61245: ST_TO_ADDR
61246: GO 61731
61248: LD_INT 16
61250: DOUBLE
61251: EQUAL
61252: IFTRUE 61310
61254: LD_INT 17
61256: DOUBLE
61257: EQUAL
61258: IFTRUE 61310
61260: LD_INT 18
61262: DOUBLE
61263: EQUAL
61264: IFTRUE 61310
61266: LD_INT 19
61268: DOUBLE
61269: EQUAL
61270: IFTRUE 61310
61272: LD_INT 22
61274: DOUBLE
61275: EQUAL
61276: IFTRUE 61310
61278: LD_INT 20
61280: DOUBLE
61281: EQUAL
61282: IFTRUE 61310
61284: LD_INT 21
61286: DOUBLE
61287: EQUAL
61288: IFTRUE 61310
61290: LD_INT 23
61292: DOUBLE
61293: EQUAL
61294: IFTRUE 61310
61296: LD_INT 24
61298: DOUBLE
61299: EQUAL
61300: IFTRUE 61310
61302: LD_INT 25
61304: DOUBLE
61305: EQUAL
61306: IFTRUE 61310
61308: GO 61366
61310: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61311: LD_ADDR_VAR 0 9
61315: PUSH
61316: LD_VAR 0 35
61320: PUSH
61321: LD_VAR 0 36
61325: PUSH
61326: LD_VAR 0 37
61330: PUSH
61331: LD_VAR 0 38
61335: PUSH
61336: LD_VAR 0 39
61340: PUSH
61341: LD_VAR 0 40
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: PUSH
61354: LD_VAR 0 4
61358: PUSH
61359: LD_INT 1
61361: PLUS
61362: ARRAY
61363: ST_TO_ADDR
61364: GO 61731
61366: LD_INT 6
61368: DOUBLE
61369: EQUAL
61370: IFTRUE 61422
61372: LD_INT 7
61374: DOUBLE
61375: EQUAL
61376: IFTRUE 61422
61378: LD_INT 8
61380: DOUBLE
61381: EQUAL
61382: IFTRUE 61422
61384: LD_INT 13
61386: DOUBLE
61387: EQUAL
61388: IFTRUE 61422
61390: LD_INT 12
61392: DOUBLE
61393: EQUAL
61394: IFTRUE 61422
61396: LD_INT 15
61398: DOUBLE
61399: EQUAL
61400: IFTRUE 61422
61402: LD_INT 11
61404: DOUBLE
61405: EQUAL
61406: IFTRUE 61422
61408: LD_INT 14
61410: DOUBLE
61411: EQUAL
61412: IFTRUE 61422
61414: LD_INT 10
61416: DOUBLE
61417: EQUAL
61418: IFTRUE 61422
61420: GO 61478
61422: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61423: LD_ADDR_VAR 0 9
61427: PUSH
61428: LD_VAR 0 41
61432: PUSH
61433: LD_VAR 0 42
61437: PUSH
61438: LD_VAR 0 43
61442: PUSH
61443: LD_VAR 0 44
61447: PUSH
61448: LD_VAR 0 45
61452: PUSH
61453: LD_VAR 0 46
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: PUSH
61466: LD_VAR 0 4
61470: PUSH
61471: LD_INT 1
61473: PLUS
61474: ARRAY
61475: ST_TO_ADDR
61476: GO 61731
61478: LD_INT 36
61480: DOUBLE
61481: EQUAL
61482: IFTRUE 61486
61484: GO 61542
61486: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61487: LD_ADDR_VAR 0 9
61491: PUSH
61492: LD_VAR 0 47
61496: PUSH
61497: LD_VAR 0 48
61501: PUSH
61502: LD_VAR 0 49
61506: PUSH
61507: LD_VAR 0 50
61511: PUSH
61512: LD_VAR 0 51
61516: PUSH
61517: LD_VAR 0 52
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: PUSH
61530: LD_VAR 0 4
61534: PUSH
61535: LD_INT 1
61537: PLUS
61538: ARRAY
61539: ST_TO_ADDR
61540: GO 61731
61542: LD_INT 4
61544: DOUBLE
61545: EQUAL
61546: IFTRUE 61568
61548: LD_INT 5
61550: DOUBLE
61551: EQUAL
61552: IFTRUE 61568
61554: LD_INT 34
61556: DOUBLE
61557: EQUAL
61558: IFTRUE 61568
61560: LD_INT 37
61562: DOUBLE
61563: EQUAL
61564: IFTRUE 61568
61566: GO 61624
61568: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61569: LD_ADDR_VAR 0 9
61573: PUSH
61574: LD_VAR 0 53
61578: PUSH
61579: LD_VAR 0 54
61583: PUSH
61584: LD_VAR 0 55
61588: PUSH
61589: LD_VAR 0 56
61593: PUSH
61594: LD_VAR 0 57
61598: PUSH
61599: LD_VAR 0 58
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: PUSH
61612: LD_VAR 0 4
61616: PUSH
61617: LD_INT 1
61619: PLUS
61620: ARRAY
61621: ST_TO_ADDR
61622: GO 61731
61624: LD_INT 31
61626: DOUBLE
61627: EQUAL
61628: IFTRUE 61674
61630: LD_INT 32
61632: DOUBLE
61633: EQUAL
61634: IFTRUE 61674
61636: LD_INT 33
61638: DOUBLE
61639: EQUAL
61640: IFTRUE 61674
61642: LD_INT 27
61644: DOUBLE
61645: EQUAL
61646: IFTRUE 61674
61648: LD_INT 26
61650: DOUBLE
61651: EQUAL
61652: IFTRUE 61674
61654: LD_INT 28
61656: DOUBLE
61657: EQUAL
61658: IFTRUE 61674
61660: LD_INT 29
61662: DOUBLE
61663: EQUAL
61664: IFTRUE 61674
61666: LD_INT 30
61668: DOUBLE
61669: EQUAL
61670: IFTRUE 61674
61672: GO 61730
61674: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61675: LD_ADDR_VAR 0 9
61679: PUSH
61680: LD_VAR 0 59
61684: PUSH
61685: LD_VAR 0 60
61689: PUSH
61690: LD_VAR 0 61
61694: PUSH
61695: LD_VAR 0 62
61699: PUSH
61700: LD_VAR 0 63
61704: PUSH
61705: LD_VAR 0 64
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: PUSH
61718: LD_VAR 0 4
61722: PUSH
61723: LD_INT 1
61725: PLUS
61726: ARRAY
61727: ST_TO_ADDR
61728: GO 61731
61730: POP
// temp_list2 = [ ] ;
61731: LD_ADDR_VAR 0 10
61735: PUSH
61736: EMPTY
61737: ST_TO_ADDR
// for i in temp_list do
61738: LD_ADDR_VAR 0 8
61742: PUSH
61743: LD_VAR 0 9
61747: PUSH
61748: FOR_IN
61749: IFFALSE 61801
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61751: LD_ADDR_VAR 0 10
61755: PUSH
61756: LD_VAR 0 10
61760: PUSH
61761: LD_VAR 0 8
61765: PUSH
61766: LD_INT 1
61768: ARRAY
61769: PUSH
61770: LD_VAR 0 2
61774: PLUS
61775: PUSH
61776: LD_VAR 0 8
61780: PUSH
61781: LD_INT 2
61783: ARRAY
61784: PUSH
61785: LD_VAR 0 3
61789: PLUS
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: EMPTY
61796: LIST
61797: ADD
61798: ST_TO_ADDR
61799: GO 61748
61801: POP
61802: POP
// result = temp_list2 ;
61803: LD_ADDR_VAR 0 7
61807: PUSH
61808: LD_VAR 0 10
61812: ST_TO_ADDR
// end ;
61813: LD_VAR 0 7
61817: RET
// export function EnemyInRange ( unit , dist ) ; begin
61818: LD_INT 0
61820: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61821: LD_ADDR_VAR 0 3
61825: PUSH
61826: LD_VAR 0 1
61830: PPUSH
61831: CALL_OW 255
61835: PPUSH
61836: LD_VAR 0 1
61840: PPUSH
61841: CALL_OW 250
61845: PPUSH
61846: LD_VAR 0 1
61850: PPUSH
61851: CALL_OW 251
61855: PPUSH
61856: LD_VAR 0 2
61860: PPUSH
61861: CALL 35214 0 4
61865: PUSH
61866: LD_INT 4
61868: ARRAY
61869: ST_TO_ADDR
// end ;
61870: LD_VAR 0 3
61874: RET
// export function PlayerSeeMe ( unit ) ; begin
61875: LD_INT 0
61877: PPUSH
// result := See ( your_side , unit ) ;
61878: LD_ADDR_VAR 0 2
61882: PUSH
61883: LD_OWVAR 2
61887: PPUSH
61888: LD_VAR 0 1
61892: PPUSH
61893: CALL_OW 292
61897: ST_TO_ADDR
// end ;
61898: LD_VAR 0 2
61902: RET
// export function ReverseDir ( unit ) ; begin
61903: LD_INT 0
61905: PPUSH
// if not unit then
61906: LD_VAR 0 1
61910: NOT
61911: IFFALSE 61915
// exit ;
61913: GO 61938
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61915: LD_ADDR_VAR 0 2
61919: PUSH
61920: LD_VAR 0 1
61924: PPUSH
61925: CALL_OW 254
61929: PUSH
61930: LD_INT 3
61932: PLUS
61933: PUSH
61934: LD_INT 6
61936: MOD
61937: ST_TO_ADDR
// end ;
61938: LD_VAR 0 2
61942: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61943: LD_INT 0
61945: PPUSH
61946: PPUSH
61947: PPUSH
61948: PPUSH
61949: PPUSH
// if not hexes then
61950: LD_VAR 0 2
61954: NOT
61955: IFFALSE 61959
// exit ;
61957: GO 62107
// dist := 9999 ;
61959: LD_ADDR_VAR 0 5
61963: PUSH
61964: LD_INT 9999
61966: ST_TO_ADDR
// for i = 1 to hexes do
61967: LD_ADDR_VAR 0 4
61971: PUSH
61972: DOUBLE
61973: LD_INT 1
61975: DEC
61976: ST_TO_ADDR
61977: LD_VAR 0 2
61981: PUSH
61982: FOR_TO
61983: IFFALSE 62095
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61985: LD_VAR 0 1
61989: PPUSH
61990: LD_VAR 0 2
61994: PUSH
61995: LD_VAR 0 4
61999: ARRAY
62000: PUSH
62001: LD_INT 1
62003: ARRAY
62004: PPUSH
62005: LD_VAR 0 2
62009: PUSH
62010: LD_VAR 0 4
62014: ARRAY
62015: PUSH
62016: LD_INT 2
62018: ARRAY
62019: PPUSH
62020: CALL_OW 297
62024: PUSH
62025: LD_VAR 0 5
62029: LESS
62030: IFFALSE 62093
// begin hex := hexes [ i ] ;
62032: LD_ADDR_VAR 0 7
62036: PUSH
62037: LD_VAR 0 2
62041: PUSH
62042: LD_VAR 0 4
62046: ARRAY
62047: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62048: LD_ADDR_VAR 0 5
62052: PUSH
62053: LD_VAR 0 1
62057: PPUSH
62058: LD_VAR 0 2
62062: PUSH
62063: LD_VAR 0 4
62067: ARRAY
62068: PUSH
62069: LD_INT 1
62071: ARRAY
62072: PPUSH
62073: LD_VAR 0 2
62077: PUSH
62078: LD_VAR 0 4
62082: ARRAY
62083: PUSH
62084: LD_INT 2
62086: ARRAY
62087: PPUSH
62088: CALL_OW 297
62092: ST_TO_ADDR
// end ; end ;
62093: GO 61982
62095: POP
62096: POP
// result := hex ;
62097: LD_ADDR_VAR 0 3
62101: PUSH
62102: LD_VAR 0 7
62106: ST_TO_ADDR
// end ;
62107: LD_VAR 0 3
62111: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62112: LD_INT 0
62114: PPUSH
62115: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62116: LD_VAR 0 1
62120: NOT
62121: PUSH
62122: LD_VAR 0 1
62126: PUSH
62127: LD_INT 21
62129: PUSH
62130: LD_INT 2
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 23
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PPUSH
62151: CALL_OW 69
62155: IN
62156: NOT
62157: OR
62158: IFFALSE 62162
// exit ;
62160: GO 62209
// for i = 1 to 3 do
62162: LD_ADDR_VAR 0 3
62166: PUSH
62167: DOUBLE
62168: LD_INT 1
62170: DEC
62171: ST_TO_ADDR
62172: LD_INT 3
62174: PUSH
62175: FOR_TO
62176: IFFALSE 62207
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62178: LD_VAR 0 1
62182: PPUSH
62183: CALL_OW 250
62187: PPUSH
62188: LD_VAR 0 1
62192: PPUSH
62193: CALL_OW 251
62197: PPUSH
62198: LD_INT 1
62200: PPUSH
62201: CALL_OW 453
62205: GO 62175
62207: POP
62208: POP
// end ;
62209: LD_VAR 0 2
62213: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62214: LD_INT 0
62216: PPUSH
62217: PPUSH
62218: PPUSH
62219: PPUSH
62220: PPUSH
62221: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62222: LD_VAR 0 1
62226: NOT
62227: PUSH
62228: LD_VAR 0 2
62232: NOT
62233: OR
62234: PUSH
62235: LD_VAR 0 1
62239: PPUSH
62240: CALL_OW 314
62244: OR
62245: IFFALSE 62249
// exit ;
62247: GO 62690
// x := GetX ( enemy_unit ) ;
62249: LD_ADDR_VAR 0 7
62253: PUSH
62254: LD_VAR 0 2
62258: PPUSH
62259: CALL_OW 250
62263: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62264: LD_ADDR_VAR 0 8
62268: PUSH
62269: LD_VAR 0 2
62273: PPUSH
62274: CALL_OW 251
62278: ST_TO_ADDR
// if not x or not y then
62279: LD_VAR 0 7
62283: NOT
62284: PUSH
62285: LD_VAR 0 8
62289: NOT
62290: OR
62291: IFFALSE 62295
// exit ;
62293: GO 62690
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62295: LD_ADDR_VAR 0 6
62299: PUSH
62300: LD_VAR 0 7
62304: PPUSH
62305: LD_INT 0
62307: PPUSH
62308: LD_INT 4
62310: PPUSH
62311: CALL_OW 272
62315: PUSH
62316: LD_VAR 0 8
62320: PPUSH
62321: LD_INT 0
62323: PPUSH
62324: LD_INT 4
62326: PPUSH
62327: CALL_OW 273
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_VAR 0 7
62340: PPUSH
62341: LD_INT 1
62343: PPUSH
62344: LD_INT 4
62346: PPUSH
62347: CALL_OW 272
62351: PUSH
62352: LD_VAR 0 8
62356: PPUSH
62357: LD_INT 1
62359: PPUSH
62360: LD_INT 4
62362: PPUSH
62363: CALL_OW 273
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_VAR 0 7
62376: PPUSH
62377: LD_INT 2
62379: PPUSH
62380: LD_INT 4
62382: PPUSH
62383: CALL_OW 272
62387: PUSH
62388: LD_VAR 0 8
62392: PPUSH
62393: LD_INT 2
62395: PPUSH
62396: LD_INT 4
62398: PPUSH
62399: CALL_OW 273
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_VAR 0 7
62412: PPUSH
62413: LD_INT 3
62415: PPUSH
62416: LD_INT 4
62418: PPUSH
62419: CALL_OW 272
62423: PUSH
62424: LD_VAR 0 8
62428: PPUSH
62429: LD_INT 3
62431: PPUSH
62432: LD_INT 4
62434: PPUSH
62435: CALL_OW 273
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_VAR 0 7
62448: PPUSH
62449: LD_INT 4
62451: PPUSH
62452: LD_INT 4
62454: PPUSH
62455: CALL_OW 272
62459: PUSH
62460: LD_VAR 0 8
62464: PPUSH
62465: LD_INT 4
62467: PPUSH
62468: LD_INT 4
62470: PPUSH
62471: CALL_OW 273
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_VAR 0 7
62484: PPUSH
62485: LD_INT 5
62487: PPUSH
62488: LD_INT 4
62490: PPUSH
62491: CALL_OW 272
62495: PUSH
62496: LD_VAR 0 8
62500: PPUSH
62501: LD_INT 5
62503: PPUSH
62504: LD_INT 4
62506: PPUSH
62507: CALL_OW 273
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: ST_TO_ADDR
// for i = tmp downto 1 do
62524: LD_ADDR_VAR 0 4
62528: PUSH
62529: DOUBLE
62530: LD_VAR 0 6
62534: INC
62535: ST_TO_ADDR
62536: LD_INT 1
62538: PUSH
62539: FOR_DOWNTO
62540: IFFALSE 62641
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62542: LD_VAR 0 6
62546: PUSH
62547: LD_VAR 0 4
62551: ARRAY
62552: PUSH
62553: LD_INT 1
62555: ARRAY
62556: PPUSH
62557: LD_VAR 0 6
62561: PUSH
62562: LD_VAR 0 4
62566: ARRAY
62567: PUSH
62568: LD_INT 2
62570: ARRAY
62571: PPUSH
62572: CALL_OW 488
62576: NOT
62577: PUSH
62578: LD_VAR 0 6
62582: PUSH
62583: LD_VAR 0 4
62587: ARRAY
62588: PUSH
62589: LD_INT 1
62591: ARRAY
62592: PPUSH
62593: LD_VAR 0 6
62597: PUSH
62598: LD_VAR 0 4
62602: ARRAY
62603: PUSH
62604: LD_INT 2
62606: ARRAY
62607: PPUSH
62608: CALL_OW 428
62612: PUSH
62613: LD_INT 0
62615: NONEQUAL
62616: OR
62617: IFFALSE 62639
// tmp := Delete ( tmp , i ) ;
62619: LD_ADDR_VAR 0 6
62623: PUSH
62624: LD_VAR 0 6
62628: PPUSH
62629: LD_VAR 0 4
62633: PPUSH
62634: CALL_OW 3
62638: ST_TO_ADDR
62639: GO 62539
62641: POP
62642: POP
// j := GetClosestHex ( unit , tmp ) ;
62643: LD_ADDR_VAR 0 5
62647: PUSH
62648: LD_VAR 0 1
62652: PPUSH
62653: LD_VAR 0 6
62657: PPUSH
62658: CALL 61943 0 2
62662: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62663: LD_VAR 0 1
62667: PPUSH
62668: LD_VAR 0 5
62672: PUSH
62673: LD_INT 1
62675: ARRAY
62676: PPUSH
62677: LD_VAR 0 5
62681: PUSH
62682: LD_INT 2
62684: ARRAY
62685: PPUSH
62686: CALL_OW 111
// end ;
62690: LD_VAR 0 3
62694: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62695: LD_INT 0
62697: PPUSH
62698: PPUSH
62699: PPUSH
// uc_side = 0 ;
62700: LD_ADDR_OWVAR 20
62704: PUSH
62705: LD_INT 0
62707: ST_TO_ADDR
// uc_nation = 0 ;
62708: LD_ADDR_OWVAR 21
62712: PUSH
62713: LD_INT 0
62715: ST_TO_ADDR
// InitHc_All ( ) ;
62716: CALL_OW 584
// InitVc ;
62720: CALL_OW 20
// if mastodonts then
62724: LD_VAR 0 6
62728: IFFALSE 62795
// for i = 1 to mastodonts do
62730: LD_ADDR_VAR 0 11
62734: PUSH
62735: DOUBLE
62736: LD_INT 1
62738: DEC
62739: ST_TO_ADDR
62740: LD_VAR 0 6
62744: PUSH
62745: FOR_TO
62746: IFFALSE 62793
// begin vc_chassis := 31 ;
62748: LD_ADDR_OWVAR 37
62752: PUSH
62753: LD_INT 31
62755: ST_TO_ADDR
// vc_control := control_rider ;
62756: LD_ADDR_OWVAR 38
62760: PUSH
62761: LD_INT 4
62763: ST_TO_ADDR
// animal := CreateVehicle ;
62764: LD_ADDR_VAR 0 12
62768: PUSH
62769: CALL_OW 45
62773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62774: LD_VAR 0 12
62778: PPUSH
62779: LD_VAR 0 8
62783: PPUSH
62784: LD_INT 0
62786: PPUSH
62787: CALL 64983 0 3
// end ;
62791: GO 62745
62793: POP
62794: POP
// if horses then
62795: LD_VAR 0 5
62799: IFFALSE 62866
// for i = 1 to horses do
62801: LD_ADDR_VAR 0 11
62805: PUSH
62806: DOUBLE
62807: LD_INT 1
62809: DEC
62810: ST_TO_ADDR
62811: LD_VAR 0 5
62815: PUSH
62816: FOR_TO
62817: IFFALSE 62864
// begin hc_class := 21 ;
62819: LD_ADDR_OWVAR 28
62823: PUSH
62824: LD_INT 21
62826: ST_TO_ADDR
// hc_gallery :=  ;
62827: LD_ADDR_OWVAR 33
62831: PUSH
62832: LD_STRING 
62834: ST_TO_ADDR
// animal := CreateHuman ;
62835: LD_ADDR_VAR 0 12
62839: PUSH
62840: CALL_OW 44
62844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62845: LD_VAR 0 12
62849: PPUSH
62850: LD_VAR 0 8
62854: PPUSH
62855: LD_INT 0
62857: PPUSH
62858: CALL 64983 0 3
// end ;
62862: GO 62816
62864: POP
62865: POP
// if birds then
62866: LD_VAR 0 1
62870: IFFALSE 62937
// for i = 1 to birds do
62872: LD_ADDR_VAR 0 11
62876: PUSH
62877: DOUBLE
62878: LD_INT 1
62880: DEC
62881: ST_TO_ADDR
62882: LD_VAR 0 1
62886: PUSH
62887: FOR_TO
62888: IFFALSE 62935
// begin hc_class = 18 ;
62890: LD_ADDR_OWVAR 28
62894: PUSH
62895: LD_INT 18
62897: ST_TO_ADDR
// hc_gallery =  ;
62898: LD_ADDR_OWVAR 33
62902: PUSH
62903: LD_STRING 
62905: ST_TO_ADDR
// animal := CreateHuman ;
62906: LD_ADDR_VAR 0 12
62910: PUSH
62911: CALL_OW 44
62915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62916: LD_VAR 0 12
62920: PPUSH
62921: LD_VAR 0 8
62925: PPUSH
62926: LD_INT 0
62928: PPUSH
62929: CALL 64983 0 3
// end ;
62933: GO 62887
62935: POP
62936: POP
// if tigers then
62937: LD_VAR 0 2
62941: IFFALSE 63025
// for i = 1 to tigers do
62943: LD_ADDR_VAR 0 11
62947: PUSH
62948: DOUBLE
62949: LD_INT 1
62951: DEC
62952: ST_TO_ADDR
62953: LD_VAR 0 2
62957: PUSH
62958: FOR_TO
62959: IFFALSE 63023
// begin hc_class = class_tiger ;
62961: LD_ADDR_OWVAR 28
62965: PUSH
62966: LD_INT 14
62968: ST_TO_ADDR
// hc_gallery =  ;
62969: LD_ADDR_OWVAR 33
62973: PUSH
62974: LD_STRING 
62976: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62977: LD_ADDR_OWVAR 35
62981: PUSH
62982: LD_INT 7
62984: NEG
62985: PPUSH
62986: LD_INT 7
62988: PPUSH
62989: CALL_OW 12
62993: ST_TO_ADDR
// animal := CreateHuman ;
62994: LD_ADDR_VAR 0 12
62998: PUSH
62999: CALL_OW 44
63003: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63004: LD_VAR 0 12
63008: PPUSH
63009: LD_VAR 0 8
63013: PPUSH
63014: LD_INT 0
63016: PPUSH
63017: CALL 64983 0 3
// end ;
63021: GO 62958
63023: POP
63024: POP
// if apemans then
63025: LD_VAR 0 3
63029: IFFALSE 63152
// for i = 1 to apemans do
63031: LD_ADDR_VAR 0 11
63035: PUSH
63036: DOUBLE
63037: LD_INT 1
63039: DEC
63040: ST_TO_ADDR
63041: LD_VAR 0 3
63045: PUSH
63046: FOR_TO
63047: IFFALSE 63150
// begin hc_class = class_apeman ;
63049: LD_ADDR_OWVAR 28
63053: PUSH
63054: LD_INT 12
63056: ST_TO_ADDR
// hc_gallery =  ;
63057: LD_ADDR_OWVAR 33
63061: PUSH
63062: LD_STRING 
63064: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63065: LD_ADDR_OWVAR 35
63069: PUSH
63070: LD_INT 2
63072: NEG
63073: PPUSH
63074: LD_INT 2
63076: PPUSH
63077: CALL_OW 12
63081: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63082: LD_ADDR_OWVAR 31
63086: PUSH
63087: LD_INT 1
63089: PPUSH
63090: LD_INT 3
63092: PPUSH
63093: CALL_OW 12
63097: PUSH
63098: LD_INT 1
63100: PPUSH
63101: LD_INT 3
63103: PPUSH
63104: CALL_OW 12
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: ST_TO_ADDR
// animal := CreateHuman ;
63121: LD_ADDR_VAR 0 12
63125: PUSH
63126: CALL_OW 44
63130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63131: LD_VAR 0 12
63135: PPUSH
63136: LD_VAR 0 8
63140: PPUSH
63141: LD_INT 0
63143: PPUSH
63144: CALL 64983 0 3
// end ;
63148: GO 63046
63150: POP
63151: POP
// if enchidnas then
63152: LD_VAR 0 4
63156: IFFALSE 63223
// for i = 1 to enchidnas do
63158: LD_ADDR_VAR 0 11
63162: PUSH
63163: DOUBLE
63164: LD_INT 1
63166: DEC
63167: ST_TO_ADDR
63168: LD_VAR 0 4
63172: PUSH
63173: FOR_TO
63174: IFFALSE 63221
// begin hc_class = 13 ;
63176: LD_ADDR_OWVAR 28
63180: PUSH
63181: LD_INT 13
63183: ST_TO_ADDR
// hc_gallery =  ;
63184: LD_ADDR_OWVAR 33
63188: PUSH
63189: LD_STRING 
63191: ST_TO_ADDR
// animal := CreateHuman ;
63192: LD_ADDR_VAR 0 12
63196: PUSH
63197: CALL_OW 44
63201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63202: LD_VAR 0 12
63206: PPUSH
63207: LD_VAR 0 8
63211: PPUSH
63212: LD_INT 0
63214: PPUSH
63215: CALL 64983 0 3
// end ;
63219: GO 63173
63221: POP
63222: POP
// if fishes then
63223: LD_VAR 0 7
63227: IFFALSE 63294
// for i = 1 to fishes do
63229: LD_ADDR_VAR 0 11
63233: PUSH
63234: DOUBLE
63235: LD_INT 1
63237: DEC
63238: ST_TO_ADDR
63239: LD_VAR 0 7
63243: PUSH
63244: FOR_TO
63245: IFFALSE 63292
// begin hc_class = 20 ;
63247: LD_ADDR_OWVAR 28
63251: PUSH
63252: LD_INT 20
63254: ST_TO_ADDR
// hc_gallery =  ;
63255: LD_ADDR_OWVAR 33
63259: PUSH
63260: LD_STRING 
63262: ST_TO_ADDR
// animal := CreateHuman ;
63263: LD_ADDR_VAR 0 12
63267: PUSH
63268: CALL_OW 44
63272: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63273: LD_VAR 0 12
63277: PPUSH
63278: LD_VAR 0 9
63282: PPUSH
63283: LD_INT 0
63285: PPUSH
63286: CALL 64983 0 3
// end ;
63290: GO 63244
63292: POP
63293: POP
// end ;
63294: LD_VAR 0 10
63298: RET
// export function WantHeal ( sci , unit ) ; begin
63299: LD_INT 0
63301: PPUSH
// if GetTaskList ( sci ) > 0 then
63302: LD_VAR 0 1
63306: PPUSH
63307: CALL_OW 437
63311: PUSH
63312: LD_INT 0
63314: GREATER
63315: IFFALSE 63385
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63317: LD_VAR 0 1
63321: PPUSH
63322: CALL_OW 437
63326: PUSH
63327: LD_INT 1
63329: ARRAY
63330: PUSH
63331: LD_INT 1
63333: ARRAY
63334: PUSH
63335: LD_STRING l
63337: EQUAL
63338: PUSH
63339: LD_VAR 0 1
63343: PPUSH
63344: CALL_OW 437
63348: PUSH
63349: LD_INT 1
63351: ARRAY
63352: PUSH
63353: LD_INT 4
63355: ARRAY
63356: PUSH
63357: LD_VAR 0 2
63361: EQUAL
63362: AND
63363: IFFALSE 63375
// result := true else
63365: LD_ADDR_VAR 0 3
63369: PUSH
63370: LD_INT 1
63372: ST_TO_ADDR
63373: GO 63383
// result := false ;
63375: LD_ADDR_VAR 0 3
63379: PUSH
63380: LD_INT 0
63382: ST_TO_ADDR
// end else
63383: GO 63393
// result := false ;
63385: LD_ADDR_VAR 0 3
63389: PUSH
63390: LD_INT 0
63392: ST_TO_ADDR
// end ;
63393: LD_VAR 0 3
63397: RET
// export function HealTarget ( sci ) ; begin
63398: LD_INT 0
63400: PPUSH
// if not sci then
63401: LD_VAR 0 1
63405: NOT
63406: IFFALSE 63410
// exit ;
63408: GO 63475
// result := 0 ;
63410: LD_ADDR_VAR 0 2
63414: PUSH
63415: LD_INT 0
63417: ST_TO_ADDR
// if GetTaskList ( sci ) then
63418: LD_VAR 0 1
63422: PPUSH
63423: CALL_OW 437
63427: IFFALSE 63475
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63429: LD_VAR 0 1
63433: PPUSH
63434: CALL_OW 437
63438: PUSH
63439: LD_INT 1
63441: ARRAY
63442: PUSH
63443: LD_INT 1
63445: ARRAY
63446: PUSH
63447: LD_STRING l
63449: EQUAL
63450: IFFALSE 63475
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63452: LD_ADDR_VAR 0 2
63456: PUSH
63457: LD_VAR 0 1
63461: PPUSH
63462: CALL_OW 437
63466: PUSH
63467: LD_INT 1
63469: ARRAY
63470: PUSH
63471: LD_INT 4
63473: ARRAY
63474: ST_TO_ADDR
// end ;
63475: LD_VAR 0 2
63479: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63480: LD_INT 0
63482: PPUSH
63483: PPUSH
63484: PPUSH
63485: PPUSH
// if not base_units then
63486: LD_VAR 0 1
63490: NOT
63491: IFFALSE 63495
// exit ;
63493: GO 63582
// result := false ;
63495: LD_ADDR_VAR 0 2
63499: PUSH
63500: LD_INT 0
63502: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63503: LD_ADDR_VAR 0 5
63507: PUSH
63508: LD_VAR 0 1
63512: PPUSH
63513: LD_INT 21
63515: PUSH
63516: LD_INT 3
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PPUSH
63523: CALL_OW 72
63527: ST_TO_ADDR
// if not tmp then
63528: LD_VAR 0 5
63532: NOT
63533: IFFALSE 63537
// exit ;
63535: GO 63582
// for i in tmp do
63537: LD_ADDR_VAR 0 3
63541: PUSH
63542: LD_VAR 0 5
63546: PUSH
63547: FOR_IN
63548: IFFALSE 63580
// begin result := EnemyInRange ( i , 22 ) ;
63550: LD_ADDR_VAR 0 2
63554: PUSH
63555: LD_VAR 0 3
63559: PPUSH
63560: LD_INT 22
63562: PPUSH
63563: CALL 61818 0 2
63567: ST_TO_ADDR
// if result then
63568: LD_VAR 0 2
63572: IFFALSE 63578
// exit ;
63574: POP
63575: POP
63576: GO 63582
// end ;
63578: GO 63547
63580: POP
63581: POP
// end ;
63582: LD_VAR 0 2
63586: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63587: LD_INT 0
63589: PPUSH
63590: PPUSH
// if not units then
63591: LD_VAR 0 1
63595: NOT
63596: IFFALSE 63600
// exit ;
63598: GO 63670
// result := [ ] ;
63600: LD_ADDR_VAR 0 3
63604: PUSH
63605: EMPTY
63606: ST_TO_ADDR
// for i in units do
63607: LD_ADDR_VAR 0 4
63611: PUSH
63612: LD_VAR 0 1
63616: PUSH
63617: FOR_IN
63618: IFFALSE 63668
// if GetTag ( i ) = tag then
63620: LD_VAR 0 4
63624: PPUSH
63625: CALL_OW 110
63629: PUSH
63630: LD_VAR 0 2
63634: EQUAL
63635: IFFALSE 63666
// result := Replace ( result , result + 1 , i ) ;
63637: LD_ADDR_VAR 0 3
63641: PUSH
63642: LD_VAR 0 3
63646: PPUSH
63647: LD_VAR 0 3
63651: PUSH
63652: LD_INT 1
63654: PLUS
63655: PPUSH
63656: LD_VAR 0 4
63660: PPUSH
63661: CALL_OW 1
63665: ST_TO_ADDR
63666: GO 63617
63668: POP
63669: POP
// end ;
63670: LD_VAR 0 3
63674: RET
// export function IsDriver ( un ) ; begin
63675: LD_INT 0
63677: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63678: LD_ADDR_VAR 0 2
63682: PUSH
63683: LD_VAR 0 1
63687: PUSH
63688: LD_INT 55
63690: PUSH
63691: EMPTY
63692: LIST
63693: PPUSH
63694: CALL_OW 69
63698: IN
63699: ST_TO_ADDR
// end ;
63700: LD_VAR 0 2
63704: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63705: LD_INT 0
63707: PPUSH
63708: PPUSH
// list := [ ] ;
63709: LD_ADDR_VAR 0 5
63713: PUSH
63714: EMPTY
63715: ST_TO_ADDR
// case d of 0 :
63716: LD_VAR 0 3
63720: PUSH
63721: LD_INT 0
63723: DOUBLE
63724: EQUAL
63725: IFTRUE 63729
63727: GO 63862
63729: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63730: LD_ADDR_VAR 0 5
63734: PUSH
63735: LD_VAR 0 1
63739: PUSH
63740: LD_INT 4
63742: MINUS
63743: PUSH
63744: LD_VAR 0 2
63748: PUSH
63749: LD_INT 4
63751: MINUS
63752: PUSH
63753: LD_INT 2
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: LIST
63760: PUSH
63761: LD_VAR 0 1
63765: PUSH
63766: LD_INT 3
63768: MINUS
63769: PUSH
63770: LD_VAR 0 2
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: LIST
63782: PUSH
63783: LD_VAR 0 1
63787: PUSH
63788: LD_INT 4
63790: PLUS
63791: PUSH
63792: LD_VAR 0 2
63796: PUSH
63797: LD_INT 4
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: LIST
63804: PUSH
63805: LD_VAR 0 1
63809: PUSH
63810: LD_INT 3
63812: PLUS
63813: PUSH
63814: LD_VAR 0 2
63818: PUSH
63819: LD_INT 3
63821: PLUS
63822: PUSH
63823: LD_INT 5
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: LIST
63830: PUSH
63831: LD_VAR 0 1
63835: PUSH
63836: LD_VAR 0 2
63840: PUSH
63841: LD_INT 4
63843: PLUS
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: LIST
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: ST_TO_ADDR
// end ; 1 :
63860: GO 64560
63862: LD_INT 1
63864: DOUBLE
63865: EQUAL
63866: IFTRUE 63870
63868: GO 64003
63870: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63871: LD_ADDR_VAR 0 5
63875: PUSH
63876: LD_VAR 0 1
63880: PUSH
63881: LD_VAR 0 2
63885: PUSH
63886: LD_INT 4
63888: MINUS
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: PUSH
63898: LD_VAR 0 1
63902: PUSH
63903: LD_INT 3
63905: MINUS
63906: PUSH
63907: LD_VAR 0 2
63911: PUSH
63912: LD_INT 3
63914: MINUS
63915: PUSH
63916: LD_INT 2
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: PUSH
63924: LD_VAR 0 1
63928: PUSH
63929: LD_INT 4
63931: MINUS
63932: PUSH
63933: LD_VAR 0 2
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: PUSH
63946: LD_VAR 0 1
63950: PUSH
63951: LD_VAR 0 2
63955: PUSH
63956: LD_INT 3
63958: PLUS
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: LIST
63967: PUSH
63968: LD_VAR 0 1
63972: PUSH
63973: LD_INT 4
63975: PLUS
63976: PUSH
63977: LD_VAR 0 2
63981: PUSH
63982: LD_INT 4
63984: PLUS
63985: PUSH
63986: LD_INT 5
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: LIST
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: ST_TO_ADDR
// end ; 2 :
64001: GO 64560
64003: LD_INT 2
64005: DOUBLE
64006: EQUAL
64007: IFTRUE 64011
64009: GO 64140
64011: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64012: LD_ADDR_VAR 0 5
64016: PUSH
64017: LD_VAR 0 1
64021: PUSH
64022: LD_VAR 0 2
64026: PUSH
64027: LD_INT 3
64029: MINUS
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: LIST
64038: PUSH
64039: LD_VAR 0 1
64043: PUSH
64044: LD_INT 4
64046: PLUS
64047: PUSH
64048: LD_VAR 0 2
64052: PUSH
64053: LD_INT 4
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: PUSH
64061: LD_VAR 0 1
64065: PUSH
64066: LD_VAR 0 2
64070: PUSH
64071: LD_INT 4
64073: PLUS
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: PUSH
64083: LD_VAR 0 1
64087: PUSH
64088: LD_INT 3
64090: MINUS
64091: PUSH
64092: LD_VAR 0 2
64096: PUSH
64097: LD_INT 1
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: LIST
64104: PUSH
64105: LD_VAR 0 1
64109: PUSH
64110: LD_INT 4
64112: MINUS
64113: PUSH
64114: LD_VAR 0 2
64118: PUSH
64119: LD_INT 4
64121: MINUS
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: ST_TO_ADDR
// end ; 3 :
64138: GO 64560
64140: LD_INT 3
64142: DOUBLE
64143: EQUAL
64144: IFTRUE 64148
64146: GO 64281
64148: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64149: LD_ADDR_VAR 0 5
64153: PUSH
64154: LD_VAR 0 1
64158: PUSH
64159: LD_INT 3
64161: PLUS
64162: PUSH
64163: LD_VAR 0 2
64167: PUSH
64168: LD_INT 4
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: PUSH
64176: LD_VAR 0 1
64180: PUSH
64181: LD_INT 4
64183: PLUS
64184: PUSH
64185: LD_VAR 0 2
64189: PUSH
64190: LD_INT 4
64192: PLUS
64193: PUSH
64194: LD_INT 5
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: LIST
64201: PUSH
64202: LD_VAR 0 1
64206: PUSH
64207: LD_INT 4
64209: MINUS
64210: PUSH
64211: LD_VAR 0 2
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: PUSH
64224: LD_VAR 0 1
64228: PUSH
64229: LD_VAR 0 2
64233: PUSH
64234: LD_INT 4
64236: MINUS
64237: PUSH
64238: LD_INT 3
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: LIST
64245: PUSH
64246: LD_VAR 0 1
64250: PUSH
64251: LD_INT 3
64253: MINUS
64254: PUSH
64255: LD_VAR 0 2
64259: PUSH
64260: LD_INT 3
64262: MINUS
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: LIST
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: ST_TO_ADDR
// end ; 4 :
64279: GO 64560
64281: LD_INT 4
64283: DOUBLE
64284: EQUAL
64285: IFTRUE 64289
64287: GO 64422
64289: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64290: LD_ADDR_VAR 0 5
64294: PUSH
64295: LD_VAR 0 1
64299: PUSH
64300: LD_VAR 0 2
64304: PUSH
64305: LD_INT 4
64307: PLUS
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: PUSH
64317: LD_VAR 0 1
64321: PUSH
64322: LD_INT 3
64324: PLUS
64325: PUSH
64326: LD_VAR 0 2
64330: PUSH
64331: LD_INT 3
64333: PLUS
64334: PUSH
64335: LD_INT 5
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: PUSH
64343: LD_VAR 0 1
64347: PUSH
64348: LD_INT 4
64350: PLUS
64351: PUSH
64352: LD_VAR 0 2
64356: PUSH
64357: LD_INT 4
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: PUSH
64365: LD_VAR 0 1
64369: PUSH
64370: LD_VAR 0 2
64374: PUSH
64375: LD_INT 3
64377: MINUS
64378: PUSH
64379: LD_INT 3
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: LIST
64386: PUSH
64387: LD_VAR 0 1
64391: PUSH
64392: LD_INT 4
64394: MINUS
64395: PUSH
64396: LD_VAR 0 2
64400: PUSH
64401: LD_INT 4
64403: MINUS
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: ST_TO_ADDR
// end ; 5 :
64420: GO 64560
64422: LD_INT 5
64424: DOUBLE
64425: EQUAL
64426: IFTRUE 64430
64428: GO 64559
64430: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64431: LD_ADDR_VAR 0 5
64435: PUSH
64436: LD_VAR 0 1
64440: PUSH
64441: LD_INT 4
64443: MINUS
64444: PUSH
64445: LD_VAR 0 2
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: LIST
64457: PUSH
64458: LD_VAR 0 1
64462: PUSH
64463: LD_VAR 0 2
64467: PUSH
64468: LD_INT 4
64470: MINUS
64471: PUSH
64472: LD_INT 3
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: LIST
64479: PUSH
64480: LD_VAR 0 1
64484: PUSH
64485: LD_INT 4
64487: PLUS
64488: PUSH
64489: LD_VAR 0 2
64493: PUSH
64494: LD_INT 4
64496: PLUS
64497: PUSH
64498: LD_INT 5
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: PUSH
64506: LD_VAR 0 1
64510: PUSH
64511: LD_INT 3
64513: PLUS
64514: PUSH
64515: LD_VAR 0 2
64519: PUSH
64520: LD_INT 4
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: LIST
64527: PUSH
64528: LD_VAR 0 1
64532: PUSH
64533: LD_VAR 0 2
64537: PUSH
64538: LD_INT 3
64540: PLUS
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: ST_TO_ADDR
// end ; end ;
64557: GO 64560
64559: POP
// result := list ;
64560: LD_ADDR_VAR 0 4
64564: PUSH
64565: LD_VAR 0 5
64569: ST_TO_ADDR
// end ;
64570: LD_VAR 0 4
64574: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64575: LD_INT 0
64577: PPUSH
64578: PPUSH
64579: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64580: LD_VAR 0 1
64584: NOT
64585: PUSH
64586: LD_VAR 0 2
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: LD_INT 2
64596: PUSH
64597: LD_INT 3
64599: PUSH
64600: LD_INT 4
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: IN
64609: NOT
64610: OR
64611: IFFALSE 64615
// exit ;
64613: GO 64707
// tmp := [ ] ;
64615: LD_ADDR_VAR 0 5
64619: PUSH
64620: EMPTY
64621: ST_TO_ADDR
// for i in units do
64622: LD_ADDR_VAR 0 4
64626: PUSH
64627: LD_VAR 0 1
64631: PUSH
64632: FOR_IN
64633: IFFALSE 64676
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64635: LD_ADDR_VAR 0 5
64639: PUSH
64640: LD_VAR 0 5
64644: PPUSH
64645: LD_VAR 0 5
64649: PUSH
64650: LD_INT 1
64652: PLUS
64653: PPUSH
64654: LD_VAR 0 4
64658: PPUSH
64659: LD_VAR 0 2
64663: PPUSH
64664: CALL_OW 259
64668: PPUSH
64669: CALL_OW 2
64673: ST_TO_ADDR
64674: GO 64632
64676: POP
64677: POP
// if not tmp then
64678: LD_VAR 0 5
64682: NOT
64683: IFFALSE 64687
// exit ;
64685: GO 64707
// result := SortListByListDesc ( units , tmp ) ;
64687: LD_ADDR_VAR 0 3
64691: PUSH
64692: LD_VAR 0 1
64696: PPUSH
64697: LD_VAR 0 5
64701: PPUSH
64702: CALL_OW 77
64706: ST_TO_ADDR
// end ;
64707: LD_VAR 0 3
64711: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64712: LD_INT 0
64714: PPUSH
64715: PPUSH
64716: PPUSH
// result := false ;
64717: LD_ADDR_VAR 0 3
64721: PUSH
64722: LD_INT 0
64724: ST_TO_ADDR
// x := GetX ( building ) ;
64725: LD_ADDR_VAR 0 4
64729: PUSH
64730: LD_VAR 0 2
64734: PPUSH
64735: CALL_OW 250
64739: ST_TO_ADDR
// y := GetY ( building ) ;
64740: LD_ADDR_VAR 0 5
64744: PUSH
64745: LD_VAR 0 2
64749: PPUSH
64750: CALL_OW 251
64754: ST_TO_ADDR
// if not building or not x or not y then
64755: LD_VAR 0 2
64759: NOT
64760: PUSH
64761: LD_VAR 0 4
64765: NOT
64766: OR
64767: PUSH
64768: LD_VAR 0 5
64772: NOT
64773: OR
64774: IFFALSE 64778
// exit ;
64776: GO 64870
// if GetTaskList ( unit ) then
64778: LD_VAR 0 1
64782: PPUSH
64783: CALL_OW 437
64787: IFFALSE 64870
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64789: LD_STRING e
64791: PUSH
64792: LD_VAR 0 1
64796: PPUSH
64797: CALL_OW 437
64801: PUSH
64802: LD_INT 1
64804: ARRAY
64805: PUSH
64806: LD_INT 1
64808: ARRAY
64809: EQUAL
64810: PUSH
64811: LD_VAR 0 4
64815: PUSH
64816: LD_VAR 0 1
64820: PPUSH
64821: CALL_OW 437
64825: PUSH
64826: LD_INT 1
64828: ARRAY
64829: PUSH
64830: LD_INT 2
64832: ARRAY
64833: EQUAL
64834: AND
64835: PUSH
64836: LD_VAR 0 5
64840: PUSH
64841: LD_VAR 0 1
64845: PPUSH
64846: CALL_OW 437
64850: PUSH
64851: LD_INT 1
64853: ARRAY
64854: PUSH
64855: LD_INT 3
64857: ARRAY
64858: EQUAL
64859: AND
64860: IFFALSE 64870
// result := true end ;
64862: LD_ADDR_VAR 0 3
64866: PUSH
64867: LD_INT 1
64869: ST_TO_ADDR
// end ;
64870: LD_VAR 0 3
64874: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64875: LD_INT 0
64877: PPUSH
// result := false ;
64878: LD_ADDR_VAR 0 4
64882: PUSH
64883: LD_INT 0
64885: ST_TO_ADDR
// if GetTaskList ( unit ) then
64886: LD_VAR 0 1
64890: PPUSH
64891: CALL_OW 437
64895: IFFALSE 64978
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64897: LD_STRING M
64899: PUSH
64900: LD_VAR 0 1
64904: PPUSH
64905: CALL_OW 437
64909: PUSH
64910: LD_INT 1
64912: ARRAY
64913: PUSH
64914: LD_INT 1
64916: ARRAY
64917: EQUAL
64918: PUSH
64919: LD_VAR 0 2
64923: PUSH
64924: LD_VAR 0 1
64928: PPUSH
64929: CALL_OW 437
64933: PUSH
64934: LD_INT 1
64936: ARRAY
64937: PUSH
64938: LD_INT 2
64940: ARRAY
64941: EQUAL
64942: AND
64943: PUSH
64944: LD_VAR 0 3
64948: PUSH
64949: LD_VAR 0 1
64953: PPUSH
64954: CALL_OW 437
64958: PUSH
64959: LD_INT 1
64961: ARRAY
64962: PUSH
64963: LD_INT 3
64965: ARRAY
64966: EQUAL
64967: AND
64968: IFFALSE 64978
// result := true ;
64970: LD_ADDR_VAR 0 4
64974: PUSH
64975: LD_INT 1
64977: ST_TO_ADDR
// end ; end ;
64978: LD_VAR 0 4
64982: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64983: LD_INT 0
64985: PPUSH
64986: PPUSH
64987: PPUSH
64988: PPUSH
// if not unit or not area then
64989: LD_VAR 0 1
64993: NOT
64994: PUSH
64995: LD_VAR 0 2
64999: NOT
65000: OR
65001: IFFALSE 65005
// exit ;
65003: GO 65169
// tmp := AreaToList ( area , i ) ;
65005: LD_ADDR_VAR 0 6
65009: PUSH
65010: LD_VAR 0 2
65014: PPUSH
65015: LD_VAR 0 5
65019: PPUSH
65020: CALL_OW 517
65024: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65025: LD_ADDR_VAR 0 5
65029: PUSH
65030: DOUBLE
65031: LD_INT 1
65033: DEC
65034: ST_TO_ADDR
65035: LD_VAR 0 6
65039: PUSH
65040: LD_INT 1
65042: ARRAY
65043: PUSH
65044: FOR_TO
65045: IFFALSE 65167
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65047: LD_ADDR_VAR 0 7
65051: PUSH
65052: LD_VAR 0 6
65056: PUSH
65057: LD_INT 1
65059: ARRAY
65060: PUSH
65061: LD_VAR 0 5
65065: ARRAY
65066: PUSH
65067: LD_VAR 0 6
65071: PUSH
65072: LD_INT 2
65074: ARRAY
65075: PUSH
65076: LD_VAR 0 5
65080: ARRAY
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65086: LD_VAR 0 7
65090: PUSH
65091: LD_INT 1
65093: ARRAY
65094: PPUSH
65095: LD_VAR 0 7
65099: PUSH
65100: LD_INT 2
65102: ARRAY
65103: PPUSH
65104: CALL_OW 428
65108: PUSH
65109: LD_INT 0
65111: EQUAL
65112: IFFALSE 65165
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65114: LD_VAR 0 1
65118: PPUSH
65119: LD_VAR 0 7
65123: PUSH
65124: LD_INT 1
65126: ARRAY
65127: PPUSH
65128: LD_VAR 0 7
65132: PUSH
65133: LD_INT 2
65135: ARRAY
65136: PPUSH
65137: LD_VAR 0 3
65141: PPUSH
65142: CALL_OW 48
// result := IsPlaced ( unit ) ;
65146: LD_ADDR_VAR 0 4
65150: PUSH
65151: LD_VAR 0 1
65155: PPUSH
65156: CALL_OW 305
65160: ST_TO_ADDR
// exit ;
65161: POP
65162: POP
65163: GO 65169
// end ; end ;
65165: GO 65044
65167: POP
65168: POP
// end ;
65169: LD_VAR 0 4
65173: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65174: LD_INT 0
65176: PPUSH
65177: PPUSH
65178: PPUSH
// if not side or side > 8 then
65179: LD_VAR 0 1
65183: NOT
65184: PUSH
65185: LD_VAR 0 1
65189: PUSH
65190: LD_INT 8
65192: GREATER
65193: OR
65194: IFFALSE 65198
// exit ;
65196: GO 65385
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65198: LD_ADDR_VAR 0 4
65202: PUSH
65203: LD_INT 22
65205: PUSH
65206: LD_VAR 0 1
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 21
65217: PUSH
65218: LD_INT 3
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PPUSH
65229: CALL_OW 69
65233: ST_TO_ADDR
// if not tmp then
65234: LD_VAR 0 4
65238: NOT
65239: IFFALSE 65243
// exit ;
65241: GO 65385
// enable_addtolog := true ;
65243: LD_ADDR_OWVAR 81
65247: PUSH
65248: LD_INT 1
65250: ST_TO_ADDR
// AddToLog ( [ ) ;
65251: LD_STRING [
65253: PPUSH
65254: CALL_OW 561
// for i in tmp do
65258: LD_ADDR_VAR 0 3
65262: PUSH
65263: LD_VAR 0 4
65267: PUSH
65268: FOR_IN
65269: IFFALSE 65376
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65271: LD_STRING [
65273: PUSH
65274: LD_VAR 0 3
65278: PPUSH
65279: CALL_OW 266
65283: STR
65284: PUSH
65285: LD_STRING , 
65287: STR
65288: PUSH
65289: LD_VAR 0 3
65293: PPUSH
65294: CALL_OW 250
65298: STR
65299: PUSH
65300: LD_STRING , 
65302: STR
65303: PUSH
65304: LD_VAR 0 3
65308: PPUSH
65309: CALL_OW 251
65313: STR
65314: PUSH
65315: LD_STRING , 
65317: STR
65318: PUSH
65319: LD_VAR 0 3
65323: PPUSH
65324: CALL_OW 254
65328: STR
65329: PUSH
65330: LD_STRING , 
65332: STR
65333: PUSH
65334: LD_VAR 0 3
65338: PPUSH
65339: LD_INT 1
65341: PPUSH
65342: CALL_OW 268
65346: STR
65347: PUSH
65348: LD_STRING , 
65350: STR
65351: PUSH
65352: LD_VAR 0 3
65356: PPUSH
65357: LD_INT 2
65359: PPUSH
65360: CALL_OW 268
65364: STR
65365: PUSH
65366: LD_STRING ],
65368: STR
65369: PPUSH
65370: CALL_OW 561
// end ;
65374: GO 65268
65376: POP
65377: POP
// AddToLog ( ]; ) ;
65378: LD_STRING ];
65380: PPUSH
65381: CALL_OW 561
// end ;
65385: LD_VAR 0 2
65389: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65390: LD_INT 0
65392: PPUSH
65393: PPUSH
65394: PPUSH
65395: PPUSH
65396: PPUSH
// if not area or not rate or not max then
65397: LD_VAR 0 1
65401: NOT
65402: PUSH
65403: LD_VAR 0 2
65407: NOT
65408: OR
65409: PUSH
65410: LD_VAR 0 4
65414: NOT
65415: OR
65416: IFFALSE 65420
// exit ;
65418: GO 65612
// while 1 do
65420: LD_INT 1
65422: IFFALSE 65612
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65424: LD_ADDR_VAR 0 9
65428: PUSH
65429: LD_VAR 0 1
65433: PPUSH
65434: LD_INT 1
65436: PPUSH
65437: CALL_OW 287
65441: PUSH
65442: LD_INT 10
65444: MUL
65445: ST_TO_ADDR
// r := rate / 10 ;
65446: LD_ADDR_VAR 0 7
65450: PUSH
65451: LD_VAR 0 2
65455: PUSH
65456: LD_INT 10
65458: DIVREAL
65459: ST_TO_ADDR
// time := 1 1$00 ;
65460: LD_ADDR_VAR 0 8
65464: PUSH
65465: LD_INT 2100
65467: ST_TO_ADDR
// if amount < min then
65468: LD_VAR 0 9
65472: PUSH
65473: LD_VAR 0 3
65477: LESS
65478: IFFALSE 65496
// r := r * 2 else
65480: LD_ADDR_VAR 0 7
65484: PUSH
65485: LD_VAR 0 7
65489: PUSH
65490: LD_INT 2
65492: MUL
65493: ST_TO_ADDR
65494: GO 65522
// if amount > max then
65496: LD_VAR 0 9
65500: PUSH
65501: LD_VAR 0 4
65505: GREATER
65506: IFFALSE 65522
// r := r / 2 ;
65508: LD_ADDR_VAR 0 7
65512: PUSH
65513: LD_VAR 0 7
65517: PUSH
65518: LD_INT 2
65520: DIVREAL
65521: ST_TO_ADDR
// time := time / r ;
65522: LD_ADDR_VAR 0 8
65526: PUSH
65527: LD_VAR 0 8
65531: PUSH
65532: LD_VAR 0 7
65536: DIVREAL
65537: ST_TO_ADDR
// if time < 0 then
65538: LD_VAR 0 8
65542: PUSH
65543: LD_INT 0
65545: LESS
65546: IFFALSE 65563
// time := time * - 1 ;
65548: LD_ADDR_VAR 0 8
65552: PUSH
65553: LD_VAR 0 8
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: MUL
65562: ST_TO_ADDR
// wait ( time ) ;
65563: LD_VAR 0 8
65567: PPUSH
65568: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65572: LD_INT 35
65574: PPUSH
65575: LD_INT 875
65577: PPUSH
65578: CALL_OW 12
65582: PPUSH
65583: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65587: LD_INT 1
65589: PPUSH
65590: LD_INT 5
65592: PPUSH
65593: CALL_OW 12
65597: PPUSH
65598: LD_VAR 0 1
65602: PPUSH
65603: LD_INT 1
65605: PPUSH
65606: CALL_OW 55
// end ;
65610: GO 65420
// end ;
65612: LD_VAR 0 5
65616: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65617: LD_INT 0
65619: PPUSH
65620: PPUSH
65621: PPUSH
65622: PPUSH
65623: PPUSH
65624: PPUSH
65625: PPUSH
65626: PPUSH
// if not turrets or not factories then
65627: LD_VAR 0 1
65631: NOT
65632: PUSH
65633: LD_VAR 0 2
65637: NOT
65638: OR
65639: IFFALSE 65643
// exit ;
65641: GO 65950
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65643: LD_ADDR_VAR 0 10
65647: PUSH
65648: LD_INT 5
65650: PUSH
65651: LD_INT 6
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: LD_INT 4
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: LD_INT 5
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 24
65685: PUSH
65686: LD_INT 25
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 23
65695: PUSH
65696: LD_INT 27
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 42
65709: PUSH
65710: LD_INT 43
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 44
65719: PUSH
65720: LD_INT 46
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 45
65729: PUSH
65730: LD_INT 47
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: LIST
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: ST_TO_ADDR
// result := [ ] ;
65747: LD_ADDR_VAR 0 3
65751: PUSH
65752: EMPTY
65753: ST_TO_ADDR
// for i in turrets do
65754: LD_ADDR_VAR 0 4
65758: PUSH
65759: LD_VAR 0 1
65763: PUSH
65764: FOR_IN
65765: IFFALSE 65948
// begin nat := GetNation ( i ) ;
65767: LD_ADDR_VAR 0 7
65771: PUSH
65772: LD_VAR 0 4
65776: PPUSH
65777: CALL_OW 248
65781: ST_TO_ADDR
// weapon := 0 ;
65782: LD_ADDR_VAR 0 8
65786: PUSH
65787: LD_INT 0
65789: ST_TO_ADDR
// if not nat then
65790: LD_VAR 0 7
65794: NOT
65795: IFFALSE 65799
// continue ;
65797: GO 65764
// for j in list [ nat ] do
65799: LD_ADDR_VAR 0 5
65803: PUSH
65804: LD_VAR 0 10
65808: PUSH
65809: LD_VAR 0 7
65813: ARRAY
65814: PUSH
65815: FOR_IN
65816: IFFALSE 65857
// if GetBWeapon ( i ) = j [ 1 ] then
65818: LD_VAR 0 4
65822: PPUSH
65823: CALL_OW 269
65827: PUSH
65828: LD_VAR 0 5
65832: PUSH
65833: LD_INT 1
65835: ARRAY
65836: EQUAL
65837: IFFALSE 65855
// begin weapon := j [ 2 ] ;
65839: LD_ADDR_VAR 0 8
65843: PUSH
65844: LD_VAR 0 5
65848: PUSH
65849: LD_INT 2
65851: ARRAY
65852: ST_TO_ADDR
// break ;
65853: GO 65857
// end ;
65855: GO 65815
65857: POP
65858: POP
// if not weapon then
65859: LD_VAR 0 8
65863: NOT
65864: IFFALSE 65868
// continue ;
65866: GO 65764
// for k in factories do
65868: LD_ADDR_VAR 0 6
65872: PUSH
65873: LD_VAR 0 2
65877: PUSH
65878: FOR_IN
65879: IFFALSE 65944
// begin weapons := AvailableWeaponList ( k ) ;
65881: LD_ADDR_VAR 0 9
65885: PUSH
65886: LD_VAR 0 6
65890: PPUSH
65891: CALL_OW 478
65895: ST_TO_ADDR
// if not weapons then
65896: LD_VAR 0 9
65900: NOT
65901: IFFALSE 65905
// continue ;
65903: GO 65878
// if weapon in weapons then
65905: LD_VAR 0 8
65909: PUSH
65910: LD_VAR 0 9
65914: IN
65915: IFFALSE 65942
// begin result := [ i , weapon ] ;
65917: LD_ADDR_VAR 0 3
65921: PUSH
65922: LD_VAR 0 4
65926: PUSH
65927: LD_VAR 0 8
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: ST_TO_ADDR
// exit ;
65936: POP
65937: POP
65938: POP
65939: POP
65940: GO 65950
// end ; end ;
65942: GO 65878
65944: POP
65945: POP
// end ;
65946: GO 65764
65948: POP
65949: POP
// end ;
65950: LD_VAR 0 3
65954: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65955: LD_INT 0
65957: PPUSH
// if not side or side > 8 then
65958: LD_VAR 0 3
65962: NOT
65963: PUSH
65964: LD_VAR 0 3
65968: PUSH
65969: LD_INT 8
65971: GREATER
65972: OR
65973: IFFALSE 65977
// exit ;
65975: GO 66036
// if not range then
65977: LD_VAR 0 4
65981: NOT
65982: IFFALSE 65993
// range := - 12 ;
65984: LD_ADDR_VAR 0 4
65988: PUSH
65989: LD_INT 12
65991: NEG
65992: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65993: LD_VAR 0 1
65997: PPUSH
65998: LD_VAR 0 2
66002: PPUSH
66003: LD_VAR 0 3
66007: PPUSH
66008: LD_VAR 0 4
66012: PPUSH
66013: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66017: LD_VAR 0 1
66021: PPUSH
66022: LD_VAR 0 2
66026: PPUSH
66027: LD_VAR 0 3
66031: PPUSH
66032: CALL_OW 331
// end ;
66036: LD_VAR 0 5
66040: RET
// export function Video ( mode ) ; begin
66041: LD_INT 0
66043: PPUSH
// ingame_video = mode ;
66044: LD_ADDR_OWVAR 52
66048: PUSH
66049: LD_VAR 0 1
66053: ST_TO_ADDR
// interface_hidden = mode ;
66054: LD_ADDR_OWVAR 54
66058: PUSH
66059: LD_VAR 0 1
66063: ST_TO_ADDR
// end ;
66064: LD_VAR 0 2
66068: RET
// export function Join ( array , element ) ; begin
66069: LD_INT 0
66071: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66072: LD_ADDR_VAR 0 3
66076: PUSH
66077: LD_VAR 0 1
66081: PPUSH
66082: LD_VAR 0 1
66086: PUSH
66087: LD_INT 1
66089: PLUS
66090: PPUSH
66091: LD_VAR 0 2
66095: PPUSH
66096: CALL_OW 1
66100: ST_TO_ADDR
// end ;
66101: LD_VAR 0 3
66105: RET
// export function JoinUnion ( array , element ) ; begin
66106: LD_INT 0
66108: PPUSH
// result := array union element ;
66109: LD_ADDR_VAR 0 3
66113: PUSH
66114: LD_VAR 0 1
66118: PUSH
66119: LD_VAR 0 2
66123: UNION
66124: ST_TO_ADDR
// end ;
66125: LD_VAR 0 3
66129: RET
// export function GetBehemoths ( side ) ; begin
66130: LD_INT 0
66132: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66133: LD_ADDR_VAR 0 2
66137: PUSH
66138: LD_INT 22
66140: PUSH
66141: LD_VAR 0 1
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 31
66152: PUSH
66153: LD_INT 25
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PPUSH
66164: CALL_OW 69
66168: ST_TO_ADDR
// end ;
66169: LD_VAR 0 2
66173: RET
// export function Shuffle ( array ) ; var i , index ; begin
66174: LD_INT 0
66176: PPUSH
66177: PPUSH
66178: PPUSH
// result := [ ] ;
66179: LD_ADDR_VAR 0 2
66183: PUSH
66184: EMPTY
66185: ST_TO_ADDR
// if not array then
66186: LD_VAR 0 1
66190: NOT
66191: IFFALSE 66195
// exit ;
66193: GO 66294
// Randomize ;
66195: CALL_OW 10
// for i = array downto 1 do
66199: LD_ADDR_VAR 0 3
66203: PUSH
66204: DOUBLE
66205: LD_VAR 0 1
66209: INC
66210: ST_TO_ADDR
66211: LD_INT 1
66213: PUSH
66214: FOR_DOWNTO
66215: IFFALSE 66292
// begin index := rand ( 1 , array ) ;
66217: LD_ADDR_VAR 0 4
66221: PUSH
66222: LD_INT 1
66224: PPUSH
66225: LD_VAR 0 1
66229: PPUSH
66230: CALL_OW 12
66234: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66235: LD_ADDR_VAR 0 2
66239: PUSH
66240: LD_VAR 0 2
66244: PPUSH
66245: LD_VAR 0 2
66249: PUSH
66250: LD_INT 1
66252: PLUS
66253: PPUSH
66254: LD_VAR 0 1
66258: PUSH
66259: LD_VAR 0 4
66263: ARRAY
66264: PPUSH
66265: CALL_OW 2
66269: ST_TO_ADDR
// array := Delete ( array , index ) ;
66270: LD_ADDR_VAR 0 1
66274: PUSH
66275: LD_VAR 0 1
66279: PPUSH
66280: LD_VAR 0 4
66284: PPUSH
66285: CALL_OW 3
66289: ST_TO_ADDR
// end ;
66290: GO 66214
66292: POP
66293: POP
// end ;
66294: LD_VAR 0 2
66298: RET
// export function GetBaseMaterials ( base ) ; begin
66299: LD_INT 0
66301: PPUSH
// result := [ 0 , 0 , 0 ] ;
66302: LD_ADDR_VAR 0 2
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: ST_TO_ADDR
// if not base then
66321: LD_VAR 0 1
66325: NOT
66326: IFFALSE 66330
// exit ;
66328: GO 66379
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66330: LD_ADDR_VAR 0 2
66334: PUSH
66335: LD_VAR 0 1
66339: PPUSH
66340: LD_INT 1
66342: PPUSH
66343: CALL_OW 275
66347: PUSH
66348: LD_VAR 0 1
66352: PPUSH
66353: LD_INT 2
66355: PPUSH
66356: CALL_OW 275
66360: PUSH
66361: LD_VAR 0 1
66365: PPUSH
66366: LD_INT 3
66368: PPUSH
66369: CALL_OW 275
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: LIST
66378: ST_TO_ADDR
// end ;
66379: LD_VAR 0 2
66383: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66384: LD_INT 0
66386: PPUSH
66387: PPUSH
// result := array ;
66388: LD_ADDR_VAR 0 3
66392: PUSH
66393: LD_VAR 0 1
66397: ST_TO_ADDR
// if size > 0 then
66398: LD_VAR 0 2
66402: PUSH
66403: LD_INT 0
66405: GREATER
66406: IFFALSE 66452
// for i := array downto size do
66408: LD_ADDR_VAR 0 4
66412: PUSH
66413: DOUBLE
66414: LD_VAR 0 1
66418: INC
66419: ST_TO_ADDR
66420: LD_VAR 0 2
66424: PUSH
66425: FOR_DOWNTO
66426: IFFALSE 66450
// result := Delete ( result , result ) ;
66428: LD_ADDR_VAR 0 3
66432: PUSH
66433: LD_VAR 0 3
66437: PPUSH
66438: LD_VAR 0 3
66442: PPUSH
66443: CALL_OW 3
66447: ST_TO_ADDR
66448: GO 66425
66450: POP
66451: POP
// end ;
66452: LD_VAR 0 3
66456: RET
// export function ComExit ( unit ) ; var tmp ; begin
66457: LD_INT 0
66459: PPUSH
66460: PPUSH
// if not IsInUnit ( unit ) then
66461: LD_VAR 0 1
66465: PPUSH
66466: CALL_OW 310
66470: NOT
66471: IFFALSE 66475
// exit ;
66473: GO 66535
// tmp := IsInUnit ( unit ) ;
66475: LD_ADDR_VAR 0 3
66479: PUSH
66480: LD_VAR 0 1
66484: PPUSH
66485: CALL_OW 310
66489: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66490: LD_VAR 0 3
66494: PPUSH
66495: CALL_OW 247
66499: PUSH
66500: LD_INT 2
66502: EQUAL
66503: IFFALSE 66516
// ComExitVehicle ( unit ) else
66505: LD_VAR 0 1
66509: PPUSH
66510: CALL_OW 121
66514: GO 66525
// ComExitBuilding ( unit ) ;
66516: LD_VAR 0 1
66520: PPUSH
66521: CALL_OW 122
// result := tmp ;
66525: LD_ADDR_VAR 0 2
66529: PUSH
66530: LD_VAR 0 3
66534: ST_TO_ADDR
// end ;
66535: LD_VAR 0 2
66539: RET
// export function ComExitAll ( units ) ; var i ; begin
66540: LD_INT 0
66542: PPUSH
66543: PPUSH
// if not units then
66544: LD_VAR 0 1
66548: NOT
66549: IFFALSE 66553
// exit ;
66551: GO 66579
// for i in units do
66553: LD_ADDR_VAR 0 3
66557: PUSH
66558: LD_VAR 0 1
66562: PUSH
66563: FOR_IN
66564: IFFALSE 66577
// ComExit ( i ) ;
66566: LD_VAR 0 3
66570: PPUSH
66571: CALL 66457 0 1
66575: GO 66563
66577: POP
66578: POP
// end ;
66579: LD_VAR 0 2
66583: RET
// export function ResetHc ; begin
66584: LD_INT 0
66586: PPUSH
// InitHc ;
66587: CALL_OW 19
// hc_importance := 0 ;
66591: LD_ADDR_OWVAR 32
66595: PUSH
66596: LD_INT 0
66598: ST_TO_ADDR
// end ;
66599: LD_VAR 0 1
66603: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66604: LD_INT 0
66606: PPUSH
66607: PPUSH
66608: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66609: LD_ADDR_VAR 0 6
66613: PUSH
66614: LD_VAR 0 1
66618: PUSH
66619: LD_VAR 0 3
66623: PLUS
66624: PUSH
66625: LD_INT 2
66627: DIV
66628: ST_TO_ADDR
// if _x < 0 then
66629: LD_VAR 0 6
66633: PUSH
66634: LD_INT 0
66636: LESS
66637: IFFALSE 66654
// _x := _x * - 1 ;
66639: LD_ADDR_VAR 0 6
66643: PUSH
66644: LD_VAR 0 6
66648: PUSH
66649: LD_INT 1
66651: NEG
66652: MUL
66653: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66654: LD_ADDR_VAR 0 7
66658: PUSH
66659: LD_VAR 0 2
66663: PUSH
66664: LD_VAR 0 4
66668: PLUS
66669: PUSH
66670: LD_INT 2
66672: DIV
66673: ST_TO_ADDR
// if _y < 0 then
66674: LD_VAR 0 7
66678: PUSH
66679: LD_INT 0
66681: LESS
66682: IFFALSE 66699
// _y := _y * - 1 ;
66684: LD_ADDR_VAR 0 7
66688: PUSH
66689: LD_VAR 0 7
66693: PUSH
66694: LD_INT 1
66696: NEG
66697: MUL
66698: ST_TO_ADDR
// result := [ _x , _y ] ;
66699: LD_ADDR_VAR 0 5
66703: PUSH
66704: LD_VAR 0 6
66708: PUSH
66709: LD_VAR 0 7
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: ST_TO_ADDR
// end ;
66718: LD_VAR 0 5
66722: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66723: LD_INT 0
66725: PPUSH
66726: PPUSH
66727: PPUSH
66728: PPUSH
// task := GetTaskList ( unit ) ;
66729: LD_ADDR_VAR 0 7
66733: PUSH
66734: LD_VAR 0 1
66738: PPUSH
66739: CALL_OW 437
66743: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66744: LD_VAR 0 7
66748: NOT
66749: PUSH
66750: LD_VAR 0 1
66754: PPUSH
66755: LD_VAR 0 2
66759: PPUSH
66760: CALL_OW 308
66764: NOT
66765: AND
66766: IFFALSE 66770
// exit ;
66768: GO 66888
// if IsInArea ( unit , area ) then
66770: LD_VAR 0 1
66774: PPUSH
66775: LD_VAR 0 2
66779: PPUSH
66780: CALL_OW 308
66784: IFFALSE 66802
// begin ComMoveToArea ( unit , goAway ) ;
66786: LD_VAR 0 1
66790: PPUSH
66791: LD_VAR 0 3
66795: PPUSH
66796: CALL_OW 113
// exit ;
66800: GO 66888
// end ; if task [ 1 ] [ 1 ] <> M then
66802: LD_VAR 0 7
66806: PUSH
66807: LD_INT 1
66809: ARRAY
66810: PUSH
66811: LD_INT 1
66813: ARRAY
66814: PUSH
66815: LD_STRING M
66817: NONEQUAL
66818: IFFALSE 66822
// exit ;
66820: GO 66888
// x := task [ 1 ] [ 2 ] ;
66822: LD_ADDR_VAR 0 5
66826: PUSH
66827: LD_VAR 0 7
66831: PUSH
66832: LD_INT 1
66834: ARRAY
66835: PUSH
66836: LD_INT 2
66838: ARRAY
66839: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66840: LD_ADDR_VAR 0 6
66844: PUSH
66845: LD_VAR 0 7
66849: PUSH
66850: LD_INT 1
66852: ARRAY
66853: PUSH
66854: LD_INT 3
66856: ARRAY
66857: ST_TO_ADDR
// if InArea ( x , y , area ) then
66858: LD_VAR 0 5
66862: PPUSH
66863: LD_VAR 0 6
66867: PPUSH
66868: LD_VAR 0 2
66872: PPUSH
66873: CALL_OW 309
66877: IFFALSE 66888
// ComStop ( unit ) ;
66879: LD_VAR 0 1
66883: PPUSH
66884: CALL_OW 141
// end ;
66888: LD_VAR 0 4
66892: RET
// export function Abs ( value ) ; begin
66893: LD_INT 0
66895: PPUSH
// result := value ;
66896: LD_ADDR_VAR 0 2
66900: PUSH
66901: LD_VAR 0 1
66905: ST_TO_ADDR
// if value < 0 then
66906: LD_VAR 0 1
66910: PUSH
66911: LD_INT 0
66913: LESS
66914: IFFALSE 66931
// result := value * - 1 ;
66916: LD_ADDR_VAR 0 2
66920: PUSH
66921: LD_VAR 0 1
66925: PUSH
66926: LD_INT 1
66928: NEG
66929: MUL
66930: ST_TO_ADDR
// end ;
66931: LD_VAR 0 2
66935: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66936: LD_INT 0
66938: PPUSH
66939: PPUSH
66940: PPUSH
66941: PPUSH
66942: PPUSH
66943: PPUSH
66944: PPUSH
66945: PPUSH
// if not unit or not building then
66946: LD_VAR 0 1
66950: NOT
66951: PUSH
66952: LD_VAR 0 2
66956: NOT
66957: OR
66958: IFFALSE 66962
// exit ;
66960: GO 67188
// x := GetX ( building ) ;
66962: LD_ADDR_VAR 0 4
66966: PUSH
66967: LD_VAR 0 2
66971: PPUSH
66972: CALL_OW 250
66976: ST_TO_ADDR
// y := GetY ( building ) ;
66977: LD_ADDR_VAR 0 6
66981: PUSH
66982: LD_VAR 0 2
66986: PPUSH
66987: CALL_OW 251
66991: ST_TO_ADDR
// d := GetDir ( building ) ;
66992: LD_ADDR_VAR 0 8
66996: PUSH
66997: LD_VAR 0 2
67001: PPUSH
67002: CALL_OW 254
67006: ST_TO_ADDR
// r := 4 ;
67007: LD_ADDR_VAR 0 9
67011: PUSH
67012: LD_INT 4
67014: ST_TO_ADDR
// for i := 1 to 5 do
67015: LD_ADDR_VAR 0 10
67019: PUSH
67020: DOUBLE
67021: LD_INT 1
67023: DEC
67024: ST_TO_ADDR
67025: LD_INT 5
67027: PUSH
67028: FOR_TO
67029: IFFALSE 67186
// begin _x := ShiftX ( x , d , r + i ) ;
67031: LD_ADDR_VAR 0 5
67035: PUSH
67036: LD_VAR 0 4
67040: PPUSH
67041: LD_VAR 0 8
67045: PPUSH
67046: LD_VAR 0 9
67050: PUSH
67051: LD_VAR 0 10
67055: PLUS
67056: PPUSH
67057: CALL_OW 272
67061: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67062: LD_ADDR_VAR 0 7
67066: PUSH
67067: LD_VAR 0 6
67071: PPUSH
67072: LD_VAR 0 8
67076: PPUSH
67077: LD_VAR 0 9
67081: PUSH
67082: LD_VAR 0 10
67086: PLUS
67087: PPUSH
67088: CALL_OW 273
67092: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67093: LD_VAR 0 5
67097: PPUSH
67098: LD_VAR 0 7
67102: PPUSH
67103: CALL_OW 488
67107: PUSH
67108: LD_VAR 0 5
67112: PPUSH
67113: LD_VAR 0 7
67117: PPUSH
67118: CALL_OW 428
67122: PPUSH
67123: CALL_OW 247
67127: PUSH
67128: LD_INT 3
67130: PUSH
67131: LD_INT 2
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: IN
67138: NOT
67139: AND
67140: IFFALSE 67184
// begin ComMoveXY ( unit , _x , _y ) ;
67142: LD_VAR 0 1
67146: PPUSH
67147: LD_VAR 0 5
67151: PPUSH
67152: LD_VAR 0 7
67156: PPUSH
67157: CALL_OW 111
// result := [ _x , _y ] ;
67161: LD_ADDR_VAR 0 3
67165: PUSH
67166: LD_VAR 0 5
67170: PUSH
67171: LD_VAR 0 7
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: ST_TO_ADDR
// exit ;
67180: POP
67181: POP
67182: GO 67188
// end ; end ;
67184: GO 67028
67186: POP
67187: POP
// end ;
67188: LD_VAR 0 3
67192: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67193: LD_INT 0
67195: PPUSH
67196: PPUSH
67197: PPUSH
// result := 0 ;
67198: LD_ADDR_VAR 0 3
67202: PUSH
67203: LD_INT 0
67205: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67206: LD_VAR 0 1
67210: PUSH
67211: LD_INT 0
67213: LESS
67214: PUSH
67215: LD_VAR 0 1
67219: PUSH
67220: LD_INT 8
67222: GREATER
67223: OR
67224: PUSH
67225: LD_VAR 0 2
67229: PUSH
67230: LD_INT 0
67232: LESS
67233: OR
67234: PUSH
67235: LD_VAR 0 2
67239: PUSH
67240: LD_INT 8
67242: GREATER
67243: OR
67244: IFFALSE 67248
// exit ;
67246: GO 67323
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67248: LD_ADDR_VAR 0 4
67252: PUSH
67253: LD_INT 22
67255: PUSH
67256: LD_VAR 0 2
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PPUSH
67265: CALL_OW 69
67269: PUSH
67270: FOR_IN
67271: IFFALSE 67321
// begin un := UnitShoot ( i ) ;
67273: LD_ADDR_VAR 0 5
67277: PUSH
67278: LD_VAR 0 4
67282: PPUSH
67283: CALL_OW 504
67287: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67288: LD_VAR 0 5
67292: PPUSH
67293: CALL_OW 255
67297: PUSH
67298: LD_VAR 0 1
67302: EQUAL
67303: IFFALSE 67319
// begin result := un ;
67305: LD_ADDR_VAR 0 3
67309: PUSH
67310: LD_VAR 0 5
67314: ST_TO_ADDR
// exit ;
67315: POP
67316: POP
67317: GO 67323
// end ; end ;
67319: GO 67270
67321: POP
67322: POP
// end ;
67323: LD_VAR 0 3
67327: RET
// export function GetCargoBay ( units ) ; begin
67328: LD_INT 0
67330: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67331: LD_ADDR_VAR 0 2
67335: PUSH
67336: LD_VAR 0 1
67340: PPUSH
67341: LD_INT 2
67343: PUSH
67344: LD_INT 34
67346: PUSH
67347: LD_INT 12
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 34
67356: PUSH
67357: LD_INT 51
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 34
67366: PUSH
67367: LD_INT 32
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 34
67376: PUSH
67377: LD_EXP 22
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: PPUSH
67393: CALL_OW 72
67397: ST_TO_ADDR
// end ;
67398: LD_VAR 0 2
67402: RET
// export function Negate ( value ) ; begin
67403: LD_INT 0
67405: PPUSH
// result := not value ;
67406: LD_ADDR_VAR 0 2
67410: PUSH
67411: LD_VAR 0 1
67415: NOT
67416: ST_TO_ADDR
// end ;
67417: LD_VAR 0 2
67421: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
67422: LD_INT 0
67424: PPUSH
// if x1 = x2 then
67425: LD_VAR 0 1
67429: PUSH
67430: LD_VAR 0 3
67434: EQUAL
67435: IFFALSE 67469
// begin if y1 > y2 then
67437: LD_VAR 0 2
67441: PUSH
67442: LD_VAR 0 4
67446: GREATER
67447: IFFALSE 67459
// result := 0 else
67449: LD_ADDR_VAR 0 5
67453: PUSH
67454: LD_INT 0
67456: ST_TO_ADDR
67457: GO 67467
// result := 3 ;
67459: LD_ADDR_VAR 0 5
67463: PUSH
67464: LD_INT 3
67466: ST_TO_ADDR
// exit ;
67467: GO 67555
// end ; if y1 = y2 then
67469: LD_VAR 0 2
67473: PUSH
67474: LD_VAR 0 4
67478: EQUAL
67479: IFFALSE 67513
// begin if x1 > x2 then
67481: LD_VAR 0 1
67485: PUSH
67486: LD_VAR 0 3
67490: GREATER
67491: IFFALSE 67503
// result := 1 else
67493: LD_ADDR_VAR 0 5
67497: PUSH
67498: LD_INT 1
67500: ST_TO_ADDR
67501: GO 67511
// result := 4 ;
67503: LD_ADDR_VAR 0 5
67507: PUSH
67508: LD_INT 4
67510: ST_TO_ADDR
// exit ;
67511: GO 67555
// end ; if x1 > x2 and y1 > y2 then
67513: LD_VAR 0 1
67517: PUSH
67518: LD_VAR 0 3
67522: GREATER
67523: PUSH
67524: LD_VAR 0 2
67528: PUSH
67529: LD_VAR 0 4
67533: GREATER
67534: AND
67535: IFFALSE 67547
// result := 2 else
67537: LD_ADDR_VAR 0 5
67541: PUSH
67542: LD_INT 2
67544: ST_TO_ADDR
67545: GO 67555
// result := 5 ;
67547: LD_ADDR_VAR 0 5
67551: PUSH
67552: LD_INT 5
67554: ST_TO_ADDR
// end ;
67555: LD_VAR 0 5
67559: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67560: LD_INT 0
67562: PPUSH
67563: PPUSH
// if not driver or not IsInUnit ( driver ) then
67564: LD_VAR 0 1
67568: NOT
67569: PUSH
67570: LD_VAR 0 1
67574: PPUSH
67575: CALL_OW 310
67579: NOT
67580: OR
67581: IFFALSE 67585
// exit ;
67583: GO 67675
// vehicle := IsInUnit ( driver ) ;
67585: LD_ADDR_VAR 0 3
67589: PUSH
67590: LD_VAR 0 1
67594: PPUSH
67595: CALL_OW 310
67599: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67600: LD_VAR 0 1
67604: PPUSH
67605: LD_STRING \
67607: PUSH
67608: LD_INT 0
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: LD_INT 0
67616: PUSH
67617: LD_INT 0
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: LD_INT 0
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: PUSH
67635: LD_STRING E
67637: PUSH
67638: LD_INT 0
67640: PUSH
67641: LD_INT 0
67643: PUSH
67644: LD_VAR 0 3
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: LD_INT 0
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PPUSH
67671: CALL_OW 446
// end ;
67675: LD_VAR 0 2
67679: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67680: LD_INT 0
67682: PPUSH
67683: PPUSH
// if not driver or not IsInUnit ( driver ) then
67684: LD_VAR 0 1
67688: NOT
67689: PUSH
67690: LD_VAR 0 1
67694: PPUSH
67695: CALL_OW 310
67699: NOT
67700: OR
67701: IFFALSE 67705
// exit ;
67703: GO 67795
// vehicle := IsInUnit ( driver ) ;
67705: LD_ADDR_VAR 0 3
67709: PUSH
67710: LD_VAR 0 1
67714: PPUSH
67715: CALL_OW 310
67719: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67720: LD_VAR 0 1
67724: PPUSH
67725: LD_STRING \
67727: PUSH
67728: LD_INT 0
67730: PUSH
67731: LD_INT 0
67733: PUSH
67734: LD_INT 0
67736: PUSH
67737: LD_INT 0
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: PUSH
67755: LD_STRING E
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: LD_VAR 0 3
67768: PUSH
67769: LD_INT 0
67771: PUSH
67772: LD_INT 0
67774: PUSH
67775: LD_INT 0
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PPUSH
67791: CALL_OW 447
// end ;
67795: LD_VAR 0 2
67799: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67800: LD_INT 0
67802: PPUSH
67803: PPUSH
67804: PPUSH
// tmp := [ ] ;
67805: LD_ADDR_VAR 0 5
67809: PUSH
67810: EMPTY
67811: ST_TO_ADDR
// for i in units do
67812: LD_ADDR_VAR 0 4
67816: PUSH
67817: LD_VAR 0 1
67821: PUSH
67822: FOR_IN
67823: IFFALSE 67861
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67825: LD_ADDR_VAR 0 5
67829: PUSH
67830: LD_VAR 0 5
67834: PPUSH
67835: LD_VAR 0 5
67839: PUSH
67840: LD_INT 1
67842: PLUS
67843: PPUSH
67844: LD_VAR 0 4
67848: PPUSH
67849: CALL_OW 256
67853: PPUSH
67854: CALL_OW 2
67858: ST_TO_ADDR
67859: GO 67822
67861: POP
67862: POP
// if not tmp then
67863: LD_VAR 0 5
67867: NOT
67868: IFFALSE 67872
// exit ;
67870: GO 67920
// if asc then
67872: LD_VAR 0 2
67876: IFFALSE 67900
// result := SortListByListAsc ( units , tmp ) else
67878: LD_ADDR_VAR 0 3
67882: PUSH
67883: LD_VAR 0 1
67887: PPUSH
67888: LD_VAR 0 5
67892: PPUSH
67893: CALL_OW 76
67897: ST_TO_ADDR
67898: GO 67920
// result := SortListByListDesc ( units , tmp ) ;
67900: LD_ADDR_VAR 0 3
67904: PUSH
67905: LD_VAR 0 1
67909: PPUSH
67910: LD_VAR 0 5
67914: PPUSH
67915: CALL_OW 77
67919: ST_TO_ADDR
// end ;
67920: LD_VAR 0 3
67924: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67925: LD_INT 0
67927: PPUSH
67928: PPUSH
// task := GetTaskList ( mech ) ;
67929: LD_ADDR_VAR 0 4
67933: PUSH
67934: LD_VAR 0 1
67938: PPUSH
67939: CALL_OW 437
67943: ST_TO_ADDR
// if not task then
67944: LD_VAR 0 4
67948: NOT
67949: IFFALSE 67953
// exit ;
67951: GO 67995
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67953: LD_ADDR_VAR 0 3
67957: PUSH
67958: LD_VAR 0 4
67962: PUSH
67963: LD_INT 1
67965: ARRAY
67966: PUSH
67967: LD_INT 1
67969: ARRAY
67970: PUSH
67971: LD_STRING r
67973: EQUAL
67974: PUSH
67975: LD_VAR 0 4
67979: PUSH
67980: LD_INT 1
67982: ARRAY
67983: PUSH
67984: LD_INT 4
67986: ARRAY
67987: PUSH
67988: LD_VAR 0 2
67992: EQUAL
67993: AND
67994: ST_TO_ADDR
// end ;
67995: LD_VAR 0 3
67999: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68000: LD_INT 0
68002: PPUSH
// SetDir ( unit , d ) ;
68003: LD_VAR 0 1
68007: PPUSH
68008: LD_VAR 0 4
68012: PPUSH
68013: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68017: LD_VAR 0 1
68021: PPUSH
68022: LD_VAR 0 2
68026: PPUSH
68027: LD_VAR 0 3
68031: PPUSH
68032: LD_VAR 0 5
68036: PPUSH
68037: CALL_OW 48
// end ;
68041: LD_VAR 0 6
68045: RET
// export function ToNaturalNumber ( number ) ; begin
68046: LD_INT 0
68048: PPUSH
// result := number div 1 ;
68049: LD_ADDR_VAR 0 2
68053: PUSH
68054: LD_VAR 0 1
68058: PUSH
68059: LD_INT 1
68061: DIV
68062: ST_TO_ADDR
// if number < 0 then
68063: LD_VAR 0 1
68067: PUSH
68068: LD_INT 0
68070: LESS
68071: IFFALSE 68081
// result := 0 ;
68073: LD_ADDR_VAR 0 2
68077: PUSH
68078: LD_INT 0
68080: ST_TO_ADDR
// end ;
68081: LD_VAR 0 2
68085: RET
// export function SortByClass ( units , class ) ; var un ; begin
68086: LD_INT 0
68088: PPUSH
68089: PPUSH
// if not units or not class then
68090: LD_VAR 0 1
68094: NOT
68095: PUSH
68096: LD_VAR 0 2
68100: NOT
68101: OR
68102: IFFALSE 68106
// exit ;
68104: GO 68201
// result := [ ] ;
68106: LD_ADDR_VAR 0 3
68110: PUSH
68111: EMPTY
68112: ST_TO_ADDR
// for un in units do
68113: LD_ADDR_VAR 0 4
68117: PUSH
68118: LD_VAR 0 1
68122: PUSH
68123: FOR_IN
68124: IFFALSE 68199
// if GetClass ( un ) = class then
68126: LD_VAR 0 4
68130: PPUSH
68131: CALL_OW 257
68135: PUSH
68136: LD_VAR 0 2
68140: EQUAL
68141: IFFALSE 68168
// result := Insert ( result , 1 , un ) else
68143: LD_ADDR_VAR 0 3
68147: PUSH
68148: LD_VAR 0 3
68152: PPUSH
68153: LD_INT 1
68155: PPUSH
68156: LD_VAR 0 4
68160: PPUSH
68161: CALL_OW 2
68165: ST_TO_ADDR
68166: GO 68197
// result := Replace ( result , result + 1 , un ) ;
68168: LD_ADDR_VAR 0 3
68172: PUSH
68173: LD_VAR 0 3
68177: PPUSH
68178: LD_VAR 0 3
68182: PUSH
68183: LD_INT 1
68185: PLUS
68186: PPUSH
68187: LD_VAR 0 4
68191: PPUSH
68192: CALL_OW 1
68196: ST_TO_ADDR
68197: GO 68123
68199: POP
68200: POP
// end ;
68201: LD_VAR 0 3
68205: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68206: LD_INT 0
68208: PPUSH
68209: PPUSH
68210: PPUSH
68211: PPUSH
68212: PPUSH
68213: PPUSH
68214: PPUSH
// result := [ ] ;
68215: LD_ADDR_VAR 0 4
68219: PUSH
68220: EMPTY
68221: ST_TO_ADDR
// if x - r < 0 then
68222: LD_VAR 0 1
68226: PUSH
68227: LD_VAR 0 3
68231: MINUS
68232: PUSH
68233: LD_INT 0
68235: LESS
68236: IFFALSE 68248
// min_x := 0 else
68238: LD_ADDR_VAR 0 8
68242: PUSH
68243: LD_INT 0
68245: ST_TO_ADDR
68246: GO 68264
// min_x := x - r ;
68248: LD_ADDR_VAR 0 8
68252: PUSH
68253: LD_VAR 0 1
68257: PUSH
68258: LD_VAR 0 3
68262: MINUS
68263: ST_TO_ADDR
// if y - r < 0 then
68264: LD_VAR 0 2
68268: PUSH
68269: LD_VAR 0 3
68273: MINUS
68274: PUSH
68275: LD_INT 0
68277: LESS
68278: IFFALSE 68290
// min_y := 0 else
68280: LD_ADDR_VAR 0 7
68284: PUSH
68285: LD_INT 0
68287: ST_TO_ADDR
68288: GO 68306
// min_y := y - r ;
68290: LD_ADDR_VAR 0 7
68294: PUSH
68295: LD_VAR 0 2
68299: PUSH
68300: LD_VAR 0 3
68304: MINUS
68305: ST_TO_ADDR
// max_x := x + r ;
68306: LD_ADDR_VAR 0 9
68310: PUSH
68311: LD_VAR 0 1
68315: PUSH
68316: LD_VAR 0 3
68320: PLUS
68321: ST_TO_ADDR
// max_y := y + r ;
68322: LD_ADDR_VAR 0 10
68326: PUSH
68327: LD_VAR 0 2
68331: PUSH
68332: LD_VAR 0 3
68336: PLUS
68337: ST_TO_ADDR
// for _x = min_x to max_x do
68338: LD_ADDR_VAR 0 5
68342: PUSH
68343: DOUBLE
68344: LD_VAR 0 8
68348: DEC
68349: ST_TO_ADDR
68350: LD_VAR 0 9
68354: PUSH
68355: FOR_TO
68356: IFFALSE 68457
// for _y = min_y to max_y do
68358: LD_ADDR_VAR 0 6
68362: PUSH
68363: DOUBLE
68364: LD_VAR 0 7
68368: DEC
68369: ST_TO_ADDR
68370: LD_VAR 0 10
68374: PUSH
68375: FOR_TO
68376: IFFALSE 68453
// begin if not ValidHex ( _x , _y ) then
68378: LD_VAR 0 5
68382: PPUSH
68383: LD_VAR 0 6
68387: PPUSH
68388: CALL_OW 488
68392: NOT
68393: IFFALSE 68397
// continue ;
68395: GO 68375
// if GetResourceTypeXY ( _x , _y ) then
68397: LD_VAR 0 5
68401: PPUSH
68402: LD_VAR 0 6
68406: PPUSH
68407: CALL_OW 283
68411: IFFALSE 68451
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68413: LD_ADDR_VAR 0 4
68417: PUSH
68418: LD_VAR 0 4
68422: PPUSH
68423: LD_VAR 0 4
68427: PUSH
68428: LD_INT 1
68430: PLUS
68431: PPUSH
68432: LD_VAR 0 5
68436: PUSH
68437: LD_VAR 0 6
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PPUSH
68446: CALL_OW 1
68450: ST_TO_ADDR
// end ;
68451: GO 68375
68453: POP
68454: POP
68455: GO 68355
68457: POP
68458: POP
// end ;
68459: LD_VAR 0 4
68463: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
68464: LD_INT 0
68466: PPUSH
68467: PPUSH
68468: PPUSH
68469: PPUSH
68470: PPUSH
68471: PPUSH
// if not units then
68472: LD_VAR 0 1
68476: NOT
68477: IFFALSE 68481
// exit ;
68479: GO 68882
// result := UnitFilter ( units , [ f_ok ] ) ;
68481: LD_ADDR_VAR 0 3
68485: PUSH
68486: LD_VAR 0 1
68490: PPUSH
68491: LD_INT 50
68493: PUSH
68494: EMPTY
68495: LIST
68496: PPUSH
68497: CALL_OW 72
68501: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68502: LD_ADDR_VAR 0 7
68506: PUSH
68507: LD_VAR 0 1
68511: PUSH
68512: LD_INT 1
68514: ARRAY
68515: PPUSH
68516: CALL_OW 255
68520: ST_TO_ADDR
// if not result then
68521: LD_VAR 0 3
68525: NOT
68526: IFFALSE 68530
// exit ;
68528: GO 68882
// for i in result do
68530: LD_ADDR_VAR 0 4
68534: PUSH
68535: LD_VAR 0 3
68539: PUSH
68540: FOR_IN
68541: IFFALSE 68880
// begin tag := GetTag ( i ) + 1 ;
68543: LD_ADDR_VAR 0 8
68547: PUSH
68548: LD_VAR 0 4
68552: PPUSH
68553: CALL_OW 110
68557: PUSH
68558: LD_INT 1
68560: PLUS
68561: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68562: LD_ADDR_VAR 0 6
68566: PUSH
68567: LD_VAR 0 4
68571: PPUSH
68572: CALL_OW 250
68576: PPUSH
68577: LD_VAR 0 4
68581: PPUSH
68582: CALL_OW 251
68586: PPUSH
68587: LD_INT 6
68589: PPUSH
68590: CALL 68206 0 3
68594: ST_TO_ADDR
// if cr then
68595: LD_VAR 0 6
68599: IFFALSE 68638
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68601: LD_VAR 0 4
68605: PPUSH
68606: LD_VAR 0 6
68610: PUSH
68611: LD_INT 1
68613: ARRAY
68614: PUSH
68615: LD_INT 1
68617: ARRAY
68618: PPUSH
68619: LD_VAR 0 6
68623: PUSH
68624: LD_INT 1
68626: ARRAY
68627: PUSH
68628: LD_INT 2
68630: ARRAY
68631: PPUSH
68632: CALL_OW 116
68636: GO 68878
// if path > tag then
68638: LD_VAR 0 2
68642: PUSH
68643: LD_VAR 0 8
68647: GREATER
68648: IFFALSE 68826
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
68650: LD_ADDR_VAR 0 5
68654: PUSH
68655: LD_INT 81
68657: PUSH
68658: LD_VAR 0 7
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 91
68669: PUSH
68670: LD_VAR 0 4
68674: PUSH
68675: LD_INT 12
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: LIST
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PPUSH
68687: CALL_OW 69
68691: ST_TO_ADDR
// if enemy then
68692: LD_VAR 0 5
68696: IFFALSE 68724
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68698: LD_VAR 0 4
68702: PPUSH
68703: LD_VAR 0 5
68707: PPUSH
68708: LD_VAR 0 4
68712: PPUSH
68713: CALL_OW 74
68717: PPUSH
68718: CALL_OW 115
68722: GO 68824
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68724: LD_VAR 0 4
68728: PPUSH
68729: LD_VAR 0 2
68733: PUSH
68734: LD_VAR 0 8
68738: ARRAY
68739: PUSH
68740: LD_INT 1
68742: ARRAY
68743: PPUSH
68744: LD_VAR 0 2
68748: PUSH
68749: LD_VAR 0 8
68753: ARRAY
68754: PUSH
68755: LD_INT 2
68757: ARRAY
68758: PPUSH
68759: CALL_OW 297
68763: PUSH
68764: LD_INT 6
68766: GREATER
68767: IFFALSE 68810
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68769: LD_VAR 0 4
68773: PPUSH
68774: LD_VAR 0 2
68778: PUSH
68779: LD_VAR 0 8
68783: ARRAY
68784: PUSH
68785: LD_INT 1
68787: ARRAY
68788: PPUSH
68789: LD_VAR 0 2
68793: PUSH
68794: LD_VAR 0 8
68798: ARRAY
68799: PUSH
68800: LD_INT 2
68802: ARRAY
68803: PPUSH
68804: CALL_OW 114
68808: GO 68824
// SetTag ( i , tag ) ;
68810: LD_VAR 0 4
68814: PPUSH
68815: LD_VAR 0 8
68819: PPUSH
68820: CALL_OW 109
// end else
68824: GO 68878
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68826: LD_ADDR_VAR 0 5
68830: PUSH
68831: LD_INT 81
68833: PUSH
68834: LD_VAR 0 7
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PPUSH
68843: CALL_OW 69
68847: ST_TO_ADDR
// if enemy then
68848: LD_VAR 0 5
68852: IFFALSE 68878
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68854: LD_VAR 0 4
68858: PPUSH
68859: LD_VAR 0 5
68863: PPUSH
68864: LD_VAR 0 4
68868: PPUSH
68869: CALL_OW 74
68873: PPUSH
68874: CALL_OW 115
// end ; end ;
68878: GO 68540
68880: POP
68881: POP
// end ; end_of_file
68882: LD_VAR 0 3
68886: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68887: LD_VAR 0 1
68891: PUSH
68892: LD_INT 200
68894: DOUBLE
68895: GREATEREQUAL
68896: IFFALSE 68904
68898: LD_INT 299
68900: DOUBLE
68901: LESSEQUAL
68902: IFTRUE 68906
68904: GO 68938
68906: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68907: LD_VAR 0 1
68911: PPUSH
68912: LD_VAR 0 2
68916: PPUSH
68917: LD_VAR 0 3
68921: PPUSH
68922: LD_VAR 0 4
68926: PPUSH
68927: LD_VAR 0 5
68931: PPUSH
68932: CALL 25449 0 5
68936: GO 69015
68938: LD_INT 300
68940: DOUBLE
68941: GREATEREQUAL
68942: IFFALSE 68950
68944: LD_INT 399
68946: DOUBLE
68947: LESSEQUAL
68948: IFTRUE 68952
68950: GO 69014
68952: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68953: LD_VAR 0 1
68957: PPUSH
68958: LD_VAR 0 2
68962: PPUSH
68963: LD_VAR 0 3
68967: PPUSH
68968: LD_VAR 0 4
68972: PPUSH
68973: LD_VAR 0 5
68977: PPUSH
68978: LD_VAR 0 6
68982: PPUSH
68983: LD_VAR 0 7
68987: PPUSH
68988: LD_VAR 0 8
68992: PPUSH
68993: LD_VAR 0 9
68997: PPUSH
68998: LD_VAR 0 10
69002: PPUSH
69003: LD_VAR 0 11
69007: PPUSH
69008: CALL 23337 0 11
69012: GO 69015
69014: POP
// end ;
69015: PPOPN 11
69017: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69018: LD_VAR 0 1
69022: PPUSH
69023: LD_VAR 0 2
69027: PPUSH
69028: LD_VAR 0 3
69032: PPUSH
69033: LD_VAR 0 4
69037: PPUSH
69038: LD_VAR 0 5
69042: PPUSH
69043: CALL 25431 0 5
// end ; end_of_file
69047: PPOPN 5
69049: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69050: LD_VAR 0 1
69054: PPUSH
69055: LD_VAR 0 2
69059: PPUSH
69060: LD_VAR 0 3
69064: PPUSH
69065: LD_VAR 0 4
69069: PPUSH
69070: LD_VAR 0 5
69074: PPUSH
69075: LD_VAR 0 6
69079: PPUSH
69080: CALL 12145 0 6
// end ;
69084: PPOPN 6
69086: END
