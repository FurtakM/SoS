// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 253 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1531 0 0
// PrepareRussians ;
  27: CALL 4541 0 0
// PrepareAmericans ;
  31: CALL 3411 0 0
// Action ;
  35: CALL 8421 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: EMPTY
  94: LIST
  95: LIST
  96: LIST
  97: PUSH
  98: LD_OWVAR 67
 102: ARRAY
 103: PUSH
 104: LD_INT 79800
 106: PUSH
 107: LD_INT 73500
 109: PUSH
 110: LD_INT 67200
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: PUSH
 118: LD_OWVAR 67
 122: ARRAY
 123: PUSH
 124: LD_INT 92400
 126: PUSH
 127: LD_INT 86100
 129: PUSH
 130: LD_INT 79800
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_OWVAR 67
 142: ARRAY
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// can_end := false ;
 149: LD_ADDR_EXP 6
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// must_end := false ;
 157: LD_ADDR_EXP 7
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// kill_counter := 0 ;
 165: LD_ADDR_EXP 8
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end ;
 173: LD_VAR 0 1
 177: RET
// every 0 0$01 trigger not debug do
 178: LD_EXP 1
 182: NOT
 183: IFFALSE 252
 185: GO 187
 187: DISABLE
// begin enable ;
 188: ENABLE
// if not must_end then
 189: LD_EXP 7
 193: NOT
 194: IFFALSE 215
// display_strings := [ #Am07-1 , tick ] else
 196: LD_ADDR_OWVAR 47
 200: PUSH
 201: LD_STRING #Am07-1
 203: PUSH
 204: LD_OWVAR 1
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: ST_TO_ADDR
 213: GO 252
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 215: LD_ADDR_OWVAR 47
 219: PUSH
 220: LD_STRING #Am07-1
 222: PUSH
 223: LD_OWVAR 1
 227: PUSH
 228: LD_STRING #Am07-2
 230: PUSH
 231: LD_EXP 5
 235: PUSH
 236: LD_INT 3
 238: ARRAY
 239: PUSH
 240: LD_OWVAR 1
 244: MINUS
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: ST_TO_ADDR
// end ;
 252: END
// function DebugMode ; var i ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
// if not debug then
 257: LD_EXP 1
 261: NOT
 262: IFFALSE 266
// exit ;
 264: GO 273
// FogOff ( 1 ) ;
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 344
// end ;
 273: LD_VAR 0 1
 277: RET
// every 3 trigger debug do var i , filter ;
 278: LD_EXP 1
 282: IFFALSE 371
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
// begin enable ;
 291: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 292: LD_ADDR_VAR 0 2
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 3
 309: PUSH
 310: LD_INT 24
 312: PUSH
 313: LD_INT 500
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: ST_TO_ADDR
// if not filter then
 333: LD_VAR 0 2
 337: NOT
 338: IFFALSE 342
// exit ;
 340: GO 371
// for i in filter do
 342: LD_ADDR_VAR 0 1
 346: PUSH
 347: LD_VAR 0 2
 351: PUSH
 352: FOR_IN
 353: IFFALSE 369
// SetLives ( i , 1000 ) ;
 355: LD_VAR 0 1
 359: PPUSH
 360: LD_INT 1000
 362: PPUSH
 363: CALL_OW 234
 367: GO 352
 369: POP
 370: POP
// end ;
 371: PPOPN 2
 373: END
// every 0 0$1 trigger kill_counter >= 20 do
 374: LD_EXP 8
 378: PUSH
 379: LD_INT 20
 381: GREATEREQUAL
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 387: LD_STRING ACH_HITMAN
 389: PPUSH
 390: CALL_OW 543
 394: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 395: LD_INT 22
 397: PUSH
 398: LD_INT 1
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: LD_INT 23
 407: PUSH
 408: LD_INT 3
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 2
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PPUSH
 430: CALL_OW 69
 434: PUSH
 435: LD_INT 3
 437: GREATEREQUAL
 438: IFFALSE 450
 440: GO 442
 442: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 443: LD_STRING ACH_TANKACE
 445: PPUSH
 446: CALL_OW 543
 450: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 451: LD_INT 2
 453: PUSH
 454: LD_INT 30
 456: PUSH
 457: LD_INT 0
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: LD_INT 0
 486: EQUAL
 487: IFFALSE 499
 489: GO 491
 491: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 492: LD_STRING ACH_COMMANDO
 494: PPUSH
 495: CALL_OW 543
 499: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 500: LD_INT 0
 502: PPUSH
// uc_side := side ;
 503: LD_ADDR_OWVAR 20
 507: PUSH
 508: LD_VAR 0 1
 512: ST_TO_ADDR
// uc_nation := nation ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_VAR 0 2
 522: ST_TO_ADDR
// vc_chassis := chassis ;
 523: LD_ADDR_OWVAR 37
 527: PUSH
 528: LD_VAR 0 3
 532: ST_TO_ADDR
// vc_engine := engine ;
 533: LD_ADDR_OWVAR 39
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// vc_control := control ;
 543: LD_ADDR_OWVAR 38
 547: PUSH
 548: LD_VAR 0 5
 552: ST_TO_ADDR
// vc_weapon := weapon ;
 553: LD_ADDR_OWVAR 40
 557: PUSH
 558: LD_VAR 0 6
 562: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 563: LD_ADDR_OWVAR 41
 567: PUSH
 568: LD_VAR 0 7
 572: ST_TO_ADDR
// result := CreateVehicle ;
 573: LD_ADDR_VAR 0 8
 577: PUSH
 578: CALL_OW 45
 582: ST_TO_ADDR
// end ;
 583: LD_VAR 0 8
 587: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 588: LD_INT 0
 590: PPUSH
 591: PPUSH
 592: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_INT 22
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: LD_INT 21
 610: PUSH
 611: LD_INT 1
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: PUSH
 618: LD_INT 50
 620: PUSH
 621: EMPTY
 622: LIST
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: LIST
 628: PPUSH
 629: CALL_OW 69
 633: PUSH
 634: LD_EXP 9
 638: PUSH
 639: LD_EXP 10
 643: PUSH
 644: LD_EXP 11
 648: PUSH
 649: LD_EXP 12
 653: PUSH
 654: LD_EXP 13
 658: PUSH
 659: LD_EXP 14
 663: PUSH
 664: LD_EXP 15
 668: PUSH
 669: LD_EXP 16
 673: PUSH
 674: LD_EXP 18
 678: PUSH
 679: LD_EXP 17
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: DIFF
 696: ST_TO_ADDR
// if not filter then
 697: LD_VAR 0 4
 701: NOT
 702: IFFALSE 706
// exit ;
 704: GO 733
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: LD_VAR 0 4
 715: PPUSH
 716: LD_INT 26
 718: PUSH
 719: LD_VAR 0 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PPUSH
 728: CALL_OW 72
 732: ST_TO_ADDR
// end ;
 733: LD_VAR 0 2
 737: RET
// export function SayX ( units , ident ) ; var i ; begin
 738: LD_INT 0
 740: PPUSH
 741: PPUSH
// result := false ;
 742: LD_ADDR_VAR 0 3
 746: PUSH
 747: LD_INT 0
 749: ST_TO_ADDR
// if not units then
 750: LD_VAR 0 1
 754: NOT
 755: IFFALSE 759
// exit ;
 757: GO 813
// for i in units do
 759: LD_ADDR_VAR 0 4
 763: PUSH
 764: LD_VAR 0 1
 768: PUSH
 769: FOR_IN
 770: IFFALSE 811
// if IsOk ( i ) then
 772: LD_VAR 0 4
 776: PPUSH
 777: CALL_OW 302
 781: IFFALSE 809
// begin Say ( i , ident ) ;
 783: LD_VAR 0 4
 787: PPUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: CALL_OW 88
// result := i ;
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_VAR 0 4
 806: ST_TO_ADDR
// break ;
 807: GO 811
// end ;
 809: GO 769
 811: POP
 812: POP
// end ;
 813: LD_VAR 0 3
 817: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 818: LD_INT 0
 820: PPUSH
 821: PPUSH
 822: PPUSH
 823: PPUSH
 824: PPUSH
// if not un or not IsOk ( un ) then
 825: LD_VAR 0 1
 829: NOT
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 302
 840: NOT
 841: OR
 842: IFFALSE 846
// exit ;
 844: GO 1136
// side := GetSide ( un ) ;
 846: LD_ADDR_VAR 0 9
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 255
 860: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 861: LD_ADDR_VAR 0 7
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_VAR 0 9
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: PUSH
 878: LD_INT 30
 880: PUSH
 881: LD_INT 32
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 50
 890: PUSH
 891: EMPTY
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 69
 910: PUSH
 911: LD_VAR 0 2
 915: DIFF
 916: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 917: LD_ADDR_VAR 0 8
 921: PUSH
 922: LD_INT 22
 924: PUSH
 925: LD_VAR 0 9
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 30
 936: PUSH
 937: LD_INT 5
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: CALL_OW 69
 952: ST_TO_ADDR
// if not filter then
 953: LD_VAR 0 7
 957: NOT
 958: IFFALSE 1048
// begin ComMoveXY ( un , x , y ) ;
 960: LD_VAR 0 1
 964: PPUSH
 965: LD_VAR 0 3
 969: PPUSH
 970: LD_VAR 0 4
 974: PPUSH
 975: CALL_OW 111
// if barracks then
 979: LD_VAR 0 8
 983: IFFALSE 1046
// for i in barracks do
 985: LD_ADDR_VAR 0 6
 989: PUSH
 990: LD_VAR 0 8
 994: PUSH
 995: FOR_IN
 996: IFFALSE 1044
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
 998: LD_VAR 0 6
1002: PPUSH
1003: CALL_OW 313
1007: PUSH
1008: LD_INT 6
1010: LESS
1011: PUSH
1012: LD_VAR 0 6
1016: PPUSH
1017: CALL_OW 302
1021: AND
1022: IFFALSE 1042
// begin AddComEnterUnit ( un , i ) ;
1024: LD_VAR 0 1
1028: PPUSH
1029: LD_VAR 0 6
1033: PPUSH
1034: CALL_OW 180
// exit ;
1038: POP
1039: POP
1040: GO 1136
// end ; end ;
1042: GO 995
1044: POP
1045: POP
// end else
1046: GO 1136
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1048: LD_ADDR_VAR 0 7
1052: PUSH
1053: LD_VAR 0 1
1057: PPUSH
1058: LD_VAR 0 7
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL 34669 0 4
1073: ST_TO_ADDR
// for i in filter do
1074: LD_ADDR_VAR 0 6
1078: PUSH
1079: LD_VAR 0 7
1083: PUSH
1084: FOR_IN
1085: IFFALSE 1134
// if GetTag ( i ) <> 7 then
1087: LD_VAR 0 6
1091: PPUSH
1092: CALL_OW 110
1096: PUSH
1097: LD_INT 7
1099: NONEQUAL
1100: IFFALSE 1132
// begin ComEnterUnit ( un , i ) ;
1102: LD_VAR 0 1
1106: PPUSH
1107: LD_VAR 0 6
1111: PPUSH
1112: CALL_OW 120
// SetTag ( i , 7 ) ;
1116: LD_VAR 0 6
1120: PPUSH
1121: LD_INT 7
1123: PPUSH
1124: CALL_OW 109
// exit ;
1128: POP
1129: POP
1130: GO 1136
// end ;
1132: GO 1084
1134: POP
1135: POP
// end ; end ;
1136: LD_VAR 0 5
1140: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1141: LD_INT 0
1143: PPUSH
1144: PPUSH
1145: PPUSH
// if not base then
1146: LD_VAR 0 1
1150: NOT
1151: IFFALSE 1155
// exit ;
1153: GO 1213
// tmp := GetEnergy ( GetBase ( base ) ) ;
1155: LD_ADDR_VAR 0 4
1159: PUSH
1160: LD_VAR 0 1
1164: PPUSH
1165: CALL_OW 274
1169: PPUSH
1170: CALL_OW 278
1174: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1175: LD_VAR 0 4
1179: PUSH
1180: LD_INT 1
1182: ARRAY
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 4
1191: ARRAY
1192: GREATER
1193: IFFALSE 1205
// result := true else
1195: LD_ADDR_VAR 0 2
1199: PUSH
1200: LD_INT 1
1202: ST_TO_ADDR
1203: GO 1213
// result := false ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_INT 0
1212: ST_TO_ADDR
// end ;
1213: LD_VAR 0 2
1217: RET
// export function FilterPeople ( side ) ; begin
1218: LD_INT 0
1220: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_VAR 0 1
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 21
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PPUSH
1252: CALL_OW 69
1256: ST_TO_ADDR
// end ;
1257: LD_VAR 0 2
1261: RET
// export function FilterDrivers ( side ) ; begin
1262: LD_INT 0
1264: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_INT 22
1272: PUSH
1273: LD_VAR 0 1
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 3
1284: PUSH
1285: LD_INT 56
1287: PUSH
1288: EMPTY
1289: LIST
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: ST_TO_ADDR
// end ;
1304: LD_VAR 0 2
1308: RET
// export function FilterPeopleArea ( side , area ) ; begin
1309: LD_INT 0
1311: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1312: LD_ADDR_VAR 0 3
1316: PUSH
1317: LD_VAR 0 2
1321: PPUSH
1322: LD_INT 22
1324: PUSH
1325: LD_INT 1
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: LD_INT 21
1334: PUSH
1335: LD_INT 1
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 70
1350: ST_TO_ADDR
// end ;
1351: LD_VAR 0 3
1355: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1356: LD_INT 0
1358: PPUSH
1359: PPUSH
1360: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1361: LD_ADDR_VAR 0 5
1365: PUSH
1366: LD_VAR 0 2
1370: PPUSH
1371: LD_INT 22
1373: PUSH
1374: LD_INT 1
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 21
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 58
1396: PUSH
1397: EMPTY
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: PPUSH
1409: CALL_OW 70
1413: ST_TO_ADDR
// result := [ ] ;
1414: LD_ADDR_VAR 0 3
1418: PUSH
1419: EMPTY
1420: ST_TO_ADDR
// if not tmp then
1421: LD_VAR 0 5
1425: NOT
1426: IFFALSE 1430
// exit ;
1428: GO 1482
// for i in tmp do
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: FOR_IN
1441: IFFALSE 1466
// result := result union IsDrivenBy ( i ) ;
1443: LD_ADDR_VAR 0 3
1447: PUSH
1448: LD_VAR 0 3
1452: PUSH
1453: LD_VAR 0 4
1457: PPUSH
1458: CALL_OW 311
1462: UNION
1463: ST_TO_ADDR
1464: GO 1440
1466: POP
1467: POP
// result := result diff 0 ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_VAR 0 3
1477: PUSH
1478: LD_INT 0
1480: DIFF
1481: ST_TO_ADDR
// end ;
1482: LD_VAR 0 3
1486: RET
// export function FilterBuildings ( side ) ; begin
1487: LD_INT 0
1489: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: LD_INT 22
1497: PUSH
1498: LD_VAR 0 1
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 3
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PPUSH
1521: CALL_OW 69
1525: ST_TO_ADDR
// end ;
1526: LD_VAR 0 2
1530: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1531: LD_INT 0
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side = 0 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 0
1544: ST_TO_ADDR
// uc_nation = 0 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 0
1552: ST_TO_ADDR
// nat_area := wildArea ;
1553: LD_ADDR_VAR 0 4
1557: PUSH
1558: LD_INT 3
1560: ST_TO_ADDR
// InitHc ;
1561: CALL_OW 19
// for i = 1 to 4 do
1565: LD_ADDR_VAR 0 2
1569: PUSH
1570: DOUBLE
1571: LD_INT 1
1573: DEC
1574: ST_TO_ADDR
1575: LD_INT 4
1577: PUSH
1578: FOR_TO
1579: IFFALSE 1634
// begin hc_class = 18 ;
1581: LD_ADDR_OWVAR 28
1585: PUSH
1586: LD_INT 18
1588: ST_TO_ADDR
// hc_gallery =  ;
1589: LD_ADDR_OWVAR 33
1593: PUSH
1594: LD_STRING 
1596: ST_TO_ADDR
// hc_face_number = 1 ;
1597: LD_ADDR_OWVAR 34
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// animal := CreateHuman ;
1605: LD_ADDR_VAR 0 3
1609: PUSH
1610: CALL_OW 44
1614: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1615: LD_VAR 0 3
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
// end ;
1632: GO 1578
1634: POP
1635: POP
// for i = 1 to 6 do
1636: LD_ADDR_VAR 0 2
1640: PUSH
1641: DOUBLE
1642: LD_INT 1
1644: DEC
1645: ST_TO_ADDR
1646: LD_INT 6
1648: PUSH
1649: FOR_TO
1650: IFFALSE 1721
// begin hc_class = class_tiger ;
1652: LD_ADDR_OWVAR 28
1656: PUSH
1657: LD_INT 14
1659: ST_TO_ADDR
// hc_gallery =  ;
1660: LD_ADDR_OWVAR 33
1664: PUSH
1665: LD_STRING 
1667: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1668: LD_ADDR_OWVAR 35
1672: PUSH
1673: LD_INT 0
1675: PPUSH
1676: LD_INT 10
1678: PPUSH
1679: CALL_OW 12
1683: ST_TO_ADDR
// hc_face_number = 3 ;
1684: LD_ADDR_OWVAR 34
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// animal := CreateHuman ;
1692: LD_ADDR_VAR 0 3
1696: PUSH
1697: CALL_OW 44
1701: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_VAR 0 4
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL_OW 49
// end ;
1719: GO 1649
1721: POP
1722: POP
// for i = 1 to 2 do
1723: LD_ADDR_VAR 0 2
1727: PUSH
1728: DOUBLE
1729: LD_INT 1
1731: DEC
1732: ST_TO_ADDR
1733: LD_INT 2
1735: PUSH
1736: FOR_TO
1737: IFFALSE 1800
// begin hc_class = 21 ;
1739: LD_ADDR_OWVAR 28
1743: PUSH
1744: LD_INT 21
1746: ST_TO_ADDR
// hc_gallery =  ;
1747: LD_ADDR_OWVAR 33
1751: PUSH
1752: LD_STRING 
1754: ST_TO_ADDR
// hc_agressivity = 0 ;
1755: LD_ADDR_OWVAR 35
1759: PUSH
1760: LD_INT 0
1762: ST_TO_ADDR
// hc_face_number = 5 ;
1763: LD_ADDR_OWVAR 34
1767: PUSH
1768: LD_INT 5
1770: ST_TO_ADDR
// animal := CreateHuman ;
1771: LD_ADDR_VAR 0 3
1775: PUSH
1776: CALL_OW 44
1780: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1781: LD_VAR 0 3
1785: PPUSH
1786: LD_VAR 0 4
1790: PPUSH
1791: LD_INT 0
1793: PPUSH
1794: CALL_OW 49
// end ;
1798: GO 1736
1800: POP
1801: POP
// for i = 1 to 6 do
1802: LD_ADDR_VAR 0 2
1806: PUSH
1807: DOUBLE
1808: LD_INT 1
1810: DEC
1811: ST_TO_ADDR
1812: LD_INT 6
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1871
// begin hc_class = 13 ;
1818: LD_ADDR_OWVAR 28
1822: PUSH
1823: LD_INT 13
1825: ST_TO_ADDR
// hc_gallery =  ;
1826: LD_ADDR_OWVAR 33
1830: PUSH
1831: LD_STRING 
1833: ST_TO_ADDR
// hc_face_number = 4 ;
1834: LD_ADDR_OWVAR 34
1838: PUSH
1839: LD_INT 4
1841: ST_TO_ADDR
// animal := CreateHuman ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 44
1851: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_VAR 0 4
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL_OW 49
// end ;
1869: GO 1815
1871: POP
1872: POP
// for i = 1 to 2 do
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PUSH
1886: FOR_TO
1887: IFFALSE 1946
// begin hc_class = 20 ;
1889: LD_ADDR_OWVAR 28
1893: PUSH
1894: LD_INT 20
1896: ST_TO_ADDR
// hc_gallery =  ;
1897: LD_ADDR_OWVAR 33
1901: PUSH
1902: LD_STRING 
1904: ST_TO_ADDR
// hc_face_number = 2 ;
1905: LD_ADDR_OWVAR 34
1909: PUSH
1910: LD_INT 2
1912: ST_TO_ADDR
// animal := CreateHuman ;
1913: LD_ADDR_VAR 0 3
1917: PUSH
1918: CALL_OW 44
1922: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1923: LD_VAR 0 3
1927: PPUSH
1928: LD_INT 101
1930: PPUSH
1931: LD_INT 37
1933: PPUSH
1934: LD_INT 3
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 50
// end ;
1944: GO 1886
1946: POP
1947: POP
// for i = 1 to 1 do
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: DOUBLE
1954: LD_INT 1
1956: DEC
1957: ST_TO_ADDR
1958: LD_INT 1
1960: PUSH
1961: FOR_TO
1962: IFFALSE 2009
// begin vc_chassis := 31 ;
1964: LD_ADDR_OWVAR 37
1968: PUSH
1969: LD_INT 31
1971: ST_TO_ADDR
// vc_control := control_rider ;
1972: LD_ADDR_OWVAR 38
1976: PUSH
1977: LD_INT 4
1979: ST_TO_ADDR
// animal := CreateVehicle ;
1980: LD_ADDR_VAR 0 3
1984: PUSH
1985: CALL_OW 45
1989: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1990: LD_VAR 0 3
1994: PPUSH
1995: LD_VAR 0 4
1999: PPUSH
2000: LD_INT 0
2002: PPUSH
2003: CALL_OW 49
// end ;
2007: GO 1961
2009: POP
2010: POP
// end ;
2011: LD_VAR 0 1
2015: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2016: LD_INT 0
2018: PPUSH
2019: PPUSH
2020: PPUSH
2021: PPUSH
// result := [ ] ;
2022: LD_ADDR_VAR 0 2
2026: PUSH
2027: EMPTY
2028: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2029: LD_ADDR_VAR 0 4
2033: PUSH
2034: LD_INT 81
2036: PUSH
2037: LD_VAR 0 1
2041: PPUSH
2042: CALL_OW 255
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 91
2053: PUSH
2054: LD_VAR 0 1
2058: PUSH
2059: LD_INT 15
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 2
2069: PUSH
2070: LD_INT 30
2072: PUSH
2073: LD_INT 32
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 30
2082: PUSH
2083: LD_INT 33
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL_OW 69
2104: ST_TO_ADDR
// if not tmp then
2105: LD_VAR 0 4
2109: NOT
2110: IFFALSE 2114
// exit ;
2112: GO 2183
// for i in tmp do
2114: LD_ADDR_VAR 0 3
2118: PUSH
2119: LD_VAR 0 4
2123: PUSH
2124: FOR_IN
2125: IFFALSE 2181
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2127: LD_ADDR_VAR 0 5
2131: PUSH
2132: LD_VAR 0 3
2136: PPUSH
2137: CALL_OW 274
2141: PPUSH
2142: CALL_OW 278
2146: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2147: LD_VAR 0 5
2151: PUSH
2152: LD_INT 4
2154: ARRAY
2155: PUSH
2156: LD_VAR 0 5
2160: PUSH
2161: LD_INT 1
2163: ARRAY
2164: GREATER
2165: IFFALSE 2179
// begin result := i ;
2167: LD_ADDR_VAR 0 2
2171: PUSH
2172: LD_VAR 0 3
2176: ST_TO_ADDR
// break ;
2177: GO 2181
// end ; end ;
2179: GO 2124
2181: POP
2182: POP
// end ;
2183: LD_VAR 0 2
2187: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2188: LD_INT 0
2190: PPUSH
2191: PPUSH
2192: PPUSH
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
// result := false ;
2206: LD_ADDR_VAR 0 2
2210: PUSH
2211: LD_INT 0
2213: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2214: LD_VAR 0 1
2218: NOT
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: CALL_OW 266
2229: PUSH
2230: LD_INT 32
2232: PUSH
2233: LD_INT 33
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: IN
2240: NOT
2241: OR
2242: IFFALSE 2246
// exit ;
2244: GO 3406
// nat := GetNation ( tower ) ;
2246: LD_ADDR_VAR 0 11
2250: PUSH
2251: LD_VAR 0 1
2255: PPUSH
2256: CALL_OW 248
2260: ST_TO_ADDR
// side := GetSide ( tower ) ;
2261: LD_ADDR_VAR 0 15
2265: PUSH
2266: LD_VAR 0 1
2270: PPUSH
2271: CALL_OW 255
2275: ST_TO_ADDR
// x := GetX ( tower ) ;
2276: LD_ADDR_VAR 0 9
2280: PUSH
2281: LD_VAR 0 1
2285: PPUSH
2286: CALL_OW 250
2290: ST_TO_ADDR
// y := GetY ( tower ) ;
2291: LD_ADDR_VAR 0 10
2295: PUSH
2296: LD_VAR 0 1
2300: PPUSH
2301: CALL_OW 251
2305: ST_TO_ADDR
// if not x or not y then
2306: LD_VAR 0 9
2310: NOT
2311: PUSH
2312: LD_VAR 0 10
2316: NOT
2317: OR
2318: IFFALSE 2322
// exit ;
2320: GO 3406
// weapon := 0 ;
2322: LD_ADDR_VAR 0 17
2326: PUSH
2327: LD_INT 0
2329: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2330: LD_ADDR_VAR 0 16
2334: PUSH
2335: LD_INT 42
2337: PUSH
2338: LD_INT 43
2340: PUSH
2341: LD_INT 44
2343: PUSH
2344: LD_INT 46
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: ST_TO_ADDR
// if not fac_list then
2353: LD_VAR 0 16
2357: NOT
2358: IFFALSE 2362
// exit ;
2360: GO 3406
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_INT 4
2369: PUSH
2370: LD_INT 5
2372: PUSH
2373: LD_INT 9
2375: PUSH
2376: LD_INT 10
2378: PUSH
2379: LD_INT 6
2381: PUSH
2382: LD_INT 7
2384: PUSH
2385: LD_INT 11
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 27
2399: PUSH
2400: LD_INT 28
2402: PUSH
2403: LD_INT 26
2405: PUSH
2406: LD_INT 30
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 43
2417: PUSH
2418: LD_INT 44
2420: PUSH
2421: LD_INT 46
2423: PUSH
2424: LD_INT 45
2426: PUSH
2427: LD_INT 47
2429: PUSH
2430: LD_INT 49
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: PUSH
2446: LD_VAR 0 11
2450: ARRAY
2451: ST_TO_ADDR
// for i in list do
2452: LD_ADDR_VAR 0 7
2456: PUSH
2457: LD_VAR 0 4
2461: PUSH
2462: FOR_IN
2463: IFFALSE 2496
// if not i in fac_list then
2465: LD_VAR 0 7
2469: PUSH
2470: LD_VAR 0 16
2474: IN
2475: NOT
2476: IFFALSE 2494
// list := list diff i ;
2478: LD_ADDR_VAR 0 4
2482: PUSH
2483: LD_VAR 0 4
2487: PUSH
2488: LD_VAR 0 7
2492: DIFF
2493: ST_TO_ADDR
2494: GO 2462
2496: POP
2497: POP
// if not list then
2498: LD_VAR 0 4
2502: NOT
2503: IFFALSE 2507
// exit ;
2505: GO 3406
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2507: LD_VAR 0 11
2511: PUSH
2512: LD_INT 3
2514: EQUAL
2515: PUSH
2516: LD_INT 49
2518: PUSH
2519: LD_VAR 0 4
2523: IN
2524: AND
2525: PUSH
2526: LD_INT 31
2528: PPUSH
2529: LD_VAR 0 15
2533: PPUSH
2534: CALL_OW 321
2538: PUSH
2539: LD_INT 2
2541: EQUAL
2542: AND
2543: IFFALSE 2603
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2545: LD_INT 22
2547: PUSH
2548: LD_VAR 0 15
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 35
2559: PUSH
2560: LD_INT 49
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 91
2569: PUSH
2570: LD_VAR 0 1
2574: PUSH
2575: LD_INT 10
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 69
2592: NOT
2593: IFFALSE 2603
// weapon := ru_time_lapser ;
2595: LD_ADDR_VAR 0 17
2599: PUSH
2600: LD_INT 49
2602: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2603: LD_VAR 0 11
2607: PUSH
2608: LD_INT 1
2610: PUSH
2611: LD_INT 2
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: IN
2618: PUSH
2619: LD_INT 11
2621: PUSH
2622: LD_VAR 0 4
2626: IN
2627: PUSH
2628: LD_INT 30
2630: PUSH
2631: LD_VAR 0 4
2635: IN
2636: OR
2637: AND
2638: PUSH
2639: LD_INT 6
2641: PPUSH
2642: LD_VAR 0 15
2646: PPUSH
2647: CALL_OW 321
2651: PUSH
2652: LD_INT 2
2654: EQUAL
2655: AND
2656: IFFALSE 2821
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2658: LD_INT 22
2660: PUSH
2661: LD_VAR 0 15
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: LD_INT 2
2672: PUSH
2673: LD_INT 35
2675: PUSH
2676: LD_INT 11
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 35
2685: PUSH
2686: LD_INT 30
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 91
2700: PUSH
2701: LD_VAR 0 1
2705: PUSH
2706: LD_INT 18
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: LIST
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: PPUSH
2719: CALL_OW 69
2723: NOT
2724: PUSH
2725: LD_INT 22
2727: PUSH
2728: LD_VAR 0 15
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 2
2739: PUSH
2740: LD_INT 30
2742: PUSH
2743: LD_INT 32
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 30
2752: PUSH
2753: LD_INT 33
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: LIST
2764: PUSH
2765: LD_INT 91
2767: PUSH
2768: LD_VAR 0 1
2772: PUSH
2773: LD_INT 12
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: EMPTY
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: PUSH
2794: LD_INT 2
2796: GREATER
2797: AND
2798: IFFALSE 2821
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2800: LD_ADDR_VAR 0 17
2804: PUSH
2805: LD_INT 11
2807: PUSH
2808: LD_INT 30
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_VAR 0 11
2819: ARRAY
2820: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2821: LD_VAR 0 17
2825: NOT
2826: PUSH
2827: LD_INT 40
2829: PPUSH
2830: LD_VAR 0 15
2834: PPUSH
2835: CALL_OW 321
2839: PUSH
2840: LD_INT 2
2842: EQUAL
2843: AND
2844: PUSH
2845: LD_INT 7
2847: PUSH
2848: LD_VAR 0 4
2852: IN
2853: PUSH
2854: LD_INT 28
2856: PUSH
2857: LD_VAR 0 4
2861: IN
2862: OR
2863: PUSH
2864: LD_INT 45
2866: PUSH
2867: LD_VAR 0 4
2871: IN
2872: OR
2873: AND
2874: IFFALSE 3128
// begin hex := GetHexInfo ( x , y ) ;
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: LD_VAR 0 9
2885: PPUSH
2886: LD_VAR 0 10
2890: PPUSH
2891: CALL_OW 546
2895: ST_TO_ADDR
// if hex [ 1 ] then
2896: LD_VAR 0 3
2900: PUSH
2901: LD_INT 1
2903: ARRAY
2904: IFFALSE 2908
// exit ;
2906: GO 3406
// height := hex [ 2 ] ;
2908: LD_ADDR_VAR 0 14
2912: PUSH
2913: LD_VAR 0 3
2917: PUSH
2918: LD_INT 2
2920: ARRAY
2921: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2922: LD_ADDR_VAR 0 13
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: LD_INT 2
2932: PUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 5
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: ST_TO_ADDR
// for i in tmp do
2945: LD_ADDR_VAR 0 7
2949: PUSH
2950: LD_VAR 0 13
2954: PUSH
2955: FOR_IN
2956: IFFALSE 3126
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2958: LD_ADDR_VAR 0 8
2962: PUSH
2963: LD_VAR 0 9
2967: PPUSH
2968: LD_VAR 0 7
2972: PPUSH
2973: LD_INT 5
2975: PPUSH
2976: CALL_OW 272
2980: PUSH
2981: LD_VAR 0 10
2985: PPUSH
2986: LD_VAR 0 7
2990: PPUSH
2991: LD_INT 5
2993: PPUSH
2994: CALL_OW 273
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3003: LD_VAR 0 8
3007: PUSH
3008: LD_INT 1
3010: ARRAY
3011: PPUSH
3012: LD_VAR 0 8
3016: PUSH
3017: LD_INT 2
3019: ARRAY
3020: PPUSH
3021: CALL_OW 488
3025: IFFALSE 3124
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3027: LD_ADDR_VAR 0 3
3031: PUSH
3032: LD_VAR 0 8
3036: PUSH
3037: LD_INT 1
3039: ARRAY
3040: PPUSH
3041: LD_VAR 0 8
3045: PUSH
3046: LD_INT 2
3048: ARRAY
3049: PPUSH
3050: CALL_OW 546
3054: ST_TO_ADDR
// if hex [ 1 ] then
3055: LD_VAR 0 3
3059: PUSH
3060: LD_INT 1
3062: ARRAY
3063: IFFALSE 3067
// continue ;
3065: GO 2955
// h := hex [ 2 ] ;
3067: LD_ADDR_VAR 0 12
3071: PUSH
3072: LD_VAR 0 3
3076: PUSH
3077: LD_INT 2
3079: ARRAY
3080: ST_TO_ADDR
// if h + 7 < height then
3081: LD_VAR 0 12
3085: PUSH
3086: LD_INT 7
3088: PLUS
3089: PUSH
3090: LD_VAR 0 14
3094: LESS
3095: IFFALSE 3124
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3097: LD_ADDR_VAR 0 17
3101: PUSH
3102: LD_INT 7
3104: PUSH
3105: LD_INT 28
3107: PUSH
3108: LD_INT 45
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: PUSH
3116: LD_VAR 0 11
3120: ARRAY
3121: ST_TO_ADDR
// break ;
3122: GO 3126
// end ; end ; end ;
3124: GO 2955
3126: POP
3127: POP
// end ; if not weapon then
3128: LD_VAR 0 17
3132: NOT
3133: IFFALSE 3288
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3135: LD_ADDR_VAR 0 4
3139: PUSH
3140: LD_VAR 0 4
3144: PUSH
3145: LD_INT 11
3147: PUSH
3148: LD_INT 30
3150: PUSH
3151: LD_INT 49
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: LIST
3158: DIFF
3159: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3160: LD_ADDR_VAR 0 13
3164: PUSH
3165: LD_INT 22
3167: PUSH
3168: LD_VAR 0 15
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 91
3179: PUSH
3180: LD_VAR 0 1
3184: PUSH
3185: LD_INT 6
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 3
3195: PUSH
3196: LD_INT 35
3198: PUSH
3199: LD_INT 0
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: PPUSH
3215: CALL_OW 69
3219: ST_TO_ADDR
// for i in tmp do
3220: LD_ADDR_VAR 0 7
3224: PUSH
3225: LD_VAR 0 13
3229: PUSH
3230: FOR_IN
3231: IFFALSE 3256
// list := list diff GetBWeapon ( i ) ;
3233: LD_ADDR_VAR 0 4
3237: PUSH
3238: LD_VAR 0 4
3242: PUSH
3243: LD_VAR 0 7
3247: PPUSH
3248: CALL_OW 269
3252: DIFF
3253: ST_TO_ADDR
3254: GO 3230
3256: POP
3257: POP
// if list then
3258: LD_VAR 0 4
3262: IFFALSE 3288
// weapon := list [ rand ( 1 , list ) ] ;
3264: LD_ADDR_VAR 0 17
3268: PUSH
3269: LD_VAR 0 4
3273: PUSH
3274: LD_INT 1
3276: PPUSH
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL_OW 12
3286: ARRAY
3287: ST_TO_ADDR
// end ; if weapon then
3288: LD_VAR 0 17
3292: IFFALSE 3406
// begin tmp := CostOfWeapon ( weapon ) ;
3294: LD_ADDR_VAR 0 13
3298: PUSH
3299: LD_VAR 0 17
3303: PPUSH
3304: CALL_OW 451
3308: ST_TO_ADDR
// j := GetBase ( tower ) ;
3309: LD_ADDR_VAR 0 8
3313: PUSH
3314: LD_VAR 0 1
3318: PPUSH
3319: CALL_OW 274
3323: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3324: LD_VAR 0 8
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: CALL_OW 275
3336: PUSH
3337: LD_VAR 0 13
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: GREATEREQUAL
3346: PUSH
3347: LD_VAR 0 8
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 275
3359: PUSH
3360: LD_VAR 0 13
3364: PUSH
3365: LD_INT 2
3367: ARRAY
3368: GREATEREQUAL
3369: AND
3370: PUSH
3371: LD_VAR 0 8
3375: PPUSH
3376: LD_INT 3
3378: PPUSH
3379: CALL_OW 275
3383: PUSH
3384: LD_VAR 0 13
3388: PUSH
3389: LD_INT 3
3391: ARRAY
3392: GREATEREQUAL
3393: AND
3394: IFFALSE 3406
// result := weapon ;
3396: LD_ADDR_VAR 0 2
3400: PUSH
3401: LD_VAR 0 17
3405: ST_TO_ADDR
// end ; end ; end_of_file
3406: LD_VAR 0 2
3410: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3411: LD_INT 0
3413: PPUSH
3414: PPUSH
3415: PPUSH
3416: PPUSH
3417: PPUSH
3418: PPUSH
// uc_side := 1 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 1
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3435: LD_ADDR_EXP 9
3439: PUSH
3440: LD_STRING JMM
3442: PPUSH
3443: LD_EXP 1
3447: NOT
3448: PPUSH
3449: LD_EXP 2
3453: PPUSH
3454: CALL 29288 0 3
3458: ST_TO_ADDR
// team := [ JMM ] ;
3459: LD_ADDR_VAR 0 3
3463: PUSH
3464: LD_EXP 9
3468: PUSH
3469: EMPTY
3470: LIST
3471: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3472: LD_STRING BrownIn07
3474: PPUSH
3475: LD_EXP 1
3479: PPUSH
3480: CALL_OW 30
3484: IFFALSE 3510
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3486: LD_ADDR_EXP 10
3490: PUSH
3491: LD_STRING Brown
3493: PPUSH
3494: LD_EXP 1
3498: NOT
3499: PPUSH
3500: LD_EXP 2
3504: PPUSH
3505: CALL 29288 0 3
3509: ST_TO_ADDR
// if Brown then
3510: LD_EXP 10
3514: IFFALSE 3532
// team := team ^ Brown ;
3516: LD_ADDR_VAR 0 3
3520: PUSH
3521: LD_VAR 0 3
3525: PUSH
3526: LD_EXP 10
3530: ADD
3531: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3532: LD_STRING DonaldsonIn07
3534: PPUSH
3535: LD_EXP 1
3539: PPUSH
3540: CALL_OW 30
3544: IFFALSE 3570
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3546: LD_ADDR_EXP 11
3550: PUSH
3551: LD_STRING Donaldson
3553: PPUSH
3554: LD_EXP 1
3558: NOT
3559: PPUSH
3560: LD_EXP 2
3564: PPUSH
3565: CALL 29288 0 3
3569: ST_TO_ADDR
// if Donaldson then
3570: LD_EXP 11
3574: IFFALSE 3592
// team := team ^ Donaldson ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: LD_VAR 0 3
3585: PUSH
3586: LD_EXP 11
3590: ADD
3591: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3592: LD_STRING BobbyIn07
3594: PPUSH
3595: LD_EXP 1
3599: PPUSH
3600: CALL_OW 30
3604: IFFALSE 3630
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3606: LD_ADDR_EXP 12
3610: PUSH
3611: LD_STRING Bobby
3613: PPUSH
3614: LD_EXP 1
3618: NOT
3619: PPUSH
3620: LD_EXP 2
3624: PPUSH
3625: CALL 29288 0 3
3629: ST_TO_ADDR
// if Bobby then
3630: LD_EXP 12
3634: IFFALSE 3652
// team := team ^ Bobby ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_VAR 0 3
3645: PUSH
3646: LD_EXP 12
3650: ADD
3651: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3652: LD_STRING CyrusIn07
3654: PPUSH
3655: LD_EXP 1
3659: PPUSH
3660: CALL_OW 30
3664: IFFALSE 3690
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3666: LD_ADDR_EXP 13
3670: PUSH
3671: LD_STRING Cyrus
3673: PPUSH
3674: LD_EXP 1
3678: NOT
3679: PPUSH
3680: LD_EXP 2
3684: PPUSH
3685: CALL 29288 0 3
3689: ST_TO_ADDR
// if Cyrus then
3690: LD_EXP 13
3694: IFFALSE 3712
// team := team ^ Cyrus ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_VAR 0 3
3705: PUSH
3706: LD_EXP 13
3710: ADD
3711: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3712: LD_STRING LisaIn07
3714: PPUSH
3715: LD_EXP 1
3719: PPUSH
3720: CALL_OW 30
3724: IFFALSE 3750
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3726: LD_ADDR_EXP 14
3730: PUSH
3731: LD_STRING Lisa
3733: PPUSH
3734: LD_EXP 1
3738: NOT
3739: PPUSH
3740: LD_EXP 2
3744: PPUSH
3745: CALL 29288 0 3
3749: ST_TO_ADDR
// if Lisa then
3750: LD_EXP 14
3754: IFFALSE 3772
// team := team ^ Lisa ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PUSH
3766: LD_EXP 14
3770: ADD
3771: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3772: LD_STRING GladstoneIn07
3774: PPUSH
3775: LD_EXP 1
3779: PPUSH
3780: CALL_OW 30
3784: IFFALSE 3810
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3786: LD_ADDR_EXP 16
3790: PUSH
3791: LD_STRING Gladstone
3793: PPUSH
3794: LD_EXP 1
3798: NOT
3799: PPUSH
3800: LD_EXP 2
3804: PPUSH
3805: CALL 29288 0 3
3809: ST_TO_ADDR
// if Gladstone then
3810: LD_EXP 16
3814: IFFALSE 3832
// team := team ^ Gladstone ;
3816: LD_ADDR_VAR 0 3
3820: PUSH
3821: LD_VAR 0 3
3825: PUSH
3826: LD_EXP 16
3830: ADD
3831: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3832: LD_STRING KhatamIn07
3834: PPUSH
3835: LD_EXP 1
3839: PPUSH
3840: CALL_OW 30
3844: IFFALSE 3870
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3846: LD_ADDR_EXP 17
3850: PUSH
3851: LD_STRING Khatam
3853: PPUSH
3854: LD_EXP 1
3858: NOT
3859: PPUSH
3860: LD_EXP 2
3864: PPUSH
3865: CALL 29288 0 3
3869: ST_TO_ADDR
// if Khatam then
3870: LD_EXP 17
3874: IFFALSE 3892
// team := team ^ Khatam ;
3876: LD_ADDR_VAR 0 3
3880: PUSH
3881: LD_VAR 0 3
3885: PUSH
3886: LD_EXP 17
3890: ADD
3891: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3892: LD_ADDR_VAR 0 4
3896: PUSH
3897: LD_STRING 07_others
3899: PPUSH
3900: CALL_OW 31
3904: ST_TO_ADDR
// if others then
3905: LD_VAR 0 4
3909: IFFALSE 3927
// team := team ^ others ;
3911: LD_ADDR_VAR 0 3
3915: PUSH
3916: LD_VAR 0 3
3920: PUSH
3921: LD_VAR 0 4
3925: ADD
3926: ST_TO_ADDR
// if debug then
3927: LD_EXP 1
3931: IFFALSE 4005
// begin InitHc ;
3933: CALL_OW 19
// for i = 1 to 4 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 4
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4003
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 4
3980: PPUSH
3981: CALL_OW 380
// team := team ^ CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: LD_VAR 0 3
3994: PUSH
3995: CALL_OW 44
3999: ADD
4000: ST_TO_ADDR
// end ;
4001: GO 3950
4003: POP
4004: POP
// end ; m := 0 ;
4005: LD_ADDR_VAR 0 6
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// for i in team do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: LD_VAR 0 3
4022: PUSH
4023: FOR_IN
4024: IFFALSE 4231
// if GetClass ( i ) = 3 then
4026: LD_VAR 0 2
4030: PPUSH
4031: CALL_OW 257
4035: PUSH
4036: LD_INT 3
4038: EQUAL
4039: IFFALSE 4187
// begin m := m + 1 ;
4041: LD_ADDR_VAR 0 6
4045: PUSH
4046: LD_VAR 0 6
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_INT 1
4062: PPUSH
4063: LD_INT 1
4065: PPUSH
4066: LD_INT 2
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: LD_INT 1
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_VAR 0 6
4088: PUSH
4089: LD_INT 4
4091: MOD
4092: PUSH
4093: LD_INT 1
4095: PLUS
4096: ARRAY
4097: PPUSH
4098: LD_INT 2
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: LD_INT 4
4106: PUSH
4107: LD_INT 5
4109: PUSH
4110: LD_INT 3
4112: PUSH
4113: LD_INT 11
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: PUSH
4122: LD_VAR 0 6
4126: PUSH
4127: LD_INT 4
4129: MOD
4130: PUSH
4131: LD_INT 1
4133: PLUS
4134: ARRAY
4135: PPUSH
4136: LD_INT 60
4138: PPUSH
4139: CALL 500 0 7
4143: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4144: LD_VAR 0 5
4148: PPUSH
4149: LD_INT 2
4151: PPUSH
4152: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4156: LD_VAR 0 5
4160: PPUSH
4161: LD_INT 1
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4171: LD_VAR 0 2
4175: PPUSH
4176: LD_VAR 0 5
4180: PPUSH
4181: CALL_OW 52
// end else
4185: GO 4229
// begin if GetClass ( i ) = 2 then
4187: LD_VAR 0 2
4191: PPUSH
4192: CALL_OW 257
4196: PUSH
4197: LD_INT 2
4199: EQUAL
4200: IFFALSE 4214
// SetClass ( i , 1 ) ;
4202: LD_VAR 0 2
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// end ;
4229: GO 4023
4231: POP
4232: POP
// uc_side := 4 ;
4233: LD_ADDR_OWVAR 20
4237: PUSH
4238: LD_INT 4
4240: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4241: LD_ADDR_EXP 19
4245: PUSH
4246: LD_STRING Harisson
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: LD_STRING 
4254: PPUSH
4255: CALL 29288 0 3
4259: ST_TO_ADDR
// PrepareScout ;
4260: CALL 4269 0 0
// end ;
4264: LD_VAR 0 1
4268: RET
// function PrepareScout ; var ape ; begin
4269: LD_INT 0
4271: PPUSH
4272: PPUSH
// uc_side := 4 ;
4273: LD_ADDR_OWVAR 20
4277: PUSH
4278: LD_INT 4
4280: ST_TO_ADDR
// uc_nation := 1 ;
4281: LD_ADDR_OWVAR 21
4285: PUSH
4286: LD_INT 1
4288: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4289: LD_STRING FrankIn06
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL_OW 30
4299: IFFALSE 4316
// Frank := CreateCharacter ( 06c_Frank ) else
4301: LD_ADDR_EXP 15
4305: PUSH
4306: LD_STRING 06c_Frank
4308: PPUSH
4309: CALL_OW 34
4313: ST_TO_ADDR
4314: GO 4356
// if LoadVariable ( FrankInDelta , 0 ) then
4316: LD_STRING FrankInDelta
4318: PPUSH
4319: LD_INT 0
4321: PPUSH
4322: CALL_OW 30
4326: IFFALSE 4343
// Frank := CreateCharacter ( 05_Frank ) else
4328: LD_ADDR_EXP 15
4332: PUSH
4333: LD_STRING 05_Frank
4335: PPUSH
4336: CALL_OW 34
4340: ST_TO_ADDR
4341: GO 4356
// Frank := CreateCharacter ( 04_Frank ) ;
4343: LD_ADDR_EXP 15
4347: PUSH
4348: LD_STRING 04_Frank
4350: PPUSH
4351: CALL_OW 34
4355: ST_TO_ADDR
// if Frank then
4356: LD_EXP 15
4360: IFFALSE 4493
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4362: LD_EXP 15
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4377: LD_EXP 15
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: CALL_OW 336
// uc_side := 0 ;
4389: LD_ADDR_OWVAR 20
4393: PUSH
4394: LD_INT 0
4396: ST_TO_ADDR
// uc_nation := 0 ;
4397: LD_ADDR_OWVAR 21
4401: PUSH
4402: LD_INT 0
4404: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4405: LD_INT 0
4407: PPUSH
4408: LD_INT 12
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 380
// ape := CreateHuman ;
4418: LD_ADDR_VAR 0 2
4422: PUSH
4423: CALL_OW 44
4427: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4428: LD_VAR 0 2
4432: PPUSH
4433: LD_EXP 15
4437: PPUSH
4438: CALL_OW 250
4442: PPUSH
4443: LD_EXP 15
4447: PPUSH
4448: CALL_OW 251
4452: PPUSH
4453: LD_INT 5
4455: PPUSH
4456: LD_INT 0
4458: PPUSH
4459: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4463: LD_VAR 0 2
4467: PPUSH
4468: LD_EXP 15
4472: PPUSH
4473: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4477: LD_EXP 15
4481: PPUSH
4482: LD_VAR 0 2
4486: PPUSH
4487: CALL_OW 119
// exit ;
4491: GO 4536
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4493: LD_ADDR_EXP 18
4497: PUSH
4498: LD_STRING Yamoko
4500: PPUSH
4501: LD_INT 0
4503: PPUSH
4504: LD_STRING 
4506: PPUSH
4507: CALL 29288 0 3
4511: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4512: LD_EXP 18
4516: PPUSH
4517: LD_INT 2
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL_OW 49
// ComHold ( Kikuchi ) ;
4527: LD_EXP 18
4531: PPUSH
4532: CALL_OW 140
// end ; end_of_file
4536: LD_VAR 0 1
4540: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
// ru_rebuild_list := [ ] ;
4559: LD_ADDR_EXP 20
4563: PUSH
4564: EMPTY
4565: ST_TO_ADDR
// uc_side := 3 ;
4566: LD_ADDR_OWVAR 20
4570: PUSH
4571: LD_INT 3
4573: ST_TO_ADDR
// uc_nation := 3 ;
4574: LD_ADDR_OWVAR 21
4578: PUSH
4579: LD_INT 3
4581: ST_TO_ADDR
// if Difficulty > 1 then
4582: LD_OWVAR 67
4586: PUSH
4587: LD_INT 1
4589: GREATER
4590: IFFALSE 4726
// begin bc_type := b_breastwork ;
4592: LD_ADDR_OWVAR 42
4596: PUSH
4597: LD_INT 31
4599: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4600: LD_INT 78
4602: PPUSH
4603: LD_INT 74
4605: PPUSH
4606: LD_INT 2
4608: PPUSH
4609: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4613: LD_INT 171
4615: PPUSH
4616: LD_INT 193
4618: PPUSH
4619: LD_INT 4
4621: PPUSH
4622: CALL_OW 47
// bc_type := b_turret ;
4626: LD_ADDR_OWVAR 42
4630: PUSH
4631: LD_INT 33
4633: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4634: LD_INT 129
4636: PPUSH
4637: LD_INT 96
4639: PPUSH
4640: LD_INT 3
4642: PPUSH
4643: CALL_OW 47
// if Difficulty > 2 then
4647: LD_OWVAR 67
4651: PUSH
4652: LD_INT 2
4654: GREATER
4655: IFFALSE 4726
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4657: LD_INT 83
4659: PPUSH
4660: LD_INT 141
4662: PPUSH
4663: CALL_OW 428
4667: PPUSH
4668: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4672: LD_INT 78
4674: PPUSH
4675: LD_INT 133
4677: PPUSH
4678: CALL_OW 428
4682: PPUSH
4683: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4687: LD_INT 83
4689: PPUSH
4690: LD_INT 141
4692: PPUSH
4693: LD_INT 2
4695: PPUSH
4696: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4700: LD_INT 78
4702: PPUSH
4703: LD_INT 133
4705: PPUSH
4706: LD_INT 2
4708: PPUSH
4709: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4713: LD_INT 145
4715: PPUSH
4716: LD_INT 112
4718: PPUSH
4719: LD_INT 3
4721: PPUSH
4722: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4726: LD_ADDR_VAR 0 9
4730: PUSH
4731: LD_INT 22
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 2
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: LD_INT 30
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PPUSH
4773: CALL_OW 69
4777: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4778: LD_ADDR_VAR 0 10
4782: PUSH
4783: LD_INT 22
4785: PUSH
4786: LD_INT 3
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 2
4795: PUSH
4796: LD_INT 30
4798: PUSH
4799: LD_INT 6
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 30
4808: PUSH
4809: LD_INT 7
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 30
4818: PUSH
4819: LD_INT 8
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 69
4840: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4841: LD_ADDR_VAR 0 11
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 30
4858: PUSH
4859: LD_INT 3
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 69
4874: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4875: LD_ADDR_VAR 0 12
4879: PUSH
4880: LD_INT 22
4882: PUSH
4883: LD_INT 3
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 30
4892: PUSH
4893: LD_INT 31
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4909: LD_ADDR_VAR 0 13
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 32
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4943: LD_ADDR_VAR 0 14
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 33
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
4977: LD_ADDR_VAR 0 15
4981: PUSH
4982: LD_INT 42
4984: PUSH
4985: LD_INT 5
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 43
4994: PUSH
4995: LD_INT 50
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 44
5004: PUSH
5005: LD_INT 30
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 46
5014: PUSH
5015: LD_INT 15
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5028: LD_ADDR_VAR 0 16
5032: PUSH
5033: LD_INT 0
5035: PUSH
5036: LD_INT 4
5038: PUSH
5039: LD_INT 6
5041: PUSH
5042: LD_INT 3
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
5051: LD_ADDR_VAR 0 6
5055: PUSH
5056: LD_INT 4
5058: PUSH
5059: LD_INT 5
5061: PUSH
5062: LD_INT 6
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: LIST
5069: PUSH
5070: LD_OWVAR 67
5074: ARRAY
5075: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5076: LD_INT 16
5078: PPUSH
5079: LD_STRING am_tukh
5081: PPUSH
5082: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5086: LD_ADDR_VAR 0 2
5090: PUSH
5091: LD_INT 21
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 69
5105: PUSH
5106: FOR_IN
5107: IFFALSE 5140
// SetBLevel ( i , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5109: LD_VAR 0 2
5113: PPUSH
5114: LD_INT 4
5116: PUSH
5117: LD_INT 5
5119: PUSH
5120: LD_INT 6
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: PUSH
5128: LD_OWVAR 67
5132: ARRAY
5133: PPUSH
5134: CALL_OW 241
5138: GO 5106
5140: POP
5141: POP
// for i in dep_list do
5142: LD_ADDR_VAR 0 2
5146: PUSH
5147: LD_VAR 0 9
5151: PUSH
5152: FOR_IN
5153: IFFALSE 5197
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5155: LD_VAR 0 2
5159: PPUSH
5160: CALL_OW 274
5164: PPUSH
5165: LD_INT 1
5167: PPUSH
5168: LD_INT 1000
5170: PPUSH
5171: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL_OW 274
5184: PPUSH
5185: LD_INT 2
5187: PPUSH
5188: LD_INT 1000
5190: PPUSH
5191: CALL_OW 277
// end ;
5195: GO 5152
5197: POP
5198: POP
// InitHc ;
5199: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 ] [ Difficulty ] div 100 ;
5203: LD_ADDR_VAR 0 8
5207: PUSH
5208: LD_VAR 0 13
5212: PUSH
5213: LD_INT 45
5215: PUSH
5216: LD_INT 60
5218: PUSH
5219: LD_INT 75
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_OWVAR 67
5231: ARRAY
5232: MUL
5233: PUSH
5234: LD_INT 100
5236: DIV
5237: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5238: LD_ADDR_VAR 0 16
5242: PUSH
5243: LD_VAR 0 16
5247: PPUSH
5248: LD_INT 1
5250: PPUSH
5251: LD_VAR 0 8
5255: PPUSH
5256: CALL_OW 1
5260: ST_TO_ADDR
// tmp := [ ] ;
5261: LD_ADDR_VAR 0 8
5265: PUSH
5266: EMPTY
5267: ST_TO_ADDR
// for i in bunker_list do
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 13
5277: PUSH
5278: FOR_IN
5279: IFFALSE 5375
// if i mod 10 + 1 < tmp then
5281: LD_VAR 0 2
5285: PUSH
5286: LD_INT 10
5288: MOD
5289: PUSH
5290: LD_INT 1
5292: PLUS
5293: PUSH
5294: LD_VAR 0 8
5298: LESS
5299: IFFALSE 5344
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5301: LD_ADDR_VAR 0 8
5305: PUSH
5306: LD_VAR 0 8
5310: PPUSH
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 3
5318: PPUSH
5319: LD_INT 5
5321: PPUSH
5322: CALL_OW 12
5326: MOD
5327: PUSH
5328: LD_INT 1
5330: PLUS
5331: PPUSH
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 2
5341: ST_TO_ADDR
5342: GO 5373
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5344: LD_ADDR_VAR 0 8
5348: PUSH
5349: LD_VAR 0 8
5353: PPUSH
5354: LD_VAR 0 8
5358: PUSH
5359: LD_INT 1
5361: PLUS
5362: PPUSH
5363: LD_VAR 0 2
5367: PPUSH
5368: CALL_OW 2
5372: ST_TO_ADDR
5373: GO 5278
5375: POP
5376: POP
// bunker_list := tmp ;
5377: LD_ADDR_VAR 0 13
5381: PUSH
5382: LD_VAR 0 8
5386: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_VAR 0 13
5396: PUSH
5397: LD_VAR 0 14
5401: ADD
5402: PUSH
5403: FOR_IN
5404: IFFALSE 5427
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5406: LD_VAR 0 2
5410: PPUSH
5411: LD_VAR 0 2
5415: PPUSH
5416: CALL 2188 0 1
5420: PPUSH
5421: CALL_OW 431
5425: GO 5403
5427: POP
5428: POP
// while ( personel_counter [ 1 ] ) do
5429: LD_VAR 0 16
5433: PUSH
5434: LD_INT 1
5436: ARRAY
5437: IFFALSE 5545
// begin i := rand ( 1 , bunker_list ) ;
5439: LD_ADDR_VAR 0 2
5443: PUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_VAR 0 13
5451: PPUSH
5452: CALL_OW 12
5456: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5457: LD_INT 0
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: LD_VAR 0 6
5467: PPUSH
5468: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5472: CALL_OW 44
5476: PPUSH
5477: LD_VAR 0 13
5481: PUSH
5482: LD_VAR 0 2
5486: ARRAY
5487: PPUSH
5488: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5492: LD_ADDR_VAR 0 13
5496: PUSH
5497: LD_VAR 0 13
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: CALL_OW 3
5511: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5512: LD_ADDR_VAR 0 16
5516: PUSH
5517: LD_VAR 0 16
5521: PPUSH
5522: LD_INT 1
5524: PPUSH
5525: LD_VAR 0 16
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PUSH
5534: LD_INT 1
5536: MINUS
5537: PPUSH
5538: CALL_OW 1
5542: ST_TO_ADDR
// end ;
5543: GO 5429
// for i = 1 to personel_counter [ 2 ] do
5545: LD_ADDR_VAR 0 2
5549: PUSH
5550: DOUBLE
5551: LD_INT 1
5553: DEC
5554: ST_TO_ADDR
5555: LD_VAR 0 16
5559: PUSH
5560: LD_INT 2
5562: ARRAY
5563: PUSH
5564: FOR_TO
5565: IFFALSE 5596
// begin PrepareHuman ( false , 2 , skill ) ;
5567: LD_INT 0
5569: PPUSH
5570: LD_INT 2
5572: PPUSH
5573: LD_VAR 0 6
5577: PPUSH
5578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5582: CALL_OW 44
5586: PPUSH
5587: LD_INT 16
5589: PPUSH
5590: CALL_OW 52
// end ;
5594: GO 5564
5596: POP
5597: POP
// for i = 1 to personel_counter [ 3 ] do
5598: LD_ADDR_VAR 0 2
5602: PUSH
5603: DOUBLE
5604: LD_INT 1
5606: DEC
5607: ST_TO_ADDR
5608: LD_VAR 0 16
5612: PUSH
5613: LD_INT 3
5615: ARRAY
5616: PUSH
5617: FOR_TO
5618: IFFALSE 5665
// begin PrepareHuman ( false , 3 , skill ) ;
5620: LD_INT 0
5622: PPUSH
5623: LD_INT 3
5625: PPUSH
5626: LD_VAR 0 6
5630: PPUSH
5631: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5635: CALL_OW 44
5639: PPUSH
5640: LD_VAR 0 11
5644: PUSH
5645: LD_VAR 0 2
5649: PUSH
5650: LD_INT 2
5652: MOD
5653: PUSH
5654: LD_INT 1
5656: PLUS
5657: ARRAY
5658: PPUSH
5659: CALL_OW 52
// end ;
5663: GO 5617
5665: POP
5666: POP
// for i = 1 to personel_counter [ 4 ] do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_VAR 0 16
5681: PUSH
5682: LD_INT 4
5684: ARRAY
5685: PUSH
5686: FOR_TO
5687: IFFALSE 5724
// begin PrepareHuman ( false , 4 , skill ) ;
5689: LD_INT 0
5691: PPUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_VAR 0 6
5699: PPUSH
5700: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5704: CALL_OW 44
5708: PPUSH
5709: LD_VAR 0 10
5713: PUSH
5714: LD_INT 1
5716: ARRAY
5717: PPUSH
5718: CALL_OW 52
// end ;
5722: GO 5686
5724: POP
5725: POP
// for i in breastworks_list do
5726: LD_ADDR_VAR 0 2
5730: PUSH
5731: LD_VAR 0 12
5735: PUSH
5736: FOR_IN
5737: IFFALSE 5849
// begin r := GetDir ( i ) ;
5739: LD_ADDR_VAR 0 4
5743: PUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 254
5753: ST_TO_ADDR
// if r > 3 then
5754: LD_VAR 0 4
5758: PUSH
5759: LD_INT 3
5761: GREATER
5762: IFFALSE 5780
// r := r - 3 else
5764: LD_ADDR_VAR 0 4
5768: PUSH
5769: LD_VAR 0 4
5773: PUSH
5774: LD_INT 3
5776: MINUS
5777: ST_TO_ADDR
5778: GO 5794
// r := r + 3 ;
5780: LD_ADDR_VAR 0 4
5784: PUSH
5785: LD_VAR 0 4
5789: PUSH
5790: LD_INT 3
5792: PLUS
5793: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5794: LD_INT 0
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_VAR 0 6
5804: PPUSH
5805: CALL_OW 380
// un := CreateHuman ;
5809: LD_ADDR_VAR 0 5
5813: PUSH
5814: CALL_OW 44
5818: ST_TO_ADDR
// SetDir ( un , r ) ;
5819: LD_VAR 0 5
5823: PPUSH
5824: LD_VAR 0 4
5828: PPUSH
5829: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5833: LD_VAR 0 5
5837: PPUSH
5838: LD_VAR 0 2
5842: PPUSH
5843: CALL_OW 52
// end ;
5847: GO 5736
5849: POP
5850: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_INT 22
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 25
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PPUSH
5880: CALL_OW 69
5884: ST_TO_ADDR
// r := [ 4 , 5 , 6 ] [ Difficulty ] ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_INT 4
5892: PUSH
5893: LD_INT 5
5895: PUSH
5896: LD_INT 6
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: PUSH
5904: LD_OWVAR 67
5908: ARRAY
5909: ST_TO_ADDR
// for i = 1 to r do
5910: LD_ADDR_VAR 0 2
5914: PUSH
5915: DOUBLE
5916: LD_INT 1
5918: DEC
5919: ST_TO_ADDR
5920: LD_VAR 0 4
5924: PUSH
5925: FOR_TO
5926: IFFALSE 6099
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5928: LD_ADDR_VAR 0 5
5932: PUSH
5933: LD_INT 3
5935: PPUSH
5936: LD_INT 3
5938: PPUSH
5939: LD_INT 22
5941: PUSH
5942: LD_INT 22
5944: PUSH
5945: LD_INT 24
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: PUSH
5953: LD_VAR 0 2
5957: PUSH
5958: LD_INT 3
5960: MOD
5961: PUSH
5962: LD_INT 1
5964: PLUS
5965: ARRAY
5966: PPUSH
5967: LD_INT 1
5969: PPUSH
5970: LD_INT 1
5972: PPUSH
5973: LD_INT 43
5975: PUSH
5976: LD_INT 44
5978: PUSH
5979: LD_INT 42
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: PUSH
5987: LD_VAR 0 2
5991: PUSH
5992: LD_INT 3
5994: MOD
5995: PUSH
5996: LD_INT 1
5998: PLUS
5999: ARRAY
6000: PPUSH
6001: LD_INT 100
6003: PPUSH
6004: CALL 500 0 7
6008: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6009: LD_VAR 0 5
6013: PPUSH
6014: LD_INT 0
6016: PPUSH
6017: LD_INT 5
6019: PPUSH
6020: CALL_OW 12
6024: PPUSH
6025: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6029: LD_VAR 0 5
6033: PPUSH
6034: LD_INT 5
6036: PPUSH
6037: LD_INT 0
6039: PPUSH
6040: CALL_OW 49
// if i > tmp - 2 then
6044: LD_VAR 0 2
6048: PUSH
6049: LD_VAR 0 8
6053: PUSH
6054: LD_INT 2
6056: MINUS
6057: GREATER
6058: IFFALSE 6062
// continue ;
6060: GO 5925
// ComExitBuilding ( tmp [ i ] ) ;
6062: LD_VAR 0 8
6066: PUSH
6067: LD_VAR 0 2
6071: ARRAY
6072: PPUSH
6073: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6077: LD_VAR 0 8
6081: PUSH
6082: LD_VAR 0 2
6086: ARRAY
6087: PPUSH
6088: LD_VAR 0 5
6092: PPUSH
6093: CALL_OW 180
// end ;
6097: GO 5925
6099: POP
6100: POP
// end ;
6101: LD_VAR 0 1
6105: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6106: LD_INT 22
6108: PUSH
6109: LD_INT 3
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 25
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 69
6134: IFFALSE 6866
6136: GO 6138
6138: DISABLE
6139: LD_INT 0
6141: PPUSH
6142: PPUSH
6143: PPUSH
6144: PPUSH
6145: PPUSH
// begin enable ;
6146: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6147: LD_ADDR_VAR 0 2
6151: PUSH
6152: LD_INT 6
6154: PPUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 24
6160: PUSH
6161: LD_INT 1000
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 21
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PPUSH
6186: CALL_OW 70
6190: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6191: LD_ADDR_VAR 0 4
6195: PUSH
6196: LD_INT 22
6198: PUSH
6199: LD_INT 3
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 25
6208: PUSH
6209: LD_INT 2
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PPUSH
6220: CALL_OW 69
6224: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6225: LD_VAR 0 2
6229: NOT
6230: PUSH
6231: LD_EXP 20
6235: NOT
6236: AND
6237: IFFALSE 6307
// begin for i in engs do
6239: LD_ADDR_VAR 0 1
6243: PUSH
6244: LD_VAR 0 4
6248: PUSH
6249: FOR_IN
6250: IFFALSE 6305
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6252: LD_VAR 0 1
6256: PPUSH
6257: CALL_OW 256
6261: PUSH
6262: LD_INT 1000
6264: EQUAL
6265: PUSH
6266: LD_VAR 0 1
6270: PPUSH
6271: CALL_OW 314
6275: NOT
6276: AND
6277: PUSH
6278: LD_VAR 0 1
6282: PPUSH
6283: CALL_OW 310
6287: NOT
6288: AND
6289: IFFALSE 6303
// ComEnterUnit ( i , ru_dep_main ) ;
6291: LD_VAR 0 1
6295: PPUSH
6296: LD_INT 16
6298: PPUSH
6299: CALL_OW 120
6303: GO 6249
6305: POP
6306: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6307: LD_VAR 0 4
6311: PPUSH
6312: LD_INT 3
6314: PUSH
6315: LD_INT 24
6317: PUSH
6318: LD_INT 650
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 72
6333: IFFALSE 6426
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6335: LD_ADDR_VAR 0 3
6339: PUSH
6340: LD_VAR 0 4
6344: PPUSH
6345: LD_INT 3
6347: PUSH
6348: LD_INT 24
6350: PUSH
6351: LD_INT 650
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PPUSH
6362: CALL_OW 72
6366: ST_TO_ADDR
// for i in tmp do
6367: LD_ADDR_VAR 0 1
6371: PUSH
6372: LD_VAR 0 3
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6424
// if not IsInArea ( i , mainBaseArea ) then
6380: LD_VAR 0 1
6384: PPUSH
6385: LD_INT 14
6387: PPUSH
6388: CALL_OW 308
6392: NOT
6393: IFFALSE 6422
// begin ComMoveXY ( i , 129 , 125 ) ;
6395: LD_VAR 0 1
6399: PPUSH
6400: LD_INT 129
6402: PPUSH
6403: LD_INT 125
6405: PPUSH
6406: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6410: LD_VAR 0 1
6414: PPUSH
6415: LD_INT 1050
6417: PPUSH
6418: CALL_OW 202
// end ;
6422: GO 6377
6424: POP
6425: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6426: LD_ADDR_VAR 0 4
6430: PUSH
6431: LD_VAR 0 4
6435: PPUSH
6436: LD_INT 24
6438: PUSH
6439: LD_INT 650
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// if not engs then
6451: LD_VAR 0 4
6455: NOT
6456: IFFALSE 6460
// exit ;
6458: GO 6866
// if filter then
6460: LD_VAR 0 2
6464: IFFALSE 6723
// begin for i in engs do
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_VAR 0 4
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6501
// if IsInUnit ( i ) then
6479: LD_VAR 0 1
6483: PPUSH
6484: CALL_OW 310
6488: IFFALSE 6499
// ComExitBuilding ( i ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL_OW 122
6499: GO 6476
6501: POP
6502: POP
// wait ( 3 ) ;
6503: LD_INT 3
6505: PPUSH
6506: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6510: LD_VAR 0 2
6514: PUSH
6515: LD_INT 2
6517: GREATEREQUAL
6518: PUSH
6519: LD_VAR 0 4
6523: PUSH
6524: LD_INT 2
6526: GREATEREQUAL
6527: AND
6528: IFFALSE 6676
// begin for i = 1 to engs / 2 do
6530: LD_ADDR_VAR 0 1
6534: PUSH
6535: DOUBLE
6536: LD_INT 1
6538: DEC
6539: ST_TO_ADDR
6540: LD_VAR 0 4
6544: PUSH
6545: LD_INT 2
6547: DIVREAL
6548: PUSH
6549: FOR_TO
6550: IFFALSE 6596
// if not HasTask ( engs [ i ] ) then
6552: LD_VAR 0 4
6556: PUSH
6557: LD_VAR 0 1
6561: ARRAY
6562: PPUSH
6563: CALL_OW 314
6567: NOT
6568: IFFALSE 6594
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6570: LD_VAR 0 4
6574: PUSH
6575: LD_VAR 0 1
6579: ARRAY
6580: PPUSH
6581: LD_VAR 0 2
6585: PUSH
6586: LD_INT 1
6588: ARRAY
6589: PPUSH
6590: CALL_OW 130
6594: GO 6549
6596: POP
6597: POP
// for i = engs / 2 + 1 to engs do
6598: LD_ADDR_VAR 0 1
6602: PUSH
6603: DOUBLE
6604: LD_VAR 0 4
6608: PUSH
6609: LD_INT 2
6611: DIVREAL
6612: PUSH
6613: LD_INT 1
6615: PLUS
6616: DEC
6617: ST_TO_ADDR
6618: LD_VAR 0 4
6622: PUSH
6623: FOR_TO
6624: IFFALSE 6672
// if not HasTask ( engs [ i ] ) then
6626: LD_VAR 0 4
6630: PUSH
6631: LD_VAR 0 1
6635: ARRAY
6636: PPUSH
6637: CALL_OW 314
6641: NOT
6642: IFFALSE 6670
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6644: LD_VAR 0 4
6648: PUSH
6649: LD_VAR 0 1
6653: ARRAY
6654: PPUSH
6655: LD_VAR 0 2
6659: PUSH
6660: LD_VAR 0 2
6664: ARRAY
6665: PPUSH
6666: CALL_OW 130
6670: GO 6623
6672: POP
6673: POP
// end else
6674: GO 6723
// for i in engs do
6676: LD_ADDR_VAR 0 1
6680: PUSH
6681: LD_VAR 0 4
6685: PUSH
6686: FOR_IN
6687: IFFALSE 6721
// if not HasTask ( i ) then
6689: LD_VAR 0 1
6693: PPUSH
6694: CALL_OW 314
6698: NOT
6699: IFFALSE 6719
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6701: LD_VAR 0 1
6705: PPUSH
6706: LD_VAR 0 2
6710: PUSH
6711: LD_INT 1
6713: ARRAY
6714: PPUSH
6715: CALL_OW 130
6719: GO 6686
6721: POP
6722: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: LD_INT 81
6730: PUSH
6731: LD_INT 3
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PPUSH
6738: CALL_OW 69
6742: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6743: LD_EXP 20
6747: PUSH
6748: LD_VAR 0 2
6752: NOT
6753: AND
6754: IFFALSE 6866
// begin ComExitBuilding ( engs ) ;
6756: LD_VAR 0 4
6760: PPUSH
6761: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6765: LD_VAR 0 5
6769: PPUSH
6770: LD_EXP 20
6774: PUSH
6775: LD_INT 2
6777: ARRAY
6778: PPUSH
6779: LD_EXP 20
6783: PUSH
6784: LD_INT 3
6786: ARRAY
6787: PPUSH
6788: CALL_OW 73
6792: PPUSH
6793: LD_EXP 20
6797: PUSH
6798: LD_INT 2
6800: ARRAY
6801: PPUSH
6802: LD_EXP 20
6806: PUSH
6807: LD_INT 3
6809: ARRAY
6810: PPUSH
6811: CALL_OW 297
6815: PUSH
6816: LD_INT 10
6818: GREATER
6819: IFFALSE 6866
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6821: LD_VAR 0 4
6825: PPUSH
6826: LD_EXP 20
6830: PUSH
6831: LD_INT 1
6833: ARRAY
6834: PPUSH
6835: LD_EXP 20
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: PPUSH
6844: LD_EXP 20
6848: PUSH
6849: LD_INT 3
6851: ARRAY
6852: PPUSH
6853: LD_EXP 20
6857: PUSH
6858: LD_INT 4
6860: ARRAY
6861: PPUSH
6862: CALL_OW 145
// end ; end ;
6866: PPOPN 5
6868: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6869: LD_INT 16
6871: PPUSH
6872: CALL_OW 256
6876: PUSH
6877: LD_INT 250
6879: LESS
6880: IFFALSE 7070
6882: GO 6884
6884: DISABLE
6885: LD_INT 0
6887: PPUSH
6888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6889: LD_ADDR_VAR 0 2
6893: PUSH
6894: LD_INT 22
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 2
6906: PUSH
6907: LD_INT 25
6909: PUSH
6910: LD_INT 1
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 25
6919: PUSH
6920: LD_INT 3
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 25
6929: PUSH
6930: LD_INT 4
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
6952: LD_VAR 0 2
6956: PPUSH
6957: CALL_OW 122
// wait ( 3 ) ;
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
6968: LD_VAR 0 2
6972: PPUSH
6973: LD_INT 156
6975: PPUSH
6976: LD_INT 211
6978: PPUSH
6979: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// for i in tmp do
6990: LD_ADDR_VAR 0 1
6994: PUSH
6995: LD_VAR 0 2
6999: PUSH
7000: FOR_IN
7001: IFFALSE 7061
// if IsInArea ( i , escapeArea ) then
7003: LD_VAR 0 1
7007: PPUSH
7008: LD_INT 15
7010: PPUSH
7011: CALL_OW 308
7015: IFFALSE 7044
// begin RemoveUnit ( i ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL_OW 64
// tmp := tmp diff i ;
7026: LD_ADDR_VAR 0 2
7030: PUSH
7031: LD_VAR 0 2
7035: PUSH
7036: LD_VAR 0 1
7040: DIFF
7041: ST_TO_ADDR
// end else
7042: GO 7059
// ComMoveXY ( i , 156 , 211 ) ;
7044: LD_VAR 0 1
7048: PPUSH
7049: LD_INT 156
7051: PPUSH
7052: LD_INT 211
7054: PPUSH
7055: CALL_OW 111
7059: GO 7000
7061: POP
7062: POP
// until not tmp ;
7063: LD_VAR 0 2
7067: NOT
7068: IFFALSE 6983
// end ;
7070: PPOPN 2
7072: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7073: LD_INT 16
7075: PPUSH
7076: CALL_OW 256
7080: PUSH
7081: LD_INT 250
7083: GREATER
7084: PUSH
7085: LD_INT 22
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 25
7097: PUSH
7098: LD_INT 1
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 56
7107: PUSH
7108: EMPTY
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: PPUSH
7119: CALL_OW 69
7123: AND
7124: IFFALSE 7236
7126: GO 7128
7128: DISABLE
7129: LD_INT 0
7131: PPUSH
7132: PPUSH
// begin enable ;
7133: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_INT 3
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 1
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 56
7161: PUSH
7162: EMPTY
7163: LIST
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: LD_INT 60
7170: PUSH
7171: EMPTY
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: PPUSH
7187: CALL_OW 69
7191: ST_TO_ADDR
// if not tmp then
7192: LD_VAR 0 2
7196: NOT
7197: IFFALSE 7201
// exit ;
7199: GO 7236
// for i in tmp do
7201: LD_ADDR_VAR 0 1
7205: PUSH
7206: LD_VAR 0 2
7210: PUSH
7211: FOR_IN
7212: IFFALSE 7234
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7214: LD_VAR 0 1
7218: PPUSH
7219: LD_INT 0
7221: PPUSH
7222: LD_INT 143
7224: PPUSH
7225: LD_INT 143
7227: PPUSH
7228: CALL 818 0 4
7232: GO 7211
7234: POP
7235: POP
// end ;
7236: PPOPN 2
7238: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7239: LD_INT 22
7241: PUSH
7242: LD_INT 3
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 25
7251: PUSH
7252: LD_INT 4
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PPUSH
7263: CALL_OW 69
7267: IFFALSE 7521
7269: GO 7271
7271: DISABLE
7272: LD_INT 0
7274: PPUSH
7275: PPUSH
7276: PPUSH
// begin enable ;
7277: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7278: LD_ADDR_VAR 0 2
7282: PUSH
7283: LD_INT 14
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 3
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 21
7298: PUSH
7299: LD_INT 1
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: LD_INT 3
7308: PUSH
7309: LD_INT 24
7311: PUSH
7312: LD_INT 1000
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: PPUSH
7328: CALL_OW 70
7332: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7333: LD_ADDR_VAR 0 3
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 3
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 25
7350: PUSH
7351: LD_INT 4
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 69
7366: ST_TO_ADDR
// if not doc then
7367: LD_VAR 0 3
7371: NOT
7372: IFFALSE 7376
// exit ;
7374: GO 7521
// if not tmp then
7376: LD_VAR 0 2
7380: NOT
7381: IFFALSE 7472
// begin if not IsInUnit ( doc [ 1 ] ) then
7383: LD_VAR 0 3
7387: PUSH
7388: LD_INT 1
7390: ARRAY
7391: PPUSH
7392: CALL_OW 310
7396: NOT
7397: IFFALSE 7470
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 22
7406: PUSH
7407: LD_INT 3
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 30
7419: PUSH
7420: LD_INT 6
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 30
7429: PUSH
7430: LD_INT 7
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 30
7439: PUSH
7440: LD_INT 8
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PPUSH
7457: CALL_OW 69
7461: PUSH
7462: LD_INT 1
7464: ARRAY
7465: PPUSH
7466: CALL_OW 120
// exit ;
7470: GO 7521
// end ; if IsInUnit ( doc [ 1 ] ) then
7472: LD_VAR 0 3
7476: PUSH
7477: LD_INT 1
7479: ARRAY
7480: PPUSH
7481: CALL_OW 310
7485: IFFALSE 7496
// ComExitBuilding ( doc ) ;
7487: LD_VAR 0 3
7491: PPUSH
7492: CALL_OW 122
// wait ( 3 ) ;
7496: LD_INT 3
7498: PPUSH
7499: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_VAR 0 2
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: CALL_OW 128
// end ;
7521: PPOPN 3
7523: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7524: LD_INT 22
7526: PUSH
7527: LD_INT 3
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 25
7536: PUSH
7537: LD_INT 3
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 22
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 21
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: AND
7582: IFFALSE 7996
7584: GO 7586
7586: DISABLE
7587: LD_INT 0
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
// begin enable ;
7594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7595: LD_ADDR_VAR 0 2
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 21
7612: PUSH
7613: LD_INT 2
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: LD_INT 58
7625: PUSH
7626: EMPTY
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 69
7642: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7643: LD_ADDR_VAR 0 4
7647: PUSH
7648: LD_INT 10
7650: PUSH
7651: LD_INT 11
7653: PUSH
7654: LD_INT 12
7656: PUSH
7657: LD_INT 14
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: ST_TO_ADDR
// area := 0 ;
7666: LD_ADDR_VAR 0 5
7670: PUSH
7671: LD_INT 0
7673: ST_TO_ADDR
// attacking := false ;
7674: LD_ADDR_VAR 0 3
7678: PUSH
7679: LD_INT 0
7681: ST_TO_ADDR
// for i in tmp do
7682: LD_ADDR_VAR 0 1
7686: PUSH
7687: LD_VAR 0 2
7691: PUSH
7692: FOR_IN
7693: IFFALSE 7779
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_INT 22
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PPUSH
7710: CALL_OW 69
7714: PPUSH
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 74
7724: PPUSH
7725: CALL_OW 296
7729: PUSH
7730: LD_INT 10
7732: LESS
7733: IFFALSE 7777
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7735: LD_VAR 0 1
7739: PPUSH
7740: LD_INT 22
7742: PUSH
7743: LD_INT 1
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PPUSH
7750: CALL_OW 69
7754: PPUSH
7755: LD_VAR 0 1
7759: PPUSH
7760: CALL_OW 74
7764: PPUSH
7765: CALL_OW 115
// attacking := true ;
7769: LD_ADDR_VAR 0 3
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// end ;
7777: GO 7692
7779: POP
7780: POP
// if attacking then
7781: LD_VAR 0 3
7785: IFFALSE 7789
// exit ;
7787: GO 7996
// for i in areas do
7789: LD_ADDR_VAR 0 1
7793: PUSH
7794: LD_VAR 0 4
7798: PUSH
7799: FOR_IN
7800: IFFALSE 7837
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_INT 1
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 70
7821: IFFALSE 7835
// begin area := i ;
7823: LD_ADDR_VAR 0 5
7827: PUSH
7828: LD_VAR 0 1
7832: ST_TO_ADDR
// break ;
7833: GO 7837
// end ;
7835: GO 7799
7837: POP
7838: POP
// if area then
7839: LD_VAR 0 5
7843: IFFALSE 7996
// begin for i in tmp do
7845: LD_ADDR_VAR 0 1
7849: PUSH
7850: LD_VAR 0 2
7854: PUSH
7855: FOR_IN
7856: IFFALSE 7994
// begin if GetFuel ( i ) < 33 then
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 261
7867: PUSH
7868: LD_INT 33
7870: LESS
7871: IFFALSE 7885
// SetFuel ( i , 33 ) ;
7873: LD_VAR 0 1
7877: PPUSH
7878: LD_INT 33
7880: PPUSH
7881: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7885: LD_VAR 0 1
7889: PPUSH
7890: LD_INT 22
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PPUSH
7900: CALL_OW 69
7904: PPUSH
7905: LD_VAR 0 1
7909: PPUSH
7910: CALL_OW 74
7914: PPUSH
7915: CALL_OW 296
7919: PUSH
7920: LD_INT 10
7922: LESS
7923: IFFALSE 7961
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_INT 22
7932: PUSH
7933: LD_INT 1
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PPUSH
7940: CALL_OW 69
7944: PPUSH
7945: LD_VAR 0 1
7949: PPUSH
7950: CALL_OW 74
7954: PPUSH
7955: CALL_OW 115
7959: GO 7992
// if not IsInArea ( i , area ) then
7961: LD_VAR 0 1
7965: PPUSH
7966: LD_VAR 0 5
7970: PPUSH
7971: CALL_OW 308
7975: NOT
7976: IFFALSE 7992
// ComMoveToArea ( i , area ) ;
7978: LD_VAR 0 1
7982: PPUSH
7983: LD_VAR 0 5
7987: PPUSH
7988: CALL_OW 113
// end ;
7992: GO 7855
7994: POP
7995: POP
// end ; end ;
7996: PPOPN 5
7998: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
7999: LD_OWVAR 67
8003: PUSH
8004: LD_INT 1
8006: GREATER
8007: IFFALSE 8284
8009: GO 8011
8011: DISABLE
8012: LD_INT 0
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// begin uc_side := 3 ;
8020: LD_ADDR_OWVAR 20
8024: PUSH
8025: LD_INT 3
8027: ST_TO_ADDR
// uc_nation := 3 ;
8028: LD_ADDR_OWVAR 21
8032: PUSH
8033: LD_INT 3
8035: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
8036: LD_ADDR_VAR 0 5
8040: PUSH
8041: LD_INT 18900
8043: PUSH
8044: LD_INT 14700
8046: PUSH
8047: LD_INT 12600
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_OWVAR 67
8059: ARRAY
8060: ST_TO_ADDR
// count := [ 2 , 2 , 3 ] [ Difficulty ] ;
8061: LD_ADDR_VAR 0 6
8065: PUSH
8066: LD_INT 2
8068: PUSH
8069: LD_INT 2
8071: PUSH
8072: LD_INT 3
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: LD_OWVAR 67
8084: ARRAY
8085: ST_TO_ADDR
// for i = 1 to count do
8086: LD_ADDR_VAR 0 1
8090: PUSH
8091: DOUBLE
8092: LD_INT 1
8094: DEC
8095: ST_TO_ADDR
8096: LD_VAR 0 6
8100: PUSH
8101: FOR_TO
8102: IFFALSE 8282
// begin wait ( time ) ;
8104: LD_VAR 0 5
8108: PPUSH
8109: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8113: LD_ADDR_VAR 0 2
8117: PUSH
8118: DOUBLE
8119: LD_INT 1
8121: DEC
8122: ST_TO_ADDR
8123: LD_INT 1
8125: PPUSH
8126: LD_OWVAR 67
8130: PPUSH
8131: CALL_OW 12
8135: PUSH
8136: FOR_TO
8137: IFFALSE 8278
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8139: LD_ADDR_VAR 0 4
8143: PUSH
8144: LD_INT 3
8146: PPUSH
8147: LD_INT 3
8149: PPUSH
8150: LD_INT 22
8152: PPUSH
8153: LD_INT 1
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 43
8161: PUSH
8162: LD_INT 44
8164: PUSH
8165: LD_INT 42
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_VAR 0 1
8177: PUSH
8178: LD_INT 3
8180: MOD
8181: PUSH
8182: LD_INT 1
8184: PLUS
8185: ARRAY
8186: PPUSH
8187: LD_INT 80
8189: PPUSH
8190: CALL 500 0 7
8194: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8195: LD_VAR 0 4
8199: PPUSH
8200: LD_INT 13
8202: PPUSH
8203: LD_INT 0
8205: PPUSH
8206: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8210: LD_INT 0
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: LD_INT 4
8218: PUSH
8219: LD_INT 5
8221: PUSH
8222: LD_INT 5
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_OWVAR 67
8234: ARRAY
8235: PPUSH
8236: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8240: CALL_OW 44
8244: PPUSH
8245: LD_VAR 0 4
8249: PPUSH
8250: CALL_OW 52
// wait ( 0 0$01 ) ;
8254: LD_INT 35
8256: PPUSH
8257: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8261: LD_VAR 0 4
8265: PPUSH
8266: LD_INT 143
8268: PPUSH
8269: LD_INT 143
8271: PPUSH
8272: CALL_OW 111
// end ;
8276: GO 8136
8278: POP
8279: POP
// end ;
8280: GO 8101
8282: POP
8283: POP
// end ;
8284: PPOPN 6
8286: END
// every 8 8$00 do var i , un , time ;
8287: GO 8289
8289: DISABLE
8290: LD_INT 0
8292: PPUSH
8293: PPUSH
8294: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8295: LD_ADDR_VAR 0 3
8299: PUSH
8300: LD_INT 6300
8302: PUSH
8303: LD_INT 2100
8305: PUSH
8306: LD_INT 1050
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: ST_TO_ADDR
// wait ( time ) ;
8314: LD_VAR 0 3
8318: PPUSH
8319: CALL_OW 67
// uc_side := 3 ;
8323: LD_ADDR_OWVAR 20
8327: PUSH
8328: LD_INT 3
8330: ST_TO_ADDR
// uc_nation := 3 ;
8331: LD_ADDR_OWVAR 21
8335: PUSH
8336: LD_INT 3
8338: ST_TO_ADDR
// for i = 1 to 2 do
8339: LD_ADDR_VAR 0 1
8343: PUSH
8344: DOUBLE
8345: LD_INT 1
8347: DEC
8348: ST_TO_ADDR
8349: LD_INT 2
8351: PUSH
8352: FOR_TO
8353: IFFALSE 8416
// begin PrepareHuman ( false , 1 , 4 ) ;
8355: LD_INT 0
8357: PPUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_INT 4
8363: PPUSH
8364: CALL_OW 380
// un := CreateHuman ;
8368: LD_ADDR_VAR 0 2
8372: PUSH
8373: CALL_OW 44
8377: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8378: LD_VAR 0 2
8382: PPUSH
8383: LD_INT 16
8385: PPUSH
8386: CALL_OW 52
// ComExitBuilding ( un ) ;
8390: LD_VAR 0 2
8394: PPUSH
8395: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8399: LD_VAR 0 2
8403: PPUSH
8404: LD_INT 41
8406: PPUSH
8407: LD_INT 76
8409: PPUSH
8410: CALL_OW 174
// end ;
8414: GO 8352
8416: POP
8417: POP
// end ; end_of_file
8418: PPOPN 3
8420: END
// export function Action ; begin
8421: LD_INT 0
8423: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8424: LD_INT 28
8426: PPUSH
8427: LD_INT 3
8429: PPUSH
8430: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8434: LD_INT 41
8436: PPUSH
8437: LD_INT 76
8439: PPUSH
8440: LD_INT 1
8442: PPUSH
8443: LD_INT 10
8445: PPUSH
8446: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8450: LD_INT 41
8452: PPUSH
8453: LD_INT 76
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 331
// InGameOn ;
8463: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8467: LD_EXP 19
8471: PPUSH
8472: LD_STRING D2-Har-1
8474: PPUSH
8475: CALL_OW 94
// InGameOff ;
8479: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8483: LD_STRING M1
8485: PPUSH
8486: CALL_OW 337
// end ;
8490: LD_VAR 0 1
8494: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8495: LD_EXP 4
8499: PUSH
8500: LD_INT 1
8502: GREATER
8503: IFFALSE 8594
8505: GO 8507
8507: DISABLE
8508: LD_INT 0
8510: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8511: LD_ADDR_VAR 0 1
8515: PUSH
8516: LD_INT 1
8518: PPUSH
8519: CALL 588 0 1
8523: PUSH
8524: LD_INT 1
8526: ARRAY
8527: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8528: LD_VAR 0 1
8532: PPUSH
8533: LD_STRING D2a-Sol1-1
8535: PPUSH
8536: CALL_OW 88
// if not un then
8540: LD_VAR 0 1
8544: NOT
8545: IFFALSE 8576
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 2
8554: PPUSH
8555: CALL 588 0 1
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8564: LD_VAR 0 1
8568: PPUSH
8569: LD_STRING D2a-FSol1-1
8571: PPUSH
8572: CALL_OW 88
// end ; if Khatam then
8576: LD_EXP 17
8580: IFFALSE 8594
// Say ( Khatam , D3b-Khat-3 ) ;
8582: LD_EXP 17
8586: PPUSH
8587: LD_STRING D3b-Khat-3
8589: PPUSH
8590: CALL_OW 88
// end ;
8594: PPOPN 1
8596: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8597: LD_EXP 15
8601: PUSH
8602: LD_EXP 18
8606: NOT
8607: AND
8608: PUSH
8609: LD_INT 22
8611: PUSH
8612: LD_INT 1
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 92
8621: PUSH
8622: LD_EXP 15
8626: PPUSH
8627: CALL_OW 250
8631: PUSH
8632: LD_EXP 15
8636: PPUSH
8637: CALL_OW 251
8641: PUSH
8642: LD_INT 7
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 69
8659: AND
8660: PUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 463
8668: NOT
8669: AND
8670: PUSH
8671: LD_INT 4
8673: PPUSH
8674: CALL_OW 463
8678: NOT
8679: AND
8680: IFFALSE 9267
8682: GO 8684
8684: DISABLE
8685: LD_INT 0
8687: PPUSH
8688: PPUSH
// begin InGameOn ;
8689: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8693: LD_ADDR_VAR 0 2
8697: PUSH
8698: LD_INT 22
8700: PUSH
8701: LD_INT 0
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 25
8710: PUSH
8711: LD_INT 12
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PPUSH
8722: CALL_OW 69
8726: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8727: LD_ADDR_VAR 0 2
8731: PUSH
8732: LD_VAR 0 2
8736: PPUSH
8737: LD_EXP 15
8741: PPUSH
8742: CALL_OW 74
8746: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8747: LD_ADDR_VAR 0 1
8751: PUSH
8752: LD_INT 22
8754: PUSH
8755: LD_INT 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 21
8764: PUSH
8765: LD_INT 1
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: LD_INT 91
8774: PUSH
8775: LD_EXP 15
8779: PUSH
8780: LD_INT 20
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 69
8797: PUSH
8798: FOR_IN
8799: IFFALSE 8817
// ComTurnUnit ( i , Frank ) ;
8801: LD_VAR 0 1
8805: PPUSH
8806: LD_EXP 15
8810: PPUSH
8811: CALL_OW 119
8815: GO 8798
8817: POP
8818: POP
// SetSide ( Frank , 1 ) ;
8819: LD_EXP 15
8823: PPUSH
8824: LD_INT 1
8826: PPUSH
8827: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
8831: LD_EXP 9
8835: PPUSH
8836: LD_EXP 15
8840: PPUSH
8841: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
8845: LD_EXP 9
8849: PPUSH
8850: LD_EXP 15
8854: PPUSH
8855: CALL_OW 179
// CenterOnUnits ( Frank ) ;
8859: LD_EXP 15
8863: PPUSH
8864: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
8868: LD_EXP 15
8872: PPUSH
8873: LD_STRING D3a-Frank-1
8875: PPUSH
8876: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
8880: LD_VAR 0 2
8884: PPUSH
8885: LD_INT 42
8887: PPUSH
8888: LD_INT 78
8890: PPUSH
8891: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
8895: LD_VAR 0 2
8899: PPUSH
8900: LD_EXP 15
8904: PPUSH
8905: CALL_OW 179
// if Lisa then
8909: LD_EXP 14
8913: IFFALSE 8927
// Say ( Lisa , D3a-Lisa-1 ) ;
8915: LD_EXP 14
8919: PPUSH
8920: LD_STRING D3a-Lisa-1
8922: PPUSH
8923: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
8927: LD_EXP 9
8931: PPUSH
8932: LD_STRING D3a-JMM-1
8934: PPUSH
8935: CALL_OW 88
// if Cyrus then
8939: LD_EXP 13
8943: IFFALSE 8957
// Say ( Cyrus , D3a-Cyrus-1 ) ;
8945: LD_EXP 13
8949: PPUSH
8950: LD_STRING D3a-Cyrus-1
8952: PPUSH
8953: CALL_OW 88
// if GetRandom ( sex_male ) then
8957: LD_INT 1
8959: PPUSH
8960: CALL 588 0 1
8964: IFFALSE 8985
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
8966: LD_INT 1
8968: PPUSH
8969: CALL 588 0 1
8973: PUSH
8974: LD_INT 1
8976: ARRAY
8977: PPUSH
8978: LD_STRING D3a-Sol1-1
8980: PPUSH
8981: CALL_OW 88
// if GetRandom ( sex_female ) then
8985: LD_INT 2
8987: PPUSH
8988: CALL 588 0 1
8992: IFFALSE 9013
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
8994: LD_INT 2
8996: PPUSH
8997: CALL 588 0 1
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_STRING D3a-FSol1-1
9008: PPUSH
9009: CALL_OW 88
// if Gladstone then
9013: LD_EXP 16
9017: IFFALSE 9031
// Say ( Gladstone , D3a-Glad-1 ) ;
9019: LD_EXP 16
9023: PPUSH
9024: LD_STRING D3a-Glad-1
9026: PPUSH
9027: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9031: LD_VAR 0 2
9035: PPUSH
9036: LD_INT 60
9038: PPUSH
9039: LD_INT 113
9041: PPUSH
9042: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9046: LD_EXP 15
9050: PPUSH
9051: LD_STRING D3a-Frank-2
9053: PPUSH
9054: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9058: LD_EXP 15
9062: PPUSH
9063: LD_EXP 9
9067: PPUSH
9068: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9072: LD_EXP 9
9076: PPUSH
9077: LD_STRING D3a-JMM-2
9079: PPUSH
9080: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9084: LD_INT 1
9086: PPUSH
9087: LD_INT 4
9089: PPUSH
9090: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9094: LD_INT 85
9096: PPUSH
9097: LD_INT 134
9099: PPUSH
9100: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9104: LD_EXP 15
9108: PPUSH
9109: LD_STRING D3a-Frank-3
9111: PPUSH
9112: CALL_OW 88
// Wait ( 0 0$01 ) ;
9116: LD_INT 35
9118: PPUSH
9119: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9123: LD_INT 166
9125: PPUSH
9126: LD_INT 136
9128: PPUSH
9129: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9133: LD_EXP 9
9137: PPUSH
9138: LD_STRING D3a-JMM-3
9140: PPUSH
9141: CALL_OW 88
// Wait ( 0 0$01 ) ;
9145: LD_INT 35
9147: PPUSH
9148: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9152: LD_EXP 15
9156: PPUSH
9157: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9161: LD_EXP 15
9165: PPUSH
9166: LD_STRING D3a-Frank-4
9168: PPUSH
9169: CALL_OW 88
// if Lisa then
9173: LD_EXP 14
9177: IFFALSE 9191
// Say ( Lisa , D3a-Lisa-4 ) ;
9179: LD_EXP 14
9183: PPUSH
9184: LD_STRING D3a-Lisa-4
9186: PPUSH
9187: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9191: LD_EXP 9
9195: PPUSH
9196: LD_STRING D3a-JMM-4
9198: PPUSH
9199: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9203: LD_EXP 15
9207: PPUSH
9208: LD_STRING D3a-Frank-5
9210: PPUSH
9211: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9215: LD_EXP 9
9219: PPUSH
9220: LD_STRING D3a-JMM-5
9222: PPUSH
9223: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9227: LD_EXP 15
9231: PPUSH
9232: LD_STRING D3a-Frank-6
9234: PPUSH
9235: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9239: LD_EXP 9
9243: PPUSH
9244: LD_STRING D3a-JMM-6
9246: PPUSH
9247: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9251: LD_EXP 15
9255: PPUSH
9256: LD_STRING D3a-Frank-7
9258: PPUSH
9259: CALL_OW 88
// InGameOff ;
9263: CALL_OW 9
// end ;
9267: PPOPN 2
9269: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9270: LD_EXP 18
9274: PUSH
9275: LD_EXP 15
9279: NOT
9280: AND
9281: PUSH
9282: LD_INT 22
9284: PUSH
9285: LD_INT 1
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 92
9294: PUSH
9295: LD_EXP 18
9299: PPUSH
9300: CALL_OW 250
9304: PUSH
9305: LD_EXP 18
9309: PPUSH
9310: CALL_OW 251
9314: PUSH
9315: LD_INT 7
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PPUSH
9328: CALL_OW 69
9332: AND
9333: PUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 463
9341: NOT
9342: AND
9343: PUSH
9344: LD_INT 4
9346: PPUSH
9347: CALL_OW 463
9351: NOT
9352: AND
9353: IFFALSE 9533
9355: GO 9357
9357: DISABLE
// begin InGameOn ;
9358: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9362: LD_EXP 9
9366: PPUSH
9367: LD_EXP 18
9371: PPUSH
9372: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9376: LD_EXP 18
9380: PPUSH
9381: LD_EXP 9
9385: PPUSH
9386: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9390: LD_EXP 18
9394: PPUSH
9395: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9399: LD_EXP 18
9403: PPUSH
9404: LD_STRING D3b-Yam-1
9406: PPUSH
9407: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9411: LD_EXP 9
9415: PPUSH
9416: LD_STRING D3b-JMM-1
9418: PPUSH
9419: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9423: LD_INT 1
9425: PPUSH
9426: LD_INT 4
9428: PPUSH
9429: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9433: LD_INT 85
9435: PPUSH
9436: LD_INT 134
9438: PPUSH
9439: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9443: LD_EXP 18
9447: PPUSH
9448: LD_STRING D3b-Yam-2
9450: PPUSH
9451: CALL_OW 88
// Wait ( 0 0$01 ) ;
9455: LD_INT 35
9457: PPUSH
9458: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9462: LD_EXP 9
9466: PPUSH
9467: LD_STRING D3b-JMM-2
9469: PPUSH
9470: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9474: LD_INT 166
9476: PPUSH
9477: LD_INT 136
9479: PPUSH
9480: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9484: LD_EXP 18
9488: PPUSH
9489: LD_STRING D3b-Yam-3
9491: PPUSH
9492: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9496: LD_EXP 9
9500: PPUSH
9501: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9505: LD_EXP 9
9509: PPUSH
9510: LD_STRING D3b-JMM-3a
9512: PPUSH
9513: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9517: LD_EXP 18
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL_OW 235
// InGameOff ;
9529: CALL_OW 9
// end ;
9533: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9534: LD_INT 7
9536: PPUSH
9537: LD_INT 22
9539: PUSH
9540: LD_INT 1
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 3
9549: PUSH
9550: LD_INT 24
9552: PUSH
9553: LD_INT 1000
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 70
9572: IFFALSE 10028
9574: GO 9576
9576: DISABLE
9577: LD_INT 0
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9583: LD_INT 35
9585: PPUSH
9586: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9590: LD_ADDR_VAR 0 1
9594: PUSH
9595: LD_INT 7
9597: PPUSH
9598: LD_INT 22
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 3
9610: PUSH
9611: LD_INT 24
9613: PUSH
9614: LD_INT 1000
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL_OW 70
9633: ST_TO_ADDR
// if not un then
9634: LD_VAR 0 1
9638: NOT
9639: IFFALSE 9643
// continue ;
9641: GO 9583
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9643: LD_ADDR_VAR 0 3
9647: PUSH
9648: LD_VAR 0 1
9652: PUSH
9653: LD_INT 1
9655: ARRAY
9656: PPUSH
9657: CALL 2016 0 1
9661: ST_TO_ADDR
// until tw ;
9662: LD_VAR 0 3
9666: IFFALSE 9583
// DialogueOn ;
9668: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9672: LD_VAR 0 3
9676: PPUSH
9677: CALL_OW 87
// if Lisa then
9681: LD_EXP 14
9685: IFFALSE 9713
// begin Say ( Lisa , D5-Lisa-1 ) ;
9687: LD_EXP 14
9691: PPUSH
9692: LD_STRING D5-Lisa-1
9694: PPUSH
9695: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9699: LD_EXP 9
9703: PPUSH
9704: LD_STRING D5-JMM-1a
9706: PPUSH
9707: CALL_OW 88
// end else
9711: GO 9725
// Say ( JMM , D5-JMM-1 ) ;
9713: LD_EXP 9
9717: PPUSH
9718: LD_STRING D5-JMM-1
9720: PPUSH
9721: CALL_OW 88
// DialogueOff ;
9725: CALL_OW 7
// while ( true ) do
9729: LD_INT 1
9731: IFFALSE 9787
// begin wait ( 0 0$01 ) ;
9733: LD_INT 35
9735: PPUSH
9736: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9740: LD_ADDR_VAR 0 2
9744: PUSH
9745: LD_INT 8
9747: PPUSH
9748: LD_INT 30
9750: PUSH
9751: LD_INT 26
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 101
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 71
9776: ST_TO_ADDR
// if x then
9777: LD_VAR 0 2
9781: IFFALSE 9785
// break ;
9783: GO 9787
// end ;
9785: GO 9729
// CenterOnUnits ( x [ 1 ] ) ;
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 1
9794: ARRAY
9795: PPUSH
9796: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9800: LD_EXP 15
9804: PUSH
9805: LD_EXP 15
9809: PPUSH
9810: CALL_OW 255
9814: PUSH
9815: LD_INT 1
9817: EQUAL
9818: AND
9819: IFFALSE 9835
// Say ( Frank , D5a-Frank-1 ) else
9821: LD_EXP 15
9825: PPUSH
9826: LD_STRING D5a-Frank-1
9828: PPUSH
9829: CALL_OW 88
9833: GO 9889
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
9835: LD_EXP 18
9839: PUSH
9840: LD_EXP 18
9844: PPUSH
9845: CALL_OW 255
9849: PUSH
9850: LD_INT 1
9852: EQUAL
9853: AND
9854: IFFALSE 9870
// Say ( Kikuchi , D5a-Yam-1 ) else
9856: LD_EXP 18
9860: PPUSH
9861: LD_STRING D5a-Yam-1
9863: PPUSH
9864: CALL_OW 88
9868: GO 9889
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
9870: LD_INT 1
9872: PPUSH
9873: CALL 588 0 1
9877: PUSH
9878: LD_INT 1
9880: ARRAY
9881: PPUSH
9882: LD_STRING D5a-Sol1-1
9884: PPUSH
9885: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
9889: LD_EXP 9
9893: PPUSH
9894: LD_STRING D5a-JMM-1
9896: PPUSH
9897: CALL_OW 88
// if Cyrus then
9901: LD_EXP 13
9905: IFFALSE 9919
// Say ( Cyrus , D5a-Cyrus-1 ) ;
9907: LD_EXP 13
9911: PPUSH
9912: LD_STRING D5a-Cyrus-1
9914: PPUSH
9915: CALL_OW 88
// x := false ;
9919: LD_ADDR_VAR 0 2
9923: PUSH
9924: LD_INT 0
9926: ST_TO_ADDR
// while ( true ) do
9927: LD_INT 1
9929: IFFALSE 10016
// begin wait ( 0 0$01 ) ;
9931: LD_INT 35
9933: PPUSH
9934: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
9938: LD_ADDR_VAR 0 4
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: LD_INT 30
9948: PUSH
9949: LD_INT 0
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 30
9958: PUSH
9959: LD_INT 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: PUSH
9976: LD_INT 1
9978: DIFF
9979: PUSH
9980: FOR_IN
9981: IFFALSE 10004
// if BaseNeedEnergy ( i ) then
9983: LD_VAR 0 4
9987: PPUSH
9988: CALL 1141 0 1
9992: IFFALSE 10002
// x := true ;
9994: LD_ADDR_VAR 0 2
9998: PUSH
9999: LD_INT 1
10001: ST_TO_ADDR
10002: GO 9980
10004: POP
10005: POP
// if x then
10006: LD_VAR 0 2
10010: IFFALSE 10014
// break ;
10012: GO 10016
// end ;
10014: GO 9927
// Say ( JMM , D5b-JMM-1 ) ;
10016: LD_EXP 9
10020: PPUSH
10021: LD_STRING D5b-JMM-1
10023: PPUSH
10024: CALL_OW 88
// end ;
10028: PPOPN 4
10030: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10031: LD_EXP 5
10035: PUSH
10036: LD_INT 1
10038: ARRAY
10039: PUSH
10040: LD_OWVAR 1
10044: LESS
10045: IFFALSE 10245
10047: GO 10049
10049: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10050: LD_INT 16
10052: PPUSH
10053: CALL_OW 301
10057: NOT
10058: IFFALSE 10081
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10060: LD_EXP 19
10064: PPUSH
10065: LD_STRING D3b-Har-3
10067: PPUSH
10068: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10072: LD_STRING M2a
10074: PPUSH
10075: CALL_OW 337
// end else
10079: GO 10100
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10081: LD_EXP 19
10085: PPUSH
10086: LD_STRING D3b-Har-3a
10088: PPUSH
10089: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10093: LD_STRING M2
10095: PPUSH
10096: CALL_OW 337
// end ; can_end := true ;
10100: LD_ADDR_EXP 6
10104: PUSH
10105: LD_INT 1
10107: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10108: LD_INT 9
10110: PPUSH
10111: LD_INT 1
10113: PPUSH
10114: CALL_OW 424
// Wait ( 0 0$02 ) ;
10118: LD_INT 70
10120: PPUSH
10121: CALL_OW 67
// if Lisa then
10125: LD_EXP 14
10129: IFFALSE 10143
// Say ( Lisa , D3b-Lisa ) ;
10131: LD_EXP 14
10135: PPUSH
10136: LD_STRING D3b-Lisa
10138: PPUSH
10139: CALL_OW 88
// if Bobby then
10143: LD_EXP 12
10147: IFFALSE 10161
// Say ( Bobby , D3b-Bobby-3 ) ;
10149: LD_EXP 12
10153: PPUSH
10154: LD_STRING D3b-Bobby-3
10156: PPUSH
10157: CALL_OW 88
// if Cyrus then
10161: LD_EXP 13
10165: IFFALSE 10179
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10167: LD_EXP 13
10171: PPUSH
10172: LD_STRING D3b-Cyrus-3
10174: PPUSH
10175: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10179: LD_EXP 15
10183: PUSH
10184: LD_EXP 15
10188: PPUSH
10189: CALL_OW 255
10193: PUSH
10194: LD_INT 1
10196: EQUAL
10197: AND
10198: IFFALSE 10212
// Say ( Frank , D3b-Frank-3 ) ;
10200: LD_EXP 15
10204: PPUSH
10205: LD_STRING D3b-Frank-3
10207: PPUSH
10208: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10212: LD_EXP 18
10216: PUSH
10217: LD_EXP 18
10221: PPUSH
10222: CALL_OW 255
10226: PUSH
10227: LD_INT 1
10229: EQUAL
10230: AND
10231: IFFALSE 10245
// Say ( Kikuchi , D3b-Yam-4 ) ;
10233: LD_EXP 18
10237: PPUSH
10238: LD_STRING D3b-Yam-4
10240: PPUSH
10241: CALL_OW 88
// end ;
10245: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10246: LD_EXP 5
10250: PUSH
10251: LD_INT 2
10253: ARRAY
10254: PUSH
10255: LD_OWVAR 1
10259: LESS
10260: IFFALSE 10292
10262: GO 10264
10264: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10265: LD_EXP 19
10269: PPUSH
10270: LD_STRING D4-Har-1
10272: PPUSH
10273: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10277: LD_STRING M3
10279: PPUSH
10280: CALL_OW 337
// must_end := true ;
10284: LD_ADDR_EXP 7
10288: PUSH
10289: LD_INT 1
10291: ST_TO_ADDR
// end ;
10292: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10293: LD_EXP 5
10297: PUSH
10298: LD_INT 3
10300: ARRAY
10301: PUSH
10302: LD_OWVAR 1
10306: LESS
10307: IFFALSE 10338
10309: GO 10311
10311: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10312: LD_INT 16
10314: PPUSH
10315: CALL_OW 301
10319: NOT
10320: IFFALSE 10331
// YouLost ( TimeOut1 ) else
10322: LD_STRING TimeOut1
10324: PPUSH
10325: CALL_OW 104
10329: GO 10338
// YouLost ( TimeOut2 ) ;
10331: LD_STRING TimeOut2
10333: PPUSH
10334: CALL_OW 104
// end ;
10338: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10339: LD_EXP 9
10343: PPUSH
10344: LD_INT 9
10346: PPUSH
10347: CALL_OW 308
10351: PUSH
10352: LD_EXP 6
10356: AND
10357: IFFALSE 11457
10359: GO 10361
10361: DISABLE
10362: LD_INT 0
10364: PPUSH
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
// begin wait_on := false ;
10370: LD_ADDR_VAR 0 1
10374: PUSH
10375: LD_INT 0
10377: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10378: LD_INT 1
10380: PPUSH
10381: CALL 1218 0 1
10385: PUSH
10386: LD_INT 0
10388: PLUS
10389: PUSH
10390: LD_INT 1
10392: PPUSH
10393: LD_INT 9
10395: PPUSH
10396: CALL 1309 0 2
10400: PUSH
10401: LD_INT 1
10403: PPUSH
10404: LD_INT 9
10406: PPUSH
10407: CALL 1356 0 2
10411: ADD
10412: PUSH
10413: LD_INT 0
10415: PLUS
10416: GREATER
10417: IFFALSE 10466
// case Query ( Q1 ) of 1 :
10419: LD_STRING Q1
10421: PPUSH
10422: CALL_OW 97
10426: PUSH
10427: LD_INT 1
10429: DOUBLE
10430: EQUAL
10431: IFTRUE 10435
10433: GO 10446
10435: POP
// wait_on := true ; 2 :
10436: LD_ADDR_VAR 0 1
10440: PUSH
10441: LD_INT 1
10443: ST_TO_ADDR
10444: GO 10466
10446: LD_INT 2
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10465
10454: POP
// wait_on := false ; end ;
10455: LD_ADDR_VAR 0 1
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
10463: GO 10466
10465: POP
// repeat wait ( 0 0$01 ) ;
10466: LD_INT 35
10468: PPUSH
10469: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10473: LD_VAR 0 1
10477: NOT
10478: PUSH
10479: LD_INT 1
10481: PPUSH
10482: CALL 1218 0 1
10486: PUSH
10487: LD_INT 0
10489: PLUS
10490: PUSH
10491: LD_INT 1
10493: PPUSH
10494: LD_INT 9
10496: PPUSH
10497: CALL 1309 0 2
10501: PUSH
10502: LD_INT 1
10504: PPUSH
10505: LD_INT 9
10507: PPUSH
10508: CALL 1356 0 2
10512: ADD
10513: PUSH
10514: LD_INT 0
10516: PLUS
10517: EQUAL
10518: OR
10519: IFFALSE 10466
// DialogueOn ;
10521: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10525: LD_EXP 9
10529: PPUSH
10530: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10534: LD_EXP 9
10538: PPUSH
10539: LD_STRING D6-JMM-1
10541: PPUSH
10542: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10546: LD_EXP 19
10550: PPUSH
10551: LD_STRING D6-Har-1
10553: PPUSH
10554: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10558: LD_EXP 9
10562: PPUSH
10563: LD_STRING D6-JMM-2
10565: PPUSH
10566: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10570: LD_EXP 19
10574: PPUSH
10575: LD_STRING D6-Har-2
10577: PPUSH
10578: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10582: LD_EXP 9
10586: PPUSH
10587: LD_STRING D6-JMM-3
10589: PPUSH
10590: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10594: LD_EXP 19
10598: PPUSH
10599: LD_STRING D6-Har-3
10601: PPUSH
10602: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10606: LD_EXP 9
10610: PPUSH
10611: LD_STRING D6-JMM-4
10613: PPUSH
10614: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10618: LD_EXP 19
10622: PPUSH
10623: LD_STRING D6-Har-4
10625: PPUSH
10626: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10630: LD_EXP 9
10634: PPUSH
10635: LD_STRING D6-JMM-5
10637: PPUSH
10638: CALL_OW 88
// DialogueOff ;
10642: CALL_OW 7
// m1 := false ;
10646: LD_ADDR_VAR 0 4
10650: PUSH
10651: LD_INT 0
10653: ST_TO_ADDR
// m2 := false ;
10654: LD_ADDR_VAR 0 5
10658: PUSH
10659: LD_INT 0
10661: ST_TO_ADDR
// m3 := false ;
10662: LD_ADDR_VAR 0 6
10666: PUSH
10667: LD_INT 0
10669: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10670: LD_ADDR_VAR 0 3
10674: PUSH
10675: LD_INT 3
10677: PPUSH
10678: CALL 1487 0 1
10682: ST_TO_ADDR
// if tmp >= 35 then
10683: LD_VAR 0 3
10687: PUSH
10688: LD_INT 35
10690: GREATEREQUAL
10691: IFFALSE 10728
// begin AddMedal ( Destroy1 , - 1 ) ;
10693: LD_STRING Destroy1
10695: PPUSH
10696: LD_INT 1
10698: NEG
10699: PPUSH
10700: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10704: LD_STRING Destroy2
10706: PPUSH
10707: LD_INT 1
10709: NEG
10710: PPUSH
10711: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10715: LD_STRING Destroy3
10717: PPUSH
10718: LD_INT 1
10720: NEG
10721: PPUSH
10722: CALL_OW 101
// end else
10726: GO 10839
// begin AddMedal ( Destroy1 , 1 ) ;
10728: LD_STRING Destroy1
10730: PPUSH
10731: LD_INT 1
10733: PPUSH
10734: CALL_OW 101
// m1 := true ;
10738: LD_ADDR_VAR 0 4
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// if tmp >= 25 then
10746: LD_VAR 0 3
10750: PUSH
10751: LD_INT 25
10753: GREATEREQUAL
10754: IFFALSE 10780
// begin AddMedal ( Destroy2 , - 1 ) ;
10756: LD_STRING Destroy2
10758: PPUSH
10759: LD_INT 1
10761: NEG
10762: PPUSH
10763: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10767: LD_STRING Destroy3
10769: PPUSH
10770: LD_INT 1
10772: NEG
10773: PPUSH
10774: CALL_OW 101
// end else
10778: GO 10839
// begin AddMedal ( Destroy2 , 1 ) ;
10780: LD_STRING Destroy2
10782: PPUSH
10783: LD_INT 1
10785: PPUSH
10786: CALL_OW 101
// m2 := true ;
10790: LD_ADDR_VAR 0 5
10794: PUSH
10795: LD_INT 1
10797: ST_TO_ADDR
// if tmp >= 15 then
10798: LD_VAR 0 3
10802: PUSH
10803: LD_INT 15
10805: GREATEREQUAL
10806: IFFALSE 10821
// AddMedal ( Destroy3 , - 1 ) else
10808: LD_STRING Destroy3
10810: PPUSH
10811: LD_INT 1
10813: NEG
10814: PPUSH
10815: CALL_OW 101
10819: GO 10839
// begin AddMedal ( Destroy3 , 1 ) ;
10821: LD_STRING Destroy3
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 101
// m3 := true ;
10831: LD_ADDR_VAR 0 6
10835: PUSH
10836: LD_INT 1
10838: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
10839: LD_OWVAR 1
10843: PUSH
10844: LD_INT 67200
10846: LESSEQUAL
10847: IFFALSE 10856
// SetAchievement ( ACH_ASPEED_7 ) ;
10849: LD_STRING ACH_ASPEED_7
10851: PPUSH
10852: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
10856: LD_VAR 0 4
10860: PUSH
10861: LD_VAR 0 5
10865: AND
10866: PUSH
10867: LD_VAR 0 6
10871: AND
10872: PUSH
10873: LD_OWVAR 67
10877: PUSH
10878: LD_INT 3
10880: EQUAL
10881: AND
10882: IFFALSE 10894
// SetAchievementEX ( ACH_AMER , 7 ) ;
10884: LD_STRING ACH_AMER
10886: PPUSH
10887: LD_INT 7
10889: PPUSH
10890: CALL_OW 564
// GiveMedals ( MAIN ) ;
10894: LD_STRING MAIN
10896: PPUSH
10897: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
10901: LD_ADDR_VAR 0 3
10905: PUSH
10906: LD_INT 1
10908: PPUSH
10909: LD_INT 9
10911: PPUSH
10912: CALL 1309 0 2
10916: PUSH
10917: LD_INT 1
10919: PPUSH
10920: LD_INT 9
10922: PPUSH
10923: CALL 1356 0 2
10927: UNION
10928: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10929: LD_VAR 0 3
10933: PPUSH
10934: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10938: LD_EXP 9
10942: PPUSH
10943: LD_EXP 3
10947: PUSH
10948: LD_STRING JMM
10950: STR
10951: PPUSH
10952: CALL_OW 38
// if Brown in tmp then
10956: LD_EXP 10
10960: PUSH
10961: LD_VAR 0 3
10965: IN
10966: IFFALSE 10986
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
10968: LD_EXP 10
10972: PPUSH
10973: LD_EXP 3
10977: PUSH
10978: LD_STRING Brown
10980: STR
10981: PPUSH
10982: CALL_OW 38
// if Donaldson in tmp then
10986: LD_EXP 11
10990: PUSH
10991: LD_VAR 0 3
10995: IN
10996: IFFALSE 11016
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10998: LD_EXP 11
11002: PPUSH
11003: LD_EXP 3
11007: PUSH
11008: LD_STRING Donaldson
11010: STR
11011: PPUSH
11012: CALL_OW 38
// if Bobby in tmp then
11016: LD_EXP 12
11020: PUSH
11021: LD_VAR 0 3
11025: IN
11026: IFFALSE 11046
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11028: LD_EXP 12
11032: PPUSH
11033: LD_EXP 3
11037: PUSH
11038: LD_STRING Bobby
11040: STR
11041: PPUSH
11042: CALL_OW 38
// if Cyrus in tmp then
11046: LD_EXP 13
11050: PUSH
11051: LD_VAR 0 3
11055: IN
11056: IFFALSE 11076
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11058: LD_EXP 13
11062: PPUSH
11063: LD_EXP 3
11067: PUSH
11068: LD_STRING Cyrus
11070: STR
11071: PPUSH
11072: CALL_OW 38
// if Lisa in tmp then
11076: LD_EXP 14
11080: PUSH
11081: LD_VAR 0 3
11085: IN
11086: IFFALSE 11106
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11088: LD_EXP 14
11092: PPUSH
11093: LD_EXP 3
11097: PUSH
11098: LD_STRING Lisa
11100: STR
11101: PPUSH
11102: CALL_OW 38
// if Frank in tmp then
11106: LD_EXP 15
11110: PUSH
11111: LD_VAR 0 3
11115: IN
11116: IFFALSE 11136
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11118: LD_EXP 15
11122: PPUSH
11123: LD_EXP 3
11127: PUSH
11128: LD_STRING Frank
11130: STR
11131: PPUSH
11132: CALL_OW 38
// if Gladstone in tmp then
11136: LD_EXP 16
11140: PUSH
11141: LD_VAR 0 3
11145: IN
11146: IFFALSE 11166
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11148: LD_EXP 16
11152: PPUSH
11153: LD_EXP 3
11157: PUSH
11158: LD_STRING Gladstone
11160: STR
11161: PPUSH
11162: CALL_OW 38
// if Khatam in tmp then
11166: LD_EXP 17
11170: PUSH
11171: LD_VAR 0 3
11175: IN
11176: IFFALSE 11196
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11178: LD_EXP 17
11182: PPUSH
11183: LD_EXP 3
11187: PUSH
11188: LD_STRING Khatam
11190: STR
11191: PPUSH
11192: CALL_OW 38
// if Kikuchi in tmp then
11196: LD_EXP 18
11200: PUSH
11201: LD_VAR 0 3
11205: IN
11206: IFFALSE 11226
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11208: LD_EXP 18
11212: PPUSH
11213: LD_EXP 3
11217: PUSH
11218: LD_STRING Kikuchi
11220: STR
11221: PPUSH
11222: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11226: LD_VAR 0 3
11230: PUSH
11231: LD_EXP 9
11235: PUSH
11236: LD_EXP 10
11240: PUSH
11241: LD_EXP 11
11245: PUSH
11246: LD_EXP 12
11250: PUSH
11251: LD_EXP 13
11255: PUSH
11256: LD_EXP 14
11260: PUSH
11261: LD_EXP 15
11265: PUSH
11266: LD_EXP 16
11270: PUSH
11271: LD_EXP 18
11275: PUSH
11276: LD_EXP 17
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: DIFF
11293: PPUSH
11294: LD_EXP 3
11298: PUSH
11299: LD_STRING others
11301: STR
11302: PPUSH
11303: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11307: LD_OWVAR 1
11311: PPUSH
11312: LD_STRING 07_time
11314: PPUSH
11315: CALL_OW 39
// tmp := [ ] ;
11319: LD_ADDR_VAR 0 3
11323: PUSH
11324: EMPTY
11325: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_INT 9
11333: PPUSH
11334: LD_INT 22
11336: PUSH
11337: LD_INT 1
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 23
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 21
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: PPUSH
11372: CALL_OW 70
11376: PUSH
11377: FOR_IN
11378: IFFALSE 11439
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11380: LD_ADDR_VAR 0 3
11384: PUSH
11385: LD_VAR 0 3
11389: PUSH
11390: LD_VAR 0 2
11394: PPUSH
11395: CALL_OW 265
11399: PUSH
11400: LD_VAR 0 2
11404: PPUSH
11405: CALL_OW 262
11409: PUSH
11410: LD_VAR 0 2
11414: PPUSH
11415: CALL_OW 263
11419: PUSH
11420: LD_VAR 0 2
11424: PPUSH
11425: CALL_OW 264
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: ADD
11436: ST_TO_ADDR
11437: GO 11377
11439: POP
11440: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11441: LD_VAR 0 3
11445: PPUSH
11446: LD_STRING 07_vehicles
11448: PPUSH
11449: CALL_OW 39
// YouWin ;
11453: CALL_OW 103
// end ; end_of_file
11457: PPOPN 6
11459: END
// on UnitDestroyed ( un ) do begin if un = JMM then
11460: LD_VAR 0 1
11464: PUSH
11465: LD_EXP 9
11469: EQUAL
11470: IFFALSE 11479
// YouLost ( JMM ) ;
11472: LD_STRING JMM
11474: PPUSH
11475: CALL_OW 104
// if GetType ( un ) = unit_building then
11479: LD_VAR 0 1
11483: PPUSH
11484: CALL_OW 247
11488: PUSH
11489: LD_INT 3
11491: EQUAL
11492: IFFALSE 11508
// buildings_counter := buildings_counter + 1 ;
11494: LD_ADDR_EXP 4
11498: PUSH
11499: LD_EXP 4
11503: PUSH
11504: LD_INT 1
11506: PLUS
11507: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11508: LD_VAR 0 1
11512: PUSH
11513: LD_INT 6
11515: PPUSH
11516: LD_INT 2
11518: PUSH
11519: LD_INT 30
11521: PUSH
11522: LD_INT 33
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 30
11531: PUSH
11532: LD_INT 32
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: PPUSH
11544: CALL_OW 70
11548: IN
11549: IFFALSE 11608
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11551: LD_ADDR_EXP 20
11555: PUSH
11556: LD_EXP 20
11560: PUSH
11561: LD_VAR 0 1
11565: PPUSH
11566: CALL_OW 266
11570: PUSH
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 250
11580: PUSH
11581: LD_VAR 0 1
11585: PPUSH
11586: CALL_OW 251
11590: PUSH
11591: LD_VAR 0 1
11595: PPUSH
11596: CALL_OW 254
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: ADD
11607: ST_TO_ADDR
// if un = ru_dep_main then
11608: LD_VAR 0 1
11612: PUSH
11613: LD_INT 16
11615: EQUAL
11616: IFFALSE 11625
// ChangeMissionObjectives ( M1a ) ;
11618: LD_STRING M1a
11620: PPUSH
11621: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 247
11634: PUSH
11635: LD_INT 1
11637: EQUAL
11638: PUSH
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 255
11648: PUSH
11649: LD_INT 3
11651: EQUAL
11652: AND
11653: IFFALSE 11669
// kill_counter := kill_counter + 1 ;
11655: LD_ADDR_EXP 8
11659: PUSH
11660: LD_EXP 8
11664: PUSH
11665: LD_INT 1
11667: PLUS
11668: ST_TO_ADDR
// end ;
11669: PPOPN 1
11671: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11672: LD_VAR 0 1
11676: PPUSH
11677: CALL_OW 266
11681: PUSH
11682: LD_INT 32
11684: EQUAL
11685: PUSH
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 110
11695: PUSH
11696: LD_INT 7
11698: EQUAL
11699: AND
11700: IFFALSE 11714
// SetTag ( un , 0 ) ;
11702: LD_VAR 0 1
11706: PPUSH
11707: LD_INT 0
11709: PPUSH
11710: CALL_OW 109
// end ;
11714: PPOPN 1
11716: END
// on BuildingStarted ( b , builder ) do var i ;
11717: LD_INT 0
11719: PPUSH
// begin if GetSide ( b ) = 3 then
11720: LD_VAR 0 1
11724: PPUSH
11725: CALL_OW 255
11729: PUSH
11730: LD_INT 3
11732: EQUAL
11733: IFFALSE 11773
// for i = 1 to 4 do
11735: LD_ADDR_VAR 0 3
11739: PUSH
11740: DOUBLE
11741: LD_INT 1
11743: DEC
11744: ST_TO_ADDR
11745: LD_INT 4
11747: PUSH
11748: FOR_TO
11749: IFFALSE 11771
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11751: LD_ADDR_EXP 20
11755: PUSH
11756: LD_EXP 20
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: CALL_OW 3
11768: ST_TO_ADDR
11769: GO 11748
11771: POP
11772: POP
// end ;
11773: PPOPN 3
11775: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11776: LD_VAR 0 1
11780: PPUSH
11781: CALL_OW 266
11785: PUSH
11786: LD_INT 32
11788: PUSH
11789: LD_INT 33
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: IN
11796: IFFALSE 11810
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11798: LD_VAR 0 1
11802: PPUSH
11803: LD_INT 43
11805: PPUSH
11806: CALL_OW 148
11810: PPOPN 1
11812: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
11813: LD_VAR 0 1
11817: PUSH
11818: LD_INT 22
11820: PUSH
11821: LD_INT 3
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 2
11830: PUSH
11831: LD_INT 30
11833: PUSH
11834: LD_INT 31
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 30
11843: PUSH
11844: LD_INT 32
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PPUSH
11860: CALL_OW 69
11864: IN
11865: IFFALSE 11887
// GoToAnotherTower ( un , b , 143 , 143 ) ;
11867: LD_VAR 0 2
11871: PPUSH
11872: LD_VAR 0 1
11876: PPUSH
11877: LD_INT 143
11879: PPUSH
11880: LD_INT 143
11882: PPUSH
11883: CALL 818 0 4
// end ;
11887: PPOPN 2
11889: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
11890: LD_VAR 0 1
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 3
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 30
11907: PUSH
11908: LD_INT 32
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PPUSH
11919: CALL_OW 69
11923: IN
11924: IFFALSE 11938
// SetTag ( b , 0 ) ;
11926: LD_VAR 0 1
11930: PPUSH
11931: LD_INT 0
11933: PPUSH
11934: CALL_OW 109
// end ; end_of_file
11938: PPOPN 2
11940: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11941: LD_INT 0
11943: PPUSH
// ar_miner := 81 ;
11944: LD_ADDR_EXP 28
11948: PUSH
11949: LD_INT 81
11951: ST_TO_ADDR
// ar_crane := 88 ;
11952: LD_ADDR_EXP 27
11956: PUSH
11957: LD_INT 88
11959: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11960: LD_ADDR_EXP 22
11964: PUSH
11965: LD_INT 89
11967: ST_TO_ADDR
// us_hack := 99 ;
11968: LD_ADDR_EXP 23
11972: PUSH
11973: LD_INT 99
11975: ST_TO_ADDR
// us_artillery := 97 ;
11976: LD_ADDR_EXP 24
11980: PUSH
11981: LD_INT 97
11983: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11984: LD_ADDR_EXP 25
11988: PUSH
11989: LD_INT 91
11991: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11992: LD_ADDR_EXP 26
11996: PUSH
11997: LD_INT 92
11999: ST_TO_ADDR
// ru_radar := 98 ;
12000: LD_ADDR_EXP 21
12004: PUSH
12005: LD_INT 98
12007: ST_TO_ADDR
// tech_Artillery := 80 ;
12008: LD_ADDR_EXP 29
12012: PUSH
12013: LD_INT 80
12015: ST_TO_ADDR
// tech_RadMat := 81 ;
12016: LD_ADDR_EXP 30
12020: PUSH
12021: LD_INT 81
12023: ST_TO_ADDR
// tech_BasicTools := 82 ;
12024: LD_ADDR_EXP 31
12028: PUSH
12029: LD_INT 82
12031: ST_TO_ADDR
// tech_Cargo := 83 ;
12032: LD_ADDR_EXP 32
12036: PUSH
12037: LD_INT 83
12039: ST_TO_ADDR
// tech_Track := 84 ;
12040: LD_ADDR_EXP 33
12044: PUSH
12045: LD_INT 84
12047: ST_TO_ADDR
// tech_Crane := 85 ;
12048: LD_ADDR_EXP 34
12052: PUSH
12053: LD_INT 85
12055: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12056: LD_ADDR_EXP 35
12060: PUSH
12061: LD_INT 86
12063: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12064: LD_ADDR_EXP 36
12068: PUSH
12069: LD_INT 87
12071: ST_TO_ADDR
// class_mastodont := 31 ;
12072: LD_ADDR_EXP 37
12076: PUSH
12077: LD_INT 31
12079: ST_TO_ADDR
// class_horse := 21 ;
12080: LD_ADDR_EXP 38
12084: PUSH
12085: LD_INT 21
12087: ST_TO_ADDR
// end ;
12088: LD_VAR 0 1
12092: RET
// every 1 do
12093: GO 12095
12095: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12096: CALL 11941 0 0
12100: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12101: LD_INT 0
12103: PPUSH
// if p2 = 100 then
12104: LD_VAR 0 2
12108: PUSH
12109: LD_INT 100
12111: EQUAL
12112: IFFALSE 13061
// begin if not StreamModeActive then
12114: LD_EXP 39
12118: NOT
12119: IFFALSE 12129
// StreamModeActive := true ;
12121: LD_ADDR_EXP 39
12125: PUSH
12126: LD_INT 1
12128: ST_TO_ADDR
// if p3 = 0 then
12129: LD_VAR 0 3
12133: PUSH
12134: LD_INT 0
12136: EQUAL
12137: IFFALSE 12143
// InitStreamMode ;
12139: CALL 13221 0 0
// if p3 = 1 then
12143: LD_VAR 0 3
12147: PUSH
12148: LD_INT 1
12150: EQUAL
12151: IFFALSE 12161
// sRocket := true ;
12153: LD_ADDR_EXP 44
12157: PUSH
12158: LD_INT 1
12160: ST_TO_ADDR
// if p3 = 2 then
12161: LD_VAR 0 3
12165: PUSH
12166: LD_INT 2
12168: EQUAL
12169: IFFALSE 12179
// sSpeed := true ;
12171: LD_ADDR_EXP 43
12175: PUSH
12176: LD_INT 1
12178: ST_TO_ADDR
// if p3 = 3 then
12179: LD_VAR 0 3
12183: PUSH
12184: LD_INT 3
12186: EQUAL
12187: IFFALSE 12197
// sEngine := true ;
12189: LD_ADDR_EXP 45
12193: PUSH
12194: LD_INT 1
12196: ST_TO_ADDR
// if p3 = 4 then
12197: LD_VAR 0 3
12201: PUSH
12202: LD_INT 4
12204: EQUAL
12205: IFFALSE 12215
// sSpec := true ;
12207: LD_ADDR_EXP 42
12211: PUSH
12212: LD_INT 1
12214: ST_TO_ADDR
// if p3 = 5 then
12215: LD_VAR 0 3
12219: PUSH
12220: LD_INT 5
12222: EQUAL
12223: IFFALSE 12233
// sLevel := true ;
12225: LD_ADDR_EXP 46
12229: PUSH
12230: LD_INT 1
12232: ST_TO_ADDR
// if p3 = 6 then
12233: LD_VAR 0 3
12237: PUSH
12238: LD_INT 6
12240: EQUAL
12241: IFFALSE 12251
// sArmoury := true ;
12243: LD_ADDR_EXP 47
12247: PUSH
12248: LD_INT 1
12250: ST_TO_ADDR
// if p3 = 7 then
12251: LD_VAR 0 3
12255: PUSH
12256: LD_INT 7
12258: EQUAL
12259: IFFALSE 12269
// sRadar := true ;
12261: LD_ADDR_EXP 48
12265: PUSH
12266: LD_INT 1
12268: ST_TO_ADDR
// if p3 = 8 then
12269: LD_VAR 0 3
12273: PUSH
12274: LD_INT 8
12276: EQUAL
12277: IFFALSE 12287
// sBunker := true ;
12279: LD_ADDR_EXP 49
12283: PUSH
12284: LD_INT 1
12286: ST_TO_ADDR
// if p3 = 9 then
12287: LD_VAR 0 3
12291: PUSH
12292: LD_INT 9
12294: EQUAL
12295: IFFALSE 12305
// sHack := true ;
12297: LD_ADDR_EXP 50
12301: PUSH
12302: LD_INT 1
12304: ST_TO_ADDR
// if p3 = 10 then
12305: LD_VAR 0 3
12309: PUSH
12310: LD_INT 10
12312: EQUAL
12313: IFFALSE 12323
// sFire := true ;
12315: LD_ADDR_EXP 51
12319: PUSH
12320: LD_INT 1
12322: ST_TO_ADDR
// if p3 = 11 then
12323: LD_VAR 0 3
12327: PUSH
12328: LD_INT 11
12330: EQUAL
12331: IFFALSE 12341
// sRefresh := true ;
12333: LD_ADDR_EXP 52
12337: PUSH
12338: LD_INT 1
12340: ST_TO_ADDR
// if p3 = 12 then
12341: LD_VAR 0 3
12345: PUSH
12346: LD_INT 12
12348: EQUAL
12349: IFFALSE 12359
// sExp := true ;
12351: LD_ADDR_EXP 53
12355: PUSH
12356: LD_INT 1
12358: ST_TO_ADDR
// if p3 = 13 then
12359: LD_VAR 0 3
12363: PUSH
12364: LD_INT 13
12366: EQUAL
12367: IFFALSE 12377
// sDepot := true ;
12369: LD_ADDR_EXP 54
12373: PUSH
12374: LD_INT 1
12376: ST_TO_ADDR
// if p3 = 14 then
12377: LD_VAR 0 3
12381: PUSH
12382: LD_INT 14
12384: EQUAL
12385: IFFALSE 12395
// sFlag := true ;
12387: LD_ADDR_EXP 55
12391: PUSH
12392: LD_INT 1
12394: ST_TO_ADDR
// if p3 = 15 then
12395: LD_VAR 0 3
12399: PUSH
12400: LD_INT 15
12402: EQUAL
12403: IFFALSE 12413
// sKamikadze := true ;
12405: LD_ADDR_EXP 63
12409: PUSH
12410: LD_INT 1
12412: ST_TO_ADDR
// if p3 = 16 then
12413: LD_VAR 0 3
12417: PUSH
12418: LD_INT 16
12420: EQUAL
12421: IFFALSE 12431
// sTroll := true ;
12423: LD_ADDR_EXP 64
12427: PUSH
12428: LD_INT 1
12430: ST_TO_ADDR
// if p3 = 17 then
12431: LD_VAR 0 3
12435: PUSH
12436: LD_INT 17
12438: EQUAL
12439: IFFALSE 12449
// sSlow := true ;
12441: LD_ADDR_EXP 65
12445: PUSH
12446: LD_INT 1
12448: ST_TO_ADDR
// if p3 = 18 then
12449: LD_VAR 0 3
12453: PUSH
12454: LD_INT 18
12456: EQUAL
12457: IFFALSE 12467
// sLack := true ;
12459: LD_ADDR_EXP 66
12463: PUSH
12464: LD_INT 1
12466: ST_TO_ADDR
// if p3 = 19 then
12467: LD_VAR 0 3
12471: PUSH
12472: LD_INT 19
12474: EQUAL
12475: IFFALSE 12485
// sTank := true ;
12477: LD_ADDR_EXP 68
12481: PUSH
12482: LD_INT 1
12484: ST_TO_ADDR
// if p3 = 20 then
12485: LD_VAR 0 3
12489: PUSH
12490: LD_INT 20
12492: EQUAL
12493: IFFALSE 12503
// sRemote := true ;
12495: LD_ADDR_EXP 69
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// if p3 = 21 then
12503: LD_VAR 0 3
12507: PUSH
12508: LD_INT 21
12510: EQUAL
12511: IFFALSE 12521
// sPowell := true ;
12513: LD_ADDR_EXP 70
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
// if p3 = 22 then
12521: LD_VAR 0 3
12525: PUSH
12526: LD_INT 22
12528: EQUAL
12529: IFFALSE 12539
// sTeleport := true ;
12531: LD_ADDR_EXP 73
12535: PUSH
12536: LD_INT 1
12538: ST_TO_ADDR
// if p3 = 23 then
12539: LD_VAR 0 3
12543: PUSH
12544: LD_INT 23
12546: EQUAL
12547: IFFALSE 12557
// sOilTower := true ;
12549: LD_ADDR_EXP 75
12553: PUSH
12554: LD_INT 1
12556: ST_TO_ADDR
// if p3 = 24 then
12557: LD_VAR 0 3
12561: PUSH
12562: LD_INT 24
12564: EQUAL
12565: IFFALSE 12575
// sShovel := true ;
12567: LD_ADDR_EXP 76
12571: PUSH
12572: LD_INT 1
12574: ST_TO_ADDR
// if p3 = 25 then
12575: LD_VAR 0 3
12579: PUSH
12580: LD_INT 25
12582: EQUAL
12583: IFFALSE 12593
// sSheik := true ;
12585: LD_ADDR_EXP 77
12589: PUSH
12590: LD_INT 1
12592: ST_TO_ADDR
// if p3 = 26 then
12593: LD_VAR 0 3
12597: PUSH
12598: LD_INT 26
12600: EQUAL
12601: IFFALSE 12611
// sEarthquake := true ;
12603: LD_ADDR_EXP 79
12607: PUSH
12608: LD_INT 1
12610: ST_TO_ADDR
// if p3 = 27 then
12611: LD_VAR 0 3
12615: PUSH
12616: LD_INT 27
12618: EQUAL
12619: IFFALSE 12629
// sAI := true ;
12621: LD_ADDR_EXP 80
12625: PUSH
12626: LD_INT 1
12628: ST_TO_ADDR
// if p3 = 28 then
12629: LD_VAR 0 3
12633: PUSH
12634: LD_INT 28
12636: EQUAL
12637: IFFALSE 12647
// sCargo := true ;
12639: LD_ADDR_EXP 83
12643: PUSH
12644: LD_INT 1
12646: ST_TO_ADDR
// if p3 = 29 then
12647: LD_VAR 0 3
12651: PUSH
12652: LD_INT 29
12654: EQUAL
12655: IFFALSE 12665
// sDLaser := true ;
12657: LD_ADDR_EXP 84
12661: PUSH
12662: LD_INT 1
12664: ST_TO_ADDR
// if p3 = 30 then
12665: LD_VAR 0 3
12669: PUSH
12670: LD_INT 30
12672: EQUAL
12673: IFFALSE 12683
// sExchange := true ;
12675: LD_ADDR_EXP 85
12679: PUSH
12680: LD_INT 1
12682: ST_TO_ADDR
// if p3 = 31 then
12683: LD_VAR 0 3
12687: PUSH
12688: LD_INT 31
12690: EQUAL
12691: IFFALSE 12701
// sFac := true ;
12693: LD_ADDR_EXP 86
12697: PUSH
12698: LD_INT 1
12700: ST_TO_ADDR
// if p3 = 32 then
12701: LD_VAR 0 3
12705: PUSH
12706: LD_INT 32
12708: EQUAL
12709: IFFALSE 12719
// sPower := true ;
12711: LD_ADDR_EXP 87
12715: PUSH
12716: LD_INT 1
12718: ST_TO_ADDR
// if p3 = 33 then
12719: LD_VAR 0 3
12723: PUSH
12724: LD_INT 33
12726: EQUAL
12727: IFFALSE 12737
// sRandom := true ;
12729: LD_ADDR_EXP 88
12733: PUSH
12734: LD_INT 1
12736: ST_TO_ADDR
// if p3 = 34 then
12737: LD_VAR 0 3
12741: PUSH
12742: LD_INT 34
12744: EQUAL
12745: IFFALSE 12755
// sShield := true ;
12747: LD_ADDR_EXP 89
12751: PUSH
12752: LD_INT 1
12754: ST_TO_ADDR
// if p3 = 35 then
12755: LD_VAR 0 3
12759: PUSH
12760: LD_INT 35
12762: EQUAL
12763: IFFALSE 12773
// sTime := true ;
12765: LD_ADDR_EXP 90
12769: PUSH
12770: LD_INT 1
12772: ST_TO_ADDR
// if p3 = 36 then
12773: LD_VAR 0 3
12777: PUSH
12778: LD_INT 36
12780: EQUAL
12781: IFFALSE 12791
// sTools := true ;
12783: LD_ADDR_EXP 91
12787: PUSH
12788: LD_INT 1
12790: ST_TO_ADDR
// if p3 = 101 then
12791: LD_VAR 0 3
12795: PUSH
12796: LD_INT 101
12798: EQUAL
12799: IFFALSE 12809
// sSold := true ;
12801: LD_ADDR_EXP 56
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// if p3 = 102 then
12809: LD_VAR 0 3
12813: PUSH
12814: LD_INT 102
12816: EQUAL
12817: IFFALSE 12827
// sDiff := true ;
12819: LD_ADDR_EXP 57
12823: PUSH
12824: LD_INT 1
12826: ST_TO_ADDR
// if p3 = 103 then
12827: LD_VAR 0 3
12831: PUSH
12832: LD_INT 103
12834: EQUAL
12835: IFFALSE 12845
// sFog := true ;
12837: LD_ADDR_EXP 60
12841: PUSH
12842: LD_INT 1
12844: ST_TO_ADDR
// if p3 = 104 then
12845: LD_VAR 0 3
12849: PUSH
12850: LD_INT 104
12852: EQUAL
12853: IFFALSE 12863
// sReset := true ;
12855: LD_ADDR_EXP 61
12859: PUSH
12860: LD_INT 1
12862: ST_TO_ADDR
// if p3 = 105 then
12863: LD_VAR 0 3
12867: PUSH
12868: LD_INT 105
12870: EQUAL
12871: IFFALSE 12881
// sSun := true ;
12873: LD_ADDR_EXP 62
12877: PUSH
12878: LD_INT 1
12880: ST_TO_ADDR
// if p3 = 106 then
12881: LD_VAR 0 3
12885: PUSH
12886: LD_INT 106
12888: EQUAL
12889: IFFALSE 12899
// sTiger := true ;
12891: LD_ADDR_EXP 58
12895: PUSH
12896: LD_INT 1
12898: ST_TO_ADDR
// if p3 = 107 then
12899: LD_VAR 0 3
12903: PUSH
12904: LD_INT 107
12906: EQUAL
12907: IFFALSE 12917
// sBomb := true ;
12909: LD_ADDR_EXP 59
12913: PUSH
12914: LD_INT 1
12916: ST_TO_ADDR
// if p3 = 108 then
12917: LD_VAR 0 3
12921: PUSH
12922: LD_INT 108
12924: EQUAL
12925: IFFALSE 12935
// sWound := true ;
12927: LD_ADDR_EXP 67
12931: PUSH
12932: LD_INT 1
12934: ST_TO_ADDR
// if p3 = 109 then
12935: LD_VAR 0 3
12939: PUSH
12940: LD_INT 109
12942: EQUAL
12943: IFFALSE 12953
// sBetray := true ;
12945: LD_ADDR_EXP 71
12949: PUSH
12950: LD_INT 1
12952: ST_TO_ADDR
// if p3 = 110 then
12953: LD_VAR 0 3
12957: PUSH
12958: LD_INT 110
12960: EQUAL
12961: IFFALSE 12971
// sContamin := true ;
12963: LD_ADDR_EXP 72
12967: PUSH
12968: LD_INT 1
12970: ST_TO_ADDR
// if p3 = 111 then
12971: LD_VAR 0 3
12975: PUSH
12976: LD_INT 111
12978: EQUAL
12979: IFFALSE 12989
// sOil := true ;
12981: LD_ADDR_EXP 74
12985: PUSH
12986: LD_INT 1
12988: ST_TO_ADDR
// if p3 = 112 then
12989: LD_VAR 0 3
12993: PUSH
12994: LD_INT 112
12996: EQUAL
12997: IFFALSE 13007
// sStu := true ;
12999: LD_ADDR_EXP 78
13003: PUSH
13004: LD_INT 1
13006: ST_TO_ADDR
// if p3 = 113 then
13007: LD_VAR 0 3
13011: PUSH
13012: LD_INT 113
13014: EQUAL
13015: IFFALSE 13025
// sBazooka := true ;
13017: LD_ADDR_EXP 81
13021: PUSH
13022: LD_INT 1
13024: ST_TO_ADDR
// if p3 = 114 then
13025: LD_VAR 0 3
13029: PUSH
13030: LD_INT 114
13032: EQUAL
13033: IFFALSE 13043
// sMortar := true ;
13035: LD_ADDR_EXP 82
13039: PUSH
13040: LD_INT 1
13042: ST_TO_ADDR
// if p3 = 115 then
13043: LD_VAR 0 3
13047: PUSH
13048: LD_INT 115
13050: EQUAL
13051: IFFALSE 13061
// sRanger := true ;
13053: LD_ADDR_EXP 92
13057: PUSH
13058: LD_INT 1
13060: ST_TO_ADDR
// end ; if p2 = 101 then
13061: LD_VAR 0 2
13065: PUSH
13066: LD_INT 101
13068: EQUAL
13069: IFFALSE 13197
// begin case p3 of 1 :
13071: LD_VAR 0 3
13075: PUSH
13076: LD_INT 1
13078: DOUBLE
13079: EQUAL
13080: IFTRUE 13084
13082: GO 13091
13084: POP
// hHackUnlimitedResources ; 2 :
13085: CALL 24234 0 0
13089: GO 13197
13091: LD_INT 2
13093: DOUBLE
13094: EQUAL
13095: IFTRUE 13099
13097: GO 13106
13099: POP
// hHackSetLevel10 ; 3 :
13100: CALL 24367 0 0
13104: GO 13197
13106: LD_INT 3
13108: DOUBLE
13109: EQUAL
13110: IFTRUE 13114
13112: GO 13121
13114: POP
// hHackSetLevel10YourUnits ; 4 :
13115: CALL 24452 0 0
13119: GO 13197
13121: LD_INT 4
13123: DOUBLE
13124: EQUAL
13125: IFTRUE 13129
13127: GO 13136
13129: POP
// hHackInvincible ; 5 :
13130: CALL 24900 0 0
13134: GO 13197
13136: LD_INT 5
13138: DOUBLE
13139: EQUAL
13140: IFTRUE 13144
13142: GO 13151
13144: POP
// hHackInvisible ; 6 :
13145: CALL 25011 0 0
13149: GO 13197
13151: LD_INT 6
13153: DOUBLE
13154: EQUAL
13155: IFTRUE 13159
13157: GO 13166
13159: POP
// hHackChangeYourSide ; 7 :
13160: CALL 25068 0 0
13164: GO 13197
13166: LD_INT 7
13168: DOUBLE
13169: EQUAL
13170: IFTRUE 13174
13172: GO 13181
13174: POP
// hHackChangeUnitSide ; 8 :
13175: CALL 25110 0 0
13179: GO 13197
13181: LD_INT 8
13183: DOUBLE
13184: EQUAL
13185: IFTRUE 13189
13187: GO 13196
13189: POP
// hHackFog ; end ;
13190: CALL 25211 0 0
13194: GO 13197
13196: POP
// end ; end ;
13197: LD_VAR 0 7
13201: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13202: GO 13204
13204: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13205: LD_STRING initStreamRollete();
13207: PPUSH
13208: CALL_OW 559
// InitStreamMode ;
13212: CALL 13221 0 0
// DefineStreamItems ( ) ;
13216: CALL 13661 0 0
// end ;
13220: END
// function InitStreamMode ; begin
13221: LD_INT 0
13223: PPUSH
// streamModeActive := false ;
13224: LD_ADDR_EXP 39
13228: PUSH
13229: LD_INT 0
13231: ST_TO_ADDR
// normalCounter := 36 ;
13232: LD_ADDR_EXP 40
13236: PUSH
13237: LD_INT 36
13239: ST_TO_ADDR
// hardcoreCounter := 16 ;
13240: LD_ADDR_EXP 41
13244: PUSH
13245: LD_INT 16
13247: ST_TO_ADDR
// sRocket := false ;
13248: LD_ADDR_EXP 44
13252: PUSH
13253: LD_INT 0
13255: ST_TO_ADDR
// sSpeed := false ;
13256: LD_ADDR_EXP 43
13260: PUSH
13261: LD_INT 0
13263: ST_TO_ADDR
// sEngine := false ;
13264: LD_ADDR_EXP 45
13268: PUSH
13269: LD_INT 0
13271: ST_TO_ADDR
// sSpec := false ;
13272: LD_ADDR_EXP 42
13276: PUSH
13277: LD_INT 0
13279: ST_TO_ADDR
// sLevel := false ;
13280: LD_ADDR_EXP 46
13284: PUSH
13285: LD_INT 0
13287: ST_TO_ADDR
// sArmoury := false ;
13288: LD_ADDR_EXP 47
13292: PUSH
13293: LD_INT 0
13295: ST_TO_ADDR
// sRadar := false ;
13296: LD_ADDR_EXP 48
13300: PUSH
13301: LD_INT 0
13303: ST_TO_ADDR
// sBunker := false ;
13304: LD_ADDR_EXP 49
13308: PUSH
13309: LD_INT 0
13311: ST_TO_ADDR
// sHack := false ;
13312: LD_ADDR_EXP 50
13316: PUSH
13317: LD_INT 0
13319: ST_TO_ADDR
// sFire := false ;
13320: LD_ADDR_EXP 51
13324: PUSH
13325: LD_INT 0
13327: ST_TO_ADDR
// sRefresh := false ;
13328: LD_ADDR_EXP 52
13332: PUSH
13333: LD_INT 0
13335: ST_TO_ADDR
// sExp := false ;
13336: LD_ADDR_EXP 53
13340: PUSH
13341: LD_INT 0
13343: ST_TO_ADDR
// sDepot := false ;
13344: LD_ADDR_EXP 54
13348: PUSH
13349: LD_INT 0
13351: ST_TO_ADDR
// sFlag := false ;
13352: LD_ADDR_EXP 55
13356: PUSH
13357: LD_INT 0
13359: ST_TO_ADDR
// sKamikadze := false ;
13360: LD_ADDR_EXP 63
13364: PUSH
13365: LD_INT 0
13367: ST_TO_ADDR
// sTroll := false ;
13368: LD_ADDR_EXP 64
13372: PUSH
13373: LD_INT 0
13375: ST_TO_ADDR
// sSlow := false ;
13376: LD_ADDR_EXP 65
13380: PUSH
13381: LD_INT 0
13383: ST_TO_ADDR
// sLack := false ;
13384: LD_ADDR_EXP 66
13388: PUSH
13389: LD_INT 0
13391: ST_TO_ADDR
// sTank := false ;
13392: LD_ADDR_EXP 68
13396: PUSH
13397: LD_INT 0
13399: ST_TO_ADDR
// sRemote := false ;
13400: LD_ADDR_EXP 69
13404: PUSH
13405: LD_INT 0
13407: ST_TO_ADDR
// sPowell := false ;
13408: LD_ADDR_EXP 70
13412: PUSH
13413: LD_INT 0
13415: ST_TO_ADDR
// sTeleport := false ;
13416: LD_ADDR_EXP 73
13420: PUSH
13421: LD_INT 0
13423: ST_TO_ADDR
// sOilTower := false ;
13424: LD_ADDR_EXP 75
13428: PUSH
13429: LD_INT 0
13431: ST_TO_ADDR
// sShovel := false ;
13432: LD_ADDR_EXP 76
13436: PUSH
13437: LD_INT 0
13439: ST_TO_ADDR
// sSheik := false ;
13440: LD_ADDR_EXP 77
13444: PUSH
13445: LD_INT 0
13447: ST_TO_ADDR
// sEarthquake := false ;
13448: LD_ADDR_EXP 79
13452: PUSH
13453: LD_INT 0
13455: ST_TO_ADDR
// sAI := false ;
13456: LD_ADDR_EXP 80
13460: PUSH
13461: LD_INT 0
13463: ST_TO_ADDR
// sCargo := false ;
13464: LD_ADDR_EXP 83
13468: PUSH
13469: LD_INT 0
13471: ST_TO_ADDR
// sDLaser := false ;
13472: LD_ADDR_EXP 84
13476: PUSH
13477: LD_INT 0
13479: ST_TO_ADDR
// sExchange := false ;
13480: LD_ADDR_EXP 85
13484: PUSH
13485: LD_INT 0
13487: ST_TO_ADDR
// sFac := false ;
13488: LD_ADDR_EXP 86
13492: PUSH
13493: LD_INT 0
13495: ST_TO_ADDR
// sPower := false ;
13496: LD_ADDR_EXP 87
13500: PUSH
13501: LD_INT 0
13503: ST_TO_ADDR
// sRandom := false ;
13504: LD_ADDR_EXP 88
13508: PUSH
13509: LD_INT 0
13511: ST_TO_ADDR
// sShield := false ;
13512: LD_ADDR_EXP 89
13516: PUSH
13517: LD_INT 0
13519: ST_TO_ADDR
// sTime := false ;
13520: LD_ADDR_EXP 90
13524: PUSH
13525: LD_INT 0
13527: ST_TO_ADDR
// sTools := false ;
13528: LD_ADDR_EXP 91
13532: PUSH
13533: LD_INT 0
13535: ST_TO_ADDR
// sSold := false ;
13536: LD_ADDR_EXP 56
13540: PUSH
13541: LD_INT 0
13543: ST_TO_ADDR
// sDiff := false ;
13544: LD_ADDR_EXP 57
13548: PUSH
13549: LD_INT 0
13551: ST_TO_ADDR
// sFog := false ;
13552: LD_ADDR_EXP 60
13556: PUSH
13557: LD_INT 0
13559: ST_TO_ADDR
// sReset := false ;
13560: LD_ADDR_EXP 61
13564: PUSH
13565: LD_INT 0
13567: ST_TO_ADDR
// sSun := false ;
13568: LD_ADDR_EXP 62
13572: PUSH
13573: LD_INT 0
13575: ST_TO_ADDR
// sTiger := false ;
13576: LD_ADDR_EXP 58
13580: PUSH
13581: LD_INT 0
13583: ST_TO_ADDR
// sBomb := false ;
13584: LD_ADDR_EXP 59
13588: PUSH
13589: LD_INT 0
13591: ST_TO_ADDR
// sWound := false ;
13592: LD_ADDR_EXP 67
13596: PUSH
13597: LD_INT 0
13599: ST_TO_ADDR
// sBetray := false ;
13600: LD_ADDR_EXP 71
13604: PUSH
13605: LD_INT 0
13607: ST_TO_ADDR
// sContamin := false ;
13608: LD_ADDR_EXP 72
13612: PUSH
13613: LD_INT 0
13615: ST_TO_ADDR
// sOil := false ;
13616: LD_ADDR_EXP 74
13620: PUSH
13621: LD_INT 0
13623: ST_TO_ADDR
// sStu := false ;
13624: LD_ADDR_EXP 78
13628: PUSH
13629: LD_INT 0
13631: ST_TO_ADDR
// sBazooka := false ;
13632: LD_ADDR_EXP 81
13636: PUSH
13637: LD_INT 0
13639: ST_TO_ADDR
// sMortar := false ;
13640: LD_ADDR_EXP 82
13644: PUSH
13645: LD_INT 0
13647: ST_TO_ADDR
// sRanger := false ;
13648: LD_ADDR_EXP 92
13652: PUSH
13653: LD_INT 0
13655: ST_TO_ADDR
// end ;
13656: LD_VAR 0 1
13660: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13661: LD_INT 0
13663: PPUSH
13664: PPUSH
13665: PPUSH
13666: PPUSH
13667: PPUSH
// result := [ ] ;
13668: LD_ADDR_VAR 0 1
13672: PUSH
13673: EMPTY
13674: ST_TO_ADDR
// if campaign_id = 1 then
13675: LD_OWVAR 69
13679: PUSH
13680: LD_INT 1
13682: EQUAL
13683: IFFALSE 16621
// begin case mission_number of 1 :
13685: LD_OWVAR 70
13689: PUSH
13690: LD_INT 1
13692: DOUBLE
13693: EQUAL
13694: IFTRUE 13698
13696: GO 13762
13698: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_INT 2
13706: PUSH
13707: LD_INT 4
13709: PUSH
13710: LD_INT 11
13712: PUSH
13713: LD_INT 12
13715: PUSH
13716: LD_INT 15
13718: PUSH
13719: LD_INT 16
13721: PUSH
13722: LD_INT 22
13724: PUSH
13725: LD_INT 23
13727: PUSH
13728: LD_INT 26
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 101
13744: PUSH
13745: LD_INT 102
13747: PUSH
13748: LD_INT 106
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: ST_TO_ADDR
13760: GO 16619
13762: LD_INT 2
13764: DOUBLE
13765: EQUAL
13766: IFTRUE 13770
13768: GO 13842
13770: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13771: LD_ADDR_VAR 0 1
13775: PUSH
13776: LD_INT 2
13778: PUSH
13779: LD_INT 4
13781: PUSH
13782: LD_INT 11
13784: PUSH
13785: LD_INT 12
13787: PUSH
13788: LD_INT 15
13790: PUSH
13791: LD_INT 16
13793: PUSH
13794: LD_INT 22
13796: PUSH
13797: LD_INT 23
13799: PUSH
13800: LD_INT 26
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 101
13816: PUSH
13817: LD_INT 102
13819: PUSH
13820: LD_INT 105
13822: PUSH
13823: LD_INT 106
13825: PUSH
13826: LD_INT 108
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: ST_TO_ADDR
13840: GO 16619
13842: LD_INT 3
13844: DOUBLE
13845: EQUAL
13846: IFTRUE 13850
13848: GO 13926
13850: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13851: LD_ADDR_VAR 0 1
13855: PUSH
13856: LD_INT 2
13858: PUSH
13859: LD_INT 4
13861: PUSH
13862: LD_INT 5
13864: PUSH
13865: LD_INT 11
13867: PUSH
13868: LD_INT 12
13870: PUSH
13871: LD_INT 15
13873: PUSH
13874: LD_INT 16
13876: PUSH
13877: LD_INT 22
13879: PUSH
13880: LD_INT 26
13882: PUSH
13883: LD_INT 36
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 101
13900: PUSH
13901: LD_INT 102
13903: PUSH
13904: LD_INT 105
13906: PUSH
13907: LD_INT 106
13909: PUSH
13910: LD_INT 108
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: ST_TO_ADDR
13924: GO 16619
13926: LD_INT 4
13928: DOUBLE
13929: EQUAL
13930: IFTRUE 13934
13932: GO 14018
13934: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13935: LD_ADDR_VAR 0 1
13939: PUSH
13940: LD_INT 2
13942: PUSH
13943: LD_INT 4
13945: PUSH
13946: LD_INT 5
13948: PUSH
13949: LD_INT 8
13951: PUSH
13952: LD_INT 11
13954: PUSH
13955: LD_INT 12
13957: PUSH
13958: LD_INT 15
13960: PUSH
13961: LD_INT 16
13963: PUSH
13964: LD_INT 22
13966: PUSH
13967: LD_INT 23
13969: PUSH
13970: LD_INT 26
13972: PUSH
13973: LD_INT 36
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: PUSH
13990: LD_INT 101
13992: PUSH
13993: LD_INT 102
13995: PUSH
13996: LD_INT 105
13998: PUSH
13999: LD_INT 106
14001: PUSH
14002: LD_INT 108
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: ST_TO_ADDR
14016: GO 16619
14018: LD_INT 5
14020: DOUBLE
14021: EQUAL
14022: IFTRUE 14026
14024: GO 14126
14026: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14027: LD_ADDR_VAR 0 1
14031: PUSH
14032: LD_INT 2
14034: PUSH
14035: LD_INT 4
14037: PUSH
14038: LD_INT 5
14040: PUSH
14041: LD_INT 6
14043: PUSH
14044: LD_INT 8
14046: PUSH
14047: LD_INT 11
14049: PUSH
14050: LD_INT 12
14052: PUSH
14053: LD_INT 15
14055: PUSH
14056: LD_INT 16
14058: PUSH
14059: LD_INT 22
14061: PUSH
14062: LD_INT 23
14064: PUSH
14065: LD_INT 25
14067: PUSH
14068: LD_INT 26
14070: PUSH
14071: LD_INT 36
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 101
14092: PUSH
14093: LD_INT 102
14095: PUSH
14096: LD_INT 105
14098: PUSH
14099: LD_INT 106
14101: PUSH
14102: LD_INT 108
14104: PUSH
14105: LD_INT 109
14107: PUSH
14108: LD_INT 112
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: ST_TO_ADDR
14124: GO 16619
14126: LD_INT 6
14128: DOUBLE
14129: EQUAL
14130: IFTRUE 14134
14132: GO 14254
14134: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14135: LD_ADDR_VAR 0 1
14139: PUSH
14140: LD_INT 2
14142: PUSH
14143: LD_INT 4
14145: PUSH
14146: LD_INT 5
14148: PUSH
14149: LD_INT 6
14151: PUSH
14152: LD_INT 8
14154: PUSH
14155: LD_INT 11
14157: PUSH
14158: LD_INT 12
14160: PUSH
14161: LD_INT 15
14163: PUSH
14164: LD_INT 16
14166: PUSH
14167: LD_INT 20
14169: PUSH
14170: LD_INT 21
14172: PUSH
14173: LD_INT 22
14175: PUSH
14176: LD_INT 23
14178: PUSH
14179: LD_INT 25
14181: PUSH
14182: LD_INT 26
14184: PUSH
14185: LD_INT 30
14187: PUSH
14188: LD_INT 31
14190: PUSH
14191: LD_INT 32
14193: PUSH
14194: LD_INT 36
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 101
14220: PUSH
14221: LD_INT 102
14223: PUSH
14224: LD_INT 105
14226: PUSH
14227: LD_INT 106
14229: PUSH
14230: LD_INT 108
14232: PUSH
14233: LD_INT 109
14235: PUSH
14236: LD_INT 112
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: ST_TO_ADDR
14252: GO 16619
14254: LD_INT 7
14256: DOUBLE
14257: EQUAL
14258: IFTRUE 14262
14260: GO 14362
14262: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14263: LD_ADDR_VAR 0 1
14267: PUSH
14268: LD_INT 2
14270: PUSH
14271: LD_INT 4
14273: PUSH
14274: LD_INT 5
14276: PUSH
14277: LD_INT 7
14279: PUSH
14280: LD_INT 11
14282: PUSH
14283: LD_INT 12
14285: PUSH
14286: LD_INT 15
14288: PUSH
14289: LD_INT 16
14291: PUSH
14292: LD_INT 20
14294: PUSH
14295: LD_INT 21
14297: PUSH
14298: LD_INT 22
14300: PUSH
14301: LD_INT 23
14303: PUSH
14304: LD_INT 25
14306: PUSH
14307: LD_INT 26
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 101
14328: PUSH
14329: LD_INT 102
14331: PUSH
14332: LD_INT 103
14334: PUSH
14335: LD_INT 105
14337: PUSH
14338: LD_INT 106
14340: PUSH
14341: LD_INT 108
14343: PUSH
14344: LD_INT 112
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: ST_TO_ADDR
14360: GO 16619
14362: LD_INT 8
14364: DOUBLE
14365: EQUAL
14366: IFTRUE 14370
14368: GO 14498
14370: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14371: LD_ADDR_VAR 0 1
14375: PUSH
14376: LD_INT 2
14378: PUSH
14379: LD_INT 4
14381: PUSH
14382: LD_INT 5
14384: PUSH
14385: LD_INT 6
14387: PUSH
14388: LD_INT 7
14390: PUSH
14391: LD_INT 8
14393: PUSH
14394: LD_INT 11
14396: PUSH
14397: LD_INT 12
14399: PUSH
14400: LD_INT 15
14402: PUSH
14403: LD_INT 16
14405: PUSH
14406: LD_INT 20
14408: PUSH
14409: LD_INT 21
14411: PUSH
14412: LD_INT 22
14414: PUSH
14415: LD_INT 23
14417: PUSH
14418: LD_INT 25
14420: PUSH
14421: LD_INT 26
14423: PUSH
14424: LD_INT 30
14426: PUSH
14427: LD_INT 31
14429: PUSH
14430: LD_INT 32
14432: PUSH
14433: LD_INT 36
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 101
14460: PUSH
14461: LD_INT 102
14463: PUSH
14464: LD_INT 103
14466: PUSH
14467: LD_INT 105
14469: PUSH
14470: LD_INT 106
14472: PUSH
14473: LD_INT 108
14475: PUSH
14476: LD_INT 109
14478: PUSH
14479: LD_INT 112
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: ST_TO_ADDR
14496: GO 16619
14498: LD_INT 9
14500: DOUBLE
14501: EQUAL
14502: IFTRUE 14506
14504: GO 14642
14506: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14507: LD_ADDR_VAR 0 1
14511: PUSH
14512: LD_INT 2
14514: PUSH
14515: LD_INT 4
14517: PUSH
14518: LD_INT 5
14520: PUSH
14521: LD_INT 6
14523: PUSH
14524: LD_INT 7
14526: PUSH
14527: LD_INT 8
14529: PUSH
14530: LD_INT 11
14532: PUSH
14533: LD_INT 12
14535: PUSH
14536: LD_INT 15
14538: PUSH
14539: LD_INT 16
14541: PUSH
14542: LD_INT 20
14544: PUSH
14545: LD_INT 21
14547: PUSH
14548: LD_INT 22
14550: PUSH
14551: LD_INT 23
14553: PUSH
14554: LD_INT 25
14556: PUSH
14557: LD_INT 26
14559: PUSH
14560: LD_INT 28
14562: PUSH
14563: LD_INT 30
14565: PUSH
14566: LD_INT 31
14568: PUSH
14569: LD_INT 32
14571: PUSH
14572: LD_INT 36
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: PUSH
14598: LD_INT 101
14600: PUSH
14601: LD_INT 102
14603: PUSH
14604: LD_INT 103
14606: PUSH
14607: LD_INT 105
14609: PUSH
14610: LD_INT 106
14612: PUSH
14613: LD_INT 108
14615: PUSH
14616: LD_INT 109
14618: PUSH
14619: LD_INT 112
14621: PUSH
14622: LD_INT 114
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: ST_TO_ADDR
14640: GO 16619
14642: LD_INT 10
14644: DOUBLE
14645: EQUAL
14646: IFTRUE 14650
14648: GO 14834
14650: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14651: LD_ADDR_VAR 0 1
14655: PUSH
14656: LD_INT 2
14658: PUSH
14659: LD_INT 4
14661: PUSH
14662: LD_INT 5
14664: PUSH
14665: LD_INT 6
14667: PUSH
14668: LD_INT 7
14670: PUSH
14671: LD_INT 8
14673: PUSH
14674: LD_INT 9
14676: PUSH
14677: LD_INT 10
14679: PUSH
14680: LD_INT 11
14682: PUSH
14683: LD_INT 12
14685: PUSH
14686: LD_INT 13
14688: PUSH
14689: LD_INT 14
14691: PUSH
14692: LD_INT 15
14694: PUSH
14695: LD_INT 16
14697: PUSH
14698: LD_INT 17
14700: PUSH
14701: LD_INT 18
14703: PUSH
14704: LD_INT 19
14706: PUSH
14707: LD_INT 20
14709: PUSH
14710: LD_INT 21
14712: PUSH
14713: LD_INT 22
14715: PUSH
14716: LD_INT 23
14718: PUSH
14719: LD_INT 24
14721: PUSH
14722: LD_INT 25
14724: PUSH
14725: LD_INT 26
14727: PUSH
14728: LD_INT 28
14730: PUSH
14731: LD_INT 30
14733: PUSH
14734: LD_INT 31
14736: PUSH
14737: LD_INT 32
14739: PUSH
14740: LD_INT 36
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 101
14776: PUSH
14777: LD_INT 102
14779: PUSH
14780: LD_INT 103
14782: PUSH
14783: LD_INT 104
14785: PUSH
14786: LD_INT 105
14788: PUSH
14789: LD_INT 106
14791: PUSH
14792: LD_INT 107
14794: PUSH
14795: LD_INT 108
14797: PUSH
14798: LD_INT 109
14800: PUSH
14801: LD_INT 110
14803: PUSH
14804: LD_INT 111
14806: PUSH
14807: LD_INT 112
14809: PUSH
14810: LD_INT 114
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: ST_TO_ADDR
14832: GO 16619
14834: LD_INT 11
14836: DOUBLE
14837: EQUAL
14838: IFTRUE 14842
14840: GO 15034
14842: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14843: LD_ADDR_VAR 0 1
14847: PUSH
14848: LD_INT 2
14850: PUSH
14851: LD_INT 3
14853: PUSH
14854: LD_INT 4
14856: PUSH
14857: LD_INT 5
14859: PUSH
14860: LD_INT 6
14862: PUSH
14863: LD_INT 7
14865: PUSH
14866: LD_INT 8
14868: PUSH
14869: LD_INT 9
14871: PUSH
14872: LD_INT 10
14874: PUSH
14875: LD_INT 11
14877: PUSH
14878: LD_INT 12
14880: PUSH
14881: LD_INT 13
14883: PUSH
14884: LD_INT 14
14886: PUSH
14887: LD_INT 15
14889: PUSH
14890: LD_INT 16
14892: PUSH
14893: LD_INT 17
14895: PUSH
14896: LD_INT 18
14898: PUSH
14899: LD_INT 19
14901: PUSH
14902: LD_INT 20
14904: PUSH
14905: LD_INT 21
14907: PUSH
14908: LD_INT 22
14910: PUSH
14911: LD_INT 23
14913: PUSH
14914: LD_INT 24
14916: PUSH
14917: LD_INT 25
14919: PUSH
14920: LD_INT 26
14922: PUSH
14923: LD_INT 28
14925: PUSH
14926: LD_INT 30
14928: PUSH
14929: LD_INT 31
14931: PUSH
14932: LD_INT 32
14934: PUSH
14935: LD_INT 34
14937: PUSH
14938: LD_INT 36
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 101
14976: PUSH
14977: LD_INT 102
14979: PUSH
14980: LD_INT 103
14982: PUSH
14983: LD_INT 104
14985: PUSH
14986: LD_INT 105
14988: PUSH
14989: LD_INT 106
14991: PUSH
14992: LD_INT 107
14994: PUSH
14995: LD_INT 108
14997: PUSH
14998: LD_INT 109
15000: PUSH
15001: LD_INT 110
15003: PUSH
15004: LD_INT 111
15006: PUSH
15007: LD_INT 112
15009: PUSH
15010: LD_INT 114
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: ST_TO_ADDR
15032: GO 16619
15034: LD_INT 12
15036: DOUBLE
15037: EQUAL
15038: IFTRUE 15042
15040: GO 15250
15042: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: LD_INT 1
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: LD_INT 3
15056: PUSH
15057: LD_INT 4
15059: PUSH
15060: LD_INT 5
15062: PUSH
15063: LD_INT 6
15065: PUSH
15066: LD_INT 7
15068: PUSH
15069: LD_INT 8
15071: PUSH
15072: LD_INT 9
15074: PUSH
15075: LD_INT 10
15077: PUSH
15078: LD_INT 11
15080: PUSH
15081: LD_INT 12
15083: PUSH
15084: LD_INT 13
15086: PUSH
15087: LD_INT 14
15089: PUSH
15090: LD_INT 15
15092: PUSH
15093: LD_INT 16
15095: PUSH
15096: LD_INT 17
15098: PUSH
15099: LD_INT 18
15101: PUSH
15102: LD_INT 19
15104: PUSH
15105: LD_INT 20
15107: PUSH
15108: LD_INT 21
15110: PUSH
15111: LD_INT 22
15113: PUSH
15114: LD_INT 23
15116: PUSH
15117: LD_INT 24
15119: PUSH
15120: LD_INT 25
15122: PUSH
15123: LD_INT 26
15125: PUSH
15126: LD_INT 27
15128: PUSH
15129: LD_INT 28
15131: PUSH
15132: LD_INT 30
15134: PUSH
15135: LD_INT 31
15137: PUSH
15138: LD_INT 32
15140: PUSH
15141: LD_INT 33
15143: PUSH
15144: LD_INT 34
15146: PUSH
15147: LD_INT 36
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 101
15188: PUSH
15189: LD_INT 102
15191: PUSH
15192: LD_INT 103
15194: PUSH
15195: LD_INT 104
15197: PUSH
15198: LD_INT 105
15200: PUSH
15201: LD_INT 106
15203: PUSH
15204: LD_INT 107
15206: PUSH
15207: LD_INT 108
15209: PUSH
15210: LD_INT 109
15212: PUSH
15213: LD_INT 110
15215: PUSH
15216: LD_INT 111
15218: PUSH
15219: LD_INT 112
15221: PUSH
15222: LD_INT 113
15224: PUSH
15225: LD_INT 114
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: ST_TO_ADDR
15248: GO 16619
15250: LD_INT 13
15252: DOUBLE
15253: EQUAL
15254: IFTRUE 15258
15256: GO 15454
15258: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: LD_INT 1
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 3
15272: PUSH
15273: LD_INT 4
15275: PUSH
15276: LD_INT 5
15278: PUSH
15279: LD_INT 8
15281: PUSH
15282: LD_INT 9
15284: PUSH
15285: LD_INT 10
15287: PUSH
15288: LD_INT 11
15290: PUSH
15291: LD_INT 12
15293: PUSH
15294: LD_INT 14
15296: PUSH
15297: LD_INT 15
15299: PUSH
15300: LD_INT 16
15302: PUSH
15303: LD_INT 17
15305: PUSH
15306: LD_INT 18
15308: PUSH
15309: LD_INT 19
15311: PUSH
15312: LD_INT 20
15314: PUSH
15315: LD_INT 21
15317: PUSH
15318: LD_INT 22
15320: PUSH
15321: LD_INT 23
15323: PUSH
15324: LD_INT 24
15326: PUSH
15327: LD_INT 25
15329: PUSH
15330: LD_INT 26
15332: PUSH
15333: LD_INT 27
15335: PUSH
15336: LD_INT 28
15338: PUSH
15339: LD_INT 30
15341: PUSH
15342: LD_INT 31
15344: PUSH
15345: LD_INT 32
15347: PUSH
15348: LD_INT 33
15350: PUSH
15351: LD_INT 34
15353: PUSH
15354: LD_INT 36
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 101
15392: PUSH
15393: LD_INT 102
15395: PUSH
15396: LD_INT 103
15398: PUSH
15399: LD_INT 104
15401: PUSH
15402: LD_INT 105
15404: PUSH
15405: LD_INT 106
15407: PUSH
15408: LD_INT 107
15410: PUSH
15411: LD_INT 108
15413: PUSH
15414: LD_INT 109
15416: PUSH
15417: LD_INT 110
15419: PUSH
15420: LD_INT 111
15422: PUSH
15423: LD_INT 112
15425: PUSH
15426: LD_INT 113
15428: PUSH
15429: LD_INT 114
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: ST_TO_ADDR
15452: GO 16619
15454: LD_INT 14
15456: DOUBLE
15457: EQUAL
15458: IFTRUE 15462
15460: GO 15674
15462: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15463: LD_ADDR_VAR 0 1
15467: PUSH
15468: LD_INT 1
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: LD_INT 4
15479: PUSH
15480: LD_INT 5
15482: PUSH
15483: LD_INT 6
15485: PUSH
15486: LD_INT 7
15488: PUSH
15489: LD_INT 8
15491: PUSH
15492: LD_INT 9
15494: PUSH
15495: LD_INT 10
15497: PUSH
15498: LD_INT 11
15500: PUSH
15501: LD_INT 12
15503: PUSH
15504: LD_INT 13
15506: PUSH
15507: LD_INT 14
15509: PUSH
15510: LD_INT 15
15512: PUSH
15513: LD_INT 16
15515: PUSH
15516: LD_INT 17
15518: PUSH
15519: LD_INT 18
15521: PUSH
15522: LD_INT 19
15524: PUSH
15525: LD_INT 20
15527: PUSH
15528: LD_INT 21
15530: PUSH
15531: LD_INT 22
15533: PUSH
15534: LD_INT 23
15536: PUSH
15537: LD_INT 24
15539: PUSH
15540: LD_INT 25
15542: PUSH
15543: LD_INT 26
15545: PUSH
15546: LD_INT 27
15548: PUSH
15549: LD_INT 28
15551: PUSH
15552: LD_INT 29
15554: PUSH
15555: LD_INT 30
15557: PUSH
15558: LD_INT 31
15560: PUSH
15561: LD_INT 32
15563: PUSH
15564: LD_INT 33
15566: PUSH
15567: LD_INT 34
15569: PUSH
15570: LD_INT 36
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 101
15612: PUSH
15613: LD_INT 102
15615: PUSH
15616: LD_INT 103
15618: PUSH
15619: LD_INT 104
15621: PUSH
15622: LD_INT 105
15624: PUSH
15625: LD_INT 106
15627: PUSH
15628: LD_INT 107
15630: PUSH
15631: LD_INT 108
15633: PUSH
15634: LD_INT 109
15636: PUSH
15637: LD_INT 110
15639: PUSH
15640: LD_INT 111
15642: PUSH
15643: LD_INT 112
15645: PUSH
15646: LD_INT 113
15648: PUSH
15649: LD_INT 114
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: ST_TO_ADDR
15672: GO 16619
15674: LD_INT 15
15676: DOUBLE
15677: EQUAL
15678: IFTRUE 15682
15680: GO 15894
15682: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15683: LD_ADDR_VAR 0 1
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: LD_INT 2
15693: PUSH
15694: LD_INT 3
15696: PUSH
15697: LD_INT 4
15699: PUSH
15700: LD_INT 5
15702: PUSH
15703: LD_INT 6
15705: PUSH
15706: LD_INT 7
15708: PUSH
15709: LD_INT 8
15711: PUSH
15712: LD_INT 9
15714: PUSH
15715: LD_INT 10
15717: PUSH
15718: LD_INT 11
15720: PUSH
15721: LD_INT 12
15723: PUSH
15724: LD_INT 13
15726: PUSH
15727: LD_INT 14
15729: PUSH
15730: LD_INT 15
15732: PUSH
15733: LD_INT 16
15735: PUSH
15736: LD_INT 17
15738: PUSH
15739: LD_INT 18
15741: PUSH
15742: LD_INT 19
15744: PUSH
15745: LD_INT 20
15747: PUSH
15748: LD_INT 21
15750: PUSH
15751: LD_INT 22
15753: PUSH
15754: LD_INT 23
15756: PUSH
15757: LD_INT 24
15759: PUSH
15760: LD_INT 25
15762: PUSH
15763: LD_INT 26
15765: PUSH
15766: LD_INT 27
15768: PUSH
15769: LD_INT 28
15771: PUSH
15772: LD_INT 29
15774: PUSH
15775: LD_INT 30
15777: PUSH
15778: LD_INT 31
15780: PUSH
15781: LD_INT 32
15783: PUSH
15784: LD_INT 33
15786: PUSH
15787: LD_INT 34
15789: PUSH
15790: LD_INT 36
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 101
15832: PUSH
15833: LD_INT 102
15835: PUSH
15836: LD_INT 103
15838: PUSH
15839: LD_INT 104
15841: PUSH
15842: LD_INT 105
15844: PUSH
15845: LD_INT 106
15847: PUSH
15848: LD_INT 107
15850: PUSH
15851: LD_INT 108
15853: PUSH
15854: LD_INT 109
15856: PUSH
15857: LD_INT 110
15859: PUSH
15860: LD_INT 111
15862: PUSH
15863: LD_INT 112
15865: PUSH
15866: LD_INT 113
15868: PUSH
15869: LD_INT 114
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: ST_TO_ADDR
15892: GO 16619
15894: LD_INT 16
15896: DOUBLE
15897: EQUAL
15898: IFTRUE 15902
15900: GO 16026
15902: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_INT 2
15910: PUSH
15911: LD_INT 4
15913: PUSH
15914: LD_INT 5
15916: PUSH
15917: LD_INT 7
15919: PUSH
15920: LD_INT 11
15922: PUSH
15923: LD_INT 12
15925: PUSH
15926: LD_INT 15
15928: PUSH
15929: LD_INT 16
15931: PUSH
15932: LD_INT 20
15934: PUSH
15935: LD_INT 21
15937: PUSH
15938: LD_INT 22
15940: PUSH
15941: LD_INT 23
15943: PUSH
15944: LD_INT 25
15946: PUSH
15947: LD_INT 26
15949: PUSH
15950: LD_INT 30
15952: PUSH
15953: LD_INT 31
15955: PUSH
15956: LD_INT 32
15958: PUSH
15959: LD_INT 33
15961: PUSH
15962: LD_INT 34
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 101
15988: PUSH
15989: LD_INT 102
15991: PUSH
15992: LD_INT 103
15994: PUSH
15995: LD_INT 106
15997: PUSH
15998: LD_INT 108
16000: PUSH
16001: LD_INT 112
16003: PUSH
16004: LD_INT 113
16006: PUSH
16007: LD_INT 114
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: ST_TO_ADDR
16024: GO 16619
16026: LD_INT 17
16028: DOUBLE
16029: EQUAL
16030: IFTRUE 16034
16032: GO 16246
16034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16035: LD_ADDR_VAR 0 1
16039: PUSH
16040: LD_INT 1
16042: PUSH
16043: LD_INT 2
16045: PUSH
16046: LD_INT 3
16048: PUSH
16049: LD_INT 4
16051: PUSH
16052: LD_INT 5
16054: PUSH
16055: LD_INT 6
16057: PUSH
16058: LD_INT 7
16060: PUSH
16061: LD_INT 8
16063: PUSH
16064: LD_INT 9
16066: PUSH
16067: LD_INT 10
16069: PUSH
16070: LD_INT 11
16072: PUSH
16073: LD_INT 12
16075: PUSH
16076: LD_INT 13
16078: PUSH
16079: LD_INT 14
16081: PUSH
16082: LD_INT 15
16084: PUSH
16085: LD_INT 16
16087: PUSH
16088: LD_INT 17
16090: PUSH
16091: LD_INT 18
16093: PUSH
16094: LD_INT 19
16096: PUSH
16097: LD_INT 20
16099: PUSH
16100: LD_INT 21
16102: PUSH
16103: LD_INT 22
16105: PUSH
16106: LD_INT 23
16108: PUSH
16109: LD_INT 24
16111: PUSH
16112: LD_INT 25
16114: PUSH
16115: LD_INT 26
16117: PUSH
16118: LD_INT 27
16120: PUSH
16121: LD_INT 28
16123: PUSH
16124: LD_INT 29
16126: PUSH
16127: LD_INT 30
16129: PUSH
16130: LD_INT 31
16132: PUSH
16133: LD_INT 32
16135: PUSH
16136: LD_INT 33
16138: PUSH
16139: LD_INT 34
16141: PUSH
16142: LD_INT 36
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 101
16184: PUSH
16185: LD_INT 102
16187: PUSH
16188: LD_INT 103
16190: PUSH
16191: LD_INT 104
16193: PUSH
16194: LD_INT 105
16196: PUSH
16197: LD_INT 106
16199: PUSH
16200: LD_INT 107
16202: PUSH
16203: LD_INT 108
16205: PUSH
16206: LD_INT 109
16208: PUSH
16209: LD_INT 110
16211: PUSH
16212: LD_INT 111
16214: PUSH
16215: LD_INT 112
16217: PUSH
16218: LD_INT 113
16220: PUSH
16221: LD_INT 114
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: ST_TO_ADDR
16244: GO 16619
16246: LD_INT 18
16248: DOUBLE
16249: EQUAL
16250: IFTRUE 16254
16252: GO 16390
16254: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16255: LD_ADDR_VAR 0 1
16259: PUSH
16260: LD_INT 2
16262: PUSH
16263: LD_INT 4
16265: PUSH
16266: LD_INT 5
16268: PUSH
16269: LD_INT 7
16271: PUSH
16272: LD_INT 11
16274: PUSH
16275: LD_INT 12
16277: PUSH
16278: LD_INT 15
16280: PUSH
16281: LD_INT 16
16283: PUSH
16284: LD_INT 20
16286: PUSH
16287: LD_INT 21
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_INT 23
16295: PUSH
16296: LD_INT 25
16298: PUSH
16299: LD_INT 26
16301: PUSH
16302: LD_INT 30
16304: PUSH
16305: LD_INT 31
16307: PUSH
16308: LD_INT 32
16310: PUSH
16311: LD_INT 33
16313: PUSH
16314: LD_INT 34
16316: PUSH
16317: LD_INT 35
16319: PUSH
16320: LD_INT 36
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 101
16348: PUSH
16349: LD_INT 102
16351: PUSH
16352: LD_INT 103
16354: PUSH
16355: LD_INT 106
16357: PUSH
16358: LD_INT 108
16360: PUSH
16361: LD_INT 112
16363: PUSH
16364: LD_INT 113
16366: PUSH
16367: LD_INT 114
16369: PUSH
16370: LD_INT 115
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: ST_TO_ADDR
16388: GO 16619
16390: LD_INT 19
16392: DOUBLE
16393: EQUAL
16394: IFTRUE 16398
16396: GO 16618
16398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16399: LD_ADDR_VAR 0 1
16403: PUSH
16404: LD_INT 1
16406: PUSH
16407: LD_INT 2
16409: PUSH
16410: LD_INT 3
16412: PUSH
16413: LD_INT 4
16415: PUSH
16416: LD_INT 5
16418: PUSH
16419: LD_INT 6
16421: PUSH
16422: LD_INT 7
16424: PUSH
16425: LD_INT 8
16427: PUSH
16428: LD_INT 9
16430: PUSH
16431: LD_INT 10
16433: PUSH
16434: LD_INT 11
16436: PUSH
16437: LD_INT 12
16439: PUSH
16440: LD_INT 13
16442: PUSH
16443: LD_INT 14
16445: PUSH
16446: LD_INT 15
16448: PUSH
16449: LD_INT 16
16451: PUSH
16452: LD_INT 17
16454: PUSH
16455: LD_INT 18
16457: PUSH
16458: LD_INT 19
16460: PUSH
16461: LD_INT 20
16463: PUSH
16464: LD_INT 21
16466: PUSH
16467: LD_INT 22
16469: PUSH
16470: LD_INT 23
16472: PUSH
16473: LD_INT 24
16475: PUSH
16476: LD_INT 25
16478: PUSH
16479: LD_INT 26
16481: PUSH
16482: LD_INT 27
16484: PUSH
16485: LD_INT 28
16487: PUSH
16488: LD_INT 29
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 31
16496: PUSH
16497: LD_INT 32
16499: PUSH
16500: LD_INT 33
16502: PUSH
16503: LD_INT 34
16505: PUSH
16506: LD_INT 35
16508: PUSH
16509: LD_INT 36
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 101
16552: PUSH
16553: LD_INT 102
16555: PUSH
16556: LD_INT 103
16558: PUSH
16559: LD_INT 104
16561: PUSH
16562: LD_INT 105
16564: PUSH
16565: LD_INT 106
16567: PUSH
16568: LD_INT 107
16570: PUSH
16571: LD_INT 108
16573: PUSH
16574: LD_INT 109
16576: PUSH
16577: LD_INT 110
16579: PUSH
16580: LD_INT 111
16582: PUSH
16583: LD_INT 112
16585: PUSH
16586: LD_INT 113
16588: PUSH
16589: LD_INT 114
16591: PUSH
16592: LD_INT 115
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: ST_TO_ADDR
16616: GO 16619
16618: POP
// end else
16619: GO 16838
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16621: LD_ADDR_VAR 0 1
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: LD_INT 4
16637: PUSH
16638: LD_INT 5
16640: PUSH
16641: LD_INT 6
16643: PUSH
16644: LD_INT 7
16646: PUSH
16647: LD_INT 8
16649: PUSH
16650: LD_INT 9
16652: PUSH
16653: LD_INT 10
16655: PUSH
16656: LD_INT 11
16658: PUSH
16659: LD_INT 12
16661: PUSH
16662: LD_INT 13
16664: PUSH
16665: LD_INT 14
16667: PUSH
16668: LD_INT 15
16670: PUSH
16671: LD_INT 16
16673: PUSH
16674: LD_INT 17
16676: PUSH
16677: LD_INT 18
16679: PUSH
16680: LD_INT 19
16682: PUSH
16683: LD_INT 20
16685: PUSH
16686: LD_INT 21
16688: PUSH
16689: LD_INT 22
16691: PUSH
16692: LD_INT 23
16694: PUSH
16695: LD_INT 24
16697: PUSH
16698: LD_INT 25
16700: PUSH
16701: LD_INT 26
16703: PUSH
16704: LD_INT 27
16706: PUSH
16707: LD_INT 28
16709: PUSH
16710: LD_INT 29
16712: PUSH
16713: LD_INT 30
16715: PUSH
16716: LD_INT 31
16718: PUSH
16719: LD_INT 32
16721: PUSH
16722: LD_INT 33
16724: PUSH
16725: LD_INT 34
16727: PUSH
16728: LD_INT 35
16730: PUSH
16731: LD_INT 36
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 101
16774: PUSH
16775: LD_INT 102
16777: PUSH
16778: LD_INT 103
16780: PUSH
16781: LD_INT 104
16783: PUSH
16784: LD_INT 105
16786: PUSH
16787: LD_INT 106
16789: PUSH
16790: LD_INT 107
16792: PUSH
16793: LD_INT 108
16795: PUSH
16796: LD_INT 109
16798: PUSH
16799: LD_INT 110
16801: PUSH
16802: LD_INT 111
16804: PUSH
16805: LD_INT 112
16807: PUSH
16808: LD_INT 113
16810: PUSH
16811: LD_INT 114
16813: PUSH
16814: LD_INT 115
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: ST_TO_ADDR
// if result then
16838: LD_VAR 0 1
16842: IFFALSE 17131
// begin normal :=  ;
16844: LD_ADDR_VAR 0 3
16848: PUSH
16849: LD_STRING 
16851: ST_TO_ADDR
// hardcore :=  ;
16852: LD_ADDR_VAR 0 4
16856: PUSH
16857: LD_STRING 
16859: ST_TO_ADDR
// for i = 1 to normalCounter do
16860: LD_ADDR_VAR 0 5
16864: PUSH
16865: DOUBLE
16866: LD_INT 1
16868: DEC
16869: ST_TO_ADDR
16870: LD_EXP 40
16874: PUSH
16875: FOR_TO
16876: IFFALSE 16977
// begin tmp := 0 ;
16878: LD_ADDR_VAR 0 2
16882: PUSH
16883: LD_STRING 0
16885: ST_TO_ADDR
// if result [ 1 ] then
16886: LD_VAR 0 1
16890: PUSH
16891: LD_INT 1
16893: ARRAY
16894: IFFALSE 16959
// if result [ 1 ] [ 1 ] = i then
16896: LD_VAR 0 1
16900: PUSH
16901: LD_INT 1
16903: ARRAY
16904: PUSH
16905: LD_INT 1
16907: ARRAY
16908: PUSH
16909: LD_VAR 0 5
16913: EQUAL
16914: IFFALSE 16959
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16916: LD_ADDR_VAR 0 1
16920: PUSH
16921: LD_VAR 0 1
16925: PPUSH
16926: LD_INT 1
16928: PPUSH
16929: LD_VAR 0 1
16933: PUSH
16934: LD_INT 1
16936: ARRAY
16937: PPUSH
16938: LD_INT 1
16940: PPUSH
16941: CALL_OW 3
16945: PPUSH
16946: CALL_OW 1
16950: ST_TO_ADDR
// tmp := 1 ;
16951: LD_ADDR_VAR 0 2
16955: PUSH
16956: LD_STRING 1
16958: ST_TO_ADDR
// end ; normal := normal & tmp ;
16959: LD_ADDR_VAR 0 3
16963: PUSH
16964: LD_VAR 0 3
16968: PUSH
16969: LD_VAR 0 2
16973: STR
16974: ST_TO_ADDR
// end ;
16975: GO 16875
16977: POP
16978: POP
// for i = 1 to hardcoreCounter do
16979: LD_ADDR_VAR 0 5
16983: PUSH
16984: DOUBLE
16985: LD_INT 1
16987: DEC
16988: ST_TO_ADDR
16989: LD_EXP 41
16993: PUSH
16994: FOR_TO
16995: IFFALSE 17100
// begin tmp := 0 ;
16997: LD_ADDR_VAR 0 2
17001: PUSH
17002: LD_STRING 0
17004: ST_TO_ADDR
// if result [ 2 ] then
17005: LD_VAR 0 1
17009: PUSH
17010: LD_INT 2
17012: ARRAY
17013: IFFALSE 17082
// if result [ 2 ] [ 1 ] = 100 + i then
17015: LD_VAR 0 1
17019: PUSH
17020: LD_INT 2
17022: ARRAY
17023: PUSH
17024: LD_INT 1
17026: ARRAY
17027: PUSH
17028: LD_INT 100
17030: PUSH
17031: LD_VAR 0 5
17035: PLUS
17036: EQUAL
17037: IFFALSE 17082
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17039: LD_ADDR_VAR 0 1
17043: PUSH
17044: LD_VAR 0 1
17048: PPUSH
17049: LD_INT 2
17051: PPUSH
17052: LD_VAR 0 1
17056: PUSH
17057: LD_INT 2
17059: ARRAY
17060: PPUSH
17061: LD_INT 1
17063: PPUSH
17064: CALL_OW 3
17068: PPUSH
17069: CALL_OW 1
17073: ST_TO_ADDR
// tmp := 1 ;
17074: LD_ADDR_VAR 0 2
17078: PUSH
17079: LD_STRING 1
17081: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17082: LD_ADDR_VAR 0 4
17086: PUSH
17087: LD_VAR 0 4
17091: PUSH
17092: LD_VAR 0 2
17096: STR
17097: ST_TO_ADDR
// end ;
17098: GO 16994
17100: POP
17101: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17102: LD_STRING getStreamItemsFromMission("
17104: PUSH
17105: LD_VAR 0 3
17109: STR
17110: PUSH
17111: LD_STRING ","
17113: STR
17114: PUSH
17115: LD_VAR 0 4
17119: STR
17120: PUSH
17121: LD_STRING ")
17123: STR
17124: PPUSH
17125: CALL_OW 559
// end else
17129: GO 17138
// ToLua ( getStreamItemsFromMission("","") ) ;
17131: LD_STRING getStreamItemsFromMission("","")
17133: PPUSH
17134: CALL_OW 559
// end ;
17138: LD_VAR 0 1
17142: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17143: LD_EXP 39
17147: PUSH
17148: LD_EXP 44
17152: AND
17153: IFFALSE 17277
17155: GO 17157
17157: DISABLE
17158: LD_INT 0
17160: PPUSH
17161: PPUSH
// begin enable ;
17162: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17163: LD_ADDR_VAR 0 2
17167: PUSH
17168: LD_INT 22
17170: PUSH
17171: LD_OWVAR 2
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 2
17182: PUSH
17183: LD_INT 34
17185: PUSH
17186: LD_INT 7
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 34
17195: PUSH
17196: LD_INT 45
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 34
17205: PUSH
17206: LD_INT 28
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 34
17215: PUSH
17216: LD_INT 47
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PPUSH
17234: CALL_OW 69
17238: ST_TO_ADDR
// if not tmp then
17239: LD_VAR 0 2
17243: NOT
17244: IFFALSE 17248
// exit ;
17246: GO 17277
// for i in tmp do
17248: LD_ADDR_VAR 0 1
17252: PUSH
17253: LD_VAR 0 2
17257: PUSH
17258: FOR_IN
17259: IFFALSE 17275
// begin SetLives ( i , 0 ) ;
17261: LD_VAR 0 1
17265: PPUSH
17266: LD_INT 0
17268: PPUSH
17269: CALL_OW 234
// end ;
17273: GO 17258
17275: POP
17276: POP
// end ;
17277: PPOPN 2
17279: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17280: LD_EXP 39
17284: PUSH
17285: LD_EXP 45
17289: AND
17290: IFFALSE 17374
17292: GO 17294
17294: DISABLE
17295: LD_INT 0
17297: PPUSH
17298: PPUSH
// begin enable ;
17299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17300: LD_ADDR_VAR 0 2
17304: PUSH
17305: LD_INT 22
17307: PUSH
17308: LD_OWVAR 2
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 32
17319: PUSH
17320: LD_INT 3
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PPUSH
17331: CALL_OW 69
17335: ST_TO_ADDR
// if not tmp then
17336: LD_VAR 0 2
17340: NOT
17341: IFFALSE 17345
// exit ;
17343: GO 17374
// for i in tmp do
17345: LD_ADDR_VAR 0 1
17349: PUSH
17350: LD_VAR 0 2
17354: PUSH
17355: FOR_IN
17356: IFFALSE 17372
// begin SetLives ( i , 0 ) ;
17358: LD_VAR 0 1
17362: PPUSH
17363: LD_INT 0
17365: PPUSH
17366: CALL_OW 234
// end ;
17370: GO 17355
17372: POP
17373: POP
// end ;
17374: PPOPN 2
17376: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17377: LD_EXP 39
17381: PUSH
17382: LD_EXP 42
17386: AND
17387: IFFALSE 17480
17389: GO 17391
17391: DISABLE
17392: LD_INT 0
17394: PPUSH
// begin enable ;
17395: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17396: LD_ADDR_VAR 0 1
17400: PUSH
17401: LD_INT 22
17403: PUSH
17404: LD_OWVAR 2
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 2
17415: PUSH
17416: LD_INT 25
17418: PUSH
17419: LD_INT 5
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 25
17428: PUSH
17429: LD_INT 9
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 25
17438: PUSH
17439: LD_INT 8
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PPUSH
17456: CALL_OW 69
17460: PUSH
17461: FOR_IN
17462: IFFALSE 17478
// begin SetClass ( i , 1 ) ;
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_INT 1
17471: PPUSH
17472: CALL_OW 336
// end ;
17476: GO 17461
17478: POP
17479: POP
// end ;
17480: PPOPN 1
17482: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17483: LD_EXP 39
17487: PUSH
17488: LD_EXP 43
17492: AND
17493: PUSH
17494: LD_OWVAR 65
17498: PUSH
17499: LD_INT 7
17501: LESS
17502: AND
17503: IFFALSE 17517
17505: GO 17507
17507: DISABLE
// begin enable ;
17508: ENABLE
// game_speed := 7 ;
17509: LD_ADDR_OWVAR 65
17513: PUSH
17514: LD_INT 7
17516: ST_TO_ADDR
// end ;
17517: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17518: LD_EXP 39
17522: PUSH
17523: LD_EXP 46
17527: AND
17528: IFFALSE 17730
17530: GO 17532
17532: DISABLE
17533: LD_INT 0
17535: PPUSH
17536: PPUSH
17537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17538: LD_ADDR_VAR 0 3
17542: PUSH
17543: LD_INT 81
17545: PUSH
17546: LD_OWVAR 2
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 21
17557: PUSH
17558: LD_INT 1
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PPUSH
17569: CALL_OW 69
17573: ST_TO_ADDR
// if not tmp then
17574: LD_VAR 0 3
17578: NOT
17579: IFFALSE 17583
// exit ;
17581: GO 17730
// if tmp > 5 then
17583: LD_VAR 0 3
17587: PUSH
17588: LD_INT 5
17590: GREATER
17591: IFFALSE 17603
// k := 5 else
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_INT 5
17600: ST_TO_ADDR
17601: GO 17613
// k := tmp ;
17603: LD_ADDR_VAR 0 2
17607: PUSH
17608: LD_VAR 0 3
17612: ST_TO_ADDR
// for i := 1 to k do
17613: LD_ADDR_VAR 0 1
17617: PUSH
17618: DOUBLE
17619: LD_INT 1
17621: DEC
17622: ST_TO_ADDR
17623: LD_VAR 0 2
17627: PUSH
17628: FOR_TO
17629: IFFALSE 17728
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17631: LD_VAR 0 3
17635: PUSH
17636: LD_VAR 0 1
17640: ARRAY
17641: PPUSH
17642: LD_VAR 0 1
17646: PUSH
17647: LD_INT 4
17649: MOD
17650: PUSH
17651: LD_INT 1
17653: PLUS
17654: PPUSH
17655: CALL_OW 259
17659: PUSH
17660: LD_INT 10
17662: LESS
17663: IFFALSE 17726
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17665: LD_VAR 0 3
17669: PUSH
17670: LD_VAR 0 1
17674: ARRAY
17675: PPUSH
17676: LD_VAR 0 1
17680: PUSH
17681: LD_INT 4
17683: MOD
17684: PUSH
17685: LD_INT 1
17687: PLUS
17688: PPUSH
17689: LD_VAR 0 3
17693: PUSH
17694: LD_VAR 0 1
17698: ARRAY
17699: PPUSH
17700: LD_VAR 0 1
17704: PUSH
17705: LD_INT 4
17707: MOD
17708: PUSH
17709: LD_INT 1
17711: PLUS
17712: PPUSH
17713: CALL_OW 259
17717: PUSH
17718: LD_INT 1
17720: PLUS
17721: PPUSH
17722: CALL_OW 237
17726: GO 17628
17728: POP
17729: POP
// end ;
17730: PPOPN 3
17732: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17733: LD_EXP 39
17737: PUSH
17738: LD_EXP 47
17742: AND
17743: IFFALSE 17763
17745: GO 17747
17747: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17748: LD_INT 4
17750: PPUSH
17751: LD_OWVAR 2
17755: PPUSH
17756: LD_INT 0
17758: PPUSH
17759: CALL_OW 324
17763: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17764: LD_EXP 39
17768: PUSH
17769: LD_EXP 76
17773: AND
17774: IFFALSE 17794
17776: GO 17778
17778: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17779: LD_INT 19
17781: PPUSH
17782: LD_OWVAR 2
17786: PPUSH
17787: LD_INT 0
17789: PPUSH
17790: CALL_OW 324
17794: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17795: LD_EXP 39
17799: PUSH
17800: LD_EXP 48
17804: AND
17805: IFFALSE 17907
17807: GO 17809
17809: DISABLE
17810: LD_INT 0
17812: PPUSH
17813: PPUSH
// begin enable ;
17814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17815: LD_ADDR_VAR 0 2
17819: PUSH
17820: LD_INT 22
17822: PUSH
17823: LD_OWVAR 2
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 2
17834: PUSH
17835: LD_INT 34
17837: PUSH
17838: LD_INT 11
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 34
17847: PUSH
17848: LD_INT 30
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PPUSH
17864: CALL_OW 69
17868: ST_TO_ADDR
// if not tmp then
17869: LD_VAR 0 2
17873: NOT
17874: IFFALSE 17878
// exit ;
17876: GO 17907
// for i in tmp do
17878: LD_ADDR_VAR 0 1
17882: PUSH
17883: LD_VAR 0 2
17887: PUSH
17888: FOR_IN
17889: IFFALSE 17905
// begin SetLives ( i , 0 ) ;
17891: LD_VAR 0 1
17895: PPUSH
17896: LD_INT 0
17898: PPUSH
17899: CALL_OW 234
// end ;
17903: GO 17888
17905: POP
17906: POP
// end ;
17907: PPOPN 2
17909: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17910: LD_EXP 39
17914: PUSH
17915: LD_EXP 49
17919: AND
17920: IFFALSE 17940
17922: GO 17924
17924: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17925: LD_INT 32
17927: PPUSH
17928: LD_OWVAR 2
17932: PPUSH
17933: LD_INT 0
17935: PPUSH
17936: CALL_OW 324
17940: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17941: LD_EXP 39
17945: PUSH
17946: LD_EXP 50
17950: AND
17951: IFFALSE 18132
17953: GO 17955
17955: DISABLE
17956: LD_INT 0
17958: PPUSH
17959: PPUSH
17960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17961: LD_ADDR_VAR 0 2
17965: PUSH
17966: LD_INT 22
17968: PUSH
17969: LD_OWVAR 2
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 33
17980: PUSH
17981: LD_INT 3
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PPUSH
17992: CALL_OW 69
17996: ST_TO_ADDR
// if not tmp then
17997: LD_VAR 0 2
18001: NOT
18002: IFFALSE 18006
// exit ;
18004: GO 18132
// side := 0 ;
18006: LD_ADDR_VAR 0 3
18010: PUSH
18011: LD_INT 0
18013: ST_TO_ADDR
// for i := 1 to 8 do
18014: LD_ADDR_VAR 0 1
18018: PUSH
18019: DOUBLE
18020: LD_INT 1
18022: DEC
18023: ST_TO_ADDR
18024: LD_INT 8
18026: PUSH
18027: FOR_TO
18028: IFFALSE 18076
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18030: LD_OWVAR 2
18034: PUSH
18035: LD_VAR 0 1
18039: NONEQUAL
18040: PUSH
18041: LD_OWVAR 2
18045: PPUSH
18046: LD_VAR 0 1
18050: PPUSH
18051: CALL_OW 81
18055: PUSH
18056: LD_INT 2
18058: EQUAL
18059: AND
18060: IFFALSE 18074
// begin side := i ;
18062: LD_ADDR_VAR 0 3
18066: PUSH
18067: LD_VAR 0 1
18071: ST_TO_ADDR
// break ;
18072: GO 18076
// end ;
18074: GO 18027
18076: POP
18077: POP
// if not side then
18078: LD_VAR 0 3
18082: NOT
18083: IFFALSE 18087
// exit ;
18085: GO 18132
// for i := 1 to tmp do
18087: LD_ADDR_VAR 0 1
18091: PUSH
18092: DOUBLE
18093: LD_INT 1
18095: DEC
18096: ST_TO_ADDR
18097: LD_VAR 0 2
18101: PUSH
18102: FOR_TO
18103: IFFALSE 18130
// if Prob ( 60 ) then
18105: LD_INT 60
18107: PPUSH
18108: CALL_OW 13
18112: IFFALSE 18128
// SetSide ( i , side ) ;
18114: LD_VAR 0 1
18118: PPUSH
18119: LD_VAR 0 3
18123: PPUSH
18124: CALL_OW 235
18128: GO 18102
18130: POP
18131: POP
// end ;
18132: PPOPN 3
18134: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18135: LD_EXP 39
18139: PUSH
18140: LD_EXP 52
18144: AND
18145: IFFALSE 18264
18147: GO 18149
18149: DISABLE
18150: LD_INT 0
18152: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18153: LD_ADDR_VAR 0 1
18157: PUSH
18158: LD_INT 22
18160: PUSH
18161: LD_OWVAR 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 21
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 3
18182: PUSH
18183: LD_INT 23
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: PPUSH
18202: CALL_OW 69
18206: PUSH
18207: FOR_IN
18208: IFFALSE 18262
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18210: LD_VAR 0 1
18214: PPUSH
18215: CALL_OW 257
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: LD_INT 2
18225: PUSH
18226: LD_INT 3
18228: PUSH
18229: LD_INT 4
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: IN
18238: IFFALSE 18260
// SetClass ( un , rand ( 1 , 4 ) ) ;
18240: LD_VAR 0 1
18244: PPUSH
18245: LD_INT 1
18247: PPUSH
18248: LD_INT 4
18250: PPUSH
18251: CALL_OW 12
18255: PPUSH
18256: CALL_OW 336
18260: GO 18207
18262: POP
18263: POP
// end ;
18264: PPOPN 1
18266: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18267: LD_EXP 39
18271: PUSH
18272: LD_EXP 51
18276: AND
18277: IFFALSE 18356
18279: GO 18281
18281: DISABLE
18282: LD_INT 0
18284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18285: LD_ADDR_VAR 0 1
18289: PUSH
18290: LD_INT 22
18292: PUSH
18293: LD_OWVAR 2
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 21
18304: PUSH
18305: LD_INT 3
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PPUSH
18316: CALL_OW 69
18320: ST_TO_ADDR
// if not tmp then
18321: LD_VAR 0 1
18325: NOT
18326: IFFALSE 18330
// exit ;
18328: GO 18356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18330: LD_VAR 0 1
18334: PUSH
18335: LD_INT 1
18337: PPUSH
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 12
18347: ARRAY
18348: PPUSH
18349: LD_INT 100
18351: PPUSH
18352: CALL_OW 234
// end ;
18356: PPOPN 1
18358: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18359: LD_EXP 39
18363: PUSH
18364: LD_EXP 53
18368: AND
18369: IFFALSE 18467
18371: GO 18373
18373: DISABLE
18374: LD_INT 0
18376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18377: LD_ADDR_VAR 0 1
18381: PUSH
18382: LD_INT 22
18384: PUSH
18385: LD_OWVAR 2
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 21
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PPUSH
18408: CALL_OW 69
18412: ST_TO_ADDR
// if not tmp then
18413: LD_VAR 0 1
18417: NOT
18418: IFFALSE 18422
// exit ;
18420: GO 18467
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18422: LD_VAR 0 1
18426: PUSH
18427: LD_INT 1
18429: PPUSH
18430: LD_VAR 0 1
18434: PPUSH
18435: CALL_OW 12
18439: ARRAY
18440: PPUSH
18441: LD_INT 1
18443: PPUSH
18444: LD_INT 4
18446: PPUSH
18447: CALL_OW 12
18451: PPUSH
18452: LD_INT 3000
18454: PPUSH
18455: LD_INT 9000
18457: PPUSH
18458: CALL_OW 12
18462: PPUSH
18463: CALL_OW 492
// end ;
18467: PPOPN 1
18469: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18470: LD_EXP 39
18474: PUSH
18475: LD_EXP 54
18479: AND
18480: IFFALSE 18500
18482: GO 18484
18484: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18485: LD_INT 1
18487: PPUSH
18488: LD_OWVAR 2
18492: PPUSH
18493: LD_INT 0
18495: PPUSH
18496: CALL_OW 324
18500: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18501: LD_EXP 39
18505: PUSH
18506: LD_EXP 55
18510: AND
18511: IFFALSE 18594
18513: GO 18515
18515: DISABLE
18516: LD_INT 0
18518: PPUSH
18519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18520: LD_ADDR_VAR 0 2
18524: PUSH
18525: LD_INT 22
18527: PUSH
18528: LD_OWVAR 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 21
18539: PUSH
18540: LD_INT 3
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PPUSH
18551: CALL_OW 69
18555: ST_TO_ADDR
// if not tmp then
18556: LD_VAR 0 2
18560: NOT
18561: IFFALSE 18565
// exit ;
18563: GO 18594
// for i in tmp do
18565: LD_ADDR_VAR 0 1
18569: PUSH
18570: LD_VAR 0 2
18574: PUSH
18575: FOR_IN
18576: IFFALSE 18592
// SetBLevel ( i , 10 ) ;
18578: LD_VAR 0 1
18582: PPUSH
18583: LD_INT 10
18585: PPUSH
18586: CALL_OW 241
18590: GO 18575
18592: POP
18593: POP
// end ;
18594: PPOPN 2
18596: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18597: LD_EXP 39
18601: PUSH
18602: LD_EXP 56
18606: AND
18607: IFFALSE 18718
18609: GO 18611
18611: DISABLE
18612: LD_INT 0
18614: PPUSH
18615: PPUSH
18616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18617: LD_ADDR_VAR 0 3
18621: PUSH
18622: LD_INT 22
18624: PUSH
18625: LD_OWVAR 2
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 25
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PPUSH
18648: CALL_OW 69
18652: ST_TO_ADDR
// if not tmp then
18653: LD_VAR 0 3
18657: NOT
18658: IFFALSE 18662
// exit ;
18660: GO 18718
// un := tmp [ rand ( 1 , tmp ) ] ;
18662: LD_ADDR_VAR 0 2
18666: PUSH
18667: LD_VAR 0 3
18671: PUSH
18672: LD_INT 1
18674: PPUSH
18675: LD_VAR 0 3
18679: PPUSH
18680: CALL_OW 12
18684: ARRAY
18685: ST_TO_ADDR
// if Crawls ( un ) then
18686: LD_VAR 0 2
18690: PPUSH
18691: CALL_OW 318
18695: IFFALSE 18706
// ComWalk ( un ) ;
18697: LD_VAR 0 2
18701: PPUSH
18702: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18706: LD_VAR 0 2
18710: PPUSH
18711: LD_INT 5
18713: PPUSH
18714: CALL_OW 336
// end ;
18718: PPOPN 3
18720: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18721: LD_EXP 39
18725: PUSH
18726: LD_EXP 57
18730: AND
18731: PUSH
18732: LD_OWVAR 67
18736: PUSH
18737: LD_INT 3
18739: LESS
18740: AND
18741: IFFALSE 18760
18743: GO 18745
18745: DISABLE
// Difficulty := Difficulty + 1 ;
18746: LD_ADDR_OWVAR 67
18750: PUSH
18751: LD_OWVAR 67
18755: PUSH
18756: LD_INT 1
18758: PLUS
18759: ST_TO_ADDR
18760: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18761: LD_EXP 39
18765: PUSH
18766: LD_EXP 58
18770: AND
18771: IFFALSE 18874
18773: GO 18775
18775: DISABLE
18776: LD_INT 0
18778: PPUSH
// begin for i := 1 to 5 do
18779: LD_ADDR_VAR 0 1
18783: PUSH
18784: DOUBLE
18785: LD_INT 1
18787: DEC
18788: ST_TO_ADDR
18789: LD_INT 5
18791: PUSH
18792: FOR_TO
18793: IFFALSE 18872
// begin uc_nation := nation_nature ;
18795: LD_ADDR_OWVAR 21
18799: PUSH
18800: LD_INT 0
18802: ST_TO_ADDR
// uc_side := 0 ;
18803: LD_ADDR_OWVAR 20
18807: PUSH
18808: LD_INT 0
18810: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18811: LD_ADDR_OWVAR 29
18815: PUSH
18816: LD_INT 12
18818: PUSH
18819: LD_INT 12
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: ST_TO_ADDR
// hc_agressivity := 20 ;
18826: LD_ADDR_OWVAR 35
18830: PUSH
18831: LD_INT 20
18833: ST_TO_ADDR
// hc_class := class_tiger ;
18834: LD_ADDR_OWVAR 28
18838: PUSH
18839: LD_INT 14
18841: ST_TO_ADDR
// hc_gallery :=  ;
18842: LD_ADDR_OWVAR 33
18846: PUSH
18847: LD_STRING 
18849: ST_TO_ADDR
// hc_name :=  ;
18850: LD_ADDR_OWVAR 26
18854: PUSH
18855: LD_STRING 
18857: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18858: CALL_OW 44
18862: PPUSH
18863: LD_INT 0
18865: PPUSH
18866: CALL_OW 51
// end ;
18870: GO 18792
18872: POP
18873: POP
// end ;
18874: PPOPN 1
18876: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18877: LD_EXP 39
18881: PUSH
18882: LD_EXP 59
18886: AND
18887: IFFALSE 18896
18889: GO 18891
18891: DISABLE
// StreamSibBomb ;
18892: CALL 18897 0 0
18896: END
// export function StreamSibBomb ; var i , x , y ; begin
18897: LD_INT 0
18899: PPUSH
18900: PPUSH
18901: PPUSH
18902: PPUSH
// result := false ;
18903: LD_ADDR_VAR 0 1
18907: PUSH
18908: LD_INT 0
18910: ST_TO_ADDR
// for i := 1 to 16 do
18911: LD_ADDR_VAR 0 2
18915: PUSH
18916: DOUBLE
18917: LD_INT 1
18919: DEC
18920: ST_TO_ADDR
18921: LD_INT 16
18923: PUSH
18924: FOR_TO
18925: IFFALSE 19124
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18927: LD_ADDR_VAR 0 3
18931: PUSH
18932: LD_INT 10
18934: PUSH
18935: LD_INT 20
18937: PUSH
18938: LD_INT 30
18940: PUSH
18941: LD_INT 40
18943: PUSH
18944: LD_INT 50
18946: PUSH
18947: LD_INT 60
18949: PUSH
18950: LD_INT 70
18952: PUSH
18953: LD_INT 80
18955: PUSH
18956: LD_INT 90
18958: PUSH
18959: LD_INT 100
18961: PUSH
18962: LD_INT 110
18964: PUSH
18965: LD_INT 120
18967: PUSH
18968: LD_INT 130
18970: PUSH
18971: LD_INT 140
18973: PUSH
18974: LD_INT 150
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PPUSH
18997: LD_INT 15
18999: PPUSH
19000: CALL_OW 12
19004: ARRAY
19005: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19006: LD_ADDR_VAR 0 4
19010: PUSH
19011: LD_INT 10
19013: PUSH
19014: LD_INT 20
19016: PUSH
19017: LD_INT 30
19019: PUSH
19020: LD_INT 40
19022: PUSH
19023: LD_INT 50
19025: PUSH
19026: LD_INT 60
19028: PUSH
19029: LD_INT 70
19031: PUSH
19032: LD_INT 80
19034: PUSH
19035: LD_INT 90
19037: PUSH
19038: LD_INT 100
19040: PUSH
19041: LD_INT 110
19043: PUSH
19044: LD_INT 120
19046: PUSH
19047: LD_INT 130
19049: PUSH
19050: LD_INT 140
19052: PUSH
19053: LD_INT 150
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 1
19075: PPUSH
19076: LD_INT 15
19078: PPUSH
19079: CALL_OW 12
19083: ARRAY
19084: ST_TO_ADDR
// if ValidHex ( x , y ) then
19085: LD_VAR 0 3
19089: PPUSH
19090: LD_VAR 0 4
19094: PPUSH
19095: CALL_OW 488
19099: IFFALSE 19122
// begin result := [ x , y ] ;
19101: LD_ADDR_VAR 0 1
19105: PUSH
19106: LD_VAR 0 3
19110: PUSH
19111: LD_VAR 0 4
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: ST_TO_ADDR
// break ;
19120: GO 19124
// end ; end ;
19122: GO 18924
19124: POP
19125: POP
// if result then
19126: LD_VAR 0 1
19130: IFFALSE 19190
// begin ToLua ( playSibBomb() ) ;
19132: LD_STRING playSibBomb()
19134: PPUSH
19135: CALL_OW 559
// wait ( 0 0$14 ) ;
19139: LD_INT 490
19141: PPUSH
19142: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19146: LD_VAR 0 1
19150: PUSH
19151: LD_INT 1
19153: ARRAY
19154: PPUSH
19155: LD_VAR 0 1
19159: PUSH
19160: LD_INT 2
19162: ARRAY
19163: PPUSH
19164: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19168: LD_VAR 0 1
19172: PUSH
19173: LD_INT 1
19175: ARRAY
19176: PPUSH
19177: LD_VAR 0 1
19181: PUSH
19182: LD_INT 2
19184: ARRAY
19185: PPUSH
19186: CALL_OW 429
// end ; end ;
19190: LD_VAR 0 1
19194: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19195: LD_EXP 39
19199: PUSH
19200: LD_EXP 61
19204: AND
19205: IFFALSE 19217
19207: GO 19209
19209: DISABLE
// YouLost (  ) ;
19210: LD_STRING 
19212: PPUSH
19213: CALL_OW 104
19217: END
// every 0 0$1 trigger StreamModeActive and sFog do
19218: LD_EXP 39
19222: PUSH
19223: LD_EXP 60
19227: AND
19228: IFFALSE 19242
19230: GO 19232
19232: DISABLE
// FogOff ( your_side ) ;
19233: LD_OWVAR 2
19237: PPUSH
19238: CALL_OW 344
19242: END
// every 0 0$1 trigger StreamModeActive and sSun do
19243: LD_EXP 39
19247: PUSH
19248: LD_EXP 62
19252: AND
19253: IFFALSE 19281
19255: GO 19257
19257: DISABLE
// begin solar_recharge_percent := 0 ;
19258: LD_ADDR_OWVAR 79
19262: PUSH
19263: LD_INT 0
19265: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19266: LD_INT 10500
19268: PPUSH
19269: CALL_OW 67
// solar_recharge_percent := 100 ;
19273: LD_ADDR_OWVAR 79
19277: PUSH
19278: LD_INT 100
19280: ST_TO_ADDR
// end ;
19281: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19282: LD_EXP 39
19286: PUSH
19287: LD_EXP 63
19291: AND
19292: IFFALSE 19531
19294: GO 19296
19296: DISABLE
19297: LD_INT 0
19299: PPUSH
19300: PPUSH
19301: PPUSH
// begin tmp := [ ] ;
19302: LD_ADDR_VAR 0 3
19306: PUSH
19307: EMPTY
19308: ST_TO_ADDR
// for i := 1 to 6 do
19309: LD_ADDR_VAR 0 1
19313: PUSH
19314: DOUBLE
19315: LD_INT 1
19317: DEC
19318: ST_TO_ADDR
19319: LD_INT 6
19321: PUSH
19322: FOR_TO
19323: IFFALSE 19428
// begin uc_nation := nation_nature ;
19325: LD_ADDR_OWVAR 21
19329: PUSH
19330: LD_INT 0
19332: ST_TO_ADDR
// uc_side := 0 ;
19333: LD_ADDR_OWVAR 20
19337: PUSH
19338: LD_INT 0
19340: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19341: LD_ADDR_OWVAR 29
19345: PUSH
19346: LD_INT 12
19348: PUSH
19349: LD_INT 12
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: ST_TO_ADDR
// hc_agressivity := 20 ;
19356: LD_ADDR_OWVAR 35
19360: PUSH
19361: LD_INT 20
19363: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19364: LD_ADDR_OWVAR 28
19368: PUSH
19369: LD_INT 17
19371: ST_TO_ADDR
// hc_gallery :=  ;
19372: LD_ADDR_OWVAR 33
19376: PUSH
19377: LD_STRING 
19379: ST_TO_ADDR
// hc_name :=  ;
19380: LD_ADDR_OWVAR 26
19384: PUSH
19385: LD_STRING 
19387: ST_TO_ADDR
// un := CreateHuman ;
19388: LD_ADDR_VAR 0 2
19392: PUSH
19393: CALL_OW 44
19397: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19398: LD_VAR 0 2
19402: PPUSH
19403: LD_INT 1
19405: PPUSH
19406: CALL_OW 51
// tmp := tmp ^ un ;
19410: LD_ADDR_VAR 0 3
19414: PUSH
19415: LD_VAR 0 3
19419: PUSH
19420: LD_VAR 0 2
19424: ADD
19425: ST_TO_ADDR
// end ;
19426: GO 19322
19428: POP
19429: POP
// repeat wait ( 0 0$1 ) ;
19430: LD_INT 35
19432: PPUSH
19433: CALL_OW 67
// for un in tmp do
19437: LD_ADDR_VAR 0 2
19441: PUSH
19442: LD_VAR 0 3
19446: PUSH
19447: FOR_IN
19448: IFFALSE 19522
// begin if IsDead ( un ) then
19450: LD_VAR 0 2
19454: PPUSH
19455: CALL_OW 301
19459: IFFALSE 19479
// begin tmp := tmp diff un ;
19461: LD_ADDR_VAR 0 3
19465: PUSH
19466: LD_VAR 0 3
19470: PUSH
19471: LD_VAR 0 2
19475: DIFF
19476: ST_TO_ADDR
// continue ;
19477: GO 19447
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19479: LD_VAR 0 2
19483: PPUSH
19484: LD_INT 3
19486: PUSH
19487: LD_INT 22
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PPUSH
19501: CALL_OW 69
19505: PPUSH
19506: LD_VAR 0 2
19510: PPUSH
19511: CALL_OW 74
19515: PPUSH
19516: CALL_OW 115
// end ;
19520: GO 19447
19522: POP
19523: POP
// until not tmp ;
19524: LD_VAR 0 3
19528: NOT
19529: IFFALSE 19430
// end ;
19531: PPOPN 3
19533: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19534: LD_EXP 39
19538: PUSH
19539: LD_EXP 64
19543: AND
19544: IFFALSE 19598
19546: GO 19548
19548: DISABLE
// begin ToLua ( displayTroll(); ) ;
19549: LD_STRING displayTroll();
19551: PPUSH
19552: CALL_OW 559
// wait ( 3 3$00 ) ;
19556: LD_INT 6300
19558: PPUSH
19559: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19563: LD_STRING hideTroll();
19565: PPUSH
19566: CALL_OW 559
// wait ( 1 1$00 ) ;
19570: LD_INT 2100
19572: PPUSH
19573: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19577: LD_STRING displayTroll();
19579: PPUSH
19580: CALL_OW 559
// wait ( 1 1$00 ) ;
19584: LD_INT 2100
19586: PPUSH
19587: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19591: LD_STRING hideTroll();
19593: PPUSH
19594: CALL_OW 559
// end ;
19598: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19599: LD_EXP 39
19603: PUSH
19604: LD_EXP 65
19608: AND
19609: IFFALSE 19672
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
// begin p := 0 ;
19617: LD_ADDR_VAR 0 1
19621: PUSH
19622: LD_INT 0
19624: ST_TO_ADDR
// repeat game_speed := 1 ;
19625: LD_ADDR_OWVAR 65
19629: PUSH
19630: LD_INT 1
19632: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19633: LD_INT 35
19635: PPUSH
19636: CALL_OW 67
// p := p + 1 ;
19640: LD_ADDR_VAR 0 1
19644: PUSH
19645: LD_VAR 0 1
19649: PUSH
19650: LD_INT 1
19652: PLUS
19653: ST_TO_ADDR
// until p >= 60 ;
19654: LD_VAR 0 1
19658: PUSH
19659: LD_INT 60
19661: GREATEREQUAL
19662: IFFALSE 19625
// game_speed := 4 ;
19664: LD_ADDR_OWVAR 65
19668: PUSH
19669: LD_INT 4
19671: ST_TO_ADDR
// end ;
19672: PPOPN 1
19674: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19675: LD_EXP 39
19679: PUSH
19680: LD_EXP 66
19684: AND
19685: IFFALSE 19831
19687: GO 19689
19689: DISABLE
19690: LD_INT 0
19692: PPUSH
19693: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19694: LD_ADDR_VAR 0 1
19698: PUSH
19699: LD_INT 22
19701: PUSH
19702: LD_OWVAR 2
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 2
19713: PUSH
19714: LD_INT 30
19716: PUSH
19717: LD_INT 0
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 30
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: LIST
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PPUSH
19743: CALL_OW 69
19747: ST_TO_ADDR
// if not depot then
19748: LD_VAR 0 1
19752: NOT
19753: IFFALSE 19757
// exit ;
19755: GO 19831
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19757: LD_ADDR_VAR 0 2
19761: PUSH
19762: LD_VAR 0 1
19766: PUSH
19767: LD_INT 1
19769: PPUSH
19770: LD_VAR 0 1
19774: PPUSH
19775: CALL_OW 12
19779: ARRAY
19780: PPUSH
19781: CALL_OW 274
19785: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19786: LD_VAR 0 2
19790: PPUSH
19791: LD_INT 1
19793: PPUSH
19794: LD_INT 0
19796: PPUSH
19797: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19801: LD_VAR 0 2
19805: PPUSH
19806: LD_INT 2
19808: PPUSH
19809: LD_INT 0
19811: PPUSH
19812: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19816: LD_VAR 0 2
19820: PPUSH
19821: LD_INT 3
19823: PPUSH
19824: LD_INT 0
19826: PPUSH
19827: CALL_OW 277
// end ;
19831: PPOPN 2
19833: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19834: LD_EXP 39
19838: PUSH
19839: LD_EXP 67
19843: AND
19844: IFFALSE 19941
19846: GO 19848
19848: DISABLE
19849: LD_INT 0
19851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19852: LD_ADDR_VAR 0 1
19856: PUSH
19857: LD_INT 22
19859: PUSH
19860: LD_OWVAR 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 21
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 3
19881: PUSH
19882: LD_INT 23
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: LIST
19900: PPUSH
19901: CALL_OW 69
19905: ST_TO_ADDR
// if not tmp then
19906: LD_VAR 0 1
19910: NOT
19911: IFFALSE 19915
// exit ;
19913: GO 19941
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19915: LD_VAR 0 1
19919: PUSH
19920: LD_INT 1
19922: PPUSH
19923: LD_VAR 0 1
19927: PPUSH
19928: CALL_OW 12
19932: ARRAY
19933: PPUSH
19934: LD_INT 200
19936: PPUSH
19937: CALL_OW 234
// end ;
19941: PPOPN 1
19943: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19944: LD_EXP 39
19948: PUSH
19949: LD_EXP 68
19953: AND
19954: IFFALSE 20033
19956: GO 19958
19958: DISABLE
19959: LD_INT 0
19961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19962: LD_ADDR_VAR 0 1
19966: PUSH
19967: LD_INT 22
19969: PUSH
19970: LD_OWVAR 2
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 21
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PPUSH
19993: CALL_OW 69
19997: ST_TO_ADDR
// if not tmp then
19998: LD_VAR 0 1
20002: NOT
20003: IFFALSE 20007
// exit ;
20005: GO 20033
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20007: LD_VAR 0 1
20011: PUSH
20012: LD_INT 1
20014: PPUSH
20015: LD_VAR 0 1
20019: PPUSH
20020: CALL_OW 12
20024: ARRAY
20025: PPUSH
20026: LD_INT 60
20028: PPUSH
20029: CALL_OW 234
// end ;
20033: PPOPN 1
20035: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20036: LD_EXP 39
20040: PUSH
20041: LD_EXP 69
20045: AND
20046: IFFALSE 20145
20048: GO 20050
20050: DISABLE
20051: LD_INT 0
20053: PPUSH
20054: PPUSH
// begin enable ;
20055: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20056: LD_ADDR_VAR 0 1
20060: PUSH
20061: LD_INT 22
20063: PUSH
20064: LD_OWVAR 2
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 61
20075: PUSH
20076: EMPTY
20077: LIST
20078: PUSH
20079: LD_INT 33
20081: PUSH
20082: LD_INT 2
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: LIST
20093: PPUSH
20094: CALL_OW 69
20098: ST_TO_ADDR
// if not tmp then
20099: LD_VAR 0 1
20103: NOT
20104: IFFALSE 20108
// exit ;
20106: GO 20145
// for i in tmp do
20108: LD_ADDR_VAR 0 2
20112: PUSH
20113: LD_VAR 0 1
20117: PUSH
20118: FOR_IN
20119: IFFALSE 20143
// if IsControledBy ( i ) then
20121: LD_VAR 0 2
20125: PPUSH
20126: CALL_OW 312
20130: IFFALSE 20141
// ComUnlink ( i ) ;
20132: LD_VAR 0 2
20136: PPUSH
20137: CALL_OW 136
20141: GO 20118
20143: POP
20144: POP
// end ;
20145: PPOPN 2
20147: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20148: LD_EXP 39
20152: PUSH
20153: LD_EXP 70
20157: AND
20158: IFFALSE 20298
20160: GO 20162
20162: DISABLE
20163: LD_INT 0
20165: PPUSH
20166: PPUSH
// begin ToLua ( displayPowell(); ) ;
20167: LD_STRING displayPowell();
20169: PPUSH
20170: CALL_OW 559
// uc_side := 0 ;
20174: LD_ADDR_OWVAR 20
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
// uc_nation := 2 ;
20182: LD_ADDR_OWVAR 21
20186: PUSH
20187: LD_INT 2
20189: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20190: LD_ADDR_OWVAR 37
20194: PUSH
20195: LD_INT 14
20197: ST_TO_ADDR
// vc_engine := engine_siberite ;
20198: LD_ADDR_OWVAR 39
20202: PUSH
20203: LD_INT 3
20205: ST_TO_ADDR
// vc_control := control_apeman ;
20206: LD_ADDR_OWVAR 38
20210: PUSH
20211: LD_INT 5
20213: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20214: LD_ADDR_OWVAR 40
20218: PUSH
20219: LD_INT 29
20221: ST_TO_ADDR
// un := CreateVehicle ;
20222: LD_ADDR_VAR 0 2
20226: PUSH
20227: CALL_OW 45
20231: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20232: LD_VAR 0 2
20236: PPUSH
20237: LD_INT 1
20239: PPUSH
20240: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20244: LD_INT 35
20246: PPUSH
20247: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20251: LD_VAR 0 2
20255: PPUSH
20256: LD_INT 22
20258: PUSH
20259: LD_OWVAR 2
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PPUSH
20268: CALL_OW 69
20272: PPUSH
20273: LD_VAR 0 2
20277: PPUSH
20278: CALL_OW 74
20282: PPUSH
20283: CALL_OW 115
// until IsDead ( un ) ;
20287: LD_VAR 0 2
20291: PPUSH
20292: CALL_OW 301
20296: IFFALSE 20244
// end ;
20298: PPOPN 2
20300: END
// every 0 0$1 trigger StreamModeActive and sStu do
20301: LD_EXP 39
20305: PUSH
20306: LD_EXP 78
20310: AND
20311: IFFALSE 20327
20313: GO 20315
20315: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20316: LD_STRING displayStucuk();
20318: PPUSH
20319: CALL_OW 559
// ResetFog ;
20323: CALL_OW 335
// end ;
20327: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20328: LD_EXP 39
20332: PUSH
20333: LD_EXP 71
20337: AND
20338: IFFALSE 20479
20340: GO 20342
20342: DISABLE
20343: LD_INT 0
20345: PPUSH
20346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20347: LD_ADDR_VAR 0 2
20351: PUSH
20352: LD_INT 22
20354: PUSH
20355: LD_OWVAR 2
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 21
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PPUSH
20378: CALL_OW 69
20382: ST_TO_ADDR
// if not tmp then
20383: LD_VAR 0 2
20387: NOT
20388: IFFALSE 20392
// exit ;
20390: GO 20479
// un := tmp [ rand ( 1 , tmp ) ] ;
20392: LD_ADDR_VAR 0 1
20396: PUSH
20397: LD_VAR 0 2
20401: PUSH
20402: LD_INT 1
20404: PPUSH
20405: LD_VAR 0 2
20409: PPUSH
20410: CALL_OW 12
20414: ARRAY
20415: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20416: LD_VAR 0 1
20420: PPUSH
20421: LD_INT 0
20423: PPUSH
20424: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20428: LD_VAR 0 1
20432: PPUSH
20433: LD_OWVAR 3
20437: PUSH
20438: LD_VAR 0 1
20442: DIFF
20443: PPUSH
20444: LD_VAR 0 1
20448: PPUSH
20449: CALL_OW 74
20453: PPUSH
20454: CALL_OW 115
// wait ( 0 0$20 ) ;
20458: LD_INT 700
20460: PPUSH
20461: CALL_OW 67
// SetSide ( un , your_side ) ;
20465: LD_VAR 0 1
20469: PPUSH
20470: LD_OWVAR 2
20474: PPUSH
20475: CALL_OW 235
// end ;
20479: PPOPN 2
20481: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20482: LD_EXP 39
20486: PUSH
20487: LD_EXP 72
20491: AND
20492: IFFALSE 20598
20494: GO 20496
20496: DISABLE
20497: LD_INT 0
20499: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20500: LD_ADDR_VAR 0 1
20504: PUSH
20505: LD_INT 22
20507: PUSH
20508: LD_OWVAR 2
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 30
20522: PUSH
20523: LD_INT 0
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 30
20532: PUSH
20533: LD_INT 1
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PPUSH
20549: CALL_OW 69
20553: ST_TO_ADDR
// if not depot then
20554: LD_VAR 0 1
20558: NOT
20559: IFFALSE 20563
// exit ;
20561: GO 20598
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20563: LD_VAR 0 1
20567: PUSH
20568: LD_INT 1
20570: ARRAY
20571: PPUSH
20572: CALL_OW 250
20576: PPUSH
20577: LD_VAR 0 1
20581: PUSH
20582: LD_INT 1
20584: ARRAY
20585: PPUSH
20586: CALL_OW 251
20590: PPUSH
20591: LD_INT 70
20593: PPUSH
20594: CALL_OW 495
// end ;
20598: PPOPN 1
20600: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20601: LD_EXP 39
20605: PUSH
20606: LD_EXP 73
20610: AND
20611: IFFALSE 20822
20613: GO 20615
20615: DISABLE
20616: LD_INT 0
20618: PPUSH
20619: PPUSH
20620: PPUSH
20621: PPUSH
20622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20623: LD_ADDR_VAR 0 5
20627: PUSH
20628: LD_INT 22
20630: PUSH
20631: LD_OWVAR 2
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 21
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PPUSH
20654: CALL_OW 69
20658: ST_TO_ADDR
// if not tmp then
20659: LD_VAR 0 5
20663: NOT
20664: IFFALSE 20668
// exit ;
20666: GO 20822
// for i in tmp do
20668: LD_ADDR_VAR 0 1
20672: PUSH
20673: LD_VAR 0 5
20677: PUSH
20678: FOR_IN
20679: IFFALSE 20820
// begin d := rand ( 0 , 5 ) ;
20681: LD_ADDR_VAR 0 4
20685: PUSH
20686: LD_INT 0
20688: PPUSH
20689: LD_INT 5
20691: PPUSH
20692: CALL_OW 12
20696: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20697: LD_ADDR_VAR 0 2
20701: PUSH
20702: LD_VAR 0 1
20706: PPUSH
20707: CALL_OW 250
20711: PPUSH
20712: LD_VAR 0 4
20716: PPUSH
20717: LD_INT 3
20719: PPUSH
20720: LD_INT 12
20722: PPUSH
20723: CALL_OW 12
20727: PPUSH
20728: CALL_OW 272
20732: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: LD_VAR 0 1
20742: PPUSH
20743: CALL_OW 251
20747: PPUSH
20748: LD_VAR 0 4
20752: PPUSH
20753: LD_INT 3
20755: PPUSH
20756: LD_INT 12
20758: PPUSH
20759: CALL_OW 12
20763: PPUSH
20764: CALL_OW 273
20768: ST_TO_ADDR
// if ValidHex ( x , y ) then
20769: LD_VAR 0 2
20773: PPUSH
20774: LD_VAR 0 3
20778: PPUSH
20779: CALL_OW 488
20783: IFFALSE 20818
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20785: LD_VAR 0 1
20789: PPUSH
20790: LD_VAR 0 2
20794: PPUSH
20795: LD_VAR 0 3
20799: PPUSH
20800: LD_INT 3
20802: PPUSH
20803: LD_INT 6
20805: PPUSH
20806: CALL_OW 12
20810: PPUSH
20811: LD_INT 1
20813: PPUSH
20814: CALL_OW 483
// end ;
20818: GO 20678
20820: POP
20821: POP
// end ;
20822: PPOPN 5
20824: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20825: LD_EXP 39
20829: PUSH
20830: LD_EXP 74
20834: AND
20835: IFFALSE 20929
20837: GO 20839
20839: DISABLE
20840: LD_INT 0
20842: PPUSH
20843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20844: LD_ADDR_VAR 0 2
20848: PUSH
20849: LD_INT 22
20851: PUSH
20852: LD_OWVAR 2
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 32
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 21
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: LIST
20885: PPUSH
20886: CALL_OW 69
20890: ST_TO_ADDR
// if not tmp then
20891: LD_VAR 0 2
20895: NOT
20896: IFFALSE 20900
// exit ;
20898: GO 20929
// for i in tmp do
20900: LD_ADDR_VAR 0 1
20904: PUSH
20905: LD_VAR 0 2
20909: PUSH
20910: FOR_IN
20911: IFFALSE 20927
// SetFuel ( i , 0 ) ;
20913: LD_VAR 0 1
20917: PPUSH
20918: LD_INT 0
20920: PPUSH
20921: CALL_OW 240
20925: GO 20910
20927: POP
20928: POP
// end ;
20929: PPOPN 2
20931: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20932: LD_EXP 39
20936: PUSH
20937: LD_EXP 75
20941: AND
20942: IFFALSE 21008
20944: GO 20946
20946: DISABLE
20947: LD_INT 0
20949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20950: LD_ADDR_VAR 0 1
20954: PUSH
20955: LD_INT 22
20957: PUSH
20958: LD_OWVAR 2
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 30
20969: PUSH
20970: LD_INT 29
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PPUSH
20981: CALL_OW 69
20985: ST_TO_ADDR
// if not tmp then
20986: LD_VAR 0 1
20990: NOT
20991: IFFALSE 20995
// exit ;
20993: GO 21008
// DestroyUnit ( tmp [ 1 ] ) ;
20995: LD_VAR 0 1
20999: PUSH
21000: LD_INT 1
21002: ARRAY
21003: PPUSH
21004: CALL_OW 65
// end ;
21008: PPOPN 1
21010: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21011: LD_EXP 39
21015: PUSH
21016: LD_EXP 77
21020: AND
21021: IFFALSE 21150
21023: GO 21025
21025: DISABLE
21026: LD_INT 0
21028: PPUSH
// begin uc_side := 0 ;
21029: LD_ADDR_OWVAR 20
21033: PUSH
21034: LD_INT 0
21036: ST_TO_ADDR
// uc_nation := nation_arabian ;
21037: LD_ADDR_OWVAR 21
21041: PUSH
21042: LD_INT 2
21044: ST_TO_ADDR
// hc_gallery :=  ;
21045: LD_ADDR_OWVAR 33
21049: PUSH
21050: LD_STRING 
21052: ST_TO_ADDR
// hc_name :=  ;
21053: LD_ADDR_OWVAR 26
21057: PUSH
21058: LD_STRING 
21060: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21061: LD_INT 1
21063: PPUSH
21064: LD_INT 11
21066: PPUSH
21067: LD_INT 10
21069: PPUSH
21070: CALL_OW 380
// un := CreateHuman ;
21074: LD_ADDR_VAR 0 1
21078: PUSH
21079: CALL_OW 44
21083: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21084: LD_VAR 0 1
21088: PPUSH
21089: LD_INT 1
21091: PPUSH
21092: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21096: LD_INT 35
21098: PPUSH
21099: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21103: LD_VAR 0 1
21107: PPUSH
21108: LD_INT 22
21110: PUSH
21111: LD_OWVAR 2
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PPUSH
21120: CALL_OW 69
21124: PPUSH
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 74
21134: PPUSH
21135: CALL_OW 115
// until IsDead ( un ) ;
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 301
21148: IFFALSE 21096
// end ;
21150: PPOPN 1
21152: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21153: LD_EXP 39
21157: PUSH
21158: LD_EXP 79
21162: AND
21163: IFFALSE 21175
21165: GO 21167
21167: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21168: LD_STRING earthquake(getX(game), 0, 32)
21170: PPUSH
21171: CALL_OW 559
21175: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21176: LD_EXP 39
21180: PUSH
21181: LD_EXP 80
21185: AND
21186: IFFALSE 21277
21188: GO 21190
21190: DISABLE
21191: LD_INT 0
21193: PPUSH
// begin enable ;
21194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21195: LD_ADDR_VAR 0 1
21199: PUSH
21200: LD_INT 22
21202: PUSH
21203: LD_OWVAR 2
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 21
21214: PUSH
21215: LD_INT 2
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 33
21224: PUSH
21225: LD_INT 3
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: PPUSH
21237: CALL_OW 69
21241: ST_TO_ADDR
// if not tmp then
21242: LD_VAR 0 1
21246: NOT
21247: IFFALSE 21251
// exit ;
21249: GO 21277
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21251: LD_VAR 0 1
21255: PUSH
21256: LD_INT 1
21258: PPUSH
21259: LD_VAR 0 1
21263: PPUSH
21264: CALL_OW 12
21268: ARRAY
21269: PPUSH
21270: LD_INT 1
21272: PPUSH
21273: CALL_OW 234
// end ;
21277: PPOPN 1
21279: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21280: LD_EXP 39
21284: PUSH
21285: LD_EXP 81
21289: AND
21290: IFFALSE 21431
21292: GO 21294
21294: DISABLE
21295: LD_INT 0
21297: PPUSH
21298: PPUSH
21299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21300: LD_ADDR_VAR 0 3
21304: PUSH
21305: LD_INT 22
21307: PUSH
21308: LD_OWVAR 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 25
21319: PUSH
21320: LD_INT 1
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PPUSH
21331: CALL_OW 69
21335: ST_TO_ADDR
// if not tmp then
21336: LD_VAR 0 3
21340: NOT
21341: IFFALSE 21345
// exit ;
21343: GO 21431
// un := tmp [ rand ( 1 , tmp ) ] ;
21345: LD_ADDR_VAR 0 2
21349: PUSH
21350: LD_VAR 0 3
21354: PUSH
21355: LD_INT 1
21357: PPUSH
21358: LD_VAR 0 3
21362: PPUSH
21363: CALL_OW 12
21367: ARRAY
21368: ST_TO_ADDR
// if Crawls ( un ) then
21369: LD_VAR 0 2
21373: PPUSH
21374: CALL_OW 318
21378: IFFALSE 21389
// ComWalk ( un ) ;
21380: LD_VAR 0 2
21384: PPUSH
21385: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21389: LD_VAR 0 2
21393: PPUSH
21394: LD_INT 9
21396: PPUSH
21397: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21401: LD_INT 28
21403: PPUSH
21404: LD_OWVAR 2
21408: PPUSH
21409: LD_INT 2
21411: PPUSH
21412: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21416: LD_INT 29
21418: PPUSH
21419: LD_OWVAR 2
21423: PPUSH
21424: LD_INT 2
21426: PPUSH
21427: CALL_OW 322
// end ;
21431: PPOPN 3
21433: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21434: LD_EXP 39
21438: PUSH
21439: LD_EXP 82
21443: AND
21444: IFFALSE 21555
21446: GO 21448
21448: DISABLE
21449: LD_INT 0
21451: PPUSH
21452: PPUSH
21453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21454: LD_ADDR_VAR 0 3
21458: PUSH
21459: LD_INT 22
21461: PUSH
21462: LD_OWVAR 2
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 25
21473: PUSH
21474: LD_INT 1
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PPUSH
21485: CALL_OW 69
21489: ST_TO_ADDR
// if not tmp then
21490: LD_VAR 0 3
21494: NOT
21495: IFFALSE 21499
// exit ;
21497: GO 21555
// un := tmp [ rand ( 1 , tmp ) ] ;
21499: LD_ADDR_VAR 0 2
21503: PUSH
21504: LD_VAR 0 3
21508: PUSH
21509: LD_INT 1
21511: PPUSH
21512: LD_VAR 0 3
21516: PPUSH
21517: CALL_OW 12
21521: ARRAY
21522: ST_TO_ADDR
// if Crawls ( un ) then
21523: LD_VAR 0 2
21527: PPUSH
21528: CALL_OW 318
21532: IFFALSE 21543
// ComWalk ( un ) ;
21534: LD_VAR 0 2
21538: PPUSH
21539: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21543: LD_VAR 0 2
21547: PPUSH
21548: LD_INT 8
21550: PPUSH
21551: CALL_OW 336
// end ;
21555: PPOPN 3
21557: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21558: LD_EXP 39
21562: PUSH
21563: LD_EXP 83
21567: AND
21568: IFFALSE 21712
21570: GO 21572
21572: DISABLE
21573: LD_INT 0
21575: PPUSH
21576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21577: LD_ADDR_VAR 0 2
21581: PUSH
21582: LD_INT 22
21584: PUSH
21585: LD_OWVAR 2
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 21
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: LD_INT 34
21609: PUSH
21610: LD_INT 12
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 34
21619: PUSH
21620: LD_INT 51
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 34
21629: PUSH
21630: LD_INT 32
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: LIST
21647: PPUSH
21648: CALL_OW 69
21652: ST_TO_ADDR
// if not tmp then
21653: LD_VAR 0 2
21657: NOT
21658: IFFALSE 21662
// exit ;
21660: GO 21712
// for i in tmp do
21662: LD_ADDR_VAR 0 1
21666: PUSH
21667: LD_VAR 0 2
21671: PUSH
21672: FOR_IN
21673: IFFALSE 21710
// if GetCargo ( i , mat_artifact ) = 0 then
21675: LD_VAR 0 1
21679: PPUSH
21680: LD_INT 4
21682: PPUSH
21683: CALL_OW 289
21687: PUSH
21688: LD_INT 0
21690: EQUAL
21691: IFFALSE 21708
// SetCargo ( i , mat_siberit , 100 ) ;
21693: LD_VAR 0 1
21697: PPUSH
21698: LD_INT 3
21700: PPUSH
21701: LD_INT 100
21703: PPUSH
21704: CALL_OW 290
21708: GO 21672
21710: POP
21711: POP
// end ;
21712: PPOPN 2
21714: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21715: LD_EXP 39
21719: PUSH
21720: LD_EXP 84
21724: AND
21725: IFFALSE 21908
21727: GO 21729
21729: DISABLE
21730: LD_INT 0
21732: PPUSH
21733: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21734: LD_ADDR_VAR 0 2
21738: PUSH
21739: LD_INT 22
21741: PUSH
21742: LD_OWVAR 2
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PPUSH
21751: CALL_OW 69
21755: ST_TO_ADDR
// if not tmp then
21756: LD_VAR 0 2
21760: NOT
21761: IFFALSE 21765
// exit ;
21763: GO 21908
// for i := 1 to 2 do
21765: LD_ADDR_VAR 0 1
21769: PUSH
21770: DOUBLE
21771: LD_INT 1
21773: DEC
21774: ST_TO_ADDR
21775: LD_INT 2
21777: PUSH
21778: FOR_TO
21779: IFFALSE 21906
// begin uc_side := your_side ;
21781: LD_ADDR_OWVAR 20
21785: PUSH
21786: LD_OWVAR 2
21790: ST_TO_ADDR
// uc_nation := nation_american ;
21791: LD_ADDR_OWVAR 21
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// vc_chassis := us_morphling ;
21799: LD_ADDR_OWVAR 37
21803: PUSH
21804: LD_INT 5
21806: ST_TO_ADDR
// vc_engine := engine_siberite ;
21807: LD_ADDR_OWVAR 39
21811: PUSH
21812: LD_INT 3
21814: ST_TO_ADDR
// vc_control := control_computer ;
21815: LD_ADDR_OWVAR 38
21819: PUSH
21820: LD_INT 3
21822: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21823: LD_ADDR_OWVAR 40
21827: PUSH
21828: LD_INT 10
21830: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21831: LD_VAR 0 2
21835: PUSH
21836: LD_INT 1
21838: ARRAY
21839: PPUSH
21840: CALL_OW 310
21844: NOT
21845: IFFALSE 21892
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21847: CALL_OW 45
21851: PPUSH
21852: LD_VAR 0 2
21856: PUSH
21857: LD_INT 1
21859: ARRAY
21860: PPUSH
21861: CALL_OW 250
21865: PPUSH
21866: LD_VAR 0 2
21870: PUSH
21871: LD_INT 1
21873: ARRAY
21874: PPUSH
21875: CALL_OW 251
21879: PPUSH
21880: LD_INT 12
21882: PPUSH
21883: LD_INT 1
21885: PPUSH
21886: CALL_OW 50
21890: GO 21904
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21892: CALL_OW 45
21896: PPUSH
21897: LD_INT 1
21899: PPUSH
21900: CALL_OW 51
// end ;
21904: GO 21778
21906: POP
21907: POP
// end ;
21908: PPOPN 2
21910: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21911: LD_EXP 39
21915: PUSH
21916: LD_EXP 85
21920: AND
21921: IFFALSE 22143
21923: GO 21925
21925: DISABLE
21926: LD_INT 0
21928: PPUSH
21929: PPUSH
21930: PPUSH
21931: PPUSH
21932: PPUSH
21933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21934: LD_ADDR_VAR 0 6
21938: PUSH
21939: LD_INT 22
21941: PUSH
21942: LD_OWVAR 2
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 21
21953: PUSH
21954: LD_INT 1
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 3
21963: PUSH
21964: LD_INT 23
21966: PUSH
21967: LD_INT 0
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: PPUSH
21983: CALL_OW 69
21987: ST_TO_ADDR
// if not tmp then
21988: LD_VAR 0 6
21992: NOT
21993: IFFALSE 21997
// exit ;
21995: GO 22143
// s1 := rand ( 1 , 4 ) ;
21997: LD_ADDR_VAR 0 2
22001: PUSH
22002: LD_INT 1
22004: PPUSH
22005: LD_INT 4
22007: PPUSH
22008: CALL_OW 12
22012: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22013: LD_ADDR_VAR 0 4
22017: PUSH
22018: LD_VAR 0 6
22022: PUSH
22023: LD_INT 1
22025: ARRAY
22026: PPUSH
22027: LD_VAR 0 2
22031: PPUSH
22032: CALL_OW 259
22036: ST_TO_ADDR
// if s1 = 1 then
22037: LD_VAR 0 2
22041: PUSH
22042: LD_INT 1
22044: EQUAL
22045: IFFALSE 22065
// s2 := rand ( 2 , 4 ) else
22047: LD_ADDR_VAR 0 3
22051: PUSH
22052: LD_INT 2
22054: PPUSH
22055: LD_INT 4
22057: PPUSH
22058: CALL_OW 12
22062: ST_TO_ADDR
22063: GO 22073
// s2 := 1 ;
22065: LD_ADDR_VAR 0 3
22069: PUSH
22070: LD_INT 1
22072: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22073: LD_ADDR_VAR 0 5
22077: PUSH
22078: LD_VAR 0 6
22082: PUSH
22083: LD_INT 1
22085: ARRAY
22086: PPUSH
22087: LD_VAR 0 3
22091: PPUSH
22092: CALL_OW 259
22096: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22097: LD_VAR 0 6
22101: PUSH
22102: LD_INT 1
22104: ARRAY
22105: PPUSH
22106: LD_VAR 0 2
22110: PPUSH
22111: LD_VAR 0 5
22115: PPUSH
22116: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22120: LD_VAR 0 6
22124: PUSH
22125: LD_INT 1
22127: ARRAY
22128: PPUSH
22129: LD_VAR 0 3
22133: PPUSH
22134: LD_VAR 0 4
22138: PPUSH
22139: CALL_OW 237
// end ;
22143: PPOPN 6
22145: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22146: LD_EXP 39
22150: PUSH
22151: LD_EXP 86
22155: AND
22156: IFFALSE 22235
22158: GO 22160
22160: DISABLE
22161: LD_INT 0
22163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22164: LD_ADDR_VAR 0 1
22168: PUSH
22169: LD_INT 22
22171: PUSH
22172: LD_OWVAR 2
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 30
22183: PUSH
22184: LD_INT 3
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PPUSH
22195: CALL_OW 69
22199: ST_TO_ADDR
// if not tmp then
22200: LD_VAR 0 1
22204: NOT
22205: IFFALSE 22209
// exit ;
22207: GO 22235
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22209: LD_VAR 0 1
22213: PUSH
22214: LD_INT 1
22216: PPUSH
22217: LD_VAR 0 1
22221: PPUSH
22222: CALL_OW 12
22226: ARRAY
22227: PPUSH
22228: LD_INT 1
22230: PPUSH
22231: CALL_OW 234
// end ;
22235: PPOPN 1
22237: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22238: LD_EXP 39
22242: PUSH
22243: LD_EXP 87
22247: AND
22248: IFFALSE 22360
22250: GO 22252
22252: DISABLE
22253: LD_INT 0
22255: PPUSH
22256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22257: LD_ADDR_VAR 0 2
22261: PUSH
22262: LD_INT 22
22264: PUSH
22265: LD_OWVAR 2
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 2
22276: PUSH
22277: LD_INT 30
22279: PUSH
22280: LD_INT 27
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 30
22289: PUSH
22290: LD_INT 26
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 30
22299: PUSH
22300: LD_INT 28
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PPUSH
22317: CALL_OW 69
22321: ST_TO_ADDR
// if not tmp then
22322: LD_VAR 0 2
22326: NOT
22327: IFFALSE 22331
// exit ;
22329: GO 22360
// for i in tmp do
22331: LD_ADDR_VAR 0 1
22335: PUSH
22336: LD_VAR 0 2
22340: PUSH
22341: FOR_IN
22342: IFFALSE 22358
// SetLives ( i , 1 ) ;
22344: LD_VAR 0 1
22348: PPUSH
22349: LD_INT 1
22351: PPUSH
22352: CALL_OW 234
22356: GO 22341
22358: POP
22359: POP
// end ;
22360: PPOPN 2
22362: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22363: LD_EXP 39
22367: PUSH
22368: LD_EXP 88
22372: AND
22373: IFFALSE 22647
22375: GO 22377
22377: DISABLE
22378: LD_INT 0
22380: PPUSH
22381: PPUSH
22382: PPUSH
// begin i := rand ( 1 , 7 ) ;
22383: LD_ADDR_VAR 0 1
22387: PUSH
22388: LD_INT 1
22390: PPUSH
22391: LD_INT 7
22393: PPUSH
22394: CALL_OW 12
22398: ST_TO_ADDR
// case i of 1 :
22399: LD_VAR 0 1
22403: PUSH
22404: LD_INT 1
22406: DOUBLE
22407: EQUAL
22408: IFTRUE 22412
22410: GO 22422
22412: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22413: LD_STRING earthquake(getX(game), 0, 32)
22415: PPUSH
22416: CALL_OW 559
22420: GO 22647
22422: LD_INT 2
22424: DOUBLE
22425: EQUAL
22426: IFTRUE 22430
22428: GO 22444
22430: POP
// begin ToLua ( displayStucuk(); ) ;
22431: LD_STRING displayStucuk();
22433: PPUSH
22434: CALL_OW 559
// ResetFog ;
22438: CALL_OW 335
// end ; 3 :
22442: GO 22647
22444: LD_INT 3
22446: DOUBLE
22447: EQUAL
22448: IFTRUE 22452
22450: GO 22556
22452: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22453: LD_ADDR_VAR 0 2
22457: PUSH
22458: LD_INT 22
22460: PUSH
22461: LD_OWVAR 2
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 25
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PPUSH
22484: CALL_OW 69
22488: ST_TO_ADDR
// if not tmp then
22489: LD_VAR 0 2
22493: NOT
22494: IFFALSE 22498
// exit ;
22496: GO 22647
// un := tmp [ rand ( 1 , tmp ) ] ;
22498: LD_ADDR_VAR 0 3
22502: PUSH
22503: LD_VAR 0 2
22507: PUSH
22508: LD_INT 1
22510: PPUSH
22511: LD_VAR 0 2
22515: PPUSH
22516: CALL_OW 12
22520: ARRAY
22521: ST_TO_ADDR
// if Crawls ( un ) then
22522: LD_VAR 0 3
22526: PPUSH
22527: CALL_OW 318
22531: IFFALSE 22542
// ComWalk ( un ) ;
22533: LD_VAR 0 3
22537: PPUSH
22538: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22542: LD_VAR 0 3
22546: PPUSH
22547: LD_INT 8
22549: PPUSH
22550: CALL_OW 336
// end ; 4 :
22554: GO 22647
22556: LD_INT 4
22558: DOUBLE
22559: EQUAL
22560: IFTRUE 22564
22562: GO 22625
22564: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22565: LD_ADDR_VAR 0 2
22569: PUSH
22570: LD_INT 22
22572: PUSH
22573: LD_OWVAR 2
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 30
22584: PUSH
22585: LD_INT 29
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PPUSH
22596: CALL_OW 69
22600: ST_TO_ADDR
// if not tmp then
22601: LD_VAR 0 2
22605: NOT
22606: IFFALSE 22610
// exit ;
22608: GO 22647
// DestroyUnit ( tmp [ 1 ] ) ;
22610: LD_VAR 0 2
22614: PUSH
22615: LD_INT 1
22617: ARRAY
22618: PPUSH
22619: CALL_OW 65
// end ; 5 .. 7 :
22623: GO 22647
22625: LD_INT 5
22627: DOUBLE
22628: GREATEREQUAL
22629: IFFALSE 22637
22631: LD_INT 7
22633: DOUBLE
22634: LESSEQUAL
22635: IFTRUE 22639
22637: GO 22646
22639: POP
// StreamSibBomb ; end ;
22640: CALL 18897 0 0
22644: GO 22647
22646: POP
// end ;
22647: PPOPN 3
22649: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22650: LD_EXP 39
22654: PUSH
22655: LD_EXP 89
22659: AND
22660: IFFALSE 22816
22662: GO 22664
22664: DISABLE
22665: LD_INT 0
22667: PPUSH
22668: PPUSH
22669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22670: LD_ADDR_VAR 0 2
22674: PUSH
22675: LD_INT 81
22677: PUSH
22678: LD_OWVAR 2
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: LD_INT 21
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 21
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PPUSH
22719: CALL_OW 69
22723: ST_TO_ADDR
// if not tmp then
22724: LD_VAR 0 2
22728: NOT
22729: IFFALSE 22733
// exit ;
22731: GO 22816
// p := 0 ;
22733: LD_ADDR_VAR 0 3
22737: PUSH
22738: LD_INT 0
22740: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22741: LD_INT 35
22743: PPUSH
22744: CALL_OW 67
// p := p + 1 ;
22748: LD_ADDR_VAR 0 3
22752: PUSH
22753: LD_VAR 0 3
22757: PUSH
22758: LD_INT 1
22760: PLUS
22761: ST_TO_ADDR
// for i in tmp do
22762: LD_ADDR_VAR 0 1
22766: PUSH
22767: LD_VAR 0 2
22771: PUSH
22772: FOR_IN
22773: IFFALSE 22804
// if GetLives ( i ) < 1000 then
22775: LD_VAR 0 1
22779: PPUSH
22780: CALL_OW 256
22784: PUSH
22785: LD_INT 1000
22787: LESS
22788: IFFALSE 22802
// SetLives ( i , 1000 ) ;
22790: LD_VAR 0 1
22794: PPUSH
22795: LD_INT 1000
22797: PPUSH
22798: CALL_OW 234
22802: GO 22772
22804: POP
22805: POP
// until p > 20 ;
22806: LD_VAR 0 3
22810: PUSH
22811: LD_INT 20
22813: GREATER
22814: IFFALSE 22741
// end ;
22816: PPOPN 3
22818: END
// every 0 0$1 trigger StreamModeActive and sTime do
22819: LD_EXP 39
22823: PUSH
22824: LD_EXP 90
22828: AND
22829: IFFALSE 22864
22831: GO 22833
22833: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22834: LD_INT 28
22836: PPUSH
22837: LD_OWVAR 2
22841: PPUSH
22842: LD_INT 2
22844: PPUSH
22845: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22849: LD_INT 30
22851: PPUSH
22852: LD_OWVAR 2
22856: PPUSH
22857: LD_INT 2
22859: PPUSH
22860: CALL_OW 322
// end ;
22864: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22865: LD_EXP 39
22869: PUSH
22870: LD_EXP 91
22874: AND
22875: IFFALSE 22996
22877: GO 22879
22879: DISABLE
22880: LD_INT 0
22882: PPUSH
22883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22884: LD_ADDR_VAR 0 2
22888: PUSH
22889: LD_INT 22
22891: PUSH
22892: LD_OWVAR 2
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 21
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 3
22913: PUSH
22914: LD_INT 23
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: PPUSH
22933: CALL_OW 69
22937: ST_TO_ADDR
// if not tmp then
22938: LD_VAR 0 2
22942: NOT
22943: IFFALSE 22947
// exit ;
22945: GO 22996
// for i in tmp do
22947: LD_ADDR_VAR 0 1
22951: PUSH
22952: LD_VAR 0 2
22956: PUSH
22957: FOR_IN
22958: IFFALSE 22994
// begin if Crawls ( i ) then
22960: LD_VAR 0 1
22964: PPUSH
22965: CALL_OW 318
22969: IFFALSE 22980
// ComWalk ( i ) ;
22971: LD_VAR 0 1
22975: PPUSH
22976: CALL_OW 138
// SetClass ( i , 2 ) ;
22980: LD_VAR 0 1
22984: PPUSH
22985: LD_INT 2
22987: PPUSH
22988: CALL_OW 336
// end ;
22992: GO 22957
22994: POP
22995: POP
// end ;
22996: PPOPN 2
22998: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22999: LD_EXP 39
23003: PUSH
23004: LD_EXP 92
23008: AND
23009: IFFALSE 23290
23011: GO 23013
23013: DISABLE
23014: LD_INT 0
23016: PPUSH
23017: PPUSH
23018: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23019: LD_OWVAR 2
23023: PPUSH
23024: LD_INT 9
23026: PPUSH
23027: LD_INT 1
23029: PPUSH
23030: LD_INT 1
23032: PPUSH
23033: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23037: LD_INT 9
23039: PPUSH
23040: LD_OWVAR 2
23044: PPUSH
23045: CALL_OW 343
// uc_side := 9 ;
23049: LD_ADDR_OWVAR 20
23053: PUSH
23054: LD_INT 9
23056: ST_TO_ADDR
// uc_nation := 2 ;
23057: LD_ADDR_OWVAR 21
23061: PUSH
23062: LD_INT 2
23064: ST_TO_ADDR
// hc_name := Dark Warrior ;
23065: LD_ADDR_OWVAR 26
23069: PUSH
23070: LD_STRING Dark Warrior
23072: ST_TO_ADDR
// hc_gallery :=  ;
23073: LD_ADDR_OWVAR 33
23077: PUSH
23078: LD_STRING 
23080: ST_TO_ADDR
// hc_noskilllimit := true ;
23081: LD_ADDR_OWVAR 76
23085: PUSH
23086: LD_INT 1
23088: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23089: LD_ADDR_OWVAR 31
23093: PUSH
23094: LD_INT 30
23096: PUSH
23097: LD_INT 30
23099: PUSH
23100: LD_INT 30
23102: PUSH
23103: LD_INT 30
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: ST_TO_ADDR
// un := CreateHuman ;
23112: LD_ADDR_VAR 0 3
23116: PUSH
23117: CALL_OW 44
23121: ST_TO_ADDR
// hc_noskilllimit := false ;
23122: LD_ADDR_OWVAR 76
23126: PUSH
23127: LD_INT 0
23129: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23130: LD_VAR 0 3
23134: PPUSH
23135: LD_INT 1
23137: PPUSH
23138: CALL_OW 51
// p := 0 ;
23142: LD_ADDR_VAR 0 2
23146: PUSH
23147: LD_INT 0
23149: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23150: LD_INT 35
23152: PPUSH
23153: CALL_OW 67
// p := p + 1 ;
23157: LD_ADDR_VAR 0 2
23161: PUSH
23162: LD_VAR 0 2
23166: PUSH
23167: LD_INT 1
23169: PLUS
23170: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23171: LD_VAR 0 3
23175: PPUSH
23176: CALL_OW 256
23180: PUSH
23181: LD_INT 1000
23183: LESS
23184: IFFALSE 23198
// SetLives ( un , 1000 ) ;
23186: LD_VAR 0 3
23190: PPUSH
23191: LD_INT 1000
23193: PPUSH
23194: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23198: LD_VAR 0 3
23202: PPUSH
23203: LD_INT 81
23205: PUSH
23206: LD_OWVAR 2
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 91
23217: PUSH
23218: LD_VAR 0 3
23222: PUSH
23223: LD_INT 30
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PPUSH
23235: CALL_OW 69
23239: PPUSH
23240: LD_VAR 0 3
23244: PPUSH
23245: CALL_OW 74
23249: PPUSH
23250: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23254: LD_VAR 0 2
23258: PUSH
23259: LD_INT 60
23261: GREATER
23262: PUSH
23263: LD_VAR 0 3
23267: PPUSH
23268: CALL_OW 301
23272: OR
23273: IFFALSE 23150
// if un then
23275: LD_VAR 0 3
23279: IFFALSE 23290
// RemoveUnit ( un ) ;
23281: LD_VAR 0 3
23285: PPUSH
23286: CALL_OW 64
// end ;
23290: PPOPN 3
23292: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23293: LD_INT 0
23295: PPUSH
// case cmd of 301 :
23296: LD_VAR 0 1
23300: PUSH
23301: LD_INT 301
23303: DOUBLE
23304: EQUAL
23305: IFTRUE 23309
23307: GO 23341
23309: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23310: LD_VAR 0 6
23314: PPUSH
23315: LD_VAR 0 7
23319: PPUSH
23320: LD_VAR 0 8
23324: PPUSH
23325: LD_VAR 0 4
23329: PPUSH
23330: LD_VAR 0 5
23334: PPUSH
23335: CALL 24542 0 5
23339: GO 23462
23341: LD_INT 302
23343: DOUBLE
23344: EQUAL
23345: IFTRUE 23349
23347: GO 23386
23349: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23350: LD_VAR 0 6
23354: PPUSH
23355: LD_VAR 0 7
23359: PPUSH
23360: LD_VAR 0 8
23364: PPUSH
23365: LD_VAR 0 9
23369: PPUSH
23370: LD_VAR 0 4
23374: PPUSH
23375: LD_VAR 0 5
23379: PPUSH
23380: CALL 24633 0 6
23384: GO 23462
23386: LD_INT 303
23388: DOUBLE
23389: EQUAL
23390: IFTRUE 23394
23392: GO 23431
23394: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23395: LD_VAR 0 6
23399: PPUSH
23400: LD_VAR 0 7
23404: PPUSH
23405: LD_VAR 0 8
23409: PPUSH
23410: LD_VAR 0 9
23414: PPUSH
23415: LD_VAR 0 4
23419: PPUSH
23420: LD_VAR 0 5
23424: PPUSH
23425: CALL 23467 0 6
23429: GO 23462
23431: LD_INT 304
23433: DOUBLE
23434: EQUAL
23435: IFTRUE 23439
23437: GO 23461
23439: POP
// hHackTeleport ( unit , x , y ) ; end ;
23440: LD_VAR 0 2
23444: PPUSH
23445: LD_VAR 0 4
23449: PPUSH
23450: LD_VAR 0 5
23454: PPUSH
23455: CALL 25226 0 3
23459: GO 23462
23461: POP
// end ;
23462: LD_VAR 0 12
23466: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23467: LD_INT 0
23469: PPUSH
23470: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23471: LD_VAR 0 1
23475: PUSH
23476: LD_INT 1
23478: LESS
23479: PUSH
23480: LD_VAR 0 1
23484: PUSH
23485: LD_INT 3
23487: GREATER
23488: OR
23489: PUSH
23490: LD_VAR 0 5
23494: PPUSH
23495: LD_VAR 0 6
23499: PPUSH
23500: CALL_OW 428
23504: OR
23505: IFFALSE 23509
// exit ;
23507: GO 24229
// uc_side := your_side ;
23509: LD_ADDR_OWVAR 20
23513: PUSH
23514: LD_OWVAR 2
23518: ST_TO_ADDR
// uc_nation := nation ;
23519: LD_ADDR_OWVAR 21
23523: PUSH
23524: LD_VAR 0 1
23528: ST_TO_ADDR
// bc_level = 1 ;
23529: LD_ADDR_OWVAR 43
23533: PUSH
23534: LD_INT 1
23536: ST_TO_ADDR
// case btype of 1 :
23537: LD_VAR 0 2
23541: PUSH
23542: LD_INT 1
23544: DOUBLE
23545: EQUAL
23546: IFTRUE 23550
23548: GO 23561
23550: POP
// bc_type := b_depot ; 2 :
23551: LD_ADDR_OWVAR 42
23555: PUSH
23556: LD_INT 0
23558: ST_TO_ADDR
23559: GO 24173
23561: LD_INT 2
23563: DOUBLE
23564: EQUAL
23565: IFTRUE 23569
23567: GO 23580
23569: POP
// bc_type := b_warehouse ; 3 :
23570: LD_ADDR_OWVAR 42
23574: PUSH
23575: LD_INT 1
23577: ST_TO_ADDR
23578: GO 24173
23580: LD_INT 3
23582: DOUBLE
23583: EQUAL
23584: IFTRUE 23588
23586: GO 23599
23588: POP
// bc_type := b_lab ; 4 .. 9 :
23589: LD_ADDR_OWVAR 42
23593: PUSH
23594: LD_INT 6
23596: ST_TO_ADDR
23597: GO 24173
23599: LD_INT 4
23601: DOUBLE
23602: GREATEREQUAL
23603: IFFALSE 23611
23605: LD_INT 9
23607: DOUBLE
23608: LESSEQUAL
23609: IFTRUE 23613
23611: GO 23665
23613: POP
// begin bc_type := b_lab_half ;
23614: LD_ADDR_OWVAR 42
23618: PUSH
23619: LD_INT 7
23621: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23622: LD_ADDR_OWVAR 44
23626: PUSH
23627: LD_INT 10
23629: PUSH
23630: LD_INT 11
23632: PUSH
23633: LD_INT 12
23635: PUSH
23636: LD_INT 15
23638: PUSH
23639: LD_INT 14
23641: PUSH
23642: LD_INT 13
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: PUSH
23653: LD_VAR 0 2
23657: PUSH
23658: LD_INT 3
23660: MINUS
23661: ARRAY
23662: ST_TO_ADDR
// end ; 10 .. 13 :
23663: GO 24173
23665: LD_INT 10
23667: DOUBLE
23668: GREATEREQUAL
23669: IFFALSE 23677
23671: LD_INT 13
23673: DOUBLE
23674: LESSEQUAL
23675: IFTRUE 23679
23677: GO 23756
23679: POP
// begin bc_type := b_lab_full ;
23680: LD_ADDR_OWVAR 42
23684: PUSH
23685: LD_INT 8
23687: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23688: LD_ADDR_OWVAR 44
23692: PUSH
23693: LD_INT 10
23695: PUSH
23696: LD_INT 12
23698: PUSH
23699: LD_INT 14
23701: PUSH
23702: LD_INT 13
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: PUSH
23711: LD_VAR 0 2
23715: PUSH
23716: LD_INT 9
23718: MINUS
23719: ARRAY
23720: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23721: LD_ADDR_OWVAR 45
23725: PUSH
23726: LD_INT 11
23728: PUSH
23729: LD_INT 15
23731: PUSH
23732: LD_INT 12
23734: PUSH
23735: LD_INT 15
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: PUSH
23744: LD_VAR 0 2
23748: PUSH
23749: LD_INT 9
23751: MINUS
23752: ARRAY
23753: ST_TO_ADDR
// end ; 14 :
23754: GO 24173
23756: LD_INT 14
23758: DOUBLE
23759: EQUAL
23760: IFTRUE 23764
23762: GO 23775
23764: POP
// bc_type := b_workshop ; 15 :
23765: LD_ADDR_OWVAR 42
23769: PUSH
23770: LD_INT 2
23772: ST_TO_ADDR
23773: GO 24173
23775: LD_INT 15
23777: DOUBLE
23778: EQUAL
23779: IFTRUE 23783
23781: GO 23794
23783: POP
// bc_type := b_factory ; 16 :
23784: LD_ADDR_OWVAR 42
23788: PUSH
23789: LD_INT 3
23791: ST_TO_ADDR
23792: GO 24173
23794: LD_INT 16
23796: DOUBLE
23797: EQUAL
23798: IFTRUE 23802
23800: GO 23813
23802: POP
// bc_type := b_ext_gun ; 17 :
23803: LD_ADDR_OWVAR 42
23807: PUSH
23808: LD_INT 17
23810: ST_TO_ADDR
23811: GO 24173
23813: LD_INT 17
23815: DOUBLE
23816: EQUAL
23817: IFTRUE 23821
23819: GO 23849
23821: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23822: LD_ADDR_OWVAR 42
23826: PUSH
23827: LD_INT 19
23829: PUSH
23830: LD_INT 23
23832: PUSH
23833: LD_INT 19
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: LIST
23840: PUSH
23841: LD_VAR 0 1
23845: ARRAY
23846: ST_TO_ADDR
23847: GO 24173
23849: LD_INT 18
23851: DOUBLE
23852: EQUAL
23853: IFTRUE 23857
23855: GO 23868
23857: POP
// bc_type := b_ext_radar ; 19 :
23858: LD_ADDR_OWVAR 42
23862: PUSH
23863: LD_INT 20
23865: ST_TO_ADDR
23866: GO 24173
23868: LD_INT 19
23870: DOUBLE
23871: EQUAL
23872: IFTRUE 23876
23874: GO 23887
23876: POP
// bc_type := b_ext_radio ; 20 :
23877: LD_ADDR_OWVAR 42
23881: PUSH
23882: LD_INT 22
23884: ST_TO_ADDR
23885: GO 24173
23887: LD_INT 20
23889: DOUBLE
23890: EQUAL
23891: IFTRUE 23895
23893: GO 23906
23895: POP
// bc_type := b_ext_siberium ; 21 :
23896: LD_ADDR_OWVAR 42
23900: PUSH
23901: LD_INT 21
23903: ST_TO_ADDR
23904: GO 24173
23906: LD_INT 21
23908: DOUBLE
23909: EQUAL
23910: IFTRUE 23914
23912: GO 23925
23914: POP
// bc_type := b_ext_computer ; 22 :
23915: LD_ADDR_OWVAR 42
23919: PUSH
23920: LD_INT 24
23922: ST_TO_ADDR
23923: GO 24173
23925: LD_INT 22
23927: DOUBLE
23928: EQUAL
23929: IFTRUE 23933
23931: GO 23944
23933: POP
// bc_type := b_ext_track ; 23 :
23934: LD_ADDR_OWVAR 42
23938: PUSH
23939: LD_INT 16
23941: ST_TO_ADDR
23942: GO 24173
23944: LD_INT 23
23946: DOUBLE
23947: EQUAL
23948: IFTRUE 23952
23950: GO 23963
23952: POP
// bc_type := b_ext_laser ; 24 :
23953: LD_ADDR_OWVAR 42
23957: PUSH
23958: LD_INT 25
23960: ST_TO_ADDR
23961: GO 24173
23963: LD_INT 24
23965: DOUBLE
23966: EQUAL
23967: IFTRUE 23971
23969: GO 23982
23971: POP
// bc_type := b_control_tower ; 25 :
23972: LD_ADDR_OWVAR 42
23976: PUSH
23977: LD_INT 36
23979: ST_TO_ADDR
23980: GO 24173
23982: LD_INT 25
23984: DOUBLE
23985: EQUAL
23986: IFTRUE 23990
23988: GO 24001
23990: POP
// bc_type := b_breastwork ; 26 :
23991: LD_ADDR_OWVAR 42
23995: PUSH
23996: LD_INT 31
23998: ST_TO_ADDR
23999: GO 24173
24001: LD_INT 26
24003: DOUBLE
24004: EQUAL
24005: IFTRUE 24009
24007: GO 24020
24009: POP
// bc_type := b_bunker ; 27 :
24010: LD_ADDR_OWVAR 42
24014: PUSH
24015: LD_INT 32
24017: ST_TO_ADDR
24018: GO 24173
24020: LD_INT 27
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24039
24028: POP
// bc_type := b_turret ; 28 :
24029: LD_ADDR_OWVAR 42
24033: PUSH
24034: LD_INT 33
24036: ST_TO_ADDR
24037: GO 24173
24039: LD_INT 28
24041: DOUBLE
24042: EQUAL
24043: IFTRUE 24047
24045: GO 24058
24047: POP
// bc_type := b_armoury ; 29 :
24048: LD_ADDR_OWVAR 42
24052: PUSH
24053: LD_INT 4
24055: ST_TO_ADDR
24056: GO 24173
24058: LD_INT 29
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24066
24064: GO 24077
24066: POP
// bc_type := b_barracks ; 30 :
24067: LD_ADDR_OWVAR 42
24071: PUSH
24072: LD_INT 5
24074: ST_TO_ADDR
24075: GO 24173
24077: LD_INT 30
24079: DOUBLE
24080: EQUAL
24081: IFTRUE 24085
24083: GO 24096
24085: POP
// bc_type := b_solar_power ; 31 :
24086: LD_ADDR_OWVAR 42
24090: PUSH
24091: LD_INT 27
24093: ST_TO_ADDR
24094: GO 24173
24096: LD_INT 31
24098: DOUBLE
24099: EQUAL
24100: IFTRUE 24104
24102: GO 24115
24104: POP
// bc_type := b_oil_power ; 32 :
24105: LD_ADDR_OWVAR 42
24109: PUSH
24110: LD_INT 26
24112: ST_TO_ADDR
24113: GO 24173
24115: LD_INT 32
24117: DOUBLE
24118: EQUAL
24119: IFTRUE 24123
24121: GO 24134
24123: POP
// bc_type := b_siberite_power ; 33 :
24124: LD_ADDR_OWVAR 42
24128: PUSH
24129: LD_INT 28
24131: ST_TO_ADDR
24132: GO 24173
24134: LD_INT 33
24136: DOUBLE
24137: EQUAL
24138: IFTRUE 24142
24140: GO 24153
24142: POP
// bc_type := b_oil_mine ; 34 :
24143: LD_ADDR_OWVAR 42
24147: PUSH
24148: LD_INT 29
24150: ST_TO_ADDR
24151: GO 24173
24153: LD_INT 34
24155: DOUBLE
24156: EQUAL
24157: IFTRUE 24161
24159: GO 24172
24161: POP
// bc_type := b_siberite_mine ; end ;
24162: LD_ADDR_OWVAR 42
24166: PUSH
24167: LD_INT 30
24169: ST_TO_ADDR
24170: GO 24173
24172: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24173: LD_ADDR_VAR 0 8
24177: PUSH
24178: LD_VAR 0 5
24182: PPUSH
24183: LD_VAR 0 6
24187: PPUSH
24188: LD_VAR 0 3
24192: PPUSH
24193: CALL_OW 47
24197: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24198: LD_OWVAR 42
24202: PUSH
24203: LD_INT 32
24205: PUSH
24206: LD_INT 33
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: IN
24213: IFFALSE 24229
// PlaceWeaponTurret ( b , weapon ) ;
24215: LD_VAR 0 8
24219: PPUSH
24220: LD_VAR 0 4
24224: PPUSH
24225: CALL_OW 431
// end ;
24229: LD_VAR 0 7
24233: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24234: LD_INT 0
24236: PPUSH
24237: PPUSH
24238: PPUSH
24239: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24240: LD_ADDR_VAR 0 4
24244: PUSH
24245: LD_INT 22
24247: PUSH
24248: LD_OWVAR 2
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 2
24259: PUSH
24260: LD_INT 30
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 30
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PPUSH
24289: CALL_OW 69
24293: ST_TO_ADDR
// if not tmp then
24294: LD_VAR 0 4
24298: NOT
24299: IFFALSE 24303
// exit ;
24301: GO 24362
// for i in tmp do
24303: LD_ADDR_VAR 0 2
24307: PUSH
24308: LD_VAR 0 4
24312: PUSH
24313: FOR_IN
24314: IFFALSE 24360
// for j = 1 to 3 do
24316: LD_ADDR_VAR 0 3
24320: PUSH
24321: DOUBLE
24322: LD_INT 1
24324: DEC
24325: ST_TO_ADDR
24326: LD_INT 3
24328: PUSH
24329: FOR_TO
24330: IFFALSE 24356
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24332: LD_VAR 0 2
24336: PPUSH
24337: CALL_OW 274
24341: PPUSH
24342: LD_VAR 0 3
24346: PPUSH
24347: LD_INT 99999
24349: PPUSH
24350: CALL_OW 277
24354: GO 24329
24356: POP
24357: POP
24358: GO 24313
24360: POP
24361: POP
// end ;
24362: LD_VAR 0 1
24366: RET
// export function hHackSetLevel10 ; var i , j ; begin
24367: LD_INT 0
24369: PPUSH
24370: PPUSH
24371: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24372: LD_ADDR_VAR 0 2
24376: PUSH
24377: LD_INT 21
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PPUSH
24387: CALL_OW 69
24391: PUSH
24392: FOR_IN
24393: IFFALSE 24445
// if IsSelected ( i ) then
24395: LD_VAR 0 2
24399: PPUSH
24400: CALL_OW 306
24404: IFFALSE 24443
// begin for j := 1 to 4 do
24406: LD_ADDR_VAR 0 3
24410: PUSH
24411: DOUBLE
24412: LD_INT 1
24414: DEC
24415: ST_TO_ADDR
24416: LD_INT 4
24418: PUSH
24419: FOR_TO
24420: IFFALSE 24441
// SetSkill ( i , j , 10 ) ;
24422: LD_VAR 0 2
24426: PPUSH
24427: LD_VAR 0 3
24431: PPUSH
24432: LD_INT 10
24434: PPUSH
24435: CALL_OW 237
24439: GO 24419
24441: POP
24442: POP
// end ;
24443: GO 24392
24445: POP
24446: POP
// end ;
24447: LD_VAR 0 1
24451: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24452: LD_INT 0
24454: PPUSH
24455: PPUSH
24456: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24457: LD_ADDR_VAR 0 2
24461: PUSH
24462: LD_INT 22
24464: PUSH
24465: LD_OWVAR 2
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 21
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PPUSH
24488: CALL_OW 69
24492: PUSH
24493: FOR_IN
24494: IFFALSE 24535
// begin for j := 1 to 4 do
24496: LD_ADDR_VAR 0 3
24500: PUSH
24501: DOUBLE
24502: LD_INT 1
24504: DEC
24505: ST_TO_ADDR
24506: LD_INT 4
24508: PUSH
24509: FOR_TO
24510: IFFALSE 24531
// SetSkill ( i , j , 10 ) ;
24512: LD_VAR 0 2
24516: PPUSH
24517: LD_VAR 0 3
24521: PPUSH
24522: LD_INT 10
24524: PPUSH
24525: CALL_OW 237
24529: GO 24509
24531: POP
24532: POP
// end ;
24533: GO 24493
24535: POP
24536: POP
// end ;
24537: LD_VAR 0 1
24541: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24542: LD_INT 0
24544: PPUSH
// uc_side := your_side ;
24545: LD_ADDR_OWVAR 20
24549: PUSH
24550: LD_OWVAR 2
24554: ST_TO_ADDR
// uc_nation := nation ;
24555: LD_ADDR_OWVAR 21
24559: PUSH
24560: LD_VAR 0 1
24564: ST_TO_ADDR
// InitHc ;
24565: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24569: LD_INT 0
24571: PPUSH
24572: LD_VAR 0 2
24576: PPUSH
24577: LD_VAR 0 3
24581: PPUSH
24582: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24586: LD_VAR 0 4
24590: PPUSH
24591: LD_VAR 0 5
24595: PPUSH
24596: CALL_OW 428
24600: PUSH
24601: LD_INT 0
24603: EQUAL
24604: IFFALSE 24628
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24606: CALL_OW 44
24610: PPUSH
24611: LD_VAR 0 4
24615: PPUSH
24616: LD_VAR 0 5
24620: PPUSH
24621: LD_INT 1
24623: PPUSH
24624: CALL_OW 48
// end ;
24628: LD_VAR 0 6
24632: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24633: LD_INT 0
24635: PPUSH
24636: PPUSH
// uc_side := your_side ;
24637: LD_ADDR_OWVAR 20
24641: PUSH
24642: LD_OWVAR 2
24646: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24647: LD_VAR 0 1
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: LD_INT 3
24660: PUSH
24661: LD_INT 4
24663: PUSH
24664: LD_INT 5
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: IN
24674: IFFALSE 24686
// uc_nation := nation_american else
24676: LD_ADDR_OWVAR 21
24680: PUSH
24681: LD_INT 1
24683: ST_TO_ADDR
24684: GO 24729
// if chassis in [ 11 , 12 , 13 , 14 ] then
24686: LD_VAR 0 1
24690: PUSH
24691: LD_INT 11
24693: PUSH
24694: LD_INT 12
24696: PUSH
24697: LD_INT 13
24699: PUSH
24700: LD_INT 14
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: IN
24709: IFFALSE 24721
// uc_nation := nation_arabian else
24711: LD_ADDR_OWVAR 21
24715: PUSH
24716: LD_INT 2
24718: ST_TO_ADDR
24719: GO 24729
// uc_nation := nation_russian ;
24721: LD_ADDR_OWVAR 21
24725: PUSH
24726: LD_INT 3
24728: ST_TO_ADDR
// vc_chassis := chassis ;
24729: LD_ADDR_OWVAR 37
24733: PUSH
24734: LD_VAR 0 1
24738: ST_TO_ADDR
// vc_engine := engine ;
24739: LD_ADDR_OWVAR 39
24743: PUSH
24744: LD_VAR 0 2
24748: ST_TO_ADDR
// vc_control := control ;
24749: LD_ADDR_OWVAR 38
24753: PUSH
24754: LD_VAR 0 3
24758: ST_TO_ADDR
// vc_weapon := weapon ;
24759: LD_ADDR_OWVAR 40
24763: PUSH
24764: LD_VAR 0 4
24768: ST_TO_ADDR
// un := CreateVehicle ;
24769: LD_ADDR_VAR 0 8
24773: PUSH
24774: CALL_OW 45
24778: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24779: LD_VAR 0 8
24783: PPUSH
24784: LD_INT 0
24786: PPUSH
24787: LD_INT 5
24789: PPUSH
24790: CALL_OW 12
24794: PPUSH
24795: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24799: LD_VAR 0 8
24803: PPUSH
24804: LD_VAR 0 5
24808: PPUSH
24809: LD_VAR 0 6
24813: PPUSH
24814: LD_INT 1
24816: PPUSH
24817: CALL_OW 48
// end ;
24821: LD_VAR 0 7
24825: RET
// export hInvincible ; every 1 do
24826: GO 24828
24828: DISABLE
// hInvincible := [ ] ;
24829: LD_ADDR_EXP 93
24833: PUSH
24834: EMPTY
24835: ST_TO_ADDR
24836: END
// every 10 do var i ;
24837: GO 24839
24839: DISABLE
24840: LD_INT 0
24842: PPUSH
// begin enable ;
24843: ENABLE
// if not hInvincible then
24844: LD_EXP 93
24848: NOT
24849: IFFALSE 24853
// exit ;
24851: GO 24897
// for i in hInvincible do
24853: LD_ADDR_VAR 0 1
24857: PUSH
24858: LD_EXP 93
24862: PUSH
24863: FOR_IN
24864: IFFALSE 24895
// if GetLives ( i ) < 1000 then
24866: LD_VAR 0 1
24870: PPUSH
24871: CALL_OW 256
24875: PUSH
24876: LD_INT 1000
24878: LESS
24879: IFFALSE 24893
// SetLives ( i , 1000 ) ;
24881: LD_VAR 0 1
24885: PPUSH
24886: LD_INT 1000
24888: PPUSH
24889: CALL_OW 234
24893: GO 24863
24895: POP
24896: POP
// end ;
24897: PPOPN 1
24899: END
// export function hHackInvincible ; var i ; begin
24900: LD_INT 0
24902: PPUSH
24903: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24904: LD_ADDR_VAR 0 2
24908: PUSH
24909: LD_INT 2
24911: PUSH
24912: LD_INT 21
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 21
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: LIST
24936: PPUSH
24937: CALL_OW 69
24941: PUSH
24942: FOR_IN
24943: IFFALSE 25004
// if IsSelected ( i ) then
24945: LD_VAR 0 2
24949: PPUSH
24950: CALL_OW 306
24954: IFFALSE 25002
// begin if i in hInvincible then
24956: LD_VAR 0 2
24960: PUSH
24961: LD_EXP 93
24965: IN
24966: IFFALSE 24986
// hInvincible := hInvincible diff i else
24968: LD_ADDR_EXP 93
24972: PUSH
24973: LD_EXP 93
24977: PUSH
24978: LD_VAR 0 2
24982: DIFF
24983: ST_TO_ADDR
24984: GO 25002
// hInvincible := hInvincible union i ;
24986: LD_ADDR_EXP 93
24990: PUSH
24991: LD_EXP 93
24995: PUSH
24996: LD_VAR 0 2
25000: UNION
25001: ST_TO_ADDR
// end ;
25002: GO 24942
25004: POP
25005: POP
// end ;
25006: LD_VAR 0 1
25010: RET
// export function hHackInvisible ; var i , j ; begin
25011: LD_INT 0
25013: PPUSH
25014: PPUSH
25015: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25016: LD_ADDR_VAR 0 2
25020: PUSH
25021: LD_INT 21
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PPUSH
25031: CALL_OW 69
25035: PUSH
25036: FOR_IN
25037: IFFALSE 25061
// if IsSelected ( i ) then
25039: LD_VAR 0 2
25043: PPUSH
25044: CALL_OW 306
25048: IFFALSE 25059
// ComForceInvisible ( i ) ;
25050: LD_VAR 0 2
25054: PPUSH
25055: CALL_OW 496
25059: GO 25036
25061: POP
25062: POP
// end ;
25063: LD_VAR 0 1
25067: RET
// export function hHackChangeYourSide ; begin
25068: LD_INT 0
25070: PPUSH
// if your_side = 8 then
25071: LD_OWVAR 2
25075: PUSH
25076: LD_INT 8
25078: EQUAL
25079: IFFALSE 25091
// your_side := 0 else
25081: LD_ADDR_OWVAR 2
25085: PUSH
25086: LD_INT 0
25088: ST_TO_ADDR
25089: GO 25105
// your_side := your_side + 1 ;
25091: LD_ADDR_OWVAR 2
25095: PUSH
25096: LD_OWVAR 2
25100: PUSH
25101: LD_INT 1
25103: PLUS
25104: ST_TO_ADDR
// end ;
25105: LD_VAR 0 1
25109: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25110: LD_INT 0
25112: PPUSH
25113: PPUSH
25114: PPUSH
// for i in all_units do
25115: LD_ADDR_VAR 0 2
25119: PUSH
25120: LD_OWVAR 3
25124: PUSH
25125: FOR_IN
25126: IFFALSE 25204
// if IsSelected ( i ) then
25128: LD_VAR 0 2
25132: PPUSH
25133: CALL_OW 306
25137: IFFALSE 25202
// begin j := GetSide ( i ) ;
25139: LD_ADDR_VAR 0 3
25143: PUSH
25144: LD_VAR 0 2
25148: PPUSH
25149: CALL_OW 255
25153: ST_TO_ADDR
// if j = 8 then
25154: LD_VAR 0 3
25158: PUSH
25159: LD_INT 8
25161: EQUAL
25162: IFFALSE 25174
// j := 0 else
25164: LD_ADDR_VAR 0 3
25168: PUSH
25169: LD_INT 0
25171: ST_TO_ADDR
25172: GO 25188
// j := j + 1 ;
25174: LD_ADDR_VAR 0 3
25178: PUSH
25179: LD_VAR 0 3
25183: PUSH
25184: LD_INT 1
25186: PLUS
25187: ST_TO_ADDR
// SetSide ( i , j ) ;
25188: LD_VAR 0 2
25192: PPUSH
25193: LD_VAR 0 3
25197: PPUSH
25198: CALL_OW 235
// end ;
25202: GO 25125
25204: POP
25205: POP
// end ;
25206: LD_VAR 0 1
25210: RET
// export function hHackFog ; begin
25211: LD_INT 0
25213: PPUSH
// FogOff ( true ) ;
25214: LD_INT 1
25216: PPUSH
25217: CALL_OW 344
// end ;
25221: LD_VAR 0 1
25225: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25226: LD_INT 0
25228: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25229: LD_VAR 0 1
25233: PPUSH
25234: LD_VAR 0 2
25238: PPUSH
25239: LD_VAR 0 3
25243: PPUSH
25244: LD_INT 1
25246: PPUSH
25247: LD_INT 1
25249: PPUSH
25250: CALL_OW 483
// CenterOnXY ( x , y ) ;
25254: LD_VAR 0 2
25258: PPUSH
25259: LD_VAR 0 3
25263: PPUSH
25264: CALL_OW 84
// end ; end_of_file
25268: LD_VAR 0 4
25272: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25273: LD_INT 0
25275: PPUSH
25276: PPUSH
25277: PPUSH
25278: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25279: LD_VAR 0 1
25283: PPUSH
25284: CALL_OW 264
25288: PUSH
25289: LD_EXP 25
25293: EQUAL
25294: IFFALSE 25366
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25296: LD_INT 68
25298: PPUSH
25299: LD_VAR 0 1
25303: PPUSH
25304: CALL_OW 255
25308: PPUSH
25309: CALL_OW 321
25313: PUSH
25314: LD_INT 2
25316: EQUAL
25317: IFFALSE 25329
// eff := 70 else
25319: LD_ADDR_VAR 0 4
25323: PUSH
25324: LD_INT 70
25326: ST_TO_ADDR
25327: GO 25337
// eff := 30 ;
25329: LD_ADDR_VAR 0 4
25333: PUSH
25334: LD_INT 30
25336: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25337: LD_VAR 0 1
25341: PPUSH
25342: CALL_OW 250
25346: PPUSH
25347: LD_VAR 0 1
25351: PPUSH
25352: CALL_OW 251
25356: PPUSH
25357: LD_VAR 0 4
25361: PPUSH
25362: CALL_OW 495
// end ; end ;
25366: LD_VAR 0 2
25370: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25371: LD_INT 0
25373: PPUSH
// end ;
25374: LD_VAR 0 4
25378: RET
// export function SOS_Command ( cmd ) ; begin
25379: LD_INT 0
25381: PPUSH
// end ;
25382: LD_VAR 0 2
25386: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25387: LD_INT 0
25389: PPUSH
// if cmd = 121 then
25390: LD_VAR 0 1
25394: PUSH
25395: LD_INT 121
25397: EQUAL
25398: IFFALSE 25400
// end ;
25400: LD_VAR 0 6
25404: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25405: LD_INT 0
25407: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25408: LD_VAR 0 1
25412: PUSH
25413: LD_INT 250
25415: EQUAL
25416: PUSH
25417: LD_VAR 0 2
25421: PPUSH
25422: CALL_OW 264
25426: PUSH
25427: LD_EXP 28
25431: EQUAL
25432: AND
25433: IFFALSE 25454
// MinerPlaceMine ( unit , x , y ) ;
25435: LD_VAR 0 2
25439: PPUSH
25440: LD_VAR 0 4
25444: PPUSH
25445: LD_VAR 0 5
25449: PPUSH
25450: CALL 27803 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25454: LD_VAR 0 1
25458: PUSH
25459: LD_INT 251
25461: EQUAL
25462: PUSH
25463: LD_VAR 0 2
25467: PPUSH
25468: CALL_OW 264
25472: PUSH
25473: LD_EXP 28
25477: EQUAL
25478: AND
25479: IFFALSE 25500
// MinerDetonateMine ( unit , x , y ) ;
25481: LD_VAR 0 2
25485: PPUSH
25486: LD_VAR 0 4
25490: PPUSH
25491: LD_VAR 0 5
25495: PPUSH
25496: CALL 28080 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25500: LD_VAR 0 1
25504: PUSH
25505: LD_INT 252
25507: EQUAL
25508: PUSH
25509: LD_VAR 0 2
25513: PPUSH
25514: CALL_OW 264
25518: PUSH
25519: LD_EXP 28
25523: EQUAL
25524: AND
25525: IFFALSE 25546
// MinerCreateMinefield ( unit , x , y ) ;
25527: LD_VAR 0 2
25531: PPUSH
25532: LD_VAR 0 4
25536: PPUSH
25537: LD_VAR 0 5
25541: PPUSH
25542: CALL 28497 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25546: LD_VAR 0 1
25550: PUSH
25551: LD_INT 253
25553: EQUAL
25554: PUSH
25555: LD_VAR 0 2
25559: PPUSH
25560: CALL_OW 257
25564: PUSH
25565: LD_INT 5
25567: EQUAL
25568: AND
25569: IFFALSE 25590
// ComBinocular ( unit , x , y ) ;
25571: LD_VAR 0 2
25575: PPUSH
25576: LD_VAR 0 4
25580: PPUSH
25581: LD_VAR 0 5
25585: PPUSH
25586: CALL 28868 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25590: LD_VAR 0 1
25594: PUSH
25595: LD_INT 254
25597: EQUAL
25598: PUSH
25599: LD_VAR 0 2
25603: PPUSH
25604: CALL_OW 264
25608: PUSH
25609: LD_EXP 23
25613: EQUAL
25614: AND
25615: PUSH
25616: LD_VAR 0 3
25620: PPUSH
25621: CALL_OW 263
25625: PUSH
25626: LD_INT 3
25628: EQUAL
25629: AND
25630: IFFALSE 25646
// HackDestroyVehicle ( unit , selectedUnit ) ;
25632: LD_VAR 0 2
25636: PPUSH
25637: LD_VAR 0 3
25641: PPUSH
25642: CALL 27163 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25646: LD_VAR 0 1
25650: PUSH
25651: LD_INT 255
25653: EQUAL
25654: PUSH
25655: LD_VAR 0 2
25659: PPUSH
25660: CALL_OW 264
25664: PUSH
25665: LD_INT 14
25667: PUSH
25668: LD_INT 53
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: IN
25675: AND
25676: PUSH
25677: LD_VAR 0 4
25681: PPUSH
25682: LD_VAR 0 5
25686: PPUSH
25687: CALL_OW 488
25691: AND
25692: IFFALSE 25716
// CutTreeXYR ( unit , x , y , 12 ) ;
25694: LD_VAR 0 2
25698: PPUSH
25699: LD_VAR 0 4
25703: PPUSH
25704: LD_VAR 0 5
25708: PPUSH
25709: LD_INT 12
25711: PPUSH
25712: CALL 25729 0 4
// end ;
25716: LD_VAR 0 6
25720: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25721: LD_INT 0
25723: PPUSH
// end ;
25724: LD_VAR 0 4
25728: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25729: LD_INT 0
25731: PPUSH
25732: PPUSH
25733: PPUSH
25734: PPUSH
25735: PPUSH
25736: PPUSH
25737: PPUSH
25738: PPUSH
25739: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25740: LD_VAR 0 1
25744: NOT
25745: PUSH
25746: LD_VAR 0 2
25750: PPUSH
25751: LD_VAR 0 3
25755: PPUSH
25756: CALL_OW 488
25760: NOT
25761: OR
25762: PUSH
25763: LD_VAR 0 4
25767: NOT
25768: OR
25769: IFFALSE 25773
// exit ;
25771: GO 26113
// list := [ ] ;
25773: LD_ADDR_VAR 0 13
25777: PUSH
25778: EMPTY
25779: ST_TO_ADDR
// if x - r < 0 then
25780: LD_VAR 0 2
25784: PUSH
25785: LD_VAR 0 4
25789: MINUS
25790: PUSH
25791: LD_INT 0
25793: LESS
25794: IFFALSE 25806
// min_x := 0 else
25796: LD_ADDR_VAR 0 7
25800: PUSH
25801: LD_INT 0
25803: ST_TO_ADDR
25804: GO 25822
// min_x := x - r ;
25806: LD_ADDR_VAR 0 7
25810: PUSH
25811: LD_VAR 0 2
25815: PUSH
25816: LD_VAR 0 4
25820: MINUS
25821: ST_TO_ADDR
// if y - r < 0 then
25822: LD_VAR 0 3
25826: PUSH
25827: LD_VAR 0 4
25831: MINUS
25832: PUSH
25833: LD_INT 0
25835: LESS
25836: IFFALSE 25848
// min_y := 0 else
25838: LD_ADDR_VAR 0 8
25842: PUSH
25843: LD_INT 0
25845: ST_TO_ADDR
25846: GO 25864
// min_y := y - r ;
25848: LD_ADDR_VAR 0 8
25852: PUSH
25853: LD_VAR 0 3
25857: PUSH
25858: LD_VAR 0 4
25862: MINUS
25863: ST_TO_ADDR
// max_x := x + r ;
25864: LD_ADDR_VAR 0 9
25868: PUSH
25869: LD_VAR 0 2
25873: PUSH
25874: LD_VAR 0 4
25878: PLUS
25879: ST_TO_ADDR
// max_y := y + r ;
25880: LD_ADDR_VAR 0 10
25884: PUSH
25885: LD_VAR 0 3
25889: PUSH
25890: LD_VAR 0 4
25894: PLUS
25895: ST_TO_ADDR
// for _x = min_x to max_x do
25896: LD_ADDR_VAR 0 11
25900: PUSH
25901: DOUBLE
25902: LD_VAR 0 7
25906: DEC
25907: ST_TO_ADDR
25908: LD_VAR 0 9
25912: PUSH
25913: FOR_TO
25914: IFFALSE 26031
// for _y = min_y to max_y do
25916: LD_ADDR_VAR 0 12
25920: PUSH
25921: DOUBLE
25922: LD_VAR 0 8
25926: DEC
25927: ST_TO_ADDR
25928: LD_VAR 0 10
25932: PUSH
25933: FOR_TO
25934: IFFALSE 26027
// begin if not ValidHex ( _x , _y ) then
25936: LD_VAR 0 11
25940: PPUSH
25941: LD_VAR 0 12
25945: PPUSH
25946: CALL_OW 488
25950: NOT
25951: IFFALSE 25955
// continue ;
25953: GO 25933
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25955: LD_VAR 0 11
25959: PPUSH
25960: LD_VAR 0 12
25964: PPUSH
25965: CALL_OW 351
25969: PUSH
25970: LD_VAR 0 11
25974: PPUSH
25975: LD_VAR 0 12
25979: PPUSH
25980: CALL_OW 554
25984: AND
25985: IFFALSE 26025
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25987: LD_ADDR_VAR 0 13
25991: PUSH
25992: LD_VAR 0 13
25996: PPUSH
25997: LD_VAR 0 13
26001: PUSH
26002: LD_INT 1
26004: PLUS
26005: PPUSH
26006: LD_VAR 0 11
26010: PUSH
26011: LD_VAR 0 12
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PPUSH
26020: CALL_OW 2
26024: ST_TO_ADDR
// end ;
26025: GO 25933
26027: POP
26028: POP
26029: GO 25913
26031: POP
26032: POP
// if not list then
26033: LD_VAR 0 13
26037: NOT
26038: IFFALSE 26042
// exit ;
26040: GO 26113
// for i in list do
26042: LD_ADDR_VAR 0 6
26046: PUSH
26047: LD_VAR 0 13
26051: PUSH
26052: FOR_IN
26053: IFFALSE 26111
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26055: LD_VAR 0 1
26059: PPUSH
26060: LD_STRING M
26062: PUSH
26063: LD_VAR 0 6
26067: PUSH
26068: LD_INT 1
26070: ARRAY
26071: PUSH
26072: LD_VAR 0 6
26076: PUSH
26077: LD_INT 2
26079: ARRAY
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: LD_INT 0
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: PUSH
26102: EMPTY
26103: LIST
26104: PPUSH
26105: CALL_OW 447
26109: GO 26052
26111: POP
26112: POP
// end ;
26113: LD_VAR 0 5
26117: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26118: LD_EXP 96
26122: NOT
26123: IFFALSE 26173
26125: GO 26127
26127: DISABLE
// begin initHack := true ;
26128: LD_ADDR_EXP 96
26132: PUSH
26133: LD_INT 1
26135: ST_TO_ADDR
// hackTanks := [ ] ;
26136: LD_ADDR_EXP 97
26140: PUSH
26141: EMPTY
26142: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26143: LD_ADDR_EXP 98
26147: PUSH
26148: EMPTY
26149: ST_TO_ADDR
// hackLimit := 3 ;
26150: LD_ADDR_EXP 99
26154: PUSH
26155: LD_INT 3
26157: ST_TO_ADDR
// hackDist := 12 ;
26158: LD_ADDR_EXP 100
26162: PUSH
26163: LD_INT 12
26165: ST_TO_ADDR
// hackCounter := [ ] ;
26166: LD_ADDR_EXP 101
26170: PUSH
26171: EMPTY
26172: ST_TO_ADDR
// end ;
26173: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26174: LD_EXP 96
26178: PUSH
26179: LD_INT 34
26181: PUSH
26182: LD_EXP 23
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PPUSH
26191: CALL_OW 69
26195: AND
26196: IFFALSE 26451
26198: GO 26200
26200: DISABLE
26201: LD_INT 0
26203: PPUSH
26204: PPUSH
// begin enable ;
26205: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26206: LD_ADDR_VAR 0 1
26210: PUSH
26211: LD_INT 34
26213: PUSH
26214: LD_EXP 23
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PPUSH
26223: CALL_OW 69
26227: PUSH
26228: FOR_IN
26229: IFFALSE 26449
// begin if not i in hackTanks then
26231: LD_VAR 0 1
26235: PUSH
26236: LD_EXP 97
26240: IN
26241: NOT
26242: IFFALSE 26325
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26244: LD_ADDR_EXP 97
26248: PUSH
26249: LD_EXP 97
26253: PPUSH
26254: LD_EXP 97
26258: PUSH
26259: LD_INT 1
26261: PLUS
26262: PPUSH
26263: LD_VAR 0 1
26267: PPUSH
26268: CALL_OW 1
26272: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26273: LD_ADDR_EXP 98
26277: PUSH
26278: LD_EXP 98
26282: PPUSH
26283: LD_EXP 98
26287: PUSH
26288: LD_INT 1
26290: PLUS
26291: PPUSH
26292: EMPTY
26293: PPUSH
26294: CALL_OW 1
26298: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26299: LD_ADDR_EXP 101
26303: PUSH
26304: LD_EXP 101
26308: PPUSH
26309: LD_EXP 101
26313: PUSH
26314: LD_INT 1
26316: PLUS
26317: PPUSH
26318: EMPTY
26319: PPUSH
26320: CALL_OW 1
26324: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26325: LD_VAR 0 1
26329: PPUSH
26330: CALL_OW 302
26334: NOT
26335: IFFALSE 26348
// begin HackUnlinkAll ( i ) ;
26337: LD_VAR 0 1
26341: PPUSH
26342: CALL 26454 0 1
// continue ;
26346: GO 26228
// end ; HackCheckCapturedStatus ( i ) ;
26348: LD_VAR 0 1
26352: PPUSH
26353: CALL 26897 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26357: LD_ADDR_VAR 0 2
26361: PUSH
26362: LD_INT 81
26364: PUSH
26365: LD_VAR 0 1
26369: PPUSH
26370: CALL_OW 255
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 33
26381: PUSH
26382: LD_INT 3
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 91
26391: PUSH
26392: LD_VAR 0 1
26396: PUSH
26397: LD_EXP 100
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 50
26409: PUSH
26410: EMPTY
26411: LIST
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: PPUSH
26419: CALL_OW 69
26423: ST_TO_ADDR
// if not tmp then
26424: LD_VAR 0 2
26428: NOT
26429: IFFALSE 26433
// continue ;
26431: GO 26228
// HackLink ( i , tmp ) ;
26433: LD_VAR 0 1
26437: PPUSH
26438: LD_VAR 0 2
26442: PPUSH
26443: CALL 26590 0 2
// end ;
26447: GO 26228
26449: POP
26450: POP
// end ;
26451: PPOPN 2
26453: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26454: LD_INT 0
26456: PPUSH
26457: PPUSH
26458: PPUSH
// if not hack in hackTanks then
26459: LD_VAR 0 1
26463: PUSH
26464: LD_EXP 97
26468: IN
26469: NOT
26470: IFFALSE 26474
// exit ;
26472: GO 26585
// index := GetElementIndex ( hackTanks , hack ) ;
26474: LD_ADDR_VAR 0 4
26478: PUSH
26479: LD_EXP 97
26483: PPUSH
26484: LD_VAR 0 1
26488: PPUSH
26489: CALL 34019 0 2
26493: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26494: LD_EXP 98
26498: PUSH
26499: LD_VAR 0 4
26503: ARRAY
26504: IFFALSE 26585
// begin for i in hackTanksCaptured [ index ] do
26506: LD_ADDR_VAR 0 3
26510: PUSH
26511: LD_EXP 98
26515: PUSH
26516: LD_VAR 0 4
26520: ARRAY
26521: PUSH
26522: FOR_IN
26523: IFFALSE 26549
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26525: LD_VAR 0 3
26529: PUSH
26530: LD_INT 1
26532: ARRAY
26533: PPUSH
26534: LD_VAR 0 3
26538: PUSH
26539: LD_INT 2
26541: ARRAY
26542: PPUSH
26543: CALL_OW 235
26547: GO 26522
26549: POP
26550: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26551: LD_ADDR_EXP 98
26555: PUSH
26556: LD_EXP 98
26560: PPUSH
26561: LD_VAR 0 4
26565: PPUSH
26566: EMPTY
26567: PPUSH
26568: CALL_OW 1
26572: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26573: LD_VAR 0 1
26577: PPUSH
26578: LD_INT 0
26580: PPUSH
26581: CALL_OW 505
// end ; end ;
26585: LD_VAR 0 2
26589: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26590: LD_INT 0
26592: PPUSH
26593: PPUSH
26594: PPUSH
// if not hack in hackTanks or not vehicles then
26595: LD_VAR 0 1
26599: PUSH
26600: LD_EXP 97
26604: IN
26605: NOT
26606: PUSH
26607: LD_VAR 0 2
26611: NOT
26612: OR
26613: IFFALSE 26617
// exit ;
26615: GO 26892
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26617: LD_ADDR_VAR 0 2
26621: PUSH
26622: LD_VAR 0 1
26626: PPUSH
26627: LD_VAR 0 2
26631: PPUSH
26632: LD_INT 1
26634: PPUSH
26635: LD_INT 1
26637: PPUSH
26638: CALL 34669 0 4
26642: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26643: LD_ADDR_VAR 0 5
26647: PUSH
26648: LD_EXP 97
26652: PPUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL 34019 0 2
26662: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26663: LD_EXP 98
26667: PUSH
26668: LD_VAR 0 5
26672: ARRAY
26673: PUSH
26674: LD_EXP 99
26678: LESS
26679: IFFALSE 26868
// begin for i := 1 to vehicles do
26681: LD_ADDR_VAR 0 4
26685: PUSH
26686: DOUBLE
26687: LD_INT 1
26689: DEC
26690: ST_TO_ADDR
26691: LD_VAR 0 2
26695: PUSH
26696: FOR_TO
26697: IFFALSE 26866
// begin if hackTanksCaptured [ index ] = hackLimit then
26699: LD_EXP 98
26703: PUSH
26704: LD_VAR 0 5
26708: ARRAY
26709: PUSH
26710: LD_EXP 99
26714: EQUAL
26715: IFFALSE 26719
// break ;
26717: GO 26866
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26719: LD_ADDR_EXP 101
26723: PUSH
26724: LD_EXP 101
26728: PPUSH
26729: LD_VAR 0 5
26733: PPUSH
26734: LD_EXP 101
26738: PUSH
26739: LD_VAR 0 5
26743: ARRAY
26744: PUSH
26745: LD_INT 1
26747: PLUS
26748: PPUSH
26749: CALL_OW 1
26753: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26754: LD_ADDR_EXP 98
26758: PUSH
26759: LD_EXP 98
26763: PPUSH
26764: LD_VAR 0 5
26768: PUSH
26769: LD_EXP 98
26773: PUSH
26774: LD_VAR 0 5
26778: ARRAY
26779: PUSH
26780: LD_INT 1
26782: PLUS
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PPUSH
26788: LD_VAR 0 2
26792: PUSH
26793: LD_VAR 0 4
26797: ARRAY
26798: PUSH
26799: LD_VAR 0 2
26803: PUSH
26804: LD_VAR 0 4
26808: ARRAY
26809: PPUSH
26810: CALL_OW 255
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PPUSH
26819: CALL 34234 0 3
26823: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26824: LD_VAR 0 2
26828: PUSH
26829: LD_VAR 0 4
26833: ARRAY
26834: PPUSH
26835: LD_VAR 0 1
26839: PPUSH
26840: CALL_OW 255
26844: PPUSH
26845: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26849: LD_VAR 0 2
26853: PUSH
26854: LD_VAR 0 4
26858: ARRAY
26859: PPUSH
26860: CALL_OW 141
// end ;
26864: GO 26696
26866: POP
26867: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26868: LD_VAR 0 1
26872: PPUSH
26873: LD_EXP 98
26877: PUSH
26878: LD_VAR 0 5
26882: ARRAY
26883: PUSH
26884: LD_INT 0
26886: PLUS
26887: PPUSH
26888: CALL_OW 505
// end ;
26892: LD_VAR 0 3
26896: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26897: LD_INT 0
26899: PPUSH
26900: PPUSH
26901: PPUSH
26902: PPUSH
// if not hack in hackTanks then
26903: LD_VAR 0 1
26907: PUSH
26908: LD_EXP 97
26912: IN
26913: NOT
26914: IFFALSE 26918
// exit ;
26916: GO 27158
// index := GetElementIndex ( hackTanks , hack ) ;
26918: LD_ADDR_VAR 0 4
26922: PUSH
26923: LD_EXP 97
26927: PPUSH
26928: LD_VAR 0 1
26932: PPUSH
26933: CALL 34019 0 2
26937: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26938: LD_ADDR_VAR 0 3
26942: PUSH
26943: DOUBLE
26944: LD_EXP 98
26948: PUSH
26949: LD_VAR 0 4
26953: ARRAY
26954: INC
26955: ST_TO_ADDR
26956: LD_INT 1
26958: PUSH
26959: FOR_DOWNTO
26960: IFFALSE 27132
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26962: LD_ADDR_VAR 0 5
26966: PUSH
26967: LD_EXP 98
26971: PUSH
26972: LD_VAR 0 4
26976: ARRAY
26977: PUSH
26978: LD_VAR 0 3
26982: ARRAY
26983: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26984: LD_VAR 0 5
26988: PUSH
26989: LD_INT 1
26991: ARRAY
26992: PPUSH
26993: CALL_OW 302
26997: NOT
26998: PUSH
26999: LD_VAR 0 5
27003: PUSH
27004: LD_INT 1
27006: ARRAY
27007: PPUSH
27008: CALL_OW 255
27012: PUSH
27013: LD_VAR 0 1
27017: PPUSH
27018: CALL_OW 255
27022: NONEQUAL
27023: OR
27024: IFFALSE 27130
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27026: LD_VAR 0 5
27030: PUSH
27031: LD_INT 1
27033: ARRAY
27034: PPUSH
27035: CALL_OW 305
27039: PUSH
27040: LD_VAR 0 5
27044: PUSH
27045: LD_INT 1
27047: ARRAY
27048: PPUSH
27049: CALL_OW 255
27053: PUSH
27054: LD_VAR 0 1
27058: PPUSH
27059: CALL_OW 255
27063: EQUAL
27064: AND
27065: IFFALSE 27089
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27067: LD_VAR 0 5
27071: PUSH
27072: LD_INT 1
27074: ARRAY
27075: PPUSH
27076: LD_VAR 0 5
27080: PUSH
27081: LD_INT 2
27083: ARRAY
27084: PPUSH
27085: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27089: LD_ADDR_EXP 98
27093: PUSH
27094: LD_EXP 98
27098: PPUSH
27099: LD_VAR 0 4
27103: PPUSH
27104: LD_EXP 98
27108: PUSH
27109: LD_VAR 0 4
27113: ARRAY
27114: PPUSH
27115: LD_VAR 0 3
27119: PPUSH
27120: CALL_OW 3
27124: PPUSH
27125: CALL_OW 1
27129: ST_TO_ADDR
// end ; end ;
27130: GO 26959
27132: POP
27133: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27134: LD_VAR 0 1
27138: PPUSH
27139: LD_EXP 98
27143: PUSH
27144: LD_VAR 0 4
27148: ARRAY
27149: PUSH
27150: LD_INT 0
27152: PLUS
27153: PPUSH
27154: CALL_OW 505
// end ;
27158: LD_VAR 0 2
27162: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27163: LD_INT 0
27165: PPUSH
27166: PPUSH
27167: PPUSH
27168: PPUSH
// if not hack in hackTanks then
27169: LD_VAR 0 1
27173: PUSH
27174: LD_EXP 97
27178: IN
27179: NOT
27180: IFFALSE 27184
// exit ;
27182: GO 27269
// index := GetElementIndex ( hackTanks , hack ) ;
27184: LD_ADDR_VAR 0 5
27188: PUSH
27189: LD_EXP 97
27193: PPUSH
27194: LD_VAR 0 1
27198: PPUSH
27199: CALL 34019 0 2
27203: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27204: LD_ADDR_VAR 0 4
27208: PUSH
27209: DOUBLE
27210: LD_INT 1
27212: DEC
27213: ST_TO_ADDR
27214: LD_EXP 98
27218: PUSH
27219: LD_VAR 0 5
27223: ARRAY
27224: PUSH
27225: FOR_TO
27226: IFFALSE 27267
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27228: LD_EXP 98
27232: PUSH
27233: LD_VAR 0 5
27237: ARRAY
27238: PUSH
27239: LD_VAR 0 4
27243: ARRAY
27244: PUSH
27245: LD_INT 1
27247: ARRAY
27248: PUSH
27249: LD_VAR 0 2
27253: EQUAL
27254: IFFALSE 27265
// KillUnit ( vehicle ) ;
27256: LD_VAR 0 2
27260: PPUSH
27261: CALL_OW 66
27265: GO 27225
27267: POP
27268: POP
// end ;
27269: LD_VAR 0 3
27273: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27274: LD_EXP 102
27278: NOT
27279: IFFALSE 27314
27281: GO 27283
27283: DISABLE
// begin initMiner := true ;
27284: LD_ADDR_EXP 102
27288: PUSH
27289: LD_INT 1
27291: ST_TO_ADDR
// minersList := [ ] ;
27292: LD_ADDR_EXP 103
27296: PUSH
27297: EMPTY
27298: ST_TO_ADDR
// minerMinesList := [ ] ;
27299: LD_ADDR_EXP 104
27303: PUSH
27304: EMPTY
27305: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27306: LD_ADDR_EXP 105
27310: PUSH
27311: LD_INT 5
27313: ST_TO_ADDR
// end ;
27314: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27315: LD_EXP 102
27319: PUSH
27320: LD_INT 34
27322: PUSH
27323: LD_EXP 28
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PPUSH
27332: CALL_OW 69
27336: AND
27337: IFFALSE 27800
27339: GO 27341
27341: DISABLE
27342: LD_INT 0
27344: PPUSH
27345: PPUSH
27346: PPUSH
27347: PPUSH
// begin enable ;
27348: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27349: LD_ADDR_VAR 0 1
27353: PUSH
27354: LD_INT 34
27356: PUSH
27357: LD_EXP 28
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PPUSH
27366: CALL_OW 69
27370: PUSH
27371: FOR_IN
27372: IFFALSE 27444
// begin if not i in minersList then
27374: LD_VAR 0 1
27378: PUSH
27379: LD_EXP 103
27383: IN
27384: NOT
27385: IFFALSE 27442
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27387: LD_ADDR_EXP 103
27391: PUSH
27392: LD_EXP 103
27396: PPUSH
27397: LD_EXP 103
27401: PUSH
27402: LD_INT 1
27404: PLUS
27405: PPUSH
27406: LD_VAR 0 1
27410: PPUSH
27411: CALL_OW 1
27415: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27416: LD_ADDR_EXP 104
27420: PUSH
27421: LD_EXP 104
27425: PPUSH
27426: LD_EXP 104
27430: PUSH
27431: LD_INT 1
27433: PLUS
27434: PPUSH
27435: EMPTY
27436: PPUSH
27437: CALL_OW 1
27441: ST_TO_ADDR
// end end ;
27442: GO 27371
27444: POP
27445: POP
// for i := minerMinesList downto 1 do
27446: LD_ADDR_VAR 0 1
27450: PUSH
27451: DOUBLE
27452: LD_EXP 104
27456: INC
27457: ST_TO_ADDR
27458: LD_INT 1
27460: PUSH
27461: FOR_DOWNTO
27462: IFFALSE 27798
// begin if IsLive ( minersList [ i ] ) then
27464: LD_EXP 103
27468: PUSH
27469: LD_VAR 0 1
27473: ARRAY
27474: PPUSH
27475: CALL_OW 300
27479: IFFALSE 27507
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27481: LD_EXP 103
27485: PUSH
27486: LD_VAR 0 1
27490: ARRAY
27491: PPUSH
27492: LD_EXP 104
27496: PUSH
27497: LD_VAR 0 1
27501: ARRAY
27502: PPUSH
27503: CALL_OW 505
// if not minerMinesList [ i ] then
27507: LD_EXP 104
27511: PUSH
27512: LD_VAR 0 1
27516: ARRAY
27517: NOT
27518: IFFALSE 27522
// continue ;
27520: GO 27461
// for j := minerMinesList [ i ] downto 1 do
27522: LD_ADDR_VAR 0 2
27526: PUSH
27527: DOUBLE
27528: LD_EXP 104
27532: PUSH
27533: LD_VAR 0 1
27537: ARRAY
27538: INC
27539: ST_TO_ADDR
27540: LD_INT 1
27542: PUSH
27543: FOR_DOWNTO
27544: IFFALSE 27794
// begin side := GetSide ( minersList [ i ] ) ;
27546: LD_ADDR_VAR 0 3
27550: PUSH
27551: LD_EXP 103
27555: PUSH
27556: LD_VAR 0 1
27560: ARRAY
27561: PPUSH
27562: CALL_OW 255
27566: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27567: LD_ADDR_VAR 0 4
27571: PUSH
27572: LD_EXP 104
27576: PUSH
27577: LD_VAR 0 1
27581: ARRAY
27582: PUSH
27583: LD_VAR 0 2
27587: ARRAY
27588: PUSH
27589: LD_INT 1
27591: ARRAY
27592: PPUSH
27593: LD_EXP 104
27597: PUSH
27598: LD_VAR 0 1
27602: ARRAY
27603: PUSH
27604: LD_VAR 0 2
27608: ARRAY
27609: PUSH
27610: LD_INT 2
27612: ARRAY
27613: PPUSH
27614: CALL_OW 428
27618: ST_TO_ADDR
// if not tmp then
27619: LD_VAR 0 4
27623: NOT
27624: IFFALSE 27628
// continue ;
27626: GO 27543
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27628: LD_VAR 0 4
27632: PUSH
27633: LD_INT 81
27635: PUSH
27636: LD_VAR 0 3
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PPUSH
27645: CALL_OW 69
27649: IN
27650: PUSH
27651: LD_EXP 104
27655: PUSH
27656: LD_VAR 0 1
27660: ARRAY
27661: PUSH
27662: LD_VAR 0 2
27666: ARRAY
27667: PUSH
27668: LD_INT 1
27670: ARRAY
27671: PPUSH
27672: LD_EXP 104
27676: PUSH
27677: LD_VAR 0 1
27681: ARRAY
27682: PUSH
27683: LD_VAR 0 2
27687: ARRAY
27688: PUSH
27689: LD_INT 2
27691: ARRAY
27692: PPUSH
27693: CALL_OW 458
27697: AND
27698: IFFALSE 27792
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27700: LD_EXP 104
27704: PUSH
27705: LD_VAR 0 1
27709: ARRAY
27710: PUSH
27711: LD_VAR 0 2
27715: ARRAY
27716: PUSH
27717: LD_INT 1
27719: ARRAY
27720: PPUSH
27721: LD_EXP 104
27725: PUSH
27726: LD_VAR 0 1
27730: ARRAY
27731: PUSH
27732: LD_VAR 0 2
27736: ARRAY
27737: PUSH
27738: LD_INT 2
27740: ARRAY
27741: PPUSH
27742: LD_VAR 0 3
27746: PPUSH
27747: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27751: LD_ADDR_EXP 104
27755: PUSH
27756: LD_EXP 104
27760: PPUSH
27761: LD_VAR 0 1
27765: PPUSH
27766: LD_EXP 104
27770: PUSH
27771: LD_VAR 0 1
27775: ARRAY
27776: PPUSH
27777: LD_VAR 0 2
27781: PPUSH
27782: CALL_OW 3
27786: PPUSH
27787: CALL_OW 1
27791: ST_TO_ADDR
// end ; end ;
27792: GO 27543
27794: POP
27795: POP
// end ;
27796: GO 27461
27798: POP
27799: POP
// end ;
27800: PPOPN 4
27802: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27803: LD_INT 0
27805: PPUSH
27806: PPUSH
// result := false ;
27807: LD_ADDR_VAR 0 4
27811: PUSH
27812: LD_INT 0
27814: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27815: LD_VAR 0 1
27819: PPUSH
27820: CALL_OW 264
27824: PUSH
27825: LD_EXP 28
27829: EQUAL
27830: NOT
27831: IFFALSE 27835
// exit ;
27833: GO 28075
// index := GetElementIndex ( minersList , unit ) ;
27835: LD_ADDR_VAR 0 5
27839: PUSH
27840: LD_EXP 103
27844: PPUSH
27845: LD_VAR 0 1
27849: PPUSH
27850: CALL 34019 0 2
27854: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27855: LD_EXP 104
27859: PUSH
27860: LD_VAR 0 5
27864: ARRAY
27865: PUSH
27866: LD_EXP 105
27870: GREATEREQUAL
27871: IFFALSE 27875
// exit ;
27873: GO 28075
// ComMoveXY ( unit , x , y ) ;
27875: LD_VAR 0 1
27879: PPUSH
27880: LD_VAR 0 2
27884: PPUSH
27885: LD_VAR 0 3
27889: PPUSH
27890: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27894: LD_INT 35
27896: PPUSH
27897: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27901: LD_VAR 0 1
27905: PPUSH
27906: LD_VAR 0 2
27910: PPUSH
27911: LD_VAR 0 3
27915: PPUSH
27916: CALL 64416 0 3
27920: NOT
27921: PUSH
27922: LD_VAR 0 1
27926: PPUSH
27927: CALL_OW 314
27931: AND
27932: IFFALSE 27936
// exit ;
27934: GO 28075
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27936: LD_VAR 0 2
27940: PPUSH
27941: LD_VAR 0 3
27945: PPUSH
27946: CALL_OW 428
27950: PUSH
27951: LD_VAR 0 1
27955: EQUAL
27956: PUSH
27957: LD_VAR 0 1
27961: PPUSH
27962: CALL_OW 314
27966: NOT
27967: AND
27968: IFFALSE 27894
// PlaySoundXY ( x , y , PlantMine ) ;
27970: LD_VAR 0 2
27974: PPUSH
27975: LD_VAR 0 3
27979: PPUSH
27980: LD_STRING PlantMine
27982: PPUSH
27983: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27987: LD_VAR 0 2
27991: PPUSH
27992: LD_VAR 0 3
27996: PPUSH
27997: LD_VAR 0 1
28001: PPUSH
28002: CALL_OW 255
28006: PPUSH
28007: LD_INT 0
28009: PPUSH
28010: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28014: LD_ADDR_EXP 104
28018: PUSH
28019: LD_EXP 104
28023: PPUSH
28024: LD_VAR 0 5
28028: PUSH
28029: LD_EXP 104
28033: PUSH
28034: LD_VAR 0 5
28038: ARRAY
28039: PUSH
28040: LD_INT 1
28042: PLUS
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PPUSH
28048: LD_VAR 0 2
28052: PUSH
28053: LD_VAR 0 3
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PPUSH
28062: CALL 34234 0 3
28066: ST_TO_ADDR
// result := true ;
28067: LD_ADDR_VAR 0 4
28071: PUSH
28072: LD_INT 1
28074: ST_TO_ADDR
// end ;
28075: LD_VAR 0 4
28079: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28080: LD_INT 0
28082: PPUSH
28083: PPUSH
28084: PPUSH
// if not unit in minersList then
28085: LD_VAR 0 1
28089: PUSH
28090: LD_EXP 103
28094: IN
28095: NOT
28096: IFFALSE 28100
// exit ;
28098: GO 28492
// index := GetElementIndex ( minersList , unit ) ;
28100: LD_ADDR_VAR 0 6
28104: PUSH
28105: LD_EXP 103
28109: PPUSH
28110: LD_VAR 0 1
28114: PPUSH
28115: CALL 34019 0 2
28119: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28120: LD_ADDR_VAR 0 5
28124: PUSH
28125: DOUBLE
28126: LD_EXP 104
28130: PUSH
28131: LD_VAR 0 6
28135: ARRAY
28136: INC
28137: ST_TO_ADDR
28138: LD_INT 1
28140: PUSH
28141: FOR_DOWNTO
28142: IFFALSE 28303
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28144: LD_EXP 104
28148: PUSH
28149: LD_VAR 0 6
28153: ARRAY
28154: PUSH
28155: LD_VAR 0 5
28159: ARRAY
28160: PUSH
28161: LD_INT 1
28163: ARRAY
28164: PUSH
28165: LD_VAR 0 2
28169: EQUAL
28170: PUSH
28171: LD_EXP 104
28175: PUSH
28176: LD_VAR 0 6
28180: ARRAY
28181: PUSH
28182: LD_VAR 0 5
28186: ARRAY
28187: PUSH
28188: LD_INT 2
28190: ARRAY
28191: PUSH
28192: LD_VAR 0 3
28196: EQUAL
28197: AND
28198: IFFALSE 28301
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28200: LD_EXP 104
28204: PUSH
28205: LD_VAR 0 6
28209: ARRAY
28210: PUSH
28211: LD_VAR 0 5
28215: ARRAY
28216: PUSH
28217: LD_INT 1
28219: ARRAY
28220: PPUSH
28221: LD_EXP 104
28225: PUSH
28226: LD_VAR 0 6
28230: ARRAY
28231: PUSH
28232: LD_VAR 0 5
28236: ARRAY
28237: PUSH
28238: LD_INT 2
28240: ARRAY
28241: PPUSH
28242: LD_VAR 0 1
28246: PPUSH
28247: CALL_OW 255
28251: PPUSH
28252: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28256: LD_ADDR_EXP 104
28260: PUSH
28261: LD_EXP 104
28265: PPUSH
28266: LD_VAR 0 6
28270: PPUSH
28271: LD_EXP 104
28275: PUSH
28276: LD_VAR 0 6
28280: ARRAY
28281: PPUSH
28282: LD_VAR 0 5
28286: PPUSH
28287: CALL_OW 3
28291: PPUSH
28292: CALL_OW 1
28296: ST_TO_ADDR
// exit ;
28297: POP
28298: POP
28299: GO 28492
// end ; end ;
28301: GO 28141
28303: POP
28304: POP
// for i := minerMinesList [ index ] downto 1 do
28305: LD_ADDR_VAR 0 5
28309: PUSH
28310: DOUBLE
28311: LD_EXP 104
28315: PUSH
28316: LD_VAR 0 6
28320: ARRAY
28321: INC
28322: ST_TO_ADDR
28323: LD_INT 1
28325: PUSH
28326: FOR_DOWNTO
28327: IFFALSE 28490
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28329: LD_EXP 104
28333: PUSH
28334: LD_VAR 0 6
28338: ARRAY
28339: PUSH
28340: LD_VAR 0 5
28344: ARRAY
28345: PUSH
28346: LD_INT 1
28348: ARRAY
28349: PPUSH
28350: LD_EXP 104
28354: PUSH
28355: LD_VAR 0 6
28359: ARRAY
28360: PUSH
28361: LD_VAR 0 5
28365: ARRAY
28366: PUSH
28367: LD_INT 2
28369: ARRAY
28370: PPUSH
28371: LD_VAR 0 2
28375: PPUSH
28376: LD_VAR 0 3
28380: PPUSH
28381: CALL_OW 298
28385: PUSH
28386: LD_INT 6
28388: LESS
28389: IFFALSE 28488
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28391: LD_EXP 104
28395: PUSH
28396: LD_VAR 0 6
28400: ARRAY
28401: PUSH
28402: LD_VAR 0 5
28406: ARRAY
28407: PUSH
28408: LD_INT 1
28410: ARRAY
28411: PPUSH
28412: LD_EXP 104
28416: PUSH
28417: LD_VAR 0 6
28421: ARRAY
28422: PUSH
28423: LD_VAR 0 5
28427: ARRAY
28428: PUSH
28429: LD_INT 2
28431: ARRAY
28432: PPUSH
28433: LD_VAR 0 1
28437: PPUSH
28438: CALL_OW 255
28442: PPUSH
28443: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28447: LD_ADDR_EXP 104
28451: PUSH
28452: LD_EXP 104
28456: PPUSH
28457: LD_VAR 0 6
28461: PPUSH
28462: LD_EXP 104
28466: PUSH
28467: LD_VAR 0 6
28471: ARRAY
28472: PPUSH
28473: LD_VAR 0 5
28477: PPUSH
28478: CALL_OW 3
28482: PPUSH
28483: CALL_OW 1
28487: ST_TO_ADDR
// end ; end ;
28488: GO 28326
28490: POP
28491: POP
// end ;
28492: LD_VAR 0 4
28496: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28497: LD_INT 0
28499: PPUSH
28500: PPUSH
28501: PPUSH
28502: PPUSH
28503: PPUSH
28504: PPUSH
28505: PPUSH
28506: PPUSH
28507: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28508: LD_VAR 0 1
28512: PPUSH
28513: CALL_OW 264
28517: PUSH
28518: LD_EXP 28
28522: EQUAL
28523: NOT
28524: PUSH
28525: LD_VAR 0 1
28529: PUSH
28530: LD_EXP 103
28534: IN
28535: NOT
28536: OR
28537: IFFALSE 28541
// exit ;
28539: GO 28863
// index := GetElementIndex ( minersList , unit ) ;
28541: LD_ADDR_VAR 0 6
28545: PUSH
28546: LD_EXP 103
28550: PPUSH
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL 34019 0 2
28560: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28561: LD_ADDR_VAR 0 8
28565: PUSH
28566: LD_EXP 105
28570: PUSH
28571: LD_EXP 104
28575: PUSH
28576: LD_VAR 0 6
28580: ARRAY
28581: MINUS
28582: ST_TO_ADDR
// if not minesFreeAmount then
28583: LD_VAR 0 8
28587: NOT
28588: IFFALSE 28592
// exit ;
28590: GO 28863
// tmp := [ ] ;
28592: LD_ADDR_VAR 0 7
28596: PUSH
28597: EMPTY
28598: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28599: LD_ADDR_VAR 0 5
28603: PUSH
28604: DOUBLE
28605: LD_INT 1
28607: DEC
28608: ST_TO_ADDR
28609: LD_VAR 0 8
28613: PUSH
28614: FOR_TO
28615: IFFALSE 28810
// begin _d := rand ( 0 , 5 ) ;
28617: LD_ADDR_VAR 0 11
28621: PUSH
28622: LD_INT 0
28624: PPUSH
28625: LD_INT 5
28627: PPUSH
28628: CALL_OW 12
28632: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28633: LD_ADDR_VAR 0 12
28637: PUSH
28638: LD_INT 2
28640: PPUSH
28641: LD_INT 6
28643: PPUSH
28644: CALL_OW 12
28648: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28649: LD_ADDR_VAR 0 9
28653: PUSH
28654: LD_VAR 0 2
28658: PPUSH
28659: LD_VAR 0 11
28663: PPUSH
28664: LD_VAR 0 12
28668: PPUSH
28669: CALL_OW 272
28673: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28674: LD_ADDR_VAR 0 10
28678: PUSH
28679: LD_VAR 0 3
28683: PPUSH
28684: LD_VAR 0 11
28688: PPUSH
28689: LD_VAR 0 12
28693: PPUSH
28694: CALL_OW 273
28698: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28699: LD_VAR 0 9
28703: PPUSH
28704: LD_VAR 0 10
28708: PPUSH
28709: CALL_OW 488
28713: PUSH
28714: LD_VAR 0 9
28718: PUSH
28719: LD_VAR 0 10
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_VAR 0 7
28732: IN
28733: NOT
28734: AND
28735: PUSH
28736: LD_VAR 0 9
28740: PPUSH
28741: LD_VAR 0 10
28745: PPUSH
28746: CALL_OW 458
28750: NOT
28751: AND
28752: IFFALSE 28794
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28754: LD_ADDR_VAR 0 7
28758: PUSH
28759: LD_VAR 0 7
28763: PPUSH
28764: LD_VAR 0 7
28768: PUSH
28769: LD_INT 1
28771: PLUS
28772: PPUSH
28773: LD_VAR 0 9
28777: PUSH
28778: LD_VAR 0 10
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PPUSH
28787: CALL_OW 1
28791: ST_TO_ADDR
28792: GO 28808
// i := i - 1 ;
28794: LD_ADDR_VAR 0 5
28798: PUSH
28799: LD_VAR 0 5
28803: PUSH
28804: LD_INT 1
28806: MINUS
28807: ST_TO_ADDR
// end ;
28808: GO 28614
28810: POP
28811: POP
// for i in tmp do
28812: LD_ADDR_VAR 0 5
28816: PUSH
28817: LD_VAR 0 7
28821: PUSH
28822: FOR_IN
28823: IFFALSE 28861
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28825: LD_VAR 0 1
28829: PPUSH
28830: LD_VAR 0 5
28834: PUSH
28835: LD_INT 1
28837: ARRAY
28838: PPUSH
28839: LD_VAR 0 5
28843: PUSH
28844: LD_INT 2
28846: ARRAY
28847: PPUSH
28848: CALL 27803 0 3
28852: NOT
28853: IFFALSE 28859
// exit ;
28855: POP
28856: POP
28857: GO 28863
28859: GO 28822
28861: POP
28862: POP
// end ;
28863: LD_VAR 0 4
28867: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28868: LD_INT 0
28870: PPUSH
28871: PPUSH
28872: PPUSH
28873: PPUSH
28874: PPUSH
28875: PPUSH
28876: PPUSH
// if not GetClass ( unit ) = class_sniper then
28877: LD_VAR 0 1
28881: PPUSH
28882: CALL_OW 257
28886: PUSH
28887: LD_INT 5
28889: EQUAL
28890: NOT
28891: IFFALSE 28895
// exit ;
28893: GO 29283
// dist := 8 ;
28895: LD_ADDR_VAR 0 5
28899: PUSH
28900: LD_INT 8
28902: ST_TO_ADDR
// viewRange := 12 ;
28903: LD_ADDR_VAR 0 7
28907: PUSH
28908: LD_INT 12
28910: ST_TO_ADDR
// side := GetSide ( unit ) ;
28911: LD_ADDR_VAR 0 6
28915: PUSH
28916: LD_VAR 0 1
28920: PPUSH
28921: CALL_OW 255
28925: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28926: LD_INT 61
28928: PPUSH
28929: LD_VAR 0 6
28933: PPUSH
28934: CALL_OW 321
28938: PUSH
28939: LD_INT 2
28941: EQUAL
28942: IFFALSE 28952
// viewRange := 16 ;
28944: LD_ADDR_VAR 0 7
28948: PUSH
28949: LD_INT 16
28951: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28952: LD_VAR 0 1
28956: PPUSH
28957: LD_VAR 0 2
28961: PPUSH
28962: LD_VAR 0 3
28966: PPUSH
28967: CALL_OW 297
28971: PUSH
28972: LD_VAR 0 5
28976: GREATER
28977: IFFALSE 29056
// begin ComMoveXY ( unit , x , y ) ;
28979: LD_VAR 0 1
28983: PPUSH
28984: LD_VAR 0 2
28988: PPUSH
28989: LD_VAR 0 3
28993: PPUSH
28994: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28998: LD_INT 35
29000: PPUSH
29001: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29005: LD_VAR 0 1
29009: PPUSH
29010: LD_VAR 0 2
29014: PPUSH
29015: LD_VAR 0 3
29019: PPUSH
29020: CALL 64416 0 3
29024: NOT
29025: IFFALSE 29029
// exit ;
29027: GO 29283
// until GetDistUnitXY ( unit , x , y ) < dist ;
29029: LD_VAR 0 1
29033: PPUSH
29034: LD_VAR 0 2
29038: PPUSH
29039: LD_VAR 0 3
29043: PPUSH
29044: CALL_OW 297
29048: PUSH
29049: LD_VAR 0 5
29053: LESS
29054: IFFALSE 28998
// end ; ComTurnXY ( unit , x , y ) ;
29056: LD_VAR 0 1
29060: PPUSH
29061: LD_VAR 0 2
29065: PPUSH
29066: LD_VAR 0 3
29070: PPUSH
29071: CALL_OW 118
// wait ( 5 ) ;
29075: LD_INT 5
29077: PPUSH
29078: CALL_OW 67
// _d := GetDir ( unit ) ;
29082: LD_ADDR_VAR 0 10
29086: PUSH
29087: LD_VAR 0 1
29091: PPUSH
29092: CALL_OW 254
29096: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29097: LD_ADDR_VAR 0 8
29101: PUSH
29102: LD_VAR 0 1
29106: PPUSH
29107: CALL_OW 250
29111: PPUSH
29112: LD_VAR 0 10
29116: PPUSH
29117: LD_VAR 0 5
29121: PPUSH
29122: CALL_OW 272
29126: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29127: LD_ADDR_VAR 0 9
29131: PUSH
29132: LD_VAR 0 1
29136: PPUSH
29137: CALL_OW 251
29141: PPUSH
29142: LD_VAR 0 10
29146: PPUSH
29147: LD_VAR 0 5
29151: PPUSH
29152: CALL_OW 273
29156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29157: LD_VAR 0 8
29161: PPUSH
29162: LD_VAR 0 9
29166: PPUSH
29167: CALL_OW 488
29171: NOT
29172: IFFALSE 29176
// exit ;
29174: GO 29283
// ComAnimCustom ( unit , 1 ) ;
29176: LD_VAR 0 1
29180: PPUSH
29181: LD_INT 1
29183: PPUSH
29184: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29188: LD_VAR 0 8
29192: PPUSH
29193: LD_VAR 0 9
29197: PPUSH
29198: LD_VAR 0 6
29202: PPUSH
29203: LD_VAR 0 7
29207: PPUSH
29208: CALL_OW 330
// repeat wait ( 1 ) ;
29212: LD_INT 1
29214: PPUSH
29215: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29219: LD_VAR 0 1
29223: PPUSH
29224: CALL_OW 316
29228: PUSH
29229: LD_VAR 0 1
29233: PPUSH
29234: CALL_OW 314
29238: OR
29239: PUSH
29240: LD_VAR 0 1
29244: PPUSH
29245: CALL_OW 302
29249: NOT
29250: OR
29251: PUSH
29252: LD_VAR 0 1
29256: PPUSH
29257: CALL_OW 301
29261: OR
29262: IFFALSE 29212
// RemoveSeeing ( _x , _y , side ) ;
29264: LD_VAR 0 8
29268: PPUSH
29269: LD_VAR 0 9
29273: PPUSH
29274: LD_VAR 0 6
29278: PPUSH
29279: CALL_OW 331
// end ; end_of_file
29283: LD_VAR 0 4
29287: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29288: LD_INT 0
29290: PPUSH
29291: PPUSH
// if exist_mode then
29292: LD_VAR 0 2
29296: IFFALSE 29321
// unit := CreateCharacter ( prefix & ident ) else
29298: LD_ADDR_VAR 0 5
29302: PUSH
29303: LD_VAR 0 3
29307: PUSH
29308: LD_VAR 0 1
29312: STR
29313: PPUSH
29314: CALL_OW 34
29318: ST_TO_ADDR
29319: GO 29336
// unit := NewCharacter ( ident ) ;
29321: LD_ADDR_VAR 0 5
29325: PUSH
29326: LD_VAR 0 1
29330: PPUSH
29331: CALL_OW 25
29335: ST_TO_ADDR
// result := unit ;
29336: LD_ADDR_VAR 0 4
29340: PUSH
29341: LD_VAR 0 5
29345: ST_TO_ADDR
// end ;
29346: LD_VAR 0 4
29350: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29351: LD_INT 0
29353: PPUSH
29354: PPUSH
// if not side or not nation then
29355: LD_VAR 0 1
29359: NOT
29360: PUSH
29361: LD_VAR 0 2
29365: NOT
29366: OR
29367: IFFALSE 29371
// exit ;
29369: GO 30135
// case nation of nation_american :
29371: LD_VAR 0 2
29375: PUSH
29376: LD_INT 1
29378: DOUBLE
29379: EQUAL
29380: IFTRUE 29384
29382: GO 29598
29384: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29385: LD_ADDR_VAR 0 4
29389: PUSH
29390: LD_INT 35
29392: PUSH
29393: LD_INT 45
29395: PUSH
29396: LD_INT 46
29398: PUSH
29399: LD_INT 47
29401: PUSH
29402: LD_INT 82
29404: PUSH
29405: LD_INT 83
29407: PUSH
29408: LD_INT 84
29410: PUSH
29411: LD_INT 85
29413: PUSH
29414: LD_INT 86
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 2
29422: PUSH
29423: LD_INT 6
29425: PUSH
29426: LD_INT 15
29428: PUSH
29429: LD_INT 16
29431: PUSH
29432: LD_INT 7
29434: PUSH
29435: LD_INT 12
29437: PUSH
29438: LD_INT 13
29440: PUSH
29441: LD_INT 10
29443: PUSH
29444: LD_INT 14
29446: PUSH
29447: LD_INT 20
29449: PUSH
29450: LD_INT 21
29452: PUSH
29453: LD_INT 22
29455: PUSH
29456: LD_INT 25
29458: PUSH
29459: LD_INT 32
29461: PUSH
29462: LD_INT 27
29464: PUSH
29465: LD_INT 36
29467: PUSH
29468: LD_INT 69
29470: PUSH
29471: LD_INT 39
29473: PUSH
29474: LD_INT 34
29476: PUSH
29477: LD_INT 40
29479: PUSH
29480: LD_INT 48
29482: PUSH
29483: LD_INT 49
29485: PUSH
29486: LD_INT 50
29488: PUSH
29489: LD_INT 51
29491: PUSH
29492: LD_INT 52
29494: PUSH
29495: LD_INT 53
29497: PUSH
29498: LD_INT 54
29500: PUSH
29501: LD_INT 55
29503: PUSH
29504: LD_INT 56
29506: PUSH
29507: LD_INT 57
29509: PUSH
29510: LD_INT 58
29512: PUSH
29513: LD_INT 59
29515: PUSH
29516: LD_INT 60
29518: PUSH
29519: LD_INT 61
29521: PUSH
29522: LD_INT 62
29524: PUSH
29525: LD_INT 80
29527: PUSH
29528: LD_INT 82
29530: PUSH
29531: LD_INT 83
29533: PUSH
29534: LD_INT 84
29536: PUSH
29537: LD_INT 85
29539: PUSH
29540: LD_INT 86
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: ST_TO_ADDR
29596: GO 30059
29598: LD_INT 2
29600: DOUBLE
29601: EQUAL
29602: IFTRUE 29606
29604: GO 29828
29606: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29607: LD_ADDR_VAR 0 4
29611: PUSH
29612: LD_INT 35
29614: PUSH
29615: LD_INT 45
29617: PUSH
29618: LD_INT 46
29620: PUSH
29621: LD_INT 47
29623: PUSH
29624: LD_INT 82
29626: PUSH
29627: LD_INT 83
29629: PUSH
29630: LD_INT 84
29632: PUSH
29633: LD_INT 85
29635: PUSH
29636: LD_INT 87
29638: PUSH
29639: LD_INT 70
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: LD_INT 11
29647: PUSH
29648: LD_INT 3
29650: PUSH
29651: LD_INT 4
29653: PUSH
29654: LD_INT 5
29656: PUSH
29657: LD_INT 6
29659: PUSH
29660: LD_INT 15
29662: PUSH
29663: LD_INT 18
29665: PUSH
29666: LD_INT 7
29668: PUSH
29669: LD_INT 17
29671: PUSH
29672: LD_INT 8
29674: PUSH
29675: LD_INT 20
29677: PUSH
29678: LD_INT 21
29680: PUSH
29681: LD_INT 22
29683: PUSH
29684: LD_INT 72
29686: PUSH
29687: LD_INT 26
29689: PUSH
29690: LD_INT 69
29692: PUSH
29693: LD_INT 39
29695: PUSH
29696: LD_INT 40
29698: PUSH
29699: LD_INT 41
29701: PUSH
29702: LD_INT 42
29704: PUSH
29705: LD_INT 43
29707: PUSH
29708: LD_INT 48
29710: PUSH
29711: LD_INT 49
29713: PUSH
29714: LD_INT 50
29716: PUSH
29717: LD_INT 51
29719: PUSH
29720: LD_INT 52
29722: PUSH
29723: LD_INT 53
29725: PUSH
29726: LD_INT 54
29728: PUSH
29729: LD_INT 55
29731: PUSH
29732: LD_INT 56
29734: PUSH
29735: LD_INT 60
29737: PUSH
29738: LD_INT 61
29740: PUSH
29741: LD_INT 62
29743: PUSH
29744: LD_INT 66
29746: PUSH
29747: LD_INT 67
29749: PUSH
29750: LD_INT 68
29752: PUSH
29753: LD_INT 81
29755: PUSH
29756: LD_INT 82
29758: PUSH
29759: LD_INT 83
29761: PUSH
29762: LD_INT 84
29764: PUSH
29765: LD_INT 85
29767: PUSH
29768: LD_INT 87
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: ST_TO_ADDR
29826: GO 30059
29828: LD_INT 3
29830: DOUBLE
29831: EQUAL
29832: IFTRUE 29836
29834: GO 30058
29836: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29837: LD_ADDR_VAR 0 4
29841: PUSH
29842: LD_INT 46
29844: PUSH
29845: LD_INT 47
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: LD_INT 2
29853: PUSH
29854: LD_INT 82
29856: PUSH
29857: LD_INT 83
29859: PUSH
29860: LD_INT 84
29862: PUSH
29863: LD_INT 85
29865: PUSH
29866: LD_INT 86
29868: PUSH
29869: LD_INT 11
29871: PUSH
29872: LD_INT 9
29874: PUSH
29875: LD_INT 20
29877: PUSH
29878: LD_INT 19
29880: PUSH
29881: LD_INT 21
29883: PUSH
29884: LD_INT 24
29886: PUSH
29887: LD_INT 22
29889: PUSH
29890: LD_INT 25
29892: PUSH
29893: LD_INT 28
29895: PUSH
29896: LD_INT 29
29898: PUSH
29899: LD_INT 30
29901: PUSH
29902: LD_INT 31
29904: PUSH
29905: LD_INT 37
29907: PUSH
29908: LD_INT 38
29910: PUSH
29911: LD_INT 32
29913: PUSH
29914: LD_INT 27
29916: PUSH
29917: LD_INT 33
29919: PUSH
29920: LD_INT 69
29922: PUSH
29923: LD_INT 39
29925: PUSH
29926: LD_INT 34
29928: PUSH
29929: LD_INT 40
29931: PUSH
29932: LD_INT 71
29934: PUSH
29935: LD_INT 23
29937: PUSH
29938: LD_INT 44
29940: PUSH
29941: LD_INT 48
29943: PUSH
29944: LD_INT 49
29946: PUSH
29947: LD_INT 50
29949: PUSH
29950: LD_INT 51
29952: PUSH
29953: LD_INT 52
29955: PUSH
29956: LD_INT 53
29958: PUSH
29959: LD_INT 54
29961: PUSH
29962: LD_INT 55
29964: PUSH
29965: LD_INT 56
29967: PUSH
29968: LD_INT 57
29970: PUSH
29971: LD_INT 58
29973: PUSH
29974: LD_INT 59
29976: PUSH
29977: LD_INT 63
29979: PUSH
29980: LD_INT 64
29982: PUSH
29983: LD_INT 65
29985: PUSH
29986: LD_INT 82
29988: PUSH
29989: LD_INT 83
29991: PUSH
29992: LD_INT 84
29994: PUSH
29995: LD_INT 85
29997: PUSH
29998: LD_INT 86
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: ST_TO_ADDR
30056: GO 30059
30058: POP
// if state > - 1 and state < 3 then
30059: LD_VAR 0 3
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: GREATER
30068: PUSH
30069: LD_VAR 0 3
30073: PUSH
30074: LD_INT 3
30076: LESS
30077: AND
30078: IFFALSE 30135
// for i in result do
30080: LD_ADDR_VAR 0 5
30084: PUSH
30085: LD_VAR 0 4
30089: PUSH
30090: FOR_IN
30091: IFFALSE 30133
// if GetTech ( i , side ) <> state then
30093: LD_VAR 0 5
30097: PPUSH
30098: LD_VAR 0 1
30102: PPUSH
30103: CALL_OW 321
30107: PUSH
30108: LD_VAR 0 3
30112: NONEQUAL
30113: IFFALSE 30131
// result := result diff i ;
30115: LD_ADDR_VAR 0 4
30119: PUSH
30120: LD_VAR 0 4
30124: PUSH
30125: LD_VAR 0 5
30129: DIFF
30130: ST_TO_ADDR
30131: GO 30090
30133: POP
30134: POP
// end ;
30135: LD_VAR 0 4
30139: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30140: LD_INT 0
30142: PPUSH
30143: PPUSH
30144: PPUSH
// result := true ;
30145: LD_ADDR_VAR 0 3
30149: PUSH
30150: LD_INT 1
30152: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30153: LD_ADDR_VAR 0 5
30157: PUSH
30158: LD_VAR 0 2
30162: PPUSH
30163: CALL_OW 480
30167: ST_TO_ADDR
// if not tmp then
30168: LD_VAR 0 5
30172: NOT
30173: IFFALSE 30177
// exit ;
30175: GO 30226
// for i in tmp do
30177: LD_ADDR_VAR 0 4
30181: PUSH
30182: LD_VAR 0 5
30186: PUSH
30187: FOR_IN
30188: IFFALSE 30224
// if GetTech ( i , side ) <> state_researched then
30190: LD_VAR 0 4
30194: PPUSH
30195: LD_VAR 0 1
30199: PPUSH
30200: CALL_OW 321
30204: PUSH
30205: LD_INT 2
30207: NONEQUAL
30208: IFFALSE 30222
// begin result := false ;
30210: LD_ADDR_VAR 0 3
30214: PUSH
30215: LD_INT 0
30217: ST_TO_ADDR
// exit ;
30218: POP
30219: POP
30220: GO 30226
// end ;
30222: GO 30187
30224: POP
30225: POP
// end ;
30226: LD_VAR 0 3
30230: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30231: LD_INT 0
30233: PPUSH
30234: PPUSH
30235: PPUSH
30236: PPUSH
30237: PPUSH
30238: PPUSH
30239: PPUSH
30240: PPUSH
30241: PPUSH
30242: PPUSH
30243: PPUSH
30244: PPUSH
30245: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30246: LD_VAR 0 1
30250: NOT
30251: PUSH
30252: LD_VAR 0 1
30256: PPUSH
30257: CALL_OW 257
30261: PUSH
30262: LD_INT 9
30264: NONEQUAL
30265: OR
30266: IFFALSE 30270
// exit ;
30268: GO 30843
// side := GetSide ( unit ) ;
30270: LD_ADDR_VAR 0 9
30274: PUSH
30275: LD_VAR 0 1
30279: PPUSH
30280: CALL_OW 255
30284: ST_TO_ADDR
// tech_space := tech_spacanom ;
30285: LD_ADDR_VAR 0 12
30289: PUSH
30290: LD_INT 29
30292: ST_TO_ADDR
// tech_time := tech_taurad ;
30293: LD_ADDR_VAR 0 13
30297: PUSH
30298: LD_INT 28
30300: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30301: LD_ADDR_VAR 0 11
30305: PUSH
30306: LD_VAR 0 1
30310: PPUSH
30311: CALL_OW 310
30315: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30316: LD_VAR 0 11
30320: PPUSH
30321: CALL_OW 247
30325: PUSH
30326: LD_INT 2
30328: EQUAL
30329: IFFALSE 30333
// exit ;
30331: GO 30843
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30333: LD_ADDR_VAR 0 8
30337: PUSH
30338: LD_INT 81
30340: PUSH
30341: LD_VAR 0 9
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 3
30352: PUSH
30353: LD_INT 21
30355: PUSH
30356: LD_INT 3
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PPUSH
30371: CALL_OW 69
30375: ST_TO_ADDR
// if not tmp then
30376: LD_VAR 0 8
30380: NOT
30381: IFFALSE 30385
// exit ;
30383: GO 30843
// if in_unit then
30385: LD_VAR 0 11
30389: IFFALSE 30413
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30391: LD_ADDR_VAR 0 10
30395: PUSH
30396: LD_VAR 0 8
30400: PPUSH
30401: LD_VAR 0 11
30405: PPUSH
30406: CALL_OW 74
30410: ST_TO_ADDR
30411: GO 30433
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30413: LD_ADDR_VAR 0 10
30417: PUSH
30418: LD_VAR 0 8
30422: PPUSH
30423: LD_VAR 0 1
30427: PPUSH
30428: CALL_OW 74
30432: ST_TO_ADDR
// if not enemy then
30433: LD_VAR 0 10
30437: NOT
30438: IFFALSE 30442
// exit ;
30440: GO 30843
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30442: LD_VAR 0 11
30446: PUSH
30447: LD_VAR 0 11
30451: PPUSH
30452: LD_VAR 0 10
30456: PPUSH
30457: CALL_OW 296
30461: PUSH
30462: LD_INT 13
30464: GREATER
30465: AND
30466: PUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: LD_VAR 0 10
30476: PPUSH
30477: CALL_OW 296
30481: PUSH
30482: LD_INT 12
30484: GREATER
30485: OR
30486: IFFALSE 30490
// exit ;
30488: GO 30843
// missile := [ 1 ] ;
30490: LD_ADDR_VAR 0 14
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: EMPTY
30499: LIST
30500: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30501: LD_VAR 0 9
30505: PPUSH
30506: LD_VAR 0 12
30510: PPUSH
30511: CALL_OW 325
30515: IFFALSE 30544
// missile := Insert ( missile , missile + 1 , 2 ) ;
30517: LD_ADDR_VAR 0 14
30521: PUSH
30522: LD_VAR 0 14
30526: PPUSH
30527: LD_VAR 0 14
30531: PUSH
30532: LD_INT 1
30534: PLUS
30535: PPUSH
30536: LD_INT 2
30538: PPUSH
30539: CALL_OW 2
30543: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30544: LD_VAR 0 9
30548: PPUSH
30549: LD_VAR 0 13
30553: PPUSH
30554: CALL_OW 325
30558: PUSH
30559: LD_VAR 0 10
30563: PPUSH
30564: CALL_OW 255
30568: PPUSH
30569: LD_VAR 0 13
30573: PPUSH
30574: CALL_OW 325
30578: NOT
30579: AND
30580: IFFALSE 30609
// missile := Insert ( missile , missile + 1 , 3 ) ;
30582: LD_ADDR_VAR 0 14
30586: PUSH
30587: LD_VAR 0 14
30591: PPUSH
30592: LD_VAR 0 14
30596: PUSH
30597: LD_INT 1
30599: PLUS
30600: PPUSH
30601: LD_INT 3
30603: PPUSH
30604: CALL_OW 2
30608: ST_TO_ADDR
// if missile < 2 then
30609: LD_VAR 0 14
30613: PUSH
30614: LD_INT 2
30616: LESS
30617: IFFALSE 30621
// exit ;
30619: GO 30843
// x := GetX ( enemy ) ;
30621: LD_ADDR_VAR 0 4
30625: PUSH
30626: LD_VAR 0 10
30630: PPUSH
30631: CALL_OW 250
30635: ST_TO_ADDR
// y := GetY ( enemy ) ;
30636: LD_ADDR_VAR 0 5
30640: PUSH
30641: LD_VAR 0 10
30645: PPUSH
30646: CALL_OW 251
30650: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30651: LD_ADDR_VAR 0 6
30655: PUSH
30656: LD_VAR 0 4
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PPUSH
30665: LD_INT 1
30667: PPUSH
30668: CALL_OW 12
30672: PLUS
30673: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30674: LD_ADDR_VAR 0 7
30678: PUSH
30679: LD_VAR 0 5
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PPUSH
30688: LD_INT 1
30690: PPUSH
30691: CALL_OW 12
30695: PLUS
30696: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30697: LD_VAR 0 6
30701: PPUSH
30702: LD_VAR 0 7
30706: PPUSH
30707: CALL_OW 488
30711: NOT
30712: IFFALSE 30734
// begin _x := x ;
30714: LD_ADDR_VAR 0 6
30718: PUSH
30719: LD_VAR 0 4
30723: ST_TO_ADDR
// _y := y ;
30724: LD_ADDR_VAR 0 7
30728: PUSH
30729: LD_VAR 0 5
30733: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30734: LD_ADDR_VAR 0 3
30738: PUSH
30739: LD_INT 1
30741: PPUSH
30742: LD_VAR 0 14
30746: PPUSH
30747: CALL_OW 12
30751: ST_TO_ADDR
// case i of 1 :
30752: LD_VAR 0 3
30756: PUSH
30757: LD_INT 1
30759: DOUBLE
30760: EQUAL
30761: IFTRUE 30765
30763: GO 30782
30765: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30766: LD_VAR 0 1
30770: PPUSH
30771: LD_VAR 0 10
30775: PPUSH
30776: CALL_OW 115
30780: GO 30843
30782: LD_INT 2
30784: DOUBLE
30785: EQUAL
30786: IFTRUE 30790
30788: GO 30812
30790: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30791: LD_VAR 0 1
30795: PPUSH
30796: LD_VAR 0 6
30800: PPUSH
30801: LD_VAR 0 7
30805: PPUSH
30806: CALL_OW 153
30810: GO 30843
30812: LD_INT 3
30814: DOUBLE
30815: EQUAL
30816: IFTRUE 30820
30818: GO 30842
30820: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30821: LD_VAR 0 1
30825: PPUSH
30826: LD_VAR 0 6
30830: PPUSH
30831: LD_VAR 0 7
30835: PPUSH
30836: CALL_OW 154
30840: GO 30843
30842: POP
// end ;
30843: LD_VAR 0 2
30847: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30848: LD_INT 0
30850: PPUSH
30851: PPUSH
30852: PPUSH
30853: PPUSH
30854: PPUSH
30855: PPUSH
// if not unit or not building then
30856: LD_VAR 0 1
30860: NOT
30861: PUSH
30862: LD_VAR 0 2
30866: NOT
30867: OR
30868: IFFALSE 30872
// exit ;
30870: GO 31030
// x := GetX ( building ) ;
30872: LD_ADDR_VAR 0 5
30876: PUSH
30877: LD_VAR 0 2
30881: PPUSH
30882: CALL_OW 250
30886: ST_TO_ADDR
// y := GetY ( building ) ;
30887: LD_ADDR_VAR 0 6
30891: PUSH
30892: LD_VAR 0 2
30896: PPUSH
30897: CALL_OW 251
30901: ST_TO_ADDR
// for i = 0 to 5 do
30902: LD_ADDR_VAR 0 4
30906: PUSH
30907: DOUBLE
30908: LD_INT 0
30910: DEC
30911: ST_TO_ADDR
30912: LD_INT 5
30914: PUSH
30915: FOR_TO
30916: IFFALSE 31028
// begin _x := ShiftX ( x , i , 3 ) ;
30918: LD_ADDR_VAR 0 7
30922: PUSH
30923: LD_VAR 0 5
30927: PPUSH
30928: LD_VAR 0 4
30932: PPUSH
30933: LD_INT 3
30935: PPUSH
30936: CALL_OW 272
30940: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30941: LD_ADDR_VAR 0 8
30945: PUSH
30946: LD_VAR 0 6
30950: PPUSH
30951: LD_VAR 0 4
30955: PPUSH
30956: LD_INT 3
30958: PPUSH
30959: CALL_OW 273
30963: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30964: LD_VAR 0 7
30968: PPUSH
30969: LD_VAR 0 8
30973: PPUSH
30974: CALL_OW 488
30978: NOT
30979: IFFALSE 30983
// continue ;
30981: GO 30915
// if HexInfo ( _x , _y ) = 0 then
30983: LD_VAR 0 7
30987: PPUSH
30988: LD_VAR 0 8
30992: PPUSH
30993: CALL_OW 428
30997: PUSH
30998: LD_INT 0
31000: EQUAL
31001: IFFALSE 31026
// begin ComMoveXY ( unit , _x , _y ) ;
31003: LD_VAR 0 1
31007: PPUSH
31008: LD_VAR 0 7
31012: PPUSH
31013: LD_VAR 0 8
31017: PPUSH
31018: CALL_OW 111
// exit ;
31022: POP
31023: POP
31024: GO 31030
// end ; end ;
31026: GO 30915
31028: POP
31029: POP
// end ;
31030: LD_VAR 0 3
31034: RET
// export function ScanBase ( side , base_area ) ; begin
31035: LD_INT 0
31037: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31038: LD_ADDR_VAR 0 3
31042: PUSH
31043: LD_VAR 0 2
31047: PPUSH
31048: LD_INT 81
31050: PUSH
31051: LD_VAR 0 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PPUSH
31060: CALL_OW 70
31064: ST_TO_ADDR
// end ;
31065: LD_VAR 0 3
31069: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31070: LD_INT 0
31072: PPUSH
31073: PPUSH
31074: PPUSH
31075: PPUSH
// result := false ;
31076: LD_ADDR_VAR 0 2
31080: PUSH
31081: LD_INT 0
31083: ST_TO_ADDR
// side := GetSide ( unit ) ;
31084: LD_ADDR_VAR 0 3
31088: PUSH
31089: LD_VAR 0 1
31093: PPUSH
31094: CALL_OW 255
31098: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31099: LD_ADDR_VAR 0 4
31103: PUSH
31104: LD_VAR 0 1
31108: PPUSH
31109: CALL_OW 248
31113: ST_TO_ADDR
// case nat of 1 :
31114: LD_VAR 0 4
31118: PUSH
31119: LD_INT 1
31121: DOUBLE
31122: EQUAL
31123: IFTRUE 31127
31125: GO 31138
31127: POP
// tech := tech_lassight ; 2 :
31128: LD_ADDR_VAR 0 5
31132: PUSH
31133: LD_INT 12
31135: ST_TO_ADDR
31136: GO 31177
31138: LD_INT 2
31140: DOUBLE
31141: EQUAL
31142: IFTRUE 31146
31144: GO 31157
31146: POP
// tech := tech_mortar ; 3 :
31147: LD_ADDR_VAR 0 5
31151: PUSH
31152: LD_INT 41
31154: ST_TO_ADDR
31155: GO 31177
31157: LD_INT 3
31159: DOUBLE
31160: EQUAL
31161: IFTRUE 31165
31163: GO 31176
31165: POP
// tech := tech_bazooka ; end ;
31166: LD_ADDR_VAR 0 5
31170: PUSH
31171: LD_INT 44
31173: ST_TO_ADDR
31174: GO 31177
31176: POP
// if Researched ( side , tech ) then
31177: LD_VAR 0 3
31181: PPUSH
31182: LD_VAR 0 5
31186: PPUSH
31187: CALL_OW 325
31191: IFFALSE 31218
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31193: LD_ADDR_VAR 0 2
31197: PUSH
31198: LD_INT 5
31200: PUSH
31201: LD_INT 8
31203: PUSH
31204: LD_INT 9
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: LIST
31211: PUSH
31212: LD_VAR 0 4
31216: ARRAY
31217: ST_TO_ADDR
// end ;
31218: LD_VAR 0 2
31222: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31223: LD_INT 0
31225: PPUSH
31226: PPUSH
31227: PPUSH
// if not mines then
31228: LD_VAR 0 2
31232: NOT
31233: IFFALSE 31237
// exit ;
31235: GO 31381
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31237: LD_ADDR_VAR 0 5
31241: PUSH
31242: LD_INT 81
31244: PUSH
31245: LD_VAR 0 1
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 3
31256: PUSH
31257: LD_INT 21
31259: PUSH
31260: LD_INT 3
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PPUSH
31275: CALL_OW 69
31279: ST_TO_ADDR
// for i in mines do
31280: LD_ADDR_VAR 0 4
31284: PUSH
31285: LD_VAR 0 2
31289: PUSH
31290: FOR_IN
31291: IFFALSE 31379
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31293: LD_VAR 0 4
31297: PUSH
31298: LD_INT 1
31300: ARRAY
31301: PPUSH
31302: LD_VAR 0 4
31306: PUSH
31307: LD_INT 2
31309: ARRAY
31310: PPUSH
31311: CALL_OW 458
31315: NOT
31316: IFFALSE 31320
// continue ;
31318: GO 31290
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31320: LD_VAR 0 4
31324: PUSH
31325: LD_INT 1
31327: ARRAY
31328: PPUSH
31329: LD_VAR 0 4
31333: PUSH
31334: LD_INT 2
31336: ARRAY
31337: PPUSH
31338: CALL_OW 428
31342: PUSH
31343: LD_VAR 0 5
31347: IN
31348: IFFALSE 31377
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31350: LD_VAR 0 4
31354: PUSH
31355: LD_INT 1
31357: ARRAY
31358: PPUSH
31359: LD_VAR 0 4
31363: PUSH
31364: LD_INT 2
31366: ARRAY
31367: PPUSH
31368: LD_VAR 0 1
31372: PPUSH
31373: CALL_OW 456
// end ;
31377: GO 31290
31379: POP
31380: POP
// end ;
31381: LD_VAR 0 3
31385: RET
// export function Count ( array ) ; var i ; begin
31386: LD_INT 0
31388: PPUSH
31389: PPUSH
// result := 0 ;
31390: LD_ADDR_VAR 0 2
31394: PUSH
31395: LD_INT 0
31397: ST_TO_ADDR
// for i in array do
31398: LD_ADDR_VAR 0 3
31402: PUSH
31403: LD_VAR 0 1
31407: PUSH
31408: FOR_IN
31409: IFFALSE 31433
// if i then
31411: LD_VAR 0 3
31415: IFFALSE 31431
// result := result + 1 ;
31417: LD_ADDR_VAR 0 2
31421: PUSH
31422: LD_VAR 0 2
31426: PUSH
31427: LD_INT 1
31429: PLUS
31430: ST_TO_ADDR
31431: GO 31408
31433: POP
31434: POP
// end ;
31435: LD_VAR 0 2
31439: RET
// export function IsEmpty ( building ) ; begin
31440: LD_INT 0
31442: PPUSH
// if not building then
31443: LD_VAR 0 1
31447: NOT
31448: IFFALSE 31452
// exit ;
31450: GO 31495
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31452: LD_ADDR_VAR 0 2
31456: PUSH
31457: LD_VAR 0 1
31461: PUSH
31462: LD_INT 22
31464: PUSH
31465: LD_VAR 0 1
31469: PPUSH
31470: CALL_OW 255
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 58
31481: PUSH
31482: EMPTY
31483: LIST
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PPUSH
31489: CALL_OW 69
31493: IN
31494: ST_TO_ADDR
// end ;
31495: LD_VAR 0 2
31499: RET
// export function IsNotFull ( building ) ; begin
31500: LD_INT 0
31502: PPUSH
// if not building then
31503: LD_VAR 0 1
31507: NOT
31508: IFFALSE 31512
// exit ;
31510: GO 31531
// result := UnitsInside ( building ) < 6 ;
31512: LD_ADDR_VAR 0 2
31516: PUSH
31517: LD_VAR 0 1
31521: PPUSH
31522: CALL_OW 313
31526: PUSH
31527: LD_INT 6
31529: LESS
31530: ST_TO_ADDR
// end ;
31531: LD_VAR 0 2
31535: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31536: LD_INT 0
31538: PPUSH
31539: PPUSH
31540: PPUSH
31541: PPUSH
// tmp := [ ] ;
31542: LD_ADDR_VAR 0 3
31546: PUSH
31547: EMPTY
31548: ST_TO_ADDR
// list := [ ] ;
31549: LD_ADDR_VAR 0 5
31553: PUSH
31554: EMPTY
31555: ST_TO_ADDR
// for i = 16 to 25 do
31556: LD_ADDR_VAR 0 4
31560: PUSH
31561: DOUBLE
31562: LD_INT 16
31564: DEC
31565: ST_TO_ADDR
31566: LD_INT 25
31568: PUSH
31569: FOR_TO
31570: IFFALSE 31643
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31572: LD_ADDR_VAR 0 3
31576: PUSH
31577: LD_VAR 0 3
31581: PUSH
31582: LD_INT 22
31584: PUSH
31585: LD_VAR 0 1
31589: PPUSH
31590: CALL_OW 255
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 91
31601: PUSH
31602: LD_VAR 0 1
31606: PUSH
31607: LD_INT 6
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 30
31617: PUSH
31618: LD_VAR 0 4
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: PUSH
31632: EMPTY
31633: LIST
31634: PPUSH
31635: CALL_OW 69
31639: ADD
31640: ST_TO_ADDR
31641: GO 31569
31643: POP
31644: POP
// for i = 1 to tmp do
31645: LD_ADDR_VAR 0 4
31649: PUSH
31650: DOUBLE
31651: LD_INT 1
31653: DEC
31654: ST_TO_ADDR
31655: LD_VAR 0 3
31659: PUSH
31660: FOR_TO
31661: IFFALSE 31749
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31663: LD_ADDR_VAR 0 5
31667: PUSH
31668: LD_VAR 0 5
31672: PUSH
31673: LD_VAR 0 3
31677: PUSH
31678: LD_VAR 0 4
31682: ARRAY
31683: PPUSH
31684: CALL_OW 266
31688: PUSH
31689: LD_VAR 0 3
31693: PUSH
31694: LD_VAR 0 4
31698: ARRAY
31699: PPUSH
31700: CALL_OW 250
31704: PUSH
31705: LD_VAR 0 3
31709: PUSH
31710: LD_VAR 0 4
31714: ARRAY
31715: PPUSH
31716: CALL_OW 251
31720: PUSH
31721: LD_VAR 0 3
31725: PUSH
31726: LD_VAR 0 4
31730: ARRAY
31731: PPUSH
31732: CALL_OW 254
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: PUSH
31743: EMPTY
31744: LIST
31745: ADD
31746: ST_TO_ADDR
31747: GO 31660
31749: POP
31750: POP
// result := list ;
31751: LD_ADDR_VAR 0 2
31755: PUSH
31756: LD_VAR 0 5
31760: ST_TO_ADDR
// end ;
31761: LD_VAR 0 2
31765: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31766: LD_INT 0
31768: PPUSH
31769: PPUSH
31770: PPUSH
31771: PPUSH
31772: PPUSH
31773: PPUSH
31774: PPUSH
// if not factory then
31775: LD_VAR 0 1
31779: NOT
31780: IFFALSE 31784
// exit ;
31782: GO 32377
// if control = control_apeman then
31784: LD_VAR 0 4
31788: PUSH
31789: LD_INT 5
31791: EQUAL
31792: IFFALSE 31901
// begin tmp := UnitsInside ( factory ) ;
31794: LD_ADDR_VAR 0 8
31798: PUSH
31799: LD_VAR 0 1
31803: PPUSH
31804: CALL_OW 313
31808: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31809: LD_VAR 0 8
31813: PPUSH
31814: LD_INT 25
31816: PUSH
31817: LD_INT 12
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PPUSH
31824: CALL_OW 72
31828: NOT
31829: IFFALSE 31839
// control := control_manual ;
31831: LD_ADDR_VAR 0 4
31835: PUSH
31836: LD_INT 1
31838: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31839: LD_ADDR_VAR 0 8
31843: PUSH
31844: LD_VAR 0 1
31848: PPUSH
31849: CALL 31536 0 1
31853: ST_TO_ADDR
// if tmp then
31854: LD_VAR 0 8
31858: IFFALSE 31901
// begin for i in tmp do
31860: LD_ADDR_VAR 0 7
31864: PUSH
31865: LD_VAR 0 8
31869: PUSH
31870: FOR_IN
31871: IFFALSE 31899
// if i [ 1 ] = b_ext_radio then
31873: LD_VAR 0 7
31877: PUSH
31878: LD_INT 1
31880: ARRAY
31881: PUSH
31882: LD_INT 22
31884: EQUAL
31885: IFFALSE 31897
// begin control := control_remote ;
31887: LD_ADDR_VAR 0 4
31891: PUSH
31892: LD_INT 2
31894: ST_TO_ADDR
// break ;
31895: GO 31899
// end ;
31897: GO 31870
31899: POP
31900: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31901: LD_VAR 0 1
31905: PPUSH
31906: LD_VAR 0 2
31910: PPUSH
31911: LD_VAR 0 3
31915: PPUSH
31916: LD_VAR 0 4
31920: PPUSH
31921: LD_VAR 0 5
31925: PPUSH
31926: CALL_OW 448
31930: IFFALSE 31965
// begin result := [ chassis , engine , control , weapon ] ;
31932: LD_ADDR_VAR 0 6
31936: PUSH
31937: LD_VAR 0 2
31941: PUSH
31942: LD_VAR 0 3
31946: PUSH
31947: LD_VAR 0 4
31951: PUSH
31952: LD_VAR 0 5
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: ST_TO_ADDR
// exit ;
31963: GO 32377
// end ; _chassis := AvailableChassisList ( factory ) ;
31965: LD_ADDR_VAR 0 9
31969: PUSH
31970: LD_VAR 0 1
31974: PPUSH
31975: CALL_OW 475
31979: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31980: LD_ADDR_VAR 0 11
31984: PUSH
31985: LD_VAR 0 1
31989: PPUSH
31990: CALL_OW 476
31994: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31995: LD_ADDR_VAR 0 12
31999: PUSH
32000: LD_VAR 0 1
32004: PPUSH
32005: CALL_OW 477
32009: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32010: LD_ADDR_VAR 0 10
32014: PUSH
32015: LD_VAR 0 1
32019: PPUSH
32020: CALL_OW 478
32024: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32025: LD_VAR 0 9
32029: NOT
32030: PUSH
32031: LD_VAR 0 11
32035: NOT
32036: OR
32037: PUSH
32038: LD_VAR 0 12
32042: NOT
32043: OR
32044: PUSH
32045: LD_VAR 0 10
32049: NOT
32050: OR
32051: IFFALSE 32086
// begin result := [ chassis , engine , control , weapon ] ;
32053: LD_ADDR_VAR 0 6
32057: PUSH
32058: LD_VAR 0 2
32062: PUSH
32063: LD_VAR 0 3
32067: PUSH
32068: LD_VAR 0 4
32072: PUSH
32073: LD_VAR 0 5
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: ST_TO_ADDR
// exit ;
32084: GO 32377
// end ; if not chassis in _chassis then
32086: LD_VAR 0 2
32090: PUSH
32091: LD_VAR 0 9
32095: IN
32096: NOT
32097: IFFALSE 32123
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32099: LD_ADDR_VAR 0 2
32103: PUSH
32104: LD_VAR 0 9
32108: PUSH
32109: LD_INT 1
32111: PPUSH
32112: LD_VAR 0 9
32116: PPUSH
32117: CALL_OW 12
32121: ARRAY
32122: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32123: LD_VAR 0 2
32127: PPUSH
32128: LD_VAR 0 3
32132: PPUSH
32133: CALL 32382 0 2
32137: NOT
32138: IFFALSE 32197
// repeat engine := _engine [ 1 ] ;
32140: LD_ADDR_VAR 0 3
32144: PUSH
32145: LD_VAR 0 11
32149: PUSH
32150: LD_INT 1
32152: ARRAY
32153: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32154: LD_ADDR_VAR 0 11
32158: PUSH
32159: LD_VAR 0 11
32163: PPUSH
32164: LD_INT 1
32166: PPUSH
32167: CALL_OW 3
32171: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32172: LD_VAR 0 2
32176: PPUSH
32177: LD_VAR 0 3
32181: PPUSH
32182: CALL 32382 0 2
32186: PUSH
32187: LD_VAR 0 11
32191: PUSH
32192: EMPTY
32193: EQUAL
32194: OR
32195: IFFALSE 32140
// if not control in _control then
32197: LD_VAR 0 4
32201: PUSH
32202: LD_VAR 0 12
32206: IN
32207: NOT
32208: IFFALSE 32234
// control := _control [ rand ( 1 , _control ) ] ;
32210: LD_ADDR_VAR 0 4
32214: PUSH
32215: LD_VAR 0 12
32219: PUSH
32220: LD_INT 1
32222: PPUSH
32223: LD_VAR 0 12
32227: PPUSH
32228: CALL_OW 12
32232: ARRAY
32233: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32234: LD_VAR 0 2
32238: PPUSH
32239: LD_VAR 0 5
32243: PPUSH
32244: CALL 32602 0 2
32248: NOT
32249: IFFALSE 32308
// repeat weapon := _weapon [ 1 ] ;
32251: LD_ADDR_VAR 0 5
32255: PUSH
32256: LD_VAR 0 10
32260: PUSH
32261: LD_INT 1
32263: ARRAY
32264: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32265: LD_ADDR_VAR 0 10
32269: PUSH
32270: LD_VAR 0 10
32274: PPUSH
32275: LD_INT 1
32277: PPUSH
32278: CALL_OW 3
32282: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32283: LD_VAR 0 2
32287: PPUSH
32288: LD_VAR 0 5
32292: PPUSH
32293: CALL 32602 0 2
32297: PUSH
32298: LD_VAR 0 10
32302: PUSH
32303: EMPTY
32304: EQUAL
32305: OR
32306: IFFALSE 32251
// result := [ ] ;
32308: LD_ADDR_VAR 0 6
32312: PUSH
32313: EMPTY
32314: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32315: LD_VAR 0 1
32319: PPUSH
32320: LD_VAR 0 2
32324: PPUSH
32325: LD_VAR 0 3
32329: PPUSH
32330: LD_VAR 0 4
32334: PPUSH
32335: LD_VAR 0 5
32339: PPUSH
32340: CALL_OW 448
32344: IFFALSE 32377
// result := [ chassis , engine , control , weapon ] ;
32346: LD_ADDR_VAR 0 6
32350: PUSH
32351: LD_VAR 0 2
32355: PUSH
32356: LD_VAR 0 3
32360: PUSH
32361: LD_VAR 0 4
32365: PUSH
32366: LD_VAR 0 5
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: ST_TO_ADDR
// end ;
32377: LD_VAR 0 6
32381: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32382: LD_INT 0
32384: PPUSH
// if not chassis or not engine then
32385: LD_VAR 0 1
32389: NOT
32390: PUSH
32391: LD_VAR 0 2
32395: NOT
32396: OR
32397: IFFALSE 32401
// exit ;
32399: GO 32597
// case engine of engine_solar :
32401: LD_VAR 0 2
32405: PUSH
32406: LD_INT 2
32408: DOUBLE
32409: EQUAL
32410: IFTRUE 32414
32412: GO 32452
32414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32415: LD_ADDR_VAR 0 3
32419: PUSH
32420: LD_INT 11
32422: PUSH
32423: LD_INT 12
32425: PUSH
32426: LD_INT 13
32428: PUSH
32429: LD_INT 14
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 3
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: ST_TO_ADDR
32450: GO 32581
32452: LD_INT 1
32454: DOUBLE
32455: EQUAL
32456: IFTRUE 32460
32458: GO 32522
32460: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32461: LD_ADDR_VAR 0 3
32465: PUSH
32466: LD_INT 11
32468: PUSH
32469: LD_INT 12
32471: PUSH
32472: LD_INT 13
32474: PUSH
32475: LD_INT 14
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 2
32483: PUSH
32484: LD_INT 3
32486: PUSH
32487: LD_INT 4
32489: PUSH
32490: LD_INT 5
32492: PUSH
32493: LD_INT 21
32495: PUSH
32496: LD_INT 23
32498: PUSH
32499: LD_INT 22
32501: PUSH
32502: LD_INT 24
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: ST_TO_ADDR
32520: GO 32581
32522: LD_INT 3
32524: DOUBLE
32525: EQUAL
32526: IFTRUE 32530
32528: GO 32580
32530: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32531: LD_ADDR_VAR 0 3
32535: PUSH
32536: LD_INT 13
32538: PUSH
32539: LD_INT 14
32541: PUSH
32542: LD_INT 2
32544: PUSH
32545: LD_INT 3
32547: PUSH
32548: LD_INT 4
32550: PUSH
32551: LD_INT 5
32553: PUSH
32554: LD_INT 21
32556: PUSH
32557: LD_INT 22
32559: PUSH
32560: LD_INT 23
32562: PUSH
32563: LD_INT 24
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: ST_TO_ADDR
32578: GO 32581
32580: POP
// result := ( chassis in result ) ;
32581: LD_ADDR_VAR 0 3
32585: PUSH
32586: LD_VAR 0 1
32590: PUSH
32591: LD_VAR 0 3
32595: IN
32596: ST_TO_ADDR
// end ;
32597: LD_VAR 0 3
32601: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32602: LD_INT 0
32604: PPUSH
// if not chassis or not weapon then
32605: LD_VAR 0 1
32609: NOT
32610: PUSH
32611: LD_VAR 0 2
32615: NOT
32616: OR
32617: IFFALSE 32621
// exit ;
32619: GO 33647
// case weapon of us_machine_gun :
32621: LD_VAR 0 2
32625: PUSH
32626: LD_INT 2
32628: DOUBLE
32629: EQUAL
32630: IFTRUE 32634
32632: GO 32664
32634: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32635: LD_ADDR_VAR 0 3
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: LD_INT 3
32648: PUSH
32649: LD_INT 4
32651: PUSH
32652: LD_INT 5
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: ST_TO_ADDR
32662: GO 33631
32664: LD_INT 3
32666: DOUBLE
32667: EQUAL
32668: IFTRUE 32672
32670: GO 32702
32672: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32673: LD_ADDR_VAR 0 3
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: LD_INT 3
32686: PUSH
32687: LD_INT 4
32689: PUSH
32690: LD_INT 5
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: ST_TO_ADDR
32700: GO 33631
32702: LD_INT 11
32704: DOUBLE
32705: EQUAL
32706: IFTRUE 32710
32708: GO 32740
32710: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32711: LD_ADDR_VAR 0 3
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: LD_INT 4
32727: PUSH
32728: LD_INT 5
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: ST_TO_ADDR
32738: GO 33631
32740: LD_INT 4
32742: DOUBLE
32743: EQUAL
32744: IFTRUE 32748
32746: GO 32774
32748: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32749: LD_ADDR_VAR 0 3
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: LD_INT 3
32759: PUSH
32760: LD_INT 4
32762: PUSH
32763: LD_INT 5
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: ST_TO_ADDR
32772: GO 33631
32774: LD_INT 5
32776: DOUBLE
32777: EQUAL
32778: IFTRUE 32782
32780: GO 32808
32782: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32783: LD_ADDR_VAR 0 3
32787: PUSH
32788: LD_INT 2
32790: PUSH
32791: LD_INT 3
32793: PUSH
32794: LD_INT 4
32796: PUSH
32797: LD_INT 5
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: ST_TO_ADDR
32806: GO 33631
32808: LD_INT 9
32810: DOUBLE
32811: EQUAL
32812: IFTRUE 32816
32814: GO 32842
32816: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32817: LD_ADDR_VAR 0 3
32821: PUSH
32822: LD_INT 2
32824: PUSH
32825: LD_INT 3
32827: PUSH
32828: LD_INT 4
32830: PUSH
32831: LD_INT 5
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: ST_TO_ADDR
32840: GO 33631
32842: LD_INT 7
32844: DOUBLE
32845: EQUAL
32846: IFTRUE 32850
32848: GO 32876
32850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32851: LD_ADDR_VAR 0 3
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: LD_INT 4
32864: PUSH
32865: LD_INT 5
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: ST_TO_ADDR
32874: GO 33631
32876: LD_INT 12
32878: DOUBLE
32879: EQUAL
32880: IFTRUE 32884
32882: GO 32910
32884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32885: LD_ADDR_VAR 0 3
32889: PUSH
32890: LD_INT 2
32892: PUSH
32893: LD_INT 3
32895: PUSH
32896: LD_INT 4
32898: PUSH
32899: LD_INT 5
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: ST_TO_ADDR
32908: GO 33631
32910: LD_INT 13
32912: DOUBLE
32913: EQUAL
32914: IFTRUE 32918
32916: GO 32944
32918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32919: LD_ADDR_VAR 0 3
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: LD_INT 3
32929: PUSH
32930: LD_INT 4
32932: PUSH
32933: LD_INT 5
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: ST_TO_ADDR
32942: GO 33631
32944: LD_INT 14
32946: DOUBLE
32947: EQUAL
32948: IFTRUE 32952
32950: GO 32970
32952: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32953: LD_ADDR_VAR 0 3
32957: PUSH
32958: LD_INT 4
32960: PUSH
32961: LD_INT 5
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: ST_TO_ADDR
32968: GO 33631
32970: LD_INT 6
32972: DOUBLE
32973: EQUAL
32974: IFTRUE 32978
32976: GO 32996
32978: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32979: LD_ADDR_VAR 0 3
32983: PUSH
32984: LD_INT 4
32986: PUSH
32987: LD_INT 5
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: ST_TO_ADDR
32994: GO 33631
32996: LD_INT 10
32998: DOUBLE
32999: EQUAL
33000: IFTRUE 33004
33002: GO 33022
33004: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33005: LD_ADDR_VAR 0 3
33009: PUSH
33010: LD_INT 4
33012: PUSH
33013: LD_INT 5
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: ST_TO_ADDR
33020: GO 33631
33022: LD_INT 22
33024: DOUBLE
33025: EQUAL
33026: IFTRUE 33030
33028: GO 33056
33030: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33031: LD_ADDR_VAR 0 3
33035: PUSH
33036: LD_INT 11
33038: PUSH
33039: LD_INT 12
33041: PUSH
33042: LD_INT 13
33044: PUSH
33045: LD_INT 14
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: ST_TO_ADDR
33054: GO 33631
33056: LD_INT 23
33058: DOUBLE
33059: EQUAL
33060: IFTRUE 33064
33062: GO 33090
33064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33065: LD_ADDR_VAR 0 3
33069: PUSH
33070: LD_INT 11
33072: PUSH
33073: LD_INT 12
33075: PUSH
33076: LD_INT 13
33078: PUSH
33079: LD_INT 14
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: ST_TO_ADDR
33088: GO 33631
33090: LD_INT 24
33092: DOUBLE
33093: EQUAL
33094: IFTRUE 33098
33096: GO 33124
33098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33099: LD_ADDR_VAR 0 3
33103: PUSH
33104: LD_INT 11
33106: PUSH
33107: LD_INT 12
33109: PUSH
33110: LD_INT 13
33112: PUSH
33113: LD_INT 14
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: ST_TO_ADDR
33122: GO 33631
33124: LD_INT 30
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33132
33130: GO 33158
33132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33133: LD_ADDR_VAR 0 3
33137: PUSH
33138: LD_INT 11
33140: PUSH
33141: LD_INT 12
33143: PUSH
33144: LD_INT 13
33146: PUSH
33147: LD_INT 14
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: ST_TO_ADDR
33156: GO 33631
33158: LD_INT 25
33160: DOUBLE
33161: EQUAL
33162: IFTRUE 33166
33164: GO 33184
33166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33167: LD_ADDR_VAR 0 3
33171: PUSH
33172: LD_INT 13
33174: PUSH
33175: LD_INT 14
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: ST_TO_ADDR
33182: GO 33631
33184: LD_INT 27
33186: DOUBLE
33187: EQUAL
33188: IFTRUE 33192
33190: GO 33210
33192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33193: LD_ADDR_VAR 0 3
33197: PUSH
33198: LD_INT 13
33200: PUSH
33201: LD_INT 14
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: ST_TO_ADDR
33208: GO 33631
33210: LD_INT 28
33212: DOUBLE
33213: EQUAL
33214: IFTRUE 33218
33216: GO 33236
33218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33219: LD_ADDR_VAR 0 3
33223: PUSH
33224: LD_INT 13
33226: PUSH
33227: LD_INT 14
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: ST_TO_ADDR
33234: GO 33631
33236: LD_INT 29
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33244
33242: GO 33262
33244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33245: LD_ADDR_VAR 0 3
33249: PUSH
33250: LD_INT 13
33252: PUSH
33253: LD_INT 14
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: ST_TO_ADDR
33260: GO 33631
33262: LD_INT 31
33264: DOUBLE
33265: EQUAL
33266: IFTRUE 33270
33268: GO 33288
33270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33271: LD_ADDR_VAR 0 3
33275: PUSH
33276: LD_INT 13
33278: PUSH
33279: LD_INT 14
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: ST_TO_ADDR
33286: GO 33631
33288: LD_INT 26
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33314
33296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33297: LD_ADDR_VAR 0 3
33301: PUSH
33302: LD_INT 13
33304: PUSH
33305: LD_INT 14
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: ST_TO_ADDR
33312: GO 33631
33314: LD_INT 42
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33348
33322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33323: LD_ADDR_VAR 0 3
33327: PUSH
33328: LD_INT 21
33330: PUSH
33331: LD_INT 22
33333: PUSH
33334: LD_INT 23
33336: PUSH
33337: LD_INT 24
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: ST_TO_ADDR
33346: GO 33631
33348: LD_INT 43
33350: DOUBLE
33351: EQUAL
33352: IFTRUE 33356
33354: GO 33382
33356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33357: LD_ADDR_VAR 0 3
33361: PUSH
33362: LD_INT 21
33364: PUSH
33365: LD_INT 22
33367: PUSH
33368: LD_INT 23
33370: PUSH
33371: LD_INT 24
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: ST_TO_ADDR
33380: GO 33631
33382: LD_INT 44
33384: DOUBLE
33385: EQUAL
33386: IFTRUE 33390
33388: GO 33416
33390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33391: LD_ADDR_VAR 0 3
33395: PUSH
33396: LD_INT 21
33398: PUSH
33399: LD_INT 22
33401: PUSH
33402: LD_INT 23
33404: PUSH
33405: LD_INT 24
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: ST_TO_ADDR
33414: GO 33631
33416: LD_INT 45
33418: DOUBLE
33419: EQUAL
33420: IFTRUE 33424
33422: GO 33450
33424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33425: LD_ADDR_VAR 0 3
33429: PUSH
33430: LD_INT 21
33432: PUSH
33433: LD_INT 22
33435: PUSH
33436: LD_INT 23
33438: PUSH
33439: LD_INT 24
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: ST_TO_ADDR
33448: GO 33631
33450: LD_INT 49
33452: DOUBLE
33453: EQUAL
33454: IFTRUE 33458
33456: GO 33484
33458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33459: LD_ADDR_VAR 0 3
33463: PUSH
33464: LD_INT 21
33466: PUSH
33467: LD_INT 22
33469: PUSH
33470: LD_INT 23
33472: PUSH
33473: LD_INT 24
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: ST_TO_ADDR
33482: GO 33631
33484: LD_INT 51
33486: DOUBLE
33487: EQUAL
33488: IFTRUE 33492
33490: GO 33518
33492: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33493: LD_ADDR_VAR 0 3
33497: PUSH
33498: LD_INT 21
33500: PUSH
33501: LD_INT 22
33503: PUSH
33504: LD_INT 23
33506: PUSH
33507: LD_INT 24
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: ST_TO_ADDR
33516: GO 33631
33518: LD_INT 52
33520: DOUBLE
33521: EQUAL
33522: IFTRUE 33526
33524: GO 33552
33526: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33527: LD_ADDR_VAR 0 3
33531: PUSH
33532: LD_INT 21
33534: PUSH
33535: LD_INT 22
33537: PUSH
33538: LD_INT 23
33540: PUSH
33541: LD_INT 24
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: ST_TO_ADDR
33550: GO 33631
33552: LD_INT 53
33554: DOUBLE
33555: EQUAL
33556: IFTRUE 33560
33558: GO 33578
33560: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33561: LD_ADDR_VAR 0 3
33565: PUSH
33566: LD_INT 23
33568: PUSH
33569: LD_INT 24
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: ST_TO_ADDR
33576: GO 33631
33578: LD_INT 46
33580: DOUBLE
33581: EQUAL
33582: IFTRUE 33586
33584: GO 33604
33586: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33587: LD_ADDR_VAR 0 3
33591: PUSH
33592: LD_INT 23
33594: PUSH
33595: LD_INT 24
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: ST_TO_ADDR
33602: GO 33631
33604: LD_INT 47
33606: DOUBLE
33607: EQUAL
33608: IFTRUE 33612
33610: GO 33630
33612: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: LD_INT 23
33620: PUSH
33621: LD_INT 24
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: ST_TO_ADDR
33628: GO 33631
33630: POP
// result := ( chassis in result ) ;
33631: LD_ADDR_VAR 0 3
33635: PUSH
33636: LD_VAR 0 1
33640: PUSH
33641: LD_VAR 0 3
33645: IN
33646: ST_TO_ADDR
// end ;
33647: LD_VAR 0 3
33651: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33652: LD_INT 0
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
33658: PPUSH
33659: PPUSH
33660: PPUSH
// result := array ;
33661: LD_ADDR_VAR 0 5
33665: PUSH
33666: LD_VAR 0 1
33670: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33671: LD_VAR 0 1
33675: NOT
33676: PUSH
33677: LD_VAR 0 2
33681: NOT
33682: OR
33683: PUSH
33684: LD_VAR 0 3
33688: NOT
33689: OR
33690: PUSH
33691: LD_VAR 0 2
33695: PUSH
33696: LD_VAR 0 1
33700: GREATER
33701: OR
33702: PUSH
33703: LD_VAR 0 3
33707: PUSH
33708: LD_VAR 0 1
33712: GREATER
33713: OR
33714: IFFALSE 33718
// exit ;
33716: GO 34014
// if direction then
33718: LD_VAR 0 4
33722: IFFALSE 33786
// begin d := 1 ;
33724: LD_ADDR_VAR 0 9
33728: PUSH
33729: LD_INT 1
33731: ST_TO_ADDR
// if i_from > i_to then
33732: LD_VAR 0 2
33736: PUSH
33737: LD_VAR 0 3
33741: GREATER
33742: IFFALSE 33768
// length := ( array - i_from ) + i_to else
33744: LD_ADDR_VAR 0 11
33748: PUSH
33749: LD_VAR 0 1
33753: PUSH
33754: LD_VAR 0 2
33758: MINUS
33759: PUSH
33760: LD_VAR 0 3
33764: PLUS
33765: ST_TO_ADDR
33766: GO 33784
// length := i_to - i_from ;
33768: LD_ADDR_VAR 0 11
33772: PUSH
33773: LD_VAR 0 3
33777: PUSH
33778: LD_VAR 0 2
33782: MINUS
33783: ST_TO_ADDR
// end else
33784: GO 33847
// begin d := - 1 ;
33786: LD_ADDR_VAR 0 9
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: ST_TO_ADDR
// if i_from > i_to then
33795: LD_VAR 0 2
33799: PUSH
33800: LD_VAR 0 3
33804: GREATER
33805: IFFALSE 33825
// length := i_from - i_to else
33807: LD_ADDR_VAR 0 11
33811: PUSH
33812: LD_VAR 0 2
33816: PUSH
33817: LD_VAR 0 3
33821: MINUS
33822: ST_TO_ADDR
33823: GO 33847
// length := ( array - i_to ) + i_from ;
33825: LD_ADDR_VAR 0 11
33829: PUSH
33830: LD_VAR 0 1
33834: PUSH
33835: LD_VAR 0 3
33839: MINUS
33840: PUSH
33841: LD_VAR 0 2
33845: PLUS
33846: ST_TO_ADDR
// end ; if not length then
33847: LD_VAR 0 11
33851: NOT
33852: IFFALSE 33856
// exit ;
33854: GO 34014
// tmp := array ;
33856: LD_ADDR_VAR 0 10
33860: PUSH
33861: LD_VAR 0 1
33865: ST_TO_ADDR
// for i = 1 to length do
33866: LD_ADDR_VAR 0 6
33870: PUSH
33871: DOUBLE
33872: LD_INT 1
33874: DEC
33875: ST_TO_ADDR
33876: LD_VAR 0 11
33880: PUSH
33881: FOR_TO
33882: IFFALSE 34002
// begin for j = 1 to array do
33884: LD_ADDR_VAR 0 7
33888: PUSH
33889: DOUBLE
33890: LD_INT 1
33892: DEC
33893: ST_TO_ADDR
33894: LD_VAR 0 1
33898: PUSH
33899: FOR_TO
33900: IFFALSE 33988
// begin k := j + d ;
33902: LD_ADDR_VAR 0 8
33906: PUSH
33907: LD_VAR 0 7
33911: PUSH
33912: LD_VAR 0 9
33916: PLUS
33917: ST_TO_ADDR
// if k > array then
33918: LD_VAR 0 8
33922: PUSH
33923: LD_VAR 0 1
33927: GREATER
33928: IFFALSE 33938
// k := 1 ;
33930: LD_ADDR_VAR 0 8
33934: PUSH
33935: LD_INT 1
33937: ST_TO_ADDR
// if not k then
33938: LD_VAR 0 8
33942: NOT
33943: IFFALSE 33955
// k := array ;
33945: LD_ADDR_VAR 0 8
33949: PUSH
33950: LD_VAR 0 1
33954: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33955: LD_ADDR_VAR 0 10
33959: PUSH
33960: LD_VAR 0 10
33964: PPUSH
33965: LD_VAR 0 8
33969: PPUSH
33970: LD_VAR 0 1
33974: PUSH
33975: LD_VAR 0 7
33979: ARRAY
33980: PPUSH
33981: CALL_OW 1
33985: ST_TO_ADDR
// end ;
33986: GO 33899
33988: POP
33989: POP
// array := tmp ;
33990: LD_ADDR_VAR 0 1
33994: PUSH
33995: LD_VAR 0 10
33999: ST_TO_ADDR
// end ;
34000: GO 33881
34002: POP
34003: POP
// result := array ;
34004: LD_ADDR_VAR 0 5
34008: PUSH
34009: LD_VAR 0 1
34013: ST_TO_ADDR
// end ;
34014: LD_VAR 0 5
34018: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34019: LD_INT 0
34021: PPUSH
34022: PPUSH
// result := 0 ;
34023: LD_ADDR_VAR 0 3
34027: PUSH
34028: LD_INT 0
34030: ST_TO_ADDR
// if not array or not value in array then
34031: LD_VAR 0 1
34035: NOT
34036: PUSH
34037: LD_VAR 0 2
34041: PUSH
34042: LD_VAR 0 1
34046: IN
34047: NOT
34048: OR
34049: IFFALSE 34053
// exit ;
34051: GO 34107
// for i = 1 to array do
34053: LD_ADDR_VAR 0 4
34057: PUSH
34058: DOUBLE
34059: LD_INT 1
34061: DEC
34062: ST_TO_ADDR
34063: LD_VAR 0 1
34067: PUSH
34068: FOR_TO
34069: IFFALSE 34105
// if value = array [ i ] then
34071: LD_VAR 0 2
34075: PUSH
34076: LD_VAR 0 1
34080: PUSH
34081: LD_VAR 0 4
34085: ARRAY
34086: EQUAL
34087: IFFALSE 34103
// begin result := i ;
34089: LD_ADDR_VAR 0 3
34093: PUSH
34094: LD_VAR 0 4
34098: ST_TO_ADDR
// exit ;
34099: POP
34100: POP
34101: GO 34107
// end ;
34103: GO 34068
34105: POP
34106: POP
// end ;
34107: LD_VAR 0 3
34111: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34112: LD_INT 0
34114: PPUSH
// vc_chassis := chassis ;
34115: LD_ADDR_OWVAR 37
34119: PUSH
34120: LD_VAR 0 1
34124: ST_TO_ADDR
// vc_engine := engine ;
34125: LD_ADDR_OWVAR 39
34129: PUSH
34130: LD_VAR 0 2
34134: ST_TO_ADDR
// vc_control := control ;
34135: LD_ADDR_OWVAR 38
34139: PUSH
34140: LD_VAR 0 3
34144: ST_TO_ADDR
// vc_weapon := weapon ;
34145: LD_ADDR_OWVAR 40
34149: PUSH
34150: LD_VAR 0 4
34154: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34155: LD_ADDR_OWVAR 41
34159: PUSH
34160: LD_VAR 0 5
34164: ST_TO_ADDR
// end ;
34165: LD_VAR 0 6
34169: RET
// export function WantPlant ( unit ) ; var task ; begin
34170: LD_INT 0
34172: PPUSH
34173: PPUSH
// result := false ;
34174: LD_ADDR_VAR 0 2
34178: PUSH
34179: LD_INT 0
34181: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34182: LD_ADDR_VAR 0 3
34186: PUSH
34187: LD_VAR 0 1
34191: PPUSH
34192: CALL_OW 437
34196: ST_TO_ADDR
// if task then
34197: LD_VAR 0 3
34201: IFFALSE 34229
// if task [ 1 ] [ 1 ] = p then
34203: LD_VAR 0 3
34207: PUSH
34208: LD_INT 1
34210: ARRAY
34211: PUSH
34212: LD_INT 1
34214: ARRAY
34215: PUSH
34216: LD_STRING p
34218: EQUAL
34219: IFFALSE 34229
// result := true ;
34221: LD_ADDR_VAR 0 2
34225: PUSH
34226: LD_INT 1
34228: ST_TO_ADDR
// end ;
34229: LD_VAR 0 2
34233: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34234: LD_INT 0
34236: PPUSH
34237: PPUSH
34238: PPUSH
34239: PPUSH
// if pos < 1 then
34240: LD_VAR 0 2
34244: PUSH
34245: LD_INT 1
34247: LESS
34248: IFFALSE 34252
// exit ;
34250: GO 34555
// if pos = 1 then
34252: LD_VAR 0 2
34256: PUSH
34257: LD_INT 1
34259: EQUAL
34260: IFFALSE 34293
// result := Replace ( arr , pos [ 1 ] , value ) else
34262: LD_ADDR_VAR 0 4
34266: PUSH
34267: LD_VAR 0 1
34271: PPUSH
34272: LD_VAR 0 2
34276: PUSH
34277: LD_INT 1
34279: ARRAY
34280: PPUSH
34281: LD_VAR 0 3
34285: PPUSH
34286: CALL_OW 1
34290: ST_TO_ADDR
34291: GO 34555
// begin tmp := arr ;
34293: LD_ADDR_VAR 0 6
34297: PUSH
34298: LD_VAR 0 1
34302: ST_TO_ADDR
// s_arr := [ tmp ] ;
34303: LD_ADDR_VAR 0 7
34307: PUSH
34308: LD_VAR 0 6
34312: PUSH
34313: EMPTY
34314: LIST
34315: ST_TO_ADDR
// for i = 1 to pos - 1 do
34316: LD_ADDR_VAR 0 5
34320: PUSH
34321: DOUBLE
34322: LD_INT 1
34324: DEC
34325: ST_TO_ADDR
34326: LD_VAR 0 2
34330: PUSH
34331: LD_INT 1
34333: MINUS
34334: PUSH
34335: FOR_TO
34336: IFFALSE 34381
// begin tmp := tmp [ pos [ i ] ] ;
34338: LD_ADDR_VAR 0 6
34342: PUSH
34343: LD_VAR 0 6
34347: PUSH
34348: LD_VAR 0 2
34352: PUSH
34353: LD_VAR 0 5
34357: ARRAY
34358: ARRAY
34359: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34360: LD_ADDR_VAR 0 7
34364: PUSH
34365: LD_VAR 0 7
34369: PUSH
34370: LD_VAR 0 6
34374: PUSH
34375: EMPTY
34376: LIST
34377: ADD
34378: ST_TO_ADDR
// end ;
34379: GO 34335
34381: POP
34382: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34383: LD_ADDR_VAR 0 6
34387: PUSH
34388: LD_VAR 0 6
34392: PPUSH
34393: LD_VAR 0 2
34397: PUSH
34398: LD_VAR 0 2
34402: ARRAY
34403: PPUSH
34404: LD_VAR 0 3
34408: PPUSH
34409: CALL_OW 1
34413: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34414: LD_ADDR_VAR 0 7
34418: PUSH
34419: LD_VAR 0 7
34423: PPUSH
34424: LD_VAR 0 7
34428: PPUSH
34429: LD_VAR 0 6
34433: PPUSH
34434: CALL_OW 1
34438: ST_TO_ADDR
// for i = s_arr downto 2 do
34439: LD_ADDR_VAR 0 5
34443: PUSH
34444: DOUBLE
34445: LD_VAR 0 7
34449: INC
34450: ST_TO_ADDR
34451: LD_INT 2
34453: PUSH
34454: FOR_DOWNTO
34455: IFFALSE 34539
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34457: LD_ADDR_VAR 0 6
34461: PUSH
34462: LD_VAR 0 7
34466: PUSH
34467: LD_VAR 0 5
34471: PUSH
34472: LD_INT 1
34474: MINUS
34475: ARRAY
34476: PPUSH
34477: LD_VAR 0 2
34481: PUSH
34482: LD_VAR 0 5
34486: PUSH
34487: LD_INT 1
34489: MINUS
34490: ARRAY
34491: PPUSH
34492: LD_VAR 0 7
34496: PUSH
34497: LD_VAR 0 5
34501: ARRAY
34502: PPUSH
34503: CALL_OW 1
34507: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34508: LD_ADDR_VAR 0 7
34512: PUSH
34513: LD_VAR 0 7
34517: PPUSH
34518: LD_VAR 0 5
34522: PUSH
34523: LD_INT 1
34525: MINUS
34526: PPUSH
34527: LD_VAR 0 6
34531: PPUSH
34532: CALL_OW 1
34536: ST_TO_ADDR
// end ;
34537: GO 34454
34539: POP
34540: POP
// result := s_arr [ 1 ] ;
34541: LD_ADDR_VAR 0 4
34545: PUSH
34546: LD_VAR 0 7
34550: PUSH
34551: LD_INT 1
34553: ARRAY
34554: ST_TO_ADDR
// end ; end ;
34555: LD_VAR 0 4
34559: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34560: LD_INT 0
34562: PPUSH
34563: PPUSH
// if not list then
34564: LD_VAR 0 1
34568: NOT
34569: IFFALSE 34573
// exit ;
34571: GO 34664
// i := list [ pos1 ] ;
34573: LD_ADDR_VAR 0 5
34577: PUSH
34578: LD_VAR 0 1
34582: PUSH
34583: LD_VAR 0 2
34587: ARRAY
34588: ST_TO_ADDR
// if not i then
34589: LD_VAR 0 5
34593: NOT
34594: IFFALSE 34598
// exit ;
34596: GO 34664
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34598: LD_ADDR_VAR 0 1
34602: PUSH
34603: LD_VAR 0 1
34607: PPUSH
34608: LD_VAR 0 2
34612: PPUSH
34613: LD_VAR 0 1
34617: PUSH
34618: LD_VAR 0 3
34622: ARRAY
34623: PPUSH
34624: CALL_OW 1
34628: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34629: LD_ADDR_VAR 0 1
34633: PUSH
34634: LD_VAR 0 1
34638: PPUSH
34639: LD_VAR 0 3
34643: PPUSH
34644: LD_VAR 0 5
34648: PPUSH
34649: CALL_OW 1
34653: ST_TO_ADDR
// result := list ;
34654: LD_ADDR_VAR 0 4
34658: PUSH
34659: LD_VAR 0 1
34663: ST_TO_ADDR
// end ;
34664: LD_VAR 0 4
34668: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34669: LD_INT 0
34671: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34672: LD_ADDR_VAR 0 5
34676: PUSH
34677: LD_VAR 0 1
34681: PPUSH
34682: CALL_OW 250
34686: PPUSH
34687: LD_VAR 0 1
34691: PPUSH
34692: CALL_OW 251
34696: PPUSH
34697: LD_VAR 0 2
34701: PPUSH
34702: LD_VAR 0 3
34706: PPUSH
34707: LD_VAR 0 4
34711: PPUSH
34712: CALL 34722 0 5
34716: ST_TO_ADDR
// end ;
34717: LD_VAR 0 5
34721: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34722: LD_INT 0
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
// if not list then
34728: LD_VAR 0 3
34732: NOT
34733: IFFALSE 34737
// exit ;
34735: GO 35125
// result := [ ] ;
34737: LD_ADDR_VAR 0 6
34741: PUSH
34742: EMPTY
34743: ST_TO_ADDR
// for i in list do
34744: LD_ADDR_VAR 0 7
34748: PUSH
34749: LD_VAR 0 3
34753: PUSH
34754: FOR_IN
34755: IFFALSE 34957
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34757: LD_ADDR_VAR 0 9
34761: PUSH
34762: LD_VAR 0 7
34766: PPUSH
34767: LD_VAR 0 1
34771: PPUSH
34772: LD_VAR 0 2
34776: PPUSH
34777: CALL_OW 297
34781: ST_TO_ADDR
// if not result then
34782: LD_VAR 0 6
34786: NOT
34787: IFFALSE 34813
// result := [ [ i , tmp ] ] else
34789: LD_ADDR_VAR 0 6
34793: PUSH
34794: LD_VAR 0 7
34798: PUSH
34799: LD_VAR 0 9
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: ST_TO_ADDR
34811: GO 34955
// begin if result [ result ] [ 2 ] < tmp then
34813: LD_VAR 0 6
34817: PUSH
34818: LD_VAR 0 6
34822: ARRAY
34823: PUSH
34824: LD_INT 2
34826: ARRAY
34827: PUSH
34828: LD_VAR 0 9
34832: LESS
34833: IFFALSE 34875
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34835: LD_ADDR_VAR 0 6
34839: PUSH
34840: LD_VAR 0 6
34844: PPUSH
34845: LD_VAR 0 6
34849: PUSH
34850: LD_INT 1
34852: PLUS
34853: PPUSH
34854: LD_VAR 0 7
34858: PUSH
34859: LD_VAR 0 9
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PPUSH
34868: CALL_OW 2
34872: ST_TO_ADDR
34873: GO 34955
// for j = 1 to result do
34875: LD_ADDR_VAR 0 8
34879: PUSH
34880: DOUBLE
34881: LD_INT 1
34883: DEC
34884: ST_TO_ADDR
34885: LD_VAR 0 6
34889: PUSH
34890: FOR_TO
34891: IFFALSE 34953
// begin if tmp < result [ j ] [ 2 ] then
34893: LD_VAR 0 9
34897: PUSH
34898: LD_VAR 0 6
34902: PUSH
34903: LD_VAR 0 8
34907: ARRAY
34908: PUSH
34909: LD_INT 2
34911: ARRAY
34912: LESS
34913: IFFALSE 34951
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34915: LD_ADDR_VAR 0 6
34919: PUSH
34920: LD_VAR 0 6
34924: PPUSH
34925: LD_VAR 0 8
34929: PPUSH
34930: LD_VAR 0 7
34934: PUSH
34935: LD_VAR 0 9
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PPUSH
34944: CALL_OW 2
34948: ST_TO_ADDR
// break ;
34949: GO 34953
// end ; end ;
34951: GO 34890
34953: POP
34954: POP
// end ; end ;
34955: GO 34754
34957: POP
34958: POP
// if result and not asc then
34959: LD_VAR 0 6
34963: PUSH
34964: LD_VAR 0 4
34968: NOT
34969: AND
34970: IFFALSE 35045
// begin tmp := result ;
34972: LD_ADDR_VAR 0 9
34976: PUSH
34977: LD_VAR 0 6
34981: ST_TO_ADDR
// for i = tmp downto 1 do
34982: LD_ADDR_VAR 0 7
34986: PUSH
34987: DOUBLE
34988: LD_VAR 0 9
34992: INC
34993: ST_TO_ADDR
34994: LD_INT 1
34996: PUSH
34997: FOR_DOWNTO
34998: IFFALSE 35043
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35000: LD_ADDR_VAR 0 6
35004: PUSH
35005: LD_VAR 0 6
35009: PPUSH
35010: LD_VAR 0 9
35014: PUSH
35015: LD_VAR 0 7
35019: MINUS
35020: PUSH
35021: LD_INT 1
35023: PLUS
35024: PPUSH
35025: LD_VAR 0 9
35029: PUSH
35030: LD_VAR 0 7
35034: ARRAY
35035: PPUSH
35036: CALL_OW 1
35040: ST_TO_ADDR
35041: GO 34997
35043: POP
35044: POP
// end ; tmp := [ ] ;
35045: LD_ADDR_VAR 0 9
35049: PUSH
35050: EMPTY
35051: ST_TO_ADDR
// if mode then
35052: LD_VAR 0 5
35056: IFFALSE 35125
// begin for i = 1 to result do
35058: LD_ADDR_VAR 0 7
35062: PUSH
35063: DOUBLE
35064: LD_INT 1
35066: DEC
35067: ST_TO_ADDR
35068: LD_VAR 0 6
35072: PUSH
35073: FOR_TO
35074: IFFALSE 35113
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35076: LD_ADDR_VAR 0 9
35080: PUSH
35081: LD_VAR 0 9
35085: PPUSH
35086: LD_VAR 0 7
35090: PPUSH
35091: LD_VAR 0 6
35095: PUSH
35096: LD_VAR 0 7
35100: ARRAY
35101: PUSH
35102: LD_INT 1
35104: ARRAY
35105: PPUSH
35106: CALL_OW 1
35110: ST_TO_ADDR
35111: GO 35073
35113: POP
35114: POP
// result := tmp ;
35115: LD_ADDR_VAR 0 6
35119: PUSH
35120: LD_VAR 0 9
35124: ST_TO_ADDR
// end ; end ;
35125: LD_VAR 0 6
35129: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35130: LD_INT 0
35132: PPUSH
35133: PPUSH
35134: PPUSH
35135: PPUSH
35136: PPUSH
35137: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35138: LD_ADDR_VAR 0 5
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: EMPTY
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: ST_TO_ADDR
// if not x or not y then
35160: LD_VAR 0 2
35164: NOT
35165: PUSH
35166: LD_VAR 0 3
35170: NOT
35171: OR
35172: IFFALSE 35176
// exit ;
35174: GO 36822
// if not range then
35176: LD_VAR 0 4
35180: NOT
35181: IFFALSE 35191
// range := 10 ;
35183: LD_ADDR_VAR 0 4
35187: PUSH
35188: LD_INT 10
35190: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35191: LD_ADDR_VAR 0 8
35195: PUSH
35196: LD_INT 81
35198: PUSH
35199: LD_VAR 0 1
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 92
35210: PUSH
35211: LD_VAR 0 2
35215: PUSH
35216: LD_VAR 0 3
35220: PUSH
35221: LD_VAR 0 4
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 3
35234: PUSH
35235: LD_INT 21
35237: PUSH
35238: LD_INT 3
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: LIST
35253: PPUSH
35254: CALL_OW 69
35258: ST_TO_ADDR
// if not tmp then
35259: LD_VAR 0 8
35263: NOT
35264: IFFALSE 35268
// exit ;
35266: GO 36822
// for i in tmp do
35268: LD_ADDR_VAR 0 6
35272: PUSH
35273: LD_VAR 0 8
35277: PUSH
35278: FOR_IN
35279: IFFALSE 36797
// begin points := [ 0 , 0 , 0 ] ;
35281: LD_ADDR_VAR 0 9
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: LD_INT 0
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: ST_TO_ADDR
// bpoints := 1 ;
35300: LD_ADDR_VAR 0 10
35304: PUSH
35305: LD_INT 1
35307: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35308: LD_VAR 0 6
35312: PPUSH
35313: CALL_OW 247
35317: PUSH
35318: LD_INT 1
35320: DOUBLE
35321: EQUAL
35322: IFTRUE 35326
35324: GO 35904
35326: POP
// begin if GetClass ( i ) = 1 then
35327: LD_VAR 0 6
35331: PPUSH
35332: CALL_OW 257
35336: PUSH
35337: LD_INT 1
35339: EQUAL
35340: IFFALSE 35361
// points := [ 10 , 5 , 3 ] ;
35342: LD_ADDR_VAR 0 9
35346: PUSH
35347: LD_INT 10
35349: PUSH
35350: LD_INT 5
35352: PUSH
35353: LD_INT 3
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35361: LD_VAR 0 6
35365: PPUSH
35366: CALL_OW 257
35370: PUSH
35371: LD_INT 2
35373: PUSH
35374: LD_INT 3
35376: PUSH
35377: LD_INT 4
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: IN
35385: IFFALSE 35406
// points := [ 3 , 2 , 1 ] ;
35387: LD_ADDR_VAR 0 9
35391: PUSH
35392: LD_INT 3
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 1
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: LIST
35405: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35406: LD_VAR 0 6
35410: PPUSH
35411: CALL_OW 257
35415: PUSH
35416: LD_INT 5
35418: EQUAL
35419: IFFALSE 35440
// points := [ 130 , 5 , 2 ] ;
35421: LD_ADDR_VAR 0 9
35425: PUSH
35426: LD_INT 130
35428: PUSH
35429: LD_INT 5
35431: PUSH
35432: LD_INT 2
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35440: LD_VAR 0 6
35444: PPUSH
35445: CALL_OW 257
35449: PUSH
35450: LD_INT 8
35452: EQUAL
35453: IFFALSE 35474
// points := [ 35 , 35 , 30 ] ;
35455: LD_ADDR_VAR 0 9
35459: PUSH
35460: LD_INT 35
35462: PUSH
35463: LD_INT 35
35465: PUSH
35466: LD_INT 30
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: LIST
35473: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35474: LD_VAR 0 6
35478: PPUSH
35479: CALL_OW 257
35483: PUSH
35484: LD_INT 9
35486: EQUAL
35487: IFFALSE 35508
// points := [ 20 , 55 , 40 ] ;
35489: LD_ADDR_VAR 0 9
35493: PUSH
35494: LD_INT 20
35496: PUSH
35497: LD_INT 55
35499: PUSH
35500: LD_INT 40
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35508: LD_VAR 0 6
35512: PPUSH
35513: CALL_OW 257
35517: PUSH
35518: LD_INT 12
35520: PUSH
35521: LD_INT 16
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: IN
35528: IFFALSE 35549
// points := [ 5 , 3 , 2 ] ;
35530: LD_ADDR_VAR 0 9
35534: PUSH
35535: LD_INT 5
35537: PUSH
35538: LD_INT 3
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35549: LD_VAR 0 6
35553: PPUSH
35554: CALL_OW 257
35558: PUSH
35559: LD_INT 17
35561: EQUAL
35562: IFFALSE 35583
// points := [ 100 , 50 , 75 ] ;
35564: LD_ADDR_VAR 0 9
35568: PUSH
35569: LD_INT 100
35571: PUSH
35572: LD_INT 50
35574: PUSH
35575: LD_INT 75
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35583: LD_VAR 0 6
35587: PPUSH
35588: CALL_OW 257
35592: PUSH
35593: LD_INT 15
35595: EQUAL
35596: IFFALSE 35617
// points := [ 10 , 5 , 3 ] ;
35598: LD_ADDR_VAR 0 9
35602: PUSH
35603: LD_INT 10
35605: PUSH
35606: LD_INT 5
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35617: LD_VAR 0 6
35621: PPUSH
35622: CALL_OW 257
35626: PUSH
35627: LD_INT 14
35629: EQUAL
35630: IFFALSE 35651
// points := [ 10 , 0 , 0 ] ;
35632: LD_ADDR_VAR 0 9
35636: PUSH
35637: LD_INT 10
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35651: LD_VAR 0 6
35655: PPUSH
35656: CALL_OW 257
35660: PUSH
35661: LD_INT 11
35663: EQUAL
35664: IFFALSE 35685
// points := [ 30 , 10 , 5 ] ;
35666: LD_ADDR_VAR 0 9
35670: PUSH
35671: LD_INT 30
35673: PUSH
35674: LD_INT 10
35676: PUSH
35677: LD_INT 5
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35685: LD_VAR 0 1
35689: PPUSH
35690: LD_INT 5
35692: PPUSH
35693: CALL_OW 321
35697: PUSH
35698: LD_INT 2
35700: EQUAL
35701: IFFALSE 35718
// bpoints := bpoints * 1.8 ;
35703: LD_ADDR_VAR 0 10
35707: PUSH
35708: LD_VAR 0 10
35712: PUSH
35713: LD_REAL  1.80000000000000E+0000
35716: MUL
35717: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35718: LD_VAR 0 6
35722: PPUSH
35723: CALL_OW 257
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: LD_INT 3
35736: PUSH
35737: LD_INT 4
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: IN
35746: PUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: LD_INT 51
35754: PPUSH
35755: CALL_OW 321
35759: PUSH
35760: LD_INT 2
35762: EQUAL
35763: AND
35764: IFFALSE 35781
// bpoints := bpoints * 1.2 ;
35766: LD_ADDR_VAR 0 10
35770: PUSH
35771: LD_VAR 0 10
35775: PUSH
35776: LD_REAL  1.20000000000000E+0000
35779: MUL
35780: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35781: LD_VAR 0 6
35785: PPUSH
35786: CALL_OW 257
35790: PUSH
35791: LD_INT 5
35793: PUSH
35794: LD_INT 7
35796: PUSH
35797: LD_INT 9
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: IN
35805: PUSH
35806: LD_VAR 0 1
35810: PPUSH
35811: LD_INT 52
35813: PPUSH
35814: CALL_OW 321
35818: PUSH
35819: LD_INT 2
35821: EQUAL
35822: AND
35823: IFFALSE 35840
// bpoints := bpoints * 1.5 ;
35825: LD_ADDR_VAR 0 10
35829: PUSH
35830: LD_VAR 0 10
35834: PUSH
35835: LD_REAL  1.50000000000000E+0000
35838: MUL
35839: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35840: LD_VAR 0 1
35844: PPUSH
35845: LD_INT 66
35847: PPUSH
35848: CALL_OW 321
35852: PUSH
35853: LD_INT 2
35855: EQUAL
35856: IFFALSE 35873
// bpoints := bpoints * 1.1 ;
35858: LD_ADDR_VAR 0 10
35862: PUSH
35863: LD_VAR 0 10
35867: PUSH
35868: LD_REAL  1.10000000000000E+0000
35871: MUL
35872: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35873: LD_ADDR_VAR 0 10
35877: PUSH
35878: LD_VAR 0 10
35882: PUSH
35883: LD_VAR 0 6
35887: PPUSH
35888: LD_INT 1
35890: PPUSH
35891: CALL_OW 259
35895: PUSH
35896: LD_REAL  1.15000000000000E+0000
35899: MUL
35900: MUL
35901: ST_TO_ADDR
// end ; unit_vehicle :
35902: GO 36726
35904: LD_INT 2
35906: DOUBLE
35907: EQUAL
35908: IFTRUE 35912
35910: GO 36714
35912: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35913: LD_VAR 0 6
35917: PPUSH
35918: CALL_OW 264
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 42
35928: PUSH
35929: LD_INT 24
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: LIST
35936: IN
35937: IFFALSE 35958
// points := [ 25 , 5 , 3 ] ;
35939: LD_ADDR_VAR 0 9
35943: PUSH
35944: LD_INT 25
35946: PUSH
35947: LD_INT 5
35949: PUSH
35950: LD_INT 3
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: LIST
35957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35958: LD_VAR 0 6
35962: PPUSH
35963: CALL_OW 264
35967: PUSH
35968: LD_INT 4
35970: PUSH
35971: LD_INT 43
35973: PUSH
35974: LD_INT 25
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: IN
35982: IFFALSE 36003
// points := [ 40 , 15 , 5 ] ;
35984: LD_ADDR_VAR 0 9
35988: PUSH
35989: LD_INT 40
35991: PUSH
35992: LD_INT 15
35994: PUSH
35995: LD_INT 5
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36003: LD_VAR 0 6
36007: PPUSH
36008: CALL_OW 264
36012: PUSH
36013: LD_INT 3
36015: PUSH
36016: LD_INT 23
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: IN
36023: IFFALSE 36044
// points := [ 7 , 25 , 8 ] ;
36025: LD_ADDR_VAR 0 9
36029: PUSH
36030: LD_INT 7
36032: PUSH
36033: LD_INT 25
36035: PUSH
36036: LD_INT 8
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36044: LD_VAR 0 6
36048: PPUSH
36049: CALL_OW 264
36053: PUSH
36054: LD_INT 5
36056: PUSH
36057: LD_INT 27
36059: PUSH
36060: LD_INT 44
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: IN
36068: IFFALSE 36089
// points := [ 14 , 50 , 16 ] ;
36070: LD_ADDR_VAR 0 9
36074: PUSH
36075: LD_INT 14
36077: PUSH
36078: LD_INT 50
36080: PUSH
36081: LD_INT 16
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: LIST
36088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36089: LD_VAR 0 6
36093: PPUSH
36094: CALL_OW 264
36098: PUSH
36099: LD_INT 6
36101: PUSH
36102: LD_INT 46
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: IN
36109: IFFALSE 36130
// points := [ 32 , 120 , 70 ] ;
36111: LD_ADDR_VAR 0 9
36115: PUSH
36116: LD_INT 32
36118: PUSH
36119: LD_INT 120
36121: PUSH
36122: LD_INT 70
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36130: LD_VAR 0 6
36134: PPUSH
36135: CALL_OW 264
36139: PUSH
36140: LD_INT 7
36142: PUSH
36143: LD_INT 28
36145: PUSH
36146: LD_INT 45
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: IN
36154: IFFALSE 36175
// points := [ 35 , 20 , 45 ] ;
36156: LD_ADDR_VAR 0 9
36160: PUSH
36161: LD_INT 35
36163: PUSH
36164: LD_INT 20
36166: PUSH
36167: LD_INT 45
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36175: LD_VAR 0 6
36179: PPUSH
36180: CALL_OW 264
36184: PUSH
36185: LD_INT 47
36187: PUSH
36188: EMPTY
36189: LIST
36190: IN
36191: IFFALSE 36212
// points := [ 67 , 45 , 75 ] ;
36193: LD_ADDR_VAR 0 9
36197: PUSH
36198: LD_INT 67
36200: PUSH
36201: LD_INT 45
36203: PUSH
36204: LD_INT 75
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36212: LD_VAR 0 6
36216: PPUSH
36217: CALL_OW 264
36221: PUSH
36222: LD_INT 26
36224: PUSH
36225: EMPTY
36226: LIST
36227: IN
36228: IFFALSE 36249
// points := [ 120 , 30 , 80 ] ;
36230: LD_ADDR_VAR 0 9
36234: PUSH
36235: LD_INT 120
36237: PUSH
36238: LD_INT 30
36240: PUSH
36241: LD_INT 80
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36249: LD_VAR 0 6
36253: PPUSH
36254: CALL_OW 264
36258: PUSH
36259: LD_INT 22
36261: PUSH
36262: EMPTY
36263: LIST
36264: IN
36265: IFFALSE 36286
// points := [ 40 , 1 , 1 ] ;
36267: LD_ADDR_VAR 0 9
36271: PUSH
36272: LD_INT 40
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36286: LD_VAR 0 6
36290: PPUSH
36291: CALL_OW 264
36295: PUSH
36296: LD_INT 29
36298: PUSH
36299: EMPTY
36300: LIST
36301: IN
36302: IFFALSE 36323
// points := [ 70 , 200 , 400 ] ;
36304: LD_ADDR_VAR 0 9
36308: PUSH
36309: LD_INT 70
36311: PUSH
36312: LD_INT 200
36314: PUSH
36315: LD_INT 400
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36323: LD_VAR 0 6
36327: PPUSH
36328: CALL_OW 264
36332: PUSH
36333: LD_INT 14
36335: PUSH
36336: LD_INT 53
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: IN
36343: IFFALSE 36364
// points := [ 40 , 10 , 20 ] ;
36345: LD_ADDR_VAR 0 9
36349: PUSH
36350: LD_INT 40
36352: PUSH
36353: LD_INT 10
36355: PUSH
36356: LD_INT 20
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: LIST
36363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36364: LD_VAR 0 6
36368: PPUSH
36369: CALL_OW 264
36373: PUSH
36374: LD_INT 9
36376: PUSH
36377: EMPTY
36378: LIST
36379: IN
36380: IFFALSE 36401
// points := [ 5 , 70 , 20 ] ;
36382: LD_ADDR_VAR 0 9
36386: PUSH
36387: LD_INT 5
36389: PUSH
36390: LD_INT 70
36392: PUSH
36393: LD_INT 20
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36401: LD_VAR 0 6
36405: PPUSH
36406: CALL_OW 264
36410: PUSH
36411: LD_INT 10
36413: PUSH
36414: EMPTY
36415: LIST
36416: IN
36417: IFFALSE 36438
// points := [ 35 , 110 , 70 ] ;
36419: LD_ADDR_VAR 0 9
36423: PUSH
36424: LD_INT 35
36426: PUSH
36427: LD_INT 110
36429: PUSH
36430: LD_INT 70
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36438: LD_VAR 0 6
36442: PPUSH
36443: CALL_OW 265
36447: PUSH
36448: LD_INT 25
36450: EQUAL
36451: IFFALSE 36472
// points := [ 80 , 65 , 100 ] ;
36453: LD_ADDR_VAR 0 9
36457: PUSH
36458: LD_INT 80
36460: PUSH
36461: LD_INT 65
36463: PUSH
36464: LD_INT 100
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: LIST
36471: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36472: LD_VAR 0 6
36476: PPUSH
36477: CALL_OW 263
36481: PUSH
36482: LD_INT 1
36484: EQUAL
36485: IFFALSE 36520
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36487: LD_ADDR_VAR 0 10
36491: PUSH
36492: LD_VAR 0 10
36496: PUSH
36497: LD_VAR 0 6
36501: PPUSH
36502: CALL_OW 311
36506: PPUSH
36507: LD_INT 3
36509: PPUSH
36510: CALL_OW 259
36514: PUSH
36515: LD_INT 4
36517: MUL
36518: MUL
36519: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36520: LD_VAR 0 6
36524: PPUSH
36525: CALL_OW 263
36529: PUSH
36530: LD_INT 2
36532: EQUAL
36533: IFFALSE 36584
// begin j := IsControledBy ( i ) ;
36535: LD_ADDR_VAR 0 7
36539: PUSH
36540: LD_VAR 0 6
36544: PPUSH
36545: CALL_OW 312
36549: ST_TO_ADDR
// if j then
36550: LD_VAR 0 7
36554: IFFALSE 36584
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36556: LD_ADDR_VAR 0 10
36560: PUSH
36561: LD_VAR 0 10
36565: PUSH
36566: LD_VAR 0 7
36570: PPUSH
36571: LD_INT 3
36573: PPUSH
36574: CALL_OW 259
36578: PUSH
36579: LD_INT 3
36581: MUL
36582: MUL
36583: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36584: LD_VAR 0 6
36588: PPUSH
36589: CALL_OW 264
36593: PUSH
36594: LD_INT 5
36596: PUSH
36597: LD_INT 6
36599: PUSH
36600: LD_INT 46
36602: PUSH
36603: LD_INT 44
36605: PUSH
36606: LD_INT 47
36608: PUSH
36609: LD_INT 45
36611: PUSH
36612: LD_INT 28
36614: PUSH
36615: LD_INT 7
36617: PUSH
36618: LD_INT 27
36620: PUSH
36621: LD_INT 29
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: IN
36636: PUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: LD_INT 52
36644: PPUSH
36645: CALL_OW 321
36649: PUSH
36650: LD_INT 2
36652: EQUAL
36653: AND
36654: IFFALSE 36671
// bpoints := bpoints * 1.2 ;
36656: LD_ADDR_VAR 0 10
36660: PUSH
36661: LD_VAR 0 10
36665: PUSH
36666: LD_REAL  1.20000000000000E+0000
36669: MUL
36670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36671: LD_VAR 0 6
36675: PPUSH
36676: CALL_OW 264
36680: PUSH
36681: LD_INT 6
36683: PUSH
36684: LD_INT 46
36686: PUSH
36687: LD_INT 47
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: IN
36695: IFFALSE 36712
// bpoints := bpoints * 1.2 ;
36697: LD_ADDR_VAR 0 10
36701: PUSH
36702: LD_VAR 0 10
36706: PUSH
36707: LD_REAL  1.20000000000000E+0000
36710: MUL
36711: ST_TO_ADDR
// end ; unit_building :
36712: GO 36726
36714: LD_INT 3
36716: DOUBLE
36717: EQUAL
36718: IFTRUE 36722
36720: GO 36725
36722: POP
// ; end ;
36723: GO 36726
36725: POP
// for j = 1 to 3 do
36726: LD_ADDR_VAR 0 7
36730: PUSH
36731: DOUBLE
36732: LD_INT 1
36734: DEC
36735: ST_TO_ADDR
36736: LD_INT 3
36738: PUSH
36739: FOR_TO
36740: IFFALSE 36793
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36742: LD_ADDR_VAR 0 5
36746: PUSH
36747: LD_VAR 0 5
36751: PPUSH
36752: LD_VAR 0 7
36756: PPUSH
36757: LD_VAR 0 5
36761: PUSH
36762: LD_VAR 0 7
36766: ARRAY
36767: PUSH
36768: LD_VAR 0 9
36772: PUSH
36773: LD_VAR 0 7
36777: ARRAY
36778: PUSH
36779: LD_VAR 0 10
36783: MUL
36784: PLUS
36785: PPUSH
36786: CALL_OW 1
36790: ST_TO_ADDR
36791: GO 36739
36793: POP
36794: POP
// end ;
36795: GO 35278
36797: POP
36798: POP
// result := Replace ( result , 4 , tmp ) ;
36799: LD_ADDR_VAR 0 5
36803: PUSH
36804: LD_VAR 0 5
36808: PPUSH
36809: LD_INT 4
36811: PPUSH
36812: LD_VAR 0 8
36816: PPUSH
36817: CALL_OW 1
36821: ST_TO_ADDR
// end ;
36822: LD_VAR 0 5
36826: RET
// export function DangerAtRange ( unit , range ) ; begin
36827: LD_INT 0
36829: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36830: LD_ADDR_VAR 0 3
36834: PUSH
36835: LD_VAR 0 1
36839: PPUSH
36840: CALL_OW 255
36844: PPUSH
36845: LD_VAR 0 1
36849: PPUSH
36850: CALL_OW 250
36854: PPUSH
36855: LD_VAR 0 1
36859: PPUSH
36860: CALL_OW 251
36864: PPUSH
36865: LD_VAR 0 2
36869: PPUSH
36870: CALL 35130 0 4
36874: ST_TO_ADDR
// end ;
36875: LD_VAR 0 3
36879: RET
// export function DangerInArea ( side , area ) ; begin
36880: LD_INT 0
36882: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36883: LD_ADDR_VAR 0 3
36887: PUSH
36888: LD_VAR 0 2
36892: PPUSH
36893: LD_INT 81
36895: PUSH
36896: LD_VAR 0 1
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PPUSH
36905: CALL_OW 70
36909: ST_TO_ADDR
// end ;
36910: LD_VAR 0 3
36914: RET
// export function IsExtension ( b ) ; begin
36915: LD_INT 0
36917: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36918: LD_ADDR_VAR 0 2
36922: PUSH
36923: LD_VAR 0 1
36927: PUSH
36928: LD_INT 23
36930: PUSH
36931: LD_INT 20
36933: PUSH
36934: LD_INT 22
36936: PUSH
36937: LD_INT 17
36939: PUSH
36940: LD_INT 24
36942: PUSH
36943: LD_INT 21
36945: PUSH
36946: LD_INT 19
36948: PUSH
36949: LD_INT 16
36951: PUSH
36952: LD_INT 25
36954: PUSH
36955: LD_INT 18
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: IN
36970: ST_TO_ADDR
// end ;
36971: LD_VAR 0 2
36975: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36976: LD_INT 0
36978: PPUSH
36979: PPUSH
36980: PPUSH
// result := [ ] ;
36981: LD_ADDR_VAR 0 4
36985: PUSH
36986: EMPTY
36987: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36988: LD_ADDR_VAR 0 5
36992: PUSH
36993: LD_VAR 0 2
36997: PPUSH
36998: LD_INT 21
37000: PUSH
37001: LD_INT 3
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PPUSH
37008: CALL_OW 70
37012: ST_TO_ADDR
// if not tmp then
37013: LD_VAR 0 5
37017: NOT
37018: IFFALSE 37022
// exit ;
37020: GO 37086
// if checkLink then
37022: LD_VAR 0 3
37026: IFFALSE 37076
// begin for i in tmp do
37028: LD_ADDR_VAR 0 6
37032: PUSH
37033: LD_VAR 0 5
37037: PUSH
37038: FOR_IN
37039: IFFALSE 37074
// if GetBase ( i ) <> base then
37041: LD_VAR 0 6
37045: PPUSH
37046: CALL_OW 274
37050: PUSH
37051: LD_VAR 0 1
37055: NONEQUAL
37056: IFFALSE 37072
// ComLinkToBase ( base , i ) ;
37058: LD_VAR 0 1
37062: PPUSH
37063: LD_VAR 0 6
37067: PPUSH
37068: CALL_OW 169
37072: GO 37038
37074: POP
37075: POP
// end ; result := tmp ;
37076: LD_ADDR_VAR 0 4
37080: PUSH
37081: LD_VAR 0 5
37085: ST_TO_ADDR
// end ;
37086: LD_VAR 0 4
37090: RET
// export function ComComplete ( units , b ) ; var i ; begin
37091: LD_INT 0
37093: PPUSH
37094: PPUSH
// if not units then
37095: LD_VAR 0 1
37099: NOT
37100: IFFALSE 37104
// exit ;
37102: GO 37194
// for i in units do
37104: LD_ADDR_VAR 0 4
37108: PUSH
37109: LD_VAR 0 1
37113: PUSH
37114: FOR_IN
37115: IFFALSE 37192
// if BuildingStatus ( b ) = bs_build then
37117: LD_VAR 0 2
37121: PPUSH
37122: CALL_OW 461
37126: PUSH
37127: LD_INT 1
37129: EQUAL
37130: IFFALSE 37190
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37132: LD_VAR 0 4
37136: PPUSH
37137: LD_STRING h
37139: PUSH
37140: LD_VAR 0 2
37144: PPUSH
37145: CALL_OW 250
37149: PUSH
37150: LD_VAR 0 2
37154: PPUSH
37155: CALL_OW 251
37159: PUSH
37160: LD_VAR 0 2
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: PUSH
37183: EMPTY
37184: LIST
37185: PPUSH
37186: CALL_OW 446
37190: GO 37114
37192: POP
37193: POP
// end ;
37194: LD_VAR 0 3
37198: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37199: LD_INT 0
37201: PPUSH
37202: PPUSH
37203: PPUSH
37204: PPUSH
37205: PPUSH
37206: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37207: LD_VAR 0 1
37211: NOT
37212: PUSH
37213: LD_VAR 0 1
37217: PPUSH
37218: CALL_OW 263
37222: PUSH
37223: LD_INT 2
37225: EQUAL
37226: NOT
37227: OR
37228: IFFALSE 37232
// exit ;
37230: GO 37548
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37232: LD_ADDR_VAR 0 6
37236: PUSH
37237: LD_INT 22
37239: PUSH
37240: LD_VAR 0 1
37244: PPUSH
37245: CALL_OW 255
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 30
37259: PUSH
37260: LD_INT 36
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 34
37269: PUSH
37270: LD_INT 31
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PPUSH
37286: CALL_OW 69
37290: ST_TO_ADDR
// if not tmp then
37291: LD_VAR 0 6
37295: NOT
37296: IFFALSE 37300
// exit ;
37298: GO 37548
// result := [ ] ;
37300: LD_ADDR_VAR 0 2
37304: PUSH
37305: EMPTY
37306: ST_TO_ADDR
// for i in tmp do
37307: LD_ADDR_VAR 0 3
37311: PUSH
37312: LD_VAR 0 6
37316: PUSH
37317: FOR_IN
37318: IFFALSE 37389
// begin t := UnitsInside ( i ) ;
37320: LD_ADDR_VAR 0 4
37324: PUSH
37325: LD_VAR 0 3
37329: PPUSH
37330: CALL_OW 313
37334: ST_TO_ADDR
// if t then
37335: LD_VAR 0 4
37339: IFFALSE 37387
// for j in t do
37341: LD_ADDR_VAR 0 7
37345: PUSH
37346: LD_VAR 0 4
37350: PUSH
37351: FOR_IN
37352: IFFALSE 37385
// result := Insert ( result , result + 1 , j ) ;
37354: LD_ADDR_VAR 0 2
37358: PUSH
37359: LD_VAR 0 2
37363: PPUSH
37364: LD_VAR 0 2
37368: PUSH
37369: LD_INT 1
37371: PLUS
37372: PPUSH
37373: LD_VAR 0 7
37377: PPUSH
37378: CALL_OW 2
37382: ST_TO_ADDR
37383: GO 37351
37385: POP
37386: POP
// end ;
37387: GO 37317
37389: POP
37390: POP
// if not result then
37391: LD_VAR 0 2
37395: NOT
37396: IFFALSE 37400
// exit ;
37398: GO 37548
// mech := result [ 1 ] ;
37400: LD_ADDR_VAR 0 5
37404: PUSH
37405: LD_VAR 0 2
37409: PUSH
37410: LD_INT 1
37412: ARRAY
37413: ST_TO_ADDR
// if result > 1 then
37414: LD_VAR 0 2
37418: PUSH
37419: LD_INT 1
37421: GREATER
37422: IFFALSE 37534
// for i = 2 to result do
37424: LD_ADDR_VAR 0 3
37428: PUSH
37429: DOUBLE
37430: LD_INT 2
37432: DEC
37433: ST_TO_ADDR
37434: LD_VAR 0 2
37438: PUSH
37439: FOR_TO
37440: IFFALSE 37532
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37442: LD_ADDR_VAR 0 4
37446: PUSH
37447: LD_VAR 0 2
37451: PUSH
37452: LD_VAR 0 3
37456: ARRAY
37457: PPUSH
37458: LD_INT 3
37460: PPUSH
37461: CALL_OW 259
37465: PUSH
37466: LD_VAR 0 2
37470: PUSH
37471: LD_VAR 0 3
37475: ARRAY
37476: PPUSH
37477: CALL_OW 432
37481: MINUS
37482: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37483: LD_VAR 0 4
37487: PUSH
37488: LD_VAR 0 5
37492: PPUSH
37493: LD_INT 3
37495: PPUSH
37496: CALL_OW 259
37500: PUSH
37501: LD_VAR 0 5
37505: PPUSH
37506: CALL_OW 432
37510: MINUS
37511: GREATEREQUAL
37512: IFFALSE 37530
// mech := result [ i ] ;
37514: LD_ADDR_VAR 0 5
37518: PUSH
37519: LD_VAR 0 2
37523: PUSH
37524: LD_VAR 0 3
37528: ARRAY
37529: ST_TO_ADDR
// end ;
37530: GO 37439
37532: POP
37533: POP
// ComLinkTo ( vehicle , mech ) ;
37534: LD_VAR 0 1
37538: PPUSH
37539: LD_VAR 0 5
37543: PPUSH
37544: CALL_OW 135
// end ;
37548: LD_VAR 0 2
37552: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37553: LD_INT 0
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
37565: PPUSH
37566: PPUSH
37567: PPUSH
// result := [ ] ;
37568: LD_ADDR_VAR 0 7
37572: PUSH
37573: EMPTY
37574: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37575: LD_VAR 0 1
37579: PPUSH
37580: CALL_OW 266
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: IN
37595: NOT
37596: IFFALSE 37600
// exit ;
37598: GO 39234
// if name then
37600: LD_VAR 0 3
37604: IFFALSE 37620
// SetBName ( base_dep , name ) ;
37606: LD_VAR 0 1
37610: PPUSH
37611: LD_VAR 0 3
37615: PPUSH
37616: CALL_OW 500
// base := GetBase ( base_dep ) ;
37620: LD_ADDR_VAR 0 15
37624: PUSH
37625: LD_VAR 0 1
37629: PPUSH
37630: CALL_OW 274
37634: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37635: LD_ADDR_VAR 0 16
37639: PUSH
37640: LD_VAR 0 1
37644: PPUSH
37645: CALL_OW 255
37649: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37650: LD_ADDR_VAR 0 17
37654: PUSH
37655: LD_VAR 0 1
37659: PPUSH
37660: CALL_OW 248
37664: ST_TO_ADDR
// if sources then
37665: LD_VAR 0 5
37669: IFFALSE 37716
// for i = 1 to 3 do
37671: LD_ADDR_VAR 0 8
37675: PUSH
37676: DOUBLE
37677: LD_INT 1
37679: DEC
37680: ST_TO_ADDR
37681: LD_INT 3
37683: PUSH
37684: FOR_TO
37685: IFFALSE 37714
// AddResourceType ( base , i , sources [ i ] ) ;
37687: LD_VAR 0 15
37691: PPUSH
37692: LD_VAR 0 8
37696: PPUSH
37697: LD_VAR 0 5
37701: PUSH
37702: LD_VAR 0 8
37706: ARRAY
37707: PPUSH
37708: CALL_OW 276
37712: GO 37684
37714: POP
37715: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37716: LD_ADDR_VAR 0 18
37720: PUSH
37721: LD_VAR 0 15
37725: PPUSH
37726: LD_VAR 0 2
37730: PPUSH
37731: LD_INT 1
37733: PPUSH
37734: CALL 36976 0 3
37738: ST_TO_ADDR
// InitHc ;
37739: CALL_OW 19
// InitUc ;
37743: CALL_OW 18
// uc_side := side ;
37747: LD_ADDR_OWVAR 20
37751: PUSH
37752: LD_VAR 0 16
37756: ST_TO_ADDR
// uc_nation := nation ;
37757: LD_ADDR_OWVAR 21
37761: PUSH
37762: LD_VAR 0 17
37766: ST_TO_ADDR
// if buildings then
37767: LD_VAR 0 18
37771: IFFALSE 39093
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37773: LD_ADDR_VAR 0 19
37777: PUSH
37778: LD_VAR 0 18
37782: PPUSH
37783: LD_INT 2
37785: PUSH
37786: LD_INT 30
37788: PUSH
37789: LD_INT 29
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 30
37798: PUSH
37799: LD_INT 30
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: PPUSH
37811: CALL_OW 72
37815: ST_TO_ADDR
// if tmp then
37816: LD_VAR 0 19
37820: IFFALSE 37868
// for i in tmp do
37822: LD_ADDR_VAR 0 8
37826: PUSH
37827: LD_VAR 0 19
37831: PUSH
37832: FOR_IN
37833: IFFALSE 37866
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37835: LD_VAR 0 8
37839: PPUSH
37840: CALL_OW 250
37844: PPUSH
37845: LD_VAR 0 8
37849: PPUSH
37850: CALL_OW 251
37854: PPUSH
37855: LD_VAR 0 16
37859: PPUSH
37860: CALL_OW 441
37864: GO 37832
37866: POP
37867: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37868: LD_VAR 0 18
37872: PPUSH
37873: LD_INT 2
37875: PUSH
37876: LD_INT 30
37878: PUSH
37879: LD_INT 32
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 30
37888: PUSH
37889: LD_INT 33
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: PPUSH
37901: CALL_OW 72
37905: IFFALSE 37993
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37907: LD_ADDR_VAR 0 8
37911: PUSH
37912: LD_VAR 0 18
37916: PPUSH
37917: LD_INT 2
37919: PUSH
37920: LD_INT 30
37922: PUSH
37923: LD_INT 32
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 30
37932: PUSH
37933: LD_INT 33
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: PPUSH
37945: CALL_OW 72
37949: PUSH
37950: FOR_IN
37951: IFFALSE 37991
// begin if not GetBWeapon ( i ) then
37953: LD_VAR 0 8
37957: PPUSH
37958: CALL_OW 269
37962: NOT
37963: IFFALSE 37989
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37965: LD_VAR 0 8
37969: PPUSH
37970: LD_VAR 0 8
37974: PPUSH
37975: LD_VAR 0 2
37979: PPUSH
37980: CALL 39239 0 2
37984: PPUSH
37985: CALL_OW 431
// end ;
37989: GO 37950
37991: POP
37992: POP
// end ; for i = 1 to personel do
37993: LD_ADDR_VAR 0 8
37997: PUSH
37998: DOUBLE
37999: LD_INT 1
38001: DEC
38002: ST_TO_ADDR
38003: LD_VAR 0 6
38007: PUSH
38008: FOR_TO
38009: IFFALSE 39073
// begin if i > 4 then
38011: LD_VAR 0 8
38015: PUSH
38016: LD_INT 4
38018: GREATER
38019: IFFALSE 38023
// break ;
38021: GO 39073
// case i of 1 :
38023: LD_VAR 0 8
38027: PUSH
38028: LD_INT 1
38030: DOUBLE
38031: EQUAL
38032: IFTRUE 38036
38034: GO 38116
38036: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38037: LD_ADDR_VAR 0 12
38041: PUSH
38042: LD_VAR 0 18
38046: PPUSH
38047: LD_INT 22
38049: PUSH
38050: LD_VAR 0 16
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 58
38061: PUSH
38062: EMPTY
38063: LIST
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: LD_INT 30
38070: PUSH
38071: LD_INT 32
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 30
38080: PUSH
38081: LD_INT 4
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 30
38090: PUSH
38091: LD_INT 5
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: PPUSH
38109: CALL_OW 72
38113: ST_TO_ADDR
38114: GO 38338
38116: LD_INT 2
38118: DOUBLE
38119: EQUAL
38120: IFTRUE 38124
38122: GO 38186
38124: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38125: LD_ADDR_VAR 0 12
38129: PUSH
38130: LD_VAR 0 18
38134: PPUSH
38135: LD_INT 22
38137: PUSH
38138: LD_VAR 0 16
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 30
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 30
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PPUSH
38179: CALL_OW 72
38183: ST_TO_ADDR
38184: GO 38338
38186: LD_INT 3
38188: DOUBLE
38189: EQUAL
38190: IFTRUE 38194
38192: GO 38256
38194: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38195: LD_ADDR_VAR 0 12
38199: PUSH
38200: LD_VAR 0 18
38204: PPUSH
38205: LD_INT 22
38207: PUSH
38208: LD_VAR 0 16
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: LD_INT 30
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 30
38232: PUSH
38233: LD_INT 3
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PPUSH
38249: CALL_OW 72
38253: ST_TO_ADDR
38254: GO 38338
38256: LD_INT 4
38258: DOUBLE
38259: EQUAL
38260: IFTRUE 38264
38262: GO 38337
38264: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38265: LD_ADDR_VAR 0 12
38269: PUSH
38270: LD_VAR 0 18
38274: PPUSH
38275: LD_INT 22
38277: PUSH
38278: LD_VAR 0 16
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: LD_INT 30
38292: PUSH
38293: LD_INT 6
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 30
38302: PUSH
38303: LD_INT 7
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 30
38312: PUSH
38313: LD_INT 8
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PPUSH
38330: CALL_OW 72
38334: ST_TO_ADDR
38335: GO 38338
38337: POP
// if i = 1 then
38338: LD_VAR 0 8
38342: PUSH
38343: LD_INT 1
38345: EQUAL
38346: IFFALSE 38457
// begin tmp := [ ] ;
38348: LD_ADDR_VAR 0 19
38352: PUSH
38353: EMPTY
38354: ST_TO_ADDR
// for j in f do
38355: LD_ADDR_VAR 0 9
38359: PUSH
38360: LD_VAR 0 12
38364: PUSH
38365: FOR_IN
38366: IFFALSE 38439
// if GetBType ( j ) = b_bunker then
38368: LD_VAR 0 9
38372: PPUSH
38373: CALL_OW 266
38377: PUSH
38378: LD_INT 32
38380: EQUAL
38381: IFFALSE 38408
// tmp := Insert ( tmp , 1 , j ) else
38383: LD_ADDR_VAR 0 19
38387: PUSH
38388: LD_VAR 0 19
38392: PPUSH
38393: LD_INT 1
38395: PPUSH
38396: LD_VAR 0 9
38400: PPUSH
38401: CALL_OW 2
38405: ST_TO_ADDR
38406: GO 38437
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38408: LD_ADDR_VAR 0 19
38412: PUSH
38413: LD_VAR 0 19
38417: PPUSH
38418: LD_VAR 0 19
38422: PUSH
38423: LD_INT 1
38425: PLUS
38426: PPUSH
38427: LD_VAR 0 9
38431: PPUSH
38432: CALL_OW 2
38436: ST_TO_ADDR
38437: GO 38365
38439: POP
38440: POP
// if tmp then
38441: LD_VAR 0 19
38445: IFFALSE 38457
// f := tmp ;
38447: LD_ADDR_VAR 0 12
38451: PUSH
38452: LD_VAR 0 19
38456: ST_TO_ADDR
// end ; x := personel [ i ] ;
38457: LD_ADDR_VAR 0 13
38461: PUSH
38462: LD_VAR 0 6
38466: PUSH
38467: LD_VAR 0 8
38471: ARRAY
38472: ST_TO_ADDR
// if x = - 1 then
38473: LD_VAR 0 13
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: EQUAL
38482: IFFALSE 38691
// begin for j in f do
38484: LD_ADDR_VAR 0 9
38488: PUSH
38489: LD_VAR 0 12
38493: PUSH
38494: FOR_IN
38495: IFFALSE 38687
// repeat InitHc ;
38497: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38501: LD_VAR 0 9
38505: PPUSH
38506: CALL_OW 266
38510: PUSH
38511: LD_INT 5
38513: EQUAL
38514: IFFALSE 38584
// begin if UnitsInside ( j ) < 3 then
38516: LD_VAR 0 9
38520: PPUSH
38521: CALL_OW 313
38525: PUSH
38526: LD_INT 3
38528: LESS
38529: IFFALSE 38565
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38531: LD_INT 0
38533: PPUSH
38534: LD_INT 5
38536: PUSH
38537: LD_INT 8
38539: PUSH
38540: LD_INT 9
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: PUSH
38548: LD_VAR 0 17
38552: ARRAY
38553: PPUSH
38554: LD_VAR 0 4
38558: PPUSH
38559: CALL_OW 380
38563: GO 38582
// PrepareHuman ( false , i , skill ) ;
38565: LD_INT 0
38567: PPUSH
38568: LD_VAR 0 8
38572: PPUSH
38573: LD_VAR 0 4
38577: PPUSH
38578: CALL_OW 380
// end else
38582: GO 38601
// PrepareHuman ( false , i , skill ) ;
38584: LD_INT 0
38586: PPUSH
38587: LD_VAR 0 8
38591: PPUSH
38592: LD_VAR 0 4
38596: PPUSH
38597: CALL_OW 380
// un := CreateHuman ;
38601: LD_ADDR_VAR 0 14
38605: PUSH
38606: CALL_OW 44
38610: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38611: LD_ADDR_VAR 0 7
38615: PUSH
38616: LD_VAR 0 7
38620: PPUSH
38621: LD_INT 1
38623: PPUSH
38624: LD_VAR 0 14
38628: PPUSH
38629: CALL_OW 2
38633: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38634: LD_VAR 0 14
38638: PPUSH
38639: LD_VAR 0 9
38643: PPUSH
38644: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38648: LD_VAR 0 9
38652: PPUSH
38653: CALL_OW 313
38657: PUSH
38658: LD_INT 6
38660: EQUAL
38661: PUSH
38662: LD_VAR 0 9
38666: PPUSH
38667: CALL_OW 266
38671: PUSH
38672: LD_INT 32
38674: PUSH
38675: LD_INT 31
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: IN
38682: OR
38683: IFFALSE 38497
38685: GO 38494
38687: POP
38688: POP
// end else
38689: GO 39071
// for j = 1 to x do
38691: LD_ADDR_VAR 0 9
38695: PUSH
38696: DOUBLE
38697: LD_INT 1
38699: DEC
38700: ST_TO_ADDR
38701: LD_VAR 0 13
38705: PUSH
38706: FOR_TO
38707: IFFALSE 39069
// begin InitHc ;
38709: CALL_OW 19
// if not f then
38713: LD_VAR 0 12
38717: NOT
38718: IFFALSE 38807
// begin PrepareHuman ( false , i , skill ) ;
38720: LD_INT 0
38722: PPUSH
38723: LD_VAR 0 8
38727: PPUSH
38728: LD_VAR 0 4
38732: PPUSH
38733: CALL_OW 380
// un := CreateHuman ;
38737: LD_ADDR_VAR 0 14
38741: PUSH
38742: CALL_OW 44
38746: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38747: LD_ADDR_VAR 0 7
38751: PUSH
38752: LD_VAR 0 7
38756: PPUSH
38757: LD_INT 1
38759: PPUSH
38760: LD_VAR 0 14
38764: PPUSH
38765: CALL_OW 2
38769: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38770: LD_VAR 0 14
38774: PPUSH
38775: LD_VAR 0 1
38779: PPUSH
38780: CALL_OW 250
38784: PPUSH
38785: LD_VAR 0 1
38789: PPUSH
38790: CALL_OW 251
38794: PPUSH
38795: LD_INT 10
38797: PPUSH
38798: LD_INT 0
38800: PPUSH
38801: CALL_OW 50
// continue ;
38805: GO 38706
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38807: LD_VAR 0 12
38811: PUSH
38812: LD_INT 1
38814: ARRAY
38815: PPUSH
38816: CALL_OW 313
38820: PUSH
38821: LD_VAR 0 12
38825: PUSH
38826: LD_INT 1
38828: ARRAY
38829: PPUSH
38830: CALL_OW 266
38834: PUSH
38835: LD_INT 32
38837: PUSH
38838: LD_INT 31
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: IN
38845: AND
38846: PUSH
38847: LD_VAR 0 12
38851: PUSH
38852: LD_INT 1
38854: ARRAY
38855: PPUSH
38856: CALL_OW 313
38860: PUSH
38861: LD_INT 6
38863: EQUAL
38864: OR
38865: IFFALSE 38885
// f := Delete ( f , 1 ) ;
38867: LD_ADDR_VAR 0 12
38871: PUSH
38872: LD_VAR 0 12
38876: PPUSH
38877: LD_INT 1
38879: PPUSH
38880: CALL_OW 3
38884: ST_TO_ADDR
// if not f then
38885: LD_VAR 0 12
38889: NOT
38890: IFFALSE 38908
// begin x := x + 2 ;
38892: LD_ADDR_VAR 0 13
38896: PUSH
38897: LD_VAR 0 13
38901: PUSH
38902: LD_INT 2
38904: PLUS
38905: ST_TO_ADDR
// continue ;
38906: GO 38706
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38908: LD_VAR 0 12
38912: PUSH
38913: LD_INT 1
38915: ARRAY
38916: PPUSH
38917: CALL_OW 266
38921: PUSH
38922: LD_INT 5
38924: EQUAL
38925: IFFALSE 38999
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38927: LD_VAR 0 12
38931: PUSH
38932: LD_INT 1
38934: ARRAY
38935: PPUSH
38936: CALL_OW 313
38940: PUSH
38941: LD_INT 3
38943: LESS
38944: IFFALSE 38980
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38946: LD_INT 0
38948: PPUSH
38949: LD_INT 5
38951: PUSH
38952: LD_INT 8
38954: PUSH
38955: LD_INT 9
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: PUSH
38963: LD_VAR 0 17
38967: ARRAY
38968: PPUSH
38969: LD_VAR 0 4
38973: PPUSH
38974: CALL_OW 380
38978: GO 38997
// PrepareHuman ( false , i , skill ) ;
38980: LD_INT 0
38982: PPUSH
38983: LD_VAR 0 8
38987: PPUSH
38988: LD_VAR 0 4
38992: PPUSH
38993: CALL_OW 380
// end else
38997: GO 39016
// PrepareHuman ( false , i , skill ) ;
38999: LD_INT 0
39001: PPUSH
39002: LD_VAR 0 8
39006: PPUSH
39007: LD_VAR 0 4
39011: PPUSH
39012: CALL_OW 380
// un := CreateHuman ;
39016: LD_ADDR_VAR 0 14
39020: PUSH
39021: CALL_OW 44
39025: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39026: LD_ADDR_VAR 0 7
39030: PUSH
39031: LD_VAR 0 7
39035: PPUSH
39036: LD_INT 1
39038: PPUSH
39039: LD_VAR 0 14
39043: PPUSH
39044: CALL_OW 2
39048: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39049: LD_VAR 0 14
39053: PPUSH
39054: LD_VAR 0 12
39058: PUSH
39059: LD_INT 1
39061: ARRAY
39062: PPUSH
39063: CALL_OW 52
// end ;
39067: GO 38706
39069: POP
39070: POP
// end ;
39071: GO 38008
39073: POP
39074: POP
// result := result ^ buildings ;
39075: LD_ADDR_VAR 0 7
39079: PUSH
39080: LD_VAR 0 7
39084: PUSH
39085: LD_VAR 0 18
39089: ADD
39090: ST_TO_ADDR
// end else
39091: GO 39234
// begin for i = 1 to personel do
39093: LD_ADDR_VAR 0 8
39097: PUSH
39098: DOUBLE
39099: LD_INT 1
39101: DEC
39102: ST_TO_ADDR
39103: LD_VAR 0 6
39107: PUSH
39108: FOR_TO
39109: IFFALSE 39232
// begin if i > 4 then
39111: LD_VAR 0 8
39115: PUSH
39116: LD_INT 4
39118: GREATER
39119: IFFALSE 39123
// break ;
39121: GO 39232
// x := personel [ i ] ;
39123: LD_ADDR_VAR 0 13
39127: PUSH
39128: LD_VAR 0 6
39132: PUSH
39133: LD_VAR 0 8
39137: ARRAY
39138: ST_TO_ADDR
// if x = - 1 then
39139: LD_VAR 0 13
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: EQUAL
39148: IFFALSE 39152
// continue ;
39150: GO 39108
// PrepareHuman ( false , i , skill ) ;
39152: LD_INT 0
39154: PPUSH
39155: LD_VAR 0 8
39159: PPUSH
39160: LD_VAR 0 4
39164: PPUSH
39165: CALL_OW 380
// un := CreateHuman ;
39169: LD_ADDR_VAR 0 14
39173: PUSH
39174: CALL_OW 44
39178: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39179: LD_VAR 0 14
39183: PPUSH
39184: LD_VAR 0 1
39188: PPUSH
39189: CALL_OW 250
39193: PPUSH
39194: LD_VAR 0 1
39198: PPUSH
39199: CALL_OW 251
39203: PPUSH
39204: LD_INT 10
39206: PPUSH
39207: LD_INT 0
39209: PPUSH
39210: CALL_OW 50
// result := result ^ un ;
39214: LD_ADDR_VAR 0 7
39218: PUSH
39219: LD_VAR 0 7
39223: PUSH
39224: LD_VAR 0 14
39228: ADD
39229: ST_TO_ADDR
// end ;
39230: GO 39108
39232: POP
39233: POP
// end ; end ;
39234: LD_VAR 0 7
39238: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39239: LD_INT 0
39241: PPUSH
39242: PPUSH
39243: PPUSH
39244: PPUSH
39245: PPUSH
39246: PPUSH
39247: PPUSH
39248: PPUSH
39249: PPUSH
39250: PPUSH
39251: PPUSH
39252: PPUSH
39253: PPUSH
39254: PPUSH
39255: PPUSH
39256: PPUSH
// result := false ;
39257: LD_ADDR_VAR 0 3
39261: PUSH
39262: LD_INT 0
39264: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39265: LD_VAR 0 1
39269: NOT
39270: PUSH
39271: LD_VAR 0 1
39275: PPUSH
39276: CALL_OW 266
39280: PUSH
39281: LD_INT 32
39283: PUSH
39284: LD_INT 33
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: IN
39291: NOT
39292: OR
39293: IFFALSE 39297
// exit ;
39295: GO 40436
// nat := GetNation ( tower ) ;
39297: LD_ADDR_VAR 0 12
39301: PUSH
39302: LD_VAR 0 1
39306: PPUSH
39307: CALL_OW 248
39311: ST_TO_ADDR
// side := GetSide ( tower ) ;
39312: LD_ADDR_VAR 0 16
39316: PUSH
39317: LD_VAR 0 1
39321: PPUSH
39322: CALL_OW 255
39326: ST_TO_ADDR
// x := GetX ( tower ) ;
39327: LD_ADDR_VAR 0 10
39331: PUSH
39332: LD_VAR 0 1
39336: PPUSH
39337: CALL_OW 250
39341: ST_TO_ADDR
// y := GetY ( tower ) ;
39342: LD_ADDR_VAR 0 11
39346: PUSH
39347: LD_VAR 0 1
39351: PPUSH
39352: CALL_OW 251
39356: ST_TO_ADDR
// if not x or not y then
39357: LD_VAR 0 10
39361: NOT
39362: PUSH
39363: LD_VAR 0 11
39367: NOT
39368: OR
39369: IFFALSE 39373
// exit ;
39371: GO 40436
// weapon := 0 ;
39373: LD_ADDR_VAR 0 18
39377: PUSH
39378: LD_INT 0
39380: ST_TO_ADDR
// fac_list := [ ] ;
39381: LD_ADDR_VAR 0 17
39385: PUSH
39386: EMPTY
39387: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39388: LD_ADDR_VAR 0 6
39392: PUSH
39393: LD_VAR 0 1
39397: PPUSH
39398: CALL_OW 274
39402: PPUSH
39403: LD_VAR 0 2
39407: PPUSH
39408: LD_INT 0
39410: PPUSH
39411: CALL 36976 0 3
39415: PPUSH
39416: LD_INT 30
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PPUSH
39426: CALL_OW 72
39430: ST_TO_ADDR
// if not factories then
39431: LD_VAR 0 6
39435: NOT
39436: IFFALSE 39440
// exit ;
39438: GO 40436
// for i in factories do
39440: LD_ADDR_VAR 0 8
39444: PUSH
39445: LD_VAR 0 6
39449: PUSH
39450: FOR_IN
39451: IFFALSE 39476
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39453: LD_ADDR_VAR 0 17
39457: PUSH
39458: LD_VAR 0 17
39462: PUSH
39463: LD_VAR 0 8
39467: PPUSH
39468: CALL_OW 478
39472: UNION
39473: ST_TO_ADDR
39474: GO 39450
39476: POP
39477: POP
// if not fac_list then
39478: LD_VAR 0 17
39482: NOT
39483: IFFALSE 39487
// exit ;
39485: GO 40436
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39487: LD_ADDR_VAR 0 5
39491: PUSH
39492: LD_INT 4
39494: PUSH
39495: LD_INT 5
39497: PUSH
39498: LD_INT 9
39500: PUSH
39501: LD_INT 10
39503: PUSH
39504: LD_INT 6
39506: PUSH
39507: LD_INT 7
39509: PUSH
39510: LD_INT 11
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 27
39524: PUSH
39525: LD_INT 28
39527: PUSH
39528: LD_INT 26
39530: PUSH
39531: LD_INT 30
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 43
39542: PUSH
39543: LD_INT 44
39545: PUSH
39546: LD_INT 46
39548: PUSH
39549: LD_INT 45
39551: PUSH
39552: LD_INT 47
39554: PUSH
39555: LD_INT 49
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: LIST
39570: PUSH
39571: LD_VAR 0 12
39575: ARRAY
39576: ST_TO_ADDR
// for i in list do
39577: LD_ADDR_VAR 0 8
39581: PUSH
39582: LD_VAR 0 5
39586: PUSH
39587: FOR_IN
39588: IFFALSE 39621
// if not i in fac_list then
39590: LD_VAR 0 8
39594: PUSH
39595: LD_VAR 0 17
39599: IN
39600: NOT
39601: IFFALSE 39619
// list := list diff i ;
39603: LD_ADDR_VAR 0 5
39607: PUSH
39608: LD_VAR 0 5
39612: PUSH
39613: LD_VAR 0 8
39617: DIFF
39618: ST_TO_ADDR
39619: GO 39587
39621: POP
39622: POP
// if not list then
39623: LD_VAR 0 5
39627: NOT
39628: IFFALSE 39632
// exit ;
39630: GO 40436
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39632: LD_VAR 0 12
39636: PUSH
39637: LD_INT 3
39639: EQUAL
39640: PUSH
39641: LD_INT 49
39643: PUSH
39644: LD_VAR 0 5
39648: IN
39649: AND
39650: PUSH
39651: LD_INT 31
39653: PPUSH
39654: LD_VAR 0 16
39658: PPUSH
39659: CALL_OW 321
39663: PUSH
39664: LD_INT 2
39666: EQUAL
39667: AND
39668: IFFALSE 39728
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39670: LD_INT 22
39672: PUSH
39673: LD_VAR 0 16
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 35
39684: PUSH
39685: LD_INT 49
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 91
39694: PUSH
39695: LD_VAR 0 1
39699: PUSH
39700: LD_INT 10
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: LIST
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: LIST
39712: PPUSH
39713: CALL_OW 69
39717: NOT
39718: IFFALSE 39728
// weapon := ru_time_lapser ;
39720: LD_ADDR_VAR 0 18
39724: PUSH
39725: LD_INT 49
39727: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39728: LD_VAR 0 12
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: IN
39743: PUSH
39744: LD_INT 11
39746: PUSH
39747: LD_VAR 0 5
39751: IN
39752: PUSH
39753: LD_INT 30
39755: PUSH
39756: LD_VAR 0 5
39760: IN
39761: OR
39762: AND
39763: PUSH
39764: LD_INT 6
39766: PPUSH
39767: LD_VAR 0 16
39771: PPUSH
39772: CALL_OW 321
39776: PUSH
39777: LD_INT 2
39779: EQUAL
39780: AND
39781: IFFALSE 39946
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39783: LD_INT 22
39785: PUSH
39786: LD_VAR 0 16
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: LD_INT 35
39800: PUSH
39801: LD_INT 11
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 35
39810: PUSH
39811: LD_INT 30
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 91
39825: PUSH
39826: LD_VAR 0 1
39830: PUSH
39831: LD_INT 18
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: LIST
39843: PPUSH
39844: CALL_OW 69
39848: NOT
39849: PUSH
39850: LD_INT 22
39852: PUSH
39853: LD_VAR 0 16
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 2
39864: PUSH
39865: LD_INT 30
39867: PUSH
39868: LD_INT 32
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 30
39877: PUSH
39878: LD_INT 33
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 91
39892: PUSH
39893: LD_VAR 0 1
39897: PUSH
39898: LD_INT 12
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: LIST
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: PUSH
39911: EMPTY
39912: LIST
39913: PPUSH
39914: CALL_OW 69
39918: PUSH
39919: LD_INT 2
39921: GREATER
39922: AND
39923: IFFALSE 39946
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39925: LD_ADDR_VAR 0 18
39929: PUSH
39930: LD_INT 11
39932: PUSH
39933: LD_INT 30
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_VAR 0 12
39944: ARRAY
39945: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39946: LD_VAR 0 18
39950: NOT
39951: PUSH
39952: LD_INT 40
39954: PPUSH
39955: LD_VAR 0 16
39959: PPUSH
39960: CALL_OW 321
39964: PUSH
39965: LD_INT 2
39967: EQUAL
39968: AND
39969: PUSH
39970: LD_INT 7
39972: PUSH
39973: LD_VAR 0 5
39977: IN
39978: PUSH
39979: LD_INT 28
39981: PUSH
39982: LD_VAR 0 5
39986: IN
39987: OR
39988: PUSH
39989: LD_INT 45
39991: PUSH
39992: LD_VAR 0 5
39996: IN
39997: OR
39998: AND
39999: IFFALSE 40253
// begin hex := GetHexInfo ( x , y ) ;
40001: LD_ADDR_VAR 0 4
40005: PUSH
40006: LD_VAR 0 10
40010: PPUSH
40011: LD_VAR 0 11
40015: PPUSH
40016: CALL_OW 546
40020: ST_TO_ADDR
// if hex [ 1 ] then
40021: LD_VAR 0 4
40025: PUSH
40026: LD_INT 1
40028: ARRAY
40029: IFFALSE 40033
// exit ;
40031: GO 40436
// height := hex [ 2 ] ;
40033: LD_ADDR_VAR 0 15
40037: PUSH
40038: LD_VAR 0 4
40042: PUSH
40043: LD_INT 2
40045: ARRAY
40046: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40047: LD_ADDR_VAR 0 14
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: LD_INT 3
40060: PUSH
40061: LD_INT 5
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: ST_TO_ADDR
// for i in tmp do
40070: LD_ADDR_VAR 0 8
40074: PUSH
40075: LD_VAR 0 14
40079: PUSH
40080: FOR_IN
40081: IFFALSE 40251
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40083: LD_ADDR_VAR 0 9
40087: PUSH
40088: LD_VAR 0 10
40092: PPUSH
40093: LD_VAR 0 8
40097: PPUSH
40098: LD_INT 5
40100: PPUSH
40101: CALL_OW 272
40105: PUSH
40106: LD_VAR 0 11
40110: PPUSH
40111: LD_VAR 0 8
40115: PPUSH
40116: LD_INT 5
40118: PPUSH
40119: CALL_OW 273
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40128: LD_VAR 0 9
40132: PUSH
40133: LD_INT 1
40135: ARRAY
40136: PPUSH
40137: LD_VAR 0 9
40141: PUSH
40142: LD_INT 2
40144: ARRAY
40145: PPUSH
40146: CALL_OW 488
40150: IFFALSE 40249
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40152: LD_ADDR_VAR 0 4
40156: PUSH
40157: LD_VAR 0 9
40161: PUSH
40162: LD_INT 1
40164: ARRAY
40165: PPUSH
40166: LD_VAR 0 9
40170: PUSH
40171: LD_INT 2
40173: ARRAY
40174: PPUSH
40175: CALL_OW 546
40179: ST_TO_ADDR
// if hex [ 1 ] then
40180: LD_VAR 0 4
40184: PUSH
40185: LD_INT 1
40187: ARRAY
40188: IFFALSE 40192
// continue ;
40190: GO 40080
// h := hex [ 2 ] ;
40192: LD_ADDR_VAR 0 13
40196: PUSH
40197: LD_VAR 0 4
40201: PUSH
40202: LD_INT 2
40204: ARRAY
40205: ST_TO_ADDR
// if h + 7 < height then
40206: LD_VAR 0 13
40210: PUSH
40211: LD_INT 7
40213: PLUS
40214: PUSH
40215: LD_VAR 0 15
40219: LESS
40220: IFFALSE 40249
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40222: LD_ADDR_VAR 0 18
40226: PUSH
40227: LD_INT 7
40229: PUSH
40230: LD_INT 28
40232: PUSH
40233: LD_INT 45
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: PUSH
40241: LD_VAR 0 12
40245: ARRAY
40246: ST_TO_ADDR
// break ;
40247: GO 40251
// end ; end ; end ;
40249: GO 40080
40251: POP
40252: POP
// end ; if not weapon then
40253: LD_VAR 0 18
40257: NOT
40258: IFFALSE 40318
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40260: LD_ADDR_VAR 0 5
40264: PUSH
40265: LD_VAR 0 5
40269: PUSH
40270: LD_INT 11
40272: PUSH
40273: LD_INT 30
40275: PUSH
40276: LD_INT 49
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: DIFF
40284: ST_TO_ADDR
// if not list then
40285: LD_VAR 0 5
40289: NOT
40290: IFFALSE 40294
// exit ;
40292: GO 40436
// weapon := list [ rand ( 1 , list ) ] ;
40294: LD_ADDR_VAR 0 18
40298: PUSH
40299: LD_VAR 0 5
40303: PUSH
40304: LD_INT 1
40306: PPUSH
40307: LD_VAR 0 5
40311: PPUSH
40312: CALL_OW 12
40316: ARRAY
40317: ST_TO_ADDR
// end ; if weapon then
40318: LD_VAR 0 18
40322: IFFALSE 40436
// begin tmp := CostOfWeapon ( weapon ) ;
40324: LD_ADDR_VAR 0 14
40328: PUSH
40329: LD_VAR 0 18
40333: PPUSH
40334: CALL_OW 451
40338: ST_TO_ADDR
// j := GetBase ( tower ) ;
40339: LD_ADDR_VAR 0 9
40343: PUSH
40344: LD_VAR 0 1
40348: PPUSH
40349: CALL_OW 274
40353: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40354: LD_VAR 0 9
40358: PPUSH
40359: LD_INT 1
40361: PPUSH
40362: CALL_OW 275
40366: PUSH
40367: LD_VAR 0 14
40371: PUSH
40372: LD_INT 1
40374: ARRAY
40375: GREATEREQUAL
40376: PUSH
40377: LD_VAR 0 9
40381: PPUSH
40382: LD_INT 2
40384: PPUSH
40385: CALL_OW 275
40389: PUSH
40390: LD_VAR 0 14
40394: PUSH
40395: LD_INT 2
40397: ARRAY
40398: GREATEREQUAL
40399: AND
40400: PUSH
40401: LD_VAR 0 9
40405: PPUSH
40406: LD_INT 3
40408: PPUSH
40409: CALL_OW 275
40413: PUSH
40414: LD_VAR 0 14
40418: PUSH
40419: LD_INT 3
40421: ARRAY
40422: GREATEREQUAL
40423: AND
40424: IFFALSE 40436
// result := weapon ;
40426: LD_ADDR_VAR 0 3
40430: PUSH
40431: LD_VAR 0 18
40435: ST_TO_ADDR
// end ; end ;
40436: LD_VAR 0 3
40440: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40441: LD_INT 0
40443: PPUSH
40444: PPUSH
// result := true ;
40445: LD_ADDR_VAR 0 3
40449: PUSH
40450: LD_INT 1
40452: ST_TO_ADDR
// if array1 = array2 then
40453: LD_VAR 0 1
40457: PUSH
40458: LD_VAR 0 2
40462: EQUAL
40463: IFFALSE 40523
// begin for i = 1 to array1 do
40465: LD_ADDR_VAR 0 4
40469: PUSH
40470: DOUBLE
40471: LD_INT 1
40473: DEC
40474: ST_TO_ADDR
40475: LD_VAR 0 1
40479: PUSH
40480: FOR_TO
40481: IFFALSE 40519
// if array1 [ i ] <> array2 [ i ] then
40483: LD_VAR 0 1
40487: PUSH
40488: LD_VAR 0 4
40492: ARRAY
40493: PUSH
40494: LD_VAR 0 2
40498: PUSH
40499: LD_VAR 0 4
40503: ARRAY
40504: NONEQUAL
40505: IFFALSE 40517
// begin result := false ;
40507: LD_ADDR_VAR 0 3
40511: PUSH
40512: LD_INT 0
40514: ST_TO_ADDR
// break ;
40515: GO 40519
// end ;
40517: GO 40480
40519: POP
40520: POP
// end else
40521: GO 40531
// result := false ;
40523: LD_ADDR_VAR 0 3
40527: PUSH
40528: LD_INT 0
40530: ST_TO_ADDR
// end ;
40531: LD_VAR 0 3
40535: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40536: LD_INT 0
40538: PPUSH
40539: PPUSH
// if not array1 or not array2 then
40540: LD_VAR 0 1
40544: NOT
40545: PUSH
40546: LD_VAR 0 2
40550: NOT
40551: OR
40552: IFFALSE 40556
// exit ;
40554: GO 40620
// result := true ;
40556: LD_ADDR_VAR 0 3
40560: PUSH
40561: LD_INT 1
40563: ST_TO_ADDR
// for i = 1 to array1 do
40564: LD_ADDR_VAR 0 4
40568: PUSH
40569: DOUBLE
40570: LD_INT 1
40572: DEC
40573: ST_TO_ADDR
40574: LD_VAR 0 1
40578: PUSH
40579: FOR_TO
40580: IFFALSE 40618
// if array1 [ i ] <> array2 [ i ] then
40582: LD_VAR 0 1
40586: PUSH
40587: LD_VAR 0 4
40591: ARRAY
40592: PUSH
40593: LD_VAR 0 2
40597: PUSH
40598: LD_VAR 0 4
40602: ARRAY
40603: NONEQUAL
40604: IFFALSE 40616
// begin result := false ;
40606: LD_ADDR_VAR 0 3
40610: PUSH
40611: LD_INT 0
40613: ST_TO_ADDR
// break ;
40614: GO 40618
// end ;
40616: GO 40579
40618: POP
40619: POP
// end ;
40620: LD_VAR 0 3
40624: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40625: LD_INT 0
40627: PPUSH
40628: PPUSH
40629: PPUSH
// pom := GetBase ( fac ) ;
40630: LD_ADDR_VAR 0 5
40634: PUSH
40635: LD_VAR 0 1
40639: PPUSH
40640: CALL_OW 274
40644: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40645: LD_ADDR_VAR 0 4
40649: PUSH
40650: LD_VAR 0 2
40654: PUSH
40655: LD_INT 1
40657: ARRAY
40658: PPUSH
40659: LD_VAR 0 2
40663: PUSH
40664: LD_INT 2
40666: ARRAY
40667: PPUSH
40668: LD_VAR 0 2
40672: PUSH
40673: LD_INT 3
40675: ARRAY
40676: PPUSH
40677: LD_VAR 0 2
40681: PUSH
40682: LD_INT 4
40684: ARRAY
40685: PPUSH
40686: CALL_OW 449
40690: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40691: LD_ADDR_VAR 0 3
40695: PUSH
40696: LD_VAR 0 5
40700: PPUSH
40701: LD_INT 1
40703: PPUSH
40704: CALL_OW 275
40708: PUSH
40709: LD_VAR 0 4
40713: PUSH
40714: LD_INT 1
40716: ARRAY
40717: GREATEREQUAL
40718: PUSH
40719: LD_VAR 0 5
40723: PPUSH
40724: LD_INT 2
40726: PPUSH
40727: CALL_OW 275
40731: PUSH
40732: LD_VAR 0 4
40736: PUSH
40737: LD_INT 2
40739: ARRAY
40740: GREATEREQUAL
40741: AND
40742: PUSH
40743: LD_VAR 0 5
40747: PPUSH
40748: LD_INT 3
40750: PPUSH
40751: CALL_OW 275
40755: PUSH
40756: LD_VAR 0 4
40760: PUSH
40761: LD_INT 3
40763: ARRAY
40764: GREATEREQUAL
40765: AND
40766: ST_TO_ADDR
// end ;
40767: LD_VAR 0 3
40771: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40772: LD_INT 0
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
// pom := GetBase ( building ) ;
40778: LD_ADDR_VAR 0 3
40782: PUSH
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 274
40792: ST_TO_ADDR
// if not pom then
40793: LD_VAR 0 3
40797: NOT
40798: IFFALSE 40802
// exit ;
40800: GO 40972
// btype := GetBType ( building ) ;
40802: LD_ADDR_VAR 0 5
40806: PUSH
40807: LD_VAR 0 1
40811: PPUSH
40812: CALL_OW 266
40816: ST_TO_ADDR
// if btype = b_armoury then
40817: LD_VAR 0 5
40821: PUSH
40822: LD_INT 4
40824: EQUAL
40825: IFFALSE 40835
// btype := b_barracks ;
40827: LD_ADDR_VAR 0 5
40831: PUSH
40832: LD_INT 5
40834: ST_TO_ADDR
// if btype = b_depot then
40835: LD_VAR 0 5
40839: PUSH
40840: LD_INT 0
40842: EQUAL
40843: IFFALSE 40853
// btype := b_warehouse ;
40845: LD_ADDR_VAR 0 5
40849: PUSH
40850: LD_INT 1
40852: ST_TO_ADDR
// if btype = b_workshop then
40853: LD_VAR 0 5
40857: PUSH
40858: LD_INT 2
40860: EQUAL
40861: IFFALSE 40871
// btype := b_factory ;
40863: LD_ADDR_VAR 0 5
40867: PUSH
40868: LD_INT 3
40870: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40871: LD_ADDR_VAR 0 4
40875: PUSH
40876: LD_VAR 0 5
40880: PPUSH
40881: LD_VAR 0 1
40885: PPUSH
40886: CALL_OW 248
40890: PPUSH
40891: CALL_OW 450
40895: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40896: LD_ADDR_VAR 0 2
40900: PUSH
40901: LD_VAR 0 3
40905: PPUSH
40906: LD_INT 1
40908: PPUSH
40909: CALL_OW 275
40913: PUSH
40914: LD_VAR 0 4
40918: PUSH
40919: LD_INT 1
40921: ARRAY
40922: GREATEREQUAL
40923: PUSH
40924: LD_VAR 0 3
40928: PPUSH
40929: LD_INT 2
40931: PPUSH
40932: CALL_OW 275
40936: PUSH
40937: LD_VAR 0 4
40941: PUSH
40942: LD_INT 2
40944: ARRAY
40945: GREATEREQUAL
40946: AND
40947: PUSH
40948: LD_VAR 0 3
40952: PPUSH
40953: LD_INT 3
40955: PPUSH
40956: CALL_OW 275
40960: PUSH
40961: LD_VAR 0 4
40965: PUSH
40966: LD_INT 3
40968: ARRAY
40969: GREATEREQUAL
40970: AND
40971: ST_TO_ADDR
// end ;
40972: LD_VAR 0 2
40976: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40977: LD_INT 0
40979: PPUSH
40980: PPUSH
40981: PPUSH
// pom := GetBase ( building ) ;
40982: LD_ADDR_VAR 0 4
40986: PUSH
40987: LD_VAR 0 1
40991: PPUSH
40992: CALL_OW 274
40996: ST_TO_ADDR
// if not pom then
40997: LD_VAR 0 4
41001: NOT
41002: IFFALSE 41006
// exit ;
41004: GO 41107
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41006: LD_ADDR_VAR 0 5
41010: PUSH
41011: LD_VAR 0 2
41015: PPUSH
41016: LD_VAR 0 1
41020: PPUSH
41021: CALL_OW 248
41025: PPUSH
41026: CALL_OW 450
41030: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41031: LD_ADDR_VAR 0 3
41035: PUSH
41036: LD_VAR 0 4
41040: PPUSH
41041: LD_INT 1
41043: PPUSH
41044: CALL_OW 275
41048: PUSH
41049: LD_VAR 0 5
41053: PUSH
41054: LD_INT 1
41056: ARRAY
41057: GREATEREQUAL
41058: PUSH
41059: LD_VAR 0 4
41063: PPUSH
41064: LD_INT 2
41066: PPUSH
41067: CALL_OW 275
41071: PUSH
41072: LD_VAR 0 5
41076: PUSH
41077: LD_INT 2
41079: ARRAY
41080: GREATEREQUAL
41081: AND
41082: PUSH
41083: LD_VAR 0 4
41087: PPUSH
41088: LD_INT 3
41090: PPUSH
41091: CALL_OW 275
41095: PUSH
41096: LD_VAR 0 5
41100: PUSH
41101: LD_INT 3
41103: ARRAY
41104: GREATEREQUAL
41105: AND
41106: ST_TO_ADDR
// end ;
41107: LD_VAR 0 3
41111: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41112: LD_INT 0
41114: PPUSH
41115: PPUSH
41116: PPUSH
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
41124: PPUSH
// result := false ;
41125: LD_ADDR_VAR 0 8
41129: PUSH
41130: LD_INT 0
41132: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41133: LD_VAR 0 5
41137: NOT
41138: PUSH
41139: LD_VAR 0 1
41143: NOT
41144: OR
41145: PUSH
41146: LD_VAR 0 2
41150: NOT
41151: OR
41152: PUSH
41153: LD_VAR 0 3
41157: NOT
41158: OR
41159: IFFALSE 41163
// exit ;
41161: GO 41977
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41163: LD_ADDR_VAR 0 14
41167: PUSH
41168: LD_VAR 0 1
41172: PPUSH
41173: LD_VAR 0 2
41177: PPUSH
41178: LD_VAR 0 3
41182: PPUSH
41183: LD_VAR 0 4
41187: PPUSH
41188: LD_VAR 0 5
41192: PUSH
41193: LD_INT 1
41195: ARRAY
41196: PPUSH
41197: CALL_OW 248
41201: PPUSH
41202: LD_INT 0
41204: PPUSH
41205: CALL 42814 0 6
41209: ST_TO_ADDR
// if not hexes then
41210: LD_VAR 0 14
41214: NOT
41215: IFFALSE 41219
// exit ;
41217: GO 41977
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41219: LD_ADDR_VAR 0 17
41223: PUSH
41224: LD_VAR 0 5
41228: PPUSH
41229: LD_INT 22
41231: PUSH
41232: LD_VAR 0 13
41236: PPUSH
41237: CALL_OW 255
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 30
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 30
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: LIST
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PPUSH
41278: CALL_OW 72
41282: ST_TO_ADDR
// for i = 1 to hexes do
41283: LD_ADDR_VAR 0 9
41287: PUSH
41288: DOUBLE
41289: LD_INT 1
41291: DEC
41292: ST_TO_ADDR
41293: LD_VAR 0 14
41297: PUSH
41298: FOR_TO
41299: IFFALSE 41975
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41301: LD_ADDR_VAR 0 13
41305: PUSH
41306: LD_VAR 0 14
41310: PUSH
41311: LD_VAR 0 9
41315: ARRAY
41316: PUSH
41317: LD_INT 1
41319: ARRAY
41320: PPUSH
41321: LD_VAR 0 14
41325: PUSH
41326: LD_VAR 0 9
41330: ARRAY
41331: PUSH
41332: LD_INT 2
41334: ARRAY
41335: PPUSH
41336: CALL_OW 428
41340: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41341: LD_VAR 0 14
41345: PUSH
41346: LD_VAR 0 9
41350: ARRAY
41351: PUSH
41352: LD_INT 1
41354: ARRAY
41355: PPUSH
41356: LD_VAR 0 14
41360: PUSH
41361: LD_VAR 0 9
41365: ARRAY
41366: PUSH
41367: LD_INT 2
41369: ARRAY
41370: PPUSH
41371: CALL_OW 351
41375: PUSH
41376: LD_VAR 0 14
41380: PUSH
41381: LD_VAR 0 9
41385: ARRAY
41386: PUSH
41387: LD_INT 1
41389: ARRAY
41390: PPUSH
41391: LD_VAR 0 14
41395: PUSH
41396: LD_VAR 0 9
41400: ARRAY
41401: PUSH
41402: LD_INT 2
41404: ARRAY
41405: PPUSH
41406: CALL_OW 488
41410: NOT
41411: OR
41412: PUSH
41413: LD_VAR 0 13
41417: PPUSH
41418: CALL_OW 247
41422: PUSH
41423: LD_INT 3
41425: EQUAL
41426: OR
41427: IFFALSE 41433
// exit ;
41429: POP
41430: POP
41431: GO 41977
// if not tmp then
41433: LD_VAR 0 13
41437: NOT
41438: IFFALSE 41442
// continue ;
41440: GO 41298
// result := true ;
41442: LD_ADDR_VAR 0 8
41446: PUSH
41447: LD_INT 1
41449: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41450: LD_VAR 0 6
41454: PUSH
41455: LD_VAR 0 13
41459: PPUSH
41460: CALL_OW 247
41464: PUSH
41465: LD_INT 2
41467: EQUAL
41468: AND
41469: PUSH
41470: LD_VAR 0 13
41474: PPUSH
41475: CALL_OW 263
41479: PUSH
41480: LD_INT 1
41482: EQUAL
41483: AND
41484: IFFALSE 41648
// begin if IsDrivenBy ( tmp ) then
41486: LD_VAR 0 13
41490: PPUSH
41491: CALL_OW 311
41495: IFFALSE 41499
// continue ;
41497: GO 41298
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41499: LD_VAR 0 6
41503: PPUSH
41504: LD_INT 3
41506: PUSH
41507: LD_INT 60
41509: PUSH
41510: EMPTY
41511: LIST
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 3
41519: PUSH
41520: LD_INT 55
41522: PUSH
41523: EMPTY
41524: LIST
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PPUSH
41534: CALL_OW 72
41538: IFFALSE 41646
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41540: LD_ADDR_VAR 0 18
41544: PUSH
41545: LD_VAR 0 6
41549: PPUSH
41550: LD_INT 3
41552: PUSH
41553: LD_INT 60
41555: PUSH
41556: EMPTY
41557: LIST
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: LD_INT 55
41568: PUSH
41569: EMPTY
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PPUSH
41580: CALL_OW 72
41584: PUSH
41585: LD_INT 1
41587: ARRAY
41588: ST_TO_ADDR
// if IsInUnit ( driver ) then
41589: LD_VAR 0 18
41593: PPUSH
41594: CALL_OW 310
41598: IFFALSE 41609
// ComExit ( driver ) ;
41600: LD_VAR 0 18
41604: PPUSH
41605: CALL 65998 0 1
// AddComEnterUnit ( driver , tmp ) ;
41609: LD_VAR 0 18
41613: PPUSH
41614: LD_VAR 0 13
41618: PPUSH
41619: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41623: LD_VAR 0 18
41627: PPUSH
41628: LD_VAR 0 7
41632: PPUSH
41633: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41637: LD_VAR 0 18
41641: PPUSH
41642: CALL_OW 181
// end ; continue ;
41646: GO 41298
// end ; if not cleaners or not tmp in cleaners then
41648: LD_VAR 0 6
41652: NOT
41653: PUSH
41654: LD_VAR 0 13
41658: PUSH
41659: LD_VAR 0 6
41663: IN
41664: NOT
41665: OR
41666: IFFALSE 41973
// begin if dep then
41668: LD_VAR 0 17
41672: IFFALSE 41808
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41674: LD_ADDR_VAR 0 16
41678: PUSH
41679: LD_VAR 0 17
41683: PUSH
41684: LD_INT 1
41686: ARRAY
41687: PPUSH
41688: CALL_OW 250
41692: PPUSH
41693: LD_VAR 0 17
41697: PUSH
41698: LD_INT 1
41700: ARRAY
41701: PPUSH
41702: CALL_OW 254
41706: PPUSH
41707: LD_INT 5
41709: PPUSH
41710: CALL_OW 272
41714: PUSH
41715: LD_VAR 0 17
41719: PUSH
41720: LD_INT 1
41722: ARRAY
41723: PPUSH
41724: CALL_OW 251
41728: PPUSH
41729: LD_VAR 0 17
41733: PUSH
41734: LD_INT 1
41736: ARRAY
41737: PPUSH
41738: CALL_OW 254
41742: PPUSH
41743: LD_INT 5
41745: PPUSH
41746: CALL_OW 273
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41755: LD_VAR 0 16
41759: PUSH
41760: LD_INT 1
41762: ARRAY
41763: PPUSH
41764: LD_VAR 0 16
41768: PUSH
41769: LD_INT 2
41771: ARRAY
41772: PPUSH
41773: CALL_OW 488
41777: IFFALSE 41808
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41779: LD_VAR 0 13
41783: PPUSH
41784: LD_VAR 0 16
41788: PUSH
41789: LD_INT 1
41791: ARRAY
41792: PPUSH
41793: LD_VAR 0 16
41797: PUSH
41798: LD_INT 2
41800: ARRAY
41801: PPUSH
41802: CALL_OW 111
// continue ;
41806: GO 41298
// end ; end ; r := GetDir ( tmp ) ;
41808: LD_ADDR_VAR 0 15
41812: PUSH
41813: LD_VAR 0 13
41817: PPUSH
41818: CALL_OW 254
41822: ST_TO_ADDR
// if r = 5 then
41823: LD_VAR 0 15
41827: PUSH
41828: LD_INT 5
41830: EQUAL
41831: IFFALSE 41841
// r := 0 ;
41833: LD_ADDR_VAR 0 15
41837: PUSH
41838: LD_INT 0
41840: ST_TO_ADDR
// for j = r to 5 do
41841: LD_ADDR_VAR 0 10
41845: PUSH
41846: DOUBLE
41847: LD_VAR 0 15
41851: DEC
41852: ST_TO_ADDR
41853: LD_INT 5
41855: PUSH
41856: FOR_TO
41857: IFFALSE 41971
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41859: LD_ADDR_VAR 0 11
41863: PUSH
41864: LD_VAR 0 13
41868: PPUSH
41869: CALL_OW 250
41873: PPUSH
41874: LD_VAR 0 10
41878: PPUSH
41879: LD_INT 2
41881: PPUSH
41882: CALL_OW 272
41886: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41887: LD_ADDR_VAR 0 12
41891: PUSH
41892: LD_VAR 0 13
41896: PPUSH
41897: CALL_OW 251
41901: PPUSH
41902: LD_VAR 0 10
41906: PPUSH
41907: LD_INT 2
41909: PPUSH
41910: CALL_OW 273
41914: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41915: LD_VAR 0 11
41919: PPUSH
41920: LD_VAR 0 12
41924: PPUSH
41925: CALL_OW 488
41929: PUSH
41930: LD_VAR 0 11
41934: PPUSH
41935: LD_VAR 0 12
41939: PPUSH
41940: CALL_OW 428
41944: NOT
41945: AND
41946: IFFALSE 41969
// begin ComMoveXY ( tmp , _x , _y ) ;
41948: LD_VAR 0 13
41952: PPUSH
41953: LD_VAR 0 11
41957: PPUSH
41958: LD_VAR 0 12
41962: PPUSH
41963: CALL_OW 111
// break ;
41967: GO 41971
// end ; end ;
41969: GO 41856
41971: POP
41972: POP
// end ; end ;
41973: GO 41298
41975: POP
41976: POP
// end ;
41977: LD_VAR 0 8
41981: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41982: LD_INT 0
41984: PPUSH
41985: PPUSH
41986: PPUSH
41987: PPUSH
41988: PPUSH
41989: PPUSH
41990: PPUSH
41991: PPUSH
41992: PPUSH
41993: PPUSH
// result := false ;
41994: LD_ADDR_VAR 0 6
41998: PUSH
41999: LD_INT 0
42001: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42002: LD_VAR 0 1
42006: NOT
42007: PUSH
42008: LD_VAR 0 1
42012: PPUSH
42013: CALL_OW 266
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: IN
42028: NOT
42029: OR
42030: PUSH
42031: LD_VAR 0 2
42035: NOT
42036: OR
42037: PUSH
42038: LD_VAR 0 5
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: LD_INT 4
42057: PUSH
42058: LD_INT 5
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: IN
42069: NOT
42070: OR
42071: PUSH
42072: LD_VAR 0 3
42076: PPUSH
42077: LD_VAR 0 4
42081: PPUSH
42082: CALL_OW 488
42086: NOT
42087: OR
42088: IFFALSE 42092
// exit ;
42090: GO 42809
// pom := GetBase ( depot ) ;
42092: LD_ADDR_VAR 0 10
42096: PUSH
42097: LD_VAR 0 1
42101: PPUSH
42102: CALL_OW 274
42106: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42107: LD_ADDR_VAR 0 11
42111: PUSH
42112: LD_VAR 0 2
42116: PPUSH
42117: LD_VAR 0 1
42121: PPUSH
42122: CALL_OW 248
42126: PPUSH
42127: CALL_OW 450
42131: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42132: LD_VAR 0 10
42136: PPUSH
42137: LD_INT 1
42139: PPUSH
42140: CALL_OW 275
42144: PUSH
42145: LD_VAR 0 11
42149: PUSH
42150: LD_INT 1
42152: ARRAY
42153: GREATEREQUAL
42154: PUSH
42155: LD_VAR 0 10
42159: PPUSH
42160: LD_INT 2
42162: PPUSH
42163: CALL_OW 275
42167: PUSH
42168: LD_VAR 0 11
42172: PUSH
42173: LD_INT 2
42175: ARRAY
42176: GREATEREQUAL
42177: AND
42178: PUSH
42179: LD_VAR 0 10
42183: PPUSH
42184: LD_INT 3
42186: PPUSH
42187: CALL_OW 275
42191: PUSH
42192: LD_VAR 0 11
42196: PUSH
42197: LD_INT 3
42199: ARRAY
42200: GREATEREQUAL
42201: AND
42202: NOT
42203: IFFALSE 42207
// exit ;
42205: GO 42809
// if GetBType ( depot ) = b_depot then
42207: LD_VAR 0 1
42211: PPUSH
42212: CALL_OW 266
42216: PUSH
42217: LD_INT 0
42219: EQUAL
42220: IFFALSE 42232
// dist := 28 else
42222: LD_ADDR_VAR 0 14
42226: PUSH
42227: LD_INT 28
42229: ST_TO_ADDR
42230: GO 42240
// dist := 36 ;
42232: LD_ADDR_VAR 0 14
42236: PUSH
42237: LD_INT 36
42239: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42240: LD_VAR 0 1
42244: PPUSH
42245: LD_VAR 0 3
42249: PPUSH
42250: LD_VAR 0 4
42254: PPUSH
42255: CALL_OW 297
42259: PUSH
42260: LD_VAR 0 14
42264: GREATER
42265: IFFALSE 42269
// exit ;
42267: GO 42809
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42269: LD_ADDR_VAR 0 12
42273: PUSH
42274: LD_VAR 0 2
42278: PPUSH
42279: LD_VAR 0 3
42283: PPUSH
42284: LD_VAR 0 4
42288: PPUSH
42289: LD_VAR 0 5
42293: PPUSH
42294: LD_VAR 0 1
42298: PPUSH
42299: CALL_OW 248
42303: PPUSH
42304: LD_INT 0
42306: PPUSH
42307: CALL 42814 0 6
42311: ST_TO_ADDR
// if not hexes then
42312: LD_VAR 0 12
42316: NOT
42317: IFFALSE 42321
// exit ;
42319: GO 42809
// hex := GetHexInfo ( x , y ) ;
42321: LD_ADDR_VAR 0 15
42325: PUSH
42326: LD_VAR 0 3
42330: PPUSH
42331: LD_VAR 0 4
42335: PPUSH
42336: CALL_OW 546
42340: ST_TO_ADDR
// if hex [ 1 ] then
42341: LD_VAR 0 15
42345: PUSH
42346: LD_INT 1
42348: ARRAY
42349: IFFALSE 42353
// exit ;
42351: GO 42809
// height := hex [ 2 ] ;
42353: LD_ADDR_VAR 0 13
42357: PUSH
42358: LD_VAR 0 15
42362: PUSH
42363: LD_INT 2
42365: ARRAY
42366: ST_TO_ADDR
// for i = 1 to hexes do
42367: LD_ADDR_VAR 0 7
42371: PUSH
42372: DOUBLE
42373: LD_INT 1
42375: DEC
42376: ST_TO_ADDR
42377: LD_VAR 0 12
42381: PUSH
42382: FOR_TO
42383: IFFALSE 42713
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42385: LD_VAR 0 12
42389: PUSH
42390: LD_VAR 0 7
42394: ARRAY
42395: PUSH
42396: LD_INT 1
42398: ARRAY
42399: PPUSH
42400: LD_VAR 0 12
42404: PUSH
42405: LD_VAR 0 7
42409: ARRAY
42410: PUSH
42411: LD_INT 2
42413: ARRAY
42414: PPUSH
42415: CALL_OW 488
42419: NOT
42420: PUSH
42421: LD_VAR 0 12
42425: PUSH
42426: LD_VAR 0 7
42430: ARRAY
42431: PUSH
42432: LD_INT 1
42434: ARRAY
42435: PPUSH
42436: LD_VAR 0 12
42440: PUSH
42441: LD_VAR 0 7
42445: ARRAY
42446: PUSH
42447: LD_INT 2
42449: ARRAY
42450: PPUSH
42451: CALL_OW 428
42455: PUSH
42456: LD_INT 0
42458: GREATER
42459: OR
42460: PUSH
42461: LD_VAR 0 12
42465: PUSH
42466: LD_VAR 0 7
42470: ARRAY
42471: PUSH
42472: LD_INT 1
42474: ARRAY
42475: PPUSH
42476: LD_VAR 0 12
42480: PUSH
42481: LD_VAR 0 7
42485: ARRAY
42486: PUSH
42487: LD_INT 2
42489: ARRAY
42490: PPUSH
42491: CALL_OW 351
42495: OR
42496: IFFALSE 42502
// exit ;
42498: POP
42499: POP
42500: GO 42809
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42502: LD_ADDR_VAR 0 8
42506: PUSH
42507: LD_VAR 0 12
42511: PUSH
42512: LD_VAR 0 7
42516: ARRAY
42517: PUSH
42518: LD_INT 1
42520: ARRAY
42521: PPUSH
42522: LD_VAR 0 12
42526: PUSH
42527: LD_VAR 0 7
42531: ARRAY
42532: PUSH
42533: LD_INT 2
42535: ARRAY
42536: PPUSH
42537: CALL_OW 546
42541: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42542: LD_VAR 0 8
42546: PUSH
42547: LD_INT 1
42549: ARRAY
42550: PUSH
42551: LD_VAR 0 8
42555: PUSH
42556: LD_INT 2
42558: ARRAY
42559: PUSH
42560: LD_VAR 0 13
42564: PUSH
42565: LD_INT 2
42567: PLUS
42568: GREATER
42569: OR
42570: PUSH
42571: LD_VAR 0 8
42575: PUSH
42576: LD_INT 2
42578: ARRAY
42579: PUSH
42580: LD_VAR 0 13
42584: PUSH
42585: LD_INT 2
42587: MINUS
42588: LESS
42589: OR
42590: PUSH
42591: LD_VAR 0 8
42595: PUSH
42596: LD_INT 3
42598: ARRAY
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 8
42605: PUSH
42606: LD_INT 9
42608: PUSH
42609: LD_INT 10
42611: PUSH
42612: LD_INT 11
42614: PUSH
42615: LD_INT 12
42617: PUSH
42618: LD_INT 13
42620: PUSH
42621: LD_INT 16
42623: PUSH
42624: LD_INT 17
42626: PUSH
42627: LD_INT 18
42629: PUSH
42630: LD_INT 19
42632: PUSH
42633: LD_INT 20
42635: PUSH
42636: LD_INT 21
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: IN
42654: NOT
42655: OR
42656: PUSH
42657: LD_VAR 0 8
42661: PUSH
42662: LD_INT 5
42664: ARRAY
42665: NOT
42666: OR
42667: PUSH
42668: LD_VAR 0 8
42672: PUSH
42673: LD_INT 6
42675: ARRAY
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: LD_INT 7
42685: PUSH
42686: LD_INT 9
42688: PUSH
42689: LD_INT 10
42691: PUSH
42692: LD_INT 11
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: IN
42703: NOT
42704: OR
42705: IFFALSE 42711
// exit ;
42707: POP
42708: POP
42709: GO 42809
// end ;
42711: GO 42382
42713: POP
42714: POP
// side := GetSide ( depot ) ;
42715: LD_ADDR_VAR 0 9
42719: PUSH
42720: LD_VAR 0 1
42724: PPUSH
42725: CALL_OW 255
42729: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42730: LD_VAR 0 9
42734: PPUSH
42735: LD_VAR 0 3
42739: PPUSH
42740: LD_VAR 0 4
42744: PPUSH
42745: LD_INT 20
42747: PPUSH
42748: CALL 35130 0 4
42752: PUSH
42753: LD_INT 4
42755: ARRAY
42756: IFFALSE 42760
// exit ;
42758: GO 42809
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42760: LD_VAR 0 2
42764: PUSH
42765: LD_INT 29
42767: PUSH
42768: LD_INT 30
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: IN
42775: PUSH
42776: LD_VAR 0 3
42780: PPUSH
42781: LD_VAR 0 4
42785: PPUSH
42786: LD_VAR 0 9
42790: PPUSH
42791: CALL_OW 440
42795: NOT
42796: AND
42797: IFFALSE 42801
// exit ;
42799: GO 42809
// result := true ;
42801: LD_ADDR_VAR 0 6
42805: PUSH
42806: LD_INT 1
42808: ST_TO_ADDR
// end ;
42809: LD_VAR 0 6
42813: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42814: LD_INT 0
42816: PPUSH
42817: PPUSH
42818: PPUSH
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
42830: PPUSH
42831: PPUSH
42832: PPUSH
42833: PPUSH
42834: PPUSH
42835: PPUSH
42836: PPUSH
42837: PPUSH
42838: PPUSH
42839: PPUSH
42840: PPUSH
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
42850: PPUSH
42851: PPUSH
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
42860: PPUSH
42861: PPUSH
42862: PPUSH
42863: PPUSH
42864: PPUSH
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
// result = [ ] ;
42874: LD_ADDR_VAR 0 7
42878: PUSH
42879: EMPTY
42880: ST_TO_ADDR
// temp_list = [ ] ;
42881: LD_ADDR_VAR 0 9
42885: PUSH
42886: EMPTY
42887: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42888: LD_VAR 0 4
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: LD_INT 3
42904: PUSH
42905: LD_INT 4
42907: PUSH
42908: LD_INT 5
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: IN
42919: NOT
42920: PUSH
42921: LD_VAR 0 1
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: IN
42936: PUSH
42937: LD_VAR 0 5
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: LD_INT 3
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: IN
42956: NOT
42957: AND
42958: OR
42959: IFFALSE 42963
// exit ;
42961: GO 61354
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42963: LD_VAR 0 1
42967: PUSH
42968: LD_INT 6
42970: PUSH
42971: LD_INT 7
42973: PUSH
42974: LD_INT 8
42976: PUSH
42977: LD_INT 13
42979: PUSH
42980: LD_INT 12
42982: PUSH
42983: LD_INT 15
42985: PUSH
42986: LD_INT 11
42988: PUSH
42989: LD_INT 14
42991: PUSH
42992: LD_INT 10
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: IN
43006: IFFALSE 43016
// btype = b_lab ;
43008: LD_ADDR_VAR 0 1
43012: PUSH
43013: LD_INT 6
43015: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43016: LD_VAR 0 6
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: LIST
43034: IN
43035: NOT
43036: PUSH
43037: LD_VAR 0 1
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: LD_INT 3
43053: PUSH
43054: LD_INT 6
43056: PUSH
43057: LD_INT 36
43059: PUSH
43060: LD_INT 4
43062: PUSH
43063: LD_INT 5
43065: PUSH
43066: LD_INT 31
43068: PUSH
43069: LD_INT 32
43071: PUSH
43072: LD_INT 33
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: IN
43088: NOT
43089: PUSH
43090: LD_VAR 0 6
43094: PUSH
43095: LD_INT 1
43097: EQUAL
43098: AND
43099: OR
43100: PUSH
43101: LD_VAR 0 1
43105: PUSH
43106: LD_INT 2
43108: PUSH
43109: LD_INT 3
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: IN
43116: NOT
43117: PUSH
43118: LD_VAR 0 6
43122: PUSH
43123: LD_INT 2
43125: EQUAL
43126: AND
43127: OR
43128: IFFALSE 43138
// mode = 0 ;
43130: LD_ADDR_VAR 0 6
43134: PUSH
43135: LD_INT 0
43137: ST_TO_ADDR
// case mode of 0 :
43138: LD_VAR 0 6
43142: PUSH
43143: LD_INT 0
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43151
43149: GO 54604
43151: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43152: LD_ADDR_VAR 0 11
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 2
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 2
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: LD_INT 3
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43345: LD_ADDR_VAR 0 12
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 3
43502: NEG
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 3
43513: NEG
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43541: LD_ADDR_VAR 0 13
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: LD_INT 3
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 3
43700: NEG
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 3
43712: NEG
43713: PUSH
43714: LD_INT 3
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43740: LD_ADDR_VAR 0 14
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: LD_INT 2
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 3
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 3
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43936: LD_ADDR_VAR 0 15
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44129: LD_ADDR_VAR 0 16
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 2
44264: NEG
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 3
44286: PUSH
44287: LD_INT 3
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: LD_INT 3
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44322: LD_ADDR_VAR 0 17
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44552: LD_ADDR_VAR 0 18
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 2
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 2
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44782: LD_ADDR_VAR 0 19
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45012: LD_ADDR_VAR 0 20
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 2
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 2
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: NEG
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45242: LD_ADDR_VAR 0 21
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45472: LD_ADDR_VAR 0 22
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45702: LD_ADDR_VAR 0 23
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 3
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 3
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45982: LD_ADDR_VAR 0 24
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 3
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 3
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46258: LD_ADDR_VAR 0 25
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 2
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: LD_INT 3
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 3
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46532: LD_ADDR_VAR 0 26
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: LD_INT 3
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: LD_INT 3
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46808: LD_ADDR_VAR 0 27
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 3
47041: NEG
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 3
47053: NEG
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47088: LD_ADDR_VAR 0 28
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: LD_INT 3
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 3
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 3
47323: NEG
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 3
47335: NEG
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47370: LD_ADDR_VAR 0 29
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: LD_INT 3
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47649: LD_ADDR_VAR 0 30
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 3
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 3
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 3
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 3
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47927: LD_ADDR_VAR 0 31
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: LD_INT 3
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 3
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48205: LD_ADDR_VAR 0 32
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 3
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 3
48448: NEG
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48483: LD_ADDR_VAR 0 33
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: LD_INT 3
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 3
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48762: LD_ADDR_VAR 0 34
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 2
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 2
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 3
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 3
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: LD_INT 3
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 3
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49042: LD_ADDR_VAR 0 35
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49154: LD_ADDR_VAR 0 36
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49266: LD_ADDR_VAR 0 37
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49378: LD_ADDR_VAR 0 38
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49490: LD_ADDR_VAR 0 39
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49602: LD_ADDR_VAR 0 40
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49714: LD_ADDR_VAR 0 41
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 3
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 3
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 3
49957: PUSH
49958: LD_INT 3
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 3
49988: NEG
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 3
49999: NEG
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: NEG
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: LD_INT 3
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50064: LD_ADDR_VAR 0 42
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 3
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 3
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 3
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 3
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: LD_INT 3
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 3
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 3
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 3
50361: NEG
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 3
50373: NEG
50374: PUSH
50375: LD_INT 3
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50414: LD_ADDR_VAR 0 43
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 2
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 3
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 3
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 3
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 3
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50762: LD_ADDR_VAR 0 44
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 2
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 3
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 3
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: LD_INT 3
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: LD_INT 3
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: NEG
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 3
51047: NEG
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: LD_INT 2
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 3
51071: NEG
51072: PUSH
51073: LD_INT 3
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51112: LD_ADDR_VAR 0 45
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: LD_INT 2
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 3
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: LD_INT 3
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 3
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 3
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 3
51358: PUSH
51359: LD_INT 3
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 3
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 3
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 3
51409: NEG
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51462: LD_ADDR_VAR 0 46
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: LD_INT 3
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: LD_INT 3
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: LD_INT 2
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 3
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 3
51758: NEG
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 3
51769: NEG
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51810: LD_ADDR_VAR 0 47
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51961: LD_ADDR_VAR 0 48
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52108: LD_ADDR_VAR 0 49
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52252: LD_ADDR_VAR 0 50
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52396: LD_ADDR_VAR 0 51
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: NEG
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52543: LD_ADDR_VAR 0 52
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: NEG
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52694: LD_ADDR_VAR 0 53
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52924: LD_ADDR_VAR 0 54
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 2
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: LD_INT 2
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53154: LD_ADDR_VAR 0 55
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53384: LD_ADDR_VAR 0 56
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 2
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 2
53571: NEG
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53614: LD_ADDR_VAR 0 57
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53844: LD_ADDR_VAR 0 58
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54074: LD_ADDR_VAR 0 59
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54162: LD_ADDR_VAR 0 60
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54250: LD_ADDR_VAR 0 61
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54338: LD_ADDR_VAR 0 62
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54426: LD_ADDR_VAR 0 63
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54514: LD_ADDR_VAR 0 64
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: ST_TO_ADDR
// end ; 1 :
54602: GO 60499
54604: LD_INT 1
54606: DOUBLE
54607: EQUAL
54608: IFTRUE 54612
54610: GO 57235
54612: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54613: LD_ADDR_VAR 0 11
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 3
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 3
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54657: LD_ADDR_VAR 0 12
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 3
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54698: LD_ADDR_VAR 0 13
54702: PUSH
54703: LD_INT 3
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 3
54715: PUSH
54716: LD_INT 3
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 3
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54738: LD_ADDR_VAR 0 14
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 3
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 3
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54779: LD_ADDR_VAR 0 15
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 3
54797: NEG
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 3
54808: NEG
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: LIST
54822: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54823: LD_ADDR_VAR 0 16
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: LD_INT 3
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 3
54842: NEG
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 3
54854: NEG
54855: PUSH
54856: LD_INT 3
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: LIST
54868: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54869: LD_ADDR_VAR 0 17
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 3
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: LIST
54912: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54913: LD_ADDR_VAR 0 18
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: LIST
54953: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54954: LD_ADDR_VAR 0 19
54958: PUSH
54959: LD_INT 3
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 3
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 3
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: LIST
54993: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54994: LD_ADDR_VAR 0 20
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 3
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 3
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55035: LD_ADDR_VAR 0 21
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 3
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: LIST
55078: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55079: LD_ADDR_VAR 0 22
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: LD_INT 3
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: LIST
55124: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55125: LD_ADDR_VAR 0 23
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 4
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: LIST
55168: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55169: LD_ADDR_VAR 0 24
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 3
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 4
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: LIST
55209: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55210: LD_ADDR_VAR 0 25
55214: PUSH
55215: LD_INT 3
55217: PUSH
55218: LD_INT 3
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 4
55227: PUSH
55228: LD_INT 3
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 3
55237: PUSH
55238: LD_INT 4
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: LIST
55249: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55250: LD_ADDR_VAR 0 26
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 3
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 4
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55291: LD_ADDR_VAR 0 27
55295: PUSH
55296: LD_INT 3
55298: NEG
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 3
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 4
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55335: LD_ADDR_VAR 0 28
55339: PUSH
55340: LD_INT 3
55342: NEG
55343: PUSH
55344: LD_INT 3
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 3
55354: NEG
55355: PUSH
55356: LD_INT 4
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 4
55366: NEG
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: LIST
55380: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55381: LD_ADDR_VAR 0 29
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 3
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 4
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 4
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 5
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 5
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 4
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 6
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 6
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 5
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55536: LD_ADDR_VAR 0 30
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 3
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 3
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 3
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 4
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 4
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 4
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 5
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 5
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 5
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 6
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 6
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55679: LD_ADDR_VAR 0 31
55683: PUSH
55684: LD_INT 3
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 3
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: LD_INT 3
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 4
55716: PUSH
55717: LD_INT 3
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 4
55726: PUSH
55727: LD_INT 4
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: LD_INT 4
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 5
55746: PUSH
55747: LD_INT 4
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 5
55756: PUSH
55757: LD_INT 5
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 4
55766: PUSH
55767: LD_INT 5
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 6
55776: PUSH
55777: LD_INT 5
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 6
55786: PUSH
55787: LD_INT 6
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 5
55796: PUSH
55797: LD_INT 6
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55818: LD_ADDR_VAR 0 32
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 4
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 4
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 3
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 5
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 5
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 4
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: LD_INT 6
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 6
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 5
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55961: LD_ADDR_VAR 0 33
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 3
55979: NEG
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 3
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 4
56013: NEG
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 4
56024: NEG
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 4
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 5
56047: NEG
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 5
56058: NEG
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 5
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 6
56081: NEG
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 6
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56116: LD_ADDR_VAR 0 34
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 3
56135: NEG
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: LD_INT 3
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 3
56159: NEG
56160: PUSH
56161: LD_INT 4
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 4
56171: NEG
56172: PUSH
56173: LD_INT 3
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 4
56183: NEG
56184: PUSH
56185: LD_INT 4
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 4
56195: NEG
56196: PUSH
56197: LD_INT 5
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 5
56207: NEG
56208: PUSH
56209: LD_INT 4
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 5
56219: NEG
56220: PUSH
56221: LD_INT 5
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 5
56231: NEG
56232: PUSH
56233: LD_INT 6
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 6
56243: NEG
56244: PUSH
56245: LD_INT 5
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 6
56255: NEG
56256: PUSH
56257: LD_INT 6
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56279: LD_ADDR_VAR 0 41
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 3
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: LIST
56322: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56323: LD_ADDR_VAR 0 42
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 3
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56364: LD_ADDR_VAR 0 43
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: LD_INT 3
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: LIST
56403: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56404: LD_ADDR_VAR 0 44
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: LIST
56444: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56445: LD_ADDR_VAR 0 45
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 3
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: LIST
56488: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56489: LD_ADDR_VAR 0 46
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: LD_INT 3
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 3
56520: NEG
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: LIST
56534: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56535: LD_ADDR_VAR 0 47
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: LD_INT 3
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56568: LD_ADDR_VAR 0 48
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56599: LD_ADDR_VAR 0 49
56603: PUSH
56604: LD_INT 3
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56628: LD_ADDR_VAR 0 50
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 3
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56657: LD_ADDR_VAR 0 51
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56688: LD_ADDR_VAR 0 52
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 3
56707: NEG
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56721: LD_ADDR_VAR 0 53
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: LD_INT 3
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: LIST
56764: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56765: LD_ADDR_VAR 0 54
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 3
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: LIST
56805: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56806: LD_ADDR_VAR 0 55
56810: PUSH
56811: LD_INT 3
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: LD_INT 3
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: LIST
56845: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56846: LD_ADDR_VAR 0 56
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 3
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: LIST
56886: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56887: LD_ADDR_VAR 0 57
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 3
56905: NEG
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: LIST
56930: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56931: LD_ADDR_VAR 0 58
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: LD_INT 3
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 3
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 3
56962: NEG
56963: PUSH
56964: LD_INT 3
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: LIST
56976: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56977: LD_ADDR_VAR 0 59
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: LD_INT 2
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: LIST
57020: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57021: LD_ADDR_VAR 0 60
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57062: LD_ADDR_VAR 0 61
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: LIST
57101: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57102: LD_ADDR_VAR 0 62
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57143: LD_ADDR_VAR 0 63
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57187: LD_ADDR_VAR 0 64
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: ST_TO_ADDR
// end ; 2 :
57233: GO 60499
57235: LD_INT 2
57237: DOUBLE
57238: EQUAL
57239: IFTRUE 57243
57241: GO 60498
57243: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57244: LD_ADDR_VAR 0 29
57248: PUSH
57249: LD_INT 4
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 4
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 5
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 5
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 4
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 3
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 5
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 4
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 4
57374: PUSH
57375: LD_INT 4
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: LD_INT 4
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 3
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 4
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: LD_INT 4
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 4
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 3
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: LD_INT 4
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 5
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 5
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: LD_INT 4
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 5
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 3
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 3
57538: NEG
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 2
57550: NEG
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: NEG
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 3
57572: NEG
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 4
57583: NEG
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 4
57594: NEG
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 4
57606: NEG
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 4
57629: NEG
57630: PUSH
57631: LD_INT 4
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 4
57641: NEG
57642: PUSH
57643: LD_INT 5
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 3
57653: NEG
57654: PUSH
57655: LD_INT 4
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: LD_INT 3
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 4
57677: NEG
57678: PUSH
57679: LD_INT 3
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 5
57689: NEG
57690: PUSH
57691: LD_INT 4
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 5
57701: NEG
57702: PUSH
57703: LD_INT 5
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 3
57713: NEG
57714: PUSH
57715: LD_INT 5
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 5
57725: NEG
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57782: LD_ADDR_VAR 0 30
57786: PUSH
57787: LD_INT 4
57789: PUSH
57790: LD_INT 4
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 4
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 5
57809: PUSH
57810: LD_INT 4
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 5
57819: PUSH
57820: LD_INT 5
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 4
57829: PUSH
57830: LD_INT 5
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: LD_INT 4
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: LD_INT 3
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 5
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 3
57869: PUSH
57870: LD_INT 5
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 4
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: LD_INT 4
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 2
57961: NEG
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 4
57972: NEG
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 4
57983: NEG
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 3
57995: NEG
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 3
58006: NEG
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 4
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 5
58028: NEG
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 5
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 5
58051: NEG
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 3
58074: NEG
58075: PUSH
58076: LD_INT 3
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: LD_INT 4
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: LD_INT 3
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: NEG
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 3
58122: NEG
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 4
58134: NEG
58135: PUSH
58136: LD_INT 3
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 4
58146: NEG
58147: PUSH
58148: LD_INT 4
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: LD_INT 4
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 4
58170: NEG
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: LD_INT 4
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: LD_INT 5
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: LD_INT 4
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 3
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 3
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 4
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 5
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: LD_INT 3
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: LD_INT 5
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58329: LD_ADDR_VAR 0 31
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 4
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: LD_INT 4
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 5
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 5
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: LD_INT 4
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 3
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: LD_INT 5
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 3
58429: NEG
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 3
58474: NEG
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 4
58485: NEG
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 4
58496: NEG
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 4
58508: NEG
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 4
58531: NEG
58532: PUSH
58533: LD_INT 4
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 4
58543: NEG
58544: PUSH
58545: LD_INT 5
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 3
58555: NEG
58556: PUSH
58557: LD_INT 4
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 3
58567: NEG
58568: PUSH
58569: LD_INT 3
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 4
58579: NEG
58580: PUSH
58581: LD_INT 3
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 5
58591: NEG
58592: PUSH
58593: LD_INT 4
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 5
58603: NEG
58604: PUSH
58605: LD_INT 5
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 3
58615: NEG
58616: PUSH
58617: LD_INT 5
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 5
58627: NEG
58628: PUSH
58629: LD_INT 3
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: LD_INT 4
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: LD_INT 4
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: LD_INT 4
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 4
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 5
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 5
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 4
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 3
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 3
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 5
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58879: LD_ADDR_VAR 0 32
58883: PUSH
58884: LD_INT 4
58886: NEG
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 4
58897: NEG
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 3
58920: NEG
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 4
58931: NEG
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 5
58942: NEG
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 5
58953: NEG
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 5
58965: NEG
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 3
58988: NEG
58989: PUSH
58990: LD_INT 3
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 3
59000: NEG
59001: PUSH
59002: LD_INT 4
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 3
59036: NEG
59037: PUSH
59038: LD_INT 2
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 4
59048: NEG
59049: PUSH
59050: LD_INT 3
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 4
59060: NEG
59061: PUSH
59062: LD_INT 4
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: LD_INT 4
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 4
59084: NEG
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: LD_INT 4
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 5
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 4
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 3
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 3
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 4
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 5
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: LD_INT 3
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 2
59186: NEG
59187: PUSH
59188: LD_INT 5
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 3
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 3
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 4
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 4
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 4
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 4
59291: PUSH
59292: LD_INT 4
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 4
59301: PUSH
59302: LD_INT 3
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 5
59311: PUSH
59312: LD_INT 4
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 5
59321: PUSH
59322: LD_INT 5
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 4
59331: PUSH
59332: LD_INT 5
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 4
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: LD_INT 3
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 5
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 3
59371: PUSH
59372: LD_INT 5
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59426: LD_ADDR_VAR 0 33
59430: PUSH
59431: LD_INT 4
59433: NEG
59434: PUSH
59435: LD_INT 4
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 4
59445: NEG
59446: PUSH
59447: LD_INT 5
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 3
59457: NEG
59458: PUSH
59459: LD_INT 4
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 3
59469: NEG
59470: PUSH
59471: LD_INT 3
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 4
59481: NEG
59482: PUSH
59483: LD_INT 3
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 5
59493: NEG
59494: PUSH
59495: LD_INT 4
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 5
59505: NEG
59506: PUSH
59507: LD_INT 5
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 3
59517: NEG
59518: PUSH
59519: LD_INT 5
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 5
59529: NEG
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: LD_INT 3
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 4
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 3
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 4
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: LD_INT 4
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 4
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 4
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 5
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 5
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 4
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 3
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 3
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 5
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 3
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 3
59746: PUSH
59747: LD_INT 2
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 4
59756: PUSH
59757: LD_INT 3
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 4
59766: PUSH
59767: LD_INT 4
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: LD_INT 4
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 4
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: LD_INT 4
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 4
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: LD_INT 4
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: LD_INT 5
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: LD_INT 5
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: LD_INT 4
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: LD_INT 3
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: LD_INT 5
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 2
59908: NEG
59909: PUSH
59910: LD_INT 3
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59964: LD_ADDR_VAR 0 34
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 4
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: LD_INT 5
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: LD_INT 4
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: LD_INT 3
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: LD_INT 4
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: LD_INT 5
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: LD_INT 3
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: LD_INT 5
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 3
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 3
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 4
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 4
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 4
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 4
60166: PUSH
60167: LD_INT 4
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 4
60176: PUSH
60177: LD_INT 3
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 5
60186: PUSH
60187: LD_INT 4
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 5
60196: PUSH
60197: LD_INT 5
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 4
60206: PUSH
60207: LD_INT 5
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: LD_INT 4
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 5
60236: PUSH
60237: LD_INT 3
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 3
60246: PUSH
60247: LD_INT 5
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: LD_INT 3
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: LD_INT 4
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 4
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: LD_INT 3
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: LD_INT 4
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 4
60349: NEG
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 4
60360: NEG
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: NEG
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: NEG
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 4
60394: NEG
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 5
60405: NEG
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 5
60416: NEG
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 5
60428: NEG
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 3
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: ST_TO_ADDR
// end ; end ;
60496: GO 60499
60498: POP
// case btype of b_depot , b_warehouse :
60499: LD_VAR 0 1
60503: PUSH
60504: LD_INT 0
60506: DOUBLE
60507: EQUAL
60508: IFTRUE 60518
60510: LD_INT 1
60512: DOUBLE
60513: EQUAL
60514: IFTRUE 60518
60516: GO 60719
60518: POP
// case nation of nation_american :
60519: LD_VAR 0 5
60523: PUSH
60524: LD_INT 1
60526: DOUBLE
60527: EQUAL
60528: IFTRUE 60532
60530: GO 60588
60532: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60533: LD_ADDR_VAR 0 9
60537: PUSH
60538: LD_VAR 0 11
60542: PUSH
60543: LD_VAR 0 12
60547: PUSH
60548: LD_VAR 0 13
60552: PUSH
60553: LD_VAR 0 14
60557: PUSH
60558: LD_VAR 0 15
60562: PUSH
60563: LD_VAR 0 16
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: PUSH
60576: LD_VAR 0 4
60580: PUSH
60581: LD_INT 1
60583: PLUS
60584: ARRAY
60585: ST_TO_ADDR
60586: GO 60717
60588: LD_INT 2
60590: DOUBLE
60591: EQUAL
60592: IFTRUE 60596
60594: GO 60652
60596: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60597: LD_ADDR_VAR 0 9
60601: PUSH
60602: LD_VAR 0 17
60606: PUSH
60607: LD_VAR 0 18
60611: PUSH
60612: LD_VAR 0 19
60616: PUSH
60617: LD_VAR 0 20
60621: PUSH
60622: LD_VAR 0 21
60626: PUSH
60627: LD_VAR 0 22
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: PUSH
60640: LD_VAR 0 4
60644: PUSH
60645: LD_INT 1
60647: PLUS
60648: ARRAY
60649: ST_TO_ADDR
60650: GO 60717
60652: LD_INT 3
60654: DOUBLE
60655: EQUAL
60656: IFTRUE 60660
60658: GO 60716
60660: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60661: LD_ADDR_VAR 0 9
60665: PUSH
60666: LD_VAR 0 23
60670: PUSH
60671: LD_VAR 0 24
60675: PUSH
60676: LD_VAR 0 25
60680: PUSH
60681: LD_VAR 0 26
60685: PUSH
60686: LD_VAR 0 27
60690: PUSH
60691: LD_VAR 0 28
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: PUSH
60704: LD_VAR 0 4
60708: PUSH
60709: LD_INT 1
60711: PLUS
60712: ARRAY
60713: ST_TO_ADDR
60714: GO 60717
60716: POP
60717: GO 61272
60719: LD_INT 2
60721: DOUBLE
60722: EQUAL
60723: IFTRUE 60733
60725: LD_INT 3
60727: DOUBLE
60728: EQUAL
60729: IFTRUE 60733
60731: GO 60789
60733: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60734: LD_ADDR_VAR 0 9
60738: PUSH
60739: LD_VAR 0 29
60743: PUSH
60744: LD_VAR 0 30
60748: PUSH
60749: LD_VAR 0 31
60753: PUSH
60754: LD_VAR 0 32
60758: PUSH
60759: LD_VAR 0 33
60763: PUSH
60764: LD_VAR 0 34
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: PUSH
60777: LD_VAR 0 4
60781: PUSH
60782: LD_INT 1
60784: PLUS
60785: ARRAY
60786: ST_TO_ADDR
60787: GO 61272
60789: LD_INT 16
60791: DOUBLE
60792: EQUAL
60793: IFTRUE 60851
60795: LD_INT 17
60797: DOUBLE
60798: EQUAL
60799: IFTRUE 60851
60801: LD_INT 18
60803: DOUBLE
60804: EQUAL
60805: IFTRUE 60851
60807: LD_INT 19
60809: DOUBLE
60810: EQUAL
60811: IFTRUE 60851
60813: LD_INT 22
60815: DOUBLE
60816: EQUAL
60817: IFTRUE 60851
60819: LD_INT 20
60821: DOUBLE
60822: EQUAL
60823: IFTRUE 60851
60825: LD_INT 21
60827: DOUBLE
60828: EQUAL
60829: IFTRUE 60851
60831: LD_INT 23
60833: DOUBLE
60834: EQUAL
60835: IFTRUE 60851
60837: LD_INT 24
60839: DOUBLE
60840: EQUAL
60841: IFTRUE 60851
60843: LD_INT 25
60845: DOUBLE
60846: EQUAL
60847: IFTRUE 60851
60849: GO 60907
60851: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60852: LD_ADDR_VAR 0 9
60856: PUSH
60857: LD_VAR 0 35
60861: PUSH
60862: LD_VAR 0 36
60866: PUSH
60867: LD_VAR 0 37
60871: PUSH
60872: LD_VAR 0 38
60876: PUSH
60877: LD_VAR 0 39
60881: PUSH
60882: LD_VAR 0 40
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: PUSH
60895: LD_VAR 0 4
60899: PUSH
60900: LD_INT 1
60902: PLUS
60903: ARRAY
60904: ST_TO_ADDR
60905: GO 61272
60907: LD_INT 6
60909: DOUBLE
60910: EQUAL
60911: IFTRUE 60963
60913: LD_INT 7
60915: DOUBLE
60916: EQUAL
60917: IFTRUE 60963
60919: LD_INT 8
60921: DOUBLE
60922: EQUAL
60923: IFTRUE 60963
60925: LD_INT 13
60927: DOUBLE
60928: EQUAL
60929: IFTRUE 60963
60931: LD_INT 12
60933: DOUBLE
60934: EQUAL
60935: IFTRUE 60963
60937: LD_INT 15
60939: DOUBLE
60940: EQUAL
60941: IFTRUE 60963
60943: LD_INT 11
60945: DOUBLE
60946: EQUAL
60947: IFTRUE 60963
60949: LD_INT 14
60951: DOUBLE
60952: EQUAL
60953: IFTRUE 60963
60955: LD_INT 10
60957: DOUBLE
60958: EQUAL
60959: IFTRUE 60963
60961: GO 61019
60963: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60964: LD_ADDR_VAR 0 9
60968: PUSH
60969: LD_VAR 0 41
60973: PUSH
60974: LD_VAR 0 42
60978: PUSH
60979: LD_VAR 0 43
60983: PUSH
60984: LD_VAR 0 44
60988: PUSH
60989: LD_VAR 0 45
60993: PUSH
60994: LD_VAR 0 46
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: PUSH
61007: LD_VAR 0 4
61011: PUSH
61012: LD_INT 1
61014: PLUS
61015: ARRAY
61016: ST_TO_ADDR
61017: GO 61272
61019: LD_INT 36
61021: DOUBLE
61022: EQUAL
61023: IFTRUE 61027
61025: GO 61083
61027: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61028: LD_ADDR_VAR 0 9
61032: PUSH
61033: LD_VAR 0 47
61037: PUSH
61038: LD_VAR 0 48
61042: PUSH
61043: LD_VAR 0 49
61047: PUSH
61048: LD_VAR 0 50
61052: PUSH
61053: LD_VAR 0 51
61057: PUSH
61058: LD_VAR 0 52
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: PUSH
61071: LD_VAR 0 4
61075: PUSH
61076: LD_INT 1
61078: PLUS
61079: ARRAY
61080: ST_TO_ADDR
61081: GO 61272
61083: LD_INT 4
61085: DOUBLE
61086: EQUAL
61087: IFTRUE 61109
61089: LD_INT 5
61091: DOUBLE
61092: EQUAL
61093: IFTRUE 61109
61095: LD_INT 34
61097: DOUBLE
61098: EQUAL
61099: IFTRUE 61109
61101: LD_INT 37
61103: DOUBLE
61104: EQUAL
61105: IFTRUE 61109
61107: GO 61165
61109: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61110: LD_ADDR_VAR 0 9
61114: PUSH
61115: LD_VAR 0 53
61119: PUSH
61120: LD_VAR 0 54
61124: PUSH
61125: LD_VAR 0 55
61129: PUSH
61130: LD_VAR 0 56
61134: PUSH
61135: LD_VAR 0 57
61139: PUSH
61140: LD_VAR 0 58
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: PUSH
61153: LD_VAR 0 4
61157: PUSH
61158: LD_INT 1
61160: PLUS
61161: ARRAY
61162: ST_TO_ADDR
61163: GO 61272
61165: LD_INT 31
61167: DOUBLE
61168: EQUAL
61169: IFTRUE 61215
61171: LD_INT 32
61173: DOUBLE
61174: EQUAL
61175: IFTRUE 61215
61177: LD_INT 33
61179: DOUBLE
61180: EQUAL
61181: IFTRUE 61215
61183: LD_INT 27
61185: DOUBLE
61186: EQUAL
61187: IFTRUE 61215
61189: LD_INT 26
61191: DOUBLE
61192: EQUAL
61193: IFTRUE 61215
61195: LD_INT 28
61197: DOUBLE
61198: EQUAL
61199: IFTRUE 61215
61201: LD_INT 29
61203: DOUBLE
61204: EQUAL
61205: IFTRUE 61215
61207: LD_INT 30
61209: DOUBLE
61210: EQUAL
61211: IFTRUE 61215
61213: GO 61271
61215: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61216: LD_ADDR_VAR 0 9
61220: PUSH
61221: LD_VAR 0 59
61225: PUSH
61226: LD_VAR 0 60
61230: PUSH
61231: LD_VAR 0 61
61235: PUSH
61236: LD_VAR 0 62
61240: PUSH
61241: LD_VAR 0 63
61245: PUSH
61246: LD_VAR 0 64
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: PUSH
61259: LD_VAR 0 4
61263: PUSH
61264: LD_INT 1
61266: PLUS
61267: ARRAY
61268: ST_TO_ADDR
61269: GO 61272
61271: POP
// temp_list2 = [ ] ;
61272: LD_ADDR_VAR 0 10
61276: PUSH
61277: EMPTY
61278: ST_TO_ADDR
// for i in temp_list do
61279: LD_ADDR_VAR 0 8
61283: PUSH
61284: LD_VAR 0 9
61288: PUSH
61289: FOR_IN
61290: IFFALSE 61342
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61292: LD_ADDR_VAR 0 10
61296: PUSH
61297: LD_VAR 0 10
61301: PUSH
61302: LD_VAR 0 8
61306: PUSH
61307: LD_INT 1
61309: ARRAY
61310: PUSH
61311: LD_VAR 0 2
61315: PLUS
61316: PUSH
61317: LD_VAR 0 8
61321: PUSH
61322: LD_INT 2
61324: ARRAY
61325: PUSH
61326: LD_VAR 0 3
61330: PLUS
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: EMPTY
61337: LIST
61338: ADD
61339: ST_TO_ADDR
61340: GO 61289
61342: POP
61343: POP
// result = temp_list2 ;
61344: LD_ADDR_VAR 0 7
61348: PUSH
61349: LD_VAR 0 10
61353: ST_TO_ADDR
// end ;
61354: LD_VAR 0 7
61358: RET
// export function EnemyInRange ( unit , dist ) ; begin
61359: LD_INT 0
61361: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61362: LD_ADDR_VAR 0 3
61366: PUSH
61367: LD_VAR 0 1
61371: PPUSH
61372: CALL_OW 255
61376: PPUSH
61377: LD_VAR 0 1
61381: PPUSH
61382: CALL_OW 250
61386: PPUSH
61387: LD_VAR 0 1
61391: PPUSH
61392: CALL_OW 251
61396: PPUSH
61397: LD_VAR 0 2
61401: PPUSH
61402: CALL 35130 0 4
61406: PUSH
61407: LD_INT 4
61409: ARRAY
61410: ST_TO_ADDR
// end ;
61411: LD_VAR 0 3
61415: RET
// export function PlayerSeeMe ( unit ) ; begin
61416: LD_INT 0
61418: PPUSH
// result := See ( your_side , unit ) ;
61419: LD_ADDR_VAR 0 2
61423: PUSH
61424: LD_OWVAR 2
61428: PPUSH
61429: LD_VAR 0 1
61433: PPUSH
61434: CALL_OW 292
61438: ST_TO_ADDR
// end ;
61439: LD_VAR 0 2
61443: RET
// export function ReverseDir ( unit ) ; begin
61444: LD_INT 0
61446: PPUSH
// if not unit then
61447: LD_VAR 0 1
61451: NOT
61452: IFFALSE 61456
// exit ;
61454: GO 61479
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61456: LD_ADDR_VAR 0 2
61460: PUSH
61461: LD_VAR 0 1
61465: PPUSH
61466: CALL_OW 254
61470: PUSH
61471: LD_INT 3
61473: PLUS
61474: PUSH
61475: LD_INT 6
61477: MOD
61478: ST_TO_ADDR
// end ;
61479: LD_VAR 0 2
61483: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61484: LD_INT 0
61486: PPUSH
61487: PPUSH
61488: PPUSH
61489: PPUSH
61490: PPUSH
// if not hexes then
61491: LD_VAR 0 2
61495: NOT
61496: IFFALSE 61500
// exit ;
61498: GO 61648
// dist := 9999 ;
61500: LD_ADDR_VAR 0 5
61504: PUSH
61505: LD_INT 9999
61507: ST_TO_ADDR
// for i = 1 to hexes do
61508: LD_ADDR_VAR 0 4
61512: PUSH
61513: DOUBLE
61514: LD_INT 1
61516: DEC
61517: ST_TO_ADDR
61518: LD_VAR 0 2
61522: PUSH
61523: FOR_TO
61524: IFFALSE 61636
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61526: LD_VAR 0 1
61530: PPUSH
61531: LD_VAR 0 2
61535: PUSH
61536: LD_VAR 0 4
61540: ARRAY
61541: PUSH
61542: LD_INT 1
61544: ARRAY
61545: PPUSH
61546: LD_VAR 0 2
61550: PUSH
61551: LD_VAR 0 4
61555: ARRAY
61556: PUSH
61557: LD_INT 2
61559: ARRAY
61560: PPUSH
61561: CALL_OW 297
61565: PUSH
61566: LD_VAR 0 5
61570: LESS
61571: IFFALSE 61634
// begin hex := hexes [ i ] ;
61573: LD_ADDR_VAR 0 7
61577: PUSH
61578: LD_VAR 0 2
61582: PUSH
61583: LD_VAR 0 4
61587: ARRAY
61588: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61589: LD_ADDR_VAR 0 5
61593: PUSH
61594: LD_VAR 0 1
61598: PPUSH
61599: LD_VAR 0 2
61603: PUSH
61604: LD_VAR 0 4
61608: ARRAY
61609: PUSH
61610: LD_INT 1
61612: ARRAY
61613: PPUSH
61614: LD_VAR 0 2
61618: PUSH
61619: LD_VAR 0 4
61623: ARRAY
61624: PUSH
61625: LD_INT 2
61627: ARRAY
61628: PPUSH
61629: CALL_OW 297
61633: ST_TO_ADDR
// end ; end ;
61634: GO 61523
61636: POP
61637: POP
// result := hex ;
61638: LD_ADDR_VAR 0 3
61642: PUSH
61643: LD_VAR 0 7
61647: ST_TO_ADDR
// end ;
61648: LD_VAR 0 3
61652: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61653: LD_INT 0
61655: PPUSH
61656: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61657: LD_VAR 0 1
61661: NOT
61662: PUSH
61663: LD_VAR 0 1
61667: PUSH
61668: LD_INT 21
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 23
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PPUSH
61692: CALL_OW 69
61696: IN
61697: NOT
61698: OR
61699: IFFALSE 61703
// exit ;
61701: GO 61750
// for i = 1 to 3 do
61703: LD_ADDR_VAR 0 3
61707: PUSH
61708: DOUBLE
61709: LD_INT 1
61711: DEC
61712: ST_TO_ADDR
61713: LD_INT 3
61715: PUSH
61716: FOR_TO
61717: IFFALSE 61748
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61719: LD_VAR 0 1
61723: PPUSH
61724: CALL_OW 250
61728: PPUSH
61729: LD_VAR 0 1
61733: PPUSH
61734: CALL_OW 251
61738: PPUSH
61739: LD_INT 1
61741: PPUSH
61742: CALL_OW 453
61746: GO 61716
61748: POP
61749: POP
// end ;
61750: LD_VAR 0 2
61754: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61755: LD_INT 0
61757: PPUSH
61758: PPUSH
61759: PPUSH
61760: PPUSH
61761: PPUSH
61762: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61763: LD_VAR 0 1
61767: NOT
61768: PUSH
61769: LD_VAR 0 2
61773: NOT
61774: OR
61775: PUSH
61776: LD_VAR 0 1
61780: PPUSH
61781: CALL_OW 314
61785: OR
61786: IFFALSE 61790
// exit ;
61788: GO 62231
// x := GetX ( enemy_unit ) ;
61790: LD_ADDR_VAR 0 7
61794: PUSH
61795: LD_VAR 0 2
61799: PPUSH
61800: CALL_OW 250
61804: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61805: LD_ADDR_VAR 0 8
61809: PUSH
61810: LD_VAR 0 2
61814: PPUSH
61815: CALL_OW 251
61819: ST_TO_ADDR
// if not x or not y then
61820: LD_VAR 0 7
61824: NOT
61825: PUSH
61826: LD_VAR 0 8
61830: NOT
61831: OR
61832: IFFALSE 61836
// exit ;
61834: GO 62231
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61836: LD_ADDR_VAR 0 6
61840: PUSH
61841: LD_VAR 0 7
61845: PPUSH
61846: LD_INT 0
61848: PPUSH
61849: LD_INT 4
61851: PPUSH
61852: CALL_OW 272
61856: PUSH
61857: LD_VAR 0 8
61861: PPUSH
61862: LD_INT 0
61864: PPUSH
61865: LD_INT 4
61867: PPUSH
61868: CALL_OW 273
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_VAR 0 7
61881: PPUSH
61882: LD_INT 1
61884: PPUSH
61885: LD_INT 4
61887: PPUSH
61888: CALL_OW 272
61892: PUSH
61893: LD_VAR 0 8
61897: PPUSH
61898: LD_INT 1
61900: PPUSH
61901: LD_INT 4
61903: PPUSH
61904: CALL_OW 273
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_VAR 0 7
61917: PPUSH
61918: LD_INT 2
61920: PPUSH
61921: LD_INT 4
61923: PPUSH
61924: CALL_OW 272
61928: PUSH
61929: LD_VAR 0 8
61933: PPUSH
61934: LD_INT 2
61936: PPUSH
61937: LD_INT 4
61939: PPUSH
61940: CALL_OW 273
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_VAR 0 7
61953: PPUSH
61954: LD_INT 3
61956: PPUSH
61957: LD_INT 4
61959: PPUSH
61960: CALL_OW 272
61964: PUSH
61965: LD_VAR 0 8
61969: PPUSH
61970: LD_INT 3
61972: PPUSH
61973: LD_INT 4
61975: PPUSH
61976: CALL_OW 273
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_VAR 0 7
61989: PPUSH
61990: LD_INT 4
61992: PPUSH
61993: LD_INT 4
61995: PPUSH
61996: CALL_OW 272
62000: PUSH
62001: LD_VAR 0 8
62005: PPUSH
62006: LD_INT 4
62008: PPUSH
62009: LD_INT 4
62011: PPUSH
62012: CALL_OW 273
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_VAR 0 7
62025: PPUSH
62026: LD_INT 5
62028: PPUSH
62029: LD_INT 4
62031: PPUSH
62032: CALL_OW 272
62036: PUSH
62037: LD_VAR 0 8
62041: PPUSH
62042: LD_INT 5
62044: PPUSH
62045: LD_INT 4
62047: PPUSH
62048: CALL_OW 273
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: ST_TO_ADDR
// for i = tmp downto 1 do
62065: LD_ADDR_VAR 0 4
62069: PUSH
62070: DOUBLE
62071: LD_VAR 0 6
62075: INC
62076: ST_TO_ADDR
62077: LD_INT 1
62079: PUSH
62080: FOR_DOWNTO
62081: IFFALSE 62182
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62083: LD_VAR 0 6
62087: PUSH
62088: LD_VAR 0 4
62092: ARRAY
62093: PUSH
62094: LD_INT 1
62096: ARRAY
62097: PPUSH
62098: LD_VAR 0 6
62102: PUSH
62103: LD_VAR 0 4
62107: ARRAY
62108: PUSH
62109: LD_INT 2
62111: ARRAY
62112: PPUSH
62113: CALL_OW 488
62117: NOT
62118: PUSH
62119: LD_VAR 0 6
62123: PUSH
62124: LD_VAR 0 4
62128: ARRAY
62129: PUSH
62130: LD_INT 1
62132: ARRAY
62133: PPUSH
62134: LD_VAR 0 6
62138: PUSH
62139: LD_VAR 0 4
62143: ARRAY
62144: PUSH
62145: LD_INT 2
62147: ARRAY
62148: PPUSH
62149: CALL_OW 428
62153: PUSH
62154: LD_INT 0
62156: NONEQUAL
62157: OR
62158: IFFALSE 62180
// tmp := Delete ( tmp , i ) ;
62160: LD_ADDR_VAR 0 6
62164: PUSH
62165: LD_VAR 0 6
62169: PPUSH
62170: LD_VAR 0 4
62174: PPUSH
62175: CALL_OW 3
62179: ST_TO_ADDR
62180: GO 62080
62182: POP
62183: POP
// j := GetClosestHex ( unit , tmp ) ;
62184: LD_ADDR_VAR 0 5
62188: PUSH
62189: LD_VAR 0 1
62193: PPUSH
62194: LD_VAR 0 6
62198: PPUSH
62199: CALL 61484 0 2
62203: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62204: LD_VAR 0 1
62208: PPUSH
62209: LD_VAR 0 5
62213: PUSH
62214: LD_INT 1
62216: ARRAY
62217: PPUSH
62218: LD_VAR 0 5
62222: PUSH
62223: LD_INT 2
62225: ARRAY
62226: PPUSH
62227: CALL_OW 111
// end ;
62231: LD_VAR 0 3
62235: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62236: LD_INT 0
62238: PPUSH
62239: PPUSH
62240: PPUSH
// uc_side = 0 ;
62241: LD_ADDR_OWVAR 20
62245: PUSH
62246: LD_INT 0
62248: ST_TO_ADDR
// uc_nation = 0 ;
62249: LD_ADDR_OWVAR 21
62253: PUSH
62254: LD_INT 0
62256: ST_TO_ADDR
// InitHc_All ( ) ;
62257: CALL_OW 584
// InitVc ;
62261: CALL_OW 20
// if mastodonts then
62265: LD_VAR 0 6
62269: IFFALSE 62336
// for i = 1 to mastodonts do
62271: LD_ADDR_VAR 0 11
62275: PUSH
62276: DOUBLE
62277: LD_INT 1
62279: DEC
62280: ST_TO_ADDR
62281: LD_VAR 0 6
62285: PUSH
62286: FOR_TO
62287: IFFALSE 62334
// begin vc_chassis := 31 ;
62289: LD_ADDR_OWVAR 37
62293: PUSH
62294: LD_INT 31
62296: ST_TO_ADDR
// vc_control := control_rider ;
62297: LD_ADDR_OWVAR 38
62301: PUSH
62302: LD_INT 4
62304: ST_TO_ADDR
// animal := CreateVehicle ;
62305: LD_ADDR_VAR 0 12
62309: PUSH
62310: CALL_OW 45
62314: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62315: LD_VAR 0 12
62319: PPUSH
62320: LD_VAR 0 8
62324: PPUSH
62325: LD_INT 0
62327: PPUSH
62328: CALL 64524 0 3
// end ;
62332: GO 62286
62334: POP
62335: POP
// if horses then
62336: LD_VAR 0 5
62340: IFFALSE 62407
// for i = 1 to horses do
62342: LD_ADDR_VAR 0 11
62346: PUSH
62347: DOUBLE
62348: LD_INT 1
62350: DEC
62351: ST_TO_ADDR
62352: LD_VAR 0 5
62356: PUSH
62357: FOR_TO
62358: IFFALSE 62405
// begin hc_class := 21 ;
62360: LD_ADDR_OWVAR 28
62364: PUSH
62365: LD_INT 21
62367: ST_TO_ADDR
// hc_gallery :=  ;
62368: LD_ADDR_OWVAR 33
62372: PUSH
62373: LD_STRING 
62375: ST_TO_ADDR
// animal := CreateHuman ;
62376: LD_ADDR_VAR 0 12
62380: PUSH
62381: CALL_OW 44
62385: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62386: LD_VAR 0 12
62390: PPUSH
62391: LD_VAR 0 8
62395: PPUSH
62396: LD_INT 0
62398: PPUSH
62399: CALL 64524 0 3
// end ;
62403: GO 62357
62405: POP
62406: POP
// if birds then
62407: LD_VAR 0 1
62411: IFFALSE 62478
// for i = 1 to birds do
62413: LD_ADDR_VAR 0 11
62417: PUSH
62418: DOUBLE
62419: LD_INT 1
62421: DEC
62422: ST_TO_ADDR
62423: LD_VAR 0 1
62427: PUSH
62428: FOR_TO
62429: IFFALSE 62476
// begin hc_class = 18 ;
62431: LD_ADDR_OWVAR 28
62435: PUSH
62436: LD_INT 18
62438: ST_TO_ADDR
// hc_gallery =  ;
62439: LD_ADDR_OWVAR 33
62443: PUSH
62444: LD_STRING 
62446: ST_TO_ADDR
// animal := CreateHuman ;
62447: LD_ADDR_VAR 0 12
62451: PUSH
62452: CALL_OW 44
62456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62457: LD_VAR 0 12
62461: PPUSH
62462: LD_VAR 0 8
62466: PPUSH
62467: LD_INT 0
62469: PPUSH
62470: CALL 64524 0 3
// end ;
62474: GO 62428
62476: POP
62477: POP
// if tigers then
62478: LD_VAR 0 2
62482: IFFALSE 62566
// for i = 1 to tigers do
62484: LD_ADDR_VAR 0 11
62488: PUSH
62489: DOUBLE
62490: LD_INT 1
62492: DEC
62493: ST_TO_ADDR
62494: LD_VAR 0 2
62498: PUSH
62499: FOR_TO
62500: IFFALSE 62564
// begin hc_class = class_tiger ;
62502: LD_ADDR_OWVAR 28
62506: PUSH
62507: LD_INT 14
62509: ST_TO_ADDR
// hc_gallery =  ;
62510: LD_ADDR_OWVAR 33
62514: PUSH
62515: LD_STRING 
62517: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62518: LD_ADDR_OWVAR 35
62522: PUSH
62523: LD_INT 7
62525: NEG
62526: PPUSH
62527: LD_INT 7
62529: PPUSH
62530: CALL_OW 12
62534: ST_TO_ADDR
// animal := CreateHuman ;
62535: LD_ADDR_VAR 0 12
62539: PUSH
62540: CALL_OW 44
62544: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62545: LD_VAR 0 12
62549: PPUSH
62550: LD_VAR 0 8
62554: PPUSH
62555: LD_INT 0
62557: PPUSH
62558: CALL 64524 0 3
// end ;
62562: GO 62499
62564: POP
62565: POP
// if apemans then
62566: LD_VAR 0 3
62570: IFFALSE 62693
// for i = 1 to apemans do
62572: LD_ADDR_VAR 0 11
62576: PUSH
62577: DOUBLE
62578: LD_INT 1
62580: DEC
62581: ST_TO_ADDR
62582: LD_VAR 0 3
62586: PUSH
62587: FOR_TO
62588: IFFALSE 62691
// begin hc_class = class_apeman ;
62590: LD_ADDR_OWVAR 28
62594: PUSH
62595: LD_INT 12
62597: ST_TO_ADDR
// hc_gallery =  ;
62598: LD_ADDR_OWVAR 33
62602: PUSH
62603: LD_STRING 
62605: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62606: LD_ADDR_OWVAR 35
62610: PUSH
62611: LD_INT 5
62613: NEG
62614: PPUSH
62615: LD_INT 5
62617: PPUSH
62618: CALL_OW 12
62622: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62623: LD_ADDR_OWVAR 31
62627: PUSH
62628: LD_INT 1
62630: PPUSH
62631: LD_INT 3
62633: PPUSH
62634: CALL_OW 12
62638: PUSH
62639: LD_INT 1
62641: PPUSH
62642: LD_INT 3
62644: PPUSH
62645: CALL_OW 12
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: ST_TO_ADDR
// animal := CreateHuman ;
62662: LD_ADDR_VAR 0 12
62666: PUSH
62667: CALL_OW 44
62671: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62672: LD_VAR 0 12
62676: PPUSH
62677: LD_VAR 0 8
62681: PPUSH
62682: LD_INT 0
62684: PPUSH
62685: CALL 64524 0 3
// end ;
62689: GO 62587
62691: POP
62692: POP
// if enchidnas then
62693: LD_VAR 0 4
62697: IFFALSE 62764
// for i = 1 to enchidnas do
62699: LD_ADDR_VAR 0 11
62703: PUSH
62704: DOUBLE
62705: LD_INT 1
62707: DEC
62708: ST_TO_ADDR
62709: LD_VAR 0 4
62713: PUSH
62714: FOR_TO
62715: IFFALSE 62762
// begin hc_class = 13 ;
62717: LD_ADDR_OWVAR 28
62721: PUSH
62722: LD_INT 13
62724: ST_TO_ADDR
// hc_gallery =  ;
62725: LD_ADDR_OWVAR 33
62729: PUSH
62730: LD_STRING 
62732: ST_TO_ADDR
// animal := CreateHuman ;
62733: LD_ADDR_VAR 0 12
62737: PUSH
62738: CALL_OW 44
62742: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62743: LD_VAR 0 12
62747: PPUSH
62748: LD_VAR 0 8
62752: PPUSH
62753: LD_INT 0
62755: PPUSH
62756: CALL 64524 0 3
// end ;
62760: GO 62714
62762: POP
62763: POP
// if fishes then
62764: LD_VAR 0 7
62768: IFFALSE 62835
// for i = 1 to fishes do
62770: LD_ADDR_VAR 0 11
62774: PUSH
62775: DOUBLE
62776: LD_INT 1
62778: DEC
62779: ST_TO_ADDR
62780: LD_VAR 0 7
62784: PUSH
62785: FOR_TO
62786: IFFALSE 62833
// begin hc_class = 20 ;
62788: LD_ADDR_OWVAR 28
62792: PUSH
62793: LD_INT 20
62795: ST_TO_ADDR
// hc_gallery =  ;
62796: LD_ADDR_OWVAR 33
62800: PUSH
62801: LD_STRING 
62803: ST_TO_ADDR
// animal := CreateHuman ;
62804: LD_ADDR_VAR 0 12
62808: PUSH
62809: CALL_OW 44
62813: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62814: LD_VAR 0 12
62818: PPUSH
62819: LD_VAR 0 9
62823: PPUSH
62824: LD_INT 0
62826: PPUSH
62827: CALL 64524 0 3
// end ;
62831: GO 62785
62833: POP
62834: POP
// end ;
62835: LD_VAR 0 10
62839: RET
// export function WantHeal ( sci , unit ) ; begin
62840: LD_INT 0
62842: PPUSH
// if GetTaskList ( sci ) > 0 then
62843: LD_VAR 0 1
62847: PPUSH
62848: CALL_OW 437
62852: PUSH
62853: LD_INT 0
62855: GREATER
62856: IFFALSE 62926
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62858: LD_VAR 0 1
62862: PPUSH
62863: CALL_OW 437
62867: PUSH
62868: LD_INT 1
62870: ARRAY
62871: PUSH
62872: LD_INT 1
62874: ARRAY
62875: PUSH
62876: LD_STRING l
62878: EQUAL
62879: PUSH
62880: LD_VAR 0 1
62884: PPUSH
62885: CALL_OW 437
62889: PUSH
62890: LD_INT 1
62892: ARRAY
62893: PUSH
62894: LD_INT 4
62896: ARRAY
62897: PUSH
62898: LD_VAR 0 2
62902: EQUAL
62903: AND
62904: IFFALSE 62916
// result := true else
62906: LD_ADDR_VAR 0 3
62910: PUSH
62911: LD_INT 1
62913: ST_TO_ADDR
62914: GO 62924
// result := false ;
62916: LD_ADDR_VAR 0 3
62920: PUSH
62921: LD_INT 0
62923: ST_TO_ADDR
// end else
62924: GO 62934
// result := false ;
62926: LD_ADDR_VAR 0 3
62930: PUSH
62931: LD_INT 0
62933: ST_TO_ADDR
// end ;
62934: LD_VAR 0 3
62938: RET
// export function HealTarget ( sci ) ; begin
62939: LD_INT 0
62941: PPUSH
// if not sci then
62942: LD_VAR 0 1
62946: NOT
62947: IFFALSE 62951
// exit ;
62949: GO 63016
// result := 0 ;
62951: LD_ADDR_VAR 0 2
62955: PUSH
62956: LD_INT 0
62958: ST_TO_ADDR
// if GetTaskList ( sci ) then
62959: LD_VAR 0 1
62963: PPUSH
62964: CALL_OW 437
62968: IFFALSE 63016
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62970: LD_VAR 0 1
62974: PPUSH
62975: CALL_OW 437
62979: PUSH
62980: LD_INT 1
62982: ARRAY
62983: PUSH
62984: LD_INT 1
62986: ARRAY
62987: PUSH
62988: LD_STRING l
62990: EQUAL
62991: IFFALSE 63016
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62993: LD_ADDR_VAR 0 2
62997: PUSH
62998: LD_VAR 0 1
63002: PPUSH
63003: CALL_OW 437
63007: PUSH
63008: LD_INT 1
63010: ARRAY
63011: PUSH
63012: LD_INT 4
63014: ARRAY
63015: ST_TO_ADDR
// end ;
63016: LD_VAR 0 2
63020: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63021: LD_INT 0
63023: PPUSH
63024: PPUSH
63025: PPUSH
63026: PPUSH
// if not base_units then
63027: LD_VAR 0 1
63031: NOT
63032: IFFALSE 63036
// exit ;
63034: GO 63123
// result := false ;
63036: LD_ADDR_VAR 0 2
63040: PUSH
63041: LD_INT 0
63043: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63044: LD_ADDR_VAR 0 5
63048: PUSH
63049: LD_VAR 0 1
63053: PPUSH
63054: LD_INT 21
63056: PUSH
63057: LD_INT 3
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PPUSH
63064: CALL_OW 72
63068: ST_TO_ADDR
// if not tmp then
63069: LD_VAR 0 5
63073: NOT
63074: IFFALSE 63078
// exit ;
63076: GO 63123
// for i in tmp do
63078: LD_ADDR_VAR 0 3
63082: PUSH
63083: LD_VAR 0 5
63087: PUSH
63088: FOR_IN
63089: IFFALSE 63121
// begin result := EnemyInRange ( i , 22 ) ;
63091: LD_ADDR_VAR 0 2
63095: PUSH
63096: LD_VAR 0 3
63100: PPUSH
63101: LD_INT 22
63103: PPUSH
63104: CALL 61359 0 2
63108: ST_TO_ADDR
// if result then
63109: LD_VAR 0 2
63113: IFFALSE 63119
// exit ;
63115: POP
63116: POP
63117: GO 63123
// end ;
63119: GO 63088
63121: POP
63122: POP
// end ;
63123: LD_VAR 0 2
63127: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63128: LD_INT 0
63130: PPUSH
63131: PPUSH
// if not units then
63132: LD_VAR 0 1
63136: NOT
63137: IFFALSE 63141
// exit ;
63139: GO 63211
// result := [ ] ;
63141: LD_ADDR_VAR 0 3
63145: PUSH
63146: EMPTY
63147: ST_TO_ADDR
// for i in units do
63148: LD_ADDR_VAR 0 4
63152: PUSH
63153: LD_VAR 0 1
63157: PUSH
63158: FOR_IN
63159: IFFALSE 63209
// if GetTag ( i ) = tag then
63161: LD_VAR 0 4
63165: PPUSH
63166: CALL_OW 110
63170: PUSH
63171: LD_VAR 0 2
63175: EQUAL
63176: IFFALSE 63207
// result := Insert ( result , result + 1 , i ) ;
63178: LD_ADDR_VAR 0 3
63182: PUSH
63183: LD_VAR 0 3
63187: PPUSH
63188: LD_VAR 0 3
63192: PUSH
63193: LD_INT 1
63195: PLUS
63196: PPUSH
63197: LD_VAR 0 4
63201: PPUSH
63202: CALL_OW 2
63206: ST_TO_ADDR
63207: GO 63158
63209: POP
63210: POP
// end ;
63211: LD_VAR 0 3
63215: RET
// export function IsDriver ( un ) ; begin
63216: LD_INT 0
63218: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63219: LD_ADDR_VAR 0 2
63223: PUSH
63224: LD_VAR 0 1
63228: PUSH
63229: LD_INT 55
63231: PUSH
63232: EMPTY
63233: LIST
63234: PPUSH
63235: CALL_OW 69
63239: IN
63240: ST_TO_ADDR
// end ;
63241: LD_VAR 0 2
63245: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63246: LD_INT 0
63248: PPUSH
63249: PPUSH
// list := [ ] ;
63250: LD_ADDR_VAR 0 5
63254: PUSH
63255: EMPTY
63256: ST_TO_ADDR
// case d of 0 :
63257: LD_VAR 0 3
63261: PUSH
63262: LD_INT 0
63264: DOUBLE
63265: EQUAL
63266: IFTRUE 63270
63268: GO 63403
63270: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63271: LD_ADDR_VAR 0 5
63275: PUSH
63276: LD_VAR 0 1
63280: PUSH
63281: LD_INT 4
63283: MINUS
63284: PUSH
63285: LD_VAR 0 2
63289: PUSH
63290: LD_INT 4
63292: MINUS
63293: PUSH
63294: LD_INT 2
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: LIST
63301: PUSH
63302: LD_VAR 0 1
63306: PUSH
63307: LD_INT 3
63309: MINUS
63310: PUSH
63311: LD_VAR 0 2
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: LIST
63323: PUSH
63324: LD_VAR 0 1
63328: PUSH
63329: LD_INT 4
63331: PLUS
63332: PUSH
63333: LD_VAR 0 2
63337: PUSH
63338: LD_INT 4
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: LIST
63345: PUSH
63346: LD_VAR 0 1
63350: PUSH
63351: LD_INT 3
63353: PLUS
63354: PUSH
63355: LD_VAR 0 2
63359: PUSH
63360: LD_INT 3
63362: PLUS
63363: PUSH
63364: LD_INT 5
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: LIST
63371: PUSH
63372: LD_VAR 0 1
63376: PUSH
63377: LD_VAR 0 2
63381: PUSH
63382: LD_INT 4
63384: PLUS
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: LIST
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: ST_TO_ADDR
// end ; 1 :
63401: GO 64101
63403: LD_INT 1
63405: DOUBLE
63406: EQUAL
63407: IFTRUE 63411
63409: GO 63544
63411: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63412: LD_ADDR_VAR 0 5
63416: PUSH
63417: LD_VAR 0 1
63421: PUSH
63422: LD_VAR 0 2
63426: PUSH
63427: LD_INT 4
63429: MINUS
63430: PUSH
63431: LD_INT 3
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: LIST
63438: PUSH
63439: LD_VAR 0 1
63443: PUSH
63444: LD_INT 3
63446: MINUS
63447: PUSH
63448: LD_VAR 0 2
63452: PUSH
63453: LD_INT 3
63455: MINUS
63456: PUSH
63457: LD_INT 2
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: LIST
63464: PUSH
63465: LD_VAR 0 1
63469: PUSH
63470: LD_INT 4
63472: MINUS
63473: PUSH
63474: LD_VAR 0 2
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: LIST
63486: PUSH
63487: LD_VAR 0 1
63491: PUSH
63492: LD_VAR 0 2
63496: PUSH
63497: LD_INT 3
63499: PLUS
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: PUSH
63509: LD_VAR 0 1
63513: PUSH
63514: LD_INT 4
63516: PLUS
63517: PUSH
63518: LD_VAR 0 2
63522: PUSH
63523: LD_INT 4
63525: PLUS
63526: PUSH
63527: LD_INT 5
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: ST_TO_ADDR
// end ; 2 :
63542: GO 64101
63544: LD_INT 2
63546: DOUBLE
63547: EQUAL
63548: IFTRUE 63552
63550: GO 63681
63552: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63553: LD_ADDR_VAR 0 5
63557: PUSH
63558: LD_VAR 0 1
63562: PUSH
63563: LD_VAR 0 2
63567: PUSH
63568: LD_INT 3
63570: MINUS
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: LIST
63579: PUSH
63580: LD_VAR 0 1
63584: PUSH
63585: LD_INT 4
63587: PLUS
63588: PUSH
63589: LD_VAR 0 2
63593: PUSH
63594: LD_INT 4
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: LIST
63601: PUSH
63602: LD_VAR 0 1
63606: PUSH
63607: LD_VAR 0 2
63611: PUSH
63612: LD_INT 4
63614: PLUS
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: LIST
63623: PUSH
63624: LD_VAR 0 1
63628: PUSH
63629: LD_INT 3
63631: MINUS
63632: PUSH
63633: LD_VAR 0 2
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: LIST
63645: PUSH
63646: LD_VAR 0 1
63650: PUSH
63651: LD_INT 4
63653: MINUS
63654: PUSH
63655: LD_VAR 0 2
63659: PUSH
63660: LD_INT 4
63662: MINUS
63663: PUSH
63664: LD_INT 2
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: ST_TO_ADDR
// end ; 3 :
63679: GO 64101
63681: LD_INT 3
63683: DOUBLE
63684: EQUAL
63685: IFTRUE 63689
63687: GO 63822
63689: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63690: LD_ADDR_VAR 0 5
63694: PUSH
63695: LD_VAR 0 1
63699: PUSH
63700: LD_INT 3
63702: PLUS
63703: PUSH
63704: LD_VAR 0 2
63708: PUSH
63709: LD_INT 4
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: PUSH
63717: LD_VAR 0 1
63721: PUSH
63722: LD_INT 4
63724: PLUS
63725: PUSH
63726: LD_VAR 0 2
63730: PUSH
63731: LD_INT 4
63733: PLUS
63734: PUSH
63735: LD_INT 5
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: LIST
63742: PUSH
63743: LD_VAR 0 1
63747: PUSH
63748: LD_INT 4
63750: MINUS
63751: PUSH
63752: LD_VAR 0 2
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: LIST
63764: PUSH
63765: LD_VAR 0 1
63769: PUSH
63770: LD_VAR 0 2
63774: PUSH
63775: LD_INT 4
63777: MINUS
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: PUSH
63787: LD_VAR 0 1
63791: PUSH
63792: LD_INT 3
63794: MINUS
63795: PUSH
63796: LD_VAR 0 2
63800: PUSH
63801: LD_INT 3
63803: MINUS
63804: PUSH
63805: LD_INT 2
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: LIST
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: ST_TO_ADDR
// end ; 4 :
63820: GO 64101
63822: LD_INT 4
63824: DOUBLE
63825: EQUAL
63826: IFTRUE 63830
63828: GO 63963
63830: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63831: LD_ADDR_VAR 0 5
63835: PUSH
63836: LD_VAR 0 1
63840: PUSH
63841: LD_VAR 0 2
63845: PUSH
63846: LD_INT 4
63848: PLUS
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: PUSH
63858: LD_VAR 0 1
63862: PUSH
63863: LD_INT 3
63865: PLUS
63866: PUSH
63867: LD_VAR 0 2
63871: PUSH
63872: LD_INT 3
63874: PLUS
63875: PUSH
63876: LD_INT 5
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: LIST
63883: PUSH
63884: LD_VAR 0 1
63888: PUSH
63889: LD_INT 4
63891: PLUS
63892: PUSH
63893: LD_VAR 0 2
63897: PUSH
63898: LD_INT 4
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: LIST
63905: PUSH
63906: LD_VAR 0 1
63910: PUSH
63911: LD_VAR 0 2
63915: PUSH
63916: LD_INT 3
63918: MINUS
63919: PUSH
63920: LD_INT 3
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: LIST
63927: PUSH
63928: LD_VAR 0 1
63932: PUSH
63933: LD_INT 4
63935: MINUS
63936: PUSH
63937: LD_VAR 0 2
63941: PUSH
63942: LD_INT 4
63944: MINUS
63945: PUSH
63946: LD_INT 2
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: LIST
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: ST_TO_ADDR
// end ; 5 :
63961: GO 64101
63963: LD_INT 5
63965: DOUBLE
63966: EQUAL
63967: IFTRUE 63971
63969: GO 64100
63971: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63972: LD_ADDR_VAR 0 5
63976: PUSH
63977: LD_VAR 0 1
63981: PUSH
63982: LD_INT 4
63984: MINUS
63985: PUSH
63986: LD_VAR 0 2
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: LIST
63998: PUSH
63999: LD_VAR 0 1
64003: PUSH
64004: LD_VAR 0 2
64008: PUSH
64009: LD_INT 4
64011: MINUS
64012: PUSH
64013: LD_INT 3
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: LIST
64020: PUSH
64021: LD_VAR 0 1
64025: PUSH
64026: LD_INT 4
64028: PLUS
64029: PUSH
64030: LD_VAR 0 2
64034: PUSH
64035: LD_INT 4
64037: PLUS
64038: PUSH
64039: LD_INT 5
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: PUSH
64047: LD_VAR 0 1
64051: PUSH
64052: LD_INT 3
64054: PLUS
64055: PUSH
64056: LD_VAR 0 2
64060: PUSH
64061: LD_INT 4
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: PUSH
64069: LD_VAR 0 1
64073: PUSH
64074: LD_VAR 0 2
64078: PUSH
64079: LD_INT 3
64081: PLUS
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: LIST
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: ST_TO_ADDR
// end ; end ;
64098: GO 64101
64100: POP
// result := list ;
64101: LD_ADDR_VAR 0 4
64105: PUSH
64106: LD_VAR 0 5
64110: ST_TO_ADDR
// end ;
64111: LD_VAR 0 4
64115: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64116: LD_INT 0
64118: PPUSH
64119: PPUSH
64120: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64121: LD_VAR 0 1
64125: NOT
64126: PUSH
64127: LD_VAR 0 2
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: LD_INT 3
64140: PUSH
64141: LD_INT 4
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: IN
64150: NOT
64151: OR
64152: IFFALSE 64156
// exit ;
64154: GO 64248
// tmp := [ ] ;
64156: LD_ADDR_VAR 0 5
64160: PUSH
64161: EMPTY
64162: ST_TO_ADDR
// for i in units do
64163: LD_ADDR_VAR 0 4
64167: PUSH
64168: LD_VAR 0 1
64172: PUSH
64173: FOR_IN
64174: IFFALSE 64217
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64176: LD_ADDR_VAR 0 5
64180: PUSH
64181: LD_VAR 0 5
64185: PPUSH
64186: LD_VAR 0 5
64190: PUSH
64191: LD_INT 1
64193: PLUS
64194: PPUSH
64195: LD_VAR 0 4
64199: PPUSH
64200: LD_VAR 0 2
64204: PPUSH
64205: CALL_OW 259
64209: PPUSH
64210: CALL_OW 2
64214: ST_TO_ADDR
64215: GO 64173
64217: POP
64218: POP
// if not tmp then
64219: LD_VAR 0 5
64223: NOT
64224: IFFALSE 64228
// exit ;
64226: GO 64248
// result := SortListByListDesc ( units , tmp ) ;
64228: LD_ADDR_VAR 0 3
64232: PUSH
64233: LD_VAR 0 1
64237: PPUSH
64238: LD_VAR 0 5
64242: PPUSH
64243: CALL_OW 77
64247: ST_TO_ADDR
// end ;
64248: LD_VAR 0 3
64252: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64253: LD_INT 0
64255: PPUSH
64256: PPUSH
64257: PPUSH
// result := false ;
64258: LD_ADDR_VAR 0 3
64262: PUSH
64263: LD_INT 0
64265: ST_TO_ADDR
// x := GetX ( building ) ;
64266: LD_ADDR_VAR 0 4
64270: PUSH
64271: LD_VAR 0 2
64275: PPUSH
64276: CALL_OW 250
64280: ST_TO_ADDR
// y := GetY ( building ) ;
64281: LD_ADDR_VAR 0 5
64285: PUSH
64286: LD_VAR 0 2
64290: PPUSH
64291: CALL_OW 251
64295: ST_TO_ADDR
// if not building or not x or not y then
64296: LD_VAR 0 2
64300: NOT
64301: PUSH
64302: LD_VAR 0 4
64306: NOT
64307: OR
64308: PUSH
64309: LD_VAR 0 5
64313: NOT
64314: OR
64315: IFFALSE 64319
// exit ;
64317: GO 64411
// if GetTaskList ( unit ) then
64319: LD_VAR 0 1
64323: PPUSH
64324: CALL_OW 437
64328: IFFALSE 64411
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64330: LD_STRING e
64332: PUSH
64333: LD_VAR 0 1
64337: PPUSH
64338: CALL_OW 437
64342: PUSH
64343: LD_INT 1
64345: ARRAY
64346: PUSH
64347: LD_INT 1
64349: ARRAY
64350: EQUAL
64351: PUSH
64352: LD_VAR 0 4
64356: PUSH
64357: LD_VAR 0 1
64361: PPUSH
64362: CALL_OW 437
64366: PUSH
64367: LD_INT 1
64369: ARRAY
64370: PUSH
64371: LD_INT 2
64373: ARRAY
64374: EQUAL
64375: AND
64376: PUSH
64377: LD_VAR 0 5
64381: PUSH
64382: LD_VAR 0 1
64386: PPUSH
64387: CALL_OW 437
64391: PUSH
64392: LD_INT 1
64394: ARRAY
64395: PUSH
64396: LD_INT 3
64398: ARRAY
64399: EQUAL
64400: AND
64401: IFFALSE 64411
// result := true end ;
64403: LD_ADDR_VAR 0 3
64407: PUSH
64408: LD_INT 1
64410: ST_TO_ADDR
// end ;
64411: LD_VAR 0 3
64415: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64416: LD_INT 0
64418: PPUSH
// result := false ;
64419: LD_ADDR_VAR 0 4
64423: PUSH
64424: LD_INT 0
64426: ST_TO_ADDR
// if GetTaskList ( unit ) then
64427: LD_VAR 0 1
64431: PPUSH
64432: CALL_OW 437
64436: IFFALSE 64519
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64438: LD_STRING M
64440: PUSH
64441: LD_VAR 0 1
64445: PPUSH
64446: CALL_OW 437
64450: PUSH
64451: LD_INT 1
64453: ARRAY
64454: PUSH
64455: LD_INT 1
64457: ARRAY
64458: EQUAL
64459: PUSH
64460: LD_VAR 0 2
64464: PUSH
64465: LD_VAR 0 1
64469: PPUSH
64470: CALL_OW 437
64474: PUSH
64475: LD_INT 1
64477: ARRAY
64478: PUSH
64479: LD_INT 2
64481: ARRAY
64482: EQUAL
64483: AND
64484: PUSH
64485: LD_VAR 0 3
64489: PUSH
64490: LD_VAR 0 1
64494: PPUSH
64495: CALL_OW 437
64499: PUSH
64500: LD_INT 1
64502: ARRAY
64503: PUSH
64504: LD_INT 3
64506: ARRAY
64507: EQUAL
64508: AND
64509: IFFALSE 64519
// result := true ;
64511: LD_ADDR_VAR 0 4
64515: PUSH
64516: LD_INT 1
64518: ST_TO_ADDR
// end ; end ;
64519: LD_VAR 0 4
64523: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64524: LD_INT 0
64526: PPUSH
64527: PPUSH
64528: PPUSH
64529: PPUSH
// if not unit or not area then
64530: LD_VAR 0 1
64534: NOT
64535: PUSH
64536: LD_VAR 0 2
64540: NOT
64541: OR
64542: IFFALSE 64546
// exit ;
64544: GO 64710
// tmp := AreaToList ( area , i ) ;
64546: LD_ADDR_VAR 0 6
64550: PUSH
64551: LD_VAR 0 2
64555: PPUSH
64556: LD_VAR 0 5
64560: PPUSH
64561: CALL_OW 517
64565: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64566: LD_ADDR_VAR 0 5
64570: PUSH
64571: DOUBLE
64572: LD_INT 1
64574: DEC
64575: ST_TO_ADDR
64576: LD_VAR 0 6
64580: PUSH
64581: LD_INT 1
64583: ARRAY
64584: PUSH
64585: FOR_TO
64586: IFFALSE 64708
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64588: LD_ADDR_VAR 0 7
64592: PUSH
64593: LD_VAR 0 6
64597: PUSH
64598: LD_INT 1
64600: ARRAY
64601: PUSH
64602: LD_VAR 0 5
64606: ARRAY
64607: PUSH
64608: LD_VAR 0 6
64612: PUSH
64613: LD_INT 2
64615: ARRAY
64616: PUSH
64617: LD_VAR 0 5
64621: ARRAY
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64627: LD_VAR 0 7
64631: PUSH
64632: LD_INT 1
64634: ARRAY
64635: PPUSH
64636: LD_VAR 0 7
64640: PUSH
64641: LD_INT 2
64643: ARRAY
64644: PPUSH
64645: CALL_OW 428
64649: PUSH
64650: LD_INT 0
64652: EQUAL
64653: IFFALSE 64706
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64655: LD_VAR 0 1
64659: PPUSH
64660: LD_VAR 0 7
64664: PUSH
64665: LD_INT 1
64667: ARRAY
64668: PPUSH
64669: LD_VAR 0 7
64673: PUSH
64674: LD_INT 2
64676: ARRAY
64677: PPUSH
64678: LD_VAR 0 3
64682: PPUSH
64683: CALL_OW 48
// result := IsPlaced ( unit ) ;
64687: LD_ADDR_VAR 0 4
64691: PUSH
64692: LD_VAR 0 1
64696: PPUSH
64697: CALL_OW 305
64701: ST_TO_ADDR
// exit ;
64702: POP
64703: POP
64704: GO 64710
// end ; end ;
64706: GO 64585
64708: POP
64709: POP
// end ;
64710: LD_VAR 0 4
64714: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64715: LD_INT 0
64717: PPUSH
64718: PPUSH
64719: PPUSH
// if not side or side > 8 then
64720: LD_VAR 0 1
64724: NOT
64725: PUSH
64726: LD_VAR 0 1
64730: PUSH
64731: LD_INT 8
64733: GREATER
64734: OR
64735: IFFALSE 64739
// exit ;
64737: GO 64926
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64739: LD_ADDR_VAR 0 4
64743: PUSH
64744: LD_INT 22
64746: PUSH
64747: LD_VAR 0 1
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 21
64758: PUSH
64759: LD_INT 3
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PPUSH
64770: CALL_OW 69
64774: ST_TO_ADDR
// if not tmp then
64775: LD_VAR 0 4
64779: NOT
64780: IFFALSE 64784
// exit ;
64782: GO 64926
// enable_addtolog := true ;
64784: LD_ADDR_OWVAR 81
64788: PUSH
64789: LD_INT 1
64791: ST_TO_ADDR
// AddToLog ( [ ) ;
64792: LD_STRING [
64794: PPUSH
64795: CALL_OW 561
// for i in tmp do
64799: LD_ADDR_VAR 0 3
64803: PUSH
64804: LD_VAR 0 4
64808: PUSH
64809: FOR_IN
64810: IFFALSE 64917
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64812: LD_STRING [
64814: PUSH
64815: LD_VAR 0 3
64819: PPUSH
64820: CALL_OW 266
64824: STR
64825: PUSH
64826: LD_STRING , 
64828: STR
64829: PUSH
64830: LD_VAR 0 3
64834: PPUSH
64835: CALL_OW 250
64839: STR
64840: PUSH
64841: LD_STRING , 
64843: STR
64844: PUSH
64845: LD_VAR 0 3
64849: PPUSH
64850: CALL_OW 251
64854: STR
64855: PUSH
64856: LD_STRING , 
64858: STR
64859: PUSH
64860: LD_VAR 0 3
64864: PPUSH
64865: CALL_OW 254
64869: STR
64870: PUSH
64871: LD_STRING , 
64873: STR
64874: PUSH
64875: LD_VAR 0 3
64879: PPUSH
64880: LD_INT 1
64882: PPUSH
64883: CALL_OW 268
64887: STR
64888: PUSH
64889: LD_STRING , 
64891: STR
64892: PUSH
64893: LD_VAR 0 3
64897: PPUSH
64898: LD_INT 2
64900: PPUSH
64901: CALL_OW 268
64905: STR
64906: PUSH
64907: LD_STRING ],
64909: STR
64910: PPUSH
64911: CALL_OW 561
// end ;
64915: GO 64809
64917: POP
64918: POP
// AddToLog ( ]; ) ;
64919: LD_STRING ];
64921: PPUSH
64922: CALL_OW 561
// end ;
64926: LD_VAR 0 2
64930: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64931: LD_INT 0
64933: PPUSH
64934: PPUSH
64935: PPUSH
64936: PPUSH
64937: PPUSH
// if not area or not rate or not max then
64938: LD_VAR 0 1
64942: NOT
64943: PUSH
64944: LD_VAR 0 2
64948: NOT
64949: OR
64950: PUSH
64951: LD_VAR 0 4
64955: NOT
64956: OR
64957: IFFALSE 64961
// exit ;
64959: GO 65153
// while 1 do
64961: LD_INT 1
64963: IFFALSE 65153
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64965: LD_ADDR_VAR 0 9
64969: PUSH
64970: LD_VAR 0 1
64974: PPUSH
64975: LD_INT 1
64977: PPUSH
64978: CALL_OW 287
64982: PUSH
64983: LD_INT 10
64985: MUL
64986: ST_TO_ADDR
// r := rate / 10 ;
64987: LD_ADDR_VAR 0 7
64991: PUSH
64992: LD_VAR 0 2
64996: PUSH
64997: LD_INT 10
64999: DIVREAL
65000: ST_TO_ADDR
// time := 1 1$00 ;
65001: LD_ADDR_VAR 0 8
65005: PUSH
65006: LD_INT 2100
65008: ST_TO_ADDR
// if amount < min then
65009: LD_VAR 0 9
65013: PUSH
65014: LD_VAR 0 3
65018: LESS
65019: IFFALSE 65037
// r := r * 2 else
65021: LD_ADDR_VAR 0 7
65025: PUSH
65026: LD_VAR 0 7
65030: PUSH
65031: LD_INT 2
65033: MUL
65034: ST_TO_ADDR
65035: GO 65063
// if amount > max then
65037: LD_VAR 0 9
65041: PUSH
65042: LD_VAR 0 4
65046: GREATER
65047: IFFALSE 65063
// r := r / 2 ;
65049: LD_ADDR_VAR 0 7
65053: PUSH
65054: LD_VAR 0 7
65058: PUSH
65059: LD_INT 2
65061: DIVREAL
65062: ST_TO_ADDR
// time := time / r ;
65063: LD_ADDR_VAR 0 8
65067: PUSH
65068: LD_VAR 0 8
65072: PUSH
65073: LD_VAR 0 7
65077: DIVREAL
65078: ST_TO_ADDR
// if time < 0 then
65079: LD_VAR 0 8
65083: PUSH
65084: LD_INT 0
65086: LESS
65087: IFFALSE 65104
// time := time * - 1 ;
65089: LD_ADDR_VAR 0 8
65093: PUSH
65094: LD_VAR 0 8
65098: PUSH
65099: LD_INT 1
65101: NEG
65102: MUL
65103: ST_TO_ADDR
// wait ( time ) ;
65104: LD_VAR 0 8
65108: PPUSH
65109: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65113: LD_INT 35
65115: PPUSH
65116: LD_INT 875
65118: PPUSH
65119: CALL_OW 12
65123: PPUSH
65124: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65128: LD_INT 1
65130: PPUSH
65131: LD_INT 5
65133: PPUSH
65134: CALL_OW 12
65138: PPUSH
65139: LD_VAR 0 1
65143: PPUSH
65144: LD_INT 1
65146: PPUSH
65147: CALL_OW 55
// end ;
65151: GO 64961
// end ;
65153: LD_VAR 0 5
65157: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65158: LD_INT 0
65160: PPUSH
65161: PPUSH
65162: PPUSH
65163: PPUSH
65164: PPUSH
65165: PPUSH
65166: PPUSH
65167: PPUSH
// if not turrets or not factories then
65168: LD_VAR 0 1
65172: NOT
65173: PUSH
65174: LD_VAR 0 2
65178: NOT
65179: OR
65180: IFFALSE 65184
// exit ;
65182: GO 65491
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65184: LD_ADDR_VAR 0 10
65188: PUSH
65189: LD_INT 5
65191: PUSH
65192: LD_INT 6
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 2
65201: PUSH
65202: LD_INT 4
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 3
65211: PUSH
65212: LD_INT 5
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 24
65226: PUSH
65227: LD_INT 25
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 23
65236: PUSH
65237: LD_INT 27
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 42
65250: PUSH
65251: LD_INT 43
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 44
65260: PUSH
65261: LD_INT 46
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 45
65270: PUSH
65271: LD_INT 47
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: LIST
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: LIST
65287: ST_TO_ADDR
// result := [ ] ;
65288: LD_ADDR_VAR 0 3
65292: PUSH
65293: EMPTY
65294: ST_TO_ADDR
// for i in turrets do
65295: LD_ADDR_VAR 0 4
65299: PUSH
65300: LD_VAR 0 1
65304: PUSH
65305: FOR_IN
65306: IFFALSE 65489
// begin nat := GetNation ( i ) ;
65308: LD_ADDR_VAR 0 7
65312: PUSH
65313: LD_VAR 0 4
65317: PPUSH
65318: CALL_OW 248
65322: ST_TO_ADDR
// weapon := 0 ;
65323: LD_ADDR_VAR 0 8
65327: PUSH
65328: LD_INT 0
65330: ST_TO_ADDR
// if not nat then
65331: LD_VAR 0 7
65335: NOT
65336: IFFALSE 65340
// continue ;
65338: GO 65305
// for j in list [ nat ] do
65340: LD_ADDR_VAR 0 5
65344: PUSH
65345: LD_VAR 0 10
65349: PUSH
65350: LD_VAR 0 7
65354: ARRAY
65355: PUSH
65356: FOR_IN
65357: IFFALSE 65398
// if GetBWeapon ( i ) = j [ 1 ] then
65359: LD_VAR 0 4
65363: PPUSH
65364: CALL_OW 269
65368: PUSH
65369: LD_VAR 0 5
65373: PUSH
65374: LD_INT 1
65376: ARRAY
65377: EQUAL
65378: IFFALSE 65396
// begin weapon := j [ 2 ] ;
65380: LD_ADDR_VAR 0 8
65384: PUSH
65385: LD_VAR 0 5
65389: PUSH
65390: LD_INT 2
65392: ARRAY
65393: ST_TO_ADDR
// break ;
65394: GO 65398
// end ;
65396: GO 65356
65398: POP
65399: POP
// if not weapon then
65400: LD_VAR 0 8
65404: NOT
65405: IFFALSE 65409
// continue ;
65407: GO 65305
// for k in factories do
65409: LD_ADDR_VAR 0 6
65413: PUSH
65414: LD_VAR 0 2
65418: PUSH
65419: FOR_IN
65420: IFFALSE 65485
// begin weapons := AvailableWeaponList ( k ) ;
65422: LD_ADDR_VAR 0 9
65426: PUSH
65427: LD_VAR 0 6
65431: PPUSH
65432: CALL_OW 478
65436: ST_TO_ADDR
// if not weapons then
65437: LD_VAR 0 9
65441: NOT
65442: IFFALSE 65446
// continue ;
65444: GO 65419
// if weapon in weapons then
65446: LD_VAR 0 8
65450: PUSH
65451: LD_VAR 0 9
65455: IN
65456: IFFALSE 65483
// begin result := [ i , weapon ] ;
65458: LD_ADDR_VAR 0 3
65462: PUSH
65463: LD_VAR 0 4
65467: PUSH
65468: LD_VAR 0 8
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: ST_TO_ADDR
// exit ;
65477: POP
65478: POP
65479: POP
65480: POP
65481: GO 65491
// end ; end ;
65483: GO 65419
65485: POP
65486: POP
// end ;
65487: GO 65305
65489: POP
65490: POP
// end ;
65491: LD_VAR 0 3
65495: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65496: LD_INT 0
65498: PPUSH
// if not side or side > 8 then
65499: LD_VAR 0 3
65503: NOT
65504: PUSH
65505: LD_VAR 0 3
65509: PUSH
65510: LD_INT 8
65512: GREATER
65513: OR
65514: IFFALSE 65518
// exit ;
65516: GO 65577
// if not range then
65518: LD_VAR 0 4
65522: NOT
65523: IFFALSE 65534
// range := - 12 ;
65525: LD_ADDR_VAR 0 4
65529: PUSH
65530: LD_INT 12
65532: NEG
65533: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65534: LD_VAR 0 1
65538: PPUSH
65539: LD_VAR 0 2
65543: PPUSH
65544: LD_VAR 0 3
65548: PPUSH
65549: LD_VAR 0 4
65553: PPUSH
65554: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65558: LD_VAR 0 1
65562: PPUSH
65563: LD_VAR 0 2
65567: PPUSH
65568: LD_VAR 0 3
65572: PPUSH
65573: CALL_OW 331
// end ;
65577: LD_VAR 0 5
65581: RET
// export function Video ( mode ) ; begin
65582: LD_INT 0
65584: PPUSH
// ingame_video = mode ;
65585: LD_ADDR_OWVAR 52
65589: PUSH
65590: LD_VAR 0 1
65594: ST_TO_ADDR
// interface_hidden = mode ;
65595: LD_ADDR_OWVAR 54
65599: PUSH
65600: LD_VAR 0 1
65604: ST_TO_ADDR
// end ;
65605: LD_VAR 0 2
65609: RET
// export function Join ( array , element ) ; begin
65610: LD_INT 0
65612: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65613: LD_ADDR_VAR 0 3
65617: PUSH
65618: LD_VAR 0 1
65622: PPUSH
65623: LD_VAR 0 1
65627: PUSH
65628: LD_INT 1
65630: PLUS
65631: PPUSH
65632: LD_VAR 0 2
65636: PPUSH
65637: CALL_OW 1
65641: ST_TO_ADDR
// end ;
65642: LD_VAR 0 3
65646: RET
// export function JoinUnion ( array , element ) ; begin
65647: LD_INT 0
65649: PPUSH
// result := array union element ;
65650: LD_ADDR_VAR 0 3
65654: PUSH
65655: LD_VAR 0 1
65659: PUSH
65660: LD_VAR 0 2
65664: UNION
65665: ST_TO_ADDR
// end ;
65666: LD_VAR 0 3
65670: RET
// export function GetBehemoths ( side ) ; begin
65671: LD_INT 0
65673: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65674: LD_ADDR_VAR 0 2
65678: PUSH
65679: LD_INT 22
65681: PUSH
65682: LD_VAR 0 1
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 31
65693: PUSH
65694: LD_INT 25
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PPUSH
65705: CALL_OW 69
65709: ST_TO_ADDR
// end ;
65710: LD_VAR 0 2
65714: RET
// export function Shuffle ( array ) ; var i , index ; begin
65715: LD_INT 0
65717: PPUSH
65718: PPUSH
65719: PPUSH
// result := [ ] ;
65720: LD_ADDR_VAR 0 2
65724: PUSH
65725: EMPTY
65726: ST_TO_ADDR
// if not array then
65727: LD_VAR 0 1
65731: NOT
65732: IFFALSE 65736
// exit ;
65734: GO 65835
// Randomize ;
65736: CALL_OW 10
// for i = array downto 1 do
65740: LD_ADDR_VAR 0 3
65744: PUSH
65745: DOUBLE
65746: LD_VAR 0 1
65750: INC
65751: ST_TO_ADDR
65752: LD_INT 1
65754: PUSH
65755: FOR_DOWNTO
65756: IFFALSE 65833
// begin index := rand ( 1 , array ) ;
65758: LD_ADDR_VAR 0 4
65762: PUSH
65763: LD_INT 1
65765: PPUSH
65766: LD_VAR 0 1
65770: PPUSH
65771: CALL_OW 12
65775: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65776: LD_ADDR_VAR 0 2
65780: PUSH
65781: LD_VAR 0 2
65785: PPUSH
65786: LD_VAR 0 2
65790: PUSH
65791: LD_INT 1
65793: PLUS
65794: PPUSH
65795: LD_VAR 0 1
65799: PUSH
65800: LD_VAR 0 4
65804: ARRAY
65805: PPUSH
65806: CALL_OW 2
65810: ST_TO_ADDR
// array := Delete ( array , index ) ;
65811: LD_ADDR_VAR 0 1
65815: PUSH
65816: LD_VAR 0 1
65820: PPUSH
65821: LD_VAR 0 4
65825: PPUSH
65826: CALL_OW 3
65830: ST_TO_ADDR
// end ;
65831: GO 65755
65833: POP
65834: POP
// end ;
65835: LD_VAR 0 2
65839: RET
// export function GetBaseMaterials ( base ) ; begin
65840: LD_INT 0
65842: PPUSH
// result := [ 0 , 0 , 0 ] ;
65843: LD_ADDR_VAR 0 2
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: ST_TO_ADDR
// if not base then
65862: LD_VAR 0 1
65866: NOT
65867: IFFALSE 65871
// exit ;
65869: GO 65920
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65871: LD_ADDR_VAR 0 2
65875: PUSH
65876: LD_VAR 0 1
65880: PPUSH
65881: LD_INT 1
65883: PPUSH
65884: CALL_OW 275
65888: PUSH
65889: LD_VAR 0 1
65893: PPUSH
65894: LD_INT 2
65896: PPUSH
65897: CALL_OW 275
65901: PUSH
65902: LD_VAR 0 1
65906: PPUSH
65907: LD_INT 3
65909: PPUSH
65910: CALL_OW 275
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: LIST
65919: ST_TO_ADDR
// end ;
65920: LD_VAR 0 2
65924: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65925: LD_INT 0
65927: PPUSH
65928: PPUSH
// result := array ;
65929: LD_ADDR_VAR 0 3
65933: PUSH
65934: LD_VAR 0 1
65938: ST_TO_ADDR
// if size > 0 then
65939: LD_VAR 0 2
65943: PUSH
65944: LD_INT 0
65946: GREATER
65947: IFFALSE 65993
// for i := array downto size do
65949: LD_ADDR_VAR 0 4
65953: PUSH
65954: DOUBLE
65955: LD_VAR 0 1
65959: INC
65960: ST_TO_ADDR
65961: LD_VAR 0 2
65965: PUSH
65966: FOR_DOWNTO
65967: IFFALSE 65991
// result := Delete ( result , result ) ;
65969: LD_ADDR_VAR 0 3
65973: PUSH
65974: LD_VAR 0 3
65978: PPUSH
65979: LD_VAR 0 3
65983: PPUSH
65984: CALL_OW 3
65988: ST_TO_ADDR
65989: GO 65966
65991: POP
65992: POP
// end ;
65993: LD_VAR 0 3
65997: RET
// export function ComExit ( unit ) ; var tmp ; begin
65998: LD_INT 0
66000: PPUSH
66001: PPUSH
// if not IsInUnit ( unit ) then
66002: LD_VAR 0 1
66006: PPUSH
66007: CALL_OW 310
66011: NOT
66012: IFFALSE 66016
// exit ;
66014: GO 66076
// tmp := IsInUnit ( unit ) ;
66016: LD_ADDR_VAR 0 3
66020: PUSH
66021: LD_VAR 0 1
66025: PPUSH
66026: CALL_OW 310
66030: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66031: LD_VAR 0 3
66035: PPUSH
66036: CALL_OW 247
66040: PUSH
66041: LD_INT 2
66043: EQUAL
66044: IFFALSE 66057
// ComExitVehicle ( unit ) else
66046: LD_VAR 0 1
66050: PPUSH
66051: CALL_OW 121
66055: GO 66066
// ComExitBuilding ( unit ) ;
66057: LD_VAR 0 1
66061: PPUSH
66062: CALL_OW 122
// result := tmp ;
66066: LD_ADDR_VAR 0 2
66070: PUSH
66071: LD_VAR 0 3
66075: ST_TO_ADDR
// end ;
66076: LD_VAR 0 2
66080: RET
// export function ComExitAll ( units ) ; var i ; begin
66081: LD_INT 0
66083: PPUSH
66084: PPUSH
// if not units then
66085: LD_VAR 0 1
66089: NOT
66090: IFFALSE 66094
// exit ;
66092: GO 66120
// for i in units do
66094: LD_ADDR_VAR 0 3
66098: PUSH
66099: LD_VAR 0 1
66103: PUSH
66104: FOR_IN
66105: IFFALSE 66118
// ComExit ( i ) ;
66107: LD_VAR 0 3
66111: PPUSH
66112: CALL 65998 0 1
66116: GO 66104
66118: POP
66119: POP
// end ;
66120: LD_VAR 0 2
66124: RET
// export function ResetHc ; begin
66125: LD_INT 0
66127: PPUSH
// InitHc ;
66128: CALL_OW 19
// hc_importance := 0 ;
66132: LD_ADDR_OWVAR 32
66136: PUSH
66137: LD_INT 0
66139: ST_TO_ADDR
// end ;
66140: LD_VAR 0 1
66144: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66145: LD_INT 0
66147: PPUSH
66148: PPUSH
66149: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66150: LD_ADDR_VAR 0 6
66154: PUSH
66155: LD_VAR 0 1
66159: PUSH
66160: LD_VAR 0 3
66164: PLUS
66165: PUSH
66166: LD_INT 2
66168: DIV
66169: ST_TO_ADDR
// if _x < 0 then
66170: LD_VAR 0 6
66174: PUSH
66175: LD_INT 0
66177: LESS
66178: IFFALSE 66195
// _x := _x * - 1 ;
66180: LD_ADDR_VAR 0 6
66184: PUSH
66185: LD_VAR 0 6
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: MUL
66194: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66195: LD_ADDR_VAR 0 7
66199: PUSH
66200: LD_VAR 0 2
66204: PUSH
66205: LD_VAR 0 4
66209: PLUS
66210: PUSH
66211: LD_INT 2
66213: DIV
66214: ST_TO_ADDR
// if _y < 0 then
66215: LD_VAR 0 7
66219: PUSH
66220: LD_INT 0
66222: LESS
66223: IFFALSE 66240
// _y := _y * - 1 ;
66225: LD_ADDR_VAR 0 7
66229: PUSH
66230: LD_VAR 0 7
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: MUL
66239: ST_TO_ADDR
// result := [ _x , _y ] ;
66240: LD_ADDR_VAR 0 5
66244: PUSH
66245: LD_VAR 0 6
66249: PUSH
66250: LD_VAR 0 7
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: ST_TO_ADDR
// end ;
66259: LD_VAR 0 5
66263: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66264: LD_INT 0
66266: PPUSH
66267: PPUSH
66268: PPUSH
66269: PPUSH
// task := GetTaskList ( unit ) ;
66270: LD_ADDR_VAR 0 7
66274: PUSH
66275: LD_VAR 0 1
66279: PPUSH
66280: CALL_OW 437
66284: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66285: LD_VAR 0 7
66289: NOT
66290: PUSH
66291: LD_VAR 0 1
66295: PPUSH
66296: LD_VAR 0 2
66300: PPUSH
66301: CALL_OW 308
66305: NOT
66306: AND
66307: IFFALSE 66311
// exit ;
66309: GO 66429
// if IsInArea ( unit , area ) then
66311: LD_VAR 0 1
66315: PPUSH
66316: LD_VAR 0 2
66320: PPUSH
66321: CALL_OW 308
66325: IFFALSE 66343
// begin ComMoveToArea ( unit , goAway ) ;
66327: LD_VAR 0 1
66331: PPUSH
66332: LD_VAR 0 3
66336: PPUSH
66337: CALL_OW 113
// exit ;
66341: GO 66429
// end ; if task [ 1 ] [ 1 ] <> M then
66343: LD_VAR 0 7
66347: PUSH
66348: LD_INT 1
66350: ARRAY
66351: PUSH
66352: LD_INT 1
66354: ARRAY
66355: PUSH
66356: LD_STRING M
66358: NONEQUAL
66359: IFFALSE 66363
// exit ;
66361: GO 66429
// x := task [ 1 ] [ 2 ] ;
66363: LD_ADDR_VAR 0 5
66367: PUSH
66368: LD_VAR 0 7
66372: PUSH
66373: LD_INT 1
66375: ARRAY
66376: PUSH
66377: LD_INT 2
66379: ARRAY
66380: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66381: LD_ADDR_VAR 0 6
66385: PUSH
66386: LD_VAR 0 7
66390: PUSH
66391: LD_INT 1
66393: ARRAY
66394: PUSH
66395: LD_INT 3
66397: ARRAY
66398: ST_TO_ADDR
// if InArea ( x , y , area ) then
66399: LD_VAR 0 5
66403: PPUSH
66404: LD_VAR 0 6
66408: PPUSH
66409: LD_VAR 0 2
66413: PPUSH
66414: CALL_OW 309
66418: IFFALSE 66429
// ComStop ( unit ) ;
66420: LD_VAR 0 1
66424: PPUSH
66425: CALL_OW 141
// end ;
66429: LD_VAR 0 4
66433: RET
// export function Abs ( value ) ; begin
66434: LD_INT 0
66436: PPUSH
// result := value ;
66437: LD_ADDR_VAR 0 2
66441: PUSH
66442: LD_VAR 0 1
66446: ST_TO_ADDR
// if value < 0 then
66447: LD_VAR 0 1
66451: PUSH
66452: LD_INT 0
66454: LESS
66455: IFFALSE 66472
// result := value * - 1 ;
66457: LD_ADDR_VAR 0 2
66461: PUSH
66462: LD_VAR 0 1
66466: PUSH
66467: LD_INT 1
66469: NEG
66470: MUL
66471: ST_TO_ADDR
// end ;
66472: LD_VAR 0 2
66476: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66477: LD_INT 0
66479: PPUSH
66480: PPUSH
66481: PPUSH
66482: PPUSH
66483: PPUSH
66484: PPUSH
66485: PPUSH
66486: PPUSH
// if not unit or not building then
66487: LD_VAR 0 1
66491: NOT
66492: PUSH
66493: LD_VAR 0 2
66497: NOT
66498: OR
66499: IFFALSE 66503
// exit ;
66501: GO 66729
// x := GetX ( building ) ;
66503: LD_ADDR_VAR 0 4
66507: PUSH
66508: LD_VAR 0 2
66512: PPUSH
66513: CALL_OW 250
66517: ST_TO_ADDR
// y := GetY ( building ) ;
66518: LD_ADDR_VAR 0 6
66522: PUSH
66523: LD_VAR 0 2
66527: PPUSH
66528: CALL_OW 251
66532: ST_TO_ADDR
// d := GetDir ( building ) ;
66533: LD_ADDR_VAR 0 8
66537: PUSH
66538: LD_VAR 0 2
66542: PPUSH
66543: CALL_OW 254
66547: ST_TO_ADDR
// r := 4 ;
66548: LD_ADDR_VAR 0 9
66552: PUSH
66553: LD_INT 4
66555: ST_TO_ADDR
// for i := 1 to 5 do
66556: LD_ADDR_VAR 0 10
66560: PUSH
66561: DOUBLE
66562: LD_INT 1
66564: DEC
66565: ST_TO_ADDR
66566: LD_INT 5
66568: PUSH
66569: FOR_TO
66570: IFFALSE 66727
// begin _x := ShiftX ( x , d , r + i ) ;
66572: LD_ADDR_VAR 0 5
66576: PUSH
66577: LD_VAR 0 4
66581: PPUSH
66582: LD_VAR 0 8
66586: PPUSH
66587: LD_VAR 0 9
66591: PUSH
66592: LD_VAR 0 10
66596: PLUS
66597: PPUSH
66598: CALL_OW 272
66602: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66603: LD_ADDR_VAR 0 7
66607: PUSH
66608: LD_VAR 0 6
66612: PPUSH
66613: LD_VAR 0 8
66617: PPUSH
66618: LD_VAR 0 9
66622: PUSH
66623: LD_VAR 0 10
66627: PLUS
66628: PPUSH
66629: CALL_OW 273
66633: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66634: LD_VAR 0 5
66638: PPUSH
66639: LD_VAR 0 7
66643: PPUSH
66644: CALL_OW 488
66648: PUSH
66649: LD_VAR 0 5
66653: PPUSH
66654: LD_VAR 0 7
66658: PPUSH
66659: CALL_OW 428
66663: PPUSH
66664: CALL_OW 247
66668: PUSH
66669: LD_INT 3
66671: PUSH
66672: LD_INT 2
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: IN
66679: NOT
66680: AND
66681: IFFALSE 66725
// begin ComMoveXY ( unit , _x , _y ) ;
66683: LD_VAR 0 1
66687: PPUSH
66688: LD_VAR 0 5
66692: PPUSH
66693: LD_VAR 0 7
66697: PPUSH
66698: CALL_OW 111
// result := [ _x , _y ] ;
66702: LD_ADDR_VAR 0 3
66706: PUSH
66707: LD_VAR 0 5
66711: PUSH
66712: LD_VAR 0 7
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: ST_TO_ADDR
// exit ;
66721: POP
66722: POP
66723: GO 66729
// end ; end ;
66725: GO 66569
66727: POP
66728: POP
// end ;
66729: LD_VAR 0 3
66733: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66734: LD_INT 0
66736: PPUSH
66737: PPUSH
66738: PPUSH
// result := 0 ;
66739: LD_ADDR_VAR 0 3
66743: PUSH
66744: LD_INT 0
66746: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66747: LD_VAR 0 1
66751: PUSH
66752: LD_INT 0
66754: LESS
66755: PUSH
66756: LD_VAR 0 1
66760: PUSH
66761: LD_INT 8
66763: GREATER
66764: OR
66765: PUSH
66766: LD_VAR 0 2
66770: PUSH
66771: LD_INT 0
66773: LESS
66774: OR
66775: PUSH
66776: LD_VAR 0 2
66780: PUSH
66781: LD_INT 8
66783: GREATER
66784: OR
66785: IFFALSE 66789
// exit ;
66787: GO 66864
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66789: LD_ADDR_VAR 0 4
66793: PUSH
66794: LD_INT 22
66796: PUSH
66797: LD_VAR 0 2
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PPUSH
66806: CALL_OW 69
66810: PUSH
66811: FOR_IN
66812: IFFALSE 66862
// begin un := UnitShoot ( i ) ;
66814: LD_ADDR_VAR 0 5
66818: PUSH
66819: LD_VAR 0 4
66823: PPUSH
66824: CALL_OW 504
66828: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66829: LD_VAR 0 5
66833: PPUSH
66834: CALL_OW 255
66838: PUSH
66839: LD_VAR 0 1
66843: EQUAL
66844: IFFALSE 66860
// begin result := un ;
66846: LD_ADDR_VAR 0 3
66850: PUSH
66851: LD_VAR 0 5
66855: ST_TO_ADDR
// exit ;
66856: POP
66857: POP
66858: GO 66864
// end ; end ;
66860: GO 66811
66862: POP
66863: POP
// end ;
66864: LD_VAR 0 3
66868: RET
// export function GetCargoBay ( units ) ; begin
66869: LD_INT 0
66871: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66872: LD_ADDR_VAR 0 2
66876: PUSH
66877: LD_VAR 0 1
66881: PPUSH
66882: LD_INT 2
66884: PUSH
66885: LD_INT 34
66887: PUSH
66888: LD_INT 12
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 34
66897: PUSH
66898: LD_INT 51
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 34
66907: PUSH
66908: LD_INT 32
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 34
66917: PUSH
66918: LD_EXP 22
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: PPUSH
66934: CALL_OW 72
66938: ST_TO_ADDR
// end ; end_of_file
66939: LD_VAR 0 2
66943: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66944: LD_VAR 0 1
66948: PUSH
66949: LD_INT 200
66951: DOUBLE
66952: GREATEREQUAL
66953: IFFALSE 66961
66955: LD_INT 299
66957: DOUBLE
66958: LESSEQUAL
66959: IFTRUE 66963
66961: GO 66995
66963: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66964: LD_VAR 0 1
66968: PPUSH
66969: LD_VAR 0 2
66973: PPUSH
66974: LD_VAR 0 3
66978: PPUSH
66979: LD_VAR 0 4
66983: PPUSH
66984: LD_VAR 0 5
66988: PPUSH
66989: CALL 25405 0 5
66993: GO 67072
66995: LD_INT 300
66997: DOUBLE
66998: GREATEREQUAL
66999: IFFALSE 67007
67001: LD_INT 399
67003: DOUBLE
67004: LESSEQUAL
67005: IFTRUE 67009
67007: GO 67071
67009: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67010: LD_VAR 0 1
67014: PPUSH
67015: LD_VAR 0 2
67019: PPUSH
67020: LD_VAR 0 3
67024: PPUSH
67025: LD_VAR 0 4
67029: PPUSH
67030: LD_VAR 0 5
67034: PPUSH
67035: LD_VAR 0 6
67039: PPUSH
67040: LD_VAR 0 7
67044: PPUSH
67045: LD_VAR 0 8
67049: PPUSH
67050: LD_VAR 0 9
67054: PPUSH
67055: LD_VAR 0 10
67059: PPUSH
67060: LD_VAR 0 11
67064: PPUSH
67065: CALL 23293 0 11
67069: GO 67072
67071: POP
// end ;
67072: PPOPN 11
67074: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67075: LD_VAR 0 1
67079: PPUSH
67080: LD_VAR 0 2
67084: PPUSH
67085: LD_VAR 0 3
67089: PPUSH
67090: LD_VAR 0 4
67094: PPUSH
67095: LD_VAR 0 5
67099: PPUSH
67100: CALL 25387 0 5
// end ; end_of_file
67104: PPOPN 5
67106: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67107: LD_VAR 0 1
67111: PPUSH
67112: LD_VAR 0 2
67116: PPUSH
67117: LD_VAR 0 3
67121: PPUSH
67122: LD_VAR 0 4
67126: PPUSH
67127: LD_VAR 0 5
67131: PPUSH
67132: LD_VAR 0 6
67136: PPUSH
67137: CALL 12101 0 6
// end ;
67141: PPOPN 6
67143: END
