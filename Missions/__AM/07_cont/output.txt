// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 253 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1531 0 0
// PrepareRussians ;
  27: CALL 4541 0 0
// PrepareAmericans ;
  31: CALL 3411 0 0
// Action ;
  35: CALL 8421 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: EMPTY
  94: LIST
  95: LIST
  96: LIST
  97: PUSH
  98: LD_OWVAR 67
 102: ARRAY
 103: PUSH
 104: LD_INT 79800
 106: PUSH
 107: LD_INT 73500
 109: PUSH
 110: LD_INT 67200
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: PUSH
 118: LD_OWVAR 67
 122: ARRAY
 123: PUSH
 124: LD_INT 92400
 126: PUSH
 127: LD_INT 86100
 129: PUSH
 130: LD_INT 79800
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_OWVAR 67
 142: ARRAY
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// can_end := false ;
 149: LD_ADDR_EXP 6
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// must_end := false ;
 157: LD_ADDR_EXP 7
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// kill_counter := 0 ;
 165: LD_ADDR_EXP 8
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end ;
 173: LD_VAR 0 1
 177: RET
// every 0 0$01 trigger not debug do
 178: LD_EXP 1
 182: NOT
 183: IFFALSE 252
 185: GO 187
 187: DISABLE
// begin enable ;
 188: ENABLE
// if not must_end then
 189: LD_EXP 7
 193: NOT
 194: IFFALSE 215
// display_strings := [ #Am07-1 , tick ] else
 196: LD_ADDR_OWVAR 47
 200: PUSH
 201: LD_STRING #Am07-1
 203: PUSH
 204: LD_OWVAR 1
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: ST_TO_ADDR
 213: GO 252
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 215: LD_ADDR_OWVAR 47
 219: PUSH
 220: LD_STRING #Am07-1
 222: PUSH
 223: LD_OWVAR 1
 227: PUSH
 228: LD_STRING #Am07-2
 230: PUSH
 231: LD_EXP 5
 235: PUSH
 236: LD_INT 3
 238: ARRAY
 239: PUSH
 240: LD_OWVAR 1
 244: MINUS
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: ST_TO_ADDR
// end ;
 252: END
// function DebugMode ; var i ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
// if not debug then
 257: LD_EXP 1
 261: NOT
 262: IFFALSE 266
// exit ;
 264: GO 273
// FogOff ( 1 ) ;
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 344
// end ;
 273: LD_VAR 0 1
 277: RET
// every 3 trigger debug do var i , filter ;
 278: LD_EXP 1
 282: IFFALSE 371
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
// begin enable ;
 291: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 292: LD_ADDR_VAR 0 2
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 3
 309: PUSH
 310: LD_INT 24
 312: PUSH
 313: LD_INT 500
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: ST_TO_ADDR
// if not filter then
 333: LD_VAR 0 2
 337: NOT
 338: IFFALSE 342
// exit ;
 340: GO 371
// for i in filter do
 342: LD_ADDR_VAR 0 1
 346: PUSH
 347: LD_VAR 0 2
 351: PUSH
 352: FOR_IN
 353: IFFALSE 369
// SetLives ( i , 1000 ) ;
 355: LD_VAR 0 1
 359: PPUSH
 360: LD_INT 1000
 362: PPUSH
 363: CALL_OW 234
 367: GO 352
 369: POP
 370: POP
// end ;
 371: PPOPN 2
 373: END
// every 0 0$1 trigger kill_counter >= 20 do
 374: LD_EXP 8
 378: PUSH
 379: LD_INT 20
 381: GREATEREQUAL
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 387: LD_STRING ACH_HITMAN
 389: PPUSH
 390: CALL_OW 543
 394: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 395: LD_INT 22
 397: PUSH
 398: LD_INT 1
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: LD_INT 23
 407: PUSH
 408: LD_INT 3
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 2
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PPUSH
 430: CALL_OW 69
 434: PUSH
 435: LD_INT 3
 437: GREATEREQUAL
 438: IFFALSE 450
 440: GO 442
 442: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 443: LD_STRING ACH_TANKACE
 445: PPUSH
 446: CALL_OW 543
 450: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 451: LD_INT 2
 453: PUSH
 454: LD_INT 30
 456: PUSH
 457: LD_INT 0
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: LD_INT 0
 486: EQUAL
 487: IFFALSE 499
 489: GO 491
 491: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 492: LD_STRING ACH_COMMANDO
 494: PPUSH
 495: CALL_OW 543
 499: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 500: LD_INT 0
 502: PPUSH
// uc_side := side ;
 503: LD_ADDR_OWVAR 20
 507: PUSH
 508: LD_VAR 0 1
 512: ST_TO_ADDR
// uc_nation := nation ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_VAR 0 2
 522: ST_TO_ADDR
// vc_chassis := chassis ;
 523: LD_ADDR_OWVAR 37
 527: PUSH
 528: LD_VAR 0 3
 532: ST_TO_ADDR
// vc_engine := engine ;
 533: LD_ADDR_OWVAR 39
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// vc_control := control ;
 543: LD_ADDR_OWVAR 38
 547: PUSH
 548: LD_VAR 0 5
 552: ST_TO_ADDR
// vc_weapon := weapon ;
 553: LD_ADDR_OWVAR 40
 557: PUSH
 558: LD_VAR 0 6
 562: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 563: LD_ADDR_OWVAR 41
 567: PUSH
 568: LD_VAR 0 7
 572: ST_TO_ADDR
// result := CreateVehicle ;
 573: LD_ADDR_VAR 0 8
 577: PUSH
 578: CALL_OW 45
 582: ST_TO_ADDR
// end ;
 583: LD_VAR 0 8
 587: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 588: LD_INT 0
 590: PPUSH
 591: PPUSH
 592: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_INT 22
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: LD_INT 21
 610: PUSH
 611: LD_INT 1
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: PUSH
 618: LD_INT 50
 620: PUSH
 621: EMPTY
 622: LIST
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: LIST
 628: PPUSH
 629: CALL_OW 69
 633: PUSH
 634: LD_EXP 9
 638: PUSH
 639: LD_EXP 10
 643: PUSH
 644: LD_EXP 11
 648: PUSH
 649: LD_EXP 12
 653: PUSH
 654: LD_EXP 13
 658: PUSH
 659: LD_EXP 14
 663: PUSH
 664: LD_EXP 15
 668: PUSH
 669: LD_EXP 16
 673: PUSH
 674: LD_EXP 18
 678: PUSH
 679: LD_EXP 17
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: DIFF
 696: ST_TO_ADDR
// if not filter then
 697: LD_VAR 0 4
 701: NOT
 702: IFFALSE 706
// exit ;
 704: GO 733
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: LD_VAR 0 4
 715: PPUSH
 716: LD_INT 26
 718: PUSH
 719: LD_VAR 0 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PPUSH
 728: CALL_OW 72
 732: ST_TO_ADDR
// end ;
 733: LD_VAR 0 2
 737: RET
// export function SayX ( units , ident ) ; var i ; begin
 738: LD_INT 0
 740: PPUSH
 741: PPUSH
// result := false ;
 742: LD_ADDR_VAR 0 3
 746: PUSH
 747: LD_INT 0
 749: ST_TO_ADDR
// if not units then
 750: LD_VAR 0 1
 754: NOT
 755: IFFALSE 759
// exit ;
 757: GO 813
// for i in units do
 759: LD_ADDR_VAR 0 4
 763: PUSH
 764: LD_VAR 0 1
 768: PUSH
 769: FOR_IN
 770: IFFALSE 811
// if IsOk ( i ) then
 772: LD_VAR 0 4
 776: PPUSH
 777: CALL_OW 302
 781: IFFALSE 809
// begin Say ( i , ident ) ;
 783: LD_VAR 0 4
 787: PPUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: CALL_OW 88
// result := i ;
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_VAR 0 4
 806: ST_TO_ADDR
// break ;
 807: GO 811
// end ;
 809: GO 769
 811: POP
 812: POP
// end ;
 813: LD_VAR 0 3
 817: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 818: LD_INT 0
 820: PPUSH
 821: PPUSH
 822: PPUSH
 823: PPUSH
 824: PPUSH
// if not un or not IsOk ( un ) then
 825: LD_VAR 0 1
 829: NOT
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 302
 840: NOT
 841: OR
 842: IFFALSE 846
// exit ;
 844: GO 1136
// side := GetSide ( un ) ;
 846: LD_ADDR_VAR 0 9
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 255
 860: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 861: LD_ADDR_VAR 0 7
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_VAR 0 9
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: PUSH
 878: LD_INT 30
 880: PUSH
 881: LD_INT 32
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 50
 890: PUSH
 891: EMPTY
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 69
 910: PUSH
 911: LD_VAR 0 2
 915: DIFF
 916: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 917: LD_ADDR_VAR 0 8
 921: PUSH
 922: LD_INT 22
 924: PUSH
 925: LD_VAR 0 9
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 30
 936: PUSH
 937: LD_INT 5
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: CALL_OW 69
 952: ST_TO_ADDR
// if not filter then
 953: LD_VAR 0 7
 957: NOT
 958: IFFALSE 1048
// begin ComMoveXY ( un , x , y ) ;
 960: LD_VAR 0 1
 964: PPUSH
 965: LD_VAR 0 3
 969: PPUSH
 970: LD_VAR 0 4
 974: PPUSH
 975: CALL_OW 111
// if barracks then
 979: LD_VAR 0 8
 983: IFFALSE 1046
// for i in barracks do
 985: LD_ADDR_VAR 0 6
 989: PUSH
 990: LD_VAR 0 8
 994: PUSH
 995: FOR_IN
 996: IFFALSE 1044
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
 998: LD_VAR 0 6
1002: PPUSH
1003: CALL_OW 313
1007: PUSH
1008: LD_INT 6
1010: LESS
1011: PUSH
1012: LD_VAR 0 6
1016: PPUSH
1017: CALL_OW 302
1021: AND
1022: IFFALSE 1042
// begin AddComEnterUnit ( un , i ) ;
1024: LD_VAR 0 1
1028: PPUSH
1029: LD_VAR 0 6
1033: PPUSH
1034: CALL_OW 180
// exit ;
1038: POP
1039: POP
1040: GO 1136
// end ; end ;
1042: GO 995
1044: POP
1045: POP
// end else
1046: GO 1136
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1048: LD_ADDR_VAR 0 7
1052: PUSH
1053: LD_VAR 0 1
1057: PPUSH
1058: LD_VAR 0 7
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL 34648 0 4
1073: ST_TO_ADDR
// for i in filter do
1074: LD_ADDR_VAR 0 6
1078: PUSH
1079: LD_VAR 0 7
1083: PUSH
1084: FOR_IN
1085: IFFALSE 1134
// if GetTag ( i ) <> 7 then
1087: LD_VAR 0 6
1091: PPUSH
1092: CALL_OW 110
1096: PUSH
1097: LD_INT 7
1099: NONEQUAL
1100: IFFALSE 1132
// begin ComEnterUnit ( un , i ) ;
1102: LD_VAR 0 1
1106: PPUSH
1107: LD_VAR 0 6
1111: PPUSH
1112: CALL_OW 120
// SetTag ( i , 7 ) ;
1116: LD_VAR 0 6
1120: PPUSH
1121: LD_INT 7
1123: PPUSH
1124: CALL_OW 109
// exit ;
1128: POP
1129: POP
1130: GO 1136
// end ;
1132: GO 1084
1134: POP
1135: POP
// end ; end ;
1136: LD_VAR 0 5
1140: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1141: LD_INT 0
1143: PPUSH
1144: PPUSH
1145: PPUSH
// if not base then
1146: LD_VAR 0 1
1150: NOT
1151: IFFALSE 1155
// exit ;
1153: GO 1213
// tmp := GetEnergy ( GetBase ( base ) ) ;
1155: LD_ADDR_VAR 0 4
1159: PUSH
1160: LD_VAR 0 1
1164: PPUSH
1165: CALL_OW 274
1169: PPUSH
1170: CALL_OW 278
1174: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1175: LD_VAR 0 4
1179: PUSH
1180: LD_INT 1
1182: ARRAY
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 4
1191: ARRAY
1192: GREATER
1193: IFFALSE 1205
// result := true else
1195: LD_ADDR_VAR 0 2
1199: PUSH
1200: LD_INT 1
1202: ST_TO_ADDR
1203: GO 1213
// result := false ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_INT 0
1212: ST_TO_ADDR
// end ;
1213: LD_VAR 0 2
1217: RET
// export function FilterPeople ( side ) ; begin
1218: LD_INT 0
1220: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_VAR 0 1
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 21
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PPUSH
1252: CALL_OW 69
1256: ST_TO_ADDR
// end ;
1257: LD_VAR 0 2
1261: RET
// export function FilterDrivers ( side ) ; begin
1262: LD_INT 0
1264: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_INT 22
1272: PUSH
1273: LD_VAR 0 1
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 3
1284: PUSH
1285: LD_INT 56
1287: PUSH
1288: EMPTY
1289: LIST
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: ST_TO_ADDR
// end ;
1304: LD_VAR 0 2
1308: RET
// export function FilterPeopleArea ( side , area ) ; begin
1309: LD_INT 0
1311: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1312: LD_ADDR_VAR 0 3
1316: PUSH
1317: LD_VAR 0 2
1321: PPUSH
1322: LD_INT 22
1324: PUSH
1325: LD_INT 1
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: LD_INT 21
1334: PUSH
1335: LD_INT 1
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 70
1350: ST_TO_ADDR
// end ;
1351: LD_VAR 0 3
1355: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1356: LD_INT 0
1358: PPUSH
1359: PPUSH
1360: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1361: LD_ADDR_VAR 0 5
1365: PUSH
1366: LD_VAR 0 2
1370: PPUSH
1371: LD_INT 22
1373: PUSH
1374: LD_INT 1
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 21
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 58
1396: PUSH
1397: EMPTY
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: PPUSH
1409: CALL_OW 70
1413: ST_TO_ADDR
// result := [ ] ;
1414: LD_ADDR_VAR 0 3
1418: PUSH
1419: EMPTY
1420: ST_TO_ADDR
// if not tmp then
1421: LD_VAR 0 5
1425: NOT
1426: IFFALSE 1430
// exit ;
1428: GO 1482
// for i in tmp do
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: FOR_IN
1441: IFFALSE 1466
// result := result union IsDrivenBy ( i ) ;
1443: LD_ADDR_VAR 0 3
1447: PUSH
1448: LD_VAR 0 3
1452: PUSH
1453: LD_VAR 0 4
1457: PPUSH
1458: CALL_OW 311
1462: UNION
1463: ST_TO_ADDR
1464: GO 1440
1466: POP
1467: POP
// result := result diff 0 ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_VAR 0 3
1477: PUSH
1478: LD_INT 0
1480: DIFF
1481: ST_TO_ADDR
// end ;
1482: LD_VAR 0 3
1486: RET
// export function FilterBuildings ( side ) ; begin
1487: LD_INT 0
1489: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: LD_INT 22
1497: PUSH
1498: LD_VAR 0 1
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 3
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PPUSH
1521: CALL_OW 69
1525: ST_TO_ADDR
// end ;
1526: LD_VAR 0 2
1530: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1531: LD_INT 0
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side = 0 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 0
1544: ST_TO_ADDR
// uc_nation = 0 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 0
1552: ST_TO_ADDR
// nat_area := wildArea ;
1553: LD_ADDR_VAR 0 4
1557: PUSH
1558: LD_INT 3
1560: ST_TO_ADDR
// InitHc ;
1561: CALL_OW 19
// for i = 1 to 4 do
1565: LD_ADDR_VAR 0 2
1569: PUSH
1570: DOUBLE
1571: LD_INT 1
1573: DEC
1574: ST_TO_ADDR
1575: LD_INT 4
1577: PUSH
1578: FOR_TO
1579: IFFALSE 1634
// begin hc_class = 18 ;
1581: LD_ADDR_OWVAR 28
1585: PUSH
1586: LD_INT 18
1588: ST_TO_ADDR
// hc_gallery =  ;
1589: LD_ADDR_OWVAR 33
1593: PUSH
1594: LD_STRING 
1596: ST_TO_ADDR
// hc_face_number = 1 ;
1597: LD_ADDR_OWVAR 34
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// animal := CreateHuman ;
1605: LD_ADDR_VAR 0 3
1609: PUSH
1610: CALL_OW 44
1614: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1615: LD_VAR 0 3
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
// end ;
1632: GO 1578
1634: POP
1635: POP
// for i = 1 to 6 do
1636: LD_ADDR_VAR 0 2
1640: PUSH
1641: DOUBLE
1642: LD_INT 1
1644: DEC
1645: ST_TO_ADDR
1646: LD_INT 6
1648: PUSH
1649: FOR_TO
1650: IFFALSE 1721
// begin hc_class = class_tiger ;
1652: LD_ADDR_OWVAR 28
1656: PUSH
1657: LD_INT 14
1659: ST_TO_ADDR
// hc_gallery =  ;
1660: LD_ADDR_OWVAR 33
1664: PUSH
1665: LD_STRING 
1667: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1668: LD_ADDR_OWVAR 35
1672: PUSH
1673: LD_INT 0
1675: PPUSH
1676: LD_INT 10
1678: PPUSH
1679: CALL_OW 12
1683: ST_TO_ADDR
// hc_face_number = 3 ;
1684: LD_ADDR_OWVAR 34
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// animal := CreateHuman ;
1692: LD_ADDR_VAR 0 3
1696: PUSH
1697: CALL_OW 44
1701: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_VAR 0 4
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL_OW 49
// end ;
1719: GO 1649
1721: POP
1722: POP
// for i = 1 to 2 do
1723: LD_ADDR_VAR 0 2
1727: PUSH
1728: DOUBLE
1729: LD_INT 1
1731: DEC
1732: ST_TO_ADDR
1733: LD_INT 2
1735: PUSH
1736: FOR_TO
1737: IFFALSE 1800
// begin hc_class = 21 ;
1739: LD_ADDR_OWVAR 28
1743: PUSH
1744: LD_INT 21
1746: ST_TO_ADDR
// hc_gallery =  ;
1747: LD_ADDR_OWVAR 33
1751: PUSH
1752: LD_STRING 
1754: ST_TO_ADDR
// hc_agressivity = 0 ;
1755: LD_ADDR_OWVAR 35
1759: PUSH
1760: LD_INT 0
1762: ST_TO_ADDR
// hc_face_number = 5 ;
1763: LD_ADDR_OWVAR 34
1767: PUSH
1768: LD_INT 5
1770: ST_TO_ADDR
// animal := CreateHuman ;
1771: LD_ADDR_VAR 0 3
1775: PUSH
1776: CALL_OW 44
1780: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1781: LD_VAR 0 3
1785: PPUSH
1786: LD_VAR 0 4
1790: PPUSH
1791: LD_INT 0
1793: PPUSH
1794: CALL_OW 49
// end ;
1798: GO 1736
1800: POP
1801: POP
// for i = 1 to 6 do
1802: LD_ADDR_VAR 0 2
1806: PUSH
1807: DOUBLE
1808: LD_INT 1
1810: DEC
1811: ST_TO_ADDR
1812: LD_INT 6
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1871
// begin hc_class = 13 ;
1818: LD_ADDR_OWVAR 28
1822: PUSH
1823: LD_INT 13
1825: ST_TO_ADDR
// hc_gallery =  ;
1826: LD_ADDR_OWVAR 33
1830: PUSH
1831: LD_STRING 
1833: ST_TO_ADDR
// hc_face_number = 4 ;
1834: LD_ADDR_OWVAR 34
1838: PUSH
1839: LD_INT 4
1841: ST_TO_ADDR
// animal := CreateHuman ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 44
1851: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_VAR 0 4
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL_OW 49
// end ;
1869: GO 1815
1871: POP
1872: POP
// for i = 1 to 2 do
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PUSH
1886: FOR_TO
1887: IFFALSE 1946
// begin hc_class = 20 ;
1889: LD_ADDR_OWVAR 28
1893: PUSH
1894: LD_INT 20
1896: ST_TO_ADDR
// hc_gallery =  ;
1897: LD_ADDR_OWVAR 33
1901: PUSH
1902: LD_STRING 
1904: ST_TO_ADDR
// hc_face_number = 2 ;
1905: LD_ADDR_OWVAR 34
1909: PUSH
1910: LD_INT 2
1912: ST_TO_ADDR
// animal := CreateHuman ;
1913: LD_ADDR_VAR 0 3
1917: PUSH
1918: CALL_OW 44
1922: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1923: LD_VAR 0 3
1927: PPUSH
1928: LD_INT 101
1930: PPUSH
1931: LD_INT 37
1933: PPUSH
1934: LD_INT 3
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 50
// end ;
1944: GO 1886
1946: POP
1947: POP
// for i = 1 to 1 do
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: DOUBLE
1954: LD_INT 1
1956: DEC
1957: ST_TO_ADDR
1958: LD_INT 1
1960: PUSH
1961: FOR_TO
1962: IFFALSE 2009
// begin vc_chassis := 31 ;
1964: LD_ADDR_OWVAR 37
1968: PUSH
1969: LD_INT 31
1971: ST_TO_ADDR
// vc_control := control_rider ;
1972: LD_ADDR_OWVAR 38
1976: PUSH
1977: LD_INT 4
1979: ST_TO_ADDR
// animal := CreateVehicle ;
1980: LD_ADDR_VAR 0 3
1984: PUSH
1985: CALL_OW 45
1989: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1990: LD_VAR 0 3
1994: PPUSH
1995: LD_VAR 0 4
1999: PPUSH
2000: LD_INT 0
2002: PPUSH
2003: CALL_OW 49
// end ;
2007: GO 1961
2009: POP
2010: POP
// end ;
2011: LD_VAR 0 1
2015: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2016: LD_INT 0
2018: PPUSH
2019: PPUSH
2020: PPUSH
2021: PPUSH
// result := [ ] ;
2022: LD_ADDR_VAR 0 2
2026: PUSH
2027: EMPTY
2028: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2029: LD_ADDR_VAR 0 4
2033: PUSH
2034: LD_INT 81
2036: PUSH
2037: LD_VAR 0 1
2041: PPUSH
2042: CALL_OW 255
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 91
2053: PUSH
2054: LD_VAR 0 1
2058: PUSH
2059: LD_INT 15
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 2
2069: PUSH
2070: LD_INT 30
2072: PUSH
2073: LD_INT 32
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 30
2082: PUSH
2083: LD_INT 33
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL_OW 69
2104: ST_TO_ADDR
// if not tmp then
2105: LD_VAR 0 4
2109: NOT
2110: IFFALSE 2114
// exit ;
2112: GO 2183
// for i in tmp do
2114: LD_ADDR_VAR 0 3
2118: PUSH
2119: LD_VAR 0 4
2123: PUSH
2124: FOR_IN
2125: IFFALSE 2181
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2127: LD_ADDR_VAR 0 5
2131: PUSH
2132: LD_VAR 0 3
2136: PPUSH
2137: CALL_OW 274
2141: PPUSH
2142: CALL_OW 278
2146: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2147: LD_VAR 0 5
2151: PUSH
2152: LD_INT 4
2154: ARRAY
2155: PUSH
2156: LD_VAR 0 5
2160: PUSH
2161: LD_INT 1
2163: ARRAY
2164: GREATER
2165: IFFALSE 2179
// begin result := i ;
2167: LD_ADDR_VAR 0 2
2171: PUSH
2172: LD_VAR 0 3
2176: ST_TO_ADDR
// break ;
2177: GO 2181
// end ; end ;
2179: GO 2124
2181: POP
2182: POP
// end ;
2183: LD_VAR 0 2
2187: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2188: LD_INT 0
2190: PPUSH
2191: PPUSH
2192: PPUSH
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
// result := false ;
2206: LD_ADDR_VAR 0 2
2210: PUSH
2211: LD_INT 0
2213: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2214: LD_VAR 0 1
2218: NOT
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: CALL_OW 266
2229: PUSH
2230: LD_INT 32
2232: PUSH
2233: LD_INT 33
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: IN
2240: NOT
2241: OR
2242: IFFALSE 2246
// exit ;
2244: GO 3406
// nat := GetNation ( tower ) ;
2246: LD_ADDR_VAR 0 11
2250: PUSH
2251: LD_VAR 0 1
2255: PPUSH
2256: CALL_OW 248
2260: ST_TO_ADDR
// side := GetSide ( tower ) ;
2261: LD_ADDR_VAR 0 15
2265: PUSH
2266: LD_VAR 0 1
2270: PPUSH
2271: CALL_OW 255
2275: ST_TO_ADDR
// x := GetX ( tower ) ;
2276: LD_ADDR_VAR 0 9
2280: PUSH
2281: LD_VAR 0 1
2285: PPUSH
2286: CALL_OW 250
2290: ST_TO_ADDR
// y := GetY ( tower ) ;
2291: LD_ADDR_VAR 0 10
2295: PUSH
2296: LD_VAR 0 1
2300: PPUSH
2301: CALL_OW 251
2305: ST_TO_ADDR
// if not x or not y then
2306: LD_VAR 0 9
2310: NOT
2311: PUSH
2312: LD_VAR 0 10
2316: NOT
2317: OR
2318: IFFALSE 2322
// exit ;
2320: GO 3406
// weapon := 0 ;
2322: LD_ADDR_VAR 0 17
2326: PUSH
2327: LD_INT 0
2329: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2330: LD_ADDR_VAR 0 16
2334: PUSH
2335: LD_INT 42
2337: PUSH
2338: LD_INT 43
2340: PUSH
2341: LD_INT 44
2343: PUSH
2344: LD_INT 46
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: ST_TO_ADDR
// if not fac_list then
2353: LD_VAR 0 16
2357: NOT
2358: IFFALSE 2362
// exit ;
2360: GO 3406
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_INT 4
2369: PUSH
2370: LD_INT 5
2372: PUSH
2373: LD_INT 9
2375: PUSH
2376: LD_INT 10
2378: PUSH
2379: LD_INT 6
2381: PUSH
2382: LD_INT 7
2384: PUSH
2385: LD_INT 11
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 27
2399: PUSH
2400: LD_INT 28
2402: PUSH
2403: LD_INT 26
2405: PUSH
2406: LD_INT 30
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 43
2417: PUSH
2418: LD_INT 44
2420: PUSH
2421: LD_INT 46
2423: PUSH
2424: LD_INT 45
2426: PUSH
2427: LD_INT 47
2429: PUSH
2430: LD_INT 49
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: PUSH
2446: LD_VAR 0 11
2450: ARRAY
2451: ST_TO_ADDR
// for i in list do
2452: LD_ADDR_VAR 0 7
2456: PUSH
2457: LD_VAR 0 4
2461: PUSH
2462: FOR_IN
2463: IFFALSE 2496
// if not i in fac_list then
2465: LD_VAR 0 7
2469: PUSH
2470: LD_VAR 0 16
2474: IN
2475: NOT
2476: IFFALSE 2494
// list := list diff i ;
2478: LD_ADDR_VAR 0 4
2482: PUSH
2483: LD_VAR 0 4
2487: PUSH
2488: LD_VAR 0 7
2492: DIFF
2493: ST_TO_ADDR
2494: GO 2462
2496: POP
2497: POP
// if not list then
2498: LD_VAR 0 4
2502: NOT
2503: IFFALSE 2507
// exit ;
2505: GO 3406
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2507: LD_VAR 0 11
2511: PUSH
2512: LD_INT 3
2514: EQUAL
2515: PUSH
2516: LD_INT 49
2518: PUSH
2519: LD_VAR 0 4
2523: IN
2524: AND
2525: PUSH
2526: LD_INT 31
2528: PPUSH
2529: LD_VAR 0 15
2533: PPUSH
2534: CALL_OW 321
2538: PUSH
2539: LD_INT 2
2541: EQUAL
2542: AND
2543: IFFALSE 2603
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2545: LD_INT 22
2547: PUSH
2548: LD_VAR 0 15
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 35
2559: PUSH
2560: LD_INT 49
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 91
2569: PUSH
2570: LD_VAR 0 1
2574: PUSH
2575: LD_INT 10
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 69
2592: NOT
2593: IFFALSE 2603
// weapon := ru_time_lapser ;
2595: LD_ADDR_VAR 0 17
2599: PUSH
2600: LD_INT 49
2602: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2603: LD_VAR 0 11
2607: PUSH
2608: LD_INT 1
2610: PUSH
2611: LD_INT 2
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: IN
2618: PUSH
2619: LD_INT 11
2621: PUSH
2622: LD_VAR 0 4
2626: IN
2627: PUSH
2628: LD_INT 30
2630: PUSH
2631: LD_VAR 0 4
2635: IN
2636: OR
2637: AND
2638: PUSH
2639: LD_INT 6
2641: PPUSH
2642: LD_VAR 0 15
2646: PPUSH
2647: CALL_OW 321
2651: PUSH
2652: LD_INT 2
2654: EQUAL
2655: AND
2656: IFFALSE 2821
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2658: LD_INT 22
2660: PUSH
2661: LD_VAR 0 15
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: LD_INT 2
2672: PUSH
2673: LD_INT 35
2675: PUSH
2676: LD_INT 11
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 35
2685: PUSH
2686: LD_INT 30
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 91
2700: PUSH
2701: LD_VAR 0 1
2705: PUSH
2706: LD_INT 18
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: LIST
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: PPUSH
2719: CALL_OW 69
2723: NOT
2724: PUSH
2725: LD_INT 22
2727: PUSH
2728: LD_VAR 0 15
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 2
2739: PUSH
2740: LD_INT 30
2742: PUSH
2743: LD_INT 32
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 30
2752: PUSH
2753: LD_INT 33
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: LIST
2764: PUSH
2765: LD_INT 91
2767: PUSH
2768: LD_VAR 0 1
2772: PUSH
2773: LD_INT 12
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: EMPTY
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: PUSH
2794: LD_INT 2
2796: GREATER
2797: AND
2798: IFFALSE 2821
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2800: LD_ADDR_VAR 0 17
2804: PUSH
2805: LD_INT 11
2807: PUSH
2808: LD_INT 30
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_VAR 0 11
2819: ARRAY
2820: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2821: LD_VAR 0 17
2825: NOT
2826: PUSH
2827: LD_INT 40
2829: PPUSH
2830: LD_VAR 0 15
2834: PPUSH
2835: CALL_OW 321
2839: PUSH
2840: LD_INT 2
2842: EQUAL
2843: AND
2844: PUSH
2845: LD_INT 7
2847: PUSH
2848: LD_VAR 0 4
2852: IN
2853: PUSH
2854: LD_INT 28
2856: PUSH
2857: LD_VAR 0 4
2861: IN
2862: OR
2863: PUSH
2864: LD_INT 45
2866: PUSH
2867: LD_VAR 0 4
2871: IN
2872: OR
2873: AND
2874: IFFALSE 3128
// begin hex := GetHexInfo ( x , y ) ;
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: LD_VAR 0 9
2885: PPUSH
2886: LD_VAR 0 10
2890: PPUSH
2891: CALL_OW 546
2895: ST_TO_ADDR
// if hex [ 1 ] then
2896: LD_VAR 0 3
2900: PUSH
2901: LD_INT 1
2903: ARRAY
2904: IFFALSE 2908
// exit ;
2906: GO 3406
// height := hex [ 2 ] ;
2908: LD_ADDR_VAR 0 14
2912: PUSH
2913: LD_VAR 0 3
2917: PUSH
2918: LD_INT 2
2920: ARRAY
2921: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2922: LD_ADDR_VAR 0 13
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: LD_INT 2
2932: PUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 5
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: ST_TO_ADDR
// for i in tmp do
2945: LD_ADDR_VAR 0 7
2949: PUSH
2950: LD_VAR 0 13
2954: PUSH
2955: FOR_IN
2956: IFFALSE 3126
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2958: LD_ADDR_VAR 0 8
2962: PUSH
2963: LD_VAR 0 9
2967: PPUSH
2968: LD_VAR 0 7
2972: PPUSH
2973: LD_INT 5
2975: PPUSH
2976: CALL_OW 272
2980: PUSH
2981: LD_VAR 0 10
2985: PPUSH
2986: LD_VAR 0 7
2990: PPUSH
2991: LD_INT 5
2993: PPUSH
2994: CALL_OW 273
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3003: LD_VAR 0 8
3007: PUSH
3008: LD_INT 1
3010: ARRAY
3011: PPUSH
3012: LD_VAR 0 8
3016: PUSH
3017: LD_INT 2
3019: ARRAY
3020: PPUSH
3021: CALL_OW 488
3025: IFFALSE 3124
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3027: LD_ADDR_VAR 0 3
3031: PUSH
3032: LD_VAR 0 8
3036: PUSH
3037: LD_INT 1
3039: ARRAY
3040: PPUSH
3041: LD_VAR 0 8
3045: PUSH
3046: LD_INT 2
3048: ARRAY
3049: PPUSH
3050: CALL_OW 546
3054: ST_TO_ADDR
// if hex [ 1 ] then
3055: LD_VAR 0 3
3059: PUSH
3060: LD_INT 1
3062: ARRAY
3063: IFFALSE 3067
// continue ;
3065: GO 2955
// h := hex [ 2 ] ;
3067: LD_ADDR_VAR 0 12
3071: PUSH
3072: LD_VAR 0 3
3076: PUSH
3077: LD_INT 2
3079: ARRAY
3080: ST_TO_ADDR
// if h + 7 < height then
3081: LD_VAR 0 12
3085: PUSH
3086: LD_INT 7
3088: PLUS
3089: PUSH
3090: LD_VAR 0 14
3094: LESS
3095: IFFALSE 3124
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3097: LD_ADDR_VAR 0 17
3101: PUSH
3102: LD_INT 7
3104: PUSH
3105: LD_INT 28
3107: PUSH
3108: LD_INT 45
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: PUSH
3116: LD_VAR 0 11
3120: ARRAY
3121: ST_TO_ADDR
// break ;
3122: GO 3126
// end ; end ; end ;
3124: GO 2955
3126: POP
3127: POP
// end ; if not weapon then
3128: LD_VAR 0 17
3132: NOT
3133: IFFALSE 3288
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3135: LD_ADDR_VAR 0 4
3139: PUSH
3140: LD_VAR 0 4
3144: PUSH
3145: LD_INT 11
3147: PUSH
3148: LD_INT 30
3150: PUSH
3151: LD_INT 49
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: LIST
3158: DIFF
3159: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3160: LD_ADDR_VAR 0 13
3164: PUSH
3165: LD_INT 22
3167: PUSH
3168: LD_VAR 0 15
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 91
3179: PUSH
3180: LD_VAR 0 1
3184: PUSH
3185: LD_INT 6
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 3
3195: PUSH
3196: LD_INT 35
3198: PUSH
3199: LD_INT 0
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: PPUSH
3215: CALL_OW 69
3219: ST_TO_ADDR
// for i in tmp do
3220: LD_ADDR_VAR 0 7
3224: PUSH
3225: LD_VAR 0 13
3229: PUSH
3230: FOR_IN
3231: IFFALSE 3256
// list := list diff GetBWeapon ( i ) ;
3233: LD_ADDR_VAR 0 4
3237: PUSH
3238: LD_VAR 0 4
3242: PUSH
3243: LD_VAR 0 7
3247: PPUSH
3248: CALL_OW 269
3252: DIFF
3253: ST_TO_ADDR
3254: GO 3230
3256: POP
3257: POP
// if list then
3258: LD_VAR 0 4
3262: IFFALSE 3288
// weapon := list [ rand ( 1 , list ) ] ;
3264: LD_ADDR_VAR 0 17
3268: PUSH
3269: LD_VAR 0 4
3273: PUSH
3274: LD_INT 1
3276: PPUSH
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL_OW 12
3286: ARRAY
3287: ST_TO_ADDR
// end ; if weapon then
3288: LD_VAR 0 17
3292: IFFALSE 3406
// begin tmp := CostOfWeapon ( weapon ) ;
3294: LD_ADDR_VAR 0 13
3298: PUSH
3299: LD_VAR 0 17
3303: PPUSH
3304: CALL_OW 451
3308: ST_TO_ADDR
// j := GetBase ( tower ) ;
3309: LD_ADDR_VAR 0 8
3313: PUSH
3314: LD_VAR 0 1
3318: PPUSH
3319: CALL_OW 274
3323: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3324: LD_VAR 0 8
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: CALL_OW 275
3336: PUSH
3337: LD_VAR 0 13
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: GREATEREQUAL
3346: PUSH
3347: LD_VAR 0 8
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 275
3359: PUSH
3360: LD_VAR 0 13
3364: PUSH
3365: LD_INT 2
3367: ARRAY
3368: GREATEREQUAL
3369: AND
3370: PUSH
3371: LD_VAR 0 8
3375: PPUSH
3376: LD_INT 3
3378: PPUSH
3379: CALL_OW 275
3383: PUSH
3384: LD_VAR 0 13
3388: PUSH
3389: LD_INT 3
3391: ARRAY
3392: GREATEREQUAL
3393: AND
3394: IFFALSE 3406
// result := weapon ;
3396: LD_ADDR_VAR 0 2
3400: PUSH
3401: LD_VAR 0 17
3405: ST_TO_ADDR
// end ; end ; end_of_file
3406: LD_VAR 0 2
3410: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3411: LD_INT 0
3413: PPUSH
3414: PPUSH
3415: PPUSH
3416: PPUSH
3417: PPUSH
3418: PPUSH
// uc_side := 1 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 1
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3435: LD_ADDR_EXP 9
3439: PUSH
3440: LD_STRING JMM
3442: PPUSH
3443: LD_EXP 1
3447: NOT
3448: PPUSH
3449: LD_EXP 2
3453: PPUSH
3454: CALL 29267 0 3
3458: ST_TO_ADDR
// team := [ JMM ] ;
3459: LD_ADDR_VAR 0 3
3463: PUSH
3464: LD_EXP 9
3468: PUSH
3469: EMPTY
3470: LIST
3471: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3472: LD_STRING BrownIn07
3474: PPUSH
3475: LD_EXP 1
3479: PPUSH
3480: CALL_OW 30
3484: IFFALSE 3510
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3486: LD_ADDR_EXP 10
3490: PUSH
3491: LD_STRING Brown
3493: PPUSH
3494: LD_EXP 1
3498: NOT
3499: PPUSH
3500: LD_EXP 2
3504: PPUSH
3505: CALL 29267 0 3
3509: ST_TO_ADDR
// if Brown then
3510: LD_EXP 10
3514: IFFALSE 3532
// team := team ^ Brown ;
3516: LD_ADDR_VAR 0 3
3520: PUSH
3521: LD_VAR 0 3
3525: PUSH
3526: LD_EXP 10
3530: ADD
3531: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3532: LD_STRING DonaldsonIn07
3534: PPUSH
3535: LD_EXP 1
3539: PPUSH
3540: CALL_OW 30
3544: IFFALSE 3570
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3546: LD_ADDR_EXP 11
3550: PUSH
3551: LD_STRING Donaldson
3553: PPUSH
3554: LD_EXP 1
3558: NOT
3559: PPUSH
3560: LD_EXP 2
3564: PPUSH
3565: CALL 29267 0 3
3569: ST_TO_ADDR
// if Donaldson then
3570: LD_EXP 11
3574: IFFALSE 3592
// team := team ^ Donaldson ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: LD_VAR 0 3
3585: PUSH
3586: LD_EXP 11
3590: ADD
3591: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3592: LD_STRING BobbyIn07
3594: PPUSH
3595: LD_EXP 1
3599: PPUSH
3600: CALL_OW 30
3604: IFFALSE 3630
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3606: LD_ADDR_EXP 12
3610: PUSH
3611: LD_STRING Bobby
3613: PPUSH
3614: LD_EXP 1
3618: NOT
3619: PPUSH
3620: LD_EXP 2
3624: PPUSH
3625: CALL 29267 0 3
3629: ST_TO_ADDR
// if Bobby then
3630: LD_EXP 12
3634: IFFALSE 3652
// team := team ^ Bobby ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_VAR 0 3
3645: PUSH
3646: LD_EXP 12
3650: ADD
3651: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3652: LD_STRING CyrusIn07
3654: PPUSH
3655: LD_EXP 1
3659: PPUSH
3660: CALL_OW 30
3664: IFFALSE 3690
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3666: LD_ADDR_EXP 13
3670: PUSH
3671: LD_STRING Cyrus
3673: PPUSH
3674: LD_EXP 1
3678: NOT
3679: PPUSH
3680: LD_EXP 2
3684: PPUSH
3685: CALL 29267 0 3
3689: ST_TO_ADDR
// if Cyrus then
3690: LD_EXP 13
3694: IFFALSE 3712
// team := team ^ Cyrus ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_VAR 0 3
3705: PUSH
3706: LD_EXP 13
3710: ADD
3711: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3712: LD_STRING LisaIn07
3714: PPUSH
3715: LD_EXP 1
3719: PPUSH
3720: CALL_OW 30
3724: IFFALSE 3750
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3726: LD_ADDR_EXP 14
3730: PUSH
3731: LD_STRING Lisa
3733: PPUSH
3734: LD_EXP 1
3738: NOT
3739: PPUSH
3740: LD_EXP 2
3744: PPUSH
3745: CALL 29267 0 3
3749: ST_TO_ADDR
// if Lisa then
3750: LD_EXP 14
3754: IFFALSE 3772
// team := team ^ Lisa ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PUSH
3766: LD_EXP 14
3770: ADD
3771: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3772: LD_STRING GladstoneIn07
3774: PPUSH
3775: LD_EXP 1
3779: PPUSH
3780: CALL_OW 30
3784: IFFALSE 3810
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3786: LD_ADDR_EXP 16
3790: PUSH
3791: LD_STRING Gladstone
3793: PPUSH
3794: LD_EXP 1
3798: NOT
3799: PPUSH
3800: LD_EXP 2
3804: PPUSH
3805: CALL 29267 0 3
3809: ST_TO_ADDR
// if Gladstone then
3810: LD_EXP 16
3814: IFFALSE 3832
// team := team ^ Gladstone ;
3816: LD_ADDR_VAR 0 3
3820: PUSH
3821: LD_VAR 0 3
3825: PUSH
3826: LD_EXP 16
3830: ADD
3831: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3832: LD_STRING KhatamIn07
3834: PPUSH
3835: LD_EXP 1
3839: PPUSH
3840: CALL_OW 30
3844: IFFALSE 3870
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3846: LD_ADDR_EXP 17
3850: PUSH
3851: LD_STRING Khatam
3853: PPUSH
3854: LD_EXP 1
3858: NOT
3859: PPUSH
3860: LD_EXP 2
3864: PPUSH
3865: CALL 29267 0 3
3869: ST_TO_ADDR
// if Khatam then
3870: LD_EXP 17
3874: IFFALSE 3892
// team := team ^ Khatam ;
3876: LD_ADDR_VAR 0 3
3880: PUSH
3881: LD_VAR 0 3
3885: PUSH
3886: LD_EXP 17
3890: ADD
3891: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3892: LD_ADDR_VAR 0 4
3896: PUSH
3897: LD_STRING 07_others
3899: PPUSH
3900: CALL_OW 31
3904: ST_TO_ADDR
// if others then
3905: LD_VAR 0 4
3909: IFFALSE 3927
// team := team ^ others ;
3911: LD_ADDR_VAR 0 3
3915: PUSH
3916: LD_VAR 0 3
3920: PUSH
3921: LD_VAR 0 4
3925: ADD
3926: ST_TO_ADDR
// if debug then
3927: LD_EXP 1
3931: IFFALSE 4005
// begin InitHc ;
3933: CALL_OW 19
// for i = 1 to 4 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 4
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4003
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 4
3980: PPUSH
3981: CALL_OW 380
// team := team ^ CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: LD_VAR 0 3
3994: PUSH
3995: CALL_OW 44
3999: ADD
4000: ST_TO_ADDR
// end ;
4001: GO 3950
4003: POP
4004: POP
// end ; m := 0 ;
4005: LD_ADDR_VAR 0 6
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// for i in team do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: LD_VAR 0 3
4022: PUSH
4023: FOR_IN
4024: IFFALSE 4231
// if GetClass ( i ) = 3 then
4026: LD_VAR 0 2
4030: PPUSH
4031: CALL_OW 257
4035: PUSH
4036: LD_INT 3
4038: EQUAL
4039: IFFALSE 4187
// begin m := m + 1 ;
4041: LD_ADDR_VAR 0 6
4045: PUSH
4046: LD_VAR 0 6
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_INT 1
4062: PPUSH
4063: LD_INT 1
4065: PPUSH
4066: LD_INT 2
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: LD_INT 1
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_VAR 0 6
4088: PUSH
4089: LD_INT 4
4091: MOD
4092: PUSH
4093: LD_INT 1
4095: PLUS
4096: ARRAY
4097: PPUSH
4098: LD_INT 2
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: LD_INT 4
4106: PUSH
4107: LD_INT 5
4109: PUSH
4110: LD_INT 3
4112: PUSH
4113: LD_INT 11
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: PUSH
4122: LD_VAR 0 6
4126: PUSH
4127: LD_INT 4
4129: MOD
4130: PUSH
4131: LD_INT 1
4133: PLUS
4134: ARRAY
4135: PPUSH
4136: LD_INT 60
4138: PPUSH
4139: CALL 500 0 7
4143: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4144: LD_VAR 0 5
4148: PPUSH
4149: LD_INT 2
4151: PPUSH
4152: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4156: LD_VAR 0 5
4160: PPUSH
4161: LD_INT 1
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4171: LD_VAR 0 2
4175: PPUSH
4176: LD_VAR 0 5
4180: PPUSH
4181: CALL_OW 52
// end else
4185: GO 4229
// begin if GetClass ( i ) = 2 then
4187: LD_VAR 0 2
4191: PPUSH
4192: CALL_OW 257
4196: PUSH
4197: LD_INT 2
4199: EQUAL
4200: IFFALSE 4214
// SetClass ( i , 1 ) ;
4202: LD_VAR 0 2
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// end ;
4229: GO 4023
4231: POP
4232: POP
// uc_side := 4 ;
4233: LD_ADDR_OWVAR 20
4237: PUSH
4238: LD_INT 4
4240: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4241: LD_ADDR_EXP 19
4245: PUSH
4246: LD_STRING Harisson
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: LD_STRING 
4254: PPUSH
4255: CALL 29267 0 3
4259: ST_TO_ADDR
// PrepareScout ;
4260: CALL 4269 0 0
// end ;
4264: LD_VAR 0 1
4268: RET
// function PrepareScout ; var ape ; begin
4269: LD_INT 0
4271: PPUSH
4272: PPUSH
// uc_side := 4 ;
4273: LD_ADDR_OWVAR 20
4277: PUSH
4278: LD_INT 4
4280: ST_TO_ADDR
// uc_nation := 1 ;
4281: LD_ADDR_OWVAR 21
4285: PUSH
4286: LD_INT 1
4288: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4289: LD_STRING FrankIn06
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL_OW 30
4299: IFFALSE 4316
// Frank := CreateCharacter ( 06c_Frank ) else
4301: LD_ADDR_EXP 15
4305: PUSH
4306: LD_STRING 06c_Frank
4308: PPUSH
4309: CALL_OW 34
4313: ST_TO_ADDR
4314: GO 4356
// if LoadVariable ( FrankInDelta , 0 ) then
4316: LD_STRING FrankInDelta
4318: PPUSH
4319: LD_INT 0
4321: PPUSH
4322: CALL_OW 30
4326: IFFALSE 4343
// Frank := CreateCharacter ( 05_Frank ) else
4328: LD_ADDR_EXP 15
4332: PUSH
4333: LD_STRING 05_Frank
4335: PPUSH
4336: CALL_OW 34
4340: ST_TO_ADDR
4341: GO 4356
// Frank := CreateCharacter ( 04_Frank ) ;
4343: LD_ADDR_EXP 15
4347: PUSH
4348: LD_STRING 04_Frank
4350: PPUSH
4351: CALL_OW 34
4355: ST_TO_ADDR
// if Frank then
4356: LD_EXP 15
4360: IFFALSE 4493
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4362: LD_EXP 15
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4377: LD_EXP 15
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: CALL_OW 336
// uc_side := 0 ;
4389: LD_ADDR_OWVAR 20
4393: PUSH
4394: LD_INT 0
4396: ST_TO_ADDR
// uc_nation := 0 ;
4397: LD_ADDR_OWVAR 21
4401: PUSH
4402: LD_INT 0
4404: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4405: LD_INT 0
4407: PPUSH
4408: LD_INT 12
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 380
// ape := CreateHuman ;
4418: LD_ADDR_VAR 0 2
4422: PUSH
4423: CALL_OW 44
4427: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4428: LD_VAR 0 2
4432: PPUSH
4433: LD_EXP 15
4437: PPUSH
4438: CALL_OW 250
4442: PPUSH
4443: LD_EXP 15
4447: PPUSH
4448: CALL_OW 251
4452: PPUSH
4453: LD_INT 5
4455: PPUSH
4456: LD_INT 0
4458: PPUSH
4459: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4463: LD_VAR 0 2
4467: PPUSH
4468: LD_EXP 15
4472: PPUSH
4473: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4477: LD_EXP 15
4481: PPUSH
4482: LD_VAR 0 2
4486: PPUSH
4487: CALL_OW 119
// exit ;
4491: GO 4536
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4493: LD_ADDR_EXP 18
4497: PUSH
4498: LD_STRING Yamoko
4500: PPUSH
4501: LD_INT 0
4503: PPUSH
4504: LD_STRING 
4506: PPUSH
4507: CALL 29267 0 3
4511: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4512: LD_EXP 18
4516: PPUSH
4517: LD_INT 2
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL_OW 49
// ComHold ( Kikuchi ) ;
4527: LD_EXP 18
4531: PPUSH
4532: CALL_OW 140
// end ; end_of_file
4536: LD_VAR 0 1
4540: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
// ru_rebuild_list := [ ] ;
4559: LD_ADDR_EXP 20
4563: PUSH
4564: EMPTY
4565: ST_TO_ADDR
// uc_side := 3 ;
4566: LD_ADDR_OWVAR 20
4570: PUSH
4571: LD_INT 3
4573: ST_TO_ADDR
// uc_nation := 3 ;
4574: LD_ADDR_OWVAR 21
4578: PUSH
4579: LD_INT 3
4581: ST_TO_ADDR
// if Difficulty > 1 then
4582: LD_OWVAR 67
4586: PUSH
4587: LD_INT 1
4589: GREATER
4590: IFFALSE 4726
// begin bc_type := b_breastwork ;
4592: LD_ADDR_OWVAR 42
4596: PUSH
4597: LD_INT 31
4599: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4600: LD_INT 78
4602: PPUSH
4603: LD_INT 74
4605: PPUSH
4606: LD_INT 2
4608: PPUSH
4609: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4613: LD_INT 171
4615: PPUSH
4616: LD_INT 193
4618: PPUSH
4619: LD_INT 4
4621: PPUSH
4622: CALL_OW 47
// bc_type := b_turret ;
4626: LD_ADDR_OWVAR 42
4630: PUSH
4631: LD_INT 33
4633: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4634: LD_INT 129
4636: PPUSH
4637: LD_INT 96
4639: PPUSH
4640: LD_INT 3
4642: PPUSH
4643: CALL_OW 47
// if Difficulty > 2 then
4647: LD_OWVAR 67
4651: PUSH
4652: LD_INT 2
4654: GREATER
4655: IFFALSE 4726
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4657: LD_INT 83
4659: PPUSH
4660: LD_INT 141
4662: PPUSH
4663: CALL_OW 428
4667: PPUSH
4668: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4672: LD_INT 78
4674: PPUSH
4675: LD_INT 133
4677: PPUSH
4678: CALL_OW 428
4682: PPUSH
4683: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4687: LD_INT 83
4689: PPUSH
4690: LD_INT 141
4692: PPUSH
4693: LD_INT 2
4695: PPUSH
4696: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4700: LD_INT 78
4702: PPUSH
4703: LD_INT 133
4705: PPUSH
4706: LD_INT 2
4708: PPUSH
4709: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4713: LD_INT 145
4715: PPUSH
4716: LD_INT 112
4718: PPUSH
4719: LD_INT 3
4721: PPUSH
4722: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4726: LD_ADDR_VAR 0 9
4730: PUSH
4731: LD_INT 22
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 2
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: LD_INT 30
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PPUSH
4773: CALL_OW 69
4777: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4778: LD_ADDR_VAR 0 10
4782: PUSH
4783: LD_INT 22
4785: PUSH
4786: LD_INT 3
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 2
4795: PUSH
4796: LD_INT 30
4798: PUSH
4799: LD_INT 6
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 30
4808: PUSH
4809: LD_INT 7
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 30
4818: PUSH
4819: LD_INT 8
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 69
4840: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4841: LD_ADDR_VAR 0 11
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 30
4858: PUSH
4859: LD_INT 3
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 69
4874: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4875: LD_ADDR_VAR 0 12
4879: PUSH
4880: LD_INT 22
4882: PUSH
4883: LD_INT 3
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 30
4892: PUSH
4893: LD_INT 31
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4909: LD_ADDR_VAR 0 13
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 32
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4943: LD_ADDR_VAR 0 14
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 33
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
4977: LD_ADDR_VAR 0 15
4981: PUSH
4982: LD_INT 42
4984: PUSH
4985: LD_INT 5
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 43
4994: PUSH
4995: LD_INT 50
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 44
5004: PUSH
5005: LD_INT 30
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 46
5014: PUSH
5015: LD_INT 15
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5028: LD_ADDR_VAR 0 16
5032: PUSH
5033: LD_INT 0
5035: PUSH
5036: LD_INT 4
5038: PUSH
5039: LD_INT 6
5041: PUSH
5042: LD_INT 3
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
5051: LD_ADDR_VAR 0 6
5055: PUSH
5056: LD_INT 4
5058: PUSH
5059: LD_INT 5
5061: PUSH
5062: LD_INT 6
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: LIST
5069: PUSH
5070: LD_OWVAR 67
5074: ARRAY
5075: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5076: LD_INT 16
5078: PPUSH
5079: LD_STRING am_tukh
5081: PPUSH
5082: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5086: LD_ADDR_VAR 0 2
5090: PUSH
5091: LD_INT 21
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 69
5105: PUSH
5106: FOR_IN
5107: IFFALSE 5140
// SetBLevel ( i , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5109: LD_VAR 0 2
5113: PPUSH
5114: LD_INT 4
5116: PUSH
5117: LD_INT 5
5119: PUSH
5120: LD_INT 6
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: PUSH
5128: LD_OWVAR 67
5132: ARRAY
5133: PPUSH
5134: CALL_OW 241
5138: GO 5106
5140: POP
5141: POP
// for i in dep_list do
5142: LD_ADDR_VAR 0 2
5146: PUSH
5147: LD_VAR 0 9
5151: PUSH
5152: FOR_IN
5153: IFFALSE 5197
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5155: LD_VAR 0 2
5159: PPUSH
5160: CALL_OW 274
5164: PPUSH
5165: LD_INT 1
5167: PPUSH
5168: LD_INT 1000
5170: PPUSH
5171: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL_OW 274
5184: PPUSH
5185: LD_INT 2
5187: PPUSH
5188: LD_INT 1000
5190: PPUSH
5191: CALL_OW 277
// end ;
5195: GO 5152
5197: POP
5198: POP
// InitHc ;
5199: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 ] [ Difficulty ] div 100 ;
5203: LD_ADDR_VAR 0 8
5207: PUSH
5208: LD_VAR 0 13
5212: PUSH
5213: LD_INT 45
5215: PUSH
5216: LD_INT 60
5218: PUSH
5219: LD_INT 75
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_OWVAR 67
5231: ARRAY
5232: MUL
5233: PUSH
5234: LD_INT 100
5236: DIV
5237: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5238: LD_ADDR_VAR 0 16
5242: PUSH
5243: LD_VAR 0 16
5247: PPUSH
5248: LD_INT 1
5250: PPUSH
5251: LD_VAR 0 8
5255: PPUSH
5256: CALL_OW 1
5260: ST_TO_ADDR
// tmp := [ ] ;
5261: LD_ADDR_VAR 0 8
5265: PUSH
5266: EMPTY
5267: ST_TO_ADDR
// for i in bunker_list do
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 13
5277: PUSH
5278: FOR_IN
5279: IFFALSE 5375
// if i mod 10 + 1 < tmp then
5281: LD_VAR 0 2
5285: PUSH
5286: LD_INT 10
5288: MOD
5289: PUSH
5290: LD_INT 1
5292: PLUS
5293: PUSH
5294: LD_VAR 0 8
5298: LESS
5299: IFFALSE 5344
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5301: LD_ADDR_VAR 0 8
5305: PUSH
5306: LD_VAR 0 8
5310: PPUSH
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 3
5318: PPUSH
5319: LD_INT 5
5321: PPUSH
5322: CALL_OW 12
5326: MOD
5327: PUSH
5328: LD_INT 1
5330: PLUS
5331: PPUSH
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 2
5341: ST_TO_ADDR
5342: GO 5373
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5344: LD_ADDR_VAR 0 8
5348: PUSH
5349: LD_VAR 0 8
5353: PPUSH
5354: LD_VAR 0 8
5358: PUSH
5359: LD_INT 1
5361: PLUS
5362: PPUSH
5363: LD_VAR 0 2
5367: PPUSH
5368: CALL_OW 2
5372: ST_TO_ADDR
5373: GO 5278
5375: POP
5376: POP
// bunker_list := tmp ;
5377: LD_ADDR_VAR 0 13
5381: PUSH
5382: LD_VAR 0 8
5386: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_VAR 0 13
5396: PUSH
5397: LD_VAR 0 14
5401: ADD
5402: PUSH
5403: FOR_IN
5404: IFFALSE 5427
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5406: LD_VAR 0 2
5410: PPUSH
5411: LD_VAR 0 2
5415: PPUSH
5416: CALL 2188 0 1
5420: PPUSH
5421: CALL_OW 431
5425: GO 5403
5427: POP
5428: POP
// while ( personel_counter [ 1 ] ) do
5429: LD_VAR 0 16
5433: PUSH
5434: LD_INT 1
5436: ARRAY
5437: IFFALSE 5545
// begin i := rand ( 1 , bunker_list ) ;
5439: LD_ADDR_VAR 0 2
5443: PUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_VAR 0 13
5451: PPUSH
5452: CALL_OW 12
5456: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5457: LD_INT 0
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: LD_VAR 0 6
5467: PPUSH
5468: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5472: CALL_OW 44
5476: PPUSH
5477: LD_VAR 0 13
5481: PUSH
5482: LD_VAR 0 2
5486: ARRAY
5487: PPUSH
5488: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5492: LD_ADDR_VAR 0 13
5496: PUSH
5497: LD_VAR 0 13
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: CALL_OW 3
5511: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5512: LD_ADDR_VAR 0 16
5516: PUSH
5517: LD_VAR 0 16
5521: PPUSH
5522: LD_INT 1
5524: PPUSH
5525: LD_VAR 0 16
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PUSH
5534: LD_INT 1
5536: MINUS
5537: PPUSH
5538: CALL_OW 1
5542: ST_TO_ADDR
// end ;
5543: GO 5429
// for i = 1 to personel_counter [ 2 ] do
5545: LD_ADDR_VAR 0 2
5549: PUSH
5550: DOUBLE
5551: LD_INT 1
5553: DEC
5554: ST_TO_ADDR
5555: LD_VAR 0 16
5559: PUSH
5560: LD_INT 2
5562: ARRAY
5563: PUSH
5564: FOR_TO
5565: IFFALSE 5596
// begin PrepareHuman ( false , 2 , skill ) ;
5567: LD_INT 0
5569: PPUSH
5570: LD_INT 2
5572: PPUSH
5573: LD_VAR 0 6
5577: PPUSH
5578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5582: CALL_OW 44
5586: PPUSH
5587: LD_INT 16
5589: PPUSH
5590: CALL_OW 52
// end ;
5594: GO 5564
5596: POP
5597: POP
// for i = 1 to personel_counter [ 3 ] do
5598: LD_ADDR_VAR 0 2
5602: PUSH
5603: DOUBLE
5604: LD_INT 1
5606: DEC
5607: ST_TO_ADDR
5608: LD_VAR 0 16
5612: PUSH
5613: LD_INT 3
5615: ARRAY
5616: PUSH
5617: FOR_TO
5618: IFFALSE 5665
// begin PrepareHuman ( false , 3 , skill ) ;
5620: LD_INT 0
5622: PPUSH
5623: LD_INT 3
5625: PPUSH
5626: LD_VAR 0 6
5630: PPUSH
5631: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5635: CALL_OW 44
5639: PPUSH
5640: LD_VAR 0 11
5644: PUSH
5645: LD_VAR 0 2
5649: PUSH
5650: LD_INT 2
5652: MOD
5653: PUSH
5654: LD_INT 1
5656: PLUS
5657: ARRAY
5658: PPUSH
5659: CALL_OW 52
// end ;
5663: GO 5617
5665: POP
5666: POP
// for i = 1 to personel_counter [ 4 ] do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_VAR 0 16
5681: PUSH
5682: LD_INT 4
5684: ARRAY
5685: PUSH
5686: FOR_TO
5687: IFFALSE 5724
// begin PrepareHuman ( false , 4 , skill ) ;
5689: LD_INT 0
5691: PPUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_VAR 0 6
5699: PPUSH
5700: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5704: CALL_OW 44
5708: PPUSH
5709: LD_VAR 0 10
5713: PUSH
5714: LD_INT 1
5716: ARRAY
5717: PPUSH
5718: CALL_OW 52
// end ;
5722: GO 5686
5724: POP
5725: POP
// for i in breastworks_list do
5726: LD_ADDR_VAR 0 2
5730: PUSH
5731: LD_VAR 0 12
5735: PUSH
5736: FOR_IN
5737: IFFALSE 5849
// begin r := GetDir ( i ) ;
5739: LD_ADDR_VAR 0 4
5743: PUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 254
5753: ST_TO_ADDR
// if r > 3 then
5754: LD_VAR 0 4
5758: PUSH
5759: LD_INT 3
5761: GREATER
5762: IFFALSE 5780
// r := r - 3 else
5764: LD_ADDR_VAR 0 4
5768: PUSH
5769: LD_VAR 0 4
5773: PUSH
5774: LD_INT 3
5776: MINUS
5777: ST_TO_ADDR
5778: GO 5794
// r := r + 3 ;
5780: LD_ADDR_VAR 0 4
5784: PUSH
5785: LD_VAR 0 4
5789: PUSH
5790: LD_INT 3
5792: PLUS
5793: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5794: LD_INT 0
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_VAR 0 6
5804: PPUSH
5805: CALL_OW 380
// un := CreateHuman ;
5809: LD_ADDR_VAR 0 5
5813: PUSH
5814: CALL_OW 44
5818: ST_TO_ADDR
// SetDir ( un , r ) ;
5819: LD_VAR 0 5
5823: PPUSH
5824: LD_VAR 0 4
5828: PPUSH
5829: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5833: LD_VAR 0 5
5837: PPUSH
5838: LD_VAR 0 2
5842: PPUSH
5843: CALL_OW 52
// end ;
5847: GO 5736
5849: POP
5850: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_INT 22
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 25
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PPUSH
5880: CALL_OW 69
5884: ST_TO_ADDR
// r := [ 4 , 5 , 6 ] [ Difficulty ] ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_INT 4
5892: PUSH
5893: LD_INT 5
5895: PUSH
5896: LD_INT 6
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: PUSH
5904: LD_OWVAR 67
5908: ARRAY
5909: ST_TO_ADDR
// for i = 1 to r do
5910: LD_ADDR_VAR 0 2
5914: PUSH
5915: DOUBLE
5916: LD_INT 1
5918: DEC
5919: ST_TO_ADDR
5920: LD_VAR 0 4
5924: PUSH
5925: FOR_TO
5926: IFFALSE 6099
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5928: LD_ADDR_VAR 0 5
5932: PUSH
5933: LD_INT 3
5935: PPUSH
5936: LD_INT 3
5938: PPUSH
5939: LD_INT 22
5941: PUSH
5942: LD_INT 22
5944: PUSH
5945: LD_INT 24
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: PUSH
5953: LD_VAR 0 2
5957: PUSH
5958: LD_INT 3
5960: MOD
5961: PUSH
5962: LD_INT 1
5964: PLUS
5965: ARRAY
5966: PPUSH
5967: LD_INT 1
5969: PPUSH
5970: LD_INT 1
5972: PPUSH
5973: LD_INT 43
5975: PUSH
5976: LD_INT 44
5978: PUSH
5979: LD_INT 42
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: PUSH
5987: LD_VAR 0 2
5991: PUSH
5992: LD_INT 3
5994: MOD
5995: PUSH
5996: LD_INT 1
5998: PLUS
5999: ARRAY
6000: PPUSH
6001: LD_INT 100
6003: PPUSH
6004: CALL 500 0 7
6008: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6009: LD_VAR 0 5
6013: PPUSH
6014: LD_INT 0
6016: PPUSH
6017: LD_INT 5
6019: PPUSH
6020: CALL_OW 12
6024: PPUSH
6025: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6029: LD_VAR 0 5
6033: PPUSH
6034: LD_INT 5
6036: PPUSH
6037: LD_INT 0
6039: PPUSH
6040: CALL_OW 49
// if i > tmp - 2 then
6044: LD_VAR 0 2
6048: PUSH
6049: LD_VAR 0 8
6053: PUSH
6054: LD_INT 2
6056: MINUS
6057: GREATER
6058: IFFALSE 6062
// continue ;
6060: GO 5925
// ComExitBuilding ( tmp [ i ] ) ;
6062: LD_VAR 0 8
6066: PUSH
6067: LD_VAR 0 2
6071: ARRAY
6072: PPUSH
6073: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6077: LD_VAR 0 8
6081: PUSH
6082: LD_VAR 0 2
6086: ARRAY
6087: PPUSH
6088: LD_VAR 0 5
6092: PPUSH
6093: CALL_OW 180
// end ;
6097: GO 5925
6099: POP
6100: POP
// end ;
6101: LD_VAR 0 1
6105: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6106: LD_INT 22
6108: PUSH
6109: LD_INT 3
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 25
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 69
6134: IFFALSE 6866
6136: GO 6138
6138: DISABLE
6139: LD_INT 0
6141: PPUSH
6142: PPUSH
6143: PPUSH
6144: PPUSH
6145: PPUSH
// begin enable ;
6146: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6147: LD_ADDR_VAR 0 2
6151: PUSH
6152: LD_INT 6
6154: PPUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 24
6160: PUSH
6161: LD_INT 1000
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 21
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PPUSH
6186: CALL_OW 70
6190: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6191: LD_ADDR_VAR 0 4
6195: PUSH
6196: LD_INT 22
6198: PUSH
6199: LD_INT 3
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 25
6208: PUSH
6209: LD_INT 2
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PPUSH
6220: CALL_OW 69
6224: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6225: LD_VAR 0 2
6229: NOT
6230: PUSH
6231: LD_EXP 20
6235: NOT
6236: AND
6237: IFFALSE 6307
// begin for i in engs do
6239: LD_ADDR_VAR 0 1
6243: PUSH
6244: LD_VAR 0 4
6248: PUSH
6249: FOR_IN
6250: IFFALSE 6305
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6252: LD_VAR 0 1
6256: PPUSH
6257: CALL_OW 256
6261: PUSH
6262: LD_INT 1000
6264: EQUAL
6265: PUSH
6266: LD_VAR 0 1
6270: PPUSH
6271: CALL_OW 314
6275: NOT
6276: AND
6277: PUSH
6278: LD_VAR 0 1
6282: PPUSH
6283: CALL_OW 310
6287: NOT
6288: AND
6289: IFFALSE 6303
// ComEnterUnit ( i , ru_dep_main ) ;
6291: LD_VAR 0 1
6295: PPUSH
6296: LD_INT 16
6298: PPUSH
6299: CALL_OW 120
6303: GO 6249
6305: POP
6306: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6307: LD_VAR 0 4
6311: PPUSH
6312: LD_INT 3
6314: PUSH
6315: LD_INT 24
6317: PUSH
6318: LD_INT 650
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 72
6333: IFFALSE 6426
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6335: LD_ADDR_VAR 0 3
6339: PUSH
6340: LD_VAR 0 4
6344: PPUSH
6345: LD_INT 3
6347: PUSH
6348: LD_INT 24
6350: PUSH
6351: LD_INT 650
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PPUSH
6362: CALL_OW 72
6366: ST_TO_ADDR
// for i in tmp do
6367: LD_ADDR_VAR 0 1
6371: PUSH
6372: LD_VAR 0 3
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6424
// if not IsInArea ( i , mainBaseArea ) then
6380: LD_VAR 0 1
6384: PPUSH
6385: LD_INT 14
6387: PPUSH
6388: CALL_OW 308
6392: NOT
6393: IFFALSE 6422
// begin ComMoveXY ( i , 129 , 125 ) ;
6395: LD_VAR 0 1
6399: PPUSH
6400: LD_INT 129
6402: PPUSH
6403: LD_INT 125
6405: PPUSH
6406: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6410: LD_VAR 0 1
6414: PPUSH
6415: LD_INT 1050
6417: PPUSH
6418: CALL_OW 202
// end ;
6422: GO 6377
6424: POP
6425: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6426: LD_ADDR_VAR 0 4
6430: PUSH
6431: LD_VAR 0 4
6435: PPUSH
6436: LD_INT 24
6438: PUSH
6439: LD_INT 650
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// if not engs then
6451: LD_VAR 0 4
6455: NOT
6456: IFFALSE 6460
// exit ;
6458: GO 6866
// if filter then
6460: LD_VAR 0 2
6464: IFFALSE 6723
// begin for i in engs do
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_VAR 0 4
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6501
// if IsInUnit ( i ) then
6479: LD_VAR 0 1
6483: PPUSH
6484: CALL_OW 310
6488: IFFALSE 6499
// ComExitBuilding ( i ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL_OW 122
6499: GO 6476
6501: POP
6502: POP
// wait ( 3 ) ;
6503: LD_INT 3
6505: PPUSH
6506: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6510: LD_VAR 0 2
6514: PUSH
6515: LD_INT 2
6517: GREATEREQUAL
6518: PUSH
6519: LD_VAR 0 4
6523: PUSH
6524: LD_INT 2
6526: GREATEREQUAL
6527: AND
6528: IFFALSE 6676
// begin for i = 1 to engs / 2 do
6530: LD_ADDR_VAR 0 1
6534: PUSH
6535: DOUBLE
6536: LD_INT 1
6538: DEC
6539: ST_TO_ADDR
6540: LD_VAR 0 4
6544: PUSH
6545: LD_INT 2
6547: DIVREAL
6548: PUSH
6549: FOR_TO
6550: IFFALSE 6596
// if not HasTask ( engs [ i ] ) then
6552: LD_VAR 0 4
6556: PUSH
6557: LD_VAR 0 1
6561: ARRAY
6562: PPUSH
6563: CALL_OW 314
6567: NOT
6568: IFFALSE 6594
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6570: LD_VAR 0 4
6574: PUSH
6575: LD_VAR 0 1
6579: ARRAY
6580: PPUSH
6581: LD_VAR 0 2
6585: PUSH
6586: LD_INT 1
6588: ARRAY
6589: PPUSH
6590: CALL_OW 130
6594: GO 6549
6596: POP
6597: POP
// for i = engs / 2 + 1 to engs do
6598: LD_ADDR_VAR 0 1
6602: PUSH
6603: DOUBLE
6604: LD_VAR 0 4
6608: PUSH
6609: LD_INT 2
6611: DIVREAL
6612: PUSH
6613: LD_INT 1
6615: PLUS
6616: DEC
6617: ST_TO_ADDR
6618: LD_VAR 0 4
6622: PUSH
6623: FOR_TO
6624: IFFALSE 6672
// if not HasTask ( engs [ i ] ) then
6626: LD_VAR 0 4
6630: PUSH
6631: LD_VAR 0 1
6635: ARRAY
6636: PPUSH
6637: CALL_OW 314
6641: NOT
6642: IFFALSE 6670
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6644: LD_VAR 0 4
6648: PUSH
6649: LD_VAR 0 1
6653: ARRAY
6654: PPUSH
6655: LD_VAR 0 2
6659: PUSH
6660: LD_VAR 0 2
6664: ARRAY
6665: PPUSH
6666: CALL_OW 130
6670: GO 6623
6672: POP
6673: POP
// end else
6674: GO 6723
// for i in engs do
6676: LD_ADDR_VAR 0 1
6680: PUSH
6681: LD_VAR 0 4
6685: PUSH
6686: FOR_IN
6687: IFFALSE 6721
// if not HasTask ( i ) then
6689: LD_VAR 0 1
6693: PPUSH
6694: CALL_OW 314
6698: NOT
6699: IFFALSE 6719
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6701: LD_VAR 0 1
6705: PPUSH
6706: LD_VAR 0 2
6710: PUSH
6711: LD_INT 1
6713: ARRAY
6714: PPUSH
6715: CALL_OW 130
6719: GO 6686
6721: POP
6722: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: LD_INT 81
6730: PUSH
6731: LD_INT 3
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PPUSH
6738: CALL_OW 69
6742: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6743: LD_EXP 20
6747: PUSH
6748: LD_VAR 0 2
6752: NOT
6753: AND
6754: IFFALSE 6866
// begin ComExitBuilding ( engs ) ;
6756: LD_VAR 0 4
6760: PPUSH
6761: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6765: LD_VAR 0 5
6769: PPUSH
6770: LD_EXP 20
6774: PUSH
6775: LD_INT 2
6777: ARRAY
6778: PPUSH
6779: LD_EXP 20
6783: PUSH
6784: LD_INT 3
6786: ARRAY
6787: PPUSH
6788: CALL_OW 73
6792: PPUSH
6793: LD_EXP 20
6797: PUSH
6798: LD_INT 2
6800: ARRAY
6801: PPUSH
6802: LD_EXP 20
6806: PUSH
6807: LD_INT 3
6809: ARRAY
6810: PPUSH
6811: CALL_OW 297
6815: PUSH
6816: LD_INT 10
6818: GREATER
6819: IFFALSE 6866
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6821: LD_VAR 0 4
6825: PPUSH
6826: LD_EXP 20
6830: PUSH
6831: LD_INT 1
6833: ARRAY
6834: PPUSH
6835: LD_EXP 20
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: PPUSH
6844: LD_EXP 20
6848: PUSH
6849: LD_INT 3
6851: ARRAY
6852: PPUSH
6853: LD_EXP 20
6857: PUSH
6858: LD_INT 4
6860: ARRAY
6861: PPUSH
6862: CALL_OW 145
// end ; end ;
6866: PPOPN 5
6868: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6869: LD_INT 16
6871: PPUSH
6872: CALL_OW 256
6876: PUSH
6877: LD_INT 250
6879: LESS
6880: IFFALSE 7070
6882: GO 6884
6884: DISABLE
6885: LD_INT 0
6887: PPUSH
6888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6889: LD_ADDR_VAR 0 2
6893: PUSH
6894: LD_INT 22
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 2
6906: PUSH
6907: LD_INT 25
6909: PUSH
6910: LD_INT 1
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 25
6919: PUSH
6920: LD_INT 3
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 25
6929: PUSH
6930: LD_INT 4
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
6952: LD_VAR 0 2
6956: PPUSH
6957: CALL_OW 122
// wait ( 3 ) ;
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
6968: LD_VAR 0 2
6972: PPUSH
6973: LD_INT 156
6975: PPUSH
6976: LD_INT 211
6978: PPUSH
6979: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// for i in tmp do
6990: LD_ADDR_VAR 0 1
6994: PUSH
6995: LD_VAR 0 2
6999: PUSH
7000: FOR_IN
7001: IFFALSE 7061
// if IsInArea ( i , escapeArea ) then
7003: LD_VAR 0 1
7007: PPUSH
7008: LD_INT 15
7010: PPUSH
7011: CALL_OW 308
7015: IFFALSE 7044
// begin RemoveUnit ( i ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL_OW 64
// tmp := tmp diff i ;
7026: LD_ADDR_VAR 0 2
7030: PUSH
7031: LD_VAR 0 2
7035: PUSH
7036: LD_VAR 0 1
7040: DIFF
7041: ST_TO_ADDR
// end else
7042: GO 7059
// ComMoveXY ( i , 156 , 211 ) ;
7044: LD_VAR 0 1
7048: PPUSH
7049: LD_INT 156
7051: PPUSH
7052: LD_INT 211
7054: PPUSH
7055: CALL_OW 111
7059: GO 7000
7061: POP
7062: POP
// until not tmp ;
7063: LD_VAR 0 2
7067: NOT
7068: IFFALSE 6983
// end ;
7070: PPOPN 2
7072: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7073: LD_INT 16
7075: PPUSH
7076: CALL_OW 256
7080: PUSH
7081: LD_INT 250
7083: GREATER
7084: PUSH
7085: LD_INT 22
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 25
7097: PUSH
7098: LD_INT 1
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 56
7107: PUSH
7108: EMPTY
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: PPUSH
7119: CALL_OW 69
7123: AND
7124: IFFALSE 7236
7126: GO 7128
7128: DISABLE
7129: LD_INT 0
7131: PPUSH
7132: PPUSH
// begin enable ;
7133: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_INT 3
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 1
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 56
7161: PUSH
7162: EMPTY
7163: LIST
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: LD_INT 60
7170: PUSH
7171: EMPTY
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: PPUSH
7187: CALL_OW 69
7191: ST_TO_ADDR
// if not tmp then
7192: LD_VAR 0 2
7196: NOT
7197: IFFALSE 7201
// exit ;
7199: GO 7236
// for i in tmp do
7201: LD_ADDR_VAR 0 1
7205: PUSH
7206: LD_VAR 0 2
7210: PUSH
7211: FOR_IN
7212: IFFALSE 7234
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7214: LD_VAR 0 1
7218: PPUSH
7219: LD_INT 0
7221: PPUSH
7222: LD_INT 143
7224: PPUSH
7225: LD_INT 143
7227: PPUSH
7228: CALL 818 0 4
7232: GO 7211
7234: POP
7235: POP
// end ;
7236: PPOPN 2
7238: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7239: LD_INT 22
7241: PUSH
7242: LD_INT 3
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 25
7251: PUSH
7252: LD_INT 4
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PPUSH
7263: CALL_OW 69
7267: IFFALSE 7521
7269: GO 7271
7271: DISABLE
7272: LD_INT 0
7274: PPUSH
7275: PPUSH
7276: PPUSH
// begin enable ;
7277: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7278: LD_ADDR_VAR 0 2
7282: PUSH
7283: LD_INT 14
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 3
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 21
7298: PUSH
7299: LD_INT 1
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: LD_INT 3
7308: PUSH
7309: LD_INT 24
7311: PUSH
7312: LD_INT 1000
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: PPUSH
7328: CALL_OW 70
7332: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7333: LD_ADDR_VAR 0 3
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 3
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 25
7350: PUSH
7351: LD_INT 4
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 69
7366: ST_TO_ADDR
// if not doc then
7367: LD_VAR 0 3
7371: NOT
7372: IFFALSE 7376
// exit ;
7374: GO 7521
// if not tmp then
7376: LD_VAR 0 2
7380: NOT
7381: IFFALSE 7472
// begin if not IsInUnit ( doc [ 1 ] ) then
7383: LD_VAR 0 3
7387: PUSH
7388: LD_INT 1
7390: ARRAY
7391: PPUSH
7392: CALL_OW 310
7396: NOT
7397: IFFALSE 7470
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 22
7406: PUSH
7407: LD_INT 3
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 30
7419: PUSH
7420: LD_INT 6
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 30
7429: PUSH
7430: LD_INT 7
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 30
7439: PUSH
7440: LD_INT 8
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PPUSH
7457: CALL_OW 69
7461: PUSH
7462: LD_INT 1
7464: ARRAY
7465: PPUSH
7466: CALL_OW 120
// exit ;
7470: GO 7521
// end ; if IsInUnit ( doc [ 1 ] ) then
7472: LD_VAR 0 3
7476: PUSH
7477: LD_INT 1
7479: ARRAY
7480: PPUSH
7481: CALL_OW 310
7485: IFFALSE 7496
// ComExitBuilding ( doc ) ;
7487: LD_VAR 0 3
7491: PPUSH
7492: CALL_OW 122
// wait ( 3 ) ;
7496: LD_INT 3
7498: PPUSH
7499: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_VAR 0 2
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: CALL_OW 128
// end ;
7521: PPOPN 3
7523: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7524: LD_INT 22
7526: PUSH
7527: LD_INT 3
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 25
7536: PUSH
7537: LD_INT 3
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 22
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 21
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: AND
7582: IFFALSE 7996
7584: GO 7586
7586: DISABLE
7587: LD_INT 0
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
// begin enable ;
7594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7595: LD_ADDR_VAR 0 2
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 21
7612: PUSH
7613: LD_INT 2
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: LD_INT 58
7625: PUSH
7626: EMPTY
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 69
7642: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7643: LD_ADDR_VAR 0 4
7647: PUSH
7648: LD_INT 10
7650: PUSH
7651: LD_INT 11
7653: PUSH
7654: LD_INT 12
7656: PUSH
7657: LD_INT 14
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: ST_TO_ADDR
// area := 0 ;
7666: LD_ADDR_VAR 0 5
7670: PUSH
7671: LD_INT 0
7673: ST_TO_ADDR
// attacking := false ;
7674: LD_ADDR_VAR 0 3
7678: PUSH
7679: LD_INT 0
7681: ST_TO_ADDR
// for i in tmp do
7682: LD_ADDR_VAR 0 1
7686: PUSH
7687: LD_VAR 0 2
7691: PUSH
7692: FOR_IN
7693: IFFALSE 7779
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_INT 22
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PPUSH
7710: CALL_OW 69
7714: PPUSH
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 74
7724: PPUSH
7725: CALL_OW 296
7729: PUSH
7730: LD_INT 10
7732: LESS
7733: IFFALSE 7777
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7735: LD_VAR 0 1
7739: PPUSH
7740: LD_INT 22
7742: PUSH
7743: LD_INT 1
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PPUSH
7750: CALL_OW 69
7754: PPUSH
7755: LD_VAR 0 1
7759: PPUSH
7760: CALL_OW 74
7764: PPUSH
7765: CALL_OW 115
// attacking := true ;
7769: LD_ADDR_VAR 0 3
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// end ;
7777: GO 7692
7779: POP
7780: POP
// if attacking then
7781: LD_VAR 0 3
7785: IFFALSE 7789
// exit ;
7787: GO 7996
// for i in areas do
7789: LD_ADDR_VAR 0 1
7793: PUSH
7794: LD_VAR 0 4
7798: PUSH
7799: FOR_IN
7800: IFFALSE 7837
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_INT 1
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 70
7821: IFFALSE 7835
// begin area := i ;
7823: LD_ADDR_VAR 0 5
7827: PUSH
7828: LD_VAR 0 1
7832: ST_TO_ADDR
// break ;
7833: GO 7837
// end ;
7835: GO 7799
7837: POP
7838: POP
// if area then
7839: LD_VAR 0 5
7843: IFFALSE 7996
// begin for i in tmp do
7845: LD_ADDR_VAR 0 1
7849: PUSH
7850: LD_VAR 0 2
7854: PUSH
7855: FOR_IN
7856: IFFALSE 7994
// begin if GetFuel ( i ) < 33 then
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 261
7867: PUSH
7868: LD_INT 33
7870: LESS
7871: IFFALSE 7885
// SetFuel ( i , 33 ) ;
7873: LD_VAR 0 1
7877: PPUSH
7878: LD_INT 33
7880: PPUSH
7881: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7885: LD_VAR 0 1
7889: PPUSH
7890: LD_INT 22
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PPUSH
7900: CALL_OW 69
7904: PPUSH
7905: LD_VAR 0 1
7909: PPUSH
7910: CALL_OW 74
7914: PPUSH
7915: CALL_OW 296
7919: PUSH
7920: LD_INT 10
7922: LESS
7923: IFFALSE 7961
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_INT 22
7932: PUSH
7933: LD_INT 1
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PPUSH
7940: CALL_OW 69
7944: PPUSH
7945: LD_VAR 0 1
7949: PPUSH
7950: CALL_OW 74
7954: PPUSH
7955: CALL_OW 115
7959: GO 7992
// if not IsInArea ( i , area ) then
7961: LD_VAR 0 1
7965: PPUSH
7966: LD_VAR 0 5
7970: PPUSH
7971: CALL_OW 308
7975: NOT
7976: IFFALSE 7992
// ComMoveToArea ( i , area ) ;
7978: LD_VAR 0 1
7982: PPUSH
7983: LD_VAR 0 5
7987: PPUSH
7988: CALL_OW 113
// end ;
7992: GO 7855
7994: POP
7995: POP
// end ; end ;
7996: PPOPN 5
7998: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
7999: LD_OWVAR 67
8003: PUSH
8004: LD_INT 1
8006: GREATER
8007: IFFALSE 8284
8009: GO 8011
8011: DISABLE
8012: LD_INT 0
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// begin uc_side := 3 ;
8020: LD_ADDR_OWVAR 20
8024: PUSH
8025: LD_INT 3
8027: ST_TO_ADDR
// uc_nation := 3 ;
8028: LD_ADDR_OWVAR 21
8032: PUSH
8033: LD_INT 3
8035: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
8036: LD_ADDR_VAR 0 5
8040: PUSH
8041: LD_INT 18900
8043: PUSH
8044: LD_INT 14700
8046: PUSH
8047: LD_INT 12600
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_OWVAR 67
8059: ARRAY
8060: ST_TO_ADDR
// count := [ 2 , 2 , 3 ] [ Difficulty ] ;
8061: LD_ADDR_VAR 0 6
8065: PUSH
8066: LD_INT 2
8068: PUSH
8069: LD_INT 2
8071: PUSH
8072: LD_INT 3
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: LD_OWVAR 67
8084: ARRAY
8085: ST_TO_ADDR
// for i = 1 to count do
8086: LD_ADDR_VAR 0 1
8090: PUSH
8091: DOUBLE
8092: LD_INT 1
8094: DEC
8095: ST_TO_ADDR
8096: LD_VAR 0 6
8100: PUSH
8101: FOR_TO
8102: IFFALSE 8282
// begin wait ( time ) ;
8104: LD_VAR 0 5
8108: PPUSH
8109: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8113: LD_ADDR_VAR 0 2
8117: PUSH
8118: DOUBLE
8119: LD_INT 1
8121: DEC
8122: ST_TO_ADDR
8123: LD_INT 1
8125: PPUSH
8126: LD_OWVAR 67
8130: PPUSH
8131: CALL_OW 12
8135: PUSH
8136: FOR_TO
8137: IFFALSE 8278
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8139: LD_ADDR_VAR 0 4
8143: PUSH
8144: LD_INT 3
8146: PPUSH
8147: LD_INT 3
8149: PPUSH
8150: LD_INT 22
8152: PPUSH
8153: LD_INT 1
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 43
8161: PUSH
8162: LD_INT 44
8164: PUSH
8165: LD_INT 42
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_VAR 0 1
8177: PUSH
8178: LD_INT 3
8180: MOD
8181: PUSH
8182: LD_INT 1
8184: PLUS
8185: ARRAY
8186: PPUSH
8187: LD_INT 80
8189: PPUSH
8190: CALL 500 0 7
8194: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8195: LD_VAR 0 4
8199: PPUSH
8200: LD_INT 13
8202: PPUSH
8203: LD_INT 0
8205: PPUSH
8206: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8210: LD_INT 0
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: LD_INT 4
8218: PUSH
8219: LD_INT 5
8221: PUSH
8222: LD_INT 5
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_OWVAR 67
8234: ARRAY
8235: PPUSH
8236: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8240: CALL_OW 44
8244: PPUSH
8245: LD_VAR 0 4
8249: PPUSH
8250: CALL_OW 52
// wait ( 0 0$01 ) ;
8254: LD_INT 35
8256: PPUSH
8257: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8261: LD_VAR 0 4
8265: PPUSH
8266: LD_INT 143
8268: PPUSH
8269: LD_INT 143
8271: PPUSH
8272: CALL_OW 111
// end ;
8276: GO 8136
8278: POP
8279: POP
// end ;
8280: GO 8101
8282: POP
8283: POP
// end ;
8284: PPOPN 6
8286: END
// every 8 8$00 do var i , un , time ;
8287: GO 8289
8289: DISABLE
8290: LD_INT 0
8292: PPUSH
8293: PPUSH
8294: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8295: LD_ADDR_VAR 0 3
8299: PUSH
8300: LD_INT 6300
8302: PUSH
8303: LD_INT 2100
8305: PUSH
8306: LD_INT 1050
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: ST_TO_ADDR
// wait ( time ) ;
8314: LD_VAR 0 3
8318: PPUSH
8319: CALL_OW 67
// uc_side := 3 ;
8323: LD_ADDR_OWVAR 20
8327: PUSH
8328: LD_INT 3
8330: ST_TO_ADDR
// uc_nation := 3 ;
8331: LD_ADDR_OWVAR 21
8335: PUSH
8336: LD_INT 3
8338: ST_TO_ADDR
// for i = 1 to 2 do
8339: LD_ADDR_VAR 0 1
8343: PUSH
8344: DOUBLE
8345: LD_INT 1
8347: DEC
8348: ST_TO_ADDR
8349: LD_INT 2
8351: PUSH
8352: FOR_TO
8353: IFFALSE 8416
// begin PrepareHuman ( false , 1 , 4 ) ;
8355: LD_INT 0
8357: PPUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_INT 4
8363: PPUSH
8364: CALL_OW 380
// un := CreateHuman ;
8368: LD_ADDR_VAR 0 2
8372: PUSH
8373: CALL_OW 44
8377: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8378: LD_VAR 0 2
8382: PPUSH
8383: LD_INT 16
8385: PPUSH
8386: CALL_OW 52
// ComExitBuilding ( un ) ;
8390: LD_VAR 0 2
8394: PPUSH
8395: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8399: LD_VAR 0 2
8403: PPUSH
8404: LD_INT 41
8406: PPUSH
8407: LD_INT 76
8409: PPUSH
8410: CALL_OW 174
// end ;
8414: GO 8352
8416: POP
8417: POP
// end ; end_of_file
8418: PPOPN 3
8420: END
// export function Action ; begin
8421: LD_INT 0
8423: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8424: LD_INT 28
8426: PPUSH
8427: LD_INT 3
8429: PPUSH
8430: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8434: LD_INT 41
8436: PPUSH
8437: LD_INT 76
8439: PPUSH
8440: LD_INT 1
8442: PPUSH
8443: LD_INT 10
8445: PPUSH
8446: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8450: LD_INT 41
8452: PPUSH
8453: LD_INT 76
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 331
// InGameOn ;
8463: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8467: LD_EXP 19
8471: PPUSH
8472: LD_STRING D2-Har-1
8474: PPUSH
8475: CALL_OW 94
// InGameOff ;
8479: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8483: LD_STRING M1
8485: PPUSH
8486: CALL_OW 337
// end ;
8490: LD_VAR 0 1
8494: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8495: LD_EXP 4
8499: PUSH
8500: LD_INT 1
8502: GREATER
8503: IFFALSE 8594
8505: GO 8507
8507: DISABLE
8508: LD_INT 0
8510: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8511: LD_ADDR_VAR 0 1
8515: PUSH
8516: LD_INT 1
8518: PPUSH
8519: CALL 588 0 1
8523: PUSH
8524: LD_INT 1
8526: ARRAY
8527: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8528: LD_VAR 0 1
8532: PPUSH
8533: LD_STRING D2a-Sol1-1
8535: PPUSH
8536: CALL_OW 88
// if not un then
8540: LD_VAR 0 1
8544: NOT
8545: IFFALSE 8576
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 2
8554: PPUSH
8555: CALL 588 0 1
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8564: LD_VAR 0 1
8568: PPUSH
8569: LD_STRING D2a-FSol1-1
8571: PPUSH
8572: CALL_OW 88
// end ; if Khatam then
8576: LD_EXP 17
8580: IFFALSE 8594
// Say ( Khatam , D3b-Khat-3 ) ;
8582: LD_EXP 17
8586: PPUSH
8587: LD_STRING D3b-Khat-3
8589: PPUSH
8590: CALL_OW 88
// end ;
8594: PPOPN 1
8596: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8597: LD_EXP 15
8601: PUSH
8602: LD_EXP 18
8606: NOT
8607: AND
8608: PUSH
8609: LD_INT 22
8611: PUSH
8612: LD_INT 1
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 92
8621: PUSH
8622: LD_EXP 15
8626: PPUSH
8627: CALL_OW 250
8631: PUSH
8632: LD_EXP 15
8636: PPUSH
8637: CALL_OW 251
8641: PUSH
8642: LD_INT 7
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 69
8659: AND
8660: PUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 463
8668: NOT
8669: AND
8670: PUSH
8671: LD_INT 4
8673: PPUSH
8674: CALL_OW 463
8678: NOT
8679: AND
8680: IFFALSE 9267
8682: GO 8684
8684: DISABLE
8685: LD_INT 0
8687: PPUSH
8688: PPUSH
// begin InGameOn ;
8689: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8693: LD_ADDR_VAR 0 2
8697: PUSH
8698: LD_INT 22
8700: PUSH
8701: LD_INT 0
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 25
8710: PUSH
8711: LD_INT 12
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PPUSH
8722: CALL_OW 69
8726: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8727: LD_ADDR_VAR 0 2
8731: PUSH
8732: LD_VAR 0 2
8736: PPUSH
8737: LD_EXP 15
8741: PPUSH
8742: CALL_OW 74
8746: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8747: LD_ADDR_VAR 0 1
8751: PUSH
8752: LD_INT 22
8754: PUSH
8755: LD_INT 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 21
8764: PUSH
8765: LD_INT 1
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: LD_INT 91
8774: PUSH
8775: LD_EXP 15
8779: PUSH
8780: LD_INT 20
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 69
8797: PUSH
8798: FOR_IN
8799: IFFALSE 8817
// ComTurnUnit ( i , Frank ) ;
8801: LD_VAR 0 1
8805: PPUSH
8806: LD_EXP 15
8810: PPUSH
8811: CALL_OW 119
8815: GO 8798
8817: POP
8818: POP
// SetSide ( Frank , 1 ) ;
8819: LD_EXP 15
8823: PPUSH
8824: LD_INT 1
8826: PPUSH
8827: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
8831: LD_EXP 9
8835: PPUSH
8836: LD_EXP 15
8840: PPUSH
8841: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
8845: LD_EXP 9
8849: PPUSH
8850: LD_EXP 15
8854: PPUSH
8855: CALL_OW 179
// CenterOnUnits ( Frank ) ;
8859: LD_EXP 15
8863: PPUSH
8864: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
8868: LD_EXP 15
8872: PPUSH
8873: LD_STRING D3a-Frank-1
8875: PPUSH
8876: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
8880: LD_VAR 0 2
8884: PPUSH
8885: LD_INT 42
8887: PPUSH
8888: LD_INT 78
8890: PPUSH
8891: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
8895: LD_VAR 0 2
8899: PPUSH
8900: LD_EXP 15
8904: PPUSH
8905: CALL_OW 179
// if Lisa then
8909: LD_EXP 14
8913: IFFALSE 8927
// Say ( Lisa , D3a-Lisa-1 ) ;
8915: LD_EXP 14
8919: PPUSH
8920: LD_STRING D3a-Lisa-1
8922: PPUSH
8923: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
8927: LD_EXP 9
8931: PPUSH
8932: LD_STRING D3a-JMM-1
8934: PPUSH
8935: CALL_OW 88
// if Cyrus then
8939: LD_EXP 13
8943: IFFALSE 8957
// Say ( Cyrus , D3a-Cyrus-1 ) ;
8945: LD_EXP 13
8949: PPUSH
8950: LD_STRING D3a-Cyrus-1
8952: PPUSH
8953: CALL_OW 88
// if GetRandom ( sex_male ) then
8957: LD_INT 1
8959: PPUSH
8960: CALL 588 0 1
8964: IFFALSE 8985
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
8966: LD_INT 1
8968: PPUSH
8969: CALL 588 0 1
8973: PUSH
8974: LD_INT 1
8976: ARRAY
8977: PPUSH
8978: LD_STRING D3a-Sol1-1
8980: PPUSH
8981: CALL_OW 88
// if GetRandom ( sex_female ) then
8985: LD_INT 2
8987: PPUSH
8988: CALL 588 0 1
8992: IFFALSE 9013
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
8994: LD_INT 2
8996: PPUSH
8997: CALL 588 0 1
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_STRING D3a-FSol1-1
9008: PPUSH
9009: CALL_OW 88
// if Gladstone then
9013: LD_EXP 16
9017: IFFALSE 9031
// Say ( Gladstone , D3a-Glad-1 ) ;
9019: LD_EXP 16
9023: PPUSH
9024: LD_STRING D3a-Glad-1
9026: PPUSH
9027: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9031: LD_VAR 0 2
9035: PPUSH
9036: LD_INT 60
9038: PPUSH
9039: LD_INT 113
9041: PPUSH
9042: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9046: LD_EXP 15
9050: PPUSH
9051: LD_STRING D3a-Frank-2
9053: PPUSH
9054: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9058: LD_EXP 15
9062: PPUSH
9063: LD_EXP 9
9067: PPUSH
9068: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9072: LD_EXP 9
9076: PPUSH
9077: LD_STRING D3a-JMM-2
9079: PPUSH
9080: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9084: LD_INT 1
9086: PPUSH
9087: LD_INT 4
9089: PPUSH
9090: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9094: LD_INT 85
9096: PPUSH
9097: LD_INT 134
9099: PPUSH
9100: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9104: LD_EXP 15
9108: PPUSH
9109: LD_STRING D3a-Frank-3
9111: PPUSH
9112: CALL_OW 88
// Wait ( 0 0$01 ) ;
9116: LD_INT 35
9118: PPUSH
9119: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9123: LD_INT 166
9125: PPUSH
9126: LD_INT 136
9128: PPUSH
9129: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9133: LD_EXP 9
9137: PPUSH
9138: LD_STRING D3a-JMM-3
9140: PPUSH
9141: CALL_OW 88
// Wait ( 0 0$01 ) ;
9145: LD_INT 35
9147: PPUSH
9148: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9152: LD_EXP 15
9156: PPUSH
9157: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9161: LD_EXP 15
9165: PPUSH
9166: LD_STRING D3a-Frank-4
9168: PPUSH
9169: CALL_OW 88
// if Lisa then
9173: LD_EXP 14
9177: IFFALSE 9191
// Say ( Lisa , D3a-Lisa-4 ) ;
9179: LD_EXP 14
9183: PPUSH
9184: LD_STRING D3a-Lisa-4
9186: PPUSH
9187: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9191: LD_EXP 9
9195: PPUSH
9196: LD_STRING D3a-JMM-4
9198: PPUSH
9199: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9203: LD_EXP 15
9207: PPUSH
9208: LD_STRING D3a-Frank-5
9210: PPUSH
9211: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9215: LD_EXP 9
9219: PPUSH
9220: LD_STRING D3a-JMM-5
9222: PPUSH
9223: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9227: LD_EXP 15
9231: PPUSH
9232: LD_STRING D3a-Frank-6
9234: PPUSH
9235: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9239: LD_EXP 9
9243: PPUSH
9244: LD_STRING D3a-JMM-6
9246: PPUSH
9247: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9251: LD_EXP 15
9255: PPUSH
9256: LD_STRING D3a-Frank-7
9258: PPUSH
9259: CALL_OW 88
// InGameOff ;
9263: CALL_OW 9
// end ;
9267: PPOPN 2
9269: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9270: LD_EXP 18
9274: PUSH
9275: LD_EXP 15
9279: NOT
9280: AND
9281: PUSH
9282: LD_INT 22
9284: PUSH
9285: LD_INT 1
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 92
9294: PUSH
9295: LD_EXP 18
9299: PPUSH
9300: CALL_OW 250
9304: PUSH
9305: LD_EXP 18
9309: PPUSH
9310: CALL_OW 251
9314: PUSH
9315: LD_INT 7
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PPUSH
9328: CALL_OW 69
9332: AND
9333: PUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 463
9341: NOT
9342: AND
9343: PUSH
9344: LD_INT 4
9346: PPUSH
9347: CALL_OW 463
9351: NOT
9352: AND
9353: IFFALSE 9533
9355: GO 9357
9357: DISABLE
// begin InGameOn ;
9358: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9362: LD_EXP 9
9366: PPUSH
9367: LD_EXP 18
9371: PPUSH
9372: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9376: LD_EXP 18
9380: PPUSH
9381: LD_EXP 9
9385: PPUSH
9386: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9390: LD_EXP 18
9394: PPUSH
9395: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9399: LD_EXP 18
9403: PPUSH
9404: LD_STRING D3b-Yam-1
9406: PPUSH
9407: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9411: LD_EXP 9
9415: PPUSH
9416: LD_STRING D3b-JMM-1
9418: PPUSH
9419: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9423: LD_INT 1
9425: PPUSH
9426: LD_INT 4
9428: PPUSH
9429: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9433: LD_INT 85
9435: PPUSH
9436: LD_INT 134
9438: PPUSH
9439: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9443: LD_EXP 18
9447: PPUSH
9448: LD_STRING D3b-Yam-2
9450: PPUSH
9451: CALL_OW 88
// Wait ( 0 0$01 ) ;
9455: LD_INT 35
9457: PPUSH
9458: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9462: LD_EXP 9
9466: PPUSH
9467: LD_STRING D3b-JMM-2
9469: PPUSH
9470: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9474: LD_INT 166
9476: PPUSH
9477: LD_INT 136
9479: PPUSH
9480: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9484: LD_EXP 18
9488: PPUSH
9489: LD_STRING D3b-Yam-3
9491: PPUSH
9492: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9496: LD_EXP 9
9500: PPUSH
9501: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9505: LD_EXP 9
9509: PPUSH
9510: LD_STRING D3b-JMM-3a
9512: PPUSH
9513: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9517: LD_EXP 18
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL_OW 235
// InGameOff ;
9529: CALL_OW 9
// end ;
9533: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9534: LD_INT 7
9536: PPUSH
9537: LD_INT 22
9539: PUSH
9540: LD_INT 1
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 3
9549: PUSH
9550: LD_INT 24
9552: PUSH
9553: LD_INT 1000
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 70
9572: IFFALSE 10028
9574: GO 9576
9576: DISABLE
9577: LD_INT 0
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9583: LD_INT 35
9585: PPUSH
9586: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9590: LD_ADDR_VAR 0 1
9594: PUSH
9595: LD_INT 7
9597: PPUSH
9598: LD_INT 22
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 3
9610: PUSH
9611: LD_INT 24
9613: PUSH
9614: LD_INT 1000
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL_OW 70
9633: ST_TO_ADDR
// if not un then
9634: LD_VAR 0 1
9638: NOT
9639: IFFALSE 9643
// continue ;
9641: GO 9583
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9643: LD_ADDR_VAR 0 3
9647: PUSH
9648: LD_VAR 0 1
9652: PUSH
9653: LD_INT 1
9655: ARRAY
9656: PPUSH
9657: CALL 2016 0 1
9661: ST_TO_ADDR
// until tw ;
9662: LD_VAR 0 3
9666: IFFALSE 9583
// DialogueOn ;
9668: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9672: LD_VAR 0 3
9676: PPUSH
9677: CALL_OW 87
// if Lisa then
9681: LD_EXP 14
9685: IFFALSE 9713
// begin Say ( Lisa , D5-Lisa-1 ) ;
9687: LD_EXP 14
9691: PPUSH
9692: LD_STRING D5-Lisa-1
9694: PPUSH
9695: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9699: LD_EXP 9
9703: PPUSH
9704: LD_STRING D5-JMM-1a
9706: PPUSH
9707: CALL_OW 88
// end else
9711: GO 9725
// Say ( JMM , D5-JMM-1 ) ;
9713: LD_EXP 9
9717: PPUSH
9718: LD_STRING D5-JMM-1
9720: PPUSH
9721: CALL_OW 88
// DialogueOff ;
9725: CALL_OW 7
// while ( true ) do
9729: LD_INT 1
9731: IFFALSE 9787
// begin wait ( 0 0$01 ) ;
9733: LD_INT 35
9735: PPUSH
9736: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9740: LD_ADDR_VAR 0 2
9744: PUSH
9745: LD_INT 8
9747: PPUSH
9748: LD_INT 30
9750: PUSH
9751: LD_INT 26
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 101
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 71
9776: ST_TO_ADDR
// if x then
9777: LD_VAR 0 2
9781: IFFALSE 9785
// break ;
9783: GO 9787
// end ;
9785: GO 9729
// CenterOnUnits ( x [ 1 ] ) ;
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 1
9794: ARRAY
9795: PPUSH
9796: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9800: LD_EXP 15
9804: PUSH
9805: LD_EXP 15
9809: PPUSH
9810: CALL_OW 255
9814: PUSH
9815: LD_INT 1
9817: EQUAL
9818: AND
9819: IFFALSE 9835
// Say ( Frank , D5a-Frank-1 ) else
9821: LD_EXP 15
9825: PPUSH
9826: LD_STRING D5a-Frank-1
9828: PPUSH
9829: CALL_OW 88
9833: GO 9889
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
9835: LD_EXP 18
9839: PUSH
9840: LD_EXP 18
9844: PPUSH
9845: CALL_OW 255
9849: PUSH
9850: LD_INT 1
9852: EQUAL
9853: AND
9854: IFFALSE 9870
// Say ( Kikuchi , D5a-Yam-1 ) else
9856: LD_EXP 18
9860: PPUSH
9861: LD_STRING D5a-Yam-1
9863: PPUSH
9864: CALL_OW 88
9868: GO 9889
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
9870: LD_INT 1
9872: PPUSH
9873: CALL 588 0 1
9877: PUSH
9878: LD_INT 1
9880: ARRAY
9881: PPUSH
9882: LD_STRING D5a-Sol1-1
9884: PPUSH
9885: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
9889: LD_EXP 9
9893: PPUSH
9894: LD_STRING D5a-JMM-1
9896: PPUSH
9897: CALL_OW 88
// if Cyrus then
9901: LD_EXP 13
9905: IFFALSE 9919
// Say ( Cyrus , D5a-Cyrus-1 ) ;
9907: LD_EXP 13
9911: PPUSH
9912: LD_STRING D5a-Cyrus-1
9914: PPUSH
9915: CALL_OW 88
// x := false ;
9919: LD_ADDR_VAR 0 2
9923: PUSH
9924: LD_INT 0
9926: ST_TO_ADDR
// while ( true ) do
9927: LD_INT 1
9929: IFFALSE 10016
// begin wait ( 0 0$01 ) ;
9931: LD_INT 35
9933: PPUSH
9934: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
9938: LD_ADDR_VAR 0 4
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: LD_INT 30
9948: PUSH
9949: LD_INT 0
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 30
9958: PUSH
9959: LD_INT 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: PUSH
9976: LD_INT 1
9978: DIFF
9979: PUSH
9980: FOR_IN
9981: IFFALSE 10004
// if BaseNeedEnergy ( i ) then
9983: LD_VAR 0 4
9987: PPUSH
9988: CALL 1141 0 1
9992: IFFALSE 10002
// x := true ;
9994: LD_ADDR_VAR 0 2
9998: PUSH
9999: LD_INT 1
10001: ST_TO_ADDR
10002: GO 9980
10004: POP
10005: POP
// if x then
10006: LD_VAR 0 2
10010: IFFALSE 10014
// break ;
10012: GO 10016
// end ;
10014: GO 9927
// Say ( JMM , D5b-JMM-1 ) ;
10016: LD_EXP 9
10020: PPUSH
10021: LD_STRING D5b-JMM-1
10023: PPUSH
10024: CALL_OW 88
// end ;
10028: PPOPN 4
10030: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10031: LD_EXP 5
10035: PUSH
10036: LD_INT 1
10038: ARRAY
10039: PUSH
10040: LD_OWVAR 1
10044: LESS
10045: IFFALSE 10245
10047: GO 10049
10049: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10050: LD_INT 16
10052: PPUSH
10053: CALL_OW 301
10057: NOT
10058: IFFALSE 10081
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10060: LD_EXP 19
10064: PPUSH
10065: LD_STRING D3b-Har-3
10067: PPUSH
10068: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10072: LD_STRING M2a
10074: PPUSH
10075: CALL_OW 337
// end else
10079: GO 10100
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10081: LD_EXP 19
10085: PPUSH
10086: LD_STRING D3b-Har-3a
10088: PPUSH
10089: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10093: LD_STRING M2
10095: PPUSH
10096: CALL_OW 337
// end ; can_end := true ;
10100: LD_ADDR_EXP 6
10104: PUSH
10105: LD_INT 1
10107: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10108: LD_INT 9
10110: PPUSH
10111: LD_INT 1
10113: PPUSH
10114: CALL_OW 424
// Wait ( 0 0$02 ) ;
10118: LD_INT 70
10120: PPUSH
10121: CALL_OW 67
// if Lisa then
10125: LD_EXP 14
10129: IFFALSE 10143
// Say ( Lisa , D3b-Lisa ) ;
10131: LD_EXP 14
10135: PPUSH
10136: LD_STRING D3b-Lisa
10138: PPUSH
10139: CALL_OW 88
// if Bobby then
10143: LD_EXP 12
10147: IFFALSE 10161
// Say ( Bobby , D3b-Bobby-3 ) ;
10149: LD_EXP 12
10153: PPUSH
10154: LD_STRING D3b-Bobby-3
10156: PPUSH
10157: CALL_OW 88
// if Cyrus then
10161: LD_EXP 13
10165: IFFALSE 10179
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10167: LD_EXP 13
10171: PPUSH
10172: LD_STRING D3b-Cyrus-3
10174: PPUSH
10175: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10179: LD_EXP 15
10183: PUSH
10184: LD_EXP 15
10188: PPUSH
10189: CALL_OW 255
10193: PUSH
10194: LD_INT 1
10196: EQUAL
10197: AND
10198: IFFALSE 10212
// Say ( Frank , D3b-Frank-3 ) ;
10200: LD_EXP 15
10204: PPUSH
10205: LD_STRING D3b-Frank-3
10207: PPUSH
10208: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10212: LD_EXP 18
10216: PUSH
10217: LD_EXP 18
10221: PPUSH
10222: CALL_OW 255
10226: PUSH
10227: LD_INT 1
10229: EQUAL
10230: AND
10231: IFFALSE 10245
// Say ( Kikuchi , D3b-Yam-4 ) ;
10233: LD_EXP 18
10237: PPUSH
10238: LD_STRING D3b-Yam-4
10240: PPUSH
10241: CALL_OW 88
// end ;
10245: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10246: LD_EXP 5
10250: PUSH
10251: LD_INT 2
10253: ARRAY
10254: PUSH
10255: LD_OWVAR 1
10259: LESS
10260: IFFALSE 10292
10262: GO 10264
10264: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10265: LD_EXP 19
10269: PPUSH
10270: LD_STRING D4-Har-1
10272: PPUSH
10273: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10277: LD_STRING M3
10279: PPUSH
10280: CALL_OW 337
// must_end := true ;
10284: LD_ADDR_EXP 7
10288: PUSH
10289: LD_INT 1
10291: ST_TO_ADDR
// end ;
10292: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10293: LD_EXP 5
10297: PUSH
10298: LD_INT 3
10300: ARRAY
10301: PUSH
10302: LD_OWVAR 1
10306: LESS
10307: IFFALSE 10338
10309: GO 10311
10311: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10312: LD_INT 16
10314: PPUSH
10315: CALL_OW 301
10319: NOT
10320: IFFALSE 10331
// YouLost ( TimeOut1 ) else
10322: LD_STRING TimeOut1
10324: PPUSH
10325: CALL_OW 104
10329: GO 10338
// YouLost ( TimeOut2 ) ;
10331: LD_STRING TimeOut2
10333: PPUSH
10334: CALL_OW 104
// end ;
10338: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10339: LD_EXP 9
10343: PPUSH
10344: LD_INT 9
10346: PPUSH
10347: CALL_OW 308
10351: PUSH
10352: LD_EXP 6
10356: AND
10357: IFFALSE 11457
10359: GO 10361
10361: DISABLE
10362: LD_INT 0
10364: PPUSH
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
// begin wait_on := false ;
10370: LD_ADDR_VAR 0 1
10374: PUSH
10375: LD_INT 0
10377: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10378: LD_INT 1
10380: PPUSH
10381: CALL 1218 0 1
10385: PUSH
10386: LD_INT 0
10388: PLUS
10389: PUSH
10390: LD_INT 1
10392: PPUSH
10393: LD_INT 9
10395: PPUSH
10396: CALL 1309 0 2
10400: PUSH
10401: LD_INT 1
10403: PPUSH
10404: LD_INT 9
10406: PPUSH
10407: CALL 1356 0 2
10411: ADD
10412: PUSH
10413: LD_INT 0
10415: PLUS
10416: GREATER
10417: IFFALSE 10466
// case Query ( Q1 ) of 1 :
10419: LD_STRING Q1
10421: PPUSH
10422: CALL_OW 97
10426: PUSH
10427: LD_INT 1
10429: DOUBLE
10430: EQUAL
10431: IFTRUE 10435
10433: GO 10446
10435: POP
// wait_on := true ; 2 :
10436: LD_ADDR_VAR 0 1
10440: PUSH
10441: LD_INT 1
10443: ST_TO_ADDR
10444: GO 10466
10446: LD_INT 2
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10465
10454: POP
// wait_on := false ; end ;
10455: LD_ADDR_VAR 0 1
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
10463: GO 10466
10465: POP
// repeat wait ( 0 0$01 ) ;
10466: LD_INT 35
10468: PPUSH
10469: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10473: LD_VAR 0 1
10477: NOT
10478: PUSH
10479: LD_INT 1
10481: PPUSH
10482: CALL 1218 0 1
10486: PUSH
10487: LD_INT 0
10489: PLUS
10490: PUSH
10491: LD_INT 1
10493: PPUSH
10494: LD_INT 9
10496: PPUSH
10497: CALL 1309 0 2
10501: PUSH
10502: LD_INT 1
10504: PPUSH
10505: LD_INT 9
10507: PPUSH
10508: CALL 1356 0 2
10512: ADD
10513: PUSH
10514: LD_INT 0
10516: PLUS
10517: EQUAL
10518: OR
10519: IFFALSE 10466
// DialogueOn ;
10521: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10525: LD_EXP 9
10529: PPUSH
10530: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10534: LD_EXP 9
10538: PPUSH
10539: LD_STRING D6-JMM-1
10541: PPUSH
10542: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10546: LD_EXP 19
10550: PPUSH
10551: LD_STRING D6-Har-1
10553: PPUSH
10554: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10558: LD_EXP 9
10562: PPUSH
10563: LD_STRING D6-JMM-2
10565: PPUSH
10566: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10570: LD_EXP 19
10574: PPUSH
10575: LD_STRING D6-Har-2
10577: PPUSH
10578: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10582: LD_EXP 9
10586: PPUSH
10587: LD_STRING D6-JMM-3
10589: PPUSH
10590: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10594: LD_EXP 19
10598: PPUSH
10599: LD_STRING D6-Har-3
10601: PPUSH
10602: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10606: LD_EXP 9
10610: PPUSH
10611: LD_STRING D6-JMM-4
10613: PPUSH
10614: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10618: LD_EXP 19
10622: PPUSH
10623: LD_STRING D6-Har-4
10625: PPUSH
10626: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10630: LD_EXP 9
10634: PPUSH
10635: LD_STRING D6-JMM-5
10637: PPUSH
10638: CALL_OW 88
// DialogueOff ;
10642: CALL_OW 7
// m1 := false ;
10646: LD_ADDR_VAR 0 4
10650: PUSH
10651: LD_INT 0
10653: ST_TO_ADDR
// m2 := false ;
10654: LD_ADDR_VAR 0 5
10658: PUSH
10659: LD_INT 0
10661: ST_TO_ADDR
// m3 := false ;
10662: LD_ADDR_VAR 0 6
10666: PUSH
10667: LD_INT 0
10669: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10670: LD_ADDR_VAR 0 3
10674: PUSH
10675: LD_INT 3
10677: PPUSH
10678: CALL 1487 0 1
10682: ST_TO_ADDR
// if tmp >= 35 then
10683: LD_VAR 0 3
10687: PUSH
10688: LD_INT 35
10690: GREATEREQUAL
10691: IFFALSE 10728
// begin AddMedal ( Destroy1 , - 1 ) ;
10693: LD_STRING Destroy1
10695: PPUSH
10696: LD_INT 1
10698: NEG
10699: PPUSH
10700: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10704: LD_STRING Destroy2
10706: PPUSH
10707: LD_INT 1
10709: NEG
10710: PPUSH
10711: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10715: LD_STRING Destroy3
10717: PPUSH
10718: LD_INT 1
10720: NEG
10721: PPUSH
10722: CALL_OW 101
// end else
10726: GO 10839
// begin AddMedal ( Destroy1 , 1 ) ;
10728: LD_STRING Destroy1
10730: PPUSH
10731: LD_INT 1
10733: PPUSH
10734: CALL_OW 101
// m1 := true ;
10738: LD_ADDR_VAR 0 4
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// if tmp >= 25 then
10746: LD_VAR 0 3
10750: PUSH
10751: LD_INT 25
10753: GREATEREQUAL
10754: IFFALSE 10780
// begin AddMedal ( Destroy2 , - 1 ) ;
10756: LD_STRING Destroy2
10758: PPUSH
10759: LD_INT 1
10761: NEG
10762: PPUSH
10763: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10767: LD_STRING Destroy3
10769: PPUSH
10770: LD_INT 1
10772: NEG
10773: PPUSH
10774: CALL_OW 101
// end else
10778: GO 10839
// begin AddMedal ( Destroy2 , 1 ) ;
10780: LD_STRING Destroy2
10782: PPUSH
10783: LD_INT 1
10785: PPUSH
10786: CALL_OW 101
// m2 := true ;
10790: LD_ADDR_VAR 0 5
10794: PUSH
10795: LD_INT 1
10797: ST_TO_ADDR
// if tmp >= 15 then
10798: LD_VAR 0 3
10802: PUSH
10803: LD_INT 15
10805: GREATEREQUAL
10806: IFFALSE 10821
// AddMedal ( Destroy3 , - 1 ) else
10808: LD_STRING Destroy3
10810: PPUSH
10811: LD_INT 1
10813: NEG
10814: PPUSH
10815: CALL_OW 101
10819: GO 10839
// begin AddMedal ( Destroy3 , 1 ) ;
10821: LD_STRING Destroy3
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 101
// m3 := true ;
10831: LD_ADDR_VAR 0 6
10835: PUSH
10836: LD_INT 1
10838: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
10839: LD_OWVAR 1
10843: PUSH
10844: LD_INT 67200
10846: LESSEQUAL
10847: IFFALSE 10856
// SetAchievement ( ACH_ASPEED_7 ) ;
10849: LD_STRING ACH_ASPEED_7
10851: PPUSH
10852: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
10856: LD_VAR 0 4
10860: PUSH
10861: LD_VAR 0 5
10865: AND
10866: PUSH
10867: LD_VAR 0 6
10871: AND
10872: PUSH
10873: LD_OWVAR 67
10877: PUSH
10878: LD_INT 3
10880: EQUAL
10881: AND
10882: IFFALSE 10894
// SetAchievementEX ( ACH_AMER , 7 ) ;
10884: LD_STRING ACH_AMER
10886: PPUSH
10887: LD_INT 7
10889: PPUSH
10890: CALL_OW 564
// GiveMedals ( MAIN ) ;
10894: LD_STRING MAIN
10896: PPUSH
10897: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
10901: LD_ADDR_VAR 0 3
10905: PUSH
10906: LD_INT 1
10908: PPUSH
10909: LD_INT 9
10911: PPUSH
10912: CALL 1309 0 2
10916: PUSH
10917: LD_INT 1
10919: PPUSH
10920: LD_INT 9
10922: PPUSH
10923: CALL 1356 0 2
10927: UNION
10928: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10929: LD_VAR 0 3
10933: PPUSH
10934: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10938: LD_EXP 9
10942: PPUSH
10943: LD_EXP 3
10947: PUSH
10948: LD_STRING JMM
10950: STR
10951: PPUSH
10952: CALL_OW 38
// if Brown in tmp then
10956: LD_EXP 10
10960: PUSH
10961: LD_VAR 0 3
10965: IN
10966: IFFALSE 10986
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
10968: LD_EXP 10
10972: PPUSH
10973: LD_EXP 3
10977: PUSH
10978: LD_STRING Brown
10980: STR
10981: PPUSH
10982: CALL_OW 38
// if Donaldson in tmp then
10986: LD_EXP 11
10990: PUSH
10991: LD_VAR 0 3
10995: IN
10996: IFFALSE 11016
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10998: LD_EXP 11
11002: PPUSH
11003: LD_EXP 3
11007: PUSH
11008: LD_STRING Donaldson
11010: STR
11011: PPUSH
11012: CALL_OW 38
// if Bobby in tmp then
11016: LD_EXP 12
11020: PUSH
11021: LD_VAR 0 3
11025: IN
11026: IFFALSE 11046
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11028: LD_EXP 12
11032: PPUSH
11033: LD_EXP 3
11037: PUSH
11038: LD_STRING Bobby
11040: STR
11041: PPUSH
11042: CALL_OW 38
// if Cyrus in tmp then
11046: LD_EXP 13
11050: PUSH
11051: LD_VAR 0 3
11055: IN
11056: IFFALSE 11076
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11058: LD_EXP 13
11062: PPUSH
11063: LD_EXP 3
11067: PUSH
11068: LD_STRING Cyrus
11070: STR
11071: PPUSH
11072: CALL_OW 38
// if Lisa in tmp then
11076: LD_EXP 14
11080: PUSH
11081: LD_VAR 0 3
11085: IN
11086: IFFALSE 11106
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11088: LD_EXP 14
11092: PPUSH
11093: LD_EXP 3
11097: PUSH
11098: LD_STRING Lisa
11100: STR
11101: PPUSH
11102: CALL_OW 38
// if Frank in tmp then
11106: LD_EXP 15
11110: PUSH
11111: LD_VAR 0 3
11115: IN
11116: IFFALSE 11136
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11118: LD_EXP 15
11122: PPUSH
11123: LD_EXP 3
11127: PUSH
11128: LD_STRING Frank
11130: STR
11131: PPUSH
11132: CALL_OW 38
// if Gladstone in tmp then
11136: LD_EXP 16
11140: PUSH
11141: LD_VAR 0 3
11145: IN
11146: IFFALSE 11166
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11148: LD_EXP 16
11152: PPUSH
11153: LD_EXP 3
11157: PUSH
11158: LD_STRING Gladstone
11160: STR
11161: PPUSH
11162: CALL_OW 38
// if Khatam in tmp then
11166: LD_EXP 17
11170: PUSH
11171: LD_VAR 0 3
11175: IN
11176: IFFALSE 11196
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11178: LD_EXP 17
11182: PPUSH
11183: LD_EXP 3
11187: PUSH
11188: LD_STRING Khatam
11190: STR
11191: PPUSH
11192: CALL_OW 38
// if Kikuchi in tmp then
11196: LD_EXP 18
11200: PUSH
11201: LD_VAR 0 3
11205: IN
11206: IFFALSE 11226
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11208: LD_EXP 18
11212: PPUSH
11213: LD_EXP 3
11217: PUSH
11218: LD_STRING Kikuchi
11220: STR
11221: PPUSH
11222: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11226: LD_VAR 0 3
11230: PUSH
11231: LD_EXP 9
11235: PUSH
11236: LD_EXP 10
11240: PUSH
11241: LD_EXP 11
11245: PUSH
11246: LD_EXP 12
11250: PUSH
11251: LD_EXP 13
11255: PUSH
11256: LD_EXP 14
11260: PUSH
11261: LD_EXP 15
11265: PUSH
11266: LD_EXP 16
11270: PUSH
11271: LD_EXP 18
11275: PUSH
11276: LD_EXP 17
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: DIFF
11293: PPUSH
11294: LD_EXP 3
11298: PUSH
11299: LD_STRING others
11301: STR
11302: PPUSH
11303: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11307: LD_OWVAR 1
11311: PPUSH
11312: LD_STRING 07_time
11314: PPUSH
11315: CALL_OW 39
// tmp := [ ] ;
11319: LD_ADDR_VAR 0 3
11323: PUSH
11324: EMPTY
11325: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_INT 9
11333: PPUSH
11334: LD_INT 22
11336: PUSH
11337: LD_INT 1
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 23
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 21
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: PPUSH
11372: CALL_OW 70
11376: PUSH
11377: FOR_IN
11378: IFFALSE 11439
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11380: LD_ADDR_VAR 0 3
11384: PUSH
11385: LD_VAR 0 3
11389: PUSH
11390: LD_VAR 0 2
11394: PPUSH
11395: CALL_OW 265
11399: PUSH
11400: LD_VAR 0 2
11404: PPUSH
11405: CALL_OW 262
11409: PUSH
11410: LD_VAR 0 2
11414: PPUSH
11415: CALL_OW 263
11419: PUSH
11420: LD_VAR 0 2
11424: PPUSH
11425: CALL_OW 264
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: ADD
11436: ST_TO_ADDR
11437: GO 11377
11439: POP
11440: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11441: LD_VAR 0 3
11445: PPUSH
11446: LD_STRING 07_vehicles
11448: PPUSH
11449: CALL_OW 39
// YouWin ;
11453: CALL_OW 103
// end ; end_of_file
11457: PPOPN 6
11459: END
// on UnitDestroyed ( un ) do begin if un = JMM then
11460: LD_VAR 0 1
11464: PUSH
11465: LD_EXP 9
11469: EQUAL
11470: IFFALSE 11479
// YouLost ( JMM ) ;
11472: LD_STRING JMM
11474: PPUSH
11475: CALL_OW 104
// if GetType ( un ) = unit_building then
11479: LD_VAR 0 1
11483: PPUSH
11484: CALL_OW 247
11488: PUSH
11489: LD_INT 3
11491: EQUAL
11492: IFFALSE 11508
// buildings_counter := buildings_counter + 1 ;
11494: LD_ADDR_EXP 4
11498: PUSH
11499: LD_EXP 4
11503: PUSH
11504: LD_INT 1
11506: PLUS
11507: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11508: LD_VAR 0 1
11512: PUSH
11513: LD_INT 6
11515: PPUSH
11516: LD_INT 2
11518: PUSH
11519: LD_INT 30
11521: PUSH
11522: LD_INT 33
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 30
11531: PUSH
11532: LD_INT 32
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: PPUSH
11544: CALL_OW 70
11548: IN
11549: IFFALSE 11608
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11551: LD_ADDR_EXP 20
11555: PUSH
11556: LD_EXP 20
11560: PUSH
11561: LD_VAR 0 1
11565: PPUSH
11566: CALL_OW 266
11570: PUSH
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 250
11580: PUSH
11581: LD_VAR 0 1
11585: PPUSH
11586: CALL_OW 251
11590: PUSH
11591: LD_VAR 0 1
11595: PPUSH
11596: CALL_OW 254
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: ADD
11607: ST_TO_ADDR
// if un = ru_dep_main then
11608: LD_VAR 0 1
11612: PUSH
11613: LD_INT 16
11615: EQUAL
11616: IFFALSE 11625
// ChangeMissionObjectives ( M1a ) ;
11618: LD_STRING M1a
11620: PPUSH
11621: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 247
11634: PUSH
11635: LD_INT 1
11637: EQUAL
11638: PUSH
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 255
11648: PUSH
11649: LD_INT 3
11651: EQUAL
11652: AND
11653: IFFALSE 11669
// kill_counter := kill_counter + 1 ;
11655: LD_ADDR_EXP 8
11659: PUSH
11660: LD_EXP 8
11664: PUSH
11665: LD_INT 1
11667: PLUS
11668: ST_TO_ADDR
// end ;
11669: PPOPN 1
11671: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11672: LD_VAR 0 1
11676: PPUSH
11677: CALL_OW 266
11681: PUSH
11682: LD_INT 32
11684: EQUAL
11685: PUSH
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 110
11695: PUSH
11696: LD_INT 7
11698: EQUAL
11699: AND
11700: IFFALSE 11714
// SetTag ( un , 0 ) ;
11702: LD_VAR 0 1
11706: PPUSH
11707: LD_INT 0
11709: PPUSH
11710: CALL_OW 109
// end ;
11714: PPOPN 1
11716: END
// on BuildingStarted ( b , builder ) do var i ;
11717: LD_INT 0
11719: PPUSH
// begin if GetSide ( b ) = 3 then
11720: LD_VAR 0 1
11724: PPUSH
11725: CALL_OW 255
11729: PUSH
11730: LD_INT 3
11732: EQUAL
11733: IFFALSE 11773
// for i = 1 to 4 do
11735: LD_ADDR_VAR 0 3
11739: PUSH
11740: DOUBLE
11741: LD_INT 1
11743: DEC
11744: ST_TO_ADDR
11745: LD_INT 4
11747: PUSH
11748: FOR_TO
11749: IFFALSE 11771
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11751: LD_ADDR_EXP 20
11755: PUSH
11756: LD_EXP 20
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: CALL_OW 3
11768: ST_TO_ADDR
11769: GO 11748
11771: POP
11772: POP
// end ;
11773: PPOPN 3
11775: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11776: LD_VAR 0 1
11780: PPUSH
11781: CALL_OW 266
11785: PUSH
11786: LD_INT 32
11788: PUSH
11789: LD_INT 33
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: IN
11796: IFFALSE 11810
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11798: LD_VAR 0 1
11802: PPUSH
11803: LD_INT 43
11805: PPUSH
11806: CALL_OW 148
11810: PPOPN 1
11812: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
11813: LD_VAR 0 1
11817: PUSH
11818: LD_INT 22
11820: PUSH
11821: LD_INT 3
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 2
11830: PUSH
11831: LD_INT 30
11833: PUSH
11834: LD_INT 31
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 30
11843: PUSH
11844: LD_INT 32
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PPUSH
11860: CALL_OW 69
11864: IN
11865: IFFALSE 11887
// GoToAnotherTower ( un , b , 143 , 143 ) ;
11867: LD_VAR 0 2
11871: PPUSH
11872: LD_VAR 0 1
11876: PPUSH
11877: LD_INT 143
11879: PPUSH
11880: LD_INT 143
11882: PPUSH
11883: CALL 818 0 4
// end ;
11887: PPOPN 2
11889: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
11890: LD_VAR 0 1
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 3
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 30
11907: PUSH
11908: LD_INT 32
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PPUSH
11919: CALL_OW 69
11923: IN
11924: IFFALSE 11938
// SetTag ( b , 0 ) ;
11926: LD_VAR 0 1
11930: PPUSH
11931: LD_INT 0
11933: PPUSH
11934: CALL_OW 109
// end ; end_of_file
11938: PPOPN 2
11940: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
11941: LD_INT 0
11943: PPUSH
// ar_miner := 81 ;
11944: LD_ADDR_EXP 28
11948: PUSH
11949: LD_INT 81
11951: ST_TO_ADDR
// ar_crane := 88 ;
11952: LD_ADDR_EXP 27
11956: PUSH
11957: LD_INT 88
11959: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11960: LD_ADDR_EXP 22
11964: PUSH
11965: LD_INT 89
11967: ST_TO_ADDR
// us_hack := 99 ;
11968: LD_ADDR_EXP 23
11972: PUSH
11973: LD_INT 99
11975: ST_TO_ADDR
// us_artillery := 97 ;
11976: LD_ADDR_EXP 24
11980: PUSH
11981: LD_INT 97
11983: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11984: LD_ADDR_EXP 25
11988: PUSH
11989: LD_INT 91
11991: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11992: LD_ADDR_EXP 26
11996: PUSH
11997: LD_INT 92
11999: ST_TO_ADDR
// ru_radar := 98 ;
12000: LD_ADDR_EXP 21
12004: PUSH
12005: LD_INT 98
12007: ST_TO_ADDR
// tech_Artillery := 80 ;
12008: LD_ADDR_EXP 29
12012: PUSH
12013: LD_INT 80
12015: ST_TO_ADDR
// tech_RadMat := 81 ;
12016: LD_ADDR_EXP 30
12020: PUSH
12021: LD_INT 81
12023: ST_TO_ADDR
// tech_BasicTools := 82 ;
12024: LD_ADDR_EXP 31
12028: PUSH
12029: LD_INT 82
12031: ST_TO_ADDR
// tech_Cargo := 83 ;
12032: LD_ADDR_EXP 32
12036: PUSH
12037: LD_INT 83
12039: ST_TO_ADDR
// tech_Track := 84 ;
12040: LD_ADDR_EXP 33
12044: PUSH
12045: LD_INT 84
12047: ST_TO_ADDR
// tech_Crane := 85 ;
12048: LD_ADDR_EXP 34
12052: PUSH
12053: LD_INT 85
12055: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12056: LD_ADDR_EXP 35
12060: PUSH
12061: LD_INT 86
12063: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12064: LD_ADDR_EXP 36
12068: PUSH
12069: LD_INT 87
12071: ST_TO_ADDR
// end ;
12072: LD_VAR 0 1
12076: RET
// every 1 do
12077: GO 12079
12079: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12080: CALL 11941 0 0
12084: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12085: LD_VAR 0 2
12089: PUSH
12090: LD_INT 100
12092: EQUAL
12093: IFFALSE 13042
// begin if not StreamModeActive then
12095: LD_EXP 37
12099: NOT
12100: IFFALSE 12110
// StreamModeActive := true ;
12102: LD_ADDR_EXP 37
12106: PUSH
12107: LD_INT 1
12109: ST_TO_ADDR
// if p3 = 0 then
12110: LD_VAR 0 3
12114: PUSH
12115: LD_INT 0
12117: EQUAL
12118: IFFALSE 12124
// InitStreamMode ;
12120: CALL 13200 0 0
// if p3 = 1 then
12124: LD_VAR 0 3
12128: PUSH
12129: LD_INT 1
12131: EQUAL
12132: IFFALSE 12142
// sRocket := true ;
12134: LD_ADDR_EXP 42
12138: PUSH
12139: LD_INT 1
12141: ST_TO_ADDR
// if p3 = 2 then
12142: LD_VAR 0 3
12146: PUSH
12147: LD_INT 2
12149: EQUAL
12150: IFFALSE 12160
// sSpeed := true ;
12152: LD_ADDR_EXP 41
12156: PUSH
12157: LD_INT 1
12159: ST_TO_ADDR
// if p3 = 3 then
12160: LD_VAR 0 3
12164: PUSH
12165: LD_INT 3
12167: EQUAL
12168: IFFALSE 12178
// sEngine := true ;
12170: LD_ADDR_EXP 43
12174: PUSH
12175: LD_INT 1
12177: ST_TO_ADDR
// if p3 = 4 then
12178: LD_VAR 0 3
12182: PUSH
12183: LD_INT 4
12185: EQUAL
12186: IFFALSE 12196
// sSpec := true ;
12188: LD_ADDR_EXP 40
12192: PUSH
12193: LD_INT 1
12195: ST_TO_ADDR
// if p3 = 5 then
12196: LD_VAR 0 3
12200: PUSH
12201: LD_INT 5
12203: EQUAL
12204: IFFALSE 12214
// sLevel := true ;
12206: LD_ADDR_EXP 44
12210: PUSH
12211: LD_INT 1
12213: ST_TO_ADDR
// if p3 = 6 then
12214: LD_VAR 0 3
12218: PUSH
12219: LD_INT 6
12221: EQUAL
12222: IFFALSE 12232
// sArmoury := true ;
12224: LD_ADDR_EXP 45
12228: PUSH
12229: LD_INT 1
12231: ST_TO_ADDR
// if p3 = 7 then
12232: LD_VAR 0 3
12236: PUSH
12237: LD_INT 7
12239: EQUAL
12240: IFFALSE 12250
// sRadar := true ;
12242: LD_ADDR_EXP 46
12246: PUSH
12247: LD_INT 1
12249: ST_TO_ADDR
// if p3 = 8 then
12250: LD_VAR 0 3
12254: PUSH
12255: LD_INT 8
12257: EQUAL
12258: IFFALSE 12268
// sBunker := true ;
12260: LD_ADDR_EXP 47
12264: PUSH
12265: LD_INT 1
12267: ST_TO_ADDR
// if p3 = 9 then
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 9
12275: EQUAL
12276: IFFALSE 12286
// sHack := true ;
12278: LD_ADDR_EXP 48
12282: PUSH
12283: LD_INT 1
12285: ST_TO_ADDR
// if p3 = 10 then
12286: LD_VAR 0 3
12290: PUSH
12291: LD_INT 10
12293: EQUAL
12294: IFFALSE 12304
// sFire := true ;
12296: LD_ADDR_EXP 49
12300: PUSH
12301: LD_INT 1
12303: ST_TO_ADDR
// if p3 = 11 then
12304: LD_VAR 0 3
12308: PUSH
12309: LD_INT 11
12311: EQUAL
12312: IFFALSE 12322
// sRefresh := true ;
12314: LD_ADDR_EXP 50
12318: PUSH
12319: LD_INT 1
12321: ST_TO_ADDR
// if p3 = 12 then
12322: LD_VAR 0 3
12326: PUSH
12327: LD_INT 12
12329: EQUAL
12330: IFFALSE 12340
// sExp := true ;
12332: LD_ADDR_EXP 51
12336: PUSH
12337: LD_INT 1
12339: ST_TO_ADDR
// if p3 = 13 then
12340: LD_VAR 0 3
12344: PUSH
12345: LD_INT 13
12347: EQUAL
12348: IFFALSE 12358
// sDepot := true ;
12350: LD_ADDR_EXP 52
12354: PUSH
12355: LD_INT 1
12357: ST_TO_ADDR
// if p3 = 14 then
12358: LD_VAR 0 3
12362: PUSH
12363: LD_INT 14
12365: EQUAL
12366: IFFALSE 12376
// sFlag := true ;
12368: LD_ADDR_EXP 53
12372: PUSH
12373: LD_INT 1
12375: ST_TO_ADDR
// if p3 = 15 then
12376: LD_VAR 0 3
12380: PUSH
12381: LD_INT 15
12383: EQUAL
12384: IFFALSE 12394
// sKamikadze := true ;
12386: LD_ADDR_EXP 61
12390: PUSH
12391: LD_INT 1
12393: ST_TO_ADDR
// if p3 = 16 then
12394: LD_VAR 0 3
12398: PUSH
12399: LD_INT 16
12401: EQUAL
12402: IFFALSE 12412
// sTroll := true ;
12404: LD_ADDR_EXP 62
12408: PUSH
12409: LD_INT 1
12411: ST_TO_ADDR
// if p3 = 17 then
12412: LD_VAR 0 3
12416: PUSH
12417: LD_INT 17
12419: EQUAL
12420: IFFALSE 12430
// sSlow := true ;
12422: LD_ADDR_EXP 63
12426: PUSH
12427: LD_INT 1
12429: ST_TO_ADDR
// if p3 = 18 then
12430: LD_VAR 0 3
12434: PUSH
12435: LD_INT 18
12437: EQUAL
12438: IFFALSE 12448
// sLack := true ;
12440: LD_ADDR_EXP 64
12444: PUSH
12445: LD_INT 1
12447: ST_TO_ADDR
// if p3 = 19 then
12448: LD_VAR 0 3
12452: PUSH
12453: LD_INT 19
12455: EQUAL
12456: IFFALSE 12466
// sTank := true ;
12458: LD_ADDR_EXP 66
12462: PUSH
12463: LD_INT 1
12465: ST_TO_ADDR
// if p3 = 20 then
12466: LD_VAR 0 3
12470: PUSH
12471: LD_INT 20
12473: EQUAL
12474: IFFALSE 12484
// sRemote := true ;
12476: LD_ADDR_EXP 67
12480: PUSH
12481: LD_INT 1
12483: ST_TO_ADDR
// if p3 = 21 then
12484: LD_VAR 0 3
12488: PUSH
12489: LD_INT 21
12491: EQUAL
12492: IFFALSE 12502
// sPowell := true ;
12494: LD_ADDR_EXP 68
12498: PUSH
12499: LD_INT 1
12501: ST_TO_ADDR
// if p3 = 22 then
12502: LD_VAR 0 3
12506: PUSH
12507: LD_INT 22
12509: EQUAL
12510: IFFALSE 12520
// sTeleport := true ;
12512: LD_ADDR_EXP 71
12516: PUSH
12517: LD_INT 1
12519: ST_TO_ADDR
// if p3 = 23 then
12520: LD_VAR 0 3
12524: PUSH
12525: LD_INT 23
12527: EQUAL
12528: IFFALSE 12538
// sOilTower := true ;
12530: LD_ADDR_EXP 73
12534: PUSH
12535: LD_INT 1
12537: ST_TO_ADDR
// if p3 = 24 then
12538: LD_VAR 0 3
12542: PUSH
12543: LD_INT 24
12545: EQUAL
12546: IFFALSE 12556
// sShovel := true ;
12548: LD_ADDR_EXP 74
12552: PUSH
12553: LD_INT 1
12555: ST_TO_ADDR
// if p3 = 25 then
12556: LD_VAR 0 3
12560: PUSH
12561: LD_INT 25
12563: EQUAL
12564: IFFALSE 12574
// sSheik := true ;
12566: LD_ADDR_EXP 75
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
// if p3 = 26 then
12574: LD_VAR 0 3
12578: PUSH
12579: LD_INT 26
12581: EQUAL
12582: IFFALSE 12592
// sEarthquake := true ;
12584: LD_ADDR_EXP 77
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// if p3 = 27 then
12592: LD_VAR 0 3
12596: PUSH
12597: LD_INT 27
12599: EQUAL
12600: IFFALSE 12610
// sAI := true ;
12602: LD_ADDR_EXP 78
12606: PUSH
12607: LD_INT 1
12609: ST_TO_ADDR
// if p3 = 28 then
12610: LD_VAR 0 3
12614: PUSH
12615: LD_INT 28
12617: EQUAL
12618: IFFALSE 12628
// sCargo := true ;
12620: LD_ADDR_EXP 81
12624: PUSH
12625: LD_INT 1
12627: ST_TO_ADDR
// if p3 = 29 then
12628: LD_VAR 0 3
12632: PUSH
12633: LD_INT 29
12635: EQUAL
12636: IFFALSE 12646
// sDLaser := true ;
12638: LD_ADDR_EXP 82
12642: PUSH
12643: LD_INT 1
12645: ST_TO_ADDR
// if p3 = 30 then
12646: LD_VAR 0 3
12650: PUSH
12651: LD_INT 30
12653: EQUAL
12654: IFFALSE 12664
// sExchange := true ;
12656: LD_ADDR_EXP 83
12660: PUSH
12661: LD_INT 1
12663: ST_TO_ADDR
// if p3 = 31 then
12664: LD_VAR 0 3
12668: PUSH
12669: LD_INT 31
12671: EQUAL
12672: IFFALSE 12682
// sFac := true ;
12674: LD_ADDR_EXP 84
12678: PUSH
12679: LD_INT 1
12681: ST_TO_ADDR
// if p3 = 32 then
12682: LD_VAR 0 3
12686: PUSH
12687: LD_INT 32
12689: EQUAL
12690: IFFALSE 12700
// sPower := true ;
12692: LD_ADDR_EXP 85
12696: PUSH
12697: LD_INT 1
12699: ST_TO_ADDR
// if p3 = 33 then
12700: LD_VAR 0 3
12704: PUSH
12705: LD_INT 33
12707: EQUAL
12708: IFFALSE 12718
// sRandom := true ;
12710: LD_ADDR_EXP 86
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// if p3 = 34 then
12718: LD_VAR 0 3
12722: PUSH
12723: LD_INT 34
12725: EQUAL
12726: IFFALSE 12736
// sShield := true ;
12728: LD_ADDR_EXP 87
12732: PUSH
12733: LD_INT 1
12735: ST_TO_ADDR
// if p3 = 35 then
12736: LD_VAR 0 3
12740: PUSH
12741: LD_INT 35
12743: EQUAL
12744: IFFALSE 12754
// sTime := true ;
12746: LD_ADDR_EXP 88
12750: PUSH
12751: LD_INT 1
12753: ST_TO_ADDR
// if p3 = 36 then
12754: LD_VAR 0 3
12758: PUSH
12759: LD_INT 36
12761: EQUAL
12762: IFFALSE 12772
// sTools := true ;
12764: LD_ADDR_EXP 89
12768: PUSH
12769: LD_INT 1
12771: ST_TO_ADDR
// if p3 = 101 then
12772: LD_VAR 0 3
12776: PUSH
12777: LD_INT 101
12779: EQUAL
12780: IFFALSE 12790
// sSold := true ;
12782: LD_ADDR_EXP 54
12786: PUSH
12787: LD_INT 1
12789: ST_TO_ADDR
// if p3 = 102 then
12790: LD_VAR 0 3
12794: PUSH
12795: LD_INT 102
12797: EQUAL
12798: IFFALSE 12808
// sDiff := true ;
12800: LD_ADDR_EXP 55
12804: PUSH
12805: LD_INT 1
12807: ST_TO_ADDR
// if p3 = 103 then
12808: LD_VAR 0 3
12812: PUSH
12813: LD_INT 103
12815: EQUAL
12816: IFFALSE 12826
// sFog := true ;
12818: LD_ADDR_EXP 58
12822: PUSH
12823: LD_INT 1
12825: ST_TO_ADDR
// if p3 = 104 then
12826: LD_VAR 0 3
12830: PUSH
12831: LD_INT 104
12833: EQUAL
12834: IFFALSE 12844
// sReset := true ;
12836: LD_ADDR_EXP 59
12840: PUSH
12841: LD_INT 1
12843: ST_TO_ADDR
// if p3 = 105 then
12844: LD_VAR 0 3
12848: PUSH
12849: LD_INT 105
12851: EQUAL
12852: IFFALSE 12862
// sSun := true ;
12854: LD_ADDR_EXP 60
12858: PUSH
12859: LD_INT 1
12861: ST_TO_ADDR
// if p3 = 106 then
12862: LD_VAR 0 3
12866: PUSH
12867: LD_INT 106
12869: EQUAL
12870: IFFALSE 12880
// sTiger := true ;
12872: LD_ADDR_EXP 56
12876: PUSH
12877: LD_INT 1
12879: ST_TO_ADDR
// if p3 = 107 then
12880: LD_VAR 0 3
12884: PUSH
12885: LD_INT 107
12887: EQUAL
12888: IFFALSE 12898
// sBomb := true ;
12890: LD_ADDR_EXP 57
12894: PUSH
12895: LD_INT 1
12897: ST_TO_ADDR
// if p3 = 108 then
12898: LD_VAR 0 3
12902: PUSH
12903: LD_INT 108
12905: EQUAL
12906: IFFALSE 12916
// sWound := true ;
12908: LD_ADDR_EXP 65
12912: PUSH
12913: LD_INT 1
12915: ST_TO_ADDR
// if p3 = 109 then
12916: LD_VAR 0 3
12920: PUSH
12921: LD_INT 109
12923: EQUAL
12924: IFFALSE 12934
// sBetray := true ;
12926: LD_ADDR_EXP 69
12930: PUSH
12931: LD_INT 1
12933: ST_TO_ADDR
// if p3 = 110 then
12934: LD_VAR 0 3
12938: PUSH
12939: LD_INT 110
12941: EQUAL
12942: IFFALSE 12952
// sContamin := true ;
12944: LD_ADDR_EXP 70
12948: PUSH
12949: LD_INT 1
12951: ST_TO_ADDR
// if p3 = 111 then
12952: LD_VAR 0 3
12956: PUSH
12957: LD_INT 111
12959: EQUAL
12960: IFFALSE 12970
// sOil := true ;
12962: LD_ADDR_EXP 72
12966: PUSH
12967: LD_INT 1
12969: ST_TO_ADDR
// if p3 = 112 then
12970: LD_VAR 0 3
12974: PUSH
12975: LD_INT 112
12977: EQUAL
12978: IFFALSE 12988
// sStu := true ;
12980: LD_ADDR_EXP 76
12984: PUSH
12985: LD_INT 1
12987: ST_TO_ADDR
// if p3 = 113 then
12988: LD_VAR 0 3
12992: PUSH
12993: LD_INT 113
12995: EQUAL
12996: IFFALSE 13006
// sBazooka := true ;
12998: LD_ADDR_EXP 79
13002: PUSH
13003: LD_INT 1
13005: ST_TO_ADDR
// if p3 = 114 then
13006: LD_VAR 0 3
13010: PUSH
13011: LD_INT 114
13013: EQUAL
13014: IFFALSE 13024
// sMortar := true ;
13016: LD_ADDR_EXP 80
13020: PUSH
13021: LD_INT 1
13023: ST_TO_ADDR
// if p3 = 115 then
13024: LD_VAR 0 3
13028: PUSH
13029: LD_INT 115
13031: EQUAL
13032: IFFALSE 13042
// sRanger := true ;
13034: LD_ADDR_EXP 90
13038: PUSH
13039: LD_INT 1
13041: ST_TO_ADDR
// end ; if p2 = 101 then
13042: LD_VAR 0 2
13046: PUSH
13047: LD_INT 101
13049: EQUAL
13050: IFFALSE 13178
// begin case p3 of 1 :
13052: LD_VAR 0 3
13056: PUSH
13057: LD_INT 1
13059: DOUBLE
13060: EQUAL
13061: IFTRUE 13065
13063: GO 13072
13065: POP
// hHackUnlimitedResources ; 2 :
13066: CALL 24213 0 0
13070: GO 13178
13072: LD_INT 2
13074: DOUBLE
13075: EQUAL
13076: IFTRUE 13080
13078: GO 13087
13080: POP
// hHackSetLevel10 ; 3 :
13081: CALL 24346 0 0
13085: GO 13178
13087: LD_INT 3
13089: DOUBLE
13090: EQUAL
13091: IFTRUE 13095
13093: GO 13102
13095: POP
// hHackSetLevel10YourUnits ; 4 :
13096: CALL 24431 0 0
13100: GO 13178
13102: LD_INT 4
13104: DOUBLE
13105: EQUAL
13106: IFTRUE 13110
13108: GO 13117
13110: POP
// hHackInvincible ; 5 :
13111: CALL 24879 0 0
13115: GO 13178
13117: LD_INT 5
13119: DOUBLE
13120: EQUAL
13121: IFTRUE 13125
13123: GO 13132
13125: POP
// hHackInvisible ; 6 :
13126: CALL 24990 0 0
13130: GO 13178
13132: LD_INT 6
13134: DOUBLE
13135: EQUAL
13136: IFTRUE 13140
13138: GO 13147
13140: POP
// hHackChangeYourSide ; 7 :
13141: CALL 25047 0 0
13145: GO 13178
13147: LD_INT 7
13149: DOUBLE
13150: EQUAL
13151: IFTRUE 13155
13153: GO 13162
13155: POP
// hHackChangeUnitSide ; 8 :
13156: CALL 25089 0 0
13160: GO 13178
13162: LD_INT 8
13164: DOUBLE
13165: EQUAL
13166: IFTRUE 13170
13168: GO 13177
13170: POP
// hHackFog ; end ;
13171: CALL 25190 0 0
13175: GO 13178
13177: POP
// end ; end ;
13178: PPOPN 6
13180: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13181: GO 13183
13183: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13184: LD_STRING initStreamRollete();
13186: PPUSH
13187: CALL_OW 559
// InitStreamMode ;
13191: CALL 13200 0 0
// DefineStreamItems ( ) ;
13195: CALL 13640 0 0
// end ;
13199: END
// function InitStreamMode ; begin
13200: LD_INT 0
13202: PPUSH
// streamModeActive := false ;
13203: LD_ADDR_EXP 37
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// normalCounter := 36 ;
13211: LD_ADDR_EXP 38
13215: PUSH
13216: LD_INT 36
13218: ST_TO_ADDR
// hardcoreCounter := 16 ;
13219: LD_ADDR_EXP 39
13223: PUSH
13224: LD_INT 16
13226: ST_TO_ADDR
// sRocket := false ;
13227: LD_ADDR_EXP 42
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// sSpeed := false ;
13235: LD_ADDR_EXP 41
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// sEngine := false ;
13243: LD_ADDR_EXP 43
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// sSpec := false ;
13251: LD_ADDR_EXP 40
13255: PUSH
13256: LD_INT 0
13258: ST_TO_ADDR
// sLevel := false ;
13259: LD_ADDR_EXP 44
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// sArmoury := false ;
13267: LD_ADDR_EXP 45
13271: PUSH
13272: LD_INT 0
13274: ST_TO_ADDR
// sRadar := false ;
13275: LD_ADDR_EXP 46
13279: PUSH
13280: LD_INT 0
13282: ST_TO_ADDR
// sBunker := false ;
13283: LD_ADDR_EXP 47
13287: PUSH
13288: LD_INT 0
13290: ST_TO_ADDR
// sHack := false ;
13291: LD_ADDR_EXP 48
13295: PUSH
13296: LD_INT 0
13298: ST_TO_ADDR
// sFire := false ;
13299: LD_ADDR_EXP 49
13303: PUSH
13304: LD_INT 0
13306: ST_TO_ADDR
// sRefresh := false ;
13307: LD_ADDR_EXP 50
13311: PUSH
13312: LD_INT 0
13314: ST_TO_ADDR
// sExp := false ;
13315: LD_ADDR_EXP 51
13319: PUSH
13320: LD_INT 0
13322: ST_TO_ADDR
// sDepot := false ;
13323: LD_ADDR_EXP 52
13327: PUSH
13328: LD_INT 0
13330: ST_TO_ADDR
// sFlag := false ;
13331: LD_ADDR_EXP 53
13335: PUSH
13336: LD_INT 0
13338: ST_TO_ADDR
// sKamikadze := false ;
13339: LD_ADDR_EXP 61
13343: PUSH
13344: LD_INT 0
13346: ST_TO_ADDR
// sTroll := false ;
13347: LD_ADDR_EXP 62
13351: PUSH
13352: LD_INT 0
13354: ST_TO_ADDR
// sSlow := false ;
13355: LD_ADDR_EXP 63
13359: PUSH
13360: LD_INT 0
13362: ST_TO_ADDR
// sLack := false ;
13363: LD_ADDR_EXP 64
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// sTank := false ;
13371: LD_ADDR_EXP 66
13375: PUSH
13376: LD_INT 0
13378: ST_TO_ADDR
// sRemote := false ;
13379: LD_ADDR_EXP 67
13383: PUSH
13384: LD_INT 0
13386: ST_TO_ADDR
// sPowell := false ;
13387: LD_ADDR_EXP 68
13391: PUSH
13392: LD_INT 0
13394: ST_TO_ADDR
// sTeleport := false ;
13395: LD_ADDR_EXP 71
13399: PUSH
13400: LD_INT 0
13402: ST_TO_ADDR
// sOilTower := false ;
13403: LD_ADDR_EXP 73
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// sShovel := false ;
13411: LD_ADDR_EXP 74
13415: PUSH
13416: LD_INT 0
13418: ST_TO_ADDR
// sSheik := false ;
13419: LD_ADDR_EXP 75
13423: PUSH
13424: LD_INT 0
13426: ST_TO_ADDR
// sEarthquake := false ;
13427: LD_ADDR_EXP 77
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// sAI := false ;
13435: LD_ADDR_EXP 78
13439: PUSH
13440: LD_INT 0
13442: ST_TO_ADDR
// sCargo := false ;
13443: LD_ADDR_EXP 81
13447: PUSH
13448: LD_INT 0
13450: ST_TO_ADDR
// sDLaser := false ;
13451: LD_ADDR_EXP 82
13455: PUSH
13456: LD_INT 0
13458: ST_TO_ADDR
// sExchange := false ;
13459: LD_ADDR_EXP 83
13463: PUSH
13464: LD_INT 0
13466: ST_TO_ADDR
// sFac := false ;
13467: LD_ADDR_EXP 84
13471: PUSH
13472: LD_INT 0
13474: ST_TO_ADDR
// sPower := false ;
13475: LD_ADDR_EXP 85
13479: PUSH
13480: LD_INT 0
13482: ST_TO_ADDR
// sRandom := false ;
13483: LD_ADDR_EXP 86
13487: PUSH
13488: LD_INT 0
13490: ST_TO_ADDR
// sShield := false ;
13491: LD_ADDR_EXP 87
13495: PUSH
13496: LD_INT 0
13498: ST_TO_ADDR
// sTime := false ;
13499: LD_ADDR_EXP 88
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// sTools := false ;
13507: LD_ADDR_EXP 89
13511: PUSH
13512: LD_INT 0
13514: ST_TO_ADDR
// sSold := false ;
13515: LD_ADDR_EXP 54
13519: PUSH
13520: LD_INT 0
13522: ST_TO_ADDR
// sDiff := false ;
13523: LD_ADDR_EXP 55
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// sFog := false ;
13531: LD_ADDR_EXP 58
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// sReset := false ;
13539: LD_ADDR_EXP 59
13543: PUSH
13544: LD_INT 0
13546: ST_TO_ADDR
// sSun := false ;
13547: LD_ADDR_EXP 60
13551: PUSH
13552: LD_INT 0
13554: ST_TO_ADDR
// sTiger := false ;
13555: LD_ADDR_EXP 56
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// sBomb := false ;
13563: LD_ADDR_EXP 57
13567: PUSH
13568: LD_INT 0
13570: ST_TO_ADDR
// sWound := false ;
13571: LD_ADDR_EXP 65
13575: PUSH
13576: LD_INT 0
13578: ST_TO_ADDR
// sBetray := false ;
13579: LD_ADDR_EXP 69
13583: PUSH
13584: LD_INT 0
13586: ST_TO_ADDR
// sContamin := false ;
13587: LD_ADDR_EXP 70
13591: PUSH
13592: LD_INT 0
13594: ST_TO_ADDR
// sOil := false ;
13595: LD_ADDR_EXP 72
13599: PUSH
13600: LD_INT 0
13602: ST_TO_ADDR
// sStu := false ;
13603: LD_ADDR_EXP 76
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// sBazooka := false ;
13611: LD_ADDR_EXP 79
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// sMortar := false ;
13619: LD_ADDR_EXP 80
13623: PUSH
13624: LD_INT 0
13626: ST_TO_ADDR
// sRanger := false ;
13627: LD_ADDR_EXP 90
13631: PUSH
13632: LD_INT 0
13634: ST_TO_ADDR
// end ;
13635: LD_VAR 0 1
13639: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13640: LD_INT 0
13642: PPUSH
13643: PPUSH
13644: PPUSH
13645: PPUSH
13646: PPUSH
// result := [ ] ;
13647: LD_ADDR_VAR 0 1
13651: PUSH
13652: EMPTY
13653: ST_TO_ADDR
// if campaign_id = 1 then
13654: LD_OWVAR 69
13658: PUSH
13659: LD_INT 1
13661: EQUAL
13662: IFFALSE 16600
// begin case mission_number of 1 :
13664: LD_OWVAR 70
13668: PUSH
13669: LD_INT 1
13671: DOUBLE
13672: EQUAL
13673: IFTRUE 13677
13675: GO 13741
13677: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_INT 2
13685: PUSH
13686: LD_INT 4
13688: PUSH
13689: LD_INT 11
13691: PUSH
13692: LD_INT 12
13694: PUSH
13695: LD_INT 15
13697: PUSH
13698: LD_INT 16
13700: PUSH
13701: LD_INT 22
13703: PUSH
13704: LD_INT 23
13706: PUSH
13707: LD_INT 26
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 101
13723: PUSH
13724: LD_INT 102
13726: PUSH
13727: LD_INT 106
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: ST_TO_ADDR
13739: GO 16598
13741: LD_INT 2
13743: DOUBLE
13744: EQUAL
13745: IFTRUE 13749
13747: GO 13821
13749: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13750: LD_ADDR_VAR 0 1
13754: PUSH
13755: LD_INT 2
13757: PUSH
13758: LD_INT 4
13760: PUSH
13761: LD_INT 11
13763: PUSH
13764: LD_INT 12
13766: PUSH
13767: LD_INT 15
13769: PUSH
13770: LD_INT 16
13772: PUSH
13773: LD_INT 22
13775: PUSH
13776: LD_INT 23
13778: PUSH
13779: LD_INT 26
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 101
13795: PUSH
13796: LD_INT 102
13798: PUSH
13799: LD_INT 105
13801: PUSH
13802: LD_INT 106
13804: PUSH
13805: LD_INT 108
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: ST_TO_ADDR
13819: GO 16598
13821: LD_INT 3
13823: DOUBLE
13824: EQUAL
13825: IFTRUE 13829
13827: GO 13905
13829: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13830: LD_ADDR_VAR 0 1
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: LD_INT 4
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: LD_INT 11
13846: PUSH
13847: LD_INT 12
13849: PUSH
13850: LD_INT 15
13852: PUSH
13853: LD_INT 16
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_INT 26
13861: PUSH
13862: LD_INT 36
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 101
13879: PUSH
13880: LD_INT 102
13882: PUSH
13883: LD_INT 105
13885: PUSH
13886: LD_INT 106
13888: PUSH
13889: LD_INT 108
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: ST_TO_ADDR
13903: GO 16598
13905: LD_INT 4
13907: DOUBLE
13908: EQUAL
13909: IFTRUE 13913
13911: GO 13997
13913: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13914: LD_ADDR_VAR 0 1
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: LD_INT 4
13924: PUSH
13925: LD_INT 5
13927: PUSH
13928: LD_INT 8
13930: PUSH
13931: LD_INT 11
13933: PUSH
13934: LD_INT 12
13936: PUSH
13937: LD_INT 15
13939: PUSH
13940: LD_INT 16
13942: PUSH
13943: LD_INT 22
13945: PUSH
13946: LD_INT 23
13948: PUSH
13949: LD_INT 26
13951: PUSH
13952: LD_INT 36
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 101
13971: PUSH
13972: LD_INT 102
13974: PUSH
13975: LD_INT 105
13977: PUSH
13978: LD_INT 106
13980: PUSH
13981: LD_INT 108
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: ST_TO_ADDR
13995: GO 16598
13997: LD_INT 5
13999: DOUBLE
14000: EQUAL
14001: IFTRUE 14005
14003: GO 14105
14005: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14006: LD_ADDR_VAR 0 1
14010: PUSH
14011: LD_INT 2
14013: PUSH
14014: LD_INT 4
14016: PUSH
14017: LD_INT 5
14019: PUSH
14020: LD_INT 6
14022: PUSH
14023: LD_INT 8
14025: PUSH
14026: LD_INT 11
14028: PUSH
14029: LD_INT 12
14031: PUSH
14032: LD_INT 15
14034: PUSH
14035: LD_INT 16
14037: PUSH
14038: LD_INT 22
14040: PUSH
14041: LD_INT 23
14043: PUSH
14044: LD_INT 25
14046: PUSH
14047: LD_INT 26
14049: PUSH
14050: LD_INT 36
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 101
14071: PUSH
14072: LD_INT 102
14074: PUSH
14075: LD_INT 105
14077: PUSH
14078: LD_INT 106
14080: PUSH
14081: LD_INT 108
14083: PUSH
14084: LD_INT 109
14086: PUSH
14087: LD_INT 112
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: ST_TO_ADDR
14103: GO 16598
14105: LD_INT 6
14107: DOUBLE
14108: EQUAL
14109: IFTRUE 14113
14111: GO 14233
14113: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14114: LD_ADDR_VAR 0 1
14118: PUSH
14119: LD_INT 2
14121: PUSH
14122: LD_INT 4
14124: PUSH
14125: LD_INT 5
14127: PUSH
14128: LD_INT 6
14130: PUSH
14131: LD_INT 8
14133: PUSH
14134: LD_INT 11
14136: PUSH
14137: LD_INT 12
14139: PUSH
14140: LD_INT 15
14142: PUSH
14143: LD_INT 16
14145: PUSH
14146: LD_INT 20
14148: PUSH
14149: LD_INT 21
14151: PUSH
14152: LD_INT 22
14154: PUSH
14155: LD_INT 23
14157: PUSH
14158: LD_INT 25
14160: PUSH
14161: LD_INT 26
14163: PUSH
14164: LD_INT 30
14166: PUSH
14167: LD_INT 31
14169: PUSH
14170: LD_INT 32
14172: PUSH
14173: LD_INT 36
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 101
14199: PUSH
14200: LD_INT 102
14202: PUSH
14203: LD_INT 105
14205: PUSH
14206: LD_INT 106
14208: PUSH
14209: LD_INT 108
14211: PUSH
14212: LD_INT 109
14214: PUSH
14215: LD_INT 112
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: ST_TO_ADDR
14231: GO 16598
14233: LD_INT 7
14235: DOUBLE
14236: EQUAL
14237: IFTRUE 14241
14239: GO 14341
14241: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14242: LD_ADDR_VAR 0 1
14246: PUSH
14247: LD_INT 2
14249: PUSH
14250: LD_INT 4
14252: PUSH
14253: LD_INT 5
14255: PUSH
14256: LD_INT 7
14258: PUSH
14259: LD_INT 11
14261: PUSH
14262: LD_INT 12
14264: PUSH
14265: LD_INT 15
14267: PUSH
14268: LD_INT 16
14270: PUSH
14271: LD_INT 20
14273: PUSH
14274: LD_INT 21
14276: PUSH
14277: LD_INT 22
14279: PUSH
14280: LD_INT 23
14282: PUSH
14283: LD_INT 25
14285: PUSH
14286: LD_INT 26
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 101
14307: PUSH
14308: LD_INT 102
14310: PUSH
14311: LD_INT 103
14313: PUSH
14314: LD_INT 105
14316: PUSH
14317: LD_INT 106
14319: PUSH
14320: LD_INT 108
14322: PUSH
14323: LD_INT 112
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: ST_TO_ADDR
14339: GO 16598
14341: LD_INT 8
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14477
14349: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14350: LD_ADDR_VAR 0 1
14354: PUSH
14355: LD_INT 2
14357: PUSH
14358: LD_INT 4
14360: PUSH
14361: LD_INT 5
14363: PUSH
14364: LD_INT 6
14366: PUSH
14367: LD_INT 7
14369: PUSH
14370: LD_INT 8
14372: PUSH
14373: LD_INT 11
14375: PUSH
14376: LD_INT 12
14378: PUSH
14379: LD_INT 15
14381: PUSH
14382: LD_INT 16
14384: PUSH
14385: LD_INT 20
14387: PUSH
14388: LD_INT 21
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_INT 23
14396: PUSH
14397: LD_INT 25
14399: PUSH
14400: LD_INT 26
14402: PUSH
14403: LD_INT 30
14405: PUSH
14406: LD_INT 31
14408: PUSH
14409: LD_INT 32
14411: PUSH
14412: LD_INT 36
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 101
14439: PUSH
14440: LD_INT 102
14442: PUSH
14443: LD_INT 103
14445: PUSH
14446: LD_INT 105
14448: PUSH
14449: LD_INT 106
14451: PUSH
14452: LD_INT 108
14454: PUSH
14455: LD_INT 109
14457: PUSH
14458: LD_INT 112
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: ST_TO_ADDR
14475: GO 16598
14477: LD_INT 9
14479: DOUBLE
14480: EQUAL
14481: IFTRUE 14485
14483: GO 14621
14485: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14486: LD_ADDR_VAR 0 1
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: LD_INT 4
14496: PUSH
14497: LD_INT 5
14499: PUSH
14500: LD_INT 6
14502: PUSH
14503: LD_INT 7
14505: PUSH
14506: LD_INT 8
14508: PUSH
14509: LD_INT 11
14511: PUSH
14512: LD_INT 12
14514: PUSH
14515: LD_INT 15
14517: PUSH
14518: LD_INT 16
14520: PUSH
14521: LD_INT 20
14523: PUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 22
14529: PUSH
14530: LD_INT 23
14532: PUSH
14533: LD_INT 25
14535: PUSH
14536: LD_INT 26
14538: PUSH
14539: LD_INT 28
14541: PUSH
14542: LD_INT 30
14544: PUSH
14545: LD_INT 31
14547: PUSH
14548: LD_INT 32
14550: PUSH
14551: LD_INT 36
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 101
14579: PUSH
14580: LD_INT 102
14582: PUSH
14583: LD_INT 103
14585: PUSH
14586: LD_INT 105
14588: PUSH
14589: LD_INT 106
14591: PUSH
14592: LD_INT 108
14594: PUSH
14595: LD_INT 109
14597: PUSH
14598: LD_INT 112
14600: PUSH
14601: LD_INT 114
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: ST_TO_ADDR
14619: GO 16598
14621: LD_INT 10
14623: DOUBLE
14624: EQUAL
14625: IFTRUE 14629
14627: GO 14813
14629: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14630: LD_ADDR_VAR 0 1
14634: PUSH
14635: LD_INT 2
14637: PUSH
14638: LD_INT 4
14640: PUSH
14641: LD_INT 5
14643: PUSH
14644: LD_INT 6
14646: PUSH
14647: LD_INT 7
14649: PUSH
14650: LD_INT 8
14652: PUSH
14653: LD_INT 9
14655: PUSH
14656: LD_INT 10
14658: PUSH
14659: LD_INT 11
14661: PUSH
14662: LD_INT 12
14664: PUSH
14665: LD_INT 13
14667: PUSH
14668: LD_INT 14
14670: PUSH
14671: LD_INT 15
14673: PUSH
14674: LD_INT 16
14676: PUSH
14677: LD_INT 17
14679: PUSH
14680: LD_INT 18
14682: PUSH
14683: LD_INT 19
14685: PUSH
14686: LD_INT 20
14688: PUSH
14689: LD_INT 21
14691: PUSH
14692: LD_INT 22
14694: PUSH
14695: LD_INT 23
14697: PUSH
14698: LD_INT 24
14700: PUSH
14701: LD_INT 25
14703: PUSH
14704: LD_INT 26
14706: PUSH
14707: LD_INT 28
14709: PUSH
14710: LD_INT 30
14712: PUSH
14713: LD_INT 31
14715: PUSH
14716: LD_INT 32
14718: PUSH
14719: LD_INT 36
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 101
14755: PUSH
14756: LD_INT 102
14758: PUSH
14759: LD_INT 103
14761: PUSH
14762: LD_INT 104
14764: PUSH
14765: LD_INT 105
14767: PUSH
14768: LD_INT 106
14770: PUSH
14771: LD_INT 107
14773: PUSH
14774: LD_INT 108
14776: PUSH
14777: LD_INT 109
14779: PUSH
14780: LD_INT 110
14782: PUSH
14783: LD_INT 111
14785: PUSH
14786: LD_INT 112
14788: PUSH
14789: LD_INT 114
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: ST_TO_ADDR
14811: GO 16598
14813: LD_INT 11
14815: DOUBLE
14816: EQUAL
14817: IFTRUE 14821
14819: GO 15013
14821: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14822: LD_ADDR_VAR 0 1
14826: PUSH
14827: LD_INT 2
14829: PUSH
14830: LD_INT 3
14832: PUSH
14833: LD_INT 4
14835: PUSH
14836: LD_INT 5
14838: PUSH
14839: LD_INT 6
14841: PUSH
14842: LD_INT 7
14844: PUSH
14845: LD_INT 8
14847: PUSH
14848: LD_INT 9
14850: PUSH
14851: LD_INT 10
14853: PUSH
14854: LD_INT 11
14856: PUSH
14857: LD_INT 12
14859: PUSH
14860: LD_INT 13
14862: PUSH
14863: LD_INT 14
14865: PUSH
14866: LD_INT 15
14868: PUSH
14869: LD_INT 16
14871: PUSH
14872: LD_INT 17
14874: PUSH
14875: LD_INT 18
14877: PUSH
14878: LD_INT 19
14880: PUSH
14881: LD_INT 20
14883: PUSH
14884: LD_INT 21
14886: PUSH
14887: LD_INT 22
14889: PUSH
14890: LD_INT 23
14892: PUSH
14893: LD_INT 24
14895: PUSH
14896: LD_INT 25
14898: PUSH
14899: LD_INT 26
14901: PUSH
14902: LD_INT 28
14904: PUSH
14905: LD_INT 30
14907: PUSH
14908: LD_INT 31
14910: PUSH
14911: LD_INT 32
14913: PUSH
14914: LD_INT 34
14916: PUSH
14917: LD_INT 36
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 101
14955: PUSH
14956: LD_INT 102
14958: PUSH
14959: LD_INT 103
14961: PUSH
14962: LD_INT 104
14964: PUSH
14965: LD_INT 105
14967: PUSH
14968: LD_INT 106
14970: PUSH
14971: LD_INT 107
14973: PUSH
14974: LD_INT 108
14976: PUSH
14977: LD_INT 109
14979: PUSH
14980: LD_INT 110
14982: PUSH
14983: LD_INT 111
14985: PUSH
14986: LD_INT 112
14988: PUSH
14989: LD_INT 114
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: ST_TO_ADDR
15011: GO 16598
15013: LD_INT 12
15015: DOUBLE
15016: EQUAL
15017: IFTRUE 15021
15019: GO 15229
15021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15022: LD_ADDR_VAR 0 1
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: LD_INT 2
15032: PUSH
15033: LD_INT 3
15035: PUSH
15036: LD_INT 4
15038: PUSH
15039: LD_INT 5
15041: PUSH
15042: LD_INT 6
15044: PUSH
15045: LD_INT 7
15047: PUSH
15048: LD_INT 8
15050: PUSH
15051: LD_INT 9
15053: PUSH
15054: LD_INT 10
15056: PUSH
15057: LD_INT 11
15059: PUSH
15060: LD_INT 12
15062: PUSH
15063: LD_INT 13
15065: PUSH
15066: LD_INT 14
15068: PUSH
15069: LD_INT 15
15071: PUSH
15072: LD_INT 16
15074: PUSH
15075: LD_INT 17
15077: PUSH
15078: LD_INT 18
15080: PUSH
15081: LD_INT 19
15083: PUSH
15084: LD_INT 20
15086: PUSH
15087: LD_INT 21
15089: PUSH
15090: LD_INT 22
15092: PUSH
15093: LD_INT 23
15095: PUSH
15096: LD_INT 24
15098: PUSH
15099: LD_INT 25
15101: PUSH
15102: LD_INT 26
15104: PUSH
15105: LD_INT 27
15107: PUSH
15108: LD_INT 28
15110: PUSH
15111: LD_INT 30
15113: PUSH
15114: LD_INT 31
15116: PUSH
15117: LD_INT 32
15119: PUSH
15120: LD_INT 33
15122: PUSH
15123: LD_INT 34
15125: PUSH
15126: LD_INT 36
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 101
15167: PUSH
15168: LD_INT 102
15170: PUSH
15171: LD_INT 103
15173: PUSH
15174: LD_INT 104
15176: PUSH
15177: LD_INT 105
15179: PUSH
15180: LD_INT 106
15182: PUSH
15183: LD_INT 107
15185: PUSH
15186: LD_INT 108
15188: PUSH
15189: LD_INT 109
15191: PUSH
15192: LD_INT 110
15194: PUSH
15195: LD_INT 111
15197: PUSH
15198: LD_INT 112
15200: PUSH
15201: LD_INT 113
15203: PUSH
15204: LD_INT 114
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: ST_TO_ADDR
15227: GO 16598
15229: LD_INT 13
15231: DOUBLE
15232: EQUAL
15233: IFTRUE 15237
15235: GO 15433
15237: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15238: LD_ADDR_VAR 0 1
15242: PUSH
15243: LD_INT 1
15245: PUSH
15246: LD_INT 2
15248: PUSH
15249: LD_INT 3
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: LD_INT 5
15257: PUSH
15258: LD_INT 8
15260: PUSH
15261: LD_INT 9
15263: PUSH
15264: LD_INT 10
15266: PUSH
15267: LD_INT 11
15269: PUSH
15270: LD_INT 12
15272: PUSH
15273: LD_INT 14
15275: PUSH
15276: LD_INT 15
15278: PUSH
15279: LD_INT 16
15281: PUSH
15282: LD_INT 17
15284: PUSH
15285: LD_INT 18
15287: PUSH
15288: LD_INT 19
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 24
15305: PUSH
15306: LD_INT 25
15308: PUSH
15309: LD_INT 26
15311: PUSH
15312: LD_INT 27
15314: PUSH
15315: LD_INT 28
15317: PUSH
15318: LD_INT 30
15320: PUSH
15321: LD_INT 31
15323: PUSH
15324: LD_INT 32
15326: PUSH
15327: LD_INT 33
15329: PUSH
15330: LD_INT 34
15332: PUSH
15333: LD_INT 36
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 101
15371: PUSH
15372: LD_INT 102
15374: PUSH
15375: LD_INT 103
15377: PUSH
15378: LD_INT 104
15380: PUSH
15381: LD_INT 105
15383: PUSH
15384: LD_INT 106
15386: PUSH
15387: LD_INT 107
15389: PUSH
15390: LD_INT 108
15392: PUSH
15393: LD_INT 109
15395: PUSH
15396: LD_INT 110
15398: PUSH
15399: LD_INT 111
15401: PUSH
15402: LD_INT 112
15404: PUSH
15405: LD_INT 113
15407: PUSH
15408: LD_INT 114
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: ST_TO_ADDR
15431: GO 16598
15433: LD_INT 14
15435: DOUBLE
15436: EQUAL
15437: IFTRUE 15441
15439: GO 15653
15441: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15442: LD_ADDR_VAR 0 1
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: LD_INT 2
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 4
15458: PUSH
15459: LD_INT 5
15461: PUSH
15462: LD_INT 6
15464: PUSH
15465: LD_INT 7
15467: PUSH
15468: LD_INT 8
15470: PUSH
15471: LD_INT 9
15473: PUSH
15474: LD_INT 10
15476: PUSH
15477: LD_INT 11
15479: PUSH
15480: LD_INT 12
15482: PUSH
15483: LD_INT 13
15485: PUSH
15486: LD_INT 14
15488: PUSH
15489: LD_INT 15
15491: PUSH
15492: LD_INT 16
15494: PUSH
15495: LD_INT 17
15497: PUSH
15498: LD_INT 18
15500: PUSH
15501: LD_INT 19
15503: PUSH
15504: LD_INT 20
15506: PUSH
15507: LD_INT 21
15509: PUSH
15510: LD_INT 22
15512: PUSH
15513: LD_INT 23
15515: PUSH
15516: LD_INT 24
15518: PUSH
15519: LD_INT 25
15521: PUSH
15522: LD_INT 26
15524: PUSH
15525: LD_INT 27
15527: PUSH
15528: LD_INT 28
15530: PUSH
15531: LD_INT 29
15533: PUSH
15534: LD_INT 30
15536: PUSH
15537: LD_INT 31
15539: PUSH
15540: LD_INT 32
15542: PUSH
15543: LD_INT 33
15545: PUSH
15546: LD_INT 34
15548: PUSH
15549: LD_INT 36
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 101
15591: PUSH
15592: LD_INT 102
15594: PUSH
15595: LD_INT 103
15597: PUSH
15598: LD_INT 104
15600: PUSH
15601: LD_INT 105
15603: PUSH
15604: LD_INT 106
15606: PUSH
15607: LD_INT 107
15609: PUSH
15610: LD_INT 108
15612: PUSH
15613: LD_INT 109
15615: PUSH
15616: LD_INT 110
15618: PUSH
15619: LD_INT 111
15621: PUSH
15622: LD_INT 112
15624: PUSH
15625: LD_INT 113
15627: PUSH
15628: LD_INT 114
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: ST_TO_ADDR
15651: GO 16598
15653: LD_INT 15
15655: DOUBLE
15656: EQUAL
15657: IFTRUE 15661
15659: GO 15873
15661: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15662: LD_ADDR_VAR 0 1
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: LD_INT 2
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: LD_INT 4
15678: PUSH
15679: LD_INT 5
15681: PUSH
15682: LD_INT 6
15684: PUSH
15685: LD_INT 7
15687: PUSH
15688: LD_INT 8
15690: PUSH
15691: LD_INT 9
15693: PUSH
15694: LD_INT 10
15696: PUSH
15697: LD_INT 11
15699: PUSH
15700: LD_INT 12
15702: PUSH
15703: LD_INT 13
15705: PUSH
15706: LD_INT 14
15708: PUSH
15709: LD_INT 15
15711: PUSH
15712: LD_INT 16
15714: PUSH
15715: LD_INT 17
15717: PUSH
15718: LD_INT 18
15720: PUSH
15721: LD_INT 19
15723: PUSH
15724: LD_INT 20
15726: PUSH
15727: LD_INT 21
15729: PUSH
15730: LD_INT 22
15732: PUSH
15733: LD_INT 23
15735: PUSH
15736: LD_INT 24
15738: PUSH
15739: LD_INT 25
15741: PUSH
15742: LD_INT 26
15744: PUSH
15745: LD_INT 27
15747: PUSH
15748: LD_INT 28
15750: PUSH
15751: LD_INT 29
15753: PUSH
15754: LD_INT 30
15756: PUSH
15757: LD_INT 31
15759: PUSH
15760: LD_INT 32
15762: PUSH
15763: LD_INT 33
15765: PUSH
15766: LD_INT 34
15768: PUSH
15769: LD_INT 36
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 101
15811: PUSH
15812: LD_INT 102
15814: PUSH
15815: LD_INT 103
15817: PUSH
15818: LD_INT 104
15820: PUSH
15821: LD_INT 105
15823: PUSH
15824: LD_INT 106
15826: PUSH
15827: LD_INT 107
15829: PUSH
15830: LD_INT 108
15832: PUSH
15833: LD_INT 109
15835: PUSH
15836: LD_INT 110
15838: PUSH
15839: LD_INT 111
15841: PUSH
15842: LD_INT 112
15844: PUSH
15845: LD_INT 113
15847: PUSH
15848: LD_INT 114
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: ST_TO_ADDR
15871: GO 16598
15873: LD_INT 16
15875: DOUBLE
15876: EQUAL
15877: IFTRUE 15881
15879: GO 16005
15881: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15882: LD_ADDR_VAR 0 1
15886: PUSH
15887: LD_INT 2
15889: PUSH
15890: LD_INT 4
15892: PUSH
15893: LD_INT 5
15895: PUSH
15896: LD_INT 7
15898: PUSH
15899: LD_INT 11
15901: PUSH
15902: LD_INT 12
15904: PUSH
15905: LD_INT 15
15907: PUSH
15908: LD_INT 16
15910: PUSH
15911: LD_INT 20
15913: PUSH
15914: LD_INT 21
15916: PUSH
15917: LD_INT 22
15919: PUSH
15920: LD_INT 23
15922: PUSH
15923: LD_INT 25
15925: PUSH
15926: LD_INT 26
15928: PUSH
15929: LD_INT 30
15931: PUSH
15932: LD_INT 31
15934: PUSH
15935: LD_INT 32
15937: PUSH
15938: LD_INT 33
15940: PUSH
15941: LD_INT 34
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 101
15967: PUSH
15968: LD_INT 102
15970: PUSH
15971: LD_INT 103
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 108
15979: PUSH
15980: LD_INT 112
15982: PUSH
15983: LD_INT 113
15985: PUSH
15986: LD_INT 114
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: ST_TO_ADDR
16003: GO 16598
16005: LD_INT 17
16007: DOUBLE
16008: EQUAL
16009: IFTRUE 16013
16011: GO 16225
16013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16014: LD_ADDR_VAR 0 1
16018: PUSH
16019: LD_INT 1
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: LD_INT 3
16027: PUSH
16028: LD_INT 4
16030: PUSH
16031: LD_INT 5
16033: PUSH
16034: LD_INT 6
16036: PUSH
16037: LD_INT 7
16039: PUSH
16040: LD_INT 8
16042: PUSH
16043: LD_INT 9
16045: PUSH
16046: LD_INT 10
16048: PUSH
16049: LD_INT 11
16051: PUSH
16052: LD_INT 12
16054: PUSH
16055: LD_INT 13
16057: PUSH
16058: LD_INT 14
16060: PUSH
16061: LD_INT 15
16063: PUSH
16064: LD_INT 16
16066: PUSH
16067: LD_INT 17
16069: PUSH
16070: LD_INT 18
16072: PUSH
16073: LD_INT 19
16075: PUSH
16076: LD_INT 20
16078: PUSH
16079: LD_INT 21
16081: PUSH
16082: LD_INT 22
16084: PUSH
16085: LD_INT 23
16087: PUSH
16088: LD_INT 24
16090: PUSH
16091: LD_INT 25
16093: PUSH
16094: LD_INT 26
16096: PUSH
16097: LD_INT 27
16099: PUSH
16100: LD_INT 28
16102: PUSH
16103: LD_INT 29
16105: PUSH
16106: LD_INT 30
16108: PUSH
16109: LD_INT 31
16111: PUSH
16112: LD_INT 32
16114: PUSH
16115: LD_INT 33
16117: PUSH
16118: LD_INT 34
16120: PUSH
16121: LD_INT 36
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 101
16163: PUSH
16164: LD_INT 102
16166: PUSH
16167: LD_INT 103
16169: PUSH
16170: LD_INT 104
16172: PUSH
16173: LD_INT 105
16175: PUSH
16176: LD_INT 106
16178: PUSH
16179: LD_INT 107
16181: PUSH
16182: LD_INT 108
16184: PUSH
16185: LD_INT 109
16187: PUSH
16188: LD_INT 110
16190: PUSH
16191: LD_INT 111
16193: PUSH
16194: LD_INT 112
16196: PUSH
16197: LD_INT 113
16199: PUSH
16200: LD_INT 114
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: ST_TO_ADDR
16223: GO 16598
16225: LD_INT 18
16227: DOUBLE
16228: EQUAL
16229: IFTRUE 16233
16231: GO 16369
16233: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16234: LD_ADDR_VAR 0 1
16238: PUSH
16239: LD_INT 2
16241: PUSH
16242: LD_INT 4
16244: PUSH
16245: LD_INT 5
16247: PUSH
16248: LD_INT 7
16250: PUSH
16251: LD_INT 11
16253: PUSH
16254: LD_INT 12
16256: PUSH
16257: LD_INT 15
16259: PUSH
16260: LD_INT 16
16262: PUSH
16263: LD_INT 20
16265: PUSH
16266: LD_INT 21
16268: PUSH
16269: LD_INT 22
16271: PUSH
16272: LD_INT 23
16274: PUSH
16275: LD_INT 25
16277: PUSH
16278: LD_INT 26
16280: PUSH
16281: LD_INT 30
16283: PUSH
16284: LD_INT 31
16286: PUSH
16287: LD_INT 32
16289: PUSH
16290: LD_INT 33
16292: PUSH
16293: LD_INT 34
16295: PUSH
16296: LD_INT 35
16298: PUSH
16299: LD_INT 36
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 101
16327: PUSH
16328: LD_INT 102
16330: PUSH
16331: LD_INT 103
16333: PUSH
16334: LD_INT 106
16336: PUSH
16337: LD_INT 108
16339: PUSH
16340: LD_INT 112
16342: PUSH
16343: LD_INT 113
16345: PUSH
16346: LD_INT 114
16348: PUSH
16349: LD_INT 115
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: ST_TO_ADDR
16367: GO 16598
16369: LD_INT 19
16371: DOUBLE
16372: EQUAL
16373: IFTRUE 16377
16375: GO 16597
16377: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16378: LD_ADDR_VAR 0 1
16382: PUSH
16383: LD_INT 1
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: LD_INT 3
16391: PUSH
16392: LD_INT 4
16394: PUSH
16395: LD_INT 5
16397: PUSH
16398: LD_INT 6
16400: PUSH
16401: LD_INT 7
16403: PUSH
16404: LD_INT 8
16406: PUSH
16407: LD_INT 9
16409: PUSH
16410: LD_INT 10
16412: PUSH
16413: LD_INT 11
16415: PUSH
16416: LD_INT 12
16418: PUSH
16419: LD_INT 13
16421: PUSH
16422: LD_INT 14
16424: PUSH
16425: LD_INT 15
16427: PUSH
16428: LD_INT 16
16430: PUSH
16431: LD_INT 17
16433: PUSH
16434: LD_INT 18
16436: PUSH
16437: LD_INT 19
16439: PUSH
16440: LD_INT 20
16442: PUSH
16443: LD_INT 21
16445: PUSH
16446: LD_INT 22
16448: PUSH
16449: LD_INT 23
16451: PUSH
16452: LD_INT 24
16454: PUSH
16455: LD_INT 25
16457: PUSH
16458: LD_INT 26
16460: PUSH
16461: LD_INT 27
16463: PUSH
16464: LD_INT 28
16466: PUSH
16467: LD_INT 29
16469: PUSH
16470: LD_INT 30
16472: PUSH
16473: LD_INT 31
16475: PUSH
16476: LD_INT 32
16478: PUSH
16479: LD_INT 33
16481: PUSH
16482: LD_INT 34
16484: PUSH
16485: LD_INT 35
16487: PUSH
16488: LD_INT 36
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 101
16531: PUSH
16532: LD_INT 102
16534: PUSH
16535: LD_INT 103
16537: PUSH
16538: LD_INT 104
16540: PUSH
16541: LD_INT 105
16543: PUSH
16544: LD_INT 106
16546: PUSH
16547: LD_INT 107
16549: PUSH
16550: LD_INT 108
16552: PUSH
16553: LD_INT 109
16555: PUSH
16556: LD_INT 110
16558: PUSH
16559: LD_INT 111
16561: PUSH
16562: LD_INT 112
16564: PUSH
16565: LD_INT 113
16567: PUSH
16568: LD_INT 114
16570: PUSH
16571: LD_INT 115
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: ST_TO_ADDR
16595: GO 16598
16597: POP
// end else
16598: GO 16817
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16600: LD_ADDR_VAR 0 1
16604: PUSH
16605: LD_INT 1
16607: PUSH
16608: LD_INT 2
16610: PUSH
16611: LD_INT 3
16613: PUSH
16614: LD_INT 4
16616: PUSH
16617: LD_INT 5
16619: PUSH
16620: LD_INT 6
16622: PUSH
16623: LD_INT 7
16625: PUSH
16626: LD_INT 8
16628: PUSH
16629: LD_INT 9
16631: PUSH
16632: LD_INT 10
16634: PUSH
16635: LD_INT 11
16637: PUSH
16638: LD_INT 12
16640: PUSH
16641: LD_INT 13
16643: PUSH
16644: LD_INT 14
16646: PUSH
16647: LD_INT 15
16649: PUSH
16650: LD_INT 16
16652: PUSH
16653: LD_INT 17
16655: PUSH
16656: LD_INT 18
16658: PUSH
16659: LD_INT 19
16661: PUSH
16662: LD_INT 20
16664: PUSH
16665: LD_INT 21
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_INT 23
16673: PUSH
16674: LD_INT 24
16676: PUSH
16677: LD_INT 25
16679: PUSH
16680: LD_INT 26
16682: PUSH
16683: LD_INT 27
16685: PUSH
16686: LD_INT 28
16688: PUSH
16689: LD_INT 29
16691: PUSH
16692: LD_INT 30
16694: PUSH
16695: LD_INT 31
16697: PUSH
16698: LD_INT 32
16700: PUSH
16701: LD_INT 33
16703: PUSH
16704: LD_INT 34
16706: PUSH
16707: LD_INT 35
16709: PUSH
16710: LD_INT 36
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 101
16753: PUSH
16754: LD_INT 102
16756: PUSH
16757: LD_INT 103
16759: PUSH
16760: LD_INT 104
16762: PUSH
16763: LD_INT 105
16765: PUSH
16766: LD_INT 106
16768: PUSH
16769: LD_INT 107
16771: PUSH
16772: LD_INT 108
16774: PUSH
16775: LD_INT 109
16777: PUSH
16778: LD_INT 110
16780: PUSH
16781: LD_INT 111
16783: PUSH
16784: LD_INT 112
16786: PUSH
16787: LD_INT 113
16789: PUSH
16790: LD_INT 114
16792: PUSH
16793: LD_INT 115
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: ST_TO_ADDR
// if result then
16817: LD_VAR 0 1
16821: IFFALSE 17110
// begin normal :=  ;
16823: LD_ADDR_VAR 0 3
16827: PUSH
16828: LD_STRING 
16830: ST_TO_ADDR
// hardcore :=  ;
16831: LD_ADDR_VAR 0 4
16835: PUSH
16836: LD_STRING 
16838: ST_TO_ADDR
// for i = 1 to normalCounter do
16839: LD_ADDR_VAR 0 5
16843: PUSH
16844: DOUBLE
16845: LD_INT 1
16847: DEC
16848: ST_TO_ADDR
16849: LD_EXP 38
16853: PUSH
16854: FOR_TO
16855: IFFALSE 16956
// begin tmp := 0 ;
16857: LD_ADDR_VAR 0 2
16861: PUSH
16862: LD_STRING 0
16864: ST_TO_ADDR
// if result [ 1 ] then
16865: LD_VAR 0 1
16869: PUSH
16870: LD_INT 1
16872: ARRAY
16873: IFFALSE 16938
// if result [ 1 ] [ 1 ] = i then
16875: LD_VAR 0 1
16879: PUSH
16880: LD_INT 1
16882: ARRAY
16883: PUSH
16884: LD_INT 1
16886: ARRAY
16887: PUSH
16888: LD_VAR 0 5
16892: EQUAL
16893: IFFALSE 16938
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16895: LD_ADDR_VAR 0 1
16899: PUSH
16900: LD_VAR 0 1
16904: PPUSH
16905: LD_INT 1
16907: PPUSH
16908: LD_VAR 0 1
16912: PUSH
16913: LD_INT 1
16915: ARRAY
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: CALL_OW 3
16924: PPUSH
16925: CALL_OW 1
16929: ST_TO_ADDR
// tmp := 1 ;
16930: LD_ADDR_VAR 0 2
16934: PUSH
16935: LD_STRING 1
16937: ST_TO_ADDR
// end ; normal := normal & tmp ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: LD_VAR 0 3
16947: PUSH
16948: LD_VAR 0 2
16952: STR
16953: ST_TO_ADDR
// end ;
16954: GO 16854
16956: POP
16957: POP
// for i = 1 to hardcoreCounter do
16958: LD_ADDR_VAR 0 5
16962: PUSH
16963: DOUBLE
16964: LD_INT 1
16966: DEC
16967: ST_TO_ADDR
16968: LD_EXP 39
16972: PUSH
16973: FOR_TO
16974: IFFALSE 17079
// begin tmp := 0 ;
16976: LD_ADDR_VAR 0 2
16980: PUSH
16981: LD_STRING 0
16983: ST_TO_ADDR
// if result [ 2 ] then
16984: LD_VAR 0 1
16988: PUSH
16989: LD_INT 2
16991: ARRAY
16992: IFFALSE 17061
// if result [ 2 ] [ 1 ] = 100 + i then
16994: LD_VAR 0 1
16998: PUSH
16999: LD_INT 2
17001: ARRAY
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PUSH
17007: LD_INT 100
17009: PUSH
17010: LD_VAR 0 5
17014: PLUS
17015: EQUAL
17016: IFFALSE 17061
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17018: LD_ADDR_VAR 0 1
17022: PUSH
17023: LD_VAR 0 1
17027: PPUSH
17028: LD_INT 2
17030: PPUSH
17031: LD_VAR 0 1
17035: PUSH
17036: LD_INT 2
17038: ARRAY
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: CALL_OW 3
17047: PPUSH
17048: CALL_OW 1
17052: ST_TO_ADDR
// tmp := 1 ;
17053: LD_ADDR_VAR 0 2
17057: PUSH
17058: LD_STRING 1
17060: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17061: LD_ADDR_VAR 0 4
17065: PUSH
17066: LD_VAR 0 4
17070: PUSH
17071: LD_VAR 0 2
17075: STR
17076: ST_TO_ADDR
// end ;
17077: GO 16973
17079: POP
17080: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17081: LD_STRING getStreamItemsFromMission("
17083: PUSH
17084: LD_VAR 0 3
17088: STR
17089: PUSH
17090: LD_STRING ","
17092: STR
17093: PUSH
17094: LD_VAR 0 4
17098: STR
17099: PUSH
17100: LD_STRING ")
17102: STR
17103: PPUSH
17104: CALL_OW 559
// end else
17108: GO 17117
// ToLua ( getStreamItemsFromMission("","") ) ;
17110: LD_STRING getStreamItemsFromMission("","")
17112: PPUSH
17113: CALL_OW 559
// end ;
17117: LD_VAR 0 1
17121: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17122: LD_EXP 37
17126: PUSH
17127: LD_EXP 42
17131: AND
17132: IFFALSE 17256
17134: GO 17136
17136: DISABLE
17137: LD_INT 0
17139: PPUSH
17140: PPUSH
// begin enable ;
17141: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17142: LD_ADDR_VAR 0 2
17146: PUSH
17147: LD_INT 22
17149: PUSH
17150: LD_OWVAR 2
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 2
17161: PUSH
17162: LD_INT 34
17164: PUSH
17165: LD_INT 7
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 34
17174: PUSH
17175: LD_INT 45
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 34
17184: PUSH
17185: LD_INT 28
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 34
17194: PUSH
17195: LD_INT 47
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PPUSH
17213: CALL_OW 69
17217: ST_TO_ADDR
// if not tmp then
17218: LD_VAR 0 2
17222: NOT
17223: IFFALSE 17227
// exit ;
17225: GO 17256
// for i in tmp do
17227: LD_ADDR_VAR 0 1
17231: PUSH
17232: LD_VAR 0 2
17236: PUSH
17237: FOR_IN
17238: IFFALSE 17254
// begin SetLives ( i , 0 ) ;
17240: LD_VAR 0 1
17244: PPUSH
17245: LD_INT 0
17247: PPUSH
17248: CALL_OW 234
// end ;
17252: GO 17237
17254: POP
17255: POP
// end ;
17256: PPOPN 2
17258: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17259: LD_EXP 37
17263: PUSH
17264: LD_EXP 43
17268: AND
17269: IFFALSE 17353
17271: GO 17273
17273: DISABLE
17274: LD_INT 0
17276: PPUSH
17277: PPUSH
// begin enable ;
17278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17279: LD_ADDR_VAR 0 2
17283: PUSH
17284: LD_INT 22
17286: PUSH
17287: LD_OWVAR 2
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 32
17298: PUSH
17299: LD_INT 3
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PPUSH
17310: CALL_OW 69
17314: ST_TO_ADDR
// if not tmp then
17315: LD_VAR 0 2
17319: NOT
17320: IFFALSE 17324
// exit ;
17322: GO 17353
// for i in tmp do
17324: LD_ADDR_VAR 0 1
17328: PUSH
17329: LD_VAR 0 2
17333: PUSH
17334: FOR_IN
17335: IFFALSE 17351
// begin SetLives ( i , 0 ) ;
17337: LD_VAR 0 1
17341: PPUSH
17342: LD_INT 0
17344: PPUSH
17345: CALL_OW 234
// end ;
17349: GO 17334
17351: POP
17352: POP
// end ;
17353: PPOPN 2
17355: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17356: LD_EXP 37
17360: PUSH
17361: LD_EXP 40
17365: AND
17366: IFFALSE 17459
17368: GO 17370
17370: DISABLE
17371: LD_INT 0
17373: PPUSH
// begin enable ;
17374: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17375: LD_ADDR_VAR 0 1
17379: PUSH
17380: LD_INT 22
17382: PUSH
17383: LD_OWVAR 2
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 2
17394: PUSH
17395: LD_INT 25
17397: PUSH
17398: LD_INT 5
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 25
17407: PUSH
17408: LD_INT 9
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 25
17417: PUSH
17418: LD_INT 8
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PPUSH
17435: CALL_OW 69
17439: PUSH
17440: FOR_IN
17441: IFFALSE 17457
// begin SetClass ( i , 1 ) ;
17443: LD_VAR 0 1
17447: PPUSH
17448: LD_INT 1
17450: PPUSH
17451: CALL_OW 336
// end ;
17455: GO 17440
17457: POP
17458: POP
// end ;
17459: PPOPN 1
17461: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17462: LD_EXP 37
17466: PUSH
17467: LD_EXP 41
17471: AND
17472: PUSH
17473: LD_OWVAR 65
17477: PUSH
17478: LD_INT 7
17480: LESS
17481: AND
17482: IFFALSE 17496
17484: GO 17486
17486: DISABLE
// begin enable ;
17487: ENABLE
// game_speed := 7 ;
17488: LD_ADDR_OWVAR 65
17492: PUSH
17493: LD_INT 7
17495: ST_TO_ADDR
// end ;
17496: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17497: LD_EXP 37
17501: PUSH
17502: LD_EXP 44
17506: AND
17507: IFFALSE 17709
17509: GO 17511
17511: DISABLE
17512: LD_INT 0
17514: PPUSH
17515: PPUSH
17516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17517: LD_ADDR_VAR 0 3
17521: PUSH
17522: LD_INT 81
17524: PUSH
17525: LD_OWVAR 2
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 21
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PPUSH
17548: CALL_OW 69
17552: ST_TO_ADDR
// if not tmp then
17553: LD_VAR 0 3
17557: NOT
17558: IFFALSE 17562
// exit ;
17560: GO 17709
// if tmp > 5 then
17562: LD_VAR 0 3
17566: PUSH
17567: LD_INT 5
17569: GREATER
17570: IFFALSE 17582
// k := 5 else
17572: LD_ADDR_VAR 0 2
17576: PUSH
17577: LD_INT 5
17579: ST_TO_ADDR
17580: GO 17592
// k := tmp ;
17582: LD_ADDR_VAR 0 2
17586: PUSH
17587: LD_VAR 0 3
17591: ST_TO_ADDR
// for i := 1 to k do
17592: LD_ADDR_VAR 0 1
17596: PUSH
17597: DOUBLE
17598: LD_INT 1
17600: DEC
17601: ST_TO_ADDR
17602: LD_VAR 0 2
17606: PUSH
17607: FOR_TO
17608: IFFALSE 17707
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17610: LD_VAR 0 3
17614: PUSH
17615: LD_VAR 0 1
17619: ARRAY
17620: PPUSH
17621: LD_VAR 0 1
17625: PUSH
17626: LD_INT 4
17628: MOD
17629: PUSH
17630: LD_INT 1
17632: PLUS
17633: PPUSH
17634: CALL_OW 259
17638: PUSH
17639: LD_INT 10
17641: LESS
17642: IFFALSE 17705
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17644: LD_VAR 0 3
17648: PUSH
17649: LD_VAR 0 1
17653: ARRAY
17654: PPUSH
17655: LD_VAR 0 1
17659: PUSH
17660: LD_INT 4
17662: MOD
17663: PUSH
17664: LD_INT 1
17666: PLUS
17667: PPUSH
17668: LD_VAR 0 3
17672: PUSH
17673: LD_VAR 0 1
17677: ARRAY
17678: PPUSH
17679: LD_VAR 0 1
17683: PUSH
17684: LD_INT 4
17686: MOD
17687: PUSH
17688: LD_INT 1
17690: PLUS
17691: PPUSH
17692: CALL_OW 259
17696: PUSH
17697: LD_INT 1
17699: PLUS
17700: PPUSH
17701: CALL_OW 237
17705: GO 17607
17707: POP
17708: POP
// end ;
17709: PPOPN 3
17711: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17712: LD_EXP 37
17716: PUSH
17717: LD_EXP 45
17721: AND
17722: IFFALSE 17742
17724: GO 17726
17726: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17727: LD_INT 4
17729: PPUSH
17730: LD_OWVAR 2
17734: PPUSH
17735: LD_INT 0
17737: PPUSH
17738: CALL_OW 324
17742: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17743: LD_EXP 37
17747: PUSH
17748: LD_EXP 74
17752: AND
17753: IFFALSE 17773
17755: GO 17757
17757: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17758: LD_INT 19
17760: PPUSH
17761: LD_OWVAR 2
17765: PPUSH
17766: LD_INT 0
17768: PPUSH
17769: CALL_OW 324
17773: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17774: LD_EXP 37
17778: PUSH
17779: LD_EXP 46
17783: AND
17784: IFFALSE 17886
17786: GO 17788
17788: DISABLE
17789: LD_INT 0
17791: PPUSH
17792: PPUSH
// begin enable ;
17793: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17794: LD_ADDR_VAR 0 2
17798: PUSH
17799: LD_INT 22
17801: PUSH
17802: LD_OWVAR 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 2
17813: PUSH
17814: LD_INT 34
17816: PUSH
17817: LD_INT 11
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 34
17826: PUSH
17827: LD_INT 30
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PPUSH
17843: CALL_OW 69
17847: ST_TO_ADDR
// if not tmp then
17848: LD_VAR 0 2
17852: NOT
17853: IFFALSE 17857
// exit ;
17855: GO 17886
// for i in tmp do
17857: LD_ADDR_VAR 0 1
17861: PUSH
17862: LD_VAR 0 2
17866: PUSH
17867: FOR_IN
17868: IFFALSE 17884
// begin SetLives ( i , 0 ) ;
17870: LD_VAR 0 1
17874: PPUSH
17875: LD_INT 0
17877: PPUSH
17878: CALL_OW 234
// end ;
17882: GO 17867
17884: POP
17885: POP
// end ;
17886: PPOPN 2
17888: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17889: LD_EXP 37
17893: PUSH
17894: LD_EXP 47
17898: AND
17899: IFFALSE 17919
17901: GO 17903
17903: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17904: LD_INT 32
17906: PPUSH
17907: LD_OWVAR 2
17911: PPUSH
17912: LD_INT 0
17914: PPUSH
17915: CALL_OW 324
17919: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17920: LD_EXP 37
17924: PUSH
17925: LD_EXP 48
17929: AND
17930: IFFALSE 18111
17932: GO 17934
17934: DISABLE
17935: LD_INT 0
17937: PPUSH
17938: PPUSH
17939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17940: LD_ADDR_VAR 0 2
17944: PUSH
17945: LD_INT 22
17947: PUSH
17948: LD_OWVAR 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 33
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PPUSH
17971: CALL_OW 69
17975: ST_TO_ADDR
// if not tmp then
17976: LD_VAR 0 2
17980: NOT
17981: IFFALSE 17985
// exit ;
17983: GO 18111
// side := 0 ;
17985: LD_ADDR_VAR 0 3
17989: PUSH
17990: LD_INT 0
17992: ST_TO_ADDR
// for i := 1 to 8 do
17993: LD_ADDR_VAR 0 1
17997: PUSH
17998: DOUBLE
17999: LD_INT 1
18001: DEC
18002: ST_TO_ADDR
18003: LD_INT 8
18005: PUSH
18006: FOR_TO
18007: IFFALSE 18055
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18009: LD_OWVAR 2
18013: PUSH
18014: LD_VAR 0 1
18018: NONEQUAL
18019: PUSH
18020: LD_OWVAR 2
18024: PPUSH
18025: LD_VAR 0 1
18029: PPUSH
18030: CALL_OW 81
18034: PUSH
18035: LD_INT 2
18037: EQUAL
18038: AND
18039: IFFALSE 18053
// begin side := i ;
18041: LD_ADDR_VAR 0 3
18045: PUSH
18046: LD_VAR 0 1
18050: ST_TO_ADDR
// break ;
18051: GO 18055
// end ;
18053: GO 18006
18055: POP
18056: POP
// if not side then
18057: LD_VAR 0 3
18061: NOT
18062: IFFALSE 18066
// exit ;
18064: GO 18111
// for i := 1 to tmp do
18066: LD_ADDR_VAR 0 1
18070: PUSH
18071: DOUBLE
18072: LD_INT 1
18074: DEC
18075: ST_TO_ADDR
18076: LD_VAR 0 2
18080: PUSH
18081: FOR_TO
18082: IFFALSE 18109
// if Prob ( 60 ) then
18084: LD_INT 60
18086: PPUSH
18087: CALL_OW 13
18091: IFFALSE 18107
// SetSide ( i , side ) ;
18093: LD_VAR 0 1
18097: PPUSH
18098: LD_VAR 0 3
18102: PPUSH
18103: CALL_OW 235
18107: GO 18081
18109: POP
18110: POP
// end ;
18111: PPOPN 3
18113: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18114: LD_EXP 37
18118: PUSH
18119: LD_EXP 50
18123: AND
18124: IFFALSE 18243
18126: GO 18128
18128: DISABLE
18129: LD_INT 0
18131: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18132: LD_ADDR_VAR 0 1
18136: PUSH
18137: LD_INT 22
18139: PUSH
18140: LD_OWVAR 2
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 21
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 3
18161: PUSH
18162: LD_INT 23
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: PPUSH
18181: CALL_OW 69
18185: PUSH
18186: FOR_IN
18187: IFFALSE 18241
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18189: LD_VAR 0 1
18193: PPUSH
18194: CALL_OW 257
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: LD_INT 2
18204: PUSH
18205: LD_INT 3
18207: PUSH
18208: LD_INT 4
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: IN
18217: IFFALSE 18239
// SetClass ( un , rand ( 1 , 4 ) ) ;
18219: LD_VAR 0 1
18223: PPUSH
18224: LD_INT 1
18226: PPUSH
18227: LD_INT 4
18229: PPUSH
18230: CALL_OW 12
18234: PPUSH
18235: CALL_OW 336
18239: GO 18186
18241: POP
18242: POP
// end ;
18243: PPOPN 1
18245: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18246: LD_EXP 37
18250: PUSH
18251: LD_EXP 49
18255: AND
18256: IFFALSE 18335
18258: GO 18260
18260: DISABLE
18261: LD_INT 0
18263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18264: LD_ADDR_VAR 0 1
18268: PUSH
18269: LD_INT 22
18271: PUSH
18272: LD_OWVAR 2
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 21
18283: PUSH
18284: LD_INT 3
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PPUSH
18295: CALL_OW 69
18299: ST_TO_ADDR
// if not tmp then
18300: LD_VAR 0 1
18304: NOT
18305: IFFALSE 18309
// exit ;
18307: GO 18335
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18309: LD_VAR 0 1
18313: PUSH
18314: LD_INT 1
18316: PPUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 12
18326: ARRAY
18327: PPUSH
18328: LD_INT 100
18330: PPUSH
18331: CALL_OW 234
// end ;
18335: PPOPN 1
18337: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18338: LD_EXP 37
18342: PUSH
18343: LD_EXP 51
18347: AND
18348: IFFALSE 18446
18350: GO 18352
18352: DISABLE
18353: LD_INT 0
18355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18356: LD_ADDR_VAR 0 1
18360: PUSH
18361: LD_INT 22
18363: PUSH
18364: LD_OWVAR 2
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 21
18375: PUSH
18376: LD_INT 1
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PPUSH
18387: CALL_OW 69
18391: ST_TO_ADDR
// if not tmp then
18392: LD_VAR 0 1
18396: NOT
18397: IFFALSE 18401
// exit ;
18399: GO 18446
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18401: LD_VAR 0 1
18405: PUSH
18406: LD_INT 1
18408: PPUSH
18409: LD_VAR 0 1
18413: PPUSH
18414: CALL_OW 12
18418: ARRAY
18419: PPUSH
18420: LD_INT 1
18422: PPUSH
18423: LD_INT 4
18425: PPUSH
18426: CALL_OW 12
18430: PPUSH
18431: LD_INT 3000
18433: PPUSH
18434: LD_INT 9000
18436: PPUSH
18437: CALL_OW 12
18441: PPUSH
18442: CALL_OW 492
// end ;
18446: PPOPN 1
18448: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18449: LD_EXP 37
18453: PUSH
18454: LD_EXP 52
18458: AND
18459: IFFALSE 18479
18461: GO 18463
18463: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18464: LD_INT 1
18466: PPUSH
18467: LD_OWVAR 2
18471: PPUSH
18472: LD_INT 0
18474: PPUSH
18475: CALL_OW 324
18479: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18480: LD_EXP 37
18484: PUSH
18485: LD_EXP 53
18489: AND
18490: IFFALSE 18573
18492: GO 18494
18494: DISABLE
18495: LD_INT 0
18497: PPUSH
18498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18499: LD_ADDR_VAR 0 2
18503: PUSH
18504: LD_INT 22
18506: PUSH
18507: LD_OWVAR 2
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 21
18518: PUSH
18519: LD_INT 3
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PPUSH
18530: CALL_OW 69
18534: ST_TO_ADDR
// if not tmp then
18535: LD_VAR 0 2
18539: NOT
18540: IFFALSE 18544
// exit ;
18542: GO 18573
// for i in tmp do
18544: LD_ADDR_VAR 0 1
18548: PUSH
18549: LD_VAR 0 2
18553: PUSH
18554: FOR_IN
18555: IFFALSE 18571
// SetBLevel ( i , 10 ) ;
18557: LD_VAR 0 1
18561: PPUSH
18562: LD_INT 10
18564: PPUSH
18565: CALL_OW 241
18569: GO 18554
18571: POP
18572: POP
// end ;
18573: PPOPN 2
18575: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18576: LD_EXP 37
18580: PUSH
18581: LD_EXP 54
18585: AND
18586: IFFALSE 18697
18588: GO 18590
18590: DISABLE
18591: LD_INT 0
18593: PPUSH
18594: PPUSH
18595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18596: LD_ADDR_VAR 0 3
18600: PUSH
18601: LD_INT 22
18603: PUSH
18604: LD_OWVAR 2
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 25
18615: PUSH
18616: LD_INT 1
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PPUSH
18627: CALL_OW 69
18631: ST_TO_ADDR
// if not tmp then
18632: LD_VAR 0 3
18636: NOT
18637: IFFALSE 18641
// exit ;
18639: GO 18697
// un := tmp [ rand ( 1 , tmp ) ] ;
18641: LD_ADDR_VAR 0 2
18645: PUSH
18646: LD_VAR 0 3
18650: PUSH
18651: LD_INT 1
18653: PPUSH
18654: LD_VAR 0 3
18658: PPUSH
18659: CALL_OW 12
18663: ARRAY
18664: ST_TO_ADDR
// if Crawls ( un ) then
18665: LD_VAR 0 2
18669: PPUSH
18670: CALL_OW 318
18674: IFFALSE 18685
// ComWalk ( un ) ;
18676: LD_VAR 0 2
18680: PPUSH
18681: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18685: LD_VAR 0 2
18689: PPUSH
18690: LD_INT 5
18692: PPUSH
18693: CALL_OW 336
// end ;
18697: PPOPN 3
18699: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18700: LD_EXP 37
18704: PUSH
18705: LD_EXP 55
18709: AND
18710: PUSH
18711: LD_OWVAR 67
18715: PUSH
18716: LD_INT 3
18718: LESS
18719: AND
18720: IFFALSE 18739
18722: GO 18724
18724: DISABLE
// Difficulty := Difficulty + 1 ;
18725: LD_ADDR_OWVAR 67
18729: PUSH
18730: LD_OWVAR 67
18734: PUSH
18735: LD_INT 1
18737: PLUS
18738: ST_TO_ADDR
18739: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18740: LD_EXP 37
18744: PUSH
18745: LD_EXP 56
18749: AND
18750: IFFALSE 18853
18752: GO 18754
18754: DISABLE
18755: LD_INT 0
18757: PPUSH
// begin for i := 1 to 5 do
18758: LD_ADDR_VAR 0 1
18762: PUSH
18763: DOUBLE
18764: LD_INT 1
18766: DEC
18767: ST_TO_ADDR
18768: LD_INT 5
18770: PUSH
18771: FOR_TO
18772: IFFALSE 18851
// begin uc_nation := nation_nature ;
18774: LD_ADDR_OWVAR 21
18778: PUSH
18779: LD_INT 0
18781: ST_TO_ADDR
// uc_side := 0 ;
18782: LD_ADDR_OWVAR 20
18786: PUSH
18787: LD_INT 0
18789: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18790: LD_ADDR_OWVAR 29
18794: PUSH
18795: LD_INT 12
18797: PUSH
18798: LD_INT 12
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: ST_TO_ADDR
// hc_agressivity := 20 ;
18805: LD_ADDR_OWVAR 35
18809: PUSH
18810: LD_INT 20
18812: ST_TO_ADDR
// hc_class := class_tiger ;
18813: LD_ADDR_OWVAR 28
18817: PUSH
18818: LD_INT 14
18820: ST_TO_ADDR
// hc_gallery :=  ;
18821: LD_ADDR_OWVAR 33
18825: PUSH
18826: LD_STRING 
18828: ST_TO_ADDR
// hc_name :=  ;
18829: LD_ADDR_OWVAR 26
18833: PUSH
18834: LD_STRING 
18836: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18837: CALL_OW 44
18841: PPUSH
18842: LD_INT 0
18844: PPUSH
18845: CALL_OW 51
// end ;
18849: GO 18771
18851: POP
18852: POP
// end ;
18853: PPOPN 1
18855: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18856: LD_EXP 37
18860: PUSH
18861: LD_EXP 57
18865: AND
18866: IFFALSE 18875
18868: GO 18870
18870: DISABLE
// StreamSibBomb ;
18871: CALL 18876 0 0
18875: END
// export function StreamSibBomb ; var i , x , y ; begin
18876: LD_INT 0
18878: PPUSH
18879: PPUSH
18880: PPUSH
18881: PPUSH
// result := false ;
18882: LD_ADDR_VAR 0 1
18886: PUSH
18887: LD_INT 0
18889: ST_TO_ADDR
// for i := 1 to 16 do
18890: LD_ADDR_VAR 0 2
18894: PUSH
18895: DOUBLE
18896: LD_INT 1
18898: DEC
18899: ST_TO_ADDR
18900: LD_INT 16
18902: PUSH
18903: FOR_TO
18904: IFFALSE 19103
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18906: LD_ADDR_VAR 0 3
18910: PUSH
18911: LD_INT 10
18913: PUSH
18914: LD_INT 20
18916: PUSH
18917: LD_INT 30
18919: PUSH
18920: LD_INT 40
18922: PUSH
18923: LD_INT 50
18925: PUSH
18926: LD_INT 60
18928: PUSH
18929: LD_INT 70
18931: PUSH
18932: LD_INT 80
18934: PUSH
18935: LD_INT 90
18937: PUSH
18938: LD_INT 100
18940: PUSH
18941: LD_INT 110
18943: PUSH
18944: LD_INT 120
18946: PUSH
18947: LD_INT 130
18949: PUSH
18950: LD_INT 140
18952: PUSH
18953: LD_INT 150
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 1
18975: PPUSH
18976: LD_INT 15
18978: PPUSH
18979: CALL_OW 12
18983: ARRAY
18984: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18985: LD_ADDR_VAR 0 4
18989: PUSH
18990: LD_INT 10
18992: PUSH
18993: LD_INT 20
18995: PUSH
18996: LD_INT 30
18998: PUSH
18999: LD_INT 40
19001: PUSH
19002: LD_INT 50
19004: PUSH
19005: LD_INT 60
19007: PUSH
19008: LD_INT 70
19010: PUSH
19011: LD_INT 80
19013: PUSH
19014: LD_INT 90
19016: PUSH
19017: LD_INT 100
19019: PUSH
19020: LD_INT 110
19022: PUSH
19023: LD_INT 120
19025: PUSH
19026: LD_INT 130
19028: PUSH
19029: LD_INT 140
19031: PUSH
19032: LD_INT 150
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 1
19054: PPUSH
19055: LD_INT 15
19057: PPUSH
19058: CALL_OW 12
19062: ARRAY
19063: ST_TO_ADDR
// if ValidHex ( x , y ) then
19064: LD_VAR 0 3
19068: PPUSH
19069: LD_VAR 0 4
19073: PPUSH
19074: CALL_OW 488
19078: IFFALSE 19101
// begin result := [ x , y ] ;
19080: LD_ADDR_VAR 0 1
19084: PUSH
19085: LD_VAR 0 3
19089: PUSH
19090: LD_VAR 0 4
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: ST_TO_ADDR
// break ;
19099: GO 19103
// end ; end ;
19101: GO 18903
19103: POP
19104: POP
// if result then
19105: LD_VAR 0 1
19109: IFFALSE 19169
// begin ToLua ( playSibBomb() ) ;
19111: LD_STRING playSibBomb()
19113: PPUSH
19114: CALL_OW 559
// wait ( 0 0$14 ) ;
19118: LD_INT 490
19120: PPUSH
19121: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19125: LD_VAR 0 1
19129: PUSH
19130: LD_INT 1
19132: ARRAY
19133: PPUSH
19134: LD_VAR 0 1
19138: PUSH
19139: LD_INT 2
19141: ARRAY
19142: PPUSH
19143: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19147: LD_VAR 0 1
19151: PUSH
19152: LD_INT 1
19154: ARRAY
19155: PPUSH
19156: LD_VAR 0 1
19160: PUSH
19161: LD_INT 2
19163: ARRAY
19164: PPUSH
19165: CALL_OW 429
// end ; end ;
19169: LD_VAR 0 1
19173: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19174: LD_EXP 37
19178: PUSH
19179: LD_EXP 59
19183: AND
19184: IFFALSE 19196
19186: GO 19188
19188: DISABLE
// YouLost (  ) ;
19189: LD_STRING 
19191: PPUSH
19192: CALL_OW 104
19196: END
// every 0 0$1 trigger StreamModeActive and sFog do
19197: LD_EXP 37
19201: PUSH
19202: LD_EXP 58
19206: AND
19207: IFFALSE 19221
19209: GO 19211
19211: DISABLE
// FogOff ( your_side ) ;
19212: LD_OWVAR 2
19216: PPUSH
19217: CALL_OW 344
19221: END
// every 0 0$1 trigger StreamModeActive and sSun do
19222: LD_EXP 37
19226: PUSH
19227: LD_EXP 60
19231: AND
19232: IFFALSE 19260
19234: GO 19236
19236: DISABLE
// begin solar_recharge_percent := 0 ;
19237: LD_ADDR_OWVAR 79
19241: PUSH
19242: LD_INT 0
19244: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19245: LD_INT 10500
19247: PPUSH
19248: CALL_OW 67
// solar_recharge_percent := 100 ;
19252: LD_ADDR_OWVAR 79
19256: PUSH
19257: LD_INT 100
19259: ST_TO_ADDR
// end ;
19260: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19261: LD_EXP 37
19265: PUSH
19266: LD_EXP 61
19270: AND
19271: IFFALSE 19510
19273: GO 19275
19275: DISABLE
19276: LD_INT 0
19278: PPUSH
19279: PPUSH
19280: PPUSH
// begin tmp := [ ] ;
19281: LD_ADDR_VAR 0 3
19285: PUSH
19286: EMPTY
19287: ST_TO_ADDR
// for i := 1 to 6 do
19288: LD_ADDR_VAR 0 1
19292: PUSH
19293: DOUBLE
19294: LD_INT 1
19296: DEC
19297: ST_TO_ADDR
19298: LD_INT 6
19300: PUSH
19301: FOR_TO
19302: IFFALSE 19407
// begin uc_nation := nation_nature ;
19304: LD_ADDR_OWVAR 21
19308: PUSH
19309: LD_INT 0
19311: ST_TO_ADDR
// uc_side := 0 ;
19312: LD_ADDR_OWVAR 20
19316: PUSH
19317: LD_INT 0
19319: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19320: LD_ADDR_OWVAR 29
19324: PUSH
19325: LD_INT 12
19327: PUSH
19328: LD_INT 12
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: ST_TO_ADDR
// hc_agressivity := 20 ;
19335: LD_ADDR_OWVAR 35
19339: PUSH
19340: LD_INT 20
19342: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19343: LD_ADDR_OWVAR 28
19347: PUSH
19348: LD_INT 17
19350: ST_TO_ADDR
// hc_gallery :=  ;
19351: LD_ADDR_OWVAR 33
19355: PUSH
19356: LD_STRING 
19358: ST_TO_ADDR
// hc_name :=  ;
19359: LD_ADDR_OWVAR 26
19363: PUSH
19364: LD_STRING 
19366: ST_TO_ADDR
// un := CreateHuman ;
19367: LD_ADDR_VAR 0 2
19371: PUSH
19372: CALL_OW 44
19376: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19377: LD_VAR 0 2
19381: PPUSH
19382: LD_INT 1
19384: PPUSH
19385: CALL_OW 51
// tmp := tmp ^ un ;
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: LD_VAR 0 3
19398: PUSH
19399: LD_VAR 0 2
19403: ADD
19404: ST_TO_ADDR
// end ;
19405: GO 19301
19407: POP
19408: POP
// repeat wait ( 0 0$1 ) ;
19409: LD_INT 35
19411: PPUSH
19412: CALL_OW 67
// for un in tmp do
19416: LD_ADDR_VAR 0 2
19420: PUSH
19421: LD_VAR 0 3
19425: PUSH
19426: FOR_IN
19427: IFFALSE 19501
// begin if IsDead ( un ) then
19429: LD_VAR 0 2
19433: PPUSH
19434: CALL_OW 301
19438: IFFALSE 19458
// begin tmp := tmp diff un ;
19440: LD_ADDR_VAR 0 3
19444: PUSH
19445: LD_VAR 0 3
19449: PUSH
19450: LD_VAR 0 2
19454: DIFF
19455: ST_TO_ADDR
// continue ;
19456: GO 19426
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19458: LD_VAR 0 2
19462: PPUSH
19463: LD_INT 3
19465: PUSH
19466: LD_INT 22
19468: PUSH
19469: LD_INT 0
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PPUSH
19480: CALL_OW 69
19484: PPUSH
19485: LD_VAR 0 2
19489: PPUSH
19490: CALL_OW 74
19494: PPUSH
19495: CALL_OW 115
// end ;
19499: GO 19426
19501: POP
19502: POP
// until not tmp ;
19503: LD_VAR 0 3
19507: NOT
19508: IFFALSE 19409
// end ;
19510: PPOPN 3
19512: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19513: LD_EXP 37
19517: PUSH
19518: LD_EXP 62
19522: AND
19523: IFFALSE 19577
19525: GO 19527
19527: DISABLE
// begin ToLua ( displayTroll(); ) ;
19528: LD_STRING displayTroll();
19530: PPUSH
19531: CALL_OW 559
// wait ( 3 3$00 ) ;
19535: LD_INT 6300
19537: PPUSH
19538: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19542: LD_STRING hideTroll();
19544: PPUSH
19545: CALL_OW 559
// wait ( 1 1$00 ) ;
19549: LD_INT 2100
19551: PPUSH
19552: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19556: LD_STRING displayTroll();
19558: PPUSH
19559: CALL_OW 559
// wait ( 1 1$00 ) ;
19563: LD_INT 2100
19565: PPUSH
19566: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19570: LD_STRING hideTroll();
19572: PPUSH
19573: CALL_OW 559
// end ;
19577: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19578: LD_EXP 37
19582: PUSH
19583: LD_EXP 63
19587: AND
19588: IFFALSE 19651
19590: GO 19592
19592: DISABLE
19593: LD_INT 0
19595: PPUSH
// begin p := 0 ;
19596: LD_ADDR_VAR 0 1
19600: PUSH
19601: LD_INT 0
19603: ST_TO_ADDR
// repeat game_speed := 1 ;
19604: LD_ADDR_OWVAR 65
19608: PUSH
19609: LD_INT 1
19611: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19612: LD_INT 35
19614: PPUSH
19615: CALL_OW 67
// p := p + 1 ;
19619: LD_ADDR_VAR 0 1
19623: PUSH
19624: LD_VAR 0 1
19628: PUSH
19629: LD_INT 1
19631: PLUS
19632: ST_TO_ADDR
// until p >= 60 ;
19633: LD_VAR 0 1
19637: PUSH
19638: LD_INT 60
19640: GREATEREQUAL
19641: IFFALSE 19604
// game_speed := 4 ;
19643: LD_ADDR_OWVAR 65
19647: PUSH
19648: LD_INT 4
19650: ST_TO_ADDR
// end ;
19651: PPOPN 1
19653: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19654: LD_EXP 37
19658: PUSH
19659: LD_EXP 64
19663: AND
19664: IFFALSE 19810
19666: GO 19668
19668: DISABLE
19669: LD_INT 0
19671: PPUSH
19672: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19673: LD_ADDR_VAR 0 1
19677: PUSH
19678: LD_INT 22
19680: PUSH
19681: LD_OWVAR 2
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 2
19692: PUSH
19693: LD_INT 30
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 30
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PPUSH
19722: CALL_OW 69
19726: ST_TO_ADDR
// if not depot then
19727: LD_VAR 0 1
19731: NOT
19732: IFFALSE 19736
// exit ;
19734: GO 19810
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19736: LD_ADDR_VAR 0 2
19740: PUSH
19741: LD_VAR 0 1
19745: PUSH
19746: LD_INT 1
19748: PPUSH
19749: LD_VAR 0 1
19753: PPUSH
19754: CALL_OW 12
19758: ARRAY
19759: PPUSH
19760: CALL_OW 274
19764: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19765: LD_VAR 0 2
19769: PPUSH
19770: LD_INT 1
19772: PPUSH
19773: LD_INT 0
19775: PPUSH
19776: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19780: LD_VAR 0 2
19784: PPUSH
19785: LD_INT 2
19787: PPUSH
19788: LD_INT 0
19790: PPUSH
19791: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19795: LD_VAR 0 2
19799: PPUSH
19800: LD_INT 3
19802: PPUSH
19803: LD_INT 0
19805: PPUSH
19806: CALL_OW 277
// end ;
19810: PPOPN 2
19812: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19813: LD_EXP 37
19817: PUSH
19818: LD_EXP 65
19822: AND
19823: IFFALSE 19920
19825: GO 19827
19827: DISABLE
19828: LD_INT 0
19830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19831: LD_ADDR_VAR 0 1
19835: PUSH
19836: LD_INT 22
19838: PUSH
19839: LD_OWVAR 2
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 21
19850: PUSH
19851: LD_INT 1
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 3
19860: PUSH
19861: LD_INT 23
19863: PUSH
19864: LD_INT 0
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: PPUSH
19880: CALL_OW 69
19884: ST_TO_ADDR
// if not tmp then
19885: LD_VAR 0 1
19889: NOT
19890: IFFALSE 19894
// exit ;
19892: GO 19920
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19894: LD_VAR 0 1
19898: PUSH
19899: LD_INT 1
19901: PPUSH
19902: LD_VAR 0 1
19906: PPUSH
19907: CALL_OW 12
19911: ARRAY
19912: PPUSH
19913: LD_INT 200
19915: PPUSH
19916: CALL_OW 234
// end ;
19920: PPOPN 1
19922: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19923: LD_EXP 37
19927: PUSH
19928: LD_EXP 66
19932: AND
19933: IFFALSE 20012
19935: GO 19937
19937: DISABLE
19938: LD_INT 0
19940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19941: LD_ADDR_VAR 0 1
19945: PUSH
19946: LD_INT 22
19948: PUSH
19949: LD_OWVAR 2
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 21
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PPUSH
19972: CALL_OW 69
19976: ST_TO_ADDR
// if not tmp then
19977: LD_VAR 0 1
19981: NOT
19982: IFFALSE 19986
// exit ;
19984: GO 20012
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19986: LD_VAR 0 1
19990: PUSH
19991: LD_INT 1
19993: PPUSH
19994: LD_VAR 0 1
19998: PPUSH
19999: CALL_OW 12
20003: ARRAY
20004: PPUSH
20005: LD_INT 60
20007: PPUSH
20008: CALL_OW 234
// end ;
20012: PPOPN 1
20014: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20015: LD_EXP 37
20019: PUSH
20020: LD_EXP 67
20024: AND
20025: IFFALSE 20124
20027: GO 20029
20029: DISABLE
20030: LD_INT 0
20032: PPUSH
20033: PPUSH
// begin enable ;
20034: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20035: LD_ADDR_VAR 0 1
20039: PUSH
20040: LD_INT 22
20042: PUSH
20043: LD_OWVAR 2
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 61
20054: PUSH
20055: EMPTY
20056: LIST
20057: PUSH
20058: LD_INT 33
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: PPUSH
20073: CALL_OW 69
20077: ST_TO_ADDR
// if not tmp then
20078: LD_VAR 0 1
20082: NOT
20083: IFFALSE 20087
// exit ;
20085: GO 20124
// for i in tmp do
20087: LD_ADDR_VAR 0 2
20091: PUSH
20092: LD_VAR 0 1
20096: PUSH
20097: FOR_IN
20098: IFFALSE 20122
// if IsControledBy ( i ) then
20100: LD_VAR 0 2
20104: PPUSH
20105: CALL_OW 312
20109: IFFALSE 20120
// ComUnlink ( i ) ;
20111: LD_VAR 0 2
20115: PPUSH
20116: CALL_OW 136
20120: GO 20097
20122: POP
20123: POP
// end ;
20124: PPOPN 2
20126: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20127: LD_EXP 37
20131: PUSH
20132: LD_EXP 68
20136: AND
20137: IFFALSE 20277
20139: GO 20141
20141: DISABLE
20142: LD_INT 0
20144: PPUSH
20145: PPUSH
// begin ToLua ( displayPowell(); ) ;
20146: LD_STRING displayPowell();
20148: PPUSH
20149: CALL_OW 559
// uc_side := 0 ;
20153: LD_ADDR_OWVAR 20
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// uc_nation := 2 ;
20161: LD_ADDR_OWVAR 21
20165: PUSH
20166: LD_INT 2
20168: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20169: LD_ADDR_OWVAR 37
20173: PUSH
20174: LD_INT 14
20176: ST_TO_ADDR
// vc_engine := engine_siberite ;
20177: LD_ADDR_OWVAR 39
20181: PUSH
20182: LD_INT 3
20184: ST_TO_ADDR
// vc_control := control_apeman ;
20185: LD_ADDR_OWVAR 38
20189: PUSH
20190: LD_INT 5
20192: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20193: LD_ADDR_OWVAR 40
20197: PUSH
20198: LD_INT 29
20200: ST_TO_ADDR
// un := CreateVehicle ;
20201: LD_ADDR_VAR 0 2
20205: PUSH
20206: CALL_OW 45
20210: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20211: LD_VAR 0 2
20215: PPUSH
20216: LD_INT 1
20218: PPUSH
20219: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20223: LD_INT 35
20225: PPUSH
20226: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20230: LD_VAR 0 2
20234: PPUSH
20235: LD_INT 22
20237: PUSH
20238: LD_OWVAR 2
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PPUSH
20247: CALL_OW 69
20251: PPUSH
20252: LD_VAR 0 2
20256: PPUSH
20257: CALL_OW 74
20261: PPUSH
20262: CALL_OW 115
// until IsDead ( un ) ;
20266: LD_VAR 0 2
20270: PPUSH
20271: CALL_OW 301
20275: IFFALSE 20223
// end ;
20277: PPOPN 2
20279: END
// every 0 0$1 trigger StreamModeActive and sStu do
20280: LD_EXP 37
20284: PUSH
20285: LD_EXP 76
20289: AND
20290: IFFALSE 20306
20292: GO 20294
20294: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20295: LD_STRING displayStucuk();
20297: PPUSH
20298: CALL_OW 559
// ResetFog ;
20302: CALL_OW 335
// end ;
20306: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20307: LD_EXP 37
20311: PUSH
20312: LD_EXP 69
20316: AND
20317: IFFALSE 20458
20319: GO 20321
20321: DISABLE
20322: LD_INT 0
20324: PPUSH
20325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20326: LD_ADDR_VAR 0 2
20330: PUSH
20331: LD_INT 22
20333: PUSH
20334: LD_OWVAR 2
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 21
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PPUSH
20357: CALL_OW 69
20361: ST_TO_ADDR
// if not tmp then
20362: LD_VAR 0 2
20366: NOT
20367: IFFALSE 20371
// exit ;
20369: GO 20458
// un := tmp [ rand ( 1 , tmp ) ] ;
20371: LD_ADDR_VAR 0 1
20375: PUSH
20376: LD_VAR 0 2
20380: PUSH
20381: LD_INT 1
20383: PPUSH
20384: LD_VAR 0 2
20388: PPUSH
20389: CALL_OW 12
20393: ARRAY
20394: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20395: LD_VAR 0 1
20399: PPUSH
20400: LD_INT 0
20402: PPUSH
20403: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20407: LD_VAR 0 1
20411: PPUSH
20412: LD_OWVAR 3
20416: PUSH
20417: LD_VAR 0 1
20421: DIFF
20422: PPUSH
20423: LD_VAR 0 1
20427: PPUSH
20428: CALL_OW 74
20432: PPUSH
20433: CALL_OW 115
// wait ( 0 0$20 ) ;
20437: LD_INT 700
20439: PPUSH
20440: CALL_OW 67
// SetSide ( un , your_side ) ;
20444: LD_VAR 0 1
20448: PPUSH
20449: LD_OWVAR 2
20453: PPUSH
20454: CALL_OW 235
// end ;
20458: PPOPN 2
20460: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20461: LD_EXP 37
20465: PUSH
20466: LD_EXP 70
20470: AND
20471: IFFALSE 20577
20473: GO 20475
20475: DISABLE
20476: LD_INT 0
20478: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20479: LD_ADDR_VAR 0 1
20483: PUSH
20484: LD_INT 22
20486: PUSH
20487: LD_OWVAR 2
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: LD_INT 30
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 30
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: LIST
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PPUSH
20528: CALL_OW 69
20532: ST_TO_ADDR
// if not depot then
20533: LD_VAR 0 1
20537: NOT
20538: IFFALSE 20542
// exit ;
20540: GO 20577
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20542: LD_VAR 0 1
20546: PUSH
20547: LD_INT 1
20549: ARRAY
20550: PPUSH
20551: CALL_OW 250
20555: PPUSH
20556: LD_VAR 0 1
20560: PUSH
20561: LD_INT 1
20563: ARRAY
20564: PPUSH
20565: CALL_OW 251
20569: PPUSH
20570: LD_INT 70
20572: PPUSH
20573: CALL_OW 495
// end ;
20577: PPOPN 1
20579: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20580: LD_EXP 37
20584: PUSH
20585: LD_EXP 71
20589: AND
20590: IFFALSE 20801
20592: GO 20594
20594: DISABLE
20595: LD_INT 0
20597: PPUSH
20598: PPUSH
20599: PPUSH
20600: PPUSH
20601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20602: LD_ADDR_VAR 0 5
20606: PUSH
20607: LD_INT 22
20609: PUSH
20610: LD_OWVAR 2
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 21
20621: PUSH
20622: LD_INT 1
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PPUSH
20633: CALL_OW 69
20637: ST_TO_ADDR
// if not tmp then
20638: LD_VAR 0 5
20642: NOT
20643: IFFALSE 20647
// exit ;
20645: GO 20801
// for i in tmp do
20647: LD_ADDR_VAR 0 1
20651: PUSH
20652: LD_VAR 0 5
20656: PUSH
20657: FOR_IN
20658: IFFALSE 20799
// begin d := rand ( 0 , 5 ) ;
20660: LD_ADDR_VAR 0 4
20664: PUSH
20665: LD_INT 0
20667: PPUSH
20668: LD_INT 5
20670: PPUSH
20671: CALL_OW 12
20675: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20676: LD_ADDR_VAR 0 2
20680: PUSH
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL_OW 250
20690: PPUSH
20691: LD_VAR 0 4
20695: PPUSH
20696: LD_INT 3
20698: PPUSH
20699: LD_INT 12
20701: PPUSH
20702: CALL_OW 12
20706: PPUSH
20707: CALL_OW 272
20711: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20712: LD_ADDR_VAR 0 3
20716: PUSH
20717: LD_VAR 0 1
20721: PPUSH
20722: CALL_OW 251
20726: PPUSH
20727: LD_VAR 0 4
20731: PPUSH
20732: LD_INT 3
20734: PPUSH
20735: LD_INT 12
20737: PPUSH
20738: CALL_OW 12
20742: PPUSH
20743: CALL_OW 273
20747: ST_TO_ADDR
// if ValidHex ( x , y ) then
20748: LD_VAR 0 2
20752: PPUSH
20753: LD_VAR 0 3
20757: PPUSH
20758: CALL_OW 488
20762: IFFALSE 20797
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20764: LD_VAR 0 1
20768: PPUSH
20769: LD_VAR 0 2
20773: PPUSH
20774: LD_VAR 0 3
20778: PPUSH
20779: LD_INT 3
20781: PPUSH
20782: LD_INT 6
20784: PPUSH
20785: CALL_OW 12
20789: PPUSH
20790: LD_INT 1
20792: PPUSH
20793: CALL_OW 483
// end ;
20797: GO 20657
20799: POP
20800: POP
// end ;
20801: PPOPN 5
20803: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20804: LD_EXP 37
20808: PUSH
20809: LD_EXP 72
20813: AND
20814: IFFALSE 20908
20816: GO 20818
20818: DISABLE
20819: LD_INT 0
20821: PPUSH
20822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20823: LD_ADDR_VAR 0 2
20827: PUSH
20828: LD_INT 22
20830: PUSH
20831: LD_OWVAR 2
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 32
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 21
20852: PUSH
20853: LD_INT 2
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 69
20869: ST_TO_ADDR
// if not tmp then
20870: LD_VAR 0 2
20874: NOT
20875: IFFALSE 20879
// exit ;
20877: GO 20908
// for i in tmp do
20879: LD_ADDR_VAR 0 1
20883: PUSH
20884: LD_VAR 0 2
20888: PUSH
20889: FOR_IN
20890: IFFALSE 20906
// SetFuel ( i , 0 ) ;
20892: LD_VAR 0 1
20896: PPUSH
20897: LD_INT 0
20899: PPUSH
20900: CALL_OW 240
20904: GO 20889
20906: POP
20907: POP
// end ;
20908: PPOPN 2
20910: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20911: LD_EXP 37
20915: PUSH
20916: LD_EXP 73
20920: AND
20921: IFFALSE 20987
20923: GO 20925
20925: DISABLE
20926: LD_INT 0
20928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20929: LD_ADDR_VAR 0 1
20933: PUSH
20934: LD_INT 22
20936: PUSH
20937: LD_OWVAR 2
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 30
20948: PUSH
20949: LD_INT 29
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PPUSH
20960: CALL_OW 69
20964: ST_TO_ADDR
// if not tmp then
20965: LD_VAR 0 1
20969: NOT
20970: IFFALSE 20974
// exit ;
20972: GO 20987
// DestroyUnit ( tmp [ 1 ] ) ;
20974: LD_VAR 0 1
20978: PUSH
20979: LD_INT 1
20981: ARRAY
20982: PPUSH
20983: CALL_OW 65
// end ;
20987: PPOPN 1
20989: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20990: LD_EXP 37
20994: PUSH
20995: LD_EXP 75
20999: AND
21000: IFFALSE 21129
21002: GO 21004
21004: DISABLE
21005: LD_INT 0
21007: PPUSH
// begin uc_side := 0 ;
21008: LD_ADDR_OWVAR 20
21012: PUSH
21013: LD_INT 0
21015: ST_TO_ADDR
// uc_nation := nation_arabian ;
21016: LD_ADDR_OWVAR 21
21020: PUSH
21021: LD_INT 2
21023: ST_TO_ADDR
// hc_gallery :=  ;
21024: LD_ADDR_OWVAR 33
21028: PUSH
21029: LD_STRING 
21031: ST_TO_ADDR
// hc_name :=  ;
21032: LD_ADDR_OWVAR 26
21036: PUSH
21037: LD_STRING 
21039: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21040: LD_INT 1
21042: PPUSH
21043: LD_INT 11
21045: PPUSH
21046: LD_INT 10
21048: PPUSH
21049: CALL_OW 380
// un := CreateHuman ;
21053: LD_ADDR_VAR 0 1
21057: PUSH
21058: CALL_OW 44
21062: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21063: LD_VAR 0 1
21067: PPUSH
21068: LD_INT 1
21070: PPUSH
21071: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21075: LD_INT 35
21077: PPUSH
21078: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21082: LD_VAR 0 1
21086: PPUSH
21087: LD_INT 22
21089: PUSH
21090: LD_OWVAR 2
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PPUSH
21099: CALL_OW 69
21103: PPUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 74
21113: PPUSH
21114: CALL_OW 115
// until IsDead ( un ) ;
21118: LD_VAR 0 1
21122: PPUSH
21123: CALL_OW 301
21127: IFFALSE 21075
// end ;
21129: PPOPN 1
21131: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21132: LD_EXP 37
21136: PUSH
21137: LD_EXP 77
21141: AND
21142: IFFALSE 21154
21144: GO 21146
21146: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21147: LD_STRING earthquake(getX(game), 0, 32)
21149: PPUSH
21150: CALL_OW 559
21154: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21155: LD_EXP 37
21159: PUSH
21160: LD_EXP 78
21164: AND
21165: IFFALSE 21256
21167: GO 21169
21169: DISABLE
21170: LD_INT 0
21172: PPUSH
// begin enable ;
21173: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21174: LD_ADDR_VAR 0 1
21178: PUSH
21179: LD_INT 22
21181: PUSH
21182: LD_OWVAR 2
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 21
21193: PUSH
21194: LD_INT 2
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 33
21203: PUSH
21204: LD_INT 3
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 69
21220: ST_TO_ADDR
// if not tmp then
21221: LD_VAR 0 1
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21256
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21230: LD_VAR 0 1
21234: PUSH
21235: LD_INT 1
21237: PPUSH
21238: LD_VAR 0 1
21242: PPUSH
21243: CALL_OW 12
21247: ARRAY
21248: PPUSH
21249: LD_INT 1
21251: PPUSH
21252: CALL_OW 234
// end ;
21256: PPOPN 1
21258: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21259: LD_EXP 37
21263: PUSH
21264: LD_EXP 79
21268: AND
21269: IFFALSE 21410
21271: GO 21273
21273: DISABLE
21274: LD_INT 0
21276: PPUSH
21277: PPUSH
21278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21279: LD_ADDR_VAR 0 3
21283: PUSH
21284: LD_INT 22
21286: PUSH
21287: LD_OWVAR 2
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 25
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PPUSH
21310: CALL_OW 69
21314: ST_TO_ADDR
// if not tmp then
21315: LD_VAR 0 3
21319: NOT
21320: IFFALSE 21324
// exit ;
21322: GO 21410
// un := tmp [ rand ( 1 , tmp ) ] ;
21324: LD_ADDR_VAR 0 2
21328: PUSH
21329: LD_VAR 0 3
21333: PUSH
21334: LD_INT 1
21336: PPUSH
21337: LD_VAR 0 3
21341: PPUSH
21342: CALL_OW 12
21346: ARRAY
21347: ST_TO_ADDR
// if Crawls ( un ) then
21348: LD_VAR 0 2
21352: PPUSH
21353: CALL_OW 318
21357: IFFALSE 21368
// ComWalk ( un ) ;
21359: LD_VAR 0 2
21363: PPUSH
21364: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21368: LD_VAR 0 2
21372: PPUSH
21373: LD_INT 9
21375: PPUSH
21376: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21380: LD_INT 28
21382: PPUSH
21383: LD_OWVAR 2
21387: PPUSH
21388: LD_INT 2
21390: PPUSH
21391: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21395: LD_INT 29
21397: PPUSH
21398: LD_OWVAR 2
21402: PPUSH
21403: LD_INT 2
21405: PPUSH
21406: CALL_OW 322
// end ;
21410: PPOPN 3
21412: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21413: LD_EXP 37
21417: PUSH
21418: LD_EXP 80
21422: AND
21423: IFFALSE 21534
21425: GO 21427
21427: DISABLE
21428: LD_INT 0
21430: PPUSH
21431: PPUSH
21432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21433: LD_ADDR_VAR 0 3
21437: PUSH
21438: LD_INT 22
21440: PUSH
21441: LD_OWVAR 2
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 25
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PPUSH
21464: CALL_OW 69
21468: ST_TO_ADDR
// if not tmp then
21469: LD_VAR 0 3
21473: NOT
21474: IFFALSE 21478
// exit ;
21476: GO 21534
// un := tmp [ rand ( 1 , tmp ) ] ;
21478: LD_ADDR_VAR 0 2
21482: PUSH
21483: LD_VAR 0 3
21487: PUSH
21488: LD_INT 1
21490: PPUSH
21491: LD_VAR 0 3
21495: PPUSH
21496: CALL_OW 12
21500: ARRAY
21501: ST_TO_ADDR
// if Crawls ( un ) then
21502: LD_VAR 0 2
21506: PPUSH
21507: CALL_OW 318
21511: IFFALSE 21522
// ComWalk ( un ) ;
21513: LD_VAR 0 2
21517: PPUSH
21518: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21522: LD_VAR 0 2
21526: PPUSH
21527: LD_INT 8
21529: PPUSH
21530: CALL_OW 336
// end ;
21534: PPOPN 3
21536: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21537: LD_EXP 37
21541: PUSH
21542: LD_EXP 81
21546: AND
21547: IFFALSE 21691
21549: GO 21551
21551: DISABLE
21552: LD_INT 0
21554: PPUSH
21555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21556: LD_ADDR_VAR 0 2
21560: PUSH
21561: LD_INT 22
21563: PUSH
21564: LD_OWVAR 2
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 21
21575: PUSH
21576: LD_INT 2
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 2
21585: PUSH
21586: LD_INT 34
21588: PUSH
21589: LD_INT 12
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 34
21598: PUSH
21599: LD_INT 51
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 34
21608: PUSH
21609: LD_INT 32
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: PPUSH
21627: CALL_OW 69
21631: ST_TO_ADDR
// if not tmp then
21632: LD_VAR 0 2
21636: NOT
21637: IFFALSE 21641
// exit ;
21639: GO 21691
// for i in tmp do
21641: LD_ADDR_VAR 0 1
21645: PUSH
21646: LD_VAR 0 2
21650: PUSH
21651: FOR_IN
21652: IFFALSE 21689
// if GetCargo ( i , mat_artifact ) = 0 then
21654: LD_VAR 0 1
21658: PPUSH
21659: LD_INT 4
21661: PPUSH
21662: CALL_OW 289
21666: PUSH
21667: LD_INT 0
21669: EQUAL
21670: IFFALSE 21687
// SetCargo ( i , mat_siberit , 100 ) ;
21672: LD_VAR 0 1
21676: PPUSH
21677: LD_INT 3
21679: PPUSH
21680: LD_INT 100
21682: PPUSH
21683: CALL_OW 290
21687: GO 21651
21689: POP
21690: POP
// end ;
21691: PPOPN 2
21693: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21694: LD_EXP 37
21698: PUSH
21699: LD_EXP 82
21703: AND
21704: IFFALSE 21887
21706: GO 21708
21708: DISABLE
21709: LD_INT 0
21711: PPUSH
21712: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21713: LD_ADDR_VAR 0 2
21717: PUSH
21718: LD_INT 22
21720: PUSH
21721: LD_OWVAR 2
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PPUSH
21730: CALL_OW 69
21734: ST_TO_ADDR
// if not tmp then
21735: LD_VAR 0 2
21739: NOT
21740: IFFALSE 21744
// exit ;
21742: GO 21887
// for i := 1 to 2 do
21744: LD_ADDR_VAR 0 1
21748: PUSH
21749: DOUBLE
21750: LD_INT 1
21752: DEC
21753: ST_TO_ADDR
21754: LD_INT 2
21756: PUSH
21757: FOR_TO
21758: IFFALSE 21885
// begin uc_side := your_side ;
21760: LD_ADDR_OWVAR 20
21764: PUSH
21765: LD_OWVAR 2
21769: ST_TO_ADDR
// uc_nation := nation_american ;
21770: LD_ADDR_OWVAR 21
21774: PUSH
21775: LD_INT 1
21777: ST_TO_ADDR
// vc_chassis := us_morphling ;
21778: LD_ADDR_OWVAR 37
21782: PUSH
21783: LD_INT 5
21785: ST_TO_ADDR
// vc_engine := engine_siberite ;
21786: LD_ADDR_OWVAR 39
21790: PUSH
21791: LD_INT 3
21793: ST_TO_ADDR
// vc_control := control_computer ;
21794: LD_ADDR_OWVAR 38
21798: PUSH
21799: LD_INT 3
21801: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21802: LD_ADDR_OWVAR 40
21806: PUSH
21807: LD_INT 10
21809: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21810: LD_VAR 0 2
21814: PUSH
21815: LD_INT 1
21817: ARRAY
21818: PPUSH
21819: CALL_OW 310
21823: NOT
21824: IFFALSE 21871
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21826: CALL_OW 45
21830: PPUSH
21831: LD_VAR 0 2
21835: PUSH
21836: LD_INT 1
21838: ARRAY
21839: PPUSH
21840: CALL_OW 250
21844: PPUSH
21845: LD_VAR 0 2
21849: PUSH
21850: LD_INT 1
21852: ARRAY
21853: PPUSH
21854: CALL_OW 251
21858: PPUSH
21859: LD_INT 12
21861: PPUSH
21862: LD_INT 1
21864: PPUSH
21865: CALL_OW 50
21869: GO 21883
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21871: CALL_OW 45
21875: PPUSH
21876: LD_INT 1
21878: PPUSH
21879: CALL_OW 51
// end ;
21883: GO 21757
21885: POP
21886: POP
// end ;
21887: PPOPN 2
21889: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21890: LD_EXP 37
21894: PUSH
21895: LD_EXP 83
21899: AND
21900: IFFALSE 22122
21902: GO 21904
21904: DISABLE
21905: LD_INT 0
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21913: LD_ADDR_VAR 0 6
21917: PUSH
21918: LD_INT 22
21920: PUSH
21921: LD_OWVAR 2
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 21
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: LD_INT 23
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: LIST
21961: PPUSH
21962: CALL_OW 69
21966: ST_TO_ADDR
// if not tmp then
21967: LD_VAR 0 6
21971: NOT
21972: IFFALSE 21976
// exit ;
21974: GO 22122
// s1 := rand ( 1 , 4 ) ;
21976: LD_ADDR_VAR 0 2
21980: PUSH
21981: LD_INT 1
21983: PPUSH
21984: LD_INT 4
21986: PPUSH
21987: CALL_OW 12
21991: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21992: LD_ADDR_VAR 0 4
21996: PUSH
21997: LD_VAR 0 6
22001: PUSH
22002: LD_INT 1
22004: ARRAY
22005: PPUSH
22006: LD_VAR 0 2
22010: PPUSH
22011: CALL_OW 259
22015: ST_TO_ADDR
// if s1 = 1 then
22016: LD_VAR 0 2
22020: PUSH
22021: LD_INT 1
22023: EQUAL
22024: IFFALSE 22044
// s2 := rand ( 2 , 4 ) else
22026: LD_ADDR_VAR 0 3
22030: PUSH
22031: LD_INT 2
22033: PPUSH
22034: LD_INT 4
22036: PPUSH
22037: CALL_OW 12
22041: ST_TO_ADDR
22042: GO 22052
// s2 := 1 ;
22044: LD_ADDR_VAR 0 3
22048: PUSH
22049: LD_INT 1
22051: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22052: LD_ADDR_VAR 0 5
22056: PUSH
22057: LD_VAR 0 6
22061: PUSH
22062: LD_INT 1
22064: ARRAY
22065: PPUSH
22066: LD_VAR 0 3
22070: PPUSH
22071: CALL_OW 259
22075: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22076: LD_VAR 0 6
22080: PUSH
22081: LD_INT 1
22083: ARRAY
22084: PPUSH
22085: LD_VAR 0 2
22089: PPUSH
22090: LD_VAR 0 5
22094: PPUSH
22095: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22099: LD_VAR 0 6
22103: PUSH
22104: LD_INT 1
22106: ARRAY
22107: PPUSH
22108: LD_VAR 0 3
22112: PPUSH
22113: LD_VAR 0 4
22117: PPUSH
22118: CALL_OW 237
// end ;
22122: PPOPN 6
22124: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22125: LD_EXP 37
22129: PUSH
22130: LD_EXP 84
22134: AND
22135: IFFALSE 22214
22137: GO 22139
22139: DISABLE
22140: LD_INT 0
22142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22143: LD_ADDR_VAR 0 1
22147: PUSH
22148: LD_INT 22
22150: PUSH
22151: LD_OWVAR 2
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 30
22162: PUSH
22163: LD_INT 3
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PPUSH
22174: CALL_OW 69
22178: ST_TO_ADDR
// if not tmp then
22179: LD_VAR 0 1
22183: NOT
22184: IFFALSE 22188
// exit ;
22186: GO 22214
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22188: LD_VAR 0 1
22192: PUSH
22193: LD_INT 1
22195: PPUSH
22196: LD_VAR 0 1
22200: PPUSH
22201: CALL_OW 12
22205: ARRAY
22206: PPUSH
22207: LD_INT 1
22209: PPUSH
22210: CALL_OW 234
// end ;
22214: PPOPN 1
22216: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22217: LD_EXP 37
22221: PUSH
22222: LD_EXP 85
22226: AND
22227: IFFALSE 22339
22229: GO 22231
22231: DISABLE
22232: LD_INT 0
22234: PPUSH
22235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22236: LD_ADDR_VAR 0 2
22240: PUSH
22241: LD_INT 22
22243: PUSH
22244: LD_OWVAR 2
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: LD_INT 30
22258: PUSH
22259: LD_INT 27
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 30
22268: PUSH
22269: LD_INT 26
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 30
22278: PUSH
22279: LD_INT 28
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PPUSH
22296: CALL_OW 69
22300: ST_TO_ADDR
// if not tmp then
22301: LD_VAR 0 2
22305: NOT
22306: IFFALSE 22310
// exit ;
22308: GO 22339
// for i in tmp do
22310: LD_ADDR_VAR 0 1
22314: PUSH
22315: LD_VAR 0 2
22319: PUSH
22320: FOR_IN
22321: IFFALSE 22337
// SetLives ( i , 1 ) ;
22323: LD_VAR 0 1
22327: PPUSH
22328: LD_INT 1
22330: PPUSH
22331: CALL_OW 234
22335: GO 22320
22337: POP
22338: POP
// end ;
22339: PPOPN 2
22341: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22342: LD_EXP 37
22346: PUSH
22347: LD_EXP 86
22351: AND
22352: IFFALSE 22626
22354: GO 22356
22356: DISABLE
22357: LD_INT 0
22359: PPUSH
22360: PPUSH
22361: PPUSH
// begin i := rand ( 1 , 7 ) ;
22362: LD_ADDR_VAR 0 1
22366: PUSH
22367: LD_INT 1
22369: PPUSH
22370: LD_INT 7
22372: PPUSH
22373: CALL_OW 12
22377: ST_TO_ADDR
// case i of 1 :
22378: LD_VAR 0 1
22382: PUSH
22383: LD_INT 1
22385: DOUBLE
22386: EQUAL
22387: IFTRUE 22391
22389: GO 22401
22391: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22392: LD_STRING earthquake(getX(game), 0, 32)
22394: PPUSH
22395: CALL_OW 559
22399: GO 22626
22401: LD_INT 2
22403: DOUBLE
22404: EQUAL
22405: IFTRUE 22409
22407: GO 22423
22409: POP
// begin ToLua ( displayStucuk(); ) ;
22410: LD_STRING displayStucuk();
22412: PPUSH
22413: CALL_OW 559
// ResetFog ;
22417: CALL_OW 335
// end ; 3 :
22421: GO 22626
22423: LD_INT 3
22425: DOUBLE
22426: EQUAL
22427: IFTRUE 22431
22429: GO 22535
22431: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22432: LD_ADDR_VAR 0 2
22436: PUSH
22437: LD_INT 22
22439: PUSH
22440: LD_OWVAR 2
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 25
22451: PUSH
22452: LD_INT 1
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PPUSH
22463: CALL_OW 69
22467: ST_TO_ADDR
// if not tmp then
22468: LD_VAR 0 2
22472: NOT
22473: IFFALSE 22477
// exit ;
22475: GO 22626
// un := tmp [ rand ( 1 , tmp ) ] ;
22477: LD_ADDR_VAR 0 3
22481: PUSH
22482: LD_VAR 0 2
22486: PUSH
22487: LD_INT 1
22489: PPUSH
22490: LD_VAR 0 2
22494: PPUSH
22495: CALL_OW 12
22499: ARRAY
22500: ST_TO_ADDR
// if Crawls ( un ) then
22501: LD_VAR 0 3
22505: PPUSH
22506: CALL_OW 318
22510: IFFALSE 22521
// ComWalk ( un ) ;
22512: LD_VAR 0 3
22516: PPUSH
22517: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22521: LD_VAR 0 3
22525: PPUSH
22526: LD_INT 8
22528: PPUSH
22529: CALL_OW 336
// end ; 4 :
22533: GO 22626
22535: LD_INT 4
22537: DOUBLE
22538: EQUAL
22539: IFTRUE 22543
22541: GO 22604
22543: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22544: LD_ADDR_VAR 0 2
22548: PUSH
22549: LD_INT 22
22551: PUSH
22552: LD_OWVAR 2
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 30
22563: PUSH
22564: LD_INT 29
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PPUSH
22575: CALL_OW 69
22579: ST_TO_ADDR
// if not tmp then
22580: LD_VAR 0 2
22584: NOT
22585: IFFALSE 22589
// exit ;
22587: GO 22626
// DestroyUnit ( tmp [ 1 ] ) ;
22589: LD_VAR 0 2
22593: PUSH
22594: LD_INT 1
22596: ARRAY
22597: PPUSH
22598: CALL_OW 65
// end ; 5 .. 7 :
22602: GO 22626
22604: LD_INT 5
22606: DOUBLE
22607: GREATEREQUAL
22608: IFFALSE 22616
22610: LD_INT 7
22612: DOUBLE
22613: LESSEQUAL
22614: IFTRUE 22618
22616: GO 22625
22618: POP
// StreamSibBomb ; end ;
22619: CALL 18876 0 0
22623: GO 22626
22625: POP
// end ;
22626: PPOPN 3
22628: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22629: LD_EXP 37
22633: PUSH
22634: LD_EXP 87
22638: AND
22639: IFFALSE 22795
22641: GO 22643
22643: DISABLE
22644: LD_INT 0
22646: PPUSH
22647: PPUSH
22648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22649: LD_ADDR_VAR 0 2
22653: PUSH
22654: LD_INT 81
22656: PUSH
22657: LD_OWVAR 2
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 21
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 21
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PPUSH
22698: CALL_OW 69
22702: ST_TO_ADDR
// if not tmp then
22703: LD_VAR 0 2
22707: NOT
22708: IFFALSE 22712
// exit ;
22710: GO 22795
// p := 0 ;
22712: LD_ADDR_VAR 0 3
22716: PUSH
22717: LD_INT 0
22719: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22720: LD_INT 35
22722: PPUSH
22723: CALL_OW 67
// p := p + 1 ;
22727: LD_ADDR_VAR 0 3
22731: PUSH
22732: LD_VAR 0 3
22736: PUSH
22737: LD_INT 1
22739: PLUS
22740: ST_TO_ADDR
// for i in tmp do
22741: LD_ADDR_VAR 0 1
22745: PUSH
22746: LD_VAR 0 2
22750: PUSH
22751: FOR_IN
22752: IFFALSE 22783
// if GetLives ( i ) < 1000 then
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 256
22763: PUSH
22764: LD_INT 1000
22766: LESS
22767: IFFALSE 22781
// SetLives ( i , 1000 ) ;
22769: LD_VAR 0 1
22773: PPUSH
22774: LD_INT 1000
22776: PPUSH
22777: CALL_OW 234
22781: GO 22751
22783: POP
22784: POP
// until p > 20 ;
22785: LD_VAR 0 3
22789: PUSH
22790: LD_INT 20
22792: GREATER
22793: IFFALSE 22720
// end ;
22795: PPOPN 3
22797: END
// every 0 0$1 trigger StreamModeActive and sTime do
22798: LD_EXP 37
22802: PUSH
22803: LD_EXP 88
22807: AND
22808: IFFALSE 22843
22810: GO 22812
22812: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22813: LD_INT 28
22815: PPUSH
22816: LD_OWVAR 2
22820: PPUSH
22821: LD_INT 2
22823: PPUSH
22824: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22828: LD_INT 30
22830: PPUSH
22831: LD_OWVAR 2
22835: PPUSH
22836: LD_INT 2
22838: PPUSH
22839: CALL_OW 322
// end ;
22843: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22844: LD_EXP 37
22848: PUSH
22849: LD_EXP 89
22853: AND
22854: IFFALSE 22975
22856: GO 22858
22858: DISABLE
22859: LD_INT 0
22861: PPUSH
22862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22863: LD_ADDR_VAR 0 2
22867: PUSH
22868: LD_INT 22
22870: PUSH
22871: LD_OWVAR 2
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 21
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 3
22892: PUSH
22893: LD_INT 23
22895: PUSH
22896: LD_INT 0
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: LIST
22911: PPUSH
22912: CALL_OW 69
22916: ST_TO_ADDR
// if not tmp then
22917: LD_VAR 0 2
22921: NOT
22922: IFFALSE 22926
// exit ;
22924: GO 22975
// for i in tmp do
22926: LD_ADDR_VAR 0 1
22930: PUSH
22931: LD_VAR 0 2
22935: PUSH
22936: FOR_IN
22937: IFFALSE 22973
// begin if Crawls ( i ) then
22939: LD_VAR 0 1
22943: PPUSH
22944: CALL_OW 318
22948: IFFALSE 22959
// ComWalk ( i ) ;
22950: LD_VAR 0 1
22954: PPUSH
22955: CALL_OW 138
// SetClass ( i , 2 ) ;
22959: LD_VAR 0 1
22963: PPUSH
22964: LD_INT 2
22966: PPUSH
22967: CALL_OW 336
// end ;
22971: GO 22936
22973: POP
22974: POP
// end ;
22975: PPOPN 2
22977: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22978: LD_EXP 37
22982: PUSH
22983: LD_EXP 90
22987: AND
22988: IFFALSE 23269
22990: GO 22992
22992: DISABLE
22993: LD_INT 0
22995: PPUSH
22996: PPUSH
22997: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22998: LD_OWVAR 2
23002: PPUSH
23003: LD_INT 9
23005: PPUSH
23006: LD_INT 1
23008: PPUSH
23009: LD_INT 1
23011: PPUSH
23012: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23016: LD_INT 9
23018: PPUSH
23019: LD_OWVAR 2
23023: PPUSH
23024: CALL_OW 343
// uc_side := 9 ;
23028: LD_ADDR_OWVAR 20
23032: PUSH
23033: LD_INT 9
23035: ST_TO_ADDR
// uc_nation := 2 ;
23036: LD_ADDR_OWVAR 21
23040: PUSH
23041: LD_INT 2
23043: ST_TO_ADDR
// hc_name := Dark Warrior ;
23044: LD_ADDR_OWVAR 26
23048: PUSH
23049: LD_STRING Dark Warrior
23051: ST_TO_ADDR
// hc_gallery :=  ;
23052: LD_ADDR_OWVAR 33
23056: PUSH
23057: LD_STRING 
23059: ST_TO_ADDR
// hc_noskilllimit := true ;
23060: LD_ADDR_OWVAR 76
23064: PUSH
23065: LD_INT 1
23067: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23068: LD_ADDR_OWVAR 31
23072: PUSH
23073: LD_INT 30
23075: PUSH
23076: LD_INT 30
23078: PUSH
23079: LD_INT 30
23081: PUSH
23082: LD_INT 30
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: ST_TO_ADDR
// un := CreateHuman ;
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: CALL_OW 44
23100: ST_TO_ADDR
// hc_noskilllimit := false ;
23101: LD_ADDR_OWVAR 76
23105: PUSH
23106: LD_INT 0
23108: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23109: LD_VAR 0 3
23113: PPUSH
23114: LD_INT 1
23116: PPUSH
23117: CALL_OW 51
// p := 0 ;
23121: LD_ADDR_VAR 0 2
23125: PUSH
23126: LD_INT 0
23128: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23129: LD_INT 35
23131: PPUSH
23132: CALL_OW 67
// p := p + 1 ;
23136: LD_ADDR_VAR 0 2
23140: PUSH
23141: LD_VAR 0 2
23145: PUSH
23146: LD_INT 1
23148: PLUS
23149: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23150: LD_VAR 0 3
23154: PPUSH
23155: CALL_OW 256
23159: PUSH
23160: LD_INT 1000
23162: LESS
23163: IFFALSE 23177
// SetLives ( un , 1000 ) ;
23165: LD_VAR 0 3
23169: PPUSH
23170: LD_INT 1000
23172: PPUSH
23173: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23177: LD_VAR 0 3
23181: PPUSH
23182: LD_INT 81
23184: PUSH
23185: LD_OWVAR 2
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 91
23196: PUSH
23197: LD_VAR 0 3
23201: PUSH
23202: LD_INT 30
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: LIST
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PPUSH
23214: CALL_OW 69
23218: PPUSH
23219: LD_VAR 0 3
23223: PPUSH
23224: CALL_OW 74
23228: PPUSH
23229: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23233: LD_VAR 0 2
23237: PUSH
23238: LD_INT 60
23240: GREATER
23241: PUSH
23242: LD_VAR 0 3
23246: PPUSH
23247: CALL_OW 301
23251: OR
23252: IFFALSE 23129
// if un then
23254: LD_VAR 0 3
23258: IFFALSE 23269
// RemoveUnit ( un ) ;
23260: LD_VAR 0 3
23264: PPUSH
23265: CALL_OW 64
// end ;
23269: PPOPN 3
23271: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23272: LD_INT 0
23274: PPUSH
// case cmd of 301 :
23275: LD_VAR 0 1
23279: PUSH
23280: LD_INT 301
23282: DOUBLE
23283: EQUAL
23284: IFTRUE 23288
23286: GO 23320
23288: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23289: LD_VAR 0 6
23293: PPUSH
23294: LD_VAR 0 7
23298: PPUSH
23299: LD_VAR 0 8
23303: PPUSH
23304: LD_VAR 0 4
23308: PPUSH
23309: LD_VAR 0 5
23313: PPUSH
23314: CALL 24521 0 5
23318: GO 23441
23320: LD_INT 302
23322: DOUBLE
23323: EQUAL
23324: IFTRUE 23328
23326: GO 23365
23328: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23329: LD_VAR 0 6
23333: PPUSH
23334: LD_VAR 0 7
23338: PPUSH
23339: LD_VAR 0 8
23343: PPUSH
23344: LD_VAR 0 9
23348: PPUSH
23349: LD_VAR 0 4
23353: PPUSH
23354: LD_VAR 0 5
23358: PPUSH
23359: CALL 24612 0 6
23363: GO 23441
23365: LD_INT 303
23367: DOUBLE
23368: EQUAL
23369: IFTRUE 23373
23371: GO 23410
23373: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23374: LD_VAR 0 6
23378: PPUSH
23379: LD_VAR 0 7
23383: PPUSH
23384: LD_VAR 0 8
23388: PPUSH
23389: LD_VAR 0 9
23393: PPUSH
23394: LD_VAR 0 4
23398: PPUSH
23399: LD_VAR 0 5
23403: PPUSH
23404: CALL 23446 0 6
23408: GO 23441
23410: LD_INT 304
23412: DOUBLE
23413: EQUAL
23414: IFTRUE 23418
23416: GO 23440
23418: POP
// hHackTeleport ( unit , x , y ) ; end ;
23419: LD_VAR 0 2
23423: PPUSH
23424: LD_VAR 0 4
23428: PPUSH
23429: LD_VAR 0 5
23433: PPUSH
23434: CALL 25205 0 3
23438: GO 23441
23440: POP
// end ;
23441: LD_VAR 0 12
23445: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23446: LD_INT 0
23448: PPUSH
23449: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23450: LD_VAR 0 1
23454: PUSH
23455: LD_INT 1
23457: LESS
23458: PUSH
23459: LD_VAR 0 1
23463: PUSH
23464: LD_INT 3
23466: GREATER
23467: OR
23468: PUSH
23469: LD_VAR 0 5
23473: PPUSH
23474: LD_VAR 0 6
23478: PPUSH
23479: CALL_OW 428
23483: OR
23484: IFFALSE 23488
// exit ;
23486: GO 24208
// uc_side := your_side ;
23488: LD_ADDR_OWVAR 20
23492: PUSH
23493: LD_OWVAR 2
23497: ST_TO_ADDR
// uc_nation := nation ;
23498: LD_ADDR_OWVAR 21
23502: PUSH
23503: LD_VAR 0 1
23507: ST_TO_ADDR
// bc_level = 1 ;
23508: LD_ADDR_OWVAR 43
23512: PUSH
23513: LD_INT 1
23515: ST_TO_ADDR
// case btype of 1 :
23516: LD_VAR 0 2
23520: PUSH
23521: LD_INT 1
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23540
23529: POP
// bc_type := b_depot ; 2 :
23530: LD_ADDR_OWVAR 42
23534: PUSH
23535: LD_INT 0
23537: ST_TO_ADDR
23538: GO 24152
23540: LD_INT 2
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23559
23548: POP
// bc_type := b_warehouse ; 3 :
23549: LD_ADDR_OWVAR 42
23553: PUSH
23554: LD_INT 1
23556: ST_TO_ADDR
23557: GO 24152
23559: LD_INT 3
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23578
23567: POP
// bc_type := b_lab ; 4 .. 9 :
23568: LD_ADDR_OWVAR 42
23572: PUSH
23573: LD_INT 6
23575: ST_TO_ADDR
23576: GO 24152
23578: LD_INT 4
23580: DOUBLE
23581: GREATEREQUAL
23582: IFFALSE 23590
23584: LD_INT 9
23586: DOUBLE
23587: LESSEQUAL
23588: IFTRUE 23592
23590: GO 23644
23592: POP
// begin bc_type := b_lab_half ;
23593: LD_ADDR_OWVAR 42
23597: PUSH
23598: LD_INT 7
23600: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23601: LD_ADDR_OWVAR 44
23605: PUSH
23606: LD_INT 10
23608: PUSH
23609: LD_INT 11
23611: PUSH
23612: LD_INT 12
23614: PUSH
23615: LD_INT 15
23617: PUSH
23618: LD_INT 14
23620: PUSH
23621: LD_INT 13
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: PUSH
23632: LD_VAR 0 2
23636: PUSH
23637: LD_INT 3
23639: MINUS
23640: ARRAY
23641: ST_TO_ADDR
// end ; 10 .. 13 :
23642: GO 24152
23644: LD_INT 10
23646: DOUBLE
23647: GREATEREQUAL
23648: IFFALSE 23656
23650: LD_INT 13
23652: DOUBLE
23653: LESSEQUAL
23654: IFTRUE 23658
23656: GO 23735
23658: POP
// begin bc_type := b_lab_full ;
23659: LD_ADDR_OWVAR 42
23663: PUSH
23664: LD_INT 8
23666: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23667: LD_ADDR_OWVAR 44
23671: PUSH
23672: LD_INT 10
23674: PUSH
23675: LD_INT 12
23677: PUSH
23678: LD_INT 14
23680: PUSH
23681: LD_INT 13
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: PUSH
23690: LD_VAR 0 2
23694: PUSH
23695: LD_INT 9
23697: MINUS
23698: ARRAY
23699: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23700: LD_ADDR_OWVAR 45
23704: PUSH
23705: LD_INT 11
23707: PUSH
23708: LD_INT 15
23710: PUSH
23711: LD_INT 12
23713: PUSH
23714: LD_INT 15
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: PUSH
23723: LD_VAR 0 2
23727: PUSH
23728: LD_INT 9
23730: MINUS
23731: ARRAY
23732: ST_TO_ADDR
// end ; 14 :
23733: GO 24152
23735: LD_INT 14
23737: DOUBLE
23738: EQUAL
23739: IFTRUE 23743
23741: GO 23754
23743: POP
// bc_type := b_workshop ; 15 :
23744: LD_ADDR_OWVAR 42
23748: PUSH
23749: LD_INT 2
23751: ST_TO_ADDR
23752: GO 24152
23754: LD_INT 15
23756: DOUBLE
23757: EQUAL
23758: IFTRUE 23762
23760: GO 23773
23762: POP
// bc_type := b_factory ; 16 :
23763: LD_ADDR_OWVAR 42
23767: PUSH
23768: LD_INT 3
23770: ST_TO_ADDR
23771: GO 24152
23773: LD_INT 16
23775: DOUBLE
23776: EQUAL
23777: IFTRUE 23781
23779: GO 23792
23781: POP
// bc_type := b_ext_gun ; 17 :
23782: LD_ADDR_OWVAR 42
23786: PUSH
23787: LD_INT 17
23789: ST_TO_ADDR
23790: GO 24152
23792: LD_INT 17
23794: DOUBLE
23795: EQUAL
23796: IFTRUE 23800
23798: GO 23828
23800: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23801: LD_ADDR_OWVAR 42
23805: PUSH
23806: LD_INT 19
23808: PUSH
23809: LD_INT 23
23811: PUSH
23812: LD_INT 19
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: LIST
23819: PUSH
23820: LD_VAR 0 1
23824: ARRAY
23825: ST_TO_ADDR
23826: GO 24152
23828: LD_INT 18
23830: DOUBLE
23831: EQUAL
23832: IFTRUE 23836
23834: GO 23847
23836: POP
// bc_type := b_ext_radar ; 19 :
23837: LD_ADDR_OWVAR 42
23841: PUSH
23842: LD_INT 20
23844: ST_TO_ADDR
23845: GO 24152
23847: LD_INT 19
23849: DOUBLE
23850: EQUAL
23851: IFTRUE 23855
23853: GO 23866
23855: POP
// bc_type := b_ext_radio ; 20 :
23856: LD_ADDR_OWVAR 42
23860: PUSH
23861: LD_INT 22
23863: ST_TO_ADDR
23864: GO 24152
23866: LD_INT 20
23868: DOUBLE
23869: EQUAL
23870: IFTRUE 23874
23872: GO 23885
23874: POP
// bc_type := b_ext_siberium ; 21 :
23875: LD_ADDR_OWVAR 42
23879: PUSH
23880: LD_INT 21
23882: ST_TO_ADDR
23883: GO 24152
23885: LD_INT 21
23887: DOUBLE
23888: EQUAL
23889: IFTRUE 23893
23891: GO 23904
23893: POP
// bc_type := b_ext_computer ; 22 :
23894: LD_ADDR_OWVAR 42
23898: PUSH
23899: LD_INT 24
23901: ST_TO_ADDR
23902: GO 24152
23904: LD_INT 22
23906: DOUBLE
23907: EQUAL
23908: IFTRUE 23912
23910: GO 23923
23912: POP
// bc_type := b_ext_track ; 23 :
23913: LD_ADDR_OWVAR 42
23917: PUSH
23918: LD_INT 16
23920: ST_TO_ADDR
23921: GO 24152
23923: LD_INT 23
23925: DOUBLE
23926: EQUAL
23927: IFTRUE 23931
23929: GO 23942
23931: POP
// bc_type := b_ext_laser ; 24 :
23932: LD_ADDR_OWVAR 42
23936: PUSH
23937: LD_INT 25
23939: ST_TO_ADDR
23940: GO 24152
23942: LD_INT 24
23944: DOUBLE
23945: EQUAL
23946: IFTRUE 23950
23948: GO 23961
23950: POP
// bc_type := b_control_tower ; 25 :
23951: LD_ADDR_OWVAR 42
23955: PUSH
23956: LD_INT 36
23958: ST_TO_ADDR
23959: GO 24152
23961: LD_INT 25
23963: DOUBLE
23964: EQUAL
23965: IFTRUE 23969
23967: GO 23980
23969: POP
// bc_type := b_breastwork ; 26 :
23970: LD_ADDR_OWVAR 42
23974: PUSH
23975: LD_INT 31
23977: ST_TO_ADDR
23978: GO 24152
23980: LD_INT 26
23982: DOUBLE
23983: EQUAL
23984: IFTRUE 23988
23986: GO 23999
23988: POP
// bc_type := b_bunker ; 27 :
23989: LD_ADDR_OWVAR 42
23993: PUSH
23994: LD_INT 32
23996: ST_TO_ADDR
23997: GO 24152
23999: LD_INT 27
24001: DOUBLE
24002: EQUAL
24003: IFTRUE 24007
24005: GO 24018
24007: POP
// bc_type := b_turret ; 28 :
24008: LD_ADDR_OWVAR 42
24012: PUSH
24013: LD_INT 33
24015: ST_TO_ADDR
24016: GO 24152
24018: LD_INT 28
24020: DOUBLE
24021: EQUAL
24022: IFTRUE 24026
24024: GO 24037
24026: POP
// bc_type := b_armoury ; 29 :
24027: LD_ADDR_OWVAR 42
24031: PUSH
24032: LD_INT 4
24034: ST_TO_ADDR
24035: GO 24152
24037: LD_INT 29
24039: DOUBLE
24040: EQUAL
24041: IFTRUE 24045
24043: GO 24056
24045: POP
// bc_type := b_barracks ; 30 :
24046: LD_ADDR_OWVAR 42
24050: PUSH
24051: LD_INT 5
24053: ST_TO_ADDR
24054: GO 24152
24056: LD_INT 30
24058: DOUBLE
24059: EQUAL
24060: IFTRUE 24064
24062: GO 24075
24064: POP
// bc_type := b_solar_power ; 31 :
24065: LD_ADDR_OWVAR 42
24069: PUSH
24070: LD_INT 27
24072: ST_TO_ADDR
24073: GO 24152
24075: LD_INT 31
24077: DOUBLE
24078: EQUAL
24079: IFTRUE 24083
24081: GO 24094
24083: POP
// bc_type := b_oil_power ; 32 :
24084: LD_ADDR_OWVAR 42
24088: PUSH
24089: LD_INT 26
24091: ST_TO_ADDR
24092: GO 24152
24094: LD_INT 32
24096: DOUBLE
24097: EQUAL
24098: IFTRUE 24102
24100: GO 24113
24102: POP
// bc_type := b_siberite_power ; 33 :
24103: LD_ADDR_OWVAR 42
24107: PUSH
24108: LD_INT 28
24110: ST_TO_ADDR
24111: GO 24152
24113: LD_INT 33
24115: DOUBLE
24116: EQUAL
24117: IFTRUE 24121
24119: GO 24132
24121: POP
// bc_type := b_oil_mine ; 34 :
24122: LD_ADDR_OWVAR 42
24126: PUSH
24127: LD_INT 29
24129: ST_TO_ADDR
24130: GO 24152
24132: LD_INT 34
24134: DOUBLE
24135: EQUAL
24136: IFTRUE 24140
24138: GO 24151
24140: POP
// bc_type := b_siberite_mine ; end ;
24141: LD_ADDR_OWVAR 42
24145: PUSH
24146: LD_INT 30
24148: ST_TO_ADDR
24149: GO 24152
24151: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24152: LD_ADDR_VAR 0 8
24156: PUSH
24157: LD_VAR 0 5
24161: PPUSH
24162: LD_VAR 0 6
24166: PPUSH
24167: LD_VAR 0 3
24171: PPUSH
24172: CALL_OW 47
24176: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24177: LD_OWVAR 42
24181: PUSH
24182: LD_INT 32
24184: PUSH
24185: LD_INT 33
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: IN
24192: IFFALSE 24208
// PlaceWeaponTurret ( b , weapon ) ;
24194: LD_VAR 0 8
24198: PPUSH
24199: LD_VAR 0 4
24203: PPUSH
24204: CALL_OW 431
// end ;
24208: LD_VAR 0 7
24212: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24213: LD_INT 0
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24219: LD_ADDR_VAR 0 4
24223: PUSH
24224: LD_INT 22
24226: PUSH
24227: LD_OWVAR 2
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: LD_INT 30
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 30
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PPUSH
24268: CALL_OW 69
24272: ST_TO_ADDR
// if not tmp then
24273: LD_VAR 0 4
24277: NOT
24278: IFFALSE 24282
// exit ;
24280: GO 24341
// for i in tmp do
24282: LD_ADDR_VAR 0 2
24286: PUSH
24287: LD_VAR 0 4
24291: PUSH
24292: FOR_IN
24293: IFFALSE 24339
// for j = 1 to 3 do
24295: LD_ADDR_VAR 0 3
24299: PUSH
24300: DOUBLE
24301: LD_INT 1
24303: DEC
24304: ST_TO_ADDR
24305: LD_INT 3
24307: PUSH
24308: FOR_TO
24309: IFFALSE 24335
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24311: LD_VAR 0 2
24315: PPUSH
24316: CALL_OW 274
24320: PPUSH
24321: LD_VAR 0 3
24325: PPUSH
24326: LD_INT 99999
24328: PPUSH
24329: CALL_OW 277
24333: GO 24308
24335: POP
24336: POP
24337: GO 24292
24339: POP
24340: POP
// end ;
24341: LD_VAR 0 1
24345: RET
// export function hHackSetLevel10 ; var i , j ; begin
24346: LD_INT 0
24348: PPUSH
24349: PPUSH
24350: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24351: LD_ADDR_VAR 0 2
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PPUSH
24366: CALL_OW 69
24370: PUSH
24371: FOR_IN
24372: IFFALSE 24424
// if IsSelected ( i ) then
24374: LD_VAR 0 2
24378: PPUSH
24379: CALL_OW 306
24383: IFFALSE 24422
// begin for j := 1 to 4 do
24385: LD_ADDR_VAR 0 3
24389: PUSH
24390: DOUBLE
24391: LD_INT 1
24393: DEC
24394: ST_TO_ADDR
24395: LD_INT 4
24397: PUSH
24398: FOR_TO
24399: IFFALSE 24420
// SetSkill ( i , j , 10 ) ;
24401: LD_VAR 0 2
24405: PPUSH
24406: LD_VAR 0 3
24410: PPUSH
24411: LD_INT 10
24413: PPUSH
24414: CALL_OW 237
24418: GO 24398
24420: POP
24421: POP
// end ;
24422: GO 24371
24424: POP
24425: POP
// end ;
24426: LD_VAR 0 1
24430: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24431: LD_INT 0
24433: PPUSH
24434: PPUSH
24435: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24436: LD_ADDR_VAR 0 2
24440: PUSH
24441: LD_INT 22
24443: PUSH
24444: LD_OWVAR 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 21
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PPUSH
24467: CALL_OW 69
24471: PUSH
24472: FOR_IN
24473: IFFALSE 24514
// begin for j := 1 to 4 do
24475: LD_ADDR_VAR 0 3
24479: PUSH
24480: DOUBLE
24481: LD_INT 1
24483: DEC
24484: ST_TO_ADDR
24485: LD_INT 4
24487: PUSH
24488: FOR_TO
24489: IFFALSE 24510
// SetSkill ( i , j , 10 ) ;
24491: LD_VAR 0 2
24495: PPUSH
24496: LD_VAR 0 3
24500: PPUSH
24501: LD_INT 10
24503: PPUSH
24504: CALL_OW 237
24508: GO 24488
24510: POP
24511: POP
// end ;
24512: GO 24472
24514: POP
24515: POP
// end ;
24516: LD_VAR 0 1
24520: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24521: LD_INT 0
24523: PPUSH
// uc_side := your_side ;
24524: LD_ADDR_OWVAR 20
24528: PUSH
24529: LD_OWVAR 2
24533: ST_TO_ADDR
// uc_nation := nation ;
24534: LD_ADDR_OWVAR 21
24538: PUSH
24539: LD_VAR 0 1
24543: ST_TO_ADDR
// InitHc ;
24544: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24548: LD_INT 0
24550: PPUSH
24551: LD_VAR 0 2
24555: PPUSH
24556: LD_VAR 0 3
24560: PPUSH
24561: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24565: LD_VAR 0 4
24569: PPUSH
24570: LD_VAR 0 5
24574: PPUSH
24575: CALL_OW 428
24579: PUSH
24580: LD_INT 0
24582: EQUAL
24583: IFFALSE 24607
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24585: CALL_OW 44
24589: PPUSH
24590: LD_VAR 0 4
24594: PPUSH
24595: LD_VAR 0 5
24599: PPUSH
24600: LD_INT 1
24602: PPUSH
24603: CALL_OW 48
// end ;
24607: LD_VAR 0 6
24611: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24612: LD_INT 0
24614: PPUSH
24615: PPUSH
// uc_side := your_side ;
24616: LD_ADDR_OWVAR 20
24620: PUSH
24621: LD_OWVAR 2
24625: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24626: LD_VAR 0 1
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 3
24639: PUSH
24640: LD_INT 4
24642: PUSH
24643: LD_INT 5
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: IN
24653: IFFALSE 24665
// uc_nation := nation_american else
24655: LD_ADDR_OWVAR 21
24659: PUSH
24660: LD_INT 1
24662: ST_TO_ADDR
24663: GO 24708
// if chassis in [ 11 , 12 , 13 , 14 ] then
24665: LD_VAR 0 1
24669: PUSH
24670: LD_INT 11
24672: PUSH
24673: LD_INT 12
24675: PUSH
24676: LD_INT 13
24678: PUSH
24679: LD_INT 14
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: IN
24688: IFFALSE 24700
// uc_nation := nation_arabian else
24690: LD_ADDR_OWVAR 21
24694: PUSH
24695: LD_INT 2
24697: ST_TO_ADDR
24698: GO 24708
// uc_nation := nation_russian ;
24700: LD_ADDR_OWVAR 21
24704: PUSH
24705: LD_INT 3
24707: ST_TO_ADDR
// vc_chassis := chassis ;
24708: LD_ADDR_OWVAR 37
24712: PUSH
24713: LD_VAR 0 1
24717: ST_TO_ADDR
// vc_engine := engine ;
24718: LD_ADDR_OWVAR 39
24722: PUSH
24723: LD_VAR 0 2
24727: ST_TO_ADDR
// vc_control := control ;
24728: LD_ADDR_OWVAR 38
24732: PUSH
24733: LD_VAR 0 3
24737: ST_TO_ADDR
// vc_weapon := weapon ;
24738: LD_ADDR_OWVAR 40
24742: PUSH
24743: LD_VAR 0 4
24747: ST_TO_ADDR
// un := CreateVehicle ;
24748: LD_ADDR_VAR 0 8
24752: PUSH
24753: CALL_OW 45
24757: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24758: LD_VAR 0 8
24762: PPUSH
24763: LD_INT 0
24765: PPUSH
24766: LD_INT 5
24768: PPUSH
24769: CALL_OW 12
24773: PPUSH
24774: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24778: LD_VAR 0 8
24782: PPUSH
24783: LD_VAR 0 5
24787: PPUSH
24788: LD_VAR 0 6
24792: PPUSH
24793: LD_INT 1
24795: PPUSH
24796: CALL_OW 48
// end ;
24800: LD_VAR 0 7
24804: RET
// export hInvincible ; every 1 do
24805: GO 24807
24807: DISABLE
// hInvincible := [ ] ;
24808: LD_ADDR_EXP 91
24812: PUSH
24813: EMPTY
24814: ST_TO_ADDR
24815: END
// every 10 do var i ;
24816: GO 24818
24818: DISABLE
24819: LD_INT 0
24821: PPUSH
// begin enable ;
24822: ENABLE
// if not hInvincible then
24823: LD_EXP 91
24827: NOT
24828: IFFALSE 24832
// exit ;
24830: GO 24876
// for i in hInvincible do
24832: LD_ADDR_VAR 0 1
24836: PUSH
24837: LD_EXP 91
24841: PUSH
24842: FOR_IN
24843: IFFALSE 24874
// if GetLives ( i ) < 1000 then
24845: LD_VAR 0 1
24849: PPUSH
24850: CALL_OW 256
24854: PUSH
24855: LD_INT 1000
24857: LESS
24858: IFFALSE 24872
// SetLives ( i , 1000 ) ;
24860: LD_VAR 0 1
24864: PPUSH
24865: LD_INT 1000
24867: PPUSH
24868: CALL_OW 234
24872: GO 24842
24874: POP
24875: POP
// end ;
24876: PPOPN 1
24878: END
// export function hHackInvincible ; var i ; begin
24879: LD_INT 0
24881: PPUSH
24882: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24883: LD_ADDR_VAR 0 2
24887: PUSH
24888: LD_INT 2
24890: PUSH
24891: LD_INT 21
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 21
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: LIST
24915: PPUSH
24916: CALL_OW 69
24920: PUSH
24921: FOR_IN
24922: IFFALSE 24983
// if IsSelected ( i ) then
24924: LD_VAR 0 2
24928: PPUSH
24929: CALL_OW 306
24933: IFFALSE 24981
// begin if i in hInvincible then
24935: LD_VAR 0 2
24939: PUSH
24940: LD_EXP 91
24944: IN
24945: IFFALSE 24965
// hInvincible := hInvincible diff i else
24947: LD_ADDR_EXP 91
24951: PUSH
24952: LD_EXP 91
24956: PUSH
24957: LD_VAR 0 2
24961: DIFF
24962: ST_TO_ADDR
24963: GO 24981
// hInvincible := hInvincible union i ;
24965: LD_ADDR_EXP 91
24969: PUSH
24970: LD_EXP 91
24974: PUSH
24975: LD_VAR 0 2
24979: UNION
24980: ST_TO_ADDR
// end ;
24981: GO 24921
24983: POP
24984: POP
// end ;
24985: LD_VAR 0 1
24989: RET
// export function hHackInvisible ; var i , j ; begin
24990: LD_INT 0
24992: PPUSH
24993: PPUSH
24994: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24995: LD_ADDR_VAR 0 2
24999: PUSH
25000: LD_INT 21
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PPUSH
25010: CALL_OW 69
25014: PUSH
25015: FOR_IN
25016: IFFALSE 25040
// if IsSelected ( i ) then
25018: LD_VAR 0 2
25022: PPUSH
25023: CALL_OW 306
25027: IFFALSE 25038
// ComForceInvisible ( i ) ;
25029: LD_VAR 0 2
25033: PPUSH
25034: CALL_OW 496
25038: GO 25015
25040: POP
25041: POP
// end ;
25042: LD_VAR 0 1
25046: RET
// export function hHackChangeYourSide ; begin
25047: LD_INT 0
25049: PPUSH
// if your_side = 8 then
25050: LD_OWVAR 2
25054: PUSH
25055: LD_INT 8
25057: EQUAL
25058: IFFALSE 25070
// your_side := 0 else
25060: LD_ADDR_OWVAR 2
25064: PUSH
25065: LD_INT 0
25067: ST_TO_ADDR
25068: GO 25084
// your_side := your_side + 1 ;
25070: LD_ADDR_OWVAR 2
25074: PUSH
25075: LD_OWVAR 2
25079: PUSH
25080: LD_INT 1
25082: PLUS
25083: ST_TO_ADDR
// end ;
25084: LD_VAR 0 1
25088: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25089: LD_INT 0
25091: PPUSH
25092: PPUSH
25093: PPUSH
// for i in all_units do
25094: LD_ADDR_VAR 0 2
25098: PUSH
25099: LD_OWVAR 3
25103: PUSH
25104: FOR_IN
25105: IFFALSE 25183
// if IsSelected ( i ) then
25107: LD_VAR 0 2
25111: PPUSH
25112: CALL_OW 306
25116: IFFALSE 25181
// begin j := GetSide ( i ) ;
25118: LD_ADDR_VAR 0 3
25122: PUSH
25123: LD_VAR 0 2
25127: PPUSH
25128: CALL_OW 255
25132: ST_TO_ADDR
// if j = 8 then
25133: LD_VAR 0 3
25137: PUSH
25138: LD_INT 8
25140: EQUAL
25141: IFFALSE 25153
// j := 0 else
25143: LD_ADDR_VAR 0 3
25147: PUSH
25148: LD_INT 0
25150: ST_TO_ADDR
25151: GO 25167
// j := j + 1 ;
25153: LD_ADDR_VAR 0 3
25157: PUSH
25158: LD_VAR 0 3
25162: PUSH
25163: LD_INT 1
25165: PLUS
25166: ST_TO_ADDR
// SetSide ( i , j ) ;
25167: LD_VAR 0 2
25171: PPUSH
25172: LD_VAR 0 3
25176: PPUSH
25177: CALL_OW 235
// end ;
25181: GO 25104
25183: POP
25184: POP
// end ;
25185: LD_VAR 0 1
25189: RET
// export function hHackFog ; begin
25190: LD_INT 0
25192: PPUSH
// FogOff ( true ) ;
25193: LD_INT 1
25195: PPUSH
25196: CALL_OW 344
// end ;
25200: LD_VAR 0 1
25204: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25205: LD_INT 0
25207: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25208: LD_VAR 0 1
25212: PPUSH
25213: LD_VAR 0 2
25217: PPUSH
25218: LD_VAR 0 3
25222: PPUSH
25223: LD_INT 1
25225: PPUSH
25226: LD_INT 1
25228: PPUSH
25229: CALL_OW 483
// CenterOnXY ( x , y ) ;
25233: LD_VAR 0 2
25237: PPUSH
25238: LD_VAR 0 3
25242: PPUSH
25243: CALL_OW 84
// end ; end_of_file
25247: LD_VAR 0 4
25251: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25252: LD_INT 0
25254: PPUSH
25255: PPUSH
25256: PPUSH
25257: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25258: LD_VAR 0 1
25262: PPUSH
25263: CALL_OW 264
25267: PUSH
25268: LD_EXP 25
25272: EQUAL
25273: IFFALSE 25345
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25275: LD_INT 68
25277: PPUSH
25278: LD_VAR 0 1
25282: PPUSH
25283: CALL_OW 255
25287: PPUSH
25288: CALL_OW 321
25292: PUSH
25293: LD_INT 2
25295: EQUAL
25296: IFFALSE 25308
// eff := 70 else
25298: LD_ADDR_VAR 0 4
25302: PUSH
25303: LD_INT 70
25305: ST_TO_ADDR
25306: GO 25316
// eff := 30 ;
25308: LD_ADDR_VAR 0 4
25312: PUSH
25313: LD_INT 30
25315: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25316: LD_VAR 0 1
25320: PPUSH
25321: CALL_OW 250
25325: PPUSH
25326: LD_VAR 0 1
25330: PPUSH
25331: CALL_OW 251
25335: PPUSH
25336: LD_VAR 0 4
25340: PPUSH
25341: CALL_OW 495
// end ; end ;
25345: LD_VAR 0 2
25349: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25350: LD_INT 0
25352: PPUSH
// end ;
25353: LD_VAR 0 4
25357: RET
// export function SOS_Command ( cmd ) ; begin
25358: LD_INT 0
25360: PPUSH
// end ;
25361: LD_VAR 0 2
25365: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25366: LD_INT 0
25368: PPUSH
// if cmd = 121 then
25369: LD_VAR 0 1
25373: PUSH
25374: LD_INT 121
25376: EQUAL
25377: IFFALSE 25379
// end ;
25379: LD_VAR 0 6
25383: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25384: LD_INT 0
25386: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25387: LD_VAR 0 1
25391: PUSH
25392: LD_INT 250
25394: EQUAL
25395: PUSH
25396: LD_VAR 0 2
25400: PPUSH
25401: CALL_OW 264
25405: PUSH
25406: LD_EXP 28
25410: EQUAL
25411: AND
25412: IFFALSE 25433
// MinerPlaceMine ( unit , x , y ) ;
25414: LD_VAR 0 2
25418: PPUSH
25419: LD_VAR 0 4
25423: PPUSH
25424: LD_VAR 0 5
25428: PPUSH
25429: CALL 27782 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25433: LD_VAR 0 1
25437: PUSH
25438: LD_INT 251
25440: EQUAL
25441: PUSH
25442: LD_VAR 0 2
25446: PPUSH
25447: CALL_OW 264
25451: PUSH
25452: LD_EXP 28
25456: EQUAL
25457: AND
25458: IFFALSE 25479
// MinerDetonateMine ( unit , x , y ) ;
25460: LD_VAR 0 2
25464: PPUSH
25465: LD_VAR 0 4
25469: PPUSH
25470: LD_VAR 0 5
25474: PPUSH
25475: CALL 28059 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25479: LD_VAR 0 1
25483: PUSH
25484: LD_INT 252
25486: EQUAL
25487: PUSH
25488: LD_VAR 0 2
25492: PPUSH
25493: CALL_OW 264
25497: PUSH
25498: LD_EXP 28
25502: EQUAL
25503: AND
25504: IFFALSE 25525
// MinerCreateMinefield ( unit , x , y ) ;
25506: LD_VAR 0 2
25510: PPUSH
25511: LD_VAR 0 4
25515: PPUSH
25516: LD_VAR 0 5
25520: PPUSH
25521: CALL 28476 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25525: LD_VAR 0 1
25529: PUSH
25530: LD_INT 253
25532: EQUAL
25533: PUSH
25534: LD_VAR 0 2
25538: PPUSH
25539: CALL_OW 257
25543: PUSH
25544: LD_INT 5
25546: EQUAL
25547: AND
25548: IFFALSE 25569
// ComBinocular ( unit , x , y ) ;
25550: LD_VAR 0 2
25554: PPUSH
25555: LD_VAR 0 4
25559: PPUSH
25560: LD_VAR 0 5
25564: PPUSH
25565: CALL 28847 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25569: LD_VAR 0 1
25573: PUSH
25574: LD_INT 254
25576: EQUAL
25577: PUSH
25578: LD_VAR 0 2
25582: PPUSH
25583: CALL_OW 264
25587: PUSH
25588: LD_EXP 23
25592: EQUAL
25593: AND
25594: PUSH
25595: LD_VAR 0 3
25599: PPUSH
25600: CALL_OW 263
25604: PUSH
25605: LD_INT 3
25607: EQUAL
25608: AND
25609: IFFALSE 25625
// HackDestroyVehicle ( unit , selectedUnit ) ;
25611: LD_VAR 0 2
25615: PPUSH
25616: LD_VAR 0 3
25620: PPUSH
25621: CALL 27142 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25625: LD_VAR 0 1
25629: PUSH
25630: LD_INT 255
25632: EQUAL
25633: PUSH
25634: LD_VAR 0 2
25638: PPUSH
25639: CALL_OW 264
25643: PUSH
25644: LD_INT 14
25646: PUSH
25647: LD_INT 53
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: IN
25654: AND
25655: PUSH
25656: LD_VAR 0 4
25660: PPUSH
25661: LD_VAR 0 5
25665: PPUSH
25666: CALL_OW 488
25670: AND
25671: IFFALSE 25695
// CutTreeXYR ( unit , x , y , 12 ) ;
25673: LD_VAR 0 2
25677: PPUSH
25678: LD_VAR 0 4
25682: PPUSH
25683: LD_VAR 0 5
25687: PPUSH
25688: LD_INT 12
25690: PPUSH
25691: CALL 25708 0 4
// end ;
25695: LD_VAR 0 6
25699: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25700: LD_INT 0
25702: PPUSH
// end ;
25703: LD_VAR 0 4
25707: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25708: LD_INT 0
25710: PPUSH
25711: PPUSH
25712: PPUSH
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25719: LD_VAR 0 1
25723: NOT
25724: PUSH
25725: LD_VAR 0 2
25729: PPUSH
25730: LD_VAR 0 3
25734: PPUSH
25735: CALL_OW 488
25739: NOT
25740: OR
25741: PUSH
25742: LD_VAR 0 4
25746: NOT
25747: OR
25748: IFFALSE 25752
// exit ;
25750: GO 26092
// list := [ ] ;
25752: LD_ADDR_VAR 0 13
25756: PUSH
25757: EMPTY
25758: ST_TO_ADDR
// if x - r < 0 then
25759: LD_VAR 0 2
25763: PUSH
25764: LD_VAR 0 4
25768: MINUS
25769: PUSH
25770: LD_INT 0
25772: LESS
25773: IFFALSE 25785
// min_x := 0 else
25775: LD_ADDR_VAR 0 7
25779: PUSH
25780: LD_INT 0
25782: ST_TO_ADDR
25783: GO 25801
// min_x := x - r ;
25785: LD_ADDR_VAR 0 7
25789: PUSH
25790: LD_VAR 0 2
25794: PUSH
25795: LD_VAR 0 4
25799: MINUS
25800: ST_TO_ADDR
// if y - r < 0 then
25801: LD_VAR 0 3
25805: PUSH
25806: LD_VAR 0 4
25810: MINUS
25811: PUSH
25812: LD_INT 0
25814: LESS
25815: IFFALSE 25827
// min_y := 0 else
25817: LD_ADDR_VAR 0 8
25821: PUSH
25822: LD_INT 0
25824: ST_TO_ADDR
25825: GO 25843
// min_y := y - r ;
25827: LD_ADDR_VAR 0 8
25831: PUSH
25832: LD_VAR 0 3
25836: PUSH
25837: LD_VAR 0 4
25841: MINUS
25842: ST_TO_ADDR
// max_x := x + r ;
25843: LD_ADDR_VAR 0 9
25847: PUSH
25848: LD_VAR 0 2
25852: PUSH
25853: LD_VAR 0 4
25857: PLUS
25858: ST_TO_ADDR
// max_y := y + r ;
25859: LD_ADDR_VAR 0 10
25863: PUSH
25864: LD_VAR 0 3
25868: PUSH
25869: LD_VAR 0 4
25873: PLUS
25874: ST_TO_ADDR
// for _x = min_x to max_x do
25875: LD_ADDR_VAR 0 11
25879: PUSH
25880: DOUBLE
25881: LD_VAR 0 7
25885: DEC
25886: ST_TO_ADDR
25887: LD_VAR 0 9
25891: PUSH
25892: FOR_TO
25893: IFFALSE 26010
// for _y = min_y to max_y do
25895: LD_ADDR_VAR 0 12
25899: PUSH
25900: DOUBLE
25901: LD_VAR 0 8
25905: DEC
25906: ST_TO_ADDR
25907: LD_VAR 0 10
25911: PUSH
25912: FOR_TO
25913: IFFALSE 26006
// begin if not ValidHex ( _x , _y ) then
25915: LD_VAR 0 11
25919: PPUSH
25920: LD_VAR 0 12
25924: PPUSH
25925: CALL_OW 488
25929: NOT
25930: IFFALSE 25934
// continue ;
25932: GO 25912
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25934: LD_VAR 0 11
25938: PPUSH
25939: LD_VAR 0 12
25943: PPUSH
25944: CALL_OW 351
25948: PUSH
25949: LD_VAR 0 11
25953: PPUSH
25954: LD_VAR 0 12
25958: PPUSH
25959: CALL_OW 554
25963: AND
25964: IFFALSE 26004
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25966: LD_ADDR_VAR 0 13
25970: PUSH
25971: LD_VAR 0 13
25975: PPUSH
25976: LD_VAR 0 13
25980: PUSH
25981: LD_INT 1
25983: PLUS
25984: PPUSH
25985: LD_VAR 0 11
25989: PUSH
25990: LD_VAR 0 12
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PPUSH
25999: CALL_OW 2
26003: ST_TO_ADDR
// end ;
26004: GO 25912
26006: POP
26007: POP
26008: GO 25892
26010: POP
26011: POP
// if not list then
26012: LD_VAR 0 13
26016: NOT
26017: IFFALSE 26021
// exit ;
26019: GO 26092
// for i in list do
26021: LD_ADDR_VAR 0 6
26025: PUSH
26026: LD_VAR 0 13
26030: PUSH
26031: FOR_IN
26032: IFFALSE 26090
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26034: LD_VAR 0 1
26038: PPUSH
26039: LD_STRING M
26041: PUSH
26042: LD_VAR 0 6
26046: PUSH
26047: LD_INT 1
26049: ARRAY
26050: PUSH
26051: LD_VAR 0 6
26055: PUSH
26056: LD_INT 2
26058: ARRAY
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: LD_INT 0
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: PPUSH
26084: CALL_OW 447
26088: GO 26031
26090: POP
26091: POP
// end ;
26092: LD_VAR 0 5
26096: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26097: LD_EXP 94
26101: NOT
26102: IFFALSE 26152
26104: GO 26106
26106: DISABLE
// begin initHack := true ;
26107: LD_ADDR_EXP 94
26111: PUSH
26112: LD_INT 1
26114: ST_TO_ADDR
// hackTanks := [ ] ;
26115: LD_ADDR_EXP 95
26119: PUSH
26120: EMPTY
26121: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26122: LD_ADDR_EXP 96
26126: PUSH
26127: EMPTY
26128: ST_TO_ADDR
// hackLimit := 3 ;
26129: LD_ADDR_EXP 97
26133: PUSH
26134: LD_INT 3
26136: ST_TO_ADDR
// hackDist := 12 ;
26137: LD_ADDR_EXP 98
26141: PUSH
26142: LD_INT 12
26144: ST_TO_ADDR
// hackCounter := [ ] ;
26145: LD_ADDR_EXP 99
26149: PUSH
26150: EMPTY
26151: ST_TO_ADDR
// end ;
26152: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26153: LD_EXP 94
26157: PUSH
26158: LD_INT 34
26160: PUSH
26161: LD_EXP 23
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PPUSH
26170: CALL_OW 69
26174: AND
26175: IFFALSE 26430
26177: GO 26179
26179: DISABLE
26180: LD_INT 0
26182: PPUSH
26183: PPUSH
// begin enable ;
26184: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26185: LD_ADDR_VAR 0 1
26189: PUSH
26190: LD_INT 34
26192: PUSH
26193: LD_EXP 23
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PPUSH
26202: CALL_OW 69
26206: PUSH
26207: FOR_IN
26208: IFFALSE 26428
// begin if not i in hackTanks then
26210: LD_VAR 0 1
26214: PUSH
26215: LD_EXP 95
26219: IN
26220: NOT
26221: IFFALSE 26304
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26223: LD_ADDR_EXP 95
26227: PUSH
26228: LD_EXP 95
26232: PPUSH
26233: LD_EXP 95
26237: PUSH
26238: LD_INT 1
26240: PLUS
26241: PPUSH
26242: LD_VAR 0 1
26246: PPUSH
26247: CALL_OW 1
26251: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26252: LD_ADDR_EXP 96
26256: PUSH
26257: LD_EXP 96
26261: PPUSH
26262: LD_EXP 96
26266: PUSH
26267: LD_INT 1
26269: PLUS
26270: PPUSH
26271: EMPTY
26272: PPUSH
26273: CALL_OW 1
26277: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26278: LD_ADDR_EXP 99
26282: PUSH
26283: LD_EXP 99
26287: PPUSH
26288: LD_EXP 99
26292: PUSH
26293: LD_INT 1
26295: PLUS
26296: PPUSH
26297: EMPTY
26298: PPUSH
26299: CALL_OW 1
26303: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26304: LD_VAR 0 1
26308: PPUSH
26309: CALL_OW 302
26313: NOT
26314: IFFALSE 26327
// begin HackUnlinkAll ( i ) ;
26316: LD_VAR 0 1
26320: PPUSH
26321: CALL 26433 0 1
// continue ;
26325: GO 26207
// end ; HackCheckCapturedStatus ( i ) ;
26327: LD_VAR 0 1
26331: PPUSH
26332: CALL 26876 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26336: LD_ADDR_VAR 0 2
26340: PUSH
26341: LD_INT 81
26343: PUSH
26344: LD_VAR 0 1
26348: PPUSH
26349: CALL_OW 255
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 33
26360: PUSH
26361: LD_INT 3
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 91
26370: PUSH
26371: LD_VAR 0 1
26375: PUSH
26376: LD_EXP 98
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 50
26388: PUSH
26389: EMPTY
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: PPUSH
26398: CALL_OW 69
26402: ST_TO_ADDR
// if not tmp then
26403: LD_VAR 0 2
26407: NOT
26408: IFFALSE 26412
// continue ;
26410: GO 26207
// HackLink ( i , tmp ) ;
26412: LD_VAR 0 1
26416: PPUSH
26417: LD_VAR 0 2
26421: PPUSH
26422: CALL 26569 0 2
// end ;
26426: GO 26207
26428: POP
26429: POP
// end ;
26430: PPOPN 2
26432: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26433: LD_INT 0
26435: PPUSH
26436: PPUSH
26437: PPUSH
// if not hack in hackTanks then
26438: LD_VAR 0 1
26442: PUSH
26443: LD_EXP 95
26447: IN
26448: NOT
26449: IFFALSE 26453
// exit ;
26451: GO 26564
// index := GetElementIndex ( hackTanks , hack ) ;
26453: LD_ADDR_VAR 0 4
26457: PUSH
26458: LD_EXP 95
26462: PPUSH
26463: LD_VAR 0 1
26467: PPUSH
26468: CALL 33998 0 2
26472: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26473: LD_EXP 96
26477: PUSH
26478: LD_VAR 0 4
26482: ARRAY
26483: IFFALSE 26564
// begin for i in hackTanksCaptured [ index ] do
26485: LD_ADDR_VAR 0 3
26489: PUSH
26490: LD_EXP 96
26494: PUSH
26495: LD_VAR 0 4
26499: ARRAY
26500: PUSH
26501: FOR_IN
26502: IFFALSE 26528
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26504: LD_VAR 0 3
26508: PUSH
26509: LD_INT 1
26511: ARRAY
26512: PPUSH
26513: LD_VAR 0 3
26517: PUSH
26518: LD_INT 2
26520: ARRAY
26521: PPUSH
26522: CALL_OW 235
26526: GO 26501
26528: POP
26529: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26530: LD_ADDR_EXP 96
26534: PUSH
26535: LD_EXP 96
26539: PPUSH
26540: LD_VAR 0 4
26544: PPUSH
26545: EMPTY
26546: PPUSH
26547: CALL_OW 1
26551: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26552: LD_VAR 0 1
26556: PPUSH
26557: LD_INT 0
26559: PPUSH
26560: CALL_OW 505
// end ; end ;
26564: LD_VAR 0 2
26568: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26569: LD_INT 0
26571: PPUSH
26572: PPUSH
26573: PPUSH
// if not hack in hackTanks or not vehicles then
26574: LD_VAR 0 1
26578: PUSH
26579: LD_EXP 95
26583: IN
26584: NOT
26585: PUSH
26586: LD_VAR 0 2
26590: NOT
26591: OR
26592: IFFALSE 26596
// exit ;
26594: GO 26871
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26596: LD_ADDR_VAR 0 2
26600: PUSH
26601: LD_VAR 0 1
26605: PPUSH
26606: LD_VAR 0 2
26610: PPUSH
26611: LD_INT 1
26613: PPUSH
26614: LD_INT 1
26616: PPUSH
26617: CALL 34648 0 4
26621: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26622: LD_ADDR_VAR 0 5
26626: PUSH
26627: LD_EXP 95
26631: PPUSH
26632: LD_VAR 0 1
26636: PPUSH
26637: CALL 33998 0 2
26641: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26642: LD_EXP 96
26646: PUSH
26647: LD_VAR 0 5
26651: ARRAY
26652: PUSH
26653: LD_EXP 97
26657: LESS
26658: IFFALSE 26847
// begin for i := 1 to vehicles do
26660: LD_ADDR_VAR 0 4
26664: PUSH
26665: DOUBLE
26666: LD_INT 1
26668: DEC
26669: ST_TO_ADDR
26670: LD_VAR 0 2
26674: PUSH
26675: FOR_TO
26676: IFFALSE 26845
// begin if hackTanksCaptured [ index ] = hackLimit then
26678: LD_EXP 96
26682: PUSH
26683: LD_VAR 0 5
26687: ARRAY
26688: PUSH
26689: LD_EXP 97
26693: EQUAL
26694: IFFALSE 26698
// break ;
26696: GO 26845
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26698: LD_ADDR_EXP 99
26702: PUSH
26703: LD_EXP 99
26707: PPUSH
26708: LD_VAR 0 5
26712: PPUSH
26713: LD_EXP 99
26717: PUSH
26718: LD_VAR 0 5
26722: ARRAY
26723: PUSH
26724: LD_INT 1
26726: PLUS
26727: PPUSH
26728: CALL_OW 1
26732: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26733: LD_ADDR_EXP 96
26737: PUSH
26738: LD_EXP 96
26742: PPUSH
26743: LD_VAR 0 5
26747: PUSH
26748: LD_EXP 96
26752: PUSH
26753: LD_VAR 0 5
26757: ARRAY
26758: PUSH
26759: LD_INT 1
26761: PLUS
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PPUSH
26767: LD_VAR 0 2
26771: PUSH
26772: LD_VAR 0 4
26776: ARRAY
26777: PUSH
26778: LD_VAR 0 2
26782: PUSH
26783: LD_VAR 0 4
26787: ARRAY
26788: PPUSH
26789: CALL_OW 255
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PPUSH
26798: CALL 34213 0 3
26802: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26803: LD_VAR 0 2
26807: PUSH
26808: LD_VAR 0 4
26812: ARRAY
26813: PPUSH
26814: LD_VAR 0 1
26818: PPUSH
26819: CALL_OW 255
26823: PPUSH
26824: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26828: LD_VAR 0 2
26832: PUSH
26833: LD_VAR 0 4
26837: ARRAY
26838: PPUSH
26839: CALL_OW 141
// end ;
26843: GO 26675
26845: POP
26846: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26847: LD_VAR 0 1
26851: PPUSH
26852: LD_EXP 96
26856: PUSH
26857: LD_VAR 0 5
26861: ARRAY
26862: PUSH
26863: LD_INT 0
26865: PLUS
26866: PPUSH
26867: CALL_OW 505
// end ;
26871: LD_VAR 0 3
26875: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26876: LD_INT 0
26878: PPUSH
26879: PPUSH
26880: PPUSH
26881: PPUSH
// if not hack in hackTanks then
26882: LD_VAR 0 1
26886: PUSH
26887: LD_EXP 95
26891: IN
26892: NOT
26893: IFFALSE 26897
// exit ;
26895: GO 27137
// index := GetElementIndex ( hackTanks , hack ) ;
26897: LD_ADDR_VAR 0 4
26901: PUSH
26902: LD_EXP 95
26906: PPUSH
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL 33998 0 2
26916: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26917: LD_ADDR_VAR 0 3
26921: PUSH
26922: DOUBLE
26923: LD_EXP 96
26927: PUSH
26928: LD_VAR 0 4
26932: ARRAY
26933: INC
26934: ST_TO_ADDR
26935: LD_INT 1
26937: PUSH
26938: FOR_DOWNTO
26939: IFFALSE 27111
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26941: LD_ADDR_VAR 0 5
26945: PUSH
26946: LD_EXP 96
26950: PUSH
26951: LD_VAR 0 4
26955: ARRAY
26956: PUSH
26957: LD_VAR 0 3
26961: ARRAY
26962: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26963: LD_VAR 0 5
26967: PUSH
26968: LD_INT 1
26970: ARRAY
26971: PPUSH
26972: CALL_OW 302
26976: NOT
26977: PUSH
26978: LD_VAR 0 5
26982: PUSH
26983: LD_INT 1
26985: ARRAY
26986: PPUSH
26987: CALL_OW 255
26991: PUSH
26992: LD_VAR 0 1
26996: PPUSH
26997: CALL_OW 255
27001: NONEQUAL
27002: OR
27003: IFFALSE 27109
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27005: LD_VAR 0 5
27009: PUSH
27010: LD_INT 1
27012: ARRAY
27013: PPUSH
27014: CALL_OW 305
27018: PUSH
27019: LD_VAR 0 5
27023: PUSH
27024: LD_INT 1
27026: ARRAY
27027: PPUSH
27028: CALL_OW 255
27032: PUSH
27033: LD_VAR 0 1
27037: PPUSH
27038: CALL_OW 255
27042: EQUAL
27043: AND
27044: IFFALSE 27068
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27046: LD_VAR 0 5
27050: PUSH
27051: LD_INT 1
27053: ARRAY
27054: PPUSH
27055: LD_VAR 0 5
27059: PUSH
27060: LD_INT 2
27062: ARRAY
27063: PPUSH
27064: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27068: LD_ADDR_EXP 96
27072: PUSH
27073: LD_EXP 96
27077: PPUSH
27078: LD_VAR 0 4
27082: PPUSH
27083: LD_EXP 96
27087: PUSH
27088: LD_VAR 0 4
27092: ARRAY
27093: PPUSH
27094: LD_VAR 0 3
27098: PPUSH
27099: CALL_OW 3
27103: PPUSH
27104: CALL_OW 1
27108: ST_TO_ADDR
// end ; end ;
27109: GO 26938
27111: POP
27112: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27113: LD_VAR 0 1
27117: PPUSH
27118: LD_EXP 96
27122: PUSH
27123: LD_VAR 0 4
27127: ARRAY
27128: PUSH
27129: LD_INT 0
27131: PLUS
27132: PPUSH
27133: CALL_OW 505
// end ;
27137: LD_VAR 0 2
27141: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27142: LD_INT 0
27144: PPUSH
27145: PPUSH
27146: PPUSH
27147: PPUSH
// if not hack in hackTanks then
27148: LD_VAR 0 1
27152: PUSH
27153: LD_EXP 95
27157: IN
27158: NOT
27159: IFFALSE 27163
// exit ;
27161: GO 27248
// index := GetElementIndex ( hackTanks , hack ) ;
27163: LD_ADDR_VAR 0 5
27167: PUSH
27168: LD_EXP 95
27172: PPUSH
27173: LD_VAR 0 1
27177: PPUSH
27178: CALL 33998 0 2
27182: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27183: LD_ADDR_VAR 0 4
27187: PUSH
27188: DOUBLE
27189: LD_INT 1
27191: DEC
27192: ST_TO_ADDR
27193: LD_EXP 96
27197: PUSH
27198: LD_VAR 0 5
27202: ARRAY
27203: PUSH
27204: FOR_TO
27205: IFFALSE 27246
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27207: LD_EXP 96
27211: PUSH
27212: LD_VAR 0 5
27216: ARRAY
27217: PUSH
27218: LD_VAR 0 4
27222: ARRAY
27223: PUSH
27224: LD_INT 1
27226: ARRAY
27227: PUSH
27228: LD_VAR 0 2
27232: EQUAL
27233: IFFALSE 27244
// KillUnit ( vehicle ) ;
27235: LD_VAR 0 2
27239: PPUSH
27240: CALL_OW 66
27244: GO 27204
27246: POP
27247: POP
// end ;
27248: LD_VAR 0 3
27252: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27253: LD_EXP 100
27257: NOT
27258: IFFALSE 27293
27260: GO 27262
27262: DISABLE
// begin initMiner := true ;
27263: LD_ADDR_EXP 100
27267: PUSH
27268: LD_INT 1
27270: ST_TO_ADDR
// minersList := [ ] ;
27271: LD_ADDR_EXP 101
27275: PUSH
27276: EMPTY
27277: ST_TO_ADDR
// minerMinesList := [ ] ;
27278: LD_ADDR_EXP 102
27282: PUSH
27283: EMPTY
27284: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27285: LD_ADDR_EXP 103
27289: PUSH
27290: LD_INT 5
27292: ST_TO_ADDR
// end ;
27293: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27294: LD_EXP 100
27298: PUSH
27299: LD_INT 34
27301: PUSH
27302: LD_EXP 28
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PPUSH
27311: CALL_OW 69
27315: AND
27316: IFFALSE 27779
27318: GO 27320
27320: DISABLE
27321: LD_INT 0
27323: PPUSH
27324: PPUSH
27325: PPUSH
27326: PPUSH
// begin enable ;
27327: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27328: LD_ADDR_VAR 0 1
27332: PUSH
27333: LD_INT 34
27335: PUSH
27336: LD_EXP 28
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PPUSH
27345: CALL_OW 69
27349: PUSH
27350: FOR_IN
27351: IFFALSE 27423
// begin if not i in minersList then
27353: LD_VAR 0 1
27357: PUSH
27358: LD_EXP 101
27362: IN
27363: NOT
27364: IFFALSE 27421
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27366: LD_ADDR_EXP 101
27370: PUSH
27371: LD_EXP 101
27375: PPUSH
27376: LD_EXP 101
27380: PUSH
27381: LD_INT 1
27383: PLUS
27384: PPUSH
27385: LD_VAR 0 1
27389: PPUSH
27390: CALL_OW 1
27394: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27395: LD_ADDR_EXP 102
27399: PUSH
27400: LD_EXP 102
27404: PPUSH
27405: LD_EXP 102
27409: PUSH
27410: LD_INT 1
27412: PLUS
27413: PPUSH
27414: EMPTY
27415: PPUSH
27416: CALL_OW 1
27420: ST_TO_ADDR
// end end ;
27421: GO 27350
27423: POP
27424: POP
// for i := minerMinesList downto 1 do
27425: LD_ADDR_VAR 0 1
27429: PUSH
27430: DOUBLE
27431: LD_EXP 102
27435: INC
27436: ST_TO_ADDR
27437: LD_INT 1
27439: PUSH
27440: FOR_DOWNTO
27441: IFFALSE 27777
// begin if IsLive ( minersList [ i ] ) then
27443: LD_EXP 101
27447: PUSH
27448: LD_VAR 0 1
27452: ARRAY
27453: PPUSH
27454: CALL_OW 300
27458: IFFALSE 27486
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27460: LD_EXP 101
27464: PUSH
27465: LD_VAR 0 1
27469: ARRAY
27470: PPUSH
27471: LD_EXP 102
27475: PUSH
27476: LD_VAR 0 1
27480: ARRAY
27481: PPUSH
27482: CALL_OW 505
// if not minerMinesList [ i ] then
27486: LD_EXP 102
27490: PUSH
27491: LD_VAR 0 1
27495: ARRAY
27496: NOT
27497: IFFALSE 27501
// continue ;
27499: GO 27440
// for j := minerMinesList [ i ] downto 1 do
27501: LD_ADDR_VAR 0 2
27505: PUSH
27506: DOUBLE
27507: LD_EXP 102
27511: PUSH
27512: LD_VAR 0 1
27516: ARRAY
27517: INC
27518: ST_TO_ADDR
27519: LD_INT 1
27521: PUSH
27522: FOR_DOWNTO
27523: IFFALSE 27773
// begin side := GetSide ( minersList [ i ] ) ;
27525: LD_ADDR_VAR 0 3
27529: PUSH
27530: LD_EXP 101
27534: PUSH
27535: LD_VAR 0 1
27539: ARRAY
27540: PPUSH
27541: CALL_OW 255
27545: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27546: LD_ADDR_VAR 0 4
27550: PUSH
27551: LD_EXP 102
27555: PUSH
27556: LD_VAR 0 1
27560: ARRAY
27561: PUSH
27562: LD_VAR 0 2
27566: ARRAY
27567: PUSH
27568: LD_INT 1
27570: ARRAY
27571: PPUSH
27572: LD_EXP 102
27576: PUSH
27577: LD_VAR 0 1
27581: ARRAY
27582: PUSH
27583: LD_VAR 0 2
27587: ARRAY
27588: PUSH
27589: LD_INT 2
27591: ARRAY
27592: PPUSH
27593: CALL_OW 428
27597: ST_TO_ADDR
// if not tmp then
27598: LD_VAR 0 4
27602: NOT
27603: IFFALSE 27607
// continue ;
27605: GO 27522
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27607: LD_VAR 0 4
27611: PUSH
27612: LD_INT 81
27614: PUSH
27615: LD_VAR 0 3
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PPUSH
27624: CALL_OW 69
27628: IN
27629: PUSH
27630: LD_EXP 102
27634: PUSH
27635: LD_VAR 0 1
27639: ARRAY
27640: PUSH
27641: LD_VAR 0 2
27645: ARRAY
27646: PUSH
27647: LD_INT 1
27649: ARRAY
27650: PPUSH
27651: LD_EXP 102
27655: PUSH
27656: LD_VAR 0 1
27660: ARRAY
27661: PUSH
27662: LD_VAR 0 2
27666: ARRAY
27667: PUSH
27668: LD_INT 2
27670: ARRAY
27671: PPUSH
27672: CALL_OW 458
27676: AND
27677: IFFALSE 27771
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27679: LD_EXP 102
27683: PUSH
27684: LD_VAR 0 1
27688: ARRAY
27689: PUSH
27690: LD_VAR 0 2
27694: ARRAY
27695: PUSH
27696: LD_INT 1
27698: ARRAY
27699: PPUSH
27700: LD_EXP 102
27704: PUSH
27705: LD_VAR 0 1
27709: ARRAY
27710: PUSH
27711: LD_VAR 0 2
27715: ARRAY
27716: PUSH
27717: LD_INT 2
27719: ARRAY
27720: PPUSH
27721: LD_VAR 0 3
27725: PPUSH
27726: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27730: LD_ADDR_EXP 102
27734: PUSH
27735: LD_EXP 102
27739: PPUSH
27740: LD_VAR 0 1
27744: PPUSH
27745: LD_EXP 102
27749: PUSH
27750: LD_VAR 0 1
27754: ARRAY
27755: PPUSH
27756: LD_VAR 0 2
27760: PPUSH
27761: CALL_OW 3
27765: PPUSH
27766: CALL_OW 1
27770: ST_TO_ADDR
// end ; end ;
27771: GO 27522
27773: POP
27774: POP
// end ;
27775: GO 27440
27777: POP
27778: POP
// end ;
27779: PPOPN 4
27781: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27782: LD_INT 0
27784: PPUSH
27785: PPUSH
// result := false ;
27786: LD_ADDR_VAR 0 4
27790: PUSH
27791: LD_INT 0
27793: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27794: LD_VAR 0 1
27798: PPUSH
27799: CALL_OW 264
27803: PUSH
27804: LD_EXP 28
27808: EQUAL
27809: NOT
27810: IFFALSE 27814
// exit ;
27812: GO 28054
// index := GetElementIndex ( minersList , unit ) ;
27814: LD_ADDR_VAR 0 5
27818: PUSH
27819: LD_EXP 101
27823: PPUSH
27824: LD_VAR 0 1
27828: PPUSH
27829: CALL 33998 0 2
27833: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27834: LD_EXP 102
27838: PUSH
27839: LD_VAR 0 5
27843: ARRAY
27844: PUSH
27845: LD_EXP 103
27849: GREATEREQUAL
27850: IFFALSE 27854
// exit ;
27852: GO 28054
// ComMoveXY ( unit , x , y ) ;
27854: LD_VAR 0 1
27858: PPUSH
27859: LD_VAR 0 2
27863: PPUSH
27864: LD_VAR 0 3
27868: PPUSH
27869: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27873: LD_INT 35
27875: PPUSH
27876: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27880: LD_VAR 0 1
27884: PPUSH
27885: LD_VAR 0 2
27889: PPUSH
27890: LD_VAR 0 3
27894: PPUSH
27895: CALL 64062 0 3
27899: NOT
27900: PUSH
27901: LD_VAR 0 1
27905: PPUSH
27906: CALL_OW 314
27910: AND
27911: IFFALSE 27915
// exit ;
27913: GO 28054
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27915: LD_VAR 0 2
27919: PPUSH
27920: LD_VAR 0 3
27924: PPUSH
27925: CALL_OW 428
27929: PUSH
27930: LD_VAR 0 1
27934: EQUAL
27935: PUSH
27936: LD_VAR 0 1
27940: PPUSH
27941: CALL_OW 314
27945: NOT
27946: AND
27947: IFFALSE 27873
// PlaySoundXY ( x , y , PlantMine ) ;
27949: LD_VAR 0 2
27953: PPUSH
27954: LD_VAR 0 3
27958: PPUSH
27959: LD_STRING PlantMine
27961: PPUSH
27962: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27966: LD_VAR 0 2
27970: PPUSH
27971: LD_VAR 0 3
27975: PPUSH
27976: LD_VAR 0 1
27980: PPUSH
27981: CALL_OW 255
27985: PPUSH
27986: LD_INT 0
27988: PPUSH
27989: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27993: LD_ADDR_EXP 102
27997: PUSH
27998: LD_EXP 102
28002: PPUSH
28003: LD_VAR 0 5
28007: PUSH
28008: LD_EXP 102
28012: PUSH
28013: LD_VAR 0 5
28017: ARRAY
28018: PUSH
28019: LD_INT 1
28021: PLUS
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PPUSH
28027: LD_VAR 0 2
28031: PUSH
28032: LD_VAR 0 3
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PPUSH
28041: CALL 34213 0 3
28045: ST_TO_ADDR
// result := true ;
28046: LD_ADDR_VAR 0 4
28050: PUSH
28051: LD_INT 1
28053: ST_TO_ADDR
// end ;
28054: LD_VAR 0 4
28058: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28059: LD_INT 0
28061: PPUSH
28062: PPUSH
28063: PPUSH
// if not unit in minersList then
28064: LD_VAR 0 1
28068: PUSH
28069: LD_EXP 101
28073: IN
28074: NOT
28075: IFFALSE 28079
// exit ;
28077: GO 28471
// index := GetElementIndex ( minersList , unit ) ;
28079: LD_ADDR_VAR 0 6
28083: PUSH
28084: LD_EXP 101
28088: PPUSH
28089: LD_VAR 0 1
28093: PPUSH
28094: CALL 33998 0 2
28098: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28099: LD_ADDR_VAR 0 5
28103: PUSH
28104: DOUBLE
28105: LD_EXP 102
28109: PUSH
28110: LD_VAR 0 6
28114: ARRAY
28115: INC
28116: ST_TO_ADDR
28117: LD_INT 1
28119: PUSH
28120: FOR_DOWNTO
28121: IFFALSE 28282
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28123: LD_EXP 102
28127: PUSH
28128: LD_VAR 0 6
28132: ARRAY
28133: PUSH
28134: LD_VAR 0 5
28138: ARRAY
28139: PUSH
28140: LD_INT 1
28142: ARRAY
28143: PUSH
28144: LD_VAR 0 2
28148: EQUAL
28149: PUSH
28150: LD_EXP 102
28154: PUSH
28155: LD_VAR 0 6
28159: ARRAY
28160: PUSH
28161: LD_VAR 0 5
28165: ARRAY
28166: PUSH
28167: LD_INT 2
28169: ARRAY
28170: PUSH
28171: LD_VAR 0 3
28175: EQUAL
28176: AND
28177: IFFALSE 28280
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28179: LD_EXP 102
28183: PUSH
28184: LD_VAR 0 6
28188: ARRAY
28189: PUSH
28190: LD_VAR 0 5
28194: ARRAY
28195: PUSH
28196: LD_INT 1
28198: ARRAY
28199: PPUSH
28200: LD_EXP 102
28204: PUSH
28205: LD_VAR 0 6
28209: ARRAY
28210: PUSH
28211: LD_VAR 0 5
28215: ARRAY
28216: PUSH
28217: LD_INT 2
28219: ARRAY
28220: PPUSH
28221: LD_VAR 0 1
28225: PPUSH
28226: CALL_OW 255
28230: PPUSH
28231: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28235: LD_ADDR_EXP 102
28239: PUSH
28240: LD_EXP 102
28244: PPUSH
28245: LD_VAR 0 6
28249: PPUSH
28250: LD_EXP 102
28254: PUSH
28255: LD_VAR 0 6
28259: ARRAY
28260: PPUSH
28261: LD_VAR 0 5
28265: PPUSH
28266: CALL_OW 3
28270: PPUSH
28271: CALL_OW 1
28275: ST_TO_ADDR
// exit ;
28276: POP
28277: POP
28278: GO 28471
// end ; end ;
28280: GO 28120
28282: POP
28283: POP
// for i := minerMinesList [ index ] downto 1 do
28284: LD_ADDR_VAR 0 5
28288: PUSH
28289: DOUBLE
28290: LD_EXP 102
28294: PUSH
28295: LD_VAR 0 6
28299: ARRAY
28300: INC
28301: ST_TO_ADDR
28302: LD_INT 1
28304: PUSH
28305: FOR_DOWNTO
28306: IFFALSE 28469
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28308: LD_EXP 102
28312: PUSH
28313: LD_VAR 0 6
28317: ARRAY
28318: PUSH
28319: LD_VAR 0 5
28323: ARRAY
28324: PUSH
28325: LD_INT 1
28327: ARRAY
28328: PPUSH
28329: LD_EXP 102
28333: PUSH
28334: LD_VAR 0 6
28338: ARRAY
28339: PUSH
28340: LD_VAR 0 5
28344: ARRAY
28345: PUSH
28346: LD_INT 2
28348: ARRAY
28349: PPUSH
28350: LD_VAR 0 2
28354: PPUSH
28355: LD_VAR 0 3
28359: PPUSH
28360: CALL_OW 298
28364: PUSH
28365: LD_INT 6
28367: LESS
28368: IFFALSE 28467
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28370: LD_EXP 102
28374: PUSH
28375: LD_VAR 0 6
28379: ARRAY
28380: PUSH
28381: LD_VAR 0 5
28385: ARRAY
28386: PUSH
28387: LD_INT 1
28389: ARRAY
28390: PPUSH
28391: LD_EXP 102
28395: PUSH
28396: LD_VAR 0 6
28400: ARRAY
28401: PUSH
28402: LD_VAR 0 5
28406: ARRAY
28407: PUSH
28408: LD_INT 2
28410: ARRAY
28411: PPUSH
28412: LD_VAR 0 1
28416: PPUSH
28417: CALL_OW 255
28421: PPUSH
28422: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28426: LD_ADDR_EXP 102
28430: PUSH
28431: LD_EXP 102
28435: PPUSH
28436: LD_VAR 0 6
28440: PPUSH
28441: LD_EXP 102
28445: PUSH
28446: LD_VAR 0 6
28450: ARRAY
28451: PPUSH
28452: LD_VAR 0 5
28456: PPUSH
28457: CALL_OW 3
28461: PPUSH
28462: CALL_OW 1
28466: ST_TO_ADDR
// end ; end ;
28467: GO 28305
28469: POP
28470: POP
// end ;
28471: LD_VAR 0 4
28475: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28476: LD_INT 0
28478: PPUSH
28479: PPUSH
28480: PPUSH
28481: PPUSH
28482: PPUSH
28483: PPUSH
28484: PPUSH
28485: PPUSH
28486: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28487: LD_VAR 0 1
28491: PPUSH
28492: CALL_OW 264
28496: PUSH
28497: LD_EXP 28
28501: EQUAL
28502: NOT
28503: PUSH
28504: LD_VAR 0 1
28508: PUSH
28509: LD_EXP 101
28513: IN
28514: NOT
28515: OR
28516: IFFALSE 28520
// exit ;
28518: GO 28842
// index := GetElementIndex ( minersList , unit ) ;
28520: LD_ADDR_VAR 0 6
28524: PUSH
28525: LD_EXP 101
28529: PPUSH
28530: LD_VAR 0 1
28534: PPUSH
28535: CALL 33998 0 2
28539: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28540: LD_ADDR_VAR 0 8
28544: PUSH
28545: LD_EXP 103
28549: PUSH
28550: LD_EXP 102
28554: PUSH
28555: LD_VAR 0 6
28559: ARRAY
28560: MINUS
28561: ST_TO_ADDR
// if not minesFreeAmount then
28562: LD_VAR 0 8
28566: NOT
28567: IFFALSE 28571
// exit ;
28569: GO 28842
// tmp := [ ] ;
28571: LD_ADDR_VAR 0 7
28575: PUSH
28576: EMPTY
28577: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28578: LD_ADDR_VAR 0 5
28582: PUSH
28583: DOUBLE
28584: LD_INT 1
28586: DEC
28587: ST_TO_ADDR
28588: LD_VAR 0 8
28592: PUSH
28593: FOR_TO
28594: IFFALSE 28789
// begin _d := rand ( 0 , 5 ) ;
28596: LD_ADDR_VAR 0 11
28600: PUSH
28601: LD_INT 0
28603: PPUSH
28604: LD_INT 5
28606: PPUSH
28607: CALL_OW 12
28611: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28612: LD_ADDR_VAR 0 12
28616: PUSH
28617: LD_INT 2
28619: PPUSH
28620: LD_INT 6
28622: PPUSH
28623: CALL_OW 12
28627: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28628: LD_ADDR_VAR 0 9
28632: PUSH
28633: LD_VAR 0 2
28637: PPUSH
28638: LD_VAR 0 11
28642: PPUSH
28643: LD_VAR 0 12
28647: PPUSH
28648: CALL_OW 272
28652: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28653: LD_ADDR_VAR 0 10
28657: PUSH
28658: LD_VAR 0 3
28662: PPUSH
28663: LD_VAR 0 11
28667: PPUSH
28668: LD_VAR 0 12
28672: PPUSH
28673: CALL_OW 273
28677: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28678: LD_VAR 0 9
28682: PPUSH
28683: LD_VAR 0 10
28687: PPUSH
28688: CALL_OW 488
28692: PUSH
28693: LD_VAR 0 9
28697: PUSH
28698: LD_VAR 0 10
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_VAR 0 7
28711: IN
28712: NOT
28713: AND
28714: PUSH
28715: LD_VAR 0 9
28719: PPUSH
28720: LD_VAR 0 10
28724: PPUSH
28725: CALL_OW 458
28729: NOT
28730: AND
28731: IFFALSE 28773
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28733: LD_ADDR_VAR 0 7
28737: PUSH
28738: LD_VAR 0 7
28742: PPUSH
28743: LD_VAR 0 7
28747: PUSH
28748: LD_INT 1
28750: PLUS
28751: PPUSH
28752: LD_VAR 0 9
28756: PUSH
28757: LD_VAR 0 10
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PPUSH
28766: CALL_OW 1
28770: ST_TO_ADDR
28771: GO 28787
// i := i - 1 ;
28773: LD_ADDR_VAR 0 5
28777: PUSH
28778: LD_VAR 0 5
28782: PUSH
28783: LD_INT 1
28785: MINUS
28786: ST_TO_ADDR
// end ;
28787: GO 28593
28789: POP
28790: POP
// for i in tmp do
28791: LD_ADDR_VAR 0 5
28795: PUSH
28796: LD_VAR 0 7
28800: PUSH
28801: FOR_IN
28802: IFFALSE 28840
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28804: LD_VAR 0 1
28808: PPUSH
28809: LD_VAR 0 5
28813: PUSH
28814: LD_INT 1
28816: ARRAY
28817: PPUSH
28818: LD_VAR 0 5
28822: PUSH
28823: LD_INT 2
28825: ARRAY
28826: PPUSH
28827: CALL 27782 0 3
28831: NOT
28832: IFFALSE 28838
// exit ;
28834: POP
28835: POP
28836: GO 28842
28838: GO 28801
28840: POP
28841: POP
// end ;
28842: LD_VAR 0 4
28846: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28847: LD_INT 0
28849: PPUSH
28850: PPUSH
28851: PPUSH
28852: PPUSH
28853: PPUSH
28854: PPUSH
28855: PPUSH
// if not GetClass ( unit ) = class_sniper then
28856: LD_VAR 0 1
28860: PPUSH
28861: CALL_OW 257
28865: PUSH
28866: LD_INT 5
28868: EQUAL
28869: NOT
28870: IFFALSE 28874
// exit ;
28872: GO 29262
// dist := 8 ;
28874: LD_ADDR_VAR 0 5
28878: PUSH
28879: LD_INT 8
28881: ST_TO_ADDR
// viewRange := 12 ;
28882: LD_ADDR_VAR 0 7
28886: PUSH
28887: LD_INT 12
28889: ST_TO_ADDR
// side := GetSide ( unit ) ;
28890: LD_ADDR_VAR 0 6
28894: PUSH
28895: LD_VAR 0 1
28899: PPUSH
28900: CALL_OW 255
28904: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28905: LD_INT 61
28907: PPUSH
28908: LD_VAR 0 6
28912: PPUSH
28913: CALL_OW 321
28917: PUSH
28918: LD_INT 2
28920: EQUAL
28921: IFFALSE 28931
// viewRange := 16 ;
28923: LD_ADDR_VAR 0 7
28927: PUSH
28928: LD_INT 16
28930: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28931: LD_VAR 0 1
28935: PPUSH
28936: LD_VAR 0 2
28940: PPUSH
28941: LD_VAR 0 3
28945: PPUSH
28946: CALL_OW 297
28950: PUSH
28951: LD_VAR 0 5
28955: GREATER
28956: IFFALSE 29035
// begin ComMoveXY ( unit , x , y ) ;
28958: LD_VAR 0 1
28962: PPUSH
28963: LD_VAR 0 2
28967: PPUSH
28968: LD_VAR 0 3
28972: PPUSH
28973: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28977: LD_INT 35
28979: PPUSH
28980: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28984: LD_VAR 0 1
28988: PPUSH
28989: LD_VAR 0 2
28993: PPUSH
28994: LD_VAR 0 3
28998: PPUSH
28999: CALL 64062 0 3
29003: NOT
29004: IFFALSE 29008
// exit ;
29006: GO 29262
// until GetDistUnitXY ( unit , x , y ) < dist ;
29008: LD_VAR 0 1
29012: PPUSH
29013: LD_VAR 0 2
29017: PPUSH
29018: LD_VAR 0 3
29022: PPUSH
29023: CALL_OW 297
29027: PUSH
29028: LD_VAR 0 5
29032: LESS
29033: IFFALSE 28977
// end ; ComTurnXY ( unit , x , y ) ;
29035: LD_VAR 0 1
29039: PPUSH
29040: LD_VAR 0 2
29044: PPUSH
29045: LD_VAR 0 3
29049: PPUSH
29050: CALL_OW 118
// wait ( 5 ) ;
29054: LD_INT 5
29056: PPUSH
29057: CALL_OW 67
// _d := GetDir ( unit ) ;
29061: LD_ADDR_VAR 0 10
29065: PUSH
29066: LD_VAR 0 1
29070: PPUSH
29071: CALL_OW 254
29075: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29076: LD_ADDR_VAR 0 8
29080: PUSH
29081: LD_VAR 0 1
29085: PPUSH
29086: CALL_OW 250
29090: PPUSH
29091: LD_VAR 0 10
29095: PPUSH
29096: LD_VAR 0 5
29100: PPUSH
29101: CALL_OW 272
29105: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29106: LD_ADDR_VAR 0 9
29110: PUSH
29111: LD_VAR 0 1
29115: PPUSH
29116: CALL_OW 251
29120: PPUSH
29121: LD_VAR 0 10
29125: PPUSH
29126: LD_VAR 0 5
29130: PPUSH
29131: CALL_OW 273
29135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29136: LD_VAR 0 8
29140: PPUSH
29141: LD_VAR 0 9
29145: PPUSH
29146: CALL_OW 488
29150: NOT
29151: IFFALSE 29155
// exit ;
29153: GO 29262
// ComAnimCustom ( unit , 1 ) ;
29155: LD_VAR 0 1
29159: PPUSH
29160: LD_INT 1
29162: PPUSH
29163: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29167: LD_VAR 0 8
29171: PPUSH
29172: LD_VAR 0 9
29176: PPUSH
29177: LD_VAR 0 6
29181: PPUSH
29182: LD_VAR 0 7
29186: PPUSH
29187: CALL_OW 330
// repeat wait ( 1 ) ;
29191: LD_INT 1
29193: PPUSH
29194: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29198: LD_VAR 0 1
29202: PPUSH
29203: CALL_OW 316
29207: PUSH
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 314
29217: OR
29218: PUSH
29219: LD_VAR 0 1
29223: PPUSH
29224: CALL_OW 302
29228: NOT
29229: OR
29230: PUSH
29231: LD_VAR 0 1
29235: PPUSH
29236: CALL_OW 301
29240: OR
29241: IFFALSE 29191
// RemoveSeeing ( _x , _y , side ) ;
29243: LD_VAR 0 8
29247: PPUSH
29248: LD_VAR 0 9
29252: PPUSH
29253: LD_VAR 0 6
29257: PPUSH
29258: CALL_OW 331
// end ; end_of_file
29262: LD_VAR 0 4
29266: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29267: LD_INT 0
29269: PPUSH
29270: PPUSH
// if exist_mode then
29271: LD_VAR 0 2
29275: IFFALSE 29300
// unit := CreateCharacter ( prefix & ident ) else
29277: LD_ADDR_VAR 0 5
29281: PUSH
29282: LD_VAR 0 3
29286: PUSH
29287: LD_VAR 0 1
29291: STR
29292: PPUSH
29293: CALL_OW 34
29297: ST_TO_ADDR
29298: GO 29315
// unit := NewCharacter ( ident ) ;
29300: LD_ADDR_VAR 0 5
29304: PUSH
29305: LD_VAR 0 1
29309: PPUSH
29310: CALL_OW 25
29314: ST_TO_ADDR
// result := unit ;
29315: LD_ADDR_VAR 0 4
29319: PUSH
29320: LD_VAR 0 5
29324: ST_TO_ADDR
// end ;
29325: LD_VAR 0 4
29329: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29330: LD_INT 0
29332: PPUSH
29333: PPUSH
// if not side or not nation then
29334: LD_VAR 0 1
29338: NOT
29339: PUSH
29340: LD_VAR 0 2
29344: NOT
29345: OR
29346: IFFALSE 29350
// exit ;
29348: GO 30114
// case nation of nation_american :
29350: LD_VAR 0 2
29354: PUSH
29355: LD_INT 1
29357: DOUBLE
29358: EQUAL
29359: IFTRUE 29363
29361: GO 29577
29363: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29364: LD_ADDR_VAR 0 4
29368: PUSH
29369: LD_INT 35
29371: PUSH
29372: LD_INT 45
29374: PUSH
29375: LD_INT 46
29377: PUSH
29378: LD_INT 47
29380: PUSH
29381: LD_INT 82
29383: PUSH
29384: LD_INT 83
29386: PUSH
29387: LD_INT 84
29389: PUSH
29390: LD_INT 85
29392: PUSH
29393: LD_INT 86
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: LD_INT 6
29404: PUSH
29405: LD_INT 15
29407: PUSH
29408: LD_INT 16
29410: PUSH
29411: LD_INT 7
29413: PUSH
29414: LD_INT 12
29416: PUSH
29417: LD_INT 13
29419: PUSH
29420: LD_INT 10
29422: PUSH
29423: LD_INT 14
29425: PUSH
29426: LD_INT 20
29428: PUSH
29429: LD_INT 21
29431: PUSH
29432: LD_INT 22
29434: PUSH
29435: LD_INT 25
29437: PUSH
29438: LD_INT 32
29440: PUSH
29441: LD_INT 27
29443: PUSH
29444: LD_INT 36
29446: PUSH
29447: LD_INT 69
29449: PUSH
29450: LD_INT 39
29452: PUSH
29453: LD_INT 34
29455: PUSH
29456: LD_INT 40
29458: PUSH
29459: LD_INT 48
29461: PUSH
29462: LD_INT 49
29464: PUSH
29465: LD_INT 50
29467: PUSH
29468: LD_INT 51
29470: PUSH
29471: LD_INT 52
29473: PUSH
29474: LD_INT 53
29476: PUSH
29477: LD_INT 54
29479: PUSH
29480: LD_INT 55
29482: PUSH
29483: LD_INT 56
29485: PUSH
29486: LD_INT 57
29488: PUSH
29489: LD_INT 58
29491: PUSH
29492: LD_INT 59
29494: PUSH
29495: LD_INT 60
29497: PUSH
29498: LD_INT 61
29500: PUSH
29501: LD_INT 62
29503: PUSH
29504: LD_INT 80
29506: PUSH
29507: LD_INT 82
29509: PUSH
29510: LD_INT 83
29512: PUSH
29513: LD_INT 84
29515: PUSH
29516: LD_INT 85
29518: PUSH
29519: LD_INT 86
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: ST_TO_ADDR
29575: GO 30038
29577: LD_INT 2
29579: DOUBLE
29580: EQUAL
29581: IFTRUE 29585
29583: GO 29807
29585: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29586: LD_ADDR_VAR 0 4
29590: PUSH
29591: LD_INT 35
29593: PUSH
29594: LD_INT 45
29596: PUSH
29597: LD_INT 46
29599: PUSH
29600: LD_INT 47
29602: PUSH
29603: LD_INT 82
29605: PUSH
29606: LD_INT 83
29608: PUSH
29609: LD_INT 84
29611: PUSH
29612: LD_INT 85
29614: PUSH
29615: LD_INT 87
29617: PUSH
29618: LD_INT 70
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: LD_INT 11
29626: PUSH
29627: LD_INT 3
29629: PUSH
29630: LD_INT 4
29632: PUSH
29633: LD_INT 5
29635: PUSH
29636: LD_INT 6
29638: PUSH
29639: LD_INT 15
29641: PUSH
29642: LD_INT 18
29644: PUSH
29645: LD_INT 7
29647: PUSH
29648: LD_INT 17
29650: PUSH
29651: LD_INT 8
29653: PUSH
29654: LD_INT 20
29656: PUSH
29657: LD_INT 21
29659: PUSH
29660: LD_INT 22
29662: PUSH
29663: LD_INT 72
29665: PUSH
29666: LD_INT 26
29668: PUSH
29669: LD_INT 69
29671: PUSH
29672: LD_INT 39
29674: PUSH
29675: LD_INT 40
29677: PUSH
29678: LD_INT 41
29680: PUSH
29681: LD_INT 42
29683: PUSH
29684: LD_INT 43
29686: PUSH
29687: LD_INT 48
29689: PUSH
29690: LD_INT 49
29692: PUSH
29693: LD_INT 50
29695: PUSH
29696: LD_INT 51
29698: PUSH
29699: LD_INT 52
29701: PUSH
29702: LD_INT 53
29704: PUSH
29705: LD_INT 54
29707: PUSH
29708: LD_INT 55
29710: PUSH
29711: LD_INT 56
29713: PUSH
29714: LD_INT 60
29716: PUSH
29717: LD_INT 61
29719: PUSH
29720: LD_INT 62
29722: PUSH
29723: LD_INT 66
29725: PUSH
29726: LD_INT 67
29728: PUSH
29729: LD_INT 68
29731: PUSH
29732: LD_INT 81
29734: PUSH
29735: LD_INT 82
29737: PUSH
29738: LD_INT 83
29740: PUSH
29741: LD_INT 84
29743: PUSH
29744: LD_INT 85
29746: PUSH
29747: LD_INT 87
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: ST_TO_ADDR
29805: GO 30038
29807: LD_INT 3
29809: DOUBLE
29810: EQUAL
29811: IFTRUE 29815
29813: GO 30037
29815: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29816: LD_ADDR_VAR 0 4
29820: PUSH
29821: LD_INT 46
29823: PUSH
29824: LD_INT 47
29826: PUSH
29827: LD_INT 1
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: LD_INT 82
29835: PUSH
29836: LD_INT 83
29838: PUSH
29839: LD_INT 84
29841: PUSH
29842: LD_INT 85
29844: PUSH
29845: LD_INT 86
29847: PUSH
29848: LD_INT 11
29850: PUSH
29851: LD_INT 9
29853: PUSH
29854: LD_INT 20
29856: PUSH
29857: LD_INT 19
29859: PUSH
29860: LD_INT 21
29862: PUSH
29863: LD_INT 24
29865: PUSH
29866: LD_INT 22
29868: PUSH
29869: LD_INT 25
29871: PUSH
29872: LD_INT 28
29874: PUSH
29875: LD_INT 29
29877: PUSH
29878: LD_INT 30
29880: PUSH
29881: LD_INT 31
29883: PUSH
29884: LD_INT 37
29886: PUSH
29887: LD_INT 38
29889: PUSH
29890: LD_INT 32
29892: PUSH
29893: LD_INT 27
29895: PUSH
29896: LD_INT 33
29898: PUSH
29899: LD_INT 69
29901: PUSH
29902: LD_INT 39
29904: PUSH
29905: LD_INT 34
29907: PUSH
29908: LD_INT 40
29910: PUSH
29911: LD_INT 71
29913: PUSH
29914: LD_INT 23
29916: PUSH
29917: LD_INT 44
29919: PUSH
29920: LD_INT 48
29922: PUSH
29923: LD_INT 49
29925: PUSH
29926: LD_INT 50
29928: PUSH
29929: LD_INT 51
29931: PUSH
29932: LD_INT 52
29934: PUSH
29935: LD_INT 53
29937: PUSH
29938: LD_INT 54
29940: PUSH
29941: LD_INT 55
29943: PUSH
29944: LD_INT 56
29946: PUSH
29947: LD_INT 57
29949: PUSH
29950: LD_INT 58
29952: PUSH
29953: LD_INT 59
29955: PUSH
29956: LD_INT 63
29958: PUSH
29959: LD_INT 64
29961: PUSH
29962: LD_INT 65
29964: PUSH
29965: LD_INT 82
29967: PUSH
29968: LD_INT 83
29970: PUSH
29971: LD_INT 84
29973: PUSH
29974: LD_INT 85
29976: PUSH
29977: LD_INT 86
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: ST_TO_ADDR
30035: GO 30038
30037: POP
// if state > - 1 and state < 3 then
30038: LD_VAR 0 3
30042: PUSH
30043: LD_INT 1
30045: NEG
30046: GREATER
30047: PUSH
30048: LD_VAR 0 3
30052: PUSH
30053: LD_INT 3
30055: LESS
30056: AND
30057: IFFALSE 30114
// for i in result do
30059: LD_ADDR_VAR 0 5
30063: PUSH
30064: LD_VAR 0 4
30068: PUSH
30069: FOR_IN
30070: IFFALSE 30112
// if GetTech ( i , side ) <> state then
30072: LD_VAR 0 5
30076: PPUSH
30077: LD_VAR 0 1
30081: PPUSH
30082: CALL_OW 321
30086: PUSH
30087: LD_VAR 0 3
30091: NONEQUAL
30092: IFFALSE 30110
// result := result diff i ;
30094: LD_ADDR_VAR 0 4
30098: PUSH
30099: LD_VAR 0 4
30103: PUSH
30104: LD_VAR 0 5
30108: DIFF
30109: ST_TO_ADDR
30110: GO 30069
30112: POP
30113: POP
// end ;
30114: LD_VAR 0 4
30118: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30119: LD_INT 0
30121: PPUSH
30122: PPUSH
30123: PPUSH
// result := true ;
30124: LD_ADDR_VAR 0 3
30128: PUSH
30129: LD_INT 1
30131: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30132: LD_ADDR_VAR 0 5
30136: PUSH
30137: LD_VAR 0 2
30141: PPUSH
30142: CALL_OW 480
30146: ST_TO_ADDR
// if not tmp then
30147: LD_VAR 0 5
30151: NOT
30152: IFFALSE 30156
// exit ;
30154: GO 30205
// for i in tmp do
30156: LD_ADDR_VAR 0 4
30160: PUSH
30161: LD_VAR 0 5
30165: PUSH
30166: FOR_IN
30167: IFFALSE 30203
// if GetTech ( i , side ) <> state_researched then
30169: LD_VAR 0 4
30173: PPUSH
30174: LD_VAR 0 1
30178: PPUSH
30179: CALL_OW 321
30183: PUSH
30184: LD_INT 2
30186: NONEQUAL
30187: IFFALSE 30201
// begin result := false ;
30189: LD_ADDR_VAR 0 3
30193: PUSH
30194: LD_INT 0
30196: ST_TO_ADDR
// exit ;
30197: POP
30198: POP
30199: GO 30205
// end ;
30201: GO 30166
30203: POP
30204: POP
// end ;
30205: LD_VAR 0 3
30209: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30210: LD_INT 0
30212: PPUSH
30213: PPUSH
30214: PPUSH
30215: PPUSH
30216: PPUSH
30217: PPUSH
30218: PPUSH
30219: PPUSH
30220: PPUSH
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30225: LD_VAR 0 1
30229: NOT
30230: PUSH
30231: LD_VAR 0 1
30235: PPUSH
30236: CALL_OW 257
30240: PUSH
30241: LD_INT 9
30243: NONEQUAL
30244: OR
30245: IFFALSE 30249
// exit ;
30247: GO 30822
// side := GetSide ( unit ) ;
30249: LD_ADDR_VAR 0 9
30253: PUSH
30254: LD_VAR 0 1
30258: PPUSH
30259: CALL_OW 255
30263: ST_TO_ADDR
// tech_space := tech_spacanom ;
30264: LD_ADDR_VAR 0 12
30268: PUSH
30269: LD_INT 29
30271: ST_TO_ADDR
// tech_time := tech_taurad ;
30272: LD_ADDR_VAR 0 13
30276: PUSH
30277: LD_INT 28
30279: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30280: LD_ADDR_VAR 0 11
30284: PUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL_OW 310
30294: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30295: LD_VAR 0 11
30299: PPUSH
30300: CALL_OW 247
30304: PUSH
30305: LD_INT 2
30307: EQUAL
30308: IFFALSE 30312
// exit ;
30310: GO 30822
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30312: LD_ADDR_VAR 0 8
30316: PUSH
30317: LD_INT 81
30319: PUSH
30320: LD_VAR 0 9
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 3
30331: PUSH
30332: LD_INT 21
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PPUSH
30350: CALL_OW 69
30354: ST_TO_ADDR
// if not tmp then
30355: LD_VAR 0 8
30359: NOT
30360: IFFALSE 30364
// exit ;
30362: GO 30822
// if in_unit then
30364: LD_VAR 0 11
30368: IFFALSE 30392
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30370: LD_ADDR_VAR 0 10
30374: PUSH
30375: LD_VAR 0 8
30379: PPUSH
30380: LD_VAR 0 11
30384: PPUSH
30385: CALL_OW 74
30389: ST_TO_ADDR
30390: GO 30412
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30392: LD_ADDR_VAR 0 10
30396: PUSH
30397: LD_VAR 0 8
30401: PPUSH
30402: LD_VAR 0 1
30406: PPUSH
30407: CALL_OW 74
30411: ST_TO_ADDR
// if not enemy then
30412: LD_VAR 0 10
30416: NOT
30417: IFFALSE 30421
// exit ;
30419: GO 30822
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30421: LD_VAR 0 11
30425: PUSH
30426: LD_VAR 0 11
30430: PPUSH
30431: LD_VAR 0 10
30435: PPUSH
30436: CALL_OW 296
30440: PUSH
30441: LD_INT 13
30443: GREATER
30444: AND
30445: PUSH
30446: LD_VAR 0 1
30450: PPUSH
30451: LD_VAR 0 10
30455: PPUSH
30456: CALL_OW 296
30460: PUSH
30461: LD_INT 12
30463: GREATER
30464: OR
30465: IFFALSE 30469
// exit ;
30467: GO 30822
// missile := [ 1 ] ;
30469: LD_ADDR_VAR 0 14
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: EMPTY
30478: LIST
30479: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30480: LD_VAR 0 9
30484: PPUSH
30485: LD_VAR 0 12
30489: PPUSH
30490: CALL_OW 325
30494: IFFALSE 30523
// missile := Insert ( missile , missile + 1 , 2 ) ;
30496: LD_ADDR_VAR 0 14
30500: PUSH
30501: LD_VAR 0 14
30505: PPUSH
30506: LD_VAR 0 14
30510: PUSH
30511: LD_INT 1
30513: PLUS
30514: PPUSH
30515: LD_INT 2
30517: PPUSH
30518: CALL_OW 2
30522: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30523: LD_VAR 0 9
30527: PPUSH
30528: LD_VAR 0 13
30532: PPUSH
30533: CALL_OW 325
30537: PUSH
30538: LD_VAR 0 10
30542: PPUSH
30543: CALL_OW 255
30547: PPUSH
30548: LD_VAR 0 13
30552: PPUSH
30553: CALL_OW 325
30557: NOT
30558: AND
30559: IFFALSE 30588
// missile := Insert ( missile , missile + 1 , 3 ) ;
30561: LD_ADDR_VAR 0 14
30565: PUSH
30566: LD_VAR 0 14
30570: PPUSH
30571: LD_VAR 0 14
30575: PUSH
30576: LD_INT 1
30578: PLUS
30579: PPUSH
30580: LD_INT 3
30582: PPUSH
30583: CALL_OW 2
30587: ST_TO_ADDR
// if missile < 2 then
30588: LD_VAR 0 14
30592: PUSH
30593: LD_INT 2
30595: LESS
30596: IFFALSE 30600
// exit ;
30598: GO 30822
// x := GetX ( enemy ) ;
30600: LD_ADDR_VAR 0 4
30604: PUSH
30605: LD_VAR 0 10
30609: PPUSH
30610: CALL_OW 250
30614: ST_TO_ADDR
// y := GetY ( enemy ) ;
30615: LD_ADDR_VAR 0 5
30619: PUSH
30620: LD_VAR 0 10
30624: PPUSH
30625: CALL_OW 251
30629: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30630: LD_ADDR_VAR 0 6
30634: PUSH
30635: LD_VAR 0 4
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PPUSH
30644: LD_INT 1
30646: PPUSH
30647: CALL_OW 12
30651: PLUS
30652: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30653: LD_ADDR_VAR 0 7
30657: PUSH
30658: LD_VAR 0 5
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PPUSH
30667: LD_INT 1
30669: PPUSH
30670: CALL_OW 12
30674: PLUS
30675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30676: LD_VAR 0 6
30680: PPUSH
30681: LD_VAR 0 7
30685: PPUSH
30686: CALL_OW 488
30690: NOT
30691: IFFALSE 30713
// begin _x := x ;
30693: LD_ADDR_VAR 0 6
30697: PUSH
30698: LD_VAR 0 4
30702: ST_TO_ADDR
// _y := y ;
30703: LD_ADDR_VAR 0 7
30707: PUSH
30708: LD_VAR 0 5
30712: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30713: LD_ADDR_VAR 0 3
30717: PUSH
30718: LD_INT 1
30720: PPUSH
30721: LD_VAR 0 14
30725: PPUSH
30726: CALL_OW 12
30730: ST_TO_ADDR
// case i of 1 :
30731: LD_VAR 0 3
30735: PUSH
30736: LD_INT 1
30738: DOUBLE
30739: EQUAL
30740: IFTRUE 30744
30742: GO 30761
30744: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30745: LD_VAR 0 1
30749: PPUSH
30750: LD_VAR 0 10
30754: PPUSH
30755: CALL_OW 115
30759: GO 30822
30761: LD_INT 2
30763: DOUBLE
30764: EQUAL
30765: IFTRUE 30769
30767: GO 30791
30769: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30770: LD_VAR 0 1
30774: PPUSH
30775: LD_VAR 0 6
30779: PPUSH
30780: LD_VAR 0 7
30784: PPUSH
30785: CALL_OW 153
30789: GO 30822
30791: LD_INT 3
30793: DOUBLE
30794: EQUAL
30795: IFTRUE 30799
30797: GO 30821
30799: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30800: LD_VAR 0 1
30804: PPUSH
30805: LD_VAR 0 6
30809: PPUSH
30810: LD_VAR 0 7
30814: PPUSH
30815: CALL_OW 154
30819: GO 30822
30821: POP
// end ;
30822: LD_VAR 0 2
30826: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30827: LD_INT 0
30829: PPUSH
30830: PPUSH
30831: PPUSH
30832: PPUSH
30833: PPUSH
30834: PPUSH
// if not unit or not building then
30835: LD_VAR 0 1
30839: NOT
30840: PUSH
30841: LD_VAR 0 2
30845: NOT
30846: OR
30847: IFFALSE 30851
// exit ;
30849: GO 31009
// x := GetX ( building ) ;
30851: LD_ADDR_VAR 0 5
30855: PUSH
30856: LD_VAR 0 2
30860: PPUSH
30861: CALL_OW 250
30865: ST_TO_ADDR
// y := GetY ( building ) ;
30866: LD_ADDR_VAR 0 6
30870: PUSH
30871: LD_VAR 0 2
30875: PPUSH
30876: CALL_OW 251
30880: ST_TO_ADDR
// for i = 0 to 5 do
30881: LD_ADDR_VAR 0 4
30885: PUSH
30886: DOUBLE
30887: LD_INT 0
30889: DEC
30890: ST_TO_ADDR
30891: LD_INT 5
30893: PUSH
30894: FOR_TO
30895: IFFALSE 31007
// begin _x := ShiftX ( x , i , 3 ) ;
30897: LD_ADDR_VAR 0 7
30901: PUSH
30902: LD_VAR 0 5
30906: PPUSH
30907: LD_VAR 0 4
30911: PPUSH
30912: LD_INT 3
30914: PPUSH
30915: CALL_OW 272
30919: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30920: LD_ADDR_VAR 0 8
30924: PUSH
30925: LD_VAR 0 6
30929: PPUSH
30930: LD_VAR 0 4
30934: PPUSH
30935: LD_INT 3
30937: PPUSH
30938: CALL_OW 273
30942: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30943: LD_VAR 0 7
30947: PPUSH
30948: LD_VAR 0 8
30952: PPUSH
30953: CALL_OW 488
30957: NOT
30958: IFFALSE 30962
// continue ;
30960: GO 30894
// if HexInfo ( _x , _y ) = 0 then
30962: LD_VAR 0 7
30966: PPUSH
30967: LD_VAR 0 8
30971: PPUSH
30972: CALL_OW 428
30976: PUSH
30977: LD_INT 0
30979: EQUAL
30980: IFFALSE 31005
// begin ComMoveXY ( unit , _x , _y ) ;
30982: LD_VAR 0 1
30986: PPUSH
30987: LD_VAR 0 7
30991: PPUSH
30992: LD_VAR 0 8
30996: PPUSH
30997: CALL_OW 111
// exit ;
31001: POP
31002: POP
31003: GO 31009
// end ; end ;
31005: GO 30894
31007: POP
31008: POP
// end ;
31009: LD_VAR 0 3
31013: RET
// export function ScanBase ( side , base_area ) ; begin
31014: LD_INT 0
31016: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31017: LD_ADDR_VAR 0 3
31021: PUSH
31022: LD_VAR 0 2
31026: PPUSH
31027: LD_INT 81
31029: PUSH
31030: LD_VAR 0 1
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PPUSH
31039: CALL_OW 70
31043: ST_TO_ADDR
// end ;
31044: LD_VAR 0 3
31048: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31049: LD_INT 0
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
// result := false ;
31055: LD_ADDR_VAR 0 2
31059: PUSH
31060: LD_INT 0
31062: ST_TO_ADDR
// side := GetSide ( unit ) ;
31063: LD_ADDR_VAR 0 3
31067: PUSH
31068: LD_VAR 0 1
31072: PPUSH
31073: CALL_OW 255
31077: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31078: LD_ADDR_VAR 0 4
31082: PUSH
31083: LD_VAR 0 1
31087: PPUSH
31088: CALL_OW 248
31092: ST_TO_ADDR
// case nat of 1 :
31093: LD_VAR 0 4
31097: PUSH
31098: LD_INT 1
31100: DOUBLE
31101: EQUAL
31102: IFTRUE 31106
31104: GO 31117
31106: POP
// tech := tech_lassight ; 2 :
31107: LD_ADDR_VAR 0 5
31111: PUSH
31112: LD_INT 12
31114: ST_TO_ADDR
31115: GO 31156
31117: LD_INT 2
31119: DOUBLE
31120: EQUAL
31121: IFTRUE 31125
31123: GO 31136
31125: POP
// tech := tech_mortar ; 3 :
31126: LD_ADDR_VAR 0 5
31130: PUSH
31131: LD_INT 41
31133: ST_TO_ADDR
31134: GO 31156
31136: LD_INT 3
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31155
31144: POP
// tech := tech_bazooka ; end ;
31145: LD_ADDR_VAR 0 5
31149: PUSH
31150: LD_INT 44
31152: ST_TO_ADDR
31153: GO 31156
31155: POP
// if Researched ( side , tech ) then
31156: LD_VAR 0 3
31160: PPUSH
31161: LD_VAR 0 5
31165: PPUSH
31166: CALL_OW 325
31170: IFFALSE 31197
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31172: LD_ADDR_VAR 0 2
31176: PUSH
31177: LD_INT 5
31179: PUSH
31180: LD_INT 8
31182: PUSH
31183: LD_INT 9
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: PUSH
31191: LD_VAR 0 4
31195: ARRAY
31196: ST_TO_ADDR
// end ;
31197: LD_VAR 0 2
31201: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31202: LD_INT 0
31204: PPUSH
31205: PPUSH
31206: PPUSH
// if not mines then
31207: LD_VAR 0 2
31211: NOT
31212: IFFALSE 31216
// exit ;
31214: GO 31360
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31216: LD_ADDR_VAR 0 5
31220: PUSH
31221: LD_INT 81
31223: PUSH
31224: LD_VAR 0 1
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 3
31235: PUSH
31236: LD_INT 21
31238: PUSH
31239: LD_INT 3
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PPUSH
31254: CALL_OW 69
31258: ST_TO_ADDR
// for i in mines do
31259: LD_ADDR_VAR 0 4
31263: PUSH
31264: LD_VAR 0 2
31268: PUSH
31269: FOR_IN
31270: IFFALSE 31358
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31272: LD_VAR 0 4
31276: PUSH
31277: LD_INT 1
31279: ARRAY
31280: PPUSH
31281: LD_VAR 0 4
31285: PUSH
31286: LD_INT 2
31288: ARRAY
31289: PPUSH
31290: CALL_OW 458
31294: NOT
31295: IFFALSE 31299
// continue ;
31297: GO 31269
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31299: LD_VAR 0 4
31303: PUSH
31304: LD_INT 1
31306: ARRAY
31307: PPUSH
31308: LD_VAR 0 4
31312: PUSH
31313: LD_INT 2
31315: ARRAY
31316: PPUSH
31317: CALL_OW 428
31321: PUSH
31322: LD_VAR 0 5
31326: IN
31327: IFFALSE 31356
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31329: LD_VAR 0 4
31333: PUSH
31334: LD_INT 1
31336: ARRAY
31337: PPUSH
31338: LD_VAR 0 4
31342: PUSH
31343: LD_INT 2
31345: ARRAY
31346: PPUSH
31347: LD_VAR 0 1
31351: PPUSH
31352: CALL_OW 456
// end ;
31356: GO 31269
31358: POP
31359: POP
// end ;
31360: LD_VAR 0 3
31364: RET
// export function Count ( array ) ; var i ; begin
31365: LD_INT 0
31367: PPUSH
31368: PPUSH
// result := 0 ;
31369: LD_ADDR_VAR 0 2
31373: PUSH
31374: LD_INT 0
31376: ST_TO_ADDR
// for i in array do
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: LD_VAR 0 1
31386: PUSH
31387: FOR_IN
31388: IFFALSE 31412
// if i then
31390: LD_VAR 0 3
31394: IFFALSE 31410
// result := result + 1 ;
31396: LD_ADDR_VAR 0 2
31400: PUSH
31401: LD_VAR 0 2
31405: PUSH
31406: LD_INT 1
31408: PLUS
31409: ST_TO_ADDR
31410: GO 31387
31412: POP
31413: POP
// end ;
31414: LD_VAR 0 2
31418: RET
// export function IsEmpty ( building ) ; begin
31419: LD_INT 0
31421: PPUSH
// if not building then
31422: LD_VAR 0 1
31426: NOT
31427: IFFALSE 31431
// exit ;
31429: GO 31474
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31431: LD_ADDR_VAR 0 2
31435: PUSH
31436: LD_VAR 0 1
31440: PUSH
31441: LD_INT 22
31443: PUSH
31444: LD_VAR 0 1
31448: PPUSH
31449: CALL_OW 255
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 58
31460: PUSH
31461: EMPTY
31462: LIST
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PPUSH
31468: CALL_OW 69
31472: IN
31473: ST_TO_ADDR
// end ;
31474: LD_VAR 0 2
31478: RET
// export function IsNotFull ( building ) ; begin
31479: LD_INT 0
31481: PPUSH
// if not building then
31482: LD_VAR 0 1
31486: NOT
31487: IFFALSE 31491
// exit ;
31489: GO 31510
// result := UnitsInside ( building ) < 6 ;
31491: LD_ADDR_VAR 0 2
31495: PUSH
31496: LD_VAR 0 1
31500: PPUSH
31501: CALL_OW 313
31505: PUSH
31506: LD_INT 6
31508: LESS
31509: ST_TO_ADDR
// end ;
31510: LD_VAR 0 2
31514: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31515: LD_INT 0
31517: PPUSH
31518: PPUSH
31519: PPUSH
31520: PPUSH
// tmp := [ ] ;
31521: LD_ADDR_VAR 0 3
31525: PUSH
31526: EMPTY
31527: ST_TO_ADDR
// list := [ ] ;
31528: LD_ADDR_VAR 0 5
31532: PUSH
31533: EMPTY
31534: ST_TO_ADDR
// for i = 16 to 25 do
31535: LD_ADDR_VAR 0 4
31539: PUSH
31540: DOUBLE
31541: LD_INT 16
31543: DEC
31544: ST_TO_ADDR
31545: LD_INT 25
31547: PUSH
31548: FOR_TO
31549: IFFALSE 31622
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31551: LD_ADDR_VAR 0 3
31555: PUSH
31556: LD_VAR 0 3
31560: PUSH
31561: LD_INT 22
31563: PUSH
31564: LD_VAR 0 1
31568: PPUSH
31569: CALL_OW 255
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 91
31580: PUSH
31581: LD_VAR 0 1
31585: PUSH
31586: LD_INT 6
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 30
31596: PUSH
31597: LD_VAR 0 4
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: PPUSH
31614: CALL_OW 69
31618: ADD
31619: ST_TO_ADDR
31620: GO 31548
31622: POP
31623: POP
// for i = 1 to tmp do
31624: LD_ADDR_VAR 0 4
31628: PUSH
31629: DOUBLE
31630: LD_INT 1
31632: DEC
31633: ST_TO_ADDR
31634: LD_VAR 0 3
31638: PUSH
31639: FOR_TO
31640: IFFALSE 31728
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31642: LD_ADDR_VAR 0 5
31646: PUSH
31647: LD_VAR 0 5
31651: PUSH
31652: LD_VAR 0 3
31656: PUSH
31657: LD_VAR 0 4
31661: ARRAY
31662: PPUSH
31663: CALL_OW 266
31667: PUSH
31668: LD_VAR 0 3
31672: PUSH
31673: LD_VAR 0 4
31677: ARRAY
31678: PPUSH
31679: CALL_OW 250
31683: PUSH
31684: LD_VAR 0 3
31688: PUSH
31689: LD_VAR 0 4
31693: ARRAY
31694: PPUSH
31695: CALL_OW 251
31699: PUSH
31700: LD_VAR 0 3
31704: PUSH
31705: LD_VAR 0 4
31709: ARRAY
31710: PPUSH
31711: CALL_OW 254
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: PUSH
31722: EMPTY
31723: LIST
31724: ADD
31725: ST_TO_ADDR
31726: GO 31639
31728: POP
31729: POP
// result := list ;
31730: LD_ADDR_VAR 0 2
31734: PUSH
31735: LD_VAR 0 5
31739: ST_TO_ADDR
// end ;
31740: LD_VAR 0 2
31744: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31745: LD_INT 0
31747: PPUSH
31748: PPUSH
31749: PPUSH
31750: PPUSH
31751: PPUSH
31752: PPUSH
31753: PPUSH
// if not factory then
31754: LD_VAR 0 1
31758: NOT
31759: IFFALSE 31763
// exit ;
31761: GO 32356
// if control = control_apeman then
31763: LD_VAR 0 4
31767: PUSH
31768: LD_INT 5
31770: EQUAL
31771: IFFALSE 31880
// begin tmp := UnitsInside ( factory ) ;
31773: LD_ADDR_VAR 0 8
31777: PUSH
31778: LD_VAR 0 1
31782: PPUSH
31783: CALL_OW 313
31787: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31788: LD_VAR 0 8
31792: PPUSH
31793: LD_INT 25
31795: PUSH
31796: LD_INT 12
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PPUSH
31803: CALL_OW 72
31807: NOT
31808: IFFALSE 31818
// control := control_manual ;
31810: LD_ADDR_VAR 0 4
31814: PUSH
31815: LD_INT 1
31817: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31818: LD_ADDR_VAR 0 8
31822: PUSH
31823: LD_VAR 0 1
31827: PPUSH
31828: CALL 31515 0 1
31832: ST_TO_ADDR
// if tmp then
31833: LD_VAR 0 8
31837: IFFALSE 31880
// begin for i in tmp do
31839: LD_ADDR_VAR 0 7
31843: PUSH
31844: LD_VAR 0 8
31848: PUSH
31849: FOR_IN
31850: IFFALSE 31878
// if i [ 1 ] = b_ext_radio then
31852: LD_VAR 0 7
31856: PUSH
31857: LD_INT 1
31859: ARRAY
31860: PUSH
31861: LD_INT 22
31863: EQUAL
31864: IFFALSE 31876
// begin control := control_remote ;
31866: LD_ADDR_VAR 0 4
31870: PUSH
31871: LD_INT 2
31873: ST_TO_ADDR
// break ;
31874: GO 31878
// end ;
31876: GO 31849
31878: POP
31879: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31880: LD_VAR 0 1
31884: PPUSH
31885: LD_VAR 0 2
31889: PPUSH
31890: LD_VAR 0 3
31894: PPUSH
31895: LD_VAR 0 4
31899: PPUSH
31900: LD_VAR 0 5
31904: PPUSH
31905: CALL_OW 448
31909: IFFALSE 31944
// begin result := [ chassis , engine , control , weapon ] ;
31911: LD_ADDR_VAR 0 6
31915: PUSH
31916: LD_VAR 0 2
31920: PUSH
31921: LD_VAR 0 3
31925: PUSH
31926: LD_VAR 0 4
31930: PUSH
31931: LD_VAR 0 5
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: ST_TO_ADDR
// exit ;
31942: GO 32356
// end ; _chassis := AvailableChassisList ( factory ) ;
31944: LD_ADDR_VAR 0 9
31948: PUSH
31949: LD_VAR 0 1
31953: PPUSH
31954: CALL_OW 475
31958: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31959: LD_ADDR_VAR 0 11
31963: PUSH
31964: LD_VAR 0 1
31968: PPUSH
31969: CALL_OW 476
31973: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31974: LD_ADDR_VAR 0 12
31978: PUSH
31979: LD_VAR 0 1
31983: PPUSH
31984: CALL_OW 477
31988: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31989: LD_ADDR_VAR 0 10
31993: PUSH
31994: LD_VAR 0 1
31998: PPUSH
31999: CALL_OW 478
32003: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32004: LD_VAR 0 9
32008: NOT
32009: PUSH
32010: LD_VAR 0 11
32014: NOT
32015: OR
32016: PUSH
32017: LD_VAR 0 12
32021: NOT
32022: OR
32023: PUSH
32024: LD_VAR 0 10
32028: NOT
32029: OR
32030: IFFALSE 32065
// begin result := [ chassis , engine , control , weapon ] ;
32032: LD_ADDR_VAR 0 6
32036: PUSH
32037: LD_VAR 0 2
32041: PUSH
32042: LD_VAR 0 3
32046: PUSH
32047: LD_VAR 0 4
32051: PUSH
32052: LD_VAR 0 5
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
// exit ;
32063: GO 32356
// end ; if not chassis in _chassis then
32065: LD_VAR 0 2
32069: PUSH
32070: LD_VAR 0 9
32074: IN
32075: NOT
32076: IFFALSE 32102
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32078: LD_ADDR_VAR 0 2
32082: PUSH
32083: LD_VAR 0 9
32087: PUSH
32088: LD_INT 1
32090: PPUSH
32091: LD_VAR 0 9
32095: PPUSH
32096: CALL_OW 12
32100: ARRAY
32101: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32102: LD_VAR 0 2
32106: PPUSH
32107: LD_VAR 0 3
32111: PPUSH
32112: CALL 32361 0 2
32116: NOT
32117: IFFALSE 32176
// repeat engine := _engine [ 1 ] ;
32119: LD_ADDR_VAR 0 3
32123: PUSH
32124: LD_VAR 0 11
32128: PUSH
32129: LD_INT 1
32131: ARRAY
32132: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32133: LD_ADDR_VAR 0 11
32137: PUSH
32138: LD_VAR 0 11
32142: PPUSH
32143: LD_INT 1
32145: PPUSH
32146: CALL_OW 3
32150: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32151: LD_VAR 0 2
32155: PPUSH
32156: LD_VAR 0 3
32160: PPUSH
32161: CALL 32361 0 2
32165: PUSH
32166: LD_VAR 0 11
32170: PUSH
32171: EMPTY
32172: EQUAL
32173: OR
32174: IFFALSE 32119
// if not control in _control then
32176: LD_VAR 0 4
32180: PUSH
32181: LD_VAR 0 12
32185: IN
32186: NOT
32187: IFFALSE 32213
// control := _control [ rand ( 1 , _control ) ] ;
32189: LD_ADDR_VAR 0 4
32193: PUSH
32194: LD_VAR 0 12
32198: PUSH
32199: LD_INT 1
32201: PPUSH
32202: LD_VAR 0 12
32206: PPUSH
32207: CALL_OW 12
32211: ARRAY
32212: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32213: LD_VAR 0 2
32217: PPUSH
32218: LD_VAR 0 5
32222: PPUSH
32223: CALL 32581 0 2
32227: NOT
32228: IFFALSE 32287
// repeat weapon := _weapon [ 1 ] ;
32230: LD_ADDR_VAR 0 5
32234: PUSH
32235: LD_VAR 0 10
32239: PUSH
32240: LD_INT 1
32242: ARRAY
32243: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32244: LD_ADDR_VAR 0 10
32248: PUSH
32249: LD_VAR 0 10
32253: PPUSH
32254: LD_INT 1
32256: PPUSH
32257: CALL_OW 3
32261: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32262: LD_VAR 0 2
32266: PPUSH
32267: LD_VAR 0 5
32271: PPUSH
32272: CALL 32581 0 2
32276: PUSH
32277: LD_VAR 0 10
32281: PUSH
32282: EMPTY
32283: EQUAL
32284: OR
32285: IFFALSE 32230
// result := [ ] ;
32287: LD_ADDR_VAR 0 6
32291: PUSH
32292: EMPTY
32293: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32294: LD_VAR 0 1
32298: PPUSH
32299: LD_VAR 0 2
32303: PPUSH
32304: LD_VAR 0 3
32308: PPUSH
32309: LD_VAR 0 4
32313: PPUSH
32314: LD_VAR 0 5
32318: PPUSH
32319: CALL_OW 448
32323: IFFALSE 32356
// result := [ chassis , engine , control , weapon ] ;
32325: LD_ADDR_VAR 0 6
32329: PUSH
32330: LD_VAR 0 2
32334: PUSH
32335: LD_VAR 0 3
32339: PUSH
32340: LD_VAR 0 4
32344: PUSH
32345: LD_VAR 0 5
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: ST_TO_ADDR
// end ;
32356: LD_VAR 0 6
32360: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32361: LD_INT 0
32363: PPUSH
// if not chassis or not engine then
32364: LD_VAR 0 1
32368: NOT
32369: PUSH
32370: LD_VAR 0 2
32374: NOT
32375: OR
32376: IFFALSE 32380
// exit ;
32378: GO 32576
// case engine of engine_solar :
32380: LD_VAR 0 2
32384: PUSH
32385: LD_INT 2
32387: DOUBLE
32388: EQUAL
32389: IFTRUE 32393
32391: GO 32431
32393: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32394: LD_ADDR_VAR 0 3
32398: PUSH
32399: LD_INT 11
32401: PUSH
32402: LD_INT 12
32404: PUSH
32405: LD_INT 13
32407: PUSH
32408: LD_INT 14
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 2
32416: PUSH
32417: LD_INT 3
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: ST_TO_ADDR
32429: GO 32560
32431: LD_INT 1
32433: DOUBLE
32434: EQUAL
32435: IFTRUE 32439
32437: GO 32501
32439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32440: LD_ADDR_VAR 0 3
32444: PUSH
32445: LD_INT 11
32447: PUSH
32448: LD_INT 12
32450: PUSH
32451: LD_INT 13
32453: PUSH
32454: LD_INT 14
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: LD_INT 3
32465: PUSH
32466: LD_INT 4
32468: PUSH
32469: LD_INT 5
32471: PUSH
32472: LD_INT 21
32474: PUSH
32475: LD_INT 23
32477: PUSH
32478: LD_INT 22
32480: PUSH
32481: LD_INT 24
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: ST_TO_ADDR
32499: GO 32560
32501: LD_INT 3
32503: DOUBLE
32504: EQUAL
32505: IFTRUE 32509
32507: GO 32559
32509: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32510: LD_ADDR_VAR 0 3
32514: PUSH
32515: LD_INT 13
32517: PUSH
32518: LD_INT 14
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: LD_INT 4
32529: PUSH
32530: LD_INT 5
32532: PUSH
32533: LD_INT 21
32535: PUSH
32536: LD_INT 22
32538: PUSH
32539: LD_INT 23
32541: PUSH
32542: LD_INT 24
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: ST_TO_ADDR
32557: GO 32560
32559: POP
// result := ( chassis in result ) ;
32560: LD_ADDR_VAR 0 3
32564: PUSH
32565: LD_VAR 0 1
32569: PUSH
32570: LD_VAR 0 3
32574: IN
32575: ST_TO_ADDR
// end ;
32576: LD_VAR 0 3
32580: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32581: LD_INT 0
32583: PPUSH
// if not chassis or not weapon then
32584: LD_VAR 0 1
32588: NOT
32589: PUSH
32590: LD_VAR 0 2
32594: NOT
32595: OR
32596: IFFALSE 32600
// exit ;
32598: GO 33626
// case weapon of us_machine_gun :
32600: LD_VAR 0 2
32604: PUSH
32605: LD_INT 2
32607: DOUBLE
32608: EQUAL
32609: IFTRUE 32613
32611: GO 32643
32613: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32614: LD_ADDR_VAR 0 3
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: LD_INT 3
32627: PUSH
32628: LD_INT 4
32630: PUSH
32631: LD_INT 5
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: ST_TO_ADDR
32641: GO 33610
32643: LD_INT 3
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32681
32651: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32652: LD_ADDR_VAR 0 3
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: LD_INT 2
32662: PUSH
32663: LD_INT 3
32665: PUSH
32666: LD_INT 4
32668: PUSH
32669: LD_INT 5
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: ST_TO_ADDR
32679: GO 33610
32681: LD_INT 11
32683: DOUBLE
32684: EQUAL
32685: IFTRUE 32689
32687: GO 32719
32689: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32690: LD_ADDR_VAR 0 3
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: LD_INT 3
32703: PUSH
32704: LD_INT 4
32706: PUSH
32707: LD_INT 5
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: ST_TO_ADDR
32717: GO 33610
32719: LD_INT 4
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32753
32727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32728: LD_ADDR_VAR 0 3
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: LD_INT 3
32738: PUSH
32739: LD_INT 4
32741: PUSH
32742: LD_INT 5
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: ST_TO_ADDR
32751: GO 33610
32753: LD_INT 5
32755: DOUBLE
32756: EQUAL
32757: IFTRUE 32761
32759: GO 32787
32761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32762: LD_ADDR_VAR 0 3
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: LD_INT 4
32775: PUSH
32776: LD_INT 5
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: ST_TO_ADDR
32785: GO 33610
32787: LD_INT 9
32789: DOUBLE
32790: EQUAL
32791: IFTRUE 32795
32793: GO 32821
32795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32796: LD_ADDR_VAR 0 3
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: LD_INT 3
32806: PUSH
32807: LD_INT 4
32809: PUSH
32810: LD_INT 5
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: ST_TO_ADDR
32819: GO 33610
32821: LD_INT 7
32823: DOUBLE
32824: EQUAL
32825: IFTRUE 32829
32827: GO 32855
32829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32830: LD_ADDR_VAR 0 3
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: LD_INT 4
32843: PUSH
32844: LD_INT 5
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: ST_TO_ADDR
32853: GO 33610
32855: LD_INT 12
32857: DOUBLE
32858: EQUAL
32859: IFTRUE 32863
32861: GO 32889
32863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32864: LD_ADDR_VAR 0 3
32868: PUSH
32869: LD_INT 2
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: LD_INT 4
32877: PUSH
32878: LD_INT 5
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: ST_TO_ADDR
32887: GO 33610
32889: LD_INT 13
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32897
32895: GO 32923
32897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32898: LD_ADDR_VAR 0 3
32902: PUSH
32903: LD_INT 2
32905: PUSH
32906: LD_INT 3
32908: PUSH
32909: LD_INT 4
32911: PUSH
32912: LD_INT 5
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: ST_TO_ADDR
32921: GO 33610
32923: LD_INT 14
32925: DOUBLE
32926: EQUAL
32927: IFTRUE 32931
32929: GO 32949
32931: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32932: LD_ADDR_VAR 0 3
32936: PUSH
32937: LD_INT 4
32939: PUSH
32940: LD_INT 5
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: ST_TO_ADDR
32947: GO 33610
32949: LD_INT 6
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 32975
32957: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32958: LD_ADDR_VAR 0 3
32962: PUSH
32963: LD_INT 4
32965: PUSH
32966: LD_INT 5
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: ST_TO_ADDR
32973: GO 33610
32975: LD_INT 10
32977: DOUBLE
32978: EQUAL
32979: IFTRUE 32983
32981: GO 33001
32983: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32984: LD_ADDR_VAR 0 3
32988: PUSH
32989: LD_INT 4
32991: PUSH
32992: LD_INT 5
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: ST_TO_ADDR
32999: GO 33610
33001: LD_INT 22
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33009
33007: GO 33035
33009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33010: LD_ADDR_VAR 0 3
33014: PUSH
33015: LD_INT 11
33017: PUSH
33018: LD_INT 12
33020: PUSH
33021: LD_INT 13
33023: PUSH
33024: LD_INT 14
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: ST_TO_ADDR
33033: GO 33610
33035: LD_INT 23
33037: DOUBLE
33038: EQUAL
33039: IFTRUE 33043
33041: GO 33069
33043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33044: LD_ADDR_VAR 0 3
33048: PUSH
33049: LD_INT 11
33051: PUSH
33052: LD_INT 12
33054: PUSH
33055: LD_INT 13
33057: PUSH
33058: LD_INT 14
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: ST_TO_ADDR
33067: GO 33610
33069: LD_INT 24
33071: DOUBLE
33072: EQUAL
33073: IFTRUE 33077
33075: GO 33103
33077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33078: LD_ADDR_VAR 0 3
33082: PUSH
33083: LD_INT 11
33085: PUSH
33086: LD_INT 12
33088: PUSH
33089: LD_INT 13
33091: PUSH
33092: LD_INT 14
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: ST_TO_ADDR
33101: GO 33610
33103: LD_INT 30
33105: DOUBLE
33106: EQUAL
33107: IFTRUE 33111
33109: GO 33137
33111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33112: LD_ADDR_VAR 0 3
33116: PUSH
33117: LD_INT 11
33119: PUSH
33120: LD_INT 12
33122: PUSH
33123: LD_INT 13
33125: PUSH
33126: LD_INT 14
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: ST_TO_ADDR
33135: GO 33610
33137: LD_INT 25
33139: DOUBLE
33140: EQUAL
33141: IFTRUE 33145
33143: GO 33163
33145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33146: LD_ADDR_VAR 0 3
33150: PUSH
33151: LD_INT 13
33153: PUSH
33154: LD_INT 14
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: ST_TO_ADDR
33161: GO 33610
33163: LD_INT 27
33165: DOUBLE
33166: EQUAL
33167: IFTRUE 33171
33169: GO 33189
33171: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33172: LD_ADDR_VAR 0 3
33176: PUSH
33177: LD_INT 13
33179: PUSH
33180: LD_INT 14
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: ST_TO_ADDR
33187: GO 33610
33189: LD_INT 28
33191: DOUBLE
33192: EQUAL
33193: IFTRUE 33197
33195: GO 33215
33197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33198: LD_ADDR_VAR 0 3
33202: PUSH
33203: LD_INT 13
33205: PUSH
33206: LD_INT 14
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: ST_TO_ADDR
33213: GO 33610
33215: LD_INT 29
33217: DOUBLE
33218: EQUAL
33219: IFTRUE 33223
33221: GO 33241
33223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_INT 13
33231: PUSH
33232: LD_INT 14
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: ST_TO_ADDR
33239: GO 33610
33241: LD_INT 31
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 33267
33249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33250: LD_ADDR_VAR 0 3
33254: PUSH
33255: LD_INT 13
33257: PUSH
33258: LD_INT 14
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: ST_TO_ADDR
33265: GO 33610
33267: LD_INT 26
33269: DOUBLE
33270: EQUAL
33271: IFTRUE 33275
33273: GO 33293
33275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33276: LD_ADDR_VAR 0 3
33280: PUSH
33281: LD_INT 13
33283: PUSH
33284: LD_INT 14
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: ST_TO_ADDR
33291: GO 33610
33293: LD_INT 42
33295: DOUBLE
33296: EQUAL
33297: IFTRUE 33301
33299: GO 33327
33301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33302: LD_ADDR_VAR 0 3
33306: PUSH
33307: LD_INT 21
33309: PUSH
33310: LD_INT 22
33312: PUSH
33313: LD_INT 23
33315: PUSH
33316: LD_INT 24
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: ST_TO_ADDR
33325: GO 33610
33327: LD_INT 43
33329: DOUBLE
33330: EQUAL
33331: IFTRUE 33335
33333: GO 33361
33335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33336: LD_ADDR_VAR 0 3
33340: PUSH
33341: LD_INT 21
33343: PUSH
33344: LD_INT 22
33346: PUSH
33347: LD_INT 23
33349: PUSH
33350: LD_INT 24
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: ST_TO_ADDR
33359: GO 33610
33361: LD_INT 44
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33369
33367: GO 33395
33369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33370: LD_ADDR_VAR 0 3
33374: PUSH
33375: LD_INT 21
33377: PUSH
33378: LD_INT 22
33380: PUSH
33381: LD_INT 23
33383: PUSH
33384: LD_INT 24
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: ST_TO_ADDR
33393: GO 33610
33395: LD_INT 45
33397: DOUBLE
33398: EQUAL
33399: IFTRUE 33403
33401: GO 33429
33403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33404: LD_ADDR_VAR 0 3
33408: PUSH
33409: LD_INT 21
33411: PUSH
33412: LD_INT 22
33414: PUSH
33415: LD_INT 23
33417: PUSH
33418: LD_INT 24
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: ST_TO_ADDR
33427: GO 33610
33429: LD_INT 49
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33463
33437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33438: LD_ADDR_VAR 0 3
33442: PUSH
33443: LD_INT 21
33445: PUSH
33446: LD_INT 22
33448: PUSH
33449: LD_INT 23
33451: PUSH
33452: LD_INT 24
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: ST_TO_ADDR
33461: GO 33610
33463: LD_INT 51
33465: DOUBLE
33466: EQUAL
33467: IFTRUE 33471
33469: GO 33497
33471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33472: LD_ADDR_VAR 0 3
33476: PUSH
33477: LD_INT 21
33479: PUSH
33480: LD_INT 22
33482: PUSH
33483: LD_INT 23
33485: PUSH
33486: LD_INT 24
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: ST_TO_ADDR
33495: GO 33610
33497: LD_INT 52
33499: DOUBLE
33500: EQUAL
33501: IFTRUE 33505
33503: GO 33531
33505: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33506: LD_ADDR_VAR 0 3
33510: PUSH
33511: LD_INT 21
33513: PUSH
33514: LD_INT 22
33516: PUSH
33517: LD_INT 23
33519: PUSH
33520: LD_INT 24
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
33529: GO 33610
33531: LD_INT 53
33533: DOUBLE
33534: EQUAL
33535: IFTRUE 33539
33537: GO 33557
33539: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33540: LD_ADDR_VAR 0 3
33544: PUSH
33545: LD_INT 23
33547: PUSH
33548: LD_INT 24
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: ST_TO_ADDR
33555: GO 33610
33557: LD_INT 46
33559: DOUBLE
33560: EQUAL
33561: IFTRUE 33565
33563: GO 33583
33565: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33566: LD_ADDR_VAR 0 3
33570: PUSH
33571: LD_INT 23
33573: PUSH
33574: LD_INT 24
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: ST_TO_ADDR
33581: GO 33610
33583: LD_INT 47
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33591
33589: GO 33609
33591: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33592: LD_ADDR_VAR 0 3
33596: PUSH
33597: LD_INT 23
33599: PUSH
33600: LD_INT 24
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: ST_TO_ADDR
33607: GO 33610
33609: POP
// result := ( chassis in result ) ;
33610: LD_ADDR_VAR 0 3
33614: PUSH
33615: LD_VAR 0 1
33619: PUSH
33620: LD_VAR 0 3
33624: IN
33625: ST_TO_ADDR
// end ;
33626: LD_VAR 0 3
33630: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33631: LD_INT 0
33633: PPUSH
33634: PPUSH
33635: PPUSH
33636: PPUSH
33637: PPUSH
33638: PPUSH
33639: PPUSH
// result := array ;
33640: LD_ADDR_VAR 0 5
33644: PUSH
33645: LD_VAR 0 1
33649: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33650: LD_VAR 0 1
33654: NOT
33655: PUSH
33656: LD_VAR 0 2
33660: NOT
33661: OR
33662: PUSH
33663: LD_VAR 0 3
33667: NOT
33668: OR
33669: PUSH
33670: LD_VAR 0 2
33674: PUSH
33675: LD_VAR 0 1
33679: GREATER
33680: OR
33681: PUSH
33682: LD_VAR 0 3
33686: PUSH
33687: LD_VAR 0 1
33691: GREATER
33692: OR
33693: IFFALSE 33697
// exit ;
33695: GO 33993
// if direction then
33697: LD_VAR 0 4
33701: IFFALSE 33765
// begin d := 1 ;
33703: LD_ADDR_VAR 0 9
33707: PUSH
33708: LD_INT 1
33710: ST_TO_ADDR
// if i_from > i_to then
33711: LD_VAR 0 2
33715: PUSH
33716: LD_VAR 0 3
33720: GREATER
33721: IFFALSE 33747
// length := ( array - i_from ) + i_to else
33723: LD_ADDR_VAR 0 11
33727: PUSH
33728: LD_VAR 0 1
33732: PUSH
33733: LD_VAR 0 2
33737: MINUS
33738: PUSH
33739: LD_VAR 0 3
33743: PLUS
33744: ST_TO_ADDR
33745: GO 33763
// length := i_to - i_from ;
33747: LD_ADDR_VAR 0 11
33751: PUSH
33752: LD_VAR 0 3
33756: PUSH
33757: LD_VAR 0 2
33761: MINUS
33762: ST_TO_ADDR
// end else
33763: GO 33826
// begin d := - 1 ;
33765: LD_ADDR_VAR 0 9
33769: PUSH
33770: LD_INT 1
33772: NEG
33773: ST_TO_ADDR
// if i_from > i_to then
33774: LD_VAR 0 2
33778: PUSH
33779: LD_VAR 0 3
33783: GREATER
33784: IFFALSE 33804
// length := i_from - i_to else
33786: LD_ADDR_VAR 0 11
33790: PUSH
33791: LD_VAR 0 2
33795: PUSH
33796: LD_VAR 0 3
33800: MINUS
33801: ST_TO_ADDR
33802: GO 33826
// length := ( array - i_to ) + i_from ;
33804: LD_ADDR_VAR 0 11
33808: PUSH
33809: LD_VAR 0 1
33813: PUSH
33814: LD_VAR 0 3
33818: MINUS
33819: PUSH
33820: LD_VAR 0 2
33824: PLUS
33825: ST_TO_ADDR
// end ; if not length then
33826: LD_VAR 0 11
33830: NOT
33831: IFFALSE 33835
// exit ;
33833: GO 33993
// tmp := array ;
33835: LD_ADDR_VAR 0 10
33839: PUSH
33840: LD_VAR 0 1
33844: ST_TO_ADDR
// for i = 1 to length do
33845: LD_ADDR_VAR 0 6
33849: PUSH
33850: DOUBLE
33851: LD_INT 1
33853: DEC
33854: ST_TO_ADDR
33855: LD_VAR 0 11
33859: PUSH
33860: FOR_TO
33861: IFFALSE 33981
// begin for j = 1 to array do
33863: LD_ADDR_VAR 0 7
33867: PUSH
33868: DOUBLE
33869: LD_INT 1
33871: DEC
33872: ST_TO_ADDR
33873: LD_VAR 0 1
33877: PUSH
33878: FOR_TO
33879: IFFALSE 33967
// begin k := j + d ;
33881: LD_ADDR_VAR 0 8
33885: PUSH
33886: LD_VAR 0 7
33890: PUSH
33891: LD_VAR 0 9
33895: PLUS
33896: ST_TO_ADDR
// if k > array then
33897: LD_VAR 0 8
33901: PUSH
33902: LD_VAR 0 1
33906: GREATER
33907: IFFALSE 33917
// k := 1 ;
33909: LD_ADDR_VAR 0 8
33913: PUSH
33914: LD_INT 1
33916: ST_TO_ADDR
// if not k then
33917: LD_VAR 0 8
33921: NOT
33922: IFFALSE 33934
// k := array ;
33924: LD_ADDR_VAR 0 8
33928: PUSH
33929: LD_VAR 0 1
33933: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33934: LD_ADDR_VAR 0 10
33938: PUSH
33939: LD_VAR 0 10
33943: PPUSH
33944: LD_VAR 0 8
33948: PPUSH
33949: LD_VAR 0 1
33953: PUSH
33954: LD_VAR 0 7
33958: ARRAY
33959: PPUSH
33960: CALL_OW 1
33964: ST_TO_ADDR
// end ;
33965: GO 33878
33967: POP
33968: POP
// array := tmp ;
33969: LD_ADDR_VAR 0 1
33973: PUSH
33974: LD_VAR 0 10
33978: ST_TO_ADDR
// end ;
33979: GO 33860
33981: POP
33982: POP
// result := array ;
33983: LD_ADDR_VAR 0 5
33987: PUSH
33988: LD_VAR 0 1
33992: ST_TO_ADDR
// end ;
33993: LD_VAR 0 5
33997: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33998: LD_INT 0
34000: PPUSH
34001: PPUSH
// result := 0 ;
34002: LD_ADDR_VAR 0 3
34006: PUSH
34007: LD_INT 0
34009: ST_TO_ADDR
// if not array or not value in array then
34010: LD_VAR 0 1
34014: NOT
34015: PUSH
34016: LD_VAR 0 2
34020: PUSH
34021: LD_VAR 0 1
34025: IN
34026: NOT
34027: OR
34028: IFFALSE 34032
// exit ;
34030: GO 34086
// for i = 1 to array do
34032: LD_ADDR_VAR 0 4
34036: PUSH
34037: DOUBLE
34038: LD_INT 1
34040: DEC
34041: ST_TO_ADDR
34042: LD_VAR 0 1
34046: PUSH
34047: FOR_TO
34048: IFFALSE 34084
// if value = array [ i ] then
34050: LD_VAR 0 2
34054: PUSH
34055: LD_VAR 0 1
34059: PUSH
34060: LD_VAR 0 4
34064: ARRAY
34065: EQUAL
34066: IFFALSE 34082
// begin result := i ;
34068: LD_ADDR_VAR 0 3
34072: PUSH
34073: LD_VAR 0 4
34077: ST_TO_ADDR
// exit ;
34078: POP
34079: POP
34080: GO 34086
// end ;
34082: GO 34047
34084: POP
34085: POP
// end ;
34086: LD_VAR 0 3
34090: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34091: LD_INT 0
34093: PPUSH
// vc_chassis := chassis ;
34094: LD_ADDR_OWVAR 37
34098: PUSH
34099: LD_VAR 0 1
34103: ST_TO_ADDR
// vc_engine := engine ;
34104: LD_ADDR_OWVAR 39
34108: PUSH
34109: LD_VAR 0 2
34113: ST_TO_ADDR
// vc_control := control ;
34114: LD_ADDR_OWVAR 38
34118: PUSH
34119: LD_VAR 0 3
34123: ST_TO_ADDR
// vc_weapon := weapon ;
34124: LD_ADDR_OWVAR 40
34128: PUSH
34129: LD_VAR 0 4
34133: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34134: LD_ADDR_OWVAR 41
34138: PUSH
34139: LD_VAR 0 5
34143: ST_TO_ADDR
// end ;
34144: LD_VAR 0 6
34148: RET
// export function WantPlant ( unit ) ; var task ; begin
34149: LD_INT 0
34151: PPUSH
34152: PPUSH
// result := false ;
34153: LD_ADDR_VAR 0 2
34157: PUSH
34158: LD_INT 0
34160: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34161: LD_ADDR_VAR 0 3
34165: PUSH
34166: LD_VAR 0 1
34170: PPUSH
34171: CALL_OW 437
34175: ST_TO_ADDR
// if task then
34176: LD_VAR 0 3
34180: IFFALSE 34208
// if task [ 1 ] [ 1 ] = p then
34182: LD_VAR 0 3
34186: PUSH
34187: LD_INT 1
34189: ARRAY
34190: PUSH
34191: LD_INT 1
34193: ARRAY
34194: PUSH
34195: LD_STRING p
34197: EQUAL
34198: IFFALSE 34208
// result := true ;
34200: LD_ADDR_VAR 0 2
34204: PUSH
34205: LD_INT 1
34207: ST_TO_ADDR
// end ;
34208: LD_VAR 0 2
34212: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34213: LD_INT 0
34215: PPUSH
34216: PPUSH
34217: PPUSH
34218: PPUSH
// if pos < 1 then
34219: LD_VAR 0 2
34223: PUSH
34224: LD_INT 1
34226: LESS
34227: IFFALSE 34231
// exit ;
34229: GO 34534
// if pos = 1 then
34231: LD_VAR 0 2
34235: PUSH
34236: LD_INT 1
34238: EQUAL
34239: IFFALSE 34272
// result := Replace ( arr , pos [ 1 ] , value ) else
34241: LD_ADDR_VAR 0 4
34245: PUSH
34246: LD_VAR 0 1
34250: PPUSH
34251: LD_VAR 0 2
34255: PUSH
34256: LD_INT 1
34258: ARRAY
34259: PPUSH
34260: LD_VAR 0 3
34264: PPUSH
34265: CALL_OW 1
34269: ST_TO_ADDR
34270: GO 34534
// begin tmp := arr ;
34272: LD_ADDR_VAR 0 6
34276: PUSH
34277: LD_VAR 0 1
34281: ST_TO_ADDR
// s_arr := [ tmp ] ;
34282: LD_ADDR_VAR 0 7
34286: PUSH
34287: LD_VAR 0 6
34291: PUSH
34292: EMPTY
34293: LIST
34294: ST_TO_ADDR
// for i = 1 to pos - 1 do
34295: LD_ADDR_VAR 0 5
34299: PUSH
34300: DOUBLE
34301: LD_INT 1
34303: DEC
34304: ST_TO_ADDR
34305: LD_VAR 0 2
34309: PUSH
34310: LD_INT 1
34312: MINUS
34313: PUSH
34314: FOR_TO
34315: IFFALSE 34360
// begin tmp := tmp [ pos [ i ] ] ;
34317: LD_ADDR_VAR 0 6
34321: PUSH
34322: LD_VAR 0 6
34326: PUSH
34327: LD_VAR 0 2
34331: PUSH
34332: LD_VAR 0 5
34336: ARRAY
34337: ARRAY
34338: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34339: LD_ADDR_VAR 0 7
34343: PUSH
34344: LD_VAR 0 7
34348: PUSH
34349: LD_VAR 0 6
34353: PUSH
34354: EMPTY
34355: LIST
34356: ADD
34357: ST_TO_ADDR
// end ;
34358: GO 34314
34360: POP
34361: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34362: LD_ADDR_VAR 0 6
34366: PUSH
34367: LD_VAR 0 6
34371: PPUSH
34372: LD_VAR 0 2
34376: PUSH
34377: LD_VAR 0 2
34381: ARRAY
34382: PPUSH
34383: LD_VAR 0 3
34387: PPUSH
34388: CALL_OW 1
34392: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34393: LD_ADDR_VAR 0 7
34397: PUSH
34398: LD_VAR 0 7
34402: PPUSH
34403: LD_VAR 0 7
34407: PPUSH
34408: LD_VAR 0 6
34412: PPUSH
34413: CALL_OW 1
34417: ST_TO_ADDR
// for i = s_arr downto 2 do
34418: LD_ADDR_VAR 0 5
34422: PUSH
34423: DOUBLE
34424: LD_VAR 0 7
34428: INC
34429: ST_TO_ADDR
34430: LD_INT 2
34432: PUSH
34433: FOR_DOWNTO
34434: IFFALSE 34518
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34436: LD_ADDR_VAR 0 6
34440: PUSH
34441: LD_VAR 0 7
34445: PUSH
34446: LD_VAR 0 5
34450: PUSH
34451: LD_INT 1
34453: MINUS
34454: ARRAY
34455: PPUSH
34456: LD_VAR 0 2
34460: PUSH
34461: LD_VAR 0 5
34465: PUSH
34466: LD_INT 1
34468: MINUS
34469: ARRAY
34470: PPUSH
34471: LD_VAR 0 7
34475: PUSH
34476: LD_VAR 0 5
34480: ARRAY
34481: PPUSH
34482: CALL_OW 1
34486: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34487: LD_ADDR_VAR 0 7
34491: PUSH
34492: LD_VAR 0 7
34496: PPUSH
34497: LD_VAR 0 5
34501: PUSH
34502: LD_INT 1
34504: MINUS
34505: PPUSH
34506: LD_VAR 0 6
34510: PPUSH
34511: CALL_OW 1
34515: ST_TO_ADDR
// end ;
34516: GO 34433
34518: POP
34519: POP
// result := s_arr [ 1 ] ;
34520: LD_ADDR_VAR 0 4
34524: PUSH
34525: LD_VAR 0 7
34529: PUSH
34530: LD_INT 1
34532: ARRAY
34533: ST_TO_ADDR
// end ; end ;
34534: LD_VAR 0 4
34538: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34539: LD_INT 0
34541: PPUSH
34542: PPUSH
// if not list then
34543: LD_VAR 0 1
34547: NOT
34548: IFFALSE 34552
// exit ;
34550: GO 34643
// i := list [ pos1 ] ;
34552: LD_ADDR_VAR 0 5
34556: PUSH
34557: LD_VAR 0 1
34561: PUSH
34562: LD_VAR 0 2
34566: ARRAY
34567: ST_TO_ADDR
// if not i then
34568: LD_VAR 0 5
34572: NOT
34573: IFFALSE 34577
// exit ;
34575: GO 34643
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34577: LD_ADDR_VAR 0 1
34581: PUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: LD_VAR 0 2
34591: PPUSH
34592: LD_VAR 0 1
34596: PUSH
34597: LD_VAR 0 3
34601: ARRAY
34602: PPUSH
34603: CALL_OW 1
34607: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34608: LD_ADDR_VAR 0 1
34612: PUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: LD_VAR 0 3
34622: PPUSH
34623: LD_VAR 0 5
34627: PPUSH
34628: CALL_OW 1
34632: ST_TO_ADDR
// result := list ;
34633: LD_ADDR_VAR 0 4
34637: PUSH
34638: LD_VAR 0 1
34642: ST_TO_ADDR
// end ;
34643: LD_VAR 0 4
34647: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34648: LD_INT 0
34650: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34651: LD_ADDR_VAR 0 5
34655: PUSH
34656: LD_VAR 0 1
34660: PPUSH
34661: CALL_OW 250
34665: PPUSH
34666: LD_VAR 0 1
34670: PPUSH
34671: CALL_OW 251
34675: PPUSH
34676: LD_VAR 0 2
34680: PPUSH
34681: LD_VAR 0 3
34685: PPUSH
34686: LD_VAR 0 4
34690: PPUSH
34691: CALL 34701 0 5
34695: ST_TO_ADDR
// end ;
34696: LD_VAR 0 5
34700: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34701: LD_INT 0
34703: PPUSH
34704: PPUSH
34705: PPUSH
34706: PPUSH
// if not list then
34707: LD_VAR 0 3
34711: NOT
34712: IFFALSE 34716
// exit ;
34714: GO 35104
// result := [ ] ;
34716: LD_ADDR_VAR 0 6
34720: PUSH
34721: EMPTY
34722: ST_TO_ADDR
// for i in list do
34723: LD_ADDR_VAR 0 7
34727: PUSH
34728: LD_VAR 0 3
34732: PUSH
34733: FOR_IN
34734: IFFALSE 34936
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34736: LD_ADDR_VAR 0 9
34740: PUSH
34741: LD_VAR 0 7
34745: PPUSH
34746: LD_VAR 0 1
34750: PPUSH
34751: LD_VAR 0 2
34755: PPUSH
34756: CALL_OW 297
34760: ST_TO_ADDR
// if not result then
34761: LD_VAR 0 6
34765: NOT
34766: IFFALSE 34792
// result := [ [ i , tmp ] ] else
34768: LD_ADDR_VAR 0 6
34772: PUSH
34773: LD_VAR 0 7
34777: PUSH
34778: LD_VAR 0 9
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: EMPTY
34788: LIST
34789: ST_TO_ADDR
34790: GO 34934
// begin if result [ result ] [ 2 ] < tmp then
34792: LD_VAR 0 6
34796: PUSH
34797: LD_VAR 0 6
34801: ARRAY
34802: PUSH
34803: LD_INT 2
34805: ARRAY
34806: PUSH
34807: LD_VAR 0 9
34811: LESS
34812: IFFALSE 34854
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34814: LD_ADDR_VAR 0 6
34818: PUSH
34819: LD_VAR 0 6
34823: PPUSH
34824: LD_VAR 0 6
34828: PUSH
34829: LD_INT 1
34831: PLUS
34832: PPUSH
34833: LD_VAR 0 7
34837: PUSH
34838: LD_VAR 0 9
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PPUSH
34847: CALL_OW 2
34851: ST_TO_ADDR
34852: GO 34934
// for j = 1 to result do
34854: LD_ADDR_VAR 0 8
34858: PUSH
34859: DOUBLE
34860: LD_INT 1
34862: DEC
34863: ST_TO_ADDR
34864: LD_VAR 0 6
34868: PUSH
34869: FOR_TO
34870: IFFALSE 34932
// begin if tmp < result [ j ] [ 2 ] then
34872: LD_VAR 0 9
34876: PUSH
34877: LD_VAR 0 6
34881: PUSH
34882: LD_VAR 0 8
34886: ARRAY
34887: PUSH
34888: LD_INT 2
34890: ARRAY
34891: LESS
34892: IFFALSE 34930
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34894: LD_ADDR_VAR 0 6
34898: PUSH
34899: LD_VAR 0 6
34903: PPUSH
34904: LD_VAR 0 8
34908: PPUSH
34909: LD_VAR 0 7
34913: PUSH
34914: LD_VAR 0 9
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PPUSH
34923: CALL_OW 2
34927: ST_TO_ADDR
// break ;
34928: GO 34932
// end ; end ;
34930: GO 34869
34932: POP
34933: POP
// end ; end ;
34934: GO 34733
34936: POP
34937: POP
// if result and not asc then
34938: LD_VAR 0 6
34942: PUSH
34943: LD_VAR 0 4
34947: NOT
34948: AND
34949: IFFALSE 35024
// begin tmp := result ;
34951: LD_ADDR_VAR 0 9
34955: PUSH
34956: LD_VAR 0 6
34960: ST_TO_ADDR
// for i = tmp downto 1 do
34961: LD_ADDR_VAR 0 7
34965: PUSH
34966: DOUBLE
34967: LD_VAR 0 9
34971: INC
34972: ST_TO_ADDR
34973: LD_INT 1
34975: PUSH
34976: FOR_DOWNTO
34977: IFFALSE 35022
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34979: LD_ADDR_VAR 0 6
34983: PUSH
34984: LD_VAR 0 6
34988: PPUSH
34989: LD_VAR 0 9
34993: PUSH
34994: LD_VAR 0 7
34998: MINUS
34999: PUSH
35000: LD_INT 1
35002: PLUS
35003: PPUSH
35004: LD_VAR 0 9
35008: PUSH
35009: LD_VAR 0 7
35013: ARRAY
35014: PPUSH
35015: CALL_OW 1
35019: ST_TO_ADDR
35020: GO 34976
35022: POP
35023: POP
// end ; tmp := [ ] ;
35024: LD_ADDR_VAR 0 9
35028: PUSH
35029: EMPTY
35030: ST_TO_ADDR
// if mode then
35031: LD_VAR 0 5
35035: IFFALSE 35104
// begin for i = 1 to result do
35037: LD_ADDR_VAR 0 7
35041: PUSH
35042: DOUBLE
35043: LD_INT 1
35045: DEC
35046: ST_TO_ADDR
35047: LD_VAR 0 6
35051: PUSH
35052: FOR_TO
35053: IFFALSE 35092
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35055: LD_ADDR_VAR 0 9
35059: PUSH
35060: LD_VAR 0 9
35064: PPUSH
35065: LD_VAR 0 7
35069: PPUSH
35070: LD_VAR 0 6
35074: PUSH
35075: LD_VAR 0 7
35079: ARRAY
35080: PUSH
35081: LD_INT 1
35083: ARRAY
35084: PPUSH
35085: CALL_OW 1
35089: ST_TO_ADDR
35090: GO 35052
35092: POP
35093: POP
// result := tmp ;
35094: LD_ADDR_VAR 0 6
35098: PUSH
35099: LD_VAR 0 9
35103: ST_TO_ADDR
// end ; end ;
35104: LD_VAR 0 6
35108: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35109: LD_INT 0
35111: PPUSH
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
35116: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35117: LD_ADDR_VAR 0 5
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: EMPTY
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: ST_TO_ADDR
// if not x or not y then
35139: LD_VAR 0 2
35143: NOT
35144: PUSH
35145: LD_VAR 0 3
35149: NOT
35150: OR
35151: IFFALSE 35155
// exit ;
35153: GO 36801
// if not range then
35155: LD_VAR 0 4
35159: NOT
35160: IFFALSE 35170
// range := 10 ;
35162: LD_ADDR_VAR 0 4
35166: PUSH
35167: LD_INT 10
35169: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35170: LD_ADDR_VAR 0 8
35174: PUSH
35175: LD_INT 81
35177: PUSH
35178: LD_VAR 0 1
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 92
35189: PUSH
35190: LD_VAR 0 2
35194: PUSH
35195: LD_VAR 0 3
35199: PUSH
35200: LD_VAR 0 4
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 3
35213: PUSH
35214: LD_INT 21
35216: PUSH
35217: LD_INT 3
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: PPUSH
35233: CALL_OW 69
35237: ST_TO_ADDR
// if not tmp then
35238: LD_VAR 0 8
35242: NOT
35243: IFFALSE 35247
// exit ;
35245: GO 36801
// for i in tmp do
35247: LD_ADDR_VAR 0 6
35251: PUSH
35252: LD_VAR 0 8
35256: PUSH
35257: FOR_IN
35258: IFFALSE 36776
// begin points := [ 0 , 0 , 0 ] ;
35260: LD_ADDR_VAR 0 9
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: ST_TO_ADDR
// bpoints := 1 ;
35279: LD_ADDR_VAR 0 10
35283: PUSH
35284: LD_INT 1
35286: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35287: LD_VAR 0 6
35291: PPUSH
35292: CALL_OW 247
35296: PUSH
35297: LD_INT 1
35299: DOUBLE
35300: EQUAL
35301: IFTRUE 35305
35303: GO 35883
35305: POP
// begin if GetClass ( i ) = 1 then
35306: LD_VAR 0 6
35310: PPUSH
35311: CALL_OW 257
35315: PUSH
35316: LD_INT 1
35318: EQUAL
35319: IFFALSE 35340
// points := [ 10 , 5 , 3 ] ;
35321: LD_ADDR_VAR 0 9
35325: PUSH
35326: LD_INT 10
35328: PUSH
35329: LD_INT 5
35331: PUSH
35332: LD_INT 3
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: LIST
35339: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35340: LD_VAR 0 6
35344: PPUSH
35345: CALL_OW 257
35349: PUSH
35350: LD_INT 2
35352: PUSH
35353: LD_INT 3
35355: PUSH
35356: LD_INT 4
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: IN
35364: IFFALSE 35385
// points := [ 3 , 2 , 1 ] ;
35366: LD_ADDR_VAR 0 9
35370: PUSH
35371: LD_INT 3
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35385: LD_VAR 0 6
35389: PPUSH
35390: CALL_OW 257
35394: PUSH
35395: LD_INT 5
35397: EQUAL
35398: IFFALSE 35419
// points := [ 130 , 5 , 2 ] ;
35400: LD_ADDR_VAR 0 9
35404: PUSH
35405: LD_INT 130
35407: PUSH
35408: LD_INT 5
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: LIST
35418: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35419: LD_VAR 0 6
35423: PPUSH
35424: CALL_OW 257
35428: PUSH
35429: LD_INT 8
35431: EQUAL
35432: IFFALSE 35453
// points := [ 35 , 35 , 30 ] ;
35434: LD_ADDR_VAR 0 9
35438: PUSH
35439: LD_INT 35
35441: PUSH
35442: LD_INT 35
35444: PUSH
35445: LD_INT 30
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: LIST
35452: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35453: LD_VAR 0 6
35457: PPUSH
35458: CALL_OW 257
35462: PUSH
35463: LD_INT 9
35465: EQUAL
35466: IFFALSE 35487
// points := [ 20 , 55 , 40 ] ;
35468: LD_ADDR_VAR 0 9
35472: PUSH
35473: LD_INT 20
35475: PUSH
35476: LD_INT 55
35478: PUSH
35479: LD_INT 40
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35487: LD_VAR 0 6
35491: PPUSH
35492: CALL_OW 257
35496: PUSH
35497: LD_INT 12
35499: PUSH
35500: LD_INT 16
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: IN
35507: IFFALSE 35528
// points := [ 5 , 3 , 2 ] ;
35509: LD_ADDR_VAR 0 9
35513: PUSH
35514: LD_INT 5
35516: PUSH
35517: LD_INT 3
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35528: LD_VAR 0 6
35532: PPUSH
35533: CALL_OW 257
35537: PUSH
35538: LD_INT 17
35540: EQUAL
35541: IFFALSE 35562
// points := [ 100 , 50 , 75 ] ;
35543: LD_ADDR_VAR 0 9
35547: PUSH
35548: LD_INT 100
35550: PUSH
35551: LD_INT 50
35553: PUSH
35554: LD_INT 75
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: LIST
35561: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35562: LD_VAR 0 6
35566: PPUSH
35567: CALL_OW 257
35571: PUSH
35572: LD_INT 15
35574: EQUAL
35575: IFFALSE 35596
// points := [ 10 , 5 , 3 ] ;
35577: LD_ADDR_VAR 0 9
35581: PUSH
35582: LD_INT 10
35584: PUSH
35585: LD_INT 5
35587: PUSH
35588: LD_INT 3
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35596: LD_VAR 0 6
35600: PPUSH
35601: CALL_OW 257
35605: PUSH
35606: LD_INT 14
35608: EQUAL
35609: IFFALSE 35630
// points := [ 10 , 0 , 0 ] ;
35611: LD_ADDR_VAR 0 9
35615: PUSH
35616: LD_INT 10
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35630: LD_VAR 0 6
35634: PPUSH
35635: CALL_OW 257
35639: PUSH
35640: LD_INT 11
35642: EQUAL
35643: IFFALSE 35664
// points := [ 30 , 10 , 5 ] ;
35645: LD_ADDR_VAR 0 9
35649: PUSH
35650: LD_INT 30
35652: PUSH
35653: LD_INT 10
35655: PUSH
35656: LD_INT 5
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: LIST
35663: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35664: LD_VAR 0 1
35668: PPUSH
35669: LD_INT 5
35671: PPUSH
35672: CALL_OW 321
35676: PUSH
35677: LD_INT 2
35679: EQUAL
35680: IFFALSE 35697
// bpoints := bpoints * 1.8 ;
35682: LD_ADDR_VAR 0 10
35686: PUSH
35687: LD_VAR 0 10
35691: PUSH
35692: LD_REAL  1.80000000000000E+0000
35695: MUL
35696: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35697: LD_VAR 0 6
35701: PPUSH
35702: CALL_OW 257
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: LD_INT 3
35715: PUSH
35716: LD_INT 4
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: IN
35725: PUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: LD_INT 51
35733: PPUSH
35734: CALL_OW 321
35738: PUSH
35739: LD_INT 2
35741: EQUAL
35742: AND
35743: IFFALSE 35760
// bpoints := bpoints * 1.2 ;
35745: LD_ADDR_VAR 0 10
35749: PUSH
35750: LD_VAR 0 10
35754: PUSH
35755: LD_REAL  1.20000000000000E+0000
35758: MUL
35759: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35760: LD_VAR 0 6
35764: PPUSH
35765: CALL_OW 257
35769: PUSH
35770: LD_INT 5
35772: PUSH
35773: LD_INT 7
35775: PUSH
35776: LD_INT 9
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: IN
35784: PUSH
35785: LD_VAR 0 1
35789: PPUSH
35790: LD_INT 52
35792: PPUSH
35793: CALL_OW 321
35797: PUSH
35798: LD_INT 2
35800: EQUAL
35801: AND
35802: IFFALSE 35819
// bpoints := bpoints * 1.5 ;
35804: LD_ADDR_VAR 0 10
35808: PUSH
35809: LD_VAR 0 10
35813: PUSH
35814: LD_REAL  1.50000000000000E+0000
35817: MUL
35818: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35819: LD_VAR 0 1
35823: PPUSH
35824: LD_INT 66
35826: PPUSH
35827: CALL_OW 321
35831: PUSH
35832: LD_INT 2
35834: EQUAL
35835: IFFALSE 35852
// bpoints := bpoints * 1.1 ;
35837: LD_ADDR_VAR 0 10
35841: PUSH
35842: LD_VAR 0 10
35846: PUSH
35847: LD_REAL  1.10000000000000E+0000
35850: MUL
35851: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35852: LD_ADDR_VAR 0 10
35856: PUSH
35857: LD_VAR 0 10
35861: PUSH
35862: LD_VAR 0 6
35866: PPUSH
35867: LD_INT 1
35869: PPUSH
35870: CALL_OW 259
35874: PUSH
35875: LD_REAL  1.15000000000000E+0000
35878: MUL
35879: MUL
35880: ST_TO_ADDR
// end ; unit_vehicle :
35881: GO 36705
35883: LD_INT 2
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35891
35889: GO 36693
35891: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35892: LD_VAR 0 6
35896: PPUSH
35897: CALL_OW 264
35901: PUSH
35902: LD_INT 2
35904: PUSH
35905: LD_INT 42
35907: PUSH
35908: LD_INT 24
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: IN
35916: IFFALSE 35937
// points := [ 25 , 5 , 3 ] ;
35918: LD_ADDR_VAR 0 9
35922: PUSH
35923: LD_INT 25
35925: PUSH
35926: LD_INT 5
35928: PUSH
35929: LD_INT 3
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: LIST
35936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35937: LD_VAR 0 6
35941: PPUSH
35942: CALL_OW 264
35946: PUSH
35947: LD_INT 4
35949: PUSH
35950: LD_INT 43
35952: PUSH
35953: LD_INT 25
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: IN
35961: IFFALSE 35982
// points := [ 40 , 15 , 5 ] ;
35963: LD_ADDR_VAR 0 9
35967: PUSH
35968: LD_INT 40
35970: PUSH
35971: LD_INT 15
35973: PUSH
35974: LD_INT 5
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35982: LD_VAR 0 6
35986: PPUSH
35987: CALL_OW 264
35991: PUSH
35992: LD_INT 3
35994: PUSH
35995: LD_INT 23
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: IN
36002: IFFALSE 36023
// points := [ 7 , 25 , 8 ] ;
36004: LD_ADDR_VAR 0 9
36008: PUSH
36009: LD_INT 7
36011: PUSH
36012: LD_INT 25
36014: PUSH
36015: LD_INT 8
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36023: LD_VAR 0 6
36027: PPUSH
36028: CALL_OW 264
36032: PUSH
36033: LD_INT 5
36035: PUSH
36036: LD_INT 27
36038: PUSH
36039: LD_INT 44
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: IN
36047: IFFALSE 36068
// points := [ 14 , 50 , 16 ] ;
36049: LD_ADDR_VAR 0 9
36053: PUSH
36054: LD_INT 14
36056: PUSH
36057: LD_INT 50
36059: PUSH
36060: LD_INT 16
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36068: LD_VAR 0 6
36072: PPUSH
36073: CALL_OW 264
36077: PUSH
36078: LD_INT 6
36080: PUSH
36081: LD_INT 46
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: IN
36088: IFFALSE 36109
// points := [ 32 , 120 , 70 ] ;
36090: LD_ADDR_VAR 0 9
36094: PUSH
36095: LD_INT 32
36097: PUSH
36098: LD_INT 120
36100: PUSH
36101: LD_INT 70
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: LIST
36108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36109: LD_VAR 0 6
36113: PPUSH
36114: CALL_OW 264
36118: PUSH
36119: LD_INT 7
36121: PUSH
36122: LD_INT 28
36124: PUSH
36125: LD_INT 45
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: IN
36133: IFFALSE 36154
// points := [ 35 , 20 , 45 ] ;
36135: LD_ADDR_VAR 0 9
36139: PUSH
36140: LD_INT 35
36142: PUSH
36143: LD_INT 20
36145: PUSH
36146: LD_INT 45
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36154: LD_VAR 0 6
36158: PPUSH
36159: CALL_OW 264
36163: PUSH
36164: LD_INT 47
36166: PUSH
36167: EMPTY
36168: LIST
36169: IN
36170: IFFALSE 36191
// points := [ 67 , 45 , 75 ] ;
36172: LD_ADDR_VAR 0 9
36176: PUSH
36177: LD_INT 67
36179: PUSH
36180: LD_INT 45
36182: PUSH
36183: LD_INT 75
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36191: LD_VAR 0 6
36195: PPUSH
36196: CALL_OW 264
36200: PUSH
36201: LD_INT 26
36203: PUSH
36204: EMPTY
36205: LIST
36206: IN
36207: IFFALSE 36228
// points := [ 120 , 30 , 80 ] ;
36209: LD_ADDR_VAR 0 9
36213: PUSH
36214: LD_INT 120
36216: PUSH
36217: LD_INT 30
36219: PUSH
36220: LD_INT 80
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36228: LD_VAR 0 6
36232: PPUSH
36233: CALL_OW 264
36237: PUSH
36238: LD_INT 22
36240: PUSH
36241: EMPTY
36242: LIST
36243: IN
36244: IFFALSE 36265
// points := [ 40 , 1 , 1 ] ;
36246: LD_ADDR_VAR 0 9
36250: PUSH
36251: LD_INT 40
36253: PUSH
36254: LD_INT 1
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36265: LD_VAR 0 6
36269: PPUSH
36270: CALL_OW 264
36274: PUSH
36275: LD_INT 29
36277: PUSH
36278: EMPTY
36279: LIST
36280: IN
36281: IFFALSE 36302
// points := [ 70 , 200 , 400 ] ;
36283: LD_ADDR_VAR 0 9
36287: PUSH
36288: LD_INT 70
36290: PUSH
36291: LD_INT 200
36293: PUSH
36294: LD_INT 400
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36302: LD_VAR 0 6
36306: PPUSH
36307: CALL_OW 264
36311: PUSH
36312: LD_INT 14
36314: PUSH
36315: LD_INT 53
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: IN
36322: IFFALSE 36343
// points := [ 40 , 10 , 20 ] ;
36324: LD_ADDR_VAR 0 9
36328: PUSH
36329: LD_INT 40
36331: PUSH
36332: LD_INT 10
36334: PUSH
36335: LD_INT 20
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: LIST
36342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36343: LD_VAR 0 6
36347: PPUSH
36348: CALL_OW 264
36352: PUSH
36353: LD_INT 9
36355: PUSH
36356: EMPTY
36357: LIST
36358: IN
36359: IFFALSE 36380
// points := [ 5 , 70 , 20 ] ;
36361: LD_ADDR_VAR 0 9
36365: PUSH
36366: LD_INT 5
36368: PUSH
36369: LD_INT 70
36371: PUSH
36372: LD_INT 20
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36380: LD_VAR 0 6
36384: PPUSH
36385: CALL_OW 264
36389: PUSH
36390: LD_INT 10
36392: PUSH
36393: EMPTY
36394: LIST
36395: IN
36396: IFFALSE 36417
// points := [ 35 , 110 , 70 ] ;
36398: LD_ADDR_VAR 0 9
36402: PUSH
36403: LD_INT 35
36405: PUSH
36406: LD_INT 110
36408: PUSH
36409: LD_INT 70
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: LIST
36416: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36417: LD_VAR 0 6
36421: PPUSH
36422: CALL_OW 265
36426: PUSH
36427: LD_INT 25
36429: EQUAL
36430: IFFALSE 36451
// points := [ 80 , 65 , 100 ] ;
36432: LD_ADDR_VAR 0 9
36436: PUSH
36437: LD_INT 80
36439: PUSH
36440: LD_INT 65
36442: PUSH
36443: LD_INT 100
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: LIST
36450: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36451: LD_VAR 0 6
36455: PPUSH
36456: CALL_OW 263
36460: PUSH
36461: LD_INT 1
36463: EQUAL
36464: IFFALSE 36499
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36466: LD_ADDR_VAR 0 10
36470: PUSH
36471: LD_VAR 0 10
36475: PUSH
36476: LD_VAR 0 6
36480: PPUSH
36481: CALL_OW 311
36485: PPUSH
36486: LD_INT 3
36488: PPUSH
36489: CALL_OW 259
36493: PUSH
36494: LD_INT 4
36496: MUL
36497: MUL
36498: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36499: LD_VAR 0 6
36503: PPUSH
36504: CALL_OW 263
36508: PUSH
36509: LD_INT 2
36511: EQUAL
36512: IFFALSE 36563
// begin j := IsControledBy ( i ) ;
36514: LD_ADDR_VAR 0 7
36518: PUSH
36519: LD_VAR 0 6
36523: PPUSH
36524: CALL_OW 312
36528: ST_TO_ADDR
// if j then
36529: LD_VAR 0 7
36533: IFFALSE 36563
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36535: LD_ADDR_VAR 0 10
36539: PUSH
36540: LD_VAR 0 10
36544: PUSH
36545: LD_VAR 0 7
36549: PPUSH
36550: LD_INT 3
36552: PPUSH
36553: CALL_OW 259
36557: PUSH
36558: LD_INT 3
36560: MUL
36561: MUL
36562: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36563: LD_VAR 0 6
36567: PPUSH
36568: CALL_OW 264
36572: PUSH
36573: LD_INT 5
36575: PUSH
36576: LD_INT 6
36578: PUSH
36579: LD_INT 46
36581: PUSH
36582: LD_INT 44
36584: PUSH
36585: LD_INT 47
36587: PUSH
36588: LD_INT 45
36590: PUSH
36591: LD_INT 28
36593: PUSH
36594: LD_INT 7
36596: PUSH
36597: LD_INT 27
36599: PUSH
36600: LD_INT 29
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: IN
36615: PUSH
36616: LD_VAR 0 1
36620: PPUSH
36621: LD_INT 52
36623: PPUSH
36624: CALL_OW 321
36628: PUSH
36629: LD_INT 2
36631: EQUAL
36632: AND
36633: IFFALSE 36650
// bpoints := bpoints * 1.2 ;
36635: LD_ADDR_VAR 0 10
36639: PUSH
36640: LD_VAR 0 10
36644: PUSH
36645: LD_REAL  1.20000000000000E+0000
36648: MUL
36649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36650: LD_VAR 0 6
36654: PPUSH
36655: CALL_OW 264
36659: PUSH
36660: LD_INT 6
36662: PUSH
36663: LD_INT 46
36665: PUSH
36666: LD_INT 47
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: IN
36674: IFFALSE 36691
// bpoints := bpoints * 1.2 ;
36676: LD_ADDR_VAR 0 10
36680: PUSH
36681: LD_VAR 0 10
36685: PUSH
36686: LD_REAL  1.20000000000000E+0000
36689: MUL
36690: ST_TO_ADDR
// end ; unit_building :
36691: GO 36705
36693: LD_INT 3
36695: DOUBLE
36696: EQUAL
36697: IFTRUE 36701
36699: GO 36704
36701: POP
// ; end ;
36702: GO 36705
36704: POP
// for j = 1 to 3 do
36705: LD_ADDR_VAR 0 7
36709: PUSH
36710: DOUBLE
36711: LD_INT 1
36713: DEC
36714: ST_TO_ADDR
36715: LD_INT 3
36717: PUSH
36718: FOR_TO
36719: IFFALSE 36772
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36721: LD_ADDR_VAR 0 5
36725: PUSH
36726: LD_VAR 0 5
36730: PPUSH
36731: LD_VAR 0 7
36735: PPUSH
36736: LD_VAR 0 5
36740: PUSH
36741: LD_VAR 0 7
36745: ARRAY
36746: PUSH
36747: LD_VAR 0 9
36751: PUSH
36752: LD_VAR 0 7
36756: ARRAY
36757: PUSH
36758: LD_VAR 0 10
36762: MUL
36763: PLUS
36764: PPUSH
36765: CALL_OW 1
36769: ST_TO_ADDR
36770: GO 36718
36772: POP
36773: POP
// end ;
36774: GO 35257
36776: POP
36777: POP
// result := Replace ( result , 4 , tmp ) ;
36778: LD_ADDR_VAR 0 5
36782: PUSH
36783: LD_VAR 0 5
36787: PPUSH
36788: LD_INT 4
36790: PPUSH
36791: LD_VAR 0 8
36795: PPUSH
36796: CALL_OW 1
36800: ST_TO_ADDR
// end ;
36801: LD_VAR 0 5
36805: RET
// export function DangerAtRange ( unit , range ) ; begin
36806: LD_INT 0
36808: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36809: LD_ADDR_VAR 0 3
36813: PUSH
36814: LD_VAR 0 1
36818: PPUSH
36819: CALL_OW 255
36823: PPUSH
36824: LD_VAR 0 1
36828: PPUSH
36829: CALL_OW 250
36833: PPUSH
36834: LD_VAR 0 1
36838: PPUSH
36839: CALL_OW 251
36843: PPUSH
36844: LD_VAR 0 2
36848: PPUSH
36849: CALL 35109 0 4
36853: ST_TO_ADDR
// end ;
36854: LD_VAR 0 3
36858: RET
// export function DangerInArea ( side , area ) ; begin
36859: LD_INT 0
36861: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36862: LD_ADDR_VAR 0 3
36866: PUSH
36867: LD_VAR 0 2
36871: PPUSH
36872: LD_INT 81
36874: PUSH
36875: LD_VAR 0 1
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PPUSH
36884: CALL_OW 70
36888: ST_TO_ADDR
// end ;
36889: LD_VAR 0 3
36893: RET
// export function IsExtension ( b ) ; begin
36894: LD_INT 0
36896: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36897: LD_ADDR_VAR 0 2
36901: PUSH
36902: LD_VAR 0 1
36906: PUSH
36907: LD_INT 23
36909: PUSH
36910: LD_INT 20
36912: PUSH
36913: LD_INT 22
36915: PUSH
36916: LD_INT 17
36918: PUSH
36919: LD_INT 24
36921: PUSH
36922: LD_INT 21
36924: PUSH
36925: LD_INT 19
36927: PUSH
36928: LD_INT 16
36930: PUSH
36931: LD_INT 25
36933: PUSH
36934: LD_INT 18
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: IN
36949: ST_TO_ADDR
// end ;
36950: LD_VAR 0 2
36954: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
36955: LD_INT 0
36957: PPUSH
36958: PPUSH
36959: PPUSH
// result := [ ] ;
36960: LD_ADDR_VAR 0 3
36964: PUSH
36965: EMPTY
36966: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36967: LD_ADDR_VAR 0 4
36971: PUSH
36972: LD_VAR 0 2
36976: PPUSH
36977: LD_INT 21
36979: PUSH
36980: LD_INT 3
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PPUSH
36987: CALL_OW 70
36991: ST_TO_ADDR
// if not tmp then
36992: LD_VAR 0 4
36996: NOT
36997: IFFALSE 37001
// exit ;
36999: GO 37059
// for i in tmp do
37001: LD_ADDR_VAR 0 5
37005: PUSH
37006: LD_VAR 0 4
37010: PUSH
37011: FOR_IN
37012: IFFALSE 37047
// if GetBase ( i ) <> base then
37014: LD_VAR 0 5
37018: PPUSH
37019: CALL_OW 274
37023: PUSH
37024: LD_VAR 0 1
37028: NONEQUAL
37029: IFFALSE 37045
// ComLinkToBase ( base , i ) ;
37031: LD_VAR 0 1
37035: PPUSH
37036: LD_VAR 0 5
37040: PPUSH
37041: CALL_OW 169
37045: GO 37011
37047: POP
37048: POP
// result := tmp ;
37049: LD_ADDR_VAR 0 3
37053: PUSH
37054: LD_VAR 0 4
37058: ST_TO_ADDR
// end ;
37059: LD_VAR 0 3
37063: RET
// export function ComComplete ( unit , b ) ; var i ; begin
37064: LD_INT 0
37066: PPUSH
37067: PPUSH
// if BuildingStatus ( b ) = bs_build then
37068: LD_VAR 0 2
37072: PPUSH
37073: CALL_OW 461
37077: PUSH
37078: LD_INT 1
37080: EQUAL
37081: IFFALSE 37141
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37083: LD_VAR 0 1
37087: PPUSH
37088: LD_STRING h
37090: PUSH
37091: LD_VAR 0 2
37095: PPUSH
37096: CALL_OW 250
37100: PUSH
37101: LD_VAR 0 2
37105: PPUSH
37106: CALL_OW 251
37110: PUSH
37111: LD_VAR 0 2
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: PUSH
37134: EMPTY
37135: LIST
37136: PPUSH
37137: CALL_OW 446
// end ;
37141: LD_VAR 0 3
37145: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37146: LD_INT 0
37148: PPUSH
37149: PPUSH
37150: PPUSH
37151: PPUSH
37152: PPUSH
37153: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37154: LD_VAR 0 1
37158: NOT
37159: PUSH
37160: LD_VAR 0 1
37164: PPUSH
37165: CALL_OW 263
37169: PUSH
37170: LD_INT 2
37172: EQUAL
37173: NOT
37174: OR
37175: IFFALSE 37179
// exit ;
37177: GO 37495
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37179: LD_ADDR_VAR 0 6
37183: PUSH
37184: LD_INT 22
37186: PUSH
37187: LD_VAR 0 1
37191: PPUSH
37192: CALL_OW 255
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: LD_INT 30
37206: PUSH
37207: LD_INT 36
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 34
37216: PUSH
37217: LD_INT 31
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PPUSH
37233: CALL_OW 69
37237: ST_TO_ADDR
// if not tmp then
37238: LD_VAR 0 6
37242: NOT
37243: IFFALSE 37247
// exit ;
37245: GO 37495
// result := [ ] ;
37247: LD_ADDR_VAR 0 2
37251: PUSH
37252: EMPTY
37253: ST_TO_ADDR
// for i in tmp do
37254: LD_ADDR_VAR 0 3
37258: PUSH
37259: LD_VAR 0 6
37263: PUSH
37264: FOR_IN
37265: IFFALSE 37336
// begin t := UnitsInside ( i ) ;
37267: LD_ADDR_VAR 0 4
37271: PUSH
37272: LD_VAR 0 3
37276: PPUSH
37277: CALL_OW 313
37281: ST_TO_ADDR
// if t then
37282: LD_VAR 0 4
37286: IFFALSE 37334
// for j in t do
37288: LD_ADDR_VAR 0 7
37292: PUSH
37293: LD_VAR 0 4
37297: PUSH
37298: FOR_IN
37299: IFFALSE 37332
// result := Insert ( result , result + 1 , j ) ;
37301: LD_ADDR_VAR 0 2
37305: PUSH
37306: LD_VAR 0 2
37310: PPUSH
37311: LD_VAR 0 2
37315: PUSH
37316: LD_INT 1
37318: PLUS
37319: PPUSH
37320: LD_VAR 0 7
37324: PPUSH
37325: CALL_OW 2
37329: ST_TO_ADDR
37330: GO 37298
37332: POP
37333: POP
// end ;
37334: GO 37264
37336: POP
37337: POP
// if not result then
37338: LD_VAR 0 2
37342: NOT
37343: IFFALSE 37347
// exit ;
37345: GO 37495
// mech := result [ 1 ] ;
37347: LD_ADDR_VAR 0 5
37351: PUSH
37352: LD_VAR 0 2
37356: PUSH
37357: LD_INT 1
37359: ARRAY
37360: ST_TO_ADDR
// if result > 1 then
37361: LD_VAR 0 2
37365: PUSH
37366: LD_INT 1
37368: GREATER
37369: IFFALSE 37481
// for i = 2 to result do
37371: LD_ADDR_VAR 0 3
37375: PUSH
37376: DOUBLE
37377: LD_INT 2
37379: DEC
37380: ST_TO_ADDR
37381: LD_VAR 0 2
37385: PUSH
37386: FOR_TO
37387: IFFALSE 37479
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37389: LD_ADDR_VAR 0 4
37393: PUSH
37394: LD_VAR 0 2
37398: PUSH
37399: LD_VAR 0 3
37403: ARRAY
37404: PPUSH
37405: LD_INT 3
37407: PPUSH
37408: CALL_OW 259
37412: PUSH
37413: LD_VAR 0 2
37417: PUSH
37418: LD_VAR 0 3
37422: ARRAY
37423: PPUSH
37424: CALL_OW 432
37428: MINUS
37429: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37430: LD_VAR 0 4
37434: PUSH
37435: LD_VAR 0 5
37439: PPUSH
37440: LD_INT 3
37442: PPUSH
37443: CALL_OW 259
37447: PUSH
37448: LD_VAR 0 5
37452: PPUSH
37453: CALL_OW 432
37457: MINUS
37458: GREATEREQUAL
37459: IFFALSE 37477
// mech := result [ i ] ;
37461: LD_ADDR_VAR 0 5
37465: PUSH
37466: LD_VAR 0 2
37470: PUSH
37471: LD_VAR 0 3
37475: ARRAY
37476: ST_TO_ADDR
// end ;
37477: GO 37386
37479: POP
37480: POP
// ComLinkTo ( vehicle , mech ) ;
37481: LD_VAR 0 1
37485: PPUSH
37486: LD_VAR 0 5
37490: PPUSH
37491: CALL_OW 135
// end ;
37495: LD_VAR 0 2
37499: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37500: LD_INT 0
37502: PPUSH
37503: PPUSH
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
37512: PPUSH
37513: PPUSH
37514: PPUSH
// result := [ ] ;
37515: LD_ADDR_VAR 0 7
37519: PUSH
37520: EMPTY
37521: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37522: LD_VAR 0 1
37526: PPUSH
37527: CALL_OW 266
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: IN
37542: NOT
37543: IFFALSE 37547
// exit ;
37545: GO 39178
// if name then
37547: LD_VAR 0 3
37551: IFFALSE 37567
// SetBName ( base_dep , name ) ;
37553: LD_VAR 0 1
37557: PPUSH
37558: LD_VAR 0 3
37562: PPUSH
37563: CALL_OW 500
// base := GetBase ( base_dep ) ;
37567: LD_ADDR_VAR 0 15
37571: PUSH
37572: LD_VAR 0 1
37576: PPUSH
37577: CALL_OW 274
37581: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37582: LD_ADDR_VAR 0 16
37586: PUSH
37587: LD_VAR 0 1
37591: PPUSH
37592: CALL_OW 255
37596: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37597: LD_ADDR_VAR 0 17
37601: PUSH
37602: LD_VAR 0 1
37606: PPUSH
37607: CALL_OW 248
37611: ST_TO_ADDR
// if sources then
37612: LD_VAR 0 5
37616: IFFALSE 37663
// for i = 1 to 3 do
37618: LD_ADDR_VAR 0 8
37622: PUSH
37623: DOUBLE
37624: LD_INT 1
37626: DEC
37627: ST_TO_ADDR
37628: LD_INT 3
37630: PUSH
37631: FOR_TO
37632: IFFALSE 37661
// AddResourceType ( base , i , sources [ i ] ) ;
37634: LD_VAR 0 15
37638: PPUSH
37639: LD_VAR 0 8
37643: PPUSH
37644: LD_VAR 0 5
37648: PUSH
37649: LD_VAR 0 8
37653: ARRAY
37654: PPUSH
37655: CALL_OW 276
37659: GO 37631
37661: POP
37662: POP
// buildings := GetBaseBuildings ( base , area ) ;
37663: LD_ADDR_VAR 0 18
37667: PUSH
37668: LD_VAR 0 15
37672: PPUSH
37673: LD_VAR 0 2
37677: PPUSH
37678: CALL 36955 0 2
37682: ST_TO_ADDR
// InitHc ;
37683: CALL_OW 19
// InitUc ;
37687: CALL_OW 18
// uc_side := side ;
37691: LD_ADDR_OWVAR 20
37695: PUSH
37696: LD_VAR 0 16
37700: ST_TO_ADDR
// uc_nation := nation ;
37701: LD_ADDR_OWVAR 21
37705: PUSH
37706: LD_VAR 0 17
37710: ST_TO_ADDR
// if buildings then
37711: LD_VAR 0 18
37715: IFFALSE 39037
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37717: LD_ADDR_VAR 0 19
37721: PUSH
37722: LD_VAR 0 18
37726: PPUSH
37727: LD_INT 2
37729: PUSH
37730: LD_INT 30
37732: PUSH
37733: LD_INT 29
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 30
37742: PUSH
37743: LD_INT 30
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: LIST
37754: PPUSH
37755: CALL_OW 72
37759: ST_TO_ADDR
// if tmp then
37760: LD_VAR 0 19
37764: IFFALSE 37812
// for i in tmp do
37766: LD_ADDR_VAR 0 8
37770: PUSH
37771: LD_VAR 0 19
37775: PUSH
37776: FOR_IN
37777: IFFALSE 37810
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37779: LD_VAR 0 8
37783: PPUSH
37784: CALL_OW 250
37788: PPUSH
37789: LD_VAR 0 8
37793: PPUSH
37794: CALL_OW 251
37798: PPUSH
37799: LD_VAR 0 16
37803: PPUSH
37804: CALL_OW 441
37808: GO 37776
37810: POP
37811: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37812: LD_VAR 0 18
37816: PPUSH
37817: LD_INT 2
37819: PUSH
37820: LD_INT 30
37822: PUSH
37823: LD_INT 32
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 30
37832: PUSH
37833: LD_INT 33
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: LIST
37844: PPUSH
37845: CALL_OW 72
37849: IFFALSE 37937
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37851: LD_ADDR_VAR 0 8
37855: PUSH
37856: LD_VAR 0 18
37860: PPUSH
37861: LD_INT 2
37863: PUSH
37864: LD_INT 30
37866: PUSH
37867: LD_INT 32
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 30
37876: PUSH
37877: LD_INT 33
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: PPUSH
37889: CALL_OW 72
37893: PUSH
37894: FOR_IN
37895: IFFALSE 37935
// begin if not GetBWeapon ( i ) then
37897: LD_VAR 0 8
37901: PPUSH
37902: CALL_OW 269
37906: NOT
37907: IFFALSE 37933
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37909: LD_VAR 0 8
37913: PPUSH
37914: LD_VAR 0 8
37918: PPUSH
37919: LD_VAR 0 2
37923: PPUSH
37924: CALL 39183 0 2
37928: PPUSH
37929: CALL_OW 431
// end ;
37933: GO 37894
37935: POP
37936: POP
// end ; for i = 1 to personel do
37937: LD_ADDR_VAR 0 8
37941: PUSH
37942: DOUBLE
37943: LD_INT 1
37945: DEC
37946: ST_TO_ADDR
37947: LD_VAR 0 6
37951: PUSH
37952: FOR_TO
37953: IFFALSE 39017
// begin if i > 4 then
37955: LD_VAR 0 8
37959: PUSH
37960: LD_INT 4
37962: GREATER
37963: IFFALSE 37967
// break ;
37965: GO 39017
// case i of 1 :
37967: LD_VAR 0 8
37971: PUSH
37972: LD_INT 1
37974: DOUBLE
37975: EQUAL
37976: IFTRUE 37980
37978: GO 38060
37980: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37981: LD_ADDR_VAR 0 12
37985: PUSH
37986: LD_VAR 0 18
37990: PPUSH
37991: LD_INT 22
37993: PUSH
37994: LD_VAR 0 16
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 58
38005: PUSH
38006: EMPTY
38007: LIST
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: LD_INT 30
38014: PUSH
38015: LD_INT 32
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 30
38024: PUSH
38025: LD_INT 4
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 30
38034: PUSH
38035: LD_INT 5
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: LIST
38052: PPUSH
38053: CALL_OW 72
38057: ST_TO_ADDR
38058: GO 38282
38060: LD_INT 2
38062: DOUBLE
38063: EQUAL
38064: IFTRUE 38068
38066: GO 38130
38068: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38069: LD_ADDR_VAR 0 12
38073: PUSH
38074: LD_VAR 0 18
38078: PPUSH
38079: LD_INT 22
38081: PUSH
38082: LD_VAR 0 16
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 2
38093: PUSH
38094: LD_INT 30
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 30
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: LIST
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PPUSH
38123: CALL_OW 72
38127: ST_TO_ADDR
38128: GO 38282
38130: LD_INT 3
38132: DOUBLE
38133: EQUAL
38134: IFTRUE 38138
38136: GO 38200
38138: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38139: LD_ADDR_VAR 0 12
38143: PUSH
38144: LD_VAR 0 18
38148: PPUSH
38149: LD_INT 22
38151: PUSH
38152: LD_VAR 0 16
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 30
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 30
38176: PUSH
38177: LD_INT 3
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PPUSH
38193: CALL_OW 72
38197: ST_TO_ADDR
38198: GO 38282
38200: LD_INT 4
38202: DOUBLE
38203: EQUAL
38204: IFTRUE 38208
38206: GO 38281
38208: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38209: LD_ADDR_VAR 0 12
38213: PUSH
38214: LD_VAR 0 18
38218: PPUSH
38219: LD_INT 22
38221: PUSH
38222: LD_VAR 0 16
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: LD_INT 30
38236: PUSH
38237: LD_INT 6
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 30
38246: PUSH
38247: LD_INT 7
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 30
38256: PUSH
38257: LD_INT 8
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PPUSH
38274: CALL_OW 72
38278: ST_TO_ADDR
38279: GO 38282
38281: POP
// if i = 1 then
38282: LD_VAR 0 8
38286: PUSH
38287: LD_INT 1
38289: EQUAL
38290: IFFALSE 38401
// begin tmp := [ ] ;
38292: LD_ADDR_VAR 0 19
38296: PUSH
38297: EMPTY
38298: ST_TO_ADDR
// for j in f do
38299: LD_ADDR_VAR 0 9
38303: PUSH
38304: LD_VAR 0 12
38308: PUSH
38309: FOR_IN
38310: IFFALSE 38383
// if GetBType ( j ) = b_bunker then
38312: LD_VAR 0 9
38316: PPUSH
38317: CALL_OW 266
38321: PUSH
38322: LD_INT 32
38324: EQUAL
38325: IFFALSE 38352
// tmp := Insert ( tmp , 1 , j ) else
38327: LD_ADDR_VAR 0 19
38331: PUSH
38332: LD_VAR 0 19
38336: PPUSH
38337: LD_INT 1
38339: PPUSH
38340: LD_VAR 0 9
38344: PPUSH
38345: CALL_OW 2
38349: ST_TO_ADDR
38350: GO 38381
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38352: LD_ADDR_VAR 0 19
38356: PUSH
38357: LD_VAR 0 19
38361: PPUSH
38362: LD_VAR 0 19
38366: PUSH
38367: LD_INT 1
38369: PLUS
38370: PPUSH
38371: LD_VAR 0 9
38375: PPUSH
38376: CALL_OW 2
38380: ST_TO_ADDR
38381: GO 38309
38383: POP
38384: POP
// if tmp then
38385: LD_VAR 0 19
38389: IFFALSE 38401
// f := tmp ;
38391: LD_ADDR_VAR 0 12
38395: PUSH
38396: LD_VAR 0 19
38400: ST_TO_ADDR
// end ; x := personel [ i ] ;
38401: LD_ADDR_VAR 0 13
38405: PUSH
38406: LD_VAR 0 6
38410: PUSH
38411: LD_VAR 0 8
38415: ARRAY
38416: ST_TO_ADDR
// if x = - 1 then
38417: LD_VAR 0 13
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: EQUAL
38426: IFFALSE 38635
// begin for j in f do
38428: LD_ADDR_VAR 0 9
38432: PUSH
38433: LD_VAR 0 12
38437: PUSH
38438: FOR_IN
38439: IFFALSE 38631
// repeat InitHc ;
38441: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38445: LD_VAR 0 9
38449: PPUSH
38450: CALL_OW 266
38454: PUSH
38455: LD_INT 5
38457: EQUAL
38458: IFFALSE 38528
// begin if UnitsInside ( j ) < 3 then
38460: LD_VAR 0 9
38464: PPUSH
38465: CALL_OW 313
38469: PUSH
38470: LD_INT 3
38472: LESS
38473: IFFALSE 38509
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38475: LD_INT 0
38477: PPUSH
38478: LD_INT 5
38480: PUSH
38481: LD_INT 8
38483: PUSH
38484: LD_INT 9
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: PUSH
38492: LD_VAR 0 17
38496: ARRAY
38497: PPUSH
38498: LD_VAR 0 4
38502: PPUSH
38503: CALL_OW 380
38507: GO 38526
// PrepareHuman ( false , i , skill ) ;
38509: LD_INT 0
38511: PPUSH
38512: LD_VAR 0 8
38516: PPUSH
38517: LD_VAR 0 4
38521: PPUSH
38522: CALL_OW 380
// end else
38526: GO 38545
// PrepareHuman ( false , i , skill ) ;
38528: LD_INT 0
38530: PPUSH
38531: LD_VAR 0 8
38535: PPUSH
38536: LD_VAR 0 4
38540: PPUSH
38541: CALL_OW 380
// un := CreateHuman ;
38545: LD_ADDR_VAR 0 14
38549: PUSH
38550: CALL_OW 44
38554: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38555: LD_ADDR_VAR 0 7
38559: PUSH
38560: LD_VAR 0 7
38564: PPUSH
38565: LD_INT 1
38567: PPUSH
38568: LD_VAR 0 14
38572: PPUSH
38573: CALL_OW 2
38577: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38578: LD_VAR 0 14
38582: PPUSH
38583: LD_VAR 0 9
38587: PPUSH
38588: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38592: LD_VAR 0 9
38596: PPUSH
38597: CALL_OW 313
38601: PUSH
38602: LD_INT 6
38604: EQUAL
38605: PUSH
38606: LD_VAR 0 9
38610: PPUSH
38611: CALL_OW 266
38615: PUSH
38616: LD_INT 32
38618: PUSH
38619: LD_INT 31
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: IN
38626: OR
38627: IFFALSE 38441
38629: GO 38438
38631: POP
38632: POP
// end else
38633: GO 39015
// for j = 1 to x do
38635: LD_ADDR_VAR 0 9
38639: PUSH
38640: DOUBLE
38641: LD_INT 1
38643: DEC
38644: ST_TO_ADDR
38645: LD_VAR 0 13
38649: PUSH
38650: FOR_TO
38651: IFFALSE 39013
// begin InitHc ;
38653: CALL_OW 19
// if not f then
38657: LD_VAR 0 12
38661: NOT
38662: IFFALSE 38751
// begin PrepareHuman ( false , i , skill ) ;
38664: LD_INT 0
38666: PPUSH
38667: LD_VAR 0 8
38671: PPUSH
38672: LD_VAR 0 4
38676: PPUSH
38677: CALL_OW 380
// un := CreateHuman ;
38681: LD_ADDR_VAR 0 14
38685: PUSH
38686: CALL_OW 44
38690: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38691: LD_ADDR_VAR 0 7
38695: PUSH
38696: LD_VAR 0 7
38700: PPUSH
38701: LD_INT 1
38703: PPUSH
38704: LD_VAR 0 14
38708: PPUSH
38709: CALL_OW 2
38713: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38714: LD_VAR 0 14
38718: PPUSH
38719: LD_VAR 0 1
38723: PPUSH
38724: CALL_OW 250
38728: PPUSH
38729: LD_VAR 0 1
38733: PPUSH
38734: CALL_OW 251
38738: PPUSH
38739: LD_INT 10
38741: PPUSH
38742: LD_INT 0
38744: PPUSH
38745: CALL_OW 50
// continue ;
38749: GO 38650
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38751: LD_VAR 0 12
38755: PUSH
38756: LD_INT 1
38758: ARRAY
38759: PPUSH
38760: CALL_OW 313
38764: PUSH
38765: LD_VAR 0 12
38769: PUSH
38770: LD_INT 1
38772: ARRAY
38773: PPUSH
38774: CALL_OW 266
38778: PUSH
38779: LD_INT 32
38781: PUSH
38782: LD_INT 31
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: IN
38789: AND
38790: PUSH
38791: LD_VAR 0 12
38795: PUSH
38796: LD_INT 1
38798: ARRAY
38799: PPUSH
38800: CALL_OW 313
38804: PUSH
38805: LD_INT 6
38807: EQUAL
38808: OR
38809: IFFALSE 38829
// f := Delete ( f , 1 ) ;
38811: LD_ADDR_VAR 0 12
38815: PUSH
38816: LD_VAR 0 12
38820: PPUSH
38821: LD_INT 1
38823: PPUSH
38824: CALL_OW 3
38828: ST_TO_ADDR
// if not f then
38829: LD_VAR 0 12
38833: NOT
38834: IFFALSE 38852
// begin x := x + 2 ;
38836: LD_ADDR_VAR 0 13
38840: PUSH
38841: LD_VAR 0 13
38845: PUSH
38846: LD_INT 2
38848: PLUS
38849: ST_TO_ADDR
// continue ;
38850: GO 38650
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38852: LD_VAR 0 12
38856: PUSH
38857: LD_INT 1
38859: ARRAY
38860: PPUSH
38861: CALL_OW 266
38865: PUSH
38866: LD_INT 5
38868: EQUAL
38869: IFFALSE 38943
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38871: LD_VAR 0 12
38875: PUSH
38876: LD_INT 1
38878: ARRAY
38879: PPUSH
38880: CALL_OW 313
38884: PUSH
38885: LD_INT 3
38887: LESS
38888: IFFALSE 38924
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38890: LD_INT 0
38892: PPUSH
38893: LD_INT 5
38895: PUSH
38896: LD_INT 8
38898: PUSH
38899: LD_INT 9
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: LIST
38906: PUSH
38907: LD_VAR 0 17
38911: ARRAY
38912: PPUSH
38913: LD_VAR 0 4
38917: PPUSH
38918: CALL_OW 380
38922: GO 38941
// PrepareHuman ( false , i , skill ) ;
38924: LD_INT 0
38926: PPUSH
38927: LD_VAR 0 8
38931: PPUSH
38932: LD_VAR 0 4
38936: PPUSH
38937: CALL_OW 380
// end else
38941: GO 38960
// PrepareHuman ( false , i , skill ) ;
38943: LD_INT 0
38945: PPUSH
38946: LD_VAR 0 8
38950: PPUSH
38951: LD_VAR 0 4
38955: PPUSH
38956: CALL_OW 380
// un := CreateHuman ;
38960: LD_ADDR_VAR 0 14
38964: PUSH
38965: CALL_OW 44
38969: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38970: LD_ADDR_VAR 0 7
38974: PUSH
38975: LD_VAR 0 7
38979: PPUSH
38980: LD_INT 1
38982: PPUSH
38983: LD_VAR 0 14
38987: PPUSH
38988: CALL_OW 2
38992: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38993: LD_VAR 0 14
38997: PPUSH
38998: LD_VAR 0 12
39002: PUSH
39003: LD_INT 1
39005: ARRAY
39006: PPUSH
39007: CALL_OW 52
// end ;
39011: GO 38650
39013: POP
39014: POP
// end ;
39015: GO 37952
39017: POP
39018: POP
// result := result ^ buildings ;
39019: LD_ADDR_VAR 0 7
39023: PUSH
39024: LD_VAR 0 7
39028: PUSH
39029: LD_VAR 0 18
39033: ADD
39034: ST_TO_ADDR
// end else
39035: GO 39178
// begin for i = 1 to personel do
39037: LD_ADDR_VAR 0 8
39041: PUSH
39042: DOUBLE
39043: LD_INT 1
39045: DEC
39046: ST_TO_ADDR
39047: LD_VAR 0 6
39051: PUSH
39052: FOR_TO
39053: IFFALSE 39176
// begin if i > 4 then
39055: LD_VAR 0 8
39059: PUSH
39060: LD_INT 4
39062: GREATER
39063: IFFALSE 39067
// break ;
39065: GO 39176
// x := personel [ i ] ;
39067: LD_ADDR_VAR 0 13
39071: PUSH
39072: LD_VAR 0 6
39076: PUSH
39077: LD_VAR 0 8
39081: ARRAY
39082: ST_TO_ADDR
// if x = - 1 then
39083: LD_VAR 0 13
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: EQUAL
39092: IFFALSE 39096
// continue ;
39094: GO 39052
// PrepareHuman ( false , i , skill ) ;
39096: LD_INT 0
39098: PPUSH
39099: LD_VAR 0 8
39103: PPUSH
39104: LD_VAR 0 4
39108: PPUSH
39109: CALL_OW 380
// un := CreateHuman ;
39113: LD_ADDR_VAR 0 14
39117: PUSH
39118: CALL_OW 44
39122: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39123: LD_VAR 0 14
39127: PPUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: CALL_OW 250
39137: PPUSH
39138: LD_VAR 0 1
39142: PPUSH
39143: CALL_OW 251
39147: PPUSH
39148: LD_INT 10
39150: PPUSH
39151: LD_INT 0
39153: PPUSH
39154: CALL_OW 50
// result := result ^ un ;
39158: LD_ADDR_VAR 0 7
39162: PUSH
39163: LD_VAR 0 7
39167: PUSH
39168: LD_VAR 0 14
39172: ADD
39173: ST_TO_ADDR
// end ;
39174: GO 39052
39176: POP
39177: POP
// end ; end ;
39178: LD_VAR 0 7
39182: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39183: LD_INT 0
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
// result := false ;
39201: LD_ADDR_VAR 0 3
39205: PUSH
39206: LD_INT 0
39208: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39209: LD_VAR 0 1
39213: NOT
39214: PUSH
39215: LD_VAR 0 1
39219: PPUSH
39220: CALL_OW 266
39224: PUSH
39225: LD_INT 32
39227: PUSH
39228: LD_INT 33
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: IN
39235: NOT
39236: OR
39237: IFFALSE 39241
// exit ;
39239: GO 40377
// nat := GetNation ( tower ) ;
39241: LD_ADDR_VAR 0 12
39245: PUSH
39246: LD_VAR 0 1
39250: PPUSH
39251: CALL_OW 248
39255: ST_TO_ADDR
// side := GetSide ( tower ) ;
39256: LD_ADDR_VAR 0 16
39260: PUSH
39261: LD_VAR 0 1
39265: PPUSH
39266: CALL_OW 255
39270: ST_TO_ADDR
// x := GetX ( tower ) ;
39271: LD_ADDR_VAR 0 10
39275: PUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL_OW 250
39285: ST_TO_ADDR
// y := GetY ( tower ) ;
39286: LD_ADDR_VAR 0 11
39290: PUSH
39291: LD_VAR 0 1
39295: PPUSH
39296: CALL_OW 251
39300: ST_TO_ADDR
// if not x or not y then
39301: LD_VAR 0 10
39305: NOT
39306: PUSH
39307: LD_VAR 0 11
39311: NOT
39312: OR
39313: IFFALSE 39317
// exit ;
39315: GO 40377
// weapon := 0 ;
39317: LD_ADDR_VAR 0 18
39321: PUSH
39322: LD_INT 0
39324: ST_TO_ADDR
// fac_list := [ ] ;
39325: LD_ADDR_VAR 0 17
39329: PUSH
39330: EMPTY
39331: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
39332: LD_ADDR_VAR 0 6
39336: PUSH
39337: LD_VAR 0 1
39341: PPUSH
39342: CALL_OW 274
39346: PPUSH
39347: LD_VAR 0 2
39351: PPUSH
39352: CALL 36955 0 2
39356: PPUSH
39357: LD_INT 30
39359: PUSH
39360: LD_INT 3
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PPUSH
39367: CALL_OW 72
39371: ST_TO_ADDR
// if not factories then
39372: LD_VAR 0 6
39376: NOT
39377: IFFALSE 39381
// exit ;
39379: GO 40377
// for i in factories do
39381: LD_ADDR_VAR 0 8
39385: PUSH
39386: LD_VAR 0 6
39390: PUSH
39391: FOR_IN
39392: IFFALSE 39417
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39394: LD_ADDR_VAR 0 17
39398: PUSH
39399: LD_VAR 0 17
39403: PUSH
39404: LD_VAR 0 8
39408: PPUSH
39409: CALL_OW 478
39413: UNION
39414: ST_TO_ADDR
39415: GO 39391
39417: POP
39418: POP
// if not fac_list then
39419: LD_VAR 0 17
39423: NOT
39424: IFFALSE 39428
// exit ;
39426: GO 40377
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39428: LD_ADDR_VAR 0 5
39432: PUSH
39433: LD_INT 4
39435: PUSH
39436: LD_INT 5
39438: PUSH
39439: LD_INT 9
39441: PUSH
39442: LD_INT 10
39444: PUSH
39445: LD_INT 6
39447: PUSH
39448: LD_INT 7
39450: PUSH
39451: LD_INT 11
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 27
39465: PUSH
39466: LD_INT 28
39468: PUSH
39469: LD_INT 26
39471: PUSH
39472: LD_INT 30
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 43
39483: PUSH
39484: LD_INT 44
39486: PUSH
39487: LD_INT 46
39489: PUSH
39490: LD_INT 45
39492: PUSH
39493: LD_INT 47
39495: PUSH
39496: LD_INT 49
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: LIST
39511: PUSH
39512: LD_VAR 0 12
39516: ARRAY
39517: ST_TO_ADDR
// for i in list do
39518: LD_ADDR_VAR 0 8
39522: PUSH
39523: LD_VAR 0 5
39527: PUSH
39528: FOR_IN
39529: IFFALSE 39562
// if not i in fac_list then
39531: LD_VAR 0 8
39535: PUSH
39536: LD_VAR 0 17
39540: IN
39541: NOT
39542: IFFALSE 39560
// list := list diff i ;
39544: LD_ADDR_VAR 0 5
39548: PUSH
39549: LD_VAR 0 5
39553: PUSH
39554: LD_VAR 0 8
39558: DIFF
39559: ST_TO_ADDR
39560: GO 39528
39562: POP
39563: POP
// if not list then
39564: LD_VAR 0 5
39568: NOT
39569: IFFALSE 39573
// exit ;
39571: GO 40377
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39573: LD_VAR 0 12
39577: PUSH
39578: LD_INT 3
39580: EQUAL
39581: PUSH
39582: LD_INT 49
39584: PUSH
39585: LD_VAR 0 5
39589: IN
39590: AND
39591: PUSH
39592: LD_INT 31
39594: PPUSH
39595: LD_VAR 0 16
39599: PPUSH
39600: CALL_OW 321
39604: PUSH
39605: LD_INT 2
39607: EQUAL
39608: AND
39609: IFFALSE 39669
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39611: LD_INT 22
39613: PUSH
39614: LD_VAR 0 16
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 35
39625: PUSH
39626: LD_INT 49
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 91
39635: PUSH
39636: LD_VAR 0 1
39640: PUSH
39641: LD_INT 10
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: PPUSH
39654: CALL_OW 69
39658: NOT
39659: IFFALSE 39669
// weapon := ru_time_lapser ;
39661: LD_ADDR_VAR 0 18
39665: PUSH
39666: LD_INT 49
39668: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39669: LD_VAR 0 12
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: IN
39684: PUSH
39685: LD_INT 11
39687: PUSH
39688: LD_VAR 0 5
39692: IN
39693: PUSH
39694: LD_INT 30
39696: PUSH
39697: LD_VAR 0 5
39701: IN
39702: OR
39703: AND
39704: PUSH
39705: LD_INT 6
39707: PPUSH
39708: LD_VAR 0 16
39712: PPUSH
39713: CALL_OW 321
39717: PUSH
39718: LD_INT 2
39720: EQUAL
39721: AND
39722: IFFALSE 39887
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39724: LD_INT 22
39726: PUSH
39727: LD_VAR 0 16
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: LD_INT 35
39741: PUSH
39742: LD_INT 11
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 35
39751: PUSH
39752: LD_INT 30
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 91
39766: PUSH
39767: LD_VAR 0 1
39771: PUSH
39772: LD_INT 18
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: LIST
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: PPUSH
39785: CALL_OW 69
39789: NOT
39790: PUSH
39791: LD_INT 22
39793: PUSH
39794: LD_VAR 0 16
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: LD_INT 30
39808: PUSH
39809: LD_INT 32
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 30
39818: PUSH
39819: LD_INT 33
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 91
39833: PUSH
39834: LD_VAR 0 1
39838: PUSH
39839: LD_INT 12
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: LIST
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: LIST
39851: PUSH
39852: EMPTY
39853: LIST
39854: PPUSH
39855: CALL_OW 69
39859: PUSH
39860: LD_INT 2
39862: GREATER
39863: AND
39864: IFFALSE 39887
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39866: LD_ADDR_VAR 0 18
39870: PUSH
39871: LD_INT 11
39873: PUSH
39874: LD_INT 30
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_VAR 0 12
39885: ARRAY
39886: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39887: LD_VAR 0 18
39891: NOT
39892: PUSH
39893: LD_INT 40
39895: PPUSH
39896: LD_VAR 0 16
39900: PPUSH
39901: CALL_OW 321
39905: PUSH
39906: LD_INT 2
39908: EQUAL
39909: AND
39910: PUSH
39911: LD_INT 7
39913: PUSH
39914: LD_VAR 0 5
39918: IN
39919: PUSH
39920: LD_INT 28
39922: PUSH
39923: LD_VAR 0 5
39927: IN
39928: OR
39929: PUSH
39930: LD_INT 45
39932: PUSH
39933: LD_VAR 0 5
39937: IN
39938: OR
39939: AND
39940: IFFALSE 40194
// begin hex := GetHexInfo ( x , y ) ;
39942: LD_ADDR_VAR 0 4
39946: PUSH
39947: LD_VAR 0 10
39951: PPUSH
39952: LD_VAR 0 11
39956: PPUSH
39957: CALL_OW 546
39961: ST_TO_ADDR
// if hex [ 1 ] then
39962: LD_VAR 0 4
39966: PUSH
39967: LD_INT 1
39969: ARRAY
39970: IFFALSE 39974
// exit ;
39972: GO 40377
// height := hex [ 2 ] ;
39974: LD_ADDR_VAR 0 15
39978: PUSH
39979: LD_VAR 0 4
39983: PUSH
39984: LD_INT 2
39986: ARRAY
39987: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39988: LD_ADDR_VAR 0 14
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: LD_INT 3
40001: PUSH
40002: LD_INT 5
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: ST_TO_ADDR
// for i in tmp do
40011: LD_ADDR_VAR 0 8
40015: PUSH
40016: LD_VAR 0 14
40020: PUSH
40021: FOR_IN
40022: IFFALSE 40192
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40024: LD_ADDR_VAR 0 9
40028: PUSH
40029: LD_VAR 0 10
40033: PPUSH
40034: LD_VAR 0 8
40038: PPUSH
40039: LD_INT 5
40041: PPUSH
40042: CALL_OW 272
40046: PUSH
40047: LD_VAR 0 11
40051: PPUSH
40052: LD_VAR 0 8
40056: PPUSH
40057: LD_INT 5
40059: PPUSH
40060: CALL_OW 273
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40069: LD_VAR 0 9
40073: PUSH
40074: LD_INT 1
40076: ARRAY
40077: PPUSH
40078: LD_VAR 0 9
40082: PUSH
40083: LD_INT 2
40085: ARRAY
40086: PPUSH
40087: CALL_OW 488
40091: IFFALSE 40190
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40093: LD_ADDR_VAR 0 4
40097: PUSH
40098: LD_VAR 0 9
40102: PUSH
40103: LD_INT 1
40105: ARRAY
40106: PPUSH
40107: LD_VAR 0 9
40111: PUSH
40112: LD_INT 2
40114: ARRAY
40115: PPUSH
40116: CALL_OW 546
40120: ST_TO_ADDR
// if hex [ 1 ] then
40121: LD_VAR 0 4
40125: PUSH
40126: LD_INT 1
40128: ARRAY
40129: IFFALSE 40133
// continue ;
40131: GO 40021
// h := hex [ 2 ] ;
40133: LD_ADDR_VAR 0 13
40137: PUSH
40138: LD_VAR 0 4
40142: PUSH
40143: LD_INT 2
40145: ARRAY
40146: ST_TO_ADDR
// if h + 7 < height then
40147: LD_VAR 0 13
40151: PUSH
40152: LD_INT 7
40154: PLUS
40155: PUSH
40156: LD_VAR 0 15
40160: LESS
40161: IFFALSE 40190
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40163: LD_ADDR_VAR 0 18
40167: PUSH
40168: LD_INT 7
40170: PUSH
40171: LD_INT 28
40173: PUSH
40174: LD_INT 45
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: PUSH
40182: LD_VAR 0 12
40186: ARRAY
40187: ST_TO_ADDR
// break ;
40188: GO 40192
// end ; end ; end ;
40190: GO 40021
40192: POP
40193: POP
// end ; if not weapon then
40194: LD_VAR 0 18
40198: NOT
40199: IFFALSE 40259
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40201: LD_ADDR_VAR 0 5
40205: PUSH
40206: LD_VAR 0 5
40210: PUSH
40211: LD_INT 11
40213: PUSH
40214: LD_INT 30
40216: PUSH
40217: LD_INT 49
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: LIST
40224: DIFF
40225: ST_TO_ADDR
// if not list then
40226: LD_VAR 0 5
40230: NOT
40231: IFFALSE 40235
// exit ;
40233: GO 40377
// weapon := list [ rand ( 1 , list ) ] ;
40235: LD_ADDR_VAR 0 18
40239: PUSH
40240: LD_VAR 0 5
40244: PUSH
40245: LD_INT 1
40247: PPUSH
40248: LD_VAR 0 5
40252: PPUSH
40253: CALL_OW 12
40257: ARRAY
40258: ST_TO_ADDR
// end ; if weapon then
40259: LD_VAR 0 18
40263: IFFALSE 40377
// begin tmp := CostOfWeapon ( weapon ) ;
40265: LD_ADDR_VAR 0 14
40269: PUSH
40270: LD_VAR 0 18
40274: PPUSH
40275: CALL_OW 451
40279: ST_TO_ADDR
// j := GetBase ( tower ) ;
40280: LD_ADDR_VAR 0 9
40284: PUSH
40285: LD_VAR 0 1
40289: PPUSH
40290: CALL_OW 274
40294: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40295: LD_VAR 0 9
40299: PPUSH
40300: LD_INT 1
40302: PPUSH
40303: CALL_OW 275
40307: PUSH
40308: LD_VAR 0 14
40312: PUSH
40313: LD_INT 1
40315: ARRAY
40316: GREATEREQUAL
40317: PUSH
40318: LD_VAR 0 9
40322: PPUSH
40323: LD_INT 2
40325: PPUSH
40326: CALL_OW 275
40330: PUSH
40331: LD_VAR 0 14
40335: PUSH
40336: LD_INT 2
40338: ARRAY
40339: GREATEREQUAL
40340: AND
40341: PUSH
40342: LD_VAR 0 9
40346: PPUSH
40347: LD_INT 3
40349: PPUSH
40350: CALL_OW 275
40354: PUSH
40355: LD_VAR 0 14
40359: PUSH
40360: LD_INT 3
40362: ARRAY
40363: GREATEREQUAL
40364: AND
40365: IFFALSE 40377
// result := weapon ;
40367: LD_ADDR_VAR 0 3
40371: PUSH
40372: LD_VAR 0 18
40376: ST_TO_ADDR
// end ; end ;
40377: LD_VAR 0 3
40381: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40382: LD_INT 0
40384: PPUSH
40385: PPUSH
// result := true ;
40386: LD_ADDR_VAR 0 3
40390: PUSH
40391: LD_INT 1
40393: ST_TO_ADDR
// if array1 = array2 then
40394: LD_VAR 0 1
40398: PUSH
40399: LD_VAR 0 2
40403: EQUAL
40404: IFFALSE 40464
// begin for i = 1 to array1 do
40406: LD_ADDR_VAR 0 4
40410: PUSH
40411: DOUBLE
40412: LD_INT 1
40414: DEC
40415: ST_TO_ADDR
40416: LD_VAR 0 1
40420: PUSH
40421: FOR_TO
40422: IFFALSE 40460
// if array1 [ i ] <> array2 [ i ] then
40424: LD_VAR 0 1
40428: PUSH
40429: LD_VAR 0 4
40433: ARRAY
40434: PUSH
40435: LD_VAR 0 2
40439: PUSH
40440: LD_VAR 0 4
40444: ARRAY
40445: NONEQUAL
40446: IFFALSE 40458
// begin result := false ;
40448: LD_ADDR_VAR 0 3
40452: PUSH
40453: LD_INT 0
40455: ST_TO_ADDR
// break ;
40456: GO 40460
// end ;
40458: GO 40421
40460: POP
40461: POP
// end else
40462: GO 40472
// result := false ;
40464: LD_ADDR_VAR 0 3
40468: PUSH
40469: LD_INT 0
40471: ST_TO_ADDR
// end ;
40472: LD_VAR 0 3
40476: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40477: LD_INT 0
40479: PPUSH
40480: PPUSH
40481: PPUSH
// pom := GetBase ( fac ) ;
40482: LD_ADDR_VAR 0 5
40486: PUSH
40487: LD_VAR 0 1
40491: PPUSH
40492: CALL_OW 274
40496: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40497: LD_ADDR_VAR 0 4
40501: PUSH
40502: LD_VAR 0 2
40506: PUSH
40507: LD_INT 1
40509: ARRAY
40510: PPUSH
40511: LD_VAR 0 2
40515: PUSH
40516: LD_INT 2
40518: ARRAY
40519: PPUSH
40520: LD_VAR 0 2
40524: PUSH
40525: LD_INT 3
40527: ARRAY
40528: PPUSH
40529: LD_VAR 0 2
40533: PUSH
40534: LD_INT 4
40536: ARRAY
40537: PPUSH
40538: CALL_OW 449
40542: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40543: LD_ADDR_VAR 0 3
40547: PUSH
40548: LD_VAR 0 5
40552: PPUSH
40553: LD_INT 1
40555: PPUSH
40556: CALL_OW 275
40560: PUSH
40561: LD_VAR 0 4
40565: PUSH
40566: LD_INT 1
40568: ARRAY
40569: GREATEREQUAL
40570: PUSH
40571: LD_VAR 0 5
40575: PPUSH
40576: LD_INT 2
40578: PPUSH
40579: CALL_OW 275
40583: PUSH
40584: LD_VAR 0 4
40588: PUSH
40589: LD_INT 2
40591: ARRAY
40592: GREATEREQUAL
40593: AND
40594: PUSH
40595: LD_VAR 0 5
40599: PPUSH
40600: LD_INT 3
40602: PPUSH
40603: CALL_OW 275
40607: PUSH
40608: LD_VAR 0 4
40612: PUSH
40613: LD_INT 3
40615: ARRAY
40616: GREATEREQUAL
40617: AND
40618: ST_TO_ADDR
// end ;
40619: LD_VAR 0 3
40623: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40624: LD_INT 0
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
// pom := GetBase ( building ) ;
40630: LD_ADDR_VAR 0 3
40634: PUSH
40635: LD_VAR 0 1
40639: PPUSH
40640: CALL_OW 274
40644: ST_TO_ADDR
// if not pom then
40645: LD_VAR 0 3
40649: NOT
40650: IFFALSE 40654
// exit ;
40652: GO 40824
// btype := GetBType ( building ) ;
40654: LD_ADDR_VAR 0 5
40658: PUSH
40659: LD_VAR 0 1
40663: PPUSH
40664: CALL_OW 266
40668: ST_TO_ADDR
// if btype = b_armoury then
40669: LD_VAR 0 5
40673: PUSH
40674: LD_INT 4
40676: EQUAL
40677: IFFALSE 40687
// btype := b_barracks ;
40679: LD_ADDR_VAR 0 5
40683: PUSH
40684: LD_INT 5
40686: ST_TO_ADDR
// if btype = b_depot then
40687: LD_VAR 0 5
40691: PUSH
40692: LD_INT 0
40694: EQUAL
40695: IFFALSE 40705
// btype := b_warehouse ;
40697: LD_ADDR_VAR 0 5
40701: PUSH
40702: LD_INT 1
40704: ST_TO_ADDR
// if btype = b_workshop then
40705: LD_VAR 0 5
40709: PUSH
40710: LD_INT 2
40712: EQUAL
40713: IFFALSE 40723
// btype := b_factory ;
40715: LD_ADDR_VAR 0 5
40719: PUSH
40720: LD_INT 3
40722: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40723: LD_ADDR_VAR 0 4
40727: PUSH
40728: LD_VAR 0 5
40732: PPUSH
40733: LD_VAR 0 1
40737: PPUSH
40738: CALL_OW 248
40742: PPUSH
40743: CALL_OW 450
40747: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40748: LD_ADDR_VAR 0 2
40752: PUSH
40753: LD_VAR 0 3
40757: PPUSH
40758: LD_INT 1
40760: PPUSH
40761: CALL_OW 275
40765: PUSH
40766: LD_VAR 0 4
40770: PUSH
40771: LD_INT 1
40773: ARRAY
40774: GREATEREQUAL
40775: PUSH
40776: LD_VAR 0 3
40780: PPUSH
40781: LD_INT 2
40783: PPUSH
40784: CALL_OW 275
40788: PUSH
40789: LD_VAR 0 4
40793: PUSH
40794: LD_INT 2
40796: ARRAY
40797: GREATEREQUAL
40798: AND
40799: PUSH
40800: LD_VAR 0 3
40804: PPUSH
40805: LD_INT 3
40807: PPUSH
40808: CALL_OW 275
40812: PUSH
40813: LD_VAR 0 4
40817: PUSH
40818: LD_INT 3
40820: ARRAY
40821: GREATEREQUAL
40822: AND
40823: ST_TO_ADDR
// end ;
40824: LD_VAR 0 2
40828: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40829: LD_INT 0
40831: PPUSH
40832: PPUSH
40833: PPUSH
// pom := GetBase ( building ) ;
40834: LD_ADDR_VAR 0 4
40838: PUSH
40839: LD_VAR 0 1
40843: PPUSH
40844: CALL_OW 274
40848: ST_TO_ADDR
// if not pom then
40849: LD_VAR 0 4
40853: NOT
40854: IFFALSE 40858
// exit ;
40856: GO 40959
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40858: LD_ADDR_VAR 0 5
40862: PUSH
40863: LD_VAR 0 2
40867: PPUSH
40868: LD_VAR 0 1
40872: PPUSH
40873: CALL_OW 248
40877: PPUSH
40878: CALL_OW 450
40882: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40883: LD_ADDR_VAR 0 3
40887: PUSH
40888: LD_VAR 0 4
40892: PPUSH
40893: LD_INT 1
40895: PPUSH
40896: CALL_OW 275
40900: PUSH
40901: LD_VAR 0 5
40905: PUSH
40906: LD_INT 1
40908: ARRAY
40909: GREATEREQUAL
40910: PUSH
40911: LD_VAR 0 4
40915: PPUSH
40916: LD_INT 2
40918: PPUSH
40919: CALL_OW 275
40923: PUSH
40924: LD_VAR 0 5
40928: PUSH
40929: LD_INT 2
40931: ARRAY
40932: GREATEREQUAL
40933: AND
40934: PUSH
40935: LD_VAR 0 4
40939: PPUSH
40940: LD_INT 3
40942: PPUSH
40943: CALL_OW 275
40947: PUSH
40948: LD_VAR 0 5
40952: PUSH
40953: LD_INT 3
40955: ARRAY
40956: GREATEREQUAL
40957: AND
40958: ST_TO_ADDR
// end ;
40959: LD_VAR 0 3
40963: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
40964: LD_INT 0
40966: PPUSH
40967: PPUSH
40968: PPUSH
40969: PPUSH
40970: PPUSH
40971: PPUSH
40972: PPUSH
40973: PPUSH
40974: PPUSH
40975: PPUSH
// result := false ;
40976: LD_ADDR_VAR 0 6
40980: PUSH
40981: LD_INT 0
40983: ST_TO_ADDR
// if not base or not btype or not x or not y then
40984: LD_VAR 0 1
40988: NOT
40989: PUSH
40990: LD_VAR 0 2
40994: NOT
40995: OR
40996: PUSH
40997: LD_VAR 0 3
41001: NOT
41002: OR
41003: PUSH
41004: LD_VAR 0 4
41008: NOT
41009: OR
41010: IFFALSE 41014
// exit ;
41012: GO 41623
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
41014: LD_ADDR_VAR 0 12
41018: PUSH
41019: LD_VAR 0 2
41023: PPUSH
41024: LD_VAR 0 3
41028: PPUSH
41029: LD_VAR 0 4
41033: PPUSH
41034: LD_VAR 0 5
41038: PPUSH
41039: LD_VAR 0 1
41043: PUSH
41044: LD_INT 1
41046: ARRAY
41047: PPUSH
41048: CALL_OW 248
41052: PPUSH
41053: LD_INT 0
41055: PPUSH
41056: CALL 42460 0 6
41060: ST_TO_ADDR
// if not hexes then
41061: LD_VAR 0 12
41065: NOT
41066: IFFALSE 41070
// exit ;
41068: GO 41623
// for i = 1 to hexes do
41070: LD_ADDR_VAR 0 7
41074: PUSH
41075: DOUBLE
41076: LD_INT 1
41078: DEC
41079: ST_TO_ADDR
41080: LD_VAR 0 12
41084: PUSH
41085: FOR_TO
41086: IFFALSE 41621
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41088: LD_ADDR_VAR 0 11
41092: PUSH
41093: LD_VAR 0 12
41097: PUSH
41098: LD_VAR 0 7
41102: ARRAY
41103: PUSH
41104: LD_INT 1
41106: ARRAY
41107: PPUSH
41108: LD_VAR 0 12
41112: PUSH
41113: LD_VAR 0 7
41117: ARRAY
41118: PUSH
41119: LD_INT 2
41121: ARRAY
41122: PPUSH
41123: CALL_OW 428
41127: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41128: LD_VAR 0 12
41132: PUSH
41133: LD_VAR 0 7
41137: ARRAY
41138: PUSH
41139: LD_INT 1
41141: ARRAY
41142: PPUSH
41143: LD_VAR 0 12
41147: PUSH
41148: LD_VAR 0 7
41152: ARRAY
41153: PUSH
41154: LD_INT 2
41156: ARRAY
41157: PPUSH
41158: CALL_OW 351
41162: PUSH
41163: LD_VAR 0 12
41167: PUSH
41168: LD_VAR 0 7
41172: ARRAY
41173: PUSH
41174: LD_INT 1
41176: ARRAY
41177: PPUSH
41178: LD_VAR 0 12
41182: PUSH
41183: LD_VAR 0 7
41187: ARRAY
41188: PUSH
41189: LD_INT 2
41191: ARRAY
41192: PPUSH
41193: CALL_OW 488
41197: NOT
41198: OR
41199: PUSH
41200: LD_VAR 0 11
41204: PPUSH
41205: CALL_OW 247
41209: PUSH
41210: LD_INT 3
41212: EQUAL
41213: OR
41214: IFFALSE 41220
// exit ;
41216: POP
41217: POP
41218: GO 41623
// if not tmp or not tmp in base then
41220: LD_VAR 0 11
41224: NOT
41225: PUSH
41226: LD_VAR 0 11
41230: PUSH
41231: LD_VAR 0 1
41235: IN
41236: NOT
41237: OR
41238: IFFALSE 41242
// continue ;
41240: GO 41085
// result := true ;
41242: LD_ADDR_VAR 0 6
41246: PUSH
41247: LD_INT 1
41249: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41250: LD_ADDR_VAR 0 15
41254: PUSH
41255: LD_VAR 0 1
41259: PPUSH
41260: LD_INT 22
41262: PUSH
41263: LD_VAR 0 11
41267: PPUSH
41268: CALL_OW 255
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: LD_INT 30
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 30
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: LIST
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PPUSH
41309: CALL_OW 72
41313: ST_TO_ADDR
// if dep then
41314: LD_VAR 0 15
41318: IFFALSE 41454
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41320: LD_ADDR_VAR 0 14
41324: PUSH
41325: LD_VAR 0 15
41329: PUSH
41330: LD_INT 1
41332: ARRAY
41333: PPUSH
41334: CALL_OW 250
41338: PPUSH
41339: LD_VAR 0 15
41343: PUSH
41344: LD_INT 1
41346: ARRAY
41347: PPUSH
41348: CALL_OW 254
41352: PPUSH
41353: LD_INT 5
41355: PPUSH
41356: CALL_OW 272
41360: PUSH
41361: LD_VAR 0 15
41365: PUSH
41366: LD_INT 1
41368: ARRAY
41369: PPUSH
41370: CALL_OW 251
41374: PPUSH
41375: LD_VAR 0 15
41379: PUSH
41380: LD_INT 1
41382: ARRAY
41383: PPUSH
41384: CALL_OW 254
41388: PPUSH
41389: LD_INT 5
41391: PPUSH
41392: CALL_OW 273
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41401: LD_VAR 0 14
41405: PUSH
41406: LD_INT 1
41408: ARRAY
41409: PPUSH
41410: LD_VAR 0 14
41414: PUSH
41415: LD_INT 2
41417: ARRAY
41418: PPUSH
41419: CALL_OW 488
41423: IFFALSE 41454
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41425: LD_VAR 0 11
41429: PPUSH
41430: LD_VAR 0 14
41434: PUSH
41435: LD_INT 1
41437: ARRAY
41438: PPUSH
41439: LD_VAR 0 14
41443: PUSH
41444: LD_INT 2
41446: ARRAY
41447: PPUSH
41448: CALL_OW 111
// continue ;
41452: GO 41085
// end ; end ; r := GetDir ( tmp ) ;
41454: LD_ADDR_VAR 0 13
41458: PUSH
41459: LD_VAR 0 11
41463: PPUSH
41464: CALL_OW 254
41468: ST_TO_ADDR
// if r = 5 then
41469: LD_VAR 0 13
41473: PUSH
41474: LD_INT 5
41476: EQUAL
41477: IFFALSE 41487
// r := 0 ;
41479: LD_ADDR_VAR 0 13
41483: PUSH
41484: LD_INT 0
41486: ST_TO_ADDR
// for j = r to 5 do
41487: LD_ADDR_VAR 0 8
41491: PUSH
41492: DOUBLE
41493: LD_VAR 0 13
41497: DEC
41498: ST_TO_ADDR
41499: LD_INT 5
41501: PUSH
41502: FOR_TO
41503: IFFALSE 41617
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41505: LD_ADDR_VAR 0 9
41509: PUSH
41510: LD_VAR 0 11
41514: PPUSH
41515: CALL_OW 250
41519: PPUSH
41520: LD_VAR 0 8
41524: PPUSH
41525: LD_INT 2
41527: PPUSH
41528: CALL_OW 272
41532: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41533: LD_ADDR_VAR 0 10
41537: PUSH
41538: LD_VAR 0 11
41542: PPUSH
41543: CALL_OW 251
41547: PPUSH
41548: LD_VAR 0 8
41552: PPUSH
41553: LD_INT 2
41555: PPUSH
41556: CALL_OW 273
41560: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41561: LD_VAR 0 9
41565: PPUSH
41566: LD_VAR 0 10
41570: PPUSH
41571: CALL_OW 488
41575: PUSH
41576: LD_VAR 0 9
41580: PPUSH
41581: LD_VAR 0 10
41585: PPUSH
41586: CALL_OW 428
41590: NOT
41591: AND
41592: IFFALSE 41615
// begin ComMoveXY ( tmp , _x , _y ) ;
41594: LD_VAR 0 11
41598: PPUSH
41599: LD_VAR 0 9
41603: PPUSH
41604: LD_VAR 0 10
41608: PPUSH
41609: CALL_OW 111
// break ;
41613: GO 41617
// end ; end ;
41615: GO 41502
41617: POP
41618: POP
// end ;
41619: GO 41085
41621: POP
41622: POP
// end ;
41623: LD_VAR 0 6
41627: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41628: LD_INT 0
41630: PPUSH
41631: PPUSH
41632: PPUSH
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
// result := false ;
41640: LD_ADDR_VAR 0 6
41644: PUSH
41645: LD_INT 0
41647: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41648: LD_VAR 0 1
41652: NOT
41653: PUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: CALL_OW 266
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: IN
41674: NOT
41675: OR
41676: PUSH
41677: LD_VAR 0 2
41681: NOT
41682: OR
41683: PUSH
41684: LD_VAR 0 5
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: LD_INT 4
41703: PUSH
41704: LD_INT 5
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: IN
41715: NOT
41716: OR
41717: PUSH
41718: LD_VAR 0 3
41722: PPUSH
41723: LD_VAR 0 4
41727: PPUSH
41728: CALL_OW 488
41732: NOT
41733: OR
41734: IFFALSE 41738
// exit ;
41736: GO 42455
// pom := GetBase ( depot ) ;
41738: LD_ADDR_VAR 0 10
41742: PUSH
41743: LD_VAR 0 1
41747: PPUSH
41748: CALL_OW 274
41752: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41753: LD_ADDR_VAR 0 11
41757: PUSH
41758: LD_VAR 0 2
41762: PPUSH
41763: LD_VAR 0 1
41767: PPUSH
41768: CALL_OW 248
41772: PPUSH
41773: CALL_OW 450
41777: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41778: LD_VAR 0 10
41782: PPUSH
41783: LD_INT 1
41785: PPUSH
41786: CALL_OW 275
41790: PUSH
41791: LD_VAR 0 11
41795: PUSH
41796: LD_INT 1
41798: ARRAY
41799: GREATEREQUAL
41800: PUSH
41801: LD_VAR 0 10
41805: PPUSH
41806: LD_INT 2
41808: PPUSH
41809: CALL_OW 275
41813: PUSH
41814: LD_VAR 0 11
41818: PUSH
41819: LD_INT 2
41821: ARRAY
41822: GREATEREQUAL
41823: AND
41824: PUSH
41825: LD_VAR 0 10
41829: PPUSH
41830: LD_INT 3
41832: PPUSH
41833: CALL_OW 275
41837: PUSH
41838: LD_VAR 0 11
41842: PUSH
41843: LD_INT 3
41845: ARRAY
41846: GREATEREQUAL
41847: AND
41848: NOT
41849: IFFALSE 41853
// exit ;
41851: GO 42455
// if GetBType ( depot ) = b_depot then
41853: LD_VAR 0 1
41857: PPUSH
41858: CALL_OW 266
41862: PUSH
41863: LD_INT 0
41865: EQUAL
41866: IFFALSE 41878
// dist := 28 else
41868: LD_ADDR_VAR 0 14
41872: PUSH
41873: LD_INT 28
41875: ST_TO_ADDR
41876: GO 41886
// dist := 36 ;
41878: LD_ADDR_VAR 0 14
41882: PUSH
41883: LD_INT 36
41885: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41886: LD_VAR 0 1
41890: PPUSH
41891: LD_VAR 0 3
41895: PPUSH
41896: LD_VAR 0 4
41900: PPUSH
41901: CALL_OW 297
41905: PUSH
41906: LD_VAR 0 14
41910: GREATER
41911: IFFALSE 41915
// exit ;
41913: GO 42455
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41915: LD_ADDR_VAR 0 12
41919: PUSH
41920: LD_VAR 0 2
41924: PPUSH
41925: LD_VAR 0 3
41929: PPUSH
41930: LD_VAR 0 4
41934: PPUSH
41935: LD_VAR 0 5
41939: PPUSH
41940: LD_VAR 0 1
41944: PPUSH
41945: CALL_OW 248
41949: PPUSH
41950: LD_INT 0
41952: PPUSH
41953: CALL 42460 0 6
41957: ST_TO_ADDR
// if not hexes then
41958: LD_VAR 0 12
41962: NOT
41963: IFFALSE 41967
// exit ;
41965: GO 42455
// hex := GetHexInfo ( x , y ) ;
41967: LD_ADDR_VAR 0 15
41971: PUSH
41972: LD_VAR 0 3
41976: PPUSH
41977: LD_VAR 0 4
41981: PPUSH
41982: CALL_OW 546
41986: ST_TO_ADDR
// if hex [ 1 ] then
41987: LD_VAR 0 15
41991: PUSH
41992: LD_INT 1
41994: ARRAY
41995: IFFALSE 41999
// exit ;
41997: GO 42455
// height := hex [ 2 ] ;
41999: LD_ADDR_VAR 0 13
42003: PUSH
42004: LD_VAR 0 15
42008: PUSH
42009: LD_INT 2
42011: ARRAY
42012: ST_TO_ADDR
// for i = 1 to hexes do
42013: LD_ADDR_VAR 0 7
42017: PUSH
42018: DOUBLE
42019: LD_INT 1
42021: DEC
42022: ST_TO_ADDR
42023: LD_VAR 0 12
42027: PUSH
42028: FOR_TO
42029: IFFALSE 42359
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42031: LD_VAR 0 12
42035: PUSH
42036: LD_VAR 0 7
42040: ARRAY
42041: PUSH
42042: LD_INT 1
42044: ARRAY
42045: PPUSH
42046: LD_VAR 0 12
42050: PUSH
42051: LD_VAR 0 7
42055: ARRAY
42056: PUSH
42057: LD_INT 2
42059: ARRAY
42060: PPUSH
42061: CALL_OW 488
42065: NOT
42066: PUSH
42067: LD_VAR 0 12
42071: PUSH
42072: LD_VAR 0 7
42076: ARRAY
42077: PUSH
42078: LD_INT 1
42080: ARRAY
42081: PPUSH
42082: LD_VAR 0 12
42086: PUSH
42087: LD_VAR 0 7
42091: ARRAY
42092: PUSH
42093: LD_INT 2
42095: ARRAY
42096: PPUSH
42097: CALL_OW 428
42101: PUSH
42102: LD_INT 0
42104: GREATER
42105: OR
42106: PUSH
42107: LD_VAR 0 12
42111: PUSH
42112: LD_VAR 0 7
42116: ARRAY
42117: PUSH
42118: LD_INT 1
42120: ARRAY
42121: PPUSH
42122: LD_VAR 0 12
42126: PUSH
42127: LD_VAR 0 7
42131: ARRAY
42132: PUSH
42133: LD_INT 2
42135: ARRAY
42136: PPUSH
42137: CALL_OW 351
42141: OR
42142: IFFALSE 42148
// exit ;
42144: POP
42145: POP
42146: GO 42455
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42148: LD_ADDR_VAR 0 8
42152: PUSH
42153: LD_VAR 0 12
42157: PUSH
42158: LD_VAR 0 7
42162: ARRAY
42163: PUSH
42164: LD_INT 1
42166: ARRAY
42167: PPUSH
42168: LD_VAR 0 12
42172: PUSH
42173: LD_VAR 0 7
42177: ARRAY
42178: PUSH
42179: LD_INT 2
42181: ARRAY
42182: PPUSH
42183: CALL_OW 546
42187: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42188: LD_VAR 0 8
42192: PUSH
42193: LD_INT 1
42195: ARRAY
42196: PUSH
42197: LD_VAR 0 8
42201: PUSH
42202: LD_INT 2
42204: ARRAY
42205: PUSH
42206: LD_VAR 0 13
42210: PUSH
42211: LD_INT 2
42213: PLUS
42214: GREATER
42215: OR
42216: PUSH
42217: LD_VAR 0 8
42221: PUSH
42222: LD_INT 2
42224: ARRAY
42225: PUSH
42226: LD_VAR 0 13
42230: PUSH
42231: LD_INT 2
42233: MINUS
42234: LESS
42235: OR
42236: PUSH
42237: LD_VAR 0 8
42241: PUSH
42242: LD_INT 3
42244: ARRAY
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 8
42251: PUSH
42252: LD_INT 9
42254: PUSH
42255: LD_INT 10
42257: PUSH
42258: LD_INT 11
42260: PUSH
42261: LD_INT 12
42263: PUSH
42264: LD_INT 13
42266: PUSH
42267: LD_INT 16
42269: PUSH
42270: LD_INT 17
42272: PUSH
42273: LD_INT 18
42275: PUSH
42276: LD_INT 19
42278: PUSH
42279: LD_INT 20
42281: PUSH
42282: LD_INT 21
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: IN
42300: NOT
42301: OR
42302: PUSH
42303: LD_VAR 0 8
42307: PUSH
42308: LD_INT 5
42310: ARRAY
42311: NOT
42312: OR
42313: PUSH
42314: LD_VAR 0 8
42318: PUSH
42319: LD_INT 6
42321: ARRAY
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 7
42331: PUSH
42332: LD_INT 9
42334: PUSH
42335: LD_INT 10
42337: PUSH
42338: LD_INT 11
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: IN
42349: NOT
42350: OR
42351: IFFALSE 42357
// exit ;
42353: POP
42354: POP
42355: GO 42455
// end ;
42357: GO 42028
42359: POP
42360: POP
// side := GetSide ( depot ) ;
42361: LD_ADDR_VAR 0 9
42365: PUSH
42366: LD_VAR 0 1
42370: PPUSH
42371: CALL_OW 255
42375: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42376: LD_VAR 0 9
42380: PPUSH
42381: LD_VAR 0 3
42385: PPUSH
42386: LD_VAR 0 4
42390: PPUSH
42391: LD_INT 20
42393: PPUSH
42394: CALL 35109 0 4
42398: PUSH
42399: LD_INT 4
42401: ARRAY
42402: IFFALSE 42406
// exit ;
42404: GO 42455
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42406: LD_VAR 0 2
42410: PUSH
42411: LD_INT 29
42413: PUSH
42414: LD_INT 30
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: IN
42421: PUSH
42422: LD_VAR 0 3
42426: PPUSH
42427: LD_VAR 0 4
42431: PPUSH
42432: LD_VAR 0 9
42436: PPUSH
42437: CALL_OW 440
42441: NOT
42442: AND
42443: IFFALSE 42447
// exit ;
42445: GO 42455
// result := true ;
42447: LD_ADDR_VAR 0 6
42451: PUSH
42452: LD_INT 1
42454: ST_TO_ADDR
// end ;
42455: LD_VAR 0 6
42459: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42460: LD_INT 0
42462: PPUSH
42463: PPUSH
42464: PPUSH
42465: PPUSH
42466: PPUSH
42467: PPUSH
42468: PPUSH
42469: PPUSH
42470: PPUSH
42471: PPUSH
42472: PPUSH
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
42491: PPUSH
42492: PPUSH
42493: PPUSH
42494: PPUSH
42495: PPUSH
42496: PPUSH
42497: PPUSH
42498: PPUSH
42499: PPUSH
42500: PPUSH
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
42505: PPUSH
42506: PPUSH
42507: PPUSH
42508: PPUSH
42509: PPUSH
42510: PPUSH
42511: PPUSH
42512: PPUSH
42513: PPUSH
42514: PPUSH
42515: PPUSH
42516: PPUSH
42517: PPUSH
42518: PPUSH
42519: PPUSH
// result = [ ] ;
42520: LD_ADDR_VAR 0 7
42524: PUSH
42525: EMPTY
42526: ST_TO_ADDR
// temp_list = [ ] ;
42527: LD_ADDR_VAR 0 9
42531: PUSH
42532: EMPTY
42533: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42534: LD_VAR 0 4
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 3
42550: PUSH
42551: LD_INT 4
42553: PUSH
42554: LD_INT 5
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: IN
42565: NOT
42566: PUSH
42567: LD_VAR 0 1
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: IN
42582: PUSH
42583: LD_VAR 0 5
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: LIST
42601: IN
42602: NOT
42603: AND
42604: OR
42605: IFFALSE 42609
// exit ;
42607: GO 61000
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42609: LD_VAR 0 1
42613: PUSH
42614: LD_INT 6
42616: PUSH
42617: LD_INT 7
42619: PUSH
42620: LD_INT 8
42622: PUSH
42623: LD_INT 13
42625: PUSH
42626: LD_INT 12
42628: PUSH
42629: LD_INT 15
42631: PUSH
42632: LD_INT 11
42634: PUSH
42635: LD_INT 14
42637: PUSH
42638: LD_INT 10
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: IN
42652: IFFALSE 42662
// btype = b_lab ;
42654: LD_ADDR_VAR 0 1
42658: PUSH
42659: LD_INT 6
42661: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42662: LD_VAR 0 6
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: LIST
42680: IN
42681: NOT
42682: PUSH
42683: LD_VAR 0 1
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 3
42699: PUSH
42700: LD_INT 6
42702: PUSH
42703: LD_INT 36
42705: PUSH
42706: LD_INT 4
42708: PUSH
42709: LD_INT 5
42711: PUSH
42712: LD_INT 31
42714: PUSH
42715: LD_INT 32
42717: PUSH
42718: LD_INT 33
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: IN
42734: NOT
42735: PUSH
42736: LD_VAR 0 6
42740: PUSH
42741: LD_INT 1
42743: EQUAL
42744: AND
42745: OR
42746: PUSH
42747: LD_VAR 0 1
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 3
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: IN
42762: NOT
42763: PUSH
42764: LD_VAR 0 6
42768: PUSH
42769: LD_INT 2
42771: EQUAL
42772: AND
42773: OR
42774: IFFALSE 42784
// mode = 0 ;
42776: LD_ADDR_VAR 0 6
42780: PUSH
42781: LD_INT 0
42783: ST_TO_ADDR
// case mode of 0 :
42784: LD_VAR 0 6
42788: PUSH
42789: LD_INT 0
42791: DOUBLE
42792: EQUAL
42793: IFTRUE 42797
42795: GO 54250
42797: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42798: LD_ADDR_VAR 0 11
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: LD_INT 2
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 3
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 3
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42991: LD_ADDR_VAR 0 12
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: NEG
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 3
43148: NEG
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 3
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43187: LD_ADDR_VAR 0 13
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: LD_INT 3
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 3
43346: NEG
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 3
43358: NEG
43359: PUSH
43360: LD_INT 3
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43386: LD_ADDR_VAR 0 14
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: LD_INT 3
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 3
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: LD_INT 2
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43582: LD_ADDR_VAR 0 15
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 3
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43775: LD_ADDR_VAR 0 16
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: LD_INT 2
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 3
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 3
43932: PUSH
43933: LD_INT 3
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: LD_INT 3
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43968: LD_ADDR_VAR 0 17
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: NEG
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44198: LD_ADDR_VAR 0 18
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 2
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44428: LD_ADDR_VAR 0 19
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44658: LD_ADDR_VAR 0 20
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44888: LD_ADDR_VAR 0 21
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45118: LD_ADDR_VAR 0 22
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45348: LD_ADDR_VAR 0 23
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: LD_INT 3
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 3
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45628: LD_ADDR_VAR 0 24
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 3
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45904: LD_ADDR_VAR 0 25
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 3
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: LD_INT 3
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 3
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46178: LD_ADDR_VAR 0 26
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: LD_INT 3
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46454: LD_ADDR_VAR 0 27
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 3
46687: NEG
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46734: LD_ADDR_VAR 0 28
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 3
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 3
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 3
46969: NEG
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 3
46981: NEG
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47016: LD_ADDR_VAR 0 29
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: LD_INT 3
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 3
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 3
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 3
47260: NEG
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47295: LD_ADDR_VAR 0 30
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 2
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 3
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 3
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 3
47538: NEG
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47573: LD_ADDR_VAR 0 31
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: LD_INT 3
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 3
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: LD_INT 3
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 3
47816: NEG
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47851: LD_ADDR_VAR 0 32
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: NEG
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 3
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 3
48094: NEG
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48129: LD_ADDR_VAR 0 33
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 3
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 3
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 3
48373: NEG
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48408: LD_ADDR_VAR 0 34
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 3
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 3
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48688: LD_ADDR_VAR 0 35
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48800: LD_ADDR_VAR 0 36
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48912: LD_ADDR_VAR 0 37
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49024: LD_ADDR_VAR 0 38
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49136: LD_ADDR_VAR 0 39
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49248: LD_ADDR_VAR 0 40
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49360: LD_ADDR_VAR 0 41
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 3
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 3
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 3
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 3
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: NEG
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 3
49645: NEG
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 3
49657: NEG
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: LD_INT 3
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49710: LD_ADDR_VAR 0 42
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: LD_INT 3
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 3
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 3
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 3
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 3
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: LD_INT 3
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 3
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 3
50007: NEG
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 3
50019: NEG
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50060: LD_ADDR_VAR 0 43
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 3
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: LD_INT 3
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 3
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50408: LD_ADDR_VAR 0 44
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 2
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: LD_INT 3
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 3
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 3
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: LD_INT 3
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: LD_INT 3
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 3
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 3
50705: NEG
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 3
50717: NEG
50718: PUSH
50719: LD_INT 3
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50758: LD_ADDR_VAR 0 45
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: LD_INT 2
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: LD_INT 3
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 3
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 3
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: LD_INT 3
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: LD_INT 3
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: LD_INT 3
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 3
51055: NEG
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: LD_INT 3
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51108: LD_ADDR_VAR 0 46
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 2
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 2
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: LD_INT 3
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 3
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 3
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 3
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 3
51404: NEG
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 3
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51456: LD_ADDR_VAR 0 47
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51607: LD_ADDR_VAR 0 48
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51754: LD_ADDR_VAR 0 49
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51898: LD_ADDR_VAR 0 50
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52042: LD_ADDR_VAR 0 51
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52189: LD_ADDR_VAR 0 52
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: LD_INT 2
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52340: LD_ADDR_VAR 0 53
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52570: LD_ADDR_VAR 0 54
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 2
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52800: LD_ADDR_VAR 0 55
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53030: LD_ADDR_VAR 0 56
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53260: LD_ADDR_VAR 0 57
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53490: LD_ADDR_VAR 0 58
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53720: LD_ADDR_VAR 0 59
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53808: LD_ADDR_VAR 0 60
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53896: LD_ADDR_VAR 0 61
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53984: LD_ADDR_VAR 0 62
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54072: LD_ADDR_VAR 0 63
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54160: LD_ADDR_VAR 0 64
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: ST_TO_ADDR
// end ; 1 :
54248: GO 60145
54250: LD_INT 1
54252: DOUBLE
54253: EQUAL
54254: IFTRUE 54258
54256: GO 56881
54258: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54259: LD_ADDR_VAR 0 11
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 3
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 3
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54303: LD_ADDR_VAR 0 12
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 3
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 3
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: LIST
54343: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54344: LD_ADDR_VAR 0 13
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 3
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: LD_INT 3
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54384: LD_ADDR_VAR 0 14
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: LIST
54424: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54425: LD_ADDR_VAR 0 15
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54469: LD_ADDR_VAR 0 16
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 3
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 3
54488: NEG
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 3
54500: NEG
54501: PUSH
54502: LD_INT 3
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: LIST
54514: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54515: LD_ADDR_VAR 0 17
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 3
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 3
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: LIST
54558: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54559: LD_ADDR_VAR 0 18
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 3
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: LIST
54599: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54600: LD_ADDR_VAR 0 19
54604: PUSH
54605: LD_INT 3
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: LIST
54639: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54640: LD_ADDR_VAR 0 20
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 3
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54681: LD_ADDR_VAR 0 21
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: LIST
54724: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54725: LD_ADDR_VAR 0 22
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: LD_INT 3
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 3
54756: NEG
54757: PUSH
54758: LD_INT 3
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: LIST
54770: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54771: LD_ADDR_VAR 0 23
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 3
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: LD_INT 4
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 3
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54815: LD_ADDR_VAR 0 24
54819: PUSH
54820: LD_INT 3
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 3
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 4
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: LIST
54855: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54856: LD_ADDR_VAR 0 25
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 4
54873: PUSH
54874: LD_INT 3
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 4
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54896: LD_ADDR_VAR 0 26
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 3
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 4
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54937: LD_ADDR_VAR 0 27
54941: PUSH
54942: LD_INT 3
54944: NEG
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 3
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 4
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54981: LD_ADDR_VAR 0 28
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: LD_INT 3
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 3
55000: NEG
55001: PUSH
55002: LD_INT 4
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 4
55012: NEG
55013: PUSH
55014: LD_INT 3
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: LIST
55026: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55027: LD_ADDR_VAR 0 29
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 3
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 4
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 4
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 5
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 5
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 4
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 6
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 6
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 5
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55182: LD_ADDR_VAR 0 30
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 4
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 4
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 4
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 5
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 5
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 5
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 6
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 6
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55325: LD_ADDR_VAR 0 31
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: LD_INT 3
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: LD_INT 3
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 4
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 4
55372: PUSH
55373: LD_INT 4
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 3
55382: PUSH
55383: LD_INT 4
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 5
55392: PUSH
55393: LD_INT 4
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 5
55402: PUSH
55403: LD_INT 5
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 4
55412: PUSH
55413: LD_INT 5
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 6
55422: PUSH
55423: LD_INT 5
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 6
55432: PUSH
55433: LD_INT 6
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 5
55442: PUSH
55443: LD_INT 6
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55464: LD_ADDR_VAR 0 32
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: LD_INT 3
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 3
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 4
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: LD_INT 4
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 3
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: LD_INT 5
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 5
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 4
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 6
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 6
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 5
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55607: LD_ADDR_VAR 0 33
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 3
55625: NEG
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 3
55636: NEG
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 3
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 4
55659: NEG
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 4
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 4
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 5
55693: NEG
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 5
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 5
55716: NEG
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 6
55727: NEG
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 6
55738: NEG
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55762: LD_ADDR_VAR 0 34
55766: PUSH
55767: LD_INT 2
55769: NEG
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 3
55781: NEG
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 3
55793: NEG
55794: PUSH
55795: LD_INT 3
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: NEG
55806: PUSH
55807: LD_INT 4
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 4
55817: NEG
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 4
55829: NEG
55830: PUSH
55831: LD_INT 4
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 4
55841: NEG
55842: PUSH
55843: LD_INT 5
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 5
55853: NEG
55854: PUSH
55855: LD_INT 4
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 5
55865: NEG
55866: PUSH
55867: LD_INT 5
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 5
55877: NEG
55878: PUSH
55879: LD_INT 6
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 6
55889: NEG
55890: PUSH
55891: LD_INT 5
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 6
55901: NEG
55902: PUSH
55903: LD_INT 6
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55925: LD_ADDR_VAR 0 41
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 3
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 2
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: LIST
55968: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55969: LD_ADDR_VAR 0 42
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56010: LD_ADDR_VAR 0 43
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: LD_INT 2
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 3
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: LD_INT 3
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: LIST
56049: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56050: LD_ADDR_VAR 0 44
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 3
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: LIST
56090: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56091: LD_ADDR_VAR 0 45
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 3
56120: NEG
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: LIST
56134: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56135: LD_ADDR_VAR 0 46
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56181: LD_ADDR_VAR 0 47
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: LD_INT 3
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 3
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56214: LD_ADDR_VAR 0 48
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56245: LD_ADDR_VAR 0 49
56249: PUSH
56250: LD_INT 3
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 3
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56274: LD_ADDR_VAR 0 50
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: LD_INT 3
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 3
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56303: LD_ADDR_VAR 0 51
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56334: LD_ADDR_VAR 0 52
56338: PUSH
56339: LD_INT 3
56341: NEG
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 3
56353: NEG
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56367: LD_ADDR_VAR 0 53
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 3
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 3
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: LIST
56410: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56411: LD_ADDR_VAR 0 54
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 3
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56452: LD_ADDR_VAR 0 55
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 3
56469: PUSH
56470: LD_INT 3
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: LD_INT 3
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56492: LD_ADDR_VAR 0 56
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 3
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 3
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56533: LD_ADDR_VAR 0 57
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 3
56551: NEG
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 3
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: LIST
56576: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56577: LD_ADDR_VAR 0 58
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: LD_INT 3
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 3
56596: NEG
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 3
56608: NEG
56609: PUSH
56610: LD_INT 3
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: LIST
56622: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56623: LD_ADDR_VAR 0 59
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: LIST
56666: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56667: LD_ADDR_VAR 0 60
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56708: LD_ADDR_VAR 0 61
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: LIST
56747: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56748: LD_ADDR_VAR 0 62
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: LIST
56788: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56789: LD_ADDR_VAR 0 63
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56833: LD_ADDR_VAR 0 64
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 2
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: LIST
56878: ST_TO_ADDR
// end ; 2 :
56879: GO 60145
56881: LD_INT 2
56883: DOUBLE
56884: EQUAL
56885: IFTRUE 56889
56887: GO 60144
56889: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56890: LD_ADDR_VAR 0 29
56894: PUSH
56895: LD_INT 4
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 4
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 5
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 5
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 4
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 3
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 5
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 3
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 4
57010: PUSH
57011: LD_INT 3
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 4
57020: PUSH
57021: LD_INT 4
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: PUSH
57031: LD_INT 4
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: LD_INT 3
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 4
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 4
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 4
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 4
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 5
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 5
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: LD_INT 4
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: LD_INT 5
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: LD_INT 3
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 3
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 4
57229: NEG
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 4
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 4
57252: NEG
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 4
57275: NEG
57276: PUSH
57277: LD_INT 4
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 4
57287: NEG
57288: PUSH
57289: LD_INT 5
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 3
57299: NEG
57300: PUSH
57301: LD_INT 4
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 3
57311: NEG
57312: PUSH
57313: LD_INT 3
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 4
57323: NEG
57324: PUSH
57325: LD_INT 3
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 5
57335: NEG
57336: PUSH
57337: LD_INT 4
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 5
57347: NEG
57348: PUSH
57349: LD_INT 5
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 3
57359: NEG
57360: PUSH
57361: LD_INT 5
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 5
57371: NEG
57372: PUSH
57373: LD_INT 3
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57428: LD_ADDR_VAR 0 30
57432: PUSH
57433: LD_INT 4
57435: PUSH
57436: LD_INT 4
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 4
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: PUSH
57456: LD_INT 4
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 5
57465: PUSH
57466: LD_INT 5
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 4
57475: PUSH
57476: LD_INT 5
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 3
57485: PUSH
57486: LD_INT 4
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 5
57505: PUSH
57506: LD_INT 3
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: LD_INT 5
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 3
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 2
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 4
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 4
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: LD_INT 4
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 2
57607: NEG
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 4
57618: NEG
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 4
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 3
57652: NEG
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 4
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 5
57674: NEG
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 5
57685: NEG
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 5
57697: NEG
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 3
57709: NEG
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: LD_INT 3
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: LD_INT 4
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: LD_INT 3
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: LD_INT 2
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: LD_INT 2
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 4
57780: NEG
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 4
57792: NEG
57793: PUSH
57794: LD_INT 4
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: LD_INT 4
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 4
57816: NEG
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 4
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: LD_INT 5
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: LD_INT 4
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 3
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 4
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 5
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: LD_INT 3
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: LD_INT 5
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57975: LD_ADDR_VAR 0 31
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 4
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 4
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 5
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: LD_INT 5
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 4
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: LD_INT 5
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: LD_INT 3
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 3
58120: NEG
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 4
58131: NEG
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 4
58142: NEG
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 4
58154: NEG
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 4
58177: NEG
58178: PUSH
58179: LD_INT 4
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 4
58189: NEG
58190: PUSH
58191: LD_INT 5
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: LD_INT 4
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: LD_INT 3
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 4
58225: NEG
58226: PUSH
58227: LD_INT 3
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 5
58237: NEG
58238: PUSH
58239: LD_INT 4
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 5
58249: NEG
58250: PUSH
58251: LD_INT 5
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 3
58261: NEG
58262: PUSH
58263: LD_INT 5
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 5
58273: NEG
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 4
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: LD_INT 3
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 4
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 4
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 4
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 4
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 5
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 5
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 4
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: LD_INT 2
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 5
58470: PUSH
58471: LD_INT 2
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58525: LD_ADDR_VAR 0 32
58529: PUSH
58530: LD_INT 4
58532: NEG
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 4
58543: NEG
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 3
58555: NEG
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 3
58566: NEG
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 4
58577: NEG
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 5
58588: NEG
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 5
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 5
58611: NEG
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: NEG
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 3
58634: NEG
58635: PUSH
58636: LD_INT 3
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 3
58646: NEG
58647: PUSH
58648: LD_INT 4
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: LD_INT 3
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 3
58682: NEG
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 4
58694: NEG
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 4
58706: NEG
58707: PUSH
58708: LD_INT 4
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: LD_INT 4
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 4
58730: NEG
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: LD_INT 4
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 5
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 4
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: LD_INT 3
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: LD_INT 4
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 5
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 5
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 4
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 4
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 3
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 4
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 4
58937: PUSH
58938: LD_INT 4
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 4
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 5
58957: PUSH
58958: LD_INT 4
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 5
58967: PUSH
58968: LD_INT 5
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 4
58977: PUSH
58978: LD_INT 5
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 3
58987: PUSH
58988: LD_INT 4
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: LD_INT 3
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 5
59007: PUSH
59008: LD_INT 3
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 3
59017: PUSH
59018: LD_INT 5
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59072: LD_ADDR_VAR 0 33
59076: PUSH
59077: LD_INT 4
59079: NEG
59080: PUSH
59081: LD_INT 4
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 4
59091: NEG
59092: PUSH
59093: LD_INT 5
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: NEG
59104: PUSH
59105: LD_INT 4
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 3
59115: NEG
59116: PUSH
59117: LD_INT 3
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 4
59127: NEG
59128: PUSH
59129: LD_INT 3
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 5
59139: NEG
59140: PUSH
59141: LD_INT 4
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 5
59151: NEG
59152: PUSH
59153: LD_INT 5
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 3
59163: NEG
59164: PUSH
59165: LD_INT 5
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 5
59175: NEG
59176: PUSH
59177: LD_INT 3
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: LD_INT 3
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 4
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: LD_INT 4
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 4
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 4
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 4
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 5
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 5
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 4
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 5
59372: PUSH
59373: LD_INT 2
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 3
59382: PUSH
59383: LD_INT 3
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 4
59402: PUSH
59403: LD_INT 3
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 4
59412: PUSH
59413: LD_INT 4
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: LD_INT 4
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 4
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: LD_INT 4
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 4
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: LD_INT 4
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: LD_INT 5
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 5
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: LD_INT 4
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 2
59544: PUSH
59545: LD_INT 5
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 2
59554: NEG
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59610: LD_ADDR_VAR 0 34
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 4
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: LD_INT 5
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 3
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 3
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: LD_INT 4
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 5
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: LD_INT 3
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: LD_INT 5
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 3
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 4
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 4
59812: PUSH
59813: LD_INT 4
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 4
59822: PUSH
59823: LD_INT 3
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 5
59832: PUSH
59833: LD_INT 4
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 5
59842: PUSH
59843: LD_INT 5
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 4
59852: PUSH
59853: LD_INT 5
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: LD_INT 4
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: LD_INT 3
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 5
59882: PUSH
59883: LD_INT 3
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 3
59892: PUSH
59893: LD_INT 5
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 3
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 2
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: LD_INT 3
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: LD_INT 4
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 4
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: LD_INT 3
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 4
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: NEG
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 4
59995: NEG
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 4
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 3
60029: NEG
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 4
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 5
60051: NEG
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 5
60062: NEG
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 5
60074: NEG
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: ST_TO_ADDR
// end ; end ;
60142: GO 60145
60144: POP
// case btype of b_depot , b_warehouse :
60145: LD_VAR 0 1
60149: PUSH
60150: LD_INT 0
60152: DOUBLE
60153: EQUAL
60154: IFTRUE 60164
60156: LD_INT 1
60158: DOUBLE
60159: EQUAL
60160: IFTRUE 60164
60162: GO 60365
60164: POP
// case nation of nation_american :
60165: LD_VAR 0 5
60169: PUSH
60170: LD_INT 1
60172: DOUBLE
60173: EQUAL
60174: IFTRUE 60178
60176: GO 60234
60178: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60179: LD_ADDR_VAR 0 9
60183: PUSH
60184: LD_VAR 0 11
60188: PUSH
60189: LD_VAR 0 12
60193: PUSH
60194: LD_VAR 0 13
60198: PUSH
60199: LD_VAR 0 14
60203: PUSH
60204: LD_VAR 0 15
60208: PUSH
60209: LD_VAR 0 16
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: PUSH
60222: LD_VAR 0 4
60226: PUSH
60227: LD_INT 1
60229: PLUS
60230: ARRAY
60231: ST_TO_ADDR
60232: GO 60363
60234: LD_INT 2
60236: DOUBLE
60237: EQUAL
60238: IFTRUE 60242
60240: GO 60298
60242: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60243: LD_ADDR_VAR 0 9
60247: PUSH
60248: LD_VAR 0 17
60252: PUSH
60253: LD_VAR 0 18
60257: PUSH
60258: LD_VAR 0 19
60262: PUSH
60263: LD_VAR 0 20
60267: PUSH
60268: LD_VAR 0 21
60272: PUSH
60273: LD_VAR 0 22
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: PUSH
60286: LD_VAR 0 4
60290: PUSH
60291: LD_INT 1
60293: PLUS
60294: ARRAY
60295: ST_TO_ADDR
60296: GO 60363
60298: LD_INT 3
60300: DOUBLE
60301: EQUAL
60302: IFTRUE 60306
60304: GO 60362
60306: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60307: LD_ADDR_VAR 0 9
60311: PUSH
60312: LD_VAR 0 23
60316: PUSH
60317: LD_VAR 0 24
60321: PUSH
60322: LD_VAR 0 25
60326: PUSH
60327: LD_VAR 0 26
60331: PUSH
60332: LD_VAR 0 27
60336: PUSH
60337: LD_VAR 0 28
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: PUSH
60350: LD_VAR 0 4
60354: PUSH
60355: LD_INT 1
60357: PLUS
60358: ARRAY
60359: ST_TO_ADDR
60360: GO 60363
60362: POP
60363: GO 60918
60365: LD_INT 2
60367: DOUBLE
60368: EQUAL
60369: IFTRUE 60379
60371: LD_INT 3
60373: DOUBLE
60374: EQUAL
60375: IFTRUE 60379
60377: GO 60435
60379: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60380: LD_ADDR_VAR 0 9
60384: PUSH
60385: LD_VAR 0 29
60389: PUSH
60390: LD_VAR 0 30
60394: PUSH
60395: LD_VAR 0 31
60399: PUSH
60400: LD_VAR 0 32
60404: PUSH
60405: LD_VAR 0 33
60409: PUSH
60410: LD_VAR 0 34
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: PUSH
60423: LD_VAR 0 4
60427: PUSH
60428: LD_INT 1
60430: PLUS
60431: ARRAY
60432: ST_TO_ADDR
60433: GO 60918
60435: LD_INT 16
60437: DOUBLE
60438: EQUAL
60439: IFTRUE 60497
60441: LD_INT 17
60443: DOUBLE
60444: EQUAL
60445: IFTRUE 60497
60447: LD_INT 18
60449: DOUBLE
60450: EQUAL
60451: IFTRUE 60497
60453: LD_INT 19
60455: DOUBLE
60456: EQUAL
60457: IFTRUE 60497
60459: LD_INT 22
60461: DOUBLE
60462: EQUAL
60463: IFTRUE 60497
60465: LD_INT 20
60467: DOUBLE
60468: EQUAL
60469: IFTRUE 60497
60471: LD_INT 21
60473: DOUBLE
60474: EQUAL
60475: IFTRUE 60497
60477: LD_INT 23
60479: DOUBLE
60480: EQUAL
60481: IFTRUE 60497
60483: LD_INT 24
60485: DOUBLE
60486: EQUAL
60487: IFTRUE 60497
60489: LD_INT 25
60491: DOUBLE
60492: EQUAL
60493: IFTRUE 60497
60495: GO 60553
60497: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60498: LD_ADDR_VAR 0 9
60502: PUSH
60503: LD_VAR 0 35
60507: PUSH
60508: LD_VAR 0 36
60512: PUSH
60513: LD_VAR 0 37
60517: PUSH
60518: LD_VAR 0 38
60522: PUSH
60523: LD_VAR 0 39
60527: PUSH
60528: LD_VAR 0 40
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: PUSH
60541: LD_VAR 0 4
60545: PUSH
60546: LD_INT 1
60548: PLUS
60549: ARRAY
60550: ST_TO_ADDR
60551: GO 60918
60553: LD_INT 6
60555: DOUBLE
60556: EQUAL
60557: IFTRUE 60609
60559: LD_INT 7
60561: DOUBLE
60562: EQUAL
60563: IFTRUE 60609
60565: LD_INT 8
60567: DOUBLE
60568: EQUAL
60569: IFTRUE 60609
60571: LD_INT 13
60573: DOUBLE
60574: EQUAL
60575: IFTRUE 60609
60577: LD_INT 12
60579: DOUBLE
60580: EQUAL
60581: IFTRUE 60609
60583: LD_INT 15
60585: DOUBLE
60586: EQUAL
60587: IFTRUE 60609
60589: LD_INT 11
60591: DOUBLE
60592: EQUAL
60593: IFTRUE 60609
60595: LD_INT 14
60597: DOUBLE
60598: EQUAL
60599: IFTRUE 60609
60601: LD_INT 10
60603: DOUBLE
60604: EQUAL
60605: IFTRUE 60609
60607: GO 60665
60609: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60610: LD_ADDR_VAR 0 9
60614: PUSH
60615: LD_VAR 0 41
60619: PUSH
60620: LD_VAR 0 42
60624: PUSH
60625: LD_VAR 0 43
60629: PUSH
60630: LD_VAR 0 44
60634: PUSH
60635: LD_VAR 0 45
60639: PUSH
60640: LD_VAR 0 46
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: PUSH
60653: LD_VAR 0 4
60657: PUSH
60658: LD_INT 1
60660: PLUS
60661: ARRAY
60662: ST_TO_ADDR
60663: GO 60918
60665: LD_INT 36
60667: DOUBLE
60668: EQUAL
60669: IFTRUE 60673
60671: GO 60729
60673: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60674: LD_ADDR_VAR 0 9
60678: PUSH
60679: LD_VAR 0 47
60683: PUSH
60684: LD_VAR 0 48
60688: PUSH
60689: LD_VAR 0 49
60693: PUSH
60694: LD_VAR 0 50
60698: PUSH
60699: LD_VAR 0 51
60703: PUSH
60704: LD_VAR 0 52
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: PUSH
60717: LD_VAR 0 4
60721: PUSH
60722: LD_INT 1
60724: PLUS
60725: ARRAY
60726: ST_TO_ADDR
60727: GO 60918
60729: LD_INT 4
60731: DOUBLE
60732: EQUAL
60733: IFTRUE 60755
60735: LD_INT 5
60737: DOUBLE
60738: EQUAL
60739: IFTRUE 60755
60741: LD_INT 34
60743: DOUBLE
60744: EQUAL
60745: IFTRUE 60755
60747: LD_INT 37
60749: DOUBLE
60750: EQUAL
60751: IFTRUE 60755
60753: GO 60811
60755: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60756: LD_ADDR_VAR 0 9
60760: PUSH
60761: LD_VAR 0 53
60765: PUSH
60766: LD_VAR 0 54
60770: PUSH
60771: LD_VAR 0 55
60775: PUSH
60776: LD_VAR 0 56
60780: PUSH
60781: LD_VAR 0 57
60785: PUSH
60786: LD_VAR 0 58
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: PUSH
60799: LD_VAR 0 4
60803: PUSH
60804: LD_INT 1
60806: PLUS
60807: ARRAY
60808: ST_TO_ADDR
60809: GO 60918
60811: LD_INT 31
60813: DOUBLE
60814: EQUAL
60815: IFTRUE 60861
60817: LD_INT 32
60819: DOUBLE
60820: EQUAL
60821: IFTRUE 60861
60823: LD_INT 33
60825: DOUBLE
60826: EQUAL
60827: IFTRUE 60861
60829: LD_INT 27
60831: DOUBLE
60832: EQUAL
60833: IFTRUE 60861
60835: LD_INT 26
60837: DOUBLE
60838: EQUAL
60839: IFTRUE 60861
60841: LD_INT 28
60843: DOUBLE
60844: EQUAL
60845: IFTRUE 60861
60847: LD_INT 29
60849: DOUBLE
60850: EQUAL
60851: IFTRUE 60861
60853: LD_INT 30
60855: DOUBLE
60856: EQUAL
60857: IFTRUE 60861
60859: GO 60917
60861: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60862: LD_ADDR_VAR 0 9
60866: PUSH
60867: LD_VAR 0 59
60871: PUSH
60872: LD_VAR 0 60
60876: PUSH
60877: LD_VAR 0 61
60881: PUSH
60882: LD_VAR 0 62
60886: PUSH
60887: LD_VAR 0 63
60891: PUSH
60892: LD_VAR 0 64
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: PUSH
60905: LD_VAR 0 4
60909: PUSH
60910: LD_INT 1
60912: PLUS
60913: ARRAY
60914: ST_TO_ADDR
60915: GO 60918
60917: POP
// temp_list2 = [ ] ;
60918: LD_ADDR_VAR 0 10
60922: PUSH
60923: EMPTY
60924: ST_TO_ADDR
// for i in temp_list do
60925: LD_ADDR_VAR 0 8
60929: PUSH
60930: LD_VAR 0 9
60934: PUSH
60935: FOR_IN
60936: IFFALSE 60988
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60938: LD_ADDR_VAR 0 10
60942: PUSH
60943: LD_VAR 0 10
60947: PUSH
60948: LD_VAR 0 8
60952: PUSH
60953: LD_INT 1
60955: ARRAY
60956: PUSH
60957: LD_VAR 0 2
60961: PLUS
60962: PUSH
60963: LD_VAR 0 8
60967: PUSH
60968: LD_INT 2
60970: ARRAY
60971: PUSH
60972: LD_VAR 0 3
60976: PLUS
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: EMPTY
60983: LIST
60984: ADD
60985: ST_TO_ADDR
60986: GO 60935
60988: POP
60989: POP
// result = temp_list2 ;
60990: LD_ADDR_VAR 0 7
60994: PUSH
60995: LD_VAR 0 10
60999: ST_TO_ADDR
// end ;
61000: LD_VAR 0 7
61004: RET
// export function EnemyInRange ( unit , dist ) ; begin
61005: LD_INT 0
61007: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61008: LD_ADDR_VAR 0 3
61012: PUSH
61013: LD_VAR 0 1
61017: PPUSH
61018: CALL_OW 255
61022: PPUSH
61023: LD_VAR 0 1
61027: PPUSH
61028: CALL_OW 250
61032: PPUSH
61033: LD_VAR 0 1
61037: PPUSH
61038: CALL_OW 251
61042: PPUSH
61043: LD_VAR 0 2
61047: PPUSH
61048: CALL 35109 0 4
61052: PUSH
61053: LD_INT 4
61055: ARRAY
61056: ST_TO_ADDR
// end ;
61057: LD_VAR 0 3
61061: RET
// export function PlayerSeeMe ( unit ) ; begin
61062: LD_INT 0
61064: PPUSH
// result := See ( your_side , unit ) ;
61065: LD_ADDR_VAR 0 2
61069: PUSH
61070: LD_OWVAR 2
61074: PPUSH
61075: LD_VAR 0 1
61079: PPUSH
61080: CALL_OW 292
61084: ST_TO_ADDR
// end ;
61085: LD_VAR 0 2
61089: RET
// export function ReverseDir ( unit ) ; begin
61090: LD_INT 0
61092: PPUSH
// if not unit then
61093: LD_VAR 0 1
61097: NOT
61098: IFFALSE 61102
// exit ;
61100: GO 61125
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61102: LD_ADDR_VAR 0 2
61106: PUSH
61107: LD_VAR 0 1
61111: PPUSH
61112: CALL_OW 254
61116: PUSH
61117: LD_INT 3
61119: PLUS
61120: PUSH
61121: LD_INT 6
61123: MOD
61124: ST_TO_ADDR
// end ;
61125: LD_VAR 0 2
61129: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61130: LD_INT 0
61132: PPUSH
61133: PPUSH
61134: PPUSH
61135: PPUSH
61136: PPUSH
// if not hexes then
61137: LD_VAR 0 2
61141: NOT
61142: IFFALSE 61146
// exit ;
61144: GO 61294
// dist := 9999 ;
61146: LD_ADDR_VAR 0 5
61150: PUSH
61151: LD_INT 9999
61153: ST_TO_ADDR
// for i = 1 to hexes do
61154: LD_ADDR_VAR 0 4
61158: PUSH
61159: DOUBLE
61160: LD_INT 1
61162: DEC
61163: ST_TO_ADDR
61164: LD_VAR 0 2
61168: PUSH
61169: FOR_TO
61170: IFFALSE 61282
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61172: LD_VAR 0 1
61176: PPUSH
61177: LD_VAR 0 2
61181: PUSH
61182: LD_VAR 0 4
61186: ARRAY
61187: PUSH
61188: LD_INT 1
61190: ARRAY
61191: PPUSH
61192: LD_VAR 0 2
61196: PUSH
61197: LD_VAR 0 4
61201: ARRAY
61202: PUSH
61203: LD_INT 2
61205: ARRAY
61206: PPUSH
61207: CALL_OW 297
61211: PUSH
61212: LD_VAR 0 5
61216: LESS
61217: IFFALSE 61280
// begin hex := hexes [ i ] ;
61219: LD_ADDR_VAR 0 7
61223: PUSH
61224: LD_VAR 0 2
61228: PUSH
61229: LD_VAR 0 4
61233: ARRAY
61234: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61235: LD_ADDR_VAR 0 5
61239: PUSH
61240: LD_VAR 0 1
61244: PPUSH
61245: LD_VAR 0 2
61249: PUSH
61250: LD_VAR 0 4
61254: ARRAY
61255: PUSH
61256: LD_INT 1
61258: ARRAY
61259: PPUSH
61260: LD_VAR 0 2
61264: PUSH
61265: LD_VAR 0 4
61269: ARRAY
61270: PUSH
61271: LD_INT 2
61273: ARRAY
61274: PPUSH
61275: CALL_OW 297
61279: ST_TO_ADDR
// end ; end ;
61280: GO 61169
61282: POP
61283: POP
// result := hex ;
61284: LD_ADDR_VAR 0 3
61288: PUSH
61289: LD_VAR 0 7
61293: ST_TO_ADDR
// end ;
61294: LD_VAR 0 3
61298: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61299: LD_INT 0
61301: PPUSH
61302: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61303: LD_VAR 0 1
61307: NOT
61308: PUSH
61309: LD_VAR 0 1
61313: PUSH
61314: LD_INT 21
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 23
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PPUSH
61338: CALL_OW 69
61342: IN
61343: NOT
61344: OR
61345: IFFALSE 61349
// exit ;
61347: GO 61396
// for i = 1 to 3 do
61349: LD_ADDR_VAR 0 3
61353: PUSH
61354: DOUBLE
61355: LD_INT 1
61357: DEC
61358: ST_TO_ADDR
61359: LD_INT 3
61361: PUSH
61362: FOR_TO
61363: IFFALSE 61394
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61365: LD_VAR 0 1
61369: PPUSH
61370: CALL_OW 250
61374: PPUSH
61375: LD_VAR 0 1
61379: PPUSH
61380: CALL_OW 251
61384: PPUSH
61385: LD_INT 1
61387: PPUSH
61388: CALL_OW 453
61392: GO 61362
61394: POP
61395: POP
// end ;
61396: LD_VAR 0 2
61400: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61401: LD_INT 0
61403: PPUSH
61404: PPUSH
61405: PPUSH
61406: PPUSH
61407: PPUSH
61408: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61409: LD_VAR 0 1
61413: NOT
61414: PUSH
61415: LD_VAR 0 2
61419: NOT
61420: OR
61421: PUSH
61422: LD_VAR 0 1
61426: PPUSH
61427: CALL_OW 314
61431: OR
61432: IFFALSE 61436
// exit ;
61434: GO 61877
// x := GetX ( enemy_unit ) ;
61436: LD_ADDR_VAR 0 7
61440: PUSH
61441: LD_VAR 0 2
61445: PPUSH
61446: CALL_OW 250
61450: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61451: LD_ADDR_VAR 0 8
61455: PUSH
61456: LD_VAR 0 2
61460: PPUSH
61461: CALL_OW 251
61465: ST_TO_ADDR
// if not x or not y then
61466: LD_VAR 0 7
61470: NOT
61471: PUSH
61472: LD_VAR 0 8
61476: NOT
61477: OR
61478: IFFALSE 61482
// exit ;
61480: GO 61877
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61482: LD_ADDR_VAR 0 6
61486: PUSH
61487: LD_VAR 0 7
61491: PPUSH
61492: LD_INT 0
61494: PPUSH
61495: LD_INT 4
61497: PPUSH
61498: CALL_OW 272
61502: PUSH
61503: LD_VAR 0 8
61507: PPUSH
61508: LD_INT 0
61510: PPUSH
61511: LD_INT 4
61513: PPUSH
61514: CALL_OW 273
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_VAR 0 7
61527: PPUSH
61528: LD_INT 1
61530: PPUSH
61531: LD_INT 4
61533: PPUSH
61534: CALL_OW 272
61538: PUSH
61539: LD_VAR 0 8
61543: PPUSH
61544: LD_INT 1
61546: PPUSH
61547: LD_INT 4
61549: PPUSH
61550: CALL_OW 273
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_VAR 0 7
61563: PPUSH
61564: LD_INT 2
61566: PPUSH
61567: LD_INT 4
61569: PPUSH
61570: CALL_OW 272
61574: PUSH
61575: LD_VAR 0 8
61579: PPUSH
61580: LD_INT 2
61582: PPUSH
61583: LD_INT 4
61585: PPUSH
61586: CALL_OW 273
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_VAR 0 7
61599: PPUSH
61600: LD_INT 3
61602: PPUSH
61603: LD_INT 4
61605: PPUSH
61606: CALL_OW 272
61610: PUSH
61611: LD_VAR 0 8
61615: PPUSH
61616: LD_INT 3
61618: PPUSH
61619: LD_INT 4
61621: PPUSH
61622: CALL_OW 273
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_VAR 0 7
61635: PPUSH
61636: LD_INT 4
61638: PPUSH
61639: LD_INT 4
61641: PPUSH
61642: CALL_OW 272
61646: PUSH
61647: LD_VAR 0 8
61651: PPUSH
61652: LD_INT 4
61654: PPUSH
61655: LD_INT 4
61657: PPUSH
61658: CALL_OW 273
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_VAR 0 7
61671: PPUSH
61672: LD_INT 5
61674: PPUSH
61675: LD_INT 4
61677: PPUSH
61678: CALL_OW 272
61682: PUSH
61683: LD_VAR 0 8
61687: PPUSH
61688: LD_INT 5
61690: PPUSH
61691: LD_INT 4
61693: PPUSH
61694: CALL_OW 273
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: ST_TO_ADDR
// for i = tmp downto 1 do
61711: LD_ADDR_VAR 0 4
61715: PUSH
61716: DOUBLE
61717: LD_VAR 0 6
61721: INC
61722: ST_TO_ADDR
61723: LD_INT 1
61725: PUSH
61726: FOR_DOWNTO
61727: IFFALSE 61828
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61729: LD_VAR 0 6
61733: PUSH
61734: LD_VAR 0 4
61738: ARRAY
61739: PUSH
61740: LD_INT 1
61742: ARRAY
61743: PPUSH
61744: LD_VAR 0 6
61748: PUSH
61749: LD_VAR 0 4
61753: ARRAY
61754: PUSH
61755: LD_INT 2
61757: ARRAY
61758: PPUSH
61759: CALL_OW 488
61763: NOT
61764: PUSH
61765: LD_VAR 0 6
61769: PUSH
61770: LD_VAR 0 4
61774: ARRAY
61775: PUSH
61776: LD_INT 1
61778: ARRAY
61779: PPUSH
61780: LD_VAR 0 6
61784: PUSH
61785: LD_VAR 0 4
61789: ARRAY
61790: PUSH
61791: LD_INT 2
61793: ARRAY
61794: PPUSH
61795: CALL_OW 428
61799: PUSH
61800: LD_INT 0
61802: NONEQUAL
61803: OR
61804: IFFALSE 61826
// tmp := Delete ( tmp , i ) ;
61806: LD_ADDR_VAR 0 6
61810: PUSH
61811: LD_VAR 0 6
61815: PPUSH
61816: LD_VAR 0 4
61820: PPUSH
61821: CALL_OW 3
61825: ST_TO_ADDR
61826: GO 61726
61828: POP
61829: POP
// j := GetClosestHex ( unit , tmp ) ;
61830: LD_ADDR_VAR 0 5
61834: PUSH
61835: LD_VAR 0 1
61839: PPUSH
61840: LD_VAR 0 6
61844: PPUSH
61845: CALL 61130 0 2
61849: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61850: LD_VAR 0 1
61854: PPUSH
61855: LD_VAR 0 5
61859: PUSH
61860: LD_INT 1
61862: ARRAY
61863: PPUSH
61864: LD_VAR 0 5
61868: PUSH
61869: LD_INT 2
61871: ARRAY
61872: PPUSH
61873: CALL_OW 111
// end ;
61877: LD_VAR 0 3
61881: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61882: LD_INT 0
61884: PPUSH
61885: PPUSH
61886: PPUSH
// uc_side = 0 ;
61887: LD_ADDR_OWVAR 20
61891: PUSH
61892: LD_INT 0
61894: ST_TO_ADDR
// uc_nation = 0 ;
61895: LD_ADDR_OWVAR 21
61899: PUSH
61900: LD_INT 0
61902: ST_TO_ADDR
// InitHc_All ( ) ;
61903: CALL_OW 584
// InitVc ;
61907: CALL_OW 20
// if mastodonts then
61911: LD_VAR 0 6
61915: IFFALSE 61982
// for i = 1 to mastodonts do
61917: LD_ADDR_VAR 0 11
61921: PUSH
61922: DOUBLE
61923: LD_INT 1
61925: DEC
61926: ST_TO_ADDR
61927: LD_VAR 0 6
61931: PUSH
61932: FOR_TO
61933: IFFALSE 61980
// begin vc_chassis := 31 ;
61935: LD_ADDR_OWVAR 37
61939: PUSH
61940: LD_INT 31
61942: ST_TO_ADDR
// vc_control := control_rider ;
61943: LD_ADDR_OWVAR 38
61947: PUSH
61948: LD_INT 4
61950: ST_TO_ADDR
// animal := CreateVehicle ;
61951: LD_ADDR_VAR 0 12
61955: PUSH
61956: CALL_OW 45
61960: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61961: LD_VAR 0 12
61965: PPUSH
61966: LD_VAR 0 8
61970: PPUSH
61971: LD_INT 0
61973: PPUSH
61974: CALL 64170 0 3
// end ;
61978: GO 61932
61980: POP
61981: POP
// if horses then
61982: LD_VAR 0 5
61986: IFFALSE 62053
// for i = 1 to horses do
61988: LD_ADDR_VAR 0 11
61992: PUSH
61993: DOUBLE
61994: LD_INT 1
61996: DEC
61997: ST_TO_ADDR
61998: LD_VAR 0 5
62002: PUSH
62003: FOR_TO
62004: IFFALSE 62051
// begin hc_class := 21 ;
62006: LD_ADDR_OWVAR 28
62010: PUSH
62011: LD_INT 21
62013: ST_TO_ADDR
// hc_gallery :=  ;
62014: LD_ADDR_OWVAR 33
62018: PUSH
62019: LD_STRING 
62021: ST_TO_ADDR
// animal := CreateHuman ;
62022: LD_ADDR_VAR 0 12
62026: PUSH
62027: CALL_OW 44
62031: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62032: LD_VAR 0 12
62036: PPUSH
62037: LD_VAR 0 8
62041: PPUSH
62042: LD_INT 0
62044: PPUSH
62045: CALL 64170 0 3
// end ;
62049: GO 62003
62051: POP
62052: POP
// if birds then
62053: LD_VAR 0 1
62057: IFFALSE 62124
// for i = 1 to birds do
62059: LD_ADDR_VAR 0 11
62063: PUSH
62064: DOUBLE
62065: LD_INT 1
62067: DEC
62068: ST_TO_ADDR
62069: LD_VAR 0 1
62073: PUSH
62074: FOR_TO
62075: IFFALSE 62122
// begin hc_class = 18 ;
62077: LD_ADDR_OWVAR 28
62081: PUSH
62082: LD_INT 18
62084: ST_TO_ADDR
// hc_gallery =  ;
62085: LD_ADDR_OWVAR 33
62089: PUSH
62090: LD_STRING 
62092: ST_TO_ADDR
// animal := CreateHuman ;
62093: LD_ADDR_VAR 0 12
62097: PUSH
62098: CALL_OW 44
62102: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62103: LD_VAR 0 12
62107: PPUSH
62108: LD_VAR 0 8
62112: PPUSH
62113: LD_INT 0
62115: PPUSH
62116: CALL 64170 0 3
// end ;
62120: GO 62074
62122: POP
62123: POP
// if tigers then
62124: LD_VAR 0 2
62128: IFFALSE 62212
// for i = 1 to tigers do
62130: LD_ADDR_VAR 0 11
62134: PUSH
62135: DOUBLE
62136: LD_INT 1
62138: DEC
62139: ST_TO_ADDR
62140: LD_VAR 0 2
62144: PUSH
62145: FOR_TO
62146: IFFALSE 62210
// begin hc_class = class_tiger ;
62148: LD_ADDR_OWVAR 28
62152: PUSH
62153: LD_INT 14
62155: ST_TO_ADDR
// hc_gallery =  ;
62156: LD_ADDR_OWVAR 33
62160: PUSH
62161: LD_STRING 
62163: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62164: LD_ADDR_OWVAR 35
62168: PUSH
62169: LD_INT 7
62171: NEG
62172: PPUSH
62173: LD_INT 7
62175: PPUSH
62176: CALL_OW 12
62180: ST_TO_ADDR
// animal := CreateHuman ;
62181: LD_ADDR_VAR 0 12
62185: PUSH
62186: CALL_OW 44
62190: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62191: LD_VAR 0 12
62195: PPUSH
62196: LD_VAR 0 8
62200: PPUSH
62201: LD_INT 0
62203: PPUSH
62204: CALL 64170 0 3
// end ;
62208: GO 62145
62210: POP
62211: POP
// if apemans then
62212: LD_VAR 0 3
62216: IFFALSE 62339
// for i = 1 to apemans do
62218: LD_ADDR_VAR 0 11
62222: PUSH
62223: DOUBLE
62224: LD_INT 1
62226: DEC
62227: ST_TO_ADDR
62228: LD_VAR 0 3
62232: PUSH
62233: FOR_TO
62234: IFFALSE 62337
// begin hc_class = class_apeman ;
62236: LD_ADDR_OWVAR 28
62240: PUSH
62241: LD_INT 12
62243: ST_TO_ADDR
// hc_gallery =  ;
62244: LD_ADDR_OWVAR 33
62248: PUSH
62249: LD_STRING 
62251: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62252: LD_ADDR_OWVAR 35
62256: PUSH
62257: LD_INT 5
62259: NEG
62260: PPUSH
62261: LD_INT 5
62263: PPUSH
62264: CALL_OW 12
62268: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62269: LD_ADDR_OWVAR 31
62273: PUSH
62274: LD_INT 1
62276: PPUSH
62277: LD_INT 3
62279: PPUSH
62280: CALL_OW 12
62284: PUSH
62285: LD_INT 1
62287: PPUSH
62288: LD_INT 3
62290: PPUSH
62291: CALL_OW 12
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: ST_TO_ADDR
// animal := CreateHuman ;
62308: LD_ADDR_VAR 0 12
62312: PUSH
62313: CALL_OW 44
62317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62318: LD_VAR 0 12
62322: PPUSH
62323: LD_VAR 0 8
62327: PPUSH
62328: LD_INT 0
62330: PPUSH
62331: CALL 64170 0 3
// end ;
62335: GO 62233
62337: POP
62338: POP
// if enchidnas then
62339: LD_VAR 0 4
62343: IFFALSE 62410
// for i = 1 to enchidnas do
62345: LD_ADDR_VAR 0 11
62349: PUSH
62350: DOUBLE
62351: LD_INT 1
62353: DEC
62354: ST_TO_ADDR
62355: LD_VAR 0 4
62359: PUSH
62360: FOR_TO
62361: IFFALSE 62408
// begin hc_class = 13 ;
62363: LD_ADDR_OWVAR 28
62367: PUSH
62368: LD_INT 13
62370: ST_TO_ADDR
// hc_gallery =  ;
62371: LD_ADDR_OWVAR 33
62375: PUSH
62376: LD_STRING 
62378: ST_TO_ADDR
// animal := CreateHuman ;
62379: LD_ADDR_VAR 0 12
62383: PUSH
62384: CALL_OW 44
62388: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62389: LD_VAR 0 12
62393: PPUSH
62394: LD_VAR 0 8
62398: PPUSH
62399: LD_INT 0
62401: PPUSH
62402: CALL 64170 0 3
// end ;
62406: GO 62360
62408: POP
62409: POP
// if fishes then
62410: LD_VAR 0 7
62414: IFFALSE 62481
// for i = 1 to fishes do
62416: LD_ADDR_VAR 0 11
62420: PUSH
62421: DOUBLE
62422: LD_INT 1
62424: DEC
62425: ST_TO_ADDR
62426: LD_VAR 0 7
62430: PUSH
62431: FOR_TO
62432: IFFALSE 62479
// begin hc_class = 20 ;
62434: LD_ADDR_OWVAR 28
62438: PUSH
62439: LD_INT 20
62441: ST_TO_ADDR
// hc_gallery =  ;
62442: LD_ADDR_OWVAR 33
62446: PUSH
62447: LD_STRING 
62449: ST_TO_ADDR
// animal := CreateHuman ;
62450: LD_ADDR_VAR 0 12
62454: PUSH
62455: CALL_OW 44
62459: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62460: LD_VAR 0 12
62464: PPUSH
62465: LD_VAR 0 9
62469: PPUSH
62470: LD_INT 0
62472: PPUSH
62473: CALL 64170 0 3
// end ;
62477: GO 62431
62479: POP
62480: POP
// end ;
62481: LD_VAR 0 10
62485: RET
// export function WantHeal ( sci , unit ) ; begin
62486: LD_INT 0
62488: PPUSH
// if GetTaskList ( sci ) > 0 then
62489: LD_VAR 0 1
62493: PPUSH
62494: CALL_OW 437
62498: PUSH
62499: LD_INT 0
62501: GREATER
62502: IFFALSE 62572
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62504: LD_VAR 0 1
62508: PPUSH
62509: CALL_OW 437
62513: PUSH
62514: LD_INT 1
62516: ARRAY
62517: PUSH
62518: LD_INT 1
62520: ARRAY
62521: PUSH
62522: LD_STRING l
62524: EQUAL
62525: PUSH
62526: LD_VAR 0 1
62530: PPUSH
62531: CALL_OW 437
62535: PUSH
62536: LD_INT 1
62538: ARRAY
62539: PUSH
62540: LD_INT 4
62542: ARRAY
62543: PUSH
62544: LD_VAR 0 2
62548: EQUAL
62549: AND
62550: IFFALSE 62562
// result := true else
62552: LD_ADDR_VAR 0 3
62556: PUSH
62557: LD_INT 1
62559: ST_TO_ADDR
62560: GO 62570
// result := false ;
62562: LD_ADDR_VAR 0 3
62566: PUSH
62567: LD_INT 0
62569: ST_TO_ADDR
// end else
62570: GO 62580
// result := false ;
62572: LD_ADDR_VAR 0 3
62576: PUSH
62577: LD_INT 0
62579: ST_TO_ADDR
// end ;
62580: LD_VAR 0 3
62584: RET
// export function HealTarget ( sci ) ; begin
62585: LD_INT 0
62587: PPUSH
// if not sci then
62588: LD_VAR 0 1
62592: NOT
62593: IFFALSE 62597
// exit ;
62595: GO 62662
// result := 0 ;
62597: LD_ADDR_VAR 0 2
62601: PUSH
62602: LD_INT 0
62604: ST_TO_ADDR
// if GetTaskList ( sci ) then
62605: LD_VAR 0 1
62609: PPUSH
62610: CALL_OW 437
62614: IFFALSE 62662
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62616: LD_VAR 0 1
62620: PPUSH
62621: CALL_OW 437
62625: PUSH
62626: LD_INT 1
62628: ARRAY
62629: PUSH
62630: LD_INT 1
62632: ARRAY
62633: PUSH
62634: LD_STRING l
62636: EQUAL
62637: IFFALSE 62662
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62639: LD_ADDR_VAR 0 2
62643: PUSH
62644: LD_VAR 0 1
62648: PPUSH
62649: CALL_OW 437
62653: PUSH
62654: LD_INT 1
62656: ARRAY
62657: PUSH
62658: LD_INT 4
62660: ARRAY
62661: ST_TO_ADDR
// end ;
62662: LD_VAR 0 2
62666: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62667: LD_INT 0
62669: PPUSH
62670: PPUSH
62671: PPUSH
62672: PPUSH
// if not base_units then
62673: LD_VAR 0 1
62677: NOT
62678: IFFALSE 62682
// exit ;
62680: GO 62769
// result := false ;
62682: LD_ADDR_VAR 0 2
62686: PUSH
62687: LD_INT 0
62689: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62690: LD_ADDR_VAR 0 5
62694: PUSH
62695: LD_VAR 0 1
62699: PPUSH
62700: LD_INT 21
62702: PUSH
62703: LD_INT 3
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PPUSH
62710: CALL_OW 72
62714: ST_TO_ADDR
// if not tmp then
62715: LD_VAR 0 5
62719: NOT
62720: IFFALSE 62724
// exit ;
62722: GO 62769
// for i in tmp do
62724: LD_ADDR_VAR 0 3
62728: PUSH
62729: LD_VAR 0 5
62733: PUSH
62734: FOR_IN
62735: IFFALSE 62767
// begin result := EnemyInRange ( i , 22 ) ;
62737: LD_ADDR_VAR 0 2
62741: PUSH
62742: LD_VAR 0 3
62746: PPUSH
62747: LD_INT 22
62749: PPUSH
62750: CALL 61005 0 2
62754: ST_TO_ADDR
// if result then
62755: LD_VAR 0 2
62759: IFFALSE 62765
// exit ;
62761: POP
62762: POP
62763: GO 62769
// end ;
62765: GO 62734
62767: POP
62768: POP
// end ;
62769: LD_VAR 0 2
62773: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62774: LD_INT 0
62776: PPUSH
62777: PPUSH
// if not units then
62778: LD_VAR 0 1
62782: NOT
62783: IFFALSE 62787
// exit ;
62785: GO 62857
// result := [ ] ;
62787: LD_ADDR_VAR 0 3
62791: PUSH
62792: EMPTY
62793: ST_TO_ADDR
// for i in units do
62794: LD_ADDR_VAR 0 4
62798: PUSH
62799: LD_VAR 0 1
62803: PUSH
62804: FOR_IN
62805: IFFALSE 62855
// if GetTag ( i ) = tag then
62807: LD_VAR 0 4
62811: PPUSH
62812: CALL_OW 110
62816: PUSH
62817: LD_VAR 0 2
62821: EQUAL
62822: IFFALSE 62853
// result := Insert ( result , result + 1 , i ) ;
62824: LD_ADDR_VAR 0 3
62828: PUSH
62829: LD_VAR 0 3
62833: PPUSH
62834: LD_VAR 0 3
62838: PUSH
62839: LD_INT 1
62841: PLUS
62842: PPUSH
62843: LD_VAR 0 4
62847: PPUSH
62848: CALL_OW 2
62852: ST_TO_ADDR
62853: GO 62804
62855: POP
62856: POP
// end ;
62857: LD_VAR 0 3
62861: RET
// export function IsDriver ( un ) ; begin
62862: LD_INT 0
62864: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62865: LD_ADDR_VAR 0 2
62869: PUSH
62870: LD_VAR 0 1
62874: PUSH
62875: LD_INT 55
62877: PUSH
62878: EMPTY
62879: LIST
62880: PPUSH
62881: CALL_OW 69
62885: IN
62886: ST_TO_ADDR
// end ;
62887: LD_VAR 0 2
62891: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62892: LD_INT 0
62894: PPUSH
62895: PPUSH
// list := [ ] ;
62896: LD_ADDR_VAR 0 5
62900: PUSH
62901: EMPTY
62902: ST_TO_ADDR
// case d of 0 :
62903: LD_VAR 0 3
62907: PUSH
62908: LD_INT 0
62910: DOUBLE
62911: EQUAL
62912: IFTRUE 62916
62914: GO 63049
62916: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62917: LD_ADDR_VAR 0 5
62921: PUSH
62922: LD_VAR 0 1
62926: PUSH
62927: LD_INT 4
62929: MINUS
62930: PUSH
62931: LD_VAR 0 2
62935: PUSH
62936: LD_INT 4
62938: MINUS
62939: PUSH
62940: LD_INT 2
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: LIST
62947: PUSH
62948: LD_VAR 0 1
62952: PUSH
62953: LD_INT 3
62955: MINUS
62956: PUSH
62957: LD_VAR 0 2
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: LIST
62969: PUSH
62970: LD_VAR 0 1
62974: PUSH
62975: LD_INT 4
62977: PLUS
62978: PUSH
62979: LD_VAR 0 2
62983: PUSH
62984: LD_INT 4
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: PUSH
62992: LD_VAR 0 1
62996: PUSH
62997: LD_INT 3
62999: PLUS
63000: PUSH
63001: LD_VAR 0 2
63005: PUSH
63006: LD_INT 3
63008: PLUS
63009: PUSH
63010: LD_INT 5
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: LIST
63017: PUSH
63018: LD_VAR 0 1
63022: PUSH
63023: LD_VAR 0 2
63027: PUSH
63028: LD_INT 4
63030: PLUS
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: ST_TO_ADDR
// end ; 1 :
63047: GO 63747
63049: LD_INT 1
63051: DOUBLE
63052: EQUAL
63053: IFTRUE 63057
63055: GO 63190
63057: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63058: LD_ADDR_VAR 0 5
63062: PUSH
63063: LD_VAR 0 1
63067: PUSH
63068: LD_VAR 0 2
63072: PUSH
63073: LD_INT 4
63075: MINUS
63076: PUSH
63077: LD_INT 3
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: LIST
63084: PUSH
63085: LD_VAR 0 1
63089: PUSH
63090: LD_INT 3
63092: MINUS
63093: PUSH
63094: LD_VAR 0 2
63098: PUSH
63099: LD_INT 3
63101: MINUS
63102: PUSH
63103: LD_INT 2
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: LIST
63110: PUSH
63111: LD_VAR 0 1
63115: PUSH
63116: LD_INT 4
63118: MINUS
63119: PUSH
63120: LD_VAR 0 2
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: PUSH
63133: LD_VAR 0 1
63137: PUSH
63138: LD_VAR 0 2
63142: PUSH
63143: LD_INT 3
63145: PLUS
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: LIST
63154: PUSH
63155: LD_VAR 0 1
63159: PUSH
63160: LD_INT 4
63162: PLUS
63163: PUSH
63164: LD_VAR 0 2
63168: PUSH
63169: LD_INT 4
63171: PLUS
63172: PUSH
63173: LD_INT 5
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: ST_TO_ADDR
// end ; 2 :
63188: GO 63747
63190: LD_INT 2
63192: DOUBLE
63193: EQUAL
63194: IFTRUE 63198
63196: GO 63327
63198: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63199: LD_ADDR_VAR 0 5
63203: PUSH
63204: LD_VAR 0 1
63208: PUSH
63209: LD_VAR 0 2
63213: PUSH
63214: LD_INT 3
63216: MINUS
63217: PUSH
63218: LD_INT 3
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: PUSH
63226: LD_VAR 0 1
63230: PUSH
63231: LD_INT 4
63233: PLUS
63234: PUSH
63235: LD_VAR 0 2
63239: PUSH
63240: LD_INT 4
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: LIST
63247: PUSH
63248: LD_VAR 0 1
63252: PUSH
63253: LD_VAR 0 2
63257: PUSH
63258: LD_INT 4
63260: PLUS
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: LIST
63269: PUSH
63270: LD_VAR 0 1
63274: PUSH
63275: LD_INT 3
63277: MINUS
63278: PUSH
63279: LD_VAR 0 2
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: LIST
63291: PUSH
63292: LD_VAR 0 1
63296: PUSH
63297: LD_INT 4
63299: MINUS
63300: PUSH
63301: LD_VAR 0 2
63305: PUSH
63306: LD_INT 4
63308: MINUS
63309: PUSH
63310: LD_INT 2
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: ST_TO_ADDR
// end ; 3 :
63325: GO 63747
63327: LD_INT 3
63329: DOUBLE
63330: EQUAL
63331: IFTRUE 63335
63333: GO 63468
63335: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63336: LD_ADDR_VAR 0 5
63340: PUSH
63341: LD_VAR 0 1
63345: PUSH
63346: LD_INT 3
63348: PLUS
63349: PUSH
63350: LD_VAR 0 2
63354: PUSH
63355: LD_INT 4
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: LIST
63362: PUSH
63363: LD_VAR 0 1
63367: PUSH
63368: LD_INT 4
63370: PLUS
63371: PUSH
63372: LD_VAR 0 2
63376: PUSH
63377: LD_INT 4
63379: PLUS
63380: PUSH
63381: LD_INT 5
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: LIST
63388: PUSH
63389: LD_VAR 0 1
63393: PUSH
63394: LD_INT 4
63396: MINUS
63397: PUSH
63398: LD_VAR 0 2
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: LIST
63410: PUSH
63411: LD_VAR 0 1
63415: PUSH
63416: LD_VAR 0 2
63420: PUSH
63421: LD_INT 4
63423: MINUS
63424: PUSH
63425: LD_INT 3
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: LIST
63432: PUSH
63433: LD_VAR 0 1
63437: PUSH
63438: LD_INT 3
63440: MINUS
63441: PUSH
63442: LD_VAR 0 2
63446: PUSH
63447: LD_INT 3
63449: MINUS
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: LIST
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: ST_TO_ADDR
// end ; 4 :
63466: GO 63747
63468: LD_INT 4
63470: DOUBLE
63471: EQUAL
63472: IFTRUE 63476
63474: GO 63609
63476: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63477: LD_ADDR_VAR 0 5
63481: PUSH
63482: LD_VAR 0 1
63486: PUSH
63487: LD_VAR 0 2
63491: PUSH
63492: LD_INT 4
63494: PLUS
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: LIST
63503: PUSH
63504: LD_VAR 0 1
63508: PUSH
63509: LD_INT 3
63511: PLUS
63512: PUSH
63513: LD_VAR 0 2
63517: PUSH
63518: LD_INT 3
63520: PLUS
63521: PUSH
63522: LD_INT 5
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: LIST
63529: PUSH
63530: LD_VAR 0 1
63534: PUSH
63535: LD_INT 4
63537: PLUS
63538: PUSH
63539: LD_VAR 0 2
63543: PUSH
63544: LD_INT 4
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: PUSH
63552: LD_VAR 0 1
63556: PUSH
63557: LD_VAR 0 2
63561: PUSH
63562: LD_INT 3
63564: MINUS
63565: PUSH
63566: LD_INT 3
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: PUSH
63574: LD_VAR 0 1
63578: PUSH
63579: LD_INT 4
63581: MINUS
63582: PUSH
63583: LD_VAR 0 2
63587: PUSH
63588: LD_INT 4
63590: MINUS
63591: PUSH
63592: LD_INT 2
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: ST_TO_ADDR
// end ; 5 :
63607: GO 63747
63609: LD_INT 5
63611: DOUBLE
63612: EQUAL
63613: IFTRUE 63617
63615: GO 63746
63617: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63618: LD_ADDR_VAR 0 5
63622: PUSH
63623: LD_VAR 0 1
63627: PUSH
63628: LD_INT 4
63630: MINUS
63631: PUSH
63632: LD_VAR 0 2
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: LIST
63644: PUSH
63645: LD_VAR 0 1
63649: PUSH
63650: LD_VAR 0 2
63654: PUSH
63655: LD_INT 4
63657: MINUS
63658: PUSH
63659: LD_INT 3
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: PUSH
63667: LD_VAR 0 1
63671: PUSH
63672: LD_INT 4
63674: PLUS
63675: PUSH
63676: LD_VAR 0 2
63680: PUSH
63681: LD_INT 4
63683: PLUS
63684: PUSH
63685: LD_INT 5
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: LIST
63692: PUSH
63693: LD_VAR 0 1
63697: PUSH
63698: LD_INT 3
63700: PLUS
63701: PUSH
63702: LD_VAR 0 2
63706: PUSH
63707: LD_INT 4
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: LIST
63714: PUSH
63715: LD_VAR 0 1
63719: PUSH
63720: LD_VAR 0 2
63724: PUSH
63725: LD_INT 3
63727: PLUS
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: LIST
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: ST_TO_ADDR
// end ; end ;
63744: GO 63747
63746: POP
// result := list ;
63747: LD_ADDR_VAR 0 4
63751: PUSH
63752: LD_VAR 0 5
63756: ST_TO_ADDR
// end ;
63757: LD_VAR 0 4
63761: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63762: LD_INT 0
63764: PPUSH
63765: PPUSH
63766: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63767: LD_VAR 0 1
63771: NOT
63772: PUSH
63773: LD_VAR 0 2
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: LD_INT 3
63786: PUSH
63787: LD_INT 4
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: IN
63796: NOT
63797: OR
63798: IFFALSE 63802
// exit ;
63800: GO 63894
// tmp := [ ] ;
63802: LD_ADDR_VAR 0 5
63806: PUSH
63807: EMPTY
63808: ST_TO_ADDR
// for i in units do
63809: LD_ADDR_VAR 0 4
63813: PUSH
63814: LD_VAR 0 1
63818: PUSH
63819: FOR_IN
63820: IFFALSE 63863
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63822: LD_ADDR_VAR 0 5
63826: PUSH
63827: LD_VAR 0 5
63831: PPUSH
63832: LD_VAR 0 5
63836: PUSH
63837: LD_INT 1
63839: PLUS
63840: PPUSH
63841: LD_VAR 0 4
63845: PPUSH
63846: LD_VAR 0 2
63850: PPUSH
63851: CALL_OW 259
63855: PPUSH
63856: CALL_OW 2
63860: ST_TO_ADDR
63861: GO 63819
63863: POP
63864: POP
// if not tmp then
63865: LD_VAR 0 5
63869: NOT
63870: IFFALSE 63874
// exit ;
63872: GO 63894
// result := SortListByListDesc ( units , tmp ) ;
63874: LD_ADDR_VAR 0 3
63878: PUSH
63879: LD_VAR 0 1
63883: PPUSH
63884: LD_VAR 0 5
63888: PPUSH
63889: CALL_OW 77
63893: ST_TO_ADDR
// end ;
63894: LD_VAR 0 3
63898: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63899: LD_INT 0
63901: PPUSH
63902: PPUSH
63903: PPUSH
// result := false ;
63904: LD_ADDR_VAR 0 3
63908: PUSH
63909: LD_INT 0
63911: ST_TO_ADDR
// x := GetX ( building ) ;
63912: LD_ADDR_VAR 0 4
63916: PUSH
63917: LD_VAR 0 2
63921: PPUSH
63922: CALL_OW 250
63926: ST_TO_ADDR
// y := GetY ( building ) ;
63927: LD_ADDR_VAR 0 5
63931: PUSH
63932: LD_VAR 0 2
63936: PPUSH
63937: CALL_OW 251
63941: ST_TO_ADDR
// if not building or not x or not y then
63942: LD_VAR 0 2
63946: NOT
63947: PUSH
63948: LD_VAR 0 4
63952: NOT
63953: OR
63954: PUSH
63955: LD_VAR 0 5
63959: NOT
63960: OR
63961: IFFALSE 63965
// exit ;
63963: GO 64057
// if GetTaskList ( unit ) then
63965: LD_VAR 0 1
63969: PPUSH
63970: CALL_OW 437
63974: IFFALSE 64057
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63976: LD_STRING e
63978: PUSH
63979: LD_VAR 0 1
63983: PPUSH
63984: CALL_OW 437
63988: PUSH
63989: LD_INT 1
63991: ARRAY
63992: PUSH
63993: LD_INT 1
63995: ARRAY
63996: EQUAL
63997: PUSH
63998: LD_VAR 0 4
64002: PUSH
64003: LD_VAR 0 1
64007: PPUSH
64008: CALL_OW 437
64012: PUSH
64013: LD_INT 1
64015: ARRAY
64016: PUSH
64017: LD_INT 2
64019: ARRAY
64020: EQUAL
64021: AND
64022: PUSH
64023: LD_VAR 0 5
64027: PUSH
64028: LD_VAR 0 1
64032: PPUSH
64033: CALL_OW 437
64037: PUSH
64038: LD_INT 1
64040: ARRAY
64041: PUSH
64042: LD_INT 3
64044: ARRAY
64045: EQUAL
64046: AND
64047: IFFALSE 64057
// result := true end ;
64049: LD_ADDR_VAR 0 3
64053: PUSH
64054: LD_INT 1
64056: ST_TO_ADDR
// end ;
64057: LD_VAR 0 3
64061: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64062: LD_INT 0
64064: PPUSH
// result := false ;
64065: LD_ADDR_VAR 0 4
64069: PUSH
64070: LD_INT 0
64072: ST_TO_ADDR
// if GetTaskList ( unit ) then
64073: LD_VAR 0 1
64077: PPUSH
64078: CALL_OW 437
64082: IFFALSE 64165
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64084: LD_STRING M
64086: PUSH
64087: LD_VAR 0 1
64091: PPUSH
64092: CALL_OW 437
64096: PUSH
64097: LD_INT 1
64099: ARRAY
64100: PUSH
64101: LD_INT 1
64103: ARRAY
64104: EQUAL
64105: PUSH
64106: LD_VAR 0 2
64110: PUSH
64111: LD_VAR 0 1
64115: PPUSH
64116: CALL_OW 437
64120: PUSH
64121: LD_INT 1
64123: ARRAY
64124: PUSH
64125: LD_INT 2
64127: ARRAY
64128: EQUAL
64129: AND
64130: PUSH
64131: LD_VAR 0 3
64135: PUSH
64136: LD_VAR 0 1
64140: PPUSH
64141: CALL_OW 437
64145: PUSH
64146: LD_INT 1
64148: ARRAY
64149: PUSH
64150: LD_INT 3
64152: ARRAY
64153: EQUAL
64154: AND
64155: IFFALSE 64165
// result := true ;
64157: LD_ADDR_VAR 0 4
64161: PUSH
64162: LD_INT 1
64164: ST_TO_ADDR
// end ; end ;
64165: LD_VAR 0 4
64169: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64170: LD_INT 0
64172: PPUSH
64173: PPUSH
64174: PPUSH
64175: PPUSH
// if not unit or not area then
64176: LD_VAR 0 1
64180: NOT
64181: PUSH
64182: LD_VAR 0 2
64186: NOT
64187: OR
64188: IFFALSE 64192
// exit ;
64190: GO 64356
// tmp := AreaToList ( area , i ) ;
64192: LD_ADDR_VAR 0 6
64196: PUSH
64197: LD_VAR 0 2
64201: PPUSH
64202: LD_VAR 0 5
64206: PPUSH
64207: CALL_OW 517
64211: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64212: LD_ADDR_VAR 0 5
64216: PUSH
64217: DOUBLE
64218: LD_INT 1
64220: DEC
64221: ST_TO_ADDR
64222: LD_VAR 0 6
64226: PUSH
64227: LD_INT 1
64229: ARRAY
64230: PUSH
64231: FOR_TO
64232: IFFALSE 64354
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64234: LD_ADDR_VAR 0 7
64238: PUSH
64239: LD_VAR 0 6
64243: PUSH
64244: LD_INT 1
64246: ARRAY
64247: PUSH
64248: LD_VAR 0 5
64252: ARRAY
64253: PUSH
64254: LD_VAR 0 6
64258: PUSH
64259: LD_INT 2
64261: ARRAY
64262: PUSH
64263: LD_VAR 0 5
64267: ARRAY
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64273: LD_VAR 0 7
64277: PUSH
64278: LD_INT 1
64280: ARRAY
64281: PPUSH
64282: LD_VAR 0 7
64286: PUSH
64287: LD_INT 2
64289: ARRAY
64290: PPUSH
64291: CALL_OW 428
64295: PUSH
64296: LD_INT 0
64298: EQUAL
64299: IFFALSE 64352
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64301: LD_VAR 0 1
64305: PPUSH
64306: LD_VAR 0 7
64310: PUSH
64311: LD_INT 1
64313: ARRAY
64314: PPUSH
64315: LD_VAR 0 7
64319: PUSH
64320: LD_INT 2
64322: ARRAY
64323: PPUSH
64324: LD_VAR 0 3
64328: PPUSH
64329: CALL_OW 48
// result := IsPlaced ( unit ) ;
64333: LD_ADDR_VAR 0 4
64337: PUSH
64338: LD_VAR 0 1
64342: PPUSH
64343: CALL_OW 305
64347: ST_TO_ADDR
// exit ;
64348: POP
64349: POP
64350: GO 64356
// end ; end ;
64352: GO 64231
64354: POP
64355: POP
// end ;
64356: LD_VAR 0 4
64360: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64361: LD_INT 0
64363: PPUSH
64364: PPUSH
64365: PPUSH
// if not side or side > 8 then
64366: LD_VAR 0 1
64370: NOT
64371: PUSH
64372: LD_VAR 0 1
64376: PUSH
64377: LD_INT 8
64379: GREATER
64380: OR
64381: IFFALSE 64385
// exit ;
64383: GO 64572
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64385: LD_ADDR_VAR 0 4
64389: PUSH
64390: LD_INT 22
64392: PUSH
64393: LD_VAR 0 1
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 21
64404: PUSH
64405: LD_INT 3
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PPUSH
64416: CALL_OW 69
64420: ST_TO_ADDR
// if not tmp then
64421: LD_VAR 0 4
64425: NOT
64426: IFFALSE 64430
// exit ;
64428: GO 64572
// enable_addtolog := true ;
64430: LD_ADDR_OWVAR 81
64434: PUSH
64435: LD_INT 1
64437: ST_TO_ADDR
// AddToLog ( [ ) ;
64438: LD_STRING [
64440: PPUSH
64441: CALL_OW 561
// for i in tmp do
64445: LD_ADDR_VAR 0 3
64449: PUSH
64450: LD_VAR 0 4
64454: PUSH
64455: FOR_IN
64456: IFFALSE 64563
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64458: LD_STRING [
64460: PUSH
64461: LD_VAR 0 3
64465: PPUSH
64466: CALL_OW 266
64470: STR
64471: PUSH
64472: LD_STRING , 
64474: STR
64475: PUSH
64476: LD_VAR 0 3
64480: PPUSH
64481: CALL_OW 250
64485: STR
64486: PUSH
64487: LD_STRING , 
64489: STR
64490: PUSH
64491: LD_VAR 0 3
64495: PPUSH
64496: CALL_OW 251
64500: STR
64501: PUSH
64502: LD_STRING , 
64504: STR
64505: PUSH
64506: LD_VAR 0 3
64510: PPUSH
64511: CALL_OW 254
64515: STR
64516: PUSH
64517: LD_STRING , 
64519: STR
64520: PUSH
64521: LD_VAR 0 3
64525: PPUSH
64526: LD_INT 1
64528: PPUSH
64529: CALL_OW 268
64533: STR
64534: PUSH
64535: LD_STRING , 
64537: STR
64538: PUSH
64539: LD_VAR 0 3
64543: PPUSH
64544: LD_INT 2
64546: PPUSH
64547: CALL_OW 268
64551: STR
64552: PUSH
64553: LD_STRING ],
64555: STR
64556: PPUSH
64557: CALL_OW 561
// end ;
64561: GO 64455
64563: POP
64564: POP
// AddToLog ( ]; ) ;
64565: LD_STRING ];
64567: PPUSH
64568: CALL_OW 561
// end ;
64572: LD_VAR 0 2
64576: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64577: LD_INT 0
64579: PPUSH
64580: PPUSH
64581: PPUSH
64582: PPUSH
64583: PPUSH
// if not area or not rate or not max then
64584: LD_VAR 0 1
64588: NOT
64589: PUSH
64590: LD_VAR 0 2
64594: NOT
64595: OR
64596: PUSH
64597: LD_VAR 0 4
64601: NOT
64602: OR
64603: IFFALSE 64607
// exit ;
64605: GO 64799
// while 1 do
64607: LD_INT 1
64609: IFFALSE 64799
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64611: LD_ADDR_VAR 0 9
64615: PUSH
64616: LD_VAR 0 1
64620: PPUSH
64621: LD_INT 1
64623: PPUSH
64624: CALL_OW 287
64628: PUSH
64629: LD_INT 10
64631: MUL
64632: ST_TO_ADDR
// r := rate / 10 ;
64633: LD_ADDR_VAR 0 7
64637: PUSH
64638: LD_VAR 0 2
64642: PUSH
64643: LD_INT 10
64645: DIVREAL
64646: ST_TO_ADDR
// time := 1 1$00 ;
64647: LD_ADDR_VAR 0 8
64651: PUSH
64652: LD_INT 2100
64654: ST_TO_ADDR
// if amount < min then
64655: LD_VAR 0 9
64659: PUSH
64660: LD_VAR 0 3
64664: LESS
64665: IFFALSE 64683
// r := r * 2 else
64667: LD_ADDR_VAR 0 7
64671: PUSH
64672: LD_VAR 0 7
64676: PUSH
64677: LD_INT 2
64679: MUL
64680: ST_TO_ADDR
64681: GO 64709
// if amount > max then
64683: LD_VAR 0 9
64687: PUSH
64688: LD_VAR 0 4
64692: GREATER
64693: IFFALSE 64709
// r := r / 2 ;
64695: LD_ADDR_VAR 0 7
64699: PUSH
64700: LD_VAR 0 7
64704: PUSH
64705: LD_INT 2
64707: DIVREAL
64708: ST_TO_ADDR
// time := time / r ;
64709: LD_ADDR_VAR 0 8
64713: PUSH
64714: LD_VAR 0 8
64718: PUSH
64719: LD_VAR 0 7
64723: DIVREAL
64724: ST_TO_ADDR
// if time < 0 then
64725: LD_VAR 0 8
64729: PUSH
64730: LD_INT 0
64732: LESS
64733: IFFALSE 64750
// time := time * - 1 ;
64735: LD_ADDR_VAR 0 8
64739: PUSH
64740: LD_VAR 0 8
64744: PUSH
64745: LD_INT 1
64747: NEG
64748: MUL
64749: ST_TO_ADDR
// wait ( time ) ;
64750: LD_VAR 0 8
64754: PPUSH
64755: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64759: LD_INT 35
64761: PPUSH
64762: LD_INT 875
64764: PPUSH
64765: CALL_OW 12
64769: PPUSH
64770: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64774: LD_INT 1
64776: PPUSH
64777: LD_INT 5
64779: PPUSH
64780: CALL_OW 12
64784: PPUSH
64785: LD_VAR 0 1
64789: PPUSH
64790: LD_INT 1
64792: PPUSH
64793: CALL_OW 55
// end ;
64797: GO 64607
// end ;
64799: LD_VAR 0 5
64803: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64804: LD_INT 0
64806: PPUSH
64807: PPUSH
64808: PPUSH
64809: PPUSH
64810: PPUSH
64811: PPUSH
64812: PPUSH
64813: PPUSH
// if not turrets or not factories then
64814: LD_VAR 0 1
64818: NOT
64819: PUSH
64820: LD_VAR 0 2
64824: NOT
64825: OR
64826: IFFALSE 64830
// exit ;
64828: GO 65137
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64830: LD_ADDR_VAR 0 10
64834: PUSH
64835: LD_INT 5
64837: PUSH
64838: LD_INT 6
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 2
64847: PUSH
64848: LD_INT 4
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 3
64857: PUSH
64858: LD_INT 5
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 24
64872: PUSH
64873: LD_INT 25
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 23
64882: PUSH
64883: LD_INT 27
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 42
64896: PUSH
64897: LD_INT 43
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 44
64906: PUSH
64907: LD_INT 46
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 45
64916: PUSH
64917: LD_INT 47
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: LIST
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: LIST
64933: ST_TO_ADDR
// result := [ ] ;
64934: LD_ADDR_VAR 0 3
64938: PUSH
64939: EMPTY
64940: ST_TO_ADDR
// for i in turrets do
64941: LD_ADDR_VAR 0 4
64945: PUSH
64946: LD_VAR 0 1
64950: PUSH
64951: FOR_IN
64952: IFFALSE 65135
// begin nat := GetNation ( i ) ;
64954: LD_ADDR_VAR 0 7
64958: PUSH
64959: LD_VAR 0 4
64963: PPUSH
64964: CALL_OW 248
64968: ST_TO_ADDR
// weapon := 0 ;
64969: LD_ADDR_VAR 0 8
64973: PUSH
64974: LD_INT 0
64976: ST_TO_ADDR
// if not nat then
64977: LD_VAR 0 7
64981: NOT
64982: IFFALSE 64986
// continue ;
64984: GO 64951
// for j in list [ nat ] do
64986: LD_ADDR_VAR 0 5
64990: PUSH
64991: LD_VAR 0 10
64995: PUSH
64996: LD_VAR 0 7
65000: ARRAY
65001: PUSH
65002: FOR_IN
65003: IFFALSE 65044
// if GetBWeapon ( i ) = j [ 1 ] then
65005: LD_VAR 0 4
65009: PPUSH
65010: CALL_OW 269
65014: PUSH
65015: LD_VAR 0 5
65019: PUSH
65020: LD_INT 1
65022: ARRAY
65023: EQUAL
65024: IFFALSE 65042
// begin weapon := j [ 2 ] ;
65026: LD_ADDR_VAR 0 8
65030: PUSH
65031: LD_VAR 0 5
65035: PUSH
65036: LD_INT 2
65038: ARRAY
65039: ST_TO_ADDR
// break ;
65040: GO 65044
// end ;
65042: GO 65002
65044: POP
65045: POP
// if not weapon then
65046: LD_VAR 0 8
65050: NOT
65051: IFFALSE 65055
// continue ;
65053: GO 64951
// for k in factories do
65055: LD_ADDR_VAR 0 6
65059: PUSH
65060: LD_VAR 0 2
65064: PUSH
65065: FOR_IN
65066: IFFALSE 65131
// begin weapons := AvailableWeaponList ( k ) ;
65068: LD_ADDR_VAR 0 9
65072: PUSH
65073: LD_VAR 0 6
65077: PPUSH
65078: CALL_OW 478
65082: ST_TO_ADDR
// if not weapons then
65083: LD_VAR 0 9
65087: NOT
65088: IFFALSE 65092
// continue ;
65090: GO 65065
// if weapon in weapons then
65092: LD_VAR 0 8
65096: PUSH
65097: LD_VAR 0 9
65101: IN
65102: IFFALSE 65129
// begin result := [ i , weapon ] ;
65104: LD_ADDR_VAR 0 3
65108: PUSH
65109: LD_VAR 0 4
65113: PUSH
65114: LD_VAR 0 8
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: ST_TO_ADDR
// exit ;
65123: POP
65124: POP
65125: POP
65126: POP
65127: GO 65137
// end ; end ;
65129: GO 65065
65131: POP
65132: POP
// end ;
65133: GO 64951
65135: POP
65136: POP
// end ;
65137: LD_VAR 0 3
65141: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65142: LD_INT 0
65144: PPUSH
// if not side or side > 8 then
65145: LD_VAR 0 3
65149: NOT
65150: PUSH
65151: LD_VAR 0 3
65155: PUSH
65156: LD_INT 8
65158: GREATER
65159: OR
65160: IFFALSE 65164
// exit ;
65162: GO 65223
// if not range then
65164: LD_VAR 0 4
65168: NOT
65169: IFFALSE 65180
// range := - 12 ;
65171: LD_ADDR_VAR 0 4
65175: PUSH
65176: LD_INT 12
65178: NEG
65179: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65180: LD_VAR 0 1
65184: PPUSH
65185: LD_VAR 0 2
65189: PPUSH
65190: LD_VAR 0 3
65194: PPUSH
65195: LD_VAR 0 4
65199: PPUSH
65200: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65204: LD_VAR 0 1
65208: PPUSH
65209: LD_VAR 0 2
65213: PPUSH
65214: LD_VAR 0 3
65218: PPUSH
65219: CALL_OW 331
// end ;
65223: LD_VAR 0 5
65227: RET
// export function Video ( mode ) ; begin
65228: LD_INT 0
65230: PPUSH
// ingame_video = mode ;
65231: LD_ADDR_OWVAR 52
65235: PUSH
65236: LD_VAR 0 1
65240: ST_TO_ADDR
// interface_hidden = mode ;
65241: LD_ADDR_OWVAR 54
65245: PUSH
65246: LD_VAR 0 1
65250: ST_TO_ADDR
// end ;
65251: LD_VAR 0 2
65255: RET
// export function Join ( array , element ) ; begin
65256: LD_INT 0
65258: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65259: LD_ADDR_VAR 0 3
65263: PUSH
65264: LD_VAR 0 1
65268: PPUSH
65269: LD_VAR 0 1
65273: PUSH
65274: LD_INT 1
65276: PLUS
65277: PPUSH
65278: LD_VAR 0 2
65282: PPUSH
65283: CALL_OW 1
65287: ST_TO_ADDR
// end ;
65288: LD_VAR 0 3
65292: RET
// export function JoinUnion ( array , element ) ; begin
65293: LD_INT 0
65295: PPUSH
// result := array union element ;
65296: LD_ADDR_VAR 0 3
65300: PUSH
65301: LD_VAR 0 1
65305: PUSH
65306: LD_VAR 0 2
65310: UNION
65311: ST_TO_ADDR
// end ;
65312: LD_VAR 0 3
65316: RET
// export function GetBehemoths ( side ) ; begin
65317: LD_INT 0
65319: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65320: LD_ADDR_VAR 0 2
65324: PUSH
65325: LD_INT 22
65327: PUSH
65328: LD_VAR 0 1
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 31
65339: PUSH
65340: LD_INT 25
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PPUSH
65351: CALL_OW 69
65355: ST_TO_ADDR
// end ;
65356: LD_VAR 0 2
65360: RET
// export function Shuffle ( array ) ; var i , index ; begin
65361: LD_INT 0
65363: PPUSH
65364: PPUSH
65365: PPUSH
// result := [ ] ;
65366: LD_ADDR_VAR 0 2
65370: PUSH
65371: EMPTY
65372: ST_TO_ADDR
// if not array then
65373: LD_VAR 0 1
65377: NOT
65378: IFFALSE 65382
// exit ;
65380: GO 65481
// Randomize ;
65382: CALL_OW 10
// for i = array downto 1 do
65386: LD_ADDR_VAR 0 3
65390: PUSH
65391: DOUBLE
65392: LD_VAR 0 1
65396: INC
65397: ST_TO_ADDR
65398: LD_INT 1
65400: PUSH
65401: FOR_DOWNTO
65402: IFFALSE 65479
// begin index := rand ( 1 , array ) ;
65404: LD_ADDR_VAR 0 4
65408: PUSH
65409: LD_INT 1
65411: PPUSH
65412: LD_VAR 0 1
65416: PPUSH
65417: CALL_OW 12
65421: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65422: LD_ADDR_VAR 0 2
65426: PUSH
65427: LD_VAR 0 2
65431: PPUSH
65432: LD_VAR 0 2
65436: PUSH
65437: LD_INT 1
65439: PLUS
65440: PPUSH
65441: LD_VAR 0 1
65445: PUSH
65446: LD_VAR 0 4
65450: ARRAY
65451: PPUSH
65452: CALL_OW 2
65456: ST_TO_ADDR
// array := Delete ( array , index ) ;
65457: LD_ADDR_VAR 0 1
65461: PUSH
65462: LD_VAR 0 1
65466: PPUSH
65467: LD_VAR 0 4
65471: PPUSH
65472: CALL_OW 3
65476: ST_TO_ADDR
// end ;
65477: GO 65401
65479: POP
65480: POP
// end ;
65481: LD_VAR 0 2
65485: RET
// export function GetBaseMaterials ( base ) ; begin
65486: LD_INT 0
65488: PPUSH
// result := [ 0 , 0 , 0 ] ;
65489: LD_ADDR_VAR 0 2
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// if not base then
65508: LD_VAR 0 1
65512: NOT
65513: IFFALSE 65517
// exit ;
65515: GO 65566
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65517: LD_ADDR_VAR 0 2
65521: PUSH
65522: LD_VAR 0 1
65526: PPUSH
65527: LD_INT 1
65529: PPUSH
65530: CALL_OW 275
65534: PUSH
65535: LD_VAR 0 1
65539: PPUSH
65540: LD_INT 2
65542: PPUSH
65543: CALL_OW 275
65547: PUSH
65548: LD_VAR 0 1
65552: PPUSH
65553: LD_INT 3
65555: PPUSH
65556: CALL_OW 275
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: ST_TO_ADDR
// end ;
65566: LD_VAR 0 2
65570: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65571: LD_INT 0
65573: PPUSH
65574: PPUSH
// result := array ;
65575: LD_ADDR_VAR 0 3
65579: PUSH
65580: LD_VAR 0 1
65584: ST_TO_ADDR
// if size > 0 then
65585: LD_VAR 0 2
65589: PUSH
65590: LD_INT 0
65592: GREATER
65593: IFFALSE 65639
// for i := array downto size do
65595: LD_ADDR_VAR 0 4
65599: PUSH
65600: DOUBLE
65601: LD_VAR 0 1
65605: INC
65606: ST_TO_ADDR
65607: LD_VAR 0 2
65611: PUSH
65612: FOR_DOWNTO
65613: IFFALSE 65637
// result := Delete ( result , result ) ;
65615: LD_ADDR_VAR 0 3
65619: PUSH
65620: LD_VAR 0 3
65624: PPUSH
65625: LD_VAR 0 3
65629: PPUSH
65630: CALL_OW 3
65634: ST_TO_ADDR
65635: GO 65612
65637: POP
65638: POP
// end ;
65639: LD_VAR 0 3
65643: RET
// export function ComExit ( unit ) ; var tmp ; begin
65644: LD_INT 0
65646: PPUSH
65647: PPUSH
// if not IsInUnit ( unit ) then
65648: LD_VAR 0 1
65652: PPUSH
65653: CALL_OW 310
65657: NOT
65658: IFFALSE 65662
// exit ;
65660: GO 65722
// tmp := IsInUnit ( unit ) ;
65662: LD_ADDR_VAR 0 3
65666: PUSH
65667: LD_VAR 0 1
65671: PPUSH
65672: CALL_OW 310
65676: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65677: LD_VAR 0 3
65681: PPUSH
65682: CALL_OW 247
65686: PUSH
65687: LD_INT 2
65689: EQUAL
65690: IFFALSE 65703
// ComExitVehicle ( unit ) else
65692: LD_VAR 0 1
65696: PPUSH
65697: CALL_OW 121
65701: GO 65712
// ComExitBuilding ( unit ) ;
65703: LD_VAR 0 1
65707: PPUSH
65708: CALL_OW 122
// result := tmp ;
65712: LD_ADDR_VAR 0 2
65716: PUSH
65717: LD_VAR 0 3
65721: ST_TO_ADDR
// end ;
65722: LD_VAR 0 2
65726: RET
// export function ResetHc ; begin
65727: LD_INT 0
65729: PPUSH
// InitHc ;
65730: CALL_OW 19
// hc_importance := 0 ;
65734: LD_ADDR_OWVAR 32
65738: PUSH
65739: LD_INT 0
65741: ST_TO_ADDR
// end ;
65742: LD_VAR 0 1
65746: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65747: LD_INT 0
65749: PPUSH
65750: PPUSH
65751: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65752: LD_ADDR_VAR 0 6
65756: PUSH
65757: LD_VAR 0 1
65761: PUSH
65762: LD_VAR 0 3
65766: PLUS
65767: PUSH
65768: LD_INT 2
65770: DIV
65771: ST_TO_ADDR
// if _x < 0 then
65772: LD_VAR 0 6
65776: PUSH
65777: LD_INT 0
65779: LESS
65780: IFFALSE 65797
// _x := _x * - 1 ;
65782: LD_ADDR_VAR 0 6
65786: PUSH
65787: LD_VAR 0 6
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: MUL
65796: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65797: LD_ADDR_VAR 0 7
65801: PUSH
65802: LD_VAR 0 2
65806: PUSH
65807: LD_VAR 0 4
65811: PLUS
65812: PUSH
65813: LD_INT 2
65815: DIV
65816: ST_TO_ADDR
// if _y < 0 then
65817: LD_VAR 0 7
65821: PUSH
65822: LD_INT 0
65824: LESS
65825: IFFALSE 65842
// _y := _y * - 1 ;
65827: LD_ADDR_VAR 0 7
65831: PUSH
65832: LD_VAR 0 7
65836: PUSH
65837: LD_INT 1
65839: NEG
65840: MUL
65841: ST_TO_ADDR
// result := [ _x , _y ] ;
65842: LD_ADDR_VAR 0 5
65846: PUSH
65847: LD_VAR 0 6
65851: PUSH
65852: LD_VAR 0 7
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: ST_TO_ADDR
// end ;
65861: LD_VAR 0 5
65865: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65866: LD_INT 0
65868: PPUSH
65869: PPUSH
65870: PPUSH
65871: PPUSH
// task := GetTaskList ( unit ) ;
65872: LD_ADDR_VAR 0 7
65876: PUSH
65877: LD_VAR 0 1
65881: PPUSH
65882: CALL_OW 437
65886: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65887: LD_VAR 0 7
65891: NOT
65892: PUSH
65893: LD_VAR 0 1
65897: PPUSH
65898: LD_VAR 0 2
65902: PPUSH
65903: CALL_OW 308
65907: NOT
65908: AND
65909: IFFALSE 65913
// exit ;
65911: GO 66031
// if IsInArea ( unit , area ) then
65913: LD_VAR 0 1
65917: PPUSH
65918: LD_VAR 0 2
65922: PPUSH
65923: CALL_OW 308
65927: IFFALSE 65945
// begin ComMoveToArea ( unit , goAway ) ;
65929: LD_VAR 0 1
65933: PPUSH
65934: LD_VAR 0 3
65938: PPUSH
65939: CALL_OW 113
// exit ;
65943: GO 66031
// end ; if task [ 1 ] [ 1 ] <> M then
65945: LD_VAR 0 7
65949: PUSH
65950: LD_INT 1
65952: ARRAY
65953: PUSH
65954: LD_INT 1
65956: ARRAY
65957: PUSH
65958: LD_STRING M
65960: NONEQUAL
65961: IFFALSE 65965
// exit ;
65963: GO 66031
// x := task [ 1 ] [ 2 ] ;
65965: LD_ADDR_VAR 0 5
65969: PUSH
65970: LD_VAR 0 7
65974: PUSH
65975: LD_INT 1
65977: ARRAY
65978: PUSH
65979: LD_INT 2
65981: ARRAY
65982: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65983: LD_ADDR_VAR 0 6
65987: PUSH
65988: LD_VAR 0 7
65992: PUSH
65993: LD_INT 1
65995: ARRAY
65996: PUSH
65997: LD_INT 3
65999: ARRAY
66000: ST_TO_ADDR
// if InArea ( x , y , area ) then
66001: LD_VAR 0 5
66005: PPUSH
66006: LD_VAR 0 6
66010: PPUSH
66011: LD_VAR 0 2
66015: PPUSH
66016: CALL_OW 309
66020: IFFALSE 66031
// ComStop ( unit ) ;
66022: LD_VAR 0 1
66026: PPUSH
66027: CALL_OW 141
// end ;
66031: LD_VAR 0 4
66035: RET
// export function Abs ( value ) ; begin
66036: LD_INT 0
66038: PPUSH
// result := value ;
66039: LD_ADDR_VAR 0 2
66043: PUSH
66044: LD_VAR 0 1
66048: ST_TO_ADDR
// if value < 0 then
66049: LD_VAR 0 1
66053: PUSH
66054: LD_INT 0
66056: LESS
66057: IFFALSE 66074
// result := value * - 1 ;
66059: LD_ADDR_VAR 0 2
66063: PUSH
66064: LD_VAR 0 1
66068: PUSH
66069: LD_INT 1
66071: NEG
66072: MUL
66073: ST_TO_ADDR
// end ;
66074: LD_VAR 0 2
66078: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66079: LD_INT 0
66081: PPUSH
66082: PPUSH
66083: PPUSH
66084: PPUSH
66085: PPUSH
66086: PPUSH
66087: PPUSH
66088: PPUSH
// if not unit or not building then
66089: LD_VAR 0 1
66093: NOT
66094: PUSH
66095: LD_VAR 0 2
66099: NOT
66100: OR
66101: IFFALSE 66105
// exit ;
66103: GO 66331
// x := GetX ( building ) ;
66105: LD_ADDR_VAR 0 4
66109: PUSH
66110: LD_VAR 0 2
66114: PPUSH
66115: CALL_OW 250
66119: ST_TO_ADDR
// y := GetY ( building ) ;
66120: LD_ADDR_VAR 0 6
66124: PUSH
66125: LD_VAR 0 2
66129: PPUSH
66130: CALL_OW 251
66134: ST_TO_ADDR
// d := GetDir ( building ) ;
66135: LD_ADDR_VAR 0 8
66139: PUSH
66140: LD_VAR 0 2
66144: PPUSH
66145: CALL_OW 254
66149: ST_TO_ADDR
// r := 4 ;
66150: LD_ADDR_VAR 0 9
66154: PUSH
66155: LD_INT 4
66157: ST_TO_ADDR
// for i := 1 to 5 do
66158: LD_ADDR_VAR 0 10
66162: PUSH
66163: DOUBLE
66164: LD_INT 1
66166: DEC
66167: ST_TO_ADDR
66168: LD_INT 5
66170: PUSH
66171: FOR_TO
66172: IFFALSE 66329
// begin _x := ShiftX ( x , d , r + i ) ;
66174: LD_ADDR_VAR 0 5
66178: PUSH
66179: LD_VAR 0 4
66183: PPUSH
66184: LD_VAR 0 8
66188: PPUSH
66189: LD_VAR 0 9
66193: PUSH
66194: LD_VAR 0 10
66198: PLUS
66199: PPUSH
66200: CALL_OW 272
66204: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66205: LD_ADDR_VAR 0 7
66209: PUSH
66210: LD_VAR 0 6
66214: PPUSH
66215: LD_VAR 0 8
66219: PPUSH
66220: LD_VAR 0 9
66224: PUSH
66225: LD_VAR 0 10
66229: PLUS
66230: PPUSH
66231: CALL_OW 273
66235: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66236: LD_VAR 0 5
66240: PPUSH
66241: LD_VAR 0 7
66245: PPUSH
66246: CALL_OW 488
66250: PUSH
66251: LD_VAR 0 5
66255: PPUSH
66256: LD_VAR 0 7
66260: PPUSH
66261: CALL_OW 428
66265: PPUSH
66266: CALL_OW 247
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: LD_INT 2
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: IN
66281: NOT
66282: AND
66283: IFFALSE 66327
// begin ComMoveXY ( unit , _x , _y ) ;
66285: LD_VAR 0 1
66289: PPUSH
66290: LD_VAR 0 5
66294: PPUSH
66295: LD_VAR 0 7
66299: PPUSH
66300: CALL_OW 111
// result := [ _x , _y ] ;
66304: LD_ADDR_VAR 0 3
66308: PUSH
66309: LD_VAR 0 5
66313: PUSH
66314: LD_VAR 0 7
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: ST_TO_ADDR
// exit ;
66323: POP
66324: POP
66325: GO 66331
// end ; end ;
66327: GO 66171
66329: POP
66330: POP
// end ;
66331: LD_VAR 0 3
66335: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66336: LD_INT 0
66338: PPUSH
66339: PPUSH
66340: PPUSH
// result := 0 ;
66341: LD_ADDR_VAR 0 3
66345: PUSH
66346: LD_INT 0
66348: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66349: LD_VAR 0 1
66353: PUSH
66354: LD_INT 0
66356: LESS
66357: PUSH
66358: LD_VAR 0 1
66362: PUSH
66363: LD_INT 8
66365: GREATER
66366: OR
66367: PUSH
66368: LD_VAR 0 2
66372: PUSH
66373: LD_INT 0
66375: LESS
66376: OR
66377: PUSH
66378: LD_VAR 0 2
66382: PUSH
66383: LD_INT 8
66385: GREATER
66386: OR
66387: IFFALSE 66391
// exit ;
66389: GO 66466
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66391: LD_ADDR_VAR 0 4
66395: PUSH
66396: LD_INT 22
66398: PUSH
66399: LD_VAR 0 2
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PPUSH
66408: CALL_OW 69
66412: PUSH
66413: FOR_IN
66414: IFFALSE 66464
// begin un := UnitShoot ( i ) ;
66416: LD_ADDR_VAR 0 5
66420: PUSH
66421: LD_VAR 0 4
66425: PPUSH
66426: CALL_OW 504
66430: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66431: LD_VAR 0 5
66435: PPUSH
66436: CALL_OW 255
66440: PUSH
66441: LD_VAR 0 1
66445: EQUAL
66446: IFFALSE 66462
// begin result := un ;
66448: LD_ADDR_VAR 0 3
66452: PUSH
66453: LD_VAR 0 5
66457: ST_TO_ADDR
// exit ;
66458: POP
66459: POP
66460: GO 66466
// end ; end ;
66462: GO 66413
66464: POP
66465: POP
// end ; end_of_file
66466: LD_VAR 0 3
66470: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66471: LD_VAR 0 1
66475: PUSH
66476: LD_INT 200
66478: DOUBLE
66479: GREATEREQUAL
66480: IFFALSE 66488
66482: LD_INT 299
66484: DOUBLE
66485: LESSEQUAL
66486: IFTRUE 66490
66488: GO 66522
66490: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
66491: LD_VAR 0 1
66495: PPUSH
66496: LD_VAR 0 2
66500: PPUSH
66501: LD_VAR 0 3
66505: PPUSH
66506: LD_VAR 0 4
66510: PPUSH
66511: LD_VAR 0 5
66515: PPUSH
66516: CALL 25384 0 5
66520: GO 66523
66522: POP
// end ;
66523: PPOPN 11
66525: END
