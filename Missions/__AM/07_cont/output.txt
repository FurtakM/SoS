// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1572 0 0
// PrepareRussians ;
  27: CALL 4591 0 0
// PrepareAmericans ;
  31: CALL 3480 0 0
// Action ;
  35: CALL 8739 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: IFTRUE 864
 852: PUSH
 853: LD_VAR 0 1
 857: PPUSH
 858: CALL_OW 302
 862: NOT
 863: OR
 864: IFFALSE 868
// exit ;
 866: GO 1177
// side := GetSide ( un ) ;
 868: LD_ADDR_VAR 0 9
 872: PUSH
 873: LD_VAR 0 1
 877: PPUSH
 878: CALL_OW 255
 882: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 883: LD_ADDR_VAR 0 7
 887: PUSH
 888: LD_INT 22
 890: PUSH
 891: LD_VAR 0 9
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 32
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 3
 912: PUSH
 913: LD_INT 120
 915: PUSH
 916: LD_INT 7
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 50
 929: PUSH
 930: EMPTY
 931: LIST
 932: PUSH
 933: LD_INT 58
 935: PUSH
 936: EMPTY
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: PPUSH
 946: CALL_OW 69
 950: PUSH
 951: LD_VAR 0 2
 955: DIFF
 956: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 957: LD_ADDR_VAR 0 8
 961: PUSH
 962: LD_INT 22
 964: PUSH
 965: LD_VAR 0 9
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 30
 976: PUSH
 977: LD_INT 5
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PPUSH
 988: CALL_OW 69
 992: ST_TO_ADDR
// if not filter then
 993: LD_VAR 0 7
 997: NOT
 998: IFFALSE 1090
// begin if barracks then
1000: LD_VAR 0 8
1004: IFFALSE 1069
// for i in barracks do
1006: LD_ADDR_VAR 0 6
1010: PUSH
1011: LD_VAR 0 8
1015: PUSH
1016: FOR_IN
1017: IFFALSE 1067
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1019: LD_VAR 0 6
1023: PPUSH
1024: CALL_OW 313
1028: PUSH
1029: LD_INT 6
1031: LESS
1032: IFFALSE 1045
1034: PUSH
1035: LD_VAR 0 6
1039: PPUSH
1040: CALL_OW 302
1044: AND
1045: IFFALSE 1065
// begin ComEnterUnit ( un , i ) ;
1047: LD_VAR 0 1
1051: PPUSH
1052: LD_VAR 0 6
1056: PPUSH
1057: CALL_OW 120
// exit ;
1061: POP
1062: POP
1063: GO 1177
// end ; end ;
1065: GO 1016
1067: POP
1068: POP
// ComMoveXY ( un , x , y ) ;
1069: LD_VAR 0 1
1073: PPUSH
1074: LD_VAR 0 3
1078: PPUSH
1079: LD_VAR 0 4
1083: PPUSH
1084: CALL_OW 111
// end else
1088: GO 1177
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1090: LD_ADDR_VAR 0 7
1094: PUSH
1095: LD_VAR 0 1
1099: PPUSH
1100: LD_VAR 0 7
1104: PPUSH
1105: LD_INT 1
1107: PPUSH
1108: LD_INT 1
1110: PPUSH
1111: CALL 40237 0 4
1115: ST_TO_ADDR
// if filter then
1116: LD_VAR 0 7
1120: IFFALSE 1158
// begin SetTag ( filter [ 1 ] , 7 ) ;
1122: LD_VAR 0 7
1126: PUSH
1127: LD_INT 1
1129: ARRAY
1130: PPUSH
1131: LD_INT 7
1133: PPUSH
1134: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1138: LD_VAR 0 1
1142: PPUSH
1143: LD_VAR 0 7
1147: PUSH
1148: LD_INT 1
1150: ARRAY
1151: PPUSH
1152: CALL_OW 120
// end else
1156: GO 1177
// ComMoveXY ( un , x , y ) ;
1158: LD_VAR 0 1
1162: PPUSH
1163: LD_VAR 0 3
1167: PPUSH
1168: LD_VAR 0 4
1172: PPUSH
1173: CALL_OW 111
// end ; end ;
1177: LD_VAR 0 5
1181: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1182: LD_INT 0
1184: PPUSH
1185: PPUSH
1186: PPUSH
// if not base then
1187: LD_VAR 0 1
1191: NOT
1192: IFFALSE 1196
// exit ;
1194: GO 1254
// tmp := GetEnergy ( GetBase ( base ) ) ;
1196: LD_ADDR_VAR 0 4
1200: PUSH
1201: LD_VAR 0 1
1205: PPUSH
1206: CALL_OW 274
1210: PPUSH
1211: CALL_OW 278
1215: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1216: LD_VAR 0 4
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PUSH
1225: LD_VAR 0 4
1229: PUSH
1230: LD_INT 4
1232: ARRAY
1233: GREATER
1234: IFFALSE 1246
// result := true else
1236: LD_ADDR_VAR 0 2
1240: PUSH
1241: LD_INT 1
1243: ST_TO_ADDR
1244: GO 1254
// result := false ;
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ;
1254: LD_VAR 0 2
1258: RET
// export function FilterPeople ( side ) ; begin
1259: LD_INT 0
1261: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1262: LD_ADDR_VAR 0 2
1266: PUSH
1267: LD_INT 22
1269: PUSH
1270: LD_VAR 0 1
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: PUSH
1279: LD_INT 21
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: PPUSH
1293: CALL_OW 69
1297: ST_TO_ADDR
// end ;
1298: LD_VAR 0 2
1302: RET
// export function FilterDrivers ( side ) ; begin
1303: LD_INT 0
1305: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1306: LD_ADDR_VAR 0 2
1310: PUSH
1311: LD_INT 22
1313: PUSH
1314: LD_VAR 0 1
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PUSH
1323: LD_INT 3
1325: PUSH
1326: LD_INT 56
1328: PUSH
1329: EMPTY
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: ST_TO_ADDR
// end ;
1345: LD_VAR 0 2
1349: RET
// export function FilterPeopleArea ( side , area ) ; begin
1350: LD_INT 0
1352: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1353: LD_ADDR_VAR 0 3
1357: PUSH
1358: LD_VAR 0 2
1362: PPUSH
1363: LD_INT 22
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: PUSH
1373: LD_INT 21
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 70
1391: ST_TO_ADDR
// end ;
1392: LD_VAR 0 3
1396: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1397: LD_INT 0
1399: PPUSH
1400: PPUSH
1401: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1402: LD_ADDR_VAR 0 5
1406: PUSH
1407: LD_VAR 0 2
1411: PPUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 1
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 21
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: LD_INT 58
1437: PUSH
1438: EMPTY
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: LIST
1449: PPUSH
1450: CALL_OW 70
1454: ST_TO_ADDR
// result := [ ] ;
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: EMPTY
1461: ST_TO_ADDR
// if not tmp then
1462: LD_VAR 0 5
1466: NOT
1467: IFFALSE 1471
// exit ;
1469: GO 1523
// for i in tmp do
1471: LD_ADDR_VAR 0 4
1475: PUSH
1476: LD_VAR 0 5
1480: PUSH
1481: FOR_IN
1482: IFFALSE 1507
// result := result union IsDrivenBy ( i ) ;
1484: LD_ADDR_VAR 0 3
1488: PUSH
1489: LD_VAR 0 3
1493: PUSH
1494: LD_VAR 0 4
1498: PPUSH
1499: CALL_OW 311
1503: UNION
1504: ST_TO_ADDR
1505: GO 1481
1507: POP
1508: POP
// result := result diff 0 ;
1509: LD_ADDR_VAR 0 3
1513: PUSH
1514: LD_VAR 0 3
1518: PUSH
1519: LD_INT 0
1521: DIFF
1522: ST_TO_ADDR
// end ;
1523: LD_VAR 0 3
1527: RET
// export function FilterBuildings ( side ) ; begin
1528: LD_INT 0
1530: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_INT 22
1538: PUSH
1539: LD_VAR 0 1
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 21
1550: PUSH
1551: LD_INT 3
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PPUSH
1562: CALL_OW 69
1566: ST_TO_ADDR
// end ;
1567: LD_VAR 0 2
1571: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
// uc_side = 0 ;
1578: LD_ADDR_OWVAR 20
1582: PUSH
1583: LD_INT 0
1585: ST_TO_ADDR
// uc_nation = 0 ;
1586: LD_ADDR_OWVAR 21
1590: PUSH
1591: LD_INT 0
1593: ST_TO_ADDR
// nat_area := wildArea ;
1594: LD_ADDR_VAR 0 4
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// InitHc ;
1602: CALL_OW 19
// for i = 1 to 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 4
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1675
// begin hc_class = 18 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 18
1629: ST_TO_ADDR
// hc_gallery =  ;
1630: LD_ADDR_OWVAR 33
1634: PUSH
1635: LD_STRING 
1637: ST_TO_ADDR
// hc_face_number = 1 ;
1638: LD_ADDR_OWVAR 34
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// animal := CreateHuman ;
1646: LD_ADDR_VAR 0 3
1650: PUSH
1651: CALL_OW 44
1655: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_VAR 0 4
1665: PPUSH
1666: LD_INT 0
1668: PPUSH
1669: CALL_OW 49
// end ;
1673: GO 1619
1675: POP
1676: POP
// for i = 1 to 6 do
1677: LD_ADDR_VAR 0 2
1681: PUSH
1682: DOUBLE
1683: LD_INT 1
1685: DEC
1686: ST_TO_ADDR
1687: LD_INT 6
1689: PUSH
1690: FOR_TO
1691: IFFALSE 1762
// begin hc_class = class_tiger ;
1693: LD_ADDR_OWVAR 28
1697: PUSH
1698: LD_INT 14
1700: ST_TO_ADDR
// hc_gallery =  ;
1701: LD_ADDR_OWVAR 33
1705: PUSH
1706: LD_STRING 
1708: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1709: LD_ADDR_OWVAR 35
1713: PUSH
1714: LD_INT 0
1716: PPUSH
1717: LD_INT 10
1719: PPUSH
1720: CALL_OW 12
1724: ST_TO_ADDR
// hc_face_number = 3 ;
1725: LD_ADDR_OWVAR 34
1729: PUSH
1730: LD_INT 3
1732: ST_TO_ADDR
// animal := CreateHuman ;
1733: LD_ADDR_VAR 0 3
1737: PUSH
1738: CALL_OW 44
1742: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1743: LD_VAR 0 3
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: LD_INT 0
1755: PPUSH
1756: CALL_OW 49
// end ;
1760: GO 1690
1762: POP
1763: POP
// for i = 1 to 2 do
1764: LD_ADDR_VAR 0 2
1768: PUSH
1769: DOUBLE
1770: LD_INT 1
1772: DEC
1773: ST_TO_ADDR
1774: LD_INT 2
1776: PUSH
1777: FOR_TO
1778: IFFALSE 1841
// begin hc_class = 21 ;
1780: LD_ADDR_OWVAR 28
1784: PUSH
1785: LD_INT 21
1787: ST_TO_ADDR
// hc_gallery =  ;
1788: LD_ADDR_OWVAR 33
1792: PUSH
1793: LD_STRING 
1795: ST_TO_ADDR
// hc_agressivity = 0 ;
1796: LD_ADDR_OWVAR 35
1800: PUSH
1801: LD_INT 0
1803: ST_TO_ADDR
// hc_face_number = 5 ;
1804: LD_ADDR_OWVAR 34
1808: PUSH
1809: LD_INT 5
1811: ST_TO_ADDR
// animal := CreateHuman ;
1812: LD_ADDR_VAR 0 3
1816: PUSH
1817: CALL_OW 44
1821: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1822: LD_VAR 0 3
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1777
1841: POP
1842: POP
// for i = 1 to 6 do
1843: LD_ADDR_VAR 0 2
1847: PUSH
1848: DOUBLE
1849: LD_INT 1
1851: DEC
1852: ST_TO_ADDR
1853: LD_INT 6
1855: PUSH
1856: FOR_TO
1857: IFFALSE 1912
// begin hc_class = 13 ;
1859: LD_ADDR_OWVAR 28
1863: PUSH
1864: LD_INT 13
1866: ST_TO_ADDR
// hc_gallery =  ;
1867: LD_ADDR_OWVAR 33
1871: PUSH
1872: LD_STRING 
1874: ST_TO_ADDR
// hc_face_number = 4 ;
1875: LD_ADDR_OWVAR 34
1879: PUSH
1880: LD_INT 4
1882: ST_TO_ADDR
// animal := CreateHuman ;
1883: LD_ADDR_VAR 0 3
1887: PUSH
1888: CALL_OW 44
1892: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1893: LD_VAR 0 3
1897: PPUSH
1898: LD_VAR 0 4
1902: PPUSH
1903: LD_INT 0
1905: PPUSH
1906: CALL_OW 49
// end ;
1910: GO 1856
1912: POP
1913: POP
// for i = 1 to 2 do
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: DOUBLE
1920: LD_INT 1
1922: DEC
1923: ST_TO_ADDR
1924: LD_INT 2
1926: PUSH
1927: FOR_TO
1928: IFFALSE 1987
// begin hc_class = 20 ;
1930: LD_ADDR_OWVAR 28
1934: PUSH
1935: LD_INT 20
1937: ST_TO_ADDR
// hc_gallery =  ;
1938: LD_ADDR_OWVAR 33
1942: PUSH
1943: LD_STRING 
1945: ST_TO_ADDR
// hc_face_number = 2 ;
1946: LD_ADDR_OWVAR 34
1950: PUSH
1951: LD_INT 2
1953: ST_TO_ADDR
// animal := CreateHuman ;
1954: LD_ADDR_VAR 0 3
1958: PUSH
1959: CALL_OW 44
1963: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1964: LD_VAR 0 3
1968: PPUSH
1969: LD_INT 101
1971: PPUSH
1972: LD_INT 37
1974: PPUSH
1975: LD_INT 3
1977: PPUSH
1978: LD_INT 0
1980: PPUSH
1981: CALL_OW 50
// end ;
1985: GO 1927
1987: POP
1988: POP
// for i = 1 to 1 do
1989: LD_ADDR_VAR 0 2
1993: PUSH
1994: DOUBLE
1995: LD_INT 1
1997: DEC
1998: ST_TO_ADDR
1999: LD_INT 1
2001: PUSH
2002: FOR_TO
2003: IFFALSE 2050
// begin vc_chassis := 31 ;
2005: LD_ADDR_OWVAR 37
2009: PUSH
2010: LD_INT 31
2012: ST_TO_ADDR
// vc_control := control_rider ;
2013: LD_ADDR_OWVAR 38
2017: PUSH
2018: LD_INT 4
2020: ST_TO_ADDR
// animal := CreateVehicle ;
2021: LD_ADDR_VAR 0 3
2025: PUSH
2026: CALL_OW 45
2030: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2031: LD_VAR 0 3
2035: PPUSH
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 49
// end ;
2048: GO 2002
2050: POP
2051: POP
// end ;
2052: LD_VAR 0 1
2056: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2057: LD_INT 0
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
// result := [ ] ;
2063: LD_ADDR_VAR 0 2
2067: PUSH
2068: EMPTY
2069: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2070: LD_ADDR_VAR 0 4
2074: PUSH
2075: LD_INT 81
2077: PUSH
2078: LD_VAR 0 1
2082: PPUSH
2083: CALL_OW 255
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 91
2094: PUSH
2095: LD_VAR 0 1
2099: PUSH
2100: LD_INT 15
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: PUSH
2108: LD_INT 2
2110: PUSH
2111: LD_INT 30
2113: PUSH
2114: LD_INT 32
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 30
2123: PUSH
2124: LD_INT 33
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: PPUSH
2141: CALL_OW 69
2145: ST_TO_ADDR
// if not tmp then
2146: LD_VAR 0 4
2150: NOT
2151: IFFALSE 2155
// exit ;
2153: GO 2224
// for i in tmp do
2155: LD_ADDR_VAR 0 3
2159: PUSH
2160: LD_VAR 0 4
2164: PUSH
2165: FOR_IN
2166: IFFALSE 2222
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2168: LD_ADDR_VAR 0 5
2172: PUSH
2173: LD_VAR 0 3
2177: PPUSH
2178: CALL_OW 274
2182: PPUSH
2183: CALL_OW 278
2187: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2188: LD_VAR 0 5
2192: PUSH
2193: LD_INT 4
2195: ARRAY
2196: PUSH
2197: LD_VAR 0 5
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: GREATER
2206: IFFALSE 2220
// begin result := i ;
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: LD_VAR 0 3
2217: ST_TO_ADDR
// break ;
2218: GO 2222
// end ; end ;
2220: GO 2165
2222: POP
2223: POP
// end ;
2224: LD_VAR 0 2
2228: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2229: LD_INT 0
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
2243: PPUSH
2244: PPUSH
2245: PPUSH
2246: PPUSH
// result := false ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: LD_INT 0
2254: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2255: LD_VAR 0 1
2259: NOT
2260: IFTRUE 2285
2262: PUSH
2263: LD_VAR 0 1
2267: PPUSH
2268: CALL_OW 266
2272: PUSH
2273: LD_INT 32
2275: PUSH
2276: LD_INT 33
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: IN
2283: NOT
2284: OR
2285: IFFALSE 2289
// exit ;
2287: GO 3475
// nat := GetNation ( tower ) ;
2289: LD_ADDR_VAR 0 11
2293: PUSH
2294: LD_VAR 0 1
2298: PPUSH
2299: CALL_OW 248
2303: ST_TO_ADDR
// side := GetSide ( tower ) ;
2304: LD_ADDR_VAR 0 15
2308: PUSH
2309: LD_VAR 0 1
2313: PPUSH
2314: CALL_OW 255
2318: ST_TO_ADDR
// x := GetX ( tower ) ;
2319: LD_ADDR_VAR 0 9
2323: PUSH
2324: LD_VAR 0 1
2328: PPUSH
2329: CALL_OW 250
2333: ST_TO_ADDR
// y := GetY ( tower ) ;
2334: LD_ADDR_VAR 0 10
2338: PUSH
2339: LD_VAR 0 1
2343: PPUSH
2344: CALL_OW 251
2348: ST_TO_ADDR
// if not x or not y then
2349: LD_VAR 0 9
2353: NOT
2354: IFTRUE 2363
2356: PUSH
2357: LD_VAR 0 10
2361: NOT
2362: OR
2363: IFFALSE 2367
// exit ;
2365: GO 3475
// weapon := 0 ;
2367: LD_ADDR_VAR 0 17
2371: PUSH
2372: LD_INT 0
2374: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2375: LD_ADDR_VAR 0 16
2379: PUSH
2380: LD_INT 42
2382: PUSH
2383: LD_INT 43
2385: PUSH
2386: LD_INT 44
2388: PUSH
2389: LD_INT 46
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: ST_TO_ADDR
// if not fac_list then
2398: LD_VAR 0 16
2402: NOT
2403: IFFALSE 2407
// exit ;
2405: GO 3475
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2407: LD_ADDR_VAR 0 4
2411: PUSH
2412: LD_INT 4
2414: PUSH
2415: LD_INT 5
2417: PUSH
2418: LD_INT 9
2420: PUSH
2421: LD_INT 10
2423: PUSH
2424: LD_INT 6
2426: PUSH
2427: LD_INT 7
2429: PUSH
2430: LD_INT 11
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 27
2444: PUSH
2445: LD_INT 28
2447: PUSH
2448: LD_INT 26
2450: PUSH
2451: LD_INT 30
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: PUSH
2460: LD_INT 43
2462: PUSH
2463: LD_INT 44
2465: PUSH
2466: LD_INT 46
2468: PUSH
2469: LD_INT 45
2471: PUSH
2472: LD_INT 47
2474: PUSH
2475: LD_INT 49
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: LD_VAR 0 11
2495: ARRAY
2496: ST_TO_ADDR
// for i in list do
2497: LD_ADDR_VAR 0 7
2501: PUSH
2502: LD_VAR 0 4
2506: PUSH
2507: FOR_IN
2508: IFFALSE 2541
// if not i in fac_list then
2510: LD_VAR 0 7
2514: PUSH
2515: LD_VAR 0 16
2519: IN
2520: NOT
2521: IFFALSE 2539
// list := list diff i ;
2523: LD_ADDR_VAR 0 4
2527: PUSH
2528: LD_VAR 0 4
2532: PUSH
2533: LD_VAR 0 7
2537: DIFF
2538: ST_TO_ADDR
2539: GO 2507
2541: POP
2542: POP
// if not list then
2543: LD_VAR 0 4
2547: NOT
2548: IFFALSE 2552
// exit ;
2550: GO 3475
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2552: LD_VAR 0 11
2556: PUSH
2557: LD_INT 3
2559: EQUAL
2560: IFFALSE 2572
2562: PUSH
2563: LD_INT 49
2565: PUSH
2566: LD_VAR 0 4
2570: IN
2571: AND
2572: IFFALSE 2592
2574: PUSH
2575: LD_INT 31
2577: PPUSH
2578: LD_VAR 0 15
2582: PPUSH
2583: CALL_OW 321
2587: PUSH
2588: LD_INT 2
2590: EQUAL
2591: AND
2592: IFFALSE 2652
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2594: LD_INT 22
2596: PUSH
2597: LD_VAR 0 15
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: PUSH
2606: LD_INT 35
2608: PUSH
2609: LD_INT 49
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PUSH
2616: LD_INT 91
2618: PUSH
2619: LD_VAR 0 1
2623: PUSH
2624: LD_INT 10
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: PPUSH
2637: CALL_OW 69
2641: NOT
2642: IFFALSE 2652
// weapon := ru_time_lapser ;
2644: LD_ADDR_VAR 0 17
2648: PUSH
2649: LD_INT 49
2651: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2652: LD_VAR 0 11
2656: PUSH
2657: LD_INT 1
2659: PUSH
2660: LD_INT 2
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: IN
2667: IFFALSE 2691
2669: PUSH
2670: LD_INT 11
2672: PUSH
2673: LD_VAR 0 4
2677: IN
2678: IFTRUE 2690
2680: PUSH
2681: LD_INT 30
2683: PUSH
2684: LD_VAR 0 4
2688: IN
2689: OR
2690: AND
2691: IFFALSE 2711
2693: PUSH
2694: LD_INT 6
2696: PPUSH
2697: LD_VAR 0 15
2701: PPUSH
2702: CALL_OW 321
2706: PUSH
2707: LD_INT 2
2709: EQUAL
2710: AND
2711: IFFALSE 2878
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2713: LD_INT 22
2715: PUSH
2716: LD_VAR 0 15
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 2
2727: PUSH
2728: LD_INT 35
2730: PUSH
2731: LD_INT 11
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: LD_INT 35
2740: PUSH
2741: LD_INT 30
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 91
2755: PUSH
2756: LD_VAR 0 1
2760: PUSH
2761: LD_INT 18
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: LIST
2773: PPUSH
2774: CALL_OW 69
2778: NOT
2779: IFFALSE 2855
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_VAR 0 15
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PUSH
2794: LD_INT 2
2796: PUSH
2797: LD_INT 30
2799: PUSH
2800: LD_INT 32
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 30
2809: PUSH
2810: LD_INT 33
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 91
2824: PUSH
2825: LD_VAR 0 1
2829: PUSH
2830: LD_INT 12
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: LIST
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: PPUSH
2846: CALL_OW 69
2850: PUSH
2851: LD_INT 2
2853: GREATER
2854: AND
2855: IFFALSE 2878
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2857: LD_ADDR_VAR 0 17
2861: PUSH
2862: LD_INT 11
2864: PUSH
2865: LD_INT 30
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PUSH
2872: LD_VAR 0 11
2876: ARRAY
2877: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2878: LD_VAR 0 17
2882: NOT
2883: IFFALSE 2903
2885: PUSH
2886: LD_INT 40
2888: PPUSH
2889: LD_VAR 0 15
2893: PPUSH
2894: CALL_OW 321
2898: PUSH
2899: LD_INT 2
2901: EQUAL
2902: AND
2903: IFFALSE 2939
2905: PUSH
2906: LD_INT 7
2908: PUSH
2909: LD_VAR 0 4
2913: IN
2914: IFTRUE 2926
2916: PUSH
2917: LD_INT 28
2919: PUSH
2920: LD_VAR 0 4
2924: IN
2925: OR
2926: IFTRUE 2938
2928: PUSH
2929: LD_INT 45
2931: PUSH
2932: LD_VAR 0 4
2936: IN
2937: OR
2938: AND
2939: IFFALSE 3193
// begin hex := GetHexInfo ( x , y ) ;
2941: LD_ADDR_VAR 0 3
2945: PUSH
2946: LD_VAR 0 9
2950: PPUSH
2951: LD_VAR 0 10
2955: PPUSH
2956: CALL_OW 546
2960: ST_TO_ADDR
// if hex [ 1 ] then
2961: LD_VAR 0 3
2965: PUSH
2966: LD_INT 1
2968: ARRAY
2969: IFFALSE 2973
// exit ;
2971: GO 3475
// height := hex [ 2 ] ;
2973: LD_ADDR_VAR 0 14
2977: PUSH
2978: LD_VAR 0 3
2982: PUSH
2983: LD_INT 2
2985: ARRAY
2986: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2987: LD_ADDR_VAR 0 13
2991: PUSH
2992: LD_INT 0
2994: PUSH
2995: LD_INT 2
2997: PUSH
2998: LD_INT 3
3000: PUSH
3001: LD_INT 5
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: ST_TO_ADDR
// for i in tmp do
3010: LD_ADDR_VAR 0 7
3014: PUSH
3015: LD_VAR 0 13
3019: PUSH
3020: FOR_IN
3021: IFFALSE 3191
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
3023: LD_ADDR_VAR 0 8
3027: PUSH
3028: LD_VAR 0 9
3032: PPUSH
3033: LD_VAR 0 7
3037: PPUSH
3038: LD_INT 5
3040: PPUSH
3041: CALL_OW 272
3045: PUSH
3046: LD_VAR 0 10
3050: PPUSH
3051: LD_VAR 0 7
3055: PPUSH
3056: LD_INT 5
3058: PPUSH
3059: CALL_OW 273
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3068: LD_VAR 0 8
3072: PUSH
3073: LD_INT 1
3075: ARRAY
3076: PPUSH
3077: LD_VAR 0 8
3081: PUSH
3082: LD_INT 2
3084: ARRAY
3085: PPUSH
3086: CALL_OW 488
3090: IFFALSE 3189
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3092: LD_ADDR_VAR 0 3
3096: PUSH
3097: LD_VAR 0 8
3101: PUSH
3102: LD_INT 1
3104: ARRAY
3105: PPUSH
3106: LD_VAR 0 8
3110: PUSH
3111: LD_INT 2
3113: ARRAY
3114: PPUSH
3115: CALL_OW 546
3119: ST_TO_ADDR
// if hex [ 1 ] then
3120: LD_VAR 0 3
3124: PUSH
3125: LD_INT 1
3127: ARRAY
3128: IFFALSE 3132
// continue ;
3130: GO 3020
// h := hex [ 2 ] ;
3132: LD_ADDR_VAR 0 12
3136: PUSH
3137: LD_VAR 0 3
3141: PUSH
3142: LD_INT 2
3144: ARRAY
3145: ST_TO_ADDR
// if h + 7 < height then
3146: LD_VAR 0 12
3150: PUSH
3151: LD_INT 7
3153: PLUS
3154: PUSH
3155: LD_VAR 0 14
3159: LESS
3160: IFFALSE 3189
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3162: LD_ADDR_VAR 0 17
3166: PUSH
3167: LD_INT 7
3169: PUSH
3170: LD_INT 28
3172: PUSH
3173: LD_INT 45
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: LIST
3180: PUSH
3181: LD_VAR 0 11
3185: ARRAY
3186: ST_TO_ADDR
// break ;
3187: GO 3191
// end ; end ; end ;
3189: GO 3020
3191: POP
3192: POP
// end ; if not weapon then
3193: LD_VAR 0 17
3197: NOT
3198: IFFALSE 3353
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3200: LD_ADDR_VAR 0 4
3204: PUSH
3205: LD_VAR 0 4
3209: PUSH
3210: LD_INT 11
3212: PUSH
3213: LD_INT 30
3215: PUSH
3216: LD_INT 49
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: LIST
3223: DIFF
3224: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3225: LD_ADDR_VAR 0 13
3229: PUSH
3230: LD_INT 22
3232: PUSH
3233: LD_VAR 0 15
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 91
3244: PUSH
3245: LD_VAR 0 1
3249: PUSH
3250: LD_INT 6
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 3
3260: PUSH
3261: LD_INT 35
3263: PUSH
3264: LD_INT 0
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: PPUSH
3280: CALL_OW 69
3284: ST_TO_ADDR
// for i in tmp do
3285: LD_ADDR_VAR 0 7
3289: PUSH
3290: LD_VAR 0 13
3294: PUSH
3295: FOR_IN
3296: IFFALSE 3321
// list := list diff GetBWeapon ( i ) ;
3298: LD_ADDR_VAR 0 4
3302: PUSH
3303: LD_VAR 0 4
3307: PUSH
3308: LD_VAR 0 7
3312: PPUSH
3313: CALL_OW 269
3317: DIFF
3318: ST_TO_ADDR
3319: GO 3295
3321: POP
3322: POP
// if list then
3323: LD_VAR 0 4
3327: IFFALSE 3353
// weapon := list [ rand ( 1 , list ) ] ;
3329: LD_ADDR_VAR 0 17
3333: PUSH
3334: LD_VAR 0 4
3338: PUSH
3339: LD_INT 1
3341: PPUSH
3342: LD_VAR 0 4
3346: PPUSH
3347: CALL_OW 12
3351: ARRAY
3352: ST_TO_ADDR
// end ; if weapon then
3353: LD_VAR 0 17
3357: IFFALSE 3475
// begin tmp := CostOfWeapon ( weapon ) ;
3359: LD_ADDR_VAR 0 13
3363: PUSH
3364: LD_VAR 0 17
3368: PPUSH
3369: CALL_OW 451
3373: ST_TO_ADDR
// j := GetBase ( tower ) ;
3374: LD_ADDR_VAR 0 8
3378: PUSH
3379: LD_VAR 0 1
3383: PPUSH
3384: CALL_OW 274
3388: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3389: LD_VAR 0 8
3393: PPUSH
3394: LD_INT 1
3396: PPUSH
3397: CALL_OW 275
3401: PUSH
3402: LD_VAR 0 13
3406: PUSH
3407: LD_INT 1
3409: ARRAY
3410: GREATEREQUAL
3411: IFFALSE 3437
3413: PUSH
3414: LD_VAR 0 8
3418: PPUSH
3419: LD_INT 2
3421: PPUSH
3422: CALL_OW 275
3426: PUSH
3427: LD_VAR 0 13
3431: PUSH
3432: LD_INT 2
3434: ARRAY
3435: GREATEREQUAL
3436: AND
3437: IFFALSE 3463
3439: PUSH
3440: LD_VAR 0 8
3444: PPUSH
3445: LD_INT 3
3447: PPUSH
3448: CALL_OW 275
3452: PUSH
3453: LD_VAR 0 13
3457: PUSH
3458: LD_INT 3
3460: ARRAY
3461: GREATEREQUAL
3462: AND
3463: IFFALSE 3475
// result := weapon ;
3465: LD_ADDR_VAR 0 2
3469: PUSH
3470: LD_VAR 0 17
3474: ST_TO_ADDR
// end ; end ; end_of_file
3475: LD_VAR 0 2
3479: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3480: LD_INT 0
3482: PPUSH
3483: PPUSH
3484: PPUSH
3485: PPUSH
3486: PPUSH
3487: PPUSH
// uc_side := 1 ;
3488: LD_ADDR_OWVAR 20
3492: PUSH
3493: LD_INT 1
3495: ST_TO_ADDR
// uc_nation := 1 ;
3496: LD_ADDR_OWVAR 21
3500: PUSH
3501: LD_INT 1
3503: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3504: LD_ADDR_EXP 9
3508: PUSH
3509: LD_STRING JMM
3511: PPUSH
3512: LD_EXP 1
3516: NOT
3517: PPUSH
3518: LD_EXP 2
3522: PPUSH
3523: CALL 34694 0 3
3527: ST_TO_ADDR
// team := [ JMM ] ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: LD_EXP 9
3537: PUSH
3538: EMPTY
3539: LIST
3540: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3541: LD_STRING BrownIn07
3543: PPUSH
3544: LD_EXP 1
3548: PPUSH
3549: CALL_OW 30
3553: IFFALSE 3579
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3555: LD_ADDR_EXP 10
3559: PUSH
3560: LD_STRING Brown
3562: PPUSH
3563: LD_EXP 1
3567: NOT
3568: PPUSH
3569: LD_EXP 2
3573: PPUSH
3574: CALL 34694 0 3
3578: ST_TO_ADDR
// if Brown then
3579: LD_EXP 10
3583: IFFALSE 3601
// team := team ^ Brown ;
3585: LD_ADDR_VAR 0 3
3589: PUSH
3590: LD_VAR 0 3
3594: PUSH
3595: LD_EXP 10
3599: ADD
3600: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3601: LD_STRING DonaldsonIn07
3603: PPUSH
3604: LD_EXP 1
3608: PPUSH
3609: CALL_OW 30
3613: IFFALSE 3639
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_STRING Donaldson
3622: PPUSH
3623: LD_EXP 1
3627: NOT
3628: PPUSH
3629: LD_EXP 2
3633: PPUSH
3634: CALL 34694 0 3
3638: ST_TO_ADDR
// if Donaldson then
3639: LD_EXP 11
3643: IFFALSE 3661
// team := team ^ Donaldson ;
3645: LD_ADDR_VAR 0 3
3649: PUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_EXP 11
3659: ADD
3660: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3661: LD_STRING BobbyIn07
3663: PPUSH
3664: LD_EXP 1
3668: PPUSH
3669: CALL_OW 30
3673: IFFALSE 3699
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3675: LD_ADDR_EXP 12
3679: PUSH
3680: LD_STRING Bobby
3682: PPUSH
3683: LD_EXP 1
3687: NOT
3688: PPUSH
3689: LD_EXP 2
3693: PPUSH
3694: CALL 34694 0 3
3698: ST_TO_ADDR
// if Bobby then
3699: LD_EXP 12
3703: IFFALSE 3721
// team := team ^ Bobby ;
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: LD_VAR 0 3
3714: PUSH
3715: LD_EXP 12
3719: ADD
3720: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3721: LD_STRING CyrusIn07
3723: PPUSH
3724: LD_EXP 1
3728: PPUSH
3729: CALL_OW 30
3733: IFFALSE 3759
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3735: LD_ADDR_EXP 13
3739: PUSH
3740: LD_STRING Cyrus
3742: PPUSH
3743: LD_EXP 1
3747: NOT
3748: PPUSH
3749: LD_EXP 2
3753: PPUSH
3754: CALL 34694 0 3
3758: ST_TO_ADDR
// if Cyrus then
3759: LD_EXP 13
3763: IFFALSE 3781
// team := team ^ Cyrus ;
3765: LD_ADDR_VAR 0 3
3769: PUSH
3770: LD_VAR 0 3
3774: PUSH
3775: LD_EXP 13
3779: ADD
3780: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3781: LD_STRING LisaIn07
3783: PPUSH
3784: LD_EXP 1
3788: PPUSH
3789: CALL_OW 30
3793: IFFALSE 3819
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3795: LD_ADDR_EXP 14
3799: PUSH
3800: LD_STRING Lisa
3802: PPUSH
3803: LD_EXP 1
3807: NOT
3808: PPUSH
3809: LD_EXP 2
3813: PPUSH
3814: CALL 34694 0 3
3818: ST_TO_ADDR
// if Lisa then
3819: LD_EXP 14
3823: IFFALSE 3841
// team := team ^ Lisa ;
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: LD_VAR 0 3
3834: PUSH
3835: LD_EXP 14
3839: ADD
3840: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3841: LD_STRING GladstoneIn07
3843: PPUSH
3844: LD_EXP 1
3848: PPUSH
3849: CALL_OW 30
3853: IFFALSE 3879
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3855: LD_ADDR_EXP 16
3859: PUSH
3860: LD_STRING Gladstone
3862: PPUSH
3863: LD_EXP 1
3867: NOT
3868: PPUSH
3869: LD_EXP 2
3873: PPUSH
3874: CALL 34694 0 3
3878: ST_TO_ADDR
// if Gladstone then
3879: LD_EXP 16
3883: IFFALSE 3901
// team := team ^ Gladstone ;
3885: LD_ADDR_VAR 0 3
3889: PUSH
3890: LD_VAR 0 3
3894: PUSH
3895: LD_EXP 16
3899: ADD
3900: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3901: LD_STRING KhatamIn07
3903: PPUSH
3904: LD_EXP 1
3908: PPUSH
3909: CALL_OW 30
3913: IFFALSE 3939
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3915: LD_ADDR_EXP 17
3919: PUSH
3920: LD_STRING Khatam
3922: PPUSH
3923: LD_EXP 1
3927: NOT
3928: PPUSH
3929: LD_EXP 2
3933: PPUSH
3934: CALL 34694 0 3
3938: ST_TO_ADDR
// if Khatam then
3939: LD_EXP 17
3943: IFFALSE 3961
// team := team ^ Khatam ;
3945: LD_ADDR_VAR 0 3
3949: PUSH
3950: LD_VAR 0 3
3954: PUSH
3955: LD_EXP 17
3959: ADD
3960: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3961: LD_ADDR_VAR 0 4
3965: PUSH
3966: LD_STRING 07_others
3968: PPUSH
3969: CALL_OW 31
3973: ST_TO_ADDR
// if others then
3974: LD_VAR 0 4
3978: IFFALSE 3996
// team := team ^ others ;
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: LD_VAR 0 3
3989: PUSH
3990: LD_VAR 0 4
3994: ADD
3995: ST_TO_ADDR
// if debug then
3996: LD_EXP 1
4000: IFFALSE 4055
// begin InitHc ;
4002: CALL_OW 19
// for i = 1 to 4 do
4006: LD_ADDR_VAR 0 2
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_INT 4
4018: PUSH
4019: FOR_TO
4020: IFFALSE 4053
// begin PrepareHuman ( false , class_mechanic , 4 ) ;
4022: LD_INT 0
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: LD_INT 4
4030: PPUSH
4031: CALL_OW 380
// team := team ^ CreateHuman ;
4035: LD_ADDR_VAR 0 3
4039: PUSH
4040: LD_VAR 0 3
4044: PUSH
4045: CALL_OW 44
4049: ADD
4050: ST_TO_ADDR
// end ;
4051: GO 4019
4053: POP
4054: POP
// end ; m := 0 ;
4055: LD_ADDR_VAR 0 6
4059: PUSH
4060: LD_INT 0
4062: ST_TO_ADDR
// for i in team do
4063: LD_ADDR_VAR 0 2
4067: PUSH
4068: LD_VAR 0 3
4072: PUSH
4073: FOR_IN
4074: IFFALSE 4281
// if GetClass ( i ) = 3 then
4076: LD_VAR 0 2
4080: PPUSH
4081: CALL_OW 257
4085: PUSH
4086: LD_INT 3
4088: EQUAL
4089: IFFALSE 4237
// begin m := m + 1 ;
4091: LD_ADDR_VAR 0 6
4095: PUSH
4096: LD_VAR 0 6
4100: PUSH
4101: LD_INT 1
4103: PLUS
4104: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4105: LD_ADDR_VAR 0 5
4109: PUSH
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 1
4115: PPUSH
4116: LD_INT 2
4118: PUSH
4119: LD_INT 3
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: LD_INT 1
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_VAR 0 6
4138: PUSH
4139: LD_INT 4
4141: MOD
4142: PUSH
4143: LD_INT 1
4145: PLUS
4146: ARRAY
4147: PPUSH
4148: LD_INT 2
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: LD_INT 4
4156: PUSH
4157: LD_INT 5
4159: PUSH
4160: LD_INT 3
4162: PUSH
4163: LD_INT 11
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: PUSH
4172: LD_VAR 0 6
4176: PUSH
4177: LD_INT 4
4179: MOD
4180: PUSH
4181: LD_INT 1
4183: PLUS
4184: ARRAY
4185: PPUSH
4186: LD_INT 60
4188: PPUSH
4189: CALL 520 0 7
4193: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4194: LD_VAR 0 5
4198: PPUSH
4199: LD_INT 2
4201: PPUSH
4202: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4206: LD_VAR 0 5
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_INT 0
4216: PPUSH
4217: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4221: LD_VAR 0 2
4225: PPUSH
4226: LD_VAR 0 5
4230: PPUSH
4231: CALL_OW 52
// end else
4235: GO 4279
// begin if GetClass ( i ) = 2 then
4237: LD_VAR 0 2
4241: PPUSH
4242: CALL_OW 257
4246: PUSH
4247: LD_INT 2
4249: EQUAL
4250: IFFALSE 4264
// SetClass ( i , 1 ) ;
4252: LD_VAR 0 2
4256: PPUSH
4257: LD_INT 1
4259: PPUSH
4260: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4264: LD_VAR 0 2
4268: PPUSH
4269: LD_INT 1
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL_OW 49
// end ;
4279: GO 4073
4281: POP
4282: POP
// uc_side := 4 ;
4283: LD_ADDR_OWVAR 20
4287: PUSH
4288: LD_INT 4
4290: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4291: LD_ADDR_EXP 19
4295: PUSH
4296: LD_STRING Harisson
4298: PPUSH
4299: LD_INT 0
4301: PPUSH
4302: LD_STRING 
4304: PPUSH
4305: CALL 34694 0 3
4309: ST_TO_ADDR
// PrepareScout ;
4310: CALL 4319 0 0
// end ;
4314: LD_VAR 0 1
4318: RET
// function PrepareScout ; var ape ; begin
4319: LD_INT 0
4321: PPUSH
4322: PPUSH
// uc_side := 4 ;
4323: LD_ADDR_OWVAR 20
4327: PUSH
4328: LD_INT 4
4330: ST_TO_ADDR
// uc_nation := 1 ;
4331: LD_ADDR_OWVAR 21
4335: PUSH
4336: LD_INT 1
4338: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4339: LD_STRING FrankIn06
4341: PPUSH
4342: LD_INT 0
4344: PPUSH
4345: CALL_OW 30
4349: IFFALSE 4366
// Frank := CreateCharacter ( 06c_Frank ) else
4351: LD_ADDR_EXP 15
4355: PUSH
4356: LD_STRING 06c_Frank
4358: PPUSH
4359: CALL_OW 34
4363: ST_TO_ADDR
4364: GO 4406
// if LoadVariable ( FrankInDelta , 0 ) then
4366: LD_STRING FrankInDelta
4368: PPUSH
4369: LD_INT 0
4371: PPUSH
4372: CALL_OW 30
4376: IFFALSE 4393
// Frank := CreateCharacter ( 05_Frank ) else
4378: LD_ADDR_EXP 15
4382: PUSH
4383: LD_STRING 05_Frank
4385: PPUSH
4386: CALL_OW 34
4390: ST_TO_ADDR
4391: GO 4406
// Frank := CreateCharacter ( 04_Frank ) ;
4393: LD_ADDR_EXP 15
4397: PUSH
4398: LD_STRING 04_Frank
4400: PPUSH
4401: CALL_OW 34
4405: ST_TO_ADDR
// if Frank then
4406: LD_EXP 15
4410: IFFALSE 4543
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4412: LD_EXP 15
4416: PPUSH
4417: LD_INT 2
4419: PPUSH
4420: LD_INT 0
4422: PPUSH
4423: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4427: LD_EXP 15
4431: PPUSH
4432: LD_INT 1
4434: PPUSH
4435: CALL_OW 336
// uc_side := 0 ;
4439: LD_ADDR_OWVAR 20
4443: PUSH
4444: LD_INT 0
4446: ST_TO_ADDR
// uc_nation := 0 ;
4447: LD_ADDR_OWVAR 21
4451: PUSH
4452: LD_INT 0
4454: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4455: LD_INT 0
4457: PPUSH
4458: LD_INT 12
4460: PPUSH
4461: LD_INT 0
4463: PPUSH
4464: CALL_OW 380
// ape := CreateHuman ;
4468: LD_ADDR_VAR 0 2
4472: PUSH
4473: CALL_OW 44
4477: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4478: LD_VAR 0 2
4482: PPUSH
4483: LD_EXP 15
4487: PPUSH
4488: CALL_OW 250
4492: PPUSH
4493: LD_EXP 15
4497: PPUSH
4498: CALL_OW 251
4502: PPUSH
4503: LD_INT 5
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4513: LD_VAR 0 2
4517: PPUSH
4518: LD_EXP 15
4522: PPUSH
4523: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4527: LD_EXP 15
4531: PPUSH
4532: LD_VAR 0 2
4536: PPUSH
4537: CALL_OW 119
// exit ;
4541: GO 4586
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4543: LD_ADDR_EXP 18
4547: PUSH
4548: LD_STRING Yamoko
4550: PPUSH
4551: LD_INT 0
4553: PPUSH
4554: LD_STRING 
4556: PPUSH
4557: CALL 34694 0 3
4561: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4562: LD_EXP 18
4566: PPUSH
4567: LD_INT 2
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
// ComHold ( Kikuchi ) ;
4577: LD_EXP 18
4581: PPUSH
4582: CALL_OW 140
// end ; end_of_file
4586: LD_VAR 0 1
4590: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4591: LD_INT 0
4593: PPUSH
4594: PPUSH
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
4600: PPUSH
4601: PPUSH
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
4606: PPUSH
4607: PPUSH
4608: PPUSH
// ru_rebuild_list := [ ] ;
4609: LD_ADDR_EXP 20
4613: PUSH
4614: EMPTY
4615: ST_TO_ADDR
// uc_side := 3 ;
4616: LD_ADDR_OWVAR 20
4620: PUSH
4621: LD_INT 3
4623: ST_TO_ADDR
// uc_nation := 3 ;
4624: LD_ADDR_OWVAR 21
4628: PUSH
4629: LD_INT 3
4631: ST_TO_ADDR
// if Difficulty > 1 then
4632: LD_OWVAR 67
4636: PUSH
4637: LD_INT 1
4639: GREATER
4640: IFFALSE 4807
// begin bc_type := b_breastwork ;
4642: LD_ADDR_OWVAR 42
4646: PUSH
4647: LD_INT 31
4649: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4650: LD_INT 78
4652: PPUSH
4653: LD_INT 74
4655: PPUSH
4656: LD_INT 2
4658: PPUSH
4659: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4663: LD_INT 171
4665: PPUSH
4666: LD_INT 193
4668: PPUSH
4669: LD_INT 4
4671: PPUSH
4672: CALL_OW 47
// bc_type := b_turret ;
4676: LD_ADDR_OWVAR 42
4680: PUSH
4681: LD_INT 33
4683: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4684: LD_INT 129
4686: PPUSH
4687: LD_INT 96
4689: PPUSH
4690: LD_INT 3
4692: PPUSH
4693: CALL_OW 47
// if Difficulty > 2 then
4697: LD_OWVAR 67
4701: PUSH
4702: LD_INT 2
4704: GREATER
4705: IFFALSE 4776
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4707: LD_INT 83
4709: PPUSH
4710: LD_INT 141
4712: PPUSH
4713: CALL_OW 428
4717: PPUSH
4718: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4722: LD_INT 78
4724: PPUSH
4725: LD_INT 133
4727: PPUSH
4728: CALL_OW 428
4732: PPUSH
4733: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4737: LD_INT 83
4739: PPUSH
4740: LD_INT 141
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4750: LD_INT 78
4752: PPUSH
4753: LD_INT 133
4755: PPUSH
4756: LD_INT 2
4758: PPUSH
4759: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4763: LD_INT 145
4765: PPUSH
4766: LD_INT 112
4768: PPUSH
4769: LD_INT 3
4771: PPUSH
4772: CALL_OW 47
// end ; if Difficulty > 3 then
4776: LD_OWVAR 67
4780: PUSH
4781: LD_INT 3
4783: GREATER
4784: IFFALSE 4807
// begin bc_type := b_bunker ;
4786: LD_ADDR_OWVAR 42
4790: PUSH
4791: LD_INT 32
4793: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4794: LD_INT 44
4796: PPUSH
4797: LD_INT 50
4799: PPUSH
4800: LD_INT 4
4802: PPUSH
4803: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4807: LD_ADDR_VAR 0 9
4811: PUSH
4812: LD_INT 22
4814: PUSH
4815: LD_INT 3
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 2
4824: PUSH
4825: LD_INT 30
4827: PUSH
4828: LD_INT 0
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: LD_INT 30
4837: PUSH
4838: LD_INT 1
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: PPUSH
4854: CALL_OW 69
4858: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4859: LD_ADDR_VAR 0 10
4863: PUSH
4864: LD_INT 22
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: LD_INT 30
4879: PUSH
4880: LD_INT 6
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 30
4889: PUSH
4890: LD_INT 7
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 30
4899: PUSH
4900: LD_INT 8
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PPUSH
4917: CALL_OW 69
4921: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4922: LD_ADDR_VAR 0 11
4926: PUSH
4927: LD_INT 22
4929: PUSH
4930: LD_INT 3
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 30
4939: PUSH
4940: LD_INT 3
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PPUSH
4951: CALL_OW 69
4955: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4956: LD_ADDR_VAR 0 12
4960: PUSH
4961: LD_INT 22
4963: PUSH
4964: LD_INT 3
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 30
4973: PUSH
4974: LD_INT 31
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PPUSH
4985: CALL_OW 69
4989: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4990: LD_ADDR_VAR 0 13
4994: PUSH
4995: LD_INT 22
4997: PUSH
4998: LD_INT 3
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 30
5007: PUSH
5008: LD_INT 32
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PPUSH
5019: CALL_OW 69
5023: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5024: LD_ADDR_VAR 0 14
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 30
5041: PUSH
5042: LD_INT 33
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PPUSH
5053: CALL_OW 69
5057: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5058: LD_ADDR_VAR 0 15
5062: PUSH
5063: LD_INT 42
5065: PUSH
5066: LD_INT 5
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 43
5075: PUSH
5076: LD_INT 50
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 44
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: LD_INT 46
5095: PUSH
5096: LD_INT 15
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5109: LD_ADDR_VAR 0 16
5113: PUSH
5114: LD_INT 0
5116: PUSH
5117: LD_INT 4
5119: PUSH
5120: LD_INT 6
5122: PUSH
5123: LD_INT 3
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5132: LD_ADDR_VAR 0 6
5136: PUSH
5137: LD_INT 4
5139: PUSH
5140: LD_INT 5
5142: PUSH
5143: LD_INT 6
5145: PUSH
5146: LD_INT 7
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: PUSH
5155: LD_OWVAR 67
5159: ARRAY
5160: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5161: LD_INT 16
5163: PPUSH
5164: LD_STRING am_tukh
5166: PPUSH
5167: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5171: LD_ADDR_VAR 0 2
5175: PUSH
5176: LD_INT 21
5178: PUSH
5179: LD_INT 3
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PPUSH
5186: CALL_OW 69
5190: PUSH
5191: FOR_IN
5192: IFFALSE 5229
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5194: LD_VAR 0 2
5198: PPUSH
5199: LD_INT 4
5201: PUSH
5202: LD_INT 5
5204: PUSH
5205: LD_INT 6
5207: PUSH
5208: LD_INT 7
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: PUSH
5217: LD_OWVAR 67
5221: ARRAY
5222: PPUSH
5223: CALL_OW 241
5227: GO 5191
5229: POP
5230: POP
// for i in dep_list do
5231: LD_ADDR_VAR 0 2
5235: PUSH
5236: LD_VAR 0 9
5240: PUSH
5241: FOR_IN
5242: IFFALSE 5286
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5244: LD_VAR 0 2
5248: PPUSH
5249: CALL_OW 274
5253: PPUSH
5254: LD_INT 1
5256: PPUSH
5257: LD_INT 1000
5259: PPUSH
5260: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5264: LD_VAR 0 2
5268: PPUSH
5269: CALL_OW 274
5273: PPUSH
5274: LD_INT 2
5276: PPUSH
5277: LD_INT 1000
5279: PPUSH
5280: CALL_OW 277
// end ;
5284: GO 5241
5286: POP
5287: POP
// InitHc ;
5288: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 70 , 80 ] [ Difficulty ] div 100 ;
5292: LD_ADDR_VAR 0 8
5296: PUSH
5297: LD_VAR 0 13
5301: PUSH
5302: LD_INT 45
5304: PUSH
5305: LD_INT 60
5307: PUSH
5308: LD_INT 70
5310: PUSH
5311: LD_INT 80
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: PUSH
5320: LD_OWVAR 67
5324: ARRAY
5325: MUL
5326: PUSH
5327: LD_INT 100
5329: DIV
5330: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5331: LD_ADDR_VAR 0 16
5335: PUSH
5336: LD_VAR 0 16
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: LD_VAR 0 8
5348: PPUSH
5349: CALL_OW 1
5353: ST_TO_ADDR
// tmp := [ ] ;
5354: LD_ADDR_VAR 0 8
5358: PUSH
5359: EMPTY
5360: ST_TO_ADDR
// for i in bunker_list do
5361: LD_ADDR_VAR 0 2
5365: PUSH
5366: LD_VAR 0 13
5370: PUSH
5371: FOR_IN
5372: IFFALSE 5468
// if i mod 10 + 1 < tmp then
5374: LD_VAR 0 2
5378: PUSH
5379: LD_INT 10
5381: MOD
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: PUSH
5387: LD_VAR 0 8
5391: LESS
5392: IFFALSE 5437
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5394: LD_ADDR_VAR 0 8
5398: PUSH
5399: LD_VAR 0 8
5403: PPUSH
5404: LD_VAR 0 2
5408: PUSH
5409: LD_INT 3
5411: PPUSH
5412: LD_INT 5
5414: PPUSH
5415: CALL_OW 12
5419: MOD
5420: PUSH
5421: LD_INT 1
5423: PLUS
5424: PPUSH
5425: LD_VAR 0 2
5429: PPUSH
5430: CALL_OW 2
5434: ST_TO_ADDR
5435: GO 5466
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5437: LD_ADDR_VAR 0 8
5441: PUSH
5442: LD_VAR 0 8
5446: PPUSH
5447: LD_VAR 0 8
5451: PUSH
5452: LD_INT 1
5454: PLUS
5455: PPUSH
5456: LD_VAR 0 2
5460: PPUSH
5461: CALL_OW 2
5465: ST_TO_ADDR
5466: GO 5371
5468: POP
5469: POP
// bunker_list := tmp ;
5470: LD_ADDR_VAR 0 13
5474: PUSH
5475: LD_VAR 0 8
5479: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5480: LD_ADDR_VAR 0 2
5484: PUSH
5485: LD_VAR 0 13
5489: PUSH
5490: LD_VAR 0 14
5494: ADD
5495: PUSH
5496: FOR_IN
5497: IFFALSE 5520
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5499: LD_VAR 0 2
5503: PPUSH
5504: LD_VAR 0 2
5508: PPUSH
5509: CALL 2229 0 1
5513: PPUSH
5514: CALL_OW 431
5518: GO 5496
5520: POP
5521: POP
// while ( personel_counter [ 1 ] ) do
5522: LD_VAR 0 16
5526: PUSH
5527: LD_INT 1
5529: ARRAY
5530: IFFALSE 5638
// begin i := rand ( 1 , bunker_list ) ;
5532: LD_ADDR_VAR 0 2
5536: PUSH
5537: LD_INT 1
5539: PPUSH
5540: LD_VAR 0 13
5544: PPUSH
5545: CALL_OW 12
5549: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5550: LD_INT 0
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: LD_VAR 0 6
5560: PPUSH
5561: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5565: CALL_OW 44
5569: PPUSH
5570: LD_VAR 0 13
5574: PUSH
5575: LD_VAR 0 2
5579: ARRAY
5580: PPUSH
5581: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5585: LD_ADDR_VAR 0 13
5589: PUSH
5590: LD_VAR 0 13
5594: PPUSH
5595: LD_VAR 0 2
5599: PPUSH
5600: CALL_OW 3
5604: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5605: LD_ADDR_VAR 0 16
5609: PUSH
5610: LD_VAR 0 16
5614: PPUSH
5615: LD_INT 1
5617: PPUSH
5618: LD_VAR 0 16
5622: PUSH
5623: LD_INT 1
5625: ARRAY
5626: PUSH
5627: LD_INT 1
5629: MINUS
5630: PPUSH
5631: CALL_OW 1
5635: ST_TO_ADDR
// end ;
5636: GO 5522
// for i = 1 to personel_counter [ 2 ] do
5638: LD_ADDR_VAR 0 2
5642: PUSH
5643: DOUBLE
5644: LD_INT 1
5646: DEC
5647: ST_TO_ADDR
5648: LD_VAR 0 16
5652: PUSH
5653: LD_INT 2
5655: ARRAY
5656: PUSH
5657: FOR_TO
5658: IFFALSE 5689
// begin PrepareHuman ( false , 2 , skill ) ;
5660: LD_INT 0
5662: PPUSH
5663: LD_INT 2
5665: PPUSH
5666: LD_VAR 0 6
5670: PPUSH
5671: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5675: CALL_OW 44
5679: PPUSH
5680: LD_INT 16
5682: PPUSH
5683: CALL_OW 52
// end ;
5687: GO 5657
5689: POP
5690: POP
// for i = 1 to personel_counter [ 3 ] do
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: DOUBLE
5697: LD_INT 1
5699: DEC
5700: ST_TO_ADDR
5701: LD_VAR 0 16
5705: PUSH
5706: LD_INT 3
5708: ARRAY
5709: PUSH
5710: FOR_TO
5711: IFFALSE 5758
// begin PrepareHuman ( false , 3 , skill ) ;
5713: LD_INT 0
5715: PPUSH
5716: LD_INT 3
5718: PPUSH
5719: LD_VAR 0 6
5723: PPUSH
5724: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5728: CALL_OW 44
5732: PPUSH
5733: LD_VAR 0 11
5737: PUSH
5738: LD_VAR 0 2
5742: PUSH
5743: LD_INT 2
5745: MOD
5746: PUSH
5747: LD_INT 1
5749: PLUS
5750: ARRAY
5751: PPUSH
5752: CALL_OW 52
// end ;
5756: GO 5710
5758: POP
5759: POP
// for i = 1 to personel_counter [ 4 ] do
5760: LD_ADDR_VAR 0 2
5764: PUSH
5765: DOUBLE
5766: LD_INT 1
5768: DEC
5769: ST_TO_ADDR
5770: LD_VAR 0 16
5774: PUSH
5775: LD_INT 4
5777: ARRAY
5778: PUSH
5779: FOR_TO
5780: IFFALSE 5817
// begin PrepareHuman ( false , 4 , skill ) ;
5782: LD_INT 0
5784: PPUSH
5785: LD_INT 4
5787: PPUSH
5788: LD_VAR 0 6
5792: PPUSH
5793: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5797: CALL_OW 44
5801: PPUSH
5802: LD_VAR 0 10
5806: PUSH
5807: LD_INT 1
5809: ARRAY
5810: PPUSH
5811: CALL_OW 52
// end ;
5815: GO 5779
5817: POP
5818: POP
// for i in breastworks_list do
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: LD_VAR 0 12
5828: PUSH
5829: FOR_IN
5830: IFFALSE 5942
// begin r := GetDir ( i ) ;
5832: LD_ADDR_VAR 0 4
5836: PUSH
5837: LD_VAR 0 2
5841: PPUSH
5842: CALL_OW 254
5846: ST_TO_ADDR
// if r > 3 then
5847: LD_VAR 0 4
5851: PUSH
5852: LD_INT 3
5854: GREATER
5855: IFFALSE 5873
// r := r - 3 else
5857: LD_ADDR_VAR 0 4
5861: PUSH
5862: LD_VAR 0 4
5866: PUSH
5867: LD_INT 3
5869: MINUS
5870: ST_TO_ADDR
5871: GO 5887
// r := r + 3 ;
5873: LD_ADDR_VAR 0 4
5877: PUSH
5878: LD_VAR 0 4
5882: PUSH
5883: LD_INT 3
5885: PLUS
5886: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5887: LD_INT 0
5889: PPUSH
5890: LD_INT 1
5892: PPUSH
5893: LD_VAR 0 6
5897: PPUSH
5898: CALL_OW 380
// un := CreateHuman ;
5902: LD_ADDR_VAR 0 5
5906: PUSH
5907: CALL_OW 44
5911: ST_TO_ADDR
// SetDir ( un , r ) ;
5912: LD_VAR 0 5
5916: PPUSH
5917: LD_VAR 0 4
5921: PPUSH
5922: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5926: LD_VAR 0 5
5930: PPUSH
5931: LD_VAR 0 2
5935: PPUSH
5936: CALL_OW 52
// end ;
5940: GO 5829
5942: POP
5943: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5944: LD_ADDR_VAR 0 8
5948: PUSH
5949: LD_INT 22
5951: PUSH
5952: LD_INT 3
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 25
5961: PUSH
5962: LD_INT 3
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PPUSH
5973: CALL_OW 69
5977: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5978: LD_ADDR_VAR 0 4
5982: PUSH
5983: LD_INT 4
5985: PUSH
5986: LD_INT 5
5988: PUSH
5989: LD_INT 6
5991: PUSH
5992: LD_INT 6
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: PUSH
6001: LD_OWVAR 67
6005: ARRAY
6006: ST_TO_ADDR
// for i = 1 to r do
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: DOUBLE
6013: LD_INT 1
6015: DEC
6016: ST_TO_ADDR
6017: LD_VAR 0 4
6021: PUSH
6022: FOR_TO
6023: IFFALSE 6196
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6025: LD_ADDR_VAR 0 5
6029: PUSH
6030: LD_INT 3
6032: PPUSH
6033: LD_INT 3
6035: PPUSH
6036: LD_INT 22
6038: PUSH
6039: LD_INT 22
6041: PUSH
6042: LD_INT 24
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: PUSH
6050: LD_VAR 0 2
6054: PUSH
6055: LD_INT 3
6057: MOD
6058: PUSH
6059: LD_INT 1
6061: PLUS
6062: ARRAY
6063: PPUSH
6064: LD_INT 1
6066: PPUSH
6067: LD_INT 1
6069: PPUSH
6070: LD_INT 43
6072: PUSH
6073: LD_INT 44
6075: PUSH
6076: LD_INT 42
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_VAR 0 2
6088: PUSH
6089: LD_INT 3
6091: MOD
6092: PUSH
6093: LD_INT 1
6095: PLUS
6096: ARRAY
6097: PPUSH
6098: LD_INT 100
6100: PPUSH
6101: CALL 520 0 7
6105: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6106: LD_VAR 0 5
6110: PPUSH
6111: LD_INT 0
6113: PPUSH
6114: LD_INT 5
6116: PPUSH
6117: CALL_OW 12
6121: PPUSH
6122: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6126: LD_VAR 0 5
6130: PPUSH
6131: LD_INT 5
6133: PPUSH
6134: LD_INT 0
6136: PPUSH
6137: CALL_OW 49
// if i > tmp - 2 then
6141: LD_VAR 0 2
6145: PUSH
6146: LD_VAR 0 8
6150: PUSH
6151: LD_INT 2
6153: MINUS
6154: GREATER
6155: IFFALSE 6159
// continue ;
6157: GO 6022
// ComExitBuilding ( tmp [ i ] ) ;
6159: LD_VAR 0 8
6163: PUSH
6164: LD_VAR 0 2
6168: ARRAY
6169: PPUSH
6170: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6174: LD_VAR 0 8
6178: PUSH
6179: LD_VAR 0 2
6183: ARRAY
6184: PPUSH
6185: LD_VAR 0 5
6189: PPUSH
6190: CALL_OW 180
// end ;
6194: GO 6022
6196: POP
6197: POP
// end ;
6198: LD_VAR 0 1
6202: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6203: LD_INT 22
6205: PUSH
6206: LD_INT 3
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: LD_INT 25
6215: PUSH
6216: LD_INT 2
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PPUSH
6227: CALL_OW 69
6231: IFFALSE 6973
6233: GO 6235
6235: DISABLE
6236: LD_INT 0
6238: PPUSH
6239: PPUSH
6240: PPUSH
6241: PPUSH
6242: PPUSH
// begin enable ;
6243: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_INT 6
6251: PPUSH
6252: LD_INT 3
6254: PUSH
6255: LD_INT 24
6257: PUSH
6258: LD_INT 1000
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: LD_INT 21
6271: PUSH
6272: LD_INT 3
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 70
6287: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6288: LD_ADDR_VAR 0 4
6292: PUSH
6293: LD_INT 22
6295: PUSH
6296: LD_INT 3
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 25
6305: PUSH
6306: LD_INT 2
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PPUSH
6317: CALL_OW 69
6321: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6322: LD_VAR 0 2
6326: NOT
6327: IFFALSE 6336
6329: PUSH
6330: LD_EXP 20
6334: NOT
6335: AND
6336: IFFALSE 6410
// begin for i in engs do
6338: LD_ADDR_VAR 0 1
6342: PUSH
6343: LD_VAR 0 4
6347: PUSH
6348: FOR_IN
6349: IFFALSE 6408
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 256
6360: PUSH
6361: LD_INT 1000
6363: EQUAL
6364: IFFALSE 6378
6366: PUSH
6367: LD_VAR 0 1
6371: PPUSH
6372: CALL_OW 314
6376: NOT
6377: AND
6378: IFFALSE 6392
6380: PUSH
6381: LD_VAR 0 1
6385: PPUSH
6386: CALL_OW 310
6390: NOT
6391: AND
6392: IFFALSE 6406
// ComEnterUnit ( i , ru_dep_main ) ;
6394: LD_VAR 0 1
6398: PPUSH
6399: LD_INT 16
6401: PPUSH
6402: CALL_OW 120
6406: GO 6348
6408: POP
6409: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6410: LD_VAR 0 4
6414: PPUSH
6415: LD_INT 3
6417: PUSH
6418: LD_INT 24
6420: PUSH
6421: LD_INT 650
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PPUSH
6432: CALL_OW 72
6436: IFFALSE 6529
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6438: LD_ADDR_VAR 0 3
6442: PUSH
6443: LD_VAR 0 4
6447: PPUSH
6448: LD_INT 3
6450: PUSH
6451: LD_INT 24
6453: PUSH
6454: LD_INT 650
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PPUSH
6465: CALL_OW 72
6469: ST_TO_ADDR
// for i in tmp do
6470: LD_ADDR_VAR 0 1
6474: PUSH
6475: LD_VAR 0 3
6479: PUSH
6480: FOR_IN
6481: IFFALSE 6527
// if not IsInArea ( i , mainBaseArea ) then
6483: LD_VAR 0 1
6487: PPUSH
6488: LD_INT 14
6490: PPUSH
6491: CALL_OW 308
6495: NOT
6496: IFFALSE 6525
// begin ComMoveXY ( i , 129 , 125 ) ;
6498: LD_VAR 0 1
6502: PPUSH
6503: LD_INT 129
6505: PPUSH
6506: LD_INT 125
6508: PPUSH
6509: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6513: LD_VAR 0 1
6517: PPUSH
6518: LD_INT 1050
6520: PPUSH
6521: CALL_OW 202
// end ;
6525: GO 6480
6527: POP
6528: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6529: LD_ADDR_VAR 0 4
6533: PUSH
6534: LD_VAR 0 4
6538: PPUSH
6539: LD_INT 24
6541: PUSH
6542: LD_INT 650
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PPUSH
6549: CALL_OW 72
6553: ST_TO_ADDR
// if not engs then
6554: LD_VAR 0 4
6558: NOT
6559: IFFALSE 6563
// exit ;
6561: GO 6973
// if filter then
6563: LD_VAR 0 2
6567: IFFALSE 6828
// begin for i in engs do
6569: LD_ADDR_VAR 0 1
6573: PUSH
6574: LD_VAR 0 4
6578: PUSH
6579: FOR_IN
6580: IFFALSE 6604
// if IsInUnit ( i ) then
6582: LD_VAR 0 1
6586: PPUSH
6587: CALL_OW 310
6591: IFFALSE 6602
// ComExitBuilding ( i ) ;
6593: LD_VAR 0 1
6597: PPUSH
6598: CALL_OW 122
6602: GO 6579
6604: POP
6605: POP
// wait ( 3 ) ;
6606: LD_INT 3
6608: PPUSH
6609: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 2
6620: GREATEREQUAL
6621: IFFALSE 6633
6623: PUSH
6624: LD_VAR 0 4
6628: PUSH
6629: LD_INT 2
6631: GREATEREQUAL
6632: AND
6633: IFFALSE 6781
// begin for i = 1 to engs / 2 do
6635: LD_ADDR_VAR 0 1
6639: PUSH
6640: DOUBLE
6641: LD_INT 1
6643: DEC
6644: ST_TO_ADDR
6645: LD_VAR 0 4
6649: PUSH
6650: LD_INT 2
6652: DIVREAL
6653: PUSH
6654: FOR_TO
6655: IFFALSE 6701
// if not HasTask ( engs [ i ] ) then
6657: LD_VAR 0 4
6661: PUSH
6662: LD_VAR 0 1
6666: ARRAY
6667: PPUSH
6668: CALL_OW 314
6672: NOT
6673: IFFALSE 6699
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6675: LD_VAR 0 4
6679: PUSH
6680: LD_VAR 0 1
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 2
6690: PUSH
6691: LD_INT 1
6693: ARRAY
6694: PPUSH
6695: CALL_OW 130
6699: GO 6654
6701: POP
6702: POP
// for i = engs / 2 + 1 to engs do
6703: LD_ADDR_VAR 0 1
6707: PUSH
6708: DOUBLE
6709: LD_VAR 0 4
6713: PUSH
6714: LD_INT 2
6716: DIVREAL
6717: PUSH
6718: LD_INT 1
6720: PLUS
6721: DEC
6722: ST_TO_ADDR
6723: LD_VAR 0 4
6727: PUSH
6728: FOR_TO
6729: IFFALSE 6777
// if not HasTask ( engs [ i ] ) then
6731: LD_VAR 0 4
6735: PUSH
6736: LD_VAR 0 1
6740: ARRAY
6741: PPUSH
6742: CALL_OW 314
6746: NOT
6747: IFFALSE 6775
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6749: LD_VAR 0 4
6753: PUSH
6754: LD_VAR 0 1
6758: ARRAY
6759: PPUSH
6760: LD_VAR 0 2
6764: PUSH
6765: LD_VAR 0 2
6769: ARRAY
6770: PPUSH
6771: CALL_OW 130
6775: GO 6728
6777: POP
6778: POP
// end else
6779: GO 6828
// for i in engs do
6781: LD_ADDR_VAR 0 1
6785: PUSH
6786: LD_VAR 0 4
6790: PUSH
6791: FOR_IN
6792: IFFALSE 6826
// if not HasTask ( i ) then
6794: LD_VAR 0 1
6798: PPUSH
6799: CALL_OW 314
6803: NOT
6804: IFFALSE 6824
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6806: LD_VAR 0 1
6810: PPUSH
6811: LD_VAR 0 2
6815: PUSH
6816: LD_INT 1
6818: ARRAY
6819: PPUSH
6820: CALL_OW 130
6824: GO 6791
6826: POP
6827: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6828: LD_ADDR_VAR 0 5
6832: PUSH
6833: LD_INT 81
6835: PUSH
6836: LD_INT 3
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PPUSH
6843: CALL_OW 69
6847: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6848: LD_EXP 20
6852: IFFALSE 6861
6854: PUSH
6855: LD_VAR 0 2
6859: NOT
6860: AND
6861: IFFALSE 6973
// begin ComExitBuilding ( engs ) ;
6863: LD_VAR 0 4
6867: PPUSH
6868: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6872: LD_VAR 0 5
6876: PPUSH
6877: LD_EXP 20
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 3
6893: ARRAY
6894: PPUSH
6895: CALL_OW 73
6899: PPUSH
6900: LD_EXP 20
6904: PUSH
6905: LD_INT 2
6907: ARRAY
6908: PPUSH
6909: LD_EXP 20
6913: PUSH
6914: LD_INT 3
6916: ARRAY
6917: PPUSH
6918: CALL_OW 297
6922: PUSH
6923: LD_INT 10
6925: GREATER
6926: IFFALSE 6973
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6928: LD_VAR 0 4
6932: PPUSH
6933: LD_EXP 20
6937: PUSH
6938: LD_INT 1
6940: ARRAY
6941: PPUSH
6942: LD_EXP 20
6946: PUSH
6947: LD_INT 2
6949: ARRAY
6950: PPUSH
6951: LD_EXP 20
6955: PUSH
6956: LD_INT 3
6958: ARRAY
6959: PPUSH
6960: LD_EXP 20
6964: PUSH
6965: LD_INT 4
6967: ARRAY
6968: PPUSH
6969: CALL_OW 145
// end ; end ;
6973: PPOPN 5
6975: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6976: LD_INT 16
6978: PPUSH
6979: CALL_OW 256
6983: PUSH
6984: LD_INT 250
6986: LESS
6987: IFFALSE 7177
6989: GO 6991
6991: DISABLE
6992: LD_INT 0
6994: PPUSH
6995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6996: LD_ADDR_VAR 0 2
7000: PUSH
7001: LD_INT 22
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 2
7013: PUSH
7014: LD_INT 25
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 25
7026: PUSH
7027: LD_INT 3
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 25
7036: PUSH
7037: LD_INT 4
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7059: LD_VAR 0 2
7063: PPUSH
7064: CALL_OW 122
// wait ( 3 ) ;
7068: LD_INT 3
7070: PPUSH
7071: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7075: LD_VAR 0 2
7079: PPUSH
7080: LD_INT 156
7082: PPUSH
7083: LD_INT 211
7085: PPUSH
7086: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7090: LD_INT 35
7092: PPUSH
7093: CALL_OW 67
// for i in tmp do
7097: LD_ADDR_VAR 0 1
7101: PUSH
7102: LD_VAR 0 2
7106: PUSH
7107: FOR_IN
7108: IFFALSE 7168
// if IsInArea ( i , escapeArea ) then
7110: LD_VAR 0 1
7114: PPUSH
7115: LD_INT 15
7117: PPUSH
7118: CALL_OW 308
7122: IFFALSE 7151
// begin RemoveUnit ( i ) ;
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 64
// tmp := tmp diff i ;
7133: LD_ADDR_VAR 0 2
7137: PUSH
7138: LD_VAR 0 2
7142: PUSH
7143: LD_VAR 0 1
7147: DIFF
7148: ST_TO_ADDR
// end else
7149: GO 7166
// ComMoveXY ( i , 156 , 211 ) ;
7151: LD_VAR 0 1
7155: PPUSH
7156: LD_INT 156
7158: PPUSH
7159: LD_INT 211
7161: PPUSH
7162: CALL_OW 111
7166: GO 7107
7168: POP
7169: POP
// until not tmp ;
7170: LD_VAR 0 2
7174: NOT
7175: IFFALSE 7090
// end ;
7177: PPOPN 2
7179: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7180: LD_INT 22
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 25
7192: PUSH
7193: LD_INT 4
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PPUSH
7204: CALL_OW 69
7208: IFFALSE 7462
7210: GO 7212
7212: DISABLE
7213: LD_INT 0
7215: PPUSH
7216: PPUSH
7217: PPUSH
// begin enable ;
7218: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7219: LD_ADDR_VAR 0 2
7223: PUSH
7224: LD_INT 14
7226: PPUSH
7227: LD_INT 22
7229: PUSH
7230: LD_INT 3
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 1
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 3
7249: PUSH
7250: LD_INT 24
7252: PUSH
7253: LD_INT 1000
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PPUSH
7269: CALL_OW 70
7273: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7274: LD_ADDR_VAR 0 3
7278: PUSH
7279: LD_INT 22
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: LD_INT 25
7291: PUSH
7292: LD_INT 4
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 69
7307: ST_TO_ADDR
// if not doc then
7308: LD_VAR 0 3
7312: NOT
7313: IFFALSE 7317
// exit ;
7315: GO 7462
// if not tmp then
7317: LD_VAR 0 2
7321: NOT
7322: IFFALSE 7413
// begin if not IsInUnit ( doc [ 1 ] ) then
7324: LD_VAR 0 3
7328: PUSH
7329: LD_INT 1
7331: ARRAY
7332: PPUSH
7333: CALL_OW 310
7337: NOT
7338: IFFALSE 7411
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7340: LD_VAR 0 3
7344: PPUSH
7345: LD_INT 22
7347: PUSH
7348: LD_INT 3
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 2
7357: PUSH
7358: LD_INT 30
7360: PUSH
7361: LD_INT 6
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 30
7370: PUSH
7371: LD_INT 7
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 30
7380: PUSH
7381: LD_INT 8
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PPUSH
7398: CALL_OW 69
7402: PUSH
7403: LD_INT 1
7405: ARRAY
7406: PPUSH
7407: CALL_OW 120
// exit ;
7411: GO 7462
// end ; if IsInUnit ( doc [ 1 ] ) then
7413: LD_VAR 0 3
7417: PUSH
7418: LD_INT 1
7420: ARRAY
7421: PPUSH
7422: CALL_OW 310
7426: IFFALSE 7437
// ComExitBuilding ( doc ) ;
7428: LD_VAR 0 3
7432: PPUSH
7433: CALL_OW 122
// wait ( 3 ) ;
7437: LD_INT 3
7439: PPUSH
7440: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7444: LD_VAR 0 3
7448: PPUSH
7449: LD_VAR 0 2
7453: PUSH
7454: LD_INT 1
7456: ARRAY
7457: PPUSH
7458: CALL_OW 128
// end ;
7462: PPOPN 3
7464: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7465: LD_INT 22
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 25
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: IFFALSE 7525
7495: PUSH
7496: LD_INT 22
7498: PUSH
7499: LD_INT 3
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 21
7508: PUSH
7509: LD_INT 2
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PPUSH
7520: CALL_OW 69
7524: AND
7525: IFFALSE 8302
7527: GO 7529
7529: DISABLE
7530: LD_INT 0
7532: PPUSH
7533: PPUSH
7534: PPUSH
7535: PPUSH
7536: PPUSH
7537: PPUSH
// begin enable ;
7538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7539: LD_ADDR_VAR 0 2
7543: PUSH
7544: LD_INT 22
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 21
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: LD_INT 58
7569: PUSH
7570: EMPTY
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: PPUSH
7582: CALL_OW 69
7586: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7587: LD_ADDR_VAR 0 4
7591: PUSH
7592: LD_INT 10
7594: PUSH
7595: LD_INT 11
7597: PUSH
7598: LD_INT 12
7600: PUSH
7601: LD_INT 14
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: ST_TO_ADDR
// area := 0 ;
7610: LD_ADDR_VAR 0 5
7614: PUSH
7615: LD_INT 0
7617: ST_TO_ADDR
// attacking := false ;
7618: LD_ADDR_VAR 0 3
7622: PUSH
7623: LD_INT 0
7625: ST_TO_ADDR
// for i in tmp do
7626: LD_ADDR_VAR 0 1
7630: PUSH
7631: LD_VAR 0 2
7635: PUSH
7636: FOR_IN
7637: IFFALSE 8081
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7639: LD_VAR 0 1
7643: PPUSH
7644: LD_INT 22
7646: PUSH
7647: LD_INT 1
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: PPUSH
7659: LD_VAR 0 1
7663: PPUSH
7664: CALL_OW 74
7668: PPUSH
7669: CALL_OW 296
7673: PUSH
7674: LD_INT 10
7676: LESS
7677: IFFALSE 7691
7679: PUSH
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 314
7689: NOT
7690: AND
7691: IFFALSE 7705
7693: PUSH
7694: LD_VAR 0 1
7698: PPUSH
7699: CALL_OW 110
7703: NOT
7704: AND
7705: IFFALSE 7722
7707: PUSH
7708: LD_VAR 0 1
7712: PPUSH
7713: CALL_OW 256
7717: PUSH
7718: LD_INT 650
7720: GREATER
7721: AND
7722: IFFALSE 7766
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7724: LD_VAR 0 1
7728: PPUSH
7729: LD_INT 22
7731: PUSH
7732: LD_INT 1
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PPUSH
7739: CALL_OW 69
7743: PPUSH
7744: LD_VAR 0 1
7748: PPUSH
7749: CALL_OW 74
7753: PPUSH
7754: CALL_OW 115
// attacking := true ;
7758: LD_ADDR_VAR 0 3
7762: PUSH
7763: LD_INT 1
7765: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7766: LD_VAR 0 1
7770: PPUSH
7771: CALL_OW 110
7775: NOT
7776: IFFALSE 7793
7778: PUSH
7779: LD_VAR 0 1
7783: PPUSH
7784: CALL_OW 256
7788: PUSH
7789: LD_INT 650
7791: LESS
7792: AND
7793: IFFALSE 7810
7795: PUSH
7796: LD_VAR 0 1
7800: PPUSH
7801: CALL_OW 247
7805: PUSH
7806: LD_INT 2
7808: EQUAL
7809: AND
7810: IFFALSE 7839
// begin SetTag ( i , 1 ) ;
7812: LD_VAR 0 1
7816: PPUSH
7817: LD_INT 1
7819: PPUSH
7820: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7824: LD_VAR 0 1
7828: PPUSH
7829: LD_INT 130
7831: PPUSH
7832: LD_INT 139
7834: PPUSH
7835: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 110
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 7875
7854: PUSH
7855: LD_VAR 0 1
7859: PPUSH
7860: LD_INT 130
7862: PPUSH
7863: LD_INT 139
7865: PPUSH
7866: CALL_OW 297
7870: PUSH
7871: LD_INT 6
7873: LESS
7874: AND
7875: IFFALSE 7889
// SetTag ( i , 2 ) ;
7877: LD_VAR 0 1
7881: PPUSH
7882: LD_INT 2
7884: PPUSH
7885: CALL_OW 109
// if GetTag ( i ) = 2 then
7889: LD_VAR 0 1
7893: PPUSH
7894: CALL_OW 110
7898: PUSH
7899: LD_INT 2
7901: EQUAL
7902: IFFALSE 8039
// begin if GetLives ( i ) = 1000 then
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 256
7913: PUSH
7914: LD_INT 1000
7916: EQUAL
7917: IFFALSE 7933
// SetTag ( i , 3 ) else
7919: LD_VAR 0 1
7923: PPUSH
7924: LD_INT 3
7926: PPUSH
7927: CALL_OW 109
7931: GO 8039
// if IsDrivenBy ( i ) then
7933: LD_VAR 0 1
7937: PPUSH
7938: CALL_OW 311
7942: IFFALSE 8039
// begin mech := IsDrivenBy ( i ) ;
7944: LD_ADDR_VAR 0 6
7948: PUSH
7949: LD_VAR 0 1
7953: PPUSH
7954: CALL_OW 311
7958: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7959: LD_INT 1
7961: PPUSH
7962: LD_VAR 0 6
7966: PPUSH
7967: CALL_OW 292
7971: NOT
7972: IFFALSE 7989
7974: PUSH
7975: LD_VAR 0 6
7979: PPUSH
7980: CALL_OW 256
7984: PUSH
7985: LD_INT 1000
7987: LESS
7988: AND
7989: IFFALSE 8003
// SetLives ( mech , 1000 ) ;
7991: LD_VAR 0 6
7995: PPUSH
7996: LD_INT 1000
7998: PPUSH
7999: CALL_OW 234
// if not See ( 1 , i ) then
8003: LD_INT 1
8005: PPUSH
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 292
8015: NOT
8016: IFFALSE 8030
// SetFuel ( i , 100 ) ;
8018: LD_VAR 0 1
8022: PPUSH
8023: LD_INT 100
8025: PPUSH
8026: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
8030: LD_VAR 0 6
8034: PPUSH
8035: CALL 74564 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
8039: LD_VAR 0 1
8043: PPUSH
8044: CALL_OW 110
8048: PUSH
8049: LD_INT 3
8051: EQUAL
8052: IFFALSE 8065
8054: PUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: CALL_OW 311
8064: AND
8065: IFFALSE 8079
// SetTag ( i , 0 ) ;
8067: LD_VAR 0 1
8071: PPUSH
8072: LD_INT 0
8074: PPUSH
8075: CALL_OW 109
// end ;
8079: GO 7636
8081: POP
8082: POP
// if attacking then
8083: LD_VAR 0 3
8087: IFFALSE 8091
// exit ;
8089: GO 8302
// if can_end and tmp then
8091: LD_EXP 6
8095: IFFALSE 8103
8097: PUSH
8098: LD_VAR 0 2
8102: AND
8103: IFFALSE 8158
// begin for i in tmp do
8105: LD_ADDR_VAR 0 1
8109: PUSH
8110: LD_VAR 0 2
8114: PUSH
8115: FOR_IN
8116: IFFALSE 8154
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8118: LD_VAR 0 1
8122: PPUSH
8123: LD_INT 22
8125: PUSH
8126: LD_INT 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PPUSH
8133: CALL_OW 69
8137: PPUSH
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 74
8147: PPUSH
8148: CALL_OW 115
8152: GO 8115
8154: POP
8155: POP
// exit ;
8156: GO 8302
// end ; for i in areas do
8158: LD_ADDR_VAR 0 1
8162: PUSH
8163: LD_VAR 0 4
8167: PUSH
8168: FOR_IN
8169: IFFALSE 8206
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8171: LD_VAR 0 1
8175: PPUSH
8176: LD_INT 22
8178: PUSH
8179: LD_INT 1
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PPUSH
8186: CALL_OW 70
8190: IFFALSE 8204
// begin area := i ;
8192: LD_ADDR_VAR 0 5
8196: PUSH
8197: LD_VAR 0 1
8201: ST_TO_ADDR
// break ;
8202: GO 8206
// end ;
8204: GO 8168
8206: POP
8207: POP
// if area then
8208: LD_VAR 0 5
8212: IFFALSE 8302
// begin for i in tmp do
8214: LD_ADDR_VAR 0 1
8218: PUSH
8219: LD_VAR 0 2
8223: PUSH
8224: FOR_IN
8225: IFFALSE 8300
// begin if GetTag ( i ) then
8227: LD_VAR 0 1
8231: PPUSH
8232: CALL_OW 110
8236: IFFALSE 8240
// continue ;
8238: GO 8224
// if GetFuel ( i ) < 33 then
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 261
8249: PUSH
8250: LD_INT 33
8252: LESS
8253: IFFALSE 8267
// SetFuel ( i , 33 ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: LD_INT 33
8262: PPUSH
8263: CALL_OW 240
// if not IsInArea ( i , area ) then
8267: LD_VAR 0 1
8271: PPUSH
8272: LD_VAR 0 5
8276: PPUSH
8277: CALL_OW 308
8281: NOT
8282: IFFALSE 8298
// ComMoveToArea ( i , area ) ;
8284: LD_VAR 0 1
8288: PPUSH
8289: LD_VAR 0 5
8293: PPUSH
8294: CALL_OW 113
// end ;
8298: GO 8224
8300: POP
8301: POP
// end ; end ;
8302: PPOPN 6
8304: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8305: LD_OWVAR 67
8309: PUSH
8310: LD_INT 1
8312: GREATER
8313: IFFALSE 8602
8315: GO 8317
8317: DISABLE
8318: LD_INT 0
8320: PPUSH
8321: PPUSH
8322: PPUSH
8323: PPUSH
8324: PPUSH
8325: PPUSH
// begin uc_side := 3 ;
8326: LD_ADDR_OWVAR 20
8330: PUSH
8331: LD_INT 3
8333: ST_TO_ADDR
// uc_nation := 3 ;
8334: LD_ADDR_OWVAR 21
8338: PUSH
8339: LD_INT 3
8341: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8342: LD_ADDR_VAR 0 5
8346: PUSH
8347: LD_INT 18900
8349: PUSH
8350: LD_INT 14700
8352: PUSH
8353: LD_INT 12600
8355: PUSH
8356: LD_INT 11550
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: PUSH
8365: LD_OWVAR 67
8369: ARRAY
8370: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8371: LD_ADDR_VAR 0 6
8375: PUSH
8376: LD_INT 2
8378: PUSH
8379: LD_INT 2
8381: PUSH
8382: LD_INT 3
8384: PUSH
8385: LD_INT 3
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: PUSH
8394: LD_OWVAR 67
8398: ARRAY
8399: ST_TO_ADDR
// for i = 1 to count do
8400: LD_ADDR_VAR 0 1
8404: PUSH
8405: DOUBLE
8406: LD_INT 1
8408: DEC
8409: ST_TO_ADDR
8410: LD_VAR 0 6
8414: PUSH
8415: FOR_TO
8416: IFFALSE 8600
// begin wait ( time ) ;
8418: LD_VAR 0 5
8422: PPUSH
8423: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8427: LD_ADDR_VAR 0 2
8431: PUSH
8432: DOUBLE
8433: LD_INT 1
8435: DEC
8436: ST_TO_ADDR
8437: LD_INT 1
8439: PPUSH
8440: LD_OWVAR 67
8444: PPUSH
8445: CALL_OW 12
8449: PUSH
8450: FOR_TO
8451: IFFALSE 8596
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8453: LD_ADDR_VAR 0 4
8457: PUSH
8458: LD_INT 3
8460: PPUSH
8461: LD_INT 3
8463: PPUSH
8464: LD_INT 22
8466: PPUSH
8467: LD_INT 1
8469: PPUSH
8470: LD_INT 1
8472: PPUSH
8473: LD_INT 43
8475: PUSH
8476: LD_INT 44
8478: PUSH
8479: LD_INT 42
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: LIST
8486: PUSH
8487: LD_VAR 0 1
8491: PUSH
8492: LD_INT 3
8494: MOD
8495: PUSH
8496: LD_INT 1
8498: PLUS
8499: ARRAY
8500: PPUSH
8501: LD_INT 80
8503: PPUSH
8504: CALL 520 0 7
8508: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8509: LD_VAR 0 4
8513: PPUSH
8514: LD_INT 13
8516: PPUSH
8517: LD_INT 0
8519: PPUSH
8520: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8524: LD_INT 0
8526: PPUSH
8527: LD_INT 3
8529: PPUSH
8530: LD_INT 4
8532: PUSH
8533: LD_INT 5
8535: PUSH
8536: LD_INT 5
8538: PUSH
8539: LD_INT 7
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: PUSH
8548: LD_OWVAR 67
8552: ARRAY
8553: PPUSH
8554: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8558: CALL_OW 44
8562: PPUSH
8563: LD_VAR 0 4
8567: PPUSH
8568: CALL_OW 52
// wait ( 0 0$01 ) ;
8572: LD_INT 35
8574: PPUSH
8575: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8579: LD_VAR 0 4
8583: PPUSH
8584: LD_INT 143
8586: PPUSH
8587: LD_INT 143
8589: PPUSH
8590: CALL_OW 111
// end ;
8594: GO 8450
8596: POP
8597: POP
// end ;
8598: GO 8415
8600: POP
8601: POP
// end ;
8602: PPOPN 6
8604: END
// every 8 8$00 do var i , un , time ;
8605: GO 8607
8607: DISABLE
8608: LD_INT 0
8610: PPUSH
8611: PPUSH
8612: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8613: LD_ADDR_VAR 0 3
8617: PUSH
8618: LD_INT 6300
8620: PUSH
8621: LD_INT 2100
8623: PUSH
8624: LD_INT 1050
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: LIST
8631: ST_TO_ADDR
// wait ( time ) ;
8632: LD_VAR 0 3
8636: PPUSH
8637: CALL_OW 67
// uc_side := 3 ;
8641: LD_ADDR_OWVAR 20
8645: PUSH
8646: LD_INT 3
8648: ST_TO_ADDR
// uc_nation := 3 ;
8649: LD_ADDR_OWVAR 21
8653: PUSH
8654: LD_INT 3
8656: ST_TO_ADDR
// for i = 1 to 2 do
8657: LD_ADDR_VAR 0 1
8661: PUSH
8662: DOUBLE
8663: LD_INT 1
8665: DEC
8666: ST_TO_ADDR
8667: LD_INT 2
8669: PUSH
8670: FOR_TO
8671: IFFALSE 8734
// begin PrepareHuman ( false , 1 , 4 ) ;
8673: LD_INT 0
8675: PPUSH
8676: LD_INT 1
8678: PPUSH
8679: LD_INT 4
8681: PPUSH
8682: CALL_OW 380
// un := CreateHuman ;
8686: LD_ADDR_VAR 0 2
8690: PUSH
8691: CALL_OW 44
8695: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8696: LD_VAR 0 2
8700: PPUSH
8701: LD_INT 16
8703: PPUSH
8704: CALL_OW 52
// ComExitBuilding ( un ) ;
8708: LD_VAR 0 2
8712: PPUSH
8713: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8717: LD_VAR 0 2
8721: PPUSH
8722: LD_INT 41
8724: PPUSH
8725: LD_INT 76
8727: PPUSH
8728: CALL_OW 174
// end ;
8732: GO 8670
8734: POP
8735: POP
// end ; end_of_file
8736: PPOPN 3
8738: END
// export function Action ; begin
8739: LD_INT 0
8741: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8742: LD_INT 28
8744: PPUSH
8745: LD_INT 3
8747: PPUSH
8748: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8752: LD_INT 41
8754: PPUSH
8755: LD_INT 76
8757: PPUSH
8758: LD_INT 1
8760: PPUSH
8761: LD_INT 10
8763: PPUSH
8764: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8768: LD_INT 41
8770: PPUSH
8771: LD_INT 76
8773: PPUSH
8774: LD_INT 1
8776: PPUSH
8777: CALL_OW 331
// InGameOn ;
8781: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8785: LD_EXP 19
8789: PPUSH
8790: LD_STRING D2-Har-1
8792: PPUSH
8793: CALL_OW 94
// InGameOff ;
8797: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8801: LD_STRING M1
8803: PPUSH
8804: CALL_OW 337
// end ;
8808: LD_VAR 0 1
8812: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8813: LD_EXP 4
8817: PUSH
8818: LD_INT 1
8820: GREATER
8821: IFFALSE 8912
8823: GO 8825
8825: DISABLE
8826: LD_INT 0
8828: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8829: LD_ADDR_VAR 0 1
8833: PUSH
8834: LD_INT 1
8836: PPUSH
8837: CALL 608 0 1
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_STRING D2a-Sol1-1
8853: PPUSH
8854: CALL_OW 88
// if not un then
8858: LD_VAR 0 1
8862: NOT
8863: IFFALSE 8894
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8865: LD_ADDR_VAR 0 1
8869: PUSH
8870: LD_INT 2
8872: PPUSH
8873: CALL 608 0 1
8877: PUSH
8878: LD_INT 1
8880: ARRAY
8881: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_STRING D2a-FSol1-1
8889: PPUSH
8890: CALL_OW 88
// end ; if Khatam then
8894: LD_EXP 17
8898: IFFALSE 8912
// Say ( Khatam , D3b-Khat-3 ) ;
8900: LD_EXP 17
8904: PPUSH
8905: LD_STRING D3b-Khat-3
8907: PPUSH
8908: CALL_OW 88
// end ;
8912: PPOPN 1
8914: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8915: LD_EXP 15
8919: IFFALSE 8928
8921: PUSH
8922: LD_EXP 18
8926: NOT
8927: AND
8928: IFFALSE 8966
8930: PUSH
8931: LD_INT 22
8933: PUSH
8934: LD_INT 1
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 91
8943: PUSH
8944: LD_EXP 15
8948: PUSH
8949: LD_INT 7
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PPUSH
8961: CALL_OW 69
8965: AND
8966: IFFALSE 8979
8968: PUSH
8969: LD_EXP 15
8973: PPUSH
8974: CALL_OW 302
8978: AND
8979: IFFALSE 8991
8981: PUSH
8982: LD_INT 1
8984: PPUSH
8985: CALL_OW 463
8989: NOT
8990: AND
8991: IFFALSE 9003
8993: PUSH
8994: LD_INT 4
8996: PPUSH
8997: CALL_OW 463
9001: NOT
9002: AND
9003: IFFALSE 9590
9005: GO 9007
9007: DISABLE
9008: LD_INT 0
9010: PPUSH
9011: PPUSH
// begin InGameOn ;
9012: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
9016: LD_ADDR_VAR 0 2
9020: PUSH
9021: LD_INT 22
9023: PUSH
9024: LD_INT 0
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 25
9033: PUSH
9034: LD_INT 12
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PPUSH
9045: CALL_OW 69
9049: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
9050: LD_ADDR_VAR 0 2
9054: PUSH
9055: LD_VAR 0 2
9059: PPUSH
9060: LD_EXP 15
9064: PPUSH
9065: CALL_OW 74
9069: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9070: LD_ADDR_VAR 0 1
9074: PUSH
9075: LD_INT 22
9077: PUSH
9078: LD_INT 1
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: LD_INT 21
9087: PUSH
9088: LD_INT 1
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PUSH
9095: LD_INT 91
9097: PUSH
9098: LD_EXP 15
9102: PUSH
9103: LD_INT 20
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 69
9120: PUSH
9121: FOR_IN
9122: IFFALSE 9140
// ComTurnUnit ( i , Frank ) ;
9124: LD_VAR 0 1
9128: PPUSH
9129: LD_EXP 15
9133: PPUSH
9134: CALL_OW 119
9138: GO 9121
9140: POP
9141: POP
// SetSide ( Frank , 1 ) ;
9142: LD_EXP 15
9146: PPUSH
9147: LD_INT 1
9149: PPUSH
9150: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9154: LD_EXP 9
9158: PPUSH
9159: LD_EXP 15
9163: PPUSH
9164: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9168: LD_EXP 9
9172: PPUSH
9173: LD_EXP 15
9177: PPUSH
9178: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9182: LD_EXP 15
9186: PPUSH
9187: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9191: LD_EXP 15
9195: PPUSH
9196: LD_STRING D3a-Frank-1
9198: PPUSH
9199: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9203: LD_VAR 0 2
9207: PPUSH
9208: LD_INT 42
9210: PPUSH
9211: LD_INT 78
9213: PPUSH
9214: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9218: LD_VAR 0 2
9222: PPUSH
9223: LD_EXP 15
9227: PPUSH
9228: CALL_OW 179
// if Lisa then
9232: LD_EXP 14
9236: IFFALSE 9250
// Say ( Lisa , D3a-Lisa-1 ) ;
9238: LD_EXP 14
9242: PPUSH
9243: LD_STRING D3a-Lisa-1
9245: PPUSH
9246: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9250: LD_EXP 9
9254: PPUSH
9255: LD_STRING D3a-JMM-1
9257: PPUSH
9258: CALL_OW 88
// if Cyrus then
9262: LD_EXP 13
9266: IFFALSE 9280
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9268: LD_EXP 13
9272: PPUSH
9273: LD_STRING D3a-Cyrus-1
9275: PPUSH
9276: CALL_OW 88
// if GetRandom ( sex_male ) then
9280: LD_INT 1
9282: PPUSH
9283: CALL 608 0 1
9287: IFFALSE 9308
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9289: LD_INT 1
9291: PPUSH
9292: CALL 608 0 1
9296: PUSH
9297: LD_INT 1
9299: ARRAY
9300: PPUSH
9301: LD_STRING D3a-Sol1-1
9303: PPUSH
9304: CALL_OW 88
// if GetRandom ( sex_female ) then
9308: LD_INT 2
9310: PPUSH
9311: CALL 608 0 1
9315: IFFALSE 9336
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9317: LD_INT 2
9319: PPUSH
9320: CALL 608 0 1
9324: PUSH
9325: LD_INT 1
9327: ARRAY
9328: PPUSH
9329: LD_STRING D3a-FSol1-1
9331: PPUSH
9332: CALL_OW 88
// if Gladstone then
9336: LD_EXP 16
9340: IFFALSE 9354
// Say ( Gladstone , D3a-Glad-1 ) ;
9342: LD_EXP 16
9346: PPUSH
9347: LD_STRING D3a-Glad-1
9349: PPUSH
9350: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9354: LD_VAR 0 2
9358: PPUSH
9359: LD_INT 60
9361: PPUSH
9362: LD_INT 113
9364: PPUSH
9365: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9369: LD_EXP 15
9373: PPUSH
9374: LD_STRING D3a-Frank-2
9376: PPUSH
9377: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9381: LD_EXP 15
9385: PPUSH
9386: LD_EXP 9
9390: PPUSH
9391: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9395: LD_EXP 9
9399: PPUSH
9400: LD_STRING D3a-JMM-2
9402: PPUSH
9403: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9407: LD_INT 1
9409: PPUSH
9410: LD_INT 4
9412: PPUSH
9413: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9417: LD_INT 85
9419: PPUSH
9420: LD_INT 134
9422: PPUSH
9423: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9427: LD_EXP 15
9431: PPUSH
9432: LD_STRING D3a-Frank-3
9434: PPUSH
9435: CALL_OW 88
// Wait ( 0 0$01 ) ;
9439: LD_INT 35
9441: PPUSH
9442: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9446: LD_INT 166
9448: PPUSH
9449: LD_INT 136
9451: PPUSH
9452: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9456: LD_EXP 9
9460: PPUSH
9461: LD_STRING D3a-JMM-3
9463: PPUSH
9464: CALL_OW 88
// Wait ( 0 0$01 ) ;
9468: LD_INT 35
9470: PPUSH
9471: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9475: LD_EXP 15
9479: PPUSH
9480: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9484: LD_EXP 15
9488: PPUSH
9489: LD_STRING D3a-Frank-4
9491: PPUSH
9492: CALL_OW 88
// if Lisa then
9496: LD_EXP 14
9500: IFFALSE 9514
// Say ( Lisa , D3a-Lisa-4 ) ;
9502: LD_EXP 14
9506: PPUSH
9507: LD_STRING D3a-Lisa-4
9509: PPUSH
9510: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9514: LD_EXP 9
9518: PPUSH
9519: LD_STRING D3a-JMM-4
9521: PPUSH
9522: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9526: LD_EXP 15
9530: PPUSH
9531: LD_STRING D3a-Frank-5
9533: PPUSH
9534: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9538: LD_EXP 9
9542: PPUSH
9543: LD_STRING D3a-JMM-5
9545: PPUSH
9546: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9550: LD_EXP 15
9554: PPUSH
9555: LD_STRING D3a-Frank-6
9557: PPUSH
9558: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9562: LD_EXP 9
9566: PPUSH
9567: LD_STRING D3a-JMM-6
9569: PPUSH
9570: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9574: LD_EXP 15
9578: PPUSH
9579: LD_STRING D3a-Frank-7
9581: PPUSH
9582: CALL_OW 88
// InGameOff ;
9586: CALL_OW 9
// end ;
9590: PPOPN 2
9592: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9593: LD_EXP 18
9597: IFFALSE 9606
9599: PUSH
9600: LD_EXP 15
9604: NOT
9605: AND
9606: IFFALSE 9644
9608: PUSH
9609: LD_INT 22
9611: PUSH
9612: LD_INT 1
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 91
9621: PUSH
9622: LD_EXP 18
9626: PUSH
9627: LD_INT 7
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PPUSH
9639: CALL_OW 69
9643: AND
9644: IFFALSE 9657
9646: PUSH
9647: LD_EXP 18
9651: PPUSH
9652: CALL_OW 302
9656: AND
9657: IFFALSE 9669
9659: PUSH
9660: LD_INT 1
9662: PPUSH
9663: CALL_OW 463
9667: NOT
9668: AND
9669: IFFALSE 9681
9671: PUSH
9672: LD_INT 4
9674: PPUSH
9675: CALL_OW 463
9679: NOT
9680: AND
9681: IFFALSE 9861
9683: GO 9685
9685: DISABLE
// begin InGameOn ;
9686: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9690: LD_EXP 9
9694: PPUSH
9695: LD_EXP 18
9699: PPUSH
9700: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9704: LD_EXP 18
9708: PPUSH
9709: LD_EXP 9
9713: PPUSH
9714: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9718: LD_EXP 18
9722: PPUSH
9723: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9727: LD_EXP 18
9731: PPUSH
9732: LD_STRING D3b-Yam-1
9734: PPUSH
9735: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9739: LD_EXP 9
9743: PPUSH
9744: LD_STRING D3b-JMM-1
9746: PPUSH
9747: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9751: LD_INT 1
9753: PPUSH
9754: LD_INT 4
9756: PPUSH
9757: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9761: LD_INT 85
9763: PPUSH
9764: LD_INT 134
9766: PPUSH
9767: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9771: LD_EXP 18
9775: PPUSH
9776: LD_STRING D3b-Yam-2
9778: PPUSH
9779: CALL_OW 88
// Wait ( 0 0$01 ) ;
9783: LD_INT 35
9785: PPUSH
9786: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9790: LD_EXP 9
9794: PPUSH
9795: LD_STRING D3b-JMM-2
9797: PPUSH
9798: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9802: LD_INT 166
9804: PPUSH
9805: LD_INT 136
9807: PPUSH
9808: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9812: LD_EXP 18
9816: PPUSH
9817: LD_STRING D3b-Yam-3
9819: PPUSH
9820: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9824: LD_EXP 9
9828: PPUSH
9829: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9833: LD_EXP 9
9837: PPUSH
9838: LD_STRING D3b-JMM-3a
9840: PPUSH
9841: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9845: LD_EXP 18
9849: PPUSH
9850: LD_INT 1
9852: PPUSH
9853: CALL_OW 235
// InGameOff ;
9857: CALL_OW 9
// end ;
9861: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9862: LD_INT 7
9864: PPUSH
9865: LD_INT 22
9867: PUSH
9868: LD_INT 1
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 3
9877: PUSH
9878: LD_INT 24
9880: PUSH
9881: LD_INT 1000
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PPUSH
9896: CALL_OW 70
9900: IFFALSE 10360
9902: GO 9904
9904: DISABLE
9905: LD_INT 0
9907: PPUSH
9908: PPUSH
9909: PPUSH
9910: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9911: LD_INT 35
9913: PPUSH
9914: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9918: LD_ADDR_VAR 0 1
9922: PUSH
9923: LD_INT 7
9925: PPUSH
9926: LD_INT 22
9928: PUSH
9929: LD_INT 1
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: LD_INT 24
9941: PUSH
9942: LD_INT 1000
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PPUSH
9957: CALL_OW 70
9961: ST_TO_ADDR
// if not un then
9962: LD_VAR 0 1
9966: NOT
9967: IFFALSE 9971
// continue ;
9969: GO 9911
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9971: LD_ADDR_VAR 0 3
9975: PUSH
9976: LD_VAR 0 1
9980: PUSH
9981: LD_INT 1
9983: ARRAY
9984: PPUSH
9985: CALL 2057 0 1
9989: ST_TO_ADDR
// until tw ;
9990: LD_VAR 0 3
9994: IFFALSE 9911
// DialogueOn ;
9996: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
10000: LD_VAR 0 3
10004: PPUSH
10005: CALL_OW 87
// if Lisa then
10009: LD_EXP 14
10013: IFFALSE 10041
// begin Say ( Lisa , D5-Lisa-1 ) ;
10015: LD_EXP 14
10019: PPUSH
10020: LD_STRING D5-Lisa-1
10022: PPUSH
10023: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
10027: LD_EXP 9
10031: PPUSH
10032: LD_STRING D5-JMM-1a
10034: PPUSH
10035: CALL_OW 88
// end else
10039: GO 10053
// Say ( JMM , D5-JMM-1 ) ;
10041: LD_EXP 9
10045: PPUSH
10046: LD_STRING D5-JMM-1
10048: PPUSH
10049: CALL_OW 88
// DialogueOff ;
10053: CALL_OW 7
// while ( true ) do
10057: LD_INT 1
10059: IFFALSE 10115
// begin wait ( 0 0$01 ) ;
10061: LD_INT 35
10063: PPUSH
10064: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
10068: LD_ADDR_VAR 0 2
10072: PUSH
10073: LD_INT 8
10075: PPUSH
10076: LD_INT 30
10078: PUSH
10079: LD_INT 26
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 101
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PPUSH
10100: CALL_OW 71
10104: ST_TO_ADDR
// if x then
10105: LD_VAR 0 2
10109: IFFALSE 10113
// break ;
10111: GO 10115
// end ;
10113: GO 10057
// CenterOnUnits ( x [ 1 ] ) ;
10115: LD_VAR 0 2
10119: PUSH
10120: LD_INT 1
10122: ARRAY
10123: PPUSH
10124: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10128: LD_EXP 15
10132: IFFALSE 10149
10134: PUSH
10135: LD_EXP 15
10139: PPUSH
10140: CALL_OW 255
10144: PUSH
10145: LD_INT 1
10147: EQUAL
10148: AND
10149: IFFALSE 10165
// Say ( Frank , D5a-Frank-1 ) else
10151: LD_EXP 15
10155: PPUSH
10156: LD_STRING D5a-Frank-1
10158: PPUSH
10159: CALL_OW 88
10163: GO 10221
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10165: LD_EXP 18
10169: IFFALSE 10186
10171: PUSH
10172: LD_EXP 18
10176: PPUSH
10177: CALL_OW 255
10181: PUSH
10182: LD_INT 1
10184: EQUAL
10185: AND
10186: IFFALSE 10202
// Say ( Kikuchi , D5a-Yam-1 ) else
10188: LD_EXP 18
10192: PPUSH
10193: LD_STRING D5a-Yam-1
10195: PPUSH
10196: CALL_OW 88
10200: GO 10221
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10202: LD_INT 1
10204: PPUSH
10205: CALL 608 0 1
10209: PUSH
10210: LD_INT 1
10212: ARRAY
10213: PPUSH
10214: LD_STRING D5a-Sol1-1
10216: PPUSH
10217: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10221: LD_EXP 9
10225: PPUSH
10226: LD_STRING D5a-JMM-1
10228: PPUSH
10229: CALL_OW 88
// if Cyrus then
10233: LD_EXP 13
10237: IFFALSE 10251
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10239: LD_EXP 13
10243: PPUSH
10244: LD_STRING D5a-Cyrus-1
10246: PPUSH
10247: CALL_OW 88
// x := false ;
10251: LD_ADDR_VAR 0 2
10255: PUSH
10256: LD_INT 0
10258: ST_TO_ADDR
// while ( true ) do
10259: LD_INT 1
10261: IFFALSE 10348
// begin wait ( 0 0$01 ) ;
10263: LD_INT 35
10265: PPUSH
10266: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10270: LD_ADDR_VAR 0 4
10274: PUSH
10275: LD_INT 2
10277: PUSH
10278: LD_INT 30
10280: PUSH
10281: LD_INT 0
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 30
10290: PUSH
10291: LD_INT 1
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: LIST
10302: PPUSH
10303: CALL_OW 69
10307: PUSH
10308: LD_INT 1
10310: DIFF
10311: PUSH
10312: FOR_IN
10313: IFFALSE 10336
// if BaseNeedEnergy ( i ) then
10315: LD_VAR 0 4
10319: PPUSH
10320: CALL 1182 0 1
10324: IFFALSE 10334
// x := true ;
10326: LD_ADDR_VAR 0 2
10330: PUSH
10331: LD_INT 1
10333: ST_TO_ADDR
10334: GO 10312
10336: POP
10337: POP
// if x then
10338: LD_VAR 0 2
10342: IFFALSE 10346
// break ;
10344: GO 10348
// end ;
10346: GO 10259
// Say ( JMM , D5b-JMM-1 ) ;
10348: LD_EXP 9
10352: PPUSH
10353: LD_STRING D5b-JMM-1
10355: PPUSH
10356: CALL_OW 88
// end ;
10360: PPOPN 4
10362: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10363: LD_EXP 5
10367: PUSH
10368: LD_INT 1
10370: ARRAY
10371: PUSH
10372: LD_OWVAR 1
10376: LESS
10377: IFTRUE 10413
10379: PUSH
10380: LD_INT 22
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 3
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PPUSH
10404: CALL_OW 69
10408: PUSH
10409: LD_INT 10
10411: LESS
10412: OR
10413: IFFALSE 10617
10415: GO 10417
10417: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10418: LD_INT 16
10420: PPUSH
10421: CALL_OW 301
10425: NOT
10426: IFFALSE 10449
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10428: LD_EXP 19
10432: PPUSH
10433: LD_STRING D3b-Har-3
10435: PPUSH
10436: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10440: LD_STRING M2a
10442: PPUSH
10443: CALL_OW 337
// end else
10447: GO 10468
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10449: LD_EXP 19
10453: PPUSH
10454: LD_STRING D3b-Har-3a
10456: PPUSH
10457: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10461: LD_STRING M2
10463: PPUSH
10464: CALL_OW 337
// end ; can_end := true ;
10468: LD_ADDR_EXP 6
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10476: LD_INT 9
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: CALL_OW 424
// Wait ( 0 0$02 ) ;
10486: LD_INT 70
10488: PPUSH
10489: CALL_OW 67
// if Lisa then
10493: LD_EXP 14
10497: IFFALSE 10511
// Say ( Lisa , D3b-Lisa ) ;
10499: LD_EXP 14
10503: PPUSH
10504: LD_STRING D3b-Lisa
10506: PPUSH
10507: CALL_OW 88
// if Bobby then
10511: LD_EXP 12
10515: IFFALSE 10529
// Say ( Bobby , D3b-Bobby-3 ) ;
10517: LD_EXP 12
10521: PPUSH
10522: LD_STRING D3b-Bobby-3
10524: PPUSH
10525: CALL_OW 88
// if Cyrus then
10529: LD_EXP 13
10533: IFFALSE 10547
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10535: LD_EXP 13
10539: PPUSH
10540: LD_STRING D3b-Cyrus-3
10542: PPUSH
10543: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10547: LD_EXP 15
10551: IFFALSE 10568
10553: PUSH
10554: LD_EXP 15
10558: PPUSH
10559: CALL_OW 255
10563: PUSH
10564: LD_INT 1
10566: EQUAL
10567: AND
10568: IFFALSE 10582
// Say ( Frank , D3b-Frank-3 ) ;
10570: LD_EXP 15
10574: PPUSH
10575: LD_STRING D3b-Frank-3
10577: PPUSH
10578: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10582: LD_EXP 18
10586: IFFALSE 10603
10588: PUSH
10589: LD_EXP 18
10593: PPUSH
10594: CALL_OW 255
10598: PUSH
10599: LD_INT 1
10601: EQUAL
10602: AND
10603: IFFALSE 10617
// Say ( Kikuchi , D3b-Yam-4 ) ;
10605: LD_EXP 18
10609: PPUSH
10610: LD_STRING D3b-Yam-4
10612: PPUSH
10613: CALL_OW 88
// end ;
10617: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10618: LD_EXP 5
10622: PUSH
10623: LD_INT 2
10625: ARRAY
10626: PUSH
10627: LD_OWVAR 1
10631: LESS
10632: IFFALSE 10664
10634: GO 10636
10636: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10637: LD_EXP 19
10641: PPUSH
10642: LD_STRING D4-Har-1
10644: PPUSH
10645: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10649: LD_STRING M3
10651: PPUSH
10652: CALL_OW 337
// must_end := true ;
10656: LD_ADDR_EXP 7
10660: PUSH
10661: LD_INT 1
10663: ST_TO_ADDR
// end ;
10664: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10665: LD_EXP 5
10669: PUSH
10670: LD_INT 3
10672: ARRAY
10673: PUSH
10674: LD_OWVAR 1
10678: LESS
10679: IFFALSE 10710
10681: GO 10683
10683: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10684: LD_INT 16
10686: PPUSH
10687: CALL_OW 301
10691: NOT
10692: IFFALSE 10703
// YouLost ( TimeOut1 ) else
10694: LD_STRING TimeOut1
10696: PPUSH
10697: CALL_OW 104
10701: GO 10710
// YouLost ( TimeOut2 ) ;
10703: LD_STRING TimeOut2
10705: PPUSH
10706: CALL_OW 104
// end ;
10710: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10711: LD_EXP 9
10715: PPUSH
10716: LD_INT 9
10718: PPUSH
10719: CALL_OW 308
10723: IFFALSE 10731
10725: PUSH
10726: LD_EXP 6
10730: AND
10731: IFFALSE 11898
10733: GO 10735
10735: DISABLE
10736: LD_INT 0
10738: PPUSH
10739: PPUSH
10740: PPUSH
10741: PPUSH
10742: PPUSH
10743: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
10744: LD_INT 22
10746: PUSH
10747: LD_INT 1
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 21
10756: PUSH
10757: LD_INT 1
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 23
10766: PUSH
10767: LD_INT 1
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 50
10776: PUSH
10777: EMPTY
10778: LIST
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: PPUSH
10786: CALL_OW 69
10790: PPUSH
10791: CALL 36918 0 1
10795: PUSH
10796: LD_INT 5
10798: LESS
10799: IFFALSE 10810
// begin YouLost ( LostVictory ) ;
10801: LD_STRING LostVictory
10803: PPUSH
10804: CALL_OW 104
// exit ;
10808: GO 11898
// end ; wait_on := false ;
10810: LD_ADDR_VAR 0 1
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10818: LD_INT 1
10820: PPUSH
10821: CALL 1259 0 1
10825: PPUSH
10826: CALL 36918 0 1
10830: PUSH
10831: LD_INT 1
10833: PPUSH
10834: LD_INT 9
10836: PPUSH
10837: CALL 1350 0 2
10841: PUSH
10842: LD_INT 1
10844: PPUSH
10845: LD_INT 9
10847: PPUSH
10848: CALL 1397 0 2
10852: ADD
10853: PPUSH
10854: CALL 36918 0 1
10858: GREATER
10859: IFFALSE 10882
// if Query ( Q1 ) = 1 then
10861: LD_STRING Q1
10863: PPUSH
10864: CALL_OW 97
10868: PUSH
10869: LD_INT 1
10871: EQUAL
10872: IFFALSE 10882
// wait_on := true ;
10874: LD_ADDR_VAR 0 1
10878: PUSH
10879: LD_INT 1
10881: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10882: LD_INT 35
10884: PPUSH
10885: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10889: LD_INT 1
10891: PPUSH
10892: CALL 1259 0 1
10896: PPUSH
10897: CALL 36918 0 1
10901: PUSH
10902: LD_INT 1
10904: PPUSH
10905: LD_INT 9
10907: PPUSH
10908: CALL 1350 0 2
10912: PUSH
10913: LD_INT 1
10915: PPUSH
10916: LD_INT 9
10918: PPUSH
10919: CALL 1397 0 2
10923: UNION
10924: PPUSH
10925: CALL 36918 0 1
10929: EQUAL
10930: IFFALSE 10882
// DialogueOn ;
10932: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10936: LD_EXP 9
10940: PPUSH
10941: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10945: LD_EXP 9
10949: PPUSH
10950: LD_STRING D6-JMM-1
10952: PPUSH
10953: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10957: LD_EXP 19
10961: PPUSH
10962: LD_STRING D6-Har-1
10964: PPUSH
10965: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10969: LD_EXP 9
10973: PPUSH
10974: LD_STRING D6-JMM-2
10976: PPUSH
10977: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10981: LD_EXP 19
10985: PPUSH
10986: LD_STRING D6-Har-2
10988: PPUSH
10989: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10993: LD_EXP 9
10997: PPUSH
10998: LD_STRING D6-JMM-3
11000: PPUSH
11001: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
11005: LD_EXP 19
11009: PPUSH
11010: LD_STRING D6-Har-3
11012: PPUSH
11013: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
11017: LD_EXP 9
11021: PPUSH
11022: LD_STRING D6-JMM-4
11024: PPUSH
11025: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
11029: LD_EXP 19
11033: PPUSH
11034: LD_STRING D6-Har-4
11036: PPUSH
11037: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
11041: LD_EXP 9
11045: PPUSH
11046: LD_STRING D6-JMM-5
11048: PPUSH
11049: CALL_OW 88
// DialogueOff ;
11053: CALL_OW 7
// m1 := false ;
11057: LD_ADDR_VAR 0 4
11061: PUSH
11062: LD_INT 0
11064: ST_TO_ADDR
// m2 := false ;
11065: LD_ADDR_VAR 0 5
11069: PUSH
11070: LD_INT 0
11072: ST_TO_ADDR
// m3 := false ;
11073: LD_ADDR_VAR 0 6
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
11081: LD_ADDR_VAR 0 3
11085: PUSH
11086: LD_INT 3
11088: PPUSH
11089: CALL 1528 0 1
11093: ST_TO_ADDR
// if tmp >= 35 then
11094: LD_VAR 0 3
11098: PUSH
11099: LD_INT 35
11101: GREATEREQUAL
11102: IFFALSE 11139
// begin AddMedal ( Destroy1 , - 1 ) ;
11104: LD_STRING Destroy1
11106: PPUSH
11107: LD_INT 1
11109: NEG
11110: PPUSH
11111: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
11115: LD_STRING Destroy2
11117: PPUSH
11118: LD_INT 1
11120: NEG
11121: PPUSH
11122: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11126: LD_STRING Destroy3
11128: PPUSH
11129: LD_INT 1
11131: NEG
11132: PPUSH
11133: CALL_OW 101
// end else
11137: GO 11250
// begin AddMedal ( Destroy1 , 1 ) ;
11139: LD_STRING Destroy1
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 101
// m1 := true ;
11149: LD_ADDR_VAR 0 4
11153: PUSH
11154: LD_INT 1
11156: ST_TO_ADDR
// if tmp >= 25 then
11157: LD_VAR 0 3
11161: PUSH
11162: LD_INT 25
11164: GREATEREQUAL
11165: IFFALSE 11191
// begin AddMedal ( Destroy2 , - 1 ) ;
11167: LD_STRING Destroy2
11169: PPUSH
11170: LD_INT 1
11172: NEG
11173: PPUSH
11174: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11178: LD_STRING Destroy3
11180: PPUSH
11181: LD_INT 1
11183: NEG
11184: PPUSH
11185: CALL_OW 101
// end else
11189: GO 11250
// begin AddMedal ( Destroy2 , 1 ) ;
11191: LD_STRING Destroy2
11193: PPUSH
11194: LD_INT 1
11196: PPUSH
11197: CALL_OW 101
// m2 := true ;
11201: LD_ADDR_VAR 0 5
11205: PUSH
11206: LD_INT 1
11208: ST_TO_ADDR
// if tmp >= 15 then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_INT 15
11216: GREATEREQUAL
11217: IFFALSE 11232
// AddMedal ( Destroy3 , - 1 ) else
11219: LD_STRING Destroy3
11221: PPUSH
11222: LD_INT 1
11224: NEG
11225: PPUSH
11226: CALL_OW 101
11230: GO 11250
// begin AddMedal ( Destroy3 , 1 ) ;
11232: LD_STRING Destroy3
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 101
// m3 := true ;
11242: LD_ADDR_VAR 0 6
11246: PUSH
11247: LD_INT 1
11249: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11250: LD_OWVAR 1
11254: PUSH
11255: LD_INT 67200
11257: LESSEQUAL
11258: IFFALSE 11267
// SetAchievement ( ACH_ASPEED_7 ) ;
11260: LD_STRING ACH_ASPEED_7
11262: PPUSH
11263: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11267: LD_VAR 0 4
11271: IFFALSE 11279
11273: PUSH
11274: LD_VAR 0 5
11278: AND
11279: IFFALSE 11287
11281: PUSH
11282: LD_VAR 0 6
11286: AND
11287: IFFALSE 11299
11289: PUSH
11290: LD_OWVAR 67
11294: PUSH
11295: LD_INT 3
11297: GREATEREQUAL
11298: AND
11299: IFFALSE 11311
// SetAchievementEX ( ACH_AMER , 7 ) ;
11301: LD_STRING ACH_AMER
11303: PPUSH
11304: LD_INT 7
11306: PPUSH
11307: CALL_OW 564
// GiveMedals ( MAIN ) ;
11311: LD_STRING MAIN
11313: PPUSH
11314: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11318: LD_ADDR_VAR 0 3
11322: PUSH
11323: LD_INT 22
11325: PUSH
11326: LD_INT 1
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 23
11335: PUSH
11336: LD_INT 1
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 69
11351: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11352: LD_VAR 0 3
11356: PPUSH
11357: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11361: LD_EXP 9
11365: PPUSH
11366: LD_EXP 3
11370: PUSH
11371: LD_STRING JMM
11373: STR
11374: PPUSH
11375: CALL_OW 38
// if Brown in tmp then
11379: LD_EXP 10
11383: PUSH
11384: LD_VAR 0 3
11388: IN
11389: IFFALSE 11409
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11391: LD_EXP 10
11395: PPUSH
11396: LD_EXP 3
11400: PUSH
11401: LD_STRING Brown
11403: STR
11404: PPUSH
11405: CALL_OW 38
// if Donaldson in tmp then
11409: LD_EXP 11
11413: PUSH
11414: LD_VAR 0 3
11418: IN
11419: IFFALSE 11439
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11421: LD_EXP 11
11425: PPUSH
11426: LD_EXP 3
11430: PUSH
11431: LD_STRING Donaldson
11433: STR
11434: PPUSH
11435: CALL_OW 38
// if Bobby in tmp then
11439: LD_EXP 12
11443: PUSH
11444: LD_VAR 0 3
11448: IN
11449: IFFALSE 11469
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11451: LD_EXP 12
11455: PPUSH
11456: LD_EXP 3
11460: PUSH
11461: LD_STRING Bobby
11463: STR
11464: PPUSH
11465: CALL_OW 38
// if Cyrus in tmp then
11469: LD_EXP 13
11473: PUSH
11474: LD_VAR 0 3
11478: IN
11479: IFFALSE 11499
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11481: LD_EXP 13
11485: PPUSH
11486: LD_EXP 3
11490: PUSH
11491: LD_STRING Cyrus
11493: STR
11494: PPUSH
11495: CALL_OW 38
// if Lisa in tmp then
11499: LD_EXP 14
11503: PUSH
11504: LD_VAR 0 3
11508: IN
11509: IFFALSE 11529
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11511: LD_EXP 14
11515: PPUSH
11516: LD_EXP 3
11520: PUSH
11521: LD_STRING Lisa
11523: STR
11524: PPUSH
11525: CALL_OW 38
// if Frank in tmp then
11529: LD_EXP 15
11533: PUSH
11534: LD_VAR 0 3
11538: IN
11539: IFFALSE 11559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11541: LD_EXP 15
11545: PPUSH
11546: LD_EXP 3
11550: PUSH
11551: LD_STRING Frank
11553: STR
11554: PPUSH
11555: CALL_OW 38
// if Gladstone in tmp then
11559: LD_EXP 16
11563: PUSH
11564: LD_VAR 0 3
11568: IN
11569: IFFALSE 11589
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11571: LD_EXP 16
11575: PPUSH
11576: LD_EXP 3
11580: PUSH
11581: LD_STRING Gladstone
11583: STR
11584: PPUSH
11585: CALL_OW 38
// if Khatam in tmp then
11589: LD_EXP 17
11593: PUSH
11594: LD_VAR 0 3
11598: IN
11599: IFFALSE 11619
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11601: LD_EXP 17
11605: PPUSH
11606: LD_EXP 3
11610: PUSH
11611: LD_STRING Khatam
11613: STR
11614: PPUSH
11615: CALL_OW 38
// if Kikuchi in tmp then
11619: LD_EXP 18
11623: PUSH
11624: LD_VAR 0 3
11628: IN
11629: IFFALSE 11656
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
11631: LD_STRING enableBioCharacter(BIO_YAMO)
11633: PPUSH
11634: CALL_OW 559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11638: LD_EXP 18
11642: PPUSH
11643: LD_EXP 3
11647: PUSH
11648: LD_STRING Kikuchi
11650: STR
11651: PPUSH
11652: CALL_OW 38
// end ; SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11656: LD_VAR 0 3
11660: PUSH
11661: LD_EXP 9
11665: PUSH
11666: LD_EXP 10
11670: PUSH
11671: LD_EXP 11
11675: PUSH
11676: LD_EXP 12
11680: PUSH
11681: LD_EXP 13
11685: PUSH
11686: LD_EXP 14
11690: PUSH
11691: LD_EXP 15
11695: PUSH
11696: LD_EXP 16
11700: PUSH
11701: LD_EXP 18
11705: PUSH
11706: LD_EXP 17
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: DIFF
11723: PPUSH
11724: LD_EXP 3
11728: PUSH
11729: LD_STRING others
11731: STR
11732: PPUSH
11733: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11737: LD_OWVAR 1
11741: PPUSH
11742: LD_STRING 07_time
11744: PPUSH
11745: CALL_OW 39
// tmp := [ ] ;
11749: LD_ADDR_VAR 0 3
11753: PUSH
11754: EMPTY
11755: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ] ) do
11756: LD_ADDR_VAR 0 2
11760: PUSH
11761: LD_INT 9
11763: PPUSH
11764: LD_INT 22
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 23
11776: PUSH
11777: LD_INT 1
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 21
11786: PUSH
11787: LD_INT 2
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 50
11796: PUSH
11797: EMPTY
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: PPUSH
11809: CALL_OW 70
11813: PUSH
11814: FOR_IN
11815: IFFALSE 11880
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11817: LD_ADDR_VAR 0 3
11821: PUSH
11822: LD_VAR 0 3
11826: PPUSH
11827: LD_VAR 0 2
11831: PPUSH
11832: CALL_OW 265
11836: PUSH
11837: LD_VAR 0 2
11841: PPUSH
11842: CALL_OW 262
11846: PUSH
11847: LD_VAR 0 2
11851: PPUSH
11852: CALL_OW 263
11856: PUSH
11857: LD_VAR 0 2
11861: PPUSH
11862: CALL_OW 264
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: PPUSH
11873: CALL 72850 0 2
11877: ST_TO_ADDR
11878: GO 11814
11880: POP
11881: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11882: LD_VAR 0 3
11886: PPUSH
11887: LD_STRING 07_vehicles
11889: PPUSH
11890: CALL_OW 39
// YouWin ;
11894: CALL_OW 103
// end ; end_of_file
11898: PPOPN 6
11900: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11901: LD_VAR 0 1
11905: PPUSH
11906: CALL 28491 0 1
// if un = JMM then
11910: LD_VAR 0 1
11914: PUSH
11915: LD_EXP 9
11919: EQUAL
11920: IFFALSE 11929
// YouLost ( JMM ) ;
11922: LD_STRING JMM
11924: PPUSH
11925: CALL_OW 104
// if GetType ( un ) = unit_building then
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 247
11938: PUSH
11939: LD_INT 3
11941: EQUAL
11942: IFFALSE 11958
// buildings_counter := buildings_counter + 1 ;
11944: LD_ADDR_EXP 4
11948: PUSH
11949: LD_EXP 4
11953: PUSH
11954: LD_INT 1
11956: PLUS
11957: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 6
11965: PPUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 30
11971: PUSH
11972: LD_INT 33
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 30
11981: PUSH
11982: LD_INT 32
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: PPUSH
11994: CALL_OW 70
11998: IN
11999: IFFALSE 12058
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
12001: LD_ADDR_EXP 20
12005: PUSH
12006: LD_EXP 20
12010: PUSH
12011: LD_VAR 0 1
12015: PPUSH
12016: CALL_OW 266
12020: PUSH
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 250
12030: PUSH
12031: LD_VAR 0 1
12035: PPUSH
12036: CALL_OW 251
12040: PUSH
12041: LD_VAR 0 1
12045: PPUSH
12046: CALL_OW 254
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: ADD
12057: ST_TO_ADDR
// if un = ru_dep_main then
12058: LD_VAR 0 1
12062: PUSH
12063: LD_INT 16
12065: EQUAL
12066: IFFALSE 12075
// ChangeMissionObjectives ( M1a ) ;
12068: LD_STRING M1a
12070: PPUSH
12071: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
12075: LD_VAR 0 1
12079: PPUSH
12080: CALL_OW 247
12084: PUSH
12085: LD_INT 1
12087: EQUAL
12088: IFFALSE 12105
12090: PUSH
12091: LD_VAR 0 1
12095: PPUSH
12096: CALL_OW 255
12100: PUSH
12101: LD_INT 3
12103: EQUAL
12104: AND
12105: IFFALSE 12121
// kill_counter := kill_counter + 1 ;
12107: LD_ADDR_EXP 8
12111: PUSH
12112: LD_EXP 8
12116: PUSH
12117: LD_INT 1
12119: PLUS
12120: ST_TO_ADDR
// end ;
12121: PPOPN 1
12123: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: LD_VAR 0 2
12133: PPUSH
12134: CALL 28549 0 2
// end ;
12138: PPOPN 2
12140: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
12141: LD_VAR 0 1
12145: PPUSH
12146: CALL_OW 266
12150: PUSH
12151: LD_INT 32
12153: EQUAL
12154: IFFALSE 12171
12156: PUSH
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 110
12166: PUSH
12167: LD_INT 7
12169: EQUAL
12170: AND
12171: IFFALSE 12185
// SetTag ( un , 0 ) ;
12173: LD_VAR 0 1
12177: PPUSH
12178: LD_INT 0
12180: PPUSH
12181: CALL_OW 109
// end ;
12185: PPOPN 1
12187: END
// on BuildingStarted ( b , builder ) do var i ;
12188: LD_INT 0
12190: PPUSH
// begin if GetSide ( b ) = 3 then
12191: LD_VAR 0 1
12195: PPUSH
12196: CALL_OW 255
12200: PUSH
12201: LD_INT 3
12203: EQUAL
12204: IFFALSE 12244
// for i = 1 to 4 do
12206: LD_ADDR_VAR 0 3
12210: PUSH
12211: DOUBLE
12212: LD_INT 1
12214: DEC
12215: ST_TO_ADDR
12216: LD_INT 4
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12242
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12222: LD_ADDR_EXP 20
12226: PUSH
12227: LD_EXP 20
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 3
12239: ST_TO_ADDR
12240: GO 12219
12242: POP
12243: POP
// end ;
12244: PPOPN 3
12246: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12247: LD_VAR 0 1
12251: PPUSH
12252: CALL_OW 266
12256: PUSH
12257: LD_INT 32
12259: PUSH
12260: LD_INT 33
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: IN
12267: IFFALSE 12281
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12269: LD_VAR 0 1
12273: PPUSH
12274: LD_INT 43
12276: PPUSH
12277: CALL_OW 148
12281: PPOPN 1
12283: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12284: LD_VAR 0 1
12288: PUSH
12289: LD_INT 22
12291: PUSH
12292: LD_INT 3
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: LD_INT 2
12301: PUSH
12302: LD_INT 30
12304: PUSH
12305: LD_INT 31
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 30
12314: PUSH
12315: LD_INT 32
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PPUSH
12331: CALL_OW 69
12335: IN
12336: IFFALSE 12358
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12338: LD_VAR 0 2
12342: PPUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: LD_INT 134
12350: PPUSH
12351: LD_INT 136
12353: PPUSH
12354: CALL 838 0 4
// end ;
12358: PPOPN 2
12360: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12361: LD_VAR 0 1
12365: PUSH
12366: LD_INT 22
12368: PUSH
12369: LD_INT 3
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 30
12378: PUSH
12379: LD_INT 32
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 69
12394: IN
12395: IFFALSE 12409
// SetTag ( b , 0 ) ;
12397: LD_VAR 0 1
12401: PPUSH
12402: LD_INT 0
12404: PPUSH
12405: CALL_OW 109
// end ; end_of_file end_of_file
12409: PPOPN 2
12411: END
// export globalGameSaveCounter ; every 0 0$1 do
12412: GO 12414
12414: DISABLE
// begin enable ;
12415: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12416: LD_STRING updateTimer(
12418: PUSH
12419: LD_OWVAR 1
12423: STR
12424: PUSH
12425: LD_STRING );
12427: STR
12428: PPUSH
12429: CALL_OW 559
// end ;
12433: END
// every 0 0$1 do
12434: GO 12436
12436: DISABLE
// begin globalGameSaveCounter := 0 ;
12437: LD_ADDR_EXP 21
12441: PUSH
12442: LD_INT 0
12444: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12445: LD_STRING setGameSaveCounter(0)
12447: PPUSH
12448: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12452: LD_STRING initStreamRollete();
12454: PPUSH
12455: CALL_OW 559
// InitStreamMode ;
12459: CALL 13804 0 0
// DefineStreamItems ( false ) ;
12463: LD_INT 0
12465: PPUSH
12466: CALL 14268 0 1
// end ;
12470: END
// export function SOS_MapStart ( ) ; begin
12471: LD_INT 0
12473: PPUSH
// if streamModeActive then
12474: LD_EXP 22
12478: IFFALSE 12487
// DefineStreamItems ( true ) ;
12480: LD_INT 1
12482: PPUSH
12483: CALL 14268 0 1
// UpdateLuaVariables ( ) ;
12487: CALL 12504 0 0
// UpdateFactoryWaypoints ( ) ;
12491: CALL 27390 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12495: CALL 27642 0 0
// end ;
12499: LD_VAR 0 1
12503: RET
// function UpdateLuaVariables ( ) ; begin
12504: LD_INT 0
12506: PPUSH
// if globalGameSaveCounter then
12507: LD_EXP 21
12511: IFFALSE 12545
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12513: LD_ADDR_EXP 21
12517: PUSH
12518: LD_EXP 21
12522: PPUSH
12523: CALL 74223 0 1
12527: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12528: LD_STRING setGameSaveCounter(
12530: PUSH
12531: LD_EXP 21
12535: STR
12536: PUSH
12537: LD_STRING )
12539: STR
12540: PPUSH
12541: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12545: LD_STRING setGameDifficulty(
12547: PUSH
12548: LD_OWVAR 67
12552: STR
12553: PUSH
12554: LD_STRING )
12556: STR
12557: PPUSH
12558: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
12562: LD_STRING displayDifficulty(
12564: PUSH
12565: LD_OWVAR 67
12569: STR
12570: PUSH
12571: LD_STRING )
12573: STR
12574: PPUSH
12575: CALL_OW 559
// end ;
12579: LD_VAR 0 1
12583: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12584: LD_INT 0
12586: PPUSH
// if p2 = stream_mode then
12587: LD_VAR 0 2
12591: PUSH
12592: LD_INT 100
12594: EQUAL
12595: IFFALSE 13598
// begin if not StreamModeActive then
12597: LD_EXP 22
12601: NOT
12602: IFFALSE 12612
// StreamModeActive := true ;
12604: LD_ADDR_EXP 22
12608: PUSH
12609: LD_INT 1
12611: ST_TO_ADDR
// if p3 = 0 then
12612: LD_VAR 0 3
12616: PUSH
12617: LD_INT 0
12619: EQUAL
12620: IFFALSE 12626
// InitStreamMode ;
12622: CALL 13804 0 0
// if p3 = 1 then
12626: LD_VAR 0 3
12630: PUSH
12631: LD_INT 1
12633: EQUAL
12634: IFFALSE 12644
// sRocket := true ;
12636: LD_ADDR_EXP 27
12640: PUSH
12641: LD_INT 1
12643: ST_TO_ADDR
// if p3 = 2 then
12644: LD_VAR 0 3
12648: PUSH
12649: LD_INT 2
12651: EQUAL
12652: IFFALSE 12662
// sSpeed := true ;
12654: LD_ADDR_EXP 26
12658: PUSH
12659: LD_INT 1
12661: ST_TO_ADDR
// if p3 = 3 then
12662: LD_VAR 0 3
12666: PUSH
12667: LD_INT 3
12669: EQUAL
12670: IFFALSE 12680
// sEngine := true ;
12672: LD_ADDR_EXP 28
12676: PUSH
12677: LD_INT 1
12679: ST_TO_ADDR
// if p3 = 4 then
12680: LD_VAR 0 3
12684: PUSH
12685: LD_INT 4
12687: EQUAL
12688: IFFALSE 12698
// sSpec := true ;
12690: LD_ADDR_EXP 25
12694: PUSH
12695: LD_INT 1
12697: ST_TO_ADDR
// if p3 = 5 then
12698: LD_VAR 0 3
12702: PUSH
12703: LD_INT 5
12705: EQUAL
12706: IFFALSE 12716
// sLevel := true ;
12708: LD_ADDR_EXP 29
12712: PUSH
12713: LD_INT 1
12715: ST_TO_ADDR
// if p3 = 6 then
12716: LD_VAR 0 3
12720: PUSH
12721: LD_INT 6
12723: EQUAL
12724: IFFALSE 12734
// sArmoury := true ;
12726: LD_ADDR_EXP 30
12730: PUSH
12731: LD_INT 1
12733: ST_TO_ADDR
// if p3 = 7 then
12734: LD_VAR 0 3
12738: PUSH
12739: LD_INT 7
12741: EQUAL
12742: IFFALSE 12752
// sRadar := true ;
12744: LD_ADDR_EXP 31
12748: PUSH
12749: LD_INT 1
12751: ST_TO_ADDR
// if p3 = 8 then
12752: LD_VAR 0 3
12756: PUSH
12757: LD_INT 8
12759: EQUAL
12760: IFFALSE 12770
// sBunker := true ;
12762: LD_ADDR_EXP 32
12766: PUSH
12767: LD_INT 1
12769: ST_TO_ADDR
// if p3 = 9 then
12770: LD_VAR 0 3
12774: PUSH
12775: LD_INT 9
12777: EQUAL
12778: IFFALSE 12788
// sHack := true ;
12780: LD_ADDR_EXP 33
12784: PUSH
12785: LD_INT 1
12787: ST_TO_ADDR
// if p3 = 10 then
12788: LD_VAR 0 3
12792: PUSH
12793: LD_INT 10
12795: EQUAL
12796: IFFALSE 12806
// sFire := true ;
12798: LD_ADDR_EXP 34
12802: PUSH
12803: LD_INT 1
12805: ST_TO_ADDR
// if p3 = 11 then
12806: LD_VAR 0 3
12810: PUSH
12811: LD_INT 11
12813: EQUAL
12814: IFFALSE 12824
// sRefresh := true ;
12816: LD_ADDR_EXP 35
12820: PUSH
12821: LD_INT 1
12823: ST_TO_ADDR
// if p3 = 12 then
12824: LD_VAR 0 3
12828: PUSH
12829: LD_INT 12
12831: EQUAL
12832: IFFALSE 12842
// sExp := true ;
12834: LD_ADDR_EXP 36
12838: PUSH
12839: LD_INT 1
12841: ST_TO_ADDR
// if p3 = 13 then
12842: LD_VAR 0 3
12846: PUSH
12847: LD_INT 13
12849: EQUAL
12850: IFFALSE 12860
// sDepot := true ;
12852: LD_ADDR_EXP 37
12856: PUSH
12857: LD_INT 1
12859: ST_TO_ADDR
// if p3 = 14 then
12860: LD_VAR 0 3
12864: PUSH
12865: LD_INT 14
12867: EQUAL
12868: IFFALSE 12878
// sFlag := true ;
12870: LD_ADDR_EXP 38
12874: PUSH
12875: LD_INT 1
12877: ST_TO_ADDR
// if p3 = 15 then
12878: LD_VAR 0 3
12882: PUSH
12883: LD_INT 15
12885: EQUAL
12886: IFFALSE 12896
// sKamikadze := true ;
12888: LD_ADDR_EXP 46
12892: PUSH
12893: LD_INT 1
12895: ST_TO_ADDR
// if p3 = 16 then
12896: LD_VAR 0 3
12900: PUSH
12901: LD_INT 16
12903: EQUAL
12904: IFFALSE 12914
// sTroll := true ;
12906: LD_ADDR_EXP 47
12910: PUSH
12911: LD_INT 1
12913: ST_TO_ADDR
// if p3 = 17 then
12914: LD_VAR 0 3
12918: PUSH
12919: LD_INT 17
12921: EQUAL
12922: IFFALSE 12932
// sSlow := true ;
12924: LD_ADDR_EXP 48
12928: PUSH
12929: LD_INT 1
12931: ST_TO_ADDR
// if p3 = 18 then
12932: LD_VAR 0 3
12936: PUSH
12937: LD_INT 18
12939: EQUAL
12940: IFFALSE 12950
// sLack := true ;
12942: LD_ADDR_EXP 49
12946: PUSH
12947: LD_INT 1
12949: ST_TO_ADDR
// if p3 = 19 then
12950: LD_VAR 0 3
12954: PUSH
12955: LD_INT 19
12957: EQUAL
12958: IFFALSE 12968
// sTank := true ;
12960: LD_ADDR_EXP 51
12964: PUSH
12965: LD_INT 1
12967: ST_TO_ADDR
// if p3 = 20 then
12968: LD_VAR 0 3
12972: PUSH
12973: LD_INT 20
12975: EQUAL
12976: IFFALSE 12986
// sRemote := true ;
12978: LD_ADDR_EXP 52
12982: PUSH
12983: LD_INT 1
12985: ST_TO_ADDR
// if p3 = 21 then
12986: LD_VAR 0 3
12990: PUSH
12991: LD_INT 21
12993: EQUAL
12994: IFFALSE 13004
// sPowell := true ;
12996: LD_ADDR_EXP 53
13000: PUSH
13001: LD_INT 1
13003: ST_TO_ADDR
// if p3 = 22 then
13004: LD_VAR 0 3
13008: PUSH
13009: LD_INT 22
13011: EQUAL
13012: IFFALSE 13022
// sTeleport := true ;
13014: LD_ADDR_EXP 56
13018: PUSH
13019: LD_INT 1
13021: ST_TO_ADDR
// if p3 = 23 then
13022: LD_VAR 0 3
13026: PUSH
13027: LD_INT 23
13029: EQUAL
13030: IFFALSE 13040
// sOilTower := true ;
13032: LD_ADDR_EXP 58
13036: PUSH
13037: LD_INT 1
13039: ST_TO_ADDR
// if p3 = 24 then
13040: LD_VAR 0 3
13044: PUSH
13045: LD_INT 24
13047: EQUAL
13048: IFFALSE 13058
// sShovel := true ;
13050: LD_ADDR_EXP 59
13054: PUSH
13055: LD_INT 1
13057: ST_TO_ADDR
// if p3 = 25 then
13058: LD_VAR 0 3
13062: PUSH
13063: LD_INT 25
13065: EQUAL
13066: IFFALSE 13076
// sSheik := true ;
13068: LD_ADDR_EXP 60
13072: PUSH
13073: LD_INT 1
13075: ST_TO_ADDR
// if p3 = 26 then
13076: LD_VAR 0 3
13080: PUSH
13081: LD_INT 26
13083: EQUAL
13084: IFFALSE 13094
// sEarthquake := true ;
13086: LD_ADDR_EXP 62
13090: PUSH
13091: LD_INT 1
13093: ST_TO_ADDR
// if p3 = 27 then
13094: LD_VAR 0 3
13098: PUSH
13099: LD_INT 27
13101: EQUAL
13102: IFFALSE 13112
// sAI := true ;
13104: LD_ADDR_EXP 63
13108: PUSH
13109: LD_INT 1
13111: ST_TO_ADDR
// if p3 = 28 then
13112: LD_VAR 0 3
13116: PUSH
13117: LD_INT 28
13119: EQUAL
13120: IFFALSE 13130
// sCargo := true ;
13122: LD_ADDR_EXP 66
13126: PUSH
13127: LD_INT 1
13129: ST_TO_ADDR
// if p3 = 29 then
13130: LD_VAR 0 3
13134: PUSH
13135: LD_INT 29
13137: EQUAL
13138: IFFALSE 13148
// sDLaser := true ;
13140: LD_ADDR_EXP 67
13144: PUSH
13145: LD_INT 1
13147: ST_TO_ADDR
// if p3 = 30 then
13148: LD_VAR 0 3
13152: PUSH
13153: LD_INT 30
13155: EQUAL
13156: IFFALSE 13166
// sExchange := true ;
13158: LD_ADDR_EXP 68
13162: PUSH
13163: LD_INT 1
13165: ST_TO_ADDR
// if p3 = 31 then
13166: LD_VAR 0 3
13170: PUSH
13171: LD_INT 31
13173: EQUAL
13174: IFFALSE 13184
// sFac := true ;
13176: LD_ADDR_EXP 69
13180: PUSH
13181: LD_INT 1
13183: ST_TO_ADDR
// if p3 = 32 then
13184: LD_VAR 0 3
13188: PUSH
13189: LD_INT 32
13191: EQUAL
13192: IFFALSE 13202
// sPower := true ;
13194: LD_ADDR_EXP 70
13198: PUSH
13199: LD_INT 1
13201: ST_TO_ADDR
// if p3 = 33 then
13202: LD_VAR 0 3
13206: PUSH
13207: LD_INT 33
13209: EQUAL
13210: IFFALSE 13220
// sRandom := true ;
13212: LD_ADDR_EXP 71
13216: PUSH
13217: LD_INT 1
13219: ST_TO_ADDR
// if p3 = 34 then
13220: LD_VAR 0 3
13224: PUSH
13225: LD_INT 34
13227: EQUAL
13228: IFFALSE 13238
// sShield := true ;
13230: LD_ADDR_EXP 72
13234: PUSH
13235: LD_INT 1
13237: ST_TO_ADDR
// if p3 = 35 then
13238: LD_VAR 0 3
13242: PUSH
13243: LD_INT 35
13245: EQUAL
13246: IFFALSE 13256
// sTime := true ;
13248: LD_ADDR_EXP 73
13252: PUSH
13253: LD_INT 1
13255: ST_TO_ADDR
// if p3 = 36 then
13256: LD_VAR 0 3
13260: PUSH
13261: LD_INT 36
13263: EQUAL
13264: IFFALSE 13274
// sTools := true ;
13266: LD_ADDR_EXP 74
13270: PUSH
13271: LD_INT 1
13273: ST_TO_ADDR
// if p3 = 101 then
13274: LD_VAR 0 3
13278: PUSH
13279: LD_INT 101
13281: EQUAL
13282: IFFALSE 13292
// sSold := true ;
13284: LD_ADDR_EXP 39
13288: PUSH
13289: LD_INT 1
13291: ST_TO_ADDR
// if p3 = 102 then
13292: LD_VAR 0 3
13296: PUSH
13297: LD_INT 102
13299: EQUAL
13300: IFFALSE 13310
// sDiff := true ;
13302: LD_ADDR_EXP 40
13306: PUSH
13307: LD_INT 1
13309: ST_TO_ADDR
// if p3 = 103 then
13310: LD_VAR 0 3
13314: PUSH
13315: LD_INT 103
13317: EQUAL
13318: IFFALSE 13328
// sFog := true ;
13320: LD_ADDR_EXP 43
13324: PUSH
13325: LD_INT 1
13327: ST_TO_ADDR
// if p3 = 104 then
13328: LD_VAR 0 3
13332: PUSH
13333: LD_INT 104
13335: EQUAL
13336: IFFALSE 13346
// sReset := true ;
13338: LD_ADDR_EXP 44
13342: PUSH
13343: LD_INT 1
13345: ST_TO_ADDR
// if p3 = 105 then
13346: LD_VAR 0 3
13350: PUSH
13351: LD_INT 105
13353: EQUAL
13354: IFFALSE 13364
// sSun := true ;
13356: LD_ADDR_EXP 45
13360: PUSH
13361: LD_INT 1
13363: ST_TO_ADDR
// if p3 = 106 then
13364: LD_VAR 0 3
13368: PUSH
13369: LD_INT 106
13371: EQUAL
13372: IFFALSE 13382
// sTiger := true ;
13374: LD_ADDR_EXP 41
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// if p3 = 107 then
13382: LD_VAR 0 3
13386: PUSH
13387: LD_INT 107
13389: EQUAL
13390: IFFALSE 13400
// sBomb := true ;
13392: LD_ADDR_EXP 42
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// if p3 = 108 then
13400: LD_VAR 0 3
13404: PUSH
13405: LD_INT 108
13407: EQUAL
13408: IFFALSE 13418
// sWound := true ;
13410: LD_ADDR_EXP 50
13414: PUSH
13415: LD_INT 1
13417: ST_TO_ADDR
// if p3 = 109 then
13418: LD_VAR 0 3
13422: PUSH
13423: LD_INT 109
13425: EQUAL
13426: IFFALSE 13436
// sBetray := true ;
13428: LD_ADDR_EXP 54
13432: PUSH
13433: LD_INT 1
13435: ST_TO_ADDR
// if p3 = 110 then
13436: LD_VAR 0 3
13440: PUSH
13441: LD_INT 110
13443: EQUAL
13444: IFFALSE 13454
// sContamin := true ;
13446: LD_ADDR_EXP 55
13450: PUSH
13451: LD_INT 1
13453: ST_TO_ADDR
// if p3 = 111 then
13454: LD_VAR 0 3
13458: PUSH
13459: LD_INT 111
13461: EQUAL
13462: IFFALSE 13472
// sOil := true ;
13464: LD_ADDR_EXP 57
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// if p3 = 112 then
13472: LD_VAR 0 3
13476: PUSH
13477: LD_INT 112
13479: EQUAL
13480: IFFALSE 13490
// sStu := true ;
13482: LD_ADDR_EXP 61
13486: PUSH
13487: LD_INT 1
13489: ST_TO_ADDR
// if p3 = 113 then
13490: LD_VAR 0 3
13494: PUSH
13495: LD_INT 113
13497: EQUAL
13498: IFFALSE 13508
// sBazooka := true ;
13500: LD_ADDR_EXP 64
13504: PUSH
13505: LD_INT 1
13507: ST_TO_ADDR
// if p3 = 114 then
13508: LD_VAR 0 3
13512: PUSH
13513: LD_INT 114
13515: EQUAL
13516: IFFALSE 13526
// sMortar := true ;
13518: LD_ADDR_EXP 65
13522: PUSH
13523: LD_INT 1
13525: ST_TO_ADDR
// if p3 = 115 then
13526: LD_VAR 0 3
13530: PUSH
13531: LD_INT 115
13533: EQUAL
13534: IFFALSE 13544
// sRanger := true ;
13536: LD_ADDR_EXP 75
13540: PUSH
13541: LD_INT 1
13543: ST_TO_ADDR
// if p3 = 116 then
13544: LD_VAR 0 3
13548: PUSH
13549: LD_INT 116
13551: EQUAL
13552: IFFALSE 13562
// sComputer := true ;
13554: LD_ADDR_EXP 76
13558: PUSH
13559: LD_INT 1
13561: ST_TO_ADDR
// if p3 = 117 then
13562: LD_VAR 0 3
13566: PUSH
13567: LD_INT 117
13569: EQUAL
13570: IFFALSE 13580
// s30 := true ;
13572: LD_ADDR_EXP 77
13576: PUSH
13577: LD_INT 1
13579: ST_TO_ADDR
// if p3 = 118 then
13580: LD_VAR 0 3
13584: PUSH
13585: LD_INT 118
13587: EQUAL
13588: IFFALSE 13598
// s60 := true ;
13590: LD_ADDR_EXP 78
13594: PUSH
13595: LD_INT 1
13597: ST_TO_ADDR
// end ; if p2 = hack_mode then
13598: LD_VAR 0 2
13602: PUSH
13603: LD_INT 101
13605: EQUAL
13606: IFFALSE 13734
// begin case p3 of 1 :
13608: LD_VAR 0 3
13612: PUSH
13613: LD_INT 1
13615: DOUBLE
13616: EQUAL
13617: IFTRUE 13621
13619: GO 13628
13621: POP
// hHackUnlimitedResources ; 2 :
13622: CALL 25997 0 0
13626: GO 13734
13628: LD_INT 2
13630: DOUBLE
13631: EQUAL
13632: IFTRUE 13636
13634: GO 13643
13636: POP
// hHackSetLevel10 ; 3 :
13637: CALL 26130 0 0
13641: GO 13734
13643: LD_INT 3
13645: DOUBLE
13646: EQUAL
13647: IFTRUE 13651
13649: GO 13658
13651: POP
// hHackSetLevel10YourUnits ; 4 :
13652: CALL 26215 0 0
13656: GO 13734
13658: LD_INT 4
13660: DOUBLE
13661: EQUAL
13662: IFTRUE 13666
13664: GO 13673
13666: POP
// hHackInvincible ; 5 :
13667: CALL 26663 0 0
13671: GO 13734
13673: LD_INT 5
13675: DOUBLE
13676: EQUAL
13677: IFTRUE 13681
13679: GO 13688
13681: POP
// hHackInvisible ; 6 :
13682: CALL 26774 0 0
13686: GO 13734
13688: LD_INT 6
13690: DOUBLE
13691: EQUAL
13692: IFTRUE 13696
13694: GO 13703
13696: POP
// hHackChangeYourSide ; 7 :
13697: CALL 26831 0 0
13701: GO 13734
13703: LD_INT 7
13705: DOUBLE
13706: EQUAL
13707: IFTRUE 13711
13709: GO 13718
13711: POP
// hHackChangeUnitSide ; 8 :
13712: CALL 26873 0 0
13716: GO 13734
13718: LD_INT 8
13720: DOUBLE
13721: EQUAL
13722: IFTRUE 13726
13724: GO 13733
13726: POP
// hHackFog ; end ;
13727: CALL 26974 0 0
13731: GO 13734
13733: POP
// end ; if p2 = game_save_mode then
13734: LD_VAR 0 2
13738: PUSH
13739: LD_INT 102
13741: EQUAL
13742: IFFALSE 13799
// begin if p3 = 1 then
13744: LD_VAR 0 3
13748: PUSH
13749: LD_INT 1
13751: EQUAL
13752: IFFALSE 13764
// globalGameSaveCounter := p4 ;
13754: LD_ADDR_EXP 21
13758: PUSH
13759: LD_VAR 0 4
13763: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13764: LD_VAR 0 3
13768: PUSH
13769: LD_INT 2
13771: EQUAL
13772: IFFALSE 13780
13774: PUSH
13775: LD_EXP 21
13779: AND
13780: IFFALSE 13799
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13782: LD_STRING setGameSaveCounter(
13784: PUSH
13785: LD_EXP 21
13789: STR
13790: PUSH
13791: LD_STRING )
13793: STR
13794: PPUSH
13795: CALL_OW 559
// end ; end ;
13799: LD_VAR 0 7
13803: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13804: LD_INT 0
13806: PPUSH
// streamModeActive := false ;
13807: LD_ADDR_EXP 22
13811: PUSH
13812: LD_INT 0
13814: ST_TO_ADDR
// normalCounter := 36 ;
13815: LD_ADDR_EXP 23
13819: PUSH
13820: LD_INT 36
13822: ST_TO_ADDR
// hardcoreCounter := 18 ;
13823: LD_ADDR_EXP 24
13827: PUSH
13828: LD_INT 18
13830: ST_TO_ADDR
// sRocket := false ;
13831: LD_ADDR_EXP 27
13835: PUSH
13836: LD_INT 0
13838: ST_TO_ADDR
// sSpeed := false ;
13839: LD_ADDR_EXP 26
13843: PUSH
13844: LD_INT 0
13846: ST_TO_ADDR
// sEngine := false ;
13847: LD_ADDR_EXP 28
13851: PUSH
13852: LD_INT 0
13854: ST_TO_ADDR
// sSpec := false ;
13855: LD_ADDR_EXP 25
13859: PUSH
13860: LD_INT 0
13862: ST_TO_ADDR
// sLevel := false ;
13863: LD_ADDR_EXP 29
13867: PUSH
13868: LD_INT 0
13870: ST_TO_ADDR
// sArmoury := false ;
13871: LD_ADDR_EXP 30
13875: PUSH
13876: LD_INT 0
13878: ST_TO_ADDR
// sRadar := false ;
13879: LD_ADDR_EXP 31
13883: PUSH
13884: LD_INT 0
13886: ST_TO_ADDR
// sBunker := false ;
13887: LD_ADDR_EXP 32
13891: PUSH
13892: LD_INT 0
13894: ST_TO_ADDR
// sHack := false ;
13895: LD_ADDR_EXP 33
13899: PUSH
13900: LD_INT 0
13902: ST_TO_ADDR
// sFire := false ;
13903: LD_ADDR_EXP 34
13907: PUSH
13908: LD_INT 0
13910: ST_TO_ADDR
// sRefresh := false ;
13911: LD_ADDR_EXP 35
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// sExp := false ;
13919: LD_ADDR_EXP 36
13923: PUSH
13924: LD_INT 0
13926: ST_TO_ADDR
// sDepot := false ;
13927: LD_ADDR_EXP 37
13931: PUSH
13932: LD_INT 0
13934: ST_TO_ADDR
// sFlag := false ;
13935: LD_ADDR_EXP 38
13939: PUSH
13940: LD_INT 0
13942: ST_TO_ADDR
// sKamikadze := false ;
13943: LD_ADDR_EXP 46
13947: PUSH
13948: LD_INT 0
13950: ST_TO_ADDR
// sTroll := false ;
13951: LD_ADDR_EXP 47
13955: PUSH
13956: LD_INT 0
13958: ST_TO_ADDR
// sSlow := false ;
13959: LD_ADDR_EXP 48
13963: PUSH
13964: LD_INT 0
13966: ST_TO_ADDR
// sLack := false ;
13967: LD_ADDR_EXP 49
13971: PUSH
13972: LD_INT 0
13974: ST_TO_ADDR
// sTank := false ;
13975: LD_ADDR_EXP 51
13979: PUSH
13980: LD_INT 0
13982: ST_TO_ADDR
// sRemote := false ;
13983: LD_ADDR_EXP 52
13987: PUSH
13988: LD_INT 0
13990: ST_TO_ADDR
// sPowell := false ;
13991: LD_ADDR_EXP 53
13995: PUSH
13996: LD_INT 0
13998: ST_TO_ADDR
// sTeleport := false ;
13999: LD_ADDR_EXP 56
14003: PUSH
14004: LD_INT 0
14006: ST_TO_ADDR
// sOilTower := false ;
14007: LD_ADDR_EXP 58
14011: PUSH
14012: LD_INT 0
14014: ST_TO_ADDR
// sShovel := false ;
14015: LD_ADDR_EXP 59
14019: PUSH
14020: LD_INT 0
14022: ST_TO_ADDR
// sSheik := false ;
14023: LD_ADDR_EXP 60
14027: PUSH
14028: LD_INT 0
14030: ST_TO_ADDR
// sEarthquake := false ;
14031: LD_ADDR_EXP 62
14035: PUSH
14036: LD_INT 0
14038: ST_TO_ADDR
// sAI := false ;
14039: LD_ADDR_EXP 63
14043: PUSH
14044: LD_INT 0
14046: ST_TO_ADDR
// sCargo := false ;
14047: LD_ADDR_EXP 66
14051: PUSH
14052: LD_INT 0
14054: ST_TO_ADDR
// sDLaser := false ;
14055: LD_ADDR_EXP 67
14059: PUSH
14060: LD_INT 0
14062: ST_TO_ADDR
// sExchange := false ;
14063: LD_ADDR_EXP 68
14067: PUSH
14068: LD_INT 0
14070: ST_TO_ADDR
// sFac := false ;
14071: LD_ADDR_EXP 69
14075: PUSH
14076: LD_INT 0
14078: ST_TO_ADDR
// sPower := false ;
14079: LD_ADDR_EXP 70
14083: PUSH
14084: LD_INT 0
14086: ST_TO_ADDR
// sRandom := false ;
14087: LD_ADDR_EXP 71
14091: PUSH
14092: LD_INT 0
14094: ST_TO_ADDR
// sShield := false ;
14095: LD_ADDR_EXP 72
14099: PUSH
14100: LD_INT 0
14102: ST_TO_ADDR
// sTime := false ;
14103: LD_ADDR_EXP 73
14107: PUSH
14108: LD_INT 0
14110: ST_TO_ADDR
// sTools := false ;
14111: LD_ADDR_EXP 74
14115: PUSH
14116: LD_INT 0
14118: ST_TO_ADDR
// sSold := false ;
14119: LD_ADDR_EXP 39
14123: PUSH
14124: LD_INT 0
14126: ST_TO_ADDR
// sDiff := false ;
14127: LD_ADDR_EXP 40
14131: PUSH
14132: LD_INT 0
14134: ST_TO_ADDR
// sFog := false ;
14135: LD_ADDR_EXP 43
14139: PUSH
14140: LD_INT 0
14142: ST_TO_ADDR
// sReset := false ;
14143: LD_ADDR_EXP 44
14147: PUSH
14148: LD_INT 0
14150: ST_TO_ADDR
// sSun := false ;
14151: LD_ADDR_EXP 45
14155: PUSH
14156: LD_INT 0
14158: ST_TO_ADDR
// sTiger := false ;
14159: LD_ADDR_EXP 41
14163: PUSH
14164: LD_INT 0
14166: ST_TO_ADDR
// sBomb := false ;
14167: LD_ADDR_EXP 42
14171: PUSH
14172: LD_INT 0
14174: ST_TO_ADDR
// sWound := false ;
14175: LD_ADDR_EXP 50
14179: PUSH
14180: LD_INT 0
14182: ST_TO_ADDR
// sBetray := false ;
14183: LD_ADDR_EXP 54
14187: PUSH
14188: LD_INT 0
14190: ST_TO_ADDR
// sContamin := false ;
14191: LD_ADDR_EXP 55
14195: PUSH
14196: LD_INT 0
14198: ST_TO_ADDR
// sOil := false ;
14199: LD_ADDR_EXP 57
14203: PUSH
14204: LD_INT 0
14206: ST_TO_ADDR
// sStu := false ;
14207: LD_ADDR_EXP 61
14211: PUSH
14212: LD_INT 0
14214: ST_TO_ADDR
// sBazooka := false ;
14215: LD_ADDR_EXP 64
14219: PUSH
14220: LD_INT 0
14222: ST_TO_ADDR
// sMortar := false ;
14223: LD_ADDR_EXP 65
14227: PUSH
14228: LD_INT 0
14230: ST_TO_ADDR
// sRanger := false ;
14231: LD_ADDR_EXP 75
14235: PUSH
14236: LD_INT 0
14238: ST_TO_ADDR
// sComputer := false ;
14239: LD_ADDR_EXP 76
14243: PUSH
14244: LD_INT 0
14246: ST_TO_ADDR
// s30 := false ;
14247: LD_ADDR_EXP 77
14251: PUSH
14252: LD_INT 0
14254: ST_TO_ADDR
// s60 := false ;
14255: LD_ADDR_EXP 78
14259: PUSH
14260: LD_INT 0
14262: ST_TO_ADDR
// end ;
14263: LD_VAR 0 1
14267: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14268: LD_INT 0
14270: PPUSH
14271: PPUSH
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
14276: PPUSH
// result := [ ] ;
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: EMPTY
14283: ST_TO_ADDR
// if campaign_id = 1 then
14284: LD_OWVAR 69
14288: PUSH
14289: LD_INT 1
14291: EQUAL
14292: IFFALSE 17458
// begin case mission_number of 1 :
14294: LD_OWVAR 70
14298: PUSH
14299: LD_INT 1
14301: DOUBLE
14302: EQUAL
14303: IFTRUE 14307
14305: GO 14383
14307: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14308: LD_ADDR_VAR 0 2
14312: PUSH
14313: LD_INT 2
14315: PUSH
14316: LD_INT 4
14318: PUSH
14319: LD_INT 11
14321: PUSH
14322: LD_INT 12
14324: PUSH
14325: LD_INT 15
14327: PUSH
14328: LD_INT 16
14330: PUSH
14331: LD_INT 22
14333: PUSH
14334: LD_INT 23
14336: PUSH
14337: LD_INT 26
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 101
14353: PUSH
14354: LD_INT 102
14356: PUSH
14357: LD_INT 106
14359: PUSH
14360: LD_INT 116
14362: PUSH
14363: LD_INT 117
14365: PUSH
14366: LD_INT 118
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: ST_TO_ADDR
14381: GO 17456
14383: LD_INT 2
14385: DOUBLE
14386: EQUAL
14387: IFTRUE 14391
14389: GO 14475
14391: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14392: LD_ADDR_VAR 0 2
14396: PUSH
14397: LD_INT 2
14399: PUSH
14400: LD_INT 4
14402: PUSH
14403: LD_INT 11
14405: PUSH
14406: LD_INT 12
14408: PUSH
14409: LD_INT 15
14411: PUSH
14412: LD_INT 16
14414: PUSH
14415: LD_INT 22
14417: PUSH
14418: LD_INT 23
14420: PUSH
14421: LD_INT 26
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 101
14437: PUSH
14438: LD_INT 102
14440: PUSH
14441: LD_INT 105
14443: PUSH
14444: LD_INT 106
14446: PUSH
14447: LD_INT 108
14449: PUSH
14450: LD_INT 116
14452: PUSH
14453: LD_INT 117
14455: PUSH
14456: LD_INT 118
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: ST_TO_ADDR
14473: GO 17456
14475: LD_INT 3
14477: DOUBLE
14478: EQUAL
14479: IFTRUE 14483
14481: GO 14571
14483: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14484: LD_ADDR_VAR 0 2
14488: PUSH
14489: LD_INT 2
14491: PUSH
14492: LD_INT 4
14494: PUSH
14495: LD_INT 5
14497: PUSH
14498: LD_INT 11
14500: PUSH
14501: LD_INT 12
14503: PUSH
14504: LD_INT 15
14506: PUSH
14507: LD_INT 16
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_INT 26
14515: PUSH
14516: LD_INT 36
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 101
14533: PUSH
14534: LD_INT 102
14536: PUSH
14537: LD_INT 105
14539: PUSH
14540: LD_INT 106
14542: PUSH
14543: LD_INT 108
14545: PUSH
14546: LD_INT 116
14548: PUSH
14549: LD_INT 117
14551: PUSH
14552: LD_INT 118
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: ST_TO_ADDR
14569: GO 17456
14571: LD_INT 4
14573: DOUBLE
14574: EQUAL
14575: IFTRUE 14579
14577: GO 14675
14579: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14580: LD_ADDR_VAR 0 2
14584: PUSH
14585: LD_INT 2
14587: PUSH
14588: LD_INT 4
14590: PUSH
14591: LD_INT 5
14593: PUSH
14594: LD_INT 8
14596: PUSH
14597: LD_INT 11
14599: PUSH
14600: LD_INT 12
14602: PUSH
14603: LD_INT 15
14605: PUSH
14606: LD_INT 16
14608: PUSH
14609: LD_INT 22
14611: PUSH
14612: LD_INT 23
14614: PUSH
14615: LD_INT 26
14617: PUSH
14618: LD_INT 36
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 101
14637: PUSH
14638: LD_INT 102
14640: PUSH
14641: LD_INT 105
14643: PUSH
14644: LD_INT 106
14646: PUSH
14647: LD_INT 108
14649: PUSH
14650: LD_INT 116
14652: PUSH
14653: LD_INT 117
14655: PUSH
14656: LD_INT 118
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: ST_TO_ADDR
14673: GO 17456
14675: LD_INT 5
14677: DOUBLE
14678: EQUAL
14679: IFTRUE 14683
14681: GO 14795
14683: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14684: LD_ADDR_VAR 0 2
14688: PUSH
14689: LD_INT 2
14691: PUSH
14692: LD_INT 4
14694: PUSH
14695: LD_INT 5
14697: PUSH
14698: LD_INT 6
14700: PUSH
14701: LD_INT 8
14703: PUSH
14704: LD_INT 11
14706: PUSH
14707: LD_INT 12
14709: PUSH
14710: LD_INT 15
14712: PUSH
14713: LD_INT 16
14715: PUSH
14716: LD_INT 22
14718: PUSH
14719: LD_INT 23
14721: PUSH
14722: LD_INT 25
14724: PUSH
14725: LD_INT 26
14727: PUSH
14728: LD_INT 36
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 101
14749: PUSH
14750: LD_INT 102
14752: PUSH
14753: LD_INT 105
14755: PUSH
14756: LD_INT 106
14758: PUSH
14759: LD_INT 108
14761: PUSH
14762: LD_INT 109
14764: PUSH
14765: LD_INT 112
14767: PUSH
14768: LD_INT 116
14770: PUSH
14771: LD_INT 117
14773: PUSH
14774: LD_INT 118
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: ST_TO_ADDR
14793: GO 17456
14795: LD_INT 6
14797: DOUBLE
14798: EQUAL
14799: IFTRUE 14803
14801: GO 14935
14803: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14804: LD_ADDR_VAR 0 2
14808: PUSH
14809: LD_INT 2
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: LD_INT 6
14820: PUSH
14821: LD_INT 8
14823: PUSH
14824: LD_INT 11
14826: PUSH
14827: LD_INT 12
14829: PUSH
14830: LD_INT 15
14832: PUSH
14833: LD_INT 16
14835: PUSH
14836: LD_INT 20
14838: PUSH
14839: LD_INT 21
14841: PUSH
14842: LD_INT 22
14844: PUSH
14845: LD_INT 23
14847: PUSH
14848: LD_INT 25
14850: PUSH
14851: LD_INT 26
14853: PUSH
14854: LD_INT 30
14856: PUSH
14857: LD_INT 31
14859: PUSH
14860: LD_INT 32
14862: PUSH
14863: LD_INT 36
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 101
14889: PUSH
14890: LD_INT 102
14892: PUSH
14893: LD_INT 105
14895: PUSH
14896: LD_INT 106
14898: PUSH
14899: LD_INT 108
14901: PUSH
14902: LD_INT 109
14904: PUSH
14905: LD_INT 112
14907: PUSH
14908: LD_INT 116
14910: PUSH
14911: LD_INT 117
14913: PUSH
14914: LD_INT 118
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: ST_TO_ADDR
14933: GO 17456
14935: LD_INT 7
14937: DOUBLE
14938: EQUAL
14939: IFTRUE 14943
14941: GO 15055
14943: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14944: LD_ADDR_VAR 0 2
14948: PUSH
14949: LD_INT 2
14951: PUSH
14952: LD_INT 4
14954: PUSH
14955: LD_INT 5
14957: PUSH
14958: LD_INT 7
14960: PUSH
14961: LD_INT 11
14963: PUSH
14964: LD_INT 12
14966: PUSH
14967: LD_INT 15
14969: PUSH
14970: LD_INT 16
14972: PUSH
14973: LD_INT 20
14975: PUSH
14976: LD_INT 21
14978: PUSH
14979: LD_INT 22
14981: PUSH
14982: LD_INT 23
14984: PUSH
14985: LD_INT 25
14987: PUSH
14988: LD_INT 26
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 101
15009: PUSH
15010: LD_INT 102
15012: PUSH
15013: LD_INT 103
15015: PUSH
15016: LD_INT 105
15018: PUSH
15019: LD_INT 106
15021: PUSH
15022: LD_INT 108
15024: PUSH
15025: LD_INT 112
15027: PUSH
15028: LD_INT 116
15030: PUSH
15031: LD_INT 117
15033: PUSH
15034: LD_INT 118
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: ST_TO_ADDR
15053: GO 17456
15055: LD_INT 8
15057: DOUBLE
15058: EQUAL
15059: IFTRUE 15063
15061: GO 15203
15063: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15064: LD_ADDR_VAR 0 2
15068: PUSH
15069: LD_INT 2
15071: PUSH
15072: LD_INT 4
15074: PUSH
15075: LD_INT 5
15077: PUSH
15078: LD_INT 6
15080: PUSH
15081: LD_INT 7
15083: PUSH
15084: LD_INT 8
15086: PUSH
15087: LD_INT 11
15089: PUSH
15090: LD_INT 12
15092: PUSH
15093: LD_INT 15
15095: PUSH
15096: LD_INT 16
15098: PUSH
15099: LD_INT 20
15101: PUSH
15102: LD_INT 21
15104: PUSH
15105: LD_INT 22
15107: PUSH
15108: LD_INT 23
15110: PUSH
15111: LD_INT 25
15113: PUSH
15114: LD_INT 26
15116: PUSH
15117: LD_INT 30
15119: PUSH
15120: LD_INT 31
15122: PUSH
15123: LD_INT 32
15125: PUSH
15126: LD_INT 36
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 101
15153: PUSH
15154: LD_INT 102
15156: PUSH
15157: LD_INT 103
15159: PUSH
15160: LD_INT 105
15162: PUSH
15163: LD_INT 106
15165: PUSH
15166: LD_INT 108
15168: PUSH
15169: LD_INT 109
15171: PUSH
15172: LD_INT 112
15174: PUSH
15175: LD_INT 116
15177: PUSH
15178: LD_INT 117
15180: PUSH
15181: LD_INT 118
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: ST_TO_ADDR
15201: GO 17456
15203: LD_INT 9
15205: DOUBLE
15206: EQUAL
15207: IFTRUE 15211
15209: GO 15359
15211: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15212: LD_ADDR_VAR 0 2
15216: PUSH
15217: LD_INT 2
15219: PUSH
15220: LD_INT 4
15222: PUSH
15223: LD_INT 5
15225: PUSH
15226: LD_INT 6
15228: PUSH
15229: LD_INT 7
15231: PUSH
15232: LD_INT 8
15234: PUSH
15235: LD_INT 11
15237: PUSH
15238: LD_INT 12
15240: PUSH
15241: LD_INT 15
15243: PUSH
15244: LD_INT 16
15246: PUSH
15247: LD_INT 20
15249: PUSH
15250: LD_INT 21
15252: PUSH
15253: LD_INT 22
15255: PUSH
15256: LD_INT 23
15258: PUSH
15259: LD_INT 25
15261: PUSH
15262: LD_INT 26
15264: PUSH
15265: LD_INT 28
15267: PUSH
15268: LD_INT 30
15270: PUSH
15271: LD_INT 31
15273: PUSH
15274: LD_INT 32
15276: PUSH
15277: LD_INT 36
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 101
15305: PUSH
15306: LD_INT 102
15308: PUSH
15309: LD_INT 103
15311: PUSH
15312: LD_INT 105
15314: PUSH
15315: LD_INT 106
15317: PUSH
15318: LD_INT 108
15320: PUSH
15321: LD_INT 109
15323: PUSH
15324: LD_INT 112
15326: PUSH
15327: LD_INT 114
15329: PUSH
15330: LD_INT 116
15332: PUSH
15333: LD_INT 117
15335: PUSH
15336: LD_INT 118
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: ST_TO_ADDR
15357: GO 17456
15359: LD_INT 10
15361: DOUBLE
15362: EQUAL
15363: IFTRUE 15367
15365: GO 15563
15367: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: LD_INT 2
15375: PUSH
15376: LD_INT 4
15378: PUSH
15379: LD_INT 5
15381: PUSH
15382: LD_INT 6
15384: PUSH
15385: LD_INT 7
15387: PUSH
15388: LD_INT 8
15390: PUSH
15391: LD_INT 9
15393: PUSH
15394: LD_INT 10
15396: PUSH
15397: LD_INT 11
15399: PUSH
15400: LD_INT 12
15402: PUSH
15403: LD_INT 13
15405: PUSH
15406: LD_INT 14
15408: PUSH
15409: LD_INT 15
15411: PUSH
15412: LD_INT 16
15414: PUSH
15415: LD_INT 17
15417: PUSH
15418: LD_INT 18
15420: PUSH
15421: LD_INT 19
15423: PUSH
15424: LD_INT 20
15426: PUSH
15427: LD_INT 21
15429: PUSH
15430: LD_INT 22
15432: PUSH
15433: LD_INT 23
15435: PUSH
15436: LD_INT 24
15438: PUSH
15439: LD_INT 25
15441: PUSH
15442: LD_INT 26
15444: PUSH
15445: LD_INT 28
15447: PUSH
15448: LD_INT 30
15450: PUSH
15451: LD_INT 31
15453: PUSH
15454: LD_INT 32
15456: PUSH
15457: LD_INT 36
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 101
15493: PUSH
15494: LD_INT 102
15496: PUSH
15497: LD_INT 103
15499: PUSH
15500: LD_INT 104
15502: PUSH
15503: LD_INT 105
15505: PUSH
15506: LD_INT 106
15508: PUSH
15509: LD_INT 107
15511: PUSH
15512: LD_INT 108
15514: PUSH
15515: LD_INT 109
15517: PUSH
15518: LD_INT 110
15520: PUSH
15521: LD_INT 111
15523: PUSH
15524: LD_INT 112
15526: PUSH
15527: LD_INT 114
15529: PUSH
15530: LD_INT 116
15532: PUSH
15533: LD_INT 117
15535: PUSH
15536: LD_INT 118
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: ST_TO_ADDR
15561: GO 17456
15563: LD_INT 11
15565: DOUBLE
15566: EQUAL
15567: IFTRUE 15571
15569: GO 15775
15571: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15572: LD_ADDR_VAR 0 2
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: LD_INT 3
15582: PUSH
15583: LD_INT 4
15585: PUSH
15586: LD_INT 5
15588: PUSH
15589: LD_INT 6
15591: PUSH
15592: LD_INT 7
15594: PUSH
15595: LD_INT 8
15597: PUSH
15598: LD_INT 9
15600: PUSH
15601: LD_INT 10
15603: PUSH
15604: LD_INT 11
15606: PUSH
15607: LD_INT 12
15609: PUSH
15610: LD_INT 13
15612: PUSH
15613: LD_INT 14
15615: PUSH
15616: LD_INT 15
15618: PUSH
15619: LD_INT 16
15621: PUSH
15622: LD_INT 17
15624: PUSH
15625: LD_INT 18
15627: PUSH
15628: LD_INT 19
15630: PUSH
15631: LD_INT 20
15633: PUSH
15634: LD_INT 21
15636: PUSH
15637: LD_INT 22
15639: PUSH
15640: LD_INT 23
15642: PUSH
15643: LD_INT 24
15645: PUSH
15646: LD_INT 25
15648: PUSH
15649: LD_INT 26
15651: PUSH
15652: LD_INT 28
15654: PUSH
15655: LD_INT 30
15657: PUSH
15658: LD_INT 31
15660: PUSH
15661: LD_INT 32
15663: PUSH
15664: LD_INT 34
15666: PUSH
15667: LD_INT 36
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 101
15705: PUSH
15706: LD_INT 102
15708: PUSH
15709: LD_INT 103
15711: PUSH
15712: LD_INT 104
15714: PUSH
15715: LD_INT 105
15717: PUSH
15718: LD_INT 106
15720: PUSH
15721: LD_INT 107
15723: PUSH
15724: LD_INT 108
15726: PUSH
15727: LD_INT 109
15729: PUSH
15730: LD_INT 110
15732: PUSH
15733: LD_INT 111
15735: PUSH
15736: LD_INT 112
15738: PUSH
15739: LD_INT 114
15741: PUSH
15742: LD_INT 116
15744: PUSH
15745: LD_INT 117
15747: PUSH
15748: LD_INT 118
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: ST_TO_ADDR
15773: GO 17456
15775: LD_INT 12
15777: DOUBLE
15778: EQUAL
15779: IFTRUE 15783
15781: GO 16003
15783: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15784: LD_ADDR_VAR 0 2
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: LD_INT 2
15794: PUSH
15795: LD_INT 3
15797: PUSH
15798: LD_INT 4
15800: PUSH
15801: LD_INT 5
15803: PUSH
15804: LD_INT 6
15806: PUSH
15807: LD_INT 7
15809: PUSH
15810: LD_INT 8
15812: PUSH
15813: LD_INT 9
15815: PUSH
15816: LD_INT 10
15818: PUSH
15819: LD_INT 11
15821: PUSH
15822: LD_INT 12
15824: PUSH
15825: LD_INT 13
15827: PUSH
15828: LD_INT 14
15830: PUSH
15831: LD_INT 15
15833: PUSH
15834: LD_INT 16
15836: PUSH
15837: LD_INT 17
15839: PUSH
15840: LD_INT 18
15842: PUSH
15843: LD_INT 19
15845: PUSH
15846: LD_INT 20
15848: PUSH
15849: LD_INT 21
15851: PUSH
15852: LD_INT 22
15854: PUSH
15855: LD_INT 23
15857: PUSH
15858: LD_INT 24
15860: PUSH
15861: LD_INT 25
15863: PUSH
15864: LD_INT 26
15866: PUSH
15867: LD_INT 27
15869: PUSH
15870: LD_INT 28
15872: PUSH
15873: LD_INT 30
15875: PUSH
15876: LD_INT 31
15878: PUSH
15879: LD_INT 32
15881: PUSH
15882: LD_INT 33
15884: PUSH
15885: LD_INT 34
15887: PUSH
15888: LD_INT 36
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 101
15929: PUSH
15930: LD_INT 102
15932: PUSH
15933: LD_INT 103
15935: PUSH
15936: LD_INT 104
15938: PUSH
15939: LD_INT 105
15941: PUSH
15942: LD_INT 106
15944: PUSH
15945: LD_INT 107
15947: PUSH
15948: LD_INT 108
15950: PUSH
15951: LD_INT 109
15953: PUSH
15954: LD_INT 110
15956: PUSH
15957: LD_INT 111
15959: PUSH
15960: LD_INT 112
15962: PUSH
15963: LD_INT 113
15965: PUSH
15966: LD_INT 114
15968: PUSH
15969: LD_INT 116
15971: PUSH
15972: LD_INT 117
15974: PUSH
15975: LD_INT 118
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: ST_TO_ADDR
16001: GO 17456
16003: LD_INT 13
16005: DOUBLE
16006: EQUAL
16007: IFTRUE 16011
16009: GO 16219
16011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16012: LD_ADDR_VAR 0 2
16016: PUSH
16017: LD_INT 1
16019: PUSH
16020: LD_INT 2
16022: PUSH
16023: LD_INT 3
16025: PUSH
16026: LD_INT 4
16028: PUSH
16029: LD_INT 5
16031: PUSH
16032: LD_INT 8
16034: PUSH
16035: LD_INT 9
16037: PUSH
16038: LD_INT 10
16040: PUSH
16041: LD_INT 11
16043: PUSH
16044: LD_INT 12
16046: PUSH
16047: LD_INT 14
16049: PUSH
16050: LD_INT 15
16052: PUSH
16053: LD_INT 16
16055: PUSH
16056: LD_INT 17
16058: PUSH
16059: LD_INT 18
16061: PUSH
16062: LD_INT 19
16064: PUSH
16065: LD_INT 20
16067: PUSH
16068: LD_INT 21
16070: PUSH
16071: LD_INT 22
16073: PUSH
16074: LD_INT 23
16076: PUSH
16077: LD_INT 24
16079: PUSH
16080: LD_INT 25
16082: PUSH
16083: LD_INT 26
16085: PUSH
16086: LD_INT 27
16088: PUSH
16089: LD_INT 28
16091: PUSH
16092: LD_INT 30
16094: PUSH
16095: LD_INT 31
16097: PUSH
16098: LD_INT 32
16100: PUSH
16101: LD_INT 33
16103: PUSH
16104: LD_INT 34
16106: PUSH
16107: LD_INT 36
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 101
16145: PUSH
16146: LD_INT 102
16148: PUSH
16149: LD_INT 103
16151: PUSH
16152: LD_INT 104
16154: PUSH
16155: LD_INT 105
16157: PUSH
16158: LD_INT 106
16160: PUSH
16161: LD_INT 107
16163: PUSH
16164: LD_INT 108
16166: PUSH
16167: LD_INT 109
16169: PUSH
16170: LD_INT 110
16172: PUSH
16173: LD_INT 111
16175: PUSH
16176: LD_INT 112
16178: PUSH
16179: LD_INT 113
16181: PUSH
16182: LD_INT 114
16184: PUSH
16185: LD_INT 116
16187: PUSH
16188: LD_INT 117
16190: PUSH
16191: LD_INT 118
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: ST_TO_ADDR
16217: GO 17456
16219: LD_INT 14
16221: DOUBLE
16222: EQUAL
16223: IFTRUE 16227
16225: GO 16451
16227: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16228: LD_ADDR_VAR 0 2
16232: PUSH
16233: LD_INT 1
16235: PUSH
16236: LD_INT 2
16238: PUSH
16239: LD_INT 3
16241: PUSH
16242: LD_INT 4
16244: PUSH
16245: LD_INT 5
16247: PUSH
16248: LD_INT 6
16250: PUSH
16251: LD_INT 7
16253: PUSH
16254: LD_INT 8
16256: PUSH
16257: LD_INT 9
16259: PUSH
16260: LD_INT 10
16262: PUSH
16263: LD_INT 11
16265: PUSH
16266: LD_INT 12
16268: PUSH
16269: LD_INT 13
16271: PUSH
16272: LD_INT 14
16274: PUSH
16275: LD_INT 15
16277: PUSH
16278: LD_INT 16
16280: PUSH
16281: LD_INT 17
16283: PUSH
16284: LD_INT 18
16286: PUSH
16287: LD_INT 19
16289: PUSH
16290: LD_INT 20
16292: PUSH
16293: LD_INT 21
16295: PUSH
16296: LD_INT 22
16298: PUSH
16299: LD_INT 23
16301: PUSH
16302: LD_INT 24
16304: PUSH
16305: LD_INT 25
16307: PUSH
16308: LD_INT 26
16310: PUSH
16311: LD_INT 27
16313: PUSH
16314: LD_INT 28
16316: PUSH
16317: LD_INT 29
16319: PUSH
16320: LD_INT 30
16322: PUSH
16323: LD_INT 31
16325: PUSH
16326: LD_INT 32
16328: PUSH
16329: LD_INT 33
16331: PUSH
16332: LD_INT 34
16334: PUSH
16335: LD_INT 36
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 101
16377: PUSH
16378: LD_INT 102
16380: PUSH
16381: LD_INT 103
16383: PUSH
16384: LD_INT 104
16386: PUSH
16387: LD_INT 105
16389: PUSH
16390: LD_INT 106
16392: PUSH
16393: LD_INT 107
16395: PUSH
16396: LD_INT 108
16398: PUSH
16399: LD_INT 109
16401: PUSH
16402: LD_INT 110
16404: PUSH
16405: LD_INT 111
16407: PUSH
16408: LD_INT 112
16410: PUSH
16411: LD_INT 113
16413: PUSH
16414: LD_INT 114
16416: PUSH
16417: LD_INT 116
16419: PUSH
16420: LD_INT 117
16422: PUSH
16423: LD_INT 118
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: ST_TO_ADDR
16449: GO 17456
16451: LD_INT 15
16453: DOUBLE
16454: EQUAL
16455: IFTRUE 16459
16457: GO 16683
16459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16460: LD_ADDR_VAR 0 2
16464: PUSH
16465: LD_INT 1
16467: PUSH
16468: LD_INT 2
16470: PUSH
16471: LD_INT 3
16473: PUSH
16474: LD_INT 4
16476: PUSH
16477: LD_INT 5
16479: PUSH
16480: LD_INT 6
16482: PUSH
16483: LD_INT 7
16485: PUSH
16486: LD_INT 8
16488: PUSH
16489: LD_INT 9
16491: PUSH
16492: LD_INT 10
16494: PUSH
16495: LD_INT 11
16497: PUSH
16498: LD_INT 12
16500: PUSH
16501: LD_INT 13
16503: PUSH
16504: LD_INT 14
16506: PUSH
16507: LD_INT 15
16509: PUSH
16510: LD_INT 16
16512: PUSH
16513: LD_INT 17
16515: PUSH
16516: LD_INT 18
16518: PUSH
16519: LD_INT 19
16521: PUSH
16522: LD_INT 20
16524: PUSH
16525: LD_INT 21
16527: PUSH
16528: LD_INT 22
16530: PUSH
16531: LD_INT 23
16533: PUSH
16534: LD_INT 24
16536: PUSH
16537: LD_INT 25
16539: PUSH
16540: LD_INT 26
16542: PUSH
16543: LD_INT 27
16545: PUSH
16546: LD_INT 28
16548: PUSH
16549: LD_INT 29
16551: PUSH
16552: LD_INT 30
16554: PUSH
16555: LD_INT 31
16557: PUSH
16558: LD_INT 32
16560: PUSH
16561: LD_INT 33
16563: PUSH
16564: LD_INT 34
16566: PUSH
16567: LD_INT 36
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 101
16609: PUSH
16610: LD_INT 102
16612: PUSH
16613: LD_INT 103
16615: PUSH
16616: LD_INT 104
16618: PUSH
16619: LD_INT 105
16621: PUSH
16622: LD_INT 106
16624: PUSH
16625: LD_INT 107
16627: PUSH
16628: LD_INT 108
16630: PUSH
16631: LD_INT 109
16633: PUSH
16634: LD_INT 110
16636: PUSH
16637: LD_INT 111
16639: PUSH
16640: LD_INT 112
16642: PUSH
16643: LD_INT 113
16645: PUSH
16646: LD_INT 114
16648: PUSH
16649: LD_INT 116
16651: PUSH
16652: LD_INT 117
16654: PUSH
16655: LD_INT 118
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: ST_TO_ADDR
16681: GO 17456
16683: LD_INT 16
16685: DOUBLE
16686: EQUAL
16687: IFTRUE 16691
16689: GO 16827
16691: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16692: LD_ADDR_VAR 0 2
16696: PUSH
16697: LD_INT 2
16699: PUSH
16700: LD_INT 4
16702: PUSH
16703: LD_INT 5
16705: PUSH
16706: LD_INT 7
16708: PUSH
16709: LD_INT 11
16711: PUSH
16712: LD_INT 12
16714: PUSH
16715: LD_INT 15
16717: PUSH
16718: LD_INT 16
16720: PUSH
16721: LD_INT 20
16723: PUSH
16724: LD_INT 21
16726: PUSH
16727: LD_INT 22
16729: PUSH
16730: LD_INT 23
16732: PUSH
16733: LD_INT 25
16735: PUSH
16736: LD_INT 26
16738: PUSH
16739: LD_INT 30
16741: PUSH
16742: LD_INT 31
16744: PUSH
16745: LD_INT 32
16747: PUSH
16748: LD_INT 33
16750: PUSH
16751: LD_INT 34
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 101
16777: PUSH
16778: LD_INT 102
16780: PUSH
16781: LD_INT 103
16783: PUSH
16784: LD_INT 106
16786: PUSH
16787: LD_INT 108
16789: PUSH
16790: LD_INT 112
16792: PUSH
16793: LD_INT 113
16795: PUSH
16796: LD_INT 114
16798: PUSH
16799: LD_INT 116
16801: PUSH
16802: LD_INT 117
16804: PUSH
16805: LD_INT 118
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: ST_TO_ADDR
16825: GO 17456
16827: LD_INT 17
16829: DOUBLE
16830: EQUAL
16831: IFTRUE 16835
16833: GO 17059
16835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16836: LD_ADDR_VAR 0 2
16840: PUSH
16841: LD_INT 1
16843: PUSH
16844: LD_INT 2
16846: PUSH
16847: LD_INT 3
16849: PUSH
16850: LD_INT 4
16852: PUSH
16853: LD_INT 5
16855: PUSH
16856: LD_INT 6
16858: PUSH
16859: LD_INT 7
16861: PUSH
16862: LD_INT 8
16864: PUSH
16865: LD_INT 9
16867: PUSH
16868: LD_INT 10
16870: PUSH
16871: LD_INT 11
16873: PUSH
16874: LD_INT 12
16876: PUSH
16877: LD_INT 13
16879: PUSH
16880: LD_INT 14
16882: PUSH
16883: LD_INT 15
16885: PUSH
16886: LD_INT 16
16888: PUSH
16889: LD_INT 17
16891: PUSH
16892: LD_INT 18
16894: PUSH
16895: LD_INT 19
16897: PUSH
16898: LD_INT 20
16900: PUSH
16901: LD_INT 21
16903: PUSH
16904: LD_INT 22
16906: PUSH
16907: LD_INT 23
16909: PUSH
16910: LD_INT 24
16912: PUSH
16913: LD_INT 25
16915: PUSH
16916: LD_INT 26
16918: PUSH
16919: LD_INT 27
16921: PUSH
16922: LD_INT 28
16924: PUSH
16925: LD_INT 29
16927: PUSH
16928: LD_INT 30
16930: PUSH
16931: LD_INT 31
16933: PUSH
16934: LD_INT 32
16936: PUSH
16937: LD_INT 33
16939: PUSH
16940: LD_INT 34
16942: PUSH
16943: LD_INT 36
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: PUSH
16983: LD_INT 101
16985: PUSH
16986: LD_INT 102
16988: PUSH
16989: LD_INT 103
16991: PUSH
16992: LD_INT 104
16994: PUSH
16995: LD_INT 105
16997: PUSH
16998: LD_INT 106
17000: PUSH
17001: LD_INT 107
17003: PUSH
17004: LD_INT 108
17006: PUSH
17007: LD_INT 109
17009: PUSH
17010: LD_INT 110
17012: PUSH
17013: LD_INT 111
17015: PUSH
17016: LD_INT 112
17018: PUSH
17019: LD_INT 113
17021: PUSH
17022: LD_INT 114
17024: PUSH
17025: LD_INT 116
17027: PUSH
17028: LD_INT 117
17030: PUSH
17031: LD_INT 118
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: ST_TO_ADDR
17057: GO 17456
17059: LD_INT 18
17061: DOUBLE
17062: EQUAL
17063: IFTRUE 17067
17065: GO 17215
17067: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17068: LD_ADDR_VAR 0 2
17072: PUSH
17073: LD_INT 2
17075: PUSH
17076: LD_INT 4
17078: PUSH
17079: LD_INT 5
17081: PUSH
17082: LD_INT 7
17084: PUSH
17085: LD_INT 11
17087: PUSH
17088: LD_INT 12
17090: PUSH
17091: LD_INT 15
17093: PUSH
17094: LD_INT 16
17096: PUSH
17097: LD_INT 20
17099: PUSH
17100: LD_INT 21
17102: PUSH
17103: LD_INT 22
17105: PUSH
17106: LD_INT 23
17108: PUSH
17109: LD_INT 25
17111: PUSH
17112: LD_INT 26
17114: PUSH
17115: LD_INT 30
17117: PUSH
17118: LD_INT 31
17120: PUSH
17121: LD_INT 32
17123: PUSH
17124: LD_INT 33
17126: PUSH
17127: LD_INT 34
17129: PUSH
17130: LD_INT 35
17132: PUSH
17133: LD_INT 36
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 101
17161: PUSH
17162: LD_INT 102
17164: PUSH
17165: LD_INT 103
17167: PUSH
17168: LD_INT 106
17170: PUSH
17171: LD_INT 108
17173: PUSH
17174: LD_INT 112
17176: PUSH
17177: LD_INT 113
17179: PUSH
17180: LD_INT 114
17182: PUSH
17183: LD_INT 115
17185: PUSH
17186: LD_INT 116
17188: PUSH
17189: LD_INT 117
17191: PUSH
17192: LD_INT 118
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: ST_TO_ADDR
17213: GO 17456
17215: LD_INT 19
17217: DOUBLE
17218: EQUAL
17219: IFTRUE 17223
17221: GO 17455
17223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17224: LD_ADDR_VAR 0 2
17228: PUSH
17229: LD_INT 1
17231: PUSH
17232: LD_INT 2
17234: PUSH
17235: LD_INT 3
17237: PUSH
17238: LD_INT 4
17240: PUSH
17241: LD_INT 5
17243: PUSH
17244: LD_INT 6
17246: PUSH
17247: LD_INT 7
17249: PUSH
17250: LD_INT 8
17252: PUSH
17253: LD_INT 9
17255: PUSH
17256: LD_INT 10
17258: PUSH
17259: LD_INT 11
17261: PUSH
17262: LD_INT 12
17264: PUSH
17265: LD_INT 13
17267: PUSH
17268: LD_INT 14
17270: PUSH
17271: LD_INT 15
17273: PUSH
17274: LD_INT 16
17276: PUSH
17277: LD_INT 17
17279: PUSH
17280: LD_INT 18
17282: PUSH
17283: LD_INT 19
17285: PUSH
17286: LD_INT 20
17288: PUSH
17289: LD_INT 21
17291: PUSH
17292: LD_INT 22
17294: PUSH
17295: LD_INT 23
17297: PUSH
17298: LD_INT 24
17300: PUSH
17301: LD_INT 25
17303: PUSH
17304: LD_INT 26
17306: PUSH
17307: LD_INT 27
17309: PUSH
17310: LD_INT 28
17312: PUSH
17313: LD_INT 29
17315: PUSH
17316: LD_INT 30
17318: PUSH
17319: LD_INT 31
17321: PUSH
17322: LD_INT 32
17324: PUSH
17325: LD_INT 33
17327: PUSH
17328: LD_INT 34
17330: PUSH
17331: LD_INT 35
17333: PUSH
17334: LD_INT 36
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 101
17377: PUSH
17378: LD_INT 102
17380: PUSH
17381: LD_INT 103
17383: PUSH
17384: LD_INT 104
17386: PUSH
17387: LD_INT 105
17389: PUSH
17390: LD_INT 106
17392: PUSH
17393: LD_INT 107
17395: PUSH
17396: LD_INT 108
17398: PUSH
17399: LD_INT 109
17401: PUSH
17402: LD_INT 110
17404: PUSH
17405: LD_INT 111
17407: PUSH
17408: LD_INT 112
17410: PUSH
17411: LD_INT 113
17413: PUSH
17414: LD_INT 114
17416: PUSH
17417: LD_INT 115
17419: PUSH
17420: LD_INT 116
17422: PUSH
17423: LD_INT 117
17425: PUSH
17426: LD_INT 118
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: ST_TO_ADDR
17453: GO 17456
17455: POP
// end else
17456: GO 17687
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: LD_INT 3
17471: PUSH
17472: LD_INT 4
17474: PUSH
17475: LD_INT 5
17477: PUSH
17478: LD_INT 6
17480: PUSH
17481: LD_INT 7
17483: PUSH
17484: LD_INT 8
17486: PUSH
17487: LD_INT 9
17489: PUSH
17490: LD_INT 10
17492: PUSH
17493: LD_INT 11
17495: PUSH
17496: LD_INT 12
17498: PUSH
17499: LD_INT 13
17501: PUSH
17502: LD_INT 14
17504: PUSH
17505: LD_INT 15
17507: PUSH
17508: LD_INT 16
17510: PUSH
17511: LD_INT 17
17513: PUSH
17514: LD_INT 18
17516: PUSH
17517: LD_INT 19
17519: PUSH
17520: LD_INT 20
17522: PUSH
17523: LD_INT 21
17525: PUSH
17526: LD_INT 22
17528: PUSH
17529: LD_INT 23
17531: PUSH
17532: LD_INT 24
17534: PUSH
17535: LD_INT 25
17537: PUSH
17538: LD_INT 26
17540: PUSH
17541: LD_INT 27
17543: PUSH
17544: LD_INT 28
17546: PUSH
17547: LD_INT 29
17549: PUSH
17550: LD_INT 30
17552: PUSH
17553: LD_INT 31
17555: PUSH
17556: LD_INT 32
17558: PUSH
17559: LD_INT 33
17561: PUSH
17562: LD_INT 34
17564: PUSH
17565: LD_INT 35
17567: PUSH
17568: LD_INT 36
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 101
17611: PUSH
17612: LD_INT 102
17614: PUSH
17615: LD_INT 103
17617: PUSH
17618: LD_INT 104
17620: PUSH
17621: LD_INT 105
17623: PUSH
17624: LD_INT 106
17626: PUSH
17627: LD_INT 107
17629: PUSH
17630: LD_INT 108
17632: PUSH
17633: LD_INT 109
17635: PUSH
17636: LD_INT 110
17638: PUSH
17639: LD_INT 111
17641: PUSH
17642: LD_INT 112
17644: PUSH
17645: LD_INT 113
17647: PUSH
17648: LD_INT 114
17650: PUSH
17651: LD_INT 115
17653: PUSH
17654: LD_INT 116
17656: PUSH
17657: LD_INT 117
17659: PUSH
17660: LD_INT 118
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: ST_TO_ADDR
// if result then
17687: LD_VAR 0 2
17691: IFFALSE 18477
// begin normal :=  ;
17693: LD_ADDR_VAR 0 5
17697: PUSH
17698: LD_STRING 
17700: ST_TO_ADDR
// hardcore :=  ;
17701: LD_ADDR_VAR 0 6
17705: PUSH
17706: LD_STRING 
17708: ST_TO_ADDR
// active :=  ;
17709: LD_ADDR_VAR 0 7
17713: PUSH
17714: LD_STRING 
17716: ST_TO_ADDR
// for i = 1 to normalCounter do
17717: LD_ADDR_VAR 0 8
17721: PUSH
17722: DOUBLE
17723: LD_INT 1
17725: DEC
17726: ST_TO_ADDR
17727: LD_EXP 23
17731: PUSH
17732: FOR_TO
17733: IFFALSE 17834
// begin tmp := 0 ;
17735: LD_ADDR_VAR 0 3
17739: PUSH
17740: LD_STRING 0
17742: ST_TO_ADDR
// if result [ 1 ] then
17743: LD_VAR 0 2
17747: PUSH
17748: LD_INT 1
17750: ARRAY
17751: IFFALSE 17816
// if result [ 1 ] [ 1 ] = i then
17753: LD_VAR 0 2
17757: PUSH
17758: LD_INT 1
17760: ARRAY
17761: PUSH
17762: LD_INT 1
17764: ARRAY
17765: PUSH
17766: LD_VAR 0 8
17770: EQUAL
17771: IFFALSE 17816
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17773: LD_ADDR_VAR 0 2
17777: PUSH
17778: LD_VAR 0 2
17782: PPUSH
17783: LD_INT 1
17785: PPUSH
17786: LD_VAR 0 2
17790: PUSH
17791: LD_INT 1
17793: ARRAY
17794: PPUSH
17795: LD_INT 1
17797: PPUSH
17798: CALL_OW 3
17802: PPUSH
17803: CALL_OW 1
17807: ST_TO_ADDR
// tmp := 1 ;
17808: LD_ADDR_VAR 0 3
17812: PUSH
17813: LD_STRING 1
17815: ST_TO_ADDR
// end ; normal := normal & tmp ;
17816: LD_ADDR_VAR 0 5
17820: PUSH
17821: LD_VAR 0 5
17825: PUSH
17826: LD_VAR 0 3
17830: STR
17831: ST_TO_ADDR
// end ;
17832: GO 17732
17834: POP
17835: POP
// for i = 1 to hardcoreCounter do
17836: LD_ADDR_VAR 0 8
17840: PUSH
17841: DOUBLE
17842: LD_INT 1
17844: DEC
17845: ST_TO_ADDR
17846: LD_EXP 24
17850: PUSH
17851: FOR_TO
17852: IFFALSE 17957
// begin tmp := 0 ;
17854: LD_ADDR_VAR 0 3
17858: PUSH
17859: LD_STRING 0
17861: ST_TO_ADDR
// if result [ 2 ] then
17862: LD_VAR 0 2
17866: PUSH
17867: LD_INT 2
17869: ARRAY
17870: IFFALSE 17939
// if result [ 2 ] [ 1 ] = 100 + i then
17872: LD_VAR 0 2
17876: PUSH
17877: LD_INT 2
17879: ARRAY
17880: PUSH
17881: LD_INT 1
17883: ARRAY
17884: PUSH
17885: LD_INT 100
17887: PUSH
17888: LD_VAR 0 8
17892: PLUS
17893: EQUAL
17894: IFFALSE 17939
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17896: LD_ADDR_VAR 0 2
17900: PUSH
17901: LD_VAR 0 2
17905: PPUSH
17906: LD_INT 2
17908: PPUSH
17909: LD_VAR 0 2
17913: PUSH
17914: LD_INT 2
17916: ARRAY
17917: PPUSH
17918: LD_INT 1
17920: PPUSH
17921: CALL_OW 3
17925: PPUSH
17926: CALL_OW 1
17930: ST_TO_ADDR
// tmp := 1 ;
17931: LD_ADDR_VAR 0 3
17935: PUSH
17936: LD_STRING 1
17938: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17939: LD_ADDR_VAR 0 6
17943: PUSH
17944: LD_VAR 0 6
17948: PUSH
17949: LD_VAR 0 3
17953: STR
17954: ST_TO_ADDR
// end ;
17955: GO 17851
17957: POP
17958: POP
// if isGameLoad then
17959: LD_VAR 0 1
17963: IFFALSE 18438
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17965: LD_ADDR_VAR 0 4
17969: PUSH
17970: LD_EXP 27
17974: PUSH
17975: LD_EXP 26
17979: PUSH
17980: LD_EXP 28
17984: PUSH
17985: LD_EXP 25
17989: PUSH
17990: LD_EXP 29
17994: PUSH
17995: LD_EXP 30
17999: PUSH
18000: LD_EXP 31
18004: PUSH
18005: LD_EXP 32
18009: PUSH
18010: LD_EXP 33
18014: PUSH
18015: LD_EXP 34
18019: PUSH
18020: LD_EXP 35
18024: PUSH
18025: LD_EXP 36
18029: PUSH
18030: LD_EXP 37
18034: PUSH
18035: LD_EXP 38
18039: PUSH
18040: LD_EXP 46
18044: PUSH
18045: LD_EXP 47
18049: PUSH
18050: LD_EXP 48
18054: PUSH
18055: LD_EXP 49
18059: PUSH
18060: LD_EXP 51
18064: PUSH
18065: LD_EXP 52
18069: PUSH
18070: LD_EXP 53
18074: PUSH
18075: LD_EXP 56
18079: PUSH
18080: LD_EXP 58
18084: PUSH
18085: LD_EXP 59
18089: PUSH
18090: LD_EXP 60
18094: PUSH
18095: LD_EXP 62
18099: PUSH
18100: LD_EXP 63
18104: PUSH
18105: LD_EXP 66
18109: PUSH
18110: LD_EXP 67
18114: PUSH
18115: LD_EXP 68
18119: PUSH
18120: LD_EXP 69
18124: PUSH
18125: LD_EXP 70
18129: PUSH
18130: LD_EXP 71
18134: PUSH
18135: LD_EXP 72
18139: PUSH
18140: LD_EXP 73
18144: PUSH
18145: LD_EXP 74
18149: PUSH
18150: LD_EXP 39
18154: PUSH
18155: LD_EXP 40
18159: PUSH
18160: LD_EXP 43
18164: PUSH
18165: LD_EXP 44
18169: PUSH
18170: LD_EXP 45
18174: PUSH
18175: LD_EXP 41
18179: PUSH
18180: LD_EXP 42
18184: PUSH
18185: LD_EXP 50
18189: PUSH
18190: LD_EXP 54
18194: PUSH
18195: LD_EXP 55
18199: PUSH
18200: LD_EXP 57
18204: PUSH
18205: LD_EXP 61
18209: PUSH
18210: LD_EXP 64
18214: PUSH
18215: LD_EXP 65
18219: PUSH
18220: LD_EXP 75
18224: PUSH
18225: LD_EXP 76
18229: PUSH
18230: LD_EXP 77
18234: PUSH
18235: LD_EXP 78
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: ST_TO_ADDR
// tmp :=  ;
18296: LD_ADDR_VAR 0 3
18300: PUSH
18301: LD_STRING 
18303: ST_TO_ADDR
// for i = 1 to normalCounter do
18304: LD_ADDR_VAR 0 8
18308: PUSH
18309: DOUBLE
18310: LD_INT 1
18312: DEC
18313: ST_TO_ADDR
18314: LD_EXP 23
18318: PUSH
18319: FOR_TO
18320: IFFALSE 18356
// begin if flags [ i ] then
18322: LD_VAR 0 4
18326: PUSH
18327: LD_VAR 0 8
18331: ARRAY
18332: IFFALSE 18354
// tmp := tmp & i & ; ;
18334: LD_ADDR_VAR 0 3
18338: PUSH
18339: LD_VAR 0 3
18343: PUSH
18344: LD_VAR 0 8
18348: STR
18349: PUSH
18350: LD_STRING ;
18352: STR
18353: ST_TO_ADDR
// end ;
18354: GO 18319
18356: POP
18357: POP
// for i = 1 to hardcoreCounter do
18358: LD_ADDR_VAR 0 8
18362: PUSH
18363: DOUBLE
18364: LD_INT 1
18366: DEC
18367: ST_TO_ADDR
18368: LD_EXP 24
18372: PUSH
18373: FOR_TO
18374: IFFALSE 18420
// begin if flags [ normalCounter + i ] then
18376: LD_VAR 0 4
18380: PUSH
18381: LD_EXP 23
18385: PUSH
18386: LD_VAR 0 8
18390: PLUS
18391: ARRAY
18392: IFFALSE 18418
// tmp := tmp & ( 100 + i ) & ; ;
18394: LD_ADDR_VAR 0 3
18398: PUSH
18399: LD_VAR 0 3
18403: PUSH
18404: LD_INT 100
18406: PUSH
18407: LD_VAR 0 8
18411: PLUS
18412: STR
18413: PUSH
18414: LD_STRING ;
18416: STR
18417: ST_TO_ADDR
// end ;
18418: GO 18373
18420: POP
18421: POP
// if tmp then
18422: LD_VAR 0 3
18426: IFFALSE 18438
// active := tmp ;
18428: LD_ADDR_VAR 0 7
18432: PUSH
18433: LD_VAR 0 3
18437: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18438: LD_STRING getStreamItemsFromMission("
18440: PUSH
18441: LD_VAR 0 5
18445: STR
18446: PUSH
18447: LD_STRING ","
18449: STR
18450: PUSH
18451: LD_VAR 0 6
18455: STR
18456: PUSH
18457: LD_STRING ","
18459: STR
18460: PUSH
18461: LD_VAR 0 7
18465: STR
18466: PUSH
18467: LD_STRING ")
18469: STR
18470: PPUSH
18471: CALL_OW 559
// end else
18475: GO 18484
// ToLua ( getStreamItemsFromMission("","","") ) ;
18477: LD_STRING getStreamItemsFromMission("","","")
18479: PPUSH
18480: CALL_OW 559
// end ;
18484: LD_VAR 0 2
18488: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18489: LD_EXP 22
18493: IFFALSE 18501
18495: PUSH
18496: LD_EXP 27
18500: AND
18501: IFFALSE 18625
18503: GO 18505
18505: DISABLE
18506: LD_INT 0
18508: PPUSH
18509: PPUSH
// begin enable ;
18510: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18511: LD_ADDR_VAR 0 2
18515: PUSH
18516: LD_INT 22
18518: PUSH
18519: LD_OWVAR 2
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 2
18530: PUSH
18531: LD_INT 34
18533: PUSH
18534: LD_INT 7
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 34
18543: PUSH
18544: LD_INT 45
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 34
18553: PUSH
18554: LD_INT 28
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 34
18563: PUSH
18564: LD_INT 47
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PPUSH
18582: CALL_OW 69
18586: ST_TO_ADDR
// if not tmp then
18587: LD_VAR 0 2
18591: NOT
18592: IFFALSE 18596
// exit ;
18594: GO 18625
// for i in tmp do
18596: LD_ADDR_VAR 0 1
18600: PUSH
18601: LD_VAR 0 2
18605: PUSH
18606: FOR_IN
18607: IFFALSE 18623
// begin SetLives ( i , 0 ) ;
18609: LD_VAR 0 1
18613: PPUSH
18614: LD_INT 0
18616: PPUSH
18617: CALL_OW 234
// end ;
18621: GO 18606
18623: POP
18624: POP
// end ;
18625: PPOPN 2
18627: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18628: LD_EXP 22
18632: IFFALSE 18640
18634: PUSH
18635: LD_EXP 28
18639: AND
18640: IFFALSE 18724
18642: GO 18644
18644: DISABLE
18645: LD_INT 0
18647: PPUSH
18648: PPUSH
// begin enable ;
18649: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18650: LD_ADDR_VAR 0 2
18654: PUSH
18655: LD_INT 22
18657: PUSH
18658: LD_OWVAR 2
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 32
18669: PUSH
18670: LD_INT 3
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PPUSH
18681: CALL_OW 69
18685: ST_TO_ADDR
// if not tmp then
18686: LD_VAR 0 2
18690: NOT
18691: IFFALSE 18695
// exit ;
18693: GO 18724
// for i in tmp do
18695: LD_ADDR_VAR 0 1
18699: PUSH
18700: LD_VAR 0 2
18704: PUSH
18705: FOR_IN
18706: IFFALSE 18722
// begin SetLives ( i , 0 ) ;
18708: LD_VAR 0 1
18712: PPUSH
18713: LD_INT 0
18715: PPUSH
18716: CALL_OW 234
// end ;
18720: GO 18705
18722: POP
18723: POP
// end ;
18724: PPOPN 2
18726: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18727: LD_EXP 22
18731: IFFALSE 18739
18733: PUSH
18734: LD_EXP 25
18738: AND
18739: IFFALSE 18832
18741: GO 18743
18743: DISABLE
18744: LD_INT 0
18746: PPUSH
// begin enable ;
18747: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18748: LD_ADDR_VAR 0 1
18752: PUSH
18753: LD_INT 22
18755: PUSH
18756: LD_OWVAR 2
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 2
18767: PUSH
18768: LD_INT 25
18770: PUSH
18771: LD_INT 5
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 25
18780: PUSH
18781: LD_INT 9
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 25
18790: PUSH
18791: LD_INT 8
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 69
18812: PUSH
18813: FOR_IN
18814: IFFALSE 18830
// begin SetClass ( i , 1 ) ;
18816: LD_VAR 0 1
18820: PPUSH
18821: LD_INT 1
18823: PPUSH
18824: CALL_OW 336
// end ;
18828: GO 18813
18830: POP
18831: POP
// end ;
18832: PPOPN 1
18834: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18835: LD_EXP 22
18839: IFFALSE 18847
18841: PUSH
18842: LD_EXP 26
18846: AND
18847: IFFALSE 18859
18849: PUSH
18850: LD_OWVAR 65
18854: PUSH
18855: LD_INT 7
18857: LESS
18858: AND
18859: IFFALSE 18873
18861: GO 18863
18863: DISABLE
// begin enable ;
18864: ENABLE
// game_speed := 7 ;
18865: LD_ADDR_OWVAR 65
18869: PUSH
18870: LD_INT 7
18872: ST_TO_ADDR
// end ;
18873: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18874: LD_EXP 22
18878: IFFALSE 18886
18880: PUSH
18881: LD_EXP 29
18885: AND
18886: IFFALSE 19088
18888: GO 18890
18890: DISABLE
18891: LD_INT 0
18893: PPUSH
18894: PPUSH
18895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18896: LD_ADDR_VAR 0 3
18900: PUSH
18901: LD_INT 81
18903: PUSH
18904: LD_OWVAR 2
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 21
18915: PUSH
18916: LD_INT 1
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PPUSH
18927: CALL_OW 69
18931: ST_TO_ADDR
// if not tmp then
18932: LD_VAR 0 3
18936: NOT
18937: IFFALSE 18941
// exit ;
18939: GO 19088
// if tmp > 5 then
18941: LD_VAR 0 3
18945: PUSH
18946: LD_INT 5
18948: GREATER
18949: IFFALSE 18961
// k := 5 else
18951: LD_ADDR_VAR 0 2
18955: PUSH
18956: LD_INT 5
18958: ST_TO_ADDR
18959: GO 18971
// k := tmp ;
18961: LD_ADDR_VAR 0 2
18965: PUSH
18966: LD_VAR 0 3
18970: ST_TO_ADDR
// for i := 1 to k do
18971: LD_ADDR_VAR 0 1
18975: PUSH
18976: DOUBLE
18977: LD_INT 1
18979: DEC
18980: ST_TO_ADDR
18981: LD_VAR 0 2
18985: PUSH
18986: FOR_TO
18987: IFFALSE 19086
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18989: LD_VAR 0 3
18993: PUSH
18994: LD_VAR 0 1
18998: ARRAY
18999: PPUSH
19000: LD_VAR 0 1
19004: PUSH
19005: LD_INT 4
19007: MOD
19008: PUSH
19009: LD_INT 1
19011: PLUS
19012: PPUSH
19013: CALL_OW 259
19017: PUSH
19018: LD_INT 10
19020: LESS
19021: IFFALSE 19084
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19023: LD_VAR 0 3
19027: PUSH
19028: LD_VAR 0 1
19032: ARRAY
19033: PPUSH
19034: LD_VAR 0 1
19038: PUSH
19039: LD_INT 4
19041: MOD
19042: PUSH
19043: LD_INT 1
19045: PLUS
19046: PPUSH
19047: LD_VAR 0 3
19051: PUSH
19052: LD_VAR 0 1
19056: ARRAY
19057: PPUSH
19058: LD_VAR 0 1
19062: PUSH
19063: LD_INT 4
19065: MOD
19066: PUSH
19067: LD_INT 1
19069: PLUS
19070: PPUSH
19071: CALL_OW 259
19075: PUSH
19076: LD_INT 1
19078: PLUS
19079: PPUSH
19080: CALL_OW 237
19084: GO 18986
19086: POP
19087: POP
// end ;
19088: PPOPN 3
19090: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19091: LD_EXP 22
19095: IFFALSE 19103
19097: PUSH
19098: LD_EXP 30
19102: AND
19103: IFFALSE 19123
19105: GO 19107
19107: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19108: LD_INT 4
19110: PPUSH
19111: LD_OWVAR 2
19115: PPUSH
19116: LD_INT 0
19118: PPUSH
19119: CALL_OW 324
19123: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19124: LD_EXP 22
19128: IFFALSE 19136
19130: PUSH
19131: LD_EXP 59
19135: AND
19136: IFFALSE 19156
19138: GO 19140
19140: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19141: LD_INT 19
19143: PPUSH
19144: LD_OWVAR 2
19148: PPUSH
19149: LD_INT 0
19151: PPUSH
19152: CALL_OW 324
19156: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19157: LD_EXP 22
19161: IFFALSE 19169
19163: PUSH
19164: LD_EXP 31
19168: AND
19169: IFFALSE 19271
19171: GO 19173
19173: DISABLE
19174: LD_INT 0
19176: PPUSH
19177: PPUSH
// begin enable ;
19178: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19179: LD_ADDR_VAR 0 2
19183: PUSH
19184: LD_INT 22
19186: PUSH
19187: LD_OWVAR 2
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 2
19198: PUSH
19199: LD_INT 34
19201: PUSH
19202: LD_INT 11
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 34
19211: PUSH
19212: LD_INT 30
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: LIST
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PPUSH
19228: CALL_OW 69
19232: ST_TO_ADDR
// if not tmp then
19233: LD_VAR 0 2
19237: NOT
19238: IFFALSE 19242
// exit ;
19240: GO 19271
// for i in tmp do
19242: LD_ADDR_VAR 0 1
19246: PUSH
19247: LD_VAR 0 2
19251: PUSH
19252: FOR_IN
19253: IFFALSE 19269
// begin SetLives ( i , 0 ) ;
19255: LD_VAR 0 1
19259: PPUSH
19260: LD_INT 0
19262: PPUSH
19263: CALL_OW 234
// end ;
19267: GO 19252
19269: POP
19270: POP
// end ;
19271: PPOPN 2
19273: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19274: LD_EXP 22
19278: IFFALSE 19286
19280: PUSH
19281: LD_EXP 32
19285: AND
19286: IFFALSE 19306
19288: GO 19290
19290: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19291: LD_INT 32
19293: PPUSH
19294: LD_OWVAR 2
19298: PPUSH
19299: LD_INT 0
19301: PPUSH
19302: CALL_OW 324
19306: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19307: LD_EXP 22
19311: IFFALSE 19319
19313: PUSH
19314: LD_EXP 33
19318: AND
19319: IFFALSE 19502
19321: GO 19323
19323: DISABLE
19324: LD_INT 0
19326: PPUSH
19327: PPUSH
19328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19329: LD_ADDR_VAR 0 2
19333: PUSH
19334: LD_INT 22
19336: PUSH
19337: LD_OWVAR 2
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 33
19348: PUSH
19349: LD_INT 3
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PPUSH
19360: CALL_OW 69
19364: ST_TO_ADDR
// if not tmp then
19365: LD_VAR 0 2
19369: NOT
19370: IFFALSE 19374
// exit ;
19372: GO 19502
// side := 0 ;
19374: LD_ADDR_VAR 0 3
19378: PUSH
19379: LD_INT 0
19381: ST_TO_ADDR
// for i := 1 to 8 do
19382: LD_ADDR_VAR 0 1
19386: PUSH
19387: DOUBLE
19388: LD_INT 1
19390: DEC
19391: ST_TO_ADDR
19392: LD_INT 8
19394: PUSH
19395: FOR_TO
19396: IFFALSE 19446
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19398: LD_OWVAR 2
19402: PUSH
19403: LD_VAR 0 1
19407: NONEQUAL
19408: IFFALSE 19430
19410: PUSH
19411: LD_OWVAR 2
19415: PPUSH
19416: LD_VAR 0 1
19420: PPUSH
19421: CALL_OW 81
19425: PUSH
19426: LD_INT 2
19428: EQUAL
19429: AND
19430: IFFALSE 19444
// begin side := i ;
19432: LD_ADDR_VAR 0 3
19436: PUSH
19437: LD_VAR 0 1
19441: ST_TO_ADDR
// break ;
19442: GO 19446
// end ;
19444: GO 19395
19446: POP
19447: POP
// if not side then
19448: LD_VAR 0 3
19452: NOT
19453: IFFALSE 19457
// exit ;
19455: GO 19502
// for i := 1 to tmp do
19457: LD_ADDR_VAR 0 1
19461: PUSH
19462: DOUBLE
19463: LD_INT 1
19465: DEC
19466: ST_TO_ADDR
19467: LD_VAR 0 2
19471: PUSH
19472: FOR_TO
19473: IFFALSE 19500
// if Prob ( 60 ) then
19475: LD_INT 60
19477: PPUSH
19478: CALL_OW 13
19482: IFFALSE 19498
// SetSide ( i , side ) ;
19484: LD_VAR 0 1
19488: PPUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: CALL_OW 235
19498: GO 19472
19500: POP
19501: POP
// end ;
19502: PPOPN 3
19504: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19505: LD_EXP 22
19509: IFFALSE 19517
19511: PUSH
19512: LD_EXP 35
19516: AND
19517: IFFALSE 19636
19519: GO 19521
19521: DISABLE
19522: LD_INT 0
19524: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19525: LD_ADDR_VAR 0 1
19529: PUSH
19530: LD_INT 22
19532: PUSH
19533: LD_OWVAR 2
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 21
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 3
19554: PUSH
19555: LD_INT 23
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: LIST
19573: PPUSH
19574: CALL_OW 69
19578: PUSH
19579: FOR_IN
19580: IFFALSE 19634
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19582: LD_VAR 0 1
19586: PPUSH
19587: CALL_OW 257
19591: PUSH
19592: LD_INT 1
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: LD_INT 3
19600: PUSH
19601: LD_INT 4
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: IN
19610: IFFALSE 19632
// SetClass ( un , rand ( 1 , 4 ) ) ;
19612: LD_VAR 0 1
19616: PPUSH
19617: LD_INT 1
19619: PPUSH
19620: LD_INT 4
19622: PPUSH
19623: CALL_OW 12
19627: PPUSH
19628: CALL_OW 336
19632: GO 19579
19634: POP
19635: POP
// end ;
19636: PPOPN 1
19638: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19639: LD_EXP 22
19643: IFFALSE 19651
19645: PUSH
19646: LD_EXP 34
19650: AND
19651: IFFALSE 19730
19653: GO 19655
19655: DISABLE
19656: LD_INT 0
19658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19659: LD_ADDR_VAR 0 1
19663: PUSH
19664: LD_INT 22
19666: PUSH
19667: LD_OWVAR 2
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 21
19678: PUSH
19679: LD_INT 3
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PPUSH
19690: CALL_OW 69
19694: ST_TO_ADDR
// if not tmp then
19695: LD_VAR 0 1
19699: NOT
19700: IFFALSE 19704
// exit ;
19702: GO 19730
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19704: LD_VAR 0 1
19708: PUSH
19709: LD_INT 1
19711: PPUSH
19712: LD_VAR 0 1
19716: PPUSH
19717: CALL_OW 12
19721: ARRAY
19722: PPUSH
19723: LD_INT 100
19725: PPUSH
19726: CALL_OW 234
// end ;
19730: PPOPN 1
19732: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19733: LD_EXP 22
19737: IFFALSE 19745
19739: PUSH
19740: LD_EXP 36
19744: AND
19745: IFFALSE 19843
19747: GO 19749
19749: DISABLE
19750: LD_INT 0
19752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19753: LD_ADDR_VAR 0 1
19757: PUSH
19758: LD_INT 22
19760: PUSH
19761: LD_OWVAR 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 21
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PPUSH
19784: CALL_OW 69
19788: ST_TO_ADDR
// if not tmp then
19789: LD_VAR 0 1
19793: NOT
19794: IFFALSE 19798
// exit ;
19796: GO 19843
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19798: LD_VAR 0 1
19802: PUSH
19803: LD_INT 1
19805: PPUSH
19806: LD_VAR 0 1
19810: PPUSH
19811: CALL_OW 12
19815: ARRAY
19816: PPUSH
19817: LD_INT 1
19819: PPUSH
19820: LD_INT 4
19822: PPUSH
19823: CALL_OW 12
19827: PPUSH
19828: LD_INT 3000
19830: PPUSH
19831: LD_INT 9000
19833: PPUSH
19834: CALL_OW 12
19838: PPUSH
19839: CALL_OW 492
// end ;
19843: PPOPN 1
19845: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19846: LD_EXP 22
19850: IFFALSE 19858
19852: PUSH
19853: LD_EXP 37
19857: AND
19858: IFFALSE 19878
19860: GO 19862
19862: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19863: LD_INT 1
19865: PPUSH
19866: LD_OWVAR 2
19870: PPUSH
19871: LD_INT 0
19873: PPUSH
19874: CALL_OW 324
19878: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19879: LD_EXP 22
19883: IFFALSE 19891
19885: PUSH
19886: LD_EXP 38
19890: AND
19891: IFFALSE 19974
19893: GO 19895
19895: DISABLE
19896: LD_INT 0
19898: PPUSH
19899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19900: LD_ADDR_VAR 0 2
19904: PUSH
19905: LD_INT 22
19907: PUSH
19908: LD_OWVAR 2
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 21
19919: PUSH
19920: LD_INT 3
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PPUSH
19931: CALL_OW 69
19935: ST_TO_ADDR
// if not tmp then
19936: LD_VAR 0 2
19940: NOT
19941: IFFALSE 19945
// exit ;
19943: GO 19974
// for i in tmp do
19945: LD_ADDR_VAR 0 1
19949: PUSH
19950: LD_VAR 0 2
19954: PUSH
19955: FOR_IN
19956: IFFALSE 19972
// SetBLevel ( i , 10 ) ;
19958: LD_VAR 0 1
19962: PPUSH
19963: LD_INT 10
19965: PPUSH
19966: CALL_OW 241
19970: GO 19955
19972: POP
19973: POP
// end ;
19974: PPOPN 2
19976: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19977: LD_EXP 22
19981: IFFALSE 19989
19983: PUSH
19984: LD_EXP 39
19988: AND
19989: IFFALSE 20100
19991: GO 19993
19993: DISABLE
19994: LD_INT 0
19996: PPUSH
19997: PPUSH
19998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19999: LD_ADDR_VAR 0 3
20003: PUSH
20004: LD_INT 22
20006: PUSH
20007: LD_OWVAR 2
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 25
20018: PUSH
20019: LD_INT 1
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PPUSH
20030: CALL_OW 69
20034: ST_TO_ADDR
// if not tmp then
20035: LD_VAR 0 3
20039: NOT
20040: IFFALSE 20044
// exit ;
20042: GO 20100
// un := tmp [ rand ( 1 , tmp ) ] ;
20044: LD_ADDR_VAR 0 2
20048: PUSH
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 1
20056: PPUSH
20057: LD_VAR 0 3
20061: PPUSH
20062: CALL_OW 12
20066: ARRAY
20067: ST_TO_ADDR
// if Crawls ( un ) then
20068: LD_VAR 0 2
20072: PPUSH
20073: CALL_OW 318
20077: IFFALSE 20088
// ComWalk ( un ) ;
20079: LD_VAR 0 2
20083: PPUSH
20084: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20088: LD_VAR 0 2
20092: PPUSH
20093: LD_INT 5
20095: PPUSH
20096: CALL_OW 336
// end ;
20100: PPOPN 3
20102: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20103: LD_EXP 22
20107: IFFALSE 20115
20109: PUSH
20110: LD_EXP 40
20114: AND
20115: IFFALSE 20127
20117: PUSH
20118: LD_OWVAR 67
20122: PUSH
20123: LD_INT 4
20125: LESS
20126: AND
20127: IFFALSE 20146
20129: GO 20131
20131: DISABLE
// begin Difficulty := Difficulty + 1 ;
20132: LD_ADDR_OWVAR 67
20136: PUSH
20137: LD_OWVAR 67
20141: PUSH
20142: LD_INT 1
20144: PLUS
20145: ST_TO_ADDR
// end ;
20146: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20147: LD_EXP 22
20151: IFFALSE 20159
20153: PUSH
20154: LD_EXP 41
20158: AND
20159: IFFALSE 20262
20161: GO 20163
20163: DISABLE
20164: LD_INT 0
20166: PPUSH
// begin for i := 1 to 5 do
20167: LD_ADDR_VAR 0 1
20171: PUSH
20172: DOUBLE
20173: LD_INT 1
20175: DEC
20176: ST_TO_ADDR
20177: LD_INT 5
20179: PUSH
20180: FOR_TO
20181: IFFALSE 20260
// begin uc_nation := nation_nature ;
20183: LD_ADDR_OWVAR 21
20187: PUSH
20188: LD_INT 0
20190: ST_TO_ADDR
// uc_side := 0 ;
20191: LD_ADDR_OWVAR 20
20195: PUSH
20196: LD_INT 0
20198: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20199: LD_ADDR_OWVAR 29
20203: PUSH
20204: LD_INT 12
20206: PUSH
20207: LD_INT 12
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: ST_TO_ADDR
// hc_agressivity := 20 ;
20214: LD_ADDR_OWVAR 35
20218: PUSH
20219: LD_INT 20
20221: ST_TO_ADDR
// hc_class := class_tiger ;
20222: LD_ADDR_OWVAR 28
20226: PUSH
20227: LD_INT 14
20229: ST_TO_ADDR
// hc_gallery :=  ;
20230: LD_ADDR_OWVAR 33
20234: PUSH
20235: LD_STRING 
20237: ST_TO_ADDR
// hc_name :=  ;
20238: LD_ADDR_OWVAR 26
20242: PUSH
20243: LD_STRING 
20245: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20246: CALL_OW 44
20250: PPUSH
20251: LD_INT 0
20253: PPUSH
20254: CALL_OW 51
// end ;
20258: GO 20180
20260: POP
20261: POP
// end ;
20262: PPOPN 1
20264: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20265: LD_EXP 22
20269: IFFALSE 20277
20271: PUSH
20272: LD_EXP 42
20276: AND
20277: IFFALSE 20286
20279: GO 20281
20281: DISABLE
// StreamSibBomb ;
20282: CALL 20287 0 0
20286: END
// export function StreamSibBomb ; var i , x , y ; begin
20287: LD_INT 0
20289: PPUSH
20290: PPUSH
20291: PPUSH
20292: PPUSH
// result := false ;
20293: LD_ADDR_VAR 0 1
20297: PUSH
20298: LD_INT 0
20300: ST_TO_ADDR
// for i := 1 to 16 do
20301: LD_ADDR_VAR 0 2
20305: PUSH
20306: DOUBLE
20307: LD_INT 1
20309: DEC
20310: ST_TO_ADDR
20311: LD_INT 16
20313: PUSH
20314: FOR_TO
20315: IFFALSE 20514
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20317: LD_ADDR_VAR 0 3
20321: PUSH
20322: LD_INT 10
20324: PUSH
20325: LD_INT 20
20327: PUSH
20328: LD_INT 30
20330: PUSH
20331: LD_INT 40
20333: PUSH
20334: LD_INT 50
20336: PUSH
20337: LD_INT 60
20339: PUSH
20340: LD_INT 70
20342: PUSH
20343: LD_INT 80
20345: PUSH
20346: LD_INT 90
20348: PUSH
20349: LD_INT 100
20351: PUSH
20352: LD_INT 110
20354: PUSH
20355: LD_INT 120
20357: PUSH
20358: LD_INT 130
20360: PUSH
20361: LD_INT 140
20363: PUSH
20364: LD_INT 150
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 1
20386: PPUSH
20387: LD_INT 15
20389: PPUSH
20390: CALL_OW 12
20394: ARRAY
20395: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20396: LD_ADDR_VAR 0 4
20400: PUSH
20401: LD_INT 10
20403: PUSH
20404: LD_INT 20
20406: PUSH
20407: LD_INT 30
20409: PUSH
20410: LD_INT 40
20412: PUSH
20413: LD_INT 50
20415: PUSH
20416: LD_INT 60
20418: PUSH
20419: LD_INT 70
20421: PUSH
20422: LD_INT 80
20424: PUSH
20425: LD_INT 90
20427: PUSH
20428: LD_INT 100
20430: PUSH
20431: LD_INT 110
20433: PUSH
20434: LD_INT 120
20436: PUSH
20437: LD_INT 130
20439: PUSH
20440: LD_INT 140
20442: PUSH
20443: LD_INT 150
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: PPUSH
20466: LD_INT 15
20468: PPUSH
20469: CALL_OW 12
20473: ARRAY
20474: ST_TO_ADDR
// if ValidHex ( x , y ) then
20475: LD_VAR 0 3
20479: PPUSH
20480: LD_VAR 0 4
20484: PPUSH
20485: CALL_OW 488
20489: IFFALSE 20512
// begin result := [ x , y ] ;
20491: LD_ADDR_VAR 0 1
20495: PUSH
20496: LD_VAR 0 3
20500: PUSH
20501: LD_VAR 0 4
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: ST_TO_ADDR
// break ;
20510: GO 20514
// end ; end ;
20512: GO 20314
20514: POP
20515: POP
// if result then
20516: LD_VAR 0 1
20520: IFFALSE 20580
// begin ToLua ( playSibBomb() ) ;
20522: LD_STRING playSibBomb()
20524: PPUSH
20525: CALL_OW 559
// wait ( 0 0$14 ) ;
20529: LD_INT 490
20531: PPUSH
20532: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20536: LD_VAR 0 1
20540: PUSH
20541: LD_INT 1
20543: ARRAY
20544: PPUSH
20545: LD_VAR 0 1
20549: PUSH
20550: LD_INT 2
20552: ARRAY
20553: PPUSH
20554: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20558: LD_VAR 0 1
20562: PUSH
20563: LD_INT 1
20565: ARRAY
20566: PPUSH
20567: LD_VAR 0 1
20571: PUSH
20572: LD_INT 2
20574: ARRAY
20575: PPUSH
20576: CALL_OW 429
// end ; end ;
20580: LD_VAR 0 1
20584: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20585: LD_EXP 22
20589: IFFALSE 20597
20591: PUSH
20592: LD_EXP 44
20596: AND
20597: IFFALSE 20609
20599: GO 20601
20601: DISABLE
// YouLost (  ) ;
20602: LD_STRING 
20604: PPUSH
20605: CALL_OW 104
20609: END
// every 0 0$1 trigger StreamModeActive and sFog do
20610: LD_EXP 22
20614: IFFALSE 20622
20616: PUSH
20617: LD_EXP 43
20621: AND
20622: IFFALSE 20636
20624: GO 20626
20626: DISABLE
// FogOff ( your_side ) ;
20627: LD_OWVAR 2
20631: PPUSH
20632: CALL_OW 344
20636: END
// every 0 0$1 trigger StreamModeActive and sSun do
20637: LD_EXP 22
20641: IFFALSE 20649
20643: PUSH
20644: LD_EXP 45
20648: AND
20649: IFFALSE 20677
20651: GO 20653
20653: DISABLE
// begin solar_recharge_percent := 0 ;
20654: LD_ADDR_OWVAR 79
20658: PUSH
20659: LD_INT 0
20661: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20662: LD_INT 10500
20664: PPUSH
20665: CALL_OW 67
// solar_recharge_percent := 100 ;
20669: LD_ADDR_OWVAR 79
20673: PUSH
20674: LD_INT 100
20676: ST_TO_ADDR
// end ;
20677: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20678: LD_EXP 22
20682: IFFALSE 20690
20684: PUSH
20685: LD_EXP 46
20689: AND
20690: IFFALSE 20929
20692: GO 20694
20694: DISABLE
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
20699: PPUSH
// begin tmp := [ ] ;
20700: LD_ADDR_VAR 0 3
20704: PUSH
20705: EMPTY
20706: ST_TO_ADDR
// for i := 1 to 6 do
20707: LD_ADDR_VAR 0 1
20711: PUSH
20712: DOUBLE
20713: LD_INT 1
20715: DEC
20716: ST_TO_ADDR
20717: LD_INT 6
20719: PUSH
20720: FOR_TO
20721: IFFALSE 20826
// begin uc_nation := nation_nature ;
20723: LD_ADDR_OWVAR 21
20727: PUSH
20728: LD_INT 0
20730: ST_TO_ADDR
// uc_side := 0 ;
20731: LD_ADDR_OWVAR 20
20735: PUSH
20736: LD_INT 0
20738: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20739: LD_ADDR_OWVAR 29
20743: PUSH
20744: LD_INT 12
20746: PUSH
20747: LD_INT 12
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: ST_TO_ADDR
// hc_agressivity := 20 ;
20754: LD_ADDR_OWVAR 35
20758: PUSH
20759: LD_INT 20
20761: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20762: LD_ADDR_OWVAR 28
20766: PUSH
20767: LD_INT 17
20769: ST_TO_ADDR
// hc_gallery :=  ;
20770: LD_ADDR_OWVAR 33
20774: PUSH
20775: LD_STRING 
20777: ST_TO_ADDR
// hc_name :=  ;
20778: LD_ADDR_OWVAR 26
20782: PUSH
20783: LD_STRING 
20785: ST_TO_ADDR
// un := CreateHuman ;
20786: LD_ADDR_VAR 0 2
20790: PUSH
20791: CALL_OW 44
20795: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20796: LD_VAR 0 2
20800: PPUSH
20801: LD_INT 1
20803: PPUSH
20804: CALL_OW 51
// tmp := tmp ^ un ;
20808: LD_ADDR_VAR 0 3
20812: PUSH
20813: LD_VAR 0 3
20817: PUSH
20818: LD_VAR 0 2
20822: ADD
20823: ST_TO_ADDR
// end ;
20824: GO 20720
20826: POP
20827: POP
// repeat wait ( 0 0$1 ) ;
20828: LD_INT 35
20830: PPUSH
20831: CALL_OW 67
// for un in tmp do
20835: LD_ADDR_VAR 0 2
20839: PUSH
20840: LD_VAR 0 3
20844: PUSH
20845: FOR_IN
20846: IFFALSE 20920
// begin if IsDead ( un ) then
20848: LD_VAR 0 2
20852: PPUSH
20853: CALL_OW 301
20857: IFFALSE 20877
// begin tmp := tmp diff un ;
20859: LD_ADDR_VAR 0 3
20863: PUSH
20864: LD_VAR 0 3
20868: PUSH
20869: LD_VAR 0 2
20873: DIFF
20874: ST_TO_ADDR
// continue ;
20875: GO 20845
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20877: LD_VAR 0 2
20881: PPUSH
20882: LD_INT 3
20884: PUSH
20885: LD_INT 22
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PPUSH
20899: CALL_OW 69
20903: PPUSH
20904: LD_VAR 0 2
20908: PPUSH
20909: CALL_OW 74
20913: PPUSH
20914: CALL_OW 115
// end ;
20918: GO 20845
20920: POP
20921: POP
// until not tmp ;
20922: LD_VAR 0 3
20926: NOT
20927: IFFALSE 20828
// end ;
20929: PPOPN 3
20931: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20932: LD_EXP 22
20936: IFFALSE 20944
20938: PUSH
20939: LD_EXP 47
20943: AND
20944: IFFALSE 20998
20946: GO 20948
20948: DISABLE
// begin ToLua ( displayTroll(); ) ;
20949: LD_STRING displayTroll();
20951: PPUSH
20952: CALL_OW 559
// wait ( 3 3$00 ) ;
20956: LD_INT 6300
20958: PPUSH
20959: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20963: LD_STRING hideTroll();
20965: PPUSH
20966: CALL_OW 559
// wait ( 1 1$00 ) ;
20970: LD_INT 2100
20972: PPUSH
20973: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20977: LD_STRING displayTroll();
20979: PPUSH
20980: CALL_OW 559
// wait ( 1 1$00 ) ;
20984: LD_INT 2100
20986: PPUSH
20987: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20991: LD_STRING hideTroll();
20993: PPUSH
20994: CALL_OW 559
// end ;
20998: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20999: LD_EXP 22
21003: IFFALSE 21011
21005: PUSH
21006: LD_EXP 48
21010: AND
21011: IFFALSE 21074
21013: GO 21015
21015: DISABLE
21016: LD_INT 0
21018: PPUSH
// begin p := 0 ;
21019: LD_ADDR_VAR 0 1
21023: PUSH
21024: LD_INT 0
21026: ST_TO_ADDR
// repeat game_speed := 1 ;
21027: LD_ADDR_OWVAR 65
21031: PUSH
21032: LD_INT 1
21034: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21035: LD_INT 35
21037: PPUSH
21038: CALL_OW 67
// p := p + 1 ;
21042: LD_ADDR_VAR 0 1
21046: PUSH
21047: LD_VAR 0 1
21051: PUSH
21052: LD_INT 1
21054: PLUS
21055: ST_TO_ADDR
// until p >= 60 ;
21056: LD_VAR 0 1
21060: PUSH
21061: LD_INT 60
21063: GREATEREQUAL
21064: IFFALSE 21027
// game_speed := 4 ;
21066: LD_ADDR_OWVAR 65
21070: PUSH
21071: LD_INT 4
21073: ST_TO_ADDR
// end ;
21074: PPOPN 1
21076: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21077: LD_EXP 22
21081: IFFALSE 21089
21083: PUSH
21084: LD_EXP 49
21088: AND
21089: IFFALSE 21235
21091: GO 21093
21093: DISABLE
21094: LD_INT 0
21096: PPUSH
21097: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21098: LD_ADDR_VAR 0 1
21102: PUSH
21103: LD_INT 22
21105: PUSH
21106: LD_OWVAR 2
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: LD_INT 30
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 30
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PPUSH
21147: CALL_OW 69
21151: ST_TO_ADDR
// if not depot then
21152: LD_VAR 0 1
21156: NOT
21157: IFFALSE 21161
// exit ;
21159: GO 21235
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: LD_VAR 0 1
21170: PUSH
21171: LD_INT 1
21173: PPUSH
21174: LD_VAR 0 1
21178: PPUSH
21179: CALL_OW 12
21183: ARRAY
21184: PPUSH
21185: CALL_OW 274
21189: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21190: LD_VAR 0 2
21194: PPUSH
21195: LD_INT 1
21197: PPUSH
21198: LD_INT 0
21200: PPUSH
21201: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21205: LD_VAR 0 2
21209: PPUSH
21210: LD_INT 2
21212: PPUSH
21213: LD_INT 0
21215: PPUSH
21216: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21220: LD_VAR 0 2
21224: PPUSH
21225: LD_INT 3
21227: PPUSH
21228: LD_INT 0
21230: PPUSH
21231: CALL_OW 277
// end ;
21235: PPOPN 2
21237: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21238: LD_EXP 22
21242: IFFALSE 21250
21244: PUSH
21245: LD_EXP 50
21249: AND
21250: IFFALSE 21347
21252: GO 21254
21254: DISABLE
21255: LD_INT 0
21257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21258: LD_ADDR_VAR 0 1
21262: PUSH
21263: LD_INT 22
21265: PUSH
21266: LD_OWVAR 2
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 21
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 3
21287: PUSH
21288: LD_INT 23
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: PPUSH
21307: CALL_OW 69
21311: ST_TO_ADDR
// if not tmp then
21312: LD_VAR 0 1
21316: NOT
21317: IFFALSE 21321
// exit ;
21319: GO 21347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21321: LD_VAR 0 1
21325: PUSH
21326: LD_INT 1
21328: PPUSH
21329: LD_VAR 0 1
21333: PPUSH
21334: CALL_OW 12
21338: ARRAY
21339: PPUSH
21340: LD_INT 200
21342: PPUSH
21343: CALL_OW 234
// end ;
21347: PPOPN 1
21349: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21350: LD_EXP 22
21354: IFFALSE 21362
21356: PUSH
21357: LD_EXP 51
21361: AND
21362: IFFALSE 21441
21364: GO 21366
21366: DISABLE
21367: LD_INT 0
21369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21370: LD_ADDR_VAR 0 1
21374: PUSH
21375: LD_INT 22
21377: PUSH
21378: LD_OWVAR 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 21
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PPUSH
21401: CALL_OW 69
21405: ST_TO_ADDR
// if not tmp then
21406: LD_VAR 0 1
21410: NOT
21411: IFFALSE 21415
// exit ;
21413: GO 21441
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21415: LD_VAR 0 1
21419: PUSH
21420: LD_INT 1
21422: PPUSH
21423: LD_VAR 0 1
21427: PPUSH
21428: CALL_OW 12
21432: ARRAY
21433: PPUSH
21434: LD_INT 60
21436: PPUSH
21437: CALL_OW 234
// end ;
21441: PPOPN 1
21443: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21444: LD_EXP 22
21448: IFFALSE 21456
21450: PUSH
21451: LD_EXP 52
21455: AND
21456: IFFALSE 21555
21458: GO 21460
21460: DISABLE
21461: LD_INT 0
21463: PPUSH
21464: PPUSH
// begin enable ;
21465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21466: LD_ADDR_VAR 0 1
21470: PUSH
21471: LD_INT 22
21473: PUSH
21474: LD_OWVAR 2
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 61
21485: PUSH
21486: EMPTY
21487: LIST
21488: PUSH
21489: LD_INT 33
21491: PUSH
21492: LD_INT 2
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: PPUSH
21504: CALL_OW 69
21508: ST_TO_ADDR
// if not tmp then
21509: LD_VAR 0 1
21513: NOT
21514: IFFALSE 21518
// exit ;
21516: GO 21555
// for i in tmp do
21518: LD_ADDR_VAR 0 2
21522: PUSH
21523: LD_VAR 0 1
21527: PUSH
21528: FOR_IN
21529: IFFALSE 21553
// if IsControledBy ( i ) then
21531: LD_VAR 0 2
21535: PPUSH
21536: CALL_OW 312
21540: IFFALSE 21551
// ComUnlink ( i ) ;
21542: LD_VAR 0 2
21546: PPUSH
21547: CALL_OW 136
21551: GO 21528
21553: POP
21554: POP
// end ;
21555: PPOPN 2
21557: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21558: LD_EXP 22
21562: IFFALSE 21570
21564: PUSH
21565: LD_EXP 53
21569: AND
21570: IFFALSE 21710
21572: GO 21574
21574: DISABLE
21575: LD_INT 0
21577: PPUSH
21578: PPUSH
// begin ToLua ( displayPowell(); ) ;
21579: LD_STRING displayPowell();
21581: PPUSH
21582: CALL_OW 559
// uc_side := 0 ;
21586: LD_ADDR_OWVAR 20
21590: PUSH
21591: LD_INT 0
21593: ST_TO_ADDR
// uc_nation := 2 ;
21594: LD_ADDR_OWVAR 21
21598: PUSH
21599: LD_INT 2
21601: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21602: LD_ADDR_OWVAR 37
21606: PUSH
21607: LD_INT 14
21609: ST_TO_ADDR
// vc_engine := engine_siberite ;
21610: LD_ADDR_OWVAR 39
21614: PUSH
21615: LD_INT 3
21617: ST_TO_ADDR
// vc_control := control_apeman ;
21618: LD_ADDR_OWVAR 38
21622: PUSH
21623: LD_INT 5
21625: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21626: LD_ADDR_OWVAR 40
21630: PUSH
21631: LD_INT 29
21633: ST_TO_ADDR
// un := CreateVehicle ;
21634: LD_ADDR_VAR 0 2
21638: PUSH
21639: CALL_OW 45
21643: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21644: LD_VAR 0 2
21648: PPUSH
21649: LD_INT 1
21651: PPUSH
21652: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21656: LD_INT 35
21658: PPUSH
21659: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21663: LD_VAR 0 2
21667: PPUSH
21668: LD_INT 22
21670: PUSH
21671: LD_OWVAR 2
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PPUSH
21680: CALL_OW 69
21684: PPUSH
21685: LD_VAR 0 2
21689: PPUSH
21690: CALL_OW 74
21694: PPUSH
21695: CALL_OW 115
// until IsDead ( un ) ;
21699: LD_VAR 0 2
21703: PPUSH
21704: CALL_OW 301
21708: IFFALSE 21656
// end ;
21710: PPOPN 2
21712: END
// every 0 0$1 trigger StreamModeActive and sStu do
21713: LD_EXP 22
21717: IFFALSE 21725
21719: PUSH
21720: LD_EXP 61
21724: AND
21725: IFFALSE 21741
21727: GO 21729
21729: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21730: LD_STRING displayStucuk();
21732: PPUSH
21733: CALL_OW 559
// ResetFog ;
21737: CALL_OW 335
// end ;
21741: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21742: LD_EXP 22
21746: IFFALSE 21754
21748: PUSH
21749: LD_EXP 54
21753: AND
21754: IFFALSE 21895
21756: GO 21758
21758: DISABLE
21759: LD_INT 0
21761: PPUSH
21762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21763: LD_ADDR_VAR 0 2
21767: PUSH
21768: LD_INT 22
21770: PUSH
21771: LD_OWVAR 2
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 21
21782: PUSH
21783: LD_INT 1
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PPUSH
21794: CALL_OW 69
21798: ST_TO_ADDR
// if not tmp then
21799: LD_VAR 0 2
21803: NOT
21804: IFFALSE 21808
// exit ;
21806: GO 21895
// un := tmp [ rand ( 1 , tmp ) ] ;
21808: LD_ADDR_VAR 0 1
21812: PUSH
21813: LD_VAR 0 2
21817: PUSH
21818: LD_INT 1
21820: PPUSH
21821: LD_VAR 0 2
21825: PPUSH
21826: CALL_OW 12
21830: ARRAY
21831: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21832: LD_VAR 0 1
21836: PPUSH
21837: LD_INT 0
21839: PPUSH
21840: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21844: LD_VAR 0 1
21848: PPUSH
21849: LD_OWVAR 3
21853: PUSH
21854: LD_VAR 0 1
21858: DIFF
21859: PPUSH
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL_OW 74
21869: PPUSH
21870: CALL_OW 115
// wait ( 0 0$20 ) ;
21874: LD_INT 700
21876: PPUSH
21877: CALL_OW 67
// SetSide ( un , your_side ) ;
21881: LD_VAR 0 1
21885: PPUSH
21886: LD_OWVAR 2
21890: PPUSH
21891: CALL_OW 235
// end ;
21895: PPOPN 2
21897: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21898: LD_EXP 22
21902: IFFALSE 21910
21904: PUSH
21905: LD_EXP 55
21909: AND
21910: IFFALSE 22016
21912: GO 21914
21914: DISABLE
21915: LD_INT 0
21917: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21918: LD_ADDR_VAR 0 1
21922: PUSH
21923: LD_INT 22
21925: PUSH
21926: LD_OWVAR 2
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: PUSH
21938: LD_INT 30
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 30
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: LIST
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PPUSH
21967: CALL_OW 69
21971: ST_TO_ADDR
// if not depot then
21972: LD_VAR 0 1
21976: NOT
21977: IFFALSE 21981
// exit ;
21979: GO 22016
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21981: LD_VAR 0 1
21985: PUSH
21986: LD_INT 1
21988: ARRAY
21989: PPUSH
21990: CALL_OW 250
21994: PPUSH
21995: LD_VAR 0 1
21999: PUSH
22000: LD_INT 1
22002: ARRAY
22003: PPUSH
22004: CALL_OW 251
22008: PPUSH
22009: LD_INT 70
22011: PPUSH
22012: CALL_OW 495
// end ;
22016: PPOPN 1
22018: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22019: LD_EXP 22
22023: IFFALSE 22031
22025: PUSH
22026: LD_EXP 56
22030: AND
22031: IFFALSE 22242
22033: GO 22035
22035: DISABLE
22036: LD_INT 0
22038: PPUSH
22039: PPUSH
22040: PPUSH
22041: PPUSH
22042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22043: LD_ADDR_VAR 0 5
22047: PUSH
22048: LD_INT 22
22050: PUSH
22051: LD_OWVAR 2
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 21
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PPUSH
22074: CALL_OW 69
22078: ST_TO_ADDR
// if not tmp then
22079: LD_VAR 0 5
22083: NOT
22084: IFFALSE 22088
// exit ;
22086: GO 22242
// for i in tmp do
22088: LD_ADDR_VAR 0 1
22092: PUSH
22093: LD_VAR 0 5
22097: PUSH
22098: FOR_IN
22099: IFFALSE 22240
// begin d := rand ( 0 , 5 ) ;
22101: LD_ADDR_VAR 0 4
22105: PUSH
22106: LD_INT 0
22108: PPUSH
22109: LD_INT 5
22111: PPUSH
22112: CALL_OW 12
22116: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22117: LD_ADDR_VAR 0 2
22121: PUSH
22122: LD_VAR 0 1
22126: PPUSH
22127: CALL_OW 250
22131: PPUSH
22132: LD_VAR 0 4
22136: PPUSH
22137: LD_INT 3
22139: PPUSH
22140: LD_INT 12
22142: PPUSH
22143: CALL_OW 12
22147: PPUSH
22148: CALL_OW 272
22152: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22153: LD_ADDR_VAR 0 3
22157: PUSH
22158: LD_VAR 0 1
22162: PPUSH
22163: CALL_OW 251
22167: PPUSH
22168: LD_VAR 0 4
22172: PPUSH
22173: LD_INT 3
22175: PPUSH
22176: LD_INT 12
22178: PPUSH
22179: CALL_OW 12
22183: PPUSH
22184: CALL_OW 273
22188: ST_TO_ADDR
// if ValidHex ( x , y ) then
22189: LD_VAR 0 2
22193: PPUSH
22194: LD_VAR 0 3
22198: PPUSH
22199: CALL_OW 488
22203: IFFALSE 22238
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22205: LD_VAR 0 1
22209: PPUSH
22210: LD_VAR 0 2
22214: PPUSH
22215: LD_VAR 0 3
22219: PPUSH
22220: LD_INT 3
22222: PPUSH
22223: LD_INT 6
22225: PPUSH
22226: CALL_OW 12
22230: PPUSH
22231: LD_INT 1
22233: PPUSH
22234: CALL_OW 483
// end ;
22238: GO 22098
22240: POP
22241: POP
// end ;
22242: PPOPN 5
22244: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22245: LD_EXP 22
22249: IFFALSE 22257
22251: PUSH
22252: LD_EXP 57
22256: AND
22257: IFFALSE 22351
22259: GO 22261
22261: DISABLE
22262: LD_INT 0
22264: PPUSH
22265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22266: LD_ADDR_VAR 0 2
22270: PUSH
22271: LD_INT 22
22273: PUSH
22274: LD_OWVAR 2
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 32
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 21
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: LIST
22307: PPUSH
22308: CALL_OW 69
22312: ST_TO_ADDR
// if not tmp then
22313: LD_VAR 0 2
22317: NOT
22318: IFFALSE 22322
// exit ;
22320: GO 22351
// for i in tmp do
22322: LD_ADDR_VAR 0 1
22326: PUSH
22327: LD_VAR 0 2
22331: PUSH
22332: FOR_IN
22333: IFFALSE 22349
// SetFuel ( i , 0 ) ;
22335: LD_VAR 0 1
22339: PPUSH
22340: LD_INT 0
22342: PPUSH
22343: CALL_OW 240
22347: GO 22332
22349: POP
22350: POP
// end ;
22351: PPOPN 2
22353: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22354: LD_EXP 22
22358: IFFALSE 22366
22360: PUSH
22361: LD_EXP 58
22365: AND
22366: IFFALSE 22432
22368: GO 22370
22370: DISABLE
22371: LD_INT 0
22373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22374: LD_ADDR_VAR 0 1
22378: PUSH
22379: LD_INT 22
22381: PUSH
22382: LD_OWVAR 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 30
22393: PUSH
22394: LD_INT 29
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PPUSH
22405: CALL_OW 69
22409: ST_TO_ADDR
// if not tmp then
22410: LD_VAR 0 1
22414: NOT
22415: IFFALSE 22419
// exit ;
22417: GO 22432
// DestroyUnit ( tmp [ 1 ] ) ;
22419: LD_VAR 0 1
22423: PUSH
22424: LD_INT 1
22426: ARRAY
22427: PPUSH
22428: CALL_OW 65
// end ;
22432: PPOPN 1
22434: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22435: LD_EXP 22
22439: IFFALSE 22447
22441: PUSH
22442: LD_EXP 60
22446: AND
22447: IFFALSE 22576
22449: GO 22451
22451: DISABLE
22452: LD_INT 0
22454: PPUSH
// begin uc_side := 0 ;
22455: LD_ADDR_OWVAR 20
22459: PUSH
22460: LD_INT 0
22462: ST_TO_ADDR
// uc_nation := nation_arabian ;
22463: LD_ADDR_OWVAR 21
22467: PUSH
22468: LD_INT 2
22470: ST_TO_ADDR
// hc_gallery :=  ;
22471: LD_ADDR_OWVAR 33
22475: PUSH
22476: LD_STRING 
22478: ST_TO_ADDR
// hc_name :=  ;
22479: LD_ADDR_OWVAR 26
22483: PUSH
22484: LD_STRING 
22486: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22487: LD_INT 1
22489: PPUSH
22490: LD_INT 11
22492: PPUSH
22493: LD_INT 10
22495: PPUSH
22496: CALL_OW 380
// un := CreateHuman ;
22500: LD_ADDR_VAR 0 1
22504: PUSH
22505: CALL_OW 44
22509: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22510: LD_VAR 0 1
22514: PPUSH
22515: LD_INT 1
22517: PPUSH
22518: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22522: LD_INT 35
22524: PPUSH
22525: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22529: LD_VAR 0 1
22533: PPUSH
22534: LD_INT 22
22536: PUSH
22537: LD_OWVAR 2
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PPUSH
22546: CALL_OW 69
22550: PPUSH
22551: LD_VAR 0 1
22555: PPUSH
22556: CALL_OW 74
22560: PPUSH
22561: CALL_OW 115
// until IsDead ( un ) ;
22565: LD_VAR 0 1
22569: PPUSH
22570: CALL_OW 301
22574: IFFALSE 22522
// end ;
22576: PPOPN 1
22578: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22579: LD_EXP 22
22583: IFFALSE 22591
22585: PUSH
22586: LD_EXP 62
22590: AND
22591: IFFALSE 22603
22593: GO 22595
22595: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22596: LD_STRING earthquake(getX(game), 0, 32)
22598: PPUSH
22599: CALL_OW 559
22603: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22604: LD_EXP 22
22608: IFFALSE 22616
22610: PUSH
22611: LD_EXP 63
22615: AND
22616: IFFALSE 22707
22618: GO 22620
22620: DISABLE
22621: LD_INT 0
22623: PPUSH
// begin enable ;
22624: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22625: LD_ADDR_VAR 0 1
22629: PUSH
22630: LD_INT 22
22632: PUSH
22633: LD_OWVAR 2
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 21
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 33
22654: PUSH
22655: LD_INT 3
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: LIST
22666: PPUSH
22667: CALL_OW 69
22671: ST_TO_ADDR
// if not tmp then
22672: LD_VAR 0 1
22676: NOT
22677: IFFALSE 22681
// exit ;
22679: GO 22707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22681: LD_VAR 0 1
22685: PUSH
22686: LD_INT 1
22688: PPUSH
22689: LD_VAR 0 1
22693: PPUSH
22694: CALL_OW 12
22698: ARRAY
22699: PPUSH
22700: LD_INT 1
22702: PPUSH
22703: CALL_OW 234
// end ;
22707: PPOPN 1
22709: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22710: LD_EXP 22
22714: IFFALSE 22722
22716: PUSH
22717: LD_EXP 64
22721: AND
22722: IFFALSE 22863
22724: GO 22726
22726: DISABLE
22727: LD_INT 0
22729: PPUSH
22730: PPUSH
22731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22732: LD_ADDR_VAR 0 3
22736: PUSH
22737: LD_INT 22
22739: PUSH
22740: LD_OWVAR 2
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 25
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PPUSH
22763: CALL_OW 69
22767: ST_TO_ADDR
// if not tmp then
22768: LD_VAR 0 3
22772: NOT
22773: IFFALSE 22777
// exit ;
22775: GO 22863
// un := tmp [ rand ( 1 , tmp ) ] ;
22777: LD_ADDR_VAR 0 2
22781: PUSH
22782: LD_VAR 0 3
22786: PUSH
22787: LD_INT 1
22789: PPUSH
22790: LD_VAR 0 3
22794: PPUSH
22795: CALL_OW 12
22799: ARRAY
22800: ST_TO_ADDR
// if Crawls ( un ) then
22801: LD_VAR 0 2
22805: PPUSH
22806: CALL_OW 318
22810: IFFALSE 22821
// ComWalk ( un ) ;
22812: LD_VAR 0 2
22816: PPUSH
22817: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22821: LD_VAR 0 2
22825: PPUSH
22826: LD_INT 9
22828: PPUSH
22829: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22833: LD_INT 28
22835: PPUSH
22836: LD_OWVAR 2
22840: PPUSH
22841: LD_INT 2
22843: PPUSH
22844: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22848: LD_INT 29
22850: PPUSH
22851: LD_OWVAR 2
22855: PPUSH
22856: LD_INT 2
22858: PPUSH
22859: CALL_OW 322
// end ;
22863: PPOPN 3
22865: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22866: LD_EXP 22
22870: IFFALSE 22878
22872: PUSH
22873: LD_EXP 65
22877: AND
22878: IFFALSE 22989
22880: GO 22882
22882: DISABLE
22883: LD_INT 0
22885: PPUSH
22886: PPUSH
22887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22888: LD_ADDR_VAR 0 3
22892: PUSH
22893: LD_INT 22
22895: PUSH
22896: LD_OWVAR 2
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 25
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PPUSH
22919: CALL_OW 69
22923: ST_TO_ADDR
// if not tmp then
22924: LD_VAR 0 3
22928: NOT
22929: IFFALSE 22933
// exit ;
22931: GO 22989
// un := tmp [ rand ( 1 , tmp ) ] ;
22933: LD_ADDR_VAR 0 2
22937: PUSH
22938: LD_VAR 0 3
22942: PUSH
22943: LD_INT 1
22945: PPUSH
22946: LD_VAR 0 3
22950: PPUSH
22951: CALL_OW 12
22955: ARRAY
22956: ST_TO_ADDR
// if Crawls ( un ) then
22957: LD_VAR 0 2
22961: PPUSH
22962: CALL_OW 318
22966: IFFALSE 22977
// ComWalk ( un ) ;
22968: LD_VAR 0 2
22972: PPUSH
22973: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22977: LD_VAR 0 2
22981: PPUSH
22982: LD_INT 8
22984: PPUSH
22985: CALL_OW 336
// end ;
22989: PPOPN 3
22991: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22992: LD_EXP 22
22996: IFFALSE 23004
22998: PUSH
22999: LD_EXP 66
23003: AND
23004: IFFALSE 23148
23006: GO 23008
23008: DISABLE
23009: LD_INT 0
23011: PPUSH
23012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23013: LD_ADDR_VAR 0 2
23017: PUSH
23018: LD_INT 22
23020: PUSH
23021: LD_OWVAR 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 21
23032: PUSH
23033: LD_INT 2
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 2
23042: PUSH
23043: LD_INT 34
23045: PUSH
23046: LD_INT 12
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 34
23055: PUSH
23056: LD_INT 51
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 34
23065: PUSH
23066: LD_INT 32
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: LIST
23083: PPUSH
23084: CALL_OW 69
23088: ST_TO_ADDR
// if not tmp then
23089: LD_VAR 0 2
23093: NOT
23094: IFFALSE 23098
// exit ;
23096: GO 23148
// for i in tmp do
23098: LD_ADDR_VAR 0 1
23102: PUSH
23103: LD_VAR 0 2
23107: PUSH
23108: FOR_IN
23109: IFFALSE 23146
// if GetCargo ( i , mat_artifact ) = 0 then
23111: LD_VAR 0 1
23115: PPUSH
23116: LD_INT 4
23118: PPUSH
23119: CALL_OW 289
23123: PUSH
23124: LD_INT 0
23126: EQUAL
23127: IFFALSE 23144
// SetCargo ( i , mat_siberit , 100 ) ;
23129: LD_VAR 0 1
23133: PPUSH
23134: LD_INT 3
23136: PPUSH
23137: LD_INT 100
23139: PPUSH
23140: CALL_OW 290
23144: GO 23108
23146: POP
23147: POP
// end ;
23148: PPOPN 2
23150: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23151: LD_EXP 22
23155: IFFALSE 23163
23157: PUSH
23158: LD_EXP 67
23162: AND
23163: IFFALSE 23346
23165: GO 23167
23167: DISABLE
23168: LD_INT 0
23170: PPUSH
23171: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23172: LD_ADDR_VAR 0 2
23176: PUSH
23177: LD_INT 22
23179: PUSH
23180: LD_OWVAR 2
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PPUSH
23189: CALL_OW 69
23193: ST_TO_ADDR
// if not tmp then
23194: LD_VAR 0 2
23198: NOT
23199: IFFALSE 23203
// exit ;
23201: GO 23346
// for i := 1 to 2 do
23203: LD_ADDR_VAR 0 1
23207: PUSH
23208: DOUBLE
23209: LD_INT 1
23211: DEC
23212: ST_TO_ADDR
23213: LD_INT 2
23215: PUSH
23216: FOR_TO
23217: IFFALSE 23344
// begin uc_side := your_side ;
23219: LD_ADDR_OWVAR 20
23223: PUSH
23224: LD_OWVAR 2
23228: ST_TO_ADDR
// uc_nation := nation_american ;
23229: LD_ADDR_OWVAR 21
23233: PUSH
23234: LD_INT 1
23236: ST_TO_ADDR
// vc_chassis := us_morphling ;
23237: LD_ADDR_OWVAR 37
23241: PUSH
23242: LD_INT 5
23244: ST_TO_ADDR
// vc_engine := engine_siberite ;
23245: LD_ADDR_OWVAR 39
23249: PUSH
23250: LD_INT 3
23252: ST_TO_ADDR
// vc_control := control_computer ;
23253: LD_ADDR_OWVAR 38
23257: PUSH
23258: LD_INT 3
23260: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23261: LD_ADDR_OWVAR 40
23265: PUSH
23266: LD_INT 10
23268: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23269: LD_VAR 0 2
23273: PUSH
23274: LD_INT 1
23276: ARRAY
23277: PPUSH
23278: CALL_OW 310
23282: NOT
23283: IFFALSE 23330
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23285: CALL_OW 45
23289: PPUSH
23290: LD_VAR 0 2
23294: PUSH
23295: LD_INT 1
23297: ARRAY
23298: PPUSH
23299: CALL_OW 250
23303: PPUSH
23304: LD_VAR 0 2
23308: PUSH
23309: LD_INT 1
23311: ARRAY
23312: PPUSH
23313: CALL_OW 251
23317: PPUSH
23318: LD_INT 12
23320: PPUSH
23321: LD_INT 1
23323: PPUSH
23324: CALL_OW 50
23328: GO 23342
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23330: CALL_OW 45
23334: PPUSH
23335: LD_INT 1
23337: PPUSH
23338: CALL_OW 51
// end ;
23342: GO 23216
23344: POP
23345: POP
// end ;
23346: PPOPN 2
23348: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23349: LD_EXP 22
23353: IFFALSE 23361
23355: PUSH
23356: LD_EXP 68
23360: AND
23361: IFFALSE 23583
23363: GO 23365
23365: DISABLE
23366: LD_INT 0
23368: PPUSH
23369: PPUSH
23370: PPUSH
23371: PPUSH
23372: PPUSH
23373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23374: LD_ADDR_VAR 0 6
23378: PUSH
23379: LD_INT 22
23381: PUSH
23382: LD_OWVAR 2
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 21
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 3
23403: PUSH
23404: LD_INT 23
23406: PUSH
23407: LD_INT 0
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: LIST
23422: PPUSH
23423: CALL_OW 69
23427: ST_TO_ADDR
// if not tmp then
23428: LD_VAR 0 6
23432: NOT
23433: IFFALSE 23437
// exit ;
23435: GO 23583
// s1 := rand ( 1 , 4 ) ;
23437: LD_ADDR_VAR 0 2
23441: PUSH
23442: LD_INT 1
23444: PPUSH
23445: LD_INT 4
23447: PPUSH
23448: CALL_OW 12
23452: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23453: LD_ADDR_VAR 0 4
23457: PUSH
23458: LD_VAR 0 6
23462: PUSH
23463: LD_INT 1
23465: ARRAY
23466: PPUSH
23467: LD_VAR 0 2
23471: PPUSH
23472: CALL_OW 259
23476: ST_TO_ADDR
// if s1 = 1 then
23477: LD_VAR 0 2
23481: PUSH
23482: LD_INT 1
23484: EQUAL
23485: IFFALSE 23505
// s2 := rand ( 2 , 4 ) else
23487: LD_ADDR_VAR 0 3
23491: PUSH
23492: LD_INT 2
23494: PPUSH
23495: LD_INT 4
23497: PPUSH
23498: CALL_OW 12
23502: ST_TO_ADDR
23503: GO 23513
// s2 := 1 ;
23505: LD_ADDR_VAR 0 3
23509: PUSH
23510: LD_INT 1
23512: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23513: LD_ADDR_VAR 0 5
23517: PUSH
23518: LD_VAR 0 6
23522: PUSH
23523: LD_INT 1
23525: ARRAY
23526: PPUSH
23527: LD_VAR 0 3
23531: PPUSH
23532: CALL_OW 259
23536: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23537: LD_VAR 0 6
23541: PUSH
23542: LD_INT 1
23544: ARRAY
23545: PPUSH
23546: LD_VAR 0 2
23550: PPUSH
23551: LD_VAR 0 5
23555: PPUSH
23556: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23560: LD_VAR 0 6
23564: PUSH
23565: LD_INT 1
23567: ARRAY
23568: PPUSH
23569: LD_VAR 0 3
23573: PPUSH
23574: LD_VAR 0 4
23578: PPUSH
23579: CALL_OW 237
// end ;
23583: PPOPN 6
23585: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23586: LD_EXP 22
23590: IFFALSE 23598
23592: PUSH
23593: LD_EXP 69
23597: AND
23598: IFFALSE 23677
23600: GO 23602
23602: DISABLE
23603: LD_INT 0
23605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23606: LD_ADDR_VAR 0 1
23610: PUSH
23611: LD_INT 22
23613: PUSH
23614: LD_OWVAR 2
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 30
23625: PUSH
23626: LD_INT 3
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PPUSH
23637: CALL_OW 69
23641: ST_TO_ADDR
// if not tmp then
23642: LD_VAR 0 1
23646: NOT
23647: IFFALSE 23651
// exit ;
23649: GO 23677
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23651: LD_VAR 0 1
23655: PUSH
23656: LD_INT 1
23658: PPUSH
23659: LD_VAR 0 1
23663: PPUSH
23664: CALL_OW 12
23668: ARRAY
23669: PPUSH
23670: LD_INT 1
23672: PPUSH
23673: CALL_OW 234
// end ;
23677: PPOPN 1
23679: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23680: LD_EXP 22
23684: IFFALSE 23692
23686: PUSH
23687: LD_EXP 70
23691: AND
23692: IFFALSE 23804
23694: GO 23696
23696: DISABLE
23697: LD_INT 0
23699: PPUSH
23700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23701: LD_ADDR_VAR 0 2
23705: PUSH
23706: LD_INT 22
23708: PUSH
23709: LD_OWVAR 2
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: LD_INT 30
23723: PUSH
23724: LD_INT 27
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 30
23733: PUSH
23734: LD_INT 26
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 30
23743: PUSH
23744: LD_INT 28
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PPUSH
23761: CALL_OW 69
23765: ST_TO_ADDR
// if not tmp then
23766: LD_VAR 0 2
23770: NOT
23771: IFFALSE 23775
// exit ;
23773: GO 23804
// for i in tmp do
23775: LD_ADDR_VAR 0 1
23779: PUSH
23780: LD_VAR 0 2
23784: PUSH
23785: FOR_IN
23786: IFFALSE 23802
// SetLives ( i , 1 ) ;
23788: LD_VAR 0 1
23792: PPUSH
23793: LD_INT 1
23795: PPUSH
23796: CALL_OW 234
23800: GO 23785
23802: POP
23803: POP
// end ;
23804: PPOPN 2
23806: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23807: LD_EXP 22
23811: IFFALSE 23819
23813: PUSH
23814: LD_EXP 71
23818: AND
23819: IFFALSE 24106
23821: GO 23823
23823: DISABLE
23824: LD_INT 0
23826: PPUSH
23827: PPUSH
23828: PPUSH
// begin i := rand ( 1 , 7 ) ;
23829: LD_ADDR_VAR 0 1
23833: PUSH
23834: LD_INT 1
23836: PPUSH
23837: LD_INT 7
23839: PPUSH
23840: CALL_OW 12
23844: ST_TO_ADDR
// case i of 1 :
23845: LD_VAR 0 1
23849: PUSH
23850: LD_INT 1
23852: DOUBLE
23853: EQUAL
23854: IFTRUE 23858
23856: GO 23868
23858: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23859: LD_STRING earthquake(getX(game), 0, 32)
23861: PPUSH
23862: CALL_OW 559
23866: GO 24106
23868: LD_INT 2
23870: DOUBLE
23871: EQUAL
23872: IFTRUE 23876
23874: GO 23890
23876: POP
// begin ToLua ( displayStucuk(); ) ;
23877: LD_STRING displayStucuk();
23879: PPUSH
23880: CALL_OW 559
// ResetFog ;
23884: CALL_OW 335
// end ; 3 :
23888: GO 24106
23890: LD_INT 3
23892: DOUBLE
23893: EQUAL
23894: IFTRUE 23898
23896: GO 24002
23898: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23899: LD_ADDR_VAR 0 2
23903: PUSH
23904: LD_INT 22
23906: PUSH
23907: LD_OWVAR 2
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 25
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PPUSH
23930: CALL_OW 69
23934: ST_TO_ADDR
// if not tmp then
23935: LD_VAR 0 2
23939: NOT
23940: IFFALSE 23944
// exit ;
23942: GO 24106
// un := tmp [ rand ( 1 , tmp ) ] ;
23944: LD_ADDR_VAR 0 3
23948: PUSH
23949: LD_VAR 0 2
23953: PUSH
23954: LD_INT 1
23956: PPUSH
23957: LD_VAR 0 2
23961: PPUSH
23962: CALL_OW 12
23966: ARRAY
23967: ST_TO_ADDR
// if Crawls ( un ) then
23968: LD_VAR 0 3
23972: PPUSH
23973: CALL_OW 318
23977: IFFALSE 23988
// ComWalk ( un ) ;
23979: LD_VAR 0 3
23983: PPUSH
23984: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23988: LD_VAR 0 3
23992: PPUSH
23993: LD_INT 8
23995: PPUSH
23996: CALL_OW 336
// end ; 4 :
24000: GO 24106
24002: LD_INT 4
24004: DOUBLE
24005: EQUAL
24006: IFTRUE 24010
24008: GO 24084
24010: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24011: LD_ADDR_VAR 0 2
24015: PUSH
24016: LD_INT 22
24018: PUSH
24019: LD_OWVAR 2
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 30
24030: PUSH
24031: LD_INT 29
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PPUSH
24042: CALL_OW 69
24046: ST_TO_ADDR
// if not tmp then
24047: LD_VAR 0 2
24051: NOT
24052: IFFALSE 24056
// exit ;
24054: GO 24106
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24056: LD_VAR 0 2
24060: PUSH
24061: LD_INT 1
24063: ARRAY
24064: PPUSH
24065: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24069: LD_VAR 0 2
24073: PUSH
24074: LD_INT 1
24076: ARRAY
24077: PPUSH
24078: CALL_OW 65
// end ; 5 .. 7 :
24082: GO 24106
24084: LD_INT 5
24086: DOUBLE
24087: GREATEREQUAL
24088: IFFALSE 24096
24090: LD_INT 7
24092: DOUBLE
24093: LESSEQUAL
24094: IFTRUE 24098
24096: GO 24105
24098: POP
// StreamSibBomb ; end ;
24099: CALL 20287 0 0
24103: GO 24106
24105: POP
// end ;
24106: PPOPN 3
24108: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24109: LD_EXP 22
24113: IFFALSE 24121
24115: PUSH
24116: LD_EXP 72
24120: AND
24121: IFFALSE 24277
24123: GO 24125
24125: DISABLE
24126: LD_INT 0
24128: PPUSH
24129: PPUSH
24130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24131: LD_ADDR_VAR 0 2
24135: PUSH
24136: LD_INT 81
24138: PUSH
24139: LD_OWVAR 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 2
24150: PUSH
24151: LD_INT 21
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 21
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: LIST
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PPUSH
24180: CALL_OW 69
24184: ST_TO_ADDR
// if not tmp then
24185: LD_VAR 0 2
24189: NOT
24190: IFFALSE 24194
// exit ;
24192: GO 24277
// p := 0 ;
24194: LD_ADDR_VAR 0 3
24198: PUSH
24199: LD_INT 0
24201: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24202: LD_INT 35
24204: PPUSH
24205: CALL_OW 67
// p := p + 1 ;
24209: LD_ADDR_VAR 0 3
24213: PUSH
24214: LD_VAR 0 3
24218: PUSH
24219: LD_INT 1
24221: PLUS
24222: ST_TO_ADDR
// for i in tmp do
24223: LD_ADDR_VAR 0 1
24227: PUSH
24228: LD_VAR 0 2
24232: PUSH
24233: FOR_IN
24234: IFFALSE 24265
// if GetLives ( i ) < 1000 then
24236: LD_VAR 0 1
24240: PPUSH
24241: CALL_OW 256
24245: PUSH
24246: LD_INT 1000
24248: LESS
24249: IFFALSE 24263
// SetLives ( i , 1000 ) ;
24251: LD_VAR 0 1
24255: PPUSH
24256: LD_INT 1000
24258: PPUSH
24259: CALL_OW 234
24263: GO 24233
24265: POP
24266: POP
// until p > 20 ;
24267: LD_VAR 0 3
24271: PUSH
24272: LD_INT 20
24274: GREATER
24275: IFFALSE 24202
// end ;
24277: PPOPN 3
24279: END
// every 0 0$1 trigger StreamModeActive and sTime do
24280: LD_EXP 22
24284: IFFALSE 24292
24286: PUSH
24287: LD_EXP 73
24291: AND
24292: IFFALSE 24327
24294: GO 24296
24296: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24297: LD_INT 28
24299: PPUSH
24300: LD_OWVAR 2
24304: PPUSH
24305: LD_INT 2
24307: PPUSH
24308: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24312: LD_INT 30
24314: PPUSH
24315: LD_OWVAR 2
24319: PPUSH
24320: LD_INT 2
24322: PPUSH
24323: CALL_OW 322
// end ;
24327: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24328: LD_EXP 22
24332: IFFALSE 24340
24334: PUSH
24335: LD_EXP 74
24339: AND
24340: IFFALSE 24461
24342: GO 24344
24344: DISABLE
24345: LD_INT 0
24347: PPUSH
24348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24349: LD_ADDR_VAR 0 2
24353: PUSH
24354: LD_INT 22
24356: PUSH
24357: LD_OWVAR 2
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 3
24378: PUSH
24379: LD_INT 23
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: PPUSH
24398: CALL_OW 69
24402: ST_TO_ADDR
// if not tmp then
24403: LD_VAR 0 2
24407: NOT
24408: IFFALSE 24412
// exit ;
24410: GO 24461
// for i in tmp do
24412: LD_ADDR_VAR 0 1
24416: PUSH
24417: LD_VAR 0 2
24421: PUSH
24422: FOR_IN
24423: IFFALSE 24459
// begin if Crawls ( i ) then
24425: LD_VAR 0 1
24429: PPUSH
24430: CALL_OW 318
24434: IFFALSE 24445
// ComWalk ( i ) ;
24436: LD_VAR 0 1
24440: PPUSH
24441: CALL_OW 138
// SetClass ( i , 2 ) ;
24445: LD_VAR 0 1
24449: PPUSH
24450: LD_INT 2
24452: PPUSH
24453: CALL_OW 336
// end ;
24457: GO 24422
24459: POP
24460: POP
// end ;
24461: PPOPN 2
24463: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24464: LD_EXP 22
24468: IFFALSE 24476
24470: PUSH
24471: LD_EXP 75
24475: AND
24476: IFFALSE 24766
24478: GO 24480
24480: DISABLE
24481: LD_INT 0
24483: PPUSH
24484: PPUSH
24485: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24486: LD_OWVAR 2
24490: PPUSH
24491: LD_INT 9
24493: PPUSH
24494: LD_INT 1
24496: PPUSH
24497: LD_INT 1
24499: PPUSH
24500: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24504: LD_INT 9
24506: PPUSH
24507: LD_OWVAR 2
24511: PPUSH
24512: CALL_OW 343
// uc_side := 9 ;
24516: LD_ADDR_OWVAR 20
24520: PUSH
24521: LD_INT 9
24523: ST_TO_ADDR
// uc_nation := 2 ;
24524: LD_ADDR_OWVAR 21
24528: PUSH
24529: LD_INT 2
24531: ST_TO_ADDR
// hc_name := Dark Warrior ;
24532: LD_ADDR_OWVAR 26
24536: PUSH
24537: LD_STRING Dark Warrior
24539: ST_TO_ADDR
// hc_gallery :=  ;
24540: LD_ADDR_OWVAR 33
24544: PUSH
24545: LD_STRING 
24547: ST_TO_ADDR
// hc_noskilllimit := true ;
24548: LD_ADDR_OWVAR 76
24552: PUSH
24553: LD_INT 1
24555: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24556: LD_ADDR_OWVAR 31
24560: PUSH
24561: LD_INT 30
24563: PUSH
24564: LD_INT 30
24566: PUSH
24567: LD_INT 30
24569: PUSH
24570: LD_INT 30
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: ST_TO_ADDR
// un := CreateHuman ;
24579: LD_ADDR_VAR 0 3
24583: PUSH
24584: CALL_OW 44
24588: ST_TO_ADDR
// hc_noskilllimit := false ;
24589: LD_ADDR_OWVAR 76
24593: PUSH
24594: LD_INT 0
24596: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24597: LD_VAR 0 3
24601: PPUSH
24602: LD_INT 1
24604: PPUSH
24605: CALL_OW 51
// ToLua ( playRanger() ) ;
24609: LD_STRING playRanger()
24611: PPUSH
24612: CALL_OW 559
// p := 0 ;
24616: LD_ADDR_VAR 0 2
24620: PUSH
24621: LD_INT 0
24623: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24624: LD_INT 35
24626: PPUSH
24627: CALL_OW 67
// p := p + 1 ;
24631: LD_ADDR_VAR 0 2
24635: PUSH
24636: LD_VAR 0 2
24640: PUSH
24641: LD_INT 1
24643: PLUS
24644: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24645: LD_VAR 0 3
24649: PPUSH
24650: CALL_OW 256
24654: PUSH
24655: LD_INT 1000
24657: LESS
24658: IFFALSE 24672
// SetLives ( un , 1000 ) ;
24660: LD_VAR 0 3
24664: PPUSH
24665: LD_INT 1000
24667: PPUSH
24668: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24672: LD_VAR 0 3
24676: PPUSH
24677: LD_INT 81
24679: PUSH
24680: LD_OWVAR 2
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 91
24691: PUSH
24692: LD_VAR 0 3
24696: PUSH
24697: LD_INT 30
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: LIST
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PPUSH
24709: CALL_OW 69
24713: PPUSH
24714: LD_VAR 0 3
24718: PPUSH
24719: CALL_OW 74
24723: PPUSH
24724: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24728: LD_VAR 0 2
24732: PUSH
24733: LD_INT 80
24735: GREATER
24736: IFTRUE 24749
24738: PUSH
24739: LD_VAR 0 3
24743: PPUSH
24744: CALL_OW 301
24748: OR
24749: IFFALSE 24624
// if un then
24751: LD_VAR 0 3
24755: IFFALSE 24766
// RemoveUnit ( un ) ;
24757: LD_VAR 0 3
24761: PPUSH
24762: CALL_OW 64
// end ;
24766: PPOPN 3
24768: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24769: LD_EXP 76
24773: IFFALSE 24889
24775: GO 24777
24777: DISABLE
24778: LD_INT 0
24780: PPUSH
24781: PPUSH
24782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24783: LD_ADDR_VAR 0 2
24787: PUSH
24788: LD_INT 81
24790: PUSH
24791: LD_OWVAR 2
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 21
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PPUSH
24814: CALL_OW 69
24818: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24819: LD_STRING playComputer()
24821: PPUSH
24822: CALL_OW 559
// if not tmp then
24826: LD_VAR 0 2
24830: NOT
24831: IFFALSE 24835
// exit ;
24833: GO 24889
// for i in tmp do
24835: LD_ADDR_VAR 0 1
24839: PUSH
24840: LD_VAR 0 2
24844: PUSH
24845: FOR_IN
24846: IFFALSE 24887
// for j := 1 to 4 do
24848: LD_ADDR_VAR 0 3
24852: PUSH
24853: DOUBLE
24854: LD_INT 1
24856: DEC
24857: ST_TO_ADDR
24858: LD_INT 4
24860: PUSH
24861: FOR_TO
24862: IFFALSE 24883
// SetSkill ( i , j , 10 ) ;
24864: LD_VAR 0 1
24868: PPUSH
24869: LD_VAR 0 3
24873: PPUSH
24874: LD_INT 10
24876: PPUSH
24877: CALL_OW 237
24881: GO 24861
24883: POP
24884: POP
24885: GO 24845
24887: POP
24888: POP
// end ;
24889: PPOPN 3
24891: END
// every 0 0$1 trigger s30 do var i , tmp ;
24892: LD_EXP 77
24896: IFFALSE 24965
24898: GO 24900
24900: DISABLE
24901: LD_INT 0
24903: PPUSH
24904: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24905: LD_ADDR_VAR 0 2
24909: PUSH
24910: LD_INT 22
24912: PUSH
24913: LD_OWVAR 2
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PPUSH
24922: CALL_OW 69
24926: ST_TO_ADDR
// if not tmp then
24927: LD_VAR 0 2
24931: NOT
24932: IFFALSE 24936
// exit ;
24934: GO 24965
// for i in tmp do
24936: LD_ADDR_VAR 0 1
24940: PUSH
24941: LD_VAR 0 2
24945: PUSH
24946: FOR_IN
24947: IFFALSE 24963
// SetLives ( i , 300 ) ;
24949: LD_VAR 0 1
24953: PPUSH
24954: LD_INT 300
24956: PPUSH
24957: CALL_OW 234
24961: GO 24946
24963: POP
24964: POP
// end ;
24965: PPOPN 2
24967: END
// every 0 0$1 trigger s60 do var i , tmp ;
24968: LD_EXP 78
24972: IFFALSE 25041
24974: GO 24976
24976: DISABLE
24977: LD_INT 0
24979: PPUSH
24980: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24981: LD_ADDR_VAR 0 2
24985: PUSH
24986: LD_INT 22
24988: PUSH
24989: LD_OWVAR 2
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PPUSH
24998: CALL_OW 69
25002: ST_TO_ADDR
// if not tmp then
25003: LD_VAR 0 2
25007: NOT
25008: IFFALSE 25012
// exit ;
25010: GO 25041
// for i in tmp do
25012: LD_ADDR_VAR 0 1
25016: PUSH
25017: LD_VAR 0 2
25021: PUSH
25022: FOR_IN
25023: IFFALSE 25039
// SetLives ( i , 600 ) ;
25025: LD_VAR 0 1
25029: PPUSH
25030: LD_INT 600
25032: PPUSH
25033: CALL_OW 234
25037: GO 25022
25039: POP
25040: POP
// end ;
25041: PPOPN 2
25043: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25044: LD_INT 0
25046: PPUSH
// case cmd of 301 :
25047: LD_VAR 0 1
25051: PUSH
25052: LD_INT 301
25054: DOUBLE
25055: EQUAL
25056: IFTRUE 25060
25058: GO 25092
25060: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25061: LD_VAR 0 6
25065: PPUSH
25066: LD_VAR 0 7
25070: PPUSH
25071: LD_VAR 0 8
25075: PPUSH
25076: LD_VAR 0 4
25080: PPUSH
25081: LD_VAR 0 5
25085: PPUSH
25086: CALL 26305 0 5
25090: GO 25213
25092: LD_INT 302
25094: DOUBLE
25095: EQUAL
25096: IFTRUE 25100
25098: GO 25137
25100: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25101: LD_VAR 0 6
25105: PPUSH
25106: LD_VAR 0 7
25110: PPUSH
25111: LD_VAR 0 8
25115: PPUSH
25116: LD_VAR 0 9
25120: PPUSH
25121: LD_VAR 0 4
25125: PPUSH
25126: LD_VAR 0 5
25130: PPUSH
25131: CALL 26396 0 6
25135: GO 25213
25137: LD_INT 303
25139: DOUBLE
25140: EQUAL
25141: IFTRUE 25145
25143: GO 25182
25145: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25146: LD_VAR 0 6
25150: PPUSH
25151: LD_VAR 0 7
25155: PPUSH
25156: LD_VAR 0 8
25160: PPUSH
25161: LD_VAR 0 9
25165: PPUSH
25166: LD_VAR 0 4
25170: PPUSH
25171: LD_VAR 0 5
25175: PPUSH
25176: CALL 25218 0 6
25180: GO 25213
25182: LD_INT 304
25184: DOUBLE
25185: EQUAL
25186: IFTRUE 25190
25188: GO 25212
25190: POP
// hHackTeleport ( unit , x , y ) ; end ;
25191: LD_VAR 0 2
25195: PPUSH
25196: LD_VAR 0 4
25200: PPUSH
25201: LD_VAR 0 5
25205: PPUSH
25206: CALL 26989 0 3
25210: GO 25213
25212: POP
// end ;
25213: LD_VAR 0 12
25217: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25218: LD_INT 0
25220: PPUSH
25221: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25222: LD_VAR 0 1
25226: PUSH
25227: LD_INT 1
25229: LESS
25230: IFTRUE 25242
25232: PUSH
25233: LD_VAR 0 1
25237: PUSH
25238: LD_INT 3
25240: GREATER
25241: OR
25242: IFTRUE 25260
25244: PUSH
25245: LD_VAR 0 5
25249: PPUSH
25250: LD_VAR 0 6
25254: PPUSH
25255: CALL_OW 428
25259: OR
25260: IFFALSE 25264
// exit ;
25262: GO 25992
// uc_side := your_side ;
25264: LD_ADDR_OWVAR 20
25268: PUSH
25269: LD_OWVAR 2
25273: ST_TO_ADDR
// uc_nation := nation ;
25274: LD_ADDR_OWVAR 21
25278: PUSH
25279: LD_VAR 0 1
25283: ST_TO_ADDR
// bc_level = 1 ;
25284: LD_ADDR_OWVAR 43
25288: PUSH
25289: LD_INT 1
25291: ST_TO_ADDR
// case btype of 1 :
25292: LD_VAR 0 2
25296: PUSH
25297: LD_INT 1
25299: DOUBLE
25300: EQUAL
25301: IFTRUE 25305
25303: GO 25316
25305: POP
// bc_type := b_depot ; 2 :
25306: LD_ADDR_OWVAR 42
25310: PUSH
25311: LD_INT 0
25313: ST_TO_ADDR
25314: GO 25936
25316: LD_INT 2
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25335
25324: POP
// bc_type := b_warehouse ; 3 :
25325: LD_ADDR_OWVAR 42
25329: PUSH
25330: LD_INT 1
25332: ST_TO_ADDR
25333: GO 25936
25335: LD_INT 3
25337: DOUBLE
25338: EQUAL
25339: IFTRUE 25343
25341: GO 25354
25343: POP
// bc_type := b_lab ; 4 .. 9 :
25344: LD_ADDR_OWVAR 42
25348: PUSH
25349: LD_INT 6
25351: ST_TO_ADDR
25352: GO 25936
25354: LD_INT 4
25356: DOUBLE
25357: GREATEREQUAL
25358: IFFALSE 25366
25360: LD_INT 9
25362: DOUBLE
25363: LESSEQUAL
25364: IFTRUE 25368
25366: GO 25428
25368: POP
// begin bc_type := b_lab_half ;
25369: LD_ADDR_OWVAR 42
25373: PUSH
25374: LD_INT 7
25376: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25377: LD_ADDR_OWVAR 44
25381: PUSH
25382: LD_INT 10
25384: PUSH
25385: LD_INT 11
25387: PUSH
25388: LD_INT 12
25390: PUSH
25391: LD_INT 15
25393: PUSH
25394: LD_INT 14
25396: PUSH
25397: LD_INT 13
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: PUSH
25408: LD_VAR 0 2
25412: PUSH
25413: LD_INT 3
25415: MINUS
25416: ARRAY
25417: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25418: LD_ADDR_OWVAR 45
25422: PUSH
25423: LD_INT 9
25425: ST_TO_ADDR
// end ; 10 .. 13 :
25426: GO 25936
25428: LD_INT 10
25430: DOUBLE
25431: GREATEREQUAL
25432: IFFALSE 25440
25434: LD_INT 13
25436: DOUBLE
25437: LESSEQUAL
25438: IFTRUE 25442
25440: GO 25519
25442: POP
// begin bc_type := b_lab_full ;
25443: LD_ADDR_OWVAR 42
25447: PUSH
25448: LD_INT 8
25450: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25451: LD_ADDR_OWVAR 44
25455: PUSH
25456: LD_INT 10
25458: PUSH
25459: LD_INT 12
25461: PUSH
25462: LD_INT 14
25464: PUSH
25465: LD_INT 13
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: PUSH
25474: LD_VAR 0 2
25478: PUSH
25479: LD_INT 9
25481: MINUS
25482: ARRAY
25483: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25484: LD_ADDR_OWVAR 45
25488: PUSH
25489: LD_INT 11
25491: PUSH
25492: LD_INT 15
25494: PUSH
25495: LD_INT 12
25497: PUSH
25498: LD_INT 15
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: PUSH
25507: LD_VAR 0 2
25511: PUSH
25512: LD_INT 9
25514: MINUS
25515: ARRAY
25516: ST_TO_ADDR
// end ; 14 :
25517: GO 25936
25519: LD_INT 14
25521: DOUBLE
25522: EQUAL
25523: IFTRUE 25527
25525: GO 25538
25527: POP
// bc_type := b_workshop ; 15 :
25528: LD_ADDR_OWVAR 42
25532: PUSH
25533: LD_INT 2
25535: ST_TO_ADDR
25536: GO 25936
25538: LD_INT 15
25540: DOUBLE
25541: EQUAL
25542: IFTRUE 25546
25544: GO 25557
25546: POP
// bc_type := b_factory ; 16 :
25547: LD_ADDR_OWVAR 42
25551: PUSH
25552: LD_INT 3
25554: ST_TO_ADDR
25555: GO 25936
25557: LD_INT 16
25559: DOUBLE
25560: EQUAL
25561: IFTRUE 25565
25563: GO 25576
25565: POP
// bc_type := b_ext_gun ; 17 :
25566: LD_ADDR_OWVAR 42
25570: PUSH
25571: LD_INT 17
25573: ST_TO_ADDR
25574: GO 25936
25576: LD_INT 17
25578: DOUBLE
25579: EQUAL
25580: IFTRUE 25584
25582: GO 25612
25584: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25585: LD_ADDR_OWVAR 42
25589: PUSH
25590: LD_INT 19
25592: PUSH
25593: LD_INT 23
25595: PUSH
25596: LD_INT 19
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: LIST
25603: PUSH
25604: LD_VAR 0 1
25608: ARRAY
25609: ST_TO_ADDR
25610: GO 25936
25612: LD_INT 18
25614: DOUBLE
25615: EQUAL
25616: IFTRUE 25620
25618: GO 25631
25620: POP
// bc_type := b_ext_radar ; 19 :
25621: LD_ADDR_OWVAR 42
25625: PUSH
25626: LD_INT 20
25628: ST_TO_ADDR
25629: GO 25936
25631: LD_INT 19
25633: DOUBLE
25634: EQUAL
25635: IFTRUE 25639
25637: GO 25650
25639: POP
// bc_type := b_ext_radio ; 20 :
25640: LD_ADDR_OWVAR 42
25644: PUSH
25645: LD_INT 22
25647: ST_TO_ADDR
25648: GO 25936
25650: LD_INT 20
25652: DOUBLE
25653: EQUAL
25654: IFTRUE 25658
25656: GO 25669
25658: POP
// bc_type := b_ext_siberium ; 21 :
25659: LD_ADDR_OWVAR 42
25663: PUSH
25664: LD_INT 21
25666: ST_TO_ADDR
25667: GO 25936
25669: LD_INT 21
25671: DOUBLE
25672: EQUAL
25673: IFTRUE 25677
25675: GO 25688
25677: POP
// bc_type := b_ext_computer ; 22 :
25678: LD_ADDR_OWVAR 42
25682: PUSH
25683: LD_INT 24
25685: ST_TO_ADDR
25686: GO 25936
25688: LD_INT 22
25690: DOUBLE
25691: EQUAL
25692: IFTRUE 25696
25694: GO 25707
25696: POP
// bc_type := b_ext_track ; 23 :
25697: LD_ADDR_OWVAR 42
25701: PUSH
25702: LD_INT 16
25704: ST_TO_ADDR
25705: GO 25936
25707: LD_INT 23
25709: DOUBLE
25710: EQUAL
25711: IFTRUE 25715
25713: GO 25726
25715: POP
// bc_type := b_ext_laser ; 24 :
25716: LD_ADDR_OWVAR 42
25720: PUSH
25721: LD_INT 25
25723: ST_TO_ADDR
25724: GO 25936
25726: LD_INT 24
25728: DOUBLE
25729: EQUAL
25730: IFTRUE 25734
25732: GO 25745
25734: POP
// bc_type := b_control_tower ; 25 :
25735: LD_ADDR_OWVAR 42
25739: PUSH
25740: LD_INT 36
25742: ST_TO_ADDR
25743: GO 25936
25745: LD_INT 25
25747: DOUBLE
25748: EQUAL
25749: IFTRUE 25753
25751: GO 25764
25753: POP
// bc_type := b_breastwork ; 26 :
25754: LD_ADDR_OWVAR 42
25758: PUSH
25759: LD_INT 31
25761: ST_TO_ADDR
25762: GO 25936
25764: LD_INT 26
25766: DOUBLE
25767: EQUAL
25768: IFTRUE 25772
25770: GO 25783
25772: POP
// bc_type := b_bunker ; 27 :
25773: LD_ADDR_OWVAR 42
25777: PUSH
25778: LD_INT 32
25780: ST_TO_ADDR
25781: GO 25936
25783: LD_INT 27
25785: DOUBLE
25786: EQUAL
25787: IFTRUE 25791
25789: GO 25802
25791: POP
// bc_type := b_turret ; 28 :
25792: LD_ADDR_OWVAR 42
25796: PUSH
25797: LD_INT 33
25799: ST_TO_ADDR
25800: GO 25936
25802: LD_INT 28
25804: DOUBLE
25805: EQUAL
25806: IFTRUE 25810
25808: GO 25821
25810: POP
// bc_type := b_armoury ; 29 :
25811: LD_ADDR_OWVAR 42
25815: PUSH
25816: LD_INT 4
25818: ST_TO_ADDR
25819: GO 25936
25821: LD_INT 29
25823: DOUBLE
25824: EQUAL
25825: IFTRUE 25829
25827: GO 25840
25829: POP
// bc_type := b_barracks ; 30 :
25830: LD_ADDR_OWVAR 42
25834: PUSH
25835: LD_INT 5
25837: ST_TO_ADDR
25838: GO 25936
25840: LD_INT 30
25842: DOUBLE
25843: EQUAL
25844: IFTRUE 25848
25846: GO 25859
25848: POP
// bc_type := b_solar_power ; 31 :
25849: LD_ADDR_OWVAR 42
25853: PUSH
25854: LD_INT 27
25856: ST_TO_ADDR
25857: GO 25936
25859: LD_INT 31
25861: DOUBLE
25862: EQUAL
25863: IFTRUE 25867
25865: GO 25878
25867: POP
// bc_type := b_oil_power ; 32 :
25868: LD_ADDR_OWVAR 42
25872: PUSH
25873: LD_INT 26
25875: ST_TO_ADDR
25876: GO 25936
25878: LD_INT 32
25880: DOUBLE
25881: EQUAL
25882: IFTRUE 25886
25884: GO 25897
25886: POP
// bc_type := b_siberite_power ; 33 :
25887: LD_ADDR_OWVAR 42
25891: PUSH
25892: LD_INT 28
25894: ST_TO_ADDR
25895: GO 25936
25897: LD_INT 33
25899: DOUBLE
25900: EQUAL
25901: IFTRUE 25905
25903: GO 25916
25905: POP
// bc_type := b_oil_mine ; 34 :
25906: LD_ADDR_OWVAR 42
25910: PUSH
25911: LD_INT 29
25913: ST_TO_ADDR
25914: GO 25936
25916: LD_INT 34
25918: DOUBLE
25919: EQUAL
25920: IFTRUE 25924
25922: GO 25935
25924: POP
// bc_type := b_siberite_mine ; end ;
25925: LD_ADDR_OWVAR 42
25929: PUSH
25930: LD_INT 30
25932: ST_TO_ADDR
25933: GO 25936
25935: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25936: LD_ADDR_VAR 0 8
25940: PUSH
25941: LD_VAR 0 5
25945: PPUSH
25946: LD_VAR 0 6
25950: PPUSH
25951: LD_VAR 0 3
25955: PPUSH
25956: CALL_OW 47
25960: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25961: LD_OWVAR 42
25965: PUSH
25966: LD_INT 32
25968: PUSH
25969: LD_INT 33
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: IN
25976: IFFALSE 25992
// PlaceWeaponTurret ( b , weapon ) ;
25978: LD_VAR 0 8
25982: PPUSH
25983: LD_VAR 0 4
25987: PPUSH
25988: CALL_OW 431
// end ;
25992: LD_VAR 0 7
25996: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25997: LD_INT 0
25999: PPUSH
26000: PPUSH
26001: PPUSH
26002: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26003: LD_ADDR_VAR 0 4
26007: PUSH
26008: LD_INT 22
26010: PUSH
26011: LD_OWVAR 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 2
26022: PUSH
26023: LD_INT 30
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 30
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: LIST
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PPUSH
26052: CALL_OW 69
26056: ST_TO_ADDR
// if not tmp then
26057: LD_VAR 0 4
26061: NOT
26062: IFFALSE 26066
// exit ;
26064: GO 26125
// for i in tmp do
26066: LD_ADDR_VAR 0 2
26070: PUSH
26071: LD_VAR 0 4
26075: PUSH
26076: FOR_IN
26077: IFFALSE 26123
// for j = 1 to 3 do
26079: LD_ADDR_VAR 0 3
26083: PUSH
26084: DOUBLE
26085: LD_INT 1
26087: DEC
26088: ST_TO_ADDR
26089: LD_INT 3
26091: PUSH
26092: FOR_TO
26093: IFFALSE 26119
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26095: LD_VAR 0 2
26099: PPUSH
26100: CALL_OW 274
26104: PPUSH
26105: LD_VAR 0 3
26109: PPUSH
26110: LD_INT 99999
26112: PPUSH
26113: CALL_OW 277
26117: GO 26092
26119: POP
26120: POP
26121: GO 26076
26123: POP
26124: POP
// end ;
26125: LD_VAR 0 1
26129: RET
// export function hHackSetLevel10 ; var i , j ; begin
26130: LD_INT 0
26132: PPUSH
26133: PPUSH
26134: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26135: LD_ADDR_VAR 0 2
26139: PUSH
26140: LD_INT 21
26142: PUSH
26143: LD_INT 1
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PPUSH
26150: CALL_OW 69
26154: PUSH
26155: FOR_IN
26156: IFFALSE 26208
// if IsSelected ( i ) then
26158: LD_VAR 0 2
26162: PPUSH
26163: CALL_OW 306
26167: IFFALSE 26206
// begin for j := 1 to 4 do
26169: LD_ADDR_VAR 0 3
26173: PUSH
26174: DOUBLE
26175: LD_INT 1
26177: DEC
26178: ST_TO_ADDR
26179: LD_INT 4
26181: PUSH
26182: FOR_TO
26183: IFFALSE 26204
// SetSkill ( i , j , 10 ) ;
26185: LD_VAR 0 2
26189: PPUSH
26190: LD_VAR 0 3
26194: PPUSH
26195: LD_INT 10
26197: PPUSH
26198: CALL_OW 237
26202: GO 26182
26204: POP
26205: POP
// end ;
26206: GO 26155
26208: POP
26209: POP
// end ;
26210: LD_VAR 0 1
26214: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26215: LD_INT 0
26217: PPUSH
26218: PPUSH
26219: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26220: LD_ADDR_VAR 0 2
26224: PUSH
26225: LD_INT 22
26227: PUSH
26228: LD_OWVAR 2
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 21
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PPUSH
26251: CALL_OW 69
26255: PUSH
26256: FOR_IN
26257: IFFALSE 26298
// begin for j := 1 to 4 do
26259: LD_ADDR_VAR 0 3
26263: PUSH
26264: DOUBLE
26265: LD_INT 1
26267: DEC
26268: ST_TO_ADDR
26269: LD_INT 4
26271: PUSH
26272: FOR_TO
26273: IFFALSE 26294
// SetSkill ( i , j , 10 ) ;
26275: LD_VAR 0 2
26279: PPUSH
26280: LD_VAR 0 3
26284: PPUSH
26285: LD_INT 10
26287: PPUSH
26288: CALL_OW 237
26292: GO 26272
26294: POP
26295: POP
// end ;
26296: GO 26256
26298: POP
26299: POP
// end ;
26300: LD_VAR 0 1
26304: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26305: LD_INT 0
26307: PPUSH
// uc_side := your_side ;
26308: LD_ADDR_OWVAR 20
26312: PUSH
26313: LD_OWVAR 2
26317: ST_TO_ADDR
// uc_nation := nation ;
26318: LD_ADDR_OWVAR 21
26322: PUSH
26323: LD_VAR 0 1
26327: ST_TO_ADDR
// InitHc ;
26328: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26332: LD_INT 0
26334: PPUSH
26335: LD_VAR 0 2
26339: PPUSH
26340: LD_VAR 0 3
26344: PPUSH
26345: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26349: LD_VAR 0 4
26353: PPUSH
26354: LD_VAR 0 5
26358: PPUSH
26359: CALL_OW 428
26363: PUSH
26364: LD_INT 0
26366: EQUAL
26367: IFFALSE 26391
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26369: CALL_OW 44
26373: PPUSH
26374: LD_VAR 0 4
26378: PPUSH
26379: LD_VAR 0 5
26383: PPUSH
26384: LD_INT 1
26386: PPUSH
26387: CALL_OW 48
// end ;
26391: LD_VAR 0 6
26395: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26396: LD_INT 0
26398: PPUSH
26399: PPUSH
// uc_side := your_side ;
26400: LD_ADDR_OWVAR 20
26404: PUSH
26405: LD_OWVAR 2
26409: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26410: LD_VAR 0 1
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: LD_INT 2
26420: PUSH
26421: LD_INT 3
26423: PUSH
26424: LD_INT 4
26426: PUSH
26427: LD_INT 5
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: IN
26437: IFFALSE 26449
// uc_nation := nation_american else
26439: LD_ADDR_OWVAR 21
26443: PUSH
26444: LD_INT 1
26446: ST_TO_ADDR
26447: GO 26492
// if chassis in [ 11 , 12 , 13 , 14 ] then
26449: LD_VAR 0 1
26453: PUSH
26454: LD_INT 11
26456: PUSH
26457: LD_INT 12
26459: PUSH
26460: LD_INT 13
26462: PUSH
26463: LD_INT 14
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: IN
26472: IFFALSE 26484
// uc_nation := nation_arabian else
26474: LD_ADDR_OWVAR 21
26478: PUSH
26479: LD_INT 2
26481: ST_TO_ADDR
26482: GO 26492
// uc_nation := nation_russian ;
26484: LD_ADDR_OWVAR 21
26488: PUSH
26489: LD_INT 3
26491: ST_TO_ADDR
// vc_chassis := chassis ;
26492: LD_ADDR_OWVAR 37
26496: PUSH
26497: LD_VAR 0 1
26501: ST_TO_ADDR
// vc_engine := engine ;
26502: LD_ADDR_OWVAR 39
26506: PUSH
26507: LD_VAR 0 2
26511: ST_TO_ADDR
// vc_control := control ;
26512: LD_ADDR_OWVAR 38
26516: PUSH
26517: LD_VAR 0 3
26521: ST_TO_ADDR
// vc_weapon := weapon ;
26522: LD_ADDR_OWVAR 40
26526: PUSH
26527: LD_VAR 0 4
26531: ST_TO_ADDR
// un := CreateVehicle ;
26532: LD_ADDR_VAR 0 8
26536: PUSH
26537: CALL_OW 45
26541: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26542: LD_VAR 0 8
26546: PPUSH
26547: LD_INT 0
26549: PPUSH
26550: LD_INT 5
26552: PPUSH
26553: CALL_OW 12
26557: PPUSH
26558: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26562: LD_VAR 0 8
26566: PPUSH
26567: LD_VAR 0 5
26571: PPUSH
26572: LD_VAR 0 6
26576: PPUSH
26577: LD_INT 1
26579: PPUSH
26580: CALL_OW 48
// end ;
26584: LD_VAR 0 7
26588: RET
// export hInvincible ; every 1 do
26589: GO 26591
26591: DISABLE
// hInvincible := [ ] ;
26592: LD_ADDR_EXP 79
26596: PUSH
26597: EMPTY
26598: ST_TO_ADDR
26599: END
// every 10 do var i ;
26600: GO 26602
26602: DISABLE
26603: LD_INT 0
26605: PPUSH
// begin enable ;
26606: ENABLE
// if not hInvincible then
26607: LD_EXP 79
26611: NOT
26612: IFFALSE 26616
// exit ;
26614: GO 26660
// for i in hInvincible do
26616: LD_ADDR_VAR 0 1
26620: PUSH
26621: LD_EXP 79
26625: PUSH
26626: FOR_IN
26627: IFFALSE 26658
// if GetLives ( i ) < 1000 then
26629: LD_VAR 0 1
26633: PPUSH
26634: CALL_OW 256
26638: PUSH
26639: LD_INT 1000
26641: LESS
26642: IFFALSE 26656
// SetLives ( i , 1000 ) ;
26644: LD_VAR 0 1
26648: PPUSH
26649: LD_INT 1000
26651: PPUSH
26652: CALL_OW 234
26656: GO 26626
26658: POP
26659: POP
// end ;
26660: PPOPN 1
26662: END
// export function hHackInvincible ; var i ; begin
26663: LD_INT 0
26665: PPUSH
26666: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26667: LD_ADDR_VAR 0 2
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: LD_INT 21
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 21
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: LIST
26699: PPUSH
26700: CALL_OW 69
26704: PUSH
26705: FOR_IN
26706: IFFALSE 26767
// if IsSelected ( i ) then
26708: LD_VAR 0 2
26712: PPUSH
26713: CALL_OW 306
26717: IFFALSE 26765
// begin if i in hInvincible then
26719: LD_VAR 0 2
26723: PUSH
26724: LD_EXP 79
26728: IN
26729: IFFALSE 26749
// hInvincible := hInvincible diff i else
26731: LD_ADDR_EXP 79
26735: PUSH
26736: LD_EXP 79
26740: PUSH
26741: LD_VAR 0 2
26745: DIFF
26746: ST_TO_ADDR
26747: GO 26765
// hInvincible := hInvincible union i ;
26749: LD_ADDR_EXP 79
26753: PUSH
26754: LD_EXP 79
26758: PUSH
26759: LD_VAR 0 2
26763: UNION
26764: ST_TO_ADDR
// end ;
26765: GO 26705
26767: POP
26768: POP
// end ;
26769: LD_VAR 0 1
26773: RET
// export function hHackInvisible ; var i , j ; begin
26774: LD_INT 0
26776: PPUSH
26777: PPUSH
26778: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26779: LD_ADDR_VAR 0 2
26783: PUSH
26784: LD_INT 21
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PPUSH
26794: CALL_OW 69
26798: PUSH
26799: FOR_IN
26800: IFFALSE 26824
// if IsSelected ( i ) then
26802: LD_VAR 0 2
26806: PPUSH
26807: CALL_OW 306
26811: IFFALSE 26822
// ComForceInvisible ( i ) ;
26813: LD_VAR 0 2
26817: PPUSH
26818: CALL_OW 496
26822: GO 26799
26824: POP
26825: POP
// end ;
26826: LD_VAR 0 1
26830: RET
// export function hHackChangeYourSide ; begin
26831: LD_INT 0
26833: PPUSH
// if your_side = 8 then
26834: LD_OWVAR 2
26838: PUSH
26839: LD_INT 8
26841: EQUAL
26842: IFFALSE 26854
// your_side := 0 else
26844: LD_ADDR_OWVAR 2
26848: PUSH
26849: LD_INT 0
26851: ST_TO_ADDR
26852: GO 26868
// your_side := your_side + 1 ;
26854: LD_ADDR_OWVAR 2
26858: PUSH
26859: LD_OWVAR 2
26863: PUSH
26864: LD_INT 1
26866: PLUS
26867: ST_TO_ADDR
// end ;
26868: LD_VAR 0 1
26872: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26873: LD_INT 0
26875: PPUSH
26876: PPUSH
26877: PPUSH
// for i in all_units do
26878: LD_ADDR_VAR 0 2
26882: PUSH
26883: LD_OWVAR 3
26887: PUSH
26888: FOR_IN
26889: IFFALSE 26967
// if IsSelected ( i ) then
26891: LD_VAR 0 2
26895: PPUSH
26896: CALL_OW 306
26900: IFFALSE 26965
// begin j := GetSide ( i ) ;
26902: LD_ADDR_VAR 0 3
26906: PUSH
26907: LD_VAR 0 2
26911: PPUSH
26912: CALL_OW 255
26916: ST_TO_ADDR
// if j = 8 then
26917: LD_VAR 0 3
26921: PUSH
26922: LD_INT 8
26924: EQUAL
26925: IFFALSE 26937
// j := 0 else
26927: LD_ADDR_VAR 0 3
26931: PUSH
26932: LD_INT 0
26934: ST_TO_ADDR
26935: GO 26951
// j := j + 1 ;
26937: LD_ADDR_VAR 0 3
26941: PUSH
26942: LD_VAR 0 3
26946: PUSH
26947: LD_INT 1
26949: PLUS
26950: ST_TO_ADDR
// SetSide ( i , j ) ;
26951: LD_VAR 0 2
26955: PPUSH
26956: LD_VAR 0 3
26960: PPUSH
26961: CALL_OW 235
// end ;
26965: GO 26888
26967: POP
26968: POP
// end ;
26969: LD_VAR 0 1
26973: RET
// export function hHackFog ; begin
26974: LD_INT 0
26976: PPUSH
// FogOff ( true ) ;
26977: LD_INT 1
26979: PPUSH
26980: CALL_OW 344
// end ;
26984: LD_VAR 0 1
26988: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26989: LD_INT 0
26991: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26992: LD_VAR 0 1
26996: PPUSH
26997: LD_VAR 0 2
27001: PPUSH
27002: LD_VAR 0 3
27006: PPUSH
27007: LD_INT 1
27009: PPUSH
27010: LD_INT 1
27012: PPUSH
27013: CALL_OW 483
// CenterOnXY ( x , y ) ;
27017: LD_VAR 0 2
27021: PPUSH
27022: LD_VAR 0 3
27026: PPUSH
27027: CALL_OW 84
// end ;
27031: LD_VAR 0 4
27035: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27036: LD_INT 0
27038: PPUSH
27039: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27040: LD_VAR 0 1
27044: NOT
27045: IFTRUE 27064
27047: PUSH
27048: LD_VAR 0 2
27052: PPUSH
27053: LD_VAR 0 3
27057: PPUSH
27058: CALL_OW 488
27062: NOT
27063: OR
27064: IFTRUE 27099
27066: PUSH
27067: LD_VAR 0 1
27071: PPUSH
27072: CALL_OW 266
27076: PUSH
27077: LD_INT 3
27079: NONEQUAL
27080: IFFALSE 27098
27082: PUSH
27083: LD_VAR 0 1
27087: PPUSH
27088: CALL_OW 247
27092: PUSH
27093: LD_INT 1
27095: EQUAL
27096: NOT
27097: AND
27098: OR
27099: IFFALSE 27103
// exit ;
27101: GO 27385
// if GetType ( factory ) = unit_human then
27103: LD_VAR 0 1
27107: PPUSH
27108: CALL_OW 247
27112: PUSH
27113: LD_INT 1
27115: EQUAL
27116: IFFALSE 27133
// factory := IsInUnit ( factory ) ;
27118: LD_ADDR_VAR 0 1
27122: PUSH
27123: LD_VAR 0 1
27127: PPUSH
27128: CALL_OW 310
27132: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27133: LD_VAR 0 1
27137: PPUSH
27138: CALL_OW 266
27142: PUSH
27143: LD_INT 3
27145: NONEQUAL
27146: IFFALSE 27150
// exit ;
27148: GO 27385
// for i := 1 to Count ( factoryWaypoints ) do
27150: LD_ADDR_VAR 0 5
27154: PUSH
27155: DOUBLE
27156: LD_INT 1
27158: DEC
27159: ST_TO_ADDR
27160: LD_EXP 80
27164: PPUSH
27165: CALL 36918 0 1
27169: PUSH
27170: FOR_TO
27171: IFFALSE 27333
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
27173: LD_VAR 0 2
27177: PPUSH
27178: LD_VAR 0 3
27182: PPUSH
27183: CALL_OW 428
27187: PUSH
27188: LD_EXP 80
27192: PUSH
27193: LD_VAR 0 5
27197: ARRAY
27198: PUSH
27199: LD_INT 2
27201: ARRAY
27202: EQUAL
27203: IFFALSE 27235
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
27205: LD_ADDR_EXP 80
27209: PUSH
27210: LD_EXP 80
27214: PPUSH
27215: LD_VAR 0 5
27219: PPUSH
27220: CALL_OW 3
27224: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27225: CALL 27390 0 0
// exit ;
27229: POP
27230: POP
27231: GO 27385
// end else
27233: GO 27331
// if factory = factoryWaypoints [ i ] [ 2 ] then
27235: LD_VAR 0 1
27239: PUSH
27240: LD_EXP 80
27244: PUSH
27245: LD_VAR 0 5
27249: ARRAY
27250: PUSH
27251: LD_INT 2
27253: ARRAY
27254: EQUAL
27255: IFFALSE 27331
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
27257: LD_ADDR_EXP 80
27261: PUSH
27262: LD_EXP 80
27266: PPUSH
27267: LD_VAR 0 5
27271: PPUSH
27272: CALL_OW 3
27276: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27277: LD_ADDR_EXP 80
27281: PUSH
27282: LD_EXP 80
27286: PPUSH
27287: LD_VAR 0 1
27291: PPUSH
27292: CALL_OW 255
27296: PUSH
27297: LD_VAR 0 1
27301: PUSH
27302: LD_VAR 0 2
27306: PUSH
27307: LD_VAR 0 3
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: PPUSH
27318: CALL 72850 0 2
27322: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27323: CALL 27390 0 0
// exit ;
27327: POP
27328: POP
27329: GO 27385
// end ; end ;
27331: GO 27170
27333: POP
27334: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27335: LD_ADDR_EXP 80
27339: PUSH
27340: LD_EXP 80
27344: PPUSH
27345: LD_VAR 0 1
27349: PPUSH
27350: CALL_OW 255
27354: PUSH
27355: LD_VAR 0 1
27359: PUSH
27360: LD_VAR 0 2
27364: PUSH
27365: LD_VAR 0 3
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: PPUSH
27376: CALL 72850 0 2
27380: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27381: CALL 27390 0 0
// end ;
27385: LD_VAR 0 4
27389: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27390: LD_INT 0
27392: PPUSH
27393: PPUSH
27394: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27395: LD_STRING resetFactoryWaypoint();
27397: PPUSH
27398: CALL_OW 559
// if factoryWaypoints then
27402: LD_EXP 80
27406: IFFALSE 27527
// begin list := factoryWaypoints ;
27408: LD_ADDR_VAR 0 3
27412: PUSH
27413: LD_EXP 80
27417: ST_TO_ADDR
// for i := 1 to list do
27418: LD_ADDR_VAR 0 2
27422: PUSH
27423: DOUBLE
27424: LD_INT 1
27426: DEC
27427: ST_TO_ADDR
27428: LD_VAR 0 3
27432: PUSH
27433: FOR_TO
27434: IFFALSE 27525
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27436: LD_STRING setFactoryWaypointXY(
27438: PUSH
27439: LD_VAR 0 3
27443: PUSH
27444: LD_VAR 0 2
27448: ARRAY
27449: PUSH
27450: LD_INT 1
27452: ARRAY
27453: STR
27454: PUSH
27455: LD_STRING ,
27457: STR
27458: PUSH
27459: LD_VAR 0 3
27463: PUSH
27464: LD_VAR 0 2
27468: ARRAY
27469: PUSH
27470: LD_INT 2
27472: ARRAY
27473: STR
27474: PUSH
27475: LD_STRING ,
27477: STR
27478: PUSH
27479: LD_VAR 0 3
27483: PUSH
27484: LD_VAR 0 2
27488: ARRAY
27489: PUSH
27490: LD_INT 3
27492: ARRAY
27493: STR
27494: PUSH
27495: LD_STRING ,
27497: STR
27498: PUSH
27499: LD_VAR 0 3
27503: PUSH
27504: LD_VAR 0 2
27508: ARRAY
27509: PUSH
27510: LD_INT 4
27512: ARRAY
27513: STR
27514: PUSH
27515: LD_STRING )
27517: STR
27518: PPUSH
27519: CALL_OW 559
27523: GO 27433
27525: POP
27526: POP
// end ; end ;
27527: LD_VAR 0 1
27531: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27532: LD_INT 0
27534: PPUSH
// if HexInfo ( x , y ) = warehouse then
27535: LD_VAR 0 2
27539: PPUSH
27540: LD_VAR 0 3
27544: PPUSH
27545: CALL_OW 428
27549: PUSH
27550: LD_VAR 0 1
27554: EQUAL
27555: IFFALSE 27582
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27557: LD_ADDR_EXP 82
27561: PUSH
27562: LD_EXP 82
27566: PPUSH
27567: LD_VAR 0 1
27571: PPUSH
27572: LD_INT 0
27574: PPUSH
27575: CALL_OW 1
27579: ST_TO_ADDR
27580: GO 27633
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27582: LD_ADDR_EXP 82
27586: PUSH
27587: LD_EXP 82
27591: PPUSH
27592: LD_VAR 0 1
27596: PPUSH
27597: LD_VAR 0 1
27601: PPUSH
27602: CALL_OW 255
27606: PUSH
27607: LD_VAR 0 1
27611: PUSH
27612: LD_VAR 0 2
27616: PUSH
27617: LD_VAR 0 3
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: PPUSH
27628: CALL_OW 1
27632: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27633: CALL 27642 0 0
// end ;
27637: LD_VAR 0 4
27641: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27642: LD_INT 0
27644: PPUSH
27645: PPUSH
27646: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27647: LD_STRING resetWarehouseGatheringPoints();
27649: PPUSH
27650: CALL_OW 559
// if warehouseGatheringPoints then
27654: LD_EXP 82
27658: IFFALSE 27784
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27660: LD_ADDR_VAR 0 3
27664: PUSH
27665: LD_EXP 82
27669: PPUSH
27670: CALL 76784 0 1
27674: ST_TO_ADDR
// for i := 1 to list do
27675: LD_ADDR_VAR 0 2
27679: PUSH
27680: DOUBLE
27681: LD_INT 1
27683: DEC
27684: ST_TO_ADDR
27685: LD_VAR 0 3
27689: PUSH
27690: FOR_TO
27691: IFFALSE 27782
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27693: LD_STRING setWarehouseGatheringPointXY(
27695: PUSH
27696: LD_VAR 0 3
27700: PUSH
27701: LD_VAR 0 2
27705: ARRAY
27706: PUSH
27707: LD_INT 1
27709: ARRAY
27710: STR
27711: PUSH
27712: LD_STRING ,
27714: STR
27715: PUSH
27716: LD_VAR 0 3
27720: PUSH
27721: LD_VAR 0 2
27725: ARRAY
27726: PUSH
27727: LD_INT 2
27729: ARRAY
27730: STR
27731: PUSH
27732: LD_STRING ,
27734: STR
27735: PUSH
27736: LD_VAR 0 3
27740: PUSH
27741: LD_VAR 0 2
27745: ARRAY
27746: PUSH
27747: LD_INT 3
27749: ARRAY
27750: STR
27751: PUSH
27752: LD_STRING ,
27754: STR
27755: PUSH
27756: LD_VAR 0 3
27760: PUSH
27761: LD_VAR 0 2
27765: ARRAY
27766: PUSH
27767: LD_INT 4
27769: ARRAY
27770: STR
27771: PUSH
27772: LD_STRING )
27774: STR
27775: PPUSH
27776: CALL_OW 559
27780: GO 27690
27782: POP
27783: POP
// end ; end ;
27784: LD_VAR 0 1
27788: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27789: LD_EXP 82
27793: IFFALSE 28488
27795: GO 27797
27797: DISABLE
27798: LD_INT 0
27800: PPUSH
27801: PPUSH
27802: PPUSH
27803: PPUSH
27804: PPUSH
27805: PPUSH
27806: PPUSH
27807: PPUSH
27808: PPUSH
// begin enable ;
27809: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27810: LD_ADDR_VAR 0 3
27814: PUSH
27815: LD_EXP 82
27819: PPUSH
27820: CALL 76784 0 1
27824: ST_TO_ADDR
// if not list then
27825: LD_VAR 0 3
27829: NOT
27830: IFFALSE 27834
// exit ;
27832: GO 28488
// for i := 1 to list do
27834: LD_ADDR_VAR 0 1
27838: PUSH
27839: DOUBLE
27840: LD_INT 1
27842: DEC
27843: ST_TO_ADDR
27844: LD_VAR 0 3
27848: PUSH
27849: FOR_TO
27850: IFFALSE 28486
// begin depot := list [ i ] [ 2 ] ;
27852: LD_ADDR_VAR 0 8
27856: PUSH
27857: LD_VAR 0 3
27861: PUSH
27862: LD_VAR 0 1
27866: ARRAY
27867: PUSH
27868: LD_INT 2
27870: ARRAY
27871: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27872: LD_ADDR_VAR 0 5
27876: PUSH
27877: LD_VAR 0 3
27881: PUSH
27882: LD_VAR 0 1
27886: ARRAY
27887: PUSH
27888: LD_INT 1
27890: ARRAY
27891: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27892: LD_VAR 0 8
27896: PPUSH
27897: CALL_OW 301
27901: IFTRUE 27920
27903: PUSH
27904: LD_VAR 0 5
27908: PUSH
27909: LD_VAR 0 8
27913: PPUSH
27914: CALL_OW 255
27918: NONEQUAL
27919: OR
27920: IFFALSE 27949
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27922: LD_ADDR_EXP 82
27926: PUSH
27927: LD_EXP 82
27931: PPUSH
27932: LD_VAR 0 8
27936: PPUSH
27937: LD_INT 0
27939: PPUSH
27940: CALL_OW 1
27944: ST_TO_ADDR
// exit ;
27945: POP
27946: POP
27947: GO 28488
// end ; x := list [ i ] [ 3 ] ;
27949: LD_ADDR_VAR 0 6
27953: PUSH
27954: LD_VAR 0 3
27958: PUSH
27959: LD_VAR 0 1
27963: ARRAY
27964: PUSH
27965: LD_INT 3
27967: ARRAY
27968: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27969: LD_ADDR_VAR 0 7
27973: PUSH
27974: LD_VAR 0 3
27978: PUSH
27979: LD_VAR 0 1
27983: ARRAY
27984: PUSH
27985: LD_INT 4
27987: ARRAY
27988: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27989: LD_ADDR_VAR 0 9
27993: PUSH
27994: LD_VAR 0 6
27998: PPUSH
27999: LD_VAR 0 7
28003: PPUSH
28004: LD_INT 16
28006: PPUSH
28007: CALL 75358 0 3
28011: ST_TO_ADDR
// if not cratesNearbyPoint then
28012: LD_VAR 0 9
28016: NOT
28017: IFFALSE 28023
// exit ;
28019: POP
28020: POP
28021: GO 28488
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28023: LD_ADDR_VAR 0 4
28027: PUSH
28028: LD_INT 22
28030: PUSH
28031: LD_VAR 0 5
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 3
28042: PUSH
28043: LD_INT 60
28045: PUSH
28046: EMPTY
28047: LIST
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 91
28055: PUSH
28056: LD_VAR 0 8
28060: PUSH
28061: LD_INT 6
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: LD_INT 25
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 25
28084: PUSH
28085: LD_INT 16
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: LIST
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: PPUSH
28103: CALL_OW 69
28107: PUSH
28108: LD_VAR 0 8
28112: PPUSH
28113: CALL_OW 313
28117: PPUSH
28118: LD_INT 3
28120: PUSH
28121: LD_INT 60
28123: PUSH
28124: EMPTY
28125: LIST
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 2
28133: PUSH
28134: LD_INT 25
28136: PUSH
28137: LD_INT 2
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 25
28146: PUSH
28147: LD_INT 16
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PPUSH
28163: CALL_OW 72
28167: UNION
28168: ST_TO_ADDR
// if tmp then
28169: LD_VAR 0 4
28173: IFFALSE 28253
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28175: LD_ADDR_VAR 0 4
28179: PUSH
28180: LD_VAR 0 4
28184: PPUSH
28185: LD_INT 3
28187: PPUSH
28188: CALL 73165 0 2
28192: ST_TO_ADDR
// for j in tmp do
28193: LD_ADDR_VAR 0 2
28197: PUSH
28198: LD_VAR 0 4
28202: PUSH
28203: FOR_IN
28204: IFFALSE 28247
// begin if IsInUnit ( j ) then
28206: LD_VAR 0 2
28210: PPUSH
28211: CALL_OW 310
28215: IFFALSE 28226
// ComExit ( j ) ;
28217: LD_VAR 0 2
28221: PPUSH
28222: CALL 73248 0 1
// AddComCollect ( j , x , y ) ;
28226: LD_VAR 0 2
28230: PPUSH
28231: LD_VAR 0 6
28235: PPUSH
28236: LD_VAR 0 7
28240: PPUSH
28241: CALL_OW 177
// end ;
28245: GO 28203
28247: POP
28248: POP
// exit ;
28249: POP
28250: POP
28251: GO 28488
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28253: LD_ADDR_VAR 0 4
28257: PUSH
28258: LD_INT 22
28260: PUSH
28261: LD_VAR 0 5
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 91
28272: PUSH
28273: LD_VAR 0 8
28277: PUSH
28278: LD_INT 8
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 2
28288: PUSH
28289: LD_INT 34
28291: PUSH
28292: LD_INT 12
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 34
28301: PUSH
28302: LD_INT 51
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 34
28311: PUSH
28312: LD_INT 32
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 34
28321: PUSH
28322: LD_INT 89
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: LIST
28340: PPUSH
28341: CALL_OW 69
28345: ST_TO_ADDR
// if tmp then
28346: LD_VAR 0 4
28350: IFFALSE 28484
// begin for j in tmp do
28352: LD_ADDR_VAR 0 2
28356: PUSH
28357: LD_VAR 0 4
28361: PUSH
28362: FOR_IN
28363: IFFALSE 28482
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28365: LD_VAR 0 2
28369: PPUSH
28370: CALL_OW 262
28374: PUSH
28375: LD_INT 3
28377: EQUAL
28378: IFTRUE 28395
28380: PUSH
28381: LD_VAR 0 2
28385: PPUSH
28386: CALL_OW 261
28390: PUSH
28391: LD_INT 20
28393: GREATER
28394: OR
28395: IFFALSE 28409
28397: PUSH
28398: LD_VAR 0 2
28402: PPUSH
28403: CALL_OW 314
28407: NOT
28408: AND
28409: IFFALSE 28439
28411: PUSH
28412: LD_VAR 0 2
28416: PPUSH
28417: CALL_OW 263
28421: PUSH
28422: LD_INT 1
28424: NONEQUAL
28425: IFTRUE 28438
28427: PUSH
28428: LD_VAR 0 2
28432: PPUSH
28433: CALL_OW 311
28437: OR
28438: AND
28439: IFFALSE 28480
// begin ComCollect ( j , x , y ) ;
28441: LD_VAR 0 2
28445: PPUSH
28446: LD_VAR 0 6
28450: PPUSH
28451: LD_VAR 0 7
28455: PPUSH
28456: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28460: LD_VAR 0 2
28464: PPUSH
28465: LD_VAR 0 8
28469: PPUSH
28470: CALL_OW 172
// exit ;
28474: POP
28475: POP
28476: POP
28477: POP
28478: GO 28488
// end ;
28480: GO 28362
28482: POP
28483: POP
// end ; end ;
28484: GO 27849
28486: POP
28487: POP
// end ; end_of_file
28488: PPOPN 9
28490: END
// export function SOS_UnitDestroyed ( un ) ; begin
28491: LD_INT 0
28493: PPUSH
// ComRadiation ( un ) ;
28494: LD_VAR 0 1
28498: PPUSH
28499: CALL 29580 0 1
// end ;
28503: LD_VAR 0 2
28507: RET
// export function SOS_UnitKamikazed ( un ) ; begin
28508: LD_INT 0
28510: PPUSH
// ComRadiation ( un ) ;
28511: LD_VAR 0 1
28515: PPUSH
28516: CALL 29580 0 1
// end ;
28520: LD_VAR 0 2
28524: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28525: LD_INT 0
28527: PPUSH
// end ;
28528: LD_VAR 0 4
28532: RET
// export function SOS_Command ( cmd ) ; begin
28533: LD_INT 0
28535: PPUSH
// end ;
28536: LD_VAR 0 2
28540: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28541: LD_INT 0
28543: PPUSH
// end ;
28544: LD_VAR 0 6
28548: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
28549: LD_INT 0
28551: PPUSH
28552: PPUSH
28553: PPUSH
28554: PPUSH
// if not vehicle or not factory then
28555: LD_VAR 0 1
28559: NOT
28560: IFTRUE 28569
28562: PUSH
28563: LD_VAR 0 2
28567: NOT
28568: OR
28569: IFFALSE 28573
// exit ;
28571: GO 29155
// if not factoryWaypoints then
28573: LD_EXP 80
28577: NOT
28578: IFFALSE 28582
// exit ;
28580: GO 29155
// for i := 1 to Count ( factoryWaypoints ) do
28582: LD_ADDR_VAR 0 4
28586: PUSH
28587: DOUBLE
28588: LD_INT 1
28590: DEC
28591: ST_TO_ADDR
28592: LD_EXP 80
28596: PPUSH
28597: CALL 36918 0 1
28601: PUSH
28602: FOR_TO
28603: IFFALSE 29153
// if factoryWaypoints [ i ] [ 2 ] = factory then
28605: LD_EXP 80
28609: PUSH
28610: LD_VAR 0 4
28614: ARRAY
28615: PUSH
28616: LD_INT 2
28618: ARRAY
28619: PUSH
28620: LD_VAR 0 2
28624: EQUAL
28625: IFFALSE 29151
// begin if GetControl ( vehicle ) = control_manual then
28627: LD_VAR 0 1
28631: PPUSH
28632: CALL_OW 263
28636: PUSH
28637: LD_INT 1
28639: EQUAL
28640: IFFALSE 29004
// begin driver := IsDrivenBy ( vehicle ) ;
28642: LD_ADDR_VAR 0 5
28646: PUSH
28647: LD_VAR 0 1
28651: PPUSH
28652: CALL_OW 311
28656: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
28657: LD_VAR 0 5
28661: PUSH
28662: LD_EXP 81
28666: IN
28667: IFTRUE 28681
28669: PUSH
28670: LD_VAR 0 1
28674: PUSH
28675: LD_EXP 81
28679: IN
28680: OR
28681: IFFALSE 28687
// exit ;
28683: POP
28684: POP
28685: GO 29155
// if not HasTask ( driver ) then
28687: LD_VAR 0 5
28691: PPUSH
28692: CALL_OW 314
28696: NOT
28697: IFFALSE 29002
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
28699: LD_ADDR_EXP 81
28703: PUSH
28704: LD_EXP 81
28708: PPUSH
28709: LD_VAR 0 5
28713: PPUSH
28714: CALL 72850 0 2
28718: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
28719: LD_ADDR_EXP 81
28723: PUSH
28724: LD_EXP 81
28728: PPUSH
28729: LD_VAR 0 1
28733: PPUSH
28734: CALL 72850 0 2
28738: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28739: LD_ADDR_VAR 0 6
28743: PUSH
28744: LD_EXP 80
28748: PUSH
28749: LD_VAR 0 4
28753: ARRAY
28754: PUSH
28755: LD_INT 3
28757: ARRAY
28758: PPUSH
28759: LD_EXP 80
28763: PUSH
28764: LD_VAR 0 4
28768: ARRAY
28769: PUSH
28770: LD_INT 4
28772: ARRAY
28773: PPUSH
28774: CALL_OW 428
28778: ST_TO_ADDR
// if hex then
28779: LD_VAR 0 6
28783: IFFALSE 28801
// ComMoveUnit ( driver , hex ) else
28785: LD_VAR 0 5
28789: PPUSH
28790: LD_VAR 0 6
28794: PPUSH
28795: CALL_OW 112
28799: GO 28885
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
28801: LD_VAR 0 1
28805: PPUSH
28806: LD_EXP 80
28810: PUSH
28811: LD_VAR 0 4
28815: ARRAY
28816: PUSH
28817: LD_INT 3
28819: ARRAY
28820: PPUSH
28821: LD_EXP 80
28825: PUSH
28826: LD_VAR 0 4
28830: ARRAY
28831: PUSH
28832: LD_INT 4
28834: ARRAY
28835: PPUSH
28836: CALL_OW 297
28840: PUSH
28841: LD_INT 0
28843: GREATER
28844: IFFALSE 28885
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28846: LD_VAR 0 5
28850: PPUSH
28851: LD_EXP 80
28855: PUSH
28856: LD_VAR 0 4
28860: ARRAY
28861: PUSH
28862: LD_INT 3
28864: ARRAY
28865: PPUSH
28866: LD_EXP 80
28870: PUSH
28871: LD_VAR 0 4
28875: ARRAY
28876: PUSH
28877: LD_INT 4
28879: ARRAY
28880: PPUSH
28881: CALL_OW 111
// AddComExitVehicle ( driver ) ;
28885: LD_VAR 0 5
28889: PPUSH
28890: CALL_OW 181
// if Multiplayer then
28894: LD_OWVAR 4
28898: IFFALSE 28947
// begin repeat wait ( 10 ) ;
28900: LD_INT 10
28902: PPUSH
28903: CALL_OW 67
// until not IsInUnit ( driver ) ;
28907: LD_VAR 0 5
28911: PPUSH
28912: CALL_OW 310
28916: NOT
28917: IFFALSE 28900
// if not HasTask ( driver ) then
28919: LD_VAR 0 5
28923: PPUSH
28924: CALL_OW 314
28928: NOT
28929: IFFALSE 28945
// ComEnterUnit ( driver , factory ) ;
28931: LD_VAR 0 5
28935: PPUSH
28936: LD_VAR 0 2
28940: PPUSH
28941: CALL_OW 120
// end else
28945: GO 28961
// AddComEnterUnit ( driver , factory ) ;
28947: LD_VAR 0 5
28951: PPUSH
28952: LD_VAR 0 2
28956: PPUSH
28957: CALL_OW 180
// wait ( 0 0$1 ) ;
28961: LD_INT 35
28963: PPUSH
28964: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
28968: LD_ADDR_EXP 81
28972: PUSH
28973: LD_EXP 81
28977: PUSH
28978: LD_VAR 0 5
28982: DIFF
28983: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
28984: LD_ADDR_EXP 81
28988: PUSH
28989: LD_EXP 81
28993: PUSH
28994: LD_VAR 0 1
28998: DIFF
28999: ST_TO_ADDR
// break ;
29000: GO 29153
// end ; end else
29002: GO 29151
// if GetControl ( vehicle ) = control_remote then
29004: LD_VAR 0 1
29008: PPUSH
29009: CALL_OW 263
29013: PUSH
29014: LD_INT 2
29016: EQUAL
29017: IFFALSE 29103
// begin wait ( 0 0$2 ) ;
29019: LD_INT 70
29021: PPUSH
29022: CALL_OW 67
// repeat wait ( 10 ) ;
29026: LD_INT 10
29028: PPUSH
29029: CALL_OW 67
// Connect ( vehicle ) ;
29033: LD_VAR 0 1
29037: PPUSH
29038: CALL 43162 0 1
// until IsControledBy ( vehicle ) ;
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 312
29051: IFFALSE 29026
// wait ( 10 ) ;
29053: LD_INT 10
29055: PPUSH
29056: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29060: LD_VAR 0 1
29064: PPUSH
29065: LD_EXP 80
29069: PUSH
29070: LD_VAR 0 4
29074: ARRAY
29075: PUSH
29076: LD_INT 3
29078: ARRAY
29079: PPUSH
29080: LD_EXP 80
29084: PUSH
29085: LD_VAR 0 4
29089: ARRAY
29090: PUSH
29091: LD_INT 4
29093: ARRAY
29094: PPUSH
29095: CALL_OW 111
// break ;
29099: GO 29153
// end else
29101: GO 29151
// begin wait ( 0 0$3 ) ;
29103: LD_INT 105
29105: PPUSH
29106: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29110: LD_VAR 0 1
29114: PPUSH
29115: LD_EXP 80
29119: PUSH
29120: LD_VAR 0 4
29124: ARRAY
29125: PUSH
29126: LD_INT 3
29128: ARRAY
29129: PPUSH
29130: LD_EXP 80
29134: PUSH
29135: LD_VAR 0 4
29139: ARRAY
29140: PUSH
29141: LD_INT 4
29143: ARRAY
29144: PPUSH
29145: CALL_OW 111
// break ;
29149: GO 29153
// end ; end ;
29151: GO 28602
29153: POP
29154: POP
// end ;
29155: LD_VAR 0 3
29159: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29160: LD_INT 0
29162: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29163: LD_VAR 0 1
29167: PUSH
29168: LD_INT 250
29170: EQUAL
29171: IFFALSE 29188
29173: PUSH
29174: LD_VAR 0 2
29178: PPUSH
29179: CALL_OW 264
29183: PUSH
29184: LD_INT 81
29186: EQUAL
29187: AND
29188: IFFALSE 29209
// MinerPlaceMine ( unit , x , y ) ;
29190: LD_VAR 0 2
29194: PPUSH
29195: LD_VAR 0 4
29199: PPUSH
29200: LD_VAR 0 5
29204: PPUSH
29205: CALL 32341 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29209: LD_VAR 0 1
29213: PUSH
29214: LD_INT 251
29216: EQUAL
29217: IFFALSE 29234
29219: PUSH
29220: LD_VAR 0 2
29224: PPUSH
29225: CALL_OW 264
29229: PUSH
29230: LD_INT 81
29232: EQUAL
29233: AND
29234: IFFALSE 29255
// MinerDetonateMine ( unit , x , y ) ;
29236: LD_VAR 0 2
29240: PPUSH
29241: LD_VAR 0 4
29245: PPUSH
29246: LD_VAR 0 5
29250: PPUSH
29251: CALL 32620 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29255: LD_VAR 0 1
29259: PUSH
29260: LD_INT 252
29262: EQUAL
29263: IFFALSE 29280
29265: PUSH
29266: LD_VAR 0 2
29270: PPUSH
29271: CALL_OW 264
29275: PUSH
29276: LD_INT 81
29278: EQUAL
29279: AND
29280: IFFALSE 29301
// MinerCreateMinefield ( unit , x , y ) ;
29282: LD_VAR 0 2
29286: PPUSH
29287: LD_VAR 0 4
29291: PPUSH
29292: LD_VAR 0 5
29296: PPUSH
29297: CALL 33039 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29301: LD_VAR 0 1
29305: PUSH
29306: LD_INT 253
29308: EQUAL
29309: IFFALSE 29326
29311: PUSH
29312: LD_VAR 0 2
29316: PPUSH
29317: CALL_OW 257
29321: PUSH
29322: LD_INT 5
29324: EQUAL
29325: AND
29326: IFFALSE 29347
// ComBinocular ( unit , x , y ) ;
29328: LD_VAR 0 2
29332: PPUSH
29333: LD_VAR 0 4
29337: PPUSH
29338: LD_VAR 0 5
29342: PPUSH
29343: CALL 33414 0 3
// if selectedUnit then
29347: LD_VAR 0 3
29351: IFFALSE 29411
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29353: LD_VAR 0 1
29357: PUSH
29358: LD_INT 254
29360: EQUAL
29361: IFFALSE 29378
29363: PUSH
29364: LD_VAR 0 2
29368: PPUSH
29369: CALL_OW 264
29373: PUSH
29374: LD_INT 99
29376: EQUAL
29377: AND
29378: IFFALSE 29395
29380: PUSH
29381: LD_VAR 0 3
29385: PPUSH
29386: CALL_OW 263
29390: PUSH
29391: LD_INT 3
29393: EQUAL
29394: AND
29395: IFFALSE 29411
// HackDestroyVehicle ( unit , selectedUnit ) ;
29397: LD_VAR 0 2
29401: PPUSH
29402: LD_VAR 0 3
29406: PPUSH
29407: CALL 31701 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29411: LD_VAR 0 1
29415: PUSH
29416: LD_INT 255
29418: EQUAL
29419: IFFALSE 29443
29421: PUSH
29422: LD_VAR 0 2
29426: PPUSH
29427: CALL_OW 264
29431: PUSH
29432: LD_INT 14
29434: PUSH
29435: LD_INT 53
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: IN
29442: AND
29443: IFFALSE 29461
29445: PUSH
29446: LD_VAR 0 4
29450: PPUSH
29451: LD_VAR 0 5
29455: PPUSH
29456: CALL_OW 488
29460: AND
29461: IFFALSE 29485
// CutTreeXYR ( unit , x , y , 12 ) ;
29463: LD_VAR 0 2
29467: PPUSH
29468: LD_VAR 0 4
29472: PPUSH
29473: LD_VAR 0 5
29477: PPUSH
29478: LD_INT 12
29480: PPUSH
29481: CALL 29676 0 4
// if cmd = 256 then
29485: LD_VAR 0 1
29489: PUSH
29490: LD_INT 256
29492: EQUAL
29493: IFFALSE 29514
// SetFactoryWaypoint ( unit , x , y ) ;
29495: LD_VAR 0 2
29499: PPUSH
29500: LD_VAR 0 4
29504: PPUSH
29505: LD_VAR 0 5
29509: PPUSH
29510: CALL 27036 0 3
// if cmd = 257 then
29514: LD_VAR 0 1
29518: PUSH
29519: LD_INT 257
29521: EQUAL
29522: IFFALSE 29543
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29524: LD_VAR 0 2
29528: PPUSH
29529: LD_VAR 0 4
29533: PPUSH
29534: LD_VAR 0 5
29538: PPUSH
29539: CALL 27532 0 3
// if cmd = 258 then
29543: LD_VAR 0 1
29547: PUSH
29548: LD_INT 258
29550: EQUAL
29551: IFFALSE 29575
// BurnTreeXYR ( unit , x , y , 8 ) ;
29553: LD_VAR 0 2
29557: PPUSH
29558: LD_VAR 0 4
29562: PPUSH
29563: LD_VAR 0 5
29567: PPUSH
29568: LD_INT 8
29570: PPUSH
29571: CALL 30076 0 4
// end ;
29575: LD_VAR 0 6
29579: RET
// export function ComRadiation ( un ) ; var eff ; begin
29580: LD_INT 0
29582: PPUSH
29583: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
29584: LD_VAR 0 1
29588: PPUSH
29589: CALL_OW 264
29593: PUSH
29594: LD_INT 91
29596: NONEQUAL
29597: IFFALSE 29601
// exit ;
29599: GO 29671
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29601: LD_INT 68
29603: PPUSH
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 255
29613: PPUSH
29614: CALL_OW 321
29618: PUSH
29619: LD_INT 2
29621: EQUAL
29622: IFFALSE 29634
// eff := 50 else
29624: LD_ADDR_VAR 0 3
29628: PUSH
29629: LD_INT 50
29631: ST_TO_ADDR
29632: GO 29642
// eff := 25 ;
29634: LD_ADDR_VAR 0 3
29638: PUSH
29639: LD_INT 25
29641: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29642: LD_VAR 0 1
29646: PPUSH
29647: CALL_OW 250
29651: PPUSH
29652: LD_VAR 0 1
29656: PPUSH
29657: CALL_OW 251
29661: PPUSH
29662: LD_VAR 0 3
29666: PPUSH
29667: CALL_OW 495
// end ;
29671: LD_VAR 0 2
29675: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29676: LD_INT 0
29678: PPUSH
29679: PPUSH
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
29685: PPUSH
29686: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
29687: LD_VAR 0 1
29691: PPUSH
29692: CALL_OW 302
29696: NOT
29697: IFTRUE 29716
29699: PUSH
29700: LD_VAR 0 2
29704: PPUSH
29705: LD_VAR 0 3
29709: PPUSH
29710: CALL_OW 488
29714: NOT
29715: OR
29716: IFTRUE 29725
29718: PUSH
29719: LD_VAR 0 4
29723: NOT
29724: OR
29725: IFFALSE 29729
// exit ;
29727: GO 30071
// list := [ ] ;
29729: LD_ADDR_VAR 0 13
29733: PUSH
29734: EMPTY
29735: ST_TO_ADDR
// if x - r < 0 then
29736: LD_VAR 0 2
29740: PUSH
29741: LD_VAR 0 4
29745: MINUS
29746: PUSH
29747: LD_INT 0
29749: LESS
29750: IFFALSE 29762
// min_x := 0 else
29752: LD_ADDR_VAR 0 7
29756: PUSH
29757: LD_INT 0
29759: ST_TO_ADDR
29760: GO 29778
// min_x := x - r ;
29762: LD_ADDR_VAR 0 7
29766: PUSH
29767: LD_VAR 0 2
29771: PUSH
29772: LD_VAR 0 4
29776: MINUS
29777: ST_TO_ADDR
// if y - r < 0 then
29778: LD_VAR 0 3
29782: PUSH
29783: LD_VAR 0 4
29787: MINUS
29788: PUSH
29789: LD_INT 0
29791: LESS
29792: IFFALSE 29804
// min_y := 0 else
29794: LD_ADDR_VAR 0 8
29798: PUSH
29799: LD_INT 0
29801: ST_TO_ADDR
29802: GO 29820
// min_y := y - r ;
29804: LD_ADDR_VAR 0 8
29808: PUSH
29809: LD_VAR 0 3
29813: PUSH
29814: LD_VAR 0 4
29818: MINUS
29819: ST_TO_ADDR
// max_x := x + r ;
29820: LD_ADDR_VAR 0 9
29824: PUSH
29825: LD_VAR 0 2
29829: PUSH
29830: LD_VAR 0 4
29834: PLUS
29835: ST_TO_ADDR
// max_y := y + r ;
29836: LD_ADDR_VAR 0 10
29840: PUSH
29841: LD_VAR 0 3
29845: PUSH
29846: LD_VAR 0 4
29850: PLUS
29851: ST_TO_ADDR
// for _x = min_x to max_x do
29852: LD_ADDR_VAR 0 11
29856: PUSH
29857: DOUBLE
29858: LD_VAR 0 7
29862: DEC
29863: ST_TO_ADDR
29864: LD_VAR 0 9
29868: PUSH
29869: FOR_TO
29870: IFFALSE 29989
// for _y = min_y to max_y do
29872: LD_ADDR_VAR 0 12
29876: PUSH
29877: DOUBLE
29878: LD_VAR 0 8
29882: DEC
29883: ST_TO_ADDR
29884: LD_VAR 0 10
29888: PUSH
29889: FOR_TO
29890: IFFALSE 29985
// begin if not ValidHex ( _x , _y ) then
29892: LD_VAR 0 11
29896: PPUSH
29897: LD_VAR 0 12
29901: PPUSH
29902: CALL_OW 488
29906: NOT
29907: IFFALSE 29911
// continue ;
29909: GO 29889
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29911: LD_VAR 0 11
29915: PPUSH
29916: LD_VAR 0 12
29920: PPUSH
29921: CALL_OW 351
29925: IFFALSE 29943
29927: PUSH
29928: LD_VAR 0 11
29932: PPUSH
29933: LD_VAR 0 12
29937: PPUSH
29938: CALL_OW 554
29942: AND
29943: IFFALSE 29983
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29945: LD_ADDR_VAR 0 13
29949: PUSH
29950: LD_VAR 0 13
29954: PPUSH
29955: LD_VAR 0 13
29959: PUSH
29960: LD_INT 1
29962: PLUS
29963: PPUSH
29964: LD_VAR 0 11
29968: PUSH
29969: LD_VAR 0 12
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PPUSH
29978: CALL_OW 2
29982: ST_TO_ADDR
// end ;
29983: GO 29889
29985: POP
29986: POP
29987: GO 29869
29989: POP
29990: POP
// if not list then
29991: LD_VAR 0 13
29995: NOT
29996: IFFALSE 30000
// exit ;
29998: GO 30071
// for i in list do
30000: LD_ADDR_VAR 0 6
30004: PUSH
30005: LD_VAR 0 13
30009: PUSH
30010: FOR_IN
30011: IFFALSE 30069
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30013: LD_VAR 0 1
30017: PPUSH
30018: LD_STRING M
30020: PUSH
30021: LD_VAR 0 6
30025: PUSH
30026: LD_INT 1
30028: ARRAY
30029: PUSH
30030: LD_VAR 0 6
30034: PUSH
30035: LD_INT 2
30037: ARRAY
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: LD_INT 0
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: PUSH
30060: EMPTY
30061: LIST
30062: PPUSH
30063: CALL_OW 447
30067: GO 30010
30069: POP
30070: POP
// end ;
30071: LD_VAR 0 5
30075: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
30076: LD_INT 0
30078: PPUSH
30079: PPUSH
30080: PPUSH
30081: PPUSH
30082: PPUSH
30083: PPUSH
30084: PPUSH
30085: PPUSH
30086: PPUSH
30087: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
30088: LD_VAR 0 1
30092: PPUSH
30093: CALL_OW 302
30097: NOT
30098: IFTRUE 30117
30100: PUSH
30101: LD_VAR 0 2
30105: PPUSH
30106: LD_VAR 0 3
30110: PPUSH
30111: CALL_OW 488
30115: NOT
30116: OR
30117: IFTRUE 30126
30119: PUSH
30120: LD_VAR 0 4
30124: NOT
30125: OR
30126: IFFALSE 30130
// exit ;
30128: GO 30647
// list := [ ] ;
30130: LD_ADDR_VAR 0 13
30134: PUSH
30135: EMPTY
30136: ST_TO_ADDR
// if x - r < 0 then
30137: LD_VAR 0 2
30141: PUSH
30142: LD_VAR 0 4
30146: MINUS
30147: PUSH
30148: LD_INT 0
30150: LESS
30151: IFFALSE 30163
// min_x := 0 else
30153: LD_ADDR_VAR 0 7
30157: PUSH
30158: LD_INT 0
30160: ST_TO_ADDR
30161: GO 30179
// min_x := x - r ;
30163: LD_ADDR_VAR 0 7
30167: PUSH
30168: LD_VAR 0 2
30172: PUSH
30173: LD_VAR 0 4
30177: MINUS
30178: ST_TO_ADDR
// if y - r < 0 then
30179: LD_VAR 0 3
30183: PUSH
30184: LD_VAR 0 4
30188: MINUS
30189: PUSH
30190: LD_INT 0
30192: LESS
30193: IFFALSE 30205
// min_y := 0 else
30195: LD_ADDR_VAR 0 8
30199: PUSH
30200: LD_INT 0
30202: ST_TO_ADDR
30203: GO 30221
// min_y := y - r ;
30205: LD_ADDR_VAR 0 8
30209: PUSH
30210: LD_VAR 0 3
30214: PUSH
30215: LD_VAR 0 4
30219: MINUS
30220: ST_TO_ADDR
// max_x := x + r ;
30221: LD_ADDR_VAR 0 9
30225: PUSH
30226: LD_VAR 0 2
30230: PUSH
30231: LD_VAR 0 4
30235: PLUS
30236: ST_TO_ADDR
// max_y := y + r ;
30237: LD_ADDR_VAR 0 10
30241: PUSH
30242: LD_VAR 0 3
30246: PUSH
30247: LD_VAR 0 4
30251: PLUS
30252: ST_TO_ADDR
// for _x = min_x to max_x do
30253: LD_ADDR_VAR 0 11
30257: PUSH
30258: DOUBLE
30259: LD_VAR 0 7
30263: DEC
30264: ST_TO_ADDR
30265: LD_VAR 0 9
30269: PUSH
30270: FOR_TO
30271: IFFALSE 30390
// for _y = min_y to max_y do
30273: LD_ADDR_VAR 0 12
30277: PUSH
30278: DOUBLE
30279: LD_VAR 0 8
30283: DEC
30284: ST_TO_ADDR
30285: LD_VAR 0 10
30289: PUSH
30290: FOR_TO
30291: IFFALSE 30386
// begin if not ValidHex ( _x , _y ) then
30293: LD_VAR 0 11
30297: PPUSH
30298: LD_VAR 0 12
30302: PPUSH
30303: CALL_OW 488
30307: NOT
30308: IFFALSE 30312
// continue ;
30310: GO 30290
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30312: LD_VAR 0 11
30316: PPUSH
30317: LD_VAR 0 12
30321: PPUSH
30322: CALL_OW 351
30326: IFFALSE 30344
30328: PUSH
30329: LD_VAR 0 11
30333: PPUSH
30334: LD_VAR 0 12
30338: PPUSH
30339: CALL_OW 554
30343: AND
30344: IFFALSE 30384
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30346: LD_ADDR_VAR 0 13
30350: PUSH
30351: LD_VAR 0 13
30355: PPUSH
30356: LD_VAR 0 13
30360: PUSH
30361: LD_INT 1
30363: PLUS
30364: PPUSH
30365: LD_VAR 0 11
30369: PUSH
30370: LD_VAR 0 12
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PPUSH
30379: CALL_OW 2
30383: ST_TO_ADDR
// end ;
30384: GO 30290
30386: POP
30387: POP
30388: GO 30270
30390: POP
30391: POP
// if not list then
30392: LD_VAR 0 13
30396: NOT
30397: IFFALSE 30401
// exit ;
30399: GO 30647
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
30401: LD_ADDR_VAR 0 13
30405: PUSH
30406: LD_VAR 0 1
30410: PPUSH
30411: LD_VAR 0 13
30415: PPUSH
30416: LD_INT 1
30418: PPUSH
30419: LD_INT 1
30421: PPUSH
30422: CALL 40290 0 4
30426: ST_TO_ADDR
// ComStop ( flame ) ;
30427: LD_VAR 0 1
30431: PPUSH
30432: CALL_OW 141
// for i in list do
30436: LD_ADDR_VAR 0 6
30440: PUSH
30441: LD_VAR 0 13
30445: PUSH
30446: FOR_IN
30447: IFFALSE 30478
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
30449: LD_VAR 0 1
30453: PPUSH
30454: LD_VAR 0 6
30458: PUSH
30459: LD_INT 1
30461: ARRAY
30462: PPUSH
30463: LD_VAR 0 6
30467: PUSH
30468: LD_INT 2
30470: ARRAY
30471: PPUSH
30472: CALL_OW 176
30476: GO 30446
30478: POP
30479: POP
// repeat wait ( 0 0$1 ) ;
30480: LD_INT 35
30482: PPUSH
30483: CALL_OW 67
// task := GetTaskList ( flame ) ;
30487: LD_ADDR_VAR 0 14
30491: PUSH
30492: LD_VAR 0 1
30496: PPUSH
30497: CALL_OW 437
30501: ST_TO_ADDR
// if not task then
30502: LD_VAR 0 14
30506: NOT
30507: IFFALSE 30511
// exit ;
30509: GO 30647
// if task [ 1 ] [ 1 ] <> | then
30511: LD_VAR 0 14
30515: PUSH
30516: LD_INT 1
30518: ARRAY
30519: PUSH
30520: LD_INT 1
30522: ARRAY
30523: PUSH
30524: LD_STRING |
30526: NONEQUAL
30527: IFFALSE 30531
// exit ;
30529: GO 30647
// _x := task [ 1 ] [ 2 ] ;
30531: LD_ADDR_VAR 0 11
30535: PUSH
30536: LD_VAR 0 14
30540: PUSH
30541: LD_INT 1
30543: ARRAY
30544: PUSH
30545: LD_INT 2
30547: ARRAY
30548: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
30549: LD_ADDR_VAR 0 12
30553: PUSH
30554: LD_VAR 0 14
30558: PUSH
30559: LD_INT 1
30561: ARRAY
30562: PUSH
30563: LD_INT 3
30565: ARRAY
30566: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
30567: LD_VAR 0 11
30571: PPUSH
30572: LD_VAR 0 12
30576: PPUSH
30577: CALL_OW 351
30581: NOT
30582: IFTRUE 30601
30584: PUSH
30585: LD_VAR 0 11
30589: PPUSH
30590: LD_VAR 0 12
30594: PPUSH
30595: CALL_OW 554
30599: NOT
30600: OR
30601: IFFALSE 30635
// begin task := Delete ( task , 1 ) ;
30603: LD_ADDR_VAR 0 14
30607: PUSH
30608: LD_VAR 0 14
30612: PPUSH
30613: LD_INT 1
30615: PPUSH
30616: CALL_OW 3
30620: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
30621: LD_VAR 0 1
30625: PPUSH
30626: LD_VAR 0 14
30630: PPUSH
30631: CALL_OW 446
// end ; until not HasTask ( flame ) ;
30635: LD_VAR 0 1
30639: PPUSH
30640: CALL_OW 314
30644: NOT
30645: IFFALSE 30480
// end ;
30647: LD_VAR 0 5
30651: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30652: LD_EXP 84
30656: NOT
30657: IFFALSE 30707
30659: GO 30661
30661: DISABLE
// begin initHack := true ;
30662: LD_ADDR_EXP 84
30666: PUSH
30667: LD_INT 1
30669: ST_TO_ADDR
// hackTanks := [ ] ;
30670: LD_ADDR_EXP 85
30674: PUSH
30675: EMPTY
30676: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30677: LD_ADDR_EXP 86
30681: PUSH
30682: EMPTY
30683: ST_TO_ADDR
// hackLimit := 3 ;
30684: LD_ADDR_EXP 87
30688: PUSH
30689: LD_INT 3
30691: ST_TO_ADDR
// hackDist := 12 ;
30692: LD_ADDR_EXP 88
30696: PUSH
30697: LD_INT 12
30699: ST_TO_ADDR
// hackCounter := [ ] ;
30700: LD_ADDR_EXP 89
30704: PUSH
30705: EMPTY
30706: ST_TO_ADDR
// end ;
30707: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30708: LD_EXP 84
30712: IFFALSE 30730
30714: PUSH
30715: LD_INT 34
30717: PUSH
30718: LD_INT 99
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PPUSH
30725: CALL_OW 69
30729: AND
30730: IFFALSE 30983
30732: GO 30734
30734: DISABLE
30735: LD_INT 0
30737: PPUSH
30738: PPUSH
// begin enable ;
30739: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30740: LD_ADDR_VAR 0 1
30744: PUSH
30745: LD_INT 34
30747: PUSH
30748: LD_INT 99
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PPUSH
30755: CALL_OW 69
30759: PUSH
30760: FOR_IN
30761: IFFALSE 30981
// begin if not i in hackTanks then
30763: LD_VAR 0 1
30767: PUSH
30768: LD_EXP 85
30772: IN
30773: NOT
30774: IFFALSE 30857
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30776: LD_ADDR_EXP 85
30780: PUSH
30781: LD_EXP 85
30785: PPUSH
30786: LD_EXP 85
30790: PUSH
30791: LD_INT 1
30793: PLUS
30794: PPUSH
30795: LD_VAR 0 1
30799: PPUSH
30800: CALL_OW 1
30804: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30805: LD_ADDR_EXP 86
30809: PUSH
30810: LD_EXP 86
30814: PPUSH
30815: LD_EXP 86
30819: PUSH
30820: LD_INT 1
30822: PLUS
30823: PPUSH
30824: EMPTY
30825: PPUSH
30826: CALL_OW 1
30830: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30831: LD_ADDR_EXP 89
30835: PUSH
30836: LD_EXP 89
30840: PPUSH
30841: LD_EXP 89
30845: PUSH
30846: LD_INT 1
30848: PLUS
30849: PPUSH
30850: EMPTY
30851: PPUSH
30852: CALL_OW 1
30856: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30857: LD_VAR 0 1
30861: PPUSH
30862: CALL_OW 302
30866: NOT
30867: IFFALSE 30880
// begin HackUnlinkAll ( i ) ;
30869: LD_VAR 0 1
30873: PPUSH
30874: CALL 30986 0 1
// continue ;
30878: GO 30760
// end ; HackCheckCapturedStatus ( i ) ;
30880: LD_VAR 0 1
30884: PPUSH
30885: CALL 31431 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30889: LD_ADDR_VAR 0 2
30893: PUSH
30894: LD_INT 81
30896: PUSH
30897: LD_VAR 0 1
30901: PPUSH
30902: CALL_OW 255
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 33
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 91
30923: PUSH
30924: LD_VAR 0 1
30928: PUSH
30929: LD_EXP 88
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 50
30941: PUSH
30942: EMPTY
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: PPUSH
30951: CALL_OW 69
30955: ST_TO_ADDR
// if not tmp then
30956: LD_VAR 0 2
30960: NOT
30961: IFFALSE 30965
// continue ;
30963: GO 30760
// HackLink ( i , tmp ) ;
30965: LD_VAR 0 1
30969: PPUSH
30970: LD_VAR 0 2
30974: PPUSH
30975: CALL 31122 0 2
// end ;
30979: GO 30760
30981: POP
30982: POP
// end ;
30983: PPOPN 2
30985: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30986: LD_INT 0
30988: PPUSH
30989: PPUSH
30990: PPUSH
// if not hack in hackTanks then
30991: LD_VAR 0 1
30995: PUSH
30996: LD_EXP 85
31000: IN
31001: NOT
31002: IFFALSE 31006
// exit ;
31004: GO 31117
// index := GetElementIndex ( hackTanks , hack ) ;
31006: LD_ADDR_VAR 0 4
31010: PUSH
31011: LD_EXP 85
31015: PPUSH
31016: LD_VAR 0 1
31020: PPUSH
31021: CALL 39585 0 2
31025: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31026: LD_EXP 86
31030: PUSH
31031: LD_VAR 0 4
31035: ARRAY
31036: IFFALSE 31117
// begin for i in hackTanksCaptured [ index ] do
31038: LD_ADDR_VAR 0 3
31042: PUSH
31043: LD_EXP 86
31047: PUSH
31048: LD_VAR 0 4
31052: ARRAY
31053: PUSH
31054: FOR_IN
31055: IFFALSE 31081
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31057: LD_VAR 0 3
31061: PUSH
31062: LD_INT 1
31064: ARRAY
31065: PPUSH
31066: LD_VAR 0 3
31070: PUSH
31071: LD_INT 2
31073: ARRAY
31074: PPUSH
31075: CALL_OW 235
31079: GO 31054
31081: POP
31082: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31083: LD_ADDR_EXP 86
31087: PUSH
31088: LD_EXP 86
31092: PPUSH
31093: LD_VAR 0 4
31097: PPUSH
31098: EMPTY
31099: PPUSH
31100: CALL_OW 1
31104: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31105: LD_VAR 0 1
31109: PPUSH
31110: LD_INT 0
31112: PPUSH
31113: CALL_OW 505
// end ; end ;
31117: LD_VAR 0 2
31121: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31122: LD_INT 0
31124: PPUSH
31125: PPUSH
31126: PPUSH
// if not hack in hackTanks or not vehicles then
31127: LD_VAR 0 1
31131: PUSH
31132: LD_EXP 85
31136: IN
31137: NOT
31138: IFTRUE 31147
31140: PUSH
31141: LD_VAR 0 2
31145: NOT
31146: OR
31147: IFFALSE 31151
// exit ;
31149: GO 31426
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31151: LD_ADDR_VAR 0 2
31155: PUSH
31156: LD_VAR 0 1
31160: PPUSH
31161: LD_VAR 0 2
31165: PPUSH
31166: LD_INT 1
31168: PPUSH
31169: LD_INT 1
31171: PPUSH
31172: CALL 40237 0 4
31176: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31177: LD_ADDR_VAR 0 5
31181: PUSH
31182: LD_EXP 85
31186: PPUSH
31187: LD_VAR 0 1
31191: PPUSH
31192: CALL 39585 0 2
31196: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31197: LD_EXP 86
31201: PUSH
31202: LD_VAR 0 5
31206: ARRAY
31207: PUSH
31208: LD_EXP 87
31212: LESS
31213: IFFALSE 31402
// begin for i := 1 to vehicles do
31215: LD_ADDR_VAR 0 4
31219: PUSH
31220: DOUBLE
31221: LD_INT 1
31223: DEC
31224: ST_TO_ADDR
31225: LD_VAR 0 2
31229: PUSH
31230: FOR_TO
31231: IFFALSE 31400
// begin if hackTanksCaptured [ index ] = hackLimit then
31233: LD_EXP 86
31237: PUSH
31238: LD_VAR 0 5
31242: ARRAY
31243: PUSH
31244: LD_EXP 87
31248: EQUAL
31249: IFFALSE 31253
// break ;
31251: GO 31400
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31253: LD_ADDR_EXP 89
31257: PUSH
31258: LD_EXP 89
31262: PPUSH
31263: LD_VAR 0 5
31267: PPUSH
31268: LD_EXP 89
31272: PUSH
31273: LD_VAR 0 5
31277: ARRAY
31278: PUSH
31279: LD_INT 1
31281: PLUS
31282: PPUSH
31283: CALL_OW 1
31287: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31288: LD_ADDR_EXP 86
31292: PUSH
31293: LD_EXP 86
31297: PPUSH
31298: LD_VAR 0 5
31302: PUSH
31303: LD_EXP 86
31307: PUSH
31308: LD_VAR 0 5
31312: ARRAY
31313: PUSH
31314: LD_INT 1
31316: PLUS
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PPUSH
31322: LD_VAR 0 2
31326: PUSH
31327: LD_VAR 0 4
31331: ARRAY
31332: PUSH
31333: LD_VAR 0 2
31337: PUSH
31338: LD_VAR 0 4
31342: ARRAY
31343: PPUSH
31344: CALL_OW 255
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PPUSH
31353: CALL 39802 0 3
31357: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31358: LD_VAR 0 2
31362: PUSH
31363: LD_VAR 0 4
31367: ARRAY
31368: PPUSH
31369: LD_VAR 0 1
31373: PPUSH
31374: CALL_OW 255
31378: PPUSH
31379: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31383: LD_VAR 0 2
31387: PUSH
31388: LD_VAR 0 4
31392: ARRAY
31393: PPUSH
31394: CALL_OW 141
// end ;
31398: GO 31230
31400: POP
31401: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31402: LD_VAR 0 1
31406: PPUSH
31407: LD_EXP 86
31411: PUSH
31412: LD_VAR 0 5
31416: ARRAY
31417: PUSH
31418: LD_INT 0
31420: PLUS
31421: PPUSH
31422: CALL_OW 505
// end ;
31426: LD_VAR 0 3
31430: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31431: LD_INT 0
31433: PPUSH
31434: PPUSH
31435: PPUSH
31436: PPUSH
// if not hack in hackTanks then
31437: LD_VAR 0 1
31441: PUSH
31442: LD_EXP 85
31446: IN
31447: NOT
31448: IFFALSE 31452
// exit ;
31450: GO 31696
// index := GetElementIndex ( hackTanks , hack ) ;
31452: LD_ADDR_VAR 0 4
31456: PUSH
31457: LD_EXP 85
31461: PPUSH
31462: LD_VAR 0 1
31466: PPUSH
31467: CALL 39585 0 2
31471: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31472: LD_ADDR_VAR 0 3
31476: PUSH
31477: DOUBLE
31478: LD_EXP 86
31482: PUSH
31483: LD_VAR 0 4
31487: ARRAY
31488: INC
31489: ST_TO_ADDR
31490: LD_INT 1
31492: PUSH
31493: FOR_DOWNTO
31494: IFFALSE 31670
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31496: LD_ADDR_VAR 0 5
31500: PUSH
31501: LD_EXP 86
31505: PUSH
31506: LD_VAR 0 4
31510: ARRAY
31511: PUSH
31512: LD_VAR 0 3
31516: ARRAY
31517: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31518: LD_VAR 0 5
31522: PUSH
31523: LD_INT 1
31525: ARRAY
31526: PPUSH
31527: CALL_OW 302
31531: NOT
31532: IFTRUE 31560
31534: PUSH
31535: LD_VAR 0 5
31539: PUSH
31540: LD_INT 1
31542: ARRAY
31543: PPUSH
31544: CALL_OW 255
31548: PUSH
31549: LD_VAR 0 1
31553: PPUSH
31554: CALL_OW 255
31558: NONEQUAL
31559: OR
31560: IFFALSE 31668
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31562: LD_VAR 0 5
31566: PUSH
31567: LD_INT 1
31569: ARRAY
31570: PPUSH
31571: CALL_OW 305
31575: IFFALSE 31603
31577: PUSH
31578: LD_VAR 0 5
31582: PUSH
31583: LD_INT 1
31585: ARRAY
31586: PPUSH
31587: CALL_OW 255
31591: PUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: CALL_OW 255
31601: EQUAL
31602: AND
31603: IFFALSE 31627
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31605: LD_VAR 0 5
31609: PUSH
31610: LD_INT 1
31612: ARRAY
31613: PPUSH
31614: LD_VAR 0 5
31618: PUSH
31619: LD_INT 2
31621: ARRAY
31622: PPUSH
31623: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31627: LD_ADDR_EXP 86
31631: PUSH
31632: LD_EXP 86
31636: PPUSH
31637: LD_VAR 0 4
31641: PPUSH
31642: LD_EXP 86
31646: PUSH
31647: LD_VAR 0 4
31651: ARRAY
31652: PPUSH
31653: LD_VAR 0 3
31657: PPUSH
31658: CALL_OW 3
31662: PPUSH
31663: CALL_OW 1
31667: ST_TO_ADDR
// end ; end ;
31668: GO 31493
31670: POP
31671: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31672: LD_VAR 0 1
31676: PPUSH
31677: LD_EXP 86
31681: PUSH
31682: LD_VAR 0 4
31686: ARRAY
31687: PUSH
31688: LD_INT 0
31690: PLUS
31691: PPUSH
31692: CALL_OW 505
// end ;
31696: LD_VAR 0 2
31700: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31701: LD_INT 0
31703: PPUSH
31704: PPUSH
31705: PPUSH
31706: PPUSH
// if not hack in hackTanks then
31707: LD_VAR 0 1
31711: PUSH
31712: LD_EXP 85
31716: IN
31717: NOT
31718: IFFALSE 31722
// exit ;
31720: GO 31807
// index := GetElementIndex ( hackTanks , hack ) ;
31722: LD_ADDR_VAR 0 5
31726: PUSH
31727: LD_EXP 85
31731: PPUSH
31732: LD_VAR 0 1
31736: PPUSH
31737: CALL 39585 0 2
31741: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31742: LD_ADDR_VAR 0 4
31746: PUSH
31747: DOUBLE
31748: LD_INT 1
31750: DEC
31751: ST_TO_ADDR
31752: LD_EXP 86
31756: PUSH
31757: LD_VAR 0 5
31761: ARRAY
31762: PUSH
31763: FOR_TO
31764: IFFALSE 31805
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31766: LD_EXP 86
31770: PUSH
31771: LD_VAR 0 5
31775: ARRAY
31776: PUSH
31777: LD_VAR 0 4
31781: ARRAY
31782: PUSH
31783: LD_INT 1
31785: ARRAY
31786: PUSH
31787: LD_VAR 0 2
31791: EQUAL
31792: IFFALSE 31803
// KillUnit ( vehicle ) ;
31794: LD_VAR 0 2
31798: PPUSH
31799: CALL_OW 66
31803: GO 31763
31805: POP
31806: POP
// end ;
31807: LD_VAR 0 3
31811: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31812: LD_EXP 90
31816: NOT
31817: IFFALSE 31852
31819: GO 31821
31821: DISABLE
// begin initMiner := true ;
31822: LD_ADDR_EXP 90
31826: PUSH
31827: LD_INT 1
31829: ST_TO_ADDR
// minersList := [ ] ;
31830: LD_ADDR_EXP 91
31834: PUSH
31835: EMPTY
31836: ST_TO_ADDR
// minerMinesList := [ ] ;
31837: LD_ADDR_EXP 92
31841: PUSH
31842: EMPTY
31843: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31844: LD_ADDR_EXP 93
31848: PUSH
31849: LD_INT 5
31851: ST_TO_ADDR
// end ;
31852: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31853: LD_EXP 90
31857: IFFALSE 31875
31859: PUSH
31860: LD_INT 34
31862: PUSH
31863: LD_INT 81
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PPUSH
31870: CALL_OW 69
31874: AND
31875: IFFALSE 32338
31877: GO 31879
31879: DISABLE
31880: LD_INT 0
31882: PPUSH
31883: PPUSH
31884: PPUSH
31885: PPUSH
// begin enable ;
31886: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31887: LD_ADDR_VAR 0 1
31891: PUSH
31892: LD_INT 34
31894: PUSH
31895: LD_INT 81
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PPUSH
31902: CALL_OW 69
31906: PUSH
31907: FOR_IN
31908: IFFALSE 31980
// begin if not i in minersList then
31910: LD_VAR 0 1
31914: PUSH
31915: LD_EXP 91
31919: IN
31920: NOT
31921: IFFALSE 31978
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31923: LD_ADDR_EXP 91
31927: PUSH
31928: LD_EXP 91
31932: PPUSH
31933: LD_EXP 91
31937: PUSH
31938: LD_INT 1
31940: PLUS
31941: PPUSH
31942: LD_VAR 0 1
31946: PPUSH
31947: CALL_OW 1
31951: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31952: LD_ADDR_EXP 92
31956: PUSH
31957: LD_EXP 92
31961: PPUSH
31962: LD_EXP 92
31966: PUSH
31967: LD_INT 1
31969: PLUS
31970: PPUSH
31971: EMPTY
31972: PPUSH
31973: CALL_OW 1
31977: ST_TO_ADDR
// end end ;
31978: GO 31907
31980: POP
31981: POP
// for i := minerMinesList downto 1 do
31982: LD_ADDR_VAR 0 1
31986: PUSH
31987: DOUBLE
31988: LD_EXP 92
31992: INC
31993: ST_TO_ADDR
31994: LD_INT 1
31996: PUSH
31997: FOR_DOWNTO
31998: IFFALSE 32336
// begin if IsLive ( minersList [ i ] ) then
32000: LD_EXP 91
32004: PUSH
32005: LD_VAR 0 1
32009: ARRAY
32010: PPUSH
32011: CALL_OW 300
32015: IFFALSE 32043
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32017: LD_EXP 91
32021: PUSH
32022: LD_VAR 0 1
32026: ARRAY
32027: PPUSH
32028: LD_EXP 92
32032: PUSH
32033: LD_VAR 0 1
32037: ARRAY
32038: PPUSH
32039: CALL_OW 505
// if not minerMinesList [ i ] then
32043: LD_EXP 92
32047: PUSH
32048: LD_VAR 0 1
32052: ARRAY
32053: NOT
32054: IFFALSE 32058
// continue ;
32056: GO 31997
// for j := minerMinesList [ i ] downto 1 do
32058: LD_ADDR_VAR 0 2
32062: PUSH
32063: DOUBLE
32064: LD_EXP 92
32068: PUSH
32069: LD_VAR 0 1
32073: ARRAY
32074: INC
32075: ST_TO_ADDR
32076: LD_INT 1
32078: PUSH
32079: FOR_DOWNTO
32080: IFFALSE 32332
// begin side := GetSide ( minersList [ i ] ) ;
32082: LD_ADDR_VAR 0 3
32086: PUSH
32087: LD_EXP 91
32091: PUSH
32092: LD_VAR 0 1
32096: ARRAY
32097: PPUSH
32098: CALL_OW 255
32102: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32103: LD_ADDR_VAR 0 4
32107: PUSH
32108: LD_EXP 92
32112: PUSH
32113: LD_VAR 0 1
32117: ARRAY
32118: PUSH
32119: LD_VAR 0 2
32123: ARRAY
32124: PUSH
32125: LD_INT 1
32127: ARRAY
32128: PPUSH
32129: LD_EXP 92
32133: PUSH
32134: LD_VAR 0 1
32138: ARRAY
32139: PUSH
32140: LD_VAR 0 2
32144: ARRAY
32145: PUSH
32146: LD_INT 2
32148: ARRAY
32149: PPUSH
32150: CALL_OW 428
32154: ST_TO_ADDR
// if not tmp then
32155: LD_VAR 0 4
32159: NOT
32160: IFFALSE 32164
// continue ;
32162: GO 32079
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32164: LD_VAR 0 4
32168: PUSH
32169: LD_INT 81
32171: PUSH
32172: LD_VAR 0 3
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PPUSH
32181: CALL_OW 69
32185: IN
32186: IFFALSE 32236
32188: PUSH
32189: LD_EXP 92
32193: PUSH
32194: LD_VAR 0 1
32198: ARRAY
32199: PUSH
32200: LD_VAR 0 2
32204: ARRAY
32205: PUSH
32206: LD_INT 1
32208: ARRAY
32209: PPUSH
32210: LD_EXP 92
32214: PUSH
32215: LD_VAR 0 1
32219: ARRAY
32220: PUSH
32221: LD_VAR 0 2
32225: ARRAY
32226: PUSH
32227: LD_INT 2
32229: ARRAY
32230: PPUSH
32231: CALL_OW 458
32235: AND
32236: IFFALSE 32330
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32238: LD_EXP 92
32242: PUSH
32243: LD_VAR 0 1
32247: ARRAY
32248: PUSH
32249: LD_VAR 0 2
32253: ARRAY
32254: PUSH
32255: LD_INT 1
32257: ARRAY
32258: PPUSH
32259: LD_EXP 92
32263: PUSH
32264: LD_VAR 0 1
32268: ARRAY
32269: PUSH
32270: LD_VAR 0 2
32274: ARRAY
32275: PUSH
32276: LD_INT 2
32278: ARRAY
32279: PPUSH
32280: LD_VAR 0 3
32284: PPUSH
32285: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32289: LD_ADDR_EXP 92
32293: PUSH
32294: LD_EXP 92
32298: PPUSH
32299: LD_VAR 0 1
32303: PPUSH
32304: LD_EXP 92
32308: PUSH
32309: LD_VAR 0 1
32313: ARRAY
32314: PPUSH
32315: LD_VAR 0 2
32319: PPUSH
32320: CALL_OW 3
32324: PPUSH
32325: CALL_OW 1
32329: ST_TO_ADDR
// end ; end ;
32330: GO 32079
32332: POP
32333: POP
// end ;
32334: GO 31997
32336: POP
32337: POP
// end ;
32338: PPOPN 4
32340: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32341: LD_INT 0
32343: PPUSH
32344: PPUSH
// result := false ;
32345: LD_ADDR_VAR 0 4
32349: PUSH
32350: LD_INT 0
32352: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32353: LD_VAR 0 1
32357: PPUSH
32358: CALL_OW 264
32362: PUSH
32363: LD_INT 81
32365: EQUAL
32366: NOT
32367: IFFALSE 32371
// exit ;
32369: GO 32615
// index := GetElementIndex ( minersList , unit ) ;
32371: LD_ADDR_VAR 0 5
32375: PUSH
32376: LD_EXP 91
32380: PPUSH
32381: LD_VAR 0 1
32385: PPUSH
32386: CALL 39585 0 2
32390: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32391: LD_EXP 92
32395: PUSH
32396: LD_VAR 0 5
32400: ARRAY
32401: PUSH
32402: LD_EXP 93
32406: GREATEREQUAL
32407: IFFALSE 32411
// exit ;
32409: GO 32615
// ComMoveXY ( unit , x , y ) ;
32411: LD_VAR 0 1
32415: PPUSH
32416: LD_VAR 0 2
32420: PPUSH
32421: LD_VAR 0 3
32425: PPUSH
32426: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32430: LD_INT 35
32432: PPUSH
32433: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32437: LD_VAR 0 1
32441: PPUSH
32442: LD_VAR 0 2
32446: PPUSH
32447: LD_VAR 0 3
32451: PPUSH
32452: CALL 71631 0 3
32456: NOT
32457: IFFALSE 32470
32459: PUSH
32460: LD_VAR 0 1
32464: PPUSH
32465: CALL_OW 314
32469: AND
32470: IFFALSE 32474
// exit ;
32472: GO 32615
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32474: LD_VAR 0 2
32478: PPUSH
32479: LD_VAR 0 3
32483: PPUSH
32484: CALL_OW 428
32488: PUSH
32489: LD_VAR 0 1
32493: EQUAL
32494: IFFALSE 32508
32496: PUSH
32497: LD_VAR 0 1
32501: PPUSH
32502: CALL_OW 314
32506: NOT
32507: AND
32508: IFFALSE 32430
// PlaySoundXY ( x , y , PlantMine ) ;
32510: LD_VAR 0 2
32514: PPUSH
32515: LD_VAR 0 3
32519: PPUSH
32520: LD_STRING PlantMine
32522: PPUSH
32523: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32527: LD_VAR 0 2
32531: PPUSH
32532: LD_VAR 0 3
32536: PPUSH
32537: LD_VAR 0 1
32541: PPUSH
32542: CALL_OW 255
32546: PPUSH
32547: LD_INT 0
32549: PPUSH
32550: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32554: LD_ADDR_EXP 92
32558: PUSH
32559: LD_EXP 92
32563: PPUSH
32564: LD_VAR 0 5
32568: PUSH
32569: LD_EXP 92
32573: PUSH
32574: LD_VAR 0 5
32578: ARRAY
32579: PUSH
32580: LD_INT 1
32582: PLUS
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PPUSH
32588: LD_VAR 0 2
32592: PUSH
32593: LD_VAR 0 3
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PPUSH
32602: CALL 39802 0 3
32606: ST_TO_ADDR
// result := true ;
32607: LD_ADDR_VAR 0 4
32611: PUSH
32612: LD_INT 1
32614: ST_TO_ADDR
// end ;
32615: LD_VAR 0 4
32619: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32620: LD_INT 0
32622: PPUSH
32623: PPUSH
32624: PPUSH
// if not unit in minersList then
32625: LD_VAR 0 1
32629: PUSH
32630: LD_EXP 91
32634: IN
32635: NOT
32636: IFFALSE 32640
// exit ;
32638: GO 33034
// index := GetElementIndex ( minersList , unit ) ;
32640: LD_ADDR_VAR 0 6
32644: PUSH
32645: LD_EXP 91
32649: PPUSH
32650: LD_VAR 0 1
32654: PPUSH
32655: CALL 39585 0 2
32659: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32660: LD_ADDR_VAR 0 5
32664: PUSH
32665: DOUBLE
32666: LD_EXP 92
32670: PUSH
32671: LD_VAR 0 6
32675: ARRAY
32676: INC
32677: ST_TO_ADDR
32678: LD_INT 1
32680: PUSH
32681: FOR_DOWNTO
32682: IFFALSE 32845
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32684: LD_EXP 92
32688: PUSH
32689: LD_VAR 0 6
32693: ARRAY
32694: PUSH
32695: LD_VAR 0 5
32699: ARRAY
32700: PUSH
32701: LD_INT 1
32703: ARRAY
32704: PUSH
32705: LD_VAR 0 2
32709: EQUAL
32710: IFFALSE 32740
32712: PUSH
32713: LD_EXP 92
32717: PUSH
32718: LD_VAR 0 6
32722: ARRAY
32723: PUSH
32724: LD_VAR 0 5
32728: ARRAY
32729: PUSH
32730: LD_INT 2
32732: ARRAY
32733: PUSH
32734: LD_VAR 0 3
32738: EQUAL
32739: AND
32740: IFFALSE 32843
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32742: LD_EXP 92
32746: PUSH
32747: LD_VAR 0 6
32751: ARRAY
32752: PUSH
32753: LD_VAR 0 5
32757: ARRAY
32758: PUSH
32759: LD_INT 1
32761: ARRAY
32762: PPUSH
32763: LD_EXP 92
32767: PUSH
32768: LD_VAR 0 6
32772: ARRAY
32773: PUSH
32774: LD_VAR 0 5
32778: ARRAY
32779: PUSH
32780: LD_INT 2
32782: ARRAY
32783: PPUSH
32784: LD_VAR 0 1
32788: PPUSH
32789: CALL_OW 255
32793: PPUSH
32794: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32798: LD_ADDR_EXP 92
32802: PUSH
32803: LD_EXP 92
32807: PPUSH
32808: LD_VAR 0 6
32812: PPUSH
32813: LD_EXP 92
32817: PUSH
32818: LD_VAR 0 6
32822: ARRAY
32823: PPUSH
32824: LD_VAR 0 5
32828: PPUSH
32829: CALL_OW 3
32833: PPUSH
32834: CALL_OW 1
32838: ST_TO_ADDR
// exit ;
32839: POP
32840: POP
32841: GO 33034
// end ; end ;
32843: GO 32681
32845: POP
32846: POP
// for i := minerMinesList [ index ] downto 1 do
32847: LD_ADDR_VAR 0 5
32851: PUSH
32852: DOUBLE
32853: LD_EXP 92
32857: PUSH
32858: LD_VAR 0 6
32862: ARRAY
32863: INC
32864: ST_TO_ADDR
32865: LD_INT 1
32867: PUSH
32868: FOR_DOWNTO
32869: IFFALSE 33032
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32871: LD_EXP 92
32875: PUSH
32876: LD_VAR 0 6
32880: ARRAY
32881: PUSH
32882: LD_VAR 0 5
32886: ARRAY
32887: PUSH
32888: LD_INT 1
32890: ARRAY
32891: PPUSH
32892: LD_EXP 92
32896: PUSH
32897: LD_VAR 0 6
32901: ARRAY
32902: PUSH
32903: LD_VAR 0 5
32907: ARRAY
32908: PUSH
32909: LD_INT 2
32911: ARRAY
32912: PPUSH
32913: LD_VAR 0 2
32917: PPUSH
32918: LD_VAR 0 3
32922: PPUSH
32923: CALL_OW 298
32927: PUSH
32928: LD_INT 6
32930: LESS
32931: IFFALSE 33030
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32933: LD_EXP 92
32937: PUSH
32938: LD_VAR 0 6
32942: ARRAY
32943: PUSH
32944: LD_VAR 0 5
32948: ARRAY
32949: PUSH
32950: LD_INT 1
32952: ARRAY
32953: PPUSH
32954: LD_EXP 92
32958: PUSH
32959: LD_VAR 0 6
32963: ARRAY
32964: PUSH
32965: LD_VAR 0 5
32969: ARRAY
32970: PUSH
32971: LD_INT 2
32973: ARRAY
32974: PPUSH
32975: LD_VAR 0 1
32979: PPUSH
32980: CALL_OW 255
32984: PPUSH
32985: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32989: LD_ADDR_EXP 92
32993: PUSH
32994: LD_EXP 92
32998: PPUSH
32999: LD_VAR 0 6
33003: PPUSH
33004: LD_EXP 92
33008: PUSH
33009: LD_VAR 0 6
33013: ARRAY
33014: PPUSH
33015: LD_VAR 0 5
33019: PPUSH
33020: CALL_OW 3
33024: PPUSH
33025: CALL_OW 1
33029: ST_TO_ADDR
// end ; end ;
33030: GO 32868
33032: POP
33033: POP
// end ;
33034: LD_VAR 0 4
33038: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33039: LD_INT 0
33041: PPUSH
33042: PPUSH
33043: PPUSH
33044: PPUSH
33045: PPUSH
33046: PPUSH
33047: PPUSH
33048: PPUSH
33049: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33050: LD_VAR 0 1
33054: PPUSH
33055: CALL_OW 264
33059: PUSH
33060: LD_INT 81
33062: EQUAL
33063: NOT
33064: IFTRUE 33079
33066: PUSH
33067: LD_VAR 0 1
33071: PUSH
33072: LD_EXP 91
33076: IN
33077: NOT
33078: OR
33079: IFFALSE 33083
// exit ;
33081: GO 33409
// index := GetElementIndex ( minersList , unit ) ;
33083: LD_ADDR_VAR 0 6
33087: PUSH
33088: LD_EXP 91
33092: PPUSH
33093: LD_VAR 0 1
33097: PPUSH
33098: CALL 39585 0 2
33102: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33103: LD_ADDR_VAR 0 8
33107: PUSH
33108: LD_EXP 93
33112: PUSH
33113: LD_EXP 92
33117: PUSH
33118: LD_VAR 0 6
33122: ARRAY
33123: MINUS
33124: ST_TO_ADDR
// if not minesFreeAmount then
33125: LD_VAR 0 8
33129: NOT
33130: IFFALSE 33134
// exit ;
33132: GO 33409
// tmp := [ ] ;
33134: LD_ADDR_VAR 0 7
33138: PUSH
33139: EMPTY
33140: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33141: LD_ADDR_VAR 0 5
33145: PUSH
33146: DOUBLE
33147: LD_INT 1
33149: DEC
33150: ST_TO_ADDR
33151: LD_VAR 0 8
33155: PUSH
33156: FOR_TO
33157: IFFALSE 33356
// begin _d := rand ( 0 , 5 ) ;
33159: LD_ADDR_VAR 0 11
33163: PUSH
33164: LD_INT 0
33166: PPUSH
33167: LD_INT 5
33169: PPUSH
33170: CALL_OW 12
33174: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33175: LD_ADDR_VAR 0 12
33179: PUSH
33180: LD_INT 2
33182: PPUSH
33183: LD_INT 6
33185: PPUSH
33186: CALL_OW 12
33190: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33191: LD_ADDR_VAR 0 9
33195: PUSH
33196: LD_VAR 0 2
33200: PPUSH
33201: LD_VAR 0 11
33205: PPUSH
33206: LD_VAR 0 12
33210: PPUSH
33211: CALL_OW 272
33215: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33216: LD_ADDR_VAR 0 10
33220: PUSH
33221: LD_VAR 0 3
33225: PPUSH
33226: LD_VAR 0 11
33230: PPUSH
33231: LD_VAR 0 12
33235: PPUSH
33236: CALL_OW 273
33240: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33241: LD_VAR 0 9
33245: PPUSH
33246: LD_VAR 0 10
33250: PPUSH
33251: CALL_OW 488
33255: IFFALSE 33279
33257: PUSH
33258: LD_VAR 0 9
33262: PUSH
33263: LD_VAR 0 10
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_VAR 0 7
33276: IN
33277: NOT
33278: AND
33279: IFFALSE 33298
33281: PUSH
33282: LD_VAR 0 9
33286: PPUSH
33287: LD_VAR 0 10
33291: PPUSH
33292: CALL_OW 458
33296: NOT
33297: AND
33298: IFFALSE 33340
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33300: LD_ADDR_VAR 0 7
33304: PUSH
33305: LD_VAR 0 7
33309: PPUSH
33310: LD_VAR 0 7
33314: PUSH
33315: LD_INT 1
33317: PLUS
33318: PPUSH
33319: LD_VAR 0 9
33323: PUSH
33324: LD_VAR 0 10
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PPUSH
33333: CALL_OW 1
33337: ST_TO_ADDR
33338: GO 33354
// i := i - 1 ;
33340: LD_ADDR_VAR 0 5
33344: PUSH
33345: LD_VAR 0 5
33349: PUSH
33350: LD_INT 1
33352: MINUS
33353: ST_TO_ADDR
// end ;
33354: GO 33156
33356: POP
33357: POP
// for i in tmp do
33358: LD_ADDR_VAR 0 5
33362: PUSH
33363: LD_VAR 0 7
33367: PUSH
33368: FOR_IN
33369: IFFALSE 33407
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33371: LD_VAR 0 1
33375: PPUSH
33376: LD_VAR 0 5
33380: PUSH
33381: LD_INT 1
33383: ARRAY
33384: PPUSH
33385: LD_VAR 0 5
33389: PUSH
33390: LD_INT 2
33392: ARRAY
33393: PPUSH
33394: CALL 32341 0 3
33398: NOT
33399: IFFALSE 33405
// exit ;
33401: POP
33402: POP
33403: GO 33409
33405: GO 33368
33407: POP
33408: POP
// end ;
33409: LD_VAR 0 4
33413: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
33414: LD_INT 0
33416: PPUSH
33417: PPUSH
33418: PPUSH
33419: PPUSH
33420: PPUSH
33421: PPUSH
33422: PPUSH
33423: PPUSH
33424: PPUSH
// if GetClass ( unit ) <> class_sniper then
33425: LD_VAR 0 1
33429: PPUSH
33430: CALL_OW 257
33434: PUSH
33435: LD_INT 5
33437: NONEQUAL
33438: IFFALSE 33442
// exit ;
33440: GO 33912
// dist := 8 ;
33442: LD_ADDR_VAR 0 5
33446: PUSH
33447: LD_INT 8
33449: ST_TO_ADDR
// viewRange := 12 ;
33450: LD_ADDR_VAR 0 8
33454: PUSH
33455: LD_INT 12
33457: ST_TO_ADDR
// side := GetSide ( unit ) ;
33458: LD_ADDR_VAR 0 6
33462: PUSH
33463: LD_VAR 0 1
33467: PPUSH
33468: CALL_OW 255
33472: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33473: LD_INT 61
33475: PPUSH
33476: LD_VAR 0 6
33480: PPUSH
33481: CALL_OW 321
33485: PUSH
33486: LD_INT 2
33488: EQUAL
33489: IFFALSE 33499
// viewRange := 16 ;
33491: LD_ADDR_VAR 0 8
33495: PUSH
33496: LD_INT 16
33498: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33499: LD_VAR 0 1
33503: PPUSH
33504: LD_VAR 0 2
33508: PPUSH
33509: LD_VAR 0 3
33513: PPUSH
33514: CALL_OW 297
33518: PUSH
33519: LD_VAR 0 5
33523: GREATER
33524: IFFALSE 33603
// begin ComMoveXY ( unit , x , y ) ;
33526: LD_VAR 0 1
33530: PPUSH
33531: LD_VAR 0 2
33535: PPUSH
33536: LD_VAR 0 3
33540: PPUSH
33541: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33545: LD_INT 35
33547: PPUSH
33548: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33552: LD_VAR 0 1
33556: PPUSH
33557: LD_VAR 0 2
33561: PPUSH
33562: LD_VAR 0 3
33566: PPUSH
33567: CALL 71631 0 3
33571: NOT
33572: IFFALSE 33576
// exit ;
33574: GO 33912
// until GetDistUnitXY ( unit , x , y ) < dist ;
33576: LD_VAR 0 1
33580: PPUSH
33581: LD_VAR 0 2
33585: PPUSH
33586: LD_VAR 0 3
33590: PPUSH
33591: CALL_OW 297
33595: PUSH
33596: LD_VAR 0 5
33600: LESS
33601: IFFALSE 33545
// end ; ComTurnXY ( unit , x , y ) ;
33603: LD_VAR 0 1
33607: PPUSH
33608: LD_VAR 0 2
33612: PPUSH
33613: LD_VAR 0 3
33617: PPUSH
33618: CALL_OW 118
// repeat if Multiplayer then
33622: LD_OWVAR 4
33626: IFFALSE 33637
// wait ( 35 ) else
33628: LD_INT 35
33630: PPUSH
33631: CALL_OW 67
33635: GO 33644
// wait ( 5 ) ;
33637: LD_INT 5
33639: PPUSH
33640: CALL_OW 67
// _d := GetDir ( unit ) ;
33644: LD_ADDR_VAR 0 11
33648: PUSH
33649: LD_VAR 0 1
33653: PPUSH
33654: CALL_OW 254
33658: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
33659: LD_ADDR_VAR 0 7
33663: PUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: CALL_OW 250
33673: PPUSH
33674: LD_VAR 0 1
33678: PPUSH
33679: CALL_OW 251
33683: PPUSH
33684: LD_VAR 0 2
33688: PPUSH
33689: LD_VAR 0 3
33693: PPUSH
33694: CALL 74267 0 4
33698: ST_TO_ADDR
// until dir = _d ;
33699: LD_VAR 0 7
33703: PUSH
33704: LD_VAR 0 11
33708: EQUAL
33709: IFFALSE 33622
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
33711: LD_ADDR_VAR 0 9
33715: PUSH
33716: LD_VAR 0 1
33720: PPUSH
33721: CALL_OW 250
33725: PPUSH
33726: LD_VAR 0 7
33730: PPUSH
33731: LD_VAR 0 5
33735: PPUSH
33736: CALL_OW 272
33740: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
33741: LD_ADDR_VAR 0 10
33745: PUSH
33746: LD_VAR 0 1
33750: PPUSH
33751: CALL_OW 251
33755: PPUSH
33756: LD_VAR 0 7
33760: PPUSH
33761: LD_VAR 0 5
33765: PPUSH
33766: CALL_OW 273
33770: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33771: LD_VAR 0 9
33775: PPUSH
33776: LD_VAR 0 10
33780: PPUSH
33781: CALL_OW 488
33785: NOT
33786: IFFALSE 33790
// exit ;
33788: GO 33912
// ComAnimCustom ( unit , 1 ) ;
33790: LD_VAR 0 1
33794: PPUSH
33795: LD_INT 1
33797: PPUSH
33798: CALL_OW 592
// p := 0 ;
33802: LD_ADDR_VAR 0 12
33806: PUSH
33807: LD_INT 0
33809: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33810: LD_VAR 0 9
33814: PPUSH
33815: LD_VAR 0 10
33819: PPUSH
33820: LD_VAR 0 6
33824: PPUSH
33825: LD_VAR 0 8
33829: PPUSH
33830: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
33834: LD_INT 35
33836: PPUSH
33837: CALL_OW 67
// p := Inc ( p ) ;
33841: LD_ADDR_VAR 0 12
33845: PUSH
33846: LD_VAR 0 12
33850: PPUSH
33851: CALL 74223 0 1
33855: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
33856: LD_VAR 0 12
33860: PUSH
33861: LD_INT 3
33863: EQUAL
33864: IFTRUE 33878
33866: PUSH
33867: LD_VAR 0 1
33871: PPUSH
33872: CALL_OW 302
33876: NOT
33877: OR
33878: IFTRUE 33891
33880: PUSH
33881: LD_VAR 0 1
33885: PPUSH
33886: CALL_OW 301
33890: OR
33891: IFFALSE 33834
// RemoveSeeing ( _x , _y , side ) ;
33893: LD_VAR 0 9
33897: PPUSH
33898: LD_VAR 0 10
33902: PPUSH
33903: LD_VAR 0 6
33907: PPUSH
33908: CALL_OW 331
// end ;
33912: LD_VAR 0 4
33916: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
33917: LD_INT 0
33919: PPUSH
33920: PPUSH
33921: PPUSH
33922: PPUSH
33923: PPUSH
33924: PPUSH
33925: PPUSH
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
// if not unit then
33930: LD_VAR 0 1
33934: NOT
33935: IFFALSE 33939
// exit ;
33937: GO 34210
// side := GetSide ( unit ) ;
33939: LD_ADDR_VAR 0 3
33943: PUSH
33944: LD_VAR 0 1
33948: PPUSH
33949: CALL_OW 255
33953: ST_TO_ADDR
// x := GetX ( unit ) ;
33954: LD_ADDR_VAR 0 5
33958: PUSH
33959: LD_VAR 0 1
33963: PPUSH
33964: CALL_OW 250
33968: ST_TO_ADDR
// y := GetY ( unit ) ;
33969: LD_ADDR_VAR 0 6
33973: PUSH
33974: LD_VAR 0 1
33978: PPUSH
33979: CALL_OW 251
33983: ST_TO_ADDR
// r := 8 ;
33984: LD_ADDR_VAR 0 4
33988: PUSH
33989: LD_INT 8
33991: ST_TO_ADDR
// if x - r < 0 then
33992: LD_VAR 0 5
33996: PUSH
33997: LD_VAR 0 4
34001: MINUS
34002: PUSH
34003: LD_INT 0
34005: LESS
34006: IFFALSE 34018
// min_x := 0 else
34008: LD_ADDR_VAR 0 7
34012: PUSH
34013: LD_INT 0
34015: ST_TO_ADDR
34016: GO 34034
// min_x := x - r ;
34018: LD_ADDR_VAR 0 7
34022: PUSH
34023: LD_VAR 0 5
34027: PUSH
34028: LD_VAR 0 4
34032: MINUS
34033: ST_TO_ADDR
// if y - r < 0 then
34034: LD_VAR 0 6
34038: PUSH
34039: LD_VAR 0 4
34043: MINUS
34044: PUSH
34045: LD_INT 0
34047: LESS
34048: IFFALSE 34060
// min_y := 0 else
34050: LD_ADDR_VAR 0 8
34054: PUSH
34055: LD_INT 0
34057: ST_TO_ADDR
34058: GO 34076
// min_y := y - r ;
34060: LD_ADDR_VAR 0 8
34064: PUSH
34065: LD_VAR 0 6
34069: PUSH
34070: LD_VAR 0 4
34074: MINUS
34075: ST_TO_ADDR
// max_x := x + r ;
34076: LD_ADDR_VAR 0 9
34080: PUSH
34081: LD_VAR 0 5
34085: PUSH
34086: LD_VAR 0 4
34090: PLUS
34091: ST_TO_ADDR
// max_y := y + r ;
34092: LD_ADDR_VAR 0 10
34096: PUSH
34097: LD_VAR 0 6
34101: PUSH
34102: LD_VAR 0 4
34106: PLUS
34107: ST_TO_ADDR
// for _x = min_x to max_x do
34108: LD_ADDR_VAR 0 11
34112: PUSH
34113: DOUBLE
34114: LD_VAR 0 7
34118: DEC
34119: ST_TO_ADDR
34120: LD_VAR 0 9
34124: PUSH
34125: FOR_TO
34126: IFFALSE 34208
// for _y = min_y to max_y do
34128: LD_ADDR_VAR 0 12
34132: PUSH
34133: DOUBLE
34134: LD_VAR 0 8
34138: DEC
34139: ST_TO_ADDR
34140: LD_VAR 0 10
34144: PUSH
34145: FOR_TO
34146: IFFALSE 34204
// begin if not ValidHex ( _x , _y ) then
34148: LD_VAR 0 11
34152: PPUSH
34153: LD_VAR 0 12
34157: PPUSH
34158: CALL_OW 488
34162: NOT
34163: IFFALSE 34167
// continue ;
34165: GO 34145
// if MineAtPos ( _x , _y ) then
34167: LD_VAR 0 11
34171: PPUSH
34172: LD_VAR 0 12
34176: PPUSH
34177: CALL_OW 458
34181: IFFALSE 34202
// ViewMineAtPos ( _x , _y , side ) ;
34183: LD_VAR 0 11
34187: PPUSH
34188: LD_VAR 0 12
34192: PPUSH
34193: LD_VAR 0 3
34197: PPUSH
34198: CALL_OW 457
// end ;
34202: GO 34145
34204: POP
34205: POP
34206: GO 34125
34208: POP
34209: POP
// end ;
34210: LD_VAR 0 2
34214: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
34215: LD_INT 0
34217: PPUSH
34218: PPUSH
34219: PPUSH
34220: PPUSH
34221: PPUSH
34222: PPUSH
// if not units then
34223: LD_VAR 0 1
34227: NOT
34228: IFFALSE 34232
// exit ;
34230: GO 34662
// scaners := [ ] ;
34232: LD_ADDR_VAR 0 6
34236: PUSH
34237: EMPTY
34238: ST_TO_ADDR
// for i in units do
34239: LD_ADDR_VAR 0 3
34243: PUSH
34244: LD_VAR 0 1
34248: PUSH
34249: FOR_IN
34250: IFFALSE 34407
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
34252: LD_VAR 0 3
34256: PPUSH
34257: CALL_OW 264
34261: PUSH
34262: LD_INT 11
34264: NONEQUAL
34265: IFTRUE 34279
34267: PUSH
34268: LD_VAR 0 3
34272: PPUSH
34273: CALL_OW 302
34277: NOT
34278: OR
34279: IFTRUE 34296
34281: PUSH
34282: LD_VAR 0 3
34286: PPUSH
34287: CALL_OW 110
34291: PUSH
34292: LD_INT 502
34294: EQUAL
34295: OR
34296: IFFALSE 34300
// continue ;
34298: GO 34249
// ComStop ( i ) ;
34300: LD_VAR 0 3
34304: PPUSH
34305: CALL_OW 141
// x := GetX ( i ) ;
34309: LD_ADDR_VAR 0 4
34313: PUSH
34314: LD_VAR 0 3
34318: PPUSH
34319: CALL_OW 250
34323: ST_TO_ADDR
// y := GetY ( i ) ;
34324: LD_ADDR_VAR 0 5
34328: PUSH
34329: LD_VAR 0 3
34333: PPUSH
34334: CALL_OW 251
34338: ST_TO_ADDR
// if GetSide ( i ) = your_side then
34339: LD_VAR 0 3
34343: PPUSH
34344: CALL_OW 255
34348: PUSH
34349: LD_OWVAR 2
34353: EQUAL
34354: IFFALSE 34373
// PlaySoundXY ( x , y , mineDetector ) ;
34356: LD_VAR 0 4
34360: PPUSH
34361: LD_VAR 0 5
34365: PPUSH
34366: LD_STRING mineDetector
34368: PPUSH
34369: CALL_OW 366
// scaners := Join ( scaners , i ) ;
34373: LD_ADDR_VAR 0 6
34377: PUSH
34378: LD_VAR 0 6
34382: PPUSH
34383: LD_VAR 0 3
34387: PPUSH
34388: CALL 72850 0 2
34392: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
34393: LD_VAR 0 3
34397: PPUSH
34398: LD_INT 502
34400: PPUSH
34401: CALL_OW 109
// end ;
34405: GO 34249
34407: POP
34408: POP
// if not scaners then
34409: LD_VAR 0 6
34413: NOT
34414: IFFALSE 34418
// exit ;
34416: GO 34662
// wait ( 3 ) ;
34418: LD_INT 3
34420: PPUSH
34421: CALL_OW 67
// timer := 6 ;
34425: LD_ADDR_VAR 0 7
34429: PUSH
34430: LD_INT 6
34432: ST_TO_ADDR
// repeat for i in scaners do
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: LD_VAR 0 6
34442: PUSH
34443: FOR_IN
34444: IFFALSE 34560
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
34446: LD_VAR 0 3
34450: PPUSH
34451: CALL_OW 302
34455: NOT
34456: IFTRUE 34469
34458: PUSH
34459: LD_VAR 0 3
34463: PPUSH
34464: CALL_OW 314
34468: OR
34469: IFTRUE 34500
34471: PUSH
34472: LD_VAR 0 3
34476: PPUSH
34477: CALL_OW 263
34481: PUSH
34482: LD_INT 1
34484: EQUAL
34485: IFFALSE 34499
34487: PUSH
34488: LD_VAR 0 3
34492: PPUSH
34493: CALL_OW 311
34497: NOT
34498: AND
34499: OR
34500: IFFALSE 34544
// begin SetUnitDisplayNumber ( i , 0 ) ;
34502: LD_VAR 0 3
34506: PPUSH
34507: LD_INT 0
34509: PPUSH
34510: CALL_OW 505
// SetTag ( i , 0 ) ;
34514: LD_VAR 0 3
34518: PPUSH
34519: LD_INT 0
34521: PPUSH
34522: CALL_OW 109
// scaners := scaners diff i ;
34526: LD_ADDR_VAR 0 6
34530: PUSH
34531: LD_VAR 0 6
34535: PUSH
34536: LD_VAR 0 3
34540: DIFF
34541: ST_TO_ADDR
// continue ;
34542: GO 34443
// end ; SetUnitDisplayNumber ( i , timer ) ;
34544: LD_VAR 0 3
34548: PPUSH
34549: LD_VAR 0 7
34553: PPUSH
34554: CALL_OW 505
// end ;
34558: GO 34443
34560: POP
34561: POP
// if not scaners then
34562: LD_VAR 0 6
34566: NOT
34567: IFFALSE 34571
// exit ;
34569: GO 34662
// timer := Dec ( timer ) ;
34571: LD_ADDR_VAR 0 7
34575: PUSH
34576: LD_VAR 0 7
34580: PPUSH
34581: CALL 74245 0 1
34585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
34586: LD_INT 35
34588: PPUSH
34589: CALL_OW 67
// until timer = 0 ;
34593: LD_VAR 0 7
34597: PUSH
34598: LD_INT 0
34600: EQUAL
34601: IFFALSE 34433
// if not scaners then
34603: LD_VAR 0 6
34607: NOT
34608: IFFALSE 34612
// exit ;
34610: GO 34662
// for i in scaners do
34612: LD_ADDR_VAR 0 3
34616: PUSH
34617: LD_VAR 0 6
34621: PUSH
34622: FOR_IN
34623: IFFALSE 34660
// begin SetUnitDisplayNumber ( i , 0 ) ;
34625: LD_VAR 0 3
34629: PPUSH
34630: LD_INT 0
34632: PPUSH
34633: CALL_OW 505
// SetTag ( i , 0 ) ;
34637: LD_VAR 0 3
34641: PPUSH
34642: LD_INT 0
34644: PPUSH
34645: CALL_OW 109
// RevealDetectorMine ( i ) ;
34649: LD_VAR 0 3
34653: PPUSH
34654: CALL 33917 0 1
// end ;
34658: GO 34622
34660: POP
34661: POP
// end ;
34662: LD_VAR 0 2
34666: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
34667: LD_INT 0
34669: PPUSH
// if p1 = mine_detector_mode then
34670: LD_VAR 0 2
34674: PUSH
34675: LD_INT 103
34677: EQUAL
34678: IFFALSE 34689
// DetectMine ( units ) ;
34680: LD_VAR 0 1
34684: PPUSH
34685: CALL 34215 0 1
// end ; end_of_file
34689: LD_VAR 0 7
34693: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34694: LD_INT 0
34696: PPUSH
34697: PPUSH
// if exist_mode then
34698: LD_VAR 0 2
34702: IFFALSE 34748
// begin unit := CreateCharacter ( prefix & ident ) ;
34704: LD_ADDR_VAR 0 5
34708: PUSH
34709: LD_VAR 0 3
34713: PUSH
34714: LD_VAR 0 1
34718: STR
34719: PPUSH
34720: CALL_OW 34
34724: ST_TO_ADDR
// if unit then
34725: LD_VAR 0 5
34729: IFFALSE 34746
// DeleteCharacters ( prefix & ident ) ;
34731: LD_VAR 0 3
34735: PUSH
34736: LD_VAR 0 1
34740: STR
34741: PPUSH
34742: CALL_OW 40
// end else
34746: GO 34763
// unit := NewCharacter ( ident ) ;
34748: LD_ADDR_VAR 0 5
34752: PUSH
34753: LD_VAR 0 1
34757: PPUSH
34758: CALL_OW 25
34762: ST_TO_ADDR
// result := unit ;
34763: LD_ADDR_VAR 0 4
34767: PUSH
34768: LD_VAR 0 5
34772: ST_TO_ADDR
// end ;
34773: LD_VAR 0 4
34777: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
34778: LD_INT 0
34780: PPUSH
34781: PPUSH
// if exist_mode then
34782: LD_VAR 0 2
34786: IFFALSE 34811
// unit := CreateCharacter ( prefix & ident ) else
34788: LD_ADDR_VAR 0 5
34792: PUSH
34793: LD_VAR 0 3
34797: PUSH
34798: LD_VAR 0 1
34802: STR
34803: PPUSH
34804: CALL_OW 34
34808: ST_TO_ADDR
34809: GO 34826
// unit := NewCharacter ( ident ) ;
34811: LD_ADDR_VAR 0 5
34815: PUSH
34816: LD_VAR 0 1
34820: PPUSH
34821: CALL_OW 25
34825: ST_TO_ADDR
// result := unit ;
34826: LD_ADDR_VAR 0 4
34830: PUSH
34831: LD_VAR 0 5
34835: ST_TO_ADDR
// end ;
34836: LD_VAR 0 4
34840: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34841: LD_INT 0
34843: PPUSH
34844: PPUSH
// if not side or not nation then
34845: LD_VAR 0 1
34849: NOT
34850: IFTRUE 34859
34852: PUSH
34853: LD_VAR 0 2
34857: NOT
34858: OR
34859: IFFALSE 34863
// exit ;
34861: GO 35657
// case nation of nation_american :
34863: LD_VAR 0 2
34867: PUSH
34868: LD_INT 1
34870: DOUBLE
34871: EQUAL
34872: IFTRUE 34876
34874: GO 35098
34876: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
34877: LD_ADDR_VAR 0 4
34881: PUSH
34882: LD_INT 35
34884: PUSH
34885: LD_INT 45
34887: PUSH
34888: LD_INT 46
34890: PUSH
34891: LD_INT 47
34893: PUSH
34894: LD_INT 82
34896: PUSH
34897: LD_INT 83
34899: PUSH
34900: LD_INT 84
34902: PUSH
34903: LD_INT 85
34905: PUSH
34906: LD_INT 86
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: LD_INT 2
34914: PUSH
34915: LD_INT 6
34917: PUSH
34918: LD_INT 15
34920: PUSH
34921: LD_INT 16
34923: PUSH
34924: LD_INT 7
34926: PUSH
34927: LD_INT 12
34929: PUSH
34930: LD_INT 13
34932: PUSH
34933: LD_INT 10
34935: PUSH
34936: LD_INT 14
34938: PUSH
34939: LD_INT 20
34941: PUSH
34942: LD_INT 21
34944: PUSH
34945: LD_INT 22
34947: PUSH
34948: LD_INT 25
34950: PUSH
34951: LD_INT 32
34953: PUSH
34954: LD_INT 27
34956: PUSH
34957: LD_INT 36
34959: PUSH
34960: LD_INT 69
34962: PUSH
34963: LD_INT 39
34965: PUSH
34966: LD_INT 34
34968: PUSH
34969: LD_INT 40
34971: PUSH
34972: LD_INT 48
34974: PUSH
34975: LD_INT 49
34977: PUSH
34978: LD_INT 50
34980: PUSH
34981: LD_INT 51
34983: PUSH
34984: LD_INT 52
34986: PUSH
34987: LD_INT 53
34989: PUSH
34990: LD_INT 54
34992: PUSH
34993: LD_INT 55
34995: PUSH
34996: LD_INT 56
34998: PUSH
34999: LD_INT 57
35001: PUSH
35002: LD_INT 58
35004: PUSH
35005: LD_INT 59
35007: PUSH
35008: LD_INT 60
35010: PUSH
35011: LD_INT 61
35013: PUSH
35014: LD_INT 62
35016: PUSH
35017: LD_INT 80
35019: PUSH
35020: LD_INT 82
35022: PUSH
35023: LD_INT 83
35025: PUSH
35026: LD_INT 84
35028: PUSH
35029: LD_INT 85
35031: PUSH
35032: LD_INT 86
35034: PUSH
35035: LD_INT 90
35037: PUSH
35038: LD_INT 93
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: ST_TO_ADDR
35096: GO 35579
35098: LD_INT 2
35100: DOUBLE
35101: EQUAL
35102: IFTRUE 35106
35104: GO 35340
35106: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
35107: LD_ADDR_VAR 0 4
35111: PUSH
35112: LD_INT 35
35114: PUSH
35115: LD_INT 45
35117: PUSH
35118: LD_INT 46
35120: PUSH
35121: LD_INT 47
35123: PUSH
35124: LD_INT 82
35126: PUSH
35127: LD_INT 83
35129: PUSH
35130: LD_INT 84
35132: PUSH
35133: LD_INT 85
35135: PUSH
35136: LD_INT 87
35138: PUSH
35139: LD_INT 70
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: LD_INT 11
35147: PUSH
35148: LD_INT 3
35150: PUSH
35151: LD_INT 4
35153: PUSH
35154: LD_INT 5
35156: PUSH
35157: LD_INT 6
35159: PUSH
35160: LD_INT 15
35162: PUSH
35163: LD_INT 18
35165: PUSH
35166: LD_INT 7
35168: PUSH
35169: LD_INT 17
35171: PUSH
35172: LD_INT 8
35174: PUSH
35175: LD_INT 20
35177: PUSH
35178: LD_INT 21
35180: PUSH
35181: LD_INT 22
35183: PUSH
35184: LD_INT 72
35186: PUSH
35187: LD_INT 26
35189: PUSH
35190: LD_INT 69
35192: PUSH
35193: LD_INT 39
35195: PUSH
35196: LD_INT 40
35198: PUSH
35199: LD_INT 41
35201: PUSH
35202: LD_INT 42
35204: PUSH
35205: LD_INT 43
35207: PUSH
35208: LD_INT 48
35210: PUSH
35211: LD_INT 49
35213: PUSH
35214: LD_INT 50
35216: PUSH
35217: LD_INT 51
35219: PUSH
35220: LD_INT 52
35222: PUSH
35223: LD_INT 53
35225: PUSH
35226: LD_INT 54
35228: PUSH
35229: LD_INT 55
35231: PUSH
35232: LD_INT 56
35234: PUSH
35235: LD_INT 60
35237: PUSH
35238: LD_INT 61
35240: PUSH
35241: LD_INT 62
35243: PUSH
35244: LD_INT 66
35246: PUSH
35247: LD_INT 67
35249: PUSH
35250: LD_INT 68
35252: PUSH
35253: LD_INT 81
35255: PUSH
35256: LD_INT 82
35258: PUSH
35259: LD_INT 83
35261: PUSH
35262: LD_INT 84
35264: PUSH
35265: LD_INT 85
35267: PUSH
35268: LD_INT 87
35270: PUSH
35271: LD_INT 88
35273: PUSH
35274: LD_INT 92
35276: PUSH
35277: LD_INT 94
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: ST_TO_ADDR
35338: GO 35579
35340: LD_INT 3
35342: DOUBLE
35343: EQUAL
35344: IFTRUE 35348
35346: GO 35578
35348: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
35349: LD_ADDR_VAR 0 4
35353: PUSH
35354: LD_INT 46
35356: PUSH
35357: LD_INT 47
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: LD_INT 82
35368: PUSH
35369: LD_INT 83
35371: PUSH
35372: LD_INT 84
35374: PUSH
35375: LD_INT 85
35377: PUSH
35378: LD_INT 86
35380: PUSH
35381: LD_INT 11
35383: PUSH
35384: LD_INT 9
35386: PUSH
35387: LD_INT 20
35389: PUSH
35390: LD_INT 19
35392: PUSH
35393: LD_INT 21
35395: PUSH
35396: LD_INT 24
35398: PUSH
35399: LD_INT 22
35401: PUSH
35402: LD_INT 25
35404: PUSH
35405: LD_INT 28
35407: PUSH
35408: LD_INT 29
35410: PUSH
35411: LD_INT 30
35413: PUSH
35414: LD_INT 31
35416: PUSH
35417: LD_INT 37
35419: PUSH
35420: LD_INT 38
35422: PUSH
35423: LD_INT 32
35425: PUSH
35426: LD_INT 27
35428: PUSH
35429: LD_INT 33
35431: PUSH
35432: LD_INT 69
35434: PUSH
35435: LD_INT 39
35437: PUSH
35438: LD_INT 34
35440: PUSH
35441: LD_INT 40
35443: PUSH
35444: LD_INT 71
35446: PUSH
35447: LD_INT 23
35449: PUSH
35450: LD_INT 44
35452: PUSH
35453: LD_INT 48
35455: PUSH
35456: LD_INT 49
35458: PUSH
35459: LD_INT 50
35461: PUSH
35462: LD_INT 51
35464: PUSH
35465: LD_INT 52
35467: PUSH
35468: LD_INT 53
35470: PUSH
35471: LD_INT 54
35473: PUSH
35474: LD_INT 55
35476: PUSH
35477: LD_INT 56
35479: PUSH
35480: LD_INT 57
35482: PUSH
35483: LD_INT 58
35485: PUSH
35486: LD_INT 59
35488: PUSH
35489: LD_INT 63
35491: PUSH
35492: LD_INT 64
35494: PUSH
35495: LD_INT 65
35497: PUSH
35498: LD_INT 82
35500: PUSH
35501: LD_INT 83
35503: PUSH
35504: LD_INT 84
35506: PUSH
35507: LD_INT 85
35509: PUSH
35510: LD_INT 86
35512: PUSH
35513: LD_INT 89
35515: PUSH
35516: LD_INT 91
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: ST_TO_ADDR
35576: GO 35579
35578: POP
// if state > - 1 and state < 3 then
35579: LD_VAR 0 3
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: GREATER
35588: IFFALSE 35600
35590: PUSH
35591: LD_VAR 0 3
35595: PUSH
35596: LD_INT 3
35598: LESS
35599: AND
35600: IFFALSE 35657
// for i in result do
35602: LD_ADDR_VAR 0 5
35606: PUSH
35607: LD_VAR 0 4
35611: PUSH
35612: FOR_IN
35613: IFFALSE 35655
// if GetTech ( i , side ) <> state then
35615: LD_VAR 0 5
35619: PPUSH
35620: LD_VAR 0 1
35624: PPUSH
35625: CALL_OW 321
35629: PUSH
35630: LD_VAR 0 3
35634: NONEQUAL
35635: IFFALSE 35653
// result := result diff i ;
35637: LD_ADDR_VAR 0 4
35641: PUSH
35642: LD_VAR 0 4
35646: PUSH
35647: LD_VAR 0 5
35651: DIFF
35652: ST_TO_ADDR
35653: GO 35612
35655: POP
35656: POP
// end ;
35657: LD_VAR 0 4
35661: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35662: LD_INT 0
35664: PPUSH
35665: PPUSH
35666: PPUSH
// result := true ;
35667: LD_ADDR_VAR 0 3
35671: PUSH
35672: LD_INT 1
35674: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35675: LD_ADDR_VAR 0 5
35679: PUSH
35680: LD_VAR 0 2
35684: PPUSH
35685: CALL_OW 480
35689: ST_TO_ADDR
// if not tmp then
35690: LD_VAR 0 5
35694: NOT
35695: IFFALSE 35699
// exit ;
35697: GO 35748
// for i in tmp do
35699: LD_ADDR_VAR 0 4
35703: PUSH
35704: LD_VAR 0 5
35708: PUSH
35709: FOR_IN
35710: IFFALSE 35746
// if GetTech ( i , side ) <> state_researched then
35712: LD_VAR 0 4
35716: PPUSH
35717: LD_VAR 0 1
35721: PPUSH
35722: CALL_OW 321
35726: PUSH
35727: LD_INT 2
35729: NONEQUAL
35730: IFFALSE 35744
// begin result := false ;
35732: LD_ADDR_VAR 0 3
35736: PUSH
35737: LD_INT 0
35739: ST_TO_ADDR
// exit ;
35740: POP
35741: POP
35742: GO 35748
// end ;
35744: GO 35709
35746: POP
35747: POP
// end ;
35748: LD_VAR 0 3
35752: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35753: LD_INT 0
35755: PPUSH
35756: PPUSH
35757: PPUSH
35758: PPUSH
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
35764: PPUSH
35765: PPUSH
35766: PPUSH
35767: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35768: LD_VAR 0 1
35772: NOT
35773: IFTRUE 35790
35775: PUSH
35776: LD_VAR 0 1
35780: PPUSH
35781: CALL_OW 257
35785: PUSH
35786: LD_INT 9
35788: NONEQUAL
35789: OR
35790: IFFALSE 35794
// exit ;
35792: GO 36373
// side := GetSide ( unit ) ;
35794: LD_ADDR_VAR 0 9
35798: PUSH
35799: LD_VAR 0 1
35803: PPUSH
35804: CALL_OW 255
35808: ST_TO_ADDR
// tech_space := tech_spacanom ;
35809: LD_ADDR_VAR 0 12
35813: PUSH
35814: LD_INT 29
35816: ST_TO_ADDR
// tech_time := tech_taurad ;
35817: LD_ADDR_VAR 0 13
35821: PUSH
35822: LD_INT 28
35824: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35825: LD_ADDR_VAR 0 11
35829: PUSH
35830: LD_VAR 0 1
35834: PPUSH
35835: CALL_OW 310
35839: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35840: LD_VAR 0 11
35844: PPUSH
35845: CALL_OW 247
35849: PUSH
35850: LD_INT 2
35852: EQUAL
35853: IFFALSE 35857
// exit ;
35855: GO 36373
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35857: LD_ADDR_VAR 0 8
35861: PUSH
35862: LD_INT 81
35864: PUSH
35865: LD_VAR 0 9
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 3
35876: PUSH
35877: LD_INT 21
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PPUSH
35895: CALL_OW 69
35899: ST_TO_ADDR
// if not tmp then
35900: LD_VAR 0 8
35904: NOT
35905: IFFALSE 35909
// exit ;
35907: GO 36373
// if in_unit then
35909: LD_VAR 0 11
35913: IFFALSE 35937
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35915: LD_ADDR_VAR 0 10
35919: PUSH
35920: LD_VAR 0 8
35924: PPUSH
35925: LD_VAR 0 11
35929: PPUSH
35930: CALL_OW 74
35934: ST_TO_ADDR
35935: GO 35957
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35937: LD_ADDR_VAR 0 10
35941: PUSH
35942: LD_VAR 0 8
35946: PPUSH
35947: LD_VAR 0 1
35951: PPUSH
35952: CALL_OW 74
35956: ST_TO_ADDR
// if not enemy then
35957: LD_VAR 0 10
35961: NOT
35962: IFFALSE 35966
// exit ;
35964: GO 36373
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35966: LD_VAR 0 11
35970: IFFALSE 35992
35972: PUSH
35973: LD_VAR 0 11
35977: PPUSH
35978: LD_VAR 0 10
35982: PPUSH
35983: CALL_OW 296
35987: PUSH
35988: LD_INT 13
35990: GREATER
35991: AND
35992: IFTRUE 36014
35994: PUSH
35995: LD_VAR 0 1
35999: PPUSH
36000: LD_VAR 0 10
36004: PPUSH
36005: CALL_OW 296
36009: PUSH
36010: LD_INT 12
36012: GREATER
36013: OR
36014: IFFALSE 36018
// exit ;
36016: GO 36373
// missile := [ 1 ] ;
36018: LD_ADDR_VAR 0 14
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: EMPTY
36027: LIST
36028: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36029: LD_VAR 0 9
36033: PPUSH
36034: LD_VAR 0 12
36038: PPUSH
36039: CALL_OW 325
36043: IFFALSE 36072
// missile := Replace ( missile , missile + 1 , 2 ) ;
36045: LD_ADDR_VAR 0 14
36049: PUSH
36050: LD_VAR 0 14
36054: PPUSH
36055: LD_VAR 0 14
36059: PUSH
36060: LD_INT 1
36062: PLUS
36063: PPUSH
36064: LD_INT 2
36066: PPUSH
36067: CALL_OW 1
36071: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36072: LD_VAR 0 9
36076: PPUSH
36077: LD_VAR 0 13
36081: PPUSH
36082: CALL_OW 325
36086: IFFALSE 36110
36088: PUSH
36089: LD_VAR 0 10
36093: PPUSH
36094: CALL_OW 255
36098: PPUSH
36099: LD_VAR 0 13
36103: PPUSH
36104: CALL_OW 325
36108: NOT
36109: AND
36110: IFFALSE 36139
// missile := Replace ( missile , missile + 1 , 3 ) ;
36112: LD_ADDR_VAR 0 14
36116: PUSH
36117: LD_VAR 0 14
36121: PPUSH
36122: LD_VAR 0 14
36126: PUSH
36127: LD_INT 1
36129: PLUS
36130: PPUSH
36131: LD_INT 3
36133: PPUSH
36134: CALL_OW 1
36138: ST_TO_ADDR
// if missile < 2 then
36139: LD_VAR 0 14
36143: PUSH
36144: LD_INT 2
36146: LESS
36147: IFFALSE 36151
// exit ;
36149: GO 36373
// x := GetX ( enemy ) ;
36151: LD_ADDR_VAR 0 4
36155: PUSH
36156: LD_VAR 0 10
36160: PPUSH
36161: CALL_OW 250
36165: ST_TO_ADDR
// y := GetY ( enemy ) ;
36166: LD_ADDR_VAR 0 5
36170: PUSH
36171: LD_VAR 0 10
36175: PPUSH
36176: CALL_OW 251
36180: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36181: LD_ADDR_VAR 0 6
36185: PUSH
36186: LD_VAR 0 4
36190: PUSH
36191: LD_INT 1
36193: NEG
36194: PPUSH
36195: LD_INT 1
36197: PPUSH
36198: CALL_OW 12
36202: PLUS
36203: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36204: LD_ADDR_VAR 0 7
36208: PUSH
36209: LD_VAR 0 5
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PPUSH
36218: LD_INT 1
36220: PPUSH
36221: CALL_OW 12
36225: PLUS
36226: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36227: LD_VAR 0 6
36231: PPUSH
36232: LD_VAR 0 7
36236: PPUSH
36237: CALL_OW 488
36241: NOT
36242: IFFALSE 36264
// begin _x := x ;
36244: LD_ADDR_VAR 0 6
36248: PUSH
36249: LD_VAR 0 4
36253: ST_TO_ADDR
// _y := y ;
36254: LD_ADDR_VAR 0 7
36258: PUSH
36259: LD_VAR 0 5
36263: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36264: LD_ADDR_VAR 0 3
36268: PUSH
36269: LD_INT 1
36271: PPUSH
36272: LD_VAR 0 14
36276: PPUSH
36277: CALL_OW 12
36281: ST_TO_ADDR
// case i of 1 :
36282: LD_VAR 0 3
36286: PUSH
36287: LD_INT 1
36289: DOUBLE
36290: EQUAL
36291: IFTRUE 36295
36293: GO 36312
36295: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36296: LD_VAR 0 1
36300: PPUSH
36301: LD_VAR 0 10
36305: PPUSH
36306: CALL_OW 115
36310: GO 36373
36312: LD_INT 2
36314: DOUBLE
36315: EQUAL
36316: IFTRUE 36320
36318: GO 36342
36320: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36321: LD_VAR 0 1
36325: PPUSH
36326: LD_VAR 0 6
36330: PPUSH
36331: LD_VAR 0 7
36335: PPUSH
36336: CALL_OW 153
36340: GO 36373
36342: LD_INT 3
36344: DOUBLE
36345: EQUAL
36346: IFTRUE 36350
36348: GO 36372
36350: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36351: LD_VAR 0 1
36355: PPUSH
36356: LD_VAR 0 6
36360: PPUSH
36361: LD_VAR 0 7
36365: PPUSH
36366: CALL_OW 154
36370: GO 36373
36372: POP
// end ;
36373: LD_VAR 0 2
36377: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36378: LD_INT 0
36380: PPUSH
36381: PPUSH
36382: PPUSH
36383: PPUSH
36384: PPUSH
36385: PPUSH
// if not unit or not building then
36386: LD_VAR 0 1
36390: NOT
36391: IFTRUE 36400
36393: PUSH
36394: LD_VAR 0 2
36398: NOT
36399: OR
36400: IFFALSE 36404
// exit ;
36402: GO 36562
// x := GetX ( building ) ;
36404: LD_ADDR_VAR 0 5
36408: PUSH
36409: LD_VAR 0 2
36413: PPUSH
36414: CALL_OW 250
36418: ST_TO_ADDR
// y := GetY ( building ) ;
36419: LD_ADDR_VAR 0 6
36423: PUSH
36424: LD_VAR 0 2
36428: PPUSH
36429: CALL_OW 251
36433: ST_TO_ADDR
// for i := 0 to 5 do
36434: LD_ADDR_VAR 0 4
36438: PUSH
36439: DOUBLE
36440: LD_INT 0
36442: DEC
36443: ST_TO_ADDR
36444: LD_INT 5
36446: PUSH
36447: FOR_TO
36448: IFFALSE 36560
// begin _x := ShiftX ( x , i , 3 ) ;
36450: LD_ADDR_VAR 0 7
36454: PUSH
36455: LD_VAR 0 5
36459: PPUSH
36460: LD_VAR 0 4
36464: PPUSH
36465: LD_INT 3
36467: PPUSH
36468: CALL_OW 272
36472: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36473: LD_ADDR_VAR 0 8
36477: PUSH
36478: LD_VAR 0 6
36482: PPUSH
36483: LD_VAR 0 4
36487: PPUSH
36488: LD_INT 3
36490: PPUSH
36491: CALL_OW 273
36495: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36496: LD_VAR 0 7
36500: PPUSH
36501: LD_VAR 0 8
36505: PPUSH
36506: CALL_OW 488
36510: NOT
36511: IFFALSE 36515
// continue ;
36513: GO 36447
// if HexInfo ( _x , _y ) = 0 then
36515: LD_VAR 0 7
36519: PPUSH
36520: LD_VAR 0 8
36524: PPUSH
36525: CALL_OW 428
36529: PUSH
36530: LD_INT 0
36532: EQUAL
36533: IFFALSE 36558
// begin ComMoveXY ( unit , _x , _y ) ;
36535: LD_VAR 0 1
36539: PPUSH
36540: LD_VAR 0 7
36544: PPUSH
36545: LD_VAR 0 8
36549: PPUSH
36550: CALL_OW 111
// exit ;
36554: POP
36555: POP
36556: GO 36562
// end ; end ;
36558: GO 36447
36560: POP
36561: POP
// end ;
36562: LD_VAR 0 3
36566: RET
// export function ScanBase ( side , base_area ) ; begin
36567: LD_INT 0
36569: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36570: LD_ADDR_VAR 0 3
36574: PUSH
36575: LD_VAR 0 2
36579: PPUSH
36580: LD_INT 81
36582: PUSH
36583: LD_VAR 0 1
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PPUSH
36592: CALL_OW 70
36596: ST_TO_ADDR
// end ;
36597: LD_VAR 0 3
36601: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36602: LD_INT 0
36604: PPUSH
36605: PPUSH
36606: PPUSH
36607: PPUSH
// result := false ;
36608: LD_ADDR_VAR 0 2
36612: PUSH
36613: LD_INT 0
36615: ST_TO_ADDR
// side := GetSide ( unit ) ;
36616: LD_ADDR_VAR 0 3
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 255
36630: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36631: LD_ADDR_VAR 0 4
36635: PUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 248
36645: ST_TO_ADDR
// case nat of 1 :
36646: LD_VAR 0 4
36650: PUSH
36651: LD_INT 1
36653: DOUBLE
36654: EQUAL
36655: IFTRUE 36659
36657: GO 36670
36659: POP
// tech := tech_lassight ; 2 :
36660: LD_ADDR_VAR 0 5
36664: PUSH
36665: LD_INT 12
36667: ST_TO_ADDR
36668: GO 36709
36670: LD_INT 2
36672: DOUBLE
36673: EQUAL
36674: IFTRUE 36678
36676: GO 36689
36678: POP
// tech := tech_mortar ; 3 :
36679: LD_ADDR_VAR 0 5
36683: PUSH
36684: LD_INT 41
36686: ST_TO_ADDR
36687: GO 36709
36689: LD_INT 3
36691: DOUBLE
36692: EQUAL
36693: IFTRUE 36697
36695: GO 36708
36697: POP
// tech := tech_bazooka ; end ;
36698: LD_ADDR_VAR 0 5
36702: PUSH
36703: LD_INT 44
36705: ST_TO_ADDR
36706: GO 36709
36708: POP
// if Researched ( side , tech ) then
36709: LD_VAR 0 3
36713: PPUSH
36714: LD_VAR 0 5
36718: PPUSH
36719: CALL_OW 325
36723: IFFALSE 36750
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36725: LD_ADDR_VAR 0 2
36729: PUSH
36730: LD_INT 5
36732: PUSH
36733: LD_INT 8
36735: PUSH
36736: LD_INT 9
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: PUSH
36744: LD_VAR 0 4
36748: ARRAY
36749: ST_TO_ADDR
// end ;
36750: LD_VAR 0 2
36754: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36755: LD_INT 0
36757: PPUSH
36758: PPUSH
36759: PPUSH
// if not mines then
36760: LD_VAR 0 2
36764: NOT
36765: IFFALSE 36769
// exit ;
36767: GO 36913
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36769: LD_ADDR_VAR 0 5
36773: PUSH
36774: LD_INT 81
36776: PUSH
36777: LD_VAR 0 1
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 3
36788: PUSH
36789: LD_INT 21
36791: PUSH
36792: LD_INT 3
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PPUSH
36807: CALL_OW 69
36811: ST_TO_ADDR
// for i in mines do
36812: LD_ADDR_VAR 0 4
36816: PUSH
36817: LD_VAR 0 2
36821: PUSH
36822: FOR_IN
36823: IFFALSE 36911
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36825: LD_VAR 0 4
36829: PUSH
36830: LD_INT 1
36832: ARRAY
36833: PPUSH
36834: LD_VAR 0 4
36838: PUSH
36839: LD_INT 2
36841: ARRAY
36842: PPUSH
36843: CALL_OW 458
36847: NOT
36848: IFFALSE 36852
// continue ;
36850: GO 36822
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36852: LD_VAR 0 4
36856: PUSH
36857: LD_INT 1
36859: ARRAY
36860: PPUSH
36861: LD_VAR 0 4
36865: PUSH
36866: LD_INT 2
36868: ARRAY
36869: PPUSH
36870: CALL_OW 428
36874: PUSH
36875: LD_VAR 0 5
36879: IN
36880: IFFALSE 36909
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36882: LD_VAR 0 4
36886: PUSH
36887: LD_INT 1
36889: ARRAY
36890: PPUSH
36891: LD_VAR 0 4
36895: PUSH
36896: LD_INT 2
36898: ARRAY
36899: PPUSH
36900: LD_VAR 0 1
36904: PPUSH
36905: CALL_OW 456
// end ;
36909: GO 36822
36911: POP
36912: POP
// end ;
36913: LD_VAR 0 3
36917: RET
// export function Count ( array ) ; begin
36918: LD_INT 0
36920: PPUSH
// result := array + 0 ;
36921: LD_ADDR_VAR 0 2
36925: PUSH
36926: LD_VAR 0 1
36930: PUSH
36931: LD_INT 0
36933: PLUS
36934: ST_TO_ADDR
// end ;
36935: LD_VAR 0 2
36939: RET
// export function IsEmpty ( building ) ; begin
36940: LD_INT 0
36942: PPUSH
// if not building then
36943: LD_VAR 0 1
36947: NOT
36948: IFFALSE 36952
// exit ;
36950: GO 36995
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36952: LD_ADDR_VAR 0 2
36956: PUSH
36957: LD_VAR 0 1
36961: PUSH
36962: LD_INT 22
36964: PUSH
36965: LD_VAR 0 1
36969: PPUSH
36970: CALL_OW 255
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 58
36981: PUSH
36982: EMPTY
36983: LIST
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PPUSH
36989: CALL_OW 69
36993: IN
36994: ST_TO_ADDR
// end ;
36995: LD_VAR 0 2
36999: RET
// export function IsNotFull ( building ) ; var places ; begin
37000: LD_INT 0
37002: PPUSH
37003: PPUSH
// if not building then
37004: LD_VAR 0 1
37008: NOT
37009: IFFALSE 37013
// exit ;
37011: GO 37041
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37013: LD_ADDR_VAR 0 2
37017: PUSH
37018: LD_VAR 0 1
37022: PPUSH
37023: LD_INT 3
37025: PUSH
37026: LD_INT 62
37028: PUSH
37029: EMPTY
37030: LIST
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PPUSH
37036: CALL_OW 72
37040: ST_TO_ADDR
// end ;
37041: LD_VAR 0 2
37045: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37046: LD_INT 0
37048: PPUSH
37049: PPUSH
37050: PPUSH
37051: PPUSH
// tmp := [ ] ;
37052: LD_ADDR_VAR 0 3
37056: PUSH
37057: EMPTY
37058: ST_TO_ADDR
// list := [ ] ;
37059: LD_ADDR_VAR 0 5
37063: PUSH
37064: EMPTY
37065: ST_TO_ADDR
// for i = 16 to 25 do
37066: LD_ADDR_VAR 0 4
37070: PUSH
37071: DOUBLE
37072: LD_INT 16
37074: DEC
37075: ST_TO_ADDR
37076: LD_INT 25
37078: PUSH
37079: FOR_TO
37080: IFFALSE 37153
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37082: LD_ADDR_VAR 0 3
37086: PUSH
37087: LD_VAR 0 3
37091: PUSH
37092: LD_INT 22
37094: PUSH
37095: LD_VAR 0 1
37099: PPUSH
37100: CALL_OW 255
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 91
37111: PUSH
37112: LD_VAR 0 1
37116: PUSH
37117: LD_INT 6
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 30
37127: PUSH
37128: LD_VAR 0 4
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: PUSH
37142: EMPTY
37143: LIST
37144: PPUSH
37145: CALL_OW 69
37149: ADD
37150: ST_TO_ADDR
37151: GO 37079
37153: POP
37154: POP
// for i = 1 to tmp do
37155: LD_ADDR_VAR 0 4
37159: PUSH
37160: DOUBLE
37161: LD_INT 1
37163: DEC
37164: ST_TO_ADDR
37165: LD_VAR 0 3
37169: PUSH
37170: FOR_TO
37171: IFFALSE 37259
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37173: LD_ADDR_VAR 0 5
37177: PUSH
37178: LD_VAR 0 5
37182: PUSH
37183: LD_VAR 0 3
37187: PUSH
37188: LD_VAR 0 4
37192: ARRAY
37193: PPUSH
37194: CALL_OW 266
37198: PUSH
37199: LD_VAR 0 3
37203: PUSH
37204: LD_VAR 0 4
37208: ARRAY
37209: PPUSH
37210: CALL_OW 250
37214: PUSH
37215: LD_VAR 0 3
37219: PUSH
37220: LD_VAR 0 4
37224: ARRAY
37225: PPUSH
37226: CALL_OW 251
37230: PUSH
37231: LD_VAR 0 3
37235: PUSH
37236: LD_VAR 0 4
37240: ARRAY
37241: PPUSH
37242: CALL_OW 254
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: ADD
37256: ST_TO_ADDR
37257: GO 37170
37259: POP
37260: POP
// result := list ;
37261: LD_ADDR_VAR 0 2
37265: PUSH
37266: LD_VAR 0 5
37270: ST_TO_ADDR
// end ;
37271: LD_VAR 0 2
37275: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37276: LD_INT 0
37278: PPUSH
37279: PPUSH
37280: PPUSH
37281: PPUSH
37282: PPUSH
37283: PPUSH
37284: PPUSH
// if not factory then
37285: LD_VAR 0 1
37289: NOT
37290: IFFALSE 37294
// exit ;
37292: GO 37897
// if control = control_apeman then
37294: LD_VAR 0 4
37298: PUSH
37299: LD_INT 5
37301: EQUAL
37302: IFFALSE 37411
// begin tmp := UnitsInside ( factory ) ;
37304: LD_ADDR_VAR 0 8
37308: PUSH
37309: LD_VAR 0 1
37313: PPUSH
37314: CALL_OW 313
37318: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37319: LD_VAR 0 8
37323: PPUSH
37324: LD_INT 25
37326: PUSH
37327: LD_INT 12
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PPUSH
37334: CALL_OW 72
37338: NOT
37339: IFFALSE 37349
// control := control_manual ;
37341: LD_ADDR_VAR 0 4
37345: PUSH
37346: LD_INT 1
37348: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37349: LD_ADDR_VAR 0 8
37353: PUSH
37354: LD_VAR 0 1
37358: PPUSH
37359: CALL 37046 0 1
37363: ST_TO_ADDR
// if tmp then
37364: LD_VAR 0 8
37368: IFFALSE 37411
// begin for i in tmp do
37370: LD_ADDR_VAR 0 7
37374: PUSH
37375: LD_VAR 0 8
37379: PUSH
37380: FOR_IN
37381: IFFALSE 37409
// if i [ 1 ] = b_ext_radio then
37383: LD_VAR 0 7
37387: PUSH
37388: LD_INT 1
37390: ARRAY
37391: PUSH
37392: LD_INT 22
37394: EQUAL
37395: IFFALSE 37407
// begin control := control_remote ;
37397: LD_ADDR_VAR 0 4
37401: PUSH
37402: LD_INT 2
37404: ST_TO_ADDR
// break ;
37405: GO 37409
// end ;
37407: GO 37380
37409: POP
37410: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37411: LD_VAR 0 1
37415: PPUSH
37416: LD_VAR 0 2
37420: PPUSH
37421: LD_VAR 0 3
37425: PPUSH
37426: LD_VAR 0 4
37430: PPUSH
37431: LD_VAR 0 5
37435: PPUSH
37436: CALL_OW 448
37440: IFFALSE 37475
// begin result := [ chassis , engine , control , weapon ] ;
37442: LD_ADDR_VAR 0 6
37446: PUSH
37447: LD_VAR 0 2
37451: PUSH
37452: LD_VAR 0 3
37456: PUSH
37457: LD_VAR 0 4
37461: PUSH
37462: LD_VAR 0 5
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: ST_TO_ADDR
// exit ;
37473: GO 37897
// end ; _chassis := AvailableChassisList ( factory ) ;
37475: LD_ADDR_VAR 0 9
37479: PUSH
37480: LD_VAR 0 1
37484: PPUSH
37485: CALL_OW 475
37489: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37490: LD_ADDR_VAR 0 11
37494: PUSH
37495: LD_VAR 0 1
37499: PPUSH
37500: CALL_OW 476
37504: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37505: LD_ADDR_VAR 0 12
37509: PUSH
37510: LD_VAR 0 1
37514: PPUSH
37515: CALL_OW 477
37519: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37520: LD_ADDR_VAR 0 10
37524: PUSH
37525: LD_VAR 0 1
37529: PPUSH
37530: CALL_OW 478
37534: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37535: LD_VAR 0 9
37539: NOT
37540: IFTRUE 37549
37542: PUSH
37543: LD_VAR 0 11
37547: NOT
37548: OR
37549: IFTRUE 37558
37551: PUSH
37552: LD_VAR 0 12
37556: NOT
37557: OR
37558: IFTRUE 37567
37560: PUSH
37561: LD_VAR 0 10
37565: NOT
37566: OR
37567: IFFALSE 37602
// begin result := [ chassis , engine , control , weapon ] ;
37569: LD_ADDR_VAR 0 6
37573: PUSH
37574: LD_VAR 0 2
37578: PUSH
37579: LD_VAR 0 3
37583: PUSH
37584: LD_VAR 0 4
37588: PUSH
37589: LD_VAR 0 5
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: ST_TO_ADDR
// exit ;
37600: GO 37897
// end ; if not chassis in _chassis then
37602: LD_VAR 0 2
37606: PUSH
37607: LD_VAR 0 9
37611: IN
37612: NOT
37613: IFFALSE 37639
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37615: LD_ADDR_VAR 0 2
37619: PUSH
37620: LD_VAR 0 9
37624: PUSH
37625: LD_INT 1
37627: PPUSH
37628: LD_VAR 0 9
37632: PPUSH
37633: CALL_OW 12
37637: ARRAY
37638: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37639: LD_VAR 0 2
37643: PPUSH
37644: LD_VAR 0 3
37648: PPUSH
37649: CALL 37902 0 2
37653: NOT
37654: IFFALSE 37715
// repeat engine := _engine [ 1 ] ;
37656: LD_ADDR_VAR 0 3
37660: PUSH
37661: LD_VAR 0 11
37665: PUSH
37666: LD_INT 1
37668: ARRAY
37669: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37670: LD_ADDR_VAR 0 11
37674: PUSH
37675: LD_VAR 0 11
37679: PPUSH
37680: LD_INT 1
37682: PPUSH
37683: CALL_OW 3
37687: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37688: LD_VAR 0 2
37692: PPUSH
37693: LD_VAR 0 3
37697: PPUSH
37698: CALL 37902 0 2
37702: IFTRUE 37713
37704: PUSH
37705: LD_VAR 0 11
37709: PUSH
37710: EMPTY
37711: EQUAL
37712: OR
37713: IFFALSE 37656
// if not control in _control then
37715: LD_VAR 0 4
37719: PUSH
37720: LD_VAR 0 12
37724: IN
37725: NOT
37726: IFFALSE 37752
// control := _control [ rand ( 1 , _control ) ] ;
37728: LD_ADDR_VAR 0 4
37732: PUSH
37733: LD_VAR 0 12
37737: PUSH
37738: LD_INT 1
37740: PPUSH
37741: LD_VAR 0 12
37745: PPUSH
37746: CALL_OW 12
37750: ARRAY
37751: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37752: LD_VAR 0 2
37756: PPUSH
37757: LD_VAR 0 5
37761: PPUSH
37762: CALL 38124 0 2
37766: NOT
37767: IFFALSE 37828
// repeat weapon := _weapon [ 1 ] ;
37769: LD_ADDR_VAR 0 5
37773: PUSH
37774: LD_VAR 0 10
37778: PUSH
37779: LD_INT 1
37781: ARRAY
37782: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37783: LD_ADDR_VAR 0 10
37787: PUSH
37788: LD_VAR 0 10
37792: PPUSH
37793: LD_INT 1
37795: PPUSH
37796: CALL_OW 3
37800: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37801: LD_VAR 0 2
37805: PPUSH
37806: LD_VAR 0 5
37810: PPUSH
37811: CALL 38124 0 2
37815: IFTRUE 37826
37817: PUSH
37818: LD_VAR 0 10
37822: PUSH
37823: EMPTY
37824: EQUAL
37825: OR
37826: IFFALSE 37769
// result := [ ] ;
37828: LD_ADDR_VAR 0 6
37832: PUSH
37833: EMPTY
37834: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37835: LD_VAR 0 1
37839: PPUSH
37840: LD_VAR 0 2
37844: PPUSH
37845: LD_VAR 0 3
37849: PPUSH
37850: LD_VAR 0 4
37854: PPUSH
37855: LD_VAR 0 5
37859: PPUSH
37860: CALL_OW 448
37864: IFFALSE 37897
// result := [ chassis , engine , control , weapon ] ;
37866: LD_ADDR_VAR 0 6
37870: PUSH
37871: LD_VAR 0 2
37875: PUSH
37876: LD_VAR 0 3
37880: PUSH
37881: LD_VAR 0 4
37885: PUSH
37886: LD_VAR 0 5
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: ST_TO_ADDR
// end ;
37897: LD_VAR 0 6
37901: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37902: LD_INT 0
37904: PPUSH
// if not chassis or not engine then
37905: LD_VAR 0 1
37909: NOT
37910: IFTRUE 37919
37912: PUSH
37913: LD_VAR 0 2
37917: NOT
37918: OR
37919: IFFALSE 37923
// exit ;
37921: GO 38119
// case engine of engine_solar :
37923: LD_VAR 0 2
37927: PUSH
37928: LD_INT 2
37930: DOUBLE
37931: EQUAL
37932: IFTRUE 37936
37934: GO 37974
37936: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37937: LD_ADDR_VAR 0 3
37941: PUSH
37942: LD_INT 11
37944: PUSH
37945: LD_INT 12
37947: PUSH
37948: LD_INT 13
37950: PUSH
37951: LD_INT 14
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: LD_INT 3
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: ST_TO_ADDR
37972: GO 38103
37974: LD_INT 1
37976: DOUBLE
37977: EQUAL
37978: IFTRUE 37982
37980: GO 38044
37982: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37983: LD_ADDR_VAR 0 3
37987: PUSH
37988: LD_INT 11
37990: PUSH
37991: LD_INT 12
37993: PUSH
37994: LD_INT 13
37996: PUSH
37997: LD_INT 14
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: LD_INT 3
38008: PUSH
38009: LD_INT 4
38011: PUSH
38012: LD_INT 5
38014: PUSH
38015: LD_INT 21
38017: PUSH
38018: LD_INT 23
38020: PUSH
38021: LD_INT 22
38023: PUSH
38024: LD_INT 24
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: ST_TO_ADDR
38042: GO 38103
38044: LD_INT 3
38046: DOUBLE
38047: EQUAL
38048: IFTRUE 38052
38050: GO 38102
38052: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38053: LD_ADDR_VAR 0 3
38057: PUSH
38058: LD_INT 13
38060: PUSH
38061: LD_INT 14
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: LD_INT 3
38069: PUSH
38070: LD_INT 4
38072: PUSH
38073: LD_INT 5
38075: PUSH
38076: LD_INT 21
38078: PUSH
38079: LD_INT 22
38081: PUSH
38082: LD_INT 23
38084: PUSH
38085: LD_INT 24
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: ST_TO_ADDR
38100: GO 38103
38102: POP
// result := ( chassis in result ) ;
38103: LD_ADDR_VAR 0 3
38107: PUSH
38108: LD_VAR 0 1
38112: PUSH
38113: LD_VAR 0 3
38117: IN
38118: ST_TO_ADDR
// end ;
38119: LD_VAR 0 3
38123: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38124: LD_INT 0
38126: PPUSH
// if not chassis or not weapon then
38127: LD_VAR 0 1
38131: NOT
38132: IFTRUE 38141
38134: PUSH
38135: LD_VAR 0 2
38139: NOT
38140: OR
38141: IFFALSE 38145
// exit ;
38143: GO 39205
// case weapon of us_machine_gun :
38145: LD_VAR 0 2
38149: PUSH
38150: LD_INT 2
38152: DOUBLE
38153: EQUAL
38154: IFTRUE 38158
38156: GO 38188
38158: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38159: LD_ADDR_VAR 0 3
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: LD_INT 3
38172: PUSH
38173: LD_INT 4
38175: PUSH
38176: LD_INT 5
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: ST_TO_ADDR
38186: GO 39189
38188: LD_INT 3
38190: DOUBLE
38191: EQUAL
38192: IFTRUE 38196
38194: GO 38226
38196: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38197: LD_ADDR_VAR 0 3
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: LD_INT 2
38207: PUSH
38208: LD_INT 3
38210: PUSH
38211: LD_INT 4
38213: PUSH
38214: LD_INT 5
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: ST_TO_ADDR
38224: GO 39189
38226: LD_INT 11
38228: DOUBLE
38229: EQUAL
38230: IFTRUE 38234
38232: GO 38264
38234: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38235: LD_ADDR_VAR 0 3
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 3
38248: PUSH
38249: LD_INT 4
38251: PUSH
38252: LD_INT 5
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: ST_TO_ADDR
38262: GO 39189
38264: LD_INT 4
38266: DOUBLE
38267: EQUAL
38268: IFTRUE 38272
38270: GO 38298
38272: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38273: LD_ADDR_VAR 0 3
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: LD_INT 3
38283: PUSH
38284: LD_INT 4
38286: PUSH
38287: LD_INT 5
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: ST_TO_ADDR
38296: GO 39189
38298: LD_INT 5
38300: DOUBLE
38301: EQUAL
38302: IFTRUE 38306
38304: GO 38332
38306: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38307: LD_ADDR_VAR 0 3
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: LD_INT 3
38317: PUSH
38318: LD_INT 4
38320: PUSH
38321: LD_INT 5
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: ST_TO_ADDR
38330: GO 39189
38332: LD_INT 9
38334: DOUBLE
38335: EQUAL
38336: IFTRUE 38340
38338: GO 38366
38340: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38341: LD_ADDR_VAR 0 3
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: LD_INT 3
38351: PUSH
38352: LD_INT 4
38354: PUSH
38355: LD_INT 5
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: ST_TO_ADDR
38364: GO 39189
38366: LD_INT 7
38368: DOUBLE
38369: EQUAL
38370: IFTRUE 38374
38372: GO 38400
38374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38375: LD_ADDR_VAR 0 3
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: LD_INT 3
38385: PUSH
38386: LD_INT 4
38388: PUSH
38389: LD_INT 5
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: ST_TO_ADDR
38398: GO 39189
38400: LD_INT 12
38402: DOUBLE
38403: EQUAL
38404: IFTRUE 38408
38406: GO 38434
38408: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38409: LD_ADDR_VAR 0 3
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: LD_INT 3
38419: PUSH
38420: LD_INT 4
38422: PUSH
38423: LD_INT 5
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: ST_TO_ADDR
38432: GO 39189
38434: LD_INT 13
38436: DOUBLE
38437: EQUAL
38438: IFTRUE 38442
38440: GO 38468
38442: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38443: LD_ADDR_VAR 0 3
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: LD_INT 3
38453: PUSH
38454: LD_INT 4
38456: PUSH
38457: LD_INT 5
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: ST_TO_ADDR
38466: GO 39189
38468: LD_INT 14
38470: DOUBLE
38471: EQUAL
38472: IFTRUE 38476
38474: GO 38494
38476: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38477: LD_ADDR_VAR 0 3
38481: PUSH
38482: LD_INT 4
38484: PUSH
38485: LD_INT 5
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: ST_TO_ADDR
38492: GO 39189
38494: LD_INT 6
38496: DOUBLE
38497: EQUAL
38498: IFTRUE 38502
38500: GO 38520
38502: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38503: LD_ADDR_VAR 0 3
38507: PUSH
38508: LD_INT 4
38510: PUSH
38511: LD_INT 5
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: ST_TO_ADDR
38518: GO 39189
38520: LD_INT 10
38522: DOUBLE
38523: EQUAL
38524: IFTRUE 38528
38526: GO 38546
38528: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38529: LD_ADDR_VAR 0 3
38533: PUSH
38534: LD_INT 4
38536: PUSH
38537: LD_INT 5
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: ST_TO_ADDR
38544: GO 39189
38546: LD_INT 22
38548: DOUBLE
38549: EQUAL
38550: IFTRUE 38554
38552: GO 38580
38554: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38555: LD_ADDR_VAR 0 3
38559: PUSH
38560: LD_INT 11
38562: PUSH
38563: LD_INT 12
38565: PUSH
38566: LD_INT 13
38568: PUSH
38569: LD_INT 14
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: ST_TO_ADDR
38578: GO 39189
38580: LD_INT 23
38582: DOUBLE
38583: EQUAL
38584: IFTRUE 38588
38586: GO 38614
38588: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38589: LD_ADDR_VAR 0 3
38593: PUSH
38594: LD_INT 11
38596: PUSH
38597: LD_INT 12
38599: PUSH
38600: LD_INT 13
38602: PUSH
38603: LD_INT 14
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: ST_TO_ADDR
38612: GO 39189
38614: LD_INT 24
38616: DOUBLE
38617: EQUAL
38618: IFTRUE 38622
38620: GO 38648
38622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38623: LD_ADDR_VAR 0 3
38627: PUSH
38628: LD_INT 11
38630: PUSH
38631: LD_INT 12
38633: PUSH
38634: LD_INT 13
38636: PUSH
38637: LD_INT 14
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: ST_TO_ADDR
38646: GO 39189
38648: LD_INT 30
38650: DOUBLE
38651: EQUAL
38652: IFTRUE 38656
38654: GO 38682
38656: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38657: LD_ADDR_VAR 0 3
38661: PUSH
38662: LD_INT 11
38664: PUSH
38665: LD_INT 12
38667: PUSH
38668: LD_INT 13
38670: PUSH
38671: LD_INT 14
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: ST_TO_ADDR
38680: GO 39189
38682: LD_INT 25
38684: DOUBLE
38685: EQUAL
38686: IFTRUE 38690
38688: GO 38708
38690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38691: LD_ADDR_VAR 0 3
38695: PUSH
38696: LD_INT 13
38698: PUSH
38699: LD_INT 14
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: ST_TO_ADDR
38706: GO 39189
38708: LD_INT 27
38710: DOUBLE
38711: EQUAL
38712: IFTRUE 38716
38714: GO 38734
38716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38717: LD_ADDR_VAR 0 3
38721: PUSH
38722: LD_INT 13
38724: PUSH
38725: LD_INT 14
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: ST_TO_ADDR
38732: GO 39189
38734: LD_INT 92
38736: DOUBLE
38737: EQUAL
38738: IFTRUE 38742
38740: GO 38768
38742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38743: LD_ADDR_VAR 0 3
38747: PUSH
38748: LD_INT 11
38750: PUSH
38751: LD_INT 12
38753: PUSH
38754: LD_INT 13
38756: PUSH
38757: LD_INT 14
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: ST_TO_ADDR
38766: GO 39189
38768: LD_INT 28
38770: DOUBLE
38771: EQUAL
38772: IFTRUE 38776
38774: GO 38794
38776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38777: LD_ADDR_VAR 0 3
38781: PUSH
38782: LD_INT 13
38784: PUSH
38785: LD_INT 14
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: ST_TO_ADDR
38792: GO 39189
38794: LD_INT 29
38796: DOUBLE
38797: EQUAL
38798: IFTRUE 38802
38800: GO 38820
38802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38803: LD_ADDR_VAR 0 3
38807: PUSH
38808: LD_INT 13
38810: PUSH
38811: LD_INT 14
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: ST_TO_ADDR
38818: GO 39189
38820: LD_INT 31
38822: DOUBLE
38823: EQUAL
38824: IFTRUE 38828
38826: GO 38846
38828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38829: LD_ADDR_VAR 0 3
38833: PUSH
38834: LD_INT 13
38836: PUSH
38837: LD_INT 14
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: ST_TO_ADDR
38844: GO 39189
38846: LD_INT 26
38848: DOUBLE
38849: EQUAL
38850: IFTRUE 38854
38852: GO 38872
38854: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38855: LD_ADDR_VAR 0 3
38859: PUSH
38860: LD_INT 13
38862: PUSH
38863: LD_INT 14
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: ST_TO_ADDR
38870: GO 39189
38872: LD_INT 42
38874: DOUBLE
38875: EQUAL
38876: IFTRUE 38880
38878: GO 38906
38880: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38881: LD_ADDR_VAR 0 3
38885: PUSH
38886: LD_INT 21
38888: PUSH
38889: LD_INT 22
38891: PUSH
38892: LD_INT 23
38894: PUSH
38895: LD_INT 24
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: ST_TO_ADDR
38904: GO 39189
38906: LD_INT 43
38908: DOUBLE
38909: EQUAL
38910: IFTRUE 38914
38912: GO 38940
38914: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38915: LD_ADDR_VAR 0 3
38919: PUSH
38920: LD_INT 21
38922: PUSH
38923: LD_INT 22
38925: PUSH
38926: LD_INT 23
38928: PUSH
38929: LD_INT 24
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: ST_TO_ADDR
38938: GO 39189
38940: LD_INT 44
38942: DOUBLE
38943: EQUAL
38944: IFTRUE 38948
38946: GO 38974
38948: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38949: LD_ADDR_VAR 0 3
38953: PUSH
38954: LD_INT 21
38956: PUSH
38957: LD_INT 22
38959: PUSH
38960: LD_INT 23
38962: PUSH
38963: LD_INT 24
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: ST_TO_ADDR
38972: GO 39189
38974: LD_INT 45
38976: DOUBLE
38977: EQUAL
38978: IFTRUE 38982
38980: GO 39008
38982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38983: LD_ADDR_VAR 0 3
38987: PUSH
38988: LD_INT 21
38990: PUSH
38991: LD_INT 22
38993: PUSH
38994: LD_INT 23
38996: PUSH
38997: LD_INT 24
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: ST_TO_ADDR
39006: GO 39189
39008: LD_INT 49
39010: DOUBLE
39011: EQUAL
39012: IFTRUE 39016
39014: GO 39042
39016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39017: LD_ADDR_VAR 0 3
39021: PUSH
39022: LD_INT 21
39024: PUSH
39025: LD_INT 22
39027: PUSH
39028: LD_INT 23
39030: PUSH
39031: LD_INT 24
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: ST_TO_ADDR
39040: GO 39189
39042: LD_INT 51
39044: DOUBLE
39045: EQUAL
39046: IFTRUE 39050
39048: GO 39076
39050: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39051: LD_ADDR_VAR 0 3
39055: PUSH
39056: LD_INT 21
39058: PUSH
39059: LD_INT 22
39061: PUSH
39062: LD_INT 23
39064: PUSH
39065: LD_INT 24
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: ST_TO_ADDR
39074: GO 39189
39076: LD_INT 52
39078: DOUBLE
39079: EQUAL
39080: IFTRUE 39084
39082: GO 39110
39084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39085: LD_ADDR_VAR 0 3
39089: PUSH
39090: LD_INT 21
39092: PUSH
39093: LD_INT 22
39095: PUSH
39096: LD_INT 23
39098: PUSH
39099: LD_INT 24
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: ST_TO_ADDR
39108: GO 39189
39110: LD_INT 53
39112: DOUBLE
39113: EQUAL
39114: IFTRUE 39118
39116: GO 39136
39118: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39119: LD_ADDR_VAR 0 3
39123: PUSH
39124: LD_INT 23
39126: PUSH
39127: LD_INT 24
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: ST_TO_ADDR
39134: GO 39189
39136: LD_INT 46
39138: DOUBLE
39139: EQUAL
39140: IFTRUE 39144
39142: GO 39162
39144: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39145: LD_ADDR_VAR 0 3
39149: PUSH
39150: LD_INT 23
39152: PUSH
39153: LD_INT 24
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: ST_TO_ADDR
39160: GO 39189
39162: LD_INT 47
39164: DOUBLE
39165: EQUAL
39166: IFTRUE 39170
39168: GO 39188
39170: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39171: LD_ADDR_VAR 0 3
39175: PUSH
39176: LD_INT 23
39178: PUSH
39179: LD_INT 24
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: ST_TO_ADDR
39186: GO 39189
39188: POP
// result := ( chassis in result ) ;
39189: LD_ADDR_VAR 0 3
39193: PUSH
39194: LD_VAR 0 1
39198: PUSH
39199: LD_VAR 0 3
39203: IN
39204: ST_TO_ADDR
// end ;
39205: LD_VAR 0 3
39209: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39210: LD_INT 0
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
39216: PPUSH
39217: PPUSH
39218: PPUSH
// result := array ;
39219: LD_ADDR_VAR 0 5
39223: PUSH
39224: LD_VAR 0 1
39228: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39229: LD_VAR 0 1
39233: NOT
39234: IFTRUE 39243
39236: PUSH
39237: LD_VAR 0 2
39241: NOT
39242: OR
39243: IFTRUE 39252
39245: PUSH
39246: LD_VAR 0 3
39250: NOT
39251: OR
39252: IFTRUE 39266
39254: PUSH
39255: LD_VAR 0 2
39259: PUSH
39260: LD_VAR 0 1
39264: GREATER
39265: OR
39266: IFTRUE 39280
39268: PUSH
39269: LD_VAR 0 3
39273: PUSH
39274: LD_VAR 0 1
39278: GREATER
39279: OR
39280: IFFALSE 39284
// exit ;
39282: GO 39580
// if direction then
39284: LD_VAR 0 4
39288: IFFALSE 39352
// begin d := 1 ;
39290: LD_ADDR_VAR 0 9
39294: PUSH
39295: LD_INT 1
39297: ST_TO_ADDR
// if i_from > i_to then
39298: LD_VAR 0 2
39302: PUSH
39303: LD_VAR 0 3
39307: GREATER
39308: IFFALSE 39334
// length := ( array - i_from ) + i_to else
39310: LD_ADDR_VAR 0 11
39314: PUSH
39315: LD_VAR 0 1
39319: PUSH
39320: LD_VAR 0 2
39324: MINUS
39325: PUSH
39326: LD_VAR 0 3
39330: PLUS
39331: ST_TO_ADDR
39332: GO 39350
// length := i_to - i_from ;
39334: LD_ADDR_VAR 0 11
39338: PUSH
39339: LD_VAR 0 3
39343: PUSH
39344: LD_VAR 0 2
39348: MINUS
39349: ST_TO_ADDR
// end else
39350: GO 39413
// begin d := - 1 ;
39352: LD_ADDR_VAR 0 9
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: ST_TO_ADDR
// if i_from > i_to then
39361: LD_VAR 0 2
39365: PUSH
39366: LD_VAR 0 3
39370: GREATER
39371: IFFALSE 39391
// length := i_from - i_to else
39373: LD_ADDR_VAR 0 11
39377: PUSH
39378: LD_VAR 0 2
39382: PUSH
39383: LD_VAR 0 3
39387: MINUS
39388: ST_TO_ADDR
39389: GO 39413
// length := ( array - i_to ) + i_from ;
39391: LD_ADDR_VAR 0 11
39395: PUSH
39396: LD_VAR 0 1
39400: PUSH
39401: LD_VAR 0 3
39405: MINUS
39406: PUSH
39407: LD_VAR 0 2
39411: PLUS
39412: ST_TO_ADDR
// end ; if not length then
39413: LD_VAR 0 11
39417: NOT
39418: IFFALSE 39422
// exit ;
39420: GO 39580
// tmp := array ;
39422: LD_ADDR_VAR 0 10
39426: PUSH
39427: LD_VAR 0 1
39431: ST_TO_ADDR
// for i = 1 to length do
39432: LD_ADDR_VAR 0 6
39436: PUSH
39437: DOUBLE
39438: LD_INT 1
39440: DEC
39441: ST_TO_ADDR
39442: LD_VAR 0 11
39446: PUSH
39447: FOR_TO
39448: IFFALSE 39568
// begin for j = 1 to array do
39450: LD_ADDR_VAR 0 7
39454: PUSH
39455: DOUBLE
39456: LD_INT 1
39458: DEC
39459: ST_TO_ADDR
39460: LD_VAR 0 1
39464: PUSH
39465: FOR_TO
39466: IFFALSE 39554
// begin k := j + d ;
39468: LD_ADDR_VAR 0 8
39472: PUSH
39473: LD_VAR 0 7
39477: PUSH
39478: LD_VAR 0 9
39482: PLUS
39483: ST_TO_ADDR
// if k > array then
39484: LD_VAR 0 8
39488: PUSH
39489: LD_VAR 0 1
39493: GREATER
39494: IFFALSE 39504
// k := 1 ;
39496: LD_ADDR_VAR 0 8
39500: PUSH
39501: LD_INT 1
39503: ST_TO_ADDR
// if not k then
39504: LD_VAR 0 8
39508: NOT
39509: IFFALSE 39521
// k := array ;
39511: LD_ADDR_VAR 0 8
39515: PUSH
39516: LD_VAR 0 1
39520: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39521: LD_ADDR_VAR 0 10
39525: PUSH
39526: LD_VAR 0 10
39530: PPUSH
39531: LD_VAR 0 8
39535: PPUSH
39536: LD_VAR 0 1
39540: PUSH
39541: LD_VAR 0 7
39545: ARRAY
39546: PPUSH
39547: CALL_OW 1
39551: ST_TO_ADDR
// end ;
39552: GO 39465
39554: POP
39555: POP
// array := tmp ;
39556: LD_ADDR_VAR 0 1
39560: PUSH
39561: LD_VAR 0 10
39565: ST_TO_ADDR
// end ;
39566: GO 39447
39568: POP
39569: POP
// result := array ;
39570: LD_ADDR_VAR 0 5
39574: PUSH
39575: LD_VAR 0 1
39579: ST_TO_ADDR
// end ;
39580: LD_VAR 0 5
39584: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39585: LD_INT 0
39587: PPUSH
39588: PPUSH
// result := 0 ;
39589: LD_ADDR_VAR 0 3
39593: PUSH
39594: LD_INT 0
39596: ST_TO_ADDR
// if not array or not value in array then
39597: LD_VAR 0 1
39601: NOT
39602: IFTRUE 39617
39604: PUSH
39605: LD_VAR 0 2
39609: PUSH
39610: LD_VAR 0 1
39614: IN
39615: NOT
39616: OR
39617: IFFALSE 39621
// exit ;
39619: GO 39675
// for i = 1 to array do
39621: LD_ADDR_VAR 0 4
39625: PUSH
39626: DOUBLE
39627: LD_INT 1
39629: DEC
39630: ST_TO_ADDR
39631: LD_VAR 0 1
39635: PUSH
39636: FOR_TO
39637: IFFALSE 39673
// if value = array [ i ] then
39639: LD_VAR 0 2
39643: PUSH
39644: LD_VAR 0 1
39648: PUSH
39649: LD_VAR 0 4
39653: ARRAY
39654: EQUAL
39655: IFFALSE 39671
// begin result := i ;
39657: LD_ADDR_VAR 0 3
39661: PUSH
39662: LD_VAR 0 4
39666: ST_TO_ADDR
// exit ;
39667: POP
39668: POP
39669: GO 39675
// end ;
39671: GO 39636
39673: POP
39674: POP
// end ;
39675: LD_VAR 0 3
39679: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39680: LD_INT 0
39682: PPUSH
// vc_chassis := chassis ;
39683: LD_ADDR_OWVAR 37
39687: PUSH
39688: LD_VAR 0 1
39692: ST_TO_ADDR
// vc_engine := engine ;
39693: LD_ADDR_OWVAR 39
39697: PUSH
39698: LD_VAR 0 2
39702: ST_TO_ADDR
// vc_control := control ;
39703: LD_ADDR_OWVAR 38
39707: PUSH
39708: LD_VAR 0 3
39712: ST_TO_ADDR
// vc_weapon := weapon ;
39713: LD_ADDR_OWVAR 40
39717: PUSH
39718: LD_VAR 0 4
39722: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39723: LD_ADDR_OWVAR 41
39727: PUSH
39728: LD_VAR 0 5
39732: ST_TO_ADDR
// end ;
39733: LD_VAR 0 6
39737: RET
// export function WantPlant ( unit ) ; var task ; begin
39738: LD_INT 0
39740: PPUSH
39741: PPUSH
// result := false ;
39742: LD_ADDR_VAR 0 2
39746: PUSH
39747: LD_INT 0
39749: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39750: LD_ADDR_VAR 0 3
39754: PUSH
39755: LD_VAR 0 1
39759: PPUSH
39760: CALL_OW 437
39764: ST_TO_ADDR
// if task then
39765: LD_VAR 0 3
39769: IFFALSE 39797
// if task [ 1 ] [ 1 ] = p then
39771: LD_VAR 0 3
39775: PUSH
39776: LD_INT 1
39778: ARRAY
39779: PUSH
39780: LD_INT 1
39782: ARRAY
39783: PUSH
39784: LD_STRING p
39786: EQUAL
39787: IFFALSE 39797
// result := true ;
39789: LD_ADDR_VAR 0 2
39793: PUSH
39794: LD_INT 1
39796: ST_TO_ADDR
// end ;
39797: LD_VAR 0 2
39801: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39802: LD_INT 0
39804: PPUSH
39805: PPUSH
39806: PPUSH
39807: PPUSH
// if pos < 1 then
39808: LD_VAR 0 2
39812: PUSH
39813: LD_INT 1
39815: LESS
39816: IFFALSE 39820
// exit ;
39818: GO 40123
// if pos = 1 then
39820: LD_VAR 0 2
39824: PUSH
39825: LD_INT 1
39827: EQUAL
39828: IFFALSE 39861
// result := Replace ( arr , pos [ 1 ] , value ) else
39830: LD_ADDR_VAR 0 4
39834: PUSH
39835: LD_VAR 0 1
39839: PPUSH
39840: LD_VAR 0 2
39844: PUSH
39845: LD_INT 1
39847: ARRAY
39848: PPUSH
39849: LD_VAR 0 3
39853: PPUSH
39854: CALL_OW 1
39858: ST_TO_ADDR
39859: GO 40123
// begin tmp := arr ;
39861: LD_ADDR_VAR 0 6
39865: PUSH
39866: LD_VAR 0 1
39870: ST_TO_ADDR
// s_arr := [ tmp ] ;
39871: LD_ADDR_VAR 0 7
39875: PUSH
39876: LD_VAR 0 6
39880: PUSH
39881: EMPTY
39882: LIST
39883: ST_TO_ADDR
// for i = 1 to pos - 1 do
39884: LD_ADDR_VAR 0 5
39888: PUSH
39889: DOUBLE
39890: LD_INT 1
39892: DEC
39893: ST_TO_ADDR
39894: LD_VAR 0 2
39898: PUSH
39899: LD_INT 1
39901: MINUS
39902: PUSH
39903: FOR_TO
39904: IFFALSE 39949
// begin tmp := tmp [ pos [ i ] ] ;
39906: LD_ADDR_VAR 0 6
39910: PUSH
39911: LD_VAR 0 6
39915: PUSH
39916: LD_VAR 0 2
39920: PUSH
39921: LD_VAR 0 5
39925: ARRAY
39926: ARRAY
39927: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39928: LD_ADDR_VAR 0 7
39932: PUSH
39933: LD_VAR 0 7
39937: PUSH
39938: LD_VAR 0 6
39942: PUSH
39943: EMPTY
39944: LIST
39945: ADD
39946: ST_TO_ADDR
// end ;
39947: GO 39903
39949: POP
39950: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39951: LD_ADDR_VAR 0 6
39955: PUSH
39956: LD_VAR 0 6
39960: PPUSH
39961: LD_VAR 0 2
39965: PUSH
39966: LD_VAR 0 2
39970: ARRAY
39971: PPUSH
39972: LD_VAR 0 3
39976: PPUSH
39977: CALL_OW 1
39981: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39982: LD_ADDR_VAR 0 7
39986: PUSH
39987: LD_VAR 0 7
39991: PPUSH
39992: LD_VAR 0 7
39996: PPUSH
39997: LD_VAR 0 6
40001: PPUSH
40002: CALL_OW 1
40006: ST_TO_ADDR
// for i = s_arr downto 2 do
40007: LD_ADDR_VAR 0 5
40011: PUSH
40012: DOUBLE
40013: LD_VAR 0 7
40017: INC
40018: ST_TO_ADDR
40019: LD_INT 2
40021: PUSH
40022: FOR_DOWNTO
40023: IFFALSE 40107
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40025: LD_ADDR_VAR 0 6
40029: PUSH
40030: LD_VAR 0 7
40034: PUSH
40035: LD_VAR 0 5
40039: PUSH
40040: LD_INT 1
40042: MINUS
40043: ARRAY
40044: PPUSH
40045: LD_VAR 0 2
40049: PUSH
40050: LD_VAR 0 5
40054: PUSH
40055: LD_INT 1
40057: MINUS
40058: ARRAY
40059: PPUSH
40060: LD_VAR 0 7
40064: PUSH
40065: LD_VAR 0 5
40069: ARRAY
40070: PPUSH
40071: CALL_OW 1
40075: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40076: LD_ADDR_VAR 0 7
40080: PUSH
40081: LD_VAR 0 7
40085: PPUSH
40086: LD_VAR 0 5
40090: PUSH
40091: LD_INT 1
40093: MINUS
40094: PPUSH
40095: LD_VAR 0 6
40099: PPUSH
40100: CALL_OW 1
40104: ST_TO_ADDR
// end ;
40105: GO 40022
40107: POP
40108: POP
// result := s_arr [ 1 ] ;
40109: LD_ADDR_VAR 0 4
40113: PUSH
40114: LD_VAR 0 7
40118: PUSH
40119: LD_INT 1
40121: ARRAY
40122: ST_TO_ADDR
// end ; end ;
40123: LD_VAR 0 4
40127: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40128: LD_INT 0
40130: PPUSH
40131: PPUSH
// if not list then
40132: LD_VAR 0 1
40136: NOT
40137: IFFALSE 40141
// exit ;
40139: GO 40232
// i := list [ pos1 ] ;
40141: LD_ADDR_VAR 0 5
40145: PUSH
40146: LD_VAR 0 1
40150: PUSH
40151: LD_VAR 0 2
40155: ARRAY
40156: ST_TO_ADDR
// if not i then
40157: LD_VAR 0 5
40161: NOT
40162: IFFALSE 40166
// exit ;
40164: GO 40232
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40166: LD_ADDR_VAR 0 1
40170: PUSH
40171: LD_VAR 0 1
40175: PPUSH
40176: LD_VAR 0 2
40180: PPUSH
40181: LD_VAR 0 1
40185: PUSH
40186: LD_VAR 0 3
40190: ARRAY
40191: PPUSH
40192: CALL_OW 1
40196: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40197: LD_ADDR_VAR 0 1
40201: PUSH
40202: LD_VAR 0 1
40206: PPUSH
40207: LD_VAR 0 3
40211: PPUSH
40212: LD_VAR 0 5
40216: PPUSH
40217: CALL_OW 1
40221: ST_TO_ADDR
// result := list ;
40222: LD_ADDR_VAR 0 4
40226: PUSH
40227: LD_VAR 0 1
40231: ST_TO_ADDR
// end ;
40232: LD_VAR 0 4
40236: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40237: LD_INT 0
40239: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40240: LD_ADDR_VAR 0 5
40244: PUSH
40245: LD_VAR 0 1
40249: PPUSH
40250: CALL_OW 250
40254: PPUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: CALL_OW 251
40264: PPUSH
40265: LD_VAR 0 2
40269: PPUSH
40270: LD_VAR 0 3
40274: PPUSH
40275: LD_VAR 0 4
40279: PPUSH
40280: CALL 40662 0 5
40284: ST_TO_ADDR
// end ;
40285: LD_VAR 0 5
40289: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
40290: LD_INT 0
40292: PPUSH
40293: PPUSH
40294: PPUSH
40295: PPUSH
// if not list or not unit then
40296: LD_VAR 0 2
40300: NOT
40301: IFTRUE 40310
40303: PUSH
40304: LD_VAR 0 1
40308: NOT
40309: OR
40310: IFFALSE 40314
// exit ;
40312: GO 40657
// result := [ ] ;
40314: LD_ADDR_VAR 0 5
40318: PUSH
40319: EMPTY
40320: ST_TO_ADDR
// for i in list do
40321: LD_ADDR_VAR 0 6
40325: PUSH
40326: LD_VAR 0 2
40330: PUSH
40331: FOR_IN
40332: IFFALSE 40550
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40334: LD_ADDR_VAR 0 8
40338: PUSH
40339: LD_VAR 0 1
40343: PPUSH
40344: LD_VAR 0 6
40348: PUSH
40349: LD_INT 1
40351: ARRAY
40352: PPUSH
40353: LD_VAR 0 6
40357: PUSH
40358: LD_INT 2
40360: ARRAY
40361: PPUSH
40362: CALL_OW 297
40366: ST_TO_ADDR
// if not Count ( result ) then
40367: LD_VAR 0 5
40371: PPUSH
40372: CALL 36918 0 1
40376: NOT
40377: IFFALSE 40410
// begin result := Join ( result , [ i , tmp ] ) ;
40379: LD_ADDR_VAR 0 5
40383: PUSH
40384: LD_VAR 0 5
40388: PPUSH
40389: LD_VAR 0 6
40393: PUSH
40394: LD_VAR 0 8
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PPUSH
40403: CALL 72850 0 2
40407: ST_TO_ADDR
// continue ;
40408: GO 40331
// end ; if result [ result ] [ 2 ] <= tmp then
40410: LD_VAR 0 5
40414: PUSH
40415: LD_VAR 0 5
40419: ARRAY
40420: PUSH
40421: LD_INT 2
40423: ARRAY
40424: PUSH
40425: LD_VAR 0 8
40429: LESSEQUAL
40430: IFFALSE 40463
// result := Join ( result , [ i , tmp ] ) else
40432: LD_ADDR_VAR 0 5
40436: PUSH
40437: LD_VAR 0 5
40441: PPUSH
40442: LD_VAR 0 6
40446: PUSH
40447: LD_VAR 0 8
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PPUSH
40456: CALL 72850 0 2
40460: ST_TO_ADDR
40461: GO 40548
// begin for j := 1 to Count ( result ) do
40463: LD_ADDR_VAR 0 7
40467: PUSH
40468: DOUBLE
40469: LD_INT 1
40471: DEC
40472: ST_TO_ADDR
40473: LD_VAR 0 5
40477: PPUSH
40478: CALL 36918 0 1
40482: PUSH
40483: FOR_TO
40484: IFFALSE 40546
// begin if tmp < result [ j ] [ 2 ] then
40486: LD_VAR 0 8
40490: PUSH
40491: LD_VAR 0 5
40495: PUSH
40496: LD_VAR 0 7
40500: ARRAY
40501: PUSH
40502: LD_INT 2
40504: ARRAY
40505: LESS
40506: IFFALSE 40544
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40508: LD_ADDR_VAR 0 5
40512: PUSH
40513: LD_VAR 0 5
40517: PPUSH
40518: LD_VAR 0 7
40522: PPUSH
40523: LD_VAR 0 6
40527: PUSH
40528: LD_VAR 0 8
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PPUSH
40537: CALL_OW 2
40541: ST_TO_ADDR
// break ;
40542: GO 40546
// end ; end ;
40544: GO 40483
40546: POP
40547: POP
// end ; end ;
40548: GO 40331
40550: POP
40551: POP
// if result and not asc then
40552: LD_VAR 0 5
40556: IFFALSE 40565
40558: PUSH
40559: LD_VAR 0 3
40563: NOT
40564: AND
40565: IFFALSE 40582
// result := ReverseArray ( result ) ;
40567: LD_ADDR_VAR 0 5
40571: PUSH
40572: LD_VAR 0 5
40576: PPUSH
40577: CALL 67940 0 1
40581: ST_TO_ADDR
// tmp := [ ] ;
40582: LD_ADDR_VAR 0 8
40586: PUSH
40587: EMPTY
40588: ST_TO_ADDR
// if mode then
40589: LD_VAR 0 4
40593: IFFALSE 40657
// begin for i := 1 to result do
40595: LD_ADDR_VAR 0 6
40599: PUSH
40600: DOUBLE
40601: LD_INT 1
40603: DEC
40604: ST_TO_ADDR
40605: LD_VAR 0 5
40609: PUSH
40610: FOR_TO
40611: IFFALSE 40645
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
40613: LD_ADDR_VAR 0 8
40617: PUSH
40618: LD_VAR 0 8
40622: PPUSH
40623: LD_VAR 0 5
40627: PUSH
40628: LD_VAR 0 6
40632: ARRAY
40633: PUSH
40634: LD_INT 1
40636: ARRAY
40637: PPUSH
40638: CALL 72850 0 2
40642: ST_TO_ADDR
40643: GO 40610
40645: POP
40646: POP
// result := tmp ;
40647: LD_ADDR_VAR 0 5
40651: PUSH
40652: LD_VAR 0 8
40656: ST_TO_ADDR
// end ; end ;
40657: LD_VAR 0 5
40661: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40662: LD_INT 0
40664: PPUSH
40665: PPUSH
40666: PPUSH
40667: PPUSH
// if not list then
40668: LD_VAR 0 3
40672: NOT
40673: IFFALSE 40677
// exit ;
40675: GO 41067
// result := [ ] ;
40677: LD_ADDR_VAR 0 6
40681: PUSH
40682: EMPTY
40683: ST_TO_ADDR
// for i in list do
40684: LD_ADDR_VAR 0 7
40688: PUSH
40689: LD_VAR 0 3
40693: PUSH
40694: FOR_IN
40695: IFFALSE 40897
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40697: LD_ADDR_VAR 0 9
40701: PUSH
40702: LD_VAR 0 7
40706: PPUSH
40707: LD_VAR 0 1
40711: PPUSH
40712: LD_VAR 0 2
40716: PPUSH
40717: CALL_OW 297
40721: ST_TO_ADDR
// if not result then
40722: LD_VAR 0 6
40726: NOT
40727: IFFALSE 40753
// result := [ [ i , tmp ] ] else
40729: LD_ADDR_VAR 0 6
40733: PUSH
40734: LD_VAR 0 7
40738: PUSH
40739: LD_VAR 0 9
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: EMPTY
40749: LIST
40750: ST_TO_ADDR
40751: GO 40895
// begin if result [ result ] [ 2 ] <= tmp then
40753: LD_VAR 0 6
40757: PUSH
40758: LD_VAR 0 6
40762: ARRAY
40763: PUSH
40764: LD_INT 2
40766: ARRAY
40767: PUSH
40768: LD_VAR 0 9
40772: LESSEQUAL
40773: IFFALSE 40815
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40775: LD_ADDR_VAR 0 6
40779: PUSH
40780: LD_VAR 0 6
40784: PPUSH
40785: LD_VAR 0 6
40789: PUSH
40790: LD_INT 1
40792: PLUS
40793: PPUSH
40794: LD_VAR 0 7
40798: PUSH
40799: LD_VAR 0 9
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PPUSH
40808: CALL_OW 2
40812: ST_TO_ADDR
40813: GO 40895
// for j := 1 to result do
40815: LD_ADDR_VAR 0 8
40819: PUSH
40820: DOUBLE
40821: LD_INT 1
40823: DEC
40824: ST_TO_ADDR
40825: LD_VAR 0 6
40829: PUSH
40830: FOR_TO
40831: IFFALSE 40893
// begin if tmp < result [ j ] [ 2 ] then
40833: LD_VAR 0 9
40837: PUSH
40838: LD_VAR 0 6
40842: PUSH
40843: LD_VAR 0 8
40847: ARRAY
40848: PUSH
40849: LD_INT 2
40851: ARRAY
40852: LESS
40853: IFFALSE 40891
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40855: LD_ADDR_VAR 0 6
40859: PUSH
40860: LD_VAR 0 6
40864: PPUSH
40865: LD_VAR 0 8
40869: PPUSH
40870: LD_VAR 0 7
40874: PUSH
40875: LD_VAR 0 9
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PPUSH
40884: CALL_OW 2
40888: ST_TO_ADDR
// break ;
40889: GO 40893
// end ; end ;
40891: GO 40830
40893: POP
40894: POP
// end ; end ;
40895: GO 40694
40897: POP
40898: POP
// if result and not asc then
40899: LD_VAR 0 6
40903: IFFALSE 40912
40905: PUSH
40906: LD_VAR 0 4
40910: NOT
40911: AND
40912: IFFALSE 40987
// begin tmp := result ;
40914: LD_ADDR_VAR 0 9
40918: PUSH
40919: LD_VAR 0 6
40923: ST_TO_ADDR
// for i = tmp downto 1 do
40924: LD_ADDR_VAR 0 7
40928: PUSH
40929: DOUBLE
40930: LD_VAR 0 9
40934: INC
40935: ST_TO_ADDR
40936: LD_INT 1
40938: PUSH
40939: FOR_DOWNTO
40940: IFFALSE 40985
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40942: LD_ADDR_VAR 0 6
40946: PUSH
40947: LD_VAR 0 6
40951: PPUSH
40952: LD_VAR 0 9
40956: PUSH
40957: LD_VAR 0 7
40961: MINUS
40962: PUSH
40963: LD_INT 1
40965: PLUS
40966: PPUSH
40967: LD_VAR 0 9
40971: PUSH
40972: LD_VAR 0 7
40976: ARRAY
40977: PPUSH
40978: CALL_OW 1
40982: ST_TO_ADDR
40983: GO 40939
40985: POP
40986: POP
// end ; tmp := [ ] ;
40987: LD_ADDR_VAR 0 9
40991: PUSH
40992: EMPTY
40993: ST_TO_ADDR
// if mode then
40994: LD_VAR 0 5
40998: IFFALSE 41067
// begin for i = 1 to result do
41000: LD_ADDR_VAR 0 7
41004: PUSH
41005: DOUBLE
41006: LD_INT 1
41008: DEC
41009: ST_TO_ADDR
41010: LD_VAR 0 6
41014: PUSH
41015: FOR_TO
41016: IFFALSE 41055
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41018: LD_ADDR_VAR 0 9
41022: PUSH
41023: LD_VAR 0 9
41027: PPUSH
41028: LD_VAR 0 7
41032: PPUSH
41033: LD_VAR 0 6
41037: PUSH
41038: LD_VAR 0 7
41042: ARRAY
41043: PUSH
41044: LD_INT 1
41046: ARRAY
41047: PPUSH
41048: CALL_OW 1
41052: ST_TO_ADDR
41053: GO 41015
41055: POP
41056: POP
// result := tmp ;
41057: LD_ADDR_VAR 0 6
41061: PUSH
41062: LD_VAR 0 9
41066: ST_TO_ADDR
// end ; end ;
41067: LD_VAR 0 6
41071: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41072: LD_INT 0
41074: PPUSH
41075: PPUSH
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41080: LD_ADDR_VAR 0 5
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: ST_TO_ADDR
// if not x or not y then
41102: LD_VAR 0 2
41106: NOT
41107: IFTRUE 41116
41109: PUSH
41110: LD_VAR 0 3
41114: NOT
41115: OR
41116: IFFALSE 41120
// exit ;
41118: GO 42776
// if not range then
41120: LD_VAR 0 4
41124: NOT
41125: IFFALSE 41135
// range := 10 ;
41127: LD_ADDR_VAR 0 4
41131: PUSH
41132: LD_INT 10
41134: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41135: LD_ADDR_VAR 0 8
41139: PUSH
41140: LD_INT 81
41142: PUSH
41143: LD_VAR 0 1
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 92
41154: PUSH
41155: LD_VAR 0 2
41159: PUSH
41160: LD_VAR 0 3
41164: PUSH
41165: LD_VAR 0 4
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 3
41178: PUSH
41179: LD_INT 21
41181: PUSH
41182: LD_INT 3
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: LIST
41197: PPUSH
41198: CALL_OW 69
41202: ST_TO_ADDR
// if not tmp then
41203: LD_VAR 0 8
41207: NOT
41208: IFFALSE 41212
// exit ;
41210: GO 42776
// for i in tmp do
41212: LD_ADDR_VAR 0 6
41216: PUSH
41217: LD_VAR 0 8
41221: PUSH
41222: FOR_IN
41223: IFFALSE 42751
// begin points := [ 0 , 0 , 0 ] ;
41225: LD_ADDR_VAR 0 9
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: ST_TO_ADDR
// bpoints := 1 ;
41244: LD_ADDR_VAR 0 10
41248: PUSH
41249: LD_INT 1
41251: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41252: LD_VAR 0 6
41256: PPUSH
41257: CALL_OW 247
41261: PUSH
41262: LD_INT 1
41264: DOUBLE
41265: EQUAL
41266: IFTRUE 41270
41268: GO 41852
41270: POP
// begin if GetClass ( i ) = 1 then
41271: LD_VAR 0 6
41275: PPUSH
41276: CALL_OW 257
41280: PUSH
41281: LD_INT 1
41283: EQUAL
41284: IFFALSE 41305
// points := [ 10 , 5 , 3 ] ;
41286: LD_ADDR_VAR 0 9
41290: PUSH
41291: LD_INT 10
41293: PUSH
41294: LD_INT 5
41296: PUSH
41297: LD_INT 3
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: LIST
41304: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41305: LD_VAR 0 6
41309: PPUSH
41310: CALL_OW 257
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: LD_INT 4
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: LIST
41328: IN
41329: IFFALSE 41350
// points := [ 3 , 2 , 1 ] ;
41331: LD_ADDR_VAR 0 9
41335: PUSH
41336: LD_INT 3
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: LIST
41349: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41350: LD_VAR 0 6
41354: PPUSH
41355: CALL_OW 257
41359: PUSH
41360: LD_INT 5
41362: EQUAL
41363: IFFALSE 41384
// points := [ 130 , 5 , 2 ] ;
41365: LD_ADDR_VAR 0 9
41369: PUSH
41370: LD_INT 130
41372: PUSH
41373: LD_INT 5
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41384: LD_VAR 0 6
41388: PPUSH
41389: CALL_OW 257
41393: PUSH
41394: LD_INT 8
41396: EQUAL
41397: IFFALSE 41418
// points := [ 35 , 35 , 30 ] ;
41399: LD_ADDR_VAR 0 9
41403: PUSH
41404: LD_INT 35
41406: PUSH
41407: LD_INT 35
41409: PUSH
41410: LD_INT 30
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: LIST
41417: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41418: LD_VAR 0 6
41422: PPUSH
41423: CALL_OW 257
41427: PUSH
41428: LD_INT 9
41430: EQUAL
41431: IFFALSE 41452
// points := [ 20 , 55 , 40 ] ;
41433: LD_ADDR_VAR 0 9
41437: PUSH
41438: LD_INT 20
41440: PUSH
41441: LD_INT 55
41443: PUSH
41444: LD_INT 40
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: LIST
41451: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41452: LD_VAR 0 6
41456: PPUSH
41457: CALL_OW 257
41461: PUSH
41462: LD_INT 12
41464: PUSH
41465: LD_INT 16
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: IN
41472: IFFALSE 41493
// points := [ 5 , 3 , 2 ] ;
41474: LD_ADDR_VAR 0 9
41478: PUSH
41479: LD_INT 5
41481: PUSH
41482: LD_INT 3
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41493: LD_VAR 0 6
41497: PPUSH
41498: CALL_OW 257
41502: PUSH
41503: LD_INT 17
41505: EQUAL
41506: IFFALSE 41527
// points := [ 100 , 50 , 75 ] ;
41508: LD_ADDR_VAR 0 9
41512: PUSH
41513: LD_INT 100
41515: PUSH
41516: LD_INT 50
41518: PUSH
41519: LD_INT 75
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: LIST
41526: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41527: LD_VAR 0 6
41531: PPUSH
41532: CALL_OW 257
41536: PUSH
41537: LD_INT 15
41539: EQUAL
41540: IFFALSE 41561
// points := [ 10 , 5 , 3 ] ;
41542: LD_ADDR_VAR 0 9
41546: PUSH
41547: LD_INT 10
41549: PUSH
41550: LD_INT 5
41552: PUSH
41553: LD_INT 3
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: LIST
41560: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41561: LD_VAR 0 6
41565: PPUSH
41566: CALL_OW 257
41570: PUSH
41571: LD_INT 14
41573: EQUAL
41574: IFFALSE 41595
// points := [ 10 , 0 , 0 ] ;
41576: LD_ADDR_VAR 0 9
41580: PUSH
41581: LD_INT 10
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: LIST
41594: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41595: LD_VAR 0 6
41599: PPUSH
41600: CALL_OW 257
41604: PUSH
41605: LD_INT 11
41607: EQUAL
41608: IFFALSE 41629
// points := [ 30 , 10 , 5 ] ;
41610: LD_ADDR_VAR 0 9
41614: PUSH
41615: LD_INT 30
41617: PUSH
41618: LD_INT 10
41620: PUSH
41621: LD_INT 5
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41629: LD_VAR 0 1
41633: PPUSH
41634: LD_INT 5
41636: PPUSH
41637: CALL_OW 321
41641: PUSH
41642: LD_INT 2
41644: EQUAL
41645: IFFALSE 41662
// bpoints := bpoints * 1.8 ;
41647: LD_ADDR_VAR 0 10
41651: PUSH
41652: LD_VAR 0 10
41656: PUSH
41657: LD_REAL  1.80000000000000E+0000
41660: MUL
41661: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41662: LD_VAR 0 6
41666: PPUSH
41667: CALL_OW 257
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: LD_INT 4
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: IN
41690: IFFALSE 41710
41692: PUSH
41693: LD_VAR 0 1
41697: PPUSH
41698: LD_INT 51
41700: PPUSH
41701: CALL_OW 321
41705: PUSH
41706: LD_INT 2
41708: EQUAL
41709: AND
41710: IFFALSE 41727
// bpoints := bpoints * 1.2 ;
41712: LD_ADDR_VAR 0 10
41716: PUSH
41717: LD_VAR 0 10
41721: PUSH
41722: LD_REAL  1.20000000000000E+0000
41725: MUL
41726: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41727: LD_VAR 0 6
41731: PPUSH
41732: CALL_OW 257
41736: PUSH
41737: LD_INT 5
41739: PUSH
41740: LD_INT 7
41742: PUSH
41743: LD_INT 9
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: LIST
41750: IN
41751: IFFALSE 41771
41753: PUSH
41754: LD_VAR 0 1
41758: PPUSH
41759: LD_INT 52
41761: PPUSH
41762: CALL_OW 321
41766: PUSH
41767: LD_INT 2
41769: EQUAL
41770: AND
41771: IFFALSE 41788
// bpoints := bpoints * 1.5 ;
41773: LD_ADDR_VAR 0 10
41777: PUSH
41778: LD_VAR 0 10
41782: PUSH
41783: LD_REAL  1.50000000000000E+0000
41786: MUL
41787: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41788: LD_VAR 0 1
41792: PPUSH
41793: LD_INT 66
41795: PPUSH
41796: CALL_OW 321
41800: PUSH
41801: LD_INT 2
41803: EQUAL
41804: IFFALSE 41821
// bpoints := bpoints * 1.1 ;
41806: LD_ADDR_VAR 0 10
41810: PUSH
41811: LD_VAR 0 10
41815: PUSH
41816: LD_REAL  1.10000000000000E+0000
41819: MUL
41820: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41821: LD_ADDR_VAR 0 10
41825: PUSH
41826: LD_VAR 0 10
41830: PUSH
41831: LD_VAR 0 6
41835: PPUSH
41836: LD_INT 1
41838: PPUSH
41839: CALL_OW 259
41843: PUSH
41844: LD_REAL  1.15000000000000E+0000
41847: MUL
41848: MUL
41849: ST_TO_ADDR
// end ; unit_vehicle :
41850: GO 42680
41852: LD_INT 2
41854: DOUBLE
41855: EQUAL
41856: IFTRUE 41860
41858: GO 42668
41860: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41861: LD_VAR 0 6
41865: PPUSH
41866: CALL_OW 264
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: LD_INT 42
41876: PUSH
41877: LD_INT 24
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: LIST
41884: IN
41885: IFFALSE 41906
// points := [ 25 , 5 , 3 ] ;
41887: LD_ADDR_VAR 0 9
41891: PUSH
41892: LD_INT 25
41894: PUSH
41895: LD_INT 5
41897: PUSH
41898: LD_INT 3
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: LIST
41905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41906: LD_VAR 0 6
41910: PPUSH
41911: CALL_OW 264
41915: PUSH
41916: LD_INT 4
41918: PUSH
41919: LD_INT 43
41921: PUSH
41922: LD_INT 25
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: IN
41930: IFFALSE 41951
// points := [ 40 , 15 , 5 ] ;
41932: LD_ADDR_VAR 0 9
41936: PUSH
41937: LD_INT 40
41939: PUSH
41940: LD_INT 15
41942: PUSH
41943: LD_INT 5
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: LIST
41950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41951: LD_VAR 0 6
41955: PPUSH
41956: CALL_OW 264
41960: PUSH
41961: LD_INT 3
41963: PUSH
41964: LD_INT 23
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: IN
41971: IFFALSE 41992
// points := [ 7 , 25 , 8 ] ;
41973: LD_ADDR_VAR 0 9
41977: PUSH
41978: LD_INT 7
41980: PUSH
41981: LD_INT 25
41983: PUSH
41984: LD_INT 8
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: LIST
41991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41992: LD_VAR 0 6
41996: PPUSH
41997: CALL_OW 264
42001: PUSH
42002: LD_INT 5
42004: PUSH
42005: LD_INT 27
42007: PUSH
42008: LD_INT 44
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: LIST
42015: IN
42016: IFFALSE 42037
// points := [ 14 , 50 , 16 ] ;
42018: LD_ADDR_VAR 0 9
42022: PUSH
42023: LD_INT 14
42025: PUSH
42026: LD_INT 50
42028: PUSH
42029: LD_INT 16
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42037: LD_VAR 0 6
42041: PPUSH
42042: CALL_OW 264
42046: PUSH
42047: LD_INT 6
42049: PUSH
42050: LD_INT 46
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: IN
42057: IFFALSE 42078
// points := [ 32 , 120 , 70 ] ;
42059: LD_ADDR_VAR 0 9
42063: PUSH
42064: LD_INT 32
42066: PUSH
42067: LD_INT 120
42069: PUSH
42070: LD_INT 70
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42078: LD_VAR 0 6
42082: PPUSH
42083: CALL_OW 264
42087: PUSH
42088: LD_INT 7
42090: PUSH
42091: LD_INT 28
42093: PUSH
42094: LD_INT 45
42096: PUSH
42097: LD_INT 92
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: IN
42106: IFFALSE 42127
// points := [ 35 , 20 , 45 ] ;
42108: LD_ADDR_VAR 0 9
42112: PUSH
42113: LD_INT 35
42115: PUSH
42116: LD_INT 20
42118: PUSH
42119: LD_INT 45
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: LIST
42126: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42127: LD_VAR 0 6
42131: PPUSH
42132: CALL_OW 264
42136: PUSH
42137: LD_INT 47
42139: PUSH
42140: EMPTY
42141: LIST
42142: IN
42143: IFFALSE 42164
// points := [ 67 , 45 , 75 ] ;
42145: LD_ADDR_VAR 0 9
42149: PUSH
42150: LD_INT 67
42152: PUSH
42153: LD_INT 45
42155: PUSH
42156: LD_INT 75
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: LIST
42163: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42164: LD_VAR 0 6
42168: PPUSH
42169: CALL_OW 264
42173: PUSH
42174: LD_INT 26
42176: PUSH
42177: EMPTY
42178: LIST
42179: IN
42180: IFFALSE 42201
// points := [ 120 , 30 , 80 ] ;
42182: LD_ADDR_VAR 0 9
42186: PUSH
42187: LD_INT 120
42189: PUSH
42190: LD_INT 30
42192: PUSH
42193: LD_INT 80
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: LIST
42200: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42201: LD_VAR 0 6
42205: PPUSH
42206: CALL_OW 264
42210: PUSH
42211: LD_INT 22
42213: PUSH
42214: EMPTY
42215: LIST
42216: IN
42217: IFFALSE 42238
// points := [ 40 , 1 , 1 ] ;
42219: LD_ADDR_VAR 0 9
42223: PUSH
42224: LD_INT 40
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: LIST
42237: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42238: LD_VAR 0 6
42242: PPUSH
42243: CALL_OW 264
42247: PUSH
42248: LD_INT 29
42250: PUSH
42251: EMPTY
42252: LIST
42253: IN
42254: IFFALSE 42275
// points := [ 70 , 200 , 400 ] ;
42256: LD_ADDR_VAR 0 9
42260: PUSH
42261: LD_INT 70
42263: PUSH
42264: LD_INT 200
42266: PUSH
42267: LD_INT 400
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42275: LD_VAR 0 6
42279: PPUSH
42280: CALL_OW 264
42284: PUSH
42285: LD_INT 14
42287: PUSH
42288: LD_INT 53
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: IN
42295: IFFALSE 42316
// points := [ 40 , 10 , 20 ] ;
42297: LD_ADDR_VAR 0 9
42301: PUSH
42302: LD_INT 40
42304: PUSH
42305: LD_INT 10
42307: PUSH
42308: LD_INT 20
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: LIST
42315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42316: LD_VAR 0 6
42320: PPUSH
42321: CALL_OW 264
42325: PUSH
42326: LD_INT 9
42328: PUSH
42329: EMPTY
42330: LIST
42331: IN
42332: IFFALSE 42353
// points := [ 5 , 70 , 20 ] ;
42334: LD_ADDR_VAR 0 9
42338: PUSH
42339: LD_INT 5
42341: PUSH
42342: LD_INT 70
42344: PUSH
42345: LD_INT 20
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42353: LD_VAR 0 6
42357: PPUSH
42358: CALL_OW 264
42362: PUSH
42363: LD_INT 10
42365: PUSH
42366: EMPTY
42367: LIST
42368: IN
42369: IFFALSE 42390
// points := [ 35 , 110 , 70 ] ;
42371: LD_ADDR_VAR 0 9
42375: PUSH
42376: LD_INT 35
42378: PUSH
42379: LD_INT 110
42381: PUSH
42382: LD_INT 70
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42390: LD_VAR 0 6
42394: PPUSH
42395: CALL_OW 265
42399: PUSH
42400: LD_INT 25
42402: EQUAL
42403: IFFALSE 42424
// points := [ 80 , 65 , 100 ] ;
42405: LD_ADDR_VAR 0 9
42409: PUSH
42410: LD_INT 80
42412: PUSH
42413: LD_INT 65
42415: PUSH
42416: LD_INT 100
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: LIST
42423: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42424: LD_VAR 0 6
42428: PPUSH
42429: CALL_OW 263
42433: PUSH
42434: LD_INT 1
42436: EQUAL
42437: IFFALSE 42472
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42439: LD_ADDR_VAR 0 10
42443: PUSH
42444: LD_VAR 0 10
42448: PUSH
42449: LD_VAR 0 6
42453: PPUSH
42454: CALL_OW 311
42458: PPUSH
42459: LD_INT 3
42461: PPUSH
42462: CALL_OW 259
42466: PUSH
42467: LD_INT 4
42469: MUL
42470: MUL
42471: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42472: LD_VAR 0 6
42476: PPUSH
42477: CALL_OW 263
42481: PUSH
42482: LD_INT 2
42484: EQUAL
42485: IFFALSE 42536
// begin j := IsControledBy ( i ) ;
42487: LD_ADDR_VAR 0 7
42491: PUSH
42492: LD_VAR 0 6
42496: PPUSH
42497: CALL_OW 312
42501: ST_TO_ADDR
// if j then
42502: LD_VAR 0 7
42506: IFFALSE 42536
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42508: LD_ADDR_VAR 0 10
42512: PUSH
42513: LD_VAR 0 10
42517: PUSH
42518: LD_VAR 0 7
42522: PPUSH
42523: LD_INT 3
42525: PPUSH
42526: CALL_OW 259
42530: PUSH
42531: LD_INT 3
42533: MUL
42534: MUL
42535: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42536: LD_VAR 0 6
42540: PPUSH
42541: CALL_OW 264
42545: PUSH
42546: LD_INT 5
42548: PUSH
42549: LD_INT 6
42551: PUSH
42552: LD_INT 46
42554: PUSH
42555: LD_INT 44
42557: PUSH
42558: LD_INT 47
42560: PUSH
42561: LD_INT 45
42563: PUSH
42564: LD_INT 28
42566: PUSH
42567: LD_INT 7
42569: PUSH
42570: LD_INT 27
42572: PUSH
42573: LD_INT 29
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: IN
42588: IFFALSE 42608
42590: PUSH
42591: LD_VAR 0 1
42595: PPUSH
42596: LD_INT 52
42598: PPUSH
42599: CALL_OW 321
42603: PUSH
42604: LD_INT 2
42606: EQUAL
42607: AND
42608: IFFALSE 42625
// bpoints := bpoints * 1.2 ;
42610: LD_ADDR_VAR 0 10
42614: PUSH
42615: LD_VAR 0 10
42619: PUSH
42620: LD_REAL  1.20000000000000E+0000
42623: MUL
42624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42625: LD_VAR 0 6
42629: PPUSH
42630: CALL_OW 264
42634: PUSH
42635: LD_INT 6
42637: PUSH
42638: LD_INT 46
42640: PUSH
42641: LD_INT 47
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: LIST
42648: IN
42649: IFFALSE 42666
// bpoints := bpoints * 1.2 ;
42651: LD_ADDR_VAR 0 10
42655: PUSH
42656: LD_VAR 0 10
42660: PUSH
42661: LD_REAL  1.20000000000000E+0000
42664: MUL
42665: ST_TO_ADDR
// end ; unit_building :
42666: GO 42680
42668: LD_INT 3
42670: DOUBLE
42671: EQUAL
42672: IFTRUE 42676
42674: GO 42679
42676: POP
// ; end ;
42677: GO 42680
42679: POP
// for j = 1 to 3 do
42680: LD_ADDR_VAR 0 7
42684: PUSH
42685: DOUBLE
42686: LD_INT 1
42688: DEC
42689: ST_TO_ADDR
42690: LD_INT 3
42692: PUSH
42693: FOR_TO
42694: IFFALSE 42747
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42696: LD_ADDR_VAR 0 5
42700: PUSH
42701: LD_VAR 0 5
42705: PPUSH
42706: LD_VAR 0 7
42710: PPUSH
42711: LD_VAR 0 5
42715: PUSH
42716: LD_VAR 0 7
42720: ARRAY
42721: PUSH
42722: LD_VAR 0 9
42726: PUSH
42727: LD_VAR 0 7
42731: ARRAY
42732: PUSH
42733: LD_VAR 0 10
42737: MUL
42738: PLUS
42739: PPUSH
42740: CALL_OW 1
42744: ST_TO_ADDR
42745: GO 42693
42747: POP
42748: POP
// end ;
42749: GO 41222
42751: POP
42752: POP
// result := Replace ( result , 4 , tmp ) ;
42753: LD_ADDR_VAR 0 5
42757: PUSH
42758: LD_VAR 0 5
42762: PPUSH
42763: LD_INT 4
42765: PPUSH
42766: LD_VAR 0 8
42770: PPUSH
42771: CALL_OW 1
42775: ST_TO_ADDR
// end ;
42776: LD_VAR 0 5
42780: RET
// export function DangerAtRange ( unit , range ) ; begin
42781: LD_INT 0
42783: PPUSH
// if not unit then
42784: LD_VAR 0 1
42788: NOT
42789: IFFALSE 42793
// exit ;
42791: GO 42838
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42793: LD_ADDR_VAR 0 3
42797: PUSH
42798: LD_VAR 0 1
42802: PPUSH
42803: CALL_OW 255
42807: PPUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: CALL_OW 250
42817: PPUSH
42818: LD_VAR 0 1
42822: PPUSH
42823: CALL_OW 251
42827: PPUSH
42828: LD_VAR 0 2
42832: PPUSH
42833: CALL 41072 0 4
42837: ST_TO_ADDR
// end ;
42838: LD_VAR 0 3
42842: RET
// export function DangerInArea ( side , area ) ; begin
42843: LD_INT 0
42845: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42846: LD_ADDR_VAR 0 3
42850: PUSH
42851: LD_VAR 0 2
42855: PPUSH
42856: LD_INT 81
42858: PUSH
42859: LD_VAR 0 1
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PPUSH
42868: CALL_OW 70
42872: ST_TO_ADDR
// end ;
42873: LD_VAR 0 3
42877: RET
// export function IsExtension ( b ) ; begin
42878: LD_INT 0
42880: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42881: LD_ADDR_VAR 0 2
42885: PUSH
42886: LD_VAR 0 1
42890: PUSH
42891: LD_INT 23
42893: PUSH
42894: LD_INT 20
42896: PUSH
42897: LD_INT 22
42899: PUSH
42900: LD_INT 17
42902: PUSH
42903: LD_INT 24
42905: PUSH
42906: LD_INT 21
42908: PUSH
42909: LD_INT 19
42911: PUSH
42912: LD_INT 16
42914: PUSH
42915: LD_INT 25
42917: PUSH
42918: LD_INT 18
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: IN
42933: ST_TO_ADDR
// end ;
42934: LD_VAR 0 2
42938: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42939: LD_INT 0
42941: PPUSH
42942: PPUSH
42943: PPUSH
// result := [ ] ;
42944: LD_ADDR_VAR 0 4
42948: PUSH
42949: EMPTY
42950: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42951: LD_ADDR_VAR 0 5
42955: PUSH
42956: LD_VAR 0 2
42960: PPUSH
42961: LD_INT 21
42963: PUSH
42964: LD_INT 3
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PPUSH
42971: CALL_OW 70
42975: ST_TO_ADDR
// if not tmp then
42976: LD_VAR 0 5
42980: NOT
42981: IFFALSE 42985
// exit ;
42983: GO 43049
// if checkLink then
42985: LD_VAR 0 3
42989: IFFALSE 43039
// begin for i in tmp do
42991: LD_ADDR_VAR 0 6
42995: PUSH
42996: LD_VAR 0 5
43000: PUSH
43001: FOR_IN
43002: IFFALSE 43037
// if GetBase ( i ) <> base then
43004: LD_VAR 0 6
43008: PPUSH
43009: CALL_OW 274
43013: PUSH
43014: LD_VAR 0 1
43018: NONEQUAL
43019: IFFALSE 43035
// ComLinkToBase ( base , i ) ;
43021: LD_VAR 0 1
43025: PPUSH
43026: LD_VAR 0 6
43030: PPUSH
43031: CALL_OW 169
43035: GO 43001
43037: POP
43038: POP
// end ; result := tmp ;
43039: LD_ADDR_VAR 0 4
43043: PUSH
43044: LD_VAR 0 5
43048: ST_TO_ADDR
// end ;
43049: LD_VAR 0 4
43053: RET
// export function ComComplete ( units , b ) ; var i ; begin
43054: LD_INT 0
43056: PPUSH
43057: PPUSH
// if not units then
43058: LD_VAR 0 1
43062: NOT
43063: IFFALSE 43067
// exit ;
43065: GO 43157
// for i in units do
43067: LD_ADDR_VAR 0 4
43071: PUSH
43072: LD_VAR 0 1
43076: PUSH
43077: FOR_IN
43078: IFFALSE 43155
// if BuildingStatus ( b ) = bs_build then
43080: LD_VAR 0 2
43084: PPUSH
43085: CALL_OW 461
43089: PUSH
43090: LD_INT 1
43092: EQUAL
43093: IFFALSE 43153
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43095: LD_VAR 0 4
43099: PPUSH
43100: LD_STRING h
43102: PUSH
43103: LD_VAR 0 2
43107: PPUSH
43108: CALL_OW 250
43112: PUSH
43113: LD_VAR 0 2
43117: PPUSH
43118: CALL_OW 251
43122: PUSH
43123: LD_VAR 0 2
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: PUSH
43146: EMPTY
43147: LIST
43148: PPUSH
43149: CALL_OW 446
43153: GO 43077
43155: POP
43156: POP
// end ;
43157: LD_VAR 0 3
43161: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43162: LD_INT 0
43164: PPUSH
43165: PPUSH
43166: PPUSH
43167: PPUSH
43168: PPUSH
43169: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43170: LD_VAR 0 1
43174: NOT
43175: IFTRUE 43192
43177: PUSH
43178: LD_VAR 0 1
43182: PPUSH
43183: CALL_OW 263
43187: PUSH
43188: LD_INT 2
43190: NONEQUAL
43191: OR
43192: IFFALSE 43196
// exit ;
43194: GO 43512
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43196: LD_ADDR_VAR 0 6
43200: PUSH
43201: LD_INT 22
43203: PUSH
43204: LD_VAR 0 1
43208: PPUSH
43209: CALL_OW 255
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 30
43223: PUSH
43224: LD_INT 36
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 34
43233: PUSH
43234: LD_INT 31
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PPUSH
43250: CALL_OW 69
43254: ST_TO_ADDR
// if not tmp then
43255: LD_VAR 0 6
43259: NOT
43260: IFFALSE 43264
// exit ;
43262: GO 43512
// result := [ ] ;
43264: LD_ADDR_VAR 0 2
43268: PUSH
43269: EMPTY
43270: ST_TO_ADDR
// for i in tmp do
43271: LD_ADDR_VAR 0 3
43275: PUSH
43276: LD_VAR 0 6
43280: PUSH
43281: FOR_IN
43282: IFFALSE 43353
// begin t := UnitsInside ( i ) ;
43284: LD_ADDR_VAR 0 4
43288: PUSH
43289: LD_VAR 0 3
43293: PPUSH
43294: CALL_OW 313
43298: ST_TO_ADDR
// if t then
43299: LD_VAR 0 4
43303: IFFALSE 43351
// for j in t do
43305: LD_ADDR_VAR 0 7
43309: PUSH
43310: LD_VAR 0 4
43314: PUSH
43315: FOR_IN
43316: IFFALSE 43349
// result := Replace ( result , result + 1 , j ) ;
43318: LD_ADDR_VAR 0 2
43322: PUSH
43323: LD_VAR 0 2
43327: PPUSH
43328: LD_VAR 0 2
43332: PUSH
43333: LD_INT 1
43335: PLUS
43336: PPUSH
43337: LD_VAR 0 7
43341: PPUSH
43342: CALL_OW 1
43346: ST_TO_ADDR
43347: GO 43315
43349: POP
43350: POP
// end ;
43351: GO 43281
43353: POP
43354: POP
// if not result then
43355: LD_VAR 0 2
43359: NOT
43360: IFFALSE 43364
// exit ;
43362: GO 43512
// mech := result [ 1 ] ;
43364: LD_ADDR_VAR 0 5
43368: PUSH
43369: LD_VAR 0 2
43373: PUSH
43374: LD_INT 1
43376: ARRAY
43377: ST_TO_ADDR
// if result > 1 then
43378: LD_VAR 0 2
43382: PUSH
43383: LD_INT 1
43385: GREATER
43386: IFFALSE 43498
// begin for i = 2 to result do
43388: LD_ADDR_VAR 0 3
43392: PUSH
43393: DOUBLE
43394: LD_INT 2
43396: DEC
43397: ST_TO_ADDR
43398: LD_VAR 0 2
43402: PUSH
43403: FOR_TO
43404: IFFALSE 43496
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43406: LD_ADDR_VAR 0 4
43410: PUSH
43411: LD_VAR 0 2
43415: PUSH
43416: LD_VAR 0 3
43420: ARRAY
43421: PPUSH
43422: LD_INT 3
43424: PPUSH
43425: CALL_OW 259
43429: PUSH
43430: LD_VAR 0 2
43434: PUSH
43435: LD_VAR 0 3
43439: ARRAY
43440: PPUSH
43441: CALL_OW 432
43445: MINUS
43446: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43447: LD_VAR 0 4
43451: PUSH
43452: LD_VAR 0 5
43456: PPUSH
43457: LD_INT 3
43459: PPUSH
43460: CALL_OW 259
43464: PUSH
43465: LD_VAR 0 5
43469: PPUSH
43470: CALL_OW 432
43474: MINUS
43475: GREATEREQUAL
43476: IFFALSE 43494
// mech := result [ i ] ;
43478: LD_ADDR_VAR 0 5
43482: PUSH
43483: LD_VAR 0 2
43487: PUSH
43488: LD_VAR 0 3
43492: ARRAY
43493: ST_TO_ADDR
// end ;
43494: GO 43403
43496: POP
43497: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43498: LD_VAR 0 1
43502: PPUSH
43503: LD_VAR 0 5
43507: PPUSH
43508: CALL_OW 135
// end ;
43512: LD_VAR 0 2
43516: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43517: LD_INT 0
43519: PPUSH
43520: PPUSH
43521: PPUSH
43522: PPUSH
43523: PPUSH
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
// result := [ ] ;
43532: LD_ADDR_VAR 0 7
43536: PUSH
43537: EMPTY
43538: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43539: LD_VAR 0 1
43543: PPUSH
43544: CALL_OW 266
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: IN
43559: NOT
43560: IFFALSE 43564
// exit ;
43562: GO 45204
// if name then
43564: LD_VAR 0 3
43568: IFFALSE 43584
// SetBName ( base_dep , name ) ;
43570: LD_VAR 0 1
43574: PPUSH
43575: LD_VAR 0 3
43579: PPUSH
43580: CALL_OW 500
// base := GetBase ( base_dep ) ;
43584: LD_ADDR_VAR 0 15
43588: PUSH
43589: LD_VAR 0 1
43593: PPUSH
43594: CALL_OW 274
43598: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43599: LD_ADDR_VAR 0 16
43603: PUSH
43604: LD_VAR 0 1
43608: PPUSH
43609: CALL_OW 255
43613: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43614: LD_ADDR_VAR 0 17
43618: PUSH
43619: LD_VAR 0 1
43623: PPUSH
43624: CALL_OW 248
43628: ST_TO_ADDR
// if sources then
43629: LD_VAR 0 5
43633: IFFALSE 43680
// for i = 1 to 3 do
43635: LD_ADDR_VAR 0 8
43639: PUSH
43640: DOUBLE
43641: LD_INT 1
43643: DEC
43644: ST_TO_ADDR
43645: LD_INT 3
43647: PUSH
43648: FOR_TO
43649: IFFALSE 43678
// AddResourceType ( base , i , sources [ i ] ) ;
43651: LD_VAR 0 15
43655: PPUSH
43656: LD_VAR 0 8
43660: PPUSH
43661: LD_VAR 0 5
43665: PUSH
43666: LD_VAR 0 8
43670: ARRAY
43671: PPUSH
43672: CALL_OW 276
43676: GO 43648
43678: POP
43679: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43680: LD_ADDR_VAR 0 18
43684: PUSH
43685: LD_VAR 0 15
43689: PPUSH
43690: LD_VAR 0 2
43694: PPUSH
43695: LD_INT 1
43697: PPUSH
43698: CALL 42939 0 3
43702: ST_TO_ADDR
// InitHc ;
43703: CALL_OW 19
// InitUc ;
43707: CALL_OW 18
// uc_side := side ;
43711: LD_ADDR_OWVAR 20
43715: PUSH
43716: LD_VAR 0 16
43720: ST_TO_ADDR
// uc_nation := nation ;
43721: LD_ADDR_OWVAR 21
43725: PUSH
43726: LD_VAR 0 17
43730: ST_TO_ADDR
// if buildings then
43731: LD_VAR 0 18
43735: IFFALSE 45063
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43737: LD_ADDR_VAR 0 19
43741: PUSH
43742: LD_VAR 0 18
43746: PPUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 30
43752: PUSH
43753: LD_INT 29
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 30
43762: PUSH
43763: LD_INT 30
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: LIST
43774: PPUSH
43775: CALL_OW 72
43779: ST_TO_ADDR
// if tmp then
43780: LD_VAR 0 19
43784: IFFALSE 43832
// for i in tmp do
43786: LD_ADDR_VAR 0 8
43790: PUSH
43791: LD_VAR 0 19
43795: PUSH
43796: FOR_IN
43797: IFFALSE 43830
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43799: LD_VAR 0 8
43803: PPUSH
43804: CALL_OW 250
43808: PPUSH
43809: LD_VAR 0 8
43813: PPUSH
43814: CALL_OW 251
43818: PPUSH
43819: LD_VAR 0 16
43823: PPUSH
43824: CALL_OW 441
43828: GO 43796
43830: POP
43831: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43832: LD_VAR 0 18
43836: PPUSH
43837: LD_INT 2
43839: PUSH
43840: LD_INT 30
43842: PUSH
43843: LD_INT 32
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 30
43852: PUSH
43853: LD_INT 33
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: PPUSH
43865: CALL_OW 72
43869: IFFALSE 43957
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43871: LD_ADDR_VAR 0 8
43875: PUSH
43876: LD_VAR 0 18
43880: PPUSH
43881: LD_INT 2
43883: PUSH
43884: LD_INT 30
43886: PUSH
43887: LD_INT 32
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 30
43896: PUSH
43897: LD_INT 33
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: PPUSH
43909: CALL_OW 72
43913: PUSH
43914: FOR_IN
43915: IFFALSE 43955
// begin if not GetBWeapon ( i ) then
43917: LD_VAR 0 8
43921: PPUSH
43922: CALL_OW 269
43926: NOT
43927: IFFALSE 43953
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43929: LD_VAR 0 8
43933: PPUSH
43934: LD_VAR 0 8
43938: PPUSH
43939: LD_VAR 0 2
43943: PPUSH
43944: CALL 45209 0 2
43948: PPUSH
43949: CALL_OW 431
// end ;
43953: GO 43914
43955: POP
43956: POP
// end ; for i = 1 to personel do
43957: LD_ADDR_VAR 0 8
43961: PUSH
43962: DOUBLE
43963: LD_INT 1
43965: DEC
43966: ST_TO_ADDR
43967: LD_VAR 0 6
43971: PUSH
43972: FOR_TO
43973: IFFALSE 45043
// begin if i > 4 then
43975: LD_VAR 0 8
43979: PUSH
43980: LD_INT 4
43982: GREATER
43983: IFFALSE 43987
// break ;
43985: GO 45043
// case i of 1 :
43987: LD_VAR 0 8
43991: PUSH
43992: LD_INT 1
43994: DOUBLE
43995: EQUAL
43996: IFTRUE 44000
43998: GO 44080
44000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44001: LD_ADDR_VAR 0 12
44005: PUSH
44006: LD_VAR 0 18
44010: PPUSH
44011: LD_INT 22
44013: PUSH
44014: LD_VAR 0 16
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 58
44025: PUSH
44026: EMPTY
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 30
44034: PUSH
44035: LD_INT 32
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 30
44044: PUSH
44045: LD_INT 4
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 30
44054: PUSH
44055: LD_INT 5
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: PPUSH
44073: CALL_OW 72
44077: ST_TO_ADDR
44078: GO 44302
44080: LD_INT 2
44082: DOUBLE
44083: EQUAL
44084: IFTRUE 44088
44086: GO 44150
44088: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44089: LD_ADDR_VAR 0 12
44093: PUSH
44094: LD_VAR 0 18
44098: PPUSH
44099: LD_INT 22
44101: PUSH
44102: LD_VAR 0 16
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: LD_INT 30
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 30
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PPUSH
44143: CALL_OW 72
44147: ST_TO_ADDR
44148: GO 44302
44150: LD_INT 3
44152: DOUBLE
44153: EQUAL
44154: IFTRUE 44158
44156: GO 44220
44158: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44159: LD_ADDR_VAR 0 12
44163: PUSH
44164: LD_VAR 0 18
44168: PPUSH
44169: LD_INT 22
44171: PUSH
44172: LD_VAR 0 16
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: LD_INT 30
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 30
44196: PUSH
44197: LD_INT 3
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: LIST
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PPUSH
44213: CALL_OW 72
44217: ST_TO_ADDR
44218: GO 44302
44220: LD_INT 4
44222: DOUBLE
44223: EQUAL
44224: IFTRUE 44228
44226: GO 44301
44228: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44229: LD_ADDR_VAR 0 12
44233: PUSH
44234: LD_VAR 0 18
44238: PPUSH
44239: LD_INT 22
44241: PUSH
44242: LD_VAR 0 16
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 30
44256: PUSH
44257: LD_INT 6
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 30
44266: PUSH
44267: LD_INT 7
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 30
44276: PUSH
44277: LD_INT 8
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PPUSH
44294: CALL_OW 72
44298: ST_TO_ADDR
44299: GO 44302
44301: POP
// if i = 1 then
44302: LD_VAR 0 8
44306: PUSH
44307: LD_INT 1
44309: EQUAL
44310: IFFALSE 44421
// begin tmp := [ ] ;
44312: LD_ADDR_VAR 0 19
44316: PUSH
44317: EMPTY
44318: ST_TO_ADDR
// for j in f do
44319: LD_ADDR_VAR 0 9
44323: PUSH
44324: LD_VAR 0 12
44328: PUSH
44329: FOR_IN
44330: IFFALSE 44403
// if GetBType ( j ) = b_bunker then
44332: LD_VAR 0 9
44336: PPUSH
44337: CALL_OW 266
44341: PUSH
44342: LD_INT 32
44344: EQUAL
44345: IFFALSE 44372
// tmp := Insert ( tmp , 1 , j ) else
44347: LD_ADDR_VAR 0 19
44351: PUSH
44352: LD_VAR 0 19
44356: PPUSH
44357: LD_INT 1
44359: PPUSH
44360: LD_VAR 0 9
44364: PPUSH
44365: CALL_OW 2
44369: ST_TO_ADDR
44370: GO 44401
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44372: LD_ADDR_VAR 0 19
44376: PUSH
44377: LD_VAR 0 19
44381: PPUSH
44382: LD_VAR 0 19
44386: PUSH
44387: LD_INT 1
44389: PLUS
44390: PPUSH
44391: LD_VAR 0 9
44395: PPUSH
44396: CALL_OW 2
44400: ST_TO_ADDR
44401: GO 44329
44403: POP
44404: POP
// if tmp then
44405: LD_VAR 0 19
44409: IFFALSE 44421
// f := tmp ;
44411: LD_ADDR_VAR 0 12
44415: PUSH
44416: LD_VAR 0 19
44420: ST_TO_ADDR
// end ; x := personel [ i ] ;
44421: LD_ADDR_VAR 0 13
44425: PUSH
44426: LD_VAR 0 6
44430: PUSH
44431: LD_VAR 0 8
44435: ARRAY
44436: ST_TO_ADDR
// if x = - 1 then
44437: LD_VAR 0 13
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: EQUAL
44446: IFFALSE 44657
// begin for j in f do
44448: LD_ADDR_VAR 0 9
44452: PUSH
44453: LD_VAR 0 12
44457: PUSH
44458: FOR_IN
44459: IFFALSE 44653
// repeat InitHc ;
44461: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44465: LD_VAR 0 9
44469: PPUSH
44470: CALL_OW 266
44474: PUSH
44475: LD_INT 5
44477: EQUAL
44478: IFFALSE 44548
// begin if UnitsInside ( j ) < 3 then
44480: LD_VAR 0 9
44484: PPUSH
44485: CALL_OW 313
44489: PUSH
44490: LD_INT 3
44492: LESS
44493: IFFALSE 44529
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44495: LD_INT 0
44497: PPUSH
44498: LD_INT 5
44500: PUSH
44501: LD_INT 8
44503: PUSH
44504: LD_INT 9
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: PUSH
44512: LD_VAR 0 17
44516: ARRAY
44517: PPUSH
44518: LD_VAR 0 4
44522: PPUSH
44523: CALL_OW 380
44527: GO 44546
// PrepareHuman ( false , i , skill ) ;
44529: LD_INT 0
44531: PPUSH
44532: LD_VAR 0 8
44536: PPUSH
44537: LD_VAR 0 4
44541: PPUSH
44542: CALL_OW 380
// end else
44546: GO 44565
// PrepareHuman ( false , i , skill ) ;
44548: LD_INT 0
44550: PPUSH
44551: LD_VAR 0 8
44555: PPUSH
44556: LD_VAR 0 4
44560: PPUSH
44561: CALL_OW 380
// un := CreateHuman ;
44565: LD_ADDR_VAR 0 14
44569: PUSH
44570: CALL_OW 44
44574: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44575: LD_ADDR_VAR 0 7
44579: PUSH
44580: LD_VAR 0 7
44584: PPUSH
44585: LD_INT 1
44587: PPUSH
44588: LD_VAR 0 14
44592: PPUSH
44593: CALL_OW 2
44597: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44598: LD_VAR 0 14
44602: PPUSH
44603: LD_VAR 0 9
44607: PPUSH
44608: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44612: LD_VAR 0 9
44616: PPUSH
44617: CALL_OW 313
44621: PUSH
44622: LD_INT 6
44624: EQUAL
44625: IFTRUE 44649
44627: PUSH
44628: LD_VAR 0 9
44632: PPUSH
44633: CALL_OW 266
44637: PUSH
44638: LD_INT 32
44640: PUSH
44641: LD_INT 31
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: IN
44648: OR
44649: IFFALSE 44461
44651: GO 44458
44653: POP
44654: POP
// end else
44655: GO 45041
// for j = 1 to x do
44657: LD_ADDR_VAR 0 9
44661: PUSH
44662: DOUBLE
44663: LD_INT 1
44665: DEC
44666: ST_TO_ADDR
44667: LD_VAR 0 13
44671: PUSH
44672: FOR_TO
44673: IFFALSE 45039
// begin InitHc ;
44675: CALL_OW 19
// if not f then
44679: LD_VAR 0 12
44683: NOT
44684: IFFALSE 44773
// begin PrepareHuman ( false , i , skill ) ;
44686: LD_INT 0
44688: PPUSH
44689: LD_VAR 0 8
44693: PPUSH
44694: LD_VAR 0 4
44698: PPUSH
44699: CALL_OW 380
// un := CreateHuman ;
44703: LD_ADDR_VAR 0 14
44707: PUSH
44708: CALL_OW 44
44712: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44713: LD_ADDR_VAR 0 7
44717: PUSH
44718: LD_VAR 0 7
44722: PPUSH
44723: LD_INT 1
44725: PPUSH
44726: LD_VAR 0 14
44730: PPUSH
44731: CALL_OW 2
44735: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44736: LD_VAR 0 14
44740: PPUSH
44741: LD_VAR 0 1
44745: PPUSH
44746: CALL_OW 250
44750: PPUSH
44751: LD_VAR 0 1
44755: PPUSH
44756: CALL_OW 251
44760: PPUSH
44761: LD_INT 10
44763: PPUSH
44764: LD_INT 0
44766: PPUSH
44767: CALL_OW 50
// continue ;
44771: GO 44672
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44773: LD_VAR 0 12
44777: PUSH
44778: LD_INT 1
44780: ARRAY
44781: PPUSH
44782: CALL_OW 313
44786: IFFALSE 44814
44788: PUSH
44789: LD_VAR 0 12
44793: PUSH
44794: LD_INT 1
44796: ARRAY
44797: PPUSH
44798: CALL_OW 266
44802: PUSH
44803: LD_INT 32
44805: PUSH
44806: LD_INT 31
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: IN
44813: AND
44814: IFTRUE 44835
44816: PUSH
44817: LD_VAR 0 12
44821: PUSH
44822: LD_INT 1
44824: ARRAY
44825: PPUSH
44826: CALL_OW 313
44830: PUSH
44831: LD_INT 6
44833: EQUAL
44834: OR
44835: IFFALSE 44855
// f := Delete ( f , 1 ) ;
44837: LD_ADDR_VAR 0 12
44841: PUSH
44842: LD_VAR 0 12
44846: PPUSH
44847: LD_INT 1
44849: PPUSH
44850: CALL_OW 3
44854: ST_TO_ADDR
// if not f then
44855: LD_VAR 0 12
44859: NOT
44860: IFFALSE 44878
// begin x := x + 2 ;
44862: LD_ADDR_VAR 0 13
44866: PUSH
44867: LD_VAR 0 13
44871: PUSH
44872: LD_INT 2
44874: PLUS
44875: ST_TO_ADDR
// continue ;
44876: GO 44672
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44878: LD_VAR 0 12
44882: PUSH
44883: LD_INT 1
44885: ARRAY
44886: PPUSH
44887: CALL_OW 266
44891: PUSH
44892: LD_INT 5
44894: EQUAL
44895: IFFALSE 44969
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44897: LD_VAR 0 12
44901: PUSH
44902: LD_INT 1
44904: ARRAY
44905: PPUSH
44906: CALL_OW 313
44910: PUSH
44911: LD_INT 3
44913: LESS
44914: IFFALSE 44950
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44916: LD_INT 0
44918: PPUSH
44919: LD_INT 5
44921: PUSH
44922: LD_INT 8
44924: PUSH
44925: LD_INT 9
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: PUSH
44933: LD_VAR 0 17
44937: ARRAY
44938: PPUSH
44939: LD_VAR 0 4
44943: PPUSH
44944: CALL_OW 380
44948: GO 44967
// PrepareHuman ( false , i , skill ) ;
44950: LD_INT 0
44952: PPUSH
44953: LD_VAR 0 8
44957: PPUSH
44958: LD_VAR 0 4
44962: PPUSH
44963: CALL_OW 380
// end else
44967: GO 44986
// PrepareHuman ( false , i , skill ) ;
44969: LD_INT 0
44971: PPUSH
44972: LD_VAR 0 8
44976: PPUSH
44977: LD_VAR 0 4
44981: PPUSH
44982: CALL_OW 380
// un := CreateHuman ;
44986: LD_ADDR_VAR 0 14
44990: PUSH
44991: CALL_OW 44
44995: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44996: LD_ADDR_VAR 0 7
45000: PUSH
45001: LD_VAR 0 7
45005: PPUSH
45006: LD_INT 1
45008: PPUSH
45009: LD_VAR 0 14
45013: PPUSH
45014: CALL_OW 2
45018: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45019: LD_VAR 0 14
45023: PPUSH
45024: LD_VAR 0 12
45028: PUSH
45029: LD_INT 1
45031: ARRAY
45032: PPUSH
45033: CALL_OW 52
// end ;
45037: GO 44672
45039: POP
45040: POP
// end ;
45041: GO 43972
45043: POP
45044: POP
// result := result ^ buildings ;
45045: LD_ADDR_VAR 0 7
45049: PUSH
45050: LD_VAR 0 7
45054: PUSH
45055: LD_VAR 0 18
45059: ADD
45060: ST_TO_ADDR
// end else
45061: GO 45204
// begin for i = 1 to personel do
45063: LD_ADDR_VAR 0 8
45067: PUSH
45068: DOUBLE
45069: LD_INT 1
45071: DEC
45072: ST_TO_ADDR
45073: LD_VAR 0 6
45077: PUSH
45078: FOR_TO
45079: IFFALSE 45202
// begin if i > 4 then
45081: LD_VAR 0 8
45085: PUSH
45086: LD_INT 4
45088: GREATER
45089: IFFALSE 45093
// break ;
45091: GO 45202
// x := personel [ i ] ;
45093: LD_ADDR_VAR 0 13
45097: PUSH
45098: LD_VAR 0 6
45102: PUSH
45103: LD_VAR 0 8
45107: ARRAY
45108: ST_TO_ADDR
// if x = - 1 then
45109: LD_VAR 0 13
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: EQUAL
45118: IFFALSE 45122
// continue ;
45120: GO 45078
// PrepareHuman ( false , i , skill ) ;
45122: LD_INT 0
45124: PPUSH
45125: LD_VAR 0 8
45129: PPUSH
45130: LD_VAR 0 4
45134: PPUSH
45135: CALL_OW 380
// un := CreateHuman ;
45139: LD_ADDR_VAR 0 14
45143: PUSH
45144: CALL_OW 44
45148: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45149: LD_VAR 0 14
45153: PPUSH
45154: LD_VAR 0 1
45158: PPUSH
45159: CALL_OW 250
45163: PPUSH
45164: LD_VAR 0 1
45168: PPUSH
45169: CALL_OW 251
45173: PPUSH
45174: LD_INT 10
45176: PPUSH
45177: LD_INT 0
45179: PPUSH
45180: CALL_OW 50
// result := result ^ un ;
45184: LD_ADDR_VAR 0 7
45188: PUSH
45189: LD_VAR 0 7
45193: PUSH
45194: LD_VAR 0 14
45198: ADD
45199: ST_TO_ADDR
// end ;
45200: GO 45078
45202: POP
45203: POP
// end ; end ;
45204: LD_VAR 0 7
45208: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45209: LD_INT 0
45211: PPUSH
45212: PPUSH
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
45220: PPUSH
45221: PPUSH
45222: PPUSH
45223: PPUSH
45224: PPUSH
45225: PPUSH
45226: PPUSH
// result := false ;
45227: LD_ADDR_VAR 0 3
45231: PUSH
45232: LD_INT 0
45234: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45235: LD_VAR 0 1
45239: NOT
45240: IFTRUE 45265
45242: PUSH
45243: LD_VAR 0 1
45247: PPUSH
45248: CALL_OW 266
45252: PUSH
45253: LD_INT 32
45255: PUSH
45256: LD_INT 33
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: IN
45263: NOT
45264: OR
45265: IFFALSE 45269
// exit ;
45267: GO 46404
// nat := GetNation ( tower ) ;
45269: LD_ADDR_VAR 0 12
45273: PUSH
45274: LD_VAR 0 1
45278: PPUSH
45279: CALL_OW 248
45283: ST_TO_ADDR
// side := GetSide ( tower ) ;
45284: LD_ADDR_VAR 0 16
45288: PUSH
45289: LD_VAR 0 1
45293: PPUSH
45294: CALL_OW 255
45298: ST_TO_ADDR
// x := GetX ( tower ) ;
45299: LD_ADDR_VAR 0 10
45303: PUSH
45304: LD_VAR 0 1
45308: PPUSH
45309: CALL_OW 250
45313: ST_TO_ADDR
// y := GetY ( tower ) ;
45314: LD_ADDR_VAR 0 11
45318: PUSH
45319: LD_VAR 0 1
45323: PPUSH
45324: CALL_OW 251
45328: ST_TO_ADDR
// if not x or not y then
45329: LD_VAR 0 10
45333: NOT
45334: IFTRUE 45343
45336: PUSH
45337: LD_VAR 0 11
45341: NOT
45342: OR
45343: IFFALSE 45347
// exit ;
45345: GO 46404
// weapon := 0 ;
45347: LD_ADDR_VAR 0 18
45351: PUSH
45352: LD_INT 0
45354: ST_TO_ADDR
// fac_list := [ ] ;
45355: LD_ADDR_VAR 0 17
45359: PUSH
45360: EMPTY
45361: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45362: LD_ADDR_VAR 0 6
45366: PUSH
45367: LD_VAR 0 1
45371: PPUSH
45372: CALL_OW 274
45376: PPUSH
45377: LD_VAR 0 2
45381: PPUSH
45382: LD_INT 0
45384: PPUSH
45385: CALL 42939 0 3
45389: PPUSH
45390: LD_INT 30
45392: PUSH
45393: LD_INT 3
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PPUSH
45400: CALL_OW 72
45404: ST_TO_ADDR
// if not factories then
45405: LD_VAR 0 6
45409: NOT
45410: IFFALSE 45414
// exit ;
45412: GO 46404
// for i in factories do
45414: LD_ADDR_VAR 0 8
45418: PUSH
45419: LD_VAR 0 6
45423: PUSH
45424: FOR_IN
45425: IFFALSE 45450
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45427: LD_ADDR_VAR 0 17
45431: PUSH
45432: LD_VAR 0 17
45436: PUSH
45437: LD_VAR 0 8
45441: PPUSH
45442: CALL_OW 478
45446: UNION
45447: ST_TO_ADDR
45448: GO 45424
45450: POP
45451: POP
// if not fac_list then
45452: LD_VAR 0 17
45456: NOT
45457: IFFALSE 45461
// exit ;
45459: GO 46404
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45461: LD_ADDR_VAR 0 5
45465: PUSH
45466: LD_INT 4
45468: PUSH
45469: LD_INT 5
45471: PUSH
45472: LD_INT 9
45474: PUSH
45475: LD_INT 10
45477: PUSH
45478: LD_INT 6
45480: PUSH
45481: LD_INT 7
45483: PUSH
45484: LD_INT 11
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 27
45498: PUSH
45499: LD_INT 28
45501: PUSH
45502: LD_INT 26
45504: PUSH
45505: LD_INT 30
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 43
45516: PUSH
45517: LD_INT 44
45519: PUSH
45520: LD_INT 46
45522: PUSH
45523: LD_INT 45
45525: PUSH
45526: LD_INT 47
45528: PUSH
45529: LD_INT 49
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: LIST
45544: PUSH
45545: LD_VAR 0 12
45549: ARRAY
45550: ST_TO_ADDR
// list := list isect fac_list ;
45551: LD_ADDR_VAR 0 5
45555: PUSH
45556: LD_VAR 0 5
45560: PUSH
45561: LD_VAR 0 17
45565: ISECT
45566: ST_TO_ADDR
// if not list then
45567: LD_VAR 0 5
45571: NOT
45572: IFFALSE 45576
// exit ;
45574: GO 46404
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45576: LD_VAR 0 12
45580: PUSH
45581: LD_INT 3
45583: EQUAL
45584: IFFALSE 45596
45586: PUSH
45587: LD_INT 49
45589: PUSH
45590: LD_VAR 0 5
45594: IN
45595: AND
45596: IFFALSE 45616
45598: PUSH
45599: LD_INT 31
45601: PPUSH
45602: LD_VAR 0 16
45606: PPUSH
45607: CALL_OW 321
45611: PUSH
45612: LD_INT 2
45614: EQUAL
45615: AND
45616: IFFALSE 45676
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45618: LD_INT 22
45620: PUSH
45621: LD_VAR 0 16
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 35
45632: PUSH
45633: LD_INT 49
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 91
45642: PUSH
45643: LD_VAR 0 1
45647: PUSH
45648: LD_INT 10
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: PPUSH
45661: CALL_OW 69
45665: NOT
45666: IFFALSE 45676
// weapon := ru_time_lapser ;
45668: LD_ADDR_VAR 0 18
45672: PUSH
45673: LD_INT 49
45675: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45676: LD_VAR 0 12
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: IN
45691: IFFALSE 45715
45693: PUSH
45694: LD_INT 11
45696: PUSH
45697: LD_VAR 0 5
45701: IN
45702: IFTRUE 45714
45704: PUSH
45705: LD_INT 30
45707: PUSH
45708: LD_VAR 0 5
45712: IN
45713: OR
45714: AND
45715: IFFALSE 45735
45717: PUSH
45718: LD_INT 6
45720: PPUSH
45721: LD_VAR 0 16
45725: PPUSH
45726: CALL_OW 321
45730: PUSH
45731: LD_INT 2
45733: EQUAL
45734: AND
45735: IFFALSE 45902
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45737: LD_INT 22
45739: PUSH
45740: LD_VAR 0 16
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: LD_INT 35
45754: PUSH
45755: LD_INT 11
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 35
45764: PUSH
45765: LD_INT 30
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 91
45779: PUSH
45780: LD_VAR 0 1
45784: PUSH
45785: LD_INT 18
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: PPUSH
45798: CALL_OW 69
45802: NOT
45803: IFFALSE 45879
45805: PUSH
45806: LD_INT 22
45808: PUSH
45809: LD_VAR 0 16
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: LD_INT 30
45823: PUSH
45824: LD_INT 32
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 30
45833: PUSH
45834: LD_INT 33
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 91
45848: PUSH
45849: LD_VAR 0 1
45853: PUSH
45854: LD_INT 12
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: PUSH
45867: EMPTY
45868: LIST
45869: PPUSH
45870: CALL_OW 69
45874: PUSH
45875: LD_INT 2
45877: GREATER
45878: AND
45879: IFFALSE 45902
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45881: LD_ADDR_VAR 0 18
45885: PUSH
45886: LD_INT 11
45888: PUSH
45889: LD_INT 30
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_VAR 0 12
45900: ARRAY
45901: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45902: LD_VAR 0 18
45906: NOT
45907: IFFALSE 45927
45909: PUSH
45910: LD_INT 40
45912: PPUSH
45913: LD_VAR 0 16
45917: PPUSH
45918: CALL_OW 321
45922: PUSH
45923: LD_INT 2
45925: EQUAL
45926: AND
45927: IFFALSE 45963
45929: PUSH
45930: LD_INT 7
45932: PUSH
45933: LD_VAR 0 5
45937: IN
45938: IFTRUE 45950
45940: PUSH
45941: LD_INT 28
45943: PUSH
45944: LD_VAR 0 5
45948: IN
45949: OR
45950: IFTRUE 45962
45952: PUSH
45953: LD_INT 45
45955: PUSH
45956: LD_VAR 0 5
45960: IN
45961: OR
45962: AND
45963: IFFALSE 46217
// begin hex := GetHexInfo ( x , y ) ;
45965: LD_ADDR_VAR 0 4
45969: PUSH
45970: LD_VAR 0 10
45974: PPUSH
45975: LD_VAR 0 11
45979: PPUSH
45980: CALL_OW 546
45984: ST_TO_ADDR
// if hex [ 1 ] then
45985: LD_VAR 0 4
45989: PUSH
45990: LD_INT 1
45992: ARRAY
45993: IFFALSE 45997
// exit ;
45995: GO 46404
// height := hex [ 2 ] ;
45997: LD_ADDR_VAR 0 15
46001: PUSH
46002: LD_VAR 0 4
46006: PUSH
46007: LD_INT 2
46009: ARRAY
46010: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46011: LD_ADDR_VAR 0 14
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: LD_INT 3
46024: PUSH
46025: LD_INT 5
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: ST_TO_ADDR
// for i in tmp do
46034: LD_ADDR_VAR 0 8
46038: PUSH
46039: LD_VAR 0 14
46043: PUSH
46044: FOR_IN
46045: IFFALSE 46215
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46047: LD_ADDR_VAR 0 9
46051: PUSH
46052: LD_VAR 0 10
46056: PPUSH
46057: LD_VAR 0 8
46061: PPUSH
46062: LD_INT 5
46064: PPUSH
46065: CALL_OW 272
46069: PUSH
46070: LD_VAR 0 11
46074: PPUSH
46075: LD_VAR 0 8
46079: PPUSH
46080: LD_INT 5
46082: PPUSH
46083: CALL_OW 273
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46092: LD_VAR 0 9
46096: PUSH
46097: LD_INT 1
46099: ARRAY
46100: PPUSH
46101: LD_VAR 0 9
46105: PUSH
46106: LD_INT 2
46108: ARRAY
46109: PPUSH
46110: CALL_OW 488
46114: IFFALSE 46213
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46116: LD_ADDR_VAR 0 4
46120: PUSH
46121: LD_VAR 0 9
46125: PUSH
46126: LD_INT 1
46128: ARRAY
46129: PPUSH
46130: LD_VAR 0 9
46134: PUSH
46135: LD_INT 2
46137: ARRAY
46138: PPUSH
46139: CALL_OW 546
46143: ST_TO_ADDR
// if hex [ 1 ] then
46144: LD_VAR 0 4
46148: PUSH
46149: LD_INT 1
46151: ARRAY
46152: IFFALSE 46156
// continue ;
46154: GO 46044
// h := hex [ 2 ] ;
46156: LD_ADDR_VAR 0 13
46160: PUSH
46161: LD_VAR 0 4
46165: PUSH
46166: LD_INT 2
46168: ARRAY
46169: ST_TO_ADDR
// if h + 7 < height then
46170: LD_VAR 0 13
46174: PUSH
46175: LD_INT 7
46177: PLUS
46178: PUSH
46179: LD_VAR 0 15
46183: LESS
46184: IFFALSE 46213
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46186: LD_ADDR_VAR 0 18
46190: PUSH
46191: LD_INT 7
46193: PUSH
46194: LD_INT 28
46196: PUSH
46197: LD_INT 45
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: PUSH
46205: LD_VAR 0 12
46209: ARRAY
46210: ST_TO_ADDR
// break ;
46211: GO 46215
// end ; end ; end ;
46213: GO 46044
46215: POP
46216: POP
// end ; if not weapon then
46217: LD_VAR 0 18
46221: NOT
46222: IFFALSE 46282
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46224: LD_ADDR_VAR 0 5
46228: PUSH
46229: LD_VAR 0 5
46233: PUSH
46234: LD_INT 11
46236: PUSH
46237: LD_INT 30
46239: PUSH
46240: LD_INT 49
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: LIST
46247: DIFF
46248: ST_TO_ADDR
// if not list then
46249: LD_VAR 0 5
46253: NOT
46254: IFFALSE 46258
// exit ;
46256: GO 46404
// weapon := list [ rand ( 1 , list ) ] ;
46258: LD_ADDR_VAR 0 18
46262: PUSH
46263: LD_VAR 0 5
46267: PUSH
46268: LD_INT 1
46270: PPUSH
46271: LD_VAR 0 5
46275: PPUSH
46276: CALL_OW 12
46280: ARRAY
46281: ST_TO_ADDR
// end ; if weapon then
46282: LD_VAR 0 18
46286: IFFALSE 46404
// begin tmp := CostOfWeapon ( weapon ) ;
46288: LD_ADDR_VAR 0 14
46292: PUSH
46293: LD_VAR 0 18
46297: PPUSH
46298: CALL_OW 451
46302: ST_TO_ADDR
// j := GetBase ( tower ) ;
46303: LD_ADDR_VAR 0 9
46307: PUSH
46308: LD_VAR 0 1
46312: PPUSH
46313: CALL_OW 274
46317: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46318: LD_VAR 0 9
46322: PPUSH
46323: LD_INT 1
46325: PPUSH
46326: CALL_OW 275
46330: PUSH
46331: LD_VAR 0 14
46335: PUSH
46336: LD_INT 1
46338: ARRAY
46339: GREATEREQUAL
46340: IFFALSE 46366
46342: PUSH
46343: LD_VAR 0 9
46347: PPUSH
46348: LD_INT 2
46350: PPUSH
46351: CALL_OW 275
46355: PUSH
46356: LD_VAR 0 14
46360: PUSH
46361: LD_INT 2
46363: ARRAY
46364: GREATEREQUAL
46365: AND
46366: IFFALSE 46392
46368: PUSH
46369: LD_VAR 0 9
46373: PPUSH
46374: LD_INT 3
46376: PPUSH
46377: CALL_OW 275
46381: PUSH
46382: LD_VAR 0 14
46386: PUSH
46387: LD_INT 3
46389: ARRAY
46390: GREATEREQUAL
46391: AND
46392: IFFALSE 46404
// result := weapon ;
46394: LD_ADDR_VAR 0 3
46398: PUSH
46399: LD_VAR 0 18
46403: ST_TO_ADDR
// end ; end ;
46404: LD_VAR 0 3
46408: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46409: LD_INT 0
46411: PPUSH
46412: PPUSH
// result := true ;
46413: LD_ADDR_VAR 0 3
46417: PUSH
46418: LD_INT 1
46420: ST_TO_ADDR
// if array1 = array2 then
46421: LD_VAR 0 1
46425: PUSH
46426: LD_VAR 0 2
46430: EQUAL
46431: IFFALSE 46491
// begin for i = 1 to array1 do
46433: LD_ADDR_VAR 0 4
46437: PUSH
46438: DOUBLE
46439: LD_INT 1
46441: DEC
46442: ST_TO_ADDR
46443: LD_VAR 0 1
46447: PUSH
46448: FOR_TO
46449: IFFALSE 46487
// if array1 [ i ] <> array2 [ i ] then
46451: LD_VAR 0 1
46455: PUSH
46456: LD_VAR 0 4
46460: ARRAY
46461: PUSH
46462: LD_VAR 0 2
46466: PUSH
46467: LD_VAR 0 4
46471: ARRAY
46472: NONEQUAL
46473: IFFALSE 46485
// begin result := false ;
46475: LD_ADDR_VAR 0 3
46479: PUSH
46480: LD_INT 0
46482: ST_TO_ADDR
// break ;
46483: GO 46487
// end ;
46485: GO 46448
46487: POP
46488: POP
// end else
46489: GO 46499
// result := false ;
46491: LD_ADDR_VAR 0 3
46495: PUSH
46496: LD_INT 0
46498: ST_TO_ADDR
// end ;
46499: LD_VAR 0 3
46503: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46504: LD_INT 0
46506: PPUSH
46507: PPUSH
// if not array1 or not array2 then
46508: LD_VAR 0 1
46512: NOT
46513: IFTRUE 46522
46515: PUSH
46516: LD_VAR 0 2
46520: NOT
46521: OR
46522: IFFALSE 46526
// exit ;
46524: GO 46590
// result := true ;
46526: LD_ADDR_VAR 0 3
46530: PUSH
46531: LD_INT 1
46533: ST_TO_ADDR
// for i = 1 to array1 do
46534: LD_ADDR_VAR 0 4
46538: PUSH
46539: DOUBLE
46540: LD_INT 1
46542: DEC
46543: ST_TO_ADDR
46544: LD_VAR 0 1
46548: PUSH
46549: FOR_TO
46550: IFFALSE 46588
// if array1 [ i ] <> array2 [ i ] then
46552: LD_VAR 0 1
46556: PUSH
46557: LD_VAR 0 4
46561: ARRAY
46562: PUSH
46563: LD_VAR 0 2
46567: PUSH
46568: LD_VAR 0 4
46572: ARRAY
46573: NONEQUAL
46574: IFFALSE 46586
// begin result := false ;
46576: LD_ADDR_VAR 0 3
46580: PUSH
46581: LD_INT 0
46583: ST_TO_ADDR
// break ;
46584: GO 46588
// end ;
46586: GO 46549
46588: POP
46589: POP
// end ;
46590: LD_VAR 0 3
46594: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46595: LD_INT 0
46597: PPUSH
46598: PPUSH
46599: PPUSH
// pom := GetBase ( fac ) ;
46600: LD_ADDR_VAR 0 5
46604: PUSH
46605: LD_VAR 0 1
46609: PPUSH
46610: CALL_OW 274
46614: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46615: LD_ADDR_VAR 0 4
46619: PUSH
46620: LD_VAR 0 2
46624: PUSH
46625: LD_INT 1
46627: ARRAY
46628: PPUSH
46629: LD_VAR 0 2
46633: PUSH
46634: LD_INT 2
46636: ARRAY
46637: PPUSH
46638: LD_VAR 0 2
46642: PUSH
46643: LD_INT 3
46645: ARRAY
46646: PPUSH
46647: LD_VAR 0 2
46651: PUSH
46652: LD_INT 4
46654: ARRAY
46655: PPUSH
46656: CALL_OW 449
46660: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46661: LD_ADDR_VAR 0 3
46665: PUSH
46666: LD_VAR 0 5
46670: PPUSH
46671: LD_INT 1
46673: PPUSH
46674: CALL_OW 275
46678: PUSH
46679: LD_VAR 0 4
46683: PUSH
46684: LD_INT 1
46686: ARRAY
46687: GREATEREQUAL
46688: IFFALSE 46714
46690: PUSH
46691: LD_VAR 0 5
46695: PPUSH
46696: LD_INT 2
46698: PPUSH
46699: CALL_OW 275
46703: PUSH
46704: LD_VAR 0 4
46708: PUSH
46709: LD_INT 2
46711: ARRAY
46712: GREATEREQUAL
46713: AND
46714: IFFALSE 46740
46716: PUSH
46717: LD_VAR 0 5
46721: PPUSH
46722: LD_INT 3
46724: PPUSH
46725: CALL_OW 275
46729: PUSH
46730: LD_VAR 0 4
46734: PUSH
46735: LD_INT 3
46737: ARRAY
46738: GREATEREQUAL
46739: AND
46740: ST_TO_ADDR
// end ;
46741: LD_VAR 0 3
46745: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46746: LD_INT 0
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
// pom := GetBase ( building ) ;
46752: LD_ADDR_VAR 0 3
46756: PUSH
46757: LD_VAR 0 1
46761: PPUSH
46762: CALL_OW 274
46766: ST_TO_ADDR
// if not pom then
46767: LD_VAR 0 3
46771: NOT
46772: IFFALSE 46776
// exit ;
46774: GO 46950
// btype := GetBType ( building ) ;
46776: LD_ADDR_VAR 0 5
46780: PUSH
46781: LD_VAR 0 1
46785: PPUSH
46786: CALL_OW 266
46790: ST_TO_ADDR
// if btype = b_armoury then
46791: LD_VAR 0 5
46795: PUSH
46796: LD_INT 4
46798: EQUAL
46799: IFFALSE 46809
// btype := b_barracks ;
46801: LD_ADDR_VAR 0 5
46805: PUSH
46806: LD_INT 5
46808: ST_TO_ADDR
// if btype = b_depot then
46809: LD_VAR 0 5
46813: PUSH
46814: LD_INT 0
46816: EQUAL
46817: IFFALSE 46827
// btype := b_warehouse ;
46819: LD_ADDR_VAR 0 5
46823: PUSH
46824: LD_INT 1
46826: ST_TO_ADDR
// if btype = b_workshop then
46827: LD_VAR 0 5
46831: PUSH
46832: LD_INT 2
46834: EQUAL
46835: IFFALSE 46845
// btype := b_factory ;
46837: LD_ADDR_VAR 0 5
46841: PUSH
46842: LD_INT 3
46844: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46845: LD_ADDR_VAR 0 4
46849: PUSH
46850: LD_VAR 0 5
46854: PPUSH
46855: LD_VAR 0 1
46859: PPUSH
46860: CALL_OW 248
46864: PPUSH
46865: CALL_OW 450
46869: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46870: LD_ADDR_VAR 0 2
46874: PUSH
46875: LD_VAR 0 3
46879: PPUSH
46880: LD_INT 1
46882: PPUSH
46883: CALL_OW 275
46887: PUSH
46888: LD_VAR 0 4
46892: PUSH
46893: LD_INT 1
46895: ARRAY
46896: GREATEREQUAL
46897: IFFALSE 46923
46899: PUSH
46900: LD_VAR 0 3
46904: PPUSH
46905: LD_INT 2
46907: PPUSH
46908: CALL_OW 275
46912: PUSH
46913: LD_VAR 0 4
46917: PUSH
46918: LD_INT 2
46920: ARRAY
46921: GREATEREQUAL
46922: AND
46923: IFFALSE 46949
46925: PUSH
46926: LD_VAR 0 3
46930: PPUSH
46931: LD_INT 3
46933: PPUSH
46934: CALL_OW 275
46938: PUSH
46939: LD_VAR 0 4
46943: PUSH
46944: LD_INT 3
46946: ARRAY
46947: GREATEREQUAL
46948: AND
46949: ST_TO_ADDR
// end ;
46950: LD_VAR 0 2
46954: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46955: LD_INT 0
46957: PPUSH
46958: PPUSH
46959: PPUSH
// pom := GetBase ( building ) ;
46960: LD_ADDR_VAR 0 4
46964: PUSH
46965: LD_VAR 0 1
46969: PPUSH
46970: CALL_OW 274
46974: ST_TO_ADDR
// if not pom then
46975: LD_VAR 0 4
46979: NOT
46980: IFFALSE 46984
// exit ;
46982: GO 47089
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46984: LD_ADDR_VAR 0 5
46988: PUSH
46989: LD_VAR 0 2
46993: PPUSH
46994: LD_VAR 0 1
46998: PPUSH
46999: CALL_OW 248
47003: PPUSH
47004: CALL_OW 450
47008: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47009: LD_ADDR_VAR 0 3
47013: PUSH
47014: LD_VAR 0 4
47018: PPUSH
47019: LD_INT 1
47021: PPUSH
47022: CALL_OW 275
47026: PUSH
47027: LD_VAR 0 5
47031: PUSH
47032: LD_INT 1
47034: ARRAY
47035: GREATEREQUAL
47036: IFFALSE 47062
47038: PUSH
47039: LD_VAR 0 4
47043: PPUSH
47044: LD_INT 2
47046: PPUSH
47047: CALL_OW 275
47051: PUSH
47052: LD_VAR 0 5
47056: PUSH
47057: LD_INT 2
47059: ARRAY
47060: GREATEREQUAL
47061: AND
47062: IFFALSE 47088
47064: PUSH
47065: LD_VAR 0 4
47069: PPUSH
47070: LD_INT 3
47072: PPUSH
47073: CALL_OW 275
47077: PUSH
47078: LD_VAR 0 5
47082: PUSH
47083: LD_INT 3
47085: ARRAY
47086: GREATEREQUAL
47087: AND
47088: ST_TO_ADDR
// end ;
47089: LD_VAR 0 3
47093: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47094: LD_INT 0
47096: PPUSH
47097: PPUSH
47098: PPUSH
47099: PPUSH
47100: PPUSH
47101: PPUSH
47102: PPUSH
47103: PPUSH
47104: PPUSH
47105: PPUSH
47106: PPUSH
// result := false ;
47107: LD_ADDR_VAR 0 8
47111: PUSH
47112: LD_INT 0
47114: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47115: LD_VAR 0 5
47119: NOT
47120: IFTRUE 47129
47122: PUSH
47123: LD_VAR 0 1
47127: NOT
47128: OR
47129: IFTRUE 47138
47131: PUSH
47132: LD_VAR 0 2
47136: NOT
47137: OR
47138: IFTRUE 47147
47140: PUSH
47141: LD_VAR 0 3
47145: NOT
47146: OR
47147: IFFALSE 47151
// exit ;
47149: GO 47977
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47151: LD_ADDR_VAR 0 14
47155: PUSH
47156: LD_VAR 0 1
47160: PPUSH
47161: LD_VAR 0 2
47165: PPUSH
47166: LD_VAR 0 3
47170: PPUSH
47171: LD_VAR 0 4
47175: PPUSH
47176: LD_VAR 0 5
47180: PUSH
47181: LD_INT 1
47183: ARRAY
47184: PPUSH
47185: CALL_OW 248
47189: PPUSH
47190: LD_INT 0
47192: PPUSH
47193: CALL 49258 0 6
47197: ST_TO_ADDR
// if not hexes then
47198: LD_VAR 0 14
47202: NOT
47203: IFFALSE 47207
// exit ;
47205: GO 47977
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47207: LD_ADDR_VAR 0 17
47211: PUSH
47212: LD_VAR 0 5
47216: PPUSH
47217: LD_INT 22
47219: PUSH
47220: LD_VAR 0 13
47224: PPUSH
47225: CALL_OW 255
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: LD_INT 30
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 30
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: LIST
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PPUSH
47266: CALL_OW 72
47270: ST_TO_ADDR
// for i = 1 to hexes do
47271: LD_ADDR_VAR 0 9
47275: PUSH
47276: DOUBLE
47277: LD_INT 1
47279: DEC
47280: ST_TO_ADDR
47281: LD_VAR 0 14
47285: PUSH
47286: FOR_TO
47287: IFFALSE 47975
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47289: LD_ADDR_VAR 0 13
47293: PUSH
47294: LD_VAR 0 14
47298: PUSH
47299: LD_VAR 0 9
47303: ARRAY
47304: PUSH
47305: LD_INT 1
47307: ARRAY
47308: PPUSH
47309: LD_VAR 0 14
47313: PUSH
47314: LD_VAR 0 9
47318: ARRAY
47319: PUSH
47320: LD_INT 2
47322: ARRAY
47323: PPUSH
47324: CALL_OW 428
47328: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47329: LD_VAR 0 14
47333: PUSH
47334: LD_VAR 0 9
47338: ARRAY
47339: PUSH
47340: LD_INT 1
47342: ARRAY
47343: PPUSH
47344: LD_VAR 0 14
47348: PUSH
47349: LD_VAR 0 9
47353: ARRAY
47354: PUSH
47355: LD_INT 2
47357: ARRAY
47358: PPUSH
47359: CALL_OW 351
47363: IFTRUE 47402
47365: PUSH
47366: LD_VAR 0 14
47370: PUSH
47371: LD_VAR 0 9
47375: ARRAY
47376: PUSH
47377: LD_INT 1
47379: ARRAY
47380: PPUSH
47381: LD_VAR 0 14
47385: PUSH
47386: LD_VAR 0 9
47390: ARRAY
47391: PUSH
47392: LD_INT 2
47394: ARRAY
47395: PPUSH
47396: CALL_OW 488
47400: NOT
47401: OR
47402: IFTRUE 47419
47404: PUSH
47405: LD_VAR 0 13
47409: PPUSH
47410: CALL_OW 247
47414: PUSH
47415: LD_INT 3
47417: EQUAL
47418: OR
47419: IFFALSE 47425
// exit ;
47421: POP
47422: POP
47423: GO 47977
// if not tmp then
47425: LD_VAR 0 13
47429: NOT
47430: IFFALSE 47434
// continue ;
47432: GO 47286
// result := true ;
47434: LD_ADDR_VAR 0 8
47438: PUSH
47439: LD_INT 1
47441: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47442: LD_VAR 0 6
47446: IFFALSE 47463
47448: PUSH
47449: LD_VAR 0 13
47453: PPUSH
47454: CALL_OW 247
47458: PUSH
47459: LD_INT 2
47461: EQUAL
47462: AND
47463: IFFALSE 47480
47465: PUSH
47466: LD_VAR 0 13
47470: PPUSH
47471: CALL_OW 263
47475: PUSH
47476: LD_INT 1
47478: EQUAL
47479: AND
47480: IFFALSE 47644
// begin if IsDrivenBy ( tmp ) then
47482: LD_VAR 0 13
47486: PPUSH
47487: CALL_OW 311
47491: IFFALSE 47495
// continue ;
47493: GO 47286
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47495: LD_VAR 0 6
47499: PPUSH
47500: LD_INT 3
47502: PUSH
47503: LD_INT 60
47505: PUSH
47506: EMPTY
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: PUSH
47516: LD_INT 55
47518: PUSH
47519: EMPTY
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PPUSH
47530: CALL_OW 72
47534: IFFALSE 47642
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47536: LD_ADDR_VAR 0 18
47540: PUSH
47541: LD_VAR 0 6
47545: PPUSH
47546: LD_INT 3
47548: PUSH
47549: LD_INT 60
47551: PUSH
47552: EMPTY
47553: LIST
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 3
47561: PUSH
47562: LD_INT 55
47564: PUSH
47565: EMPTY
47566: LIST
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PPUSH
47576: CALL_OW 72
47580: PUSH
47581: LD_INT 1
47583: ARRAY
47584: ST_TO_ADDR
// if IsInUnit ( driver ) then
47585: LD_VAR 0 18
47589: PPUSH
47590: CALL_OW 310
47594: IFFALSE 47605
// ComExit ( driver ) ;
47596: LD_VAR 0 18
47600: PPUSH
47601: CALL 73248 0 1
// AddComEnterUnit ( driver , tmp ) ;
47605: LD_VAR 0 18
47609: PPUSH
47610: LD_VAR 0 13
47614: PPUSH
47615: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47619: LD_VAR 0 18
47623: PPUSH
47624: LD_VAR 0 7
47628: PPUSH
47629: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47633: LD_VAR 0 18
47637: PPUSH
47638: CALL_OW 181
// end ; continue ;
47642: GO 47286
// end ; if not cleaners or not tmp in cleaners then
47644: LD_VAR 0 6
47648: NOT
47649: IFTRUE 47664
47651: PUSH
47652: LD_VAR 0 13
47656: PUSH
47657: LD_VAR 0 6
47661: IN
47662: NOT
47663: OR
47664: IFFALSE 47973
// begin if dep then
47666: LD_VAR 0 17
47670: IFFALSE 47806
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47672: LD_ADDR_VAR 0 16
47676: PUSH
47677: LD_VAR 0 17
47681: PUSH
47682: LD_INT 1
47684: ARRAY
47685: PPUSH
47686: CALL_OW 250
47690: PPUSH
47691: LD_VAR 0 17
47695: PUSH
47696: LD_INT 1
47698: ARRAY
47699: PPUSH
47700: CALL_OW 254
47704: PPUSH
47705: LD_INT 5
47707: PPUSH
47708: CALL_OW 272
47712: PUSH
47713: LD_VAR 0 17
47717: PUSH
47718: LD_INT 1
47720: ARRAY
47721: PPUSH
47722: CALL_OW 251
47726: PPUSH
47727: LD_VAR 0 17
47731: PUSH
47732: LD_INT 1
47734: ARRAY
47735: PPUSH
47736: CALL_OW 254
47740: PPUSH
47741: LD_INT 5
47743: PPUSH
47744: CALL_OW 273
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47753: LD_VAR 0 16
47757: PUSH
47758: LD_INT 1
47760: ARRAY
47761: PPUSH
47762: LD_VAR 0 16
47766: PUSH
47767: LD_INT 2
47769: ARRAY
47770: PPUSH
47771: CALL_OW 488
47775: IFFALSE 47806
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47777: LD_VAR 0 13
47781: PPUSH
47782: LD_VAR 0 16
47786: PUSH
47787: LD_INT 1
47789: ARRAY
47790: PPUSH
47791: LD_VAR 0 16
47795: PUSH
47796: LD_INT 2
47798: ARRAY
47799: PPUSH
47800: CALL_OW 111
// continue ;
47804: GO 47286
// end ; end ; r := GetDir ( tmp ) ;
47806: LD_ADDR_VAR 0 15
47810: PUSH
47811: LD_VAR 0 13
47815: PPUSH
47816: CALL_OW 254
47820: ST_TO_ADDR
// if r = 5 then
47821: LD_VAR 0 15
47825: PUSH
47826: LD_INT 5
47828: EQUAL
47829: IFFALSE 47839
// r := 0 ;
47831: LD_ADDR_VAR 0 15
47835: PUSH
47836: LD_INT 0
47838: ST_TO_ADDR
// for j = r to 5 do
47839: LD_ADDR_VAR 0 10
47843: PUSH
47844: DOUBLE
47845: LD_VAR 0 15
47849: DEC
47850: ST_TO_ADDR
47851: LD_INT 5
47853: PUSH
47854: FOR_TO
47855: IFFALSE 47971
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47857: LD_ADDR_VAR 0 11
47861: PUSH
47862: LD_VAR 0 13
47866: PPUSH
47867: CALL_OW 250
47871: PPUSH
47872: LD_VAR 0 10
47876: PPUSH
47877: LD_INT 2
47879: PPUSH
47880: CALL_OW 272
47884: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47885: LD_ADDR_VAR 0 12
47889: PUSH
47890: LD_VAR 0 13
47894: PPUSH
47895: CALL_OW 251
47899: PPUSH
47900: LD_VAR 0 10
47904: PPUSH
47905: LD_INT 2
47907: PPUSH
47908: CALL_OW 273
47912: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47913: LD_VAR 0 11
47917: PPUSH
47918: LD_VAR 0 12
47922: PPUSH
47923: CALL_OW 488
47927: IFFALSE 47946
47929: PUSH
47930: LD_VAR 0 11
47934: PPUSH
47935: LD_VAR 0 12
47939: PPUSH
47940: CALL_OW 428
47944: NOT
47945: AND
47946: IFFALSE 47969
// begin ComMoveXY ( tmp , _x , _y ) ;
47948: LD_VAR 0 13
47952: PPUSH
47953: LD_VAR 0 11
47957: PPUSH
47958: LD_VAR 0 12
47962: PPUSH
47963: CALL_OW 111
// break ;
47967: GO 47971
// end ; end ;
47969: GO 47854
47971: POP
47972: POP
// end ; end ;
47973: GO 47286
47975: POP
47976: POP
// end ;
47977: LD_VAR 0 8
47981: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47982: LD_INT 0
47984: PPUSH
// result := true ;
47985: LD_ADDR_VAR 0 3
47989: PUSH
47990: LD_INT 1
47992: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47993: LD_VAR 0 2
47997: PUSH
47998: LD_INT 24
48000: DOUBLE
48001: EQUAL
48002: IFTRUE 48012
48004: LD_INT 33
48006: DOUBLE
48007: EQUAL
48008: IFTRUE 48012
48010: GO 48037
48012: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48013: LD_ADDR_VAR 0 3
48017: PUSH
48018: LD_INT 32
48020: PPUSH
48021: LD_VAR 0 1
48025: PPUSH
48026: CALL_OW 321
48030: PUSH
48031: LD_INT 2
48033: EQUAL
48034: ST_TO_ADDR
48035: GO 48353
48037: LD_INT 20
48039: DOUBLE
48040: EQUAL
48041: IFTRUE 48045
48043: GO 48070
48045: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48046: LD_ADDR_VAR 0 3
48050: PUSH
48051: LD_INT 6
48053: PPUSH
48054: LD_VAR 0 1
48058: PPUSH
48059: CALL_OW 321
48063: PUSH
48064: LD_INT 2
48066: EQUAL
48067: ST_TO_ADDR
48068: GO 48353
48070: LD_INT 22
48072: DOUBLE
48073: EQUAL
48074: IFTRUE 48084
48076: LD_INT 36
48078: DOUBLE
48079: EQUAL
48080: IFTRUE 48084
48082: GO 48109
48084: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48085: LD_ADDR_VAR 0 3
48089: PUSH
48090: LD_INT 15
48092: PPUSH
48093: LD_VAR 0 1
48097: PPUSH
48098: CALL_OW 321
48102: PUSH
48103: LD_INT 2
48105: EQUAL
48106: ST_TO_ADDR
48107: GO 48353
48109: LD_INT 30
48111: DOUBLE
48112: EQUAL
48113: IFTRUE 48117
48115: GO 48142
48117: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48118: LD_ADDR_VAR 0 3
48122: PUSH
48123: LD_INT 20
48125: PPUSH
48126: LD_VAR 0 1
48130: PPUSH
48131: CALL_OW 321
48135: PUSH
48136: LD_INT 2
48138: EQUAL
48139: ST_TO_ADDR
48140: GO 48353
48142: LD_INT 28
48144: DOUBLE
48145: EQUAL
48146: IFTRUE 48156
48148: LD_INT 21
48150: DOUBLE
48151: EQUAL
48152: IFTRUE 48156
48154: GO 48181
48156: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48157: LD_ADDR_VAR 0 3
48161: PUSH
48162: LD_INT 21
48164: PPUSH
48165: LD_VAR 0 1
48169: PPUSH
48170: CALL_OW 321
48174: PUSH
48175: LD_INT 2
48177: EQUAL
48178: ST_TO_ADDR
48179: GO 48353
48181: LD_INT 16
48183: DOUBLE
48184: EQUAL
48185: IFTRUE 48189
48187: GO 48214
48189: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48190: LD_ADDR_VAR 0 3
48194: PUSH
48195: LD_INT 84
48197: PPUSH
48198: LD_VAR 0 1
48202: PPUSH
48203: CALL_OW 321
48207: PUSH
48208: LD_INT 2
48210: EQUAL
48211: ST_TO_ADDR
48212: GO 48353
48214: LD_INT 19
48216: DOUBLE
48217: EQUAL
48218: IFTRUE 48228
48220: LD_INT 23
48222: DOUBLE
48223: EQUAL
48224: IFTRUE 48228
48226: GO 48253
48228: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48229: LD_ADDR_VAR 0 3
48233: PUSH
48234: LD_INT 83
48236: PPUSH
48237: LD_VAR 0 1
48241: PPUSH
48242: CALL_OW 321
48246: PUSH
48247: LD_INT 2
48249: EQUAL
48250: ST_TO_ADDR
48251: GO 48353
48253: LD_INT 17
48255: DOUBLE
48256: EQUAL
48257: IFTRUE 48261
48259: GO 48286
48261: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48262: LD_ADDR_VAR 0 3
48266: PUSH
48267: LD_INT 39
48269: PPUSH
48270: LD_VAR 0 1
48274: PPUSH
48275: CALL_OW 321
48279: PUSH
48280: LD_INT 2
48282: EQUAL
48283: ST_TO_ADDR
48284: GO 48353
48286: LD_INT 18
48288: DOUBLE
48289: EQUAL
48290: IFTRUE 48294
48292: GO 48319
48294: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48295: LD_ADDR_VAR 0 3
48299: PUSH
48300: LD_INT 40
48302: PPUSH
48303: LD_VAR 0 1
48307: PPUSH
48308: CALL_OW 321
48312: PUSH
48313: LD_INT 2
48315: EQUAL
48316: ST_TO_ADDR
48317: GO 48353
48319: LD_INT 27
48321: DOUBLE
48322: EQUAL
48323: IFTRUE 48327
48325: GO 48352
48327: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48328: LD_ADDR_VAR 0 3
48332: PUSH
48333: LD_INT 35
48335: PPUSH
48336: LD_VAR 0 1
48340: PPUSH
48341: CALL_OW 321
48345: PUSH
48346: LD_INT 2
48348: EQUAL
48349: ST_TO_ADDR
48350: GO 48353
48352: POP
// end ;
48353: LD_VAR 0 3
48357: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48358: LD_INT 0
48360: PPUSH
48361: PPUSH
48362: PPUSH
48363: PPUSH
48364: PPUSH
48365: PPUSH
48366: PPUSH
48367: PPUSH
48368: PPUSH
48369: PPUSH
48370: PPUSH
// result := false ;
48371: LD_ADDR_VAR 0 6
48375: PUSH
48376: LD_INT 0
48378: ST_TO_ADDR
// if btype = b_depot then
48379: LD_VAR 0 2
48383: PUSH
48384: LD_INT 0
48386: EQUAL
48387: IFFALSE 48399
// begin result := true ;
48389: LD_ADDR_VAR 0 6
48393: PUSH
48394: LD_INT 1
48396: ST_TO_ADDR
// exit ;
48397: GO 49253
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48399: LD_VAR 0 1
48403: NOT
48404: IFTRUE 48429
48406: PUSH
48407: LD_VAR 0 1
48411: PPUSH
48412: CALL_OW 266
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: IN
48427: NOT
48428: OR
48429: IFTRUE 48438
48431: PUSH
48432: LD_VAR 0 2
48436: NOT
48437: OR
48438: IFTRUE 48474
48440: PUSH
48441: LD_VAR 0 5
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: LD_INT 4
48460: PUSH
48461: LD_INT 5
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: IN
48472: NOT
48473: OR
48474: IFTRUE 48493
48476: PUSH
48477: LD_VAR 0 3
48481: PPUSH
48482: LD_VAR 0 4
48486: PPUSH
48487: CALL_OW 488
48491: NOT
48492: OR
48493: IFFALSE 48497
// exit ;
48495: GO 49253
// side := GetSide ( depot ) ;
48497: LD_ADDR_VAR 0 9
48501: PUSH
48502: LD_VAR 0 1
48506: PPUSH
48507: CALL_OW 255
48511: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48512: LD_VAR 0 9
48516: PPUSH
48517: LD_VAR 0 2
48521: PPUSH
48522: CALL 47982 0 2
48526: NOT
48527: IFFALSE 48531
// exit ;
48529: GO 49253
// pom := GetBase ( depot ) ;
48531: LD_ADDR_VAR 0 10
48535: PUSH
48536: LD_VAR 0 1
48540: PPUSH
48541: CALL_OW 274
48545: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48546: LD_ADDR_VAR 0 11
48550: PUSH
48551: LD_VAR 0 2
48555: PPUSH
48556: LD_VAR 0 1
48560: PPUSH
48561: CALL_OW 248
48565: PPUSH
48566: CALL_OW 450
48570: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48571: LD_VAR 0 10
48575: PPUSH
48576: LD_INT 1
48578: PPUSH
48579: CALL_OW 275
48583: PUSH
48584: LD_VAR 0 11
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: GREATEREQUAL
48593: IFFALSE 48619
48595: PUSH
48596: LD_VAR 0 10
48600: PPUSH
48601: LD_INT 2
48603: PPUSH
48604: CALL_OW 275
48608: PUSH
48609: LD_VAR 0 11
48613: PUSH
48614: LD_INT 2
48616: ARRAY
48617: GREATEREQUAL
48618: AND
48619: IFFALSE 48645
48621: PUSH
48622: LD_VAR 0 10
48626: PPUSH
48627: LD_INT 3
48629: PPUSH
48630: CALL_OW 275
48634: PUSH
48635: LD_VAR 0 11
48639: PUSH
48640: LD_INT 3
48642: ARRAY
48643: GREATEREQUAL
48644: AND
48645: NOT
48646: IFFALSE 48650
// exit ;
48648: GO 49253
// if GetBType ( depot ) = b_depot then
48650: LD_VAR 0 1
48654: PPUSH
48655: CALL_OW 266
48659: PUSH
48660: LD_INT 0
48662: EQUAL
48663: IFFALSE 48675
// dist := 28 else
48665: LD_ADDR_VAR 0 14
48669: PUSH
48670: LD_INT 28
48672: ST_TO_ADDR
48673: GO 48683
// dist := 36 ;
48675: LD_ADDR_VAR 0 14
48679: PUSH
48680: LD_INT 36
48682: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48683: LD_VAR 0 1
48687: PPUSH
48688: LD_VAR 0 3
48692: PPUSH
48693: LD_VAR 0 4
48697: PPUSH
48698: CALL_OW 297
48702: PUSH
48703: LD_VAR 0 14
48707: GREATER
48708: IFFALSE 48712
// exit ;
48710: GO 49253
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48712: LD_ADDR_VAR 0 12
48716: PUSH
48717: LD_VAR 0 2
48721: PPUSH
48722: LD_VAR 0 3
48726: PPUSH
48727: LD_VAR 0 4
48731: PPUSH
48732: LD_VAR 0 5
48736: PPUSH
48737: LD_VAR 0 1
48741: PPUSH
48742: CALL_OW 248
48746: PPUSH
48747: LD_INT 0
48749: PPUSH
48750: CALL 49258 0 6
48754: ST_TO_ADDR
// if not hexes then
48755: LD_VAR 0 12
48759: NOT
48760: IFFALSE 48764
// exit ;
48762: GO 49253
// hex := GetHexInfo ( x , y ) ;
48764: LD_ADDR_VAR 0 15
48768: PUSH
48769: LD_VAR 0 3
48773: PPUSH
48774: LD_VAR 0 4
48778: PPUSH
48779: CALL_OW 546
48783: ST_TO_ADDR
// if hex [ 1 ] then
48784: LD_VAR 0 15
48788: PUSH
48789: LD_INT 1
48791: ARRAY
48792: IFFALSE 48796
// exit ;
48794: GO 49253
// height := hex [ 2 ] ;
48796: LD_ADDR_VAR 0 13
48800: PUSH
48801: LD_VAR 0 15
48805: PUSH
48806: LD_INT 2
48808: ARRAY
48809: ST_TO_ADDR
// for i = 1 to hexes do
48810: LD_ADDR_VAR 0 7
48814: PUSH
48815: DOUBLE
48816: LD_INT 1
48818: DEC
48819: ST_TO_ADDR
48820: LD_VAR 0 12
48824: PUSH
48825: FOR_TO
48826: IFFALSE 49170
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48828: LD_VAR 0 12
48832: PUSH
48833: LD_VAR 0 7
48837: ARRAY
48838: PUSH
48839: LD_INT 1
48841: ARRAY
48842: PPUSH
48843: LD_VAR 0 12
48847: PUSH
48848: LD_VAR 0 7
48852: ARRAY
48853: PUSH
48854: LD_INT 2
48856: ARRAY
48857: PPUSH
48858: CALL_OW 488
48862: NOT
48863: IFTRUE 48905
48865: PUSH
48866: LD_VAR 0 12
48870: PUSH
48871: LD_VAR 0 7
48875: ARRAY
48876: PUSH
48877: LD_INT 1
48879: ARRAY
48880: PPUSH
48881: LD_VAR 0 12
48885: PUSH
48886: LD_VAR 0 7
48890: ARRAY
48891: PUSH
48892: LD_INT 2
48894: ARRAY
48895: PPUSH
48896: CALL_OW 428
48900: PUSH
48901: LD_INT 0
48903: GREATER
48904: OR
48905: IFTRUE 48943
48907: PUSH
48908: LD_VAR 0 12
48912: PUSH
48913: LD_VAR 0 7
48917: ARRAY
48918: PUSH
48919: LD_INT 1
48921: ARRAY
48922: PPUSH
48923: LD_VAR 0 12
48927: PUSH
48928: LD_VAR 0 7
48932: ARRAY
48933: PUSH
48934: LD_INT 2
48936: ARRAY
48937: PPUSH
48938: CALL_OW 351
48942: OR
48943: IFFALSE 48949
// exit ;
48945: POP
48946: POP
48947: GO 49253
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48949: LD_ADDR_VAR 0 8
48953: PUSH
48954: LD_VAR 0 12
48958: PUSH
48959: LD_VAR 0 7
48963: ARRAY
48964: PUSH
48965: LD_INT 1
48967: ARRAY
48968: PPUSH
48969: LD_VAR 0 12
48973: PUSH
48974: LD_VAR 0 7
48978: ARRAY
48979: PUSH
48980: LD_INT 2
48982: ARRAY
48983: PPUSH
48984: CALL_OW 546
48988: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48989: LD_VAR 0 8
48993: PUSH
48994: LD_INT 1
48996: ARRAY
48997: IFTRUE 49019
48999: PUSH
49000: LD_VAR 0 8
49004: PUSH
49005: LD_INT 2
49007: ARRAY
49008: PUSH
49009: LD_VAR 0 13
49013: PUSH
49014: LD_INT 2
49016: PLUS
49017: GREATER
49018: OR
49019: IFTRUE 49041
49021: PUSH
49022: LD_VAR 0 8
49026: PUSH
49027: LD_INT 2
49029: ARRAY
49030: PUSH
49031: LD_VAR 0 13
49035: PUSH
49036: LD_INT 2
49038: MINUS
49039: LESS
49040: OR
49041: IFTRUE 49109
49043: PUSH
49044: LD_VAR 0 8
49048: PUSH
49049: LD_INT 3
49051: ARRAY
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 8
49058: PUSH
49059: LD_INT 9
49061: PUSH
49062: LD_INT 10
49064: PUSH
49065: LD_INT 11
49067: PUSH
49068: LD_INT 12
49070: PUSH
49071: LD_INT 13
49073: PUSH
49074: LD_INT 16
49076: PUSH
49077: LD_INT 17
49079: PUSH
49080: LD_INT 18
49082: PUSH
49083: LD_INT 19
49085: PUSH
49086: LD_INT 20
49088: PUSH
49089: LD_INT 21
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: IN
49107: NOT
49108: OR
49109: IFTRUE 49122
49111: PUSH
49112: LD_VAR 0 8
49116: PUSH
49117: LD_INT 5
49119: ARRAY
49120: NOT
49121: OR
49122: IFTRUE 49162
49124: PUSH
49125: LD_VAR 0 8
49129: PUSH
49130: LD_INT 6
49132: ARRAY
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: LD_INT 7
49142: PUSH
49143: LD_INT 9
49145: PUSH
49146: LD_INT 10
49148: PUSH
49149: LD_INT 11
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: IN
49160: NOT
49161: OR
49162: IFFALSE 49168
// exit ;
49164: POP
49165: POP
49166: GO 49253
// end ;
49168: GO 48825
49170: POP
49171: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49172: LD_VAR 0 9
49176: PPUSH
49177: LD_VAR 0 3
49181: PPUSH
49182: LD_VAR 0 4
49186: PPUSH
49187: LD_INT 20
49189: PPUSH
49190: CALL 41072 0 4
49194: PUSH
49195: LD_INT 4
49197: ARRAY
49198: IFFALSE 49202
// exit ;
49200: GO 49253
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49202: LD_VAR 0 2
49206: PUSH
49207: LD_INT 29
49209: PUSH
49210: LD_INT 30
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: IN
49217: IFFALSE 49241
49219: PUSH
49220: LD_VAR 0 3
49224: PPUSH
49225: LD_VAR 0 4
49229: PPUSH
49230: LD_VAR 0 9
49234: PPUSH
49235: CALL_OW 440
49239: NOT
49240: AND
49241: IFFALSE 49245
// exit ;
49243: GO 49253
// result := true ;
49245: LD_ADDR_VAR 0 6
49249: PUSH
49250: LD_INT 1
49252: ST_TO_ADDR
// end ;
49253: LD_VAR 0 6
49257: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49258: LD_INT 0
49260: PPUSH
49261: PPUSH
49262: PPUSH
49263: PPUSH
49264: PPUSH
49265: PPUSH
49266: PPUSH
49267: PPUSH
49268: PPUSH
49269: PPUSH
49270: PPUSH
49271: PPUSH
49272: PPUSH
49273: PPUSH
49274: PPUSH
49275: PPUSH
49276: PPUSH
49277: PPUSH
49278: PPUSH
49279: PPUSH
49280: PPUSH
49281: PPUSH
49282: PPUSH
49283: PPUSH
49284: PPUSH
49285: PPUSH
49286: PPUSH
49287: PPUSH
49288: PPUSH
49289: PPUSH
49290: PPUSH
49291: PPUSH
49292: PPUSH
49293: PPUSH
49294: PPUSH
49295: PPUSH
49296: PPUSH
49297: PPUSH
49298: PPUSH
49299: PPUSH
49300: PPUSH
49301: PPUSH
49302: PPUSH
49303: PPUSH
49304: PPUSH
49305: PPUSH
49306: PPUSH
49307: PPUSH
49308: PPUSH
49309: PPUSH
49310: PPUSH
49311: PPUSH
49312: PPUSH
49313: PPUSH
49314: PPUSH
49315: PPUSH
49316: PPUSH
49317: PPUSH
// result = [ ] ;
49318: LD_ADDR_VAR 0 7
49322: PUSH
49323: EMPTY
49324: ST_TO_ADDR
// temp_list = [ ] ;
49325: LD_ADDR_VAR 0 9
49329: PUSH
49330: EMPTY
49331: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49332: LD_VAR 0 4
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: LD_INT 3
49348: PUSH
49349: LD_INT 4
49351: PUSH
49352: LD_INT 5
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: IN
49363: NOT
49364: IFTRUE 49407
49366: PUSH
49367: LD_VAR 0 1
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: IN
49382: IFFALSE 49406
49384: PUSH
49385: LD_VAR 0 5
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: LD_INT 3
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: LIST
49403: IN
49404: NOT
49405: AND
49406: OR
49407: IFFALSE 49411
// exit ;
49409: GO 67810
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49411: LD_VAR 0 1
49415: PUSH
49416: LD_INT 6
49418: PUSH
49419: LD_INT 7
49421: PUSH
49422: LD_INT 8
49424: PUSH
49425: LD_INT 13
49427: PUSH
49428: LD_INT 12
49430: PUSH
49431: LD_INT 15
49433: PUSH
49434: LD_INT 11
49436: PUSH
49437: LD_INT 14
49439: PUSH
49440: LD_INT 10
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: IN
49454: IFFALSE 49464
// btype = b_lab ;
49456: LD_ADDR_VAR 0 1
49460: PUSH
49461: LD_INT 6
49463: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49464: LD_VAR 0 6
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: LIST
49482: IN
49483: NOT
49484: IFTRUE 49552
49486: PUSH
49487: LD_VAR 0 1
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: LD_INT 6
49506: PUSH
49507: LD_INT 36
49509: PUSH
49510: LD_INT 4
49512: PUSH
49513: LD_INT 5
49515: PUSH
49516: LD_INT 31
49518: PUSH
49519: LD_INT 32
49521: PUSH
49522: LD_INT 33
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: IN
49538: NOT
49539: IFFALSE 49551
49541: PUSH
49542: LD_VAR 0 6
49546: PUSH
49547: LD_INT 1
49549: EQUAL
49550: AND
49551: OR
49552: IFTRUE 49584
49554: PUSH
49555: LD_VAR 0 1
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: IN
49570: NOT
49571: IFFALSE 49583
49573: PUSH
49574: LD_VAR 0 6
49578: PUSH
49579: LD_INT 2
49581: EQUAL
49582: AND
49583: OR
49584: IFFALSE 49594
// mode = 0 ;
49586: LD_ADDR_VAR 0 6
49590: PUSH
49591: LD_INT 0
49593: ST_TO_ADDR
// case mode of 0 :
49594: LD_VAR 0 6
49598: PUSH
49599: LD_INT 0
49601: DOUBLE
49602: EQUAL
49603: IFTRUE 49607
49605: GO 61060
49607: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49608: LD_ADDR_VAR 0 11
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 3
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 3
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49801: LD_ADDR_VAR 0 12
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 3
49969: NEG
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49997: LD_ADDR_VAR 0 13
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: LD_INT 3
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50196: LD_ADDR_VAR 0 14
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: LD_INT 3
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 3
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50392: LD_ADDR_VAR 0 15
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 3
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 3
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50585: LD_ADDR_VAR 0 16
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 3
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: LD_INT 3
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50778: LD_ADDR_VAR 0 17
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51008: LD_ADDR_VAR 0 18
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: NEG
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51238: LD_ADDR_VAR 0 19
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 2
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: NEG
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51468: LD_ADDR_VAR 0 20
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 2
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51698: LD_ADDR_VAR 0 21
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: LD_INT 2
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51928: LD_ADDR_VAR 0 22
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: NEG
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52158: LD_ADDR_VAR 0 23
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: LD_INT 3
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: LD_INT 3
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52438: LD_ADDR_VAR 0 24
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 3
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 3
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52714: LD_ADDR_VAR 0 25
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: LD_INT 3
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 3
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52988: LD_ADDR_VAR 0 26
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53264: LD_ADDR_VAR 0 27
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 3
53509: NEG
53510: PUSH
53511: LD_INT 2
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53544: LD_ADDR_VAR 0 28
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 3
53779: NEG
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 3
53791: NEG
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53826: LD_ADDR_VAR 0 29
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: LD_INT 3
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 3
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 3
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54105: LD_ADDR_VAR 0 30
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: LD_INT 3
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: NEG
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54383: LD_ADDR_VAR 0 31
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: LD_INT 2
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: LD_INT 3
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 3
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 3
54626: NEG
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54661: LD_ADDR_VAR 0 32
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: NEG
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 3
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 3
54904: NEG
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54939: LD_ADDR_VAR 0 33
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: LD_INT 3
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 3
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 3
55183: NEG
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55218: LD_ADDR_VAR 0 34
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 3
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: LD_INT 3
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 3
55463: NEG
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55498: LD_ADDR_VAR 0 35
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55610: LD_ADDR_VAR 0 36
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 2
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55722: LD_ADDR_VAR 0 37
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55834: LD_ADDR_VAR 0 38
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55946: LD_ADDR_VAR 0 39
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56058: LD_ADDR_VAR 0 40
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56170: LD_ADDR_VAR 0 41
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: LD_INT 3
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 3
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: PUSH
56414: LD_INT 3
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 3
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 3
56444: NEG
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 3
56455: NEG
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 3
56467: NEG
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 3
56479: NEG
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56520: LD_ADDR_VAR 0 42
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 3
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 3
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: NEG
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 3
56829: NEG
56830: PUSH
56831: LD_INT 3
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56870: LD_ADDR_VAR 0 43
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 2
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 3
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 3
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 3
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 3
57166: NEG
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57218: LD_ADDR_VAR 0 44
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: LD_INT 3
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 3
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 3
57515: NEG
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: LD_INT 3
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57568: LD_ADDR_VAR 0 45
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 2
57746: NEG
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 3
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 3
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: LD_INT 3
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57918: LD_ADDR_VAR 0 46
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: LD_INT 3
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 3
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 3
58214: NEG
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58266: LD_ADDR_VAR 0 47
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: LD_INT 2
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58417: LD_ADDR_VAR 0 48
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58564: LD_ADDR_VAR 0 49
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58708: LD_ADDR_VAR 0 50
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58852: LD_ADDR_VAR 0 51
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58999: LD_ADDR_VAR 0 52
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59150: LD_ADDR_VAR 0 53
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59380: LD_ADDR_VAR 0 54
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: LD_INT 1
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 2
59556: NEG
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: LD_INT 2
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59610: LD_ADDR_VAR 0 55
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: LD_INT 2
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: LD_INT 2
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 2
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: NEG
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: LD_INT 2
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59840: LD_ADDR_VAR 0 56
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: LD_INT 2
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 2
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60070: LD_ADDR_VAR 0 57
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60300: LD_ADDR_VAR 0 58
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 2
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: LD_INT 2
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: LD_INT 2
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 2
60476: NEG
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 2
60487: NEG
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 2
60499: NEG
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60530: LD_ADDR_VAR 0 59
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60618: LD_ADDR_VAR 0 60
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60706: LD_ADDR_VAR 0 61
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60794: LD_ADDR_VAR 0 62
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60882: LD_ADDR_VAR 0 63
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60970: LD_ADDR_VAR 0 64
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: ST_TO_ADDR
// end ; 1 :
61058: GO 66955
61060: LD_INT 1
61062: DOUBLE
61063: EQUAL
61064: IFTRUE 61068
61066: GO 63691
61068: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61069: LD_ADDR_VAR 0 11
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: LD_INT 2
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61113: LD_ADDR_VAR 0 12
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 3
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 3
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: LIST
61153: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61154: LD_ADDR_VAR 0 13
61158: PUSH
61159: LD_INT 3
61161: PUSH
61162: LD_INT 2
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 3
61171: PUSH
61172: LD_INT 3
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: LIST
61193: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61194: LD_ADDR_VAR 0 14
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: LIST
61234: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61235: LD_ADDR_VAR 0 15
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61279: LD_ADDR_VAR 0 16
61283: PUSH
61284: LD_INT 2
61286: NEG
61287: PUSH
61288: LD_INT 3
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 3
61298: NEG
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: NEG
61311: PUSH
61312: LD_INT 3
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: LIST
61324: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61325: LD_ADDR_VAR 0 17
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 3
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: LIST
61368: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61369: LD_ADDR_VAR 0 18
61373: PUSH
61374: LD_INT 2
61376: PUSH
61377: LD_INT 1
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 3
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: LIST
61409: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61410: LD_ADDR_VAR 0 19
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: LD_INT 2
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 3
61427: PUSH
61428: LD_INT 3
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: LIST
61449: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61450: LD_ADDR_VAR 0 20
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 3
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: LIST
61490: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61491: LD_ADDR_VAR 0 21
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 3
61520: NEG
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: LIST
61534: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61535: LD_ADDR_VAR 0 22
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: LD_INT 3
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: LIST
61580: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61581: LD_ADDR_VAR 0 23
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 3
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: LD_INT 4
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: LD_INT 3
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: LIST
61624: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61625: LD_ADDR_VAR 0 24
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 3
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 4
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: LIST
61665: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61666: LD_ADDR_VAR 0 25
61670: PUSH
61671: LD_INT 3
61673: PUSH
61674: LD_INT 3
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 4
61683: PUSH
61684: LD_INT 3
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 3
61693: PUSH
61694: LD_INT 4
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: LIST
61705: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61706: LD_ADDR_VAR 0 26
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 3
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 4
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: LIST
61746: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61747: LD_ADDR_VAR 0 27
61751: PUSH
61752: LD_INT 3
61754: NEG
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 4
61776: NEG
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: LIST
61790: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61791: LD_ADDR_VAR 0 28
61795: PUSH
61796: LD_INT 3
61798: NEG
61799: PUSH
61800: LD_INT 3
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 3
61810: NEG
61811: PUSH
61812: LD_INT 4
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 4
61822: NEG
61823: PUSH
61824: LD_INT 3
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61837: LD_ADDR_VAR 0 29
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 3
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: LD_INT 3
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: LD_INT 4
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: LD_INT 4
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: LD_INT 3
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 1
61912: NEG
61913: PUSH
61914: LD_INT 5
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 5
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: LD_INT 4
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: LD_INT 6
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: LD_INT 6
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 5
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61992: LD_ADDR_VAR 0 30
61996: PUSH
61997: LD_INT 2
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 4
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 4
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 4
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 5
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 5
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 5
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 6
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 6
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62135: LD_ADDR_VAR 0 31
62139: PUSH
62140: LD_INT 3
62142: PUSH
62143: LD_INT 2
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 3
62152: PUSH
62153: LD_INT 3
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: LD_INT 3
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 4
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 4
62182: PUSH
62183: LD_INT 4
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 3
62192: PUSH
62193: LD_INT 4
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 5
62202: PUSH
62203: LD_INT 4
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 5
62212: PUSH
62213: LD_INT 5
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 4
62222: PUSH
62223: LD_INT 5
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 6
62232: PUSH
62233: LD_INT 5
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 6
62242: PUSH
62243: LD_INT 6
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 5
62252: PUSH
62253: LD_INT 6
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62274: LD_ADDR_VAR 0 32
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 3
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: LD_INT 4
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: LD_INT 4
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: LD_INT 3
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: LD_INT 5
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 5
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: LD_INT 4
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: LD_INT 6
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 6
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: LD_INT 5
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62417: LD_ADDR_VAR 0 33
62421: PUSH
62422: LD_INT 2
62424: NEG
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 3
62435: NEG
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 3
62446: NEG
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 3
62458: NEG
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 4
62469: NEG
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 4
62480: NEG
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 4
62492: NEG
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 5
62503: NEG
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 5
62514: NEG
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 5
62526: NEG
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 6
62537: NEG
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 6
62548: NEG
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62572: LD_ADDR_VAR 0 34
62576: PUSH
62577: LD_INT 2
62579: NEG
62580: PUSH
62581: LD_INT 3
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 3
62591: NEG
62592: PUSH
62593: LD_INT 2
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 3
62603: NEG
62604: PUSH
62605: LD_INT 3
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 3
62615: NEG
62616: PUSH
62617: LD_INT 4
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 4
62627: NEG
62628: PUSH
62629: LD_INT 3
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 4
62639: NEG
62640: PUSH
62641: LD_INT 4
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 4
62651: NEG
62652: PUSH
62653: LD_INT 5
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 5
62663: NEG
62664: PUSH
62665: LD_INT 4
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 5
62675: NEG
62676: PUSH
62677: LD_INT 5
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 5
62687: NEG
62688: PUSH
62689: LD_INT 6
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 6
62699: NEG
62700: PUSH
62701: LD_INT 5
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 6
62711: NEG
62712: PUSH
62713: LD_INT 6
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62735: LD_ADDR_VAR 0 41
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: LD_INT 2
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: LIST
62778: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62779: LD_ADDR_VAR 0 42
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: LIST
62819: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62820: LD_ADDR_VAR 0 43
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: LD_INT 2
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 3
62837: PUSH
62838: LD_INT 2
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 2
62847: PUSH
62848: LD_INT 3
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62860: LD_ADDR_VAR 0 44
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: LD_INT 2
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: LD_INT 3
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 2
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: LIST
62900: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62901: LD_ADDR_VAR 0 45
62905: PUSH
62906: LD_INT 2
62908: NEG
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 2
62919: NEG
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 3
62930: NEG
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62945: LD_ADDR_VAR 0 46
62949: PUSH
62950: LD_INT 2
62952: NEG
62953: PUSH
62954: LD_INT 2
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: NEG
62965: PUSH
62966: LD_INT 3
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 3
62976: NEG
62977: PUSH
62978: LD_INT 2
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: LIST
62990: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62991: LD_ADDR_VAR 0 47
62995: PUSH
62996: LD_INT 2
62998: NEG
62999: PUSH
63000: LD_INT 3
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: LD_INT 3
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63024: LD_ADDR_VAR 0 48
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63055: LD_ADDR_VAR 0 49
63059: PUSH
63060: LD_INT 3
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 3
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63084: LD_ADDR_VAR 0 50
63088: PUSH
63089: LD_INT 2
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: LD_INT 3
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63113: LD_ADDR_VAR 0 51
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 2
63131: NEG
63132: PUSH
63133: LD_INT 1
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63144: LD_ADDR_VAR 0 52
63148: PUSH
63149: LD_INT 3
63151: NEG
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 3
63163: NEG
63164: PUSH
63165: LD_INT 2
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63177: LD_ADDR_VAR 0 53
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: LD_INT 3
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: LD_INT 3
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: LD_INT 2
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: LIST
63220: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63221: LD_ADDR_VAR 0 54
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 3
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 3
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: LIST
63261: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63262: LD_ADDR_VAR 0 55
63266: PUSH
63267: LD_INT 3
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 3
63279: PUSH
63280: LD_INT 3
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: LD_INT 3
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: LIST
63301: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63302: LD_ADDR_VAR 0 56
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: LD_INT 3
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: LD_INT 2
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: LIST
63342: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63343: LD_ADDR_VAR 0 57
63347: PUSH
63348: LD_INT 2
63350: NEG
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 3
63361: NEG
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: LIST
63386: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63387: LD_ADDR_VAR 0 58
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: LD_INT 3
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 3
63406: NEG
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 3
63418: NEG
63419: PUSH
63420: LD_INT 3
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: LIST
63432: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63433: LD_ADDR_VAR 0 59
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 2
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 2
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: LIST
63476: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63477: LD_ADDR_VAR 0 60
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 2
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: LIST
63517: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63518: LD_ADDR_VAR 0 61
63522: PUSH
63523: LD_INT 2
63525: PUSH
63526: LD_INT 1
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 2
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: LD_INT 2
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: LIST
63557: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63558: LD_ADDR_VAR 0 62
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63599: LD_ADDR_VAR 0 63
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 2
63628: NEG
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: LIST
63642: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63643: LD_ADDR_VAR 0 64
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 2
63674: NEG
63675: PUSH
63676: LD_INT 2
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: LIST
63688: ST_TO_ADDR
// end ; 2 :
63689: GO 66955
63691: LD_INT 2
63693: DOUBLE
63694: EQUAL
63695: IFTRUE 63699
63697: GO 66954
63699: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63700: LD_ADDR_VAR 0 29
63704: PUSH
63705: LD_INT 4
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 4
63717: PUSH
63718: LD_INT 1
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 5
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 5
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 4
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 3
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 3
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 3
63779: PUSH
63780: LD_INT 2
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 5
63790: PUSH
63791: LD_INT 2
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 3
63800: PUSH
63801: LD_INT 3
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 3
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 4
63820: PUSH
63821: LD_INT 3
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 4
63830: PUSH
63831: LD_INT 4
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: LD_INT 4
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: LD_INT 3
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 4
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: LD_INT 4
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: LD_INT 4
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: LD_INT 3
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: LD_INT 4
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: LD_INT 5
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: LD_INT 5
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: LD_INT 4
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: LD_INT 3
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 2
63962: PUSH
63963: LD_INT 5
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: LD_INT 3
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 3
63983: NEG
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 3
63994: NEG
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 2
64017: NEG
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 3
64028: NEG
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 4
64039: NEG
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 4
64050: NEG
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 4
64062: NEG
64063: PUSH
64064: LD_INT 2
64066: NEG
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 2
64074: NEG
64075: PUSH
64076: LD_INT 2
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 4
64085: NEG
64086: PUSH
64087: LD_INT 4
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 4
64097: NEG
64098: PUSH
64099: LD_INT 5
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 3
64109: NEG
64110: PUSH
64111: LD_INT 4
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 3
64121: NEG
64122: PUSH
64123: LD_INT 3
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 4
64133: NEG
64134: PUSH
64135: LD_INT 3
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 5
64145: NEG
64146: PUSH
64147: LD_INT 4
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 5
64157: NEG
64158: PUSH
64159: LD_INT 5
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 3
64169: NEG
64170: PUSH
64171: LD_INT 5
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 5
64181: NEG
64182: PUSH
64183: LD_INT 3
64185: NEG
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64238: LD_ADDR_VAR 0 30
64242: PUSH
64243: LD_INT 4
64245: PUSH
64246: LD_INT 4
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 4
64255: PUSH
64256: LD_INT 3
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 5
64265: PUSH
64266: LD_INT 4
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 5
64275: PUSH
64276: LD_INT 5
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 4
64285: PUSH
64286: LD_INT 5
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 3
64295: PUSH
64296: LD_INT 4
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 3
64305: PUSH
64306: LD_INT 3
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 5
64315: PUSH
64316: LD_INT 3
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 3
64325: PUSH
64326: LD_INT 5
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 3
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: LD_INT 2
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: LD_INT 3
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: LD_INT 4
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: LD_INT 4
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: LD_INT 3
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: LD_INT 4
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 2
64417: NEG
64418: PUSH
64419: LD_INT 2
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 4
64428: NEG
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 4
64439: NEG
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 3
64451: NEG
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 3
64462: NEG
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 4
64473: NEG
64474: PUSH
64475: LD_INT 1
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 5
64484: NEG
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 5
64495: NEG
64496: PUSH
64497: LD_INT 1
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 5
64507: NEG
64508: PUSH
64509: LD_INT 2
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 3
64519: NEG
64520: PUSH
64521: LD_INT 2
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 3
64530: NEG
64531: PUSH
64532: LD_INT 3
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 3
64542: NEG
64543: PUSH
64544: LD_INT 4
64546: NEG
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 2
64554: NEG
64555: PUSH
64556: LD_INT 3
64558: NEG
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 2
64566: NEG
64567: PUSH
64568: LD_INT 2
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 3
64578: NEG
64579: PUSH
64580: LD_INT 2
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 4
64590: NEG
64591: PUSH
64592: LD_INT 3
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 4
64602: NEG
64603: PUSH
64604: LD_INT 4
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 2
64614: NEG
64615: PUSH
64616: LD_INT 4
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 4
64626: NEG
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: LD_INT 4
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: LD_INT 5
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: LD_INT 4
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: LD_INT 3
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: LD_INT 3
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: LD_INT 4
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: NEG
64706: PUSH
64707: LD_INT 5
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 2
64717: PUSH
64718: LD_INT 3
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 2
64728: NEG
64729: PUSH
64730: LD_INT 5
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64785: LD_ADDR_VAR 0 31
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 4
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: LD_INT 3
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: LD_INT 4
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: LD_INT 5
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 5
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: LD_INT 4
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: NEG
64854: PUSH
64855: LD_INT 3
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: PUSH
64865: LD_INT 5
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 2
64874: NEG
64875: PUSH
64876: LD_INT 3
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 3
64885: NEG
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 2
64908: NEG
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 2
64919: NEG
64920: PUSH
64921: LD_INT 1
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 3
64930: NEG
64931: PUSH
64932: LD_INT 1
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 4
64941: NEG
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 4
64952: NEG
64953: PUSH
64954: LD_INT 1
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 4
64964: NEG
64965: PUSH
64966: LD_INT 2
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 2
64976: NEG
64977: PUSH
64978: LD_INT 2
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 4
64987: NEG
64988: PUSH
64989: LD_INT 4
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 4
64999: NEG
65000: PUSH
65001: LD_INT 5
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 3
65011: NEG
65012: PUSH
65013: LD_INT 4
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 3
65023: NEG
65024: PUSH
65025: LD_INT 3
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 4
65035: NEG
65036: PUSH
65037: LD_INT 3
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 5
65047: NEG
65048: PUSH
65049: LD_INT 4
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 5
65059: NEG
65060: PUSH
65061: LD_INT 5
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 3
65071: NEG
65072: PUSH
65073: LD_INT 5
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 5
65083: NEG
65084: PUSH
65085: LD_INT 3
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: LD_INT 3
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: LD_INT 4
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: LD_INT 3
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: LD_INT 2
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: LD_INT 2
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: LD_INT 3
65154: NEG
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 1
65162: NEG
65163: PUSH
65164: LD_INT 4
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 2
65174: PUSH
65175: LD_INT 2
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 2
65185: NEG
65186: PUSH
65187: LD_INT 4
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 4
65197: PUSH
65198: LD_INT 0
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 4
65207: PUSH
65208: LD_INT 1
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 5
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 5
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 4
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 3
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 3
65258: PUSH
65259: LD_INT 1
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 3
65269: PUSH
65270: LD_INT 2
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 5
65280: PUSH
65281: LD_INT 2
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65335: LD_ADDR_VAR 0 32
65339: PUSH
65340: LD_INT 4
65342: NEG
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 4
65353: NEG
65354: PUSH
65355: LD_INT 1
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 3
65365: NEG
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 3
65376: NEG
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 4
65387: NEG
65388: PUSH
65389: LD_INT 1
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 5
65398: NEG
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 5
65409: NEG
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 5
65421: NEG
65422: PUSH
65423: LD_INT 2
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 3
65433: NEG
65434: PUSH
65435: LD_INT 2
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 3
65444: NEG
65445: PUSH
65446: LD_INT 3
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 3
65456: NEG
65457: PUSH
65458: LD_INT 4
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 2
65468: NEG
65469: PUSH
65470: LD_INT 3
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 2
65480: NEG
65481: PUSH
65482: LD_INT 2
65484: NEG
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 3
65492: NEG
65493: PUSH
65494: LD_INT 2
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 4
65504: NEG
65505: PUSH
65506: LD_INT 3
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 4
65516: NEG
65517: PUSH
65518: LD_INT 4
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 2
65528: NEG
65529: PUSH
65530: LD_INT 4
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 4
65540: NEG
65541: PUSH
65542: LD_INT 2
65544: NEG
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: LD_INT 4
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: LD_INT 5
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: LD_INT 4
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: LD_INT 3
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: LD_INT 3
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 1
65607: NEG
65608: PUSH
65609: LD_INT 4
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: LD_INT 5
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 2
65631: PUSH
65632: LD_INT 3
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 2
65642: NEG
65643: PUSH
65644: LD_INT 5
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 3
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 3
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 4
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 4
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 3
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 2
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 2
65726: PUSH
65727: LD_INT 2
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 4
65737: PUSH
65738: LD_INT 2
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 4
65747: PUSH
65748: LD_INT 4
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 4
65757: PUSH
65758: LD_INT 3
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 5
65767: PUSH
65768: LD_INT 4
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 5
65777: PUSH
65778: LD_INT 5
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 4
65787: PUSH
65788: LD_INT 5
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 3
65797: PUSH
65798: LD_INT 4
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 3
65807: PUSH
65808: LD_INT 3
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 5
65817: PUSH
65818: LD_INT 3
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 3
65827: PUSH
65828: LD_INT 5
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65882: LD_ADDR_VAR 0 33
65886: PUSH
65887: LD_INT 4
65889: NEG
65890: PUSH
65891: LD_INT 4
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 4
65901: NEG
65902: PUSH
65903: LD_INT 5
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 3
65913: NEG
65914: PUSH
65915: LD_INT 4
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 3
65925: NEG
65926: PUSH
65927: LD_INT 3
65929: NEG
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 4
65937: NEG
65938: PUSH
65939: LD_INT 3
65941: NEG
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 5
65949: NEG
65950: PUSH
65951: LD_INT 4
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 5
65961: NEG
65962: PUSH
65963: LD_INT 5
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 3
65973: NEG
65974: PUSH
65975: LD_INT 5
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 5
65985: NEG
65986: PUSH
65987: LD_INT 3
65989: NEG
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: LD_INT 3
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: LD_INT 4
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: LD_INT 3
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 1
66030: PUSH
66031: LD_INT 2
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: LD_INT 2
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 1
66052: NEG
66053: PUSH
66054: LD_INT 3
66056: NEG
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: PUSH
66066: LD_INT 4
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 2
66076: PUSH
66077: LD_INT 2
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 2
66087: NEG
66088: PUSH
66089: LD_INT 4
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 4
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 4
66109: PUSH
66110: LD_INT 1
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 5
66120: PUSH
66121: LD_INT 0
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 5
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 4
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 3
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 3
66171: PUSH
66172: LD_INT 2
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 5
66182: PUSH
66183: LD_INT 2
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 3
66192: PUSH
66193: LD_INT 3
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 3
66202: PUSH
66203: LD_INT 2
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 4
66212: PUSH
66213: LD_INT 3
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 4
66222: PUSH
66223: LD_INT 4
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 3
66232: PUSH
66233: LD_INT 4
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: PUSH
66243: LD_INT 3
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 4
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: LD_INT 4
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: LD_INT 4
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: LD_INT 3
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: LD_INT 4
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 1
66312: PUSH
66313: LD_INT 5
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: LD_INT 5
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: LD_INT 4
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: NEG
66344: PUSH
66345: LD_INT 3
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 2
66354: PUSH
66355: LD_INT 5
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 2
66364: NEG
66365: PUSH
66366: LD_INT 3
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66420: LD_ADDR_VAR 0 34
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: LD_INT 4
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: LD_INT 5
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 1
66449: PUSH
66450: LD_INT 4
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: LD_INT 3
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: LD_INT 3
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: LD_INT 4
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: LD_INT 5
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 2
66506: PUSH
66507: LD_INT 3
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 2
66517: NEG
66518: PUSH
66519: LD_INT 5
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 3
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 3
66539: PUSH
66540: LD_INT 1
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 4
66550: PUSH
66551: LD_INT 0
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 4
66560: PUSH
66561: LD_INT 1
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 3
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 2
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 2
66590: PUSH
66591: LD_INT 1
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 2
66601: PUSH
66602: LD_INT 2
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 4
66612: PUSH
66613: LD_INT 2
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 4
66622: PUSH
66623: LD_INT 4
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 4
66632: PUSH
66633: LD_INT 3
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 5
66642: PUSH
66643: LD_INT 4
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 5
66652: PUSH
66653: LD_INT 5
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 4
66662: PUSH
66663: LD_INT 5
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 3
66672: PUSH
66673: LD_INT 4
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 3
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 5
66692: PUSH
66693: LD_INT 3
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 3
66702: PUSH
66703: LD_INT 5
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: LD_INT 3
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 0
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 1
66732: PUSH
66733: LD_INT 3
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: LD_INT 4
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: LD_INT 4
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 1
66762: NEG
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 2
66784: PUSH
66785: LD_INT 4
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 2
66794: NEG
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 4
66805: NEG
66806: PUSH
66807: LD_INT 0
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 4
66816: NEG
66817: PUSH
66818: LD_INT 1
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 3
66828: NEG
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 3
66839: NEG
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 4
66850: NEG
66851: PUSH
66852: LD_INT 1
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 5
66861: NEG
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 5
66872: NEG
66873: PUSH
66874: LD_INT 1
66876: NEG
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 5
66884: NEG
66885: PUSH
66886: LD_INT 2
66888: NEG
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 3
66896: NEG
66897: PUSH
66898: LD_INT 2
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: ST_TO_ADDR
// end ; end ;
66952: GO 66955
66954: POP
// case btype of b_depot , b_warehouse :
66955: LD_VAR 0 1
66959: PUSH
66960: LD_INT 0
66962: DOUBLE
66963: EQUAL
66964: IFTRUE 66974
66966: LD_INT 1
66968: DOUBLE
66969: EQUAL
66970: IFTRUE 66974
66972: GO 67175
66974: POP
// case nation of nation_american :
66975: LD_VAR 0 5
66979: PUSH
66980: LD_INT 1
66982: DOUBLE
66983: EQUAL
66984: IFTRUE 66988
66986: GO 67044
66988: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66989: LD_ADDR_VAR 0 9
66993: PUSH
66994: LD_VAR 0 11
66998: PUSH
66999: LD_VAR 0 12
67003: PUSH
67004: LD_VAR 0 13
67008: PUSH
67009: LD_VAR 0 14
67013: PUSH
67014: LD_VAR 0 15
67018: PUSH
67019: LD_VAR 0 16
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: PUSH
67032: LD_VAR 0 4
67036: PUSH
67037: LD_INT 1
67039: PLUS
67040: ARRAY
67041: ST_TO_ADDR
67042: GO 67173
67044: LD_INT 2
67046: DOUBLE
67047: EQUAL
67048: IFTRUE 67052
67050: GO 67108
67052: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67053: LD_ADDR_VAR 0 9
67057: PUSH
67058: LD_VAR 0 17
67062: PUSH
67063: LD_VAR 0 18
67067: PUSH
67068: LD_VAR 0 19
67072: PUSH
67073: LD_VAR 0 20
67077: PUSH
67078: LD_VAR 0 21
67082: PUSH
67083: LD_VAR 0 22
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: PUSH
67096: LD_VAR 0 4
67100: PUSH
67101: LD_INT 1
67103: PLUS
67104: ARRAY
67105: ST_TO_ADDR
67106: GO 67173
67108: LD_INT 3
67110: DOUBLE
67111: EQUAL
67112: IFTRUE 67116
67114: GO 67172
67116: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67117: LD_ADDR_VAR 0 9
67121: PUSH
67122: LD_VAR 0 23
67126: PUSH
67127: LD_VAR 0 24
67131: PUSH
67132: LD_VAR 0 25
67136: PUSH
67137: LD_VAR 0 26
67141: PUSH
67142: LD_VAR 0 27
67146: PUSH
67147: LD_VAR 0 28
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: PUSH
67160: LD_VAR 0 4
67164: PUSH
67165: LD_INT 1
67167: PLUS
67168: ARRAY
67169: ST_TO_ADDR
67170: GO 67173
67172: POP
67173: GO 67728
67175: LD_INT 2
67177: DOUBLE
67178: EQUAL
67179: IFTRUE 67189
67181: LD_INT 3
67183: DOUBLE
67184: EQUAL
67185: IFTRUE 67189
67187: GO 67245
67189: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67190: LD_ADDR_VAR 0 9
67194: PUSH
67195: LD_VAR 0 29
67199: PUSH
67200: LD_VAR 0 30
67204: PUSH
67205: LD_VAR 0 31
67209: PUSH
67210: LD_VAR 0 32
67214: PUSH
67215: LD_VAR 0 33
67219: PUSH
67220: LD_VAR 0 34
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: PUSH
67233: LD_VAR 0 4
67237: PUSH
67238: LD_INT 1
67240: PLUS
67241: ARRAY
67242: ST_TO_ADDR
67243: GO 67728
67245: LD_INT 16
67247: DOUBLE
67248: EQUAL
67249: IFTRUE 67307
67251: LD_INT 17
67253: DOUBLE
67254: EQUAL
67255: IFTRUE 67307
67257: LD_INT 18
67259: DOUBLE
67260: EQUAL
67261: IFTRUE 67307
67263: LD_INT 19
67265: DOUBLE
67266: EQUAL
67267: IFTRUE 67307
67269: LD_INT 22
67271: DOUBLE
67272: EQUAL
67273: IFTRUE 67307
67275: LD_INT 20
67277: DOUBLE
67278: EQUAL
67279: IFTRUE 67307
67281: LD_INT 21
67283: DOUBLE
67284: EQUAL
67285: IFTRUE 67307
67287: LD_INT 23
67289: DOUBLE
67290: EQUAL
67291: IFTRUE 67307
67293: LD_INT 24
67295: DOUBLE
67296: EQUAL
67297: IFTRUE 67307
67299: LD_INT 25
67301: DOUBLE
67302: EQUAL
67303: IFTRUE 67307
67305: GO 67363
67307: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67308: LD_ADDR_VAR 0 9
67312: PUSH
67313: LD_VAR 0 35
67317: PUSH
67318: LD_VAR 0 36
67322: PUSH
67323: LD_VAR 0 37
67327: PUSH
67328: LD_VAR 0 38
67332: PUSH
67333: LD_VAR 0 39
67337: PUSH
67338: LD_VAR 0 40
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: PUSH
67351: LD_VAR 0 4
67355: PUSH
67356: LD_INT 1
67358: PLUS
67359: ARRAY
67360: ST_TO_ADDR
67361: GO 67728
67363: LD_INT 6
67365: DOUBLE
67366: EQUAL
67367: IFTRUE 67419
67369: LD_INT 7
67371: DOUBLE
67372: EQUAL
67373: IFTRUE 67419
67375: LD_INT 8
67377: DOUBLE
67378: EQUAL
67379: IFTRUE 67419
67381: LD_INT 13
67383: DOUBLE
67384: EQUAL
67385: IFTRUE 67419
67387: LD_INT 12
67389: DOUBLE
67390: EQUAL
67391: IFTRUE 67419
67393: LD_INT 15
67395: DOUBLE
67396: EQUAL
67397: IFTRUE 67419
67399: LD_INT 11
67401: DOUBLE
67402: EQUAL
67403: IFTRUE 67419
67405: LD_INT 14
67407: DOUBLE
67408: EQUAL
67409: IFTRUE 67419
67411: LD_INT 10
67413: DOUBLE
67414: EQUAL
67415: IFTRUE 67419
67417: GO 67475
67419: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67420: LD_ADDR_VAR 0 9
67424: PUSH
67425: LD_VAR 0 41
67429: PUSH
67430: LD_VAR 0 42
67434: PUSH
67435: LD_VAR 0 43
67439: PUSH
67440: LD_VAR 0 44
67444: PUSH
67445: LD_VAR 0 45
67449: PUSH
67450: LD_VAR 0 46
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: PUSH
67463: LD_VAR 0 4
67467: PUSH
67468: LD_INT 1
67470: PLUS
67471: ARRAY
67472: ST_TO_ADDR
67473: GO 67728
67475: LD_INT 36
67477: DOUBLE
67478: EQUAL
67479: IFTRUE 67483
67481: GO 67539
67483: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67484: LD_ADDR_VAR 0 9
67488: PUSH
67489: LD_VAR 0 47
67493: PUSH
67494: LD_VAR 0 48
67498: PUSH
67499: LD_VAR 0 49
67503: PUSH
67504: LD_VAR 0 50
67508: PUSH
67509: LD_VAR 0 51
67513: PUSH
67514: LD_VAR 0 52
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: PUSH
67527: LD_VAR 0 4
67531: PUSH
67532: LD_INT 1
67534: PLUS
67535: ARRAY
67536: ST_TO_ADDR
67537: GO 67728
67539: LD_INT 4
67541: DOUBLE
67542: EQUAL
67543: IFTRUE 67565
67545: LD_INT 5
67547: DOUBLE
67548: EQUAL
67549: IFTRUE 67565
67551: LD_INT 34
67553: DOUBLE
67554: EQUAL
67555: IFTRUE 67565
67557: LD_INT 37
67559: DOUBLE
67560: EQUAL
67561: IFTRUE 67565
67563: GO 67621
67565: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67566: LD_ADDR_VAR 0 9
67570: PUSH
67571: LD_VAR 0 53
67575: PUSH
67576: LD_VAR 0 54
67580: PUSH
67581: LD_VAR 0 55
67585: PUSH
67586: LD_VAR 0 56
67590: PUSH
67591: LD_VAR 0 57
67595: PUSH
67596: LD_VAR 0 58
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: PUSH
67609: LD_VAR 0 4
67613: PUSH
67614: LD_INT 1
67616: PLUS
67617: ARRAY
67618: ST_TO_ADDR
67619: GO 67728
67621: LD_INT 31
67623: DOUBLE
67624: EQUAL
67625: IFTRUE 67671
67627: LD_INT 32
67629: DOUBLE
67630: EQUAL
67631: IFTRUE 67671
67633: LD_INT 33
67635: DOUBLE
67636: EQUAL
67637: IFTRUE 67671
67639: LD_INT 27
67641: DOUBLE
67642: EQUAL
67643: IFTRUE 67671
67645: LD_INT 26
67647: DOUBLE
67648: EQUAL
67649: IFTRUE 67671
67651: LD_INT 28
67653: DOUBLE
67654: EQUAL
67655: IFTRUE 67671
67657: LD_INT 29
67659: DOUBLE
67660: EQUAL
67661: IFTRUE 67671
67663: LD_INT 30
67665: DOUBLE
67666: EQUAL
67667: IFTRUE 67671
67669: GO 67727
67671: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67672: LD_ADDR_VAR 0 9
67676: PUSH
67677: LD_VAR 0 59
67681: PUSH
67682: LD_VAR 0 60
67686: PUSH
67687: LD_VAR 0 61
67691: PUSH
67692: LD_VAR 0 62
67696: PUSH
67697: LD_VAR 0 63
67701: PUSH
67702: LD_VAR 0 64
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: PUSH
67715: LD_VAR 0 4
67719: PUSH
67720: LD_INT 1
67722: PLUS
67723: ARRAY
67724: ST_TO_ADDR
67725: GO 67728
67727: POP
// temp_list2 = [ ] ;
67728: LD_ADDR_VAR 0 10
67732: PUSH
67733: EMPTY
67734: ST_TO_ADDR
// for i in temp_list do
67735: LD_ADDR_VAR 0 8
67739: PUSH
67740: LD_VAR 0 9
67744: PUSH
67745: FOR_IN
67746: IFFALSE 67798
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67748: LD_ADDR_VAR 0 10
67752: PUSH
67753: LD_VAR 0 10
67757: PUSH
67758: LD_VAR 0 8
67762: PUSH
67763: LD_INT 1
67765: ARRAY
67766: PUSH
67767: LD_VAR 0 2
67771: PLUS
67772: PUSH
67773: LD_VAR 0 8
67777: PUSH
67778: LD_INT 2
67780: ARRAY
67781: PUSH
67782: LD_VAR 0 3
67786: PLUS
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: EMPTY
67793: LIST
67794: ADD
67795: ST_TO_ADDR
67796: GO 67745
67798: POP
67799: POP
// result = temp_list2 ;
67800: LD_ADDR_VAR 0 7
67804: PUSH
67805: LD_VAR 0 10
67809: ST_TO_ADDR
// end ;
67810: LD_VAR 0 7
67814: RET
// export function EnemyInRange ( unit , dist ) ; begin
67815: LD_INT 0
67817: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67818: LD_ADDR_VAR 0 3
67822: PUSH
67823: LD_VAR 0 1
67827: PPUSH
67828: CALL_OW 255
67832: PPUSH
67833: LD_VAR 0 1
67837: PPUSH
67838: CALL_OW 250
67842: PPUSH
67843: LD_VAR 0 1
67847: PPUSH
67848: CALL_OW 251
67852: PPUSH
67853: LD_VAR 0 2
67857: PPUSH
67858: CALL 41072 0 4
67862: PUSH
67863: LD_INT 4
67865: ARRAY
67866: ST_TO_ADDR
// end ;
67867: LD_VAR 0 3
67871: RET
// export function PlayerSeeMe ( unit ) ; begin
67872: LD_INT 0
67874: PPUSH
// result := See ( your_side , unit ) ;
67875: LD_ADDR_VAR 0 2
67879: PUSH
67880: LD_OWVAR 2
67884: PPUSH
67885: LD_VAR 0 1
67889: PPUSH
67890: CALL_OW 292
67894: ST_TO_ADDR
// end ;
67895: LD_VAR 0 2
67899: RET
// export function ReverseDir ( unit ) ; begin
67900: LD_INT 0
67902: PPUSH
// if not unit then
67903: LD_VAR 0 1
67907: NOT
67908: IFFALSE 67912
// exit ;
67910: GO 67935
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67912: LD_ADDR_VAR 0 2
67916: PUSH
67917: LD_VAR 0 1
67921: PPUSH
67922: CALL_OW 254
67926: PUSH
67927: LD_INT 3
67929: PLUS
67930: PUSH
67931: LD_INT 6
67933: MOD
67934: ST_TO_ADDR
// end ;
67935: LD_VAR 0 2
67939: RET
// export function ReverseArray ( array ) ; var i ; begin
67940: LD_INT 0
67942: PPUSH
67943: PPUSH
// if not array then
67944: LD_VAR 0 1
67948: NOT
67949: IFFALSE 67953
// exit ;
67951: GO 68008
// result := [ ] ;
67953: LD_ADDR_VAR 0 2
67957: PUSH
67958: EMPTY
67959: ST_TO_ADDR
// for i := array downto 1 do
67960: LD_ADDR_VAR 0 3
67964: PUSH
67965: DOUBLE
67966: LD_VAR 0 1
67970: INC
67971: ST_TO_ADDR
67972: LD_INT 1
67974: PUSH
67975: FOR_DOWNTO
67976: IFFALSE 68006
// result := Join ( result , array [ i ] ) ;
67978: LD_ADDR_VAR 0 2
67982: PUSH
67983: LD_VAR 0 2
67987: PPUSH
67988: LD_VAR 0 1
67992: PUSH
67993: LD_VAR 0 3
67997: ARRAY
67998: PPUSH
67999: CALL 72850 0 2
68003: ST_TO_ADDR
68004: GO 67975
68006: POP
68007: POP
// end ;
68008: LD_VAR 0 2
68012: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68013: LD_INT 0
68015: PPUSH
68016: PPUSH
68017: PPUSH
68018: PPUSH
68019: PPUSH
68020: PPUSH
// if not unit or not hexes then
68021: LD_VAR 0 1
68025: NOT
68026: IFTRUE 68035
68028: PUSH
68029: LD_VAR 0 2
68033: NOT
68034: OR
68035: IFFALSE 68039
// exit ;
68037: GO 68162
// dist := 9999 ;
68039: LD_ADDR_VAR 0 5
68043: PUSH
68044: LD_INT 9999
68046: ST_TO_ADDR
// for i = 1 to hexes do
68047: LD_ADDR_VAR 0 4
68051: PUSH
68052: DOUBLE
68053: LD_INT 1
68055: DEC
68056: ST_TO_ADDR
68057: LD_VAR 0 2
68061: PUSH
68062: FOR_TO
68063: IFFALSE 68150
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68065: LD_ADDR_VAR 0 6
68069: PUSH
68070: LD_VAR 0 1
68074: PPUSH
68075: LD_VAR 0 2
68079: PUSH
68080: LD_VAR 0 4
68084: ARRAY
68085: PUSH
68086: LD_INT 1
68088: ARRAY
68089: PPUSH
68090: LD_VAR 0 2
68094: PUSH
68095: LD_VAR 0 4
68099: ARRAY
68100: PUSH
68101: LD_INT 2
68103: ARRAY
68104: PPUSH
68105: CALL_OW 297
68109: ST_TO_ADDR
// if tdist < dist then
68110: LD_VAR 0 6
68114: PUSH
68115: LD_VAR 0 5
68119: LESS
68120: IFFALSE 68148
// begin hex := hexes [ i ] ;
68122: LD_ADDR_VAR 0 8
68126: PUSH
68127: LD_VAR 0 2
68131: PUSH
68132: LD_VAR 0 4
68136: ARRAY
68137: ST_TO_ADDR
// dist := tdist ;
68138: LD_ADDR_VAR 0 5
68142: PUSH
68143: LD_VAR 0 6
68147: ST_TO_ADDR
// end ; end ;
68148: GO 68062
68150: POP
68151: POP
// result := hex ;
68152: LD_ADDR_VAR 0 3
68156: PUSH
68157: LD_VAR 0 8
68161: ST_TO_ADDR
// end ;
68162: LD_VAR 0 3
68166: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68167: LD_INT 0
68169: PPUSH
68170: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68171: LD_VAR 0 1
68175: NOT
68176: IFTRUE 68215
68178: PUSH
68179: LD_VAR 0 1
68183: PUSH
68184: LD_INT 21
68186: PUSH
68187: LD_INT 2
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 23
68196: PUSH
68197: LD_INT 2
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PPUSH
68208: CALL_OW 69
68212: IN
68213: NOT
68214: OR
68215: IFFALSE 68219
// exit ;
68217: GO 68266
// for i = 1 to 3 do
68219: LD_ADDR_VAR 0 3
68223: PUSH
68224: DOUBLE
68225: LD_INT 1
68227: DEC
68228: ST_TO_ADDR
68229: LD_INT 3
68231: PUSH
68232: FOR_TO
68233: IFFALSE 68264
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68235: LD_VAR 0 1
68239: PPUSH
68240: CALL_OW 250
68244: PPUSH
68245: LD_VAR 0 1
68249: PPUSH
68250: CALL_OW 251
68254: PPUSH
68255: LD_INT 1
68257: PPUSH
68258: CALL_OW 453
68262: GO 68232
68264: POP
68265: POP
// end ;
68266: LD_VAR 0 2
68270: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68271: LD_INT 0
68273: PPUSH
68274: PPUSH
68275: PPUSH
68276: PPUSH
68277: PPUSH
68278: PPUSH
// if not unit or not enemy_unit then
68279: LD_VAR 0 1
68283: NOT
68284: IFTRUE 68293
68286: PUSH
68287: LD_VAR 0 2
68291: NOT
68292: OR
68293: IFFALSE 68297
// exit ;
68295: GO 68768
// if GetLives ( i ) < 250 then
68297: LD_VAR 0 4
68301: PPUSH
68302: CALL_OW 256
68306: PUSH
68307: LD_INT 250
68309: LESS
68310: IFFALSE 68323
// begin ComAutodestruct ( i ) ;
68312: LD_VAR 0 4
68316: PPUSH
68317: CALL 68167 0 1
// exit ;
68321: GO 68768
// end ; x := GetX ( enemy_unit ) ;
68323: LD_ADDR_VAR 0 7
68327: PUSH
68328: LD_VAR 0 2
68332: PPUSH
68333: CALL_OW 250
68337: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68338: LD_ADDR_VAR 0 8
68342: PUSH
68343: LD_VAR 0 2
68347: PPUSH
68348: CALL_OW 251
68352: ST_TO_ADDR
// if not x or not y then
68353: LD_VAR 0 7
68357: NOT
68358: IFTRUE 68367
68360: PUSH
68361: LD_VAR 0 8
68365: NOT
68366: OR
68367: IFFALSE 68371
// exit ;
68369: GO 68768
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68371: LD_ADDR_VAR 0 6
68375: PUSH
68376: LD_VAR 0 7
68380: PPUSH
68381: LD_INT 0
68383: PPUSH
68384: LD_INT 4
68386: PPUSH
68387: CALL_OW 272
68391: PUSH
68392: LD_VAR 0 8
68396: PPUSH
68397: LD_INT 0
68399: PPUSH
68400: LD_INT 4
68402: PPUSH
68403: CALL_OW 273
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_VAR 0 7
68416: PPUSH
68417: LD_INT 1
68419: PPUSH
68420: LD_INT 4
68422: PPUSH
68423: CALL_OW 272
68427: PUSH
68428: LD_VAR 0 8
68432: PPUSH
68433: LD_INT 1
68435: PPUSH
68436: LD_INT 4
68438: PPUSH
68439: CALL_OW 273
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_VAR 0 7
68452: PPUSH
68453: LD_INT 2
68455: PPUSH
68456: LD_INT 4
68458: PPUSH
68459: CALL_OW 272
68463: PUSH
68464: LD_VAR 0 8
68468: PPUSH
68469: LD_INT 2
68471: PPUSH
68472: LD_INT 4
68474: PPUSH
68475: CALL_OW 273
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_VAR 0 7
68488: PPUSH
68489: LD_INT 3
68491: PPUSH
68492: LD_INT 4
68494: PPUSH
68495: CALL_OW 272
68499: PUSH
68500: LD_VAR 0 8
68504: PPUSH
68505: LD_INT 3
68507: PPUSH
68508: LD_INT 4
68510: PPUSH
68511: CALL_OW 273
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_VAR 0 7
68524: PPUSH
68525: LD_INT 4
68527: PPUSH
68528: LD_INT 4
68530: PPUSH
68531: CALL_OW 272
68535: PUSH
68536: LD_VAR 0 8
68540: PPUSH
68541: LD_INT 4
68543: PPUSH
68544: LD_INT 4
68546: PPUSH
68547: CALL_OW 273
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_VAR 0 7
68560: PPUSH
68561: LD_INT 5
68563: PPUSH
68564: LD_INT 4
68566: PPUSH
68567: CALL_OW 272
68571: PUSH
68572: LD_VAR 0 8
68576: PPUSH
68577: LD_INT 5
68579: PPUSH
68580: LD_INT 4
68582: PPUSH
68583: CALL_OW 273
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: ST_TO_ADDR
// for i = tmp downto 1 do
68600: LD_ADDR_VAR 0 4
68604: PUSH
68605: DOUBLE
68606: LD_VAR 0 6
68610: INC
68611: ST_TO_ADDR
68612: LD_INT 1
68614: PUSH
68615: FOR_DOWNTO
68616: IFFALSE 68719
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68618: LD_VAR 0 6
68622: PUSH
68623: LD_VAR 0 4
68627: ARRAY
68628: PUSH
68629: LD_INT 1
68631: ARRAY
68632: PPUSH
68633: LD_VAR 0 6
68637: PUSH
68638: LD_VAR 0 4
68642: ARRAY
68643: PUSH
68644: LD_INT 2
68646: ARRAY
68647: PPUSH
68648: CALL_OW 488
68652: NOT
68653: IFTRUE 68695
68655: PUSH
68656: LD_VAR 0 6
68660: PUSH
68661: LD_VAR 0 4
68665: ARRAY
68666: PUSH
68667: LD_INT 1
68669: ARRAY
68670: PPUSH
68671: LD_VAR 0 6
68675: PUSH
68676: LD_VAR 0 4
68680: ARRAY
68681: PUSH
68682: LD_INT 2
68684: ARRAY
68685: PPUSH
68686: CALL_OW 428
68690: PUSH
68691: LD_INT 0
68693: NONEQUAL
68694: OR
68695: IFFALSE 68717
// tmp := Delete ( tmp , i ) ;
68697: LD_ADDR_VAR 0 6
68701: PUSH
68702: LD_VAR 0 6
68706: PPUSH
68707: LD_VAR 0 4
68711: PPUSH
68712: CALL_OW 3
68716: ST_TO_ADDR
68717: GO 68615
68719: POP
68720: POP
// j := GetClosestHex ( unit , tmp ) ;
68721: LD_ADDR_VAR 0 5
68725: PUSH
68726: LD_VAR 0 1
68730: PPUSH
68731: LD_VAR 0 6
68735: PPUSH
68736: CALL 68013 0 2
68740: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68741: LD_VAR 0 1
68745: PPUSH
68746: LD_VAR 0 5
68750: PUSH
68751: LD_INT 1
68753: ARRAY
68754: PPUSH
68755: LD_VAR 0 5
68759: PUSH
68760: LD_INT 2
68762: ARRAY
68763: PPUSH
68764: CALL_OW 111
// end ;
68768: LD_VAR 0 3
68772: RET
// export function PrepareApemanSoldier ( ) ; begin
68773: LD_INT 0
68775: PPUSH
// uc_nation := 0 ;
68776: LD_ADDR_OWVAR 21
68780: PUSH
68781: LD_INT 0
68783: ST_TO_ADDR
// hc_sex := sex_male ;
68784: LD_ADDR_OWVAR 27
68788: PUSH
68789: LD_INT 1
68791: ST_TO_ADDR
// hc_name :=  ;
68792: LD_ADDR_OWVAR 26
68796: PUSH
68797: LD_STRING 
68799: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68800: LD_ADDR_OWVAR 28
68804: PUSH
68805: LD_INT 15
68807: ST_TO_ADDR
// hc_gallery :=  ;
68808: LD_ADDR_OWVAR 33
68812: PUSH
68813: LD_STRING 
68815: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68816: LD_ADDR_OWVAR 31
68820: PUSH
68821: LD_INT 0
68823: PPUSH
68824: LD_INT 3
68826: PPUSH
68827: CALL_OW 12
68831: PUSH
68832: LD_INT 0
68834: PPUSH
68835: LD_INT 3
68837: PPUSH
68838: CALL_OW 12
68842: PUSH
68843: LD_INT 0
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68855: LD_ADDR_OWVAR 29
68859: PUSH
68860: LD_INT 12
68862: PUSH
68863: LD_INT 12
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: ST_TO_ADDR
// end ;
68870: LD_VAR 0 1
68874: RET
// export function PrepareApemanEngineer ( ) ; begin
68875: LD_INT 0
68877: PPUSH
// uc_nation := 0 ;
68878: LD_ADDR_OWVAR 21
68882: PUSH
68883: LD_INT 0
68885: ST_TO_ADDR
// hc_sex := sex_male ;
68886: LD_ADDR_OWVAR 27
68890: PUSH
68891: LD_INT 1
68893: ST_TO_ADDR
// hc_name :=  ;
68894: LD_ADDR_OWVAR 26
68898: PUSH
68899: LD_STRING 
68901: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68902: LD_ADDR_OWVAR 28
68906: PUSH
68907: LD_INT 16
68909: ST_TO_ADDR
// hc_gallery :=  ;
68910: LD_ADDR_OWVAR 33
68914: PUSH
68915: LD_STRING 
68917: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68918: LD_ADDR_OWVAR 31
68922: PUSH
68923: LD_INT 0
68925: PPUSH
68926: LD_INT 3
68928: PPUSH
68929: CALL_OW 12
68933: PUSH
68934: LD_INT 0
68936: PPUSH
68937: LD_INT 3
68939: PPUSH
68940: CALL_OW 12
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: LD_INT 0
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68957: LD_ADDR_OWVAR 29
68961: PUSH
68962: LD_INT 12
68964: PUSH
68965: LD_INT 12
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: ST_TO_ADDR
// end ;
68972: LD_VAR 0 1
68976: RET
// export function PrepareApeman ( agressivity ) ; begin
68977: LD_INT 0
68979: PPUSH
// uc_side := 0 ;
68980: LD_ADDR_OWVAR 20
68984: PUSH
68985: LD_INT 0
68987: ST_TO_ADDR
// uc_nation := 0 ;
68988: LD_ADDR_OWVAR 21
68992: PUSH
68993: LD_INT 0
68995: ST_TO_ADDR
// hc_sex := sex_male ;
68996: LD_ADDR_OWVAR 27
69000: PUSH
69001: LD_INT 1
69003: ST_TO_ADDR
// hc_class := class_apeman ;
69004: LD_ADDR_OWVAR 28
69008: PUSH
69009: LD_INT 12
69011: ST_TO_ADDR
// hc_gallery :=  ;
69012: LD_ADDR_OWVAR 33
69016: PUSH
69017: LD_STRING 
69019: ST_TO_ADDR
// hc_name :=  ;
69020: LD_ADDR_OWVAR 26
69024: PUSH
69025: LD_STRING 
69027: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69028: LD_ADDR_OWVAR 29
69032: PUSH
69033: LD_INT 12
69035: PUSH
69036: LD_INT 12
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: ST_TO_ADDR
// if agressivity = 0 then
69043: LD_VAR 0 1
69047: PUSH
69048: LD_INT 0
69050: EQUAL
69051: IFFALSE 69063
// hc_agressivity := 0 else
69053: LD_ADDR_OWVAR 35
69057: PUSH
69058: LD_INT 0
69060: ST_TO_ADDR
69061: GO 69084
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69063: LD_ADDR_OWVAR 35
69067: PUSH
69068: LD_VAR 0 1
69072: NEG
69073: PPUSH
69074: LD_VAR 0 1
69078: PPUSH
69079: CALL_OW 12
69083: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69084: LD_ADDR_OWVAR 31
69088: PUSH
69089: LD_INT 0
69091: PPUSH
69092: LD_INT 3
69094: PPUSH
69095: CALL_OW 12
69099: PUSH
69100: LD_INT 0
69102: PPUSH
69103: LD_INT 3
69105: PPUSH
69106: CALL_OW 12
69110: PUSH
69111: LD_INT 0
69113: PUSH
69114: LD_INT 0
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: ST_TO_ADDR
// end ;
69123: LD_VAR 0 2
69127: RET
// export function PrepareTiger ( agressivity ) ; begin
69128: LD_INT 0
69130: PPUSH
// uc_side := 0 ;
69131: LD_ADDR_OWVAR 20
69135: PUSH
69136: LD_INT 0
69138: ST_TO_ADDR
// uc_nation := 0 ;
69139: LD_ADDR_OWVAR 21
69143: PUSH
69144: LD_INT 0
69146: ST_TO_ADDR
// InitHc ;
69147: CALL_OW 19
// hc_class := class_tiger ;
69151: LD_ADDR_OWVAR 28
69155: PUSH
69156: LD_INT 14
69158: ST_TO_ADDR
// hc_gallery :=  ;
69159: LD_ADDR_OWVAR 33
69163: PUSH
69164: LD_STRING 
69166: ST_TO_ADDR
// hc_name :=  ;
69167: LD_ADDR_OWVAR 26
69171: PUSH
69172: LD_STRING 
69174: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69175: LD_ADDR_OWVAR 35
69179: PUSH
69180: LD_VAR 0 1
69184: NEG
69185: PPUSH
69186: LD_VAR 0 1
69190: PPUSH
69191: CALL_OW 12
69195: ST_TO_ADDR
// end ;
69196: LD_VAR 0 2
69200: RET
// export function PrepareEnchidna ( ) ; begin
69201: LD_INT 0
69203: PPUSH
// uc_side := 0 ;
69204: LD_ADDR_OWVAR 20
69208: PUSH
69209: LD_INT 0
69211: ST_TO_ADDR
// uc_nation := 0 ;
69212: LD_ADDR_OWVAR 21
69216: PUSH
69217: LD_INT 0
69219: ST_TO_ADDR
// InitHc ;
69220: CALL_OW 19
// hc_class := class_baggie ;
69224: LD_ADDR_OWVAR 28
69228: PUSH
69229: LD_INT 13
69231: ST_TO_ADDR
// hc_gallery :=  ;
69232: LD_ADDR_OWVAR 33
69236: PUSH
69237: LD_STRING 
69239: ST_TO_ADDR
// hc_name :=  ;
69240: LD_ADDR_OWVAR 26
69244: PUSH
69245: LD_STRING 
69247: ST_TO_ADDR
// end ;
69248: LD_VAR 0 1
69252: RET
// export function PrepareFrog ( ) ; begin
69253: LD_INT 0
69255: PPUSH
// uc_side := 0 ;
69256: LD_ADDR_OWVAR 20
69260: PUSH
69261: LD_INT 0
69263: ST_TO_ADDR
// uc_nation := 0 ;
69264: LD_ADDR_OWVAR 21
69268: PUSH
69269: LD_INT 0
69271: ST_TO_ADDR
// InitHc ;
69272: CALL_OW 19
// hc_class := class_frog ;
69276: LD_ADDR_OWVAR 28
69280: PUSH
69281: LD_INT 19
69283: ST_TO_ADDR
// hc_gallery :=  ;
69284: LD_ADDR_OWVAR 33
69288: PUSH
69289: LD_STRING 
69291: ST_TO_ADDR
// hc_name :=  ;
69292: LD_ADDR_OWVAR 26
69296: PUSH
69297: LD_STRING 
69299: ST_TO_ADDR
// end ;
69300: LD_VAR 0 1
69304: RET
// export function PrepareFish ( ) ; begin
69305: LD_INT 0
69307: PPUSH
// uc_side := 0 ;
69308: LD_ADDR_OWVAR 20
69312: PUSH
69313: LD_INT 0
69315: ST_TO_ADDR
// uc_nation := 0 ;
69316: LD_ADDR_OWVAR 21
69320: PUSH
69321: LD_INT 0
69323: ST_TO_ADDR
// InitHc ;
69324: CALL_OW 19
// hc_class := class_fish ;
69328: LD_ADDR_OWVAR 28
69332: PUSH
69333: LD_INT 20
69335: ST_TO_ADDR
// hc_gallery :=  ;
69336: LD_ADDR_OWVAR 33
69340: PUSH
69341: LD_STRING 
69343: ST_TO_ADDR
// hc_name :=  ;
69344: LD_ADDR_OWVAR 26
69348: PUSH
69349: LD_STRING 
69351: ST_TO_ADDR
// end ;
69352: LD_VAR 0 1
69356: RET
// export function PrepareBird ( ) ; begin
69357: LD_INT 0
69359: PPUSH
// uc_side := 0 ;
69360: LD_ADDR_OWVAR 20
69364: PUSH
69365: LD_INT 0
69367: ST_TO_ADDR
// uc_nation := 0 ;
69368: LD_ADDR_OWVAR 21
69372: PUSH
69373: LD_INT 0
69375: ST_TO_ADDR
// InitHc ;
69376: CALL_OW 19
// hc_class := class_phororhacos ;
69380: LD_ADDR_OWVAR 28
69384: PUSH
69385: LD_INT 18
69387: ST_TO_ADDR
// hc_gallery :=  ;
69388: LD_ADDR_OWVAR 33
69392: PUSH
69393: LD_STRING 
69395: ST_TO_ADDR
// hc_name :=  ;
69396: LD_ADDR_OWVAR 26
69400: PUSH
69401: LD_STRING 
69403: ST_TO_ADDR
// end ;
69404: LD_VAR 0 1
69408: RET
// export function PrepareHorse ( ) ; begin
69409: LD_INT 0
69411: PPUSH
// uc_side := 0 ;
69412: LD_ADDR_OWVAR 20
69416: PUSH
69417: LD_INT 0
69419: ST_TO_ADDR
// uc_nation := 0 ;
69420: LD_ADDR_OWVAR 21
69424: PUSH
69425: LD_INT 0
69427: ST_TO_ADDR
// InitHc ;
69428: CALL_OW 19
// hc_class := class_horse ;
69432: LD_ADDR_OWVAR 28
69436: PUSH
69437: LD_INT 21
69439: ST_TO_ADDR
// hc_gallery :=  ;
69440: LD_ADDR_OWVAR 33
69444: PUSH
69445: LD_STRING 
69447: ST_TO_ADDR
// hc_name :=  ;
69448: LD_ADDR_OWVAR 26
69452: PUSH
69453: LD_STRING 
69455: ST_TO_ADDR
// end ;
69456: LD_VAR 0 1
69460: RET
// export function PrepareMastodont ( ) ; begin
69461: LD_INT 0
69463: PPUSH
// uc_side := 0 ;
69464: LD_ADDR_OWVAR 20
69468: PUSH
69469: LD_INT 0
69471: ST_TO_ADDR
// uc_nation := 0 ;
69472: LD_ADDR_OWVAR 21
69476: PUSH
69477: LD_INT 0
69479: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69480: LD_ADDR_OWVAR 37
69484: PUSH
69485: LD_INT 31
69487: ST_TO_ADDR
// vc_control := control_rider ;
69488: LD_ADDR_OWVAR 38
69492: PUSH
69493: LD_INT 4
69495: ST_TO_ADDR
// end ;
69496: LD_VAR 0 1
69500: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69501: LD_INT 0
69503: PPUSH
69504: PPUSH
69505: PPUSH
// uc_side = 0 ;
69506: LD_ADDR_OWVAR 20
69510: PUSH
69511: LD_INT 0
69513: ST_TO_ADDR
// uc_nation = 0 ;
69514: LD_ADDR_OWVAR 21
69518: PUSH
69519: LD_INT 0
69521: ST_TO_ADDR
// InitHc_All ( ) ;
69522: CALL_OW 584
// InitVc ;
69526: CALL_OW 20
// if mastodonts then
69530: LD_VAR 0 6
69534: IFFALSE 69601
// for i = 1 to mastodonts do
69536: LD_ADDR_VAR 0 11
69540: PUSH
69541: DOUBLE
69542: LD_INT 1
69544: DEC
69545: ST_TO_ADDR
69546: LD_VAR 0 6
69550: PUSH
69551: FOR_TO
69552: IFFALSE 69599
// begin vc_chassis := 31 ;
69554: LD_ADDR_OWVAR 37
69558: PUSH
69559: LD_INT 31
69561: ST_TO_ADDR
// vc_control := control_rider ;
69562: LD_ADDR_OWVAR 38
69566: PUSH
69567: LD_INT 4
69569: ST_TO_ADDR
// animal := CreateVehicle ;
69570: LD_ADDR_VAR 0 12
69574: PUSH
69575: CALL_OW 45
69579: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69580: LD_VAR 0 12
69584: PPUSH
69585: LD_VAR 0 8
69589: PPUSH
69590: LD_INT 0
69592: PPUSH
69593: CALL 71743 0 3
// end ;
69597: GO 69551
69599: POP
69600: POP
// if horses then
69601: LD_VAR 0 5
69605: IFFALSE 69672
// for i = 1 to horses do
69607: LD_ADDR_VAR 0 11
69611: PUSH
69612: DOUBLE
69613: LD_INT 1
69615: DEC
69616: ST_TO_ADDR
69617: LD_VAR 0 5
69621: PUSH
69622: FOR_TO
69623: IFFALSE 69670
// begin hc_class := 21 ;
69625: LD_ADDR_OWVAR 28
69629: PUSH
69630: LD_INT 21
69632: ST_TO_ADDR
// hc_gallery :=  ;
69633: LD_ADDR_OWVAR 33
69637: PUSH
69638: LD_STRING 
69640: ST_TO_ADDR
// animal := CreateHuman ;
69641: LD_ADDR_VAR 0 12
69645: PUSH
69646: CALL_OW 44
69650: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69651: LD_VAR 0 12
69655: PPUSH
69656: LD_VAR 0 8
69660: PPUSH
69661: LD_INT 0
69663: PPUSH
69664: CALL 71743 0 3
// end ;
69668: GO 69622
69670: POP
69671: POP
// if birds then
69672: LD_VAR 0 1
69676: IFFALSE 69743
// for i = 1 to birds do
69678: LD_ADDR_VAR 0 11
69682: PUSH
69683: DOUBLE
69684: LD_INT 1
69686: DEC
69687: ST_TO_ADDR
69688: LD_VAR 0 1
69692: PUSH
69693: FOR_TO
69694: IFFALSE 69741
// begin hc_class := 18 ;
69696: LD_ADDR_OWVAR 28
69700: PUSH
69701: LD_INT 18
69703: ST_TO_ADDR
// hc_gallery =  ;
69704: LD_ADDR_OWVAR 33
69708: PUSH
69709: LD_STRING 
69711: ST_TO_ADDR
// animal := CreateHuman ;
69712: LD_ADDR_VAR 0 12
69716: PUSH
69717: CALL_OW 44
69721: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69722: LD_VAR 0 12
69726: PPUSH
69727: LD_VAR 0 8
69731: PPUSH
69732: LD_INT 0
69734: PPUSH
69735: CALL 71743 0 3
// end ;
69739: GO 69693
69741: POP
69742: POP
// if tigers then
69743: LD_VAR 0 2
69747: IFFALSE 69831
// for i = 1 to tigers do
69749: LD_ADDR_VAR 0 11
69753: PUSH
69754: DOUBLE
69755: LD_INT 1
69757: DEC
69758: ST_TO_ADDR
69759: LD_VAR 0 2
69763: PUSH
69764: FOR_TO
69765: IFFALSE 69829
// begin hc_class = class_tiger ;
69767: LD_ADDR_OWVAR 28
69771: PUSH
69772: LD_INT 14
69774: ST_TO_ADDR
// hc_gallery =  ;
69775: LD_ADDR_OWVAR 33
69779: PUSH
69780: LD_STRING 
69782: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69783: LD_ADDR_OWVAR 35
69787: PUSH
69788: LD_INT 7
69790: NEG
69791: PPUSH
69792: LD_INT 7
69794: PPUSH
69795: CALL_OW 12
69799: ST_TO_ADDR
// animal := CreateHuman ;
69800: LD_ADDR_VAR 0 12
69804: PUSH
69805: CALL_OW 44
69809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69810: LD_VAR 0 12
69814: PPUSH
69815: LD_VAR 0 8
69819: PPUSH
69820: LD_INT 0
69822: PPUSH
69823: CALL 71743 0 3
// end ;
69827: GO 69764
69829: POP
69830: POP
// if apemans then
69831: LD_VAR 0 3
69835: IFFALSE 69958
// for i = 1 to apemans do
69837: LD_ADDR_VAR 0 11
69841: PUSH
69842: DOUBLE
69843: LD_INT 1
69845: DEC
69846: ST_TO_ADDR
69847: LD_VAR 0 3
69851: PUSH
69852: FOR_TO
69853: IFFALSE 69956
// begin hc_class = class_apeman ;
69855: LD_ADDR_OWVAR 28
69859: PUSH
69860: LD_INT 12
69862: ST_TO_ADDR
// hc_gallery =  ;
69863: LD_ADDR_OWVAR 33
69867: PUSH
69868: LD_STRING 
69870: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69871: LD_ADDR_OWVAR 35
69875: PUSH
69876: LD_INT 2
69878: NEG
69879: PPUSH
69880: LD_INT 2
69882: PPUSH
69883: CALL_OW 12
69887: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69888: LD_ADDR_OWVAR 31
69892: PUSH
69893: LD_INT 1
69895: PPUSH
69896: LD_INT 3
69898: PPUSH
69899: CALL_OW 12
69903: PUSH
69904: LD_INT 1
69906: PPUSH
69907: LD_INT 3
69909: PPUSH
69910: CALL_OW 12
69914: PUSH
69915: LD_INT 0
69917: PUSH
69918: LD_INT 0
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: ST_TO_ADDR
// animal := CreateHuman ;
69927: LD_ADDR_VAR 0 12
69931: PUSH
69932: CALL_OW 44
69936: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69937: LD_VAR 0 12
69941: PPUSH
69942: LD_VAR 0 8
69946: PPUSH
69947: LD_INT 0
69949: PPUSH
69950: CALL 71743 0 3
// end ;
69954: GO 69852
69956: POP
69957: POP
// if enchidnas then
69958: LD_VAR 0 4
69962: IFFALSE 70029
// for i = 1 to enchidnas do
69964: LD_ADDR_VAR 0 11
69968: PUSH
69969: DOUBLE
69970: LD_INT 1
69972: DEC
69973: ST_TO_ADDR
69974: LD_VAR 0 4
69978: PUSH
69979: FOR_TO
69980: IFFALSE 70027
// begin hc_class = 13 ;
69982: LD_ADDR_OWVAR 28
69986: PUSH
69987: LD_INT 13
69989: ST_TO_ADDR
// hc_gallery =  ;
69990: LD_ADDR_OWVAR 33
69994: PUSH
69995: LD_STRING 
69997: ST_TO_ADDR
// animal := CreateHuman ;
69998: LD_ADDR_VAR 0 12
70002: PUSH
70003: CALL_OW 44
70007: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70008: LD_VAR 0 12
70012: PPUSH
70013: LD_VAR 0 8
70017: PPUSH
70018: LD_INT 0
70020: PPUSH
70021: CALL 71743 0 3
// end ;
70025: GO 69979
70027: POP
70028: POP
// if fishes then
70029: LD_VAR 0 7
70033: IFFALSE 70100
// for i = 1 to fishes do
70035: LD_ADDR_VAR 0 11
70039: PUSH
70040: DOUBLE
70041: LD_INT 1
70043: DEC
70044: ST_TO_ADDR
70045: LD_VAR 0 7
70049: PUSH
70050: FOR_TO
70051: IFFALSE 70098
// begin hc_class = 20 ;
70053: LD_ADDR_OWVAR 28
70057: PUSH
70058: LD_INT 20
70060: ST_TO_ADDR
// hc_gallery =  ;
70061: LD_ADDR_OWVAR 33
70065: PUSH
70066: LD_STRING 
70068: ST_TO_ADDR
// animal := CreateHuman ;
70069: LD_ADDR_VAR 0 12
70073: PUSH
70074: CALL_OW 44
70078: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70079: LD_VAR 0 12
70083: PPUSH
70084: LD_VAR 0 9
70088: PPUSH
70089: LD_INT 0
70091: PPUSH
70092: CALL 71743 0 3
// end ;
70096: GO 70050
70098: POP
70099: POP
// end ;
70100: LD_VAR 0 10
70104: RET
// export function WantHeal ( sci , unit ) ; begin
70105: LD_INT 0
70107: PPUSH
// if GetTaskList ( sci ) > 0 then
70108: LD_VAR 0 1
70112: PPUSH
70113: CALL_OW 437
70117: PUSH
70118: LD_INT 0
70120: GREATER
70121: IFFALSE 70193
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70123: LD_VAR 0 1
70127: PPUSH
70128: CALL_OW 437
70132: PUSH
70133: LD_INT 1
70135: ARRAY
70136: PUSH
70137: LD_INT 1
70139: ARRAY
70140: PUSH
70141: LD_STRING l
70143: EQUAL
70144: IFFALSE 70171
70146: PUSH
70147: LD_VAR 0 1
70151: PPUSH
70152: CALL_OW 437
70156: PUSH
70157: LD_INT 1
70159: ARRAY
70160: PUSH
70161: LD_INT 4
70163: ARRAY
70164: PUSH
70165: LD_VAR 0 2
70169: EQUAL
70170: AND
70171: IFFALSE 70183
// result := true else
70173: LD_ADDR_VAR 0 3
70177: PUSH
70178: LD_INT 1
70180: ST_TO_ADDR
70181: GO 70191
// result := false ;
70183: LD_ADDR_VAR 0 3
70187: PUSH
70188: LD_INT 0
70190: ST_TO_ADDR
// end else
70191: GO 70201
// result := false ;
70193: LD_ADDR_VAR 0 3
70197: PUSH
70198: LD_INT 0
70200: ST_TO_ADDR
// end ;
70201: LD_VAR 0 3
70205: RET
// export function HealTarget ( sci ) ; begin
70206: LD_INT 0
70208: PPUSH
// if not sci then
70209: LD_VAR 0 1
70213: NOT
70214: IFFALSE 70218
// exit ;
70216: GO 70283
// result := 0 ;
70218: LD_ADDR_VAR 0 2
70222: PUSH
70223: LD_INT 0
70225: ST_TO_ADDR
// if GetTaskList ( sci ) then
70226: LD_VAR 0 1
70230: PPUSH
70231: CALL_OW 437
70235: IFFALSE 70283
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70237: LD_VAR 0 1
70241: PPUSH
70242: CALL_OW 437
70246: PUSH
70247: LD_INT 1
70249: ARRAY
70250: PUSH
70251: LD_INT 1
70253: ARRAY
70254: PUSH
70255: LD_STRING l
70257: EQUAL
70258: IFFALSE 70283
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70260: LD_ADDR_VAR 0 2
70264: PUSH
70265: LD_VAR 0 1
70269: PPUSH
70270: CALL_OW 437
70274: PUSH
70275: LD_INT 1
70277: ARRAY
70278: PUSH
70279: LD_INT 4
70281: ARRAY
70282: ST_TO_ADDR
// end ;
70283: LD_VAR 0 2
70287: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70288: LD_INT 0
70290: PPUSH
70291: PPUSH
70292: PPUSH
70293: PPUSH
// if not base_units then
70294: LD_VAR 0 1
70298: NOT
70299: IFFALSE 70303
// exit ;
70301: GO 70390
// result := false ;
70303: LD_ADDR_VAR 0 2
70307: PUSH
70308: LD_INT 0
70310: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70311: LD_ADDR_VAR 0 5
70315: PUSH
70316: LD_VAR 0 1
70320: PPUSH
70321: LD_INT 21
70323: PUSH
70324: LD_INT 3
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PPUSH
70331: CALL_OW 72
70335: ST_TO_ADDR
// if not tmp then
70336: LD_VAR 0 5
70340: NOT
70341: IFFALSE 70345
// exit ;
70343: GO 70390
// for i in tmp do
70345: LD_ADDR_VAR 0 3
70349: PUSH
70350: LD_VAR 0 5
70354: PUSH
70355: FOR_IN
70356: IFFALSE 70388
// begin result := EnemyInRange ( i , 22 ) ;
70358: LD_ADDR_VAR 0 2
70362: PUSH
70363: LD_VAR 0 3
70367: PPUSH
70368: LD_INT 22
70370: PPUSH
70371: CALL 67815 0 2
70375: ST_TO_ADDR
// if result then
70376: LD_VAR 0 2
70380: IFFALSE 70386
// exit ;
70382: POP
70383: POP
70384: GO 70390
// end ;
70386: GO 70355
70388: POP
70389: POP
// end ;
70390: LD_VAR 0 2
70394: RET
// export function FilterByTag ( units , tag ) ; begin
70395: LD_INT 0
70397: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70398: LD_ADDR_VAR 0 3
70402: PUSH
70403: LD_VAR 0 1
70407: PPUSH
70408: LD_INT 120
70410: PUSH
70411: LD_VAR 0 2
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PPUSH
70420: CALL_OW 72
70424: ST_TO_ADDR
// end ;
70425: LD_VAR 0 3
70429: RET
// export function IsDriver ( un ) ; begin
70430: LD_INT 0
70432: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70433: LD_ADDR_VAR 0 2
70437: PUSH
70438: LD_VAR 0 1
70442: PUSH
70443: LD_INT 55
70445: PUSH
70446: EMPTY
70447: LIST
70448: PPUSH
70449: CALL_OW 69
70453: IN
70454: ST_TO_ADDR
// end ;
70455: LD_VAR 0 2
70459: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70460: LD_INT 0
70462: PPUSH
70463: PPUSH
// list := [ ] ;
70464: LD_ADDR_VAR 0 5
70468: PUSH
70469: EMPTY
70470: ST_TO_ADDR
// case d of 0 :
70471: LD_VAR 0 3
70475: PUSH
70476: LD_INT 0
70478: DOUBLE
70479: EQUAL
70480: IFTRUE 70484
70482: GO 70617
70484: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70485: LD_ADDR_VAR 0 5
70489: PUSH
70490: LD_VAR 0 1
70494: PUSH
70495: LD_INT 4
70497: MINUS
70498: PUSH
70499: LD_VAR 0 2
70503: PUSH
70504: LD_INT 4
70506: MINUS
70507: PUSH
70508: LD_INT 2
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: LIST
70515: PUSH
70516: LD_VAR 0 1
70520: PUSH
70521: LD_INT 3
70523: MINUS
70524: PUSH
70525: LD_VAR 0 2
70529: PUSH
70530: LD_INT 1
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: LIST
70537: PUSH
70538: LD_VAR 0 1
70542: PUSH
70543: LD_INT 4
70545: PLUS
70546: PUSH
70547: LD_VAR 0 2
70551: PUSH
70552: LD_INT 4
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: LIST
70559: PUSH
70560: LD_VAR 0 1
70564: PUSH
70565: LD_INT 3
70567: PLUS
70568: PUSH
70569: LD_VAR 0 2
70573: PUSH
70574: LD_INT 3
70576: PLUS
70577: PUSH
70578: LD_INT 5
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: LIST
70585: PUSH
70586: LD_VAR 0 1
70590: PUSH
70591: LD_VAR 0 2
70595: PUSH
70596: LD_INT 4
70598: PLUS
70599: PUSH
70600: LD_INT 0
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: LIST
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: ST_TO_ADDR
// end ; 1 :
70615: GO 71315
70617: LD_INT 1
70619: DOUBLE
70620: EQUAL
70621: IFTRUE 70625
70623: GO 70758
70625: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70626: LD_ADDR_VAR 0 5
70630: PUSH
70631: LD_VAR 0 1
70635: PUSH
70636: LD_VAR 0 2
70640: PUSH
70641: LD_INT 4
70643: MINUS
70644: PUSH
70645: LD_INT 3
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: LIST
70652: PUSH
70653: LD_VAR 0 1
70657: PUSH
70658: LD_INT 3
70660: MINUS
70661: PUSH
70662: LD_VAR 0 2
70666: PUSH
70667: LD_INT 3
70669: MINUS
70670: PUSH
70671: LD_INT 2
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: LIST
70678: PUSH
70679: LD_VAR 0 1
70683: PUSH
70684: LD_INT 4
70686: MINUS
70687: PUSH
70688: LD_VAR 0 2
70692: PUSH
70693: LD_INT 1
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: LIST
70700: PUSH
70701: LD_VAR 0 1
70705: PUSH
70706: LD_VAR 0 2
70710: PUSH
70711: LD_INT 3
70713: PLUS
70714: PUSH
70715: LD_INT 0
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: LIST
70722: PUSH
70723: LD_VAR 0 1
70727: PUSH
70728: LD_INT 4
70730: PLUS
70731: PUSH
70732: LD_VAR 0 2
70736: PUSH
70737: LD_INT 4
70739: PLUS
70740: PUSH
70741: LD_INT 5
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: LIST
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: ST_TO_ADDR
// end ; 2 :
70756: GO 71315
70758: LD_INT 2
70760: DOUBLE
70761: EQUAL
70762: IFTRUE 70766
70764: GO 70895
70766: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70767: LD_ADDR_VAR 0 5
70771: PUSH
70772: LD_VAR 0 1
70776: PUSH
70777: LD_VAR 0 2
70781: PUSH
70782: LD_INT 3
70784: MINUS
70785: PUSH
70786: LD_INT 3
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: LIST
70793: PUSH
70794: LD_VAR 0 1
70798: PUSH
70799: LD_INT 4
70801: PLUS
70802: PUSH
70803: LD_VAR 0 2
70807: PUSH
70808: LD_INT 4
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: LIST
70815: PUSH
70816: LD_VAR 0 1
70820: PUSH
70821: LD_VAR 0 2
70825: PUSH
70826: LD_INT 4
70828: PLUS
70829: PUSH
70830: LD_INT 0
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: LIST
70837: PUSH
70838: LD_VAR 0 1
70842: PUSH
70843: LD_INT 3
70845: MINUS
70846: PUSH
70847: LD_VAR 0 2
70851: PUSH
70852: LD_INT 1
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: LIST
70859: PUSH
70860: LD_VAR 0 1
70864: PUSH
70865: LD_INT 4
70867: MINUS
70868: PUSH
70869: LD_VAR 0 2
70873: PUSH
70874: LD_INT 4
70876: MINUS
70877: PUSH
70878: LD_INT 2
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: LIST
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: ST_TO_ADDR
// end ; 3 :
70893: GO 71315
70895: LD_INT 3
70897: DOUBLE
70898: EQUAL
70899: IFTRUE 70903
70901: GO 71036
70903: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70904: LD_ADDR_VAR 0 5
70908: PUSH
70909: LD_VAR 0 1
70913: PUSH
70914: LD_INT 3
70916: PLUS
70917: PUSH
70918: LD_VAR 0 2
70922: PUSH
70923: LD_INT 4
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: LIST
70930: PUSH
70931: LD_VAR 0 1
70935: PUSH
70936: LD_INT 4
70938: PLUS
70939: PUSH
70940: LD_VAR 0 2
70944: PUSH
70945: LD_INT 4
70947: PLUS
70948: PUSH
70949: LD_INT 5
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: LIST
70956: PUSH
70957: LD_VAR 0 1
70961: PUSH
70962: LD_INT 4
70964: MINUS
70965: PUSH
70966: LD_VAR 0 2
70970: PUSH
70971: LD_INT 1
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: LIST
70978: PUSH
70979: LD_VAR 0 1
70983: PUSH
70984: LD_VAR 0 2
70988: PUSH
70989: LD_INT 4
70991: MINUS
70992: PUSH
70993: LD_INT 3
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: LIST
71000: PUSH
71001: LD_VAR 0 1
71005: PUSH
71006: LD_INT 3
71008: MINUS
71009: PUSH
71010: LD_VAR 0 2
71014: PUSH
71015: LD_INT 3
71017: MINUS
71018: PUSH
71019: LD_INT 2
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: LIST
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: ST_TO_ADDR
// end ; 4 :
71034: GO 71315
71036: LD_INT 4
71038: DOUBLE
71039: EQUAL
71040: IFTRUE 71044
71042: GO 71177
71044: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71045: LD_ADDR_VAR 0 5
71049: PUSH
71050: LD_VAR 0 1
71054: PUSH
71055: LD_VAR 0 2
71059: PUSH
71060: LD_INT 4
71062: PLUS
71063: PUSH
71064: LD_INT 0
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: LIST
71071: PUSH
71072: LD_VAR 0 1
71076: PUSH
71077: LD_INT 3
71079: PLUS
71080: PUSH
71081: LD_VAR 0 2
71085: PUSH
71086: LD_INT 3
71088: PLUS
71089: PUSH
71090: LD_INT 5
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: LIST
71097: PUSH
71098: LD_VAR 0 1
71102: PUSH
71103: LD_INT 4
71105: PLUS
71106: PUSH
71107: LD_VAR 0 2
71111: PUSH
71112: LD_INT 4
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: LIST
71119: PUSH
71120: LD_VAR 0 1
71124: PUSH
71125: LD_VAR 0 2
71129: PUSH
71130: LD_INT 3
71132: MINUS
71133: PUSH
71134: LD_INT 3
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: LIST
71141: PUSH
71142: LD_VAR 0 1
71146: PUSH
71147: LD_INT 4
71149: MINUS
71150: PUSH
71151: LD_VAR 0 2
71155: PUSH
71156: LD_INT 4
71158: MINUS
71159: PUSH
71160: LD_INT 2
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: LIST
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: ST_TO_ADDR
// end ; 5 :
71175: GO 71315
71177: LD_INT 5
71179: DOUBLE
71180: EQUAL
71181: IFTRUE 71185
71183: GO 71314
71185: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71186: LD_ADDR_VAR 0 5
71190: PUSH
71191: LD_VAR 0 1
71195: PUSH
71196: LD_INT 4
71198: MINUS
71199: PUSH
71200: LD_VAR 0 2
71204: PUSH
71205: LD_INT 1
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: LIST
71212: PUSH
71213: LD_VAR 0 1
71217: PUSH
71218: LD_VAR 0 2
71222: PUSH
71223: LD_INT 4
71225: MINUS
71226: PUSH
71227: LD_INT 3
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: LIST
71234: PUSH
71235: LD_VAR 0 1
71239: PUSH
71240: LD_INT 4
71242: PLUS
71243: PUSH
71244: LD_VAR 0 2
71248: PUSH
71249: LD_INT 4
71251: PLUS
71252: PUSH
71253: LD_INT 5
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: LIST
71260: PUSH
71261: LD_VAR 0 1
71265: PUSH
71266: LD_INT 3
71268: PLUS
71269: PUSH
71270: LD_VAR 0 2
71274: PUSH
71275: LD_INT 4
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: LIST
71282: PUSH
71283: LD_VAR 0 1
71287: PUSH
71288: LD_VAR 0 2
71292: PUSH
71293: LD_INT 3
71295: PLUS
71296: PUSH
71297: LD_INT 0
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: LIST
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: ST_TO_ADDR
// end ; end ;
71312: GO 71315
71314: POP
// result := list ;
71315: LD_ADDR_VAR 0 4
71319: PUSH
71320: LD_VAR 0 5
71324: ST_TO_ADDR
// end ;
71325: LD_VAR 0 4
71329: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71330: LD_INT 0
71332: PPUSH
71333: PPUSH
71334: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71335: LD_VAR 0 1
71339: NOT
71340: IFTRUE 71368
71342: PUSH
71343: LD_VAR 0 2
71347: PUSH
71348: LD_INT 1
71350: PUSH
71351: LD_INT 2
71353: PUSH
71354: LD_INT 3
71356: PUSH
71357: LD_INT 4
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: IN
71366: NOT
71367: OR
71368: IFFALSE 71372
// exit ;
71370: GO 71455
// tmp := [ ] ;
71372: LD_ADDR_VAR 0 5
71376: PUSH
71377: EMPTY
71378: ST_TO_ADDR
// for i in units do
71379: LD_ADDR_VAR 0 4
71383: PUSH
71384: LD_VAR 0 1
71388: PUSH
71389: FOR_IN
71390: IFFALSE 71424
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71392: LD_ADDR_VAR 0 5
71396: PUSH
71397: LD_VAR 0 5
71401: PPUSH
71402: LD_VAR 0 4
71406: PPUSH
71407: LD_VAR 0 2
71411: PPUSH
71412: CALL_OW 259
71416: PPUSH
71417: CALL 72850 0 2
71421: ST_TO_ADDR
71422: GO 71389
71424: POP
71425: POP
// if not tmp then
71426: LD_VAR 0 5
71430: NOT
71431: IFFALSE 71435
// exit ;
71433: GO 71455
// result := SortListByListDesc ( units , tmp ) ;
71435: LD_ADDR_VAR 0 3
71439: PUSH
71440: LD_VAR 0 1
71444: PPUSH
71445: LD_VAR 0 5
71449: PPUSH
71450: CALL_OW 77
71454: ST_TO_ADDR
// end ;
71455: LD_VAR 0 3
71459: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71460: LD_INT 0
71462: PPUSH
71463: PPUSH
71464: PPUSH
// result := false ;
71465: LD_ADDR_VAR 0 3
71469: PUSH
71470: LD_INT 0
71472: ST_TO_ADDR
// if not building then
71473: LD_VAR 0 2
71477: NOT
71478: IFFALSE 71482
// exit ;
71480: GO 71626
// x := GetX ( building ) ;
71482: LD_ADDR_VAR 0 4
71486: PUSH
71487: LD_VAR 0 2
71491: PPUSH
71492: CALL_OW 250
71496: ST_TO_ADDR
// y := GetY ( building ) ;
71497: LD_ADDR_VAR 0 5
71501: PUSH
71502: LD_VAR 0 2
71506: PPUSH
71507: CALL_OW 251
71511: ST_TO_ADDR
// if not x or not y then
71512: LD_VAR 0 4
71516: NOT
71517: IFTRUE 71526
71519: PUSH
71520: LD_VAR 0 5
71524: NOT
71525: OR
71526: IFFALSE 71530
// exit ;
71528: GO 71626
// if GetTaskList ( unit ) then
71530: LD_VAR 0 1
71534: PPUSH
71535: CALL_OW 437
71539: IFFALSE 71626
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71541: LD_STRING e
71543: PUSH
71544: LD_VAR 0 1
71548: PPUSH
71549: CALL_OW 437
71553: PUSH
71554: LD_INT 1
71556: ARRAY
71557: PUSH
71558: LD_INT 1
71560: ARRAY
71561: EQUAL
71562: IFFALSE 71589
71564: PUSH
71565: LD_VAR 0 4
71569: PUSH
71570: LD_VAR 0 1
71574: PPUSH
71575: CALL_OW 437
71579: PUSH
71580: LD_INT 1
71582: ARRAY
71583: PUSH
71584: LD_INT 2
71586: ARRAY
71587: EQUAL
71588: AND
71589: IFFALSE 71616
71591: PUSH
71592: LD_VAR 0 5
71596: PUSH
71597: LD_VAR 0 1
71601: PPUSH
71602: CALL_OW 437
71606: PUSH
71607: LD_INT 1
71609: ARRAY
71610: PUSH
71611: LD_INT 3
71613: ARRAY
71614: EQUAL
71615: AND
71616: IFFALSE 71626
// result := true end ;
71618: LD_ADDR_VAR 0 3
71622: PUSH
71623: LD_INT 1
71625: ST_TO_ADDR
// end ;
71626: LD_VAR 0 3
71630: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71631: LD_INT 0
71633: PPUSH
// result := false ;
71634: LD_ADDR_VAR 0 4
71638: PUSH
71639: LD_INT 0
71641: ST_TO_ADDR
// if GetTaskList ( unit ) then
71642: LD_VAR 0 1
71646: PPUSH
71647: CALL_OW 437
71651: IFFALSE 71738
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71653: LD_STRING M
71655: PUSH
71656: LD_VAR 0 1
71660: PPUSH
71661: CALL_OW 437
71665: PUSH
71666: LD_INT 1
71668: ARRAY
71669: PUSH
71670: LD_INT 1
71672: ARRAY
71673: EQUAL
71674: IFFALSE 71701
71676: PUSH
71677: LD_VAR 0 2
71681: PUSH
71682: LD_VAR 0 1
71686: PPUSH
71687: CALL_OW 437
71691: PUSH
71692: LD_INT 1
71694: ARRAY
71695: PUSH
71696: LD_INT 2
71698: ARRAY
71699: EQUAL
71700: AND
71701: IFFALSE 71728
71703: PUSH
71704: LD_VAR 0 3
71708: PUSH
71709: LD_VAR 0 1
71713: PPUSH
71714: CALL_OW 437
71718: PUSH
71719: LD_INT 1
71721: ARRAY
71722: PUSH
71723: LD_INT 3
71725: ARRAY
71726: EQUAL
71727: AND
71728: IFFALSE 71738
// result := true ;
71730: LD_ADDR_VAR 0 4
71734: PUSH
71735: LD_INT 1
71737: ST_TO_ADDR
// end ; end ;
71738: LD_VAR 0 4
71742: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71743: LD_INT 0
71745: PPUSH
71746: PPUSH
71747: PPUSH
71748: PPUSH
// if not unit or not area then
71749: LD_VAR 0 1
71753: NOT
71754: IFTRUE 71763
71756: PUSH
71757: LD_VAR 0 2
71761: NOT
71762: OR
71763: IFFALSE 71767
// exit ;
71765: GO 71943
// tmp := AreaToList ( area , i ) ;
71767: LD_ADDR_VAR 0 6
71771: PUSH
71772: LD_VAR 0 2
71776: PPUSH
71777: LD_VAR 0 5
71781: PPUSH
71782: CALL_OW 517
71786: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71787: LD_ADDR_VAR 0 5
71791: PUSH
71792: DOUBLE
71793: LD_INT 1
71795: DEC
71796: ST_TO_ADDR
71797: LD_VAR 0 6
71801: PUSH
71802: LD_INT 1
71804: ARRAY
71805: PUSH
71806: FOR_TO
71807: IFFALSE 71941
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71809: LD_ADDR_VAR 0 7
71813: PUSH
71814: LD_VAR 0 6
71818: PUSH
71819: LD_INT 1
71821: ARRAY
71822: PUSH
71823: LD_VAR 0 5
71827: ARRAY
71828: PUSH
71829: LD_VAR 0 6
71833: PUSH
71834: LD_INT 2
71836: ARRAY
71837: PUSH
71838: LD_VAR 0 5
71842: ARRAY
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
71848: LD_INT 92
71850: PUSH
71851: LD_VAR 0 7
71855: PUSH
71856: LD_INT 1
71858: ARRAY
71859: PUSH
71860: LD_VAR 0 7
71864: PUSH
71865: LD_INT 2
71867: ARRAY
71868: PUSH
71869: LD_INT 2
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: PPUSH
71878: CALL_OW 69
71882: PUSH
71883: LD_INT 0
71885: EQUAL
71886: IFFALSE 71939
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71888: LD_VAR 0 1
71892: PPUSH
71893: LD_VAR 0 7
71897: PUSH
71898: LD_INT 1
71900: ARRAY
71901: PPUSH
71902: LD_VAR 0 7
71906: PUSH
71907: LD_INT 2
71909: ARRAY
71910: PPUSH
71911: LD_VAR 0 3
71915: PPUSH
71916: CALL_OW 48
// result := IsPlaced ( unit ) ;
71920: LD_ADDR_VAR 0 4
71924: PUSH
71925: LD_VAR 0 1
71929: PPUSH
71930: CALL_OW 305
71934: ST_TO_ADDR
// exit ;
71935: POP
71936: POP
71937: GO 71943
// end ; end ;
71939: GO 71806
71941: POP
71942: POP
// end ;
71943: LD_VAR 0 4
71947: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71948: LD_INT 0
71950: PPUSH
71951: PPUSH
71952: PPUSH
// if not side or side > 8 then
71953: LD_VAR 0 1
71957: NOT
71958: IFTRUE 71970
71960: PUSH
71961: LD_VAR 0 1
71965: PUSH
71966: LD_INT 8
71968: GREATER
71969: OR
71970: IFFALSE 71974
// exit ;
71972: GO 72161
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71974: LD_ADDR_VAR 0 4
71978: PUSH
71979: LD_INT 22
71981: PUSH
71982: LD_VAR 0 1
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 21
71993: PUSH
71994: LD_INT 3
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PPUSH
72005: CALL_OW 69
72009: ST_TO_ADDR
// if not tmp then
72010: LD_VAR 0 4
72014: NOT
72015: IFFALSE 72019
// exit ;
72017: GO 72161
// enable_addtolog := true ;
72019: LD_ADDR_OWVAR 81
72023: PUSH
72024: LD_INT 1
72026: ST_TO_ADDR
// AddToLog ( [ ) ;
72027: LD_STRING [
72029: PPUSH
72030: CALL_OW 561
// for i in tmp do
72034: LD_ADDR_VAR 0 3
72038: PUSH
72039: LD_VAR 0 4
72043: PUSH
72044: FOR_IN
72045: IFFALSE 72152
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72047: LD_STRING [
72049: PUSH
72050: LD_VAR 0 3
72054: PPUSH
72055: CALL_OW 266
72059: STR
72060: PUSH
72061: LD_STRING , 
72063: STR
72064: PUSH
72065: LD_VAR 0 3
72069: PPUSH
72070: CALL_OW 250
72074: STR
72075: PUSH
72076: LD_STRING , 
72078: STR
72079: PUSH
72080: LD_VAR 0 3
72084: PPUSH
72085: CALL_OW 251
72089: STR
72090: PUSH
72091: LD_STRING , 
72093: STR
72094: PUSH
72095: LD_VAR 0 3
72099: PPUSH
72100: CALL_OW 254
72104: STR
72105: PUSH
72106: LD_STRING , 
72108: STR
72109: PUSH
72110: LD_VAR 0 3
72114: PPUSH
72115: LD_INT 1
72117: PPUSH
72118: CALL_OW 268
72122: STR
72123: PUSH
72124: LD_STRING , 
72126: STR
72127: PUSH
72128: LD_VAR 0 3
72132: PPUSH
72133: LD_INT 2
72135: PPUSH
72136: CALL_OW 268
72140: STR
72141: PUSH
72142: LD_STRING ],
72144: STR
72145: PPUSH
72146: CALL_OW 561
// end ;
72150: GO 72044
72152: POP
72153: POP
// AddToLog ( ]; ) ;
72154: LD_STRING ];
72156: PPUSH
72157: CALL_OW 561
// end ;
72161: LD_VAR 0 2
72165: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72166: LD_INT 0
72168: PPUSH
72169: PPUSH
72170: PPUSH
72171: PPUSH
72172: PPUSH
// if not area or not rate or not max then
72173: LD_VAR 0 1
72177: NOT
72178: IFTRUE 72187
72180: PUSH
72181: LD_VAR 0 2
72185: NOT
72186: OR
72187: IFTRUE 72196
72189: PUSH
72190: LD_VAR 0 4
72194: NOT
72195: OR
72196: IFFALSE 72200
// exit ;
72198: GO 72389
// while 1 do
72200: LD_INT 1
72202: IFFALSE 72389
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72204: LD_ADDR_VAR 0 9
72208: PUSH
72209: LD_VAR 0 1
72213: PPUSH
72214: LD_INT 1
72216: PPUSH
72217: CALL_OW 287
72221: PUSH
72222: LD_INT 10
72224: MUL
72225: ST_TO_ADDR
// r := rate / 10 ;
72226: LD_ADDR_VAR 0 7
72230: PUSH
72231: LD_VAR 0 2
72235: PUSH
72236: LD_INT 10
72238: DIVREAL
72239: ST_TO_ADDR
// time := 1 1$00 ;
72240: LD_ADDR_VAR 0 8
72244: PUSH
72245: LD_INT 2100
72247: ST_TO_ADDR
// if amount < min then
72248: LD_VAR 0 9
72252: PUSH
72253: LD_VAR 0 3
72257: LESS
72258: IFFALSE 72276
// r := r * 2 else
72260: LD_ADDR_VAR 0 7
72264: PUSH
72265: LD_VAR 0 7
72269: PUSH
72270: LD_INT 2
72272: MUL
72273: ST_TO_ADDR
72274: GO 72302
// if amount > max then
72276: LD_VAR 0 9
72280: PUSH
72281: LD_VAR 0 4
72285: GREATER
72286: IFFALSE 72302
// r := r / 2 ;
72288: LD_ADDR_VAR 0 7
72292: PUSH
72293: LD_VAR 0 7
72297: PUSH
72298: LD_INT 2
72300: DIVREAL
72301: ST_TO_ADDR
// time := time / r ;
72302: LD_ADDR_VAR 0 8
72306: PUSH
72307: LD_VAR 0 8
72311: PUSH
72312: LD_VAR 0 7
72316: DIVREAL
72317: ST_TO_ADDR
// if time < 0 then
72318: LD_VAR 0 8
72322: PUSH
72323: LD_INT 0
72325: LESS
72326: IFFALSE 72343
// time := time * - 1 ;
72328: LD_ADDR_VAR 0 8
72332: PUSH
72333: LD_VAR 0 8
72337: PUSH
72338: LD_INT 1
72340: NEG
72341: MUL
72342: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72343: LD_VAR 0 8
72347: PUSH
72348: LD_INT 35
72350: PPUSH
72351: LD_INT 875
72353: PPUSH
72354: CALL_OW 12
72358: PLUS
72359: PPUSH
72360: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72364: LD_INT 1
72366: PPUSH
72367: LD_INT 5
72369: PPUSH
72370: CALL_OW 12
72374: PPUSH
72375: LD_VAR 0 1
72379: PPUSH
72380: LD_INT 1
72382: PPUSH
72383: CALL_OW 55
// end ;
72387: GO 72200
// end ;
72389: LD_VAR 0 5
72393: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72394: LD_INT 0
72396: PPUSH
72397: PPUSH
72398: PPUSH
72399: PPUSH
72400: PPUSH
72401: PPUSH
72402: PPUSH
72403: PPUSH
// if not turrets or not factories then
72404: LD_VAR 0 1
72408: NOT
72409: IFTRUE 72418
72411: PUSH
72412: LD_VAR 0 2
72416: NOT
72417: OR
72418: IFFALSE 72422
// exit ;
72420: GO 72729
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72422: LD_ADDR_VAR 0 10
72426: PUSH
72427: LD_INT 5
72429: PUSH
72430: LD_INT 6
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 2
72439: PUSH
72440: LD_INT 4
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 3
72449: PUSH
72450: LD_INT 5
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 24
72464: PUSH
72465: LD_INT 25
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: LD_INT 23
72474: PUSH
72475: LD_INT 27
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 42
72488: PUSH
72489: LD_INT 43
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 44
72498: PUSH
72499: LD_INT 46
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 45
72508: PUSH
72509: LD_INT 47
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: LIST
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: LIST
72525: ST_TO_ADDR
// result := [ ] ;
72526: LD_ADDR_VAR 0 3
72530: PUSH
72531: EMPTY
72532: ST_TO_ADDR
// for i in turrets do
72533: LD_ADDR_VAR 0 4
72537: PUSH
72538: LD_VAR 0 1
72542: PUSH
72543: FOR_IN
72544: IFFALSE 72727
// begin nat := GetNation ( i ) ;
72546: LD_ADDR_VAR 0 7
72550: PUSH
72551: LD_VAR 0 4
72555: PPUSH
72556: CALL_OW 248
72560: ST_TO_ADDR
// weapon := 0 ;
72561: LD_ADDR_VAR 0 8
72565: PUSH
72566: LD_INT 0
72568: ST_TO_ADDR
// if not nat then
72569: LD_VAR 0 7
72573: NOT
72574: IFFALSE 72578
// continue ;
72576: GO 72543
// for j in list [ nat ] do
72578: LD_ADDR_VAR 0 5
72582: PUSH
72583: LD_VAR 0 10
72587: PUSH
72588: LD_VAR 0 7
72592: ARRAY
72593: PUSH
72594: FOR_IN
72595: IFFALSE 72636
// if GetBWeapon ( i ) = j [ 1 ] then
72597: LD_VAR 0 4
72601: PPUSH
72602: CALL_OW 269
72606: PUSH
72607: LD_VAR 0 5
72611: PUSH
72612: LD_INT 1
72614: ARRAY
72615: EQUAL
72616: IFFALSE 72634
// begin weapon := j [ 2 ] ;
72618: LD_ADDR_VAR 0 8
72622: PUSH
72623: LD_VAR 0 5
72627: PUSH
72628: LD_INT 2
72630: ARRAY
72631: ST_TO_ADDR
// break ;
72632: GO 72636
// end ;
72634: GO 72594
72636: POP
72637: POP
// if not weapon then
72638: LD_VAR 0 8
72642: NOT
72643: IFFALSE 72647
// continue ;
72645: GO 72543
// for k in factories do
72647: LD_ADDR_VAR 0 6
72651: PUSH
72652: LD_VAR 0 2
72656: PUSH
72657: FOR_IN
72658: IFFALSE 72723
// begin weapons := AvailableWeaponList ( k ) ;
72660: LD_ADDR_VAR 0 9
72664: PUSH
72665: LD_VAR 0 6
72669: PPUSH
72670: CALL_OW 478
72674: ST_TO_ADDR
// if not weapons then
72675: LD_VAR 0 9
72679: NOT
72680: IFFALSE 72684
// continue ;
72682: GO 72657
// if weapon in weapons then
72684: LD_VAR 0 8
72688: PUSH
72689: LD_VAR 0 9
72693: IN
72694: IFFALSE 72721
// begin result := [ i , weapon ] ;
72696: LD_ADDR_VAR 0 3
72700: PUSH
72701: LD_VAR 0 4
72705: PUSH
72706: LD_VAR 0 8
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: ST_TO_ADDR
// exit ;
72715: POP
72716: POP
72717: POP
72718: POP
72719: GO 72729
// end ; end ;
72721: GO 72657
72723: POP
72724: POP
// end ;
72725: GO 72543
72727: POP
72728: POP
// end ;
72729: LD_VAR 0 3
72733: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72734: LD_INT 0
72736: PPUSH
// if not side or side > 8 then
72737: LD_VAR 0 3
72741: NOT
72742: IFTRUE 72754
72744: PUSH
72745: LD_VAR 0 3
72749: PUSH
72750: LD_INT 8
72752: GREATER
72753: OR
72754: IFFALSE 72758
// exit ;
72756: GO 72817
// if not range then
72758: LD_VAR 0 4
72762: NOT
72763: IFFALSE 72774
// range := - 12 ;
72765: LD_ADDR_VAR 0 4
72769: PUSH
72770: LD_INT 12
72772: NEG
72773: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72774: LD_VAR 0 1
72778: PPUSH
72779: LD_VAR 0 2
72783: PPUSH
72784: LD_VAR 0 3
72788: PPUSH
72789: LD_VAR 0 4
72793: PPUSH
72794: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72798: LD_VAR 0 1
72802: PPUSH
72803: LD_VAR 0 2
72807: PPUSH
72808: LD_VAR 0 3
72812: PPUSH
72813: CALL_OW 331
// end ;
72817: LD_VAR 0 5
72821: RET
// export function Video ( mode ) ; begin
72822: LD_INT 0
72824: PPUSH
// ingame_video = mode ;
72825: LD_ADDR_OWVAR 52
72829: PUSH
72830: LD_VAR 0 1
72834: ST_TO_ADDR
// interface_hidden = mode ;
72835: LD_ADDR_OWVAR 54
72839: PUSH
72840: LD_VAR 0 1
72844: ST_TO_ADDR
// end ;
72845: LD_VAR 0 2
72849: RET
// export function Join ( array , element ) ; begin
72850: LD_INT 0
72852: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72853: LD_ADDR_VAR 0 3
72857: PUSH
72858: LD_VAR 0 1
72862: PPUSH
72863: LD_VAR 0 1
72867: PUSH
72868: LD_INT 1
72870: PLUS
72871: PPUSH
72872: LD_VAR 0 2
72876: PPUSH
72877: CALL_OW 1
72881: ST_TO_ADDR
// end ;
72882: LD_VAR 0 3
72886: RET
// export function JoinUnion ( array , element ) ; begin
72887: LD_INT 0
72889: PPUSH
// result := array union element ;
72890: LD_ADDR_VAR 0 3
72894: PUSH
72895: LD_VAR 0 1
72899: PUSH
72900: LD_VAR 0 2
72904: UNION
72905: ST_TO_ADDR
// end ;
72906: LD_VAR 0 3
72910: RET
// export function GetBehemoths ( side ) ; begin
72911: LD_INT 0
72913: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72914: LD_ADDR_VAR 0 2
72918: PUSH
72919: LD_INT 22
72921: PUSH
72922: LD_VAR 0 1
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 31
72933: PUSH
72934: LD_INT 25
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PPUSH
72945: CALL_OW 69
72949: ST_TO_ADDR
// end ;
72950: LD_VAR 0 2
72954: RET
// export function Shuffle ( array ) ; var i , index ; begin
72955: LD_INT 0
72957: PPUSH
72958: PPUSH
72959: PPUSH
// result := [ ] ;
72960: LD_ADDR_VAR 0 2
72964: PUSH
72965: EMPTY
72966: ST_TO_ADDR
// if not array then
72967: LD_VAR 0 1
72971: NOT
72972: IFFALSE 72976
// exit ;
72974: GO 73075
// Randomize ;
72976: CALL_OW 10
// for i = array downto 1 do
72980: LD_ADDR_VAR 0 3
72984: PUSH
72985: DOUBLE
72986: LD_VAR 0 1
72990: INC
72991: ST_TO_ADDR
72992: LD_INT 1
72994: PUSH
72995: FOR_DOWNTO
72996: IFFALSE 73073
// begin index := rand ( 1 , array ) ;
72998: LD_ADDR_VAR 0 4
73002: PUSH
73003: LD_INT 1
73005: PPUSH
73006: LD_VAR 0 1
73010: PPUSH
73011: CALL_OW 12
73015: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73016: LD_ADDR_VAR 0 2
73020: PUSH
73021: LD_VAR 0 2
73025: PPUSH
73026: LD_VAR 0 2
73030: PUSH
73031: LD_INT 1
73033: PLUS
73034: PPUSH
73035: LD_VAR 0 1
73039: PUSH
73040: LD_VAR 0 4
73044: ARRAY
73045: PPUSH
73046: CALL_OW 2
73050: ST_TO_ADDR
// array := Delete ( array , index ) ;
73051: LD_ADDR_VAR 0 1
73055: PUSH
73056: LD_VAR 0 1
73060: PPUSH
73061: LD_VAR 0 4
73065: PPUSH
73066: CALL_OW 3
73070: ST_TO_ADDR
// end ;
73071: GO 72995
73073: POP
73074: POP
// end ;
73075: LD_VAR 0 2
73079: RET
// export function GetBaseMaterials ( base ) ; begin
73080: LD_INT 0
73082: PPUSH
// result := [ 0 , 0 , 0 ] ;
73083: LD_ADDR_VAR 0 2
73087: PUSH
73088: LD_INT 0
73090: PUSH
73091: LD_INT 0
73093: PUSH
73094: LD_INT 0
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: LIST
73101: ST_TO_ADDR
// if not base then
73102: LD_VAR 0 1
73106: NOT
73107: IFFALSE 73111
// exit ;
73109: GO 73160
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73111: LD_ADDR_VAR 0 2
73115: PUSH
73116: LD_VAR 0 1
73120: PPUSH
73121: LD_INT 1
73123: PPUSH
73124: CALL_OW 275
73128: PUSH
73129: LD_VAR 0 1
73133: PPUSH
73134: LD_INT 2
73136: PPUSH
73137: CALL_OW 275
73141: PUSH
73142: LD_VAR 0 1
73146: PPUSH
73147: LD_INT 3
73149: PPUSH
73150: CALL_OW 275
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: LIST
73159: ST_TO_ADDR
// end ;
73160: LD_VAR 0 2
73164: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73165: LD_INT 0
73167: PPUSH
73168: PPUSH
// result := array ;
73169: LD_ADDR_VAR 0 3
73173: PUSH
73174: LD_VAR 0 1
73178: ST_TO_ADDR
// if size >= result then
73179: LD_VAR 0 2
73183: PUSH
73184: LD_VAR 0 3
73188: GREATEREQUAL
73189: IFFALSE 73193
// exit ;
73191: GO 73243
// if size then
73193: LD_VAR 0 2
73197: IFFALSE 73243
// for i := array downto size do
73199: LD_ADDR_VAR 0 4
73203: PUSH
73204: DOUBLE
73205: LD_VAR 0 1
73209: INC
73210: ST_TO_ADDR
73211: LD_VAR 0 2
73215: PUSH
73216: FOR_DOWNTO
73217: IFFALSE 73241
// result := Delete ( result , result ) ;
73219: LD_ADDR_VAR 0 3
73223: PUSH
73224: LD_VAR 0 3
73228: PPUSH
73229: LD_VAR 0 3
73233: PPUSH
73234: CALL_OW 3
73238: ST_TO_ADDR
73239: GO 73216
73241: POP
73242: POP
// end ;
73243: LD_VAR 0 3
73247: RET
// export function ComExit ( unit ) ; var tmp ; begin
73248: LD_INT 0
73250: PPUSH
73251: PPUSH
// if not IsInUnit ( unit ) then
73252: LD_VAR 0 1
73256: PPUSH
73257: CALL_OW 310
73261: NOT
73262: IFFALSE 73266
// exit ;
73264: GO 73326
// tmp := IsInUnit ( unit ) ;
73266: LD_ADDR_VAR 0 3
73270: PUSH
73271: LD_VAR 0 1
73275: PPUSH
73276: CALL_OW 310
73280: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73281: LD_VAR 0 3
73285: PPUSH
73286: CALL_OW 247
73290: PUSH
73291: LD_INT 2
73293: EQUAL
73294: IFFALSE 73307
// ComExitVehicle ( unit ) else
73296: LD_VAR 0 1
73300: PPUSH
73301: CALL_OW 121
73305: GO 73316
// ComExitBuilding ( unit ) ;
73307: LD_VAR 0 1
73311: PPUSH
73312: CALL_OW 122
// result := tmp ;
73316: LD_ADDR_VAR 0 2
73320: PUSH
73321: LD_VAR 0 3
73325: ST_TO_ADDR
// end ;
73326: LD_VAR 0 2
73330: RET
// export function ComExitAll ( units ) ; var i ; begin
73331: LD_INT 0
73333: PPUSH
73334: PPUSH
// if not units then
73335: LD_VAR 0 1
73339: NOT
73340: IFFALSE 73344
// exit ;
73342: GO 73370
// for i in units do
73344: LD_ADDR_VAR 0 3
73348: PUSH
73349: LD_VAR 0 1
73353: PUSH
73354: FOR_IN
73355: IFFALSE 73368
// ComExit ( i ) ;
73357: LD_VAR 0 3
73361: PPUSH
73362: CALL 73248 0 1
73366: GO 73354
73368: POP
73369: POP
// end ;
73370: LD_VAR 0 2
73374: RET
// export function ResetHc ; begin
73375: LD_INT 0
73377: PPUSH
// InitHc ;
73378: CALL_OW 19
// hc_importance := 0 ;
73382: LD_ADDR_OWVAR 32
73386: PUSH
73387: LD_INT 0
73389: ST_TO_ADDR
// end ;
73390: LD_VAR 0 1
73394: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73395: LD_INT 0
73397: PPUSH
73398: PPUSH
73399: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73400: LD_ADDR_VAR 0 6
73404: PUSH
73405: LD_VAR 0 1
73409: PUSH
73410: LD_VAR 0 3
73414: PLUS
73415: PUSH
73416: LD_INT 2
73418: DIV
73419: ST_TO_ADDR
// if _x < 0 then
73420: LD_VAR 0 6
73424: PUSH
73425: LD_INT 0
73427: LESS
73428: IFFALSE 73445
// _x := _x * - 1 ;
73430: LD_ADDR_VAR 0 6
73434: PUSH
73435: LD_VAR 0 6
73439: PUSH
73440: LD_INT 1
73442: NEG
73443: MUL
73444: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73445: LD_ADDR_VAR 0 7
73449: PUSH
73450: LD_VAR 0 2
73454: PUSH
73455: LD_VAR 0 4
73459: PLUS
73460: PUSH
73461: LD_INT 2
73463: DIV
73464: ST_TO_ADDR
// if _y < 0 then
73465: LD_VAR 0 7
73469: PUSH
73470: LD_INT 0
73472: LESS
73473: IFFALSE 73490
// _y := _y * - 1 ;
73475: LD_ADDR_VAR 0 7
73479: PUSH
73480: LD_VAR 0 7
73484: PUSH
73485: LD_INT 1
73487: NEG
73488: MUL
73489: ST_TO_ADDR
// result := [ _x , _y ] ;
73490: LD_ADDR_VAR 0 5
73494: PUSH
73495: LD_VAR 0 6
73499: PUSH
73500: LD_VAR 0 7
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: ST_TO_ADDR
// end ;
73509: LD_VAR 0 5
73513: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73514: LD_INT 0
73516: PPUSH
73517: PPUSH
73518: PPUSH
73519: PPUSH
// task := GetTaskList ( unit ) ;
73520: LD_ADDR_VAR 0 7
73524: PUSH
73525: LD_VAR 0 1
73529: PPUSH
73530: CALL_OW 437
73534: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73535: LD_VAR 0 7
73539: NOT
73540: IFFALSE 73559
73542: PUSH
73543: LD_VAR 0 1
73547: PPUSH
73548: LD_VAR 0 2
73552: PPUSH
73553: CALL_OW 308
73557: NOT
73558: AND
73559: IFFALSE 73563
// exit ;
73561: GO 73681
// if IsInArea ( unit , area ) then
73563: LD_VAR 0 1
73567: PPUSH
73568: LD_VAR 0 2
73572: PPUSH
73573: CALL_OW 308
73577: IFFALSE 73595
// begin ComMoveToArea ( unit , goAway ) ;
73579: LD_VAR 0 1
73583: PPUSH
73584: LD_VAR 0 3
73588: PPUSH
73589: CALL_OW 113
// exit ;
73593: GO 73681
// end ; if task [ 1 ] [ 1 ] <> M then
73595: LD_VAR 0 7
73599: PUSH
73600: LD_INT 1
73602: ARRAY
73603: PUSH
73604: LD_INT 1
73606: ARRAY
73607: PUSH
73608: LD_STRING M
73610: NONEQUAL
73611: IFFALSE 73615
// exit ;
73613: GO 73681
// x := task [ 1 ] [ 2 ] ;
73615: LD_ADDR_VAR 0 5
73619: PUSH
73620: LD_VAR 0 7
73624: PUSH
73625: LD_INT 1
73627: ARRAY
73628: PUSH
73629: LD_INT 2
73631: ARRAY
73632: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73633: LD_ADDR_VAR 0 6
73637: PUSH
73638: LD_VAR 0 7
73642: PUSH
73643: LD_INT 1
73645: ARRAY
73646: PUSH
73647: LD_INT 3
73649: ARRAY
73650: ST_TO_ADDR
// if InArea ( x , y , area ) then
73651: LD_VAR 0 5
73655: PPUSH
73656: LD_VAR 0 6
73660: PPUSH
73661: LD_VAR 0 2
73665: PPUSH
73666: CALL_OW 309
73670: IFFALSE 73681
// ComStop ( unit ) ;
73672: LD_VAR 0 1
73676: PPUSH
73677: CALL_OW 141
// end ;
73681: LD_VAR 0 4
73685: RET
// export function Abs ( value ) ; begin
73686: LD_INT 0
73688: PPUSH
// result := value ;
73689: LD_ADDR_VAR 0 2
73693: PUSH
73694: LD_VAR 0 1
73698: ST_TO_ADDR
// if value < 0 then
73699: LD_VAR 0 1
73703: PUSH
73704: LD_INT 0
73706: LESS
73707: IFFALSE 73724
// result := value * - 1 ;
73709: LD_ADDR_VAR 0 2
73713: PUSH
73714: LD_VAR 0 1
73718: PUSH
73719: LD_INT 1
73721: NEG
73722: MUL
73723: ST_TO_ADDR
// end ;
73724: LD_VAR 0 2
73728: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73729: LD_INT 0
73731: PPUSH
73732: PPUSH
73733: PPUSH
73734: PPUSH
73735: PPUSH
73736: PPUSH
73737: PPUSH
73738: PPUSH
// if not unit or not building then
73739: LD_VAR 0 1
73743: NOT
73744: IFTRUE 73753
73746: PUSH
73747: LD_VAR 0 2
73751: NOT
73752: OR
73753: IFFALSE 73757
// exit ;
73755: GO 73985
// x := GetX ( building ) ;
73757: LD_ADDR_VAR 0 4
73761: PUSH
73762: LD_VAR 0 2
73766: PPUSH
73767: CALL_OW 250
73771: ST_TO_ADDR
// y := GetY ( building ) ;
73772: LD_ADDR_VAR 0 6
73776: PUSH
73777: LD_VAR 0 2
73781: PPUSH
73782: CALL_OW 251
73786: ST_TO_ADDR
// d := GetDir ( building ) ;
73787: LD_ADDR_VAR 0 8
73791: PUSH
73792: LD_VAR 0 2
73796: PPUSH
73797: CALL_OW 254
73801: ST_TO_ADDR
// r := 4 ;
73802: LD_ADDR_VAR 0 9
73806: PUSH
73807: LD_INT 4
73809: ST_TO_ADDR
// for i := 1 to 5 do
73810: LD_ADDR_VAR 0 10
73814: PUSH
73815: DOUBLE
73816: LD_INT 1
73818: DEC
73819: ST_TO_ADDR
73820: LD_INT 5
73822: PUSH
73823: FOR_TO
73824: IFFALSE 73983
// begin _x := ShiftX ( x , d , r + i ) ;
73826: LD_ADDR_VAR 0 5
73830: PUSH
73831: LD_VAR 0 4
73835: PPUSH
73836: LD_VAR 0 8
73840: PPUSH
73841: LD_VAR 0 9
73845: PUSH
73846: LD_VAR 0 10
73850: PLUS
73851: PPUSH
73852: CALL_OW 272
73856: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73857: LD_ADDR_VAR 0 7
73861: PUSH
73862: LD_VAR 0 6
73866: PPUSH
73867: LD_VAR 0 8
73871: PPUSH
73872: LD_VAR 0 9
73876: PUSH
73877: LD_VAR 0 10
73881: PLUS
73882: PPUSH
73883: CALL_OW 273
73887: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73888: LD_VAR 0 5
73892: PPUSH
73893: LD_VAR 0 7
73897: PPUSH
73898: CALL_OW 488
73902: IFFALSE 73937
73904: PUSH
73905: LD_VAR 0 5
73909: PPUSH
73910: LD_VAR 0 7
73914: PPUSH
73915: CALL_OW 428
73919: PPUSH
73920: CALL_OW 247
73924: PUSH
73925: LD_INT 3
73927: PUSH
73928: LD_INT 2
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: IN
73935: NOT
73936: AND
73937: IFFALSE 73981
// begin ComMoveXY ( unit , _x , _y ) ;
73939: LD_VAR 0 1
73943: PPUSH
73944: LD_VAR 0 5
73948: PPUSH
73949: LD_VAR 0 7
73953: PPUSH
73954: CALL_OW 111
// result := [ _x , _y ] ;
73958: LD_ADDR_VAR 0 3
73962: PUSH
73963: LD_VAR 0 5
73967: PUSH
73968: LD_VAR 0 7
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: ST_TO_ADDR
// exit ;
73977: POP
73978: POP
73979: GO 73985
// end ; end ;
73981: GO 73823
73983: POP
73984: POP
// end ;
73985: LD_VAR 0 3
73989: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73990: LD_INT 0
73992: PPUSH
73993: PPUSH
73994: PPUSH
// result := 0 ;
73995: LD_ADDR_VAR 0 3
73999: PUSH
74000: LD_INT 0
74002: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74003: LD_VAR 0 1
74007: PUSH
74008: LD_INT 0
74010: LESS
74011: IFTRUE 74023
74013: PUSH
74014: LD_VAR 0 1
74018: PUSH
74019: LD_INT 8
74021: GREATER
74022: OR
74023: IFTRUE 74035
74025: PUSH
74026: LD_VAR 0 2
74030: PUSH
74031: LD_INT 0
74033: LESS
74034: OR
74035: IFTRUE 74047
74037: PUSH
74038: LD_VAR 0 2
74042: PUSH
74043: LD_INT 8
74045: GREATER
74046: OR
74047: IFFALSE 74051
// exit ;
74049: GO 74126
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74051: LD_ADDR_VAR 0 4
74055: PUSH
74056: LD_INT 22
74058: PUSH
74059: LD_VAR 0 2
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PPUSH
74068: CALL_OW 69
74072: PUSH
74073: FOR_IN
74074: IFFALSE 74124
// begin un := UnitShoot ( i ) ;
74076: LD_ADDR_VAR 0 5
74080: PUSH
74081: LD_VAR 0 4
74085: PPUSH
74086: CALL_OW 504
74090: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74091: LD_VAR 0 5
74095: PPUSH
74096: CALL_OW 255
74100: PUSH
74101: LD_VAR 0 1
74105: EQUAL
74106: IFFALSE 74122
// begin result := un ;
74108: LD_ADDR_VAR 0 3
74112: PUSH
74113: LD_VAR 0 5
74117: ST_TO_ADDR
// exit ;
74118: POP
74119: POP
74120: GO 74126
// end ; end ;
74122: GO 74073
74124: POP
74125: POP
// end ;
74126: LD_VAR 0 3
74130: RET
// export function GetCargoBay ( units ) ; begin
74131: LD_INT 0
74133: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74134: LD_ADDR_VAR 0 2
74138: PUSH
74139: LD_VAR 0 1
74143: PPUSH
74144: LD_INT 2
74146: PUSH
74147: LD_INT 34
74149: PUSH
74150: LD_INT 12
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 34
74159: PUSH
74160: LD_INT 51
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 34
74169: PUSH
74170: LD_INT 32
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: LD_INT 34
74179: PUSH
74180: LD_INT 89
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: LIST
74193: PPUSH
74194: CALL_OW 72
74198: ST_TO_ADDR
// end ;
74199: LD_VAR 0 2
74203: RET
// export function Negate ( value ) ; begin
74204: LD_INT 0
74206: PPUSH
// result := not value ;
74207: LD_ADDR_VAR 0 2
74211: PUSH
74212: LD_VAR 0 1
74216: NOT
74217: ST_TO_ADDR
// end ;
74218: LD_VAR 0 2
74222: RET
// export function Inc ( value ) ; begin
74223: LD_INT 0
74225: PPUSH
// result := value + 1 ;
74226: LD_ADDR_VAR 0 2
74230: PUSH
74231: LD_VAR 0 1
74235: PUSH
74236: LD_INT 1
74238: PLUS
74239: ST_TO_ADDR
// end ;
74240: LD_VAR 0 2
74244: RET
// export function Dec ( value ) ; begin
74245: LD_INT 0
74247: PPUSH
// result := value - 1 ;
74248: LD_ADDR_VAR 0 2
74252: PUSH
74253: LD_VAR 0 1
74257: PUSH
74258: LD_INT 1
74260: MINUS
74261: ST_TO_ADDR
// end ;
74262: LD_VAR 0 2
74266: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74267: LD_INT 0
74269: PPUSH
74270: PPUSH
74271: PPUSH
74272: PPUSH
74273: PPUSH
74274: PPUSH
74275: PPUSH
74276: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74277: LD_VAR 0 1
74281: PPUSH
74282: LD_VAR 0 2
74286: PPUSH
74287: CALL_OW 488
74291: NOT
74292: IFTRUE 74311
74294: PUSH
74295: LD_VAR 0 3
74299: PPUSH
74300: LD_VAR 0 4
74304: PPUSH
74305: CALL_OW 488
74309: NOT
74310: OR
74311: IFFALSE 74324
// begin result := - 1 ;
74313: LD_ADDR_VAR 0 5
74317: PUSH
74318: LD_INT 1
74320: NEG
74321: ST_TO_ADDR
// exit ;
74322: GO 74559
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74324: LD_ADDR_VAR 0 12
74328: PUSH
74329: LD_VAR 0 1
74333: PPUSH
74334: LD_VAR 0 2
74338: PPUSH
74339: LD_VAR 0 3
74343: PPUSH
74344: LD_VAR 0 4
74348: PPUSH
74349: CALL 73395 0 4
74353: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74354: LD_ADDR_VAR 0 11
74358: PUSH
74359: LD_VAR 0 1
74363: PPUSH
74364: LD_VAR 0 2
74368: PPUSH
74369: LD_VAR 0 12
74373: PUSH
74374: LD_INT 1
74376: ARRAY
74377: PPUSH
74378: LD_VAR 0 12
74382: PUSH
74383: LD_INT 2
74385: ARRAY
74386: PPUSH
74387: CALL_OW 298
74391: ST_TO_ADDR
// distance := 9999 ;
74392: LD_ADDR_VAR 0 10
74396: PUSH
74397: LD_INT 9999
74399: ST_TO_ADDR
// for i := 0 to 5 do
74400: LD_ADDR_VAR 0 6
74404: PUSH
74405: DOUBLE
74406: LD_INT 0
74408: DEC
74409: ST_TO_ADDR
74410: LD_INT 5
74412: PUSH
74413: FOR_TO
74414: IFFALSE 74557
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74416: LD_ADDR_VAR 0 7
74420: PUSH
74421: LD_VAR 0 1
74425: PPUSH
74426: LD_VAR 0 6
74430: PPUSH
74431: LD_VAR 0 11
74435: PPUSH
74436: CALL_OW 272
74440: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74441: LD_ADDR_VAR 0 8
74445: PUSH
74446: LD_VAR 0 2
74450: PPUSH
74451: LD_VAR 0 6
74455: PPUSH
74456: LD_VAR 0 11
74460: PPUSH
74461: CALL_OW 273
74465: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74466: LD_VAR 0 7
74470: PPUSH
74471: LD_VAR 0 8
74475: PPUSH
74476: CALL_OW 488
74480: NOT
74481: IFFALSE 74485
// continue ;
74483: GO 74413
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74485: LD_ADDR_VAR 0 9
74489: PUSH
74490: LD_VAR 0 12
74494: PUSH
74495: LD_INT 1
74497: ARRAY
74498: PPUSH
74499: LD_VAR 0 12
74503: PUSH
74504: LD_INT 2
74506: ARRAY
74507: PPUSH
74508: LD_VAR 0 7
74512: PPUSH
74513: LD_VAR 0 8
74517: PPUSH
74518: CALL_OW 298
74522: ST_TO_ADDR
// if tmp < distance then
74523: LD_VAR 0 9
74527: PUSH
74528: LD_VAR 0 10
74532: LESS
74533: IFFALSE 74555
// begin result := i ;
74535: LD_ADDR_VAR 0 5
74539: PUSH
74540: LD_VAR 0 6
74544: ST_TO_ADDR
// distance := tmp ;
74545: LD_ADDR_VAR 0 10
74549: PUSH
74550: LD_VAR 0 9
74554: ST_TO_ADDR
// end ; end ;
74555: GO 74413
74557: POP
74558: POP
// end ;
74559: LD_VAR 0 5
74563: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74564: LD_INT 0
74566: PPUSH
74567: PPUSH
// if not driver or not IsInUnit ( driver ) then
74568: LD_VAR 0 1
74572: NOT
74573: IFTRUE 74587
74575: PUSH
74576: LD_VAR 0 1
74580: PPUSH
74581: CALL_OW 310
74585: NOT
74586: OR
74587: IFFALSE 74591
// exit ;
74589: GO 74681
// vehicle := IsInUnit ( driver ) ;
74591: LD_ADDR_VAR 0 3
74595: PUSH
74596: LD_VAR 0 1
74600: PPUSH
74601: CALL_OW 310
74605: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74606: LD_VAR 0 1
74610: PPUSH
74611: LD_STRING \
74613: PUSH
74614: LD_INT 0
74616: PUSH
74617: LD_INT 0
74619: PUSH
74620: LD_INT 0
74622: PUSH
74623: LD_INT 0
74625: PUSH
74626: LD_INT 0
74628: PUSH
74629: LD_INT 0
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: PUSH
74641: LD_STRING E
74643: PUSH
74644: LD_INT 0
74646: PUSH
74647: LD_INT 0
74649: PUSH
74650: LD_VAR 0 3
74654: PUSH
74655: LD_INT 0
74657: PUSH
74658: LD_INT 0
74660: PUSH
74661: LD_INT 0
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: PUSH
74673: EMPTY
74674: LIST
74675: LIST
74676: PPUSH
74677: CALL_OW 446
// end ;
74681: LD_VAR 0 2
74685: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74686: LD_INT 0
74688: PPUSH
74689: PPUSH
// if not driver or not IsInUnit ( driver ) then
74690: LD_VAR 0 1
74694: NOT
74695: IFTRUE 74709
74697: PUSH
74698: LD_VAR 0 1
74702: PPUSH
74703: CALL_OW 310
74707: NOT
74708: OR
74709: IFFALSE 74713
// exit ;
74711: GO 74803
// vehicle := IsInUnit ( driver ) ;
74713: LD_ADDR_VAR 0 3
74717: PUSH
74718: LD_VAR 0 1
74722: PPUSH
74723: CALL_OW 310
74727: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74728: LD_VAR 0 1
74732: PPUSH
74733: LD_STRING \
74735: PUSH
74736: LD_INT 0
74738: PUSH
74739: LD_INT 0
74741: PUSH
74742: LD_INT 0
74744: PUSH
74745: LD_INT 0
74747: PUSH
74748: LD_INT 0
74750: PUSH
74751: LD_INT 0
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: PUSH
74763: LD_STRING E
74765: PUSH
74766: LD_INT 0
74768: PUSH
74769: LD_INT 0
74771: PUSH
74772: LD_VAR 0 3
74776: PUSH
74777: LD_INT 0
74779: PUSH
74780: LD_INT 0
74782: PUSH
74783: LD_INT 0
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: PPUSH
74799: CALL_OW 447
// end ;
74803: LD_VAR 0 2
74807: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74808: LD_INT 0
74810: PPUSH
74811: PPUSH
74812: PPUSH
// tmp := [ ] ;
74813: LD_ADDR_VAR 0 5
74817: PUSH
74818: EMPTY
74819: ST_TO_ADDR
// for i in units do
74820: LD_ADDR_VAR 0 4
74824: PUSH
74825: LD_VAR 0 1
74829: PUSH
74830: FOR_IN
74831: IFFALSE 74869
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74833: LD_ADDR_VAR 0 5
74837: PUSH
74838: LD_VAR 0 5
74842: PPUSH
74843: LD_VAR 0 5
74847: PUSH
74848: LD_INT 1
74850: PLUS
74851: PPUSH
74852: LD_VAR 0 4
74856: PPUSH
74857: CALL_OW 256
74861: PPUSH
74862: CALL_OW 2
74866: ST_TO_ADDR
74867: GO 74830
74869: POP
74870: POP
// if not tmp then
74871: LD_VAR 0 5
74875: NOT
74876: IFFALSE 74880
// exit ;
74878: GO 74928
// if asc then
74880: LD_VAR 0 2
74884: IFFALSE 74908
// result := SortListByListAsc ( units , tmp ) else
74886: LD_ADDR_VAR 0 3
74890: PUSH
74891: LD_VAR 0 1
74895: PPUSH
74896: LD_VAR 0 5
74900: PPUSH
74901: CALL_OW 76
74905: ST_TO_ADDR
74906: GO 74928
// result := SortListByListDesc ( units , tmp ) ;
74908: LD_ADDR_VAR 0 3
74912: PUSH
74913: LD_VAR 0 1
74917: PPUSH
74918: LD_VAR 0 5
74922: PPUSH
74923: CALL_OW 77
74927: ST_TO_ADDR
// end ;
74928: LD_VAR 0 3
74932: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74933: LD_INT 0
74935: PPUSH
74936: PPUSH
// task := GetTaskList ( mech ) ;
74937: LD_ADDR_VAR 0 4
74941: PUSH
74942: LD_VAR 0 1
74946: PPUSH
74947: CALL_OW 437
74951: ST_TO_ADDR
// if not task then
74952: LD_VAR 0 4
74956: NOT
74957: IFFALSE 74961
// exit ;
74959: GO 75005
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74961: LD_ADDR_VAR 0 3
74965: PUSH
74966: LD_VAR 0 4
74970: PUSH
74971: LD_INT 1
74973: ARRAY
74974: PUSH
74975: LD_INT 1
74977: ARRAY
74978: PUSH
74979: LD_STRING r
74981: EQUAL
74982: IFFALSE 75004
74984: PUSH
74985: LD_VAR 0 4
74989: PUSH
74990: LD_INT 1
74992: ARRAY
74993: PUSH
74994: LD_INT 4
74996: ARRAY
74997: PUSH
74998: LD_VAR 0 2
75002: EQUAL
75003: AND
75004: ST_TO_ADDR
// end ;
75005: LD_VAR 0 3
75009: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75010: LD_INT 0
75012: PPUSH
// SetDir ( unit , d ) ;
75013: LD_VAR 0 1
75017: PPUSH
75018: LD_VAR 0 4
75022: PPUSH
75023: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
75027: LD_ADDR_VAR 0 6
75031: PUSH
75032: LD_VAR 0 1
75036: PPUSH
75037: LD_VAR 0 2
75041: PPUSH
75042: LD_VAR 0 3
75046: PPUSH
75047: LD_VAR 0 5
75051: PPUSH
75052: CALL_OW 48
75056: ST_TO_ADDR
// end ;
75057: LD_VAR 0 6
75061: RET
// export function ToNaturalNumber ( number ) ; begin
75062: LD_INT 0
75064: PPUSH
// result := number div 1 ;
75065: LD_ADDR_VAR 0 2
75069: PUSH
75070: LD_VAR 0 1
75074: PUSH
75075: LD_INT 1
75077: DIV
75078: ST_TO_ADDR
// if number < 0 then
75079: LD_VAR 0 1
75083: PUSH
75084: LD_INT 0
75086: LESS
75087: IFFALSE 75097
// result := 0 ;
75089: LD_ADDR_VAR 0 2
75093: PUSH
75094: LD_INT 0
75096: ST_TO_ADDR
// end ;
75097: LD_VAR 0 2
75101: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
75102: LD_INT 0
75104: PPUSH
75105: PPUSH
75106: PPUSH
// if not buildings then
75107: LD_VAR 0 1
75111: NOT
75112: IFFALSE 75116
// exit ;
75114: GO 75231
// tmp := [ ] ;
75116: LD_ADDR_VAR 0 5
75120: PUSH
75121: EMPTY
75122: ST_TO_ADDR
// for b in buildings do
75123: LD_ADDR_VAR 0 4
75127: PUSH
75128: LD_VAR 0 1
75132: PUSH
75133: FOR_IN
75134: IFFALSE 75172
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
75136: LD_ADDR_VAR 0 5
75140: PUSH
75141: LD_VAR 0 5
75145: PPUSH
75146: LD_VAR 0 5
75150: PUSH
75151: LD_INT 1
75153: PLUS
75154: PPUSH
75155: LD_VAR 0 4
75159: PPUSH
75160: CALL_OW 266
75164: PPUSH
75165: CALL_OW 1
75169: ST_TO_ADDR
75170: GO 75133
75172: POP
75173: POP
// if not tmp then
75174: LD_VAR 0 5
75178: NOT
75179: IFFALSE 75183
// exit ;
75181: GO 75231
// if asc then
75183: LD_VAR 0 2
75187: IFFALSE 75211
// result := SortListByListAsc ( buildings , tmp ) else
75189: LD_ADDR_VAR 0 3
75193: PUSH
75194: LD_VAR 0 1
75198: PPUSH
75199: LD_VAR 0 5
75203: PPUSH
75204: CALL_OW 76
75208: ST_TO_ADDR
75209: GO 75231
// result := SortListByListDesc ( buildings , tmp ) ;
75211: LD_ADDR_VAR 0 3
75215: PUSH
75216: LD_VAR 0 1
75220: PPUSH
75221: LD_VAR 0 5
75225: PPUSH
75226: CALL_OW 77
75230: ST_TO_ADDR
// end ;
75231: LD_VAR 0 3
75235: RET
// export function SortByClass ( units , class ) ; var un ; begin
75236: LD_INT 0
75238: PPUSH
75239: PPUSH
// if not units or not class then
75240: LD_VAR 0 1
75244: NOT
75245: IFTRUE 75254
75247: PUSH
75248: LD_VAR 0 2
75252: NOT
75253: OR
75254: IFFALSE 75258
// exit ;
75256: GO 75353
// result := [ ] ;
75258: LD_ADDR_VAR 0 3
75262: PUSH
75263: EMPTY
75264: ST_TO_ADDR
// for un in units do
75265: LD_ADDR_VAR 0 4
75269: PUSH
75270: LD_VAR 0 1
75274: PUSH
75275: FOR_IN
75276: IFFALSE 75351
// if GetClass ( un ) = class then
75278: LD_VAR 0 4
75282: PPUSH
75283: CALL_OW 257
75287: PUSH
75288: LD_VAR 0 2
75292: EQUAL
75293: IFFALSE 75320
// result := Insert ( result , 1 , un ) else
75295: LD_ADDR_VAR 0 3
75299: PUSH
75300: LD_VAR 0 3
75304: PPUSH
75305: LD_INT 1
75307: PPUSH
75308: LD_VAR 0 4
75312: PPUSH
75313: CALL_OW 2
75317: ST_TO_ADDR
75318: GO 75349
// result := Replace ( result , result + 1 , un ) ;
75320: LD_ADDR_VAR 0 3
75324: PUSH
75325: LD_VAR 0 3
75329: PPUSH
75330: LD_VAR 0 3
75334: PUSH
75335: LD_INT 1
75337: PLUS
75338: PPUSH
75339: LD_VAR 0 4
75343: PPUSH
75344: CALL_OW 1
75348: ST_TO_ADDR
75349: GO 75275
75351: POP
75352: POP
// end ;
75353: LD_VAR 0 3
75357: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75358: LD_INT 0
75360: PPUSH
75361: PPUSH
75362: PPUSH
75363: PPUSH
75364: PPUSH
75365: PPUSH
75366: PPUSH
// result := [ ] ;
75367: LD_ADDR_VAR 0 4
75371: PUSH
75372: EMPTY
75373: ST_TO_ADDR
// if x - r < 0 then
75374: LD_VAR 0 1
75378: PUSH
75379: LD_VAR 0 3
75383: MINUS
75384: PUSH
75385: LD_INT 0
75387: LESS
75388: IFFALSE 75400
// min_x := 0 else
75390: LD_ADDR_VAR 0 8
75394: PUSH
75395: LD_INT 0
75397: ST_TO_ADDR
75398: GO 75416
// min_x := x - r ;
75400: LD_ADDR_VAR 0 8
75404: PUSH
75405: LD_VAR 0 1
75409: PUSH
75410: LD_VAR 0 3
75414: MINUS
75415: ST_TO_ADDR
// if y - r < 0 then
75416: LD_VAR 0 2
75420: PUSH
75421: LD_VAR 0 3
75425: MINUS
75426: PUSH
75427: LD_INT 0
75429: LESS
75430: IFFALSE 75442
// min_y := 0 else
75432: LD_ADDR_VAR 0 7
75436: PUSH
75437: LD_INT 0
75439: ST_TO_ADDR
75440: GO 75458
// min_y := y - r ;
75442: LD_ADDR_VAR 0 7
75446: PUSH
75447: LD_VAR 0 2
75451: PUSH
75452: LD_VAR 0 3
75456: MINUS
75457: ST_TO_ADDR
// max_x := x + r ;
75458: LD_ADDR_VAR 0 9
75462: PUSH
75463: LD_VAR 0 1
75467: PUSH
75468: LD_VAR 0 3
75472: PLUS
75473: ST_TO_ADDR
// max_y := y + r ;
75474: LD_ADDR_VAR 0 10
75478: PUSH
75479: LD_VAR 0 2
75483: PUSH
75484: LD_VAR 0 3
75488: PLUS
75489: ST_TO_ADDR
// for _x = min_x to max_x do
75490: LD_ADDR_VAR 0 5
75494: PUSH
75495: DOUBLE
75496: LD_VAR 0 8
75500: DEC
75501: ST_TO_ADDR
75502: LD_VAR 0 9
75506: PUSH
75507: FOR_TO
75508: IFFALSE 75609
// for _y = min_y to max_y do
75510: LD_ADDR_VAR 0 6
75514: PUSH
75515: DOUBLE
75516: LD_VAR 0 7
75520: DEC
75521: ST_TO_ADDR
75522: LD_VAR 0 10
75526: PUSH
75527: FOR_TO
75528: IFFALSE 75605
// begin if not ValidHex ( _x , _y ) then
75530: LD_VAR 0 5
75534: PPUSH
75535: LD_VAR 0 6
75539: PPUSH
75540: CALL_OW 488
75544: NOT
75545: IFFALSE 75549
// continue ;
75547: GO 75527
// if GetResourceTypeXY ( _x , _y ) then
75549: LD_VAR 0 5
75553: PPUSH
75554: LD_VAR 0 6
75558: PPUSH
75559: CALL_OW 283
75563: IFFALSE 75603
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75565: LD_ADDR_VAR 0 4
75569: PUSH
75570: LD_VAR 0 4
75574: PPUSH
75575: LD_VAR 0 4
75579: PUSH
75580: LD_INT 1
75582: PLUS
75583: PPUSH
75584: LD_VAR 0 5
75588: PUSH
75589: LD_VAR 0 6
75593: PUSH
75594: EMPTY
75595: LIST
75596: LIST
75597: PPUSH
75598: CALL_OW 1
75602: ST_TO_ADDR
// end ;
75603: GO 75527
75605: POP
75606: POP
75607: GO 75507
75609: POP
75610: POP
// end ;
75611: LD_VAR 0 4
75615: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75616: LD_INT 0
75618: PPUSH
75619: PPUSH
75620: PPUSH
75621: PPUSH
75622: PPUSH
75623: PPUSH
75624: PPUSH
75625: PPUSH
// if not units then
75626: LD_VAR 0 1
75630: NOT
75631: IFFALSE 75635
// exit ;
75633: GO 76167
// result := UnitFilter ( units , [ f_ok ] ) ;
75635: LD_ADDR_VAR 0 3
75639: PUSH
75640: LD_VAR 0 1
75644: PPUSH
75645: LD_INT 50
75647: PUSH
75648: EMPTY
75649: LIST
75650: PPUSH
75651: CALL_OW 72
75655: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75656: LD_ADDR_VAR 0 8
75660: PUSH
75661: LD_VAR 0 1
75665: PUSH
75666: LD_INT 1
75668: ARRAY
75669: PPUSH
75670: CALL_OW 255
75674: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75675: LD_ADDR_VAR 0 10
75679: PUSH
75680: LD_INT 29
75682: PUSH
75683: LD_INT 91
75685: PUSH
75686: LD_INT 49
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: LIST
75693: ST_TO_ADDR
// if not result then
75694: LD_VAR 0 3
75698: NOT
75699: IFFALSE 75703
// exit ;
75701: GO 76167
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75703: LD_ADDR_VAR 0 5
75707: PUSH
75708: LD_INT 81
75710: PUSH
75711: LD_VAR 0 8
75715: PUSH
75716: EMPTY
75717: LIST
75718: LIST
75719: PPUSH
75720: CALL_OW 69
75724: ST_TO_ADDR
// for i in result do
75725: LD_ADDR_VAR 0 4
75729: PUSH
75730: LD_VAR 0 3
75734: PUSH
75735: FOR_IN
75736: IFFALSE 76165
// begin tag := GetTag ( i ) + 1 ;
75738: LD_ADDR_VAR 0 9
75742: PUSH
75743: LD_VAR 0 4
75747: PPUSH
75748: CALL_OW 110
75752: PUSH
75753: LD_INT 1
75755: PLUS
75756: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
75757: LD_ADDR_VAR 0 7
75761: PUSH
75762: LD_VAR 0 4
75766: PPUSH
75767: CALL_OW 250
75771: PPUSH
75772: LD_VAR 0 4
75776: PPUSH
75777: CALL_OW 251
75781: PPUSH
75782: LD_INT 4
75784: PPUSH
75785: CALL 75358 0 3
75789: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
75790: LD_VAR 0 4
75794: PPUSH
75795: CALL_OW 247
75799: PUSH
75800: LD_INT 2
75802: EQUAL
75803: IFFALSE 75815
75805: PUSH
75806: LD_VAR 0 7
75810: PUSH
75811: LD_INT 2
75813: GREATER
75814: AND
75815: IFFALSE 75835
75817: PUSH
75818: LD_VAR 0 4
75822: PPUSH
75823: CALL_OW 264
75827: PUSH
75828: LD_VAR 0 10
75832: IN
75833: NOT
75834: AND
75835: IFFALSE 75874
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75837: LD_VAR 0 4
75841: PPUSH
75842: LD_VAR 0 7
75846: PUSH
75847: LD_INT 1
75849: ARRAY
75850: PUSH
75851: LD_INT 1
75853: ARRAY
75854: PPUSH
75855: LD_VAR 0 7
75859: PUSH
75860: LD_INT 1
75862: ARRAY
75863: PUSH
75864: LD_INT 2
75866: ARRAY
75867: PPUSH
75868: CALL_OW 116
75872: GO 76163
// if path > tag then
75874: LD_VAR 0 2
75878: PUSH
75879: LD_VAR 0 9
75883: GREATER
75884: IFFALSE 76092
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75886: LD_ADDR_VAR 0 6
75890: PUSH
75891: LD_VAR 0 5
75895: PPUSH
75896: LD_INT 91
75898: PUSH
75899: LD_VAR 0 4
75903: PUSH
75904: LD_INT 8
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: LIST
75911: PPUSH
75912: CALL_OW 72
75916: ST_TO_ADDR
// if nearEnemy then
75917: LD_VAR 0 6
75921: IFFALSE 75990
// begin if GetWeapon ( i ) = ru_time_lapser then
75923: LD_VAR 0 4
75927: PPUSH
75928: CALL_OW 264
75932: PUSH
75933: LD_INT 49
75935: EQUAL
75936: IFFALSE 75964
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75938: LD_VAR 0 4
75942: PPUSH
75943: LD_VAR 0 6
75947: PPUSH
75948: LD_VAR 0 4
75952: PPUSH
75953: CALL_OW 74
75957: PPUSH
75958: CALL_OW 112
75962: GO 75988
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75964: LD_VAR 0 4
75968: PPUSH
75969: LD_VAR 0 6
75973: PPUSH
75974: LD_VAR 0 4
75978: PPUSH
75979: CALL_OW 74
75983: PPUSH
75984: CALL 77248 0 2
// end else
75988: GO 76090
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75990: LD_VAR 0 4
75994: PPUSH
75995: LD_VAR 0 2
75999: PUSH
76000: LD_VAR 0 9
76004: ARRAY
76005: PUSH
76006: LD_INT 1
76008: ARRAY
76009: PPUSH
76010: LD_VAR 0 2
76014: PUSH
76015: LD_VAR 0 9
76019: ARRAY
76020: PUSH
76021: LD_INT 2
76023: ARRAY
76024: PPUSH
76025: CALL_OW 297
76029: PUSH
76030: LD_INT 6
76032: GREATER
76033: IFFALSE 76076
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76035: LD_VAR 0 4
76039: PPUSH
76040: LD_VAR 0 2
76044: PUSH
76045: LD_VAR 0 9
76049: ARRAY
76050: PUSH
76051: LD_INT 1
76053: ARRAY
76054: PPUSH
76055: LD_VAR 0 2
76059: PUSH
76060: LD_VAR 0 9
76064: ARRAY
76065: PUSH
76066: LD_INT 2
76068: ARRAY
76069: PPUSH
76070: CALL_OW 114
76074: GO 76090
// SetTag ( i , tag ) ;
76076: LD_VAR 0 4
76080: PPUSH
76081: LD_VAR 0 9
76085: PPUSH
76086: CALL_OW 109
// end else
76090: GO 76163
// if enemy then
76092: LD_VAR 0 5
76096: IFFALSE 76163
// begin if GetWeapon ( i ) = ru_time_lapser then
76098: LD_VAR 0 4
76102: PPUSH
76103: CALL_OW 264
76107: PUSH
76108: LD_INT 49
76110: EQUAL
76111: IFFALSE 76139
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76113: LD_VAR 0 4
76117: PPUSH
76118: LD_VAR 0 5
76122: PPUSH
76123: LD_VAR 0 4
76127: PPUSH
76128: CALL_OW 74
76132: PPUSH
76133: CALL_OW 112
76137: GO 76163
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76139: LD_VAR 0 4
76143: PPUSH
76144: LD_VAR 0 5
76148: PPUSH
76149: LD_VAR 0 4
76153: PPUSH
76154: CALL_OW 74
76158: PPUSH
76159: CALL 77248 0 2
// end ; end ;
76163: GO 75735
76165: POP
76166: POP
// end ;
76167: LD_VAR 0 3
76171: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76172: LD_INT 0
76174: PPUSH
76175: PPUSH
76176: PPUSH
// if not unit or IsInUnit ( unit ) then
76177: LD_VAR 0 1
76181: NOT
76182: IFTRUE 76195
76184: PUSH
76185: LD_VAR 0 1
76189: PPUSH
76190: CALL_OW 310
76194: OR
76195: IFFALSE 76199
// exit ;
76197: GO 76290
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76199: LD_ADDR_VAR 0 4
76203: PUSH
76204: LD_VAR 0 1
76208: PPUSH
76209: CALL_OW 250
76213: PPUSH
76214: LD_VAR 0 2
76218: PPUSH
76219: LD_INT 1
76221: PPUSH
76222: CALL_OW 272
76226: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76227: LD_ADDR_VAR 0 5
76231: PUSH
76232: LD_VAR 0 1
76236: PPUSH
76237: CALL_OW 251
76241: PPUSH
76242: LD_VAR 0 2
76246: PPUSH
76247: LD_INT 1
76249: PPUSH
76250: CALL_OW 273
76254: ST_TO_ADDR
// if ValidHex ( x , y ) then
76255: LD_VAR 0 4
76259: PPUSH
76260: LD_VAR 0 5
76264: PPUSH
76265: CALL_OW 488
76269: IFFALSE 76290
// ComTurnXY ( unit , x , y ) ;
76271: LD_VAR 0 1
76275: PPUSH
76276: LD_VAR 0 4
76280: PPUSH
76281: LD_VAR 0 5
76285: PPUSH
76286: CALL_OW 118
// end ;
76290: LD_VAR 0 3
76294: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76295: LD_INT 0
76297: PPUSH
76298: PPUSH
// result := false ;
76299: LD_ADDR_VAR 0 3
76303: PUSH
76304: LD_INT 0
76306: ST_TO_ADDR
// if not units then
76307: LD_VAR 0 2
76311: NOT
76312: IFFALSE 76316
// exit ;
76314: GO 76361
// for i in units do
76316: LD_ADDR_VAR 0 4
76320: PUSH
76321: LD_VAR 0 2
76325: PUSH
76326: FOR_IN
76327: IFFALSE 76359
// if See ( side , i ) then
76329: LD_VAR 0 1
76333: PPUSH
76334: LD_VAR 0 4
76338: PPUSH
76339: CALL_OW 292
76343: IFFALSE 76357
// begin result := true ;
76345: LD_ADDR_VAR 0 3
76349: PUSH
76350: LD_INT 1
76352: ST_TO_ADDR
// exit ;
76353: POP
76354: POP
76355: GO 76361
// end ;
76357: GO 76326
76359: POP
76360: POP
// end ;
76361: LD_VAR 0 3
76365: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76366: LD_INT 0
76368: PPUSH
76369: PPUSH
76370: PPUSH
76371: PPUSH
// if not unit or not points then
76372: LD_VAR 0 1
76376: NOT
76377: IFTRUE 76386
76379: PUSH
76380: LD_VAR 0 2
76384: NOT
76385: OR
76386: IFFALSE 76390
// exit ;
76388: GO 76480
// dist := 99999 ;
76390: LD_ADDR_VAR 0 5
76394: PUSH
76395: LD_INT 99999
76397: ST_TO_ADDR
// for i in points do
76398: LD_ADDR_VAR 0 4
76402: PUSH
76403: LD_VAR 0 2
76407: PUSH
76408: FOR_IN
76409: IFFALSE 76478
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76411: LD_ADDR_VAR 0 6
76415: PUSH
76416: LD_VAR 0 1
76420: PPUSH
76421: LD_VAR 0 4
76425: PUSH
76426: LD_INT 1
76428: ARRAY
76429: PPUSH
76430: LD_VAR 0 4
76434: PUSH
76435: LD_INT 2
76437: ARRAY
76438: PPUSH
76439: CALL_OW 297
76443: ST_TO_ADDR
// if tmpDist < dist then
76444: LD_VAR 0 6
76448: PUSH
76449: LD_VAR 0 5
76453: LESS
76454: IFFALSE 76476
// begin result := i ;
76456: LD_ADDR_VAR 0 3
76460: PUSH
76461: LD_VAR 0 4
76465: ST_TO_ADDR
// dist := tmpDist ;
76466: LD_ADDR_VAR 0 5
76470: PUSH
76471: LD_VAR 0 6
76475: ST_TO_ADDR
// end ; end ;
76476: GO 76408
76478: POP
76479: POP
// end ;
76480: LD_VAR 0 3
76484: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76485: LD_INT 0
76487: PPUSH
// uc_side := side ;
76488: LD_ADDR_OWVAR 20
76492: PUSH
76493: LD_VAR 0 1
76497: ST_TO_ADDR
// uc_nation := 3 ;
76498: LD_ADDR_OWVAR 21
76502: PUSH
76503: LD_INT 3
76505: ST_TO_ADDR
// vc_chassis := 25 ;
76506: LD_ADDR_OWVAR 37
76510: PUSH
76511: LD_INT 25
76513: ST_TO_ADDR
// vc_engine := engine_siberite ;
76514: LD_ADDR_OWVAR 39
76518: PUSH
76519: LD_INT 3
76521: ST_TO_ADDR
// vc_control := control_computer ;
76522: LD_ADDR_OWVAR 38
76526: PUSH
76527: LD_INT 3
76529: ST_TO_ADDR
// vc_weapon := 59 ;
76530: LD_ADDR_OWVAR 40
76534: PUSH
76535: LD_INT 59
76537: ST_TO_ADDR
// result := CreateVehicle ;
76538: LD_ADDR_VAR 0 5
76542: PUSH
76543: CALL_OW 45
76547: ST_TO_ADDR
// SetDir ( result , d ) ;
76548: LD_VAR 0 5
76552: PPUSH
76553: LD_VAR 0 4
76557: PPUSH
76558: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76562: LD_VAR 0 5
76566: PPUSH
76567: LD_VAR 0 2
76571: PPUSH
76572: LD_VAR 0 3
76576: PPUSH
76577: LD_INT 0
76579: PPUSH
76580: CALL_OW 48
// end ;
76584: LD_VAR 0 5
76588: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76589: LD_INT 0
76591: PPUSH
76592: PPUSH
76593: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76594: LD_ADDR_VAR 0 2
76598: PUSH
76599: LD_INT 0
76601: PUSH
76602: LD_INT 0
76604: PUSH
76605: LD_INT 0
76607: PUSH
76608: LD_INT 0
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76617: LD_VAR 0 1
76621: NOT
76622: IFTRUE 76655
76624: PUSH
76625: LD_VAR 0 1
76629: PPUSH
76630: CALL_OW 264
76634: PUSH
76635: LD_INT 12
76637: PUSH
76638: LD_INT 51
76640: PUSH
76641: LD_INT 32
76643: PUSH
76644: LD_INT 89
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: IN
76653: NOT
76654: OR
76655: IFFALSE 76659
// exit ;
76657: GO 76757
// for i := 1 to 3 do
76659: LD_ADDR_VAR 0 3
76663: PUSH
76664: DOUBLE
76665: LD_INT 1
76667: DEC
76668: ST_TO_ADDR
76669: LD_INT 3
76671: PUSH
76672: FOR_TO
76673: IFFALSE 76755
// begin tmp := GetCargo ( cargo , i ) ;
76675: LD_ADDR_VAR 0 4
76679: PUSH
76680: LD_VAR 0 1
76684: PPUSH
76685: LD_VAR 0 3
76689: PPUSH
76690: CALL_OW 289
76694: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76695: LD_ADDR_VAR 0 2
76699: PUSH
76700: LD_VAR 0 2
76704: PPUSH
76705: LD_VAR 0 3
76709: PPUSH
76710: LD_VAR 0 4
76714: PPUSH
76715: CALL_OW 1
76719: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76720: LD_ADDR_VAR 0 2
76724: PUSH
76725: LD_VAR 0 2
76729: PPUSH
76730: LD_INT 4
76732: PPUSH
76733: LD_VAR 0 2
76737: PUSH
76738: LD_INT 4
76740: ARRAY
76741: PUSH
76742: LD_VAR 0 4
76746: PLUS
76747: PPUSH
76748: CALL_OW 1
76752: ST_TO_ADDR
// end ;
76753: GO 76672
76755: POP
76756: POP
// end ;
76757: LD_VAR 0 2
76761: RET
// export function Length ( array ) ; begin
76762: LD_INT 0
76764: PPUSH
// result := array + 0 ;
76765: LD_ADDR_VAR 0 2
76769: PUSH
76770: LD_VAR 0 1
76774: PUSH
76775: LD_INT 0
76777: PLUS
76778: ST_TO_ADDR
// end ;
76779: LD_VAR 0 2
76783: RET
// export function PrepareArray ( array ) ; begin
76784: LD_INT 0
76786: PPUSH
// result := array diff 0 ;
76787: LD_ADDR_VAR 0 2
76791: PUSH
76792: LD_VAR 0 1
76796: PUSH
76797: LD_INT 0
76799: DIFF
76800: ST_TO_ADDR
// if not result [ 1 ] then
76801: LD_VAR 0 2
76805: PUSH
76806: LD_INT 1
76808: ARRAY
76809: NOT
76810: IFFALSE 76830
// result := Delete ( result , 1 ) ;
76812: LD_ADDR_VAR 0 2
76816: PUSH
76817: LD_VAR 0 2
76821: PPUSH
76822: LD_INT 1
76824: PPUSH
76825: CALL_OW 3
76829: ST_TO_ADDR
// end ;
76830: LD_VAR 0 2
76834: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76835: LD_INT 0
76837: PPUSH
76838: PPUSH
76839: PPUSH
76840: PPUSH
// sibRocketRange := 25 ;
76841: LD_ADDR_VAR 0 6
76845: PUSH
76846: LD_INT 25
76848: ST_TO_ADDR
// result := false ;
76849: LD_ADDR_VAR 0 4
76853: PUSH
76854: LD_INT 0
76856: ST_TO_ADDR
// for i := 0 to 5 do
76857: LD_ADDR_VAR 0 5
76861: PUSH
76862: DOUBLE
76863: LD_INT 0
76865: DEC
76866: ST_TO_ADDR
76867: LD_INT 5
76869: PUSH
76870: FOR_TO
76871: IFFALSE 76938
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76873: LD_VAR 0 1
76877: PPUSH
76878: LD_VAR 0 5
76882: PPUSH
76883: LD_VAR 0 6
76887: PPUSH
76888: CALL_OW 272
76892: PPUSH
76893: LD_VAR 0 2
76897: PPUSH
76898: LD_VAR 0 5
76902: PPUSH
76903: LD_VAR 0 6
76907: PPUSH
76908: CALL_OW 273
76912: PPUSH
76913: LD_VAR 0 3
76917: PPUSH
76918: CALL_OW 309
76922: IFFALSE 76936
// begin result := true ;
76924: LD_ADDR_VAR 0 4
76928: PUSH
76929: LD_INT 1
76931: ST_TO_ADDR
// exit ;
76932: POP
76933: POP
76934: GO 76940
// end ;
76936: GO 76870
76938: POP
76939: POP
// end ;
76940: LD_VAR 0 4
76944: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
76945: LD_INT 0
76947: PPUSH
76948: PPUSH
76949: PPUSH
// if btype = b_depot then
76950: LD_VAR 0 2
76954: PUSH
76955: LD_INT 0
76957: EQUAL
76958: IFFALSE 76970
// begin result := true ;
76960: LD_ADDR_VAR 0 3
76964: PUSH
76965: LD_INT 1
76967: ST_TO_ADDR
// exit ;
76968: GO 77090
// end ; pom := GetBase ( depot ) ;
76970: LD_ADDR_VAR 0 4
76974: PUSH
76975: LD_VAR 0 1
76979: PPUSH
76980: CALL_OW 274
76984: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
76985: LD_ADDR_VAR 0 5
76989: PUSH
76990: LD_VAR 0 2
76994: PPUSH
76995: LD_VAR 0 1
76999: PPUSH
77000: CALL_OW 248
77004: PPUSH
77005: CALL_OW 450
77009: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
77010: LD_ADDR_VAR 0 3
77014: PUSH
77015: LD_VAR 0 4
77019: PPUSH
77020: LD_INT 1
77022: PPUSH
77023: CALL_OW 275
77027: PUSH
77028: LD_VAR 0 5
77032: PUSH
77033: LD_INT 1
77035: ARRAY
77036: GREATEREQUAL
77037: IFFALSE 77063
77039: PUSH
77040: LD_VAR 0 4
77044: PPUSH
77045: LD_INT 2
77047: PPUSH
77048: CALL_OW 275
77052: PUSH
77053: LD_VAR 0 5
77057: PUSH
77058: LD_INT 2
77060: ARRAY
77061: GREATEREQUAL
77062: AND
77063: IFFALSE 77089
77065: PUSH
77066: LD_VAR 0 4
77070: PPUSH
77071: LD_INT 3
77073: PPUSH
77074: CALL_OW 275
77078: PUSH
77079: LD_VAR 0 5
77083: PUSH
77084: LD_INT 3
77086: ARRAY
77087: GREATEREQUAL
77088: AND
77089: ST_TO_ADDR
// end ;
77090: LD_VAR 0 3
77094: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77095: LD_INT 0
77097: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77098: LD_VAR 0 1
77102: PPUSH
77103: LD_VAR 0 2
77107: PPUSH
77108: LD_INT 0
77110: PPUSH
77111: LD_INT 0
77113: PPUSH
77114: LD_INT 1
77116: PPUSH
77117: LD_INT 0
77119: PPUSH
77120: CALL_OW 587
// end ;
77124: LD_VAR 0 3
77128: RET
// export function CenterOnNow ( unit ) ; begin
77129: LD_INT 0
77131: PPUSH
// result := IsInUnit ( unit ) ;
77132: LD_ADDR_VAR 0 2
77136: PUSH
77137: LD_VAR 0 1
77141: PPUSH
77142: CALL_OW 310
77146: ST_TO_ADDR
// if not result then
77147: LD_VAR 0 2
77151: NOT
77152: IFFALSE 77164
// result := unit ;
77154: LD_ADDR_VAR 0 2
77158: PUSH
77159: LD_VAR 0 1
77163: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
77164: LD_VAR 0 1
77168: PPUSH
77169: CALL_OW 87
// end ;
77173: LD_VAR 0 2
77177: RET
// export function ComMoveHex ( unit , hex ) ; begin
77178: LD_INT 0
77180: PPUSH
// if not hex then
77181: LD_VAR 0 2
77185: NOT
77186: IFFALSE 77190
// exit ;
77188: GO 77243
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
77190: LD_VAR 0 2
77194: PUSH
77195: LD_INT 1
77197: ARRAY
77198: PPUSH
77199: LD_VAR 0 2
77203: PUSH
77204: LD_INT 2
77206: ARRAY
77207: PPUSH
77208: CALL_OW 428
77212: IFFALSE 77216
// exit ;
77214: GO 77243
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
77216: LD_VAR 0 1
77220: PPUSH
77221: LD_VAR 0 2
77225: PUSH
77226: LD_INT 1
77228: ARRAY
77229: PPUSH
77230: LD_VAR 0 2
77234: PUSH
77235: LD_INT 2
77237: ARRAY
77238: PPUSH
77239: CALL_OW 111
// end ;
77243: LD_VAR 0 3
77247: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
77248: LD_INT 0
77250: PPUSH
77251: PPUSH
77252: PPUSH
// if not unit or not enemy then
77253: LD_VAR 0 1
77257: NOT
77258: IFTRUE 77267
77260: PUSH
77261: LD_VAR 0 2
77265: NOT
77266: OR
77267: IFFALSE 77271
// exit ;
77269: GO 77397
// x := GetX ( enemy ) ;
77271: LD_ADDR_VAR 0 4
77275: PUSH
77276: LD_VAR 0 2
77280: PPUSH
77281: CALL_OW 250
77285: ST_TO_ADDR
// y := GetY ( enemy ) ;
77286: LD_ADDR_VAR 0 5
77290: PUSH
77291: LD_VAR 0 2
77295: PPUSH
77296: CALL_OW 251
77300: ST_TO_ADDR
// if ValidHex ( x , y ) then
77301: LD_VAR 0 4
77305: PPUSH
77306: LD_VAR 0 5
77310: PPUSH
77311: CALL_OW 488
77315: IFFALSE 77397
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
77317: LD_VAR 0 2
77321: PPUSH
77322: CALL_OW 247
77326: PUSH
77327: LD_INT 3
77329: PUSH
77330: LD_INT 2
77332: PUSH
77333: EMPTY
77334: LIST
77335: LIST
77336: IN
77337: IFTRUE 77360
77339: PUSH
77340: LD_VAR 0 1
77344: PPUSH
77345: CALL_OW 255
77349: PPUSH
77350: LD_VAR 0 2
77354: PPUSH
77355: CALL_OW 292
77359: OR
77360: IFFALSE 77378
// ComAttackUnit ( unit , enemy ) else
77362: LD_VAR 0 1
77366: PPUSH
77367: LD_VAR 0 2
77371: PPUSH
77372: CALL_OW 115
77376: GO 77397
// ComAgressiveMove ( unit , x , y ) ;
77378: LD_VAR 0 1
77382: PPUSH
77383: LD_VAR 0 4
77387: PPUSH
77388: LD_VAR 0 5
77392: PPUSH
77393: CALL_OW 114
// end ;
77397: LD_VAR 0 3
77401: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
77402: LD_INT 0
77404: PPUSH
77405: PPUSH
77406: PPUSH
// list := AreaToList ( area , 0 ) ;
77407: LD_ADDR_VAR 0 5
77411: PUSH
77412: LD_VAR 0 1
77416: PPUSH
77417: LD_INT 0
77419: PPUSH
77420: CALL_OW 517
77424: ST_TO_ADDR
// if not list then
77425: LD_VAR 0 5
77429: NOT
77430: IFFALSE 77434
// exit ;
77432: GO 77564
// if all then
77434: LD_VAR 0 2
77438: IFFALSE 77526
// begin for i := 1 to list [ 1 ] do
77440: LD_ADDR_VAR 0 4
77444: PUSH
77445: DOUBLE
77446: LD_INT 1
77448: DEC
77449: ST_TO_ADDR
77450: LD_VAR 0 5
77454: PUSH
77455: LD_INT 1
77457: ARRAY
77458: PUSH
77459: FOR_TO
77460: IFFALSE 77522
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
77462: LD_ADDR_VAR 0 3
77466: PUSH
77467: LD_VAR 0 3
77471: PPUSH
77472: LD_VAR 0 3
77476: PUSH
77477: LD_INT 1
77479: PLUS
77480: PPUSH
77481: LD_VAR 0 5
77485: PUSH
77486: LD_INT 1
77488: ARRAY
77489: PUSH
77490: LD_VAR 0 4
77494: ARRAY
77495: PUSH
77496: LD_VAR 0 5
77500: PUSH
77501: LD_INT 2
77503: ARRAY
77504: PUSH
77505: LD_VAR 0 4
77509: ARRAY
77510: PUSH
77511: EMPTY
77512: LIST
77513: LIST
77514: PPUSH
77515: CALL_OW 1
77519: ST_TO_ADDR
77520: GO 77459
77522: POP
77523: POP
// exit ;
77524: GO 77564
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
77526: LD_ADDR_VAR 0 3
77530: PUSH
77531: LD_VAR 0 5
77535: PUSH
77536: LD_INT 1
77538: ARRAY
77539: PUSH
77540: LD_INT 1
77542: ARRAY
77543: PUSH
77544: LD_VAR 0 5
77548: PUSH
77549: LD_INT 2
77551: ARRAY
77552: PUSH
77553: LD_INT 1
77555: ARRAY
77556: PUSH
77557: EMPTY
77558: LIST
77559: LIST
77560: PUSH
77561: EMPTY
77562: LIST
77563: ST_TO_ADDR
// end ;
77564: LD_VAR 0 3
77568: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
77569: LD_INT 0
77571: PPUSH
77572: PPUSH
// list := AreaToList ( area , 0 ) ;
77573: LD_ADDR_VAR 0 4
77577: PUSH
77578: LD_VAR 0 1
77582: PPUSH
77583: LD_INT 0
77585: PPUSH
77586: CALL_OW 517
77590: ST_TO_ADDR
// if not list then
77591: LD_VAR 0 4
77595: NOT
77596: IFFALSE 77600
// exit ;
77598: GO 77641
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
77600: LD_ADDR_VAR 0 3
77604: PUSH
77605: LD_VAR 0 4
77609: PUSH
77610: LD_INT 1
77612: ARRAY
77613: PUSH
77614: LD_INT 1
77616: ARRAY
77617: PUSH
77618: LD_VAR 0 4
77622: PUSH
77623: LD_INT 2
77625: ARRAY
77626: PUSH
77627: LD_INT 1
77629: ARRAY
77630: PUSH
77631: LD_VAR 0 2
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: LIST
77640: ST_TO_ADDR
// end ;
77641: LD_VAR 0 3
77645: RET
// export function First ( array ) ; begin
77646: LD_INT 0
77648: PPUSH
// if not array then
77649: LD_VAR 0 1
77653: NOT
77654: IFFALSE 77658
// exit ;
77656: GO 77672
// result := array [ 1 ] ;
77658: LD_ADDR_VAR 0 2
77662: PUSH
77663: LD_VAR 0 1
77667: PUSH
77668: LD_INT 1
77670: ARRAY
77671: ST_TO_ADDR
// end ;
77672: LD_VAR 0 2
77676: RET
// export function Last ( array ) ; begin
77677: LD_INT 0
77679: PPUSH
// if not array then
77680: LD_VAR 0 1
77684: NOT
77685: IFFALSE 77689
// exit ;
77687: GO 77705
// result := array [ array ] ;
77689: LD_ADDR_VAR 0 2
77693: PUSH
77694: LD_VAR 0 1
77698: PUSH
77699: LD_VAR 0 1
77703: ARRAY
77704: ST_TO_ADDR
// end ;
77705: LD_VAR 0 2
77709: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
77710: LD_INT 0
77712: PPUSH
77713: PPUSH
// result := [ ] ;
77714: LD_ADDR_VAR 0 5
77718: PUSH
77719: EMPTY
77720: ST_TO_ADDR
// if not array then
77721: LD_VAR 0 1
77725: NOT
77726: IFFALSE 77730
// exit ;
77728: GO 77842
// for i := 1 to array do
77730: LD_ADDR_VAR 0 6
77734: PUSH
77735: DOUBLE
77736: LD_INT 1
77738: DEC
77739: ST_TO_ADDR
77740: LD_VAR 0 1
77744: PUSH
77745: FOR_TO
77746: IFFALSE 77840
// if array [ i ] [ index ] = value then
77748: LD_VAR 0 1
77752: PUSH
77753: LD_VAR 0 6
77757: ARRAY
77758: PUSH
77759: LD_VAR 0 2
77763: ARRAY
77764: PUSH
77765: LD_VAR 0 3
77769: EQUAL
77770: IFFALSE 77838
// begin if indexColumn then
77772: LD_VAR 0 4
77776: IFFALSE 77812
// result := Join ( result , array [ i ] [ indexColumn ] ) else
77778: LD_ADDR_VAR 0 5
77782: PUSH
77783: LD_VAR 0 5
77787: PPUSH
77788: LD_VAR 0 1
77792: PUSH
77793: LD_VAR 0 6
77797: ARRAY
77798: PUSH
77799: LD_VAR 0 4
77803: ARRAY
77804: PPUSH
77805: CALL 72850 0 2
77809: ST_TO_ADDR
77810: GO 77838
// result := Join ( result , array [ i ] ) ;
77812: LD_ADDR_VAR 0 5
77816: PUSH
77817: LD_VAR 0 5
77821: PPUSH
77822: LD_VAR 0 1
77826: PUSH
77827: LD_VAR 0 6
77831: ARRAY
77832: PPUSH
77833: CALL 72850 0 2
77837: ST_TO_ADDR
// end ;
77838: GO 77745
77840: POP
77841: POP
// end ;
77842: LD_VAR 0 5
77846: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
77847: LD_INT 0
77849: PPUSH
// if not vehicles or not parkingPoint then
77850: LD_VAR 0 1
77854: NOT
77855: IFTRUE 77864
77857: PUSH
77858: LD_VAR 0 2
77862: NOT
77863: OR
77864: IFFALSE 77868
// exit ;
77866: GO 77966
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
77868: LD_ADDR_VAR 0 1
77872: PUSH
77873: LD_VAR 0 1
77877: PPUSH
77878: LD_INT 50
77880: PUSH
77881: EMPTY
77882: LIST
77883: PUSH
77884: LD_INT 3
77886: PUSH
77887: LD_INT 92
77889: PUSH
77890: LD_VAR 0 2
77894: PUSH
77895: LD_INT 1
77897: ARRAY
77898: PUSH
77899: LD_VAR 0 2
77903: PUSH
77904: LD_INT 2
77906: ARRAY
77907: PUSH
77908: LD_INT 8
77910: PUSH
77911: EMPTY
77912: LIST
77913: LIST
77914: LIST
77915: LIST
77916: PUSH
77917: EMPTY
77918: LIST
77919: LIST
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: PPUSH
77925: CALL_OW 72
77929: ST_TO_ADDR
// if not vehicles then
77930: LD_VAR 0 1
77934: NOT
77935: IFFALSE 77939
// exit ;
77937: GO 77966
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
77939: LD_VAR 0 1
77943: PPUSH
77944: LD_VAR 0 2
77948: PUSH
77949: LD_INT 1
77951: ARRAY
77952: PPUSH
77953: LD_VAR 0 2
77957: PUSH
77958: LD_INT 2
77960: ARRAY
77961: PPUSH
77962: CALL_OW 111
// end ;
77966: LD_VAR 0 3
77970: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
77971: LD_INT 0
77973: PPUSH
77974: PPUSH
77975: PPUSH
// if not side or not area then
77976: LD_VAR 0 1
77980: NOT
77981: IFTRUE 77990
77983: PUSH
77984: LD_VAR 0 2
77988: NOT
77989: OR
77990: IFFALSE 77994
// exit ;
77992: GO 78113
// tmp := AreaToList ( area , 0 ) ;
77994: LD_ADDR_VAR 0 5
77998: PUSH
77999: LD_VAR 0 2
78003: PPUSH
78004: LD_INT 0
78006: PPUSH
78007: CALL_OW 517
78011: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
78012: LD_ADDR_VAR 0 4
78016: PUSH
78017: DOUBLE
78018: LD_INT 1
78020: DEC
78021: ST_TO_ADDR
78022: LD_VAR 0 5
78026: PUSH
78027: LD_INT 1
78029: ARRAY
78030: PUSH
78031: FOR_TO
78032: IFFALSE 78111
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
78034: LD_VAR 0 5
78038: PUSH
78039: LD_INT 1
78041: ARRAY
78042: PUSH
78043: LD_VAR 0 4
78047: ARRAY
78048: PPUSH
78049: LD_VAR 0 5
78053: PUSH
78054: LD_INT 2
78056: ARRAY
78057: PUSH
78058: LD_VAR 0 4
78062: ARRAY
78063: PPUSH
78064: CALL_OW 351
78068: IFFALSE 78109
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
78070: LD_VAR 0 5
78074: PUSH
78075: LD_INT 1
78077: ARRAY
78078: PUSH
78079: LD_VAR 0 4
78083: ARRAY
78084: PPUSH
78085: LD_VAR 0 5
78089: PUSH
78090: LD_INT 2
78092: ARRAY
78093: PUSH
78094: LD_VAR 0 4
78098: ARRAY
78099: PPUSH
78100: LD_VAR 0 1
78104: PPUSH
78105: CALL_OW 244
// end ;
78109: GO 78031
78111: POP
78112: POP
// end ;
78113: LD_VAR 0 3
78117: RET
// export function UniqueArray ( array ) ; var i ; begin
78118: LD_INT 0
78120: PPUSH
78121: PPUSH
// result := [ ] ;
78122: LD_ADDR_VAR 0 2
78126: PUSH
78127: EMPTY
78128: ST_TO_ADDR
// if not array then
78129: LD_VAR 0 1
78133: NOT
78134: IFFALSE 78138
// exit ;
78136: GO 78199
// for i := 1 to array do
78138: LD_ADDR_VAR 0 3
78142: PUSH
78143: DOUBLE
78144: LD_INT 1
78146: DEC
78147: ST_TO_ADDR
78148: LD_VAR 0 1
78152: PUSH
78153: FOR_TO
78154: IFFALSE 78197
// if not array [ i ] in result then
78156: LD_VAR 0 1
78160: PUSH
78161: LD_VAR 0 3
78165: ARRAY
78166: PUSH
78167: LD_VAR 0 2
78171: IN
78172: NOT
78173: IFFALSE 78195
// result := Join ( result , i ) ;
78175: LD_ADDR_VAR 0 2
78179: PUSH
78180: LD_VAR 0 2
78184: PPUSH
78185: LD_VAR 0 3
78189: PPUSH
78190: CALL 72850 0 2
78194: ST_TO_ADDR
78195: GO 78153
78197: POP
78198: POP
// end ; end_of_file
78199: LD_VAR 0 2
78203: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78204: LD_VAR 0 1
78208: PUSH
78209: LD_INT 200
78211: DOUBLE
78212: GREATEREQUAL
78213: IFFALSE 78221
78215: LD_INT 299
78217: DOUBLE
78218: LESSEQUAL
78219: IFTRUE 78223
78221: GO 78255
78223: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78224: LD_VAR 0 1
78228: PPUSH
78229: LD_VAR 0 2
78233: PPUSH
78234: LD_VAR 0 3
78238: PPUSH
78239: LD_VAR 0 4
78243: PPUSH
78244: LD_VAR 0 5
78248: PPUSH
78249: CALL 29160 0 5
78253: GO 78332
78255: LD_INT 300
78257: DOUBLE
78258: GREATEREQUAL
78259: IFFALSE 78267
78261: LD_INT 399
78263: DOUBLE
78264: LESSEQUAL
78265: IFTRUE 78269
78267: GO 78331
78269: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78270: LD_VAR 0 1
78274: PPUSH
78275: LD_VAR 0 2
78279: PPUSH
78280: LD_VAR 0 3
78284: PPUSH
78285: LD_VAR 0 4
78289: PPUSH
78290: LD_VAR 0 5
78294: PPUSH
78295: LD_VAR 0 6
78299: PPUSH
78300: LD_VAR 0 7
78304: PPUSH
78305: LD_VAR 0 8
78309: PPUSH
78310: LD_VAR 0 9
78314: PPUSH
78315: LD_VAR 0 10
78319: PPUSH
78320: LD_VAR 0 11
78324: PPUSH
78325: CALL 25044 0 11
78329: GO 78332
78331: POP
// end ;
78332: PPOPN 11
78334: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78335: LD_VAR 0 1
78339: PPUSH
78340: LD_VAR 0 2
78344: PPUSH
78345: LD_VAR 0 3
78349: PPUSH
78350: LD_VAR 0 4
78354: PPUSH
78355: LD_VAR 0 5
78359: PPUSH
78360: CALL 28541 0 5
// end ; end_of_file
78364: PPOPN 5
78366: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78367: LD_VAR 0 1
78371: PPUSH
78372: LD_VAR 0 2
78376: PPUSH
78377: LD_VAR 0 3
78381: PPUSH
78382: LD_VAR 0 4
78386: PPUSH
78387: LD_VAR 0 5
78391: PPUSH
78392: LD_VAR 0 6
78396: PPUSH
78397: CALL 12584 0 6
// end ;
78401: PPOPN 6
78403: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78404: LD_INT 0
78406: PPUSH
// begin if not units then
78407: LD_VAR 0 1
78411: NOT
78412: IFFALSE 78416
// exit ;
78414: GO 78450
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
78416: LD_VAR 0 1
78420: PPUSH
78421: LD_VAR 0 2
78425: PPUSH
78426: LD_VAR 0 3
78430: PPUSH
78431: LD_VAR 0 4
78435: PPUSH
78436: LD_VAR 0 5
78440: PPUSH
78441: LD_VAR 0 6
78445: PPUSH
78446: CALL 34667 0 6
// end ;
78450: PPOPN 7
78452: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78453: CALL 12471 0 0
// end ;
78457: PPOPN 1
78459: END
