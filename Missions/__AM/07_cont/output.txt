// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8596 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 36713 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 31292 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 31292 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 31292 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 31292 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 31292 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 31292 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 31292 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 31292 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 31292 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 31292 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4763
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4763: LD_ADDR_VAR 0 9
4767: PUSH
4768: LD_INT 22
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 30
4783: PUSH
4784: LD_INT 0
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 30
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 69
4814: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4815: LD_ADDR_VAR 0 10
4819: PUSH
4820: LD_INT 22
4822: PUSH
4823: LD_INT 3
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: LD_INT 30
4835: PUSH
4836: LD_INT 6
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 30
4845: PUSH
4846: LD_INT 7
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 30
4855: PUSH
4856: LD_INT 8
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 69
4877: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4878: LD_ADDR_VAR 0 11
4882: PUSH
4883: LD_INT 22
4885: PUSH
4886: LD_INT 3
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 30
4895: PUSH
4896: LD_INT 3
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PPUSH
4907: CALL_OW 69
4911: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4912: LD_ADDR_VAR 0 12
4916: PUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 3
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 30
4929: PUSH
4930: LD_INT 31
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 69
4945: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4946: LD_ADDR_VAR 0 13
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_INT 3
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 30
4963: PUSH
4964: LD_INT 32
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PPUSH
4975: CALL_OW 69
4979: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4980: LD_ADDR_VAR 0 14
4984: PUSH
4985: LD_INT 22
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 30
4997: PUSH
4998: LD_INT 33
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PPUSH
5009: CALL_OW 69
5013: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5014: LD_ADDR_VAR 0 15
5018: PUSH
5019: LD_INT 42
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: LD_INT 43
5031: PUSH
5032: LD_INT 50
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 44
5041: PUSH
5042: LD_INT 30
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 46
5051: PUSH
5052: LD_INT 15
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5065: LD_ADDR_VAR 0 16
5069: PUSH
5070: LD_INT 0
5072: PUSH
5073: LD_INT 4
5075: PUSH
5076: LD_INT 6
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5088: LD_ADDR_VAR 0 6
5092: PUSH
5093: LD_INT 4
5095: PUSH
5096: LD_INT 5
5098: PUSH
5099: LD_INT 6
5101: PUSH
5102: LD_INT 6
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_OWVAR 67
5115: ARRAY
5116: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5117: LD_INT 16
5119: PPUSH
5120: LD_STRING am_tukh
5122: PPUSH
5123: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5127: LD_ADDR_VAR 0 2
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 3
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PPUSH
5142: CALL_OW 69
5146: PUSH
5147: FOR_IN
5148: IFFALSE 5185
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5150: LD_VAR 0 2
5154: PPUSH
5155: LD_INT 4
5157: PUSH
5158: LD_INT 5
5160: PUSH
5161: LD_INT 6
5163: PUSH
5164: LD_INT 7
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_OWVAR 67
5177: ARRAY
5178: PPUSH
5179: CALL_OW 241
5183: GO 5147
5185: POP
5186: POP
// for i in dep_list do
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: LD_VAR 0 9
5196: PUSH
5197: FOR_IN
5198: IFFALSE 5242
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5200: LD_VAR 0 2
5204: PPUSH
5205: CALL_OW 274
5209: PPUSH
5210: LD_INT 1
5212: PPUSH
5213: LD_INT 1000
5215: PPUSH
5216: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5220: LD_VAR 0 2
5224: PPUSH
5225: CALL_OW 274
5229: PPUSH
5230: LD_INT 2
5232: PPUSH
5233: LD_INT 1000
5235: PPUSH
5236: CALL_OW 277
// end ;
5240: GO 5197
5242: POP
5243: POP
// InitHc ;
5244: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5248: LD_ADDR_VAR 0 8
5252: PUSH
5253: LD_VAR 0 13
5257: PUSH
5258: LD_INT 45
5260: PUSH
5261: LD_INT 60
5263: PUSH
5264: LD_INT 75
5266: PUSH
5267: LD_INT 80
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: PUSH
5276: LD_OWVAR 67
5280: ARRAY
5281: MUL
5282: PUSH
5283: LD_INT 100
5285: DIV
5286: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5287: LD_ADDR_VAR 0 16
5291: PUSH
5292: LD_VAR 0 16
5296: PPUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_VAR 0 8
5304: PPUSH
5305: CALL_OW 1
5309: ST_TO_ADDR
// tmp := [ ] ;
5310: LD_ADDR_VAR 0 8
5314: PUSH
5315: EMPTY
5316: ST_TO_ADDR
// for i in bunker_list do
5317: LD_ADDR_VAR 0 2
5321: PUSH
5322: LD_VAR 0 13
5326: PUSH
5327: FOR_IN
5328: IFFALSE 5424
// if i mod 10 + 1 < tmp then
5330: LD_VAR 0 2
5334: PUSH
5335: LD_INT 10
5337: MOD
5338: PUSH
5339: LD_INT 1
5341: PLUS
5342: PUSH
5343: LD_VAR 0 8
5347: LESS
5348: IFFALSE 5393
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5350: LD_ADDR_VAR 0 8
5354: PUSH
5355: LD_VAR 0 8
5359: PPUSH
5360: LD_VAR 0 2
5364: PUSH
5365: LD_INT 3
5367: PPUSH
5368: LD_INT 5
5370: PPUSH
5371: CALL_OW 12
5375: MOD
5376: PUSH
5377: LD_INT 1
5379: PLUS
5380: PPUSH
5381: LD_VAR 0 2
5385: PPUSH
5386: CALL_OW 2
5390: ST_TO_ADDR
5391: GO 5422
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5393: LD_ADDR_VAR 0 8
5397: PUSH
5398: LD_VAR 0 8
5402: PPUSH
5403: LD_VAR 0 8
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5327
5424: POP
5425: POP
// bunker_list := tmp ;
5426: LD_ADDR_VAR 0 13
5430: PUSH
5431: LD_VAR 0 8
5435: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_VAR 0 14
5450: ADD
5451: PUSH
5452: FOR_IN
5453: IFFALSE 5476
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5455: LD_VAR 0 2
5459: PPUSH
5460: LD_VAR 0 2
5464: PPUSH
5465: CALL 2225 0 1
5469: PPUSH
5470: CALL_OW 431
5474: GO 5452
5476: POP
5477: POP
// while ( personel_counter [ 1 ] ) do
5478: LD_VAR 0 16
5482: PUSH
5483: LD_INT 1
5485: ARRAY
5486: IFFALSE 5594
// begin i := rand ( 1 , bunker_list ) ;
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_VAR 0 13
5500: PPUSH
5501: CALL_OW 12
5505: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5506: LD_INT 0
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: LD_VAR 0 6
5516: PPUSH
5517: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5521: CALL_OW 44
5525: PPUSH
5526: LD_VAR 0 13
5530: PUSH
5531: LD_VAR 0 2
5535: ARRAY
5536: PPUSH
5537: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5541: LD_ADDR_VAR 0 13
5545: PUSH
5546: LD_VAR 0 13
5550: PPUSH
5551: LD_VAR 0 2
5555: PPUSH
5556: CALL_OW 3
5560: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5561: LD_ADDR_VAR 0 16
5565: PUSH
5566: LD_VAR 0 16
5570: PPUSH
5571: LD_INT 1
5573: PPUSH
5574: LD_VAR 0 16
5578: PUSH
5579: LD_INT 1
5581: ARRAY
5582: PUSH
5583: LD_INT 1
5585: MINUS
5586: PPUSH
5587: CALL_OW 1
5591: ST_TO_ADDR
// end ;
5592: GO 5478
// for i = 1 to personel_counter [ 2 ] do
5594: LD_ADDR_VAR 0 2
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 16
5608: PUSH
5609: LD_INT 2
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5645
// begin PrepareHuman ( false , 2 , skill ) ;
5616: LD_INT 0
5618: PPUSH
5619: LD_INT 2
5621: PPUSH
5622: LD_VAR 0 6
5626: PPUSH
5627: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5631: CALL_OW 44
5635: PPUSH
5636: LD_INT 16
5638: PPUSH
5639: CALL_OW 52
// end ;
5643: GO 5613
5645: POP
5646: POP
// for i = 1 to personel_counter [ 3 ] do
5647: LD_ADDR_VAR 0 2
5651: PUSH
5652: DOUBLE
5653: LD_INT 1
5655: DEC
5656: ST_TO_ADDR
5657: LD_VAR 0 16
5661: PUSH
5662: LD_INT 3
5664: ARRAY
5665: PUSH
5666: FOR_TO
5667: IFFALSE 5714
// begin PrepareHuman ( false , 3 , skill ) ;
5669: LD_INT 0
5671: PPUSH
5672: LD_INT 3
5674: PPUSH
5675: LD_VAR 0 6
5679: PPUSH
5680: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5684: CALL_OW 44
5688: PPUSH
5689: LD_VAR 0 11
5693: PUSH
5694: LD_VAR 0 2
5698: PUSH
5699: LD_INT 2
5701: MOD
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: ARRAY
5707: PPUSH
5708: CALL_OW 52
// end ;
5712: GO 5666
5714: POP
5715: POP
// for i = 1 to personel_counter [ 4 ] do
5716: LD_ADDR_VAR 0 2
5720: PUSH
5721: DOUBLE
5722: LD_INT 1
5724: DEC
5725: ST_TO_ADDR
5726: LD_VAR 0 16
5730: PUSH
5731: LD_INT 4
5733: ARRAY
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5773
// begin PrepareHuman ( false , 4 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 4
5743: PPUSH
5744: LD_VAR 0 6
5748: PPUSH
5749: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5753: CALL_OW 44
5757: PPUSH
5758: LD_VAR 0 10
5762: PUSH
5763: LD_INT 1
5765: ARRAY
5766: PPUSH
5767: CALL_OW 52
// end ;
5771: GO 5735
5773: POP
5774: POP
// for i in breastworks_list do
5775: LD_ADDR_VAR 0 2
5779: PUSH
5780: LD_VAR 0 12
5784: PUSH
5785: FOR_IN
5786: IFFALSE 5898
// begin r := GetDir ( i ) ;
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_VAR 0 2
5797: PPUSH
5798: CALL_OW 254
5802: ST_TO_ADDR
// if r > 3 then
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 3
5810: GREATER
5811: IFFALSE 5829
// r := r - 3 else
5813: LD_ADDR_VAR 0 4
5817: PUSH
5818: LD_VAR 0 4
5822: PUSH
5823: LD_INT 3
5825: MINUS
5826: ST_TO_ADDR
5827: GO 5843
// r := r + 3 ;
5829: LD_ADDR_VAR 0 4
5833: PUSH
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: PLUS
5842: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5843: LD_INT 0
5845: PPUSH
5846: LD_INT 1
5848: PPUSH
5849: LD_VAR 0 6
5853: PPUSH
5854: CALL_OW 380
// un := CreateHuman ;
5858: LD_ADDR_VAR 0 5
5862: PUSH
5863: CALL_OW 44
5867: ST_TO_ADDR
// SetDir ( un , r ) ;
5868: LD_VAR 0 5
5872: PPUSH
5873: LD_VAR 0 4
5877: PPUSH
5878: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5882: LD_VAR 0 5
5886: PPUSH
5887: LD_VAR 0 2
5891: PPUSH
5892: CALL_OW 52
// end ;
5896: GO 5785
5898: POP
5899: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5900: LD_ADDR_VAR 0 8
5904: PUSH
5905: LD_INT 22
5907: PUSH
5908: LD_INT 3
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 25
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PPUSH
5929: CALL_OW 69
5933: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5934: LD_ADDR_VAR 0 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: LD_INT 5
5944: PUSH
5945: LD_INT 6
5947: PUSH
5948: LD_INT 6
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: PUSH
5957: LD_OWVAR 67
5961: ARRAY
5962: ST_TO_ADDR
// for i = 1 to r do
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_VAR 0 4
5977: PUSH
5978: FOR_TO
5979: IFFALSE 6152
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5981: LD_ADDR_VAR 0 5
5985: PUSH
5986: LD_INT 3
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: LD_INT 22
5994: PUSH
5995: LD_INT 22
5997: PUSH
5998: LD_INT 24
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 3
6013: MOD
6014: PUSH
6015: LD_INT 1
6017: PLUS
6018: ARRAY
6019: PPUSH
6020: LD_INT 1
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: LD_INT 43
6028: PUSH
6029: LD_INT 44
6031: PUSH
6032: LD_INT 42
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PUSH
6040: LD_VAR 0 2
6044: PUSH
6045: LD_INT 3
6047: MOD
6048: PUSH
6049: LD_INT 1
6051: PLUS
6052: ARRAY
6053: PPUSH
6054: LD_INT 100
6056: PPUSH
6057: CALL 520 0 7
6061: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6062: LD_VAR 0 5
6066: PPUSH
6067: LD_INT 0
6069: PPUSH
6070: LD_INT 5
6072: PPUSH
6073: CALL_OW 12
6077: PPUSH
6078: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6082: LD_VAR 0 5
6086: PPUSH
6087: LD_INT 5
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL_OW 49
// if i > tmp - 2 then
6097: LD_VAR 0 2
6101: PUSH
6102: LD_VAR 0 8
6106: PUSH
6107: LD_INT 2
6109: MINUS
6110: GREATER
6111: IFFALSE 6115
// continue ;
6113: GO 5978
// ComExitBuilding ( tmp [ i ] ) ;
6115: LD_VAR 0 8
6119: PUSH
6120: LD_VAR 0 2
6124: ARRAY
6125: PPUSH
6126: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6130: LD_VAR 0 8
6134: PUSH
6135: LD_VAR 0 2
6139: ARRAY
6140: PPUSH
6141: LD_VAR 0 5
6145: PPUSH
6146: CALL_OW 180
// end ;
6150: GO 5978
6152: POP
6153: POP
// end ;
6154: LD_VAR 0 1
6158: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6159: LD_INT 22
6161: PUSH
6162: LD_INT 3
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 2
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: IFFALSE 6919
6189: GO 6191
6191: DISABLE
6192: LD_INT 0
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
6198: PPUSH
// begin enable ;
6199: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6200: LD_ADDR_VAR 0 2
6204: PUSH
6205: LD_INT 6
6207: PPUSH
6208: LD_INT 3
6210: PUSH
6211: LD_INT 24
6213: PUSH
6214: LD_INT 1000
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 21
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 70
6243: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6244: LD_ADDR_VAR 0 4
6248: PUSH
6249: LD_INT 22
6251: PUSH
6252: LD_INT 3
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 25
6261: PUSH
6262: LD_INT 2
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 69
6277: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6278: LD_VAR 0 2
6282: NOT
6283: PUSH
6284: LD_EXP 20
6288: NOT
6289: AND
6290: IFFALSE 6360
// begin for i in engs do
6292: LD_ADDR_VAR 0 1
6296: PUSH
6297: LD_VAR 0 4
6301: PUSH
6302: FOR_IN
6303: IFFALSE 6358
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6305: LD_VAR 0 1
6309: PPUSH
6310: CALL_OW 256
6314: PUSH
6315: LD_INT 1000
6317: EQUAL
6318: PUSH
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 314
6328: NOT
6329: AND
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 310
6340: NOT
6341: AND
6342: IFFALSE 6356
// ComEnterUnit ( i , ru_dep_main ) ;
6344: LD_VAR 0 1
6348: PPUSH
6349: LD_INT 16
6351: PPUSH
6352: CALL_OW 120
6356: GO 6302
6358: POP
6359: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6360: LD_VAR 0 4
6364: PPUSH
6365: LD_INT 3
6367: PUSH
6368: LD_INT 24
6370: PUSH
6371: LD_INT 650
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 72
6386: IFFALSE 6479
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: LD_VAR 0 4
6397: PPUSH
6398: LD_INT 3
6400: PUSH
6401: LD_INT 24
6403: PUSH
6404: LD_INT 650
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 72
6419: ST_TO_ADDR
// for i in tmp do
6420: LD_ADDR_VAR 0 1
6424: PUSH
6425: LD_VAR 0 3
6429: PUSH
6430: FOR_IN
6431: IFFALSE 6477
// if not IsInArea ( i , mainBaseArea ) then
6433: LD_VAR 0 1
6437: PPUSH
6438: LD_INT 14
6440: PPUSH
6441: CALL_OW 308
6445: NOT
6446: IFFALSE 6475
// begin ComMoveXY ( i , 129 , 125 ) ;
6448: LD_VAR 0 1
6452: PPUSH
6453: LD_INT 129
6455: PPUSH
6456: LD_INT 125
6458: PPUSH
6459: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6463: LD_VAR 0 1
6467: PPUSH
6468: LD_INT 1050
6470: PPUSH
6471: CALL_OW 202
// end ;
6475: GO 6430
6477: POP
6478: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6479: LD_ADDR_VAR 0 4
6483: PUSH
6484: LD_VAR 0 4
6488: PPUSH
6489: LD_INT 24
6491: PUSH
6492: LD_INT 650
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 72
6503: ST_TO_ADDR
// if not engs then
6504: LD_VAR 0 4
6508: NOT
6509: IFFALSE 6513
// exit ;
6511: GO 6919
// if filter then
6513: LD_VAR 0 2
6517: IFFALSE 6776
// begin for i in engs do
6519: LD_ADDR_VAR 0 1
6523: PUSH
6524: LD_VAR 0 4
6528: PUSH
6529: FOR_IN
6530: IFFALSE 6554
// if IsInUnit ( i ) then
6532: LD_VAR 0 1
6536: PPUSH
6537: CALL_OW 310
6541: IFFALSE 6552
// ComExitBuilding ( i ) ;
6543: LD_VAR 0 1
6547: PPUSH
6548: CALL_OW 122
6552: GO 6529
6554: POP
6555: POP
// wait ( 3 ) ;
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6563: LD_VAR 0 2
6567: PUSH
6568: LD_INT 2
6570: GREATEREQUAL
6571: PUSH
6572: LD_VAR 0 4
6576: PUSH
6577: LD_INT 2
6579: GREATEREQUAL
6580: AND
6581: IFFALSE 6729
// begin for i = 1 to engs / 2 do
6583: LD_ADDR_VAR 0 1
6587: PUSH
6588: DOUBLE
6589: LD_INT 1
6591: DEC
6592: ST_TO_ADDR
6593: LD_VAR 0 4
6597: PUSH
6598: LD_INT 2
6600: DIVREAL
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6649
// if not HasTask ( engs [ i ] ) then
6605: LD_VAR 0 4
6609: PUSH
6610: LD_VAR 0 1
6614: ARRAY
6615: PPUSH
6616: CALL_OW 314
6620: NOT
6621: IFFALSE 6647
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6623: LD_VAR 0 4
6627: PUSH
6628: LD_VAR 0 1
6632: ARRAY
6633: PPUSH
6634: LD_VAR 0 2
6638: PUSH
6639: LD_INT 1
6641: ARRAY
6642: PPUSH
6643: CALL_OW 130
6647: GO 6602
6649: POP
6650: POP
// for i = engs / 2 + 1 to engs do
6651: LD_ADDR_VAR 0 1
6655: PUSH
6656: DOUBLE
6657: LD_VAR 0 4
6661: PUSH
6662: LD_INT 2
6664: DIVREAL
6665: PUSH
6666: LD_INT 1
6668: PLUS
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 4
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6725
// if not HasTask ( engs [ i ] ) then
6679: LD_VAR 0 4
6683: PUSH
6684: LD_VAR 0 1
6688: ARRAY
6689: PPUSH
6690: CALL_OW 314
6694: NOT
6695: IFFALSE 6723
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6697: LD_VAR 0 4
6701: PUSH
6702: LD_VAR 0 1
6706: ARRAY
6707: PPUSH
6708: LD_VAR 0 2
6712: PUSH
6713: LD_VAR 0 2
6717: ARRAY
6718: PPUSH
6719: CALL_OW 130
6723: GO 6676
6725: POP
6726: POP
// end else
6727: GO 6776
// for i in engs do
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_VAR 0 4
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6774
// if not HasTask ( i ) then
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 314
6751: NOT
6752: IFFALSE 6772
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6754: LD_VAR 0 1
6758: PPUSH
6759: LD_VAR 0 2
6763: PUSH
6764: LD_INT 1
6766: ARRAY
6767: PPUSH
6768: CALL_OW 130
6772: GO 6739
6774: POP
6775: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6776: LD_ADDR_VAR 0 5
6780: PUSH
6781: LD_INT 81
6783: PUSH
6784: LD_INT 3
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 69
6795: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6796: LD_EXP 20
6800: PUSH
6801: LD_VAR 0 2
6805: NOT
6806: AND
6807: IFFALSE 6919
// begin ComExitBuilding ( engs ) ;
6809: LD_VAR 0 4
6813: PPUSH
6814: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6818: LD_VAR 0 5
6822: PPUSH
6823: LD_EXP 20
6827: PUSH
6828: LD_INT 2
6830: ARRAY
6831: PPUSH
6832: LD_EXP 20
6836: PUSH
6837: LD_INT 3
6839: ARRAY
6840: PPUSH
6841: CALL_OW 73
6845: PPUSH
6846: LD_EXP 20
6850: PUSH
6851: LD_INT 2
6853: ARRAY
6854: PPUSH
6855: LD_EXP 20
6859: PUSH
6860: LD_INT 3
6862: ARRAY
6863: PPUSH
6864: CALL_OW 297
6868: PUSH
6869: LD_INT 10
6871: GREATER
6872: IFFALSE 6919
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6874: LD_VAR 0 4
6878: PPUSH
6879: LD_EXP 20
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_EXP 20
6892: PUSH
6893: LD_INT 2
6895: ARRAY
6896: PPUSH
6897: LD_EXP 20
6901: PUSH
6902: LD_INT 3
6904: ARRAY
6905: PPUSH
6906: LD_EXP 20
6910: PUSH
6911: LD_INT 4
6913: ARRAY
6914: PPUSH
6915: CALL_OW 145
// end ; end ;
6919: PPOPN 5
6921: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6922: LD_INT 16
6924: PPUSH
6925: CALL_OW 256
6929: PUSH
6930: LD_INT 250
6932: LESS
6933: IFFALSE 7123
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6942: LD_ADDR_VAR 0 2
6946: PUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 25
6972: PUSH
6973: LD_INT 3
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 69
7004: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 122
// wait ( 3 ) ;
7014: LD_INT 3
7016: PPUSH
7017: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7021: LD_VAR 0 2
7025: PPUSH
7026: LD_INT 156
7028: PPUSH
7029: LD_INT 211
7031: PPUSH
7032: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7036: LD_INT 35
7038: PPUSH
7039: CALL_OW 67
// for i in tmp do
7043: LD_ADDR_VAR 0 1
7047: PUSH
7048: LD_VAR 0 2
7052: PUSH
7053: FOR_IN
7054: IFFALSE 7114
// if IsInArea ( i , escapeArea ) then
7056: LD_VAR 0 1
7060: PPUSH
7061: LD_INT 15
7063: PPUSH
7064: CALL_OW 308
7068: IFFALSE 7097
// begin RemoveUnit ( i ) ;
7070: LD_VAR 0 1
7074: PPUSH
7075: CALL_OW 64
// tmp := tmp diff i ;
7079: LD_ADDR_VAR 0 2
7083: PUSH
7084: LD_VAR 0 2
7088: PUSH
7089: LD_VAR 0 1
7093: DIFF
7094: ST_TO_ADDR
// end else
7095: GO 7112
// ComMoveXY ( i , 156 , 211 ) ;
7097: LD_VAR 0 1
7101: PPUSH
7102: LD_INT 156
7104: PPUSH
7105: LD_INT 211
7107: PPUSH
7108: CALL_OW 111
7112: GO 7053
7114: POP
7115: POP
// until not tmp ;
7116: LD_VAR 0 2
7120: NOT
7121: IFFALSE 7036
// end ;
7123: PPOPN 2
7125: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7126: LD_INT 22
7128: PUSH
7129: LD_INT 3
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 25
7138: PUSH
7139: LD_INT 4
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 69
7154: IFFALSE 7408
7156: GO 7158
7158: DISABLE
7159: LD_INT 0
7161: PPUSH
7162: PPUSH
7163: PPUSH
// begin enable ;
7164: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 14
7172: PPUSH
7173: LD_INT 22
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 21
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 24
7198: PUSH
7199: LD_INT 1000
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 70
7219: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 3
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 4
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 69
7253: ST_TO_ADDR
// if not doc then
7254: LD_VAR 0 3
7258: NOT
7259: IFFALSE 7263
// exit ;
7261: GO 7408
// if not tmp then
7263: LD_VAR 0 2
7267: NOT
7268: IFFALSE 7359
// begin if not IsInUnit ( doc [ 1 ] ) then
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 1
7277: ARRAY
7278: PPUSH
7279: CALL_OW 310
7283: NOT
7284: IFFALSE 7357
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7286: LD_VAR 0 3
7290: PPUSH
7291: LD_INT 22
7293: PUSH
7294: LD_INT 3
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 30
7306: PUSH
7307: LD_INT 6
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 30
7316: PUSH
7317: LD_INT 7
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 30
7326: PUSH
7327: LD_INT 8
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PPUSH
7344: CALL_OW 69
7348: PUSH
7349: LD_INT 1
7351: ARRAY
7352: PPUSH
7353: CALL_OW 120
// exit ;
7357: GO 7408
// end ; if IsInUnit ( doc [ 1 ] ) then
7359: LD_VAR 0 3
7363: PUSH
7364: LD_INT 1
7366: ARRAY
7367: PPUSH
7368: CALL_OW 310
7372: IFFALSE 7383
// ComExitBuilding ( doc ) ;
7374: LD_VAR 0 3
7378: PPUSH
7379: CALL_OW 122
// wait ( 3 ) ;
7383: LD_INT 3
7385: PPUSH
7386: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7390: LD_VAR 0 3
7394: PPUSH
7395: LD_VAR 0 2
7399: PUSH
7400: LD_INT 1
7402: ARRAY
7403: PPUSH
7404: CALL_OW 128
// end ;
7408: PPOPN 3
7410: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7411: LD_INT 22
7413: PUSH
7414: LD_INT 3
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 25
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: PUSH
7440: LD_INT 22
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 21
7452: PUSH
7453: LD_INT 2
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: AND
7469: IFFALSE 8163
7471: GO 7473
7473: DISABLE
7474: LD_INT 0
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
7480: PPUSH
7481: PPUSH
// begin enable ;
7482: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_INT 22
7490: PUSH
7491: LD_INT 3
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 21
7500: PUSH
7501: LD_INT 2
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 3
7510: PUSH
7511: LD_INT 58
7513: PUSH
7514: EMPTY
7515: LIST
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: PPUSH
7526: CALL_OW 69
7530: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7531: LD_ADDR_VAR 0 4
7535: PUSH
7536: LD_INT 10
7538: PUSH
7539: LD_INT 11
7541: PUSH
7542: LD_INT 12
7544: PUSH
7545: LD_INT 14
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: ST_TO_ADDR
// area := 0 ;
7554: LD_ADDR_VAR 0 5
7558: PUSH
7559: LD_INT 0
7561: ST_TO_ADDR
// attacking := false ;
7562: LD_ADDR_VAR 0 3
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// for i in tmp do
7570: LD_ADDR_VAR 0 1
7574: PUSH
7575: LD_VAR 0 2
7579: PUSH
7580: FOR_IN
7581: IFFALSE 8009
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7583: LD_VAR 0 1
7587: PPUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 1
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 69
7602: PPUSH
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 74
7612: PPUSH
7613: CALL_OW 296
7617: PUSH
7618: LD_INT 10
7620: LESS
7621: PUSH
7622: LD_VAR 0 1
7626: PPUSH
7627: CALL_OW 314
7631: NOT
7632: AND
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 110
7643: NOT
7644: AND
7645: PUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 256
7655: PUSH
7656: LD_INT 650
7658: GREATER
7659: AND
7660: IFFALSE 7704
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7662: LD_VAR 0 1
7666: PPUSH
7667: LD_INT 22
7669: PUSH
7670: LD_INT 1
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PPUSH
7677: CALL_OW 69
7681: PPUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 74
7691: PPUSH
7692: CALL_OW 115
// attacking := true ;
7696: LD_ADDR_VAR 0 3
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7704: LD_VAR 0 1
7708: PPUSH
7709: CALL_OW 110
7713: NOT
7714: PUSH
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 256
7724: PUSH
7725: LD_INT 650
7727: LESS
7728: AND
7729: PUSH
7730: LD_VAR 0 1
7734: PPUSH
7735: CALL_OW 247
7739: PUSH
7740: LD_INT 2
7742: EQUAL
7743: AND
7744: IFFALSE 7773
// begin SetTag ( i , 1 ) ;
7746: LD_VAR 0 1
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_INT 130
7765: PPUSH
7766: LD_INT 139
7768: PPUSH
7769: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7773: LD_VAR 0 1
7777: PPUSH
7778: CALL_OW 110
7782: PUSH
7783: LD_INT 1
7785: EQUAL
7786: PUSH
7787: LD_VAR 0 1
7791: PPUSH
7792: LD_INT 130
7794: PPUSH
7795: LD_INT 139
7797: PPUSH
7798: CALL_OW 297
7802: PUSH
7803: LD_INT 6
7805: LESS
7806: AND
7807: IFFALSE 7821
// SetTag ( i , 2 ) ;
7809: LD_VAR 0 1
7813: PPUSH
7814: LD_INT 2
7816: PPUSH
7817: CALL_OW 109
// if GetTag ( i ) = 2 then
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 110
7830: PUSH
7831: LD_INT 2
7833: EQUAL
7834: IFFALSE 7969
// begin if GetLives ( i ) = 1000 then
7836: LD_VAR 0 1
7840: PPUSH
7841: CALL_OW 256
7845: PUSH
7846: LD_INT 1000
7848: EQUAL
7849: IFFALSE 7865
// SetTag ( i , 3 ) else
7851: LD_VAR 0 1
7855: PPUSH
7856: LD_INT 3
7858: PPUSH
7859: CALL_OW 109
7863: GO 7969
// if IsDrivenBy ( i ) then
7865: LD_VAR 0 1
7869: PPUSH
7870: CALL_OW 311
7874: IFFALSE 7969
// begin mech := IsDrivenBy ( i ) ;
7876: LD_ADDR_VAR 0 6
7880: PUSH
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL_OW 311
7890: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7891: LD_INT 1
7893: PPUSH
7894: LD_VAR 0 6
7898: PPUSH
7899: CALL_OW 292
7903: NOT
7904: PUSH
7905: LD_VAR 0 6
7909: PPUSH
7910: CALL_OW 256
7914: PUSH
7915: LD_INT 1000
7917: LESS
7918: AND
7919: IFFALSE 7933
// SetLives ( mech , 1000 ) ;
7921: LD_VAR 0 6
7925: PPUSH
7926: LD_INT 1000
7928: PPUSH
7929: CALL_OW 234
// if not See ( 1 , i ) then
7933: LD_INT 1
7935: PPUSH
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 292
7945: NOT
7946: IFFALSE 7960
// SetFuel ( i , 100 ) ;
7948: LD_VAR 0 1
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7960: LD_VAR 0 6
7964: PPUSH
7965: CALL 69665 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 110
7978: PUSH
7979: LD_INT 3
7981: EQUAL
7982: PUSH
7983: LD_VAR 0 1
7987: PPUSH
7988: CALL_OW 311
7992: AND
7993: IFFALSE 8007
// SetTag ( i , 0 ) ;
7995: LD_VAR 0 1
7999: PPUSH
8000: LD_INT 0
8002: PPUSH
8003: CALL_OW 109
// end ;
8007: GO 7580
8009: POP
8010: POP
// if attacking then
8011: LD_VAR 0 3
8015: IFFALSE 8019
// exit ;
8017: GO 8163
// for i in areas do
8019: LD_ADDR_VAR 0 1
8023: PUSH
8024: LD_VAR 0 4
8028: PUSH
8029: FOR_IN
8030: IFFALSE 8067
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8032: LD_VAR 0 1
8036: PPUSH
8037: LD_INT 22
8039: PUSH
8040: LD_INT 1
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 70
8051: IFFALSE 8065
// begin area := i ;
8053: LD_ADDR_VAR 0 5
8057: PUSH
8058: LD_VAR 0 1
8062: ST_TO_ADDR
// break ;
8063: GO 8067
// end ;
8065: GO 8029
8067: POP
8068: POP
// if area then
8069: LD_VAR 0 5
8073: IFFALSE 8163
// begin for i in tmp do
8075: LD_ADDR_VAR 0 1
8079: PUSH
8080: LD_VAR 0 2
8084: PUSH
8085: FOR_IN
8086: IFFALSE 8161
// begin if GetTag ( i ) then
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 110
8097: IFFALSE 8101
// continue ;
8099: GO 8085
// if GetFuel ( i ) < 33 then
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 261
8110: PUSH
8111: LD_INT 33
8113: LESS
8114: IFFALSE 8128
// SetFuel ( i , 33 ) ;
8116: LD_VAR 0 1
8120: PPUSH
8121: LD_INT 33
8123: PPUSH
8124: CALL_OW 240
// if not IsInArea ( i , area ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_VAR 0 5
8137: PPUSH
8138: CALL_OW 308
8142: NOT
8143: IFFALSE 8159
// ComMoveToArea ( i , area ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: LD_VAR 0 5
8154: PPUSH
8155: CALL_OW 113
// end ;
8159: GO 8085
8161: POP
8162: POP
// end ; end ;
8163: PPOPN 6
8165: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8166: LD_OWVAR 67
8170: PUSH
8171: LD_INT 1
8173: GREATER
8174: IFFALSE 8459
8176: GO 8178
8178: DISABLE
8179: LD_INT 0
8181: PPUSH
8182: PPUSH
8183: PPUSH
8184: PPUSH
8185: PPUSH
8186: PPUSH
// begin uc_side := 3 ;
8187: LD_ADDR_OWVAR 20
8191: PUSH
8192: LD_INT 3
8194: ST_TO_ADDR
// uc_nation := 3 ;
8195: LD_ADDR_OWVAR 21
8199: PUSH
8200: LD_INT 3
8202: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8203: LD_ADDR_VAR 0 5
8207: PUSH
8208: LD_INT 18900
8210: PUSH
8211: LD_INT 14700
8213: PUSH
8214: LD_INT 12600
8216: PUSH
8217: LD_INT 11550
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: PUSH
8226: LD_OWVAR 67
8230: ARRAY
8231: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8232: LD_ADDR_VAR 0 6
8236: PUSH
8237: LD_INT 2
8239: PUSH
8240: LD_INT 2
8242: PUSH
8243: LD_INT 3
8245: PUSH
8246: LD_INT 3
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: PUSH
8255: LD_OWVAR 67
8259: ARRAY
8260: ST_TO_ADDR
// for i = 1 to count do
8261: LD_ADDR_VAR 0 1
8265: PUSH
8266: DOUBLE
8267: LD_INT 1
8269: DEC
8270: ST_TO_ADDR
8271: LD_VAR 0 6
8275: PUSH
8276: FOR_TO
8277: IFFALSE 8457
// begin wait ( time ) ;
8279: LD_VAR 0 5
8283: PPUSH
8284: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8288: LD_ADDR_VAR 0 2
8292: PUSH
8293: DOUBLE
8294: LD_INT 1
8296: DEC
8297: ST_TO_ADDR
8298: LD_INT 1
8300: PPUSH
8301: LD_OWVAR 67
8305: PPUSH
8306: CALL_OW 12
8310: PUSH
8311: FOR_TO
8312: IFFALSE 8453
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 3
8321: PPUSH
8322: LD_INT 3
8324: PPUSH
8325: LD_INT 22
8327: PPUSH
8328: LD_INT 1
8330: PPUSH
8331: LD_INT 1
8333: PPUSH
8334: LD_INT 43
8336: PUSH
8337: LD_INT 44
8339: PUSH
8340: LD_INT 42
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: LD_VAR 0 1
8352: PUSH
8353: LD_INT 3
8355: MOD
8356: PUSH
8357: LD_INT 1
8359: PLUS
8360: ARRAY
8361: PPUSH
8362: LD_INT 80
8364: PPUSH
8365: CALL 520 0 7
8369: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8370: LD_VAR 0 4
8374: PPUSH
8375: LD_INT 13
8377: PPUSH
8378: LD_INT 0
8380: PPUSH
8381: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8385: LD_INT 0
8387: PPUSH
8388: LD_INT 3
8390: PPUSH
8391: LD_INT 4
8393: PUSH
8394: LD_INT 5
8396: PUSH
8397: LD_INT 5
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: PUSH
8405: LD_OWVAR 67
8409: ARRAY
8410: PPUSH
8411: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8415: CALL_OW 44
8419: PPUSH
8420: LD_VAR 0 4
8424: PPUSH
8425: CALL_OW 52
// wait ( 0 0$01 ) ;
8429: LD_INT 35
8431: PPUSH
8432: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8436: LD_VAR 0 4
8440: PPUSH
8441: LD_INT 143
8443: PPUSH
8444: LD_INT 143
8446: PPUSH
8447: CALL_OW 111
// end ;
8451: GO 8311
8453: POP
8454: POP
// end ;
8455: GO 8276
8457: POP
8458: POP
// end ;
8459: PPOPN 6
8461: END
// every 8 8$00 do var i , un , time ;
8462: GO 8464
8464: DISABLE
8465: LD_INT 0
8467: PPUSH
8468: PPUSH
8469: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8470: LD_ADDR_VAR 0 3
8474: PUSH
8475: LD_INT 6300
8477: PUSH
8478: LD_INT 2100
8480: PUSH
8481: LD_INT 1050
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: ST_TO_ADDR
// wait ( time ) ;
8489: LD_VAR 0 3
8493: PPUSH
8494: CALL_OW 67
// uc_side := 3 ;
8498: LD_ADDR_OWVAR 20
8502: PUSH
8503: LD_INT 3
8505: ST_TO_ADDR
// uc_nation := 3 ;
8506: LD_ADDR_OWVAR 21
8510: PUSH
8511: LD_INT 3
8513: ST_TO_ADDR
// for i = 1 to 2 do
8514: LD_ADDR_VAR 0 1
8518: PUSH
8519: DOUBLE
8520: LD_INT 1
8522: DEC
8523: ST_TO_ADDR
8524: LD_INT 2
8526: PUSH
8527: FOR_TO
8528: IFFALSE 8591
// begin PrepareHuman ( false , 1 , 4 ) ;
8530: LD_INT 0
8532: PPUSH
8533: LD_INT 1
8535: PPUSH
8536: LD_INT 4
8538: PPUSH
8539: CALL_OW 380
// un := CreateHuman ;
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: CALL_OW 44
8552: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8553: LD_VAR 0 2
8557: PPUSH
8558: LD_INT 16
8560: PPUSH
8561: CALL_OW 52
// ComExitBuilding ( un ) ;
8565: LD_VAR 0 2
8569: PPUSH
8570: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8574: LD_VAR 0 2
8578: PPUSH
8579: LD_INT 41
8581: PPUSH
8582: LD_INT 76
8584: PPUSH
8585: CALL_OW 174
// end ;
8589: GO 8527
8591: POP
8592: POP
// end ; end_of_file
8593: PPOPN 3
8595: END
// export function Action ; begin
8596: LD_INT 0
8598: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8599: LD_INT 28
8601: PPUSH
8602: LD_INT 3
8604: PPUSH
8605: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8609: LD_INT 41
8611: PPUSH
8612: LD_INT 76
8614: PPUSH
8615: LD_INT 1
8617: PPUSH
8618: LD_INT 10
8620: PPUSH
8621: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8625: LD_INT 41
8627: PPUSH
8628: LD_INT 76
8630: PPUSH
8631: LD_INT 1
8633: PPUSH
8634: CALL_OW 331
// InGameOn ;
8638: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8642: LD_EXP 19
8646: PPUSH
8647: LD_STRING D2-Har-1
8649: PPUSH
8650: CALL_OW 94
// InGameOff ;
8654: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8658: LD_STRING M1
8660: PPUSH
8661: CALL_OW 337
// end ;
8665: LD_VAR 0 1
8669: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8670: LD_EXP 4
8674: PUSH
8675: LD_INT 1
8677: GREATER
8678: IFFALSE 8769
8680: GO 8682
8682: DISABLE
8683: LD_INT 0
8685: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8686: LD_ADDR_VAR 0 1
8690: PUSH
8691: LD_INT 1
8693: PPUSH
8694: CALL 608 0 1
8698: PUSH
8699: LD_INT 1
8701: ARRAY
8702: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8703: LD_VAR 0 1
8707: PPUSH
8708: LD_STRING D2a-Sol1-1
8710: PPUSH
8711: CALL_OW 88
// if not un then
8715: LD_VAR 0 1
8719: NOT
8720: IFFALSE 8751
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8722: LD_ADDR_VAR 0 1
8726: PUSH
8727: LD_INT 2
8729: PPUSH
8730: CALL 608 0 1
8734: PUSH
8735: LD_INT 1
8737: ARRAY
8738: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8739: LD_VAR 0 1
8743: PPUSH
8744: LD_STRING D2a-FSol1-1
8746: PPUSH
8747: CALL_OW 88
// end ; if Khatam then
8751: LD_EXP 17
8755: IFFALSE 8769
// Say ( Khatam , D3b-Khat-3 ) ;
8757: LD_EXP 17
8761: PPUSH
8762: LD_STRING D3b-Khat-3
8764: PPUSH
8765: CALL_OW 88
// end ;
8769: PPOPN 1
8771: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8772: LD_EXP 15
8776: PUSH
8777: LD_EXP 18
8781: NOT
8782: AND
8783: PUSH
8784: LD_INT 22
8786: PUSH
8787: LD_INT 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 92
8796: PUSH
8797: LD_EXP 15
8801: PPUSH
8802: CALL_OW 250
8806: PUSH
8807: LD_EXP 15
8811: PPUSH
8812: CALL_OW 251
8816: PUSH
8817: LD_INT 7
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: AND
8835: PUSH
8836: LD_INT 1
8838: PPUSH
8839: CALL_OW 463
8843: NOT
8844: AND
8845: PUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 463
8853: NOT
8854: AND
8855: IFFALSE 9442
8857: GO 8859
8859: DISABLE
8860: LD_INT 0
8862: PPUSH
8863: PPUSH
// begin InGameOn ;
8864: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8868: LD_ADDR_VAR 0 2
8872: PUSH
8873: LD_INT 22
8875: PUSH
8876: LD_INT 0
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 25
8885: PUSH
8886: LD_INT 12
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PPUSH
8897: CALL_OW 69
8901: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8902: LD_ADDR_VAR 0 2
8906: PUSH
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_EXP 15
8916: PPUSH
8917: CALL_OW 74
8921: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 22
8929: PUSH
8930: LD_INT 1
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 21
8939: PUSH
8940: LD_INT 1
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: LD_INT 91
8949: PUSH
8950: LD_EXP 15
8954: PUSH
8955: LD_INT 20
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: LIST
8967: PPUSH
8968: CALL_OW 69
8972: PUSH
8973: FOR_IN
8974: IFFALSE 8992
// ComTurnUnit ( i , Frank ) ;
8976: LD_VAR 0 1
8980: PPUSH
8981: LD_EXP 15
8985: PPUSH
8986: CALL_OW 119
8990: GO 8973
8992: POP
8993: POP
// SetSide ( Frank , 1 ) ;
8994: LD_EXP 15
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9006: LD_EXP 9
9010: PPUSH
9011: LD_EXP 15
9015: PPUSH
9016: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9020: LD_EXP 9
9024: PPUSH
9025: LD_EXP 15
9029: PPUSH
9030: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9034: LD_EXP 15
9038: PPUSH
9039: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9043: LD_EXP 15
9047: PPUSH
9048: LD_STRING D3a-Frank-1
9050: PPUSH
9051: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9055: LD_VAR 0 2
9059: PPUSH
9060: LD_INT 42
9062: PPUSH
9063: LD_INT 78
9065: PPUSH
9066: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9070: LD_VAR 0 2
9074: PPUSH
9075: LD_EXP 15
9079: PPUSH
9080: CALL_OW 179
// if Lisa then
9084: LD_EXP 14
9088: IFFALSE 9102
// Say ( Lisa , D3a-Lisa-1 ) ;
9090: LD_EXP 14
9094: PPUSH
9095: LD_STRING D3a-Lisa-1
9097: PPUSH
9098: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9102: LD_EXP 9
9106: PPUSH
9107: LD_STRING D3a-JMM-1
9109: PPUSH
9110: CALL_OW 88
// if Cyrus then
9114: LD_EXP 13
9118: IFFALSE 9132
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9120: LD_EXP 13
9124: PPUSH
9125: LD_STRING D3a-Cyrus-1
9127: PPUSH
9128: CALL_OW 88
// if GetRandom ( sex_male ) then
9132: LD_INT 1
9134: PPUSH
9135: CALL 608 0 1
9139: IFFALSE 9160
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9141: LD_INT 1
9143: PPUSH
9144: CALL 608 0 1
9148: PUSH
9149: LD_INT 1
9151: ARRAY
9152: PPUSH
9153: LD_STRING D3a-Sol1-1
9155: PPUSH
9156: CALL_OW 88
// if GetRandom ( sex_female ) then
9160: LD_INT 2
9162: PPUSH
9163: CALL 608 0 1
9167: IFFALSE 9188
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9169: LD_INT 2
9171: PPUSH
9172: CALL 608 0 1
9176: PUSH
9177: LD_INT 1
9179: ARRAY
9180: PPUSH
9181: LD_STRING D3a-FSol1-1
9183: PPUSH
9184: CALL_OW 88
// if Gladstone then
9188: LD_EXP 16
9192: IFFALSE 9206
// Say ( Gladstone , D3a-Glad-1 ) ;
9194: LD_EXP 16
9198: PPUSH
9199: LD_STRING D3a-Glad-1
9201: PPUSH
9202: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9206: LD_VAR 0 2
9210: PPUSH
9211: LD_INT 60
9213: PPUSH
9214: LD_INT 113
9216: PPUSH
9217: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9221: LD_EXP 15
9225: PPUSH
9226: LD_STRING D3a-Frank-2
9228: PPUSH
9229: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9233: LD_EXP 15
9237: PPUSH
9238: LD_EXP 9
9242: PPUSH
9243: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9247: LD_EXP 9
9251: PPUSH
9252: LD_STRING D3a-JMM-2
9254: PPUSH
9255: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9259: LD_INT 1
9261: PPUSH
9262: LD_INT 4
9264: PPUSH
9265: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9269: LD_INT 85
9271: PPUSH
9272: LD_INT 134
9274: PPUSH
9275: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9279: LD_EXP 15
9283: PPUSH
9284: LD_STRING D3a-Frank-3
9286: PPUSH
9287: CALL_OW 88
// Wait ( 0 0$01 ) ;
9291: LD_INT 35
9293: PPUSH
9294: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9298: LD_INT 166
9300: PPUSH
9301: LD_INT 136
9303: PPUSH
9304: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9308: LD_EXP 9
9312: PPUSH
9313: LD_STRING D3a-JMM-3
9315: PPUSH
9316: CALL_OW 88
// Wait ( 0 0$01 ) ;
9320: LD_INT 35
9322: PPUSH
9323: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9327: LD_EXP 15
9331: PPUSH
9332: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9336: LD_EXP 15
9340: PPUSH
9341: LD_STRING D3a-Frank-4
9343: PPUSH
9344: CALL_OW 88
// if Lisa then
9348: LD_EXP 14
9352: IFFALSE 9366
// Say ( Lisa , D3a-Lisa-4 ) ;
9354: LD_EXP 14
9358: PPUSH
9359: LD_STRING D3a-Lisa-4
9361: PPUSH
9362: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9366: LD_EXP 9
9370: PPUSH
9371: LD_STRING D3a-JMM-4
9373: PPUSH
9374: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9378: LD_EXP 15
9382: PPUSH
9383: LD_STRING D3a-Frank-5
9385: PPUSH
9386: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9390: LD_EXP 9
9394: PPUSH
9395: LD_STRING D3a-JMM-5
9397: PPUSH
9398: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9402: LD_EXP 15
9406: PPUSH
9407: LD_STRING D3a-Frank-6
9409: PPUSH
9410: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9414: LD_EXP 9
9418: PPUSH
9419: LD_STRING D3a-JMM-6
9421: PPUSH
9422: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9426: LD_EXP 15
9430: PPUSH
9431: LD_STRING D3a-Frank-7
9433: PPUSH
9434: CALL_OW 88
// InGameOff ;
9438: CALL_OW 9
// end ;
9442: PPOPN 2
9444: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9445: LD_EXP 18
9449: PUSH
9450: LD_EXP 15
9454: NOT
9455: AND
9456: PUSH
9457: LD_INT 22
9459: PUSH
9460: LD_INT 1
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 92
9469: PUSH
9470: LD_EXP 18
9474: PPUSH
9475: CALL_OW 250
9479: PUSH
9480: LD_EXP 18
9484: PPUSH
9485: CALL_OW 251
9489: PUSH
9490: LD_INT 7
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PPUSH
9503: CALL_OW 69
9507: AND
9508: PUSH
9509: LD_INT 1
9511: PPUSH
9512: CALL_OW 463
9516: NOT
9517: AND
9518: PUSH
9519: LD_INT 4
9521: PPUSH
9522: CALL_OW 463
9526: NOT
9527: AND
9528: IFFALSE 9708
9530: GO 9532
9532: DISABLE
// begin InGameOn ;
9533: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9537: LD_EXP 9
9541: PPUSH
9542: LD_EXP 18
9546: PPUSH
9547: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9551: LD_EXP 18
9555: PPUSH
9556: LD_EXP 9
9560: PPUSH
9561: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9565: LD_EXP 18
9569: PPUSH
9570: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9574: LD_EXP 18
9578: PPUSH
9579: LD_STRING D3b-Yam-1
9581: PPUSH
9582: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9586: LD_EXP 9
9590: PPUSH
9591: LD_STRING D3b-JMM-1
9593: PPUSH
9594: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9598: LD_INT 1
9600: PPUSH
9601: LD_INT 4
9603: PPUSH
9604: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9608: LD_INT 85
9610: PPUSH
9611: LD_INT 134
9613: PPUSH
9614: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9618: LD_EXP 18
9622: PPUSH
9623: LD_STRING D3b-Yam-2
9625: PPUSH
9626: CALL_OW 88
// Wait ( 0 0$01 ) ;
9630: LD_INT 35
9632: PPUSH
9633: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9637: LD_EXP 9
9641: PPUSH
9642: LD_STRING D3b-JMM-2
9644: PPUSH
9645: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9649: LD_INT 166
9651: PPUSH
9652: LD_INT 136
9654: PPUSH
9655: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9659: LD_EXP 18
9663: PPUSH
9664: LD_STRING D3b-Yam-3
9666: PPUSH
9667: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9671: LD_EXP 9
9675: PPUSH
9676: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9680: LD_EXP 9
9684: PPUSH
9685: LD_STRING D3b-JMM-3a
9687: PPUSH
9688: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9692: LD_EXP 18
9696: PPUSH
9697: LD_INT 1
9699: PPUSH
9700: CALL_OW 235
// InGameOff ;
9704: CALL_OW 9
// end ;
9708: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9709: LD_INT 7
9711: PPUSH
9712: LD_INT 22
9714: PUSH
9715: LD_INT 1
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 3
9724: PUSH
9725: LD_INT 24
9727: PUSH
9728: LD_INT 1000
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PPUSH
9743: CALL_OW 70
9747: IFFALSE 10203
9749: GO 9751
9751: DISABLE
9752: LD_INT 0
9754: PPUSH
9755: PPUSH
9756: PPUSH
9757: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9758: LD_INT 35
9760: PPUSH
9761: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9765: LD_ADDR_VAR 0 1
9769: PUSH
9770: LD_INT 7
9772: PPUSH
9773: LD_INT 22
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 3
9785: PUSH
9786: LD_INT 24
9788: PUSH
9789: LD_INT 1000
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 70
9808: ST_TO_ADDR
// if not un then
9809: LD_VAR 0 1
9813: NOT
9814: IFFALSE 9818
// continue ;
9816: GO 9758
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9818: LD_ADDR_VAR 0 3
9822: PUSH
9823: LD_VAR 0 1
9827: PUSH
9828: LD_INT 1
9830: ARRAY
9831: PPUSH
9832: CALL 2053 0 1
9836: ST_TO_ADDR
// until tw ;
9837: LD_VAR 0 3
9841: IFFALSE 9758
// DialogueOn ;
9843: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9847: LD_VAR 0 3
9851: PPUSH
9852: CALL_OW 87
// if Lisa then
9856: LD_EXP 14
9860: IFFALSE 9888
// begin Say ( Lisa , D5-Lisa-1 ) ;
9862: LD_EXP 14
9866: PPUSH
9867: LD_STRING D5-Lisa-1
9869: PPUSH
9870: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9874: LD_EXP 9
9878: PPUSH
9879: LD_STRING D5-JMM-1a
9881: PPUSH
9882: CALL_OW 88
// end else
9886: GO 9900
// Say ( JMM , D5-JMM-1 ) ;
9888: LD_EXP 9
9892: PPUSH
9893: LD_STRING D5-JMM-1
9895: PPUSH
9896: CALL_OW 88
// DialogueOff ;
9900: CALL_OW 7
// while ( true ) do
9904: LD_INT 1
9906: IFFALSE 9962
// begin wait ( 0 0$01 ) ;
9908: LD_INT 35
9910: PPUSH
9911: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9915: LD_ADDR_VAR 0 2
9919: PUSH
9920: LD_INT 8
9922: PPUSH
9923: LD_INT 30
9925: PUSH
9926: LD_INT 26
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 101
9935: PUSH
9936: LD_INT 1
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 71
9951: ST_TO_ADDR
// if x then
9952: LD_VAR 0 2
9956: IFFALSE 9960
// break ;
9958: GO 9962
// end ;
9960: GO 9904
// CenterOnUnits ( x [ 1 ] ) ;
9962: LD_VAR 0 2
9966: PUSH
9967: LD_INT 1
9969: ARRAY
9970: PPUSH
9971: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9975: LD_EXP 15
9979: PUSH
9980: LD_EXP 15
9984: PPUSH
9985: CALL_OW 255
9989: PUSH
9990: LD_INT 1
9992: EQUAL
9993: AND
9994: IFFALSE 10010
// Say ( Frank , D5a-Frank-1 ) else
9996: LD_EXP 15
10000: PPUSH
10001: LD_STRING D5a-Frank-1
10003: PPUSH
10004: CALL_OW 88
10008: GO 10064
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10010: LD_EXP 18
10014: PUSH
10015: LD_EXP 18
10019: PPUSH
10020: CALL_OW 255
10024: PUSH
10025: LD_INT 1
10027: EQUAL
10028: AND
10029: IFFALSE 10045
// Say ( Kikuchi , D5a-Yam-1 ) else
10031: LD_EXP 18
10035: PPUSH
10036: LD_STRING D5a-Yam-1
10038: PPUSH
10039: CALL_OW 88
10043: GO 10064
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10045: LD_INT 1
10047: PPUSH
10048: CALL 608 0 1
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: LD_STRING D5a-Sol1-1
10059: PPUSH
10060: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10064: LD_EXP 9
10068: PPUSH
10069: LD_STRING D5a-JMM-1
10071: PPUSH
10072: CALL_OW 88
// if Cyrus then
10076: LD_EXP 13
10080: IFFALSE 10094
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10082: LD_EXP 13
10086: PPUSH
10087: LD_STRING D5a-Cyrus-1
10089: PPUSH
10090: CALL_OW 88
// x := false ;
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// while ( true ) do
10102: LD_INT 1
10104: IFFALSE 10191
// begin wait ( 0 0$01 ) ;
10106: LD_INT 35
10108: PPUSH
10109: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10113: LD_ADDR_VAR 0 4
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: LD_INT 30
10123: PUSH
10124: LD_INT 0
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 30
10133: PUSH
10134: LD_INT 1
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: PPUSH
10146: CALL_OW 69
10150: PUSH
10151: LD_INT 1
10153: DIFF
10154: PUSH
10155: FOR_IN
10156: IFFALSE 10179
// if BaseNeedEnergy ( i ) then
10158: LD_VAR 0 4
10162: PPUSH
10163: CALL 1178 0 1
10167: IFFALSE 10177
// x := true ;
10169: LD_ADDR_VAR 0 2
10173: PUSH
10174: LD_INT 1
10176: ST_TO_ADDR
10177: GO 10155
10179: POP
10180: POP
// if x then
10181: LD_VAR 0 2
10185: IFFALSE 10189
// break ;
10187: GO 10191
// end ;
10189: GO 10102
// Say ( JMM , D5b-JMM-1 ) ;
10191: LD_EXP 9
10195: PPUSH
10196: LD_STRING D5b-JMM-1
10198: PPUSH
10199: CALL_OW 88
// end ;
10203: PPOPN 4
10205: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10206: LD_EXP 5
10210: PUSH
10211: LD_INT 1
10213: ARRAY
10214: PUSH
10215: LD_OWVAR 1
10219: LESS
10220: IFFALSE 10420
10222: GO 10224
10224: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10225: LD_INT 16
10227: PPUSH
10228: CALL_OW 301
10232: NOT
10233: IFFALSE 10256
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10235: LD_EXP 19
10239: PPUSH
10240: LD_STRING D3b-Har-3
10242: PPUSH
10243: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10247: LD_STRING M2a
10249: PPUSH
10250: CALL_OW 337
// end else
10254: GO 10275
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10256: LD_EXP 19
10260: PPUSH
10261: LD_STRING D3b-Har-3a
10263: PPUSH
10264: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10268: LD_STRING M2
10270: PPUSH
10271: CALL_OW 337
// end ; can_end := true ;
10275: LD_ADDR_EXP 6
10279: PUSH
10280: LD_INT 1
10282: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10283: LD_INT 9
10285: PPUSH
10286: LD_INT 1
10288: PPUSH
10289: CALL_OW 424
// Wait ( 0 0$02 ) ;
10293: LD_INT 70
10295: PPUSH
10296: CALL_OW 67
// if Lisa then
10300: LD_EXP 14
10304: IFFALSE 10318
// Say ( Lisa , D3b-Lisa ) ;
10306: LD_EXP 14
10310: PPUSH
10311: LD_STRING D3b-Lisa
10313: PPUSH
10314: CALL_OW 88
// if Bobby then
10318: LD_EXP 12
10322: IFFALSE 10336
// Say ( Bobby , D3b-Bobby-3 ) ;
10324: LD_EXP 12
10328: PPUSH
10329: LD_STRING D3b-Bobby-3
10331: PPUSH
10332: CALL_OW 88
// if Cyrus then
10336: LD_EXP 13
10340: IFFALSE 10354
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10342: LD_EXP 13
10346: PPUSH
10347: LD_STRING D3b-Cyrus-3
10349: PPUSH
10350: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10354: LD_EXP 15
10358: PUSH
10359: LD_EXP 15
10363: PPUSH
10364: CALL_OW 255
10368: PUSH
10369: LD_INT 1
10371: EQUAL
10372: AND
10373: IFFALSE 10387
// Say ( Frank , D3b-Frank-3 ) ;
10375: LD_EXP 15
10379: PPUSH
10380: LD_STRING D3b-Frank-3
10382: PPUSH
10383: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10387: LD_EXP 18
10391: PUSH
10392: LD_EXP 18
10396: PPUSH
10397: CALL_OW 255
10401: PUSH
10402: LD_INT 1
10404: EQUAL
10405: AND
10406: IFFALSE 10420
// Say ( Kikuchi , D3b-Yam-4 ) ;
10408: LD_EXP 18
10412: PPUSH
10413: LD_STRING D3b-Yam-4
10415: PPUSH
10416: CALL_OW 88
// end ;
10420: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10421: LD_EXP 5
10425: PUSH
10426: LD_INT 2
10428: ARRAY
10429: PUSH
10430: LD_OWVAR 1
10434: LESS
10435: IFFALSE 10467
10437: GO 10439
10439: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10440: LD_EXP 19
10444: PPUSH
10445: LD_STRING D4-Har-1
10447: PPUSH
10448: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10452: LD_STRING M3
10454: PPUSH
10455: CALL_OW 337
// must_end := true ;
10459: LD_ADDR_EXP 7
10463: PUSH
10464: LD_INT 1
10466: ST_TO_ADDR
// end ;
10467: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10468: LD_EXP 5
10472: PUSH
10473: LD_INT 3
10475: ARRAY
10476: PUSH
10477: LD_OWVAR 1
10481: LESS
10482: IFFALSE 10513
10484: GO 10486
10486: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10487: LD_INT 16
10489: PPUSH
10490: CALL_OW 301
10494: NOT
10495: IFFALSE 10506
// YouLost ( TimeOut1 ) else
10497: LD_STRING TimeOut1
10499: PPUSH
10500: CALL_OW 104
10504: GO 10513
// YouLost ( TimeOut2 ) ;
10506: LD_STRING TimeOut2
10508: PPUSH
10509: CALL_OW 104
// end ;
10513: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10514: LD_EXP 9
10518: PPUSH
10519: LD_INT 9
10521: PPUSH
10522: CALL_OW 308
10526: PUSH
10527: LD_EXP 6
10531: AND
10532: IFFALSE 11632
10534: GO 10536
10536: DISABLE
10537: LD_INT 0
10539: PPUSH
10540: PPUSH
10541: PPUSH
10542: PPUSH
10543: PPUSH
10544: PPUSH
// begin wait_on := false ;
10545: LD_ADDR_VAR 0 1
10549: PUSH
10550: LD_INT 0
10552: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10553: LD_INT 1
10555: PPUSH
10556: CALL 1255 0 1
10560: PUSH
10561: LD_INT 0
10563: PLUS
10564: PUSH
10565: LD_INT 1
10567: PPUSH
10568: LD_INT 9
10570: PPUSH
10571: CALL 1346 0 2
10575: PUSH
10576: LD_INT 1
10578: PPUSH
10579: LD_INT 9
10581: PPUSH
10582: CALL 1393 0 2
10586: ADD
10587: PUSH
10588: LD_INT 0
10590: PLUS
10591: GREATER
10592: IFFALSE 10641
// case Query ( Q1 ) of 1 :
10594: LD_STRING Q1
10596: PPUSH
10597: CALL_OW 97
10601: PUSH
10602: LD_INT 1
10604: DOUBLE
10605: EQUAL
10606: IFTRUE 10610
10608: GO 10621
10610: POP
// wait_on := true ; 2 :
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
10619: GO 10641
10621: LD_INT 2
10623: DOUBLE
10624: EQUAL
10625: IFTRUE 10629
10627: GO 10640
10629: POP
// wait_on := false ; end ;
10630: LD_ADDR_VAR 0 1
10634: PUSH
10635: LD_INT 0
10637: ST_TO_ADDR
10638: GO 10641
10640: POP
// repeat wait ( 0 0$01 ) ;
10641: LD_INT 35
10643: PPUSH
10644: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10648: LD_VAR 0 1
10652: NOT
10653: PUSH
10654: LD_INT 1
10656: PPUSH
10657: CALL 1255 0 1
10661: PUSH
10662: LD_INT 0
10664: PLUS
10665: PUSH
10666: LD_INT 1
10668: PPUSH
10669: LD_INT 9
10671: PPUSH
10672: CALL 1346 0 2
10676: PUSH
10677: LD_INT 1
10679: PPUSH
10680: LD_INT 9
10682: PPUSH
10683: CALL 1393 0 2
10687: ADD
10688: PUSH
10689: LD_INT 0
10691: PLUS
10692: EQUAL
10693: OR
10694: IFFALSE 10641
// DialogueOn ;
10696: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10700: LD_EXP 9
10704: PPUSH
10705: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10709: LD_EXP 9
10713: PPUSH
10714: LD_STRING D6-JMM-1
10716: PPUSH
10717: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10721: LD_EXP 19
10725: PPUSH
10726: LD_STRING D6-Har-1
10728: PPUSH
10729: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10733: LD_EXP 9
10737: PPUSH
10738: LD_STRING D6-JMM-2
10740: PPUSH
10741: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10745: LD_EXP 19
10749: PPUSH
10750: LD_STRING D6-Har-2
10752: PPUSH
10753: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10757: LD_EXP 9
10761: PPUSH
10762: LD_STRING D6-JMM-3
10764: PPUSH
10765: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10769: LD_EXP 19
10773: PPUSH
10774: LD_STRING D6-Har-3
10776: PPUSH
10777: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10781: LD_EXP 9
10785: PPUSH
10786: LD_STRING D6-JMM-4
10788: PPUSH
10789: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10793: LD_EXP 19
10797: PPUSH
10798: LD_STRING D6-Har-4
10800: PPUSH
10801: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10805: LD_EXP 9
10809: PPUSH
10810: LD_STRING D6-JMM-5
10812: PPUSH
10813: CALL_OW 88
// DialogueOff ;
10817: CALL_OW 7
// m1 := false ;
10821: LD_ADDR_VAR 0 4
10825: PUSH
10826: LD_INT 0
10828: ST_TO_ADDR
// m2 := false ;
10829: LD_ADDR_VAR 0 5
10833: PUSH
10834: LD_INT 0
10836: ST_TO_ADDR
// m3 := false ;
10837: LD_ADDR_VAR 0 6
10841: PUSH
10842: LD_INT 0
10844: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10845: LD_ADDR_VAR 0 3
10849: PUSH
10850: LD_INT 3
10852: PPUSH
10853: CALL 1524 0 1
10857: ST_TO_ADDR
// if tmp >= 35 then
10858: LD_VAR 0 3
10862: PUSH
10863: LD_INT 35
10865: GREATEREQUAL
10866: IFFALSE 10903
// begin AddMedal ( Destroy1 , - 1 ) ;
10868: LD_STRING Destroy1
10870: PPUSH
10871: LD_INT 1
10873: NEG
10874: PPUSH
10875: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10879: LD_STRING Destroy2
10881: PPUSH
10882: LD_INT 1
10884: NEG
10885: PPUSH
10886: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10890: LD_STRING Destroy3
10892: PPUSH
10893: LD_INT 1
10895: NEG
10896: PPUSH
10897: CALL_OW 101
// end else
10901: GO 11014
// begin AddMedal ( Destroy1 , 1 ) ;
10903: LD_STRING Destroy1
10905: PPUSH
10906: LD_INT 1
10908: PPUSH
10909: CALL_OW 101
// m1 := true ;
10913: LD_ADDR_VAR 0 4
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// if tmp >= 25 then
10921: LD_VAR 0 3
10925: PUSH
10926: LD_INT 25
10928: GREATEREQUAL
10929: IFFALSE 10955
// begin AddMedal ( Destroy2 , - 1 ) ;
10931: LD_STRING Destroy2
10933: PPUSH
10934: LD_INT 1
10936: NEG
10937: PPUSH
10938: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10942: LD_STRING Destroy3
10944: PPUSH
10945: LD_INT 1
10947: NEG
10948: PPUSH
10949: CALL_OW 101
// end else
10953: GO 11014
// begin AddMedal ( Destroy2 , 1 ) ;
10955: LD_STRING Destroy2
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: CALL_OW 101
// m2 := true ;
10965: LD_ADDR_VAR 0 5
10969: PUSH
10970: LD_INT 1
10972: ST_TO_ADDR
// if tmp >= 15 then
10973: LD_VAR 0 3
10977: PUSH
10978: LD_INT 15
10980: GREATEREQUAL
10981: IFFALSE 10996
// AddMedal ( Destroy3 , - 1 ) else
10983: LD_STRING Destroy3
10985: PPUSH
10986: LD_INT 1
10988: NEG
10989: PPUSH
10990: CALL_OW 101
10994: GO 11014
// begin AddMedal ( Destroy3 , 1 ) ;
10996: LD_STRING Destroy3
10998: PPUSH
10999: LD_INT 1
11001: PPUSH
11002: CALL_OW 101
// m3 := true ;
11006: LD_ADDR_VAR 0 6
11010: PUSH
11011: LD_INT 1
11013: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11014: LD_OWVAR 1
11018: PUSH
11019: LD_INT 67200
11021: LESSEQUAL
11022: IFFALSE 11031
// SetAchievement ( ACH_ASPEED_7 ) ;
11024: LD_STRING ACH_ASPEED_7
11026: PPUSH
11027: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11031: LD_VAR 0 4
11035: PUSH
11036: LD_VAR 0 5
11040: AND
11041: PUSH
11042: LD_VAR 0 6
11046: AND
11047: PUSH
11048: LD_OWVAR 67
11052: PUSH
11053: LD_INT 3
11055: GREATEREQUAL
11056: AND
11057: IFFALSE 11069
// SetAchievementEX ( ACH_AMER , 7 ) ;
11059: LD_STRING ACH_AMER
11061: PPUSH
11062: LD_INT 7
11064: PPUSH
11065: CALL_OW 564
// GiveMedals ( MAIN ) ;
11069: LD_STRING MAIN
11071: PPUSH
11072: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
11076: LD_ADDR_VAR 0 3
11080: PUSH
11081: LD_INT 1
11083: PPUSH
11084: LD_INT 9
11086: PPUSH
11087: CALL 1346 0 2
11091: PUSH
11092: LD_INT 1
11094: PPUSH
11095: LD_INT 9
11097: PPUSH
11098: CALL 1393 0 2
11102: UNION
11103: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11104: LD_VAR 0 3
11108: PPUSH
11109: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11113: LD_EXP 9
11117: PPUSH
11118: LD_EXP 3
11122: PUSH
11123: LD_STRING JMM
11125: STR
11126: PPUSH
11127: CALL_OW 38
// if Brown in tmp then
11131: LD_EXP 10
11135: PUSH
11136: LD_VAR 0 3
11140: IN
11141: IFFALSE 11161
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11143: LD_EXP 10
11147: PPUSH
11148: LD_EXP 3
11152: PUSH
11153: LD_STRING Brown
11155: STR
11156: PPUSH
11157: CALL_OW 38
// if Donaldson in tmp then
11161: LD_EXP 11
11165: PUSH
11166: LD_VAR 0 3
11170: IN
11171: IFFALSE 11191
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11173: LD_EXP 11
11177: PPUSH
11178: LD_EXP 3
11182: PUSH
11183: LD_STRING Donaldson
11185: STR
11186: PPUSH
11187: CALL_OW 38
// if Bobby in tmp then
11191: LD_EXP 12
11195: PUSH
11196: LD_VAR 0 3
11200: IN
11201: IFFALSE 11221
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11203: LD_EXP 12
11207: PPUSH
11208: LD_EXP 3
11212: PUSH
11213: LD_STRING Bobby
11215: STR
11216: PPUSH
11217: CALL_OW 38
// if Cyrus in tmp then
11221: LD_EXP 13
11225: PUSH
11226: LD_VAR 0 3
11230: IN
11231: IFFALSE 11251
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11233: LD_EXP 13
11237: PPUSH
11238: LD_EXP 3
11242: PUSH
11243: LD_STRING Cyrus
11245: STR
11246: PPUSH
11247: CALL_OW 38
// if Lisa in tmp then
11251: LD_EXP 14
11255: PUSH
11256: LD_VAR 0 3
11260: IN
11261: IFFALSE 11281
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11263: LD_EXP 14
11267: PPUSH
11268: LD_EXP 3
11272: PUSH
11273: LD_STRING Lisa
11275: STR
11276: PPUSH
11277: CALL_OW 38
// if Frank in tmp then
11281: LD_EXP 15
11285: PUSH
11286: LD_VAR 0 3
11290: IN
11291: IFFALSE 11311
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11293: LD_EXP 15
11297: PPUSH
11298: LD_EXP 3
11302: PUSH
11303: LD_STRING Frank
11305: STR
11306: PPUSH
11307: CALL_OW 38
// if Gladstone in tmp then
11311: LD_EXP 16
11315: PUSH
11316: LD_VAR 0 3
11320: IN
11321: IFFALSE 11341
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11323: LD_EXP 16
11327: PPUSH
11328: LD_EXP 3
11332: PUSH
11333: LD_STRING Gladstone
11335: STR
11336: PPUSH
11337: CALL_OW 38
// if Khatam in tmp then
11341: LD_EXP 17
11345: PUSH
11346: LD_VAR 0 3
11350: IN
11351: IFFALSE 11371
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11353: LD_EXP 17
11357: PPUSH
11358: LD_EXP 3
11362: PUSH
11363: LD_STRING Khatam
11365: STR
11366: PPUSH
11367: CALL_OW 38
// if Kikuchi in tmp then
11371: LD_EXP 18
11375: PUSH
11376: LD_VAR 0 3
11380: IN
11381: IFFALSE 11401
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11383: LD_EXP 18
11387: PPUSH
11388: LD_EXP 3
11392: PUSH
11393: LD_STRING Kikuchi
11395: STR
11396: PPUSH
11397: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11401: LD_VAR 0 3
11405: PUSH
11406: LD_EXP 9
11410: PUSH
11411: LD_EXP 10
11415: PUSH
11416: LD_EXP 11
11420: PUSH
11421: LD_EXP 12
11425: PUSH
11426: LD_EXP 13
11430: PUSH
11431: LD_EXP 14
11435: PUSH
11436: LD_EXP 15
11440: PUSH
11441: LD_EXP 16
11445: PUSH
11446: LD_EXP 18
11450: PUSH
11451: LD_EXP 17
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: DIFF
11468: PPUSH
11469: LD_EXP 3
11473: PUSH
11474: LD_STRING others
11476: STR
11477: PPUSH
11478: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11482: LD_OWVAR 1
11486: PPUSH
11487: LD_STRING 07_time
11489: PPUSH
11490: CALL_OW 39
// tmp := [ ] ;
11494: LD_ADDR_VAR 0 3
11498: PUSH
11499: EMPTY
11500: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_INT 9
11508: PPUSH
11509: LD_INT 22
11511: PUSH
11512: LD_INT 1
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 23
11521: PUSH
11522: LD_INT 1
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 21
11531: PUSH
11532: LD_INT 2
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: PUSH
11544: EMPTY
11545: LIST
11546: PPUSH
11547: CALL_OW 70
11551: PUSH
11552: FOR_IN
11553: IFFALSE 11614
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11555: LD_ADDR_VAR 0 3
11559: PUSH
11560: LD_VAR 0 3
11564: PUSH
11565: LD_VAR 0 2
11569: PPUSH
11570: CALL_OW 265
11574: PUSH
11575: LD_VAR 0 2
11579: PPUSH
11580: CALL_OW 262
11584: PUSH
11585: LD_VAR 0 2
11589: PPUSH
11590: CALL_OW 263
11594: PUSH
11595: LD_VAR 0 2
11599: PPUSH
11600: CALL_OW 264
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: ADD
11611: ST_TO_ADDR
11612: GO 11552
11614: POP
11615: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_STRING 07_vehicles
11623: PPUSH
11624: CALL_OW 39
// YouWin ;
11628: CALL_OW 103
// end ; end_of_file
11632: PPOPN 6
11634: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11635: LD_VAR 0 1
11639: PPUSH
11640: CALL 26652 0 1
// if un = JMM then
11644: LD_VAR 0 1
11648: PUSH
11649: LD_EXP 9
11653: EQUAL
11654: IFFALSE 11663
// YouLost ( JMM ) ;
11656: LD_STRING JMM
11658: PPUSH
11659: CALL_OW 104
// if GetType ( un ) = unit_building then
11663: LD_VAR 0 1
11667: PPUSH
11668: CALL_OW 247
11672: PUSH
11673: LD_INT 3
11675: EQUAL
11676: IFFALSE 11692
// buildings_counter := buildings_counter + 1 ;
11678: LD_ADDR_EXP 4
11682: PUSH
11683: LD_EXP 4
11687: PUSH
11688: LD_INT 1
11690: PLUS
11691: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11692: LD_VAR 0 1
11696: PUSH
11697: LD_INT 6
11699: PPUSH
11700: LD_INT 2
11702: PUSH
11703: LD_INT 30
11705: PUSH
11706: LD_INT 33
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 30
11715: PUSH
11716: LD_INT 32
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: PPUSH
11728: CALL_OW 70
11732: IN
11733: IFFALSE 11792
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11735: LD_ADDR_EXP 20
11739: PUSH
11740: LD_EXP 20
11744: PUSH
11745: LD_VAR 0 1
11749: PPUSH
11750: CALL_OW 266
11754: PUSH
11755: LD_VAR 0 1
11759: PPUSH
11760: CALL_OW 250
11764: PUSH
11765: LD_VAR 0 1
11769: PPUSH
11770: CALL_OW 251
11774: PUSH
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL_OW 254
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: ADD
11791: ST_TO_ADDR
// if un = ru_dep_main then
11792: LD_VAR 0 1
11796: PUSH
11797: LD_INT 16
11799: EQUAL
11800: IFFALSE 11809
// ChangeMissionObjectives ( M1a ) ;
11802: LD_STRING M1a
11804: PPUSH
11805: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL_OW 247
11818: PUSH
11819: LD_INT 1
11821: EQUAL
11822: PUSH
11823: LD_VAR 0 1
11827: PPUSH
11828: CALL_OW 255
11832: PUSH
11833: LD_INT 3
11835: EQUAL
11836: AND
11837: IFFALSE 11853
// kill_counter := kill_counter + 1 ;
11839: LD_ADDR_EXP 8
11843: PUSH
11844: LD_EXP 8
11848: PUSH
11849: LD_INT 1
11851: PLUS
11852: ST_TO_ADDR
// end ;
11853: PPOPN 1
11855: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11856: LD_VAR 0 1
11860: PPUSH
11861: LD_VAR 0 2
11865: PPUSH
11866: CALL 26774 0 2
// end ;
11870: PPOPN 2
11872: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11873: LD_VAR 0 1
11877: PPUSH
11878: CALL_OW 266
11882: PUSH
11883: LD_INT 32
11885: EQUAL
11886: PUSH
11887: LD_VAR 0 1
11891: PPUSH
11892: CALL_OW 110
11896: PUSH
11897: LD_INT 7
11899: EQUAL
11900: AND
11901: IFFALSE 11915
// SetTag ( un , 0 ) ;
11903: LD_VAR 0 1
11907: PPUSH
11908: LD_INT 0
11910: PPUSH
11911: CALL_OW 109
// end ;
11915: PPOPN 1
11917: END
// on BuildingStarted ( b , builder ) do var i ;
11918: LD_INT 0
11920: PPUSH
// begin if GetSide ( b ) = 3 then
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 255
11930: PUSH
11931: LD_INT 3
11933: EQUAL
11934: IFFALSE 11974
// for i = 1 to 4 do
11936: LD_ADDR_VAR 0 3
11940: PUSH
11941: DOUBLE
11942: LD_INT 1
11944: DEC
11945: ST_TO_ADDR
11946: LD_INT 4
11948: PUSH
11949: FOR_TO
11950: IFFALSE 11972
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11952: LD_ADDR_EXP 20
11956: PUSH
11957: LD_EXP 20
11961: PPUSH
11962: LD_INT 1
11964: PPUSH
11965: CALL_OW 3
11969: ST_TO_ADDR
11970: GO 11949
11972: POP
11973: POP
// end ;
11974: PPOPN 3
11976: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11977: LD_VAR 0 1
11981: PPUSH
11982: CALL_OW 266
11986: PUSH
11987: LD_INT 32
11989: PUSH
11990: LD_INT 33
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: IN
11997: IFFALSE 12011
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11999: LD_VAR 0 1
12003: PPUSH
12004: LD_INT 43
12006: PPUSH
12007: CALL_OW 148
12011: PPOPN 1
12013: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12014: LD_VAR 0 1
12018: PUSH
12019: LD_INT 22
12021: PUSH
12022: LD_INT 3
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: LD_INT 30
12034: PUSH
12035: LD_INT 31
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 30
12044: PUSH
12045: LD_INT 32
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PPUSH
12061: CALL_OW 69
12065: IN
12066: IFFALSE 12088
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12068: LD_VAR 0 2
12072: PPUSH
12073: LD_VAR 0 1
12077: PPUSH
12078: LD_INT 134
12080: PPUSH
12081: LD_INT 136
12083: PPUSH
12084: CALL 838 0 4
// end ;
12088: PPOPN 2
12090: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12091: LD_VAR 0 1
12095: PUSH
12096: LD_INT 22
12098: PUSH
12099: LD_INT 3
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 30
12108: PUSH
12109: LD_INT 32
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 69
12124: IN
12125: IFFALSE 12139
// SetTag ( b , 0 ) ;
12127: LD_VAR 0 1
12131: PPUSH
12132: LD_INT 0
12134: PPUSH
12135: CALL_OW 109
// end ; end_of_file
12139: PPOPN 2
12141: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12142: LD_INT 0
12144: PPUSH
// ar_miner := 81 ;
12145: LD_ADDR_EXP 28
12149: PUSH
12150: LD_INT 81
12152: ST_TO_ADDR
// ar_crane := 88 ;
12153: LD_ADDR_EXP 27
12157: PUSH
12158: LD_INT 88
12160: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12161: LD_ADDR_EXP 22
12165: PUSH
12166: LD_INT 89
12168: ST_TO_ADDR
// us_hack := 99 ;
12169: LD_ADDR_EXP 23
12173: PUSH
12174: LD_INT 99
12176: ST_TO_ADDR
// us_artillery := 97 ;
12177: LD_ADDR_EXP 24
12181: PUSH
12182: LD_INT 97
12184: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12185: LD_ADDR_EXP 25
12189: PUSH
12190: LD_INT 91
12192: ST_TO_ADDR
// ar_mortar := 92 ;
12193: LD_ADDR_EXP 26
12197: PUSH
12198: LD_INT 92
12200: ST_TO_ADDR
// ru_flamethrower := 93 ;
12201: LD_ADDR_EXP 29
12205: PUSH
12206: LD_INT 93
12208: ST_TO_ADDR
// ru_radar := 98 ;
12209: LD_ADDR_EXP 21
12213: PUSH
12214: LD_INT 98
12216: ST_TO_ADDR
// tech_Artillery := 80 ;
12217: LD_ADDR_EXP 30
12221: PUSH
12222: LD_INT 80
12224: ST_TO_ADDR
// tech_RadMat := 81 ;
12225: LD_ADDR_EXP 31
12229: PUSH
12230: LD_INT 81
12232: ST_TO_ADDR
// tech_BasicTools := 82 ;
12233: LD_ADDR_EXP 32
12237: PUSH
12238: LD_INT 82
12240: ST_TO_ADDR
// tech_Cargo := 83 ;
12241: LD_ADDR_EXP 33
12245: PUSH
12246: LD_INT 83
12248: ST_TO_ADDR
// tech_Track := 84 ;
12249: LD_ADDR_EXP 34
12253: PUSH
12254: LD_INT 84
12256: ST_TO_ADDR
// tech_Crane := 85 ;
12257: LD_ADDR_EXP 35
12261: PUSH
12262: LD_INT 85
12264: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12265: LD_ADDR_EXP 36
12269: PUSH
12270: LD_INT 86
12272: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12273: LD_ADDR_EXP 37
12277: PUSH
12278: LD_INT 87
12280: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12281: LD_ADDR_EXP 38
12285: PUSH
12286: LD_INT 88
12288: ST_TO_ADDR
// class_mastodont := 31 ;
12289: LD_ADDR_EXP 39
12293: PUSH
12294: LD_INT 31
12296: ST_TO_ADDR
// class_horse := 21 ;
12297: LD_ADDR_EXP 40
12301: PUSH
12302: LD_INT 21
12304: ST_TO_ADDR
// end ;
12305: LD_VAR 0 1
12309: RET
// every 1 do
12310: GO 12312
12312: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12313: CALL 12142 0 0
12317: END
// every 0 0$1 do
12318: GO 12320
12320: DISABLE
// begin enable ;
12321: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12322: LD_STRING updateTimer(
12324: PUSH
12325: LD_OWVAR 1
12329: STR
12330: PUSH
12331: LD_STRING );
12333: STR
12334: PPUSH
12335: CALL_OW 559
// end ;
12339: END
// export function SOS_MapStart ( ) ; begin
12340: LD_INT 0
12342: PPUSH
// if streamModeActive then
12343: LD_EXP 41
12347: IFFALSE 12356
// DefineStreamItems ( true ) ;
12349: LD_INT 1
12351: PPUSH
12352: CALL 14006 0 1
// UpdateFactoryWaypoints ( ) ;
12356: CALL 27590 0 0
// end ;
12360: LD_VAR 0 1
12364: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12365: LD_INT 0
12367: PPUSH
// if p2 = 100 then
12368: LD_VAR 0 2
12372: PUSH
12373: LD_INT 100
12375: EQUAL
12376: IFFALSE 13379
// begin if not StreamModeActive then
12378: LD_EXP 41
12382: NOT
12383: IFFALSE 12393
// StreamModeActive := true ;
12385: LD_ADDR_EXP 41
12389: PUSH
12390: LD_INT 1
12392: ST_TO_ADDR
// if p3 = 0 then
12393: LD_VAR 0 3
12397: PUSH
12398: LD_INT 0
12400: EQUAL
12401: IFFALSE 12407
// InitStreamMode ;
12403: CALL 13542 0 0
// if p3 = 1 then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 1
12414: EQUAL
12415: IFFALSE 12425
// sRocket := true ;
12417: LD_ADDR_EXP 46
12421: PUSH
12422: LD_INT 1
12424: ST_TO_ADDR
// if p3 = 2 then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 2
12432: EQUAL
12433: IFFALSE 12443
// sSpeed := true ;
12435: LD_ADDR_EXP 45
12439: PUSH
12440: LD_INT 1
12442: ST_TO_ADDR
// if p3 = 3 then
12443: LD_VAR 0 3
12447: PUSH
12448: LD_INT 3
12450: EQUAL
12451: IFFALSE 12461
// sEngine := true ;
12453: LD_ADDR_EXP 47
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// if p3 = 4 then
12461: LD_VAR 0 3
12465: PUSH
12466: LD_INT 4
12468: EQUAL
12469: IFFALSE 12479
// sSpec := true ;
12471: LD_ADDR_EXP 44
12475: PUSH
12476: LD_INT 1
12478: ST_TO_ADDR
// if p3 = 5 then
12479: LD_VAR 0 3
12483: PUSH
12484: LD_INT 5
12486: EQUAL
12487: IFFALSE 12497
// sLevel := true ;
12489: LD_ADDR_EXP 48
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// if p3 = 6 then
12497: LD_VAR 0 3
12501: PUSH
12502: LD_INT 6
12504: EQUAL
12505: IFFALSE 12515
// sArmoury := true ;
12507: LD_ADDR_EXP 49
12511: PUSH
12512: LD_INT 1
12514: ST_TO_ADDR
// if p3 = 7 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 7
12522: EQUAL
12523: IFFALSE 12533
// sRadar := true ;
12525: LD_ADDR_EXP 50
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// if p3 = 8 then
12533: LD_VAR 0 3
12537: PUSH
12538: LD_INT 8
12540: EQUAL
12541: IFFALSE 12551
// sBunker := true ;
12543: LD_ADDR_EXP 51
12547: PUSH
12548: LD_INT 1
12550: ST_TO_ADDR
// if p3 = 9 then
12551: LD_VAR 0 3
12555: PUSH
12556: LD_INT 9
12558: EQUAL
12559: IFFALSE 12569
// sHack := true ;
12561: LD_ADDR_EXP 52
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// if p3 = 10 then
12569: LD_VAR 0 3
12573: PUSH
12574: LD_INT 10
12576: EQUAL
12577: IFFALSE 12587
// sFire := true ;
12579: LD_ADDR_EXP 53
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// if p3 = 11 then
12587: LD_VAR 0 3
12591: PUSH
12592: LD_INT 11
12594: EQUAL
12595: IFFALSE 12605
// sRefresh := true ;
12597: LD_ADDR_EXP 54
12601: PUSH
12602: LD_INT 1
12604: ST_TO_ADDR
// if p3 = 12 then
12605: LD_VAR 0 3
12609: PUSH
12610: LD_INT 12
12612: EQUAL
12613: IFFALSE 12623
// sExp := true ;
12615: LD_ADDR_EXP 55
12619: PUSH
12620: LD_INT 1
12622: ST_TO_ADDR
// if p3 = 13 then
12623: LD_VAR 0 3
12627: PUSH
12628: LD_INT 13
12630: EQUAL
12631: IFFALSE 12641
// sDepot := true ;
12633: LD_ADDR_EXP 56
12637: PUSH
12638: LD_INT 1
12640: ST_TO_ADDR
// if p3 = 14 then
12641: LD_VAR 0 3
12645: PUSH
12646: LD_INT 14
12648: EQUAL
12649: IFFALSE 12659
// sFlag := true ;
12651: LD_ADDR_EXP 57
12655: PUSH
12656: LD_INT 1
12658: ST_TO_ADDR
// if p3 = 15 then
12659: LD_VAR 0 3
12663: PUSH
12664: LD_INT 15
12666: EQUAL
12667: IFFALSE 12677
// sKamikadze := true ;
12669: LD_ADDR_EXP 65
12673: PUSH
12674: LD_INT 1
12676: ST_TO_ADDR
// if p3 = 16 then
12677: LD_VAR 0 3
12681: PUSH
12682: LD_INT 16
12684: EQUAL
12685: IFFALSE 12695
// sTroll := true ;
12687: LD_ADDR_EXP 66
12691: PUSH
12692: LD_INT 1
12694: ST_TO_ADDR
// if p3 = 17 then
12695: LD_VAR 0 3
12699: PUSH
12700: LD_INT 17
12702: EQUAL
12703: IFFALSE 12713
// sSlow := true ;
12705: LD_ADDR_EXP 67
12709: PUSH
12710: LD_INT 1
12712: ST_TO_ADDR
// if p3 = 18 then
12713: LD_VAR 0 3
12717: PUSH
12718: LD_INT 18
12720: EQUAL
12721: IFFALSE 12731
// sLack := true ;
12723: LD_ADDR_EXP 68
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// if p3 = 19 then
12731: LD_VAR 0 3
12735: PUSH
12736: LD_INT 19
12738: EQUAL
12739: IFFALSE 12749
// sTank := true ;
12741: LD_ADDR_EXP 70
12745: PUSH
12746: LD_INT 1
12748: ST_TO_ADDR
// if p3 = 20 then
12749: LD_VAR 0 3
12753: PUSH
12754: LD_INT 20
12756: EQUAL
12757: IFFALSE 12767
// sRemote := true ;
12759: LD_ADDR_EXP 71
12763: PUSH
12764: LD_INT 1
12766: ST_TO_ADDR
// if p3 = 21 then
12767: LD_VAR 0 3
12771: PUSH
12772: LD_INT 21
12774: EQUAL
12775: IFFALSE 12785
// sPowell := true ;
12777: LD_ADDR_EXP 72
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// if p3 = 22 then
12785: LD_VAR 0 3
12789: PUSH
12790: LD_INT 22
12792: EQUAL
12793: IFFALSE 12803
// sTeleport := true ;
12795: LD_ADDR_EXP 75
12799: PUSH
12800: LD_INT 1
12802: ST_TO_ADDR
// if p3 = 23 then
12803: LD_VAR 0 3
12807: PUSH
12808: LD_INT 23
12810: EQUAL
12811: IFFALSE 12821
// sOilTower := true ;
12813: LD_ADDR_EXP 77
12817: PUSH
12818: LD_INT 1
12820: ST_TO_ADDR
// if p3 = 24 then
12821: LD_VAR 0 3
12825: PUSH
12826: LD_INT 24
12828: EQUAL
12829: IFFALSE 12839
// sShovel := true ;
12831: LD_ADDR_EXP 78
12835: PUSH
12836: LD_INT 1
12838: ST_TO_ADDR
// if p3 = 25 then
12839: LD_VAR 0 3
12843: PUSH
12844: LD_INT 25
12846: EQUAL
12847: IFFALSE 12857
// sSheik := true ;
12849: LD_ADDR_EXP 79
12853: PUSH
12854: LD_INT 1
12856: ST_TO_ADDR
// if p3 = 26 then
12857: LD_VAR 0 3
12861: PUSH
12862: LD_INT 26
12864: EQUAL
12865: IFFALSE 12875
// sEarthquake := true ;
12867: LD_ADDR_EXP 81
12871: PUSH
12872: LD_INT 1
12874: ST_TO_ADDR
// if p3 = 27 then
12875: LD_VAR 0 3
12879: PUSH
12880: LD_INT 27
12882: EQUAL
12883: IFFALSE 12893
// sAI := true ;
12885: LD_ADDR_EXP 82
12889: PUSH
12890: LD_INT 1
12892: ST_TO_ADDR
// if p3 = 28 then
12893: LD_VAR 0 3
12897: PUSH
12898: LD_INT 28
12900: EQUAL
12901: IFFALSE 12911
// sCargo := true ;
12903: LD_ADDR_EXP 85
12907: PUSH
12908: LD_INT 1
12910: ST_TO_ADDR
// if p3 = 29 then
12911: LD_VAR 0 3
12915: PUSH
12916: LD_INT 29
12918: EQUAL
12919: IFFALSE 12929
// sDLaser := true ;
12921: LD_ADDR_EXP 86
12925: PUSH
12926: LD_INT 1
12928: ST_TO_ADDR
// if p3 = 30 then
12929: LD_VAR 0 3
12933: PUSH
12934: LD_INT 30
12936: EQUAL
12937: IFFALSE 12947
// sExchange := true ;
12939: LD_ADDR_EXP 87
12943: PUSH
12944: LD_INT 1
12946: ST_TO_ADDR
// if p3 = 31 then
12947: LD_VAR 0 3
12951: PUSH
12952: LD_INT 31
12954: EQUAL
12955: IFFALSE 12965
// sFac := true ;
12957: LD_ADDR_EXP 88
12961: PUSH
12962: LD_INT 1
12964: ST_TO_ADDR
// if p3 = 32 then
12965: LD_VAR 0 3
12969: PUSH
12970: LD_INT 32
12972: EQUAL
12973: IFFALSE 12983
// sPower := true ;
12975: LD_ADDR_EXP 89
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
// if p3 = 33 then
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 33
12990: EQUAL
12991: IFFALSE 13001
// sRandom := true ;
12993: LD_ADDR_EXP 90
12997: PUSH
12998: LD_INT 1
13000: ST_TO_ADDR
// if p3 = 34 then
13001: LD_VAR 0 3
13005: PUSH
13006: LD_INT 34
13008: EQUAL
13009: IFFALSE 13019
// sShield := true ;
13011: LD_ADDR_EXP 91
13015: PUSH
13016: LD_INT 1
13018: ST_TO_ADDR
// if p3 = 35 then
13019: LD_VAR 0 3
13023: PUSH
13024: LD_INT 35
13026: EQUAL
13027: IFFALSE 13037
// sTime := true ;
13029: LD_ADDR_EXP 92
13033: PUSH
13034: LD_INT 1
13036: ST_TO_ADDR
// if p3 = 36 then
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 36
13044: EQUAL
13045: IFFALSE 13055
// sTools := true ;
13047: LD_ADDR_EXP 93
13051: PUSH
13052: LD_INT 1
13054: ST_TO_ADDR
// if p3 = 101 then
13055: LD_VAR 0 3
13059: PUSH
13060: LD_INT 101
13062: EQUAL
13063: IFFALSE 13073
// sSold := true ;
13065: LD_ADDR_EXP 58
13069: PUSH
13070: LD_INT 1
13072: ST_TO_ADDR
// if p3 = 102 then
13073: LD_VAR 0 3
13077: PUSH
13078: LD_INT 102
13080: EQUAL
13081: IFFALSE 13091
// sDiff := true ;
13083: LD_ADDR_EXP 59
13087: PUSH
13088: LD_INT 1
13090: ST_TO_ADDR
// if p3 = 103 then
13091: LD_VAR 0 3
13095: PUSH
13096: LD_INT 103
13098: EQUAL
13099: IFFALSE 13109
// sFog := true ;
13101: LD_ADDR_EXP 62
13105: PUSH
13106: LD_INT 1
13108: ST_TO_ADDR
// if p3 = 104 then
13109: LD_VAR 0 3
13113: PUSH
13114: LD_INT 104
13116: EQUAL
13117: IFFALSE 13127
// sReset := true ;
13119: LD_ADDR_EXP 63
13123: PUSH
13124: LD_INT 1
13126: ST_TO_ADDR
// if p3 = 105 then
13127: LD_VAR 0 3
13131: PUSH
13132: LD_INT 105
13134: EQUAL
13135: IFFALSE 13145
// sSun := true ;
13137: LD_ADDR_EXP 64
13141: PUSH
13142: LD_INT 1
13144: ST_TO_ADDR
// if p3 = 106 then
13145: LD_VAR 0 3
13149: PUSH
13150: LD_INT 106
13152: EQUAL
13153: IFFALSE 13163
// sTiger := true ;
13155: LD_ADDR_EXP 60
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// if p3 = 107 then
13163: LD_VAR 0 3
13167: PUSH
13168: LD_INT 107
13170: EQUAL
13171: IFFALSE 13181
// sBomb := true ;
13173: LD_ADDR_EXP 61
13177: PUSH
13178: LD_INT 1
13180: ST_TO_ADDR
// if p3 = 108 then
13181: LD_VAR 0 3
13185: PUSH
13186: LD_INT 108
13188: EQUAL
13189: IFFALSE 13199
// sWound := true ;
13191: LD_ADDR_EXP 69
13195: PUSH
13196: LD_INT 1
13198: ST_TO_ADDR
// if p3 = 109 then
13199: LD_VAR 0 3
13203: PUSH
13204: LD_INT 109
13206: EQUAL
13207: IFFALSE 13217
// sBetray := true ;
13209: LD_ADDR_EXP 73
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// if p3 = 110 then
13217: LD_VAR 0 3
13221: PUSH
13222: LD_INT 110
13224: EQUAL
13225: IFFALSE 13235
// sContamin := true ;
13227: LD_ADDR_EXP 74
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
// if p3 = 111 then
13235: LD_VAR 0 3
13239: PUSH
13240: LD_INT 111
13242: EQUAL
13243: IFFALSE 13253
// sOil := true ;
13245: LD_ADDR_EXP 76
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// if p3 = 112 then
13253: LD_VAR 0 3
13257: PUSH
13258: LD_INT 112
13260: EQUAL
13261: IFFALSE 13271
// sStu := true ;
13263: LD_ADDR_EXP 80
13267: PUSH
13268: LD_INT 1
13270: ST_TO_ADDR
// if p3 = 113 then
13271: LD_VAR 0 3
13275: PUSH
13276: LD_INT 113
13278: EQUAL
13279: IFFALSE 13289
// sBazooka := true ;
13281: LD_ADDR_EXP 83
13285: PUSH
13286: LD_INT 1
13288: ST_TO_ADDR
// if p3 = 114 then
13289: LD_VAR 0 3
13293: PUSH
13294: LD_INT 114
13296: EQUAL
13297: IFFALSE 13307
// sMortar := true ;
13299: LD_ADDR_EXP 84
13303: PUSH
13304: LD_INT 1
13306: ST_TO_ADDR
// if p3 = 115 then
13307: LD_VAR 0 3
13311: PUSH
13312: LD_INT 115
13314: EQUAL
13315: IFFALSE 13325
// sRanger := true ;
13317: LD_ADDR_EXP 94
13321: PUSH
13322: LD_INT 1
13324: ST_TO_ADDR
// if p3 = 116 then
13325: LD_VAR 0 3
13329: PUSH
13330: LD_INT 116
13332: EQUAL
13333: IFFALSE 13343
// sComputer := true ;
13335: LD_ADDR_EXP 95
13339: PUSH
13340: LD_INT 1
13342: ST_TO_ADDR
// if p3 = 117 then
13343: LD_VAR 0 3
13347: PUSH
13348: LD_INT 117
13350: EQUAL
13351: IFFALSE 13361
// s30 := true ;
13353: LD_ADDR_EXP 96
13357: PUSH
13358: LD_INT 1
13360: ST_TO_ADDR
// if p3 = 118 then
13361: LD_VAR 0 3
13365: PUSH
13366: LD_INT 118
13368: EQUAL
13369: IFFALSE 13379
// s60 := true ;
13371: LD_ADDR_EXP 97
13375: PUSH
13376: LD_INT 1
13378: ST_TO_ADDR
// end ; if p2 = 101 then
13379: LD_VAR 0 2
13383: PUSH
13384: LD_INT 101
13386: EQUAL
13387: IFFALSE 13515
// begin case p3 of 1 :
13389: LD_VAR 0 3
13393: PUSH
13394: LD_INT 1
13396: DOUBLE
13397: EQUAL
13398: IFTRUE 13402
13400: GO 13409
13402: POP
// hHackUnlimitedResources ; 2 :
13403: CALL 25613 0 0
13407: GO 13515
13409: LD_INT 2
13411: DOUBLE
13412: EQUAL
13413: IFTRUE 13417
13415: GO 13424
13417: POP
// hHackSetLevel10 ; 3 :
13418: CALL 25746 0 0
13422: GO 13515
13424: LD_INT 3
13426: DOUBLE
13427: EQUAL
13428: IFTRUE 13432
13430: GO 13439
13432: POP
// hHackSetLevel10YourUnits ; 4 :
13433: CALL 25831 0 0
13437: GO 13515
13439: LD_INT 4
13441: DOUBLE
13442: EQUAL
13443: IFTRUE 13447
13445: GO 13454
13447: POP
// hHackInvincible ; 5 :
13448: CALL 26279 0 0
13452: GO 13515
13454: LD_INT 5
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13469
13462: POP
// hHackInvisible ; 6 :
13463: CALL 26390 0 0
13467: GO 13515
13469: LD_INT 6
13471: DOUBLE
13472: EQUAL
13473: IFTRUE 13477
13475: GO 13484
13477: POP
// hHackChangeYourSide ; 7 :
13478: CALL 26447 0 0
13482: GO 13515
13484: LD_INT 7
13486: DOUBLE
13487: EQUAL
13488: IFTRUE 13492
13490: GO 13499
13492: POP
// hHackChangeUnitSide ; 8 :
13493: CALL 26489 0 0
13497: GO 13515
13499: LD_INT 8
13501: DOUBLE
13502: EQUAL
13503: IFTRUE 13507
13505: GO 13514
13507: POP
// hHackFog ; end ;
13508: CALL 26590 0 0
13512: GO 13515
13514: POP
// end ; end ;
13515: LD_VAR 0 7
13519: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13520: GO 13522
13522: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13523: LD_STRING initStreamRollete();
13525: PPUSH
13526: CALL_OW 559
// InitStreamMode ;
13530: CALL 13542 0 0
// DefineStreamItems ( false ) ;
13534: LD_INT 0
13536: PPUSH
13537: CALL 14006 0 1
// end ;
13541: END
// function InitStreamMode ; begin
13542: LD_INT 0
13544: PPUSH
// streamModeActive := false ;
13545: LD_ADDR_EXP 41
13549: PUSH
13550: LD_INT 0
13552: ST_TO_ADDR
// normalCounter := 36 ;
13553: LD_ADDR_EXP 42
13557: PUSH
13558: LD_INT 36
13560: ST_TO_ADDR
// hardcoreCounter := 18 ;
13561: LD_ADDR_EXP 43
13565: PUSH
13566: LD_INT 18
13568: ST_TO_ADDR
// sRocket := false ;
13569: LD_ADDR_EXP 46
13573: PUSH
13574: LD_INT 0
13576: ST_TO_ADDR
// sSpeed := false ;
13577: LD_ADDR_EXP 45
13581: PUSH
13582: LD_INT 0
13584: ST_TO_ADDR
// sEngine := false ;
13585: LD_ADDR_EXP 47
13589: PUSH
13590: LD_INT 0
13592: ST_TO_ADDR
// sSpec := false ;
13593: LD_ADDR_EXP 44
13597: PUSH
13598: LD_INT 0
13600: ST_TO_ADDR
// sLevel := false ;
13601: LD_ADDR_EXP 48
13605: PUSH
13606: LD_INT 0
13608: ST_TO_ADDR
// sArmoury := false ;
13609: LD_ADDR_EXP 49
13613: PUSH
13614: LD_INT 0
13616: ST_TO_ADDR
// sRadar := false ;
13617: LD_ADDR_EXP 50
13621: PUSH
13622: LD_INT 0
13624: ST_TO_ADDR
// sBunker := false ;
13625: LD_ADDR_EXP 51
13629: PUSH
13630: LD_INT 0
13632: ST_TO_ADDR
// sHack := false ;
13633: LD_ADDR_EXP 52
13637: PUSH
13638: LD_INT 0
13640: ST_TO_ADDR
// sFire := false ;
13641: LD_ADDR_EXP 53
13645: PUSH
13646: LD_INT 0
13648: ST_TO_ADDR
// sRefresh := false ;
13649: LD_ADDR_EXP 54
13653: PUSH
13654: LD_INT 0
13656: ST_TO_ADDR
// sExp := false ;
13657: LD_ADDR_EXP 55
13661: PUSH
13662: LD_INT 0
13664: ST_TO_ADDR
// sDepot := false ;
13665: LD_ADDR_EXP 56
13669: PUSH
13670: LD_INT 0
13672: ST_TO_ADDR
// sFlag := false ;
13673: LD_ADDR_EXP 57
13677: PUSH
13678: LD_INT 0
13680: ST_TO_ADDR
// sKamikadze := false ;
13681: LD_ADDR_EXP 65
13685: PUSH
13686: LD_INT 0
13688: ST_TO_ADDR
// sTroll := false ;
13689: LD_ADDR_EXP 66
13693: PUSH
13694: LD_INT 0
13696: ST_TO_ADDR
// sSlow := false ;
13697: LD_ADDR_EXP 67
13701: PUSH
13702: LD_INT 0
13704: ST_TO_ADDR
// sLack := false ;
13705: LD_ADDR_EXP 68
13709: PUSH
13710: LD_INT 0
13712: ST_TO_ADDR
// sTank := false ;
13713: LD_ADDR_EXP 70
13717: PUSH
13718: LD_INT 0
13720: ST_TO_ADDR
// sRemote := false ;
13721: LD_ADDR_EXP 71
13725: PUSH
13726: LD_INT 0
13728: ST_TO_ADDR
// sPowell := false ;
13729: LD_ADDR_EXP 72
13733: PUSH
13734: LD_INT 0
13736: ST_TO_ADDR
// sTeleport := false ;
13737: LD_ADDR_EXP 75
13741: PUSH
13742: LD_INT 0
13744: ST_TO_ADDR
// sOilTower := false ;
13745: LD_ADDR_EXP 77
13749: PUSH
13750: LD_INT 0
13752: ST_TO_ADDR
// sShovel := false ;
13753: LD_ADDR_EXP 78
13757: PUSH
13758: LD_INT 0
13760: ST_TO_ADDR
// sSheik := false ;
13761: LD_ADDR_EXP 79
13765: PUSH
13766: LD_INT 0
13768: ST_TO_ADDR
// sEarthquake := false ;
13769: LD_ADDR_EXP 81
13773: PUSH
13774: LD_INT 0
13776: ST_TO_ADDR
// sAI := false ;
13777: LD_ADDR_EXP 82
13781: PUSH
13782: LD_INT 0
13784: ST_TO_ADDR
// sCargo := false ;
13785: LD_ADDR_EXP 85
13789: PUSH
13790: LD_INT 0
13792: ST_TO_ADDR
// sDLaser := false ;
13793: LD_ADDR_EXP 86
13797: PUSH
13798: LD_INT 0
13800: ST_TO_ADDR
// sExchange := false ;
13801: LD_ADDR_EXP 87
13805: PUSH
13806: LD_INT 0
13808: ST_TO_ADDR
// sFac := false ;
13809: LD_ADDR_EXP 88
13813: PUSH
13814: LD_INT 0
13816: ST_TO_ADDR
// sPower := false ;
13817: LD_ADDR_EXP 89
13821: PUSH
13822: LD_INT 0
13824: ST_TO_ADDR
// sRandom := false ;
13825: LD_ADDR_EXP 90
13829: PUSH
13830: LD_INT 0
13832: ST_TO_ADDR
// sShield := false ;
13833: LD_ADDR_EXP 91
13837: PUSH
13838: LD_INT 0
13840: ST_TO_ADDR
// sTime := false ;
13841: LD_ADDR_EXP 92
13845: PUSH
13846: LD_INT 0
13848: ST_TO_ADDR
// sTools := false ;
13849: LD_ADDR_EXP 93
13853: PUSH
13854: LD_INT 0
13856: ST_TO_ADDR
// sSold := false ;
13857: LD_ADDR_EXP 58
13861: PUSH
13862: LD_INT 0
13864: ST_TO_ADDR
// sDiff := false ;
13865: LD_ADDR_EXP 59
13869: PUSH
13870: LD_INT 0
13872: ST_TO_ADDR
// sFog := false ;
13873: LD_ADDR_EXP 62
13877: PUSH
13878: LD_INT 0
13880: ST_TO_ADDR
// sReset := false ;
13881: LD_ADDR_EXP 63
13885: PUSH
13886: LD_INT 0
13888: ST_TO_ADDR
// sSun := false ;
13889: LD_ADDR_EXP 64
13893: PUSH
13894: LD_INT 0
13896: ST_TO_ADDR
// sTiger := false ;
13897: LD_ADDR_EXP 60
13901: PUSH
13902: LD_INT 0
13904: ST_TO_ADDR
// sBomb := false ;
13905: LD_ADDR_EXP 61
13909: PUSH
13910: LD_INT 0
13912: ST_TO_ADDR
// sWound := false ;
13913: LD_ADDR_EXP 69
13917: PUSH
13918: LD_INT 0
13920: ST_TO_ADDR
// sBetray := false ;
13921: LD_ADDR_EXP 73
13925: PUSH
13926: LD_INT 0
13928: ST_TO_ADDR
// sContamin := false ;
13929: LD_ADDR_EXP 74
13933: PUSH
13934: LD_INT 0
13936: ST_TO_ADDR
// sOil := false ;
13937: LD_ADDR_EXP 76
13941: PUSH
13942: LD_INT 0
13944: ST_TO_ADDR
// sStu := false ;
13945: LD_ADDR_EXP 80
13949: PUSH
13950: LD_INT 0
13952: ST_TO_ADDR
// sBazooka := false ;
13953: LD_ADDR_EXP 83
13957: PUSH
13958: LD_INT 0
13960: ST_TO_ADDR
// sMortar := false ;
13961: LD_ADDR_EXP 84
13965: PUSH
13966: LD_INT 0
13968: ST_TO_ADDR
// sRanger := false ;
13969: LD_ADDR_EXP 94
13973: PUSH
13974: LD_INT 0
13976: ST_TO_ADDR
// sComputer := false ;
13977: LD_ADDR_EXP 95
13981: PUSH
13982: LD_INT 0
13984: ST_TO_ADDR
// s30 := false ;
13985: LD_ADDR_EXP 96
13989: PUSH
13990: LD_INT 0
13992: ST_TO_ADDR
// s60 := false ;
13993: LD_ADDR_EXP 97
13997: PUSH
13998: LD_INT 0
14000: ST_TO_ADDR
// end ;
14001: LD_VAR 0 1
14005: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14006: LD_INT 0
14008: PPUSH
14009: PPUSH
14010: PPUSH
14011: PPUSH
14012: PPUSH
14013: PPUSH
14014: PPUSH
// result := [ ] ;
14015: LD_ADDR_VAR 0 2
14019: PUSH
14020: EMPTY
14021: ST_TO_ADDR
// if campaign_id = 1 then
14022: LD_OWVAR 69
14026: PUSH
14027: LD_INT 1
14029: EQUAL
14030: IFFALSE 17196
// begin case mission_number of 1 :
14032: LD_OWVAR 70
14036: PUSH
14037: LD_INT 1
14039: DOUBLE
14040: EQUAL
14041: IFTRUE 14045
14043: GO 14121
14045: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14046: LD_ADDR_VAR 0 2
14050: PUSH
14051: LD_INT 2
14053: PUSH
14054: LD_INT 4
14056: PUSH
14057: LD_INT 11
14059: PUSH
14060: LD_INT 12
14062: PUSH
14063: LD_INT 15
14065: PUSH
14066: LD_INT 16
14068: PUSH
14069: LD_INT 22
14071: PUSH
14072: LD_INT 23
14074: PUSH
14075: LD_INT 26
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 101
14091: PUSH
14092: LD_INT 102
14094: PUSH
14095: LD_INT 106
14097: PUSH
14098: LD_INT 116
14100: PUSH
14101: LD_INT 117
14103: PUSH
14104: LD_INT 118
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: ST_TO_ADDR
14119: GO 17194
14121: LD_INT 2
14123: DOUBLE
14124: EQUAL
14125: IFTRUE 14129
14127: GO 14213
14129: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14130: LD_ADDR_VAR 0 2
14134: PUSH
14135: LD_INT 2
14137: PUSH
14138: LD_INT 4
14140: PUSH
14141: LD_INT 11
14143: PUSH
14144: LD_INT 12
14146: PUSH
14147: LD_INT 15
14149: PUSH
14150: LD_INT 16
14152: PUSH
14153: LD_INT 22
14155: PUSH
14156: LD_INT 23
14158: PUSH
14159: LD_INT 26
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 101
14175: PUSH
14176: LD_INT 102
14178: PUSH
14179: LD_INT 105
14181: PUSH
14182: LD_INT 106
14184: PUSH
14185: LD_INT 108
14187: PUSH
14188: LD_INT 116
14190: PUSH
14191: LD_INT 117
14193: PUSH
14194: LD_INT 118
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: ST_TO_ADDR
14211: GO 17194
14213: LD_INT 3
14215: DOUBLE
14216: EQUAL
14217: IFTRUE 14221
14219: GO 14309
14221: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14222: LD_ADDR_VAR 0 2
14226: PUSH
14227: LD_INT 2
14229: PUSH
14230: LD_INT 4
14232: PUSH
14233: LD_INT 5
14235: PUSH
14236: LD_INT 11
14238: PUSH
14239: LD_INT 12
14241: PUSH
14242: LD_INT 15
14244: PUSH
14245: LD_INT 16
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_INT 26
14253: PUSH
14254: LD_INT 36
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 101
14271: PUSH
14272: LD_INT 102
14274: PUSH
14275: LD_INT 105
14277: PUSH
14278: LD_INT 106
14280: PUSH
14281: LD_INT 108
14283: PUSH
14284: LD_INT 116
14286: PUSH
14287: LD_INT 117
14289: PUSH
14290: LD_INT 118
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: ST_TO_ADDR
14307: GO 17194
14309: LD_INT 4
14311: DOUBLE
14312: EQUAL
14313: IFTRUE 14317
14315: GO 14413
14317: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14318: LD_ADDR_VAR 0 2
14322: PUSH
14323: LD_INT 2
14325: PUSH
14326: LD_INT 4
14328: PUSH
14329: LD_INT 5
14331: PUSH
14332: LD_INT 8
14334: PUSH
14335: LD_INT 11
14337: PUSH
14338: LD_INT 12
14340: PUSH
14341: LD_INT 15
14343: PUSH
14344: LD_INT 16
14346: PUSH
14347: LD_INT 22
14349: PUSH
14350: LD_INT 23
14352: PUSH
14353: LD_INT 26
14355: PUSH
14356: LD_INT 36
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 101
14375: PUSH
14376: LD_INT 102
14378: PUSH
14379: LD_INT 105
14381: PUSH
14382: LD_INT 106
14384: PUSH
14385: LD_INT 108
14387: PUSH
14388: LD_INT 116
14390: PUSH
14391: LD_INT 117
14393: PUSH
14394: LD_INT 118
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: ST_TO_ADDR
14411: GO 17194
14413: LD_INT 5
14415: DOUBLE
14416: EQUAL
14417: IFTRUE 14421
14419: GO 14533
14421: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14422: LD_ADDR_VAR 0 2
14426: PUSH
14427: LD_INT 2
14429: PUSH
14430: LD_INT 4
14432: PUSH
14433: LD_INT 5
14435: PUSH
14436: LD_INT 6
14438: PUSH
14439: LD_INT 8
14441: PUSH
14442: LD_INT 11
14444: PUSH
14445: LD_INT 12
14447: PUSH
14448: LD_INT 15
14450: PUSH
14451: LD_INT 16
14453: PUSH
14454: LD_INT 22
14456: PUSH
14457: LD_INT 23
14459: PUSH
14460: LD_INT 25
14462: PUSH
14463: LD_INT 26
14465: PUSH
14466: LD_INT 36
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 101
14487: PUSH
14488: LD_INT 102
14490: PUSH
14491: LD_INT 105
14493: PUSH
14494: LD_INT 106
14496: PUSH
14497: LD_INT 108
14499: PUSH
14500: LD_INT 109
14502: PUSH
14503: LD_INT 112
14505: PUSH
14506: LD_INT 116
14508: PUSH
14509: LD_INT 117
14511: PUSH
14512: LD_INT 118
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: ST_TO_ADDR
14531: GO 17194
14533: LD_INT 6
14535: DOUBLE
14536: EQUAL
14537: IFTRUE 14541
14539: GO 14673
14541: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14542: LD_ADDR_VAR 0 2
14546: PUSH
14547: LD_INT 2
14549: PUSH
14550: LD_INT 4
14552: PUSH
14553: LD_INT 5
14555: PUSH
14556: LD_INT 6
14558: PUSH
14559: LD_INT 8
14561: PUSH
14562: LD_INT 11
14564: PUSH
14565: LD_INT 12
14567: PUSH
14568: LD_INT 15
14570: PUSH
14571: LD_INT 16
14573: PUSH
14574: LD_INT 20
14576: PUSH
14577: LD_INT 21
14579: PUSH
14580: LD_INT 22
14582: PUSH
14583: LD_INT 23
14585: PUSH
14586: LD_INT 25
14588: PUSH
14589: LD_INT 26
14591: PUSH
14592: LD_INT 30
14594: PUSH
14595: LD_INT 31
14597: PUSH
14598: LD_INT 32
14600: PUSH
14601: LD_INT 36
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 101
14627: PUSH
14628: LD_INT 102
14630: PUSH
14631: LD_INT 105
14633: PUSH
14634: LD_INT 106
14636: PUSH
14637: LD_INT 108
14639: PUSH
14640: LD_INT 109
14642: PUSH
14643: LD_INT 112
14645: PUSH
14646: LD_INT 116
14648: PUSH
14649: LD_INT 117
14651: PUSH
14652: LD_INT 118
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: ST_TO_ADDR
14671: GO 17194
14673: LD_INT 7
14675: DOUBLE
14676: EQUAL
14677: IFTRUE 14681
14679: GO 14793
14681: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14682: LD_ADDR_VAR 0 2
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: LD_INT 4
14692: PUSH
14693: LD_INT 5
14695: PUSH
14696: LD_INT 7
14698: PUSH
14699: LD_INT 11
14701: PUSH
14702: LD_INT 12
14704: PUSH
14705: LD_INT 15
14707: PUSH
14708: LD_INT 16
14710: PUSH
14711: LD_INT 20
14713: PUSH
14714: LD_INT 21
14716: PUSH
14717: LD_INT 22
14719: PUSH
14720: LD_INT 23
14722: PUSH
14723: LD_INT 25
14725: PUSH
14726: LD_INT 26
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 101
14747: PUSH
14748: LD_INT 102
14750: PUSH
14751: LD_INT 103
14753: PUSH
14754: LD_INT 105
14756: PUSH
14757: LD_INT 106
14759: PUSH
14760: LD_INT 108
14762: PUSH
14763: LD_INT 112
14765: PUSH
14766: LD_INT 116
14768: PUSH
14769: LD_INT 117
14771: PUSH
14772: LD_INT 118
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: ST_TO_ADDR
14791: GO 17194
14793: LD_INT 8
14795: DOUBLE
14796: EQUAL
14797: IFTRUE 14801
14799: GO 14941
14801: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14802: LD_ADDR_VAR 0 2
14806: PUSH
14807: LD_INT 2
14809: PUSH
14810: LD_INT 4
14812: PUSH
14813: LD_INT 5
14815: PUSH
14816: LD_INT 6
14818: PUSH
14819: LD_INT 7
14821: PUSH
14822: LD_INT 8
14824: PUSH
14825: LD_INT 11
14827: PUSH
14828: LD_INT 12
14830: PUSH
14831: LD_INT 15
14833: PUSH
14834: LD_INT 16
14836: PUSH
14837: LD_INT 20
14839: PUSH
14840: LD_INT 21
14842: PUSH
14843: LD_INT 22
14845: PUSH
14846: LD_INT 23
14848: PUSH
14849: LD_INT 25
14851: PUSH
14852: LD_INT 26
14854: PUSH
14855: LD_INT 30
14857: PUSH
14858: LD_INT 31
14860: PUSH
14861: LD_INT 32
14863: PUSH
14864: LD_INT 36
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 101
14891: PUSH
14892: LD_INT 102
14894: PUSH
14895: LD_INT 103
14897: PUSH
14898: LD_INT 105
14900: PUSH
14901: LD_INT 106
14903: PUSH
14904: LD_INT 108
14906: PUSH
14907: LD_INT 109
14909: PUSH
14910: LD_INT 112
14912: PUSH
14913: LD_INT 116
14915: PUSH
14916: LD_INT 117
14918: PUSH
14919: LD_INT 118
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: ST_TO_ADDR
14939: GO 17194
14941: LD_INT 9
14943: DOUBLE
14944: EQUAL
14945: IFTRUE 14949
14947: GO 15097
14949: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14950: LD_ADDR_VAR 0 2
14954: PUSH
14955: LD_INT 2
14957: PUSH
14958: LD_INT 4
14960: PUSH
14961: LD_INT 5
14963: PUSH
14964: LD_INT 6
14966: PUSH
14967: LD_INT 7
14969: PUSH
14970: LD_INT 8
14972: PUSH
14973: LD_INT 11
14975: PUSH
14976: LD_INT 12
14978: PUSH
14979: LD_INT 15
14981: PUSH
14982: LD_INT 16
14984: PUSH
14985: LD_INT 20
14987: PUSH
14988: LD_INT 21
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_INT 23
14996: PUSH
14997: LD_INT 25
14999: PUSH
15000: LD_INT 26
15002: PUSH
15003: LD_INT 28
15005: PUSH
15006: LD_INT 30
15008: PUSH
15009: LD_INT 31
15011: PUSH
15012: LD_INT 32
15014: PUSH
15015: LD_INT 36
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 101
15043: PUSH
15044: LD_INT 102
15046: PUSH
15047: LD_INT 103
15049: PUSH
15050: LD_INT 105
15052: PUSH
15053: LD_INT 106
15055: PUSH
15056: LD_INT 108
15058: PUSH
15059: LD_INT 109
15061: PUSH
15062: LD_INT 112
15064: PUSH
15065: LD_INT 114
15067: PUSH
15068: LD_INT 116
15070: PUSH
15071: LD_INT 117
15073: PUSH
15074: LD_INT 118
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: ST_TO_ADDR
15095: GO 17194
15097: LD_INT 10
15099: DOUBLE
15100: EQUAL
15101: IFTRUE 15105
15103: GO 15301
15105: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15106: LD_ADDR_VAR 0 2
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 4
15116: PUSH
15117: LD_INT 5
15119: PUSH
15120: LD_INT 6
15122: PUSH
15123: LD_INT 7
15125: PUSH
15126: LD_INT 8
15128: PUSH
15129: LD_INT 9
15131: PUSH
15132: LD_INT 10
15134: PUSH
15135: LD_INT 11
15137: PUSH
15138: LD_INT 12
15140: PUSH
15141: LD_INT 13
15143: PUSH
15144: LD_INT 14
15146: PUSH
15147: LD_INT 15
15149: PUSH
15150: LD_INT 16
15152: PUSH
15153: LD_INT 17
15155: PUSH
15156: LD_INT 18
15158: PUSH
15159: LD_INT 19
15161: PUSH
15162: LD_INT 20
15164: PUSH
15165: LD_INT 21
15167: PUSH
15168: LD_INT 22
15170: PUSH
15171: LD_INT 23
15173: PUSH
15174: LD_INT 24
15176: PUSH
15177: LD_INT 25
15179: PUSH
15180: LD_INT 26
15182: PUSH
15183: LD_INT 28
15185: PUSH
15186: LD_INT 30
15188: PUSH
15189: LD_INT 31
15191: PUSH
15192: LD_INT 32
15194: PUSH
15195: LD_INT 36
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 101
15231: PUSH
15232: LD_INT 102
15234: PUSH
15235: LD_INT 103
15237: PUSH
15238: LD_INT 104
15240: PUSH
15241: LD_INT 105
15243: PUSH
15244: LD_INT 106
15246: PUSH
15247: LD_INT 107
15249: PUSH
15250: LD_INT 108
15252: PUSH
15253: LD_INT 109
15255: PUSH
15256: LD_INT 110
15258: PUSH
15259: LD_INT 111
15261: PUSH
15262: LD_INT 112
15264: PUSH
15265: LD_INT 114
15267: PUSH
15268: LD_INT 116
15270: PUSH
15271: LD_INT 117
15273: PUSH
15274: LD_INT 118
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: ST_TO_ADDR
15299: GO 17194
15301: LD_INT 11
15303: DOUBLE
15304: EQUAL
15305: IFTRUE 15309
15307: GO 15513
15309: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: LD_INT 2
15317: PUSH
15318: LD_INT 3
15320: PUSH
15321: LD_INT 4
15323: PUSH
15324: LD_INT 5
15326: PUSH
15327: LD_INT 6
15329: PUSH
15330: LD_INT 7
15332: PUSH
15333: LD_INT 8
15335: PUSH
15336: LD_INT 9
15338: PUSH
15339: LD_INT 10
15341: PUSH
15342: LD_INT 11
15344: PUSH
15345: LD_INT 12
15347: PUSH
15348: LD_INT 13
15350: PUSH
15351: LD_INT 14
15353: PUSH
15354: LD_INT 15
15356: PUSH
15357: LD_INT 16
15359: PUSH
15360: LD_INT 17
15362: PUSH
15363: LD_INT 18
15365: PUSH
15366: LD_INT 19
15368: PUSH
15369: LD_INT 20
15371: PUSH
15372: LD_INT 21
15374: PUSH
15375: LD_INT 22
15377: PUSH
15378: LD_INT 23
15380: PUSH
15381: LD_INT 24
15383: PUSH
15384: LD_INT 25
15386: PUSH
15387: LD_INT 26
15389: PUSH
15390: LD_INT 28
15392: PUSH
15393: LD_INT 30
15395: PUSH
15396: LD_INT 31
15398: PUSH
15399: LD_INT 32
15401: PUSH
15402: LD_INT 34
15404: PUSH
15405: LD_INT 36
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 101
15443: PUSH
15444: LD_INT 102
15446: PUSH
15447: LD_INT 103
15449: PUSH
15450: LD_INT 104
15452: PUSH
15453: LD_INT 105
15455: PUSH
15456: LD_INT 106
15458: PUSH
15459: LD_INT 107
15461: PUSH
15462: LD_INT 108
15464: PUSH
15465: LD_INT 109
15467: PUSH
15468: LD_INT 110
15470: PUSH
15471: LD_INT 111
15473: PUSH
15474: LD_INT 112
15476: PUSH
15477: LD_INT 114
15479: PUSH
15480: LD_INT 116
15482: PUSH
15483: LD_INT 117
15485: PUSH
15486: LD_INT 118
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: ST_TO_ADDR
15511: GO 17194
15513: LD_INT 12
15515: DOUBLE
15516: EQUAL
15517: IFTRUE 15521
15519: GO 15741
15521: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15522: LD_ADDR_VAR 0 2
15526: PUSH
15527: LD_INT 1
15529: PUSH
15530: LD_INT 2
15532: PUSH
15533: LD_INT 3
15535: PUSH
15536: LD_INT 4
15538: PUSH
15539: LD_INT 5
15541: PUSH
15542: LD_INT 6
15544: PUSH
15545: LD_INT 7
15547: PUSH
15548: LD_INT 8
15550: PUSH
15551: LD_INT 9
15553: PUSH
15554: LD_INT 10
15556: PUSH
15557: LD_INT 11
15559: PUSH
15560: LD_INT 12
15562: PUSH
15563: LD_INT 13
15565: PUSH
15566: LD_INT 14
15568: PUSH
15569: LD_INT 15
15571: PUSH
15572: LD_INT 16
15574: PUSH
15575: LD_INT 17
15577: PUSH
15578: LD_INT 18
15580: PUSH
15581: LD_INT 19
15583: PUSH
15584: LD_INT 20
15586: PUSH
15587: LD_INT 21
15589: PUSH
15590: LD_INT 22
15592: PUSH
15593: LD_INT 23
15595: PUSH
15596: LD_INT 24
15598: PUSH
15599: LD_INT 25
15601: PUSH
15602: LD_INT 26
15604: PUSH
15605: LD_INT 27
15607: PUSH
15608: LD_INT 28
15610: PUSH
15611: LD_INT 30
15613: PUSH
15614: LD_INT 31
15616: PUSH
15617: LD_INT 32
15619: PUSH
15620: LD_INT 33
15622: PUSH
15623: LD_INT 34
15625: PUSH
15626: LD_INT 36
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 101
15667: PUSH
15668: LD_INT 102
15670: PUSH
15671: LD_INT 103
15673: PUSH
15674: LD_INT 104
15676: PUSH
15677: LD_INT 105
15679: PUSH
15680: LD_INT 106
15682: PUSH
15683: LD_INT 107
15685: PUSH
15686: LD_INT 108
15688: PUSH
15689: LD_INT 109
15691: PUSH
15692: LD_INT 110
15694: PUSH
15695: LD_INT 111
15697: PUSH
15698: LD_INT 112
15700: PUSH
15701: LD_INT 113
15703: PUSH
15704: LD_INT 114
15706: PUSH
15707: LD_INT 116
15709: PUSH
15710: LD_INT 117
15712: PUSH
15713: LD_INT 118
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: ST_TO_ADDR
15739: GO 17194
15741: LD_INT 13
15743: DOUBLE
15744: EQUAL
15745: IFTRUE 15749
15747: GO 15957
15749: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15750: LD_ADDR_VAR 0 2
15754: PUSH
15755: LD_INT 1
15757: PUSH
15758: LD_INT 2
15760: PUSH
15761: LD_INT 3
15763: PUSH
15764: LD_INT 4
15766: PUSH
15767: LD_INT 5
15769: PUSH
15770: LD_INT 8
15772: PUSH
15773: LD_INT 9
15775: PUSH
15776: LD_INT 10
15778: PUSH
15779: LD_INT 11
15781: PUSH
15782: LD_INT 12
15784: PUSH
15785: LD_INT 14
15787: PUSH
15788: LD_INT 15
15790: PUSH
15791: LD_INT 16
15793: PUSH
15794: LD_INT 17
15796: PUSH
15797: LD_INT 18
15799: PUSH
15800: LD_INT 19
15802: PUSH
15803: LD_INT 20
15805: PUSH
15806: LD_INT 21
15808: PUSH
15809: LD_INT 22
15811: PUSH
15812: LD_INT 23
15814: PUSH
15815: LD_INT 24
15817: PUSH
15818: LD_INT 25
15820: PUSH
15821: LD_INT 26
15823: PUSH
15824: LD_INT 27
15826: PUSH
15827: LD_INT 28
15829: PUSH
15830: LD_INT 30
15832: PUSH
15833: LD_INT 31
15835: PUSH
15836: LD_INT 32
15838: PUSH
15839: LD_INT 33
15841: PUSH
15842: LD_INT 34
15844: PUSH
15845: LD_INT 36
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 101
15883: PUSH
15884: LD_INT 102
15886: PUSH
15887: LD_INT 103
15889: PUSH
15890: LD_INT 104
15892: PUSH
15893: LD_INT 105
15895: PUSH
15896: LD_INT 106
15898: PUSH
15899: LD_INT 107
15901: PUSH
15902: LD_INT 108
15904: PUSH
15905: LD_INT 109
15907: PUSH
15908: LD_INT 110
15910: PUSH
15911: LD_INT 111
15913: PUSH
15914: LD_INT 112
15916: PUSH
15917: LD_INT 113
15919: PUSH
15920: LD_INT 114
15922: PUSH
15923: LD_INT 116
15925: PUSH
15926: LD_INT 117
15928: PUSH
15929: LD_INT 118
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: ST_TO_ADDR
15955: GO 17194
15957: LD_INT 14
15959: DOUBLE
15960: EQUAL
15961: IFTRUE 15965
15963: GO 16189
15965: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15966: LD_ADDR_VAR 0 2
15970: PUSH
15971: LD_INT 1
15973: PUSH
15974: LD_INT 2
15976: PUSH
15977: LD_INT 3
15979: PUSH
15980: LD_INT 4
15982: PUSH
15983: LD_INT 5
15985: PUSH
15986: LD_INT 6
15988: PUSH
15989: LD_INT 7
15991: PUSH
15992: LD_INT 8
15994: PUSH
15995: LD_INT 9
15997: PUSH
15998: LD_INT 10
16000: PUSH
16001: LD_INT 11
16003: PUSH
16004: LD_INT 12
16006: PUSH
16007: LD_INT 13
16009: PUSH
16010: LD_INT 14
16012: PUSH
16013: LD_INT 15
16015: PUSH
16016: LD_INT 16
16018: PUSH
16019: LD_INT 17
16021: PUSH
16022: LD_INT 18
16024: PUSH
16025: LD_INT 19
16027: PUSH
16028: LD_INT 20
16030: PUSH
16031: LD_INT 21
16033: PUSH
16034: LD_INT 22
16036: PUSH
16037: LD_INT 23
16039: PUSH
16040: LD_INT 24
16042: PUSH
16043: LD_INT 25
16045: PUSH
16046: LD_INT 26
16048: PUSH
16049: LD_INT 27
16051: PUSH
16052: LD_INT 28
16054: PUSH
16055: LD_INT 29
16057: PUSH
16058: LD_INT 30
16060: PUSH
16061: LD_INT 31
16063: PUSH
16064: LD_INT 32
16066: PUSH
16067: LD_INT 33
16069: PUSH
16070: LD_INT 34
16072: PUSH
16073: LD_INT 36
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 101
16115: PUSH
16116: LD_INT 102
16118: PUSH
16119: LD_INT 103
16121: PUSH
16122: LD_INT 104
16124: PUSH
16125: LD_INT 105
16127: PUSH
16128: LD_INT 106
16130: PUSH
16131: LD_INT 107
16133: PUSH
16134: LD_INT 108
16136: PUSH
16137: LD_INT 109
16139: PUSH
16140: LD_INT 110
16142: PUSH
16143: LD_INT 111
16145: PUSH
16146: LD_INT 112
16148: PUSH
16149: LD_INT 113
16151: PUSH
16152: LD_INT 114
16154: PUSH
16155: LD_INT 116
16157: PUSH
16158: LD_INT 117
16160: PUSH
16161: LD_INT 118
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: ST_TO_ADDR
16187: GO 17194
16189: LD_INT 15
16191: DOUBLE
16192: EQUAL
16193: IFTRUE 16197
16195: GO 16421
16197: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16198: LD_ADDR_VAR 0 2
16202: PUSH
16203: LD_INT 1
16205: PUSH
16206: LD_INT 2
16208: PUSH
16209: LD_INT 3
16211: PUSH
16212: LD_INT 4
16214: PUSH
16215: LD_INT 5
16217: PUSH
16218: LD_INT 6
16220: PUSH
16221: LD_INT 7
16223: PUSH
16224: LD_INT 8
16226: PUSH
16227: LD_INT 9
16229: PUSH
16230: LD_INT 10
16232: PUSH
16233: LD_INT 11
16235: PUSH
16236: LD_INT 12
16238: PUSH
16239: LD_INT 13
16241: PUSH
16242: LD_INT 14
16244: PUSH
16245: LD_INT 15
16247: PUSH
16248: LD_INT 16
16250: PUSH
16251: LD_INT 17
16253: PUSH
16254: LD_INT 18
16256: PUSH
16257: LD_INT 19
16259: PUSH
16260: LD_INT 20
16262: PUSH
16263: LD_INT 21
16265: PUSH
16266: LD_INT 22
16268: PUSH
16269: LD_INT 23
16271: PUSH
16272: LD_INT 24
16274: PUSH
16275: LD_INT 25
16277: PUSH
16278: LD_INT 26
16280: PUSH
16281: LD_INT 27
16283: PUSH
16284: LD_INT 28
16286: PUSH
16287: LD_INT 29
16289: PUSH
16290: LD_INT 30
16292: PUSH
16293: LD_INT 31
16295: PUSH
16296: LD_INT 32
16298: PUSH
16299: LD_INT 33
16301: PUSH
16302: LD_INT 34
16304: PUSH
16305: LD_INT 36
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 101
16347: PUSH
16348: LD_INT 102
16350: PUSH
16351: LD_INT 103
16353: PUSH
16354: LD_INT 104
16356: PUSH
16357: LD_INT 105
16359: PUSH
16360: LD_INT 106
16362: PUSH
16363: LD_INT 107
16365: PUSH
16366: LD_INT 108
16368: PUSH
16369: LD_INT 109
16371: PUSH
16372: LD_INT 110
16374: PUSH
16375: LD_INT 111
16377: PUSH
16378: LD_INT 112
16380: PUSH
16381: LD_INT 113
16383: PUSH
16384: LD_INT 114
16386: PUSH
16387: LD_INT 116
16389: PUSH
16390: LD_INT 117
16392: PUSH
16393: LD_INT 118
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: ST_TO_ADDR
16419: GO 17194
16421: LD_INT 16
16423: DOUBLE
16424: EQUAL
16425: IFTRUE 16429
16427: GO 16565
16429: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16430: LD_ADDR_VAR 0 2
16434: PUSH
16435: LD_INT 2
16437: PUSH
16438: LD_INT 4
16440: PUSH
16441: LD_INT 5
16443: PUSH
16444: LD_INT 7
16446: PUSH
16447: LD_INT 11
16449: PUSH
16450: LD_INT 12
16452: PUSH
16453: LD_INT 15
16455: PUSH
16456: LD_INT 16
16458: PUSH
16459: LD_INT 20
16461: PUSH
16462: LD_INT 21
16464: PUSH
16465: LD_INT 22
16467: PUSH
16468: LD_INT 23
16470: PUSH
16471: LD_INT 25
16473: PUSH
16474: LD_INT 26
16476: PUSH
16477: LD_INT 30
16479: PUSH
16480: LD_INT 31
16482: PUSH
16483: LD_INT 32
16485: PUSH
16486: LD_INT 33
16488: PUSH
16489: LD_INT 34
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 101
16515: PUSH
16516: LD_INT 102
16518: PUSH
16519: LD_INT 103
16521: PUSH
16522: LD_INT 106
16524: PUSH
16525: LD_INT 108
16527: PUSH
16528: LD_INT 112
16530: PUSH
16531: LD_INT 113
16533: PUSH
16534: LD_INT 114
16536: PUSH
16537: LD_INT 116
16539: PUSH
16540: LD_INT 117
16542: PUSH
16543: LD_INT 118
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: ST_TO_ADDR
16563: GO 17194
16565: LD_INT 17
16567: DOUBLE
16568: EQUAL
16569: IFTRUE 16573
16571: GO 16797
16573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16574: LD_ADDR_VAR 0 2
16578: PUSH
16579: LD_INT 1
16581: PUSH
16582: LD_INT 2
16584: PUSH
16585: LD_INT 3
16587: PUSH
16588: LD_INT 4
16590: PUSH
16591: LD_INT 5
16593: PUSH
16594: LD_INT 6
16596: PUSH
16597: LD_INT 7
16599: PUSH
16600: LD_INT 8
16602: PUSH
16603: LD_INT 9
16605: PUSH
16606: LD_INT 10
16608: PUSH
16609: LD_INT 11
16611: PUSH
16612: LD_INT 12
16614: PUSH
16615: LD_INT 13
16617: PUSH
16618: LD_INT 14
16620: PUSH
16621: LD_INT 15
16623: PUSH
16624: LD_INT 16
16626: PUSH
16627: LD_INT 17
16629: PUSH
16630: LD_INT 18
16632: PUSH
16633: LD_INT 19
16635: PUSH
16636: LD_INT 20
16638: PUSH
16639: LD_INT 21
16641: PUSH
16642: LD_INT 22
16644: PUSH
16645: LD_INT 23
16647: PUSH
16648: LD_INT 24
16650: PUSH
16651: LD_INT 25
16653: PUSH
16654: LD_INT 26
16656: PUSH
16657: LD_INT 27
16659: PUSH
16660: LD_INT 28
16662: PUSH
16663: LD_INT 29
16665: PUSH
16666: LD_INT 30
16668: PUSH
16669: LD_INT 31
16671: PUSH
16672: LD_INT 32
16674: PUSH
16675: LD_INT 33
16677: PUSH
16678: LD_INT 34
16680: PUSH
16681: LD_INT 36
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 101
16723: PUSH
16724: LD_INT 102
16726: PUSH
16727: LD_INT 103
16729: PUSH
16730: LD_INT 104
16732: PUSH
16733: LD_INT 105
16735: PUSH
16736: LD_INT 106
16738: PUSH
16739: LD_INT 107
16741: PUSH
16742: LD_INT 108
16744: PUSH
16745: LD_INT 109
16747: PUSH
16748: LD_INT 110
16750: PUSH
16751: LD_INT 111
16753: PUSH
16754: LD_INT 112
16756: PUSH
16757: LD_INT 113
16759: PUSH
16760: LD_INT 114
16762: PUSH
16763: LD_INT 116
16765: PUSH
16766: LD_INT 117
16768: PUSH
16769: LD_INT 118
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: ST_TO_ADDR
16795: GO 17194
16797: LD_INT 18
16799: DOUBLE
16800: EQUAL
16801: IFTRUE 16805
16803: GO 16953
16805: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16806: LD_ADDR_VAR 0 2
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: LD_INT 4
16816: PUSH
16817: LD_INT 5
16819: PUSH
16820: LD_INT 7
16822: PUSH
16823: LD_INT 11
16825: PUSH
16826: LD_INT 12
16828: PUSH
16829: LD_INT 15
16831: PUSH
16832: LD_INT 16
16834: PUSH
16835: LD_INT 20
16837: PUSH
16838: LD_INT 21
16840: PUSH
16841: LD_INT 22
16843: PUSH
16844: LD_INT 23
16846: PUSH
16847: LD_INT 25
16849: PUSH
16850: LD_INT 26
16852: PUSH
16853: LD_INT 30
16855: PUSH
16856: LD_INT 31
16858: PUSH
16859: LD_INT 32
16861: PUSH
16862: LD_INT 33
16864: PUSH
16865: LD_INT 34
16867: PUSH
16868: LD_INT 35
16870: PUSH
16871: LD_INT 36
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 101
16899: PUSH
16900: LD_INT 102
16902: PUSH
16903: LD_INT 103
16905: PUSH
16906: LD_INT 106
16908: PUSH
16909: LD_INT 108
16911: PUSH
16912: LD_INT 112
16914: PUSH
16915: LD_INT 113
16917: PUSH
16918: LD_INT 114
16920: PUSH
16921: LD_INT 115
16923: PUSH
16924: LD_INT 116
16926: PUSH
16927: LD_INT 117
16929: PUSH
16930: LD_INT 118
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: ST_TO_ADDR
16951: GO 17194
16953: LD_INT 19
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 17193
16961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16962: LD_ADDR_VAR 0 2
16966: PUSH
16967: LD_INT 1
16969: PUSH
16970: LD_INT 2
16972: PUSH
16973: LD_INT 3
16975: PUSH
16976: LD_INT 4
16978: PUSH
16979: LD_INT 5
16981: PUSH
16982: LD_INT 6
16984: PUSH
16985: LD_INT 7
16987: PUSH
16988: LD_INT 8
16990: PUSH
16991: LD_INT 9
16993: PUSH
16994: LD_INT 10
16996: PUSH
16997: LD_INT 11
16999: PUSH
17000: LD_INT 12
17002: PUSH
17003: LD_INT 13
17005: PUSH
17006: LD_INT 14
17008: PUSH
17009: LD_INT 15
17011: PUSH
17012: LD_INT 16
17014: PUSH
17015: LD_INT 17
17017: PUSH
17018: LD_INT 18
17020: PUSH
17021: LD_INT 19
17023: PUSH
17024: LD_INT 20
17026: PUSH
17027: LD_INT 21
17029: PUSH
17030: LD_INT 22
17032: PUSH
17033: LD_INT 23
17035: PUSH
17036: LD_INT 24
17038: PUSH
17039: LD_INT 25
17041: PUSH
17042: LD_INT 26
17044: PUSH
17045: LD_INT 27
17047: PUSH
17048: LD_INT 28
17050: PUSH
17051: LD_INT 29
17053: PUSH
17054: LD_INT 30
17056: PUSH
17057: LD_INT 31
17059: PUSH
17060: LD_INT 32
17062: PUSH
17063: LD_INT 33
17065: PUSH
17066: LD_INT 34
17068: PUSH
17069: LD_INT 35
17071: PUSH
17072: LD_INT 36
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 101
17115: PUSH
17116: LD_INT 102
17118: PUSH
17119: LD_INT 103
17121: PUSH
17122: LD_INT 104
17124: PUSH
17125: LD_INT 105
17127: PUSH
17128: LD_INT 106
17130: PUSH
17131: LD_INT 107
17133: PUSH
17134: LD_INT 108
17136: PUSH
17137: LD_INT 109
17139: PUSH
17140: LD_INT 110
17142: PUSH
17143: LD_INT 111
17145: PUSH
17146: LD_INT 112
17148: PUSH
17149: LD_INT 113
17151: PUSH
17152: LD_INT 114
17154: PUSH
17155: LD_INT 115
17157: PUSH
17158: LD_INT 116
17160: PUSH
17161: LD_INT 117
17163: PUSH
17164: LD_INT 118
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: ST_TO_ADDR
17191: GO 17194
17193: POP
// end else
17194: GO 17425
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17196: LD_ADDR_VAR 0 2
17200: PUSH
17201: LD_INT 1
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: LD_INT 4
17212: PUSH
17213: LD_INT 5
17215: PUSH
17216: LD_INT 6
17218: PUSH
17219: LD_INT 7
17221: PUSH
17222: LD_INT 8
17224: PUSH
17225: LD_INT 9
17227: PUSH
17228: LD_INT 10
17230: PUSH
17231: LD_INT 11
17233: PUSH
17234: LD_INT 12
17236: PUSH
17237: LD_INT 13
17239: PUSH
17240: LD_INT 14
17242: PUSH
17243: LD_INT 15
17245: PUSH
17246: LD_INT 16
17248: PUSH
17249: LD_INT 17
17251: PUSH
17252: LD_INT 18
17254: PUSH
17255: LD_INT 19
17257: PUSH
17258: LD_INT 20
17260: PUSH
17261: LD_INT 21
17263: PUSH
17264: LD_INT 22
17266: PUSH
17267: LD_INT 23
17269: PUSH
17270: LD_INT 24
17272: PUSH
17273: LD_INT 25
17275: PUSH
17276: LD_INT 26
17278: PUSH
17279: LD_INT 27
17281: PUSH
17282: LD_INT 28
17284: PUSH
17285: LD_INT 29
17287: PUSH
17288: LD_INT 30
17290: PUSH
17291: LD_INT 31
17293: PUSH
17294: LD_INT 32
17296: PUSH
17297: LD_INT 33
17299: PUSH
17300: LD_INT 34
17302: PUSH
17303: LD_INT 35
17305: PUSH
17306: LD_INT 36
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 101
17349: PUSH
17350: LD_INT 102
17352: PUSH
17353: LD_INT 103
17355: PUSH
17356: LD_INT 104
17358: PUSH
17359: LD_INT 105
17361: PUSH
17362: LD_INT 106
17364: PUSH
17365: LD_INT 107
17367: PUSH
17368: LD_INT 108
17370: PUSH
17371: LD_INT 109
17373: PUSH
17374: LD_INT 110
17376: PUSH
17377: LD_INT 111
17379: PUSH
17380: LD_INT 112
17382: PUSH
17383: LD_INT 113
17385: PUSH
17386: LD_INT 114
17388: PUSH
17389: LD_INT 115
17391: PUSH
17392: LD_INT 116
17394: PUSH
17395: LD_INT 117
17397: PUSH
17398: LD_INT 118
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: ST_TO_ADDR
// if result then
17425: LD_VAR 0 2
17429: IFFALSE 18215
// begin normal :=  ;
17431: LD_ADDR_VAR 0 5
17435: PUSH
17436: LD_STRING 
17438: ST_TO_ADDR
// hardcore :=  ;
17439: LD_ADDR_VAR 0 6
17443: PUSH
17444: LD_STRING 
17446: ST_TO_ADDR
// active :=  ;
17447: LD_ADDR_VAR 0 7
17451: PUSH
17452: LD_STRING 
17454: ST_TO_ADDR
// for i = 1 to normalCounter do
17455: LD_ADDR_VAR 0 8
17459: PUSH
17460: DOUBLE
17461: LD_INT 1
17463: DEC
17464: ST_TO_ADDR
17465: LD_EXP 42
17469: PUSH
17470: FOR_TO
17471: IFFALSE 17572
// begin tmp := 0 ;
17473: LD_ADDR_VAR 0 3
17477: PUSH
17478: LD_STRING 0
17480: ST_TO_ADDR
// if result [ 1 ] then
17481: LD_VAR 0 2
17485: PUSH
17486: LD_INT 1
17488: ARRAY
17489: IFFALSE 17554
// if result [ 1 ] [ 1 ] = i then
17491: LD_VAR 0 2
17495: PUSH
17496: LD_INT 1
17498: ARRAY
17499: PUSH
17500: LD_INT 1
17502: ARRAY
17503: PUSH
17504: LD_VAR 0 8
17508: EQUAL
17509: IFFALSE 17554
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17511: LD_ADDR_VAR 0 2
17515: PUSH
17516: LD_VAR 0 2
17520: PPUSH
17521: LD_INT 1
17523: PPUSH
17524: LD_VAR 0 2
17528: PUSH
17529: LD_INT 1
17531: ARRAY
17532: PPUSH
17533: LD_INT 1
17535: PPUSH
17536: CALL_OW 3
17540: PPUSH
17541: CALL_OW 1
17545: ST_TO_ADDR
// tmp := 1 ;
17546: LD_ADDR_VAR 0 3
17550: PUSH
17551: LD_STRING 1
17553: ST_TO_ADDR
// end ; normal := normal & tmp ;
17554: LD_ADDR_VAR 0 5
17558: PUSH
17559: LD_VAR 0 5
17563: PUSH
17564: LD_VAR 0 3
17568: STR
17569: ST_TO_ADDR
// end ;
17570: GO 17470
17572: POP
17573: POP
// for i = 1 to hardcoreCounter do
17574: LD_ADDR_VAR 0 8
17578: PUSH
17579: DOUBLE
17580: LD_INT 1
17582: DEC
17583: ST_TO_ADDR
17584: LD_EXP 43
17588: PUSH
17589: FOR_TO
17590: IFFALSE 17695
// begin tmp := 0 ;
17592: LD_ADDR_VAR 0 3
17596: PUSH
17597: LD_STRING 0
17599: ST_TO_ADDR
// if result [ 2 ] then
17600: LD_VAR 0 2
17604: PUSH
17605: LD_INT 2
17607: ARRAY
17608: IFFALSE 17677
// if result [ 2 ] [ 1 ] = 100 + i then
17610: LD_VAR 0 2
17614: PUSH
17615: LD_INT 2
17617: ARRAY
17618: PUSH
17619: LD_INT 1
17621: ARRAY
17622: PUSH
17623: LD_INT 100
17625: PUSH
17626: LD_VAR 0 8
17630: PLUS
17631: EQUAL
17632: IFFALSE 17677
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17634: LD_ADDR_VAR 0 2
17638: PUSH
17639: LD_VAR 0 2
17643: PPUSH
17644: LD_INT 2
17646: PPUSH
17647: LD_VAR 0 2
17651: PUSH
17652: LD_INT 2
17654: ARRAY
17655: PPUSH
17656: LD_INT 1
17658: PPUSH
17659: CALL_OW 3
17663: PPUSH
17664: CALL_OW 1
17668: ST_TO_ADDR
// tmp := 1 ;
17669: LD_ADDR_VAR 0 3
17673: PUSH
17674: LD_STRING 1
17676: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17677: LD_ADDR_VAR 0 6
17681: PUSH
17682: LD_VAR 0 6
17686: PUSH
17687: LD_VAR 0 3
17691: STR
17692: ST_TO_ADDR
// end ;
17693: GO 17589
17695: POP
17696: POP
// if isGameLoad then
17697: LD_VAR 0 1
17701: IFFALSE 18176
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17703: LD_ADDR_VAR 0 4
17707: PUSH
17708: LD_EXP 46
17712: PUSH
17713: LD_EXP 45
17717: PUSH
17718: LD_EXP 47
17722: PUSH
17723: LD_EXP 44
17727: PUSH
17728: LD_EXP 48
17732: PUSH
17733: LD_EXP 49
17737: PUSH
17738: LD_EXP 50
17742: PUSH
17743: LD_EXP 51
17747: PUSH
17748: LD_EXP 52
17752: PUSH
17753: LD_EXP 53
17757: PUSH
17758: LD_EXP 54
17762: PUSH
17763: LD_EXP 55
17767: PUSH
17768: LD_EXP 56
17772: PUSH
17773: LD_EXP 57
17777: PUSH
17778: LD_EXP 65
17782: PUSH
17783: LD_EXP 66
17787: PUSH
17788: LD_EXP 67
17792: PUSH
17793: LD_EXP 68
17797: PUSH
17798: LD_EXP 70
17802: PUSH
17803: LD_EXP 71
17807: PUSH
17808: LD_EXP 72
17812: PUSH
17813: LD_EXP 75
17817: PUSH
17818: LD_EXP 77
17822: PUSH
17823: LD_EXP 78
17827: PUSH
17828: LD_EXP 79
17832: PUSH
17833: LD_EXP 81
17837: PUSH
17838: LD_EXP 82
17842: PUSH
17843: LD_EXP 85
17847: PUSH
17848: LD_EXP 86
17852: PUSH
17853: LD_EXP 87
17857: PUSH
17858: LD_EXP 88
17862: PUSH
17863: LD_EXP 89
17867: PUSH
17868: LD_EXP 90
17872: PUSH
17873: LD_EXP 91
17877: PUSH
17878: LD_EXP 92
17882: PUSH
17883: LD_EXP 93
17887: PUSH
17888: LD_EXP 58
17892: PUSH
17893: LD_EXP 59
17897: PUSH
17898: LD_EXP 62
17902: PUSH
17903: LD_EXP 63
17907: PUSH
17908: LD_EXP 64
17912: PUSH
17913: LD_EXP 60
17917: PUSH
17918: LD_EXP 61
17922: PUSH
17923: LD_EXP 69
17927: PUSH
17928: LD_EXP 73
17932: PUSH
17933: LD_EXP 74
17937: PUSH
17938: LD_EXP 76
17942: PUSH
17943: LD_EXP 80
17947: PUSH
17948: LD_EXP 83
17952: PUSH
17953: LD_EXP 84
17957: PUSH
17958: LD_EXP 94
17962: PUSH
17963: LD_EXP 95
17967: PUSH
17968: LD_EXP 96
17972: PUSH
17973: LD_EXP 97
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: ST_TO_ADDR
// tmp :=  ;
18034: LD_ADDR_VAR 0 3
18038: PUSH
18039: LD_STRING 
18041: ST_TO_ADDR
// for i = 1 to normalCounter do
18042: LD_ADDR_VAR 0 8
18046: PUSH
18047: DOUBLE
18048: LD_INT 1
18050: DEC
18051: ST_TO_ADDR
18052: LD_EXP 42
18056: PUSH
18057: FOR_TO
18058: IFFALSE 18094
// begin if flags [ i ] then
18060: LD_VAR 0 4
18064: PUSH
18065: LD_VAR 0 8
18069: ARRAY
18070: IFFALSE 18092
// tmp := tmp & i & ; ;
18072: LD_ADDR_VAR 0 3
18076: PUSH
18077: LD_VAR 0 3
18081: PUSH
18082: LD_VAR 0 8
18086: STR
18087: PUSH
18088: LD_STRING ;
18090: STR
18091: ST_TO_ADDR
// end ;
18092: GO 18057
18094: POP
18095: POP
// for i = 1 to hardcoreCounter do
18096: LD_ADDR_VAR 0 8
18100: PUSH
18101: DOUBLE
18102: LD_INT 1
18104: DEC
18105: ST_TO_ADDR
18106: LD_EXP 43
18110: PUSH
18111: FOR_TO
18112: IFFALSE 18158
// begin if flags [ normalCounter + i ] then
18114: LD_VAR 0 4
18118: PUSH
18119: LD_EXP 42
18123: PUSH
18124: LD_VAR 0 8
18128: PLUS
18129: ARRAY
18130: IFFALSE 18156
// tmp := tmp & ( 100 + i ) & ; ;
18132: LD_ADDR_VAR 0 3
18136: PUSH
18137: LD_VAR 0 3
18141: PUSH
18142: LD_INT 100
18144: PUSH
18145: LD_VAR 0 8
18149: PLUS
18150: STR
18151: PUSH
18152: LD_STRING ;
18154: STR
18155: ST_TO_ADDR
// end ;
18156: GO 18111
18158: POP
18159: POP
// if tmp then
18160: LD_VAR 0 3
18164: IFFALSE 18176
// active := tmp ;
18166: LD_ADDR_VAR 0 7
18170: PUSH
18171: LD_VAR 0 3
18175: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18176: LD_STRING getStreamItemsFromMission("
18178: PUSH
18179: LD_VAR 0 5
18183: STR
18184: PUSH
18185: LD_STRING ","
18187: STR
18188: PUSH
18189: LD_VAR 0 6
18193: STR
18194: PUSH
18195: LD_STRING ","
18197: STR
18198: PUSH
18199: LD_VAR 0 7
18203: STR
18204: PUSH
18205: LD_STRING ")
18207: STR
18208: PPUSH
18209: CALL_OW 559
// end else
18213: GO 18222
// ToLua ( getStreamItemsFromMission("","","") ) ;
18215: LD_STRING getStreamItemsFromMission("","","")
18217: PPUSH
18218: CALL_OW 559
// end ;
18222: LD_VAR 0 2
18226: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18227: LD_EXP 41
18231: PUSH
18232: LD_EXP 46
18236: AND
18237: IFFALSE 18361
18239: GO 18241
18241: DISABLE
18242: LD_INT 0
18244: PPUSH
18245: PPUSH
// begin enable ;
18246: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18247: LD_ADDR_VAR 0 2
18251: PUSH
18252: LD_INT 22
18254: PUSH
18255: LD_OWVAR 2
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: LD_INT 34
18269: PUSH
18270: LD_INT 7
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 34
18279: PUSH
18280: LD_INT 45
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 34
18289: PUSH
18290: LD_INT 28
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 34
18299: PUSH
18300: LD_INT 47
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PPUSH
18318: CALL_OW 69
18322: ST_TO_ADDR
// if not tmp then
18323: LD_VAR 0 2
18327: NOT
18328: IFFALSE 18332
// exit ;
18330: GO 18361
// for i in tmp do
18332: LD_ADDR_VAR 0 1
18336: PUSH
18337: LD_VAR 0 2
18341: PUSH
18342: FOR_IN
18343: IFFALSE 18359
// begin SetLives ( i , 0 ) ;
18345: LD_VAR 0 1
18349: PPUSH
18350: LD_INT 0
18352: PPUSH
18353: CALL_OW 234
// end ;
18357: GO 18342
18359: POP
18360: POP
// end ;
18361: PPOPN 2
18363: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18364: LD_EXP 41
18368: PUSH
18369: LD_EXP 47
18373: AND
18374: IFFALSE 18458
18376: GO 18378
18378: DISABLE
18379: LD_INT 0
18381: PPUSH
18382: PPUSH
// begin enable ;
18383: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18384: LD_ADDR_VAR 0 2
18388: PUSH
18389: LD_INT 22
18391: PUSH
18392: LD_OWVAR 2
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 32
18403: PUSH
18404: LD_INT 3
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PPUSH
18415: CALL_OW 69
18419: ST_TO_ADDR
// if not tmp then
18420: LD_VAR 0 2
18424: NOT
18425: IFFALSE 18429
// exit ;
18427: GO 18458
// for i in tmp do
18429: LD_ADDR_VAR 0 1
18433: PUSH
18434: LD_VAR 0 2
18438: PUSH
18439: FOR_IN
18440: IFFALSE 18456
// begin SetLives ( i , 0 ) ;
18442: LD_VAR 0 1
18446: PPUSH
18447: LD_INT 0
18449: PPUSH
18450: CALL_OW 234
// end ;
18454: GO 18439
18456: POP
18457: POP
// end ;
18458: PPOPN 2
18460: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18461: LD_EXP 41
18465: PUSH
18466: LD_EXP 44
18470: AND
18471: IFFALSE 18564
18473: GO 18475
18475: DISABLE
18476: LD_INT 0
18478: PPUSH
// begin enable ;
18479: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18480: LD_ADDR_VAR 0 1
18484: PUSH
18485: LD_INT 22
18487: PUSH
18488: LD_OWVAR 2
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: LD_INT 25
18502: PUSH
18503: LD_INT 5
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 25
18512: PUSH
18513: LD_INT 9
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 25
18522: PUSH
18523: LD_INT 8
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PPUSH
18540: CALL_OW 69
18544: PUSH
18545: FOR_IN
18546: IFFALSE 18562
// begin SetClass ( i , 1 ) ;
18548: LD_VAR 0 1
18552: PPUSH
18553: LD_INT 1
18555: PPUSH
18556: CALL_OW 336
// end ;
18560: GO 18545
18562: POP
18563: POP
// end ;
18564: PPOPN 1
18566: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18567: LD_EXP 41
18571: PUSH
18572: LD_EXP 45
18576: AND
18577: PUSH
18578: LD_OWVAR 65
18582: PUSH
18583: LD_INT 7
18585: LESS
18586: AND
18587: IFFALSE 18601
18589: GO 18591
18591: DISABLE
// begin enable ;
18592: ENABLE
// game_speed := 7 ;
18593: LD_ADDR_OWVAR 65
18597: PUSH
18598: LD_INT 7
18600: ST_TO_ADDR
// end ;
18601: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18602: LD_EXP 41
18606: PUSH
18607: LD_EXP 48
18611: AND
18612: IFFALSE 18814
18614: GO 18616
18616: DISABLE
18617: LD_INT 0
18619: PPUSH
18620: PPUSH
18621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18622: LD_ADDR_VAR 0 3
18626: PUSH
18627: LD_INT 81
18629: PUSH
18630: LD_OWVAR 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 21
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PPUSH
18653: CALL_OW 69
18657: ST_TO_ADDR
// if not tmp then
18658: LD_VAR 0 3
18662: NOT
18663: IFFALSE 18667
// exit ;
18665: GO 18814
// if tmp > 5 then
18667: LD_VAR 0 3
18671: PUSH
18672: LD_INT 5
18674: GREATER
18675: IFFALSE 18687
// k := 5 else
18677: LD_ADDR_VAR 0 2
18681: PUSH
18682: LD_INT 5
18684: ST_TO_ADDR
18685: GO 18697
// k := tmp ;
18687: LD_ADDR_VAR 0 2
18691: PUSH
18692: LD_VAR 0 3
18696: ST_TO_ADDR
// for i := 1 to k do
18697: LD_ADDR_VAR 0 1
18701: PUSH
18702: DOUBLE
18703: LD_INT 1
18705: DEC
18706: ST_TO_ADDR
18707: LD_VAR 0 2
18711: PUSH
18712: FOR_TO
18713: IFFALSE 18812
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18715: LD_VAR 0 3
18719: PUSH
18720: LD_VAR 0 1
18724: ARRAY
18725: PPUSH
18726: LD_VAR 0 1
18730: PUSH
18731: LD_INT 4
18733: MOD
18734: PUSH
18735: LD_INT 1
18737: PLUS
18738: PPUSH
18739: CALL_OW 259
18743: PUSH
18744: LD_INT 10
18746: LESS
18747: IFFALSE 18810
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18749: LD_VAR 0 3
18753: PUSH
18754: LD_VAR 0 1
18758: ARRAY
18759: PPUSH
18760: LD_VAR 0 1
18764: PUSH
18765: LD_INT 4
18767: MOD
18768: PUSH
18769: LD_INT 1
18771: PLUS
18772: PPUSH
18773: LD_VAR 0 3
18777: PUSH
18778: LD_VAR 0 1
18782: ARRAY
18783: PPUSH
18784: LD_VAR 0 1
18788: PUSH
18789: LD_INT 4
18791: MOD
18792: PUSH
18793: LD_INT 1
18795: PLUS
18796: PPUSH
18797: CALL_OW 259
18801: PUSH
18802: LD_INT 1
18804: PLUS
18805: PPUSH
18806: CALL_OW 237
18810: GO 18712
18812: POP
18813: POP
// end ;
18814: PPOPN 3
18816: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18817: LD_EXP 41
18821: PUSH
18822: LD_EXP 49
18826: AND
18827: IFFALSE 18847
18829: GO 18831
18831: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18832: LD_INT 4
18834: PPUSH
18835: LD_OWVAR 2
18839: PPUSH
18840: LD_INT 0
18842: PPUSH
18843: CALL_OW 324
18847: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18848: LD_EXP 41
18852: PUSH
18853: LD_EXP 78
18857: AND
18858: IFFALSE 18878
18860: GO 18862
18862: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18863: LD_INT 19
18865: PPUSH
18866: LD_OWVAR 2
18870: PPUSH
18871: LD_INT 0
18873: PPUSH
18874: CALL_OW 324
18878: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18879: LD_EXP 41
18883: PUSH
18884: LD_EXP 50
18888: AND
18889: IFFALSE 18991
18891: GO 18893
18893: DISABLE
18894: LD_INT 0
18896: PPUSH
18897: PPUSH
// begin enable ;
18898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18899: LD_ADDR_VAR 0 2
18903: PUSH
18904: LD_INT 22
18906: PUSH
18907: LD_OWVAR 2
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: LD_INT 34
18921: PUSH
18922: LD_INT 11
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 34
18931: PUSH
18932: LD_INT 30
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: LIST
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PPUSH
18948: CALL_OW 69
18952: ST_TO_ADDR
// if not tmp then
18953: LD_VAR 0 2
18957: NOT
18958: IFFALSE 18962
// exit ;
18960: GO 18991
// for i in tmp do
18962: LD_ADDR_VAR 0 1
18966: PUSH
18967: LD_VAR 0 2
18971: PUSH
18972: FOR_IN
18973: IFFALSE 18989
// begin SetLives ( i , 0 ) ;
18975: LD_VAR 0 1
18979: PPUSH
18980: LD_INT 0
18982: PPUSH
18983: CALL_OW 234
// end ;
18987: GO 18972
18989: POP
18990: POP
// end ;
18991: PPOPN 2
18993: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18994: LD_EXP 41
18998: PUSH
18999: LD_EXP 51
19003: AND
19004: IFFALSE 19024
19006: GO 19008
19008: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19009: LD_INT 32
19011: PPUSH
19012: LD_OWVAR 2
19016: PPUSH
19017: LD_INT 0
19019: PPUSH
19020: CALL_OW 324
19024: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19025: LD_EXP 41
19029: PUSH
19030: LD_EXP 52
19034: AND
19035: IFFALSE 19216
19037: GO 19039
19039: DISABLE
19040: LD_INT 0
19042: PPUSH
19043: PPUSH
19044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19045: LD_ADDR_VAR 0 2
19049: PUSH
19050: LD_INT 22
19052: PUSH
19053: LD_OWVAR 2
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 33
19064: PUSH
19065: LD_INT 3
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PPUSH
19076: CALL_OW 69
19080: ST_TO_ADDR
// if not tmp then
19081: LD_VAR 0 2
19085: NOT
19086: IFFALSE 19090
// exit ;
19088: GO 19216
// side := 0 ;
19090: LD_ADDR_VAR 0 3
19094: PUSH
19095: LD_INT 0
19097: ST_TO_ADDR
// for i := 1 to 8 do
19098: LD_ADDR_VAR 0 1
19102: PUSH
19103: DOUBLE
19104: LD_INT 1
19106: DEC
19107: ST_TO_ADDR
19108: LD_INT 8
19110: PUSH
19111: FOR_TO
19112: IFFALSE 19160
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19114: LD_OWVAR 2
19118: PUSH
19119: LD_VAR 0 1
19123: NONEQUAL
19124: PUSH
19125: LD_OWVAR 2
19129: PPUSH
19130: LD_VAR 0 1
19134: PPUSH
19135: CALL_OW 81
19139: PUSH
19140: LD_INT 2
19142: EQUAL
19143: AND
19144: IFFALSE 19158
// begin side := i ;
19146: LD_ADDR_VAR 0 3
19150: PUSH
19151: LD_VAR 0 1
19155: ST_TO_ADDR
// break ;
19156: GO 19160
// end ;
19158: GO 19111
19160: POP
19161: POP
// if not side then
19162: LD_VAR 0 3
19166: NOT
19167: IFFALSE 19171
// exit ;
19169: GO 19216
// for i := 1 to tmp do
19171: LD_ADDR_VAR 0 1
19175: PUSH
19176: DOUBLE
19177: LD_INT 1
19179: DEC
19180: ST_TO_ADDR
19181: LD_VAR 0 2
19185: PUSH
19186: FOR_TO
19187: IFFALSE 19214
// if Prob ( 60 ) then
19189: LD_INT 60
19191: PPUSH
19192: CALL_OW 13
19196: IFFALSE 19212
// SetSide ( i , side ) ;
19198: LD_VAR 0 1
19202: PPUSH
19203: LD_VAR 0 3
19207: PPUSH
19208: CALL_OW 235
19212: GO 19186
19214: POP
19215: POP
// end ;
19216: PPOPN 3
19218: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19219: LD_EXP 41
19223: PUSH
19224: LD_EXP 54
19228: AND
19229: IFFALSE 19348
19231: GO 19233
19233: DISABLE
19234: LD_INT 0
19236: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19237: LD_ADDR_VAR 0 1
19241: PUSH
19242: LD_INT 22
19244: PUSH
19245: LD_OWVAR 2
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 21
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 3
19266: PUSH
19267: LD_INT 23
19269: PUSH
19270: LD_INT 0
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 69
19290: PUSH
19291: FOR_IN
19292: IFFALSE 19346
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL_OW 257
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: LD_INT 3
19312: PUSH
19313: LD_INT 4
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: IN
19322: IFFALSE 19344
// SetClass ( un , rand ( 1 , 4 ) ) ;
19324: LD_VAR 0 1
19328: PPUSH
19329: LD_INT 1
19331: PPUSH
19332: LD_INT 4
19334: PPUSH
19335: CALL_OW 12
19339: PPUSH
19340: CALL_OW 336
19344: GO 19291
19346: POP
19347: POP
// end ;
19348: PPOPN 1
19350: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19351: LD_EXP 41
19355: PUSH
19356: LD_EXP 53
19360: AND
19361: IFFALSE 19440
19363: GO 19365
19365: DISABLE
19366: LD_INT 0
19368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19369: LD_ADDR_VAR 0 1
19373: PUSH
19374: LD_INT 22
19376: PUSH
19377: LD_OWVAR 2
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 21
19388: PUSH
19389: LD_INT 3
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PPUSH
19400: CALL_OW 69
19404: ST_TO_ADDR
// if not tmp then
19405: LD_VAR 0 1
19409: NOT
19410: IFFALSE 19414
// exit ;
19412: GO 19440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19414: LD_VAR 0 1
19418: PUSH
19419: LD_INT 1
19421: PPUSH
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 12
19431: ARRAY
19432: PPUSH
19433: LD_INT 100
19435: PPUSH
19436: CALL_OW 234
// end ;
19440: PPOPN 1
19442: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19443: LD_EXP 41
19447: PUSH
19448: LD_EXP 55
19452: AND
19453: IFFALSE 19551
19455: GO 19457
19457: DISABLE
19458: LD_INT 0
19460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19461: LD_ADDR_VAR 0 1
19465: PUSH
19466: LD_INT 22
19468: PUSH
19469: LD_OWVAR 2
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 21
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PPUSH
19492: CALL_OW 69
19496: ST_TO_ADDR
// if not tmp then
19497: LD_VAR 0 1
19501: NOT
19502: IFFALSE 19506
// exit ;
19504: GO 19551
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19506: LD_VAR 0 1
19510: PUSH
19511: LD_INT 1
19513: PPUSH
19514: LD_VAR 0 1
19518: PPUSH
19519: CALL_OW 12
19523: ARRAY
19524: PPUSH
19525: LD_INT 1
19527: PPUSH
19528: LD_INT 4
19530: PPUSH
19531: CALL_OW 12
19535: PPUSH
19536: LD_INT 3000
19538: PPUSH
19539: LD_INT 9000
19541: PPUSH
19542: CALL_OW 12
19546: PPUSH
19547: CALL_OW 492
// end ;
19551: PPOPN 1
19553: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19554: LD_EXP 41
19558: PUSH
19559: LD_EXP 56
19563: AND
19564: IFFALSE 19584
19566: GO 19568
19568: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19569: LD_INT 1
19571: PPUSH
19572: LD_OWVAR 2
19576: PPUSH
19577: LD_INT 0
19579: PPUSH
19580: CALL_OW 324
19584: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19585: LD_EXP 41
19589: PUSH
19590: LD_EXP 57
19594: AND
19595: IFFALSE 19678
19597: GO 19599
19599: DISABLE
19600: LD_INT 0
19602: PPUSH
19603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19604: LD_ADDR_VAR 0 2
19608: PUSH
19609: LD_INT 22
19611: PUSH
19612: LD_OWVAR 2
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 21
19623: PUSH
19624: LD_INT 3
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PPUSH
19635: CALL_OW 69
19639: ST_TO_ADDR
// if not tmp then
19640: LD_VAR 0 2
19644: NOT
19645: IFFALSE 19649
// exit ;
19647: GO 19678
// for i in tmp do
19649: LD_ADDR_VAR 0 1
19653: PUSH
19654: LD_VAR 0 2
19658: PUSH
19659: FOR_IN
19660: IFFALSE 19676
// SetBLevel ( i , 10 ) ;
19662: LD_VAR 0 1
19666: PPUSH
19667: LD_INT 10
19669: PPUSH
19670: CALL_OW 241
19674: GO 19659
19676: POP
19677: POP
// end ;
19678: PPOPN 2
19680: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19681: LD_EXP 41
19685: PUSH
19686: LD_EXP 58
19690: AND
19691: IFFALSE 19802
19693: GO 19695
19695: DISABLE
19696: LD_INT 0
19698: PPUSH
19699: PPUSH
19700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19701: LD_ADDR_VAR 0 3
19705: PUSH
19706: LD_INT 22
19708: PUSH
19709: LD_OWVAR 2
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 25
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PPUSH
19732: CALL_OW 69
19736: ST_TO_ADDR
// if not tmp then
19737: LD_VAR 0 3
19741: NOT
19742: IFFALSE 19746
// exit ;
19744: GO 19802
// un := tmp [ rand ( 1 , tmp ) ] ;
19746: LD_ADDR_VAR 0 2
19750: PUSH
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 1
19758: PPUSH
19759: LD_VAR 0 3
19763: PPUSH
19764: CALL_OW 12
19768: ARRAY
19769: ST_TO_ADDR
// if Crawls ( un ) then
19770: LD_VAR 0 2
19774: PPUSH
19775: CALL_OW 318
19779: IFFALSE 19790
// ComWalk ( un ) ;
19781: LD_VAR 0 2
19785: PPUSH
19786: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19790: LD_VAR 0 2
19794: PPUSH
19795: LD_INT 5
19797: PPUSH
19798: CALL_OW 336
// end ;
19802: PPOPN 3
19804: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19805: LD_EXP 41
19809: PUSH
19810: LD_EXP 59
19814: AND
19815: PUSH
19816: LD_OWVAR 67
19820: PUSH
19821: LD_INT 4
19823: LESS
19824: AND
19825: IFFALSE 19844
19827: GO 19829
19829: DISABLE
// begin Difficulty := Difficulty + 1 ;
19830: LD_ADDR_OWVAR 67
19834: PUSH
19835: LD_OWVAR 67
19839: PUSH
19840: LD_INT 1
19842: PLUS
19843: ST_TO_ADDR
// end ;
19844: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19845: LD_EXP 41
19849: PUSH
19850: LD_EXP 60
19854: AND
19855: IFFALSE 19958
19857: GO 19859
19859: DISABLE
19860: LD_INT 0
19862: PPUSH
// begin for i := 1 to 5 do
19863: LD_ADDR_VAR 0 1
19867: PUSH
19868: DOUBLE
19869: LD_INT 1
19871: DEC
19872: ST_TO_ADDR
19873: LD_INT 5
19875: PUSH
19876: FOR_TO
19877: IFFALSE 19956
// begin uc_nation := nation_nature ;
19879: LD_ADDR_OWVAR 21
19883: PUSH
19884: LD_INT 0
19886: ST_TO_ADDR
// uc_side := 0 ;
19887: LD_ADDR_OWVAR 20
19891: PUSH
19892: LD_INT 0
19894: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19895: LD_ADDR_OWVAR 29
19899: PUSH
19900: LD_INT 12
19902: PUSH
19903: LD_INT 12
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: ST_TO_ADDR
// hc_agressivity := 20 ;
19910: LD_ADDR_OWVAR 35
19914: PUSH
19915: LD_INT 20
19917: ST_TO_ADDR
// hc_class := class_tiger ;
19918: LD_ADDR_OWVAR 28
19922: PUSH
19923: LD_INT 14
19925: ST_TO_ADDR
// hc_gallery :=  ;
19926: LD_ADDR_OWVAR 33
19930: PUSH
19931: LD_STRING 
19933: ST_TO_ADDR
// hc_name :=  ;
19934: LD_ADDR_OWVAR 26
19938: PUSH
19939: LD_STRING 
19941: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19942: CALL_OW 44
19946: PPUSH
19947: LD_INT 0
19949: PPUSH
19950: CALL_OW 51
// end ;
19954: GO 19876
19956: POP
19957: POP
// end ;
19958: PPOPN 1
19960: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19961: LD_EXP 41
19965: PUSH
19966: LD_EXP 61
19970: AND
19971: IFFALSE 19980
19973: GO 19975
19975: DISABLE
// StreamSibBomb ;
19976: CALL 19981 0 0
19980: END
// export function StreamSibBomb ; var i , x , y ; begin
19981: LD_INT 0
19983: PPUSH
19984: PPUSH
19985: PPUSH
19986: PPUSH
// result := false ;
19987: LD_ADDR_VAR 0 1
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// for i := 1 to 16 do
19995: LD_ADDR_VAR 0 2
19999: PUSH
20000: DOUBLE
20001: LD_INT 1
20003: DEC
20004: ST_TO_ADDR
20005: LD_INT 16
20007: PUSH
20008: FOR_TO
20009: IFFALSE 20208
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20011: LD_ADDR_VAR 0 3
20015: PUSH
20016: LD_INT 10
20018: PUSH
20019: LD_INT 20
20021: PUSH
20022: LD_INT 30
20024: PUSH
20025: LD_INT 40
20027: PUSH
20028: LD_INT 50
20030: PUSH
20031: LD_INT 60
20033: PUSH
20034: LD_INT 70
20036: PUSH
20037: LD_INT 80
20039: PUSH
20040: LD_INT 90
20042: PUSH
20043: LD_INT 100
20045: PUSH
20046: LD_INT 110
20048: PUSH
20049: LD_INT 120
20051: PUSH
20052: LD_INT 130
20054: PUSH
20055: LD_INT 140
20057: PUSH
20058: LD_INT 150
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 1
20080: PPUSH
20081: LD_INT 15
20083: PPUSH
20084: CALL_OW 12
20088: ARRAY
20089: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20090: LD_ADDR_VAR 0 4
20094: PUSH
20095: LD_INT 10
20097: PUSH
20098: LD_INT 20
20100: PUSH
20101: LD_INT 30
20103: PUSH
20104: LD_INT 40
20106: PUSH
20107: LD_INT 50
20109: PUSH
20110: LD_INT 60
20112: PUSH
20113: LD_INT 70
20115: PUSH
20116: LD_INT 80
20118: PUSH
20119: LD_INT 90
20121: PUSH
20122: LD_INT 100
20124: PUSH
20125: LD_INT 110
20127: PUSH
20128: LD_INT 120
20130: PUSH
20131: LD_INT 130
20133: PUSH
20134: LD_INT 140
20136: PUSH
20137: LD_INT 150
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: PPUSH
20160: LD_INT 15
20162: PPUSH
20163: CALL_OW 12
20167: ARRAY
20168: ST_TO_ADDR
// if ValidHex ( x , y ) then
20169: LD_VAR 0 3
20173: PPUSH
20174: LD_VAR 0 4
20178: PPUSH
20179: CALL_OW 488
20183: IFFALSE 20206
// begin result := [ x , y ] ;
20185: LD_ADDR_VAR 0 1
20189: PUSH
20190: LD_VAR 0 3
20194: PUSH
20195: LD_VAR 0 4
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: ST_TO_ADDR
// break ;
20204: GO 20208
// end ; end ;
20206: GO 20008
20208: POP
20209: POP
// if result then
20210: LD_VAR 0 1
20214: IFFALSE 20274
// begin ToLua ( playSibBomb() ) ;
20216: LD_STRING playSibBomb()
20218: PPUSH
20219: CALL_OW 559
// wait ( 0 0$14 ) ;
20223: LD_INT 490
20225: PPUSH
20226: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20230: LD_VAR 0 1
20234: PUSH
20235: LD_INT 1
20237: ARRAY
20238: PPUSH
20239: LD_VAR 0 1
20243: PUSH
20244: LD_INT 2
20246: ARRAY
20247: PPUSH
20248: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20252: LD_VAR 0 1
20256: PUSH
20257: LD_INT 1
20259: ARRAY
20260: PPUSH
20261: LD_VAR 0 1
20265: PUSH
20266: LD_INT 2
20268: ARRAY
20269: PPUSH
20270: CALL_OW 429
// end ; end ;
20274: LD_VAR 0 1
20278: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20279: LD_EXP 41
20283: PUSH
20284: LD_EXP 63
20288: AND
20289: IFFALSE 20301
20291: GO 20293
20293: DISABLE
// YouLost (  ) ;
20294: LD_STRING 
20296: PPUSH
20297: CALL_OW 104
20301: END
// every 0 0$1 trigger StreamModeActive and sFog do
20302: LD_EXP 41
20306: PUSH
20307: LD_EXP 62
20311: AND
20312: IFFALSE 20326
20314: GO 20316
20316: DISABLE
// FogOff ( your_side ) ;
20317: LD_OWVAR 2
20321: PPUSH
20322: CALL_OW 344
20326: END
// every 0 0$1 trigger StreamModeActive and sSun do
20327: LD_EXP 41
20331: PUSH
20332: LD_EXP 64
20336: AND
20337: IFFALSE 20365
20339: GO 20341
20341: DISABLE
// begin solar_recharge_percent := 0 ;
20342: LD_ADDR_OWVAR 79
20346: PUSH
20347: LD_INT 0
20349: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20350: LD_INT 10500
20352: PPUSH
20353: CALL_OW 67
// solar_recharge_percent := 100 ;
20357: LD_ADDR_OWVAR 79
20361: PUSH
20362: LD_INT 100
20364: ST_TO_ADDR
// end ;
20365: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20366: LD_EXP 41
20370: PUSH
20371: LD_EXP 65
20375: AND
20376: IFFALSE 20615
20378: GO 20380
20380: DISABLE
20381: LD_INT 0
20383: PPUSH
20384: PPUSH
20385: PPUSH
// begin tmp := [ ] ;
20386: LD_ADDR_VAR 0 3
20390: PUSH
20391: EMPTY
20392: ST_TO_ADDR
// for i := 1 to 6 do
20393: LD_ADDR_VAR 0 1
20397: PUSH
20398: DOUBLE
20399: LD_INT 1
20401: DEC
20402: ST_TO_ADDR
20403: LD_INT 6
20405: PUSH
20406: FOR_TO
20407: IFFALSE 20512
// begin uc_nation := nation_nature ;
20409: LD_ADDR_OWVAR 21
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// uc_side := 0 ;
20417: LD_ADDR_OWVAR 20
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20425: LD_ADDR_OWVAR 29
20429: PUSH
20430: LD_INT 12
20432: PUSH
20433: LD_INT 12
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: ST_TO_ADDR
// hc_agressivity := 20 ;
20440: LD_ADDR_OWVAR 35
20444: PUSH
20445: LD_INT 20
20447: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20448: LD_ADDR_OWVAR 28
20452: PUSH
20453: LD_INT 17
20455: ST_TO_ADDR
// hc_gallery :=  ;
20456: LD_ADDR_OWVAR 33
20460: PUSH
20461: LD_STRING 
20463: ST_TO_ADDR
// hc_name :=  ;
20464: LD_ADDR_OWVAR 26
20468: PUSH
20469: LD_STRING 
20471: ST_TO_ADDR
// un := CreateHuman ;
20472: LD_ADDR_VAR 0 2
20476: PUSH
20477: CALL_OW 44
20481: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20482: LD_VAR 0 2
20486: PPUSH
20487: LD_INT 1
20489: PPUSH
20490: CALL_OW 51
// tmp := tmp ^ un ;
20494: LD_ADDR_VAR 0 3
20498: PUSH
20499: LD_VAR 0 3
20503: PUSH
20504: LD_VAR 0 2
20508: ADD
20509: ST_TO_ADDR
// end ;
20510: GO 20406
20512: POP
20513: POP
// repeat wait ( 0 0$1 ) ;
20514: LD_INT 35
20516: PPUSH
20517: CALL_OW 67
// for un in tmp do
20521: LD_ADDR_VAR 0 2
20525: PUSH
20526: LD_VAR 0 3
20530: PUSH
20531: FOR_IN
20532: IFFALSE 20606
// begin if IsDead ( un ) then
20534: LD_VAR 0 2
20538: PPUSH
20539: CALL_OW 301
20543: IFFALSE 20563
// begin tmp := tmp diff un ;
20545: LD_ADDR_VAR 0 3
20549: PUSH
20550: LD_VAR 0 3
20554: PUSH
20555: LD_VAR 0 2
20559: DIFF
20560: ST_TO_ADDR
// continue ;
20561: GO 20531
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20563: LD_VAR 0 2
20567: PPUSH
20568: LD_INT 3
20570: PUSH
20571: LD_INT 22
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PPUSH
20585: CALL_OW 69
20589: PPUSH
20590: LD_VAR 0 2
20594: PPUSH
20595: CALL_OW 74
20599: PPUSH
20600: CALL_OW 115
// end ;
20604: GO 20531
20606: POP
20607: POP
// until not tmp ;
20608: LD_VAR 0 3
20612: NOT
20613: IFFALSE 20514
// end ;
20615: PPOPN 3
20617: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20618: LD_EXP 41
20622: PUSH
20623: LD_EXP 66
20627: AND
20628: IFFALSE 20682
20630: GO 20632
20632: DISABLE
// begin ToLua ( displayTroll(); ) ;
20633: LD_STRING displayTroll();
20635: PPUSH
20636: CALL_OW 559
// wait ( 3 3$00 ) ;
20640: LD_INT 6300
20642: PPUSH
20643: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20647: LD_STRING hideTroll();
20649: PPUSH
20650: CALL_OW 559
// wait ( 1 1$00 ) ;
20654: LD_INT 2100
20656: PPUSH
20657: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20661: LD_STRING displayTroll();
20663: PPUSH
20664: CALL_OW 559
// wait ( 1 1$00 ) ;
20668: LD_INT 2100
20670: PPUSH
20671: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20675: LD_STRING hideTroll();
20677: PPUSH
20678: CALL_OW 559
// end ;
20682: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20683: LD_EXP 41
20687: PUSH
20688: LD_EXP 67
20692: AND
20693: IFFALSE 20756
20695: GO 20697
20697: DISABLE
20698: LD_INT 0
20700: PPUSH
// begin p := 0 ;
20701: LD_ADDR_VAR 0 1
20705: PUSH
20706: LD_INT 0
20708: ST_TO_ADDR
// repeat game_speed := 1 ;
20709: LD_ADDR_OWVAR 65
20713: PUSH
20714: LD_INT 1
20716: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20717: LD_INT 35
20719: PPUSH
20720: CALL_OW 67
// p := p + 1 ;
20724: LD_ADDR_VAR 0 1
20728: PUSH
20729: LD_VAR 0 1
20733: PUSH
20734: LD_INT 1
20736: PLUS
20737: ST_TO_ADDR
// until p >= 60 ;
20738: LD_VAR 0 1
20742: PUSH
20743: LD_INT 60
20745: GREATEREQUAL
20746: IFFALSE 20709
// game_speed := 4 ;
20748: LD_ADDR_OWVAR 65
20752: PUSH
20753: LD_INT 4
20755: ST_TO_ADDR
// end ;
20756: PPOPN 1
20758: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20759: LD_EXP 41
20763: PUSH
20764: LD_EXP 68
20768: AND
20769: IFFALSE 20915
20771: GO 20773
20773: DISABLE
20774: LD_INT 0
20776: PPUSH
20777: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20778: LD_ADDR_VAR 0 1
20782: PUSH
20783: LD_INT 22
20785: PUSH
20786: LD_OWVAR 2
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: LD_INT 30
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 30
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PPUSH
20827: CALL_OW 69
20831: ST_TO_ADDR
// if not depot then
20832: LD_VAR 0 1
20836: NOT
20837: IFFALSE 20841
// exit ;
20839: GO 20915
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20841: LD_ADDR_VAR 0 2
20845: PUSH
20846: LD_VAR 0 1
20850: PUSH
20851: LD_INT 1
20853: PPUSH
20854: LD_VAR 0 1
20858: PPUSH
20859: CALL_OW 12
20863: ARRAY
20864: PPUSH
20865: CALL_OW 274
20869: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20870: LD_VAR 0 2
20874: PPUSH
20875: LD_INT 1
20877: PPUSH
20878: LD_INT 0
20880: PPUSH
20881: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20885: LD_VAR 0 2
20889: PPUSH
20890: LD_INT 2
20892: PPUSH
20893: LD_INT 0
20895: PPUSH
20896: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20900: LD_VAR 0 2
20904: PPUSH
20905: LD_INT 3
20907: PPUSH
20908: LD_INT 0
20910: PPUSH
20911: CALL_OW 277
// end ;
20915: PPOPN 2
20917: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20918: LD_EXP 41
20922: PUSH
20923: LD_EXP 69
20927: AND
20928: IFFALSE 21025
20930: GO 20932
20932: DISABLE
20933: LD_INT 0
20935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20936: LD_ADDR_VAR 0 1
20940: PUSH
20941: LD_INT 22
20943: PUSH
20944: LD_OWVAR 2
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 21
20955: PUSH
20956: LD_INT 1
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 3
20965: PUSH
20966: LD_INT 23
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: LIST
20984: PPUSH
20985: CALL_OW 69
20989: ST_TO_ADDR
// if not tmp then
20990: LD_VAR 0 1
20994: NOT
20995: IFFALSE 20999
// exit ;
20997: GO 21025
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20999: LD_VAR 0 1
21003: PUSH
21004: LD_INT 1
21006: PPUSH
21007: LD_VAR 0 1
21011: PPUSH
21012: CALL_OW 12
21016: ARRAY
21017: PPUSH
21018: LD_INT 200
21020: PPUSH
21021: CALL_OW 234
// end ;
21025: PPOPN 1
21027: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21028: LD_EXP 41
21032: PUSH
21033: LD_EXP 70
21037: AND
21038: IFFALSE 21117
21040: GO 21042
21042: DISABLE
21043: LD_INT 0
21045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21046: LD_ADDR_VAR 0 1
21050: PUSH
21051: LD_INT 22
21053: PUSH
21054: LD_OWVAR 2
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 21
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PPUSH
21077: CALL_OW 69
21081: ST_TO_ADDR
// if not tmp then
21082: LD_VAR 0 1
21086: NOT
21087: IFFALSE 21091
// exit ;
21089: GO 21117
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21091: LD_VAR 0 1
21095: PUSH
21096: LD_INT 1
21098: PPUSH
21099: LD_VAR 0 1
21103: PPUSH
21104: CALL_OW 12
21108: ARRAY
21109: PPUSH
21110: LD_INT 60
21112: PPUSH
21113: CALL_OW 234
// end ;
21117: PPOPN 1
21119: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21120: LD_EXP 41
21124: PUSH
21125: LD_EXP 71
21129: AND
21130: IFFALSE 21229
21132: GO 21134
21134: DISABLE
21135: LD_INT 0
21137: PPUSH
21138: PPUSH
// begin enable ;
21139: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21140: LD_ADDR_VAR 0 1
21144: PUSH
21145: LD_INT 22
21147: PUSH
21148: LD_OWVAR 2
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 61
21159: PUSH
21160: EMPTY
21161: LIST
21162: PUSH
21163: LD_INT 33
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: PPUSH
21178: CALL_OW 69
21182: ST_TO_ADDR
// if not tmp then
21183: LD_VAR 0 1
21187: NOT
21188: IFFALSE 21192
// exit ;
21190: GO 21229
// for i in tmp do
21192: LD_ADDR_VAR 0 2
21196: PUSH
21197: LD_VAR 0 1
21201: PUSH
21202: FOR_IN
21203: IFFALSE 21227
// if IsControledBy ( i ) then
21205: LD_VAR 0 2
21209: PPUSH
21210: CALL_OW 312
21214: IFFALSE 21225
// ComUnlink ( i ) ;
21216: LD_VAR 0 2
21220: PPUSH
21221: CALL_OW 136
21225: GO 21202
21227: POP
21228: POP
// end ;
21229: PPOPN 2
21231: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21232: LD_EXP 41
21236: PUSH
21237: LD_EXP 72
21241: AND
21242: IFFALSE 21382
21244: GO 21246
21246: DISABLE
21247: LD_INT 0
21249: PPUSH
21250: PPUSH
// begin ToLua ( displayPowell(); ) ;
21251: LD_STRING displayPowell();
21253: PPUSH
21254: CALL_OW 559
// uc_side := 0 ;
21258: LD_ADDR_OWVAR 20
21262: PUSH
21263: LD_INT 0
21265: ST_TO_ADDR
// uc_nation := 2 ;
21266: LD_ADDR_OWVAR 21
21270: PUSH
21271: LD_INT 2
21273: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21274: LD_ADDR_OWVAR 37
21278: PUSH
21279: LD_INT 14
21281: ST_TO_ADDR
// vc_engine := engine_siberite ;
21282: LD_ADDR_OWVAR 39
21286: PUSH
21287: LD_INT 3
21289: ST_TO_ADDR
// vc_control := control_apeman ;
21290: LD_ADDR_OWVAR 38
21294: PUSH
21295: LD_INT 5
21297: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21298: LD_ADDR_OWVAR 40
21302: PUSH
21303: LD_INT 29
21305: ST_TO_ADDR
// un := CreateVehicle ;
21306: LD_ADDR_VAR 0 2
21310: PUSH
21311: CALL_OW 45
21315: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21316: LD_VAR 0 2
21320: PPUSH
21321: LD_INT 1
21323: PPUSH
21324: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21328: LD_INT 35
21330: PPUSH
21331: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21335: LD_VAR 0 2
21339: PPUSH
21340: LD_INT 22
21342: PUSH
21343: LD_OWVAR 2
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PPUSH
21352: CALL_OW 69
21356: PPUSH
21357: LD_VAR 0 2
21361: PPUSH
21362: CALL_OW 74
21366: PPUSH
21367: CALL_OW 115
// until IsDead ( un ) ;
21371: LD_VAR 0 2
21375: PPUSH
21376: CALL_OW 301
21380: IFFALSE 21328
// end ;
21382: PPOPN 2
21384: END
// every 0 0$1 trigger StreamModeActive and sStu do
21385: LD_EXP 41
21389: PUSH
21390: LD_EXP 80
21394: AND
21395: IFFALSE 21411
21397: GO 21399
21399: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21400: LD_STRING displayStucuk();
21402: PPUSH
21403: CALL_OW 559
// ResetFog ;
21407: CALL_OW 335
// end ;
21411: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21412: LD_EXP 41
21416: PUSH
21417: LD_EXP 73
21421: AND
21422: IFFALSE 21563
21424: GO 21426
21426: DISABLE
21427: LD_INT 0
21429: PPUSH
21430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21431: LD_ADDR_VAR 0 2
21435: PUSH
21436: LD_INT 22
21438: PUSH
21439: LD_OWVAR 2
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 21
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PPUSH
21462: CALL_OW 69
21466: ST_TO_ADDR
// if not tmp then
21467: LD_VAR 0 2
21471: NOT
21472: IFFALSE 21476
// exit ;
21474: GO 21563
// un := tmp [ rand ( 1 , tmp ) ] ;
21476: LD_ADDR_VAR 0 1
21480: PUSH
21481: LD_VAR 0 2
21485: PUSH
21486: LD_INT 1
21488: PPUSH
21489: LD_VAR 0 2
21493: PPUSH
21494: CALL_OW 12
21498: ARRAY
21499: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21500: LD_VAR 0 1
21504: PPUSH
21505: LD_INT 0
21507: PPUSH
21508: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21512: LD_VAR 0 1
21516: PPUSH
21517: LD_OWVAR 3
21521: PUSH
21522: LD_VAR 0 1
21526: DIFF
21527: PPUSH
21528: LD_VAR 0 1
21532: PPUSH
21533: CALL_OW 74
21537: PPUSH
21538: CALL_OW 115
// wait ( 0 0$20 ) ;
21542: LD_INT 700
21544: PPUSH
21545: CALL_OW 67
// SetSide ( un , your_side ) ;
21549: LD_VAR 0 1
21553: PPUSH
21554: LD_OWVAR 2
21558: PPUSH
21559: CALL_OW 235
// end ;
21563: PPOPN 2
21565: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21566: LD_EXP 41
21570: PUSH
21571: LD_EXP 74
21575: AND
21576: IFFALSE 21682
21578: GO 21580
21580: DISABLE
21581: LD_INT 0
21583: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21584: LD_ADDR_VAR 0 1
21588: PUSH
21589: LD_INT 22
21591: PUSH
21592: LD_OWVAR 2
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: LD_INT 30
21606: PUSH
21607: LD_INT 0
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 30
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: LIST
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PPUSH
21633: CALL_OW 69
21637: ST_TO_ADDR
// if not depot then
21638: LD_VAR 0 1
21642: NOT
21643: IFFALSE 21647
// exit ;
21645: GO 21682
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21647: LD_VAR 0 1
21651: PUSH
21652: LD_INT 1
21654: ARRAY
21655: PPUSH
21656: CALL_OW 250
21660: PPUSH
21661: LD_VAR 0 1
21665: PUSH
21666: LD_INT 1
21668: ARRAY
21669: PPUSH
21670: CALL_OW 251
21674: PPUSH
21675: LD_INT 70
21677: PPUSH
21678: CALL_OW 495
// end ;
21682: PPOPN 1
21684: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21685: LD_EXP 41
21689: PUSH
21690: LD_EXP 75
21694: AND
21695: IFFALSE 21906
21697: GO 21699
21699: DISABLE
21700: LD_INT 0
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21707: LD_ADDR_VAR 0 5
21711: PUSH
21712: LD_INT 22
21714: PUSH
21715: LD_OWVAR 2
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 21
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PPUSH
21738: CALL_OW 69
21742: ST_TO_ADDR
// if not tmp then
21743: LD_VAR 0 5
21747: NOT
21748: IFFALSE 21752
// exit ;
21750: GO 21906
// for i in tmp do
21752: LD_ADDR_VAR 0 1
21756: PUSH
21757: LD_VAR 0 5
21761: PUSH
21762: FOR_IN
21763: IFFALSE 21904
// begin d := rand ( 0 , 5 ) ;
21765: LD_ADDR_VAR 0 4
21769: PUSH
21770: LD_INT 0
21772: PPUSH
21773: LD_INT 5
21775: PPUSH
21776: CALL_OW 12
21780: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21781: LD_ADDR_VAR 0 2
21785: PUSH
21786: LD_VAR 0 1
21790: PPUSH
21791: CALL_OW 250
21795: PPUSH
21796: LD_VAR 0 4
21800: PPUSH
21801: LD_INT 3
21803: PPUSH
21804: LD_INT 12
21806: PPUSH
21807: CALL_OW 12
21811: PPUSH
21812: CALL_OW 272
21816: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21817: LD_ADDR_VAR 0 3
21821: PUSH
21822: LD_VAR 0 1
21826: PPUSH
21827: CALL_OW 251
21831: PPUSH
21832: LD_VAR 0 4
21836: PPUSH
21837: LD_INT 3
21839: PPUSH
21840: LD_INT 12
21842: PPUSH
21843: CALL_OW 12
21847: PPUSH
21848: CALL_OW 273
21852: ST_TO_ADDR
// if ValidHex ( x , y ) then
21853: LD_VAR 0 2
21857: PPUSH
21858: LD_VAR 0 3
21862: PPUSH
21863: CALL_OW 488
21867: IFFALSE 21902
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21869: LD_VAR 0 1
21873: PPUSH
21874: LD_VAR 0 2
21878: PPUSH
21879: LD_VAR 0 3
21883: PPUSH
21884: LD_INT 3
21886: PPUSH
21887: LD_INT 6
21889: PPUSH
21890: CALL_OW 12
21894: PPUSH
21895: LD_INT 1
21897: PPUSH
21898: CALL_OW 483
// end ;
21902: GO 21762
21904: POP
21905: POP
// end ;
21906: PPOPN 5
21908: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21909: LD_EXP 41
21913: PUSH
21914: LD_EXP 76
21918: AND
21919: IFFALSE 22013
21921: GO 21923
21923: DISABLE
21924: LD_INT 0
21926: PPUSH
21927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21928: LD_ADDR_VAR 0 2
21932: PUSH
21933: LD_INT 22
21935: PUSH
21936: LD_OWVAR 2
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 32
21947: PUSH
21948: LD_INT 1
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 21
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: PPUSH
21970: CALL_OW 69
21974: ST_TO_ADDR
// if not tmp then
21975: LD_VAR 0 2
21979: NOT
21980: IFFALSE 21984
// exit ;
21982: GO 22013
// for i in tmp do
21984: LD_ADDR_VAR 0 1
21988: PUSH
21989: LD_VAR 0 2
21993: PUSH
21994: FOR_IN
21995: IFFALSE 22011
// SetFuel ( i , 0 ) ;
21997: LD_VAR 0 1
22001: PPUSH
22002: LD_INT 0
22004: PPUSH
22005: CALL_OW 240
22009: GO 21994
22011: POP
22012: POP
// end ;
22013: PPOPN 2
22015: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22016: LD_EXP 41
22020: PUSH
22021: LD_EXP 77
22025: AND
22026: IFFALSE 22092
22028: GO 22030
22030: DISABLE
22031: LD_INT 0
22033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22034: LD_ADDR_VAR 0 1
22038: PUSH
22039: LD_INT 22
22041: PUSH
22042: LD_OWVAR 2
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 30
22053: PUSH
22054: LD_INT 29
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PPUSH
22065: CALL_OW 69
22069: ST_TO_ADDR
// if not tmp then
22070: LD_VAR 0 1
22074: NOT
22075: IFFALSE 22079
// exit ;
22077: GO 22092
// DestroyUnit ( tmp [ 1 ] ) ;
22079: LD_VAR 0 1
22083: PUSH
22084: LD_INT 1
22086: ARRAY
22087: PPUSH
22088: CALL_OW 65
// end ;
22092: PPOPN 1
22094: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22095: LD_EXP 41
22099: PUSH
22100: LD_EXP 79
22104: AND
22105: IFFALSE 22234
22107: GO 22109
22109: DISABLE
22110: LD_INT 0
22112: PPUSH
// begin uc_side := 0 ;
22113: LD_ADDR_OWVAR 20
22117: PUSH
22118: LD_INT 0
22120: ST_TO_ADDR
// uc_nation := nation_arabian ;
22121: LD_ADDR_OWVAR 21
22125: PUSH
22126: LD_INT 2
22128: ST_TO_ADDR
// hc_gallery :=  ;
22129: LD_ADDR_OWVAR 33
22133: PUSH
22134: LD_STRING 
22136: ST_TO_ADDR
// hc_name :=  ;
22137: LD_ADDR_OWVAR 26
22141: PUSH
22142: LD_STRING 
22144: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22145: LD_INT 1
22147: PPUSH
22148: LD_INT 11
22150: PPUSH
22151: LD_INT 10
22153: PPUSH
22154: CALL_OW 380
// un := CreateHuman ;
22158: LD_ADDR_VAR 0 1
22162: PUSH
22163: CALL_OW 44
22167: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22168: LD_VAR 0 1
22172: PPUSH
22173: LD_INT 1
22175: PPUSH
22176: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22180: LD_INT 35
22182: PPUSH
22183: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22187: LD_VAR 0 1
22191: PPUSH
22192: LD_INT 22
22194: PUSH
22195: LD_OWVAR 2
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PPUSH
22204: CALL_OW 69
22208: PPUSH
22209: LD_VAR 0 1
22213: PPUSH
22214: CALL_OW 74
22218: PPUSH
22219: CALL_OW 115
// until IsDead ( un ) ;
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL_OW 301
22232: IFFALSE 22180
// end ;
22234: PPOPN 1
22236: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22237: LD_EXP 41
22241: PUSH
22242: LD_EXP 81
22246: AND
22247: IFFALSE 22259
22249: GO 22251
22251: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22252: LD_STRING earthquake(getX(game), 0, 32)
22254: PPUSH
22255: CALL_OW 559
22259: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22260: LD_EXP 41
22264: PUSH
22265: LD_EXP 82
22269: AND
22270: IFFALSE 22361
22272: GO 22274
22274: DISABLE
22275: LD_INT 0
22277: PPUSH
// begin enable ;
22278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22279: LD_ADDR_VAR 0 1
22283: PUSH
22284: LD_INT 22
22286: PUSH
22287: LD_OWVAR 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 21
22298: PUSH
22299: LD_INT 2
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 33
22308: PUSH
22309: LD_INT 3
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: LIST
22320: PPUSH
22321: CALL_OW 69
22325: ST_TO_ADDR
// if not tmp then
22326: LD_VAR 0 1
22330: NOT
22331: IFFALSE 22335
// exit ;
22333: GO 22361
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22335: LD_VAR 0 1
22339: PUSH
22340: LD_INT 1
22342: PPUSH
22343: LD_VAR 0 1
22347: PPUSH
22348: CALL_OW 12
22352: ARRAY
22353: PPUSH
22354: LD_INT 1
22356: PPUSH
22357: CALL_OW 234
// end ;
22361: PPOPN 1
22363: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22364: LD_EXP 41
22368: PUSH
22369: LD_EXP 83
22373: AND
22374: IFFALSE 22515
22376: GO 22378
22378: DISABLE
22379: LD_INT 0
22381: PPUSH
22382: PPUSH
22383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22384: LD_ADDR_VAR 0 3
22388: PUSH
22389: LD_INT 22
22391: PUSH
22392: LD_OWVAR 2
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 25
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PPUSH
22415: CALL_OW 69
22419: ST_TO_ADDR
// if not tmp then
22420: LD_VAR 0 3
22424: NOT
22425: IFFALSE 22429
// exit ;
22427: GO 22515
// un := tmp [ rand ( 1 , tmp ) ] ;
22429: LD_ADDR_VAR 0 2
22433: PUSH
22434: LD_VAR 0 3
22438: PUSH
22439: LD_INT 1
22441: PPUSH
22442: LD_VAR 0 3
22446: PPUSH
22447: CALL_OW 12
22451: ARRAY
22452: ST_TO_ADDR
// if Crawls ( un ) then
22453: LD_VAR 0 2
22457: PPUSH
22458: CALL_OW 318
22462: IFFALSE 22473
// ComWalk ( un ) ;
22464: LD_VAR 0 2
22468: PPUSH
22469: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22473: LD_VAR 0 2
22477: PPUSH
22478: LD_INT 9
22480: PPUSH
22481: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22485: LD_INT 28
22487: PPUSH
22488: LD_OWVAR 2
22492: PPUSH
22493: LD_INT 2
22495: PPUSH
22496: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22500: LD_INT 29
22502: PPUSH
22503: LD_OWVAR 2
22507: PPUSH
22508: LD_INT 2
22510: PPUSH
22511: CALL_OW 322
// end ;
22515: PPOPN 3
22517: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22518: LD_EXP 41
22522: PUSH
22523: LD_EXP 84
22527: AND
22528: IFFALSE 22639
22530: GO 22532
22532: DISABLE
22533: LD_INT 0
22535: PPUSH
22536: PPUSH
22537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22538: LD_ADDR_VAR 0 3
22542: PUSH
22543: LD_INT 22
22545: PUSH
22546: LD_OWVAR 2
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 25
22557: PUSH
22558: LD_INT 1
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PPUSH
22569: CALL_OW 69
22573: ST_TO_ADDR
// if not tmp then
22574: LD_VAR 0 3
22578: NOT
22579: IFFALSE 22583
// exit ;
22581: GO 22639
// un := tmp [ rand ( 1 , tmp ) ] ;
22583: LD_ADDR_VAR 0 2
22587: PUSH
22588: LD_VAR 0 3
22592: PUSH
22593: LD_INT 1
22595: PPUSH
22596: LD_VAR 0 3
22600: PPUSH
22601: CALL_OW 12
22605: ARRAY
22606: ST_TO_ADDR
// if Crawls ( un ) then
22607: LD_VAR 0 2
22611: PPUSH
22612: CALL_OW 318
22616: IFFALSE 22627
// ComWalk ( un ) ;
22618: LD_VAR 0 2
22622: PPUSH
22623: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22627: LD_VAR 0 2
22631: PPUSH
22632: LD_INT 8
22634: PPUSH
22635: CALL_OW 336
// end ;
22639: PPOPN 3
22641: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22642: LD_EXP 41
22646: PUSH
22647: LD_EXP 85
22651: AND
22652: IFFALSE 22796
22654: GO 22656
22656: DISABLE
22657: LD_INT 0
22659: PPUSH
22660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22661: LD_ADDR_VAR 0 2
22665: PUSH
22666: LD_INT 22
22668: PUSH
22669: LD_OWVAR 2
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 21
22680: PUSH
22681: LD_INT 2
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 2
22690: PUSH
22691: LD_INT 34
22693: PUSH
22694: LD_INT 12
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 34
22703: PUSH
22704: LD_INT 51
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 34
22713: PUSH
22714: LD_INT 32
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: LIST
22731: PPUSH
22732: CALL_OW 69
22736: ST_TO_ADDR
// if not tmp then
22737: LD_VAR 0 2
22741: NOT
22742: IFFALSE 22746
// exit ;
22744: GO 22796
// for i in tmp do
22746: LD_ADDR_VAR 0 1
22750: PUSH
22751: LD_VAR 0 2
22755: PUSH
22756: FOR_IN
22757: IFFALSE 22794
// if GetCargo ( i , mat_artifact ) = 0 then
22759: LD_VAR 0 1
22763: PPUSH
22764: LD_INT 4
22766: PPUSH
22767: CALL_OW 289
22771: PUSH
22772: LD_INT 0
22774: EQUAL
22775: IFFALSE 22792
// SetCargo ( i , mat_siberit , 100 ) ;
22777: LD_VAR 0 1
22781: PPUSH
22782: LD_INT 3
22784: PPUSH
22785: LD_INT 100
22787: PPUSH
22788: CALL_OW 290
22792: GO 22756
22794: POP
22795: POP
// end ;
22796: PPOPN 2
22798: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22799: LD_EXP 41
22803: PUSH
22804: LD_EXP 86
22808: AND
22809: IFFALSE 22992
22811: GO 22813
22813: DISABLE
22814: LD_INT 0
22816: PPUSH
22817: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22818: LD_ADDR_VAR 0 2
22822: PUSH
22823: LD_INT 22
22825: PUSH
22826: LD_OWVAR 2
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PPUSH
22835: CALL_OW 69
22839: ST_TO_ADDR
// if not tmp then
22840: LD_VAR 0 2
22844: NOT
22845: IFFALSE 22849
// exit ;
22847: GO 22992
// for i := 1 to 2 do
22849: LD_ADDR_VAR 0 1
22853: PUSH
22854: DOUBLE
22855: LD_INT 1
22857: DEC
22858: ST_TO_ADDR
22859: LD_INT 2
22861: PUSH
22862: FOR_TO
22863: IFFALSE 22990
// begin uc_side := your_side ;
22865: LD_ADDR_OWVAR 20
22869: PUSH
22870: LD_OWVAR 2
22874: ST_TO_ADDR
// uc_nation := nation_american ;
22875: LD_ADDR_OWVAR 21
22879: PUSH
22880: LD_INT 1
22882: ST_TO_ADDR
// vc_chassis := us_morphling ;
22883: LD_ADDR_OWVAR 37
22887: PUSH
22888: LD_INT 5
22890: ST_TO_ADDR
// vc_engine := engine_siberite ;
22891: LD_ADDR_OWVAR 39
22895: PUSH
22896: LD_INT 3
22898: ST_TO_ADDR
// vc_control := control_computer ;
22899: LD_ADDR_OWVAR 38
22903: PUSH
22904: LD_INT 3
22906: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22907: LD_ADDR_OWVAR 40
22911: PUSH
22912: LD_INT 10
22914: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22915: LD_VAR 0 2
22919: PUSH
22920: LD_INT 1
22922: ARRAY
22923: PPUSH
22924: CALL_OW 310
22928: NOT
22929: IFFALSE 22976
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22931: CALL_OW 45
22935: PPUSH
22936: LD_VAR 0 2
22940: PUSH
22941: LD_INT 1
22943: ARRAY
22944: PPUSH
22945: CALL_OW 250
22949: PPUSH
22950: LD_VAR 0 2
22954: PUSH
22955: LD_INT 1
22957: ARRAY
22958: PPUSH
22959: CALL_OW 251
22963: PPUSH
22964: LD_INT 12
22966: PPUSH
22967: LD_INT 1
22969: PPUSH
22970: CALL_OW 50
22974: GO 22988
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22976: CALL_OW 45
22980: PPUSH
22981: LD_INT 1
22983: PPUSH
22984: CALL_OW 51
// end ;
22988: GO 22862
22990: POP
22991: POP
// end ;
22992: PPOPN 2
22994: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22995: LD_EXP 41
22999: PUSH
23000: LD_EXP 87
23004: AND
23005: IFFALSE 23227
23007: GO 23009
23009: DISABLE
23010: LD_INT 0
23012: PPUSH
23013: PPUSH
23014: PPUSH
23015: PPUSH
23016: PPUSH
23017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23018: LD_ADDR_VAR 0 6
23022: PUSH
23023: LD_INT 22
23025: PUSH
23026: LD_OWVAR 2
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 21
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 3
23047: PUSH
23048: LD_INT 23
23050: PUSH
23051: LD_INT 0
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: PPUSH
23067: CALL_OW 69
23071: ST_TO_ADDR
// if not tmp then
23072: LD_VAR 0 6
23076: NOT
23077: IFFALSE 23081
// exit ;
23079: GO 23227
// s1 := rand ( 1 , 4 ) ;
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_INT 1
23088: PPUSH
23089: LD_INT 4
23091: PPUSH
23092: CALL_OW 12
23096: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23097: LD_ADDR_VAR 0 4
23101: PUSH
23102: LD_VAR 0 6
23106: PUSH
23107: LD_INT 1
23109: ARRAY
23110: PPUSH
23111: LD_VAR 0 2
23115: PPUSH
23116: CALL_OW 259
23120: ST_TO_ADDR
// if s1 = 1 then
23121: LD_VAR 0 2
23125: PUSH
23126: LD_INT 1
23128: EQUAL
23129: IFFALSE 23149
// s2 := rand ( 2 , 4 ) else
23131: LD_ADDR_VAR 0 3
23135: PUSH
23136: LD_INT 2
23138: PPUSH
23139: LD_INT 4
23141: PPUSH
23142: CALL_OW 12
23146: ST_TO_ADDR
23147: GO 23157
// s2 := 1 ;
23149: LD_ADDR_VAR 0 3
23153: PUSH
23154: LD_INT 1
23156: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23157: LD_ADDR_VAR 0 5
23161: PUSH
23162: LD_VAR 0 6
23166: PUSH
23167: LD_INT 1
23169: ARRAY
23170: PPUSH
23171: LD_VAR 0 3
23175: PPUSH
23176: CALL_OW 259
23180: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23181: LD_VAR 0 6
23185: PUSH
23186: LD_INT 1
23188: ARRAY
23189: PPUSH
23190: LD_VAR 0 2
23194: PPUSH
23195: LD_VAR 0 5
23199: PPUSH
23200: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23204: LD_VAR 0 6
23208: PUSH
23209: LD_INT 1
23211: ARRAY
23212: PPUSH
23213: LD_VAR 0 3
23217: PPUSH
23218: LD_VAR 0 4
23222: PPUSH
23223: CALL_OW 237
// end ;
23227: PPOPN 6
23229: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23230: LD_EXP 41
23234: PUSH
23235: LD_EXP 88
23239: AND
23240: IFFALSE 23319
23242: GO 23244
23244: DISABLE
23245: LD_INT 0
23247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23248: LD_ADDR_VAR 0 1
23252: PUSH
23253: LD_INT 22
23255: PUSH
23256: LD_OWVAR 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 30
23267: PUSH
23268: LD_INT 3
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PPUSH
23279: CALL_OW 69
23283: ST_TO_ADDR
// if not tmp then
23284: LD_VAR 0 1
23288: NOT
23289: IFFALSE 23293
// exit ;
23291: GO 23319
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23293: LD_VAR 0 1
23297: PUSH
23298: LD_INT 1
23300: PPUSH
23301: LD_VAR 0 1
23305: PPUSH
23306: CALL_OW 12
23310: ARRAY
23311: PPUSH
23312: LD_INT 1
23314: PPUSH
23315: CALL_OW 234
// end ;
23319: PPOPN 1
23321: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23322: LD_EXP 41
23326: PUSH
23327: LD_EXP 89
23331: AND
23332: IFFALSE 23444
23334: GO 23336
23336: DISABLE
23337: LD_INT 0
23339: PPUSH
23340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23341: LD_ADDR_VAR 0 2
23345: PUSH
23346: LD_INT 22
23348: PUSH
23349: LD_OWVAR 2
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: LD_INT 30
23363: PUSH
23364: LD_INT 27
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 30
23373: PUSH
23374: LD_INT 26
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 30
23383: PUSH
23384: LD_INT 28
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PPUSH
23401: CALL_OW 69
23405: ST_TO_ADDR
// if not tmp then
23406: LD_VAR 0 2
23410: NOT
23411: IFFALSE 23415
// exit ;
23413: GO 23444
// for i in tmp do
23415: LD_ADDR_VAR 0 1
23419: PUSH
23420: LD_VAR 0 2
23424: PUSH
23425: FOR_IN
23426: IFFALSE 23442
// SetLives ( i , 1 ) ;
23428: LD_VAR 0 1
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 234
23440: GO 23425
23442: POP
23443: POP
// end ;
23444: PPOPN 2
23446: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23447: LD_EXP 41
23451: PUSH
23452: LD_EXP 90
23456: AND
23457: IFFALSE 23744
23459: GO 23461
23461: DISABLE
23462: LD_INT 0
23464: PPUSH
23465: PPUSH
23466: PPUSH
// begin i := rand ( 1 , 7 ) ;
23467: LD_ADDR_VAR 0 1
23471: PUSH
23472: LD_INT 1
23474: PPUSH
23475: LD_INT 7
23477: PPUSH
23478: CALL_OW 12
23482: ST_TO_ADDR
// case i of 1 :
23483: LD_VAR 0 1
23487: PUSH
23488: LD_INT 1
23490: DOUBLE
23491: EQUAL
23492: IFTRUE 23496
23494: GO 23506
23496: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23497: LD_STRING earthquake(getX(game), 0, 32)
23499: PPUSH
23500: CALL_OW 559
23504: GO 23744
23506: LD_INT 2
23508: DOUBLE
23509: EQUAL
23510: IFTRUE 23514
23512: GO 23528
23514: POP
// begin ToLua ( displayStucuk(); ) ;
23515: LD_STRING displayStucuk();
23517: PPUSH
23518: CALL_OW 559
// ResetFog ;
23522: CALL_OW 335
// end ; 3 :
23526: GO 23744
23528: LD_INT 3
23530: DOUBLE
23531: EQUAL
23532: IFTRUE 23536
23534: GO 23640
23536: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23537: LD_ADDR_VAR 0 2
23541: PUSH
23542: LD_INT 22
23544: PUSH
23545: LD_OWVAR 2
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 25
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PPUSH
23568: CALL_OW 69
23572: ST_TO_ADDR
// if not tmp then
23573: LD_VAR 0 2
23577: NOT
23578: IFFALSE 23582
// exit ;
23580: GO 23744
// un := tmp [ rand ( 1 , tmp ) ] ;
23582: LD_ADDR_VAR 0 3
23586: PUSH
23587: LD_VAR 0 2
23591: PUSH
23592: LD_INT 1
23594: PPUSH
23595: LD_VAR 0 2
23599: PPUSH
23600: CALL_OW 12
23604: ARRAY
23605: ST_TO_ADDR
// if Crawls ( un ) then
23606: LD_VAR 0 3
23610: PPUSH
23611: CALL_OW 318
23615: IFFALSE 23626
// ComWalk ( un ) ;
23617: LD_VAR 0 3
23621: PPUSH
23622: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23626: LD_VAR 0 3
23630: PPUSH
23631: LD_INT 8
23633: PPUSH
23634: CALL_OW 336
// end ; 4 :
23638: GO 23744
23640: LD_INT 4
23642: DOUBLE
23643: EQUAL
23644: IFTRUE 23648
23646: GO 23722
23648: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23649: LD_ADDR_VAR 0 2
23653: PUSH
23654: LD_INT 22
23656: PUSH
23657: LD_OWVAR 2
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 30
23668: PUSH
23669: LD_INT 29
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PPUSH
23680: CALL_OW 69
23684: ST_TO_ADDR
// if not tmp then
23685: LD_VAR 0 2
23689: NOT
23690: IFFALSE 23694
// exit ;
23692: GO 23744
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23694: LD_VAR 0 2
23698: PUSH
23699: LD_INT 1
23701: ARRAY
23702: PPUSH
23703: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23707: LD_VAR 0 2
23711: PUSH
23712: LD_INT 1
23714: ARRAY
23715: PPUSH
23716: CALL_OW 65
// end ; 5 .. 7 :
23720: GO 23744
23722: LD_INT 5
23724: DOUBLE
23725: GREATEREQUAL
23726: IFFALSE 23734
23728: LD_INT 7
23730: DOUBLE
23731: LESSEQUAL
23732: IFTRUE 23736
23734: GO 23743
23736: POP
// StreamSibBomb ; end ;
23737: CALL 19981 0 0
23741: GO 23744
23743: POP
// end ;
23744: PPOPN 3
23746: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23747: LD_EXP 41
23751: PUSH
23752: LD_EXP 91
23756: AND
23757: IFFALSE 23913
23759: GO 23761
23761: DISABLE
23762: LD_INT 0
23764: PPUSH
23765: PPUSH
23766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23767: LD_ADDR_VAR 0 2
23771: PUSH
23772: LD_INT 81
23774: PUSH
23775: LD_OWVAR 2
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: LD_INT 21
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 21
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: LIST
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PPUSH
23816: CALL_OW 69
23820: ST_TO_ADDR
// if not tmp then
23821: LD_VAR 0 2
23825: NOT
23826: IFFALSE 23830
// exit ;
23828: GO 23913
// p := 0 ;
23830: LD_ADDR_VAR 0 3
23834: PUSH
23835: LD_INT 0
23837: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23838: LD_INT 35
23840: PPUSH
23841: CALL_OW 67
// p := p + 1 ;
23845: LD_ADDR_VAR 0 3
23849: PUSH
23850: LD_VAR 0 3
23854: PUSH
23855: LD_INT 1
23857: PLUS
23858: ST_TO_ADDR
// for i in tmp do
23859: LD_ADDR_VAR 0 1
23863: PUSH
23864: LD_VAR 0 2
23868: PUSH
23869: FOR_IN
23870: IFFALSE 23901
// if GetLives ( i ) < 1000 then
23872: LD_VAR 0 1
23876: PPUSH
23877: CALL_OW 256
23881: PUSH
23882: LD_INT 1000
23884: LESS
23885: IFFALSE 23899
// SetLives ( i , 1000 ) ;
23887: LD_VAR 0 1
23891: PPUSH
23892: LD_INT 1000
23894: PPUSH
23895: CALL_OW 234
23899: GO 23869
23901: POP
23902: POP
// until p > 20 ;
23903: LD_VAR 0 3
23907: PUSH
23908: LD_INT 20
23910: GREATER
23911: IFFALSE 23838
// end ;
23913: PPOPN 3
23915: END
// every 0 0$1 trigger StreamModeActive and sTime do
23916: LD_EXP 41
23920: PUSH
23921: LD_EXP 92
23925: AND
23926: IFFALSE 23961
23928: GO 23930
23930: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23931: LD_INT 28
23933: PPUSH
23934: LD_OWVAR 2
23938: PPUSH
23939: LD_INT 2
23941: PPUSH
23942: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23946: LD_INT 30
23948: PPUSH
23949: LD_OWVAR 2
23953: PPUSH
23954: LD_INT 2
23956: PPUSH
23957: CALL_OW 322
// end ;
23961: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23962: LD_EXP 41
23966: PUSH
23967: LD_EXP 93
23971: AND
23972: IFFALSE 24093
23974: GO 23976
23976: DISABLE
23977: LD_INT 0
23979: PPUSH
23980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23981: LD_ADDR_VAR 0 2
23985: PUSH
23986: LD_INT 22
23988: PUSH
23989: LD_OWVAR 2
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 21
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 3
24010: PUSH
24011: LD_INT 23
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: PPUSH
24030: CALL_OW 69
24034: ST_TO_ADDR
// if not tmp then
24035: LD_VAR 0 2
24039: NOT
24040: IFFALSE 24044
// exit ;
24042: GO 24093
// for i in tmp do
24044: LD_ADDR_VAR 0 1
24048: PUSH
24049: LD_VAR 0 2
24053: PUSH
24054: FOR_IN
24055: IFFALSE 24091
// begin if Crawls ( i ) then
24057: LD_VAR 0 1
24061: PPUSH
24062: CALL_OW 318
24066: IFFALSE 24077
// ComWalk ( i ) ;
24068: LD_VAR 0 1
24072: PPUSH
24073: CALL_OW 138
// SetClass ( i , 2 ) ;
24077: LD_VAR 0 1
24081: PPUSH
24082: LD_INT 2
24084: PPUSH
24085: CALL_OW 336
// end ;
24089: GO 24054
24091: POP
24092: POP
// end ;
24093: PPOPN 2
24095: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24096: LD_EXP 41
24100: PUSH
24101: LD_EXP 94
24105: AND
24106: IFFALSE 24394
24108: GO 24110
24110: DISABLE
24111: LD_INT 0
24113: PPUSH
24114: PPUSH
24115: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24116: LD_OWVAR 2
24120: PPUSH
24121: LD_INT 9
24123: PPUSH
24124: LD_INT 1
24126: PPUSH
24127: LD_INT 1
24129: PPUSH
24130: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24134: LD_INT 9
24136: PPUSH
24137: LD_OWVAR 2
24141: PPUSH
24142: CALL_OW 343
// uc_side := 9 ;
24146: LD_ADDR_OWVAR 20
24150: PUSH
24151: LD_INT 9
24153: ST_TO_ADDR
// uc_nation := 2 ;
24154: LD_ADDR_OWVAR 21
24158: PUSH
24159: LD_INT 2
24161: ST_TO_ADDR
// hc_name := Dark Warrior ;
24162: LD_ADDR_OWVAR 26
24166: PUSH
24167: LD_STRING Dark Warrior
24169: ST_TO_ADDR
// hc_gallery :=  ;
24170: LD_ADDR_OWVAR 33
24174: PUSH
24175: LD_STRING 
24177: ST_TO_ADDR
// hc_noskilllimit := true ;
24178: LD_ADDR_OWVAR 76
24182: PUSH
24183: LD_INT 1
24185: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24186: LD_ADDR_OWVAR 31
24190: PUSH
24191: LD_INT 30
24193: PUSH
24194: LD_INT 30
24196: PUSH
24197: LD_INT 30
24199: PUSH
24200: LD_INT 30
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: ST_TO_ADDR
// un := CreateHuman ;
24209: LD_ADDR_VAR 0 3
24213: PUSH
24214: CALL_OW 44
24218: ST_TO_ADDR
// hc_noskilllimit := false ;
24219: LD_ADDR_OWVAR 76
24223: PUSH
24224: LD_INT 0
24226: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24227: LD_VAR 0 3
24231: PPUSH
24232: LD_INT 1
24234: PPUSH
24235: CALL_OW 51
// ToLua ( playRanger() ) ;
24239: LD_STRING playRanger()
24241: PPUSH
24242: CALL_OW 559
// p := 0 ;
24246: LD_ADDR_VAR 0 2
24250: PUSH
24251: LD_INT 0
24253: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24254: LD_INT 35
24256: PPUSH
24257: CALL_OW 67
// p := p + 1 ;
24261: LD_ADDR_VAR 0 2
24265: PUSH
24266: LD_VAR 0 2
24270: PUSH
24271: LD_INT 1
24273: PLUS
24274: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24275: LD_VAR 0 3
24279: PPUSH
24280: CALL_OW 256
24284: PUSH
24285: LD_INT 1000
24287: LESS
24288: IFFALSE 24302
// SetLives ( un , 1000 ) ;
24290: LD_VAR 0 3
24294: PPUSH
24295: LD_INT 1000
24297: PPUSH
24298: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24302: LD_VAR 0 3
24306: PPUSH
24307: LD_INT 81
24309: PUSH
24310: LD_OWVAR 2
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 91
24321: PUSH
24322: LD_VAR 0 3
24326: PUSH
24327: LD_INT 30
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PPUSH
24339: CALL_OW 69
24343: PPUSH
24344: LD_VAR 0 3
24348: PPUSH
24349: CALL_OW 74
24353: PPUSH
24354: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24358: LD_VAR 0 2
24362: PUSH
24363: LD_INT 80
24365: GREATER
24366: PUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: CALL_OW 301
24376: OR
24377: IFFALSE 24254
// if un then
24379: LD_VAR 0 3
24383: IFFALSE 24394
// RemoveUnit ( un ) ;
24385: LD_VAR 0 3
24389: PPUSH
24390: CALL_OW 64
// end ;
24394: PPOPN 3
24396: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24397: LD_EXP 95
24401: IFFALSE 24517
24403: GO 24405
24405: DISABLE
24406: LD_INT 0
24408: PPUSH
24409: PPUSH
24410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24411: LD_ADDR_VAR 0 2
24415: PUSH
24416: LD_INT 81
24418: PUSH
24419: LD_OWVAR 2
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 21
24430: PUSH
24431: LD_INT 1
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PPUSH
24442: CALL_OW 69
24446: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24447: LD_STRING playComputer()
24449: PPUSH
24450: CALL_OW 559
// if not tmp then
24454: LD_VAR 0 2
24458: NOT
24459: IFFALSE 24463
// exit ;
24461: GO 24517
// for i in tmp do
24463: LD_ADDR_VAR 0 1
24467: PUSH
24468: LD_VAR 0 2
24472: PUSH
24473: FOR_IN
24474: IFFALSE 24515
// for j := 1 to 4 do
24476: LD_ADDR_VAR 0 3
24480: PUSH
24481: DOUBLE
24482: LD_INT 1
24484: DEC
24485: ST_TO_ADDR
24486: LD_INT 4
24488: PUSH
24489: FOR_TO
24490: IFFALSE 24511
// SetSkill ( i , j , 10 ) ;
24492: LD_VAR 0 1
24496: PPUSH
24497: LD_VAR 0 3
24501: PPUSH
24502: LD_INT 10
24504: PPUSH
24505: CALL_OW 237
24509: GO 24489
24511: POP
24512: POP
24513: GO 24473
24515: POP
24516: POP
// end ;
24517: PPOPN 3
24519: END
// every 0 0$1 trigger s30 do var i , tmp ;
24520: LD_EXP 96
24524: IFFALSE 24593
24526: GO 24528
24528: DISABLE
24529: LD_INT 0
24531: PPUSH
24532: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24533: LD_ADDR_VAR 0 2
24537: PUSH
24538: LD_INT 22
24540: PUSH
24541: LD_OWVAR 2
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PPUSH
24550: CALL_OW 69
24554: ST_TO_ADDR
// if not tmp then
24555: LD_VAR 0 2
24559: NOT
24560: IFFALSE 24564
// exit ;
24562: GO 24593
// for i in tmp do
24564: LD_ADDR_VAR 0 1
24568: PUSH
24569: LD_VAR 0 2
24573: PUSH
24574: FOR_IN
24575: IFFALSE 24591
// SetLives ( i , 300 ) ;
24577: LD_VAR 0 1
24581: PPUSH
24582: LD_INT 300
24584: PPUSH
24585: CALL_OW 234
24589: GO 24574
24591: POP
24592: POP
// end ;
24593: PPOPN 2
24595: END
// every 0 0$1 trigger s60 do var i , tmp ;
24596: LD_EXP 97
24600: IFFALSE 24669
24602: GO 24604
24604: DISABLE
24605: LD_INT 0
24607: PPUSH
24608: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24609: LD_ADDR_VAR 0 2
24613: PUSH
24614: LD_INT 22
24616: PUSH
24617: LD_OWVAR 2
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PPUSH
24626: CALL_OW 69
24630: ST_TO_ADDR
// if not tmp then
24631: LD_VAR 0 2
24635: NOT
24636: IFFALSE 24640
// exit ;
24638: GO 24669
// for i in tmp do
24640: LD_ADDR_VAR 0 1
24644: PUSH
24645: LD_VAR 0 2
24649: PUSH
24650: FOR_IN
24651: IFFALSE 24667
// SetLives ( i , 600 ) ;
24653: LD_VAR 0 1
24657: PPUSH
24658: LD_INT 600
24660: PPUSH
24661: CALL_OW 234
24665: GO 24650
24667: POP
24668: POP
// end ;
24669: PPOPN 2
24671: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24672: LD_INT 0
24674: PPUSH
// case cmd of 301 :
24675: LD_VAR 0 1
24679: PUSH
24680: LD_INT 301
24682: DOUBLE
24683: EQUAL
24684: IFTRUE 24688
24686: GO 24720
24688: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24689: LD_VAR 0 6
24693: PPUSH
24694: LD_VAR 0 7
24698: PPUSH
24699: LD_VAR 0 8
24703: PPUSH
24704: LD_VAR 0 4
24708: PPUSH
24709: LD_VAR 0 5
24713: PPUSH
24714: CALL 25921 0 5
24718: GO 24841
24720: LD_INT 302
24722: DOUBLE
24723: EQUAL
24724: IFTRUE 24728
24726: GO 24765
24728: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24729: LD_VAR 0 6
24733: PPUSH
24734: LD_VAR 0 7
24738: PPUSH
24739: LD_VAR 0 8
24743: PPUSH
24744: LD_VAR 0 9
24748: PPUSH
24749: LD_VAR 0 4
24753: PPUSH
24754: LD_VAR 0 5
24758: PPUSH
24759: CALL 26012 0 6
24763: GO 24841
24765: LD_INT 303
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 24810
24773: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24774: LD_VAR 0 6
24778: PPUSH
24779: LD_VAR 0 7
24783: PPUSH
24784: LD_VAR 0 8
24788: PPUSH
24789: LD_VAR 0 9
24793: PPUSH
24794: LD_VAR 0 4
24798: PPUSH
24799: LD_VAR 0 5
24803: PPUSH
24804: CALL 24846 0 6
24808: GO 24841
24810: LD_INT 304
24812: DOUBLE
24813: EQUAL
24814: IFTRUE 24818
24816: GO 24840
24818: POP
// hHackTeleport ( unit , x , y ) ; end ;
24819: LD_VAR 0 2
24823: PPUSH
24824: LD_VAR 0 4
24828: PPUSH
24829: LD_VAR 0 5
24833: PPUSH
24834: CALL 26605 0 3
24838: GO 24841
24840: POP
// end ;
24841: LD_VAR 0 12
24845: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24846: LD_INT 0
24848: PPUSH
24849: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24850: LD_VAR 0 1
24854: PUSH
24855: LD_INT 1
24857: LESS
24858: PUSH
24859: LD_VAR 0 1
24863: PUSH
24864: LD_INT 3
24866: GREATER
24867: OR
24868: PUSH
24869: LD_VAR 0 5
24873: PPUSH
24874: LD_VAR 0 6
24878: PPUSH
24879: CALL_OW 428
24883: OR
24884: IFFALSE 24888
// exit ;
24886: GO 25608
// uc_side := your_side ;
24888: LD_ADDR_OWVAR 20
24892: PUSH
24893: LD_OWVAR 2
24897: ST_TO_ADDR
// uc_nation := nation ;
24898: LD_ADDR_OWVAR 21
24902: PUSH
24903: LD_VAR 0 1
24907: ST_TO_ADDR
// bc_level = 1 ;
24908: LD_ADDR_OWVAR 43
24912: PUSH
24913: LD_INT 1
24915: ST_TO_ADDR
// case btype of 1 :
24916: LD_VAR 0 2
24920: PUSH
24921: LD_INT 1
24923: DOUBLE
24924: EQUAL
24925: IFTRUE 24929
24927: GO 24940
24929: POP
// bc_type := b_depot ; 2 :
24930: LD_ADDR_OWVAR 42
24934: PUSH
24935: LD_INT 0
24937: ST_TO_ADDR
24938: GO 25552
24940: LD_INT 2
24942: DOUBLE
24943: EQUAL
24944: IFTRUE 24948
24946: GO 24959
24948: POP
// bc_type := b_warehouse ; 3 :
24949: LD_ADDR_OWVAR 42
24953: PUSH
24954: LD_INT 1
24956: ST_TO_ADDR
24957: GO 25552
24959: LD_INT 3
24961: DOUBLE
24962: EQUAL
24963: IFTRUE 24967
24965: GO 24978
24967: POP
// bc_type := b_lab ; 4 .. 9 :
24968: LD_ADDR_OWVAR 42
24972: PUSH
24973: LD_INT 6
24975: ST_TO_ADDR
24976: GO 25552
24978: LD_INT 4
24980: DOUBLE
24981: GREATEREQUAL
24982: IFFALSE 24990
24984: LD_INT 9
24986: DOUBLE
24987: LESSEQUAL
24988: IFTRUE 24992
24990: GO 25044
24992: POP
// begin bc_type := b_lab_half ;
24993: LD_ADDR_OWVAR 42
24997: PUSH
24998: LD_INT 7
25000: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25001: LD_ADDR_OWVAR 44
25005: PUSH
25006: LD_INT 10
25008: PUSH
25009: LD_INT 11
25011: PUSH
25012: LD_INT 12
25014: PUSH
25015: LD_INT 15
25017: PUSH
25018: LD_INT 14
25020: PUSH
25021: LD_INT 13
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: PUSH
25032: LD_VAR 0 2
25036: PUSH
25037: LD_INT 3
25039: MINUS
25040: ARRAY
25041: ST_TO_ADDR
// end ; 10 .. 13 :
25042: GO 25552
25044: LD_INT 10
25046: DOUBLE
25047: GREATEREQUAL
25048: IFFALSE 25056
25050: LD_INT 13
25052: DOUBLE
25053: LESSEQUAL
25054: IFTRUE 25058
25056: GO 25135
25058: POP
// begin bc_type := b_lab_full ;
25059: LD_ADDR_OWVAR 42
25063: PUSH
25064: LD_INT 8
25066: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25067: LD_ADDR_OWVAR 44
25071: PUSH
25072: LD_INT 10
25074: PUSH
25075: LD_INT 12
25077: PUSH
25078: LD_INT 14
25080: PUSH
25081: LD_INT 13
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: PUSH
25090: LD_VAR 0 2
25094: PUSH
25095: LD_INT 9
25097: MINUS
25098: ARRAY
25099: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25100: LD_ADDR_OWVAR 45
25104: PUSH
25105: LD_INT 11
25107: PUSH
25108: LD_INT 15
25110: PUSH
25111: LD_INT 12
25113: PUSH
25114: LD_INT 15
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: PUSH
25123: LD_VAR 0 2
25127: PUSH
25128: LD_INT 9
25130: MINUS
25131: ARRAY
25132: ST_TO_ADDR
// end ; 14 :
25133: GO 25552
25135: LD_INT 14
25137: DOUBLE
25138: EQUAL
25139: IFTRUE 25143
25141: GO 25154
25143: POP
// bc_type := b_workshop ; 15 :
25144: LD_ADDR_OWVAR 42
25148: PUSH
25149: LD_INT 2
25151: ST_TO_ADDR
25152: GO 25552
25154: LD_INT 15
25156: DOUBLE
25157: EQUAL
25158: IFTRUE 25162
25160: GO 25173
25162: POP
// bc_type := b_factory ; 16 :
25163: LD_ADDR_OWVAR 42
25167: PUSH
25168: LD_INT 3
25170: ST_TO_ADDR
25171: GO 25552
25173: LD_INT 16
25175: DOUBLE
25176: EQUAL
25177: IFTRUE 25181
25179: GO 25192
25181: POP
// bc_type := b_ext_gun ; 17 :
25182: LD_ADDR_OWVAR 42
25186: PUSH
25187: LD_INT 17
25189: ST_TO_ADDR
25190: GO 25552
25192: LD_INT 17
25194: DOUBLE
25195: EQUAL
25196: IFTRUE 25200
25198: GO 25228
25200: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25201: LD_ADDR_OWVAR 42
25205: PUSH
25206: LD_INT 19
25208: PUSH
25209: LD_INT 23
25211: PUSH
25212: LD_INT 19
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: PUSH
25220: LD_VAR 0 1
25224: ARRAY
25225: ST_TO_ADDR
25226: GO 25552
25228: LD_INT 18
25230: DOUBLE
25231: EQUAL
25232: IFTRUE 25236
25234: GO 25247
25236: POP
// bc_type := b_ext_radar ; 19 :
25237: LD_ADDR_OWVAR 42
25241: PUSH
25242: LD_INT 20
25244: ST_TO_ADDR
25245: GO 25552
25247: LD_INT 19
25249: DOUBLE
25250: EQUAL
25251: IFTRUE 25255
25253: GO 25266
25255: POP
// bc_type := b_ext_radio ; 20 :
25256: LD_ADDR_OWVAR 42
25260: PUSH
25261: LD_INT 22
25263: ST_TO_ADDR
25264: GO 25552
25266: LD_INT 20
25268: DOUBLE
25269: EQUAL
25270: IFTRUE 25274
25272: GO 25285
25274: POP
// bc_type := b_ext_siberium ; 21 :
25275: LD_ADDR_OWVAR 42
25279: PUSH
25280: LD_INT 21
25282: ST_TO_ADDR
25283: GO 25552
25285: LD_INT 21
25287: DOUBLE
25288: EQUAL
25289: IFTRUE 25293
25291: GO 25304
25293: POP
// bc_type := b_ext_computer ; 22 :
25294: LD_ADDR_OWVAR 42
25298: PUSH
25299: LD_INT 24
25301: ST_TO_ADDR
25302: GO 25552
25304: LD_INT 22
25306: DOUBLE
25307: EQUAL
25308: IFTRUE 25312
25310: GO 25323
25312: POP
// bc_type := b_ext_track ; 23 :
25313: LD_ADDR_OWVAR 42
25317: PUSH
25318: LD_INT 16
25320: ST_TO_ADDR
25321: GO 25552
25323: LD_INT 23
25325: DOUBLE
25326: EQUAL
25327: IFTRUE 25331
25329: GO 25342
25331: POP
// bc_type := b_ext_laser ; 24 :
25332: LD_ADDR_OWVAR 42
25336: PUSH
25337: LD_INT 25
25339: ST_TO_ADDR
25340: GO 25552
25342: LD_INT 24
25344: DOUBLE
25345: EQUAL
25346: IFTRUE 25350
25348: GO 25361
25350: POP
// bc_type := b_control_tower ; 25 :
25351: LD_ADDR_OWVAR 42
25355: PUSH
25356: LD_INT 36
25358: ST_TO_ADDR
25359: GO 25552
25361: LD_INT 25
25363: DOUBLE
25364: EQUAL
25365: IFTRUE 25369
25367: GO 25380
25369: POP
// bc_type := b_breastwork ; 26 :
25370: LD_ADDR_OWVAR 42
25374: PUSH
25375: LD_INT 31
25377: ST_TO_ADDR
25378: GO 25552
25380: LD_INT 26
25382: DOUBLE
25383: EQUAL
25384: IFTRUE 25388
25386: GO 25399
25388: POP
// bc_type := b_bunker ; 27 :
25389: LD_ADDR_OWVAR 42
25393: PUSH
25394: LD_INT 32
25396: ST_TO_ADDR
25397: GO 25552
25399: LD_INT 27
25401: DOUBLE
25402: EQUAL
25403: IFTRUE 25407
25405: GO 25418
25407: POP
// bc_type := b_turret ; 28 :
25408: LD_ADDR_OWVAR 42
25412: PUSH
25413: LD_INT 33
25415: ST_TO_ADDR
25416: GO 25552
25418: LD_INT 28
25420: DOUBLE
25421: EQUAL
25422: IFTRUE 25426
25424: GO 25437
25426: POP
// bc_type := b_armoury ; 29 :
25427: LD_ADDR_OWVAR 42
25431: PUSH
25432: LD_INT 4
25434: ST_TO_ADDR
25435: GO 25552
25437: LD_INT 29
25439: DOUBLE
25440: EQUAL
25441: IFTRUE 25445
25443: GO 25456
25445: POP
// bc_type := b_barracks ; 30 :
25446: LD_ADDR_OWVAR 42
25450: PUSH
25451: LD_INT 5
25453: ST_TO_ADDR
25454: GO 25552
25456: LD_INT 30
25458: DOUBLE
25459: EQUAL
25460: IFTRUE 25464
25462: GO 25475
25464: POP
// bc_type := b_solar_power ; 31 :
25465: LD_ADDR_OWVAR 42
25469: PUSH
25470: LD_INT 27
25472: ST_TO_ADDR
25473: GO 25552
25475: LD_INT 31
25477: DOUBLE
25478: EQUAL
25479: IFTRUE 25483
25481: GO 25494
25483: POP
// bc_type := b_oil_power ; 32 :
25484: LD_ADDR_OWVAR 42
25488: PUSH
25489: LD_INT 26
25491: ST_TO_ADDR
25492: GO 25552
25494: LD_INT 32
25496: DOUBLE
25497: EQUAL
25498: IFTRUE 25502
25500: GO 25513
25502: POP
// bc_type := b_siberite_power ; 33 :
25503: LD_ADDR_OWVAR 42
25507: PUSH
25508: LD_INT 28
25510: ST_TO_ADDR
25511: GO 25552
25513: LD_INT 33
25515: DOUBLE
25516: EQUAL
25517: IFTRUE 25521
25519: GO 25532
25521: POP
// bc_type := b_oil_mine ; 34 :
25522: LD_ADDR_OWVAR 42
25526: PUSH
25527: LD_INT 29
25529: ST_TO_ADDR
25530: GO 25552
25532: LD_INT 34
25534: DOUBLE
25535: EQUAL
25536: IFTRUE 25540
25538: GO 25551
25540: POP
// bc_type := b_siberite_mine ; end ;
25541: LD_ADDR_OWVAR 42
25545: PUSH
25546: LD_INT 30
25548: ST_TO_ADDR
25549: GO 25552
25551: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25552: LD_ADDR_VAR 0 8
25556: PUSH
25557: LD_VAR 0 5
25561: PPUSH
25562: LD_VAR 0 6
25566: PPUSH
25567: LD_VAR 0 3
25571: PPUSH
25572: CALL_OW 47
25576: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25577: LD_OWVAR 42
25581: PUSH
25582: LD_INT 32
25584: PUSH
25585: LD_INT 33
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: IN
25592: IFFALSE 25608
// PlaceWeaponTurret ( b , weapon ) ;
25594: LD_VAR 0 8
25598: PPUSH
25599: LD_VAR 0 4
25603: PPUSH
25604: CALL_OW 431
// end ;
25608: LD_VAR 0 7
25612: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25613: LD_INT 0
25615: PPUSH
25616: PPUSH
25617: PPUSH
25618: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25619: LD_ADDR_VAR 0 4
25623: PUSH
25624: LD_INT 22
25626: PUSH
25627: LD_OWVAR 2
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 2
25638: PUSH
25639: LD_INT 30
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 30
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: LIST
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PPUSH
25668: CALL_OW 69
25672: ST_TO_ADDR
// if not tmp then
25673: LD_VAR 0 4
25677: NOT
25678: IFFALSE 25682
// exit ;
25680: GO 25741
// for i in tmp do
25682: LD_ADDR_VAR 0 2
25686: PUSH
25687: LD_VAR 0 4
25691: PUSH
25692: FOR_IN
25693: IFFALSE 25739
// for j = 1 to 3 do
25695: LD_ADDR_VAR 0 3
25699: PUSH
25700: DOUBLE
25701: LD_INT 1
25703: DEC
25704: ST_TO_ADDR
25705: LD_INT 3
25707: PUSH
25708: FOR_TO
25709: IFFALSE 25735
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25711: LD_VAR 0 2
25715: PPUSH
25716: CALL_OW 274
25720: PPUSH
25721: LD_VAR 0 3
25725: PPUSH
25726: LD_INT 99999
25728: PPUSH
25729: CALL_OW 277
25733: GO 25708
25735: POP
25736: POP
25737: GO 25692
25739: POP
25740: POP
// end ;
25741: LD_VAR 0 1
25745: RET
// export function hHackSetLevel10 ; var i , j ; begin
25746: LD_INT 0
25748: PPUSH
25749: PPUSH
25750: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_INT 21
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PPUSH
25766: CALL_OW 69
25770: PUSH
25771: FOR_IN
25772: IFFALSE 25824
// if IsSelected ( i ) then
25774: LD_VAR 0 2
25778: PPUSH
25779: CALL_OW 306
25783: IFFALSE 25822
// begin for j := 1 to 4 do
25785: LD_ADDR_VAR 0 3
25789: PUSH
25790: DOUBLE
25791: LD_INT 1
25793: DEC
25794: ST_TO_ADDR
25795: LD_INT 4
25797: PUSH
25798: FOR_TO
25799: IFFALSE 25820
// SetSkill ( i , j , 10 ) ;
25801: LD_VAR 0 2
25805: PPUSH
25806: LD_VAR 0 3
25810: PPUSH
25811: LD_INT 10
25813: PPUSH
25814: CALL_OW 237
25818: GO 25798
25820: POP
25821: POP
// end ;
25822: GO 25771
25824: POP
25825: POP
// end ;
25826: LD_VAR 0 1
25830: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25831: LD_INT 0
25833: PPUSH
25834: PPUSH
25835: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25836: LD_ADDR_VAR 0 2
25840: PUSH
25841: LD_INT 22
25843: PUSH
25844: LD_OWVAR 2
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 21
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: PUSH
25872: FOR_IN
25873: IFFALSE 25914
// begin for j := 1 to 4 do
25875: LD_ADDR_VAR 0 3
25879: PUSH
25880: DOUBLE
25881: LD_INT 1
25883: DEC
25884: ST_TO_ADDR
25885: LD_INT 4
25887: PUSH
25888: FOR_TO
25889: IFFALSE 25910
// SetSkill ( i , j , 10 ) ;
25891: LD_VAR 0 2
25895: PPUSH
25896: LD_VAR 0 3
25900: PPUSH
25901: LD_INT 10
25903: PPUSH
25904: CALL_OW 237
25908: GO 25888
25910: POP
25911: POP
// end ;
25912: GO 25872
25914: POP
25915: POP
// end ;
25916: LD_VAR 0 1
25920: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25921: LD_INT 0
25923: PPUSH
// uc_side := your_side ;
25924: LD_ADDR_OWVAR 20
25928: PUSH
25929: LD_OWVAR 2
25933: ST_TO_ADDR
// uc_nation := nation ;
25934: LD_ADDR_OWVAR 21
25938: PUSH
25939: LD_VAR 0 1
25943: ST_TO_ADDR
// InitHc ;
25944: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25948: LD_INT 0
25950: PPUSH
25951: LD_VAR 0 2
25955: PPUSH
25956: LD_VAR 0 3
25960: PPUSH
25961: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25965: LD_VAR 0 4
25969: PPUSH
25970: LD_VAR 0 5
25974: PPUSH
25975: CALL_OW 428
25979: PUSH
25980: LD_INT 0
25982: EQUAL
25983: IFFALSE 26007
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25985: CALL_OW 44
25989: PPUSH
25990: LD_VAR 0 4
25994: PPUSH
25995: LD_VAR 0 5
25999: PPUSH
26000: LD_INT 1
26002: PPUSH
26003: CALL_OW 48
// end ;
26007: LD_VAR 0 6
26011: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26012: LD_INT 0
26014: PPUSH
26015: PPUSH
// uc_side := your_side ;
26016: LD_ADDR_OWVAR 20
26020: PUSH
26021: LD_OWVAR 2
26025: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26026: LD_VAR 0 1
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: LD_INT 2
26036: PUSH
26037: LD_INT 3
26039: PUSH
26040: LD_INT 4
26042: PUSH
26043: LD_INT 5
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: IN
26053: IFFALSE 26065
// uc_nation := nation_american else
26055: LD_ADDR_OWVAR 21
26059: PUSH
26060: LD_INT 1
26062: ST_TO_ADDR
26063: GO 26108
// if chassis in [ 11 , 12 , 13 , 14 ] then
26065: LD_VAR 0 1
26069: PUSH
26070: LD_INT 11
26072: PUSH
26073: LD_INT 12
26075: PUSH
26076: LD_INT 13
26078: PUSH
26079: LD_INT 14
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: IN
26088: IFFALSE 26100
// uc_nation := nation_arabian else
26090: LD_ADDR_OWVAR 21
26094: PUSH
26095: LD_INT 2
26097: ST_TO_ADDR
26098: GO 26108
// uc_nation := nation_russian ;
26100: LD_ADDR_OWVAR 21
26104: PUSH
26105: LD_INT 3
26107: ST_TO_ADDR
// vc_chassis := chassis ;
26108: LD_ADDR_OWVAR 37
26112: PUSH
26113: LD_VAR 0 1
26117: ST_TO_ADDR
// vc_engine := engine ;
26118: LD_ADDR_OWVAR 39
26122: PUSH
26123: LD_VAR 0 2
26127: ST_TO_ADDR
// vc_control := control ;
26128: LD_ADDR_OWVAR 38
26132: PUSH
26133: LD_VAR 0 3
26137: ST_TO_ADDR
// vc_weapon := weapon ;
26138: LD_ADDR_OWVAR 40
26142: PUSH
26143: LD_VAR 0 4
26147: ST_TO_ADDR
// un := CreateVehicle ;
26148: LD_ADDR_VAR 0 8
26152: PUSH
26153: CALL_OW 45
26157: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26158: LD_VAR 0 8
26162: PPUSH
26163: LD_INT 0
26165: PPUSH
26166: LD_INT 5
26168: PPUSH
26169: CALL_OW 12
26173: PPUSH
26174: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26178: LD_VAR 0 8
26182: PPUSH
26183: LD_VAR 0 5
26187: PPUSH
26188: LD_VAR 0 6
26192: PPUSH
26193: LD_INT 1
26195: PPUSH
26196: CALL_OW 48
// end ;
26200: LD_VAR 0 7
26204: RET
// export hInvincible ; every 1 do
26205: GO 26207
26207: DISABLE
// hInvincible := [ ] ;
26208: LD_ADDR_EXP 98
26212: PUSH
26213: EMPTY
26214: ST_TO_ADDR
26215: END
// every 10 do var i ;
26216: GO 26218
26218: DISABLE
26219: LD_INT 0
26221: PPUSH
// begin enable ;
26222: ENABLE
// if not hInvincible then
26223: LD_EXP 98
26227: NOT
26228: IFFALSE 26232
// exit ;
26230: GO 26276
// for i in hInvincible do
26232: LD_ADDR_VAR 0 1
26236: PUSH
26237: LD_EXP 98
26241: PUSH
26242: FOR_IN
26243: IFFALSE 26274
// if GetLives ( i ) < 1000 then
26245: LD_VAR 0 1
26249: PPUSH
26250: CALL_OW 256
26254: PUSH
26255: LD_INT 1000
26257: LESS
26258: IFFALSE 26272
// SetLives ( i , 1000 ) ;
26260: LD_VAR 0 1
26264: PPUSH
26265: LD_INT 1000
26267: PPUSH
26268: CALL_OW 234
26272: GO 26242
26274: POP
26275: POP
// end ;
26276: PPOPN 1
26278: END
// export function hHackInvincible ; var i ; begin
26279: LD_INT 0
26281: PPUSH
26282: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26283: LD_ADDR_VAR 0 2
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: LD_INT 21
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 21
26303: PUSH
26304: LD_INT 2
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: PPUSH
26316: CALL_OW 69
26320: PUSH
26321: FOR_IN
26322: IFFALSE 26383
// if IsSelected ( i ) then
26324: LD_VAR 0 2
26328: PPUSH
26329: CALL_OW 306
26333: IFFALSE 26381
// begin if i in hInvincible then
26335: LD_VAR 0 2
26339: PUSH
26340: LD_EXP 98
26344: IN
26345: IFFALSE 26365
// hInvincible := hInvincible diff i else
26347: LD_ADDR_EXP 98
26351: PUSH
26352: LD_EXP 98
26356: PUSH
26357: LD_VAR 0 2
26361: DIFF
26362: ST_TO_ADDR
26363: GO 26381
// hInvincible := hInvincible union i ;
26365: LD_ADDR_EXP 98
26369: PUSH
26370: LD_EXP 98
26374: PUSH
26375: LD_VAR 0 2
26379: UNION
26380: ST_TO_ADDR
// end ;
26381: GO 26321
26383: POP
26384: POP
// end ;
26385: LD_VAR 0 1
26389: RET
// export function hHackInvisible ; var i , j ; begin
26390: LD_INT 0
26392: PPUSH
26393: PPUSH
26394: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26395: LD_ADDR_VAR 0 2
26399: PUSH
26400: LD_INT 21
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PPUSH
26410: CALL_OW 69
26414: PUSH
26415: FOR_IN
26416: IFFALSE 26440
// if IsSelected ( i ) then
26418: LD_VAR 0 2
26422: PPUSH
26423: CALL_OW 306
26427: IFFALSE 26438
// ComForceInvisible ( i ) ;
26429: LD_VAR 0 2
26433: PPUSH
26434: CALL_OW 496
26438: GO 26415
26440: POP
26441: POP
// end ;
26442: LD_VAR 0 1
26446: RET
// export function hHackChangeYourSide ; begin
26447: LD_INT 0
26449: PPUSH
// if your_side = 8 then
26450: LD_OWVAR 2
26454: PUSH
26455: LD_INT 8
26457: EQUAL
26458: IFFALSE 26470
// your_side := 0 else
26460: LD_ADDR_OWVAR 2
26464: PUSH
26465: LD_INT 0
26467: ST_TO_ADDR
26468: GO 26484
// your_side := your_side + 1 ;
26470: LD_ADDR_OWVAR 2
26474: PUSH
26475: LD_OWVAR 2
26479: PUSH
26480: LD_INT 1
26482: PLUS
26483: ST_TO_ADDR
// end ;
26484: LD_VAR 0 1
26488: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26489: LD_INT 0
26491: PPUSH
26492: PPUSH
26493: PPUSH
// for i in all_units do
26494: LD_ADDR_VAR 0 2
26498: PUSH
26499: LD_OWVAR 3
26503: PUSH
26504: FOR_IN
26505: IFFALSE 26583
// if IsSelected ( i ) then
26507: LD_VAR 0 2
26511: PPUSH
26512: CALL_OW 306
26516: IFFALSE 26581
// begin j := GetSide ( i ) ;
26518: LD_ADDR_VAR 0 3
26522: PUSH
26523: LD_VAR 0 2
26527: PPUSH
26528: CALL_OW 255
26532: ST_TO_ADDR
// if j = 8 then
26533: LD_VAR 0 3
26537: PUSH
26538: LD_INT 8
26540: EQUAL
26541: IFFALSE 26553
// j := 0 else
26543: LD_ADDR_VAR 0 3
26547: PUSH
26548: LD_INT 0
26550: ST_TO_ADDR
26551: GO 26567
// j := j + 1 ;
26553: LD_ADDR_VAR 0 3
26557: PUSH
26558: LD_VAR 0 3
26562: PUSH
26563: LD_INT 1
26565: PLUS
26566: ST_TO_ADDR
// SetSide ( i , j ) ;
26567: LD_VAR 0 2
26571: PPUSH
26572: LD_VAR 0 3
26576: PPUSH
26577: CALL_OW 235
// end ;
26581: GO 26504
26583: POP
26584: POP
// end ;
26585: LD_VAR 0 1
26589: RET
// export function hHackFog ; begin
26590: LD_INT 0
26592: PPUSH
// FogOff ( true ) ;
26593: LD_INT 1
26595: PPUSH
26596: CALL_OW 344
// end ;
26600: LD_VAR 0 1
26604: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26605: LD_INT 0
26607: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26608: LD_VAR 0 1
26612: PPUSH
26613: LD_VAR 0 2
26617: PPUSH
26618: LD_VAR 0 3
26622: PPUSH
26623: LD_INT 1
26625: PPUSH
26626: LD_INT 1
26628: PPUSH
26629: CALL_OW 483
// CenterOnXY ( x , y ) ;
26633: LD_VAR 0 2
26637: PPUSH
26638: LD_VAR 0 3
26642: PPUSH
26643: CALL_OW 84
// end ; end_of_file
26647: LD_VAR 0 4
26651: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26652: LD_INT 0
26654: PPUSH
26655: PPUSH
26656: PPUSH
26657: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26658: LD_VAR 0 1
26662: PPUSH
26663: CALL_OW 264
26667: PUSH
26668: LD_EXP 25
26672: EQUAL
26673: IFFALSE 26745
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26675: LD_INT 68
26677: PPUSH
26678: LD_VAR 0 1
26682: PPUSH
26683: CALL_OW 255
26687: PPUSH
26688: CALL_OW 321
26692: PUSH
26693: LD_INT 2
26695: EQUAL
26696: IFFALSE 26708
// eff := 70 else
26698: LD_ADDR_VAR 0 4
26702: PUSH
26703: LD_INT 70
26705: ST_TO_ADDR
26706: GO 26716
// eff := 30 ;
26708: LD_ADDR_VAR 0 4
26712: PUSH
26713: LD_INT 30
26715: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26716: LD_VAR 0 1
26720: PPUSH
26721: CALL_OW 250
26725: PPUSH
26726: LD_VAR 0 1
26730: PPUSH
26731: CALL_OW 251
26735: PPUSH
26736: LD_VAR 0 4
26740: PPUSH
26741: CALL_OW 495
// end ; end ;
26745: LD_VAR 0 2
26749: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26750: LD_INT 0
26752: PPUSH
// end ;
26753: LD_VAR 0 4
26757: RET
// export function SOS_Command ( cmd ) ; begin
26758: LD_INT 0
26760: PPUSH
// end ;
26761: LD_VAR 0 2
26765: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26766: LD_INT 0
26768: PPUSH
// end ;
26769: LD_VAR 0 6
26773: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26774: LD_INT 0
26776: PPUSH
26777: PPUSH
// if not vehicle or not factory then
26778: LD_VAR 0 1
26782: NOT
26783: PUSH
26784: LD_VAR 0 2
26788: NOT
26789: OR
26790: IFFALSE 26794
// exit ;
26792: GO 27025
// if factoryWaypoints >= factory then
26794: LD_EXP 99
26798: PUSH
26799: LD_VAR 0 2
26803: GREATEREQUAL
26804: IFFALSE 27025
// if factoryWaypoints [ factory ] then
26806: LD_EXP 99
26810: PUSH
26811: LD_VAR 0 2
26815: ARRAY
26816: IFFALSE 27025
// begin if GetControl ( vehicle ) = control_manual then
26818: LD_VAR 0 1
26822: PPUSH
26823: CALL_OW 263
26827: PUSH
26828: LD_INT 1
26830: EQUAL
26831: IFFALSE 26912
// begin driver := IsDrivenBy ( vehicle ) ;
26833: LD_ADDR_VAR 0 4
26837: PUSH
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 311
26847: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26848: LD_VAR 0 4
26852: PPUSH
26853: LD_EXP 99
26857: PUSH
26858: LD_VAR 0 2
26862: ARRAY
26863: PUSH
26864: LD_INT 3
26866: ARRAY
26867: PPUSH
26868: LD_EXP 99
26872: PUSH
26873: LD_VAR 0 2
26877: ARRAY
26878: PUSH
26879: LD_INT 4
26881: ARRAY
26882: PPUSH
26883: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26887: LD_VAR 0 4
26891: PPUSH
26892: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26896: LD_VAR 0 4
26900: PPUSH
26901: LD_VAR 0 2
26905: PPUSH
26906: CALL_OW 180
// end else
26910: GO 27025
// if GetControl ( vehicle ) = control_remote then
26912: LD_VAR 0 1
26916: PPUSH
26917: CALL_OW 263
26921: PUSH
26922: LD_INT 2
26924: EQUAL
26925: IFFALSE 26986
// begin wait ( 0 0$2 ) ;
26927: LD_INT 70
26929: PPUSH
26930: CALL_OW 67
// if Connect ( vehicle ) then
26934: LD_VAR 0 1
26938: PPUSH
26939: CALL 39249 0 1
26943: IFFALSE 26984
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26945: LD_VAR 0 1
26949: PPUSH
26950: LD_EXP 99
26954: PUSH
26955: LD_VAR 0 2
26959: ARRAY
26960: PUSH
26961: LD_INT 3
26963: ARRAY
26964: PPUSH
26965: LD_EXP 99
26969: PUSH
26970: LD_VAR 0 2
26974: ARRAY
26975: PUSH
26976: LD_INT 4
26978: ARRAY
26979: PPUSH
26980: CALL_OW 171
// end else
26984: GO 27025
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26986: LD_VAR 0 1
26990: PPUSH
26991: LD_EXP 99
26995: PUSH
26996: LD_VAR 0 2
27000: ARRAY
27001: PUSH
27002: LD_INT 3
27004: ARRAY
27005: PPUSH
27006: LD_EXP 99
27010: PUSH
27011: LD_VAR 0 2
27015: ARRAY
27016: PUSH
27017: LD_INT 4
27019: ARRAY
27020: PPUSH
27021: CALL_OW 171
// end ; end ;
27025: LD_VAR 0 3
27029: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27030: LD_INT 0
27032: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27033: LD_VAR 0 1
27037: PUSH
27038: LD_INT 250
27040: EQUAL
27041: PUSH
27042: LD_VAR 0 2
27046: PPUSH
27047: CALL_OW 264
27051: PUSH
27052: LD_EXP 28
27056: EQUAL
27057: AND
27058: IFFALSE 27079
// MinerPlaceMine ( unit , x , y ) ;
27060: LD_VAR 0 2
27064: PPUSH
27065: LD_VAR 0 4
27069: PPUSH
27070: LD_VAR 0 5
27074: PPUSH
27075: CALL 29807 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27079: LD_VAR 0 1
27083: PUSH
27084: LD_INT 251
27086: EQUAL
27087: PUSH
27088: LD_VAR 0 2
27092: PPUSH
27093: CALL_OW 264
27097: PUSH
27098: LD_EXP 28
27102: EQUAL
27103: AND
27104: IFFALSE 27125
// MinerDetonateMine ( unit , x , y ) ;
27106: LD_VAR 0 2
27110: PPUSH
27111: LD_VAR 0 4
27115: PPUSH
27116: LD_VAR 0 5
27120: PPUSH
27121: CALL 30084 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27125: LD_VAR 0 1
27129: PUSH
27130: LD_INT 252
27132: EQUAL
27133: PUSH
27134: LD_VAR 0 2
27138: PPUSH
27139: CALL_OW 264
27143: PUSH
27144: LD_EXP 28
27148: EQUAL
27149: AND
27150: IFFALSE 27171
// MinerCreateMinefield ( unit , x , y ) ;
27152: LD_VAR 0 2
27156: PPUSH
27157: LD_VAR 0 4
27161: PPUSH
27162: LD_VAR 0 5
27166: PPUSH
27167: CALL 30501 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27171: LD_VAR 0 1
27175: PUSH
27176: LD_INT 253
27178: EQUAL
27179: PUSH
27180: LD_VAR 0 2
27184: PPUSH
27185: CALL_OW 257
27189: PUSH
27190: LD_INT 5
27192: EQUAL
27193: AND
27194: IFFALSE 27215
// ComBinocular ( unit , x , y ) ;
27196: LD_VAR 0 2
27200: PPUSH
27201: LD_VAR 0 4
27205: PPUSH
27206: LD_VAR 0 5
27210: PPUSH
27211: CALL 30872 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27215: LD_VAR 0 1
27219: PUSH
27220: LD_INT 254
27222: EQUAL
27223: PUSH
27224: LD_VAR 0 2
27228: PPUSH
27229: CALL_OW 264
27233: PUSH
27234: LD_EXP 23
27238: EQUAL
27239: AND
27240: PUSH
27241: LD_VAR 0 3
27245: PPUSH
27246: CALL_OW 263
27250: PUSH
27251: LD_INT 3
27253: EQUAL
27254: AND
27255: IFFALSE 27271
// HackDestroyVehicle ( unit , selectedUnit ) ;
27257: LD_VAR 0 2
27261: PPUSH
27262: LD_VAR 0 3
27266: PPUSH
27267: CALL 29167 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27271: LD_VAR 0 1
27275: PUSH
27276: LD_INT 255
27278: EQUAL
27279: PUSH
27280: LD_VAR 0 2
27284: PPUSH
27285: CALL_OW 264
27289: PUSH
27290: LD_INT 14
27292: PUSH
27293: LD_INT 53
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: IN
27300: AND
27301: PUSH
27302: LD_VAR 0 4
27306: PPUSH
27307: LD_VAR 0 5
27311: PPUSH
27312: CALL_OW 488
27316: AND
27317: IFFALSE 27341
// CutTreeXYR ( unit , x , y , 12 ) ;
27319: LD_VAR 0 2
27323: PPUSH
27324: LD_VAR 0 4
27328: PPUSH
27329: LD_VAR 0 5
27333: PPUSH
27334: LD_INT 12
27336: PPUSH
27337: CALL 27733 0 4
// if cmd = 256 then
27341: LD_VAR 0 1
27345: PUSH
27346: LD_INT 256
27348: EQUAL
27349: IFFALSE 27370
// SetFactoryWaypoint ( unit , x , y ) ;
27351: LD_VAR 0 2
27355: PPUSH
27356: LD_VAR 0 4
27360: PPUSH
27361: LD_VAR 0 5
27365: PPUSH
27366: CALL 27375 0 3
// end ;
27370: LD_VAR 0 6
27374: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27375: LD_INT 0
27377: PPUSH
27378: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27379: LD_VAR 0 1
27383: NOT
27384: PUSH
27385: LD_VAR 0 2
27389: PPUSH
27390: LD_VAR 0 3
27394: PPUSH
27395: CALL_OW 488
27399: NOT
27400: OR
27401: PUSH
27402: LD_VAR 0 1
27406: PPUSH
27407: CALL_OW 266
27411: PUSH
27412: LD_INT 3
27414: NONEQUAL
27415: PUSH
27416: LD_VAR 0 1
27420: PPUSH
27421: CALL_OW 247
27425: PUSH
27426: LD_INT 1
27428: EQUAL
27429: NOT
27430: AND
27431: OR
27432: IFFALSE 27436
// exit ;
27434: GO 27585
// if GetType ( factory ) = unit_human then
27436: LD_VAR 0 1
27440: PPUSH
27441: CALL_OW 247
27445: PUSH
27446: LD_INT 1
27448: EQUAL
27449: IFFALSE 27466
// factory := IsInUnit ( factory ) ;
27451: LD_ADDR_VAR 0 1
27455: PUSH
27456: LD_VAR 0 1
27460: PPUSH
27461: CALL_OW 310
27465: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27466: LD_VAR 0 1
27470: PPUSH
27471: CALL_OW 266
27475: PUSH
27476: LD_INT 3
27478: NONEQUAL
27479: IFFALSE 27483
// exit ;
27481: GO 27585
// if HexInfo ( x , y ) = factory then
27483: LD_VAR 0 2
27487: PPUSH
27488: LD_VAR 0 3
27492: PPUSH
27493: CALL_OW 428
27497: PUSH
27498: LD_VAR 0 1
27502: EQUAL
27503: IFFALSE 27530
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27505: LD_ADDR_EXP 99
27509: PUSH
27510: LD_EXP 99
27514: PPUSH
27515: LD_VAR 0 1
27519: PPUSH
27520: LD_INT 0
27522: PPUSH
27523: CALL_OW 1
27527: ST_TO_ADDR
27528: GO 27581
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27530: LD_ADDR_EXP 99
27534: PUSH
27535: LD_EXP 99
27539: PPUSH
27540: LD_VAR 0 1
27544: PPUSH
27545: LD_VAR 0 1
27549: PPUSH
27550: CALL_OW 255
27554: PUSH
27555: LD_VAR 0 1
27559: PUSH
27560: LD_VAR 0 2
27564: PUSH
27565: LD_VAR 0 3
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: PPUSH
27576: CALL_OW 1
27580: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27581: CALL 27590 0 0
// end ;
27585: LD_VAR 0 4
27589: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
27590: LD_INT 0
27592: PPUSH
27593: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27594: LD_STRING resetFactoryWaypoint();
27596: PPUSH
27597: CALL_OW 559
// if factoryWaypoints then
27601: LD_EXP 99
27605: IFFALSE 27728
// begin for i := 1 to factoryWaypoints do
27607: LD_ADDR_VAR 0 2
27611: PUSH
27612: DOUBLE
27613: LD_INT 1
27615: DEC
27616: ST_TO_ADDR
27617: LD_EXP 99
27621: PUSH
27622: FOR_TO
27623: IFFALSE 27726
// if factoryWaypoints [ i ] then
27625: LD_EXP 99
27629: PUSH
27630: LD_VAR 0 2
27634: ARRAY
27635: IFFALSE 27724
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
27637: LD_STRING setFactoryWaypointXY(
27639: PUSH
27640: LD_EXP 99
27644: PUSH
27645: LD_VAR 0 2
27649: ARRAY
27650: PUSH
27651: LD_INT 1
27653: ARRAY
27654: STR
27655: PUSH
27656: LD_STRING ,
27658: STR
27659: PUSH
27660: LD_EXP 99
27664: PUSH
27665: LD_VAR 0 2
27669: ARRAY
27670: PUSH
27671: LD_INT 2
27673: ARRAY
27674: STR
27675: PUSH
27676: LD_STRING ,
27678: STR
27679: PUSH
27680: LD_EXP 99
27684: PUSH
27685: LD_VAR 0 2
27689: ARRAY
27690: PUSH
27691: LD_INT 3
27693: ARRAY
27694: STR
27695: PUSH
27696: LD_STRING ,
27698: STR
27699: PUSH
27700: LD_EXP 99
27704: PUSH
27705: LD_VAR 0 2
27709: ARRAY
27710: PUSH
27711: LD_INT 4
27713: ARRAY
27714: STR
27715: PUSH
27716: LD_STRING )
27718: STR
27719: PPUSH
27720: CALL_OW 559
27724: GO 27622
27726: POP
27727: POP
// end ; end ;
27728: LD_VAR 0 1
27732: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27733: LD_INT 0
27735: PPUSH
27736: PPUSH
27737: PPUSH
27738: PPUSH
27739: PPUSH
27740: PPUSH
27741: PPUSH
27742: PPUSH
27743: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27744: LD_VAR 0 1
27748: NOT
27749: PUSH
27750: LD_VAR 0 2
27754: PPUSH
27755: LD_VAR 0 3
27759: PPUSH
27760: CALL_OW 488
27764: NOT
27765: OR
27766: PUSH
27767: LD_VAR 0 4
27771: NOT
27772: OR
27773: IFFALSE 27777
// exit ;
27775: GO 28117
// list := [ ] ;
27777: LD_ADDR_VAR 0 13
27781: PUSH
27782: EMPTY
27783: ST_TO_ADDR
// if x - r < 0 then
27784: LD_VAR 0 2
27788: PUSH
27789: LD_VAR 0 4
27793: MINUS
27794: PUSH
27795: LD_INT 0
27797: LESS
27798: IFFALSE 27810
// min_x := 0 else
27800: LD_ADDR_VAR 0 7
27804: PUSH
27805: LD_INT 0
27807: ST_TO_ADDR
27808: GO 27826
// min_x := x - r ;
27810: LD_ADDR_VAR 0 7
27814: PUSH
27815: LD_VAR 0 2
27819: PUSH
27820: LD_VAR 0 4
27824: MINUS
27825: ST_TO_ADDR
// if y - r < 0 then
27826: LD_VAR 0 3
27830: PUSH
27831: LD_VAR 0 4
27835: MINUS
27836: PUSH
27837: LD_INT 0
27839: LESS
27840: IFFALSE 27852
// min_y := 0 else
27842: LD_ADDR_VAR 0 8
27846: PUSH
27847: LD_INT 0
27849: ST_TO_ADDR
27850: GO 27868
// min_y := y - r ;
27852: LD_ADDR_VAR 0 8
27856: PUSH
27857: LD_VAR 0 3
27861: PUSH
27862: LD_VAR 0 4
27866: MINUS
27867: ST_TO_ADDR
// max_x := x + r ;
27868: LD_ADDR_VAR 0 9
27872: PUSH
27873: LD_VAR 0 2
27877: PUSH
27878: LD_VAR 0 4
27882: PLUS
27883: ST_TO_ADDR
// max_y := y + r ;
27884: LD_ADDR_VAR 0 10
27888: PUSH
27889: LD_VAR 0 3
27893: PUSH
27894: LD_VAR 0 4
27898: PLUS
27899: ST_TO_ADDR
// for _x = min_x to max_x do
27900: LD_ADDR_VAR 0 11
27904: PUSH
27905: DOUBLE
27906: LD_VAR 0 7
27910: DEC
27911: ST_TO_ADDR
27912: LD_VAR 0 9
27916: PUSH
27917: FOR_TO
27918: IFFALSE 28035
// for _y = min_y to max_y do
27920: LD_ADDR_VAR 0 12
27924: PUSH
27925: DOUBLE
27926: LD_VAR 0 8
27930: DEC
27931: ST_TO_ADDR
27932: LD_VAR 0 10
27936: PUSH
27937: FOR_TO
27938: IFFALSE 28031
// begin if not ValidHex ( _x , _y ) then
27940: LD_VAR 0 11
27944: PPUSH
27945: LD_VAR 0 12
27949: PPUSH
27950: CALL_OW 488
27954: NOT
27955: IFFALSE 27959
// continue ;
27957: GO 27937
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27959: LD_VAR 0 11
27963: PPUSH
27964: LD_VAR 0 12
27968: PPUSH
27969: CALL_OW 351
27973: PUSH
27974: LD_VAR 0 11
27978: PPUSH
27979: LD_VAR 0 12
27983: PPUSH
27984: CALL_OW 554
27988: AND
27989: IFFALSE 28029
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27991: LD_ADDR_VAR 0 13
27995: PUSH
27996: LD_VAR 0 13
28000: PPUSH
28001: LD_VAR 0 13
28005: PUSH
28006: LD_INT 1
28008: PLUS
28009: PPUSH
28010: LD_VAR 0 11
28014: PUSH
28015: LD_VAR 0 12
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PPUSH
28024: CALL_OW 2
28028: ST_TO_ADDR
// end ;
28029: GO 27937
28031: POP
28032: POP
28033: GO 27917
28035: POP
28036: POP
// if not list then
28037: LD_VAR 0 13
28041: NOT
28042: IFFALSE 28046
// exit ;
28044: GO 28117
// for i in list do
28046: LD_ADDR_VAR 0 6
28050: PUSH
28051: LD_VAR 0 13
28055: PUSH
28056: FOR_IN
28057: IFFALSE 28115
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28059: LD_VAR 0 1
28063: PPUSH
28064: LD_STRING M
28066: PUSH
28067: LD_VAR 0 6
28071: PUSH
28072: LD_INT 1
28074: ARRAY
28075: PUSH
28076: LD_VAR 0 6
28080: PUSH
28081: LD_INT 2
28083: ARRAY
28084: PUSH
28085: LD_INT 0
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: PUSH
28106: EMPTY
28107: LIST
28108: PPUSH
28109: CALL_OW 447
28113: GO 28056
28115: POP
28116: POP
// end ;
28117: LD_VAR 0 5
28121: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28122: LD_EXP 100
28126: NOT
28127: IFFALSE 28177
28129: GO 28131
28131: DISABLE
// begin initHack := true ;
28132: LD_ADDR_EXP 100
28136: PUSH
28137: LD_INT 1
28139: ST_TO_ADDR
// hackTanks := [ ] ;
28140: LD_ADDR_EXP 101
28144: PUSH
28145: EMPTY
28146: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28147: LD_ADDR_EXP 102
28151: PUSH
28152: EMPTY
28153: ST_TO_ADDR
// hackLimit := 3 ;
28154: LD_ADDR_EXP 103
28158: PUSH
28159: LD_INT 3
28161: ST_TO_ADDR
// hackDist := 12 ;
28162: LD_ADDR_EXP 104
28166: PUSH
28167: LD_INT 12
28169: ST_TO_ADDR
// hackCounter := [ ] ;
28170: LD_ADDR_EXP 105
28174: PUSH
28175: EMPTY
28176: ST_TO_ADDR
// end ;
28177: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28178: LD_EXP 100
28182: PUSH
28183: LD_INT 34
28185: PUSH
28186: LD_EXP 23
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PPUSH
28195: CALL_OW 69
28199: AND
28200: IFFALSE 28455
28202: GO 28204
28204: DISABLE
28205: LD_INT 0
28207: PPUSH
28208: PPUSH
// begin enable ;
28209: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28210: LD_ADDR_VAR 0 1
28214: PUSH
28215: LD_INT 34
28217: PUSH
28218: LD_EXP 23
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PPUSH
28227: CALL_OW 69
28231: PUSH
28232: FOR_IN
28233: IFFALSE 28453
// begin if not i in hackTanks then
28235: LD_VAR 0 1
28239: PUSH
28240: LD_EXP 101
28244: IN
28245: NOT
28246: IFFALSE 28329
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28248: LD_ADDR_EXP 101
28252: PUSH
28253: LD_EXP 101
28257: PPUSH
28258: LD_EXP 101
28262: PUSH
28263: LD_INT 1
28265: PLUS
28266: PPUSH
28267: LD_VAR 0 1
28271: PPUSH
28272: CALL_OW 1
28276: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28277: LD_ADDR_EXP 102
28281: PUSH
28282: LD_EXP 102
28286: PPUSH
28287: LD_EXP 102
28291: PUSH
28292: LD_INT 1
28294: PLUS
28295: PPUSH
28296: EMPTY
28297: PPUSH
28298: CALL_OW 1
28302: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28303: LD_ADDR_EXP 105
28307: PUSH
28308: LD_EXP 105
28312: PPUSH
28313: LD_EXP 105
28317: PUSH
28318: LD_INT 1
28320: PLUS
28321: PPUSH
28322: EMPTY
28323: PPUSH
28324: CALL_OW 1
28328: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28329: LD_VAR 0 1
28333: PPUSH
28334: CALL_OW 302
28338: NOT
28339: IFFALSE 28352
// begin HackUnlinkAll ( i ) ;
28341: LD_VAR 0 1
28345: PPUSH
28346: CALL 28458 0 1
// continue ;
28350: GO 28232
// end ; HackCheckCapturedStatus ( i ) ;
28352: LD_VAR 0 1
28356: PPUSH
28357: CALL 28901 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28361: LD_ADDR_VAR 0 2
28365: PUSH
28366: LD_INT 81
28368: PUSH
28369: LD_VAR 0 1
28373: PPUSH
28374: CALL_OW 255
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 33
28385: PUSH
28386: LD_INT 3
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 91
28395: PUSH
28396: LD_VAR 0 1
28400: PUSH
28401: LD_EXP 104
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 50
28413: PUSH
28414: EMPTY
28415: LIST
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: PPUSH
28423: CALL_OW 69
28427: ST_TO_ADDR
// if not tmp then
28428: LD_VAR 0 2
28432: NOT
28433: IFFALSE 28437
// continue ;
28435: GO 28232
// HackLink ( i , tmp ) ;
28437: LD_VAR 0 1
28441: PPUSH
28442: LD_VAR 0 2
28446: PPUSH
28447: CALL 28594 0 2
// end ;
28451: GO 28232
28453: POP
28454: POP
// end ;
28455: PPOPN 2
28457: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28458: LD_INT 0
28460: PPUSH
28461: PPUSH
28462: PPUSH
// if not hack in hackTanks then
28463: LD_VAR 0 1
28467: PUSH
28468: LD_EXP 101
28472: IN
28473: NOT
28474: IFFALSE 28478
// exit ;
28476: GO 28589
// index := GetElementIndex ( hackTanks , hack ) ;
28478: LD_ADDR_VAR 0 4
28482: PUSH
28483: LD_EXP 101
28487: PPUSH
28488: LD_VAR 0 1
28492: PPUSH
28493: CALL 36063 0 2
28497: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28498: LD_EXP 102
28502: PUSH
28503: LD_VAR 0 4
28507: ARRAY
28508: IFFALSE 28589
// begin for i in hackTanksCaptured [ index ] do
28510: LD_ADDR_VAR 0 3
28514: PUSH
28515: LD_EXP 102
28519: PUSH
28520: LD_VAR 0 4
28524: ARRAY
28525: PUSH
28526: FOR_IN
28527: IFFALSE 28553
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28529: LD_VAR 0 3
28533: PUSH
28534: LD_INT 1
28536: ARRAY
28537: PPUSH
28538: LD_VAR 0 3
28542: PUSH
28543: LD_INT 2
28545: ARRAY
28546: PPUSH
28547: CALL_OW 235
28551: GO 28526
28553: POP
28554: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28555: LD_ADDR_EXP 102
28559: PUSH
28560: LD_EXP 102
28564: PPUSH
28565: LD_VAR 0 4
28569: PPUSH
28570: EMPTY
28571: PPUSH
28572: CALL_OW 1
28576: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28577: LD_VAR 0 1
28581: PPUSH
28582: LD_INT 0
28584: PPUSH
28585: CALL_OW 505
// end ; end ;
28589: LD_VAR 0 2
28593: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28594: LD_INT 0
28596: PPUSH
28597: PPUSH
28598: PPUSH
// if not hack in hackTanks or not vehicles then
28599: LD_VAR 0 1
28603: PUSH
28604: LD_EXP 101
28608: IN
28609: NOT
28610: PUSH
28611: LD_VAR 0 2
28615: NOT
28616: OR
28617: IFFALSE 28621
// exit ;
28619: GO 28896
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28621: LD_ADDR_VAR 0 2
28625: PUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: LD_VAR 0 2
28635: PPUSH
28636: LD_INT 1
28638: PPUSH
28639: LD_INT 1
28641: PPUSH
28642: CALL 36713 0 4
28646: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28647: LD_ADDR_VAR 0 5
28651: PUSH
28652: LD_EXP 101
28656: PPUSH
28657: LD_VAR 0 1
28661: PPUSH
28662: CALL 36063 0 2
28666: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28667: LD_EXP 102
28671: PUSH
28672: LD_VAR 0 5
28676: ARRAY
28677: PUSH
28678: LD_EXP 103
28682: LESS
28683: IFFALSE 28872
// begin for i := 1 to vehicles do
28685: LD_ADDR_VAR 0 4
28689: PUSH
28690: DOUBLE
28691: LD_INT 1
28693: DEC
28694: ST_TO_ADDR
28695: LD_VAR 0 2
28699: PUSH
28700: FOR_TO
28701: IFFALSE 28870
// begin if hackTanksCaptured [ index ] = hackLimit then
28703: LD_EXP 102
28707: PUSH
28708: LD_VAR 0 5
28712: ARRAY
28713: PUSH
28714: LD_EXP 103
28718: EQUAL
28719: IFFALSE 28723
// break ;
28721: GO 28870
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28723: LD_ADDR_EXP 105
28727: PUSH
28728: LD_EXP 105
28732: PPUSH
28733: LD_VAR 0 5
28737: PPUSH
28738: LD_EXP 105
28742: PUSH
28743: LD_VAR 0 5
28747: ARRAY
28748: PUSH
28749: LD_INT 1
28751: PLUS
28752: PPUSH
28753: CALL_OW 1
28757: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28758: LD_ADDR_EXP 102
28762: PUSH
28763: LD_EXP 102
28767: PPUSH
28768: LD_VAR 0 5
28772: PUSH
28773: LD_EXP 102
28777: PUSH
28778: LD_VAR 0 5
28782: ARRAY
28783: PUSH
28784: LD_INT 1
28786: PLUS
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PPUSH
28792: LD_VAR 0 2
28796: PUSH
28797: LD_VAR 0 4
28801: ARRAY
28802: PUSH
28803: LD_VAR 0 2
28807: PUSH
28808: LD_VAR 0 4
28812: ARRAY
28813: PPUSH
28814: CALL_OW 255
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PPUSH
28823: CALL 36278 0 3
28827: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28828: LD_VAR 0 2
28832: PUSH
28833: LD_VAR 0 4
28837: ARRAY
28838: PPUSH
28839: LD_VAR 0 1
28843: PPUSH
28844: CALL_OW 255
28848: PPUSH
28849: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28853: LD_VAR 0 2
28857: PUSH
28858: LD_VAR 0 4
28862: ARRAY
28863: PPUSH
28864: CALL_OW 141
// end ;
28868: GO 28700
28870: POP
28871: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28872: LD_VAR 0 1
28876: PPUSH
28877: LD_EXP 102
28881: PUSH
28882: LD_VAR 0 5
28886: ARRAY
28887: PUSH
28888: LD_INT 0
28890: PLUS
28891: PPUSH
28892: CALL_OW 505
// end ;
28896: LD_VAR 0 3
28900: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28901: LD_INT 0
28903: PPUSH
28904: PPUSH
28905: PPUSH
28906: PPUSH
// if not hack in hackTanks then
28907: LD_VAR 0 1
28911: PUSH
28912: LD_EXP 101
28916: IN
28917: NOT
28918: IFFALSE 28922
// exit ;
28920: GO 29162
// index := GetElementIndex ( hackTanks , hack ) ;
28922: LD_ADDR_VAR 0 4
28926: PUSH
28927: LD_EXP 101
28931: PPUSH
28932: LD_VAR 0 1
28936: PPUSH
28937: CALL 36063 0 2
28941: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28942: LD_ADDR_VAR 0 3
28946: PUSH
28947: DOUBLE
28948: LD_EXP 102
28952: PUSH
28953: LD_VAR 0 4
28957: ARRAY
28958: INC
28959: ST_TO_ADDR
28960: LD_INT 1
28962: PUSH
28963: FOR_DOWNTO
28964: IFFALSE 29136
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28966: LD_ADDR_VAR 0 5
28970: PUSH
28971: LD_EXP 102
28975: PUSH
28976: LD_VAR 0 4
28980: ARRAY
28981: PUSH
28982: LD_VAR 0 3
28986: ARRAY
28987: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28988: LD_VAR 0 5
28992: PUSH
28993: LD_INT 1
28995: ARRAY
28996: PPUSH
28997: CALL_OW 302
29001: NOT
29002: PUSH
29003: LD_VAR 0 5
29007: PUSH
29008: LD_INT 1
29010: ARRAY
29011: PPUSH
29012: CALL_OW 255
29016: PUSH
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL_OW 255
29026: NONEQUAL
29027: OR
29028: IFFALSE 29134
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29030: LD_VAR 0 5
29034: PUSH
29035: LD_INT 1
29037: ARRAY
29038: PPUSH
29039: CALL_OW 305
29043: PUSH
29044: LD_VAR 0 5
29048: PUSH
29049: LD_INT 1
29051: ARRAY
29052: PPUSH
29053: CALL_OW 255
29057: PUSH
29058: LD_VAR 0 1
29062: PPUSH
29063: CALL_OW 255
29067: EQUAL
29068: AND
29069: IFFALSE 29093
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29071: LD_VAR 0 5
29075: PUSH
29076: LD_INT 1
29078: ARRAY
29079: PPUSH
29080: LD_VAR 0 5
29084: PUSH
29085: LD_INT 2
29087: ARRAY
29088: PPUSH
29089: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29093: LD_ADDR_EXP 102
29097: PUSH
29098: LD_EXP 102
29102: PPUSH
29103: LD_VAR 0 4
29107: PPUSH
29108: LD_EXP 102
29112: PUSH
29113: LD_VAR 0 4
29117: ARRAY
29118: PPUSH
29119: LD_VAR 0 3
29123: PPUSH
29124: CALL_OW 3
29128: PPUSH
29129: CALL_OW 1
29133: ST_TO_ADDR
// end ; end ;
29134: GO 28963
29136: POP
29137: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29138: LD_VAR 0 1
29142: PPUSH
29143: LD_EXP 102
29147: PUSH
29148: LD_VAR 0 4
29152: ARRAY
29153: PUSH
29154: LD_INT 0
29156: PLUS
29157: PPUSH
29158: CALL_OW 505
// end ;
29162: LD_VAR 0 2
29166: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29167: LD_INT 0
29169: PPUSH
29170: PPUSH
29171: PPUSH
29172: PPUSH
// if not hack in hackTanks then
29173: LD_VAR 0 1
29177: PUSH
29178: LD_EXP 101
29182: IN
29183: NOT
29184: IFFALSE 29188
// exit ;
29186: GO 29273
// index := GetElementIndex ( hackTanks , hack ) ;
29188: LD_ADDR_VAR 0 5
29192: PUSH
29193: LD_EXP 101
29197: PPUSH
29198: LD_VAR 0 1
29202: PPUSH
29203: CALL 36063 0 2
29207: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29208: LD_ADDR_VAR 0 4
29212: PUSH
29213: DOUBLE
29214: LD_INT 1
29216: DEC
29217: ST_TO_ADDR
29218: LD_EXP 102
29222: PUSH
29223: LD_VAR 0 5
29227: ARRAY
29228: PUSH
29229: FOR_TO
29230: IFFALSE 29271
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29232: LD_EXP 102
29236: PUSH
29237: LD_VAR 0 5
29241: ARRAY
29242: PUSH
29243: LD_VAR 0 4
29247: ARRAY
29248: PUSH
29249: LD_INT 1
29251: ARRAY
29252: PUSH
29253: LD_VAR 0 2
29257: EQUAL
29258: IFFALSE 29269
// KillUnit ( vehicle ) ;
29260: LD_VAR 0 2
29264: PPUSH
29265: CALL_OW 66
29269: GO 29229
29271: POP
29272: POP
// end ;
29273: LD_VAR 0 3
29277: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29278: LD_EXP 106
29282: NOT
29283: IFFALSE 29318
29285: GO 29287
29287: DISABLE
// begin initMiner := true ;
29288: LD_ADDR_EXP 106
29292: PUSH
29293: LD_INT 1
29295: ST_TO_ADDR
// minersList := [ ] ;
29296: LD_ADDR_EXP 107
29300: PUSH
29301: EMPTY
29302: ST_TO_ADDR
// minerMinesList := [ ] ;
29303: LD_ADDR_EXP 108
29307: PUSH
29308: EMPTY
29309: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29310: LD_ADDR_EXP 109
29314: PUSH
29315: LD_INT 5
29317: ST_TO_ADDR
// end ;
29318: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29319: LD_EXP 106
29323: PUSH
29324: LD_INT 34
29326: PUSH
29327: LD_EXP 28
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PPUSH
29336: CALL_OW 69
29340: AND
29341: IFFALSE 29804
29343: GO 29345
29345: DISABLE
29346: LD_INT 0
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
// begin enable ;
29352: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29353: LD_ADDR_VAR 0 1
29357: PUSH
29358: LD_INT 34
29360: PUSH
29361: LD_EXP 28
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PPUSH
29370: CALL_OW 69
29374: PUSH
29375: FOR_IN
29376: IFFALSE 29448
// begin if not i in minersList then
29378: LD_VAR 0 1
29382: PUSH
29383: LD_EXP 107
29387: IN
29388: NOT
29389: IFFALSE 29446
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29391: LD_ADDR_EXP 107
29395: PUSH
29396: LD_EXP 107
29400: PPUSH
29401: LD_EXP 107
29405: PUSH
29406: LD_INT 1
29408: PLUS
29409: PPUSH
29410: LD_VAR 0 1
29414: PPUSH
29415: CALL_OW 1
29419: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29420: LD_ADDR_EXP 108
29424: PUSH
29425: LD_EXP 108
29429: PPUSH
29430: LD_EXP 108
29434: PUSH
29435: LD_INT 1
29437: PLUS
29438: PPUSH
29439: EMPTY
29440: PPUSH
29441: CALL_OW 1
29445: ST_TO_ADDR
// end end ;
29446: GO 29375
29448: POP
29449: POP
// for i := minerMinesList downto 1 do
29450: LD_ADDR_VAR 0 1
29454: PUSH
29455: DOUBLE
29456: LD_EXP 108
29460: INC
29461: ST_TO_ADDR
29462: LD_INT 1
29464: PUSH
29465: FOR_DOWNTO
29466: IFFALSE 29802
// begin if IsLive ( minersList [ i ] ) then
29468: LD_EXP 107
29472: PUSH
29473: LD_VAR 0 1
29477: ARRAY
29478: PPUSH
29479: CALL_OW 300
29483: IFFALSE 29511
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29485: LD_EXP 107
29489: PUSH
29490: LD_VAR 0 1
29494: ARRAY
29495: PPUSH
29496: LD_EXP 108
29500: PUSH
29501: LD_VAR 0 1
29505: ARRAY
29506: PPUSH
29507: CALL_OW 505
// if not minerMinesList [ i ] then
29511: LD_EXP 108
29515: PUSH
29516: LD_VAR 0 1
29520: ARRAY
29521: NOT
29522: IFFALSE 29526
// continue ;
29524: GO 29465
// for j := minerMinesList [ i ] downto 1 do
29526: LD_ADDR_VAR 0 2
29530: PUSH
29531: DOUBLE
29532: LD_EXP 108
29536: PUSH
29537: LD_VAR 0 1
29541: ARRAY
29542: INC
29543: ST_TO_ADDR
29544: LD_INT 1
29546: PUSH
29547: FOR_DOWNTO
29548: IFFALSE 29798
// begin side := GetSide ( minersList [ i ] ) ;
29550: LD_ADDR_VAR 0 3
29554: PUSH
29555: LD_EXP 107
29559: PUSH
29560: LD_VAR 0 1
29564: ARRAY
29565: PPUSH
29566: CALL_OW 255
29570: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29571: LD_ADDR_VAR 0 4
29575: PUSH
29576: LD_EXP 108
29580: PUSH
29581: LD_VAR 0 1
29585: ARRAY
29586: PUSH
29587: LD_VAR 0 2
29591: ARRAY
29592: PUSH
29593: LD_INT 1
29595: ARRAY
29596: PPUSH
29597: LD_EXP 108
29601: PUSH
29602: LD_VAR 0 1
29606: ARRAY
29607: PUSH
29608: LD_VAR 0 2
29612: ARRAY
29613: PUSH
29614: LD_INT 2
29616: ARRAY
29617: PPUSH
29618: CALL_OW 428
29622: ST_TO_ADDR
// if not tmp then
29623: LD_VAR 0 4
29627: NOT
29628: IFFALSE 29632
// continue ;
29630: GO 29547
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29632: LD_VAR 0 4
29636: PUSH
29637: LD_INT 81
29639: PUSH
29640: LD_VAR 0 3
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PPUSH
29649: CALL_OW 69
29653: IN
29654: PUSH
29655: LD_EXP 108
29659: PUSH
29660: LD_VAR 0 1
29664: ARRAY
29665: PUSH
29666: LD_VAR 0 2
29670: ARRAY
29671: PUSH
29672: LD_INT 1
29674: ARRAY
29675: PPUSH
29676: LD_EXP 108
29680: PUSH
29681: LD_VAR 0 1
29685: ARRAY
29686: PUSH
29687: LD_VAR 0 2
29691: ARRAY
29692: PUSH
29693: LD_INT 2
29695: ARRAY
29696: PPUSH
29697: CALL_OW 458
29701: AND
29702: IFFALSE 29796
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29704: LD_EXP 108
29708: PUSH
29709: LD_VAR 0 1
29713: ARRAY
29714: PUSH
29715: LD_VAR 0 2
29719: ARRAY
29720: PUSH
29721: LD_INT 1
29723: ARRAY
29724: PPUSH
29725: LD_EXP 108
29729: PUSH
29730: LD_VAR 0 1
29734: ARRAY
29735: PUSH
29736: LD_VAR 0 2
29740: ARRAY
29741: PUSH
29742: LD_INT 2
29744: ARRAY
29745: PPUSH
29746: LD_VAR 0 3
29750: PPUSH
29751: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29755: LD_ADDR_EXP 108
29759: PUSH
29760: LD_EXP 108
29764: PPUSH
29765: LD_VAR 0 1
29769: PPUSH
29770: LD_EXP 108
29774: PUSH
29775: LD_VAR 0 1
29779: ARRAY
29780: PPUSH
29781: LD_VAR 0 2
29785: PPUSH
29786: CALL_OW 3
29790: PPUSH
29791: CALL_OW 1
29795: ST_TO_ADDR
// end ; end ;
29796: GO 29547
29798: POP
29799: POP
// end ;
29800: GO 29465
29802: POP
29803: POP
// end ;
29804: PPOPN 4
29806: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29807: LD_INT 0
29809: PPUSH
29810: PPUSH
// result := false ;
29811: LD_ADDR_VAR 0 4
29815: PUSH
29816: LD_INT 0
29818: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29819: LD_VAR 0 1
29823: PPUSH
29824: CALL_OW 264
29828: PUSH
29829: LD_EXP 28
29833: EQUAL
29834: NOT
29835: IFFALSE 29839
// exit ;
29837: GO 30079
// index := GetElementIndex ( minersList , unit ) ;
29839: LD_ADDR_VAR 0 5
29843: PUSH
29844: LD_EXP 107
29848: PPUSH
29849: LD_VAR 0 1
29853: PPUSH
29854: CALL 36063 0 2
29858: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29859: LD_EXP 108
29863: PUSH
29864: LD_VAR 0 5
29868: ARRAY
29869: PUSH
29870: LD_EXP 109
29874: GREATEREQUAL
29875: IFFALSE 29879
// exit ;
29877: GO 30079
// ComMoveXY ( unit , x , y ) ;
29879: LD_VAR 0 1
29883: PPUSH
29884: LD_VAR 0 2
29888: PPUSH
29889: LD_VAR 0 3
29893: PPUSH
29894: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29898: LD_INT 35
29900: PPUSH
29901: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29905: LD_VAR 0 1
29909: PPUSH
29910: LD_VAR 0 2
29914: PPUSH
29915: LD_VAR 0 3
29919: PPUSH
29920: CALL 66782 0 3
29924: NOT
29925: PUSH
29926: LD_VAR 0 1
29930: PPUSH
29931: CALL_OW 314
29935: AND
29936: IFFALSE 29940
// exit ;
29938: GO 30079
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29940: LD_VAR 0 2
29944: PPUSH
29945: LD_VAR 0 3
29949: PPUSH
29950: CALL_OW 428
29954: PUSH
29955: LD_VAR 0 1
29959: EQUAL
29960: PUSH
29961: LD_VAR 0 1
29965: PPUSH
29966: CALL_OW 314
29970: NOT
29971: AND
29972: IFFALSE 29898
// PlaySoundXY ( x , y , PlantMine ) ;
29974: LD_VAR 0 2
29978: PPUSH
29979: LD_VAR 0 3
29983: PPUSH
29984: LD_STRING PlantMine
29986: PPUSH
29987: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29991: LD_VAR 0 2
29995: PPUSH
29996: LD_VAR 0 3
30000: PPUSH
30001: LD_VAR 0 1
30005: PPUSH
30006: CALL_OW 255
30010: PPUSH
30011: LD_INT 0
30013: PPUSH
30014: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30018: LD_ADDR_EXP 108
30022: PUSH
30023: LD_EXP 108
30027: PPUSH
30028: LD_VAR 0 5
30032: PUSH
30033: LD_EXP 108
30037: PUSH
30038: LD_VAR 0 5
30042: ARRAY
30043: PUSH
30044: LD_INT 1
30046: PLUS
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PPUSH
30052: LD_VAR 0 2
30056: PUSH
30057: LD_VAR 0 3
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PPUSH
30066: CALL 36278 0 3
30070: ST_TO_ADDR
// result := true ;
30071: LD_ADDR_VAR 0 4
30075: PUSH
30076: LD_INT 1
30078: ST_TO_ADDR
// end ;
30079: LD_VAR 0 4
30083: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30084: LD_INT 0
30086: PPUSH
30087: PPUSH
30088: PPUSH
// if not unit in minersList then
30089: LD_VAR 0 1
30093: PUSH
30094: LD_EXP 107
30098: IN
30099: NOT
30100: IFFALSE 30104
// exit ;
30102: GO 30496
// index := GetElementIndex ( minersList , unit ) ;
30104: LD_ADDR_VAR 0 6
30108: PUSH
30109: LD_EXP 107
30113: PPUSH
30114: LD_VAR 0 1
30118: PPUSH
30119: CALL 36063 0 2
30123: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30124: LD_ADDR_VAR 0 5
30128: PUSH
30129: DOUBLE
30130: LD_EXP 108
30134: PUSH
30135: LD_VAR 0 6
30139: ARRAY
30140: INC
30141: ST_TO_ADDR
30142: LD_INT 1
30144: PUSH
30145: FOR_DOWNTO
30146: IFFALSE 30307
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30148: LD_EXP 108
30152: PUSH
30153: LD_VAR 0 6
30157: ARRAY
30158: PUSH
30159: LD_VAR 0 5
30163: ARRAY
30164: PUSH
30165: LD_INT 1
30167: ARRAY
30168: PUSH
30169: LD_VAR 0 2
30173: EQUAL
30174: PUSH
30175: LD_EXP 108
30179: PUSH
30180: LD_VAR 0 6
30184: ARRAY
30185: PUSH
30186: LD_VAR 0 5
30190: ARRAY
30191: PUSH
30192: LD_INT 2
30194: ARRAY
30195: PUSH
30196: LD_VAR 0 3
30200: EQUAL
30201: AND
30202: IFFALSE 30305
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30204: LD_EXP 108
30208: PUSH
30209: LD_VAR 0 6
30213: ARRAY
30214: PUSH
30215: LD_VAR 0 5
30219: ARRAY
30220: PUSH
30221: LD_INT 1
30223: ARRAY
30224: PPUSH
30225: LD_EXP 108
30229: PUSH
30230: LD_VAR 0 6
30234: ARRAY
30235: PUSH
30236: LD_VAR 0 5
30240: ARRAY
30241: PUSH
30242: LD_INT 2
30244: ARRAY
30245: PPUSH
30246: LD_VAR 0 1
30250: PPUSH
30251: CALL_OW 255
30255: PPUSH
30256: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30260: LD_ADDR_EXP 108
30264: PUSH
30265: LD_EXP 108
30269: PPUSH
30270: LD_VAR 0 6
30274: PPUSH
30275: LD_EXP 108
30279: PUSH
30280: LD_VAR 0 6
30284: ARRAY
30285: PPUSH
30286: LD_VAR 0 5
30290: PPUSH
30291: CALL_OW 3
30295: PPUSH
30296: CALL_OW 1
30300: ST_TO_ADDR
// exit ;
30301: POP
30302: POP
30303: GO 30496
// end ; end ;
30305: GO 30145
30307: POP
30308: POP
// for i := minerMinesList [ index ] downto 1 do
30309: LD_ADDR_VAR 0 5
30313: PUSH
30314: DOUBLE
30315: LD_EXP 108
30319: PUSH
30320: LD_VAR 0 6
30324: ARRAY
30325: INC
30326: ST_TO_ADDR
30327: LD_INT 1
30329: PUSH
30330: FOR_DOWNTO
30331: IFFALSE 30494
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30333: LD_EXP 108
30337: PUSH
30338: LD_VAR 0 6
30342: ARRAY
30343: PUSH
30344: LD_VAR 0 5
30348: ARRAY
30349: PUSH
30350: LD_INT 1
30352: ARRAY
30353: PPUSH
30354: LD_EXP 108
30358: PUSH
30359: LD_VAR 0 6
30363: ARRAY
30364: PUSH
30365: LD_VAR 0 5
30369: ARRAY
30370: PUSH
30371: LD_INT 2
30373: ARRAY
30374: PPUSH
30375: LD_VAR 0 2
30379: PPUSH
30380: LD_VAR 0 3
30384: PPUSH
30385: CALL_OW 298
30389: PUSH
30390: LD_INT 6
30392: LESS
30393: IFFALSE 30492
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30395: LD_EXP 108
30399: PUSH
30400: LD_VAR 0 6
30404: ARRAY
30405: PUSH
30406: LD_VAR 0 5
30410: ARRAY
30411: PUSH
30412: LD_INT 1
30414: ARRAY
30415: PPUSH
30416: LD_EXP 108
30420: PUSH
30421: LD_VAR 0 6
30425: ARRAY
30426: PUSH
30427: LD_VAR 0 5
30431: ARRAY
30432: PUSH
30433: LD_INT 2
30435: ARRAY
30436: PPUSH
30437: LD_VAR 0 1
30441: PPUSH
30442: CALL_OW 255
30446: PPUSH
30447: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30451: LD_ADDR_EXP 108
30455: PUSH
30456: LD_EXP 108
30460: PPUSH
30461: LD_VAR 0 6
30465: PPUSH
30466: LD_EXP 108
30470: PUSH
30471: LD_VAR 0 6
30475: ARRAY
30476: PPUSH
30477: LD_VAR 0 5
30481: PPUSH
30482: CALL_OW 3
30486: PPUSH
30487: CALL_OW 1
30491: ST_TO_ADDR
// end ; end ;
30492: GO 30330
30494: POP
30495: POP
// end ;
30496: LD_VAR 0 4
30500: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30501: LD_INT 0
30503: PPUSH
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
30511: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30512: LD_VAR 0 1
30516: PPUSH
30517: CALL_OW 264
30521: PUSH
30522: LD_EXP 28
30526: EQUAL
30527: NOT
30528: PUSH
30529: LD_VAR 0 1
30533: PUSH
30534: LD_EXP 107
30538: IN
30539: NOT
30540: OR
30541: IFFALSE 30545
// exit ;
30543: GO 30867
// index := GetElementIndex ( minersList , unit ) ;
30545: LD_ADDR_VAR 0 6
30549: PUSH
30550: LD_EXP 107
30554: PPUSH
30555: LD_VAR 0 1
30559: PPUSH
30560: CALL 36063 0 2
30564: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30565: LD_ADDR_VAR 0 8
30569: PUSH
30570: LD_EXP 109
30574: PUSH
30575: LD_EXP 108
30579: PUSH
30580: LD_VAR 0 6
30584: ARRAY
30585: MINUS
30586: ST_TO_ADDR
// if not minesFreeAmount then
30587: LD_VAR 0 8
30591: NOT
30592: IFFALSE 30596
// exit ;
30594: GO 30867
// tmp := [ ] ;
30596: LD_ADDR_VAR 0 7
30600: PUSH
30601: EMPTY
30602: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30603: LD_ADDR_VAR 0 5
30607: PUSH
30608: DOUBLE
30609: LD_INT 1
30611: DEC
30612: ST_TO_ADDR
30613: LD_VAR 0 8
30617: PUSH
30618: FOR_TO
30619: IFFALSE 30814
// begin _d := rand ( 0 , 5 ) ;
30621: LD_ADDR_VAR 0 11
30625: PUSH
30626: LD_INT 0
30628: PPUSH
30629: LD_INT 5
30631: PPUSH
30632: CALL_OW 12
30636: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30637: LD_ADDR_VAR 0 12
30641: PUSH
30642: LD_INT 2
30644: PPUSH
30645: LD_INT 6
30647: PPUSH
30648: CALL_OW 12
30652: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30653: LD_ADDR_VAR 0 9
30657: PUSH
30658: LD_VAR 0 2
30662: PPUSH
30663: LD_VAR 0 11
30667: PPUSH
30668: LD_VAR 0 12
30672: PPUSH
30673: CALL_OW 272
30677: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30678: LD_ADDR_VAR 0 10
30682: PUSH
30683: LD_VAR 0 3
30687: PPUSH
30688: LD_VAR 0 11
30692: PPUSH
30693: LD_VAR 0 12
30697: PPUSH
30698: CALL_OW 273
30702: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30703: LD_VAR 0 9
30707: PPUSH
30708: LD_VAR 0 10
30712: PPUSH
30713: CALL_OW 488
30717: PUSH
30718: LD_VAR 0 9
30722: PUSH
30723: LD_VAR 0 10
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_VAR 0 7
30736: IN
30737: NOT
30738: AND
30739: PUSH
30740: LD_VAR 0 9
30744: PPUSH
30745: LD_VAR 0 10
30749: PPUSH
30750: CALL_OW 458
30754: NOT
30755: AND
30756: IFFALSE 30798
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30758: LD_ADDR_VAR 0 7
30762: PUSH
30763: LD_VAR 0 7
30767: PPUSH
30768: LD_VAR 0 7
30772: PUSH
30773: LD_INT 1
30775: PLUS
30776: PPUSH
30777: LD_VAR 0 9
30781: PUSH
30782: LD_VAR 0 10
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PPUSH
30791: CALL_OW 1
30795: ST_TO_ADDR
30796: GO 30812
// i := i - 1 ;
30798: LD_ADDR_VAR 0 5
30802: PUSH
30803: LD_VAR 0 5
30807: PUSH
30808: LD_INT 1
30810: MINUS
30811: ST_TO_ADDR
// end ;
30812: GO 30618
30814: POP
30815: POP
// for i in tmp do
30816: LD_ADDR_VAR 0 5
30820: PUSH
30821: LD_VAR 0 7
30825: PUSH
30826: FOR_IN
30827: IFFALSE 30865
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30829: LD_VAR 0 1
30833: PPUSH
30834: LD_VAR 0 5
30838: PUSH
30839: LD_INT 1
30841: ARRAY
30842: PPUSH
30843: LD_VAR 0 5
30847: PUSH
30848: LD_INT 2
30850: ARRAY
30851: PPUSH
30852: CALL 29807 0 3
30856: NOT
30857: IFFALSE 30863
// exit ;
30859: POP
30860: POP
30861: GO 30867
30863: GO 30826
30865: POP
30866: POP
// end ;
30867: LD_VAR 0 4
30871: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30872: LD_INT 0
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
// if not GetClass ( unit ) = class_sniper then
30881: LD_VAR 0 1
30885: PPUSH
30886: CALL_OW 257
30890: PUSH
30891: LD_INT 5
30893: EQUAL
30894: NOT
30895: IFFALSE 30899
// exit ;
30897: GO 31287
// dist := 8 ;
30899: LD_ADDR_VAR 0 5
30903: PUSH
30904: LD_INT 8
30906: ST_TO_ADDR
// viewRange := 12 ;
30907: LD_ADDR_VAR 0 7
30911: PUSH
30912: LD_INT 12
30914: ST_TO_ADDR
// side := GetSide ( unit ) ;
30915: LD_ADDR_VAR 0 6
30919: PUSH
30920: LD_VAR 0 1
30924: PPUSH
30925: CALL_OW 255
30929: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30930: LD_INT 61
30932: PPUSH
30933: LD_VAR 0 6
30937: PPUSH
30938: CALL_OW 321
30942: PUSH
30943: LD_INT 2
30945: EQUAL
30946: IFFALSE 30956
// viewRange := 16 ;
30948: LD_ADDR_VAR 0 7
30952: PUSH
30953: LD_INT 16
30955: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30956: LD_VAR 0 1
30960: PPUSH
30961: LD_VAR 0 2
30965: PPUSH
30966: LD_VAR 0 3
30970: PPUSH
30971: CALL_OW 297
30975: PUSH
30976: LD_VAR 0 5
30980: GREATER
30981: IFFALSE 31060
// begin ComMoveXY ( unit , x , y ) ;
30983: LD_VAR 0 1
30987: PPUSH
30988: LD_VAR 0 2
30992: PPUSH
30993: LD_VAR 0 3
30997: PPUSH
30998: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31002: LD_INT 35
31004: PPUSH
31005: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31009: LD_VAR 0 1
31013: PPUSH
31014: LD_VAR 0 2
31018: PPUSH
31019: LD_VAR 0 3
31023: PPUSH
31024: CALL 66782 0 3
31028: NOT
31029: IFFALSE 31033
// exit ;
31031: GO 31287
// until GetDistUnitXY ( unit , x , y ) < dist ;
31033: LD_VAR 0 1
31037: PPUSH
31038: LD_VAR 0 2
31042: PPUSH
31043: LD_VAR 0 3
31047: PPUSH
31048: CALL_OW 297
31052: PUSH
31053: LD_VAR 0 5
31057: LESS
31058: IFFALSE 31002
// end ; ComTurnXY ( unit , x , y ) ;
31060: LD_VAR 0 1
31064: PPUSH
31065: LD_VAR 0 2
31069: PPUSH
31070: LD_VAR 0 3
31074: PPUSH
31075: CALL_OW 118
// wait ( 5 ) ;
31079: LD_INT 5
31081: PPUSH
31082: CALL_OW 67
// _d := GetDir ( unit ) ;
31086: LD_ADDR_VAR 0 10
31090: PUSH
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL_OW 254
31100: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31101: LD_ADDR_VAR 0 8
31105: PUSH
31106: LD_VAR 0 1
31110: PPUSH
31111: CALL_OW 250
31115: PPUSH
31116: LD_VAR 0 10
31120: PPUSH
31121: LD_VAR 0 5
31125: PPUSH
31126: CALL_OW 272
31130: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31131: LD_ADDR_VAR 0 9
31135: PUSH
31136: LD_VAR 0 1
31140: PPUSH
31141: CALL_OW 251
31145: PPUSH
31146: LD_VAR 0 10
31150: PPUSH
31151: LD_VAR 0 5
31155: PPUSH
31156: CALL_OW 273
31160: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31161: LD_VAR 0 8
31165: PPUSH
31166: LD_VAR 0 9
31170: PPUSH
31171: CALL_OW 488
31175: NOT
31176: IFFALSE 31180
// exit ;
31178: GO 31287
// ComAnimCustom ( unit , 1 ) ;
31180: LD_VAR 0 1
31184: PPUSH
31185: LD_INT 1
31187: PPUSH
31188: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31192: LD_VAR 0 8
31196: PPUSH
31197: LD_VAR 0 9
31201: PPUSH
31202: LD_VAR 0 6
31206: PPUSH
31207: LD_VAR 0 7
31211: PPUSH
31212: CALL_OW 330
// repeat wait ( 1 ) ;
31216: LD_INT 1
31218: PPUSH
31219: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31223: LD_VAR 0 1
31227: PPUSH
31228: CALL_OW 316
31232: PUSH
31233: LD_VAR 0 1
31237: PPUSH
31238: CALL_OW 314
31242: OR
31243: PUSH
31244: LD_VAR 0 1
31248: PPUSH
31249: CALL_OW 302
31253: NOT
31254: OR
31255: PUSH
31256: LD_VAR 0 1
31260: PPUSH
31261: CALL_OW 301
31265: OR
31266: IFFALSE 31216
// RemoveSeeing ( _x , _y , side ) ;
31268: LD_VAR 0 8
31272: PPUSH
31273: LD_VAR 0 9
31277: PPUSH
31278: LD_VAR 0 6
31282: PPUSH
31283: CALL_OW 331
// end ; end_of_file
31287: LD_VAR 0 4
31291: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31292: LD_INT 0
31294: PPUSH
31295: PPUSH
// if exist_mode then
31296: LD_VAR 0 2
31300: IFFALSE 31325
// unit := CreateCharacter ( prefix & ident ) else
31302: LD_ADDR_VAR 0 5
31306: PUSH
31307: LD_VAR 0 3
31311: PUSH
31312: LD_VAR 0 1
31316: STR
31317: PPUSH
31318: CALL_OW 34
31322: ST_TO_ADDR
31323: GO 31340
// unit := NewCharacter ( ident ) ;
31325: LD_ADDR_VAR 0 5
31329: PUSH
31330: LD_VAR 0 1
31334: PPUSH
31335: CALL_OW 25
31339: ST_TO_ADDR
// result := unit ;
31340: LD_ADDR_VAR 0 4
31344: PUSH
31345: LD_VAR 0 5
31349: ST_TO_ADDR
// end ;
31350: LD_VAR 0 4
31354: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31355: LD_INT 0
31357: PPUSH
31358: PPUSH
// if not side or not nation then
31359: LD_VAR 0 1
31363: NOT
31364: PUSH
31365: LD_VAR 0 2
31369: NOT
31370: OR
31371: IFFALSE 31375
// exit ;
31373: GO 32143
// case nation of nation_american :
31375: LD_VAR 0 2
31379: PUSH
31380: LD_INT 1
31382: DOUBLE
31383: EQUAL
31384: IFTRUE 31388
31386: GO 31602
31388: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31389: LD_ADDR_VAR 0 4
31393: PUSH
31394: LD_INT 35
31396: PUSH
31397: LD_INT 45
31399: PUSH
31400: LD_INT 46
31402: PUSH
31403: LD_INT 47
31405: PUSH
31406: LD_INT 82
31408: PUSH
31409: LD_INT 83
31411: PUSH
31412: LD_INT 84
31414: PUSH
31415: LD_INT 85
31417: PUSH
31418: LD_INT 86
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: LD_INT 6
31429: PUSH
31430: LD_INT 15
31432: PUSH
31433: LD_INT 16
31435: PUSH
31436: LD_INT 7
31438: PUSH
31439: LD_INT 12
31441: PUSH
31442: LD_INT 13
31444: PUSH
31445: LD_INT 10
31447: PUSH
31448: LD_INT 14
31450: PUSH
31451: LD_INT 20
31453: PUSH
31454: LD_INT 21
31456: PUSH
31457: LD_INT 22
31459: PUSH
31460: LD_INT 25
31462: PUSH
31463: LD_INT 32
31465: PUSH
31466: LD_INT 27
31468: PUSH
31469: LD_INT 36
31471: PUSH
31472: LD_INT 69
31474: PUSH
31475: LD_INT 39
31477: PUSH
31478: LD_INT 34
31480: PUSH
31481: LD_INT 40
31483: PUSH
31484: LD_INT 48
31486: PUSH
31487: LD_INT 49
31489: PUSH
31490: LD_INT 50
31492: PUSH
31493: LD_INT 51
31495: PUSH
31496: LD_INT 52
31498: PUSH
31499: LD_INT 53
31501: PUSH
31502: LD_INT 54
31504: PUSH
31505: LD_INT 55
31507: PUSH
31508: LD_INT 56
31510: PUSH
31511: LD_INT 57
31513: PUSH
31514: LD_INT 58
31516: PUSH
31517: LD_INT 59
31519: PUSH
31520: LD_INT 60
31522: PUSH
31523: LD_INT 61
31525: PUSH
31526: LD_INT 62
31528: PUSH
31529: LD_INT 80
31531: PUSH
31532: LD_INT 82
31534: PUSH
31535: LD_INT 83
31537: PUSH
31538: LD_INT 84
31540: PUSH
31541: LD_INT 85
31543: PUSH
31544: LD_INT 86
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: ST_TO_ADDR
31600: GO 32067
31602: LD_INT 2
31604: DOUBLE
31605: EQUAL
31606: IFTRUE 31610
31608: GO 31836
31610: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31611: LD_ADDR_VAR 0 4
31615: PUSH
31616: LD_INT 35
31618: PUSH
31619: LD_INT 45
31621: PUSH
31622: LD_INT 46
31624: PUSH
31625: LD_INT 47
31627: PUSH
31628: LD_INT 82
31630: PUSH
31631: LD_INT 83
31633: PUSH
31634: LD_INT 84
31636: PUSH
31637: LD_INT 85
31639: PUSH
31640: LD_INT 87
31642: PUSH
31643: LD_INT 70
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: LD_INT 11
31651: PUSH
31652: LD_INT 3
31654: PUSH
31655: LD_INT 4
31657: PUSH
31658: LD_INT 5
31660: PUSH
31661: LD_INT 6
31663: PUSH
31664: LD_INT 15
31666: PUSH
31667: LD_INT 18
31669: PUSH
31670: LD_INT 7
31672: PUSH
31673: LD_INT 17
31675: PUSH
31676: LD_INT 8
31678: PUSH
31679: LD_INT 20
31681: PUSH
31682: LD_INT 21
31684: PUSH
31685: LD_INT 22
31687: PUSH
31688: LD_INT 72
31690: PUSH
31691: LD_INT 26
31693: PUSH
31694: LD_INT 69
31696: PUSH
31697: LD_INT 39
31699: PUSH
31700: LD_INT 40
31702: PUSH
31703: LD_INT 41
31705: PUSH
31706: LD_INT 42
31708: PUSH
31709: LD_INT 43
31711: PUSH
31712: LD_INT 48
31714: PUSH
31715: LD_INT 49
31717: PUSH
31718: LD_INT 50
31720: PUSH
31721: LD_INT 51
31723: PUSH
31724: LD_INT 52
31726: PUSH
31727: LD_INT 53
31729: PUSH
31730: LD_INT 54
31732: PUSH
31733: LD_INT 55
31735: PUSH
31736: LD_INT 56
31738: PUSH
31739: LD_INT 60
31741: PUSH
31742: LD_INT 61
31744: PUSH
31745: LD_INT 62
31747: PUSH
31748: LD_INT 66
31750: PUSH
31751: LD_INT 67
31753: PUSH
31754: LD_INT 68
31756: PUSH
31757: LD_INT 81
31759: PUSH
31760: LD_INT 82
31762: PUSH
31763: LD_INT 83
31765: PUSH
31766: LD_INT 84
31768: PUSH
31769: LD_INT 85
31771: PUSH
31772: LD_INT 87
31774: PUSH
31775: LD_INT 88
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
31834: GO 32067
31836: LD_INT 3
31838: DOUBLE
31839: EQUAL
31840: IFTRUE 31844
31842: GO 32066
31844: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31845: LD_ADDR_VAR 0 4
31849: PUSH
31850: LD_INT 46
31852: PUSH
31853: LD_INT 47
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: LD_INT 82
31864: PUSH
31865: LD_INT 83
31867: PUSH
31868: LD_INT 84
31870: PUSH
31871: LD_INT 85
31873: PUSH
31874: LD_INT 86
31876: PUSH
31877: LD_INT 11
31879: PUSH
31880: LD_INT 9
31882: PUSH
31883: LD_INT 20
31885: PUSH
31886: LD_INT 19
31888: PUSH
31889: LD_INT 21
31891: PUSH
31892: LD_INT 24
31894: PUSH
31895: LD_INT 22
31897: PUSH
31898: LD_INT 25
31900: PUSH
31901: LD_INT 28
31903: PUSH
31904: LD_INT 29
31906: PUSH
31907: LD_INT 30
31909: PUSH
31910: LD_INT 31
31912: PUSH
31913: LD_INT 37
31915: PUSH
31916: LD_INT 38
31918: PUSH
31919: LD_INT 32
31921: PUSH
31922: LD_INT 27
31924: PUSH
31925: LD_INT 33
31927: PUSH
31928: LD_INT 69
31930: PUSH
31931: LD_INT 39
31933: PUSH
31934: LD_INT 34
31936: PUSH
31937: LD_INT 40
31939: PUSH
31940: LD_INT 71
31942: PUSH
31943: LD_INT 23
31945: PUSH
31946: LD_INT 44
31948: PUSH
31949: LD_INT 48
31951: PUSH
31952: LD_INT 49
31954: PUSH
31955: LD_INT 50
31957: PUSH
31958: LD_INT 51
31960: PUSH
31961: LD_INT 52
31963: PUSH
31964: LD_INT 53
31966: PUSH
31967: LD_INT 54
31969: PUSH
31970: LD_INT 55
31972: PUSH
31973: LD_INT 56
31975: PUSH
31976: LD_INT 57
31978: PUSH
31979: LD_INT 58
31981: PUSH
31982: LD_INT 59
31984: PUSH
31985: LD_INT 63
31987: PUSH
31988: LD_INT 64
31990: PUSH
31991: LD_INT 65
31993: PUSH
31994: LD_INT 82
31996: PUSH
31997: LD_INT 83
31999: PUSH
32000: LD_INT 84
32002: PUSH
32003: LD_INT 85
32005: PUSH
32006: LD_INT 86
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: ST_TO_ADDR
32064: GO 32067
32066: POP
// if state > - 1 and state < 3 then
32067: LD_VAR 0 3
32071: PUSH
32072: LD_INT 1
32074: NEG
32075: GREATER
32076: PUSH
32077: LD_VAR 0 3
32081: PUSH
32082: LD_INT 3
32084: LESS
32085: AND
32086: IFFALSE 32143
// for i in result do
32088: LD_ADDR_VAR 0 5
32092: PUSH
32093: LD_VAR 0 4
32097: PUSH
32098: FOR_IN
32099: IFFALSE 32141
// if GetTech ( i , side ) <> state then
32101: LD_VAR 0 5
32105: PPUSH
32106: LD_VAR 0 1
32110: PPUSH
32111: CALL_OW 321
32115: PUSH
32116: LD_VAR 0 3
32120: NONEQUAL
32121: IFFALSE 32139
// result := result diff i ;
32123: LD_ADDR_VAR 0 4
32127: PUSH
32128: LD_VAR 0 4
32132: PUSH
32133: LD_VAR 0 5
32137: DIFF
32138: ST_TO_ADDR
32139: GO 32098
32141: POP
32142: POP
// end ;
32143: LD_VAR 0 4
32147: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32148: LD_INT 0
32150: PPUSH
32151: PPUSH
32152: PPUSH
// result := true ;
32153: LD_ADDR_VAR 0 3
32157: PUSH
32158: LD_INT 1
32160: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32161: LD_ADDR_VAR 0 5
32165: PUSH
32166: LD_VAR 0 2
32170: PPUSH
32171: CALL_OW 480
32175: ST_TO_ADDR
// if not tmp then
32176: LD_VAR 0 5
32180: NOT
32181: IFFALSE 32185
// exit ;
32183: GO 32234
// for i in tmp do
32185: LD_ADDR_VAR 0 4
32189: PUSH
32190: LD_VAR 0 5
32194: PUSH
32195: FOR_IN
32196: IFFALSE 32232
// if GetTech ( i , side ) <> state_researched then
32198: LD_VAR 0 4
32202: PPUSH
32203: LD_VAR 0 1
32207: PPUSH
32208: CALL_OW 321
32212: PUSH
32213: LD_INT 2
32215: NONEQUAL
32216: IFFALSE 32230
// begin result := false ;
32218: LD_ADDR_VAR 0 3
32222: PUSH
32223: LD_INT 0
32225: ST_TO_ADDR
// exit ;
32226: POP
32227: POP
32228: GO 32234
// end ;
32230: GO 32195
32232: POP
32233: POP
// end ;
32234: LD_VAR 0 3
32238: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32239: LD_INT 0
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
32245: PPUSH
32246: PPUSH
32247: PPUSH
32248: PPUSH
32249: PPUSH
32250: PPUSH
32251: PPUSH
32252: PPUSH
32253: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32254: LD_VAR 0 1
32258: NOT
32259: PUSH
32260: LD_VAR 0 1
32264: PPUSH
32265: CALL_OW 257
32269: PUSH
32270: LD_INT 9
32272: NONEQUAL
32273: OR
32274: IFFALSE 32278
// exit ;
32276: GO 32851
// side := GetSide ( unit ) ;
32278: LD_ADDR_VAR 0 9
32282: PUSH
32283: LD_VAR 0 1
32287: PPUSH
32288: CALL_OW 255
32292: ST_TO_ADDR
// tech_space := tech_spacanom ;
32293: LD_ADDR_VAR 0 12
32297: PUSH
32298: LD_INT 29
32300: ST_TO_ADDR
// tech_time := tech_taurad ;
32301: LD_ADDR_VAR 0 13
32305: PUSH
32306: LD_INT 28
32308: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32309: LD_ADDR_VAR 0 11
32313: PUSH
32314: LD_VAR 0 1
32318: PPUSH
32319: CALL_OW 310
32323: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32324: LD_VAR 0 11
32328: PPUSH
32329: CALL_OW 247
32333: PUSH
32334: LD_INT 2
32336: EQUAL
32337: IFFALSE 32341
// exit ;
32339: GO 32851
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32341: LD_ADDR_VAR 0 8
32345: PUSH
32346: LD_INT 81
32348: PUSH
32349: LD_VAR 0 9
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 3
32360: PUSH
32361: LD_INT 21
32363: PUSH
32364: LD_INT 3
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PPUSH
32379: CALL_OW 69
32383: ST_TO_ADDR
// if not tmp then
32384: LD_VAR 0 8
32388: NOT
32389: IFFALSE 32393
// exit ;
32391: GO 32851
// if in_unit then
32393: LD_VAR 0 11
32397: IFFALSE 32421
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32399: LD_ADDR_VAR 0 10
32403: PUSH
32404: LD_VAR 0 8
32408: PPUSH
32409: LD_VAR 0 11
32413: PPUSH
32414: CALL_OW 74
32418: ST_TO_ADDR
32419: GO 32441
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32421: LD_ADDR_VAR 0 10
32425: PUSH
32426: LD_VAR 0 8
32430: PPUSH
32431: LD_VAR 0 1
32435: PPUSH
32436: CALL_OW 74
32440: ST_TO_ADDR
// if not enemy then
32441: LD_VAR 0 10
32445: NOT
32446: IFFALSE 32450
// exit ;
32448: GO 32851
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32450: LD_VAR 0 11
32454: PUSH
32455: LD_VAR 0 11
32459: PPUSH
32460: LD_VAR 0 10
32464: PPUSH
32465: CALL_OW 296
32469: PUSH
32470: LD_INT 13
32472: GREATER
32473: AND
32474: PUSH
32475: LD_VAR 0 1
32479: PPUSH
32480: LD_VAR 0 10
32484: PPUSH
32485: CALL_OW 296
32489: PUSH
32490: LD_INT 12
32492: GREATER
32493: OR
32494: IFFALSE 32498
// exit ;
32496: GO 32851
// missile := [ 1 ] ;
32498: LD_ADDR_VAR 0 14
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: EMPTY
32507: LIST
32508: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32509: LD_VAR 0 9
32513: PPUSH
32514: LD_VAR 0 12
32518: PPUSH
32519: CALL_OW 325
32523: IFFALSE 32552
// missile := Replace ( missile , missile + 1 , 2 ) ;
32525: LD_ADDR_VAR 0 14
32529: PUSH
32530: LD_VAR 0 14
32534: PPUSH
32535: LD_VAR 0 14
32539: PUSH
32540: LD_INT 1
32542: PLUS
32543: PPUSH
32544: LD_INT 2
32546: PPUSH
32547: CALL_OW 1
32551: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32552: LD_VAR 0 9
32556: PPUSH
32557: LD_VAR 0 13
32561: PPUSH
32562: CALL_OW 325
32566: PUSH
32567: LD_VAR 0 10
32571: PPUSH
32572: CALL_OW 255
32576: PPUSH
32577: LD_VAR 0 13
32581: PPUSH
32582: CALL_OW 325
32586: NOT
32587: AND
32588: IFFALSE 32617
// missile := Replace ( missile , missile + 1 , 3 ) ;
32590: LD_ADDR_VAR 0 14
32594: PUSH
32595: LD_VAR 0 14
32599: PPUSH
32600: LD_VAR 0 14
32604: PUSH
32605: LD_INT 1
32607: PLUS
32608: PPUSH
32609: LD_INT 3
32611: PPUSH
32612: CALL_OW 1
32616: ST_TO_ADDR
// if missile < 2 then
32617: LD_VAR 0 14
32621: PUSH
32622: LD_INT 2
32624: LESS
32625: IFFALSE 32629
// exit ;
32627: GO 32851
// x := GetX ( enemy ) ;
32629: LD_ADDR_VAR 0 4
32633: PUSH
32634: LD_VAR 0 10
32638: PPUSH
32639: CALL_OW 250
32643: ST_TO_ADDR
// y := GetY ( enemy ) ;
32644: LD_ADDR_VAR 0 5
32648: PUSH
32649: LD_VAR 0 10
32653: PPUSH
32654: CALL_OW 251
32658: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32659: LD_ADDR_VAR 0 6
32663: PUSH
32664: LD_VAR 0 4
32668: PUSH
32669: LD_INT 1
32671: NEG
32672: PPUSH
32673: LD_INT 1
32675: PPUSH
32676: CALL_OW 12
32680: PLUS
32681: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32682: LD_ADDR_VAR 0 7
32686: PUSH
32687: LD_VAR 0 5
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PPUSH
32696: LD_INT 1
32698: PPUSH
32699: CALL_OW 12
32703: PLUS
32704: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32705: LD_VAR 0 6
32709: PPUSH
32710: LD_VAR 0 7
32714: PPUSH
32715: CALL_OW 488
32719: NOT
32720: IFFALSE 32742
// begin _x := x ;
32722: LD_ADDR_VAR 0 6
32726: PUSH
32727: LD_VAR 0 4
32731: ST_TO_ADDR
// _y := y ;
32732: LD_ADDR_VAR 0 7
32736: PUSH
32737: LD_VAR 0 5
32741: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32742: LD_ADDR_VAR 0 3
32746: PUSH
32747: LD_INT 1
32749: PPUSH
32750: LD_VAR 0 14
32754: PPUSH
32755: CALL_OW 12
32759: ST_TO_ADDR
// case i of 1 :
32760: LD_VAR 0 3
32764: PUSH
32765: LD_INT 1
32767: DOUBLE
32768: EQUAL
32769: IFTRUE 32773
32771: GO 32790
32773: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32774: LD_VAR 0 1
32778: PPUSH
32779: LD_VAR 0 10
32783: PPUSH
32784: CALL_OW 115
32788: GO 32851
32790: LD_INT 2
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32820
32798: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32799: LD_VAR 0 1
32803: PPUSH
32804: LD_VAR 0 6
32808: PPUSH
32809: LD_VAR 0 7
32813: PPUSH
32814: CALL_OW 153
32818: GO 32851
32820: LD_INT 3
32822: DOUBLE
32823: EQUAL
32824: IFTRUE 32828
32826: GO 32850
32828: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32829: LD_VAR 0 1
32833: PPUSH
32834: LD_VAR 0 6
32838: PPUSH
32839: LD_VAR 0 7
32843: PPUSH
32844: CALL_OW 154
32848: GO 32851
32850: POP
// end ;
32851: LD_VAR 0 2
32855: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32856: LD_INT 0
32858: PPUSH
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
// if not unit or not building then
32864: LD_VAR 0 1
32868: NOT
32869: PUSH
32870: LD_VAR 0 2
32874: NOT
32875: OR
32876: IFFALSE 32880
// exit ;
32878: GO 33038
// x := GetX ( building ) ;
32880: LD_ADDR_VAR 0 5
32884: PUSH
32885: LD_VAR 0 2
32889: PPUSH
32890: CALL_OW 250
32894: ST_TO_ADDR
// y := GetY ( building ) ;
32895: LD_ADDR_VAR 0 6
32899: PUSH
32900: LD_VAR 0 2
32904: PPUSH
32905: CALL_OW 251
32909: ST_TO_ADDR
// for i = 0 to 5 do
32910: LD_ADDR_VAR 0 4
32914: PUSH
32915: DOUBLE
32916: LD_INT 0
32918: DEC
32919: ST_TO_ADDR
32920: LD_INT 5
32922: PUSH
32923: FOR_TO
32924: IFFALSE 33036
// begin _x := ShiftX ( x , i , 3 ) ;
32926: LD_ADDR_VAR 0 7
32930: PUSH
32931: LD_VAR 0 5
32935: PPUSH
32936: LD_VAR 0 4
32940: PPUSH
32941: LD_INT 3
32943: PPUSH
32944: CALL_OW 272
32948: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32949: LD_ADDR_VAR 0 8
32953: PUSH
32954: LD_VAR 0 6
32958: PPUSH
32959: LD_VAR 0 4
32963: PPUSH
32964: LD_INT 3
32966: PPUSH
32967: CALL_OW 273
32971: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32972: LD_VAR 0 7
32976: PPUSH
32977: LD_VAR 0 8
32981: PPUSH
32982: CALL_OW 488
32986: NOT
32987: IFFALSE 32991
// continue ;
32989: GO 32923
// if HexInfo ( _x , _y ) = 0 then
32991: LD_VAR 0 7
32995: PPUSH
32996: LD_VAR 0 8
33000: PPUSH
33001: CALL_OW 428
33005: PUSH
33006: LD_INT 0
33008: EQUAL
33009: IFFALSE 33034
// begin ComMoveXY ( unit , _x , _y ) ;
33011: LD_VAR 0 1
33015: PPUSH
33016: LD_VAR 0 7
33020: PPUSH
33021: LD_VAR 0 8
33025: PPUSH
33026: CALL_OW 111
// exit ;
33030: POP
33031: POP
33032: GO 33038
// end ; end ;
33034: GO 32923
33036: POP
33037: POP
// end ;
33038: LD_VAR 0 3
33042: RET
// export function ScanBase ( side , base_area ) ; begin
33043: LD_INT 0
33045: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33046: LD_ADDR_VAR 0 3
33050: PUSH
33051: LD_VAR 0 2
33055: PPUSH
33056: LD_INT 81
33058: PUSH
33059: LD_VAR 0 1
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PPUSH
33068: CALL_OW 70
33072: ST_TO_ADDR
// end ;
33073: LD_VAR 0 3
33077: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33078: LD_INT 0
33080: PPUSH
33081: PPUSH
33082: PPUSH
33083: PPUSH
// result := false ;
33084: LD_ADDR_VAR 0 2
33088: PUSH
33089: LD_INT 0
33091: ST_TO_ADDR
// side := GetSide ( unit ) ;
33092: LD_ADDR_VAR 0 3
33096: PUSH
33097: LD_VAR 0 1
33101: PPUSH
33102: CALL_OW 255
33106: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33107: LD_ADDR_VAR 0 4
33111: PUSH
33112: LD_VAR 0 1
33116: PPUSH
33117: CALL_OW 248
33121: ST_TO_ADDR
// case nat of 1 :
33122: LD_VAR 0 4
33126: PUSH
33127: LD_INT 1
33129: DOUBLE
33130: EQUAL
33131: IFTRUE 33135
33133: GO 33146
33135: POP
// tech := tech_lassight ; 2 :
33136: LD_ADDR_VAR 0 5
33140: PUSH
33141: LD_INT 12
33143: ST_TO_ADDR
33144: GO 33185
33146: LD_INT 2
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33165
33154: POP
// tech := tech_mortar ; 3 :
33155: LD_ADDR_VAR 0 5
33159: PUSH
33160: LD_INT 41
33162: ST_TO_ADDR
33163: GO 33185
33165: LD_INT 3
33167: DOUBLE
33168: EQUAL
33169: IFTRUE 33173
33171: GO 33184
33173: POP
// tech := tech_bazooka ; end ;
33174: LD_ADDR_VAR 0 5
33178: PUSH
33179: LD_INT 44
33181: ST_TO_ADDR
33182: GO 33185
33184: POP
// if Researched ( side , tech ) then
33185: LD_VAR 0 3
33189: PPUSH
33190: LD_VAR 0 5
33194: PPUSH
33195: CALL_OW 325
33199: IFFALSE 33226
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33201: LD_ADDR_VAR 0 2
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: LD_INT 8
33211: PUSH
33212: LD_INT 9
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: LIST
33219: PUSH
33220: LD_VAR 0 4
33224: ARRAY
33225: ST_TO_ADDR
// end ;
33226: LD_VAR 0 2
33230: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33231: LD_INT 0
33233: PPUSH
33234: PPUSH
33235: PPUSH
// if not mines then
33236: LD_VAR 0 2
33240: NOT
33241: IFFALSE 33245
// exit ;
33243: GO 33389
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33245: LD_ADDR_VAR 0 5
33249: PUSH
33250: LD_INT 81
33252: PUSH
33253: LD_VAR 0 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 3
33264: PUSH
33265: LD_INT 21
33267: PUSH
33268: LD_INT 3
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PPUSH
33283: CALL_OW 69
33287: ST_TO_ADDR
// for i in mines do
33288: LD_ADDR_VAR 0 4
33292: PUSH
33293: LD_VAR 0 2
33297: PUSH
33298: FOR_IN
33299: IFFALSE 33387
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33301: LD_VAR 0 4
33305: PUSH
33306: LD_INT 1
33308: ARRAY
33309: PPUSH
33310: LD_VAR 0 4
33314: PUSH
33315: LD_INT 2
33317: ARRAY
33318: PPUSH
33319: CALL_OW 458
33323: NOT
33324: IFFALSE 33328
// continue ;
33326: GO 33298
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33328: LD_VAR 0 4
33332: PUSH
33333: LD_INT 1
33335: ARRAY
33336: PPUSH
33337: LD_VAR 0 4
33341: PUSH
33342: LD_INT 2
33344: ARRAY
33345: PPUSH
33346: CALL_OW 428
33350: PUSH
33351: LD_VAR 0 5
33355: IN
33356: IFFALSE 33385
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33358: LD_VAR 0 4
33362: PUSH
33363: LD_INT 1
33365: ARRAY
33366: PPUSH
33367: LD_VAR 0 4
33371: PUSH
33372: LD_INT 2
33374: ARRAY
33375: PPUSH
33376: LD_VAR 0 1
33380: PPUSH
33381: CALL_OW 456
// end ;
33385: GO 33298
33387: POP
33388: POP
// end ;
33389: LD_VAR 0 3
33393: RET
// export function Count ( array ) ; var i ; begin
33394: LD_INT 0
33396: PPUSH
33397: PPUSH
// result := 0 ;
33398: LD_ADDR_VAR 0 2
33402: PUSH
33403: LD_INT 0
33405: ST_TO_ADDR
// for i in array do
33406: LD_ADDR_VAR 0 3
33410: PUSH
33411: LD_VAR 0 1
33415: PUSH
33416: FOR_IN
33417: IFFALSE 33441
// if i then
33419: LD_VAR 0 3
33423: IFFALSE 33439
// result := result + 1 ;
33425: LD_ADDR_VAR 0 2
33429: PUSH
33430: LD_VAR 0 2
33434: PUSH
33435: LD_INT 1
33437: PLUS
33438: ST_TO_ADDR
33439: GO 33416
33441: POP
33442: POP
// end ;
33443: LD_VAR 0 2
33447: RET
// export function IsEmpty ( building ) ; begin
33448: LD_INT 0
33450: PPUSH
// if not building then
33451: LD_VAR 0 1
33455: NOT
33456: IFFALSE 33460
// exit ;
33458: GO 33503
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33460: LD_ADDR_VAR 0 2
33464: PUSH
33465: LD_VAR 0 1
33469: PUSH
33470: LD_INT 22
33472: PUSH
33473: LD_VAR 0 1
33477: PPUSH
33478: CALL_OW 255
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 58
33489: PUSH
33490: EMPTY
33491: LIST
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PPUSH
33497: CALL_OW 69
33501: IN
33502: ST_TO_ADDR
// end ;
33503: LD_VAR 0 2
33507: RET
// export function IsNotFull ( building ) ; begin
33508: LD_INT 0
33510: PPUSH
// if not building then
33511: LD_VAR 0 1
33515: NOT
33516: IFFALSE 33520
// exit ;
33518: GO 33539
// result := UnitsInside ( building ) < 6 ;
33520: LD_ADDR_VAR 0 2
33524: PUSH
33525: LD_VAR 0 1
33529: PPUSH
33530: CALL_OW 313
33534: PUSH
33535: LD_INT 6
33537: LESS
33538: ST_TO_ADDR
// end ;
33539: LD_VAR 0 2
33543: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33544: LD_INT 0
33546: PPUSH
33547: PPUSH
33548: PPUSH
33549: PPUSH
// tmp := [ ] ;
33550: LD_ADDR_VAR 0 3
33554: PUSH
33555: EMPTY
33556: ST_TO_ADDR
// list := [ ] ;
33557: LD_ADDR_VAR 0 5
33561: PUSH
33562: EMPTY
33563: ST_TO_ADDR
// for i = 16 to 25 do
33564: LD_ADDR_VAR 0 4
33568: PUSH
33569: DOUBLE
33570: LD_INT 16
33572: DEC
33573: ST_TO_ADDR
33574: LD_INT 25
33576: PUSH
33577: FOR_TO
33578: IFFALSE 33651
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33580: LD_ADDR_VAR 0 3
33584: PUSH
33585: LD_VAR 0 3
33589: PUSH
33590: LD_INT 22
33592: PUSH
33593: LD_VAR 0 1
33597: PPUSH
33598: CALL_OW 255
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 91
33609: PUSH
33610: LD_VAR 0 1
33614: PUSH
33615: LD_INT 6
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 30
33625: PUSH
33626: LD_VAR 0 4
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: PUSH
33640: EMPTY
33641: LIST
33642: PPUSH
33643: CALL_OW 69
33647: ADD
33648: ST_TO_ADDR
33649: GO 33577
33651: POP
33652: POP
// for i = 1 to tmp do
33653: LD_ADDR_VAR 0 4
33657: PUSH
33658: DOUBLE
33659: LD_INT 1
33661: DEC
33662: ST_TO_ADDR
33663: LD_VAR 0 3
33667: PUSH
33668: FOR_TO
33669: IFFALSE 33757
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33671: LD_ADDR_VAR 0 5
33675: PUSH
33676: LD_VAR 0 5
33680: PUSH
33681: LD_VAR 0 3
33685: PUSH
33686: LD_VAR 0 4
33690: ARRAY
33691: PPUSH
33692: CALL_OW 266
33696: PUSH
33697: LD_VAR 0 3
33701: PUSH
33702: LD_VAR 0 4
33706: ARRAY
33707: PPUSH
33708: CALL_OW 250
33712: PUSH
33713: LD_VAR 0 3
33717: PUSH
33718: LD_VAR 0 4
33722: ARRAY
33723: PPUSH
33724: CALL_OW 251
33728: PUSH
33729: LD_VAR 0 3
33733: PUSH
33734: LD_VAR 0 4
33738: ARRAY
33739: PPUSH
33740: CALL_OW 254
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: PUSH
33751: EMPTY
33752: LIST
33753: ADD
33754: ST_TO_ADDR
33755: GO 33668
33757: POP
33758: POP
// result := list ;
33759: LD_ADDR_VAR 0 2
33763: PUSH
33764: LD_VAR 0 5
33768: ST_TO_ADDR
// end ;
33769: LD_VAR 0 2
33773: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33774: LD_INT 0
33776: PPUSH
33777: PPUSH
33778: PPUSH
33779: PPUSH
33780: PPUSH
33781: PPUSH
33782: PPUSH
// if not factory then
33783: LD_VAR 0 1
33787: NOT
33788: IFFALSE 33792
// exit ;
33790: GO 34385
// if control = control_apeman then
33792: LD_VAR 0 4
33796: PUSH
33797: LD_INT 5
33799: EQUAL
33800: IFFALSE 33909
// begin tmp := UnitsInside ( factory ) ;
33802: LD_ADDR_VAR 0 8
33806: PUSH
33807: LD_VAR 0 1
33811: PPUSH
33812: CALL_OW 313
33816: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33817: LD_VAR 0 8
33821: PPUSH
33822: LD_INT 25
33824: PUSH
33825: LD_INT 12
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PPUSH
33832: CALL_OW 72
33836: NOT
33837: IFFALSE 33847
// control := control_manual ;
33839: LD_ADDR_VAR 0 4
33843: PUSH
33844: LD_INT 1
33846: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33847: LD_ADDR_VAR 0 8
33851: PUSH
33852: LD_VAR 0 1
33856: PPUSH
33857: CALL 33544 0 1
33861: ST_TO_ADDR
// if tmp then
33862: LD_VAR 0 8
33866: IFFALSE 33909
// begin for i in tmp do
33868: LD_ADDR_VAR 0 7
33872: PUSH
33873: LD_VAR 0 8
33877: PUSH
33878: FOR_IN
33879: IFFALSE 33907
// if i [ 1 ] = b_ext_radio then
33881: LD_VAR 0 7
33885: PUSH
33886: LD_INT 1
33888: ARRAY
33889: PUSH
33890: LD_INT 22
33892: EQUAL
33893: IFFALSE 33905
// begin control := control_remote ;
33895: LD_ADDR_VAR 0 4
33899: PUSH
33900: LD_INT 2
33902: ST_TO_ADDR
// break ;
33903: GO 33907
// end ;
33905: GO 33878
33907: POP
33908: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33909: LD_VAR 0 1
33913: PPUSH
33914: LD_VAR 0 2
33918: PPUSH
33919: LD_VAR 0 3
33923: PPUSH
33924: LD_VAR 0 4
33928: PPUSH
33929: LD_VAR 0 5
33933: PPUSH
33934: CALL_OW 448
33938: IFFALSE 33973
// begin result := [ chassis , engine , control , weapon ] ;
33940: LD_ADDR_VAR 0 6
33944: PUSH
33945: LD_VAR 0 2
33949: PUSH
33950: LD_VAR 0 3
33954: PUSH
33955: LD_VAR 0 4
33959: PUSH
33960: LD_VAR 0 5
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: ST_TO_ADDR
// exit ;
33971: GO 34385
// end ; _chassis := AvailableChassisList ( factory ) ;
33973: LD_ADDR_VAR 0 9
33977: PUSH
33978: LD_VAR 0 1
33982: PPUSH
33983: CALL_OW 475
33987: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33988: LD_ADDR_VAR 0 11
33992: PUSH
33993: LD_VAR 0 1
33997: PPUSH
33998: CALL_OW 476
34002: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34003: LD_ADDR_VAR 0 12
34007: PUSH
34008: LD_VAR 0 1
34012: PPUSH
34013: CALL_OW 477
34017: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34018: LD_ADDR_VAR 0 10
34022: PUSH
34023: LD_VAR 0 1
34027: PPUSH
34028: CALL_OW 478
34032: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34033: LD_VAR 0 9
34037: NOT
34038: PUSH
34039: LD_VAR 0 11
34043: NOT
34044: OR
34045: PUSH
34046: LD_VAR 0 12
34050: NOT
34051: OR
34052: PUSH
34053: LD_VAR 0 10
34057: NOT
34058: OR
34059: IFFALSE 34094
// begin result := [ chassis , engine , control , weapon ] ;
34061: LD_ADDR_VAR 0 6
34065: PUSH
34066: LD_VAR 0 2
34070: PUSH
34071: LD_VAR 0 3
34075: PUSH
34076: LD_VAR 0 4
34080: PUSH
34081: LD_VAR 0 5
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: ST_TO_ADDR
// exit ;
34092: GO 34385
// end ; if not chassis in _chassis then
34094: LD_VAR 0 2
34098: PUSH
34099: LD_VAR 0 9
34103: IN
34104: NOT
34105: IFFALSE 34131
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34107: LD_ADDR_VAR 0 2
34111: PUSH
34112: LD_VAR 0 9
34116: PUSH
34117: LD_INT 1
34119: PPUSH
34120: LD_VAR 0 9
34124: PPUSH
34125: CALL_OW 12
34129: ARRAY
34130: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34131: LD_VAR 0 2
34135: PPUSH
34136: LD_VAR 0 3
34140: PPUSH
34141: CALL 34390 0 2
34145: NOT
34146: IFFALSE 34205
// repeat engine := _engine [ 1 ] ;
34148: LD_ADDR_VAR 0 3
34152: PUSH
34153: LD_VAR 0 11
34157: PUSH
34158: LD_INT 1
34160: ARRAY
34161: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34162: LD_ADDR_VAR 0 11
34166: PUSH
34167: LD_VAR 0 11
34171: PPUSH
34172: LD_INT 1
34174: PPUSH
34175: CALL_OW 3
34179: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34180: LD_VAR 0 2
34184: PPUSH
34185: LD_VAR 0 3
34189: PPUSH
34190: CALL 34390 0 2
34194: PUSH
34195: LD_VAR 0 11
34199: PUSH
34200: EMPTY
34201: EQUAL
34202: OR
34203: IFFALSE 34148
// if not control in _control then
34205: LD_VAR 0 4
34209: PUSH
34210: LD_VAR 0 12
34214: IN
34215: NOT
34216: IFFALSE 34242
// control := _control [ rand ( 1 , _control ) ] ;
34218: LD_ADDR_VAR 0 4
34222: PUSH
34223: LD_VAR 0 12
34227: PUSH
34228: LD_INT 1
34230: PPUSH
34231: LD_VAR 0 12
34235: PPUSH
34236: CALL_OW 12
34240: ARRAY
34241: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34242: LD_VAR 0 2
34246: PPUSH
34247: LD_VAR 0 5
34251: PPUSH
34252: CALL 34610 0 2
34256: NOT
34257: IFFALSE 34316
// repeat weapon := _weapon [ 1 ] ;
34259: LD_ADDR_VAR 0 5
34263: PUSH
34264: LD_VAR 0 10
34268: PUSH
34269: LD_INT 1
34271: ARRAY
34272: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34273: LD_ADDR_VAR 0 10
34277: PUSH
34278: LD_VAR 0 10
34282: PPUSH
34283: LD_INT 1
34285: PPUSH
34286: CALL_OW 3
34290: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34291: LD_VAR 0 2
34295: PPUSH
34296: LD_VAR 0 5
34300: PPUSH
34301: CALL 34610 0 2
34305: PUSH
34306: LD_VAR 0 10
34310: PUSH
34311: EMPTY
34312: EQUAL
34313: OR
34314: IFFALSE 34259
// result := [ ] ;
34316: LD_ADDR_VAR 0 6
34320: PUSH
34321: EMPTY
34322: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34323: LD_VAR 0 1
34327: PPUSH
34328: LD_VAR 0 2
34332: PPUSH
34333: LD_VAR 0 3
34337: PPUSH
34338: LD_VAR 0 4
34342: PPUSH
34343: LD_VAR 0 5
34347: PPUSH
34348: CALL_OW 448
34352: IFFALSE 34385
// result := [ chassis , engine , control , weapon ] ;
34354: LD_ADDR_VAR 0 6
34358: PUSH
34359: LD_VAR 0 2
34363: PUSH
34364: LD_VAR 0 3
34368: PUSH
34369: LD_VAR 0 4
34373: PUSH
34374: LD_VAR 0 5
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: ST_TO_ADDR
// end ;
34385: LD_VAR 0 6
34389: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34390: LD_INT 0
34392: PPUSH
// if not chassis or not engine then
34393: LD_VAR 0 1
34397: NOT
34398: PUSH
34399: LD_VAR 0 2
34403: NOT
34404: OR
34405: IFFALSE 34409
// exit ;
34407: GO 34605
// case engine of engine_solar :
34409: LD_VAR 0 2
34413: PUSH
34414: LD_INT 2
34416: DOUBLE
34417: EQUAL
34418: IFTRUE 34422
34420: GO 34460
34422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34423: LD_ADDR_VAR 0 3
34427: PUSH
34428: LD_INT 11
34430: PUSH
34431: LD_INT 12
34433: PUSH
34434: LD_INT 13
34436: PUSH
34437: LD_INT 14
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 3
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: ST_TO_ADDR
34458: GO 34589
34460: LD_INT 1
34462: DOUBLE
34463: EQUAL
34464: IFTRUE 34468
34466: GO 34530
34468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34469: LD_ADDR_VAR 0 3
34473: PUSH
34474: LD_INT 11
34476: PUSH
34477: LD_INT 12
34479: PUSH
34480: LD_INT 13
34482: PUSH
34483: LD_INT 14
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 3
34494: PUSH
34495: LD_INT 4
34497: PUSH
34498: LD_INT 5
34500: PUSH
34501: LD_INT 21
34503: PUSH
34504: LD_INT 23
34506: PUSH
34507: LD_INT 22
34509: PUSH
34510: LD_INT 24
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: ST_TO_ADDR
34528: GO 34589
34530: LD_INT 3
34532: DOUBLE
34533: EQUAL
34534: IFTRUE 34538
34536: GO 34588
34538: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34539: LD_ADDR_VAR 0 3
34543: PUSH
34544: LD_INT 13
34546: PUSH
34547: LD_INT 14
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: LD_INT 4
34558: PUSH
34559: LD_INT 5
34561: PUSH
34562: LD_INT 21
34564: PUSH
34565: LD_INT 22
34567: PUSH
34568: LD_INT 23
34570: PUSH
34571: LD_INT 24
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: ST_TO_ADDR
34586: GO 34589
34588: POP
// result := ( chassis in result ) ;
34589: LD_ADDR_VAR 0 3
34593: PUSH
34594: LD_VAR 0 1
34598: PUSH
34599: LD_VAR 0 3
34603: IN
34604: ST_TO_ADDR
// end ;
34605: LD_VAR 0 3
34609: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34610: LD_INT 0
34612: PPUSH
// if not chassis or not weapon then
34613: LD_VAR 0 1
34617: NOT
34618: PUSH
34619: LD_VAR 0 2
34623: NOT
34624: OR
34625: IFFALSE 34629
// exit ;
34627: GO 35691
// case weapon of us_machine_gun :
34629: LD_VAR 0 2
34633: PUSH
34634: LD_INT 2
34636: DOUBLE
34637: EQUAL
34638: IFTRUE 34642
34640: GO 34672
34642: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34643: LD_ADDR_VAR 0 3
34647: PUSH
34648: LD_INT 1
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: LD_INT 3
34656: PUSH
34657: LD_INT 4
34659: PUSH
34660: LD_INT 5
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: ST_TO_ADDR
34670: GO 35675
34672: LD_INT 3
34674: DOUBLE
34675: EQUAL
34676: IFTRUE 34680
34678: GO 34710
34680: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34681: LD_ADDR_VAR 0 3
34685: PUSH
34686: LD_INT 1
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: LD_INT 3
34694: PUSH
34695: LD_INT 4
34697: PUSH
34698: LD_INT 5
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: ST_TO_ADDR
34708: GO 35675
34710: LD_INT 11
34712: DOUBLE
34713: EQUAL
34714: IFTRUE 34718
34716: GO 34748
34718: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34719: LD_ADDR_VAR 0 3
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: LD_INT 3
34732: PUSH
34733: LD_INT 4
34735: PUSH
34736: LD_INT 5
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: ST_TO_ADDR
34746: GO 35675
34748: LD_INT 4
34750: DOUBLE
34751: EQUAL
34752: IFTRUE 34756
34754: GO 34782
34756: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34757: LD_ADDR_VAR 0 3
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: LD_INT 3
34767: PUSH
34768: LD_INT 4
34770: PUSH
34771: LD_INT 5
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: ST_TO_ADDR
34780: GO 35675
34782: LD_INT 5
34784: DOUBLE
34785: EQUAL
34786: IFTRUE 34790
34788: GO 34816
34790: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34791: LD_ADDR_VAR 0 3
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: LD_INT 3
34801: PUSH
34802: LD_INT 4
34804: PUSH
34805: LD_INT 5
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
34814: GO 35675
34816: LD_INT 9
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34824
34822: GO 34850
34824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: LD_INT 3
34835: PUSH
34836: LD_INT 4
34838: PUSH
34839: LD_INT 5
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: ST_TO_ADDR
34848: GO 35675
34850: LD_INT 7
34852: DOUBLE
34853: EQUAL
34854: IFTRUE 34858
34856: GO 34884
34858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34859: LD_ADDR_VAR 0 3
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 3
34869: PUSH
34870: LD_INT 4
34872: PUSH
34873: LD_INT 5
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
34882: GO 35675
34884: LD_INT 12
34886: DOUBLE
34887: EQUAL
34888: IFTRUE 34892
34890: GO 34918
34892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34893: LD_ADDR_VAR 0 3
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: LD_INT 4
34906: PUSH
34907: LD_INT 5
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: ST_TO_ADDR
34916: GO 35675
34918: LD_INT 13
34920: DOUBLE
34921: EQUAL
34922: IFTRUE 34926
34924: GO 34952
34926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34927: LD_ADDR_VAR 0 3
34931: PUSH
34932: LD_INT 2
34934: PUSH
34935: LD_INT 3
34937: PUSH
34938: LD_INT 4
34940: PUSH
34941: LD_INT 5
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: ST_TO_ADDR
34950: GO 35675
34952: LD_INT 14
34954: DOUBLE
34955: EQUAL
34956: IFTRUE 34960
34958: GO 34978
34960: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34961: LD_ADDR_VAR 0 3
34965: PUSH
34966: LD_INT 4
34968: PUSH
34969: LD_INT 5
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: ST_TO_ADDR
34976: GO 35675
34978: LD_INT 6
34980: DOUBLE
34981: EQUAL
34982: IFTRUE 34986
34984: GO 35004
34986: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34987: LD_ADDR_VAR 0 3
34991: PUSH
34992: LD_INT 4
34994: PUSH
34995: LD_INT 5
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: ST_TO_ADDR
35002: GO 35675
35004: LD_INT 10
35006: DOUBLE
35007: EQUAL
35008: IFTRUE 35012
35010: GO 35030
35012: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35013: LD_ADDR_VAR 0 3
35017: PUSH
35018: LD_INT 4
35020: PUSH
35021: LD_INT 5
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: ST_TO_ADDR
35028: GO 35675
35030: LD_INT 22
35032: DOUBLE
35033: EQUAL
35034: IFTRUE 35038
35036: GO 35064
35038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35039: LD_ADDR_VAR 0 3
35043: PUSH
35044: LD_INT 11
35046: PUSH
35047: LD_INT 12
35049: PUSH
35050: LD_INT 13
35052: PUSH
35053: LD_INT 14
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: ST_TO_ADDR
35062: GO 35675
35064: LD_INT 23
35066: DOUBLE
35067: EQUAL
35068: IFTRUE 35072
35070: GO 35098
35072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35073: LD_ADDR_VAR 0 3
35077: PUSH
35078: LD_INT 11
35080: PUSH
35081: LD_INT 12
35083: PUSH
35084: LD_INT 13
35086: PUSH
35087: LD_INT 14
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: ST_TO_ADDR
35096: GO 35675
35098: LD_INT 24
35100: DOUBLE
35101: EQUAL
35102: IFTRUE 35106
35104: GO 35132
35106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35107: LD_ADDR_VAR 0 3
35111: PUSH
35112: LD_INT 11
35114: PUSH
35115: LD_INT 12
35117: PUSH
35118: LD_INT 13
35120: PUSH
35121: LD_INT 14
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: ST_TO_ADDR
35130: GO 35675
35132: LD_INT 30
35134: DOUBLE
35135: EQUAL
35136: IFTRUE 35140
35138: GO 35166
35140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35141: LD_ADDR_VAR 0 3
35145: PUSH
35146: LD_INT 11
35148: PUSH
35149: LD_INT 12
35151: PUSH
35152: LD_INT 13
35154: PUSH
35155: LD_INT 14
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: ST_TO_ADDR
35164: GO 35675
35166: LD_INT 25
35168: DOUBLE
35169: EQUAL
35170: IFTRUE 35174
35172: GO 35192
35174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35175: LD_ADDR_VAR 0 3
35179: PUSH
35180: LD_INT 13
35182: PUSH
35183: LD_INT 14
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: ST_TO_ADDR
35190: GO 35675
35192: LD_INT 27
35194: DOUBLE
35195: EQUAL
35196: IFTRUE 35200
35198: GO 35218
35200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35201: LD_ADDR_VAR 0 3
35205: PUSH
35206: LD_INT 13
35208: PUSH
35209: LD_INT 14
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: ST_TO_ADDR
35216: GO 35675
35218: LD_EXP 26
35222: DOUBLE
35223: EQUAL
35224: IFTRUE 35228
35226: GO 35254
35228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35229: LD_ADDR_VAR 0 3
35233: PUSH
35234: LD_INT 11
35236: PUSH
35237: LD_INT 12
35239: PUSH
35240: LD_INT 13
35242: PUSH
35243: LD_INT 14
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: ST_TO_ADDR
35252: GO 35675
35254: LD_INT 28
35256: DOUBLE
35257: EQUAL
35258: IFTRUE 35262
35260: GO 35280
35262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35263: LD_ADDR_VAR 0 3
35267: PUSH
35268: LD_INT 13
35270: PUSH
35271: LD_INT 14
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: ST_TO_ADDR
35278: GO 35675
35280: LD_INT 29
35282: DOUBLE
35283: EQUAL
35284: IFTRUE 35288
35286: GO 35306
35288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35289: LD_ADDR_VAR 0 3
35293: PUSH
35294: LD_INT 13
35296: PUSH
35297: LD_INT 14
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: ST_TO_ADDR
35304: GO 35675
35306: LD_INT 31
35308: DOUBLE
35309: EQUAL
35310: IFTRUE 35314
35312: GO 35332
35314: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35315: LD_ADDR_VAR 0 3
35319: PUSH
35320: LD_INT 13
35322: PUSH
35323: LD_INT 14
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: ST_TO_ADDR
35330: GO 35675
35332: LD_INT 26
35334: DOUBLE
35335: EQUAL
35336: IFTRUE 35340
35338: GO 35358
35340: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35341: LD_ADDR_VAR 0 3
35345: PUSH
35346: LD_INT 13
35348: PUSH
35349: LD_INT 14
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: ST_TO_ADDR
35356: GO 35675
35358: LD_INT 42
35360: DOUBLE
35361: EQUAL
35362: IFTRUE 35366
35364: GO 35392
35366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35367: LD_ADDR_VAR 0 3
35371: PUSH
35372: LD_INT 21
35374: PUSH
35375: LD_INT 22
35377: PUSH
35378: LD_INT 23
35380: PUSH
35381: LD_INT 24
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: ST_TO_ADDR
35390: GO 35675
35392: LD_INT 43
35394: DOUBLE
35395: EQUAL
35396: IFTRUE 35400
35398: GO 35426
35400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35401: LD_ADDR_VAR 0 3
35405: PUSH
35406: LD_INT 21
35408: PUSH
35409: LD_INT 22
35411: PUSH
35412: LD_INT 23
35414: PUSH
35415: LD_INT 24
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: ST_TO_ADDR
35424: GO 35675
35426: LD_INT 44
35428: DOUBLE
35429: EQUAL
35430: IFTRUE 35434
35432: GO 35460
35434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35435: LD_ADDR_VAR 0 3
35439: PUSH
35440: LD_INT 21
35442: PUSH
35443: LD_INT 22
35445: PUSH
35446: LD_INT 23
35448: PUSH
35449: LD_INT 24
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: ST_TO_ADDR
35458: GO 35675
35460: LD_INT 45
35462: DOUBLE
35463: EQUAL
35464: IFTRUE 35468
35466: GO 35494
35468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35469: LD_ADDR_VAR 0 3
35473: PUSH
35474: LD_INT 21
35476: PUSH
35477: LD_INT 22
35479: PUSH
35480: LD_INT 23
35482: PUSH
35483: LD_INT 24
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: ST_TO_ADDR
35492: GO 35675
35494: LD_INT 49
35496: DOUBLE
35497: EQUAL
35498: IFTRUE 35502
35500: GO 35528
35502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35503: LD_ADDR_VAR 0 3
35507: PUSH
35508: LD_INT 21
35510: PUSH
35511: LD_INT 22
35513: PUSH
35514: LD_INT 23
35516: PUSH
35517: LD_INT 24
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: ST_TO_ADDR
35526: GO 35675
35528: LD_INT 51
35530: DOUBLE
35531: EQUAL
35532: IFTRUE 35536
35534: GO 35562
35536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35537: LD_ADDR_VAR 0 3
35541: PUSH
35542: LD_INT 21
35544: PUSH
35545: LD_INT 22
35547: PUSH
35548: LD_INT 23
35550: PUSH
35551: LD_INT 24
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: ST_TO_ADDR
35560: GO 35675
35562: LD_INT 52
35564: DOUBLE
35565: EQUAL
35566: IFTRUE 35570
35568: GO 35596
35570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35571: LD_ADDR_VAR 0 3
35575: PUSH
35576: LD_INT 21
35578: PUSH
35579: LD_INT 22
35581: PUSH
35582: LD_INT 23
35584: PUSH
35585: LD_INT 24
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: ST_TO_ADDR
35594: GO 35675
35596: LD_INT 53
35598: DOUBLE
35599: EQUAL
35600: IFTRUE 35604
35602: GO 35622
35604: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35605: LD_ADDR_VAR 0 3
35609: PUSH
35610: LD_INT 23
35612: PUSH
35613: LD_INT 24
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: ST_TO_ADDR
35620: GO 35675
35622: LD_INT 46
35624: DOUBLE
35625: EQUAL
35626: IFTRUE 35630
35628: GO 35648
35630: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35631: LD_ADDR_VAR 0 3
35635: PUSH
35636: LD_INT 23
35638: PUSH
35639: LD_INT 24
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: ST_TO_ADDR
35646: GO 35675
35648: LD_INT 47
35650: DOUBLE
35651: EQUAL
35652: IFTRUE 35656
35654: GO 35674
35656: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35657: LD_ADDR_VAR 0 3
35661: PUSH
35662: LD_INT 23
35664: PUSH
35665: LD_INT 24
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: ST_TO_ADDR
35672: GO 35675
35674: POP
// result := ( chassis in result ) ;
35675: LD_ADDR_VAR 0 3
35679: PUSH
35680: LD_VAR 0 1
35684: PUSH
35685: LD_VAR 0 3
35689: IN
35690: ST_TO_ADDR
// end ;
35691: LD_VAR 0 3
35695: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35696: LD_INT 0
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
// result := array ;
35705: LD_ADDR_VAR 0 5
35709: PUSH
35710: LD_VAR 0 1
35714: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35715: LD_VAR 0 1
35719: NOT
35720: PUSH
35721: LD_VAR 0 2
35725: NOT
35726: OR
35727: PUSH
35728: LD_VAR 0 3
35732: NOT
35733: OR
35734: PUSH
35735: LD_VAR 0 2
35739: PUSH
35740: LD_VAR 0 1
35744: GREATER
35745: OR
35746: PUSH
35747: LD_VAR 0 3
35751: PUSH
35752: LD_VAR 0 1
35756: GREATER
35757: OR
35758: IFFALSE 35762
// exit ;
35760: GO 36058
// if direction then
35762: LD_VAR 0 4
35766: IFFALSE 35830
// begin d := 1 ;
35768: LD_ADDR_VAR 0 9
35772: PUSH
35773: LD_INT 1
35775: ST_TO_ADDR
// if i_from > i_to then
35776: LD_VAR 0 2
35780: PUSH
35781: LD_VAR 0 3
35785: GREATER
35786: IFFALSE 35812
// length := ( array - i_from ) + i_to else
35788: LD_ADDR_VAR 0 11
35792: PUSH
35793: LD_VAR 0 1
35797: PUSH
35798: LD_VAR 0 2
35802: MINUS
35803: PUSH
35804: LD_VAR 0 3
35808: PLUS
35809: ST_TO_ADDR
35810: GO 35828
// length := i_to - i_from ;
35812: LD_ADDR_VAR 0 11
35816: PUSH
35817: LD_VAR 0 3
35821: PUSH
35822: LD_VAR 0 2
35826: MINUS
35827: ST_TO_ADDR
// end else
35828: GO 35891
// begin d := - 1 ;
35830: LD_ADDR_VAR 0 9
35834: PUSH
35835: LD_INT 1
35837: NEG
35838: ST_TO_ADDR
// if i_from > i_to then
35839: LD_VAR 0 2
35843: PUSH
35844: LD_VAR 0 3
35848: GREATER
35849: IFFALSE 35869
// length := i_from - i_to else
35851: LD_ADDR_VAR 0 11
35855: PUSH
35856: LD_VAR 0 2
35860: PUSH
35861: LD_VAR 0 3
35865: MINUS
35866: ST_TO_ADDR
35867: GO 35891
// length := ( array - i_to ) + i_from ;
35869: LD_ADDR_VAR 0 11
35873: PUSH
35874: LD_VAR 0 1
35878: PUSH
35879: LD_VAR 0 3
35883: MINUS
35884: PUSH
35885: LD_VAR 0 2
35889: PLUS
35890: ST_TO_ADDR
// end ; if not length then
35891: LD_VAR 0 11
35895: NOT
35896: IFFALSE 35900
// exit ;
35898: GO 36058
// tmp := array ;
35900: LD_ADDR_VAR 0 10
35904: PUSH
35905: LD_VAR 0 1
35909: ST_TO_ADDR
// for i = 1 to length do
35910: LD_ADDR_VAR 0 6
35914: PUSH
35915: DOUBLE
35916: LD_INT 1
35918: DEC
35919: ST_TO_ADDR
35920: LD_VAR 0 11
35924: PUSH
35925: FOR_TO
35926: IFFALSE 36046
// begin for j = 1 to array do
35928: LD_ADDR_VAR 0 7
35932: PUSH
35933: DOUBLE
35934: LD_INT 1
35936: DEC
35937: ST_TO_ADDR
35938: LD_VAR 0 1
35942: PUSH
35943: FOR_TO
35944: IFFALSE 36032
// begin k := j + d ;
35946: LD_ADDR_VAR 0 8
35950: PUSH
35951: LD_VAR 0 7
35955: PUSH
35956: LD_VAR 0 9
35960: PLUS
35961: ST_TO_ADDR
// if k > array then
35962: LD_VAR 0 8
35966: PUSH
35967: LD_VAR 0 1
35971: GREATER
35972: IFFALSE 35982
// k := 1 ;
35974: LD_ADDR_VAR 0 8
35978: PUSH
35979: LD_INT 1
35981: ST_TO_ADDR
// if not k then
35982: LD_VAR 0 8
35986: NOT
35987: IFFALSE 35999
// k := array ;
35989: LD_ADDR_VAR 0 8
35993: PUSH
35994: LD_VAR 0 1
35998: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35999: LD_ADDR_VAR 0 10
36003: PUSH
36004: LD_VAR 0 10
36008: PPUSH
36009: LD_VAR 0 8
36013: PPUSH
36014: LD_VAR 0 1
36018: PUSH
36019: LD_VAR 0 7
36023: ARRAY
36024: PPUSH
36025: CALL_OW 1
36029: ST_TO_ADDR
// end ;
36030: GO 35943
36032: POP
36033: POP
// array := tmp ;
36034: LD_ADDR_VAR 0 1
36038: PUSH
36039: LD_VAR 0 10
36043: ST_TO_ADDR
// end ;
36044: GO 35925
36046: POP
36047: POP
// result := array ;
36048: LD_ADDR_VAR 0 5
36052: PUSH
36053: LD_VAR 0 1
36057: ST_TO_ADDR
// end ;
36058: LD_VAR 0 5
36062: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36063: LD_INT 0
36065: PPUSH
36066: PPUSH
// result := 0 ;
36067: LD_ADDR_VAR 0 3
36071: PUSH
36072: LD_INT 0
36074: ST_TO_ADDR
// if not array or not value in array then
36075: LD_VAR 0 1
36079: NOT
36080: PUSH
36081: LD_VAR 0 2
36085: PUSH
36086: LD_VAR 0 1
36090: IN
36091: NOT
36092: OR
36093: IFFALSE 36097
// exit ;
36095: GO 36151
// for i = 1 to array do
36097: LD_ADDR_VAR 0 4
36101: PUSH
36102: DOUBLE
36103: LD_INT 1
36105: DEC
36106: ST_TO_ADDR
36107: LD_VAR 0 1
36111: PUSH
36112: FOR_TO
36113: IFFALSE 36149
// if value = array [ i ] then
36115: LD_VAR 0 2
36119: PUSH
36120: LD_VAR 0 1
36124: PUSH
36125: LD_VAR 0 4
36129: ARRAY
36130: EQUAL
36131: IFFALSE 36147
// begin result := i ;
36133: LD_ADDR_VAR 0 3
36137: PUSH
36138: LD_VAR 0 4
36142: ST_TO_ADDR
// exit ;
36143: POP
36144: POP
36145: GO 36151
// end ;
36147: GO 36112
36149: POP
36150: POP
// end ;
36151: LD_VAR 0 3
36155: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36156: LD_INT 0
36158: PPUSH
// vc_chassis := chassis ;
36159: LD_ADDR_OWVAR 37
36163: PUSH
36164: LD_VAR 0 1
36168: ST_TO_ADDR
// vc_engine := engine ;
36169: LD_ADDR_OWVAR 39
36173: PUSH
36174: LD_VAR 0 2
36178: ST_TO_ADDR
// vc_control := control ;
36179: LD_ADDR_OWVAR 38
36183: PUSH
36184: LD_VAR 0 3
36188: ST_TO_ADDR
// vc_weapon := weapon ;
36189: LD_ADDR_OWVAR 40
36193: PUSH
36194: LD_VAR 0 4
36198: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36199: LD_ADDR_OWVAR 41
36203: PUSH
36204: LD_VAR 0 5
36208: ST_TO_ADDR
// end ;
36209: LD_VAR 0 6
36213: RET
// export function WantPlant ( unit ) ; var task ; begin
36214: LD_INT 0
36216: PPUSH
36217: PPUSH
// result := false ;
36218: LD_ADDR_VAR 0 2
36222: PUSH
36223: LD_INT 0
36225: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_VAR 0 1
36235: PPUSH
36236: CALL_OW 437
36240: ST_TO_ADDR
// if task then
36241: LD_VAR 0 3
36245: IFFALSE 36273
// if task [ 1 ] [ 1 ] = p then
36247: LD_VAR 0 3
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PUSH
36256: LD_INT 1
36258: ARRAY
36259: PUSH
36260: LD_STRING p
36262: EQUAL
36263: IFFALSE 36273
// result := true ;
36265: LD_ADDR_VAR 0 2
36269: PUSH
36270: LD_INT 1
36272: ST_TO_ADDR
// end ;
36273: LD_VAR 0 2
36277: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36278: LD_INT 0
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
// if pos < 1 then
36284: LD_VAR 0 2
36288: PUSH
36289: LD_INT 1
36291: LESS
36292: IFFALSE 36296
// exit ;
36294: GO 36599
// if pos = 1 then
36296: LD_VAR 0 2
36300: PUSH
36301: LD_INT 1
36303: EQUAL
36304: IFFALSE 36337
// result := Replace ( arr , pos [ 1 ] , value ) else
36306: LD_ADDR_VAR 0 4
36310: PUSH
36311: LD_VAR 0 1
36315: PPUSH
36316: LD_VAR 0 2
36320: PUSH
36321: LD_INT 1
36323: ARRAY
36324: PPUSH
36325: LD_VAR 0 3
36329: PPUSH
36330: CALL_OW 1
36334: ST_TO_ADDR
36335: GO 36599
// begin tmp := arr ;
36337: LD_ADDR_VAR 0 6
36341: PUSH
36342: LD_VAR 0 1
36346: ST_TO_ADDR
// s_arr := [ tmp ] ;
36347: LD_ADDR_VAR 0 7
36351: PUSH
36352: LD_VAR 0 6
36356: PUSH
36357: EMPTY
36358: LIST
36359: ST_TO_ADDR
// for i = 1 to pos - 1 do
36360: LD_ADDR_VAR 0 5
36364: PUSH
36365: DOUBLE
36366: LD_INT 1
36368: DEC
36369: ST_TO_ADDR
36370: LD_VAR 0 2
36374: PUSH
36375: LD_INT 1
36377: MINUS
36378: PUSH
36379: FOR_TO
36380: IFFALSE 36425
// begin tmp := tmp [ pos [ i ] ] ;
36382: LD_ADDR_VAR 0 6
36386: PUSH
36387: LD_VAR 0 6
36391: PUSH
36392: LD_VAR 0 2
36396: PUSH
36397: LD_VAR 0 5
36401: ARRAY
36402: ARRAY
36403: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36404: LD_ADDR_VAR 0 7
36408: PUSH
36409: LD_VAR 0 7
36413: PUSH
36414: LD_VAR 0 6
36418: PUSH
36419: EMPTY
36420: LIST
36421: ADD
36422: ST_TO_ADDR
// end ;
36423: GO 36379
36425: POP
36426: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36427: LD_ADDR_VAR 0 6
36431: PUSH
36432: LD_VAR 0 6
36436: PPUSH
36437: LD_VAR 0 2
36441: PUSH
36442: LD_VAR 0 2
36446: ARRAY
36447: PPUSH
36448: LD_VAR 0 3
36452: PPUSH
36453: CALL_OW 1
36457: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36458: LD_ADDR_VAR 0 7
36462: PUSH
36463: LD_VAR 0 7
36467: PPUSH
36468: LD_VAR 0 7
36472: PPUSH
36473: LD_VAR 0 6
36477: PPUSH
36478: CALL_OW 1
36482: ST_TO_ADDR
// for i = s_arr downto 2 do
36483: LD_ADDR_VAR 0 5
36487: PUSH
36488: DOUBLE
36489: LD_VAR 0 7
36493: INC
36494: ST_TO_ADDR
36495: LD_INT 2
36497: PUSH
36498: FOR_DOWNTO
36499: IFFALSE 36583
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36501: LD_ADDR_VAR 0 6
36505: PUSH
36506: LD_VAR 0 7
36510: PUSH
36511: LD_VAR 0 5
36515: PUSH
36516: LD_INT 1
36518: MINUS
36519: ARRAY
36520: PPUSH
36521: LD_VAR 0 2
36525: PUSH
36526: LD_VAR 0 5
36530: PUSH
36531: LD_INT 1
36533: MINUS
36534: ARRAY
36535: PPUSH
36536: LD_VAR 0 7
36540: PUSH
36541: LD_VAR 0 5
36545: ARRAY
36546: PPUSH
36547: CALL_OW 1
36551: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36552: LD_ADDR_VAR 0 7
36556: PUSH
36557: LD_VAR 0 7
36561: PPUSH
36562: LD_VAR 0 5
36566: PUSH
36567: LD_INT 1
36569: MINUS
36570: PPUSH
36571: LD_VAR 0 6
36575: PPUSH
36576: CALL_OW 1
36580: ST_TO_ADDR
// end ;
36581: GO 36498
36583: POP
36584: POP
// result := s_arr [ 1 ] ;
36585: LD_ADDR_VAR 0 4
36589: PUSH
36590: LD_VAR 0 7
36594: PUSH
36595: LD_INT 1
36597: ARRAY
36598: ST_TO_ADDR
// end ; end ;
36599: LD_VAR 0 4
36603: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36604: LD_INT 0
36606: PPUSH
36607: PPUSH
// if not list then
36608: LD_VAR 0 1
36612: NOT
36613: IFFALSE 36617
// exit ;
36615: GO 36708
// i := list [ pos1 ] ;
36617: LD_ADDR_VAR 0 5
36621: PUSH
36622: LD_VAR 0 1
36626: PUSH
36627: LD_VAR 0 2
36631: ARRAY
36632: ST_TO_ADDR
// if not i then
36633: LD_VAR 0 5
36637: NOT
36638: IFFALSE 36642
// exit ;
36640: GO 36708
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36642: LD_ADDR_VAR 0 1
36646: PUSH
36647: LD_VAR 0 1
36651: PPUSH
36652: LD_VAR 0 2
36656: PPUSH
36657: LD_VAR 0 1
36661: PUSH
36662: LD_VAR 0 3
36666: ARRAY
36667: PPUSH
36668: CALL_OW 1
36672: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36673: LD_ADDR_VAR 0 1
36677: PUSH
36678: LD_VAR 0 1
36682: PPUSH
36683: LD_VAR 0 3
36687: PPUSH
36688: LD_VAR 0 5
36692: PPUSH
36693: CALL_OW 1
36697: ST_TO_ADDR
// result := list ;
36698: LD_ADDR_VAR 0 4
36702: PUSH
36703: LD_VAR 0 1
36707: ST_TO_ADDR
// end ;
36708: LD_VAR 0 4
36712: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36713: LD_INT 0
36715: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36716: LD_ADDR_VAR 0 5
36720: PUSH
36721: LD_VAR 0 1
36725: PPUSH
36726: CALL_OW 250
36730: PPUSH
36731: LD_VAR 0 1
36735: PPUSH
36736: CALL_OW 251
36740: PPUSH
36741: LD_VAR 0 2
36745: PPUSH
36746: LD_VAR 0 3
36750: PPUSH
36751: LD_VAR 0 4
36755: PPUSH
36756: CALL 36766 0 5
36760: ST_TO_ADDR
// end ;
36761: LD_VAR 0 5
36765: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36766: LD_INT 0
36768: PPUSH
36769: PPUSH
36770: PPUSH
36771: PPUSH
// if not list then
36772: LD_VAR 0 3
36776: NOT
36777: IFFALSE 36781
// exit ;
36779: GO 37169
// result := [ ] ;
36781: LD_ADDR_VAR 0 6
36785: PUSH
36786: EMPTY
36787: ST_TO_ADDR
// for i in list do
36788: LD_ADDR_VAR 0 7
36792: PUSH
36793: LD_VAR 0 3
36797: PUSH
36798: FOR_IN
36799: IFFALSE 37001
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36801: LD_ADDR_VAR 0 9
36805: PUSH
36806: LD_VAR 0 7
36810: PPUSH
36811: LD_VAR 0 1
36815: PPUSH
36816: LD_VAR 0 2
36820: PPUSH
36821: CALL_OW 297
36825: ST_TO_ADDR
// if not result then
36826: LD_VAR 0 6
36830: NOT
36831: IFFALSE 36857
// result := [ [ i , tmp ] ] else
36833: LD_ADDR_VAR 0 6
36837: PUSH
36838: LD_VAR 0 7
36842: PUSH
36843: LD_VAR 0 9
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: EMPTY
36853: LIST
36854: ST_TO_ADDR
36855: GO 36999
// begin if result [ result ] [ 2 ] < tmp then
36857: LD_VAR 0 6
36861: PUSH
36862: LD_VAR 0 6
36866: ARRAY
36867: PUSH
36868: LD_INT 2
36870: ARRAY
36871: PUSH
36872: LD_VAR 0 9
36876: LESS
36877: IFFALSE 36919
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36879: LD_ADDR_VAR 0 6
36883: PUSH
36884: LD_VAR 0 6
36888: PPUSH
36889: LD_VAR 0 6
36893: PUSH
36894: LD_INT 1
36896: PLUS
36897: PPUSH
36898: LD_VAR 0 7
36902: PUSH
36903: LD_VAR 0 9
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PPUSH
36912: CALL_OW 2
36916: ST_TO_ADDR
36917: GO 36999
// for j = 1 to result do
36919: LD_ADDR_VAR 0 8
36923: PUSH
36924: DOUBLE
36925: LD_INT 1
36927: DEC
36928: ST_TO_ADDR
36929: LD_VAR 0 6
36933: PUSH
36934: FOR_TO
36935: IFFALSE 36997
// begin if tmp < result [ j ] [ 2 ] then
36937: LD_VAR 0 9
36941: PUSH
36942: LD_VAR 0 6
36946: PUSH
36947: LD_VAR 0 8
36951: ARRAY
36952: PUSH
36953: LD_INT 2
36955: ARRAY
36956: LESS
36957: IFFALSE 36995
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36959: LD_ADDR_VAR 0 6
36963: PUSH
36964: LD_VAR 0 6
36968: PPUSH
36969: LD_VAR 0 8
36973: PPUSH
36974: LD_VAR 0 7
36978: PUSH
36979: LD_VAR 0 9
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PPUSH
36988: CALL_OW 2
36992: ST_TO_ADDR
// break ;
36993: GO 36997
// end ; end ;
36995: GO 36934
36997: POP
36998: POP
// end ; end ;
36999: GO 36798
37001: POP
37002: POP
// if result and not asc then
37003: LD_VAR 0 6
37007: PUSH
37008: LD_VAR 0 4
37012: NOT
37013: AND
37014: IFFALSE 37089
// begin tmp := result ;
37016: LD_ADDR_VAR 0 9
37020: PUSH
37021: LD_VAR 0 6
37025: ST_TO_ADDR
// for i = tmp downto 1 do
37026: LD_ADDR_VAR 0 7
37030: PUSH
37031: DOUBLE
37032: LD_VAR 0 9
37036: INC
37037: ST_TO_ADDR
37038: LD_INT 1
37040: PUSH
37041: FOR_DOWNTO
37042: IFFALSE 37087
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37044: LD_ADDR_VAR 0 6
37048: PUSH
37049: LD_VAR 0 6
37053: PPUSH
37054: LD_VAR 0 9
37058: PUSH
37059: LD_VAR 0 7
37063: MINUS
37064: PUSH
37065: LD_INT 1
37067: PLUS
37068: PPUSH
37069: LD_VAR 0 9
37073: PUSH
37074: LD_VAR 0 7
37078: ARRAY
37079: PPUSH
37080: CALL_OW 1
37084: ST_TO_ADDR
37085: GO 37041
37087: POP
37088: POP
// end ; tmp := [ ] ;
37089: LD_ADDR_VAR 0 9
37093: PUSH
37094: EMPTY
37095: ST_TO_ADDR
// if mode then
37096: LD_VAR 0 5
37100: IFFALSE 37169
// begin for i = 1 to result do
37102: LD_ADDR_VAR 0 7
37106: PUSH
37107: DOUBLE
37108: LD_INT 1
37110: DEC
37111: ST_TO_ADDR
37112: LD_VAR 0 6
37116: PUSH
37117: FOR_TO
37118: IFFALSE 37157
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37120: LD_ADDR_VAR 0 9
37124: PUSH
37125: LD_VAR 0 9
37129: PPUSH
37130: LD_VAR 0 7
37134: PPUSH
37135: LD_VAR 0 6
37139: PUSH
37140: LD_VAR 0 7
37144: ARRAY
37145: PUSH
37146: LD_INT 1
37148: ARRAY
37149: PPUSH
37150: CALL_OW 1
37154: ST_TO_ADDR
37155: GO 37117
37157: POP
37158: POP
// result := tmp ;
37159: LD_ADDR_VAR 0 6
37163: PUSH
37164: LD_VAR 0 9
37168: ST_TO_ADDR
// end ; end ;
37169: LD_VAR 0 6
37173: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37174: LD_INT 0
37176: PPUSH
37177: PPUSH
37178: PPUSH
37179: PPUSH
37180: PPUSH
37181: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37182: LD_ADDR_VAR 0 5
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: EMPTY
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: ST_TO_ADDR
// if not x or not y then
37204: LD_VAR 0 2
37208: NOT
37209: PUSH
37210: LD_VAR 0 3
37214: NOT
37215: OR
37216: IFFALSE 37220
// exit ;
37218: GO 38872
// if not range then
37220: LD_VAR 0 4
37224: NOT
37225: IFFALSE 37235
// range := 10 ;
37227: LD_ADDR_VAR 0 4
37231: PUSH
37232: LD_INT 10
37234: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37235: LD_ADDR_VAR 0 8
37239: PUSH
37240: LD_INT 81
37242: PUSH
37243: LD_VAR 0 1
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 92
37254: PUSH
37255: LD_VAR 0 2
37259: PUSH
37260: LD_VAR 0 3
37264: PUSH
37265: LD_VAR 0 4
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 3
37278: PUSH
37279: LD_INT 21
37281: PUSH
37282: LD_INT 3
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: PPUSH
37298: CALL_OW 69
37302: ST_TO_ADDR
// if not tmp then
37303: LD_VAR 0 8
37307: NOT
37308: IFFALSE 37312
// exit ;
37310: GO 38872
// for i in tmp do
37312: LD_ADDR_VAR 0 6
37316: PUSH
37317: LD_VAR 0 8
37321: PUSH
37322: FOR_IN
37323: IFFALSE 38847
// begin points := [ 0 , 0 , 0 ] ;
37325: LD_ADDR_VAR 0 9
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: ST_TO_ADDR
// bpoints := 1 ;
37344: LD_ADDR_VAR 0 10
37348: PUSH
37349: LD_INT 1
37351: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37352: LD_VAR 0 6
37356: PPUSH
37357: CALL_OW 247
37361: PUSH
37362: LD_INT 1
37364: DOUBLE
37365: EQUAL
37366: IFTRUE 37370
37368: GO 37948
37370: POP
// begin if GetClass ( i ) = 1 then
37371: LD_VAR 0 6
37375: PPUSH
37376: CALL_OW 257
37380: PUSH
37381: LD_INT 1
37383: EQUAL
37384: IFFALSE 37405
// points := [ 10 , 5 , 3 ] ;
37386: LD_ADDR_VAR 0 9
37390: PUSH
37391: LD_INT 10
37393: PUSH
37394: LD_INT 5
37396: PUSH
37397: LD_INT 3
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37405: LD_VAR 0 6
37409: PPUSH
37410: CALL_OW 257
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: LD_INT 3
37420: PUSH
37421: LD_INT 4
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: LIST
37428: IN
37429: IFFALSE 37450
// points := [ 3 , 2 , 1 ] ;
37431: LD_ADDR_VAR 0 9
37435: PUSH
37436: LD_INT 3
37438: PUSH
37439: LD_INT 2
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37450: LD_VAR 0 6
37454: PPUSH
37455: CALL_OW 257
37459: PUSH
37460: LD_INT 5
37462: EQUAL
37463: IFFALSE 37484
// points := [ 130 , 5 , 2 ] ;
37465: LD_ADDR_VAR 0 9
37469: PUSH
37470: LD_INT 130
37472: PUSH
37473: LD_INT 5
37475: PUSH
37476: LD_INT 2
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37484: LD_VAR 0 6
37488: PPUSH
37489: CALL_OW 257
37493: PUSH
37494: LD_INT 8
37496: EQUAL
37497: IFFALSE 37518
// points := [ 35 , 35 , 30 ] ;
37499: LD_ADDR_VAR 0 9
37503: PUSH
37504: LD_INT 35
37506: PUSH
37507: LD_INT 35
37509: PUSH
37510: LD_INT 30
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37518: LD_VAR 0 6
37522: PPUSH
37523: CALL_OW 257
37527: PUSH
37528: LD_INT 9
37530: EQUAL
37531: IFFALSE 37552
// points := [ 20 , 55 , 40 ] ;
37533: LD_ADDR_VAR 0 9
37537: PUSH
37538: LD_INT 20
37540: PUSH
37541: LD_INT 55
37543: PUSH
37544: LD_INT 40
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: LIST
37551: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37552: LD_VAR 0 6
37556: PPUSH
37557: CALL_OW 257
37561: PUSH
37562: LD_INT 12
37564: PUSH
37565: LD_INT 16
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: IN
37572: IFFALSE 37593
// points := [ 5 , 3 , 2 ] ;
37574: LD_ADDR_VAR 0 9
37578: PUSH
37579: LD_INT 5
37581: PUSH
37582: LD_INT 3
37584: PUSH
37585: LD_INT 2
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37593: LD_VAR 0 6
37597: PPUSH
37598: CALL_OW 257
37602: PUSH
37603: LD_INT 17
37605: EQUAL
37606: IFFALSE 37627
// points := [ 100 , 50 , 75 ] ;
37608: LD_ADDR_VAR 0 9
37612: PUSH
37613: LD_INT 100
37615: PUSH
37616: LD_INT 50
37618: PUSH
37619: LD_INT 75
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: LIST
37626: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37627: LD_VAR 0 6
37631: PPUSH
37632: CALL_OW 257
37636: PUSH
37637: LD_INT 15
37639: EQUAL
37640: IFFALSE 37661
// points := [ 10 , 5 , 3 ] ;
37642: LD_ADDR_VAR 0 9
37646: PUSH
37647: LD_INT 10
37649: PUSH
37650: LD_INT 5
37652: PUSH
37653: LD_INT 3
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37661: LD_VAR 0 6
37665: PPUSH
37666: CALL_OW 257
37670: PUSH
37671: LD_INT 14
37673: EQUAL
37674: IFFALSE 37695
// points := [ 10 , 0 , 0 ] ;
37676: LD_ADDR_VAR 0 9
37680: PUSH
37681: LD_INT 10
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37695: LD_VAR 0 6
37699: PPUSH
37700: CALL_OW 257
37704: PUSH
37705: LD_INT 11
37707: EQUAL
37708: IFFALSE 37729
// points := [ 30 , 10 , 5 ] ;
37710: LD_ADDR_VAR 0 9
37714: PUSH
37715: LD_INT 30
37717: PUSH
37718: LD_INT 10
37720: PUSH
37721: LD_INT 5
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37729: LD_VAR 0 1
37733: PPUSH
37734: LD_INT 5
37736: PPUSH
37737: CALL_OW 321
37741: PUSH
37742: LD_INT 2
37744: EQUAL
37745: IFFALSE 37762
// bpoints := bpoints * 1.8 ;
37747: LD_ADDR_VAR 0 10
37751: PUSH
37752: LD_VAR 0 10
37756: PUSH
37757: LD_REAL  1.80000000000000E+0000
37760: MUL
37761: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37762: LD_VAR 0 6
37766: PPUSH
37767: CALL_OW 257
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 2
37777: PUSH
37778: LD_INT 3
37780: PUSH
37781: LD_INT 4
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: IN
37790: PUSH
37791: LD_VAR 0 1
37795: PPUSH
37796: LD_INT 51
37798: PPUSH
37799: CALL_OW 321
37803: PUSH
37804: LD_INT 2
37806: EQUAL
37807: AND
37808: IFFALSE 37825
// bpoints := bpoints * 1.2 ;
37810: LD_ADDR_VAR 0 10
37814: PUSH
37815: LD_VAR 0 10
37819: PUSH
37820: LD_REAL  1.20000000000000E+0000
37823: MUL
37824: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37825: LD_VAR 0 6
37829: PPUSH
37830: CALL_OW 257
37834: PUSH
37835: LD_INT 5
37837: PUSH
37838: LD_INT 7
37840: PUSH
37841: LD_INT 9
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: IN
37849: PUSH
37850: LD_VAR 0 1
37854: PPUSH
37855: LD_INT 52
37857: PPUSH
37858: CALL_OW 321
37862: PUSH
37863: LD_INT 2
37865: EQUAL
37866: AND
37867: IFFALSE 37884
// bpoints := bpoints * 1.5 ;
37869: LD_ADDR_VAR 0 10
37873: PUSH
37874: LD_VAR 0 10
37878: PUSH
37879: LD_REAL  1.50000000000000E+0000
37882: MUL
37883: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37884: LD_VAR 0 1
37888: PPUSH
37889: LD_INT 66
37891: PPUSH
37892: CALL_OW 321
37896: PUSH
37897: LD_INT 2
37899: EQUAL
37900: IFFALSE 37917
// bpoints := bpoints * 1.1 ;
37902: LD_ADDR_VAR 0 10
37906: PUSH
37907: LD_VAR 0 10
37911: PUSH
37912: LD_REAL  1.10000000000000E+0000
37915: MUL
37916: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37917: LD_ADDR_VAR 0 10
37921: PUSH
37922: LD_VAR 0 10
37926: PUSH
37927: LD_VAR 0 6
37931: PPUSH
37932: LD_INT 1
37934: PPUSH
37935: CALL_OW 259
37939: PUSH
37940: LD_REAL  1.15000000000000E+0000
37943: MUL
37944: MUL
37945: ST_TO_ADDR
// end ; unit_vehicle :
37946: GO 38776
37948: LD_INT 2
37950: DOUBLE
37951: EQUAL
37952: IFTRUE 37956
37954: GO 38764
37956: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37957: LD_VAR 0 6
37961: PPUSH
37962: CALL_OW 264
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: LD_INT 42
37972: PUSH
37973: LD_INT 24
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: LIST
37980: IN
37981: IFFALSE 38002
// points := [ 25 , 5 , 3 ] ;
37983: LD_ADDR_VAR 0 9
37987: PUSH
37988: LD_INT 25
37990: PUSH
37991: LD_INT 5
37993: PUSH
37994: LD_INT 3
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: LIST
38001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38002: LD_VAR 0 6
38006: PPUSH
38007: CALL_OW 264
38011: PUSH
38012: LD_INT 4
38014: PUSH
38015: LD_INT 43
38017: PUSH
38018: LD_INT 25
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: IN
38026: IFFALSE 38047
// points := [ 40 , 15 , 5 ] ;
38028: LD_ADDR_VAR 0 9
38032: PUSH
38033: LD_INT 40
38035: PUSH
38036: LD_INT 15
38038: PUSH
38039: LD_INT 5
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38047: LD_VAR 0 6
38051: PPUSH
38052: CALL_OW 264
38056: PUSH
38057: LD_INT 3
38059: PUSH
38060: LD_INT 23
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: IN
38067: IFFALSE 38088
// points := [ 7 , 25 , 8 ] ;
38069: LD_ADDR_VAR 0 9
38073: PUSH
38074: LD_INT 7
38076: PUSH
38077: LD_INT 25
38079: PUSH
38080: LD_INT 8
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: LIST
38087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38088: LD_VAR 0 6
38092: PPUSH
38093: CALL_OW 264
38097: PUSH
38098: LD_INT 5
38100: PUSH
38101: LD_INT 27
38103: PUSH
38104: LD_INT 44
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: LIST
38111: IN
38112: IFFALSE 38133
// points := [ 14 , 50 , 16 ] ;
38114: LD_ADDR_VAR 0 9
38118: PUSH
38119: LD_INT 14
38121: PUSH
38122: LD_INT 50
38124: PUSH
38125: LD_INT 16
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: LIST
38132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38133: LD_VAR 0 6
38137: PPUSH
38138: CALL_OW 264
38142: PUSH
38143: LD_INT 6
38145: PUSH
38146: LD_INT 46
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: IN
38153: IFFALSE 38174
// points := [ 32 , 120 , 70 ] ;
38155: LD_ADDR_VAR 0 9
38159: PUSH
38160: LD_INT 32
38162: PUSH
38163: LD_INT 120
38165: PUSH
38166: LD_INT 70
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: LIST
38173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38174: LD_VAR 0 6
38178: PPUSH
38179: CALL_OW 264
38183: PUSH
38184: LD_INT 7
38186: PUSH
38187: LD_INT 28
38189: PUSH
38190: LD_INT 45
38192: PUSH
38193: LD_EXP 26
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: IN
38204: IFFALSE 38225
// points := [ 35 , 20 , 45 ] ;
38206: LD_ADDR_VAR 0 9
38210: PUSH
38211: LD_INT 35
38213: PUSH
38214: LD_INT 20
38216: PUSH
38217: LD_INT 45
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38225: LD_VAR 0 6
38229: PPUSH
38230: CALL_OW 264
38234: PUSH
38235: LD_INT 47
38237: PUSH
38238: EMPTY
38239: LIST
38240: IN
38241: IFFALSE 38262
// points := [ 67 , 45 , 75 ] ;
38243: LD_ADDR_VAR 0 9
38247: PUSH
38248: LD_INT 67
38250: PUSH
38251: LD_INT 45
38253: PUSH
38254: LD_INT 75
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38262: LD_VAR 0 6
38266: PPUSH
38267: CALL_OW 264
38271: PUSH
38272: LD_INT 26
38274: PUSH
38275: EMPTY
38276: LIST
38277: IN
38278: IFFALSE 38299
// points := [ 120 , 30 , 80 ] ;
38280: LD_ADDR_VAR 0 9
38284: PUSH
38285: LD_INT 120
38287: PUSH
38288: LD_INT 30
38290: PUSH
38291: LD_INT 80
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38299: LD_VAR 0 6
38303: PPUSH
38304: CALL_OW 264
38308: PUSH
38309: LD_INT 22
38311: PUSH
38312: EMPTY
38313: LIST
38314: IN
38315: IFFALSE 38336
// points := [ 40 , 1 , 1 ] ;
38317: LD_ADDR_VAR 0 9
38321: PUSH
38322: LD_INT 40
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: LIST
38335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38336: LD_VAR 0 6
38340: PPUSH
38341: CALL_OW 264
38345: PUSH
38346: LD_INT 29
38348: PUSH
38349: EMPTY
38350: LIST
38351: IN
38352: IFFALSE 38373
// points := [ 70 , 200 , 400 ] ;
38354: LD_ADDR_VAR 0 9
38358: PUSH
38359: LD_INT 70
38361: PUSH
38362: LD_INT 200
38364: PUSH
38365: LD_INT 400
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38373: LD_VAR 0 6
38377: PPUSH
38378: CALL_OW 264
38382: PUSH
38383: LD_INT 14
38385: PUSH
38386: LD_INT 53
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: IN
38393: IFFALSE 38414
// points := [ 40 , 10 , 20 ] ;
38395: LD_ADDR_VAR 0 9
38399: PUSH
38400: LD_INT 40
38402: PUSH
38403: LD_INT 10
38405: PUSH
38406: LD_INT 20
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38414: LD_VAR 0 6
38418: PPUSH
38419: CALL_OW 264
38423: PUSH
38424: LD_INT 9
38426: PUSH
38427: EMPTY
38428: LIST
38429: IN
38430: IFFALSE 38451
// points := [ 5 , 70 , 20 ] ;
38432: LD_ADDR_VAR 0 9
38436: PUSH
38437: LD_INT 5
38439: PUSH
38440: LD_INT 70
38442: PUSH
38443: LD_INT 20
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38451: LD_VAR 0 6
38455: PPUSH
38456: CALL_OW 264
38460: PUSH
38461: LD_INT 10
38463: PUSH
38464: EMPTY
38465: LIST
38466: IN
38467: IFFALSE 38488
// points := [ 35 , 110 , 70 ] ;
38469: LD_ADDR_VAR 0 9
38473: PUSH
38474: LD_INT 35
38476: PUSH
38477: LD_INT 110
38479: PUSH
38480: LD_INT 70
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38488: LD_VAR 0 6
38492: PPUSH
38493: CALL_OW 265
38497: PUSH
38498: LD_INT 25
38500: EQUAL
38501: IFFALSE 38522
// points := [ 80 , 65 , 100 ] ;
38503: LD_ADDR_VAR 0 9
38507: PUSH
38508: LD_INT 80
38510: PUSH
38511: LD_INT 65
38513: PUSH
38514: LD_INT 100
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: LIST
38521: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38522: LD_VAR 0 6
38526: PPUSH
38527: CALL_OW 263
38531: PUSH
38532: LD_INT 1
38534: EQUAL
38535: IFFALSE 38570
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38537: LD_ADDR_VAR 0 10
38541: PUSH
38542: LD_VAR 0 10
38546: PUSH
38547: LD_VAR 0 6
38551: PPUSH
38552: CALL_OW 311
38556: PPUSH
38557: LD_INT 3
38559: PPUSH
38560: CALL_OW 259
38564: PUSH
38565: LD_INT 4
38567: MUL
38568: MUL
38569: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38570: LD_VAR 0 6
38574: PPUSH
38575: CALL_OW 263
38579: PUSH
38580: LD_INT 2
38582: EQUAL
38583: IFFALSE 38634
// begin j := IsControledBy ( i ) ;
38585: LD_ADDR_VAR 0 7
38589: PUSH
38590: LD_VAR 0 6
38594: PPUSH
38595: CALL_OW 312
38599: ST_TO_ADDR
// if j then
38600: LD_VAR 0 7
38604: IFFALSE 38634
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38606: LD_ADDR_VAR 0 10
38610: PUSH
38611: LD_VAR 0 10
38615: PUSH
38616: LD_VAR 0 7
38620: PPUSH
38621: LD_INT 3
38623: PPUSH
38624: CALL_OW 259
38628: PUSH
38629: LD_INT 3
38631: MUL
38632: MUL
38633: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38634: LD_VAR 0 6
38638: PPUSH
38639: CALL_OW 264
38643: PUSH
38644: LD_INT 5
38646: PUSH
38647: LD_INT 6
38649: PUSH
38650: LD_INT 46
38652: PUSH
38653: LD_INT 44
38655: PUSH
38656: LD_INT 47
38658: PUSH
38659: LD_INT 45
38661: PUSH
38662: LD_INT 28
38664: PUSH
38665: LD_INT 7
38667: PUSH
38668: LD_INT 27
38670: PUSH
38671: LD_INT 29
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: IN
38686: PUSH
38687: LD_VAR 0 1
38691: PPUSH
38692: LD_INT 52
38694: PPUSH
38695: CALL_OW 321
38699: PUSH
38700: LD_INT 2
38702: EQUAL
38703: AND
38704: IFFALSE 38721
// bpoints := bpoints * 1.2 ;
38706: LD_ADDR_VAR 0 10
38710: PUSH
38711: LD_VAR 0 10
38715: PUSH
38716: LD_REAL  1.20000000000000E+0000
38719: MUL
38720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38721: LD_VAR 0 6
38725: PPUSH
38726: CALL_OW 264
38730: PUSH
38731: LD_INT 6
38733: PUSH
38734: LD_INT 46
38736: PUSH
38737: LD_INT 47
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: IN
38745: IFFALSE 38762
// bpoints := bpoints * 1.2 ;
38747: LD_ADDR_VAR 0 10
38751: PUSH
38752: LD_VAR 0 10
38756: PUSH
38757: LD_REAL  1.20000000000000E+0000
38760: MUL
38761: ST_TO_ADDR
// end ; unit_building :
38762: GO 38776
38764: LD_INT 3
38766: DOUBLE
38767: EQUAL
38768: IFTRUE 38772
38770: GO 38775
38772: POP
// ; end ;
38773: GO 38776
38775: POP
// for j = 1 to 3 do
38776: LD_ADDR_VAR 0 7
38780: PUSH
38781: DOUBLE
38782: LD_INT 1
38784: DEC
38785: ST_TO_ADDR
38786: LD_INT 3
38788: PUSH
38789: FOR_TO
38790: IFFALSE 38843
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38792: LD_ADDR_VAR 0 5
38796: PUSH
38797: LD_VAR 0 5
38801: PPUSH
38802: LD_VAR 0 7
38806: PPUSH
38807: LD_VAR 0 5
38811: PUSH
38812: LD_VAR 0 7
38816: ARRAY
38817: PUSH
38818: LD_VAR 0 9
38822: PUSH
38823: LD_VAR 0 7
38827: ARRAY
38828: PUSH
38829: LD_VAR 0 10
38833: MUL
38834: PLUS
38835: PPUSH
38836: CALL_OW 1
38840: ST_TO_ADDR
38841: GO 38789
38843: POP
38844: POP
// end ;
38845: GO 37322
38847: POP
38848: POP
// result := Replace ( result , 4 , tmp ) ;
38849: LD_ADDR_VAR 0 5
38853: PUSH
38854: LD_VAR 0 5
38858: PPUSH
38859: LD_INT 4
38861: PPUSH
38862: LD_VAR 0 8
38866: PPUSH
38867: CALL_OW 1
38871: ST_TO_ADDR
// end ;
38872: LD_VAR 0 5
38876: RET
// export function DangerAtRange ( unit , range ) ; begin
38877: LD_INT 0
38879: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38880: LD_ADDR_VAR 0 3
38884: PUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 255
38894: PPUSH
38895: LD_VAR 0 1
38899: PPUSH
38900: CALL_OW 250
38904: PPUSH
38905: LD_VAR 0 1
38909: PPUSH
38910: CALL_OW 251
38914: PPUSH
38915: LD_VAR 0 2
38919: PPUSH
38920: CALL 37174 0 4
38924: ST_TO_ADDR
// end ;
38925: LD_VAR 0 3
38929: RET
// export function DangerInArea ( side , area ) ; begin
38930: LD_INT 0
38932: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38933: LD_ADDR_VAR 0 3
38937: PUSH
38938: LD_VAR 0 2
38942: PPUSH
38943: LD_INT 81
38945: PUSH
38946: LD_VAR 0 1
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PPUSH
38955: CALL_OW 70
38959: ST_TO_ADDR
// end ;
38960: LD_VAR 0 3
38964: RET
// export function IsExtension ( b ) ; begin
38965: LD_INT 0
38967: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38968: LD_ADDR_VAR 0 2
38972: PUSH
38973: LD_VAR 0 1
38977: PUSH
38978: LD_INT 23
38980: PUSH
38981: LD_INT 20
38983: PUSH
38984: LD_INT 22
38986: PUSH
38987: LD_INT 17
38989: PUSH
38990: LD_INT 24
38992: PUSH
38993: LD_INT 21
38995: PUSH
38996: LD_INT 19
38998: PUSH
38999: LD_INT 16
39001: PUSH
39002: LD_INT 25
39004: PUSH
39005: LD_INT 18
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: IN
39020: ST_TO_ADDR
// end ;
39021: LD_VAR 0 2
39025: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39026: LD_INT 0
39028: PPUSH
39029: PPUSH
39030: PPUSH
// result := [ ] ;
39031: LD_ADDR_VAR 0 4
39035: PUSH
39036: EMPTY
39037: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39038: LD_ADDR_VAR 0 5
39042: PUSH
39043: LD_VAR 0 2
39047: PPUSH
39048: LD_INT 21
39050: PUSH
39051: LD_INT 3
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PPUSH
39058: CALL_OW 70
39062: ST_TO_ADDR
// if not tmp then
39063: LD_VAR 0 5
39067: NOT
39068: IFFALSE 39072
// exit ;
39070: GO 39136
// if checkLink then
39072: LD_VAR 0 3
39076: IFFALSE 39126
// begin for i in tmp do
39078: LD_ADDR_VAR 0 6
39082: PUSH
39083: LD_VAR 0 5
39087: PUSH
39088: FOR_IN
39089: IFFALSE 39124
// if GetBase ( i ) <> base then
39091: LD_VAR 0 6
39095: PPUSH
39096: CALL_OW 274
39100: PUSH
39101: LD_VAR 0 1
39105: NONEQUAL
39106: IFFALSE 39122
// ComLinkToBase ( base , i ) ;
39108: LD_VAR 0 1
39112: PPUSH
39113: LD_VAR 0 6
39117: PPUSH
39118: CALL_OW 169
39122: GO 39088
39124: POP
39125: POP
// end ; result := tmp ;
39126: LD_ADDR_VAR 0 4
39130: PUSH
39131: LD_VAR 0 5
39135: ST_TO_ADDR
// end ;
39136: LD_VAR 0 4
39140: RET
// export function ComComplete ( units , b ) ; var i ; begin
39141: LD_INT 0
39143: PPUSH
39144: PPUSH
// if not units then
39145: LD_VAR 0 1
39149: NOT
39150: IFFALSE 39154
// exit ;
39152: GO 39244
// for i in units do
39154: LD_ADDR_VAR 0 4
39158: PUSH
39159: LD_VAR 0 1
39163: PUSH
39164: FOR_IN
39165: IFFALSE 39242
// if BuildingStatus ( b ) = bs_build then
39167: LD_VAR 0 2
39171: PPUSH
39172: CALL_OW 461
39176: PUSH
39177: LD_INT 1
39179: EQUAL
39180: IFFALSE 39240
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39182: LD_VAR 0 4
39186: PPUSH
39187: LD_STRING h
39189: PUSH
39190: LD_VAR 0 2
39194: PPUSH
39195: CALL_OW 250
39199: PUSH
39200: LD_VAR 0 2
39204: PPUSH
39205: CALL_OW 251
39209: PUSH
39210: LD_VAR 0 2
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: PUSH
39233: EMPTY
39234: LIST
39235: PPUSH
39236: CALL_OW 446
39240: GO 39164
39242: POP
39243: POP
// end ;
39244: LD_VAR 0 3
39248: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39249: LD_INT 0
39251: PPUSH
39252: PPUSH
39253: PPUSH
39254: PPUSH
39255: PPUSH
39256: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39257: LD_VAR 0 1
39261: NOT
39262: PUSH
39263: LD_VAR 0 1
39267: PPUSH
39268: CALL_OW 263
39272: PUSH
39273: LD_INT 2
39275: NONEQUAL
39276: OR
39277: IFFALSE 39281
// exit ;
39279: GO 39597
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39281: LD_ADDR_VAR 0 6
39285: PUSH
39286: LD_INT 22
39288: PUSH
39289: LD_VAR 0 1
39293: PPUSH
39294: CALL_OW 255
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 2
39305: PUSH
39306: LD_INT 30
39308: PUSH
39309: LD_INT 36
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 34
39318: PUSH
39319: LD_INT 31
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PPUSH
39335: CALL_OW 69
39339: ST_TO_ADDR
// if not tmp then
39340: LD_VAR 0 6
39344: NOT
39345: IFFALSE 39349
// exit ;
39347: GO 39597
// result := [ ] ;
39349: LD_ADDR_VAR 0 2
39353: PUSH
39354: EMPTY
39355: ST_TO_ADDR
// for i in tmp do
39356: LD_ADDR_VAR 0 3
39360: PUSH
39361: LD_VAR 0 6
39365: PUSH
39366: FOR_IN
39367: IFFALSE 39438
// begin t := UnitsInside ( i ) ;
39369: LD_ADDR_VAR 0 4
39373: PUSH
39374: LD_VAR 0 3
39378: PPUSH
39379: CALL_OW 313
39383: ST_TO_ADDR
// if t then
39384: LD_VAR 0 4
39388: IFFALSE 39436
// for j in t do
39390: LD_ADDR_VAR 0 7
39394: PUSH
39395: LD_VAR 0 4
39399: PUSH
39400: FOR_IN
39401: IFFALSE 39434
// result := Replace ( result , result + 1 , j ) ;
39403: LD_ADDR_VAR 0 2
39407: PUSH
39408: LD_VAR 0 2
39412: PPUSH
39413: LD_VAR 0 2
39417: PUSH
39418: LD_INT 1
39420: PLUS
39421: PPUSH
39422: LD_VAR 0 7
39426: PPUSH
39427: CALL_OW 1
39431: ST_TO_ADDR
39432: GO 39400
39434: POP
39435: POP
// end ;
39436: GO 39366
39438: POP
39439: POP
// if not result then
39440: LD_VAR 0 2
39444: NOT
39445: IFFALSE 39449
// exit ;
39447: GO 39597
// mech := result [ 1 ] ;
39449: LD_ADDR_VAR 0 5
39453: PUSH
39454: LD_VAR 0 2
39458: PUSH
39459: LD_INT 1
39461: ARRAY
39462: ST_TO_ADDR
// if result > 1 then
39463: LD_VAR 0 2
39467: PUSH
39468: LD_INT 1
39470: GREATER
39471: IFFALSE 39583
// begin for i = 2 to result do
39473: LD_ADDR_VAR 0 3
39477: PUSH
39478: DOUBLE
39479: LD_INT 2
39481: DEC
39482: ST_TO_ADDR
39483: LD_VAR 0 2
39487: PUSH
39488: FOR_TO
39489: IFFALSE 39581
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39491: LD_ADDR_VAR 0 4
39495: PUSH
39496: LD_VAR 0 2
39500: PUSH
39501: LD_VAR 0 3
39505: ARRAY
39506: PPUSH
39507: LD_INT 3
39509: PPUSH
39510: CALL_OW 259
39514: PUSH
39515: LD_VAR 0 2
39519: PUSH
39520: LD_VAR 0 3
39524: ARRAY
39525: PPUSH
39526: CALL_OW 432
39530: MINUS
39531: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39532: LD_VAR 0 4
39536: PUSH
39537: LD_VAR 0 5
39541: PPUSH
39542: LD_INT 3
39544: PPUSH
39545: CALL_OW 259
39549: PUSH
39550: LD_VAR 0 5
39554: PPUSH
39555: CALL_OW 432
39559: MINUS
39560: GREATEREQUAL
39561: IFFALSE 39579
// mech := result [ i ] ;
39563: LD_ADDR_VAR 0 5
39567: PUSH
39568: LD_VAR 0 2
39572: PUSH
39573: LD_VAR 0 3
39577: ARRAY
39578: ST_TO_ADDR
// end ;
39579: GO 39488
39581: POP
39582: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39583: LD_VAR 0 1
39587: PPUSH
39588: LD_VAR 0 5
39592: PPUSH
39593: CALL_OW 135
// end ;
39597: LD_VAR 0 2
39601: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39602: LD_INT 0
39604: PPUSH
39605: PPUSH
39606: PPUSH
39607: PPUSH
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
39612: PPUSH
39613: PPUSH
39614: PPUSH
39615: PPUSH
39616: PPUSH
// result := [ ] ;
39617: LD_ADDR_VAR 0 7
39621: PUSH
39622: EMPTY
39623: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39624: LD_VAR 0 1
39628: PPUSH
39629: CALL_OW 266
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: IN
39644: NOT
39645: IFFALSE 39649
// exit ;
39647: GO 41283
// if name then
39649: LD_VAR 0 3
39653: IFFALSE 39669
// SetBName ( base_dep , name ) ;
39655: LD_VAR 0 1
39659: PPUSH
39660: LD_VAR 0 3
39664: PPUSH
39665: CALL_OW 500
// base := GetBase ( base_dep ) ;
39669: LD_ADDR_VAR 0 15
39673: PUSH
39674: LD_VAR 0 1
39678: PPUSH
39679: CALL_OW 274
39683: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39684: LD_ADDR_VAR 0 16
39688: PUSH
39689: LD_VAR 0 1
39693: PPUSH
39694: CALL_OW 255
39698: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39699: LD_ADDR_VAR 0 17
39703: PUSH
39704: LD_VAR 0 1
39708: PPUSH
39709: CALL_OW 248
39713: ST_TO_ADDR
// if sources then
39714: LD_VAR 0 5
39718: IFFALSE 39765
// for i = 1 to 3 do
39720: LD_ADDR_VAR 0 8
39724: PUSH
39725: DOUBLE
39726: LD_INT 1
39728: DEC
39729: ST_TO_ADDR
39730: LD_INT 3
39732: PUSH
39733: FOR_TO
39734: IFFALSE 39763
// AddResourceType ( base , i , sources [ i ] ) ;
39736: LD_VAR 0 15
39740: PPUSH
39741: LD_VAR 0 8
39745: PPUSH
39746: LD_VAR 0 5
39750: PUSH
39751: LD_VAR 0 8
39755: ARRAY
39756: PPUSH
39757: CALL_OW 276
39761: GO 39733
39763: POP
39764: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39765: LD_ADDR_VAR 0 18
39769: PUSH
39770: LD_VAR 0 15
39774: PPUSH
39775: LD_VAR 0 2
39779: PPUSH
39780: LD_INT 1
39782: PPUSH
39783: CALL 39026 0 3
39787: ST_TO_ADDR
// InitHc ;
39788: CALL_OW 19
// InitUc ;
39792: CALL_OW 18
// uc_side := side ;
39796: LD_ADDR_OWVAR 20
39800: PUSH
39801: LD_VAR 0 16
39805: ST_TO_ADDR
// uc_nation := nation ;
39806: LD_ADDR_OWVAR 21
39810: PUSH
39811: LD_VAR 0 17
39815: ST_TO_ADDR
// if buildings then
39816: LD_VAR 0 18
39820: IFFALSE 41142
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39822: LD_ADDR_VAR 0 19
39826: PUSH
39827: LD_VAR 0 18
39831: PPUSH
39832: LD_INT 2
39834: PUSH
39835: LD_INT 30
39837: PUSH
39838: LD_INT 29
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 30
39847: PUSH
39848: LD_INT 30
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: PPUSH
39860: CALL_OW 72
39864: ST_TO_ADDR
// if tmp then
39865: LD_VAR 0 19
39869: IFFALSE 39917
// for i in tmp do
39871: LD_ADDR_VAR 0 8
39875: PUSH
39876: LD_VAR 0 19
39880: PUSH
39881: FOR_IN
39882: IFFALSE 39915
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39884: LD_VAR 0 8
39888: PPUSH
39889: CALL_OW 250
39893: PPUSH
39894: LD_VAR 0 8
39898: PPUSH
39899: CALL_OW 251
39903: PPUSH
39904: LD_VAR 0 16
39908: PPUSH
39909: CALL_OW 441
39913: GO 39881
39915: POP
39916: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39917: LD_VAR 0 18
39921: PPUSH
39922: LD_INT 2
39924: PUSH
39925: LD_INT 30
39927: PUSH
39928: LD_INT 32
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 30
39937: PUSH
39938: LD_INT 33
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: LIST
39949: PPUSH
39950: CALL_OW 72
39954: IFFALSE 40042
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39956: LD_ADDR_VAR 0 8
39960: PUSH
39961: LD_VAR 0 18
39965: PPUSH
39966: LD_INT 2
39968: PUSH
39969: LD_INT 30
39971: PUSH
39972: LD_INT 32
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 30
39981: PUSH
39982: LD_INT 33
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: PPUSH
39994: CALL_OW 72
39998: PUSH
39999: FOR_IN
40000: IFFALSE 40040
// begin if not GetBWeapon ( i ) then
40002: LD_VAR 0 8
40006: PPUSH
40007: CALL_OW 269
40011: NOT
40012: IFFALSE 40038
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40014: LD_VAR 0 8
40018: PPUSH
40019: LD_VAR 0 8
40023: PPUSH
40024: LD_VAR 0 2
40028: PPUSH
40029: CALL 41288 0 2
40033: PPUSH
40034: CALL_OW 431
// end ;
40038: GO 39999
40040: POP
40041: POP
// end ; for i = 1 to personel do
40042: LD_ADDR_VAR 0 8
40046: PUSH
40047: DOUBLE
40048: LD_INT 1
40050: DEC
40051: ST_TO_ADDR
40052: LD_VAR 0 6
40056: PUSH
40057: FOR_TO
40058: IFFALSE 41122
// begin if i > 4 then
40060: LD_VAR 0 8
40064: PUSH
40065: LD_INT 4
40067: GREATER
40068: IFFALSE 40072
// break ;
40070: GO 41122
// case i of 1 :
40072: LD_VAR 0 8
40076: PUSH
40077: LD_INT 1
40079: DOUBLE
40080: EQUAL
40081: IFTRUE 40085
40083: GO 40165
40085: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40086: LD_ADDR_VAR 0 12
40090: PUSH
40091: LD_VAR 0 18
40095: PPUSH
40096: LD_INT 22
40098: PUSH
40099: LD_VAR 0 16
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 58
40110: PUSH
40111: EMPTY
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: LD_INT 30
40119: PUSH
40120: LD_INT 32
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 30
40129: PUSH
40130: LD_INT 4
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 30
40139: PUSH
40140: LD_INT 5
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: LIST
40157: PPUSH
40158: CALL_OW 72
40162: ST_TO_ADDR
40163: GO 40387
40165: LD_INT 2
40167: DOUBLE
40168: EQUAL
40169: IFTRUE 40173
40171: GO 40235
40173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40174: LD_ADDR_VAR 0 12
40178: PUSH
40179: LD_VAR 0 18
40183: PPUSH
40184: LD_INT 22
40186: PUSH
40187: LD_VAR 0 16
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: LD_INT 30
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 30
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: LIST
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PPUSH
40228: CALL_OW 72
40232: ST_TO_ADDR
40233: GO 40387
40235: LD_INT 3
40237: DOUBLE
40238: EQUAL
40239: IFTRUE 40243
40241: GO 40305
40243: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40244: LD_ADDR_VAR 0 12
40248: PUSH
40249: LD_VAR 0 18
40253: PPUSH
40254: LD_INT 22
40256: PUSH
40257: LD_VAR 0 16
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 30
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 30
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PPUSH
40298: CALL_OW 72
40302: ST_TO_ADDR
40303: GO 40387
40305: LD_INT 4
40307: DOUBLE
40308: EQUAL
40309: IFTRUE 40313
40311: GO 40386
40313: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40314: LD_ADDR_VAR 0 12
40318: PUSH
40319: LD_VAR 0 18
40323: PPUSH
40324: LD_INT 22
40326: PUSH
40327: LD_VAR 0 16
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: LD_INT 30
40341: PUSH
40342: LD_INT 6
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 30
40351: PUSH
40352: LD_INT 7
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 30
40361: PUSH
40362: LD_INT 8
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PPUSH
40379: CALL_OW 72
40383: ST_TO_ADDR
40384: GO 40387
40386: POP
// if i = 1 then
40387: LD_VAR 0 8
40391: PUSH
40392: LD_INT 1
40394: EQUAL
40395: IFFALSE 40506
// begin tmp := [ ] ;
40397: LD_ADDR_VAR 0 19
40401: PUSH
40402: EMPTY
40403: ST_TO_ADDR
// for j in f do
40404: LD_ADDR_VAR 0 9
40408: PUSH
40409: LD_VAR 0 12
40413: PUSH
40414: FOR_IN
40415: IFFALSE 40488
// if GetBType ( j ) = b_bunker then
40417: LD_VAR 0 9
40421: PPUSH
40422: CALL_OW 266
40426: PUSH
40427: LD_INT 32
40429: EQUAL
40430: IFFALSE 40457
// tmp := Insert ( tmp , 1 , j ) else
40432: LD_ADDR_VAR 0 19
40436: PUSH
40437: LD_VAR 0 19
40441: PPUSH
40442: LD_INT 1
40444: PPUSH
40445: LD_VAR 0 9
40449: PPUSH
40450: CALL_OW 2
40454: ST_TO_ADDR
40455: GO 40486
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40457: LD_ADDR_VAR 0 19
40461: PUSH
40462: LD_VAR 0 19
40466: PPUSH
40467: LD_VAR 0 19
40471: PUSH
40472: LD_INT 1
40474: PLUS
40475: PPUSH
40476: LD_VAR 0 9
40480: PPUSH
40481: CALL_OW 2
40485: ST_TO_ADDR
40486: GO 40414
40488: POP
40489: POP
// if tmp then
40490: LD_VAR 0 19
40494: IFFALSE 40506
// f := tmp ;
40496: LD_ADDR_VAR 0 12
40500: PUSH
40501: LD_VAR 0 19
40505: ST_TO_ADDR
// end ; x := personel [ i ] ;
40506: LD_ADDR_VAR 0 13
40510: PUSH
40511: LD_VAR 0 6
40515: PUSH
40516: LD_VAR 0 8
40520: ARRAY
40521: ST_TO_ADDR
// if x = - 1 then
40522: LD_VAR 0 13
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: EQUAL
40531: IFFALSE 40740
// begin for j in f do
40533: LD_ADDR_VAR 0 9
40537: PUSH
40538: LD_VAR 0 12
40542: PUSH
40543: FOR_IN
40544: IFFALSE 40736
// repeat InitHc ;
40546: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40550: LD_VAR 0 9
40554: PPUSH
40555: CALL_OW 266
40559: PUSH
40560: LD_INT 5
40562: EQUAL
40563: IFFALSE 40633
// begin if UnitsInside ( j ) < 3 then
40565: LD_VAR 0 9
40569: PPUSH
40570: CALL_OW 313
40574: PUSH
40575: LD_INT 3
40577: LESS
40578: IFFALSE 40614
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40580: LD_INT 0
40582: PPUSH
40583: LD_INT 5
40585: PUSH
40586: LD_INT 8
40588: PUSH
40589: LD_INT 9
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: LIST
40596: PUSH
40597: LD_VAR 0 17
40601: ARRAY
40602: PPUSH
40603: LD_VAR 0 4
40607: PPUSH
40608: CALL_OW 380
40612: GO 40631
// PrepareHuman ( false , i , skill ) ;
40614: LD_INT 0
40616: PPUSH
40617: LD_VAR 0 8
40621: PPUSH
40622: LD_VAR 0 4
40626: PPUSH
40627: CALL_OW 380
// end else
40631: GO 40650
// PrepareHuman ( false , i , skill ) ;
40633: LD_INT 0
40635: PPUSH
40636: LD_VAR 0 8
40640: PPUSH
40641: LD_VAR 0 4
40645: PPUSH
40646: CALL_OW 380
// un := CreateHuman ;
40650: LD_ADDR_VAR 0 14
40654: PUSH
40655: CALL_OW 44
40659: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40660: LD_ADDR_VAR 0 7
40664: PUSH
40665: LD_VAR 0 7
40669: PPUSH
40670: LD_INT 1
40672: PPUSH
40673: LD_VAR 0 14
40677: PPUSH
40678: CALL_OW 2
40682: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40683: LD_VAR 0 14
40687: PPUSH
40688: LD_VAR 0 9
40692: PPUSH
40693: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40697: LD_VAR 0 9
40701: PPUSH
40702: CALL_OW 313
40706: PUSH
40707: LD_INT 6
40709: EQUAL
40710: PUSH
40711: LD_VAR 0 9
40715: PPUSH
40716: CALL_OW 266
40720: PUSH
40721: LD_INT 32
40723: PUSH
40724: LD_INT 31
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: IN
40731: OR
40732: IFFALSE 40546
40734: GO 40543
40736: POP
40737: POP
// end else
40738: GO 41120
// for j = 1 to x do
40740: LD_ADDR_VAR 0 9
40744: PUSH
40745: DOUBLE
40746: LD_INT 1
40748: DEC
40749: ST_TO_ADDR
40750: LD_VAR 0 13
40754: PUSH
40755: FOR_TO
40756: IFFALSE 41118
// begin InitHc ;
40758: CALL_OW 19
// if not f then
40762: LD_VAR 0 12
40766: NOT
40767: IFFALSE 40856
// begin PrepareHuman ( false , i , skill ) ;
40769: LD_INT 0
40771: PPUSH
40772: LD_VAR 0 8
40776: PPUSH
40777: LD_VAR 0 4
40781: PPUSH
40782: CALL_OW 380
// un := CreateHuman ;
40786: LD_ADDR_VAR 0 14
40790: PUSH
40791: CALL_OW 44
40795: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40796: LD_ADDR_VAR 0 7
40800: PUSH
40801: LD_VAR 0 7
40805: PPUSH
40806: LD_INT 1
40808: PPUSH
40809: LD_VAR 0 14
40813: PPUSH
40814: CALL_OW 2
40818: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40819: LD_VAR 0 14
40823: PPUSH
40824: LD_VAR 0 1
40828: PPUSH
40829: CALL_OW 250
40833: PPUSH
40834: LD_VAR 0 1
40838: PPUSH
40839: CALL_OW 251
40843: PPUSH
40844: LD_INT 10
40846: PPUSH
40847: LD_INT 0
40849: PPUSH
40850: CALL_OW 50
// continue ;
40854: GO 40755
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40856: LD_VAR 0 12
40860: PUSH
40861: LD_INT 1
40863: ARRAY
40864: PPUSH
40865: CALL_OW 313
40869: PUSH
40870: LD_VAR 0 12
40874: PUSH
40875: LD_INT 1
40877: ARRAY
40878: PPUSH
40879: CALL_OW 266
40883: PUSH
40884: LD_INT 32
40886: PUSH
40887: LD_INT 31
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: IN
40894: AND
40895: PUSH
40896: LD_VAR 0 12
40900: PUSH
40901: LD_INT 1
40903: ARRAY
40904: PPUSH
40905: CALL_OW 313
40909: PUSH
40910: LD_INT 6
40912: EQUAL
40913: OR
40914: IFFALSE 40934
// f := Delete ( f , 1 ) ;
40916: LD_ADDR_VAR 0 12
40920: PUSH
40921: LD_VAR 0 12
40925: PPUSH
40926: LD_INT 1
40928: PPUSH
40929: CALL_OW 3
40933: ST_TO_ADDR
// if not f then
40934: LD_VAR 0 12
40938: NOT
40939: IFFALSE 40957
// begin x := x + 2 ;
40941: LD_ADDR_VAR 0 13
40945: PUSH
40946: LD_VAR 0 13
40950: PUSH
40951: LD_INT 2
40953: PLUS
40954: ST_TO_ADDR
// continue ;
40955: GO 40755
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40957: LD_VAR 0 12
40961: PUSH
40962: LD_INT 1
40964: ARRAY
40965: PPUSH
40966: CALL_OW 266
40970: PUSH
40971: LD_INT 5
40973: EQUAL
40974: IFFALSE 41048
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40976: LD_VAR 0 12
40980: PUSH
40981: LD_INT 1
40983: ARRAY
40984: PPUSH
40985: CALL_OW 313
40989: PUSH
40990: LD_INT 3
40992: LESS
40993: IFFALSE 41029
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40995: LD_INT 0
40997: PPUSH
40998: LD_INT 5
41000: PUSH
41001: LD_INT 8
41003: PUSH
41004: LD_INT 9
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: PUSH
41012: LD_VAR 0 17
41016: ARRAY
41017: PPUSH
41018: LD_VAR 0 4
41022: PPUSH
41023: CALL_OW 380
41027: GO 41046
// PrepareHuman ( false , i , skill ) ;
41029: LD_INT 0
41031: PPUSH
41032: LD_VAR 0 8
41036: PPUSH
41037: LD_VAR 0 4
41041: PPUSH
41042: CALL_OW 380
// end else
41046: GO 41065
// PrepareHuman ( false , i , skill ) ;
41048: LD_INT 0
41050: PPUSH
41051: LD_VAR 0 8
41055: PPUSH
41056: LD_VAR 0 4
41060: PPUSH
41061: CALL_OW 380
// un := CreateHuman ;
41065: LD_ADDR_VAR 0 14
41069: PUSH
41070: CALL_OW 44
41074: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41075: LD_ADDR_VAR 0 7
41079: PUSH
41080: LD_VAR 0 7
41084: PPUSH
41085: LD_INT 1
41087: PPUSH
41088: LD_VAR 0 14
41092: PPUSH
41093: CALL_OW 2
41097: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41098: LD_VAR 0 14
41102: PPUSH
41103: LD_VAR 0 12
41107: PUSH
41108: LD_INT 1
41110: ARRAY
41111: PPUSH
41112: CALL_OW 52
// end ;
41116: GO 40755
41118: POP
41119: POP
// end ;
41120: GO 40057
41122: POP
41123: POP
// result := result ^ buildings ;
41124: LD_ADDR_VAR 0 7
41128: PUSH
41129: LD_VAR 0 7
41133: PUSH
41134: LD_VAR 0 18
41138: ADD
41139: ST_TO_ADDR
// end else
41140: GO 41283
// begin for i = 1 to personel do
41142: LD_ADDR_VAR 0 8
41146: PUSH
41147: DOUBLE
41148: LD_INT 1
41150: DEC
41151: ST_TO_ADDR
41152: LD_VAR 0 6
41156: PUSH
41157: FOR_TO
41158: IFFALSE 41281
// begin if i > 4 then
41160: LD_VAR 0 8
41164: PUSH
41165: LD_INT 4
41167: GREATER
41168: IFFALSE 41172
// break ;
41170: GO 41281
// x := personel [ i ] ;
41172: LD_ADDR_VAR 0 13
41176: PUSH
41177: LD_VAR 0 6
41181: PUSH
41182: LD_VAR 0 8
41186: ARRAY
41187: ST_TO_ADDR
// if x = - 1 then
41188: LD_VAR 0 13
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: EQUAL
41197: IFFALSE 41201
// continue ;
41199: GO 41157
// PrepareHuman ( false , i , skill ) ;
41201: LD_INT 0
41203: PPUSH
41204: LD_VAR 0 8
41208: PPUSH
41209: LD_VAR 0 4
41213: PPUSH
41214: CALL_OW 380
// un := CreateHuman ;
41218: LD_ADDR_VAR 0 14
41222: PUSH
41223: CALL_OW 44
41227: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41228: LD_VAR 0 14
41232: PPUSH
41233: LD_VAR 0 1
41237: PPUSH
41238: CALL_OW 250
41242: PPUSH
41243: LD_VAR 0 1
41247: PPUSH
41248: CALL_OW 251
41252: PPUSH
41253: LD_INT 10
41255: PPUSH
41256: LD_INT 0
41258: PPUSH
41259: CALL_OW 50
// result := result ^ un ;
41263: LD_ADDR_VAR 0 7
41267: PUSH
41268: LD_VAR 0 7
41272: PUSH
41273: LD_VAR 0 14
41277: ADD
41278: ST_TO_ADDR
// end ;
41279: GO 41157
41281: POP
41282: POP
// end ; end ;
41283: LD_VAR 0 7
41287: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41288: LD_INT 0
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
41305: PPUSH
// result := false ;
41306: LD_ADDR_VAR 0 3
41310: PUSH
41311: LD_INT 0
41313: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41314: LD_VAR 0 1
41318: NOT
41319: PUSH
41320: LD_VAR 0 1
41324: PPUSH
41325: CALL_OW 266
41329: PUSH
41330: LD_INT 32
41332: PUSH
41333: LD_INT 33
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: IN
41340: NOT
41341: OR
41342: IFFALSE 41346
// exit ;
41344: GO 42455
// nat := GetNation ( tower ) ;
41346: LD_ADDR_VAR 0 12
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL_OW 248
41360: ST_TO_ADDR
// side := GetSide ( tower ) ;
41361: LD_ADDR_VAR 0 16
41365: PUSH
41366: LD_VAR 0 1
41370: PPUSH
41371: CALL_OW 255
41375: ST_TO_ADDR
// x := GetX ( tower ) ;
41376: LD_ADDR_VAR 0 10
41380: PUSH
41381: LD_VAR 0 1
41385: PPUSH
41386: CALL_OW 250
41390: ST_TO_ADDR
// y := GetY ( tower ) ;
41391: LD_ADDR_VAR 0 11
41395: PUSH
41396: LD_VAR 0 1
41400: PPUSH
41401: CALL_OW 251
41405: ST_TO_ADDR
// if not x or not y then
41406: LD_VAR 0 10
41410: NOT
41411: PUSH
41412: LD_VAR 0 11
41416: NOT
41417: OR
41418: IFFALSE 41422
// exit ;
41420: GO 42455
// weapon := 0 ;
41422: LD_ADDR_VAR 0 18
41426: PUSH
41427: LD_INT 0
41429: ST_TO_ADDR
// fac_list := [ ] ;
41430: LD_ADDR_VAR 0 17
41434: PUSH
41435: EMPTY
41436: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41437: LD_ADDR_VAR 0 6
41441: PUSH
41442: LD_VAR 0 1
41446: PPUSH
41447: CALL_OW 274
41451: PPUSH
41452: LD_VAR 0 2
41456: PPUSH
41457: LD_INT 0
41459: PPUSH
41460: CALL 39026 0 3
41464: PPUSH
41465: LD_INT 30
41467: PUSH
41468: LD_INT 3
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PPUSH
41475: CALL_OW 72
41479: ST_TO_ADDR
// if not factories then
41480: LD_VAR 0 6
41484: NOT
41485: IFFALSE 41489
// exit ;
41487: GO 42455
// for i in factories do
41489: LD_ADDR_VAR 0 8
41493: PUSH
41494: LD_VAR 0 6
41498: PUSH
41499: FOR_IN
41500: IFFALSE 41525
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41502: LD_ADDR_VAR 0 17
41506: PUSH
41507: LD_VAR 0 17
41511: PUSH
41512: LD_VAR 0 8
41516: PPUSH
41517: CALL_OW 478
41521: UNION
41522: ST_TO_ADDR
41523: GO 41499
41525: POP
41526: POP
// if not fac_list then
41527: LD_VAR 0 17
41531: NOT
41532: IFFALSE 41536
// exit ;
41534: GO 42455
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41536: LD_ADDR_VAR 0 5
41540: PUSH
41541: LD_INT 4
41543: PUSH
41544: LD_INT 5
41546: PUSH
41547: LD_INT 9
41549: PUSH
41550: LD_INT 10
41552: PUSH
41553: LD_INT 6
41555: PUSH
41556: LD_INT 7
41558: PUSH
41559: LD_INT 11
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 27
41573: PUSH
41574: LD_INT 28
41576: PUSH
41577: LD_INT 26
41579: PUSH
41580: LD_INT 30
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 43
41591: PUSH
41592: LD_INT 44
41594: PUSH
41595: LD_INT 46
41597: PUSH
41598: LD_INT 45
41600: PUSH
41601: LD_INT 47
41603: PUSH
41604: LD_INT 49
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: LIST
41619: PUSH
41620: LD_VAR 0 12
41624: ARRAY
41625: ST_TO_ADDR
// list := list isect fac_list ;
41626: LD_ADDR_VAR 0 5
41630: PUSH
41631: LD_VAR 0 5
41635: PUSH
41636: LD_VAR 0 17
41640: ISECT
41641: ST_TO_ADDR
// if not list then
41642: LD_VAR 0 5
41646: NOT
41647: IFFALSE 41651
// exit ;
41649: GO 42455
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41651: LD_VAR 0 12
41655: PUSH
41656: LD_INT 3
41658: EQUAL
41659: PUSH
41660: LD_INT 49
41662: PUSH
41663: LD_VAR 0 5
41667: IN
41668: AND
41669: PUSH
41670: LD_INT 31
41672: PPUSH
41673: LD_VAR 0 16
41677: PPUSH
41678: CALL_OW 321
41682: PUSH
41683: LD_INT 2
41685: EQUAL
41686: AND
41687: IFFALSE 41747
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41689: LD_INT 22
41691: PUSH
41692: LD_VAR 0 16
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 35
41703: PUSH
41704: LD_INT 49
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 91
41713: PUSH
41714: LD_VAR 0 1
41718: PUSH
41719: LD_INT 10
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: LIST
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: PPUSH
41732: CALL_OW 69
41736: NOT
41737: IFFALSE 41747
// weapon := ru_time_lapser ;
41739: LD_ADDR_VAR 0 18
41743: PUSH
41744: LD_INT 49
41746: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41747: LD_VAR 0 12
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: IN
41762: PUSH
41763: LD_INT 11
41765: PUSH
41766: LD_VAR 0 5
41770: IN
41771: PUSH
41772: LD_INT 30
41774: PUSH
41775: LD_VAR 0 5
41779: IN
41780: OR
41781: AND
41782: PUSH
41783: LD_INT 6
41785: PPUSH
41786: LD_VAR 0 16
41790: PPUSH
41791: CALL_OW 321
41795: PUSH
41796: LD_INT 2
41798: EQUAL
41799: AND
41800: IFFALSE 41965
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41802: LD_INT 22
41804: PUSH
41805: LD_VAR 0 16
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: LD_INT 35
41819: PUSH
41820: LD_INT 11
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 35
41829: PUSH
41830: LD_INT 30
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 91
41844: PUSH
41845: LD_VAR 0 1
41849: PUSH
41850: LD_INT 18
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: LIST
41862: PPUSH
41863: CALL_OW 69
41867: NOT
41868: PUSH
41869: LD_INT 22
41871: PUSH
41872: LD_VAR 0 16
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 30
41886: PUSH
41887: LD_INT 32
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 30
41896: PUSH
41897: LD_INT 33
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 91
41911: PUSH
41912: LD_VAR 0 1
41916: PUSH
41917: LD_INT 12
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: LIST
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: PPUSH
41933: CALL_OW 69
41937: PUSH
41938: LD_INT 2
41940: GREATER
41941: AND
41942: IFFALSE 41965
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41944: LD_ADDR_VAR 0 18
41948: PUSH
41949: LD_INT 11
41951: PUSH
41952: LD_INT 30
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_VAR 0 12
41963: ARRAY
41964: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41965: LD_VAR 0 18
41969: NOT
41970: PUSH
41971: LD_INT 40
41973: PPUSH
41974: LD_VAR 0 16
41978: PPUSH
41979: CALL_OW 321
41983: PUSH
41984: LD_INT 2
41986: EQUAL
41987: AND
41988: PUSH
41989: LD_INT 7
41991: PUSH
41992: LD_VAR 0 5
41996: IN
41997: PUSH
41998: LD_INT 28
42000: PUSH
42001: LD_VAR 0 5
42005: IN
42006: OR
42007: PUSH
42008: LD_INT 45
42010: PUSH
42011: LD_VAR 0 5
42015: IN
42016: OR
42017: AND
42018: IFFALSE 42272
// begin hex := GetHexInfo ( x , y ) ;
42020: LD_ADDR_VAR 0 4
42024: PUSH
42025: LD_VAR 0 10
42029: PPUSH
42030: LD_VAR 0 11
42034: PPUSH
42035: CALL_OW 546
42039: ST_TO_ADDR
// if hex [ 1 ] then
42040: LD_VAR 0 4
42044: PUSH
42045: LD_INT 1
42047: ARRAY
42048: IFFALSE 42052
// exit ;
42050: GO 42455
// height := hex [ 2 ] ;
42052: LD_ADDR_VAR 0 15
42056: PUSH
42057: LD_VAR 0 4
42061: PUSH
42062: LD_INT 2
42064: ARRAY
42065: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42066: LD_ADDR_VAR 0 14
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 3
42079: PUSH
42080: LD_INT 5
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: ST_TO_ADDR
// for i in tmp do
42089: LD_ADDR_VAR 0 8
42093: PUSH
42094: LD_VAR 0 14
42098: PUSH
42099: FOR_IN
42100: IFFALSE 42270
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42102: LD_ADDR_VAR 0 9
42106: PUSH
42107: LD_VAR 0 10
42111: PPUSH
42112: LD_VAR 0 8
42116: PPUSH
42117: LD_INT 5
42119: PPUSH
42120: CALL_OW 272
42124: PUSH
42125: LD_VAR 0 11
42129: PPUSH
42130: LD_VAR 0 8
42134: PPUSH
42135: LD_INT 5
42137: PPUSH
42138: CALL_OW 273
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42147: LD_VAR 0 9
42151: PUSH
42152: LD_INT 1
42154: ARRAY
42155: PPUSH
42156: LD_VAR 0 9
42160: PUSH
42161: LD_INT 2
42163: ARRAY
42164: PPUSH
42165: CALL_OW 488
42169: IFFALSE 42268
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42171: LD_ADDR_VAR 0 4
42175: PUSH
42176: LD_VAR 0 9
42180: PUSH
42181: LD_INT 1
42183: ARRAY
42184: PPUSH
42185: LD_VAR 0 9
42189: PUSH
42190: LD_INT 2
42192: ARRAY
42193: PPUSH
42194: CALL_OW 546
42198: ST_TO_ADDR
// if hex [ 1 ] then
42199: LD_VAR 0 4
42203: PUSH
42204: LD_INT 1
42206: ARRAY
42207: IFFALSE 42211
// continue ;
42209: GO 42099
// h := hex [ 2 ] ;
42211: LD_ADDR_VAR 0 13
42215: PUSH
42216: LD_VAR 0 4
42220: PUSH
42221: LD_INT 2
42223: ARRAY
42224: ST_TO_ADDR
// if h + 7 < height then
42225: LD_VAR 0 13
42229: PUSH
42230: LD_INT 7
42232: PLUS
42233: PUSH
42234: LD_VAR 0 15
42238: LESS
42239: IFFALSE 42268
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42241: LD_ADDR_VAR 0 18
42245: PUSH
42246: LD_INT 7
42248: PUSH
42249: LD_INT 28
42251: PUSH
42252: LD_INT 45
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: PUSH
42260: LD_VAR 0 12
42264: ARRAY
42265: ST_TO_ADDR
// break ;
42266: GO 42270
// end ; end ; end ;
42268: GO 42099
42270: POP
42271: POP
// end ; if not weapon then
42272: LD_VAR 0 18
42276: NOT
42277: IFFALSE 42337
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42279: LD_ADDR_VAR 0 5
42283: PUSH
42284: LD_VAR 0 5
42288: PUSH
42289: LD_INT 11
42291: PUSH
42292: LD_INT 30
42294: PUSH
42295: LD_INT 49
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: LIST
42302: DIFF
42303: ST_TO_ADDR
// if not list then
42304: LD_VAR 0 5
42308: NOT
42309: IFFALSE 42313
// exit ;
42311: GO 42455
// weapon := list [ rand ( 1 , list ) ] ;
42313: LD_ADDR_VAR 0 18
42317: PUSH
42318: LD_VAR 0 5
42322: PUSH
42323: LD_INT 1
42325: PPUSH
42326: LD_VAR 0 5
42330: PPUSH
42331: CALL_OW 12
42335: ARRAY
42336: ST_TO_ADDR
// end ; if weapon then
42337: LD_VAR 0 18
42341: IFFALSE 42455
// begin tmp := CostOfWeapon ( weapon ) ;
42343: LD_ADDR_VAR 0 14
42347: PUSH
42348: LD_VAR 0 18
42352: PPUSH
42353: CALL_OW 451
42357: ST_TO_ADDR
// j := GetBase ( tower ) ;
42358: LD_ADDR_VAR 0 9
42362: PUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: CALL_OW 274
42372: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42373: LD_VAR 0 9
42377: PPUSH
42378: LD_INT 1
42380: PPUSH
42381: CALL_OW 275
42385: PUSH
42386: LD_VAR 0 14
42390: PUSH
42391: LD_INT 1
42393: ARRAY
42394: GREATEREQUAL
42395: PUSH
42396: LD_VAR 0 9
42400: PPUSH
42401: LD_INT 2
42403: PPUSH
42404: CALL_OW 275
42408: PUSH
42409: LD_VAR 0 14
42413: PUSH
42414: LD_INT 2
42416: ARRAY
42417: GREATEREQUAL
42418: AND
42419: PUSH
42420: LD_VAR 0 9
42424: PPUSH
42425: LD_INT 3
42427: PPUSH
42428: CALL_OW 275
42432: PUSH
42433: LD_VAR 0 14
42437: PUSH
42438: LD_INT 3
42440: ARRAY
42441: GREATEREQUAL
42442: AND
42443: IFFALSE 42455
// result := weapon ;
42445: LD_ADDR_VAR 0 3
42449: PUSH
42450: LD_VAR 0 18
42454: ST_TO_ADDR
// end ; end ;
42455: LD_VAR 0 3
42459: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42460: LD_INT 0
42462: PPUSH
42463: PPUSH
// result := true ;
42464: LD_ADDR_VAR 0 3
42468: PUSH
42469: LD_INT 1
42471: ST_TO_ADDR
// if array1 = array2 then
42472: LD_VAR 0 1
42476: PUSH
42477: LD_VAR 0 2
42481: EQUAL
42482: IFFALSE 42542
// begin for i = 1 to array1 do
42484: LD_ADDR_VAR 0 4
42488: PUSH
42489: DOUBLE
42490: LD_INT 1
42492: DEC
42493: ST_TO_ADDR
42494: LD_VAR 0 1
42498: PUSH
42499: FOR_TO
42500: IFFALSE 42538
// if array1 [ i ] <> array2 [ i ] then
42502: LD_VAR 0 1
42506: PUSH
42507: LD_VAR 0 4
42511: ARRAY
42512: PUSH
42513: LD_VAR 0 2
42517: PUSH
42518: LD_VAR 0 4
42522: ARRAY
42523: NONEQUAL
42524: IFFALSE 42536
// begin result := false ;
42526: LD_ADDR_VAR 0 3
42530: PUSH
42531: LD_INT 0
42533: ST_TO_ADDR
// break ;
42534: GO 42538
// end ;
42536: GO 42499
42538: POP
42539: POP
// end else
42540: GO 42550
// result := false ;
42542: LD_ADDR_VAR 0 3
42546: PUSH
42547: LD_INT 0
42549: ST_TO_ADDR
// end ;
42550: LD_VAR 0 3
42554: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42555: LD_INT 0
42557: PPUSH
42558: PPUSH
// if not array1 or not array2 then
42559: LD_VAR 0 1
42563: NOT
42564: PUSH
42565: LD_VAR 0 2
42569: NOT
42570: OR
42571: IFFALSE 42575
// exit ;
42573: GO 42639
// result := true ;
42575: LD_ADDR_VAR 0 3
42579: PUSH
42580: LD_INT 1
42582: ST_TO_ADDR
// for i = 1 to array1 do
42583: LD_ADDR_VAR 0 4
42587: PUSH
42588: DOUBLE
42589: LD_INT 1
42591: DEC
42592: ST_TO_ADDR
42593: LD_VAR 0 1
42597: PUSH
42598: FOR_TO
42599: IFFALSE 42637
// if array1 [ i ] <> array2 [ i ] then
42601: LD_VAR 0 1
42605: PUSH
42606: LD_VAR 0 4
42610: ARRAY
42611: PUSH
42612: LD_VAR 0 2
42616: PUSH
42617: LD_VAR 0 4
42621: ARRAY
42622: NONEQUAL
42623: IFFALSE 42635
// begin result := false ;
42625: LD_ADDR_VAR 0 3
42629: PUSH
42630: LD_INT 0
42632: ST_TO_ADDR
// break ;
42633: GO 42637
// end ;
42635: GO 42598
42637: POP
42638: POP
// end ;
42639: LD_VAR 0 3
42643: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42644: LD_INT 0
42646: PPUSH
42647: PPUSH
42648: PPUSH
// pom := GetBase ( fac ) ;
42649: LD_ADDR_VAR 0 5
42653: PUSH
42654: LD_VAR 0 1
42658: PPUSH
42659: CALL_OW 274
42663: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42664: LD_ADDR_VAR 0 4
42668: PUSH
42669: LD_VAR 0 2
42673: PUSH
42674: LD_INT 1
42676: ARRAY
42677: PPUSH
42678: LD_VAR 0 2
42682: PUSH
42683: LD_INT 2
42685: ARRAY
42686: PPUSH
42687: LD_VAR 0 2
42691: PUSH
42692: LD_INT 3
42694: ARRAY
42695: PPUSH
42696: LD_VAR 0 2
42700: PUSH
42701: LD_INT 4
42703: ARRAY
42704: PPUSH
42705: CALL_OW 449
42709: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42710: LD_ADDR_VAR 0 3
42714: PUSH
42715: LD_VAR 0 5
42719: PPUSH
42720: LD_INT 1
42722: PPUSH
42723: CALL_OW 275
42727: PUSH
42728: LD_VAR 0 4
42732: PUSH
42733: LD_INT 1
42735: ARRAY
42736: GREATEREQUAL
42737: PUSH
42738: LD_VAR 0 5
42742: PPUSH
42743: LD_INT 2
42745: PPUSH
42746: CALL_OW 275
42750: PUSH
42751: LD_VAR 0 4
42755: PUSH
42756: LD_INT 2
42758: ARRAY
42759: GREATEREQUAL
42760: AND
42761: PUSH
42762: LD_VAR 0 5
42766: PPUSH
42767: LD_INT 3
42769: PPUSH
42770: CALL_OW 275
42774: PUSH
42775: LD_VAR 0 4
42779: PUSH
42780: LD_INT 3
42782: ARRAY
42783: GREATEREQUAL
42784: AND
42785: ST_TO_ADDR
// end ;
42786: LD_VAR 0 3
42790: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42791: LD_INT 0
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
// pom := GetBase ( building ) ;
42797: LD_ADDR_VAR 0 3
42801: PUSH
42802: LD_VAR 0 1
42806: PPUSH
42807: CALL_OW 274
42811: ST_TO_ADDR
// if not pom then
42812: LD_VAR 0 3
42816: NOT
42817: IFFALSE 42821
// exit ;
42819: GO 42991
// btype := GetBType ( building ) ;
42821: LD_ADDR_VAR 0 5
42825: PUSH
42826: LD_VAR 0 1
42830: PPUSH
42831: CALL_OW 266
42835: ST_TO_ADDR
// if btype = b_armoury then
42836: LD_VAR 0 5
42840: PUSH
42841: LD_INT 4
42843: EQUAL
42844: IFFALSE 42854
// btype := b_barracks ;
42846: LD_ADDR_VAR 0 5
42850: PUSH
42851: LD_INT 5
42853: ST_TO_ADDR
// if btype = b_depot then
42854: LD_VAR 0 5
42858: PUSH
42859: LD_INT 0
42861: EQUAL
42862: IFFALSE 42872
// btype := b_warehouse ;
42864: LD_ADDR_VAR 0 5
42868: PUSH
42869: LD_INT 1
42871: ST_TO_ADDR
// if btype = b_workshop then
42872: LD_VAR 0 5
42876: PUSH
42877: LD_INT 2
42879: EQUAL
42880: IFFALSE 42890
// btype := b_factory ;
42882: LD_ADDR_VAR 0 5
42886: PUSH
42887: LD_INT 3
42889: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42890: LD_ADDR_VAR 0 4
42894: PUSH
42895: LD_VAR 0 5
42899: PPUSH
42900: LD_VAR 0 1
42904: PPUSH
42905: CALL_OW 248
42909: PPUSH
42910: CALL_OW 450
42914: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42915: LD_ADDR_VAR 0 2
42919: PUSH
42920: LD_VAR 0 3
42924: PPUSH
42925: LD_INT 1
42927: PPUSH
42928: CALL_OW 275
42932: PUSH
42933: LD_VAR 0 4
42937: PUSH
42938: LD_INT 1
42940: ARRAY
42941: GREATEREQUAL
42942: PUSH
42943: LD_VAR 0 3
42947: PPUSH
42948: LD_INT 2
42950: PPUSH
42951: CALL_OW 275
42955: PUSH
42956: LD_VAR 0 4
42960: PUSH
42961: LD_INT 2
42963: ARRAY
42964: GREATEREQUAL
42965: AND
42966: PUSH
42967: LD_VAR 0 3
42971: PPUSH
42972: LD_INT 3
42974: PPUSH
42975: CALL_OW 275
42979: PUSH
42980: LD_VAR 0 4
42984: PUSH
42985: LD_INT 3
42987: ARRAY
42988: GREATEREQUAL
42989: AND
42990: ST_TO_ADDR
// end ;
42991: LD_VAR 0 2
42995: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42996: LD_INT 0
42998: PPUSH
42999: PPUSH
43000: PPUSH
// pom := GetBase ( building ) ;
43001: LD_ADDR_VAR 0 4
43005: PUSH
43006: LD_VAR 0 1
43010: PPUSH
43011: CALL_OW 274
43015: ST_TO_ADDR
// if not pom then
43016: LD_VAR 0 4
43020: NOT
43021: IFFALSE 43025
// exit ;
43023: GO 43126
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43025: LD_ADDR_VAR 0 5
43029: PUSH
43030: LD_VAR 0 2
43034: PPUSH
43035: LD_VAR 0 1
43039: PPUSH
43040: CALL_OW 248
43044: PPUSH
43045: CALL_OW 450
43049: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43050: LD_ADDR_VAR 0 3
43054: PUSH
43055: LD_VAR 0 4
43059: PPUSH
43060: LD_INT 1
43062: PPUSH
43063: CALL_OW 275
43067: PUSH
43068: LD_VAR 0 5
43072: PUSH
43073: LD_INT 1
43075: ARRAY
43076: GREATEREQUAL
43077: PUSH
43078: LD_VAR 0 4
43082: PPUSH
43083: LD_INT 2
43085: PPUSH
43086: CALL_OW 275
43090: PUSH
43091: LD_VAR 0 5
43095: PUSH
43096: LD_INT 2
43098: ARRAY
43099: GREATEREQUAL
43100: AND
43101: PUSH
43102: LD_VAR 0 4
43106: PPUSH
43107: LD_INT 3
43109: PPUSH
43110: CALL_OW 275
43114: PUSH
43115: LD_VAR 0 5
43119: PUSH
43120: LD_INT 3
43122: ARRAY
43123: GREATEREQUAL
43124: AND
43125: ST_TO_ADDR
// end ;
43126: LD_VAR 0 3
43130: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43131: LD_INT 0
43133: PPUSH
43134: PPUSH
43135: PPUSH
43136: PPUSH
43137: PPUSH
43138: PPUSH
43139: PPUSH
43140: PPUSH
43141: PPUSH
43142: PPUSH
43143: PPUSH
// result := false ;
43144: LD_ADDR_VAR 0 8
43148: PUSH
43149: LD_INT 0
43151: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43152: LD_VAR 0 5
43156: NOT
43157: PUSH
43158: LD_VAR 0 1
43162: NOT
43163: OR
43164: PUSH
43165: LD_VAR 0 2
43169: NOT
43170: OR
43171: PUSH
43172: LD_VAR 0 3
43176: NOT
43177: OR
43178: IFFALSE 43182
// exit ;
43180: GO 43996
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43182: LD_ADDR_VAR 0 14
43186: PUSH
43187: LD_VAR 0 1
43191: PPUSH
43192: LD_VAR 0 2
43196: PPUSH
43197: LD_VAR 0 3
43201: PPUSH
43202: LD_VAR 0 4
43206: PPUSH
43207: LD_VAR 0 5
43211: PUSH
43212: LD_INT 1
43214: ARRAY
43215: PPUSH
43216: CALL_OW 248
43220: PPUSH
43221: LD_INT 0
43223: PPUSH
43224: CALL 45233 0 6
43228: ST_TO_ADDR
// if not hexes then
43229: LD_VAR 0 14
43233: NOT
43234: IFFALSE 43238
// exit ;
43236: GO 43996
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43238: LD_ADDR_VAR 0 17
43242: PUSH
43243: LD_VAR 0 5
43247: PPUSH
43248: LD_INT 22
43250: PUSH
43251: LD_VAR 0 13
43255: PPUSH
43256: CALL_OW 255
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: LD_INT 30
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 30
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: LIST
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PPUSH
43297: CALL_OW 72
43301: ST_TO_ADDR
// for i = 1 to hexes do
43302: LD_ADDR_VAR 0 9
43306: PUSH
43307: DOUBLE
43308: LD_INT 1
43310: DEC
43311: ST_TO_ADDR
43312: LD_VAR 0 14
43316: PUSH
43317: FOR_TO
43318: IFFALSE 43994
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43320: LD_ADDR_VAR 0 13
43324: PUSH
43325: LD_VAR 0 14
43329: PUSH
43330: LD_VAR 0 9
43334: ARRAY
43335: PUSH
43336: LD_INT 1
43338: ARRAY
43339: PPUSH
43340: LD_VAR 0 14
43344: PUSH
43345: LD_VAR 0 9
43349: ARRAY
43350: PUSH
43351: LD_INT 2
43353: ARRAY
43354: PPUSH
43355: CALL_OW 428
43359: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43360: LD_VAR 0 14
43364: PUSH
43365: LD_VAR 0 9
43369: ARRAY
43370: PUSH
43371: LD_INT 1
43373: ARRAY
43374: PPUSH
43375: LD_VAR 0 14
43379: PUSH
43380: LD_VAR 0 9
43384: ARRAY
43385: PUSH
43386: LD_INT 2
43388: ARRAY
43389: PPUSH
43390: CALL_OW 351
43394: PUSH
43395: LD_VAR 0 14
43399: PUSH
43400: LD_VAR 0 9
43404: ARRAY
43405: PUSH
43406: LD_INT 1
43408: ARRAY
43409: PPUSH
43410: LD_VAR 0 14
43414: PUSH
43415: LD_VAR 0 9
43419: ARRAY
43420: PUSH
43421: LD_INT 2
43423: ARRAY
43424: PPUSH
43425: CALL_OW 488
43429: NOT
43430: OR
43431: PUSH
43432: LD_VAR 0 13
43436: PPUSH
43437: CALL_OW 247
43441: PUSH
43442: LD_INT 3
43444: EQUAL
43445: OR
43446: IFFALSE 43452
// exit ;
43448: POP
43449: POP
43450: GO 43996
// if not tmp then
43452: LD_VAR 0 13
43456: NOT
43457: IFFALSE 43461
// continue ;
43459: GO 43317
// result := true ;
43461: LD_ADDR_VAR 0 8
43465: PUSH
43466: LD_INT 1
43468: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43469: LD_VAR 0 6
43473: PUSH
43474: LD_VAR 0 13
43478: PPUSH
43479: CALL_OW 247
43483: PUSH
43484: LD_INT 2
43486: EQUAL
43487: AND
43488: PUSH
43489: LD_VAR 0 13
43493: PPUSH
43494: CALL_OW 263
43498: PUSH
43499: LD_INT 1
43501: EQUAL
43502: AND
43503: IFFALSE 43667
// begin if IsDrivenBy ( tmp ) then
43505: LD_VAR 0 13
43509: PPUSH
43510: CALL_OW 311
43514: IFFALSE 43518
// continue ;
43516: GO 43317
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43518: LD_VAR 0 6
43522: PPUSH
43523: LD_INT 3
43525: PUSH
43526: LD_INT 60
43528: PUSH
43529: EMPTY
43530: LIST
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 3
43538: PUSH
43539: LD_INT 55
43541: PUSH
43542: EMPTY
43543: LIST
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PPUSH
43553: CALL_OW 72
43557: IFFALSE 43665
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43559: LD_ADDR_VAR 0 18
43563: PUSH
43564: LD_VAR 0 6
43568: PPUSH
43569: LD_INT 3
43571: PUSH
43572: LD_INT 60
43574: PUSH
43575: EMPTY
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 3
43584: PUSH
43585: LD_INT 55
43587: PUSH
43588: EMPTY
43589: LIST
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PPUSH
43599: CALL_OW 72
43603: PUSH
43604: LD_INT 1
43606: ARRAY
43607: ST_TO_ADDR
// if IsInUnit ( driver ) then
43608: LD_VAR 0 18
43612: PPUSH
43613: CALL_OW 310
43617: IFFALSE 43628
// ComExit ( driver ) ;
43619: LD_VAR 0 18
43623: PPUSH
43624: CALL 68361 0 1
// AddComEnterUnit ( driver , tmp ) ;
43628: LD_VAR 0 18
43632: PPUSH
43633: LD_VAR 0 13
43637: PPUSH
43638: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43642: LD_VAR 0 18
43646: PPUSH
43647: LD_VAR 0 7
43651: PPUSH
43652: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43656: LD_VAR 0 18
43660: PPUSH
43661: CALL_OW 181
// end ; continue ;
43665: GO 43317
// end ; if not cleaners or not tmp in cleaners then
43667: LD_VAR 0 6
43671: NOT
43672: PUSH
43673: LD_VAR 0 13
43677: PUSH
43678: LD_VAR 0 6
43682: IN
43683: NOT
43684: OR
43685: IFFALSE 43992
// begin if dep then
43687: LD_VAR 0 17
43691: IFFALSE 43827
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43693: LD_ADDR_VAR 0 16
43697: PUSH
43698: LD_VAR 0 17
43702: PUSH
43703: LD_INT 1
43705: ARRAY
43706: PPUSH
43707: CALL_OW 250
43711: PPUSH
43712: LD_VAR 0 17
43716: PUSH
43717: LD_INT 1
43719: ARRAY
43720: PPUSH
43721: CALL_OW 254
43725: PPUSH
43726: LD_INT 5
43728: PPUSH
43729: CALL_OW 272
43733: PUSH
43734: LD_VAR 0 17
43738: PUSH
43739: LD_INT 1
43741: ARRAY
43742: PPUSH
43743: CALL_OW 251
43747: PPUSH
43748: LD_VAR 0 17
43752: PUSH
43753: LD_INT 1
43755: ARRAY
43756: PPUSH
43757: CALL_OW 254
43761: PPUSH
43762: LD_INT 5
43764: PPUSH
43765: CALL_OW 273
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43774: LD_VAR 0 16
43778: PUSH
43779: LD_INT 1
43781: ARRAY
43782: PPUSH
43783: LD_VAR 0 16
43787: PUSH
43788: LD_INT 2
43790: ARRAY
43791: PPUSH
43792: CALL_OW 488
43796: IFFALSE 43827
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43798: LD_VAR 0 13
43802: PPUSH
43803: LD_VAR 0 16
43807: PUSH
43808: LD_INT 1
43810: ARRAY
43811: PPUSH
43812: LD_VAR 0 16
43816: PUSH
43817: LD_INT 2
43819: ARRAY
43820: PPUSH
43821: CALL_OW 111
// continue ;
43825: GO 43317
// end ; end ; r := GetDir ( tmp ) ;
43827: LD_ADDR_VAR 0 15
43831: PUSH
43832: LD_VAR 0 13
43836: PPUSH
43837: CALL_OW 254
43841: ST_TO_ADDR
// if r = 5 then
43842: LD_VAR 0 15
43846: PUSH
43847: LD_INT 5
43849: EQUAL
43850: IFFALSE 43860
// r := 0 ;
43852: LD_ADDR_VAR 0 15
43856: PUSH
43857: LD_INT 0
43859: ST_TO_ADDR
// for j = r to 5 do
43860: LD_ADDR_VAR 0 10
43864: PUSH
43865: DOUBLE
43866: LD_VAR 0 15
43870: DEC
43871: ST_TO_ADDR
43872: LD_INT 5
43874: PUSH
43875: FOR_TO
43876: IFFALSE 43990
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43878: LD_ADDR_VAR 0 11
43882: PUSH
43883: LD_VAR 0 13
43887: PPUSH
43888: CALL_OW 250
43892: PPUSH
43893: LD_VAR 0 10
43897: PPUSH
43898: LD_INT 2
43900: PPUSH
43901: CALL_OW 272
43905: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43906: LD_ADDR_VAR 0 12
43910: PUSH
43911: LD_VAR 0 13
43915: PPUSH
43916: CALL_OW 251
43920: PPUSH
43921: LD_VAR 0 10
43925: PPUSH
43926: LD_INT 2
43928: PPUSH
43929: CALL_OW 273
43933: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43934: LD_VAR 0 11
43938: PPUSH
43939: LD_VAR 0 12
43943: PPUSH
43944: CALL_OW 488
43948: PUSH
43949: LD_VAR 0 11
43953: PPUSH
43954: LD_VAR 0 12
43958: PPUSH
43959: CALL_OW 428
43963: NOT
43964: AND
43965: IFFALSE 43988
// begin ComMoveXY ( tmp , _x , _y ) ;
43967: LD_VAR 0 13
43971: PPUSH
43972: LD_VAR 0 11
43976: PPUSH
43977: LD_VAR 0 12
43981: PPUSH
43982: CALL_OW 111
// break ;
43986: GO 43990
// end ; end ;
43988: GO 43875
43990: POP
43991: POP
// end ; end ;
43992: GO 43317
43994: POP
43995: POP
// end ;
43996: LD_VAR 0 8
44000: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44001: LD_INT 0
44003: PPUSH
// result := true ;
44004: LD_ADDR_VAR 0 3
44008: PUSH
44009: LD_INT 1
44011: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44012: LD_VAR 0 2
44016: PUSH
44017: LD_INT 24
44019: DOUBLE
44020: EQUAL
44021: IFTRUE 44031
44023: LD_INT 33
44025: DOUBLE
44026: EQUAL
44027: IFTRUE 44031
44029: GO 44056
44031: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44032: LD_ADDR_VAR 0 3
44036: PUSH
44037: LD_INT 32
44039: PPUSH
44040: LD_VAR 0 1
44044: PPUSH
44045: CALL_OW 321
44049: PUSH
44050: LD_INT 2
44052: EQUAL
44053: ST_TO_ADDR
44054: GO 44376
44056: LD_INT 20
44058: DOUBLE
44059: EQUAL
44060: IFTRUE 44064
44062: GO 44089
44064: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44065: LD_ADDR_VAR 0 3
44069: PUSH
44070: LD_INT 6
44072: PPUSH
44073: LD_VAR 0 1
44077: PPUSH
44078: CALL_OW 321
44082: PUSH
44083: LD_INT 2
44085: EQUAL
44086: ST_TO_ADDR
44087: GO 44376
44089: LD_INT 22
44091: DOUBLE
44092: EQUAL
44093: IFTRUE 44103
44095: LD_INT 36
44097: DOUBLE
44098: EQUAL
44099: IFTRUE 44103
44101: GO 44128
44103: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44104: LD_ADDR_VAR 0 3
44108: PUSH
44109: LD_INT 15
44111: PPUSH
44112: LD_VAR 0 1
44116: PPUSH
44117: CALL_OW 321
44121: PUSH
44122: LD_INT 2
44124: EQUAL
44125: ST_TO_ADDR
44126: GO 44376
44128: LD_INT 30
44130: DOUBLE
44131: EQUAL
44132: IFTRUE 44136
44134: GO 44161
44136: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44137: LD_ADDR_VAR 0 3
44141: PUSH
44142: LD_INT 20
44144: PPUSH
44145: LD_VAR 0 1
44149: PPUSH
44150: CALL_OW 321
44154: PUSH
44155: LD_INT 2
44157: EQUAL
44158: ST_TO_ADDR
44159: GO 44376
44161: LD_INT 28
44163: DOUBLE
44164: EQUAL
44165: IFTRUE 44175
44167: LD_INT 21
44169: DOUBLE
44170: EQUAL
44171: IFTRUE 44175
44173: GO 44200
44175: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44176: LD_ADDR_VAR 0 3
44180: PUSH
44181: LD_INT 21
44183: PPUSH
44184: LD_VAR 0 1
44188: PPUSH
44189: CALL_OW 321
44193: PUSH
44194: LD_INT 2
44196: EQUAL
44197: ST_TO_ADDR
44198: GO 44376
44200: LD_INT 16
44202: DOUBLE
44203: EQUAL
44204: IFTRUE 44208
44206: GO 44235
44208: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44209: LD_ADDR_VAR 0 3
44213: PUSH
44214: LD_EXP 34
44218: PPUSH
44219: LD_VAR 0 1
44223: PPUSH
44224: CALL_OW 321
44228: PUSH
44229: LD_INT 2
44231: EQUAL
44232: ST_TO_ADDR
44233: GO 44376
44235: LD_INT 19
44237: DOUBLE
44238: EQUAL
44239: IFTRUE 44249
44241: LD_INT 23
44243: DOUBLE
44244: EQUAL
44245: IFTRUE 44249
44247: GO 44276
44249: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44250: LD_ADDR_VAR 0 3
44254: PUSH
44255: LD_EXP 33
44259: PPUSH
44260: LD_VAR 0 1
44264: PPUSH
44265: CALL_OW 321
44269: PUSH
44270: LD_INT 2
44272: EQUAL
44273: ST_TO_ADDR
44274: GO 44376
44276: LD_INT 17
44278: DOUBLE
44279: EQUAL
44280: IFTRUE 44284
44282: GO 44309
44284: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44285: LD_ADDR_VAR 0 3
44289: PUSH
44290: LD_INT 39
44292: PPUSH
44293: LD_VAR 0 1
44297: PPUSH
44298: CALL_OW 321
44302: PUSH
44303: LD_INT 2
44305: EQUAL
44306: ST_TO_ADDR
44307: GO 44376
44309: LD_INT 18
44311: DOUBLE
44312: EQUAL
44313: IFTRUE 44317
44315: GO 44342
44317: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44318: LD_ADDR_VAR 0 3
44322: PUSH
44323: LD_INT 40
44325: PPUSH
44326: LD_VAR 0 1
44330: PPUSH
44331: CALL_OW 321
44335: PUSH
44336: LD_INT 2
44338: EQUAL
44339: ST_TO_ADDR
44340: GO 44376
44342: LD_INT 27
44344: DOUBLE
44345: EQUAL
44346: IFTRUE 44350
44348: GO 44375
44350: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44351: LD_ADDR_VAR 0 3
44355: PUSH
44356: LD_INT 35
44358: PPUSH
44359: LD_VAR 0 1
44363: PPUSH
44364: CALL_OW 321
44368: PUSH
44369: LD_INT 2
44371: EQUAL
44372: ST_TO_ADDR
44373: GO 44376
44375: POP
// end ;
44376: LD_VAR 0 3
44380: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44381: LD_INT 0
44383: PPUSH
44384: PPUSH
44385: PPUSH
44386: PPUSH
44387: PPUSH
44388: PPUSH
44389: PPUSH
44390: PPUSH
44391: PPUSH
44392: PPUSH
44393: PPUSH
// result := false ;
44394: LD_ADDR_VAR 0 6
44398: PUSH
44399: LD_INT 0
44401: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44402: LD_VAR 0 1
44406: NOT
44407: PUSH
44408: LD_VAR 0 1
44412: PPUSH
44413: CALL_OW 266
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: IN
44428: NOT
44429: OR
44430: PUSH
44431: LD_VAR 0 2
44435: NOT
44436: OR
44437: PUSH
44438: LD_VAR 0 5
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: LD_INT 3
44454: PUSH
44455: LD_INT 4
44457: PUSH
44458: LD_INT 5
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: IN
44469: NOT
44470: OR
44471: PUSH
44472: LD_VAR 0 3
44476: PPUSH
44477: LD_VAR 0 4
44481: PPUSH
44482: CALL_OW 488
44486: NOT
44487: OR
44488: IFFALSE 44492
// exit ;
44490: GO 45228
// side := GetSide ( depot ) ;
44492: LD_ADDR_VAR 0 9
44496: PUSH
44497: LD_VAR 0 1
44501: PPUSH
44502: CALL_OW 255
44506: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44507: LD_VAR 0 9
44511: PPUSH
44512: LD_VAR 0 2
44516: PPUSH
44517: CALL 44001 0 2
44521: NOT
44522: IFFALSE 44526
// exit ;
44524: GO 45228
// pom := GetBase ( depot ) ;
44526: LD_ADDR_VAR 0 10
44530: PUSH
44531: LD_VAR 0 1
44535: PPUSH
44536: CALL_OW 274
44540: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44541: LD_ADDR_VAR 0 11
44545: PUSH
44546: LD_VAR 0 2
44550: PPUSH
44551: LD_VAR 0 1
44555: PPUSH
44556: CALL_OW 248
44560: PPUSH
44561: CALL_OW 450
44565: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44566: LD_VAR 0 10
44570: PPUSH
44571: LD_INT 1
44573: PPUSH
44574: CALL_OW 275
44578: PUSH
44579: LD_VAR 0 11
44583: PUSH
44584: LD_INT 1
44586: ARRAY
44587: GREATEREQUAL
44588: PUSH
44589: LD_VAR 0 10
44593: PPUSH
44594: LD_INT 2
44596: PPUSH
44597: CALL_OW 275
44601: PUSH
44602: LD_VAR 0 11
44606: PUSH
44607: LD_INT 2
44609: ARRAY
44610: GREATEREQUAL
44611: AND
44612: PUSH
44613: LD_VAR 0 10
44617: PPUSH
44618: LD_INT 3
44620: PPUSH
44621: CALL_OW 275
44625: PUSH
44626: LD_VAR 0 11
44630: PUSH
44631: LD_INT 3
44633: ARRAY
44634: GREATEREQUAL
44635: AND
44636: NOT
44637: IFFALSE 44641
// exit ;
44639: GO 45228
// if GetBType ( depot ) = b_depot then
44641: LD_VAR 0 1
44645: PPUSH
44646: CALL_OW 266
44650: PUSH
44651: LD_INT 0
44653: EQUAL
44654: IFFALSE 44666
// dist := 28 else
44656: LD_ADDR_VAR 0 14
44660: PUSH
44661: LD_INT 28
44663: ST_TO_ADDR
44664: GO 44674
// dist := 36 ;
44666: LD_ADDR_VAR 0 14
44670: PUSH
44671: LD_INT 36
44673: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44674: LD_VAR 0 1
44678: PPUSH
44679: LD_VAR 0 3
44683: PPUSH
44684: LD_VAR 0 4
44688: PPUSH
44689: CALL_OW 297
44693: PUSH
44694: LD_VAR 0 14
44698: GREATER
44699: IFFALSE 44703
// exit ;
44701: GO 45228
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44703: LD_ADDR_VAR 0 12
44707: PUSH
44708: LD_VAR 0 2
44712: PPUSH
44713: LD_VAR 0 3
44717: PPUSH
44718: LD_VAR 0 4
44722: PPUSH
44723: LD_VAR 0 5
44727: PPUSH
44728: LD_VAR 0 1
44732: PPUSH
44733: CALL_OW 248
44737: PPUSH
44738: LD_INT 0
44740: PPUSH
44741: CALL 45233 0 6
44745: ST_TO_ADDR
// if not hexes then
44746: LD_VAR 0 12
44750: NOT
44751: IFFALSE 44755
// exit ;
44753: GO 45228
// hex := GetHexInfo ( x , y ) ;
44755: LD_ADDR_VAR 0 15
44759: PUSH
44760: LD_VAR 0 3
44764: PPUSH
44765: LD_VAR 0 4
44769: PPUSH
44770: CALL_OW 546
44774: ST_TO_ADDR
// if hex [ 1 ] then
44775: LD_VAR 0 15
44779: PUSH
44780: LD_INT 1
44782: ARRAY
44783: IFFALSE 44787
// exit ;
44785: GO 45228
// height := hex [ 2 ] ;
44787: LD_ADDR_VAR 0 13
44791: PUSH
44792: LD_VAR 0 15
44796: PUSH
44797: LD_INT 2
44799: ARRAY
44800: ST_TO_ADDR
// for i = 1 to hexes do
44801: LD_ADDR_VAR 0 7
44805: PUSH
44806: DOUBLE
44807: LD_INT 1
44809: DEC
44810: ST_TO_ADDR
44811: LD_VAR 0 12
44815: PUSH
44816: FOR_TO
44817: IFFALSE 45147
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44819: LD_VAR 0 12
44823: PUSH
44824: LD_VAR 0 7
44828: ARRAY
44829: PUSH
44830: LD_INT 1
44832: ARRAY
44833: PPUSH
44834: LD_VAR 0 12
44838: PUSH
44839: LD_VAR 0 7
44843: ARRAY
44844: PUSH
44845: LD_INT 2
44847: ARRAY
44848: PPUSH
44849: CALL_OW 488
44853: NOT
44854: PUSH
44855: LD_VAR 0 12
44859: PUSH
44860: LD_VAR 0 7
44864: ARRAY
44865: PUSH
44866: LD_INT 1
44868: ARRAY
44869: PPUSH
44870: LD_VAR 0 12
44874: PUSH
44875: LD_VAR 0 7
44879: ARRAY
44880: PUSH
44881: LD_INT 2
44883: ARRAY
44884: PPUSH
44885: CALL_OW 428
44889: PUSH
44890: LD_INT 0
44892: GREATER
44893: OR
44894: PUSH
44895: LD_VAR 0 12
44899: PUSH
44900: LD_VAR 0 7
44904: ARRAY
44905: PUSH
44906: LD_INT 1
44908: ARRAY
44909: PPUSH
44910: LD_VAR 0 12
44914: PUSH
44915: LD_VAR 0 7
44919: ARRAY
44920: PUSH
44921: LD_INT 2
44923: ARRAY
44924: PPUSH
44925: CALL_OW 351
44929: OR
44930: IFFALSE 44936
// exit ;
44932: POP
44933: POP
44934: GO 45228
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44936: LD_ADDR_VAR 0 8
44940: PUSH
44941: LD_VAR 0 12
44945: PUSH
44946: LD_VAR 0 7
44950: ARRAY
44951: PUSH
44952: LD_INT 1
44954: ARRAY
44955: PPUSH
44956: LD_VAR 0 12
44960: PUSH
44961: LD_VAR 0 7
44965: ARRAY
44966: PUSH
44967: LD_INT 2
44969: ARRAY
44970: PPUSH
44971: CALL_OW 546
44975: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44976: LD_VAR 0 8
44980: PUSH
44981: LD_INT 1
44983: ARRAY
44984: PUSH
44985: LD_VAR 0 8
44989: PUSH
44990: LD_INT 2
44992: ARRAY
44993: PUSH
44994: LD_VAR 0 13
44998: PUSH
44999: LD_INT 2
45001: PLUS
45002: GREATER
45003: OR
45004: PUSH
45005: LD_VAR 0 8
45009: PUSH
45010: LD_INT 2
45012: ARRAY
45013: PUSH
45014: LD_VAR 0 13
45018: PUSH
45019: LD_INT 2
45021: MINUS
45022: LESS
45023: OR
45024: PUSH
45025: LD_VAR 0 8
45029: PUSH
45030: LD_INT 3
45032: ARRAY
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 8
45039: PUSH
45040: LD_INT 9
45042: PUSH
45043: LD_INT 10
45045: PUSH
45046: LD_INT 11
45048: PUSH
45049: LD_INT 12
45051: PUSH
45052: LD_INT 13
45054: PUSH
45055: LD_INT 16
45057: PUSH
45058: LD_INT 17
45060: PUSH
45061: LD_INT 18
45063: PUSH
45064: LD_INT 19
45066: PUSH
45067: LD_INT 20
45069: PUSH
45070: LD_INT 21
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: IN
45088: NOT
45089: OR
45090: PUSH
45091: LD_VAR 0 8
45095: PUSH
45096: LD_INT 5
45098: ARRAY
45099: NOT
45100: OR
45101: PUSH
45102: LD_VAR 0 8
45106: PUSH
45107: LD_INT 6
45109: ARRAY
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 7
45119: PUSH
45120: LD_INT 9
45122: PUSH
45123: LD_INT 10
45125: PUSH
45126: LD_INT 11
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: IN
45137: NOT
45138: OR
45139: IFFALSE 45145
// exit ;
45141: POP
45142: POP
45143: GO 45228
// end ;
45145: GO 44816
45147: POP
45148: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45149: LD_VAR 0 9
45153: PPUSH
45154: LD_VAR 0 3
45158: PPUSH
45159: LD_VAR 0 4
45163: PPUSH
45164: LD_INT 20
45166: PPUSH
45167: CALL 37174 0 4
45171: PUSH
45172: LD_INT 4
45174: ARRAY
45175: IFFALSE 45179
// exit ;
45177: GO 45228
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45179: LD_VAR 0 2
45183: PUSH
45184: LD_INT 29
45186: PUSH
45187: LD_INT 30
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: IN
45194: PUSH
45195: LD_VAR 0 3
45199: PPUSH
45200: LD_VAR 0 4
45204: PPUSH
45205: LD_VAR 0 9
45209: PPUSH
45210: CALL_OW 440
45214: NOT
45215: AND
45216: IFFALSE 45220
// exit ;
45218: GO 45228
// result := true ;
45220: LD_ADDR_VAR 0 6
45224: PUSH
45225: LD_INT 1
45227: ST_TO_ADDR
// end ;
45228: LD_VAR 0 6
45232: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45233: LD_INT 0
45235: PPUSH
45236: PPUSH
45237: PPUSH
45238: PPUSH
45239: PPUSH
45240: PPUSH
45241: PPUSH
45242: PPUSH
45243: PPUSH
45244: PPUSH
45245: PPUSH
45246: PPUSH
45247: PPUSH
45248: PPUSH
45249: PPUSH
45250: PPUSH
45251: PPUSH
45252: PPUSH
45253: PPUSH
45254: PPUSH
45255: PPUSH
45256: PPUSH
45257: PPUSH
45258: PPUSH
45259: PPUSH
45260: PPUSH
45261: PPUSH
45262: PPUSH
45263: PPUSH
45264: PPUSH
45265: PPUSH
45266: PPUSH
45267: PPUSH
45268: PPUSH
45269: PPUSH
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
45276: PPUSH
45277: PPUSH
45278: PPUSH
45279: PPUSH
45280: PPUSH
45281: PPUSH
45282: PPUSH
45283: PPUSH
45284: PPUSH
45285: PPUSH
45286: PPUSH
45287: PPUSH
45288: PPUSH
45289: PPUSH
45290: PPUSH
45291: PPUSH
45292: PPUSH
// result = [ ] ;
45293: LD_ADDR_VAR 0 7
45297: PUSH
45298: EMPTY
45299: ST_TO_ADDR
// temp_list = [ ] ;
45300: LD_ADDR_VAR 0 9
45304: PUSH
45305: EMPTY
45306: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45307: LD_VAR 0 4
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 2
45320: PUSH
45321: LD_INT 3
45323: PUSH
45324: LD_INT 4
45326: PUSH
45327: LD_INT 5
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: IN
45338: NOT
45339: PUSH
45340: LD_VAR 0 1
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: IN
45355: PUSH
45356: LD_VAR 0 5
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 3
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: LIST
45374: IN
45375: NOT
45376: AND
45377: OR
45378: IFFALSE 45382
// exit ;
45380: GO 63773
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45382: LD_VAR 0 1
45386: PUSH
45387: LD_INT 6
45389: PUSH
45390: LD_INT 7
45392: PUSH
45393: LD_INT 8
45395: PUSH
45396: LD_INT 13
45398: PUSH
45399: LD_INT 12
45401: PUSH
45402: LD_INT 15
45404: PUSH
45405: LD_INT 11
45407: PUSH
45408: LD_INT 14
45410: PUSH
45411: LD_INT 10
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: IN
45425: IFFALSE 45435
// btype = b_lab ;
45427: LD_ADDR_VAR 0 1
45431: PUSH
45432: LD_INT 6
45434: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45435: LD_VAR 0 6
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: IN
45454: NOT
45455: PUSH
45456: LD_VAR 0 1
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: LD_INT 3
45472: PUSH
45473: LD_INT 6
45475: PUSH
45476: LD_INT 36
45478: PUSH
45479: LD_INT 4
45481: PUSH
45482: LD_INT 5
45484: PUSH
45485: LD_INT 31
45487: PUSH
45488: LD_INT 32
45490: PUSH
45491: LD_INT 33
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: IN
45507: NOT
45508: PUSH
45509: LD_VAR 0 6
45513: PUSH
45514: LD_INT 1
45516: EQUAL
45517: AND
45518: OR
45519: PUSH
45520: LD_VAR 0 1
45524: PUSH
45525: LD_INT 2
45527: PUSH
45528: LD_INT 3
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: IN
45535: NOT
45536: PUSH
45537: LD_VAR 0 6
45541: PUSH
45542: LD_INT 2
45544: EQUAL
45545: AND
45546: OR
45547: IFFALSE 45557
// mode = 0 ;
45549: LD_ADDR_VAR 0 6
45553: PUSH
45554: LD_INT 0
45556: ST_TO_ADDR
// case mode of 0 :
45557: LD_VAR 0 6
45561: PUSH
45562: LD_INT 0
45564: DOUBLE
45565: EQUAL
45566: IFTRUE 45570
45568: GO 57023
45570: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45571: LD_ADDR_VAR 0 11
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 2
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 3
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 3
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45764: LD_ADDR_VAR 0 12
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 3
45921: NEG
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 3
45932: NEG
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45960: LD_ADDR_VAR 0 13
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 3
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 3
46119: NEG
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 3
46131: NEG
46132: PUSH
46133: LD_INT 3
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46159: LD_ADDR_VAR 0 14
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: LD_INT 3
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 3
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46355: LD_ADDR_VAR 0 15
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 3
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 3
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46548: LD_ADDR_VAR 0 16
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: NEG
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 3
46705: PUSH
46706: LD_INT 3
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46741: LD_ADDR_VAR 0 17
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: NEG
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46971: LD_ADDR_VAR 0 18
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: NEG
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: LD_INT 2
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47201: LD_ADDR_VAR 0 19
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47431: LD_ADDR_VAR 0 20
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 2
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 2
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47661: LD_ADDR_VAR 0 21
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47891: LD_ADDR_VAR 0 22
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48121: LD_ADDR_VAR 0 23
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 2
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: LD_INT 3
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 3
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48401: LD_ADDR_VAR 0 24
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: LD_INT 2
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: NEG
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 3
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 3
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48677: LD_ADDR_VAR 0 25
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48951: LD_ADDR_VAR 0 26
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 2
49138: NEG
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: LD_INT 3
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49227: LD_ADDR_VAR 0 27
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: NEG
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 3
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49507: LD_ADDR_VAR 0 28
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 3
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49789: LD_ADDR_VAR 0 29
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: NEG
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 3
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 3
50033: NEG
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50068: LD_ADDR_VAR 0 30
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 3
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 3
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50346: LD_ADDR_VAR 0 31
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 3
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 3
50589: NEG
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50624: LD_ADDR_VAR 0 32
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 3
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 3
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: LD_INT 3
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 3
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50902: LD_ADDR_VAR 0 33
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: LD_INT 3
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 3
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: LD_INT 3
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: NEG
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51181: LD_ADDR_VAR 0 34
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: NEG
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 3
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 3
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 3
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51461: LD_ADDR_VAR 0 35
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51573: LD_ADDR_VAR 0 36
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51685: LD_ADDR_VAR 0 37
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51797: LD_ADDR_VAR 0 38
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51909: LD_ADDR_VAR 0 39
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52021: LD_ADDR_VAR 0 40
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52133: LD_ADDR_VAR 0 41
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 3
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 3
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 3
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 2
52386: PUSH
52387: LD_INT 3
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 3
52430: NEG
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 3
52442: NEG
52443: PUSH
52444: LD_INT 3
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52483: LD_ADDR_VAR 0 42
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: LD_INT 3
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 3
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: LD_INT 3
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: PUSH
52720: LD_INT 2
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: LD_INT 3
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: LD_INT 3
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: NEG
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52833: LD_ADDR_VAR 0 43
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 2
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 3
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 3
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 3
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 3
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 3
53129: NEG
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 3
53140: NEG
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53181: LD_ADDR_VAR 0 44
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 2
53336: NEG
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: LD_INT 3
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: NEG
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 3
53466: NEG
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: NEG
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 3
53490: NEG
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53531: LD_ADDR_VAR 0 45
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: LD_INT 3
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 3
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 3
53828: NEG
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: NEG
53841: PUSH
53842: LD_INT 3
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53881: LD_ADDR_VAR 0 46
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 3
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 3
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 3
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 3
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 3
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 3
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 3
54177: NEG
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54229: LD_ADDR_VAR 0 47
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 2
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54380: LD_ADDR_VAR 0 48
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54527: LD_ADDR_VAR 0 49
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54671: LD_ADDR_VAR 0 50
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54815: LD_ADDR_VAR 0 51
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 2
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54962: LD_ADDR_VAR 0 52
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55113: LD_ADDR_VAR 0 53
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55343: LD_ADDR_VAR 0 54
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: LD_INT 2
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55573: LD_ADDR_VAR 0 55
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55803: LD_ADDR_VAR 0 56
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56033: LD_ADDR_VAR 0 57
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 2
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: NEG
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56263: LD_ADDR_VAR 0 58
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 2
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56493: LD_ADDR_VAR 0 59
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56581: LD_ADDR_VAR 0 60
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56669: LD_ADDR_VAR 0 61
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56757: LD_ADDR_VAR 0 62
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56845: LD_ADDR_VAR 0 63
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56933: LD_ADDR_VAR 0 64
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: ST_TO_ADDR
// end ; 1 :
57021: GO 62918
57023: LD_INT 1
57025: DOUBLE
57026: EQUAL
57027: IFTRUE 57031
57029: GO 59654
57031: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57032: LD_ADDR_VAR 0 11
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 3
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57076: LD_ADDR_VAR 0 12
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57117: LD_ADDR_VAR 0 13
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 3
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 3
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57157: LD_ADDR_VAR 0 14
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57198: LD_ADDR_VAR 0 15
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 3
57216: NEG
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57242: LD_ADDR_VAR 0 16
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57288: LD_ADDR_VAR 0 17
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 3
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57332: LD_ADDR_VAR 0 18
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 3
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57373: LD_ADDR_VAR 0 19
57377: PUSH
57378: LD_INT 3
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 3
57390: PUSH
57391: LD_INT 3
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57413: LD_ADDR_VAR 0 20
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 3
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57454: LD_ADDR_VAR 0 21
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57498: LD_ADDR_VAR 0 22
57502: PUSH
57503: LD_INT 2
57505: NEG
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 3
57529: NEG
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57544: LD_ADDR_VAR 0 23
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: LD_INT 3
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: LD_INT 4
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 3
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57588: LD_ADDR_VAR 0 24
57592: PUSH
57593: LD_INT 3
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 3
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 4
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57629: LD_ADDR_VAR 0 25
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: LD_INT 3
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 4
57646: PUSH
57647: LD_INT 3
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: LD_INT 4
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57669: LD_ADDR_VAR 0 26
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 3
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 4
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: LIST
57709: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57710: LD_ADDR_VAR 0 27
57714: PUSH
57715: LD_INT 3
57717: NEG
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 3
57728: NEG
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 4
57739: NEG
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: LIST
57753: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57754: LD_ADDR_VAR 0 28
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: LD_INT 3
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 3
57773: NEG
57774: PUSH
57775: LD_INT 4
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 4
57785: NEG
57786: PUSH
57787: LD_INT 3
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: LIST
57799: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57800: LD_ADDR_VAR 0 29
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 3
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 4
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 4
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 3
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 5
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 5
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 4
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: LD_INT 6
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 6
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 5
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57955: LD_ADDR_VAR 0 30
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 3
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 4
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 4
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 4
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 5
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 5
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 5
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 6
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 6
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58098: LD_ADDR_VAR 0 31
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: LD_INT 3
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 4
58135: PUSH
58136: LD_INT 3
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 4
58145: PUSH
58146: LD_INT 4
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: LD_INT 4
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 5
58165: PUSH
58166: LD_INT 4
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 5
58175: PUSH
58176: LD_INT 5
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 4
58185: PUSH
58186: LD_INT 5
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 6
58195: PUSH
58196: LD_INT 5
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 6
58205: PUSH
58206: LD_INT 6
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 5
58215: PUSH
58216: LD_INT 6
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58237: LD_ADDR_VAR 0 32
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 3
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: LD_INT 4
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 4
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 5
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 5
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 4
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 6
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_INT 6
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: LD_INT 5
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58380: LD_ADDR_VAR 0 33
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 3
58409: NEG
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 3
58421: NEG
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 4
58432: NEG
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 4
58443: NEG
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 4
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 5
58466: NEG
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 5
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 5
58489: NEG
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 6
58500: NEG
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 6
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58535: LD_ADDR_VAR 0 34
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: LD_INT 3
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 3
58566: NEG
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: LD_INT 4
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: LD_INT 3
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 4
58602: NEG
58603: PUSH
58604: LD_INT 4
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 4
58614: NEG
58615: PUSH
58616: LD_INT 5
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 5
58626: NEG
58627: PUSH
58628: LD_INT 4
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 5
58638: NEG
58639: PUSH
58640: LD_INT 5
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 5
58650: NEG
58651: PUSH
58652: LD_INT 6
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 6
58662: NEG
58663: PUSH
58664: LD_INT 5
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 6
58674: NEG
58675: PUSH
58676: LD_INT 6
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58698: LD_ADDR_VAR 0 41
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 3
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: LIST
58741: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58742: LD_ADDR_VAR 0 42
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 3
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: LIST
58782: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58783: LD_ADDR_VAR 0 43
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58823: LD_ADDR_VAR 0 44
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58864: LD_ADDR_VAR 0 45
58868: PUSH
58869: LD_INT 2
58871: NEG
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 3
58893: NEG
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: LIST
58907: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58908: LD_ADDR_VAR 0 46
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 3
58939: NEG
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: LIST
58953: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58954: LD_ADDR_VAR 0 47
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: LD_INT 3
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58987: LD_ADDR_VAR 0 48
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59018: LD_ADDR_VAR 0 49
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59047: LD_ADDR_VAR 0 50
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: LD_INT 3
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 3
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59076: LD_ADDR_VAR 0 51
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59107: LD_ADDR_VAR 0 52
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 3
59126: NEG
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59140: LD_ADDR_VAR 0 53
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 3
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: LIST
59183: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59184: LD_ADDR_VAR 0 54
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 3
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: LIST
59224: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59225: LD_ADDR_VAR 0 55
59229: PUSH
59230: LD_INT 3
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: LD_INT 3
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59265: LD_ADDR_VAR 0 56
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: LIST
59305: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59306: LD_ADDR_VAR 0 57
59310: PUSH
59311: LD_INT 2
59313: NEG
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59350: LD_ADDR_VAR 0 58
59354: PUSH
59355: LD_INT 2
59357: NEG
59358: PUSH
59359: LD_INT 3
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 3
59369: NEG
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: NEG
59382: PUSH
59383: LD_INT 3
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59396: LD_ADDR_VAR 0 59
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59440: LD_ADDR_VAR 0 60
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 2
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59481: LD_ADDR_VAR 0 61
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59521: LD_ADDR_VAR 0 62
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: LIST
59561: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59562: LD_ADDR_VAR 0 63
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: LIST
59605: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59606: LD_ADDR_VAR 0 64
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: LD_INT 2
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: ST_TO_ADDR
// end ; 2 :
59652: GO 62918
59654: LD_INT 2
59656: DOUBLE
59657: EQUAL
59658: IFTRUE 59662
59660: GO 62917
59662: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59663: LD_ADDR_VAR 0 29
59667: PUSH
59668: LD_INT 4
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 4
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 5
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 5
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 4
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 3
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 3
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: PUSH
59743: LD_INT 2
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 5
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: LD_INT 3
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 4
59783: PUSH
59784: LD_INT 3
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 4
59793: PUSH
59794: LD_INT 4
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: LD_INT 4
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 4
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: LD_INT 4
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: LD_INT 4
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 3
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 4
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 5
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: LD_INT 5
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 4
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: LD_INT 5
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: LD_INT 3
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 3
59957: NEG
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: NEG
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 4
60002: NEG
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 4
60025: NEG
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: NEG
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 4
60048: NEG
60049: PUSH
60050: LD_INT 4
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 4
60060: NEG
60061: PUSH
60062: LD_INT 5
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 3
60072: NEG
60073: PUSH
60074: LD_INT 4
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 3
60084: NEG
60085: PUSH
60086: LD_INT 3
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 4
60096: NEG
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 5
60108: NEG
60109: PUSH
60110: LD_INT 4
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 5
60120: NEG
60121: PUSH
60122: LD_INT 5
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: LD_INT 5
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 5
60144: NEG
60145: PUSH
60146: LD_INT 3
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60201: LD_ADDR_VAR 0 30
60205: PUSH
60206: LD_INT 4
60208: PUSH
60209: LD_INT 4
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 4
60218: PUSH
60219: LD_INT 3
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 5
60228: PUSH
60229: LD_INT 4
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 5
60238: PUSH
60239: LD_INT 5
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 4
60248: PUSH
60249: LD_INT 5
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: LD_INT 4
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 5
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 3
60288: PUSH
60289: LD_INT 5
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 4
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 4
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 3
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: LD_INT 4
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 4
60391: NEG
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 4
60402: NEG
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 3
60425: NEG
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 4
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 5
60447: NEG
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 5
60458: NEG
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 5
60470: NEG
60471: PUSH
60472: LD_INT 2
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 3
60493: NEG
60494: PUSH
60495: LD_INT 3
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: LD_INT 4
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: LD_INT 3
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 3
60541: NEG
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 4
60553: NEG
60554: PUSH
60555: LD_INT 3
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 4
60565: NEG
60566: PUSH
60567: LD_INT 4
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 2
60577: NEG
60578: PUSH
60579: LD_INT 4
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 4
60589: NEG
60590: PUSH
60591: LD_INT 2
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 4
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 5
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 4
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 3
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 4
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: LD_INT 5
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: LD_INT 3
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: LD_INT 5
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60748: LD_ADDR_VAR 0 31
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 4
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: LD_INT 4
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 5
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 5
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: LD_INT 4
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: LD_INT 3
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: LD_INT 5
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 2
60837: NEG
60838: PUSH
60839: LD_INT 3
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 3
60848: NEG
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 3
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 2
60882: NEG
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 3
60893: NEG
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 4
60904: NEG
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 4
60915: NEG
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 4
60927: NEG
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 4
60950: NEG
60951: PUSH
60952: LD_INT 4
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 4
60962: NEG
60963: PUSH
60964: LD_INT 5
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 3
60974: NEG
60975: PUSH
60976: LD_INT 4
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 3
60986: NEG
60987: PUSH
60988: LD_INT 3
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 4
60998: NEG
60999: PUSH
61000: LD_INT 3
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 5
61010: NEG
61011: PUSH
61012: LD_INT 4
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 5
61022: NEG
61023: PUSH
61024: LD_INT 5
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: NEG
61035: PUSH
61036: LD_INT 5
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 5
61046: NEG
61047: PUSH
61048: LD_INT 3
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 3
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 4
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 3
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: LD_INT 3
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: LD_INT 4
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: LD_INT 4
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 4
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 4
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 5
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 5
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 4
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 3
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 3
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 3
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 5
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61298: LD_ADDR_VAR 0 32
61302: PUSH
61303: LD_INT 4
61305: NEG
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 4
61316: NEG
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 3
61328: NEG
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: NEG
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 4
61350: NEG
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 5
61361: NEG
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 5
61372: NEG
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 5
61384: NEG
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 3
61396: NEG
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: NEG
61408: PUSH
61409: LD_INT 3
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 3
61419: NEG
61420: PUSH
61421: LD_INT 4
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: NEG
61432: PUSH
61433: LD_INT 3
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: LD_INT 2
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 3
61455: NEG
61456: PUSH
61457: LD_INT 2
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 4
61467: NEG
61468: PUSH
61469: LD_INT 3
61471: NEG
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 4
61479: NEG
61480: PUSH
61481: LD_INT 4
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: LD_INT 4
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 4
61503: NEG
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: LD_INT 4
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: LD_INT 5
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: LD_INT 4
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: LD_INT 3
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: LD_INT 3
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: LD_INT 4
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: LD_INT 5
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: PUSH
61595: LD_INT 3
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: LD_INT 5
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 3
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 3
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 4
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 4
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 3
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 4
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 4
61710: PUSH
61711: LD_INT 4
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 4
61720: PUSH
61721: LD_INT 3
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 5
61730: PUSH
61731: LD_INT 4
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 5
61740: PUSH
61741: LD_INT 5
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 4
61750: PUSH
61751: LD_INT 5
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 3
61760: PUSH
61761: LD_INT 4
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 3
61770: PUSH
61771: LD_INT 3
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 5
61780: PUSH
61781: LD_INT 3
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 3
61790: PUSH
61791: LD_INT 5
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61845: LD_ADDR_VAR 0 33
61849: PUSH
61850: LD_INT 4
61852: NEG
61853: PUSH
61854: LD_INT 4
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 4
61864: NEG
61865: PUSH
61866: LD_INT 5
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 3
61876: NEG
61877: PUSH
61878: LD_INT 4
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 3
61888: NEG
61889: PUSH
61890: LD_INT 3
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 4
61900: NEG
61901: PUSH
61902: LD_INT 3
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 5
61912: NEG
61913: PUSH
61914: LD_INT 4
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 5
61924: NEG
61925: PUSH
61926: LD_INT 5
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 3
61936: NEG
61937: PUSH
61938: LD_INT 5
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 5
61948: NEG
61949: PUSH
61950: LD_INT 3
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 3
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 4
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: LD_INT 3
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: LD_INT 3
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: LD_INT 4
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: LD_INT 2
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: LD_INT 4
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 4
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 4
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 5
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 5
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 4
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 3
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 3
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 3
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 5
62145: PUSH
62146: LD_INT 2
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 3
62155: PUSH
62156: LD_INT 3
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: PUSH
62166: LD_INT 2
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 4
62175: PUSH
62176: LD_INT 3
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 4
62185: PUSH
62186: LD_INT 4
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 3
62195: PUSH
62196: LD_INT 4
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: LD_INT 3
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: PUSH
62216: LD_INT 2
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 4
62225: PUSH
62226: LD_INT 2
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: LD_INT 4
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 4
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 3
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 4
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 5
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 5
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 4
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 3
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: LD_INT 5
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: LD_INT 3
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62383: LD_ADDR_VAR 0 34
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: LD_INT 4
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 5
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 4
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: LD_INT 3
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 3
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: LD_INT 4
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: LD_INT 5
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: PUSH
62470: LD_INT 3
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 2
62480: NEG
62481: PUSH
62482: LD_INT 5
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 3
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 3
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 4
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 4
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 3
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 2
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 2
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 4
62575: PUSH
62576: LD_INT 2
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 4
62585: PUSH
62586: LD_INT 4
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 4
62595: PUSH
62596: LD_INT 3
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 5
62605: PUSH
62606: LD_INT 4
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 5
62615: PUSH
62616: LD_INT 5
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 4
62625: PUSH
62626: LD_INT 5
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 3
62635: PUSH
62636: LD_INT 4
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 3
62645: PUSH
62646: LD_INT 3
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 5
62655: PUSH
62656: LD_INT 3
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 3
62665: PUSH
62666: LD_INT 5
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 3
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: LD_INT 3
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: LD_INT 4
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: LD_INT 4
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: LD_INT 3
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: LD_INT 4
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: LD_INT 2
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 4
62768: NEG
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 4
62779: NEG
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 3
62791: NEG
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 3
62802: NEG
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 4
62813: NEG
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 5
62824: NEG
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 5
62835: NEG
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 5
62847: NEG
62848: PUSH
62849: LD_INT 2
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 3
62859: NEG
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: ST_TO_ADDR
// end ; end ;
62915: GO 62918
62917: POP
// case btype of b_depot , b_warehouse :
62918: LD_VAR 0 1
62922: PUSH
62923: LD_INT 0
62925: DOUBLE
62926: EQUAL
62927: IFTRUE 62937
62929: LD_INT 1
62931: DOUBLE
62932: EQUAL
62933: IFTRUE 62937
62935: GO 63138
62937: POP
// case nation of nation_american :
62938: LD_VAR 0 5
62942: PUSH
62943: LD_INT 1
62945: DOUBLE
62946: EQUAL
62947: IFTRUE 62951
62949: GO 63007
62951: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62952: LD_ADDR_VAR 0 9
62956: PUSH
62957: LD_VAR 0 11
62961: PUSH
62962: LD_VAR 0 12
62966: PUSH
62967: LD_VAR 0 13
62971: PUSH
62972: LD_VAR 0 14
62976: PUSH
62977: LD_VAR 0 15
62981: PUSH
62982: LD_VAR 0 16
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: PUSH
62995: LD_VAR 0 4
62999: PUSH
63000: LD_INT 1
63002: PLUS
63003: ARRAY
63004: ST_TO_ADDR
63005: GO 63136
63007: LD_INT 2
63009: DOUBLE
63010: EQUAL
63011: IFTRUE 63015
63013: GO 63071
63015: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63016: LD_ADDR_VAR 0 9
63020: PUSH
63021: LD_VAR 0 17
63025: PUSH
63026: LD_VAR 0 18
63030: PUSH
63031: LD_VAR 0 19
63035: PUSH
63036: LD_VAR 0 20
63040: PUSH
63041: LD_VAR 0 21
63045: PUSH
63046: LD_VAR 0 22
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: PUSH
63059: LD_VAR 0 4
63063: PUSH
63064: LD_INT 1
63066: PLUS
63067: ARRAY
63068: ST_TO_ADDR
63069: GO 63136
63071: LD_INT 3
63073: DOUBLE
63074: EQUAL
63075: IFTRUE 63079
63077: GO 63135
63079: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63080: LD_ADDR_VAR 0 9
63084: PUSH
63085: LD_VAR 0 23
63089: PUSH
63090: LD_VAR 0 24
63094: PUSH
63095: LD_VAR 0 25
63099: PUSH
63100: LD_VAR 0 26
63104: PUSH
63105: LD_VAR 0 27
63109: PUSH
63110: LD_VAR 0 28
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: PUSH
63123: LD_VAR 0 4
63127: PUSH
63128: LD_INT 1
63130: PLUS
63131: ARRAY
63132: ST_TO_ADDR
63133: GO 63136
63135: POP
63136: GO 63691
63138: LD_INT 2
63140: DOUBLE
63141: EQUAL
63142: IFTRUE 63152
63144: LD_INT 3
63146: DOUBLE
63147: EQUAL
63148: IFTRUE 63152
63150: GO 63208
63152: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63153: LD_ADDR_VAR 0 9
63157: PUSH
63158: LD_VAR 0 29
63162: PUSH
63163: LD_VAR 0 30
63167: PUSH
63168: LD_VAR 0 31
63172: PUSH
63173: LD_VAR 0 32
63177: PUSH
63178: LD_VAR 0 33
63182: PUSH
63183: LD_VAR 0 34
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: PUSH
63196: LD_VAR 0 4
63200: PUSH
63201: LD_INT 1
63203: PLUS
63204: ARRAY
63205: ST_TO_ADDR
63206: GO 63691
63208: LD_INT 16
63210: DOUBLE
63211: EQUAL
63212: IFTRUE 63270
63214: LD_INT 17
63216: DOUBLE
63217: EQUAL
63218: IFTRUE 63270
63220: LD_INT 18
63222: DOUBLE
63223: EQUAL
63224: IFTRUE 63270
63226: LD_INT 19
63228: DOUBLE
63229: EQUAL
63230: IFTRUE 63270
63232: LD_INT 22
63234: DOUBLE
63235: EQUAL
63236: IFTRUE 63270
63238: LD_INT 20
63240: DOUBLE
63241: EQUAL
63242: IFTRUE 63270
63244: LD_INT 21
63246: DOUBLE
63247: EQUAL
63248: IFTRUE 63270
63250: LD_INT 23
63252: DOUBLE
63253: EQUAL
63254: IFTRUE 63270
63256: LD_INT 24
63258: DOUBLE
63259: EQUAL
63260: IFTRUE 63270
63262: LD_INT 25
63264: DOUBLE
63265: EQUAL
63266: IFTRUE 63270
63268: GO 63326
63270: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63271: LD_ADDR_VAR 0 9
63275: PUSH
63276: LD_VAR 0 35
63280: PUSH
63281: LD_VAR 0 36
63285: PUSH
63286: LD_VAR 0 37
63290: PUSH
63291: LD_VAR 0 38
63295: PUSH
63296: LD_VAR 0 39
63300: PUSH
63301: LD_VAR 0 40
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: PUSH
63314: LD_VAR 0 4
63318: PUSH
63319: LD_INT 1
63321: PLUS
63322: ARRAY
63323: ST_TO_ADDR
63324: GO 63691
63326: LD_INT 6
63328: DOUBLE
63329: EQUAL
63330: IFTRUE 63382
63332: LD_INT 7
63334: DOUBLE
63335: EQUAL
63336: IFTRUE 63382
63338: LD_INT 8
63340: DOUBLE
63341: EQUAL
63342: IFTRUE 63382
63344: LD_INT 13
63346: DOUBLE
63347: EQUAL
63348: IFTRUE 63382
63350: LD_INT 12
63352: DOUBLE
63353: EQUAL
63354: IFTRUE 63382
63356: LD_INT 15
63358: DOUBLE
63359: EQUAL
63360: IFTRUE 63382
63362: LD_INT 11
63364: DOUBLE
63365: EQUAL
63366: IFTRUE 63382
63368: LD_INT 14
63370: DOUBLE
63371: EQUAL
63372: IFTRUE 63382
63374: LD_INT 10
63376: DOUBLE
63377: EQUAL
63378: IFTRUE 63382
63380: GO 63438
63382: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63383: LD_ADDR_VAR 0 9
63387: PUSH
63388: LD_VAR 0 41
63392: PUSH
63393: LD_VAR 0 42
63397: PUSH
63398: LD_VAR 0 43
63402: PUSH
63403: LD_VAR 0 44
63407: PUSH
63408: LD_VAR 0 45
63412: PUSH
63413: LD_VAR 0 46
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: PUSH
63426: LD_VAR 0 4
63430: PUSH
63431: LD_INT 1
63433: PLUS
63434: ARRAY
63435: ST_TO_ADDR
63436: GO 63691
63438: LD_INT 36
63440: DOUBLE
63441: EQUAL
63442: IFTRUE 63446
63444: GO 63502
63446: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63447: LD_ADDR_VAR 0 9
63451: PUSH
63452: LD_VAR 0 47
63456: PUSH
63457: LD_VAR 0 48
63461: PUSH
63462: LD_VAR 0 49
63466: PUSH
63467: LD_VAR 0 50
63471: PUSH
63472: LD_VAR 0 51
63476: PUSH
63477: LD_VAR 0 52
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: PUSH
63490: LD_VAR 0 4
63494: PUSH
63495: LD_INT 1
63497: PLUS
63498: ARRAY
63499: ST_TO_ADDR
63500: GO 63691
63502: LD_INT 4
63504: DOUBLE
63505: EQUAL
63506: IFTRUE 63528
63508: LD_INT 5
63510: DOUBLE
63511: EQUAL
63512: IFTRUE 63528
63514: LD_INT 34
63516: DOUBLE
63517: EQUAL
63518: IFTRUE 63528
63520: LD_INT 37
63522: DOUBLE
63523: EQUAL
63524: IFTRUE 63528
63526: GO 63584
63528: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63529: LD_ADDR_VAR 0 9
63533: PUSH
63534: LD_VAR 0 53
63538: PUSH
63539: LD_VAR 0 54
63543: PUSH
63544: LD_VAR 0 55
63548: PUSH
63549: LD_VAR 0 56
63553: PUSH
63554: LD_VAR 0 57
63558: PUSH
63559: LD_VAR 0 58
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: PUSH
63572: LD_VAR 0 4
63576: PUSH
63577: LD_INT 1
63579: PLUS
63580: ARRAY
63581: ST_TO_ADDR
63582: GO 63691
63584: LD_INT 31
63586: DOUBLE
63587: EQUAL
63588: IFTRUE 63634
63590: LD_INT 32
63592: DOUBLE
63593: EQUAL
63594: IFTRUE 63634
63596: LD_INT 33
63598: DOUBLE
63599: EQUAL
63600: IFTRUE 63634
63602: LD_INT 27
63604: DOUBLE
63605: EQUAL
63606: IFTRUE 63634
63608: LD_INT 26
63610: DOUBLE
63611: EQUAL
63612: IFTRUE 63634
63614: LD_INT 28
63616: DOUBLE
63617: EQUAL
63618: IFTRUE 63634
63620: LD_INT 29
63622: DOUBLE
63623: EQUAL
63624: IFTRUE 63634
63626: LD_INT 30
63628: DOUBLE
63629: EQUAL
63630: IFTRUE 63634
63632: GO 63690
63634: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63635: LD_ADDR_VAR 0 9
63639: PUSH
63640: LD_VAR 0 59
63644: PUSH
63645: LD_VAR 0 60
63649: PUSH
63650: LD_VAR 0 61
63654: PUSH
63655: LD_VAR 0 62
63659: PUSH
63660: LD_VAR 0 63
63664: PUSH
63665: LD_VAR 0 64
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: PUSH
63678: LD_VAR 0 4
63682: PUSH
63683: LD_INT 1
63685: PLUS
63686: ARRAY
63687: ST_TO_ADDR
63688: GO 63691
63690: POP
// temp_list2 = [ ] ;
63691: LD_ADDR_VAR 0 10
63695: PUSH
63696: EMPTY
63697: ST_TO_ADDR
// for i in temp_list do
63698: LD_ADDR_VAR 0 8
63702: PUSH
63703: LD_VAR 0 9
63707: PUSH
63708: FOR_IN
63709: IFFALSE 63761
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63711: LD_ADDR_VAR 0 10
63715: PUSH
63716: LD_VAR 0 10
63720: PUSH
63721: LD_VAR 0 8
63725: PUSH
63726: LD_INT 1
63728: ARRAY
63729: PUSH
63730: LD_VAR 0 2
63734: PLUS
63735: PUSH
63736: LD_VAR 0 8
63740: PUSH
63741: LD_INT 2
63743: ARRAY
63744: PUSH
63745: LD_VAR 0 3
63749: PLUS
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: EMPTY
63756: LIST
63757: ADD
63758: ST_TO_ADDR
63759: GO 63708
63761: POP
63762: POP
// result = temp_list2 ;
63763: LD_ADDR_VAR 0 7
63767: PUSH
63768: LD_VAR 0 10
63772: ST_TO_ADDR
// end ;
63773: LD_VAR 0 7
63777: RET
// export function EnemyInRange ( unit , dist ) ; begin
63778: LD_INT 0
63780: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63781: LD_ADDR_VAR 0 3
63785: PUSH
63786: LD_VAR 0 1
63790: PPUSH
63791: CALL_OW 255
63795: PPUSH
63796: LD_VAR 0 1
63800: PPUSH
63801: CALL_OW 250
63805: PPUSH
63806: LD_VAR 0 1
63810: PPUSH
63811: CALL_OW 251
63815: PPUSH
63816: LD_VAR 0 2
63820: PPUSH
63821: CALL 37174 0 4
63825: PUSH
63826: LD_INT 4
63828: ARRAY
63829: ST_TO_ADDR
// end ;
63830: LD_VAR 0 3
63834: RET
// export function PlayerSeeMe ( unit ) ; begin
63835: LD_INT 0
63837: PPUSH
// result := See ( your_side , unit ) ;
63838: LD_ADDR_VAR 0 2
63842: PUSH
63843: LD_OWVAR 2
63847: PPUSH
63848: LD_VAR 0 1
63852: PPUSH
63853: CALL_OW 292
63857: ST_TO_ADDR
// end ;
63858: LD_VAR 0 2
63862: RET
// export function ReverseDir ( unit ) ; begin
63863: LD_INT 0
63865: PPUSH
// if not unit then
63866: LD_VAR 0 1
63870: NOT
63871: IFFALSE 63875
// exit ;
63873: GO 63898
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63875: LD_ADDR_VAR 0 2
63879: PUSH
63880: LD_VAR 0 1
63884: PPUSH
63885: CALL_OW 254
63889: PUSH
63890: LD_INT 3
63892: PLUS
63893: PUSH
63894: LD_INT 6
63896: MOD
63897: ST_TO_ADDR
// end ;
63898: LD_VAR 0 2
63902: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63903: LD_INT 0
63905: PPUSH
63906: PPUSH
63907: PPUSH
63908: PPUSH
63909: PPUSH
// if not hexes then
63910: LD_VAR 0 2
63914: NOT
63915: IFFALSE 63919
// exit ;
63917: GO 64067
// dist := 9999 ;
63919: LD_ADDR_VAR 0 5
63923: PUSH
63924: LD_INT 9999
63926: ST_TO_ADDR
// for i = 1 to hexes do
63927: LD_ADDR_VAR 0 4
63931: PUSH
63932: DOUBLE
63933: LD_INT 1
63935: DEC
63936: ST_TO_ADDR
63937: LD_VAR 0 2
63941: PUSH
63942: FOR_TO
63943: IFFALSE 64055
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63945: LD_VAR 0 1
63949: PPUSH
63950: LD_VAR 0 2
63954: PUSH
63955: LD_VAR 0 4
63959: ARRAY
63960: PUSH
63961: LD_INT 1
63963: ARRAY
63964: PPUSH
63965: LD_VAR 0 2
63969: PUSH
63970: LD_VAR 0 4
63974: ARRAY
63975: PUSH
63976: LD_INT 2
63978: ARRAY
63979: PPUSH
63980: CALL_OW 297
63984: PUSH
63985: LD_VAR 0 5
63989: LESS
63990: IFFALSE 64053
// begin hex := hexes [ i ] ;
63992: LD_ADDR_VAR 0 7
63996: PUSH
63997: LD_VAR 0 2
64001: PUSH
64002: LD_VAR 0 4
64006: ARRAY
64007: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64008: LD_ADDR_VAR 0 5
64012: PUSH
64013: LD_VAR 0 1
64017: PPUSH
64018: LD_VAR 0 2
64022: PUSH
64023: LD_VAR 0 4
64027: ARRAY
64028: PUSH
64029: LD_INT 1
64031: ARRAY
64032: PPUSH
64033: LD_VAR 0 2
64037: PUSH
64038: LD_VAR 0 4
64042: ARRAY
64043: PUSH
64044: LD_INT 2
64046: ARRAY
64047: PPUSH
64048: CALL_OW 297
64052: ST_TO_ADDR
// end ; end ;
64053: GO 63942
64055: POP
64056: POP
// result := hex ;
64057: LD_ADDR_VAR 0 3
64061: PUSH
64062: LD_VAR 0 7
64066: ST_TO_ADDR
// end ;
64067: LD_VAR 0 3
64071: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64072: LD_INT 0
64074: PPUSH
64075: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64076: LD_VAR 0 1
64080: NOT
64081: PUSH
64082: LD_VAR 0 1
64086: PUSH
64087: LD_INT 21
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 23
64099: PUSH
64100: LD_INT 2
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PPUSH
64111: CALL_OW 69
64115: IN
64116: NOT
64117: OR
64118: IFFALSE 64122
// exit ;
64120: GO 64169
// for i = 1 to 3 do
64122: LD_ADDR_VAR 0 3
64126: PUSH
64127: DOUBLE
64128: LD_INT 1
64130: DEC
64131: ST_TO_ADDR
64132: LD_INT 3
64134: PUSH
64135: FOR_TO
64136: IFFALSE 64167
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64138: LD_VAR 0 1
64142: PPUSH
64143: CALL_OW 250
64147: PPUSH
64148: LD_VAR 0 1
64152: PPUSH
64153: CALL_OW 251
64157: PPUSH
64158: LD_INT 1
64160: PPUSH
64161: CALL_OW 453
64165: GO 64135
64167: POP
64168: POP
// end ;
64169: LD_VAR 0 2
64173: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64174: LD_INT 0
64176: PPUSH
64177: PPUSH
64178: PPUSH
64179: PPUSH
64180: PPUSH
64181: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64182: LD_VAR 0 1
64186: NOT
64187: PUSH
64188: LD_VAR 0 2
64192: NOT
64193: OR
64194: PUSH
64195: LD_VAR 0 1
64199: PPUSH
64200: CALL_OW 314
64204: OR
64205: IFFALSE 64209
// exit ;
64207: GO 64650
// x := GetX ( enemy_unit ) ;
64209: LD_ADDR_VAR 0 7
64213: PUSH
64214: LD_VAR 0 2
64218: PPUSH
64219: CALL_OW 250
64223: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64224: LD_ADDR_VAR 0 8
64228: PUSH
64229: LD_VAR 0 2
64233: PPUSH
64234: CALL_OW 251
64238: ST_TO_ADDR
// if not x or not y then
64239: LD_VAR 0 7
64243: NOT
64244: PUSH
64245: LD_VAR 0 8
64249: NOT
64250: OR
64251: IFFALSE 64255
// exit ;
64253: GO 64650
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64255: LD_ADDR_VAR 0 6
64259: PUSH
64260: LD_VAR 0 7
64264: PPUSH
64265: LD_INT 0
64267: PPUSH
64268: LD_INT 4
64270: PPUSH
64271: CALL_OW 272
64275: PUSH
64276: LD_VAR 0 8
64280: PPUSH
64281: LD_INT 0
64283: PPUSH
64284: LD_INT 4
64286: PPUSH
64287: CALL_OW 273
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_VAR 0 7
64300: PPUSH
64301: LD_INT 1
64303: PPUSH
64304: LD_INT 4
64306: PPUSH
64307: CALL_OW 272
64311: PUSH
64312: LD_VAR 0 8
64316: PPUSH
64317: LD_INT 1
64319: PPUSH
64320: LD_INT 4
64322: PPUSH
64323: CALL_OW 273
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_VAR 0 7
64336: PPUSH
64337: LD_INT 2
64339: PPUSH
64340: LD_INT 4
64342: PPUSH
64343: CALL_OW 272
64347: PUSH
64348: LD_VAR 0 8
64352: PPUSH
64353: LD_INT 2
64355: PPUSH
64356: LD_INT 4
64358: PPUSH
64359: CALL_OW 273
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_VAR 0 7
64372: PPUSH
64373: LD_INT 3
64375: PPUSH
64376: LD_INT 4
64378: PPUSH
64379: CALL_OW 272
64383: PUSH
64384: LD_VAR 0 8
64388: PPUSH
64389: LD_INT 3
64391: PPUSH
64392: LD_INT 4
64394: PPUSH
64395: CALL_OW 273
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_VAR 0 7
64408: PPUSH
64409: LD_INT 4
64411: PPUSH
64412: LD_INT 4
64414: PPUSH
64415: CALL_OW 272
64419: PUSH
64420: LD_VAR 0 8
64424: PPUSH
64425: LD_INT 4
64427: PPUSH
64428: LD_INT 4
64430: PPUSH
64431: CALL_OW 273
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_VAR 0 7
64444: PPUSH
64445: LD_INT 5
64447: PPUSH
64448: LD_INT 4
64450: PPUSH
64451: CALL_OW 272
64455: PUSH
64456: LD_VAR 0 8
64460: PPUSH
64461: LD_INT 5
64463: PPUSH
64464: LD_INT 4
64466: PPUSH
64467: CALL_OW 273
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: ST_TO_ADDR
// for i = tmp downto 1 do
64484: LD_ADDR_VAR 0 4
64488: PUSH
64489: DOUBLE
64490: LD_VAR 0 6
64494: INC
64495: ST_TO_ADDR
64496: LD_INT 1
64498: PUSH
64499: FOR_DOWNTO
64500: IFFALSE 64601
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64502: LD_VAR 0 6
64506: PUSH
64507: LD_VAR 0 4
64511: ARRAY
64512: PUSH
64513: LD_INT 1
64515: ARRAY
64516: PPUSH
64517: LD_VAR 0 6
64521: PUSH
64522: LD_VAR 0 4
64526: ARRAY
64527: PUSH
64528: LD_INT 2
64530: ARRAY
64531: PPUSH
64532: CALL_OW 488
64536: NOT
64537: PUSH
64538: LD_VAR 0 6
64542: PUSH
64543: LD_VAR 0 4
64547: ARRAY
64548: PUSH
64549: LD_INT 1
64551: ARRAY
64552: PPUSH
64553: LD_VAR 0 6
64557: PUSH
64558: LD_VAR 0 4
64562: ARRAY
64563: PUSH
64564: LD_INT 2
64566: ARRAY
64567: PPUSH
64568: CALL_OW 428
64572: PUSH
64573: LD_INT 0
64575: NONEQUAL
64576: OR
64577: IFFALSE 64599
// tmp := Delete ( tmp , i ) ;
64579: LD_ADDR_VAR 0 6
64583: PUSH
64584: LD_VAR 0 6
64588: PPUSH
64589: LD_VAR 0 4
64593: PPUSH
64594: CALL_OW 3
64598: ST_TO_ADDR
64599: GO 64499
64601: POP
64602: POP
// j := GetClosestHex ( unit , tmp ) ;
64603: LD_ADDR_VAR 0 5
64607: PUSH
64608: LD_VAR 0 1
64612: PPUSH
64613: LD_VAR 0 6
64617: PPUSH
64618: CALL 63903 0 2
64622: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64623: LD_VAR 0 1
64627: PPUSH
64628: LD_VAR 0 5
64632: PUSH
64633: LD_INT 1
64635: ARRAY
64636: PPUSH
64637: LD_VAR 0 5
64641: PUSH
64642: LD_INT 2
64644: ARRAY
64645: PPUSH
64646: CALL_OW 111
// end ;
64650: LD_VAR 0 3
64654: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64655: LD_INT 0
64657: PPUSH
64658: PPUSH
64659: PPUSH
// uc_side = 0 ;
64660: LD_ADDR_OWVAR 20
64664: PUSH
64665: LD_INT 0
64667: ST_TO_ADDR
// uc_nation = 0 ;
64668: LD_ADDR_OWVAR 21
64672: PUSH
64673: LD_INT 0
64675: ST_TO_ADDR
// InitHc_All ( ) ;
64676: CALL_OW 584
// InitVc ;
64680: CALL_OW 20
// if mastodonts then
64684: LD_VAR 0 6
64688: IFFALSE 64755
// for i = 1 to mastodonts do
64690: LD_ADDR_VAR 0 11
64694: PUSH
64695: DOUBLE
64696: LD_INT 1
64698: DEC
64699: ST_TO_ADDR
64700: LD_VAR 0 6
64704: PUSH
64705: FOR_TO
64706: IFFALSE 64753
// begin vc_chassis := 31 ;
64708: LD_ADDR_OWVAR 37
64712: PUSH
64713: LD_INT 31
64715: ST_TO_ADDR
// vc_control := control_rider ;
64716: LD_ADDR_OWVAR 38
64720: PUSH
64721: LD_INT 4
64723: ST_TO_ADDR
// animal := CreateVehicle ;
64724: LD_ADDR_VAR 0 12
64728: PUSH
64729: CALL_OW 45
64733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64734: LD_VAR 0 12
64738: PPUSH
64739: LD_VAR 0 8
64743: PPUSH
64744: LD_INT 0
64746: PPUSH
64747: CALL 66890 0 3
// end ;
64751: GO 64705
64753: POP
64754: POP
// if horses then
64755: LD_VAR 0 5
64759: IFFALSE 64826
// for i = 1 to horses do
64761: LD_ADDR_VAR 0 11
64765: PUSH
64766: DOUBLE
64767: LD_INT 1
64769: DEC
64770: ST_TO_ADDR
64771: LD_VAR 0 5
64775: PUSH
64776: FOR_TO
64777: IFFALSE 64824
// begin hc_class := 21 ;
64779: LD_ADDR_OWVAR 28
64783: PUSH
64784: LD_INT 21
64786: ST_TO_ADDR
// hc_gallery :=  ;
64787: LD_ADDR_OWVAR 33
64791: PUSH
64792: LD_STRING 
64794: ST_TO_ADDR
// animal := CreateHuman ;
64795: LD_ADDR_VAR 0 12
64799: PUSH
64800: CALL_OW 44
64804: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64805: LD_VAR 0 12
64809: PPUSH
64810: LD_VAR 0 8
64814: PPUSH
64815: LD_INT 0
64817: PPUSH
64818: CALL 66890 0 3
// end ;
64822: GO 64776
64824: POP
64825: POP
// if birds then
64826: LD_VAR 0 1
64830: IFFALSE 64897
// for i = 1 to birds do
64832: LD_ADDR_VAR 0 11
64836: PUSH
64837: DOUBLE
64838: LD_INT 1
64840: DEC
64841: ST_TO_ADDR
64842: LD_VAR 0 1
64846: PUSH
64847: FOR_TO
64848: IFFALSE 64895
// begin hc_class = 18 ;
64850: LD_ADDR_OWVAR 28
64854: PUSH
64855: LD_INT 18
64857: ST_TO_ADDR
// hc_gallery =  ;
64858: LD_ADDR_OWVAR 33
64862: PUSH
64863: LD_STRING 
64865: ST_TO_ADDR
// animal := CreateHuman ;
64866: LD_ADDR_VAR 0 12
64870: PUSH
64871: CALL_OW 44
64875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64876: LD_VAR 0 12
64880: PPUSH
64881: LD_VAR 0 8
64885: PPUSH
64886: LD_INT 0
64888: PPUSH
64889: CALL 66890 0 3
// end ;
64893: GO 64847
64895: POP
64896: POP
// if tigers then
64897: LD_VAR 0 2
64901: IFFALSE 64985
// for i = 1 to tigers do
64903: LD_ADDR_VAR 0 11
64907: PUSH
64908: DOUBLE
64909: LD_INT 1
64911: DEC
64912: ST_TO_ADDR
64913: LD_VAR 0 2
64917: PUSH
64918: FOR_TO
64919: IFFALSE 64983
// begin hc_class = class_tiger ;
64921: LD_ADDR_OWVAR 28
64925: PUSH
64926: LD_INT 14
64928: ST_TO_ADDR
// hc_gallery =  ;
64929: LD_ADDR_OWVAR 33
64933: PUSH
64934: LD_STRING 
64936: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64937: LD_ADDR_OWVAR 35
64941: PUSH
64942: LD_INT 7
64944: NEG
64945: PPUSH
64946: LD_INT 7
64948: PPUSH
64949: CALL_OW 12
64953: ST_TO_ADDR
// animal := CreateHuman ;
64954: LD_ADDR_VAR 0 12
64958: PUSH
64959: CALL_OW 44
64963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64964: LD_VAR 0 12
64968: PPUSH
64969: LD_VAR 0 8
64973: PPUSH
64974: LD_INT 0
64976: PPUSH
64977: CALL 66890 0 3
// end ;
64981: GO 64918
64983: POP
64984: POP
// if apemans then
64985: LD_VAR 0 3
64989: IFFALSE 65112
// for i = 1 to apemans do
64991: LD_ADDR_VAR 0 11
64995: PUSH
64996: DOUBLE
64997: LD_INT 1
64999: DEC
65000: ST_TO_ADDR
65001: LD_VAR 0 3
65005: PUSH
65006: FOR_TO
65007: IFFALSE 65110
// begin hc_class = class_apeman ;
65009: LD_ADDR_OWVAR 28
65013: PUSH
65014: LD_INT 12
65016: ST_TO_ADDR
// hc_gallery =  ;
65017: LD_ADDR_OWVAR 33
65021: PUSH
65022: LD_STRING 
65024: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65025: LD_ADDR_OWVAR 35
65029: PUSH
65030: LD_INT 2
65032: NEG
65033: PPUSH
65034: LD_INT 2
65036: PPUSH
65037: CALL_OW 12
65041: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65042: LD_ADDR_OWVAR 31
65046: PUSH
65047: LD_INT 1
65049: PPUSH
65050: LD_INT 3
65052: PPUSH
65053: CALL_OW 12
65057: PUSH
65058: LD_INT 1
65060: PPUSH
65061: LD_INT 3
65063: PPUSH
65064: CALL_OW 12
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: ST_TO_ADDR
// animal := CreateHuman ;
65081: LD_ADDR_VAR 0 12
65085: PUSH
65086: CALL_OW 44
65090: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65091: LD_VAR 0 12
65095: PPUSH
65096: LD_VAR 0 8
65100: PPUSH
65101: LD_INT 0
65103: PPUSH
65104: CALL 66890 0 3
// end ;
65108: GO 65006
65110: POP
65111: POP
// if enchidnas then
65112: LD_VAR 0 4
65116: IFFALSE 65183
// for i = 1 to enchidnas do
65118: LD_ADDR_VAR 0 11
65122: PUSH
65123: DOUBLE
65124: LD_INT 1
65126: DEC
65127: ST_TO_ADDR
65128: LD_VAR 0 4
65132: PUSH
65133: FOR_TO
65134: IFFALSE 65181
// begin hc_class = 13 ;
65136: LD_ADDR_OWVAR 28
65140: PUSH
65141: LD_INT 13
65143: ST_TO_ADDR
// hc_gallery =  ;
65144: LD_ADDR_OWVAR 33
65148: PUSH
65149: LD_STRING 
65151: ST_TO_ADDR
// animal := CreateHuman ;
65152: LD_ADDR_VAR 0 12
65156: PUSH
65157: CALL_OW 44
65161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65162: LD_VAR 0 12
65166: PPUSH
65167: LD_VAR 0 8
65171: PPUSH
65172: LD_INT 0
65174: PPUSH
65175: CALL 66890 0 3
// end ;
65179: GO 65133
65181: POP
65182: POP
// if fishes then
65183: LD_VAR 0 7
65187: IFFALSE 65254
// for i = 1 to fishes do
65189: LD_ADDR_VAR 0 11
65193: PUSH
65194: DOUBLE
65195: LD_INT 1
65197: DEC
65198: ST_TO_ADDR
65199: LD_VAR 0 7
65203: PUSH
65204: FOR_TO
65205: IFFALSE 65252
// begin hc_class = 20 ;
65207: LD_ADDR_OWVAR 28
65211: PUSH
65212: LD_INT 20
65214: ST_TO_ADDR
// hc_gallery =  ;
65215: LD_ADDR_OWVAR 33
65219: PUSH
65220: LD_STRING 
65222: ST_TO_ADDR
// animal := CreateHuman ;
65223: LD_ADDR_VAR 0 12
65227: PUSH
65228: CALL_OW 44
65232: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65233: LD_VAR 0 12
65237: PPUSH
65238: LD_VAR 0 9
65242: PPUSH
65243: LD_INT 0
65245: PPUSH
65246: CALL 66890 0 3
// end ;
65250: GO 65204
65252: POP
65253: POP
// end ;
65254: LD_VAR 0 10
65258: RET
// export function WantHeal ( sci , unit ) ; begin
65259: LD_INT 0
65261: PPUSH
// if GetTaskList ( sci ) > 0 then
65262: LD_VAR 0 1
65266: PPUSH
65267: CALL_OW 437
65271: PUSH
65272: LD_INT 0
65274: GREATER
65275: IFFALSE 65345
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65277: LD_VAR 0 1
65281: PPUSH
65282: CALL_OW 437
65286: PUSH
65287: LD_INT 1
65289: ARRAY
65290: PUSH
65291: LD_INT 1
65293: ARRAY
65294: PUSH
65295: LD_STRING l
65297: EQUAL
65298: PUSH
65299: LD_VAR 0 1
65303: PPUSH
65304: CALL_OW 437
65308: PUSH
65309: LD_INT 1
65311: ARRAY
65312: PUSH
65313: LD_INT 4
65315: ARRAY
65316: PUSH
65317: LD_VAR 0 2
65321: EQUAL
65322: AND
65323: IFFALSE 65335
// result := true else
65325: LD_ADDR_VAR 0 3
65329: PUSH
65330: LD_INT 1
65332: ST_TO_ADDR
65333: GO 65343
// result := false ;
65335: LD_ADDR_VAR 0 3
65339: PUSH
65340: LD_INT 0
65342: ST_TO_ADDR
// end else
65343: GO 65353
// result := false ;
65345: LD_ADDR_VAR 0 3
65349: PUSH
65350: LD_INT 0
65352: ST_TO_ADDR
// end ;
65353: LD_VAR 0 3
65357: RET
// export function HealTarget ( sci ) ; begin
65358: LD_INT 0
65360: PPUSH
// if not sci then
65361: LD_VAR 0 1
65365: NOT
65366: IFFALSE 65370
// exit ;
65368: GO 65435
// result := 0 ;
65370: LD_ADDR_VAR 0 2
65374: PUSH
65375: LD_INT 0
65377: ST_TO_ADDR
// if GetTaskList ( sci ) then
65378: LD_VAR 0 1
65382: PPUSH
65383: CALL_OW 437
65387: IFFALSE 65435
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65389: LD_VAR 0 1
65393: PPUSH
65394: CALL_OW 437
65398: PUSH
65399: LD_INT 1
65401: ARRAY
65402: PUSH
65403: LD_INT 1
65405: ARRAY
65406: PUSH
65407: LD_STRING l
65409: EQUAL
65410: IFFALSE 65435
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65412: LD_ADDR_VAR 0 2
65416: PUSH
65417: LD_VAR 0 1
65421: PPUSH
65422: CALL_OW 437
65426: PUSH
65427: LD_INT 1
65429: ARRAY
65430: PUSH
65431: LD_INT 4
65433: ARRAY
65434: ST_TO_ADDR
// end ;
65435: LD_VAR 0 2
65439: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65440: LD_INT 0
65442: PPUSH
65443: PPUSH
65444: PPUSH
65445: PPUSH
// if not base_units then
65446: LD_VAR 0 1
65450: NOT
65451: IFFALSE 65455
// exit ;
65453: GO 65542
// result := false ;
65455: LD_ADDR_VAR 0 2
65459: PUSH
65460: LD_INT 0
65462: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65463: LD_ADDR_VAR 0 5
65467: PUSH
65468: LD_VAR 0 1
65472: PPUSH
65473: LD_INT 21
65475: PUSH
65476: LD_INT 3
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PPUSH
65483: CALL_OW 72
65487: ST_TO_ADDR
// if not tmp then
65488: LD_VAR 0 5
65492: NOT
65493: IFFALSE 65497
// exit ;
65495: GO 65542
// for i in tmp do
65497: LD_ADDR_VAR 0 3
65501: PUSH
65502: LD_VAR 0 5
65506: PUSH
65507: FOR_IN
65508: IFFALSE 65540
// begin result := EnemyInRange ( i , 22 ) ;
65510: LD_ADDR_VAR 0 2
65514: PUSH
65515: LD_VAR 0 3
65519: PPUSH
65520: LD_INT 22
65522: PPUSH
65523: CALL 63778 0 2
65527: ST_TO_ADDR
// if result then
65528: LD_VAR 0 2
65532: IFFALSE 65538
// exit ;
65534: POP
65535: POP
65536: GO 65542
// end ;
65538: GO 65507
65540: POP
65541: POP
// end ;
65542: LD_VAR 0 2
65546: RET
// export function FilterByTag ( units , tag ) ; begin
65547: LD_INT 0
65549: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65550: LD_ADDR_VAR 0 3
65554: PUSH
65555: LD_VAR 0 1
65559: PPUSH
65560: LD_INT 120
65562: PUSH
65563: LD_VAR 0 2
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PPUSH
65572: CALL_OW 72
65576: ST_TO_ADDR
// end ;
65577: LD_VAR 0 3
65581: RET
// export function IsDriver ( un ) ; begin
65582: LD_INT 0
65584: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65585: LD_ADDR_VAR 0 2
65589: PUSH
65590: LD_VAR 0 1
65594: PUSH
65595: LD_INT 55
65597: PUSH
65598: EMPTY
65599: LIST
65600: PPUSH
65601: CALL_OW 69
65605: IN
65606: ST_TO_ADDR
// end ;
65607: LD_VAR 0 2
65611: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65612: LD_INT 0
65614: PPUSH
65615: PPUSH
// list := [ ] ;
65616: LD_ADDR_VAR 0 5
65620: PUSH
65621: EMPTY
65622: ST_TO_ADDR
// case d of 0 :
65623: LD_VAR 0 3
65627: PUSH
65628: LD_INT 0
65630: DOUBLE
65631: EQUAL
65632: IFTRUE 65636
65634: GO 65769
65636: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65637: LD_ADDR_VAR 0 5
65641: PUSH
65642: LD_VAR 0 1
65646: PUSH
65647: LD_INT 4
65649: MINUS
65650: PUSH
65651: LD_VAR 0 2
65655: PUSH
65656: LD_INT 4
65658: MINUS
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: LIST
65667: PUSH
65668: LD_VAR 0 1
65672: PUSH
65673: LD_INT 3
65675: MINUS
65676: PUSH
65677: LD_VAR 0 2
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: LIST
65689: PUSH
65690: LD_VAR 0 1
65694: PUSH
65695: LD_INT 4
65697: PLUS
65698: PUSH
65699: LD_VAR 0 2
65703: PUSH
65704: LD_INT 4
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: PUSH
65712: LD_VAR 0 1
65716: PUSH
65717: LD_INT 3
65719: PLUS
65720: PUSH
65721: LD_VAR 0 2
65725: PUSH
65726: LD_INT 3
65728: PLUS
65729: PUSH
65730: LD_INT 5
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: LIST
65737: PUSH
65738: LD_VAR 0 1
65742: PUSH
65743: LD_VAR 0 2
65747: PUSH
65748: LD_INT 4
65750: PLUS
65751: PUSH
65752: LD_INT 0
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: ST_TO_ADDR
// end ; 1 :
65767: GO 66467
65769: LD_INT 1
65771: DOUBLE
65772: EQUAL
65773: IFTRUE 65777
65775: GO 65910
65777: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65778: LD_ADDR_VAR 0 5
65782: PUSH
65783: LD_VAR 0 1
65787: PUSH
65788: LD_VAR 0 2
65792: PUSH
65793: LD_INT 4
65795: MINUS
65796: PUSH
65797: LD_INT 3
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: PUSH
65805: LD_VAR 0 1
65809: PUSH
65810: LD_INT 3
65812: MINUS
65813: PUSH
65814: LD_VAR 0 2
65818: PUSH
65819: LD_INT 3
65821: MINUS
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: PUSH
65831: LD_VAR 0 1
65835: PUSH
65836: LD_INT 4
65838: MINUS
65839: PUSH
65840: LD_VAR 0 2
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: PUSH
65853: LD_VAR 0 1
65857: PUSH
65858: LD_VAR 0 2
65862: PUSH
65863: LD_INT 3
65865: PLUS
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: PUSH
65875: LD_VAR 0 1
65879: PUSH
65880: LD_INT 4
65882: PLUS
65883: PUSH
65884: LD_VAR 0 2
65888: PUSH
65889: LD_INT 4
65891: PLUS
65892: PUSH
65893: LD_INT 5
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: LIST
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: ST_TO_ADDR
// end ; 2 :
65908: GO 66467
65910: LD_INT 2
65912: DOUBLE
65913: EQUAL
65914: IFTRUE 65918
65916: GO 66047
65918: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65919: LD_ADDR_VAR 0 5
65923: PUSH
65924: LD_VAR 0 1
65928: PUSH
65929: LD_VAR 0 2
65933: PUSH
65934: LD_INT 3
65936: MINUS
65937: PUSH
65938: LD_INT 3
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: LIST
65945: PUSH
65946: LD_VAR 0 1
65950: PUSH
65951: LD_INT 4
65953: PLUS
65954: PUSH
65955: LD_VAR 0 2
65959: PUSH
65960: LD_INT 4
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: LIST
65967: PUSH
65968: LD_VAR 0 1
65972: PUSH
65973: LD_VAR 0 2
65977: PUSH
65978: LD_INT 4
65980: PLUS
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: LIST
65989: PUSH
65990: LD_VAR 0 1
65994: PUSH
65995: LD_INT 3
65997: MINUS
65998: PUSH
65999: LD_VAR 0 2
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: LIST
66011: PUSH
66012: LD_VAR 0 1
66016: PUSH
66017: LD_INT 4
66019: MINUS
66020: PUSH
66021: LD_VAR 0 2
66025: PUSH
66026: LD_INT 4
66028: MINUS
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: LIST
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: ST_TO_ADDR
// end ; 3 :
66045: GO 66467
66047: LD_INT 3
66049: DOUBLE
66050: EQUAL
66051: IFTRUE 66055
66053: GO 66188
66055: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66056: LD_ADDR_VAR 0 5
66060: PUSH
66061: LD_VAR 0 1
66065: PUSH
66066: LD_INT 3
66068: PLUS
66069: PUSH
66070: LD_VAR 0 2
66074: PUSH
66075: LD_INT 4
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: LIST
66082: PUSH
66083: LD_VAR 0 1
66087: PUSH
66088: LD_INT 4
66090: PLUS
66091: PUSH
66092: LD_VAR 0 2
66096: PUSH
66097: LD_INT 4
66099: PLUS
66100: PUSH
66101: LD_INT 5
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: LIST
66108: PUSH
66109: LD_VAR 0 1
66113: PUSH
66114: LD_INT 4
66116: MINUS
66117: PUSH
66118: LD_VAR 0 2
66122: PUSH
66123: LD_INT 1
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: PUSH
66131: LD_VAR 0 1
66135: PUSH
66136: LD_VAR 0 2
66140: PUSH
66141: LD_INT 4
66143: MINUS
66144: PUSH
66145: LD_INT 3
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: LIST
66152: PUSH
66153: LD_VAR 0 1
66157: PUSH
66158: LD_INT 3
66160: MINUS
66161: PUSH
66162: LD_VAR 0 2
66166: PUSH
66167: LD_INT 3
66169: MINUS
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: LIST
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: ST_TO_ADDR
// end ; 4 :
66186: GO 66467
66188: LD_INT 4
66190: DOUBLE
66191: EQUAL
66192: IFTRUE 66196
66194: GO 66329
66196: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66197: LD_ADDR_VAR 0 5
66201: PUSH
66202: LD_VAR 0 1
66206: PUSH
66207: LD_VAR 0 2
66211: PUSH
66212: LD_INT 4
66214: PLUS
66215: PUSH
66216: LD_INT 0
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: LIST
66223: PUSH
66224: LD_VAR 0 1
66228: PUSH
66229: LD_INT 3
66231: PLUS
66232: PUSH
66233: LD_VAR 0 2
66237: PUSH
66238: LD_INT 3
66240: PLUS
66241: PUSH
66242: LD_INT 5
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: PUSH
66250: LD_VAR 0 1
66254: PUSH
66255: LD_INT 4
66257: PLUS
66258: PUSH
66259: LD_VAR 0 2
66263: PUSH
66264: LD_INT 4
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: LIST
66271: PUSH
66272: LD_VAR 0 1
66276: PUSH
66277: LD_VAR 0 2
66281: PUSH
66282: LD_INT 3
66284: MINUS
66285: PUSH
66286: LD_INT 3
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: LIST
66293: PUSH
66294: LD_VAR 0 1
66298: PUSH
66299: LD_INT 4
66301: MINUS
66302: PUSH
66303: LD_VAR 0 2
66307: PUSH
66308: LD_INT 4
66310: MINUS
66311: PUSH
66312: LD_INT 2
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: LIST
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: ST_TO_ADDR
// end ; 5 :
66327: GO 66467
66329: LD_INT 5
66331: DOUBLE
66332: EQUAL
66333: IFTRUE 66337
66335: GO 66466
66337: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66338: LD_ADDR_VAR 0 5
66342: PUSH
66343: LD_VAR 0 1
66347: PUSH
66348: LD_INT 4
66350: MINUS
66351: PUSH
66352: LD_VAR 0 2
66356: PUSH
66357: LD_INT 1
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: LIST
66364: PUSH
66365: LD_VAR 0 1
66369: PUSH
66370: LD_VAR 0 2
66374: PUSH
66375: LD_INT 4
66377: MINUS
66378: PUSH
66379: LD_INT 3
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: PUSH
66387: LD_VAR 0 1
66391: PUSH
66392: LD_INT 4
66394: PLUS
66395: PUSH
66396: LD_VAR 0 2
66400: PUSH
66401: LD_INT 4
66403: PLUS
66404: PUSH
66405: LD_INT 5
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: PUSH
66413: LD_VAR 0 1
66417: PUSH
66418: LD_INT 3
66420: PLUS
66421: PUSH
66422: LD_VAR 0 2
66426: PUSH
66427: LD_INT 4
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: PUSH
66435: LD_VAR 0 1
66439: PUSH
66440: LD_VAR 0 2
66444: PUSH
66445: LD_INT 3
66447: PLUS
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: LIST
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: ST_TO_ADDR
// end ; end ;
66464: GO 66467
66466: POP
// result := list ;
66467: LD_ADDR_VAR 0 4
66471: PUSH
66472: LD_VAR 0 5
66476: ST_TO_ADDR
// end ;
66477: LD_VAR 0 4
66481: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66482: LD_INT 0
66484: PPUSH
66485: PPUSH
66486: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66487: LD_VAR 0 1
66491: NOT
66492: PUSH
66493: LD_VAR 0 2
66497: PUSH
66498: LD_INT 1
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: LD_INT 3
66506: PUSH
66507: LD_INT 4
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: IN
66516: NOT
66517: OR
66518: IFFALSE 66522
// exit ;
66520: GO 66614
// tmp := [ ] ;
66522: LD_ADDR_VAR 0 5
66526: PUSH
66527: EMPTY
66528: ST_TO_ADDR
// for i in units do
66529: LD_ADDR_VAR 0 4
66533: PUSH
66534: LD_VAR 0 1
66538: PUSH
66539: FOR_IN
66540: IFFALSE 66583
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66542: LD_ADDR_VAR 0 5
66546: PUSH
66547: LD_VAR 0 5
66551: PPUSH
66552: LD_VAR 0 5
66556: PUSH
66557: LD_INT 1
66559: PLUS
66560: PPUSH
66561: LD_VAR 0 4
66565: PPUSH
66566: LD_VAR 0 2
66570: PPUSH
66571: CALL_OW 259
66575: PPUSH
66576: CALL_OW 2
66580: ST_TO_ADDR
66581: GO 66539
66583: POP
66584: POP
// if not tmp then
66585: LD_VAR 0 5
66589: NOT
66590: IFFALSE 66594
// exit ;
66592: GO 66614
// result := SortListByListDesc ( units , tmp ) ;
66594: LD_ADDR_VAR 0 3
66598: PUSH
66599: LD_VAR 0 1
66603: PPUSH
66604: LD_VAR 0 5
66608: PPUSH
66609: CALL_OW 77
66613: ST_TO_ADDR
// end ;
66614: LD_VAR 0 3
66618: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66619: LD_INT 0
66621: PPUSH
66622: PPUSH
66623: PPUSH
// result := false ;
66624: LD_ADDR_VAR 0 3
66628: PUSH
66629: LD_INT 0
66631: ST_TO_ADDR
// x := GetX ( building ) ;
66632: LD_ADDR_VAR 0 4
66636: PUSH
66637: LD_VAR 0 2
66641: PPUSH
66642: CALL_OW 250
66646: ST_TO_ADDR
// y := GetY ( building ) ;
66647: LD_ADDR_VAR 0 5
66651: PUSH
66652: LD_VAR 0 2
66656: PPUSH
66657: CALL_OW 251
66661: ST_TO_ADDR
// if not building or not x or not y then
66662: LD_VAR 0 2
66666: NOT
66667: PUSH
66668: LD_VAR 0 4
66672: NOT
66673: OR
66674: PUSH
66675: LD_VAR 0 5
66679: NOT
66680: OR
66681: IFFALSE 66685
// exit ;
66683: GO 66777
// if GetTaskList ( unit ) then
66685: LD_VAR 0 1
66689: PPUSH
66690: CALL_OW 437
66694: IFFALSE 66777
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66696: LD_STRING e
66698: PUSH
66699: LD_VAR 0 1
66703: PPUSH
66704: CALL_OW 437
66708: PUSH
66709: LD_INT 1
66711: ARRAY
66712: PUSH
66713: LD_INT 1
66715: ARRAY
66716: EQUAL
66717: PUSH
66718: LD_VAR 0 4
66722: PUSH
66723: LD_VAR 0 1
66727: PPUSH
66728: CALL_OW 437
66732: PUSH
66733: LD_INT 1
66735: ARRAY
66736: PUSH
66737: LD_INT 2
66739: ARRAY
66740: EQUAL
66741: AND
66742: PUSH
66743: LD_VAR 0 5
66747: PUSH
66748: LD_VAR 0 1
66752: PPUSH
66753: CALL_OW 437
66757: PUSH
66758: LD_INT 1
66760: ARRAY
66761: PUSH
66762: LD_INT 3
66764: ARRAY
66765: EQUAL
66766: AND
66767: IFFALSE 66777
// result := true end ;
66769: LD_ADDR_VAR 0 3
66773: PUSH
66774: LD_INT 1
66776: ST_TO_ADDR
// end ;
66777: LD_VAR 0 3
66781: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66782: LD_INT 0
66784: PPUSH
// result := false ;
66785: LD_ADDR_VAR 0 4
66789: PUSH
66790: LD_INT 0
66792: ST_TO_ADDR
// if GetTaskList ( unit ) then
66793: LD_VAR 0 1
66797: PPUSH
66798: CALL_OW 437
66802: IFFALSE 66885
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66804: LD_STRING M
66806: PUSH
66807: LD_VAR 0 1
66811: PPUSH
66812: CALL_OW 437
66816: PUSH
66817: LD_INT 1
66819: ARRAY
66820: PUSH
66821: LD_INT 1
66823: ARRAY
66824: EQUAL
66825: PUSH
66826: LD_VAR 0 2
66830: PUSH
66831: LD_VAR 0 1
66835: PPUSH
66836: CALL_OW 437
66840: PUSH
66841: LD_INT 1
66843: ARRAY
66844: PUSH
66845: LD_INT 2
66847: ARRAY
66848: EQUAL
66849: AND
66850: PUSH
66851: LD_VAR 0 3
66855: PUSH
66856: LD_VAR 0 1
66860: PPUSH
66861: CALL_OW 437
66865: PUSH
66866: LD_INT 1
66868: ARRAY
66869: PUSH
66870: LD_INT 3
66872: ARRAY
66873: EQUAL
66874: AND
66875: IFFALSE 66885
// result := true ;
66877: LD_ADDR_VAR 0 4
66881: PUSH
66882: LD_INT 1
66884: ST_TO_ADDR
// end ; end ;
66885: LD_VAR 0 4
66889: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66890: LD_INT 0
66892: PPUSH
66893: PPUSH
66894: PPUSH
66895: PPUSH
// if not unit or not area then
66896: LD_VAR 0 1
66900: NOT
66901: PUSH
66902: LD_VAR 0 2
66906: NOT
66907: OR
66908: IFFALSE 66912
// exit ;
66910: GO 67076
// tmp := AreaToList ( area , i ) ;
66912: LD_ADDR_VAR 0 6
66916: PUSH
66917: LD_VAR 0 2
66921: PPUSH
66922: LD_VAR 0 5
66926: PPUSH
66927: CALL_OW 517
66931: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66932: LD_ADDR_VAR 0 5
66936: PUSH
66937: DOUBLE
66938: LD_INT 1
66940: DEC
66941: ST_TO_ADDR
66942: LD_VAR 0 6
66946: PUSH
66947: LD_INT 1
66949: ARRAY
66950: PUSH
66951: FOR_TO
66952: IFFALSE 67074
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66954: LD_ADDR_VAR 0 7
66958: PUSH
66959: LD_VAR 0 6
66963: PUSH
66964: LD_INT 1
66966: ARRAY
66967: PUSH
66968: LD_VAR 0 5
66972: ARRAY
66973: PUSH
66974: LD_VAR 0 6
66978: PUSH
66979: LD_INT 2
66981: ARRAY
66982: PUSH
66983: LD_VAR 0 5
66987: ARRAY
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66993: LD_VAR 0 7
66997: PUSH
66998: LD_INT 1
67000: ARRAY
67001: PPUSH
67002: LD_VAR 0 7
67006: PUSH
67007: LD_INT 2
67009: ARRAY
67010: PPUSH
67011: CALL_OW 428
67015: PUSH
67016: LD_INT 0
67018: EQUAL
67019: IFFALSE 67072
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67021: LD_VAR 0 1
67025: PPUSH
67026: LD_VAR 0 7
67030: PUSH
67031: LD_INT 1
67033: ARRAY
67034: PPUSH
67035: LD_VAR 0 7
67039: PUSH
67040: LD_INT 2
67042: ARRAY
67043: PPUSH
67044: LD_VAR 0 3
67048: PPUSH
67049: CALL_OW 48
// result := IsPlaced ( unit ) ;
67053: LD_ADDR_VAR 0 4
67057: PUSH
67058: LD_VAR 0 1
67062: PPUSH
67063: CALL_OW 305
67067: ST_TO_ADDR
// exit ;
67068: POP
67069: POP
67070: GO 67076
// end ; end ;
67072: GO 66951
67074: POP
67075: POP
// end ;
67076: LD_VAR 0 4
67080: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67081: LD_INT 0
67083: PPUSH
67084: PPUSH
67085: PPUSH
// if not side or side > 8 then
67086: LD_VAR 0 1
67090: NOT
67091: PUSH
67092: LD_VAR 0 1
67096: PUSH
67097: LD_INT 8
67099: GREATER
67100: OR
67101: IFFALSE 67105
// exit ;
67103: GO 67292
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67105: LD_ADDR_VAR 0 4
67109: PUSH
67110: LD_INT 22
67112: PUSH
67113: LD_VAR 0 1
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 21
67124: PUSH
67125: LD_INT 3
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PPUSH
67136: CALL_OW 69
67140: ST_TO_ADDR
// if not tmp then
67141: LD_VAR 0 4
67145: NOT
67146: IFFALSE 67150
// exit ;
67148: GO 67292
// enable_addtolog := true ;
67150: LD_ADDR_OWVAR 81
67154: PUSH
67155: LD_INT 1
67157: ST_TO_ADDR
// AddToLog ( [ ) ;
67158: LD_STRING [
67160: PPUSH
67161: CALL_OW 561
// for i in tmp do
67165: LD_ADDR_VAR 0 3
67169: PUSH
67170: LD_VAR 0 4
67174: PUSH
67175: FOR_IN
67176: IFFALSE 67283
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67178: LD_STRING [
67180: PUSH
67181: LD_VAR 0 3
67185: PPUSH
67186: CALL_OW 266
67190: STR
67191: PUSH
67192: LD_STRING , 
67194: STR
67195: PUSH
67196: LD_VAR 0 3
67200: PPUSH
67201: CALL_OW 250
67205: STR
67206: PUSH
67207: LD_STRING , 
67209: STR
67210: PUSH
67211: LD_VAR 0 3
67215: PPUSH
67216: CALL_OW 251
67220: STR
67221: PUSH
67222: LD_STRING , 
67224: STR
67225: PUSH
67226: LD_VAR 0 3
67230: PPUSH
67231: CALL_OW 254
67235: STR
67236: PUSH
67237: LD_STRING , 
67239: STR
67240: PUSH
67241: LD_VAR 0 3
67245: PPUSH
67246: LD_INT 1
67248: PPUSH
67249: CALL_OW 268
67253: STR
67254: PUSH
67255: LD_STRING , 
67257: STR
67258: PUSH
67259: LD_VAR 0 3
67263: PPUSH
67264: LD_INT 2
67266: PPUSH
67267: CALL_OW 268
67271: STR
67272: PUSH
67273: LD_STRING ],
67275: STR
67276: PPUSH
67277: CALL_OW 561
// end ;
67281: GO 67175
67283: POP
67284: POP
// AddToLog ( ]; ) ;
67285: LD_STRING ];
67287: PPUSH
67288: CALL_OW 561
// end ;
67292: LD_VAR 0 2
67296: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67297: LD_INT 0
67299: PPUSH
67300: PPUSH
67301: PPUSH
67302: PPUSH
67303: PPUSH
// if not area or not rate or not max then
67304: LD_VAR 0 1
67308: NOT
67309: PUSH
67310: LD_VAR 0 2
67314: NOT
67315: OR
67316: PUSH
67317: LD_VAR 0 4
67321: NOT
67322: OR
67323: IFFALSE 67327
// exit ;
67325: GO 67516
// while 1 do
67327: LD_INT 1
67329: IFFALSE 67516
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67331: LD_ADDR_VAR 0 9
67335: PUSH
67336: LD_VAR 0 1
67340: PPUSH
67341: LD_INT 1
67343: PPUSH
67344: CALL_OW 287
67348: PUSH
67349: LD_INT 10
67351: MUL
67352: ST_TO_ADDR
// r := rate / 10 ;
67353: LD_ADDR_VAR 0 7
67357: PUSH
67358: LD_VAR 0 2
67362: PUSH
67363: LD_INT 10
67365: DIVREAL
67366: ST_TO_ADDR
// time := 1 1$00 ;
67367: LD_ADDR_VAR 0 8
67371: PUSH
67372: LD_INT 2100
67374: ST_TO_ADDR
// if amount < min then
67375: LD_VAR 0 9
67379: PUSH
67380: LD_VAR 0 3
67384: LESS
67385: IFFALSE 67403
// r := r * 2 else
67387: LD_ADDR_VAR 0 7
67391: PUSH
67392: LD_VAR 0 7
67396: PUSH
67397: LD_INT 2
67399: MUL
67400: ST_TO_ADDR
67401: GO 67429
// if amount > max then
67403: LD_VAR 0 9
67407: PUSH
67408: LD_VAR 0 4
67412: GREATER
67413: IFFALSE 67429
// r := r / 2 ;
67415: LD_ADDR_VAR 0 7
67419: PUSH
67420: LD_VAR 0 7
67424: PUSH
67425: LD_INT 2
67427: DIVREAL
67428: ST_TO_ADDR
// time := time / r ;
67429: LD_ADDR_VAR 0 8
67433: PUSH
67434: LD_VAR 0 8
67438: PUSH
67439: LD_VAR 0 7
67443: DIVREAL
67444: ST_TO_ADDR
// if time < 0 then
67445: LD_VAR 0 8
67449: PUSH
67450: LD_INT 0
67452: LESS
67453: IFFALSE 67470
// time := time * - 1 ;
67455: LD_ADDR_VAR 0 8
67459: PUSH
67460: LD_VAR 0 8
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: MUL
67469: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67470: LD_VAR 0 8
67474: PUSH
67475: LD_INT 35
67477: PPUSH
67478: LD_INT 875
67480: PPUSH
67481: CALL_OW 12
67485: PLUS
67486: PPUSH
67487: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67491: LD_INT 1
67493: PPUSH
67494: LD_INT 5
67496: PPUSH
67497: CALL_OW 12
67501: PPUSH
67502: LD_VAR 0 1
67506: PPUSH
67507: LD_INT 1
67509: PPUSH
67510: CALL_OW 55
// end ;
67514: GO 67327
// end ;
67516: LD_VAR 0 5
67520: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67521: LD_INT 0
67523: PPUSH
67524: PPUSH
67525: PPUSH
67526: PPUSH
67527: PPUSH
67528: PPUSH
67529: PPUSH
67530: PPUSH
// if not turrets or not factories then
67531: LD_VAR 0 1
67535: NOT
67536: PUSH
67537: LD_VAR 0 2
67541: NOT
67542: OR
67543: IFFALSE 67547
// exit ;
67545: GO 67854
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67547: LD_ADDR_VAR 0 10
67551: PUSH
67552: LD_INT 5
67554: PUSH
67555: LD_INT 6
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 2
67564: PUSH
67565: LD_INT 4
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 3
67574: PUSH
67575: LD_INT 5
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 24
67589: PUSH
67590: LD_INT 25
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 23
67599: PUSH
67600: LD_INT 27
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 42
67613: PUSH
67614: LD_INT 43
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 44
67623: PUSH
67624: LD_INT 46
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 45
67633: PUSH
67634: LD_INT 47
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: LIST
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: LIST
67650: ST_TO_ADDR
// result := [ ] ;
67651: LD_ADDR_VAR 0 3
67655: PUSH
67656: EMPTY
67657: ST_TO_ADDR
// for i in turrets do
67658: LD_ADDR_VAR 0 4
67662: PUSH
67663: LD_VAR 0 1
67667: PUSH
67668: FOR_IN
67669: IFFALSE 67852
// begin nat := GetNation ( i ) ;
67671: LD_ADDR_VAR 0 7
67675: PUSH
67676: LD_VAR 0 4
67680: PPUSH
67681: CALL_OW 248
67685: ST_TO_ADDR
// weapon := 0 ;
67686: LD_ADDR_VAR 0 8
67690: PUSH
67691: LD_INT 0
67693: ST_TO_ADDR
// if not nat then
67694: LD_VAR 0 7
67698: NOT
67699: IFFALSE 67703
// continue ;
67701: GO 67668
// for j in list [ nat ] do
67703: LD_ADDR_VAR 0 5
67707: PUSH
67708: LD_VAR 0 10
67712: PUSH
67713: LD_VAR 0 7
67717: ARRAY
67718: PUSH
67719: FOR_IN
67720: IFFALSE 67761
// if GetBWeapon ( i ) = j [ 1 ] then
67722: LD_VAR 0 4
67726: PPUSH
67727: CALL_OW 269
67731: PUSH
67732: LD_VAR 0 5
67736: PUSH
67737: LD_INT 1
67739: ARRAY
67740: EQUAL
67741: IFFALSE 67759
// begin weapon := j [ 2 ] ;
67743: LD_ADDR_VAR 0 8
67747: PUSH
67748: LD_VAR 0 5
67752: PUSH
67753: LD_INT 2
67755: ARRAY
67756: ST_TO_ADDR
// break ;
67757: GO 67761
// end ;
67759: GO 67719
67761: POP
67762: POP
// if not weapon then
67763: LD_VAR 0 8
67767: NOT
67768: IFFALSE 67772
// continue ;
67770: GO 67668
// for k in factories do
67772: LD_ADDR_VAR 0 6
67776: PUSH
67777: LD_VAR 0 2
67781: PUSH
67782: FOR_IN
67783: IFFALSE 67848
// begin weapons := AvailableWeaponList ( k ) ;
67785: LD_ADDR_VAR 0 9
67789: PUSH
67790: LD_VAR 0 6
67794: PPUSH
67795: CALL_OW 478
67799: ST_TO_ADDR
// if not weapons then
67800: LD_VAR 0 9
67804: NOT
67805: IFFALSE 67809
// continue ;
67807: GO 67782
// if weapon in weapons then
67809: LD_VAR 0 8
67813: PUSH
67814: LD_VAR 0 9
67818: IN
67819: IFFALSE 67846
// begin result := [ i , weapon ] ;
67821: LD_ADDR_VAR 0 3
67825: PUSH
67826: LD_VAR 0 4
67830: PUSH
67831: LD_VAR 0 8
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: ST_TO_ADDR
// exit ;
67840: POP
67841: POP
67842: POP
67843: POP
67844: GO 67854
// end ; end ;
67846: GO 67782
67848: POP
67849: POP
// end ;
67850: GO 67668
67852: POP
67853: POP
// end ;
67854: LD_VAR 0 3
67858: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67859: LD_INT 0
67861: PPUSH
// if not side or side > 8 then
67862: LD_VAR 0 3
67866: NOT
67867: PUSH
67868: LD_VAR 0 3
67872: PUSH
67873: LD_INT 8
67875: GREATER
67876: OR
67877: IFFALSE 67881
// exit ;
67879: GO 67940
// if not range then
67881: LD_VAR 0 4
67885: NOT
67886: IFFALSE 67897
// range := - 12 ;
67888: LD_ADDR_VAR 0 4
67892: PUSH
67893: LD_INT 12
67895: NEG
67896: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67897: LD_VAR 0 1
67901: PPUSH
67902: LD_VAR 0 2
67906: PPUSH
67907: LD_VAR 0 3
67911: PPUSH
67912: LD_VAR 0 4
67916: PPUSH
67917: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67921: LD_VAR 0 1
67925: PPUSH
67926: LD_VAR 0 2
67930: PPUSH
67931: LD_VAR 0 3
67935: PPUSH
67936: CALL_OW 331
// end ;
67940: LD_VAR 0 5
67944: RET
// export function Video ( mode ) ; begin
67945: LD_INT 0
67947: PPUSH
// ingame_video = mode ;
67948: LD_ADDR_OWVAR 52
67952: PUSH
67953: LD_VAR 0 1
67957: ST_TO_ADDR
// interface_hidden = mode ;
67958: LD_ADDR_OWVAR 54
67962: PUSH
67963: LD_VAR 0 1
67967: ST_TO_ADDR
// end ;
67968: LD_VAR 0 2
67972: RET
// export function Join ( array , element ) ; begin
67973: LD_INT 0
67975: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67976: LD_ADDR_VAR 0 3
67980: PUSH
67981: LD_VAR 0 1
67985: PPUSH
67986: LD_VAR 0 1
67990: PUSH
67991: LD_INT 1
67993: PLUS
67994: PPUSH
67995: LD_VAR 0 2
67999: PPUSH
68000: CALL_OW 1
68004: ST_TO_ADDR
// end ;
68005: LD_VAR 0 3
68009: RET
// export function JoinUnion ( array , element ) ; begin
68010: LD_INT 0
68012: PPUSH
// result := array union element ;
68013: LD_ADDR_VAR 0 3
68017: PUSH
68018: LD_VAR 0 1
68022: PUSH
68023: LD_VAR 0 2
68027: UNION
68028: ST_TO_ADDR
// end ;
68029: LD_VAR 0 3
68033: RET
// export function GetBehemoths ( side ) ; begin
68034: LD_INT 0
68036: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68037: LD_ADDR_VAR 0 2
68041: PUSH
68042: LD_INT 22
68044: PUSH
68045: LD_VAR 0 1
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 31
68056: PUSH
68057: LD_INT 25
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PPUSH
68068: CALL_OW 69
68072: ST_TO_ADDR
// end ;
68073: LD_VAR 0 2
68077: RET
// export function Shuffle ( array ) ; var i , index ; begin
68078: LD_INT 0
68080: PPUSH
68081: PPUSH
68082: PPUSH
// result := [ ] ;
68083: LD_ADDR_VAR 0 2
68087: PUSH
68088: EMPTY
68089: ST_TO_ADDR
// if not array then
68090: LD_VAR 0 1
68094: NOT
68095: IFFALSE 68099
// exit ;
68097: GO 68198
// Randomize ;
68099: CALL_OW 10
// for i = array downto 1 do
68103: LD_ADDR_VAR 0 3
68107: PUSH
68108: DOUBLE
68109: LD_VAR 0 1
68113: INC
68114: ST_TO_ADDR
68115: LD_INT 1
68117: PUSH
68118: FOR_DOWNTO
68119: IFFALSE 68196
// begin index := rand ( 1 , array ) ;
68121: LD_ADDR_VAR 0 4
68125: PUSH
68126: LD_INT 1
68128: PPUSH
68129: LD_VAR 0 1
68133: PPUSH
68134: CALL_OW 12
68138: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68139: LD_ADDR_VAR 0 2
68143: PUSH
68144: LD_VAR 0 2
68148: PPUSH
68149: LD_VAR 0 2
68153: PUSH
68154: LD_INT 1
68156: PLUS
68157: PPUSH
68158: LD_VAR 0 1
68162: PUSH
68163: LD_VAR 0 4
68167: ARRAY
68168: PPUSH
68169: CALL_OW 2
68173: ST_TO_ADDR
// array := Delete ( array , index ) ;
68174: LD_ADDR_VAR 0 1
68178: PUSH
68179: LD_VAR 0 1
68183: PPUSH
68184: LD_VAR 0 4
68188: PPUSH
68189: CALL_OW 3
68193: ST_TO_ADDR
// end ;
68194: GO 68118
68196: POP
68197: POP
// end ;
68198: LD_VAR 0 2
68202: RET
// export function GetBaseMaterials ( base ) ; begin
68203: LD_INT 0
68205: PPUSH
// result := [ 0 , 0 , 0 ] ;
68206: LD_ADDR_VAR 0 2
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: LD_INT 0
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: LIST
68224: ST_TO_ADDR
// if not base then
68225: LD_VAR 0 1
68229: NOT
68230: IFFALSE 68234
// exit ;
68232: GO 68283
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68234: LD_ADDR_VAR 0 2
68238: PUSH
68239: LD_VAR 0 1
68243: PPUSH
68244: LD_INT 1
68246: PPUSH
68247: CALL_OW 275
68251: PUSH
68252: LD_VAR 0 1
68256: PPUSH
68257: LD_INT 2
68259: PPUSH
68260: CALL_OW 275
68264: PUSH
68265: LD_VAR 0 1
68269: PPUSH
68270: LD_INT 3
68272: PPUSH
68273: CALL_OW 275
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: LIST
68282: ST_TO_ADDR
// end ;
68283: LD_VAR 0 2
68287: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68288: LD_INT 0
68290: PPUSH
68291: PPUSH
// result := array ;
68292: LD_ADDR_VAR 0 3
68296: PUSH
68297: LD_VAR 0 1
68301: ST_TO_ADDR
// if size > 0 then
68302: LD_VAR 0 2
68306: PUSH
68307: LD_INT 0
68309: GREATER
68310: IFFALSE 68356
// for i := array downto size do
68312: LD_ADDR_VAR 0 4
68316: PUSH
68317: DOUBLE
68318: LD_VAR 0 1
68322: INC
68323: ST_TO_ADDR
68324: LD_VAR 0 2
68328: PUSH
68329: FOR_DOWNTO
68330: IFFALSE 68354
// result := Delete ( result , result ) ;
68332: LD_ADDR_VAR 0 3
68336: PUSH
68337: LD_VAR 0 3
68341: PPUSH
68342: LD_VAR 0 3
68346: PPUSH
68347: CALL_OW 3
68351: ST_TO_ADDR
68352: GO 68329
68354: POP
68355: POP
// end ;
68356: LD_VAR 0 3
68360: RET
// export function ComExit ( unit ) ; var tmp ; begin
68361: LD_INT 0
68363: PPUSH
68364: PPUSH
// if not IsInUnit ( unit ) then
68365: LD_VAR 0 1
68369: PPUSH
68370: CALL_OW 310
68374: NOT
68375: IFFALSE 68379
// exit ;
68377: GO 68439
// tmp := IsInUnit ( unit ) ;
68379: LD_ADDR_VAR 0 3
68383: PUSH
68384: LD_VAR 0 1
68388: PPUSH
68389: CALL_OW 310
68393: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68394: LD_VAR 0 3
68398: PPUSH
68399: CALL_OW 247
68403: PUSH
68404: LD_INT 2
68406: EQUAL
68407: IFFALSE 68420
// ComExitVehicle ( unit ) else
68409: LD_VAR 0 1
68413: PPUSH
68414: CALL_OW 121
68418: GO 68429
// ComExitBuilding ( unit ) ;
68420: LD_VAR 0 1
68424: PPUSH
68425: CALL_OW 122
// result := tmp ;
68429: LD_ADDR_VAR 0 2
68433: PUSH
68434: LD_VAR 0 3
68438: ST_TO_ADDR
// end ;
68439: LD_VAR 0 2
68443: RET
// export function ComExitAll ( units ) ; var i ; begin
68444: LD_INT 0
68446: PPUSH
68447: PPUSH
// if not units then
68448: LD_VAR 0 1
68452: NOT
68453: IFFALSE 68457
// exit ;
68455: GO 68483
// for i in units do
68457: LD_ADDR_VAR 0 3
68461: PUSH
68462: LD_VAR 0 1
68466: PUSH
68467: FOR_IN
68468: IFFALSE 68481
// ComExit ( i ) ;
68470: LD_VAR 0 3
68474: PPUSH
68475: CALL 68361 0 1
68479: GO 68467
68481: POP
68482: POP
// end ;
68483: LD_VAR 0 2
68487: RET
// export function ResetHc ; begin
68488: LD_INT 0
68490: PPUSH
// InitHc ;
68491: CALL_OW 19
// hc_importance := 0 ;
68495: LD_ADDR_OWVAR 32
68499: PUSH
68500: LD_INT 0
68502: ST_TO_ADDR
// end ;
68503: LD_VAR 0 1
68507: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68508: LD_INT 0
68510: PPUSH
68511: PPUSH
68512: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68513: LD_ADDR_VAR 0 6
68517: PUSH
68518: LD_VAR 0 1
68522: PUSH
68523: LD_VAR 0 3
68527: PLUS
68528: PUSH
68529: LD_INT 2
68531: DIV
68532: ST_TO_ADDR
// if _x < 0 then
68533: LD_VAR 0 6
68537: PUSH
68538: LD_INT 0
68540: LESS
68541: IFFALSE 68558
// _x := _x * - 1 ;
68543: LD_ADDR_VAR 0 6
68547: PUSH
68548: LD_VAR 0 6
68552: PUSH
68553: LD_INT 1
68555: NEG
68556: MUL
68557: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68558: LD_ADDR_VAR 0 7
68562: PUSH
68563: LD_VAR 0 2
68567: PUSH
68568: LD_VAR 0 4
68572: PLUS
68573: PUSH
68574: LD_INT 2
68576: DIV
68577: ST_TO_ADDR
// if _y < 0 then
68578: LD_VAR 0 7
68582: PUSH
68583: LD_INT 0
68585: LESS
68586: IFFALSE 68603
// _y := _y * - 1 ;
68588: LD_ADDR_VAR 0 7
68592: PUSH
68593: LD_VAR 0 7
68597: PUSH
68598: LD_INT 1
68600: NEG
68601: MUL
68602: ST_TO_ADDR
// result := [ _x , _y ] ;
68603: LD_ADDR_VAR 0 5
68607: PUSH
68608: LD_VAR 0 6
68612: PUSH
68613: LD_VAR 0 7
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: ST_TO_ADDR
// end ;
68622: LD_VAR 0 5
68626: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68627: LD_INT 0
68629: PPUSH
68630: PPUSH
68631: PPUSH
68632: PPUSH
// task := GetTaskList ( unit ) ;
68633: LD_ADDR_VAR 0 7
68637: PUSH
68638: LD_VAR 0 1
68642: PPUSH
68643: CALL_OW 437
68647: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68648: LD_VAR 0 7
68652: NOT
68653: PUSH
68654: LD_VAR 0 1
68658: PPUSH
68659: LD_VAR 0 2
68663: PPUSH
68664: CALL_OW 308
68668: NOT
68669: AND
68670: IFFALSE 68674
// exit ;
68672: GO 68792
// if IsInArea ( unit , area ) then
68674: LD_VAR 0 1
68678: PPUSH
68679: LD_VAR 0 2
68683: PPUSH
68684: CALL_OW 308
68688: IFFALSE 68706
// begin ComMoveToArea ( unit , goAway ) ;
68690: LD_VAR 0 1
68694: PPUSH
68695: LD_VAR 0 3
68699: PPUSH
68700: CALL_OW 113
// exit ;
68704: GO 68792
// end ; if task [ 1 ] [ 1 ] <> M then
68706: LD_VAR 0 7
68710: PUSH
68711: LD_INT 1
68713: ARRAY
68714: PUSH
68715: LD_INT 1
68717: ARRAY
68718: PUSH
68719: LD_STRING M
68721: NONEQUAL
68722: IFFALSE 68726
// exit ;
68724: GO 68792
// x := task [ 1 ] [ 2 ] ;
68726: LD_ADDR_VAR 0 5
68730: PUSH
68731: LD_VAR 0 7
68735: PUSH
68736: LD_INT 1
68738: ARRAY
68739: PUSH
68740: LD_INT 2
68742: ARRAY
68743: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68744: LD_ADDR_VAR 0 6
68748: PUSH
68749: LD_VAR 0 7
68753: PUSH
68754: LD_INT 1
68756: ARRAY
68757: PUSH
68758: LD_INT 3
68760: ARRAY
68761: ST_TO_ADDR
// if InArea ( x , y , area ) then
68762: LD_VAR 0 5
68766: PPUSH
68767: LD_VAR 0 6
68771: PPUSH
68772: LD_VAR 0 2
68776: PPUSH
68777: CALL_OW 309
68781: IFFALSE 68792
// ComStop ( unit ) ;
68783: LD_VAR 0 1
68787: PPUSH
68788: CALL_OW 141
// end ;
68792: LD_VAR 0 4
68796: RET
// export function Abs ( value ) ; begin
68797: LD_INT 0
68799: PPUSH
// result := value ;
68800: LD_ADDR_VAR 0 2
68804: PUSH
68805: LD_VAR 0 1
68809: ST_TO_ADDR
// if value < 0 then
68810: LD_VAR 0 1
68814: PUSH
68815: LD_INT 0
68817: LESS
68818: IFFALSE 68835
// result := value * - 1 ;
68820: LD_ADDR_VAR 0 2
68824: PUSH
68825: LD_VAR 0 1
68829: PUSH
68830: LD_INT 1
68832: NEG
68833: MUL
68834: ST_TO_ADDR
// end ;
68835: LD_VAR 0 2
68839: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68840: LD_INT 0
68842: PPUSH
68843: PPUSH
68844: PPUSH
68845: PPUSH
68846: PPUSH
68847: PPUSH
68848: PPUSH
68849: PPUSH
// if not unit or not building then
68850: LD_VAR 0 1
68854: NOT
68855: PUSH
68856: LD_VAR 0 2
68860: NOT
68861: OR
68862: IFFALSE 68866
// exit ;
68864: GO 69092
// x := GetX ( building ) ;
68866: LD_ADDR_VAR 0 4
68870: PUSH
68871: LD_VAR 0 2
68875: PPUSH
68876: CALL_OW 250
68880: ST_TO_ADDR
// y := GetY ( building ) ;
68881: LD_ADDR_VAR 0 6
68885: PUSH
68886: LD_VAR 0 2
68890: PPUSH
68891: CALL_OW 251
68895: ST_TO_ADDR
// d := GetDir ( building ) ;
68896: LD_ADDR_VAR 0 8
68900: PUSH
68901: LD_VAR 0 2
68905: PPUSH
68906: CALL_OW 254
68910: ST_TO_ADDR
// r := 4 ;
68911: LD_ADDR_VAR 0 9
68915: PUSH
68916: LD_INT 4
68918: ST_TO_ADDR
// for i := 1 to 5 do
68919: LD_ADDR_VAR 0 10
68923: PUSH
68924: DOUBLE
68925: LD_INT 1
68927: DEC
68928: ST_TO_ADDR
68929: LD_INT 5
68931: PUSH
68932: FOR_TO
68933: IFFALSE 69090
// begin _x := ShiftX ( x , d , r + i ) ;
68935: LD_ADDR_VAR 0 5
68939: PUSH
68940: LD_VAR 0 4
68944: PPUSH
68945: LD_VAR 0 8
68949: PPUSH
68950: LD_VAR 0 9
68954: PUSH
68955: LD_VAR 0 10
68959: PLUS
68960: PPUSH
68961: CALL_OW 272
68965: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68966: LD_ADDR_VAR 0 7
68970: PUSH
68971: LD_VAR 0 6
68975: PPUSH
68976: LD_VAR 0 8
68980: PPUSH
68981: LD_VAR 0 9
68985: PUSH
68986: LD_VAR 0 10
68990: PLUS
68991: PPUSH
68992: CALL_OW 273
68996: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68997: LD_VAR 0 5
69001: PPUSH
69002: LD_VAR 0 7
69006: PPUSH
69007: CALL_OW 488
69011: PUSH
69012: LD_VAR 0 5
69016: PPUSH
69017: LD_VAR 0 7
69021: PPUSH
69022: CALL_OW 428
69026: PPUSH
69027: CALL_OW 247
69031: PUSH
69032: LD_INT 3
69034: PUSH
69035: LD_INT 2
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: IN
69042: NOT
69043: AND
69044: IFFALSE 69088
// begin ComMoveXY ( unit , _x , _y ) ;
69046: LD_VAR 0 1
69050: PPUSH
69051: LD_VAR 0 5
69055: PPUSH
69056: LD_VAR 0 7
69060: PPUSH
69061: CALL_OW 111
// result := [ _x , _y ] ;
69065: LD_ADDR_VAR 0 3
69069: PUSH
69070: LD_VAR 0 5
69074: PUSH
69075: LD_VAR 0 7
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: ST_TO_ADDR
// exit ;
69084: POP
69085: POP
69086: GO 69092
// end ; end ;
69088: GO 68932
69090: POP
69091: POP
// end ;
69092: LD_VAR 0 3
69096: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69097: LD_INT 0
69099: PPUSH
69100: PPUSH
69101: PPUSH
// result := 0 ;
69102: LD_ADDR_VAR 0 3
69106: PUSH
69107: LD_INT 0
69109: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69110: LD_VAR 0 1
69114: PUSH
69115: LD_INT 0
69117: LESS
69118: PUSH
69119: LD_VAR 0 1
69123: PUSH
69124: LD_INT 8
69126: GREATER
69127: OR
69128: PUSH
69129: LD_VAR 0 2
69133: PUSH
69134: LD_INT 0
69136: LESS
69137: OR
69138: PUSH
69139: LD_VAR 0 2
69143: PUSH
69144: LD_INT 8
69146: GREATER
69147: OR
69148: IFFALSE 69152
// exit ;
69150: GO 69227
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69152: LD_ADDR_VAR 0 4
69156: PUSH
69157: LD_INT 22
69159: PUSH
69160: LD_VAR 0 2
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PPUSH
69169: CALL_OW 69
69173: PUSH
69174: FOR_IN
69175: IFFALSE 69225
// begin un := UnitShoot ( i ) ;
69177: LD_ADDR_VAR 0 5
69181: PUSH
69182: LD_VAR 0 4
69186: PPUSH
69187: CALL_OW 504
69191: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69192: LD_VAR 0 5
69196: PPUSH
69197: CALL_OW 255
69201: PUSH
69202: LD_VAR 0 1
69206: EQUAL
69207: IFFALSE 69223
// begin result := un ;
69209: LD_ADDR_VAR 0 3
69213: PUSH
69214: LD_VAR 0 5
69218: ST_TO_ADDR
// exit ;
69219: POP
69220: POP
69221: GO 69227
// end ; end ;
69223: GO 69174
69225: POP
69226: POP
// end ;
69227: LD_VAR 0 3
69231: RET
// export function GetCargoBay ( units ) ; begin
69232: LD_INT 0
69234: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69235: LD_ADDR_VAR 0 2
69239: PUSH
69240: LD_VAR 0 1
69244: PPUSH
69245: LD_INT 2
69247: PUSH
69248: LD_INT 34
69250: PUSH
69251: LD_INT 12
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 34
69260: PUSH
69261: LD_INT 51
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 34
69270: PUSH
69271: LD_INT 32
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 34
69280: PUSH
69281: LD_EXP 22
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: PPUSH
69297: CALL_OW 72
69301: ST_TO_ADDR
// end ;
69302: LD_VAR 0 2
69306: RET
// export function Negate ( value ) ; begin
69307: LD_INT 0
69309: PPUSH
// result := not value ;
69310: LD_ADDR_VAR 0 2
69314: PUSH
69315: LD_VAR 0 1
69319: NOT
69320: ST_TO_ADDR
// end ;
69321: LD_VAR 0 2
69325: RET
// export function Inc ( value ) ; begin
69326: LD_INT 0
69328: PPUSH
// result := value + 1 ;
69329: LD_ADDR_VAR 0 2
69333: PUSH
69334: LD_VAR 0 1
69338: PUSH
69339: LD_INT 1
69341: PLUS
69342: ST_TO_ADDR
// end ;
69343: LD_VAR 0 2
69347: RET
// export function Dec ( value ) ; begin
69348: LD_INT 0
69350: PPUSH
// result := value - 1 ;
69351: LD_ADDR_VAR 0 2
69355: PUSH
69356: LD_VAR 0 1
69360: PUSH
69361: LD_INT 1
69363: MINUS
69364: ST_TO_ADDR
// end ;
69365: LD_VAR 0 2
69369: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69370: LD_INT 0
69372: PPUSH
69373: PPUSH
69374: PPUSH
69375: PPUSH
69376: PPUSH
69377: PPUSH
69378: PPUSH
69379: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69380: LD_VAR 0 1
69384: PPUSH
69385: LD_VAR 0 2
69389: PPUSH
69390: CALL_OW 488
69394: NOT
69395: PUSH
69396: LD_VAR 0 3
69400: PPUSH
69401: LD_VAR 0 4
69405: PPUSH
69406: CALL_OW 488
69410: NOT
69411: OR
69412: IFFALSE 69425
// begin result := - 1 ;
69414: LD_ADDR_VAR 0 5
69418: PUSH
69419: LD_INT 1
69421: NEG
69422: ST_TO_ADDR
// exit ;
69423: GO 69660
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69425: LD_ADDR_VAR 0 12
69429: PUSH
69430: LD_VAR 0 1
69434: PPUSH
69435: LD_VAR 0 2
69439: PPUSH
69440: LD_VAR 0 3
69444: PPUSH
69445: LD_VAR 0 4
69449: PPUSH
69450: CALL 68508 0 4
69454: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69455: LD_ADDR_VAR 0 11
69459: PUSH
69460: LD_VAR 0 1
69464: PPUSH
69465: LD_VAR 0 2
69469: PPUSH
69470: LD_VAR 0 12
69474: PUSH
69475: LD_INT 1
69477: ARRAY
69478: PPUSH
69479: LD_VAR 0 12
69483: PUSH
69484: LD_INT 2
69486: ARRAY
69487: PPUSH
69488: CALL_OW 298
69492: ST_TO_ADDR
// distance := 9999 ;
69493: LD_ADDR_VAR 0 10
69497: PUSH
69498: LD_INT 9999
69500: ST_TO_ADDR
// for i := 0 to 5 do
69501: LD_ADDR_VAR 0 6
69505: PUSH
69506: DOUBLE
69507: LD_INT 0
69509: DEC
69510: ST_TO_ADDR
69511: LD_INT 5
69513: PUSH
69514: FOR_TO
69515: IFFALSE 69658
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69517: LD_ADDR_VAR 0 7
69521: PUSH
69522: LD_VAR 0 1
69526: PPUSH
69527: LD_VAR 0 6
69531: PPUSH
69532: LD_VAR 0 11
69536: PPUSH
69537: CALL_OW 272
69541: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69542: LD_ADDR_VAR 0 8
69546: PUSH
69547: LD_VAR 0 2
69551: PPUSH
69552: LD_VAR 0 6
69556: PPUSH
69557: LD_VAR 0 11
69561: PPUSH
69562: CALL_OW 273
69566: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69567: LD_VAR 0 7
69571: PPUSH
69572: LD_VAR 0 8
69576: PPUSH
69577: CALL_OW 488
69581: NOT
69582: IFFALSE 69586
// continue ;
69584: GO 69514
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69586: LD_ADDR_VAR 0 9
69590: PUSH
69591: LD_VAR 0 12
69595: PUSH
69596: LD_INT 1
69598: ARRAY
69599: PPUSH
69600: LD_VAR 0 12
69604: PUSH
69605: LD_INT 2
69607: ARRAY
69608: PPUSH
69609: LD_VAR 0 7
69613: PPUSH
69614: LD_VAR 0 8
69618: PPUSH
69619: CALL_OW 298
69623: ST_TO_ADDR
// if tmp < distance then
69624: LD_VAR 0 9
69628: PUSH
69629: LD_VAR 0 10
69633: LESS
69634: IFFALSE 69656
// begin result := i ;
69636: LD_ADDR_VAR 0 5
69640: PUSH
69641: LD_VAR 0 6
69645: ST_TO_ADDR
// distance := tmp ;
69646: LD_ADDR_VAR 0 10
69650: PUSH
69651: LD_VAR 0 9
69655: ST_TO_ADDR
// end ; end ;
69656: GO 69514
69658: POP
69659: POP
// end ;
69660: LD_VAR 0 5
69664: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69665: LD_INT 0
69667: PPUSH
69668: PPUSH
// if not driver or not IsInUnit ( driver ) then
69669: LD_VAR 0 1
69673: NOT
69674: PUSH
69675: LD_VAR 0 1
69679: PPUSH
69680: CALL_OW 310
69684: NOT
69685: OR
69686: IFFALSE 69690
// exit ;
69688: GO 69780
// vehicle := IsInUnit ( driver ) ;
69690: LD_ADDR_VAR 0 3
69694: PUSH
69695: LD_VAR 0 1
69699: PPUSH
69700: CALL_OW 310
69704: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69705: LD_VAR 0 1
69709: PPUSH
69710: LD_STRING \
69712: PUSH
69713: LD_INT 0
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: LD_INT 0
69721: PUSH
69722: LD_INT 0
69724: PUSH
69725: LD_INT 0
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: PUSH
69740: LD_STRING E
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: LD_VAR 0 3
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: LD_INT 0
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PPUSH
69776: CALL_OW 446
// end ;
69780: LD_VAR 0 2
69784: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69785: LD_INT 0
69787: PPUSH
69788: PPUSH
// if not driver or not IsInUnit ( driver ) then
69789: LD_VAR 0 1
69793: NOT
69794: PUSH
69795: LD_VAR 0 1
69799: PPUSH
69800: CALL_OW 310
69804: NOT
69805: OR
69806: IFFALSE 69810
// exit ;
69808: GO 69900
// vehicle := IsInUnit ( driver ) ;
69810: LD_ADDR_VAR 0 3
69814: PUSH
69815: LD_VAR 0 1
69819: PPUSH
69820: CALL_OW 310
69824: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69825: LD_VAR 0 1
69829: PPUSH
69830: LD_STRING \
69832: PUSH
69833: LD_INT 0
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: LD_INT 0
69844: PUSH
69845: LD_INT 0
69847: PUSH
69848: LD_INT 0
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: PUSH
69860: LD_STRING E
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: LD_INT 0
69868: PUSH
69869: LD_VAR 0 3
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: LD_INT 0
69879: PUSH
69880: LD_INT 0
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PPUSH
69896: CALL_OW 447
// end ;
69900: LD_VAR 0 2
69904: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69905: LD_INT 0
69907: PPUSH
69908: PPUSH
69909: PPUSH
// tmp := [ ] ;
69910: LD_ADDR_VAR 0 5
69914: PUSH
69915: EMPTY
69916: ST_TO_ADDR
// for i in units do
69917: LD_ADDR_VAR 0 4
69921: PUSH
69922: LD_VAR 0 1
69926: PUSH
69927: FOR_IN
69928: IFFALSE 69966
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69930: LD_ADDR_VAR 0 5
69934: PUSH
69935: LD_VAR 0 5
69939: PPUSH
69940: LD_VAR 0 5
69944: PUSH
69945: LD_INT 1
69947: PLUS
69948: PPUSH
69949: LD_VAR 0 4
69953: PPUSH
69954: CALL_OW 256
69958: PPUSH
69959: CALL_OW 2
69963: ST_TO_ADDR
69964: GO 69927
69966: POP
69967: POP
// if not tmp then
69968: LD_VAR 0 5
69972: NOT
69973: IFFALSE 69977
// exit ;
69975: GO 70025
// if asc then
69977: LD_VAR 0 2
69981: IFFALSE 70005
// result := SortListByListAsc ( units , tmp ) else
69983: LD_ADDR_VAR 0 3
69987: PUSH
69988: LD_VAR 0 1
69992: PPUSH
69993: LD_VAR 0 5
69997: PPUSH
69998: CALL_OW 76
70002: ST_TO_ADDR
70003: GO 70025
// result := SortListByListDesc ( units , tmp ) ;
70005: LD_ADDR_VAR 0 3
70009: PUSH
70010: LD_VAR 0 1
70014: PPUSH
70015: LD_VAR 0 5
70019: PPUSH
70020: CALL_OW 77
70024: ST_TO_ADDR
// end ;
70025: LD_VAR 0 3
70029: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70030: LD_INT 0
70032: PPUSH
70033: PPUSH
// task := GetTaskList ( mech ) ;
70034: LD_ADDR_VAR 0 4
70038: PUSH
70039: LD_VAR 0 1
70043: PPUSH
70044: CALL_OW 437
70048: ST_TO_ADDR
// if not task then
70049: LD_VAR 0 4
70053: NOT
70054: IFFALSE 70058
// exit ;
70056: GO 70100
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70058: LD_ADDR_VAR 0 3
70062: PUSH
70063: LD_VAR 0 4
70067: PUSH
70068: LD_INT 1
70070: ARRAY
70071: PUSH
70072: LD_INT 1
70074: ARRAY
70075: PUSH
70076: LD_STRING r
70078: EQUAL
70079: PUSH
70080: LD_VAR 0 4
70084: PUSH
70085: LD_INT 1
70087: ARRAY
70088: PUSH
70089: LD_INT 4
70091: ARRAY
70092: PUSH
70093: LD_VAR 0 2
70097: EQUAL
70098: AND
70099: ST_TO_ADDR
// end ;
70100: LD_VAR 0 3
70104: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70105: LD_INT 0
70107: PPUSH
// SetDir ( unit , d ) ;
70108: LD_VAR 0 1
70112: PPUSH
70113: LD_VAR 0 4
70117: PPUSH
70118: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70122: LD_VAR 0 1
70126: PPUSH
70127: LD_VAR 0 2
70131: PPUSH
70132: LD_VAR 0 3
70136: PPUSH
70137: LD_VAR 0 5
70141: PPUSH
70142: CALL_OW 48
// end ;
70146: LD_VAR 0 6
70150: RET
// export function ToNaturalNumber ( number ) ; begin
70151: LD_INT 0
70153: PPUSH
// result := number div 1 ;
70154: LD_ADDR_VAR 0 2
70158: PUSH
70159: LD_VAR 0 1
70163: PUSH
70164: LD_INT 1
70166: DIV
70167: ST_TO_ADDR
// if number < 0 then
70168: LD_VAR 0 1
70172: PUSH
70173: LD_INT 0
70175: LESS
70176: IFFALSE 70186
// result := 0 ;
70178: LD_ADDR_VAR 0 2
70182: PUSH
70183: LD_INT 0
70185: ST_TO_ADDR
// end ;
70186: LD_VAR 0 2
70190: RET
// export function SortByClass ( units , class ) ; var un ; begin
70191: LD_INT 0
70193: PPUSH
70194: PPUSH
// if not units or not class then
70195: LD_VAR 0 1
70199: NOT
70200: PUSH
70201: LD_VAR 0 2
70205: NOT
70206: OR
70207: IFFALSE 70211
// exit ;
70209: GO 70306
// result := [ ] ;
70211: LD_ADDR_VAR 0 3
70215: PUSH
70216: EMPTY
70217: ST_TO_ADDR
// for un in units do
70218: LD_ADDR_VAR 0 4
70222: PUSH
70223: LD_VAR 0 1
70227: PUSH
70228: FOR_IN
70229: IFFALSE 70304
// if GetClass ( un ) = class then
70231: LD_VAR 0 4
70235: PPUSH
70236: CALL_OW 257
70240: PUSH
70241: LD_VAR 0 2
70245: EQUAL
70246: IFFALSE 70273
// result := Insert ( result , 1 , un ) else
70248: LD_ADDR_VAR 0 3
70252: PUSH
70253: LD_VAR 0 3
70257: PPUSH
70258: LD_INT 1
70260: PPUSH
70261: LD_VAR 0 4
70265: PPUSH
70266: CALL_OW 2
70270: ST_TO_ADDR
70271: GO 70302
// result := Replace ( result , result + 1 , un ) ;
70273: LD_ADDR_VAR 0 3
70277: PUSH
70278: LD_VAR 0 3
70282: PPUSH
70283: LD_VAR 0 3
70287: PUSH
70288: LD_INT 1
70290: PLUS
70291: PPUSH
70292: LD_VAR 0 4
70296: PPUSH
70297: CALL_OW 1
70301: ST_TO_ADDR
70302: GO 70228
70304: POP
70305: POP
// end ;
70306: LD_VAR 0 3
70310: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70311: LD_INT 0
70313: PPUSH
70314: PPUSH
70315: PPUSH
70316: PPUSH
70317: PPUSH
70318: PPUSH
70319: PPUSH
// result := [ ] ;
70320: LD_ADDR_VAR 0 4
70324: PUSH
70325: EMPTY
70326: ST_TO_ADDR
// if x - r < 0 then
70327: LD_VAR 0 1
70331: PUSH
70332: LD_VAR 0 3
70336: MINUS
70337: PUSH
70338: LD_INT 0
70340: LESS
70341: IFFALSE 70353
// min_x := 0 else
70343: LD_ADDR_VAR 0 8
70347: PUSH
70348: LD_INT 0
70350: ST_TO_ADDR
70351: GO 70369
// min_x := x - r ;
70353: LD_ADDR_VAR 0 8
70357: PUSH
70358: LD_VAR 0 1
70362: PUSH
70363: LD_VAR 0 3
70367: MINUS
70368: ST_TO_ADDR
// if y - r < 0 then
70369: LD_VAR 0 2
70373: PUSH
70374: LD_VAR 0 3
70378: MINUS
70379: PUSH
70380: LD_INT 0
70382: LESS
70383: IFFALSE 70395
// min_y := 0 else
70385: LD_ADDR_VAR 0 7
70389: PUSH
70390: LD_INT 0
70392: ST_TO_ADDR
70393: GO 70411
// min_y := y - r ;
70395: LD_ADDR_VAR 0 7
70399: PUSH
70400: LD_VAR 0 2
70404: PUSH
70405: LD_VAR 0 3
70409: MINUS
70410: ST_TO_ADDR
// max_x := x + r ;
70411: LD_ADDR_VAR 0 9
70415: PUSH
70416: LD_VAR 0 1
70420: PUSH
70421: LD_VAR 0 3
70425: PLUS
70426: ST_TO_ADDR
// max_y := y + r ;
70427: LD_ADDR_VAR 0 10
70431: PUSH
70432: LD_VAR 0 2
70436: PUSH
70437: LD_VAR 0 3
70441: PLUS
70442: ST_TO_ADDR
// for _x = min_x to max_x do
70443: LD_ADDR_VAR 0 5
70447: PUSH
70448: DOUBLE
70449: LD_VAR 0 8
70453: DEC
70454: ST_TO_ADDR
70455: LD_VAR 0 9
70459: PUSH
70460: FOR_TO
70461: IFFALSE 70562
// for _y = min_y to max_y do
70463: LD_ADDR_VAR 0 6
70467: PUSH
70468: DOUBLE
70469: LD_VAR 0 7
70473: DEC
70474: ST_TO_ADDR
70475: LD_VAR 0 10
70479: PUSH
70480: FOR_TO
70481: IFFALSE 70558
// begin if not ValidHex ( _x , _y ) then
70483: LD_VAR 0 5
70487: PPUSH
70488: LD_VAR 0 6
70492: PPUSH
70493: CALL_OW 488
70497: NOT
70498: IFFALSE 70502
// continue ;
70500: GO 70480
// if GetResourceTypeXY ( _x , _y ) then
70502: LD_VAR 0 5
70506: PPUSH
70507: LD_VAR 0 6
70511: PPUSH
70512: CALL_OW 283
70516: IFFALSE 70556
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70518: LD_ADDR_VAR 0 4
70522: PUSH
70523: LD_VAR 0 4
70527: PPUSH
70528: LD_VAR 0 4
70532: PUSH
70533: LD_INT 1
70535: PLUS
70536: PPUSH
70537: LD_VAR 0 5
70541: PUSH
70542: LD_VAR 0 6
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PPUSH
70551: CALL_OW 1
70555: ST_TO_ADDR
// end ;
70556: GO 70480
70558: POP
70559: POP
70560: GO 70460
70562: POP
70563: POP
// end ;
70564: LD_VAR 0 4
70568: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70569: LD_INT 0
70571: PPUSH
70572: PPUSH
70573: PPUSH
70574: PPUSH
70575: PPUSH
70576: PPUSH
70577: PPUSH
70578: PPUSH
// if not units then
70579: LD_VAR 0 1
70583: NOT
70584: IFFALSE 70588
// exit ;
70586: GO 71099
// result := UnitFilter ( units , [ f_ok ] ) ;
70588: LD_ADDR_VAR 0 3
70592: PUSH
70593: LD_VAR 0 1
70597: PPUSH
70598: LD_INT 50
70600: PUSH
70601: EMPTY
70602: LIST
70603: PPUSH
70604: CALL_OW 72
70608: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70609: LD_ADDR_VAR 0 8
70613: PUSH
70614: LD_VAR 0 1
70618: PUSH
70619: LD_INT 1
70621: ARRAY
70622: PPUSH
70623: CALL_OW 255
70627: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70628: LD_ADDR_VAR 0 10
70632: PUSH
70633: LD_INT 29
70635: PUSH
70636: LD_EXP 25
70640: PUSH
70641: LD_INT 49
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: LIST
70648: ST_TO_ADDR
// if not result then
70649: LD_VAR 0 3
70653: NOT
70654: IFFALSE 70658
// exit ;
70656: GO 71099
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70658: LD_ADDR_VAR 0 5
70662: PUSH
70663: LD_INT 81
70665: PUSH
70666: LD_VAR 0 8
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PPUSH
70675: CALL_OW 69
70679: ST_TO_ADDR
// for i in result do
70680: LD_ADDR_VAR 0 4
70684: PUSH
70685: LD_VAR 0 3
70689: PUSH
70690: FOR_IN
70691: IFFALSE 71097
// begin tag := GetTag ( i ) + 1 ;
70693: LD_ADDR_VAR 0 9
70697: PUSH
70698: LD_VAR 0 4
70702: PPUSH
70703: CALL_OW 110
70707: PUSH
70708: LD_INT 1
70710: PLUS
70711: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70712: LD_ADDR_VAR 0 7
70716: PUSH
70717: LD_VAR 0 4
70721: PPUSH
70722: CALL_OW 250
70726: PPUSH
70727: LD_VAR 0 4
70731: PPUSH
70732: CALL_OW 251
70736: PPUSH
70737: LD_INT 6
70739: PPUSH
70740: CALL 70311 0 3
70744: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70745: LD_VAR 0 7
70749: PUSH
70750: LD_VAR 0 4
70754: PPUSH
70755: CALL_OW 264
70759: PUSH
70760: LD_VAR 0 10
70764: IN
70765: NOT
70766: AND
70767: IFFALSE 70806
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70769: LD_VAR 0 4
70773: PPUSH
70774: LD_VAR 0 7
70778: PUSH
70779: LD_INT 1
70781: ARRAY
70782: PUSH
70783: LD_INT 1
70785: ARRAY
70786: PPUSH
70787: LD_VAR 0 7
70791: PUSH
70792: LD_INT 1
70794: ARRAY
70795: PUSH
70796: LD_INT 2
70798: ARRAY
70799: PPUSH
70800: CALL_OW 116
70804: GO 71095
// if path > tag then
70806: LD_VAR 0 2
70810: PUSH
70811: LD_VAR 0 9
70815: GREATER
70816: IFFALSE 71024
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
70818: LD_ADDR_VAR 0 6
70822: PUSH
70823: LD_VAR 0 5
70827: PPUSH
70828: LD_INT 91
70830: PUSH
70831: LD_VAR 0 4
70835: PUSH
70836: LD_INT 12
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: LIST
70843: PPUSH
70844: CALL_OW 72
70848: ST_TO_ADDR
// if nearEnemy then
70849: LD_VAR 0 6
70853: IFFALSE 70922
// begin if GetWeapon ( i ) = ru_time_lapser then
70855: LD_VAR 0 4
70859: PPUSH
70860: CALL_OW 264
70864: PUSH
70865: LD_INT 49
70867: EQUAL
70868: IFFALSE 70896
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70870: LD_VAR 0 4
70874: PPUSH
70875: LD_VAR 0 6
70879: PPUSH
70880: LD_VAR 0 4
70884: PPUSH
70885: CALL_OW 74
70889: PPUSH
70890: CALL_OW 112
70894: GO 70920
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70896: LD_VAR 0 4
70900: PPUSH
70901: LD_VAR 0 6
70905: PPUSH
70906: LD_VAR 0 4
70910: PPUSH
70911: CALL_OW 74
70915: PPUSH
70916: CALL_OW 115
// end else
70920: GO 71022
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70922: LD_VAR 0 4
70926: PPUSH
70927: LD_VAR 0 2
70931: PUSH
70932: LD_VAR 0 9
70936: ARRAY
70937: PUSH
70938: LD_INT 1
70940: ARRAY
70941: PPUSH
70942: LD_VAR 0 2
70946: PUSH
70947: LD_VAR 0 9
70951: ARRAY
70952: PUSH
70953: LD_INT 2
70955: ARRAY
70956: PPUSH
70957: CALL_OW 297
70961: PUSH
70962: LD_INT 6
70964: GREATER
70965: IFFALSE 71008
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70967: LD_VAR 0 4
70971: PPUSH
70972: LD_VAR 0 2
70976: PUSH
70977: LD_VAR 0 9
70981: ARRAY
70982: PUSH
70983: LD_INT 1
70985: ARRAY
70986: PPUSH
70987: LD_VAR 0 2
70991: PUSH
70992: LD_VAR 0 9
70996: ARRAY
70997: PUSH
70998: LD_INT 2
71000: ARRAY
71001: PPUSH
71002: CALL_OW 114
71006: GO 71022
// SetTag ( i , tag ) ;
71008: LD_VAR 0 4
71012: PPUSH
71013: LD_VAR 0 9
71017: PPUSH
71018: CALL_OW 109
// end else
71022: GO 71095
// if enemy then
71024: LD_VAR 0 5
71028: IFFALSE 71095
// begin if GetWeapon ( i ) = ru_time_lapser then
71030: LD_VAR 0 4
71034: PPUSH
71035: CALL_OW 264
71039: PUSH
71040: LD_INT 49
71042: EQUAL
71043: IFFALSE 71071
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71045: LD_VAR 0 4
71049: PPUSH
71050: LD_VAR 0 5
71054: PPUSH
71055: LD_VAR 0 4
71059: PPUSH
71060: CALL_OW 74
71064: PPUSH
71065: CALL_OW 112
71069: GO 71095
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71071: LD_VAR 0 4
71075: PPUSH
71076: LD_VAR 0 5
71080: PPUSH
71081: LD_VAR 0 4
71085: PPUSH
71086: CALL_OW 74
71090: PPUSH
71091: CALL_OW 115
// end ; end ;
71095: GO 70690
71097: POP
71098: POP
// end ;
71099: LD_VAR 0 3
71103: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71104: LD_INT 0
71106: PPUSH
71107: PPUSH
71108: PPUSH
// if not unit or IsInUnit ( unit ) then
71109: LD_VAR 0 1
71113: NOT
71114: PUSH
71115: LD_VAR 0 1
71119: PPUSH
71120: CALL_OW 310
71124: OR
71125: IFFALSE 71129
// exit ;
71127: GO 71220
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71129: LD_ADDR_VAR 0 4
71133: PUSH
71134: LD_VAR 0 1
71138: PPUSH
71139: CALL_OW 250
71143: PPUSH
71144: LD_VAR 0 2
71148: PPUSH
71149: LD_INT 1
71151: PPUSH
71152: CALL_OW 272
71156: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71157: LD_ADDR_VAR 0 5
71161: PUSH
71162: LD_VAR 0 1
71166: PPUSH
71167: CALL_OW 251
71171: PPUSH
71172: LD_VAR 0 2
71176: PPUSH
71177: LD_INT 1
71179: PPUSH
71180: CALL_OW 273
71184: ST_TO_ADDR
// if ValidHex ( x , y ) then
71185: LD_VAR 0 4
71189: PPUSH
71190: LD_VAR 0 5
71194: PPUSH
71195: CALL_OW 488
71199: IFFALSE 71220
// ComTurnXY ( unit , x , y ) ;
71201: LD_VAR 0 1
71205: PPUSH
71206: LD_VAR 0 4
71210: PPUSH
71211: LD_VAR 0 5
71215: PPUSH
71216: CALL_OW 118
// end ;
71220: LD_VAR 0 3
71224: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71225: LD_INT 0
71227: PPUSH
71228: PPUSH
// result := false ;
71229: LD_ADDR_VAR 0 3
71233: PUSH
71234: LD_INT 0
71236: ST_TO_ADDR
// if not units then
71237: LD_VAR 0 2
71241: NOT
71242: IFFALSE 71246
// exit ;
71244: GO 71291
// for i in units do
71246: LD_ADDR_VAR 0 4
71250: PUSH
71251: LD_VAR 0 2
71255: PUSH
71256: FOR_IN
71257: IFFALSE 71289
// if See ( side , i ) then
71259: LD_VAR 0 1
71263: PPUSH
71264: LD_VAR 0 4
71268: PPUSH
71269: CALL_OW 292
71273: IFFALSE 71287
// begin result := true ;
71275: LD_ADDR_VAR 0 3
71279: PUSH
71280: LD_INT 1
71282: ST_TO_ADDR
// exit ;
71283: POP
71284: POP
71285: GO 71291
// end ;
71287: GO 71256
71289: POP
71290: POP
// end ;
71291: LD_VAR 0 3
71295: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71296: LD_INT 0
71298: PPUSH
71299: PPUSH
71300: PPUSH
71301: PPUSH
// if not unit or not points then
71302: LD_VAR 0 1
71306: NOT
71307: PUSH
71308: LD_VAR 0 2
71312: NOT
71313: OR
71314: IFFALSE 71318
// exit ;
71316: GO 71408
// dist := 99999 ;
71318: LD_ADDR_VAR 0 5
71322: PUSH
71323: LD_INT 99999
71325: ST_TO_ADDR
// for i in points do
71326: LD_ADDR_VAR 0 4
71330: PUSH
71331: LD_VAR 0 2
71335: PUSH
71336: FOR_IN
71337: IFFALSE 71406
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71339: LD_ADDR_VAR 0 6
71343: PUSH
71344: LD_VAR 0 1
71348: PPUSH
71349: LD_VAR 0 4
71353: PUSH
71354: LD_INT 1
71356: ARRAY
71357: PPUSH
71358: LD_VAR 0 4
71362: PUSH
71363: LD_INT 2
71365: ARRAY
71366: PPUSH
71367: CALL_OW 297
71371: ST_TO_ADDR
// if tmpDist < dist then
71372: LD_VAR 0 6
71376: PUSH
71377: LD_VAR 0 5
71381: LESS
71382: IFFALSE 71404
// begin result := i ;
71384: LD_ADDR_VAR 0 3
71388: PUSH
71389: LD_VAR 0 4
71393: ST_TO_ADDR
// dist := tmpDist ;
71394: LD_ADDR_VAR 0 5
71398: PUSH
71399: LD_VAR 0 6
71403: ST_TO_ADDR
// end ; end ;
71404: GO 71336
71406: POP
71407: POP
// end ;
71408: LD_VAR 0 3
71412: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71413: LD_INT 0
71415: PPUSH
// uc_side := side ;
71416: LD_ADDR_OWVAR 20
71420: PUSH
71421: LD_VAR 0 1
71425: ST_TO_ADDR
// uc_nation := 3 ;
71426: LD_ADDR_OWVAR 21
71430: PUSH
71431: LD_INT 3
71433: ST_TO_ADDR
// vc_chassis := 25 ;
71434: LD_ADDR_OWVAR 37
71438: PUSH
71439: LD_INT 25
71441: ST_TO_ADDR
// vc_engine := engine_siberite ;
71442: LD_ADDR_OWVAR 39
71446: PUSH
71447: LD_INT 3
71449: ST_TO_ADDR
// vc_control := control_computer ;
71450: LD_ADDR_OWVAR 38
71454: PUSH
71455: LD_INT 3
71457: ST_TO_ADDR
// vc_weapon := 59 ;
71458: LD_ADDR_OWVAR 40
71462: PUSH
71463: LD_INT 59
71465: ST_TO_ADDR
// result := CreateVehicle ;
71466: LD_ADDR_VAR 0 5
71470: PUSH
71471: CALL_OW 45
71475: ST_TO_ADDR
// SetDir ( result , d ) ;
71476: LD_VAR 0 5
71480: PPUSH
71481: LD_VAR 0 4
71485: PPUSH
71486: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71490: LD_VAR 0 5
71494: PPUSH
71495: LD_VAR 0 2
71499: PPUSH
71500: LD_VAR 0 3
71504: PPUSH
71505: LD_INT 0
71507: PPUSH
71508: CALL_OW 48
// end ;
71512: LD_VAR 0 5
71516: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71517: LD_INT 0
71519: PPUSH
71520: PPUSH
71521: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71522: LD_ADDR_VAR 0 2
71526: PUSH
71527: LD_INT 0
71529: PUSH
71530: LD_INT 0
71532: PUSH
71533: LD_INT 0
71535: PUSH
71536: LD_INT 0
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71545: LD_VAR 0 1
71549: NOT
71550: PUSH
71551: LD_VAR 0 1
71555: PPUSH
71556: CALL_OW 264
71560: PUSH
71561: LD_INT 12
71563: PUSH
71564: LD_INT 51
71566: PUSH
71567: LD_INT 32
71569: PUSH
71570: LD_EXP 22
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: IN
71581: NOT
71582: OR
71583: IFFALSE 71587
// exit ;
71585: GO 71685
// for i := 1 to 3 do
71587: LD_ADDR_VAR 0 3
71591: PUSH
71592: DOUBLE
71593: LD_INT 1
71595: DEC
71596: ST_TO_ADDR
71597: LD_INT 3
71599: PUSH
71600: FOR_TO
71601: IFFALSE 71683
// begin tmp := GetCargo ( cargo , i ) ;
71603: LD_ADDR_VAR 0 4
71607: PUSH
71608: LD_VAR 0 1
71612: PPUSH
71613: LD_VAR 0 3
71617: PPUSH
71618: CALL_OW 289
71622: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71623: LD_ADDR_VAR 0 2
71627: PUSH
71628: LD_VAR 0 2
71632: PPUSH
71633: LD_VAR 0 3
71637: PPUSH
71638: LD_VAR 0 4
71642: PPUSH
71643: CALL_OW 1
71647: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71648: LD_ADDR_VAR 0 2
71652: PUSH
71653: LD_VAR 0 2
71657: PPUSH
71658: LD_INT 4
71660: PPUSH
71661: LD_VAR 0 2
71665: PUSH
71666: LD_INT 4
71668: ARRAY
71669: PUSH
71670: LD_VAR 0 4
71674: PLUS
71675: PPUSH
71676: CALL_OW 1
71680: ST_TO_ADDR
// end ;
71681: GO 71600
71683: POP
71684: POP
// end ; end_of_file
71685: LD_VAR 0 2
71689: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71690: LD_VAR 0 1
71694: PUSH
71695: LD_INT 200
71697: DOUBLE
71698: GREATEREQUAL
71699: IFFALSE 71707
71701: LD_INT 299
71703: DOUBLE
71704: LESSEQUAL
71705: IFTRUE 71709
71707: GO 71741
71709: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71710: LD_VAR 0 1
71714: PPUSH
71715: LD_VAR 0 2
71719: PPUSH
71720: LD_VAR 0 3
71724: PPUSH
71725: LD_VAR 0 4
71729: PPUSH
71730: LD_VAR 0 5
71734: PPUSH
71735: CALL 27030 0 5
71739: GO 71818
71741: LD_INT 300
71743: DOUBLE
71744: GREATEREQUAL
71745: IFFALSE 71753
71747: LD_INT 399
71749: DOUBLE
71750: LESSEQUAL
71751: IFTRUE 71755
71753: GO 71817
71755: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71756: LD_VAR 0 1
71760: PPUSH
71761: LD_VAR 0 2
71765: PPUSH
71766: LD_VAR 0 3
71770: PPUSH
71771: LD_VAR 0 4
71775: PPUSH
71776: LD_VAR 0 5
71780: PPUSH
71781: LD_VAR 0 6
71785: PPUSH
71786: LD_VAR 0 7
71790: PPUSH
71791: LD_VAR 0 8
71795: PPUSH
71796: LD_VAR 0 9
71800: PPUSH
71801: LD_VAR 0 10
71805: PPUSH
71806: LD_VAR 0 11
71810: PPUSH
71811: CALL 24672 0 11
71815: GO 71818
71817: POP
// end ;
71818: PPOPN 11
71820: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71821: LD_VAR 0 1
71825: PPUSH
71826: LD_VAR 0 2
71830: PPUSH
71831: LD_VAR 0 3
71835: PPUSH
71836: LD_VAR 0 4
71840: PPUSH
71841: LD_VAR 0 5
71845: PPUSH
71846: CALL 26766 0 5
// end ; end_of_file
71850: PPOPN 5
71852: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71853: LD_VAR 0 1
71857: PPUSH
71858: LD_VAR 0 2
71862: PPUSH
71863: LD_VAR 0 3
71867: PPUSH
71868: LD_VAR 0 4
71872: PPUSH
71873: LD_VAR 0 5
71877: PPUSH
71878: LD_VAR 0 6
71882: PPUSH
71883: CALL 12365 0 6
// end ;
71887: PPOPN 6
71889: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71890: LD_INT 0
71892: PPUSH
// begin if not units then
71893: LD_VAR 0 1
71897: NOT
71898: IFFALSE 71902
// exit ;
71900: GO 71990
// if p1 = 1 then
71902: LD_VAR 0 2
71906: PUSH
71907: LD_INT 1
71909: EQUAL
71910: IFFALSE 71990
// begin if p2 = 1 then
71912: LD_VAR 0 3
71916: PUSH
71917: LD_INT 1
71919: EQUAL
71920: IFFALSE 71951
// begin for i in units do
71922: LD_ADDR_VAR 0 7
71926: PUSH
71927: LD_VAR 0 1
71931: PUSH
71932: FOR_IN
71933: IFFALSE 71949
// begin SetUnitAttackType ( i , 3 ) ;
71935: LD_VAR 0 7
71939: PPUSH
71940: LD_INT 3
71942: PPUSH
71943: CALL_OW 603
// end ;
71947: GO 71932
71949: POP
71950: POP
// end ; if p2 = 2 then
71951: LD_VAR 0 3
71955: PUSH
71956: LD_INT 2
71958: EQUAL
71959: IFFALSE 71990
// begin for i in units do
71961: LD_ADDR_VAR 0 7
71965: PUSH
71966: LD_VAR 0 1
71970: PUSH
71971: FOR_IN
71972: IFFALSE 71988
// begin SetUnitAttackType ( i , 1 ) ;
71974: LD_VAR 0 7
71978: PPUSH
71979: LD_INT 1
71981: PPUSH
71982: CALL_OW 603
// end ;
71986: GO 71971
71988: POP
71989: POP
// end ; end ; end ;
71990: PPOPN 7
71992: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71993: CALL 12340 0 0
// end ;
71997: PPOPN 1
71999: END
