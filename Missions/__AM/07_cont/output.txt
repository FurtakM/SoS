// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8596 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 37872 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 32298 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 32298 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 32298 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 32298 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 32298 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 32298 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 32298 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 32298 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 32298 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 32298 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4763
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4763: LD_ADDR_VAR 0 9
4767: PUSH
4768: LD_INT 22
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 30
4783: PUSH
4784: LD_INT 0
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 30
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 69
4814: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4815: LD_ADDR_VAR 0 10
4819: PUSH
4820: LD_INT 22
4822: PUSH
4823: LD_INT 3
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: LD_INT 30
4835: PUSH
4836: LD_INT 6
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 30
4845: PUSH
4846: LD_INT 7
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 30
4855: PUSH
4856: LD_INT 8
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 69
4877: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4878: LD_ADDR_VAR 0 11
4882: PUSH
4883: LD_INT 22
4885: PUSH
4886: LD_INT 3
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 30
4895: PUSH
4896: LD_INT 3
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PPUSH
4907: CALL_OW 69
4911: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4912: LD_ADDR_VAR 0 12
4916: PUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 3
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 30
4929: PUSH
4930: LD_INT 31
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 69
4945: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4946: LD_ADDR_VAR 0 13
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_INT 3
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 30
4963: PUSH
4964: LD_INT 32
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PPUSH
4975: CALL_OW 69
4979: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4980: LD_ADDR_VAR 0 14
4984: PUSH
4985: LD_INT 22
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 30
4997: PUSH
4998: LD_INT 33
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PPUSH
5009: CALL_OW 69
5013: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5014: LD_ADDR_VAR 0 15
5018: PUSH
5019: LD_INT 42
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: LD_INT 43
5031: PUSH
5032: LD_INT 50
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 44
5041: PUSH
5042: LD_INT 30
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 46
5051: PUSH
5052: LD_INT 15
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5065: LD_ADDR_VAR 0 16
5069: PUSH
5070: LD_INT 0
5072: PUSH
5073: LD_INT 4
5075: PUSH
5076: LD_INT 6
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5088: LD_ADDR_VAR 0 6
5092: PUSH
5093: LD_INT 4
5095: PUSH
5096: LD_INT 5
5098: PUSH
5099: LD_INT 6
5101: PUSH
5102: LD_INT 6
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_OWVAR 67
5115: ARRAY
5116: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5117: LD_INT 16
5119: PPUSH
5120: LD_STRING am_tukh
5122: PPUSH
5123: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5127: LD_ADDR_VAR 0 2
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 3
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PPUSH
5142: CALL_OW 69
5146: PUSH
5147: FOR_IN
5148: IFFALSE 5185
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5150: LD_VAR 0 2
5154: PPUSH
5155: LD_INT 4
5157: PUSH
5158: LD_INT 5
5160: PUSH
5161: LD_INT 6
5163: PUSH
5164: LD_INT 7
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_OWVAR 67
5177: ARRAY
5178: PPUSH
5179: CALL_OW 241
5183: GO 5147
5185: POP
5186: POP
// for i in dep_list do
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: LD_VAR 0 9
5196: PUSH
5197: FOR_IN
5198: IFFALSE 5242
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5200: LD_VAR 0 2
5204: PPUSH
5205: CALL_OW 274
5209: PPUSH
5210: LD_INT 1
5212: PPUSH
5213: LD_INT 1000
5215: PPUSH
5216: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5220: LD_VAR 0 2
5224: PPUSH
5225: CALL_OW 274
5229: PPUSH
5230: LD_INT 2
5232: PPUSH
5233: LD_INT 1000
5235: PPUSH
5236: CALL_OW 277
// end ;
5240: GO 5197
5242: POP
5243: POP
// InitHc ;
5244: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5248: LD_ADDR_VAR 0 8
5252: PUSH
5253: LD_VAR 0 13
5257: PUSH
5258: LD_INT 45
5260: PUSH
5261: LD_INT 60
5263: PUSH
5264: LD_INT 75
5266: PUSH
5267: LD_INT 80
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: PUSH
5276: LD_OWVAR 67
5280: ARRAY
5281: MUL
5282: PUSH
5283: LD_INT 100
5285: DIV
5286: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5287: LD_ADDR_VAR 0 16
5291: PUSH
5292: LD_VAR 0 16
5296: PPUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_VAR 0 8
5304: PPUSH
5305: CALL_OW 1
5309: ST_TO_ADDR
// tmp := [ ] ;
5310: LD_ADDR_VAR 0 8
5314: PUSH
5315: EMPTY
5316: ST_TO_ADDR
// for i in bunker_list do
5317: LD_ADDR_VAR 0 2
5321: PUSH
5322: LD_VAR 0 13
5326: PUSH
5327: FOR_IN
5328: IFFALSE 5424
// if i mod 10 + 1 < tmp then
5330: LD_VAR 0 2
5334: PUSH
5335: LD_INT 10
5337: MOD
5338: PUSH
5339: LD_INT 1
5341: PLUS
5342: PUSH
5343: LD_VAR 0 8
5347: LESS
5348: IFFALSE 5393
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5350: LD_ADDR_VAR 0 8
5354: PUSH
5355: LD_VAR 0 8
5359: PPUSH
5360: LD_VAR 0 2
5364: PUSH
5365: LD_INT 3
5367: PPUSH
5368: LD_INT 5
5370: PPUSH
5371: CALL_OW 12
5375: MOD
5376: PUSH
5377: LD_INT 1
5379: PLUS
5380: PPUSH
5381: LD_VAR 0 2
5385: PPUSH
5386: CALL_OW 2
5390: ST_TO_ADDR
5391: GO 5422
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5393: LD_ADDR_VAR 0 8
5397: PUSH
5398: LD_VAR 0 8
5402: PPUSH
5403: LD_VAR 0 8
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5327
5424: POP
5425: POP
// bunker_list := tmp ;
5426: LD_ADDR_VAR 0 13
5430: PUSH
5431: LD_VAR 0 8
5435: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_VAR 0 14
5450: ADD
5451: PUSH
5452: FOR_IN
5453: IFFALSE 5476
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5455: LD_VAR 0 2
5459: PPUSH
5460: LD_VAR 0 2
5464: PPUSH
5465: CALL 2225 0 1
5469: PPUSH
5470: CALL_OW 431
5474: GO 5452
5476: POP
5477: POP
// while ( personel_counter [ 1 ] ) do
5478: LD_VAR 0 16
5482: PUSH
5483: LD_INT 1
5485: ARRAY
5486: IFFALSE 5594
// begin i := rand ( 1 , bunker_list ) ;
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_VAR 0 13
5500: PPUSH
5501: CALL_OW 12
5505: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5506: LD_INT 0
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: LD_VAR 0 6
5516: PPUSH
5517: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5521: CALL_OW 44
5525: PPUSH
5526: LD_VAR 0 13
5530: PUSH
5531: LD_VAR 0 2
5535: ARRAY
5536: PPUSH
5537: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5541: LD_ADDR_VAR 0 13
5545: PUSH
5546: LD_VAR 0 13
5550: PPUSH
5551: LD_VAR 0 2
5555: PPUSH
5556: CALL_OW 3
5560: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5561: LD_ADDR_VAR 0 16
5565: PUSH
5566: LD_VAR 0 16
5570: PPUSH
5571: LD_INT 1
5573: PPUSH
5574: LD_VAR 0 16
5578: PUSH
5579: LD_INT 1
5581: ARRAY
5582: PUSH
5583: LD_INT 1
5585: MINUS
5586: PPUSH
5587: CALL_OW 1
5591: ST_TO_ADDR
// end ;
5592: GO 5478
// for i = 1 to personel_counter [ 2 ] do
5594: LD_ADDR_VAR 0 2
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 16
5608: PUSH
5609: LD_INT 2
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5645
// begin PrepareHuman ( false , 2 , skill ) ;
5616: LD_INT 0
5618: PPUSH
5619: LD_INT 2
5621: PPUSH
5622: LD_VAR 0 6
5626: PPUSH
5627: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5631: CALL_OW 44
5635: PPUSH
5636: LD_INT 16
5638: PPUSH
5639: CALL_OW 52
// end ;
5643: GO 5613
5645: POP
5646: POP
// for i = 1 to personel_counter [ 3 ] do
5647: LD_ADDR_VAR 0 2
5651: PUSH
5652: DOUBLE
5653: LD_INT 1
5655: DEC
5656: ST_TO_ADDR
5657: LD_VAR 0 16
5661: PUSH
5662: LD_INT 3
5664: ARRAY
5665: PUSH
5666: FOR_TO
5667: IFFALSE 5714
// begin PrepareHuman ( false , 3 , skill ) ;
5669: LD_INT 0
5671: PPUSH
5672: LD_INT 3
5674: PPUSH
5675: LD_VAR 0 6
5679: PPUSH
5680: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5684: CALL_OW 44
5688: PPUSH
5689: LD_VAR 0 11
5693: PUSH
5694: LD_VAR 0 2
5698: PUSH
5699: LD_INT 2
5701: MOD
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: ARRAY
5707: PPUSH
5708: CALL_OW 52
// end ;
5712: GO 5666
5714: POP
5715: POP
// for i = 1 to personel_counter [ 4 ] do
5716: LD_ADDR_VAR 0 2
5720: PUSH
5721: DOUBLE
5722: LD_INT 1
5724: DEC
5725: ST_TO_ADDR
5726: LD_VAR 0 16
5730: PUSH
5731: LD_INT 4
5733: ARRAY
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5773
// begin PrepareHuman ( false , 4 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 4
5743: PPUSH
5744: LD_VAR 0 6
5748: PPUSH
5749: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5753: CALL_OW 44
5757: PPUSH
5758: LD_VAR 0 10
5762: PUSH
5763: LD_INT 1
5765: ARRAY
5766: PPUSH
5767: CALL_OW 52
// end ;
5771: GO 5735
5773: POP
5774: POP
// for i in breastworks_list do
5775: LD_ADDR_VAR 0 2
5779: PUSH
5780: LD_VAR 0 12
5784: PUSH
5785: FOR_IN
5786: IFFALSE 5898
// begin r := GetDir ( i ) ;
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_VAR 0 2
5797: PPUSH
5798: CALL_OW 254
5802: ST_TO_ADDR
// if r > 3 then
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 3
5810: GREATER
5811: IFFALSE 5829
// r := r - 3 else
5813: LD_ADDR_VAR 0 4
5817: PUSH
5818: LD_VAR 0 4
5822: PUSH
5823: LD_INT 3
5825: MINUS
5826: ST_TO_ADDR
5827: GO 5843
// r := r + 3 ;
5829: LD_ADDR_VAR 0 4
5833: PUSH
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: PLUS
5842: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5843: LD_INT 0
5845: PPUSH
5846: LD_INT 1
5848: PPUSH
5849: LD_VAR 0 6
5853: PPUSH
5854: CALL_OW 380
// un := CreateHuman ;
5858: LD_ADDR_VAR 0 5
5862: PUSH
5863: CALL_OW 44
5867: ST_TO_ADDR
// SetDir ( un , r ) ;
5868: LD_VAR 0 5
5872: PPUSH
5873: LD_VAR 0 4
5877: PPUSH
5878: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5882: LD_VAR 0 5
5886: PPUSH
5887: LD_VAR 0 2
5891: PPUSH
5892: CALL_OW 52
// end ;
5896: GO 5785
5898: POP
5899: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5900: LD_ADDR_VAR 0 8
5904: PUSH
5905: LD_INT 22
5907: PUSH
5908: LD_INT 3
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 25
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PPUSH
5929: CALL_OW 69
5933: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5934: LD_ADDR_VAR 0 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: LD_INT 5
5944: PUSH
5945: LD_INT 6
5947: PUSH
5948: LD_INT 6
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: PUSH
5957: LD_OWVAR 67
5961: ARRAY
5962: ST_TO_ADDR
// for i = 1 to r do
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_VAR 0 4
5977: PUSH
5978: FOR_TO
5979: IFFALSE 6152
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5981: LD_ADDR_VAR 0 5
5985: PUSH
5986: LD_INT 3
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: LD_INT 22
5994: PUSH
5995: LD_INT 22
5997: PUSH
5998: LD_INT 24
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 3
6013: MOD
6014: PUSH
6015: LD_INT 1
6017: PLUS
6018: ARRAY
6019: PPUSH
6020: LD_INT 1
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: LD_INT 43
6028: PUSH
6029: LD_INT 44
6031: PUSH
6032: LD_INT 42
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PUSH
6040: LD_VAR 0 2
6044: PUSH
6045: LD_INT 3
6047: MOD
6048: PUSH
6049: LD_INT 1
6051: PLUS
6052: ARRAY
6053: PPUSH
6054: LD_INT 100
6056: PPUSH
6057: CALL 520 0 7
6061: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6062: LD_VAR 0 5
6066: PPUSH
6067: LD_INT 0
6069: PPUSH
6070: LD_INT 5
6072: PPUSH
6073: CALL_OW 12
6077: PPUSH
6078: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6082: LD_VAR 0 5
6086: PPUSH
6087: LD_INT 5
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL_OW 49
// if i > tmp - 2 then
6097: LD_VAR 0 2
6101: PUSH
6102: LD_VAR 0 8
6106: PUSH
6107: LD_INT 2
6109: MINUS
6110: GREATER
6111: IFFALSE 6115
// continue ;
6113: GO 5978
// ComExitBuilding ( tmp [ i ] ) ;
6115: LD_VAR 0 8
6119: PUSH
6120: LD_VAR 0 2
6124: ARRAY
6125: PPUSH
6126: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6130: LD_VAR 0 8
6134: PUSH
6135: LD_VAR 0 2
6139: ARRAY
6140: PPUSH
6141: LD_VAR 0 5
6145: PPUSH
6146: CALL_OW 180
// end ;
6150: GO 5978
6152: POP
6153: POP
// end ;
6154: LD_VAR 0 1
6158: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6159: LD_INT 22
6161: PUSH
6162: LD_INT 3
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 2
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: IFFALSE 6919
6189: GO 6191
6191: DISABLE
6192: LD_INT 0
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
6198: PPUSH
// begin enable ;
6199: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6200: LD_ADDR_VAR 0 2
6204: PUSH
6205: LD_INT 6
6207: PPUSH
6208: LD_INT 3
6210: PUSH
6211: LD_INT 24
6213: PUSH
6214: LD_INT 1000
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 21
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 70
6243: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6244: LD_ADDR_VAR 0 4
6248: PUSH
6249: LD_INT 22
6251: PUSH
6252: LD_INT 3
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 25
6261: PUSH
6262: LD_INT 2
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 69
6277: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6278: LD_VAR 0 2
6282: NOT
6283: PUSH
6284: LD_EXP 20
6288: NOT
6289: AND
6290: IFFALSE 6360
// begin for i in engs do
6292: LD_ADDR_VAR 0 1
6296: PUSH
6297: LD_VAR 0 4
6301: PUSH
6302: FOR_IN
6303: IFFALSE 6358
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6305: LD_VAR 0 1
6309: PPUSH
6310: CALL_OW 256
6314: PUSH
6315: LD_INT 1000
6317: EQUAL
6318: PUSH
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 314
6328: NOT
6329: AND
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 310
6340: NOT
6341: AND
6342: IFFALSE 6356
// ComEnterUnit ( i , ru_dep_main ) ;
6344: LD_VAR 0 1
6348: PPUSH
6349: LD_INT 16
6351: PPUSH
6352: CALL_OW 120
6356: GO 6302
6358: POP
6359: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6360: LD_VAR 0 4
6364: PPUSH
6365: LD_INT 3
6367: PUSH
6368: LD_INT 24
6370: PUSH
6371: LD_INT 650
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 72
6386: IFFALSE 6479
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: LD_VAR 0 4
6397: PPUSH
6398: LD_INT 3
6400: PUSH
6401: LD_INT 24
6403: PUSH
6404: LD_INT 650
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 72
6419: ST_TO_ADDR
// for i in tmp do
6420: LD_ADDR_VAR 0 1
6424: PUSH
6425: LD_VAR 0 3
6429: PUSH
6430: FOR_IN
6431: IFFALSE 6477
// if not IsInArea ( i , mainBaseArea ) then
6433: LD_VAR 0 1
6437: PPUSH
6438: LD_INT 14
6440: PPUSH
6441: CALL_OW 308
6445: NOT
6446: IFFALSE 6475
// begin ComMoveXY ( i , 129 , 125 ) ;
6448: LD_VAR 0 1
6452: PPUSH
6453: LD_INT 129
6455: PPUSH
6456: LD_INT 125
6458: PPUSH
6459: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6463: LD_VAR 0 1
6467: PPUSH
6468: LD_INT 1050
6470: PPUSH
6471: CALL_OW 202
// end ;
6475: GO 6430
6477: POP
6478: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6479: LD_ADDR_VAR 0 4
6483: PUSH
6484: LD_VAR 0 4
6488: PPUSH
6489: LD_INT 24
6491: PUSH
6492: LD_INT 650
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 72
6503: ST_TO_ADDR
// if not engs then
6504: LD_VAR 0 4
6508: NOT
6509: IFFALSE 6513
// exit ;
6511: GO 6919
// if filter then
6513: LD_VAR 0 2
6517: IFFALSE 6776
// begin for i in engs do
6519: LD_ADDR_VAR 0 1
6523: PUSH
6524: LD_VAR 0 4
6528: PUSH
6529: FOR_IN
6530: IFFALSE 6554
// if IsInUnit ( i ) then
6532: LD_VAR 0 1
6536: PPUSH
6537: CALL_OW 310
6541: IFFALSE 6552
// ComExitBuilding ( i ) ;
6543: LD_VAR 0 1
6547: PPUSH
6548: CALL_OW 122
6552: GO 6529
6554: POP
6555: POP
// wait ( 3 ) ;
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6563: LD_VAR 0 2
6567: PUSH
6568: LD_INT 2
6570: GREATEREQUAL
6571: PUSH
6572: LD_VAR 0 4
6576: PUSH
6577: LD_INT 2
6579: GREATEREQUAL
6580: AND
6581: IFFALSE 6729
// begin for i = 1 to engs / 2 do
6583: LD_ADDR_VAR 0 1
6587: PUSH
6588: DOUBLE
6589: LD_INT 1
6591: DEC
6592: ST_TO_ADDR
6593: LD_VAR 0 4
6597: PUSH
6598: LD_INT 2
6600: DIVREAL
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6649
// if not HasTask ( engs [ i ] ) then
6605: LD_VAR 0 4
6609: PUSH
6610: LD_VAR 0 1
6614: ARRAY
6615: PPUSH
6616: CALL_OW 314
6620: NOT
6621: IFFALSE 6647
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6623: LD_VAR 0 4
6627: PUSH
6628: LD_VAR 0 1
6632: ARRAY
6633: PPUSH
6634: LD_VAR 0 2
6638: PUSH
6639: LD_INT 1
6641: ARRAY
6642: PPUSH
6643: CALL_OW 130
6647: GO 6602
6649: POP
6650: POP
// for i = engs / 2 + 1 to engs do
6651: LD_ADDR_VAR 0 1
6655: PUSH
6656: DOUBLE
6657: LD_VAR 0 4
6661: PUSH
6662: LD_INT 2
6664: DIVREAL
6665: PUSH
6666: LD_INT 1
6668: PLUS
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 4
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6725
// if not HasTask ( engs [ i ] ) then
6679: LD_VAR 0 4
6683: PUSH
6684: LD_VAR 0 1
6688: ARRAY
6689: PPUSH
6690: CALL_OW 314
6694: NOT
6695: IFFALSE 6723
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6697: LD_VAR 0 4
6701: PUSH
6702: LD_VAR 0 1
6706: ARRAY
6707: PPUSH
6708: LD_VAR 0 2
6712: PUSH
6713: LD_VAR 0 2
6717: ARRAY
6718: PPUSH
6719: CALL_OW 130
6723: GO 6676
6725: POP
6726: POP
// end else
6727: GO 6776
// for i in engs do
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_VAR 0 4
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6774
// if not HasTask ( i ) then
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 314
6751: NOT
6752: IFFALSE 6772
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6754: LD_VAR 0 1
6758: PPUSH
6759: LD_VAR 0 2
6763: PUSH
6764: LD_INT 1
6766: ARRAY
6767: PPUSH
6768: CALL_OW 130
6772: GO 6739
6774: POP
6775: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6776: LD_ADDR_VAR 0 5
6780: PUSH
6781: LD_INT 81
6783: PUSH
6784: LD_INT 3
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 69
6795: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6796: LD_EXP 20
6800: PUSH
6801: LD_VAR 0 2
6805: NOT
6806: AND
6807: IFFALSE 6919
// begin ComExitBuilding ( engs ) ;
6809: LD_VAR 0 4
6813: PPUSH
6814: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6818: LD_VAR 0 5
6822: PPUSH
6823: LD_EXP 20
6827: PUSH
6828: LD_INT 2
6830: ARRAY
6831: PPUSH
6832: LD_EXP 20
6836: PUSH
6837: LD_INT 3
6839: ARRAY
6840: PPUSH
6841: CALL_OW 73
6845: PPUSH
6846: LD_EXP 20
6850: PUSH
6851: LD_INT 2
6853: ARRAY
6854: PPUSH
6855: LD_EXP 20
6859: PUSH
6860: LD_INT 3
6862: ARRAY
6863: PPUSH
6864: CALL_OW 297
6868: PUSH
6869: LD_INT 10
6871: GREATER
6872: IFFALSE 6919
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6874: LD_VAR 0 4
6878: PPUSH
6879: LD_EXP 20
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_EXP 20
6892: PUSH
6893: LD_INT 2
6895: ARRAY
6896: PPUSH
6897: LD_EXP 20
6901: PUSH
6902: LD_INT 3
6904: ARRAY
6905: PPUSH
6906: LD_EXP 20
6910: PUSH
6911: LD_INT 4
6913: ARRAY
6914: PPUSH
6915: CALL_OW 145
// end ; end ;
6919: PPOPN 5
6921: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6922: LD_INT 16
6924: PPUSH
6925: CALL_OW 256
6929: PUSH
6930: LD_INT 250
6932: LESS
6933: IFFALSE 7123
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6942: LD_ADDR_VAR 0 2
6946: PUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 25
6972: PUSH
6973: LD_INT 3
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 69
7004: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 122
// wait ( 3 ) ;
7014: LD_INT 3
7016: PPUSH
7017: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7021: LD_VAR 0 2
7025: PPUSH
7026: LD_INT 156
7028: PPUSH
7029: LD_INT 211
7031: PPUSH
7032: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7036: LD_INT 35
7038: PPUSH
7039: CALL_OW 67
// for i in tmp do
7043: LD_ADDR_VAR 0 1
7047: PUSH
7048: LD_VAR 0 2
7052: PUSH
7053: FOR_IN
7054: IFFALSE 7114
// if IsInArea ( i , escapeArea ) then
7056: LD_VAR 0 1
7060: PPUSH
7061: LD_INT 15
7063: PPUSH
7064: CALL_OW 308
7068: IFFALSE 7097
// begin RemoveUnit ( i ) ;
7070: LD_VAR 0 1
7074: PPUSH
7075: CALL_OW 64
// tmp := tmp diff i ;
7079: LD_ADDR_VAR 0 2
7083: PUSH
7084: LD_VAR 0 2
7088: PUSH
7089: LD_VAR 0 1
7093: DIFF
7094: ST_TO_ADDR
// end else
7095: GO 7112
// ComMoveXY ( i , 156 , 211 ) ;
7097: LD_VAR 0 1
7101: PPUSH
7102: LD_INT 156
7104: PPUSH
7105: LD_INT 211
7107: PPUSH
7108: CALL_OW 111
7112: GO 7053
7114: POP
7115: POP
// until not tmp ;
7116: LD_VAR 0 2
7120: NOT
7121: IFFALSE 7036
// end ;
7123: PPOPN 2
7125: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7126: LD_INT 22
7128: PUSH
7129: LD_INT 3
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 25
7138: PUSH
7139: LD_INT 4
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 69
7154: IFFALSE 7408
7156: GO 7158
7158: DISABLE
7159: LD_INT 0
7161: PPUSH
7162: PPUSH
7163: PPUSH
// begin enable ;
7164: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 14
7172: PPUSH
7173: LD_INT 22
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 21
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 24
7198: PUSH
7199: LD_INT 1000
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 70
7219: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 3
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 4
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 69
7253: ST_TO_ADDR
// if not doc then
7254: LD_VAR 0 3
7258: NOT
7259: IFFALSE 7263
// exit ;
7261: GO 7408
// if not tmp then
7263: LD_VAR 0 2
7267: NOT
7268: IFFALSE 7359
// begin if not IsInUnit ( doc [ 1 ] ) then
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 1
7277: ARRAY
7278: PPUSH
7279: CALL_OW 310
7283: NOT
7284: IFFALSE 7357
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7286: LD_VAR 0 3
7290: PPUSH
7291: LD_INT 22
7293: PUSH
7294: LD_INT 3
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 30
7306: PUSH
7307: LD_INT 6
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 30
7316: PUSH
7317: LD_INT 7
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 30
7326: PUSH
7327: LD_INT 8
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PPUSH
7344: CALL_OW 69
7348: PUSH
7349: LD_INT 1
7351: ARRAY
7352: PPUSH
7353: CALL_OW 120
// exit ;
7357: GO 7408
// end ; if IsInUnit ( doc [ 1 ] ) then
7359: LD_VAR 0 3
7363: PUSH
7364: LD_INT 1
7366: ARRAY
7367: PPUSH
7368: CALL_OW 310
7372: IFFALSE 7383
// ComExitBuilding ( doc ) ;
7374: LD_VAR 0 3
7378: PPUSH
7379: CALL_OW 122
// wait ( 3 ) ;
7383: LD_INT 3
7385: PPUSH
7386: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7390: LD_VAR 0 3
7394: PPUSH
7395: LD_VAR 0 2
7399: PUSH
7400: LD_INT 1
7402: ARRAY
7403: PPUSH
7404: CALL_OW 128
// end ;
7408: PPOPN 3
7410: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7411: LD_INT 22
7413: PUSH
7414: LD_INT 3
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 25
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: PUSH
7440: LD_INT 22
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 21
7452: PUSH
7453: LD_INT 2
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: AND
7469: IFFALSE 8163
7471: GO 7473
7473: DISABLE
7474: LD_INT 0
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
7480: PPUSH
7481: PPUSH
// begin enable ;
7482: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_INT 22
7490: PUSH
7491: LD_INT 3
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 21
7500: PUSH
7501: LD_INT 2
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 3
7510: PUSH
7511: LD_INT 58
7513: PUSH
7514: EMPTY
7515: LIST
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: PPUSH
7526: CALL_OW 69
7530: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7531: LD_ADDR_VAR 0 4
7535: PUSH
7536: LD_INT 10
7538: PUSH
7539: LD_INT 11
7541: PUSH
7542: LD_INT 12
7544: PUSH
7545: LD_INT 14
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: ST_TO_ADDR
// area := 0 ;
7554: LD_ADDR_VAR 0 5
7558: PUSH
7559: LD_INT 0
7561: ST_TO_ADDR
// attacking := false ;
7562: LD_ADDR_VAR 0 3
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// for i in tmp do
7570: LD_ADDR_VAR 0 1
7574: PUSH
7575: LD_VAR 0 2
7579: PUSH
7580: FOR_IN
7581: IFFALSE 8009
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7583: LD_VAR 0 1
7587: PPUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 1
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 69
7602: PPUSH
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 74
7612: PPUSH
7613: CALL_OW 296
7617: PUSH
7618: LD_INT 10
7620: LESS
7621: PUSH
7622: LD_VAR 0 1
7626: PPUSH
7627: CALL_OW 314
7631: NOT
7632: AND
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 110
7643: NOT
7644: AND
7645: PUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 256
7655: PUSH
7656: LD_INT 650
7658: GREATER
7659: AND
7660: IFFALSE 7704
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7662: LD_VAR 0 1
7666: PPUSH
7667: LD_INT 22
7669: PUSH
7670: LD_INT 1
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PPUSH
7677: CALL_OW 69
7681: PPUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 74
7691: PPUSH
7692: CALL_OW 115
// attacking := true ;
7696: LD_ADDR_VAR 0 3
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7704: LD_VAR 0 1
7708: PPUSH
7709: CALL_OW 110
7713: NOT
7714: PUSH
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 256
7724: PUSH
7725: LD_INT 650
7727: LESS
7728: AND
7729: PUSH
7730: LD_VAR 0 1
7734: PPUSH
7735: CALL_OW 247
7739: PUSH
7740: LD_INT 2
7742: EQUAL
7743: AND
7744: IFFALSE 7773
// begin SetTag ( i , 1 ) ;
7746: LD_VAR 0 1
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_INT 130
7765: PPUSH
7766: LD_INT 139
7768: PPUSH
7769: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7773: LD_VAR 0 1
7777: PPUSH
7778: CALL_OW 110
7782: PUSH
7783: LD_INT 1
7785: EQUAL
7786: PUSH
7787: LD_VAR 0 1
7791: PPUSH
7792: LD_INT 130
7794: PPUSH
7795: LD_INT 139
7797: PPUSH
7798: CALL_OW 297
7802: PUSH
7803: LD_INT 6
7805: LESS
7806: AND
7807: IFFALSE 7821
// SetTag ( i , 2 ) ;
7809: LD_VAR 0 1
7813: PPUSH
7814: LD_INT 2
7816: PPUSH
7817: CALL_OW 109
// if GetTag ( i ) = 2 then
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 110
7830: PUSH
7831: LD_INT 2
7833: EQUAL
7834: IFFALSE 7969
// begin if GetLives ( i ) = 1000 then
7836: LD_VAR 0 1
7840: PPUSH
7841: CALL_OW 256
7845: PUSH
7846: LD_INT 1000
7848: EQUAL
7849: IFFALSE 7865
// SetTag ( i , 3 ) else
7851: LD_VAR 0 1
7855: PPUSH
7856: LD_INT 3
7858: PPUSH
7859: CALL_OW 109
7863: GO 7969
// if IsDrivenBy ( i ) then
7865: LD_VAR 0 1
7869: PPUSH
7870: CALL_OW 311
7874: IFFALSE 7969
// begin mech := IsDrivenBy ( i ) ;
7876: LD_ADDR_VAR 0 6
7880: PUSH
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL_OW 311
7890: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7891: LD_INT 1
7893: PPUSH
7894: LD_VAR 0 6
7898: PPUSH
7899: CALL_OW 292
7903: NOT
7904: PUSH
7905: LD_VAR 0 6
7909: PPUSH
7910: CALL_OW 256
7914: PUSH
7915: LD_INT 1000
7917: LESS
7918: AND
7919: IFFALSE 7933
// SetLives ( mech , 1000 ) ;
7921: LD_VAR 0 6
7925: PPUSH
7926: LD_INT 1000
7928: PPUSH
7929: CALL_OW 234
// if not See ( 1 , i ) then
7933: LD_INT 1
7935: PPUSH
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 292
7945: NOT
7946: IFFALSE 7960
// SetFuel ( i , 100 ) ;
7948: LD_VAR 0 1
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7960: LD_VAR 0 6
7964: PPUSH
7965: CALL 71401 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 110
7978: PUSH
7979: LD_INT 3
7981: EQUAL
7982: PUSH
7983: LD_VAR 0 1
7987: PPUSH
7988: CALL_OW 311
7992: AND
7993: IFFALSE 8007
// SetTag ( i , 0 ) ;
7995: LD_VAR 0 1
7999: PPUSH
8000: LD_INT 0
8002: PPUSH
8003: CALL_OW 109
// end ;
8007: GO 7580
8009: POP
8010: POP
// if attacking then
8011: LD_VAR 0 3
8015: IFFALSE 8019
// exit ;
8017: GO 8163
// for i in areas do
8019: LD_ADDR_VAR 0 1
8023: PUSH
8024: LD_VAR 0 4
8028: PUSH
8029: FOR_IN
8030: IFFALSE 8067
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8032: LD_VAR 0 1
8036: PPUSH
8037: LD_INT 22
8039: PUSH
8040: LD_INT 1
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 70
8051: IFFALSE 8065
// begin area := i ;
8053: LD_ADDR_VAR 0 5
8057: PUSH
8058: LD_VAR 0 1
8062: ST_TO_ADDR
// break ;
8063: GO 8067
// end ;
8065: GO 8029
8067: POP
8068: POP
// if area then
8069: LD_VAR 0 5
8073: IFFALSE 8163
// begin for i in tmp do
8075: LD_ADDR_VAR 0 1
8079: PUSH
8080: LD_VAR 0 2
8084: PUSH
8085: FOR_IN
8086: IFFALSE 8161
// begin if GetTag ( i ) then
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 110
8097: IFFALSE 8101
// continue ;
8099: GO 8085
// if GetFuel ( i ) < 33 then
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 261
8110: PUSH
8111: LD_INT 33
8113: LESS
8114: IFFALSE 8128
// SetFuel ( i , 33 ) ;
8116: LD_VAR 0 1
8120: PPUSH
8121: LD_INT 33
8123: PPUSH
8124: CALL_OW 240
// if not IsInArea ( i , area ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_VAR 0 5
8137: PPUSH
8138: CALL_OW 308
8142: NOT
8143: IFFALSE 8159
// ComMoveToArea ( i , area ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: LD_VAR 0 5
8154: PPUSH
8155: CALL_OW 113
// end ;
8159: GO 8085
8161: POP
8162: POP
// end ; end ;
8163: PPOPN 6
8165: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8166: LD_OWVAR 67
8170: PUSH
8171: LD_INT 1
8173: GREATER
8174: IFFALSE 8459
8176: GO 8178
8178: DISABLE
8179: LD_INT 0
8181: PPUSH
8182: PPUSH
8183: PPUSH
8184: PPUSH
8185: PPUSH
8186: PPUSH
// begin uc_side := 3 ;
8187: LD_ADDR_OWVAR 20
8191: PUSH
8192: LD_INT 3
8194: ST_TO_ADDR
// uc_nation := 3 ;
8195: LD_ADDR_OWVAR 21
8199: PUSH
8200: LD_INT 3
8202: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8203: LD_ADDR_VAR 0 5
8207: PUSH
8208: LD_INT 18900
8210: PUSH
8211: LD_INT 14700
8213: PUSH
8214: LD_INT 12600
8216: PUSH
8217: LD_INT 11550
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: PUSH
8226: LD_OWVAR 67
8230: ARRAY
8231: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8232: LD_ADDR_VAR 0 6
8236: PUSH
8237: LD_INT 2
8239: PUSH
8240: LD_INT 2
8242: PUSH
8243: LD_INT 3
8245: PUSH
8246: LD_INT 3
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: PUSH
8255: LD_OWVAR 67
8259: ARRAY
8260: ST_TO_ADDR
// for i = 1 to count do
8261: LD_ADDR_VAR 0 1
8265: PUSH
8266: DOUBLE
8267: LD_INT 1
8269: DEC
8270: ST_TO_ADDR
8271: LD_VAR 0 6
8275: PUSH
8276: FOR_TO
8277: IFFALSE 8457
// begin wait ( time ) ;
8279: LD_VAR 0 5
8283: PPUSH
8284: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8288: LD_ADDR_VAR 0 2
8292: PUSH
8293: DOUBLE
8294: LD_INT 1
8296: DEC
8297: ST_TO_ADDR
8298: LD_INT 1
8300: PPUSH
8301: LD_OWVAR 67
8305: PPUSH
8306: CALL_OW 12
8310: PUSH
8311: FOR_TO
8312: IFFALSE 8453
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 3
8321: PPUSH
8322: LD_INT 3
8324: PPUSH
8325: LD_INT 22
8327: PPUSH
8328: LD_INT 1
8330: PPUSH
8331: LD_INT 1
8333: PPUSH
8334: LD_INT 43
8336: PUSH
8337: LD_INT 44
8339: PUSH
8340: LD_INT 42
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: LD_VAR 0 1
8352: PUSH
8353: LD_INT 3
8355: MOD
8356: PUSH
8357: LD_INT 1
8359: PLUS
8360: ARRAY
8361: PPUSH
8362: LD_INT 80
8364: PPUSH
8365: CALL 520 0 7
8369: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8370: LD_VAR 0 4
8374: PPUSH
8375: LD_INT 13
8377: PPUSH
8378: LD_INT 0
8380: PPUSH
8381: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8385: LD_INT 0
8387: PPUSH
8388: LD_INT 3
8390: PPUSH
8391: LD_INT 4
8393: PUSH
8394: LD_INT 5
8396: PUSH
8397: LD_INT 5
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: PUSH
8405: LD_OWVAR 67
8409: ARRAY
8410: PPUSH
8411: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8415: CALL_OW 44
8419: PPUSH
8420: LD_VAR 0 4
8424: PPUSH
8425: CALL_OW 52
// wait ( 0 0$01 ) ;
8429: LD_INT 35
8431: PPUSH
8432: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8436: LD_VAR 0 4
8440: PPUSH
8441: LD_INT 143
8443: PPUSH
8444: LD_INT 143
8446: PPUSH
8447: CALL_OW 111
// end ;
8451: GO 8311
8453: POP
8454: POP
// end ;
8455: GO 8276
8457: POP
8458: POP
// end ;
8459: PPOPN 6
8461: END
// every 8 8$00 do var i , un , time ;
8462: GO 8464
8464: DISABLE
8465: LD_INT 0
8467: PPUSH
8468: PPUSH
8469: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8470: LD_ADDR_VAR 0 3
8474: PUSH
8475: LD_INT 6300
8477: PUSH
8478: LD_INT 2100
8480: PUSH
8481: LD_INT 1050
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: ST_TO_ADDR
// wait ( time ) ;
8489: LD_VAR 0 3
8493: PPUSH
8494: CALL_OW 67
// uc_side := 3 ;
8498: LD_ADDR_OWVAR 20
8502: PUSH
8503: LD_INT 3
8505: ST_TO_ADDR
// uc_nation := 3 ;
8506: LD_ADDR_OWVAR 21
8510: PUSH
8511: LD_INT 3
8513: ST_TO_ADDR
// for i = 1 to 2 do
8514: LD_ADDR_VAR 0 1
8518: PUSH
8519: DOUBLE
8520: LD_INT 1
8522: DEC
8523: ST_TO_ADDR
8524: LD_INT 2
8526: PUSH
8527: FOR_TO
8528: IFFALSE 8591
// begin PrepareHuman ( false , 1 , 4 ) ;
8530: LD_INT 0
8532: PPUSH
8533: LD_INT 1
8535: PPUSH
8536: LD_INT 4
8538: PPUSH
8539: CALL_OW 380
// un := CreateHuman ;
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: CALL_OW 44
8552: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8553: LD_VAR 0 2
8557: PPUSH
8558: LD_INT 16
8560: PPUSH
8561: CALL_OW 52
// ComExitBuilding ( un ) ;
8565: LD_VAR 0 2
8569: PPUSH
8570: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8574: LD_VAR 0 2
8578: PPUSH
8579: LD_INT 41
8581: PPUSH
8582: LD_INT 76
8584: PPUSH
8585: CALL_OW 174
// end ;
8589: GO 8527
8591: POP
8592: POP
// end ; end_of_file
8593: PPOPN 3
8595: END
// export function Action ; begin
8596: LD_INT 0
8598: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8599: LD_INT 28
8601: PPUSH
8602: LD_INT 3
8604: PPUSH
8605: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8609: LD_INT 41
8611: PPUSH
8612: LD_INT 76
8614: PPUSH
8615: LD_INT 1
8617: PPUSH
8618: LD_INT 10
8620: PPUSH
8621: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8625: LD_INT 41
8627: PPUSH
8628: LD_INT 76
8630: PPUSH
8631: LD_INT 1
8633: PPUSH
8634: CALL_OW 331
// InGameOn ;
8638: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8642: LD_EXP 19
8646: PPUSH
8647: LD_STRING D2-Har-1
8649: PPUSH
8650: CALL_OW 94
// InGameOff ;
8654: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8658: LD_STRING M1
8660: PPUSH
8661: CALL_OW 337
// end ;
8665: LD_VAR 0 1
8669: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8670: LD_EXP 4
8674: PUSH
8675: LD_INT 1
8677: GREATER
8678: IFFALSE 8769
8680: GO 8682
8682: DISABLE
8683: LD_INT 0
8685: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8686: LD_ADDR_VAR 0 1
8690: PUSH
8691: LD_INT 1
8693: PPUSH
8694: CALL 608 0 1
8698: PUSH
8699: LD_INT 1
8701: ARRAY
8702: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8703: LD_VAR 0 1
8707: PPUSH
8708: LD_STRING D2a-Sol1-1
8710: PPUSH
8711: CALL_OW 88
// if not un then
8715: LD_VAR 0 1
8719: NOT
8720: IFFALSE 8751
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8722: LD_ADDR_VAR 0 1
8726: PUSH
8727: LD_INT 2
8729: PPUSH
8730: CALL 608 0 1
8734: PUSH
8735: LD_INT 1
8737: ARRAY
8738: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8739: LD_VAR 0 1
8743: PPUSH
8744: LD_STRING D2a-FSol1-1
8746: PPUSH
8747: CALL_OW 88
// end ; if Khatam then
8751: LD_EXP 17
8755: IFFALSE 8769
// Say ( Khatam , D3b-Khat-3 ) ;
8757: LD_EXP 17
8761: PPUSH
8762: LD_STRING D3b-Khat-3
8764: PPUSH
8765: CALL_OW 88
// end ;
8769: PPOPN 1
8771: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8772: LD_EXP 15
8776: PUSH
8777: LD_EXP 18
8781: NOT
8782: AND
8783: PUSH
8784: LD_INT 22
8786: PUSH
8787: LD_INT 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 92
8796: PUSH
8797: LD_EXP 15
8801: PPUSH
8802: CALL_OW 250
8806: PUSH
8807: LD_EXP 15
8811: PPUSH
8812: CALL_OW 251
8816: PUSH
8817: LD_INT 7
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: AND
8835: PUSH
8836: LD_INT 1
8838: PPUSH
8839: CALL_OW 463
8843: NOT
8844: AND
8845: PUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 463
8853: NOT
8854: AND
8855: IFFALSE 9442
8857: GO 8859
8859: DISABLE
8860: LD_INT 0
8862: PPUSH
8863: PPUSH
// begin InGameOn ;
8864: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8868: LD_ADDR_VAR 0 2
8872: PUSH
8873: LD_INT 22
8875: PUSH
8876: LD_INT 0
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 25
8885: PUSH
8886: LD_INT 12
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PPUSH
8897: CALL_OW 69
8901: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8902: LD_ADDR_VAR 0 2
8906: PUSH
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_EXP 15
8916: PPUSH
8917: CALL_OW 74
8921: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 22
8929: PUSH
8930: LD_INT 1
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 21
8939: PUSH
8940: LD_INT 1
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: LD_INT 91
8949: PUSH
8950: LD_EXP 15
8954: PUSH
8955: LD_INT 20
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: LIST
8967: PPUSH
8968: CALL_OW 69
8972: PUSH
8973: FOR_IN
8974: IFFALSE 8992
// ComTurnUnit ( i , Frank ) ;
8976: LD_VAR 0 1
8980: PPUSH
8981: LD_EXP 15
8985: PPUSH
8986: CALL_OW 119
8990: GO 8973
8992: POP
8993: POP
// SetSide ( Frank , 1 ) ;
8994: LD_EXP 15
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9006: LD_EXP 9
9010: PPUSH
9011: LD_EXP 15
9015: PPUSH
9016: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9020: LD_EXP 9
9024: PPUSH
9025: LD_EXP 15
9029: PPUSH
9030: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9034: LD_EXP 15
9038: PPUSH
9039: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9043: LD_EXP 15
9047: PPUSH
9048: LD_STRING D3a-Frank-1
9050: PPUSH
9051: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9055: LD_VAR 0 2
9059: PPUSH
9060: LD_INT 42
9062: PPUSH
9063: LD_INT 78
9065: PPUSH
9066: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9070: LD_VAR 0 2
9074: PPUSH
9075: LD_EXP 15
9079: PPUSH
9080: CALL_OW 179
// if Lisa then
9084: LD_EXP 14
9088: IFFALSE 9102
// Say ( Lisa , D3a-Lisa-1 ) ;
9090: LD_EXP 14
9094: PPUSH
9095: LD_STRING D3a-Lisa-1
9097: PPUSH
9098: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9102: LD_EXP 9
9106: PPUSH
9107: LD_STRING D3a-JMM-1
9109: PPUSH
9110: CALL_OW 88
// if Cyrus then
9114: LD_EXP 13
9118: IFFALSE 9132
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9120: LD_EXP 13
9124: PPUSH
9125: LD_STRING D3a-Cyrus-1
9127: PPUSH
9128: CALL_OW 88
// if GetRandom ( sex_male ) then
9132: LD_INT 1
9134: PPUSH
9135: CALL 608 0 1
9139: IFFALSE 9160
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9141: LD_INT 1
9143: PPUSH
9144: CALL 608 0 1
9148: PUSH
9149: LD_INT 1
9151: ARRAY
9152: PPUSH
9153: LD_STRING D3a-Sol1-1
9155: PPUSH
9156: CALL_OW 88
// if GetRandom ( sex_female ) then
9160: LD_INT 2
9162: PPUSH
9163: CALL 608 0 1
9167: IFFALSE 9188
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9169: LD_INT 2
9171: PPUSH
9172: CALL 608 0 1
9176: PUSH
9177: LD_INT 1
9179: ARRAY
9180: PPUSH
9181: LD_STRING D3a-FSol1-1
9183: PPUSH
9184: CALL_OW 88
// if Gladstone then
9188: LD_EXP 16
9192: IFFALSE 9206
// Say ( Gladstone , D3a-Glad-1 ) ;
9194: LD_EXP 16
9198: PPUSH
9199: LD_STRING D3a-Glad-1
9201: PPUSH
9202: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9206: LD_VAR 0 2
9210: PPUSH
9211: LD_INT 60
9213: PPUSH
9214: LD_INT 113
9216: PPUSH
9217: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9221: LD_EXP 15
9225: PPUSH
9226: LD_STRING D3a-Frank-2
9228: PPUSH
9229: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9233: LD_EXP 15
9237: PPUSH
9238: LD_EXP 9
9242: PPUSH
9243: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9247: LD_EXP 9
9251: PPUSH
9252: LD_STRING D3a-JMM-2
9254: PPUSH
9255: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9259: LD_INT 1
9261: PPUSH
9262: LD_INT 4
9264: PPUSH
9265: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9269: LD_INT 85
9271: PPUSH
9272: LD_INT 134
9274: PPUSH
9275: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9279: LD_EXP 15
9283: PPUSH
9284: LD_STRING D3a-Frank-3
9286: PPUSH
9287: CALL_OW 88
// Wait ( 0 0$01 ) ;
9291: LD_INT 35
9293: PPUSH
9294: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9298: LD_INT 166
9300: PPUSH
9301: LD_INT 136
9303: PPUSH
9304: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9308: LD_EXP 9
9312: PPUSH
9313: LD_STRING D3a-JMM-3
9315: PPUSH
9316: CALL_OW 88
// Wait ( 0 0$01 ) ;
9320: LD_INT 35
9322: PPUSH
9323: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9327: LD_EXP 15
9331: PPUSH
9332: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9336: LD_EXP 15
9340: PPUSH
9341: LD_STRING D3a-Frank-4
9343: PPUSH
9344: CALL_OW 88
// if Lisa then
9348: LD_EXP 14
9352: IFFALSE 9366
// Say ( Lisa , D3a-Lisa-4 ) ;
9354: LD_EXP 14
9358: PPUSH
9359: LD_STRING D3a-Lisa-4
9361: PPUSH
9362: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9366: LD_EXP 9
9370: PPUSH
9371: LD_STRING D3a-JMM-4
9373: PPUSH
9374: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9378: LD_EXP 15
9382: PPUSH
9383: LD_STRING D3a-Frank-5
9385: PPUSH
9386: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9390: LD_EXP 9
9394: PPUSH
9395: LD_STRING D3a-JMM-5
9397: PPUSH
9398: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9402: LD_EXP 15
9406: PPUSH
9407: LD_STRING D3a-Frank-6
9409: PPUSH
9410: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9414: LD_EXP 9
9418: PPUSH
9419: LD_STRING D3a-JMM-6
9421: PPUSH
9422: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9426: LD_EXP 15
9430: PPUSH
9431: LD_STRING D3a-Frank-7
9433: PPUSH
9434: CALL_OW 88
// InGameOff ;
9438: CALL_OW 9
// end ;
9442: PPOPN 2
9444: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9445: LD_EXP 18
9449: PUSH
9450: LD_EXP 15
9454: NOT
9455: AND
9456: PUSH
9457: LD_INT 22
9459: PUSH
9460: LD_INT 1
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 92
9469: PUSH
9470: LD_EXP 18
9474: PPUSH
9475: CALL_OW 250
9479: PUSH
9480: LD_EXP 18
9484: PPUSH
9485: CALL_OW 251
9489: PUSH
9490: LD_INT 7
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PPUSH
9503: CALL_OW 69
9507: AND
9508: PUSH
9509: LD_INT 1
9511: PPUSH
9512: CALL_OW 463
9516: NOT
9517: AND
9518: PUSH
9519: LD_INT 4
9521: PPUSH
9522: CALL_OW 463
9526: NOT
9527: AND
9528: IFFALSE 9708
9530: GO 9532
9532: DISABLE
// begin InGameOn ;
9533: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9537: LD_EXP 9
9541: PPUSH
9542: LD_EXP 18
9546: PPUSH
9547: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9551: LD_EXP 18
9555: PPUSH
9556: LD_EXP 9
9560: PPUSH
9561: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9565: LD_EXP 18
9569: PPUSH
9570: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9574: LD_EXP 18
9578: PPUSH
9579: LD_STRING D3b-Yam-1
9581: PPUSH
9582: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9586: LD_EXP 9
9590: PPUSH
9591: LD_STRING D3b-JMM-1
9593: PPUSH
9594: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9598: LD_INT 1
9600: PPUSH
9601: LD_INT 4
9603: PPUSH
9604: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9608: LD_INT 85
9610: PPUSH
9611: LD_INT 134
9613: PPUSH
9614: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9618: LD_EXP 18
9622: PPUSH
9623: LD_STRING D3b-Yam-2
9625: PPUSH
9626: CALL_OW 88
// Wait ( 0 0$01 ) ;
9630: LD_INT 35
9632: PPUSH
9633: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9637: LD_EXP 9
9641: PPUSH
9642: LD_STRING D3b-JMM-2
9644: PPUSH
9645: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9649: LD_INT 166
9651: PPUSH
9652: LD_INT 136
9654: PPUSH
9655: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9659: LD_EXP 18
9663: PPUSH
9664: LD_STRING D3b-Yam-3
9666: PPUSH
9667: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9671: LD_EXP 9
9675: PPUSH
9676: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9680: LD_EXP 9
9684: PPUSH
9685: LD_STRING D3b-JMM-3a
9687: PPUSH
9688: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9692: LD_EXP 18
9696: PPUSH
9697: LD_INT 1
9699: PPUSH
9700: CALL_OW 235
// InGameOff ;
9704: CALL_OW 9
// end ;
9708: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9709: LD_INT 7
9711: PPUSH
9712: LD_INT 22
9714: PUSH
9715: LD_INT 1
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 3
9724: PUSH
9725: LD_INT 24
9727: PUSH
9728: LD_INT 1000
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PPUSH
9743: CALL_OW 70
9747: IFFALSE 10203
9749: GO 9751
9751: DISABLE
9752: LD_INT 0
9754: PPUSH
9755: PPUSH
9756: PPUSH
9757: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9758: LD_INT 35
9760: PPUSH
9761: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9765: LD_ADDR_VAR 0 1
9769: PUSH
9770: LD_INT 7
9772: PPUSH
9773: LD_INT 22
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 3
9785: PUSH
9786: LD_INT 24
9788: PUSH
9789: LD_INT 1000
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 70
9808: ST_TO_ADDR
// if not un then
9809: LD_VAR 0 1
9813: NOT
9814: IFFALSE 9818
// continue ;
9816: GO 9758
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9818: LD_ADDR_VAR 0 3
9822: PUSH
9823: LD_VAR 0 1
9827: PUSH
9828: LD_INT 1
9830: ARRAY
9831: PPUSH
9832: CALL 2053 0 1
9836: ST_TO_ADDR
// until tw ;
9837: LD_VAR 0 3
9841: IFFALSE 9758
// DialogueOn ;
9843: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9847: LD_VAR 0 3
9851: PPUSH
9852: CALL_OW 87
// if Lisa then
9856: LD_EXP 14
9860: IFFALSE 9888
// begin Say ( Lisa , D5-Lisa-1 ) ;
9862: LD_EXP 14
9866: PPUSH
9867: LD_STRING D5-Lisa-1
9869: PPUSH
9870: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9874: LD_EXP 9
9878: PPUSH
9879: LD_STRING D5-JMM-1a
9881: PPUSH
9882: CALL_OW 88
// end else
9886: GO 9900
// Say ( JMM , D5-JMM-1 ) ;
9888: LD_EXP 9
9892: PPUSH
9893: LD_STRING D5-JMM-1
9895: PPUSH
9896: CALL_OW 88
// DialogueOff ;
9900: CALL_OW 7
// while ( true ) do
9904: LD_INT 1
9906: IFFALSE 9962
// begin wait ( 0 0$01 ) ;
9908: LD_INT 35
9910: PPUSH
9911: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9915: LD_ADDR_VAR 0 2
9919: PUSH
9920: LD_INT 8
9922: PPUSH
9923: LD_INT 30
9925: PUSH
9926: LD_INT 26
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 101
9935: PUSH
9936: LD_INT 1
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 71
9951: ST_TO_ADDR
// if x then
9952: LD_VAR 0 2
9956: IFFALSE 9960
// break ;
9958: GO 9962
// end ;
9960: GO 9904
// CenterOnUnits ( x [ 1 ] ) ;
9962: LD_VAR 0 2
9966: PUSH
9967: LD_INT 1
9969: ARRAY
9970: PPUSH
9971: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9975: LD_EXP 15
9979: PUSH
9980: LD_EXP 15
9984: PPUSH
9985: CALL_OW 255
9989: PUSH
9990: LD_INT 1
9992: EQUAL
9993: AND
9994: IFFALSE 10010
// Say ( Frank , D5a-Frank-1 ) else
9996: LD_EXP 15
10000: PPUSH
10001: LD_STRING D5a-Frank-1
10003: PPUSH
10004: CALL_OW 88
10008: GO 10064
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10010: LD_EXP 18
10014: PUSH
10015: LD_EXP 18
10019: PPUSH
10020: CALL_OW 255
10024: PUSH
10025: LD_INT 1
10027: EQUAL
10028: AND
10029: IFFALSE 10045
// Say ( Kikuchi , D5a-Yam-1 ) else
10031: LD_EXP 18
10035: PPUSH
10036: LD_STRING D5a-Yam-1
10038: PPUSH
10039: CALL_OW 88
10043: GO 10064
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10045: LD_INT 1
10047: PPUSH
10048: CALL 608 0 1
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: LD_STRING D5a-Sol1-1
10059: PPUSH
10060: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10064: LD_EXP 9
10068: PPUSH
10069: LD_STRING D5a-JMM-1
10071: PPUSH
10072: CALL_OW 88
// if Cyrus then
10076: LD_EXP 13
10080: IFFALSE 10094
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10082: LD_EXP 13
10086: PPUSH
10087: LD_STRING D5a-Cyrus-1
10089: PPUSH
10090: CALL_OW 88
// x := false ;
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// while ( true ) do
10102: LD_INT 1
10104: IFFALSE 10191
// begin wait ( 0 0$01 ) ;
10106: LD_INT 35
10108: PPUSH
10109: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10113: LD_ADDR_VAR 0 4
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: LD_INT 30
10123: PUSH
10124: LD_INT 0
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 30
10133: PUSH
10134: LD_INT 1
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: PPUSH
10146: CALL_OW 69
10150: PUSH
10151: LD_INT 1
10153: DIFF
10154: PUSH
10155: FOR_IN
10156: IFFALSE 10179
// if BaseNeedEnergy ( i ) then
10158: LD_VAR 0 4
10162: PPUSH
10163: CALL 1178 0 1
10167: IFFALSE 10177
// x := true ;
10169: LD_ADDR_VAR 0 2
10173: PUSH
10174: LD_INT 1
10176: ST_TO_ADDR
10177: GO 10155
10179: POP
10180: POP
// if x then
10181: LD_VAR 0 2
10185: IFFALSE 10189
// break ;
10187: GO 10191
// end ;
10189: GO 10102
// Say ( JMM , D5b-JMM-1 ) ;
10191: LD_EXP 9
10195: PPUSH
10196: LD_STRING D5b-JMM-1
10198: PPUSH
10199: CALL_OW 88
// end ;
10203: PPOPN 4
10205: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10206: LD_EXP 5
10210: PUSH
10211: LD_INT 1
10213: ARRAY
10214: PUSH
10215: LD_OWVAR 1
10219: LESS
10220: PUSH
10221: LD_INT 22
10223: PUSH
10224: LD_INT 3
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 21
10233: PUSH
10234: LD_INT 3
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PPUSH
10245: CALL_OW 69
10249: PUSH
10250: LD_INT 10
10252: LESS
10253: OR
10254: IFFALSE 10454
10256: GO 10258
10258: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10259: LD_INT 16
10261: PPUSH
10262: CALL_OW 301
10266: NOT
10267: IFFALSE 10290
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10269: LD_EXP 19
10273: PPUSH
10274: LD_STRING D3b-Har-3
10276: PPUSH
10277: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10281: LD_STRING M2a
10283: PPUSH
10284: CALL_OW 337
// end else
10288: GO 10309
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10290: LD_EXP 19
10294: PPUSH
10295: LD_STRING D3b-Har-3a
10297: PPUSH
10298: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10302: LD_STRING M2
10304: PPUSH
10305: CALL_OW 337
// end ; can_end := true ;
10309: LD_ADDR_EXP 6
10313: PUSH
10314: LD_INT 1
10316: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10317: LD_INT 9
10319: PPUSH
10320: LD_INT 1
10322: PPUSH
10323: CALL_OW 424
// Wait ( 0 0$02 ) ;
10327: LD_INT 70
10329: PPUSH
10330: CALL_OW 67
// if Lisa then
10334: LD_EXP 14
10338: IFFALSE 10352
// Say ( Lisa , D3b-Lisa ) ;
10340: LD_EXP 14
10344: PPUSH
10345: LD_STRING D3b-Lisa
10347: PPUSH
10348: CALL_OW 88
// if Bobby then
10352: LD_EXP 12
10356: IFFALSE 10370
// Say ( Bobby , D3b-Bobby-3 ) ;
10358: LD_EXP 12
10362: PPUSH
10363: LD_STRING D3b-Bobby-3
10365: PPUSH
10366: CALL_OW 88
// if Cyrus then
10370: LD_EXP 13
10374: IFFALSE 10388
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10376: LD_EXP 13
10380: PPUSH
10381: LD_STRING D3b-Cyrus-3
10383: PPUSH
10384: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10388: LD_EXP 15
10392: PUSH
10393: LD_EXP 15
10397: PPUSH
10398: CALL_OW 255
10402: PUSH
10403: LD_INT 1
10405: EQUAL
10406: AND
10407: IFFALSE 10421
// Say ( Frank , D3b-Frank-3 ) ;
10409: LD_EXP 15
10413: PPUSH
10414: LD_STRING D3b-Frank-3
10416: PPUSH
10417: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10421: LD_EXP 18
10425: PUSH
10426: LD_EXP 18
10430: PPUSH
10431: CALL_OW 255
10435: PUSH
10436: LD_INT 1
10438: EQUAL
10439: AND
10440: IFFALSE 10454
// Say ( Kikuchi , D3b-Yam-4 ) ;
10442: LD_EXP 18
10446: PPUSH
10447: LD_STRING D3b-Yam-4
10449: PPUSH
10450: CALL_OW 88
// end ;
10454: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10455: LD_EXP 5
10459: PUSH
10460: LD_INT 2
10462: ARRAY
10463: PUSH
10464: LD_OWVAR 1
10468: LESS
10469: IFFALSE 10501
10471: GO 10473
10473: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10474: LD_EXP 19
10478: PPUSH
10479: LD_STRING D4-Har-1
10481: PPUSH
10482: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10486: LD_STRING M3
10488: PPUSH
10489: CALL_OW 337
// must_end := true ;
10493: LD_ADDR_EXP 7
10497: PUSH
10498: LD_INT 1
10500: ST_TO_ADDR
// end ;
10501: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10502: LD_EXP 5
10506: PUSH
10507: LD_INT 3
10509: ARRAY
10510: PUSH
10511: LD_OWVAR 1
10515: LESS
10516: IFFALSE 10547
10518: GO 10520
10520: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10521: LD_INT 16
10523: PPUSH
10524: CALL_OW 301
10528: NOT
10529: IFFALSE 10540
// YouLost ( TimeOut1 ) else
10531: LD_STRING TimeOut1
10533: PPUSH
10534: CALL_OW 104
10538: GO 10547
// YouLost ( TimeOut2 ) ;
10540: LD_STRING TimeOut2
10542: PPUSH
10543: CALL_OW 104
// end ;
10547: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10548: LD_EXP 9
10552: PPUSH
10553: LD_INT 9
10555: PPUSH
10556: CALL_OW 308
10560: PUSH
10561: LD_EXP 6
10565: AND
10566: IFFALSE 11666
10568: GO 10570
10570: DISABLE
10571: LD_INT 0
10573: PPUSH
10574: PPUSH
10575: PPUSH
10576: PPUSH
10577: PPUSH
10578: PPUSH
// begin wait_on := false ;
10579: LD_ADDR_VAR 0 1
10583: PUSH
10584: LD_INT 0
10586: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10587: LD_INT 1
10589: PPUSH
10590: CALL 1255 0 1
10594: PUSH
10595: LD_INT 0
10597: PLUS
10598: PUSH
10599: LD_INT 1
10601: PPUSH
10602: LD_INT 9
10604: PPUSH
10605: CALL 1346 0 2
10609: PUSH
10610: LD_INT 1
10612: PPUSH
10613: LD_INT 9
10615: PPUSH
10616: CALL 1393 0 2
10620: ADD
10621: PUSH
10622: LD_INT 0
10624: PLUS
10625: GREATER
10626: IFFALSE 10675
// case Query ( Q1 ) of 1 :
10628: LD_STRING Q1
10630: PPUSH
10631: CALL_OW 97
10635: PUSH
10636: LD_INT 1
10638: DOUBLE
10639: EQUAL
10640: IFTRUE 10644
10642: GO 10655
10644: POP
// wait_on := true ; 2 :
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: LD_INT 1
10652: ST_TO_ADDR
10653: GO 10675
10655: LD_INT 2
10657: DOUBLE
10658: EQUAL
10659: IFTRUE 10663
10661: GO 10674
10663: POP
// wait_on := false ; end ;
10664: LD_ADDR_VAR 0 1
10668: PUSH
10669: LD_INT 0
10671: ST_TO_ADDR
10672: GO 10675
10674: POP
// repeat wait ( 0 0$01 ) ;
10675: LD_INT 35
10677: PPUSH
10678: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10682: LD_VAR 0 1
10686: NOT
10687: PUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL 1255 0 1
10695: PUSH
10696: LD_INT 0
10698: PLUS
10699: PUSH
10700: LD_INT 1
10702: PPUSH
10703: LD_INT 9
10705: PPUSH
10706: CALL 1346 0 2
10710: PUSH
10711: LD_INT 1
10713: PPUSH
10714: LD_INT 9
10716: PPUSH
10717: CALL 1393 0 2
10721: ADD
10722: PUSH
10723: LD_INT 0
10725: PLUS
10726: EQUAL
10727: OR
10728: IFFALSE 10675
// DialogueOn ;
10730: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10734: LD_EXP 9
10738: PPUSH
10739: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10743: LD_EXP 9
10747: PPUSH
10748: LD_STRING D6-JMM-1
10750: PPUSH
10751: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10755: LD_EXP 19
10759: PPUSH
10760: LD_STRING D6-Har-1
10762: PPUSH
10763: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10767: LD_EXP 9
10771: PPUSH
10772: LD_STRING D6-JMM-2
10774: PPUSH
10775: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10779: LD_EXP 19
10783: PPUSH
10784: LD_STRING D6-Har-2
10786: PPUSH
10787: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10791: LD_EXP 9
10795: PPUSH
10796: LD_STRING D6-JMM-3
10798: PPUSH
10799: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10803: LD_EXP 19
10807: PPUSH
10808: LD_STRING D6-Har-3
10810: PPUSH
10811: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10815: LD_EXP 9
10819: PPUSH
10820: LD_STRING D6-JMM-4
10822: PPUSH
10823: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10827: LD_EXP 19
10831: PPUSH
10832: LD_STRING D6-Har-4
10834: PPUSH
10835: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10839: LD_EXP 9
10843: PPUSH
10844: LD_STRING D6-JMM-5
10846: PPUSH
10847: CALL_OW 88
// DialogueOff ;
10851: CALL_OW 7
// m1 := false ;
10855: LD_ADDR_VAR 0 4
10859: PUSH
10860: LD_INT 0
10862: ST_TO_ADDR
// m2 := false ;
10863: LD_ADDR_VAR 0 5
10867: PUSH
10868: LD_INT 0
10870: ST_TO_ADDR
// m3 := false ;
10871: LD_ADDR_VAR 0 6
10875: PUSH
10876: LD_INT 0
10878: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10879: LD_ADDR_VAR 0 3
10883: PUSH
10884: LD_INT 3
10886: PPUSH
10887: CALL 1524 0 1
10891: ST_TO_ADDR
// if tmp >= 35 then
10892: LD_VAR 0 3
10896: PUSH
10897: LD_INT 35
10899: GREATEREQUAL
10900: IFFALSE 10937
// begin AddMedal ( Destroy1 , - 1 ) ;
10902: LD_STRING Destroy1
10904: PPUSH
10905: LD_INT 1
10907: NEG
10908: PPUSH
10909: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10913: LD_STRING Destroy2
10915: PPUSH
10916: LD_INT 1
10918: NEG
10919: PPUSH
10920: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10924: LD_STRING Destroy3
10926: PPUSH
10927: LD_INT 1
10929: NEG
10930: PPUSH
10931: CALL_OW 101
// end else
10935: GO 11048
// begin AddMedal ( Destroy1 , 1 ) ;
10937: LD_STRING Destroy1
10939: PPUSH
10940: LD_INT 1
10942: PPUSH
10943: CALL_OW 101
// m1 := true ;
10947: LD_ADDR_VAR 0 4
10951: PUSH
10952: LD_INT 1
10954: ST_TO_ADDR
// if tmp >= 25 then
10955: LD_VAR 0 3
10959: PUSH
10960: LD_INT 25
10962: GREATEREQUAL
10963: IFFALSE 10989
// begin AddMedal ( Destroy2 , - 1 ) ;
10965: LD_STRING Destroy2
10967: PPUSH
10968: LD_INT 1
10970: NEG
10971: PPUSH
10972: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10976: LD_STRING Destroy3
10978: PPUSH
10979: LD_INT 1
10981: NEG
10982: PPUSH
10983: CALL_OW 101
// end else
10987: GO 11048
// begin AddMedal ( Destroy2 , 1 ) ;
10989: LD_STRING Destroy2
10991: PPUSH
10992: LD_INT 1
10994: PPUSH
10995: CALL_OW 101
// m2 := true ;
10999: LD_ADDR_VAR 0 5
11003: PUSH
11004: LD_INT 1
11006: ST_TO_ADDR
// if tmp >= 15 then
11007: LD_VAR 0 3
11011: PUSH
11012: LD_INT 15
11014: GREATEREQUAL
11015: IFFALSE 11030
// AddMedal ( Destroy3 , - 1 ) else
11017: LD_STRING Destroy3
11019: PPUSH
11020: LD_INT 1
11022: NEG
11023: PPUSH
11024: CALL_OW 101
11028: GO 11048
// begin AddMedal ( Destroy3 , 1 ) ;
11030: LD_STRING Destroy3
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 101
// m3 := true ;
11040: LD_ADDR_VAR 0 6
11044: PUSH
11045: LD_INT 1
11047: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11048: LD_OWVAR 1
11052: PUSH
11053: LD_INT 67200
11055: LESSEQUAL
11056: IFFALSE 11065
// SetAchievement ( ACH_ASPEED_7 ) ;
11058: LD_STRING ACH_ASPEED_7
11060: PPUSH
11061: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11065: LD_VAR 0 4
11069: PUSH
11070: LD_VAR 0 5
11074: AND
11075: PUSH
11076: LD_VAR 0 6
11080: AND
11081: PUSH
11082: LD_OWVAR 67
11086: PUSH
11087: LD_INT 3
11089: GREATEREQUAL
11090: AND
11091: IFFALSE 11103
// SetAchievementEX ( ACH_AMER , 7 ) ;
11093: LD_STRING ACH_AMER
11095: PPUSH
11096: LD_INT 7
11098: PPUSH
11099: CALL_OW 564
// GiveMedals ( MAIN ) ;
11103: LD_STRING MAIN
11105: PPUSH
11106: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
11110: LD_ADDR_VAR 0 3
11114: PUSH
11115: LD_INT 1
11117: PPUSH
11118: LD_INT 9
11120: PPUSH
11121: CALL 1346 0 2
11125: PUSH
11126: LD_INT 1
11128: PPUSH
11129: LD_INT 9
11131: PPUSH
11132: CALL 1393 0 2
11136: UNION
11137: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11138: LD_VAR 0 3
11142: PPUSH
11143: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11147: LD_EXP 9
11151: PPUSH
11152: LD_EXP 3
11156: PUSH
11157: LD_STRING JMM
11159: STR
11160: PPUSH
11161: CALL_OW 38
// if Brown in tmp then
11165: LD_EXP 10
11169: PUSH
11170: LD_VAR 0 3
11174: IN
11175: IFFALSE 11195
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11177: LD_EXP 10
11181: PPUSH
11182: LD_EXP 3
11186: PUSH
11187: LD_STRING Brown
11189: STR
11190: PPUSH
11191: CALL_OW 38
// if Donaldson in tmp then
11195: LD_EXP 11
11199: PUSH
11200: LD_VAR 0 3
11204: IN
11205: IFFALSE 11225
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11207: LD_EXP 11
11211: PPUSH
11212: LD_EXP 3
11216: PUSH
11217: LD_STRING Donaldson
11219: STR
11220: PPUSH
11221: CALL_OW 38
// if Bobby in tmp then
11225: LD_EXP 12
11229: PUSH
11230: LD_VAR 0 3
11234: IN
11235: IFFALSE 11255
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11237: LD_EXP 12
11241: PPUSH
11242: LD_EXP 3
11246: PUSH
11247: LD_STRING Bobby
11249: STR
11250: PPUSH
11251: CALL_OW 38
// if Cyrus in tmp then
11255: LD_EXP 13
11259: PUSH
11260: LD_VAR 0 3
11264: IN
11265: IFFALSE 11285
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11267: LD_EXP 13
11271: PPUSH
11272: LD_EXP 3
11276: PUSH
11277: LD_STRING Cyrus
11279: STR
11280: PPUSH
11281: CALL_OW 38
// if Lisa in tmp then
11285: LD_EXP 14
11289: PUSH
11290: LD_VAR 0 3
11294: IN
11295: IFFALSE 11315
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11297: LD_EXP 14
11301: PPUSH
11302: LD_EXP 3
11306: PUSH
11307: LD_STRING Lisa
11309: STR
11310: PPUSH
11311: CALL_OW 38
// if Frank in tmp then
11315: LD_EXP 15
11319: PUSH
11320: LD_VAR 0 3
11324: IN
11325: IFFALSE 11345
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11327: LD_EXP 15
11331: PPUSH
11332: LD_EXP 3
11336: PUSH
11337: LD_STRING Frank
11339: STR
11340: PPUSH
11341: CALL_OW 38
// if Gladstone in tmp then
11345: LD_EXP 16
11349: PUSH
11350: LD_VAR 0 3
11354: IN
11355: IFFALSE 11375
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11357: LD_EXP 16
11361: PPUSH
11362: LD_EXP 3
11366: PUSH
11367: LD_STRING Gladstone
11369: STR
11370: PPUSH
11371: CALL_OW 38
// if Khatam in tmp then
11375: LD_EXP 17
11379: PUSH
11380: LD_VAR 0 3
11384: IN
11385: IFFALSE 11405
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11387: LD_EXP 17
11391: PPUSH
11392: LD_EXP 3
11396: PUSH
11397: LD_STRING Khatam
11399: STR
11400: PPUSH
11401: CALL_OW 38
// if Kikuchi in tmp then
11405: LD_EXP 18
11409: PUSH
11410: LD_VAR 0 3
11414: IN
11415: IFFALSE 11435
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11417: LD_EXP 18
11421: PPUSH
11422: LD_EXP 3
11426: PUSH
11427: LD_STRING Kikuchi
11429: STR
11430: PPUSH
11431: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11435: LD_VAR 0 3
11439: PUSH
11440: LD_EXP 9
11444: PUSH
11445: LD_EXP 10
11449: PUSH
11450: LD_EXP 11
11454: PUSH
11455: LD_EXP 12
11459: PUSH
11460: LD_EXP 13
11464: PUSH
11465: LD_EXP 14
11469: PUSH
11470: LD_EXP 15
11474: PUSH
11475: LD_EXP 16
11479: PUSH
11480: LD_EXP 18
11484: PUSH
11485: LD_EXP 17
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: DIFF
11502: PPUSH
11503: LD_EXP 3
11507: PUSH
11508: LD_STRING others
11510: STR
11511: PPUSH
11512: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11516: LD_OWVAR 1
11520: PPUSH
11521: LD_STRING 07_time
11523: PPUSH
11524: CALL_OW 39
// tmp := [ ] ;
11528: LD_ADDR_VAR 0 3
11532: PUSH
11533: EMPTY
11534: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11535: LD_ADDR_VAR 0 2
11539: PUSH
11540: LD_INT 9
11542: PPUSH
11543: LD_INT 22
11545: PUSH
11546: LD_INT 1
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 23
11555: PUSH
11556: LD_INT 1
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 21
11565: PUSH
11566: LD_INT 2
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: PPUSH
11581: CALL_OW 70
11585: PUSH
11586: FOR_IN
11587: IFFALSE 11648
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11589: LD_ADDR_VAR 0 3
11593: PUSH
11594: LD_VAR 0 3
11598: PUSH
11599: LD_VAR 0 2
11603: PPUSH
11604: CALL_OW 265
11608: PUSH
11609: LD_VAR 0 2
11613: PPUSH
11614: CALL_OW 262
11618: PUSH
11619: LD_VAR 0 2
11623: PPUSH
11624: CALL_OW 263
11628: PUSH
11629: LD_VAR 0 2
11633: PPUSH
11634: CALL_OW 264
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: ADD
11645: ST_TO_ADDR
11646: GO 11586
11648: POP
11649: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11650: LD_VAR 0 3
11654: PPUSH
11655: LD_STRING 07_vehicles
11657: PPUSH
11658: CALL_OW 39
// YouWin ;
11662: CALL_OW 103
// end ; end_of_file
11666: PPOPN 6
11668: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11669: LD_VAR 0 1
11673: PPUSH
11674: CALL 27987 0 1
// if un = JMM then
11678: LD_VAR 0 1
11682: PUSH
11683: LD_EXP 9
11687: EQUAL
11688: IFFALSE 11697
// YouLost ( JMM ) ;
11690: LD_STRING JMM
11692: PPUSH
11693: CALL_OW 104
// if GetType ( un ) = unit_building then
11697: LD_VAR 0 1
11701: PPUSH
11702: CALL_OW 247
11706: PUSH
11707: LD_INT 3
11709: EQUAL
11710: IFFALSE 11726
// buildings_counter := buildings_counter + 1 ;
11712: LD_ADDR_EXP 4
11716: PUSH
11717: LD_EXP 4
11721: PUSH
11722: LD_INT 1
11724: PLUS
11725: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11726: LD_VAR 0 1
11730: PUSH
11731: LD_INT 6
11733: PPUSH
11734: LD_INT 2
11736: PUSH
11737: LD_INT 30
11739: PUSH
11740: LD_INT 33
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 30
11749: PUSH
11750: LD_INT 32
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: PPUSH
11762: CALL_OW 70
11766: IN
11767: IFFALSE 11826
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11769: LD_ADDR_EXP 20
11773: PUSH
11774: LD_EXP 20
11778: PUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: CALL_OW 266
11788: PUSH
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 250
11798: PUSH
11799: LD_VAR 0 1
11803: PPUSH
11804: CALL_OW 251
11808: PUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL_OW 254
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: ADD
11825: ST_TO_ADDR
// if un = ru_dep_main then
11826: LD_VAR 0 1
11830: PUSH
11831: LD_INT 16
11833: EQUAL
11834: IFFALSE 11843
// ChangeMissionObjectives ( M1a ) ;
11836: LD_STRING M1a
11838: PPUSH
11839: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11843: LD_VAR 0 1
11847: PPUSH
11848: CALL_OW 247
11852: PUSH
11853: LD_INT 1
11855: EQUAL
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL_OW 255
11866: PUSH
11867: LD_INT 3
11869: EQUAL
11870: AND
11871: IFFALSE 11887
// kill_counter := kill_counter + 1 ;
11873: LD_ADDR_EXP 8
11877: PUSH
11878: LD_EXP 8
11882: PUSH
11883: LD_INT 1
11885: PLUS
11886: ST_TO_ADDR
// end ;
11887: PPOPN 1
11889: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: CALL 28109 0 2
// end ;
11904: PPOPN 2
11906: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11907: LD_VAR 0 1
11911: PPUSH
11912: CALL_OW 266
11916: PUSH
11917: LD_INT 32
11919: EQUAL
11920: PUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 110
11930: PUSH
11931: LD_INT 7
11933: EQUAL
11934: AND
11935: IFFALSE 11949
// SetTag ( un , 0 ) ;
11937: LD_VAR 0 1
11941: PPUSH
11942: LD_INT 0
11944: PPUSH
11945: CALL_OW 109
// end ;
11949: PPOPN 1
11951: END
// on BuildingStarted ( b , builder ) do var i ;
11952: LD_INT 0
11954: PPUSH
// begin if GetSide ( b ) = 3 then
11955: LD_VAR 0 1
11959: PPUSH
11960: CALL_OW 255
11964: PUSH
11965: LD_INT 3
11967: EQUAL
11968: IFFALSE 12008
// for i = 1 to 4 do
11970: LD_ADDR_VAR 0 3
11974: PUSH
11975: DOUBLE
11976: LD_INT 1
11978: DEC
11979: ST_TO_ADDR
11980: LD_INT 4
11982: PUSH
11983: FOR_TO
11984: IFFALSE 12006
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11986: LD_ADDR_EXP 20
11990: PUSH
11991: LD_EXP 20
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 3
12003: ST_TO_ADDR
12004: GO 11983
12006: POP
12007: POP
// end ;
12008: PPOPN 3
12010: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12011: LD_VAR 0 1
12015: PPUSH
12016: CALL_OW 266
12020: PUSH
12021: LD_INT 32
12023: PUSH
12024: LD_INT 33
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: IN
12031: IFFALSE 12045
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12033: LD_VAR 0 1
12037: PPUSH
12038: LD_INT 43
12040: PPUSH
12041: CALL_OW 148
12045: PPOPN 1
12047: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12048: LD_VAR 0 1
12052: PUSH
12053: LD_INT 22
12055: PUSH
12056: LD_INT 3
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 2
12065: PUSH
12066: LD_INT 30
12068: PUSH
12069: LD_INT 31
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 30
12078: PUSH
12079: LD_INT 32
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: CALL_OW 69
12099: IN
12100: IFFALSE 12122
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12102: LD_VAR 0 2
12106: PPUSH
12107: LD_VAR 0 1
12111: PPUSH
12112: LD_INT 134
12114: PPUSH
12115: LD_INT 136
12117: PPUSH
12118: CALL 838 0 4
// end ;
12122: PPOPN 2
12124: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12125: LD_VAR 0 1
12129: PUSH
12130: LD_INT 22
12132: PUSH
12133: LD_INT 3
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 30
12142: PUSH
12143: LD_INT 32
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 69
12158: IN
12159: IFFALSE 12173
// SetTag ( b , 0 ) ;
12161: LD_VAR 0 1
12165: PPUSH
12166: LD_INT 0
12168: PPUSH
12169: CALL_OW 109
// end ; end_of_file
12173: PPOPN 2
12175: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
12176: LD_INT 0
12178: PPUSH
// ar_miner := 81 ;
12179: LD_ADDR_EXP 28
12183: PUSH
12184: LD_INT 81
12186: ST_TO_ADDR
// ar_crane := 88 ;
12187: LD_ADDR_EXP 27
12191: PUSH
12192: LD_INT 88
12194: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12195: LD_ADDR_EXP 22
12199: PUSH
12200: LD_INT 89
12202: ST_TO_ADDR
// us_hack := 99 ;
12203: LD_ADDR_EXP 23
12207: PUSH
12208: LD_INT 99
12210: ST_TO_ADDR
// us_artillery := 97 ;
12211: LD_ADDR_EXP 24
12215: PUSH
12216: LD_INT 97
12218: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12219: LD_ADDR_EXP 25
12223: PUSH
12224: LD_INT 91
12226: ST_TO_ADDR
// ar_mortar := 92 ;
12227: LD_ADDR_EXP 26
12231: PUSH
12232: LD_INT 92
12234: ST_TO_ADDR
// ru_flamethrower := 93 ;
12235: LD_ADDR_EXP 29
12239: PUSH
12240: LD_INT 93
12242: ST_TO_ADDR
// ru_radar := 98 ;
12243: LD_ADDR_EXP 21
12247: PUSH
12248: LD_INT 98
12250: ST_TO_ADDR
// tech_Artillery := 80 ;
12251: LD_ADDR_EXP 30
12255: PUSH
12256: LD_INT 80
12258: ST_TO_ADDR
// tech_RadMat := 81 ;
12259: LD_ADDR_EXP 31
12263: PUSH
12264: LD_INT 81
12266: ST_TO_ADDR
// tech_BasicTools := 82 ;
12267: LD_ADDR_EXP 32
12271: PUSH
12272: LD_INT 82
12274: ST_TO_ADDR
// tech_Cargo := 83 ;
12275: LD_ADDR_EXP 33
12279: PUSH
12280: LD_INT 83
12282: ST_TO_ADDR
// tech_Track := 84 ;
12283: LD_ADDR_EXP 34
12287: PUSH
12288: LD_INT 84
12290: ST_TO_ADDR
// tech_Crane := 85 ;
12291: LD_ADDR_EXP 35
12295: PUSH
12296: LD_INT 85
12298: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12299: LD_ADDR_EXP 36
12303: PUSH
12304: LD_INT 86
12306: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12307: LD_ADDR_EXP 37
12311: PUSH
12312: LD_INT 87
12314: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12315: LD_ADDR_EXP 38
12319: PUSH
12320: LD_INT 88
12322: ST_TO_ADDR
// end ;
12323: LD_VAR 0 1
12327: RET
// every 1 do
12328: GO 12330
12330: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12331: CALL 12176 0 0
12335: END
// every 0 0$1 do
12336: GO 12338
12338: DISABLE
// begin enable ;
12339: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12340: LD_STRING updateTimer(
12342: PUSH
12343: LD_OWVAR 1
12347: STR
12348: PUSH
12349: LD_STRING );
12351: STR
12352: PPUSH
12353: CALL_OW 559
// end ;
12357: END
// export function SOS_MapStart ( ) ; begin
12358: LD_INT 0
12360: PPUSH
// if streamModeActive then
12361: LD_EXP 39
12365: IFFALSE 12374
// DefineStreamItems ( true ) ;
12367: LD_INT 1
12369: PPUSH
12370: CALL 14028 0 1
// UpdateFactoryWaypoints ( ) ;
12374: CALL 26889 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12378: CALL 27146 0 0
// end ;
12382: LD_VAR 0 1
12386: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12387: LD_INT 0
12389: PPUSH
// if p2 = 100 then
12390: LD_VAR 0 2
12394: PUSH
12395: LD_INT 100
12397: EQUAL
12398: IFFALSE 13401
// begin if not StreamModeActive then
12400: LD_EXP 39
12404: NOT
12405: IFFALSE 12415
// StreamModeActive := true ;
12407: LD_ADDR_EXP 39
12411: PUSH
12412: LD_INT 1
12414: ST_TO_ADDR
// if p3 = 0 then
12415: LD_VAR 0 3
12419: PUSH
12420: LD_INT 0
12422: EQUAL
12423: IFFALSE 12429
// InitStreamMode ;
12425: CALL 13564 0 0
// if p3 = 1 then
12429: LD_VAR 0 3
12433: PUSH
12434: LD_INT 1
12436: EQUAL
12437: IFFALSE 12447
// sRocket := true ;
12439: LD_ADDR_EXP 44
12443: PUSH
12444: LD_INT 1
12446: ST_TO_ADDR
// if p3 = 2 then
12447: LD_VAR 0 3
12451: PUSH
12452: LD_INT 2
12454: EQUAL
12455: IFFALSE 12465
// sSpeed := true ;
12457: LD_ADDR_EXP 43
12461: PUSH
12462: LD_INT 1
12464: ST_TO_ADDR
// if p3 = 3 then
12465: LD_VAR 0 3
12469: PUSH
12470: LD_INT 3
12472: EQUAL
12473: IFFALSE 12483
// sEngine := true ;
12475: LD_ADDR_EXP 45
12479: PUSH
12480: LD_INT 1
12482: ST_TO_ADDR
// if p3 = 4 then
12483: LD_VAR 0 3
12487: PUSH
12488: LD_INT 4
12490: EQUAL
12491: IFFALSE 12501
// sSpec := true ;
12493: LD_ADDR_EXP 42
12497: PUSH
12498: LD_INT 1
12500: ST_TO_ADDR
// if p3 = 5 then
12501: LD_VAR 0 3
12505: PUSH
12506: LD_INT 5
12508: EQUAL
12509: IFFALSE 12519
// sLevel := true ;
12511: LD_ADDR_EXP 46
12515: PUSH
12516: LD_INT 1
12518: ST_TO_ADDR
// if p3 = 6 then
12519: LD_VAR 0 3
12523: PUSH
12524: LD_INT 6
12526: EQUAL
12527: IFFALSE 12537
// sArmoury := true ;
12529: LD_ADDR_EXP 47
12533: PUSH
12534: LD_INT 1
12536: ST_TO_ADDR
// if p3 = 7 then
12537: LD_VAR 0 3
12541: PUSH
12542: LD_INT 7
12544: EQUAL
12545: IFFALSE 12555
// sRadar := true ;
12547: LD_ADDR_EXP 48
12551: PUSH
12552: LD_INT 1
12554: ST_TO_ADDR
// if p3 = 8 then
12555: LD_VAR 0 3
12559: PUSH
12560: LD_INT 8
12562: EQUAL
12563: IFFALSE 12573
// sBunker := true ;
12565: LD_ADDR_EXP 49
12569: PUSH
12570: LD_INT 1
12572: ST_TO_ADDR
// if p3 = 9 then
12573: LD_VAR 0 3
12577: PUSH
12578: LD_INT 9
12580: EQUAL
12581: IFFALSE 12591
// sHack := true ;
12583: LD_ADDR_EXP 50
12587: PUSH
12588: LD_INT 1
12590: ST_TO_ADDR
// if p3 = 10 then
12591: LD_VAR 0 3
12595: PUSH
12596: LD_INT 10
12598: EQUAL
12599: IFFALSE 12609
// sFire := true ;
12601: LD_ADDR_EXP 51
12605: PUSH
12606: LD_INT 1
12608: ST_TO_ADDR
// if p3 = 11 then
12609: LD_VAR 0 3
12613: PUSH
12614: LD_INT 11
12616: EQUAL
12617: IFFALSE 12627
// sRefresh := true ;
12619: LD_ADDR_EXP 52
12623: PUSH
12624: LD_INT 1
12626: ST_TO_ADDR
// if p3 = 12 then
12627: LD_VAR 0 3
12631: PUSH
12632: LD_INT 12
12634: EQUAL
12635: IFFALSE 12645
// sExp := true ;
12637: LD_ADDR_EXP 53
12641: PUSH
12642: LD_INT 1
12644: ST_TO_ADDR
// if p3 = 13 then
12645: LD_VAR 0 3
12649: PUSH
12650: LD_INT 13
12652: EQUAL
12653: IFFALSE 12663
// sDepot := true ;
12655: LD_ADDR_EXP 54
12659: PUSH
12660: LD_INT 1
12662: ST_TO_ADDR
// if p3 = 14 then
12663: LD_VAR 0 3
12667: PUSH
12668: LD_INT 14
12670: EQUAL
12671: IFFALSE 12681
// sFlag := true ;
12673: LD_ADDR_EXP 55
12677: PUSH
12678: LD_INT 1
12680: ST_TO_ADDR
// if p3 = 15 then
12681: LD_VAR 0 3
12685: PUSH
12686: LD_INT 15
12688: EQUAL
12689: IFFALSE 12699
// sKamikadze := true ;
12691: LD_ADDR_EXP 63
12695: PUSH
12696: LD_INT 1
12698: ST_TO_ADDR
// if p3 = 16 then
12699: LD_VAR 0 3
12703: PUSH
12704: LD_INT 16
12706: EQUAL
12707: IFFALSE 12717
// sTroll := true ;
12709: LD_ADDR_EXP 64
12713: PUSH
12714: LD_INT 1
12716: ST_TO_ADDR
// if p3 = 17 then
12717: LD_VAR 0 3
12721: PUSH
12722: LD_INT 17
12724: EQUAL
12725: IFFALSE 12735
// sSlow := true ;
12727: LD_ADDR_EXP 65
12731: PUSH
12732: LD_INT 1
12734: ST_TO_ADDR
// if p3 = 18 then
12735: LD_VAR 0 3
12739: PUSH
12740: LD_INT 18
12742: EQUAL
12743: IFFALSE 12753
// sLack := true ;
12745: LD_ADDR_EXP 66
12749: PUSH
12750: LD_INT 1
12752: ST_TO_ADDR
// if p3 = 19 then
12753: LD_VAR 0 3
12757: PUSH
12758: LD_INT 19
12760: EQUAL
12761: IFFALSE 12771
// sTank := true ;
12763: LD_ADDR_EXP 68
12767: PUSH
12768: LD_INT 1
12770: ST_TO_ADDR
// if p3 = 20 then
12771: LD_VAR 0 3
12775: PUSH
12776: LD_INT 20
12778: EQUAL
12779: IFFALSE 12789
// sRemote := true ;
12781: LD_ADDR_EXP 69
12785: PUSH
12786: LD_INT 1
12788: ST_TO_ADDR
// if p3 = 21 then
12789: LD_VAR 0 3
12793: PUSH
12794: LD_INT 21
12796: EQUAL
12797: IFFALSE 12807
// sPowell := true ;
12799: LD_ADDR_EXP 70
12803: PUSH
12804: LD_INT 1
12806: ST_TO_ADDR
// if p3 = 22 then
12807: LD_VAR 0 3
12811: PUSH
12812: LD_INT 22
12814: EQUAL
12815: IFFALSE 12825
// sTeleport := true ;
12817: LD_ADDR_EXP 73
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// if p3 = 23 then
12825: LD_VAR 0 3
12829: PUSH
12830: LD_INT 23
12832: EQUAL
12833: IFFALSE 12843
// sOilTower := true ;
12835: LD_ADDR_EXP 75
12839: PUSH
12840: LD_INT 1
12842: ST_TO_ADDR
// if p3 = 24 then
12843: LD_VAR 0 3
12847: PUSH
12848: LD_INT 24
12850: EQUAL
12851: IFFALSE 12861
// sShovel := true ;
12853: LD_ADDR_EXP 76
12857: PUSH
12858: LD_INT 1
12860: ST_TO_ADDR
// if p3 = 25 then
12861: LD_VAR 0 3
12865: PUSH
12866: LD_INT 25
12868: EQUAL
12869: IFFALSE 12879
// sSheik := true ;
12871: LD_ADDR_EXP 77
12875: PUSH
12876: LD_INT 1
12878: ST_TO_ADDR
// if p3 = 26 then
12879: LD_VAR 0 3
12883: PUSH
12884: LD_INT 26
12886: EQUAL
12887: IFFALSE 12897
// sEarthquake := true ;
12889: LD_ADDR_EXP 79
12893: PUSH
12894: LD_INT 1
12896: ST_TO_ADDR
// if p3 = 27 then
12897: LD_VAR 0 3
12901: PUSH
12902: LD_INT 27
12904: EQUAL
12905: IFFALSE 12915
// sAI := true ;
12907: LD_ADDR_EXP 80
12911: PUSH
12912: LD_INT 1
12914: ST_TO_ADDR
// if p3 = 28 then
12915: LD_VAR 0 3
12919: PUSH
12920: LD_INT 28
12922: EQUAL
12923: IFFALSE 12933
// sCargo := true ;
12925: LD_ADDR_EXP 83
12929: PUSH
12930: LD_INT 1
12932: ST_TO_ADDR
// if p3 = 29 then
12933: LD_VAR 0 3
12937: PUSH
12938: LD_INT 29
12940: EQUAL
12941: IFFALSE 12951
// sDLaser := true ;
12943: LD_ADDR_EXP 84
12947: PUSH
12948: LD_INT 1
12950: ST_TO_ADDR
// if p3 = 30 then
12951: LD_VAR 0 3
12955: PUSH
12956: LD_INT 30
12958: EQUAL
12959: IFFALSE 12969
// sExchange := true ;
12961: LD_ADDR_EXP 85
12965: PUSH
12966: LD_INT 1
12968: ST_TO_ADDR
// if p3 = 31 then
12969: LD_VAR 0 3
12973: PUSH
12974: LD_INT 31
12976: EQUAL
12977: IFFALSE 12987
// sFac := true ;
12979: LD_ADDR_EXP 86
12983: PUSH
12984: LD_INT 1
12986: ST_TO_ADDR
// if p3 = 32 then
12987: LD_VAR 0 3
12991: PUSH
12992: LD_INT 32
12994: EQUAL
12995: IFFALSE 13005
// sPower := true ;
12997: LD_ADDR_EXP 87
13001: PUSH
13002: LD_INT 1
13004: ST_TO_ADDR
// if p3 = 33 then
13005: LD_VAR 0 3
13009: PUSH
13010: LD_INT 33
13012: EQUAL
13013: IFFALSE 13023
// sRandom := true ;
13015: LD_ADDR_EXP 88
13019: PUSH
13020: LD_INT 1
13022: ST_TO_ADDR
// if p3 = 34 then
13023: LD_VAR 0 3
13027: PUSH
13028: LD_INT 34
13030: EQUAL
13031: IFFALSE 13041
// sShield := true ;
13033: LD_ADDR_EXP 89
13037: PUSH
13038: LD_INT 1
13040: ST_TO_ADDR
// if p3 = 35 then
13041: LD_VAR 0 3
13045: PUSH
13046: LD_INT 35
13048: EQUAL
13049: IFFALSE 13059
// sTime := true ;
13051: LD_ADDR_EXP 90
13055: PUSH
13056: LD_INT 1
13058: ST_TO_ADDR
// if p3 = 36 then
13059: LD_VAR 0 3
13063: PUSH
13064: LD_INT 36
13066: EQUAL
13067: IFFALSE 13077
// sTools := true ;
13069: LD_ADDR_EXP 91
13073: PUSH
13074: LD_INT 1
13076: ST_TO_ADDR
// if p3 = 101 then
13077: LD_VAR 0 3
13081: PUSH
13082: LD_INT 101
13084: EQUAL
13085: IFFALSE 13095
// sSold := true ;
13087: LD_ADDR_EXP 56
13091: PUSH
13092: LD_INT 1
13094: ST_TO_ADDR
// if p3 = 102 then
13095: LD_VAR 0 3
13099: PUSH
13100: LD_INT 102
13102: EQUAL
13103: IFFALSE 13113
// sDiff := true ;
13105: LD_ADDR_EXP 57
13109: PUSH
13110: LD_INT 1
13112: ST_TO_ADDR
// if p3 = 103 then
13113: LD_VAR 0 3
13117: PUSH
13118: LD_INT 103
13120: EQUAL
13121: IFFALSE 13131
// sFog := true ;
13123: LD_ADDR_EXP 60
13127: PUSH
13128: LD_INT 1
13130: ST_TO_ADDR
// if p3 = 104 then
13131: LD_VAR 0 3
13135: PUSH
13136: LD_INT 104
13138: EQUAL
13139: IFFALSE 13149
// sReset := true ;
13141: LD_ADDR_EXP 61
13145: PUSH
13146: LD_INT 1
13148: ST_TO_ADDR
// if p3 = 105 then
13149: LD_VAR 0 3
13153: PUSH
13154: LD_INT 105
13156: EQUAL
13157: IFFALSE 13167
// sSun := true ;
13159: LD_ADDR_EXP 62
13163: PUSH
13164: LD_INT 1
13166: ST_TO_ADDR
// if p3 = 106 then
13167: LD_VAR 0 3
13171: PUSH
13172: LD_INT 106
13174: EQUAL
13175: IFFALSE 13185
// sTiger := true ;
13177: LD_ADDR_EXP 58
13181: PUSH
13182: LD_INT 1
13184: ST_TO_ADDR
// if p3 = 107 then
13185: LD_VAR 0 3
13189: PUSH
13190: LD_INT 107
13192: EQUAL
13193: IFFALSE 13203
// sBomb := true ;
13195: LD_ADDR_EXP 59
13199: PUSH
13200: LD_INT 1
13202: ST_TO_ADDR
// if p3 = 108 then
13203: LD_VAR 0 3
13207: PUSH
13208: LD_INT 108
13210: EQUAL
13211: IFFALSE 13221
// sWound := true ;
13213: LD_ADDR_EXP 67
13217: PUSH
13218: LD_INT 1
13220: ST_TO_ADDR
// if p3 = 109 then
13221: LD_VAR 0 3
13225: PUSH
13226: LD_INT 109
13228: EQUAL
13229: IFFALSE 13239
// sBetray := true ;
13231: LD_ADDR_EXP 71
13235: PUSH
13236: LD_INT 1
13238: ST_TO_ADDR
// if p3 = 110 then
13239: LD_VAR 0 3
13243: PUSH
13244: LD_INT 110
13246: EQUAL
13247: IFFALSE 13257
// sContamin := true ;
13249: LD_ADDR_EXP 72
13253: PUSH
13254: LD_INT 1
13256: ST_TO_ADDR
// if p3 = 111 then
13257: LD_VAR 0 3
13261: PUSH
13262: LD_INT 111
13264: EQUAL
13265: IFFALSE 13275
// sOil := true ;
13267: LD_ADDR_EXP 74
13271: PUSH
13272: LD_INT 1
13274: ST_TO_ADDR
// if p3 = 112 then
13275: LD_VAR 0 3
13279: PUSH
13280: LD_INT 112
13282: EQUAL
13283: IFFALSE 13293
// sStu := true ;
13285: LD_ADDR_EXP 78
13289: PUSH
13290: LD_INT 1
13292: ST_TO_ADDR
// if p3 = 113 then
13293: LD_VAR 0 3
13297: PUSH
13298: LD_INT 113
13300: EQUAL
13301: IFFALSE 13311
// sBazooka := true ;
13303: LD_ADDR_EXP 81
13307: PUSH
13308: LD_INT 1
13310: ST_TO_ADDR
// if p3 = 114 then
13311: LD_VAR 0 3
13315: PUSH
13316: LD_INT 114
13318: EQUAL
13319: IFFALSE 13329
// sMortar := true ;
13321: LD_ADDR_EXP 82
13325: PUSH
13326: LD_INT 1
13328: ST_TO_ADDR
// if p3 = 115 then
13329: LD_VAR 0 3
13333: PUSH
13334: LD_INT 115
13336: EQUAL
13337: IFFALSE 13347
// sRanger := true ;
13339: LD_ADDR_EXP 92
13343: PUSH
13344: LD_INT 1
13346: ST_TO_ADDR
// if p3 = 116 then
13347: LD_VAR 0 3
13351: PUSH
13352: LD_INT 116
13354: EQUAL
13355: IFFALSE 13365
// sComputer := true ;
13357: LD_ADDR_EXP 93
13361: PUSH
13362: LD_INT 1
13364: ST_TO_ADDR
// if p3 = 117 then
13365: LD_VAR 0 3
13369: PUSH
13370: LD_INT 117
13372: EQUAL
13373: IFFALSE 13383
// s30 := true ;
13375: LD_ADDR_EXP 94
13379: PUSH
13380: LD_INT 1
13382: ST_TO_ADDR
// if p3 = 118 then
13383: LD_VAR 0 3
13387: PUSH
13388: LD_INT 118
13390: EQUAL
13391: IFFALSE 13401
// s60 := true ;
13393: LD_ADDR_EXP 95
13397: PUSH
13398: LD_INT 1
13400: ST_TO_ADDR
// end ; if p2 = 101 then
13401: LD_VAR 0 2
13405: PUSH
13406: LD_INT 101
13408: EQUAL
13409: IFFALSE 13537
// begin case p3 of 1 :
13411: LD_VAR 0 3
13415: PUSH
13416: LD_INT 1
13418: DOUBLE
13419: EQUAL
13420: IFTRUE 13424
13422: GO 13431
13424: POP
// hHackUnlimitedResources ; 2 :
13425: CALL 25635 0 0
13429: GO 13537
13431: LD_INT 2
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13446
13439: POP
// hHackSetLevel10 ; 3 :
13440: CALL 25768 0 0
13444: GO 13537
13446: LD_INT 3
13448: DOUBLE
13449: EQUAL
13450: IFTRUE 13454
13452: GO 13461
13454: POP
// hHackSetLevel10YourUnits ; 4 :
13455: CALL 25853 0 0
13459: GO 13537
13461: LD_INT 4
13463: DOUBLE
13464: EQUAL
13465: IFTRUE 13469
13467: GO 13476
13469: POP
// hHackInvincible ; 5 :
13470: CALL 26301 0 0
13474: GO 13537
13476: LD_INT 5
13478: DOUBLE
13479: EQUAL
13480: IFTRUE 13484
13482: GO 13491
13484: POP
// hHackInvisible ; 6 :
13485: CALL 26412 0 0
13489: GO 13537
13491: LD_INT 6
13493: DOUBLE
13494: EQUAL
13495: IFTRUE 13499
13497: GO 13506
13499: POP
// hHackChangeYourSide ; 7 :
13500: CALL 26469 0 0
13504: GO 13537
13506: LD_INT 7
13508: DOUBLE
13509: EQUAL
13510: IFTRUE 13514
13512: GO 13521
13514: POP
// hHackChangeUnitSide ; 8 :
13515: CALL 26511 0 0
13519: GO 13537
13521: LD_INT 8
13523: DOUBLE
13524: EQUAL
13525: IFTRUE 13529
13527: GO 13536
13529: POP
// hHackFog ; end ;
13530: CALL 26612 0 0
13534: GO 13537
13536: POP
// end ; end ;
13537: LD_VAR 0 7
13541: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13542: GO 13544
13544: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13545: LD_STRING initStreamRollete();
13547: PPUSH
13548: CALL_OW 559
// InitStreamMode ;
13552: CALL 13564 0 0
// DefineStreamItems ( false ) ;
13556: LD_INT 0
13558: PPUSH
13559: CALL 14028 0 1
// end ;
13563: END
// function InitStreamMode ; begin
13564: LD_INT 0
13566: PPUSH
// streamModeActive := false ;
13567: LD_ADDR_EXP 39
13571: PUSH
13572: LD_INT 0
13574: ST_TO_ADDR
// normalCounter := 36 ;
13575: LD_ADDR_EXP 40
13579: PUSH
13580: LD_INT 36
13582: ST_TO_ADDR
// hardcoreCounter := 18 ;
13583: LD_ADDR_EXP 41
13587: PUSH
13588: LD_INT 18
13590: ST_TO_ADDR
// sRocket := false ;
13591: LD_ADDR_EXP 44
13595: PUSH
13596: LD_INT 0
13598: ST_TO_ADDR
// sSpeed := false ;
13599: LD_ADDR_EXP 43
13603: PUSH
13604: LD_INT 0
13606: ST_TO_ADDR
// sEngine := false ;
13607: LD_ADDR_EXP 45
13611: PUSH
13612: LD_INT 0
13614: ST_TO_ADDR
// sSpec := false ;
13615: LD_ADDR_EXP 42
13619: PUSH
13620: LD_INT 0
13622: ST_TO_ADDR
// sLevel := false ;
13623: LD_ADDR_EXP 46
13627: PUSH
13628: LD_INT 0
13630: ST_TO_ADDR
// sArmoury := false ;
13631: LD_ADDR_EXP 47
13635: PUSH
13636: LD_INT 0
13638: ST_TO_ADDR
// sRadar := false ;
13639: LD_ADDR_EXP 48
13643: PUSH
13644: LD_INT 0
13646: ST_TO_ADDR
// sBunker := false ;
13647: LD_ADDR_EXP 49
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// sHack := false ;
13655: LD_ADDR_EXP 50
13659: PUSH
13660: LD_INT 0
13662: ST_TO_ADDR
// sFire := false ;
13663: LD_ADDR_EXP 51
13667: PUSH
13668: LD_INT 0
13670: ST_TO_ADDR
// sRefresh := false ;
13671: LD_ADDR_EXP 52
13675: PUSH
13676: LD_INT 0
13678: ST_TO_ADDR
// sExp := false ;
13679: LD_ADDR_EXP 53
13683: PUSH
13684: LD_INT 0
13686: ST_TO_ADDR
// sDepot := false ;
13687: LD_ADDR_EXP 54
13691: PUSH
13692: LD_INT 0
13694: ST_TO_ADDR
// sFlag := false ;
13695: LD_ADDR_EXP 55
13699: PUSH
13700: LD_INT 0
13702: ST_TO_ADDR
// sKamikadze := false ;
13703: LD_ADDR_EXP 63
13707: PUSH
13708: LD_INT 0
13710: ST_TO_ADDR
// sTroll := false ;
13711: LD_ADDR_EXP 64
13715: PUSH
13716: LD_INT 0
13718: ST_TO_ADDR
// sSlow := false ;
13719: LD_ADDR_EXP 65
13723: PUSH
13724: LD_INT 0
13726: ST_TO_ADDR
// sLack := false ;
13727: LD_ADDR_EXP 66
13731: PUSH
13732: LD_INT 0
13734: ST_TO_ADDR
// sTank := false ;
13735: LD_ADDR_EXP 68
13739: PUSH
13740: LD_INT 0
13742: ST_TO_ADDR
// sRemote := false ;
13743: LD_ADDR_EXP 69
13747: PUSH
13748: LD_INT 0
13750: ST_TO_ADDR
// sPowell := false ;
13751: LD_ADDR_EXP 70
13755: PUSH
13756: LD_INT 0
13758: ST_TO_ADDR
// sTeleport := false ;
13759: LD_ADDR_EXP 73
13763: PUSH
13764: LD_INT 0
13766: ST_TO_ADDR
// sOilTower := false ;
13767: LD_ADDR_EXP 75
13771: PUSH
13772: LD_INT 0
13774: ST_TO_ADDR
// sShovel := false ;
13775: LD_ADDR_EXP 76
13779: PUSH
13780: LD_INT 0
13782: ST_TO_ADDR
// sSheik := false ;
13783: LD_ADDR_EXP 77
13787: PUSH
13788: LD_INT 0
13790: ST_TO_ADDR
// sEarthquake := false ;
13791: LD_ADDR_EXP 79
13795: PUSH
13796: LD_INT 0
13798: ST_TO_ADDR
// sAI := false ;
13799: LD_ADDR_EXP 80
13803: PUSH
13804: LD_INT 0
13806: ST_TO_ADDR
// sCargo := false ;
13807: LD_ADDR_EXP 83
13811: PUSH
13812: LD_INT 0
13814: ST_TO_ADDR
// sDLaser := false ;
13815: LD_ADDR_EXP 84
13819: PUSH
13820: LD_INT 0
13822: ST_TO_ADDR
// sExchange := false ;
13823: LD_ADDR_EXP 85
13827: PUSH
13828: LD_INT 0
13830: ST_TO_ADDR
// sFac := false ;
13831: LD_ADDR_EXP 86
13835: PUSH
13836: LD_INT 0
13838: ST_TO_ADDR
// sPower := false ;
13839: LD_ADDR_EXP 87
13843: PUSH
13844: LD_INT 0
13846: ST_TO_ADDR
// sRandom := false ;
13847: LD_ADDR_EXP 88
13851: PUSH
13852: LD_INT 0
13854: ST_TO_ADDR
// sShield := false ;
13855: LD_ADDR_EXP 89
13859: PUSH
13860: LD_INT 0
13862: ST_TO_ADDR
// sTime := false ;
13863: LD_ADDR_EXP 90
13867: PUSH
13868: LD_INT 0
13870: ST_TO_ADDR
// sTools := false ;
13871: LD_ADDR_EXP 91
13875: PUSH
13876: LD_INT 0
13878: ST_TO_ADDR
// sSold := false ;
13879: LD_ADDR_EXP 56
13883: PUSH
13884: LD_INT 0
13886: ST_TO_ADDR
// sDiff := false ;
13887: LD_ADDR_EXP 57
13891: PUSH
13892: LD_INT 0
13894: ST_TO_ADDR
// sFog := false ;
13895: LD_ADDR_EXP 60
13899: PUSH
13900: LD_INT 0
13902: ST_TO_ADDR
// sReset := false ;
13903: LD_ADDR_EXP 61
13907: PUSH
13908: LD_INT 0
13910: ST_TO_ADDR
// sSun := false ;
13911: LD_ADDR_EXP 62
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// sTiger := false ;
13919: LD_ADDR_EXP 58
13923: PUSH
13924: LD_INT 0
13926: ST_TO_ADDR
// sBomb := false ;
13927: LD_ADDR_EXP 59
13931: PUSH
13932: LD_INT 0
13934: ST_TO_ADDR
// sWound := false ;
13935: LD_ADDR_EXP 67
13939: PUSH
13940: LD_INT 0
13942: ST_TO_ADDR
// sBetray := false ;
13943: LD_ADDR_EXP 71
13947: PUSH
13948: LD_INT 0
13950: ST_TO_ADDR
// sContamin := false ;
13951: LD_ADDR_EXP 72
13955: PUSH
13956: LD_INT 0
13958: ST_TO_ADDR
// sOil := false ;
13959: LD_ADDR_EXP 74
13963: PUSH
13964: LD_INT 0
13966: ST_TO_ADDR
// sStu := false ;
13967: LD_ADDR_EXP 78
13971: PUSH
13972: LD_INT 0
13974: ST_TO_ADDR
// sBazooka := false ;
13975: LD_ADDR_EXP 81
13979: PUSH
13980: LD_INT 0
13982: ST_TO_ADDR
// sMortar := false ;
13983: LD_ADDR_EXP 82
13987: PUSH
13988: LD_INT 0
13990: ST_TO_ADDR
// sRanger := false ;
13991: LD_ADDR_EXP 92
13995: PUSH
13996: LD_INT 0
13998: ST_TO_ADDR
// sComputer := false ;
13999: LD_ADDR_EXP 93
14003: PUSH
14004: LD_INT 0
14006: ST_TO_ADDR
// s30 := false ;
14007: LD_ADDR_EXP 94
14011: PUSH
14012: LD_INT 0
14014: ST_TO_ADDR
// s60 := false ;
14015: LD_ADDR_EXP 95
14019: PUSH
14020: LD_INT 0
14022: ST_TO_ADDR
// end ;
14023: LD_VAR 0 1
14027: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14028: LD_INT 0
14030: PPUSH
14031: PPUSH
14032: PPUSH
14033: PPUSH
14034: PPUSH
14035: PPUSH
14036: PPUSH
// result := [ ] ;
14037: LD_ADDR_VAR 0 2
14041: PUSH
14042: EMPTY
14043: ST_TO_ADDR
// if campaign_id = 1 then
14044: LD_OWVAR 69
14048: PUSH
14049: LD_INT 1
14051: EQUAL
14052: IFFALSE 17218
// begin case mission_number of 1 :
14054: LD_OWVAR 70
14058: PUSH
14059: LD_INT 1
14061: DOUBLE
14062: EQUAL
14063: IFTRUE 14067
14065: GO 14143
14067: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14068: LD_ADDR_VAR 0 2
14072: PUSH
14073: LD_INT 2
14075: PUSH
14076: LD_INT 4
14078: PUSH
14079: LD_INT 11
14081: PUSH
14082: LD_INT 12
14084: PUSH
14085: LD_INT 15
14087: PUSH
14088: LD_INT 16
14090: PUSH
14091: LD_INT 22
14093: PUSH
14094: LD_INT 23
14096: PUSH
14097: LD_INT 26
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 101
14113: PUSH
14114: LD_INT 102
14116: PUSH
14117: LD_INT 106
14119: PUSH
14120: LD_INT 116
14122: PUSH
14123: LD_INT 117
14125: PUSH
14126: LD_INT 118
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: ST_TO_ADDR
14141: GO 17216
14143: LD_INT 2
14145: DOUBLE
14146: EQUAL
14147: IFTRUE 14151
14149: GO 14235
14151: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14152: LD_ADDR_VAR 0 2
14156: PUSH
14157: LD_INT 2
14159: PUSH
14160: LD_INT 4
14162: PUSH
14163: LD_INT 11
14165: PUSH
14166: LD_INT 12
14168: PUSH
14169: LD_INT 15
14171: PUSH
14172: LD_INT 16
14174: PUSH
14175: LD_INT 22
14177: PUSH
14178: LD_INT 23
14180: PUSH
14181: LD_INT 26
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 101
14197: PUSH
14198: LD_INT 102
14200: PUSH
14201: LD_INT 105
14203: PUSH
14204: LD_INT 106
14206: PUSH
14207: LD_INT 108
14209: PUSH
14210: LD_INT 116
14212: PUSH
14213: LD_INT 117
14215: PUSH
14216: LD_INT 118
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: ST_TO_ADDR
14233: GO 17216
14235: LD_INT 3
14237: DOUBLE
14238: EQUAL
14239: IFTRUE 14243
14241: GO 14331
14243: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14244: LD_ADDR_VAR 0 2
14248: PUSH
14249: LD_INT 2
14251: PUSH
14252: LD_INT 4
14254: PUSH
14255: LD_INT 5
14257: PUSH
14258: LD_INT 11
14260: PUSH
14261: LD_INT 12
14263: PUSH
14264: LD_INT 15
14266: PUSH
14267: LD_INT 16
14269: PUSH
14270: LD_INT 22
14272: PUSH
14273: LD_INT 26
14275: PUSH
14276: LD_INT 36
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 101
14293: PUSH
14294: LD_INT 102
14296: PUSH
14297: LD_INT 105
14299: PUSH
14300: LD_INT 106
14302: PUSH
14303: LD_INT 108
14305: PUSH
14306: LD_INT 116
14308: PUSH
14309: LD_INT 117
14311: PUSH
14312: LD_INT 118
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: ST_TO_ADDR
14329: GO 17216
14331: LD_INT 4
14333: DOUBLE
14334: EQUAL
14335: IFTRUE 14339
14337: GO 14435
14339: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14340: LD_ADDR_VAR 0 2
14344: PUSH
14345: LD_INT 2
14347: PUSH
14348: LD_INT 4
14350: PUSH
14351: LD_INT 5
14353: PUSH
14354: LD_INT 8
14356: PUSH
14357: LD_INT 11
14359: PUSH
14360: LD_INT 12
14362: PUSH
14363: LD_INT 15
14365: PUSH
14366: LD_INT 16
14368: PUSH
14369: LD_INT 22
14371: PUSH
14372: LD_INT 23
14374: PUSH
14375: LD_INT 26
14377: PUSH
14378: LD_INT 36
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 101
14397: PUSH
14398: LD_INT 102
14400: PUSH
14401: LD_INT 105
14403: PUSH
14404: LD_INT 106
14406: PUSH
14407: LD_INT 108
14409: PUSH
14410: LD_INT 116
14412: PUSH
14413: LD_INT 117
14415: PUSH
14416: LD_INT 118
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: ST_TO_ADDR
14433: GO 17216
14435: LD_INT 5
14437: DOUBLE
14438: EQUAL
14439: IFTRUE 14443
14441: GO 14555
14443: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14444: LD_ADDR_VAR 0 2
14448: PUSH
14449: LD_INT 2
14451: PUSH
14452: LD_INT 4
14454: PUSH
14455: LD_INT 5
14457: PUSH
14458: LD_INT 6
14460: PUSH
14461: LD_INT 8
14463: PUSH
14464: LD_INT 11
14466: PUSH
14467: LD_INT 12
14469: PUSH
14470: LD_INT 15
14472: PUSH
14473: LD_INT 16
14475: PUSH
14476: LD_INT 22
14478: PUSH
14479: LD_INT 23
14481: PUSH
14482: LD_INT 25
14484: PUSH
14485: LD_INT 26
14487: PUSH
14488: LD_INT 36
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 101
14509: PUSH
14510: LD_INT 102
14512: PUSH
14513: LD_INT 105
14515: PUSH
14516: LD_INT 106
14518: PUSH
14519: LD_INT 108
14521: PUSH
14522: LD_INT 109
14524: PUSH
14525: LD_INT 112
14527: PUSH
14528: LD_INT 116
14530: PUSH
14531: LD_INT 117
14533: PUSH
14534: LD_INT 118
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: ST_TO_ADDR
14553: GO 17216
14555: LD_INT 6
14557: DOUBLE
14558: EQUAL
14559: IFTRUE 14563
14561: GO 14695
14563: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14564: LD_ADDR_VAR 0 2
14568: PUSH
14569: LD_INT 2
14571: PUSH
14572: LD_INT 4
14574: PUSH
14575: LD_INT 5
14577: PUSH
14578: LD_INT 6
14580: PUSH
14581: LD_INT 8
14583: PUSH
14584: LD_INT 11
14586: PUSH
14587: LD_INT 12
14589: PUSH
14590: LD_INT 15
14592: PUSH
14593: LD_INT 16
14595: PUSH
14596: LD_INT 20
14598: PUSH
14599: LD_INT 21
14601: PUSH
14602: LD_INT 22
14604: PUSH
14605: LD_INT 23
14607: PUSH
14608: LD_INT 25
14610: PUSH
14611: LD_INT 26
14613: PUSH
14614: LD_INT 30
14616: PUSH
14617: LD_INT 31
14619: PUSH
14620: LD_INT 32
14622: PUSH
14623: LD_INT 36
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 101
14649: PUSH
14650: LD_INT 102
14652: PUSH
14653: LD_INT 105
14655: PUSH
14656: LD_INT 106
14658: PUSH
14659: LD_INT 108
14661: PUSH
14662: LD_INT 109
14664: PUSH
14665: LD_INT 112
14667: PUSH
14668: LD_INT 116
14670: PUSH
14671: LD_INT 117
14673: PUSH
14674: LD_INT 118
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: ST_TO_ADDR
14693: GO 17216
14695: LD_INT 7
14697: DOUBLE
14698: EQUAL
14699: IFTRUE 14703
14701: GO 14815
14703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14704: LD_ADDR_VAR 0 2
14708: PUSH
14709: LD_INT 2
14711: PUSH
14712: LD_INT 4
14714: PUSH
14715: LD_INT 5
14717: PUSH
14718: LD_INT 7
14720: PUSH
14721: LD_INT 11
14723: PUSH
14724: LD_INT 12
14726: PUSH
14727: LD_INT 15
14729: PUSH
14730: LD_INT 16
14732: PUSH
14733: LD_INT 20
14735: PUSH
14736: LD_INT 21
14738: PUSH
14739: LD_INT 22
14741: PUSH
14742: LD_INT 23
14744: PUSH
14745: LD_INT 25
14747: PUSH
14748: LD_INT 26
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 101
14769: PUSH
14770: LD_INT 102
14772: PUSH
14773: LD_INT 103
14775: PUSH
14776: LD_INT 105
14778: PUSH
14779: LD_INT 106
14781: PUSH
14782: LD_INT 108
14784: PUSH
14785: LD_INT 112
14787: PUSH
14788: LD_INT 116
14790: PUSH
14791: LD_INT 117
14793: PUSH
14794: LD_INT 118
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: ST_TO_ADDR
14813: GO 17216
14815: LD_INT 8
14817: DOUBLE
14818: EQUAL
14819: IFTRUE 14823
14821: GO 14963
14823: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14824: LD_ADDR_VAR 0 2
14828: PUSH
14829: LD_INT 2
14831: PUSH
14832: LD_INT 4
14834: PUSH
14835: LD_INT 5
14837: PUSH
14838: LD_INT 6
14840: PUSH
14841: LD_INT 7
14843: PUSH
14844: LD_INT 8
14846: PUSH
14847: LD_INT 11
14849: PUSH
14850: LD_INT 12
14852: PUSH
14853: LD_INT 15
14855: PUSH
14856: LD_INT 16
14858: PUSH
14859: LD_INT 20
14861: PUSH
14862: LD_INT 21
14864: PUSH
14865: LD_INT 22
14867: PUSH
14868: LD_INT 23
14870: PUSH
14871: LD_INT 25
14873: PUSH
14874: LD_INT 26
14876: PUSH
14877: LD_INT 30
14879: PUSH
14880: LD_INT 31
14882: PUSH
14883: LD_INT 32
14885: PUSH
14886: LD_INT 36
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 101
14913: PUSH
14914: LD_INT 102
14916: PUSH
14917: LD_INT 103
14919: PUSH
14920: LD_INT 105
14922: PUSH
14923: LD_INT 106
14925: PUSH
14926: LD_INT 108
14928: PUSH
14929: LD_INT 109
14931: PUSH
14932: LD_INT 112
14934: PUSH
14935: LD_INT 116
14937: PUSH
14938: LD_INT 117
14940: PUSH
14941: LD_INT 118
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: ST_TO_ADDR
14961: GO 17216
14963: LD_INT 9
14965: DOUBLE
14966: EQUAL
14967: IFTRUE 14971
14969: GO 15119
14971: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14972: LD_ADDR_VAR 0 2
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: LD_INT 4
14982: PUSH
14983: LD_INT 5
14985: PUSH
14986: LD_INT 6
14988: PUSH
14989: LD_INT 7
14991: PUSH
14992: LD_INT 8
14994: PUSH
14995: LD_INT 11
14997: PUSH
14998: LD_INT 12
15000: PUSH
15001: LD_INT 15
15003: PUSH
15004: LD_INT 16
15006: PUSH
15007: LD_INT 20
15009: PUSH
15010: LD_INT 21
15012: PUSH
15013: LD_INT 22
15015: PUSH
15016: LD_INT 23
15018: PUSH
15019: LD_INT 25
15021: PUSH
15022: LD_INT 26
15024: PUSH
15025: LD_INT 28
15027: PUSH
15028: LD_INT 30
15030: PUSH
15031: LD_INT 31
15033: PUSH
15034: LD_INT 32
15036: PUSH
15037: LD_INT 36
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 101
15065: PUSH
15066: LD_INT 102
15068: PUSH
15069: LD_INT 103
15071: PUSH
15072: LD_INT 105
15074: PUSH
15075: LD_INT 106
15077: PUSH
15078: LD_INT 108
15080: PUSH
15081: LD_INT 109
15083: PUSH
15084: LD_INT 112
15086: PUSH
15087: LD_INT 114
15089: PUSH
15090: LD_INT 116
15092: PUSH
15093: LD_INT 117
15095: PUSH
15096: LD_INT 118
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: ST_TO_ADDR
15117: GO 17216
15119: LD_INT 10
15121: DOUBLE
15122: EQUAL
15123: IFTRUE 15127
15125: GO 15323
15127: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15128: LD_ADDR_VAR 0 2
15132: PUSH
15133: LD_INT 2
15135: PUSH
15136: LD_INT 4
15138: PUSH
15139: LD_INT 5
15141: PUSH
15142: LD_INT 6
15144: PUSH
15145: LD_INT 7
15147: PUSH
15148: LD_INT 8
15150: PUSH
15151: LD_INT 9
15153: PUSH
15154: LD_INT 10
15156: PUSH
15157: LD_INT 11
15159: PUSH
15160: LD_INT 12
15162: PUSH
15163: LD_INT 13
15165: PUSH
15166: LD_INT 14
15168: PUSH
15169: LD_INT 15
15171: PUSH
15172: LD_INT 16
15174: PUSH
15175: LD_INT 17
15177: PUSH
15178: LD_INT 18
15180: PUSH
15181: LD_INT 19
15183: PUSH
15184: LD_INT 20
15186: PUSH
15187: LD_INT 21
15189: PUSH
15190: LD_INT 22
15192: PUSH
15193: LD_INT 23
15195: PUSH
15196: LD_INT 24
15198: PUSH
15199: LD_INT 25
15201: PUSH
15202: LD_INT 26
15204: PUSH
15205: LD_INT 28
15207: PUSH
15208: LD_INT 30
15210: PUSH
15211: LD_INT 31
15213: PUSH
15214: LD_INT 32
15216: PUSH
15217: LD_INT 36
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 101
15253: PUSH
15254: LD_INT 102
15256: PUSH
15257: LD_INT 103
15259: PUSH
15260: LD_INT 104
15262: PUSH
15263: LD_INT 105
15265: PUSH
15266: LD_INT 106
15268: PUSH
15269: LD_INT 107
15271: PUSH
15272: LD_INT 108
15274: PUSH
15275: LD_INT 109
15277: PUSH
15278: LD_INT 110
15280: PUSH
15281: LD_INT 111
15283: PUSH
15284: LD_INT 112
15286: PUSH
15287: LD_INT 114
15289: PUSH
15290: LD_INT 116
15292: PUSH
15293: LD_INT 117
15295: PUSH
15296: LD_INT 118
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: ST_TO_ADDR
15321: GO 17216
15323: LD_INT 11
15325: DOUBLE
15326: EQUAL
15327: IFTRUE 15331
15329: GO 15535
15331: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15332: LD_ADDR_VAR 0 2
15336: PUSH
15337: LD_INT 2
15339: PUSH
15340: LD_INT 3
15342: PUSH
15343: LD_INT 4
15345: PUSH
15346: LD_INT 5
15348: PUSH
15349: LD_INT 6
15351: PUSH
15352: LD_INT 7
15354: PUSH
15355: LD_INT 8
15357: PUSH
15358: LD_INT 9
15360: PUSH
15361: LD_INT 10
15363: PUSH
15364: LD_INT 11
15366: PUSH
15367: LD_INT 12
15369: PUSH
15370: LD_INT 13
15372: PUSH
15373: LD_INT 14
15375: PUSH
15376: LD_INT 15
15378: PUSH
15379: LD_INT 16
15381: PUSH
15382: LD_INT 17
15384: PUSH
15385: LD_INT 18
15387: PUSH
15388: LD_INT 19
15390: PUSH
15391: LD_INT 20
15393: PUSH
15394: LD_INT 21
15396: PUSH
15397: LD_INT 22
15399: PUSH
15400: LD_INT 23
15402: PUSH
15403: LD_INT 24
15405: PUSH
15406: LD_INT 25
15408: PUSH
15409: LD_INT 26
15411: PUSH
15412: LD_INT 28
15414: PUSH
15415: LD_INT 30
15417: PUSH
15418: LD_INT 31
15420: PUSH
15421: LD_INT 32
15423: PUSH
15424: LD_INT 34
15426: PUSH
15427: LD_INT 36
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 101
15465: PUSH
15466: LD_INT 102
15468: PUSH
15469: LD_INT 103
15471: PUSH
15472: LD_INT 104
15474: PUSH
15475: LD_INT 105
15477: PUSH
15478: LD_INT 106
15480: PUSH
15481: LD_INT 107
15483: PUSH
15484: LD_INT 108
15486: PUSH
15487: LD_INT 109
15489: PUSH
15490: LD_INT 110
15492: PUSH
15493: LD_INT 111
15495: PUSH
15496: LD_INT 112
15498: PUSH
15499: LD_INT 114
15501: PUSH
15502: LD_INT 116
15504: PUSH
15505: LD_INT 117
15507: PUSH
15508: LD_INT 118
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: ST_TO_ADDR
15533: GO 17216
15535: LD_INT 12
15537: DOUBLE
15538: EQUAL
15539: IFTRUE 15543
15541: GO 15763
15543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15544: LD_ADDR_VAR 0 2
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: LD_INT 2
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: LD_INT 4
15560: PUSH
15561: LD_INT 5
15563: PUSH
15564: LD_INT 6
15566: PUSH
15567: LD_INT 7
15569: PUSH
15570: LD_INT 8
15572: PUSH
15573: LD_INT 9
15575: PUSH
15576: LD_INT 10
15578: PUSH
15579: LD_INT 11
15581: PUSH
15582: LD_INT 12
15584: PUSH
15585: LD_INT 13
15587: PUSH
15588: LD_INT 14
15590: PUSH
15591: LD_INT 15
15593: PUSH
15594: LD_INT 16
15596: PUSH
15597: LD_INT 17
15599: PUSH
15600: LD_INT 18
15602: PUSH
15603: LD_INT 19
15605: PUSH
15606: LD_INT 20
15608: PUSH
15609: LD_INT 21
15611: PUSH
15612: LD_INT 22
15614: PUSH
15615: LD_INT 23
15617: PUSH
15618: LD_INT 24
15620: PUSH
15621: LD_INT 25
15623: PUSH
15624: LD_INT 26
15626: PUSH
15627: LD_INT 27
15629: PUSH
15630: LD_INT 28
15632: PUSH
15633: LD_INT 30
15635: PUSH
15636: LD_INT 31
15638: PUSH
15639: LD_INT 32
15641: PUSH
15642: LD_INT 33
15644: PUSH
15645: LD_INT 34
15647: PUSH
15648: LD_INT 36
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 101
15689: PUSH
15690: LD_INT 102
15692: PUSH
15693: LD_INT 103
15695: PUSH
15696: LD_INT 104
15698: PUSH
15699: LD_INT 105
15701: PUSH
15702: LD_INT 106
15704: PUSH
15705: LD_INT 107
15707: PUSH
15708: LD_INT 108
15710: PUSH
15711: LD_INT 109
15713: PUSH
15714: LD_INT 110
15716: PUSH
15717: LD_INT 111
15719: PUSH
15720: LD_INT 112
15722: PUSH
15723: LD_INT 113
15725: PUSH
15726: LD_INT 114
15728: PUSH
15729: LD_INT 116
15731: PUSH
15732: LD_INT 117
15734: PUSH
15735: LD_INT 118
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: ST_TO_ADDR
15761: GO 17216
15763: LD_INT 13
15765: DOUBLE
15766: EQUAL
15767: IFTRUE 15771
15769: GO 15979
15771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15772: LD_ADDR_VAR 0 2
15776: PUSH
15777: LD_INT 1
15779: PUSH
15780: LD_INT 2
15782: PUSH
15783: LD_INT 3
15785: PUSH
15786: LD_INT 4
15788: PUSH
15789: LD_INT 5
15791: PUSH
15792: LD_INT 8
15794: PUSH
15795: LD_INT 9
15797: PUSH
15798: LD_INT 10
15800: PUSH
15801: LD_INT 11
15803: PUSH
15804: LD_INT 12
15806: PUSH
15807: LD_INT 14
15809: PUSH
15810: LD_INT 15
15812: PUSH
15813: LD_INT 16
15815: PUSH
15816: LD_INT 17
15818: PUSH
15819: LD_INT 18
15821: PUSH
15822: LD_INT 19
15824: PUSH
15825: LD_INT 20
15827: PUSH
15828: LD_INT 21
15830: PUSH
15831: LD_INT 22
15833: PUSH
15834: LD_INT 23
15836: PUSH
15837: LD_INT 24
15839: PUSH
15840: LD_INT 25
15842: PUSH
15843: LD_INT 26
15845: PUSH
15846: LD_INT 27
15848: PUSH
15849: LD_INT 28
15851: PUSH
15852: LD_INT 30
15854: PUSH
15855: LD_INT 31
15857: PUSH
15858: LD_INT 32
15860: PUSH
15861: LD_INT 33
15863: PUSH
15864: LD_INT 34
15866: PUSH
15867: LD_INT 36
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 101
15905: PUSH
15906: LD_INT 102
15908: PUSH
15909: LD_INT 103
15911: PUSH
15912: LD_INT 104
15914: PUSH
15915: LD_INT 105
15917: PUSH
15918: LD_INT 106
15920: PUSH
15921: LD_INT 107
15923: PUSH
15924: LD_INT 108
15926: PUSH
15927: LD_INT 109
15929: PUSH
15930: LD_INT 110
15932: PUSH
15933: LD_INT 111
15935: PUSH
15936: LD_INT 112
15938: PUSH
15939: LD_INT 113
15941: PUSH
15942: LD_INT 114
15944: PUSH
15945: LD_INT 116
15947: PUSH
15948: LD_INT 117
15950: PUSH
15951: LD_INT 118
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: ST_TO_ADDR
15977: GO 17216
15979: LD_INT 14
15981: DOUBLE
15982: EQUAL
15983: IFTRUE 15987
15985: GO 16211
15987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15988: LD_ADDR_VAR 0 2
15992: PUSH
15993: LD_INT 1
15995: PUSH
15996: LD_INT 2
15998: PUSH
15999: LD_INT 3
16001: PUSH
16002: LD_INT 4
16004: PUSH
16005: LD_INT 5
16007: PUSH
16008: LD_INT 6
16010: PUSH
16011: LD_INT 7
16013: PUSH
16014: LD_INT 8
16016: PUSH
16017: LD_INT 9
16019: PUSH
16020: LD_INT 10
16022: PUSH
16023: LD_INT 11
16025: PUSH
16026: LD_INT 12
16028: PUSH
16029: LD_INT 13
16031: PUSH
16032: LD_INT 14
16034: PUSH
16035: LD_INT 15
16037: PUSH
16038: LD_INT 16
16040: PUSH
16041: LD_INT 17
16043: PUSH
16044: LD_INT 18
16046: PUSH
16047: LD_INT 19
16049: PUSH
16050: LD_INT 20
16052: PUSH
16053: LD_INT 21
16055: PUSH
16056: LD_INT 22
16058: PUSH
16059: LD_INT 23
16061: PUSH
16062: LD_INT 24
16064: PUSH
16065: LD_INT 25
16067: PUSH
16068: LD_INT 26
16070: PUSH
16071: LD_INT 27
16073: PUSH
16074: LD_INT 28
16076: PUSH
16077: LD_INT 29
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 31
16085: PUSH
16086: LD_INT 32
16088: PUSH
16089: LD_INT 33
16091: PUSH
16092: LD_INT 34
16094: PUSH
16095: LD_INT 36
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 101
16137: PUSH
16138: LD_INT 102
16140: PUSH
16141: LD_INT 103
16143: PUSH
16144: LD_INT 104
16146: PUSH
16147: LD_INT 105
16149: PUSH
16150: LD_INT 106
16152: PUSH
16153: LD_INT 107
16155: PUSH
16156: LD_INT 108
16158: PUSH
16159: LD_INT 109
16161: PUSH
16162: LD_INT 110
16164: PUSH
16165: LD_INT 111
16167: PUSH
16168: LD_INT 112
16170: PUSH
16171: LD_INT 113
16173: PUSH
16174: LD_INT 114
16176: PUSH
16177: LD_INT 116
16179: PUSH
16180: LD_INT 117
16182: PUSH
16183: LD_INT 118
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: ST_TO_ADDR
16209: GO 17216
16211: LD_INT 15
16213: DOUBLE
16214: EQUAL
16215: IFTRUE 16219
16217: GO 16443
16219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16220: LD_ADDR_VAR 0 2
16224: PUSH
16225: LD_INT 1
16227: PUSH
16228: LD_INT 2
16230: PUSH
16231: LD_INT 3
16233: PUSH
16234: LD_INT 4
16236: PUSH
16237: LD_INT 5
16239: PUSH
16240: LD_INT 6
16242: PUSH
16243: LD_INT 7
16245: PUSH
16246: LD_INT 8
16248: PUSH
16249: LD_INT 9
16251: PUSH
16252: LD_INT 10
16254: PUSH
16255: LD_INT 11
16257: PUSH
16258: LD_INT 12
16260: PUSH
16261: LD_INT 13
16263: PUSH
16264: LD_INT 14
16266: PUSH
16267: LD_INT 15
16269: PUSH
16270: LD_INT 16
16272: PUSH
16273: LD_INT 17
16275: PUSH
16276: LD_INT 18
16278: PUSH
16279: LD_INT 19
16281: PUSH
16282: LD_INT 20
16284: PUSH
16285: LD_INT 21
16287: PUSH
16288: LD_INT 22
16290: PUSH
16291: LD_INT 23
16293: PUSH
16294: LD_INT 24
16296: PUSH
16297: LD_INT 25
16299: PUSH
16300: LD_INT 26
16302: PUSH
16303: LD_INT 27
16305: PUSH
16306: LD_INT 28
16308: PUSH
16309: LD_INT 29
16311: PUSH
16312: LD_INT 30
16314: PUSH
16315: LD_INT 31
16317: PUSH
16318: LD_INT 32
16320: PUSH
16321: LD_INT 33
16323: PUSH
16324: LD_INT 34
16326: PUSH
16327: LD_INT 36
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 101
16369: PUSH
16370: LD_INT 102
16372: PUSH
16373: LD_INT 103
16375: PUSH
16376: LD_INT 104
16378: PUSH
16379: LD_INT 105
16381: PUSH
16382: LD_INT 106
16384: PUSH
16385: LD_INT 107
16387: PUSH
16388: LD_INT 108
16390: PUSH
16391: LD_INT 109
16393: PUSH
16394: LD_INT 110
16396: PUSH
16397: LD_INT 111
16399: PUSH
16400: LD_INT 112
16402: PUSH
16403: LD_INT 113
16405: PUSH
16406: LD_INT 114
16408: PUSH
16409: LD_INT 116
16411: PUSH
16412: LD_INT 117
16414: PUSH
16415: LD_INT 118
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: ST_TO_ADDR
16441: GO 17216
16443: LD_INT 16
16445: DOUBLE
16446: EQUAL
16447: IFTRUE 16451
16449: GO 16587
16451: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16452: LD_ADDR_VAR 0 2
16456: PUSH
16457: LD_INT 2
16459: PUSH
16460: LD_INT 4
16462: PUSH
16463: LD_INT 5
16465: PUSH
16466: LD_INT 7
16468: PUSH
16469: LD_INT 11
16471: PUSH
16472: LD_INT 12
16474: PUSH
16475: LD_INT 15
16477: PUSH
16478: LD_INT 16
16480: PUSH
16481: LD_INT 20
16483: PUSH
16484: LD_INT 21
16486: PUSH
16487: LD_INT 22
16489: PUSH
16490: LD_INT 23
16492: PUSH
16493: LD_INT 25
16495: PUSH
16496: LD_INT 26
16498: PUSH
16499: LD_INT 30
16501: PUSH
16502: LD_INT 31
16504: PUSH
16505: LD_INT 32
16507: PUSH
16508: LD_INT 33
16510: PUSH
16511: LD_INT 34
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 101
16537: PUSH
16538: LD_INT 102
16540: PUSH
16541: LD_INT 103
16543: PUSH
16544: LD_INT 106
16546: PUSH
16547: LD_INT 108
16549: PUSH
16550: LD_INT 112
16552: PUSH
16553: LD_INT 113
16555: PUSH
16556: LD_INT 114
16558: PUSH
16559: LD_INT 116
16561: PUSH
16562: LD_INT 117
16564: PUSH
16565: LD_INT 118
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: ST_TO_ADDR
16585: GO 17216
16587: LD_INT 17
16589: DOUBLE
16590: EQUAL
16591: IFTRUE 16595
16593: GO 16819
16595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16596: LD_ADDR_VAR 0 2
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: LD_INT 2
16606: PUSH
16607: LD_INT 3
16609: PUSH
16610: LD_INT 4
16612: PUSH
16613: LD_INT 5
16615: PUSH
16616: LD_INT 6
16618: PUSH
16619: LD_INT 7
16621: PUSH
16622: LD_INT 8
16624: PUSH
16625: LD_INT 9
16627: PUSH
16628: LD_INT 10
16630: PUSH
16631: LD_INT 11
16633: PUSH
16634: LD_INT 12
16636: PUSH
16637: LD_INT 13
16639: PUSH
16640: LD_INT 14
16642: PUSH
16643: LD_INT 15
16645: PUSH
16646: LD_INT 16
16648: PUSH
16649: LD_INT 17
16651: PUSH
16652: LD_INT 18
16654: PUSH
16655: LD_INT 19
16657: PUSH
16658: LD_INT 20
16660: PUSH
16661: LD_INT 21
16663: PUSH
16664: LD_INT 22
16666: PUSH
16667: LD_INT 23
16669: PUSH
16670: LD_INT 24
16672: PUSH
16673: LD_INT 25
16675: PUSH
16676: LD_INT 26
16678: PUSH
16679: LD_INT 27
16681: PUSH
16682: LD_INT 28
16684: PUSH
16685: LD_INT 29
16687: PUSH
16688: LD_INT 30
16690: PUSH
16691: LD_INT 31
16693: PUSH
16694: LD_INT 32
16696: PUSH
16697: LD_INT 33
16699: PUSH
16700: LD_INT 34
16702: PUSH
16703: LD_INT 36
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 101
16745: PUSH
16746: LD_INT 102
16748: PUSH
16749: LD_INT 103
16751: PUSH
16752: LD_INT 104
16754: PUSH
16755: LD_INT 105
16757: PUSH
16758: LD_INT 106
16760: PUSH
16761: LD_INT 107
16763: PUSH
16764: LD_INT 108
16766: PUSH
16767: LD_INT 109
16769: PUSH
16770: LD_INT 110
16772: PUSH
16773: LD_INT 111
16775: PUSH
16776: LD_INT 112
16778: PUSH
16779: LD_INT 113
16781: PUSH
16782: LD_INT 114
16784: PUSH
16785: LD_INT 116
16787: PUSH
16788: LD_INT 117
16790: PUSH
16791: LD_INT 118
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: ST_TO_ADDR
16817: GO 17216
16819: LD_INT 18
16821: DOUBLE
16822: EQUAL
16823: IFTRUE 16827
16825: GO 16975
16827: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16828: LD_ADDR_VAR 0 2
16832: PUSH
16833: LD_INT 2
16835: PUSH
16836: LD_INT 4
16838: PUSH
16839: LD_INT 5
16841: PUSH
16842: LD_INT 7
16844: PUSH
16845: LD_INT 11
16847: PUSH
16848: LD_INT 12
16850: PUSH
16851: LD_INT 15
16853: PUSH
16854: LD_INT 16
16856: PUSH
16857: LD_INT 20
16859: PUSH
16860: LD_INT 21
16862: PUSH
16863: LD_INT 22
16865: PUSH
16866: LD_INT 23
16868: PUSH
16869: LD_INT 25
16871: PUSH
16872: LD_INT 26
16874: PUSH
16875: LD_INT 30
16877: PUSH
16878: LD_INT 31
16880: PUSH
16881: LD_INT 32
16883: PUSH
16884: LD_INT 33
16886: PUSH
16887: LD_INT 34
16889: PUSH
16890: LD_INT 35
16892: PUSH
16893: LD_INT 36
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 101
16921: PUSH
16922: LD_INT 102
16924: PUSH
16925: LD_INT 103
16927: PUSH
16928: LD_INT 106
16930: PUSH
16931: LD_INT 108
16933: PUSH
16934: LD_INT 112
16936: PUSH
16937: LD_INT 113
16939: PUSH
16940: LD_INT 114
16942: PUSH
16943: LD_INT 115
16945: PUSH
16946: LD_INT 116
16948: PUSH
16949: LD_INT 117
16951: PUSH
16952: LD_INT 118
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: ST_TO_ADDR
16973: GO 17216
16975: LD_INT 19
16977: DOUBLE
16978: EQUAL
16979: IFTRUE 16983
16981: GO 17215
16983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16984: LD_ADDR_VAR 0 2
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: LD_INT 2
16994: PUSH
16995: LD_INT 3
16997: PUSH
16998: LD_INT 4
17000: PUSH
17001: LD_INT 5
17003: PUSH
17004: LD_INT 6
17006: PUSH
17007: LD_INT 7
17009: PUSH
17010: LD_INT 8
17012: PUSH
17013: LD_INT 9
17015: PUSH
17016: LD_INT 10
17018: PUSH
17019: LD_INT 11
17021: PUSH
17022: LD_INT 12
17024: PUSH
17025: LD_INT 13
17027: PUSH
17028: LD_INT 14
17030: PUSH
17031: LD_INT 15
17033: PUSH
17034: LD_INT 16
17036: PUSH
17037: LD_INT 17
17039: PUSH
17040: LD_INT 18
17042: PUSH
17043: LD_INT 19
17045: PUSH
17046: LD_INT 20
17048: PUSH
17049: LD_INT 21
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_INT 23
17057: PUSH
17058: LD_INT 24
17060: PUSH
17061: LD_INT 25
17063: PUSH
17064: LD_INT 26
17066: PUSH
17067: LD_INT 27
17069: PUSH
17070: LD_INT 28
17072: PUSH
17073: LD_INT 29
17075: PUSH
17076: LD_INT 30
17078: PUSH
17079: LD_INT 31
17081: PUSH
17082: LD_INT 32
17084: PUSH
17085: LD_INT 33
17087: PUSH
17088: LD_INT 34
17090: PUSH
17091: LD_INT 35
17093: PUSH
17094: LD_INT 36
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 101
17137: PUSH
17138: LD_INT 102
17140: PUSH
17141: LD_INT 103
17143: PUSH
17144: LD_INT 104
17146: PUSH
17147: LD_INT 105
17149: PUSH
17150: LD_INT 106
17152: PUSH
17153: LD_INT 107
17155: PUSH
17156: LD_INT 108
17158: PUSH
17159: LD_INT 109
17161: PUSH
17162: LD_INT 110
17164: PUSH
17165: LD_INT 111
17167: PUSH
17168: LD_INT 112
17170: PUSH
17171: LD_INT 113
17173: PUSH
17174: LD_INT 114
17176: PUSH
17177: LD_INT 115
17179: PUSH
17180: LD_INT 116
17182: PUSH
17183: LD_INT 117
17185: PUSH
17186: LD_INT 118
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: ST_TO_ADDR
17213: GO 17216
17215: POP
// end else
17216: GO 17447
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17218: LD_ADDR_VAR 0 2
17222: PUSH
17223: LD_INT 1
17225: PUSH
17226: LD_INT 2
17228: PUSH
17229: LD_INT 3
17231: PUSH
17232: LD_INT 4
17234: PUSH
17235: LD_INT 5
17237: PUSH
17238: LD_INT 6
17240: PUSH
17241: LD_INT 7
17243: PUSH
17244: LD_INT 8
17246: PUSH
17247: LD_INT 9
17249: PUSH
17250: LD_INT 10
17252: PUSH
17253: LD_INT 11
17255: PUSH
17256: LD_INT 12
17258: PUSH
17259: LD_INT 13
17261: PUSH
17262: LD_INT 14
17264: PUSH
17265: LD_INT 15
17267: PUSH
17268: LD_INT 16
17270: PUSH
17271: LD_INT 17
17273: PUSH
17274: LD_INT 18
17276: PUSH
17277: LD_INT 19
17279: PUSH
17280: LD_INT 20
17282: PUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 22
17288: PUSH
17289: LD_INT 23
17291: PUSH
17292: LD_INT 24
17294: PUSH
17295: LD_INT 25
17297: PUSH
17298: LD_INT 26
17300: PUSH
17301: LD_INT 27
17303: PUSH
17304: LD_INT 28
17306: PUSH
17307: LD_INT 29
17309: PUSH
17310: LD_INT 30
17312: PUSH
17313: LD_INT 31
17315: PUSH
17316: LD_INT 32
17318: PUSH
17319: LD_INT 33
17321: PUSH
17322: LD_INT 34
17324: PUSH
17325: LD_INT 35
17327: PUSH
17328: LD_INT 36
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: PUSH
17369: LD_INT 101
17371: PUSH
17372: LD_INT 102
17374: PUSH
17375: LD_INT 103
17377: PUSH
17378: LD_INT 104
17380: PUSH
17381: LD_INT 105
17383: PUSH
17384: LD_INT 106
17386: PUSH
17387: LD_INT 107
17389: PUSH
17390: LD_INT 108
17392: PUSH
17393: LD_INT 109
17395: PUSH
17396: LD_INT 110
17398: PUSH
17399: LD_INT 111
17401: PUSH
17402: LD_INT 112
17404: PUSH
17405: LD_INT 113
17407: PUSH
17408: LD_INT 114
17410: PUSH
17411: LD_INT 115
17413: PUSH
17414: LD_INT 116
17416: PUSH
17417: LD_INT 117
17419: PUSH
17420: LD_INT 118
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: ST_TO_ADDR
// if result then
17447: LD_VAR 0 2
17451: IFFALSE 18237
// begin normal :=  ;
17453: LD_ADDR_VAR 0 5
17457: PUSH
17458: LD_STRING 
17460: ST_TO_ADDR
// hardcore :=  ;
17461: LD_ADDR_VAR 0 6
17465: PUSH
17466: LD_STRING 
17468: ST_TO_ADDR
// active :=  ;
17469: LD_ADDR_VAR 0 7
17473: PUSH
17474: LD_STRING 
17476: ST_TO_ADDR
// for i = 1 to normalCounter do
17477: LD_ADDR_VAR 0 8
17481: PUSH
17482: DOUBLE
17483: LD_INT 1
17485: DEC
17486: ST_TO_ADDR
17487: LD_EXP 40
17491: PUSH
17492: FOR_TO
17493: IFFALSE 17594
// begin tmp := 0 ;
17495: LD_ADDR_VAR 0 3
17499: PUSH
17500: LD_STRING 0
17502: ST_TO_ADDR
// if result [ 1 ] then
17503: LD_VAR 0 2
17507: PUSH
17508: LD_INT 1
17510: ARRAY
17511: IFFALSE 17576
// if result [ 1 ] [ 1 ] = i then
17513: LD_VAR 0 2
17517: PUSH
17518: LD_INT 1
17520: ARRAY
17521: PUSH
17522: LD_INT 1
17524: ARRAY
17525: PUSH
17526: LD_VAR 0 8
17530: EQUAL
17531: IFFALSE 17576
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17533: LD_ADDR_VAR 0 2
17537: PUSH
17538: LD_VAR 0 2
17542: PPUSH
17543: LD_INT 1
17545: PPUSH
17546: LD_VAR 0 2
17550: PUSH
17551: LD_INT 1
17553: ARRAY
17554: PPUSH
17555: LD_INT 1
17557: PPUSH
17558: CALL_OW 3
17562: PPUSH
17563: CALL_OW 1
17567: ST_TO_ADDR
// tmp := 1 ;
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_STRING 1
17575: ST_TO_ADDR
// end ; normal := normal & tmp ;
17576: LD_ADDR_VAR 0 5
17580: PUSH
17581: LD_VAR 0 5
17585: PUSH
17586: LD_VAR 0 3
17590: STR
17591: ST_TO_ADDR
// end ;
17592: GO 17492
17594: POP
17595: POP
// for i = 1 to hardcoreCounter do
17596: LD_ADDR_VAR 0 8
17600: PUSH
17601: DOUBLE
17602: LD_INT 1
17604: DEC
17605: ST_TO_ADDR
17606: LD_EXP 41
17610: PUSH
17611: FOR_TO
17612: IFFALSE 17717
// begin tmp := 0 ;
17614: LD_ADDR_VAR 0 3
17618: PUSH
17619: LD_STRING 0
17621: ST_TO_ADDR
// if result [ 2 ] then
17622: LD_VAR 0 2
17626: PUSH
17627: LD_INT 2
17629: ARRAY
17630: IFFALSE 17699
// if result [ 2 ] [ 1 ] = 100 + i then
17632: LD_VAR 0 2
17636: PUSH
17637: LD_INT 2
17639: ARRAY
17640: PUSH
17641: LD_INT 1
17643: ARRAY
17644: PUSH
17645: LD_INT 100
17647: PUSH
17648: LD_VAR 0 8
17652: PLUS
17653: EQUAL
17654: IFFALSE 17699
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17656: LD_ADDR_VAR 0 2
17660: PUSH
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_INT 2
17668: PPUSH
17669: LD_VAR 0 2
17673: PUSH
17674: LD_INT 2
17676: ARRAY
17677: PPUSH
17678: LD_INT 1
17680: PPUSH
17681: CALL_OW 3
17685: PPUSH
17686: CALL_OW 1
17690: ST_TO_ADDR
// tmp := 1 ;
17691: LD_ADDR_VAR 0 3
17695: PUSH
17696: LD_STRING 1
17698: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17699: LD_ADDR_VAR 0 6
17703: PUSH
17704: LD_VAR 0 6
17708: PUSH
17709: LD_VAR 0 3
17713: STR
17714: ST_TO_ADDR
// end ;
17715: GO 17611
17717: POP
17718: POP
// if isGameLoad then
17719: LD_VAR 0 1
17723: IFFALSE 18198
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17725: LD_ADDR_VAR 0 4
17729: PUSH
17730: LD_EXP 44
17734: PUSH
17735: LD_EXP 43
17739: PUSH
17740: LD_EXP 45
17744: PUSH
17745: LD_EXP 42
17749: PUSH
17750: LD_EXP 46
17754: PUSH
17755: LD_EXP 47
17759: PUSH
17760: LD_EXP 48
17764: PUSH
17765: LD_EXP 49
17769: PUSH
17770: LD_EXP 50
17774: PUSH
17775: LD_EXP 51
17779: PUSH
17780: LD_EXP 52
17784: PUSH
17785: LD_EXP 53
17789: PUSH
17790: LD_EXP 54
17794: PUSH
17795: LD_EXP 55
17799: PUSH
17800: LD_EXP 63
17804: PUSH
17805: LD_EXP 64
17809: PUSH
17810: LD_EXP 65
17814: PUSH
17815: LD_EXP 66
17819: PUSH
17820: LD_EXP 68
17824: PUSH
17825: LD_EXP 69
17829: PUSH
17830: LD_EXP 70
17834: PUSH
17835: LD_EXP 73
17839: PUSH
17840: LD_EXP 75
17844: PUSH
17845: LD_EXP 76
17849: PUSH
17850: LD_EXP 77
17854: PUSH
17855: LD_EXP 79
17859: PUSH
17860: LD_EXP 80
17864: PUSH
17865: LD_EXP 83
17869: PUSH
17870: LD_EXP 84
17874: PUSH
17875: LD_EXP 85
17879: PUSH
17880: LD_EXP 86
17884: PUSH
17885: LD_EXP 87
17889: PUSH
17890: LD_EXP 88
17894: PUSH
17895: LD_EXP 89
17899: PUSH
17900: LD_EXP 90
17904: PUSH
17905: LD_EXP 91
17909: PUSH
17910: LD_EXP 56
17914: PUSH
17915: LD_EXP 57
17919: PUSH
17920: LD_EXP 60
17924: PUSH
17925: LD_EXP 61
17929: PUSH
17930: LD_EXP 62
17934: PUSH
17935: LD_EXP 58
17939: PUSH
17940: LD_EXP 59
17944: PUSH
17945: LD_EXP 67
17949: PUSH
17950: LD_EXP 71
17954: PUSH
17955: LD_EXP 72
17959: PUSH
17960: LD_EXP 74
17964: PUSH
17965: LD_EXP 78
17969: PUSH
17970: LD_EXP 81
17974: PUSH
17975: LD_EXP 82
17979: PUSH
17980: LD_EXP 92
17984: PUSH
17985: LD_EXP 93
17989: PUSH
17990: LD_EXP 94
17994: PUSH
17995: LD_EXP 95
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: ST_TO_ADDR
// tmp :=  ;
18056: LD_ADDR_VAR 0 3
18060: PUSH
18061: LD_STRING 
18063: ST_TO_ADDR
// for i = 1 to normalCounter do
18064: LD_ADDR_VAR 0 8
18068: PUSH
18069: DOUBLE
18070: LD_INT 1
18072: DEC
18073: ST_TO_ADDR
18074: LD_EXP 40
18078: PUSH
18079: FOR_TO
18080: IFFALSE 18116
// begin if flags [ i ] then
18082: LD_VAR 0 4
18086: PUSH
18087: LD_VAR 0 8
18091: ARRAY
18092: IFFALSE 18114
// tmp := tmp & i & ; ;
18094: LD_ADDR_VAR 0 3
18098: PUSH
18099: LD_VAR 0 3
18103: PUSH
18104: LD_VAR 0 8
18108: STR
18109: PUSH
18110: LD_STRING ;
18112: STR
18113: ST_TO_ADDR
// end ;
18114: GO 18079
18116: POP
18117: POP
// for i = 1 to hardcoreCounter do
18118: LD_ADDR_VAR 0 8
18122: PUSH
18123: DOUBLE
18124: LD_INT 1
18126: DEC
18127: ST_TO_ADDR
18128: LD_EXP 41
18132: PUSH
18133: FOR_TO
18134: IFFALSE 18180
// begin if flags [ normalCounter + i ] then
18136: LD_VAR 0 4
18140: PUSH
18141: LD_EXP 40
18145: PUSH
18146: LD_VAR 0 8
18150: PLUS
18151: ARRAY
18152: IFFALSE 18178
// tmp := tmp & ( 100 + i ) & ; ;
18154: LD_ADDR_VAR 0 3
18158: PUSH
18159: LD_VAR 0 3
18163: PUSH
18164: LD_INT 100
18166: PUSH
18167: LD_VAR 0 8
18171: PLUS
18172: STR
18173: PUSH
18174: LD_STRING ;
18176: STR
18177: ST_TO_ADDR
// end ;
18178: GO 18133
18180: POP
18181: POP
// if tmp then
18182: LD_VAR 0 3
18186: IFFALSE 18198
// active := tmp ;
18188: LD_ADDR_VAR 0 7
18192: PUSH
18193: LD_VAR 0 3
18197: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18198: LD_STRING getStreamItemsFromMission("
18200: PUSH
18201: LD_VAR 0 5
18205: STR
18206: PUSH
18207: LD_STRING ","
18209: STR
18210: PUSH
18211: LD_VAR 0 6
18215: STR
18216: PUSH
18217: LD_STRING ","
18219: STR
18220: PUSH
18221: LD_VAR 0 7
18225: STR
18226: PUSH
18227: LD_STRING ")
18229: STR
18230: PPUSH
18231: CALL_OW 559
// end else
18235: GO 18244
// ToLua ( getStreamItemsFromMission("","","") ) ;
18237: LD_STRING getStreamItemsFromMission("","","")
18239: PPUSH
18240: CALL_OW 559
// end ;
18244: LD_VAR 0 2
18248: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18249: LD_EXP 39
18253: PUSH
18254: LD_EXP 44
18258: AND
18259: IFFALSE 18383
18261: GO 18263
18263: DISABLE
18264: LD_INT 0
18266: PPUSH
18267: PPUSH
// begin enable ;
18268: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18269: LD_ADDR_VAR 0 2
18273: PUSH
18274: LD_INT 22
18276: PUSH
18277: LD_OWVAR 2
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 2
18288: PUSH
18289: LD_INT 34
18291: PUSH
18292: LD_INT 7
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 34
18301: PUSH
18302: LD_INT 45
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 34
18311: PUSH
18312: LD_INT 28
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 34
18321: PUSH
18322: LD_INT 47
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PPUSH
18340: CALL_OW 69
18344: ST_TO_ADDR
// if not tmp then
18345: LD_VAR 0 2
18349: NOT
18350: IFFALSE 18354
// exit ;
18352: GO 18383
// for i in tmp do
18354: LD_ADDR_VAR 0 1
18358: PUSH
18359: LD_VAR 0 2
18363: PUSH
18364: FOR_IN
18365: IFFALSE 18381
// begin SetLives ( i , 0 ) ;
18367: LD_VAR 0 1
18371: PPUSH
18372: LD_INT 0
18374: PPUSH
18375: CALL_OW 234
// end ;
18379: GO 18364
18381: POP
18382: POP
// end ;
18383: PPOPN 2
18385: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18386: LD_EXP 39
18390: PUSH
18391: LD_EXP 45
18395: AND
18396: IFFALSE 18480
18398: GO 18400
18400: DISABLE
18401: LD_INT 0
18403: PPUSH
18404: PPUSH
// begin enable ;
18405: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18406: LD_ADDR_VAR 0 2
18410: PUSH
18411: LD_INT 22
18413: PUSH
18414: LD_OWVAR 2
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 32
18425: PUSH
18426: LD_INT 3
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PPUSH
18437: CALL_OW 69
18441: ST_TO_ADDR
// if not tmp then
18442: LD_VAR 0 2
18446: NOT
18447: IFFALSE 18451
// exit ;
18449: GO 18480
// for i in tmp do
18451: LD_ADDR_VAR 0 1
18455: PUSH
18456: LD_VAR 0 2
18460: PUSH
18461: FOR_IN
18462: IFFALSE 18478
// begin SetLives ( i , 0 ) ;
18464: LD_VAR 0 1
18468: PPUSH
18469: LD_INT 0
18471: PPUSH
18472: CALL_OW 234
// end ;
18476: GO 18461
18478: POP
18479: POP
// end ;
18480: PPOPN 2
18482: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18483: LD_EXP 39
18487: PUSH
18488: LD_EXP 42
18492: AND
18493: IFFALSE 18586
18495: GO 18497
18497: DISABLE
18498: LD_INT 0
18500: PPUSH
// begin enable ;
18501: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18502: LD_ADDR_VAR 0 1
18506: PUSH
18507: LD_INT 22
18509: PUSH
18510: LD_OWVAR 2
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: LD_INT 25
18524: PUSH
18525: LD_INT 5
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 25
18534: PUSH
18535: LD_INT 9
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 25
18544: PUSH
18545: LD_INT 8
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PPUSH
18562: CALL_OW 69
18566: PUSH
18567: FOR_IN
18568: IFFALSE 18584
// begin SetClass ( i , 1 ) ;
18570: LD_VAR 0 1
18574: PPUSH
18575: LD_INT 1
18577: PPUSH
18578: CALL_OW 336
// end ;
18582: GO 18567
18584: POP
18585: POP
// end ;
18586: PPOPN 1
18588: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18589: LD_EXP 39
18593: PUSH
18594: LD_EXP 43
18598: AND
18599: PUSH
18600: LD_OWVAR 65
18604: PUSH
18605: LD_INT 7
18607: LESS
18608: AND
18609: IFFALSE 18623
18611: GO 18613
18613: DISABLE
// begin enable ;
18614: ENABLE
// game_speed := 7 ;
18615: LD_ADDR_OWVAR 65
18619: PUSH
18620: LD_INT 7
18622: ST_TO_ADDR
// end ;
18623: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18624: LD_EXP 39
18628: PUSH
18629: LD_EXP 46
18633: AND
18634: IFFALSE 18836
18636: GO 18638
18638: DISABLE
18639: LD_INT 0
18641: PPUSH
18642: PPUSH
18643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18644: LD_ADDR_VAR 0 3
18648: PUSH
18649: LD_INT 81
18651: PUSH
18652: LD_OWVAR 2
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 21
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PPUSH
18675: CALL_OW 69
18679: ST_TO_ADDR
// if not tmp then
18680: LD_VAR 0 3
18684: NOT
18685: IFFALSE 18689
// exit ;
18687: GO 18836
// if tmp > 5 then
18689: LD_VAR 0 3
18693: PUSH
18694: LD_INT 5
18696: GREATER
18697: IFFALSE 18709
// k := 5 else
18699: LD_ADDR_VAR 0 2
18703: PUSH
18704: LD_INT 5
18706: ST_TO_ADDR
18707: GO 18719
// k := tmp ;
18709: LD_ADDR_VAR 0 2
18713: PUSH
18714: LD_VAR 0 3
18718: ST_TO_ADDR
// for i := 1 to k do
18719: LD_ADDR_VAR 0 1
18723: PUSH
18724: DOUBLE
18725: LD_INT 1
18727: DEC
18728: ST_TO_ADDR
18729: LD_VAR 0 2
18733: PUSH
18734: FOR_TO
18735: IFFALSE 18834
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18737: LD_VAR 0 3
18741: PUSH
18742: LD_VAR 0 1
18746: ARRAY
18747: PPUSH
18748: LD_VAR 0 1
18752: PUSH
18753: LD_INT 4
18755: MOD
18756: PUSH
18757: LD_INT 1
18759: PLUS
18760: PPUSH
18761: CALL_OW 259
18765: PUSH
18766: LD_INT 10
18768: LESS
18769: IFFALSE 18832
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18771: LD_VAR 0 3
18775: PUSH
18776: LD_VAR 0 1
18780: ARRAY
18781: PPUSH
18782: LD_VAR 0 1
18786: PUSH
18787: LD_INT 4
18789: MOD
18790: PUSH
18791: LD_INT 1
18793: PLUS
18794: PPUSH
18795: LD_VAR 0 3
18799: PUSH
18800: LD_VAR 0 1
18804: ARRAY
18805: PPUSH
18806: LD_VAR 0 1
18810: PUSH
18811: LD_INT 4
18813: MOD
18814: PUSH
18815: LD_INT 1
18817: PLUS
18818: PPUSH
18819: CALL_OW 259
18823: PUSH
18824: LD_INT 1
18826: PLUS
18827: PPUSH
18828: CALL_OW 237
18832: GO 18734
18834: POP
18835: POP
// end ;
18836: PPOPN 3
18838: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18839: LD_EXP 39
18843: PUSH
18844: LD_EXP 47
18848: AND
18849: IFFALSE 18869
18851: GO 18853
18853: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18854: LD_INT 4
18856: PPUSH
18857: LD_OWVAR 2
18861: PPUSH
18862: LD_INT 0
18864: PPUSH
18865: CALL_OW 324
18869: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18870: LD_EXP 39
18874: PUSH
18875: LD_EXP 76
18879: AND
18880: IFFALSE 18900
18882: GO 18884
18884: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18885: LD_INT 19
18887: PPUSH
18888: LD_OWVAR 2
18892: PPUSH
18893: LD_INT 0
18895: PPUSH
18896: CALL_OW 324
18900: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18901: LD_EXP 39
18905: PUSH
18906: LD_EXP 48
18910: AND
18911: IFFALSE 19013
18913: GO 18915
18915: DISABLE
18916: LD_INT 0
18918: PPUSH
18919: PPUSH
// begin enable ;
18920: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18921: LD_ADDR_VAR 0 2
18925: PUSH
18926: LD_INT 22
18928: PUSH
18929: LD_OWVAR 2
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 2
18940: PUSH
18941: LD_INT 34
18943: PUSH
18944: LD_INT 11
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 34
18953: PUSH
18954: LD_INT 30
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: LIST
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: CALL_OW 69
18974: ST_TO_ADDR
// if not tmp then
18975: LD_VAR 0 2
18979: NOT
18980: IFFALSE 18984
// exit ;
18982: GO 19013
// for i in tmp do
18984: LD_ADDR_VAR 0 1
18988: PUSH
18989: LD_VAR 0 2
18993: PUSH
18994: FOR_IN
18995: IFFALSE 19011
// begin SetLives ( i , 0 ) ;
18997: LD_VAR 0 1
19001: PPUSH
19002: LD_INT 0
19004: PPUSH
19005: CALL_OW 234
// end ;
19009: GO 18994
19011: POP
19012: POP
// end ;
19013: PPOPN 2
19015: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19016: LD_EXP 39
19020: PUSH
19021: LD_EXP 49
19025: AND
19026: IFFALSE 19046
19028: GO 19030
19030: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19031: LD_INT 32
19033: PPUSH
19034: LD_OWVAR 2
19038: PPUSH
19039: LD_INT 0
19041: PPUSH
19042: CALL_OW 324
19046: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19047: LD_EXP 39
19051: PUSH
19052: LD_EXP 50
19056: AND
19057: IFFALSE 19238
19059: GO 19061
19061: DISABLE
19062: LD_INT 0
19064: PPUSH
19065: PPUSH
19066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19067: LD_ADDR_VAR 0 2
19071: PUSH
19072: LD_INT 22
19074: PUSH
19075: LD_OWVAR 2
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 33
19086: PUSH
19087: LD_INT 3
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PPUSH
19098: CALL_OW 69
19102: ST_TO_ADDR
// if not tmp then
19103: LD_VAR 0 2
19107: NOT
19108: IFFALSE 19112
// exit ;
19110: GO 19238
// side := 0 ;
19112: LD_ADDR_VAR 0 3
19116: PUSH
19117: LD_INT 0
19119: ST_TO_ADDR
// for i := 1 to 8 do
19120: LD_ADDR_VAR 0 1
19124: PUSH
19125: DOUBLE
19126: LD_INT 1
19128: DEC
19129: ST_TO_ADDR
19130: LD_INT 8
19132: PUSH
19133: FOR_TO
19134: IFFALSE 19182
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19136: LD_OWVAR 2
19140: PUSH
19141: LD_VAR 0 1
19145: NONEQUAL
19146: PUSH
19147: LD_OWVAR 2
19151: PPUSH
19152: LD_VAR 0 1
19156: PPUSH
19157: CALL_OW 81
19161: PUSH
19162: LD_INT 2
19164: EQUAL
19165: AND
19166: IFFALSE 19180
// begin side := i ;
19168: LD_ADDR_VAR 0 3
19172: PUSH
19173: LD_VAR 0 1
19177: ST_TO_ADDR
// break ;
19178: GO 19182
// end ;
19180: GO 19133
19182: POP
19183: POP
// if not side then
19184: LD_VAR 0 3
19188: NOT
19189: IFFALSE 19193
// exit ;
19191: GO 19238
// for i := 1 to tmp do
19193: LD_ADDR_VAR 0 1
19197: PUSH
19198: DOUBLE
19199: LD_INT 1
19201: DEC
19202: ST_TO_ADDR
19203: LD_VAR 0 2
19207: PUSH
19208: FOR_TO
19209: IFFALSE 19236
// if Prob ( 60 ) then
19211: LD_INT 60
19213: PPUSH
19214: CALL_OW 13
19218: IFFALSE 19234
// SetSide ( i , side ) ;
19220: LD_VAR 0 1
19224: PPUSH
19225: LD_VAR 0 3
19229: PPUSH
19230: CALL_OW 235
19234: GO 19208
19236: POP
19237: POP
// end ;
19238: PPOPN 3
19240: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19241: LD_EXP 39
19245: PUSH
19246: LD_EXP 52
19250: AND
19251: IFFALSE 19370
19253: GO 19255
19255: DISABLE
19256: LD_INT 0
19258: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19259: LD_ADDR_VAR 0 1
19263: PUSH
19264: LD_INT 22
19266: PUSH
19267: LD_OWVAR 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 21
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 3
19288: PUSH
19289: LD_INT 23
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: LIST
19307: PPUSH
19308: CALL_OW 69
19312: PUSH
19313: FOR_IN
19314: IFFALSE 19368
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19316: LD_VAR 0 1
19320: PPUSH
19321: CALL_OW 257
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: LD_INT 2
19331: PUSH
19332: LD_INT 3
19334: PUSH
19335: LD_INT 4
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: IN
19344: IFFALSE 19366
// SetClass ( un , rand ( 1 , 4 ) ) ;
19346: LD_VAR 0 1
19350: PPUSH
19351: LD_INT 1
19353: PPUSH
19354: LD_INT 4
19356: PPUSH
19357: CALL_OW 12
19361: PPUSH
19362: CALL_OW 336
19366: GO 19313
19368: POP
19369: POP
// end ;
19370: PPOPN 1
19372: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19373: LD_EXP 39
19377: PUSH
19378: LD_EXP 51
19382: AND
19383: IFFALSE 19462
19385: GO 19387
19387: DISABLE
19388: LD_INT 0
19390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19391: LD_ADDR_VAR 0 1
19395: PUSH
19396: LD_INT 22
19398: PUSH
19399: LD_OWVAR 2
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 21
19410: PUSH
19411: LD_INT 3
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PPUSH
19422: CALL_OW 69
19426: ST_TO_ADDR
// if not tmp then
19427: LD_VAR 0 1
19431: NOT
19432: IFFALSE 19436
// exit ;
19434: GO 19462
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19436: LD_VAR 0 1
19440: PUSH
19441: LD_INT 1
19443: PPUSH
19444: LD_VAR 0 1
19448: PPUSH
19449: CALL_OW 12
19453: ARRAY
19454: PPUSH
19455: LD_INT 100
19457: PPUSH
19458: CALL_OW 234
// end ;
19462: PPOPN 1
19464: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19465: LD_EXP 39
19469: PUSH
19470: LD_EXP 53
19474: AND
19475: IFFALSE 19573
19477: GO 19479
19479: DISABLE
19480: LD_INT 0
19482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19483: LD_ADDR_VAR 0 1
19487: PUSH
19488: LD_INT 22
19490: PUSH
19491: LD_OWVAR 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 21
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PPUSH
19514: CALL_OW 69
19518: ST_TO_ADDR
// if not tmp then
19519: LD_VAR 0 1
19523: NOT
19524: IFFALSE 19528
// exit ;
19526: GO 19573
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19528: LD_VAR 0 1
19532: PUSH
19533: LD_INT 1
19535: PPUSH
19536: LD_VAR 0 1
19540: PPUSH
19541: CALL_OW 12
19545: ARRAY
19546: PPUSH
19547: LD_INT 1
19549: PPUSH
19550: LD_INT 4
19552: PPUSH
19553: CALL_OW 12
19557: PPUSH
19558: LD_INT 3000
19560: PPUSH
19561: LD_INT 9000
19563: PPUSH
19564: CALL_OW 12
19568: PPUSH
19569: CALL_OW 492
// end ;
19573: PPOPN 1
19575: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19576: LD_EXP 39
19580: PUSH
19581: LD_EXP 54
19585: AND
19586: IFFALSE 19606
19588: GO 19590
19590: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19591: LD_INT 1
19593: PPUSH
19594: LD_OWVAR 2
19598: PPUSH
19599: LD_INT 0
19601: PPUSH
19602: CALL_OW 324
19606: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19607: LD_EXP 39
19611: PUSH
19612: LD_EXP 55
19616: AND
19617: IFFALSE 19700
19619: GO 19621
19621: DISABLE
19622: LD_INT 0
19624: PPUSH
19625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19626: LD_ADDR_VAR 0 2
19630: PUSH
19631: LD_INT 22
19633: PUSH
19634: LD_OWVAR 2
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 21
19645: PUSH
19646: LD_INT 3
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PPUSH
19657: CALL_OW 69
19661: ST_TO_ADDR
// if not tmp then
19662: LD_VAR 0 2
19666: NOT
19667: IFFALSE 19671
// exit ;
19669: GO 19700
// for i in tmp do
19671: LD_ADDR_VAR 0 1
19675: PUSH
19676: LD_VAR 0 2
19680: PUSH
19681: FOR_IN
19682: IFFALSE 19698
// SetBLevel ( i , 10 ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_INT 10
19691: PPUSH
19692: CALL_OW 241
19696: GO 19681
19698: POP
19699: POP
// end ;
19700: PPOPN 2
19702: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19703: LD_EXP 39
19707: PUSH
19708: LD_EXP 56
19712: AND
19713: IFFALSE 19824
19715: GO 19717
19717: DISABLE
19718: LD_INT 0
19720: PPUSH
19721: PPUSH
19722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19723: LD_ADDR_VAR 0 3
19727: PUSH
19728: LD_INT 22
19730: PUSH
19731: LD_OWVAR 2
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 25
19742: PUSH
19743: LD_INT 1
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PPUSH
19754: CALL_OW 69
19758: ST_TO_ADDR
// if not tmp then
19759: LD_VAR 0 3
19763: NOT
19764: IFFALSE 19768
// exit ;
19766: GO 19824
// un := tmp [ rand ( 1 , tmp ) ] ;
19768: LD_ADDR_VAR 0 2
19772: PUSH
19773: LD_VAR 0 3
19777: PUSH
19778: LD_INT 1
19780: PPUSH
19781: LD_VAR 0 3
19785: PPUSH
19786: CALL_OW 12
19790: ARRAY
19791: ST_TO_ADDR
// if Crawls ( un ) then
19792: LD_VAR 0 2
19796: PPUSH
19797: CALL_OW 318
19801: IFFALSE 19812
// ComWalk ( un ) ;
19803: LD_VAR 0 2
19807: PPUSH
19808: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19812: LD_VAR 0 2
19816: PPUSH
19817: LD_INT 5
19819: PPUSH
19820: CALL_OW 336
// end ;
19824: PPOPN 3
19826: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19827: LD_EXP 39
19831: PUSH
19832: LD_EXP 57
19836: AND
19837: PUSH
19838: LD_OWVAR 67
19842: PUSH
19843: LD_INT 4
19845: LESS
19846: AND
19847: IFFALSE 19866
19849: GO 19851
19851: DISABLE
// begin Difficulty := Difficulty + 1 ;
19852: LD_ADDR_OWVAR 67
19856: PUSH
19857: LD_OWVAR 67
19861: PUSH
19862: LD_INT 1
19864: PLUS
19865: ST_TO_ADDR
// end ;
19866: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19867: LD_EXP 39
19871: PUSH
19872: LD_EXP 58
19876: AND
19877: IFFALSE 19980
19879: GO 19881
19881: DISABLE
19882: LD_INT 0
19884: PPUSH
// begin for i := 1 to 5 do
19885: LD_ADDR_VAR 0 1
19889: PUSH
19890: DOUBLE
19891: LD_INT 1
19893: DEC
19894: ST_TO_ADDR
19895: LD_INT 5
19897: PUSH
19898: FOR_TO
19899: IFFALSE 19978
// begin uc_nation := nation_nature ;
19901: LD_ADDR_OWVAR 21
19905: PUSH
19906: LD_INT 0
19908: ST_TO_ADDR
// uc_side := 0 ;
19909: LD_ADDR_OWVAR 20
19913: PUSH
19914: LD_INT 0
19916: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19917: LD_ADDR_OWVAR 29
19921: PUSH
19922: LD_INT 12
19924: PUSH
19925: LD_INT 12
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: ST_TO_ADDR
// hc_agressivity := 20 ;
19932: LD_ADDR_OWVAR 35
19936: PUSH
19937: LD_INT 20
19939: ST_TO_ADDR
// hc_class := class_tiger ;
19940: LD_ADDR_OWVAR 28
19944: PUSH
19945: LD_INT 14
19947: ST_TO_ADDR
// hc_gallery :=  ;
19948: LD_ADDR_OWVAR 33
19952: PUSH
19953: LD_STRING 
19955: ST_TO_ADDR
// hc_name :=  ;
19956: LD_ADDR_OWVAR 26
19960: PUSH
19961: LD_STRING 
19963: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19964: CALL_OW 44
19968: PPUSH
19969: LD_INT 0
19971: PPUSH
19972: CALL_OW 51
// end ;
19976: GO 19898
19978: POP
19979: POP
// end ;
19980: PPOPN 1
19982: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19983: LD_EXP 39
19987: PUSH
19988: LD_EXP 59
19992: AND
19993: IFFALSE 20002
19995: GO 19997
19997: DISABLE
// StreamSibBomb ;
19998: CALL 20003 0 0
20002: END
// export function StreamSibBomb ; var i , x , y ; begin
20003: LD_INT 0
20005: PPUSH
20006: PPUSH
20007: PPUSH
20008: PPUSH
// result := false ;
20009: LD_ADDR_VAR 0 1
20013: PUSH
20014: LD_INT 0
20016: ST_TO_ADDR
// for i := 1 to 16 do
20017: LD_ADDR_VAR 0 2
20021: PUSH
20022: DOUBLE
20023: LD_INT 1
20025: DEC
20026: ST_TO_ADDR
20027: LD_INT 16
20029: PUSH
20030: FOR_TO
20031: IFFALSE 20230
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20033: LD_ADDR_VAR 0 3
20037: PUSH
20038: LD_INT 10
20040: PUSH
20041: LD_INT 20
20043: PUSH
20044: LD_INT 30
20046: PUSH
20047: LD_INT 40
20049: PUSH
20050: LD_INT 50
20052: PUSH
20053: LD_INT 60
20055: PUSH
20056: LD_INT 70
20058: PUSH
20059: LD_INT 80
20061: PUSH
20062: LD_INT 90
20064: PUSH
20065: LD_INT 100
20067: PUSH
20068: LD_INT 110
20070: PUSH
20071: LD_INT 120
20073: PUSH
20074: LD_INT 130
20076: PUSH
20077: LD_INT 140
20079: PUSH
20080: LD_INT 150
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 1
20102: PPUSH
20103: LD_INT 15
20105: PPUSH
20106: CALL_OW 12
20110: ARRAY
20111: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20112: LD_ADDR_VAR 0 4
20116: PUSH
20117: LD_INT 10
20119: PUSH
20120: LD_INT 20
20122: PUSH
20123: LD_INT 30
20125: PUSH
20126: LD_INT 40
20128: PUSH
20129: LD_INT 50
20131: PUSH
20132: LD_INT 60
20134: PUSH
20135: LD_INT 70
20137: PUSH
20138: LD_INT 80
20140: PUSH
20141: LD_INT 90
20143: PUSH
20144: LD_INT 100
20146: PUSH
20147: LD_INT 110
20149: PUSH
20150: LD_INT 120
20152: PUSH
20153: LD_INT 130
20155: PUSH
20156: LD_INT 140
20158: PUSH
20159: LD_INT 150
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 1
20181: PPUSH
20182: LD_INT 15
20184: PPUSH
20185: CALL_OW 12
20189: ARRAY
20190: ST_TO_ADDR
// if ValidHex ( x , y ) then
20191: LD_VAR 0 3
20195: PPUSH
20196: LD_VAR 0 4
20200: PPUSH
20201: CALL_OW 488
20205: IFFALSE 20228
// begin result := [ x , y ] ;
20207: LD_ADDR_VAR 0 1
20211: PUSH
20212: LD_VAR 0 3
20216: PUSH
20217: LD_VAR 0 4
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: ST_TO_ADDR
// break ;
20226: GO 20230
// end ; end ;
20228: GO 20030
20230: POP
20231: POP
// if result then
20232: LD_VAR 0 1
20236: IFFALSE 20296
// begin ToLua ( playSibBomb() ) ;
20238: LD_STRING playSibBomb()
20240: PPUSH
20241: CALL_OW 559
// wait ( 0 0$14 ) ;
20245: LD_INT 490
20247: PPUSH
20248: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20252: LD_VAR 0 1
20256: PUSH
20257: LD_INT 1
20259: ARRAY
20260: PPUSH
20261: LD_VAR 0 1
20265: PUSH
20266: LD_INT 2
20268: ARRAY
20269: PPUSH
20270: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20274: LD_VAR 0 1
20278: PUSH
20279: LD_INT 1
20281: ARRAY
20282: PPUSH
20283: LD_VAR 0 1
20287: PUSH
20288: LD_INT 2
20290: ARRAY
20291: PPUSH
20292: CALL_OW 429
// end ; end ;
20296: LD_VAR 0 1
20300: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20301: LD_EXP 39
20305: PUSH
20306: LD_EXP 61
20310: AND
20311: IFFALSE 20323
20313: GO 20315
20315: DISABLE
// YouLost (  ) ;
20316: LD_STRING 
20318: PPUSH
20319: CALL_OW 104
20323: END
// every 0 0$1 trigger StreamModeActive and sFog do
20324: LD_EXP 39
20328: PUSH
20329: LD_EXP 60
20333: AND
20334: IFFALSE 20348
20336: GO 20338
20338: DISABLE
// FogOff ( your_side ) ;
20339: LD_OWVAR 2
20343: PPUSH
20344: CALL_OW 344
20348: END
// every 0 0$1 trigger StreamModeActive and sSun do
20349: LD_EXP 39
20353: PUSH
20354: LD_EXP 62
20358: AND
20359: IFFALSE 20387
20361: GO 20363
20363: DISABLE
// begin solar_recharge_percent := 0 ;
20364: LD_ADDR_OWVAR 79
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20372: LD_INT 10500
20374: PPUSH
20375: CALL_OW 67
// solar_recharge_percent := 100 ;
20379: LD_ADDR_OWVAR 79
20383: PUSH
20384: LD_INT 100
20386: ST_TO_ADDR
// end ;
20387: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20388: LD_EXP 39
20392: PUSH
20393: LD_EXP 63
20397: AND
20398: IFFALSE 20637
20400: GO 20402
20402: DISABLE
20403: LD_INT 0
20405: PPUSH
20406: PPUSH
20407: PPUSH
// begin tmp := [ ] ;
20408: LD_ADDR_VAR 0 3
20412: PUSH
20413: EMPTY
20414: ST_TO_ADDR
// for i := 1 to 6 do
20415: LD_ADDR_VAR 0 1
20419: PUSH
20420: DOUBLE
20421: LD_INT 1
20423: DEC
20424: ST_TO_ADDR
20425: LD_INT 6
20427: PUSH
20428: FOR_TO
20429: IFFALSE 20534
// begin uc_nation := nation_nature ;
20431: LD_ADDR_OWVAR 21
20435: PUSH
20436: LD_INT 0
20438: ST_TO_ADDR
// uc_side := 0 ;
20439: LD_ADDR_OWVAR 20
20443: PUSH
20444: LD_INT 0
20446: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20447: LD_ADDR_OWVAR 29
20451: PUSH
20452: LD_INT 12
20454: PUSH
20455: LD_INT 12
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: ST_TO_ADDR
// hc_agressivity := 20 ;
20462: LD_ADDR_OWVAR 35
20466: PUSH
20467: LD_INT 20
20469: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20470: LD_ADDR_OWVAR 28
20474: PUSH
20475: LD_INT 17
20477: ST_TO_ADDR
// hc_gallery :=  ;
20478: LD_ADDR_OWVAR 33
20482: PUSH
20483: LD_STRING 
20485: ST_TO_ADDR
// hc_name :=  ;
20486: LD_ADDR_OWVAR 26
20490: PUSH
20491: LD_STRING 
20493: ST_TO_ADDR
// un := CreateHuman ;
20494: LD_ADDR_VAR 0 2
20498: PUSH
20499: CALL_OW 44
20503: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20504: LD_VAR 0 2
20508: PPUSH
20509: LD_INT 1
20511: PPUSH
20512: CALL_OW 51
// tmp := tmp ^ un ;
20516: LD_ADDR_VAR 0 3
20520: PUSH
20521: LD_VAR 0 3
20525: PUSH
20526: LD_VAR 0 2
20530: ADD
20531: ST_TO_ADDR
// end ;
20532: GO 20428
20534: POP
20535: POP
// repeat wait ( 0 0$1 ) ;
20536: LD_INT 35
20538: PPUSH
20539: CALL_OW 67
// for un in tmp do
20543: LD_ADDR_VAR 0 2
20547: PUSH
20548: LD_VAR 0 3
20552: PUSH
20553: FOR_IN
20554: IFFALSE 20628
// begin if IsDead ( un ) then
20556: LD_VAR 0 2
20560: PPUSH
20561: CALL_OW 301
20565: IFFALSE 20585
// begin tmp := tmp diff un ;
20567: LD_ADDR_VAR 0 3
20571: PUSH
20572: LD_VAR 0 3
20576: PUSH
20577: LD_VAR 0 2
20581: DIFF
20582: ST_TO_ADDR
// continue ;
20583: GO 20553
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20585: LD_VAR 0 2
20589: PPUSH
20590: LD_INT 3
20592: PUSH
20593: LD_INT 22
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PPUSH
20607: CALL_OW 69
20611: PPUSH
20612: LD_VAR 0 2
20616: PPUSH
20617: CALL_OW 74
20621: PPUSH
20622: CALL_OW 115
// end ;
20626: GO 20553
20628: POP
20629: POP
// until not tmp ;
20630: LD_VAR 0 3
20634: NOT
20635: IFFALSE 20536
// end ;
20637: PPOPN 3
20639: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20640: LD_EXP 39
20644: PUSH
20645: LD_EXP 64
20649: AND
20650: IFFALSE 20704
20652: GO 20654
20654: DISABLE
// begin ToLua ( displayTroll(); ) ;
20655: LD_STRING displayTroll();
20657: PPUSH
20658: CALL_OW 559
// wait ( 3 3$00 ) ;
20662: LD_INT 6300
20664: PPUSH
20665: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20669: LD_STRING hideTroll();
20671: PPUSH
20672: CALL_OW 559
// wait ( 1 1$00 ) ;
20676: LD_INT 2100
20678: PPUSH
20679: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20683: LD_STRING displayTroll();
20685: PPUSH
20686: CALL_OW 559
// wait ( 1 1$00 ) ;
20690: LD_INT 2100
20692: PPUSH
20693: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20697: LD_STRING hideTroll();
20699: PPUSH
20700: CALL_OW 559
// end ;
20704: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20705: LD_EXP 39
20709: PUSH
20710: LD_EXP 65
20714: AND
20715: IFFALSE 20778
20717: GO 20719
20719: DISABLE
20720: LD_INT 0
20722: PPUSH
// begin p := 0 ;
20723: LD_ADDR_VAR 0 1
20727: PUSH
20728: LD_INT 0
20730: ST_TO_ADDR
// repeat game_speed := 1 ;
20731: LD_ADDR_OWVAR 65
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20739: LD_INT 35
20741: PPUSH
20742: CALL_OW 67
// p := p + 1 ;
20746: LD_ADDR_VAR 0 1
20750: PUSH
20751: LD_VAR 0 1
20755: PUSH
20756: LD_INT 1
20758: PLUS
20759: ST_TO_ADDR
// until p >= 60 ;
20760: LD_VAR 0 1
20764: PUSH
20765: LD_INT 60
20767: GREATEREQUAL
20768: IFFALSE 20731
// game_speed := 4 ;
20770: LD_ADDR_OWVAR 65
20774: PUSH
20775: LD_INT 4
20777: ST_TO_ADDR
// end ;
20778: PPOPN 1
20780: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20781: LD_EXP 39
20785: PUSH
20786: LD_EXP 66
20790: AND
20791: IFFALSE 20937
20793: GO 20795
20795: DISABLE
20796: LD_INT 0
20798: PPUSH
20799: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20800: LD_ADDR_VAR 0 1
20804: PUSH
20805: LD_INT 22
20807: PUSH
20808: LD_OWVAR 2
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 2
20819: PUSH
20820: LD_INT 30
20822: PUSH
20823: LD_INT 0
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 30
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: LIST
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PPUSH
20849: CALL_OW 69
20853: ST_TO_ADDR
// if not depot then
20854: LD_VAR 0 1
20858: NOT
20859: IFFALSE 20863
// exit ;
20861: GO 20937
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20863: LD_ADDR_VAR 0 2
20867: PUSH
20868: LD_VAR 0 1
20872: PUSH
20873: LD_INT 1
20875: PPUSH
20876: LD_VAR 0 1
20880: PPUSH
20881: CALL_OW 12
20885: ARRAY
20886: PPUSH
20887: CALL_OW 274
20891: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20892: LD_VAR 0 2
20896: PPUSH
20897: LD_INT 1
20899: PPUSH
20900: LD_INT 0
20902: PPUSH
20903: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20907: LD_VAR 0 2
20911: PPUSH
20912: LD_INT 2
20914: PPUSH
20915: LD_INT 0
20917: PPUSH
20918: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20922: LD_VAR 0 2
20926: PPUSH
20927: LD_INT 3
20929: PPUSH
20930: LD_INT 0
20932: PPUSH
20933: CALL_OW 277
// end ;
20937: PPOPN 2
20939: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20940: LD_EXP 39
20944: PUSH
20945: LD_EXP 67
20949: AND
20950: IFFALSE 21047
20952: GO 20954
20954: DISABLE
20955: LD_INT 0
20957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20958: LD_ADDR_VAR 0 1
20962: PUSH
20963: LD_INT 22
20965: PUSH
20966: LD_OWVAR 2
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 21
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 3
20987: PUSH
20988: LD_INT 23
20990: PUSH
20991: LD_INT 0
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: LIST
21006: PPUSH
21007: CALL_OW 69
21011: ST_TO_ADDR
// if not tmp then
21012: LD_VAR 0 1
21016: NOT
21017: IFFALSE 21021
// exit ;
21019: GO 21047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21021: LD_VAR 0 1
21025: PUSH
21026: LD_INT 1
21028: PPUSH
21029: LD_VAR 0 1
21033: PPUSH
21034: CALL_OW 12
21038: ARRAY
21039: PPUSH
21040: LD_INT 200
21042: PPUSH
21043: CALL_OW 234
// end ;
21047: PPOPN 1
21049: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21050: LD_EXP 39
21054: PUSH
21055: LD_EXP 68
21059: AND
21060: IFFALSE 21139
21062: GO 21064
21064: DISABLE
21065: LD_INT 0
21067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21068: LD_ADDR_VAR 0 1
21072: PUSH
21073: LD_INT 22
21075: PUSH
21076: LD_OWVAR 2
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 21
21087: PUSH
21088: LD_INT 2
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PPUSH
21099: CALL_OW 69
21103: ST_TO_ADDR
// if not tmp then
21104: LD_VAR 0 1
21108: NOT
21109: IFFALSE 21113
// exit ;
21111: GO 21139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21113: LD_VAR 0 1
21117: PUSH
21118: LD_INT 1
21120: PPUSH
21121: LD_VAR 0 1
21125: PPUSH
21126: CALL_OW 12
21130: ARRAY
21131: PPUSH
21132: LD_INT 60
21134: PPUSH
21135: CALL_OW 234
// end ;
21139: PPOPN 1
21141: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21142: LD_EXP 39
21146: PUSH
21147: LD_EXP 69
21151: AND
21152: IFFALSE 21251
21154: GO 21156
21156: DISABLE
21157: LD_INT 0
21159: PPUSH
21160: PPUSH
// begin enable ;
21161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21162: LD_ADDR_VAR 0 1
21166: PUSH
21167: LD_INT 22
21169: PUSH
21170: LD_OWVAR 2
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 61
21181: PUSH
21182: EMPTY
21183: LIST
21184: PUSH
21185: LD_INT 33
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: LIST
21199: PPUSH
21200: CALL_OW 69
21204: ST_TO_ADDR
// if not tmp then
21205: LD_VAR 0 1
21209: NOT
21210: IFFALSE 21214
// exit ;
21212: GO 21251
// for i in tmp do
21214: LD_ADDR_VAR 0 2
21218: PUSH
21219: LD_VAR 0 1
21223: PUSH
21224: FOR_IN
21225: IFFALSE 21249
// if IsControledBy ( i ) then
21227: LD_VAR 0 2
21231: PPUSH
21232: CALL_OW 312
21236: IFFALSE 21247
// ComUnlink ( i ) ;
21238: LD_VAR 0 2
21242: PPUSH
21243: CALL_OW 136
21247: GO 21224
21249: POP
21250: POP
// end ;
21251: PPOPN 2
21253: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21254: LD_EXP 39
21258: PUSH
21259: LD_EXP 70
21263: AND
21264: IFFALSE 21404
21266: GO 21268
21268: DISABLE
21269: LD_INT 0
21271: PPUSH
21272: PPUSH
// begin ToLua ( displayPowell(); ) ;
21273: LD_STRING displayPowell();
21275: PPUSH
21276: CALL_OW 559
// uc_side := 0 ;
21280: LD_ADDR_OWVAR 20
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// uc_nation := 2 ;
21288: LD_ADDR_OWVAR 21
21292: PUSH
21293: LD_INT 2
21295: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21296: LD_ADDR_OWVAR 37
21300: PUSH
21301: LD_INT 14
21303: ST_TO_ADDR
// vc_engine := engine_siberite ;
21304: LD_ADDR_OWVAR 39
21308: PUSH
21309: LD_INT 3
21311: ST_TO_ADDR
// vc_control := control_apeman ;
21312: LD_ADDR_OWVAR 38
21316: PUSH
21317: LD_INT 5
21319: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21320: LD_ADDR_OWVAR 40
21324: PUSH
21325: LD_INT 29
21327: ST_TO_ADDR
// un := CreateVehicle ;
21328: LD_ADDR_VAR 0 2
21332: PUSH
21333: CALL_OW 45
21337: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21338: LD_VAR 0 2
21342: PPUSH
21343: LD_INT 1
21345: PPUSH
21346: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21350: LD_INT 35
21352: PPUSH
21353: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21357: LD_VAR 0 2
21361: PPUSH
21362: LD_INT 22
21364: PUSH
21365: LD_OWVAR 2
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PPUSH
21374: CALL_OW 69
21378: PPUSH
21379: LD_VAR 0 2
21383: PPUSH
21384: CALL_OW 74
21388: PPUSH
21389: CALL_OW 115
// until IsDead ( un ) ;
21393: LD_VAR 0 2
21397: PPUSH
21398: CALL_OW 301
21402: IFFALSE 21350
// end ;
21404: PPOPN 2
21406: END
// every 0 0$1 trigger StreamModeActive and sStu do
21407: LD_EXP 39
21411: PUSH
21412: LD_EXP 78
21416: AND
21417: IFFALSE 21433
21419: GO 21421
21421: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21422: LD_STRING displayStucuk();
21424: PPUSH
21425: CALL_OW 559
// ResetFog ;
21429: CALL_OW 335
// end ;
21433: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21434: LD_EXP 39
21438: PUSH
21439: LD_EXP 71
21443: AND
21444: IFFALSE 21585
21446: GO 21448
21448: DISABLE
21449: LD_INT 0
21451: PPUSH
21452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21453: LD_ADDR_VAR 0 2
21457: PUSH
21458: LD_INT 22
21460: PUSH
21461: LD_OWVAR 2
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 21
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PPUSH
21484: CALL_OW 69
21488: ST_TO_ADDR
// if not tmp then
21489: LD_VAR 0 2
21493: NOT
21494: IFFALSE 21498
// exit ;
21496: GO 21585
// un := tmp [ rand ( 1 , tmp ) ] ;
21498: LD_ADDR_VAR 0 1
21502: PUSH
21503: LD_VAR 0 2
21507: PUSH
21508: LD_INT 1
21510: PPUSH
21511: LD_VAR 0 2
21515: PPUSH
21516: CALL_OW 12
21520: ARRAY
21521: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21522: LD_VAR 0 1
21526: PPUSH
21527: LD_INT 0
21529: PPUSH
21530: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21534: LD_VAR 0 1
21538: PPUSH
21539: LD_OWVAR 3
21543: PUSH
21544: LD_VAR 0 1
21548: DIFF
21549: PPUSH
21550: LD_VAR 0 1
21554: PPUSH
21555: CALL_OW 74
21559: PPUSH
21560: CALL_OW 115
// wait ( 0 0$20 ) ;
21564: LD_INT 700
21566: PPUSH
21567: CALL_OW 67
// SetSide ( un , your_side ) ;
21571: LD_VAR 0 1
21575: PPUSH
21576: LD_OWVAR 2
21580: PPUSH
21581: CALL_OW 235
// end ;
21585: PPOPN 2
21587: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21588: LD_EXP 39
21592: PUSH
21593: LD_EXP 72
21597: AND
21598: IFFALSE 21704
21600: GO 21602
21602: DISABLE
21603: LD_INT 0
21605: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21606: LD_ADDR_VAR 0 1
21610: PUSH
21611: LD_INT 22
21613: PUSH
21614: LD_OWVAR 2
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: LD_INT 30
21628: PUSH
21629: LD_INT 0
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 30
21638: PUSH
21639: LD_INT 1
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PPUSH
21655: CALL_OW 69
21659: ST_TO_ADDR
// if not depot then
21660: LD_VAR 0 1
21664: NOT
21665: IFFALSE 21669
// exit ;
21667: GO 21704
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21669: LD_VAR 0 1
21673: PUSH
21674: LD_INT 1
21676: ARRAY
21677: PPUSH
21678: CALL_OW 250
21682: PPUSH
21683: LD_VAR 0 1
21687: PUSH
21688: LD_INT 1
21690: ARRAY
21691: PPUSH
21692: CALL_OW 251
21696: PPUSH
21697: LD_INT 70
21699: PPUSH
21700: CALL_OW 495
// end ;
21704: PPOPN 1
21706: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21707: LD_EXP 39
21711: PUSH
21712: LD_EXP 73
21716: AND
21717: IFFALSE 21928
21719: GO 21721
21721: DISABLE
21722: LD_INT 0
21724: PPUSH
21725: PPUSH
21726: PPUSH
21727: PPUSH
21728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21729: LD_ADDR_VAR 0 5
21733: PUSH
21734: LD_INT 22
21736: PUSH
21737: LD_OWVAR 2
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 21
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PPUSH
21760: CALL_OW 69
21764: ST_TO_ADDR
// if not tmp then
21765: LD_VAR 0 5
21769: NOT
21770: IFFALSE 21774
// exit ;
21772: GO 21928
// for i in tmp do
21774: LD_ADDR_VAR 0 1
21778: PUSH
21779: LD_VAR 0 5
21783: PUSH
21784: FOR_IN
21785: IFFALSE 21926
// begin d := rand ( 0 , 5 ) ;
21787: LD_ADDR_VAR 0 4
21791: PUSH
21792: LD_INT 0
21794: PPUSH
21795: LD_INT 5
21797: PPUSH
21798: CALL_OW 12
21802: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21803: LD_ADDR_VAR 0 2
21807: PUSH
21808: LD_VAR 0 1
21812: PPUSH
21813: CALL_OW 250
21817: PPUSH
21818: LD_VAR 0 4
21822: PPUSH
21823: LD_INT 3
21825: PPUSH
21826: LD_INT 12
21828: PPUSH
21829: CALL_OW 12
21833: PPUSH
21834: CALL_OW 272
21838: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21839: LD_ADDR_VAR 0 3
21843: PUSH
21844: LD_VAR 0 1
21848: PPUSH
21849: CALL_OW 251
21853: PPUSH
21854: LD_VAR 0 4
21858: PPUSH
21859: LD_INT 3
21861: PPUSH
21862: LD_INT 12
21864: PPUSH
21865: CALL_OW 12
21869: PPUSH
21870: CALL_OW 273
21874: ST_TO_ADDR
// if ValidHex ( x , y ) then
21875: LD_VAR 0 2
21879: PPUSH
21880: LD_VAR 0 3
21884: PPUSH
21885: CALL_OW 488
21889: IFFALSE 21924
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21891: LD_VAR 0 1
21895: PPUSH
21896: LD_VAR 0 2
21900: PPUSH
21901: LD_VAR 0 3
21905: PPUSH
21906: LD_INT 3
21908: PPUSH
21909: LD_INT 6
21911: PPUSH
21912: CALL_OW 12
21916: PPUSH
21917: LD_INT 1
21919: PPUSH
21920: CALL_OW 483
// end ;
21924: GO 21784
21926: POP
21927: POP
// end ;
21928: PPOPN 5
21930: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21931: LD_EXP 39
21935: PUSH
21936: LD_EXP 74
21940: AND
21941: IFFALSE 22035
21943: GO 21945
21945: DISABLE
21946: LD_INT 0
21948: PPUSH
21949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21950: LD_ADDR_VAR 0 2
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_OWVAR 2
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 32
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 21
21979: PUSH
21980: LD_INT 2
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: LIST
21991: PPUSH
21992: CALL_OW 69
21996: ST_TO_ADDR
// if not tmp then
21997: LD_VAR 0 2
22001: NOT
22002: IFFALSE 22006
// exit ;
22004: GO 22035
// for i in tmp do
22006: LD_ADDR_VAR 0 1
22010: PUSH
22011: LD_VAR 0 2
22015: PUSH
22016: FOR_IN
22017: IFFALSE 22033
// SetFuel ( i , 0 ) ;
22019: LD_VAR 0 1
22023: PPUSH
22024: LD_INT 0
22026: PPUSH
22027: CALL_OW 240
22031: GO 22016
22033: POP
22034: POP
// end ;
22035: PPOPN 2
22037: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22038: LD_EXP 39
22042: PUSH
22043: LD_EXP 75
22047: AND
22048: IFFALSE 22114
22050: GO 22052
22052: DISABLE
22053: LD_INT 0
22055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22056: LD_ADDR_VAR 0 1
22060: PUSH
22061: LD_INT 22
22063: PUSH
22064: LD_OWVAR 2
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 30
22075: PUSH
22076: LD_INT 29
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PPUSH
22087: CALL_OW 69
22091: ST_TO_ADDR
// if not tmp then
22092: LD_VAR 0 1
22096: NOT
22097: IFFALSE 22101
// exit ;
22099: GO 22114
// DestroyUnit ( tmp [ 1 ] ) ;
22101: LD_VAR 0 1
22105: PUSH
22106: LD_INT 1
22108: ARRAY
22109: PPUSH
22110: CALL_OW 65
// end ;
22114: PPOPN 1
22116: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22117: LD_EXP 39
22121: PUSH
22122: LD_EXP 77
22126: AND
22127: IFFALSE 22256
22129: GO 22131
22131: DISABLE
22132: LD_INT 0
22134: PPUSH
// begin uc_side := 0 ;
22135: LD_ADDR_OWVAR 20
22139: PUSH
22140: LD_INT 0
22142: ST_TO_ADDR
// uc_nation := nation_arabian ;
22143: LD_ADDR_OWVAR 21
22147: PUSH
22148: LD_INT 2
22150: ST_TO_ADDR
// hc_gallery :=  ;
22151: LD_ADDR_OWVAR 33
22155: PUSH
22156: LD_STRING 
22158: ST_TO_ADDR
// hc_name :=  ;
22159: LD_ADDR_OWVAR 26
22163: PUSH
22164: LD_STRING 
22166: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22167: LD_INT 1
22169: PPUSH
22170: LD_INT 11
22172: PPUSH
22173: LD_INT 10
22175: PPUSH
22176: CALL_OW 380
// un := CreateHuman ;
22180: LD_ADDR_VAR 0 1
22184: PUSH
22185: CALL_OW 44
22189: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22190: LD_VAR 0 1
22194: PPUSH
22195: LD_INT 1
22197: PPUSH
22198: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22202: LD_INT 35
22204: PPUSH
22205: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22209: LD_VAR 0 1
22213: PPUSH
22214: LD_INT 22
22216: PUSH
22217: LD_OWVAR 2
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PPUSH
22226: CALL_OW 69
22230: PPUSH
22231: LD_VAR 0 1
22235: PPUSH
22236: CALL_OW 74
22240: PPUSH
22241: CALL_OW 115
// until IsDead ( un ) ;
22245: LD_VAR 0 1
22249: PPUSH
22250: CALL_OW 301
22254: IFFALSE 22202
// end ;
22256: PPOPN 1
22258: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22259: LD_EXP 39
22263: PUSH
22264: LD_EXP 79
22268: AND
22269: IFFALSE 22281
22271: GO 22273
22273: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22274: LD_STRING earthquake(getX(game), 0, 32)
22276: PPUSH
22277: CALL_OW 559
22281: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22282: LD_EXP 39
22286: PUSH
22287: LD_EXP 80
22291: AND
22292: IFFALSE 22383
22294: GO 22296
22296: DISABLE
22297: LD_INT 0
22299: PPUSH
// begin enable ;
22300: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22301: LD_ADDR_VAR 0 1
22305: PUSH
22306: LD_INT 22
22308: PUSH
22309: LD_OWVAR 2
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 21
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 33
22330: PUSH
22331: LD_INT 3
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: PPUSH
22343: CALL_OW 69
22347: ST_TO_ADDR
// if not tmp then
22348: LD_VAR 0 1
22352: NOT
22353: IFFALSE 22357
// exit ;
22355: GO 22383
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22357: LD_VAR 0 1
22361: PUSH
22362: LD_INT 1
22364: PPUSH
22365: LD_VAR 0 1
22369: PPUSH
22370: CALL_OW 12
22374: ARRAY
22375: PPUSH
22376: LD_INT 1
22378: PPUSH
22379: CALL_OW 234
// end ;
22383: PPOPN 1
22385: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22386: LD_EXP 39
22390: PUSH
22391: LD_EXP 81
22395: AND
22396: IFFALSE 22537
22398: GO 22400
22400: DISABLE
22401: LD_INT 0
22403: PPUSH
22404: PPUSH
22405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22406: LD_ADDR_VAR 0 3
22410: PUSH
22411: LD_INT 22
22413: PUSH
22414: LD_OWVAR 2
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 25
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PPUSH
22437: CALL_OW 69
22441: ST_TO_ADDR
// if not tmp then
22442: LD_VAR 0 3
22446: NOT
22447: IFFALSE 22451
// exit ;
22449: GO 22537
// un := tmp [ rand ( 1 , tmp ) ] ;
22451: LD_ADDR_VAR 0 2
22455: PUSH
22456: LD_VAR 0 3
22460: PUSH
22461: LD_INT 1
22463: PPUSH
22464: LD_VAR 0 3
22468: PPUSH
22469: CALL_OW 12
22473: ARRAY
22474: ST_TO_ADDR
// if Crawls ( un ) then
22475: LD_VAR 0 2
22479: PPUSH
22480: CALL_OW 318
22484: IFFALSE 22495
// ComWalk ( un ) ;
22486: LD_VAR 0 2
22490: PPUSH
22491: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22495: LD_VAR 0 2
22499: PPUSH
22500: LD_INT 9
22502: PPUSH
22503: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22507: LD_INT 28
22509: PPUSH
22510: LD_OWVAR 2
22514: PPUSH
22515: LD_INT 2
22517: PPUSH
22518: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22522: LD_INT 29
22524: PPUSH
22525: LD_OWVAR 2
22529: PPUSH
22530: LD_INT 2
22532: PPUSH
22533: CALL_OW 322
// end ;
22537: PPOPN 3
22539: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22540: LD_EXP 39
22544: PUSH
22545: LD_EXP 82
22549: AND
22550: IFFALSE 22661
22552: GO 22554
22554: DISABLE
22555: LD_INT 0
22557: PPUSH
22558: PPUSH
22559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22560: LD_ADDR_VAR 0 3
22564: PUSH
22565: LD_INT 22
22567: PUSH
22568: LD_OWVAR 2
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 25
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PPUSH
22591: CALL_OW 69
22595: ST_TO_ADDR
// if not tmp then
22596: LD_VAR 0 3
22600: NOT
22601: IFFALSE 22605
// exit ;
22603: GO 22661
// un := tmp [ rand ( 1 , tmp ) ] ;
22605: LD_ADDR_VAR 0 2
22609: PUSH
22610: LD_VAR 0 3
22614: PUSH
22615: LD_INT 1
22617: PPUSH
22618: LD_VAR 0 3
22622: PPUSH
22623: CALL_OW 12
22627: ARRAY
22628: ST_TO_ADDR
// if Crawls ( un ) then
22629: LD_VAR 0 2
22633: PPUSH
22634: CALL_OW 318
22638: IFFALSE 22649
// ComWalk ( un ) ;
22640: LD_VAR 0 2
22644: PPUSH
22645: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22649: LD_VAR 0 2
22653: PPUSH
22654: LD_INT 8
22656: PPUSH
22657: CALL_OW 336
// end ;
22661: PPOPN 3
22663: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22664: LD_EXP 39
22668: PUSH
22669: LD_EXP 83
22673: AND
22674: IFFALSE 22818
22676: GO 22678
22678: DISABLE
22679: LD_INT 0
22681: PPUSH
22682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22683: LD_ADDR_VAR 0 2
22687: PUSH
22688: LD_INT 22
22690: PUSH
22691: LD_OWVAR 2
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 21
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 34
22715: PUSH
22716: LD_INT 12
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 34
22725: PUSH
22726: LD_INT 51
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 34
22735: PUSH
22736: LD_INT 32
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: LIST
22753: PPUSH
22754: CALL_OW 69
22758: ST_TO_ADDR
// if not tmp then
22759: LD_VAR 0 2
22763: NOT
22764: IFFALSE 22768
// exit ;
22766: GO 22818
// for i in tmp do
22768: LD_ADDR_VAR 0 1
22772: PUSH
22773: LD_VAR 0 2
22777: PUSH
22778: FOR_IN
22779: IFFALSE 22816
// if GetCargo ( i , mat_artifact ) = 0 then
22781: LD_VAR 0 1
22785: PPUSH
22786: LD_INT 4
22788: PPUSH
22789: CALL_OW 289
22793: PUSH
22794: LD_INT 0
22796: EQUAL
22797: IFFALSE 22814
// SetCargo ( i , mat_siberit , 100 ) ;
22799: LD_VAR 0 1
22803: PPUSH
22804: LD_INT 3
22806: PPUSH
22807: LD_INT 100
22809: PPUSH
22810: CALL_OW 290
22814: GO 22778
22816: POP
22817: POP
// end ;
22818: PPOPN 2
22820: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22821: LD_EXP 39
22825: PUSH
22826: LD_EXP 84
22830: AND
22831: IFFALSE 23014
22833: GO 22835
22835: DISABLE
22836: LD_INT 0
22838: PPUSH
22839: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22840: LD_ADDR_VAR 0 2
22844: PUSH
22845: LD_INT 22
22847: PUSH
22848: LD_OWVAR 2
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PPUSH
22857: CALL_OW 69
22861: ST_TO_ADDR
// if not tmp then
22862: LD_VAR 0 2
22866: NOT
22867: IFFALSE 22871
// exit ;
22869: GO 23014
// for i := 1 to 2 do
22871: LD_ADDR_VAR 0 1
22875: PUSH
22876: DOUBLE
22877: LD_INT 1
22879: DEC
22880: ST_TO_ADDR
22881: LD_INT 2
22883: PUSH
22884: FOR_TO
22885: IFFALSE 23012
// begin uc_side := your_side ;
22887: LD_ADDR_OWVAR 20
22891: PUSH
22892: LD_OWVAR 2
22896: ST_TO_ADDR
// uc_nation := nation_american ;
22897: LD_ADDR_OWVAR 21
22901: PUSH
22902: LD_INT 1
22904: ST_TO_ADDR
// vc_chassis := us_morphling ;
22905: LD_ADDR_OWVAR 37
22909: PUSH
22910: LD_INT 5
22912: ST_TO_ADDR
// vc_engine := engine_siberite ;
22913: LD_ADDR_OWVAR 39
22917: PUSH
22918: LD_INT 3
22920: ST_TO_ADDR
// vc_control := control_computer ;
22921: LD_ADDR_OWVAR 38
22925: PUSH
22926: LD_INT 3
22928: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22929: LD_ADDR_OWVAR 40
22933: PUSH
22934: LD_INT 10
22936: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22937: LD_VAR 0 2
22941: PUSH
22942: LD_INT 1
22944: ARRAY
22945: PPUSH
22946: CALL_OW 310
22950: NOT
22951: IFFALSE 22998
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22953: CALL_OW 45
22957: PPUSH
22958: LD_VAR 0 2
22962: PUSH
22963: LD_INT 1
22965: ARRAY
22966: PPUSH
22967: CALL_OW 250
22971: PPUSH
22972: LD_VAR 0 2
22976: PUSH
22977: LD_INT 1
22979: ARRAY
22980: PPUSH
22981: CALL_OW 251
22985: PPUSH
22986: LD_INT 12
22988: PPUSH
22989: LD_INT 1
22991: PPUSH
22992: CALL_OW 50
22996: GO 23010
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22998: CALL_OW 45
23002: PPUSH
23003: LD_INT 1
23005: PPUSH
23006: CALL_OW 51
// end ;
23010: GO 22884
23012: POP
23013: POP
// end ;
23014: PPOPN 2
23016: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23017: LD_EXP 39
23021: PUSH
23022: LD_EXP 85
23026: AND
23027: IFFALSE 23249
23029: GO 23031
23031: DISABLE
23032: LD_INT 0
23034: PPUSH
23035: PPUSH
23036: PPUSH
23037: PPUSH
23038: PPUSH
23039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23040: LD_ADDR_VAR 0 6
23044: PUSH
23045: LD_INT 22
23047: PUSH
23048: LD_OWVAR 2
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 21
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 3
23069: PUSH
23070: LD_INT 23
23072: PUSH
23073: LD_INT 0
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: PPUSH
23089: CALL_OW 69
23093: ST_TO_ADDR
// if not tmp then
23094: LD_VAR 0 6
23098: NOT
23099: IFFALSE 23103
// exit ;
23101: GO 23249
// s1 := rand ( 1 , 4 ) ;
23103: LD_ADDR_VAR 0 2
23107: PUSH
23108: LD_INT 1
23110: PPUSH
23111: LD_INT 4
23113: PPUSH
23114: CALL_OW 12
23118: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23119: LD_ADDR_VAR 0 4
23123: PUSH
23124: LD_VAR 0 6
23128: PUSH
23129: LD_INT 1
23131: ARRAY
23132: PPUSH
23133: LD_VAR 0 2
23137: PPUSH
23138: CALL_OW 259
23142: ST_TO_ADDR
// if s1 = 1 then
23143: LD_VAR 0 2
23147: PUSH
23148: LD_INT 1
23150: EQUAL
23151: IFFALSE 23171
// s2 := rand ( 2 , 4 ) else
23153: LD_ADDR_VAR 0 3
23157: PUSH
23158: LD_INT 2
23160: PPUSH
23161: LD_INT 4
23163: PPUSH
23164: CALL_OW 12
23168: ST_TO_ADDR
23169: GO 23179
// s2 := 1 ;
23171: LD_ADDR_VAR 0 3
23175: PUSH
23176: LD_INT 1
23178: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23179: LD_ADDR_VAR 0 5
23183: PUSH
23184: LD_VAR 0 6
23188: PUSH
23189: LD_INT 1
23191: ARRAY
23192: PPUSH
23193: LD_VAR 0 3
23197: PPUSH
23198: CALL_OW 259
23202: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23203: LD_VAR 0 6
23207: PUSH
23208: LD_INT 1
23210: ARRAY
23211: PPUSH
23212: LD_VAR 0 2
23216: PPUSH
23217: LD_VAR 0 5
23221: PPUSH
23222: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23226: LD_VAR 0 6
23230: PUSH
23231: LD_INT 1
23233: ARRAY
23234: PPUSH
23235: LD_VAR 0 3
23239: PPUSH
23240: LD_VAR 0 4
23244: PPUSH
23245: CALL_OW 237
// end ;
23249: PPOPN 6
23251: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23252: LD_EXP 39
23256: PUSH
23257: LD_EXP 86
23261: AND
23262: IFFALSE 23341
23264: GO 23266
23266: DISABLE
23267: LD_INT 0
23269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23270: LD_ADDR_VAR 0 1
23274: PUSH
23275: LD_INT 22
23277: PUSH
23278: LD_OWVAR 2
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 30
23289: PUSH
23290: LD_INT 3
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PPUSH
23301: CALL_OW 69
23305: ST_TO_ADDR
// if not tmp then
23306: LD_VAR 0 1
23310: NOT
23311: IFFALSE 23315
// exit ;
23313: GO 23341
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23315: LD_VAR 0 1
23319: PUSH
23320: LD_INT 1
23322: PPUSH
23323: LD_VAR 0 1
23327: PPUSH
23328: CALL_OW 12
23332: ARRAY
23333: PPUSH
23334: LD_INT 1
23336: PPUSH
23337: CALL_OW 234
// end ;
23341: PPOPN 1
23343: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23344: LD_EXP 39
23348: PUSH
23349: LD_EXP 87
23353: AND
23354: IFFALSE 23466
23356: GO 23358
23358: DISABLE
23359: LD_INT 0
23361: PPUSH
23362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23363: LD_ADDR_VAR 0 2
23367: PUSH
23368: LD_INT 22
23370: PUSH
23371: LD_OWVAR 2
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 2
23382: PUSH
23383: LD_INT 30
23385: PUSH
23386: LD_INT 27
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 30
23395: PUSH
23396: LD_INT 26
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 30
23405: PUSH
23406: LD_INT 28
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PPUSH
23423: CALL_OW 69
23427: ST_TO_ADDR
// if not tmp then
23428: LD_VAR 0 2
23432: NOT
23433: IFFALSE 23437
// exit ;
23435: GO 23466
// for i in tmp do
23437: LD_ADDR_VAR 0 1
23441: PUSH
23442: LD_VAR 0 2
23446: PUSH
23447: FOR_IN
23448: IFFALSE 23464
// SetLives ( i , 1 ) ;
23450: LD_VAR 0 1
23454: PPUSH
23455: LD_INT 1
23457: PPUSH
23458: CALL_OW 234
23462: GO 23447
23464: POP
23465: POP
// end ;
23466: PPOPN 2
23468: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23469: LD_EXP 39
23473: PUSH
23474: LD_EXP 88
23478: AND
23479: IFFALSE 23766
23481: GO 23483
23483: DISABLE
23484: LD_INT 0
23486: PPUSH
23487: PPUSH
23488: PPUSH
// begin i := rand ( 1 , 7 ) ;
23489: LD_ADDR_VAR 0 1
23493: PUSH
23494: LD_INT 1
23496: PPUSH
23497: LD_INT 7
23499: PPUSH
23500: CALL_OW 12
23504: ST_TO_ADDR
// case i of 1 :
23505: LD_VAR 0 1
23509: PUSH
23510: LD_INT 1
23512: DOUBLE
23513: EQUAL
23514: IFTRUE 23518
23516: GO 23528
23518: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23519: LD_STRING earthquake(getX(game), 0, 32)
23521: PPUSH
23522: CALL_OW 559
23526: GO 23766
23528: LD_INT 2
23530: DOUBLE
23531: EQUAL
23532: IFTRUE 23536
23534: GO 23550
23536: POP
// begin ToLua ( displayStucuk(); ) ;
23537: LD_STRING displayStucuk();
23539: PPUSH
23540: CALL_OW 559
// ResetFog ;
23544: CALL_OW 335
// end ; 3 :
23548: GO 23766
23550: LD_INT 3
23552: DOUBLE
23553: EQUAL
23554: IFTRUE 23558
23556: GO 23662
23558: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23559: LD_ADDR_VAR 0 2
23563: PUSH
23564: LD_INT 22
23566: PUSH
23567: LD_OWVAR 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 25
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PPUSH
23590: CALL_OW 69
23594: ST_TO_ADDR
// if not tmp then
23595: LD_VAR 0 2
23599: NOT
23600: IFFALSE 23604
// exit ;
23602: GO 23766
// un := tmp [ rand ( 1 , tmp ) ] ;
23604: LD_ADDR_VAR 0 3
23608: PUSH
23609: LD_VAR 0 2
23613: PUSH
23614: LD_INT 1
23616: PPUSH
23617: LD_VAR 0 2
23621: PPUSH
23622: CALL_OW 12
23626: ARRAY
23627: ST_TO_ADDR
// if Crawls ( un ) then
23628: LD_VAR 0 3
23632: PPUSH
23633: CALL_OW 318
23637: IFFALSE 23648
// ComWalk ( un ) ;
23639: LD_VAR 0 3
23643: PPUSH
23644: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23648: LD_VAR 0 3
23652: PPUSH
23653: LD_INT 8
23655: PPUSH
23656: CALL_OW 336
// end ; 4 :
23660: GO 23766
23662: LD_INT 4
23664: DOUBLE
23665: EQUAL
23666: IFTRUE 23670
23668: GO 23744
23670: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23671: LD_ADDR_VAR 0 2
23675: PUSH
23676: LD_INT 22
23678: PUSH
23679: LD_OWVAR 2
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 30
23690: PUSH
23691: LD_INT 29
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PPUSH
23702: CALL_OW 69
23706: ST_TO_ADDR
// if not tmp then
23707: LD_VAR 0 2
23711: NOT
23712: IFFALSE 23716
// exit ;
23714: GO 23766
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23716: LD_VAR 0 2
23720: PUSH
23721: LD_INT 1
23723: ARRAY
23724: PPUSH
23725: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23729: LD_VAR 0 2
23733: PUSH
23734: LD_INT 1
23736: ARRAY
23737: PPUSH
23738: CALL_OW 65
// end ; 5 .. 7 :
23742: GO 23766
23744: LD_INT 5
23746: DOUBLE
23747: GREATEREQUAL
23748: IFFALSE 23756
23750: LD_INT 7
23752: DOUBLE
23753: LESSEQUAL
23754: IFTRUE 23758
23756: GO 23765
23758: POP
// StreamSibBomb ; end ;
23759: CALL 20003 0 0
23763: GO 23766
23765: POP
// end ;
23766: PPOPN 3
23768: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23769: LD_EXP 39
23773: PUSH
23774: LD_EXP 89
23778: AND
23779: IFFALSE 23935
23781: GO 23783
23783: DISABLE
23784: LD_INT 0
23786: PPUSH
23787: PPUSH
23788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23789: LD_ADDR_VAR 0 2
23793: PUSH
23794: LD_INT 81
23796: PUSH
23797: LD_OWVAR 2
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: LD_INT 21
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 21
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PPUSH
23838: CALL_OW 69
23842: ST_TO_ADDR
// if not tmp then
23843: LD_VAR 0 2
23847: NOT
23848: IFFALSE 23852
// exit ;
23850: GO 23935
// p := 0 ;
23852: LD_ADDR_VAR 0 3
23856: PUSH
23857: LD_INT 0
23859: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23860: LD_INT 35
23862: PPUSH
23863: CALL_OW 67
// p := p + 1 ;
23867: LD_ADDR_VAR 0 3
23871: PUSH
23872: LD_VAR 0 3
23876: PUSH
23877: LD_INT 1
23879: PLUS
23880: ST_TO_ADDR
// for i in tmp do
23881: LD_ADDR_VAR 0 1
23885: PUSH
23886: LD_VAR 0 2
23890: PUSH
23891: FOR_IN
23892: IFFALSE 23923
// if GetLives ( i ) < 1000 then
23894: LD_VAR 0 1
23898: PPUSH
23899: CALL_OW 256
23903: PUSH
23904: LD_INT 1000
23906: LESS
23907: IFFALSE 23921
// SetLives ( i , 1000 ) ;
23909: LD_VAR 0 1
23913: PPUSH
23914: LD_INT 1000
23916: PPUSH
23917: CALL_OW 234
23921: GO 23891
23923: POP
23924: POP
// until p > 20 ;
23925: LD_VAR 0 3
23929: PUSH
23930: LD_INT 20
23932: GREATER
23933: IFFALSE 23860
// end ;
23935: PPOPN 3
23937: END
// every 0 0$1 trigger StreamModeActive and sTime do
23938: LD_EXP 39
23942: PUSH
23943: LD_EXP 90
23947: AND
23948: IFFALSE 23983
23950: GO 23952
23952: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23953: LD_INT 28
23955: PPUSH
23956: LD_OWVAR 2
23960: PPUSH
23961: LD_INT 2
23963: PPUSH
23964: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23968: LD_INT 30
23970: PPUSH
23971: LD_OWVAR 2
23975: PPUSH
23976: LD_INT 2
23978: PPUSH
23979: CALL_OW 322
// end ;
23983: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23984: LD_EXP 39
23988: PUSH
23989: LD_EXP 91
23993: AND
23994: IFFALSE 24115
23996: GO 23998
23998: DISABLE
23999: LD_INT 0
24001: PPUSH
24002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24003: LD_ADDR_VAR 0 2
24007: PUSH
24008: LD_INT 22
24010: PUSH
24011: LD_OWVAR 2
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 21
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 3
24032: PUSH
24033: LD_INT 23
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: PPUSH
24052: CALL_OW 69
24056: ST_TO_ADDR
// if not tmp then
24057: LD_VAR 0 2
24061: NOT
24062: IFFALSE 24066
// exit ;
24064: GO 24115
// for i in tmp do
24066: LD_ADDR_VAR 0 1
24070: PUSH
24071: LD_VAR 0 2
24075: PUSH
24076: FOR_IN
24077: IFFALSE 24113
// begin if Crawls ( i ) then
24079: LD_VAR 0 1
24083: PPUSH
24084: CALL_OW 318
24088: IFFALSE 24099
// ComWalk ( i ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: CALL_OW 138
// SetClass ( i , 2 ) ;
24099: LD_VAR 0 1
24103: PPUSH
24104: LD_INT 2
24106: PPUSH
24107: CALL_OW 336
// end ;
24111: GO 24076
24113: POP
24114: POP
// end ;
24115: PPOPN 2
24117: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24118: LD_EXP 39
24122: PUSH
24123: LD_EXP 92
24127: AND
24128: IFFALSE 24416
24130: GO 24132
24132: DISABLE
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
24137: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24138: LD_OWVAR 2
24142: PPUSH
24143: LD_INT 9
24145: PPUSH
24146: LD_INT 1
24148: PPUSH
24149: LD_INT 1
24151: PPUSH
24152: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24156: LD_INT 9
24158: PPUSH
24159: LD_OWVAR 2
24163: PPUSH
24164: CALL_OW 343
// uc_side := 9 ;
24168: LD_ADDR_OWVAR 20
24172: PUSH
24173: LD_INT 9
24175: ST_TO_ADDR
// uc_nation := 2 ;
24176: LD_ADDR_OWVAR 21
24180: PUSH
24181: LD_INT 2
24183: ST_TO_ADDR
// hc_name := Dark Warrior ;
24184: LD_ADDR_OWVAR 26
24188: PUSH
24189: LD_STRING Dark Warrior
24191: ST_TO_ADDR
// hc_gallery :=  ;
24192: LD_ADDR_OWVAR 33
24196: PUSH
24197: LD_STRING 
24199: ST_TO_ADDR
// hc_noskilllimit := true ;
24200: LD_ADDR_OWVAR 76
24204: PUSH
24205: LD_INT 1
24207: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24208: LD_ADDR_OWVAR 31
24212: PUSH
24213: LD_INT 30
24215: PUSH
24216: LD_INT 30
24218: PUSH
24219: LD_INT 30
24221: PUSH
24222: LD_INT 30
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: ST_TO_ADDR
// un := CreateHuman ;
24231: LD_ADDR_VAR 0 3
24235: PUSH
24236: CALL_OW 44
24240: ST_TO_ADDR
// hc_noskilllimit := false ;
24241: LD_ADDR_OWVAR 76
24245: PUSH
24246: LD_INT 0
24248: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24249: LD_VAR 0 3
24253: PPUSH
24254: LD_INT 1
24256: PPUSH
24257: CALL_OW 51
// ToLua ( playRanger() ) ;
24261: LD_STRING playRanger()
24263: PPUSH
24264: CALL_OW 559
// p := 0 ;
24268: LD_ADDR_VAR 0 2
24272: PUSH
24273: LD_INT 0
24275: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24276: LD_INT 35
24278: PPUSH
24279: CALL_OW 67
// p := p + 1 ;
24283: LD_ADDR_VAR 0 2
24287: PUSH
24288: LD_VAR 0 2
24292: PUSH
24293: LD_INT 1
24295: PLUS
24296: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24297: LD_VAR 0 3
24301: PPUSH
24302: CALL_OW 256
24306: PUSH
24307: LD_INT 1000
24309: LESS
24310: IFFALSE 24324
// SetLives ( un , 1000 ) ;
24312: LD_VAR 0 3
24316: PPUSH
24317: LD_INT 1000
24319: PPUSH
24320: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24324: LD_VAR 0 3
24328: PPUSH
24329: LD_INT 81
24331: PUSH
24332: LD_OWVAR 2
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 91
24343: PUSH
24344: LD_VAR 0 3
24348: PUSH
24349: LD_INT 30
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: LIST
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PPUSH
24361: CALL_OW 69
24365: PPUSH
24366: LD_VAR 0 3
24370: PPUSH
24371: CALL_OW 74
24375: PPUSH
24376: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24380: LD_VAR 0 2
24384: PUSH
24385: LD_INT 80
24387: GREATER
24388: PUSH
24389: LD_VAR 0 3
24393: PPUSH
24394: CALL_OW 301
24398: OR
24399: IFFALSE 24276
// if un then
24401: LD_VAR 0 3
24405: IFFALSE 24416
// RemoveUnit ( un ) ;
24407: LD_VAR 0 3
24411: PPUSH
24412: CALL_OW 64
// end ;
24416: PPOPN 3
24418: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24419: LD_EXP 93
24423: IFFALSE 24539
24425: GO 24427
24427: DISABLE
24428: LD_INT 0
24430: PPUSH
24431: PPUSH
24432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24433: LD_ADDR_VAR 0 2
24437: PUSH
24438: LD_INT 81
24440: PUSH
24441: LD_OWVAR 2
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 21
24452: PUSH
24453: LD_INT 1
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PPUSH
24464: CALL_OW 69
24468: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24469: LD_STRING playComputer()
24471: PPUSH
24472: CALL_OW 559
// if not tmp then
24476: LD_VAR 0 2
24480: NOT
24481: IFFALSE 24485
// exit ;
24483: GO 24539
// for i in tmp do
24485: LD_ADDR_VAR 0 1
24489: PUSH
24490: LD_VAR 0 2
24494: PUSH
24495: FOR_IN
24496: IFFALSE 24537
// for j := 1 to 4 do
24498: LD_ADDR_VAR 0 3
24502: PUSH
24503: DOUBLE
24504: LD_INT 1
24506: DEC
24507: ST_TO_ADDR
24508: LD_INT 4
24510: PUSH
24511: FOR_TO
24512: IFFALSE 24533
// SetSkill ( i , j , 10 ) ;
24514: LD_VAR 0 1
24518: PPUSH
24519: LD_VAR 0 3
24523: PPUSH
24524: LD_INT 10
24526: PPUSH
24527: CALL_OW 237
24531: GO 24511
24533: POP
24534: POP
24535: GO 24495
24537: POP
24538: POP
// end ;
24539: PPOPN 3
24541: END
// every 0 0$1 trigger s30 do var i , tmp ;
24542: LD_EXP 94
24546: IFFALSE 24615
24548: GO 24550
24550: DISABLE
24551: LD_INT 0
24553: PPUSH
24554: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24555: LD_ADDR_VAR 0 2
24559: PUSH
24560: LD_INT 22
24562: PUSH
24563: LD_OWVAR 2
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PPUSH
24572: CALL_OW 69
24576: ST_TO_ADDR
// if not tmp then
24577: LD_VAR 0 2
24581: NOT
24582: IFFALSE 24586
// exit ;
24584: GO 24615
// for i in tmp do
24586: LD_ADDR_VAR 0 1
24590: PUSH
24591: LD_VAR 0 2
24595: PUSH
24596: FOR_IN
24597: IFFALSE 24613
// SetLives ( i , 300 ) ;
24599: LD_VAR 0 1
24603: PPUSH
24604: LD_INT 300
24606: PPUSH
24607: CALL_OW 234
24611: GO 24596
24613: POP
24614: POP
// end ;
24615: PPOPN 2
24617: END
// every 0 0$1 trigger s60 do var i , tmp ;
24618: LD_EXP 95
24622: IFFALSE 24691
24624: GO 24626
24626: DISABLE
24627: LD_INT 0
24629: PPUSH
24630: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24631: LD_ADDR_VAR 0 2
24635: PUSH
24636: LD_INT 22
24638: PUSH
24639: LD_OWVAR 2
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PPUSH
24648: CALL_OW 69
24652: ST_TO_ADDR
// if not tmp then
24653: LD_VAR 0 2
24657: NOT
24658: IFFALSE 24662
// exit ;
24660: GO 24691
// for i in tmp do
24662: LD_ADDR_VAR 0 1
24666: PUSH
24667: LD_VAR 0 2
24671: PUSH
24672: FOR_IN
24673: IFFALSE 24689
// SetLives ( i , 600 ) ;
24675: LD_VAR 0 1
24679: PPUSH
24680: LD_INT 600
24682: PPUSH
24683: CALL_OW 234
24687: GO 24672
24689: POP
24690: POP
// end ;
24691: PPOPN 2
24693: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24694: LD_INT 0
24696: PPUSH
// case cmd of 301 :
24697: LD_VAR 0 1
24701: PUSH
24702: LD_INT 301
24704: DOUBLE
24705: EQUAL
24706: IFTRUE 24710
24708: GO 24742
24710: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24711: LD_VAR 0 6
24715: PPUSH
24716: LD_VAR 0 7
24720: PPUSH
24721: LD_VAR 0 8
24725: PPUSH
24726: LD_VAR 0 4
24730: PPUSH
24731: LD_VAR 0 5
24735: PPUSH
24736: CALL 25943 0 5
24740: GO 24863
24742: LD_INT 302
24744: DOUBLE
24745: EQUAL
24746: IFTRUE 24750
24748: GO 24787
24750: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24751: LD_VAR 0 6
24755: PPUSH
24756: LD_VAR 0 7
24760: PPUSH
24761: LD_VAR 0 8
24765: PPUSH
24766: LD_VAR 0 9
24770: PPUSH
24771: LD_VAR 0 4
24775: PPUSH
24776: LD_VAR 0 5
24780: PPUSH
24781: CALL 26034 0 6
24785: GO 24863
24787: LD_INT 303
24789: DOUBLE
24790: EQUAL
24791: IFTRUE 24795
24793: GO 24832
24795: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24796: LD_VAR 0 6
24800: PPUSH
24801: LD_VAR 0 7
24805: PPUSH
24806: LD_VAR 0 8
24810: PPUSH
24811: LD_VAR 0 9
24815: PPUSH
24816: LD_VAR 0 4
24820: PPUSH
24821: LD_VAR 0 5
24825: PPUSH
24826: CALL 24868 0 6
24830: GO 24863
24832: LD_INT 304
24834: DOUBLE
24835: EQUAL
24836: IFTRUE 24840
24838: GO 24862
24840: POP
// hHackTeleport ( unit , x , y ) ; end ;
24841: LD_VAR 0 2
24845: PPUSH
24846: LD_VAR 0 4
24850: PPUSH
24851: LD_VAR 0 5
24855: PPUSH
24856: CALL 26627 0 3
24860: GO 24863
24862: POP
// end ;
24863: LD_VAR 0 12
24867: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24868: LD_INT 0
24870: PPUSH
24871: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24872: LD_VAR 0 1
24876: PUSH
24877: LD_INT 1
24879: LESS
24880: PUSH
24881: LD_VAR 0 1
24885: PUSH
24886: LD_INT 3
24888: GREATER
24889: OR
24890: PUSH
24891: LD_VAR 0 5
24895: PPUSH
24896: LD_VAR 0 6
24900: PPUSH
24901: CALL_OW 428
24905: OR
24906: IFFALSE 24910
// exit ;
24908: GO 25630
// uc_side := your_side ;
24910: LD_ADDR_OWVAR 20
24914: PUSH
24915: LD_OWVAR 2
24919: ST_TO_ADDR
// uc_nation := nation ;
24920: LD_ADDR_OWVAR 21
24924: PUSH
24925: LD_VAR 0 1
24929: ST_TO_ADDR
// bc_level = 1 ;
24930: LD_ADDR_OWVAR 43
24934: PUSH
24935: LD_INT 1
24937: ST_TO_ADDR
// case btype of 1 :
24938: LD_VAR 0 2
24942: PUSH
24943: LD_INT 1
24945: DOUBLE
24946: EQUAL
24947: IFTRUE 24951
24949: GO 24962
24951: POP
// bc_type := b_depot ; 2 :
24952: LD_ADDR_OWVAR 42
24956: PUSH
24957: LD_INT 0
24959: ST_TO_ADDR
24960: GO 25574
24962: LD_INT 2
24964: DOUBLE
24965: EQUAL
24966: IFTRUE 24970
24968: GO 24981
24970: POP
// bc_type := b_warehouse ; 3 :
24971: LD_ADDR_OWVAR 42
24975: PUSH
24976: LD_INT 1
24978: ST_TO_ADDR
24979: GO 25574
24981: LD_INT 3
24983: DOUBLE
24984: EQUAL
24985: IFTRUE 24989
24987: GO 25000
24989: POP
// bc_type := b_lab ; 4 .. 9 :
24990: LD_ADDR_OWVAR 42
24994: PUSH
24995: LD_INT 6
24997: ST_TO_ADDR
24998: GO 25574
25000: LD_INT 4
25002: DOUBLE
25003: GREATEREQUAL
25004: IFFALSE 25012
25006: LD_INT 9
25008: DOUBLE
25009: LESSEQUAL
25010: IFTRUE 25014
25012: GO 25066
25014: POP
// begin bc_type := b_lab_half ;
25015: LD_ADDR_OWVAR 42
25019: PUSH
25020: LD_INT 7
25022: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25023: LD_ADDR_OWVAR 44
25027: PUSH
25028: LD_INT 10
25030: PUSH
25031: LD_INT 11
25033: PUSH
25034: LD_INT 12
25036: PUSH
25037: LD_INT 15
25039: PUSH
25040: LD_INT 14
25042: PUSH
25043: LD_INT 13
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: PUSH
25054: LD_VAR 0 2
25058: PUSH
25059: LD_INT 3
25061: MINUS
25062: ARRAY
25063: ST_TO_ADDR
// end ; 10 .. 13 :
25064: GO 25574
25066: LD_INT 10
25068: DOUBLE
25069: GREATEREQUAL
25070: IFFALSE 25078
25072: LD_INT 13
25074: DOUBLE
25075: LESSEQUAL
25076: IFTRUE 25080
25078: GO 25157
25080: POP
// begin bc_type := b_lab_full ;
25081: LD_ADDR_OWVAR 42
25085: PUSH
25086: LD_INT 8
25088: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25089: LD_ADDR_OWVAR 44
25093: PUSH
25094: LD_INT 10
25096: PUSH
25097: LD_INT 12
25099: PUSH
25100: LD_INT 14
25102: PUSH
25103: LD_INT 13
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: PUSH
25112: LD_VAR 0 2
25116: PUSH
25117: LD_INT 9
25119: MINUS
25120: ARRAY
25121: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25122: LD_ADDR_OWVAR 45
25126: PUSH
25127: LD_INT 11
25129: PUSH
25130: LD_INT 15
25132: PUSH
25133: LD_INT 12
25135: PUSH
25136: LD_INT 15
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: PUSH
25145: LD_VAR 0 2
25149: PUSH
25150: LD_INT 9
25152: MINUS
25153: ARRAY
25154: ST_TO_ADDR
// end ; 14 :
25155: GO 25574
25157: LD_INT 14
25159: DOUBLE
25160: EQUAL
25161: IFTRUE 25165
25163: GO 25176
25165: POP
// bc_type := b_workshop ; 15 :
25166: LD_ADDR_OWVAR 42
25170: PUSH
25171: LD_INT 2
25173: ST_TO_ADDR
25174: GO 25574
25176: LD_INT 15
25178: DOUBLE
25179: EQUAL
25180: IFTRUE 25184
25182: GO 25195
25184: POP
// bc_type := b_factory ; 16 :
25185: LD_ADDR_OWVAR 42
25189: PUSH
25190: LD_INT 3
25192: ST_TO_ADDR
25193: GO 25574
25195: LD_INT 16
25197: DOUBLE
25198: EQUAL
25199: IFTRUE 25203
25201: GO 25214
25203: POP
// bc_type := b_ext_gun ; 17 :
25204: LD_ADDR_OWVAR 42
25208: PUSH
25209: LD_INT 17
25211: ST_TO_ADDR
25212: GO 25574
25214: LD_INT 17
25216: DOUBLE
25217: EQUAL
25218: IFTRUE 25222
25220: GO 25250
25222: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25223: LD_ADDR_OWVAR 42
25227: PUSH
25228: LD_INT 19
25230: PUSH
25231: LD_INT 23
25233: PUSH
25234: LD_INT 19
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: LIST
25241: PUSH
25242: LD_VAR 0 1
25246: ARRAY
25247: ST_TO_ADDR
25248: GO 25574
25250: LD_INT 18
25252: DOUBLE
25253: EQUAL
25254: IFTRUE 25258
25256: GO 25269
25258: POP
// bc_type := b_ext_radar ; 19 :
25259: LD_ADDR_OWVAR 42
25263: PUSH
25264: LD_INT 20
25266: ST_TO_ADDR
25267: GO 25574
25269: LD_INT 19
25271: DOUBLE
25272: EQUAL
25273: IFTRUE 25277
25275: GO 25288
25277: POP
// bc_type := b_ext_radio ; 20 :
25278: LD_ADDR_OWVAR 42
25282: PUSH
25283: LD_INT 22
25285: ST_TO_ADDR
25286: GO 25574
25288: LD_INT 20
25290: DOUBLE
25291: EQUAL
25292: IFTRUE 25296
25294: GO 25307
25296: POP
// bc_type := b_ext_siberium ; 21 :
25297: LD_ADDR_OWVAR 42
25301: PUSH
25302: LD_INT 21
25304: ST_TO_ADDR
25305: GO 25574
25307: LD_INT 21
25309: DOUBLE
25310: EQUAL
25311: IFTRUE 25315
25313: GO 25326
25315: POP
// bc_type := b_ext_computer ; 22 :
25316: LD_ADDR_OWVAR 42
25320: PUSH
25321: LD_INT 24
25323: ST_TO_ADDR
25324: GO 25574
25326: LD_INT 22
25328: DOUBLE
25329: EQUAL
25330: IFTRUE 25334
25332: GO 25345
25334: POP
// bc_type := b_ext_track ; 23 :
25335: LD_ADDR_OWVAR 42
25339: PUSH
25340: LD_INT 16
25342: ST_TO_ADDR
25343: GO 25574
25345: LD_INT 23
25347: DOUBLE
25348: EQUAL
25349: IFTRUE 25353
25351: GO 25364
25353: POP
// bc_type := b_ext_laser ; 24 :
25354: LD_ADDR_OWVAR 42
25358: PUSH
25359: LD_INT 25
25361: ST_TO_ADDR
25362: GO 25574
25364: LD_INT 24
25366: DOUBLE
25367: EQUAL
25368: IFTRUE 25372
25370: GO 25383
25372: POP
// bc_type := b_control_tower ; 25 :
25373: LD_ADDR_OWVAR 42
25377: PUSH
25378: LD_INT 36
25380: ST_TO_ADDR
25381: GO 25574
25383: LD_INT 25
25385: DOUBLE
25386: EQUAL
25387: IFTRUE 25391
25389: GO 25402
25391: POP
// bc_type := b_breastwork ; 26 :
25392: LD_ADDR_OWVAR 42
25396: PUSH
25397: LD_INT 31
25399: ST_TO_ADDR
25400: GO 25574
25402: LD_INT 26
25404: DOUBLE
25405: EQUAL
25406: IFTRUE 25410
25408: GO 25421
25410: POP
// bc_type := b_bunker ; 27 :
25411: LD_ADDR_OWVAR 42
25415: PUSH
25416: LD_INT 32
25418: ST_TO_ADDR
25419: GO 25574
25421: LD_INT 27
25423: DOUBLE
25424: EQUAL
25425: IFTRUE 25429
25427: GO 25440
25429: POP
// bc_type := b_turret ; 28 :
25430: LD_ADDR_OWVAR 42
25434: PUSH
25435: LD_INT 33
25437: ST_TO_ADDR
25438: GO 25574
25440: LD_INT 28
25442: DOUBLE
25443: EQUAL
25444: IFTRUE 25448
25446: GO 25459
25448: POP
// bc_type := b_armoury ; 29 :
25449: LD_ADDR_OWVAR 42
25453: PUSH
25454: LD_INT 4
25456: ST_TO_ADDR
25457: GO 25574
25459: LD_INT 29
25461: DOUBLE
25462: EQUAL
25463: IFTRUE 25467
25465: GO 25478
25467: POP
// bc_type := b_barracks ; 30 :
25468: LD_ADDR_OWVAR 42
25472: PUSH
25473: LD_INT 5
25475: ST_TO_ADDR
25476: GO 25574
25478: LD_INT 30
25480: DOUBLE
25481: EQUAL
25482: IFTRUE 25486
25484: GO 25497
25486: POP
// bc_type := b_solar_power ; 31 :
25487: LD_ADDR_OWVAR 42
25491: PUSH
25492: LD_INT 27
25494: ST_TO_ADDR
25495: GO 25574
25497: LD_INT 31
25499: DOUBLE
25500: EQUAL
25501: IFTRUE 25505
25503: GO 25516
25505: POP
// bc_type := b_oil_power ; 32 :
25506: LD_ADDR_OWVAR 42
25510: PUSH
25511: LD_INT 26
25513: ST_TO_ADDR
25514: GO 25574
25516: LD_INT 32
25518: DOUBLE
25519: EQUAL
25520: IFTRUE 25524
25522: GO 25535
25524: POP
// bc_type := b_siberite_power ; 33 :
25525: LD_ADDR_OWVAR 42
25529: PUSH
25530: LD_INT 28
25532: ST_TO_ADDR
25533: GO 25574
25535: LD_INT 33
25537: DOUBLE
25538: EQUAL
25539: IFTRUE 25543
25541: GO 25554
25543: POP
// bc_type := b_oil_mine ; 34 :
25544: LD_ADDR_OWVAR 42
25548: PUSH
25549: LD_INT 29
25551: ST_TO_ADDR
25552: GO 25574
25554: LD_INT 34
25556: DOUBLE
25557: EQUAL
25558: IFTRUE 25562
25560: GO 25573
25562: POP
// bc_type := b_siberite_mine ; end ;
25563: LD_ADDR_OWVAR 42
25567: PUSH
25568: LD_INT 30
25570: ST_TO_ADDR
25571: GO 25574
25573: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25574: LD_ADDR_VAR 0 8
25578: PUSH
25579: LD_VAR 0 5
25583: PPUSH
25584: LD_VAR 0 6
25588: PPUSH
25589: LD_VAR 0 3
25593: PPUSH
25594: CALL_OW 47
25598: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25599: LD_OWVAR 42
25603: PUSH
25604: LD_INT 32
25606: PUSH
25607: LD_INT 33
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: IN
25614: IFFALSE 25630
// PlaceWeaponTurret ( b , weapon ) ;
25616: LD_VAR 0 8
25620: PPUSH
25621: LD_VAR 0 4
25625: PPUSH
25626: CALL_OW 431
// end ;
25630: LD_VAR 0 7
25634: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25635: LD_INT 0
25637: PPUSH
25638: PPUSH
25639: PPUSH
25640: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25641: LD_ADDR_VAR 0 4
25645: PUSH
25646: LD_INT 22
25648: PUSH
25649: LD_OWVAR 2
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 2
25660: PUSH
25661: LD_INT 30
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 30
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PPUSH
25690: CALL_OW 69
25694: ST_TO_ADDR
// if not tmp then
25695: LD_VAR 0 4
25699: NOT
25700: IFFALSE 25704
// exit ;
25702: GO 25763
// for i in tmp do
25704: LD_ADDR_VAR 0 2
25708: PUSH
25709: LD_VAR 0 4
25713: PUSH
25714: FOR_IN
25715: IFFALSE 25761
// for j = 1 to 3 do
25717: LD_ADDR_VAR 0 3
25721: PUSH
25722: DOUBLE
25723: LD_INT 1
25725: DEC
25726: ST_TO_ADDR
25727: LD_INT 3
25729: PUSH
25730: FOR_TO
25731: IFFALSE 25757
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25733: LD_VAR 0 2
25737: PPUSH
25738: CALL_OW 274
25742: PPUSH
25743: LD_VAR 0 3
25747: PPUSH
25748: LD_INT 99999
25750: PPUSH
25751: CALL_OW 277
25755: GO 25730
25757: POP
25758: POP
25759: GO 25714
25761: POP
25762: POP
// end ;
25763: LD_VAR 0 1
25767: RET
// export function hHackSetLevel10 ; var i , j ; begin
25768: LD_INT 0
25770: PPUSH
25771: PPUSH
25772: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25773: LD_ADDR_VAR 0 2
25777: PUSH
25778: LD_INT 21
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PPUSH
25788: CALL_OW 69
25792: PUSH
25793: FOR_IN
25794: IFFALSE 25846
// if IsSelected ( i ) then
25796: LD_VAR 0 2
25800: PPUSH
25801: CALL_OW 306
25805: IFFALSE 25844
// begin for j := 1 to 4 do
25807: LD_ADDR_VAR 0 3
25811: PUSH
25812: DOUBLE
25813: LD_INT 1
25815: DEC
25816: ST_TO_ADDR
25817: LD_INT 4
25819: PUSH
25820: FOR_TO
25821: IFFALSE 25842
// SetSkill ( i , j , 10 ) ;
25823: LD_VAR 0 2
25827: PPUSH
25828: LD_VAR 0 3
25832: PPUSH
25833: LD_INT 10
25835: PPUSH
25836: CALL_OW 237
25840: GO 25820
25842: POP
25843: POP
// end ;
25844: GO 25793
25846: POP
25847: POP
// end ;
25848: LD_VAR 0 1
25852: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25853: LD_INT 0
25855: PPUSH
25856: PPUSH
25857: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25858: LD_ADDR_VAR 0 2
25862: PUSH
25863: LD_INT 22
25865: PUSH
25866: LD_OWVAR 2
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 21
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PPUSH
25889: CALL_OW 69
25893: PUSH
25894: FOR_IN
25895: IFFALSE 25936
// begin for j := 1 to 4 do
25897: LD_ADDR_VAR 0 3
25901: PUSH
25902: DOUBLE
25903: LD_INT 1
25905: DEC
25906: ST_TO_ADDR
25907: LD_INT 4
25909: PUSH
25910: FOR_TO
25911: IFFALSE 25932
// SetSkill ( i , j , 10 ) ;
25913: LD_VAR 0 2
25917: PPUSH
25918: LD_VAR 0 3
25922: PPUSH
25923: LD_INT 10
25925: PPUSH
25926: CALL_OW 237
25930: GO 25910
25932: POP
25933: POP
// end ;
25934: GO 25894
25936: POP
25937: POP
// end ;
25938: LD_VAR 0 1
25942: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25943: LD_INT 0
25945: PPUSH
// uc_side := your_side ;
25946: LD_ADDR_OWVAR 20
25950: PUSH
25951: LD_OWVAR 2
25955: ST_TO_ADDR
// uc_nation := nation ;
25956: LD_ADDR_OWVAR 21
25960: PUSH
25961: LD_VAR 0 1
25965: ST_TO_ADDR
// InitHc ;
25966: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25970: LD_INT 0
25972: PPUSH
25973: LD_VAR 0 2
25977: PPUSH
25978: LD_VAR 0 3
25982: PPUSH
25983: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25987: LD_VAR 0 4
25991: PPUSH
25992: LD_VAR 0 5
25996: PPUSH
25997: CALL_OW 428
26001: PUSH
26002: LD_INT 0
26004: EQUAL
26005: IFFALSE 26029
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26007: CALL_OW 44
26011: PPUSH
26012: LD_VAR 0 4
26016: PPUSH
26017: LD_VAR 0 5
26021: PPUSH
26022: LD_INT 1
26024: PPUSH
26025: CALL_OW 48
// end ;
26029: LD_VAR 0 6
26033: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26034: LD_INT 0
26036: PPUSH
26037: PPUSH
// uc_side := your_side ;
26038: LD_ADDR_OWVAR 20
26042: PUSH
26043: LD_OWVAR 2
26047: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26048: LD_VAR 0 1
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: LD_INT 3
26061: PUSH
26062: LD_INT 4
26064: PUSH
26065: LD_INT 5
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: IN
26075: IFFALSE 26087
// uc_nation := nation_american else
26077: LD_ADDR_OWVAR 21
26081: PUSH
26082: LD_INT 1
26084: ST_TO_ADDR
26085: GO 26130
// if chassis in [ 11 , 12 , 13 , 14 ] then
26087: LD_VAR 0 1
26091: PUSH
26092: LD_INT 11
26094: PUSH
26095: LD_INT 12
26097: PUSH
26098: LD_INT 13
26100: PUSH
26101: LD_INT 14
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: IN
26110: IFFALSE 26122
// uc_nation := nation_arabian else
26112: LD_ADDR_OWVAR 21
26116: PUSH
26117: LD_INT 2
26119: ST_TO_ADDR
26120: GO 26130
// uc_nation := nation_russian ;
26122: LD_ADDR_OWVAR 21
26126: PUSH
26127: LD_INT 3
26129: ST_TO_ADDR
// vc_chassis := chassis ;
26130: LD_ADDR_OWVAR 37
26134: PUSH
26135: LD_VAR 0 1
26139: ST_TO_ADDR
// vc_engine := engine ;
26140: LD_ADDR_OWVAR 39
26144: PUSH
26145: LD_VAR 0 2
26149: ST_TO_ADDR
// vc_control := control ;
26150: LD_ADDR_OWVAR 38
26154: PUSH
26155: LD_VAR 0 3
26159: ST_TO_ADDR
// vc_weapon := weapon ;
26160: LD_ADDR_OWVAR 40
26164: PUSH
26165: LD_VAR 0 4
26169: ST_TO_ADDR
// un := CreateVehicle ;
26170: LD_ADDR_VAR 0 8
26174: PUSH
26175: CALL_OW 45
26179: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26180: LD_VAR 0 8
26184: PPUSH
26185: LD_INT 0
26187: PPUSH
26188: LD_INT 5
26190: PPUSH
26191: CALL_OW 12
26195: PPUSH
26196: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26200: LD_VAR 0 8
26204: PPUSH
26205: LD_VAR 0 5
26209: PPUSH
26210: LD_VAR 0 6
26214: PPUSH
26215: LD_INT 1
26217: PPUSH
26218: CALL_OW 48
// end ;
26222: LD_VAR 0 7
26226: RET
// export hInvincible ; every 1 do
26227: GO 26229
26229: DISABLE
// hInvincible := [ ] ;
26230: LD_ADDR_EXP 96
26234: PUSH
26235: EMPTY
26236: ST_TO_ADDR
26237: END
// every 10 do var i ;
26238: GO 26240
26240: DISABLE
26241: LD_INT 0
26243: PPUSH
// begin enable ;
26244: ENABLE
// if not hInvincible then
26245: LD_EXP 96
26249: NOT
26250: IFFALSE 26254
// exit ;
26252: GO 26298
// for i in hInvincible do
26254: LD_ADDR_VAR 0 1
26258: PUSH
26259: LD_EXP 96
26263: PUSH
26264: FOR_IN
26265: IFFALSE 26296
// if GetLives ( i ) < 1000 then
26267: LD_VAR 0 1
26271: PPUSH
26272: CALL_OW 256
26276: PUSH
26277: LD_INT 1000
26279: LESS
26280: IFFALSE 26294
// SetLives ( i , 1000 ) ;
26282: LD_VAR 0 1
26286: PPUSH
26287: LD_INT 1000
26289: PPUSH
26290: CALL_OW 234
26294: GO 26264
26296: POP
26297: POP
// end ;
26298: PPOPN 1
26300: END
// export function hHackInvincible ; var i ; begin
26301: LD_INT 0
26303: PPUSH
26304: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26305: LD_ADDR_VAR 0 2
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: LD_INT 21
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 21
26325: PUSH
26326: LD_INT 2
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: PPUSH
26338: CALL_OW 69
26342: PUSH
26343: FOR_IN
26344: IFFALSE 26405
// if IsSelected ( i ) then
26346: LD_VAR 0 2
26350: PPUSH
26351: CALL_OW 306
26355: IFFALSE 26403
// begin if i in hInvincible then
26357: LD_VAR 0 2
26361: PUSH
26362: LD_EXP 96
26366: IN
26367: IFFALSE 26387
// hInvincible := hInvincible diff i else
26369: LD_ADDR_EXP 96
26373: PUSH
26374: LD_EXP 96
26378: PUSH
26379: LD_VAR 0 2
26383: DIFF
26384: ST_TO_ADDR
26385: GO 26403
// hInvincible := hInvincible union i ;
26387: LD_ADDR_EXP 96
26391: PUSH
26392: LD_EXP 96
26396: PUSH
26397: LD_VAR 0 2
26401: UNION
26402: ST_TO_ADDR
// end ;
26403: GO 26343
26405: POP
26406: POP
// end ;
26407: LD_VAR 0 1
26411: RET
// export function hHackInvisible ; var i , j ; begin
26412: LD_INT 0
26414: PPUSH
26415: PPUSH
26416: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26417: LD_ADDR_VAR 0 2
26421: PUSH
26422: LD_INT 21
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PPUSH
26432: CALL_OW 69
26436: PUSH
26437: FOR_IN
26438: IFFALSE 26462
// if IsSelected ( i ) then
26440: LD_VAR 0 2
26444: PPUSH
26445: CALL_OW 306
26449: IFFALSE 26460
// ComForceInvisible ( i ) ;
26451: LD_VAR 0 2
26455: PPUSH
26456: CALL_OW 496
26460: GO 26437
26462: POP
26463: POP
// end ;
26464: LD_VAR 0 1
26468: RET
// export function hHackChangeYourSide ; begin
26469: LD_INT 0
26471: PPUSH
// if your_side = 8 then
26472: LD_OWVAR 2
26476: PUSH
26477: LD_INT 8
26479: EQUAL
26480: IFFALSE 26492
// your_side := 0 else
26482: LD_ADDR_OWVAR 2
26486: PUSH
26487: LD_INT 0
26489: ST_TO_ADDR
26490: GO 26506
// your_side := your_side + 1 ;
26492: LD_ADDR_OWVAR 2
26496: PUSH
26497: LD_OWVAR 2
26501: PUSH
26502: LD_INT 1
26504: PLUS
26505: ST_TO_ADDR
// end ;
26506: LD_VAR 0 1
26510: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26511: LD_INT 0
26513: PPUSH
26514: PPUSH
26515: PPUSH
// for i in all_units do
26516: LD_ADDR_VAR 0 2
26520: PUSH
26521: LD_OWVAR 3
26525: PUSH
26526: FOR_IN
26527: IFFALSE 26605
// if IsSelected ( i ) then
26529: LD_VAR 0 2
26533: PPUSH
26534: CALL_OW 306
26538: IFFALSE 26603
// begin j := GetSide ( i ) ;
26540: LD_ADDR_VAR 0 3
26544: PUSH
26545: LD_VAR 0 2
26549: PPUSH
26550: CALL_OW 255
26554: ST_TO_ADDR
// if j = 8 then
26555: LD_VAR 0 3
26559: PUSH
26560: LD_INT 8
26562: EQUAL
26563: IFFALSE 26575
// j := 0 else
26565: LD_ADDR_VAR 0 3
26569: PUSH
26570: LD_INT 0
26572: ST_TO_ADDR
26573: GO 26589
// j := j + 1 ;
26575: LD_ADDR_VAR 0 3
26579: PUSH
26580: LD_VAR 0 3
26584: PUSH
26585: LD_INT 1
26587: PLUS
26588: ST_TO_ADDR
// SetSide ( i , j ) ;
26589: LD_VAR 0 2
26593: PPUSH
26594: LD_VAR 0 3
26598: PPUSH
26599: CALL_OW 235
// end ;
26603: GO 26526
26605: POP
26606: POP
// end ;
26607: LD_VAR 0 1
26611: RET
// export function hHackFog ; begin
26612: LD_INT 0
26614: PPUSH
// FogOff ( true ) ;
26615: LD_INT 1
26617: PPUSH
26618: CALL_OW 344
// end ;
26622: LD_VAR 0 1
26626: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26627: LD_INT 0
26629: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26630: LD_VAR 0 1
26634: PPUSH
26635: LD_VAR 0 2
26639: PPUSH
26640: LD_VAR 0 3
26644: PPUSH
26645: LD_INT 1
26647: PPUSH
26648: LD_INT 1
26650: PPUSH
26651: CALL_OW 483
// CenterOnXY ( x , y ) ;
26655: LD_VAR 0 2
26659: PPUSH
26660: LD_VAR 0 3
26664: PPUSH
26665: CALL_OW 84
// end ;
26669: LD_VAR 0 4
26673: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26674: LD_INT 0
26676: PPUSH
26677: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26678: LD_VAR 0 1
26682: NOT
26683: PUSH
26684: LD_VAR 0 2
26688: PPUSH
26689: LD_VAR 0 3
26693: PPUSH
26694: CALL_OW 488
26698: NOT
26699: OR
26700: PUSH
26701: LD_VAR 0 1
26705: PPUSH
26706: CALL_OW 266
26710: PUSH
26711: LD_INT 3
26713: NONEQUAL
26714: PUSH
26715: LD_VAR 0 1
26719: PPUSH
26720: CALL_OW 247
26724: PUSH
26725: LD_INT 1
26727: EQUAL
26728: NOT
26729: AND
26730: OR
26731: IFFALSE 26735
// exit ;
26733: GO 26884
// if GetType ( factory ) = unit_human then
26735: LD_VAR 0 1
26739: PPUSH
26740: CALL_OW 247
26744: PUSH
26745: LD_INT 1
26747: EQUAL
26748: IFFALSE 26765
// factory := IsInUnit ( factory ) ;
26750: LD_ADDR_VAR 0 1
26754: PUSH
26755: LD_VAR 0 1
26759: PPUSH
26760: CALL_OW 310
26764: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 266
26774: PUSH
26775: LD_INT 3
26777: NONEQUAL
26778: IFFALSE 26782
// exit ;
26780: GO 26884
// if HexInfo ( x , y ) = factory then
26782: LD_VAR 0 2
26786: PPUSH
26787: LD_VAR 0 3
26791: PPUSH
26792: CALL_OW 428
26796: PUSH
26797: LD_VAR 0 1
26801: EQUAL
26802: IFFALSE 26829
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26804: LD_ADDR_EXP 97
26808: PUSH
26809: LD_EXP 97
26813: PPUSH
26814: LD_VAR 0 1
26818: PPUSH
26819: LD_INT 0
26821: PPUSH
26822: CALL_OW 1
26826: ST_TO_ADDR
26827: GO 26880
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26829: LD_ADDR_EXP 97
26833: PUSH
26834: LD_EXP 97
26838: PPUSH
26839: LD_VAR 0 1
26843: PPUSH
26844: LD_VAR 0 1
26848: PPUSH
26849: CALL_OW 255
26853: PUSH
26854: LD_VAR 0 1
26858: PUSH
26859: LD_VAR 0 2
26863: PUSH
26864: LD_VAR 0 3
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: PPUSH
26875: CALL_OW 1
26879: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26880: CALL 26889 0 0
// end ;
26884: LD_VAR 0 4
26888: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26889: LD_INT 0
26891: PPUSH
26892: PPUSH
26893: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26894: LD_STRING resetFactoryWaypoint();
26896: PPUSH
26897: CALL_OW 559
// if factoryWaypoints then
26901: LD_EXP 97
26905: IFFALSE 27031
// begin list := PrepareArray ( factoryWaypoints ) ;
26907: LD_ADDR_VAR 0 3
26911: PUSH
26912: LD_EXP 97
26916: PPUSH
26917: CALL 73463 0 1
26921: ST_TO_ADDR
// for i := 1 to list do
26922: LD_ADDR_VAR 0 2
26926: PUSH
26927: DOUBLE
26928: LD_INT 1
26930: DEC
26931: ST_TO_ADDR
26932: LD_VAR 0 3
26936: PUSH
26937: FOR_TO
26938: IFFALSE 27029
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26940: LD_STRING setFactoryWaypointXY(
26942: PUSH
26943: LD_VAR 0 3
26947: PUSH
26948: LD_VAR 0 2
26952: ARRAY
26953: PUSH
26954: LD_INT 1
26956: ARRAY
26957: STR
26958: PUSH
26959: LD_STRING ,
26961: STR
26962: PUSH
26963: LD_VAR 0 3
26967: PUSH
26968: LD_VAR 0 2
26972: ARRAY
26973: PUSH
26974: LD_INT 2
26976: ARRAY
26977: STR
26978: PUSH
26979: LD_STRING ,
26981: STR
26982: PUSH
26983: LD_VAR 0 3
26987: PUSH
26988: LD_VAR 0 2
26992: ARRAY
26993: PUSH
26994: LD_INT 3
26996: ARRAY
26997: STR
26998: PUSH
26999: LD_STRING ,
27001: STR
27002: PUSH
27003: LD_VAR 0 3
27007: PUSH
27008: LD_VAR 0 2
27012: ARRAY
27013: PUSH
27014: LD_INT 4
27016: ARRAY
27017: STR
27018: PUSH
27019: LD_STRING )
27021: STR
27022: PPUSH
27023: CALL_OW 559
27027: GO 26937
27029: POP
27030: POP
// end ; end ;
27031: LD_VAR 0 1
27035: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27036: LD_INT 0
27038: PPUSH
// if HexInfo ( x , y ) = warehouse then
27039: LD_VAR 0 2
27043: PPUSH
27044: LD_VAR 0 3
27048: PPUSH
27049: CALL_OW 428
27053: PUSH
27054: LD_VAR 0 1
27058: EQUAL
27059: IFFALSE 27086
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27061: LD_ADDR_EXP 98
27065: PUSH
27066: LD_EXP 98
27070: PPUSH
27071: LD_VAR 0 1
27075: PPUSH
27076: LD_INT 0
27078: PPUSH
27079: CALL_OW 1
27083: ST_TO_ADDR
27084: GO 27137
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27086: LD_ADDR_EXP 98
27090: PUSH
27091: LD_EXP 98
27095: PPUSH
27096: LD_VAR 0 1
27100: PPUSH
27101: LD_VAR 0 1
27105: PPUSH
27106: CALL_OW 255
27110: PUSH
27111: LD_VAR 0 1
27115: PUSH
27116: LD_VAR 0 2
27120: PUSH
27121: LD_VAR 0 3
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: PPUSH
27132: CALL_OW 1
27136: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27137: CALL 27146 0 0
// end ;
27141: LD_VAR 0 4
27145: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27146: LD_INT 0
27148: PPUSH
27149: PPUSH
27150: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27151: LD_STRING resetWarehouseGatheringPoints();
27153: PPUSH
27154: CALL_OW 559
// if warehouseGatheringPoints then
27158: LD_EXP 98
27162: IFFALSE 27288
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27164: LD_ADDR_VAR 0 3
27168: PUSH
27169: LD_EXP 98
27173: PPUSH
27174: CALL 73463 0 1
27178: ST_TO_ADDR
// for i := 1 to list do
27179: LD_ADDR_VAR 0 2
27183: PUSH
27184: DOUBLE
27185: LD_INT 1
27187: DEC
27188: ST_TO_ADDR
27189: LD_VAR 0 3
27193: PUSH
27194: FOR_TO
27195: IFFALSE 27286
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27197: LD_STRING setWarehouseGatheringPointXY(
27199: PUSH
27200: LD_VAR 0 3
27204: PUSH
27205: LD_VAR 0 2
27209: ARRAY
27210: PUSH
27211: LD_INT 1
27213: ARRAY
27214: STR
27215: PUSH
27216: LD_STRING ,
27218: STR
27219: PUSH
27220: LD_VAR 0 3
27224: PUSH
27225: LD_VAR 0 2
27229: ARRAY
27230: PUSH
27231: LD_INT 2
27233: ARRAY
27234: STR
27235: PUSH
27236: LD_STRING ,
27238: STR
27239: PUSH
27240: LD_VAR 0 3
27244: PUSH
27245: LD_VAR 0 2
27249: ARRAY
27250: PUSH
27251: LD_INT 3
27253: ARRAY
27254: STR
27255: PUSH
27256: LD_STRING ,
27258: STR
27259: PUSH
27260: LD_VAR 0 3
27264: PUSH
27265: LD_VAR 0 2
27269: ARRAY
27270: PUSH
27271: LD_INT 4
27273: ARRAY
27274: STR
27275: PUSH
27276: LD_STRING )
27278: STR
27279: PPUSH
27280: CALL_OW 559
27284: GO 27194
27286: POP
27287: POP
// end ; end ;
27288: LD_VAR 0 1
27292: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27293: LD_EXP 98
27297: IFFALSE 27984
27299: GO 27301
27301: DISABLE
27302: LD_INT 0
27304: PPUSH
27305: PPUSH
27306: PPUSH
27307: PPUSH
27308: PPUSH
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
// begin enable ;
27313: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27314: LD_ADDR_VAR 0 3
27318: PUSH
27319: LD_EXP 98
27323: PPUSH
27324: CALL 73463 0 1
27328: ST_TO_ADDR
// if not list then
27329: LD_VAR 0 3
27333: NOT
27334: IFFALSE 27338
// exit ;
27336: GO 27984
// for i := 1 to list do
27338: LD_ADDR_VAR 0 1
27342: PUSH
27343: DOUBLE
27344: LD_INT 1
27346: DEC
27347: ST_TO_ADDR
27348: LD_VAR 0 3
27352: PUSH
27353: FOR_TO
27354: IFFALSE 27982
// begin depot := list [ i ] [ 2 ] ;
27356: LD_ADDR_VAR 0 8
27360: PUSH
27361: LD_VAR 0 3
27365: PUSH
27366: LD_VAR 0 1
27370: ARRAY
27371: PUSH
27372: LD_INT 2
27374: ARRAY
27375: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27376: LD_ADDR_VAR 0 5
27380: PUSH
27381: LD_VAR 0 3
27385: PUSH
27386: LD_VAR 0 1
27390: ARRAY
27391: PUSH
27392: LD_INT 1
27394: ARRAY
27395: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27396: LD_VAR 0 8
27400: PPUSH
27401: CALL_OW 301
27405: PUSH
27406: LD_VAR 0 5
27410: PUSH
27411: LD_VAR 0 8
27415: PPUSH
27416: CALL_OW 255
27420: NONEQUAL
27421: OR
27422: IFFALSE 27451
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27424: LD_ADDR_EXP 98
27428: PUSH
27429: LD_EXP 98
27433: PPUSH
27434: LD_VAR 0 8
27438: PPUSH
27439: LD_INT 0
27441: PPUSH
27442: CALL_OW 1
27446: ST_TO_ADDR
// exit ;
27447: POP
27448: POP
27449: GO 27984
// end ; x := list [ i ] [ 3 ] ;
27451: LD_ADDR_VAR 0 6
27455: PUSH
27456: LD_VAR 0 3
27460: PUSH
27461: LD_VAR 0 1
27465: ARRAY
27466: PUSH
27467: LD_INT 3
27469: ARRAY
27470: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27471: LD_ADDR_VAR 0 7
27475: PUSH
27476: LD_VAR 0 3
27480: PUSH
27481: LD_VAR 0 1
27485: ARRAY
27486: PUSH
27487: LD_INT 4
27489: ARRAY
27490: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27491: LD_ADDR_VAR 0 9
27495: PUSH
27496: LD_VAR 0 6
27500: PPUSH
27501: LD_VAR 0 7
27505: PPUSH
27506: LD_INT 16
27508: PPUSH
27509: CALL 72047 0 3
27513: ST_TO_ADDR
// if not cratesNearbyPoint then
27514: LD_VAR 0 9
27518: NOT
27519: IFFALSE 27525
// exit ;
27521: POP
27522: POP
27523: GO 27984
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27525: LD_ADDR_VAR 0 4
27529: PUSH
27530: LD_INT 22
27532: PUSH
27533: LD_VAR 0 5
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 3
27544: PUSH
27545: LD_INT 60
27547: PUSH
27548: EMPTY
27549: LIST
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 91
27557: PUSH
27558: LD_VAR 0 8
27562: PUSH
27563: LD_INT 6
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: LD_INT 25
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 25
27586: PUSH
27587: LD_INT 16
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: PPUSH
27605: CALL_OW 69
27609: PUSH
27610: LD_VAR 0 8
27614: PPUSH
27615: CALL_OW 313
27619: PPUSH
27620: LD_INT 3
27622: PUSH
27623: LD_INT 60
27625: PUSH
27626: EMPTY
27627: LIST
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: LD_INT 25
27638: PUSH
27639: LD_INT 2
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 25
27648: PUSH
27649: LD_INT 16
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PPUSH
27665: CALL_OW 72
27669: UNION
27670: ST_TO_ADDR
// if tmp then
27671: LD_VAR 0 4
27675: IFFALSE 27755
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27677: LD_ADDR_VAR 0 4
27681: PUSH
27682: LD_VAR 0 4
27686: PPUSH
27687: LD_INT 3
27689: PPUSH
27690: CALL 70014 0 2
27694: ST_TO_ADDR
// for j in tmp do
27695: LD_ADDR_VAR 0 2
27699: PUSH
27700: LD_VAR 0 4
27704: PUSH
27705: FOR_IN
27706: IFFALSE 27749
// begin if IsInUnit ( j ) then
27708: LD_VAR 0 2
27712: PPUSH
27713: CALL_OW 310
27717: IFFALSE 27728
// ComExit ( j ) ;
27719: LD_VAR 0 2
27723: PPUSH
27724: CALL 70097 0 1
// AddComCollect ( j , x , y ) ;
27728: LD_VAR 0 2
27732: PPUSH
27733: LD_VAR 0 6
27737: PPUSH
27738: LD_VAR 0 7
27742: PPUSH
27743: CALL_OW 177
// end ;
27747: GO 27705
27749: POP
27750: POP
// exit ;
27751: POP
27752: POP
27753: GO 27984
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27755: LD_ADDR_VAR 0 4
27759: PUSH
27760: LD_INT 22
27762: PUSH
27763: LD_VAR 0 5
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 91
27774: PUSH
27775: LD_VAR 0 8
27779: PUSH
27780: LD_INT 8
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 2
27790: PUSH
27791: LD_INT 34
27793: PUSH
27794: LD_INT 12
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 34
27803: PUSH
27804: LD_INT 51
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 34
27813: PUSH
27814: LD_INT 32
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 34
27823: PUSH
27824: LD_EXP 22
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: LIST
27844: PPUSH
27845: CALL_OW 69
27849: ST_TO_ADDR
// if tmp then
27850: LD_VAR 0 4
27854: IFFALSE 27980
// begin for j in tmp do
27856: LD_ADDR_VAR 0 2
27860: PUSH
27861: LD_VAR 0 4
27865: PUSH
27866: FOR_IN
27867: IFFALSE 27978
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27869: LD_VAR 0 2
27873: PPUSH
27874: CALL_OW 262
27878: PUSH
27879: LD_INT 3
27881: EQUAL
27882: PUSH
27883: LD_VAR 0 2
27887: PPUSH
27888: CALL_OW 261
27892: PUSH
27893: LD_INT 20
27895: GREATER
27896: OR
27897: PUSH
27898: LD_VAR 0 2
27902: PPUSH
27903: CALL_OW 314
27907: NOT
27908: AND
27909: PUSH
27910: LD_VAR 0 2
27914: PPUSH
27915: CALL_OW 263
27919: PUSH
27920: LD_INT 1
27922: NONEQUAL
27923: PUSH
27924: LD_VAR 0 2
27928: PPUSH
27929: CALL_OW 311
27933: OR
27934: AND
27935: IFFALSE 27976
// begin ComCollect ( j , x , y ) ;
27937: LD_VAR 0 2
27941: PPUSH
27942: LD_VAR 0 6
27946: PPUSH
27947: LD_VAR 0 7
27951: PPUSH
27952: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27956: LD_VAR 0 2
27960: PPUSH
27961: LD_VAR 0 8
27965: PPUSH
27966: CALL_OW 172
// exit ;
27970: POP
27971: POP
27972: POP
27973: POP
27974: GO 27984
// end ;
27976: GO 27866
27978: POP
27979: POP
// end ; end ;
27980: GO 27353
27982: POP
27983: POP
// end ; end_of_file
27984: PPOPN 9
27986: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27987: LD_INT 0
27989: PPUSH
27990: PPUSH
27991: PPUSH
27992: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27993: LD_VAR 0 1
27997: PPUSH
27998: CALL_OW 264
28002: PUSH
28003: LD_EXP 25
28007: EQUAL
28008: IFFALSE 28080
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28010: LD_INT 68
28012: PPUSH
28013: LD_VAR 0 1
28017: PPUSH
28018: CALL_OW 255
28022: PPUSH
28023: CALL_OW 321
28027: PUSH
28028: LD_INT 2
28030: EQUAL
28031: IFFALSE 28043
// eff := 70 else
28033: LD_ADDR_VAR 0 4
28037: PUSH
28038: LD_INT 70
28040: ST_TO_ADDR
28041: GO 28051
// eff := 30 ;
28043: LD_ADDR_VAR 0 4
28047: PUSH
28048: LD_INT 30
28050: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28051: LD_VAR 0 1
28055: PPUSH
28056: CALL_OW 250
28060: PPUSH
28061: LD_VAR 0 1
28065: PPUSH
28066: CALL_OW 251
28070: PPUSH
28071: LD_VAR 0 4
28075: PPUSH
28076: CALL_OW 495
// end ; end ;
28080: LD_VAR 0 2
28084: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28085: LD_INT 0
28087: PPUSH
// end ;
28088: LD_VAR 0 4
28092: RET
// export function SOS_Command ( cmd ) ; begin
28093: LD_INT 0
28095: PPUSH
// end ;
28096: LD_VAR 0 2
28100: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28101: LD_INT 0
28103: PPUSH
// end ;
28104: LD_VAR 0 6
28108: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28109: LD_INT 0
28111: PPUSH
28112: PPUSH
// if not vehicle or not factory then
28113: LD_VAR 0 1
28117: NOT
28118: PUSH
28119: LD_VAR 0 2
28123: NOT
28124: OR
28125: IFFALSE 28129
// exit ;
28127: GO 28360
// if factoryWaypoints >= factory then
28129: LD_EXP 97
28133: PUSH
28134: LD_VAR 0 2
28138: GREATEREQUAL
28139: IFFALSE 28360
// if factoryWaypoints [ factory ] then
28141: LD_EXP 97
28145: PUSH
28146: LD_VAR 0 2
28150: ARRAY
28151: IFFALSE 28360
// begin if GetControl ( vehicle ) = control_manual then
28153: LD_VAR 0 1
28157: PPUSH
28158: CALL_OW 263
28162: PUSH
28163: LD_INT 1
28165: EQUAL
28166: IFFALSE 28247
// begin driver := IsDrivenBy ( vehicle ) ;
28168: LD_ADDR_VAR 0 4
28172: PUSH
28173: LD_VAR 0 1
28177: PPUSH
28178: CALL_OW 311
28182: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28183: LD_VAR 0 4
28187: PPUSH
28188: LD_EXP 97
28192: PUSH
28193: LD_VAR 0 2
28197: ARRAY
28198: PUSH
28199: LD_INT 3
28201: ARRAY
28202: PPUSH
28203: LD_EXP 97
28207: PUSH
28208: LD_VAR 0 2
28212: ARRAY
28213: PUSH
28214: LD_INT 4
28216: ARRAY
28217: PPUSH
28218: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28222: LD_VAR 0 4
28226: PPUSH
28227: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28231: LD_VAR 0 4
28235: PPUSH
28236: LD_VAR 0 2
28240: PPUSH
28241: CALL_OW 180
// end else
28245: GO 28360
// if GetControl ( vehicle ) = control_remote then
28247: LD_VAR 0 1
28251: PPUSH
28252: CALL_OW 263
28256: PUSH
28257: LD_INT 2
28259: EQUAL
28260: IFFALSE 28321
// begin wait ( 0 0$2 ) ;
28262: LD_INT 70
28264: PPUSH
28265: CALL_OW 67
// if Connect ( vehicle ) then
28269: LD_VAR 0 1
28273: PPUSH
28274: CALL 40408 0 1
28278: IFFALSE 28319
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28280: LD_VAR 0 1
28284: PPUSH
28285: LD_EXP 97
28289: PUSH
28290: LD_VAR 0 2
28294: ARRAY
28295: PUSH
28296: LD_INT 3
28298: ARRAY
28299: PPUSH
28300: LD_EXP 97
28304: PUSH
28305: LD_VAR 0 2
28309: ARRAY
28310: PUSH
28311: LD_INT 4
28313: ARRAY
28314: PPUSH
28315: CALL_OW 171
// end else
28319: GO 28360
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28321: LD_VAR 0 1
28325: PPUSH
28326: LD_EXP 97
28330: PUSH
28331: LD_VAR 0 2
28335: ARRAY
28336: PUSH
28337: LD_INT 3
28339: ARRAY
28340: PPUSH
28341: LD_EXP 97
28345: PUSH
28346: LD_VAR 0 2
28350: ARRAY
28351: PUSH
28352: LD_INT 4
28354: ARRAY
28355: PPUSH
28356: CALL_OW 171
// end ; end ;
28360: LD_VAR 0 3
28364: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28365: LD_INT 0
28367: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28368: LD_VAR 0 1
28372: PUSH
28373: LD_INT 250
28375: EQUAL
28376: PUSH
28377: LD_VAR 0 2
28381: PPUSH
28382: CALL_OW 264
28386: PUSH
28387: LD_EXP 28
28391: EQUAL
28392: AND
28393: IFFALSE 28414
// MinerPlaceMine ( unit , x , y ) ;
28395: LD_VAR 0 2
28399: PPUSH
28400: LD_VAR 0 4
28404: PPUSH
28405: LD_VAR 0 5
28409: PPUSH
28410: CALL 30813 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28414: LD_VAR 0 1
28418: PUSH
28419: LD_INT 251
28421: EQUAL
28422: PUSH
28423: LD_VAR 0 2
28427: PPUSH
28428: CALL_OW 264
28432: PUSH
28433: LD_EXP 28
28437: EQUAL
28438: AND
28439: IFFALSE 28460
// MinerDetonateMine ( unit , x , y ) ;
28441: LD_VAR 0 2
28445: PPUSH
28446: LD_VAR 0 4
28450: PPUSH
28451: LD_VAR 0 5
28455: PPUSH
28456: CALL 31090 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28460: LD_VAR 0 1
28464: PUSH
28465: LD_INT 252
28467: EQUAL
28468: PUSH
28469: LD_VAR 0 2
28473: PPUSH
28474: CALL_OW 264
28478: PUSH
28479: LD_EXP 28
28483: EQUAL
28484: AND
28485: IFFALSE 28506
// MinerCreateMinefield ( unit , x , y ) ;
28487: LD_VAR 0 2
28491: PPUSH
28492: LD_VAR 0 4
28496: PPUSH
28497: LD_VAR 0 5
28501: PPUSH
28502: CALL 31507 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28506: LD_VAR 0 1
28510: PUSH
28511: LD_INT 253
28513: EQUAL
28514: PUSH
28515: LD_VAR 0 2
28519: PPUSH
28520: CALL_OW 257
28524: PUSH
28525: LD_INT 5
28527: EQUAL
28528: AND
28529: IFFALSE 28550
// ComBinocular ( unit , x , y ) ;
28531: LD_VAR 0 2
28535: PPUSH
28536: LD_VAR 0 4
28540: PPUSH
28541: LD_VAR 0 5
28545: PPUSH
28546: CALL 31878 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28550: LD_VAR 0 1
28554: PUSH
28555: LD_INT 254
28557: EQUAL
28558: PUSH
28559: LD_VAR 0 2
28563: PPUSH
28564: CALL_OW 264
28568: PUSH
28569: LD_EXP 23
28573: EQUAL
28574: AND
28575: PUSH
28576: LD_VAR 0 3
28580: PPUSH
28581: CALL_OW 263
28585: PUSH
28586: LD_INT 3
28588: EQUAL
28589: AND
28590: IFFALSE 28606
// HackDestroyVehicle ( unit , selectedUnit ) ;
28592: LD_VAR 0 2
28596: PPUSH
28597: LD_VAR 0 3
28601: PPUSH
28602: CALL 30173 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28606: LD_VAR 0 1
28610: PUSH
28611: LD_INT 255
28613: EQUAL
28614: PUSH
28615: LD_VAR 0 2
28619: PPUSH
28620: CALL_OW 264
28624: PUSH
28625: LD_INT 14
28627: PUSH
28628: LD_INT 53
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: IN
28635: AND
28636: PUSH
28637: LD_VAR 0 4
28641: PPUSH
28642: LD_VAR 0 5
28646: PPUSH
28647: CALL_OW 488
28651: AND
28652: IFFALSE 28676
// CutTreeXYR ( unit , x , y , 12 ) ;
28654: LD_VAR 0 2
28658: PPUSH
28659: LD_VAR 0 4
28663: PPUSH
28664: LD_VAR 0 5
28668: PPUSH
28669: LD_INT 12
28671: PPUSH
28672: CALL 28739 0 4
// if cmd = 256 then
28676: LD_VAR 0 1
28680: PUSH
28681: LD_INT 256
28683: EQUAL
28684: IFFALSE 28705
// SetFactoryWaypoint ( unit , x , y ) ;
28686: LD_VAR 0 2
28690: PPUSH
28691: LD_VAR 0 4
28695: PPUSH
28696: LD_VAR 0 5
28700: PPUSH
28701: CALL 26674 0 3
// if cmd = 257 then
28705: LD_VAR 0 1
28709: PUSH
28710: LD_INT 257
28712: EQUAL
28713: IFFALSE 28734
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28715: LD_VAR 0 2
28719: PPUSH
28720: LD_VAR 0 4
28724: PPUSH
28725: LD_VAR 0 5
28729: PPUSH
28730: CALL 27036 0 3
// end ;
28734: LD_VAR 0 6
28738: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28739: LD_INT 0
28741: PPUSH
28742: PPUSH
28743: PPUSH
28744: PPUSH
28745: PPUSH
28746: PPUSH
28747: PPUSH
28748: PPUSH
28749: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28750: LD_VAR 0 1
28754: NOT
28755: PUSH
28756: LD_VAR 0 2
28760: PPUSH
28761: LD_VAR 0 3
28765: PPUSH
28766: CALL_OW 488
28770: NOT
28771: OR
28772: PUSH
28773: LD_VAR 0 4
28777: NOT
28778: OR
28779: IFFALSE 28783
// exit ;
28781: GO 29123
// list := [ ] ;
28783: LD_ADDR_VAR 0 13
28787: PUSH
28788: EMPTY
28789: ST_TO_ADDR
// if x - r < 0 then
28790: LD_VAR 0 2
28794: PUSH
28795: LD_VAR 0 4
28799: MINUS
28800: PUSH
28801: LD_INT 0
28803: LESS
28804: IFFALSE 28816
// min_x := 0 else
28806: LD_ADDR_VAR 0 7
28810: PUSH
28811: LD_INT 0
28813: ST_TO_ADDR
28814: GO 28832
// min_x := x - r ;
28816: LD_ADDR_VAR 0 7
28820: PUSH
28821: LD_VAR 0 2
28825: PUSH
28826: LD_VAR 0 4
28830: MINUS
28831: ST_TO_ADDR
// if y - r < 0 then
28832: LD_VAR 0 3
28836: PUSH
28837: LD_VAR 0 4
28841: MINUS
28842: PUSH
28843: LD_INT 0
28845: LESS
28846: IFFALSE 28858
// min_y := 0 else
28848: LD_ADDR_VAR 0 8
28852: PUSH
28853: LD_INT 0
28855: ST_TO_ADDR
28856: GO 28874
// min_y := y - r ;
28858: LD_ADDR_VAR 0 8
28862: PUSH
28863: LD_VAR 0 3
28867: PUSH
28868: LD_VAR 0 4
28872: MINUS
28873: ST_TO_ADDR
// max_x := x + r ;
28874: LD_ADDR_VAR 0 9
28878: PUSH
28879: LD_VAR 0 2
28883: PUSH
28884: LD_VAR 0 4
28888: PLUS
28889: ST_TO_ADDR
// max_y := y + r ;
28890: LD_ADDR_VAR 0 10
28894: PUSH
28895: LD_VAR 0 3
28899: PUSH
28900: LD_VAR 0 4
28904: PLUS
28905: ST_TO_ADDR
// for _x = min_x to max_x do
28906: LD_ADDR_VAR 0 11
28910: PUSH
28911: DOUBLE
28912: LD_VAR 0 7
28916: DEC
28917: ST_TO_ADDR
28918: LD_VAR 0 9
28922: PUSH
28923: FOR_TO
28924: IFFALSE 29041
// for _y = min_y to max_y do
28926: LD_ADDR_VAR 0 12
28930: PUSH
28931: DOUBLE
28932: LD_VAR 0 8
28936: DEC
28937: ST_TO_ADDR
28938: LD_VAR 0 10
28942: PUSH
28943: FOR_TO
28944: IFFALSE 29037
// begin if not ValidHex ( _x , _y ) then
28946: LD_VAR 0 11
28950: PPUSH
28951: LD_VAR 0 12
28955: PPUSH
28956: CALL_OW 488
28960: NOT
28961: IFFALSE 28965
// continue ;
28963: GO 28943
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28965: LD_VAR 0 11
28969: PPUSH
28970: LD_VAR 0 12
28974: PPUSH
28975: CALL_OW 351
28979: PUSH
28980: LD_VAR 0 11
28984: PPUSH
28985: LD_VAR 0 12
28989: PPUSH
28990: CALL_OW 554
28994: AND
28995: IFFALSE 29035
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28997: LD_ADDR_VAR 0 13
29001: PUSH
29002: LD_VAR 0 13
29006: PPUSH
29007: LD_VAR 0 13
29011: PUSH
29012: LD_INT 1
29014: PLUS
29015: PPUSH
29016: LD_VAR 0 11
29020: PUSH
29021: LD_VAR 0 12
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PPUSH
29030: CALL_OW 2
29034: ST_TO_ADDR
// end ;
29035: GO 28943
29037: POP
29038: POP
29039: GO 28923
29041: POP
29042: POP
// if not list then
29043: LD_VAR 0 13
29047: NOT
29048: IFFALSE 29052
// exit ;
29050: GO 29123
// for i in list do
29052: LD_ADDR_VAR 0 6
29056: PUSH
29057: LD_VAR 0 13
29061: PUSH
29062: FOR_IN
29063: IFFALSE 29121
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29065: LD_VAR 0 1
29069: PPUSH
29070: LD_STRING M
29072: PUSH
29073: LD_VAR 0 6
29077: PUSH
29078: LD_INT 1
29080: ARRAY
29081: PUSH
29082: LD_VAR 0 6
29086: PUSH
29087: LD_INT 2
29089: ARRAY
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: PPUSH
29115: CALL_OW 447
29119: GO 29062
29121: POP
29122: POP
// end ;
29123: LD_VAR 0 5
29127: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29128: LD_EXP 100
29132: NOT
29133: IFFALSE 29183
29135: GO 29137
29137: DISABLE
// begin initHack := true ;
29138: LD_ADDR_EXP 100
29142: PUSH
29143: LD_INT 1
29145: ST_TO_ADDR
// hackTanks := [ ] ;
29146: LD_ADDR_EXP 101
29150: PUSH
29151: EMPTY
29152: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29153: LD_ADDR_EXP 102
29157: PUSH
29158: EMPTY
29159: ST_TO_ADDR
// hackLimit := 3 ;
29160: LD_ADDR_EXP 103
29164: PUSH
29165: LD_INT 3
29167: ST_TO_ADDR
// hackDist := 12 ;
29168: LD_ADDR_EXP 104
29172: PUSH
29173: LD_INT 12
29175: ST_TO_ADDR
// hackCounter := [ ] ;
29176: LD_ADDR_EXP 105
29180: PUSH
29181: EMPTY
29182: ST_TO_ADDR
// end ;
29183: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29184: LD_EXP 100
29188: PUSH
29189: LD_INT 34
29191: PUSH
29192: LD_EXP 23
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PPUSH
29201: CALL_OW 69
29205: AND
29206: IFFALSE 29461
29208: GO 29210
29210: DISABLE
29211: LD_INT 0
29213: PPUSH
29214: PPUSH
// begin enable ;
29215: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29216: LD_ADDR_VAR 0 1
29220: PUSH
29221: LD_INT 34
29223: PUSH
29224: LD_EXP 23
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PPUSH
29233: CALL_OW 69
29237: PUSH
29238: FOR_IN
29239: IFFALSE 29459
// begin if not i in hackTanks then
29241: LD_VAR 0 1
29245: PUSH
29246: LD_EXP 101
29250: IN
29251: NOT
29252: IFFALSE 29335
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29254: LD_ADDR_EXP 101
29258: PUSH
29259: LD_EXP 101
29263: PPUSH
29264: LD_EXP 101
29268: PUSH
29269: LD_INT 1
29271: PLUS
29272: PPUSH
29273: LD_VAR 0 1
29277: PPUSH
29278: CALL_OW 1
29282: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29283: LD_ADDR_EXP 102
29287: PUSH
29288: LD_EXP 102
29292: PPUSH
29293: LD_EXP 102
29297: PUSH
29298: LD_INT 1
29300: PLUS
29301: PPUSH
29302: EMPTY
29303: PPUSH
29304: CALL_OW 1
29308: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29309: LD_ADDR_EXP 105
29313: PUSH
29314: LD_EXP 105
29318: PPUSH
29319: LD_EXP 105
29323: PUSH
29324: LD_INT 1
29326: PLUS
29327: PPUSH
29328: EMPTY
29329: PPUSH
29330: CALL_OW 1
29334: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29335: LD_VAR 0 1
29339: PPUSH
29340: CALL_OW 302
29344: NOT
29345: IFFALSE 29358
// begin HackUnlinkAll ( i ) ;
29347: LD_VAR 0 1
29351: PPUSH
29352: CALL 29464 0 1
// continue ;
29356: GO 29238
// end ; HackCheckCapturedStatus ( i ) ;
29358: LD_VAR 0 1
29362: PPUSH
29363: CALL 29907 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29367: LD_ADDR_VAR 0 2
29371: PUSH
29372: LD_INT 81
29374: PUSH
29375: LD_VAR 0 1
29379: PPUSH
29380: CALL_OW 255
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 33
29391: PUSH
29392: LD_INT 3
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 91
29401: PUSH
29402: LD_VAR 0 1
29406: PUSH
29407: LD_EXP 104
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 50
29419: PUSH
29420: EMPTY
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: PPUSH
29429: CALL_OW 69
29433: ST_TO_ADDR
// if not tmp then
29434: LD_VAR 0 2
29438: NOT
29439: IFFALSE 29443
// continue ;
29441: GO 29238
// HackLink ( i , tmp ) ;
29443: LD_VAR 0 1
29447: PPUSH
29448: LD_VAR 0 2
29452: PPUSH
29453: CALL 29600 0 2
// end ;
29457: GO 29238
29459: POP
29460: POP
// end ;
29461: PPOPN 2
29463: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29464: LD_INT 0
29466: PPUSH
29467: PPUSH
29468: PPUSH
// if not hack in hackTanks then
29469: LD_VAR 0 1
29473: PUSH
29474: LD_EXP 101
29478: IN
29479: NOT
29480: IFFALSE 29484
// exit ;
29482: GO 29595
// index := GetElementIndex ( hackTanks , hack ) ;
29484: LD_ADDR_VAR 0 4
29488: PUSH
29489: LD_EXP 101
29493: PPUSH
29494: LD_VAR 0 1
29498: PPUSH
29499: CALL 37222 0 2
29503: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29504: LD_EXP 102
29508: PUSH
29509: LD_VAR 0 4
29513: ARRAY
29514: IFFALSE 29595
// begin for i in hackTanksCaptured [ index ] do
29516: LD_ADDR_VAR 0 3
29520: PUSH
29521: LD_EXP 102
29525: PUSH
29526: LD_VAR 0 4
29530: ARRAY
29531: PUSH
29532: FOR_IN
29533: IFFALSE 29559
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29535: LD_VAR 0 3
29539: PUSH
29540: LD_INT 1
29542: ARRAY
29543: PPUSH
29544: LD_VAR 0 3
29548: PUSH
29549: LD_INT 2
29551: ARRAY
29552: PPUSH
29553: CALL_OW 235
29557: GO 29532
29559: POP
29560: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29561: LD_ADDR_EXP 102
29565: PUSH
29566: LD_EXP 102
29570: PPUSH
29571: LD_VAR 0 4
29575: PPUSH
29576: EMPTY
29577: PPUSH
29578: CALL_OW 1
29582: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29583: LD_VAR 0 1
29587: PPUSH
29588: LD_INT 0
29590: PPUSH
29591: CALL_OW 505
// end ; end ;
29595: LD_VAR 0 2
29599: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29600: LD_INT 0
29602: PPUSH
29603: PPUSH
29604: PPUSH
// if not hack in hackTanks or not vehicles then
29605: LD_VAR 0 1
29609: PUSH
29610: LD_EXP 101
29614: IN
29615: NOT
29616: PUSH
29617: LD_VAR 0 2
29621: NOT
29622: OR
29623: IFFALSE 29627
// exit ;
29625: GO 29902
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29627: LD_ADDR_VAR 0 2
29631: PUSH
29632: LD_VAR 0 1
29636: PPUSH
29637: LD_VAR 0 2
29641: PPUSH
29642: LD_INT 1
29644: PPUSH
29645: LD_INT 1
29647: PPUSH
29648: CALL 37872 0 4
29652: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29653: LD_ADDR_VAR 0 5
29657: PUSH
29658: LD_EXP 101
29662: PPUSH
29663: LD_VAR 0 1
29667: PPUSH
29668: CALL 37222 0 2
29672: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29673: LD_EXP 102
29677: PUSH
29678: LD_VAR 0 5
29682: ARRAY
29683: PUSH
29684: LD_EXP 103
29688: LESS
29689: IFFALSE 29878
// begin for i := 1 to vehicles do
29691: LD_ADDR_VAR 0 4
29695: PUSH
29696: DOUBLE
29697: LD_INT 1
29699: DEC
29700: ST_TO_ADDR
29701: LD_VAR 0 2
29705: PUSH
29706: FOR_TO
29707: IFFALSE 29876
// begin if hackTanksCaptured [ index ] = hackLimit then
29709: LD_EXP 102
29713: PUSH
29714: LD_VAR 0 5
29718: ARRAY
29719: PUSH
29720: LD_EXP 103
29724: EQUAL
29725: IFFALSE 29729
// break ;
29727: GO 29876
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29729: LD_ADDR_EXP 105
29733: PUSH
29734: LD_EXP 105
29738: PPUSH
29739: LD_VAR 0 5
29743: PPUSH
29744: LD_EXP 105
29748: PUSH
29749: LD_VAR 0 5
29753: ARRAY
29754: PUSH
29755: LD_INT 1
29757: PLUS
29758: PPUSH
29759: CALL_OW 1
29763: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29764: LD_ADDR_EXP 102
29768: PUSH
29769: LD_EXP 102
29773: PPUSH
29774: LD_VAR 0 5
29778: PUSH
29779: LD_EXP 102
29783: PUSH
29784: LD_VAR 0 5
29788: ARRAY
29789: PUSH
29790: LD_INT 1
29792: PLUS
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PPUSH
29798: LD_VAR 0 2
29802: PUSH
29803: LD_VAR 0 4
29807: ARRAY
29808: PUSH
29809: LD_VAR 0 2
29813: PUSH
29814: LD_VAR 0 4
29818: ARRAY
29819: PPUSH
29820: CALL_OW 255
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PPUSH
29829: CALL 37437 0 3
29833: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29834: LD_VAR 0 2
29838: PUSH
29839: LD_VAR 0 4
29843: ARRAY
29844: PPUSH
29845: LD_VAR 0 1
29849: PPUSH
29850: CALL_OW 255
29854: PPUSH
29855: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29859: LD_VAR 0 2
29863: PUSH
29864: LD_VAR 0 4
29868: ARRAY
29869: PPUSH
29870: CALL_OW 141
// end ;
29874: GO 29706
29876: POP
29877: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29878: LD_VAR 0 1
29882: PPUSH
29883: LD_EXP 102
29887: PUSH
29888: LD_VAR 0 5
29892: ARRAY
29893: PUSH
29894: LD_INT 0
29896: PLUS
29897: PPUSH
29898: CALL_OW 505
// end ;
29902: LD_VAR 0 3
29906: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29907: LD_INT 0
29909: PPUSH
29910: PPUSH
29911: PPUSH
29912: PPUSH
// if not hack in hackTanks then
29913: LD_VAR 0 1
29917: PUSH
29918: LD_EXP 101
29922: IN
29923: NOT
29924: IFFALSE 29928
// exit ;
29926: GO 30168
// index := GetElementIndex ( hackTanks , hack ) ;
29928: LD_ADDR_VAR 0 4
29932: PUSH
29933: LD_EXP 101
29937: PPUSH
29938: LD_VAR 0 1
29942: PPUSH
29943: CALL 37222 0 2
29947: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29948: LD_ADDR_VAR 0 3
29952: PUSH
29953: DOUBLE
29954: LD_EXP 102
29958: PUSH
29959: LD_VAR 0 4
29963: ARRAY
29964: INC
29965: ST_TO_ADDR
29966: LD_INT 1
29968: PUSH
29969: FOR_DOWNTO
29970: IFFALSE 30142
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29972: LD_ADDR_VAR 0 5
29976: PUSH
29977: LD_EXP 102
29981: PUSH
29982: LD_VAR 0 4
29986: ARRAY
29987: PUSH
29988: LD_VAR 0 3
29992: ARRAY
29993: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29994: LD_VAR 0 5
29998: PUSH
29999: LD_INT 1
30001: ARRAY
30002: PPUSH
30003: CALL_OW 302
30007: NOT
30008: PUSH
30009: LD_VAR 0 5
30013: PUSH
30014: LD_INT 1
30016: ARRAY
30017: PPUSH
30018: CALL_OW 255
30022: PUSH
30023: LD_VAR 0 1
30027: PPUSH
30028: CALL_OW 255
30032: NONEQUAL
30033: OR
30034: IFFALSE 30140
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30036: LD_VAR 0 5
30040: PUSH
30041: LD_INT 1
30043: ARRAY
30044: PPUSH
30045: CALL_OW 305
30049: PUSH
30050: LD_VAR 0 5
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: PPUSH
30059: CALL_OW 255
30063: PUSH
30064: LD_VAR 0 1
30068: PPUSH
30069: CALL_OW 255
30073: EQUAL
30074: AND
30075: IFFALSE 30099
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30077: LD_VAR 0 5
30081: PUSH
30082: LD_INT 1
30084: ARRAY
30085: PPUSH
30086: LD_VAR 0 5
30090: PUSH
30091: LD_INT 2
30093: ARRAY
30094: PPUSH
30095: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30099: LD_ADDR_EXP 102
30103: PUSH
30104: LD_EXP 102
30108: PPUSH
30109: LD_VAR 0 4
30113: PPUSH
30114: LD_EXP 102
30118: PUSH
30119: LD_VAR 0 4
30123: ARRAY
30124: PPUSH
30125: LD_VAR 0 3
30129: PPUSH
30130: CALL_OW 3
30134: PPUSH
30135: CALL_OW 1
30139: ST_TO_ADDR
// end ; end ;
30140: GO 29969
30142: POP
30143: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30144: LD_VAR 0 1
30148: PPUSH
30149: LD_EXP 102
30153: PUSH
30154: LD_VAR 0 4
30158: ARRAY
30159: PUSH
30160: LD_INT 0
30162: PLUS
30163: PPUSH
30164: CALL_OW 505
// end ;
30168: LD_VAR 0 2
30172: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30173: LD_INT 0
30175: PPUSH
30176: PPUSH
30177: PPUSH
30178: PPUSH
// if not hack in hackTanks then
30179: LD_VAR 0 1
30183: PUSH
30184: LD_EXP 101
30188: IN
30189: NOT
30190: IFFALSE 30194
// exit ;
30192: GO 30279
// index := GetElementIndex ( hackTanks , hack ) ;
30194: LD_ADDR_VAR 0 5
30198: PUSH
30199: LD_EXP 101
30203: PPUSH
30204: LD_VAR 0 1
30208: PPUSH
30209: CALL 37222 0 2
30213: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30214: LD_ADDR_VAR 0 4
30218: PUSH
30219: DOUBLE
30220: LD_INT 1
30222: DEC
30223: ST_TO_ADDR
30224: LD_EXP 102
30228: PUSH
30229: LD_VAR 0 5
30233: ARRAY
30234: PUSH
30235: FOR_TO
30236: IFFALSE 30277
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30238: LD_EXP 102
30242: PUSH
30243: LD_VAR 0 5
30247: ARRAY
30248: PUSH
30249: LD_VAR 0 4
30253: ARRAY
30254: PUSH
30255: LD_INT 1
30257: ARRAY
30258: PUSH
30259: LD_VAR 0 2
30263: EQUAL
30264: IFFALSE 30275
// KillUnit ( vehicle ) ;
30266: LD_VAR 0 2
30270: PPUSH
30271: CALL_OW 66
30275: GO 30235
30277: POP
30278: POP
// end ;
30279: LD_VAR 0 3
30283: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30284: LD_EXP 106
30288: NOT
30289: IFFALSE 30324
30291: GO 30293
30293: DISABLE
// begin initMiner := true ;
30294: LD_ADDR_EXP 106
30298: PUSH
30299: LD_INT 1
30301: ST_TO_ADDR
// minersList := [ ] ;
30302: LD_ADDR_EXP 107
30306: PUSH
30307: EMPTY
30308: ST_TO_ADDR
// minerMinesList := [ ] ;
30309: LD_ADDR_EXP 108
30313: PUSH
30314: EMPTY
30315: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30316: LD_ADDR_EXP 109
30320: PUSH
30321: LD_INT 5
30323: ST_TO_ADDR
// end ;
30324: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30325: LD_EXP 106
30329: PUSH
30330: LD_INT 34
30332: PUSH
30333: LD_EXP 28
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PPUSH
30342: CALL_OW 69
30346: AND
30347: IFFALSE 30810
30349: GO 30351
30351: DISABLE
30352: LD_INT 0
30354: PPUSH
30355: PPUSH
30356: PPUSH
30357: PPUSH
// begin enable ;
30358: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30359: LD_ADDR_VAR 0 1
30363: PUSH
30364: LD_INT 34
30366: PUSH
30367: LD_EXP 28
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PPUSH
30376: CALL_OW 69
30380: PUSH
30381: FOR_IN
30382: IFFALSE 30454
// begin if not i in minersList then
30384: LD_VAR 0 1
30388: PUSH
30389: LD_EXP 107
30393: IN
30394: NOT
30395: IFFALSE 30452
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30397: LD_ADDR_EXP 107
30401: PUSH
30402: LD_EXP 107
30406: PPUSH
30407: LD_EXP 107
30411: PUSH
30412: LD_INT 1
30414: PLUS
30415: PPUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: CALL_OW 1
30425: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30426: LD_ADDR_EXP 108
30430: PUSH
30431: LD_EXP 108
30435: PPUSH
30436: LD_EXP 108
30440: PUSH
30441: LD_INT 1
30443: PLUS
30444: PPUSH
30445: EMPTY
30446: PPUSH
30447: CALL_OW 1
30451: ST_TO_ADDR
// end end ;
30452: GO 30381
30454: POP
30455: POP
// for i := minerMinesList downto 1 do
30456: LD_ADDR_VAR 0 1
30460: PUSH
30461: DOUBLE
30462: LD_EXP 108
30466: INC
30467: ST_TO_ADDR
30468: LD_INT 1
30470: PUSH
30471: FOR_DOWNTO
30472: IFFALSE 30808
// begin if IsLive ( minersList [ i ] ) then
30474: LD_EXP 107
30478: PUSH
30479: LD_VAR 0 1
30483: ARRAY
30484: PPUSH
30485: CALL_OW 300
30489: IFFALSE 30517
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30491: LD_EXP 107
30495: PUSH
30496: LD_VAR 0 1
30500: ARRAY
30501: PPUSH
30502: LD_EXP 108
30506: PUSH
30507: LD_VAR 0 1
30511: ARRAY
30512: PPUSH
30513: CALL_OW 505
// if not minerMinesList [ i ] then
30517: LD_EXP 108
30521: PUSH
30522: LD_VAR 0 1
30526: ARRAY
30527: NOT
30528: IFFALSE 30532
// continue ;
30530: GO 30471
// for j := minerMinesList [ i ] downto 1 do
30532: LD_ADDR_VAR 0 2
30536: PUSH
30537: DOUBLE
30538: LD_EXP 108
30542: PUSH
30543: LD_VAR 0 1
30547: ARRAY
30548: INC
30549: ST_TO_ADDR
30550: LD_INT 1
30552: PUSH
30553: FOR_DOWNTO
30554: IFFALSE 30804
// begin side := GetSide ( minersList [ i ] ) ;
30556: LD_ADDR_VAR 0 3
30560: PUSH
30561: LD_EXP 107
30565: PUSH
30566: LD_VAR 0 1
30570: ARRAY
30571: PPUSH
30572: CALL_OW 255
30576: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30577: LD_ADDR_VAR 0 4
30581: PUSH
30582: LD_EXP 108
30586: PUSH
30587: LD_VAR 0 1
30591: ARRAY
30592: PUSH
30593: LD_VAR 0 2
30597: ARRAY
30598: PUSH
30599: LD_INT 1
30601: ARRAY
30602: PPUSH
30603: LD_EXP 108
30607: PUSH
30608: LD_VAR 0 1
30612: ARRAY
30613: PUSH
30614: LD_VAR 0 2
30618: ARRAY
30619: PUSH
30620: LD_INT 2
30622: ARRAY
30623: PPUSH
30624: CALL_OW 428
30628: ST_TO_ADDR
// if not tmp then
30629: LD_VAR 0 4
30633: NOT
30634: IFFALSE 30638
// continue ;
30636: GO 30553
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30638: LD_VAR 0 4
30642: PUSH
30643: LD_INT 81
30645: PUSH
30646: LD_VAR 0 3
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PPUSH
30655: CALL_OW 69
30659: IN
30660: PUSH
30661: LD_EXP 108
30665: PUSH
30666: LD_VAR 0 1
30670: ARRAY
30671: PUSH
30672: LD_VAR 0 2
30676: ARRAY
30677: PUSH
30678: LD_INT 1
30680: ARRAY
30681: PPUSH
30682: LD_EXP 108
30686: PUSH
30687: LD_VAR 0 1
30691: ARRAY
30692: PUSH
30693: LD_VAR 0 2
30697: ARRAY
30698: PUSH
30699: LD_INT 2
30701: ARRAY
30702: PPUSH
30703: CALL_OW 458
30707: AND
30708: IFFALSE 30802
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30710: LD_EXP 108
30714: PUSH
30715: LD_VAR 0 1
30719: ARRAY
30720: PUSH
30721: LD_VAR 0 2
30725: ARRAY
30726: PUSH
30727: LD_INT 1
30729: ARRAY
30730: PPUSH
30731: LD_EXP 108
30735: PUSH
30736: LD_VAR 0 1
30740: ARRAY
30741: PUSH
30742: LD_VAR 0 2
30746: ARRAY
30747: PUSH
30748: LD_INT 2
30750: ARRAY
30751: PPUSH
30752: LD_VAR 0 3
30756: PPUSH
30757: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30761: LD_ADDR_EXP 108
30765: PUSH
30766: LD_EXP 108
30770: PPUSH
30771: LD_VAR 0 1
30775: PPUSH
30776: LD_EXP 108
30780: PUSH
30781: LD_VAR 0 1
30785: ARRAY
30786: PPUSH
30787: LD_VAR 0 2
30791: PPUSH
30792: CALL_OW 3
30796: PPUSH
30797: CALL_OW 1
30801: ST_TO_ADDR
// end ; end ;
30802: GO 30553
30804: POP
30805: POP
// end ;
30806: GO 30471
30808: POP
30809: POP
// end ;
30810: PPOPN 4
30812: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30813: LD_INT 0
30815: PPUSH
30816: PPUSH
// result := false ;
30817: LD_ADDR_VAR 0 4
30821: PUSH
30822: LD_INT 0
30824: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30825: LD_VAR 0 1
30829: PPUSH
30830: CALL_OW 264
30834: PUSH
30835: LD_EXP 28
30839: EQUAL
30840: NOT
30841: IFFALSE 30845
// exit ;
30843: GO 31085
// index := GetElementIndex ( minersList , unit ) ;
30845: LD_ADDR_VAR 0 5
30849: PUSH
30850: LD_EXP 107
30854: PPUSH
30855: LD_VAR 0 1
30859: PPUSH
30860: CALL 37222 0 2
30864: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30865: LD_EXP 108
30869: PUSH
30870: LD_VAR 0 5
30874: ARRAY
30875: PUSH
30876: LD_EXP 109
30880: GREATEREQUAL
30881: IFFALSE 30885
// exit ;
30883: GO 31085
// ComMoveXY ( unit , x , y ) ;
30885: LD_VAR 0 1
30889: PPUSH
30890: LD_VAR 0 2
30894: PPUSH
30895: LD_VAR 0 3
30899: PPUSH
30900: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30904: LD_INT 35
30906: PPUSH
30907: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30911: LD_VAR 0 1
30915: PPUSH
30916: LD_VAR 0 2
30920: PPUSH
30921: LD_VAR 0 3
30925: PPUSH
30926: CALL 68508 0 3
30930: NOT
30931: PUSH
30932: LD_VAR 0 1
30936: PPUSH
30937: CALL_OW 314
30941: AND
30942: IFFALSE 30946
// exit ;
30944: GO 31085
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30946: LD_VAR 0 2
30950: PPUSH
30951: LD_VAR 0 3
30955: PPUSH
30956: CALL_OW 428
30960: PUSH
30961: LD_VAR 0 1
30965: EQUAL
30966: PUSH
30967: LD_VAR 0 1
30971: PPUSH
30972: CALL_OW 314
30976: NOT
30977: AND
30978: IFFALSE 30904
// PlaySoundXY ( x , y , PlantMine ) ;
30980: LD_VAR 0 2
30984: PPUSH
30985: LD_VAR 0 3
30989: PPUSH
30990: LD_STRING PlantMine
30992: PPUSH
30993: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30997: LD_VAR 0 2
31001: PPUSH
31002: LD_VAR 0 3
31006: PPUSH
31007: LD_VAR 0 1
31011: PPUSH
31012: CALL_OW 255
31016: PPUSH
31017: LD_INT 0
31019: PPUSH
31020: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31024: LD_ADDR_EXP 108
31028: PUSH
31029: LD_EXP 108
31033: PPUSH
31034: LD_VAR 0 5
31038: PUSH
31039: LD_EXP 108
31043: PUSH
31044: LD_VAR 0 5
31048: ARRAY
31049: PUSH
31050: LD_INT 1
31052: PLUS
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PPUSH
31058: LD_VAR 0 2
31062: PUSH
31063: LD_VAR 0 3
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PPUSH
31072: CALL 37437 0 3
31076: ST_TO_ADDR
// result := true ;
31077: LD_ADDR_VAR 0 4
31081: PUSH
31082: LD_INT 1
31084: ST_TO_ADDR
// end ;
31085: LD_VAR 0 4
31089: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31090: LD_INT 0
31092: PPUSH
31093: PPUSH
31094: PPUSH
// if not unit in minersList then
31095: LD_VAR 0 1
31099: PUSH
31100: LD_EXP 107
31104: IN
31105: NOT
31106: IFFALSE 31110
// exit ;
31108: GO 31502
// index := GetElementIndex ( minersList , unit ) ;
31110: LD_ADDR_VAR 0 6
31114: PUSH
31115: LD_EXP 107
31119: PPUSH
31120: LD_VAR 0 1
31124: PPUSH
31125: CALL 37222 0 2
31129: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31130: LD_ADDR_VAR 0 5
31134: PUSH
31135: DOUBLE
31136: LD_EXP 108
31140: PUSH
31141: LD_VAR 0 6
31145: ARRAY
31146: INC
31147: ST_TO_ADDR
31148: LD_INT 1
31150: PUSH
31151: FOR_DOWNTO
31152: IFFALSE 31313
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31154: LD_EXP 108
31158: PUSH
31159: LD_VAR 0 6
31163: ARRAY
31164: PUSH
31165: LD_VAR 0 5
31169: ARRAY
31170: PUSH
31171: LD_INT 1
31173: ARRAY
31174: PUSH
31175: LD_VAR 0 2
31179: EQUAL
31180: PUSH
31181: LD_EXP 108
31185: PUSH
31186: LD_VAR 0 6
31190: ARRAY
31191: PUSH
31192: LD_VAR 0 5
31196: ARRAY
31197: PUSH
31198: LD_INT 2
31200: ARRAY
31201: PUSH
31202: LD_VAR 0 3
31206: EQUAL
31207: AND
31208: IFFALSE 31311
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31210: LD_EXP 108
31214: PUSH
31215: LD_VAR 0 6
31219: ARRAY
31220: PUSH
31221: LD_VAR 0 5
31225: ARRAY
31226: PUSH
31227: LD_INT 1
31229: ARRAY
31230: PPUSH
31231: LD_EXP 108
31235: PUSH
31236: LD_VAR 0 6
31240: ARRAY
31241: PUSH
31242: LD_VAR 0 5
31246: ARRAY
31247: PUSH
31248: LD_INT 2
31250: ARRAY
31251: PPUSH
31252: LD_VAR 0 1
31256: PPUSH
31257: CALL_OW 255
31261: PPUSH
31262: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31266: LD_ADDR_EXP 108
31270: PUSH
31271: LD_EXP 108
31275: PPUSH
31276: LD_VAR 0 6
31280: PPUSH
31281: LD_EXP 108
31285: PUSH
31286: LD_VAR 0 6
31290: ARRAY
31291: PPUSH
31292: LD_VAR 0 5
31296: PPUSH
31297: CALL_OW 3
31301: PPUSH
31302: CALL_OW 1
31306: ST_TO_ADDR
// exit ;
31307: POP
31308: POP
31309: GO 31502
// end ; end ;
31311: GO 31151
31313: POP
31314: POP
// for i := minerMinesList [ index ] downto 1 do
31315: LD_ADDR_VAR 0 5
31319: PUSH
31320: DOUBLE
31321: LD_EXP 108
31325: PUSH
31326: LD_VAR 0 6
31330: ARRAY
31331: INC
31332: ST_TO_ADDR
31333: LD_INT 1
31335: PUSH
31336: FOR_DOWNTO
31337: IFFALSE 31500
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31339: LD_EXP 108
31343: PUSH
31344: LD_VAR 0 6
31348: ARRAY
31349: PUSH
31350: LD_VAR 0 5
31354: ARRAY
31355: PUSH
31356: LD_INT 1
31358: ARRAY
31359: PPUSH
31360: LD_EXP 108
31364: PUSH
31365: LD_VAR 0 6
31369: ARRAY
31370: PUSH
31371: LD_VAR 0 5
31375: ARRAY
31376: PUSH
31377: LD_INT 2
31379: ARRAY
31380: PPUSH
31381: LD_VAR 0 2
31385: PPUSH
31386: LD_VAR 0 3
31390: PPUSH
31391: CALL_OW 298
31395: PUSH
31396: LD_INT 6
31398: LESS
31399: IFFALSE 31498
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31401: LD_EXP 108
31405: PUSH
31406: LD_VAR 0 6
31410: ARRAY
31411: PUSH
31412: LD_VAR 0 5
31416: ARRAY
31417: PUSH
31418: LD_INT 1
31420: ARRAY
31421: PPUSH
31422: LD_EXP 108
31426: PUSH
31427: LD_VAR 0 6
31431: ARRAY
31432: PUSH
31433: LD_VAR 0 5
31437: ARRAY
31438: PUSH
31439: LD_INT 2
31441: ARRAY
31442: PPUSH
31443: LD_VAR 0 1
31447: PPUSH
31448: CALL_OW 255
31452: PPUSH
31453: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31457: LD_ADDR_EXP 108
31461: PUSH
31462: LD_EXP 108
31466: PPUSH
31467: LD_VAR 0 6
31471: PPUSH
31472: LD_EXP 108
31476: PUSH
31477: LD_VAR 0 6
31481: ARRAY
31482: PPUSH
31483: LD_VAR 0 5
31487: PPUSH
31488: CALL_OW 3
31492: PPUSH
31493: CALL_OW 1
31497: ST_TO_ADDR
// end ; end ;
31498: GO 31336
31500: POP
31501: POP
// end ;
31502: LD_VAR 0 4
31506: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31507: LD_INT 0
31509: PPUSH
31510: PPUSH
31511: PPUSH
31512: PPUSH
31513: PPUSH
31514: PPUSH
31515: PPUSH
31516: PPUSH
31517: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31518: LD_VAR 0 1
31522: PPUSH
31523: CALL_OW 264
31527: PUSH
31528: LD_EXP 28
31532: EQUAL
31533: NOT
31534: PUSH
31535: LD_VAR 0 1
31539: PUSH
31540: LD_EXP 107
31544: IN
31545: NOT
31546: OR
31547: IFFALSE 31551
// exit ;
31549: GO 31873
// index := GetElementIndex ( minersList , unit ) ;
31551: LD_ADDR_VAR 0 6
31555: PUSH
31556: LD_EXP 107
31560: PPUSH
31561: LD_VAR 0 1
31565: PPUSH
31566: CALL 37222 0 2
31570: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31571: LD_ADDR_VAR 0 8
31575: PUSH
31576: LD_EXP 109
31580: PUSH
31581: LD_EXP 108
31585: PUSH
31586: LD_VAR 0 6
31590: ARRAY
31591: MINUS
31592: ST_TO_ADDR
// if not minesFreeAmount then
31593: LD_VAR 0 8
31597: NOT
31598: IFFALSE 31602
// exit ;
31600: GO 31873
// tmp := [ ] ;
31602: LD_ADDR_VAR 0 7
31606: PUSH
31607: EMPTY
31608: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31609: LD_ADDR_VAR 0 5
31613: PUSH
31614: DOUBLE
31615: LD_INT 1
31617: DEC
31618: ST_TO_ADDR
31619: LD_VAR 0 8
31623: PUSH
31624: FOR_TO
31625: IFFALSE 31820
// begin _d := rand ( 0 , 5 ) ;
31627: LD_ADDR_VAR 0 11
31631: PUSH
31632: LD_INT 0
31634: PPUSH
31635: LD_INT 5
31637: PPUSH
31638: CALL_OW 12
31642: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31643: LD_ADDR_VAR 0 12
31647: PUSH
31648: LD_INT 2
31650: PPUSH
31651: LD_INT 6
31653: PPUSH
31654: CALL_OW 12
31658: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31659: LD_ADDR_VAR 0 9
31663: PUSH
31664: LD_VAR 0 2
31668: PPUSH
31669: LD_VAR 0 11
31673: PPUSH
31674: LD_VAR 0 12
31678: PPUSH
31679: CALL_OW 272
31683: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31684: LD_ADDR_VAR 0 10
31688: PUSH
31689: LD_VAR 0 3
31693: PPUSH
31694: LD_VAR 0 11
31698: PPUSH
31699: LD_VAR 0 12
31703: PPUSH
31704: CALL_OW 273
31708: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31709: LD_VAR 0 9
31713: PPUSH
31714: LD_VAR 0 10
31718: PPUSH
31719: CALL_OW 488
31723: PUSH
31724: LD_VAR 0 9
31728: PUSH
31729: LD_VAR 0 10
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_VAR 0 7
31742: IN
31743: NOT
31744: AND
31745: PUSH
31746: LD_VAR 0 9
31750: PPUSH
31751: LD_VAR 0 10
31755: PPUSH
31756: CALL_OW 458
31760: NOT
31761: AND
31762: IFFALSE 31804
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31764: LD_ADDR_VAR 0 7
31768: PUSH
31769: LD_VAR 0 7
31773: PPUSH
31774: LD_VAR 0 7
31778: PUSH
31779: LD_INT 1
31781: PLUS
31782: PPUSH
31783: LD_VAR 0 9
31787: PUSH
31788: LD_VAR 0 10
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PPUSH
31797: CALL_OW 1
31801: ST_TO_ADDR
31802: GO 31818
// i := i - 1 ;
31804: LD_ADDR_VAR 0 5
31808: PUSH
31809: LD_VAR 0 5
31813: PUSH
31814: LD_INT 1
31816: MINUS
31817: ST_TO_ADDR
// end ;
31818: GO 31624
31820: POP
31821: POP
// for i in tmp do
31822: LD_ADDR_VAR 0 5
31826: PUSH
31827: LD_VAR 0 7
31831: PUSH
31832: FOR_IN
31833: IFFALSE 31871
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31835: LD_VAR 0 1
31839: PPUSH
31840: LD_VAR 0 5
31844: PUSH
31845: LD_INT 1
31847: ARRAY
31848: PPUSH
31849: LD_VAR 0 5
31853: PUSH
31854: LD_INT 2
31856: ARRAY
31857: PPUSH
31858: CALL 30813 0 3
31862: NOT
31863: IFFALSE 31869
// exit ;
31865: POP
31866: POP
31867: GO 31873
31869: GO 31832
31871: POP
31872: POP
// end ;
31873: LD_VAR 0 4
31877: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31878: LD_INT 0
31880: PPUSH
31881: PPUSH
31882: PPUSH
31883: PPUSH
31884: PPUSH
31885: PPUSH
31886: PPUSH
// if not GetClass ( unit ) = class_sniper then
31887: LD_VAR 0 1
31891: PPUSH
31892: CALL_OW 257
31896: PUSH
31897: LD_INT 5
31899: EQUAL
31900: NOT
31901: IFFALSE 31905
// exit ;
31903: GO 32293
// dist := 8 ;
31905: LD_ADDR_VAR 0 5
31909: PUSH
31910: LD_INT 8
31912: ST_TO_ADDR
// viewRange := 12 ;
31913: LD_ADDR_VAR 0 7
31917: PUSH
31918: LD_INT 12
31920: ST_TO_ADDR
// side := GetSide ( unit ) ;
31921: LD_ADDR_VAR 0 6
31925: PUSH
31926: LD_VAR 0 1
31930: PPUSH
31931: CALL_OW 255
31935: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31936: LD_INT 61
31938: PPUSH
31939: LD_VAR 0 6
31943: PPUSH
31944: CALL_OW 321
31948: PUSH
31949: LD_INT 2
31951: EQUAL
31952: IFFALSE 31962
// viewRange := 16 ;
31954: LD_ADDR_VAR 0 7
31958: PUSH
31959: LD_INT 16
31961: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31962: LD_VAR 0 1
31966: PPUSH
31967: LD_VAR 0 2
31971: PPUSH
31972: LD_VAR 0 3
31976: PPUSH
31977: CALL_OW 297
31981: PUSH
31982: LD_VAR 0 5
31986: GREATER
31987: IFFALSE 32066
// begin ComMoveXY ( unit , x , y ) ;
31989: LD_VAR 0 1
31993: PPUSH
31994: LD_VAR 0 2
31998: PPUSH
31999: LD_VAR 0 3
32003: PPUSH
32004: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32008: LD_INT 35
32010: PPUSH
32011: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32015: LD_VAR 0 1
32019: PPUSH
32020: LD_VAR 0 2
32024: PPUSH
32025: LD_VAR 0 3
32029: PPUSH
32030: CALL 68508 0 3
32034: NOT
32035: IFFALSE 32039
// exit ;
32037: GO 32293
// until GetDistUnitXY ( unit , x , y ) < dist ;
32039: LD_VAR 0 1
32043: PPUSH
32044: LD_VAR 0 2
32048: PPUSH
32049: LD_VAR 0 3
32053: PPUSH
32054: CALL_OW 297
32058: PUSH
32059: LD_VAR 0 5
32063: LESS
32064: IFFALSE 32008
// end ; ComTurnXY ( unit , x , y ) ;
32066: LD_VAR 0 1
32070: PPUSH
32071: LD_VAR 0 2
32075: PPUSH
32076: LD_VAR 0 3
32080: PPUSH
32081: CALL_OW 118
// wait ( 5 ) ;
32085: LD_INT 5
32087: PPUSH
32088: CALL_OW 67
// _d := GetDir ( unit ) ;
32092: LD_ADDR_VAR 0 10
32096: PUSH
32097: LD_VAR 0 1
32101: PPUSH
32102: CALL_OW 254
32106: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32107: LD_ADDR_VAR 0 8
32111: PUSH
32112: LD_VAR 0 1
32116: PPUSH
32117: CALL_OW 250
32121: PPUSH
32122: LD_VAR 0 10
32126: PPUSH
32127: LD_VAR 0 5
32131: PPUSH
32132: CALL_OW 272
32136: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32137: LD_ADDR_VAR 0 9
32141: PUSH
32142: LD_VAR 0 1
32146: PPUSH
32147: CALL_OW 251
32151: PPUSH
32152: LD_VAR 0 10
32156: PPUSH
32157: LD_VAR 0 5
32161: PPUSH
32162: CALL_OW 273
32166: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32167: LD_VAR 0 8
32171: PPUSH
32172: LD_VAR 0 9
32176: PPUSH
32177: CALL_OW 488
32181: NOT
32182: IFFALSE 32186
// exit ;
32184: GO 32293
// ComAnimCustom ( unit , 1 ) ;
32186: LD_VAR 0 1
32190: PPUSH
32191: LD_INT 1
32193: PPUSH
32194: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32198: LD_VAR 0 8
32202: PPUSH
32203: LD_VAR 0 9
32207: PPUSH
32208: LD_VAR 0 6
32212: PPUSH
32213: LD_VAR 0 7
32217: PPUSH
32218: CALL_OW 330
// repeat wait ( 1 ) ;
32222: LD_INT 1
32224: PPUSH
32225: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32229: LD_VAR 0 1
32233: PPUSH
32234: CALL_OW 316
32238: PUSH
32239: LD_VAR 0 1
32243: PPUSH
32244: CALL_OW 314
32248: OR
32249: PUSH
32250: LD_VAR 0 1
32254: PPUSH
32255: CALL_OW 302
32259: NOT
32260: OR
32261: PUSH
32262: LD_VAR 0 1
32266: PPUSH
32267: CALL_OW 301
32271: OR
32272: IFFALSE 32222
// RemoveSeeing ( _x , _y , side ) ;
32274: LD_VAR 0 8
32278: PPUSH
32279: LD_VAR 0 9
32283: PPUSH
32284: LD_VAR 0 6
32288: PPUSH
32289: CALL_OW 331
// end ; end_of_file
32293: LD_VAR 0 4
32297: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32298: LD_INT 0
32300: PPUSH
32301: PPUSH
// if exist_mode then
32302: LD_VAR 0 2
32306: IFFALSE 32331
// unit := CreateCharacter ( prefix & ident ) else
32308: LD_ADDR_VAR 0 5
32312: PUSH
32313: LD_VAR 0 3
32317: PUSH
32318: LD_VAR 0 1
32322: STR
32323: PPUSH
32324: CALL_OW 34
32328: ST_TO_ADDR
32329: GO 32346
// unit := NewCharacter ( ident ) ;
32331: LD_ADDR_VAR 0 5
32335: PUSH
32336: LD_VAR 0 1
32340: PPUSH
32341: CALL_OW 25
32345: ST_TO_ADDR
// result := unit ;
32346: LD_ADDR_VAR 0 4
32350: PUSH
32351: LD_VAR 0 5
32355: ST_TO_ADDR
// end ;
32356: LD_VAR 0 4
32360: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32361: LD_INT 0
32363: PPUSH
32364: PPUSH
// if not side or not nation then
32365: LD_VAR 0 1
32369: NOT
32370: PUSH
32371: LD_VAR 0 2
32375: NOT
32376: OR
32377: IFFALSE 32381
// exit ;
32379: GO 33149
// case nation of nation_american :
32381: LD_VAR 0 2
32385: PUSH
32386: LD_INT 1
32388: DOUBLE
32389: EQUAL
32390: IFTRUE 32394
32392: GO 32608
32394: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32395: LD_ADDR_VAR 0 4
32399: PUSH
32400: LD_INT 35
32402: PUSH
32403: LD_INT 45
32405: PUSH
32406: LD_INT 46
32408: PUSH
32409: LD_INT 47
32411: PUSH
32412: LD_INT 82
32414: PUSH
32415: LD_INT 83
32417: PUSH
32418: LD_INT 84
32420: PUSH
32421: LD_INT 85
32423: PUSH
32424: LD_INT 86
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: LD_INT 6
32435: PUSH
32436: LD_INT 15
32438: PUSH
32439: LD_INT 16
32441: PUSH
32442: LD_INT 7
32444: PUSH
32445: LD_INT 12
32447: PUSH
32448: LD_INT 13
32450: PUSH
32451: LD_INT 10
32453: PUSH
32454: LD_INT 14
32456: PUSH
32457: LD_INT 20
32459: PUSH
32460: LD_INT 21
32462: PUSH
32463: LD_INT 22
32465: PUSH
32466: LD_INT 25
32468: PUSH
32469: LD_INT 32
32471: PUSH
32472: LD_INT 27
32474: PUSH
32475: LD_INT 36
32477: PUSH
32478: LD_INT 69
32480: PUSH
32481: LD_INT 39
32483: PUSH
32484: LD_INT 34
32486: PUSH
32487: LD_INT 40
32489: PUSH
32490: LD_INT 48
32492: PUSH
32493: LD_INT 49
32495: PUSH
32496: LD_INT 50
32498: PUSH
32499: LD_INT 51
32501: PUSH
32502: LD_INT 52
32504: PUSH
32505: LD_INT 53
32507: PUSH
32508: LD_INT 54
32510: PUSH
32511: LD_INT 55
32513: PUSH
32514: LD_INT 56
32516: PUSH
32517: LD_INT 57
32519: PUSH
32520: LD_INT 58
32522: PUSH
32523: LD_INT 59
32525: PUSH
32526: LD_INT 60
32528: PUSH
32529: LD_INT 61
32531: PUSH
32532: LD_INT 62
32534: PUSH
32535: LD_INT 80
32537: PUSH
32538: LD_INT 82
32540: PUSH
32541: LD_INT 83
32543: PUSH
32544: LD_INT 84
32546: PUSH
32547: LD_INT 85
32549: PUSH
32550: LD_INT 86
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: ST_TO_ADDR
32606: GO 33073
32608: LD_INT 2
32610: DOUBLE
32611: EQUAL
32612: IFTRUE 32616
32614: GO 32842
32616: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32617: LD_ADDR_VAR 0 4
32621: PUSH
32622: LD_INT 35
32624: PUSH
32625: LD_INT 45
32627: PUSH
32628: LD_INT 46
32630: PUSH
32631: LD_INT 47
32633: PUSH
32634: LD_INT 82
32636: PUSH
32637: LD_INT 83
32639: PUSH
32640: LD_INT 84
32642: PUSH
32643: LD_INT 85
32645: PUSH
32646: LD_INT 87
32648: PUSH
32649: LD_INT 70
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 11
32657: PUSH
32658: LD_INT 3
32660: PUSH
32661: LD_INT 4
32663: PUSH
32664: LD_INT 5
32666: PUSH
32667: LD_INT 6
32669: PUSH
32670: LD_INT 15
32672: PUSH
32673: LD_INT 18
32675: PUSH
32676: LD_INT 7
32678: PUSH
32679: LD_INT 17
32681: PUSH
32682: LD_INT 8
32684: PUSH
32685: LD_INT 20
32687: PUSH
32688: LD_INT 21
32690: PUSH
32691: LD_INT 22
32693: PUSH
32694: LD_INT 72
32696: PUSH
32697: LD_INT 26
32699: PUSH
32700: LD_INT 69
32702: PUSH
32703: LD_INT 39
32705: PUSH
32706: LD_INT 40
32708: PUSH
32709: LD_INT 41
32711: PUSH
32712: LD_INT 42
32714: PUSH
32715: LD_INT 43
32717: PUSH
32718: LD_INT 48
32720: PUSH
32721: LD_INT 49
32723: PUSH
32724: LD_INT 50
32726: PUSH
32727: LD_INT 51
32729: PUSH
32730: LD_INT 52
32732: PUSH
32733: LD_INT 53
32735: PUSH
32736: LD_INT 54
32738: PUSH
32739: LD_INT 55
32741: PUSH
32742: LD_INT 56
32744: PUSH
32745: LD_INT 60
32747: PUSH
32748: LD_INT 61
32750: PUSH
32751: LD_INT 62
32753: PUSH
32754: LD_INT 66
32756: PUSH
32757: LD_INT 67
32759: PUSH
32760: LD_INT 68
32762: PUSH
32763: LD_INT 81
32765: PUSH
32766: LD_INT 82
32768: PUSH
32769: LD_INT 83
32771: PUSH
32772: LD_INT 84
32774: PUSH
32775: LD_INT 85
32777: PUSH
32778: LD_INT 87
32780: PUSH
32781: LD_INT 88
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: ST_TO_ADDR
32840: GO 33073
32842: LD_INT 3
32844: DOUBLE
32845: EQUAL
32846: IFTRUE 32850
32848: GO 33072
32850: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32851: LD_ADDR_VAR 0 4
32855: PUSH
32856: LD_INT 46
32858: PUSH
32859: LD_INT 47
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: LD_INT 2
32867: PUSH
32868: LD_INT 82
32870: PUSH
32871: LD_INT 83
32873: PUSH
32874: LD_INT 84
32876: PUSH
32877: LD_INT 85
32879: PUSH
32880: LD_INT 86
32882: PUSH
32883: LD_INT 11
32885: PUSH
32886: LD_INT 9
32888: PUSH
32889: LD_INT 20
32891: PUSH
32892: LD_INT 19
32894: PUSH
32895: LD_INT 21
32897: PUSH
32898: LD_INT 24
32900: PUSH
32901: LD_INT 22
32903: PUSH
32904: LD_INT 25
32906: PUSH
32907: LD_INT 28
32909: PUSH
32910: LD_INT 29
32912: PUSH
32913: LD_INT 30
32915: PUSH
32916: LD_INT 31
32918: PUSH
32919: LD_INT 37
32921: PUSH
32922: LD_INT 38
32924: PUSH
32925: LD_INT 32
32927: PUSH
32928: LD_INT 27
32930: PUSH
32931: LD_INT 33
32933: PUSH
32934: LD_INT 69
32936: PUSH
32937: LD_INT 39
32939: PUSH
32940: LD_INT 34
32942: PUSH
32943: LD_INT 40
32945: PUSH
32946: LD_INT 71
32948: PUSH
32949: LD_INT 23
32951: PUSH
32952: LD_INT 44
32954: PUSH
32955: LD_INT 48
32957: PUSH
32958: LD_INT 49
32960: PUSH
32961: LD_INT 50
32963: PUSH
32964: LD_INT 51
32966: PUSH
32967: LD_INT 52
32969: PUSH
32970: LD_INT 53
32972: PUSH
32973: LD_INT 54
32975: PUSH
32976: LD_INT 55
32978: PUSH
32979: LD_INT 56
32981: PUSH
32982: LD_INT 57
32984: PUSH
32985: LD_INT 58
32987: PUSH
32988: LD_INT 59
32990: PUSH
32991: LD_INT 63
32993: PUSH
32994: LD_INT 64
32996: PUSH
32997: LD_INT 65
32999: PUSH
33000: LD_INT 82
33002: PUSH
33003: LD_INT 83
33005: PUSH
33006: LD_INT 84
33008: PUSH
33009: LD_INT 85
33011: PUSH
33012: LD_INT 86
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: ST_TO_ADDR
33070: GO 33073
33072: POP
// if state > - 1 and state < 3 then
33073: LD_VAR 0 3
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: GREATER
33082: PUSH
33083: LD_VAR 0 3
33087: PUSH
33088: LD_INT 3
33090: LESS
33091: AND
33092: IFFALSE 33149
// for i in result do
33094: LD_ADDR_VAR 0 5
33098: PUSH
33099: LD_VAR 0 4
33103: PUSH
33104: FOR_IN
33105: IFFALSE 33147
// if GetTech ( i , side ) <> state then
33107: LD_VAR 0 5
33111: PPUSH
33112: LD_VAR 0 1
33116: PPUSH
33117: CALL_OW 321
33121: PUSH
33122: LD_VAR 0 3
33126: NONEQUAL
33127: IFFALSE 33145
// result := result diff i ;
33129: LD_ADDR_VAR 0 4
33133: PUSH
33134: LD_VAR 0 4
33138: PUSH
33139: LD_VAR 0 5
33143: DIFF
33144: ST_TO_ADDR
33145: GO 33104
33147: POP
33148: POP
// end ;
33149: LD_VAR 0 4
33153: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33154: LD_INT 0
33156: PPUSH
33157: PPUSH
33158: PPUSH
// result := true ;
33159: LD_ADDR_VAR 0 3
33163: PUSH
33164: LD_INT 1
33166: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33167: LD_ADDR_VAR 0 5
33171: PUSH
33172: LD_VAR 0 2
33176: PPUSH
33177: CALL_OW 480
33181: ST_TO_ADDR
// if not tmp then
33182: LD_VAR 0 5
33186: NOT
33187: IFFALSE 33191
// exit ;
33189: GO 33240
// for i in tmp do
33191: LD_ADDR_VAR 0 4
33195: PUSH
33196: LD_VAR 0 5
33200: PUSH
33201: FOR_IN
33202: IFFALSE 33238
// if GetTech ( i , side ) <> state_researched then
33204: LD_VAR 0 4
33208: PPUSH
33209: LD_VAR 0 1
33213: PPUSH
33214: CALL_OW 321
33218: PUSH
33219: LD_INT 2
33221: NONEQUAL
33222: IFFALSE 33236
// begin result := false ;
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_INT 0
33231: ST_TO_ADDR
// exit ;
33232: POP
33233: POP
33234: GO 33240
// end ;
33236: GO 33201
33238: POP
33239: POP
// end ;
33240: LD_VAR 0 3
33244: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33245: LD_INT 0
33247: PPUSH
33248: PPUSH
33249: PPUSH
33250: PPUSH
33251: PPUSH
33252: PPUSH
33253: PPUSH
33254: PPUSH
33255: PPUSH
33256: PPUSH
33257: PPUSH
33258: PPUSH
33259: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33260: LD_VAR 0 1
33264: NOT
33265: PUSH
33266: LD_VAR 0 1
33270: PPUSH
33271: CALL_OW 257
33275: PUSH
33276: LD_INT 9
33278: NONEQUAL
33279: OR
33280: IFFALSE 33284
// exit ;
33282: GO 33857
// side := GetSide ( unit ) ;
33284: LD_ADDR_VAR 0 9
33288: PUSH
33289: LD_VAR 0 1
33293: PPUSH
33294: CALL_OW 255
33298: ST_TO_ADDR
// tech_space := tech_spacanom ;
33299: LD_ADDR_VAR 0 12
33303: PUSH
33304: LD_INT 29
33306: ST_TO_ADDR
// tech_time := tech_taurad ;
33307: LD_ADDR_VAR 0 13
33311: PUSH
33312: LD_INT 28
33314: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33315: LD_ADDR_VAR 0 11
33319: PUSH
33320: LD_VAR 0 1
33324: PPUSH
33325: CALL_OW 310
33329: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33330: LD_VAR 0 11
33334: PPUSH
33335: CALL_OW 247
33339: PUSH
33340: LD_INT 2
33342: EQUAL
33343: IFFALSE 33347
// exit ;
33345: GO 33857
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33347: LD_ADDR_VAR 0 8
33351: PUSH
33352: LD_INT 81
33354: PUSH
33355: LD_VAR 0 9
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 3
33366: PUSH
33367: LD_INT 21
33369: PUSH
33370: LD_INT 3
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PPUSH
33385: CALL_OW 69
33389: ST_TO_ADDR
// if not tmp then
33390: LD_VAR 0 8
33394: NOT
33395: IFFALSE 33399
// exit ;
33397: GO 33857
// if in_unit then
33399: LD_VAR 0 11
33403: IFFALSE 33427
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33405: LD_ADDR_VAR 0 10
33409: PUSH
33410: LD_VAR 0 8
33414: PPUSH
33415: LD_VAR 0 11
33419: PPUSH
33420: CALL_OW 74
33424: ST_TO_ADDR
33425: GO 33447
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33427: LD_ADDR_VAR 0 10
33431: PUSH
33432: LD_VAR 0 8
33436: PPUSH
33437: LD_VAR 0 1
33441: PPUSH
33442: CALL_OW 74
33446: ST_TO_ADDR
// if not enemy then
33447: LD_VAR 0 10
33451: NOT
33452: IFFALSE 33456
// exit ;
33454: GO 33857
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33456: LD_VAR 0 11
33460: PUSH
33461: LD_VAR 0 11
33465: PPUSH
33466: LD_VAR 0 10
33470: PPUSH
33471: CALL_OW 296
33475: PUSH
33476: LD_INT 13
33478: GREATER
33479: AND
33480: PUSH
33481: LD_VAR 0 1
33485: PPUSH
33486: LD_VAR 0 10
33490: PPUSH
33491: CALL_OW 296
33495: PUSH
33496: LD_INT 12
33498: GREATER
33499: OR
33500: IFFALSE 33504
// exit ;
33502: GO 33857
// missile := [ 1 ] ;
33504: LD_ADDR_VAR 0 14
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: EMPTY
33513: LIST
33514: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33515: LD_VAR 0 9
33519: PPUSH
33520: LD_VAR 0 12
33524: PPUSH
33525: CALL_OW 325
33529: IFFALSE 33558
// missile := Replace ( missile , missile + 1 , 2 ) ;
33531: LD_ADDR_VAR 0 14
33535: PUSH
33536: LD_VAR 0 14
33540: PPUSH
33541: LD_VAR 0 14
33545: PUSH
33546: LD_INT 1
33548: PLUS
33549: PPUSH
33550: LD_INT 2
33552: PPUSH
33553: CALL_OW 1
33557: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33558: LD_VAR 0 9
33562: PPUSH
33563: LD_VAR 0 13
33567: PPUSH
33568: CALL_OW 325
33572: PUSH
33573: LD_VAR 0 10
33577: PPUSH
33578: CALL_OW 255
33582: PPUSH
33583: LD_VAR 0 13
33587: PPUSH
33588: CALL_OW 325
33592: NOT
33593: AND
33594: IFFALSE 33623
// missile := Replace ( missile , missile + 1 , 3 ) ;
33596: LD_ADDR_VAR 0 14
33600: PUSH
33601: LD_VAR 0 14
33605: PPUSH
33606: LD_VAR 0 14
33610: PUSH
33611: LD_INT 1
33613: PLUS
33614: PPUSH
33615: LD_INT 3
33617: PPUSH
33618: CALL_OW 1
33622: ST_TO_ADDR
// if missile < 2 then
33623: LD_VAR 0 14
33627: PUSH
33628: LD_INT 2
33630: LESS
33631: IFFALSE 33635
// exit ;
33633: GO 33857
// x := GetX ( enemy ) ;
33635: LD_ADDR_VAR 0 4
33639: PUSH
33640: LD_VAR 0 10
33644: PPUSH
33645: CALL_OW 250
33649: ST_TO_ADDR
// y := GetY ( enemy ) ;
33650: LD_ADDR_VAR 0 5
33654: PUSH
33655: LD_VAR 0 10
33659: PPUSH
33660: CALL_OW 251
33664: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33665: LD_ADDR_VAR 0 6
33669: PUSH
33670: LD_VAR 0 4
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PPUSH
33679: LD_INT 1
33681: PPUSH
33682: CALL_OW 12
33686: PLUS
33687: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33688: LD_ADDR_VAR 0 7
33692: PUSH
33693: LD_VAR 0 5
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PPUSH
33702: LD_INT 1
33704: PPUSH
33705: CALL_OW 12
33709: PLUS
33710: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33711: LD_VAR 0 6
33715: PPUSH
33716: LD_VAR 0 7
33720: PPUSH
33721: CALL_OW 488
33725: NOT
33726: IFFALSE 33748
// begin _x := x ;
33728: LD_ADDR_VAR 0 6
33732: PUSH
33733: LD_VAR 0 4
33737: ST_TO_ADDR
// _y := y ;
33738: LD_ADDR_VAR 0 7
33742: PUSH
33743: LD_VAR 0 5
33747: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33748: LD_ADDR_VAR 0 3
33752: PUSH
33753: LD_INT 1
33755: PPUSH
33756: LD_VAR 0 14
33760: PPUSH
33761: CALL_OW 12
33765: ST_TO_ADDR
// case i of 1 :
33766: LD_VAR 0 3
33770: PUSH
33771: LD_INT 1
33773: DOUBLE
33774: EQUAL
33775: IFTRUE 33779
33777: GO 33796
33779: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33780: LD_VAR 0 1
33784: PPUSH
33785: LD_VAR 0 10
33789: PPUSH
33790: CALL_OW 115
33794: GO 33857
33796: LD_INT 2
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33804
33802: GO 33826
33804: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33805: LD_VAR 0 1
33809: PPUSH
33810: LD_VAR 0 6
33814: PPUSH
33815: LD_VAR 0 7
33819: PPUSH
33820: CALL_OW 153
33824: GO 33857
33826: LD_INT 3
33828: DOUBLE
33829: EQUAL
33830: IFTRUE 33834
33832: GO 33856
33834: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33835: LD_VAR 0 1
33839: PPUSH
33840: LD_VAR 0 6
33844: PPUSH
33845: LD_VAR 0 7
33849: PPUSH
33850: CALL_OW 154
33854: GO 33857
33856: POP
// end ;
33857: LD_VAR 0 2
33861: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33862: LD_INT 0
33864: PPUSH
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
// if not unit or not building then
33870: LD_VAR 0 1
33874: NOT
33875: PUSH
33876: LD_VAR 0 2
33880: NOT
33881: OR
33882: IFFALSE 33886
// exit ;
33884: GO 34044
// x := GetX ( building ) ;
33886: LD_ADDR_VAR 0 5
33890: PUSH
33891: LD_VAR 0 2
33895: PPUSH
33896: CALL_OW 250
33900: ST_TO_ADDR
// y := GetY ( building ) ;
33901: LD_ADDR_VAR 0 6
33905: PUSH
33906: LD_VAR 0 2
33910: PPUSH
33911: CALL_OW 251
33915: ST_TO_ADDR
// for i = 0 to 5 do
33916: LD_ADDR_VAR 0 4
33920: PUSH
33921: DOUBLE
33922: LD_INT 0
33924: DEC
33925: ST_TO_ADDR
33926: LD_INT 5
33928: PUSH
33929: FOR_TO
33930: IFFALSE 34042
// begin _x := ShiftX ( x , i , 3 ) ;
33932: LD_ADDR_VAR 0 7
33936: PUSH
33937: LD_VAR 0 5
33941: PPUSH
33942: LD_VAR 0 4
33946: PPUSH
33947: LD_INT 3
33949: PPUSH
33950: CALL_OW 272
33954: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33955: LD_ADDR_VAR 0 8
33959: PUSH
33960: LD_VAR 0 6
33964: PPUSH
33965: LD_VAR 0 4
33969: PPUSH
33970: LD_INT 3
33972: PPUSH
33973: CALL_OW 273
33977: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33978: LD_VAR 0 7
33982: PPUSH
33983: LD_VAR 0 8
33987: PPUSH
33988: CALL_OW 488
33992: NOT
33993: IFFALSE 33997
// continue ;
33995: GO 33929
// if HexInfo ( _x , _y ) = 0 then
33997: LD_VAR 0 7
34001: PPUSH
34002: LD_VAR 0 8
34006: PPUSH
34007: CALL_OW 428
34011: PUSH
34012: LD_INT 0
34014: EQUAL
34015: IFFALSE 34040
// begin ComMoveXY ( unit , _x , _y ) ;
34017: LD_VAR 0 1
34021: PPUSH
34022: LD_VAR 0 7
34026: PPUSH
34027: LD_VAR 0 8
34031: PPUSH
34032: CALL_OW 111
// exit ;
34036: POP
34037: POP
34038: GO 34044
// end ; end ;
34040: GO 33929
34042: POP
34043: POP
// end ;
34044: LD_VAR 0 3
34048: RET
// export function ScanBase ( side , base_area ) ; begin
34049: LD_INT 0
34051: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34052: LD_ADDR_VAR 0 3
34056: PUSH
34057: LD_VAR 0 2
34061: PPUSH
34062: LD_INT 81
34064: PUSH
34065: LD_VAR 0 1
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PPUSH
34074: CALL_OW 70
34078: ST_TO_ADDR
// end ;
34079: LD_VAR 0 3
34083: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34084: LD_INT 0
34086: PPUSH
34087: PPUSH
34088: PPUSH
34089: PPUSH
// result := false ;
34090: LD_ADDR_VAR 0 2
34094: PUSH
34095: LD_INT 0
34097: ST_TO_ADDR
// side := GetSide ( unit ) ;
34098: LD_ADDR_VAR 0 3
34102: PUSH
34103: LD_VAR 0 1
34107: PPUSH
34108: CALL_OW 255
34112: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34113: LD_ADDR_VAR 0 4
34117: PUSH
34118: LD_VAR 0 1
34122: PPUSH
34123: CALL_OW 248
34127: ST_TO_ADDR
// case nat of 1 :
34128: LD_VAR 0 4
34132: PUSH
34133: LD_INT 1
34135: DOUBLE
34136: EQUAL
34137: IFTRUE 34141
34139: GO 34152
34141: POP
// tech := tech_lassight ; 2 :
34142: LD_ADDR_VAR 0 5
34146: PUSH
34147: LD_INT 12
34149: ST_TO_ADDR
34150: GO 34191
34152: LD_INT 2
34154: DOUBLE
34155: EQUAL
34156: IFTRUE 34160
34158: GO 34171
34160: POP
// tech := tech_mortar ; 3 :
34161: LD_ADDR_VAR 0 5
34165: PUSH
34166: LD_INT 41
34168: ST_TO_ADDR
34169: GO 34191
34171: LD_INT 3
34173: DOUBLE
34174: EQUAL
34175: IFTRUE 34179
34177: GO 34190
34179: POP
// tech := tech_bazooka ; end ;
34180: LD_ADDR_VAR 0 5
34184: PUSH
34185: LD_INT 44
34187: ST_TO_ADDR
34188: GO 34191
34190: POP
// if Researched ( side , tech ) then
34191: LD_VAR 0 3
34195: PPUSH
34196: LD_VAR 0 5
34200: PPUSH
34201: CALL_OW 325
34205: IFFALSE 34232
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34207: LD_ADDR_VAR 0 2
34211: PUSH
34212: LD_INT 5
34214: PUSH
34215: LD_INT 8
34217: PUSH
34218: LD_INT 9
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: LIST
34225: PUSH
34226: LD_VAR 0 4
34230: ARRAY
34231: ST_TO_ADDR
// end ;
34232: LD_VAR 0 2
34236: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34237: LD_INT 0
34239: PPUSH
34240: PPUSH
34241: PPUSH
// if not mines then
34242: LD_VAR 0 2
34246: NOT
34247: IFFALSE 34251
// exit ;
34249: GO 34395
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34251: LD_ADDR_VAR 0 5
34255: PUSH
34256: LD_INT 81
34258: PUSH
34259: LD_VAR 0 1
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 3
34270: PUSH
34271: LD_INT 21
34273: PUSH
34274: LD_INT 3
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PPUSH
34289: CALL_OW 69
34293: ST_TO_ADDR
// for i in mines do
34294: LD_ADDR_VAR 0 4
34298: PUSH
34299: LD_VAR 0 2
34303: PUSH
34304: FOR_IN
34305: IFFALSE 34393
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34307: LD_VAR 0 4
34311: PUSH
34312: LD_INT 1
34314: ARRAY
34315: PPUSH
34316: LD_VAR 0 4
34320: PUSH
34321: LD_INT 2
34323: ARRAY
34324: PPUSH
34325: CALL_OW 458
34329: NOT
34330: IFFALSE 34334
// continue ;
34332: GO 34304
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34334: LD_VAR 0 4
34338: PUSH
34339: LD_INT 1
34341: ARRAY
34342: PPUSH
34343: LD_VAR 0 4
34347: PUSH
34348: LD_INT 2
34350: ARRAY
34351: PPUSH
34352: CALL_OW 428
34356: PUSH
34357: LD_VAR 0 5
34361: IN
34362: IFFALSE 34391
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34364: LD_VAR 0 4
34368: PUSH
34369: LD_INT 1
34371: ARRAY
34372: PPUSH
34373: LD_VAR 0 4
34377: PUSH
34378: LD_INT 2
34380: ARRAY
34381: PPUSH
34382: LD_VAR 0 1
34386: PPUSH
34387: CALL_OW 456
// end ;
34391: GO 34304
34393: POP
34394: POP
// end ;
34395: LD_VAR 0 3
34399: RET
// export function Count ( array ) ; var i ; begin
34400: LD_INT 0
34402: PPUSH
34403: PPUSH
// result := 0 ;
34404: LD_ADDR_VAR 0 2
34408: PUSH
34409: LD_INT 0
34411: ST_TO_ADDR
// for i in array do
34412: LD_ADDR_VAR 0 3
34416: PUSH
34417: LD_VAR 0 1
34421: PUSH
34422: FOR_IN
34423: IFFALSE 34447
// if i then
34425: LD_VAR 0 3
34429: IFFALSE 34445
// result := result + 1 ;
34431: LD_ADDR_VAR 0 2
34435: PUSH
34436: LD_VAR 0 2
34440: PUSH
34441: LD_INT 1
34443: PLUS
34444: ST_TO_ADDR
34445: GO 34422
34447: POP
34448: POP
// end ;
34449: LD_VAR 0 2
34453: RET
// export function IsEmpty ( building ) ; begin
34454: LD_INT 0
34456: PPUSH
// if not building then
34457: LD_VAR 0 1
34461: NOT
34462: IFFALSE 34466
// exit ;
34464: GO 34509
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34466: LD_ADDR_VAR 0 2
34470: PUSH
34471: LD_VAR 0 1
34475: PUSH
34476: LD_INT 22
34478: PUSH
34479: LD_VAR 0 1
34483: PPUSH
34484: CALL_OW 255
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 58
34495: PUSH
34496: EMPTY
34497: LIST
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PPUSH
34503: CALL_OW 69
34507: IN
34508: ST_TO_ADDR
// end ;
34509: LD_VAR 0 2
34513: RET
// export function IsNotFull ( building ) ; var places ; begin
34514: LD_INT 0
34516: PPUSH
34517: PPUSH
// if not building then
34518: LD_VAR 0 1
34522: NOT
34523: IFFALSE 34527
// exit ;
34525: GO 34698
// result := false ;
34527: LD_ADDR_VAR 0 2
34531: PUSH
34532: LD_INT 0
34534: ST_TO_ADDR
// places := 0 ;
34535: LD_ADDR_VAR 0 3
34539: PUSH
34540: LD_INT 0
34542: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
34543: LD_VAR 0 1
34547: PPUSH
34548: CALL_OW 266
34552: PUSH
34553: LD_INT 0
34555: DOUBLE
34556: EQUAL
34557: IFTRUE 34615
34559: LD_INT 1
34561: DOUBLE
34562: EQUAL
34563: IFTRUE 34615
34565: LD_INT 6
34567: DOUBLE
34568: EQUAL
34569: IFTRUE 34615
34571: LD_INT 7
34573: DOUBLE
34574: EQUAL
34575: IFTRUE 34615
34577: LD_INT 8
34579: DOUBLE
34580: EQUAL
34581: IFTRUE 34615
34583: LD_INT 4
34585: DOUBLE
34586: EQUAL
34587: IFTRUE 34615
34589: LD_INT 5
34591: DOUBLE
34592: EQUAL
34593: IFTRUE 34615
34595: LD_INT 2
34597: DOUBLE
34598: EQUAL
34599: IFTRUE 34615
34601: LD_INT 3
34603: DOUBLE
34604: EQUAL
34605: IFTRUE 34615
34607: LD_INT 35
34609: DOUBLE
34610: EQUAL
34611: IFTRUE 34615
34613: GO 34626
34615: POP
// places := 6 ; b_bunker , b_breastwork :
34616: LD_ADDR_VAR 0 3
34620: PUSH
34621: LD_INT 6
34623: ST_TO_ADDR
34624: GO 34671
34626: LD_INT 32
34628: DOUBLE
34629: EQUAL
34630: IFTRUE 34640
34632: LD_INT 31
34634: DOUBLE
34635: EQUAL
34636: IFTRUE 34640
34638: GO 34651
34640: POP
// places := 1 ; b_control_tower :
34641: LD_ADDR_VAR 0 3
34645: PUSH
34646: LD_INT 1
34648: ST_TO_ADDR
34649: GO 34671
34651: LD_INT 36
34653: DOUBLE
34654: EQUAL
34655: IFTRUE 34659
34657: GO 34670
34659: POP
// places := 3 ; end ;
34660: LD_ADDR_VAR 0 3
34664: PUSH
34665: LD_INT 3
34667: ST_TO_ADDR
34668: GO 34671
34670: POP
// if places then
34671: LD_VAR 0 3
34675: IFFALSE 34698
// result := UnitsInside ( building ) < places ;
34677: LD_ADDR_VAR 0 2
34681: PUSH
34682: LD_VAR 0 1
34686: PPUSH
34687: CALL_OW 313
34691: PUSH
34692: LD_VAR 0 3
34696: LESS
34697: ST_TO_ADDR
// end ;
34698: LD_VAR 0 2
34702: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34703: LD_INT 0
34705: PPUSH
34706: PPUSH
34707: PPUSH
34708: PPUSH
// tmp := [ ] ;
34709: LD_ADDR_VAR 0 3
34713: PUSH
34714: EMPTY
34715: ST_TO_ADDR
// list := [ ] ;
34716: LD_ADDR_VAR 0 5
34720: PUSH
34721: EMPTY
34722: ST_TO_ADDR
// for i = 16 to 25 do
34723: LD_ADDR_VAR 0 4
34727: PUSH
34728: DOUBLE
34729: LD_INT 16
34731: DEC
34732: ST_TO_ADDR
34733: LD_INT 25
34735: PUSH
34736: FOR_TO
34737: IFFALSE 34810
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34739: LD_ADDR_VAR 0 3
34743: PUSH
34744: LD_VAR 0 3
34748: PUSH
34749: LD_INT 22
34751: PUSH
34752: LD_VAR 0 1
34756: PPUSH
34757: CALL_OW 255
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 91
34768: PUSH
34769: LD_VAR 0 1
34773: PUSH
34774: LD_INT 6
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 30
34784: PUSH
34785: LD_VAR 0 4
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: PUSH
34799: EMPTY
34800: LIST
34801: PPUSH
34802: CALL_OW 69
34806: ADD
34807: ST_TO_ADDR
34808: GO 34736
34810: POP
34811: POP
// for i = 1 to tmp do
34812: LD_ADDR_VAR 0 4
34816: PUSH
34817: DOUBLE
34818: LD_INT 1
34820: DEC
34821: ST_TO_ADDR
34822: LD_VAR 0 3
34826: PUSH
34827: FOR_TO
34828: IFFALSE 34916
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34830: LD_ADDR_VAR 0 5
34834: PUSH
34835: LD_VAR 0 5
34839: PUSH
34840: LD_VAR 0 3
34844: PUSH
34845: LD_VAR 0 4
34849: ARRAY
34850: PPUSH
34851: CALL_OW 266
34855: PUSH
34856: LD_VAR 0 3
34860: PUSH
34861: LD_VAR 0 4
34865: ARRAY
34866: PPUSH
34867: CALL_OW 250
34871: PUSH
34872: LD_VAR 0 3
34876: PUSH
34877: LD_VAR 0 4
34881: ARRAY
34882: PPUSH
34883: CALL_OW 251
34887: PUSH
34888: LD_VAR 0 3
34892: PUSH
34893: LD_VAR 0 4
34897: ARRAY
34898: PPUSH
34899: CALL_OW 254
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: PUSH
34910: EMPTY
34911: LIST
34912: ADD
34913: ST_TO_ADDR
34914: GO 34827
34916: POP
34917: POP
// result := list ;
34918: LD_ADDR_VAR 0 2
34922: PUSH
34923: LD_VAR 0 5
34927: ST_TO_ADDR
// end ;
34928: LD_VAR 0 2
34932: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34933: LD_INT 0
34935: PPUSH
34936: PPUSH
34937: PPUSH
34938: PPUSH
34939: PPUSH
34940: PPUSH
34941: PPUSH
// if not factory then
34942: LD_VAR 0 1
34946: NOT
34947: IFFALSE 34951
// exit ;
34949: GO 35544
// if control = control_apeman then
34951: LD_VAR 0 4
34955: PUSH
34956: LD_INT 5
34958: EQUAL
34959: IFFALSE 35068
// begin tmp := UnitsInside ( factory ) ;
34961: LD_ADDR_VAR 0 8
34965: PUSH
34966: LD_VAR 0 1
34970: PPUSH
34971: CALL_OW 313
34975: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34976: LD_VAR 0 8
34980: PPUSH
34981: LD_INT 25
34983: PUSH
34984: LD_INT 12
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PPUSH
34991: CALL_OW 72
34995: NOT
34996: IFFALSE 35006
// control := control_manual ;
34998: LD_ADDR_VAR 0 4
35002: PUSH
35003: LD_INT 1
35005: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35006: LD_ADDR_VAR 0 8
35010: PUSH
35011: LD_VAR 0 1
35015: PPUSH
35016: CALL 34703 0 1
35020: ST_TO_ADDR
// if tmp then
35021: LD_VAR 0 8
35025: IFFALSE 35068
// begin for i in tmp do
35027: LD_ADDR_VAR 0 7
35031: PUSH
35032: LD_VAR 0 8
35036: PUSH
35037: FOR_IN
35038: IFFALSE 35066
// if i [ 1 ] = b_ext_radio then
35040: LD_VAR 0 7
35044: PUSH
35045: LD_INT 1
35047: ARRAY
35048: PUSH
35049: LD_INT 22
35051: EQUAL
35052: IFFALSE 35064
// begin control := control_remote ;
35054: LD_ADDR_VAR 0 4
35058: PUSH
35059: LD_INT 2
35061: ST_TO_ADDR
// break ;
35062: GO 35066
// end ;
35064: GO 35037
35066: POP
35067: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35068: LD_VAR 0 1
35072: PPUSH
35073: LD_VAR 0 2
35077: PPUSH
35078: LD_VAR 0 3
35082: PPUSH
35083: LD_VAR 0 4
35087: PPUSH
35088: LD_VAR 0 5
35092: PPUSH
35093: CALL_OW 448
35097: IFFALSE 35132
// begin result := [ chassis , engine , control , weapon ] ;
35099: LD_ADDR_VAR 0 6
35103: PUSH
35104: LD_VAR 0 2
35108: PUSH
35109: LD_VAR 0 3
35113: PUSH
35114: LD_VAR 0 4
35118: PUSH
35119: LD_VAR 0 5
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: ST_TO_ADDR
// exit ;
35130: GO 35544
// end ; _chassis := AvailableChassisList ( factory ) ;
35132: LD_ADDR_VAR 0 9
35136: PUSH
35137: LD_VAR 0 1
35141: PPUSH
35142: CALL_OW 475
35146: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35147: LD_ADDR_VAR 0 11
35151: PUSH
35152: LD_VAR 0 1
35156: PPUSH
35157: CALL_OW 476
35161: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35162: LD_ADDR_VAR 0 12
35166: PUSH
35167: LD_VAR 0 1
35171: PPUSH
35172: CALL_OW 477
35176: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35177: LD_ADDR_VAR 0 10
35181: PUSH
35182: LD_VAR 0 1
35186: PPUSH
35187: CALL_OW 478
35191: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35192: LD_VAR 0 9
35196: NOT
35197: PUSH
35198: LD_VAR 0 11
35202: NOT
35203: OR
35204: PUSH
35205: LD_VAR 0 12
35209: NOT
35210: OR
35211: PUSH
35212: LD_VAR 0 10
35216: NOT
35217: OR
35218: IFFALSE 35253
// begin result := [ chassis , engine , control , weapon ] ;
35220: LD_ADDR_VAR 0 6
35224: PUSH
35225: LD_VAR 0 2
35229: PUSH
35230: LD_VAR 0 3
35234: PUSH
35235: LD_VAR 0 4
35239: PUSH
35240: LD_VAR 0 5
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: ST_TO_ADDR
// exit ;
35251: GO 35544
// end ; if not chassis in _chassis then
35253: LD_VAR 0 2
35257: PUSH
35258: LD_VAR 0 9
35262: IN
35263: NOT
35264: IFFALSE 35290
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35266: LD_ADDR_VAR 0 2
35270: PUSH
35271: LD_VAR 0 9
35275: PUSH
35276: LD_INT 1
35278: PPUSH
35279: LD_VAR 0 9
35283: PPUSH
35284: CALL_OW 12
35288: ARRAY
35289: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35290: LD_VAR 0 2
35294: PPUSH
35295: LD_VAR 0 3
35299: PPUSH
35300: CALL 35549 0 2
35304: NOT
35305: IFFALSE 35364
// repeat engine := _engine [ 1 ] ;
35307: LD_ADDR_VAR 0 3
35311: PUSH
35312: LD_VAR 0 11
35316: PUSH
35317: LD_INT 1
35319: ARRAY
35320: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35321: LD_ADDR_VAR 0 11
35325: PUSH
35326: LD_VAR 0 11
35330: PPUSH
35331: LD_INT 1
35333: PPUSH
35334: CALL_OW 3
35338: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35339: LD_VAR 0 2
35343: PPUSH
35344: LD_VAR 0 3
35348: PPUSH
35349: CALL 35549 0 2
35353: PUSH
35354: LD_VAR 0 11
35358: PUSH
35359: EMPTY
35360: EQUAL
35361: OR
35362: IFFALSE 35307
// if not control in _control then
35364: LD_VAR 0 4
35368: PUSH
35369: LD_VAR 0 12
35373: IN
35374: NOT
35375: IFFALSE 35401
// control := _control [ rand ( 1 , _control ) ] ;
35377: LD_ADDR_VAR 0 4
35381: PUSH
35382: LD_VAR 0 12
35386: PUSH
35387: LD_INT 1
35389: PPUSH
35390: LD_VAR 0 12
35394: PPUSH
35395: CALL_OW 12
35399: ARRAY
35400: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35401: LD_VAR 0 2
35405: PPUSH
35406: LD_VAR 0 5
35410: PPUSH
35411: CALL 35769 0 2
35415: NOT
35416: IFFALSE 35475
// repeat weapon := _weapon [ 1 ] ;
35418: LD_ADDR_VAR 0 5
35422: PUSH
35423: LD_VAR 0 10
35427: PUSH
35428: LD_INT 1
35430: ARRAY
35431: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35432: LD_ADDR_VAR 0 10
35436: PUSH
35437: LD_VAR 0 10
35441: PPUSH
35442: LD_INT 1
35444: PPUSH
35445: CALL_OW 3
35449: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35450: LD_VAR 0 2
35454: PPUSH
35455: LD_VAR 0 5
35459: PPUSH
35460: CALL 35769 0 2
35464: PUSH
35465: LD_VAR 0 10
35469: PUSH
35470: EMPTY
35471: EQUAL
35472: OR
35473: IFFALSE 35418
// result := [ ] ;
35475: LD_ADDR_VAR 0 6
35479: PUSH
35480: EMPTY
35481: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35482: LD_VAR 0 1
35486: PPUSH
35487: LD_VAR 0 2
35491: PPUSH
35492: LD_VAR 0 3
35496: PPUSH
35497: LD_VAR 0 4
35501: PPUSH
35502: LD_VAR 0 5
35506: PPUSH
35507: CALL_OW 448
35511: IFFALSE 35544
// result := [ chassis , engine , control , weapon ] ;
35513: LD_ADDR_VAR 0 6
35517: PUSH
35518: LD_VAR 0 2
35522: PUSH
35523: LD_VAR 0 3
35527: PUSH
35528: LD_VAR 0 4
35532: PUSH
35533: LD_VAR 0 5
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: ST_TO_ADDR
// end ;
35544: LD_VAR 0 6
35548: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35549: LD_INT 0
35551: PPUSH
// if not chassis or not engine then
35552: LD_VAR 0 1
35556: NOT
35557: PUSH
35558: LD_VAR 0 2
35562: NOT
35563: OR
35564: IFFALSE 35568
// exit ;
35566: GO 35764
// case engine of engine_solar :
35568: LD_VAR 0 2
35572: PUSH
35573: LD_INT 2
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35619
35581: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_INT 11
35589: PUSH
35590: LD_INT 12
35592: PUSH
35593: LD_INT 13
35595: PUSH
35596: LD_INT 14
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: LD_INT 2
35604: PUSH
35605: LD_INT 3
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: ST_TO_ADDR
35617: GO 35748
35619: LD_INT 1
35621: DOUBLE
35622: EQUAL
35623: IFTRUE 35627
35625: GO 35689
35627: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35628: LD_ADDR_VAR 0 3
35632: PUSH
35633: LD_INT 11
35635: PUSH
35636: LD_INT 12
35638: PUSH
35639: LD_INT 13
35641: PUSH
35642: LD_INT 14
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: LD_INT 3
35653: PUSH
35654: LD_INT 4
35656: PUSH
35657: LD_INT 5
35659: PUSH
35660: LD_INT 21
35662: PUSH
35663: LD_INT 23
35665: PUSH
35666: LD_INT 22
35668: PUSH
35669: LD_INT 24
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: ST_TO_ADDR
35687: GO 35748
35689: LD_INT 3
35691: DOUBLE
35692: EQUAL
35693: IFTRUE 35697
35695: GO 35747
35697: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35698: LD_ADDR_VAR 0 3
35702: PUSH
35703: LD_INT 13
35705: PUSH
35706: LD_INT 14
35708: PUSH
35709: LD_INT 2
35711: PUSH
35712: LD_INT 3
35714: PUSH
35715: LD_INT 4
35717: PUSH
35718: LD_INT 5
35720: PUSH
35721: LD_INT 21
35723: PUSH
35724: LD_INT 22
35726: PUSH
35727: LD_INT 23
35729: PUSH
35730: LD_INT 24
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: ST_TO_ADDR
35745: GO 35748
35747: POP
// result := ( chassis in result ) ;
35748: LD_ADDR_VAR 0 3
35752: PUSH
35753: LD_VAR 0 1
35757: PUSH
35758: LD_VAR 0 3
35762: IN
35763: ST_TO_ADDR
// end ;
35764: LD_VAR 0 3
35768: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35769: LD_INT 0
35771: PPUSH
// if not chassis or not weapon then
35772: LD_VAR 0 1
35776: NOT
35777: PUSH
35778: LD_VAR 0 2
35782: NOT
35783: OR
35784: IFFALSE 35788
// exit ;
35786: GO 36850
// case weapon of us_machine_gun :
35788: LD_VAR 0 2
35792: PUSH
35793: LD_INT 2
35795: DOUBLE
35796: EQUAL
35797: IFTRUE 35801
35799: GO 35831
35801: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35802: LD_ADDR_VAR 0 3
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: LD_INT 3
35815: PUSH
35816: LD_INT 4
35818: PUSH
35819: LD_INT 5
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: ST_TO_ADDR
35829: GO 36834
35831: LD_INT 3
35833: DOUBLE
35834: EQUAL
35835: IFTRUE 35839
35837: GO 35869
35839: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35840: LD_ADDR_VAR 0 3
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: LD_INT 2
35850: PUSH
35851: LD_INT 3
35853: PUSH
35854: LD_INT 4
35856: PUSH
35857: LD_INT 5
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: ST_TO_ADDR
35867: GO 36834
35869: LD_INT 11
35871: DOUBLE
35872: EQUAL
35873: IFTRUE 35877
35875: GO 35907
35877: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35878: LD_ADDR_VAR 0 3
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: LD_INT 2
35888: PUSH
35889: LD_INT 3
35891: PUSH
35892: LD_INT 4
35894: PUSH
35895: LD_INT 5
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: ST_TO_ADDR
35905: GO 36834
35907: LD_INT 4
35909: DOUBLE
35910: EQUAL
35911: IFTRUE 35915
35913: GO 35941
35915: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35916: LD_ADDR_VAR 0 3
35920: PUSH
35921: LD_INT 2
35923: PUSH
35924: LD_INT 3
35926: PUSH
35927: LD_INT 4
35929: PUSH
35930: LD_INT 5
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: ST_TO_ADDR
35939: GO 36834
35941: LD_INT 5
35943: DOUBLE
35944: EQUAL
35945: IFTRUE 35949
35947: GO 35975
35949: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35950: LD_ADDR_VAR 0 3
35954: PUSH
35955: LD_INT 2
35957: PUSH
35958: LD_INT 3
35960: PUSH
35961: LD_INT 4
35963: PUSH
35964: LD_INT 5
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
35973: GO 36834
35975: LD_INT 9
35977: DOUBLE
35978: EQUAL
35979: IFTRUE 35983
35981: GO 36009
35983: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35984: LD_ADDR_VAR 0 3
35988: PUSH
35989: LD_INT 2
35991: PUSH
35992: LD_INT 3
35994: PUSH
35995: LD_INT 4
35997: PUSH
35998: LD_INT 5
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: ST_TO_ADDR
36007: GO 36834
36009: LD_INT 7
36011: DOUBLE
36012: EQUAL
36013: IFTRUE 36017
36015: GO 36043
36017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36018: LD_ADDR_VAR 0 3
36022: PUSH
36023: LD_INT 2
36025: PUSH
36026: LD_INT 3
36028: PUSH
36029: LD_INT 4
36031: PUSH
36032: LD_INT 5
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: ST_TO_ADDR
36041: GO 36834
36043: LD_INT 12
36045: DOUBLE
36046: EQUAL
36047: IFTRUE 36051
36049: GO 36077
36051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36052: LD_ADDR_VAR 0 3
36056: PUSH
36057: LD_INT 2
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: LD_INT 4
36065: PUSH
36066: LD_INT 5
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: ST_TO_ADDR
36075: GO 36834
36077: LD_INT 13
36079: DOUBLE
36080: EQUAL
36081: IFTRUE 36085
36083: GO 36111
36085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36086: LD_ADDR_VAR 0 3
36090: PUSH
36091: LD_INT 2
36093: PUSH
36094: LD_INT 3
36096: PUSH
36097: LD_INT 4
36099: PUSH
36100: LD_INT 5
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: ST_TO_ADDR
36109: GO 36834
36111: LD_INT 14
36113: DOUBLE
36114: EQUAL
36115: IFTRUE 36119
36117: GO 36137
36119: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36120: LD_ADDR_VAR 0 3
36124: PUSH
36125: LD_INT 4
36127: PUSH
36128: LD_INT 5
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: ST_TO_ADDR
36135: GO 36834
36137: LD_INT 6
36139: DOUBLE
36140: EQUAL
36141: IFTRUE 36145
36143: GO 36163
36145: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36146: LD_ADDR_VAR 0 3
36150: PUSH
36151: LD_INT 4
36153: PUSH
36154: LD_INT 5
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: ST_TO_ADDR
36161: GO 36834
36163: LD_INT 10
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36171
36169: GO 36189
36171: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36172: LD_ADDR_VAR 0 3
36176: PUSH
36177: LD_INT 4
36179: PUSH
36180: LD_INT 5
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: ST_TO_ADDR
36187: GO 36834
36189: LD_INT 22
36191: DOUBLE
36192: EQUAL
36193: IFTRUE 36197
36195: GO 36223
36197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36198: LD_ADDR_VAR 0 3
36202: PUSH
36203: LD_INT 11
36205: PUSH
36206: LD_INT 12
36208: PUSH
36209: LD_INT 13
36211: PUSH
36212: LD_INT 14
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: ST_TO_ADDR
36221: GO 36834
36223: LD_INT 23
36225: DOUBLE
36226: EQUAL
36227: IFTRUE 36231
36229: GO 36257
36231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36232: LD_ADDR_VAR 0 3
36236: PUSH
36237: LD_INT 11
36239: PUSH
36240: LD_INT 12
36242: PUSH
36243: LD_INT 13
36245: PUSH
36246: LD_INT 14
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: ST_TO_ADDR
36255: GO 36834
36257: LD_INT 24
36259: DOUBLE
36260: EQUAL
36261: IFTRUE 36265
36263: GO 36291
36265: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36266: LD_ADDR_VAR 0 3
36270: PUSH
36271: LD_INT 11
36273: PUSH
36274: LD_INT 12
36276: PUSH
36277: LD_INT 13
36279: PUSH
36280: LD_INT 14
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: ST_TO_ADDR
36289: GO 36834
36291: LD_INT 30
36293: DOUBLE
36294: EQUAL
36295: IFTRUE 36299
36297: GO 36325
36299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36300: LD_ADDR_VAR 0 3
36304: PUSH
36305: LD_INT 11
36307: PUSH
36308: LD_INT 12
36310: PUSH
36311: LD_INT 13
36313: PUSH
36314: LD_INT 14
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: ST_TO_ADDR
36323: GO 36834
36325: LD_INT 25
36327: DOUBLE
36328: EQUAL
36329: IFTRUE 36333
36331: GO 36351
36333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36334: LD_ADDR_VAR 0 3
36338: PUSH
36339: LD_INT 13
36341: PUSH
36342: LD_INT 14
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: ST_TO_ADDR
36349: GO 36834
36351: LD_INT 27
36353: DOUBLE
36354: EQUAL
36355: IFTRUE 36359
36357: GO 36377
36359: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36360: LD_ADDR_VAR 0 3
36364: PUSH
36365: LD_INT 13
36367: PUSH
36368: LD_INT 14
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: ST_TO_ADDR
36375: GO 36834
36377: LD_EXP 26
36381: DOUBLE
36382: EQUAL
36383: IFTRUE 36387
36385: GO 36413
36387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36388: LD_ADDR_VAR 0 3
36392: PUSH
36393: LD_INT 11
36395: PUSH
36396: LD_INT 12
36398: PUSH
36399: LD_INT 13
36401: PUSH
36402: LD_INT 14
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
36411: GO 36834
36413: LD_INT 28
36415: DOUBLE
36416: EQUAL
36417: IFTRUE 36421
36419: GO 36439
36421: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36422: LD_ADDR_VAR 0 3
36426: PUSH
36427: LD_INT 13
36429: PUSH
36430: LD_INT 14
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: ST_TO_ADDR
36437: GO 36834
36439: LD_INT 29
36441: DOUBLE
36442: EQUAL
36443: IFTRUE 36447
36445: GO 36465
36447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36448: LD_ADDR_VAR 0 3
36452: PUSH
36453: LD_INT 13
36455: PUSH
36456: LD_INT 14
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: ST_TO_ADDR
36463: GO 36834
36465: LD_INT 31
36467: DOUBLE
36468: EQUAL
36469: IFTRUE 36473
36471: GO 36491
36473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36474: LD_ADDR_VAR 0 3
36478: PUSH
36479: LD_INT 13
36481: PUSH
36482: LD_INT 14
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: ST_TO_ADDR
36489: GO 36834
36491: LD_INT 26
36493: DOUBLE
36494: EQUAL
36495: IFTRUE 36499
36497: GO 36517
36499: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36500: LD_ADDR_VAR 0 3
36504: PUSH
36505: LD_INT 13
36507: PUSH
36508: LD_INT 14
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: ST_TO_ADDR
36515: GO 36834
36517: LD_INT 42
36519: DOUBLE
36520: EQUAL
36521: IFTRUE 36525
36523: GO 36551
36525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36526: LD_ADDR_VAR 0 3
36530: PUSH
36531: LD_INT 21
36533: PUSH
36534: LD_INT 22
36536: PUSH
36537: LD_INT 23
36539: PUSH
36540: LD_INT 24
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
36549: GO 36834
36551: LD_INT 43
36553: DOUBLE
36554: EQUAL
36555: IFTRUE 36559
36557: GO 36585
36559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36560: LD_ADDR_VAR 0 3
36564: PUSH
36565: LD_INT 21
36567: PUSH
36568: LD_INT 22
36570: PUSH
36571: LD_INT 23
36573: PUSH
36574: LD_INT 24
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: ST_TO_ADDR
36583: GO 36834
36585: LD_INT 44
36587: DOUBLE
36588: EQUAL
36589: IFTRUE 36593
36591: GO 36619
36593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36594: LD_ADDR_VAR 0 3
36598: PUSH
36599: LD_INT 21
36601: PUSH
36602: LD_INT 22
36604: PUSH
36605: LD_INT 23
36607: PUSH
36608: LD_INT 24
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: ST_TO_ADDR
36617: GO 36834
36619: LD_INT 45
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36627
36625: GO 36653
36627: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36628: LD_ADDR_VAR 0 3
36632: PUSH
36633: LD_INT 21
36635: PUSH
36636: LD_INT 22
36638: PUSH
36639: LD_INT 23
36641: PUSH
36642: LD_INT 24
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: ST_TO_ADDR
36651: GO 36834
36653: LD_INT 49
36655: DOUBLE
36656: EQUAL
36657: IFTRUE 36661
36659: GO 36687
36661: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36662: LD_ADDR_VAR 0 3
36666: PUSH
36667: LD_INT 21
36669: PUSH
36670: LD_INT 22
36672: PUSH
36673: LD_INT 23
36675: PUSH
36676: LD_INT 24
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: ST_TO_ADDR
36685: GO 36834
36687: LD_INT 51
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36695
36693: GO 36721
36695: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_INT 21
36703: PUSH
36704: LD_INT 22
36706: PUSH
36707: LD_INT 23
36709: PUSH
36710: LD_INT 24
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
36719: GO 36834
36721: LD_INT 52
36723: DOUBLE
36724: EQUAL
36725: IFTRUE 36729
36727: GO 36755
36729: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36730: LD_ADDR_VAR 0 3
36734: PUSH
36735: LD_INT 21
36737: PUSH
36738: LD_INT 22
36740: PUSH
36741: LD_INT 23
36743: PUSH
36744: LD_INT 24
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: ST_TO_ADDR
36753: GO 36834
36755: LD_INT 53
36757: DOUBLE
36758: EQUAL
36759: IFTRUE 36763
36761: GO 36781
36763: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36764: LD_ADDR_VAR 0 3
36768: PUSH
36769: LD_INT 23
36771: PUSH
36772: LD_INT 24
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: ST_TO_ADDR
36779: GO 36834
36781: LD_INT 46
36783: DOUBLE
36784: EQUAL
36785: IFTRUE 36789
36787: GO 36807
36789: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36790: LD_ADDR_VAR 0 3
36794: PUSH
36795: LD_INT 23
36797: PUSH
36798: LD_INT 24
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: ST_TO_ADDR
36805: GO 36834
36807: LD_INT 47
36809: DOUBLE
36810: EQUAL
36811: IFTRUE 36815
36813: GO 36833
36815: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36816: LD_ADDR_VAR 0 3
36820: PUSH
36821: LD_INT 23
36823: PUSH
36824: LD_INT 24
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: ST_TO_ADDR
36831: GO 36834
36833: POP
// result := ( chassis in result ) ;
36834: LD_ADDR_VAR 0 3
36838: PUSH
36839: LD_VAR 0 1
36843: PUSH
36844: LD_VAR 0 3
36848: IN
36849: ST_TO_ADDR
// end ;
36850: LD_VAR 0 3
36854: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36855: LD_INT 0
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
36861: PPUSH
36862: PPUSH
36863: PPUSH
// result := array ;
36864: LD_ADDR_VAR 0 5
36868: PUSH
36869: LD_VAR 0 1
36873: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36874: LD_VAR 0 1
36878: NOT
36879: PUSH
36880: LD_VAR 0 2
36884: NOT
36885: OR
36886: PUSH
36887: LD_VAR 0 3
36891: NOT
36892: OR
36893: PUSH
36894: LD_VAR 0 2
36898: PUSH
36899: LD_VAR 0 1
36903: GREATER
36904: OR
36905: PUSH
36906: LD_VAR 0 3
36910: PUSH
36911: LD_VAR 0 1
36915: GREATER
36916: OR
36917: IFFALSE 36921
// exit ;
36919: GO 37217
// if direction then
36921: LD_VAR 0 4
36925: IFFALSE 36989
// begin d := 1 ;
36927: LD_ADDR_VAR 0 9
36931: PUSH
36932: LD_INT 1
36934: ST_TO_ADDR
// if i_from > i_to then
36935: LD_VAR 0 2
36939: PUSH
36940: LD_VAR 0 3
36944: GREATER
36945: IFFALSE 36971
// length := ( array - i_from ) + i_to else
36947: LD_ADDR_VAR 0 11
36951: PUSH
36952: LD_VAR 0 1
36956: PUSH
36957: LD_VAR 0 2
36961: MINUS
36962: PUSH
36963: LD_VAR 0 3
36967: PLUS
36968: ST_TO_ADDR
36969: GO 36987
// length := i_to - i_from ;
36971: LD_ADDR_VAR 0 11
36975: PUSH
36976: LD_VAR 0 3
36980: PUSH
36981: LD_VAR 0 2
36985: MINUS
36986: ST_TO_ADDR
// end else
36987: GO 37050
// begin d := - 1 ;
36989: LD_ADDR_VAR 0 9
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: ST_TO_ADDR
// if i_from > i_to then
36998: LD_VAR 0 2
37002: PUSH
37003: LD_VAR 0 3
37007: GREATER
37008: IFFALSE 37028
// length := i_from - i_to else
37010: LD_ADDR_VAR 0 11
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: LD_VAR 0 3
37024: MINUS
37025: ST_TO_ADDR
37026: GO 37050
// length := ( array - i_to ) + i_from ;
37028: LD_ADDR_VAR 0 11
37032: PUSH
37033: LD_VAR 0 1
37037: PUSH
37038: LD_VAR 0 3
37042: MINUS
37043: PUSH
37044: LD_VAR 0 2
37048: PLUS
37049: ST_TO_ADDR
// end ; if not length then
37050: LD_VAR 0 11
37054: NOT
37055: IFFALSE 37059
// exit ;
37057: GO 37217
// tmp := array ;
37059: LD_ADDR_VAR 0 10
37063: PUSH
37064: LD_VAR 0 1
37068: ST_TO_ADDR
// for i = 1 to length do
37069: LD_ADDR_VAR 0 6
37073: PUSH
37074: DOUBLE
37075: LD_INT 1
37077: DEC
37078: ST_TO_ADDR
37079: LD_VAR 0 11
37083: PUSH
37084: FOR_TO
37085: IFFALSE 37205
// begin for j = 1 to array do
37087: LD_ADDR_VAR 0 7
37091: PUSH
37092: DOUBLE
37093: LD_INT 1
37095: DEC
37096: ST_TO_ADDR
37097: LD_VAR 0 1
37101: PUSH
37102: FOR_TO
37103: IFFALSE 37191
// begin k := j + d ;
37105: LD_ADDR_VAR 0 8
37109: PUSH
37110: LD_VAR 0 7
37114: PUSH
37115: LD_VAR 0 9
37119: PLUS
37120: ST_TO_ADDR
// if k > array then
37121: LD_VAR 0 8
37125: PUSH
37126: LD_VAR 0 1
37130: GREATER
37131: IFFALSE 37141
// k := 1 ;
37133: LD_ADDR_VAR 0 8
37137: PUSH
37138: LD_INT 1
37140: ST_TO_ADDR
// if not k then
37141: LD_VAR 0 8
37145: NOT
37146: IFFALSE 37158
// k := array ;
37148: LD_ADDR_VAR 0 8
37152: PUSH
37153: LD_VAR 0 1
37157: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37158: LD_ADDR_VAR 0 10
37162: PUSH
37163: LD_VAR 0 10
37167: PPUSH
37168: LD_VAR 0 8
37172: PPUSH
37173: LD_VAR 0 1
37177: PUSH
37178: LD_VAR 0 7
37182: ARRAY
37183: PPUSH
37184: CALL_OW 1
37188: ST_TO_ADDR
// end ;
37189: GO 37102
37191: POP
37192: POP
// array := tmp ;
37193: LD_ADDR_VAR 0 1
37197: PUSH
37198: LD_VAR 0 10
37202: ST_TO_ADDR
// end ;
37203: GO 37084
37205: POP
37206: POP
// result := array ;
37207: LD_ADDR_VAR 0 5
37211: PUSH
37212: LD_VAR 0 1
37216: ST_TO_ADDR
// end ;
37217: LD_VAR 0 5
37221: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37222: LD_INT 0
37224: PPUSH
37225: PPUSH
// result := 0 ;
37226: LD_ADDR_VAR 0 3
37230: PUSH
37231: LD_INT 0
37233: ST_TO_ADDR
// if not array or not value in array then
37234: LD_VAR 0 1
37238: NOT
37239: PUSH
37240: LD_VAR 0 2
37244: PUSH
37245: LD_VAR 0 1
37249: IN
37250: NOT
37251: OR
37252: IFFALSE 37256
// exit ;
37254: GO 37310
// for i = 1 to array do
37256: LD_ADDR_VAR 0 4
37260: PUSH
37261: DOUBLE
37262: LD_INT 1
37264: DEC
37265: ST_TO_ADDR
37266: LD_VAR 0 1
37270: PUSH
37271: FOR_TO
37272: IFFALSE 37308
// if value = array [ i ] then
37274: LD_VAR 0 2
37278: PUSH
37279: LD_VAR 0 1
37283: PUSH
37284: LD_VAR 0 4
37288: ARRAY
37289: EQUAL
37290: IFFALSE 37306
// begin result := i ;
37292: LD_ADDR_VAR 0 3
37296: PUSH
37297: LD_VAR 0 4
37301: ST_TO_ADDR
// exit ;
37302: POP
37303: POP
37304: GO 37310
// end ;
37306: GO 37271
37308: POP
37309: POP
// end ;
37310: LD_VAR 0 3
37314: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37315: LD_INT 0
37317: PPUSH
// vc_chassis := chassis ;
37318: LD_ADDR_OWVAR 37
37322: PUSH
37323: LD_VAR 0 1
37327: ST_TO_ADDR
// vc_engine := engine ;
37328: LD_ADDR_OWVAR 39
37332: PUSH
37333: LD_VAR 0 2
37337: ST_TO_ADDR
// vc_control := control ;
37338: LD_ADDR_OWVAR 38
37342: PUSH
37343: LD_VAR 0 3
37347: ST_TO_ADDR
// vc_weapon := weapon ;
37348: LD_ADDR_OWVAR 40
37352: PUSH
37353: LD_VAR 0 4
37357: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37358: LD_ADDR_OWVAR 41
37362: PUSH
37363: LD_VAR 0 5
37367: ST_TO_ADDR
// end ;
37368: LD_VAR 0 6
37372: RET
// export function WantPlant ( unit ) ; var task ; begin
37373: LD_INT 0
37375: PPUSH
37376: PPUSH
// result := false ;
37377: LD_ADDR_VAR 0 2
37381: PUSH
37382: LD_INT 0
37384: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37385: LD_ADDR_VAR 0 3
37389: PUSH
37390: LD_VAR 0 1
37394: PPUSH
37395: CALL_OW 437
37399: ST_TO_ADDR
// if task then
37400: LD_VAR 0 3
37404: IFFALSE 37432
// if task [ 1 ] [ 1 ] = p then
37406: LD_VAR 0 3
37410: PUSH
37411: LD_INT 1
37413: ARRAY
37414: PUSH
37415: LD_INT 1
37417: ARRAY
37418: PUSH
37419: LD_STRING p
37421: EQUAL
37422: IFFALSE 37432
// result := true ;
37424: LD_ADDR_VAR 0 2
37428: PUSH
37429: LD_INT 1
37431: ST_TO_ADDR
// end ;
37432: LD_VAR 0 2
37436: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37437: LD_INT 0
37439: PPUSH
37440: PPUSH
37441: PPUSH
37442: PPUSH
// if pos < 1 then
37443: LD_VAR 0 2
37447: PUSH
37448: LD_INT 1
37450: LESS
37451: IFFALSE 37455
// exit ;
37453: GO 37758
// if pos = 1 then
37455: LD_VAR 0 2
37459: PUSH
37460: LD_INT 1
37462: EQUAL
37463: IFFALSE 37496
// result := Replace ( arr , pos [ 1 ] , value ) else
37465: LD_ADDR_VAR 0 4
37469: PUSH
37470: LD_VAR 0 1
37474: PPUSH
37475: LD_VAR 0 2
37479: PUSH
37480: LD_INT 1
37482: ARRAY
37483: PPUSH
37484: LD_VAR 0 3
37488: PPUSH
37489: CALL_OW 1
37493: ST_TO_ADDR
37494: GO 37758
// begin tmp := arr ;
37496: LD_ADDR_VAR 0 6
37500: PUSH
37501: LD_VAR 0 1
37505: ST_TO_ADDR
// s_arr := [ tmp ] ;
37506: LD_ADDR_VAR 0 7
37510: PUSH
37511: LD_VAR 0 6
37515: PUSH
37516: EMPTY
37517: LIST
37518: ST_TO_ADDR
// for i = 1 to pos - 1 do
37519: LD_ADDR_VAR 0 5
37523: PUSH
37524: DOUBLE
37525: LD_INT 1
37527: DEC
37528: ST_TO_ADDR
37529: LD_VAR 0 2
37533: PUSH
37534: LD_INT 1
37536: MINUS
37537: PUSH
37538: FOR_TO
37539: IFFALSE 37584
// begin tmp := tmp [ pos [ i ] ] ;
37541: LD_ADDR_VAR 0 6
37545: PUSH
37546: LD_VAR 0 6
37550: PUSH
37551: LD_VAR 0 2
37555: PUSH
37556: LD_VAR 0 5
37560: ARRAY
37561: ARRAY
37562: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37563: LD_ADDR_VAR 0 7
37567: PUSH
37568: LD_VAR 0 7
37572: PUSH
37573: LD_VAR 0 6
37577: PUSH
37578: EMPTY
37579: LIST
37580: ADD
37581: ST_TO_ADDR
// end ;
37582: GO 37538
37584: POP
37585: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37586: LD_ADDR_VAR 0 6
37590: PUSH
37591: LD_VAR 0 6
37595: PPUSH
37596: LD_VAR 0 2
37600: PUSH
37601: LD_VAR 0 2
37605: ARRAY
37606: PPUSH
37607: LD_VAR 0 3
37611: PPUSH
37612: CALL_OW 1
37616: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37617: LD_ADDR_VAR 0 7
37621: PUSH
37622: LD_VAR 0 7
37626: PPUSH
37627: LD_VAR 0 7
37631: PPUSH
37632: LD_VAR 0 6
37636: PPUSH
37637: CALL_OW 1
37641: ST_TO_ADDR
// for i = s_arr downto 2 do
37642: LD_ADDR_VAR 0 5
37646: PUSH
37647: DOUBLE
37648: LD_VAR 0 7
37652: INC
37653: ST_TO_ADDR
37654: LD_INT 2
37656: PUSH
37657: FOR_DOWNTO
37658: IFFALSE 37742
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37660: LD_ADDR_VAR 0 6
37664: PUSH
37665: LD_VAR 0 7
37669: PUSH
37670: LD_VAR 0 5
37674: PUSH
37675: LD_INT 1
37677: MINUS
37678: ARRAY
37679: PPUSH
37680: LD_VAR 0 2
37684: PUSH
37685: LD_VAR 0 5
37689: PUSH
37690: LD_INT 1
37692: MINUS
37693: ARRAY
37694: PPUSH
37695: LD_VAR 0 7
37699: PUSH
37700: LD_VAR 0 5
37704: ARRAY
37705: PPUSH
37706: CALL_OW 1
37710: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37711: LD_ADDR_VAR 0 7
37715: PUSH
37716: LD_VAR 0 7
37720: PPUSH
37721: LD_VAR 0 5
37725: PUSH
37726: LD_INT 1
37728: MINUS
37729: PPUSH
37730: LD_VAR 0 6
37734: PPUSH
37735: CALL_OW 1
37739: ST_TO_ADDR
// end ;
37740: GO 37657
37742: POP
37743: POP
// result := s_arr [ 1 ] ;
37744: LD_ADDR_VAR 0 4
37748: PUSH
37749: LD_VAR 0 7
37753: PUSH
37754: LD_INT 1
37756: ARRAY
37757: ST_TO_ADDR
// end ; end ;
37758: LD_VAR 0 4
37762: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37763: LD_INT 0
37765: PPUSH
37766: PPUSH
// if not list then
37767: LD_VAR 0 1
37771: NOT
37772: IFFALSE 37776
// exit ;
37774: GO 37867
// i := list [ pos1 ] ;
37776: LD_ADDR_VAR 0 5
37780: PUSH
37781: LD_VAR 0 1
37785: PUSH
37786: LD_VAR 0 2
37790: ARRAY
37791: ST_TO_ADDR
// if not i then
37792: LD_VAR 0 5
37796: NOT
37797: IFFALSE 37801
// exit ;
37799: GO 37867
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37801: LD_ADDR_VAR 0 1
37805: PUSH
37806: LD_VAR 0 1
37810: PPUSH
37811: LD_VAR 0 2
37815: PPUSH
37816: LD_VAR 0 1
37820: PUSH
37821: LD_VAR 0 3
37825: ARRAY
37826: PPUSH
37827: CALL_OW 1
37831: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37832: LD_ADDR_VAR 0 1
37836: PUSH
37837: LD_VAR 0 1
37841: PPUSH
37842: LD_VAR 0 3
37846: PPUSH
37847: LD_VAR 0 5
37851: PPUSH
37852: CALL_OW 1
37856: ST_TO_ADDR
// result := list ;
37857: LD_ADDR_VAR 0 4
37861: PUSH
37862: LD_VAR 0 1
37866: ST_TO_ADDR
// end ;
37867: LD_VAR 0 4
37871: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37872: LD_INT 0
37874: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37875: LD_ADDR_VAR 0 5
37879: PUSH
37880: LD_VAR 0 1
37884: PPUSH
37885: CALL_OW 250
37889: PPUSH
37890: LD_VAR 0 1
37894: PPUSH
37895: CALL_OW 251
37899: PPUSH
37900: LD_VAR 0 2
37904: PPUSH
37905: LD_VAR 0 3
37909: PPUSH
37910: LD_VAR 0 4
37914: PPUSH
37915: CALL 37925 0 5
37919: ST_TO_ADDR
// end ;
37920: LD_VAR 0 5
37924: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37925: LD_INT 0
37927: PPUSH
37928: PPUSH
37929: PPUSH
37930: PPUSH
// if not list then
37931: LD_VAR 0 3
37935: NOT
37936: IFFALSE 37940
// exit ;
37938: GO 38328
// result := [ ] ;
37940: LD_ADDR_VAR 0 6
37944: PUSH
37945: EMPTY
37946: ST_TO_ADDR
// for i in list do
37947: LD_ADDR_VAR 0 7
37951: PUSH
37952: LD_VAR 0 3
37956: PUSH
37957: FOR_IN
37958: IFFALSE 38160
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37960: LD_ADDR_VAR 0 9
37964: PUSH
37965: LD_VAR 0 7
37969: PPUSH
37970: LD_VAR 0 1
37974: PPUSH
37975: LD_VAR 0 2
37979: PPUSH
37980: CALL_OW 297
37984: ST_TO_ADDR
// if not result then
37985: LD_VAR 0 6
37989: NOT
37990: IFFALSE 38016
// result := [ [ i , tmp ] ] else
37992: LD_ADDR_VAR 0 6
37996: PUSH
37997: LD_VAR 0 7
38001: PUSH
38002: LD_VAR 0 9
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: EMPTY
38012: LIST
38013: ST_TO_ADDR
38014: GO 38158
// begin if result [ result ] [ 2 ] < tmp then
38016: LD_VAR 0 6
38020: PUSH
38021: LD_VAR 0 6
38025: ARRAY
38026: PUSH
38027: LD_INT 2
38029: ARRAY
38030: PUSH
38031: LD_VAR 0 9
38035: LESS
38036: IFFALSE 38078
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38038: LD_ADDR_VAR 0 6
38042: PUSH
38043: LD_VAR 0 6
38047: PPUSH
38048: LD_VAR 0 6
38052: PUSH
38053: LD_INT 1
38055: PLUS
38056: PPUSH
38057: LD_VAR 0 7
38061: PUSH
38062: LD_VAR 0 9
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PPUSH
38071: CALL_OW 2
38075: ST_TO_ADDR
38076: GO 38158
// for j = 1 to result do
38078: LD_ADDR_VAR 0 8
38082: PUSH
38083: DOUBLE
38084: LD_INT 1
38086: DEC
38087: ST_TO_ADDR
38088: LD_VAR 0 6
38092: PUSH
38093: FOR_TO
38094: IFFALSE 38156
// begin if tmp < result [ j ] [ 2 ] then
38096: LD_VAR 0 9
38100: PUSH
38101: LD_VAR 0 6
38105: PUSH
38106: LD_VAR 0 8
38110: ARRAY
38111: PUSH
38112: LD_INT 2
38114: ARRAY
38115: LESS
38116: IFFALSE 38154
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38118: LD_ADDR_VAR 0 6
38122: PUSH
38123: LD_VAR 0 6
38127: PPUSH
38128: LD_VAR 0 8
38132: PPUSH
38133: LD_VAR 0 7
38137: PUSH
38138: LD_VAR 0 9
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PPUSH
38147: CALL_OW 2
38151: ST_TO_ADDR
// break ;
38152: GO 38156
// end ; end ;
38154: GO 38093
38156: POP
38157: POP
// end ; end ;
38158: GO 37957
38160: POP
38161: POP
// if result and not asc then
38162: LD_VAR 0 6
38166: PUSH
38167: LD_VAR 0 4
38171: NOT
38172: AND
38173: IFFALSE 38248
// begin tmp := result ;
38175: LD_ADDR_VAR 0 9
38179: PUSH
38180: LD_VAR 0 6
38184: ST_TO_ADDR
// for i = tmp downto 1 do
38185: LD_ADDR_VAR 0 7
38189: PUSH
38190: DOUBLE
38191: LD_VAR 0 9
38195: INC
38196: ST_TO_ADDR
38197: LD_INT 1
38199: PUSH
38200: FOR_DOWNTO
38201: IFFALSE 38246
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38203: LD_ADDR_VAR 0 6
38207: PUSH
38208: LD_VAR 0 6
38212: PPUSH
38213: LD_VAR 0 9
38217: PUSH
38218: LD_VAR 0 7
38222: MINUS
38223: PUSH
38224: LD_INT 1
38226: PLUS
38227: PPUSH
38228: LD_VAR 0 9
38232: PUSH
38233: LD_VAR 0 7
38237: ARRAY
38238: PPUSH
38239: CALL_OW 1
38243: ST_TO_ADDR
38244: GO 38200
38246: POP
38247: POP
// end ; tmp := [ ] ;
38248: LD_ADDR_VAR 0 9
38252: PUSH
38253: EMPTY
38254: ST_TO_ADDR
// if mode then
38255: LD_VAR 0 5
38259: IFFALSE 38328
// begin for i = 1 to result do
38261: LD_ADDR_VAR 0 7
38265: PUSH
38266: DOUBLE
38267: LD_INT 1
38269: DEC
38270: ST_TO_ADDR
38271: LD_VAR 0 6
38275: PUSH
38276: FOR_TO
38277: IFFALSE 38316
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38279: LD_ADDR_VAR 0 9
38283: PUSH
38284: LD_VAR 0 9
38288: PPUSH
38289: LD_VAR 0 7
38293: PPUSH
38294: LD_VAR 0 6
38298: PUSH
38299: LD_VAR 0 7
38303: ARRAY
38304: PUSH
38305: LD_INT 1
38307: ARRAY
38308: PPUSH
38309: CALL_OW 1
38313: ST_TO_ADDR
38314: GO 38276
38316: POP
38317: POP
// result := tmp ;
38318: LD_ADDR_VAR 0 6
38322: PUSH
38323: LD_VAR 0 9
38327: ST_TO_ADDR
// end ; end ;
38328: LD_VAR 0 6
38332: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38333: LD_INT 0
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38341: LD_ADDR_VAR 0 5
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: EMPTY
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: ST_TO_ADDR
// if not x or not y then
38363: LD_VAR 0 2
38367: NOT
38368: PUSH
38369: LD_VAR 0 3
38373: NOT
38374: OR
38375: IFFALSE 38379
// exit ;
38377: GO 40031
// if not range then
38379: LD_VAR 0 4
38383: NOT
38384: IFFALSE 38394
// range := 10 ;
38386: LD_ADDR_VAR 0 4
38390: PUSH
38391: LD_INT 10
38393: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38394: LD_ADDR_VAR 0 8
38398: PUSH
38399: LD_INT 81
38401: PUSH
38402: LD_VAR 0 1
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 92
38413: PUSH
38414: LD_VAR 0 2
38418: PUSH
38419: LD_VAR 0 3
38423: PUSH
38424: LD_VAR 0 4
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: LD_INT 21
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: PPUSH
38457: CALL_OW 69
38461: ST_TO_ADDR
// if not tmp then
38462: LD_VAR 0 8
38466: NOT
38467: IFFALSE 38471
// exit ;
38469: GO 40031
// for i in tmp do
38471: LD_ADDR_VAR 0 6
38475: PUSH
38476: LD_VAR 0 8
38480: PUSH
38481: FOR_IN
38482: IFFALSE 40006
// begin points := [ 0 , 0 , 0 ] ;
38484: LD_ADDR_VAR 0 9
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: ST_TO_ADDR
// bpoints := 1 ;
38503: LD_ADDR_VAR 0 10
38507: PUSH
38508: LD_INT 1
38510: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38511: LD_VAR 0 6
38515: PPUSH
38516: CALL_OW 247
38520: PUSH
38521: LD_INT 1
38523: DOUBLE
38524: EQUAL
38525: IFTRUE 38529
38527: GO 39107
38529: POP
// begin if GetClass ( i ) = 1 then
38530: LD_VAR 0 6
38534: PPUSH
38535: CALL_OW 257
38539: PUSH
38540: LD_INT 1
38542: EQUAL
38543: IFFALSE 38564
// points := [ 10 , 5 , 3 ] ;
38545: LD_ADDR_VAR 0 9
38549: PUSH
38550: LD_INT 10
38552: PUSH
38553: LD_INT 5
38555: PUSH
38556: LD_INT 3
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38564: LD_VAR 0 6
38568: PPUSH
38569: CALL_OW 257
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 3
38579: PUSH
38580: LD_INT 4
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: LIST
38587: IN
38588: IFFALSE 38609
// points := [ 3 , 2 , 1 ] ;
38590: LD_ADDR_VAR 0 9
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38609: LD_VAR 0 6
38613: PPUSH
38614: CALL_OW 257
38618: PUSH
38619: LD_INT 5
38621: EQUAL
38622: IFFALSE 38643
// points := [ 130 , 5 , 2 ] ;
38624: LD_ADDR_VAR 0 9
38628: PUSH
38629: LD_INT 130
38631: PUSH
38632: LD_INT 5
38634: PUSH
38635: LD_INT 2
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38643: LD_VAR 0 6
38647: PPUSH
38648: CALL_OW 257
38652: PUSH
38653: LD_INT 8
38655: EQUAL
38656: IFFALSE 38677
// points := [ 35 , 35 , 30 ] ;
38658: LD_ADDR_VAR 0 9
38662: PUSH
38663: LD_INT 35
38665: PUSH
38666: LD_INT 35
38668: PUSH
38669: LD_INT 30
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: LIST
38676: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38677: LD_VAR 0 6
38681: PPUSH
38682: CALL_OW 257
38686: PUSH
38687: LD_INT 9
38689: EQUAL
38690: IFFALSE 38711
// points := [ 20 , 55 , 40 ] ;
38692: LD_ADDR_VAR 0 9
38696: PUSH
38697: LD_INT 20
38699: PUSH
38700: LD_INT 55
38702: PUSH
38703: LD_INT 40
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: LIST
38710: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38711: LD_VAR 0 6
38715: PPUSH
38716: CALL_OW 257
38720: PUSH
38721: LD_INT 12
38723: PUSH
38724: LD_INT 16
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: IN
38731: IFFALSE 38752
// points := [ 5 , 3 , 2 ] ;
38733: LD_ADDR_VAR 0 9
38737: PUSH
38738: LD_INT 5
38740: PUSH
38741: LD_INT 3
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: LIST
38751: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38752: LD_VAR 0 6
38756: PPUSH
38757: CALL_OW 257
38761: PUSH
38762: LD_INT 17
38764: EQUAL
38765: IFFALSE 38786
// points := [ 100 , 50 , 75 ] ;
38767: LD_ADDR_VAR 0 9
38771: PUSH
38772: LD_INT 100
38774: PUSH
38775: LD_INT 50
38777: PUSH
38778: LD_INT 75
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38786: LD_VAR 0 6
38790: PPUSH
38791: CALL_OW 257
38795: PUSH
38796: LD_INT 15
38798: EQUAL
38799: IFFALSE 38820
// points := [ 10 , 5 , 3 ] ;
38801: LD_ADDR_VAR 0 9
38805: PUSH
38806: LD_INT 10
38808: PUSH
38809: LD_INT 5
38811: PUSH
38812: LD_INT 3
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: LIST
38819: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38820: LD_VAR 0 6
38824: PPUSH
38825: CALL_OW 257
38829: PUSH
38830: LD_INT 14
38832: EQUAL
38833: IFFALSE 38854
// points := [ 10 , 0 , 0 ] ;
38835: LD_ADDR_VAR 0 9
38839: PUSH
38840: LD_INT 10
38842: PUSH
38843: LD_INT 0
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: LIST
38853: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38854: LD_VAR 0 6
38858: PPUSH
38859: CALL_OW 257
38863: PUSH
38864: LD_INT 11
38866: EQUAL
38867: IFFALSE 38888
// points := [ 30 , 10 , 5 ] ;
38869: LD_ADDR_VAR 0 9
38873: PUSH
38874: LD_INT 30
38876: PUSH
38877: LD_INT 10
38879: PUSH
38880: LD_INT 5
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38888: LD_VAR 0 1
38892: PPUSH
38893: LD_INT 5
38895: PPUSH
38896: CALL_OW 321
38900: PUSH
38901: LD_INT 2
38903: EQUAL
38904: IFFALSE 38921
// bpoints := bpoints * 1.8 ;
38906: LD_ADDR_VAR 0 10
38910: PUSH
38911: LD_VAR 0 10
38915: PUSH
38916: LD_REAL  1.80000000000000E+0000
38919: MUL
38920: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38921: LD_VAR 0 6
38925: PPUSH
38926: CALL_OW 257
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: LD_INT 3
38939: PUSH
38940: LD_INT 4
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: IN
38949: PUSH
38950: LD_VAR 0 1
38954: PPUSH
38955: LD_INT 51
38957: PPUSH
38958: CALL_OW 321
38962: PUSH
38963: LD_INT 2
38965: EQUAL
38966: AND
38967: IFFALSE 38984
// bpoints := bpoints * 1.2 ;
38969: LD_ADDR_VAR 0 10
38973: PUSH
38974: LD_VAR 0 10
38978: PUSH
38979: LD_REAL  1.20000000000000E+0000
38982: MUL
38983: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38984: LD_VAR 0 6
38988: PPUSH
38989: CALL_OW 257
38993: PUSH
38994: LD_INT 5
38996: PUSH
38997: LD_INT 7
38999: PUSH
39000: LD_INT 9
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: IN
39008: PUSH
39009: LD_VAR 0 1
39013: PPUSH
39014: LD_INT 52
39016: PPUSH
39017: CALL_OW 321
39021: PUSH
39022: LD_INT 2
39024: EQUAL
39025: AND
39026: IFFALSE 39043
// bpoints := bpoints * 1.5 ;
39028: LD_ADDR_VAR 0 10
39032: PUSH
39033: LD_VAR 0 10
39037: PUSH
39038: LD_REAL  1.50000000000000E+0000
39041: MUL
39042: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39043: LD_VAR 0 1
39047: PPUSH
39048: LD_INT 66
39050: PPUSH
39051: CALL_OW 321
39055: PUSH
39056: LD_INT 2
39058: EQUAL
39059: IFFALSE 39076
// bpoints := bpoints * 1.1 ;
39061: LD_ADDR_VAR 0 10
39065: PUSH
39066: LD_VAR 0 10
39070: PUSH
39071: LD_REAL  1.10000000000000E+0000
39074: MUL
39075: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39076: LD_ADDR_VAR 0 10
39080: PUSH
39081: LD_VAR 0 10
39085: PUSH
39086: LD_VAR 0 6
39090: PPUSH
39091: LD_INT 1
39093: PPUSH
39094: CALL_OW 259
39098: PUSH
39099: LD_REAL  1.15000000000000E+0000
39102: MUL
39103: MUL
39104: ST_TO_ADDR
// end ; unit_vehicle :
39105: GO 39935
39107: LD_INT 2
39109: DOUBLE
39110: EQUAL
39111: IFTRUE 39115
39113: GO 39923
39115: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39116: LD_VAR 0 6
39120: PPUSH
39121: CALL_OW 264
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: LD_INT 42
39131: PUSH
39132: LD_INT 24
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: IN
39140: IFFALSE 39161
// points := [ 25 , 5 , 3 ] ;
39142: LD_ADDR_VAR 0 9
39146: PUSH
39147: LD_INT 25
39149: PUSH
39150: LD_INT 5
39152: PUSH
39153: LD_INT 3
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: LIST
39160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39161: LD_VAR 0 6
39165: PPUSH
39166: CALL_OW 264
39170: PUSH
39171: LD_INT 4
39173: PUSH
39174: LD_INT 43
39176: PUSH
39177: LD_INT 25
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: IN
39185: IFFALSE 39206
// points := [ 40 , 15 , 5 ] ;
39187: LD_ADDR_VAR 0 9
39191: PUSH
39192: LD_INT 40
39194: PUSH
39195: LD_INT 15
39197: PUSH
39198: LD_INT 5
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: LIST
39205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39206: LD_VAR 0 6
39210: PPUSH
39211: CALL_OW 264
39215: PUSH
39216: LD_INT 3
39218: PUSH
39219: LD_INT 23
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: IN
39226: IFFALSE 39247
// points := [ 7 , 25 , 8 ] ;
39228: LD_ADDR_VAR 0 9
39232: PUSH
39233: LD_INT 7
39235: PUSH
39236: LD_INT 25
39238: PUSH
39239: LD_INT 8
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: LIST
39246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39247: LD_VAR 0 6
39251: PPUSH
39252: CALL_OW 264
39256: PUSH
39257: LD_INT 5
39259: PUSH
39260: LD_INT 27
39262: PUSH
39263: LD_INT 44
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: LIST
39270: IN
39271: IFFALSE 39292
// points := [ 14 , 50 , 16 ] ;
39273: LD_ADDR_VAR 0 9
39277: PUSH
39278: LD_INT 14
39280: PUSH
39281: LD_INT 50
39283: PUSH
39284: LD_INT 16
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: LIST
39291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39292: LD_VAR 0 6
39296: PPUSH
39297: CALL_OW 264
39301: PUSH
39302: LD_INT 6
39304: PUSH
39305: LD_INT 46
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: IN
39312: IFFALSE 39333
// points := [ 32 , 120 , 70 ] ;
39314: LD_ADDR_VAR 0 9
39318: PUSH
39319: LD_INT 32
39321: PUSH
39322: LD_INT 120
39324: PUSH
39325: LD_INT 70
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39333: LD_VAR 0 6
39337: PPUSH
39338: CALL_OW 264
39342: PUSH
39343: LD_INT 7
39345: PUSH
39346: LD_INT 28
39348: PUSH
39349: LD_INT 45
39351: PUSH
39352: LD_EXP 26
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: IN
39363: IFFALSE 39384
// points := [ 35 , 20 , 45 ] ;
39365: LD_ADDR_VAR 0 9
39369: PUSH
39370: LD_INT 35
39372: PUSH
39373: LD_INT 20
39375: PUSH
39376: LD_INT 45
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: LIST
39383: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39384: LD_VAR 0 6
39388: PPUSH
39389: CALL_OW 264
39393: PUSH
39394: LD_INT 47
39396: PUSH
39397: EMPTY
39398: LIST
39399: IN
39400: IFFALSE 39421
// points := [ 67 , 45 , 75 ] ;
39402: LD_ADDR_VAR 0 9
39406: PUSH
39407: LD_INT 67
39409: PUSH
39410: LD_INT 45
39412: PUSH
39413: LD_INT 75
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39421: LD_VAR 0 6
39425: PPUSH
39426: CALL_OW 264
39430: PUSH
39431: LD_INT 26
39433: PUSH
39434: EMPTY
39435: LIST
39436: IN
39437: IFFALSE 39458
// points := [ 120 , 30 , 80 ] ;
39439: LD_ADDR_VAR 0 9
39443: PUSH
39444: LD_INT 120
39446: PUSH
39447: LD_INT 30
39449: PUSH
39450: LD_INT 80
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: LIST
39457: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39458: LD_VAR 0 6
39462: PPUSH
39463: CALL_OW 264
39467: PUSH
39468: LD_INT 22
39470: PUSH
39471: EMPTY
39472: LIST
39473: IN
39474: IFFALSE 39495
// points := [ 40 , 1 , 1 ] ;
39476: LD_ADDR_VAR 0 9
39480: PUSH
39481: LD_INT 40
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39495: LD_VAR 0 6
39499: PPUSH
39500: CALL_OW 264
39504: PUSH
39505: LD_INT 29
39507: PUSH
39508: EMPTY
39509: LIST
39510: IN
39511: IFFALSE 39532
// points := [ 70 , 200 , 400 ] ;
39513: LD_ADDR_VAR 0 9
39517: PUSH
39518: LD_INT 70
39520: PUSH
39521: LD_INT 200
39523: PUSH
39524: LD_INT 400
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39532: LD_VAR 0 6
39536: PPUSH
39537: CALL_OW 264
39541: PUSH
39542: LD_INT 14
39544: PUSH
39545: LD_INT 53
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: IN
39552: IFFALSE 39573
// points := [ 40 , 10 , 20 ] ;
39554: LD_ADDR_VAR 0 9
39558: PUSH
39559: LD_INT 40
39561: PUSH
39562: LD_INT 10
39564: PUSH
39565: LD_INT 20
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39573: LD_VAR 0 6
39577: PPUSH
39578: CALL_OW 264
39582: PUSH
39583: LD_INT 9
39585: PUSH
39586: EMPTY
39587: LIST
39588: IN
39589: IFFALSE 39610
// points := [ 5 , 70 , 20 ] ;
39591: LD_ADDR_VAR 0 9
39595: PUSH
39596: LD_INT 5
39598: PUSH
39599: LD_INT 70
39601: PUSH
39602: LD_INT 20
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: LIST
39609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39610: LD_VAR 0 6
39614: PPUSH
39615: CALL_OW 264
39619: PUSH
39620: LD_INT 10
39622: PUSH
39623: EMPTY
39624: LIST
39625: IN
39626: IFFALSE 39647
// points := [ 35 , 110 , 70 ] ;
39628: LD_ADDR_VAR 0 9
39632: PUSH
39633: LD_INT 35
39635: PUSH
39636: LD_INT 110
39638: PUSH
39639: LD_INT 70
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: LIST
39646: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39647: LD_VAR 0 6
39651: PPUSH
39652: CALL_OW 265
39656: PUSH
39657: LD_INT 25
39659: EQUAL
39660: IFFALSE 39681
// points := [ 80 , 65 , 100 ] ;
39662: LD_ADDR_VAR 0 9
39666: PUSH
39667: LD_INT 80
39669: PUSH
39670: LD_INT 65
39672: PUSH
39673: LD_INT 100
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39681: LD_VAR 0 6
39685: PPUSH
39686: CALL_OW 263
39690: PUSH
39691: LD_INT 1
39693: EQUAL
39694: IFFALSE 39729
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39696: LD_ADDR_VAR 0 10
39700: PUSH
39701: LD_VAR 0 10
39705: PUSH
39706: LD_VAR 0 6
39710: PPUSH
39711: CALL_OW 311
39715: PPUSH
39716: LD_INT 3
39718: PPUSH
39719: CALL_OW 259
39723: PUSH
39724: LD_INT 4
39726: MUL
39727: MUL
39728: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39729: LD_VAR 0 6
39733: PPUSH
39734: CALL_OW 263
39738: PUSH
39739: LD_INT 2
39741: EQUAL
39742: IFFALSE 39793
// begin j := IsControledBy ( i ) ;
39744: LD_ADDR_VAR 0 7
39748: PUSH
39749: LD_VAR 0 6
39753: PPUSH
39754: CALL_OW 312
39758: ST_TO_ADDR
// if j then
39759: LD_VAR 0 7
39763: IFFALSE 39793
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39765: LD_ADDR_VAR 0 10
39769: PUSH
39770: LD_VAR 0 10
39774: PUSH
39775: LD_VAR 0 7
39779: PPUSH
39780: LD_INT 3
39782: PPUSH
39783: CALL_OW 259
39787: PUSH
39788: LD_INT 3
39790: MUL
39791: MUL
39792: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39793: LD_VAR 0 6
39797: PPUSH
39798: CALL_OW 264
39802: PUSH
39803: LD_INT 5
39805: PUSH
39806: LD_INT 6
39808: PUSH
39809: LD_INT 46
39811: PUSH
39812: LD_INT 44
39814: PUSH
39815: LD_INT 47
39817: PUSH
39818: LD_INT 45
39820: PUSH
39821: LD_INT 28
39823: PUSH
39824: LD_INT 7
39826: PUSH
39827: LD_INT 27
39829: PUSH
39830: LD_INT 29
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: IN
39845: PUSH
39846: LD_VAR 0 1
39850: PPUSH
39851: LD_INT 52
39853: PPUSH
39854: CALL_OW 321
39858: PUSH
39859: LD_INT 2
39861: EQUAL
39862: AND
39863: IFFALSE 39880
// bpoints := bpoints * 1.2 ;
39865: LD_ADDR_VAR 0 10
39869: PUSH
39870: LD_VAR 0 10
39874: PUSH
39875: LD_REAL  1.20000000000000E+0000
39878: MUL
39879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39880: LD_VAR 0 6
39884: PPUSH
39885: CALL_OW 264
39889: PUSH
39890: LD_INT 6
39892: PUSH
39893: LD_INT 46
39895: PUSH
39896: LD_INT 47
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: LIST
39903: IN
39904: IFFALSE 39921
// bpoints := bpoints * 1.2 ;
39906: LD_ADDR_VAR 0 10
39910: PUSH
39911: LD_VAR 0 10
39915: PUSH
39916: LD_REAL  1.20000000000000E+0000
39919: MUL
39920: ST_TO_ADDR
// end ; unit_building :
39921: GO 39935
39923: LD_INT 3
39925: DOUBLE
39926: EQUAL
39927: IFTRUE 39931
39929: GO 39934
39931: POP
// ; end ;
39932: GO 39935
39934: POP
// for j = 1 to 3 do
39935: LD_ADDR_VAR 0 7
39939: PUSH
39940: DOUBLE
39941: LD_INT 1
39943: DEC
39944: ST_TO_ADDR
39945: LD_INT 3
39947: PUSH
39948: FOR_TO
39949: IFFALSE 40002
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39951: LD_ADDR_VAR 0 5
39955: PUSH
39956: LD_VAR 0 5
39960: PPUSH
39961: LD_VAR 0 7
39965: PPUSH
39966: LD_VAR 0 5
39970: PUSH
39971: LD_VAR 0 7
39975: ARRAY
39976: PUSH
39977: LD_VAR 0 9
39981: PUSH
39982: LD_VAR 0 7
39986: ARRAY
39987: PUSH
39988: LD_VAR 0 10
39992: MUL
39993: PLUS
39994: PPUSH
39995: CALL_OW 1
39999: ST_TO_ADDR
40000: GO 39948
40002: POP
40003: POP
// end ;
40004: GO 38481
40006: POP
40007: POP
// result := Replace ( result , 4 , tmp ) ;
40008: LD_ADDR_VAR 0 5
40012: PUSH
40013: LD_VAR 0 5
40017: PPUSH
40018: LD_INT 4
40020: PPUSH
40021: LD_VAR 0 8
40025: PPUSH
40026: CALL_OW 1
40030: ST_TO_ADDR
// end ;
40031: LD_VAR 0 5
40035: RET
// export function DangerAtRange ( unit , range ) ; begin
40036: LD_INT 0
40038: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40039: LD_ADDR_VAR 0 3
40043: PUSH
40044: LD_VAR 0 1
40048: PPUSH
40049: CALL_OW 255
40053: PPUSH
40054: LD_VAR 0 1
40058: PPUSH
40059: CALL_OW 250
40063: PPUSH
40064: LD_VAR 0 1
40068: PPUSH
40069: CALL_OW 251
40073: PPUSH
40074: LD_VAR 0 2
40078: PPUSH
40079: CALL 38333 0 4
40083: ST_TO_ADDR
// end ;
40084: LD_VAR 0 3
40088: RET
// export function DangerInArea ( side , area ) ; begin
40089: LD_INT 0
40091: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40092: LD_ADDR_VAR 0 3
40096: PUSH
40097: LD_VAR 0 2
40101: PPUSH
40102: LD_INT 81
40104: PUSH
40105: LD_VAR 0 1
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PPUSH
40114: CALL_OW 70
40118: ST_TO_ADDR
// end ;
40119: LD_VAR 0 3
40123: RET
// export function IsExtension ( b ) ; begin
40124: LD_INT 0
40126: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40127: LD_ADDR_VAR 0 2
40131: PUSH
40132: LD_VAR 0 1
40136: PUSH
40137: LD_INT 23
40139: PUSH
40140: LD_INT 20
40142: PUSH
40143: LD_INT 22
40145: PUSH
40146: LD_INT 17
40148: PUSH
40149: LD_INT 24
40151: PUSH
40152: LD_INT 21
40154: PUSH
40155: LD_INT 19
40157: PUSH
40158: LD_INT 16
40160: PUSH
40161: LD_INT 25
40163: PUSH
40164: LD_INT 18
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: IN
40179: ST_TO_ADDR
// end ;
40180: LD_VAR 0 2
40184: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40185: LD_INT 0
40187: PPUSH
40188: PPUSH
40189: PPUSH
// result := [ ] ;
40190: LD_ADDR_VAR 0 4
40194: PUSH
40195: EMPTY
40196: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40197: LD_ADDR_VAR 0 5
40201: PUSH
40202: LD_VAR 0 2
40206: PPUSH
40207: LD_INT 21
40209: PUSH
40210: LD_INT 3
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PPUSH
40217: CALL_OW 70
40221: ST_TO_ADDR
// if not tmp then
40222: LD_VAR 0 5
40226: NOT
40227: IFFALSE 40231
// exit ;
40229: GO 40295
// if checkLink then
40231: LD_VAR 0 3
40235: IFFALSE 40285
// begin for i in tmp do
40237: LD_ADDR_VAR 0 6
40241: PUSH
40242: LD_VAR 0 5
40246: PUSH
40247: FOR_IN
40248: IFFALSE 40283
// if GetBase ( i ) <> base then
40250: LD_VAR 0 6
40254: PPUSH
40255: CALL_OW 274
40259: PUSH
40260: LD_VAR 0 1
40264: NONEQUAL
40265: IFFALSE 40281
// ComLinkToBase ( base , i ) ;
40267: LD_VAR 0 1
40271: PPUSH
40272: LD_VAR 0 6
40276: PPUSH
40277: CALL_OW 169
40281: GO 40247
40283: POP
40284: POP
// end ; result := tmp ;
40285: LD_ADDR_VAR 0 4
40289: PUSH
40290: LD_VAR 0 5
40294: ST_TO_ADDR
// end ;
40295: LD_VAR 0 4
40299: RET
// export function ComComplete ( units , b ) ; var i ; begin
40300: LD_INT 0
40302: PPUSH
40303: PPUSH
// if not units then
40304: LD_VAR 0 1
40308: NOT
40309: IFFALSE 40313
// exit ;
40311: GO 40403
// for i in units do
40313: LD_ADDR_VAR 0 4
40317: PUSH
40318: LD_VAR 0 1
40322: PUSH
40323: FOR_IN
40324: IFFALSE 40401
// if BuildingStatus ( b ) = bs_build then
40326: LD_VAR 0 2
40330: PPUSH
40331: CALL_OW 461
40335: PUSH
40336: LD_INT 1
40338: EQUAL
40339: IFFALSE 40399
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40341: LD_VAR 0 4
40345: PPUSH
40346: LD_STRING h
40348: PUSH
40349: LD_VAR 0 2
40353: PPUSH
40354: CALL_OW 250
40358: PUSH
40359: LD_VAR 0 2
40363: PPUSH
40364: CALL_OW 251
40368: PUSH
40369: LD_VAR 0 2
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: PUSH
40392: EMPTY
40393: LIST
40394: PPUSH
40395: CALL_OW 446
40399: GO 40323
40401: POP
40402: POP
// end ;
40403: LD_VAR 0 3
40407: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40408: LD_INT 0
40410: PPUSH
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40416: LD_VAR 0 1
40420: NOT
40421: PUSH
40422: LD_VAR 0 1
40426: PPUSH
40427: CALL_OW 263
40431: PUSH
40432: LD_INT 2
40434: NONEQUAL
40435: OR
40436: IFFALSE 40440
// exit ;
40438: GO 40756
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40440: LD_ADDR_VAR 0 6
40444: PUSH
40445: LD_INT 22
40447: PUSH
40448: LD_VAR 0 1
40452: PPUSH
40453: CALL_OW 255
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 2
40464: PUSH
40465: LD_INT 30
40467: PUSH
40468: LD_INT 36
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 34
40477: PUSH
40478: LD_INT 31
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: LIST
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PPUSH
40494: CALL_OW 69
40498: ST_TO_ADDR
// if not tmp then
40499: LD_VAR 0 6
40503: NOT
40504: IFFALSE 40508
// exit ;
40506: GO 40756
// result := [ ] ;
40508: LD_ADDR_VAR 0 2
40512: PUSH
40513: EMPTY
40514: ST_TO_ADDR
// for i in tmp do
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: LD_VAR 0 6
40524: PUSH
40525: FOR_IN
40526: IFFALSE 40597
// begin t := UnitsInside ( i ) ;
40528: LD_ADDR_VAR 0 4
40532: PUSH
40533: LD_VAR 0 3
40537: PPUSH
40538: CALL_OW 313
40542: ST_TO_ADDR
// if t then
40543: LD_VAR 0 4
40547: IFFALSE 40595
// for j in t do
40549: LD_ADDR_VAR 0 7
40553: PUSH
40554: LD_VAR 0 4
40558: PUSH
40559: FOR_IN
40560: IFFALSE 40593
// result := Replace ( result , result + 1 , j ) ;
40562: LD_ADDR_VAR 0 2
40566: PUSH
40567: LD_VAR 0 2
40571: PPUSH
40572: LD_VAR 0 2
40576: PUSH
40577: LD_INT 1
40579: PLUS
40580: PPUSH
40581: LD_VAR 0 7
40585: PPUSH
40586: CALL_OW 1
40590: ST_TO_ADDR
40591: GO 40559
40593: POP
40594: POP
// end ;
40595: GO 40525
40597: POP
40598: POP
// if not result then
40599: LD_VAR 0 2
40603: NOT
40604: IFFALSE 40608
// exit ;
40606: GO 40756
// mech := result [ 1 ] ;
40608: LD_ADDR_VAR 0 5
40612: PUSH
40613: LD_VAR 0 2
40617: PUSH
40618: LD_INT 1
40620: ARRAY
40621: ST_TO_ADDR
// if result > 1 then
40622: LD_VAR 0 2
40626: PUSH
40627: LD_INT 1
40629: GREATER
40630: IFFALSE 40742
// begin for i = 2 to result do
40632: LD_ADDR_VAR 0 3
40636: PUSH
40637: DOUBLE
40638: LD_INT 2
40640: DEC
40641: ST_TO_ADDR
40642: LD_VAR 0 2
40646: PUSH
40647: FOR_TO
40648: IFFALSE 40740
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40650: LD_ADDR_VAR 0 4
40654: PUSH
40655: LD_VAR 0 2
40659: PUSH
40660: LD_VAR 0 3
40664: ARRAY
40665: PPUSH
40666: LD_INT 3
40668: PPUSH
40669: CALL_OW 259
40673: PUSH
40674: LD_VAR 0 2
40678: PUSH
40679: LD_VAR 0 3
40683: ARRAY
40684: PPUSH
40685: CALL_OW 432
40689: MINUS
40690: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40691: LD_VAR 0 4
40695: PUSH
40696: LD_VAR 0 5
40700: PPUSH
40701: LD_INT 3
40703: PPUSH
40704: CALL_OW 259
40708: PUSH
40709: LD_VAR 0 5
40713: PPUSH
40714: CALL_OW 432
40718: MINUS
40719: GREATEREQUAL
40720: IFFALSE 40738
// mech := result [ i ] ;
40722: LD_ADDR_VAR 0 5
40726: PUSH
40727: LD_VAR 0 2
40731: PUSH
40732: LD_VAR 0 3
40736: ARRAY
40737: ST_TO_ADDR
// end ;
40738: GO 40647
40740: POP
40741: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40742: LD_VAR 0 1
40746: PPUSH
40747: LD_VAR 0 5
40751: PPUSH
40752: CALL_OW 135
// end ;
40756: LD_VAR 0 2
40760: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40761: LD_INT 0
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
// result := [ ] ;
40776: LD_ADDR_VAR 0 7
40780: PUSH
40781: EMPTY
40782: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 266
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: IN
40803: NOT
40804: IFFALSE 40808
// exit ;
40806: GO 42442
// if name then
40808: LD_VAR 0 3
40812: IFFALSE 40828
// SetBName ( base_dep , name ) ;
40814: LD_VAR 0 1
40818: PPUSH
40819: LD_VAR 0 3
40823: PPUSH
40824: CALL_OW 500
// base := GetBase ( base_dep ) ;
40828: LD_ADDR_VAR 0 15
40832: PUSH
40833: LD_VAR 0 1
40837: PPUSH
40838: CALL_OW 274
40842: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40843: LD_ADDR_VAR 0 16
40847: PUSH
40848: LD_VAR 0 1
40852: PPUSH
40853: CALL_OW 255
40857: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40858: LD_ADDR_VAR 0 17
40862: PUSH
40863: LD_VAR 0 1
40867: PPUSH
40868: CALL_OW 248
40872: ST_TO_ADDR
// if sources then
40873: LD_VAR 0 5
40877: IFFALSE 40924
// for i = 1 to 3 do
40879: LD_ADDR_VAR 0 8
40883: PUSH
40884: DOUBLE
40885: LD_INT 1
40887: DEC
40888: ST_TO_ADDR
40889: LD_INT 3
40891: PUSH
40892: FOR_TO
40893: IFFALSE 40922
// AddResourceType ( base , i , sources [ i ] ) ;
40895: LD_VAR 0 15
40899: PPUSH
40900: LD_VAR 0 8
40904: PPUSH
40905: LD_VAR 0 5
40909: PUSH
40910: LD_VAR 0 8
40914: ARRAY
40915: PPUSH
40916: CALL_OW 276
40920: GO 40892
40922: POP
40923: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40924: LD_ADDR_VAR 0 18
40928: PUSH
40929: LD_VAR 0 15
40933: PPUSH
40934: LD_VAR 0 2
40938: PPUSH
40939: LD_INT 1
40941: PPUSH
40942: CALL 40185 0 3
40946: ST_TO_ADDR
// InitHc ;
40947: CALL_OW 19
// InitUc ;
40951: CALL_OW 18
// uc_side := side ;
40955: LD_ADDR_OWVAR 20
40959: PUSH
40960: LD_VAR 0 16
40964: ST_TO_ADDR
// uc_nation := nation ;
40965: LD_ADDR_OWVAR 21
40969: PUSH
40970: LD_VAR 0 17
40974: ST_TO_ADDR
// if buildings then
40975: LD_VAR 0 18
40979: IFFALSE 42301
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40981: LD_ADDR_VAR 0 19
40985: PUSH
40986: LD_VAR 0 18
40990: PPUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 30
40996: PUSH
40997: LD_INT 29
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 30
41006: PUSH
41007: LD_INT 30
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: LIST
41018: PPUSH
41019: CALL_OW 72
41023: ST_TO_ADDR
// if tmp then
41024: LD_VAR 0 19
41028: IFFALSE 41076
// for i in tmp do
41030: LD_ADDR_VAR 0 8
41034: PUSH
41035: LD_VAR 0 19
41039: PUSH
41040: FOR_IN
41041: IFFALSE 41074
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41043: LD_VAR 0 8
41047: PPUSH
41048: CALL_OW 250
41052: PPUSH
41053: LD_VAR 0 8
41057: PPUSH
41058: CALL_OW 251
41062: PPUSH
41063: LD_VAR 0 16
41067: PPUSH
41068: CALL_OW 441
41072: GO 41040
41074: POP
41075: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41076: LD_VAR 0 18
41080: PPUSH
41081: LD_INT 2
41083: PUSH
41084: LD_INT 30
41086: PUSH
41087: LD_INT 32
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 30
41096: PUSH
41097: LD_INT 33
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: LIST
41108: PPUSH
41109: CALL_OW 72
41113: IFFALSE 41201
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41115: LD_ADDR_VAR 0 8
41119: PUSH
41120: LD_VAR 0 18
41124: PPUSH
41125: LD_INT 2
41127: PUSH
41128: LD_INT 30
41130: PUSH
41131: LD_INT 32
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 30
41140: PUSH
41141: LD_INT 33
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: LIST
41152: PPUSH
41153: CALL_OW 72
41157: PUSH
41158: FOR_IN
41159: IFFALSE 41199
// begin if not GetBWeapon ( i ) then
41161: LD_VAR 0 8
41165: PPUSH
41166: CALL_OW 269
41170: NOT
41171: IFFALSE 41197
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41173: LD_VAR 0 8
41177: PPUSH
41178: LD_VAR 0 8
41182: PPUSH
41183: LD_VAR 0 2
41187: PPUSH
41188: CALL 42447 0 2
41192: PPUSH
41193: CALL_OW 431
// end ;
41197: GO 41158
41199: POP
41200: POP
// end ; for i = 1 to personel do
41201: LD_ADDR_VAR 0 8
41205: PUSH
41206: DOUBLE
41207: LD_INT 1
41209: DEC
41210: ST_TO_ADDR
41211: LD_VAR 0 6
41215: PUSH
41216: FOR_TO
41217: IFFALSE 42281
// begin if i > 4 then
41219: LD_VAR 0 8
41223: PUSH
41224: LD_INT 4
41226: GREATER
41227: IFFALSE 41231
// break ;
41229: GO 42281
// case i of 1 :
41231: LD_VAR 0 8
41235: PUSH
41236: LD_INT 1
41238: DOUBLE
41239: EQUAL
41240: IFTRUE 41244
41242: GO 41324
41244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41245: LD_ADDR_VAR 0 12
41249: PUSH
41250: LD_VAR 0 18
41254: PPUSH
41255: LD_INT 22
41257: PUSH
41258: LD_VAR 0 16
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 58
41269: PUSH
41270: EMPTY
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: LD_INT 30
41278: PUSH
41279: LD_INT 32
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 30
41288: PUSH
41289: LD_INT 4
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 30
41298: PUSH
41299: LD_INT 5
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: LIST
41316: PPUSH
41317: CALL_OW 72
41321: ST_TO_ADDR
41322: GO 41546
41324: LD_INT 2
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41332
41330: GO 41394
41332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41333: LD_ADDR_VAR 0 12
41337: PUSH
41338: LD_VAR 0 18
41342: PPUSH
41343: LD_INT 22
41345: PUSH
41346: LD_VAR 0 16
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 30
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 30
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PPUSH
41387: CALL_OW 72
41391: ST_TO_ADDR
41392: GO 41546
41394: LD_INT 3
41396: DOUBLE
41397: EQUAL
41398: IFTRUE 41402
41400: GO 41464
41402: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41403: LD_ADDR_VAR 0 12
41407: PUSH
41408: LD_VAR 0 18
41412: PPUSH
41413: LD_INT 22
41415: PUSH
41416: LD_VAR 0 16
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: LD_INT 30
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 30
41440: PUSH
41441: LD_INT 3
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: LIST
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PPUSH
41457: CALL_OW 72
41461: ST_TO_ADDR
41462: GO 41546
41464: LD_INT 4
41466: DOUBLE
41467: EQUAL
41468: IFTRUE 41472
41470: GO 41545
41472: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41473: LD_ADDR_VAR 0 12
41477: PUSH
41478: LD_VAR 0 18
41482: PPUSH
41483: LD_INT 22
41485: PUSH
41486: LD_VAR 0 16
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: PUSH
41498: LD_INT 30
41500: PUSH
41501: LD_INT 6
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 30
41510: PUSH
41511: LD_INT 7
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 30
41520: PUSH
41521: LD_INT 8
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PPUSH
41538: CALL_OW 72
41542: ST_TO_ADDR
41543: GO 41546
41545: POP
// if i = 1 then
41546: LD_VAR 0 8
41550: PUSH
41551: LD_INT 1
41553: EQUAL
41554: IFFALSE 41665
// begin tmp := [ ] ;
41556: LD_ADDR_VAR 0 19
41560: PUSH
41561: EMPTY
41562: ST_TO_ADDR
// for j in f do
41563: LD_ADDR_VAR 0 9
41567: PUSH
41568: LD_VAR 0 12
41572: PUSH
41573: FOR_IN
41574: IFFALSE 41647
// if GetBType ( j ) = b_bunker then
41576: LD_VAR 0 9
41580: PPUSH
41581: CALL_OW 266
41585: PUSH
41586: LD_INT 32
41588: EQUAL
41589: IFFALSE 41616
// tmp := Insert ( tmp , 1 , j ) else
41591: LD_ADDR_VAR 0 19
41595: PUSH
41596: LD_VAR 0 19
41600: PPUSH
41601: LD_INT 1
41603: PPUSH
41604: LD_VAR 0 9
41608: PPUSH
41609: CALL_OW 2
41613: ST_TO_ADDR
41614: GO 41645
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41616: LD_ADDR_VAR 0 19
41620: PUSH
41621: LD_VAR 0 19
41625: PPUSH
41626: LD_VAR 0 19
41630: PUSH
41631: LD_INT 1
41633: PLUS
41634: PPUSH
41635: LD_VAR 0 9
41639: PPUSH
41640: CALL_OW 2
41644: ST_TO_ADDR
41645: GO 41573
41647: POP
41648: POP
// if tmp then
41649: LD_VAR 0 19
41653: IFFALSE 41665
// f := tmp ;
41655: LD_ADDR_VAR 0 12
41659: PUSH
41660: LD_VAR 0 19
41664: ST_TO_ADDR
// end ; x := personel [ i ] ;
41665: LD_ADDR_VAR 0 13
41669: PUSH
41670: LD_VAR 0 6
41674: PUSH
41675: LD_VAR 0 8
41679: ARRAY
41680: ST_TO_ADDR
// if x = - 1 then
41681: LD_VAR 0 13
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: EQUAL
41690: IFFALSE 41899
// begin for j in f do
41692: LD_ADDR_VAR 0 9
41696: PUSH
41697: LD_VAR 0 12
41701: PUSH
41702: FOR_IN
41703: IFFALSE 41895
// repeat InitHc ;
41705: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41709: LD_VAR 0 9
41713: PPUSH
41714: CALL_OW 266
41718: PUSH
41719: LD_INT 5
41721: EQUAL
41722: IFFALSE 41792
// begin if UnitsInside ( j ) < 3 then
41724: LD_VAR 0 9
41728: PPUSH
41729: CALL_OW 313
41733: PUSH
41734: LD_INT 3
41736: LESS
41737: IFFALSE 41773
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41739: LD_INT 0
41741: PPUSH
41742: LD_INT 5
41744: PUSH
41745: LD_INT 8
41747: PUSH
41748: LD_INT 9
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: LIST
41755: PUSH
41756: LD_VAR 0 17
41760: ARRAY
41761: PPUSH
41762: LD_VAR 0 4
41766: PPUSH
41767: CALL_OW 380
41771: GO 41790
// PrepareHuman ( false , i , skill ) ;
41773: LD_INT 0
41775: PPUSH
41776: LD_VAR 0 8
41780: PPUSH
41781: LD_VAR 0 4
41785: PPUSH
41786: CALL_OW 380
// end else
41790: GO 41809
// PrepareHuman ( false , i , skill ) ;
41792: LD_INT 0
41794: PPUSH
41795: LD_VAR 0 8
41799: PPUSH
41800: LD_VAR 0 4
41804: PPUSH
41805: CALL_OW 380
// un := CreateHuman ;
41809: LD_ADDR_VAR 0 14
41813: PUSH
41814: CALL_OW 44
41818: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41819: LD_ADDR_VAR 0 7
41823: PUSH
41824: LD_VAR 0 7
41828: PPUSH
41829: LD_INT 1
41831: PPUSH
41832: LD_VAR 0 14
41836: PPUSH
41837: CALL_OW 2
41841: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41842: LD_VAR 0 14
41846: PPUSH
41847: LD_VAR 0 9
41851: PPUSH
41852: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41856: LD_VAR 0 9
41860: PPUSH
41861: CALL_OW 313
41865: PUSH
41866: LD_INT 6
41868: EQUAL
41869: PUSH
41870: LD_VAR 0 9
41874: PPUSH
41875: CALL_OW 266
41879: PUSH
41880: LD_INT 32
41882: PUSH
41883: LD_INT 31
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: IN
41890: OR
41891: IFFALSE 41705
41893: GO 41702
41895: POP
41896: POP
// end else
41897: GO 42279
// for j = 1 to x do
41899: LD_ADDR_VAR 0 9
41903: PUSH
41904: DOUBLE
41905: LD_INT 1
41907: DEC
41908: ST_TO_ADDR
41909: LD_VAR 0 13
41913: PUSH
41914: FOR_TO
41915: IFFALSE 42277
// begin InitHc ;
41917: CALL_OW 19
// if not f then
41921: LD_VAR 0 12
41925: NOT
41926: IFFALSE 42015
// begin PrepareHuman ( false , i , skill ) ;
41928: LD_INT 0
41930: PPUSH
41931: LD_VAR 0 8
41935: PPUSH
41936: LD_VAR 0 4
41940: PPUSH
41941: CALL_OW 380
// un := CreateHuman ;
41945: LD_ADDR_VAR 0 14
41949: PUSH
41950: CALL_OW 44
41954: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41955: LD_ADDR_VAR 0 7
41959: PUSH
41960: LD_VAR 0 7
41964: PPUSH
41965: LD_INT 1
41967: PPUSH
41968: LD_VAR 0 14
41972: PPUSH
41973: CALL_OW 2
41977: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41978: LD_VAR 0 14
41982: PPUSH
41983: LD_VAR 0 1
41987: PPUSH
41988: CALL_OW 250
41992: PPUSH
41993: LD_VAR 0 1
41997: PPUSH
41998: CALL_OW 251
42002: PPUSH
42003: LD_INT 10
42005: PPUSH
42006: LD_INT 0
42008: PPUSH
42009: CALL_OW 50
// continue ;
42013: GO 41914
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42015: LD_VAR 0 12
42019: PUSH
42020: LD_INT 1
42022: ARRAY
42023: PPUSH
42024: CALL_OW 313
42028: PUSH
42029: LD_VAR 0 12
42033: PUSH
42034: LD_INT 1
42036: ARRAY
42037: PPUSH
42038: CALL_OW 266
42042: PUSH
42043: LD_INT 32
42045: PUSH
42046: LD_INT 31
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: IN
42053: AND
42054: PUSH
42055: LD_VAR 0 12
42059: PUSH
42060: LD_INT 1
42062: ARRAY
42063: PPUSH
42064: CALL_OW 313
42068: PUSH
42069: LD_INT 6
42071: EQUAL
42072: OR
42073: IFFALSE 42093
// f := Delete ( f , 1 ) ;
42075: LD_ADDR_VAR 0 12
42079: PUSH
42080: LD_VAR 0 12
42084: PPUSH
42085: LD_INT 1
42087: PPUSH
42088: CALL_OW 3
42092: ST_TO_ADDR
// if not f then
42093: LD_VAR 0 12
42097: NOT
42098: IFFALSE 42116
// begin x := x + 2 ;
42100: LD_ADDR_VAR 0 13
42104: PUSH
42105: LD_VAR 0 13
42109: PUSH
42110: LD_INT 2
42112: PLUS
42113: ST_TO_ADDR
// continue ;
42114: GO 41914
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42116: LD_VAR 0 12
42120: PUSH
42121: LD_INT 1
42123: ARRAY
42124: PPUSH
42125: CALL_OW 266
42129: PUSH
42130: LD_INT 5
42132: EQUAL
42133: IFFALSE 42207
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42135: LD_VAR 0 12
42139: PUSH
42140: LD_INT 1
42142: ARRAY
42143: PPUSH
42144: CALL_OW 313
42148: PUSH
42149: LD_INT 3
42151: LESS
42152: IFFALSE 42188
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42154: LD_INT 0
42156: PPUSH
42157: LD_INT 5
42159: PUSH
42160: LD_INT 8
42162: PUSH
42163: LD_INT 9
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: PUSH
42171: LD_VAR 0 17
42175: ARRAY
42176: PPUSH
42177: LD_VAR 0 4
42181: PPUSH
42182: CALL_OW 380
42186: GO 42205
// PrepareHuman ( false , i , skill ) ;
42188: LD_INT 0
42190: PPUSH
42191: LD_VAR 0 8
42195: PPUSH
42196: LD_VAR 0 4
42200: PPUSH
42201: CALL_OW 380
// end else
42205: GO 42224
// PrepareHuman ( false , i , skill ) ;
42207: LD_INT 0
42209: PPUSH
42210: LD_VAR 0 8
42214: PPUSH
42215: LD_VAR 0 4
42219: PPUSH
42220: CALL_OW 380
// un := CreateHuman ;
42224: LD_ADDR_VAR 0 14
42228: PUSH
42229: CALL_OW 44
42233: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42234: LD_ADDR_VAR 0 7
42238: PUSH
42239: LD_VAR 0 7
42243: PPUSH
42244: LD_INT 1
42246: PPUSH
42247: LD_VAR 0 14
42251: PPUSH
42252: CALL_OW 2
42256: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42257: LD_VAR 0 14
42261: PPUSH
42262: LD_VAR 0 12
42266: PUSH
42267: LD_INT 1
42269: ARRAY
42270: PPUSH
42271: CALL_OW 52
// end ;
42275: GO 41914
42277: POP
42278: POP
// end ;
42279: GO 41216
42281: POP
42282: POP
// result := result ^ buildings ;
42283: LD_ADDR_VAR 0 7
42287: PUSH
42288: LD_VAR 0 7
42292: PUSH
42293: LD_VAR 0 18
42297: ADD
42298: ST_TO_ADDR
// end else
42299: GO 42442
// begin for i = 1 to personel do
42301: LD_ADDR_VAR 0 8
42305: PUSH
42306: DOUBLE
42307: LD_INT 1
42309: DEC
42310: ST_TO_ADDR
42311: LD_VAR 0 6
42315: PUSH
42316: FOR_TO
42317: IFFALSE 42440
// begin if i > 4 then
42319: LD_VAR 0 8
42323: PUSH
42324: LD_INT 4
42326: GREATER
42327: IFFALSE 42331
// break ;
42329: GO 42440
// x := personel [ i ] ;
42331: LD_ADDR_VAR 0 13
42335: PUSH
42336: LD_VAR 0 6
42340: PUSH
42341: LD_VAR 0 8
42345: ARRAY
42346: ST_TO_ADDR
// if x = - 1 then
42347: LD_VAR 0 13
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: EQUAL
42356: IFFALSE 42360
// continue ;
42358: GO 42316
// PrepareHuman ( false , i , skill ) ;
42360: LD_INT 0
42362: PPUSH
42363: LD_VAR 0 8
42367: PPUSH
42368: LD_VAR 0 4
42372: PPUSH
42373: CALL_OW 380
// un := CreateHuman ;
42377: LD_ADDR_VAR 0 14
42381: PUSH
42382: CALL_OW 44
42386: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42387: LD_VAR 0 14
42391: PPUSH
42392: LD_VAR 0 1
42396: PPUSH
42397: CALL_OW 250
42401: PPUSH
42402: LD_VAR 0 1
42406: PPUSH
42407: CALL_OW 251
42411: PPUSH
42412: LD_INT 10
42414: PPUSH
42415: LD_INT 0
42417: PPUSH
42418: CALL_OW 50
// result := result ^ un ;
42422: LD_ADDR_VAR 0 7
42426: PUSH
42427: LD_VAR 0 7
42431: PUSH
42432: LD_VAR 0 14
42436: ADD
42437: ST_TO_ADDR
// end ;
42438: GO 42316
42440: POP
42441: POP
// end ; end ;
42442: LD_VAR 0 7
42446: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42447: LD_INT 0
42449: PPUSH
42450: PPUSH
42451: PPUSH
42452: PPUSH
42453: PPUSH
42454: PPUSH
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
42463: PPUSH
42464: PPUSH
// result := false ;
42465: LD_ADDR_VAR 0 3
42469: PUSH
42470: LD_INT 0
42472: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42473: LD_VAR 0 1
42477: NOT
42478: PUSH
42479: LD_VAR 0 1
42483: PPUSH
42484: CALL_OW 266
42488: PUSH
42489: LD_INT 32
42491: PUSH
42492: LD_INT 33
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: IN
42499: NOT
42500: OR
42501: IFFALSE 42505
// exit ;
42503: GO 43614
// nat := GetNation ( tower ) ;
42505: LD_ADDR_VAR 0 12
42509: PUSH
42510: LD_VAR 0 1
42514: PPUSH
42515: CALL_OW 248
42519: ST_TO_ADDR
// side := GetSide ( tower ) ;
42520: LD_ADDR_VAR 0 16
42524: PUSH
42525: LD_VAR 0 1
42529: PPUSH
42530: CALL_OW 255
42534: ST_TO_ADDR
// x := GetX ( tower ) ;
42535: LD_ADDR_VAR 0 10
42539: PUSH
42540: LD_VAR 0 1
42544: PPUSH
42545: CALL_OW 250
42549: ST_TO_ADDR
// y := GetY ( tower ) ;
42550: LD_ADDR_VAR 0 11
42554: PUSH
42555: LD_VAR 0 1
42559: PPUSH
42560: CALL_OW 251
42564: ST_TO_ADDR
// if not x or not y then
42565: LD_VAR 0 10
42569: NOT
42570: PUSH
42571: LD_VAR 0 11
42575: NOT
42576: OR
42577: IFFALSE 42581
// exit ;
42579: GO 43614
// weapon := 0 ;
42581: LD_ADDR_VAR 0 18
42585: PUSH
42586: LD_INT 0
42588: ST_TO_ADDR
// fac_list := [ ] ;
42589: LD_ADDR_VAR 0 17
42593: PUSH
42594: EMPTY
42595: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42596: LD_ADDR_VAR 0 6
42600: PUSH
42601: LD_VAR 0 1
42605: PPUSH
42606: CALL_OW 274
42610: PPUSH
42611: LD_VAR 0 2
42615: PPUSH
42616: LD_INT 0
42618: PPUSH
42619: CALL 40185 0 3
42623: PPUSH
42624: LD_INT 30
42626: PUSH
42627: LD_INT 3
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PPUSH
42634: CALL_OW 72
42638: ST_TO_ADDR
// if not factories then
42639: LD_VAR 0 6
42643: NOT
42644: IFFALSE 42648
// exit ;
42646: GO 43614
// for i in factories do
42648: LD_ADDR_VAR 0 8
42652: PUSH
42653: LD_VAR 0 6
42657: PUSH
42658: FOR_IN
42659: IFFALSE 42684
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42661: LD_ADDR_VAR 0 17
42665: PUSH
42666: LD_VAR 0 17
42670: PUSH
42671: LD_VAR 0 8
42675: PPUSH
42676: CALL_OW 478
42680: UNION
42681: ST_TO_ADDR
42682: GO 42658
42684: POP
42685: POP
// if not fac_list then
42686: LD_VAR 0 17
42690: NOT
42691: IFFALSE 42695
// exit ;
42693: GO 43614
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42695: LD_ADDR_VAR 0 5
42699: PUSH
42700: LD_INT 4
42702: PUSH
42703: LD_INT 5
42705: PUSH
42706: LD_INT 9
42708: PUSH
42709: LD_INT 10
42711: PUSH
42712: LD_INT 6
42714: PUSH
42715: LD_INT 7
42717: PUSH
42718: LD_INT 11
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 27
42732: PUSH
42733: LD_INT 28
42735: PUSH
42736: LD_INT 26
42738: PUSH
42739: LD_INT 30
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 43
42750: PUSH
42751: LD_INT 44
42753: PUSH
42754: LD_INT 46
42756: PUSH
42757: LD_INT 45
42759: PUSH
42760: LD_INT 47
42762: PUSH
42763: LD_INT 49
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: PUSH
42779: LD_VAR 0 12
42783: ARRAY
42784: ST_TO_ADDR
// list := list isect fac_list ;
42785: LD_ADDR_VAR 0 5
42789: PUSH
42790: LD_VAR 0 5
42794: PUSH
42795: LD_VAR 0 17
42799: ISECT
42800: ST_TO_ADDR
// if not list then
42801: LD_VAR 0 5
42805: NOT
42806: IFFALSE 42810
// exit ;
42808: GO 43614
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42810: LD_VAR 0 12
42814: PUSH
42815: LD_INT 3
42817: EQUAL
42818: PUSH
42819: LD_INT 49
42821: PUSH
42822: LD_VAR 0 5
42826: IN
42827: AND
42828: PUSH
42829: LD_INT 31
42831: PPUSH
42832: LD_VAR 0 16
42836: PPUSH
42837: CALL_OW 321
42841: PUSH
42842: LD_INT 2
42844: EQUAL
42845: AND
42846: IFFALSE 42906
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42848: LD_INT 22
42850: PUSH
42851: LD_VAR 0 16
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 35
42862: PUSH
42863: LD_INT 49
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 91
42872: PUSH
42873: LD_VAR 0 1
42877: PUSH
42878: LD_INT 10
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: PPUSH
42891: CALL_OW 69
42895: NOT
42896: IFFALSE 42906
// weapon := ru_time_lapser ;
42898: LD_ADDR_VAR 0 18
42902: PUSH
42903: LD_INT 49
42905: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42906: LD_VAR 0 12
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: IN
42921: PUSH
42922: LD_INT 11
42924: PUSH
42925: LD_VAR 0 5
42929: IN
42930: PUSH
42931: LD_INT 30
42933: PUSH
42934: LD_VAR 0 5
42938: IN
42939: OR
42940: AND
42941: PUSH
42942: LD_INT 6
42944: PPUSH
42945: LD_VAR 0 16
42949: PPUSH
42950: CALL_OW 321
42954: PUSH
42955: LD_INT 2
42957: EQUAL
42958: AND
42959: IFFALSE 43124
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42961: LD_INT 22
42963: PUSH
42964: LD_VAR 0 16
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 35
42978: PUSH
42979: LD_INT 11
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 35
42988: PUSH
42989: LD_INT 30
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 91
43003: PUSH
43004: LD_VAR 0 1
43008: PUSH
43009: LD_INT 18
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: LIST
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: LIST
43021: PPUSH
43022: CALL_OW 69
43026: NOT
43027: PUSH
43028: LD_INT 22
43030: PUSH
43031: LD_VAR 0 16
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: LD_INT 30
43045: PUSH
43046: LD_INT 32
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 30
43055: PUSH
43056: LD_INT 33
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 91
43070: PUSH
43071: LD_VAR 0 1
43075: PUSH
43076: LD_INT 12
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: PUSH
43089: EMPTY
43090: LIST
43091: PPUSH
43092: CALL_OW 69
43096: PUSH
43097: LD_INT 2
43099: GREATER
43100: AND
43101: IFFALSE 43124
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43103: LD_ADDR_VAR 0 18
43107: PUSH
43108: LD_INT 11
43110: PUSH
43111: LD_INT 30
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_VAR 0 12
43122: ARRAY
43123: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43124: LD_VAR 0 18
43128: NOT
43129: PUSH
43130: LD_INT 40
43132: PPUSH
43133: LD_VAR 0 16
43137: PPUSH
43138: CALL_OW 321
43142: PUSH
43143: LD_INT 2
43145: EQUAL
43146: AND
43147: PUSH
43148: LD_INT 7
43150: PUSH
43151: LD_VAR 0 5
43155: IN
43156: PUSH
43157: LD_INT 28
43159: PUSH
43160: LD_VAR 0 5
43164: IN
43165: OR
43166: PUSH
43167: LD_INT 45
43169: PUSH
43170: LD_VAR 0 5
43174: IN
43175: OR
43176: AND
43177: IFFALSE 43431
// begin hex := GetHexInfo ( x , y ) ;
43179: LD_ADDR_VAR 0 4
43183: PUSH
43184: LD_VAR 0 10
43188: PPUSH
43189: LD_VAR 0 11
43193: PPUSH
43194: CALL_OW 546
43198: ST_TO_ADDR
// if hex [ 1 ] then
43199: LD_VAR 0 4
43203: PUSH
43204: LD_INT 1
43206: ARRAY
43207: IFFALSE 43211
// exit ;
43209: GO 43614
// height := hex [ 2 ] ;
43211: LD_ADDR_VAR 0 15
43215: PUSH
43216: LD_VAR 0 4
43220: PUSH
43221: LD_INT 2
43223: ARRAY
43224: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43225: LD_ADDR_VAR 0 14
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: LD_INT 3
43238: PUSH
43239: LD_INT 5
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: ST_TO_ADDR
// for i in tmp do
43248: LD_ADDR_VAR 0 8
43252: PUSH
43253: LD_VAR 0 14
43257: PUSH
43258: FOR_IN
43259: IFFALSE 43429
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43261: LD_ADDR_VAR 0 9
43265: PUSH
43266: LD_VAR 0 10
43270: PPUSH
43271: LD_VAR 0 8
43275: PPUSH
43276: LD_INT 5
43278: PPUSH
43279: CALL_OW 272
43283: PUSH
43284: LD_VAR 0 11
43288: PPUSH
43289: LD_VAR 0 8
43293: PPUSH
43294: LD_INT 5
43296: PPUSH
43297: CALL_OW 273
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43306: LD_VAR 0 9
43310: PUSH
43311: LD_INT 1
43313: ARRAY
43314: PPUSH
43315: LD_VAR 0 9
43319: PUSH
43320: LD_INT 2
43322: ARRAY
43323: PPUSH
43324: CALL_OW 488
43328: IFFALSE 43427
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43330: LD_ADDR_VAR 0 4
43334: PUSH
43335: LD_VAR 0 9
43339: PUSH
43340: LD_INT 1
43342: ARRAY
43343: PPUSH
43344: LD_VAR 0 9
43348: PUSH
43349: LD_INT 2
43351: ARRAY
43352: PPUSH
43353: CALL_OW 546
43357: ST_TO_ADDR
// if hex [ 1 ] then
43358: LD_VAR 0 4
43362: PUSH
43363: LD_INT 1
43365: ARRAY
43366: IFFALSE 43370
// continue ;
43368: GO 43258
// h := hex [ 2 ] ;
43370: LD_ADDR_VAR 0 13
43374: PUSH
43375: LD_VAR 0 4
43379: PUSH
43380: LD_INT 2
43382: ARRAY
43383: ST_TO_ADDR
// if h + 7 < height then
43384: LD_VAR 0 13
43388: PUSH
43389: LD_INT 7
43391: PLUS
43392: PUSH
43393: LD_VAR 0 15
43397: LESS
43398: IFFALSE 43427
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43400: LD_ADDR_VAR 0 18
43404: PUSH
43405: LD_INT 7
43407: PUSH
43408: LD_INT 28
43410: PUSH
43411: LD_INT 45
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: PUSH
43419: LD_VAR 0 12
43423: ARRAY
43424: ST_TO_ADDR
// break ;
43425: GO 43429
// end ; end ; end ;
43427: GO 43258
43429: POP
43430: POP
// end ; if not weapon then
43431: LD_VAR 0 18
43435: NOT
43436: IFFALSE 43496
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43438: LD_ADDR_VAR 0 5
43442: PUSH
43443: LD_VAR 0 5
43447: PUSH
43448: LD_INT 11
43450: PUSH
43451: LD_INT 30
43453: PUSH
43454: LD_INT 49
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: DIFF
43462: ST_TO_ADDR
// if not list then
43463: LD_VAR 0 5
43467: NOT
43468: IFFALSE 43472
// exit ;
43470: GO 43614
// weapon := list [ rand ( 1 , list ) ] ;
43472: LD_ADDR_VAR 0 18
43476: PUSH
43477: LD_VAR 0 5
43481: PUSH
43482: LD_INT 1
43484: PPUSH
43485: LD_VAR 0 5
43489: PPUSH
43490: CALL_OW 12
43494: ARRAY
43495: ST_TO_ADDR
// end ; if weapon then
43496: LD_VAR 0 18
43500: IFFALSE 43614
// begin tmp := CostOfWeapon ( weapon ) ;
43502: LD_ADDR_VAR 0 14
43506: PUSH
43507: LD_VAR 0 18
43511: PPUSH
43512: CALL_OW 451
43516: ST_TO_ADDR
// j := GetBase ( tower ) ;
43517: LD_ADDR_VAR 0 9
43521: PUSH
43522: LD_VAR 0 1
43526: PPUSH
43527: CALL_OW 274
43531: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43532: LD_VAR 0 9
43536: PPUSH
43537: LD_INT 1
43539: PPUSH
43540: CALL_OW 275
43544: PUSH
43545: LD_VAR 0 14
43549: PUSH
43550: LD_INT 1
43552: ARRAY
43553: GREATEREQUAL
43554: PUSH
43555: LD_VAR 0 9
43559: PPUSH
43560: LD_INT 2
43562: PPUSH
43563: CALL_OW 275
43567: PUSH
43568: LD_VAR 0 14
43572: PUSH
43573: LD_INT 2
43575: ARRAY
43576: GREATEREQUAL
43577: AND
43578: PUSH
43579: LD_VAR 0 9
43583: PPUSH
43584: LD_INT 3
43586: PPUSH
43587: CALL_OW 275
43591: PUSH
43592: LD_VAR 0 14
43596: PUSH
43597: LD_INT 3
43599: ARRAY
43600: GREATEREQUAL
43601: AND
43602: IFFALSE 43614
// result := weapon ;
43604: LD_ADDR_VAR 0 3
43608: PUSH
43609: LD_VAR 0 18
43613: ST_TO_ADDR
// end ; end ;
43614: LD_VAR 0 3
43618: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43619: LD_INT 0
43621: PPUSH
43622: PPUSH
// result := true ;
43623: LD_ADDR_VAR 0 3
43627: PUSH
43628: LD_INT 1
43630: ST_TO_ADDR
// if array1 = array2 then
43631: LD_VAR 0 1
43635: PUSH
43636: LD_VAR 0 2
43640: EQUAL
43641: IFFALSE 43701
// begin for i = 1 to array1 do
43643: LD_ADDR_VAR 0 4
43647: PUSH
43648: DOUBLE
43649: LD_INT 1
43651: DEC
43652: ST_TO_ADDR
43653: LD_VAR 0 1
43657: PUSH
43658: FOR_TO
43659: IFFALSE 43697
// if array1 [ i ] <> array2 [ i ] then
43661: LD_VAR 0 1
43665: PUSH
43666: LD_VAR 0 4
43670: ARRAY
43671: PUSH
43672: LD_VAR 0 2
43676: PUSH
43677: LD_VAR 0 4
43681: ARRAY
43682: NONEQUAL
43683: IFFALSE 43695
// begin result := false ;
43685: LD_ADDR_VAR 0 3
43689: PUSH
43690: LD_INT 0
43692: ST_TO_ADDR
// break ;
43693: GO 43697
// end ;
43695: GO 43658
43697: POP
43698: POP
// end else
43699: GO 43709
// result := false ;
43701: LD_ADDR_VAR 0 3
43705: PUSH
43706: LD_INT 0
43708: ST_TO_ADDR
// end ;
43709: LD_VAR 0 3
43713: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43714: LD_INT 0
43716: PPUSH
43717: PPUSH
// if not array1 or not array2 then
43718: LD_VAR 0 1
43722: NOT
43723: PUSH
43724: LD_VAR 0 2
43728: NOT
43729: OR
43730: IFFALSE 43734
// exit ;
43732: GO 43798
// result := true ;
43734: LD_ADDR_VAR 0 3
43738: PUSH
43739: LD_INT 1
43741: ST_TO_ADDR
// for i = 1 to array1 do
43742: LD_ADDR_VAR 0 4
43746: PUSH
43747: DOUBLE
43748: LD_INT 1
43750: DEC
43751: ST_TO_ADDR
43752: LD_VAR 0 1
43756: PUSH
43757: FOR_TO
43758: IFFALSE 43796
// if array1 [ i ] <> array2 [ i ] then
43760: LD_VAR 0 1
43764: PUSH
43765: LD_VAR 0 4
43769: ARRAY
43770: PUSH
43771: LD_VAR 0 2
43775: PUSH
43776: LD_VAR 0 4
43780: ARRAY
43781: NONEQUAL
43782: IFFALSE 43794
// begin result := false ;
43784: LD_ADDR_VAR 0 3
43788: PUSH
43789: LD_INT 0
43791: ST_TO_ADDR
// break ;
43792: GO 43796
// end ;
43794: GO 43757
43796: POP
43797: POP
// end ;
43798: LD_VAR 0 3
43802: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43803: LD_INT 0
43805: PPUSH
43806: PPUSH
43807: PPUSH
// pom := GetBase ( fac ) ;
43808: LD_ADDR_VAR 0 5
43812: PUSH
43813: LD_VAR 0 1
43817: PPUSH
43818: CALL_OW 274
43822: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43823: LD_ADDR_VAR 0 4
43827: PUSH
43828: LD_VAR 0 2
43832: PUSH
43833: LD_INT 1
43835: ARRAY
43836: PPUSH
43837: LD_VAR 0 2
43841: PUSH
43842: LD_INT 2
43844: ARRAY
43845: PPUSH
43846: LD_VAR 0 2
43850: PUSH
43851: LD_INT 3
43853: ARRAY
43854: PPUSH
43855: LD_VAR 0 2
43859: PUSH
43860: LD_INT 4
43862: ARRAY
43863: PPUSH
43864: CALL_OW 449
43868: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43869: LD_ADDR_VAR 0 3
43873: PUSH
43874: LD_VAR 0 5
43878: PPUSH
43879: LD_INT 1
43881: PPUSH
43882: CALL_OW 275
43886: PUSH
43887: LD_VAR 0 4
43891: PUSH
43892: LD_INT 1
43894: ARRAY
43895: GREATEREQUAL
43896: PUSH
43897: LD_VAR 0 5
43901: PPUSH
43902: LD_INT 2
43904: PPUSH
43905: CALL_OW 275
43909: PUSH
43910: LD_VAR 0 4
43914: PUSH
43915: LD_INT 2
43917: ARRAY
43918: GREATEREQUAL
43919: AND
43920: PUSH
43921: LD_VAR 0 5
43925: PPUSH
43926: LD_INT 3
43928: PPUSH
43929: CALL_OW 275
43933: PUSH
43934: LD_VAR 0 4
43938: PUSH
43939: LD_INT 3
43941: ARRAY
43942: GREATEREQUAL
43943: AND
43944: ST_TO_ADDR
// end ;
43945: LD_VAR 0 3
43949: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43950: LD_INT 0
43952: PPUSH
43953: PPUSH
43954: PPUSH
43955: PPUSH
// pom := GetBase ( building ) ;
43956: LD_ADDR_VAR 0 3
43960: PUSH
43961: LD_VAR 0 1
43965: PPUSH
43966: CALL_OW 274
43970: ST_TO_ADDR
// if not pom then
43971: LD_VAR 0 3
43975: NOT
43976: IFFALSE 43980
// exit ;
43978: GO 44150
// btype := GetBType ( building ) ;
43980: LD_ADDR_VAR 0 5
43984: PUSH
43985: LD_VAR 0 1
43989: PPUSH
43990: CALL_OW 266
43994: ST_TO_ADDR
// if btype = b_armoury then
43995: LD_VAR 0 5
43999: PUSH
44000: LD_INT 4
44002: EQUAL
44003: IFFALSE 44013
// btype := b_barracks ;
44005: LD_ADDR_VAR 0 5
44009: PUSH
44010: LD_INT 5
44012: ST_TO_ADDR
// if btype = b_depot then
44013: LD_VAR 0 5
44017: PUSH
44018: LD_INT 0
44020: EQUAL
44021: IFFALSE 44031
// btype := b_warehouse ;
44023: LD_ADDR_VAR 0 5
44027: PUSH
44028: LD_INT 1
44030: ST_TO_ADDR
// if btype = b_workshop then
44031: LD_VAR 0 5
44035: PUSH
44036: LD_INT 2
44038: EQUAL
44039: IFFALSE 44049
// btype := b_factory ;
44041: LD_ADDR_VAR 0 5
44045: PUSH
44046: LD_INT 3
44048: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44049: LD_ADDR_VAR 0 4
44053: PUSH
44054: LD_VAR 0 5
44058: PPUSH
44059: LD_VAR 0 1
44063: PPUSH
44064: CALL_OW 248
44068: PPUSH
44069: CALL_OW 450
44073: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44074: LD_ADDR_VAR 0 2
44078: PUSH
44079: LD_VAR 0 3
44083: PPUSH
44084: LD_INT 1
44086: PPUSH
44087: CALL_OW 275
44091: PUSH
44092: LD_VAR 0 4
44096: PUSH
44097: LD_INT 1
44099: ARRAY
44100: GREATEREQUAL
44101: PUSH
44102: LD_VAR 0 3
44106: PPUSH
44107: LD_INT 2
44109: PPUSH
44110: CALL_OW 275
44114: PUSH
44115: LD_VAR 0 4
44119: PUSH
44120: LD_INT 2
44122: ARRAY
44123: GREATEREQUAL
44124: AND
44125: PUSH
44126: LD_VAR 0 3
44130: PPUSH
44131: LD_INT 3
44133: PPUSH
44134: CALL_OW 275
44138: PUSH
44139: LD_VAR 0 4
44143: PUSH
44144: LD_INT 3
44146: ARRAY
44147: GREATEREQUAL
44148: AND
44149: ST_TO_ADDR
// end ;
44150: LD_VAR 0 2
44154: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44155: LD_INT 0
44157: PPUSH
44158: PPUSH
44159: PPUSH
// pom := GetBase ( building ) ;
44160: LD_ADDR_VAR 0 4
44164: PUSH
44165: LD_VAR 0 1
44169: PPUSH
44170: CALL_OW 274
44174: ST_TO_ADDR
// if not pom then
44175: LD_VAR 0 4
44179: NOT
44180: IFFALSE 44184
// exit ;
44182: GO 44285
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44184: LD_ADDR_VAR 0 5
44188: PUSH
44189: LD_VAR 0 2
44193: PPUSH
44194: LD_VAR 0 1
44198: PPUSH
44199: CALL_OW 248
44203: PPUSH
44204: CALL_OW 450
44208: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44209: LD_ADDR_VAR 0 3
44213: PUSH
44214: LD_VAR 0 4
44218: PPUSH
44219: LD_INT 1
44221: PPUSH
44222: CALL_OW 275
44226: PUSH
44227: LD_VAR 0 5
44231: PUSH
44232: LD_INT 1
44234: ARRAY
44235: GREATEREQUAL
44236: PUSH
44237: LD_VAR 0 4
44241: PPUSH
44242: LD_INT 2
44244: PPUSH
44245: CALL_OW 275
44249: PUSH
44250: LD_VAR 0 5
44254: PUSH
44255: LD_INT 2
44257: ARRAY
44258: GREATEREQUAL
44259: AND
44260: PUSH
44261: LD_VAR 0 4
44265: PPUSH
44266: LD_INT 3
44268: PPUSH
44269: CALL_OW 275
44273: PUSH
44274: LD_VAR 0 5
44278: PUSH
44279: LD_INT 3
44281: ARRAY
44282: GREATEREQUAL
44283: AND
44284: ST_TO_ADDR
// end ;
44285: LD_VAR 0 3
44289: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44290: LD_INT 0
44292: PPUSH
44293: PPUSH
44294: PPUSH
44295: PPUSH
44296: PPUSH
44297: PPUSH
44298: PPUSH
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
// result := false ;
44303: LD_ADDR_VAR 0 8
44307: PUSH
44308: LD_INT 0
44310: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44311: LD_VAR 0 5
44315: NOT
44316: PUSH
44317: LD_VAR 0 1
44321: NOT
44322: OR
44323: PUSH
44324: LD_VAR 0 2
44328: NOT
44329: OR
44330: PUSH
44331: LD_VAR 0 3
44335: NOT
44336: OR
44337: IFFALSE 44341
// exit ;
44339: GO 45155
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44341: LD_ADDR_VAR 0 14
44345: PUSH
44346: LD_VAR 0 1
44350: PPUSH
44351: LD_VAR 0 2
44355: PPUSH
44356: LD_VAR 0 3
44360: PPUSH
44361: LD_VAR 0 4
44365: PPUSH
44366: LD_VAR 0 5
44370: PUSH
44371: LD_INT 1
44373: ARRAY
44374: PPUSH
44375: CALL_OW 248
44379: PPUSH
44380: LD_INT 0
44382: PPUSH
44383: CALL 46392 0 6
44387: ST_TO_ADDR
// if not hexes then
44388: LD_VAR 0 14
44392: NOT
44393: IFFALSE 44397
// exit ;
44395: GO 45155
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44397: LD_ADDR_VAR 0 17
44401: PUSH
44402: LD_VAR 0 5
44406: PPUSH
44407: LD_INT 22
44409: PUSH
44410: LD_VAR 0 13
44414: PPUSH
44415: CALL_OW 255
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: LD_INT 30
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 30
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PPUSH
44456: CALL_OW 72
44460: ST_TO_ADDR
// for i = 1 to hexes do
44461: LD_ADDR_VAR 0 9
44465: PUSH
44466: DOUBLE
44467: LD_INT 1
44469: DEC
44470: ST_TO_ADDR
44471: LD_VAR 0 14
44475: PUSH
44476: FOR_TO
44477: IFFALSE 45153
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44479: LD_ADDR_VAR 0 13
44483: PUSH
44484: LD_VAR 0 14
44488: PUSH
44489: LD_VAR 0 9
44493: ARRAY
44494: PUSH
44495: LD_INT 1
44497: ARRAY
44498: PPUSH
44499: LD_VAR 0 14
44503: PUSH
44504: LD_VAR 0 9
44508: ARRAY
44509: PUSH
44510: LD_INT 2
44512: ARRAY
44513: PPUSH
44514: CALL_OW 428
44518: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44519: LD_VAR 0 14
44523: PUSH
44524: LD_VAR 0 9
44528: ARRAY
44529: PUSH
44530: LD_INT 1
44532: ARRAY
44533: PPUSH
44534: LD_VAR 0 14
44538: PUSH
44539: LD_VAR 0 9
44543: ARRAY
44544: PUSH
44545: LD_INT 2
44547: ARRAY
44548: PPUSH
44549: CALL_OW 351
44553: PUSH
44554: LD_VAR 0 14
44558: PUSH
44559: LD_VAR 0 9
44563: ARRAY
44564: PUSH
44565: LD_INT 1
44567: ARRAY
44568: PPUSH
44569: LD_VAR 0 14
44573: PUSH
44574: LD_VAR 0 9
44578: ARRAY
44579: PUSH
44580: LD_INT 2
44582: ARRAY
44583: PPUSH
44584: CALL_OW 488
44588: NOT
44589: OR
44590: PUSH
44591: LD_VAR 0 13
44595: PPUSH
44596: CALL_OW 247
44600: PUSH
44601: LD_INT 3
44603: EQUAL
44604: OR
44605: IFFALSE 44611
// exit ;
44607: POP
44608: POP
44609: GO 45155
// if not tmp then
44611: LD_VAR 0 13
44615: NOT
44616: IFFALSE 44620
// continue ;
44618: GO 44476
// result := true ;
44620: LD_ADDR_VAR 0 8
44624: PUSH
44625: LD_INT 1
44627: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44628: LD_VAR 0 6
44632: PUSH
44633: LD_VAR 0 13
44637: PPUSH
44638: CALL_OW 247
44642: PUSH
44643: LD_INT 2
44645: EQUAL
44646: AND
44647: PUSH
44648: LD_VAR 0 13
44652: PPUSH
44653: CALL_OW 263
44657: PUSH
44658: LD_INT 1
44660: EQUAL
44661: AND
44662: IFFALSE 44826
// begin if IsDrivenBy ( tmp ) then
44664: LD_VAR 0 13
44668: PPUSH
44669: CALL_OW 311
44673: IFFALSE 44677
// continue ;
44675: GO 44476
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44677: LD_VAR 0 6
44681: PPUSH
44682: LD_INT 3
44684: PUSH
44685: LD_INT 60
44687: PUSH
44688: EMPTY
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 3
44697: PUSH
44698: LD_INT 55
44700: PUSH
44701: EMPTY
44702: LIST
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PPUSH
44712: CALL_OW 72
44716: IFFALSE 44824
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44718: LD_ADDR_VAR 0 18
44722: PUSH
44723: LD_VAR 0 6
44727: PPUSH
44728: LD_INT 3
44730: PUSH
44731: LD_INT 60
44733: PUSH
44734: EMPTY
44735: LIST
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: PUSH
44744: LD_INT 55
44746: PUSH
44747: EMPTY
44748: LIST
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PPUSH
44758: CALL_OW 72
44762: PUSH
44763: LD_INT 1
44765: ARRAY
44766: ST_TO_ADDR
// if IsInUnit ( driver ) then
44767: LD_VAR 0 18
44771: PPUSH
44772: CALL_OW 310
44776: IFFALSE 44787
// ComExit ( driver ) ;
44778: LD_VAR 0 18
44782: PPUSH
44783: CALL 70097 0 1
// AddComEnterUnit ( driver , tmp ) ;
44787: LD_VAR 0 18
44791: PPUSH
44792: LD_VAR 0 13
44796: PPUSH
44797: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44801: LD_VAR 0 18
44805: PPUSH
44806: LD_VAR 0 7
44810: PPUSH
44811: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44815: LD_VAR 0 18
44819: PPUSH
44820: CALL_OW 181
// end ; continue ;
44824: GO 44476
// end ; if not cleaners or not tmp in cleaners then
44826: LD_VAR 0 6
44830: NOT
44831: PUSH
44832: LD_VAR 0 13
44836: PUSH
44837: LD_VAR 0 6
44841: IN
44842: NOT
44843: OR
44844: IFFALSE 45151
// begin if dep then
44846: LD_VAR 0 17
44850: IFFALSE 44986
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44852: LD_ADDR_VAR 0 16
44856: PUSH
44857: LD_VAR 0 17
44861: PUSH
44862: LD_INT 1
44864: ARRAY
44865: PPUSH
44866: CALL_OW 250
44870: PPUSH
44871: LD_VAR 0 17
44875: PUSH
44876: LD_INT 1
44878: ARRAY
44879: PPUSH
44880: CALL_OW 254
44884: PPUSH
44885: LD_INT 5
44887: PPUSH
44888: CALL_OW 272
44892: PUSH
44893: LD_VAR 0 17
44897: PUSH
44898: LD_INT 1
44900: ARRAY
44901: PPUSH
44902: CALL_OW 251
44906: PPUSH
44907: LD_VAR 0 17
44911: PUSH
44912: LD_INT 1
44914: ARRAY
44915: PPUSH
44916: CALL_OW 254
44920: PPUSH
44921: LD_INT 5
44923: PPUSH
44924: CALL_OW 273
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44933: LD_VAR 0 16
44937: PUSH
44938: LD_INT 1
44940: ARRAY
44941: PPUSH
44942: LD_VAR 0 16
44946: PUSH
44947: LD_INT 2
44949: ARRAY
44950: PPUSH
44951: CALL_OW 488
44955: IFFALSE 44986
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44957: LD_VAR 0 13
44961: PPUSH
44962: LD_VAR 0 16
44966: PUSH
44967: LD_INT 1
44969: ARRAY
44970: PPUSH
44971: LD_VAR 0 16
44975: PUSH
44976: LD_INT 2
44978: ARRAY
44979: PPUSH
44980: CALL_OW 111
// continue ;
44984: GO 44476
// end ; end ; r := GetDir ( tmp ) ;
44986: LD_ADDR_VAR 0 15
44990: PUSH
44991: LD_VAR 0 13
44995: PPUSH
44996: CALL_OW 254
45000: ST_TO_ADDR
// if r = 5 then
45001: LD_VAR 0 15
45005: PUSH
45006: LD_INT 5
45008: EQUAL
45009: IFFALSE 45019
// r := 0 ;
45011: LD_ADDR_VAR 0 15
45015: PUSH
45016: LD_INT 0
45018: ST_TO_ADDR
// for j = r to 5 do
45019: LD_ADDR_VAR 0 10
45023: PUSH
45024: DOUBLE
45025: LD_VAR 0 15
45029: DEC
45030: ST_TO_ADDR
45031: LD_INT 5
45033: PUSH
45034: FOR_TO
45035: IFFALSE 45149
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45037: LD_ADDR_VAR 0 11
45041: PUSH
45042: LD_VAR 0 13
45046: PPUSH
45047: CALL_OW 250
45051: PPUSH
45052: LD_VAR 0 10
45056: PPUSH
45057: LD_INT 2
45059: PPUSH
45060: CALL_OW 272
45064: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45065: LD_ADDR_VAR 0 12
45069: PUSH
45070: LD_VAR 0 13
45074: PPUSH
45075: CALL_OW 251
45079: PPUSH
45080: LD_VAR 0 10
45084: PPUSH
45085: LD_INT 2
45087: PPUSH
45088: CALL_OW 273
45092: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45093: LD_VAR 0 11
45097: PPUSH
45098: LD_VAR 0 12
45102: PPUSH
45103: CALL_OW 488
45107: PUSH
45108: LD_VAR 0 11
45112: PPUSH
45113: LD_VAR 0 12
45117: PPUSH
45118: CALL_OW 428
45122: NOT
45123: AND
45124: IFFALSE 45147
// begin ComMoveXY ( tmp , _x , _y ) ;
45126: LD_VAR 0 13
45130: PPUSH
45131: LD_VAR 0 11
45135: PPUSH
45136: LD_VAR 0 12
45140: PPUSH
45141: CALL_OW 111
// break ;
45145: GO 45149
// end ; end ;
45147: GO 45034
45149: POP
45150: POP
// end ; end ;
45151: GO 44476
45153: POP
45154: POP
// end ;
45155: LD_VAR 0 8
45159: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45160: LD_INT 0
45162: PPUSH
// result := true ;
45163: LD_ADDR_VAR 0 3
45167: PUSH
45168: LD_INT 1
45170: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45171: LD_VAR 0 2
45175: PUSH
45176: LD_INT 24
45178: DOUBLE
45179: EQUAL
45180: IFTRUE 45190
45182: LD_INT 33
45184: DOUBLE
45185: EQUAL
45186: IFTRUE 45190
45188: GO 45215
45190: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45191: LD_ADDR_VAR 0 3
45195: PUSH
45196: LD_INT 32
45198: PPUSH
45199: LD_VAR 0 1
45203: PPUSH
45204: CALL_OW 321
45208: PUSH
45209: LD_INT 2
45211: EQUAL
45212: ST_TO_ADDR
45213: GO 45535
45215: LD_INT 20
45217: DOUBLE
45218: EQUAL
45219: IFTRUE 45223
45221: GO 45248
45223: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45224: LD_ADDR_VAR 0 3
45228: PUSH
45229: LD_INT 6
45231: PPUSH
45232: LD_VAR 0 1
45236: PPUSH
45237: CALL_OW 321
45241: PUSH
45242: LD_INT 2
45244: EQUAL
45245: ST_TO_ADDR
45246: GO 45535
45248: LD_INT 22
45250: DOUBLE
45251: EQUAL
45252: IFTRUE 45262
45254: LD_INT 36
45256: DOUBLE
45257: EQUAL
45258: IFTRUE 45262
45260: GO 45287
45262: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45263: LD_ADDR_VAR 0 3
45267: PUSH
45268: LD_INT 15
45270: PPUSH
45271: LD_VAR 0 1
45275: PPUSH
45276: CALL_OW 321
45280: PUSH
45281: LD_INT 2
45283: EQUAL
45284: ST_TO_ADDR
45285: GO 45535
45287: LD_INT 30
45289: DOUBLE
45290: EQUAL
45291: IFTRUE 45295
45293: GO 45320
45295: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45296: LD_ADDR_VAR 0 3
45300: PUSH
45301: LD_INT 20
45303: PPUSH
45304: LD_VAR 0 1
45308: PPUSH
45309: CALL_OW 321
45313: PUSH
45314: LD_INT 2
45316: EQUAL
45317: ST_TO_ADDR
45318: GO 45535
45320: LD_INT 28
45322: DOUBLE
45323: EQUAL
45324: IFTRUE 45334
45326: LD_INT 21
45328: DOUBLE
45329: EQUAL
45330: IFTRUE 45334
45332: GO 45359
45334: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45335: LD_ADDR_VAR 0 3
45339: PUSH
45340: LD_INT 21
45342: PPUSH
45343: LD_VAR 0 1
45347: PPUSH
45348: CALL_OW 321
45352: PUSH
45353: LD_INT 2
45355: EQUAL
45356: ST_TO_ADDR
45357: GO 45535
45359: LD_INT 16
45361: DOUBLE
45362: EQUAL
45363: IFTRUE 45367
45365: GO 45394
45367: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45368: LD_ADDR_VAR 0 3
45372: PUSH
45373: LD_EXP 34
45377: PPUSH
45378: LD_VAR 0 1
45382: PPUSH
45383: CALL_OW 321
45387: PUSH
45388: LD_INT 2
45390: EQUAL
45391: ST_TO_ADDR
45392: GO 45535
45394: LD_INT 19
45396: DOUBLE
45397: EQUAL
45398: IFTRUE 45408
45400: LD_INT 23
45402: DOUBLE
45403: EQUAL
45404: IFTRUE 45408
45406: GO 45435
45408: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45409: LD_ADDR_VAR 0 3
45413: PUSH
45414: LD_EXP 33
45418: PPUSH
45419: LD_VAR 0 1
45423: PPUSH
45424: CALL_OW 321
45428: PUSH
45429: LD_INT 2
45431: EQUAL
45432: ST_TO_ADDR
45433: GO 45535
45435: LD_INT 17
45437: DOUBLE
45438: EQUAL
45439: IFTRUE 45443
45441: GO 45468
45443: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45444: LD_ADDR_VAR 0 3
45448: PUSH
45449: LD_INT 39
45451: PPUSH
45452: LD_VAR 0 1
45456: PPUSH
45457: CALL_OW 321
45461: PUSH
45462: LD_INT 2
45464: EQUAL
45465: ST_TO_ADDR
45466: GO 45535
45468: LD_INT 18
45470: DOUBLE
45471: EQUAL
45472: IFTRUE 45476
45474: GO 45501
45476: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45477: LD_ADDR_VAR 0 3
45481: PUSH
45482: LD_INT 40
45484: PPUSH
45485: LD_VAR 0 1
45489: PPUSH
45490: CALL_OW 321
45494: PUSH
45495: LD_INT 2
45497: EQUAL
45498: ST_TO_ADDR
45499: GO 45535
45501: LD_INT 27
45503: DOUBLE
45504: EQUAL
45505: IFTRUE 45509
45507: GO 45534
45509: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45510: LD_ADDR_VAR 0 3
45514: PUSH
45515: LD_INT 35
45517: PPUSH
45518: LD_VAR 0 1
45522: PPUSH
45523: CALL_OW 321
45527: PUSH
45528: LD_INT 2
45530: EQUAL
45531: ST_TO_ADDR
45532: GO 45535
45534: POP
// end ;
45535: LD_VAR 0 3
45539: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45540: LD_INT 0
45542: PPUSH
45543: PPUSH
45544: PPUSH
45545: PPUSH
45546: PPUSH
45547: PPUSH
45548: PPUSH
45549: PPUSH
45550: PPUSH
45551: PPUSH
45552: PPUSH
// result := false ;
45553: LD_ADDR_VAR 0 6
45557: PUSH
45558: LD_INT 0
45560: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45561: LD_VAR 0 1
45565: NOT
45566: PUSH
45567: LD_VAR 0 1
45571: PPUSH
45572: CALL_OW 266
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: IN
45587: NOT
45588: OR
45589: PUSH
45590: LD_VAR 0 2
45594: NOT
45595: OR
45596: PUSH
45597: LD_VAR 0 5
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: LD_INT 3
45613: PUSH
45614: LD_INT 4
45616: PUSH
45617: LD_INT 5
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: IN
45628: NOT
45629: OR
45630: PUSH
45631: LD_VAR 0 3
45635: PPUSH
45636: LD_VAR 0 4
45640: PPUSH
45641: CALL_OW 488
45645: NOT
45646: OR
45647: IFFALSE 45651
// exit ;
45649: GO 46387
// side := GetSide ( depot ) ;
45651: LD_ADDR_VAR 0 9
45655: PUSH
45656: LD_VAR 0 1
45660: PPUSH
45661: CALL_OW 255
45665: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45666: LD_VAR 0 9
45670: PPUSH
45671: LD_VAR 0 2
45675: PPUSH
45676: CALL 45160 0 2
45680: NOT
45681: IFFALSE 45685
// exit ;
45683: GO 46387
// pom := GetBase ( depot ) ;
45685: LD_ADDR_VAR 0 10
45689: PUSH
45690: LD_VAR 0 1
45694: PPUSH
45695: CALL_OW 274
45699: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45700: LD_ADDR_VAR 0 11
45704: PUSH
45705: LD_VAR 0 2
45709: PPUSH
45710: LD_VAR 0 1
45714: PPUSH
45715: CALL_OW 248
45719: PPUSH
45720: CALL_OW 450
45724: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45725: LD_VAR 0 10
45729: PPUSH
45730: LD_INT 1
45732: PPUSH
45733: CALL_OW 275
45737: PUSH
45738: LD_VAR 0 11
45742: PUSH
45743: LD_INT 1
45745: ARRAY
45746: GREATEREQUAL
45747: PUSH
45748: LD_VAR 0 10
45752: PPUSH
45753: LD_INT 2
45755: PPUSH
45756: CALL_OW 275
45760: PUSH
45761: LD_VAR 0 11
45765: PUSH
45766: LD_INT 2
45768: ARRAY
45769: GREATEREQUAL
45770: AND
45771: PUSH
45772: LD_VAR 0 10
45776: PPUSH
45777: LD_INT 3
45779: PPUSH
45780: CALL_OW 275
45784: PUSH
45785: LD_VAR 0 11
45789: PUSH
45790: LD_INT 3
45792: ARRAY
45793: GREATEREQUAL
45794: AND
45795: NOT
45796: IFFALSE 45800
// exit ;
45798: GO 46387
// if GetBType ( depot ) = b_depot then
45800: LD_VAR 0 1
45804: PPUSH
45805: CALL_OW 266
45809: PUSH
45810: LD_INT 0
45812: EQUAL
45813: IFFALSE 45825
// dist := 28 else
45815: LD_ADDR_VAR 0 14
45819: PUSH
45820: LD_INT 28
45822: ST_TO_ADDR
45823: GO 45833
// dist := 36 ;
45825: LD_ADDR_VAR 0 14
45829: PUSH
45830: LD_INT 36
45832: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45833: LD_VAR 0 1
45837: PPUSH
45838: LD_VAR 0 3
45842: PPUSH
45843: LD_VAR 0 4
45847: PPUSH
45848: CALL_OW 297
45852: PUSH
45853: LD_VAR 0 14
45857: GREATER
45858: IFFALSE 45862
// exit ;
45860: GO 46387
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45862: LD_ADDR_VAR 0 12
45866: PUSH
45867: LD_VAR 0 2
45871: PPUSH
45872: LD_VAR 0 3
45876: PPUSH
45877: LD_VAR 0 4
45881: PPUSH
45882: LD_VAR 0 5
45886: PPUSH
45887: LD_VAR 0 1
45891: PPUSH
45892: CALL_OW 248
45896: PPUSH
45897: LD_INT 0
45899: PPUSH
45900: CALL 46392 0 6
45904: ST_TO_ADDR
// if not hexes then
45905: LD_VAR 0 12
45909: NOT
45910: IFFALSE 45914
// exit ;
45912: GO 46387
// hex := GetHexInfo ( x , y ) ;
45914: LD_ADDR_VAR 0 15
45918: PUSH
45919: LD_VAR 0 3
45923: PPUSH
45924: LD_VAR 0 4
45928: PPUSH
45929: CALL_OW 546
45933: ST_TO_ADDR
// if hex [ 1 ] then
45934: LD_VAR 0 15
45938: PUSH
45939: LD_INT 1
45941: ARRAY
45942: IFFALSE 45946
// exit ;
45944: GO 46387
// height := hex [ 2 ] ;
45946: LD_ADDR_VAR 0 13
45950: PUSH
45951: LD_VAR 0 15
45955: PUSH
45956: LD_INT 2
45958: ARRAY
45959: ST_TO_ADDR
// for i = 1 to hexes do
45960: LD_ADDR_VAR 0 7
45964: PUSH
45965: DOUBLE
45966: LD_INT 1
45968: DEC
45969: ST_TO_ADDR
45970: LD_VAR 0 12
45974: PUSH
45975: FOR_TO
45976: IFFALSE 46306
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45978: LD_VAR 0 12
45982: PUSH
45983: LD_VAR 0 7
45987: ARRAY
45988: PUSH
45989: LD_INT 1
45991: ARRAY
45992: PPUSH
45993: LD_VAR 0 12
45997: PUSH
45998: LD_VAR 0 7
46002: ARRAY
46003: PUSH
46004: LD_INT 2
46006: ARRAY
46007: PPUSH
46008: CALL_OW 488
46012: NOT
46013: PUSH
46014: LD_VAR 0 12
46018: PUSH
46019: LD_VAR 0 7
46023: ARRAY
46024: PUSH
46025: LD_INT 1
46027: ARRAY
46028: PPUSH
46029: LD_VAR 0 12
46033: PUSH
46034: LD_VAR 0 7
46038: ARRAY
46039: PUSH
46040: LD_INT 2
46042: ARRAY
46043: PPUSH
46044: CALL_OW 428
46048: PUSH
46049: LD_INT 0
46051: GREATER
46052: OR
46053: PUSH
46054: LD_VAR 0 12
46058: PUSH
46059: LD_VAR 0 7
46063: ARRAY
46064: PUSH
46065: LD_INT 1
46067: ARRAY
46068: PPUSH
46069: LD_VAR 0 12
46073: PUSH
46074: LD_VAR 0 7
46078: ARRAY
46079: PUSH
46080: LD_INT 2
46082: ARRAY
46083: PPUSH
46084: CALL_OW 351
46088: OR
46089: IFFALSE 46095
// exit ;
46091: POP
46092: POP
46093: GO 46387
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46095: LD_ADDR_VAR 0 8
46099: PUSH
46100: LD_VAR 0 12
46104: PUSH
46105: LD_VAR 0 7
46109: ARRAY
46110: PUSH
46111: LD_INT 1
46113: ARRAY
46114: PPUSH
46115: LD_VAR 0 12
46119: PUSH
46120: LD_VAR 0 7
46124: ARRAY
46125: PUSH
46126: LD_INT 2
46128: ARRAY
46129: PPUSH
46130: CALL_OW 546
46134: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46135: LD_VAR 0 8
46139: PUSH
46140: LD_INT 1
46142: ARRAY
46143: PUSH
46144: LD_VAR 0 8
46148: PUSH
46149: LD_INT 2
46151: ARRAY
46152: PUSH
46153: LD_VAR 0 13
46157: PUSH
46158: LD_INT 2
46160: PLUS
46161: GREATER
46162: OR
46163: PUSH
46164: LD_VAR 0 8
46168: PUSH
46169: LD_INT 2
46171: ARRAY
46172: PUSH
46173: LD_VAR 0 13
46177: PUSH
46178: LD_INT 2
46180: MINUS
46181: LESS
46182: OR
46183: PUSH
46184: LD_VAR 0 8
46188: PUSH
46189: LD_INT 3
46191: ARRAY
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 8
46198: PUSH
46199: LD_INT 9
46201: PUSH
46202: LD_INT 10
46204: PUSH
46205: LD_INT 11
46207: PUSH
46208: LD_INT 12
46210: PUSH
46211: LD_INT 13
46213: PUSH
46214: LD_INT 16
46216: PUSH
46217: LD_INT 17
46219: PUSH
46220: LD_INT 18
46222: PUSH
46223: LD_INT 19
46225: PUSH
46226: LD_INT 20
46228: PUSH
46229: LD_INT 21
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: IN
46247: NOT
46248: OR
46249: PUSH
46250: LD_VAR 0 8
46254: PUSH
46255: LD_INT 5
46257: ARRAY
46258: NOT
46259: OR
46260: PUSH
46261: LD_VAR 0 8
46265: PUSH
46266: LD_INT 6
46268: ARRAY
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 7
46278: PUSH
46279: LD_INT 9
46281: PUSH
46282: LD_INT 10
46284: PUSH
46285: LD_INT 11
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: IN
46296: NOT
46297: OR
46298: IFFALSE 46304
// exit ;
46300: POP
46301: POP
46302: GO 46387
// end ;
46304: GO 45975
46306: POP
46307: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46308: LD_VAR 0 9
46312: PPUSH
46313: LD_VAR 0 3
46317: PPUSH
46318: LD_VAR 0 4
46322: PPUSH
46323: LD_INT 20
46325: PPUSH
46326: CALL 38333 0 4
46330: PUSH
46331: LD_INT 4
46333: ARRAY
46334: IFFALSE 46338
// exit ;
46336: GO 46387
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46338: LD_VAR 0 2
46342: PUSH
46343: LD_INT 29
46345: PUSH
46346: LD_INT 30
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: IN
46353: PUSH
46354: LD_VAR 0 3
46358: PPUSH
46359: LD_VAR 0 4
46363: PPUSH
46364: LD_VAR 0 9
46368: PPUSH
46369: CALL_OW 440
46373: NOT
46374: AND
46375: IFFALSE 46379
// exit ;
46377: GO 46387
// result := true ;
46379: LD_ADDR_VAR 0 6
46383: PUSH
46384: LD_INT 1
46386: ST_TO_ADDR
// end ;
46387: LD_VAR 0 6
46391: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46392: LD_INT 0
46394: PPUSH
46395: PPUSH
46396: PPUSH
46397: PPUSH
46398: PPUSH
46399: PPUSH
46400: PPUSH
46401: PPUSH
46402: PPUSH
46403: PPUSH
46404: PPUSH
46405: PPUSH
46406: PPUSH
46407: PPUSH
46408: PPUSH
46409: PPUSH
46410: PPUSH
46411: PPUSH
46412: PPUSH
46413: PPUSH
46414: PPUSH
46415: PPUSH
46416: PPUSH
46417: PPUSH
46418: PPUSH
46419: PPUSH
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
46425: PPUSH
46426: PPUSH
46427: PPUSH
46428: PPUSH
46429: PPUSH
46430: PPUSH
46431: PPUSH
46432: PPUSH
46433: PPUSH
46434: PPUSH
46435: PPUSH
46436: PPUSH
46437: PPUSH
46438: PPUSH
46439: PPUSH
46440: PPUSH
46441: PPUSH
46442: PPUSH
46443: PPUSH
46444: PPUSH
46445: PPUSH
46446: PPUSH
46447: PPUSH
46448: PPUSH
46449: PPUSH
46450: PPUSH
46451: PPUSH
// result = [ ] ;
46452: LD_ADDR_VAR 0 7
46456: PUSH
46457: EMPTY
46458: ST_TO_ADDR
// temp_list = [ ] ;
46459: LD_ADDR_VAR 0 9
46463: PUSH
46464: EMPTY
46465: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46466: LD_VAR 0 4
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: LD_INT 4
46485: PUSH
46486: LD_INT 5
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: IN
46497: NOT
46498: PUSH
46499: LD_VAR 0 1
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: IN
46514: PUSH
46515: LD_VAR 0 5
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: LD_INT 3
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: LIST
46533: IN
46534: NOT
46535: AND
46536: OR
46537: IFFALSE 46541
// exit ;
46539: GO 64932
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46541: LD_VAR 0 1
46545: PUSH
46546: LD_INT 6
46548: PUSH
46549: LD_INT 7
46551: PUSH
46552: LD_INT 8
46554: PUSH
46555: LD_INT 13
46557: PUSH
46558: LD_INT 12
46560: PUSH
46561: LD_INT 15
46563: PUSH
46564: LD_INT 11
46566: PUSH
46567: LD_INT 14
46569: PUSH
46570: LD_INT 10
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: IN
46584: IFFALSE 46594
// btype = b_lab ;
46586: LD_ADDR_VAR 0 1
46590: PUSH
46591: LD_INT 6
46593: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46594: LD_VAR 0 6
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: IN
46613: NOT
46614: PUSH
46615: LD_VAR 0 1
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: LD_INT 3
46631: PUSH
46632: LD_INT 6
46634: PUSH
46635: LD_INT 36
46637: PUSH
46638: LD_INT 4
46640: PUSH
46641: LD_INT 5
46643: PUSH
46644: LD_INT 31
46646: PUSH
46647: LD_INT 32
46649: PUSH
46650: LD_INT 33
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: IN
46666: NOT
46667: PUSH
46668: LD_VAR 0 6
46672: PUSH
46673: LD_INT 1
46675: EQUAL
46676: AND
46677: OR
46678: PUSH
46679: LD_VAR 0 1
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: IN
46694: NOT
46695: PUSH
46696: LD_VAR 0 6
46700: PUSH
46701: LD_INT 2
46703: EQUAL
46704: AND
46705: OR
46706: IFFALSE 46716
// mode = 0 ;
46708: LD_ADDR_VAR 0 6
46712: PUSH
46713: LD_INT 0
46715: ST_TO_ADDR
// case mode of 0 :
46716: LD_VAR 0 6
46720: PUSH
46721: LD_INT 0
46723: DOUBLE
46724: EQUAL
46725: IFTRUE 46729
46727: GO 58182
46729: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46730: LD_ADDR_VAR 0 11
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: LD_INT 3
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 3
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46923: LD_ADDR_VAR 0 12
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 3
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 3
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47119: LD_ADDR_VAR 0 13
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: LD_INT 3
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 3
47278: NEG
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 3
47290: NEG
47291: PUSH
47292: LD_INT 3
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47318: LD_ADDR_VAR 0 14
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: LD_INT 3
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 3
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47514: LD_ADDR_VAR 0 15
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 3
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 3
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47707: LD_ADDR_VAR 0 16
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47900: LD_ADDR_VAR 0 17
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48130: LD_ADDR_VAR 0 18
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48360: LD_ADDR_VAR 0 19
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48590: LD_ADDR_VAR 0 20
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48820: LD_ADDR_VAR 0 21
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49050: LD_ADDR_VAR 0 22
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49280: LD_ADDR_VAR 0 23
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 3
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49560: LD_ADDR_VAR 0 24
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 3
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 3
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49836: LD_ADDR_VAR 0 25
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 3
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 3
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: LD_INT 3
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: LD_INT 3
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50110: LD_ADDR_VAR 0 26
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: LD_INT 3
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: LD_INT 3
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50386: LD_ADDR_VAR 0 27
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 2
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: NEG
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50666: LD_ADDR_VAR 0 28
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: LD_INT 2
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 2
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: LD_INT 2
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 3
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 3
50901: NEG
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 3
50913: NEG
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50948: LD_ADDR_VAR 0 29
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 3
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 3
51192: NEG
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51227: LD_ADDR_VAR 0 30
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 3
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: LD_INT 3
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: NEG
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51505: LD_ADDR_VAR 0 31
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: LD_INT 3
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51783: LD_ADDR_VAR 0 32
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 2
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 3
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: LD_INT 3
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 3
52026: NEG
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52061: LD_ADDR_VAR 0 33
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 3
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 3
52305: NEG
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52340: LD_ADDR_VAR 0 34
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: NEG
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 3
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 3
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 3
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52620: LD_ADDR_VAR 0 35
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52732: LD_ADDR_VAR 0 36
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52844: LD_ADDR_VAR 0 37
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52956: LD_ADDR_VAR 0 38
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: NEG
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53068: LD_ADDR_VAR 0 39
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53180: LD_ADDR_VAR 0 40
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53292: LD_ADDR_VAR 0 41
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: LD_INT 2
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: LD_INT 2
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 3
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 3
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 3
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: LD_INT 3
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: LD_INT 3
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 3
53566: NEG
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 3
53577: NEG
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 3
53589: NEG
53590: PUSH
53591: LD_INT 2
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: LD_INT 3
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53642: LD_ADDR_VAR 0 42
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: NEG
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 3
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 3
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 3
53888: PUSH
53889: LD_INT 3
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: LD_INT 3
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 3
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 3
53951: NEG
53952: PUSH
53953: LD_INT 3
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53992: LD_ADDR_VAR 0 43
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 2
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 2
54158: NEG
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 3
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 3
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 3
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 3
54288: NEG
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 3
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54340: LD_ADDR_VAR 0 44
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: LD_INT 3
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 3
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: LD_INT 3
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: LD_INT 3
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 3
54625: NEG
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 3
54637: NEG
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: LD_INT 3
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54690: LD_ADDR_VAR 0 45
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 3
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 3
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: LD_INT 3
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: LD_INT 3
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 3
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: LD_INT 3
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 3
54999: NEG
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55040: LD_ADDR_VAR 0 46
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 3
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 2
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 3
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 3
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 3
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55388: LD_ADDR_VAR 0 47
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55539: LD_ADDR_VAR 0 48
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55686: LD_ADDR_VAR 0 49
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55830: LD_ADDR_VAR 0 50
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55974: LD_ADDR_VAR 0 51
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56121: LD_ADDR_VAR 0 52
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: LD_INT 2
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56272: LD_ADDR_VAR 0 53
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56502: LD_ADDR_VAR 0 54
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56732: LD_ADDR_VAR 0 55
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: LD_INT 2
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56962: LD_ADDR_VAR 0 56
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57192: LD_ADDR_VAR 0 57
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57422: LD_ADDR_VAR 0 58
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57652: LD_ADDR_VAR 0 59
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57740: LD_ADDR_VAR 0 60
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57828: LD_ADDR_VAR 0 61
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57916: LD_ADDR_VAR 0 62
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58004: LD_ADDR_VAR 0 63
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58092: LD_ADDR_VAR 0 64
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: ST_TO_ADDR
// end ; 1 :
58180: GO 64077
58182: LD_INT 1
58184: DOUBLE
58185: EQUAL
58186: IFTRUE 58190
58188: GO 60813
58190: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58191: LD_ADDR_VAR 0 11
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 3
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 2
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: LIST
58234: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58235: LD_ADDR_VAR 0 12
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 3
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 3
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: LIST
58275: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58276: LD_ADDR_VAR 0 13
58280: PUSH
58281: LD_INT 3
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 3
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58316: LD_ADDR_VAR 0 14
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: LD_INT 3
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 3
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: LIST
58356: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58357: LD_ADDR_VAR 0 15
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 3
58375: NEG
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: LIST
58400: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58401: LD_ADDR_VAR 0 16
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: LD_INT 3
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 3
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 3
58432: NEG
58433: PUSH
58434: LD_INT 3
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: LIST
58446: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58447: LD_ADDR_VAR 0 17
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 3
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: LIST
58490: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58491: LD_ADDR_VAR 0 18
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58532: LD_ADDR_VAR 0 19
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 3
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: LIST
58571: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58572: LD_ADDR_VAR 0 20
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 3
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: LIST
58612: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58613: LD_ADDR_VAR 0 21
58617: PUSH
58618: LD_INT 2
58620: NEG
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 3
58631: NEG
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58657: LD_ADDR_VAR 0 22
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: LD_INT 3
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: NEG
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 3
58688: NEG
58689: PUSH
58690: LD_INT 3
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: LIST
58702: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58703: LD_ADDR_VAR 0 23
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 3
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 4
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: LD_INT 3
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: LIST
58746: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58747: LD_ADDR_VAR 0 24
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 3
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 4
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: LIST
58787: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58788: LD_ADDR_VAR 0 25
58792: PUSH
58793: LD_INT 3
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 4
58805: PUSH
58806: LD_INT 3
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: LD_INT 4
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: LIST
58827: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58828: LD_ADDR_VAR 0 26
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 4
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58869: LD_ADDR_VAR 0 27
58873: PUSH
58874: LD_INT 3
58876: NEG
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 4
58898: NEG
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: LIST
58912: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58913: LD_ADDR_VAR 0 28
58917: PUSH
58918: LD_INT 3
58920: NEG
58921: PUSH
58922: LD_INT 3
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 3
58932: NEG
58933: PUSH
58934: LD_INT 4
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 4
58944: NEG
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58959: LD_ADDR_VAR 0 29
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 3
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_INT 3
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 4
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 4
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 3
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: LD_INT 5
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 5
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 4
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: LD_INT 6
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: LD_INT 6
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 5
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59114: LD_ADDR_VAR 0 30
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 3
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 3
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 4
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 4
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 4
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 5
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 5
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 5
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 6
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 6
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59257: LD_ADDR_VAR 0 31
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 3
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 3
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 4
59294: PUSH
59295: LD_INT 3
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 4
59304: PUSH
59305: LD_INT 4
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: LD_INT 4
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 5
59324: PUSH
59325: LD_INT 4
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 5
59334: PUSH
59335: LD_INT 5
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 4
59344: PUSH
59345: LD_INT 5
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 6
59354: PUSH
59355: LD_INT 5
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 6
59364: PUSH
59365: LD_INT 6
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 5
59374: PUSH
59375: LD_INT 6
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59396: LD_ADDR_VAR 0 32
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: LD_INT 3
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: LD_INT 4
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 4
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 3
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 5
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 5
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 4
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: LD_INT 6
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 6
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: LD_INT 5
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59539: LD_ADDR_VAR 0 33
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 3
59580: NEG
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 4
59591: NEG
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 4
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 4
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 5
59625: NEG
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 5
59636: NEG
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 5
59648: NEG
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 6
59659: NEG
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 6
59670: NEG
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59694: LD_ADDR_VAR 0 34
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: LD_INT 3
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 3
59713: NEG
59714: PUSH
59715: LD_INT 2
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 3
59725: NEG
59726: PUSH
59727: LD_INT 3
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: NEG
59738: PUSH
59739: LD_INT 4
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 4
59749: NEG
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 4
59761: NEG
59762: PUSH
59763: LD_INT 4
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 4
59773: NEG
59774: PUSH
59775: LD_INT 5
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 5
59785: NEG
59786: PUSH
59787: LD_INT 4
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 5
59797: NEG
59798: PUSH
59799: LD_INT 5
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 5
59809: NEG
59810: PUSH
59811: LD_INT 6
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 6
59821: NEG
59822: PUSH
59823: LD_INT 5
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 6
59833: NEG
59834: PUSH
59835: LD_INT 6
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59857: LD_ADDR_VAR 0 41
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: LIST
59900: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59901: LD_ADDR_VAR 0 42
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: LIST
59941: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59942: LD_ADDR_VAR 0 43
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 3
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: LD_INT 3
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: LIST
59981: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59982: LD_ADDR_VAR 0 44
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: LD_INT 3
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60023: LD_ADDR_VAR 0 45
60027: PUSH
60028: LD_INT 2
60030: NEG
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 3
60052: NEG
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60067: LD_ADDR_VAR 0 46
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: LIST
60112: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60113: LD_ADDR_VAR 0 47
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: LD_INT 3
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60146: LD_ADDR_VAR 0 48
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60177: LD_ADDR_VAR 0 49
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60206: LD_ADDR_VAR 0 50
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60235: LD_ADDR_VAR 0 51
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60266: LD_ADDR_VAR 0 52
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 3
60285: NEG
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60299: LD_ADDR_VAR 0 53
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: LD_INT 3
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: LD_INT 3
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60343: LD_ADDR_VAR 0 54
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 3
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: LIST
60383: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60384: LD_ADDR_VAR 0 55
60388: PUSH
60389: LD_INT 3
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 3
60401: PUSH
60402: LD_INT 3
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: LD_INT 3
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: LIST
60423: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60424: LD_ADDR_VAR 0 56
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 3
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: LD_INT 3
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 1
60451: NEG
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: LIST
60464: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60465: LD_ADDR_VAR 0 57
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: NEG
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 3
60494: NEG
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60509: LD_ADDR_VAR 0 58
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 3
60528: NEG
60529: PUSH
60530: LD_INT 2
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 3
60540: NEG
60541: PUSH
60542: LD_INT 3
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: LIST
60554: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60555: LD_ADDR_VAR 0 59
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 2
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: LD_INT 2
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60599: LD_ADDR_VAR 0 60
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60640: LD_ADDR_VAR 0 61
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: LD_INT 2
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: LIST
60679: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60680: LD_ADDR_VAR 0 62
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60721: LD_ADDR_VAR 0 63
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60765: LD_ADDR_VAR 0 64
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 2
60796: NEG
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: LIST
60810: ST_TO_ADDR
// end ; 2 :
60811: GO 64077
60813: LD_INT 2
60815: DOUBLE
60816: EQUAL
60817: IFTRUE 60821
60819: GO 64076
60821: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60822: LD_ADDR_VAR 0 29
60826: PUSH
60827: LD_INT 4
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 4
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 5
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 5
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 4
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 3
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 3
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 3
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 5
60912: PUSH
60913: LD_INT 2
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 3
60922: PUSH
60923: LD_INT 3
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 4
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 4
60952: PUSH
60953: LD_INT 4
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: LD_INT 4
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: LD_INT 3
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 4
60992: PUSH
60993: LD_INT 2
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: PUSH
61003: LD_INT 4
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 4
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: LD_INT 3
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 4
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: LD_INT 5
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: LD_INT 5
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 4
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 3
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: LD_INT 5
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: LD_INT 3
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 3
61105: NEG
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 3
61116: NEG
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 2
61128: NEG
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 3
61150: NEG
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 4
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 4
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 4
61184: NEG
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 4
61207: NEG
61208: PUSH
61209: LD_INT 4
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 4
61219: NEG
61220: PUSH
61221: LD_INT 5
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 3
61231: NEG
61232: PUSH
61233: LD_INT 4
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 3
61243: NEG
61244: PUSH
61245: LD_INT 3
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 4
61255: NEG
61256: PUSH
61257: LD_INT 3
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 5
61267: NEG
61268: PUSH
61269: LD_INT 4
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 5
61279: NEG
61280: PUSH
61281: LD_INT 5
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 3
61291: NEG
61292: PUSH
61293: LD_INT 5
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 5
61303: NEG
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61360: LD_ADDR_VAR 0 30
61364: PUSH
61365: LD_INT 4
61367: PUSH
61368: LD_INT 4
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 4
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 5
61387: PUSH
61388: LD_INT 4
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 5
61397: PUSH
61398: LD_INT 5
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 4
61407: PUSH
61408: LD_INT 5
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: LD_INT 4
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 3
61427: PUSH
61428: LD_INT 3
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 5
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: LD_INT 5
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 2
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: LD_INT 4
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: LD_INT 4
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: LD_INT 2
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 2
61529: PUSH
61530: LD_INT 4
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 2
61539: NEG
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 4
61550: NEG
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 4
61561: NEG
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 3
61584: NEG
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 4
61595: NEG
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 5
61606: NEG
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 5
61617: NEG
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 5
61629: NEG
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 3
61641: NEG
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 3
61652: NEG
61653: PUSH
61654: LD_INT 3
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 3
61664: NEG
61665: PUSH
61666: LD_INT 4
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: LD_INT 3
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: LD_INT 2
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: LD_INT 3
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 4
61724: NEG
61725: PUSH
61726: LD_INT 4
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: LD_INT 4
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 4
61748: NEG
61749: PUSH
61750: LD_INT 2
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: LD_INT 4
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: LD_INT 5
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: LD_INT 4
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 3
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: LD_INT 3
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: LD_INT 4
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: NEG
61828: PUSH
61829: LD_INT 5
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: PUSH
61840: LD_INT 3
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: LD_INT 5
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61907: LD_ADDR_VAR 0 31
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: LD_INT 4
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: LD_INT 4
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: LD_INT 5
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: LD_INT 5
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: LD_INT 4
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: LD_INT 3
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 2
61986: PUSH
61987: LD_INT 5
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 2
62030: NEG
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 2
62041: NEG
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 3
62052: NEG
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 4
62063: NEG
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 4
62074: NEG
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 4
62086: NEG
62087: PUSH
62088: LD_INT 2
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 4
62109: NEG
62110: PUSH
62111: LD_INT 4
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 4
62121: NEG
62122: PUSH
62123: LD_INT 5
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: NEG
62134: PUSH
62135: LD_INT 4
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 3
62145: NEG
62146: PUSH
62147: LD_INT 3
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 4
62157: NEG
62158: PUSH
62159: LD_INT 3
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 5
62169: NEG
62170: PUSH
62171: LD_INT 4
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 5
62181: NEG
62182: PUSH
62183: LD_INT 5
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 3
62193: NEG
62194: PUSH
62195: LD_INT 5
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 5
62205: NEG
62206: PUSH
62207: LD_INT 3
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 3
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: LD_INT 4
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 3
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: LD_INT 2
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 3
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: LD_INT 4
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: PUSH
62297: LD_INT 2
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 2
62307: NEG
62308: PUSH
62309: LD_INT 4
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 4
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 4
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 5
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 5
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 4
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 3
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 3
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: LD_INT 2
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 5
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62457: LD_ADDR_VAR 0 32
62461: PUSH
62462: LD_INT 4
62464: NEG
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 4
62475: NEG
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: NEG
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 4
62509: NEG
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 5
62520: NEG
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 5
62531: NEG
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 5
62543: NEG
62544: PUSH
62545: LD_INT 2
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: LD_INT 2
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 3
62566: NEG
62567: PUSH
62568: LD_INT 3
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 3
62578: NEG
62579: PUSH
62580: LD_INT 4
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: NEG
62591: PUSH
62592: LD_INT 3
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: LD_INT 2
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 4
62626: NEG
62627: PUSH
62628: LD_INT 3
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 4
62638: NEG
62639: PUSH
62640: LD_INT 4
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 2
62650: NEG
62651: PUSH
62652: LD_INT 4
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 4
62662: NEG
62663: PUSH
62664: LD_INT 2
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: LD_INT 4
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: LD_INT 5
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: LD_INT 4
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 3
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 3
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: LD_INT 4
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 5
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: PUSH
62754: LD_INT 3
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: NEG
62765: PUSH
62766: LD_INT 5
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 3
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 3
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 4
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 4
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 2
62848: PUSH
62849: LD_INT 2
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 4
62859: PUSH
62860: LD_INT 2
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 4
62869: PUSH
62870: LD_INT 4
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 4
62879: PUSH
62880: LD_INT 3
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 5
62889: PUSH
62890: LD_INT 4
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 5
62899: PUSH
62900: LD_INT 5
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 4
62909: PUSH
62910: LD_INT 5
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 3
62919: PUSH
62920: LD_INT 4
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 3
62929: PUSH
62930: LD_INT 3
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 5
62939: PUSH
62940: LD_INT 3
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 3
62949: PUSH
62950: LD_INT 5
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63004: LD_ADDR_VAR 0 33
63008: PUSH
63009: LD_INT 4
63011: NEG
63012: PUSH
63013: LD_INT 4
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 4
63023: NEG
63024: PUSH
63025: LD_INT 5
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 3
63035: NEG
63036: PUSH
63037: LD_INT 4
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 3
63047: NEG
63048: PUSH
63049: LD_INT 3
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 4
63059: NEG
63060: PUSH
63061: LD_INT 3
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 5
63071: NEG
63072: PUSH
63073: LD_INT 4
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 5
63083: NEG
63084: PUSH
63085: LD_INT 5
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 3
63095: NEG
63096: PUSH
63097: LD_INT 5
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 5
63107: NEG
63108: PUSH
63109: LD_INT 3
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: LD_INT 3
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: LD_INT 4
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: LD_INT 3
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: LD_INT 2
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: LD_INT 2
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: LD_INT 3
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: LD_INT 4
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 2
63198: PUSH
63199: LD_INT 2
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 2
63209: NEG
63210: PUSH
63211: LD_INT 4
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 4
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 4
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 5
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 5
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 4
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 3
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 3
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 3
63293: PUSH
63294: LD_INT 2
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 5
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 3
63314: PUSH
63315: LD_INT 3
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 3
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 4
63334: PUSH
63335: LD_INT 3
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 4
63344: PUSH
63345: LD_INT 4
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 3
63354: PUSH
63355: LD_INT 4
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 2
63364: PUSH
63365: LD_INT 3
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 2
63374: PUSH
63375: LD_INT 2
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 4
63384: PUSH
63385: LD_INT 2
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 2
63394: PUSH
63395: LD_INT 4
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 4
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: LD_INT 3
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: LD_INT 4
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 1
63434: PUSH
63435: LD_INT 5
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: LD_INT 5
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: LD_INT 4
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: LD_INT 3
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 2
63476: PUSH
63477: LD_INT 5
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: LD_INT 3
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63542: LD_ADDR_VAR 0 34
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: LD_INT 4
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: LD_INT 5
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: LD_INT 4
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: LD_INT 3
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: LD_INT 3
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 1
63604: NEG
63605: PUSH
63606: LD_INT 4
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: LD_INT 5
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: LD_INT 3
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 2
63639: NEG
63640: PUSH
63641: LD_INT 5
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 3
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 3
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 4
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 4
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 3
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 2
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 2
63723: PUSH
63724: LD_INT 2
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 4
63734: PUSH
63735: LD_INT 2
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 4
63744: PUSH
63745: LD_INT 4
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 4
63754: PUSH
63755: LD_INT 3
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 5
63764: PUSH
63765: LD_INT 4
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 5
63774: PUSH
63775: LD_INT 5
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 4
63784: PUSH
63785: LD_INT 5
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 3
63794: PUSH
63795: LD_INT 4
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 3
63804: PUSH
63805: LD_INT 3
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 5
63814: PUSH
63815: LD_INT 3
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 3
63824: PUSH
63825: LD_INT 5
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: LD_INT 3
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: LD_INT 3
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: LD_INT 4
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: LD_INT 4
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: LD_INT 3
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 2
63906: PUSH
63907: LD_INT 4
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 4
63927: NEG
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 4
63938: NEG
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 3
63950: NEG
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 3
63961: NEG
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 4
63972: NEG
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 5
63983: NEG
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 5
63994: NEG
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 5
64006: NEG
64007: PUSH
64008: LD_INT 2
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 3
64018: NEG
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: ST_TO_ADDR
// end ; end ;
64074: GO 64077
64076: POP
// case btype of b_depot , b_warehouse :
64077: LD_VAR 0 1
64081: PUSH
64082: LD_INT 0
64084: DOUBLE
64085: EQUAL
64086: IFTRUE 64096
64088: LD_INT 1
64090: DOUBLE
64091: EQUAL
64092: IFTRUE 64096
64094: GO 64297
64096: POP
// case nation of nation_american :
64097: LD_VAR 0 5
64101: PUSH
64102: LD_INT 1
64104: DOUBLE
64105: EQUAL
64106: IFTRUE 64110
64108: GO 64166
64110: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64111: LD_ADDR_VAR 0 9
64115: PUSH
64116: LD_VAR 0 11
64120: PUSH
64121: LD_VAR 0 12
64125: PUSH
64126: LD_VAR 0 13
64130: PUSH
64131: LD_VAR 0 14
64135: PUSH
64136: LD_VAR 0 15
64140: PUSH
64141: LD_VAR 0 16
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: PUSH
64154: LD_VAR 0 4
64158: PUSH
64159: LD_INT 1
64161: PLUS
64162: ARRAY
64163: ST_TO_ADDR
64164: GO 64295
64166: LD_INT 2
64168: DOUBLE
64169: EQUAL
64170: IFTRUE 64174
64172: GO 64230
64174: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64175: LD_ADDR_VAR 0 9
64179: PUSH
64180: LD_VAR 0 17
64184: PUSH
64185: LD_VAR 0 18
64189: PUSH
64190: LD_VAR 0 19
64194: PUSH
64195: LD_VAR 0 20
64199: PUSH
64200: LD_VAR 0 21
64204: PUSH
64205: LD_VAR 0 22
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: PUSH
64218: LD_VAR 0 4
64222: PUSH
64223: LD_INT 1
64225: PLUS
64226: ARRAY
64227: ST_TO_ADDR
64228: GO 64295
64230: LD_INT 3
64232: DOUBLE
64233: EQUAL
64234: IFTRUE 64238
64236: GO 64294
64238: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64239: LD_ADDR_VAR 0 9
64243: PUSH
64244: LD_VAR 0 23
64248: PUSH
64249: LD_VAR 0 24
64253: PUSH
64254: LD_VAR 0 25
64258: PUSH
64259: LD_VAR 0 26
64263: PUSH
64264: LD_VAR 0 27
64268: PUSH
64269: LD_VAR 0 28
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: PUSH
64282: LD_VAR 0 4
64286: PUSH
64287: LD_INT 1
64289: PLUS
64290: ARRAY
64291: ST_TO_ADDR
64292: GO 64295
64294: POP
64295: GO 64850
64297: LD_INT 2
64299: DOUBLE
64300: EQUAL
64301: IFTRUE 64311
64303: LD_INT 3
64305: DOUBLE
64306: EQUAL
64307: IFTRUE 64311
64309: GO 64367
64311: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64312: LD_ADDR_VAR 0 9
64316: PUSH
64317: LD_VAR 0 29
64321: PUSH
64322: LD_VAR 0 30
64326: PUSH
64327: LD_VAR 0 31
64331: PUSH
64332: LD_VAR 0 32
64336: PUSH
64337: LD_VAR 0 33
64341: PUSH
64342: LD_VAR 0 34
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: PUSH
64355: LD_VAR 0 4
64359: PUSH
64360: LD_INT 1
64362: PLUS
64363: ARRAY
64364: ST_TO_ADDR
64365: GO 64850
64367: LD_INT 16
64369: DOUBLE
64370: EQUAL
64371: IFTRUE 64429
64373: LD_INT 17
64375: DOUBLE
64376: EQUAL
64377: IFTRUE 64429
64379: LD_INT 18
64381: DOUBLE
64382: EQUAL
64383: IFTRUE 64429
64385: LD_INT 19
64387: DOUBLE
64388: EQUAL
64389: IFTRUE 64429
64391: LD_INT 22
64393: DOUBLE
64394: EQUAL
64395: IFTRUE 64429
64397: LD_INT 20
64399: DOUBLE
64400: EQUAL
64401: IFTRUE 64429
64403: LD_INT 21
64405: DOUBLE
64406: EQUAL
64407: IFTRUE 64429
64409: LD_INT 23
64411: DOUBLE
64412: EQUAL
64413: IFTRUE 64429
64415: LD_INT 24
64417: DOUBLE
64418: EQUAL
64419: IFTRUE 64429
64421: LD_INT 25
64423: DOUBLE
64424: EQUAL
64425: IFTRUE 64429
64427: GO 64485
64429: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64430: LD_ADDR_VAR 0 9
64434: PUSH
64435: LD_VAR 0 35
64439: PUSH
64440: LD_VAR 0 36
64444: PUSH
64445: LD_VAR 0 37
64449: PUSH
64450: LD_VAR 0 38
64454: PUSH
64455: LD_VAR 0 39
64459: PUSH
64460: LD_VAR 0 40
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: PUSH
64473: LD_VAR 0 4
64477: PUSH
64478: LD_INT 1
64480: PLUS
64481: ARRAY
64482: ST_TO_ADDR
64483: GO 64850
64485: LD_INT 6
64487: DOUBLE
64488: EQUAL
64489: IFTRUE 64541
64491: LD_INT 7
64493: DOUBLE
64494: EQUAL
64495: IFTRUE 64541
64497: LD_INT 8
64499: DOUBLE
64500: EQUAL
64501: IFTRUE 64541
64503: LD_INT 13
64505: DOUBLE
64506: EQUAL
64507: IFTRUE 64541
64509: LD_INT 12
64511: DOUBLE
64512: EQUAL
64513: IFTRUE 64541
64515: LD_INT 15
64517: DOUBLE
64518: EQUAL
64519: IFTRUE 64541
64521: LD_INT 11
64523: DOUBLE
64524: EQUAL
64525: IFTRUE 64541
64527: LD_INT 14
64529: DOUBLE
64530: EQUAL
64531: IFTRUE 64541
64533: LD_INT 10
64535: DOUBLE
64536: EQUAL
64537: IFTRUE 64541
64539: GO 64597
64541: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64542: LD_ADDR_VAR 0 9
64546: PUSH
64547: LD_VAR 0 41
64551: PUSH
64552: LD_VAR 0 42
64556: PUSH
64557: LD_VAR 0 43
64561: PUSH
64562: LD_VAR 0 44
64566: PUSH
64567: LD_VAR 0 45
64571: PUSH
64572: LD_VAR 0 46
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: PUSH
64585: LD_VAR 0 4
64589: PUSH
64590: LD_INT 1
64592: PLUS
64593: ARRAY
64594: ST_TO_ADDR
64595: GO 64850
64597: LD_INT 36
64599: DOUBLE
64600: EQUAL
64601: IFTRUE 64605
64603: GO 64661
64605: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64606: LD_ADDR_VAR 0 9
64610: PUSH
64611: LD_VAR 0 47
64615: PUSH
64616: LD_VAR 0 48
64620: PUSH
64621: LD_VAR 0 49
64625: PUSH
64626: LD_VAR 0 50
64630: PUSH
64631: LD_VAR 0 51
64635: PUSH
64636: LD_VAR 0 52
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: PUSH
64649: LD_VAR 0 4
64653: PUSH
64654: LD_INT 1
64656: PLUS
64657: ARRAY
64658: ST_TO_ADDR
64659: GO 64850
64661: LD_INT 4
64663: DOUBLE
64664: EQUAL
64665: IFTRUE 64687
64667: LD_INT 5
64669: DOUBLE
64670: EQUAL
64671: IFTRUE 64687
64673: LD_INT 34
64675: DOUBLE
64676: EQUAL
64677: IFTRUE 64687
64679: LD_INT 37
64681: DOUBLE
64682: EQUAL
64683: IFTRUE 64687
64685: GO 64743
64687: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64688: LD_ADDR_VAR 0 9
64692: PUSH
64693: LD_VAR 0 53
64697: PUSH
64698: LD_VAR 0 54
64702: PUSH
64703: LD_VAR 0 55
64707: PUSH
64708: LD_VAR 0 56
64712: PUSH
64713: LD_VAR 0 57
64717: PUSH
64718: LD_VAR 0 58
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: PUSH
64731: LD_VAR 0 4
64735: PUSH
64736: LD_INT 1
64738: PLUS
64739: ARRAY
64740: ST_TO_ADDR
64741: GO 64850
64743: LD_INT 31
64745: DOUBLE
64746: EQUAL
64747: IFTRUE 64793
64749: LD_INT 32
64751: DOUBLE
64752: EQUAL
64753: IFTRUE 64793
64755: LD_INT 33
64757: DOUBLE
64758: EQUAL
64759: IFTRUE 64793
64761: LD_INT 27
64763: DOUBLE
64764: EQUAL
64765: IFTRUE 64793
64767: LD_INT 26
64769: DOUBLE
64770: EQUAL
64771: IFTRUE 64793
64773: LD_INT 28
64775: DOUBLE
64776: EQUAL
64777: IFTRUE 64793
64779: LD_INT 29
64781: DOUBLE
64782: EQUAL
64783: IFTRUE 64793
64785: LD_INT 30
64787: DOUBLE
64788: EQUAL
64789: IFTRUE 64793
64791: GO 64849
64793: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64794: LD_ADDR_VAR 0 9
64798: PUSH
64799: LD_VAR 0 59
64803: PUSH
64804: LD_VAR 0 60
64808: PUSH
64809: LD_VAR 0 61
64813: PUSH
64814: LD_VAR 0 62
64818: PUSH
64819: LD_VAR 0 63
64823: PUSH
64824: LD_VAR 0 64
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: PUSH
64837: LD_VAR 0 4
64841: PUSH
64842: LD_INT 1
64844: PLUS
64845: ARRAY
64846: ST_TO_ADDR
64847: GO 64850
64849: POP
// temp_list2 = [ ] ;
64850: LD_ADDR_VAR 0 10
64854: PUSH
64855: EMPTY
64856: ST_TO_ADDR
// for i in temp_list do
64857: LD_ADDR_VAR 0 8
64861: PUSH
64862: LD_VAR 0 9
64866: PUSH
64867: FOR_IN
64868: IFFALSE 64920
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64870: LD_ADDR_VAR 0 10
64874: PUSH
64875: LD_VAR 0 10
64879: PUSH
64880: LD_VAR 0 8
64884: PUSH
64885: LD_INT 1
64887: ARRAY
64888: PUSH
64889: LD_VAR 0 2
64893: PLUS
64894: PUSH
64895: LD_VAR 0 8
64899: PUSH
64900: LD_INT 2
64902: ARRAY
64903: PUSH
64904: LD_VAR 0 3
64908: PLUS
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: EMPTY
64915: LIST
64916: ADD
64917: ST_TO_ADDR
64918: GO 64867
64920: POP
64921: POP
// result = temp_list2 ;
64922: LD_ADDR_VAR 0 7
64926: PUSH
64927: LD_VAR 0 10
64931: ST_TO_ADDR
// end ;
64932: LD_VAR 0 7
64936: RET
// export function EnemyInRange ( unit , dist ) ; begin
64937: LD_INT 0
64939: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64940: LD_ADDR_VAR 0 3
64944: PUSH
64945: LD_VAR 0 1
64949: PPUSH
64950: CALL_OW 255
64954: PPUSH
64955: LD_VAR 0 1
64959: PPUSH
64960: CALL_OW 250
64964: PPUSH
64965: LD_VAR 0 1
64969: PPUSH
64970: CALL_OW 251
64974: PPUSH
64975: LD_VAR 0 2
64979: PPUSH
64980: CALL 38333 0 4
64984: PUSH
64985: LD_INT 4
64987: ARRAY
64988: ST_TO_ADDR
// end ;
64989: LD_VAR 0 3
64993: RET
// export function PlayerSeeMe ( unit ) ; begin
64994: LD_INT 0
64996: PPUSH
// result := See ( your_side , unit ) ;
64997: LD_ADDR_VAR 0 2
65001: PUSH
65002: LD_OWVAR 2
65006: PPUSH
65007: LD_VAR 0 1
65011: PPUSH
65012: CALL_OW 292
65016: ST_TO_ADDR
// end ;
65017: LD_VAR 0 2
65021: RET
// export function ReverseDir ( unit ) ; begin
65022: LD_INT 0
65024: PPUSH
// if not unit then
65025: LD_VAR 0 1
65029: NOT
65030: IFFALSE 65034
// exit ;
65032: GO 65057
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65034: LD_ADDR_VAR 0 2
65038: PUSH
65039: LD_VAR 0 1
65043: PPUSH
65044: CALL_OW 254
65048: PUSH
65049: LD_INT 3
65051: PLUS
65052: PUSH
65053: LD_INT 6
65055: MOD
65056: ST_TO_ADDR
// end ;
65057: LD_VAR 0 2
65061: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65062: LD_INT 0
65064: PPUSH
65065: PPUSH
65066: PPUSH
65067: PPUSH
65068: PPUSH
// if not hexes then
65069: LD_VAR 0 2
65073: NOT
65074: IFFALSE 65078
// exit ;
65076: GO 65226
// dist := 9999 ;
65078: LD_ADDR_VAR 0 5
65082: PUSH
65083: LD_INT 9999
65085: ST_TO_ADDR
// for i = 1 to hexes do
65086: LD_ADDR_VAR 0 4
65090: PUSH
65091: DOUBLE
65092: LD_INT 1
65094: DEC
65095: ST_TO_ADDR
65096: LD_VAR 0 2
65100: PUSH
65101: FOR_TO
65102: IFFALSE 65214
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65104: LD_VAR 0 1
65108: PPUSH
65109: LD_VAR 0 2
65113: PUSH
65114: LD_VAR 0 4
65118: ARRAY
65119: PUSH
65120: LD_INT 1
65122: ARRAY
65123: PPUSH
65124: LD_VAR 0 2
65128: PUSH
65129: LD_VAR 0 4
65133: ARRAY
65134: PUSH
65135: LD_INT 2
65137: ARRAY
65138: PPUSH
65139: CALL_OW 297
65143: PUSH
65144: LD_VAR 0 5
65148: LESS
65149: IFFALSE 65212
// begin hex := hexes [ i ] ;
65151: LD_ADDR_VAR 0 7
65155: PUSH
65156: LD_VAR 0 2
65160: PUSH
65161: LD_VAR 0 4
65165: ARRAY
65166: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65167: LD_ADDR_VAR 0 5
65171: PUSH
65172: LD_VAR 0 1
65176: PPUSH
65177: LD_VAR 0 2
65181: PUSH
65182: LD_VAR 0 4
65186: ARRAY
65187: PUSH
65188: LD_INT 1
65190: ARRAY
65191: PPUSH
65192: LD_VAR 0 2
65196: PUSH
65197: LD_VAR 0 4
65201: ARRAY
65202: PUSH
65203: LD_INT 2
65205: ARRAY
65206: PPUSH
65207: CALL_OW 297
65211: ST_TO_ADDR
// end ; end ;
65212: GO 65101
65214: POP
65215: POP
// result := hex ;
65216: LD_ADDR_VAR 0 3
65220: PUSH
65221: LD_VAR 0 7
65225: ST_TO_ADDR
// end ;
65226: LD_VAR 0 3
65230: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65231: LD_INT 0
65233: PPUSH
65234: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65235: LD_VAR 0 1
65239: NOT
65240: PUSH
65241: LD_VAR 0 1
65245: PUSH
65246: LD_INT 21
65248: PUSH
65249: LD_INT 2
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 23
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PPUSH
65270: CALL_OW 69
65274: IN
65275: NOT
65276: OR
65277: IFFALSE 65281
// exit ;
65279: GO 65328
// for i = 1 to 3 do
65281: LD_ADDR_VAR 0 3
65285: PUSH
65286: DOUBLE
65287: LD_INT 1
65289: DEC
65290: ST_TO_ADDR
65291: LD_INT 3
65293: PUSH
65294: FOR_TO
65295: IFFALSE 65326
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65297: LD_VAR 0 1
65301: PPUSH
65302: CALL_OW 250
65306: PPUSH
65307: LD_VAR 0 1
65311: PPUSH
65312: CALL_OW 251
65316: PPUSH
65317: LD_INT 1
65319: PPUSH
65320: CALL_OW 453
65324: GO 65294
65326: POP
65327: POP
// end ;
65328: LD_VAR 0 2
65332: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65333: LD_INT 0
65335: PPUSH
65336: PPUSH
65337: PPUSH
65338: PPUSH
65339: PPUSH
65340: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65341: LD_VAR 0 1
65345: NOT
65346: PUSH
65347: LD_VAR 0 2
65351: NOT
65352: OR
65353: PUSH
65354: LD_VAR 0 1
65358: PPUSH
65359: CALL_OW 314
65363: OR
65364: IFFALSE 65368
// exit ;
65366: GO 65809
// x := GetX ( enemy_unit ) ;
65368: LD_ADDR_VAR 0 7
65372: PUSH
65373: LD_VAR 0 2
65377: PPUSH
65378: CALL_OW 250
65382: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65383: LD_ADDR_VAR 0 8
65387: PUSH
65388: LD_VAR 0 2
65392: PPUSH
65393: CALL_OW 251
65397: ST_TO_ADDR
// if not x or not y then
65398: LD_VAR 0 7
65402: NOT
65403: PUSH
65404: LD_VAR 0 8
65408: NOT
65409: OR
65410: IFFALSE 65414
// exit ;
65412: GO 65809
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65414: LD_ADDR_VAR 0 6
65418: PUSH
65419: LD_VAR 0 7
65423: PPUSH
65424: LD_INT 0
65426: PPUSH
65427: LD_INT 4
65429: PPUSH
65430: CALL_OW 272
65434: PUSH
65435: LD_VAR 0 8
65439: PPUSH
65440: LD_INT 0
65442: PPUSH
65443: LD_INT 4
65445: PPUSH
65446: CALL_OW 273
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_VAR 0 7
65459: PPUSH
65460: LD_INT 1
65462: PPUSH
65463: LD_INT 4
65465: PPUSH
65466: CALL_OW 272
65470: PUSH
65471: LD_VAR 0 8
65475: PPUSH
65476: LD_INT 1
65478: PPUSH
65479: LD_INT 4
65481: PPUSH
65482: CALL_OW 273
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_VAR 0 7
65495: PPUSH
65496: LD_INT 2
65498: PPUSH
65499: LD_INT 4
65501: PPUSH
65502: CALL_OW 272
65506: PUSH
65507: LD_VAR 0 8
65511: PPUSH
65512: LD_INT 2
65514: PPUSH
65515: LD_INT 4
65517: PPUSH
65518: CALL_OW 273
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_VAR 0 7
65531: PPUSH
65532: LD_INT 3
65534: PPUSH
65535: LD_INT 4
65537: PPUSH
65538: CALL_OW 272
65542: PUSH
65543: LD_VAR 0 8
65547: PPUSH
65548: LD_INT 3
65550: PPUSH
65551: LD_INT 4
65553: PPUSH
65554: CALL_OW 273
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_VAR 0 7
65567: PPUSH
65568: LD_INT 4
65570: PPUSH
65571: LD_INT 4
65573: PPUSH
65574: CALL_OW 272
65578: PUSH
65579: LD_VAR 0 8
65583: PPUSH
65584: LD_INT 4
65586: PPUSH
65587: LD_INT 4
65589: PPUSH
65590: CALL_OW 273
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_VAR 0 7
65603: PPUSH
65604: LD_INT 5
65606: PPUSH
65607: LD_INT 4
65609: PPUSH
65610: CALL_OW 272
65614: PUSH
65615: LD_VAR 0 8
65619: PPUSH
65620: LD_INT 5
65622: PPUSH
65623: LD_INT 4
65625: PPUSH
65626: CALL_OW 273
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: ST_TO_ADDR
// for i = tmp downto 1 do
65643: LD_ADDR_VAR 0 4
65647: PUSH
65648: DOUBLE
65649: LD_VAR 0 6
65653: INC
65654: ST_TO_ADDR
65655: LD_INT 1
65657: PUSH
65658: FOR_DOWNTO
65659: IFFALSE 65760
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65661: LD_VAR 0 6
65665: PUSH
65666: LD_VAR 0 4
65670: ARRAY
65671: PUSH
65672: LD_INT 1
65674: ARRAY
65675: PPUSH
65676: LD_VAR 0 6
65680: PUSH
65681: LD_VAR 0 4
65685: ARRAY
65686: PUSH
65687: LD_INT 2
65689: ARRAY
65690: PPUSH
65691: CALL_OW 488
65695: NOT
65696: PUSH
65697: LD_VAR 0 6
65701: PUSH
65702: LD_VAR 0 4
65706: ARRAY
65707: PUSH
65708: LD_INT 1
65710: ARRAY
65711: PPUSH
65712: LD_VAR 0 6
65716: PUSH
65717: LD_VAR 0 4
65721: ARRAY
65722: PUSH
65723: LD_INT 2
65725: ARRAY
65726: PPUSH
65727: CALL_OW 428
65731: PUSH
65732: LD_INT 0
65734: NONEQUAL
65735: OR
65736: IFFALSE 65758
// tmp := Delete ( tmp , i ) ;
65738: LD_ADDR_VAR 0 6
65742: PUSH
65743: LD_VAR 0 6
65747: PPUSH
65748: LD_VAR 0 4
65752: PPUSH
65753: CALL_OW 3
65757: ST_TO_ADDR
65758: GO 65658
65760: POP
65761: POP
// j := GetClosestHex ( unit , tmp ) ;
65762: LD_ADDR_VAR 0 5
65766: PUSH
65767: LD_VAR 0 1
65771: PPUSH
65772: LD_VAR 0 6
65776: PPUSH
65777: CALL 65062 0 2
65781: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65782: LD_VAR 0 1
65786: PPUSH
65787: LD_VAR 0 5
65791: PUSH
65792: LD_INT 1
65794: ARRAY
65795: PPUSH
65796: LD_VAR 0 5
65800: PUSH
65801: LD_INT 2
65803: ARRAY
65804: PPUSH
65805: CALL_OW 111
// end ;
65809: LD_VAR 0 3
65813: RET
// export function PrepareApemanSoldier ( ) ; begin
65814: LD_INT 0
65816: PPUSH
// uc_nation := 0 ;
65817: LD_ADDR_OWVAR 21
65821: PUSH
65822: LD_INT 0
65824: ST_TO_ADDR
// hc_sex := sex_male ;
65825: LD_ADDR_OWVAR 27
65829: PUSH
65830: LD_INT 1
65832: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65833: LD_ADDR_OWVAR 28
65837: PUSH
65838: LD_INT 15
65840: ST_TO_ADDR
// hc_gallery :=  ;
65841: LD_ADDR_OWVAR 33
65845: PUSH
65846: LD_STRING 
65848: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65849: LD_ADDR_OWVAR 31
65853: PUSH
65854: LD_INT 0
65856: PPUSH
65857: LD_INT 3
65859: PPUSH
65860: CALL_OW 12
65864: PUSH
65865: LD_INT 0
65867: PPUSH
65868: LD_INT 3
65870: PPUSH
65871: CALL_OW 12
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: ST_TO_ADDR
// end ;
65888: LD_VAR 0 1
65892: RET
// export function PrepareApemanEngineer ( ) ; begin
65893: LD_INT 0
65895: PPUSH
// uc_nation := 0 ;
65896: LD_ADDR_OWVAR 21
65900: PUSH
65901: LD_INT 0
65903: ST_TO_ADDR
// hc_sex := sex_male ;
65904: LD_ADDR_OWVAR 27
65908: PUSH
65909: LD_INT 1
65911: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65912: LD_ADDR_OWVAR 28
65916: PUSH
65917: LD_INT 16
65919: ST_TO_ADDR
// hc_gallery :=  ;
65920: LD_ADDR_OWVAR 33
65924: PUSH
65925: LD_STRING 
65927: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65928: LD_ADDR_OWVAR 31
65932: PUSH
65933: LD_INT 0
65935: PPUSH
65936: LD_INT 3
65938: PPUSH
65939: CALL_OW 12
65943: PUSH
65944: LD_INT 0
65946: PPUSH
65947: LD_INT 3
65949: PPUSH
65950: CALL_OW 12
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: ST_TO_ADDR
// end ;
65967: LD_VAR 0 1
65971: RET
// export function PrepareApeman ( agressivity ) ; begin
65972: LD_INT 0
65974: PPUSH
// uc_side := 0 ;
65975: LD_ADDR_OWVAR 20
65979: PUSH
65980: LD_INT 0
65982: ST_TO_ADDR
// uc_nation := 0 ;
65983: LD_ADDR_OWVAR 21
65987: PUSH
65988: LD_INT 0
65990: ST_TO_ADDR
// hc_sex := sex_male ;
65991: LD_ADDR_OWVAR 27
65995: PUSH
65996: LD_INT 1
65998: ST_TO_ADDR
// hc_class := class_apeman ;
65999: LD_ADDR_OWVAR 28
66003: PUSH
66004: LD_INT 12
66006: ST_TO_ADDR
// hc_gallery :=  ;
66007: LD_ADDR_OWVAR 33
66011: PUSH
66012: LD_STRING 
66014: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66015: LD_ADDR_OWVAR 35
66019: PUSH
66020: LD_VAR 0 1
66024: NEG
66025: PPUSH
66026: LD_VAR 0 1
66030: PPUSH
66031: CALL_OW 12
66035: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66036: LD_ADDR_OWVAR 31
66040: PUSH
66041: LD_INT 0
66043: PPUSH
66044: LD_INT 3
66046: PPUSH
66047: CALL_OW 12
66051: PUSH
66052: LD_INT 0
66054: PPUSH
66055: LD_INT 3
66057: PPUSH
66058: CALL_OW 12
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: ST_TO_ADDR
// end ;
66075: LD_VAR 0 2
66079: RET
// export function PrepareTiger ( agressivity ) ; begin
66080: LD_INT 0
66082: PPUSH
// uc_side := 0 ;
66083: LD_ADDR_OWVAR 20
66087: PUSH
66088: LD_INT 0
66090: ST_TO_ADDR
// uc_nation := 0 ;
66091: LD_ADDR_OWVAR 21
66095: PUSH
66096: LD_INT 0
66098: ST_TO_ADDR
// hc_class := class_tiger ;
66099: LD_ADDR_OWVAR 28
66103: PUSH
66104: LD_INT 14
66106: ST_TO_ADDR
// hc_gallery :=  ;
66107: LD_ADDR_OWVAR 33
66111: PUSH
66112: LD_STRING 
66114: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66115: LD_ADDR_OWVAR 35
66119: PUSH
66120: LD_VAR 0 1
66124: NEG
66125: PPUSH
66126: LD_VAR 0 1
66130: PPUSH
66131: CALL_OW 12
66135: ST_TO_ADDR
// end ;
66136: LD_VAR 0 2
66140: RET
// export function PrepareEnchidna ( ) ; begin
66141: LD_INT 0
66143: PPUSH
// uc_side := 0 ;
66144: LD_ADDR_OWVAR 20
66148: PUSH
66149: LD_INT 0
66151: ST_TO_ADDR
// uc_nation := 0 ;
66152: LD_ADDR_OWVAR 21
66156: PUSH
66157: LD_INT 0
66159: ST_TO_ADDR
// hc_class := class_baggie ;
66160: LD_ADDR_OWVAR 28
66164: PUSH
66165: LD_INT 13
66167: ST_TO_ADDR
// hc_gallery :=  ;
66168: LD_ADDR_OWVAR 33
66172: PUSH
66173: LD_STRING 
66175: ST_TO_ADDR
// end ;
66176: LD_VAR 0 1
66180: RET
// export function PrepareFrog ( ) ; begin
66181: LD_INT 0
66183: PPUSH
// uc_side := 0 ;
66184: LD_ADDR_OWVAR 20
66188: PUSH
66189: LD_INT 0
66191: ST_TO_ADDR
// uc_nation := 0 ;
66192: LD_ADDR_OWVAR 21
66196: PUSH
66197: LD_INT 0
66199: ST_TO_ADDR
// hc_class := class_frog ;
66200: LD_ADDR_OWVAR 28
66204: PUSH
66205: LD_INT 19
66207: ST_TO_ADDR
// hc_gallery :=  ;
66208: LD_ADDR_OWVAR 33
66212: PUSH
66213: LD_STRING 
66215: ST_TO_ADDR
// end ;
66216: LD_VAR 0 1
66220: RET
// export function PrepareFish ( ) ; begin
66221: LD_INT 0
66223: PPUSH
// uc_side := 0 ;
66224: LD_ADDR_OWVAR 20
66228: PUSH
66229: LD_INT 0
66231: ST_TO_ADDR
// uc_nation := 0 ;
66232: LD_ADDR_OWVAR 21
66236: PUSH
66237: LD_INT 0
66239: ST_TO_ADDR
// hc_class := class_fish ;
66240: LD_ADDR_OWVAR 28
66244: PUSH
66245: LD_INT 20
66247: ST_TO_ADDR
// hc_gallery :=  ;
66248: LD_ADDR_OWVAR 33
66252: PUSH
66253: LD_STRING 
66255: ST_TO_ADDR
// end ;
66256: LD_VAR 0 1
66260: RET
// export function PrepareBird ( ) ; begin
66261: LD_INT 0
66263: PPUSH
// uc_side := 0 ;
66264: LD_ADDR_OWVAR 20
66268: PUSH
66269: LD_INT 0
66271: ST_TO_ADDR
// uc_nation := 0 ;
66272: LD_ADDR_OWVAR 21
66276: PUSH
66277: LD_INT 0
66279: ST_TO_ADDR
// hc_class := class_phororhacos ;
66280: LD_ADDR_OWVAR 28
66284: PUSH
66285: LD_INT 18
66287: ST_TO_ADDR
// hc_gallery :=  ;
66288: LD_ADDR_OWVAR 33
66292: PUSH
66293: LD_STRING 
66295: ST_TO_ADDR
// end ;
66296: LD_VAR 0 1
66300: RET
// export function PrepareHorse ( ) ; begin
66301: LD_INT 0
66303: PPUSH
// uc_side := 0 ;
66304: LD_ADDR_OWVAR 20
66308: PUSH
66309: LD_INT 0
66311: ST_TO_ADDR
// uc_nation := 0 ;
66312: LD_ADDR_OWVAR 21
66316: PUSH
66317: LD_INT 0
66319: ST_TO_ADDR
// hc_class := class_horse ;
66320: LD_ADDR_OWVAR 28
66324: PUSH
66325: LD_INT 21
66327: ST_TO_ADDR
// hc_gallery :=  ;
66328: LD_ADDR_OWVAR 33
66332: PUSH
66333: LD_STRING 
66335: ST_TO_ADDR
// end ;
66336: LD_VAR 0 1
66340: RET
// export function PrepareMastodont ( ) ; begin
66341: LD_INT 0
66343: PPUSH
// uc_side := 0 ;
66344: LD_ADDR_OWVAR 20
66348: PUSH
66349: LD_INT 0
66351: ST_TO_ADDR
// uc_nation := 0 ;
66352: LD_ADDR_OWVAR 21
66356: PUSH
66357: LD_INT 0
66359: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66360: LD_ADDR_OWVAR 37
66364: PUSH
66365: LD_INT 31
66367: ST_TO_ADDR
// vc_control := control_rider ;
66368: LD_ADDR_OWVAR 38
66372: PUSH
66373: LD_INT 4
66375: ST_TO_ADDR
// end ;
66376: LD_VAR 0 1
66380: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66381: LD_INT 0
66383: PPUSH
66384: PPUSH
66385: PPUSH
// uc_side = 0 ;
66386: LD_ADDR_OWVAR 20
66390: PUSH
66391: LD_INT 0
66393: ST_TO_ADDR
// uc_nation = 0 ;
66394: LD_ADDR_OWVAR 21
66398: PUSH
66399: LD_INT 0
66401: ST_TO_ADDR
// InitHc_All ( ) ;
66402: CALL_OW 584
// InitVc ;
66406: CALL_OW 20
// if mastodonts then
66410: LD_VAR 0 6
66414: IFFALSE 66481
// for i = 1 to mastodonts do
66416: LD_ADDR_VAR 0 11
66420: PUSH
66421: DOUBLE
66422: LD_INT 1
66424: DEC
66425: ST_TO_ADDR
66426: LD_VAR 0 6
66430: PUSH
66431: FOR_TO
66432: IFFALSE 66479
// begin vc_chassis := 31 ;
66434: LD_ADDR_OWVAR 37
66438: PUSH
66439: LD_INT 31
66441: ST_TO_ADDR
// vc_control := control_rider ;
66442: LD_ADDR_OWVAR 38
66446: PUSH
66447: LD_INT 4
66449: ST_TO_ADDR
// animal := CreateVehicle ;
66450: LD_ADDR_VAR 0 12
66454: PUSH
66455: CALL_OW 45
66459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66460: LD_VAR 0 12
66464: PPUSH
66465: LD_VAR 0 8
66469: PPUSH
66470: LD_INT 0
66472: PPUSH
66473: CALL 68616 0 3
// end ;
66477: GO 66431
66479: POP
66480: POP
// if horses then
66481: LD_VAR 0 5
66485: IFFALSE 66552
// for i = 1 to horses do
66487: LD_ADDR_VAR 0 11
66491: PUSH
66492: DOUBLE
66493: LD_INT 1
66495: DEC
66496: ST_TO_ADDR
66497: LD_VAR 0 5
66501: PUSH
66502: FOR_TO
66503: IFFALSE 66550
// begin hc_class := 21 ;
66505: LD_ADDR_OWVAR 28
66509: PUSH
66510: LD_INT 21
66512: ST_TO_ADDR
// hc_gallery :=  ;
66513: LD_ADDR_OWVAR 33
66517: PUSH
66518: LD_STRING 
66520: ST_TO_ADDR
// animal := CreateHuman ;
66521: LD_ADDR_VAR 0 12
66525: PUSH
66526: CALL_OW 44
66530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66531: LD_VAR 0 12
66535: PPUSH
66536: LD_VAR 0 8
66540: PPUSH
66541: LD_INT 0
66543: PPUSH
66544: CALL 68616 0 3
// end ;
66548: GO 66502
66550: POP
66551: POP
// if birds then
66552: LD_VAR 0 1
66556: IFFALSE 66623
// for i = 1 to birds do
66558: LD_ADDR_VAR 0 11
66562: PUSH
66563: DOUBLE
66564: LD_INT 1
66566: DEC
66567: ST_TO_ADDR
66568: LD_VAR 0 1
66572: PUSH
66573: FOR_TO
66574: IFFALSE 66621
// begin hc_class = 18 ;
66576: LD_ADDR_OWVAR 28
66580: PUSH
66581: LD_INT 18
66583: ST_TO_ADDR
// hc_gallery =  ;
66584: LD_ADDR_OWVAR 33
66588: PUSH
66589: LD_STRING 
66591: ST_TO_ADDR
// animal := CreateHuman ;
66592: LD_ADDR_VAR 0 12
66596: PUSH
66597: CALL_OW 44
66601: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66602: LD_VAR 0 12
66606: PPUSH
66607: LD_VAR 0 8
66611: PPUSH
66612: LD_INT 0
66614: PPUSH
66615: CALL 68616 0 3
// end ;
66619: GO 66573
66621: POP
66622: POP
// if tigers then
66623: LD_VAR 0 2
66627: IFFALSE 66711
// for i = 1 to tigers do
66629: LD_ADDR_VAR 0 11
66633: PUSH
66634: DOUBLE
66635: LD_INT 1
66637: DEC
66638: ST_TO_ADDR
66639: LD_VAR 0 2
66643: PUSH
66644: FOR_TO
66645: IFFALSE 66709
// begin hc_class = class_tiger ;
66647: LD_ADDR_OWVAR 28
66651: PUSH
66652: LD_INT 14
66654: ST_TO_ADDR
// hc_gallery =  ;
66655: LD_ADDR_OWVAR 33
66659: PUSH
66660: LD_STRING 
66662: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66663: LD_ADDR_OWVAR 35
66667: PUSH
66668: LD_INT 7
66670: NEG
66671: PPUSH
66672: LD_INT 7
66674: PPUSH
66675: CALL_OW 12
66679: ST_TO_ADDR
// animal := CreateHuman ;
66680: LD_ADDR_VAR 0 12
66684: PUSH
66685: CALL_OW 44
66689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66690: LD_VAR 0 12
66694: PPUSH
66695: LD_VAR 0 8
66699: PPUSH
66700: LD_INT 0
66702: PPUSH
66703: CALL 68616 0 3
// end ;
66707: GO 66644
66709: POP
66710: POP
// if apemans then
66711: LD_VAR 0 3
66715: IFFALSE 66838
// for i = 1 to apemans do
66717: LD_ADDR_VAR 0 11
66721: PUSH
66722: DOUBLE
66723: LD_INT 1
66725: DEC
66726: ST_TO_ADDR
66727: LD_VAR 0 3
66731: PUSH
66732: FOR_TO
66733: IFFALSE 66836
// begin hc_class = class_apeman ;
66735: LD_ADDR_OWVAR 28
66739: PUSH
66740: LD_INT 12
66742: ST_TO_ADDR
// hc_gallery =  ;
66743: LD_ADDR_OWVAR 33
66747: PUSH
66748: LD_STRING 
66750: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66751: LD_ADDR_OWVAR 35
66755: PUSH
66756: LD_INT 2
66758: NEG
66759: PPUSH
66760: LD_INT 2
66762: PPUSH
66763: CALL_OW 12
66767: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66768: LD_ADDR_OWVAR 31
66772: PUSH
66773: LD_INT 1
66775: PPUSH
66776: LD_INT 3
66778: PPUSH
66779: CALL_OW 12
66783: PUSH
66784: LD_INT 1
66786: PPUSH
66787: LD_INT 3
66789: PPUSH
66790: CALL_OW 12
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: ST_TO_ADDR
// animal := CreateHuman ;
66807: LD_ADDR_VAR 0 12
66811: PUSH
66812: CALL_OW 44
66816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66817: LD_VAR 0 12
66821: PPUSH
66822: LD_VAR 0 8
66826: PPUSH
66827: LD_INT 0
66829: PPUSH
66830: CALL 68616 0 3
// end ;
66834: GO 66732
66836: POP
66837: POP
// if enchidnas then
66838: LD_VAR 0 4
66842: IFFALSE 66909
// for i = 1 to enchidnas do
66844: LD_ADDR_VAR 0 11
66848: PUSH
66849: DOUBLE
66850: LD_INT 1
66852: DEC
66853: ST_TO_ADDR
66854: LD_VAR 0 4
66858: PUSH
66859: FOR_TO
66860: IFFALSE 66907
// begin hc_class = 13 ;
66862: LD_ADDR_OWVAR 28
66866: PUSH
66867: LD_INT 13
66869: ST_TO_ADDR
// hc_gallery =  ;
66870: LD_ADDR_OWVAR 33
66874: PUSH
66875: LD_STRING 
66877: ST_TO_ADDR
// animal := CreateHuman ;
66878: LD_ADDR_VAR 0 12
66882: PUSH
66883: CALL_OW 44
66887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66888: LD_VAR 0 12
66892: PPUSH
66893: LD_VAR 0 8
66897: PPUSH
66898: LD_INT 0
66900: PPUSH
66901: CALL 68616 0 3
// end ;
66905: GO 66859
66907: POP
66908: POP
// if fishes then
66909: LD_VAR 0 7
66913: IFFALSE 66980
// for i = 1 to fishes do
66915: LD_ADDR_VAR 0 11
66919: PUSH
66920: DOUBLE
66921: LD_INT 1
66923: DEC
66924: ST_TO_ADDR
66925: LD_VAR 0 7
66929: PUSH
66930: FOR_TO
66931: IFFALSE 66978
// begin hc_class = 20 ;
66933: LD_ADDR_OWVAR 28
66937: PUSH
66938: LD_INT 20
66940: ST_TO_ADDR
// hc_gallery =  ;
66941: LD_ADDR_OWVAR 33
66945: PUSH
66946: LD_STRING 
66948: ST_TO_ADDR
// animal := CreateHuman ;
66949: LD_ADDR_VAR 0 12
66953: PUSH
66954: CALL_OW 44
66958: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66959: LD_VAR 0 12
66963: PPUSH
66964: LD_VAR 0 9
66968: PPUSH
66969: LD_INT 0
66971: PPUSH
66972: CALL 68616 0 3
// end ;
66976: GO 66930
66978: POP
66979: POP
// end ;
66980: LD_VAR 0 10
66984: RET
// export function WantHeal ( sci , unit ) ; begin
66985: LD_INT 0
66987: PPUSH
// if GetTaskList ( sci ) > 0 then
66988: LD_VAR 0 1
66992: PPUSH
66993: CALL_OW 437
66997: PUSH
66998: LD_INT 0
67000: GREATER
67001: IFFALSE 67071
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67003: LD_VAR 0 1
67007: PPUSH
67008: CALL_OW 437
67012: PUSH
67013: LD_INT 1
67015: ARRAY
67016: PUSH
67017: LD_INT 1
67019: ARRAY
67020: PUSH
67021: LD_STRING l
67023: EQUAL
67024: PUSH
67025: LD_VAR 0 1
67029: PPUSH
67030: CALL_OW 437
67034: PUSH
67035: LD_INT 1
67037: ARRAY
67038: PUSH
67039: LD_INT 4
67041: ARRAY
67042: PUSH
67043: LD_VAR 0 2
67047: EQUAL
67048: AND
67049: IFFALSE 67061
// result := true else
67051: LD_ADDR_VAR 0 3
67055: PUSH
67056: LD_INT 1
67058: ST_TO_ADDR
67059: GO 67069
// result := false ;
67061: LD_ADDR_VAR 0 3
67065: PUSH
67066: LD_INT 0
67068: ST_TO_ADDR
// end else
67069: GO 67079
// result := false ;
67071: LD_ADDR_VAR 0 3
67075: PUSH
67076: LD_INT 0
67078: ST_TO_ADDR
// end ;
67079: LD_VAR 0 3
67083: RET
// export function HealTarget ( sci ) ; begin
67084: LD_INT 0
67086: PPUSH
// if not sci then
67087: LD_VAR 0 1
67091: NOT
67092: IFFALSE 67096
// exit ;
67094: GO 67161
// result := 0 ;
67096: LD_ADDR_VAR 0 2
67100: PUSH
67101: LD_INT 0
67103: ST_TO_ADDR
// if GetTaskList ( sci ) then
67104: LD_VAR 0 1
67108: PPUSH
67109: CALL_OW 437
67113: IFFALSE 67161
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67115: LD_VAR 0 1
67119: PPUSH
67120: CALL_OW 437
67124: PUSH
67125: LD_INT 1
67127: ARRAY
67128: PUSH
67129: LD_INT 1
67131: ARRAY
67132: PUSH
67133: LD_STRING l
67135: EQUAL
67136: IFFALSE 67161
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67138: LD_ADDR_VAR 0 2
67142: PUSH
67143: LD_VAR 0 1
67147: PPUSH
67148: CALL_OW 437
67152: PUSH
67153: LD_INT 1
67155: ARRAY
67156: PUSH
67157: LD_INT 4
67159: ARRAY
67160: ST_TO_ADDR
// end ;
67161: LD_VAR 0 2
67165: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67166: LD_INT 0
67168: PPUSH
67169: PPUSH
67170: PPUSH
67171: PPUSH
// if not base_units then
67172: LD_VAR 0 1
67176: NOT
67177: IFFALSE 67181
// exit ;
67179: GO 67268
// result := false ;
67181: LD_ADDR_VAR 0 2
67185: PUSH
67186: LD_INT 0
67188: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67189: LD_ADDR_VAR 0 5
67193: PUSH
67194: LD_VAR 0 1
67198: PPUSH
67199: LD_INT 21
67201: PUSH
67202: LD_INT 3
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PPUSH
67209: CALL_OW 72
67213: ST_TO_ADDR
// if not tmp then
67214: LD_VAR 0 5
67218: NOT
67219: IFFALSE 67223
// exit ;
67221: GO 67268
// for i in tmp do
67223: LD_ADDR_VAR 0 3
67227: PUSH
67228: LD_VAR 0 5
67232: PUSH
67233: FOR_IN
67234: IFFALSE 67266
// begin result := EnemyInRange ( i , 22 ) ;
67236: LD_ADDR_VAR 0 2
67240: PUSH
67241: LD_VAR 0 3
67245: PPUSH
67246: LD_INT 22
67248: PPUSH
67249: CALL 64937 0 2
67253: ST_TO_ADDR
// if result then
67254: LD_VAR 0 2
67258: IFFALSE 67264
// exit ;
67260: POP
67261: POP
67262: GO 67268
// end ;
67264: GO 67233
67266: POP
67267: POP
// end ;
67268: LD_VAR 0 2
67272: RET
// export function FilterByTag ( units , tag ) ; begin
67273: LD_INT 0
67275: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67276: LD_ADDR_VAR 0 3
67280: PUSH
67281: LD_VAR 0 1
67285: PPUSH
67286: LD_INT 120
67288: PUSH
67289: LD_VAR 0 2
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PPUSH
67298: CALL_OW 72
67302: ST_TO_ADDR
// end ;
67303: LD_VAR 0 3
67307: RET
// export function IsDriver ( un ) ; begin
67308: LD_INT 0
67310: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67311: LD_ADDR_VAR 0 2
67315: PUSH
67316: LD_VAR 0 1
67320: PUSH
67321: LD_INT 55
67323: PUSH
67324: EMPTY
67325: LIST
67326: PPUSH
67327: CALL_OW 69
67331: IN
67332: ST_TO_ADDR
// end ;
67333: LD_VAR 0 2
67337: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67338: LD_INT 0
67340: PPUSH
67341: PPUSH
// list := [ ] ;
67342: LD_ADDR_VAR 0 5
67346: PUSH
67347: EMPTY
67348: ST_TO_ADDR
// case d of 0 :
67349: LD_VAR 0 3
67353: PUSH
67354: LD_INT 0
67356: DOUBLE
67357: EQUAL
67358: IFTRUE 67362
67360: GO 67495
67362: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67363: LD_ADDR_VAR 0 5
67367: PUSH
67368: LD_VAR 0 1
67372: PUSH
67373: LD_INT 4
67375: MINUS
67376: PUSH
67377: LD_VAR 0 2
67381: PUSH
67382: LD_INT 4
67384: MINUS
67385: PUSH
67386: LD_INT 2
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: PUSH
67394: LD_VAR 0 1
67398: PUSH
67399: LD_INT 3
67401: MINUS
67402: PUSH
67403: LD_VAR 0 2
67407: PUSH
67408: LD_INT 1
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: LIST
67415: PUSH
67416: LD_VAR 0 1
67420: PUSH
67421: LD_INT 4
67423: PLUS
67424: PUSH
67425: LD_VAR 0 2
67429: PUSH
67430: LD_INT 4
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: LIST
67437: PUSH
67438: LD_VAR 0 1
67442: PUSH
67443: LD_INT 3
67445: PLUS
67446: PUSH
67447: LD_VAR 0 2
67451: PUSH
67452: LD_INT 3
67454: PLUS
67455: PUSH
67456: LD_INT 5
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: LIST
67463: PUSH
67464: LD_VAR 0 1
67468: PUSH
67469: LD_VAR 0 2
67473: PUSH
67474: LD_INT 4
67476: PLUS
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: ST_TO_ADDR
// end ; 1 :
67493: GO 68193
67495: LD_INT 1
67497: DOUBLE
67498: EQUAL
67499: IFTRUE 67503
67501: GO 67636
67503: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67504: LD_ADDR_VAR 0 5
67508: PUSH
67509: LD_VAR 0 1
67513: PUSH
67514: LD_VAR 0 2
67518: PUSH
67519: LD_INT 4
67521: MINUS
67522: PUSH
67523: LD_INT 3
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: LIST
67530: PUSH
67531: LD_VAR 0 1
67535: PUSH
67536: LD_INT 3
67538: MINUS
67539: PUSH
67540: LD_VAR 0 2
67544: PUSH
67545: LD_INT 3
67547: MINUS
67548: PUSH
67549: LD_INT 2
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: PUSH
67557: LD_VAR 0 1
67561: PUSH
67562: LD_INT 4
67564: MINUS
67565: PUSH
67566: LD_VAR 0 2
67570: PUSH
67571: LD_INT 1
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: PUSH
67579: LD_VAR 0 1
67583: PUSH
67584: LD_VAR 0 2
67588: PUSH
67589: LD_INT 3
67591: PLUS
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: PUSH
67601: LD_VAR 0 1
67605: PUSH
67606: LD_INT 4
67608: PLUS
67609: PUSH
67610: LD_VAR 0 2
67614: PUSH
67615: LD_INT 4
67617: PLUS
67618: PUSH
67619: LD_INT 5
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: LIST
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: ST_TO_ADDR
// end ; 2 :
67634: GO 68193
67636: LD_INT 2
67638: DOUBLE
67639: EQUAL
67640: IFTRUE 67644
67642: GO 67773
67644: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67645: LD_ADDR_VAR 0 5
67649: PUSH
67650: LD_VAR 0 1
67654: PUSH
67655: LD_VAR 0 2
67659: PUSH
67660: LD_INT 3
67662: MINUS
67663: PUSH
67664: LD_INT 3
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: LIST
67671: PUSH
67672: LD_VAR 0 1
67676: PUSH
67677: LD_INT 4
67679: PLUS
67680: PUSH
67681: LD_VAR 0 2
67685: PUSH
67686: LD_INT 4
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: LIST
67693: PUSH
67694: LD_VAR 0 1
67698: PUSH
67699: LD_VAR 0 2
67703: PUSH
67704: LD_INT 4
67706: PLUS
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: LIST
67715: PUSH
67716: LD_VAR 0 1
67720: PUSH
67721: LD_INT 3
67723: MINUS
67724: PUSH
67725: LD_VAR 0 2
67729: PUSH
67730: LD_INT 1
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: LIST
67737: PUSH
67738: LD_VAR 0 1
67742: PUSH
67743: LD_INT 4
67745: MINUS
67746: PUSH
67747: LD_VAR 0 2
67751: PUSH
67752: LD_INT 4
67754: MINUS
67755: PUSH
67756: LD_INT 2
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: LIST
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: ST_TO_ADDR
// end ; 3 :
67771: GO 68193
67773: LD_INT 3
67775: DOUBLE
67776: EQUAL
67777: IFTRUE 67781
67779: GO 67914
67781: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67782: LD_ADDR_VAR 0 5
67786: PUSH
67787: LD_VAR 0 1
67791: PUSH
67792: LD_INT 3
67794: PLUS
67795: PUSH
67796: LD_VAR 0 2
67800: PUSH
67801: LD_INT 4
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: LIST
67808: PUSH
67809: LD_VAR 0 1
67813: PUSH
67814: LD_INT 4
67816: PLUS
67817: PUSH
67818: LD_VAR 0 2
67822: PUSH
67823: LD_INT 4
67825: PLUS
67826: PUSH
67827: LD_INT 5
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: LIST
67834: PUSH
67835: LD_VAR 0 1
67839: PUSH
67840: LD_INT 4
67842: MINUS
67843: PUSH
67844: LD_VAR 0 2
67848: PUSH
67849: LD_INT 1
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: LIST
67856: PUSH
67857: LD_VAR 0 1
67861: PUSH
67862: LD_VAR 0 2
67866: PUSH
67867: LD_INT 4
67869: MINUS
67870: PUSH
67871: LD_INT 3
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: LIST
67878: PUSH
67879: LD_VAR 0 1
67883: PUSH
67884: LD_INT 3
67886: MINUS
67887: PUSH
67888: LD_VAR 0 2
67892: PUSH
67893: LD_INT 3
67895: MINUS
67896: PUSH
67897: LD_INT 2
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: LIST
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: ST_TO_ADDR
// end ; 4 :
67912: GO 68193
67914: LD_INT 4
67916: DOUBLE
67917: EQUAL
67918: IFTRUE 67922
67920: GO 68055
67922: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67923: LD_ADDR_VAR 0 5
67927: PUSH
67928: LD_VAR 0 1
67932: PUSH
67933: LD_VAR 0 2
67937: PUSH
67938: LD_INT 4
67940: PLUS
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: LIST
67949: PUSH
67950: LD_VAR 0 1
67954: PUSH
67955: LD_INT 3
67957: PLUS
67958: PUSH
67959: LD_VAR 0 2
67963: PUSH
67964: LD_INT 3
67966: PLUS
67967: PUSH
67968: LD_INT 5
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: LIST
67975: PUSH
67976: LD_VAR 0 1
67980: PUSH
67981: LD_INT 4
67983: PLUS
67984: PUSH
67985: LD_VAR 0 2
67989: PUSH
67990: LD_INT 4
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: LIST
67997: PUSH
67998: LD_VAR 0 1
68002: PUSH
68003: LD_VAR 0 2
68007: PUSH
68008: LD_INT 3
68010: MINUS
68011: PUSH
68012: LD_INT 3
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: LIST
68019: PUSH
68020: LD_VAR 0 1
68024: PUSH
68025: LD_INT 4
68027: MINUS
68028: PUSH
68029: LD_VAR 0 2
68033: PUSH
68034: LD_INT 4
68036: MINUS
68037: PUSH
68038: LD_INT 2
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: LIST
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: ST_TO_ADDR
// end ; 5 :
68053: GO 68193
68055: LD_INT 5
68057: DOUBLE
68058: EQUAL
68059: IFTRUE 68063
68061: GO 68192
68063: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68064: LD_ADDR_VAR 0 5
68068: PUSH
68069: LD_VAR 0 1
68073: PUSH
68074: LD_INT 4
68076: MINUS
68077: PUSH
68078: LD_VAR 0 2
68082: PUSH
68083: LD_INT 1
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: LIST
68090: PUSH
68091: LD_VAR 0 1
68095: PUSH
68096: LD_VAR 0 2
68100: PUSH
68101: LD_INT 4
68103: MINUS
68104: PUSH
68105: LD_INT 3
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: LIST
68112: PUSH
68113: LD_VAR 0 1
68117: PUSH
68118: LD_INT 4
68120: PLUS
68121: PUSH
68122: LD_VAR 0 2
68126: PUSH
68127: LD_INT 4
68129: PLUS
68130: PUSH
68131: LD_INT 5
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: LIST
68138: PUSH
68139: LD_VAR 0 1
68143: PUSH
68144: LD_INT 3
68146: PLUS
68147: PUSH
68148: LD_VAR 0 2
68152: PUSH
68153: LD_INT 4
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: LIST
68160: PUSH
68161: LD_VAR 0 1
68165: PUSH
68166: LD_VAR 0 2
68170: PUSH
68171: LD_INT 3
68173: PLUS
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: LIST
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: ST_TO_ADDR
// end ; end ;
68190: GO 68193
68192: POP
// result := list ;
68193: LD_ADDR_VAR 0 4
68197: PUSH
68198: LD_VAR 0 5
68202: ST_TO_ADDR
// end ;
68203: LD_VAR 0 4
68207: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68208: LD_INT 0
68210: PPUSH
68211: PPUSH
68212: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68213: LD_VAR 0 1
68217: NOT
68218: PUSH
68219: LD_VAR 0 2
68223: PUSH
68224: LD_INT 1
68226: PUSH
68227: LD_INT 2
68229: PUSH
68230: LD_INT 3
68232: PUSH
68233: LD_INT 4
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: IN
68242: NOT
68243: OR
68244: IFFALSE 68248
// exit ;
68246: GO 68340
// tmp := [ ] ;
68248: LD_ADDR_VAR 0 5
68252: PUSH
68253: EMPTY
68254: ST_TO_ADDR
// for i in units do
68255: LD_ADDR_VAR 0 4
68259: PUSH
68260: LD_VAR 0 1
68264: PUSH
68265: FOR_IN
68266: IFFALSE 68309
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68268: LD_ADDR_VAR 0 5
68272: PUSH
68273: LD_VAR 0 5
68277: PPUSH
68278: LD_VAR 0 5
68282: PUSH
68283: LD_INT 1
68285: PLUS
68286: PPUSH
68287: LD_VAR 0 4
68291: PPUSH
68292: LD_VAR 0 2
68296: PPUSH
68297: CALL_OW 259
68301: PPUSH
68302: CALL_OW 2
68306: ST_TO_ADDR
68307: GO 68265
68309: POP
68310: POP
// if not tmp then
68311: LD_VAR 0 5
68315: NOT
68316: IFFALSE 68320
// exit ;
68318: GO 68340
// result := SortListByListDesc ( units , tmp ) ;
68320: LD_ADDR_VAR 0 3
68324: PUSH
68325: LD_VAR 0 1
68329: PPUSH
68330: LD_VAR 0 5
68334: PPUSH
68335: CALL_OW 77
68339: ST_TO_ADDR
// end ;
68340: LD_VAR 0 3
68344: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68345: LD_INT 0
68347: PPUSH
68348: PPUSH
68349: PPUSH
// result := false ;
68350: LD_ADDR_VAR 0 3
68354: PUSH
68355: LD_INT 0
68357: ST_TO_ADDR
// x := GetX ( building ) ;
68358: LD_ADDR_VAR 0 4
68362: PUSH
68363: LD_VAR 0 2
68367: PPUSH
68368: CALL_OW 250
68372: ST_TO_ADDR
// y := GetY ( building ) ;
68373: LD_ADDR_VAR 0 5
68377: PUSH
68378: LD_VAR 0 2
68382: PPUSH
68383: CALL_OW 251
68387: ST_TO_ADDR
// if not building or not x or not y then
68388: LD_VAR 0 2
68392: NOT
68393: PUSH
68394: LD_VAR 0 4
68398: NOT
68399: OR
68400: PUSH
68401: LD_VAR 0 5
68405: NOT
68406: OR
68407: IFFALSE 68411
// exit ;
68409: GO 68503
// if GetTaskList ( unit ) then
68411: LD_VAR 0 1
68415: PPUSH
68416: CALL_OW 437
68420: IFFALSE 68503
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68422: LD_STRING e
68424: PUSH
68425: LD_VAR 0 1
68429: PPUSH
68430: CALL_OW 437
68434: PUSH
68435: LD_INT 1
68437: ARRAY
68438: PUSH
68439: LD_INT 1
68441: ARRAY
68442: EQUAL
68443: PUSH
68444: LD_VAR 0 4
68448: PUSH
68449: LD_VAR 0 1
68453: PPUSH
68454: CALL_OW 437
68458: PUSH
68459: LD_INT 1
68461: ARRAY
68462: PUSH
68463: LD_INT 2
68465: ARRAY
68466: EQUAL
68467: AND
68468: PUSH
68469: LD_VAR 0 5
68473: PUSH
68474: LD_VAR 0 1
68478: PPUSH
68479: CALL_OW 437
68483: PUSH
68484: LD_INT 1
68486: ARRAY
68487: PUSH
68488: LD_INT 3
68490: ARRAY
68491: EQUAL
68492: AND
68493: IFFALSE 68503
// result := true end ;
68495: LD_ADDR_VAR 0 3
68499: PUSH
68500: LD_INT 1
68502: ST_TO_ADDR
// end ;
68503: LD_VAR 0 3
68507: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68508: LD_INT 0
68510: PPUSH
// result := false ;
68511: LD_ADDR_VAR 0 4
68515: PUSH
68516: LD_INT 0
68518: ST_TO_ADDR
// if GetTaskList ( unit ) then
68519: LD_VAR 0 1
68523: PPUSH
68524: CALL_OW 437
68528: IFFALSE 68611
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68530: LD_STRING M
68532: PUSH
68533: LD_VAR 0 1
68537: PPUSH
68538: CALL_OW 437
68542: PUSH
68543: LD_INT 1
68545: ARRAY
68546: PUSH
68547: LD_INT 1
68549: ARRAY
68550: EQUAL
68551: PUSH
68552: LD_VAR 0 2
68556: PUSH
68557: LD_VAR 0 1
68561: PPUSH
68562: CALL_OW 437
68566: PUSH
68567: LD_INT 1
68569: ARRAY
68570: PUSH
68571: LD_INT 2
68573: ARRAY
68574: EQUAL
68575: AND
68576: PUSH
68577: LD_VAR 0 3
68581: PUSH
68582: LD_VAR 0 1
68586: PPUSH
68587: CALL_OW 437
68591: PUSH
68592: LD_INT 1
68594: ARRAY
68595: PUSH
68596: LD_INT 3
68598: ARRAY
68599: EQUAL
68600: AND
68601: IFFALSE 68611
// result := true ;
68603: LD_ADDR_VAR 0 4
68607: PUSH
68608: LD_INT 1
68610: ST_TO_ADDR
// end ; end ;
68611: LD_VAR 0 4
68615: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68616: LD_INT 0
68618: PPUSH
68619: PPUSH
68620: PPUSH
68621: PPUSH
// if not unit or not area then
68622: LD_VAR 0 1
68626: NOT
68627: PUSH
68628: LD_VAR 0 2
68632: NOT
68633: OR
68634: IFFALSE 68638
// exit ;
68636: GO 68802
// tmp := AreaToList ( area , i ) ;
68638: LD_ADDR_VAR 0 6
68642: PUSH
68643: LD_VAR 0 2
68647: PPUSH
68648: LD_VAR 0 5
68652: PPUSH
68653: CALL_OW 517
68657: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68658: LD_ADDR_VAR 0 5
68662: PUSH
68663: DOUBLE
68664: LD_INT 1
68666: DEC
68667: ST_TO_ADDR
68668: LD_VAR 0 6
68672: PUSH
68673: LD_INT 1
68675: ARRAY
68676: PUSH
68677: FOR_TO
68678: IFFALSE 68800
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68680: LD_ADDR_VAR 0 7
68684: PUSH
68685: LD_VAR 0 6
68689: PUSH
68690: LD_INT 1
68692: ARRAY
68693: PUSH
68694: LD_VAR 0 5
68698: ARRAY
68699: PUSH
68700: LD_VAR 0 6
68704: PUSH
68705: LD_INT 2
68707: ARRAY
68708: PUSH
68709: LD_VAR 0 5
68713: ARRAY
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68719: LD_VAR 0 7
68723: PUSH
68724: LD_INT 1
68726: ARRAY
68727: PPUSH
68728: LD_VAR 0 7
68732: PUSH
68733: LD_INT 2
68735: ARRAY
68736: PPUSH
68737: CALL_OW 428
68741: PUSH
68742: LD_INT 0
68744: EQUAL
68745: IFFALSE 68798
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68747: LD_VAR 0 1
68751: PPUSH
68752: LD_VAR 0 7
68756: PUSH
68757: LD_INT 1
68759: ARRAY
68760: PPUSH
68761: LD_VAR 0 7
68765: PUSH
68766: LD_INT 2
68768: ARRAY
68769: PPUSH
68770: LD_VAR 0 3
68774: PPUSH
68775: CALL_OW 48
// result := IsPlaced ( unit ) ;
68779: LD_ADDR_VAR 0 4
68783: PUSH
68784: LD_VAR 0 1
68788: PPUSH
68789: CALL_OW 305
68793: ST_TO_ADDR
// exit ;
68794: POP
68795: POP
68796: GO 68802
// end ; end ;
68798: GO 68677
68800: POP
68801: POP
// end ;
68802: LD_VAR 0 4
68806: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68807: LD_INT 0
68809: PPUSH
68810: PPUSH
68811: PPUSH
// if not side or side > 8 then
68812: LD_VAR 0 1
68816: NOT
68817: PUSH
68818: LD_VAR 0 1
68822: PUSH
68823: LD_INT 8
68825: GREATER
68826: OR
68827: IFFALSE 68831
// exit ;
68829: GO 69018
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68831: LD_ADDR_VAR 0 4
68835: PUSH
68836: LD_INT 22
68838: PUSH
68839: LD_VAR 0 1
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 21
68850: PUSH
68851: LD_INT 3
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PPUSH
68862: CALL_OW 69
68866: ST_TO_ADDR
// if not tmp then
68867: LD_VAR 0 4
68871: NOT
68872: IFFALSE 68876
// exit ;
68874: GO 69018
// enable_addtolog := true ;
68876: LD_ADDR_OWVAR 81
68880: PUSH
68881: LD_INT 1
68883: ST_TO_ADDR
// AddToLog ( [ ) ;
68884: LD_STRING [
68886: PPUSH
68887: CALL_OW 561
// for i in tmp do
68891: LD_ADDR_VAR 0 3
68895: PUSH
68896: LD_VAR 0 4
68900: PUSH
68901: FOR_IN
68902: IFFALSE 69009
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68904: LD_STRING [
68906: PUSH
68907: LD_VAR 0 3
68911: PPUSH
68912: CALL_OW 266
68916: STR
68917: PUSH
68918: LD_STRING , 
68920: STR
68921: PUSH
68922: LD_VAR 0 3
68926: PPUSH
68927: CALL_OW 250
68931: STR
68932: PUSH
68933: LD_STRING , 
68935: STR
68936: PUSH
68937: LD_VAR 0 3
68941: PPUSH
68942: CALL_OW 251
68946: STR
68947: PUSH
68948: LD_STRING , 
68950: STR
68951: PUSH
68952: LD_VAR 0 3
68956: PPUSH
68957: CALL_OW 254
68961: STR
68962: PUSH
68963: LD_STRING , 
68965: STR
68966: PUSH
68967: LD_VAR 0 3
68971: PPUSH
68972: LD_INT 1
68974: PPUSH
68975: CALL_OW 268
68979: STR
68980: PUSH
68981: LD_STRING , 
68983: STR
68984: PUSH
68985: LD_VAR 0 3
68989: PPUSH
68990: LD_INT 2
68992: PPUSH
68993: CALL_OW 268
68997: STR
68998: PUSH
68999: LD_STRING ],
69001: STR
69002: PPUSH
69003: CALL_OW 561
// end ;
69007: GO 68901
69009: POP
69010: POP
// AddToLog ( ]; ) ;
69011: LD_STRING ];
69013: PPUSH
69014: CALL_OW 561
// end ;
69018: LD_VAR 0 2
69022: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69023: LD_INT 0
69025: PPUSH
69026: PPUSH
69027: PPUSH
69028: PPUSH
69029: PPUSH
// if not area or not rate or not max then
69030: LD_VAR 0 1
69034: NOT
69035: PUSH
69036: LD_VAR 0 2
69040: NOT
69041: OR
69042: PUSH
69043: LD_VAR 0 4
69047: NOT
69048: OR
69049: IFFALSE 69053
// exit ;
69051: GO 69242
// while 1 do
69053: LD_INT 1
69055: IFFALSE 69242
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69057: LD_ADDR_VAR 0 9
69061: PUSH
69062: LD_VAR 0 1
69066: PPUSH
69067: LD_INT 1
69069: PPUSH
69070: CALL_OW 287
69074: PUSH
69075: LD_INT 10
69077: MUL
69078: ST_TO_ADDR
// r := rate / 10 ;
69079: LD_ADDR_VAR 0 7
69083: PUSH
69084: LD_VAR 0 2
69088: PUSH
69089: LD_INT 10
69091: DIVREAL
69092: ST_TO_ADDR
// time := 1 1$00 ;
69093: LD_ADDR_VAR 0 8
69097: PUSH
69098: LD_INT 2100
69100: ST_TO_ADDR
// if amount < min then
69101: LD_VAR 0 9
69105: PUSH
69106: LD_VAR 0 3
69110: LESS
69111: IFFALSE 69129
// r := r * 2 else
69113: LD_ADDR_VAR 0 7
69117: PUSH
69118: LD_VAR 0 7
69122: PUSH
69123: LD_INT 2
69125: MUL
69126: ST_TO_ADDR
69127: GO 69155
// if amount > max then
69129: LD_VAR 0 9
69133: PUSH
69134: LD_VAR 0 4
69138: GREATER
69139: IFFALSE 69155
// r := r / 2 ;
69141: LD_ADDR_VAR 0 7
69145: PUSH
69146: LD_VAR 0 7
69150: PUSH
69151: LD_INT 2
69153: DIVREAL
69154: ST_TO_ADDR
// time := time / r ;
69155: LD_ADDR_VAR 0 8
69159: PUSH
69160: LD_VAR 0 8
69164: PUSH
69165: LD_VAR 0 7
69169: DIVREAL
69170: ST_TO_ADDR
// if time < 0 then
69171: LD_VAR 0 8
69175: PUSH
69176: LD_INT 0
69178: LESS
69179: IFFALSE 69196
// time := time * - 1 ;
69181: LD_ADDR_VAR 0 8
69185: PUSH
69186: LD_VAR 0 8
69190: PUSH
69191: LD_INT 1
69193: NEG
69194: MUL
69195: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69196: LD_VAR 0 8
69200: PUSH
69201: LD_INT 35
69203: PPUSH
69204: LD_INT 875
69206: PPUSH
69207: CALL_OW 12
69211: PLUS
69212: PPUSH
69213: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69217: LD_INT 1
69219: PPUSH
69220: LD_INT 5
69222: PPUSH
69223: CALL_OW 12
69227: PPUSH
69228: LD_VAR 0 1
69232: PPUSH
69233: LD_INT 1
69235: PPUSH
69236: CALL_OW 55
// end ;
69240: GO 69053
// end ;
69242: LD_VAR 0 5
69246: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69247: LD_INT 0
69249: PPUSH
69250: PPUSH
69251: PPUSH
69252: PPUSH
69253: PPUSH
69254: PPUSH
69255: PPUSH
69256: PPUSH
// if not turrets or not factories then
69257: LD_VAR 0 1
69261: NOT
69262: PUSH
69263: LD_VAR 0 2
69267: NOT
69268: OR
69269: IFFALSE 69273
// exit ;
69271: GO 69580
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69273: LD_ADDR_VAR 0 10
69277: PUSH
69278: LD_INT 5
69280: PUSH
69281: LD_INT 6
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 2
69290: PUSH
69291: LD_INT 4
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 3
69300: PUSH
69301: LD_INT 5
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 24
69315: PUSH
69316: LD_INT 25
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 23
69325: PUSH
69326: LD_INT 27
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 42
69339: PUSH
69340: LD_INT 43
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 44
69349: PUSH
69350: LD_INT 46
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 45
69359: PUSH
69360: LD_INT 47
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: LIST
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: LIST
69376: ST_TO_ADDR
// result := [ ] ;
69377: LD_ADDR_VAR 0 3
69381: PUSH
69382: EMPTY
69383: ST_TO_ADDR
// for i in turrets do
69384: LD_ADDR_VAR 0 4
69388: PUSH
69389: LD_VAR 0 1
69393: PUSH
69394: FOR_IN
69395: IFFALSE 69578
// begin nat := GetNation ( i ) ;
69397: LD_ADDR_VAR 0 7
69401: PUSH
69402: LD_VAR 0 4
69406: PPUSH
69407: CALL_OW 248
69411: ST_TO_ADDR
// weapon := 0 ;
69412: LD_ADDR_VAR 0 8
69416: PUSH
69417: LD_INT 0
69419: ST_TO_ADDR
// if not nat then
69420: LD_VAR 0 7
69424: NOT
69425: IFFALSE 69429
// continue ;
69427: GO 69394
// for j in list [ nat ] do
69429: LD_ADDR_VAR 0 5
69433: PUSH
69434: LD_VAR 0 10
69438: PUSH
69439: LD_VAR 0 7
69443: ARRAY
69444: PUSH
69445: FOR_IN
69446: IFFALSE 69487
// if GetBWeapon ( i ) = j [ 1 ] then
69448: LD_VAR 0 4
69452: PPUSH
69453: CALL_OW 269
69457: PUSH
69458: LD_VAR 0 5
69462: PUSH
69463: LD_INT 1
69465: ARRAY
69466: EQUAL
69467: IFFALSE 69485
// begin weapon := j [ 2 ] ;
69469: LD_ADDR_VAR 0 8
69473: PUSH
69474: LD_VAR 0 5
69478: PUSH
69479: LD_INT 2
69481: ARRAY
69482: ST_TO_ADDR
// break ;
69483: GO 69487
// end ;
69485: GO 69445
69487: POP
69488: POP
// if not weapon then
69489: LD_VAR 0 8
69493: NOT
69494: IFFALSE 69498
// continue ;
69496: GO 69394
// for k in factories do
69498: LD_ADDR_VAR 0 6
69502: PUSH
69503: LD_VAR 0 2
69507: PUSH
69508: FOR_IN
69509: IFFALSE 69574
// begin weapons := AvailableWeaponList ( k ) ;
69511: LD_ADDR_VAR 0 9
69515: PUSH
69516: LD_VAR 0 6
69520: PPUSH
69521: CALL_OW 478
69525: ST_TO_ADDR
// if not weapons then
69526: LD_VAR 0 9
69530: NOT
69531: IFFALSE 69535
// continue ;
69533: GO 69508
// if weapon in weapons then
69535: LD_VAR 0 8
69539: PUSH
69540: LD_VAR 0 9
69544: IN
69545: IFFALSE 69572
// begin result := [ i , weapon ] ;
69547: LD_ADDR_VAR 0 3
69551: PUSH
69552: LD_VAR 0 4
69556: PUSH
69557: LD_VAR 0 8
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: ST_TO_ADDR
// exit ;
69566: POP
69567: POP
69568: POP
69569: POP
69570: GO 69580
// end ; end ;
69572: GO 69508
69574: POP
69575: POP
// end ;
69576: GO 69394
69578: POP
69579: POP
// end ;
69580: LD_VAR 0 3
69584: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69585: LD_INT 0
69587: PPUSH
// if not side or side > 8 then
69588: LD_VAR 0 3
69592: NOT
69593: PUSH
69594: LD_VAR 0 3
69598: PUSH
69599: LD_INT 8
69601: GREATER
69602: OR
69603: IFFALSE 69607
// exit ;
69605: GO 69666
// if not range then
69607: LD_VAR 0 4
69611: NOT
69612: IFFALSE 69623
// range := - 12 ;
69614: LD_ADDR_VAR 0 4
69618: PUSH
69619: LD_INT 12
69621: NEG
69622: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69623: LD_VAR 0 1
69627: PPUSH
69628: LD_VAR 0 2
69632: PPUSH
69633: LD_VAR 0 3
69637: PPUSH
69638: LD_VAR 0 4
69642: PPUSH
69643: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69647: LD_VAR 0 1
69651: PPUSH
69652: LD_VAR 0 2
69656: PPUSH
69657: LD_VAR 0 3
69661: PPUSH
69662: CALL_OW 331
// end ;
69666: LD_VAR 0 5
69670: RET
// export function Video ( mode ) ; begin
69671: LD_INT 0
69673: PPUSH
// ingame_video = mode ;
69674: LD_ADDR_OWVAR 52
69678: PUSH
69679: LD_VAR 0 1
69683: ST_TO_ADDR
// interface_hidden = mode ;
69684: LD_ADDR_OWVAR 54
69688: PUSH
69689: LD_VAR 0 1
69693: ST_TO_ADDR
// end ;
69694: LD_VAR 0 2
69698: RET
// export function Join ( array , element ) ; begin
69699: LD_INT 0
69701: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69702: LD_ADDR_VAR 0 3
69706: PUSH
69707: LD_VAR 0 1
69711: PPUSH
69712: LD_VAR 0 1
69716: PUSH
69717: LD_INT 1
69719: PLUS
69720: PPUSH
69721: LD_VAR 0 2
69725: PPUSH
69726: CALL_OW 1
69730: ST_TO_ADDR
// end ;
69731: LD_VAR 0 3
69735: RET
// export function JoinUnion ( array , element ) ; begin
69736: LD_INT 0
69738: PPUSH
// result := array union element ;
69739: LD_ADDR_VAR 0 3
69743: PUSH
69744: LD_VAR 0 1
69748: PUSH
69749: LD_VAR 0 2
69753: UNION
69754: ST_TO_ADDR
// end ;
69755: LD_VAR 0 3
69759: RET
// export function GetBehemoths ( side ) ; begin
69760: LD_INT 0
69762: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69763: LD_ADDR_VAR 0 2
69767: PUSH
69768: LD_INT 22
69770: PUSH
69771: LD_VAR 0 1
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 31
69782: PUSH
69783: LD_INT 25
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PPUSH
69794: CALL_OW 69
69798: ST_TO_ADDR
// end ;
69799: LD_VAR 0 2
69803: RET
// export function Shuffle ( array ) ; var i , index ; begin
69804: LD_INT 0
69806: PPUSH
69807: PPUSH
69808: PPUSH
// result := [ ] ;
69809: LD_ADDR_VAR 0 2
69813: PUSH
69814: EMPTY
69815: ST_TO_ADDR
// if not array then
69816: LD_VAR 0 1
69820: NOT
69821: IFFALSE 69825
// exit ;
69823: GO 69924
// Randomize ;
69825: CALL_OW 10
// for i = array downto 1 do
69829: LD_ADDR_VAR 0 3
69833: PUSH
69834: DOUBLE
69835: LD_VAR 0 1
69839: INC
69840: ST_TO_ADDR
69841: LD_INT 1
69843: PUSH
69844: FOR_DOWNTO
69845: IFFALSE 69922
// begin index := rand ( 1 , array ) ;
69847: LD_ADDR_VAR 0 4
69851: PUSH
69852: LD_INT 1
69854: PPUSH
69855: LD_VAR 0 1
69859: PPUSH
69860: CALL_OW 12
69864: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69865: LD_ADDR_VAR 0 2
69869: PUSH
69870: LD_VAR 0 2
69874: PPUSH
69875: LD_VAR 0 2
69879: PUSH
69880: LD_INT 1
69882: PLUS
69883: PPUSH
69884: LD_VAR 0 1
69888: PUSH
69889: LD_VAR 0 4
69893: ARRAY
69894: PPUSH
69895: CALL_OW 2
69899: ST_TO_ADDR
// array := Delete ( array , index ) ;
69900: LD_ADDR_VAR 0 1
69904: PUSH
69905: LD_VAR 0 1
69909: PPUSH
69910: LD_VAR 0 4
69914: PPUSH
69915: CALL_OW 3
69919: ST_TO_ADDR
// end ;
69920: GO 69844
69922: POP
69923: POP
// end ;
69924: LD_VAR 0 2
69928: RET
// export function GetBaseMaterials ( base ) ; begin
69929: LD_INT 0
69931: PPUSH
// result := [ 0 , 0 , 0 ] ;
69932: LD_ADDR_VAR 0 2
69936: PUSH
69937: LD_INT 0
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: LD_INT 0
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: LIST
69950: ST_TO_ADDR
// if not base then
69951: LD_VAR 0 1
69955: NOT
69956: IFFALSE 69960
// exit ;
69958: GO 70009
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69960: LD_ADDR_VAR 0 2
69964: PUSH
69965: LD_VAR 0 1
69969: PPUSH
69970: LD_INT 1
69972: PPUSH
69973: CALL_OW 275
69977: PUSH
69978: LD_VAR 0 1
69982: PPUSH
69983: LD_INT 2
69985: PPUSH
69986: CALL_OW 275
69990: PUSH
69991: LD_VAR 0 1
69995: PPUSH
69996: LD_INT 3
69998: PPUSH
69999: CALL_OW 275
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: LIST
70008: ST_TO_ADDR
// end ;
70009: LD_VAR 0 2
70013: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70014: LD_INT 0
70016: PPUSH
70017: PPUSH
// result := array ;
70018: LD_ADDR_VAR 0 3
70022: PUSH
70023: LD_VAR 0 1
70027: ST_TO_ADDR
// if size >= result then
70028: LD_VAR 0 2
70032: PUSH
70033: LD_VAR 0 3
70037: GREATEREQUAL
70038: IFFALSE 70042
// exit ;
70040: GO 70092
// if size then
70042: LD_VAR 0 2
70046: IFFALSE 70092
// for i := array downto size do
70048: LD_ADDR_VAR 0 4
70052: PUSH
70053: DOUBLE
70054: LD_VAR 0 1
70058: INC
70059: ST_TO_ADDR
70060: LD_VAR 0 2
70064: PUSH
70065: FOR_DOWNTO
70066: IFFALSE 70090
// result := Delete ( result , result ) ;
70068: LD_ADDR_VAR 0 3
70072: PUSH
70073: LD_VAR 0 3
70077: PPUSH
70078: LD_VAR 0 3
70082: PPUSH
70083: CALL_OW 3
70087: ST_TO_ADDR
70088: GO 70065
70090: POP
70091: POP
// end ;
70092: LD_VAR 0 3
70096: RET
// export function ComExit ( unit ) ; var tmp ; begin
70097: LD_INT 0
70099: PPUSH
70100: PPUSH
// if not IsInUnit ( unit ) then
70101: LD_VAR 0 1
70105: PPUSH
70106: CALL_OW 310
70110: NOT
70111: IFFALSE 70115
// exit ;
70113: GO 70175
// tmp := IsInUnit ( unit ) ;
70115: LD_ADDR_VAR 0 3
70119: PUSH
70120: LD_VAR 0 1
70124: PPUSH
70125: CALL_OW 310
70129: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70130: LD_VAR 0 3
70134: PPUSH
70135: CALL_OW 247
70139: PUSH
70140: LD_INT 2
70142: EQUAL
70143: IFFALSE 70156
// ComExitVehicle ( unit ) else
70145: LD_VAR 0 1
70149: PPUSH
70150: CALL_OW 121
70154: GO 70165
// ComExitBuilding ( unit ) ;
70156: LD_VAR 0 1
70160: PPUSH
70161: CALL_OW 122
// result := tmp ;
70165: LD_ADDR_VAR 0 2
70169: PUSH
70170: LD_VAR 0 3
70174: ST_TO_ADDR
// end ;
70175: LD_VAR 0 2
70179: RET
// export function ComExitAll ( units ) ; var i ; begin
70180: LD_INT 0
70182: PPUSH
70183: PPUSH
// if not units then
70184: LD_VAR 0 1
70188: NOT
70189: IFFALSE 70193
// exit ;
70191: GO 70219
// for i in units do
70193: LD_ADDR_VAR 0 3
70197: PUSH
70198: LD_VAR 0 1
70202: PUSH
70203: FOR_IN
70204: IFFALSE 70217
// ComExit ( i ) ;
70206: LD_VAR 0 3
70210: PPUSH
70211: CALL 70097 0 1
70215: GO 70203
70217: POP
70218: POP
// end ;
70219: LD_VAR 0 2
70223: RET
// export function ResetHc ; begin
70224: LD_INT 0
70226: PPUSH
// InitHc ;
70227: CALL_OW 19
// hc_importance := 0 ;
70231: LD_ADDR_OWVAR 32
70235: PUSH
70236: LD_INT 0
70238: ST_TO_ADDR
// end ;
70239: LD_VAR 0 1
70243: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70244: LD_INT 0
70246: PPUSH
70247: PPUSH
70248: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70249: LD_ADDR_VAR 0 6
70253: PUSH
70254: LD_VAR 0 1
70258: PUSH
70259: LD_VAR 0 3
70263: PLUS
70264: PUSH
70265: LD_INT 2
70267: DIV
70268: ST_TO_ADDR
// if _x < 0 then
70269: LD_VAR 0 6
70273: PUSH
70274: LD_INT 0
70276: LESS
70277: IFFALSE 70294
// _x := _x * - 1 ;
70279: LD_ADDR_VAR 0 6
70283: PUSH
70284: LD_VAR 0 6
70288: PUSH
70289: LD_INT 1
70291: NEG
70292: MUL
70293: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70294: LD_ADDR_VAR 0 7
70298: PUSH
70299: LD_VAR 0 2
70303: PUSH
70304: LD_VAR 0 4
70308: PLUS
70309: PUSH
70310: LD_INT 2
70312: DIV
70313: ST_TO_ADDR
// if _y < 0 then
70314: LD_VAR 0 7
70318: PUSH
70319: LD_INT 0
70321: LESS
70322: IFFALSE 70339
// _y := _y * - 1 ;
70324: LD_ADDR_VAR 0 7
70328: PUSH
70329: LD_VAR 0 7
70333: PUSH
70334: LD_INT 1
70336: NEG
70337: MUL
70338: ST_TO_ADDR
// result := [ _x , _y ] ;
70339: LD_ADDR_VAR 0 5
70343: PUSH
70344: LD_VAR 0 6
70348: PUSH
70349: LD_VAR 0 7
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: ST_TO_ADDR
// end ;
70358: LD_VAR 0 5
70362: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70363: LD_INT 0
70365: PPUSH
70366: PPUSH
70367: PPUSH
70368: PPUSH
// task := GetTaskList ( unit ) ;
70369: LD_ADDR_VAR 0 7
70373: PUSH
70374: LD_VAR 0 1
70378: PPUSH
70379: CALL_OW 437
70383: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70384: LD_VAR 0 7
70388: NOT
70389: PUSH
70390: LD_VAR 0 1
70394: PPUSH
70395: LD_VAR 0 2
70399: PPUSH
70400: CALL_OW 308
70404: NOT
70405: AND
70406: IFFALSE 70410
// exit ;
70408: GO 70528
// if IsInArea ( unit , area ) then
70410: LD_VAR 0 1
70414: PPUSH
70415: LD_VAR 0 2
70419: PPUSH
70420: CALL_OW 308
70424: IFFALSE 70442
// begin ComMoveToArea ( unit , goAway ) ;
70426: LD_VAR 0 1
70430: PPUSH
70431: LD_VAR 0 3
70435: PPUSH
70436: CALL_OW 113
// exit ;
70440: GO 70528
// end ; if task [ 1 ] [ 1 ] <> M then
70442: LD_VAR 0 7
70446: PUSH
70447: LD_INT 1
70449: ARRAY
70450: PUSH
70451: LD_INT 1
70453: ARRAY
70454: PUSH
70455: LD_STRING M
70457: NONEQUAL
70458: IFFALSE 70462
// exit ;
70460: GO 70528
// x := task [ 1 ] [ 2 ] ;
70462: LD_ADDR_VAR 0 5
70466: PUSH
70467: LD_VAR 0 7
70471: PUSH
70472: LD_INT 1
70474: ARRAY
70475: PUSH
70476: LD_INT 2
70478: ARRAY
70479: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70480: LD_ADDR_VAR 0 6
70484: PUSH
70485: LD_VAR 0 7
70489: PUSH
70490: LD_INT 1
70492: ARRAY
70493: PUSH
70494: LD_INT 3
70496: ARRAY
70497: ST_TO_ADDR
// if InArea ( x , y , area ) then
70498: LD_VAR 0 5
70502: PPUSH
70503: LD_VAR 0 6
70507: PPUSH
70508: LD_VAR 0 2
70512: PPUSH
70513: CALL_OW 309
70517: IFFALSE 70528
// ComStop ( unit ) ;
70519: LD_VAR 0 1
70523: PPUSH
70524: CALL_OW 141
// end ;
70528: LD_VAR 0 4
70532: RET
// export function Abs ( value ) ; begin
70533: LD_INT 0
70535: PPUSH
// result := value ;
70536: LD_ADDR_VAR 0 2
70540: PUSH
70541: LD_VAR 0 1
70545: ST_TO_ADDR
// if value < 0 then
70546: LD_VAR 0 1
70550: PUSH
70551: LD_INT 0
70553: LESS
70554: IFFALSE 70571
// result := value * - 1 ;
70556: LD_ADDR_VAR 0 2
70560: PUSH
70561: LD_VAR 0 1
70565: PUSH
70566: LD_INT 1
70568: NEG
70569: MUL
70570: ST_TO_ADDR
// end ;
70571: LD_VAR 0 2
70575: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70576: LD_INT 0
70578: PPUSH
70579: PPUSH
70580: PPUSH
70581: PPUSH
70582: PPUSH
70583: PPUSH
70584: PPUSH
70585: PPUSH
// if not unit or not building then
70586: LD_VAR 0 1
70590: NOT
70591: PUSH
70592: LD_VAR 0 2
70596: NOT
70597: OR
70598: IFFALSE 70602
// exit ;
70600: GO 70828
// x := GetX ( building ) ;
70602: LD_ADDR_VAR 0 4
70606: PUSH
70607: LD_VAR 0 2
70611: PPUSH
70612: CALL_OW 250
70616: ST_TO_ADDR
// y := GetY ( building ) ;
70617: LD_ADDR_VAR 0 6
70621: PUSH
70622: LD_VAR 0 2
70626: PPUSH
70627: CALL_OW 251
70631: ST_TO_ADDR
// d := GetDir ( building ) ;
70632: LD_ADDR_VAR 0 8
70636: PUSH
70637: LD_VAR 0 2
70641: PPUSH
70642: CALL_OW 254
70646: ST_TO_ADDR
// r := 4 ;
70647: LD_ADDR_VAR 0 9
70651: PUSH
70652: LD_INT 4
70654: ST_TO_ADDR
// for i := 1 to 5 do
70655: LD_ADDR_VAR 0 10
70659: PUSH
70660: DOUBLE
70661: LD_INT 1
70663: DEC
70664: ST_TO_ADDR
70665: LD_INT 5
70667: PUSH
70668: FOR_TO
70669: IFFALSE 70826
// begin _x := ShiftX ( x , d , r + i ) ;
70671: LD_ADDR_VAR 0 5
70675: PUSH
70676: LD_VAR 0 4
70680: PPUSH
70681: LD_VAR 0 8
70685: PPUSH
70686: LD_VAR 0 9
70690: PUSH
70691: LD_VAR 0 10
70695: PLUS
70696: PPUSH
70697: CALL_OW 272
70701: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70702: LD_ADDR_VAR 0 7
70706: PUSH
70707: LD_VAR 0 6
70711: PPUSH
70712: LD_VAR 0 8
70716: PPUSH
70717: LD_VAR 0 9
70721: PUSH
70722: LD_VAR 0 10
70726: PLUS
70727: PPUSH
70728: CALL_OW 273
70732: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70733: LD_VAR 0 5
70737: PPUSH
70738: LD_VAR 0 7
70742: PPUSH
70743: CALL_OW 488
70747: PUSH
70748: LD_VAR 0 5
70752: PPUSH
70753: LD_VAR 0 7
70757: PPUSH
70758: CALL_OW 428
70762: PPUSH
70763: CALL_OW 247
70767: PUSH
70768: LD_INT 3
70770: PUSH
70771: LD_INT 2
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: IN
70778: NOT
70779: AND
70780: IFFALSE 70824
// begin ComMoveXY ( unit , _x , _y ) ;
70782: LD_VAR 0 1
70786: PPUSH
70787: LD_VAR 0 5
70791: PPUSH
70792: LD_VAR 0 7
70796: PPUSH
70797: CALL_OW 111
// result := [ _x , _y ] ;
70801: LD_ADDR_VAR 0 3
70805: PUSH
70806: LD_VAR 0 5
70810: PUSH
70811: LD_VAR 0 7
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: ST_TO_ADDR
// exit ;
70820: POP
70821: POP
70822: GO 70828
// end ; end ;
70824: GO 70668
70826: POP
70827: POP
// end ;
70828: LD_VAR 0 3
70832: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70833: LD_INT 0
70835: PPUSH
70836: PPUSH
70837: PPUSH
// result := 0 ;
70838: LD_ADDR_VAR 0 3
70842: PUSH
70843: LD_INT 0
70845: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70846: LD_VAR 0 1
70850: PUSH
70851: LD_INT 0
70853: LESS
70854: PUSH
70855: LD_VAR 0 1
70859: PUSH
70860: LD_INT 8
70862: GREATER
70863: OR
70864: PUSH
70865: LD_VAR 0 2
70869: PUSH
70870: LD_INT 0
70872: LESS
70873: OR
70874: PUSH
70875: LD_VAR 0 2
70879: PUSH
70880: LD_INT 8
70882: GREATER
70883: OR
70884: IFFALSE 70888
// exit ;
70886: GO 70963
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70888: LD_ADDR_VAR 0 4
70892: PUSH
70893: LD_INT 22
70895: PUSH
70896: LD_VAR 0 2
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PPUSH
70905: CALL_OW 69
70909: PUSH
70910: FOR_IN
70911: IFFALSE 70961
// begin un := UnitShoot ( i ) ;
70913: LD_ADDR_VAR 0 5
70917: PUSH
70918: LD_VAR 0 4
70922: PPUSH
70923: CALL_OW 504
70927: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70928: LD_VAR 0 5
70932: PPUSH
70933: CALL_OW 255
70937: PUSH
70938: LD_VAR 0 1
70942: EQUAL
70943: IFFALSE 70959
// begin result := un ;
70945: LD_ADDR_VAR 0 3
70949: PUSH
70950: LD_VAR 0 5
70954: ST_TO_ADDR
// exit ;
70955: POP
70956: POP
70957: GO 70963
// end ; end ;
70959: GO 70910
70961: POP
70962: POP
// end ;
70963: LD_VAR 0 3
70967: RET
// export function GetCargoBay ( units ) ; begin
70968: LD_INT 0
70970: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70971: LD_ADDR_VAR 0 2
70975: PUSH
70976: LD_VAR 0 1
70980: PPUSH
70981: LD_INT 2
70983: PUSH
70984: LD_INT 34
70986: PUSH
70987: LD_INT 12
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 34
70996: PUSH
70997: LD_INT 51
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 34
71006: PUSH
71007: LD_INT 32
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 34
71016: PUSH
71017: LD_EXP 22
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: PPUSH
71033: CALL_OW 72
71037: ST_TO_ADDR
// end ;
71038: LD_VAR 0 2
71042: RET
// export function Negate ( value ) ; begin
71043: LD_INT 0
71045: PPUSH
// result := not value ;
71046: LD_ADDR_VAR 0 2
71050: PUSH
71051: LD_VAR 0 1
71055: NOT
71056: ST_TO_ADDR
// end ;
71057: LD_VAR 0 2
71061: RET
// export function Inc ( value ) ; begin
71062: LD_INT 0
71064: PPUSH
// result := value + 1 ;
71065: LD_ADDR_VAR 0 2
71069: PUSH
71070: LD_VAR 0 1
71074: PUSH
71075: LD_INT 1
71077: PLUS
71078: ST_TO_ADDR
// end ;
71079: LD_VAR 0 2
71083: RET
// export function Dec ( value ) ; begin
71084: LD_INT 0
71086: PPUSH
// result := value - 1 ;
71087: LD_ADDR_VAR 0 2
71091: PUSH
71092: LD_VAR 0 1
71096: PUSH
71097: LD_INT 1
71099: MINUS
71100: ST_TO_ADDR
// end ;
71101: LD_VAR 0 2
71105: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71106: LD_INT 0
71108: PPUSH
71109: PPUSH
71110: PPUSH
71111: PPUSH
71112: PPUSH
71113: PPUSH
71114: PPUSH
71115: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71116: LD_VAR 0 1
71120: PPUSH
71121: LD_VAR 0 2
71125: PPUSH
71126: CALL_OW 488
71130: NOT
71131: PUSH
71132: LD_VAR 0 3
71136: PPUSH
71137: LD_VAR 0 4
71141: PPUSH
71142: CALL_OW 488
71146: NOT
71147: OR
71148: IFFALSE 71161
// begin result := - 1 ;
71150: LD_ADDR_VAR 0 5
71154: PUSH
71155: LD_INT 1
71157: NEG
71158: ST_TO_ADDR
// exit ;
71159: GO 71396
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71161: LD_ADDR_VAR 0 12
71165: PUSH
71166: LD_VAR 0 1
71170: PPUSH
71171: LD_VAR 0 2
71175: PPUSH
71176: LD_VAR 0 3
71180: PPUSH
71181: LD_VAR 0 4
71185: PPUSH
71186: CALL 70244 0 4
71190: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71191: LD_ADDR_VAR 0 11
71195: PUSH
71196: LD_VAR 0 1
71200: PPUSH
71201: LD_VAR 0 2
71205: PPUSH
71206: LD_VAR 0 12
71210: PUSH
71211: LD_INT 1
71213: ARRAY
71214: PPUSH
71215: LD_VAR 0 12
71219: PUSH
71220: LD_INT 2
71222: ARRAY
71223: PPUSH
71224: CALL_OW 298
71228: ST_TO_ADDR
// distance := 9999 ;
71229: LD_ADDR_VAR 0 10
71233: PUSH
71234: LD_INT 9999
71236: ST_TO_ADDR
// for i := 0 to 5 do
71237: LD_ADDR_VAR 0 6
71241: PUSH
71242: DOUBLE
71243: LD_INT 0
71245: DEC
71246: ST_TO_ADDR
71247: LD_INT 5
71249: PUSH
71250: FOR_TO
71251: IFFALSE 71394
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71253: LD_ADDR_VAR 0 7
71257: PUSH
71258: LD_VAR 0 1
71262: PPUSH
71263: LD_VAR 0 6
71267: PPUSH
71268: LD_VAR 0 11
71272: PPUSH
71273: CALL_OW 272
71277: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71278: LD_ADDR_VAR 0 8
71282: PUSH
71283: LD_VAR 0 2
71287: PPUSH
71288: LD_VAR 0 6
71292: PPUSH
71293: LD_VAR 0 11
71297: PPUSH
71298: CALL_OW 273
71302: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71303: LD_VAR 0 7
71307: PPUSH
71308: LD_VAR 0 8
71312: PPUSH
71313: CALL_OW 488
71317: NOT
71318: IFFALSE 71322
// continue ;
71320: GO 71250
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71322: LD_ADDR_VAR 0 9
71326: PUSH
71327: LD_VAR 0 12
71331: PUSH
71332: LD_INT 1
71334: ARRAY
71335: PPUSH
71336: LD_VAR 0 12
71340: PUSH
71341: LD_INT 2
71343: ARRAY
71344: PPUSH
71345: LD_VAR 0 7
71349: PPUSH
71350: LD_VAR 0 8
71354: PPUSH
71355: CALL_OW 298
71359: ST_TO_ADDR
// if tmp < distance then
71360: LD_VAR 0 9
71364: PUSH
71365: LD_VAR 0 10
71369: LESS
71370: IFFALSE 71392
// begin result := i ;
71372: LD_ADDR_VAR 0 5
71376: PUSH
71377: LD_VAR 0 6
71381: ST_TO_ADDR
// distance := tmp ;
71382: LD_ADDR_VAR 0 10
71386: PUSH
71387: LD_VAR 0 9
71391: ST_TO_ADDR
// end ; end ;
71392: GO 71250
71394: POP
71395: POP
// end ;
71396: LD_VAR 0 5
71400: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71401: LD_INT 0
71403: PPUSH
71404: PPUSH
// if not driver or not IsInUnit ( driver ) then
71405: LD_VAR 0 1
71409: NOT
71410: PUSH
71411: LD_VAR 0 1
71415: PPUSH
71416: CALL_OW 310
71420: NOT
71421: OR
71422: IFFALSE 71426
// exit ;
71424: GO 71516
// vehicle := IsInUnit ( driver ) ;
71426: LD_ADDR_VAR 0 3
71430: PUSH
71431: LD_VAR 0 1
71435: PPUSH
71436: CALL_OW 310
71440: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71441: LD_VAR 0 1
71445: PPUSH
71446: LD_STRING \
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: LD_INT 0
71454: PUSH
71455: LD_INT 0
71457: PUSH
71458: LD_INT 0
71460: PUSH
71461: LD_INT 0
71463: PUSH
71464: LD_INT 0
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: PUSH
71476: LD_STRING E
71478: PUSH
71479: LD_INT 0
71481: PUSH
71482: LD_INT 0
71484: PUSH
71485: LD_VAR 0 3
71489: PUSH
71490: LD_INT 0
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PPUSH
71512: CALL_OW 446
// end ;
71516: LD_VAR 0 2
71520: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71521: LD_INT 0
71523: PPUSH
71524: PPUSH
// if not driver or not IsInUnit ( driver ) then
71525: LD_VAR 0 1
71529: NOT
71530: PUSH
71531: LD_VAR 0 1
71535: PPUSH
71536: CALL_OW 310
71540: NOT
71541: OR
71542: IFFALSE 71546
// exit ;
71544: GO 71636
// vehicle := IsInUnit ( driver ) ;
71546: LD_ADDR_VAR 0 3
71550: PUSH
71551: LD_VAR 0 1
71555: PPUSH
71556: CALL_OW 310
71560: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71561: LD_VAR 0 1
71565: PPUSH
71566: LD_STRING \
71568: PUSH
71569: LD_INT 0
71571: PUSH
71572: LD_INT 0
71574: PUSH
71575: LD_INT 0
71577: PUSH
71578: LD_INT 0
71580: PUSH
71581: LD_INT 0
71583: PUSH
71584: LD_INT 0
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: PUSH
71596: LD_STRING E
71598: PUSH
71599: LD_INT 0
71601: PUSH
71602: LD_INT 0
71604: PUSH
71605: LD_VAR 0 3
71609: PUSH
71610: LD_INT 0
71612: PUSH
71613: LD_INT 0
71615: PUSH
71616: LD_INT 0
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PPUSH
71632: CALL_OW 447
// end ;
71636: LD_VAR 0 2
71640: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71641: LD_INT 0
71643: PPUSH
71644: PPUSH
71645: PPUSH
// tmp := [ ] ;
71646: LD_ADDR_VAR 0 5
71650: PUSH
71651: EMPTY
71652: ST_TO_ADDR
// for i in units do
71653: LD_ADDR_VAR 0 4
71657: PUSH
71658: LD_VAR 0 1
71662: PUSH
71663: FOR_IN
71664: IFFALSE 71702
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71666: LD_ADDR_VAR 0 5
71670: PUSH
71671: LD_VAR 0 5
71675: PPUSH
71676: LD_VAR 0 5
71680: PUSH
71681: LD_INT 1
71683: PLUS
71684: PPUSH
71685: LD_VAR 0 4
71689: PPUSH
71690: CALL_OW 256
71694: PPUSH
71695: CALL_OW 2
71699: ST_TO_ADDR
71700: GO 71663
71702: POP
71703: POP
// if not tmp then
71704: LD_VAR 0 5
71708: NOT
71709: IFFALSE 71713
// exit ;
71711: GO 71761
// if asc then
71713: LD_VAR 0 2
71717: IFFALSE 71741
// result := SortListByListAsc ( units , tmp ) else
71719: LD_ADDR_VAR 0 3
71723: PUSH
71724: LD_VAR 0 1
71728: PPUSH
71729: LD_VAR 0 5
71733: PPUSH
71734: CALL_OW 76
71738: ST_TO_ADDR
71739: GO 71761
// result := SortListByListDesc ( units , tmp ) ;
71741: LD_ADDR_VAR 0 3
71745: PUSH
71746: LD_VAR 0 1
71750: PPUSH
71751: LD_VAR 0 5
71755: PPUSH
71756: CALL_OW 77
71760: ST_TO_ADDR
// end ;
71761: LD_VAR 0 3
71765: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71766: LD_INT 0
71768: PPUSH
71769: PPUSH
// task := GetTaskList ( mech ) ;
71770: LD_ADDR_VAR 0 4
71774: PUSH
71775: LD_VAR 0 1
71779: PPUSH
71780: CALL_OW 437
71784: ST_TO_ADDR
// if not task then
71785: LD_VAR 0 4
71789: NOT
71790: IFFALSE 71794
// exit ;
71792: GO 71836
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71794: LD_ADDR_VAR 0 3
71798: PUSH
71799: LD_VAR 0 4
71803: PUSH
71804: LD_INT 1
71806: ARRAY
71807: PUSH
71808: LD_INT 1
71810: ARRAY
71811: PUSH
71812: LD_STRING r
71814: EQUAL
71815: PUSH
71816: LD_VAR 0 4
71820: PUSH
71821: LD_INT 1
71823: ARRAY
71824: PUSH
71825: LD_INT 4
71827: ARRAY
71828: PUSH
71829: LD_VAR 0 2
71833: EQUAL
71834: AND
71835: ST_TO_ADDR
// end ;
71836: LD_VAR 0 3
71840: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71841: LD_INT 0
71843: PPUSH
// SetDir ( unit , d ) ;
71844: LD_VAR 0 1
71848: PPUSH
71849: LD_VAR 0 4
71853: PPUSH
71854: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71858: LD_VAR 0 1
71862: PPUSH
71863: LD_VAR 0 2
71867: PPUSH
71868: LD_VAR 0 3
71872: PPUSH
71873: LD_VAR 0 5
71877: PPUSH
71878: CALL_OW 48
// end ;
71882: LD_VAR 0 6
71886: RET
// export function ToNaturalNumber ( number ) ; begin
71887: LD_INT 0
71889: PPUSH
// result := number div 1 ;
71890: LD_ADDR_VAR 0 2
71894: PUSH
71895: LD_VAR 0 1
71899: PUSH
71900: LD_INT 1
71902: DIV
71903: ST_TO_ADDR
// if number < 0 then
71904: LD_VAR 0 1
71908: PUSH
71909: LD_INT 0
71911: LESS
71912: IFFALSE 71922
// result := 0 ;
71914: LD_ADDR_VAR 0 2
71918: PUSH
71919: LD_INT 0
71921: ST_TO_ADDR
// end ;
71922: LD_VAR 0 2
71926: RET
// export function SortByClass ( units , class ) ; var un ; begin
71927: LD_INT 0
71929: PPUSH
71930: PPUSH
// if not units or not class then
71931: LD_VAR 0 1
71935: NOT
71936: PUSH
71937: LD_VAR 0 2
71941: NOT
71942: OR
71943: IFFALSE 71947
// exit ;
71945: GO 72042
// result := [ ] ;
71947: LD_ADDR_VAR 0 3
71951: PUSH
71952: EMPTY
71953: ST_TO_ADDR
// for un in units do
71954: LD_ADDR_VAR 0 4
71958: PUSH
71959: LD_VAR 0 1
71963: PUSH
71964: FOR_IN
71965: IFFALSE 72040
// if GetClass ( un ) = class then
71967: LD_VAR 0 4
71971: PPUSH
71972: CALL_OW 257
71976: PUSH
71977: LD_VAR 0 2
71981: EQUAL
71982: IFFALSE 72009
// result := Insert ( result , 1 , un ) else
71984: LD_ADDR_VAR 0 3
71988: PUSH
71989: LD_VAR 0 3
71993: PPUSH
71994: LD_INT 1
71996: PPUSH
71997: LD_VAR 0 4
72001: PPUSH
72002: CALL_OW 2
72006: ST_TO_ADDR
72007: GO 72038
// result := Replace ( result , result + 1 , un ) ;
72009: LD_ADDR_VAR 0 3
72013: PUSH
72014: LD_VAR 0 3
72018: PPUSH
72019: LD_VAR 0 3
72023: PUSH
72024: LD_INT 1
72026: PLUS
72027: PPUSH
72028: LD_VAR 0 4
72032: PPUSH
72033: CALL_OW 1
72037: ST_TO_ADDR
72038: GO 71964
72040: POP
72041: POP
// end ;
72042: LD_VAR 0 3
72046: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72047: LD_INT 0
72049: PPUSH
72050: PPUSH
72051: PPUSH
72052: PPUSH
72053: PPUSH
72054: PPUSH
72055: PPUSH
// result := [ ] ;
72056: LD_ADDR_VAR 0 4
72060: PUSH
72061: EMPTY
72062: ST_TO_ADDR
// if x - r < 0 then
72063: LD_VAR 0 1
72067: PUSH
72068: LD_VAR 0 3
72072: MINUS
72073: PUSH
72074: LD_INT 0
72076: LESS
72077: IFFALSE 72089
// min_x := 0 else
72079: LD_ADDR_VAR 0 8
72083: PUSH
72084: LD_INT 0
72086: ST_TO_ADDR
72087: GO 72105
// min_x := x - r ;
72089: LD_ADDR_VAR 0 8
72093: PUSH
72094: LD_VAR 0 1
72098: PUSH
72099: LD_VAR 0 3
72103: MINUS
72104: ST_TO_ADDR
// if y - r < 0 then
72105: LD_VAR 0 2
72109: PUSH
72110: LD_VAR 0 3
72114: MINUS
72115: PUSH
72116: LD_INT 0
72118: LESS
72119: IFFALSE 72131
// min_y := 0 else
72121: LD_ADDR_VAR 0 7
72125: PUSH
72126: LD_INT 0
72128: ST_TO_ADDR
72129: GO 72147
// min_y := y - r ;
72131: LD_ADDR_VAR 0 7
72135: PUSH
72136: LD_VAR 0 2
72140: PUSH
72141: LD_VAR 0 3
72145: MINUS
72146: ST_TO_ADDR
// max_x := x + r ;
72147: LD_ADDR_VAR 0 9
72151: PUSH
72152: LD_VAR 0 1
72156: PUSH
72157: LD_VAR 0 3
72161: PLUS
72162: ST_TO_ADDR
// max_y := y + r ;
72163: LD_ADDR_VAR 0 10
72167: PUSH
72168: LD_VAR 0 2
72172: PUSH
72173: LD_VAR 0 3
72177: PLUS
72178: ST_TO_ADDR
// for _x = min_x to max_x do
72179: LD_ADDR_VAR 0 5
72183: PUSH
72184: DOUBLE
72185: LD_VAR 0 8
72189: DEC
72190: ST_TO_ADDR
72191: LD_VAR 0 9
72195: PUSH
72196: FOR_TO
72197: IFFALSE 72298
// for _y = min_y to max_y do
72199: LD_ADDR_VAR 0 6
72203: PUSH
72204: DOUBLE
72205: LD_VAR 0 7
72209: DEC
72210: ST_TO_ADDR
72211: LD_VAR 0 10
72215: PUSH
72216: FOR_TO
72217: IFFALSE 72294
// begin if not ValidHex ( _x , _y ) then
72219: LD_VAR 0 5
72223: PPUSH
72224: LD_VAR 0 6
72228: PPUSH
72229: CALL_OW 488
72233: NOT
72234: IFFALSE 72238
// continue ;
72236: GO 72216
// if GetResourceTypeXY ( _x , _y ) then
72238: LD_VAR 0 5
72242: PPUSH
72243: LD_VAR 0 6
72247: PPUSH
72248: CALL_OW 283
72252: IFFALSE 72292
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72254: LD_ADDR_VAR 0 4
72258: PUSH
72259: LD_VAR 0 4
72263: PPUSH
72264: LD_VAR 0 4
72268: PUSH
72269: LD_INT 1
72271: PLUS
72272: PPUSH
72273: LD_VAR 0 5
72277: PUSH
72278: LD_VAR 0 6
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PPUSH
72287: CALL_OW 1
72291: ST_TO_ADDR
// end ;
72292: GO 72216
72294: POP
72295: POP
72296: GO 72196
72298: POP
72299: POP
// end ;
72300: LD_VAR 0 4
72304: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72305: LD_INT 0
72307: PPUSH
72308: PPUSH
72309: PPUSH
72310: PPUSH
72311: PPUSH
72312: PPUSH
72313: PPUSH
72314: PPUSH
// if not units then
72315: LD_VAR 0 1
72319: NOT
72320: IFFALSE 72324
// exit ;
72322: GO 72850
// result := UnitFilter ( units , [ f_ok ] ) ;
72324: LD_ADDR_VAR 0 3
72328: PUSH
72329: LD_VAR 0 1
72333: PPUSH
72334: LD_INT 50
72336: PUSH
72337: EMPTY
72338: LIST
72339: PPUSH
72340: CALL_OW 72
72344: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72345: LD_ADDR_VAR 0 8
72349: PUSH
72350: LD_VAR 0 1
72354: PUSH
72355: LD_INT 1
72357: ARRAY
72358: PPUSH
72359: CALL_OW 255
72363: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72364: LD_ADDR_VAR 0 10
72368: PUSH
72369: LD_INT 29
72371: PUSH
72372: LD_EXP 25
72376: PUSH
72377: LD_INT 49
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: LIST
72384: ST_TO_ADDR
// if not result then
72385: LD_VAR 0 3
72389: NOT
72390: IFFALSE 72394
// exit ;
72392: GO 72850
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72394: LD_ADDR_VAR 0 5
72398: PUSH
72399: LD_INT 81
72401: PUSH
72402: LD_VAR 0 8
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PPUSH
72411: CALL_OW 69
72415: ST_TO_ADDR
// for i in result do
72416: LD_ADDR_VAR 0 4
72420: PUSH
72421: LD_VAR 0 3
72425: PUSH
72426: FOR_IN
72427: IFFALSE 72848
// begin tag := GetTag ( i ) + 1 ;
72429: LD_ADDR_VAR 0 9
72433: PUSH
72434: LD_VAR 0 4
72438: PPUSH
72439: CALL_OW 110
72443: PUSH
72444: LD_INT 1
72446: PLUS
72447: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72448: LD_ADDR_VAR 0 7
72452: PUSH
72453: LD_VAR 0 4
72457: PPUSH
72458: CALL_OW 250
72462: PPUSH
72463: LD_VAR 0 4
72467: PPUSH
72468: CALL_OW 251
72472: PPUSH
72473: LD_INT 6
72475: PPUSH
72476: CALL 72047 0 3
72480: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72481: LD_VAR 0 4
72485: PPUSH
72486: CALL_OW 247
72490: PUSH
72491: LD_INT 2
72493: EQUAL
72494: PUSH
72495: LD_VAR 0 7
72499: AND
72500: PUSH
72501: LD_VAR 0 4
72505: PPUSH
72506: CALL_OW 264
72510: PUSH
72511: LD_VAR 0 10
72515: IN
72516: NOT
72517: AND
72518: IFFALSE 72557
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72520: LD_VAR 0 4
72524: PPUSH
72525: LD_VAR 0 7
72529: PUSH
72530: LD_INT 1
72532: ARRAY
72533: PUSH
72534: LD_INT 1
72536: ARRAY
72537: PPUSH
72538: LD_VAR 0 7
72542: PUSH
72543: LD_INT 1
72545: ARRAY
72546: PUSH
72547: LD_INT 2
72549: ARRAY
72550: PPUSH
72551: CALL_OW 116
72555: GO 72846
// if path > tag then
72557: LD_VAR 0 2
72561: PUSH
72562: LD_VAR 0 9
72566: GREATER
72567: IFFALSE 72775
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72569: LD_ADDR_VAR 0 6
72573: PUSH
72574: LD_VAR 0 5
72578: PPUSH
72579: LD_INT 91
72581: PUSH
72582: LD_VAR 0 4
72586: PUSH
72587: LD_INT 8
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: LIST
72594: PPUSH
72595: CALL_OW 72
72599: ST_TO_ADDR
// if nearEnemy then
72600: LD_VAR 0 6
72604: IFFALSE 72673
// begin if GetWeapon ( i ) = ru_time_lapser then
72606: LD_VAR 0 4
72610: PPUSH
72611: CALL_OW 264
72615: PUSH
72616: LD_INT 49
72618: EQUAL
72619: IFFALSE 72647
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72621: LD_VAR 0 4
72625: PPUSH
72626: LD_VAR 0 6
72630: PPUSH
72631: LD_VAR 0 4
72635: PPUSH
72636: CALL_OW 74
72640: PPUSH
72641: CALL_OW 112
72645: GO 72671
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72647: LD_VAR 0 4
72651: PPUSH
72652: LD_VAR 0 6
72656: PPUSH
72657: LD_VAR 0 4
72661: PPUSH
72662: CALL_OW 74
72666: PPUSH
72667: CALL_OW 115
// end else
72671: GO 72773
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72673: LD_VAR 0 4
72677: PPUSH
72678: LD_VAR 0 2
72682: PUSH
72683: LD_VAR 0 9
72687: ARRAY
72688: PUSH
72689: LD_INT 1
72691: ARRAY
72692: PPUSH
72693: LD_VAR 0 2
72697: PUSH
72698: LD_VAR 0 9
72702: ARRAY
72703: PUSH
72704: LD_INT 2
72706: ARRAY
72707: PPUSH
72708: CALL_OW 297
72712: PUSH
72713: LD_INT 6
72715: GREATER
72716: IFFALSE 72759
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72718: LD_VAR 0 4
72722: PPUSH
72723: LD_VAR 0 2
72727: PUSH
72728: LD_VAR 0 9
72732: ARRAY
72733: PUSH
72734: LD_INT 1
72736: ARRAY
72737: PPUSH
72738: LD_VAR 0 2
72742: PUSH
72743: LD_VAR 0 9
72747: ARRAY
72748: PUSH
72749: LD_INT 2
72751: ARRAY
72752: PPUSH
72753: CALL_OW 114
72757: GO 72773
// SetTag ( i , tag ) ;
72759: LD_VAR 0 4
72763: PPUSH
72764: LD_VAR 0 9
72768: PPUSH
72769: CALL_OW 109
// end else
72773: GO 72846
// if enemy then
72775: LD_VAR 0 5
72779: IFFALSE 72846
// begin if GetWeapon ( i ) = ru_time_lapser then
72781: LD_VAR 0 4
72785: PPUSH
72786: CALL_OW 264
72790: PUSH
72791: LD_INT 49
72793: EQUAL
72794: IFFALSE 72822
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72796: LD_VAR 0 4
72800: PPUSH
72801: LD_VAR 0 5
72805: PPUSH
72806: LD_VAR 0 4
72810: PPUSH
72811: CALL_OW 74
72815: PPUSH
72816: CALL_OW 112
72820: GO 72846
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72822: LD_VAR 0 4
72826: PPUSH
72827: LD_VAR 0 5
72831: PPUSH
72832: LD_VAR 0 4
72836: PPUSH
72837: CALL_OW 74
72841: PPUSH
72842: CALL_OW 115
// end ; end ;
72846: GO 72426
72848: POP
72849: POP
// end ;
72850: LD_VAR 0 3
72854: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72855: LD_INT 0
72857: PPUSH
72858: PPUSH
72859: PPUSH
// if not unit or IsInUnit ( unit ) then
72860: LD_VAR 0 1
72864: NOT
72865: PUSH
72866: LD_VAR 0 1
72870: PPUSH
72871: CALL_OW 310
72875: OR
72876: IFFALSE 72880
// exit ;
72878: GO 72971
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72880: LD_ADDR_VAR 0 4
72884: PUSH
72885: LD_VAR 0 1
72889: PPUSH
72890: CALL_OW 250
72894: PPUSH
72895: LD_VAR 0 2
72899: PPUSH
72900: LD_INT 1
72902: PPUSH
72903: CALL_OW 272
72907: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72908: LD_ADDR_VAR 0 5
72912: PUSH
72913: LD_VAR 0 1
72917: PPUSH
72918: CALL_OW 251
72922: PPUSH
72923: LD_VAR 0 2
72927: PPUSH
72928: LD_INT 1
72930: PPUSH
72931: CALL_OW 273
72935: ST_TO_ADDR
// if ValidHex ( x , y ) then
72936: LD_VAR 0 4
72940: PPUSH
72941: LD_VAR 0 5
72945: PPUSH
72946: CALL_OW 488
72950: IFFALSE 72971
// ComTurnXY ( unit , x , y ) ;
72952: LD_VAR 0 1
72956: PPUSH
72957: LD_VAR 0 4
72961: PPUSH
72962: LD_VAR 0 5
72966: PPUSH
72967: CALL_OW 118
// end ;
72971: LD_VAR 0 3
72975: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72976: LD_INT 0
72978: PPUSH
72979: PPUSH
// result := false ;
72980: LD_ADDR_VAR 0 3
72984: PUSH
72985: LD_INT 0
72987: ST_TO_ADDR
// if not units then
72988: LD_VAR 0 2
72992: NOT
72993: IFFALSE 72997
// exit ;
72995: GO 73042
// for i in units do
72997: LD_ADDR_VAR 0 4
73001: PUSH
73002: LD_VAR 0 2
73006: PUSH
73007: FOR_IN
73008: IFFALSE 73040
// if See ( side , i ) then
73010: LD_VAR 0 1
73014: PPUSH
73015: LD_VAR 0 4
73019: PPUSH
73020: CALL_OW 292
73024: IFFALSE 73038
// begin result := true ;
73026: LD_ADDR_VAR 0 3
73030: PUSH
73031: LD_INT 1
73033: ST_TO_ADDR
// exit ;
73034: POP
73035: POP
73036: GO 73042
// end ;
73038: GO 73007
73040: POP
73041: POP
// end ;
73042: LD_VAR 0 3
73046: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73047: LD_INT 0
73049: PPUSH
73050: PPUSH
73051: PPUSH
73052: PPUSH
// if not unit or not points then
73053: LD_VAR 0 1
73057: NOT
73058: PUSH
73059: LD_VAR 0 2
73063: NOT
73064: OR
73065: IFFALSE 73069
// exit ;
73067: GO 73159
// dist := 99999 ;
73069: LD_ADDR_VAR 0 5
73073: PUSH
73074: LD_INT 99999
73076: ST_TO_ADDR
// for i in points do
73077: LD_ADDR_VAR 0 4
73081: PUSH
73082: LD_VAR 0 2
73086: PUSH
73087: FOR_IN
73088: IFFALSE 73157
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73090: LD_ADDR_VAR 0 6
73094: PUSH
73095: LD_VAR 0 1
73099: PPUSH
73100: LD_VAR 0 4
73104: PUSH
73105: LD_INT 1
73107: ARRAY
73108: PPUSH
73109: LD_VAR 0 4
73113: PUSH
73114: LD_INT 2
73116: ARRAY
73117: PPUSH
73118: CALL_OW 297
73122: ST_TO_ADDR
// if tmpDist < dist then
73123: LD_VAR 0 6
73127: PUSH
73128: LD_VAR 0 5
73132: LESS
73133: IFFALSE 73155
// begin result := i ;
73135: LD_ADDR_VAR 0 3
73139: PUSH
73140: LD_VAR 0 4
73144: ST_TO_ADDR
// dist := tmpDist ;
73145: LD_ADDR_VAR 0 5
73149: PUSH
73150: LD_VAR 0 6
73154: ST_TO_ADDR
// end ; end ;
73155: GO 73087
73157: POP
73158: POP
// end ;
73159: LD_VAR 0 3
73163: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73164: LD_INT 0
73166: PPUSH
// uc_side := side ;
73167: LD_ADDR_OWVAR 20
73171: PUSH
73172: LD_VAR 0 1
73176: ST_TO_ADDR
// uc_nation := 3 ;
73177: LD_ADDR_OWVAR 21
73181: PUSH
73182: LD_INT 3
73184: ST_TO_ADDR
// vc_chassis := 25 ;
73185: LD_ADDR_OWVAR 37
73189: PUSH
73190: LD_INT 25
73192: ST_TO_ADDR
// vc_engine := engine_siberite ;
73193: LD_ADDR_OWVAR 39
73197: PUSH
73198: LD_INT 3
73200: ST_TO_ADDR
// vc_control := control_computer ;
73201: LD_ADDR_OWVAR 38
73205: PUSH
73206: LD_INT 3
73208: ST_TO_ADDR
// vc_weapon := 59 ;
73209: LD_ADDR_OWVAR 40
73213: PUSH
73214: LD_INT 59
73216: ST_TO_ADDR
// result := CreateVehicle ;
73217: LD_ADDR_VAR 0 5
73221: PUSH
73222: CALL_OW 45
73226: ST_TO_ADDR
// SetDir ( result , d ) ;
73227: LD_VAR 0 5
73231: PPUSH
73232: LD_VAR 0 4
73236: PPUSH
73237: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73241: LD_VAR 0 5
73245: PPUSH
73246: LD_VAR 0 2
73250: PPUSH
73251: LD_VAR 0 3
73255: PPUSH
73256: LD_INT 0
73258: PPUSH
73259: CALL_OW 48
// end ;
73263: LD_VAR 0 5
73267: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73268: LD_INT 0
73270: PPUSH
73271: PPUSH
73272: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73273: LD_ADDR_VAR 0 2
73277: PUSH
73278: LD_INT 0
73280: PUSH
73281: LD_INT 0
73283: PUSH
73284: LD_INT 0
73286: PUSH
73287: LD_INT 0
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73296: LD_VAR 0 1
73300: NOT
73301: PUSH
73302: LD_VAR 0 1
73306: PPUSH
73307: CALL_OW 264
73311: PUSH
73312: LD_INT 12
73314: PUSH
73315: LD_INT 51
73317: PUSH
73318: LD_INT 32
73320: PUSH
73321: LD_EXP 22
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: IN
73332: NOT
73333: OR
73334: IFFALSE 73338
// exit ;
73336: GO 73436
// for i := 1 to 3 do
73338: LD_ADDR_VAR 0 3
73342: PUSH
73343: DOUBLE
73344: LD_INT 1
73346: DEC
73347: ST_TO_ADDR
73348: LD_INT 3
73350: PUSH
73351: FOR_TO
73352: IFFALSE 73434
// begin tmp := GetCargo ( cargo , i ) ;
73354: LD_ADDR_VAR 0 4
73358: PUSH
73359: LD_VAR 0 1
73363: PPUSH
73364: LD_VAR 0 3
73368: PPUSH
73369: CALL_OW 289
73373: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73374: LD_ADDR_VAR 0 2
73378: PUSH
73379: LD_VAR 0 2
73383: PPUSH
73384: LD_VAR 0 3
73388: PPUSH
73389: LD_VAR 0 4
73393: PPUSH
73394: CALL_OW 1
73398: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73399: LD_ADDR_VAR 0 2
73403: PUSH
73404: LD_VAR 0 2
73408: PPUSH
73409: LD_INT 4
73411: PPUSH
73412: LD_VAR 0 2
73416: PUSH
73417: LD_INT 4
73419: ARRAY
73420: PUSH
73421: LD_VAR 0 4
73425: PLUS
73426: PPUSH
73427: CALL_OW 1
73431: ST_TO_ADDR
// end ;
73432: GO 73351
73434: POP
73435: POP
// end ;
73436: LD_VAR 0 2
73440: RET
// export function Length ( array ) ; begin
73441: LD_INT 0
73443: PPUSH
// result := array + 0 ;
73444: LD_ADDR_VAR 0 2
73448: PUSH
73449: LD_VAR 0 1
73453: PUSH
73454: LD_INT 0
73456: PLUS
73457: ST_TO_ADDR
// end ;
73458: LD_VAR 0 2
73462: RET
// export function PrepareArray ( array ) ; begin
73463: LD_INT 0
73465: PPUSH
// result := array diff 0 ;
73466: LD_ADDR_VAR 0 2
73470: PUSH
73471: LD_VAR 0 1
73475: PUSH
73476: LD_INT 0
73478: DIFF
73479: ST_TO_ADDR
// if not result [ 1 ] then
73480: LD_VAR 0 2
73484: PUSH
73485: LD_INT 1
73487: ARRAY
73488: NOT
73489: IFFALSE 73509
// result := Delete ( result , 1 ) ;
73491: LD_ADDR_VAR 0 2
73495: PUSH
73496: LD_VAR 0 2
73500: PPUSH
73501: LD_INT 1
73503: PPUSH
73504: CALL_OW 3
73508: ST_TO_ADDR
// end ; end_of_file
73509: LD_VAR 0 2
73513: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73514: LD_VAR 0 1
73518: PUSH
73519: LD_INT 200
73521: DOUBLE
73522: GREATEREQUAL
73523: IFFALSE 73531
73525: LD_INT 299
73527: DOUBLE
73528: LESSEQUAL
73529: IFTRUE 73533
73531: GO 73565
73533: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73534: LD_VAR 0 1
73538: PPUSH
73539: LD_VAR 0 2
73543: PPUSH
73544: LD_VAR 0 3
73548: PPUSH
73549: LD_VAR 0 4
73553: PPUSH
73554: LD_VAR 0 5
73558: PPUSH
73559: CALL 28365 0 5
73563: GO 73642
73565: LD_INT 300
73567: DOUBLE
73568: GREATEREQUAL
73569: IFFALSE 73577
73571: LD_INT 399
73573: DOUBLE
73574: LESSEQUAL
73575: IFTRUE 73579
73577: GO 73641
73579: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73580: LD_VAR 0 1
73584: PPUSH
73585: LD_VAR 0 2
73589: PPUSH
73590: LD_VAR 0 3
73594: PPUSH
73595: LD_VAR 0 4
73599: PPUSH
73600: LD_VAR 0 5
73604: PPUSH
73605: LD_VAR 0 6
73609: PPUSH
73610: LD_VAR 0 7
73614: PPUSH
73615: LD_VAR 0 8
73619: PPUSH
73620: LD_VAR 0 9
73624: PPUSH
73625: LD_VAR 0 10
73629: PPUSH
73630: LD_VAR 0 11
73634: PPUSH
73635: CALL 24694 0 11
73639: GO 73642
73641: POP
// end ;
73642: PPOPN 11
73644: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73645: LD_VAR 0 1
73649: PPUSH
73650: LD_VAR 0 2
73654: PPUSH
73655: LD_VAR 0 3
73659: PPUSH
73660: LD_VAR 0 4
73664: PPUSH
73665: LD_VAR 0 5
73669: PPUSH
73670: CALL 28101 0 5
// end ; end_of_file
73674: PPOPN 5
73676: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73677: LD_VAR 0 1
73681: PPUSH
73682: LD_VAR 0 2
73686: PPUSH
73687: LD_VAR 0 3
73691: PPUSH
73692: LD_VAR 0 4
73696: PPUSH
73697: LD_VAR 0 5
73701: PPUSH
73702: LD_VAR 0 6
73706: PPUSH
73707: CALL 12387 0 6
// end ;
73711: PPOPN 6
73713: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73714: LD_INT 0
73716: PPUSH
// begin if not units then
73717: LD_VAR 0 1
73721: NOT
73722: IFFALSE 73726
// exit ;
73724: GO 73726
// end ;
73726: PPOPN 7
73728: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73729: CALL 12358 0 0
// end ;
73733: PPOPN 1
73735: END
